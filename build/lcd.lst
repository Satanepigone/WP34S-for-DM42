ARM GAS  /tmp/ccp7FtIo.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"lcd.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_dot,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.global	set_dot
  21              		.arch armv7e-m
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  25              		.fpu fpv4-sp-d16
  27              	set_dot:
  28              	.LVL0:
  29              	.LFB0:
  30              		.file 1 "src/lcd.c"
   1:src/lcd.c     **** /* This file is part of 34S.
   2:src/lcd.c     ****  * 
   3:src/lcd.c     ****  * 34S is free software: you can redistribute it and/or modify
   4:src/lcd.c     ****  * it under the terms of the GNU General Public License as published by
   5:src/lcd.c     ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/lcd.c     ****  * (at your option) any later version.
   7:src/lcd.c     ****  * 
   8:src/lcd.c     ****  * 34S is distributed in the hope that it will be useful,
   9:src/lcd.c     ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/lcd.c     ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/lcd.c     ****  * GNU General Public License for more details.
  12:src/lcd.c     ****  * 
  13:src/lcd.c     ****  * You should have received a copy of the GNU General Public License
  14:src/lcd.c     ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/lcd.c     ****  */
  16:src/lcd.c     **** 
  17:src/lcd.c     **** #ifdef DM42
  18:src/lcd.c     **** #include "dmcp.h"
  19:src/lcd.c     **** #endif
  20:src/lcd.c     **** 
  21:src/lcd.c     **** #define DM42SAFE
  22:src/lcd.c     **** #include "lcd.h"
  23:src/lcd.c     **** #include "display.h"
  24:src/lcd.c     **** #include "xeq.h"
  25:src/lcd.c     **** #undef DM42SAFE
  26:src/lcd.c     **** 
  27:src/lcd.c     **** #include "pretty.h"
  28:src/lcd.c     **** 
ARM GAS  /tmp/ccp7FtIo.s 			page 2


  29:src/lcd.c     **** 
  30:src/lcd.c     **** #if defined(USECURSES) || defined(DM42) // want this in DM42
  31:src/lcd.c     **** static unsigned char dots[400];
  32:src/lcd.c     **** #endif
  33:src/lcd.c     **** 
  34:src/lcd.c     **** #if defined(USECURSES) && !defined(DM42)
  35:src/lcd.c     **** static void dispreg(const char n, int index) {
  36:src/lcd.c     ****   char buf[64];
  37:src/lcd.c     ****         if (is_intmode())
  38:src/lcd.c     ****                 sprintf(buf, "%llx", (unsigned long long int)get_reg_n_int(index));
  39:src/lcd.c     ****         else {
  40:src/lcd.c     **** 		if (is_dblmode())
  41:src/lcd.c     **** 			decimal128ToString(&(get_reg_n(index)->d), buf);
  42:src/lcd.c     **** 		else
  43:src/lcd.c     **** 			decimal64ToString(&(get_reg_n(index)->s), buf);
  44:src/lcd.c     **** 	}
  45:src/lcd.c     ****         PRINTF("%c: %s", n, buf);
  46:src/lcd.c     **** }
  47:src/lcd.c     **** #endif
  48:src/lcd.c     **** 
  49:src/lcd.c     **** #if defined(USECURSES) || defined(DM42) // want this in DM42
  50:src/lcd.c     **** /* Some wrapper routines to set segments of the display */
  51:src/lcd.c     **** void set_dot(int n) {
  31              		.loc 1 51 21 view -0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 0
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  35              		@ link register save eliminated.
  52:src/lcd.c     ****         dots[n] = 1;
  36              		.loc 1 52 9 view .LVU1
  37              		.loc 1 52 17 is_stmt 0 view .LVU2
  38 0000 014B     		ldr	r3, .L3
  39 0002 0122     		movs	r2, #1
  40 0004 1A54     		strb	r2, [r3, r0]
  53:src/lcd.c     **** }
  41              		.loc 1 53 1 view .LVU3
  42 0006 7047     		bx	lr
  43              	.L4:
  44              		.align	2
  45              	.L3:
  46 0008 00000000 		.word	.LANCHOR0
  47              		.cfi_endproc
  48              	.LFE0:
  50              		.section	.text.clr_dot,"ax",%progbits
  51              		.align	1
  52              		.p2align 2,,3
  53              		.global	clr_dot
  54              		.syntax unified
  55              		.thumb
  56              		.thumb_func
  57              		.fpu fpv4-sp-d16
  59              	clr_dot:
  60              	.LVL1:
  61              	.LFB1:
  54:src/lcd.c     **** void clr_dot(int n) {
  62              		.loc 1 54 21 is_stmt 1 view -0
  63              		.cfi_startproc
ARM GAS  /tmp/ccp7FtIo.s 			page 3


  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  55:src/lcd.c     ****         dots[n] = 0;
  67              		.loc 1 55 9 view .LVU5
  68              		.loc 1 55 17 is_stmt 0 view .LVU6
  69 0000 014B     		ldr	r3, .L6
  70 0002 0022     		movs	r2, #0
  71 0004 1A54     		strb	r2, [r3, r0]
  56:src/lcd.c     **** }
  72              		.loc 1 56 1 view .LVU7
  73 0006 7047     		bx	lr
  74              	.L7:
  75              		.align	2
  76              	.L6:
  77 0008 00000000 		.word	.LANCHOR0
  78              		.cfi_endproc
  79              	.LFE1:
  81              		.section	.text.is_dot,"ax",%progbits
  82              		.align	1
  83              		.p2align 2,,3
  84              		.global	is_dot
  85              		.syntax unified
  86              		.thumb
  87              		.thumb_func
  88              		.fpu fpv4-sp-d16
  90              	is_dot:
  91              	.LVL2:
  92              	.LFB2:
  57:src/lcd.c     **** int is_dot(int n) {
  93              		.loc 1 57 19 is_stmt 1 view -0
  94              		.cfi_startproc
  95              		@ args = 0, pretend = 0, frame = 0
  96              		@ frame_needed = 0, uses_anonymous_args = 0
  97              		@ link register save eliminated.
  58:src/lcd.c     **** 	return dots[n];
  98              		.loc 1 58 2 view .LVU9
  99              		.loc 1 58 13 is_stmt 0 view .LVU10
 100 0000 014B     		ldr	r3, .L9
  59:src/lcd.c     **** }
 101              		.loc 1 59 1 view .LVU11
 102 0002 185C     		ldrb	r0, [r3, r0]	@ zero_extendqisi2
 103              	.LVL3:
 104              		.loc 1 59 1 view .LVU12
 105 0004 7047     		bx	lr
 106              	.L10:
 107 0006 00BF     		.align	2
 108              	.L9:
 109 0008 00000000 		.word	.LANCHOR0
 110              		.cfi_endproc
 111              	.LFE2:
 113              		.section	.text.setuptty,"ax",%progbits
 114              		.align	1
 115              		.p2align 2,,3
 116              		.global	setuptty
 117              		.syntax unified
 118              		.thumb
ARM GAS  /tmp/ccp7FtIo.s 			page 4


 119              		.thumb_func
 120              		.fpu fpv4-sp-d16
 122              	setuptty:
 123              	.LVL4:
 124              	.LFB3:
  60:src/lcd.c     **** #endif
  61:src/lcd.c     **** 
  62:src/lcd.c     **** int setuptty(int reset) {
 125              		.loc 1 62 25 is_stmt 1 view -0
 126              		.cfi_startproc
 127              		@ args = 0, pretend = 0, frame = 0
 128              		@ frame_needed = 0, uses_anonymous_args = 0
 129              		@ link register save eliminated.
  63:src/lcd.c     **** #ifdef CONSOLE
  64:src/lcd.c     **** #if defined(USECURSES) && !defined(DM42) //don't want this in DM42
  65:src/lcd.c     ****         if (reset)
  66:src/lcd.c     ****                 endwin();
  67:src/lcd.c     ****         else {
  68:src/lcd.c     ****                 initscr();
  69:src/lcd.c     ****                 cbreak();
  70:src/lcd.c     ****                 noecho();
  71:src/lcd.c     ****                 //keypad(stdscr, TRUE);
  72:src/lcd.c     **** 				}
  73:src/lcd.c     **** #endif
  74:src/lcd.c     **** #endif
  75:src/lcd.c     ****         return 0;
 130              		.loc 1 75 9 view .LVU14
  76:src/lcd.c     **** }
 131              		.loc 1 76 1 is_stmt 0 view .LVU15
 132 0000 0020     		movs	r0, #0
 133              	.LVL5:
 134              		.loc 1 76 1 view .LVU16
 135 0002 7047     		bx	lr
 136              		.cfi_endproc
 137              	.LFE3:
 139              		.section	.text.reset_disp,"ax",%progbits
 140              		.align	1
 141              		.p2align 2,,3
 142              		.global	reset_disp
 143              		.syntax unified
 144              		.thumb
 145              		.thumb_func
 146              		.fpu fpv4-sp-d16
 148              	reset_disp:
 149              	.LFB4:
  77:src/lcd.c     **** 
  78:src/lcd.c     **** 
  79:src/lcd.c     **** void reset_disp(void) {
 150              		.loc 1 79 23 is_stmt 1 view -0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 0, uses_anonymous_args = 0
  80:src/lcd.c     **** #ifdef DM42
  81:src/lcd.c     **** 	int rcl = is_dot(RCL_annun);
 154              		.loc 1 81 2 view .LVU18
 155              	.LVL6:
 156              	.LBB30:
ARM GAS  /tmp/ccp7FtIo.s 			page 5


 157              	.LBI30:
  57:src/lcd.c     **** 	return dots[n];
 158              		.loc 1 57 5 view .LVU19
 159              	.LBB31:
  58:src/lcd.c     **** }
 160              		.loc 1 58 2 view .LVU20
 161              	.LBE31:
 162              	.LBE30:
  79:src/lcd.c     **** #ifdef DM42
 163              		.loc 1 79 23 is_stmt 0 view .LVU21
 164 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 165              		.cfi_def_cfa_offset 32
 166              		.cfi_offset 4, -32
 167              		.cfi_offset 5, -28
 168              		.cfi_offset 6, -24
 169              		.cfi_offset 7, -20
 170              		.cfi_offset 8, -16
 171              		.cfi_offset 9, -12
 172              		.cfi_offset 10, -8
 173              		.cfi_offset 14, -4
 174              	.LBB34:
 175              	.LBB32:
  58:src/lcd.c     **** }
 176              		.loc 1 58 13 view .LVU22
 177 0004 1848     		ldr	r0, .L20
 178              	.LBE32:
 179              	.LBE34:
 180              	.LBB35:
 181              	.LBB36:
 182 0006 6FF08303 		mvn	r3, #131
 183              	.LBE36:
 184              	.LBE35:
 185              	.LBB38:
 186              	.LBB33:
 187 000a 90F88A10 		ldrb	r1, [r0, #138]	@ zero_extendqisi2
 188              	.LVL7:
  58:src/lcd.c     **** }
 189              		.loc 1 58 13 view .LVU23
 190              	.LBE33:
 191              	.LBE38:
  82:src/lcd.c     **** 	int bat = is_dot(BATTERY);
 192              		.loc 1 82 2 is_stmt 1 view .LVU24
 193              	.LBB39:
 194              	.LBI39:
  57:src/lcd.c     **** 	return dots[n];
 195              		.loc 1 57 5 view .LVU25
 196              	.LBB40:
  58:src/lcd.c     **** }
 197              		.loc 1 58 2 view .LVU26
  58:src/lcd.c     **** }
 198              		.loc 1 58 13 is_stmt 0 view .LVU27
 199 000e 90F887A0 		ldrb	r10, [r0, #135]	@ zero_extendqisi2
 200              	.LVL8:
  58:src/lcd.c     **** }
 201              		.loc 1 58 13 view .LVU28
 202              	.LBE40:
 203              	.LBE39:
ARM GAS  /tmp/ccp7FtIo.s 			page 6


  83:src/lcd.c     **** 	int leq = is_dot(LIT_EQ);
 204              		.loc 1 83 2 is_stmt 1 view .LVU29
 205              	.LBB41:
 206              	.LBI41:
  57:src/lcd.c     **** 	return dots[n];
 207              		.loc 1 57 5 view .LVU30
 208              	.LBB42:
  58:src/lcd.c     **** }
 209              		.loc 1 58 2 view .LVU31
  58:src/lcd.c     **** }
 210              		.loc 1 58 13 is_stmt 0 view .LVU32
 211 0012 90F88490 		ldrb	r9, [r0, #132]	@ zero_extendqisi2
 212              	.LVL9:
  58:src/lcd.c     **** }
 213              		.loc 1 58 13 view .LVU33
 214              	.LBE42:
 215              	.LBE41:
  84:src/lcd.c     **** 	int rpn = is_dot(RPN);
 216              		.loc 1 84 2 is_stmt 1 view .LVU34
 217              	.LBB43:
 218              	.LBI35:
  57:src/lcd.c     **** 	return dots[n];
 219              		.loc 1 57 5 view .LVU35
 220              	.LBB37:
  58:src/lcd.c     **** }
 221              		.loc 1 58 2 view .LVU36
  58:src/lcd.c     **** }
 222              		.loc 1 58 13 is_stmt 0 view .LVU37
 223 0016 90F88D80 		ldrb	r8, [r0, #141]	@ zero_extendqisi2
 224              	.LVL10:
  58:src/lcd.c     **** }
 225              		.loc 1 58 13 view .LVU38
 226              	.LBE37:
 227              	.LBE43:
  85:src/lcd.c     **** 	int i;
 228              		.loc 1 85 2 is_stmt 1 view .LVU39
  86:src/lcd.c     ****         for (i=0; i<400; i++)
 229              		.loc 1 86 9 view .LVU40
 230              		.loc 1 86 19 view .LVU41
  87:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 231              		.loc 1 87 38 is_stmt 0 view .LVU42
 232 001a 4925     		movs	r5, #73
 233              	.LBB44:
 234              	.LBB45:
  55:src/lcd.c     **** }
 235              		.loc 1 55 17 view .LVU43
 236 001c 0026     		movs	r6, #0
 237              	.LBE45:
 238              	.LBE44:
  86:src/lcd.c     ****         for (i=0; i<400; i++)
 239              		.loc 1 86 9 view .LVU44
 240 001e 40F20B17 		movw	r7, #267
 241 0022 06E0     		b	.L17
 242              	.LVL11:
 243              	.L13:
  88:src/lcd.c     **** 			clr_dot(i);
 244              		.loc 1 88 4 is_stmt 1 discriminator 2 view .LVU45
ARM GAS  /tmp/ccp7FtIo.s 			page 7


 245              	.LBB52:
 246              	.LBI44:
  54:src/lcd.c     ****         dots[n] = 0;
 247              		.loc 1 54 6 discriminator 2 view .LVU46
 248              	.LBB46:
  55:src/lcd.c     **** }
 249              		.loc 1 55 9 discriminator 2 view .LVU47
 250              	.LBE46:
 251              	.LBE52:
  87:src/lcd.c     **** 			clr_dot(i);
 252              		.loc 1 87 38 is_stmt 0 discriminator 2 view .LVU48
 253 0024 E407     		lsls	r4, r4, #31
 254              	.LBB53:
 255              	.LBB47:
  55:src/lcd.c     **** }
 256              		.loc 1 55 17 discriminator 2 view .LVU49
 257 0026 00EB0302 		add	r2, r0, r3
 258              	.LBE47:
 259              	.LBE53:
  87:src/lcd.c     **** 			clr_dot(i);
 260              		.loc 1 87 38 discriminator 2 view .LVU50
 261 002a 01D4     		bmi	.L14
 262              	.LBB54:
 263              	.LBB48:
  55:src/lcd.c     **** }
 264              		.loc 1 55 17 view .LVU51
 265 002c 82F88460 		strb	r6, [r2, #132]
 266              	.LVL12:
  55:src/lcd.c     **** }
 267              		.loc 1 55 17 view .LVU52
 268              	.LBE48:
 269              	.LBE54:
  86:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 270              		.loc 1 86 26 is_stmt 1 view .LVU53
  86:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 271              		.loc 1 86 19 view .LVU54
 272              	.L14:
  86:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 273              		.loc 1 86 19 is_stmt 0 view .LVU55
 274 0030 0133     		adds	r3, r3, #1
 275              	.L17:
 276              	.LVL13:
  87:src/lcd.c     **** 			clr_dot(i);
 277              		.loc 1 87 3 is_stmt 1 view .LVU56
 278              		.loc 1 88 4 view .LVU57
 279              	.LBB55:
  54:src/lcd.c     ****         dots[n] = 0;
 280              		.loc 1 54 6 view .LVU58
 281              	.LBB49:
  55:src/lcd.c     **** }
 282              		.loc 1 55 9 view .LVU59
 283              	.LBE49:
 284              	.LBE55:
  87:src/lcd.c     **** 			clr_dot(i);
 285              		.loc 1 87 38 is_stmt 0 view .LVU60
 286 0032 062B     		cmp	r3, #6
 287              	.LBB56:
ARM GAS  /tmp/ccp7FtIo.s 			page 8


 288              	.LBB50:
  55:src/lcd.c     **** }
 289              		.loc 1 55 17 view .LVU61
 290 0034 00EB0302 		add	r2, r0, r3
 291              	.LBE50:
 292              	.LBE56:
  87:src/lcd.c     **** 			clr_dot(i);
 293              		.loc 1 87 38 view .LVU62
 294 0038 25FA03F4 		lsr	r4, r5, r3
 295 003c F2D9     		bls	.L13
  86:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 296              		.loc 1 86 9 view .LVU63
 297 003e BB42     		cmp	r3, r7
 298              	.LBB57:
 299              	.LBB51:
  55:src/lcd.c     **** }
 300              		.loc 1 55 17 view .LVU64
 301 0040 82F88460 		strb	r6, [r2, #132]
 302              	.LVL14:
  55:src/lcd.c     **** }
 303              		.loc 1 55 17 view .LVU65
 304              	.LBE51:
 305              	.LBE57:
  86:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 306              		.loc 1 86 26 is_stmt 1 view .LVU66
  86:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 307              		.loc 1 86 19 view .LVU67
  86:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 308              		.loc 1 86 9 is_stmt 0 view .LVU68
 309 0044 F4D1     		bne	.L14
  89:src/lcd.c     **** 	dot(RCL_annun, rcl);
 310              		.loc 1 89 2 is_stmt 1 view .LVU69
 311 0046 8A20     		movs	r0, #138
 312 0048 FFF7FEFF 		bl	dot
 313              	.LVL15:
  90:src/lcd.c     **** 	dot(BATTERY, bat);
 314              		.loc 1 90 2 view .LVU70
 315 004c 5146     		mov	r1, r10
 316 004e 8720     		movs	r0, #135
 317 0050 FFF7FEFF 		bl	dot
 318              	.LVL16:
  91:src/lcd.c     **** 	dot(LIT_EQ, leq);
 319              		.loc 1 91 2 view .LVU71
 320 0054 4946     		mov	r1, r9
 321 0056 8420     		movs	r0, #132
 322 0058 FFF7FEFF 		bl	dot
 323              	.LVL17:
  92:src/lcd.c     **** 	dot(RPN, rpn);
 324              		.loc 1 92 2 view .LVU72
 325 005c 4146     		mov	r1, r8
 326 005e 8D20     		movs	r0, #141
  93:src/lcd.c     **** #else  
  94:src/lcd.c     **** #ifndef CONSOLE
  95:src/lcd.c     **** 	int rcl = is_dot(RCL_annun);
  96:src/lcd.c     **** 	int bat = is_dot(BATTERY);
  97:src/lcd.c     **** 	int leq = is_dot(LIT_EQ);
  98:src/lcd.c     **** 	int rpn = is_dot(RPN);
ARM GAS  /tmp/ccp7FtIo.s 			page 9


  99:src/lcd.c     **** #ifndef REALBUILD
 100:src/lcd.c     **** 	*LastDisplayedText = '\0';
 101:src/lcd.c     **** #endif
 102:src/lcd.c     ****         wait_for_display();
 103:src/lcd.c     **** #if defined(QTGUI) || defined(IOS)
 104:src/lcd.c     ****     	xset(LcdData, 0, sizeof(LcdData));
 105:src/lcd.c     ****     	xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
 106:src/lcd.c     ****     	LastDisplayedNumber[NUMBER_LENGTH]=0;
 107:src/lcd.c     ****     	xset(LastDisplayedExponent, ' ', EXPONENT_LENGTH);
 108:src/lcd.c     ****     	LastDisplayedExponent[EXPONENT_LENGTH]=0;
 109:src/lcd.c     **** #else
 110:src/lcd.c     ****         // terrible code which assumes int are 4 bytes long. Works fine for realbuild and for WINGU
 111:src/lcd.c     **** 	xset((void *) AT91C_SLCDC_MEM, 0, 4 * 20);
 112:src/lcd.c     **** #endif
 113:src/lcd.c     **** 	dot(RCL_annun, rcl);
 114:src/lcd.c     **** 	dot(BATTERY, bat);
 115:src/lcd.c     **** 	dot(LIT_EQ, leq);
 116:src/lcd.c     **** 	dot(RPN, rpn);
 117:src/lcd.c     **** #else
 118:src/lcd.c     **** // Console
 119:src/lcd.c     **** #ifdef USECURSES
 120:src/lcd.c     **** 	int i;
 121:src/lcd.c     ****         for (i=0; i<400; i++)
 122:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 123:src/lcd.c     **** 			clr_dot(i);
 124:src/lcd.c     **** 
 125:src/lcd.c     **** 	erase();
 126:src/lcd.c     ****         MOVE(0, 4);
 127:src/lcd.c     **** #else
 128:src/lcd.c     ****         putchar('\r');
 129:src/lcd.c     ****         for (i=0; i<70; i++)
 130:src/lcd.c     ****                 putchar(' ');
 131:src/lcd.c     ****         putchar('\r');
 132:src/lcd.c     ****         putchar(' ');
 133:src/lcd.c     **** #endif
 134:src/lcd.c     **** #endif
 135:src/lcd.c     ****         State2.invalid_disp = 0;
 136:src/lcd.c     **** #endif
 137:src/lcd.c     **** }
 327              		.loc 1 137 1 is_stmt 0 view .LVU73
 328 0060 BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 329              		.cfi_restore 14
 330              		.cfi_restore 10
 331              		.cfi_restore 9
 332              		.cfi_restore 8
 333              		.cfi_restore 7
 334              		.cfi_restore 6
 335              		.cfi_restore 5
 336              		.cfi_restore 4
 337              		.cfi_def_cfa_offset 0
 338              	.LVL18:
  92:src/lcd.c     **** 	dot(RPN, rpn);
 339              		.loc 1 92 2 view .LVU74
 340 0064 FFF7FEBF 		b	dot
 341              	.LVL19:
 342              	.L21:
  92:src/lcd.c     **** 	dot(RPN, rpn);
ARM GAS  /tmp/ccp7FtIo.s 			page 10


 343              		.loc 1 92 2 view .LVU75
 344              		.align	2
 345              	.L20:
 346 0068 00000000 		.word	.LANCHOR0
 347              		.cfi_endproc
 348              	.LFE4:
 350              		.section	.text.left_side,"ax",%progbits
 351              		.align	1
 352              		.p2align 2,,3
 353              		.global	left_side
 354              		.syntax unified
 355              		.thumb
 356              		.thumb_func
 357              		.fpu fpv4-sp-d16
 359              	left_side:
 360              	.LVL20:
 361              	.LFB5:
 138:src/lcd.c     **** 
 139:src/lcd.c     **** #if defined(DM42)
 140:src/lcd.c     ****   #define setBlackPixel(x, y)                bitblt24(x, 1, y, 1, BLT_OR,   BLT_NONE)
 141:src/lcd.c     ****   #define setWhitePixel(x, y)                bitblt24(x, 1, y, 1, BLT_ANDN, BLT_NONE)
 142:src/lcd.c     **** 
 143:src/lcd.c     **** /* void left_side (int i, int j) { //i - xleft reference; j - ytop reference */
 144:src/lcd.c     **** /*   lcd_fill_rect ( i+2, j+11, 4, 8, 0xff ); */
 145:src/lcd.c     **** /*   lcd_fill_rect ( i+3, j+3, 4, 8, 0xff ); */
 146:src/lcd.c     **** /*   setBlackPixel ( i+4, j+2 ); */
 147:src/lcd.c     **** /*   setBlackPixel ( i+3, j+19 ); */
 148:src/lcd.c     **** /*   setWhitePixel ( i+6, j+3 ); */
 149:src/lcd.c     **** /*   setWhitePixel ( i+5, j+18 ); */
 150:src/lcd.c     **** /* } */
 151:src/lcd.c     **** 
 152:src/lcd.c     **** void left_side (int i, int j) { //i - xleft reference; j - ytop reference
 362              		.loc 1 152 31 is_stmt 1 view -0
 363              		.cfi_startproc
 364              		@ args = 0, pretend = 0, frame = 0
 365              		@ frame_needed = 0, uses_anonymous_args = 0
 153:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 366              		.loc 1 153 3 view .LVU77
 152:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 367              		.loc 1 152 31 is_stmt 0 view .LVU78
 368 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 369              		.cfi_def_cfa_offset 24
 370              		.cfi_offset 4, -24
 371              		.cfi_offset 5, -20
 372              		.cfi_offset 6, -16
 373              		.cfi_offset 7, -12
 374              		.cfi_offset 8, -8
 375              		.cfi_offset 14, -4
 376 0004 82B0     		sub	sp, sp, #8
 377              		.cfi_def_cfa_offset 32
 378              		.loc 1 153 3 view .LVU79
 379 0006 FF27     		movs	r7, #255
 152:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 380              		.loc 1 152 31 view .LVU80
 381 0008 0D46     		mov	r5, r1
 382              		.loc 1 153 3 view .LVU81
 383 000a 124E     		ldr	r6, .L24
ARM GAS  /tmp/ccp7FtIo.s 			page 11


 384 000c 0097     		str	r7, [sp]
 152:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 385              		.loc 1 152 31 view .LVU82
 386 000e 0446     		mov	r4, r0
 154:src/lcd.c     ****   lcd_fill_rect (i+3, j+2, 1, 18, 0xff);
 387              		.loc 1 154 24 view .LVU83
 388 0010 05F10208 		add	r8, r5, #2
 153:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 389              		.loc 1 153 3 view .LVU84
 390 0014 0B31     		adds	r1, r1, #11
 391              	.LVL21:
 153:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 392              		.loc 1 153 3 view .LVU85
 393 0016 0230     		adds	r0, r0, #2
 394              	.LVL22:
 153:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 395              		.loc 1 153 3 view .LVU86
 396 0018 0923     		movs	r3, #9
 397 001a 0122     		movs	r2, #1
 398 001c B047     		blx	r6
 399              	.LVL23:
 400              		.loc 1 154 3 is_stmt 1 view .LVU87
 401 001e 4146     		mov	r1, r8
 402 0020 E01C     		adds	r0, r4, #3
 403 0022 0097     		str	r7, [sp]
 404 0024 1223     		movs	r3, #18
 405 0026 0122     		movs	r2, #1
 406 0028 B047     		blx	r6
 407              	.LVL24:
 155:src/lcd.c     ****   lcd_fill_rect (i+4, j+2, 1, 17, 0xff);
 408              		.loc 1 155 3 view .LVU88
 409 002a 4146     		mov	r1, r8
 410 002c 201D     		adds	r0, r4, #4
 411 002e 0097     		str	r7, [sp]
 412 0030 1123     		movs	r3, #17
 413 0032 0122     		movs	r2, #1
 414 0034 B047     		blx	r6
 415              	.LVL25:
 156:src/lcd.c     ****   lcd_fill_rect (i+5, j+3, 1, 15, 0xff);
 416              		.loc 1 156 3 view .LVU89
 417 0036 E91C     		adds	r1, r5, #3
 418 0038 601D     		adds	r0, r4, #5
 419 003a 0097     		str	r7, [sp]
 420 003c 0F23     		movs	r3, #15
 421 003e 0122     		movs	r2, #1
 422 0040 B047     		blx	r6
 423              	.LVL26:
 157:src/lcd.c     ****   lcd_fill_rect (i+6, j+4, 1, 7, 0xff);
 424              		.loc 1 157 3 view .LVU90
 425 0042 291D     		adds	r1, r5, #4
 426 0044 A01D     		adds	r0, r4, #6
 427 0046 0097     		str	r7, [sp]
 428 0048 0723     		movs	r3, #7
 429 004a 0122     		movs	r2, #1
 430 004c B047     		blx	r6
 431              	.LVL27:
 158:src/lcd.c     **** }
ARM GAS  /tmp/ccp7FtIo.s 			page 12


 432              		.loc 1 158 1 is_stmt 0 view .LVU91
 433 004e 02B0     		add	sp, sp, #8
 434              		.cfi_def_cfa_offset 24
 435              		@ sp needed
 436 0050 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 437              	.LVL28:
 438              	.L25:
 439              		.loc 1 158 1 view .LVU92
 440              		.align	2
 441              	.L24:
 442 0054 3D020008 		.word	134218301
 443              		.cfi_endproc
 444              	.LFE5:
 446              		.section	.text.left_side_top,"ax",%progbits
 447              		.align	1
 448              		.p2align 2,,3
 449              		.global	left_side_top
 450              		.syntax unified
 451              		.thumb
 452              		.thumb_func
 453              		.fpu fpv4-sp-d16
 455              	left_side_top:
 456              	.LVL29:
 457              	.LFB6:
 159:src/lcd.c     **** void left_side_top (int i, int j) {
 458              		.loc 1 159 35 is_stmt 1 view -0
 459              		.cfi_startproc
 460              		@ args = 0, pretend = 0, frame = 0
 461              		@ frame_needed = 0, uses_anonymous_args = 0
 462              		@ link register save eliminated.
 160:src/lcd.c     ****   left_side(i, j);
 463              		.loc 1 160 3 view .LVU94
 464 0000 FFF7FEBF 		b	left_side
 465              	.LVL30:
 466              		.loc 1 160 3 is_stmt 0 view .LVU95
 467              		.cfi_endproc
 468              	.LFE6:
 470              		.section	.text.left_side_bottom,"ax",%progbits
 471              		.align	1
 472              		.p2align 2,,3
 473              		.global	left_side_bottom
 474              		.syntax unified
 475              		.thumb
 476              		.thumb_func
 477              		.fpu fpv4-sp-d16
 479              	left_side_bottom:
 480              	.LVL31:
 481              	.LFB7:
 161:src/lcd.c     **** }
 162:src/lcd.c     **** void left_side_bottom (int i, int j) {
 482              		.loc 1 162 38 is_stmt 1 view -0
 483              		.cfi_startproc
 484              		@ args = 0, pretend = 0, frame = 0
 485              		@ frame_needed = 0, uses_anonymous_args = 0
 486              		@ link register save eliminated.
 163:src/lcd.c     ****   left_side(i-2, j+19);
 487              		.loc 1 163 3 view .LVU97
ARM GAS  /tmp/ccp7FtIo.s 			page 13


 488 0000 0238     		subs	r0, r0, #2
 489              	.LVL32:
 490              		.loc 1 163 3 is_stmt 0 view .LVU98
 491 0002 1331     		adds	r1, r1, #19
 492              	.LVL33:
 493              		.loc 1 163 3 view .LVU99
 494 0004 FFF7FEBF 		b	left_side
 495              	.LVL34:
 496              		.loc 1 163 3 view .LVU100
 497              		.cfi_endproc
 498              	.LFE7:
 500              		.section	.text.right_side,"ax",%progbits
 501              		.align	1
 502              		.p2align 2,,3
 503              		.global	right_side
 504              		.syntax unified
 505              		.thumb
 506              		.thumb_func
 507              		.fpu fpv4-sp-d16
 509              	right_side:
 510              	.LVL35:
 511              	.LFB8:
 164:src/lcd.c     **** }
 165:src/lcd.c     **** void right_side (int i, int j) {
 512              		.loc 1 165 32 is_stmt 1 view -0
 513              		.cfi_startproc
 514              		@ args = 0, pretend = 0, frame = 0
 515              		@ frame_needed = 0, uses_anonymous_args = 0
 166:src/lcd.c     ****   lcd_fill_rect (i+16, j+11, 1, 7, 0xff);
 516              		.loc 1 166 3 view .LVU102
 165:src/lcd.c     ****   lcd_fill_rect (i+16, j+11, 1, 7, 0xff);
 517              		.loc 1 165 32 is_stmt 0 view .LVU103
 518 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 519              		.cfi_def_cfa_offset 24
 520              		.cfi_offset 4, -24
 521              		.cfi_offset 5, -20
 522              		.cfi_offset 6, -16
 523              		.cfi_offset 7, -12
 524              		.cfi_offset 8, -8
 525              		.cfi_offset 14, -4
 526 0004 82B0     		sub	sp, sp, #8
 527              		.cfi_def_cfa_offset 32
 528              		.loc 1 166 3 view .LVU104
 529 0006 FF27     		movs	r7, #255
 530 0008 144E     		ldr	r6, .L30
 531 000a 0097     		str	r7, [sp]
 165:src/lcd.c     ****   lcd_fill_rect (i+16, j+11, 1, 7, 0xff);
 532              		.loc 1 165 32 view .LVU105
 533 000c 0446     		mov	r4, r0
 534 000e 0D46     		mov	r5, r1
 535              		.loc 1 166 3 view .LVU106
 536 0010 1030     		adds	r0, r0, #16
 537              	.LVL36:
 538              		.loc 1 166 3 view .LVU107
 539 0012 0B31     		adds	r1, r1, #11
 540              	.LVL37:
 541              		.loc 1 166 3 view .LVU108
ARM GAS  /tmp/ccp7FtIo.s 			page 14


 542 0014 0723     		movs	r3, #7
 543 0016 0122     		movs	r2, #1
 544 0018 B047     		blx	r6
 545              	.LVL38:
 167:src/lcd.c     ****   lcd_fill_rect (i+17, j+4, 1, 15, 0xff);
 546              		.loc 1 167 3 is_stmt 1 view .LVU109
 547 001a 291D     		adds	r1, r5, #4
 548 001c 04F11100 		add	r0, r4, #17
 549 0020 0097     		str	r7, [sp]
 550 0022 0F23     		movs	r3, #15
 551 0024 0122     		movs	r2, #1
 552 0026 B047     		blx	r6
 553              	.LVL39:
 168:src/lcd.c     ****   lcd_fill_rect (i+18, j+3, 1, 17, 0xff);
 554              		.loc 1 168 3 view .LVU110
 169:src/lcd.c     ****   lcd_fill_rect (i+19, j+2, 1, 18, 0xff);
 555              		.loc 1 169 25 is_stmt 0 view .LVU111
 556 0028 05F10208 		add	r8, r5, #2
 168:src/lcd.c     ****   lcd_fill_rect (i+18, j+3, 1, 17, 0xff);
 557              		.loc 1 168 3 view .LVU112
 558 002c E91C     		adds	r1, r5, #3
 559 002e 04F11200 		add	r0, r4, #18
 560 0032 0097     		str	r7, [sp]
 561 0034 1123     		movs	r3, #17
 562 0036 0122     		movs	r2, #1
 563 0038 B047     		blx	r6
 564              	.LVL40:
 565              		.loc 1 169 3 is_stmt 1 view .LVU113
 566 003a 4146     		mov	r1, r8
 567 003c 04F11300 		add	r0, r4, #19
 568 0040 0097     		str	r7, [sp]
 569 0042 1223     		movs	r3, #18
 570 0044 0122     		movs	r2, #1
 571 0046 B047     		blx	r6
 572              	.LVL41:
 170:src/lcd.c     ****   lcd_fill_rect (i+20, j+2, 1, 9, 0xff);
 573              		.loc 1 170 3 view .LVU114
 574 0048 4146     		mov	r1, r8
 575 004a 04F11400 		add	r0, r4, #20
 576 004e 0097     		str	r7, [sp]
 577 0050 0923     		movs	r3, #9
 578 0052 0122     		movs	r2, #1
 579 0054 B047     		blx	r6
 580              	.LVL42:
 171:src/lcd.c     **** }
 581              		.loc 1 171 1 is_stmt 0 view .LVU115
 582 0056 02B0     		add	sp, sp, #8
 583              		.cfi_def_cfa_offset 24
 584              		@ sp needed
 585 0058 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 586              	.LVL43:
 587              	.L31:
 588              		.loc 1 171 1 view .LVU116
 589              		.align	2
 590              	.L30:
 591 005c 3D020008 		.word	134218301
 592              		.cfi_endproc
ARM GAS  /tmp/ccp7FtIo.s 			page 15


 593              	.LFE8:
 595              		.section	.text.right_side_top,"ax",%progbits
 596              		.align	1
 597              		.p2align 2,,3
 598              		.global	right_side_top
 599              		.syntax unified
 600              		.thumb
 601              		.thumb_func
 602              		.fpu fpv4-sp-d16
 604              	right_side_top:
 605              	.LVL44:
 606              	.LFB9:
 172:src/lcd.c     **** void right_side_top (int i, int j) {
 607              		.loc 1 172 36 is_stmt 1 view -0
 608              		.cfi_startproc
 609              		@ args = 0, pretend = 0, frame = 0
 610              		@ frame_needed = 0, uses_anonymous_args = 0
 611              		@ link register save eliminated.
 173:src/lcd.c     ****   right_side(i, j);
 612              		.loc 1 173 3 view .LVU118
 613 0000 FFF7FEBF 		b	right_side
 614              	.LVL45:
 615              		.loc 1 173 3 is_stmt 0 view .LVU119
 616              		.cfi_endproc
 617              	.LFE9:
 619              		.section	.text.right_side_bottom,"ax",%progbits
 620              		.align	1
 621              		.p2align 2,,3
 622              		.global	right_side_bottom
 623              		.syntax unified
 624              		.thumb
 625              		.thumb_func
 626              		.fpu fpv4-sp-d16
 628              	right_side_bottom:
 629              	.LVL46:
 630              	.LFB10:
 174:src/lcd.c     **** }
 175:src/lcd.c     **** void right_side_bottom (int i, int j) {
 631              		.loc 1 175 39 is_stmt 1 view -0
 632              		.cfi_startproc
 633              		@ args = 0, pretend = 0, frame = 0
 634              		@ frame_needed = 0, uses_anonymous_args = 0
 635              		@ link register save eliminated.
 176:src/lcd.c     ****   right_side(i-2, j+19);
 636              		.loc 1 176 3 view .LVU121
 637 0000 0238     		subs	r0, r0, #2
 638              	.LVL47:
 639              		.loc 1 176 3 is_stmt 0 view .LVU122
 640 0002 1331     		adds	r1, r1, #19
 641              	.LVL48:
 642              		.loc 1 176 3 view .LVU123
 643 0004 FFF7FEBF 		b	right_side
 644              	.LVL49:
 645              		.loc 1 176 3 view .LVU124
 646              		.cfi_endproc
 647              	.LFE10:
 649              		.section	.text.top,"ax",%progbits
ARM GAS  /tmp/ccp7FtIo.s 			page 16


 650              		.align	1
 651              		.p2align 2,,3
 652              		.global	top
 653              		.syntax unified
 654              		.thumb
 655              		.thumb_func
 656              		.fpu fpv4-sp-d16
 658              	top:
 659              	.LVL50:
 660              	.LFB11:
 177:src/lcd.c     **** }
 178:src/lcd.c     **** void top (int i, int j) {
 661              		.loc 1 178 25 is_stmt 1 view -0
 662              		.cfi_startproc
 663              		@ args = 0, pretend = 0, frame = 0
 664              		@ frame_needed = 0, uses_anonymous_args = 0
 179:src/lcd.c     ****   lcd_fill_rect ( i+5, j, 14, 1, 0xff );
 665              		.loc 1 179 3 view .LVU126
 178:src/lcd.c     ****   lcd_fill_rect ( i+5, j, 14, 1, 0xff );
 666              		.loc 1 178 25 is_stmt 0 view .LVU127
 667 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 668              		.cfi_def_cfa_offset 20
 669              		.cfi_offset 4, -20
 670              		.cfi_offset 5, -16
 671              		.cfi_offset 6, -12
 672              		.cfi_offset 7, -8
 673              		.cfi_offset 14, -4
 674 0002 83B0     		sub	sp, sp, #12
 675              		.cfi_def_cfa_offset 32
 676              		.loc 1 179 3 view .LVU128
 677 0004 FF27     		movs	r7, #255
 678 0006 0E4E     		ldr	r6, .L36
 679 0008 0097     		str	r7, [sp]
 178:src/lcd.c     ****   lcd_fill_rect ( i+5, j, 14, 1, 0xff );
 680              		.loc 1 178 25 view .LVU129
 681 000a 0446     		mov	r4, r0
 682 000c 0D46     		mov	r5, r1
 683              		.loc 1 179 3 view .LVU130
 684 000e 0530     		adds	r0, r0, #5
 685              	.LVL51:
 686              		.loc 1 179 3 view .LVU131
 687 0010 0123     		movs	r3, #1
 688 0012 0E22     		movs	r2, #14
 689 0014 B047     		blx	r6
 690              	.LVL52:
 180:src/lcd.c     ****   lcd_fill_rect ( i+4, j+1, 16, 1, 0xff );
 691              		.loc 1 180 3 is_stmt 1 view .LVU132
 692 0016 691C     		adds	r1, r5, #1
 693 0018 201D     		adds	r0, r4, #4
 694 001a 0097     		str	r7, [sp]
 695 001c 0123     		movs	r3, #1
 696 001e 1022     		movs	r2, #16
 697 0020 B047     		blx	r6
 698              	.LVL53:
 181:src/lcd.c     ****   lcd_fill_rect ( i+6, j+2, 12, 1, 0xff );
 699              		.loc 1 181 3 view .LVU133
 700 0022 A91C     		adds	r1, r5, #2
ARM GAS  /tmp/ccp7FtIo.s 			page 17


 701 0024 A01D     		adds	r0, r4, #6
 702 0026 0097     		str	r7, [sp]
 703 0028 0123     		movs	r3, #1
 704 002a 0C22     		movs	r2, #12
 705 002c B047     		blx	r6
 706              	.LVL54:
 182:src/lcd.c     ****   lcd_fill_rect ( i+7, j+3, 10, 1, 0xff );
 707              		.loc 1 182 3 view .LVU134
 708 002e E91C     		adds	r1, r5, #3
 709 0030 E01D     		adds	r0, r4, #7
 710 0032 0097     		str	r7, [sp]
 711 0034 0123     		movs	r3, #1
 712 0036 0A22     		movs	r2, #10
 713 0038 B047     		blx	r6
 714              	.LVL55:
 183:src/lcd.c     **** }
 715              		.loc 1 183 1 is_stmt 0 view .LVU135
 716 003a 03B0     		add	sp, sp, #12
 717              		.cfi_def_cfa_offset 20
 718              		@ sp needed
 719 003c F0BD     		pop	{r4, r5, r6, r7, pc}
 720              	.LVL56:
 721              	.L37:
 722              		.loc 1 183 1 view .LVU136
 723 003e 00BF     		.align	2
 724              	.L36:
 725 0040 3D020008 		.word	134218301
 726              		.cfi_endproc
 727              	.LFE11:
 729              		.section	.text.middle,"ax",%progbits
 730              		.align	1
 731              		.p2align 2,,3
 732              		.global	middle
 733              		.syntax unified
 734              		.thumb
 735              		.thumb_func
 736              		.fpu fpv4-sp-d16
 738              	middle:
 739              	.LVL57:
 740              	.LFB12:
 184:src/lcd.c     **** void middle (int i, int j) {
 741              		.loc 1 184 28 is_stmt 1 view -0
 742              		.cfi_startproc
 743              		@ args = 0, pretend = 0, frame = 0
 744              		@ frame_needed = 0, uses_anonymous_args = 0
 185:src/lcd.c     ****   lcd_fill_rect ( i+5, j+19, 11, 3, 0xff );
 745              		.loc 1 185 3 view .LVU138
 184:src/lcd.c     **** void middle (int i, int j) {
 746              		.loc 1 184 28 is_stmt 0 view .LVU139
 747 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 748              		.cfi_def_cfa_offset 20
 749              		.cfi_offset 4, -20
 750              		.cfi_offset 5, -16
 751              		.cfi_offset 6, -12
 752              		.cfi_offset 7, -8
 753              		.cfi_offset 14, -4
 754 0002 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/ccp7FtIo.s 			page 18


 755              		.cfi_def_cfa_offset 32
 756              		.loc 1 185 3 view .LVU140
 757 0004 FF23     		movs	r3, #255
 184:src/lcd.c     **** void middle (int i, int j) {
 758              		.loc 1 184 28 view .LVU141
 759 0006 0546     		mov	r5, r0
 760              		.loc 1 185 3 view .LVU142
 761 0008 0093     		str	r3, [sp]
 762 000a 0D4E     		ldr	r6, .L40
 186:src/lcd.c     ****   setBlackPixel ( i+4, j+20 );
 763              		.loc 1 186 3 view .LVU143
 764 000c 0D4F     		ldr	r7, .L40+4
 184:src/lcd.c     **** void middle (int i, int j) {
 765              		.loc 1 184 28 view .LVU144
 766 000e 0C46     		mov	r4, r1
 185:src/lcd.c     ****   lcd_fill_rect ( i+5, j+19, 11, 3, 0xff );
 767              		.loc 1 185 3 view .LVU145
 768 0010 0530     		adds	r0, r0, #5
 769              	.LVL58:
 185:src/lcd.c     ****   lcd_fill_rect ( i+5, j+19, 11, 3, 0xff );
 770              		.loc 1 185 3 view .LVU146
 771 0012 1331     		adds	r1, r1, #19
 772              	.LVL59:
 185:src/lcd.c     ****   lcd_fill_rect ( i+5, j+19, 11, 3, 0xff );
 773              		.loc 1 185 3 view .LVU147
 774 0014 0323     		movs	r3, #3
 775 0016 0B22     		movs	r2, #11
 776 0018 B047     		blx	r6
 777              	.LVL60:
 778              		.loc 1 186 3 is_stmt 1 view .LVU148
 779 001a 1434     		adds	r4, r4, #20
 780              	.LVL61:
 781              		.loc 1 186 3 is_stmt 0 view .LVU149
 782 001c 0026     		movs	r6, #0
 783 001e 0123     		movs	r3, #1
 784 0020 2246     		mov	r2, r4
 785 0022 281D     		adds	r0, r5, #4
 786 0024 1946     		mov	r1, r3
 787 0026 CDE90066 		strd	r6, r6, [sp]
 788 002a B847     		blx	r7
 789              	.LVL62:
 187:src/lcd.c     ****   setBlackPixel ( i+16, j+20 );
 790              		.loc 1 187 3 is_stmt 1 view .LVU150
 791 002c 0123     		movs	r3, #1
 792 002e CDE90066 		strd	r6, r6, [sp]
 793 0032 2246     		mov	r2, r4
 794 0034 05F11000 		add	r0, r5, #16
 795 0038 1946     		mov	r1, r3
 796 003a B847     		blx	r7
 797              	.LVL63:
 188:src/lcd.c     **** }
 798              		.loc 1 188 1 is_stmt 0 view .LVU151
 799 003c 03B0     		add	sp, sp, #12
 800              		.cfi_def_cfa_offset 20
 801              		@ sp needed
 802 003e F0BD     		pop	{r4, r5, r6, r7, pc}
 803              	.LVL64:
ARM GAS  /tmp/ccp7FtIo.s 			page 19


 804              	.L41:
 805              		.loc 1 188 1 view .LVU152
 806              		.align	2
 807              	.L40:
 808 0040 3D020008 		.word	134218301
 809 0044 25020008 		.word	134218277
 810              		.cfi_endproc
 811              	.LFE12:
 813              		.section	.text.bottom,"ax",%progbits
 814              		.align	1
 815              		.p2align 2,,3
 816              		.global	bottom
 817              		.syntax unified
 818              		.thumb
 819              		.thumb_func
 820              		.fpu fpv4-sp-d16
 822              	bottom:
 823              	.LVL65:
 824              	.LFB13:
 189:src/lcd.c     **** void bottom (int i, int j) {
 825              		.loc 1 189 28 is_stmt 1 view -0
 826              		.cfi_startproc
 827              		@ args = 0, pretend = 0, frame = 0
 828              		@ frame_needed = 0, uses_anonymous_args = 0
 190:src/lcd.c     ****   lcd_fill_rect ( i+2, j+40, 14, 1, 0xff );
 829              		.loc 1 190 3 view .LVU154
 189:src/lcd.c     **** void bottom (int i, int j) {
 830              		.loc 1 189 28 is_stmt 0 view .LVU155
 831 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 832              		.cfi_def_cfa_offset 20
 833              		.cfi_offset 4, -20
 834              		.cfi_offset 5, -16
 835              		.cfi_offset 6, -12
 836              		.cfi_offset 7, -8
 837              		.cfi_offset 14, -4
 838 0002 83B0     		sub	sp, sp, #12
 839              		.cfi_def_cfa_offset 32
 840              		.loc 1 190 3 view .LVU156
 841 0004 FF27     		movs	r7, #255
 842 0006 104E     		ldr	r6, .L44
 843 0008 0097     		str	r7, [sp]
 189:src/lcd.c     **** void bottom (int i, int j) {
 844              		.loc 1 189 28 view .LVU157
 845 000a 0446     		mov	r4, r0
 846 000c 0D46     		mov	r5, r1
 847              		.loc 1 190 3 view .LVU158
 848 000e 0230     		adds	r0, r0, #2
 849              	.LVL66:
 850              		.loc 1 190 3 view .LVU159
 851 0010 2831     		adds	r1, r1, #40
 852              	.LVL67:
 853              		.loc 1 190 3 view .LVU160
 854 0012 0123     		movs	r3, #1
 855 0014 0E22     		movs	r2, #14
 856 0016 B047     		blx	r6
 857              	.LVL68:
 191:src/lcd.c     ****   lcd_fill_rect ( i+1, j+39, 16, 1, 0xff );
ARM GAS  /tmp/ccp7FtIo.s 			page 20


 858              		.loc 1 191 3 is_stmt 1 view .LVU161
 859 0018 05F12701 		add	r1, r5, #39
 860 001c 601C     		adds	r0, r4, #1
 861 001e 0097     		str	r7, [sp]
 862 0020 0123     		movs	r3, #1
 863 0022 1022     		movs	r2, #16
 864 0024 B047     		blx	r6
 865              	.LVL69:
 192:src/lcd.c     ****   lcd_fill_rect ( i+3, j+38, 12, 1, 0xff );
 866              		.loc 1 192 3 view .LVU162
 867 0026 05F12601 		add	r1, r5, #38
 868 002a E01C     		adds	r0, r4, #3
 869 002c 0097     		str	r7, [sp]
 870 002e 0123     		movs	r3, #1
 871 0030 0C22     		movs	r2, #12
 872 0032 B047     		blx	r6
 873              	.LVL70:
 193:src/lcd.c     ****   lcd_fill_rect ( i+4, j+37, 10, 1, 0xff );
 874              		.loc 1 193 3 view .LVU163
 875 0034 05F12501 		add	r1, r5, #37
 876 0038 201D     		adds	r0, r4, #4
 877 003a 0097     		str	r7, [sp]
 878 003c 0123     		movs	r3, #1
 879 003e 0A22     		movs	r2, #10
 880 0040 B047     		blx	r6
 881              	.LVL71:
 194:src/lcd.c     **** }
 882              		.loc 1 194 1 is_stmt 0 view .LVU164
 883 0042 03B0     		add	sp, sp, #12
 884              		.cfi_def_cfa_offset 20
 885              		@ sp needed
 886 0044 F0BD     		pop	{r4, r5, r6, r7, pc}
 887              	.LVL72:
 888              	.L45:
 889              		.loc 1 194 1 view .LVU165
 890 0046 00BF     		.align	2
 891              	.L44:
 892 0048 3D020008 		.word	134218301
 893              		.cfi_endproc
 894              	.LFE13:
 896              		.section	.text.decimal,"ax",%progbits
 897              		.align	1
 898              		.p2align 2,,3
 899              		.global	decimal
 900              		.syntax unified
 901              		.thumb
 902              		.thumb_func
 903              		.fpu fpv4-sp-d16
 905              	decimal:
 906              	.LVL73:
 907              	.LFB14:
 195:src/lcd.c     **** void decimal (int i, int j) {
 908              		.loc 1 195 29 is_stmt 1 view -0
 909              		.cfi_startproc
 910              		@ args = 0, pretend = 0, frame = 0
 911              		@ frame_needed = 0, uses_anonymous_args = 0
 196:src/lcd.c     ****   lcd_fill_rect (i+19, j+40, 5, 5, 0xff);
ARM GAS  /tmp/ccp7FtIo.s 			page 21


 912              		.loc 1 196 3 view .LVU167
 195:src/lcd.c     **** void decimal (int i, int j) {
 913              		.loc 1 195 29 is_stmt 0 view .LVU168
 914 0000 10B5     		push	{r4, lr}
 915              		.cfi_def_cfa_offset 8
 916              		.cfi_offset 4, -8
 917              		.cfi_offset 14, -4
 918 0002 82B0     		sub	sp, sp, #8
 919              		.cfi_def_cfa_offset 16
 920              		.loc 1 196 3 view .LVU169
 921 0004 0523     		movs	r3, #5
 922 0006 FF22     		movs	r2, #255
 923 0008 0092     		str	r2, [sp]
 924 000a 034C     		ldr	r4, .L48
 925 000c 1330     		adds	r0, r0, #19
 926              	.LVL74:
 927              		.loc 1 196 3 view .LVU170
 928 000e 2831     		adds	r1, r1, #40
 929              	.LVL75:
 930              		.loc 1 196 3 view .LVU171
 931 0010 1A46     		mov	r2, r3
 932 0012 A047     		blx	r4
 933              	.LVL76:
 197:src/lcd.c     **** }
 934              		.loc 1 197 1 view .LVU172
 935 0014 02B0     		add	sp, sp, #8
 936              		.cfi_def_cfa_offset 8
 937              		@ sp needed
 938 0016 10BD     		pop	{r4, pc}
 939              	.L49:
 940              		.align	2
 941              	.L48:
 942 0018 3D020008 		.word	134218301
 943              		.cfi_endproc
 944              	.LFE14:
 946              		.section	.text.comma,"ax",%progbits
 947              		.align	1
 948              		.p2align 2,,3
 949              		.global	comma
 950              		.syntax unified
 951              		.thumb
 952              		.thumb_func
 953              		.fpu fpv4-sp-d16
 955              	comma:
 956              	.LVL77:
 957              	.LFB15:
 198:src/lcd.c     **** void comma (int i, int j) {
 958              		.loc 1 198 27 is_stmt 1 view -0
 959              		.cfi_startproc
 960              		@ args = 0, pretend = 0, frame = 0
 961              		@ frame_needed = 0, uses_anonymous_args = 0
 199:src/lcd.c     ****   lcd_fill_rect (i+21, j+45, 3, 3, 0xff);
 962              		.loc 1 199 3 view .LVU174
 198:src/lcd.c     **** void comma (int i, int j) {
 963              		.loc 1 198 27 is_stmt 0 view .LVU175
 964 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 965              		.cfi_def_cfa_offset 20
ARM GAS  /tmp/ccp7FtIo.s 			page 22


 966              		.cfi_offset 4, -20
 967              		.cfi_offset 5, -16
 968              		.cfi_offset 6, -12
 969              		.cfi_offset 7, -8
 970              		.cfi_offset 14, -4
 971 0002 83B0     		sub	sp, sp, #12
 972              		.cfi_def_cfa_offset 32
 973              		.loc 1 199 3 view .LVU176
 974 0004 FF27     		movs	r7, #255
 975 0006 0323     		movs	r3, #3
 976 0008 084E     		ldr	r6, .L52
 977 000a 0097     		str	r7, [sp]
 198:src/lcd.c     **** void comma (int i, int j) {
 978              		.loc 1 198 27 view .LVU177
 979 000c 0446     		mov	r4, r0
 980 000e 0D46     		mov	r5, r1
 981              		.loc 1 199 3 view .LVU178
 982 0010 1A46     		mov	r2, r3
 983 0012 2D31     		adds	r1, r1, #45
 984              	.LVL78:
 985              		.loc 1 199 3 view .LVU179
 986 0014 1530     		adds	r0, r0, #21
 987              	.LVL79:
 988              		.loc 1 199 3 view .LVU180
 989 0016 B047     		blx	r6
 990              	.LVL80:
 200:src/lcd.c     ****   lcd_fill_rect (i+19, j+48, 3, 3, 0xff);
 991              		.loc 1 200 3 is_stmt 1 view .LVU181
 992 0018 0323     		movs	r3, #3
 993 001a 05F13001 		add	r1, r5, #48
 994 001e 04F11300 		add	r0, r4, #19
 995 0022 0097     		str	r7, [sp]
 996 0024 1A46     		mov	r2, r3
 997 0026 B047     		blx	r6
 998              	.LVL81:
 201:src/lcd.c     **** }
 999              		.loc 1 201 1 is_stmt 0 view .LVU182
 1000 0028 03B0     		add	sp, sp, #12
 1001              		.cfi_def_cfa_offset 20
 1002              		@ sp needed
 1003 002a F0BD     		pop	{r4, r5, r6, r7, pc}
 1004              	.LVL82:
 1005              	.L53:
 1006              		.loc 1 201 1 view .LVU183
 1007              		.align	2
 1008              	.L52:
 1009 002c 3D020008 		.word	134218301
 1010              		.cfi_endproc
 1011              	.LFE15:
 1013              		.section	.text.exp_left_side,"ax",%progbits
 1014              		.align	1
 1015              		.p2align 2,,3
 1016              		.global	exp_left_side
 1017              		.syntax unified
 1018              		.thumb
 1019              		.thumb_func
 1020              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccp7FtIo.s 			page 23


 1022              	exp_left_side:
 1023              	.LVL83:
 1024              	.LFB16:
 202:src/lcd.c     **** 
 203:src/lcd.c     **** void exp_left_side (int i, int j) {
 1025              		.loc 1 203 35 is_stmt 1 view -0
 1026              		.cfi_startproc
 1027              		@ args = 0, pretend = 0, frame = 0
 1028              		@ frame_needed = 0, uses_anonymous_args = 0
 204:src/lcd.c     ****   lcd_fill_rect (i, j+6, 1, 6, 0xff );
 1029              		.loc 1 204 3 view .LVU185
 203:src/lcd.c     ****   lcd_fill_rect (i, j+6, 1, 6, 0xff );
 1030              		.loc 1 203 35 is_stmt 0 view .LVU186
 1031 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1032              		.cfi_def_cfa_offset 20
 1033              		.cfi_offset 4, -20
 1034              		.cfi_offset 5, -16
 1035              		.cfi_offset 6, -12
 1036              		.cfi_offset 7, -8
 1037              		.cfi_offset 14, -4
 1038 0002 83B0     		sub	sp, sp, #12
 1039              		.cfi_def_cfa_offset 32
 1040              		.loc 1 204 3 view .LVU187
 1041 0004 FF27     		movs	r7, #255
 1042 0006 0E4E     		ldr	r6, .L56
 1043 0008 0097     		str	r7, [sp]
 203:src/lcd.c     ****   lcd_fill_rect (i, j+6, 1, 6, 0xff );
 1044              		.loc 1 203 35 view .LVU188
 1045 000a 0C46     		mov	r4, r1
 1046 000c 0546     		mov	r5, r0
 1047              		.loc 1 204 3 view .LVU189
 1048 000e 0631     		adds	r1, r1, #6
 1049              	.LVL84:
 1050              		.loc 1 204 3 view .LVU190
 1051 0010 0623     		movs	r3, #6
 1052 0012 0122     		movs	r2, #1
 1053 0014 B047     		blx	r6
 1054              	.LVL85:
 205:src/lcd.c     ****   lcd_fill_rect (i+1, j, 1, 11, 0xff );
 1055              		.loc 1 205 3 is_stmt 1 view .LVU191
 1056 0016 2146     		mov	r1, r4
 1057 0018 681C     		adds	r0, r5, #1
 1058 001a 0097     		str	r7, [sp]
 1059 001c 0B23     		movs	r3, #11
 1060 001e 0122     		movs	r2, #1
 1061 0020 B047     		blx	r6
 1062              	.LVL86:
 206:src/lcd.c     ****   lcd_fill_rect (i+2, j+1, 1, 9, 0xff );
 1063              		.loc 1 206 3 view .LVU192
 1064 0022 611C     		adds	r1, r4, #1
 1065 0024 A81C     		adds	r0, r5, #2
 1066 0026 0097     		str	r7, [sp]
 1067 0028 0923     		movs	r3, #9
 1068 002a 0122     		movs	r2, #1
 1069 002c B047     		blx	r6
 1070              	.LVL87:
 207:src/lcd.c     ****   lcd_fill_rect (i+3, j+2, 1, 4, 0xff );
ARM GAS  /tmp/ccp7FtIo.s 			page 24


 1071              		.loc 1 207 3 view .LVU193
 1072 002e A11C     		adds	r1, r4, #2
 1073 0030 E81C     		adds	r0, r5, #3
 1074 0032 0097     		str	r7, [sp]
 1075 0034 0423     		movs	r3, #4
 1076 0036 0122     		movs	r2, #1
 1077 0038 B047     		blx	r6
 1078              	.LVL88:
 208:src/lcd.c     **** }
 1079              		.loc 1 208 1 is_stmt 0 view .LVU194
 1080 003a 03B0     		add	sp, sp, #12
 1081              		.cfi_def_cfa_offset 20
 1082              		@ sp needed
 1083 003c F0BD     		pop	{r4, r5, r6, r7, pc}
 1084              	.LVL89:
 1085              	.L57:
 1086              		.loc 1 208 1 view .LVU195
 1087 003e 00BF     		.align	2
 1088              	.L56:
 1089 0040 3D020008 		.word	134218301
 1090              		.cfi_endproc
 1091              	.LFE16:
 1093              		.section	.text.exp_left_side_top,"ax",%progbits
 1094              		.align	1
 1095              		.p2align 2,,3
 1096              		.global	exp_left_side_top
 1097              		.syntax unified
 1098              		.thumb
 1099              		.thumb_func
 1100              		.fpu fpv4-sp-d16
 1102              	exp_left_side_top:
 1103              	.LVL90:
 1104              	.LFB17:
 209:src/lcd.c     **** void exp_left_side_top (int i, int j) {
 1105              		.loc 1 209 39 is_stmt 1 view -0
 1106              		.cfi_startproc
 1107              		@ args = 0, pretend = 0, frame = 0
 1108              		@ frame_needed = 0, uses_anonymous_args = 0
 1109              		@ link register save eliminated.
 210:src/lcd.c     ****   exp_left_side(i+1, j);
 1110              		.loc 1 210 3 view .LVU197
 1111 0000 0130     		adds	r0, r0, #1
 1112              	.LVL91:
 1113              		.loc 1 210 3 is_stmt 0 view .LVU198
 1114 0002 FFF7FEBF 		b	exp_left_side
 1115              	.LVL92:
 1116              		.loc 1 210 3 view .LVU199
 1117              		.cfi_endproc
 1118              	.LFE17:
 1120 0006 00BF     		.section	.text.exp_left_side_bottom,"ax",%progbits
 1121              		.align	1
 1122              		.p2align 2,,3
 1123              		.global	exp_left_side_bottom
 1124              		.syntax unified
 1125              		.thumb
 1126              		.thumb_func
 1127              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccp7FtIo.s 			page 25


 1129              	exp_left_side_bottom:
 1130              	.LVL93:
 1131              	.LFB18:
 211:src/lcd.c     **** }
 212:src/lcd.c     **** void exp_left_side_bottom (int i, int j) {
 1132              		.loc 1 212 42 is_stmt 1 view -0
 1133              		.cfi_startproc
 1134              		@ args = 0, pretend = 0, frame = 0
 1135              		@ frame_needed = 0, uses_anonymous_args = 0
 1136              		@ link register save eliminated.
 213:src/lcd.c     ****   exp_left_side(i, j+11);
 1137              		.loc 1 213 3 view .LVU201
 1138 0000 0B31     		adds	r1, r1, #11
 1139              	.LVL94:
 1140              		.loc 1 213 3 is_stmt 0 view .LVU202
 1141 0002 FFF7FEBF 		b	exp_left_side
 1142              	.LVL95:
 1143              		.loc 1 213 3 view .LVU203
 1144              		.cfi_endproc
 1145              	.LFE18:
 1147 0006 00BF     		.section	.text.exp_right_side,"ax",%progbits
 1148              		.align	1
 1149              		.p2align 2,,3
 1150              		.global	exp_right_side
 1151              		.syntax unified
 1152              		.thumb
 1153              		.thumb_func
 1154              		.fpu fpv4-sp-d16
 1156              	exp_right_side:
 1157              	.LVL96:
 1158              	.LFB19:
 214:src/lcd.c     **** }
 215:src/lcd.c     **** void exp_right_side (int i, int j) {
 1159              		.loc 1 215 36 is_stmt 1 view -0
 1160              		.cfi_startproc
 1161              		@ args = 0, pretend = 0, frame = 0
 1162              		@ frame_needed = 0, uses_anonymous_args = 0
 216:src/lcd.c     ****   lcd_fill_rect (i+12, j, 1, 6, 0xff );
 1163              		.loc 1 216 3 view .LVU205
 215:src/lcd.c     ****   lcd_fill_rect (i+12, j, 1, 6, 0xff );
 1164              		.loc 1 215 36 is_stmt 0 view .LVU206
 1165 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1166              		.cfi_def_cfa_offset 20
 1167              		.cfi_offset 4, -20
 1168              		.cfi_offset 5, -16
 1169              		.cfi_offset 6, -12
 1170              		.cfi_offset 7, -8
 1171              		.cfi_offset 14, -4
 1172 0002 83B0     		sub	sp, sp, #12
 1173              		.cfi_def_cfa_offset 32
 1174              		.loc 1 216 3 view .LVU207
 1175 0004 FF27     		movs	r7, #255
 1176 0006 0F4E     		ldr	r6, .L62
 1177 0008 0097     		str	r7, [sp]
 215:src/lcd.c     ****   lcd_fill_rect (i+12, j, 1, 6, 0xff );
 1178              		.loc 1 215 36 view .LVU208
 1179 000a 0446     		mov	r4, r0
ARM GAS  /tmp/ccp7FtIo.s 			page 26


 1180 000c 0D46     		mov	r5, r1
 1181              		.loc 1 216 3 view .LVU209
 1182 000e 0C30     		adds	r0, r0, #12
 1183              	.LVL97:
 1184              		.loc 1 216 3 view .LVU210
 1185 0010 0623     		movs	r3, #6
 1186 0012 0122     		movs	r2, #1
 1187 0014 B047     		blx	r6
 1188              	.LVL98:
 217:src/lcd.c     ****   lcd_fill_rect (i+11, j+1, 1, 11, 0xff );
 1189              		.loc 1 217 3 is_stmt 1 view .LVU211
 1190 0016 691C     		adds	r1, r5, #1
 1191 0018 04F10B00 		add	r0, r4, #11
 1192 001c 0097     		str	r7, [sp]
 1193 001e 0B23     		movs	r3, #11
 1194 0020 0122     		movs	r2, #1
 1195 0022 B047     		blx	r6
 1196              	.LVL99:
 218:src/lcd.c     ****   lcd_fill_rect (i+10, j+2, 1, 9, 0xff );
 1197              		.loc 1 218 3 view .LVU212
 1198 0024 A91C     		adds	r1, r5, #2
 1199 0026 04F10A00 		add	r0, r4, #10
 1200 002a 0097     		str	r7, [sp]
 1201 002c 0923     		movs	r3, #9
 1202 002e 0122     		movs	r2, #1
 1203 0030 B047     		blx	r6
 1204              	.LVL100:
 219:src/lcd.c     ****   lcd_fill_rect (i+9, j+6, 1, 4, 0xff );
 1205              		.loc 1 219 3 view .LVU213
 1206 0032 A91D     		adds	r1, r5, #6
 1207 0034 04F10900 		add	r0, r4, #9
 1208 0038 0097     		str	r7, [sp]
 1209 003a 0423     		movs	r3, #4
 1210 003c 0122     		movs	r2, #1
 1211 003e B047     		blx	r6
 1212              	.LVL101:
 220:src/lcd.c     **** }
 1213              		.loc 1 220 1 is_stmt 0 view .LVU214
 1214 0040 03B0     		add	sp, sp, #12
 1215              		.cfi_def_cfa_offset 20
 1216              		@ sp needed
 1217 0042 F0BD     		pop	{r4, r5, r6, r7, pc}
 1218              	.LVL102:
 1219              	.L63:
 1220              		.loc 1 220 1 view .LVU215
 1221              		.align	2
 1222              	.L62:
 1223 0044 3D020008 		.word	134218301
 1224              		.cfi_endproc
 1225              	.LFE19:
 1227              		.section	.text.exp_right_side_top,"ax",%progbits
 1228              		.align	1
 1229              		.p2align 2,,3
 1230              		.global	exp_right_side_top
 1231              		.syntax unified
 1232              		.thumb
 1233              		.thumb_func
ARM GAS  /tmp/ccp7FtIo.s 			page 27


 1234              		.fpu fpv4-sp-d16
 1236              	exp_right_side_top:
 1237              	.LVL103:
 1238              	.LFB20:
 221:src/lcd.c     **** void exp_right_side_top (int i, int j) {
 1239              		.loc 1 221 40 is_stmt 1 view -0
 1240              		.cfi_startproc
 1241              		@ args = 0, pretend = 0, frame = 0
 1242              		@ frame_needed = 0, uses_anonymous_args = 0
 1243              		@ link register save eliminated.
 222:src/lcd.c     ****   exp_right_side(i, j);
 1244              		.loc 1 222 3 view .LVU217
 1245 0000 FFF7FEBF 		b	exp_right_side
 1246              	.LVL104:
 1247              		.loc 1 222 3 is_stmt 0 view .LVU218
 1248              		.cfi_endproc
 1249              	.LFE20:
 1251              		.section	.text.exp_right_side_bottom,"ax",%progbits
 1252              		.align	1
 1253              		.p2align 2,,3
 1254              		.global	exp_right_side_bottom
 1255              		.syntax unified
 1256              		.thumb
 1257              		.thumb_func
 1258              		.fpu fpv4-sp-d16
 1260              	exp_right_side_bottom:
 1261              	.LVL105:
 1262              	.LFB21:
 223:src/lcd.c     **** }
 224:src/lcd.c     **** void exp_right_side_bottom (int i, int j) {
 1263              		.loc 1 224 43 is_stmt 1 view -0
 1264              		.cfi_startproc
 1265              		@ args = 0, pretend = 0, frame = 0
 1266              		@ frame_needed = 0, uses_anonymous_args = 0
 1267              		@ link register save eliminated.
 225:src/lcd.c     ****   exp_right_side(i-1, j+11);
 1268              		.loc 1 225 3 view .LVU220
 1269 0000 0138     		subs	r0, r0, #1
 1270              	.LVL106:
 1271              		.loc 1 225 3 is_stmt 0 view .LVU221
 1272 0002 0B31     		adds	r1, r1, #11
 1273              	.LVL107:
 1274              		.loc 1 225 3 view .LVU222
 1275 0004 FFF7FEBF 		b	exp_right_side
 1276              	.LVL108:
 1277              		.loc 1 225 3 view .LVU223
 1278              		.cfi_endproc
 1279              	.LFE21:
 1281              		.section	.text.exp_top,"ax",%progbits
 1282              		.align	1
 1283              		.p2align 2,,3
 1284              		.global	exp_top
 1285              		.syntax unified
 1286              		.thumb
 1287              		.thumb_func
 1288              		.fpu fpv4-sp-d16
 1290              	exp_top:
ARM GAS  /tmp/ccp7FtIo.s 			page 28


 1291              	.LVL109:
 1292              	.LFB22:
 226:src/lcd.c     **** }
 227:src/lcd.c     **** void exp_top (int i, int j) {
 1293              		.loc 1 227 29 is_stmt 1 view -0
 1294              		.cfi_startproc
 1295              		@ args = 0, pretend = 0, frame = 0
 1296              		@ frame_needed = 0, uses_anonymous_args = 0
 228:src/lcd.c     ****   lcd_fill_rect (i+4, j, 7, 1, 0xff );
 1297              		.loc 1 228 3 view .LVU225
 227:src/lcd.c     ****   lcd_fill_rect (i+4, j, 7, 1, 0xff );
 1298              		.loc 1 227 29 is_stmt 0 view .LVU226
 1299 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1300              		.cfi_def_cfa_offset 20
 1301              		.cfi_offset 4, -20
 1302              		.cfi_offset 5, -16
 1303              		.cfi_offset 6, -12
 1304              		.cfi_offset 7, -8
 1305              		.cfi_offset 14, -4
 1306 0002 83B0     		sub	sp, sp, #12
 1307              		.cfi_def_cfa_offset 32
 1308              		.loc 1 228 3 view .LVU227
 1309 0004 FF27     		movs	r7, #255
 1310 0006 0B4E     		ldr	r6, .L68
 1311 0008 0097     		str	r7, [sp]
 227:src/lcd.c     ****   lcd_fill_rect (i+4, j, 7, 1, 0xff );
 1312              		.loc 1 227 29 view .LVU228
 1313 000a 0446     		mov	r4, r0
 1314 000c 0D46     		mov	r5, r1
 1315              		.loc 1 228 3 view .LVU229
 1316 000e 0430     		adds	r0, r0, #4
 1317              	.LVL110:
 1318              		.loc 1 228 3 view .LVU230
 1319 0010 0123     		movs	r3, #1
 1320 0012 0722     		movs	r2, #7
 1321 0014 B047     		blx	r6
 1322              	.LVL111:
 229:src/lcd.c     ****   lcd_fill_rect (i+5, j+1, 5, 1, 0xff );
 1323              		.loc 1 229 3 is_stmt 1 view .LVU231
 1324 0016 691C     		adds	r1, r5, #1
 1325 0018 601D     		adds	r0, r4, #5
 1326 001a 0097     		str	r7, [sp]
 1327 001c 0123     		movs	r3, #1
 1328 001e 0522     		movs	r2, #5
 1329 0020 B047     		blx	r6
 1330              	.LVL112:
 230:src/lcd.c     ****   lcd_fill_rect (i+6, j+2, 3, 1, 0xff );
 1331              		.loc 1 230 3 view .LVU232
 1332 0022 A91C     		adds	r1, r5, #2
 1333 0024 A01D     		adds	r0, r4, #6
 1334 0026 0097     		str	r7, [sp]
 1335 0028 0123     		movs	r3, #1
 1336 002a 0322     		movs	r2, #3
 1337 002c B047     		blx	r6
 1338              	.LVL113:
 231:src/lcd.c     **** }
 1339              		.loc 1 231 1 is_stmt 0 view .LVU233
ARM GAS  /tmp/ccp7FtIo.s 			page 29


 1340 002e 03B0     		add	sp, sp, #12
 1341              		.cfi_def_cfa_offset 20
 1342              		@ sp needed
 1343 0030 F0BD     		pop	{r4, r5, r6, r7, pc}
 1344              	.LVL114:
 1345              	.L69:
 1346              		.loc 1 231 1 view .LVU234
 1347 0032 00BF     		.align	2
 1348              	.L68:
 1349 0034 3D020008 		.word	134218301
 1350              		.cfi_endproc
 1351              	.LFE22:
 1353              		.section	.text.exp_bottom,"ax",%progbits
 1354              		.align	1
 1355              		.p2align 2,,3
 1356              		.global	exp_bottom
 1357              		.syntax unified
 1358              		.thumb
 1359              		.thumb_func
 1360              		.fpu fpv4-sp-d16
 1362              	exp_bottom:
 1363              	.LVL115:
 1364              	.LFB23:
 232:src/lcd.c     **** void exp_bottom (int i, int j) {
 1365              		.loc 1 232 32 is_stmt 1 view -0
 1366              		.cfi_startproc
 1367              		@ args = 0, pretend = 0, frame = 0
 1368              		@ frame_needed = 0, uses_anonymous_args = 0
 233:src/lcd.c     ****   lcd_fill_rect (i+2, j+22, 7, 1, 0xff );
 1369              		.loc 1 233 3 view .LVU236
 232:src/lcd.c     **** void exp_bottom (int i, int j) {
 1370              		.loc 1 232 32 is_stmt 0 view .LVU237
 1371 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1372              		.cfi_def_cfa_offset 20
 1373              		.cfi_offset 4, -20
 1374              		.cfi_offset 5, -16
 1375              		.cfi_offset 6, -12
 1376              		.cfi_offset 7, -8
 1377              		.cfi_offset 14, -4
 1378 0002 83B0     		sub	sp, sp, #12
 1379              		.cfi_def_cfa_offset 32
 1380              		.loc 1 233 3 view .LVU238
 1381 0004 FF27     		movs	r7, #255
 1382 0006 0C4E     		ldr	r6, .L72
 1383 0008 0097     		str	r7, [sp]
 232:src/lcd.c     **** void exp_bottom (int i, int j) {
 1384              		.loc 1 232 32 view .LVU239
 1385 000a 0446     		mov	r4, r0
 1386 000c 0D46     		mov	r5, r1
 1387              		.loc 1 233 3 view .LVU240
 1388 000e 0230     		adds	r0, r0, #2
 1389              	.LVL116:
 1390              		.loc 1 233 3 view .LVU241
 1391 0010 1631     		adds	r1, r1, #22
 1392              	.LVL117:
 1393              		.loc 1 233 3 view .LVU242
 1394 0012 0123     		movs	r3, #1
ARM GAS  /tmp/ccp7FtIo.s 			page 30


 1395 0014 0722     		movs	r2, #7
 1396 0016 B047     		blx	r6
 1397              	.LVL118:
 234:src/lcd.c     ****   lcd_fill_rect (i+3, j+21, 5, 1, 0xff );
 1398              		.loc 1 234 3 is_stmt 1 view .LVU243
 1399 0018 05F11501 		add	r1, r5, #21
 1400 001c E01C     		adds	r0, r4, #3
 1401 001e 0097     		str	r7, [sp]
 1402 0020 0123     		movs	r3, #1
 1403 0022 0522     		movs	r2, #5
 1404 0024 B047     		blx	r6
 1405              	.LVL119:
 235:src/lcd.c     ****   lcd_fill_rect (i+4, j+20, 3, 1, 0xff );
 1406              		.loc 1 235 3 view .LVU244
 1407 0026 05F11401 		add	r1, r5, #20
 1408 002a 201D     		adds	r0, r4, #4
 1409 002c 0097     		str	r7, [sp]
 1410 002e 0123     		movs	r3, #1
 1411 0030 0322     		movs	r2, #3
 1412 0032 B047     		blx	r6
 1413              	.LVL120:
 236:src/lcd.c     **** }
 1414              		.loc 1 236 1 is_stmt 0 view .LVU245
 1415 0034 03B0     		add	sp, sp, #12
 1416              		.cfi_def_cfa_offset 20
 1417              		@ sp needed
 1418 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 1419              	.LVL121:
 1420              	.L73:
 1421              		.loc 1 236 1 view .LVU246
 1422              		.align	2
 1423              	.L72:
 1424 0038 3D020008 		.word	134218301
 1425              		.cfi_endproc
 1426              	.LFE23:
 1428              		.section	.text.exp_middle,"ax",%progbits
 1429              		.align	1
 1430              		.p2align 2,,3
 1431              		.global	exp_middle
 1432              		.syntax unified
 1433              		.thumb
 1434              		.thumb_func
 1435              		.fpu fpv4-sp-d16
 1437              	exp_middle:
 1438              	.LVL122:
 1439              	.LFB24:
 237:src/lcd.c     **** void exp_middle (int i, int j) {
 1440              		.loc 1 237 32 is_stmt 1 view -0
 1441              		.cfi_startproc
 1442              		@ args = 0, pretend = 0, frame = 0
 1443              		@ frame_needed = 0, uses_anonymous_args = 0
 238:src/lcd.c     ****   lcd_fill_rect (i+4, j+10, 5, 1, 0xff );
 1444              		.loc 1 238 3 view .LVU248
 237:src/lcd.c     **** void exp_middle (int i, int j) {
 1445              		.loc 1 237 32 is_stmt 0 view .LVU249
 1446 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1447              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccp7FtIo.s 			page 31


 1448              		.cfi_offset 4, -24
 1449              		.cfi_offset 5, -20
 1450              		.cfi_offset 6, -16
 1451              		.cfi_offset 7, -12
 1452              		.cfi_offset 8, -8
 1453              		.cfi_offset 14, -4
 1454 0004 82B0     		sub	sp, sp, #8
 1455              		.cfi_def_cfa_offset 32
 1456              		.loc 1 238 3 view .LVU250
 1457 0006 FF27     		movs	r7, #255
 1458              		.loc 1 238 19 view .LVU251
 1459 0008 00F10408 		add	r8, r0, #4
 1460              		.loc 1 238 3 view .LVU252
 1461 000c 0C4E     		ldr	r6, .L76
 1462 000e 0097     		str	r7, [sp]
 237:src/lcd.c     **** void exp_middle (int i, int j) {
 1463              		.loc 1 237 32 view .LVU253
 1464 0010 0C46     		mov	r4, r1
 1465 0012 0546     		mov	r5, r0
 1466              		.loc 1 238 3 view .LVU254
 1467 0014 0A31     		adds	r1, r1, #10
 1468              	.LVL123:
 1469              		.loc 1 238 3 view .LVU255
 1470 0016 4046     		mov	r0, r8
 1471              	.LVL124:
 1472              		.loc 1 238 3 view .LVU256
 1473 0018 0123     		movs	r3, #1
 1474 001a 0522     		movs	r2, #5
 1475 001c B047     		blx	r6
 1476              	.LVL125:
 239:src/lcd.c     ****   lcd_fill_rect (i+3, j+11, 7, 1, 0xff );
 1477              		.loc 1 239 3 is_stmt 1 view .LVU257
 1478 001e E81C     		adds	r0, r5, #3
 1479 0020 04F10B01 		add	r1, r4, #11
 1480 0024 0097     		str	r7, [sp]
 1481 0026 0123     		movs	r3, #1
 1482 0028 0722     		movs	r2, #7
 1483 002a B047     		blx	r6
 1484              	.LVL126:
 240:src/lcd.c     ****   lcd_fill_rect (i+4, j+12, 5, 1, 0xff );
 1485              		.loc 1 240 3 view .LVU258
 1486 002c 4046     		mov	r0, r8
 1487 002e 04F10C01 		add	r1, r4, #12
 1488 0032 0097     		str	r7, [sp]
 1489 0034 0123     		movs	r3, #1
 1490 0036 0522     		movs	r2, #5
 1491 0038 B047     		blx	r6
 1492              	.LVL127:
 241:src/lcd.c     **** }
 1493              		.loc 1 241 1 is_stmt 0 view .LVU259
 1494 003a 02B0     		add	sp, sp, #8
 1495              		.cfi_def_cfa_offset 24
 1496              		@ sp needed
 1497 003c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1498              	.LVL128:
 1499              	.L77:
 1500              		.loc 1 241 1 view .LVU260
ARM GAS  /tmp/ccp7FtIo.s 			page 32


 1501              		.align	2
 1502              	.L76:
 1503 0040 3D020008 		.word	134218301
 1504              		.cfi_endproc
 1505              	.LFE24:
 1507              		.section	.rodata.show_disp.str1.4,"aMS",%progbits,1
 1508              		.align	2
 1509              	.LC0:
 1510 0000 494E5055 		.ascii	"INPUT\000"
 1510      5400
 1511 0006 0000     		.align	2
 1512              	.LC1:
 1513 0008 3D00     		.ascii	"=\000"
 1514 000a 0000     		.align	2
 1515              	.LC2:
 1516 000c 42454700 		.ascii	"BEG\000"
 1517              		.align	2
 1518              	.LC3:
 1519 0010 53544F00 		.ascii	"STO\000"
 1520              		.align	2
 1521              	.LC4:
 1522 0014 52434C00 		.ascii	"RCL\000"
 1523              		.align	2
 1524              	.LC5:
 1525 0018 52414400 		.ascii	"RAD\000"
 1526              		.align	2
 1527              	.LC6:
 1528 001c 33363000 		.ascii	"360\000"
 1529              		.align	2
 1530              	.LC7:
 1531 0020 52504E00 		.ascii	"RPN\000"
 1532              		.section	.text.show_disp,"ax",%progbits
 1533              		.align	1
 1534              		.p2align 2,,3
 1535              		.global	show_disp
 1536              		.syntax unified
 1537              		.thumb
 1538              		.thumb_func
 1539              		.fpu fpv4-sp-d16
 1541              	show_disp:
 1542              	.LFB25:
 242:src/lcd.c     ****   
 243:src/lcd.c     **** void show_disp(void) { // This function re-draws everything.
 1543              		.loc 1 243 22 is_stmt 1 view -0
 1544              		.cfi_startproc
 1545              		@ args = 0, pretend = 0, frame = 0
 1546              		@ frame_needed = 0, uses_anonymous_args = 0
 244:src/lcd.c     ****   // It may be fast enough. It does mean that clearing everything first is needed,
 245:src/lcd.c     ****   // or we keep track of changes.
 246:src/lcd.c     ****   // Try clearing everything first first.
 247:src/lcd.c     ****         int i, j, p;
 1547              		.loc 1 247 9 view .LVU262
 248:src/lcd.c     **** 	uint32_t x;
 1548              		.loc 1 248 2 view .LVU263
 249:src/lcd.c     **** 	const uint32_t xleft = 26;
 1549              		.loc 1 249 2 view .LVU264
 1550              	.LVL129:
ARM GAS  /tmp/ccp7FtIo.s 			page 33


 250:src/lcd.c     **** 	const uint32_t ytop = 130; // was 170
 1551              		.loc 1 250 2 view .LVU265
 251:src/lcd.c     **** 	const uint32_t dwidth = 25;
 1552              		.loc 1 251 2 view .LVU266
 252:src/lcd.c     **** 	const uint32_t xleft_exp = 344;
 1553              		.loc 1 252 2 view .LVU267
 253:src/lcd.c     **** 	const uint32_t ytop_exp = 130; // was 170
 1554              		.loc 1 253 2 view .LVU268
 254:src/lcd.c     **** 	const uint32_t dwidth_exp = 18;
 1555              		.loc 1 254 2 view .LVU269
 255:src/lcd.c     **** 
 256:src/lcd.c     ****         /* Segments 0 - 107 are the main digits */
 257:src/lcd.c     ****         for (i=0; i<DISPLAY_DIGITS; i++) { // 0 -> 11 inclusive
 1556              		.loc 1 257 9 view .LVU270
 1557              		.loc 1 257 19 view .LVU271
 243:src/lcd.c     ****   // It may be fast enough. It does mean that clearing everything first is needed,
 1558              		.loc 1 243 22 is_stmt 0 view .LVU272
 1559 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1560              		.cfi_def_cfa_offset 36
 1561              		.cfi_offset 4, -36
 1562              		.cfi_offset 5, -32
 1563              		.cfi_offset 6, -28
 1564              		.cfi_offset 7, -24
 1565              		.cfi_offset 8, -20
 1566              		.cfi_offset 9, -16
 1567              		.cfi_offset 10, -12
 1568              		.cfi_offset 11, -8
 1569              		.cfi_offset 14, -4
 1570 0004 2F4E     		ldr	r6, .L223
 1571              	.LBB58:
 1572              	.LBB59:
 196:src/lcd.c     **** }
 1573              		.loc 1 196 3 view .LVU273
 1574 0006 DFF8C080 		ldr	r8, .L223+4
 1575              	.LBE59:
 1576              	.LBE58:
 243:src/lcd.c     ****   // It may be fast enough. It does mean that clearing everything first is needed,
 1577              		.loc 1 243 22 view .LVU274
 1578 000a 83B0     		sub	sp, sp, #12
 1579              		.cfi_def_cfa_offset 48
 243:src/lcd.c     ****   // It may be fast enough. It does mean that clearing everything first is needed,
 1580              		.loc 1 243 22 view .LVU275
 1581 000c 3746     		mov	r7, r6
 1582 000e 3446     		mov	r4, r6
 1583 0010 1A25     		movs	r5, #26
 1584 0012 24E0     		b	.L88
 1585              	.LVL130:
 1586              	.L79:
 258:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 259:src/lcd.c     ****                 x = xleft + dwidth*i;
 260:src/lcd.c     ****                 if (dots[p]) { // top
 261:src/lcd.c     **** 		  top (x, ytop);
 262:src/lcd.c     ****                 }
 263:src/lcd.c     ****                 if (dots[p+1]) { // top left
 1587              		.loc 1 263 17 is_stmt 1 view .LVU276
 1588              		.loc 1 263 20 is_stmt 0 view .LVU277
 1589 0014 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
ARM GAS  /tmp/ccp7FtIo.s 			page 34


 1590 0016 002B     		cmp	r3, #0
 1591 0018 2BD1     		bne	.L206
 1592              	.L80:
 264:src/lcd.c     **** 		  left_side_top (x, ytop);
 265:src/lcd.c     ****                 }
 266:src/lcd.c     ****                 if (dots[p+3]) { // top right
 1593              		.loc 1 266 17 is_stmt 1 view .LVU278
 1594              		.loc 1 266 20 is_stmt 0 view .LVU279
 1595 001a E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
 1596 001c 002B     		cmp	r3, #0
 1597 001e 2FD1     		bne	.L207
 1598              	.L81:
 267:src/lcd.c     **** 		  right_side_top (x, ytop);
 268:src/lcd.c     ****                 }
 269:src/lcd.c     ****                 if (dots[p+2]) { // centre line
 1599              		.loc 1 269 17 is_stmt 1 view .LVU280
 1600              		.loc 1 269 20 is_stmt 0 view .LVU281
 1601 0020 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 1602 0022 002B     		cmp	r3, #0
 1603 0024 33D1     		bne	.L208
 1604              	.L82:
 270:src/lcd.c     **** 		  middle (x, ytop);
 271:src/lcd.c     ****                 }
 272:src/lcd.c     ****                 if (dots[p+4]) { // lower left
 1605              		.loc 1 272 17 is_stmt 1 view .LVU282
 1606              		.loc 1 272 20 is_stmt 0 view .LVU283
 1607 0026 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 1608 0028 002B     		cmp	r3, #0
 1609 002a 37D1     		bne	.L209
 1610              	.L83:
 273:src/lcd.c     **** 		  left_side_bottom (x, ytop);
 274:src/lcd.c     ****                 }
 275:src/lcd.c     ****                 if (dots[p+6]) { // lower right
 1611              		.loc 1 275 17 is_stmt 1 view .LVU284
 1612              		.loc 1 275 20 is_stmt 0 view .LVU285
 1613 002c A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 1614 002e 002B     		cmp	r3, #0
 1615 0030 3BD1     		bne	.L210
 1616              	.L84:
 276:src/lcd.c     **** 		  right_side_bottom (x, ytop);
 277:src/lcd.c     ****                 }
 278:src/lcd.c     ****                 if (dots[p+5]) { // bottom
 1617              		.loc 1 278 17 is_stmt 1 view .LVU286
 1618              		.loc 1 278 20 is_stmt 0 view .LVU287
 1619 0032 6379     		ldrb	r3, [r4, #5]	@ zero_extendqisi2
 1620 0034 002B     		cmp	r3, #0
 1621 0036 3FD1     		bne	.L211
 1622              	.L85:
 279:src/lcd.c     **** 		  bottom (x, ytop);
 280:src/lcd.c     ****                 }
 281:src/lcd.c     ****                 if (dots[p+7]) { // point
 1623              		.loc 1 281 17 is_stmt 1 view .LVU288
 1624              		.loc 1 281 20 is_stmt 0 view .LVU289
 1625 0038 E379     		ldrb	r3, [r4, #7]	@ zero_extendqisi2
 1626 003a 3BB1     		cbz	r3, .L86
 282:src/lcd.c     **** 		  decimal (x, ytop);
 1627              		.loc 1 282 5 is_stmt 1 view .LVU290
ARM GAS  /tmp/ccp7FtIo.s 			page 35


 1628              	.LVL131:
 1629              	.LBB61:
 1630              	.LBI58:
 195:src/lcd.c     ****   lcd_fill_rect (i+19, j+40, 5, 5, 0xff);
 1631              		.loc 1 195 6 view .LVU291
 1632              	.LBB60:
 196:src/lcd.c     **** }
 1633              		.loc 1 196 3 view .LVU292
 1634 003c FF22     		movs	r2, #255
 1635 003e 0523     		movs	r3, #5
 1636 0040 0092     		str	r2, [sp]
 1637 0042 AA21     		movs	r1, #170
 1638 0044 1A46     		mov	r2, r3
 1639 0046 05F11300 		add	r0, r5, #19
 1640 004a C047     		blx	r8
 1641              	.LVL132:
 1642              	.L86:
 196:src/lcd.c     **** }
 1643              		.loc 1 196 3 is_stmt 0 view .LVU293
 1644              	.LBE60:
 1645              	.LBE61:
 283:src/lcd.c     ****                 }
 284:src/lcd.c     ****                 if (dots[p+8]) { // comma
 1646              		.loc 1 284 17 is_stmt 1 view .LVU294
 1647              		.loc 1 284 20 is_stmt 0 view .LVU295
 1648 004c 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 1649 004e 002B     		cmp	r3, #0
 1650 0050 3CD1     		bne	.L212
 257:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 1651              		.loc 1 257 37 is_stmt 1 discriminator 2 view .LVU296
 257:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 1652              		.loc 1 257 19 discriminator 2 view .LVU297
 1653 0052 1935     		adds	r5, r5, #25
 1654              	.LVL133:
 257:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 1655              		.loc 1 257 9 is_stmt 0 discriminator 2 view .LVU298
 1656 0054 B5F5A37F 		cmp	r5, #326
 1657 0058 04F10904 		add	r4, r4, #9
 1658              	.LVL134:
 257:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 1659              		.loc 1 257 9 discriminator 2 view .LVU299
 1660 005c 40D0     		beq	.L213
 1661              	.LVL135:
 1662              	.L88:
 258:src/lcd.c     ****                 x = xleft + dwidth*i;
 1663              		.loc 1 258 17 is_stmt 1 view .LVU300
 259:src/lcd.c     ****                 if (dots[p]) { // top
 1664              		.loc 1 259 17 view .LVU301
 260:src/lcd.c     **** 		  top (x, ytop);
 1665              		.loc 1 260 17 view .LVU302
 260:src/lcd.c     **** 		  top (x, ytop);
 1666              		.loc 1 260 20 is_stmt 0 view .LVU303
 1667 005e 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1668 0060 002B     		cmp	r3, #0
 1669 0062 D7D0     		beq	.L79
 261:src/lcd.c     ****                 }
 1670              		.loc 1 261 5 is_stmt 1 view .LVU304
ARM GAS  /tmp/ccp7FtIo.s 			page 36


 1671 0064 8221     		movs	r1, #130
 1672 0066 2846     		mov	r0, r5
 1673 0068 FFF7FEFF 		bl	top
 1674              	.LVL136:
 263:src/lcd.c     **** 		  left_side_top (x, ytop);
 1675              		.loc 1 263 17 view .LVU305
 263:src/lcd.c     **** 		  left_side_top (x, ytop);
 1676              		.loc 1 263 20 is_stmt 0 view .LVU306
 1677 006c 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1678 006e 002B     		cmp	r3, #0
 1679 0070 D3D0     		beq	.L80
 1680              	.L206:
 264:src/lcd.c     ****                 }
 1681              		.loc 1 264 5 is_stmt 1 view .LVU307
 1682              	.LVL137:
 1683              	.LBB62:
 1684              	.LBI62:
 159:src/lcd.c     ****   left_side(i, j);
 1685              		.loc 1 159 6 view .LVU308
 1686              	.LBB63:
 160:src/lcd.c     **** }
 1687              		.loc 1 160 3 view .LVU309
 1688 0072 8221     		movs	r1, #130
 1689 0074 2846     		mov	r0, r5
 1690 0076 FFF7FEFF 		bl	left_side
 1691              	.LVL138:
 160:src/lcd.c     **** }
 1692              		.loc 1 160 3 is_stmt 0 view .LVU310
 1693              	.LBE63:
 1694              	.LBE62:
 266:src/lcd.c     **** 		  right_side_top (x, ytop);
 1695              		.loc 1 266 17 is_stmt 1 view .LVU311
 266:src/lcd.c     **** 		  right_side_top (x, ytop);
 1696              		.loc 1 266 20 is_stmt 0 view .LVU312
 1697 007a E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
 1698 007c 002B     		cmp	r3, #0
 1699 007e CFD0     		beq	.L81
 1700              	.L207:
 267:src/lcd.c     ****                 }
 1701              		.loc 1 267 5 is_stmt 1 view .LVU313
 1702              	.LVL139:
 1703              	.LBB64:
 1704              	.LBI64:
 172:src/lcd.c     ****   right_side(i, j);
 1705              		.loc 1 172 6 view .LVU314
 1706              	.LBB65:
 173:src/lcd.c     **** }
 1707              		.loc 1 173 3 view .LVU315
 1708 0080 8221     		movs	r1, #130
 1709 0082 2846     		mov	r0, r5
 1710 0084 FFF7FEFF 		bl	right_side
 1711              	.LVL140:
 173:src/lcd.c     **** }
 1712              		.loc 1 173 3 is_stmt 0 view .LVU316
 1713              	.LBE65:
 1714              	.LBE64:
 269:src/lcd.c     **** 		  middle (x, ytop);
ARM GAS  /tmp/ccp7FtIo.s 			page 37


 1715              		.loc 1 269 17 is_stmt 1 view .LVU317
 269:src/lcd.c     **** 		  middle (x, ytop);
 1716              		.loc 1 269 20 is_stmt 0 view .LVU318
 1717 0088 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 1718 008a 002B     		cmp	r3, #0
 1719 008c CBD0     		beq	.L82
 1720              	.L208:
 270:src/lcd.c     ****                 }
 1721              		.loc 1 270 5 is_stmt 1 view .LVU319
 1722 008e 8221     		movs	r1, #130
 1723 0090 2846     		mov	r0, r5
 1724 0092 FFF7FEFF 		bl	middle
 1725              	.LVL141:
 272:src/lcd.c     **** 		  left_side_bottom (x, ytop);
 1726              		.loc 1 272 17 view .LVU320
 272:src/lcd.c     **** 		  left_side_bottom (x, ytop);
 1727              		.loc 1 272 20 is_stmt 0 view .LVU321
 1728 0096 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 1729 0098 002B     		cmp	r3, #0
 1730 009a C7D0     		beq	.L83
 1731              	.L209:
 273:src/lcd.c     ****                 }
 1732              		.loc 1 273 5 is_stmt 1 view .LVU322
 1733              	.LVL142:
 1734              	.LBB66:
 1735              	.LBI66:
 162:src/lcd.c     ****   left_side(i-2, j+19);
 1736              		.loc 1 162 6 view .LVU323
 1737              	.LBB67:
 163:src/lcd.c     **** }
 1738              		.loc 1 163 3 view .LVU324
 1739 009c 9521     		movs	r1, #149
 1740 009e A81E     		subs	r0, r5, #2
 1741 00a0 FFF7FEFF 		bl	left_side
 1742              	.LVL143:
 163:src/lcd.c     **** }
 1743              		.loc 1 163 3 is_stmt 0 view .LVU325
 1744              	.LBE67:
 1745              	.LBE66:
 275:src/lcd.c     **** 		  right_side_bottom (x, ytop);
 1746              		.loc 1 275 17 is_stmt 1 view .LVU326
 275:src/lcd.c     **** 		  right_side_bottom (x, ytop);
 1747              		.loc 1 275 20 is_stmt 0 view .LVU327
 1748 00a4 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 1749 00a6 002B     		cmp	r3, #0
 1750 00a8 C3D0     		beq	.L84
 1751              	.L210:
 276:src/lcd.c     ****                 }
 1752              		.loc 1 276 5 is_stmt 1 view .LVU328
 1753              	.LVL144:
 1754              	.LBB68:
 1755              	.LBI68:
 175:src/lcd.c     ****   right_side(i-2, j+19);
 1756              		.loc 1 175 6 view .LVU329
 1757              	.LBB69:
 176:src/lcd.c     **** }
 1758              		.loc 1 176 3 view .LVU330
ARM GAS  /tmp/ccp7FtIo.s 			page 38


 1759 00aa 9521     		movs	r1, #149
 1760 00ac A81E     		subs	r0, r5, #2
 1761 00ae FFF7FEFF 		bl	right_side
 1762              	.LVL145:
 176:src/lcd.c     **** }
 1763              		.loc 1 176 3 is_stmt 0 view .LVU331
 1764              	.LBE69:
 1765              	.LBE68:
 278:src/lcd.c     **** 		  bottom (x, ytop);
 1766              		.loc 1 278 17 is_stmt 1 view .LVU332
 278:src/lcd.c     **** 		  bottom (x, ytop);
 1767              		.loc 1 278 20 is_stmt 0 view .LVU333
 1768 00b2 6379     		ldrb	r3, [r4, #5]	@ zero_extendqisi2
 1769 00b4 002B     		cmp	r3, #0
 1770 00b6 BFD0     		beq	.L85
 1771              	.L211:
 279:src/lcd.c     ****                 }
 1772              		.loc 1 279 5 is_stmt 1 view .LVU334
 1773 00b8 8221     		movs	r1, #130
 1774 00ba 2846     		mov	r0, r5
 1775 00bc FFF7FEFF 		bl	bottom
 1776              	.LVL146:
 1777 00c0 BAE7     		b	.L85
 1778              	.L224:
 1779 00c2 00BF     		.align	2
 1780              	.L223:
 1781 00c4 00000000 		.word	.LANCHOR0
 1782 00c8 3D020008 		.word	134218301
 1783              	.L212:
 285:src/lcd.c     **** 		  comma (x, ytop);
 1784              		.loc 1 285 5 view .LVU335
 1785 00cc 2846     		mov	r0, r5
 1786 00ce 8221     		movs	r1, #130
 1787 00d0 1935     		adds	r5, r5, #25
 1788              	.LVL147:
 1789              		.loc 1 285 5 is_stmt 0 view .LVU336
 1790 00d2 FFF7FEFF 		bl	comma
 1791              	.LVL148:
 257:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 1792              		.loc 1 257 37 is_stmt 1 view .LVU337
 257:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 1793              		.loc 1 257 19 view .LVU338
 257:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 1794              		.loc 1 257 9 is_stmt 0 view .LVU339
 1795 00d6 B5F5A37F 		cmp	r5, #326
 1796 00da 04F10904 		add	r4, r4, #9
 1797              	.LVL149:
 257:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 1798              		.loc 1 257 9 view .LVU340
 1799 00de BED1     		bne	.L88
 1800              	.LVL150:
 1801              	.L213:
 257:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 1802              		.loc 1 257 9 view .LVU341
 1803 00e0 9F4C     		ldr	r4, .L225
 1804 00e2 4FF4AC75 		mov	r5, #344
 1805              	.L96:
ARM GAS  /tmp/ccp7FtIo.s 			page 39


 286:src/lcd.c     ****                 }
 287:src/lcd.c     ****         }
 288:src/lcd.c     ****         /* Segments 108 - 128 are the exponent digits */
 289:src/lcd.c     ****         for (i=0; i<3; i++) {
 290:src/lcd.c     ****                 p = i*7+108;
 1806              		.loc 1 290 17 is_stmt 1 view .LVU342
 1807              	.LVL151:
 291:src/lcd.c     ****                 x = xleft_exp + dwidth_exp*i;
 1808              		.loc 1 291 17 view .LVU343
 292:src/lcd.c     ****                 if (dots[p]) { // top
 1809              		.loc 1 292 17 view .LVU344
 1810              		.loc 1 292 20 is_stmt 0 view .LVU345
 1811 00e6 94F86C30 		ldrb	r3, [r4, #108]	@ zero_extendqisi2
 1812 00ea 002B     		cmp	r3, #0
 1813 00ec 40F02381 		bne	.L214
 1814              	.L89:
 293:src/lcd.c     **** 		  exp_top (x, ytop_exp);
 294:src/lcd.c     ****                 }
 295:src/lcd.c     ****                 if (dots[p+1]) { // top left
 1815              		.loc 1 295 17 is_stmt 1 view .LVU346
 1816              		.loc 1 295 20 is_stmt 0 view .LVU347
 1817 00f0 94F86D30 		ldrb	r3, [r4, #109]	@ zero_extendqisi2
 1818 00f4 002B     		cmp	r3, #0
 1819 00f6 40F01981 		bne	.L215
 1820              	.L90:
 296:src/lcd.c     **** 		  exp_left_side_top (x, ytop_exp);
 297:src/lcd.c     ****                 }
 298:src/lcd.c     ****                 if (dots[p+3]) { // top right
 1821              		.loc 1 298 17 is_stmt 1 view .LVU348
 1822              		.loc 1 298 20 is_stmt 0 view .LVU349
 1823 00fa 94F86F30 		ldrb	r3, [r4, #111]	@ zero_extendqisi2
 1824 00fe 002B     		cmp	r3, #0
 1825 0100 40F00F81 		bne	.L216
 1826              	.L91:
 299:src/lcd.c     **** 		  exp_right_side_top (x, ytop_exp);
 300:src/lcd.c     ****                 }
 301:src/lcd.c     ****                 if (dots[p+2]) { // centre line
 1827              		.loc 1 301 17 is_stmt 1 view .LVU350
 1828              		.loc 1 301 20 is_stmt 0 view .LVU351
 1829 0104 94F86E30 		ldrb	r3, [r4, #110]	@ zero_extendqisi2
 1830 0108 002B     		cmp	r3, #0
 1831 010a 40F00581 		bne	.L217
 1832              	.L92:
 302:src/lcd.c     **** 		  exp_middle (x, ytop_exp);
 303:src/lcd.c     ****                 }
 304:src/lcd.c     ****                 if (dots[p+4]) { // lower left
 1833              		.loc 1 304 17 is_stmt 1 view .LVU352
 1834              		.loc 1 304 20 is_stmt 0 view .LVU353
 1835 010e 94F87030 		ldrb	r3, [r4, #112]	@ zero_extendqisi2
 1836 0112 002B     		cmp	r3, #0
 1837 0114 40F0FB80 		bne	.L218
 1838              	.L93:
 305:src/lcd.c     **** 		  exp_left_side_bottom (x, ytop_exp);
 306:src/lcd.c     ****                 }
 307:src/lcd.c     ****                 if (dots[p+6]) { // lower right
 1839              		.loc 1 307 17 is_stmt 1 view .LVU354
 1840              		.loc 1 307 20 is_stmt 0 view .LVU355
ARM GAS  /tmp/ccp7FtIo.s 			page 40


 1841 0118 94F87230 		ldrb	r3, [r4, #114]	@ zero_extendqisi2
 1842 011c 002B     		cmp	r3, #0
 1843 011e 40F0F180 		bne	.L219
 1844              	.L94:
 308:src/lcd.c     **** 		  exp_right_side_bottom (x, ytop_exp);
 309:src/lcd.c     ****                 }
 310:src/lcd.c     ****                 if (dots[p+5]) { // bottom
 1845              		.loc 1 310 17 is_stmt 1 view .LVU356
 1846              		.loc 1 310 20 is_stmt 0 view .LVU357
 1847 0122 94F87130 		ldrb	r3, [r4, #113]	@ zero_extendqisi2
 1848 0126 002B     		cmp	r3, #0
 1849 0128 40F0E780 		bne	.L220
 1850              	.L95:
 289:src/lcd.c     ****                 p = i*7+108;
 1851              		.loc 1 289 24 is_stmt 1 discriminator 2 view .LVU358
 289:src/lcd.c     ****                 p = i*7+108;
 1852              		.loc 1 289 19 discriminator 2 view .LVU359
 1853 012c 1235     		adds	r5, r5, #18
 1854              	.LVL152:
 289:src/lcd.c     ****                 p = i*7+108;
 1855              		.loc 1 289 9 is_stmt 0 discriminator 2 view .LVU360
 1856 012e B5F5C77F 		cmp	r5, #398
 1857 0132 04F10704 		add	r4, r4, #7
 1858              	.LVL153:
 289:src/lcd.c     ****                 p = i*7+108;
 1859              		.loc 1 289 9 discriminator 2 view .LVU361
 1860 0136 D6D1     		bne	.L96
 311:src/lcd.c     **** 		  exp_bottom (x, ytop_exp);
 312:src/lcd.c     ****                 }
 313:src/lcd.c     ****         }
 314:src/lcd.c     ****         /* Segments 129 & 130 are the signs */
 315:src/lcd.c     ****         if (dots[MANT_SIGN]) {
 1861              		.loc 1 315 9 is_stmt 1 view .LVU362
 1862              		.loc 1 315 12 is_stmt 0 view .LVU363
 1863 0138 97F88130 		ldrb	r3, [r7, #129]	@ zero_extendqisi2
 1864 013c 002B     		cmp	r3, #0
 1865 013e 40F0FF80 		bne	.L221
 316:src/lcd.c     **** 	  middle (xleft - dwidth, ytop);
 317:src/lcd.c     ****         }
 318:src/lcd.c     ****         if (dots[EXP_SIGN]) {
 1866              		.loc 1 318 9 is_stmt 1 view .LVU364
 1867              		.loc 1 318 12 is_stmt 0 view .LVU365
 1868 0142 97F88230 		ldrb	r3, [r7, #130]	@ zero_extendqisi2
 1869 0146 002B     		cmp	r3, #0
 1870 0148 40F00381 		bne	.L222
 1871              	.L98:
 319:src/lcd.c     **** 	  exp_middle (xleft_exp-dwidth_exp, ytop);
 320:src/lcd.c     ****         }
 321:src/lcd.c     **** 	if (dots[BIG_EQ]) {
 1872              		.loc 1 321 2 is_stmt 1 view .LVU366
 1873              		.loc 1 321 5 is_stmt 0 view .LVU367
 1874 014c 97F88330 		ldrb	r3, [r7, #131]	@ zero_extendqisi2
 1875 0150 6BB1     		cbz	r3, .L99
 322:src/lcd.c     **** 	  lcd_fill_rect (235, ytop-(5+5*6)+2.5*5, 15, 4, 0xff);
 1876              		.loc 1 322 4 is_stmt 1 view .LVU368
 1877 0152 FF25     		movs	r5, #255
 1878              	.LVL154:
ARM GAS  /tmp/ccp7FtIo.s 			page 41


 1879              		.loc 1 322 4 is_stmt 0 view .LVU369
 1880 0154 0423     		movs	r3, #4
 1881 0156 0F22     		movs	r2, #15
 1882 0158 6B21     		movs	r1, #107
 1883 015a EB20     		movs	r0, #235
 1884 015c 814C     		ldr	r4, .L225+4
 1885              	.LVL155:
 1886              		.loc 1 322 4 view .LVU370
 1887 015e 0095     		str	r5, [sp]
 1888 0160 A047     		blx	r4
 1889              	.LVL156:
 323:src/lcd.c     **** 	  lcd_fill_rect (235, ytop-(5+5*6)+4.5*5, 15, 4, 0xff);
 1890              		.loc 1 323 4 is_stmt 1 view .LVU371
 1891 0162 0095     		str	r5, [sp]
 1892 0164 0423     		movs	r3, #4
 1893 0166 0F22     		movs	r2, #15
 1894 0168 7521     		movs	r1, #117
 1895 016a EB20     		movs	r0, #235
 1896 016c A047     		blx	r4
 1897              	.LVL157:
 1898              	.L99:
 324:src/lcd.c     ****         }
 325:src/lcd.c     **** 	/* t20->newln = 0; */
 326:src/lcd.c     **** 	/* t20->lnfill = 0; */
 327:src/lcd.c     **** 	/* t20->fixed = 1; */
 328:src/lcd.c     **** 	/* t20->xspc = -2; */
 329:src/lcd.c     **** 	t20->inv = 0;
 1899              		.loc 1 329 2 view .LVU372
 1900 016e 7E4B     		ldr	r3, .L225+8
 1901              		.loc 1 329 11 is_stmt 0 view .LVU373
 1902 0170 1B6B     		ldr	r3, [r3, #48]
 1903 0172 0022     		movs	r2, #0
 1904 0174 5A74     		strb	r2, [r3, #17]
 330:src/lcd.c     **** 	
 331:src/lcd.c     ****         if (dots[DOWN_ARR]) {
 1905              		.loc 1 331 9 is_stmt 1 view .LVU374
 1906              		.loc 1 331 12 is_stmt 0 view .LVU375
 1907 0176 97F88530 		ldrb	r3, [r7, #133]	@ zero_extendqisi2
 1908 017a 5BB3     		cbz	r3, .L100
 332:src/lcd.c     **** 	  lcd_fill_rect(262, ytop_exp-100,5,12,0xff);
 1909              		.loc 1 332 4 is_stmt 1 view .LVU376
 1910 017c FF25     		movs	r5, #255
 1911 017e 794C     		ldr	r4, .L225+4
 1912 0180 0095     		str	r5, [sp]
 1913 0182 0C23     		movs	r3, #12
 1914 0184 0522     		movs	r2, #5
 1915 0186 1E21     		movs	r1, #30
 1916 0188 4FF48370 		mov	r0, #262
 1917 018c A047     		blx	r4
 1918              	.LVL158:
 333:src/lcd.c     **** 	  lcd_fill_rect(260,ytop_exp-88,9,1,0xff);
 1919              		.loc 1 333 4 view .LVU377
 1920 018e 0123     		movs	r3, #1
 1921 0190 0922     		movs	r2, #9
 1922 0192 2A21     		movs	r1, #42
 1923 0194 4FF48270 		mov	r0, #260
 1924 0198 0095     		str	r5, [sp]
ARM GAS  /tmp/ccp7FtIo.s 			page 42


 1925 019a A047     		blx	r4
 1926              	.LVL159:
 334:src/lcd.c     **** 	  lcd_fill_rect(261,ytop_exp-87,7,1,0xff);
 1927              		.loc 1 334 4 view .LVU378
 1928 019c 0123     		movs	r3, #1
 1929 019e 0722     		movs	r2, #7
 1930 01a0 2B21     		movs	r1, #43
 1931 01a2 40F20510 		movw	r0, #261
 1932 01a6 0095     		str	r5, [sp]
 1933 01a8 A047     		blx	r4
 1934              	.LVL160:
 335:src/lcd.c     **** 	  lcd_fill_rect(262,ytop_exp-86,5,1,0xff);
 1935              		.loc 1 335 4 view .LVU379
 1936 01aa 0123     		movs	r3, #1
 1937 01ac 0522     		movs	r2, #5
 1938 01ae 2C21     		movs	r1, #44
 1939 01b0 4FF48370 		mov	r0, #262
 1940 01b4 0095     		str	r5, [sp]
 1941 01b6 A047     		blx	r4
 1942              	.LVL161:
 336:src/lcd.c     **** 	  lcd_fill_rect(263,ytop_exp-85,3,1,0xff);
 1943              		.loc 1 336 4 view .LVU380
 1944 01b8 0123     		movs	r3, #1
 1945 01ba 0322     		movs	r2, #3
 1946 01bc 2D21     		movs	r1, #45
 1947 01be 40F20710 		movw	r0, #263
 1948 01c2 0095     		str	r5, [sp]
 1949 01c4 A047     		blx	r4
 1950              	.LVL162:
 337:src/lcd.c     **** 	  lcd_fill_rect(264,ytop_exp-84,1,1,0xff);
 1951              		.loc 1 337 4 view .LVU381
 1952 01c6 0123     		movs	r3, #1
 1953 01c8 0095     		str	r5, [sp]
 1954 01ca 1A46     		mov	r2, r3
 1955 01cc 2E21     		movs	r1, #46
 1956 01ce 4FF48470 		mov	r0, #264
 1957 01d2 A047     		blx	r4
 1958              	.LVL163:
 1959              	.L100:
 338:src/lcd.c     ****         }
 339:src/lcd.c     **** 
 340:src/lcd.c     **** 	if (dots[INPUT]) {
 1960              		.loc 1 340 2 view .LVU382
 1961              		.loc 1 340 5 is_stmt 0 view .LVU383
 1962 01d4 97F88630 		ldrb	r3, [r7, #134]	@ zero_extendqisi2
 1963 01d8 53B1     		cbz	r3, .L101
 341:src/lcd.c     **** 	  lcd_setXY(t20, 285, ytop_exp-90);
 1964              		.loc 1 341 4 is_stmt 1 view .LVU384
 1965 01da 634C     		ldr	r4, .L225+8
 1966 01dc 634B     		ldr	r3, .L225+12
 1967 01de 206B     		ldr	r0, [r4, #48]
 1968 01e0 40F21D11 		movw	r1, #285
 1969 01e4 2822     		movs	r2, #40
 1970 01e6 9847     		blx	r3
 1971              	.LVL164:
 342:src/lcd.c     **** 	  lcd_writeText(t20,"INPUT");
 1972              		.loc 1 342 4 view .LVU385
ARM GAS  /tmp/ccp7FtIo.s 			page 43


 1973 01e8 206B     		ldr	r0, [r4, #48]
 1974 01ea 614B     		ldr	r3, .L225+16
 1975 01ec 6149     		ldr	r1, .L225+20
 1976 01ee 9847     		blx	r3
 1977              	.LVL165:
 1978              	.L101:
 343:src/lcd.c     ****         }
 344:src/lcd.c     **** 
 345:src/lcd.c     **** 	if (dots[LIT_EQ]) {
 1979              		.loc 1 345 2 view .LVU386
 1980              		.loc 1 345 5 is_stmt 0 view .LVU387
 1981 01f0 97F88430 		ldrb	r3, [r7, #132]	@ zero_extendqisi2
 1982 01f4 53B1     		cbz	r3, .L102
 346:src/lcd.c     **** 	  lcd_setXY (t20, 330 ,ytop_exp-90);
 1983              		.loc 1 346 4 is_stmt 1 view .LVU388
 1984 01f6 5C4C     		ldr	r4, .L225+8
 1985 01f8 5C4B     		ldr	r3, .L225+12
 1986 01fa 206B     		ldr	r0, [r4, #48]
 1987 01fc 4FF4A571 		mov	r1, #330
 1988 0200 2822     		movs	r2, #40
 1989 0202 9847     		blx	r3
 1990              	.LVL166:
 347:src/lcd.c     **** 	  lcd_writeText(t20, "=");
 1991              		.loc 1 347 4 view .LVU389
 1992 0204 206B     		ldr	r0, [r4, #48]
 1993 0206 5A4B     		ldr	r3, .L225+16
 1994 0208 5B49     		ldr	r1, .L225+24
 1995 020a 9847     		blx	r3
 1996              	.LVL167:
 1997              	.L102:
 348:src/lcd.c     ****         }
 349:src/lcd.c     **** 
 350:src/lcd.c     **** 	if (dots[BATTERY]) {
 1998              		.loc 1 350 2 view .LVU390
 351:src/lcd.c     **** 	  //    MOVE(70, 10);   PRINTF("####-");
 352:src/lcd.c     ****         }
 1999              		.loc 1 352 9 view .LVU391
 353:src/lcd.c     **** 
 354:src/lcd.c     **** 	if (dots[BEG]) {
 2000              		.loc 1 354 2 view .LVU392
 2001              		.loc 1 354 5 is_stmt 0 view .LVU393
 2002 020c 97F88830 		ldrb	r3, [r7, #136]	@ zero_extendqisi2
 2003 0210 53B1     		cbz	r3, .L103
 355:src/lcd.c     **** 	  lcd_setXY (t20, 260,ytop_exp-60);
 2004              		.loc 1 355 4 is_stmt 1 view .LVU394
 2005 0212 554C     		ldr	r4, .L225+8
 2006 0214 554B     		ldr	r3, .L225+12
 2007 0216 206B     		ldr	r0, [r4, #48]
 2008 0218 4FF48271 		mov	r1, #260
 2009 021c 4622     		movs	r2, #70
 2010 021e 9847     		blx	r3
 2011              	.LVL168:
 356:src/lcd.c     **** 	  lcd_writeText(t20, "BEG");
 2012              		.loc 1 356 4 view .LVU395
 2013 0220 206B     		ldr	r0, [r4, #48]
 2014 0222 534B     		ldr	r3, .L225+16
 2015 0224 5549     		ldr	r1, .L225+28
ARM GAS  /tmp/ccp7FtIo.s 			page 44


 2016 0226 9847     		blx	r3
 2017              	.LVL169:
 2018              	.L103:
 357:src/lcd.c     ****         }
 358:src/lcd.c     **** 
 359:src/lcd.c     **** 	if (dots[STO_annun]) {
 2019              		.loc 1 359 2 view .LVU396
 2020              		.loc 1 359 5 is_stmt 0 view .LVU397
 2021 0228 97F88930 		ldrb	r3, [r7, #137]	@ zero_extendqisi2
 2022 022c 53B1     		cbz	r3, .L104
 360:src/lcd.c     **** 	  lcd_setXY (t20, 305 ,ytop_exp-60);
 2023              		.loc 1 360 4 is_stmt 1 view .LVU398
 2024 022e 4E4C     		ldr	r4, .L225+8
 2025 0230 4E4B     		ldr	r3, .L225+12
 2026 0232 206B     		ldr	r0, [r4, #48]
 2027 0234 40F23111 		movw	r1, #305
 2028 0238 4622     		movs	r2, #70
 2029 023a 9847     		blx	r3
 2030              	.LVL170:
 361:src/lcd.c     **** 	  lcd_writeText(t20, "STO");
 2031              		.loc 1 361 4 view .LVU399
 2032 023c 206B     		ldr	r0, [r4, #48]
 2033 023e 4C4B     		ldr	r3, .L225+16
 2034 0240 4F49     		ldr	r1, .L225+32
 2035 0242 9847     		blx	r3
 2036              	.LVL171:
 2037              	.L104:
 362:src/lcd.c     ****         }
 363:src/lcd.c     **** 
 364:src/lcd.c     **** 	if (dots[RCL_annun]) {
 2038              		.loc 1 364 2 view .LVU400
 2039              		.loc 1 364 5 is_stmt 0 view .LVU401
 2040 0244 97F88A30 		ldrb	r3, [r7, #138]	@ zero_extendqisi2
 2041 0248 53B1     		cbz	r3, .L105
 365:src/lcd.c     **** 	  lcd_setXY (t20, 350 ,ytop_exp-60);
 2042              		.loc 1 365 4 is_stmt 1 view .LVU402
 2043 024a 474C     		ldr	r4, .L225+8
 2044 024c 474B     		ldr	r3, .L225+12
 2045 024e 206B     		ldr	r0, [r4, #48]
 2046 0250 4FF4AF71 		mov	r1, #350
 2047 0254 4622     		movs	r2, #70
 2048 0256 9847     		blx	r3
 2049              	.LVL172:
 366:src/lcd.c     **** 	  lcd_writeText(t20, "RCL");
 2050              		.loc 1 366 4 view .LVU403
 2051 0258 206B     		ldr	r0, [r4, #48]
 2052 025a 454B     		ldr	r3, .L225+16
 2053 025c 4949     		ldr	r1, .L225+36
 2054 025e 9847     		blx	r3
 2055              	.LVL173:
 2056              	.L105:
 367:src/lcd.c     ****         }
 368:src/lcd.c     **** 
 369:src/lcd.c     **** 	if (dots[RAD]) {
 2057              		.loc 1 369 2 view .LVU404
 2058              		.loc 1 369 5 is_stmt 0 view .LVU405
 2059 0260 97F88B30 		ldrb	r3, [r7, #139]	@ zero_extendqisi2
ARM GAS  /tmp/ccp7FtIo.s 			page 45


 2060 0264 53B1     		cbz	r3, .L106
 370:src/lcd.c     **** 	  lcd_setXY (t20, 260 ,ytop_exp-30);
 2061              		.loc 1 370 4 is_stmt 1 view .LVU406
 2062 0266 404C     		ldr	r4, .L225+8
 2063 0268 404B     		ldr	r3, .L225+12
 2064 026a 206B     		ldr	r0, [r4, #48]
 2065 026c 4FF48271 		mov	r1, #260
 2066 0270 6422     		movs	r2, #100
 2067 0272 9847     		blx	r3
 2068              	.LVL174:
 371:src/lcd.c     **** 	  lcd_writeText(t20, "RAD");
 2069              		.loc 1 371 4 view .LVU407
 2070 0274 206B     		ldr	r0, [r4, #48]
 2071 0276 3E4B     		ldr	r3, .L225+16
 2072 0278 4349     		ldr	r1, .L225+40
 2073 027a 9847     		blx	r3
 2074              	.LVL175:
 2075              	.L106:
 372:src/lcd.c     **** 	}
 373:src/lcd.c     **** 
 374:src/lcd.c     **** 	if (dots[DEG]) {
 2076              		.loc 1 374 2 view .LVU408
 2077              		.loc 1 374 5 is_stmt 0 view .LVU409
 2078 027c 97F88C30 		ldrb	r3, [r7, #140]	@ zero_extendqisi2
 2079 0280 53B1     		cbz	r3, .L107
 375:src/lcd.c     **** 	  lcd_setXY (t20, 305 ,ytop_exp-30);
 2080              		.loc 1 375 4 is_stmt 1 view .LVU410
 2081 0282 394C     		ldr	r4, .L225+8
 2082 0284 394B     		ldr	r3, .L225+12
 2083 0286 206B     		ldr	r0, [r4, #48]
 2084 0288 40F23111 		movw	r1, #305
 2085 028c 6422     		movs	r2, #100
 2086 028e 9847     		blx	r3
 2087              	.LVL176:
 376:src/lcd.c     **** 	  lcd_writeText(t20, "360");
 2088              		.loc 1 376 4 view .LVU411
 2089 0290 206B     		ldr	r0, [r4, #48]
 2090 0292 374B     		ldr	r3, .L225+16
 2091 0294 3D49     		ldr	r1, .L225+44
 2092 0296 9847     		blx	r3
 2093              	.LVL177:
 2094              	.L107:
 377:src/lcd.c     ****         }
 378:src/lcd.c     ****         if (dots[RPN]) {
 2095              		.loc 1 378 9 view .LVU412
 2096              		.loc 1 378 12 is_stmt 0 view .LVU413
 2097 0298 97F88D30 		ldrb	r3, [r7, #141]	@ zero_extendqisi2
 2098 029c 53B1     		cbz	r3, .L108
 379:src/lcd.c     **** 	  lcd_setXY (t20, 350 ,ytop_exp-30);
 2099              		.loc 1 379 4 is_stmt 1 view .LVU414
 2100 029e 324C     		ldr	r4, .L225+8
 2101 02a0 324B     		ldr	r3, .L225+12
 2102 02a2 206B     		ldr	r0, [r4, #48]
 2103 02a4 4FF4AF71 		mov	r1, #350
 2104 02a8 6422     		movs	r2, #100
 2105 02aa 9847     		blx	r3
 2106              	.LVL178:
ARM GAS  /tmp/ccp7FtIo.s 			page 46


 380:src/lcd.c     **** 	  lcd_writeText(t20, "RPN");
 2107              		.loc 1 380 4 view .LVU415
 2108 02ac 206B     		ldr	r0, [r4, #48]
 2109 02ae 304B     		ldr	r3, .L225+16
 2110 02b0 3749     		ldr	r1, .L225+48
 2111 02b2 9847     		blx	r3
 2112              	.LVL179:
 2113              	.L108:
 381:src/lcd.c     ****         }
 382:src/lcd.c     **** 
 383:src/lcd.c     **** 	/* The graphical bit last */
 384:src/lcd.c     ****         for (i=0; i<BITMAP_WIDTH; i++) {
 385:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 386:src/lcd.c     **** 	    if (dots[i*6+j+MATRIX_BASE]) {
 387:src/lcd.c     **** 	      //  lcd_fill_rect( xleft-dwidth+2*i, ytop-(5+3*6)+j*2, 2, 2, 0xff);
 388:src/lcd.c     **** 	      lcd_fill_rect( xleft-dwidth+5*i, ytop-(5+5*6)+j*5, 4, 4, 0xff);
 2114              		.loc 1 388 8 is_stmt 0 view .LVU416
 2115 02b4 DFF8ACA0 		ldr	r10, .L225+4
 2116 02b8 06F18E0B 		add	fp, r6, #142
 2117 02bc 4FF00008 		mov	r8, #0
 2118 02c0 0127     		movs	r7, #1
 2119 02c2 4FF0FF09 		mov	r9, #255
 2120              	.L111:
 2121              	.LVL180:
 385:src/lcd.c     **** 	    if (dots[i*6+j+MATRIX_BASE]) {
 2122              		.loc 1 385 14 is_stmt 1 view .LVU417
 2123 02c6 0BEB0805 		add	r5, fp, r8
 2124 02ca 5F24     		movs	r4, #95
 2125              	.LVL181:
 2126              	.L110:
 386:src/lcd.c     **** 	      //  lcd_fill_rect( xleft-dwidth+2*i, ytop-(5+3*6)+j*2, 2, 2, 0xff);
 2127              		.loc 1 386 6 view .LVU418
 2128              		.loc 1 388 8 view .LVU419
 386:src/lcd.c     **** 	      //  lcd_fill_rect( xleft-dwidth+2*i, ytop-(5+3*6)+j*2, 2, 2, 0xff);
 2129              		.loc 1 386 14 is_stmt 0 view .LVU420
 2130 02cc 15F8016B 		ldrb	r6, [r5], #1	@ zero_extendqisi2
 2131              	.LVL182:
 2132              		.loc 1 388 8 view .LVU421
 2133 02d0 0423     		movs	r3, #4
 2134 02d2 2146     		mov	r1, r4
 2135 02d4 1A46     		mov	r2, r3
 2136 02d6 0534     		adds	r4, r4, #5
 2137 02d8 3846     		mov	r0, r7
 386:src/lcd.c     **** 	      //  lcd_fill_rect( xleft-dwidth+2*i, ytop-(5+3*6)+j*2, 2, 2, 0xff);
 2138              		.loc 1 386 9 view .LVU422
 2139 02da 16B1     		cbz	r6, .L109
 2140              		.loc 1 388 8 view .LVU423
 2141 02dc CDF80090 		str	r9, [sp]
 2142 02e0 D047     		blx	r10
 2143              	.LVL183:
 2144              	.L109:
 385:src/lcd.c     **** 	    if (dots[i*6+j+MATRIX_BASE]) {
 2145              		.loc 1 385 19 is_stmt 1 discriminator 2 view .LVU424
 385:src/lcd.c     **** 	    if (dots[i*6+j+MATRIX_BASE]) {
 2146              		.loc 1 385 14 discriminator 2 view .LVU425
 385:src/lcd.c     **** 	    if (dots[i*6+j+MATRIX_BASE]) {
 2147              		.loc 1 385 4 is_stmt 0 discriminator 2 view .LVU426
ARM GAS  /tmp/ccp7FtIo.s 			page 47


 2148 02e2 7D2C     		cmp	r4, #125
 2149 02e4 F2D1     		bne	.L110
 384:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 2150              		.loc 1 384 35 is_stmt 1 discriminator 2 view .LVU427
 384:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 2151              		.loc 1 384 19 discriminator 2 view .LVU428
 2152 02e6 08F10608 		add	r8, r8, #6
 2153              	.LVL184:
 384:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 2154              		.loc 1 384 9 is_stmt 0 discriminator 2 view .LVU429
 2155 02ea B8F5817F 		cmp	r8, #258
 2156 02ee 07F10507 		add	r7, r7, #5
 2157 02f2 E8D1     		bne	.L111
 389:src/lcd.c     **** 	    }
 390:src/lcd.c     **** 	  }
 391:src/lcd.c     **** 	}
 392:src/lcd.c     **** }
 2158              		.loc 1 392 1 view .LVU430
 2159 02f4 03B0     		add	sp, sp, #12
 2160              		.cfi_remember_state
 2161              		.cfi_def_cfa_offset 36
 2162              		@ sp needed
 2163 02f6 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2164              	.LVL185:
 2165              	.L220:
 2166              		.cfi_restore_state
 311:src/lcd.c     ****                 }
 2167              		.loc 1 311 5 is_stmt 1 view .LVU431
 2168 02fa 8221     		movs	r1, #130
 2169 02fc 2846     		mov	r0, r5
 2170 02fe FFF7FEFF 		bl	exp_bottom
 2171              	.LVL186:
 2172 0302 13E7     		b	.L95
 2173              	.L219:
 308:src/lcd.c     ****                 }
 2174              		.loc 1 308 5 view .LVU432
 2175              	.LVL187:
 2176              	.LBB70:
 2177              	.LBI70:
 224:src/lcd.c     ****   exp_right_side(i-1, j+11);
 2178              		.loc 1 224 6 view .LVU433
 2179              	.LBB71:
 225:src/lcd.c     **** }
 2180              		.loc 1 225 3 view .LVU434
 2181 0304 8D21     		movs	r1, #141
 2182 0306 681E     		subs	r0, r5, #1
 2183 0308 FFF7FEFF 		bl	exp_right_side
 2184              	.LVL188:
 226:src/lcd.c     **** void exp_top (int i, int j) {
 2185              		.loc 1 226 1 is_stmt 0 view .LVU435
 2186 030c 09E7     		b	.L94
 2187              	.LVL189:
 2188              	.L218:
 226:src/lcd.c     **** void exp_top (int i, int j) {
 2189              		.loc 1 226 1 view .LVU436
 2190              	.LBE71:
 2191              	.LBE70:
ARM GAS  /tmp/ccp7FtIo.s 			page 48


 305:src/lcd.c     ****                 }
 2192              		.loc 1 305 5 is_stmt 1 view .LVU437
 2193              	.LBB72:
 2194              	.LBI72:
 212:src/lcd.c     ****   exp_left_side(i, j+11);
 2195              		.loc 1 212 6 view .LVU438
 2196              	.LBB73:
 213:src/lcd.c     **** }
 2197              		.loc 1 213 3 view .LVU439
 2198 030e 8D21     		movs	r1, #141
 2199 0310 2846     		mov	r0, r5
 2200 0312 FFF7FEFF 		bl	exp_left_side
 2201              	.LVL190:
 214:src/lcd.c     **** void exp_right_side (int i, int j) {
 2202              		.loc 1 214 1 is_stmt 0 view .LVU440
 2203 0316 FFE6     		b	.L93
 2204              	.LVL191:
 2205              	.L217:
 214:src/lcd.c     **** void exp_right_side (int i, int j) {
 2206              		.loc 1 214 1 view .LVU441
 2207              	.LBE73:
 2208              	.LBE72:
 302:src/lcd.c     ****                 }
 2209              		.loc 1 302 5 is_stmt 1 view .LVU442
 2210 0318 8221     		movs	r1, #130
 2211 031a 2846     		mov	r0, r5
 2212 031c FFF7FEFF 		bl	exp_middle
 2213              	.LVL192:
 2214 0320 F5E6     		b	.L92
 2215              	.L216:
 299:src/lcd.c     ****                 }
 2216              		.loc 1 299 5 view .LVU443
 2217              	.LVL193:
 2218              	.LBB74:
 2219              	.LBI74:
 221:src/lcd.c     ****   exp_right_side(i, j);
 2220              		.loc 1 221 6 view .LVU444
 2221              	.LBB75:
 222:src/lcd.c     **** }
 2222              		.loc 1 222 3 view .LVU445
 2223 0322 8221     		movs	r1, #130
 2224 0324 2846     		mov	r0, r5
 2225 0326 FFF7FEFF 		bl	exp_right_side
 2226              	.LVL194:
 223:src/lcd.c     **** void exp_right_side_bottom (int i, int j) {
 2227              		.loc 1 223 1 is_stmt 0 view .LVU446
 2228 032a EBE6     		b	.L91
 2229              	.LVL195:
 2230              	.L215:
 223:src/lcd.c     **** void exp_right_side_bottom (int i, int j) {
 2231              		.loc 1 223 1 view .LVU447
 2232              	.LBE75:
 2233              	.LBE74:
 296:src/lcd.c     ****                 }
 2234              		.loc 1 296 5 is_stmt 1 view .LVU448
 2235              	.LBB76:
 2236              	.LBI76:
ARM GAS  /tmp/ccp7FtIo.s 			page 49


 209:src/lcd.c     ****   exp_left_side(i+1, j);
 2237              		.loc 1 209 6 view .LVU449
 2238              	.LBB77:
 210:src/lcd.c     **** }
 2239              		.loc 1 210 3 view .LVU450
 2240 032c 8221     		movs	r1, #130
 2241 032e 681C     		adds	r0, r5, #1
 2242 0330 FFF7FEFF 		bl	exp_left_side
 2243              	.LVL196:
 211:src/lcd.c     **** void exp_left_side_bottom (int i, int j) {
 2244              		.loc 1 211 1 is_stmt 0 view .LVU451
 2245 0334 E1E6     		b	.L90
 2246              	.LVL197:
 2247              	.L214:
 211:src/lcd.c     **** void exp_left_side_bottom (int i, int j) {
 2248              		.loc 1 211 1 view .LVU452
 2249              	.LBE77:
 2250              	.LBE76:
 293:src/lcd.c     ****                 }
 2251              		.loc 1 293 5 is_stmt 1 view .LVU453
 2252 0336 8221     		movs	r1, #130
 2253 0338 2846     		mov	r0, r5
 2254 033a FFF7FEFF 		bl	exp_top
 2255              	.LVL198:
 2256 033e D7E6     		b	.L89
 2257              	.LVL199:
 2258              	.L221:
 316:src/lcd.c     ****         }
 2259              		.loc 1 316 4 view .LVU454
 2260 0340 8221     		movs	r1, #130
 2261 0342 0120     		movs	r0, #1
 2262 0344 FFF7FEFF 		bl	middle
 2263              	.LVL200:
 318:src/lcd.c     **** 	  exp_middle (xleft_exp-dwidth_exp, ytop);
 2264              		.loc 1 318 9 view .LVU455
 318:src/lcd.c     **** 	  exp_middle (xleft_exp-dwidth_exp, ytop);
 2265              		.loc 1 318 12 is_stmt 0 view .LVU456
 2266 0348 97F88230 		ldrb	r3, [r7, #130]	@ zero_extendqisi2
 2267 034c 002B     		cmp	r3, #0
 2268 034e 3FF4FDAE 		beq	.L98
 2269              	.L222:
 319:src/lcd.c     ****         }
 2270              		.loc 1 319 4 is_stmt 1 view .LVU457
 2271 0352 8221     		movs	r1, #130
 2272 0354 4FF4A370 		mov	r0, #326
 2273 0358 FFF7FEFF 		bl	exp_middle
 2274              	.LVL201:
 2275 035c F6E6     		b	.L98
 2276              	.L226:
 2277 035e 00BF     		.align	2
 2278              	.L225:
 2279 0360 00000000 		.word	.LANCHOR0
 2280 0364 3D020008 		.word	134218301
 2281 0368 00200010 		.word	268443648
 2282 036c 6D020008 		.word	134218349
 2283 0370 7D020008 		.word	134218365
 2284 0374 00000000 		.word	.LC0
ARM GAS  /tmp/ccp7FtIo.s 			page 50


 2285 0378 08000000 		.word	.LC1
 2286 037c 0C000000 		.word	.LC2
 2287 0380 10000000 		.word	.LC3
 2288 0384 14000000 		.word	.LC4
 2289 0388 18000000 		.word	.LC5
 2290 038c 1C000000 		.word	.LC6
 2291 0390 20000000 		.word	.LC7
 2292              		.cfi_endproc
 2293              	.LFE25:
 2295              		.section	.text.show_stack,"ax",%progbits
 2296              		.align	1
 2297              		.p2align 2,,3
 2298              		.global	show_stack
 2299              		.syntax unified
 2300              		.thumb
 2301              		.thumb_func
 2302              		.fpu fpv4-sp-d16
 2304              	show_stack:
 2305              	.LFB35:
 2306              		.cfi_startproc
 2307              		@ args = 0, pretend = 0, frame = 0
 2308              		@ frame_needed = 0, uses_anonymous_args = 0
 2309              		@ link register save eliminated.
 2310 0000 7047     		bx	lr
 2311              		.cfi_endproc
 2312              	.LFE35:
 2314 0002 00BF     		.section	.text.show_flags,"ax",%progbits
 2315              		.align	1
 2316              		.p2align 2,,3
 2317              		.global	show_flags
 2318              		.syntax unified
 2319              		.thumb
 2320              		.thumb_func
 2321              		.fpu fpv4-sp-d16
 2323              	show_flags:
 2324              	.LFB33:
 2325              		.cfi_startproc
 2326              		@ args = 0, pretend = 0, frame = 0
 2327              		@ frame_needed = 0, uses_anonymous_args = 0
 2328              		@ link register save eliminated.
 2329 0000 7047     		bx	lr
 2330              		.cfi_endproc
 2331              	.LFE33:
 2333 0002 00BF     		.section	.text.wait_for_display,"ax",%progbits
 2334              		.align	1
 2335              		.p2align 2,,3
 2336              		.global	wait_for_display
 2337              		.syntax unified
 2338              		.thumb
 2339              		.thumb_func
 2340              		.fpu fpv4-sp-d16
 2342              	wait_for_display:
 2343              	.LFB28:
 393:src/lcd.c     **** #endif
 394:src/lcd.c     **** 
 395:src/lcd.c     **** #if defined(USECURSES) && !defined(DM42)
 396:src/lcd.c     **** void show_disp(void) {
ARM GAS  /tmp/ccp7FtIo.s 			page 51


 397:src/lcd.c     ****         int i, j, p, x;
 398:src/lcd.c     ****         const int dig_base = 16;
 399:src/lcd.c     **** 
 400:src/lcd.c     ****         /* Segments 0 - 107 are the main digits */
 401:src/lcd.c     ****         for (i=0; i<DISPLAY_DIGITS; i++) {
 402:src/lcd.c     **** 	  p = i*SEGS_PER_DIGIT; // 9 - 7 + dot and comma
 403:src/lcd.c     ****                 x = 3+5*i;
 404:src/lcd.c     ****                 if (dots[p]) {
 405:src/lcd.c     ****                         MOVE(x+1, dig_base);    PRINTF("--");
 406:src/lcd.c     ****                 }
 407:src/lcd.c     ****                 if (dots[p+1]) {
 408:src/lcd.c     ****                         MOVE(x, dig_base+1);    PRINTF("|");
 409:src/lcd.c     ****                         MOVE(x, dig_base+2);    PRINTF("|");
 410:src/lcd.c     ****                 }
 411:src/lcd.c     ****                 if (dots[p+3]) {
 412:src/lcd.c     ****                         MOVE(x+3, dig_base+1);  PRINTF("|");
 413:src/lcd.c     ****                         MOVE(x+3, dig_base+2);  PRINTF("|");
 414:src/lcd.c     ****                 }
 415:src/lcd.c     ****                 if (dots[p+2]) {
 416:src/lcd.c     ****                         MOVE(x+1, dig_base+3);  PRINTF("--");
 417:src/lcd.c     ****                 }
 418:src/lcd.c     ****                 if (dots[p+4]) {
 419:src/lcd.c     ****                         MOVE(x, dig_base+4);    PRINTF("|");
 420:src/lcd.c     ****                         MOVE(x, dig_base+5);    PRINTF("|");
 421:src/lcd.c     ****                 }
 422:src/lcd.c     ****                 if (dots[p+6]) {
 423:src/lcd.c     ****                         MOVE(x+3, dig_base+4);  PRINTF("|");
 424:src/lcd.c     ****                         MOVE(x+3, dig_base+5);  PRINTF("|");
 425:src/lcd.c     ****                 }
 426:src/lcd.c     ****                 if (dots[p+5]) {
 427:src/lcd.c     ****                         MOVE(x+1, dig_base+6);  PRINTF("--");
 428:src/lcd.c     ****                 }
 429:src/lcd.c     ****                 if (dots[p+7]) {
 430:src/lcd.c     ****                         MOVE(x+4, dig_base+6);  PRINTF(".");
 431:src/lcd.c     ****                 }
 432:src/lcd.c     ****                 if (dots[p+8]) {
 433:src/lcd.c     ****                         MOVE(x+3, dig_base+7);  PRINTF("/");
 434:src/lcd.c     ****                 }
 435:src/lcd.c     ****         }
 436:src/lcd.c     ****         /* Segments 108 - 128 are the exponent digits */
 437:src/lcd.c     ****         for (i=0; i<3; i++) {
 438:src/lcd.c     ****                 p = i*7+108;
 439:src/lcd.c     ****                 x = 66 + i * 4;
 440:src/lcd.c     ****                 if (dots[p]) {
 441:src/lcd.c     ****                         MOVE(x+1, dig_base-1);  PRINTF("-");
 442:src/lcd.c     ****                 }
 443:src/lcd.c     ****                 if (dots[p+1]) {
 444:src/lcd.c     ****                         MOVE(x, dig_base);      PRINTF("|");
 445:src/lcd.c     ****                 }
 446:src/lcd.c     ****                 if (dots[p+3]) {
 447:src/lcd.c     ****                         MOVE(x+2, dig_base);    PRINTF("|");
 448:src/lcd.c     ****                 }
 449:src/lcd.c     ****                 if (dots[p+2]) {
 450:src/lcd.c     ****                         MOVE(x+1, dig_base+1);  PRINTF("-");
 451:src/lcd.c     ****                 }
 452:src/lcd.c     ****                 if (dots[p+4]) {
 453:src/lcd.c     ****                         MOVE(x, dig_base+2);    PRINTF("|");
ARM GAS  /tmp/ccp7FtIo.s 			page 52


 454:src/lcd.c     ****                 }
 455:src/lcd.c     ****                 if (dots[p+6]) {
 456:src/lcd.c     ****                         MOVE(x+2, dig_base+2);  PRINTF("|");
 457:src/lcd.c     ****                 }
 458:src/lcd.c     ****                 if (dots[p+5]) {
 459:src/lcd.c     ****                         MOVE(x+1, dig_base+3);  PRINTF("-");
 460:src/lcd.c     ****                 }
 461:src/lcd.c     ****         }
 462:src/lcd.c     ****         /* Segments 129 & 130 are the signs */
 463:src/lcd.c     ****         if (dots[MANT_SIGN]) {
 464:src/lcd.c     ****                 MOVE(0, dig_base+3);
 465:src/lcd.c     ****                 PRINTF("--");
 466:src/lcd.c     ****         }
 467:src/lcd.c     ****         if (dots[EXP_SIGN]) {
 468:src/lcd.c     ****                 MOVE(64, dig_base+1);
 469:src/lcd.c     ****                 PRINTF("-");
 470:src/lcd.c     ****         }
 471:src/lcd.c     ****         if (dots[BIG_EQ]) {
 472:src/lcd.c     ****                 MOVE(47, 12);   PRINTF("==");
 473:src/lcd.c     ****         }
 474:src/lcd.c     ****         if (dots[LIT_EQ]) {
 475:src/lcd.c     ****                 MOVE(64, 10);   PRINTF("=");
 476:src/lcd.c     ****         }
 477:src/lcd.c     ****         if (dots[DOWN_ARR]) {
 478:src/lcd.c     ****                 MOVE(52, 10);   PRINTF("v");
 479:src/lcd.c     ****         }
 480:src/lcd.c     ****         if (dots[INPUT]) {
 481:src/lcd.c     ****                 MOVE(55, 10);   PRINTF("INPUT");
 482:src/lcd.c     ****         }
 483:src/lcd.c     ****         if (dots[BATTERY]) {
 484:src/lcd.c     ****                 MOVE(70, 10);   PRINTF("####-");
 485:src/lcd.c     ****         }
 486:src/lcd.c     ****         if (dots[BEG]) {
 487:src/lcd.c     ****                 MOVE(52, 12);   PRINTF("BEG");
 488:src/lcd.c     ****         }
 489:src/lcd.c     ****         if (dots[STO_annun]) {
 490:src/lcd.c     ****                 MOVE(62, 12);   PRINTF("STO");
 491:src/lcd.c     ****         }
 492:src/lcd.c     ****         if (dots[RCL_annun]) {
 493:src/lcd.c     ****                 MOVE(72, 12);   PRINTF("RCL");
 494:src/lcd.c     ****         }
 495:src/lcd.c     ****         if (dots[RAD]) {
 496:src/lcd.c     ****                 MOVE(52, 14);   PRINTF("RAD");
 497:src/lcd.c     ****         }
 498:src/lcd.c     ****         if (dots[DEG]) {
 499:src/lcd.c     ****                 MOVE(62, 14);   PRINTF("360");
 500:src/lcd.c     ****         }
 501:src/lcd.c     ****         if (dots[RPN]) {
 502:src/lcd.c     ****                 MOVE(72, 14);   PRINTF("RPN");
 503:src/lcd.c     ****         }
 504:src/lcd.c     ****         /* The graphical bit last */
 505:src/lcd.c     ****         for (i=0; i<BITMAP_WIDTH; i++)
 506:src/lcd.c     ****                 for (j=0; j<6; j++) {
 507:src/lcd.c     ****                         if (dots[i*6+j+MATRIX_BASE]) {
 508:src/lcd.c     ****                                 MOVE(1+i, 9+j);
 509:src/lcd.c     ****                                 PRINTF("#");
 510:src/lcd.c     ****                         }
ARM GAS  /tmp/ccp7FtIo.s 			page 53


 511:src/lcd.c     ****                 }
 512:src/lcd.c     **** }
 513:src/lcd.c     **** #endif
 514:src/lcd.c     **** 
 515:src/lcd.c     **** void show_stack(void) {
 516:src/lcd.c     **** #ifdef USECURSES
 517:src/lcd.c     ****   int i;
 518:src/lcd.c     **** 
 519:src/lcd.c     ****         if (!State2.flags)
 520:src/lcd.c     ****                 return;
 521:src/lcd.c     **** 
 522:src/lcd.c     ****         // Stack display smashes the stack registers
 523:src/lcd.c     ****         for (i=4; i<STACK_SIZE; i++) {
 524:src/lcd.c     ****                 MOVE(26, 8-i);
 525:src/lcd.c     ****                 PRINTF("%c ", i<stack_size()?'*':' ');
 526:src/lcd.c     ****                 dispreg(REGNAMES[i], regX_idx + i);
 527:src/lcd.c     ****         }
 528:src/lcd.c     ****         MOVE(53, 2);    dispreg(REGNAMES[regJ_idx-regX_idx], regJ_idx);
 529:src/lcd.c     ****         MOVE(53, 1);    dispreg(REGNAMES[regK_idx-regX_idx], regK_idx);
 530:src/lcd.c     ****         for (i=0; i<4; i++) {
 531:src/lcd.c     ****                 MOVE(0, 4-i);
 532:src/lcd.c     ****                 dispreg(REGNAMES[i], regX_idx + i);
 533:src/lcd.c     ****         }
 534:src/lcd.c     ****         MOVE(53, 4);
 535:src/lcd.c     ****         dispreg(REGNAMES[regL_idx-regX_idx], regL_idx);
 536:src/lcd.c     ****         MOVE(53, 3);
 537:src/lcd.c     ****         dispreg(REGNAMES[regI_idx-regX_idx], regI_idx);
 538:src/lcd.c     ****         MOVE(53, 0);
 539:src/lcd.c     ****         PRINTF("stack depth: %d", stack_size());
 540:src/lcd.c     **** #endif
 541:src/lcd.c     **** }
 542:src/lcd.c     **** 
 543:src/lcd.c     **** void show_flags(void) {
 544:src/lcd.c     **** #if defined(CONSOLE) && !defined(DM42)
 545:src/lcd.c     **** 	extern unsigned int get_local_flags(void);
 546:src/lcd.c     **** 
 547:src/lcd.c     **** 	if (!State2.flags)
 548:src/lcd.c     **** 		return;
 549:src/lcd.c     **** 	MOVE(0, 0);
 550:src/lcd.c     **** 	PRINTF(" %c ", JustDisplayed ? '*' : ' ');
 551:src/lcd.c     **** 	MOVE(5, 0);
 552:src/lcd.c     **** 	switch (cur_shift()) {
 553:src/lcd.c     **** 	case SHIFT_F:   PRINTF("[f-shift]");    break;
 554:src/lcd.c     **** 	case SHIFT_G:   PRINTF("[g-shift]");    break;
 555:src/lcd.c     **** 	case SHIFT_H:   PRINTF("[h-shift]");    break;
 556:src/lcd.c     **** 	default:                                break;
 557:src/lcd.c     **** 	}
 558:src/lcd.c     **** 	if (State2.hyp) {
 559:src/lcd.c     **** 		MOVE(14, 0);
 560:src/lcd.c     **** 		if (State2.dot)
 561:src/lcd.c     **** 			PRINTF("[hyp]");
 562:src/lcd.c     **** 		else
 563:src/lcd.c     **** 			PRINTF("[hyp-1]");
 564:src/lcd.c     **** 	}
 565:src/lcd.c     **** 	if (!State2.runmode) {
 566:src/lcd.c     **** 		MOVE(21, 0);
 567:src/lcd.c     **** 		PRINTF("[prog]");
ARM GAS  /tmp/ccp7FtIo.s 			page 54


 568:src/lcd.c     **** 	}
 569:src/lcd.c     **** 	if (view_instruction_counter) {
 570:src/lcd.c     **** 		MOVE(28, 0);
 571:src/lcd.c     **** 		PRINTF("#%llu", instruction_count);
 572:src/lcd.c     **** 	}
 573:src/lcd.c     **** 	MOVE(0, 0);
 574:src/lcd.c     **** 
 575:src/lcd.c     **** #ifdef USECURSES
 576:src/lcd.c     **** #define FLAG_BASE       5
 577:src/lcd.c     **** 	MOVE(10, FLAG_BASE);
 578:src/lcd.c     **** 	if (State2.rarg)
 579:src/lcd.c     **** 		PRINTF("[rcmd]");
 580:src/lcd.c     **** 	else if (State2.arrow)
 581:src/lcd.c     **** 		PRINTF("[arr]");
 582:src/lcd.c     **** 	if (State2.dot) {
 583:src/lcd.c     **** 		MOVE(18, FLAG_BASE);
 584:src/lcd.c     **** 		PRINTF("[dot]");
 585:src/lcd.c     **** 	}
 586:src/lcd.c     **** 	if (State2.ind) {
 587:src/lcd.c     **** 		MOVE(24, FLAG_BASE);
 588:src/lcd.c     **** 		PRINTF("[ind]");
 589:src/lcd.c     **** 	}
 590:src/lcd.c     **** 	if (State2.trace) {
 591:src/lcd.c     **** 		MOVE(30, FLAG_BASE);
 592:src/lcd.c     **** 		PRINTF("[trace]");
 593:src/lcd.c     **** 	}
 594:src/lcd.c     **** 	if (State2.cmplx) {
 595:src/lcd.c     **** 		MOVE(40, FLAG_BASE);
 596:src/lcd.c     **** 		PRINTF("[cmplx]");
 597:src/lcd.c     **** 	}
 598:src/lcd.c     **** 	if (State2.catalogue) {
 599:src/lcd.c     **** 		MOVE(50, FLAG_BASE);
 600:src/lcd.c     **** 		PRINTF("[cat %03u]", State2.catalogue);
 601:src/lcd.c     **** 	}
 602:src/lcd.c     **** 	if (State2.hms) {
 603:src/lcd.c     **** 		MOVE(64, FLAG_BASE);
 604:src/lcd.c     **** 		PRINTF("[H.MS]");
 605:src/lcd.c     **** 	}
 606:src/lcd.c     **** 	if (UState.fract) {
 607:src/lcd.c     **** 		MOVE(71, FLAG_BASE);
 608:src/lcd.c     **** 		PRINTF("[FRACT]");
 609:src/lcd.c     **** 	}
 610:src/lcd.c     **** 	if (State2.multi) {
 611:src/lcd.c     **** 		MOVE(71, FLAG_BASE+1);
 612:src/lcd.c     **** 		PRINTF("[MULTI]");
 613:src/lcd.c     **** 	}
 614:src/lcd.c     **** 	MOVE(50, FLAG_BASE+1);
 615:src/lcd.c     **** 	PRINTF("[RRS %03u]", ProgSize);
 616:src/lcd.c     **** 	if (State2.state_lift) {
 617:src/lcd.c     **** 		MOVE(10, FLAG_BASE+1);
 618:src/lcd.c     **** 		PRINTF("[lift]");
 619:src/lcd.c     **** 	}
 620:src/lcd.c     **** 	if (Running) {
 621:src/lcd.c     **** 		MOVE(18, FLAG_BASE+1);
 622:src/lcd.c     **** 		PRINTF("[running]");
 623:src/lcd.c     **** 	}
 624:src/lcd.c     **** 	MOVE(70, 5);
ARM GAS  /tmp/ccp7FtIo.s 			page 55


 625:src/lcd.c     **** 	PRINTF("iw = %u/%u", State2.window, IntMaxWindow);
 626:src/lcd.c     **** 	MOVE(30, FLAG_BASE+1);
 627:src/lcd.c     **** 	PRINTF("shft = %u", cur_shift());
 628:src/lcd.c     **** 	MOVE(40, FLAG_BASE+1);
 629:src/lcd.c     **** 	PRINTF("trig = %u", UState.trigmode);
 630:src/lcd.c     **** 	MOVE(60, FLAG_BASE+1);
 631:src/lcd.c     **** 	PRINTF("r = %u", ShowRegister);
 632:src/lcd.c     **** //	MOVE(60, FLAG_BASE+1);
 633:src/lcd.c     **** //	PRINTF("apos = %u", State2.alpha_pos);
 634:src/lcd.c     **** 	MOVE(10, FLAG_BASE+2);
 635:src/lcd.c     **** 	PRINTF("numdig = %u   alpha '%-31s'   lflags = %03o-%03o",
 636:src/lcd.c     **** 			State2.numdigit, Alpha, get_local_flags() >> 8,
 637:src/lcd.c     **** 			get_local_flags() & 0xff);
 638:src/lcd.c     **** 	if (State.entryp) {
 639:src/lcd.c     **** 		MOVE(0, FLAG_BASE+2);
 640:src/lcd.c     **** 		PRINTF("entryp");
 641:src/lcd.c     **** 	}
 642:src/lcd.c     **** 	MOVE(10, FLAG_BASE+3);
 643:src/lcd.c     **** 	PRINTF("digval=%u", State2.digval);
 644:src/lcd.c     **** 	MOVE(23, FLAG_BASE+3);
 645:src/lcd.c     **** 	PRINTF("pc = %03u", state_pc());
 646:src/lcd.c     **** 	MOVE(34, FLAG_BASE+3);
 647:src/lcd.c     **** 	PRINTF("ap = %u", State2.alpha_pos);
 648:src/lcd.c     **** 	MOVE(45, FLAG_BASE+3);
 649:src/lcd.c     **** 	PRINTF("cmddot = %u  cmdeex = %u  eol = %u",
 650:src/lcd.c     **** 			CmdLineDot, CmdLineEex, CmdLineLength);
 651:src/lcd.c     **** 	MOVE(0, FLAG_BASE+3);
 652:src/lcd.c     **** 	PRINTF("JG=%d", UState.jg1582?1582:1752);
 653:src/lcd.c     **** #endif
 654:src/lcd.c     **** #endif
 655:src/lcd.c     **** }
 656:src/lcd.c     **** 
 657:src/lcd.c     **** void wait_for_display(void)
 658:src/lcd.c     **** {
 2344              		.loc 1 658 1 view -0
 2345              		.cfi_startproc
 2346              		@ args = 0, pretend = 0, frame = 0
 2347              		@ frame_needed = 0, uses_anonymous_args = 0
 2348              		@ link register save eliminated.
 659:src/lcd.c     **** }
 2349              		.loc 1 659 1 view .LVU459
 2350 0000 7047     		bx	lr
 2351              		.cfi_endproc
 2352              	.LFE28:
 2354 0002 00BF     		.section	.text.finish_display,"ax",%progbits
 2355              		.align	1
 2356              		.p2align 2,,3
 2357              		.global	finish_display
 2358              		.syntax unified
 2359              		.thumb
 2360              		.thumb_func
 2361              		.fpu fpv4-sp-d16
 2363              	finish_display:
 2364              	.LFB29:
 660:src/lcd.c     **** 
 661:src/lcd.c     **** #if defined(USECURSES) && !defined(DM42) 
 662:src/lcd.c     **** void finish_display(void) {
ARM GAS  /tmp/ccp7FtIo.s 			page 56


 663:src/lcd.c     ****         show_disp();
 664:src/lcd.c     ****         MOVE(0, 0);
 665:src/lcd.c     ****         refresh();
 666:src/lcd.c     **** 
 667:src/lcd.c     **** }
 668:src/lcd.c     **** #endif
 669:src/lcd.c     **** #if defined(DM42) 
 670:src/lcd.c     **** void finish_display(void) {
 2365              		.loc 1 670 27 view -0
 2366              		.cfi_startproc
 2367              		@ args = 0, pretend = 0, frame = 0
 2368              		@ frame_needed = 0, uses_anonymous_args = 0
 671:src/lcd.c     ****   //  lcd_clear_buf();
 672:src/lcd.c     ****   lcd_fill_rect (0, 0, 400, 188, 0); //leave bottom 52 rows for menu 
 2369              		.loc 1 672 3 view .LVU461
 670:src/lcd.c     ****   //  lcd_clear_buf();
 2370              		.loc 1 670 27 is_stmt 0 view .LVU462
 2371 0000 10B5     		push	{r4, lr}
 2372              		.cfi_def_cfa_offset 8
 2373              		.cfi_offset 4, -8
 2374              		.cfi_offset 14, -4
 2375 0002 82B0     		sub	sp, sp, #8
 2376              		.cfi_def_cfa_offset 16
 2377              		.loc 1 672 3 view .LVU463
 2378 0004 0021     		movs	r1, #0
 2379 0006 0091     		str	r1, [sp]
 2380 0008 0846     		mov	r0, r1
 2381 000a BC23     		movs	r3, #188
 2382 000c 4FF4C872 		mov	r2, #400
 2383 0010 044C     		ldr	r4, .L232
 2384 0012 A047     		blx	r4
 2385              	.LVL202:
 673:src/lcd.c     ****   show_disp();
 2386              		.loc 1 673 3 is_stmt 1 view .LVU464
 2387 0014 FFF7FEFF 		bl	show_disp
 2388              	.LVL203:
 674:src/lcd.c     ****   lcd_refresh();
 2389              		.loc 1 674 3 view .LVU465
 2390 0018 034B     		ldr	r3, .L232+4
 675:src/lcd.c     **** }
 2391              		.loc 1 675 1 is_stmt 0 view .LVU466
 2392 001a 02B0     		add	sp, sp, #8
 2393              		.cfi_def_cfa_offset 8
 2394              		@ sp needed
 2395 001c BDE81040 		pop	{r4, lr}
 2396              		.cfi_restore 14
 2397              		.cfi_restore 4
 2398              		.cfi_def_cfa_offset 0
 674:src/lcd.c     ****   lcd_refresh();
 2399              		.loc 1 674 3 view .LVU467
 2400 0020 1847     		bx	r3	@ indirect register sibling call
 2401              	.LVL204:
 2402              	.L233:
 2403 0022 00BF     		.align	2
 2404              	.L232:
 2405 0024 3D020008 		.word	134218301
 2406 0028 31020008 		.word	134218289
ARM GAS  /tmp/ccp7FtIo.s 			page 57


 2407              		.cfi_endproc
 2408              	.LFE29:
 2410              		.section	.text.finish_RPN,"ax",%progbits
 2411              		.align	1
 2412              		.p2align 2,,3
 2413              		.global	finish_RPN
 2414              		.syntax unified
 2415              		.thumb
 2416              		.thumb_func
 2417              		.fpu fpv4-sp-d16
 2419              	finish_RPN:
 2420              	.LFB30:
 676:src/lcd.c     **** void finish_RPN(void) {//only refreshes the RPN flag
 2421              		.loc 1 676 23 is_stmt 1 view -0
 2422              		.cfi_startproc
 2423              		@ args = 0, pretend = 0, frame = 0
 2424              		@ frame_needed = 0, uses_anonymous_args = 0
 677:src/lcd.c     ****   t20->inv = !dots[RPN];
 2425              		.loc 1 677 3 view .LVU469
 676:src/lcd.c     **** void finish_RPN(void) {//only refreshes the RPN flag
 2426              		.loc 1 676 23 is_stmt 0 view .LVU470
 2427 0000 70B5     		push	{r4, r5, r6, lr}
 2428              		.cfi_def_cfa_offset 16
 2429              		.cfi_offset 4, -16
 2430              		.cfi_offset 5, -12
 2431              		.cfi_offset 6, -8
 2432              		.cfi_offset 14, -4
 2433              		.loc 1 677 19 view .LVU471
 2434 0002 0B4B     		ldr	r3, .L236
 2435              		.loc 1 677 3 view .LVU472
 2436 0004 0B4C     		ldr	r4, .L236+4
 2437              		.loc 1 677 14 view .LVU473
 2438 0006 93F88D30 		ldrb	r3, [r3, #141]	@ zero_extendqisi2
 2439              		.loc 1 677 3 view .LVU474
 2440 000a 206B     		ldr	r0, [r4, #48]
 678:src/lcd.c     ****   lcd_setXY (t20, 350 ,130-60); //130 is ytop
 2441              		.loc 1 678 3 view .LVU475
 2442 000c 0A4D     		ldr	r5, .L236+8
 677:src/lcd.c     ****   t20->inv = !dots[RPN];
 2443              		.loc 1 677 14 view .LVU476
 2444 000e B3FA83F3 		clz	r3, r3
 2445 0012 5B09     		lsrs	r3, r3, #5
 2446 0014 4374     		strb	r3, [r0, #17]
 2447              		.loc 1 678 3 is_stmt 1 view .LVU477
 2448 0016 4622     		movs	r2, #70
 2449 0018 4FF4AF71 		mov	r1, #350
 2450 001c A847     		blx	r5
 2451              	.LVL205:
 679:src/lcd.c     ****   lcd_writeText(t20, "RCL");
 2452              		.loc 1 679 3 view .LVU478
 2453 001e 206B     		ldr	r0, [r4, #48]
 2454 0020 064B     		ldr	r3, .L236+12
 2455 0022 0749     		ldr	r1, .L236+16
 2456 0024 9847     		blx	r3
 2457              	.LVL206:
 680:src/lcd.c     ****   lcd_refresh();
 2458              		.loc 1 680 3 view .LVU479
ARM GAS  /tmp/ccp7FtIo.s 			page 58


 681:src/lcd.c     **** }
 2459              		.loc 1 681 1 is_stmt 0 view .LVU480
 2460 0026 BDE87040 		pop	{r4, r5, r6, lr}
 2461              		.cfi_restore 14
 2462              		.cfi_restore 6
 2463              		.cfi_restore 5
 2464              		.cfi_restore 4
 2465              		.cfi_def_cfa_offset 0
 680:src/lcd.c     ****   lcd_refresh();
 2466              		.loc 1 680 3 view .LVU481
 2467 002a 064B     		ldr	r3, .L236+20
 2468 002c 1847     		bx	r3	@ indirect register sibling call
 2469              	.LVL207:
 2470              	.L237:
 2471 002e 00BF     		.align	2
 2472              	.L236:
 2473 0030 00000000 		.word	.LANCHOR0
 2474 0034 00200010 		.word	268443648
 2475 0038 6D020008 		.word	134218349
 2476 003c 7D020008 		.word	134218365
 2477 0040 14000000 		.word	.LC4
 2478 0044 31020008 		.word	134218289
 2479              		.cfi_endproc
 2480              	.LFE30:
 2482              		.section	.text.show_progtrace,"ax",%progbits
 2483              		.align	1
 2484              		.p2align 2,,3
 2485              		.global	show_progtrace
 2486              		.syntax unified
 2487              		.thumb
 2488              		.thumb_func
 2489              		.fpu fpv4-sp-d16
 2491              	show_progtrace:
 2492              	.LVL208:
 2493              	.LFB31:
 682:src/lcd.c     **** 
 683:src/lcd.c     **** #endif
 684:src/lcd.c     **** 
 685:src/lcd.c     **** #ifdef CONSOLE
 686:src/lcd.c     **** #ifndef DM42
 687:src/lcd.c     **** /* Take a string and cleanse all non-printing characters from it.
 688:src/lcd.c     ****  * Replace them with the usual [xxx] sequences.
 689:src/lcd.c     ****  */
 690:src/lcd.c     **** extern const char *pretty(unsigned char);
 691:src/lcd.c     **** 
 692:src/lcd.c     **** static char *cleanse(const char *s) {
 693:src/lcd.c     ****         static char res[50];
 694:src/lcd.c     ****         char *p;
 695:src/lcd.c     **** 
 696:src/lcd.c     ****         for (p=res; *s != '\0'; s++) {
 697:src/lcd.c     ****                 unsigned char c = 0xff & *s;
 698:src/lcd.c     ****                 const char *m = pretty(c);
 699:src/lcd.c     ****                 if (m == NULL) {
 700:src/lcd.c     ****                         *p++ = c;
 701:src/lcd.c     ****                 } else {
 702:src/lcd.c     ****                         *p++ = '[';
 703:src/lcd.c     ****                         p = scopy_char(p, m, ']');
ARM GAS  /tmp/ccp7FtIo.s 			page 59


 704:src/lcd.c     ****                 }
 705:src/lcd.c     ****         }
 706:src/lcd.c     ****         *p = '\0';
 707:src/lcd.c     ****         return res;
 708:src/lcd.c     **** }
 709:src/lcd.c     **** #endif
 710:src/lcd.c     **** #endif
 711:src/lcd.c     **** 
 712:src/lcd.c     **** void show_progtrace(char *buf) {
 2494              		.loc 1 712 32 is_stmt 1 view -0
 2495              		.cfi_startproc
 2496              		@ args = 0, pretend = 0, frame = 0
 2497              		@ frame_needed = 0, uses_anonymous_args = 0
 2498              		@ link register save eliminated.
 713:src/lcd.c     **** #ifndef DM42
 714:src/lcd.c     **** #ifdef CONSOLE
 715:src/lcd.c     ****         int pc = state_pc();
 716:src/lcd.c     **** 
 717:src/lcd.c     **** #ifdef USECURSES
 718:src/lcd.c     ****         int i;
 719:src/lcd.c     **** 
 720:src/lcd.c     ****         if (!State2.flags)
 721:src/lcd.c     ****                 return;
 722:src/lcd.c     **** 
 723:src/lcd.c     ****         for (i=4; i>0 && pc >= 0; i--) {
 724:src/lcd.c     ****                 MOVE(0, i);
 725:src/lcd.c     ****                 if (pc) {
 726:src/lcd.c     ****                         opcode op = getprog(pc);
 727:src/lcd.c     ****                         PRINTF("%03d %08x: %s", pc, op, cleanse(prt(op, buf)));
 728:src/lcd.c     ****                 } else
 729:src/lcd.c     ****                         PRINTF("000:");
 730:src/lcd.c     ****                 pc = do_dec(pc, 1);
 731:src/lcd.c     ****         }
 732:src/lcd.c     **** #endif
 733:src/lcd.c     **** #endif
 734:src/lcd.c     **** #endif       
 735:src/lcd.c     **** }
 2499              		.loc 1 735 1 view .LVU483
 2500 0000 7047     		bx	lr
 2501              		.cfi_endproc
 2502              	.LFE31:
 2504 0002 00BF     		.section	.bss.dots,"aw",%nobits
 2505              		.align	2
 2506              		.set	.LANCHOR0,. + 0
 2509              	dots:
 2510 0000 00000000 		.space	400
 2510      00000000 
 2510      00000000 
 2510      00000000 
 2510      00000000 
 2511              		.text
 2512              	.Letext0:
 2513              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 2514              		.file 3 "dmcp/ff_ifc.h"
 2515              		.file 4 "dmcp/dmcp.h"
 2516              		.file 5 "src/decNumber/decContext.h"
 2517              		.file 6 "src/decNumber/decNumber.h"
ARM GAS  /tmp/ccp7FtIo.s 			page 60


 2518              		.file 7 "src/decNumber/decimal64.h"
 2519              		.file 8 "src/decNumber/decimal128.h"
 2520              		.file 9 "src/xeq.h"
 2521              		.file 10 "src/data.h"
 2522              		.file 11 "src/display.h"
 2523              		.file 12 "src/pretty.h"
ARM GAS  /tmp/ccp7FtIo.s 			page 61


DEFINED SYMBOLS
                            *ABS*:0000000000000000 lcd.c
     /tmp/ccp7FtIo.s:18     .text.set_dot:0000000000000000 $t
     /tmp/ccp7FtIo.s:27     .text.set_dot:0000000000000000 set_dot
     /tmp/ccp7FtIo.s:46     .text.set_dot:0000000000000008 $d
     /tmp/ccp7FtIo.s:51     .text.clr_dot:0000000000000000 $t
     /tmp/ccp7FtIo.s:59     .text.clr_dot:0000000000000000 clr_dot
     /tmp/ccp7FtIo.s:77     .text.clr_dot:0000000000000008 $d
     /tmp/ccp7FtIo.s:82     .text.is_dot:0000000000000000 $t
     /tmp/ccp7FtIo.s:90     .text.is_dot:0000000000000000 is_dot
     /tmp/ccp7FtIo.s:109    .text.is_dot:0000000000000008 $d
     /tmp/ccp7FtIo.s:114    .text.setuptty:0000000000000000 $t
     /tmp/ccp7FtIo.s:122    .text.setuptty:0000000000000000 setuptty
     /tmp/ccp7FtIo.s:140    .text.reset_disp:0000000000000000 $t
     /tmp/ccp7FtIo.s:148    .text.reset_disp:0000000000000000 reset_disp
     /tmp/ccp7FtIo.s:346    .text.reset_disp:0000000000000068 $d
     /tmp/ccp7FtIo.s:351    .text.left_side:0000000000000000 $t
     /tmp/ccp7FtIo.s:359    .text.left_side:0000000000000000 left_side
     /tmp/ccp7FtIo.s:442    .text.left_side:0000000000000054 $d
     /tmp/ccp7FtIo.s:447    .text.left_side_top:0000000000000000 $t
     /tmp/ccp7FtIo.s:455    .text.left_side_top:0000000000000000 left_side_top
     /tmp/ccp7FtIo.s:471    .text.left_side_bottom:0000000000000000 $t
     /tmp/ccp7FtIo.s:479    .text.left_side_bottom:0000000000000000 left_side_bottom
     /tmp/ccp7FtIo.s:501    .text.right_side:0000000000000000 $t
     /tmp/ccp7FtIo.s:509    .text.right_side:0000000000000000 right_side
     /tmp/ccp7FtIo.s:591    .text.right_side:000000000000005c $d
     /tmp/ccp7FtIo.s:596    .text.right_side_top:0000000000000000 $t
     /tmp/ccp7FtIo.s:604    .text.right_side_top:0000000000000000 right_side_top
     /tmp/ccp7FtIo.s:620    .text.right_side_bottom:0000000000000000 $t
     /tmp/ccp7FtIo.s:628    .text.right_side_bottom:0000000000000000 right_side_bottom
     /tmp/ccp7FtIo.s:650    .text.top:0000000000000000 $t
     /tmp/ccp7FtIo.s:658    .text.top:0000000000000000 top
     /tmp/ccp7FtIo.s:725    .text.top:0000000000000040 $d
     /tmp/ccp7FtIo.s:730    .text.middle:0000000000000000 $t
     /tmp/ccp7FtIo.s:738    .text.middle:0000000000000000 middle
     /tmp/ccp7FtIo.s:808    .text.middle:0000000000000040 $d
     /tmp/ccp7FtIo.s:814    .text.bottom:0000000000000000 $t
     /tmp/ccp7FtIo.s:822    .text.bottom:0000000000000000 bottom
     /tmp/ccp7FtIo.s:892    .text.bottom:0000000000000048 $d
     /tmp/ccp7FtIo.s:897    .text.decimal:0000000000000000 $t
     /tmp/ccp7FtIo.s:905    .text.decimal:0000000000000000 decimal
     /tmp/ccp7FtIo.s:942    .text.decimal:0000000000000018 $d
     /tmp/ccp7FtIo.s:947    .text.comma:0000000000000000 $t
     /tmp/ccp7FtIo.s:955    .text.comma:0000000000000000 comma
     /tmp/ccp7FtIo.s:1009   .text.comma:000000000000002c $d
     /tmp/ccp7FtIo.s:1014   .text.exp_left_side:0000000000000000 $t
     /tmp/ccp7FtIo.s:1022   .text.exp_left_side:0000000000000000 exp_left_side
     /tmp/ccp7FtIo.s:1089   .text.exp_left_side:0000000000000040 $d
     /tmp/ccp7FtIo.s:1094   .text.exp_left_side_top:0000000000000000 $t
     /tmp/ccp7FtIo.s:1102   .text.exp_left_side_top:0000000000000000 exp_left_side_top
     /tmp/ccp7FtIo.s:1121   .text.exp_left_side_bottom:0000000000000000 $t
     /tmp/ccp7FtIo.s:1129   .text.exp_left_side_bottom:0000000000000000 exp_left_side_bottom
     /tmp/ccp7FtIo.s:1148   .text.exp_right_side:0000000000000000 $t
     /tmp/ccp7FtIo.s:1156   .text.exp_right_side:0000000000000000 exp_right_side
     /tmp/ccp7FtIo.s:1223   .text.exp_right_side:0000000000000044 $d
     /tmp/ccp7FtIo.s:1228   .text.exp_right_side_top:0000000000000000 $t
     /tmp/ccp7FtIo.s:1236   .text.exp_right_side_top:0000000000000000 exp_right_side_top
ARM GAS  /tmp/ccp7FtIo.s 			page 62


     /tmp/ccp7FtIo.s:1252   .text.exp_right_side_bottom:0000000000000000 $t
     /tmp/ccp7FtIo.s:1260   .text.exp_right_side_bottom:0000000000000000 exp_right_side_bottom
     /tmp/ccp7FtIo.s:1282   .text.exp_top:0000000000000000 $t
     /tmp/ccp7FtIo.s:1290   .text.exp_top:0000000000000000 exp_top
     /tmp/ccp7FtIo.s:1349   .text.exp_top:0000000000000034 $d
     /tmp/ccp7FtIo.s:1354   .text.exp_bottom:0000000000000000 $t
     /tmp/ccp7FtIo.s:1362   .text.exp_bottom:0000000000000000 exp_bottom
     /tmp/ccp7FtIo.s:1424   .text.exp_bottom:0000000000000038 $d
     /tmp/ccp7FtIo.s:1429   .text.exp_middle:0000000000000000 $t
     /tmp/ccp7FtIo.s:1437   .text.exp_middle:0000000000000000 exp_middle
     /tmp/ccp7FtIo.s:1503   .text.exp_middle:0000000000000040 $d
     /tmp/ccp7FtIo.s:1508   .rodata.show_disp.str1.4:0000000000000000 $d
     /tmp/ccp7FtIo.s:1533   .text.show_disp:0000000000000000 $t
     /tmp/ccp7FtIo.s:1541   .text.show_disp:0000000000000000 show_disp
     /tmp/ccp7FtIo.s:1781   .text.show_disp:00000000000000c4 $d
     /tmp/ccp7FtIo.s:1785   .text.show_disp:00000000000000cc $t
     /tmp/ccp7FtIo.s:2279   .text.show_disp:0000000000000360 $d
     /tmp/ccp7FtIo.s:2296   .text.show_stack:0000000000000000 $t
     /tmp/ccp7FtIo.s:2304   .text.show_stack:0000000000000000 show_stack
     /tmp/ccp7FtIo.s:2315   .text.show_flags:0000000000000000 $t
     /tmp/ccp7FtIo.s:2323   .text.show_flags:0000000000000000 show_flags
     /tmp/ccp7FtIo.s:2334   .text.wait_for_display:0000000000000000 $t
     /tmp/ccp7FtIo.s:2342   .text.wait_for_display:0000000000000000 wait_for_display
     /tmp/ccp7FtIo.s:2355   .text.finish_display:0000000000000000 $t
     /tmp/ccp7FtIo.s:2363   .text.finish_display:0000000000000000 finish_display
     /tmp/ccp7FtIo.s:2405   .text.finish_display:0000000000000024 $d
     /tmp/ccp7FtIo.s:2411   .text.finish_RPN:0000000000000000 $t
     /tmp/ccp7FtIo.s:2419   .text.finish_RPN:0000000000000000 finish_RPN
     /tmp/ccp7FtIo.s:2473   .text.finish_RPN:0000000000000030 $d
     /tmp/ccp7FtIo.s:2483   .text.show_progtrace:0000000000000000 $t
     /tmp/ccp7FtIo.s:2491   .text.show_progtrace:0000000000000000 show_progtrace
     /tmp/ccp7FtIo.s:2505   .bss.dots:0000000000000000 $d
     /tmp/ccp7FtIo.s:2509   .bss.dots:0000000000000000 dots

UNDEFINED SYMBOLS
dot

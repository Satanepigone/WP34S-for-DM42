ARM GAS  /tmp/ccb1Ng7p.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"lcd.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata.draw_BEG.part.0.str1.4,"aMS",%progbits,1
  18              		.align	2
  19              	.LC0:
  20 0000 533A3400 		.ascii	"S:4\000"
  21              		.section	.text.draw_BEG.part.0,"ax",%progbits
  22              		.align	1
  23              		.p2align 2,,3
  24              		.arch armv7e-m
  25              		.syntax unified
  26              		.thumb
  27              		.thumb_func
  28              		.fpu fpv4-sp-d16
  30              	draw_BEG.part.0:
  31              	.LFB42:
  32              		.file 1 "src/lcd.c"
   1:src/lcd.c     **** /* This file is part of 34S.
   2:src/lcd.c     ****  * 
   3:src/lcd.c     ****  * 34S is free software: you can redistribute it and/or modify
   4:src/lcd.c     ****  * it under the terms of the GNU General Public License as published by
   5:src/lcd.c     ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/lcd.c     ****  * (at your option) any later version.
   7:src/lcd.c     ****  * 
   8:src/lcd.c     ****  * 34S is distributed in the hope that it will be useful,
   9:src/lcd.c     ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/lcd.c     ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/lcd.c     ****  * GNU General Public License for more details.
  12:src/lcd.c     ****  * 
  13:src/lcd.c     ****  * You should have received a copy of the GNU General Public License
  14:src/lcd.c     ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/lcd.c     ****  */
  16:src/lcd.c     **** 
  17:src/lcd.c     **** #ifdef DM42
  18:src/lcd.c     **** #include "dmcp.h"
  19:src/lcd.c     **** #endif
  20:src/lcd.c     **** 
  21:src/lcd.c     **** #define DM42SAFE
  22:src/lcd.c     **** #include "lcd.h"
  23:src/lcd.c     **** #include "display.h"
  24:src/lcd.c     **** #include "xeq.h"
  25:src/lcd.c     **** 
  26:src/lcd.c     **** #if defined(INCLUDE_C_LOCK) || defined(INFRARED)
ARM GAS  /tmp/ccb1Ng7p.s 			page 2


  27:src/lcd.c     **** #include "data.h"
  28:src/lcd.c     **** #include "storage.h"
  29:src/lcd.c     **** #endif
  30:src/lcd.c     **** 
  31:src/lcd.c     **** #undef DM42SAFE
  32:src/lcd.c     **** 
  33:src/lcd.c     **** #include "pretty.h"
  34:src/lcd.c     **** 
  35:src/lcd.c     **** 
  36:src/lcd.c     **** static unsigned char dots[TOP_DOTS];
  37:src/lcd.c     **** 
  38:src/lcd.c     **** /* Some wrapper routines to set segments of the display */
  39:src/lcd.c     **** void set_dot(int n) {
  40:src/lcd.c     ****   dots[n] |= 1;
  41:src/lcd.c     ****   if (dots[n]&2) return;
  42:src/lcd.c     ****   draw_dot(n);
  43:src/lcd.c     ****   dots[n] = 3; // 11;
  44:src/lcd.c     **** }
  45:src/lcd.c     **** void clr_dot(int n) {
  46:src/lcd.c     ****   dots[n] &= ~1;
  47:src/lcd.c     ****   if ( !(dots[n]&2)) return;
  48:src/lcd.c     ****   draw_dot(n);
  49:src/lcd.c     ****   dots[n] = 0; // =0 would work too.
  50:src/lcd.c     **** }
  51:src/lcd.c     **** 
  52:src/lcd.c     **** int is_dot(int n) {
  53:src/lcd.c     **** 	return dots[n]&1;
  54:src/lcd.c     **** }
  55:src/lcd.c     **** 
  56:src/lcd.c     **** void clear_disp(void) {
  57:src/lcd.c     ****       for (int i=0; i<TOP_DOTS; i++)
  58:src/lcd.c     **** 	dots[i] = 0;
  59:src/lcd.c     ****       lcd_clear_buf();
  60:src/lcd.c     **** }
  61:src/lcd.c     ****   
  62:src/lcd.c     **** void reset_disp(void) {
  63:src/lcd.c     **** 	int rcl = is_dot(RCL_annun);
  64:src/lcd.c     **** 	int bat = is_dot(BATTERY);
  65:src/lcd.c     **** 	int leq = is_dot(LIT_EQ);
  66:src/lcd.c     **** 	int rpn = is_dot(RPN);
  67:src/lcd.c     **** 	int i;
  68:src/lcd.c     ****         for (i=0; i<TOP_DOTS; i++)
  69:src/lcd.c     **** 	  //		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
  70:src/lcd.c     **** 	  //			clr_dot(i);
  71:src/lcd.c     **** 	  dots[i] <<= 1;
  72:src/lcd.c     **** 	dot(RCL_annun, rcl);
  73:src/lcd.c     **** 	dot(BATTERY, bat);
  74:src/lcd.c     **** 	dot(LIT_EQ, leq);
  75:src/lcd.c     **** 	dot(RPN, rpn);
  76:src/lcd.c     **** }
  77:src/lcd.c     **** 
  78:src/lcd.c     **** void reset_7_segment(void) {
  79:src/lcd.c     ****   for (int i = 0; i <= EXP_SIGN; ++i) {
  80:src/lcd.c     ****     dots[i] <<= 1;
  81:src/lcd.c     ****   }
  82:src/lcd.c     **** }
  83:src/lcd.c     **** 
ARM GAS  /tmp/ccb1Ng7p.s 			page 3


  84:src/lcd.c     **** #define setBlackPixel(x, y)                bitblt24(x, 1, y, 1, BLT_OR,   BLT_NONE)
  85:src/lcd.c     **** #define setWhitePixel(x, y)                bitblt24(x, 1, y, 1, BLT_ANDN, BLT_NONE)
  86:src/lcd.c     **** 
  87:src/lcd.c     **** void left_side (int i, int j, int col) { //i - xleft reference; j - ytop reference
  88:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, col);
  89:src/lcd.c     ****   lcd_fill_rect (i+3, j+2, 1, 18, col);
  90:src/lcd.c     ****   lcd_fill_rect (i+4, j+2, 1, 17, col);
  91:src/lcd.c     ****   lcd_fill_rect (i+5, j+3, 1, 15, col);
  92:src/lcd.c     ****   lcd_fill_rect (i+6, j+4, 1, 7, col);
  93:src/lcd.c     **** }
  94:src/lcd.c     **** void left_side_top (int i, int j, int col) {
  95:src/lcd.c     ****   left_side(i, j, col);
  96:src/lcd.c     **** }
  97:src/lcd.c     **** void left_side_bottom (int i, int j, int col) {
  98:src/lcd.c     ****   left_side(i-2, j+19, col);
  99:src/lcd.c     **** }
 100:src/lcd.c     **** void right_side (int i, int j, int col) {
 101:src/lcd.c     ****   lcd_fill_rect (i+16, j+11, 1, 7, col);
 102:src/lcd.c     ****   lcd_fill_rect (i+17, j+4, 1, 15, col);
 103:src/lcd.c     ****   lcd_fill_rect (i+18, j+3, 1, 17, col);
 104:src/lcd.c     ****   lcd_fill_rect (i+19, j+2, 1, 18, col);
 105:src/lcd.c     ****   lcd_fill_rect (i+20, j+2, 1, 9, col);
 106:src/lcd.c     **** }
 107:src/lcd.c     **** void right_side_top (int i, int j, int col) {
 108:src/lcd.c     ****   right_side(i, j, col);
 109:src/lcd.c     **** }
 110:src/lcd.c     **** void right_side_bottom (int i, int j, int col) {
 111:src/lcd.c     ****   right_side(i-2, j+19, col);
 112:src/lcd.c     **** }
 113:src/lcd.c     **** void top (int i, int j, int col) {
 114:src/lcd.c     ****   lcd_fill_rect ( i+5, j, 14, 1, col );
 115:src/lcd.c     ****   lcd_fill_rect ( i+4, j+1, 16, 1, col );
 116:src/lcd.c     ****   lcd_fill_rect ( i+6, j+2, 12, 1, col );
 117:src/lcd.c     ****   lcd_fill_rect ( i+7, j+3, 10, 1, col );
 118:src/lcd.c     **** }
 119:src/lcd.c     **** void middle (int i, int j, int col) {
 120:src/lcd.c     ****   //  lcd_fill_rect ( i+5, j+19, 11, 3, col );
 121:src/lcd.c     ****   //  setBlackPixel ( i+4, j+20 );
 122:src/lcd.c     ****   //  setBlackPixel ( i+16, j+20 );
 123:src/lcd.c     ****   lcd_fill_rect ( i+5, j+21, 11, 1, col );
 124:src/lcd.c     ****   lcd_fill_rect ( i+4, j+20, 13, 1, col );
 125:src/lcd.c     ****   lcd_fill_rect ( i+5, j+19, 11, 1, col );
 126:src/lcd.c     **** }
 127:src/lcd.c     **** void bottom (int i, int j, int col) {
 128:src/lcd.c     ****   lcd_fill_rect ( i+2, j+40, 14, 1, col );
 129:src/lcd.c     ****   lcd_fill_rect ( i+1, j+39, 16, 1, col );
 130:src/lcd.c     ****   lcd_fill_rect ( i+3, j+38, 12, 1, col );
 131:src/lcd.c     ****   lcd_fill_rect ( i+4, j+37, 10, 1, col );
 132:src/lcd.c     **** }
 133:src/lcd.c     **** void decimal (int i, int j, int col) {
 134:src/lcd.c     ****   lcd_fill_rect (i+19, j+40, 5, 5, col);
 135:src/lcd.c     **** }
 136:src/lcd.c     **** void comma (int i, int j, int col) {
 137:src/lcd.c     ****   lcd_fill_rect (i+21, j+45, 3, 3, col);
 138:src/lcd.c     ****   lcd_fill_rect (i+19, j+48, 3, 3, col);
 139:src/lcd.c     **** }
 140:src/lcd.c     **** 
ARM GAS  /tmp/ccb1Ng7p.s 			page 4


 141:src/lcd.c     **** void exp_left_side (int i, int j, int col) {
 142:src/lcd.c     ****   lcd_fill_rect (i, j+6, 1, 6, col );
 143:src/lcd.c     ****   lcd_fill_rect (i+1, j, 1, 11, col );
 144:src/lcd.c     ****   lcd_fill_rect (i+2, j+1, 1, 9, col );
 145:src/lcd.c     ****   lcd_fill_rect (i+3, j+2, 1, 4, col );
 146:src/lcd.c     **** }
 147:src/lcd.c     **** void exp_left_side_top (int i, int j, int col) {
 148:src/lcd.c     ****   exp_left_side(i+1, j, col);
 149:src/lcd.c     **** }
 150:src/lcd.c     **** void exp_left_side_bottom (int i, int j, int col) {
 151:src/lcd.c     ****   exp_left_side(i, j+11, col);
 152:src/lcd.c     **** }
 153:src/lcd.c     **** void exp_right_side (int i, int j, int col) {
 154:src/lcd.c     ****   lcd_fill_rect (i+12, j, 1, 6, col );
 155:src/lcd.c     ****   lcd_fill_rect (i+11, j+1, 1, 11, col );
 156:src/lcd.c     ****   lcd_fill_rect (i+10, j+2, 1, 9, col );
 157:src/lcd.c     ****   lcd_fill_rect (i+9, j+6, 1, 4, col );
 158:src/lcd.c     **** }
 159:src/lcd.c     **** void exp_right_side_top (int i, int j, int col) {
 160:src/lcd.c     ****   exp_right_side(i, j, col);
 161:src/lcd.c     **** }
 162:src/lcd.c     **** void exp_right_side_bottom (int i, int j, int col) {
 163:src/lcd.c     ****   exp_right_side(i-1, j+11, col);
 164:src/lcd.c     **** }
 165:src/lcd.c     **** void exp_top (int i, int j, int col) {
 166:src/lcd.c     ****   lcd_fill_rect (i+4, j, 7, 1, col );
 167:src/lcd.c     ****   lcd_fill_rect (i+5, j+1, 5, 1, col );
 168:src/lcd.c     ****   lcd_fill_rect (i+6, j+2, 3, 1, col );
 169:src/lcd.c     **** }
 170:src/lcd.c     **** void exp_bottom (int i, int j, int col) {
 171:src/lcd.c     ****   lcd_fill_rect (i+2, j+22, 7, 1, col );
 172:src/lcd.c     ****   lcd_fill_rect (i+3, j+21, 5, 1, col );
 173:src/lcd.c     ****   lcd_fill_rect (i+4, j+20, 3, 1, col );
 174:src/lcd.c     **** }
 175:src/lcd.c     **** void exp_middle (int i, int j, int col) {
 176:src/lcd.c     ****   lcd_fill_rect (i+4, j+10, 5, 1, col );
 177:src/lcd.c     ****   lcd_fill_rect (i+3, j+11, 7, 1, col );
 178:src/lcd.c     ****   lcd_fill_rect (i+4, j+12, 5, 1, col );
 179:src/lcd.c     **** }
 180:src/lcd.c     **** 
 181:src/lcd.c     **** #if 0
 182:src/lcd.c     **** void show_disp(void) { // This function re-draws everything.
 183:src/lcd.c     ****   // It may be fast enough. It does mean that clearing everything first is needed,
 184:src/lcd.c     ****   // or we keep track of changes.
 185:src/lcd.c     ****   // Try clearing everything first first.
 186:src/lcd.c     ****         int i, j, p;
 187:src/lcd.c     **** 	uint32_t x;
 188:src/lcd.c     **** 	const uint32_t xleft = 26;
 189:src/lcd.c     **** 	const uint32_t ytop = 130; // was 170
 190:src/lcd.c     **** 	const uint32_t dwidth = 25;
 191:src/lcd.c     **** 	const uint32_t xleft_exp = 344;
 192:src/lcd.c     **** 	const uint32_t ytop_exp = 130; // was 170
 193:src/lcd.c     **** 	const uint32_t dwidth_exp = 18;
 194:src/lcd.c     **** 	const uint32_t y_ann = Y_ANNUNC;
 195:src/lcd.c     ****         /* Segments 0 - 107 are the main digits */
 196:src/lcd.c     ****         for (i=0; i<DISPLAY_DIGITS; i++) { // 0 -> 11 inclusive
 197:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
ARM GAS  /tmp/ccb1Ng7p.s 			page 5


 198:src/lcd.c     ****                 x = xleft + dwidth*i;
 199:src/lcd.c     ****                 if (dots[p]) { // top
 200:src/lcd.c     **** 		  top (x, ytop);
 201:src/lcd.c     ****                 }
 202:src/lcd.c     ****                 if (dots[p+1]) { // top left
 203:src/lcd.c     **** 		  left_side_top (x, ytop);
 204:src/lcd.c     ****                 }
 205:src/lcd.c     ****                 if (dots[p+3]) { // top right
 206:src/lcd.c     **** 		  right_side_top (x, ytop);
 207:src/lcd.c     ****                 }
 208:src/lcd.c     ****                 if (dots[p+2]) { // centre line
 209:src/lcd.c     **** 		  middle (x, ytop);
 210:src/lcd.c     ****                 }
 211:src/lcd.c     ****                 if (dots[p+4]) { // lower left
 212:src/lcd.c     **** 		  left_side_bottom (x, ytop);
 213:src/lcd.c     ****                 }
 214:src/lcd.c     ****                 if (dots[p+6]) { // lower right
 215:src/lcd.c     **** 		  right_side_bottom (x, ytop);
 216:src/lcd.c     ****                 }
 217:src/lcd.c     ****                 if (dots[p+5]) { // bottom
 218:src/lcd.c     **** 		  bottom (x, ytop);
 219:src/lcd.c     ****                 }
 220:src/lcd.c     ****                 if (dots[p+7]) { // point
 221:src/lcd.c     **** 		  decimal (x, ytop);
 222:src/lcd.c     ****                 }
 223:src/lcd.c     ****                 if (dots[p+8]) { // comma
 224:src/lcd.c     **** 		  comma (x, ytop);
 225:src/lcd.c     ****                 }
 226:src/lcd.c     ****         }
 227:src/lcd.c     ****         /* Segments 108 - 128 are the exponent digits */
 228:src/lcd.c     ****         for (i=0; i<3; i++) {
 229:src/lcd.c     ****                 p = i*7+108;
 230:src/lcd.c     ****                 x = xleft_exp + dwidth_exp*i;
 231:src/lcd.c     ****                 if (dots[p]) { // top
 232:src/lcd.c     **** 		  exp_top (x, ytop_exp);
 233:src/lcd.c     ****                 }
 234:src/lcd.c     ****                 if (dots[p+1]) { // top left
 235:src/lcd.c     **** 		  exp_left_side_top (x, ytop_exp);
 236:src/lcd.c     ****                 }
 237:src/lcd.c     ****                 if (dots[p+3]) { // top right
 238:src/lcd.c     **** 		  exp_right_side_top (x, ytop_exp);
 239:src/lcd.c     ****                 }
 240:src/lcd.c     ****                 if (dots[p+2]) { // centre line
 241:src/lcd.c     **** 		  exp_middle (x, ytop_exp);
 242:src/lcd.c     ****                 }
 243:src/lcd.c     ****                 if (dots[p+4]) { // lower left
 244:src/lcd.c     **** 		  exp_left_side_bottom (x, ytop_exp);
 245:src/lcd.c     ****                 }
 246:src/lcd.c     ****                 if (dots[p+6]) { // lower right
 247:src/lcd.c     **** 		  exp_right_side_bottom (x, ytop_exp);
 248:src/lcd.c     ****                 }
 249:src/lcd.c     ****                 if (dots[p+5]) { // bottom
 250:src/lcd.c     **** 		  exp_bottom (x, ytop_exp);
 251:src/lcd.c     ****                 }
 252:src/lcd.c     ****         }
 253:src/lcd.c     ****         /* Segments 129 & 130 are the signs */
 254:src/lcd.c     ****         if (dots[MANT_SIGN]) {
ARM GAS  /tmp/ccb1Ng7p.s 			page 6


 255:src/lcd.c     **** 	  middle (xleft - dwidth, ytop);
 256:src/lcd.c     ****         }
 257:src/lcd.c     ****         if (dots[EXP_SIGN]) {
 258:src/lcd.c     **** 	  exp_middle (xleft_exp-dwidth_exp, ytop);
 259:src/lcd.c     ****         }
 260:src/lcd.c     **** 
 261:src/lcd.c     **** 	if (dots[BIG_EQ]) {
 262:src/lcd.c     **** 	  lcd_fill_rect (250, y_ann-34, 15, 4, 0xff);
 263:src/lcd.c     **** 	  lcd_fill_rect (250, y_ann-24, 15, 4, 0xff);
 264:src/lcd.c     ****         }
 265:src/lcd.c     **** 	t20->inv = 0;
 266:src/lcd.c     **** 	
 267:src/lcd.c     **** 	draw_PRT();
 268:src/lcd.c     **** 	
 269:src/lcd.c     **** 	/* if (UState.print_on) { */
 270:src/lcd.c     **** 	/*   lcd_setXY(t20, 250, y_ann-70); */
 271:src/lcd.c     **** 	/*   lcd_writeText(t20,"PRT"); */
 272:src/lcd.c     ****         /* } */
 273:src/lcd.c     **** 
 274:src/lcd.c     ****         if (dots[DOWN_ARR]) {
 275:src/lcd.c     **** 	  lcd_fill_rect(287,y_ann-67,5,12,0xff);
 276:src/lcd.c     **** 	  lcd_fill_rect(285,y_ann-55,9,1,0xff);
 277:src/lcd.c     **** 	  lcd_fill_rect(286,y_ann-54,7,1,0xff);
 278:src/lcd.c     **** 	  lcd_fill_rect(287,y_ann-53,5,1,0xff);
 279:src/lcd.c     **** 	  lcd_fill_rect(288,y_ann-52,3,1,0xff);
 280:src/lcd.c     **** 	  lcd_fill_rect(289,y_ann-51,1,1,0xff);
 281:src/lcd.c     ****         }
 282:src/lcd.c     **** 
 283:src/lcd.c     **** 	if (dots[INPUT]) {
 284:src/lcd.c     **** 	  lcd_setXY(t20, 305, y_ann-70);
 285:src/lcd.c     **** 	  lcd_writeText(t20,"ALPHA");
 286:src/lcd.c     ****         }
 287:src/lcd.c     **** 
 288:src/lcd.c     **** 	/* if (dots[LIT_EQ]) { */
 289:src/lcd.c     **** 	/*   lcd_setXY (t20, 360, y_ann-70); */
 290:src/lcd.c     **** 	/*   if (C_LOCKED) { */
 291:src/lcd.c     **** 	/*     lcd_writeText(t20, "C_LK"); */
 292:src/lcd.c     **** 	/*   } */
 293:src/lcd.c     **** 	/*   else { */
 294:src/lcd.c     **** 	/*     lcd_writeText(t20, "="); */
 295:src/lcd.c     **** 	/*   } */
 296:src/lcd.c     ****         /* } */
 297:src/lcd.c     **** 
 298:src/lcd.c     **** 	draw_LEQ();
 299:src/lcd.c     **** 	
 300:src/lcd.c     **** 	if (dots[BATTERY]) {
 301:src/lcd.c     **** 	  //    MOVE(70, 10);   PRINTF("####-");
 302:src/lcd.c     ****         }
 303:src/lcd.c     **** #ifdef MODIFY_BEG_SSIZE8
 304:src/lcd.c     **** 	if (dots[BEG]) {
 305:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-50);
 306:src/lcd.c     **** 	  lcd_writeText(t20, "S:8");
 307:src/lcd.c     ****         }
 308:src/lcd.c     **** 	else {
 309:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-50);
 310:src/lcd.c     **** 	  lcd_writeText(t20, "S:4");
 311:src/lcd.c     **** 	}	  
ARM GAS  /tmp/ccb1Ng7p.s 			page 7


 312:src/lcd.c     **** #else
 313:src/lcd.c     **** 	if (dots[BEG]) {
 314:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-50);
 315:src/lcd.c     **** 	  lcd_writeText(t20, "BEG");
 316:src/lcd.c     ****         }
 317:src/lcd.c     **** #endif
 318:src/lcd.c     **** 	if (dots[STO_annun]) {
 319:src/lcd.c     **** 	  lcd_setXY (t20, 325, y_ann-50);
 320:src/lcd.c     **** 	  lcd_writeText(t20, "PGM");
 321:src/lcd.c     ****         }
 322:src/lcd.c     **** 
 323:src/lcd.c     **** 	/* if (dots[RCL_annun]) { */
 324:src/lcd.c     **** 	/*   lcd_setXY (t20, 365, y_ann-50); */
 325:src/lcd.c     **** 	/*   lcd_writeText(t20, "RUN"); */
 326:src/lcd.c     ****         /* } */
 327:src/lcd.c     **** 
 328:src/lcd.c     **** 	if (dots[RAD]) {
 329:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-30);
 330:src/lcd.c     **** 	  lcd_writeText(t20, "RAD");
 331:src/lcd.c     **** 	}
 332:src/lcd.c     **** 
 333:src/lcd.c     **** 	if (dots[DEG]) {
 334:src/lcd.c     **** 	  lcd_setXY (t20, 325, y_ann-30);
 335:src/lcd.c     **** 	  lcd_writeText(t20, "DEG");
 336:src/lcd.c     ****         }
 337:src/lcd.c     **** 	draw_RPN_RCL();
 338:src/lcd.c     **** 	
 339:src/lcd.c     **** 	/* The graphical bit last */
 340:src/lcd.c     ****         for (i=0; i<BITMAP_WIDTH; i++) {
 341:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 342:src/lcd.c     **** 	    if (dots[i*6+j+MATRIX_BASE]) {
 343:src/lcd.c     **** 	      lcd_fill_rect( xleft-dwidth+5*i+15, ytop-(10+6*6)+j*6, 4, 5, 0xff);
 344:src/lcd.c     **** 	    }
 345:src/lcd.c     **** 	  }
 346:src/lcd.c     **** 	}
 347:src/lcd.c     **** #ifdef TOP_ROW
 348:src/lcd.c     ****         for (i=0; i<BW_TOP; i++) {
 349:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 350:src/lcd.c     **** 	    if (dots[i*6+j+MB_TOP]) {
 351:src/lcd.c     **** 	      lcd_fill_rect( xleft-dwidth+5*i+15, 70-(10+6*5)+j*5, 4, 4, 0xff);
 352:src/lcd.c     **** 	    }
 353:src/lcd.c     **** 	  }
 354:src/lcd.c     **** 	}
 355:src/lcd.c     **** #endif
 356:src/lcd.c     **** }
 357:src/lcd.c     **** #endif
 358:src/lcd.c     **** 
 359:src/lcd.c     **** void draw_dot (int n) {
 360:src/lcd.c     ****   int x, col = 0, inverse = 1;
 361:src/lcd.c     ****   if (dots[n] & 1) {
 362:src/lcd.c     ****     col = 0xff;
 363:src/lcd.c     ****     inverse = 0;
 364:src/lcd.c     ****   }
 365:src/lcd.c     ****   
 366:src/lcd.c     ****   if (n <= 107) {
 367:src/lcd.c     ****     x = XLEFT + DWIDTH*(n/9);
 368:src/lcd.c     ****     switch (n % 9) {  
ARM GAS  /tmp/ccb1Ng7p.s 			page 8


 369:src/lcd.c     ****     case 0:
 370:src/lcd.c     ****       top (x, YTOP, col);
 371:src/lcd.c     ****       return;
 372:src/lcd.c     ****     case 1:
 373:src/lcd.c     ****       left_side_top (x, YTOP, col);
 374:src/lcd.c     ****       return;
 375:src/lcd.c     ****     case 2:
 376:src/lcd.c     ****       middle (x, YTOP, col);
 377:src/lcd.c     ****       return;
 378:src/lcd.c     ****     case 3:
 379:src/lcd.c     ****       right_side_top (x, YTOP, col);
 380:src/lcd.c     ****       return;
 381:src/lcd.c     ****     case 4:
 382:src/lcd.c     ****       left_side_bottom (x, YTOP, col);
 383:src/lcd.c     ****       return;
 384:src/lcd.c     ****     case 5:
 385:src/lcd.c     ****       bottom (x, YTOP, col);
 386:src/lcd.c     ****       return;
 387:src/lcd.c     ****     case 6:
 388:src/lcd.c     ****       right_side_bottom (x, YTOP, col);
 389:src/lcd.c     ****       return;
 390:src/lcd.c     ****     case 7:
 391:src/lcd.c     ****       decimal (x, YTOP, col);
 392:src/lcd.c     ****       return;
 393:src/lcd.c     ****     case 8:
 394:src/lcd.c     ****       comma (x, YTOP, col);
 395:src/lcd.c     ****       return;
 396:src/lcd.c     ****     default:;
 397:src/lcd.c     ****     }
 398:src/lcd.c     ****   }
 399:src/lcd.c     ****   else if (n <= 128) { // exponent digits
 400:src/lcd.c     ****     x = XLEFT_EXP + DWIDTH_EXP*((n-108)/7);
 401:src/lcd.c     ****     switch ((n-108) % 7) {
 402:src/lcd.c     ****     case 0:
 403:src/lcd.c     ****       exp_top (x, YTOP_EXP, col);
 404:src/lcd.c     ****       return;
 405:src/lcd.c     ****     case 1:
 406:src/lcd.c     ****       exp_left_side_top (x, YTOP_EXP, col);
 407:src/lcd.c     ****       return;
 408:src/lcd.c     ****     case 2:
 409:src/lcd.c     ****       exp_middle (x, YTOP_EXP, col);
 410:src/lcd.c     ****       return;
 411:src/lcd.c     ****     case 3:
 412:src/lcd.c     ****       exp_right_side_top (x, YTOP_EXP, col);
 413:src/lcd.c     ****       return;
 414:src/lcd.c     ****     case 4:
 415:src/lcd.c     ****       exp_left_side_bottom (x, YTOP_EXP, col);
 416:src/lcd.c     ****       return;
 417:src/lcd.c     ****     case 5:
 418:src/lcd.c     ****       exp_bottom (x, YTOP_EXP, col);
 419:src/lcd.c     ****       return;
 420:src/lcd.c     ****     case 6:
 421:src/lcd.c     ****       exp_right_side_bottom (x, YTOP_EXP, col);
 422:src/lcd.c     ****       return;
 423:src/lcd.c     ****     default:;
 424:src/lcd.c     ****     }
 425:src/lcd.c     ****   }
ARM GAS  /tmp/ccb1Ng7p.s 			page 9


 426:src/lcd.c     ****   else if (n <= 141) {
 427:src/lcd.c     ****     switch (n) {
 428:src/lcd.c     ****     case MANT_SIGN:
 429:src/lcd.c     ****       middle (XLEFT - DWIDTH, YTOP, col);
 430:src/lcd.c     ****       return;
 431:src/lcd.c     ****     case EXP_SIGN:
 432:src/lcd.c     ****       exp_middle (XLEFT_EXP-DWIDTH_EXP, YTOP, col);
 433:src/lcd.c     ****       return;
 434:src/lcd.c     ****     case BIG_EQ:
 435:src/lcd.c     ****       lcd_fill_rect (250, Y_ANNUNC-34, 15, 4, col);
 436:src/lcd.c     ****       lcd_fill_rect (250, Y_ANNUNC-24, 15, 4, col);
 437:src/lcd.c     ****       return;
 438:src/lcd.c     ****     case LIT_EQ:
 439:src/lcd.c     ****       draw_LEQ();
 440:src/lcd.c     ****       return;
 441:src/lcd.c     ****     case DOWN_ARR:
 442:src/lcd.c     ****       lcd_fill_rect(287,Y_ANNUNC-67,5,12,col);
 443:src/lcd.c     ****       lcd_fill_rect(285,Y_ANNUNC-55,9,1,col);
 444:src/lcd.c     ****       lcd_fill_rect(286,Y_ANNUNC-54,7,1,col);
 445:src/lcd.c     ****       lcd_fill_rect(287,Y_ANNUNC-53,5,1,col);
 446:src/lcd.c     ****       lcd_fill_rect(288,Y_ANNUNC-52,3,1,col);
 447:src/lcd.c     ****       lcd_fill_rect(289,Y_ANNUNC-51,1,1,col);
 448:src/lcd.c     ****       return;
 449:src/lcd.c     ****     case INPUT:
 450:src/lcd.c     ****       t20->inv = inverse;
 451:src/lcd.c     ****       lcd_setXY(t20, 305, Y_ANNUNC-70);
 452:src/lcd.c     ****       lcd_writeText(t20,"ALPHA");
 453:src/lcd.c     ****       return;
 454:src/lcd.c     ****     case BATTERY:
 455:src/lcd.c     ****       return;
 456:src/lcd.c     ****     case BEG:
 457:src/lcd.c     **** #ifdef MODIFY_BEG_SSIZE8
 458:src/lcd.c     ****       /* t20->inv = 0; */
 459:src/lcd.c     ****       /* if (dots[BEG] & 1) { */
 460:src/lcd.c     ****       /* 	lcd_setXY (t20, 285, Y_ANNUNC-50); */
 461:src/lcd.c     ****       /* 	lcd_writeText(t20, "S:8"); */
 462:src/lcd.c     ****       /* } */
 463:src/lcd.c     ****       /* else { */
 464:src/lcd.c     ****       /* 	lcd_setXY (t20, 285, Y_ANNUNC-50); */
 465:src/lcd.c     ****       /* 	lcd_writeText(t20, "S:4"); */
 466:src/lcd.c     ****       /* }	   */
 467:src/lcd.c     ****       {
 468:src/lcd.c     **** 	int d = UState.stack_depth;
 469:src/lcd.c     **** 	//	print_debug(100, dots[BEG]);
 470:src/lcd.c     **** 	if (!(dots[BEG] & 8)) { // test bit 3;
 471:src/lcd.c     **** 	  if (d) {
 472:src/lcd.c     **** 	    draw_BEG(8, 0);
 473:src/lcd.c     **** 	    dots[BEG] = 7; // 0111
 474:src/lcd.c     **** 	  }
 475:src/lcd.c     **** 	  else {
 476:src/lcd.c     **** 	    draw_BEG(4, 0);
 477:src/lcd.c     **** 	    dots[BEG] = 4; // 0100
 478:src/lcd.c     **** 	  }
 479:src/lcd.c     **** 	}
 480:src/lcd.c     **** 	else if (d == (dots[BEG] & 2)) { // no drawing needed
 481:src/lcd.c     **** 	  if (d) {
 482:src/lcd.c     **** 	    dots[BEG] = 7;
ARM GAS  /tmp/ccb1Ng7p.s 			page 10


 483:src/lcd.c     **** 	  }
 484:src/lcd.c     **** 	  else {
 485:src/lcd.c     **** 	    dots[BEG] = 4;
 486:src/lcd.c     **** 	  }
 487:src/lcd.c     **** 	}
 488:src/lcd.c     **** 	else {
 489:src/lcd.c     **** 	  if (d) { // changing S:4 to S:8
 490:src/lcd.c     **** 	    draw_BEG(4, 1);
 491:src/lcd.c     **** 	    draw_BEG(8, 0);
 492:src/lcd.c     **** 	    dots[BEG] = 7;
 493:src/lcd.c     **** 	  }
 494:src/lcd.c     **** 	  else {
 495:src/lcd.c     **** 	    draw_BEG(8, 1);
 496:src/lcd.c     **** 	    draw_BEG(4, 0);
 497:src/lcd.c     **** 	    dots[BEG] = 4;
 498:src/lcd.c     **** 	  }
 499:src/lcd.c     **** 	}
 500:src/lcd.c     ****       }
 501:src/lcd.c     **** #else
 502:src/lcd.c     ****       t20->inv = inverse;
 503:src/lcd.c     ****       lcd_setXY (t20, 285, y_ann-50);
 504:src/lcd.c     ****       lcd_writeText(t20, "BEG");
 505:src/lcd.c     **** #endif
 506:src/lcd.c     ****       return;
 507:src/lcd.c     ****     case STO_annun:
 508:src/lcd.c     ****       t20->inv = inverse;
 509:src/lcd.c     ****       lcd_setXY (t20, 325, Y_ANNUNC-50);
 510:src/lcd.c     ****       lcd_writeText(t20, "PGM");
 511:src/lcd.c     ****       return;
 512:src/lcd.c     ****     case RCL_annun:
 513:src/lcd.c     ****       draw_RCL(inverse);
 514:src/lcd.c     ****     case RAD:
 515:src/lcd.c     ****       t20->inv = inverse;
 516:src/lcd.c     ****       lcd_setXY (t20, 285, Y_ANNUNC-30);
 517:src/lcd.c     ****       lcd_writeText(t20, "RAD");
 518:src/lcd.c     ****       return;
 519:src/lcd.c     ****     case DEG:
 520:src/lcd.c     ****       t20->inv = inverse;
 521:src/lcd.c     ****       lcd_setXY (t20, 325, Y_ANNUNC-30);
 522:src/lcd.c     ****       lcd_writeText(t20, "DEG");
 523:src/lcd.c     ****       return;
 524:src/lcd.c     ****     case RPN:
 525:src/lcd.c     ****       draw_RPN(inverse);
 526:src/lcd.c     ****       return;
 527:src/lcd.c     ****     default:;
 528:src/lcd.c     ****     }
 529:src/lcd.c     ****   }
 530:src/lcd.c     ****   else if (n < MAX_DOTS) { // column = (n-142)/6; row = (n-142) % 6
 531:src/lcd.c     ****     lcd_fill_rect ( XLEFT-DWIDTH+5*((n-142)/6)+15, YTOP-(10+6*6)+((n-142)%6)*6, 4, 5, col);
 532:src/lcd.c     ****     return;
 533:src/lcd.c     ****   }
 534:src/lcd.c     ****   else if (n < TOP_DOTS) { // column = (n-MAX_DOTS)/6; row = ((n-MAX_DOTS)%6)
 535:src/lcd.c     ****     lcd_fill_rect( XLEFT-DWIDTH+5*((n-MAX_DOTS)/6)+15, 70-(10+6*5)+((n-MAX_DOTS)%6)*5, 4, 4, col);
 536:src/lcd.c     ****     return;
 537:src/lcd.c     ****   }
 538:src/lcd.c     **** }
 539:src/lcd.c     **** 
ARM GAS  /tmp/ccb1Ng7p.s 			page 11


 540:src/lcd.c     **** void draw_BEG (int depth, int inverse) {
  33              		.loc 1 540 6 view -0
  34              		.cfi_startproc
  35              		@ args = 0, pretend = 0, frame = 0
  36              		@ frame_needed = 0, uses_anonymous_args = 0
  37              		@ link register save eliminated.
  38              	.LVL0:
 541:src/lcd.c     ****   t20->inv = inverse;
 542:src/lcd.c     ****   lcd_setXY (t20, 285, Y_ANNUNC-50);
 543:src/lcd.c     ****   if (depth == 4) {
 544:src/lcd.c     ****     lcd_writeText(t20, "S:4");
  39              		.loc 1 544 5 view .LVU1
  40 0000 024A     		ldr	r2, .L3
  41 0002 034B     		ldr	r3, .L3+4
  42 0004 106B     		ldr	r0, [r2, #48]
  43 0006 0349     		ldr	r1, .L3+8
  44 0008 1847     		bx	r3	@ indirect register sibling call
  45              	.LVL1:
  46              	.L4:
  47 000a 00BF     		.align	2
  48              	.L3:
  49 000c 00200010 		.word	268443648
  50 0010 7D020008 		.word	134218365
  51 0014 00000000 		.word	.LC0
  52              		.cfi_endproc
  53              	.LFE42:
  55              		.section	.text.is_dot,"ax",%progbits
  56              		.align	1
  57              		.p2align 2,,3
  58              		.global	is_dot
  59              		.syntax unified
  60              		.thumb
  61              		.thumb_func
  62              		.fpu fpv4-sp-d16
  64              	is_dot:
  65              	.LVL2:
  66              	.LFB2:
  52:src/lcd.c     **** 	return dots[n]&1;
  67              		.loc 1 52 19 view -0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71              		@ link register save eliminated.
  53:src/lcd.c     **** }
  72              		.loc 1 53 2 view .LVU3
  53:src/lcd.c     **** }
  73              		.loc 1 53 13 is_stmt 0 view .LVU4
  74 0000 024B     		ldr	r3, .L6
  53:src/lcd.c     **** }
  75              		.loc 1 53 16 view .LVU5
  76 0002 185C     		ldrb	r0, [r3, r0]	@ zero_extendqisi2
  77              	.LVL3:
  54:src/lcd.c     **** 
  78              		.loc 1 54 1 view .LVU6
  79 0004 00F00100 		and	r0, r0, #1
  80 0008 7047     		bx	lr
  81              	.L7:
ARM GAS  /tmp/ccb1Ng7p.s 			page 12


  82 000a 00BF     		.align	2
  83              	.L6:
  84 000c 00000000 		.word	.LANCHOR0
  85              		.cfi_endproc
  86              	.LFE2:
  88              		.section	.text.clear_disp,"ax",%progbits
  89              		.align	1
  90              		.p2align 2,,3
  91              		.global	clear_disp
  92              		.syntax unified
  93              		.thumb
  94              		.thumb_func
  95              		.fpu fpv4-sp-d16
  97              	clear_disp:
  98              	.LFB3:
  56:src/lcd.c     ****       for (int i=0; i<TOP_DOTS; i++)
  99              		.loc 1 56 23 is_stmt 1 view -0
 100              		.cfi_startproc
 101              		@ args = 0, pretend = 0, frame = 0
 102              		@ frame_needed = 0, uses_anonymous_args = 0
 103              		@ link register save eliminated.
  57:src/lcd.c     **** 	dots[i] = 0;
 104              		.loc 1 57 7 view .LVU8
 105              	.LBB52:
  57:src/lcd.c     **** 	dots[i] = 0;
 106              		.loc 1 57 12 view .LVU9
 107              	.LVL4:
  57:src/lcd.c     **** 	dots[i] = 0;
 108              		.loc 1 57 21 view .LVU10
 109 0000 044B     		ldr	r3, .L11
  58:src/lcd.c     ****       lcd_clear_buf();
 110              		.loc 1 58 10 is_stmt 0 view .LVU11
 111 0002 0021     		movs	r1, #0
 112 0004 03F55372 		add	r2, r3, #844
 113              	.LVL5:
 114              	.L9:
  58:src/lcd.c     ****       lcd_clear_buf();
 115              		.loc 1 58 2 is_stmt 1 discriminator 3 view .LVU12
  58:src/lcd.c     ****       lcd_clear_buf();
 116              		.loc 1 58 10 is_stmt 0 discriminator 3 view .LVU13
 117 0008 03F8011F 		strb	r1, [r3, #1]!
 118              	.LVL6:
  57:src/lcd.c     **** 	dots[i] = 0;
 119              		.loc 1 57 33 is_stmt 1 discriminator 3 view .LVU14
  57:src/lcd.c     **** 	dots[i] = 0;
 120              		.loc 1 57 21 discriminator 3 view .LVU15
  57:src/lcd.c     **** 	dots[i] = 0;
 121              		.loc 1 57 7 is_stmt 0 discriminator 3 view .LVU16
 122 000c 9342     		cmp	r3, r2
 123 000e FBD1     		bne	.L9
 124              	.LBE52:
  59:src/lcd.c     **** }
 125              		.loc 1 59 7 is_stmt 1 view .LVU17
 126 0010 014B     		ldr	r3, .L11+4
 127              	.LVL7:
  59:src/lcd.c     **** }
 128              		.loc 1 59 7 is_stmt 0 view .LVU18
ARM GAS  /tmp/ccb1Ng7p.s 			page 13


 129 0012 1847     		bx	r3	@ indirect register sibling call
 130              	.LVL8:
 131              	.L12:
 132              		.align	2
 133              	.L11:
 134 0014 FFFFFFFF 		.word	.LANCHOR0-1
 135 0018 2D020008 		.word	134218285
 136              		.cfi_endproc
 137              	.LFE3:
 139              		.section	.text.reset_disp,"ax",%progbits
 140              		.align	1
 141              		.p2align 2,,3
 142              		.global	reset_disp
 143              		.syntax unified
 144              		.thumb
 145              		.thumb_func
 146              		.fpu fpv4-sp-d16
 148              	reset_disp:
 149              	.LFB4:
  62:src/lcd.c     **** 	int rcl = is_dot(RCL_annun);
 150              		.loc 1 62 23 is_stmt 1 view -0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 0, uses_anonymous_args = 0
  63:src/lcd.c     **** 	int bat = is_dot(BATTERY);
 154              		.loc 1 63 2 view .LVU20
 155              	.LVL9:
 156              	.LBB53:
 157              	.LBI53:
  52:src/lcd.c     **** 	return dots[n]&1;
 158              		.loc 1 52 5 view .LVU21
 159              	.LBB54:
  53:src/lcd.c     **** }
 160              		.loc 1 53 2 view .LVU22
 161              	.LBE54:
 162              	.LBE53:
  62:src/lcd.c     **** 	int rcl = is_dot(RCL_annun);
 163              		.loc 1 62 23 is_stmt 0 view .LVU23
 164 0000 70B5     		push	{r4, r5, r6, lr}
 165              		.cfi_def_cfa_offset 16
 166              		.cfi_offset 4, -16
 167              		.cfi_offset 5, -12
 168              		.cfi_offset 6, -8
 169              		.cfi_offset 14, -4
 170              	.LBB57:
 171              	.LBB55:
  53:src/lcd.c     **** }
 172              		.loc 1 53 13 view .LVU24
 173 0002 1548     		ldr	r0, .L17
  53:src/lcd.c     **** }
 174              		.loc 1 53 16 view .LVU25
 175 0004 90F88A10 		ldrb	r1, [r0, #138]	@ zero_extendqisi2
 176              	.LBE55:
 177              	.LBE57:
 178              	.LBB58:
 179              	.LBB59:
 180 0008 90F88760 		ldrb	r6, [r0, #135]	@ zero_extendqisi2
ARM GAS  /tmp/ccb1Ng7p.s 			page 14


 181              	.LBE59:
 182              	.LBE58:
 183              	.LBB61:
 184              	.LBB62:
 185 000c 90F88450 		ldrb	r5, [r0, #132]	@ zero_extendqisi2
 186              	.LBE62:
 187              	.LBE61:
 188              	.LBB64:
 189              	.LBB65:
 190 0010 90F88D40 		ldrb	r4, [r0, #141]	@ zero_extendqisi2
 191 0014 431E     		subs	r3, r0, #1
 192              	.LBE65:
 193              	.LBE64:
 194              	.LBB67:
 195              	.LBB56:
 196 0016 01F00101 		and	r1, r1, #1
 197              	.LVL10:
  53:src/lcd.c     **** }
 198              		.loc 1 53 16 view .LVU26
 199              	.LBE56:
 200              	.LBE67:
  64:src/lcd.c     **** 	int leq = is_dot(LIT_EQ);
 201              		.loc 1 64 2 is_stmt 1 view .LVU27
 202              	.LBB68:
 203              	.LBI58:
  52:src/lcd.c     **** 	return dots[n]&1;
 204              		.loc 1 52 5 view .LVU28
 205              	.LBB60:
  53:src/lcd.c     **** }
 206              		.loc 1 53 2 view .LVU29
  53:src/lcd.c     **** }
 207              		.loc 1 53 16 is_stmt 0 view .LVU30
 208 001a 06F00106 		and	r6, r6, #1
 209              	.LVL11:
  53:src/lcd.c     **** }
 210              		.loc 1 53 16 view .LVU31
 211              	.LBE60:
 212              	.LBE68:
  65:src/lcd.c     **** 	int rpn = is_dot(RPN);
 213              		.loc 1 65 2 is_stmt 1 view .LVU32
 214              	.LBB69:
 215              	.LBI61:
  52:src/lcd.c     **** 	return dots[n]&1;
 216              		.loc 1 52 5 view .LVU33
 217              	.LBB63:
  53:src/lcd.c     **** }
 218              		.loc 1 53 2 view .LVU34
  53:src/lcd.c     **** }
 219              		.loc 1 53 16 is_stmt 0 view .LVU35
 220 001e 05F00105 		and	r5, r5, #1
 221              	.LVL12:
  53:src/lcd.c     **** }
 222              		.loc 1 53 16 view .LVU36
 223              	.LBE63:
 224              	.LBE69:
  66:src/lcd.c     **** 	int i;
 225              		.loc 1 66 2 is_stmt 1 view .LVU37
ARM GAS  /tmp/ccb1Ng7p.s 			page 15


 226              	.LBB70:
 227              	.LBI64:
  52:src/lcd.c     **** 	return dots[n]&1;
 228              		.loc 1 52 5 view .LVU38
 229              	.LBB66:
  53:src/lcd.c     **** }
 230              		.loc 1 53 2 view .LVU39
  53:src/lcd.c     **** }
 231              		.loc 1 53 16 is_stmt 0 view .LVU40
 232 0022 04F00104 		and	r4, r4, #1
 233              	.LVL13:
  53:src/lcd.c     **** }
 234              		.loc 1 53 16 view .LVU41
 235              	.LBE66:
 236              	.LBE70:
  67:src/lcd.c     ****         for (i=0; i<TOP_DOTS; i++)
 237              		.loc 1 67 2 is_stmt 1 view .LVU42
  68:src/lcd.c     **** 	  //		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 238              		.loc 1 68 9 view .LVU43
  68:src/lcd.c     **** 	  //		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 239              		.loc 1 68 19 view .LVU44
 240 0026 00F24B30 		addw	r0, r0, #843
 241              	.LVL14:
 242              	.L14:
  71:src/lcd.c     **** 	dot(RCL_annun, rcl);
 243              		.loc 1 71 4 discriminator 3 view .LVU45
  71:src/lcd.c     **** 	dot(RCL_annun, rcl);
 244              		.loc 1 71 12 is_stmt 0 discriminator 3 view .LVU46
 245 002a 13F8012F 		ldrb	r2, [r3, #1]!	@ zero_extendqisi2
 246              	.LVL15:
  71:src/lcd.c     **** 	dot(RCL_annun, rcl);
 247              		.loc 1 71 12 discriminator 3 view .LVU47
 248 002e 5200     		lsls	r2, r2, #1
  68:src/lcd.c     **** 	  //		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 249              		.loc 1 68 9 discriminator 3 view .LVU48
 250 0030 8342     		cmp	r3, r0
  71:src/lcd.c     **** 	dot(RCL_annun, rcl);
 251              		.loc 1 71 12 discriminator 3 view .LVU49
 252 0032 1A70     		strb	r2, [r3]
  68:src/lcd.c     **** 	  //		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 253              		.loc 1 68 31 is_stmt 1 discriminator 3 view .LVU50
 254              	.LVL16:
  68:src/lcd.c     **** 	  //		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 255              		.loc 1 68 19 discriminator 3 view .LVU51
  68:src/lcd.c     **** 	  //		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 256              		.loc 1 68 9 is_stmt 0 discriminator 3 view .LVU52
 257 0034 F9D1     		bne	.L14
  72:src/lcd.c     **** 	dot(BATTERY, bat);
 258              		.loc 1 72 2 is_stmt 1 view .LVU53
 259 0036 8A20     		movs	r0, #138
 260 0038 FFF7FEFF 		bl	dot
 261              	.LVL17:
  73:src/lcd.c     **** 	dot(LIT_EQ, leq);
 262              		.loc 1 73 2 view .LVU54
 263 003c 3146     		mov	r1, r6
 264 003e 8720     		movs	r0, #135
 265 0040 FFF7FEFF 		bl	dot
ARM GAS  /tmp/ccb1Ng7p.s 			page 16


 266              	.LVL18:
  74:src/lcd.c     **** 	dot(RPN, rpn);
 267              		.loc 1 74 2 view .LVU55
 268 0044 2946     		mov	r1, r5
 269 0046 8420     		movs	r0, #132
 270 0048 FFF7FEFF 		bl	dot
 271              	.LVL19:
  75:src/lcd.c     **** }
 272              		.loc 1 75 2 view .LVU56
 273 004c 2146     		mov	r1, r4
 274 004e 8D20     		movs	r0, #141
  76:src/lcd.c     **** 
 275              		.loc 1 76 1 is_stmt 0 view .LVU57
 276 0050 BDE87040 		pop	{r4, r5, r6, lr}
 277              		.cfi_restore 14
 278              		.cfi_restore 6
 279              		.cfi_restore 5
 280              		.cfi_restore 4
 281              		.cfi_def_cfa_offset 0
 282              	.LVL20:
  75:src/lcd.c     **** }
 283              		.loc 1 75 2 view .LVU58
 284 0054 FFF7FEBF 		b	dot
 285              	.LVL21:
 286              	.L18:
  75:src/lcd.c     **** }
 287              		.loc 1 75 2 view .LVU59
 288              		.align	2
 289              	.L17:
 290 0058 00000000 		.word	.LANCHOR0
 291              		.cfi_endproc
 292              	.LFE4:
 294              		.section	.text.reset_7_segment,"ax",%progbits
 295              		.align	1
 296              		.p2align 2,,3
 297              		.global	reset_7_segment
 298              		.syntax unified
 299              		.thumb
 300              		.thumb_func
 301              		.fpu fpv4-sp-d16
 303              	reset_7_segment:
 304              	.LFB5:
  78:src/lcd.c     ****   for (int i = 0; i <= EXP_SIGN; ++i) {
 305              		.loc 1 78 28 is_stmt 1 view -0
 306              		.cfi_startproc
 307              		@ args = 0, pretend = 0, frame = 0
 308              		@ frame_needed = 0, uses_anonymous_args = 0
 309              		@ link register save eliminated.
  79:src/lcd.c     ****     dots[i] <<= 1;
 310              		.loc 1 79 3 view .LVU61
 311              	.LBB71:
  79:src/lcd.c     ****     dots[i] <<= 1;
 312              		.loc 1 79 8 view .LVU62
 313              	.LVL22:
  79:src/lcd.c     ****     dots[i] <<= 1;
 314              		.loc 1 79 19 view .LVU63
 315 0000 044B     		ldr	r3, .L22
ARM GAS  /tmp/ccb1Ng7p.s 			page 17


 316 0002 03F18301 		add	r1, r3, #131
 317              	.LVL23:
 318              	.L20:
  80:src/lcd.c     ****   }
 319              		.loc 1 80 5 discriminator 3 view .LVU64
  80:src/lcd.c     ****   }
 320              		.loc 1 80 13 is_stmt 0 discriminator 3 view .LVU65
 321 0006 13F8012F 		ldrb	r2, [r3, #1]!	@ zero_extendqisi2
 322              	.LVL24:
  80:src/lcd.c     ****   }
 323              		.loc 1 80 13 discriminator 3 view .LVU66
 324 000a 5200     		lsls	r2, r2, #1
  79:src/lcd.c     ****     dots[i] <<= 1;
 325              		.loc 1 79 3 discriminator 3 view .LVU67
 326 000c 8B42     		cmp	r3, r1
  80:src/lcd.c     ****   }
 327              		.loc 1 80 13 discriminator 3 view .LVU68
 328 000e 1A70     		strb	r2, [r3]
  79:src/lcd.c     ****     dots[i] <<= 1;
 329              		.loc 1 79 34 is_stmt 1 discriminator 3 view .LVU69
 330              	.LVL25:
  79:src/lcd.c     ****     dots[i] <<= 1;
 331              		.loc 1 79 19 discriminator 3 view .LVU70
  79:src/lcd.c     ****     dots[i] <<= 1;
 332              		.loc 1 79 3 is_stmt 0 discriminator 3 view .LVU71
 333 0010 F9D1     		bne	.L20
 334              	.LBE71:
  82:src/lcd.c     **** 
 335              		.loc 1 82 1 view .LVU72
 336 0012 7047     		bx	lr
 337              	.L23:
 338              		.align	2
 339              	.L22:
 340 0014 FFFFFFFF 		.word	.LANCHOR0-1
 341              		.cfi_endproc
 342              	.LFE5:
 344              		.section	.text.left_side,"ax",%progbits
 345              		.align	1
 346              		.p2align 2,,3
 347              		.global	left_side
 348              		.syntax unified
 349              		.thumb
 350              		.thumb_func
 351              		.fpu fpv4-sp-d16
 353              	left_side:
 354              	.LVL26:
 355              	.LFB6:
  87:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, col);
 356              		.loc 1 87 40 is_stmt 1 view -0
 357              		.cfi_startproc
 358              		@ args = 0, pretend = 0, frame = 0
 359              		@ frame_needed = 0, uses_anonymous_args = 0
  88:src/lcd.c     ****   lcd_fill_rect (i+3, j+2, 1, 18, col);
 360              		.loc 1 88 3 view .LVU74
  87:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, col);
 361              		.loc 1 87 40 is_stmt 0 view .LVU75
 362 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
ARM GAS  /tmp/ccb1Ng7p.s 			page 18


 363              		.cfi_def_cfa_offset 24
 364              		.cfi_offset 4, -24
 365              		.cfi_offset 5, -20
 366              		.cfi_offset 6, -16
 367              		.cfi_offset 7, -12
 368              		.cfi_offset 8, -8
 369              		.cfi_offset 14, -4
 370 0004 82B0     		sub	sp, sp, #8
 371              		.cfi_def_cfa_offset 32
  87:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, col);
 372              		.loc 1 87 40 view .LVU76
 373 0006 0E46     		mov	r6, r1
  88:src/lcd.c     ****   lcd_fill_rect (i+3, j+2, 1, 18, col);
 374              		.loc 1 88 3 view .LVU77
 375 0008 124F     		ldr	r7, .L26
 376 000a 0092     		str	r2, [sp]
  87:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, col);
 377              		.loc 1 87 40 view .LVU78
 378 000c 0446     		mov	r4, r0
 379 000e 1546     		mov	r5, r2
  89:src/lcd.c     ****   lcd_fill_rect (i+4, j+2, 1, 17, col);
 380              		.loc 1 89 24 view .LVU79
 381 0010 06F10208 		add	r8, r6, #2
  88:src/lcd.c     ****   lcd_fill_rect (i+3, j+2, 1, 18, col);
 382              		.loc 1 88 3 view .LVU80
 383 0014 0B31     		adds	r1, r1, #11
 384              	.LVL27:
  88:src/lcd.c     ****   lcd_fill_rect (i+3, j+2, 1, 18, col);
 385              		.loc 1 88 3 view .LVU81
 386 0016 0230     		adds	r0, r0, #2
 387              	.LVL28:
  88:src/lcd.c     ****   lcd_fill_rect (i+3, j+2, 1, 18, col);
 388              		.loc 1 88 3 view .LVU82
 389 0018 0923     		movs	r3, #9
 390 001a 0122     		movs	r2, #1
 391              	.LVL29:
  88:src/lcd.c     ****   lcd_fill_rect (i+3, j+2, 1, 18, col);
 392              		.loc 1 88 3 view .LVU83
 393 001c B847     		blx	r7
 394              	.LVL30:
  89:src/lcd.c     ****   lcd_fill_rect (i+4, j+2, 1, 17, col);
 395              		.loc 1 89 3 is_stmt 1 view .LVU84
 396 001e 4146     		mov	r1, r8
 397 0020 E01C     		adds	r0, r4, #3
 398 0022 0095     		str	r5, [sp]
 399 0024 1223     		movs	r3, #18
 400 0026 0122     		movs	r2, #1
 401 0028 B847     		blx	r7
 402              	.LVL31:
  90:src/lcd.c     ****   lcd_fill_rect (i+5, j+3, 1, 15, col);
 403              		.loc 1 90 3 view .LVU85
 404 002a 4146     		mov	r1, r8
 405 002c 201D     		adds	r0, r4, #4
 406 002e 0095     		str	r5, [sp]
 407 0030 1123     		movs	r3, #17
 408 0032 0122     		movs	r2, #1
 409 0034 B847     		blx	r7
ARM GAS  /tmp/ccb1Ng7p.s 			page 19


 410              	.LVL32:
  91:src/lcd.c     ****   lcd_fill_rect (i+6, j+4, 1, 7, col);
 411              		.loc 1 91 3 view .LVU86
 412 0036 F11C     		adds	r1, r6, #3
 413 0038 601D     		adds	r0, r4, #5
 414 003a 0095     		str	r5, [sp]
 415 003c 0F23     		movs	r3, #15
 416 003e 0122     		movs	r2, #1
 417 0040 B847     		blx	r7
 418              	.LVL33:
  92:src/lcd.c     **** }
 419              		.loc 1 92 3 view .LVU87
 420 0042 0095     		str	r5, [sp]
 421 0044 311D     		adds	r1, r6, #4
 422 0046 A01D     		adds	r0, r4, #6
 423 0048 0723     		movs	r3, #7
 424 004a 0122     		movs	r2, #1
 425 004c B847     		blx	r7
 426              	.LVL34:
  93:src/lcd.c     **** void left_side_top (int i, int j, int col) {
 427              		.loc 1 93 1 is_stmt 0 view .LVU88
 428 004e 02B0     		add	sp, sp, #8
 429              		.cfi_def_cfa_offset 24
 430              		@ sp needed
 431 0050 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 432              	.LVL35:
 433              	.L27:
  93:src/lcd.c     **** void left_side_top (int i, int j, int col) {
 434              		.loc 1 93 1 view .LVU89
 435              		.align	2
 436              	.L26:
 437 0054 3D020008 		.word	134218301
 438              		.cfi_endproc
 439              	.LFE6:
 441              		.section	.text.left_side_top,"ax",%progbits
 442              		.align	1
 443              		.p2align 2,,3
 444              		.global	left_side_top
 445              		.syntax unified
 446              		.thumb
 447              		.thumb_func
 448              		.fpu fpv4-sp-d16
 450              	left_side_top:
 451              	.LVL36:
 452              	.LFB7:
  94:src/lcd.c     ****   left_side(i, j, col);
 453              		.loc 1 94 44 is_stmt 1 view -0
 454              		.cfi_startproc
 455              		@ args = 0, pretend = 0, frame = 0
 456              		@ frame_needed = 0, uses_anonymous_args = 0
 457              		@ link register save eliminated.
  95:src/lcd.c     **** }
 458              		.loc 1 95 3 view .LVU91
 459 0000 FFF7FEBF 		b	left_side
 460              	.LVL37:
  95:src/lcd.c     **** }
 461              		.loc 1 95 3 is_stmt 0 view .LVU92
ARM GAS  /tmp/ccb1Ng7p.s 			page 20


 462              		.cfi_endproc
 463              	.LFE7:
 465              		.section	.text.left_side_bottom,"ax",%progbits
 466              		.align	1
 467              		.p2align 2,,3
 468              		.global	left_side_bottom
 469              		.syntax unified
 470              		.thumb
 471              		.thumb_func
 472              		.fpu fpv4-sp-d16
 474              	left_side_bottom:
 475              	.LVL38:
 476              	.LFB8:
  97:src/lcd.c     ****   left_side(i-2, j+19, col);
 477              		.loc 1 97 47 is_stmt 1 view -0
 478              		.cfi_startproc
 479              		@ args = 0, pretend = 0, frame = 0
 480              		@ frame_needed = 0, uses_anonymous_args = 0
 481              		@ link register save eliminated.
  98:src/lcd.c     **** }
 482              		.loc 1 98 3 view .LVU94
 483 0000 0238     		subs	r0, r0, #2
 484              	.LVL39:
  98:src/lcd.c     **** }
 485              		.loc 1 98 3 is_stmt 0 view .LVU95
 486 0002 1331     		adds	r1, r1, #19
 487              	.LVL40:
  98:src/lcd.c     **** }
 488              		.loc 1 98 3 view .LVU96
 489 0004 FFF7FEBF 		b	left_side
 490              	.LVL41:
  98:src/lcd.c     **** }
 491              		.loc 1 98 3 view .LVU97
 492              		.cfi_endproc
 493              	.LFE8:
 495              		.section	.text.right_side,"ax",%progbits
 496              		.align	1
 497              		.p2align 2,,3
 498              		.global	right_side
 499              		.syntax unified
 500              		.thumb
 501              		.thumb_func
 502              		.fpu fpv4-sp-d16
 504              	right_side:
 505              	.LVL42:
 506              	.LFB9:
 100:src/lcd.c     ****   lcd_fill_rect (i+16, j+11, 1, 7, col);
 507              		.loc 1 100 41 is_stmt 1 view -0
 508              		.cfi_startproc
 509              		@ args = 0, pretend = 0, frame = 0
 510              		@ frame_needed = 0, uses_anonymous_args = 0
 101:src/lcd.c     ****   lcd_fill_rect (i+17, j+4, 1, 15, col);
 511              		.loc 1 101 3 view .LVU99
 100:src/lcd.c     ****   lcd_fill_rect (i+16, j+11, 1, 7, col);
 512              		.loc 1 100 41 is_stmt 0 view .LVU100
 513 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 514              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccb1Ng7p.s 			page 21


 515              		.cfi_offset 4, -24
 516              		.cfi_offset 5, -20
 517              		.cfi_offset 6, -16
 518              		.cfi_offset 7, -12
 519              		.cfi_offset 8, -8
 520              		.cfi_offset 14, -4
 521 0004 82B0     		sub	sp, sp, #8
 522              		.cfi_def_cfa_offset 32
 101:src/lcd.c     ****   lcd_fill_rect (i+17, j+4, 1, 15, col);
 523              		.loc 1 101 3 view .LVU101
 524 0006 154F     		ldr	r7, .L32
 525 0008 0092     		str	r2, [sp]
 100:src/lcd.c     ****   lcd_fill_rect (i+16, j+11, 1, 7, col);
 526              		.loc 1 100 41 view .LVU102
 527 000a 0446     		mov	r4, r0
 528 000c 1546     		mov	r5, r2
 529 000e 0E46     		mov	r6, r1
 101:src/lcd.c     ****   lcd_fill_rect (i+17, j+4, 1, 15, col);
 530              		.loc 1 101 3 view .LVU103
 531 0010 1030     		adds	r0, r0, #16
 532              	.LVL43:
 101:src/lcd.c     ****   lcd_fill_rect (i+17, j+4, 1, 15, col);
 533              		.loc 1 101 3 view .LVU104
 534 0012 0B31     		adds	r1, r1, #11
 535              	.LVL44:
 101:src/lcd.c     ****   lcd_fill_rect (i+17, j+4, 1, 15, col);
 536              		.loc 1 101 3 view .LVU105
 537 0014 0723     		movs	r3, #7
 538 0016 0122     		movs	r2, #1
 539              	.LVL45:
 101:src/lcd.c     ****   lcd_fill_rect (i+17, j+4, 1, 15, col);
 540              		.loc 1 101 3 view .LVU106
 541 0018 B847     		blx	r7
 542              	.LVL46:
 102:src/lcd.c     ****   lcd_fill_rect (i+18, j+3, 1, 17, col);
 543              		.loc 1 102 3 is_stmt 1 view .LVU107
 544 001a 311D     		adds	r1, r6, #4
 545 001c 04F11100 		add	r0, r4, #17
 546 0020 0095     		str	r5, [sp]
 547 0022 0F23     		movs	r3, #15
 548 0024 0122     		movs	r2, #1
 549 0026 B847     		blx	r7
 550              	.LVL47:
 103:src/lcd.c     ****   lcd_fill_rect (i+19, j+2, 1, 18, col);
 551              		.loc 1 103 3 view .LVU108
 104:src/lcd.c     ****   lcd_fill_rect (i+20, j+2, 1, 9, col);
 552              		.loc 1 104 25 is_stmt 0 view .LVU109
 553 0028 06F10208 		add	r8, r6, #2
 103:src/lcd.c     ****   lcd_fill_rect (i+19, j+2, 1, 18, col);
 554              		.loc 1 103 3 view .LVU110
 555 002c F11C     		adds	r1, r6, #3
 556 002e 04F11200 		add	r0, r4, #18
 557 0032 0095     		str	r5, [sp]
 558 0034 1123     		movs	r3, #17
 559 0036 0122     		movs	r2, #1
 560 0038 B847     		blx	r7
 561              	.LVL48:
ARM GAS  /tmp/ccb1Ng7p.s 			page 22


 104:src/lcd.c     ****   lcd_fill_rect (i+20, j+2, 1, 9, col);
 562              		.loc 1 104 3 is_stmt 1 view .LVU111
 563 003a 4146     		mov	r1, r8
 564 003c 04F11300 		add	r0, r4, #19
 565 0040 0095     		str	r5, [sp]
 566 0042 1223     		movs	r3, #18
 567 0044 0122     		movs	r2, #1
 568 0046 B847     		blx	r7
 569              	.LVL49:
 105:src/lcd.c     **** }
 570              		.loc 1 105 3 view .LVU112
 571 0048 4146     		mov	r1, r8
 572 004a 0095     		str	r5, [sp]
 573 004c 04F11400 		add	r0, r4, #20
 574 0050 0923     		movs	r3, #9
 575 0052 0122     		movs	r2, #1
 576 0054 B847     		blx	r7
 577              	.LVL50:
 106:src/lcd.c     **** void right_side_top (int i, int j, int col) {
 578              		.loc 1 106 1 is_stmt 0 view .LVU113
 579 0056 02B0     		add	sp, sp, #8
 580              		.cfi_def_cfa_offset 24
 581              		@ sp needed
 582 0058 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 583              	.LVL51:
 584              	.L33:
 106:src/lcd.c     **** void right_side_top (int i, int j, int col) {
 585              		.loc 1 106 1 view .LVU114
 586              		.align	2
 587              	.L32:
 588 005c 3D020008 		.word	134218301
 589              		.cfi_endproc
 590              	.LFE9:
 592              		.section	.text.right_side_top,"ax",%progbits
 593              		.align	1
 594              		.p2align 2,,3
 595              		.global	right_side_top
 596              		.syntax unified
 597              		.thumb
 598              		.thumb_func
 599              		.fpu fpv4-sp-d16
 601              	right_side_top:
 602              	.LVL52:
 603              	.LFB10:
 107:src/lcd.c     ****   right_side(i, j, col);
 604              		.loc 1 107 45 is_stmt 1 view -0
 605              		.cfi_startproc
 606              		@ args = 0, pretend = 0, frame = 0
 607              		@ frame_needed = 0, uses_anonymous_args = 0
 608              		@ link register save eliminated.
 108:src/lcd.c     **** }
 609              		.loc 1 108 3 view .LVU116
 610 0000 FFF7FEBF 		b	right_side
 611              	.LVL53:
 108:src/lcd.c     **** }
 612              		.loc 1 108 3 is_stmt 0 view .LVU117
 613              		.cfi_endproc
ARM GAS  /tmp/ccb1Ng7p.s 			page 23


 614              	.LFE10:
 616              		.section	.text.right_side_bottom,"ax",%progbits
 617              		.align	1
 618              		.p2align 2,,3
 619              		.global	right_side_bottom
 620              		.syntax unified
 621              		.thumb
 622              		.thumb_func
 623              		.fpu fpv4-sp-d16
 625              	right_side_bottom:
 626              	.LVL54:
 627              	.LFB11:
 110:src/lcd.c     ****   right_side(i-2, j+19, col);
 628              		.loc 1 110 48 is_stmt 1 view -0
 629              		.cfi_startproc
 630              		@ args = 0, pretend = 0, frame = 0
 631              		@ frame_needed = 0, uses_anonymous_args = 0
 632              		@ link register save eliminated.
 111:src/lcd.c     **** }
 633              		.loc 1 111 3 view .LVU119
 634 0000 0238     		subs	r0, r0, #2
 635              	.LVL55:
 111:src/lcd.c     **** }
 636              		.loc 1 111 3 is_stmt 0 view .LVU120
 637 0002 1331     		adds	r1, r1, #19
 638              	.LVL56:
 111:src/lcd.c     **** }
 639              		.loc 1 111 3 view .LVU121
 640 0004 FFF7FEBF 		b	right_side
 641              	.LVL57:
 111:src/lcd.c     **** }
 642              		.loc 1 111 3 view .LVU122
 643              		.cfi_endproc
 644              	.LFE11:
 646              		.section	.text.top,"ax",%progbits
 647              		.align	1
 648              		.p2align 2,,3
 649              		.global	top
 650              		.syntax unified
 651              		.thumb
 652              		.thumb_func
 653              		.fpu fpv4-sp-d16
 655              	top:
 656              	.LVL58:
 657              	.LFB12:
 113:src/lcd.c     ****   lcd_fill_rect ( i+5, j, 14, 1, col );
 658              		.loc 1 113 34 is_stmt 1 view -0
 659              		.cfi_startproc
 660              		@ args = 0, pretend = 0, frame = 0
 661              		@ frame_needed = 0, uses_anonymous_args = 0
 114:src/lcd.c     ****   lcd_fill_rect ( i+4, j+1, 16, 1, col );
 662              		.loc 1 114 3 view .LVU124
 113:src/lcd.c     ****   lcd_fill_rect ( i+5, j, 14, 1, col );
 663              		.loc 1 113 34 is_stmt 0 view .LVU125
 664 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 665              		.cfi_def_cfa_offset 20
 666              		.cfi_offset 4, -20
ARM GAS  /tmp/ccb1Ng7p.s 			page 24


 667              		.cfi_offset 5, -16
 668              		.cfi_offset 6, -12
 669              		.cfi_offset 7, -8
 670              		.cfi_offset 14, -4
 671 0002 83B0     		sub	sp, sp, #12
 672              		.cfi_def_cfa_offset 32
 114:src/lcd.c     ****   lcd_fill_rect ( i+4, j+1, 16, 1, col );
 673              		.loc 1 114 3 view .LVU126
 674 0004 0E4F     		ldr	r7, .L38
 675 0006 0092     		str	r2, [sp]
 113:src/lcd.c     ****   lcd_fill_rect ( i+5, j, 14, 1, col );
 676              		.loc 1 113 34 view .LVU127
 677 0008 0446     		mov	r4, r0
 678 000a 1546     		mov	r5, r2
 679 000c 0E46     		mov	r6, r1
 114:src/lcd.c     ****   lcd_fill_rect ( i+4, j+1, 16, 1, col );
 680              		.loc 1 114 3 view .LVU128
 681 000e 0530     		adds	r0, r0, #5
 682              	.LVL59:
 114:src/lcd.c     ****   lcd_fill_rect ( i+4, j+1, 16, 1, col );
 683              		.loc 1 114 3 view .LVU129
 684 0010 0123     		movs	r3, #1
 685 0012 0E22     		movs	r2, #14
 686              	.LVL60:
 114:src/lcd.c     ****   lcd_fill_rect ( i+4, j+1, 16, 1, col );
 687              		.loc 1 114 3 view .LVU130
 688 0014 B847     		blx	r7
 689              	.LVL61:
 115:src/lcd.c     ****   lcd_fill_rect ( i+6, j+2, 12, 1, col );
 690              		.loc 1 115 3 is_stmt 1 view .LVU131
 691 0016 711C     		adds	r1, r6, #1
 692 0018 201D     		adds	r0, r4, #4
 693 001a 0095     		str	r5, [sp]
 694 001c 0123     		movs	r3, #1
 695 001e 1022     		movs	r2, #16
 696 0020 B847     		blx	r7
 697              	.LVL62:
 116:src/lcd.c     ****   lcd_fill_rect ( i+7, j+3, 10, 1, col );
 698              		.loc 1 116 3 view .LVU132
 699 0022 B11C     		adds	r1, r6, #2
 700 0024 A01D     		adds	r0, r4, #6
 701 0026 0095     		str	r5, [sp]
 702 0028 0123     		movs	r3, #1
 703 002a 0C22     		movs	r2, #12
 704 002c B847     		blx	r7
 705              	.LVL63:
 117:src/lcd.c     **** }
 706              		.loc 1 117 3 view .LVU133
 707 002e 0095     		str	r5, [sp]
 708 0030 F11C     		adds	r1, r6, #3
 709 0032 E01D     		adds	r0, r4, #7
 710 0034 0123     		movs	r3, #1
 711 0036 0A22     		movs	r2, #10
 712 0038 B847     		blx	r7
 713              	.LVL64:
 118:src/lcd.c     **** void middle (int i, int j, int col) {
 714              		.loc 1 118 1 is_stmt 0 view .LVU134
ARM GAS  /tmp/ccb1Ng7p.s 			page 25


 715 003a 03B0     		add	sp, sp, #12
 716              		.cfi_def_cfa_offset 20
 717              		@ sp needed
 718 003c F0BD     		pop	{r4, r5, r6, r7, pc}
 719              	.LVL65:
 720              	.L39:
 118:src/lcd.c     **** void middle (int i, int j, int col) {
 721              		.loc 1 118 1 view .LVU135
 722 003e 00BF     		.align	2
 723              	.L38:
 724 0040 3D020008 		.word	134218301
 725              		.cfi_endproc
 726              	.LFE12:
 728              		.section	.text.middle,"ax",%progbits
 729              		.align	1
 730              		.p2align 2,,3
 731              		.global	middle
 732              		.syntax unified
 733              		.thumb
 734              		.thumb_func
 735              		.fpu fpv4-sp-d16
 737              	middle:
 738              	.LVL66:
 739              	.LFB13:
 119:src/lcd.c     ****   //  lcd_fill_rect ( i+5, j+19, 11, 3, col );
 740              		.loc 1 119 37 is_stmt 1 view -0
 741              		.cfi_startproc
 742              		@ args = 0, pretend = 0, frame = 0
 743              		@ frame_needed = 0, uses_anonymous_args = 0
 123:src/lcd.c     ****   lcd_fill_rect ( i+4, j+20, 13, 1, col );
 744              		.loc 1 123 3 view .LVU137
 119:src/lcd.c     ****   //  lcd_fill_rect ( i+5, j+19, 11, 3, col );
 745              		.loc 1 119 37 is_stmt 0 view .LVU138
 746 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 747              		.cfi_def_cfa_offset 24
 748              		.cfi_offset 4, -24
 749              		.cfi_offset 5, -20
 750              		.cfi_offset 6, -16
 751              		.cfi_offset 7, -12
 752              		.cfi_offset 8, -8
 753              		.cfi_offset 14, -4
 754 0004 82B0     		sub	sp, sp, #8
 755              		.cfi_def_cfa_offset 32
 123:src/lcd.c     ****   lcd_fill_rect ( i+4, j+20, 13, 1, col );
 756              		.loc 1 123 20 view .LVU139
 757 0006 00F10508 		add	r8, r0, #5
 123:src/lcd.c     ****   lcd_fill_rect ( i+4, j+20, 13, 1, col );
 758              		.loc 1 123 3 view .LVU140
 759 000a 0D4F     		ldr	r7, .L42
 760 000c 0092     		str	r2, [sp]
 119:src/lcd.c     ****   //  lcd_fill_rect ( i+5, j+19, 11, 3, col );
 761              		.loc 1 119 37 view .LVU141
 762 000e 0C46     		mov	r4, r1
 763 0010 1546     		mov	r5, r2
 764 0012 0646     		mov	r6, r0
 123:src/lcd.c     ****   lcd_fill_rect ( i+4, j+20, 13, 1, col );
 765              		.loc 1 123 3 view .LVU142
ARM GAS  /tmp/ccb1Ng7p.s 			page 26


 766 0014 1531     		adds	r1, r1, #21
 767              	.LVL67:
 123:src/lcd.c     ****   lcd_fill_rect ( i+4, j+20, 13, 1, col );
 768              		.loc 1 123 3 view .LVU143
 769 0016 4046     		mov	r0, r8
 770              	.LVL68:
 123:src/lcd.c     ****   lcd_fill_rect ( i+4, j+20, 13, 1, col );
 771              		.loc 1 123 3 view .LVU144
 772 0018 0123     		movs	r3, #1
 773 001a 0B22     		movs	r2, #11
 774              	.LVL69:
 123:src/lcd.c     ****   lcd_fill_rect ( i+4, j+20, 13, 1, col );
 775              		.loc 1 123 3 view .LVU145
 776 001c B847     		blx	r7
 777              	.LVL70:
 124:src/lcd.c     ****   lcd_fill_rect ( i+5, j+19, 11, 1, col );
 778              		.loc 1 124 3 is_stmt 1 view .LVU146
 779 001e 301D     		adds	r0, r6, #4
 780 0020 04F11401 		add	r1, r4, #20
 781 0024 0095     		str	r5, [sp]
 782 0026 0123     		movs	r3, #1
 783 0028 0D22     		movs	r2, #13
 784 002a B847     		blx	r7
 785              	.LVL71:
 125:src/lcd.c     **** }
 786              		.loc 1 125 3 view .LVU147
 787 002c 4046     		mov	r0, r8
 788 002e 0095     		str	r5, [sp]
 789 0030 04F11301 		add	r1, r4, #19
 790 0034 0123     		movs	r3, #1
 791 0036 0B22     		movs	r2, #11
 792 0038 B847     		blx	r7
 793              	.LVL72:
 126:src/lcd.c     **** void bottom (int i, int j, int col) {
 794              		.loc 1 126 1 is_stmt 0 view .LVU148
 795 003a 02B0     		add	sp, sp, #8
 796              		.cfi_def_cfa_offset 24
 797              		@ sp needed
 798 003c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 799              	.LVL73:
 800              	.L43:
 126:src/lcd.c     **** void bottom (int i, int j, int col) {
 801              		.loc 1 126 1 view .LVU149
 802              		.align	2
 803              	.L42:
 804 0040 3D020008 		.word	134218301
 805              		.cfi_endproc
 806              	.LFE13:
 808              		.section	.text.bottom,"ax",%progbits
 809              		.align	1
 810              		.p2align 2,,3
 811              		.global	bottom
 812              		.syntax unified
 813              		.thumb
 814              		.thumb_func
 815              		.fpu fpv4-sp-d16
 817              	bottom:
ARM GAS  /tmp/ccb1Ng7p.s 			page 27


 818              	.LVL74:
 819              	.LFB14:
 127:src/lcd.c     ****   lcd_fill_rect ( i+2, j+40, 14, 1, col );
 820              		.loc 1 127 37 is_stmt 1 view -0
 821              		.cfi_startproc
 822              		@ args = 0, pretend = 0, frame = 0
 823              		@ frame_needed = 0, uses_anonymous_args = 0
 128:src/lcd.c     ****   lcd_fill_rect ( i+1, j+39, 16, 1, col );
 824              		.loc 1 128 3 view .LVU151
 127:src/lcd.c     ****   lcd_fill_rect ( i+2, j+40, 14, 1, col );
 825              		.loc 1 127 37 is_stmt 0 view .LVU152
 826 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 827              		.cfi_def_cfa_offset 20
 828              		.cfi_offset 4, -20
 829              		.cfi_offset 5, -16
 830              		.cfi_offset 6, -12
 831              		.cfi_offset 7, -8
 832              		.cfi_offset 14, -4
 833 0002 83B0     		sub	sp, sp, #12
 834              		.cfi_def_cfa_offset 32
 128:src/lcd.c     ****   lcd_fill_rect ( i+1, j+39, 16, 1, col );
 835              		.loc 1 128 3 view .LVU153
 836 0004 104F     		ldr	r7, .L46
 837 0006 0092     		str	r2, [sp]
 127:src/lcd.c     ****   lcd_fill_rect ( i+2, j+40, 14, 1, col );
 838              		.loc 1 127 37 view .LVU154
 839 0008 0446     		mov	r4, r0
 840 000a 0D46     		mov	r5, r1
 841 000c 1646     		mov	r6, r2
 128:src/lcd.c     ****   lcd_fill_rect ( i+1, j+39, 16, 1, col );
 842              		.loc 1 128 3 view .LVU155
 843 000e 2831     		adds	r1, r1, #40
 844              	.LVL75:
 128:src/lcd.c     ****   lcd_fill_rect ( i+1, j+39, 16, 1, col );
 845              		.loc 1 128 3 view .LVU156
 846 0010 0230     		adds	r0, r0, #2
 847              	.LVL76:
 128:src/lcd.c     ****   lcd_fill_rect ( i+1, j+39, 16, 1, col );
 848              		.loc 1 128 3 view .LVU157
 849 0012 0123     		movs	r3, #1
 850 0014 0E22     		movs	r2, #14
 851              	.LVL77:
 128:src/lcd.c     ****   lcd_fill_rect ( i+1, j+39, 16, 1, col );
 852              		.loc 1 128 3 view .LVU158
 853 0016 B847     		blx	r7
 854              	.LVL78:
 129:src/lcd.c     ****   lcd_fill_rect ( i+3, j+38, 12, 1, col );
 855              		.loc 1 129 3 is_stmt 1 view .LVU159
 856 0018 05F12701 		add	r1, r5, #39
 857 001c 601C     		adds	r0, r4, #1
 858 001e 0096     		str	r6, [sp]
 859 0020 0123     		movs	r3, #1
 860 0022 1022     		movs	r2, #16
 861 0024 B847     		blx	r7
 862              	.LVL79:
 130:src/lcd.c     ****   lcd_fill_rect ( i+4, j+37, 10, 1, col );
 863              		.loc 1 130 3 view .LVU160
ARM GAS  /tmp/ccb1Ng7p.s 			page 28


 864 0026 05F12601 		add	r1, r5, #38
 865 002a E01C     		adds	r0, r4, #3
 866 002c 0096     		str	r6, [sp]
 867 002e 0123     		movs	r3, #1
 868 0030 0C22     		movs	r2, #12
 869 0032 B847     		blx	r7
 870              	.LVL80:
 131:src/lcd.c     **** }
 871              		.loc 1 131 3 view .LVU161
 872 0034 0096     		str	r6, [sp]
 873 0036 05F12501 		add	r1, r5, #37
 874 003a 201D     		adds	r0, r4, #4
 875 003c 0123     		movs	r3, #1
 876 003e 0A22     		movs	r2, #10
 877 0040 B847     		blx	r7
 878              	.LVL81:
 132:src/lcd.c     **** void decimal (int i, int j, int col) {
 879              		.loc 1 132 1 is_stmt 0 view .LVU162
 880 0042 03B0     		add	sp, sp, #12
 881              		.cfi_def_cfa_offset 20
 882              		@ sp needed
 883 0044 F0BD     		pop	{r4, r5, r6, r7, pc}
 884              	.LVL82:
 885              	.L47:
 132:src/lcd.c     **** void decimal (int i, int j, int col) {
 886              		.loc 1 132 1 view .LVU163
 887 0046 00BF     		.align	2
 888              	.L46:
 889 0048 3D020008 		.word	134218301
 890              		.cfi_endproc
 891              	.LFE14:
 893              		.section	.text.decimal,"ax",%progbits
 894              		.align	1
 895              		.p2align 2,,3
 896              		.global	decimal
 897              		.syntax unified
 898              		.thumb
 899              		.thumb_func
 900              		.fpu fpv4-sp-d16
 902              	decimal:
 903              	.LVL83:
 904              	.LFB15:
 133:src/lcd.c     ****   lcd_fill_rect (i+19, j+40, 5, 5, col);
 905              		.loc 1 133 38 is_stmt 1 view -0
 906              		.cfi_startproc
 907              		@ args = 0, pretend = 0, frame = 0
 908              		@ frame_needed = 0, uses_anonymous_args = 0
 134:src/lcd.c     **** }
 909              		.loc 1 134 3 view .LVU165
 133:src/lcd.c     ****   lcd_fill_rect (i+19, j+40, 5, 5, col);
 910              		.loc 1 133 38 is_stmt 0 view .LVU166
 911 0000 10B5     		push	{r4, lr}
 912              		.cfi_def_cfa_offset 8
 913              		.cfi_offset 4, -8
 914              		.cfi_offset 14, -4
 915 0002 82B0     		sub	sp, sp, #8
 916              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccb1Ng7p.s 			page 29


 134:src/lcd.c     **** }
 917              		.loc 1 134 3 view .LVU167
 918 0004 0523     		movs	r3, #5
 919 0006 0092     		str	r2, [sp]
 920 0008 034C     		ldr	r4, .L50
 921 000a 1330     		adds	r0, r0, #19
 922              	.LVL84:
 134:src/lcd.c     **** }
 923              		.loc 1 134 3 view .LVU168
 924 000c 2831     		adds	r1, r1, #40
 925              	.LVL85:
 134:src/lcd.c     **** }
 926              		.loc 1 134 3 view .LVU169
 927 000e 1A46     		mov	r2, r3
 928              	.LVL86:
 134:src/lcd.c     **** }
 929              		.loc 1 134 3 view .LVU170
 930 0010 A047     		blx	r4
 931              	.LVL87:
 135:src/lcd.c     **** void comma (int i, int j, int col) {
 932              		.loc 1 135 1 view .LVU171
 933 0012 02B0     		add	sp, sp, #8
 934              		.cfi_def_cfa_offset 8
 935              		@ sp needed
 936 0014 10BD     		pop	{r4, pc}
 937              	.L51:
 938 0016 00BF     		.align	2
 939              	.L50:
 940 0018 3D020008 		.word	134218301
 941              		.cfi_endproc
 942              	.LFE15:
 944              		.section	.text.comma,"ax",%progbits
 945              		.align	1
 946              		.p2align 2,,3
 947              		.global	comma
 948              		.syntax unified
 949              		.thumb
 950              		.thumb_func
 951              		.fpu fpv4-sp-d16
 953              	comma:
 954              	.LVL88:
 955              	.LFB16:
 136:src/lcd.c     ****   lcd_fill_rect (i+21, j+45, 3, 3, col);
 956              		.loc 1 136 36 is_stmt 1 view -0
 957              		.cfi_startproc
 958              		@ args = 0, pretend = 0, frame = 0
 959              		@ frame_needed = 0, uses_anonymous_args = 0
 137:src/lcd.c     ****   lcd_fill_rect (i+19, j+48, 3, 3, col);
 960              		.loc 1 137 3 view .LVU173
 136:src/lcd.c     ****   lcd_fill_rect (i+21, j+45, 3, 3, col);
 961              		.loc 1 136 36 is_stmt 0 view .LVU174
 962 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 963              		.cfi_def_cfa_offset 20
 964              		.cfi_offset 4, -20
 965              		.cfi_offset 5, -16
 966              		.cfi_offset 6, -12
 967              		.cfi_offset 7, -8
ARM GAS  /tmp/ccb1Ng7p.s 			page 30


 968              		.cfi_offset 14, -4
 969 0002 83B0     		sub	sp, sp, #12
 970              		.cfi_def_cfa_offset 32
 137:src/lcd.c     ****   lcd_fill_rect (i+19, j+48, 3, 3, col);
 971              		.loc 1 137 3 view .LVU175
 972 0004 0323     		movs	r3, #3
 973 0006 094F     		ldr	r7, .L54
 974 0008 0092     		str	r2, [sp]
 136:src/lcd.c     ****   lcd_fill_rect (i+21, j+45, 3, 3, col);
 975              		.loc 1 136 36 view .LVU176
 976 000a 0446     		mov	r4, r0
 977 000c 0D46     		mov	r5, r1
 978 000e 1646     		mov	r6, r2
 137:src/lcd.c     ****   lcd_fill_rect (i+19, j+48, 3, 3, col);
 979              		.loc 1 137 3 view .LVU177
 980 0010 2D31     		adds	r1, r1, #45
 981              	.LVL89:
 137:src/lcd.c     ****   lcd_fill_rect (i+19, j+48, 3, 3, col);
 982              		.loc 1 137 3 view .LVU178
 983 0012 1A46     		mov	r2, r3
 984              	.LVL90:
 137:src/lcd.c     ****   lcd_fill_rect (i+19, j+48, 3, 3, col);
 985              		.loc 1 137 3 view .LVU179
 986 0014 1530     		adds	r0, r0, #21
 987              	.LVL91:
 137:src/lcd.c     ****   lcd_fill_rect (i+19, j+48, 3, 3, col);
 988              		.loc 1 137 3 view .LVU180
 989 0016 B847     		blx	r7
 990              	.LVL92:
 138:src/lcd.c     **** }
 991              		.loc 1 138 3 is_stmt 1 view .LVU181
 992 0018 0323     		movs	r3, #3
 993 001a 0096     		str	r6, [sp]
 994 001c 05F13001 		add	r1, r5, #48
 995 0020 04F11300 		add	r0, r4, #19
 996 0024 1A46     		mov	r2, r3
 997 0026 B847     		blx	r7
 998              	.LVL93:
 139:src/lcd.c     **** 
 999              		.loc 1 139 1 is_stmt 0 view .LVU182
 1000 0028 03B0     		add	sp, sp, #12
 1001              		.cfi_def_cfa_offset 20
 1002              		@ sp needed
 1003 002a F0BD     		pop	{r4, r5, r6, r7, pc}
 1004              	.LVL94:
 1005              	.L55:
 139:src/lcd.c     **** 
 1006              		.loc 1 139 1 view .LVU183
 1007              		.align	2
 1008              	.L54:
 1009 002c 3D020008 		.word	134218301
 1010              		.cfi_endproc
 1011              	.LFE16:
 1013              		.section	.text.exp_left_side,"ax",%progbits
 1014              		.align	1
 1015              		.p2align 2,,3
 1016              		.global	exp_left_side
ARM GAS  /tmp/ccb1Ng7p.s 			page 31


 1017              		.syntax unified
 1018              		.thumb
 1019              		.thumb_func
 1020              		.fpu fpv4-sp-d16
 1022              	exp_left_side:
 1023              	.LVL95:
 1024              	.LFB17:
 141:src/lcd.c     ****   lcd_fill_rect (i, j+6, 1, 6, col );
 1025              		.loc 1 141 44 is_stmt 1 view -0
 1026              		.cfi_startproc
 1027              		@ args = 0, pretend = 0, frame = 0
 1028              		@ frame_needed = 0, uses_anonymous_args = 0
 142:src/lcd.c     ****   lcd_fill_rect (i+1, j, 1, 11, col );
 1029              		.loc 1 142 3 view .LVU185
 141:src/lcd.c     ****   lcd_fill_rect (i, j+6, 1, 6, col );
 1030              		.loc 1 141 44 is_stmt 0 view .LVU186
 1031 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1032              		.cfi_def_cfa_offset 20
 1033              		.cfi_offset 4, -20
 1034              		.cfi_offset 5, -16
 1035              		.cfi_offset 6, -12
 1036              		.cfi_offset 7, -8
 1037              		.cfi_offset 14, -4
 1038 0002 83B0     		sub	sp, sp, #12
 1039              		.cfi_def_cfa_offset 32
 142:src/lcd.c     ****   lcd_fill_rect (i+1, j, 1, 11, col );
 1040              		.loc 1 142 3 view .LVU187
 1041 0004 0E4F     		ldr	r7, .L58
 1042 0006 0092     		str	r2, [sp]
 141:src/lcd.c     ****   lcd_fill_rect (i, j+6, 1, 6, col );
 1043              		.loc 1 141 44 view .LVU188
 1044 0008 0C46     		mov	r4, r1
 1045 000a 1546     		mov	r5, r2
 1046 000c 0646     		mov	r6, r0
 142:src/lcd.c     ****   lcd_fill_rect (i+1, j, 1, 11, col );
 1047              		.loc 1 142 3 view .LVU189
 1048 000e 0631     		adds	r1, r1, #6
 1049              	.LVL96:
 142:src/lcd.c     ****   lcd_fill_rect (i+1, j, 1, 11, col );
 1050              		.loc 1 142 3 view .LVU190
 1051 0010 0623     		movs	r3, #6
 1052 0012 0122     		movs	r2, #1
 1053              	.LVL97:
 142:src/lcd.c     ****   lcd_fill_rect (i+1, j, 1, 11, col );
 1054              		.loc 1 142 3 view .LVU191
 1055 0014 B847     		blx	r7
 1056              	.LVL98:
 143:src/lcd.c     ****   lcd_fill_rect (i+2, j+1, 1, 9, col );
 1057              		.loc 1 143 3 is_stmt 1 view .LVU192
 1058 0016 2146     		mov	r1, r4
 1059 0018 701C     		adds	r0, r6, #1
 1060 001a 0095     		str	r5, [sp]
 1061 001c 0B23     		movs	r3, #11
 1062 001e 0122     		movs	r2, #1
 1063 0020 B847     		blx	r7
 1064              	.LVL99:
 144:src/lcd.c     ****   lcd_fill_rect (i+3, j+2, 1, 4, col );
ARM GAS  /tmp/ccb1Ng7p.s 			page 32


 1065              		.loc 1 144 3 view .LVU193
 1066 0022 611C     		adds	r1, r4, #1
 1067 0024 B01C     		adds	r0, r6, #2
 1068 0026 0095     		str	r5, [sp]
 1069 0028 0923     		movs	r3, #9
 1070 002a 0122     		movs	r2, #1
 1071 002c B847     		blx	r7
 1072              	.LVL100:
 145:src/lcd.c     **** }
 1073              		.loc 1 145 3 view .LVU194
 1074 002e 0095     		str	r5, [sp]
 1075 0030 A11C     		adds	r1, r4, #2
 1076 0032 F01C     		adds	r0, r6, #3
 1077 0034 0423     		movs	r3, #4
 1078 0036 0122     		movs	r2, #1
 1079 0038 B847     		blx	r7
 1080              	.LVL101:
 146:src/lcd.c     **** void exp_left_side_top (int i, int j, int col) {
 1081              		.loc 1 146 1 is_stmt 0 view .LVU195
 1082 003a 03B0     		add	sp, sp, #12
 1083              		.cfi_def_cfa_offset 20
 1084              		@ sp needed
 1085 003c F0BD     		pop	{r4, r5, r6, r7, pc}
 1086              	.LVL102:
 1087              	.L59:
 146:src/lcd.c     **** void exp_left_side_top (int i, int j, int col) {
 1088              		.loc 1 146 1 view .LVU196
 1089 003e 00BF     		.align	2
 1090              	.L58:
 1091 0040 3D020008 		.word	134218301
 1092              		.cfi_endproc
 1093              	.LFE17:
 1095              		.section	.text.exp_left_side_top,"ax",%progbits
 1096              		.align	1
 1097              		.p2align 2,,3
 1098              		.global	exp_left_side_top
 1099              		.syntax unified
 1100              		.thumb
 1101              		.thumb_func
 1102              		.fpu fpv4-sp-d16
 1104              	exp_left_side_top:
 1105              	.LVL103:
 1106              	.LFB18:
 147:src/lcd.c     ****   exp_left_side(i+1, j, col);
 1107              		.loc 1 147 48 is_stmt 1 view -0
 1108              		.cfi_startproc
 1109              		@ args = 0, pretend = 0, frame = 0
 1110              		@ frame_needed = 0, uses_anonymous_args = 0
 1111              		@ link register save eliminated.
 148:src/lcd.c     **** }
 1112              		.loc 1 148 3 view .LVU198
 1113 0000 0130     		adds	r0, r0, #1
 1114              	.LVL104:
 148:src/lcd.c     **** }
 1115              		.loc 1 148 3 is_stmt 0 view .LVU199
 1116 0002 FFF7FEBF 		b	exp_left_side
 1117              	.LVL105:
ARM GAS  /tmp/ccb1Ng7p.s 			page 33


 148:src/lcd.c     **** }
 1118              		.loc 1 148 3 view .LVU200
 1119              		.cfi_endproc
 1120              	.LFE18:
 1122 0006 00BF     		.section	.text.exp_left_side_bottom,"ax",%progbits
 1123              		.align	1
 1124              		.p2align 2,,3
 1125              		.global	exp_left_side_bottom
 1126              		.syntax unified
 1127              		.thumb
 1128              		.thumb_func
 1129              		.fpu fpv4-sp-d16
 1131              	exp_left_side_bottom:
 1132              	.LVL106:
 1133              	.LFB19:
 150:src/lcd.c     ****   exp_left_side(i, j+11, col);
 1134              		.loc 1 150 51 is_stmt 1 view -0
 1135              		.cfi_startproc
 1136              		@ args = 0, pretend = 0, frame = 0
 1137              		@ frame_needed = 0, uses_anonymous_args = 0
 1138              		@ link register save eliminated.
 151:src/lcd.c     **** }
 1139              		.loc 1 151 3 view .LVU202
 1140 0000 0B31     		adds	r1, r1, #11
 1141              	.LVL107:
 151:src/lcd.c     **** }
 1142              		.loc 1 151 3 is_stmt 0 view .LVU203
 1143 0002 FFF7FEBF 		b	exp_left_side
 1144              	.LVL108:
 151:src/lcd.c     **** }
 1145              		.loc 1 151 3 view .LVU204
 1146              		.cfi_endproc
 1147              	.LFE19:
 1149 0006 00BF     		.section	.text.exp_right_side,"ax",%progbits
 1150              		.align	1
 1151              		.p2align 2,,3
 1152              		.global	exp_right_side
 1153              		.syntax unified
 1154              		.thumb
 1155              		.thumb_func
 1156              		.fpu fpv4-sp-d16
 1158              	exp_right_side:
 1159              	.LVL109:
 1160              	.LFB20:
 153:src/lcd.c     ****   lcd_fill_rect (i+12, j, 1, 6, col );
 1161              		.loc 1 153 45 is_stmt 1 view -0
 1162              		.cfi_startproc
 1163              		@ args = 0, pretend = 0, frame = 0
 1164              		@ frame_needed = 0, uses_anonymous_args = 0
 154:src/lcd.c     ****   lcd_fill_rect (i+11, j+1, 1, 11, col );
 1165              		.loc 1 154 3 view .LVU206
 153:src/lcd.c     ****   lcd_fill_rect (i+12, j, 1, 6, col );
 1166              		.loc 1 153 45 is_stmt 0 view .LVU207
 1167 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1168              		.cfi_def_cfa_offset 20
 1169              		.cfi_offset 4, -20
 1170              		.cfi_offset 5, -16
ARM GAS  /tmp/ccb1Ng7p.s 			page 34


 1171              		.cfi_offset 6, -12
 1172              		.cfi_offset 7, -8
 1173              		.cfi_offset 14, -4
 1174 0002 83B0     		sub	sp, sp, #12
 1175              		.cfi_def_cfa_offset 32
 154:src/lcd.c     ****   lcd_fill_rect (i+11, j+1, 1, 11, col );
 1176              		.loc 1 154 3 view .LVU208
 1177 0004 0F4F     		ldr	r7, .L64
 1178 0006 0092     		str	r2, [sp]
 153:src/lcd.c     ****   lcd_fill_rect (i+12, j, 1, 6, col );
 1179              		.loc 1 153 45 view .LVU209
 1180 0008 0446     		mov	r4, r0
 1181 000a 1546     		mov	r5, r2
 1182 000c 0E46     		mov	r6, r1
 154:src/lcd.c     ****   lcd_fill_rect (i+11, j+1, 1, 11, col );
 1183              		.loc 1 154 3 view .LVU210
 1184 000e 0C30     		adds	r0, r0, #12
 1185              	.LVL110:
 154:src/lcd.c     ****   lcd_fill_rect (i+11, j+1, 1, 11, col );
 1186              		.loc 1 154 3 view .LVU211
 1187 0010 0623     		movs	r3, #6
 1188 0012 0122     		movs	r2, #1
 1189              	.LVL111:
 154:src/lcd.c     ****   lcd_fill_rect (i+11, j+1, 1, 11, col );
 1190              		.loc 1 154 3 view .LVU212
 1191 0014 B847     		blx	r7
 1192              	.LVL112:
 155:src/lcd.c     ****   lcd_fill_rect (i+10, j+2, 1, 9, col );
 1193              		.loc 1 155 3 is_stmt 1 view .LVU213
 1194 0016 711C     		adds	r1, r6, #1
 1195 0018 04F10B00 		add	r0, r4, #11
 1196 001c 0095     		str	r5, [sp]
 1197 001e 0B23     		movs	r3, #11
 1198 0020 0122     		movs	r2, #1
 1199 0022 B847     		blx	r7
 1200              	.LVL113:
 156:src/lcd.c     ****   lcd_fill_rect (i+9, j+6, 1, 4, col );
 1201              		.loc 1 156 3 view .LVU214
 1202 0024 B11C     		adds	r1, r6, #2
 1203 0026 04F10A00 		add	r0, r4, #10
 1204 002a 0095     		str	r5, [sp]
 1205 002c 0923     		movs	r3, #9
 1206 002e 0122     		movs	r2, #1
 1207 0030 B847     		blx	r7
 1208              	.LVL114:
 157:src/lcd.c     **** }
 1209              		.loc 1 157 3 view .LVU215
 1210 0032 0095     		str	r5, [sp]
 1211 0034 B11D     		adds	r1, r6, #6
 1212 0036 04F10900 		add	r0, r4, #9
 1213 003a 0423     		movs	r3, #4
 1214 003c 0122     		movs	r2, #1
 1215 003e B847     		blx	r7
 1216              	.LVL115:
 158:src/lcd.c     **** void exp_right_side_top (int i, int j, int col) {
 1217              		.loc 1 158 1 is_stmt 0 view .LVU216
 1218 0040 03B0     		add	sp, sp, #12
ARM GAS  /tmp/ccb1Ng7p.s 			page 35


 1219              		.cfi_def_cfa_offset 20
 1220              		@ sp needed
 1221 0042 F0BD     		pop	{r4, r5, r6, r7, pc}
 1222              	.LVL116:
 1223              	.L65:
 158:src/lcd.c     **** void exp_right_side_top (int i, int j, int col) {
 1224              		.loc 1 158 1 view .LVU217
 1225              		.align	2
 1226              	.L64:
 1227 0044 3D020008 		.word	134218301
 1228              		.cfi_endproc
 1229              	.LFE20:
 1231              		.section	.text.exp_right_side_top,"ax",%progbits
 1232              		.align	1
 1233              		.p2align 2,,3
 1234              		.global	exp_right_side_top
 1235              		.syntax unified
 1236              		.thumb
 1237              		.thumb_func
 1238              		.fpu fpv4-sp-d16
 1240              	exp_right_side_top:
 1241              	.LVL117:
 1242              	.LFB21:
 159:src/lcd.c     ****   exp_right_side(i, j, col);
 1243              		.loc 1 159 49 is_stmt 1 view -0
 1244              		.cfi_startproc
 1245              		@ args = 0, pretend = 0, frame = 0
 1246              		@ frame_needed = 0, uses_anonymous_args = 0
 1247              		@ link register save eliminated.
 160:src/lcd.c     **** }
 1248              		.loc 1 160 3 view .LVU219
 1249 0000 FFF7FEBF 		b	exp_right_side
 1250              	.LVL118:
 160:src/lcd.c     **** }
 1251              		.loc 1 160 3 is_stmt 0 view .LVU220
 1252              		.cfi_endproc
 1253              	.LFE21:
 1255              		.section	.text.exp_right_side_bottom,"ax",%progbits
 1256              		.align	1
 1257              		.p2align 2,,3
 1258              		.global	exp_right_side_bottom
 1259              		.syntax unified
 1260              		.thumb
 1261              		.thumb_func
 1262              		.fpu fpv4-sp-d16
 1264              	exp_right_side_bottom:
 1265              	.LVL119:
 1266              	.LFB22:
 162:src/lcd.c     ****   exp_right_side(i-1, j+11, col);
 1267              		.loc 1 162 52 is_stmt 1 view -0
 1268              		.cfi_startproc
 1269              		@ args = 0, pretend = 0, frame = 0
 1270              		@ frame_needed = 0, uses_anonymous_args = 0
 1271              		@ link register save eliminated.
 163:src/lcd.c     **** }
 1272              		.loc 1 163 3 view .LVU222
 1273 0000 0138     		subs	r0, r0, #1
ARM GAS  /tmp/ccb1Ng7p.s 			page 36


 1274              	.LVL120:
 163:src/lcd.c     **** }
 1275              		.loc 1 163 3 is_stmt 0 view .LVU223
 1276 0002 0B31     		adds	r1, r1, #11
 1277              	.LVL121:
 163:src/lcd.c     **** }
 1278              		.loc 1 163 3 view .LVU224
 1279 0004 FFF7FEBF 		b	exp_right_side
 1280              	.LVL122:
 163:src/lcd.c     **** }
 1281              		.loc 1 163 3 view .LVU225
 1282              		.cfi_endproc
 1283              	.LFE22:
 1285              		.section	.text.exp_top,"ax",%progbits
 1286              		.align	1
 1287              		.p2align 2,,3
 1288              		.global	exp_top
 1289              		.syntax unified
 1290              		.thumb
 1291              		.thumb_func
 1292              		.fpu fpv4-sp-d16
 1294              	exp_top:
 1295              	.LVL123:
 1296              	.LFB23:
 165:src/lcd.c     ****   lcd_fill_rect (i+4, j, 7, 1, col );
 1297              		.loc 1 165 38 is_stmt 1 view -0
 1298              		.cfi_startproc
 1299              		@ args = 0, pretend = 0, frame = 0
 1300              		@ frame_needed = 0, uses_anonymous_args = 0
 166:src/lcd.c     ****   lcd_fill_rect (i+5, j+1, 5, 1, col );
 1301              		.loc 1 166 3 view .LVU227
 165:src/lcd.c     ****   lcd_fill_rect (i+4, j, 7, 1, col );
 1302              		.loc 1 165 38 is_stmt 0 view .LVU228
 1303 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1304              		.cfi_def_cfa_offset 20
 1305              		.cfi_offset 4, -20
 1306              		.cfi_offset 5, -16
 1307              		.cfi_offset 6, -12
 1308              		.cfi_offset 7, -8
 1309              		.cfi_offset 14, -4
 1310 0002 83B0     		sub	sp, sp, #12
 1311              		.cfi_def_cfa_offset 32
 166:src/lcd.c     ****   lcd_fill_rect (i+5, j+1, 5, 1, col );
 1312              		.loc 1 166 3 view .LVU229
 1313 0004 0B4F     		ldr	r7, .L70
 1314 0006 0092     		str	r2, [sp]
 165:src/lcd.c     ****   lcd_fill_rect (i+4, j, 7, 1, col );
 1315              		.loc 1 165 38 view .LVU230
 1316 0008 0446     		mov	r4, r0
 1317 000a 1546     		mov	r5, r2
 1318 000c 0E46     		mov	r6, r1
 166:src/lcd.c     ****   lcd_fill_rect (i+5, j+1, 5, 1, col );
 1319              		.loc 1 166 3 view .LVU231
 1320 000e 0430     		adds	r0, r0, #4
 1321              	.LVL124:
 166:src/lcd.c     ****   lcd_fill_rect (i+5, j+1, 5, 1, col );
 1322              		.loc 1 166 3 view .LVU232
ARM GAS  /tmp/ccb1Ng7p.s 			page 37


 1323 0010 0123     		movs	r3, #1
 1324 0012 0722     		movs	r2, #7
 1325              	.LVL125:
 166:src/lcd.c     ****   lcd_fill_rect (i+5, j+1, 5, 1, col );
 1326              		.loc 1 166 3 view .LVU233
 1327 0014 B847     		blx	r7
 1328              	.LVL126:
 167:src/lcd.c     ****   lcd_fill_rect (i+6, j+2, 3, 1, col );
 1329              		.loc 1 167 3 is_stmt 1 view .LVU234
 1330 0016 711C     		adds	r1, r6, #1
 1331 0018 601D     		adds	r0, r4, #5
 1332 001a 0095     		str	r5, [sp]
 1333 001c 0123     		movs	r3, #1
 1334 001e 0522     		movs	r2, #5
 1335 0020 B847     		blx	r7
 1336              	.LVL127:
 168:src/lcd.c     **** }
 1337              		.loc 1 168 3 view .LVU235
 1338 0022 0095     		str	r5, [sp]
 1339 0024 B11C     		adds	r1, r6, #2
 1340 0026 A01D     		adds	r0, r4, #6
 1341 0028 0123     		movs	r3, #1
 1342 002a 0322     		movs	r2, #3
 1343 002c B847     		blx	r7
 1344              	.LVL128:
 169:src/lcd.c     **** void exp_bottom (int i, int j, int col) {
 1345              		.loc 1 169 1 is_stmt 0 view .LVU236
 1346 002e 03B0     		add	sp, sp, #12
 1347              		.cfi_def_cfa_offset 20
 1348              		@ sp needed
 1349 0030 F0BD     		pop	{r4, r5, r6, r7, pc}
 1350              	.LVL129:
 1351              	.L71:
 169:src/lcd.c     **** void exp_bottom (int i, int j, int col) {
 1352              		.loc 1 169 1 view .LVU237
 1353 0032 00BF     		.align	2
 1354              	.L70:
 1355 0034 3D020008 		.word	134218301
 1356              		.cfi_endproc
 1357              	.LFE23:
 1359              		.section	.text.exp_bottom,"ax",%progbits
 1360              		.align	1
 1361              		.p2align 2,,3
 1362              		.global	exp_bottom
 1363              		.syntax unified
 1364              		.thumb
 1365              		.thumb_func
 1366              		.fpu fpv4-sp-d16
 1368              	exp_bottom:
 1369              	.LVL130:
 1370              	.LFB24:
 170:src/lcd.c     ****   lcd_fill_rect (i+2, j+22, 7, 1, col );
 1371              		.loc 1 170 41 is_stmt 1 view -0
 1372              		.cfi_startproc
 1373              		@ args = 0, pretend = 0, frame = 0
 1374              		@ frame_needed = 0, uses_anonymous_args = 0
 171:src/lcd.c     ****   lcd_fill_rect (i+3, j+21, 5, 1, col );
ARM GAS  /tmp/ccb1Ng7p.s 			page 38


 1375              		.loc 1 171 3 view .LVU239
 170:src/lcd.c     ****   lcd_fill_rect (i+2, j+22, 7, 1, col );
 1376              		.loc 1 170 41 is_stmt 0 view .LVU240
 1377 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1378              		.cfi_def_cfa_offset 20
 1379              		.cfi_offset 4, -20
 1380              		.cfi_offset 5, -16
 1381              		.cfi_offset 6, -12
 1382              		.cfi_offset 7, -8
 1383              		.cfi_offset 14, -4
 1384 0002 83B0     		sub	sp, sp, #12
 1385              		.cfi_def_cfa_offset 32
 171:src/lcd.c     ****   lcd_fill_rect (i+3, j+21, 5, 1, col );
 1386              		.loc 1 171 3 view .LVU241
 1387 0004 0C4F     		ldr	r7, .L74
 1388 0006 0092     		str	r2, [sp]
 170:src/lcd.c     ****   lcd_fill_rect (i+2, j+22, 7, 1, col );
 1389              		.loc 1 170 41 view .LVU242
 1390 0008 0446     		mov	r4, r0
 1391 000a 0D46     		mov	r5, r1
 1392 000c 1646     		mov	r6, r2
 171:src/lcd.c     ****   lcd_fill_rect (i+3, j+21, 5, 1, col );
 1393              		.loc 1 171 3 view .LVU243
 1394 000e 1631     		adds	r1, r1, #22
 1395              	.LVL131:
 171:src/lcd.c     ****   lcd_fill_rect (i+3, j+21, 5, 1, col );
 1396              		.loc 1 171 3 view .LVU244
 1397 0010 0230     		adds	r0, r0, #2
 1398              	.LVL132:
 171:src/lcd.c     ****   lcd_fill_rect (i+3, j+21, 5, 1, col );
 1399              		.loc 1 171 3 view .LVU245
 1400 0012 0123     		movs	r3, #1
 1401 0014 0722     		movs	r2, #7
 1402              	.LVL133:
 171:src/lcd.c     ****   lcd_fill_rect (i+3, j+21, 5, 1, col );
 1403              		.loc 1 171 3 view .LVU246
 1404 0016 B847     		blx	r7
 1405              	.LVL134:
 172:src/lcd.c     ****   lcd_fill_rect (i+4, j+20, 3, 1, col );
 1406              		.loc 1 172 3 is_stmt 1 view .LVU247
 1407 0018 05F11501 		add	r1, r5, #21
 1408 001c E01C     		adds	r0, r4, #3
 1409 001e 0096     		str	r6, [sp]
 1410 0020 0123     		movs	r3, #1
 1411 0022 0522     		movs	r2, #5
 1412 0024 B847     		blx	r7
 1413              	.LVL135:
 173:src/lcd.c     **** }
 1414              		.loc 1 173 3 view .LVU248
 1415 0026 0096     		str	r6, [sp]
 1416 0028 05F11401 		add	r1, r5, #20
 1417 002c 201D     		adds	r0, r4, #4
 1418 002e 0123     		movs	r3, #1
 1419 0030 0322     		movs	r2, #3
 1420 0032 B847     		blx	r7
 1421              	.LVL136:
 174:src/lcd.c     **** void exp_middle (int i, int j, int col) {
ARM GAS  /tmp/ccb1Ng7p.s 			page 39


 1422              		.loc 1 174 1 is_stmt 0 view .LVU249
 1423 0034 03B0     		add	sp, sp, #12
 1424              		.cfi_def_cfa_offset 20
 1425              		@ sp needed
 1426 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 1427              	.LVL137:
 1428              	.L75:
 174:src/lcd.c     **** void exp_middle (int i, int j, int col) {
 1429              		.loc 1 174 1 view .LVU250
 1430              		.align	2
 1431              	.L74:
 1432 0038 3D020008 		.word	134218301
 1433              		.cfi_endproc
 1434              	.LFE24:
 1436              		.section	.text.exp_middle,"ax",%progbits
 1437              		.align	1
 1438              		.p2align 2,,3
 1439              		.global	exp_middle
 1440              		.syntax unified
 1441              		.thumb
 1442              		.thumb_func
 1443              		.fpu fpv4-sp-d16
 1445              	exp_middle:
 1446              	.LVL138:
 1447              	.LFB25:
 175:src/lcd.c     ****   lcd_fill_rect (i+4, j+10, 5, 1, col );
 1448              		.loc 1 175 41 is_stmt 1 view -0
 1449              		.cfi_startproc
 1450              		@ args = 0, pretend = 0, frame = 0
 1451              		@ frame_needed = 0, uses_anonymous_args = 0
 176:src/lcd.c     ****   lcd_fill_rect (i+3, j+11, 7, 1, col );
 1452              		.loc 1 176 3 view .LVU252
 175:src/lcd.c     ****   lcd_fill_rect (i+4, j+10, 5, 1, col );
 1453              		.loc 1 175 41 is_stmt 0 view .LVU253
 1454 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1455              		.cfi_def_cfa_offset 24
 1456              		.cfi_offset 4, -24
 1457              		.cfi_offset 5, -20
 1458              		.cfi_offset 6, -16
 1459              		.cfi_offset 7, -12
 1460              		.cfi_offset 8, -8
 1461              		.cfi_offset 14, -4
 1462 0004 82B0     		sub	sp, sp, #8
 1463              		.cfi_def_cfa_offset 32
 176:src/lcd.c     ****   lcd_fill_rect (i+3, j+11, 7, 1, col );
 1464              		.loc 1 176 19 view .LVU254
 1465 0006 00F10408 		add	r8, r0, #4
 176:src/lcd.c     ****   lcd_fill_rect (i+3, j+11, 7, 1, col );
 1466              		.loc 1 176 3 view .LVU255
 1467 000a 0D4F     		ldr	r7, .L78
 1468 000c 0092     		str	r2, [sp]
 175:src/lcd.c     ****   lcd_fill_rect (i+4, j+10, 5, 1, col );
 1469              		.loc 1 175 41 view .LVU256
 1470 000e 0C46     		mov	r4, r1
 1471 0010 1546     		mov	r5, r2
 1472 0012 0646     		mov	r6, r0
 176:src/lcd.c     ****   lcd_fill_rect (i+3, j+11, 7, 1, col );
ARM GAS  /tmp/ccb1Ng7p.s 			page 40


 1473              		.loc 1 176 3 view .LVU257
 1474 0014 0A31     		adds	r1, r1, #10
 1475              	.LVL139:
 176:src/lcd.c     ****   lcd_fill_rect (i+3, j+11, 7, 1, col );
 1476              		.loc 1 176 3 view .LVU258
 1477 0016 4046     		mov	r0, r8
 1478              	.LVL140:
 176:src/lcd.c     ****   lcd_fill_rect (i+3, j+11, 7, 1, col );
 1479              		.loc 1 176 3 view .LVU259
 1480 0018 0123     		movs	r3, #1
 1481 001a 0522     		movs	r2, #5
 1482              	.LVL141:
 176:src/lcd.c     ****   lcd_fill_rect (i+3, j+11, 7, 1, col );
 1483              		.loc 1 176 3 view .LVU260
 1484 001c B847     		blx	r7
 1485              	.LVL142:
 177:src/lcd.c     ****   lcd_fill_rect (i+4, j+12, 5, 1, col );
 1486              		.loc 1 177 3 is_stmt 1 view .LVU261
 1487 001e F01C     		adds	r0, r6, #3
 1488 0020 04F10B01 		add	r1, r4, #11
 1489 0024 0095     		str	r5, [sp]
 1490 0026 0123     		movs	r3, #1
 1491 0028 0722     		movs	r2, #7
 1492 002a B847     		blx	r7
 1493              	.LVL143:
 178:src/lcd.c     **** }
 1494              		.loc 1 178 3 view .LVU262
 1495 002c 4046     		mov	r0, r8
 1496 002e 0095     		str	r5, [sp]
 1497 0030 04F10C01 		add	r1, r4, #12
 1498 0034 0123     		movs	r3, #1
 1499 0036 0522     		movs	r2, #5
 1500 0038 B847     		blx	r7
 1501              	.LVL144:
 179:src/lcd.c     **** 
 1502              		.loc 1 179 1 is_stmt 0 view .LVU263
 1503 003a 02B0     		add	sp, sp, #8
 1504              		.cfi_def_cfa_offset 24
 1505              		@ sp needed
 1506 003c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1507              	.LVL145:
 1508              	.L79:
 179:src/lcd.c     **** 
 1509              		.loc 1 179 1 view .LVU264
 1510              		.align	2
 1511              	.L78:
 1512 0040 3D020008 		.word	134218301
 1513              		.cfi_endproc
 1514              	.LFE25:
 1516              		.section	.rodata.draw_BEG.str1.4,"aMS",%progbits,1
 1517              		.align	2
 1518              	.LC1:
 1519 0000 533A3800 		.ascii	"S:8\000"
 1520              		.section	.text.draw_BEG,"ax",%progbits
 1521              		.align	1
 1522              		.p2align 2,,3
 1523              		.global	draw_BEG
ARM GAS  /tmp/ccb1Ng7p.s 			page 41


 1524              		.syntax unified
 1525              		.thumb
 1526              		.thumb_func
 1527              		.fpu fpv4-sp-d16
 1529              	draw_BEG:
 1530              	.LVL146:
 1531              	.LFB27:
 540:src/lcd.c     ****   t20->inv = inverse;
 1532              		.loc 1 540 40 is_stmt 1 view -0
 1533              		.cfi_startproc
 1534              		@ args = 0, pretend = 0, frame = 0
 1535              		@ frame_needed = 0, uses_anonymous_args = 0
 540:src/lcd.c     ****   t20->inv = inverse;
 1536              		.loc 1 540 40 is_stmt 0 view .LVU266
 1537 0000 70B5     		push	{r4, r5, r6, lr}
 1538              		.cfi_def_cfa_offset 16
 1539              		.cfi_offset 4, -16
 1540              		.cfi_offset 5, -12
 1541              		.cfi_offset 6, -8
 1542              		.cfi_offset 14, -4
 541:src/lcd.c     ****   lcd_setXY (t20, 285, Y_ANNUNC-50);
 1543              		.loc 1 541 3 view .LVU267
 1544 0002 0B4D     		ldr	r5, .L84
 542:src/lcd.c     ****   if (depth == 4) {
 1545              		.loc 1 542 3 view .LVU268
 1546 0004 0B4E     		ldr	r6, .L84+4
 541:src/lcd.c     ****   lcd_setXY (t20, 285, Y_ANNUNC-50);
 1547              		.loc 1 541 3 view .LVU269
 1548 0006 2B6B     		ldr	r3, [r5, #48]
 540:src/lcd.c     ****   t20->inv = inverse;
 1549              		.loc 1 540 40 view .LVU270
 1550 0008 0446     		mov	r4, r0
 541:src/lcd.c     ****   lcd_setXY (t20, 285, Y_ANNUNC-50);
 1551              		.loc 1 541 3 is_stmt 1 view .LVU271
 541:src/lcd.c     ****   lcd_setXY (t20, 285, Y_ANNUNC-50);
 1552              		.loc 1 541 12 is_stmt 0 view .LVU272
 1553 000a 5974     		strb	r1, [r3, #17]
 542:src/lcd.c     ****   if (depth == 4) {
 1554              		.loc 1 542 3 is_stmt 1 view .LVU273
 1555 000c 1846     		mov	r0, r3
 1556              	.LVL147:
 542:src/lcd.c     ****   if (depth == 4) {
 1557              		.loc 1 542 3 is_stmt 0 view .LVU274
 1558 000e 1922     		movs	r2, #25
 1559 0010 40F21D11 		movw	r1, #285
 1560              	.LVL148:
 542:src/lcd.c     ****   if (depth == 4) {
 1561              		.loc 1 542 3 view .LVU275
 1562 0014 B047     		blx	r6
 1563              	.LVL149:
 543:src/lcd.c     ****     lcd_writeText(t20, "S:4");
 1564              		.loc 1 543 3 is_stmt 1 view .LVU276
 543:src/lcd.c     ****     lcd_writeText(t20, "S:4");
 1565              		.loc 1 543 6 is_stmt 0 view .LVU277
 1566 0016 042C     		cmp	r4, #4
 1567 0018 05D0     		beq	.L83
 545:src/lcd.c     ****   }
ARM GAS  /tmp/ccb1Ng7p.s 			page 42


 546:src/lcd.c     ****   else {
 547:src/lcd.c     ****     lcd_writeText(t20, "S:8");
 1568              		.loc 1 547 5 is_stmt 1 view .LVU278
 1569 001a 286B     		ldr	r0, [r5, #48]
 1570 001c 064B     		ldr	r3, .L84+8
 1571 001e 0749     		ldr	r1, .L84+12
 548:src/lcd.c     ****   }
 549:src/lcd.c     ****   return;
 550:src/lcd.c     **** }
 1572              		.loc 1 550 1 is_stmt 0 view .LVU279
 1573 0020 BDE87040 		pop	{r4, r5, r6, lr}
 1574              		.cfi_remember_state
 1575              		.cfi_restore 14
 1576              		.cfi_restore 6
 1577              		.cfi_restore 5
 1578              		.cfi_restore 4
 1579              		.cfi_def_cfa_offset 0
 1580              	.LVL150:
 547:src/lcd.c     ****   }
 1581              		.loc 1 547 5 view .LVU280
 1582 0024 1847     		bx	r3	@ indirect register sibling call
 1583              	.LVL151:
 1584              	.L83:
 1585              		.cfi_restore_state
 1586              		.loc 1 550 1 view .LVU281
 1587 0026 BDE87040 		pop	{r4, r5, r6, lr}
 1588              		.cfi_restore 14
 1589              		.cfi_restore 6
 1590              		.cfi_restore 5
 1591              		.cfi_restore 4
 1592              		.cfi_def_cfa_offset 0
 1593              	.LVL152:
 1594              		.loc 1 550 1 view .LVU282
 1595 002a FFF7FEBF 		b	draw_BEG.part.0
 1596              	.LVL153:
 1597              	.L85:
 1598 002e 00BF     		.align	2
 1599              	.L84:
 1600 0030 00200010 		.word	268443648
 1601 0034 6D020008 		.word	134218349
 1602 0038 7D020008 		.word	134218365
 1603 003c 00000000 		.word	.LC1
 1604              		.cfi_endproc
 1605              	.LFE27:
 1607              		.section	.rodata.draw_RPN.str1.4,"aMS",%progbits,1
 1608              		.align	2
 1609              	.LC2:
 1610 0000 6552504E 		.ascii	"eRPN\000"
 1610      00
 1611 0005 000000   		.align	2
 1612              	.LC3:
 1613 0008 52504E00 		.ascii	"RPN\000"
 1614              		.section	.text.draw_RPN,"ax",%progbits
 1615              		.align	1
 1616              		.p2align 2,,3
 1617              		.global	draw_RPN
 1618              		.syntax unified
ARM GAS  /tmp/ccb1Ng7p.s 			page 43


 1619              		.thumb
 1620              		.thumb_func
 1621              		.fpu fpv4-sp-d16
 1623              	draw_RPN:
 1624              	.LVL154:
 1625              	.LFB31:
 551:src/lcd.c     **** 
 552:src/lcd.c     **** void finish_display(void) {
 553:src/lcd.c     ****   draw_PRT();
 554:src/lcd.c     ****   finish_7_segment();
 555:src/lcd.c     **** #ifdef TOP_ROW
 556:src/lcd.c     ****   finish_top_row();
 557:src/lcd.c     **** #endif
 558:src/lcd.c     ****   lcd_refresh();
 559:src/lcd.c     **** }
 560:src/lcd.c     **** 
 561:src/lcd.c     **** void finish_7_segment(void) {
 562:src/lcd.c     ****   for (int i = 0; i <= EXP_SIGN; ++i) {
 563:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 564:src/lcd.c     ****   }
 565:src/lcd.c     **** }
 566:src/lcd.c     **** 
 567:src/lcd.c     **** #ifdef TOP_ROW
 568:src/lcd.c     **** void finish_top_row(void) {
 569:src/lcd.c     ****  for (int i = MB_TOP; i < TOP_DOTS; ++i) {
 570:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 571:src/lcd.c     ****   }
 572:src/lcd.c     **** } 
 573:src/lcd.c     **** #endif
 574:src/lcd.c     **** 
 575:src/lcd.c     **** void draw_RPN(int inverse) {
 1626              		.loc 1 575 28 is_stmt 1 view -0
 1627              		.cfi_startproc
 1628              		@ args = 0, pretend = 0, frame = 0
 1629              		@ frame_needed = 0, uses_anonymous_args = 0
 576:src/lcd.c     ****   t20->inv = inverse;
 1630              		.loc 1 576 3 view .LVU284
 575:src/lcd.c     ****   t20->inv = inverse;
 1631              		.loc 1 575 28 is_stmt 0 view .LVU285
 1632 0000 10B5     		push	{r4, lr}
 1633              		.cfi_def_cfa_offset 8
 1634              		.cfi_offset 4, -8
 1635              		.cfi_offset 14, -4
 1636              		.loc 1 576 3 view .LVU286
 1637 0002 104C     		ldr	r4, .L89
 577:src/lcd.c     ****   if (ENTRY_RPN_ENABLED) {
 1638              		.loc 1 577 7 view .LVU287
 1639 0004 104A     		ldr	r2, .L89+4
 576:src/lcd.c     ****   t20->inv = inverse;
 1640              		.loc 1 576 3 view .LVU288
 1641 0006 236B     		ldr	r3, [r4, #48]
 1642              		.loc 1 577 7 view .LVU289
 1643 0008 1268     		ldr	r2, [r2]
 576:src/lcd.c     ****   t20->inv = inverse;
 1644              		.loc 1 576 12 view .LVU290
 1645 000a 5874     		strb	r0, [r3, #17]
 1646              		.loc 1 577 3 is_stmt 1 view .LVU291
ARM GAS  /tmp/ccb1Ng7p.s 			page 44


 1647              		.loc 1 577 7 is_stmt 0 view .LVU292
 1648 000c 92F8AD27 		ldrb	r2, [r2, #1965]	@ zero_extendqisi2
 1649              		.loc 1 577 6 view .LVU293
 1650 0010 12F0020F 		tst	r2, #2
 578:src/lcd.c     ****     lcd_setXY (t20, 355, Y_ANNUNC-30);
 1651              		.loc 1 578 5 view .LVU294
 1652 0014 1846     		mov	r0, r3
 1653              	.LVL155:
 1654              		.loc 1 578 5 view .LVU295
 1655 0016 4FF02D02 		mov	r2, #45
 1656 001a 0C4B     		ldr	r3, .L89+8
 577:src/lcd.c     ****   if (ENTRY_RPN_ENABLED) {
 1657              		.loc 1 577 6 view .LVU296
 1658 001c 08D0     		beq	.L87
 1659              		.loc 1 578 5 is_stmt 1 view .LVU297
 1660 001e 40F26311 		movw	r1, #355
 1661 0022 9847     		blx	r3
 1662              	.LVL156:
 579:src/lcd.c     ****     lcd_writeText(t20, "eRPN");
 1663              		.loc 1 579 5 view .LVU298
 1664 0024 206B     		ldr	r0, [r4, #48]
 1665 0026 0A4B     		ldr	r3, .L89+12
 1666 0028 0A49     		ldr	r1, .L89+16
 580:src/lcd.c     ****   }
 581:src/lcd.c     ****   else {
 582:src/lcd.c     ****     lcd_setXY (t20, 365, Y_ANNUNC-30);
 583:src/lcd.c     ****     lcd_writeText(t20, "RPN");
 584:src/lcd.c     ****   }
 585:src/lcd.c     **** }
 1667              		.loc 1 585 1 is_stmt 0 view .LVU299
 1668 002a BDE81040 		pop	{r4, lr}
 1669              		.cfi_remember_state
 1670              		.cfi_restore 14
 1671              		.cfi_restore 4
 1672              		.cfi_def_cfa_offset 0
 579:src/lcd.c     ****     lcd_writeText(t20, "eRPN");
 1673              		.loc 1 579 5 view .LVU300
 1674 002e 1847     		bx	r3	@ indirect register sibling call
 1675              	.LVL157:
 1676              	.L87:
 1677              		.cfi_restore_state
 582:src/lcd.c     ****     lcd_writeText(t20, "RPN");
 1678              		.loc 1 582 5 is_stmt 1 view .LVU301
 1679 0030 40F26D11 		movw	r1, #365
 1680 0034 9847     		blx	r3
 1681              	.LVL158:
 583:src/lcd.c     ****   }
 1682              		.loc 1 583 5 view .LVU302
 1683 0036 206B     		ldr	r0, [r4, #48]
 1684 0038 054B     		ldr	r3, .L89+12
 1685 003a 0749     		ldr	r1, .L89+20
 1686              		.loc 1 585 1 is_stmt 0 view .LVU303
 1687 003c BDE81040 		pop	{r4, lr}
 1688              		.cfi_restore 14
 1689              		.cfi_restore 4
 1690              		.cfi_def_cfa_offset 0
 583:src/lcd.c     ****   }
ARM GAS  /tmp/ccb1Ng7p.s 			page 45


 1691              		.loc 1 583 5 view .LVU304
 1692 0040 1847     		bx	r3	@ indirect register sibling call
 1693              	.LVL159:
 1694              	.L90:
 1695 0042 00BF     		.align	2
 1696              	.L89:
 1697 0044 00200010 		.word	268443648
 1698 0048 00000000 		.word	main_ram
 1699 004c 6D020008 		.word	134218349
 1700 0050 7D020008 		.word	134218365
 1701 0054 00000000 		.word	.LC2
 1702 0058 08000000 		.word	.LC3
 1703              		.cfi_endproc
 1704              	.LFE31:
 1706              		.section	.rodata.draw_RCL.str1.4,"aMS",%progbits,1
 1707              		.align	2
 1708              	.LC4:
 1709 0000 52554E00 		.ascii	"RUN\000"
 1710              		.section	.text.draw_RCL,"ax",%progbits
 1711              		.align	1
 1712              		.p2align 2,,3
 1713              		.global	draw_RCL
 1714              		.syntax unified
 1715              		.thumb
 1716              		.thumb_func
 1717              		.fpu fpv4-sp-d16
 1719              	draw_RCL:
 1720              	.LVL160:
 1721              	.LFB32:
 586:src/lcd.c     **** 
 587:src/lcd.c     **** void draw_RCL(int inverse) {
 1722              		.loc 1 587 28 is_stmt 1 view -0
 1723              		.cfi_startproc
 1724              		@ args = 0, pretend = 0, frame = 0
 1725              		@ frame_needed = 0, uses_anonymous_args = 0
 588:src/lcd.c     ****   t20->inv = inverse;
 1726              		.loc 1 588 3 view .LVU306
 587:src/lcd.c     ****   t20->inv = inverse;
 1727              		.loc 1 587 28 is_stmt 0 view .LVU307
 1728 0000 70B5     		push	{r4, r5, r6, lr}
 1729              		.cfi_def_cfa_offset 16
 1730              		.cfi_offset 4, -16
 1731              		.cfi_offset 5, -12
 1732              		.cfi_offset 6, -8
 1733              		.cfi_offset 14, -4
 1734              		.loc 1 588 3 view .LVU308
 1735 0002 074C     		ldr	r4, .L93
 589:src/lcd.c     ****   lcd_setXY (t20, 365, Y_ANNUNC-50);
 1736              		.loc 1 589 3 view .LVU309
 1737 0004 074D     		ldr	r5, .L93+4
 588:src/lcd.c     ****   t20->inv = inverse;
 1738              		.loc 1 588 3 view .LVU310
 1739 0006 236B     		ldr	r3, [r4, #48]
 1740              		.loc 1 589 3 view .LVU311
 1741 0008 40F26D11 		movw	r1, #365
 588:src/lcd.c     ****   t20->inv = inverse;
 1742              		.loc 1 588 12 view .LVU312
ARM GAS  /tmp/ccb1Ng7p.s 			page 46


 1743 000c 5874     		strb	r0, [r3, #17]
 1744              		.loc 1 589 3 is_stmt 1 view .LVU313
 1745 000e 1922     		movs	r2, #25
 1746 0010 1846     		mov	r0, r3
 1747              	.LVL161:
 1748              		.loc 1 589 3 is_stmt 0 view .LVU314
 1749 0012 A847     		blx	r5
 1750              	.LVL162:
 590:src/lcd.c     ****   lcd_writeText(t20, "RUN");
 1751              		.loc 1 590 3 is_stmt 1 view .LVU315
 1752 0014 206B     		ldr	r0, [r4, #48]
 1753 0016 044B     		ldr	r3, .L93+8
 1754 0018 0449     		ldr	r1, .L93+12
 591:src/lcd.c     ****   //  t20->inv = 0;
 592:src/lcd.c     **** }
 1755              		.loc 1 592 1 is_stmt 0 view .LVU316
 1756 001a BDE87040 		pop	{r4, r5, r6, lr}
 1757              		.cfi_restore 14
 1758              		.cfi_restore 6
 1759              		.cfi_restore 5
 1760              		.cfi_restore 4
 1761              		.cfi_def_cfa_offset 0
 590:src/lcd.c     ****   lcd_writeText(t20, "RUN");
 1762              		.loc 1 590 3 view .LVU317
 1763 001e 1847     		bx	r3	@ indirect register sibling call
 1764              	.LVL163:
 1765              	.L94:
 1766              		.align	2
 1767              	.L93:
 1768 0020 00200010 		.word	268443648
 1769 0024 6D020008 		.word	134218349
 1770 0028 7D020008 		.word	134218365
 1771 002c 00000000 		.word	.LC4
 1772              		.cfi_endproc
 1773              	.LFE32:
 1775              		.section	.rodata.draw_LEQ.str1.4,"aMS",%progbits,1
 1776              		.align	2
 1777              	.LC5:
 1778 0000 435F4C4B 		.ascii	"C_LK\000"
 1778      00
 1779 0005 000000   		.align	2
 1780              	.LC6:
 1781 0008 3D00     		.ascii	"=\000"
 1782              		.section	.text.draw_LEQ,"ax",%progbits
 1783              		.align	1
 1784              		.p2align 2,,3
 1785              		.global	draw_LEQ
 1786              		.syntax unified
 1787              		.thumb
 1788              		.thumb_func
 1789              		.fpu fpv4-sp-d16
 1791              	draw_LEQ:
 1792              	.LFB33:
 593:src/lcd.c     **** 
 594:src/lcd.c     **** void draw_LEQ(void) { // little equals
 1793              		.loc 1 594 21 is_stmt 1 view -0
 1794              		.cfi_startproc
ARM GAS  /tmp/ccb1Ng7p.s 			page 47


 1795              		@ args = 0, pretend = 0, frame = 0
 1796              		@ frame_needed = 0, uses_anonymous_args = 0
 595:src/lcd.c     ****   t20->inv = !(dots[LIT_EQ]&1);
 1797              		.loc 1 595 3 view .LVU319
 594:src/lcd.c     ****   t20->inv = !(dots[LIT_EQ]&1);
 1798              		.loc 1 594 21 is_stmt 0 view .LVU320
 1799 0000 38B5     		push	{r3, r4, r5, lr}
 1800              		.cfi_def_cfa_offset 16
 1801              		.cfi_offset 3, -16
 1802              		.cfi_offset 4, -12
 1803              		.cfi_offset 5, -8
 1804              		.cfi_offset 14, -4
 1805              		.loc 1 595 20 view .LVU321
 1806 0002 104B     		ldr	r3, .L99
 1807              		.loc 1 595 3 view .LVU322
 1808 0004 104C     		ldr	r4, .L99+4
 1809              		.loc 1 595 12 view .LVU323
 1810 0006 93F88430 		ldrb	r3, [r3, #132]	@ zero_extendqisi2
 1811              		.loc 1 595 3 view .LVU324
 1812 000a 206B     		ldr	r0, [r4, #48]
 596:src/lcd.c     ****   lcd_setXY (t20, 360, Y_ANNUNC-70);
 1813              		.loc 1 596 3 view .LVU325
 1814 000c 0F4D     		ldr	r5, .L99+8
 595:src/lcd.c     ****   t20->inv = !(dots[LIT_EQ]&1);
 1815              		.loc 1 595 12 view .LVU326
 1816 000e DB43     		mvns	r3, r3
 1817 0010 03F00103 		and	r3, r3, #1
 1818              		.loc 1 596 3 view .LVU327
 1819 0014 4FF4B471 		mov	r1, #360
 595:src/lcd.c     ****   t20->inv = !(dots[LIT_EQ]&1);
 1820              		.loc 1 595 12 view .LVU328
 1821 0018 4374     		strb	r3, [r0, #17]
 1822              		.loc 1 596 3 is_stmt 1 view .LVU329
 1823 001a 0522     		movs	r2, #5
 1824 001c A847     		blx	r5
 1825              	.LVL164:
 597:src/lcd.c     **** #ifdef INCLUDE_C_LOCK
 598:src/lcd.c     ****   if (C_LOCKED) {
 1826              		.loc 1 598 3 view .LVU330
 599:src/lcd.c     ****     lcd_writeText(t20, "C_LK");
 1827              		.loc 1 599 5 view .LVU331
 600:src/lcd.c     ****   }
 601:src/lcd.c     ****   else {
 602:src/lcd.c     ****     lcd_writeText(t20, "=");
 1828              		.loc 1 602 5 view .LVU332
 598:src/lcd.c     ****     lcd_writeText(t20, "C_LK");
 1829              		.loc 1 598 7 is_stmt 0 view .LVU333
 1830 001e 0C4B     		ldr	r3, .L99+12
 599:src/lcd.c     ****     lcd_writeText(t20, "C_LK");
 1831              		.loc 1 599 5 view .LVU334
 1832 0020 206B     		ldr	r0, [r4, #48]
 598:src/lcd.c     ****     lcd_writeText(t20, "C_LK");
 1833              		.loc 1 598 7 view .LVU335
 1834 0022 1B68     		ldr	r3, [r3]
 1835 0024 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 598:src/lcd.c     ****     lcd_writeText(t20, "C_LK");
 1836              		.loc 1 598 6 view .LVU336
ARM GAS  /tmp/ccb1Ng7p.s 			page 48


 1837 0028 03F04103 		and	r3, r3, #65
 1838 002c 412B     		cmp	r3, #65
 599:src/lcd.c     ****     lcd_writeText(t20, "C_LK");
 1839              		.loc 1 599 5 view .LVU337
 1840 002e 08BF     		it	eq
 1841 0030 0849     		ldreq	r1, .L99+16
 1842 0032 094B     		ldr	r3, .L99+20
 1843              		.loc 1 602 5 view .LVU338
 1844 0034 18BF     		it	ne
 1845 0036 0949     		ldrne	r1, .L99+24
 1846 0038 9847     		blx	r3
 1847              	.LVL165:
 603:src/lcd.c     ****   }
 604:src/lcd.c     **** #else
 605:src/lcd.c     ****   lcd_writeText(t20, "=");
 606:src/lcd.c     **** #endif
 607:src/lcd.c     ****   t20->inv = 0;
 1848              		.loc 1 607 3 is_stmt 1 view .LVU339
 1849 003a 034B     		ldr	r3, .L99+4
 1850              		.loc 1 607 12 is_stmt 0 view .LVU340
 1851 003c 1B6B     		ldr	r3, [r3, #48]
 1852 003e 0022     		movs	r2, #0
 1853 0040 5A74     		strb	r2, [r3, #17]
 608:src/lcd.c     **** }
 1854              		.loc 1 608 1 view .LVU341
 1855 0042 38BD     		pop	{r3, r4, r5, pc}
 1856              	.L100:
 1857              		.align	2
 1858              	.L99:
 1859 0044 00000000 		.word	.LANCHOR0
 1860 0048 00200010 		.word	268443648
 1861 004c 6D020008 		.word	134218349
 1862 0050 00000000 		.word	main_ram
 1863 0054 00000000 		.word	.LC5
 1864 0058 7D020008 		.word	134218365
 1865 005c 08000000 		.word	.LC6
 1866              		.cfi_endproc
 1867              	.LFE33:
 1869              		.section	.rodata.draw_dot.str1.4,"aMS",%progbits,1
 1870              		.align	2
 1871              	.LC7:
 1872 0000 414C5048 		.ascii	"ALPHA\000"
 1872      4100
 1873 0006 0000     		.align	2
 1874              	.LC8:
 1875 0008 50474D00 		.ascii	"PGM\000"
 1876              		.align	2
 1877              	.LC9:
 1878 000c 52414400 		.ascii	"RAD\000"
 1879              		.align	2
 1880              	.LC10:
 1881 0010 44454700 		.ascii	"DEG\000"
 1882              		.section	.text.draw_dot,"ax",%progbits
 1883              		.align	1
 1884              		.p2align 2,,3
 1885              		.global	draw_dot
 1886              		.syntax unified
ARM GAS  /tmp/ccb1Ng7p.s 			page 49


 1887              		.thumb
 1888              		.thumb_func
 1889              		.fpu fpv4-sp-d16
 1891              	draw_dot:
 1892              	.LVL166:
 1893              	.LFB26:
 359:src/lcd.c     ****   int x, col = 0, inverse = 1;
 1894              		.loc 1 359 23 is_stmt 1 view -0
 1895              		.cfi_startproc
 1896              		@ args = 0, pretend = 0, frame = 0
 1897              		@ frame_needed = 0, uses_anonymous_args = 0
 360:src/lcd.c     ****   if (dots[n] & 1) {
 1898              		.loc 1 360 3 view .LVU343
 361:src/lcd.c     ****     col = 0xff;
 1899              		.loc 1 361 3 view .LVU344
 359:src/lcd.c     ****   int x, col = 0, inverse = 1;
 1900              		.loc 1 359 23 is_stmt 0 view .LVU345
 1901 0000 70B5     		push	{r4, r5, r6, lr}
 1902              		.cfi_def_cfa_offset 16
 1903              		.cfi_offset 4, -16
 1904              		.cfi_offset 5, -12
 1905              		.cfi_offset 6, -8
 1906              		.cfi_offset 14, -4
 361:src/lcd.c     ****     col = 0xff;
 1907              		.loc 1 361 11 view .LVU346
 1908 0002 B44D     		ldr	r5, .L161
 361:src/lcd.c     ****     col = 0xff;
 1909              		.loc 1 361 6 view .LVU347
 1910 0004 2B5C     		ldrb	r3, [r5, r0]	@ zero_extendqisi2
 363:src/lcd.c     ****   }
 1911              		.loc 1 363 13 view .LVU348
 1912 0006 13F00103 		ands	r3, r3, #1
 1913 000a 0CBF     		ite	eq
 1914 000c 0024     		moveq	r4, #0
 1915 000e FF24     		movne	r4, #255
 1916              	.LVL167:
 366:src/lcd.c     ****     x = XLEFT + DWIDTH*(n/9);
 1917              		.loc 1 366 3 is_stmt 1 view .LVU349
 366:src/lcd.c     ****     x = XLEFT + DWIDTH*(n/9);
 1918              		.loc 1 366 6 is_stmt 0 view .LVU350
 1919 0010 6B28     		cmp	r0, #107
 359:src/lcd.c     ****   int x, col = 0, inverse = 1;
 1920              		.loc 1 359 23 view .LVU351
 1921 0012 82B0     		sub	sp, sp, #8
 1922              		.cfi_def_cfa_offset 24
 366:src/lcd.c     ****     x = XLEFT + DWIDTH*(n/9);
 1923              		.loc 1 366 6 view .LVU352
 1924 0014 17DC     		bgt	.L103
 367:src/lcd.c     ****     switch (n % 9) {  
 1925              		.loc 1 367 5 is_stmt 1 view .LVU353
 367:src/lcd.c     ****     switch (n % 9) {  
 1926              		.loc 1 367 26 is_stmt 0 view .LVU354
 1927 0016 B04A     		ldr	r2, .L161+4
 1928 0018 C317     		asrs	r3, r0, #31
 1929              	.LVL168:
 367:src/lcd.c     ****     switch (n % 9) {  
 1930              		.loc 1 367 26 view .LVU355
ARM GAS  /tmp/ccb1Ng7p.s 			page 50


 1931 001a 82FB0012 		smull	r1, r2, r2, r0
 1932 001e C3EB6203 		rsb	r3, r3, r2, asr #1
 367:src/lcd.c     ****     switch (n % 9) {  
 1933              		.loc 1 367 23 view .LVU356
 1934 0022 03EB8302 		add	r2, r3, r3, lsl #2
 368:src/lcd.c     ****     case 0:
 1935              		.loc 1 368 15 view .LVU357
 1936 0026 03EBC303 		add	r3, r3, r3, lsl #3
 367:src/lcd.c     ****     switch (n % 9) {  
 1937              		.loc 1 367 23 view .LVU358
 1938 002a 02EB8205 		add	r5, r2, r2, lsl #2
 1939              	.LVL169:
 368:src/lcd.c     ****     case 0:
 1940              		.loc 1 368 15 view .LVU359
 1941 002e C31A     		subs	r3, r0, r3
 367:src/lcd.c     ****     switch (n % 9) {  
 1942              		.loc 1 367 7 view .LVU360
 1943 0030 05F11A00 		add	r0, r5, #26
 1944              	.LVL170:
 368:src/lcd.c     ****     case 0:
 1945              		.loc 1 368 5 is_stmt 1 view .LVU361
 1946 0034 082B     		cmp	r3, #8
 1947 0036 3ED8     		bhi	.L101
 1948 0038 DFE803F0 		tbb	[pc, r3]
 1949              	.L106:
 1950 003c 80       		.byte	(.L114-.L106)/2
 1951 003d 87       		.byte	(.L113-.L106)/2
 1952 003e 8E       		.byte	(.L112-.L106)/2
 1953 003f 95       		.byte	(.L111-.L106)/2
 1954 0040 9C       		.byte	(.L110-.L106)/2
 1955 0041 A1       		.byte	(.L109-.L106)/2
 1956 0042 A8       		.byte	(.L108-.L106)/2
 1957 0043 AD       		.byte	(.L107-.L106)/2
 1958 0044 B6       		.byte	(.L105-.L106)/2
 1959              	.LVL171:
 1960 0045 00       		.p2align 1
 1961              	.L103:
 399:src/lcd.c     ****     x = XLEFT_EXP + DWIDTH_EXP*((n-108)/7);
 1962              		.loc 1 399 8 view .LVU362
 399:src/lcd.c     ****     x = XLEFT_EXP + DWIDTH_EXP*((n-108)/7);
 1963              		.loc 1 399 11 is_stmt 0 view .LVU363
 1964 0046 8028     		cmp	r0, #128
 1965 0048 37DC     		bgt	.L115
 400:src/lcd.c     ****     switch ((n-108) % 7) {
 1966              		.loc 1 400 5 is_stmt 1 view .LVU364
 400:src/lcd.c     ****     switch ((n-108) % 7) {
 1967              		.loc 1 400 40 is_stmt 0 view .LVU365
 1968 004a A44B     		ldr	r3, .L161+8
 1969              	.LVL172:
 400:src/lcd.c     ****     switch ((n-108) % 7) {
 1970              		.loc 1 400 35 view .LVU366
 1971 004c 6C38     		subs	r0, r0, #108
 1972              	.LVL173:
 400:src/lcd.c     ****     switch ((n-108) % 7) {
 1973              		.loc 1 400 40 view .LVU367
 1974 004e A3FB0023 		umull	r2, r3, r3, r0
 1975 0052 C21A     		subs	r2, r0, r3
ARM GAS  /tmp/ccb1Ng7p.s 			page 51


 1976 0054 03EB5203 		add	r3, r3, r2, lsr #1
 1977 0058 9B08     		lsrs	r3, r3, #2
 401:src/lcd.c     ****     case 0:
 1978              		.loc 1 401 21 view .LVU368
 1979 005a C3EBC302 		rsb	r2, r3, r3, lsl #3
 1980 005e 801A     		subs	r0, r0, r2
 1981              	.LVL174:
 400:src/lcd.c     ****     switch ((n-108) % 7) {
 1982              		.loc 1 400 31 view .LVU369
 1983 0060 03EBC303 		add	r3, r3, r3, lsl #3
 1984 0064 421E     		subs	r2, r0, #1
 1985 0066 5B00     		lsls	r3, r3, #1
 400:src/lcd.c     ****     switch ((n-108) % 7) {
 1986              		.loc 1 400 7 view .LVU370
 1987 0068 03F5AC70 		add	r0, r3, #344
 1988              	.LVL175:
 401:src/lcd.c     ****     case 0:
 1989              		.loc 1 401 5 is_stmt 1 view .LVU371
 1990 006c 052A     		cmp	r2, #5
 1991 006e 00F2B081 		bhi	.L116
 1992 0072 DFE812F0 		tbh	[pc, r2, lsl #1]
 1993              	.L118:
 1994 0076 8601     		.2byte	(.L123-.L118)/2
 1995 0078 8B01     		.2byte	(.L122-.L118)/2
 1996 007a 6C01     		.2byte	(.L121-.L118)/2
 1997 007c 7301     		.2byte	(.L120-.L118)/2
 1998 007e 7A01     		.2byte	(.L119-.L118)/2
 1999 0080 8101     		.2byte	(.L117-.L118)/2
 2000              	.LVL176:
 2001              		.p2align 1
 2002              	.L139:
 2003              	.LBB72:
 480:src/lcd.c     **** 	  if (d) {
 2004              		.loc 1 480 7 view .LVU372
 480:src/lcd.c     **** 	  if (d) {
 2005              		.loc 1 480 10 is_stmt 0 view .LVU373
 2006 0082 02F00202 		and	r2, r2, #2
 2007 0086 A242     		cmp	r2, r4
 2008 0088 00F09A81 		beq	.L158
 489:src/lcd.c     **** 	    draw_BEG(4, 1);
 2009              		.loc 1 489 4 is_stmt 1 view .LVU374
 489:src/lcd.c     **** 	    draw_BEG(4, 1);
 2010              		.loc 1 489 7 is_stmt 0 view .LVU375
 2011 008c 002C     		cmp	r4, #0
 2012 008e 00F09B81 		beq	.L143
 490:src/lcd.c     **** 	    draw_BEG(8, 0);
 2013              		.loc 1 490 6 is_stmt 1 view .LVU376
 2014              	.LVL177:
 2015              	.LBB73:
 2016              	.LBI73:
 540:src/lcd.c     ****   t20->inv = inverse;
 2017              		.loc 1 540 6 view .LVU377
 2018              	.LBB74:
 541:src/lcd.c     ****   lcd_setXY (t20, 285, Y_ANNUNC-50);
 2019              		.loc 1 541 3 view .LVU378
 2020 0092 934A     		ldr	r2, .L161+12
 542:src/lcd.c     ****   if (depth == 4) {
ARM GAS  /tmp/ccb1Ng7p.s 			page 52


 2021              		.loc 1 542 3 is_stmt 0 view .LVU379
 2022 0094 934B     		ldr	r3, .L161+16
 541:src/lcd.c     ****   lcd_setXY (t20, 285, Y_ANNUNC-50);
 2023              		.loc 1 541 3 view .LVU380
 2024 0096 106B     		ldr	r0, [r2, #48]
 2025              	.LVL178:
 541:src/lcd.c     ****   lcd_setXY (t20, 285, Y_ANNUNC-50);
 2026              		.loc 1 541 12 view .LVU381
 2027 0098 0122     		movs	r2, #1
 2028 009a 4274     		strb	r2, [r0, #17]
 2029              	.LVL179:
 542:src/lcd.c     ****   if (depth == 4) {
 2030              		.loc 1 542 3 is_stmt 1 view .LVU382
 2031 009c 40F21D11 		movw	r1, #285
 2032 00a0 1922     		movs	r2, #25
 2033 00a2 9847     		blx	r3
 2034              	.LVL180:
 543:src/lcd.c     ****     lcd_writeText(t20, "S:4");
 2035              		.loc 1 543 3 view .LVU383
 2036 00a4 FFF7FEFF 		bl	draw_BEG.part.0
 2037              	.LVL181:
 549:src/lcd.c     **** }
 2038              		.loc 1 549 3 view .LVU384
 549:src/lcd.c     **** }
 2039              		.loc 1 549 3 is_stmt 0 view .LVU385
 2040              	.LBE74:
 2041              	.LBE73:
 491:src/lcd.c     **** 	    dots[BEG] = 7;
 2042              		.loc 1 491 6 is_stmt 1 view .LVU386
 2043 00a8 0021     		movs	r1, #0
 2044              	.L147:
 491:src/lcd.c     **** 	    dots[BEG] = 7;
 2045              		.loc 1 491 6 is_stmt 0 view .LVU387
 2046 00aa 0820     		movs	r0, #8
 2047 00ac FFF7FEFF 		bl	draw_BEG
 2048              	.LVL182:
 2049              	.L149:
 492:src/lcd.c     **** 	  }
 2050              		.loc 1 492 6 is_stmt 1 view .LVU388
 492:src/lcd.c     **** 	  }
 2051              		.loc 1 492 16 is_stmt 0 view .LVU389
 2052 00b0 0723     		movs	r3, #7
 2053 00b2 85F88830 		strb	r3, [r5, #136]
 2054              	.LVL183:
 2055              	.L101:
 492:src/lcd.c     **** 	  }
 2056              		.loc 1 492 16 view .LVU390
 2057              	.LBE72:
 538:src/lcd.c     **** 
 2058              		.loc 1 538 1 view .LVU391
 2059 00b6 02B0     		add	sp, sp, #8
 2060              		.cfi_remember_state
 2061              		.cfi_def_cfa_offset 16
 2062              		@ sp needed
 2063 00b8 70BD     		pop	{r4, r5, r6, pc}
 2064              	.LVL184:
 2065              	.L115:
ARM GAS  /tmp/ccb1Ng7p.s 			page 53


 2066              		.cfi_restore_state
 426:src/lcd.c     ****     switch (n) {
 2067              		.loc 1 426 8 is_stmt 1 view .LVU392
 426:src/lcd.c     ****     switch (n) {
 2068              		.loc 1 426 11 is_stmt 0 view .LVU393
 2069 00ba 8D28     		cmp	r0, #141
 2070 00bc 1DDD     		ble	.L159
 530:src/lcd.c     ****     lcd_fill_rect ( XLEFT-DWIDTH+5*((n-142)/6)+15, YTOP-(10+6*6)+((n-142)%6)*6, 4, 5, col);
 2071              		.loc 1 530 8 is_stmt 1 view .LVU394
 530:src/lcd.c     ****     lcd_fill_rect ( XLEFT-DWIDTH+5*((n-142)/6)+15, YTOP-(10+6*6)+((n-142)%6)*6, 4, 5, col);
 2072              		.loc 1 530 11 is_stmt 0 view .LVU395
 2073 00be 40F24923 		movw	r3, #585
 2074              	.LVL185:
 530:src/lcd.c     ****     lcd_fill_rect ( XLEFT-DWIDTH+5*((n-142)/6)+15, YTOP-(10+6*6)+((n-142)%6)*6, 4, 5, col);
 2075              		.loc 1 530 11 view .LVU396
 2076 00c2 9842     		cmp	r0, r3
 2077 00c4 40F36581 		ble	.L160
 534:src/lcd.c     ****     lcd_fill_rect( XLEFT-DWIDTH+5*((n-MAX_DOTS)/6)+15, 70-(10+6*5)+((n-MAX_DOTS)%6)*5, 4, 4, col);
 2078              		.loc 1 534 8 is_stmt 1 view .LVU397
 534:src/lcd.c     ****     lcd_fill_rect( XLEFT-DWIDTH+5*((n-MAX_DOTS)/6)+15, 70-(10+6*5)+((n-MAX_DOTS)%6)*5, 4, 4, col);
 2079              		.loc 1 534 11 is_stmt 0 view .LVU398
 2080 00c8 B0F5537F 		cmp	r0, #844
 2081 00cc F3DA     		bge	.L101
 535:src/lcd.c     ****     return;
 2082              		.loc 1 535 5 is_stmt 1 view .LVU399
 535:src/lcd.c     ****     return;
 2083              		.loc 1 535 81 is_stmt 0 view .LVU400
 2084 00ce 864B     		ldr	r3, .L161+20
 535:src/lcd.c     ****     return;
 2085              		.loc 1 535 5 view .LVU401
 2086 00d0 0094     		str	r4, [sp]
 535:src/lcd.c     ****     return;
 2087              		.loc 1 535 38 view .LVU402
 2088 00d2 A0F24A20 		subw	r0, r0, #586
 2089              	.LVL186:
 535:src/lcd.c     ****     return;
 2090              		.loc 1 535 81 view .LVU403
 2091 00d6 A3FB0023 		umull	r2, r3, r3, r0
 2092 00da 9B08     		lsrs	r3, r3, #2
 2093 00dc 03EB4301 		add	r1, r3, r3, lsl #1
 2094 00e0 A0EB4101 		sub	r1, r0, r1, lsl #1
 535:src/lcd.c     ****     return;
 2095              		.loc 1 535 84 view .LVU404
 2096 00e4 01EB8101 		add	r1, r1, r1, lsl #2
 535:src/lcd.c     ****     return;
 2097              		.loc 1 535 34 view .LVU405
 2098 00e8 03EB8300 		add	r0, r3, r3, lsl #2
 2099              	.LVL187:
 535:src/lcd.c     ****     return;
 2100              		.loc 1 535 5 view .LVU406
 2101 00ec 0423     		movs	r3, #4
 2102 00ee 7F4C     		ldr	r4, .L161+24
 2103              	.LVL188:
 535:src/lcd.c     ****     return;
 2104              		.loc 1 535 5 view .LVU407
 2105 00f0 1E31     		adds	r1, r1, #30
 2106 00f2 1030     		adds	r0, r0, #16
ARM GAS  /tmp/ccb1Ng7p.s 			page 54


 2107 00f4 1A46     		mov	r2, r3
 2108 00f6 A047     		blx	r4
 2109              	.LVL189:
 536:src/lcd.c     ****   }
 2110              		.loc 1 536 5 is_stmt 1 view .LVU408
 2111 00f8 DDE7     		b	.L101
 2112              	.LVL190:
 2113              	.L159:
 536:src/lcd.c     ****   }
 2114              		.loc 1 536 5 is_stmt 0 view .LVU409
 2115 00fa 8238     		subs	r0, r0, #130
 2116              	.LVL191:
 536:src/lcd.c     ****   }
 2117              		.loc 1 536 5 view .LVU410
 2118 00fc 83F00103 		eor	r3, r3, #1
 2119              	.LVL192:
 427:src/lcd.c     ****     case MANT_SIGN:
 2120              		.loc 1 427 5 is_stmt 1 view .LVU411
 2121 0100 0B28     		cmp	r0, #11
 2122 0102 00F26D81 		bhi	.L125
 2123 0106 01A2     		adr	r2, .L127
 2124 0108 52F820F0 		ldr	pc, [r2, r0, lsl #2]
 2125              		.p2align 2
 2126              	.L127:
 2127 010c D5010000 		.word	.L137+1
 2128 0110 E7010000 		.word	.L136+1
 2129 0114 03020000 		.word	.L135+1
 2130 0118 0D020000 		.word	.L134+1
 2131 011c 65020000 		.word	.L133+1
 2132 0120 B7000000 		.word	.L101+1
 2133 0124 83020000 		.word	.L132+1
 2134 0128 BD020000 		.word	.L131+1
 2135 012c 01030000 		.word	.L130+1
 2136 0130 33030000 		.word	.L129+1
 2137 0134 37030000 		.word	.L128+1
 2138 0138 C9010000 		.word	.L126+1
 2139              	.LVL193:
 2140              		.p2align 1
 2141              	.L114:
 370:src/lcd.c     ****       return;
 2142              		.loc 1 370 7 view .LVU412
 2143 013c 2246     		mov	r2, r4
 2144 013e 8221     		movs	r1, #130
 538:src/lcd.c     **** 
 2145              		.loc 1 538 1 is_stmt 0 view .LVU413
 2146 0140 02B0     		add	sp, sp, #8
 2147              		.cfi_remember_state
 2148              		.cfi_def_cfa_offset 16
 2149              		@ sp needed
 2150 0142 BDE87040 		pop	{r4, r5, r6, lr}
 2151              		.cfi_restore 14
 2152              		.cfi_restore 6
 2153              		.cfi_restore 5
 2154              		.cfi_restore 4
 2155              		.cfi_def_cfa_offset 0
 2156              	.LVL194:
 370:src/lcd.c     ****       return;
ARM GAS  /tmp/ccb1Ng7p.s 			page 55


 2157              		.loc 1 370 7 view .LVU414
 2158 0146 FFF7FEBF 		b	top
 2159              	.LVL195:
 2160              	.L113:
 2161              		.cfi_restore_state
 373:src/lcd.c     ****       return;
 2162              		.loc 1 373 7 is_stmt 1 view .LVU415
 2163              	.LBB77:
 2164              	.LBI77:
  94:src/lcd.c     ****   left_side(i, j, col);
 2165              		.loc 1 94 6 view .LVU416
 2166              	.LBB78:
  95:src/lcd.c     **** }
 2167              		.loc 1 95 3 view .LVU417
 2168 014a 2246     		mov	r2, r4
 2169 014c 8221     		movs	r1, #130
 2170              	.LVL196:
 2171              	.L151:
  95:src/lcd.c     **** }
 2172              		.loc 1 95 3 is_stmt 0 view .LVU418
 2173              	.LBE78:
 2174              	.LBE77:
 538:src/lcd.c     **** 
 2175              		.loc 1 538 1 view .LVU419
 2176 014e 02B0     		add	sp, sp, #8
 2177              		.cfi_remember_state
 2178              		.cfi_def_cfa_offset 16
 2179              		@ sp needed
 2180 0150 BDE87040 		pop	{r4, r5, r6, lr}
 2181              		.cfi_restore 14
 2182              		.cfi_restore 6
 2183              		.cfi_restore 5
 2184              		.cfi_restore 4
 2185              		.cfi_def_cfa_offset 0
 2186              	.LVL197:
 2187              	.LBB79:
 2188              	.LBB80:
  98:src/lcd.c     **** }
 2189              		.loc 1 98 3 view .LVU420
 2190 0154 FFF7FEBF 		b	left_side
 2191              	.LVL198:
 2192              	.L112:
 2193              		.cfi_restore_state
  98:src/lcd.c     **** }
 2194              		.loc 1 98 3 view .LVU421
 2195              	.LBE80:
 2196              	.LBE79:
 376:src/lcd.c     ****       return;
 2197              		.loc 1 376 7 is_stmt 1 view .LVU422
 2198 0158 2246     		mov	r2, r4
 2199 015a 8221     		movs	r1, #130
 2200              	.LVL199:
 2201              	.L152:
 538:src/lcd.c     **** 
 2202              		.loc 1 538 1 is_stmt 0 view .LVU423
 2203 015c 02B0     		add	sp, sp, #8
 2204              		.cfi_remember_state
ARM GAS  /tmp/ccb1Ng7p.s 			page 56


 2205              		.cfi_def_cfa_offset 16
 2206              		@ sp needed
 2207 015e BDE87040 		pop	{r4, r5, r6, lr}
 2208              		.cfi_restore 14
 2209              		.cfi_restore 6
 2210              		.cfi_restore 5
 2211              		.cfi_restore 4
 2212              		.cfi_def_cfa_offset 0
 429:src/lcd.c     ****       return;
 2213              		.loc 1 429 7 view .LVU424
 2214 0162 FFF7FEBF 		b	middle
 2215              	.LVL200:
 2216              	.L111:
 2217              		.cfi_restore_state
 379:src/lcd.c     ****       return;
 2218              		.loc 1 379 7 is_stmt 1 view .LVU425
 2219              	.LBB82:
 2220              	.LBI82:
 107:src/lcd.c     ****   right_side(i, j, col);
 2221              		.loc 1 107 6 view .LVU426
 2222              	.LBB83:
 108:src/lcd.c     **** }
 2223              		.loc 1 108 3 view .LVU427
 2224 0166 2246     		mov	r2, r4
 2225 0168 8221     		movs	r1, #130
 2226              	.LVL201:
 2227              	.L153:
 108:src/lcd.c     **** }
 2228              		.loc 1 108 3 is_stmt 0 view .LVU428
 2229              	.LBE83:
 2230              	.LBE82:
 538:src/lcd.c     **** 
 2231              		.loc 1 538 1 view .LVU429
 2232 016a 02B0     		add	sp, sp, #8
 2233              		.cfi_remember_state
 2234              		.cfi_def_cfa_offset 16
 2235              		@ sp needed
 2236 016c BDE87040 		pop	{r4, r5, r6, lr}
 2237              		.cfi_restore 14
 2238              		.cfi_restore 6
 2239              		.cfi_restore 5
 2240              		.cfi_restore 4
 2241              		.cfi_def_cfa_offset 0
 2242              	.LVL202:
 2243              	.LBB84:
 2244              	.LBB85:
 111:src/lcd.c     **** }
 2245              		.loc 1 111 3 view .LVU430
 2246 0170 FFF7FEBF 		b	right_side
 2247              	.LVL203:
 2248              	.L110:
 2249              		.cfi_restore_state
 111:src/lcd.c     **** }
 2250              		.loc 1 111 3 view .LVU431
 2251              	.LBE85:
 2252              	.LBE84:
 382:src/lcd.c     ****       return;
ARM GAS  /tmp/ccb1Ng7p.s 			page 57


 2253              		.loc 1 382 7 is_stmt 1 view .LVU432
 2254              	.LBB87:
 2255              	.LBI79:
  97:src/lcd.c     ****   left_side(i-2, j+19, col);
 2256              		.loc 1 97 6 view .LVU433
 2257              	.LBB81:
  98:src/lcd.c     **** }
 2258              		.loc 1 98 3 view .LVU434
 2259 0174 2246     		mov	r2, r4
 2260 0176 05F11800 		add	r0, r5, #24
 2261              	.LVL204:
  98:src/lcd.c     **** }
 2262              		.loc 1 98 3 is_stmt 0 view .LVU435
 2263 017a 9521     		movs	r1, #149
 2264 017c E7E7     		b	.L151
 2265              	.LVL205:
 2266              	.L109:
  98:src/lcd.c     **** }
 2267              		.loc 1 98 3 view .LVU436
 2268              	.LBE81:
 2269              	.LBE87:
 385:src/lcd.c     ****       return;
 2270              		.loc 1 385 7 is_stmt 1 view .LVU437
 2271 017e 2246     		mov	r2, r4
 2272 0180 8221     		movs	r1, #130
 538:src/lcd.c     **** 
 2273              		.loc 1 538 1 is_stmt 0 view .LVU438
 2274 0182 02B0     		add	sp, sp, #8
 2275              		.cfi_remember_state
 2276              		.cfi_def_cfa_offset 16
 2277              		@ sp needed
 2278 0184 BDE87040 		pop	{r4, r5, r6, lr}
 2279              		.cfi_restore 14
 2280              		.cfi_restore 6
 2281              		.cfi_restore 5
 2282              		.cfi_restore 4
 2283              		.cfi_def_cfa_offset 0
 2284              	.LVL206:
 385:src/lcd.c     ****       return;
 2285              		.loc 1 385 7 view .LVU439
 2286 0188 FFF7FEBF 		b	bottom
 2287              	.LVL207:
 2288              	.L108:
 2289              		.cfi_restore_state
 388:src/lcd.c     ****       return;
 2290              		.loc 1 388 7 is_stmt 1 view .LVU440
 2291              	.LBB88:
 2292              	.LBI84:
 110:src/lcd.c     ****   right_side(i-2, j+19, col);
 2293              		.loc 1 110 6 view .LVU441
 2294              	.LBB86:
 111:src/lcd.c     **** }
 2295              		.loc 1 111 3 view .LVU442
 2296 018c 2246     		mov	r2, r4
 2297 018e 05F11800 		add	r0, r5, #24
 2298              	.LVL208:
 111:src/lcd.c     **** }
ARM GAS  /tmp/ccb1Ng7p.s 			page 58


 2299              		.loc 1 111 3 is_stmt 0 view .LVU443
 2300 0192 9521     		movs	r1, #149
 2301 0194 E9E7     		b	.L153
 2302              	.LVL209:
 2303              	.L107:
 111:src/lcd.c     **** }
 2304              		.loc 1 111 3 view .LVU444
 2305              	.LBE86:
 2306              	.LBE88:
 391:src/lcd.c     ****       return;
 2307              		.loc 1 391 7 is_stmt 1 view .LVU445
 2308              	.LBB89:
 2309              	.LBI89:
 133:src/lcd.c     ****   lcd_fill_rect (i+19, j+40, 5, 5, col);
 2310              		.loc 1 133 6 view .LVU446
 2311              	.LBB90:
 134:src/lcd.c     **** }
 2312              		.loc 1 134 3 view .LVU447
 2313 0196 0523     		movs	r3, #5
 2314 0198 0094     		str	r4, [sp]
 2315 019a 05F12D00 		add	r0, r5, #45
 2316              	.LVL210:
 134:src/lcd.c     **** }
 2317              		.loc 1 134 3 is_stmt 0 view .LVU448
 2318 019e 534C     		ldr	r4, .L161+24
 2319              	.LVL211:
 134:src/lcd.c     **** }
 2320              		.loc 1 134 3 view .LVU449
 2321 01a0 1A46     		mov	r2, r3
 2322 01a2 AA21     		movs	r1, #170
 2323 01a4 A047     		blx	r4
 2324              	.LVL212:
 134:src/lcd.c     **** }
 2325              		.loc 1 134 3 view .LVU450
 2326              	.LBE90:
 2327              	.LBE89:
 392:src/lcd.c     ****     case 8:
 2328              		.loc 1 392 7 is_stmt 1 view .LVU451
 2329 01a6 86E7     		b	.L101
 2330              	.LVL213:
 2331              	.L105:
 394:src/lcd.c     ****       return;
 2332              		.loc 1 394 7 view .LVU452
 2333              	.LBB91:
 2334              	.LBI91:
 136:src/lcd.c     ****   lcd_fill_rect (i+21, j+45, 3, 3, col);
 2335              		.loc 1 136 6 view .LVU453
 2336              	.LBB92:
 137:src/lcd.c     ****   lcd_fill_rect (i+19, j+48, 3, 3, col);
 2337              		.loc 1 137 3 view .LVU454
 2338 01a8 0323     		movs	r3, #3
 2339 01aa 1A46     		mov	r2, r3
 2340 01ac 05F12F00 		add	r0, r5, #47
 2341              	.LVL214:
 137:src/lcd.c     ****   lcd_fill_rect (i+19, j+48, 3, 3, col);
 2342              		.loc 1 137 3 is_stmt 0 view .LVU455
 2343 01b0 4E4E     		ldr	r6, .L161+24
ARM GAS  /tmp/ccb1Ng7p.s 			page 59


 2344 01b2 0094     		str	r4, [sp]
 2345 01b4 AF21     		movs	r1, #175
 2346 01b6 B047     		blx	r6
 2347              	.LVL215:
 138:src/lcd.c     **** }
 2348              		.loc 1 138 3 is_stmt 1 view .LVU456
 2349 01b8 0323     		movs	r3, #3
 2350 01ba 0094     		str	r4, [sp]
 2351 01bc 05F12D00 		add	r0, r5, #45
 2352 01c0 1A46     		mov	r2, r3
 2353 01c2 B221     		movs	r1, #178
 2354 01c4 B047     		blx	r6
 2355              	.LVL216:
 138:src/lcd.c     **** }
 2356              		.loc 1 138 3 is_stmt 0 view .LVU457
 2357              	.LBE92:
 2358              	.LBE91:
 395:src/lcd.c     ****     default:;
 2359              		.loc 1 395 7 is_stmt 1 view .LVU458
 2360 01c6 76E7     		b	.L101
 2361              	.LVL217:
 2362              	.L126:
 525:src/lcd.c     ****       return;
 2363              		.loc 1 525 7 view .LVU459
 2364 01c8 1846     		mov	r0, r3
 2365              	.LVL218:
 538:src/lcd.c     **** 
 2366              		.loc 1 538 1 is_stmt 0 view .LVU460
 2367 01ca 02B0     		add	sp, sp, #8
 2368              		.cfi_remember_state
 2369              		.cfi_def_cfa_offset 16
 2370              		@ sp needed
 2371 01cc BDE87040 		pop	{r4, r5, r6, lr}
 2372              		.cfi_restore 14
 2373              		.cfi_restore 6
 2374              		.cfi_restore 5
 2375              		.cfi_restore 4
 2376              		.cfi_def_cfa_offset 0
 2377              	.LVL219:
 525:src/lcd.c     ****       return;
 2378              		.loc 1 525 7 view .LVU461
 2379 01d0 FFF7FEBF 		b	draw_RPN
 2380              	.LVL220:
 2381              	.L137:
 2382              		.cfi_restore_state
 432:src/lcd.c     ****       return;
 2383              		.loc 1 432 7 is_stmt 1 view .LVU462
 2384 01d4 2246     		mov	r2, r4
 2385 01d6 8221     		movs	r1, #130
 2386 01d8 4FF4A370 		mov	r0, #326
 2387              	.LVL221:
 2388              	.L156:
 538:src/lcd.c     **** 
 2389              		.loc 1 538 1 is_stmt 0 view .LVU463
 2390 01dc 02B0     		add	sp, sp, #8
 2391              		.cfi_remember_state
 2392              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccb1Ng7p.s 			page 60


 2393              		@ sp needed
 2394 01de BDE87040 		pop	{r4, r5, r6, lr}
 2395              		.cfi_restore 14
 2396              		.cfi_restore 6
 2397              		.cfi_restore 5
 2398              		.cfi_restore 4
 2399              		.cfi_def_cfa_offset 0
 2400              	.LVL222:
 432:src/lcd.c     ****       return;
 2401              		.loc 1 432 7 view .LVU464
 2402 01e2 FFF7FEBF 		b	exp_middle
 2403              	.LVL223:
 2404              	.L136:
 2405              		.cfi_restore_state
 435:src/lcd.c     ****       lcd_fill_rect (250, Y_ANNUNC-24, 15, 4, col);
 2406              		.loc 1 435 7 is_stmt 1 view .LVU465
 2407 01e6 414D     		ldr	r5, .L161+24
 2408 01e8 0094     		str	r4, [sp]
 2409 01ea 0423     		movs	r3, #4
 2410              	.LVL224:
 435:src/lcd.c     ****       lcd_fill_rect (250, Y_ANNUNC-24, 15, 4, col);
 2411              		.loc 1 435 7 is_stmt 0 view .LVU466
 2412 01ec 0F22     		movs	r2, #15
 2413 01ee 2921     		movs	r1, #41
 2414 01f0 FA20     		movs	r0, #250
 2415              	.LVL225:
 435:src/lcd.c     ****       lcd_fill_rect (250, Y_ANNUNC-24, 15, 4, col);
 2416              		.loc 1 435 7 view .LVU467
 2417 01f2 A847     		blx	r5
 2418              	.LVL226:
 436:src/lcd.c     ****       return;
 2419              		.loc 1 436 7 is_stmt 1 view .LVU468
 2420 01f4 0094     		str	r4, [sp]
 2421 01f6 0423     		movs	r3, #4
 2422 01f8 0F22     		movs	r2, #15
 2423 01fa 3321     		movs	r1, #51
 2424 01fc FA20     		movs	r0, #250
 2425 01fe A847     		blx	r5
 2426              	.LVL227:
 437:src/lcd.c     ****     case LIT_EQ:
 2427              		.loc 1 437 7 view .LVU469
 2428 0200 59E7     		b	.L101
 2429              	.LVL228:
 2430              	.L135:
 439:src/lcd.c     ****       return;
 2431              		.loc 1 439 7 view .LVU470
 538:src/lcd.c     **** 
 2432              		.loc 1 538 1 is_stmt 0 view .LVU471
 2433 0202 02B0     		add	sp, sp, #8
 2434              		.cfi_remember_state
 2435              		.cfi_def_cfa_offset 16
 2436              		@ sp needed
 2437 0204 BDE87040 		pop	{r4, r5, r6, lr}
 2438              		.cfi_restore 14
 2439              		.cfi_restore 6
 2440              		.cfi_restore 5
 2441              		.cfi_restore 4
ARM GAS  /tmp/ccb1Ng7p.s 			page 61


 2442              		.cfi_def_cfa_offset 0
 2443              	.LVL229:
 439:src/lcd.c     ****       return;
 2444              		.loc 1 439 7 view .LVU472
 2445 0208 FFF7FEBF 		b	draw_LEQ
 2446              	.LVL230:
 2447              	.L134:
 2448              		.cfi_restore_state
 442:src/lcd.c     ****       lcd_fill_rect(285,Y_ANNUNC-55,9,1,col);
 2449              		.loc 1 442 7 is_stmt 1 view .LVU473
 2450 020c 374D     		ldr	r5, .L161+24
 2451 020e 0094     		str	r4, [sp]
 2452 0210 0C23     		movs	r3, #12
 2453              	.LVL231:
 442:src/lcd.c     ****       lcd_fill_rect(285,Y_ANNUNC-55,9,1,col);
 2454              		.loc 1 442 7 is_stmt 0 view .LVU474
 2455 0212 0522     		movs	r2, #5
 2456 0214 0821     		movs	r1, #8
 2457 0216 40F21F10 		movw	r0, #287
 2458 021a A847     		blx	r5
 2459              	.LVL232:
 443:src/lcd.c     ****       lcd_fill_rect(286,Y_ANNUNC-54,7,1,col);
 2460              		.loc 1 443 7 is_stmt 1 view .LVU475
 2461 021c 0094     		str	r4, [sp]
 2462 021e 0123     		movs	r3, #1
 2463 0220 0922     		movs	r2, #9
 2464 0222 1421     		movs	r1, #20
 2465 0224 40F21D10 		movw	r0, #285
 2466 0228 A847     		blx	r5
 2467              	.LVL233:
 444:src/lcd.c     ****       lcd_fill_rect(287,Y_ANNUNC-53,5,1,col);
 2468              		.loc 1 444 7 view .LVU476
 2469 022a 0094     		str	r4, [sp]
 2470 022c 0123     		movs	r3, #1
 2471 022e 0722     		movs	r2, #7
 2472 0230 1521     		movs	r1, #21
 2473 0232 4FF48F70 		mov	r0, #286
 2474 0236 A847     		blx	r5
 2475              	.LVL234:
 445:src/lcd.c     ****       lcd_fill_rect(288,Y_ANNUNC-52,3,1,col);
 2476              		.loc 1 445 7 view .LVU477
 2477 0238 0094     		str	r4, [sp]
 2478 023a 0123     		movs	r3, #1
 2479 023c 0522     		movs	r2, #5
 2480 023e 1621     		movs	r1, #22
 2481 0240 40F21F10 		movw	r0, #287
 2482 0244 A847     		blx	r5
 2483              	.LVL235:
 446:src/lcd.c     ****       lcd_fill_rect(289,Y_ANNUNC-51,1,1,col);
 2484              		.loc 1 446 7 view .LVU478
 2485 0246 0094     		str	r4, [sp]
 2486 0248 0123     		movs	r3, #1
 2487 024a 0322     		movs	r2, #3
 2488 024c 1721     		movs	r1, #23
 2489 024e 4FF49070 		mov	r0, #288
 2490 0252 A847     		blx	r5
 2491              	.LVL236:
ARM GAS  /tmp/ccb1Ng7p.s 			page 62


 447:src/lcd.c     ****       return;
 2492              		.loc 1 447 7 view .LVU479
 2493 0254 0123     		movs	r3, #1
 2494 0256 0094     		str	r4, [sp]
 2495 0258 1A46     		mov	r2, r3
 2496 025a 1821     		movs	r1, #24
 2497 025c 40F22110 		movw	r0, #289
 2498 0260 A847     		blx	r5
 2499              	.LVL237:
 448:src/lcd.c     ****     case INPUT:
 2500              		.loc 1 448 7 view .LVU480
 2501 0262 28E7     		b	.L101
 2502              	.LVL238:
 2503              	.L133:
 450:src/lcd.c     ****       lcd_setXY(t20, 305, Y_ANNUNC-70);
 2504              		.loc 1 450 7 view .LVU481
 2505 0264 1E4C     		ldr	r4, .L161+12
 2506              	.LVL239:
 451:src/lcd.c     ****       lcd_writeText(t20,"ALPHA");
 2507              		.loc 1 451 7 is_stmt 0 view .LVU482
 2508 0266 1F4D     		ldr	r5, .L161+16
 450:src/lcd.c     ****       lcd_setXY(t20, 305, Y_ANNUNC-70);
 2509              		.loc 1 450 7 view .LVU483
 2510 0268 206B     		ldr	r0, [r4, #48]
 451:src/lcd.c     ****       lcd_writeText(t20,"ALPHA");
 2511              		.loc 1 451 7 view .LVU484
 2512 026a 40F23111 		movw	r1, #305
 450:src/lcd.c     ****       lcd_setXY(t20, 305, Y_ANNUNC-70);
 2513              		.loc 1 450 16 view .LVU485
 2514 026e 4374     		strb	r3, [r0, #17]
 451:src/lcd.c     ****       lcd_writeText(t20,"ALPHA");
 2515              		.loc 1 451 7 is_stmt 1 view .LVU486
 2516 0270 0522     		movs	r2, #5
 2517 0272 A847     		blx	r5
 2518              	.LVL240:
 452:src/lcd.c     ****       return;
 2519              		.loc 1 452 7 view .LVU487
 2520 0274 206B     		ldr	r0, [r4, #48]
 2521 0276 1E4B     		ldr	r3, .L161+28
 2522 0278 1E49     		ldr	r1, .L161+32
 2523              	.L154:
 538:src/lcd.c     **** 
 2524              		.loc 1 538 1 is_stmt 0 view .LVU488
 2525 027a 02B0     		add	sp, sp, #8
 2526              		.cfi_remember_state
 2527              		.cfi_def_cfa_offset 16
 2528              		@ sp needed
 2529 027c BDE87040 		pop	{r4, r5, r6, lr}
 2530              		.cfi_restore 14
 2531              		.cfi_restore 6
 2532              		.cfi_restore 5
 2533              		.cfi_restore 4
 2534              		.cfi_def_cfa_offset 0
 522:src/lcd.c     ****       return;
 2535              		.loc 1 522 7 view .LVU489
 2536 0280 1847     		bx	r3	@ indirect register sibling call
 2537              	.LVL241:
ARM GAS  /tmp/ccb1Ng7p.s 			page 63


 2538              	.L132:
 2539              		.cfi_restore_state
 2540              	.LBB93:
 468:src/lcd.c     **** 	//	print_debug(100, dots[BEG]);
 2541              		.loc 1 468 2 is_stmt 1 view .LVU490
 468:src/lcd.c     **** 	//	print_debug(100, dots[BEG]);
 2542              		.loc 1 468 16 is_stmt 0 view .LVU491
 2543 0282 1D4B     		ldr	r3, .L161+36
 2544              	.LVL242:
 470:src/lcd.c     **** 	  if (d) {
 2545              		.loc 1 470 12 view .LVU492
 2546 0284 95F88820 		ldrb	r2, [r5, #136]	@ zero_extendqisi2
 468:src/lcd.c     **** 	//	print_debug(100, dots[BEG]);
 2547              		.loc 1 468 16 view .LVU493
 2548 0288 1B68     		ldr	r3, [r3]
 2549 028a 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
 470:src/lcd.c     **** 	  if (d) {
 2550              		.loc 1 470 5 view .LVU494
 2551 028e 12F00801 		ands	r1, r2, #8
 468:src/lcd.c     **** 	//	print_debug(100, dots[BEG]);
 2552              		.loc 1 468 16 view .LVU495
 2553 0292 C3F3C004 		ubfx	r4, r3, #3, #1
 2554              	.LVL243:
 470:src/lcd.c     **** 	  if (d) {
 2555              		.loc 1 470 2 is_stmt 1 view .LVU496
 470:src/lcd.c     **** 	  if (d) {
 2556              		.loc 1 470 5 is_stmt 0 view .LVU497
 2557 0296 7FF4F4AE 		bne	.L139
 471:src/lcd.c     **** 	    draw_BEG(8, 0);
 2558              		.loc 1 471 4 is_stmt 1 view .LVU498
 471:src/lcd.c     **** 	    draw_BEG(8, 0);
 2559              		.loc 1 471 7 is_stmt 0 view .LVU499
 2560 029a 002C     		cmp	r4, #0
 2561 029c 7FF405AF 		bne	.L147
 2562              	.LVL244:
 2563              	.L148:
 496:src/lcd.c     **** 	    dots[BEG] = 4;
 2564              		.loc 1 496 6 is_stmt 1 view .LVU500
 2565              	.LBB75:
 2566              	.LBI75:
 540:src/lcd.c     ****   t20->inv = inverse;
 2567              		.loc 1 540 6 view .LVU501
 2568              	.LBB76:
 541:src/lcd.c     ****   lcd_setXY (t20, 285, Y_ANNUNC-50);
 2569              		.loc 1 541 3 view .LVU502
 2570 02a0 0F4A     		ldr	r2, .L161+12
 542:src/lcd.c     ****   if (depth == 4) {
 2571              		.loc 1 542 3 is_stmt 0 view .LVU503
 2572 02a2 104B     		ldr	r3, .L161+16
 541:src/lcd.c     ****   lcd_setXY (t20, 285, Y_ANNUNC-50);
 2573              		.loc 1 541 3 view .LVU504
 2574 02a4 106B     		ldr	r0, [r2, #48]
 542:src/lcd.c     ****   if (depth == 4) {
 2575              		.loc 1 542 3 view .LVU505
 2576 02a6 40F21D11 		movw	r1, #285
 2577 02aa 1922     		movs	r2, #25
 541:src/lcd.c     ****   lcd_setXY (t20, 285, Y_ANNUNC-50);
ARM GAS  /tmp/ccb1Ng7p.s 			page 64


 2578              		.loc 1 541 12 view .LVU506
 2579 02ac 4474     		strb	r4, [r0, #17]
 542:src/lcd.c     ****   if (depth == 4) {
 2580              		.loc 1 542 3 is_stmt 1 view .LVU507
 2581 02ae 9847     		blx	r3
 2582              	.LVL245:
 543:src/lcd.c     ****     lcd_writeText(t20, "S:4");
 2583              		.loc 1 543 3 view .LVU508
 2584 02b0 FFF7FEFF 		bl	draw_BEG.part.0
 2585              	.LVL246:
 2586              	.L150:
 549:src/lcd.c     **** }
 2587              		.loc 1 549 3 view .LVU509
 2588              	.LBE76:
 2589              	.LBE75:
 497:src/lcd.c     **** 	  }
 2590              		.loc 1 497 6 view .LVU510
 497:src/lcd.c     **** 	  }
 2591              		.loc 1 497 16 is_stmt 0 view .LVU511
 2592 02b4 0423     		movs	r3, #4
 2593 02b6 85F88830 		strb	r3, [r5, #136]
 2594 02ba FCE6     		b	.L101
 2595              	.LVL247:
 2596              	.L131:
 497:src/lcd.c     **** 	  }
 2597              		.loc 1 497 16 view .LVU512
 2598              	.LBE93:
 508:src/lcd.c     ****       lcd_setXY (t20, 325, Y_ANNUNC-50);
 2599              		.loc 1 508 7 is_stmt 1 view .LVU513
 2600 02bc 084C     		ldr	r4, .L161+12
 2601              	.LVL248:
 509:src/lcd.c     ****       lcd_writeText(t20, "PGM");
 2602              		.loc 1 509 7 is_stmt 0 view .LVU514
 2603 02be 094D     		ldr	r5, .L161+16
 508:src/lcd.c     ****       lcd_setXY (t20, 325, Y_ANNUNC-50);
 2604              		.loc 1 508 7 view .LVU515
 2605 02c0 206B     		ldr	r0, [r4, #48]
 509:src/lcd.c     ****       lcd_writeText(t20, "PGM");
 2606              		.loc 1 509 7 view .LVU516
 2607 02c2 40F24511 		movw	r1, #325
 508:src/lcd.c     ****       lcd_setXY (t20, 325, Y_ANNUNC-50);
 2608              		.loc 1 508 16 view .LVU517
 2609 02c6 4374     		strb	r3, [r0, #17]
 509:src/lcd.c     ****       lcd_writeText(t20, "PGM");
 2610              		.loc 1 509 7 is_stmt 1 view .LVU518
 2611 02c8 1922     		movs	r2, #25
 2612 02ca A847     		blx	r5
 2613              	.LVL249:
 510:src/lcd.c     ****       return;
 2614              		.loc 1 510 7 view .LVU519
 2615 02cc 206B     		ldr	r0, [r4, #48]
 2616 02ce 084B     		ldr	r3, .L161+28
 2617 02d0 0A49     		ldr	r1, .L161+40
 2618 02d2 D2E7     		b	.L154
 2619              	.L162:
 2620              		.align	2
 2621              	.L161:
ARM GAS  /tmp/ccb1Ng7p.s 			page 65


 2622 02d4 00000000 		.word	.LANCHOR0
 2623 02d8 398EE338 		.word	954437177
 2624 02dc 25499224 		.word	613566757
 2625 02e0 00200010 		.word	268443648
 2626 02e4 6D020008 		.word	134218349
 2627 02e8 ABAAAAAA 		.word	-1431655765
 2628 02ec 3D020008 		.word	134218301
 2629 02f0 7D020008 		.word	134218365
 2630 02f4 00000000 		.word	.LC7
 2631 02f8 00000000 		.word	main_ram
 2632 02fc 08000000 		.word	.LC8
 2633              	.LVL250:
 2634              	.L130:
 513:src/lcd.c     ****     case RAD:
 2635              		.loc 1 513 7 view .LVU520
 2636              	.LBB94:
 2637              	.LBI94:
 587:src/lcd.c     ****   t20->inv = inverse;
 2638              		.loc 1 587 6 view .LVU521
 2639              	.LBB95:
 588:src/lcd.c     ****   lcd_setXY (t20, 365, Y_ANNUNC-50);
 2640              		.loc 1 588 3 view .LVU522
 2641 0300 394C     		ldr	r4, .L163
 2642              	.LVL251:
 589:src/lcd.c     ****   lcd_writeText(t20, "RUN");
 2643              		.loc 1 589 3 is_stmt 0 view .LVU523
 2644 0302 3A4E     		ldr	r6, .L163+4
 588:src/lcd.c     ****   lcd_setXY (t20, 365, Y_ANNUNC-50);
 2645              		.loc 1 588 3 view .LVU524
 2646 0304 206B     		ldr	r0, [r4, #48]
 588:src/lcd.c     ****   lcd_setXY (t20, 365, Y_ANNUNC-50);
 2647              		.loc 1 588 12 view .LVU525
 2648 0306 DDB2     		uxtb	r5, r3
 588:src/lcd.c     ****   lcd_setXY (t20, 365, Y_ANNUNC-50);
 2649              		.loc 1 588 12 view .LVU526
 2650 0308 4574     		strb	r5, [r0, #17]
 589:src/lcd.c     ****   lcd_writeText(t20, "RUN");
 2651              		.loc 1 589 3 is_stmt 1 view .LVU527
 2652 030a 40F26D11 		movw	r1, #365
 2653 030e 1922     		movs	r2, #25
 2654 0310 B047     		blx	r6
 2655              	.LVL252:
 590:src/lcd.c     ****   //  t20->inv = 0;
 2656              		.loc 1 590 3 view .LVU528
 2657 0312 206B     		ldr	r0, [r4, #48]
 2658 0314 364B     		ldr	r3, .L163+8
 2659 0316 3749     		ldr	r1, .L163+12
 2660 0318 9847     		blx	r3
 2661              	.LVL253:
 2662              	.L138:
 590:src/lcd.c     ****   //  t20->inv = 0;
 2663              		.loc 1 590 3 is_stmt 0 view .LVU529
 2664              	.LBE95:
 2665              	.LBE94:
 515:src/lcd.c     ****       lcd_setXY (t20, 285, Y_ANNUNC-30);
 2666              		.loc 1 515 7 is_stmt 1 view .LVU530
 2667 031a 334C     		ldr	r4, .L163
ARM GAS  /tmp/ccb1Ng7p.s 			page 66


 516:src/lcd.c     ****       lcd_writeText(t20, "RAD");
 2668              		.loc 1 516 7 is_stmt 0 view .LVU531
 2669 031c 334B     		ldr	r3, .L163+4
 515:src/lcd.c     ****       lcd_setXY (t20, 285, Y_ANNUNC-30);
 2670              		.loc 1 515 7 view .LVU532
 2671 031e 206B     		ldr	r0, [r4, #48]
 516:src/lcd.c     ****       lcd_writeText(t20, "RAD");
 2672              		.loc 1 516 7 view .LVU533
 2673 0320 40F21D11 		movw	r1, #285
 515:src/lcd.c     ****       lcd_setXY (t20, 285, Y_ANNUNC-30);
 2674              		.loc 1 515 16 view .LVU534
 2675 0324 4574     		strb	r5, [r0, #17]
 516:src/lcd.c     ****       lcd_writeText(t20, "RAD");
 2676              		.loc 1 516 7 is_stmt 1 view .LVU535
 2677 0326 2D22     		movs	r2, #45
 2678 0328 9847     		blx	r3
 2679              	.LVL254:
 517:src/lcd.c     ****       return;
 2680              		.loc 1 517 7 view .LVU536
 2681 032a 206B     		ldr	r0, [r4, #48]
 2682 032c 304B     		ldr	r3, .L163+8
 2683 032e 3249     		ldr	r1, .L163+16
 2684 0330 A3E7     		b	.L154
 2685              	.LVL255:
 2686              	.L129:
 517:src/lcd.c     ****       return;
 2687              		.loc 1 517 7 is_stmt 0 view .LVU537
 2688 0332 DDB2     		uxtb	r5, r3
 2689 0334 F1E7     		b	.L138
 2690              	.L128:
 520:src/lcd.c     ****       lcd_setXY (t20, 325, Y_ANNUNC-30);
 2691              		.loc 1 520 7 is_stmt 1 view .LVU538
 2692 0336 2C4C     		ldr	r4, .L163
 2693              	.LVL256:
 521:src/lcd.c     ****       lcd_writeText(t20, "DEG");
 2694              		.loc 1 521 7 is_stmt 0 view .LVU539
 2695 0338 2C4D     		ldr	r5, .L163+4
 520:src/lcd.c     ****       lcd_setXY (t20, 325, Y_ANNUNC-30);
 2696              		.loc 1 520 7 view .LVU540
 2697 033a 206B     		ldr	r0, [r4, #48]
 521:src/lcd.c     ****       lcd_writeText(t20, "DEG");
 2698              		.loc 1 521 7 view .LVU541
 2699 033c 40F24511 		movw	r1, #325
 520:src/lcd.c     ****       lcd_setXY (t20, 325, Y_ANNUNC-30);
 2700              		.loc 1 520 16 view .LVU542
 2701 0340 4374     		strb	r3, [r0, #17]
 521:src/lcd.c     ****       lcd_writeText(t20, "DEG");
 2702              		.loc 1 521 7 is_stmt 1 view .LVU543
 2703 0342 2D22     		movs	r2, #45
 2704 0344 A847     		blx	r5
 2705              	.LVL257:
 522:src/lcd.c     ****       return;
 2706              		.loc 1 522 7 view .LVU544
 2707 0346 206B     		ldr	r0, [r4, #48]
 2708 0348 294B     		ldr	r3, .L163+8
 2709 034a 2C49     		ldr	r1, .L163+20
 2710 034c 95E7     		b	.L154
ARM GAS  /tmp/ccb1Ng7p.s 			page 67


 2711              	.LVL258:
 2712              	.L121:
 412:src/lcd.c     ****       return;
 2713              		.loc 1 412 7 view .LVU545
 2714              	.LBB96:
 2715              	.LBI96:
 159:src/lcd.c     ****   exp_right_side(i, j, col);
 2716              		.loc 1 159 6 view .LVU546
 2717              	.LBB97:
 160:src/lcd.c     **** }
 2718              		.loc 1 160 3 view .LVU547
 2719 034e 2246     		mov	r2, r4
 2720 0350 8221     		movs	r1, #130
 2721              	.LVL259:
 2722              	.L157:
 160:src/lcd.c     **** }
 2723              		.loc 1 160 3 is_stmt 0 view .LVU548
 2724              	.LBE97:
 2725              	.LBE96:
 538:src/lcd.c     **** 
 2726              		.loc 1 538 1 view .LVU549
 2727 0352 02B0     		add	sp, sp, #8
 2728              		.cfi_remember_state
 2729              		.cfi_def_cfa_offset 16
 2730              		@ sp needed
 2731 0354 BDE87040 		pop	{r4, r5, r6, lr}
 2732              		.cfi_restore 14
 2733              		.cfi_restore 6
 2734              		.cfi_restore 5
 2735              		.cfi_restore 4
 2736              		.cfi_def_cfa_offset 0
 2737              	.LVL260:
 2738              	.LBB98:
 2739              	.LBB99:
 163:src/lcd.c     **** }
 2740              		.loc 1 163 3 view .LVU550
 2741 0358 FFF7FEBF 		b	exp_right_side
 2742              	.LVL261:
 2743              	.L120:
 2744              		.cfi_restore_state
 163:src/lcd.c     **** }
 2745              		.loc 1 163 3 view .LVU551
 2746              	.LBE99:
 2747              	.LBE98:
 415:src/lcd.c     ****       return;
 2748              		.loc 1 415 7 is_stmt 1 view .LVU552
 2749              	.LBB101:
 2750              	.LBI101:
 150:src/lcd.c     ****   exp_left_side(i, j+11, col);
 2751              		.loc 1 150 6 view .LVU553
 2752              	.LBB102:
 151:src/lcd.c     **** }
 2753              		.loc 1 151 3 view .LVU554
 2754 035c 2246     		mov	r2, r4
 2755 035e 8D21     		movs	r1, #141
 2756              	.LVL262:
 2757              	.L155:
ARM GAS  /tmp/ccb1Ng7p.s 			page 68


 151:src/lcd.c     **** }
 2758              		.loc 1 151 3 is_stmt 0 view .LVU555
 2759              	.LBE102:
 2760              	.LBE101:
 538:src/lcd.c     **** 
 2761              		.loc 1 538 1 view .LVU556
 2762 0360 02B0     		add	sp, sp, #8
 2763              		.cfi_remember_state
 2764              		.cfi_def_cfa_offset 16
 2765              		@ sp needed
 2766 0362 BDE87040 		pop	{r4, r5, r6, lr}
 2767              		.cfi_restore 14
 2768              		.cfi_restore 6
 2769              		.cfi_restore 5
 2770              		.cfi_restore 4
 2771              		.cfi_def_cfa_offset 0
 2772              	.LVL263:
 2773              	.LBB104:
 2774              	.LBB103:
 151:src/lcd.c     **** }
 2775              		.loc 1 151 3 view .LVU557
 2776 0366 FFF7FEBF 		b	exp_left_side
 2777              	.LVL264:
 2778              	.L119:
 2779              		.cfi_restore_state
 151:src/lcd.c     **** }
 2780              		.loc 1 151 3 view .LVU558
 2781              	.LBE103:
 2782              	.LBE104:
 418:src/lcd.c     ****       return;
 2783              		.loc 1 418 7 is_stmt 1 view .LVU559
 2784 036a 2246     		mov	r2, r4
 2785 036c 8221     		movs	r1, #130
 538:src/lcd.c     **** 
 2786              		.loc 1 538 1 is_stmt 0 view .LVU560
 2787 036e 02B0     		add	sp, sp, #8
 2788              		.cfi_remember_state
 2789              		.cfi_def_cfa_offset 16
 2790              		@ sp needed
 2791 0370 BDE87040 		pop	{r4, r5, r6, lr}
 2792              		.cfi_restore 14
 2793              		.cfi_restore 6
 2794              		.cfi_restore 5
 2795              		.cfi_restore 4
 2796              		.cfi_def_cfa_offset 0
 2797              	.LVL265:
 418:src/lcd.c     ****       return;
 2798              		.loc 1 418 7 view .LVU561
 2799 0374 FFF7FEBF 		b	exp_bottom
 2800              	.LVL266:
 2801              	.L117:
 2802              		.cfi_restore_state
 421:src/lcd.c     ****       return;
 2803              		.loc 1 421 7 is_stmt 1 view .LVU562
 2804              	.LBB105:
 2805              	.LBI98:
 162:src/lcd.c     ****   exp_right_side(i-1, j+11, col);
ARM GAS  /tmp/ccb1Ng7p.s 			page 69


 2806              		.loc 1 162 6 view .LVU563
 2807              	.LBB100:
 163:src/lcd.c     **** }
 2808              		.loc 1 163 3 view .LVU564
 2809 0378 2246     		mov	r2, r4
 2810 037a 03F25710 		addw	r0, r3, #343
 2811              	.LVL267:
 163:src/lcd.c     **** }
 2812              		.loc 1 163 3 is_stmt 0 view .LVU565
 2813 037e 8D21     		movs	r1, #141
 2814 0380 E7E7     		b	.L157
 2815              	.LVL268:
 2816              	.L123:
 163:src/lcd.c     **** }
 2817              		.loc 1 163 3 view .LVU566
 2818              	.LBE100:
 2819              	.LBE105:
 406:src/lcd.c     ****       return;
 2820              		.loc 1 406 7 is_stmt 1 view .LVU567
 2821              	.LBB106:
 2822              	.LBI106:
 147:src/lcd.c     ****   exp_left_side(i+1, j, col);
 2823              		.loc 1 147 6 view .LVU568
 2824              	.LBB107:
 148:src/lcd.c     **** }
 2825              		.loc 1 148 3 view .LVU569
 2826 0382 2246     		mov	r2, r4
 2827 0384 03F25910 		addw	r0, r3, #345
 2828              	.LVL269:
 148:src/lcd.c     **** }
 2829              		.loc 1 148 3 is_stmt 0 view .LVU570
 2830 0388 8221     		movs	r1, #130
 2831 038a E9E7     		b	.L155
 2832              	.LVL270:
 2833              	.L122:
 148:src/lcd.c     **** }
 2834              		.loc 1 148 3 view .LVU571
 2835              	.LBE107:
 2836              	.LBE106:
 409:src/lcd.c     ****       return;
 2837              		.loc 1 409 7 is_stmt 1 view .LVU572
 2838 038c 2246     		mov	r2, r4
 2839 038e 8221     		movs	r1, #130
 2840 0390 24E7     		b	.L156
 2841              	.LVL271:
 2842              	.L160:
 531:src/lcd.c     ****     return;
 2843              		.loc 1 531 5 view .LVU573
 531:src/lcd.c     ****     return;
 2844              		.loc 1 531 74 is_stmt 0 view .LVU574
 2845 0392 1B4B     		ldr	r3, .L163+24
 531:src/lcd.c     ****     return;
 2846              		.loc 1 531 5 view .LVU575
 2847 0394 0094     		str	r4, [sp]
 531:src/lcd.c     ****     return;
 2848              		.loc 1 531 39 view .LVU576
 2849 0396 8E38     		subs	r0, r0, #142
ARM GAS  /tmp/ccb1Ng7p.s 			page 70


 2850              	.LVL272:
 531:src/lcd.c     ****     return;
 2851              		.loc 1 531 74 view .LVU577
 2852 0398 A3FB0023 		umull	r2, r3, r3, r0
 2853 039c 9B08     		lsrs	r3, r3, #2
 2854 039e 03EB4302 		add	r2, r3, r3, lsl #1
 2855 03a2 A0EB4200 		sub	r0, r0, r2, lsl #1
 2856              	.LVL273:
 531:src/lcd.c     ****     return;
 2857              		.loc 1 531 77 view .LVU578
 2858 03a6 00EB4000 		add	r0, r0, r0, lsl #1
 2859 03aa 4100     		lsls	r1, r0, #1
 531:src/lcd.c     ****     return;
 2860              		.loc 1 531 35 view .LVU579
 2861 03ac 03EB8303 		add	r3, r3, r3, lsl #2
 531:src/lcd.c     ****     return;
 2862              		.loc 1 531 5 view .LVU580
 2863 03b0 03F11000 		add	r0, r3, #16
 2864 03b4 134C     		ldr	r4, .L163+28
 2865              	.LVL274:
 531:src/lcd.c     ****     return;
 2866              		.loc 1 531 5 view .LVU581
 2867 03b6 5431     		adds	r1, r1, #84
 2868 03b8 0523     		movs	r3, #5
 2869 03ba 0422     		movs	r2, #4
 2870 03bc A047     		blx	r4
 2871              	.LVL275:
 532:src/lcd.c     ****   }
 2872              		.loc 1 532 5 is_stmt 1 view .LVU582
 2873 03be 7AE6     		b	.L101
 2874              	.LVL276:
 2875              	.L158:
 2876              	.LBB108:
 481:src/lcd.c     **** 	    dots[BEG] = 7;
 2877              		.loc 1 481 4 view .LVU583
 481:src/lcd.c     **** 	    dots[BEG] = 7;
 2878              		.loc 1 481 7 is_stmt 0 view .LVU584
 2879 03c0 002A     		cmp	r2, #0
 2880 03c2 3FF477AF 		beq	.L150
 2881 03c6 73E6     		b	.L149
 2882              	.L143:
 495:src/lcd.c     **** 	    draw_BEG(4, 0);
 2883              		.loc 1 495 6 is_stmt 1 view .LVU585
 2884 03c8 0121     		movs	r1, #1
 2885 03ca 0820     		movs	r0, #8
 2886              	.LVL277:
 495:src/lcd.c     **** 	    draw_BEG(4, 0);
 2887              		.loc 1 495 6 is_stmt 0 view .LVU586
 2888 03cc FFF7FEFF 		bl	draw_BEG
 2889              	.LVL278:
 495:src/lcd.c     **** 	    draw_BEG(4, 0);
 2890              		.loc 1 495 6 view .LVU587
 2891 03d0 66E7     		b	.L148
 2892              	.LVL279:
 2893              	.L116:
 495:src/lcd.c     **** 	    draw_BEG(4, 0);
 2894              		.loc 1 495 6 view .LVU588
ARM GAS  /tmp/ccb1Ng7p.s 			page 71


 2895              	.LBE108:
 403:src/lcd.c     ****       return;
 2896              		.loc 1 403 7 is_stmt 1 view .LVU589
 2897 03d2 2246     		mov	r2, r4
 2898 03d4 8221     		movs	r1, #130
 538:src/lcd.c     **** 
 2899              		.loc 1 538 1 is_stmt 0 view .LVU590
 2900 03d6 02B0     		add	sp, sp, #8
 2901              		@ sp needed
 2902 03d8 BDE87040 		pop	{r4, r5, r6, lr}
 2903              	.LVL280:
 403:src/lcd.c     ****       return;
 2904              		.loc 1 403 7 view .LVU591
 2905 03dc FFF7FEBF 		b	exp_top
 2906              	.LVL281:
 2907              	.L125:
 429:src/lcd.c     ****       return;
 2908              		.loc 1 429 7 is_stmt 1 view .LVU592
 2909 03e0 2246     		mov	r2, r4
 2910 03e2 8221     		movs	r1, #130
 2911 03e4 0120     		movs	r0, #1
 2912              	.LVL282:
 429:src/lcd.c     ****       return;
 2913              		.loc 1 429 7 is_stmt 0 view .LVU593
 2914 03e6 B9E6     		b	.L152
 2915              	.L164:
 2916              		.align	2
 2917              	.L163:
 2918 03e8 00200010 		.word	268443648
 2919 03ec 6D020008 		.word	134218349
 2920 03f0 7D020008 		.word	134218365
 2921 03f4 00000000 		.word	.LC4
 2922 03f8 0C000000 		.word	.LC9
 2923 03fc 10000000 		.word	.LC10
 2924 0400 ABAAAAAA 		.word	-1431655765
 2925 0404 3D020008 		.word	134218301
 2926              		.cfi_endproc
 2927              	.LFE26:
 2929              		.section	.text.set_dot,"ax",%progbits
 2930              		.align	1
 2931              		.p2align 2,,3
 2932              		.global	set_dot
 2933              		.syntax unified
 2934              		.thumb
 2935              		.thumb_func
 2936              		.fpu fpv4-sp-d16
 2938              	set_dot:
 2939              	.LVL283:
 2940              	.LFB0:
  39:src/lcd.c     ****   dots[n] |= 1;
 2941              		.loc 1 39 21 is_stmt 1 view -0
 2942              		.cfi_startproc
 2943              		@ args = 0, pretend = 0, frame = 0
 2944              		@ frame_needed = 0, uses_anonymous_args = 0
  40:src/lcd.c     ****   if (dots[n]&2) return;
 2945              		.loc 1 40 3 view .LVU595
  39:src/lcd.c     ****   dots[n] |= 1;
ARM GAS  /tmp/ccb1Ng7p.s 			page 72


 2946              		.loc 1 39 21 is_stmt 0 view .LVU596
 2947 0000 38B5     		push	{r3, r4, r5, lr}
 2948              		.cfi_def_cfa_offset 16
 2949              		.cfi_offset 3, -16
 2950              		.cfi_offset 4, -12
 2951              		.cfi_offset 5, -8
 2952              		.cfi_offset 14, -4
  40:src/lcd.c     ****   if (dots[n]&2) return;
 2953              		.loc 1 40 11 view .LVU597
 2954 0002 074D     		ldr	r5, .L169
 2955 0004 2B5C     		ldrb	r3, [r5, r0]	@ zero_extendqisi2
 2956 0006 43F00102 		orr	r2, r3, #1
  41:src/lcd.c     ****   draw_dot(n);
 2957              		.loc 1 41 6 view .LVU598
 2958 000a 9B07     		lsls	r3, r3, #30
  40:src/lcd.c     ****   if (dots[n]&2) return;
 2959              		.loc 1 40 11 view .LVU599
 2960 000c 2A54     		strb	r2, [r5, r0]
  41:src/lcd.c     ****   draw_dot(n);
 2961              		.loc 1 41 3 is_stmt 1 view .LVU600
  41:src/lcd.c     ****   draw_dot(n);
 2962              		.loc 1 41 6 is_stmt 0 view .LVU601
 2963 000e 00D5     		bpl	.L168
  44:src/lcd.c     **** void clr_dot(int n) {
 2964              		.loc 1 44 1 view .LVU602
 2965 0010 38BD     		pop	{r3, r4, r5, pc}
 2966              	.L168:
 2967 0012 0446     		mov	r4, r0
  42:src/lcd.c     ****   dots[n] = 3; // 11;
 2968              		.loc 1 42 3 is_stmt 1 view .LVU603
 2969 0014 FFF7FEFF 		bl	draw_dot
 2970              	.LVL284:
  43:src/lcd.c     **** }
 2971              		.loc 1 43 3 view .LVU604
  43:src/lcd.c     **** }
 2972              		.loc 1 43 11 is_stmt 0 view .LVU605
 2973 0018 0323     		movs	r3, #3
 2974 001a 2B55     		strb	r3, [r5, r4]
  44:src/lcd.c     **** void clr_dot(int n) {
 2975              		.loc 1 44 1 view .LVU606
 2976 001c 38BD     		pop	{r3, r4, r5, pc}
 2977              	.LVL285:
 2978              	.L170:
  44:src/lcd.c     **** void clr_dot(int n) {
 2979              		.loc 1 44 1 view .LVU607
 2980 001e 00BF     		.align	2
 2981              	.L169:
 2982 0020 00000000 		.word	.LANCHOR0
 2983              		.cfi_endproc
 2984              	.LFE0:
 2986              		.section	.text.clr_dot,"ax",%progbits
 2987              		.align	1
 2988              		.p2align 2,,3
 2989              		.global	clr_dot
 2990              		.syntax unified
 2991              		.thumb
 2992              		.thumb_func
ARM GAS  /tmp/ccb1Ng7p.s 			page 73


 2993              		.fpu fpv4-sp-d16
 2995              	clr_dot:
 2996              	.LVL286:
 2997              	.LFB1:
  45:src/lcd.c     ****   dots[n] &= ~1;
 2998              		.loc 1 45 21 is_stmt 1 view -0
 2999              		.cfi_startproc
 3000              		@ args = 0, pretend = 0, frame = 0
 3001              		@ frame_needed = 0, uses_anonymous_args = 0
  46:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 3002              		.loc 1 46 3 view .LVU609
  45:src/lcd.c     ****   dots[n] &= ~1;
 3003              		.loc 1 45 21 is_stmt 0 view .LVU610
 3004 0000 38B5     		push	{r3, r4, r5, lr}
 3005              		.cfi_def_cfa_offset 16
 3006              		.cfi_offset 3, -16
 3007              		.cfi_offset 4, -12
 3008              		.cfi_offset 5, -8
 3009              		.cfi_offset 14, -4
  46:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 3010              		.loc 1 46 11 view .LVU611
 3011 0002 074D     		ldr	r5, .L178
 3012 0004 2B5C     		ldrb	r3, [r5, r0]	@ zero_extendqisi2
 3013 0006 23F00102 		bic	r2, r3, #1
  47:src/lcd.c     ****   draw_dot(n);
 3014              		.loc 1 47 6 view .LVU612
 3015 000a 9B07     		lsls	r3, r3, #30
  46:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 3016              		.loc 1 46 11 view .LVU613
 3017 000c 2A54     		strb	r2, [r5, r0]
  47:src/lcd.c     ****   draw_dot(n);
 3018              		.loc 1 47 3 is_stmt 1 view .LVU614
  47:src/lcd.c     ****   draw_dot(n);
 3019              		.loc 1 47 6 is_stmt 0 view .LVU615
 3020 000e 00D4     		bmi	.L177
  50:src/lcd.c     **** 
 3021              		.loc 1 50 1 view .LVU616
 3022 0010 38BD     		pop	{r3, r4, r5, pc}
 3023              	.L177:
 3024 0012 0446     		mov	r4, r0
  48:src/lcd.c     ****   dots[n] = 0; // =0 would work too.
 3025              		.loc 1 48 3 is_stmt 1 view .LVU617
 3026 0014 FFF7FEFF 		bl	draw_dot
 3027              	.LVL287:
  49:src/lcd.c     **** }
 3028              		.loc 1 49 3 view .LVU618
  49:src/lcd.c     **** }
 3029              		.loc 1 49 11 is_stmt 0 view .LVU619
 3030 0018 0023     		movs	r3, #0
 3031 001a 2B55     		strb	r3, [r5, r4]
  50:src/lcd.c     **** 
 3032              		.loc 1 50 1 view .LVU620
 3033 001c 38BD     		pop	{r3, r4, r5, pc}
 3034              	.LVL288:
 3035              	.L179:
  50:src/lcd.c     **** 
 3036              		.loc 1 50 1 view .LVU621
ARM GAS  /tmp/ccb1Ng7p.s 			page 74


 3037 001e 00BF     		.align	2
 3038              	.L178:
 3039 0020 00000000 		.word	.LANCHOR0
 3040              		.cfi_endproc
 3041              	.LFE1:
 3043              		.section	.text.finish_7_segment,"ax",%progbits
 3044              		.align	1
 3045              		.p2align 2,,3
 3046              		.global	finish_7_segment
 3047              		.syntax unified
 3048              		.thumb
 3049              		.thumb_func
 3050              		.fpu fpv4-sp-d16
 3052              	finish_7_segment:
 3053              	.LFB29:
 561:src/lcd.c     ****   for (int i = 0; i <= EXP_SIGN; ++i) {
 3054              		.loc 1 561 29 is_stmt 1 view -0
 3055              		.cfi_startproc
 3056              		@ args = 0, pretend = 0, frame = 0
 3057              		@ frame_needed = 0, uses_anonymous_args = 0
 562:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3058              		.loc 1 562 3 view .LVU623
 3059              	.LBB109:
 562:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3060              		.loc 1 562 8 view .LVU624
 3061              	.LVL289:
 562:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3062              		.loc 1 562 19 view .LVU625
 3063              	.LBE109:
 561:src/lcd.c     ****   for (int i = 0; i <= EXP_SIGN; ++i) {
 3064              		.loc 1 561 29 is_stmt 0 view .LVU626
 3065 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3066              		.cfi_def_cfa_offset 24
 3067              		.cfi_offset 3, -24
 3068              		.cfi_offset 4, -20
 3069              		.cfi_offset 5, -16
 3070              		.cfi_offset 6, -12
 3071              		.cfi_offset 7, -8
 3072              		.cfi_offset 14, -4
 3073 0002 0D4C     		ldr	r4, .L191
 3074              	.LBB116:
 3075              	.LBB110:
 3076              	.LBB111:
  49:src/lcd.c     **** }
 3077              		.loc 1 49 11 view .LVU627
 3078 0004 0027     		movs	r7, #0
 3079 0006 04F18306 		add	r6, r4, #131
 3080 000a 6542     		rsbs	r5, r4, #0
 3081 000c 01E0     		b	.L184
 3082              	.LVL290:
 3083              	.L182:
  49:src/lcd.c     **** }
 3084              		.loc 1 49 11 view .LVU628
 3085              	.LBE111:
 3086              	.LBE110:
 562:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3087              		.loc 1 562 34 is_stmt 1 discriminator 2 view .LVU629
ARM GAS  /tmp/ccb1Ng7p.s 			page 75


 562:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3088              		.loc 1 562 19 discriminator 2 view .LVU630
 562:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3089              		.loc 1 562 3 is_stmt 0 discriminator 2 view .LVU631
 3090 000e B442     		cmp	r4, r6
 3091 0010 10D0     		beq	.L190
 3092              	.LVL291:
 3093              	.L184:
 562:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3094              		.loc 1 562 3 discriminator 2 view .LVU632
 3095 0012 2819     		adds	r0, r5, r4
 3096              	.LVL292:
 563:src/lcd.c     ****   }
 3097              		.loc 1 563 5 is_stmt 1 view .LVU633
 563:src/lcd.c     ****   }
 3098              		.loc 1 563 14 is_stmt 0 view .LVU634
 3099 0014 14F8013F 		ldrb	r3, [r4, #1]!	@ zero_extendqisi2
 563:src/lcd.c     ****   }
 3100              		.loc 1 563 8 view .LVU635
 3101 0018 03F00302 		and	r2, r3, #3
 3102 001c 022A     		cmp	r2, #2
 3103 001e F6D1     		bne	.L182
 563:src/lcd.c     ****   }
 3104              		.loc 1 563 27 is_stmt 1 view .LVU636
 3105              	.LVL293:
 3106              	.LBB114:
 3107              	.LBI110:
  45:src/lcd.c     ****   dots[n] &= ~1;
 3108              		.loc 1 45 6 view .LVU637
 3109              	.LBB112:
  46:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 3110              		.loc 1 46 3 view .LVU638
  48:src/lcd.c     ****   dots[n] = 0; // =0 would work too.
 3111              		.loc 1 48 3 view .LVU639
  46:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 3112              		.loc 1 46 11 is_stmt 0 view .LVU640
 3113 0020 23F00102 		bic	r2, r3, #1
  47:src/lcd.c     ****   draw_dot(n);
 3114              		.loc 1 47 6 view .LVU641
 3115 0024 9B07     		lsls	r3, r3, #30
  46:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 3116              		.loc 1 46 11 view .LVU642
 3117 0026 2270     		strb	r2, [r4]
  47:src/lcd.c     ****   draw_dot(n);
 3118              		.loc 1 47 3 is_stmt 1 view .LVU643
  47:src/lcd.c     ****   draw_dot(n);
 3119              		.loc 1 47 6 is_stmt 0 view .LVU644
 3120 0028 F1D5     		bpl	.L182
  48:src/lcd.c     ****   dots[n] = 0; // =0 would work too.
 3121              		.loc 1 48 3 view .LVU645
 3122 002a FFF7FEFF 		bl	draw_dot
 3123              	.LVL294:
  49:src/lcd.c     **** }
 3124              		.loc 1 49 3 is_stmt 1 view .LVU646
 3125              	.LBE112:
 3126              	.LBE114:
 562:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
ARM GAS  /tmp/ccb1Ng7p.s 			page 76


 3127              		.loc 1 562 3 is_stmt 0 view .LVU647
 3128 002e B442     		cmp	r4, r6
 3129              	.LBB115:
 3130              	.LBB113:
  49:src/lcd.c     **** }
 3131              		.loc 1 49 11 view .LVU648
 3132 0030 2770     		strb	r7, [r4]
 3133              	.LVL295:
  49:src/lcd.c     **** }
 3134              		.loc 1 49 11 view .LVU649
 3135              	.LBE113:
 3136              	.LBE115:
 562:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3137              		.loc 1 562 34 is_stmt 1 view .LVU650
 562:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3138              		.loc 1 562 19 view .LVU651
 562:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3139              		.loc 1 562 3 is_stmt 0 view .LVU652
 3140 0032 EED1     		bne	.L184
 3141              	.LVL296:
 3142              	.L190:
 562:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3143              		.loc 1 562 3 view .LVU653
 3144              	.LBE116:
 565:src/lcd.c     **** 
 3145              		.loc 1 565 1 view .LVU654
 3146 0034 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3147              	.L192:
 3148 0036 00BF     		.align	2
 3149              	.L191:
 3150 0038 FFFFFFFF 		.word	.LANCHOR0-1
 3151              		.cfi_endproc
 3152              	.LFE29:
 3154              		.section	.text.finish_top_row,"ax",%progbits
 3155              		.align	1
 3156              		.p2align 2,,3
 3157              		.global	finish_top_row
 3158              		.syntax unified
 3159              		.thumb
 3160              		.thumb_func
 3161              		.fpu fpv4-sp-d16
 3163              	finish_top_row:
 3164              	.LFB30:
 568:src/lcd.c     ****  for (int i = MB_TOP; i < TOP_DOTS; ++i) {
 3165              		.loc 1 568 27 is_stmt 1 view -0
 3166              		.cfi_startproc
 3167              		@ args = 0, pretend = 0, frame = 0
 3168              		@ frame_needed = 0, uses_anonymous_args = 0
 569:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3169              		.loc 1 569 2 view .LVU656
 3170              	.LBB117:
 569:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3171              		.loc 1 569 7 view .LVU657
 3172              	.LVL297:
 569:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3173              		.loc 1 569 23 view .LVU658
 3174              	.LBE117:
ARM GAS  /tmp/ccb1Ng7p.s 			page 77


 568:src/lcd.c     ****  for (int i = MB_TOP; i < TOP_DOTS; ++i) {
 3175              		.loc 1 568 27 is_stmt 0 view .LVU659
 3176 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3177              		.cfi_def_cfa_offset 24
 3178              		.cfi_offset 3, -24
 3179              		.cfi_offset 4, -20
 3180              		.cfi_offset 5, -16
 3181              		.cfi_offset 6, -12
 3182              		.cfi_offset 7, -8
 3183              		.cfi_offset 14, -4
 3184 0002 0E4C     		ldr	r4, .L204
 3185 0004 C4F51275 		rsb	r5, r4, #584
 3186 0008 0235     		adds	r5, r5, #2
 3187 000a 04F58176 		add	r6, r4, #258
 3188              	.LBB124:
 3189              	.LBB118:
 3190              	.LBB119:
  49:src/lcd.c     **** }
 3191              		.loc 1 49 11 view .LVU660
 3192 000e 0027     		movs	r7, #0
 3193 0010 01E0     		b	.L197
 3194              	.LVL298:
 3195              	.L195:
  49:src/lcd.c     **** }
 3196              		.loc 1 49 11 view .LVU661
 3197              	.LBE119:
 3198              	.LBE118:
 569:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3199              		.loc 1 569 37 is_stmt 1 discriminator 2 view .LVU662
 569:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3200              		.loc 1 569 23 discriminator 2 view .LVU663
 569:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3201              		.loc 1 569 2 is_stmt 0 discriminator 2 view .LVU664
 3202 0012 B442     		cmp	r4, r6
 3203 0014 10D0     		beq	.L203
 3204              	.LVL299:
 3205              	.L197:
 569:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3206              		.loc 1 569 2 discriminator 2 view .LVU665
 3207 0016 2819     		adds	r0, r5, r4
 3208              	.LVL300:
 570:src/lcd.c     ****   }
 3209              		.loc 1 570 5 is_stmt 1 view .LVU666
 570:src/lcd.c     ****   }
 3210              		.loc 1 570 14 is_stmt 0 view .LVU667
 3211 0018 14F8013F 		ldrb	r3, [r4, #1]!	@ zero_extendqisi2
 570:src/lcd.c     ****   }
 3212              		.loc 1 570 8 view .LVU668
 3213 001c 03F00302 		and	r2, r3, #3
 3214 0020 022A     		cmp	r2, #2
 3215 0022 F6D1     		bne	.L195
 570:src/lcd.c     ****   }
 3216              		.loc 1 570 27 is_stmt 1 view .LVU669
 3217              	.LVL301:
 3218              	.LBB122:
 3219              	.LBI118:
  45:src/lcd.c     ****   dots[n] &= ~1;
ARM GAS  /tmp/ccb1Ng7p.s 			page 78


 3220              		.loc 1 45 6 view .LVU670
 3221              	.LBB120:
  46:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 3222              		.loc 1 46 3 view .LVU671
  48:src/lcd.c     ****   dots[n] = 0; // =0 would work too.
 3223              		.loc 1 48 3 view .LVU672
  46:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 3224              		.loc 1 46 11 is_stmt 0 view .LVU673
 3225 0024 23F00102 		bic	r2, r3, #1
  47:src/lcd.c     ****   draw_dot(n);
 3226              		.loc 1 47 6 view .LVU674
 3227 0028 9B07     		lsls	r3, r3, #30
  46:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 3228              		.loc 1 46 11 view .LVU675
 3229 002a 2270     		strb	r2, [r4]
  47:src/lcd.c     ****   draw_dot(n);
 3230              		.loc 1 47 3 is_stmt 1 view .LVU676
  47:src/lcd.c     ****   draw_dot(n);
 3231              		.loc 1 47 6 is_stmt 0 view .LVU677
 3232 002c F1D5     		bpl	.L195
  48:src/lcd.c     ****   dots[n] = 0; // =0 would work too.
 3233              		.loc 1 48 3 view .LVU678
 3234 002e FFF7FEFF 		bl	draw_dot
 3235              	.LVL302:
  49:src/lcd.c     **** }
 3236              		.loc 1 49 3 is_stmt 1 view .LVU679
 3237              	.LBE120:
 3238              	.LBE122:
 569:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3239              		.loc 1 569 2 is_stmt 0 view .LVU680
 3240 0032 B442     		cmp	r4, r6
 3241              	.LBB123:
 3242              	.LBB121:
  49:src/lcd.c     **** }
 3243              		.loc 1 49 11 view .LVU681
 3244 0034 2770     		strb	r7, [r4]
 3245              	.LVL303:
  49:src/lcd.c     **** }
 3246              		.loc 1 49 11 view .LVU682
 3247              	.LBE121:
 3248              	.LBE123:
 569:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3249              		.loc 1 569 37 is_stmt 1 view .LVU683
 569:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3250              		.loc 1 569 23 view .LVU684
 569:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3251              		.loc 1 569 2 is_stmt 0 view .LVU685
 3252 0036 EED1     		bne	.L197
 3253              	.LVL304:
 3254              	.L203:
 569:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3255              		.loc 1 569 2 view .LVU686
 3256              	.LBE124:
 572:src/lcd.c     **** #endif
 3257              		.loc 1 572 1 view .LVU687
 3258 0038 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3259              	.L205:
ARM GAS  /tmp/ccb1Ng7p.s 			page 79


 3260 003a 00BF     		.align	2
 3261              	.L204:
 3262 003c 49020000 		.word	.LANCHOR0+585
 3263              		.cfi_endproc
 3264              	.LFE30:
 3266              		.section	.rodata.draw_PRT.str1.4,"aMS",%progbits,1
 3267              		.align	2
 3268              	.LC11:
 3269 0000 50525400 		.ascii	"PRT\000"
 3270              		.section	.text.draw_PRT,"ax",%progbits
 3271              		.align	1
 3272              		.p2align 2,,3
 3273              		.global	draw_PRT
 3274              		.syntax unified
 3275              		.thumb
 3276              		.thumb_func
 3277              		.fpu fpv4-sp-d16
 3279              	draw_PRT:
 3280              	.LFB34:
 609:src/lcd.c     **** 
 610:src/lcd.c     **** void draw_PRT (void) {
 3281              		.loc 1 610 22 is_stmt 1 view -0
 3282              		.cfi_startproc
 3283              		@ args = 0, pretend = 0, frame = 0
 3284              		@ frame_needed = 0, uses_anonymous_args = 0
 611:src/lcd.c     ****   t20->inv = !UState.print_on;
 3285              		.loc 1 611 3 view .LVU689
 3286              		.loc 1 611 14 is_stmt 0 view .LVU690
 3287 0000 0A4B     		ldr	r3, .L208
 3288 0002 1B68     		ldr	r3, [r3]
 610:src/lcd.c     ****   t20->inv = !UState.print_on;
 3289              		.loc 1 610 22 view .LVU691
 3290 0004 70B5     		push	{r4, r5, r6, lr}
 3291              		.cfi_def_cfa_offset 16
 3292              		.cfi_offset 4, -16
 3293              		.cfi_offset 5, -12
 3294              		.cfi_offset 6, -8
 3295              		.cfi_offset 14, -4
 3296              		.loc 1 611 12 view .LVU692
 3297 0006 93F8E437 		ldrb	r3, [r3, #2020]	@ zero_extendqisi2
 3298              		.loc 1 611 3 view .LVU693
 3299 000a 094C     		ldr	r4, .L208+4
 612:src/lcd.c     ****   lcd_setXY(t20, 250, Y_ANNUNC-70);
 3300              		.loc 1 612 3 view .LVU694
 3301 000c 094D     		ldr	r5, .L208+8
 611:src/lcd.c     ****   t20->inv = !UState.print_on;
 3302              		.loc 1 611 3 view .LVU695
 3303 000e 206B     		ldr	r0, [r4, #48]
 611:src/lcd.c     ****   t20->inv = !UState.print_on;
 3304              		.loc 1 611 12 view .LVU696
 3305 0010 DB43     		mvns	r3, r3
 3306 0012 03F00103 		and	r3, r3, #1
 3307 0016 4374     		strb	r3, [r0, #17]
 3308              		.loc 1 612 3 is_stmt 1 view .LVU697
 3309 0018 FA21     		movs	r1, #250
 3310 001a 0522     		movs	r2, #5
 3311 001c A847     		blx	r5
ARM GAS  /tmp/ccb1Ng7p.s 			page 80


 3312              	.LVL305:
 613:src/lcd.c     ****   lcd_writeText(t20,"PRT");
 3313              		.loc 1 613 3 view .LVU698
 3314 001e 206B     		ldr	r0, [r4, #48]
 3315 0020 054B     		ldr	r3, .L208+12
 3316 0022 0649     		ldr	r1, .L208+16
 614:src/lcd.c     **** }
 3317              		.loc 1 614 1 is_stmt 0 view .LVU699
 3318 0024 BDE87040 		pop	{r4, r5, r6, lr}
 3319              		.cfi_restore 14
 3320              		.cfi_restore 6
 3321              		.cfi_restore 5
 3322              		.cfi_restore 4
 3323              		.cfi_def_cfa_offset 0
 613:src/lcd.c     ****   lcd_writeText(t20,"PRT");
 3324              		.loc 1 613 3 view .LVU700
 3325 0028 1847     		bx	r3	@ indirect register sibling call
 3326              	.LVL306:
 3327              	.L209:
 3328 002a 00BF     		.align	2
 3329              	.L208:
 3330 002c 00000000 		.word	main_ram
 3331 0030 00200010 		.word	268443648
 3332 0034 6D020008 		.word	134218349
 3333 0038 7D020008 		.word	134218365
 3334 003c 00000000 		.word	.LC11
 3335              		.cfi_endproc
 3336              	.LFE34:
 3338              		.section	.text.finish_display,"ax",%progbits
 3339              		.align	1
 3340              		.p2align 2,,3
 3341              		.global	finish_display
 3342              		.syntax unified
 3343              		.thumb
 3344              		.thumb_func
 3345              		.fpu fpv4-sp-d16
 3347              	finish_display:
 3348              	.LFB28:
 552:src/lcd.c     ****   draw_PRT();
 3349              		.loc 1 552 27 is_stmt 1 view -0
 3350              		.cfi_startproc
 3351              		@ args = 0, pretend = 0, frame = 0
 3352              		@ frame_needed = 0, uses_anonymous_args = 0
 553:src/lcd.c     ****   finish_7_segment();
 3353              		.loc 1 553 3 view .LVU702
 552:src/lcd.c     ****   draw_PRT();
 3354              		.loc 1 552 27 is_stmt 0 view .LVU703
 3355 0000 10B5     		push	{r4, lr}
 3356              		.cfi_def_cfa_offset 8
 3357              		.cfi_offset 4, -8
 3358              		.cfi_offset 14, -4
 553:src/lcd.c     ****   finish_7_segment();
 3359              		.loc 1 553 3 view .LVU704
 3360 0002 FFF7FEFF 		bl	draw_PRT
 3361              	.LVL307:
 554:src/lcd.c     **** #ifdef TOP_ROW
 3362              		.loc 1 554 3 is_stmt 1 view .LVU705
ARM GAS  /tmp/ccb1Ng7p.s 			page 81


 3363 0006 FFF7FEFF 		bl	finish_7_segment
 3364              	.LVL308:
 556:src/lcd.c     **** #endif
 3365              		.loc 1 556 3 view .LVU706
 3366 000a FFF7FEFF 		bl	finish_top_row
 3367              	.LVL309:
 558:src/lcd.c     **** }
 3368              		.loc 1 558 3 view .LVU707
 559:src/lcd.c     **** 
 3369              		.loc 1 559 1 is_stmt 0 view .LVU708
 3370 000e BDE81040 		pop	{r4, lr}
 3371              		.cfi_restore 14
 3372              		.cfi_restore 4
 3373              		.cfi_def_cfa_offset 0
 558:src/lcd.c     **** }
 3374              		.loc 1 558 3 view .LVU709
 3375 0012 014B     		ldr	r3, .L212
 3376 0014 1847     		bx	r3	@ indirect register sibling call
 3377              	.LVL310:
 3378              	.L213:
 3379 0016 00BF     		.align	2
 3380              	.L212:
 3381 0018 31020008 		.word	134218289
 3382              		.cfi_endproc
 3383              	.LFE28:
 3385              		.section	.text.finish_PRT,"ax",%progbits
 3386              		.align	1
 3387              		.p2align 2,,3
 3388              		.global	finish_PRT
 3389              		.syntax unified
 3390              		.thumb
 3391              		.thumb_func
 3392              		.fpu fpv4-sp-d16
 3394              	finish_PRT:
 3395              	.LFB35:
 615:src/lcd.c     **** 
 616:src/lcd.c     **** void finish_PRT (void) {
 3396              		.loc 1 616 24 is_stmt 1 view -0
 3397              		.cfi_startproc
 3398              		@ args = 0, pretend = 0, frame = 0
 3399              		@ frame_needed = 0, uses_anonymous_args = 0
 617:src/lcd.c     ****   draw_PRT();
 3400              		.loc 1 617 3 view .LVU711
 616:src/lcd.c     ****   draw_PRT();
 3401              		.loc 1 616 24 is_stmt 0 view .LVU712
 3402 0000 10B5     		push	{r4, lr}
 3403              		.cfi_def_cfa_offset 8
 3404              		.cfi_offset 4, -8
 3405              		.cfi_offset 14, -4
 3406              		.loc 1 617 3 view .LVU713
 3407 0002 FFF7FEFF 		bl	draw_PRT
 3408              	.LVL311:
 618:src/lcd.c     ****   lcd_refresh();
 3409              		.loc 1 618 3 is_stmt 1 view .LVU714
 619:src/lcd.c     **** }
 3410              		.loc 1 619 1 is_stmt 0 view .LVU715
 3411 0006 BDE81040 		pop	{r4, lr}
ARM GAS  /tmp/ccb1Ng7p.s 			page 82


 3412              		.cfi_restore 14
 3413              		.cfi_restore 4
 3414              		.cfi_def_cfa_offset 0
 618:src/lcd.c     ****   lcd_refresh();
 3415              		.loc 1 618 3 view .LVU716
 3416 000a 014B     		ldr	r3, .L216
 3417 000c 1847     		bx	r3	@ indirect register sibling call
 3418              	.LVL312:
 3419              	.L217:
 3420 000e 00BF     		.align	2
 3421              	.L216:
 3422 0010 31020008 		.word	134218289
 3423              		.cfi_endproc
 3424              	.LFE35:
 3426              		.section	.text.finish_LEQ,"ax",%progbits
 3427              		.align	1
 3428              		.p2align 2,,3
 3429              		.global	finish_LEQ
 3430              		.syntax unified
 3431              		.thumb
 3432              		.thumb_func
 3433              		.fpu fpv4-sp-d16
 3435              	finish_LEQ:
 3436              	.LFB36:
 620:src/lcd.c     **** 
 621:src/lcd.c     **** void finish_LEQ(void) { // refreshes the LEQ flag only
 3437              		.loc 1 621 23 is_stmt 1 view -0
 3438              		.cfi_startproc
 3439              		@ args = 0, pretend = 0, frame = 0
 3440              		@ frame_needed = 0, uses_anonymous_args = 0
 3441              		@ link register save eliminated.
 622:src/lcd.c     ****   lcd_refresh();
 3442              		.loc 1 622 3 view .LVU718
 3443 0000 004B     		ldr	r3, .L219
 3444 0002 1847     		bx	r3	@ indirect register sibling call
 3445              	.LVL313:
 3446              	.L220:
 3447              		.align	2
 3448              	.L219:
 3449 0004 31020008 		.word	134218289
 3450              		.cfi_endproc
 3451              	.LFE36:
 3453              		.section	.text.do_all_dots,"ax",%progbits
 3454              		.align	1
 3455              		.p2align 2,,3
 3456              		.global	do_all_dots
 3457              		.syntax unified
 3458              		.thumb
 3459              		.thumb_func
 3460              		.fpu fpv4-sp-d16
 3462              	do_all_dots:
 3463              	.LFB37:
 623:src/lcd.c     **** }
 624:src/lcd.c     ****   
 625:src/lcd.c     **** extern void all_menu_dots (void);
 626:src/lcd.c     **** 
 627:src/lcd.c     **** void do_all_dots(void) {
ARM GAS  /tmp/ccb1Ng7p.s 			page 83


 3464              		.loc 1 627 24 view -0
 3465              		.cfi_startproc
 3466              		@ args = 0, pretend = 0, frame = 0
 3467              		@ frame_needed = 0, uses_anonymous_args = 0
 628:src/lcd.c     ****   for (int i=0; i<TOP_DOTS; i++) {
 3468              		.loc 1 628 3 view .LVU720
 3469              	.LBB125:
 3470              		.loc 1 628 8 view .LVU721
 3471              	.LVL314:
 3472              		.loc 1 628 17 view .LVU722
 3473              	.LBE125:
 627:src/lcd.c     ****   for (int i=0; i<TOP_DOTS; i++) {
 3474              		.loc 1 627 24 is_stmt 0 view .LVU723
 3475 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3476              		.cfi_def_cfa_offset 24
 3477              		.cfi_offset 4, -24
 3478              		.cfi_offset 5, -20
 3479              		.cfi_offset 6, -16
 3480              		.cfi_offset 7, -12
 3481              		.cfi_offset 8, -8
 3482              		.cfi_offset 14, -4
 3483 0004 1A4C     		ldr	r4, .L234
 3484              	.LBB130:
 3485              	.LBB126:
 3486              	.LBB127:
  43:src/lcd.c     **** }
 3487              		.loc 1 43 11 view .LVU724
 3488 0006 0327     		movs	r7, #3
 3489 0008 04F10108 		add	r8, r4, #1
 3490 000c 04F55376 		add	r6, r4, #844
 3491 0010 6542     		rsbs	r5, r4, #0
 3492              	.LVL315:
 3493              	.L223:
  42:src/lcd.c     ****   dots[n] = 3; // 11;
 3494              		.loc 1 42 3 is_stmt 1 view .LVU725
 3495 0012 2819     		adds	r0, r5, r4
 3496              	.LVL316:
  42:src/lcd.c     ****   dots[n] = 3; // 11;
 3497              		.loc 1 42 3 is_stmt 0 view .LVU726
 3498              	.LBE127:
 3499              	.LBE126:
 629:src/lcd.c     ****     set_dot(i);
 3500              		.loc 1 629 5 is_stmt 1 view .LVU727
 3501              	.LBB129:
 3502              	.LBI126:
  39:src/lcd.c     ****   dots[n] |= 1;
 3503              		.loc 1 39 6 view .LVU728
 3504              	.LBB128:
  40:src/lcd.c     ****   if (dots[n]&2) return;
 3505              		.loc 1 40 3 view .LVU729
  40:src/lcd.c     ****   if (dots[n]&2) return;
 3506              		.loc 1 40 11 is_stmt 0 view .LVU730
 3507 0014 14F8013F 		ldrb	r3, [r4, #1]!	@ zero_extendqisi2
 3508 0018 43F00102 		orr	r2, r3, #1
  41:src/lcd.c     ****   draw_dot(n);
 3509              		.loc 1 41 6 view .LVU731
 3510 001c 9907     		lsls	r1, r3, #30
ARM GAS  /tmp/ccb1Ng7p.s 			page 84


  40:src/lcd.c     ****   if (dots[n]&2) return;
 3511              		.loc 1 40 11 view .LVU732
 3512 001e 2270     		strb	r2, [r4]
  41:src/lcd.c     ****   draw_dot(n);
 3513              		.loc 1 41 3 is_stmt 1 view .LVU733
  41:src/lcd.c     ****   draw_dot(n);
 3514              		.loc 1 41 6 is_stmt 0 view .LVU734
 3515 0020 02D4     		bmi	.L222
  42:src/lcd.c     ****   dots[n] = 3; // 11;
 3516              		.loc 1 42 3 view .LVU735
 3517 0022 FFF7FEFF 		bl	draw_dot
 3518              	.LVL317:
  43:src/lcd.c     **** }
 3519              		.loc 1 43 3 is_stmt 1 view .LVU736
  43:src/lcd.c     **** }
 3520              		.loc 1 43 11 is_stmt 0 view .LVU737
 3521 0026 2770     		strb	r7, [r4]
 3522              	.L222:
 3523              	.LVL318:
  43:src/lcd.c     **** }
 3524              		.loc 1 43 11 view .LVU738
 3525              	.LBE128:
 3526              	.LBE129:
 628:src/lcd.c     ****     set_dot(i);
 3527              		.loc 1 628 29 is_stmt 1 view .LVU739
 628:src/lcd.c     ****     set_dot(i);
 3528              		.loc 1 628 17 view .LVU740
 628:src/lcd.c     ****     set_dot(i);
 3529              		.loc 1 628 3 is_stmt 0 view .LVU741
 3530 0028 B442     		cmp	r4, r6
 3531 002a F2D1     		bne	.L223
 3532              	.LBE130:
 630:src/lcd.c     ****   }
 631:src/lcd.c     ****   all_menu_dots();
 3533              		.loc 1 631 3 is_stmt 1 view .LVU742
 3534 002c FFF7FEFF 		bl	all_menu_dots
 3535              	.LVL319:
 632:src/lcd.c     ****   finish_display();
 3536              		.loc 1 632 3 view .LVU743
 3537 0030 FFF7FEFF 		bl	finish_display
 3538              	.LVL320:
 633:src/lcd.c     ****   clr_dot(RCL_annun);
 3539              		.loc 1 633 3 view .LVU744
 3540              	.LBB131:
 3541              	.LBI131:
  45:src/lcd.c     ****   dots[n] &= ~1;
 3542              		.loc 1 45 6 view .LVU745
 3543              	.LBB132:
  46:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 3544              		.loc 1 46 3 view .LVU746
  46:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 3545              		.loc 1 46 11 is_stmt 0 view .LVU747
 3546 0034 98F88A30 		ldrb	r3, [r8, #138]	@ zero_extendqisi2
 3547 0038 23F00102 		bic	r2, r3, #1
 3548 003c 88F88A20 		strb	r2, [r8, #138]
  47:src/lcd.c     ****   draw_dot(n);
 3549              		.loc 1 47 3 is_stmt 1 view .LVU748
ARM GAS  /tmp/ccb1Ng7p.s 			page 85


  47:src/lcd.c     ****   draw_dot(n);
 3550              		.loc 1 47 6 is_stmt 0 view .LVU749
 3551 0040 9A07     		lsls	r2, r3, #30
 3552 0042 05D5     		bpl	.L224
  48:src/lcd.c     ****   dots[n] = 0; // =0 would work too.
 3553              		.loc 1 48 3 is_stmt 1 view .LVU750
 3554 0044 8A20     		movs	r0, #138
 3555 0046 FFF7FEFF 		bl	draw_dot
 3556              	.LVL321:
  49:src/lcd.c     **** }
 3557              		.loc 1 49 3 view .LVU751
  49:src/lcd.c     **** }
 3558              		.loc 1 49 11 is_stmt 0 view .LVU752
 3559 004a 0023     		movs	r3, #0
 3560 004c 88F88A30 		strb	r3, [r8, #138]
 3561              	.L224:
 3562              	.LVL322:
  49:src/lcd.c     **** }
 3563              		.loc 1 49 11 view .LVU753
 3564              	.LBE132:
 3565              	.LBE131:
 634:src/lcd.c     ****   clr_dot(LIT_EQ);
 3566              		.loc 1 634 3 is_stmt 1 view .LVU754
 3567              	.LBB133:
 3568              	.LBI133:
  45:src/lcd.c     ****   dots[n] &= ~1;
 3569              		.loc 1 45 6 view .LVU755
 3570              	.LBB134:
  46:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 3571              		.loc 1 46 3 view .LVU756
  46:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 3572              		.loc 1 46 11 is_stmt 0 view .LVU757
 3573 0050 98F88430 		ldrb	r3, [r8, #132]	@ zero_extendqisi2
 3574 0054 23F00102 		bic	r2, r3, #1
  47:src/lcd.c     ****   draw_dot(n);
 3575              		.loc 1 47 6 view .LVU758
 3576 0058 9B07     		lsls	r3, r3, #30
  46:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 3577              		.loc 1 46 11 view .LVU759
 3578 005a 88F88420 		strb	r2, [r8, #132]
  47:src/lcd.c     ****   draw_dot(n);
 3579              		.loc 1 47 3 is_stmt 1 view .LVU760
  47:src/lcd.c     ****   draw_dot(n);
 3580              		.loc 1 47 6 is_stmt 0 view .LVU761
 3581 005e 05D5     		bpl	.L221
  48:src/lcd.c     ****   dots[n] = 0; // =0 would work too.
 3582              		.loc 1 48 3 is_stmt 1 view .LVU762
 3583 0060 8420     		movs	r0, #132
 3584 0062 FFF7FEFF 		bl	draw_dot
 3585              	.LVL323:
  49:src/lcd.c     **** }
 3586              		.loc 1 49 3 view .LVU763
  49:src/lcd.c     **** }
 3587              		.loc 1 49 11 is_stmt 0 view .LVU764
 3588 0066 0023     		movs	r3, #0
 3589 0068 88F88430 		strb	r3, [r8, #132]
 3590              	.LVL324:
ARM GAS  /tmp/ccb1Ng7p.s 			page 86


 3591              	.L221:
  49:src/lcd.c     **** }
 3592              		.loc 1 49 11 view .LVU765
 3593              	.LBE134:
 3594              	.LBE133:
 635:src/lcd.c     **** }
 3595              		.loc 1 635 1 view .LVU766
 3596 006c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3597              	.LVL325:
 3598              	.L235:
 3599              		.loc 1 635 1 view .LVU767
 3600              		.align	2
 3601              	.L234:
 3602 0070 FFFFFFFF 		.word	.LANCHOR0-1
 3603              		.cfi_endproc
 3604              	.LFE37:
 3606              		.section	.text.show_progtrace,"ax",%progbits
 3607              		.align	1
 3608              		.p2align 2,,3
 3609              		.global	show_progtrace
 3610              		.syntax unified
 3611              		.thumb
 3612              		.thumb_func
 3613              		.fpu fpv4-sp-d16
 3615              	show_progtrace:
 3616              	.LVL326:
 3617              	.LFB38:
 636:src/lcd.c     **** 
 637:src/lcd.c     **** void show_progtrace(char *buf) {
 3618              		.loc 1 637 32 is_stmt 1 view -0
 3619              		.cfi_startproc
 3620              		@ args = 0, pretend = 0, frame = 0
 3621              		@ frame_needed = 0, uses_anonymous_args = 0
 3622              		@ link register save eliminated.
 638:src/lcd.c     **** }
 3623              		.loc 1 638 1 view .LVU769
 3624 0000 7047     		bx	lr
 3625              		.cfi_endproc
 3626              	.LFE38:
 3628 0002 00BF     		.section	.text.show_stack,"ax",%progbits
 3629              		.align	1
 3630              		.p2align 2,,3
 3631              		.global	show_stack
 3632              		.syntax unified
 3633              		.thumb
 3634              		.thumb_func
 3635              		.fpu fpv4-sp-d16
 3637              	show_stack:
 3638              	.LFB46:
 3639              		.cfi_startproc
 3640              		@ args = 0, pretend = 0, frame = 0
 3641              		@ frame_needed = 0, uses_anonymous_args = 0
 3642              		@ link register save eliminated.
 3643 0000 7047     		bx	lr
 3644              		.cfi_endproc
 3645              	.LFE46:
 3647 0002 00BF     		.section	.text.show_flags,"ax",%progbits
ARM GAS  /tmp/ccb1Ng7p.s 			page 87


 3648              		.align	1
 3649              		.p2align 2,,3
 3650              		.global	show_flags
 3651              		.syntax unified
 3652              		.thumb
 3653              		.thumb_func
 3654              		.fpu fpv4-sp-d16
 3656              	show_flags:
 3657              	.LFB44:
 3658              		.cfi_startproc
 3659              		@ args = 0, pretend = 0, frame = 0
 3660              		@ frame_needed = 0, uses_anonymous_args = 0
 3661              		@ link register save eliminated.
 3662 0000 7047     		bx	lr
 3663              		.cfi_endproc
 3664              	.LFE44:
 3666 0002 00BF     		.section	.text.wait_for_display,"ax",%progbits
 3667              		.align	1
 3668              		.p2align 2,,3
 3669              		.global	wait_for_display
 3670              		.syntax unified
 3671              		.thumb
 3672              		.thumb_func
 3673              		.fpu fpv4-sp-d16
 3675              	wait_for_display:
 3676              	.LFB41:
 639:src/lcd.c     **** 
 640:src/lcd.c     **** void show_stack(void) {
 641:src/lcd.c     **** }
 642:src/lcd.c     **** 
 643:src/lcd.c     **** void show_flags(void) {
 644:src/lcd.c     **** }
 645:src/lcd.c     **** 
 646:src/lcd.c     **** void wait_for_display(void)
 647:src/lcd.c     **** {
 3677              		.loc 1 647 1 view -0
 3678              		.cfi_startproc
 3679              		@ args = 0, pretend = 0, frame = 0
 3680              		@ frame_needed = 0, uses_anonymous_args = 0
 3681              		@ link register save eliminated.
 648:src/lcd.c     **** }
 3682              		.loc 1 648 1 view .LVU771
 3683 0000 7047     		bx	lr
 3684              		.cfi_endproc
 3685              	.LFE41:
 3687 0002 00BF     		.section	.bss.dots,"aw",%nobits
 3688              		.align	2
 3689              		.set	.LANCHOR0,. + 0
 3692              	dots:
 3693 0000 00000000 		.space	844
 3693      00000000 
 3693      00000000 
 3693      00000000 
 3693      00000000 
 3694              		.text
 3695              	.Letext0:
 3696              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
ARM GAS  /tmp/ccb1Ng7p.s 			page 88


 3697              		.file 3 "dmcp/ff_ifc.h"
 3698              		.file 4 "dmcp/dmcp.h"
 3699              		.file 5 "src/decNumber/decContext.h"
 3700              		.file 6 "src/decNumber/decNumber.h"
 3701              		.file 7 "src/decNumber/decimal64.h"
 3702              		.file 8 "src/decNumber/decimal128.h"
 3703              		.file 9 "src/xeq.h"
 3704              		.file 10 "src/data.h"
 3705              		.file 11 "src/display.h"
 3706              		.file 12 "src/storage.h"
 3707              		.file 13 "src/pretty.h"
ARM GAS  /tmp/ccb1Ng7p.s 			page 89


DEFINED SYMBOLS
                            *ABS*:0000000000000000 lcd.c
     /tmp/ccb1Ng7p.s:18     .rodata.draw_BEG.part.0.str1.4:0000000000000000 $d
     /tmp/ccb1Ng7p.s:22     .text.draw_BEG.part.0:0000000000000000 $t
     /tmp/ccb1Ng7p.s:30     .text.draw_BEG.part.0:0000000000000000 draw_BEG.part.0
     /tmp/ccb1Ng7p.s:49     .text.draw_BEG.part.0:000000000000000c $d
     /tmp/ccb1Ng7p.s:56     .text.is_dot:0000000000000000 $t
     /tmp/ccb1Ng7p.s:64     .text.is_dot:0000000000000000 is_dot
     /tmp/ccb1Ng7p.s:84     .text.is_dot:000000000000000c $d
     /tmp/ccb1Ng7p.s:89     .text.clear_disp:0000000000000000 $t
     /tmp/ccb1Ng7p.s:97     .text.clear_disp:0000000000000000 clear_disp
     /tmp/ccb1Ng7p.s:134    .text.clear_disp:0000000000000014 $d
     /tmp/ccb1Ng7p.s:140    .text.reset_disp:0000000000000000 $t
     /tmp/ccb1Ng7p.s:148    .text.reset_disp:0000000000000000 reset_disp
     /tmp/ccb1Ng7p.s:290    .text.reset_disp:0000000000000058 $d
     /tmp/ccb1Ng7p.s:295    .text.reset_7_segment:0000000000000000 $t
     /tmp/ccb1Ng7p.s:303    .text.reset_7_segment:0000000000000000 reset_7_segment
     /tmp/ccb1Ng7p.s:340    .text.reset_7_segment:0000000000000014 $d
     /tmp/ccb1Ng7p.s:345    .text.left_side:0000000000000000 $t
     /tmp/ccb1Ng7p.s:353    .text.left_side:0000000000000000 left_side
     /tmp/ccb1Ng7p.s:437    .text.left_side:0000000000000054 $d
     /tmp/ccb1Ng7p.s:442    .text.left_side_top:0000000000000000 $t
     /tmp/ccb1Ng7p.s:450    .text.left_side_top:0000000000000000 left_side_top
     /tmp/ccb1Ng7p.s:466    .text.left_side_bottom:0000000000000000 $t
     /tmp/ccb1Ng7p.s:474    .text.left_side_bottom:0000000000000000 left_side_bottom
     /tmp/ccb1Ng7p.s:496    .text.right_side:0000000000000000 $t
     /tmp/ccb1Ng7p.s:504    .text.right_side:0000000000000000 right_side
     /tmp/ccb1Ng7p.s:588    .text.right_side:000000000000005c $d
     /tmp/ccb1Ng7p.s:593    .text.right_side_top:0000000000000000 $t
     /tmp/ccb1Ng7p.s:601    .text.right_side_top:0000000000000000 right_side_top
     /tmp/ccb1Ng7p.s:617    .text.right_side_bottom:0000000000000000 $t
     /tmp/ccb1Ng7p.s:625    .text.right_side_bottom:0000000000000000 right_side_bottom
     /tmp/ccb1Ng7p.s:647    .text.top:0000000000000000 $t
     /tmp/ccb1Ng7p.s:655    .text.top:0000000000000000 top
     /tmp/ccb1Ng7p.s:724    .text.top:0000000000000040 $d
     /tmp/ccb1Ng7p.s:729    .text.middle:0000000000000000 $t
     /tmp/ccb1Ng7p.s:737    .text.middle:0000000000000000 middle
     /tmp/ccb1Ng7p.s:804    .text.middle:0000000000000040 $d
     /tmp/ccb1Ng7p.s:809    .text.bottom:0000000000000000 $t
     /tmp/ccb1Ng7p.s:817    .text.bottom:0000000000000000 bottom
     /tmp/ccb1Ng7p.s:889    .text.bottom:0000000000000048 $d
     /tmp/ccb1Ng7p.s:894    .text.decimal:0000000000000000 $t
     /tmp/ccb1Ng7p.s:902    .text.decimal:0000000000000000 decimal
     /tmp/ccb1Ng7p.s:940    .text.decimal:0000000000000018 $d
     /tmp/ccb1Ng7p.s:945    .text.comma:0000000000000000 $t
     /tmp/ccb1Ng7p.s:953    .text.comma:0000000000000000 comma
     /tmp/ccb1Ng7p.s:1009   .text.comma:000000000000002c $d
     /tmp/ccb1Ng7p.s:1014   .text.exp_left_side:0000000000000000 $t
     /tmp/ccb1Ng7p.s:1022   .text.exp_left_side:0000000000000000 exp_left_side
     /tmp/ccb1Ng7p.s:1091   .text.exp_left_side:0000000000000040 $d
     /tmp/ccb1Ng7p.s:1096   .text.exp_left_side_top:0000000000000000 $t
     /tmp/ccb1Ng7p.s:1104   .text.exp_left_side_top:0000000000000000 exp_left_side_top
     /tmp/ccb1Ng7p.s:1123   .text.exp_left_side_bottom:0000000000000000 $t
     /tmp/ccb1Ng7p.s:1131   .text.exp_left_side_bottom:0000000000000000 exp_left_side_bottom
     /tmp/ccb1Ng7p.s:1150   .text.exp_right_side:0000000000000000 $t
     /tmp/ccb1Ng7p.s:1158   .text.exp_right_side:0000000000000000 exp_right_side
     /tmp/ccb1Ng7p.s:1227   .text.exp_right_side:0000000000000044 $d
ARM GAS  /tmp/ccb1Ng7p.s 			page 90


     /tmp/ccb1Ng7p.s:1232   .text.exp_right_side_top:0000000000000000 $t
     /tmp/ccb1Ng7p.s:1240   .text.exp_right_side_top:0000000000000000 exp_right_side_top
     /tmp/ccb1Ng7p.s:1256   .text.exp_right_side_bottom:0000000000000000 $t
     /tmp/ccb1Ng7p.s:1264   .text.exp_right_side_bottom:0000000000000000 exp_right_side_bottom
     /tmp/ccb1Ng7p.s:1286   .text.exp_top:0000000000000000 $t
     /tmp/ccb1Ng7p.s:1294   .text.exp_top:0000000000000000 exp_top
     /tmp/ccb1Ng7p.s:1355   .text.exp_top:0000000000000034 $d
     /tmp/ccb1Ng7p.s:1360   .text.exp_bottom:0000000000000000 $t
     /tmp/ccb1Ng7p.s:1368   .text.exp_bottom:0000000000000000 exp_bottom
     /tmp/ccb1Ng7p.s:1432   .text.exp_bottom:0000000000000038 $d
     /tmp/ccb1Ng7p.s:1437   .text.exp_middle:0000000000000000 $t
     /tmp/ccb1Ng7p.s:1445   .text.exp_middle:0000000000000000 exp_middle
     /tmp/ccb1Ng7p.s:1512   .text.exp_middle:0000000000000040 $d
     /tmp/ccb1Ng7p.s:1517   .rodata.draw_BEG.str1.4:0000000000000000 $d
     /tmp/ccb1Ng7p.s:1521   .text.draw_BEG:0000000000000000 $t
     /tmp/ccb1Ng7p.s:1529   .text.draw_BEG:0000000000000000 draw_BEG
     /tmp/ccb1Ng7p.s:1600   .text.draw_BEG:0000000000000030 $d
     /tmp/ccb1Ng7p.s:1608   .rodata.draw_RPN.str1.4:0000000000000000 $d
     /tmp/ccb1Ng7p.s:1615   .text.draw_RPN:0000000000000000 $t
     /tmp/ccb1Ng7p.s:1623   .text.draw_RPN:0000000000000000 draw_RPN
     /tmp/ccb1Ng7p.s:1697   .text.draw_RPN:0000000000000044 $d
     /tmp/ccb1Ng7p.s:1707   .rodata.draw_RCL.str1.4:0000000000000000 $d
     /tmp/ccb1Ng7p.s:1711   .text.draw_RCL:0000000000000000 $t
     /tmp/ccb1Ng7p.s:1719   .text.draw_RCL:0000000000000000 draw_RCL
     /tmp/ccb1Ng7p.s:1768   .text.draw_RCL:0000000000000020 $d
     /tmp/ccb1Ng7p.s:1776   .rodata.draw_LEQ.str1.4:0000000000000000 $d
     /tmp/ccb1Ng7p.s:1783   .text.draw_LEQ:0000000000000000 $t
     /tmp/ccb1Ng7p.s:1791   .text.draw_LEQ:0000000000000000 draw_LEQ
     /tmp/ccb1Ng7p.s:1859   .text.draw_LEQ:0000000000000044 $d
     /tmp/ccb1Ng7p.s:1870   .rodata.draw_dot.str1.4:0000000000000000 $d
     /tmp/ccb1Ng7p.s:1883   .text.draw_dot:0000000000000000 $t
     /tmp/ccb1Ng7p.s:1891   .text.draw_dot:0000000000000000 draw_dot
     /tmp/ccb1Ng7p.s:1950   .text.draw_dot:000000000000003c $d
     /tmp/ccb1Ng7p.s:1994   .text.draw_dot:0000000000000076 $d
     /tmp/ccb1Ng7p.s:2001   .text.draw_dot:0000000000000082 $t
     /tmp/ccb1Ng7p.s:2127   .text.draw_dot:000000000000010c $d
     /tmp/ccb1Ng7p.s:2140   .text.draw_dot:000000000000013c $t
     /tmp/ccb1Ng7p.s:2622   .text.draw_dot:00000000000002d4 $d
     /tmp/ccb1Ng7p.s:2641   .text.draw_dot:0000000000000300 $t
     /tmp/ccb1Ng7p.s:2918   .text.draw_dot:00000000000003e8 $d
     /tmp/ccb1Ng7p.s:2930   .text.set_dot:0000000000000000 $t
     /tmp/ccb1Ng7p.s:2938   .text.set_dot:0000000000000000 set_dot
     /tmp/ccb1Ng7p.s:2982   .text.set_dot:0000000000000020 $d
     /tmp/ccb1Ng7p.s:2987   .text.clr_dot:0000000000000000 $t
     /tmp/ccb1Ng7p.s:2995   .text.clr_dot:0000000000000000 clr_dot
     /tmp/ccb1Ng7p.s:3039   .text.clr_dot:0000000000000020 $d
     /tmp/ccb1Ng7p.s:3044   .text.finish_7_segment:0000000000000000 $t
     /tmp/ccb1Ng7p.s:3052   .text.finish_7_segment:0000000000000000 finish_7_segment
     /tmp/ccb1Ng7p.s:3150   .text.finish_7_segment:0000000000000038 $d
     /tmp/ccb1Ng7p.s:3155   .text.finish_top_row:0000000000000000 $t
     /tmp/ccb1Ng7p.s:3163   .text.finish_top_row:0000000000000000 finish_top_row
     /tmp/ccb1Ng7p.s:3262   .text.finish_top_row:000000000000003c $d
     /tmp/ccb1Ng7p.s:3267   .rodata.draw_PRT.str1.4:0000000000000000 $d
     /tmp/ccb1Ng7p.s:3271   .text.draw_PRT:0000000000000000 $t
     /tmp/ccb1Ng7p.s:3279   .text.draw_PRT:0000000000000000 draw_PRT
     /tmp/ccb1Ng7p.s:3330   .text.draw_PRT:000000000000002c $d
     /tmp/ccb1Ng7p.s:3339   .text.finish_display:0000000000000000 $t
ARM GAS  /tmp/ccb1Ng7p.s 			page 91


     /tmp/ccb1Ng7p.s:3347   .text.finish_display:0000000000000000 finish_display
     /tmp/ccb1Ng7p.s:3381   .text.finish_display:0000000000000018 $d
     /tmp/ccb1Ng7p.s:3386   .text.finish_PRT:0000000000000000 $t
     /tmp/ccb1Ng7p.s:3394   .text.finish_PRT:0000000000000000 finish_PRT
     /tmp/ccb1Ng7p.s:3422   .text.finish_PRT:0000000000000010 $d
     /tmp/ccb1Ng7p.s:3427   .text.finish_LEQ:0000000000000000 $t
     /tmp/ccb1Ng7p.s:3435   .text.finish_LEQ:0000000000000000 finish_LEQ
     /tmp/ccb1Ng7p.s:3449   .text.finish_LEQ:0000000000000004 $d
     /tmp/ccb1Ng7p.s:3454   .text.do_all_dots:0000000000000000 $t
     /tmp/ccb1Ng7p.s:3462   .text.do_all_dots:0000000000000000 do_all_dots
     /tmp/ccb1Ng7p.s:3602   .text.do_all_dots:0000000000000070 $d
     /tmp/ccb1Ng7p.s:3607   .text.show_progtrace:0000000000000000 $t
     /tmp/ccb1Ng7p.s:3615   .text.show_progtrace:0000000000000000 show_progtrace
     /tmp/ccb1Ng7p.s:3629   .text.show_stack:0000000000000000 $t
     /tmp/ccb1Ng7p.s:3637   .text.show_stack:0000000000000000 show_stack
     /tmp/ccb1Ng7p.s:3648   .text.show_flags:0000000000000000 $t
     /tmp/ccb1Ng7p.s:3656   .text.show_flags:0000000000000000 show_flags
     /tmp/ccb1Ng7p.s:3667   .text.wait_for_display:0000000000000000 $t
     /tmp/ccb1Ng7p.s:3675   .text.wait_for_display:0000000000000000 wait_for_display
     /tmp/ccb1Ng7p.s:3688   .bss.dots:0000000000000000 $d
     /tmp/ccb1Ng7p.s:3692   .bss.dots:0000000000000000 dots
     /tmp/ccb1Ng7p.s:1960   .text.draw_dot:0000000000000045 $d
     /tmp/ccb1Ng7p.s:1960   .text.draw_dot:0000000000000046 $t

UNDEFINED SYMBOLS
dot
main_ram
all_menu_dots

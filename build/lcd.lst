ARM GAS  /tmp/ccYbhZ84.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"lcd.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata.draw_BEG.part.0.str1.4,"aMS",%progbits,1
  18              		.align	2
  19              	.LC0:
  20 0000 533A3400 		.ascii	"S:4\000"
  21              		.section	.text.draw_BEG.part.0,"ax",%progbits
  22              		.align	1
  23              		.p2align 2,,3
  24              		.arch armv7e-m
  25              		.syntax unified
  26              		.thumb
  27              		.thumb_func
  28              		.fpu fpv4-sp-d16
  30              	draw_BEG.part.0:
  31              	.LFB42:
  32              		.file 1 "src/lcd.c"
   1:src/lcd.c     **** /* This file is part of 34S.
   2:src/lcd.c     ****  * 
   3:src/lcd.c     ****  * 34S is free software: you can redistribute it and/or modify
   4:src/lcd.c     ****  * it under the terms of the GNU General Public License as published by
   5:src/lcd.c     ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/lcd.c     ****  * (at your option) any later version.
   7:src/lcd.c     ****  * 
   8:src/lcd.c     ****  * 34S is distributed in the hope that it will be useful,
   9:src/lcd.c     ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/lcd.c     ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/lcd.c     ****  * GNU General Public License for more details.
  12:src/lcd.c     ****  * 
  13:src/lcd.c     ****  * You should have received a copy of the GNU General Public License
  14:src/lcd.c     ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/lcd.c     ****  */
  16:src/lcd.c     **** 
  17:src/lcd.c     **** #ifdef DM42
  18:src/lcd.c     **** #include "dmcp.h"
  19:src/lcd.c     **** #endif
  20:src/lcd.c     **** 
  21:src/lcd.c     **** #define DM42SAFE
  22:src/lcd.c     **** #include "lcd.h"
  23:src/lcd.c     **** #include "display.h"
  24:src/lcd.c     **** #include "xeq.h"
  25:src/lcd.c     **** 
  26:src/lcd.c     **** #if defined(INCLUDE_C_LOCK) || defined(INFRARED)
ARM GAS  /tmp/ccYbhZ84.s 			page 2


  27:src/lcd.c     **** #include "data.h"
  28:src/lcd.c     **** #include "storage.h"
  29:src/lcd.c     **** #endif
  30:src/lcd.c     **** 
  31:src/lcd.c     **** #undef DM42SAFE
  32:src/lcd.c     **** 
  33:src/lcd.c     **** #include "pretty.h"
  34:src/lcd.c     **** 
  35:src/lcd.c     **** 
  36:src/lcd.c     **** static unsigned char dots[TOP_DOTS];
  37:src/lcd.c     **** 
  38:src/lcd.c     **** /* Some wrapper routines to set segments of the display */
  39:src/lcd.c     **** void set_dot(int n) {
  40:src/lcd.c     ****   dots[n] |= 1;
  41:src/lcd.c     ****   if (dots[n]&2) return;
  42:src/lcd.c     ****   draw_dot(n);
  43:src/lcd.c     ****   dots[n] = 3; // 11;
  44:src/lcd.c     **** }
  45:src/lcd.c     **** void clr_dot(int n) {
  46:src/lcd.c     ****   dots[n] &= ~1;
  47:src/lcd.c     ****   if ( !(dots[n]&2)) return;
  48:src/lcd.c     ****   draw_dot(n);
  49:src/lcd.c     ****   dots[n] = 0; // =0 would work too.
  50:src/lcd.c     **** }
  51:src/lcd.c     **** 
  52:src/lcd.c     **** int is_dot(int n) {
  53:src/lcd.c     **** 	return dots[n]&1;
  54:src/lcd.c     **** }
  55:src/lcd.c     **** 
  56:src/lcd.c     **** void clear_disp(void) {
  57:src/lcd.c     ****       for (int i=0; i<TOP_DOTS; i++)
  58:src/lcd.c     **** 	dots[i] = 0;
  59:src/lcd.c     ****       lcd_clear_buf();
  60:src/lcd.c     **** }
  61:src/lcd.c     ****   
  62:src/lcd.c     **** void reset_disp(void) {
  63:src/lcd.c     ****   clr_dot(STO_annun); // gets turned back on if needed;
  64:src/lcd.c     ****   int rcl = is_dot(RCL_annun);
  65:src/lcd.c     ****   int bat = is_dot(BATTERY);
  66:src/lcd.c     ****   int leq = is_dot(LIT_EQ);
  67:src/lcd.c     ****   int rpn = is_dot(RPN);
  68:src/lcd.c     ****   int i;
  69:src/lcd.c     ****   for (i=0; i<TOP_DOTS; i++)
  70:src/lcd.c     ****     //		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
  71:src/lcd.c     ****     //			clr_dot(i);
  72:src/lcd.c     ****     dots[i] <<= 1;
  73:src/lcd.c     ****   dot(RCL_annun, rcl);
  74:src/lcd.c     ****   dot(BATTERY, bat);
  75:src/lcd.c     ****   dot(LIT_EQ, leq);
  76:src/lcd.c     ****   dot(RPN, rpn);
  77:src/lcd.c     **** }
  78:src/lcd.c     **** 
  79:src/lcd.c     **** void reset_7_segment(void) {
  80:src/lcd.c     ****   for (int i = 0; i <= EXP_SIGN; ++i) {
  81:src/lcd.c     ****     dots[i] <<= 1;
  82:src/lcd.c     ****   }
  83:src/lcd.c     **** }
ARM GAS  /tmp/ccYbhZ84.s 			page 3


  84:src/lcd.c     **** 
  85:src/lcd.c     **** #define setBlackPixel(x, y)                bitblt24(x, 1, y, 1, BLT_OR,   BLT_NONE)
  86:src/lcd.c     **** #define setWhitePixel(x, y)                bitblt24(x, 1, y, 1, BLT_ANDN, BLT_NONE)
  87:src/lcd.c     **** 
  88:src/lcd.c     **** void left_side (int i, int j, int col) { //i - xleft reference; j - ytop reference
  89:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, col);
  90:src/lcd.c     ****   lcd_fill_rect (i+3, j+2, 1, 18, col);
  91:src/lcd.c     ****   lcd_fill_rect (i+4, j+2, 1, 17, col);
  92:src/lcd.c     ****   lcd_fill_rect (i+5, j+3, 1, 15, col);
  93:src/lcd.c     ****   lcd_fill_rect (i+6, j+4, 1, 7, col);
  94:src/lcd.c     **** }
  95:src/lcd.c     **** void left_side_top (int i, int j, int col) {
  96:src/lcd.c     ****   left_side(i, j, col);
  97:src/lcd.c     **** }
  98:src/lcd.c     **** void left_side_bottom (int i, int j, int col) {
  99:src/lcd.c     ****   left_side(i-2, j+19, col);
 100:src/lcd.c     **** }
 101:src/lcd.c     **** void right_side (int i, int j, int col) {
 102:src/lcd.c     ****   lcd_fill_rect (i+16, j+11, 1, 7, col);
 103:src/lcd.c     ****   lcd_fill_rect (i+17, j+4, 1, 15, col);
 104:src/lcd.c     ****   lcd_fill_rect (i+18, j+3, 1, 17, col);
 105:src/lcd.c     ****   lcd_fill_rect (i+19, j+2, 1, 18, col);
 106:src/lcd.c     ****   lcd_fill_rect (i+20, j+2, 1, 9, col);
 107:src/lcd.c     **** }
 108:src/lcd.c     **** void right_side_top (int i, int j, int col) {
 109:src/lcd.c     ****   right_side(i, j, col);
 110:src/lcd.c     **** }
 111:src/lcd.c     **** void right_side_bottom (int i, int j, int col) {
 112:src/lcd.c     ****   right_side(i-2, j+19, col);
 113:src/lcd.c     **** }
 114:src/lcd.c     **** void top (int i, int j, int col) {
 115:src/lcd.c     ****   lcd_fill_rect ( i+5, j, 14, 1, col );
 116:src/lcd.c     ****   lcd_fill_rect ( i+4, j+1, 16, 1, col );
 117:src/lcd.c     ****   lcd_fill_rect ( i+6, j+2, 12, 1, col );
 118:src/lcd.c     ****   lcd_fill_rect ( i+7, j+3, 10, 1, col );
 119:src/lcd.c     **** }
 120:src/lcd.c     **** void middle (int i, int j, int col) {
 121:src/lcd.c     ****   //  lcd_fill_rect ( i+5, j+19, 11, 3, col );
 122:src/lcd.c     ****   //  setBlackPixel ( i+4, j+20 );
 123:src/lcd.c     ****   //  setBlackPixel ( i+16, j+20 );
 124:src/lcd.c     ****   lcd_fill_rect ( i+5, j+21, 11, 1, col );
 125:src/lcd.c     ****   lcd_fill_rect ( i+4, j+20, 13, 1, col );
 126:src/lcd.c     ****   lcd_fill_rect ( i+5, j+19, 11, 1, col );
 127:src/lcd.c     **** }
 128:src/lcd.c     **** void bottom (int i, int j, int col) {
 129:src/lcd.c     ****   lcd_fill_rect ( i+2, j+40, 14, 1, col );
 130:src/lcd.c     ****   lcd_fill_rect ( i+1, j+39, 16, 1, col );
 131:src/lcd.c     ****   lcd_fill_rect ( i+3, j+38, 12, 1, col );
 132:src/lcd.c     ****   lcd_fill_rect ( i+4, j+37, 10, 1, col );
 133:src/lcd.c     **** }
 134:src/lcd.c     **** void decimal (int i, int j, int col) {
 135:src/lcd.c     ****   lcd_fill_rect (i+19, j+40, 5, 5, col);
 136:src/lcd.c     **** }
 137:src/lcd.c     **** void comma (int i, int j, int col) {
 138:src/lcd.c     ****   lcd_fill_rect (i+21, j+45, 3, 3, col);
 139:src/lcd.c     ****   lcd_fill_rect (i+19, j+48, 3, 3, col);
 140:src/lcd.c     **** }
ARM GAS  /tmp/ccYbhZ84.s 			page 4


 141:src/lcd.c     **** 
 142:src/lcd.c     **** void exp_left_side (int i, int j, int col) {
 143:src/lcd.c     ****   lcd_fill_rect (i, j+6, 1, 6, col );
 144:src/lcd.c     ****   lcd_fill_rect (i+1, j, 1, 11, col );
 145:src/lcd.c     ****   lcd_fill_rect (i+2, j+1, 1, 9, col );
 146:src/lcd.c     ****   lcd_fill_rect (i+3, j+2, 1, 4, col );
 147:src/lcd.c     **** }
 148:src/lcd.c     **** void exp_left_side_top (int i, int j, int col) {
 149:src/lcd.c     ****   exp_left_side(i+1, j, col);
 150:src/lcd.c     **** }
 151:src/lcd.c     **** void exp_left_side_bottom (int i, int j, int col) {
 152:src/lcd.c     ****   exp_left_side(i, j+11, col);
 153:src/lcd.c     **** }
 154:src/lcd.c     **** void exp_right_side (int i, int j, int col) {
 155:src/lcd.c     ****   lcd_fill_rect (i+12, j, 1, 6, col );
 156:src/lcd.c     ****   lcd_fill_rect (i+11, j+1, 1, 11, col );
 157:src/lcd.c     ****   lcd_fill_rect (i+10, j+2, 1, 9, col );
 158:src/lcd.c     ****   lcd_fill_rect (i+9, j+6, 1, 4, col );
 159:src/lcd.c     **** }
 160:src/lcd.c     **** void exp_right_side_top (int i, int j, int col) {
 161:src/lcd.c     ****   exp_right_side(i, j, col);
 162:src/lcd.c     **** }
 163:src/lcd.c     **** void exp_right_side_bottom (int i, int j, int col) {
 164:src/lcd.c     ****   exp_right_side(i-1, j+11, col);
 165:src/lcd.c     **** }
 166:src/lcd.c     **** void exp_top (int i, int j, int col) {
 167:src/lcd.c     ****   lcd_fill_rect (i+4, j, 7, 1, col );
 168:src/lcd.c     ****   lcd_fill_rect (i+5, j+1, 5, 1, col );
 169:src/lcd.c     ****   lcd_fill_rect (i+6, j+2, 3, 1, col );
 170:src/lcd.c     **** }
 171:src/lcd.c     **** void exp_bottom (int i, int j, int col) {
 172:src/lcd.c     ****   lcd_fill_rect (i+2, j+22, 7, 1, col );
 173:src/lcd.c     ****   lcd_fill_rect (i+3, j+21, 5, 1, col );
 174:src/lcd.c     ****   lcd_fill_rect (i+4, j+20, 3, 1, col );
 175:src/lcd.c     **** }
 176:src/lcd.c     **** void exp_middle (int i, int j, int col) {
 177:src/lcd.c     ****   lcd_fill_rect (i+4, j+10, 5, 1, col );
 178:src/lcd.c     ****   lcd_fill_rect (i+3, j+11, 7, 1, col );
 179:src/lcd.c     ****   lcd_fill_rect (i+4, j+12, 5, 1, col );
 180:src/lcd.c     **** }
 181:src/lcd.c     **** 
 182:src/lcd.c     **** #if 0
 183:src/lcd.c     **** void show_disp(void) { // This function re-draws everything.
 184:src/lcd.c     ****   // It may be fast enough. It does mean that clearing everything first is needed,
 185:src/lcd.c     ****   // or we keep track of changes.
 186:src/lcd.c     ****   // Try clearing everything first first.
 187:src/lcd.c     ****         int i, j, p;
 188:src/lcd.c     **** 	uint32_t x;
 189:src/lcd.c     **** 	const uint32_t xleft = 26;
 190:src/lcd.c     **** 	const uint32_t ytop = 130; // was 170
 191:src/lcd.c     **** 	const uint32_t dwidth = 25;
 192:src/lcd.c     **** 	const uint32_t xleft_exp = 344;
 193:src/lcd.c     **** 	const uint32_t ytop_exp = 130; // was 170
 194:src/lcd.c     **** 	const uint32_t dwidth_exp = 18;
 195:src/lcd.c     **** 	const uint32_t y_ann = Y_ANNUNC;
 196:src/lcd.c     ****         /* Segments 0 - 107 are the main digits */
 197:src/lcd.c     ****         for (i=0; i<DISPLAY_DIGITS; i++) { // 0 -> 11 inclusive
ARM GAS  /tmp/ccYbhZ84.s 			page 5


 198:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 199:src/lcd.c     ****                 x = xleft + dwidth*i;
 200:src/lcd.c     ****                 if (dots[p]) { // top
 201:src/lcd.c     **** 		  top (x, ytop);
 202:src/lcd.c     ****                 }
 203:src/lcd.c     ****                 if (dots[p+1]) { // top left
 204:src/lcd.c     **** 		  left_side_top (x, ytop);
 205:src/lcd.c     ****                 }
 206:src/lcd.c     ****                 if (dots[p+3]) { // top right
 207:src/lcd.c     **** 		  right_side_top (x, ytop);
 208:src/lcd.c     ****                 }
 209:src/lcd.c     ****                 if (dots[p+2]) { // centre line
 210:src/lcd.c     **** 		  middle (x, ytop);
 211:src/lcd.c     ****                 }
 212:src/lcd.c     ****                 if (dots[p+4]) { // lower left
 213:src/lcd.c     **** 		  left_side_bottom (x, ytop);
 214:src/lcd.c     ****                 }
 215:src/lcd.c     ****                 if (dots[p+6]) { // lower right
 216:src/lcd.c     **** 		  right_side_bottom (x, ytop);
 217:src/lcd.c     ****                 }
 218:src/lcd.c     ****                 if (dots[p+5]) { // bottom
 219:src/lcd.c     **** 		  bottom (x, ytop);
 220:src/lcd.c     ****                 }
 221:src/lcd.c     ****                 if (dots[p+7]) { // point
 222:src/lcd.c     **** 		  decimal (x, ytop);
 223:src/lcd.c     ****                 }
 224:src/lcd.c     ****                 if (dots[p+8]) { // comma
 225:src/lcd.c     **** 		  comma (x, ytop);
 226:src/lcd.c     ****                 }
 227:src/lcd.c     ****         }
 228:src/lcd.c     ****         /* Segments 108 - 128 are the exponent digits */
 229:src/lcd.c     ****         for (i=0; i<3; i++) {
 230:src/lcd.c     ****                 p = i*7+108;
 231:src/lcd.c     ****                 x = xleft_exp + dwidth_exp*i;
 232:src/lcd.c     ****                 if (dots[p]) { // top
 233:src/lcd.c     **** 		  exp_top (x, ytop_exp);
 234:src/lcd.c     ****                 }
 235:src/lcd.c     ****                 if (dots[p+1]) { // top left
 236:src/lcd.c     **** 		  exp_left_side_top (x, ytop_exp);
 237:src/lcd.c     ****                 }
 238:src/lcd.c     ****                 if (dots[p+3]) { // top right
 239:src/lcd.c     **** 		  exp_right_side_top (x, ytop_exp);
 240:src/lcd.c     ****                 }
 241:src/lcd.c     ****                 if (dots[p+2]) { // centre line
 242:src/lcd.c     **** 		  exp_middle (x, ytop_exp);
 243:src/lcd.c     ****                 }
 244:src/lcd.c     ****                 if (dots[p+4]) { // lower left
 245:src/lcd.c     **** 		  exp_left_side_bottom (x, ytop_exp);
 246:src/lcd.c     ****                 }
 247:src/lcd.c     ****                 if (dots[p+6]) { // lower right
 248:src/lcd.c     **** 		  exp_right_side_bottom (x, ytop_exp);
 249:src/lcd.c     ****                 }
 250:src/lcd.c     ****                 if (dots[p+5]) { // bottom
 251:src/lcd.c     **** 		  exp_bottom (x, ytop_exp);
 252:src/lcd.c     ****                 }
 253:src/lcd.c     ****         }
 254:src/lcd.c     ****         /* Segments 129 & 130 are the signs */
ARM GAS  /tmp/ccYbhZ84.s 			page 6


 255:src/lcd.c     ****         if (dots[MANT_SIGN]) {
 256:src/lcd.c     **** 	  middle (xleft - dwidth, ytop);
 257:src/lcd.c     ****         }
 258:src/lcd.c     ****         if (dots[EXP_SIGN]) {
 259:src/lcd.c     **** 	  exp_middle (xleft_exp-dwidth_exp, ytop);
 260:src/lcd.c     ****         }
 261:src/lcd.c     **** 
 262:src/lcd.c     **** 	if (dots[BIG_EQ]) {
 263:src/lcd.c     **** 	  lcd_fill_rect (250, y_ann-34, 15, 4, 0xff);
 264:src/lcd.c     **** 	  lcd_fill_rect (250, y_ann-24, 15, 4, 0xff);
 265:src/lcd.c     ****         }
 266:src/lcd.c     **** 	t20->inv = 0;
 267:src/lcd.c     **** 	
 268:src/lcd.c     **** 	draw_PRT();
 269:src/lcd.c     **** 	
 270:src/lcd.c     **** 	/* if (UState.print_on) { */
 271:src/lcd.c     **** 	/*   lcd_setXY(t20, 250, y_ann-70); */
 272:src/lcd.c     **** 	/*   lcd_writeText(t20,"PRT"); */
 273:src/lcd.c     ****         /* } */
 274:src/lcd.c     **** 
 275:src/lcd.c     ****         if (dots[DOWN_ARR]) {
 276:src/lcd.c     **** 	  lcd_fill_rect(287,y_ann-67,5,12,0xff);
 277:src/lcd.c     **** 	  lcd_fill_rect(285,y_ann-55,9,1,0xff);
 278:src/lcd.c     **** 	  lcd_fill_rect(286,y_ann-54,7,1,0xff);
 279:src/lcd.c     **** 	  lcd_fill_rect(287,y_ann-53,5,1,0xff);
 280:src/lcd.c     **** 	  lcd_fill_rect(288,y_ann-52,3,1,0xff);
 281:src/lcd.c     **** 	  lcd_fill_rect(289,y_ann-51,1,1,0xff);
 282:src/lcd.c     ****         }
 283:src/lcd.c     **** 
 284:src/lcd.c     **** 	if (dots[INPUT]) {
 285:src/lcd.c     **** 	  lcd_setXY(t20, 305, y_ann-70);
 286:src/lcd.c     **** 	  lcd_writeText(t20,"ALPHA");
 287:src/lcd.c     ****         }
 288:src/lcd.c     **** 
 289:src/lcd.c     **** 	/* if (dots[LIT_EQ]) { */
 290:src/lcd.c     **** 	/*   lcd_setXY (t20, 360, y_ann-70); */
 291:src/lcd.c     **** 	/*   if (C_LOCKED) { */
 292:src/lcd.c     **** 	/*     lcd_writeText(t20, "C_LK"); */
 293:src/lcd.c     **** 	/*   } */
 294:src/lcd.c     **** 	/*   else { */
 295:src/lcd.c     **** 	/*     lcd_writeText(t20, "="); */
 296:src/lcd.c     **** 	/*   } */
 297:src/lcd.c     ****         /* } */
 298:src/lcd.c     **** 
 299:src/lcd.c     **** 	draw_LEQ();
 300:src/lcd.c     **** 	
 301:src/lcd.c     **** 	if (dots[BATTERY]) {
 302:src/lcd.c     **** 	  //    MOVE(70, 10);   PRINTF("####-");
 303:src/lcd.c     ****         }
 304:src/lcd.c     **** #ifdef MODIFY_BEG_SSIZE8
 305:src/lcd.c     **** 	if (dots[BEG]) {
 306:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-50);
 307:src/lcd.c     **** 	  lcd_writeText(t20, "S:8");
 308:src/lcd.c     ****         }
 309:src/lcd.c     **** 	else {
 310:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-50);
 311:src/lcd.c     **** 	  lcd_writeText(t20, "S:4");
ARM GAS  /tmp/ccYbhZ84.s 			page 7


 312:src/lcd.c     **** 	}	  
 313:src/lcd.c     **** #else
 314:src/lcd.c     **** 	if (dots[BEG]) {
 315:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-50);
 316:src/lcd.c     **** 	  lcd_writeText(t20, "BEG");
 317:src/lcd.c     ****         }
 318:src/lcd.c     **** #endif
 319:src/lcd.c     **** 	if (dots[STO_annun]) {
 320:src/lcd.c     **** 	  lcd_setXY (t20, 325, y_ann-50);
 321:src/lcd.c     **** 	  lcd_writeText(t20, "PGM");
 322:src/lcd.c     ****         }
 323:src/lcd.c     **** 
 324:src/lcd.c     **** 	/* if (dots[RCL_annun]) { */
 325:src/lcd.c     **** 	/*   lcd_setXY (t20, 365, y_ann-50); */
 326:src/lcd.c     **** 	/*   lcd_writeText(t20, "RUN"); */
 327:src/lcd.c     ****         /* } */
 328:src/lcd.c     **** 
 329:src/lcd.c     **** 	if (dots[RAD]) {
 330:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-30);
 331:src/lcd.c     **** 	  lcd_writeText(t20, "RAD");
 332:src/lcd.c     **** 	}
 333:src/lcd.c     **** 
 334:src/lcd.c     **** 	if (dots[DEG]) {
 335:src/lcd.c     **** 	  lcd_setXY (t20, 325, y_ann-30);
 336:src/lcd.c     **** 	  lcd_writeText(t20, "DEG");
 337:src/lcd.c     ****         }
 338:src/lcd.c     **** 	draw_RPN_RCL();
 339:src/lcd.c     **** 	
 340:src/lcd.c     **** 	/* The graphical bit last */
 341:src/lcd.c     ****         for (i=0; i<BITMAP_WIDTH; i++) {
 342:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 343:src/lcd.c     **** 	    if (dots[i*6+j+MATRIX_BASE]) {
 344:src/lcd.c     **** 	      lcd_fill_rect( xleft-dwidth+5*i+15, ytop-(10+6*6)+j*6, 4, 5, 0xff);
 345:src/lcd.c     **** 	    }
 346:src/lcd.c     **** 	  }
 347:src/lcd.c     **** 	}
 348:src/lcd.c     **** #ifdef TOP_ROW
 349:src/lcd.c     ****         for (i=0; i<BW_TOP; i++) {
 350:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 351:src/lcd.c     **** 	    if (dots[i*6+j+MB_TOP]) {
 352:src/lcd.c     **** 	      lcd_fill_rect( xleft-dwidth+5*i+15, 70-(10+6*5)+j*5, 4, 4, 0xff);
 353:src/lcd.c     **** 	    }
 354:src/lcd.c     **** 	  }
 355:src/lcd.c     **** 	}
 356:src/lcd.c     **** #endif
 357:src/lcd.c     **** }
 358:src/lcd.c     **** #endif
 359:src/lcd.c     **** 
 360:src/lcd.c     **** void draw_dot (int n) {
 361:src/lcd.c     ****   int x, col = 0, inverse = 1;
 362:src/lcd.c     ****   if (dots[n] & 1) {
 363:src/lcd.c     ****     col = 0xff;
 364:src/lcd.c     ****     inverse = 0;
 365:src/lcd.c     ****   }
 366:src/lcd.c     ****   
 367:src/lcd.c     ****   if (n <= 107) {
 368:src/lcd.c     ****     x = XLEFT + DWIDTH*(n/9);
ARM GAS  /tmp/ccYbhZ84.s 			page 8


 369:src/lcd.c     ****     switch (n % 9) {  
 370:src/lcd.c     ****     case 0:
 371:src/lcd.c     ****       top (x, YTOP, col);
 372:src/lcd.c     ****       return;
 373:src/lcd.c     ****     case 1:
 374:src/lcd.c     ****       left_side_top (x, YTOP, col);
 375:src/lcd.c     ****       return;
 376:src/lcd.c     ****     case 2:
 377:src/lcd.c     ****       middle (x, YTOP, col);
 378:src/lcd.c     ****       return;
 379:src/lcd.c     ****     case 3:
 380:src/lcd.c     ****       right_side_top (x, YTOP, col);
 381:src/lcd.c     ****       return;
 382:src/lcd.c     ****     case 4:
 383:src/lcd.c     ****       left_side_bottom (x, YTOP, col);
 384:src/lcd.c     ****       return;
 385:src/lcd.c     ****     case 5:
 386:src/lcd.c     ****       bottom (x, YTOP, col);
 387:src/lcd.c     ****       return;
 388:src/lcd.c     ****     case 6:
 389:src/lcd.c     ****       right_side_bottom (x, YTOP, col);
 390:src/lcd.c     ****       return;
 391:src/lcd.c     ****     case 7:
 392:src/lcd.c     ****       decimal (x, YTOP, col);
 393:src/lcd.c     ****       return;
 394:src/lcd.c     ****     case 8:
 395:src/lcd.c     ****       comma (x, YTOP, col);
 396:src/lcd.c     ****       return;
 397:src/lcd.c     ****     default:;
 398:src/lcd.c     ****     }
 399:src/lcd.c     ****   }
 400:src/lcd.c     ****   else if (n <= 128) { // exponent digits
 401:src/lcd.c     ****     x = XLEFT_EXP + DWIDTH_EXP*((n-108)/7);
 402:src/lcd.c     ****     switch ((n-108) % 7) {
 403:src/lcd.c     ****     case 0:
 404:src/lcd.c     ****       exp_top (x, YTOP_EXP, col);
 405:src/lcd.c     ****       return;
 406:src/lcd.c     ****     case 1:
 407:src/lcd.c     ****       exp_left_side_top (x, YTOP_EXP, col);
 408:src/lcd.c     ****       return;
 409:src/lcd.c     ****     case 2:
 410:src/lcd.c     ****       exp_middle (x, YTOP_EXP, col);
 411:src/lcd.c     ****       return;
 412:src/lcd.c     ****     case 3:
 413:src/lcd.c     ****       exp_right_side_top (x, YTOP_EXP, col);
 414:src/lcd.c     ****       return;
 415:src/lcd.c     ****     case 4:
 416:src/lcd.c     ****       exp_left_side_bottom (x, YTOP_EXP, col);
 417:src/lcd.c     ****       return;
 418:src/lcd.c     ****     case 5:
 419:src/lcd.c     ****       exp_bottom (x, YTOP_EXP, col);
 420:src/lcd.c     ****       return;
 421:src/lcd.c     ****     case 6:
 422:src/lcd.c     ****       exp_right_side_bottom (x, YTOP_EXP, col);
 423:src/lcd.c     ****       return;
 424:src/lcd.c     ****     default:;
 425:src/lcd.c     ****     }
ARM GAS  /tmp/ccYbhZ84.s 			page 9


 426:src/lcd.c     ****   }
 427:src/lcd.c     ****   else if (n <= 141) {
 428:src/lcd.c     ****     switch (n) {
 429:src/lcd.c     ****     case MANT_SIGN:
 430:src/lcd.c     ****       middle (XLEFT - DWIDTH, YTOP, col);
 431:src/lcd.c     ****       return;
 432:src/lcd.c     ****     case EXP_SIGN:
 433:src/lcd.c     ****       exp_middle (XLEFT_EXP-DWIDTH_EXP, YTOP, col);
 434:src/lcd.c     ****       return;
 435:src/lcd.c     ****     case BIG_EQ:
 436:src/lcd.c     ****       lcd_fill_rect (250, Y_ANNUNC-34, 15, 4, col);
 437:src/lcd.c     ****       lcd_fill_rect (250, Y_ANNUNC-24, 15, 4, col);
 438:src/lcd.c     ****       return;
 439:src/lcd.c     ****     case LIT_EQ:
 440:src/lcd.c     ****       draw_LEQ();
 441:src/lcd.c     ****       return;
 442:src/lcd.c     ****     case DOWN_ARR:
 443:src/lcd.c     ****       lcd_fill_rect(287,Y_ANNUNC-67,5,12,col);
 444:src/lcd.c     ****       lcd_fill_rect(285,Y_ANNUNC-55,9,1,col);
 445:src/lcd.c     ****       lcd_fill_rect(286,Y_ANNUNC-54,7,1,col);
 446:src/lcd.c     ****       lcd_fill_rect(287,Y_ANNUNC-53,5,1,col);
 447:src/lcd.c     ****       lcd_fill_rect(288,Y_ANNUNC-52,3,1,col);
 448:src/lcd.c     ****       lcd_fill_rect(289,Y_ANNUNC-51,1,1,col);
 449:src/lcd.c     ****       return;
 450:src/lcd.c     ****     case INPUT:
 451:src/lcd.c     ****       t20->inv = inverse;
 452:src/lcd.c     ****       lcd_setXY(t20, 305, Y_ANNUNC-70);
 453:src/lcd.c     ****       lcd_writeText(t20,"ALPHA");
 454:src/lcd.c     ****       return;
 455:src/lcd.c     ****     case BATTERY:
 456:src/lcd.c     ****       return;
 457:src/lcd.c     ****     case BEG:
 458:src/lcd.c     **** #ifdef MODIFY_BEG_SSIZE8
 459:src/lcd.c     ****       /* t20->inv = 0; */
 460:src/lcd.c     ****       /* if (dots[BEG] & 1) { */
 461:src/lcd.c     ****       /* 	lcd_setXY (t20, 285, Y_ANNUNC-50); */
 462:src/lcd.c     ****       /* 	lcd_writeText(t20, "S:8"); */
 463:src/lcd.c     ****       /* } */
 464:src/lcd.c     ****       /* else { */
 465:src/lcd.c     ****       /* 	lcd_setXY (t20, 285, Y_ANNUNC-50); */
 466:src/lcd.c     ****       /* 	lcd_writeText(t20, "S:4"); */
 467:src/lcd.c     ****       /* }	   */
 468:src/lcd.c     ****       {
 469:src/lcd.c     **** 	int d = UState.stack_depth;
 470:src/lcd.c     **** 	//	print_debug(100, dots[BEG]);
 471:src/lcd.c     **** 	if (!(dots[BEG] & 8)) { // test bit 3;
 472:src/lcd.c     **** 	  if (d) {
 473:src/lcd.c     **** 	    draw_BEG(8, 0);
 474:src/lcd.c     **** 	    dots[BEG] = 7; // 0111
 475:src/lcd.c     **** 	  }
 476:src/lcd.c     **** 	  else {
 477:src/lcd.c     **** 	    draw_BEG(4, 0);
 478:src/lcd.c     **** 	    dots[BEG] = 4; // 0100
 479:src/lcd.c     **** 	  }
 480:src/lcd.c     **** 	}
 481:src/lcd.c     **** 	else if (d == (dots[BEG] & 2)) { // no drawing needed
 482:src/lcd.c     **** 	  if (d) {
ARM GAS  /tmp/ccYbhZ84.s 			page 10


 483:src/lcd.c     **** 	    dots[BEG] = 7;
 484:src/lcd.c     **** 	  }
 485:src/lcd.c     **** 	  else {
 486:src/lcd.c     **** 	    dots[BEG] = 4;
 487:src/lcd.c     **** 	  }
 488:src/lcd.c     **** 	}
 489:src/lcd.c     **** 	else {
 490:src/lcd.c     **** 	  if (d) { // changing S:4 to S:8
 491:src/lcd.c     **** 	    draw_BEG(4, 1);
 492:src/lcd.c     **** 	    draw_BEG(8, 0);
 493:src/lcd.c     **** 	    dots[BEG] = 7;
 494:src/lcd.c     **** 	  }
 495:src/lcd.c     **** 	  else {
 496:src/lcd.c     **** 	    draw_BEG(8, 1);
 497:src/lcd.c     **** 	    draw_BEG(4, 0);
 498:src/lcd.c     **** 	    dots[BEG] = 4;
 499:src/lcd.c     **** 	  }
 500:src/lcd.c     **** 	}
 501:src/lcd.c     ****       }
 502:src/lcd.c     **** #else
 503:src/lcd.c     ****       t20->inv = inverse;
 504:src/lcd.c     ****       lcd_setXY (t20, 285, y_ann-50);
 505:src/lcd.c     ****       lcd_writeText(t20, "BEG");
 506:src/lcd.c     **** #endif
 507:src/lcd.c     ****       return;
 508:src/lcd.c     ****     case STO_annun:
 509:src/lcd.c     ****       t20->inv = inverse;
 510:src/lcd.c     ****       lcd_setXY (t20, 325, Y_ANNUNC-50);
 511:src/lcd.c     ****       lcd_writeText(t20, "PGM");
 512:src/lcd.c     ****       return;
 513:src/lcd.c     ****     case RCL_annun:
 514:src/lcd.c     ****       draw_RCL(inverse);
 515:src/lcd.c     ****     case RAD:
 516:src/lcd.c     ****       t20->inv = inverse;
 517:src/lcd.c     ****       lcd_setXY (t20, 285, Y_ANNUNC-30);
 518:src/lcd.c     ****       lcd_writeText(t20, "RAD");
 519:src/lcd.c     ****       return;
 520:src/lcd.c     ****     case DEG:
 521:src/lcd.c     ****       t20->inv = inverse;
 522:src/lcd.c     ****       lcd_setXY (t20, 325, Y_ANNUNC-30);
 523:src/lcd.c     ****       lcd_writeText(t20, "DEG");
 524:src/lcd.c     ****       return;
 525:src/lcd.c     ****     case RPN:
 526:src/lcd.c     ****       draw_RPN(inverse);
 527:src/lcd.c     ****       return;
 528:src/lcd.c     ****     default:;
 529:src/lcd.c     ****     }
 530:src/lcd.c     ****   }
 531:src/lcd.c     ****   else if (n < MAX_DOTS) { // column = (n-142)/6; row = (n-142) % 6
 532:src/lcd.c     ****     lcd_fill_rect ( XLEFT-DWIDTH+5*((n-142)/6)+15, YTOP-(10+6*6)+((n-142)%6)*6, 4, 5, col);
 533:src/lcd.c     ****     return;
 534:src/lcd.c     ****   }
 535:src/lcd.c     ****   else if (n < TOP_DOTS) { // column = (n-MAX_DOTS)/6; row = ((n-MAX_DOTS)%6)
 536:src/lcd.c     ****     lcd_fill_rect( XLEFT-DWIDTH+5*((n-MAX_DOTS)/6)+15, 70-(10+6*5)+((n-MAX_DOTS)%6)*5, 4, 4, col);
 537:src/lcd.c     ****     return;
 538:src/lcd.c     ****   }
 539:src/lcd.c     **** }
ARM GAS  /tmp/ccYbhZ84.s 			page 11


 540:src/lcd.c     **** 
 541:src/lcd.c     **** void draw_BEG (int depth, int inverse) {
  33              		.loc 1 541 6 view -0
  34              		.cfi_startproc
  35              		@ args = 0, pretend = 0, frame = 0
  36              		@ frame_needed = 0, uses_anonymous_args = 0
  37              		@ link register save eliminated.
  38              	.LVL0:
 542:src/lcd.c     ****   t20->inv = inverse;
 543:src/lcd.c     ****   lcd_setXY (t20, 285, Y_ANNUNC-50);
 544:src/lcd.c     ****   if (depth == 4) {
 545:src/lcd.c     ****     lcd_writeText(t20, "S:4");
  39              		.loc 1 545 5 view .LVU1
  40 0000 024A     		ldr	r2, .L3
  41 0002 034B     		ldr	r3, .L3+4
  42 0004 106B     		ldr	r0, [r2, #48]
  43 0006 0349     		ldr	r1, .L3+8
  44 0008 1847     		bx	r3	@ indirect register sibling call
  45              	.LVL1:
  46              	.L4:
  47 000a 00BF     		.align	2
  48              	.L3:
  49 000c 00200010 		.word	268443648
  50 0010 7D020008 		.word	134218365
  51 0014 00000000 		.word	.LC0
  52              		.cfi_endproc
  53              	.LFE42:
  55              		.section	.text.is_dot,"ax",%progbits
  56              		.align	1
  57              		.p2align 2,,3
  58              		.global	is_dot
  59              		.syntax unified
  60              		.thumb
  61              		.thumb_func
  62              		.fpu fpv4-sp-d16
  64              	is_dot:
  65              	.LVL2:
  66              	.LFB2:
  52:src/lcd.c     **** 	return dots[n]&1;
  67              		.loc 1 52 19 view -0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71              		@ link register save eliminated.
  53:src/lcd.c     **** }
  72              		.loc 1 53 2 view .LVU3
  53:src/lcd.c     **** }
  73              		.loc 1 53 13 is_stmt 0 view .LVU4
  74 0000 024B     		ldr	r3, .L6
  53:src/lcd.c     **** }
  75              		.loc 1 53 16 view .LVU5
  76 0002 185C     		ldrb	r0, [r3, r0]	@ zero_extendqisi2
  77              	.LVL3:
  54:src/lcd.c     **** 
  78              		.loc 1 54 1 view .LVU6
  79 0004 00F00100 		and	r0, r0, #1
  80 0008 7047     		bx	lr
ARM GAS  /tmp/ccYbhZ84.s 			page 12


  81              	.L7:
  82 000a 00BF     		.align	2
  83              	.L6:
  84 000c 00000000 		.word	.LANCHOR0
  85              		.cfi_endproc
  86              	.LFE2:
  88              		.section	.text.clear_disp,"ax",%progbits
  89              		.align	1
  90              		.p2align 2,,3
  91              		.global	clear_disp
  92              		.syntax unified
  93              		.thumb
  94              		.thumb_func
  95              		.fpu fpv4-sp-d16
  97              	clear_disp:
  98              	.LFB3:
  56:src/lcd.c     ****       for (int i=0; i<TOP_DOTS; i++)
  99              		.loc 1 56 23 is_stmt 1 view -0
 100              		.cfi_startproc
 101              		@ args = 0, pretend = 0, frame = 0
 102              		@ frame_needed = 0, uses_anonymous_args = 0
 103              		@ link register save eliminated.
  57:src/lcd.c     **** 	dots[i] = 0;
 104              		.loc 1 57 7 view .LVU8
 105              	.LBB54:
  57:src/lcd.c     **** 	dots[i] = 0;
 106              		.loc 1 57 12 view .LVU9
 107              	.LVL4:
  57:src/lcd.c     **** 	dots[i] = 0;
 108              		.loc 1 57 21 view .LVU10
 109 0000 044B     		ldr	r3, .L11
  58:src/lcd.c     ****       lcd_clear_buf();
 110              		.loc 1 58 10 is_stmt 0 view .LVU11
 111 0002 0021     		movs	r1, #0
 112 0004 03F55372 		add	r2, r3, #844
 113              	.LVL5:
 114              	.L9:
  58:src/lcd.c     ****       lcd_clear_buf();
 115              		.loc 1 58 2 is_stmt 1 discriminator 3 view .LVU12
  58:src/lcd.c     ****       lcd_clear_buf();
 116              		.loc 1 58 10 is_stmt 0 discriminator 3 view .LVU13
 117 0008 03F8011F 		strb	r1, [r3, #1]!
 118              	.LVL6:
  57:src/lcd.c     **** 	dots[i] = 0;
 119              		.loc 1 57 33 is_stmt 1 discriminator 3 view .LVU14
  57:src/lcd.c     **** 	dots[i] = 0;
 120              		.loc 1 57 21 discriminator 3 view .LVU15
  57:src/lcd.c     **** 	dots[i] = 0;
 121              		.loc 1 57 7 is_stmt 0 discriminator 3 view .LVU16
 122 000c 9342     		cmp	r3, r2
 123 000e FBD1     		bne	.L9
 124              	.LBE54:
  59:src/lcd.c     **** }
 125              		.loc 1 59 7 is_stmt 1 view .LVU17
 126 0010 014B     		ldr	r3, .L11+4
 127              	.LVL7:
  59:src/lcd.c     **** }
ARM GAS  /tmp/ccYbhZ84.s 			page 13


 128              		.loc 1 59 7 is_stmt 0 view .LVU18
 129 0012 1847     		bx	r3	@ indirect register sibling call
 130              	.LVL8:
 131              	.L12:
 132              		.align	2
 133              	.L11:
 134 0014 FFFFFFFF 		.word	.LANCHOR0-1
 135 0018 2D020008 		.word	134218285
 136              		.cfi_endproc
 137              	.LFE3:
 139              		.section	.text.reset_7_segment,"ax",%progbits
 140              		.align	1
 141              		.p2align 2,,3
 142              		.global	reset_7_segment
 143              		.syntax unified
 144              		.thumb
 145              		.thumb_func
 146              		.fpu fpv4-sp-d16
 148              	reset_7_segment:
 149              	.LFB5:
  79:src/lcd.c     ****   for (int i = 0; i <= EXP_SIGN; ++i) {
 150              		.loc 1 79 28 is_stmt 1 view -0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 0, uses_anonymous_args = 0
 154              		@ link register save eliminated.
  80:src/lcd.c     ****     dots[i] <<= 1;
 155              		.loc 1 80 3 view .LVU20
 156              	.LBB55:
  80:src/lcd.c     ****     dots[i] <<= 1;
 157              		.loc 1 80 8 view .LVU21
 158              	.LVL9:
  80:src/lcd.c     ****     dots[i] <<= 1;
 159              		.loc 1 80 19 view .LVU22
 160 0000 044B     		ldr	r3, .L16
 161 0002 03F18301 		add	r1, r3, #131
 162              	.LVL10:
 163              	.L14:
  81:src/lcd.c     ****   }
 164              		.loc 1 81 5 discriminator 3 view .LVU23
  81:src/lcd.c     ****   }
 165              		.loc 1 81 13 is_stmt 0 discriminator 3 view .LVU24
 166 0006 13F8012F 		ldrb	r2, [r3, #1]!	@ zero_extendqisi2
 167              	.LVL11:
  81:src/lcd.c     ****   }
 168              		.loc 1 81 13 discriminator 3 view .LVU25
 169 000a 5200     		lsls	r2, r2, #1
  80:src/lcd.c     ****     dots[i] <<= 1;
 170              		.loc 1 80 3 discriminator 3 view .LVU26
 171 000c 8B42     		cmp	r3, r1
  81:src/lcd.c     ****   }
 172              		.loc 1 81 13 discriminator 3 view .LVU27
 173 000e 1A70     		strb	r2, [r3]
  80:src/lcd.c     ****     dots[i] <<= 1;
 174              		.loc 1 80 34 is_stmt 1 discriminator 3 view .LVU28
 175              	.LVL12:
  80:src/lcd.c     ****     dots[i] <<= 1;
ARM GAS  /tmp/ccYbhZ84.s 			page 14


 176              		.loc 1 80 19 discriminator 3 view .LVU29
  80:src/lcd.c     ****     dots[i] <<= 1;
 177              		.loc 1 80 3 is_stmt 0 discriminator 3 view .LVU30
 178 0010 F9D1     		bne	.L14
 179              	.LBE55:
  83:src/lcd.c     **** 
 180              		.loc 1 83 1 view .LVU31
 181 0012 7047     		bx	lr
 182              	.L17:
 183              		.align	2
 184              	.L16:
 185 0014 FFFFFFFF 		.word	.LANCHOR0-1
 186              		.cfi_endproc
 187              	.LFE5:
 189              		.section	.text.left_side,"ax",%progbits
 190              		.align	1
 191              		.p2align 2,,3
 192              		.global	left_side
 193              		.syntax unified
 194              		.thumb
 195              		.thumb_func
 196              		.fpu fpv4-sp-d16
 198              	left_side:
 199              	.LVL13:
 200              	.LFB6:
  88:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, col);
 201              		.loc 1 88 40 is_stmt 1 view -0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 0
 204              		@ frame_needed = 0, uses_anonymous_args = 0
  89:src/lcd.c     ****   lcd_fill_rect (i+3, j+2, 1, 18, col);
 205              		.loc 1 89 3 view .LVU33
  88:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, col);
 206              		.loc 1 88 40 is_stmt 0 view .LVU34
 207 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 208              		.cfi_def_cfa_offset 24
 209              		.cfi_offset 4, -24
 210              		.cfi_offset 5, -20
 211              		.cfi_offset 6, -16
 212              		.cfi_offset 7, -12
 213              		.cfi_offset 8, -8
 214              		.cfi_offset 14, -4
 215 0004 82B0     		sub	sp, sp, #8
 216              		.cfi_def_cfa_offset 32
  88:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, col);
 217              		.loc 1 88 40 view .LVU35
 218 0006 0E46     		mov	r6, r1
  89:src/lcd.c     ****   lcd_fill_rect (i+3, j+2, 1, 18, col);
 219              		.loc 1 89 3 view .LVU36
 220 0008 124F     		ldr	r7, .L20
 221 000a 0092     		str	r2, [sp]
  88:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, col);
 222              		.loc 1 88 40 view .LVU37
 223 000c 0446     		mov	r4, r0
 224 000e 1546     		mov	r5, r2
  90:src/lcd.c     ****   lcd_fill_rect (i+4, j+2, 1, 17, col);
 225              		.loc 1 90 24 view .LVU38
ARM GAS  /tmp/ccYbhZ84.s 			page 15


 226 0010 06F10208 		add	r8, r6, #2
  89:src/lcd.c     ****   lcd_fill_rect (i+3, j+2, 1, 18, col);
 227              		.loc 1 89 3 view .LVU39
 228 0014 0B31     		adds	r1, r1, #11
 229              	.LVL14:
  89:src/lcd.c     ****   lcd_fill_rect (i+3, j+2, 1, 18, col);
 230              		.loc 1 89 3 view .LVU40
 231 0016 0230     		adds	r0, r0, #2
 232              	.LVL15:
  89:src/lcd.c     ****   lcd_fill_rect (i+3, j+2, 1, 18, col);
 233              		.loc 1 89 3 view .LVU41
 234 0018 0923     		movs	r3, #9
 235 001a 0122     		movs	r2, #1
 236              	.LVL16:
  89:src/lcd.c     ****   lcd_fill_rect (i+3, j+2, 1, 18, col);
 237              		.loc 1 89 3 view .LVU42
 238 001c B847     		blx	r7
 239              	.LVL17:
  90:src/lcd.c     ****   lcd_fill_rect (i+4, j+2, 1, 17, col);
 240              		.loc 1 90 3 is_stmt 1 view .LVU43
 241 001e 4146     		mov	r1, r8
 242 0020 E01C     		adds	r0, r4, #3
 243 0022 0095     		str	r5, [sp]
 244 0024 1223     		movs	r3, #18
 245 0026 0122     		movs	r2, #1
 246 0028 B847     		blx	r7
 247              	.LVL18:
  91:src/lcd.c     ****   lcd_fill_rect (i+5, j+3, 1, 15, col);
 248              		.loc 1 91 3 view .LVU44
 249 002a 4146     		mov	r1, r8
 250 002c 201D     		adds	r0, r4, #4
 251 002e 0095     		str	r5, [sp]
 252 0030 1123     		movs	r3, #17
 253 0032 0122     		movs	r2, #1
 254 0034 B847     		blx	r7
 255              	.LVL19:
  92:src/lcd.c     ****   lcd_fill_rect (i+6, j+4, 1, 7, col);
 256              		.loc 1 92 3 view .LVU45
 257 0036 F11C     		adds	r1, r6, #3
 258 0038 601D     		adds	r0, r4, #5
 259 003a 0095     		str	r5, [sp]
 260 003c 0F23     		movs	r3, #15
 261 003e 0122     		movs	r2, #1
 262 0040 B847     		blx	r7
 263              	.LVL20:
  93:src/lcd.c     **** }
 264              		.loc 1 93 3 view .LVU46
 265 0042 0095     		str	r5, [sp]
 266 0044 311D     		adds	r1, r6, #4
 267 0046 A01D     		adds	r0, r4, #6
 268 0048 0723     		movs	r3, #7
 269 004a 0122     		movs	r2, #1
 270 004c B847     		blx	r7
 271              	.LVL21:
  94:src/lcd.c     **** void left_side_top (int i, int j, int col) {
 272              		.loc 1 94 1 is_stmt 0 view .LVU47
 273 004e 02B0     		add	sp, sp, #8
ARM GAS  /tmp/ccYbhZ84.s 			page 16


 274              		.cfi_def_cfa_offset 24
 275              		@ sp needed
 276 0050 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 277              	.LVL22:
 278              	.L21:
  94:src/lcd.c     **** void left_side_top (int i, int j, int col) {
 279              		.loc 1 94 1 view .LVU48
 280              		.align	2
 281              	.L20:
 282 0054 3D020008 		.word	134218301
 283              		.cfi_endproc
 284              	.LFE6:
 286              		.section	.text.left_side_top,"ax",%progbits
 287              		.align	1
 288              		.p2align 2,,3
 289              		.global	left_side_top
 290              		.syntax unified
 291              		.thumb
 292              		.thumb_func
 293              		.fpu fpv4-sp-d16
 295              	left_side_top:
 296              	.LVL23:
 297              	.LFB7:
  95:src/lcd.c     ****   left_side(i, j, col);
 298              		.loc 1 95 44 is_stmt 1 view -0
 299              		.cfi_startproc
 300              		@ args = 0, pretend = 0, frame = 0
 301              		@ frame_needed = 0, uses_anonymous_args = 0
 302              		@ link register save eliminated.
  96:src/lcd.c     **** }
 303              		.loc 1 96 3 view .LVU50
 304 0000 FFF7FEBF 		b	left_side
 305              	.LVL24:
  96:src/lcd.c     **** }
 306              		.loc 1 96 3 is_stmt 0 view .LVU51
 307              		.cfi_endproc
 308              	.LFE7:
 310              		.section	.text.left_side_bottom,"ax",%progbits
 311              		.align	1
 312              		.p2align 2,,3
 313              		.global	left_side_bottom
 314              		.syntax unified
 315              		.thumb
 316              		.thumb_func
 317              		.fpu fpv4-sp-d16
 319              	left_side_bottom:
 320              	.LVL25:
 321              	.LFB8:
  98:src/lcd.c     ****   left_side(i-2, j+19, col);
 322              		.loc 1 98 47 is_stmt 1 view -0
 323              		.cfi_startproc
 324              		@ args = 0, pretend = 0, frame = 0
 325              		@ frame_needed = 0, uses_anonymous_args = 0
 326              		@ link register save eliminated.
  99:src/lcd.c     **** }
 327              		.loc 1 99 3 view .LVU53
 328 0000 0238     		subs	r0, r0, #2
ARM GAS  /tmp/ccYbhZ84.s 			page 17


 329              	.LVL26:
  99:src/lcd.c     **** }
 330              		.loc 1 99 3 is_stmt 0 view .LVU54
 331 0002 1331     		adds	r1, r1, #19
 332              	.LVL27:
  99:src/lcd.c     **** }
 333              		.loc 1 99 3 view .LVU55
 334 0004 FFF7FEBF 		b	left_side
 335              	.LVL28:
  99:src/lcd.c     **** }
 336              		.loc 1 99 3 view .LVU56
 337              		.cfi_endproc
 338              	.LFE8:
 340              		.section	.text.right_side,"ax",%progbits
 341              		.align	1
 342              		.p2align 2,,3
 343              		.global	right_side
 344              		.syntax unified
 345              		.thumb
 346              		.thumb_func
 347              		.fpu fpv4-sp-d16
 349              	right_side:
 350              	.LVL29:
 351              	.LFB9:
 101:src/lcd.c     ****   lcd_fill_rect (i+16, j+11, 1, 7, col);
 352              		.loc 1 101 41 is_stmt 1 view -0
 353              		.cfi_startproc
 354              		@ args = 0, pretend = 0, frame = 0
 355              		@ frame_needed = 0, uses_anonymous_args = 0
 102:src/lcd.c     ****   lcd_fill_rect (i+17, j+4, 1, 15, col);
 356              		.loc 1 102 3 view .LVU58
 101:src/lcd.c     ****   lcd_fill_rect (i+16, j+11, 1, 7, col);
 357              		.loc 1 101 41 is_stmt 0 view .LVU59
 358 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 359              		.cfi_def_cfa_offset 24
 360              		.cfi_offset 4, -24
 361              		.cfi_offset 5, -20
 362              		.cfi_offset 6, -16
 363              		.cfi_offset 7, -12
 364              		.cfi_offset 8, -8
 365              		.cfi_offset 14, -4
 366 0004 82B0     		sub	sp, sp, #8
 367              		.cfi_def_cfa_offset 32
 102:src/lcd.c     ****   lcd_fill_rect (i+17, j+4, 1, 15, col);
 368              		.loc 1 102 3 view .LVU60
 369 0006 154F     		ldr	r7, .L26
 370 0008 0092     		str	r2, [sp]
 101:src/lcd.c     ****   lcd_fill_rect (i+16, j+11, 1, 7, col);
 371              		.loc 1 101 41 view .LVU61
 372 000a 0446     		mov	r4, r0
 373 000c 1546     		mov	r5, r2
 374 000e 0E46     		mov	r6, r1
 102:src/lcd.c     ****   lcd_fill_rect (i+17, j+4, 1, 15, col);
 375              		.loc 1 102 3 view .LVU62
 376 0010 1030     		adds	r0, r0, #16
 377              	.LVL30:
 102:src/lcd.c     ****   lcd_fill_rect (i+17, j+4, 1, 15, col);
ARM GAS  /tmp/ccYbhZ84.s 			page 18


 378              		.loc 1 102 3 view .LVU63
 379 0012 0B31     		adds	r1, r1, #11
 380              	.LVL31:
 102:src/lcd.c     ****   lcd_fill_rect (i+17, j+4, 1, 15, col);
 381              		.loc 1 102 3 view .LVU64
 382 0014 0723     		movs	r3, #7
 383 0016 0122     		movs	r2, #1
 384              	.LVL32:
 102:src/lcd.c     ****   lcd_fill_rect (i+17, j+4, 1, 15, col);
 385              		.loc 1 102 3 view .LVU65
 386 0018 B847     		blx	r7
 387              	.LVL33:
 103:src/lcd.c     ****   lcd_fill_rect (i+18, j+3, 1, 17, col);
 388              		.loc 1 103 3 is_stmt 1 view .LVU66
 389 001a 311D     		adds	r1, r6, #4
 390 001c 04F11100 		add	r0, r4, #17
 391 0020 0095     		str	r5, [sp]
 392 0022 0F23     		movs	r3, #15
 393 0024 0122     		movs	r2, #1
 394 0026 B847     		blx	r7
 395              	.LVL34:
 104:src/lcd.c     ****   lcd_fill_rect (i+19, j+2, 1, 18, col);
 396              		.loc 1 104 3 view .LVU67
 105:src/lcd.c     ****   lcd_fill_rect (i+20, j+2, 1, 9, col);
 397              		.loc 1 105 25 is_stmt 0 view .LVU68
 398 0028 06F10208 		add	r8, r6, #2
 104:src/lcd.c     ****   lcd_fill_rect (i+19, j+2, 1, 18, col);
 399              		.loc 1 104 3 view .LVU69
 400 002c F11C     		adds	r1, r6, #3
 401 002e 04F11200 		add	r0, r4, #18
 402 0032 0095     		str	r5, [sp]
 403 0034 1123     		movs	r3, #17
 404 0036 0122     		movs	r2, #1
 405 0038 B847     		blx	r7
 406              	.LVL35:
 105:src/lcd.c     ****   lcd_fill_rect (i+20, j+2, 1, 9, col);
 407              		.loc 1 105 3 is_stmt 1 view .LVU70
 408 003a 4146     		mov	r1, r8
 409 003c 04F11300 		add	r0, r4, #19
 410 0040 0095     		str	r5, [sp]
 411 0042 1223     		movs	r3, #18
 412 0044 0122     		movs	r2, #1
 413 0046 B847     		blx	r7
 414              	.LVL36:
 106:src/lcd.c     **** }
 415              		.loc 1 106 3 view .LVU71
 416 0048 4146     		mov	r1, r8
 417 004a 0095     		str	r5, [sp]
 418 004c 04F11400 		add	r0, r4, #20
 419 0050 0923     		movs	r3, #9
 420 0052 0122     		movs	r2, #1
 421 0054 B847     		blx	r7
 422              	.LVL37:
 107:src/lcd.c     **** void right_side_top (int i, int j, int col) {
 423              		.loc 1 107 1 is_stmt 0 view .LVU72
 424 0056 02B0     		add	sp, sp, #8
 425              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccYbhZ84.s 			page 19


 426              		@ sp needed
 427 0058 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 428              	.LVL38:
 429              	.L27:
 107:src/lcd.c     **** void right_side_top (int i, int j, int col) {
 430              		.loc 1 107 1 view .LVU73
 431              		.align	2
 432              	.L26:
 433 005c 3D020008 		.word	134218301
 434              		.cfi_endproc
 435              	.LFE9:
 437              		.section	.text.right_side_top,"ax",%progbits
 438              		.align	1
 439              		.p2align 2,,3
 440              		.global	right_side_top
 441              		.syntax unified
 442              		.thumb
 443              		.thumb_func
 444              		.fpu fpv4-sp-d16
 446              	right_side_top:
 447              	.LVL39:
 448              	.LFB10:
 108:src/lcd.c     ****   right_side(i, j, col);
 449              		.loc 1 108 45 is_stmt 1 view -0
 450              		.cfi_startproc
 451              		@ args = 0, pretend = 0, frame = 0
 452              		@ frame_needed = 0, uses_anonymous_args = 0
 453              		@ link register save eliminated.
 109:src/lcd.c     **** }
 454              		.loc 1 109 3 view .LVU75
 455 0000 FFF7FEBF 		b	right_side
 456              	.LVL40:
 109:src/lcd.c     **** }
 457              		.loc 1 109 3 is_stmt 0 view .LVU76
 458              		.cfi_endproc
 459              	.LFE10:
 461              		.section	.text.right_side_bottom,"ax",%progbits
 462              		.align	1
 463              		.p2align 2,,3
 464              		.global	right_side_bottom
 465              		.syntax unified
 466              		.thumb
 467              		.thumb_func
 468              		.fpu fpv4-sp-d16
 470              	right_side_bottom:
 471              	.LVL41:
 472              	.LFB11:
 111:src/lcd.c     ****   right_side(i-2, j+19, col);
 473              		.loc 1 111 48 is_stmt 1 view -0
 474              		.cfi_startproc
 475              		@ args = 0, pretend = 0, frame = 0
 476              		@ frame_needed = 0, uses_anonymous_args = 0
 477              		@ link register save eliminated.
 112:src/lcd.c     **** }
 478              		.loc 1 112 3 view .LVU78
 479 0000 0238     		subs	r0, r0, #2
 480              	.LVL42:
ARM GAS  /tmp/ccYbhZ84.s 			page 20


 112:src/lcd.c     **** }
 481              		.loc 1 112 3 is_stmt 0 view .LVU79
 482 0002 1331     		adds	r1, r1, #19
 483              	.LVL43:
 112:src/lcd.c     **** }
 484              		.loc 1 112 3 view .LVU80
 485 0004 FFF7FEBF 		b	right_side
 486              	.LVL44:
 112:src/lcd.c     **** }
 487              		.loc 1 112 3 view .LVU81
 488              		.cfi_endproc
 489              	.LFE11:
 491              		.section	.text.top,"ax",%progbits
 492              		.align	1
 493              		.p2align 2,,3
 494              		.global	top
 495              		.syntax unified
 496              		.thumb
 497              		.thumb_func
 498              		.fpu fpv4-sp-d16
 500              	top:
 501              	.LVL45:
 502              	.LFB12:
 114:src/lcd.c     ****   lcd_fill_rect ( i+5, j, 14, 1, col );
 503              		.loc 1 114 34 is_stmt 1 view -0
 504              		.cfi_startproc
 505              		@ args = 0, pretend = 0, frame = 0
 506              		@ frame_needed = 0, uses_anonymous_args = 0
 115:src/lcd.c     ****   lcd_fill_rect ( i+4, j+1, 16, 1, col );
 507              		.loc 1 115 3 view .LVU83
 114:src/lcd.c     ****   lcd_fill_rect ( i+5, j, 14, 1, col );
 508              		.loc 1 114 34 is_stmt 0 view .LVU84
 509 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 510              		.cfi_def_cfa_offset 20
 511              		.cfi_offset 4, -20
 512              		.cfi_offset 5, -16
 513              		.cfi_offset 6, -12
 514              		.cfi_offset 7, -8
 515              		.cfi_offset 14, -4
 516 0002 83B0     		sub	sp, sp, #12
 517              		.cfi_def_cfa_offset 32
 115:src/lcd.c     ****   lcd_fill_rect ( i+4, j+1, 16, 1, col );
 518              		.loc 1 115 3 view .LVU85
 519 0004 0E4F     		ldr	r7, .L32
 520 0006 0092     		str	r2, [sp]
 114:src/lcd.c     ****   lcd_fill_rect ( i+5, j, 14, 1, col );
 521              		.loc 1 114 34 view .LVU86
 522 0008 0446     		mov	r4, r0
 523 000a 1546     		mov	r5, r2
 524 000c 0E46     		mov	r6, r1
 115:src/lcd.c     ****   lcd_fill_rect ( i+4, j+1, 16, 1, col );
 525              		.loc 1 115 3 view .LVU87
 526 000e 0530     		adds	r0, r0, #5
 527              	.LVL46:
 115:src/lcd.c     ****   lcd_fill_rect ( i+4, j+1, 16, 1, col );
 528              		.loc 1 115 3 view .LVU88
 529 0010 0123     		movs	r3, #1
ARM GAS  /tmp/ccYbhZ84.s 			page 21


 530 0012 0E22     		movs	r2, #14
 531              	.LVL47:
 115:src/lcd.c     ****   lcd_fill_rect ( i+4, j+1, 16, 1, col );
 532              		.loc 1 115 3 view .LVU89
 533 0014 B847     		blx	r7
 534              	.LVL48:
 116:src/lcd.c     ****   lcd_fill_rect ( i+6, j+2, 12, 1, col );
 535              		.loc 1 116 3 is_stmt 1 view .LVU90
 536 0016 711C     		adds	r1, r6, #1
 537 0018 201D     		adds	r0, r4, #4
 538 001a 0095     		str	r5, [sp]
 539 001c 0123     		movs	r3, #1
 540 001e 1022     		movs	r2, #16
 541 0020 B847     		blx	r7
 542              	.LVL49:
 117:src/lcd.c     ****   lcd_fill_rect ( i+7, j+3, 10, 1, col );
 543              		.loc 1 117 3 view .LVU91
 544 0022 B11C     		adds	r1, r6, #2
 545 0024 A01D     		adds	r0, r4, #6
 546 0026 0095     		str	r5, [sp]
 547 0028 0123     		movs	r3, #1
 548 002a 0C22     		movs	r2, #12
 549 002c B847     		blx	r7
 550              	.LVL50:
 118:src/lcd.c     **** }
 551              		.loc 1 118 3 view .LVU92
 552 002e 0095     		str	r5, [sp]
 553 0030 F11C     		adds	r1, r6, #3
 554 0032 E01D     		adds	r0, r4, #7
 555 0034 0123     		movs	r3, #1
 556 0036 0A22     		movs	r2, #10
 557 0038 B847     		blx	r7
 558              	.LVL51:
 119:src/lcd.c     **** void middle (int i, int j, int col) {
 559              		.loc 1 119 1 is_stmt 0 view .LVU93
 560 003a 03B0     		add	sp, sp, #12
 561              		.cfi_def_cfa_offset 20
 562              		@ sp needed
 563 003c F0BD     		pop	{r4, r5, r6, r7, pc}
 564              	.LVL52:
 565              	.L33:
 119:src/lcd.c     **** void middle (int i, int j, int col) {
 566              		.loc 1 119 1 view .LVU94
 567 003e 00BF     		.align	2
 568              	.L32:
 569 0040 3D020008 		.word	134218301
 570              		.cfi_endproc
 571              	.LFE12:
 573              		.section	.text.middle,"ax",%progbits
 574              		.align	1
 575              		.p2align 2,,3
 576              		.global	middle
 577              		.syntax unified
 578              		.thumb
 579              		.thumb_func
 580              		.fpu fpv4-sp-d16
 582              	middle:
ARM GAS  /tmp/ccYbhZ84.s 			page 22


 583              	.LVL53:
 584              	.LFB13:
 120:src/lcd.c     ****   //  lcd_fill_rect ( i+5, j+19, 11, 3, col );
 585              		.loc 1 120 37 is_stmt 1 view -0
 586              		.cfi_startproc
 587              		@ args = 0, pretend = 0, frame = 0
 588              		@ frame_needed = 0, uses_anonymous_args = 0
 124:src/lcd.c     ****   lcd_fill_rect ( i+4, j+20, 13, 1, col );
 589              		.loc 1 124 3 view .LVU96
 120:src/lcd.c     ****   //  lcd_fill_rect ( i+5, j+19, 11, 3, col );
 590              		.loc 1 120 37 is_stmt 0 view .LVU97
 591 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 592              		.cfi_def_cfa_offset 24
 593              		.cfi_offset 4, -24
 594              		.cfi_offset 5, -20
 595              		.cfi_offset 6, -16
 596              		.cfi_offset 7, -12
 597              		.cfi_offset 8, -8
 598              		.cfi_offset 14, -4
 599 0004 82B0     		sub	sp, sp, #8
 600              		.cfi_def_cfa_offset 32
 124:src/lcd.c     ****   lcd_fill_rect ( i+4, j+20, 13, 1, col );
 601              		.loc 1 124 20 view .LVU98
 602 0006 00F10508 		add	r8, r0, #5
 124:src/lcd.c     ****   lcd_fill_rect ( i+4, j+20, 13, 1, col );
 603              		.loc 1 124 3 view .LVU99
 604 000a 0D4F     		ldr	r7, .L36
 605 000c 0092     		str	r2, [sp]
 120:src/lcd.c     ****   //  lcd_fill_rect ( i+5, j+19, 11, 3, col );
 606              		.loc 1 120 37 view .LVU100
 607 000e 0C46     		mov	r4, r1
 608 0010 1546     		mov	r5, r2
 609 0012 0646     		mov	r6, r0
 124:src/lcd.c     ****   lcd_fill_rect ( i+4, j+20, 13, 1, col );
 610              		.loc 1 124 3 view .LVU101
 611 0014 1531     		adds	r1, r1, #21
 612              	.LVL54:
 124:src/lcd.c     ****   lcd_fill_rect ( i+4, j+20, 13, 1, col );
 613              		.loc 1 124 3 view .LVU102
 614 0016 4046     		mov	r0, r8
 615              	.LVL55:
 124:src/lcd.c     ****   lcd_fill_rect ( i+4, j+20, 13, 1, col );
 616              		.loc 1 124 3 view .LVU103
 617 0018 0123     		movs	r3, #1
 618 001a 0B22     		movs	r2, #11
 619              	.LVL56:
 124:src/lcd.c     ****   lcd_fill_rect ( i+4, j+20, 13, 1, col );
 620              		.loc 1 124 3 view .LVU104
 621 001c B847     		blx	r7
 622              	.LVL57:
 125:src/lcd.c     ****   lcd_fill_rect ( i+5, j+19, 11, 1, col );
 623              		.loc 1 125 3 is_stmt 1 view .LVU105
 624 001e 301D     		adds	r0, r6, #4
 625 0020 04F11401 		add	r1, r4, #20
 626 0024 0095     		str	r5, [sp]
 627 0026 0123     		movs	r3, #1
 628 0028 0D22     		movs	r2, #13
ARM GAS  /tmp/ccYbhZ84.s 			page 23


 629 002a B847     		blx	r7
 630              	.LVL58:
 126:src/lcd.c     **** }
 631              		.loc 1 126 3 view .LVU106
 632 002c 4046     		mov	r0, r8
 633 002e 0095     		str	r5, [sp]
 634 0030 04F11301 		add	r1, r4, #19
 635 0034 0123     		movs	r3, #1
 636 0036 0B22     		movs	r2, #11
 637 0038 B847     		blx	r7
 638              	.LVL59:
 127:src/lcd.c     **** void bottom (int i, int j, int col) {
 639              		.loc 1 127 1 is_stmt 0 view .LVU107
 640 003a 02B0     		add	sp, sp, #8
 641              		.cfi_def_cfa_offset 24
 642              		@ sp needed
 643 003c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 644              	.LVL60:
 645              	.L37:
 127:src/lcd.c     **** void bottom (int i, int j, int col) {
 646              		.loc 1 127 1 view .LVU108
 647              		.align	2
 648              	.L36:
 649 0040 3D020008 		.word	134218301
 650              		.cfi_endproc
 651              	.LFE13:
 653              		.section	.text.bottom,"ax",%progbits
 654              		.align	1
 655              		.p2align 2,,3
 656              		.global	bottom
 657              		.syntax unified
 658              		.thumb
 659              		.thumb_func
 660              		.fpu fpv4-sp-d16
 662              	bottom:
 663              	.LVL61:
 664              	.LFB14:
 128:src/lcd.c     ****   lcd_fill_rect ( i+2, j+40, 14, 1, col );
 665              		.loc 1 128 37 is_stmt 1 view -0
 666              		.cfi_startproc
 667              		@ args = 0, pretend = 0, frame = 0
 668              		@ frame_needed = 0, uses_anonymous_args = 0
 129:src/lcd.c     ****   lcd_fill_rect ( i+1, j+39, 16, 1, col );
 669              		.loc 1 129 3 view .LVU110
 128:src/lcd.c     ****   lcd_fill_rect ( i+2, j+40, 14, 1, col );
 670              		.loc 1 128 37 is_stmt 0 view .LVU111
 671 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 672              		.cfi_def_cfa_offset 20
 673              		.cfi_offset 4, -20
 674              		.cfi_offset 5, -16
 675              		.cfi_offset 6, -12
 676              		.cfi_offset 7, -8
 677              		.cfi_offset 14, -4
 678 0002 83B0     		sub	sp, sp, #12
 679              		.cfi_def_cfa_offset 32
 129:src/lcd.c     ****   lcd_fill_rect ( i+1, j+39, 16, 1, col );
 680              		.loc 1 129 3 view .LVU112
ARM GAS  /tmp/ccYbhZ84.s 			page 24


 681 0004 104F     		ldr	r7, .L40
 682 0006 0092     		str	r2, [sp]
 128:src/lcd.c     ****   lcd_fill_rect ( i+2, j+40, 14, 1, col );
 683              		.loc 1 128 37 view .LVU113
 684 0008 0446     		mov	r4, r0
 685 000a 0D46     		mov	r5, r1
 686 000c 1646     		mov	r6, r2
 129:src/lcd.c     ****   lcd_fill_rect ( i+1, j+39, 16, 1, col );
 687              		.loc 1 129 3 view .LVU114
 688 000e 2831     		adds	r1, r1, #40
 689              	.LVL62:
 129:src/lcd.c     ****   lcd_fill_rect ( i+1, j+39, 16, 1, col );
 690              		.loc 1 129 3 view .LVU115
 691 0010 0230     		adds	r0, r0, #2
 692              	.LVL63:
 129:src/lcd.c     ****   lcd_fill_rect ( i+1, j+39, 16, 1, col );
 693              		.loc 1 129 3 view .LVU116
 694 0012 0123     		movs	r3, #1
 695 0014 0E22     		movs	r2, #14
 696              	.LVL64:
 129:src/lcd.c     ****   lcd_fill_rect ( i+1, j+39, 16, 1, col );
 697              		.loc 1 129 3 view .LVU117
 698 0016 B847     		blx	r7
 699              	.LVL65:
 130:src/lcd.c     ****   lcd_fill_rect ( i+3, j+38, 12, 1, col );
 700              		.loc 1 130 3 is_stmt 1 view .LVU118
 701 0018 05F12701 		add	r1, r5, #39
 702 001c 601C     		adds	r0, r4, #1
 703 001e 0096     		str	r6, [sp]
 704 0020 0123     		movs	r3, #1
 705 0022 1022     		movs	r2, #16
 706 0024 B847     		blx	r7
 707              	.LVL66:
 131:src/lcd.c     ****   lcd_fill_rect ( i+4, j+37, 10, 1, col );
 708              		.loc 1 131 3 view .LVU119
 709 0026 05F12601 		add	r1, r5, #38
 710 002a E01C     		adds	r0, r4, #3
 711 002c 0096     		str	r6, [sp]
 712 002e 0123     		movs	r3, #1
 713 0030 0C22     		movs	r2, #12
 714 0032 B847     		blx	r7
 715              	.LVL67:
 132:src/lcd.c     **** }
 716              		.loc 1 132 3 view .LVU120
 717 0034 0096     		str	r6, [sp]
 718 0036 05F12501 		add	r1, r5, #37
 719 003a 201D     		adds	r0, r4, #4
 720 003c 0123     		movs	r3, #1
 721 003e 0A22     		movs	r2, #10
 722 0040 B847     		blx	r7
 723              	.LVL68:
 133:src/lcd.c     **** void decimal (int i, int j, int col) {
 724              		.loc 1 133 1 is_stmt 0 view .LVU121
 725 0042 03B0     		add	sp, sp, #12
 726              		.cfi_def_cfa_offset 20
 727              		@ sp needed
 728 0044 F0BD     		pop	{r4, r5, r6, r7, pc}
ARM GAS  /tmp/ccYbhZ84.s 			page 25


 729              	.LVL69:
 730              	.L41:
 133:src/lcd.c     **** void decimal (int i, int j, int col) {
 731              		.loc 1 133 1 view .LVU122
 732 0046 00BF     		.align	2
 733              	.L40:
 734 0048 3D020008 		.word	134218301
 735              		.cfi_endproc
 736              	.LFE14:
 738              		.section	.text.decimal,"ax",%progbits
 739              		.align	1
 740              		.p2align 2,,3
 741              		.global	decimal
 742              		.syntax unified
 743              		.thumb
 744              		.thumb_func
 745              		.fpu fpv4-sp-d16
 747              	decimal:
 748              	.LVL70:
 749              	.LFB15:
 134:src/lcd.c     ****   lcd_fill_rect (i+19, j+40, 5, 5, col);
 750              		.loc 1 134 38 is_stmt 1 view -0
 751              		.cfi_startproc
 752              		@ args = 0, pretend = 0, frame = 0
 753              		@ frame_needed = 0, uses_anonymous_args = 0
 135:src/lcd.c     **** }
 754              		.loc 1 135 3 view .LVU124
 134:src/lcd.c     ****   lcd_fill_rect (i+19, j+40, 5, 5, col);
 755              		.loc 1 134 38 is_stmt 0 view .LVU125
 756 0000 10B5     		push	{r4, lr}
 757              		.cfi_def_cfa_offset 8
 758              		.cfi_offset 4, -8
 759              		.cfi_offset 14, -4
 760 0002 82B0     		sub	sp, sp, #8
 761              		.cfi_def_cfa_offset 16
 135:src/lcd.c     **** }
 762              		.loc 1 135 3 view .LVU126
 763 0004 0523     		movs	r3, #5
 764 0006 0092     		str	r2, [sp]
 765 0008 034C     		ldr	r4, .L44
 766 000a 1330     		adds	r0, r0, #19
 767              	.LVL71:
 135:src/lcd.c     **** }
 768              		.loc 1 135 3 view .LVU127
 769 000c 2831     		adds	r1, r1, #40
 770              	.LVL72:
 135:src/lcd.c     **** }
 771              		.loc 1 135 3 view .LVU128
 772 000e 1A46     		mov	r2, r3
 773              	.LVL73:
 135:src/lcd.c     **** }
 774              		.loc 1 135 3 view .LVU129
 775 0010 A047     		blx	r4
 776              	.LVL74:
 136:src/lcd.c     **** void comma (int i, int j, int col) {
 777              		.loc 1 136 1 view .LVU130
 778 0012 02B0     		add	sp, sp, #8
ARM GAS  /tmp/ccYbhZ84.s 			page 26


 779              		.cfi_def_cfa_offset 8
 780              		@ sp needed
 781 0014 10BD     		pop	{r4, pc}
 782              	.L45:
 783 0016 00BF     		.align	2
 784              	.L44:
 785 0018 3D020008 		.word	134218301
 786              		.cfi_endproc
 787              	.LFE15:
 789              		.section	.text.comma,"ax",%progbits
 790              		.align	1
 791              		.p2align 2,,3
 792              		.global	comma
 793              		.syntax unified
 794              		.thumb
 795              		.thumb_func
 796              		.fpu fpv4-sp-d16
 798              	comma:
 799              	.LVL75:
 800              	.LFB16:
 137:src/lcd.c     ****   lcd_fill_rect (i+21, j+45, 3, 3, col);
 801              		.loc 1 137 36 is_stmt 1 view -0
 802              		.cfi_startproc
 803              		@ args = 0, pretend = 0, frame = 0
 804              		@ frame_needed = 0, uses_anonymous_args = 0
 138:src/lcd.c     ****   lcd_fill_rect (i+19, j+48, 3, 3, col);
 805              		.loc 1 138 3 view .LVU132
 137:src/lcd.c     ****   lcd_fill_rect (i+21, j+45, 3, 3, col);
 806              		.loc 1 137 36 is_stmt 0 view .LVU133
 807 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 808              		.cfi_def_cfa_offset 20
 809              		.cfi_offset 4, -20
 810              		.cfi_offset 5, -16
 811              		.cfi_offset 6, -12
 812              		.cfi_offset 7, -8
 813              		.cfi_offset 14, -4
 814 0002 83B0     		sub	sp, sp, #12
 815              		.cfi_def_cfa_offset 32
 138:src/lcd.c     ****   lcd_fill_rect (i+19, j+48, 3, 3, col);
 816              		.loc 1 138 3 view .LVU134
 817 0004 0323     		movs	r3, #3
 818 0006 094F     		ldr	r7, .L48
 819 0008 0092     		str	r2, [sp]
 137:src/lcd.c     ****   lcd_fill_rect (i+21, j+45, 3, 3, col);
 820              		.loc 1 137 36 view .LVU135
 821 000a 0446     		mov	r4, r0
 822 000c 0D46     		mov	r5, r1
 823 000e 1646     		mov	r6, r2
 138:src/lcd.c     ****   lcd_fill_rect (i+19, j+48, 3, 3, col);
 824              		.loc 1 138 3 view .LVU136
 825 0010 2D31     		adds	r1, r1, #45
 826              	.LVL76:
 138:src/lcd.c     ****   lcd_fill_rect (i+19, j+48, 3, 3, col);
 827              		.loc 1 138 3 view .LVU137
 828 0012 1A46     		mov	r2, r3
 829              	.LVL77:
 138:src/lcd.c     ****   lcd_fill_rect (i+19, j+48, 3, 3, col);
ARM GAS  /tmp/ccYbhZ84.s 			page 27


 830              		.loc 1 138 3 view .LVU138
 831 0014 1530     		adds	r0, r0, #21
 832              	.LVL78:
 138:src/lcd.c     ****   lcd_fill_rect (i+19, j+48, 3, 3, col);
 833              		.loc 1 138 3 view .LVU139
 834 0016 B847     		blx	r7
 835              	.LVL79:
 139:src/lcd.c     **** }
 836              		.loc 1 139 3 is_stmt 1 view .LVU140
 837 0018 0323     		movs	r3, #3
 838 001a 0096     		str	r6, [sp]
 839 001c 05F13001 		add	r1, r5, #48
 840 0020 04F11300 		add	r0, r4, #19
 841 0024 1A46     		mov	r2, r3
 842 0026 B847     		blx	r7
 843              	.LVL80:
 140:src/lcd.c     **** 
 844              		.loc 1 140 1 is_stmt 0 view .LVU141
 845 0028 03B0     		add	sp, sp, #12
 846              		.cfi_def_cfa_offset 20
 847              		@ sp needed
 848 002a F0BD     		pop	{r4, r5, r6, r7, pc}
 849              	.LVL81:
 850              	.L49:
 140:src/lcd.c     **** 
 851              		.loc 1 140 1 view .LVU142
 852              		.align	2
 853              	.L48:
 854 002c 3D020008 		.word	134218301
 855              		.cfi_endproc
 856              	.LFE16:
 858              		.section	.text.exp_left_side,"ax",%progbits
 859              		.align	1
 860              		.p2align 2,,3
 861              		.global	exp_left_side
 862              		.syntax unified
 863              		.thumb
 864              		.thumb_func
 865              		.fpu fpv4-sp-d16
 867              	exp_left_side:
 868              	.LVL82:
 869              	.LFB17:
 142:src/lcd.c     ****   lcd_fill_rect (i, j+6, 1, 6, col );
 870              		.loc 1 142 44 is_stmt 1 view -0
 871              		.cfi_startproc
 872              		@ args = 0, pretend = 0, frame = 0
 873              		@ frame_needed = 0, uses_anonymous_args = 0
 143:src/lcd.c     ****   lcd_fill_rect (i+1, j, 1, 11, col );
 874              		.loc 1 143 3 view .LVU144
 142:src/lcd.c     ****   lcd_fill_rect (i, j+6, 1, 6, col );
 875              		.loc 1 142 44 is_stmt 0 view .LVU145
 876 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 877              		.cfi_def_cfa_offset 20
 878              		.cfi_offset 4, -20
 879              		.cfi_offset 5, -16
 880              		.cfi_offset 6, -12
 881              		.cfi_offset 7, -8
ARM GAS  /tmp/ccYbhZ84.s 			page 28


 882              		.cfi_offset 14, -4
 883 0002 83B0     		sub	sp, sp, #12
 884              		.cfi_def_cfa_offset 32
 143:src/lcd.c     ****   lcd_fill_rect (i+1, j, 1, 11, col );
 885              		.loc 1 143 3 view .LVU146
 886 0004 0E4F     		ldr	r7, .L52
 887 0006 0092     		str	r2, [sp]
 142:src/lcd.c     ****   lcd_fill_rect (i, j+6, 1, 6, col );
 888              		.loc 1 142 44 view .LVU147
 889 0008 0C46     		mov	r4, r1
 890 000a 1546     		mov	r5, r2
 891 000c 0646     		mov	r6, r0
 143:src/lcd.c     ****   lcd_fill_rect (i+1, j, 1, 11, col );
 892              		.loc 1 143 3 view .LVU148
 893 000e 0631     		adds	r1, r1, #6
 894              	.LVL83:
 143:src/lcd.c     ****   lcd_fill_rect (i+1, j, 1, 11, col );
 895              		.loc 1 143 3 view .LVU149
 896 0010 0623     		movs	r3, #6
 897 0012 0122     		movs	r2, #1
 898              	.LVL84:
 143:src/lcd.c     ****   lcd_fill_rect (i+1, j, 1, 11, col );
 899              		.loc 1 143 3 view .LVU150
 900 0014 B847     		blx	r7
 901              	.LVL85:
 144:src/lcd.c     ****   lcd_fill_rect (i+2, j+1, 1, 9, col );
 902              		.loc 1 144 3 is_stmt 1 view .LVU151
 903 0016 2146     		mov	r1, r4
 904 0018 701C     		adds	r0, r6, #1
 905 001a 0095     		str	r5, [sp]
 906 001c 0B23     		movs	r3, #11
 907 001e 0122     		movs	r2, #1
 908 0020 B847     		blx	r7
 909              	.LVL86:
 145:src/lcd.c     ****   lcd_fill_rect (i+3, j+2, 1, 4, col );
 910              		.loc 1 145 3 view .LVU152
 911 0022 611C     		adds	r1, r4, #1
 912 0024 B01C     		adds	r0, r6, #2
 913 0026 0095     		str	r5, [sp]
 914 0028 0923     		movs	r3, #9
 915 002a 0122     		movs	r2, #1
 916 002c B847     		blx	r7
 917              	.LVL87:
 146:src/lcd.c     **** }
 918              		.loc 1 146 3 view .LVU153
 919 002e 0095     		str	r5, [sp]
 920 0030 A11C     		adds	r1, r4, #2
 921 0032 F01C     		adds	r0, r6, #3
 922 0034 0423     		movs	r3, #4
 923 0036 0122     		movs	r2, #1
 924 0038 B847     		blx	r7
 925              	.LVL88:
 147:src/lcd.c     **** void exp_left_side_top (int i, int j, int col) {
 926              		.loc 1 147 1 is_stmt 0 view .LVU154
 927 003a 03B0     		add	sp, sp, #12
 928              		.cfi_def_cfa_offset 20
 929              		@ sp needed
ARM GAS  /tmp/ccYbhZ84.s 			page 29


 930 003c F0BD     		pop	{r4, r5, r6, r7, pc}
 931              	.LVL89:
 932              	.L53:
 147:src/lcd.c     **** void exp_left_side_top (int i, int j, int col) {
 933              		.loc 1 147 1 view .LVU155
 934 003e 00BF     		.align	2
 935              	.L52:
 936 0040 3D020008 		.word	134218301
 937              		.cfi_endproc
 938              	.LFE17:
 940              		.section	.text.exp_left_side_top,"ax",%progbits
 941              		.align	1
 942              		.p2align 2,,3
 943              		.global	exp_left_side_top
 944              		.syntax unified
 945              		.thumb
 946              		.thumb_func
 947              		.fpu fpv4-sp-d16
 949              	exp_left_side_top:
 950              	.LVL90:
 951              	.LFB18:
 148:src/lcd.c     ****   exp_left_side(i+1, j, col);
 952              		.loc 1 148 48 is_stmt 1 view -0
 953              		.cfi_startproc
 954              		@ args = 0, pretend = 0, frame = 0
 955              		@ frame_needed = 0, uses_anonymous_args = 0
 956              		@ link register save eliminated.
 149:src/lcd.c     **** }
 957              		.loc 1 149 3 view .LVU157
 958 0000 0130     		adds	r0, r0, #1
 959              	.LVL91:
 149:src/lcd.c     **** }
 960              		.loc 1 149 3 is_stmt 0 view .LVU158
 961 0002 FFF7FEBF 		b	exp_left_side
 962              	.LVL92:
 149:src/lcd.c     **** }
 963              		.loc 1 149 3 view .LVU159
 964              		.cfi_endproc
 965              	.LFE18:
 967 0006 00BF     		.section	.text.exp_left_side_bottom,"ax",%progbits
 968              		.align	1
 969              		.p2align 2,,3
 970              		.global	exp_left_side_bottom
 971              		.syntax unified
 972              		.thumb
 973              		.thumb_func
 974              		.fpu fpv4-sp-d16
 976              	exp_left_side_bottom:
 977              	.LVL93:
 978              	.LFB19:
 151:src/lcd.c     ****   exp_left_side(i, j+11, col);
 979              		.loc 1 151 51 is_stmt 1 view -0
 980              		.cfi_startproc
 981              		@ args = 0, pretend = 0, frame = 0
 982              		@ frame_needed = 0, uses_anonymous_args = 0
 983              		@ link register save eliminated.
 152:src/lcd.c     **** }
ARM GAS  /tmp/ccYbhZ84.s 			page 30


 984              		.loc 1 152 3 view .LVU161
 985 0000 0B31     		adds	r1, r1, #11
 986              	.LVL94:
 152:src/lcd.c     **** }
 987              		.loc 1 152 3 is_stmt 0 view .LVU162
 988 0002 FFF7FEBF 		b	exp_left_side
 989              	.LVL95:
 152:src/lcd.c     **** }
 990              		.loc 1 152 3 view .LVU163
 991              		.cfi_endproc
 992              	.LFE19:
 994 0006 00BF     		.section	.text.exp_right_side,"ax",%progbits
 995              		.align	1
 996              		.p2align 2,,3
 997              		.global	exp_right_side
 998              		.syntax unified
 999              		.thumb
 1000              		.thumb_func
 1001              		.fpu fpv4-sp-d16
 1003              	exp_right_side:
 1004              	.LVL96:
 1005              	.LFB20:
 154:src/lcd.c     ****   lcd_fill_rect (i+12, j, 1, 6, col );
 1006              		.loc 1 154 45 is_stmt 1 view -0
 1007              		.cfi_startproc
 1008              		@ args = 0, pretend = 0, frame = 0
 1009              		@ frame_needed = 0, uses_anonymous_args = 0
 155:src/lcd.c     ****   lcd_fill_rect (i+11, j+1, 1, 11, col );
 1010              		.loc 1 155 3 view .LVU165
 154:src/lcd.c     ****   lcd_fill_rect (i+12, j, 1, 6, col );
 1011              		.loc 1 154 45 is_stmt 0 view .LVU166
 1012 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1013              		.cfi_def_cfa_offset 20
 1014              		.cfi_offset 4, -20
 1015              		.cfi_offset 5, -16
 1016              		.cfi_offset 6, -12
 1017              		.cfi_offset 7, -8
 1018              		.cfi_offset 14, -4
 1019 0002 83B0     		sub	sp, sp, #12
 1020              		.cfi_def_cfa_offset 32
 155:src/lcd.c     ****   lcd_fill_rect (i+11, j+1, 1, 11, col );
 1021              		.loc 1 155 3 view .LVU167
 1022 0004 0F4F     		ldr	r7, .L58
 1023 0006 0092     		str	r2, [sp]
 154:src/lcd.c     ****   lcd_fill_rect (i+12, j, 1, 6, col );
 1024              		.loc 1 154 45 view .LVU168
 1025 0008 0446     		mov	r4, r0
 1026 000a 1546     		mov	r5, r2
 1027 000c 0E46     		mov	r6, r1
 155:src/lcd.c     ****   lcd_fill_rect (i+11, j+1, 1, 11, col );
 1028              		.loc 1 155 3 view .LVU169
 1029 000e 0C30     		adds	r0, r0, #12
 1030              	.LVL97:
 155:src/lcd.c     ****   lcd_fill_rect (i+11, j+1, 1, 11, col );
 1031              		.loc 1 155 3 view .LVU170
 1032 0010 0623     		movs	r3, #6
 1033 0012 0122     		movs	r2, #1
ARM GAS  /tmp/ccYbhZ84.s 			page 31


 1034              	.LVL98:
 155:src/lcd.c     ****   lcd_fill_rect (i+11, j+1, 1, 11, col );
 1035              		.loc 1 155 3 view .LVU171
 1036 0014 B847     		blx	r7
 1037              	.LVL99:
 156:src/lcd.c     ****   lcd_fill_rect (i+10, j+2, 1, 9, col );
 1038              		.loc 1 156 3 is_stmt 1 view .LVU172
 1039 0016 711C     		adds	r1, r6, #1
 1040 0018 04F10B00 		add	r0, r4, #11
 1041 001c 0095     		str	r5, [sp]
 1042 001e 0B23     		movs	r3, #11
 1043 0020 0122     		movs	r2, #1
 1044 0022 B847     		blx	r7
 1045              	.LVL100:
 157:src/lcd.c     ****   lcd_fill_rect (i+9, j+6, 1, 4, col );
 1046              		.loc 1 157 3 view .LVU173
 1047 0024 B11C     		adds	r1, r6, #2
 1048 0026 04F10A00 		add	r0, r4, #10
 1049 002a 0095     		str	r5, [sp]
 1050 002c 0923     		movs	r3, #9
 1051 002e 0122     		movs	r2, #1
 1052 0030 B847     		blx	r7
 1053              	.LVL101:
 158:src/lcd.c     **** }
 1054              		.loc 1 158 3 view .LVU174
 1055 0032 0095     		str	r5, [sp]
 1056 0034 B11D     		adds	r1, r6, #6
 1057 0036 04F10900 		add	r0, r4, #9
 1058 003a 0423     		movs	r3, #4
 1059 003c 0122     		movs	r2, #1
 1060 003e B847     		blx	r7
 1061              	.LVL102:
 159:src/lcd.c     **** void exp_right_side_top (int i, int j, int col) {
 1062              		.loc 1 159 1 is_stmt 0 view .LVU175
 1063 0040 03B0     		add	sp, sp, #12
 1064              		.cfi_def_cfa_offset 20
 1065              		@ sp needed
 1066 0042 F0BD     		pop	{r4, r5, r6, r7, pc}
 1067              	.LVL103:
 1068              	.L59:
 159:src/lcd.c     **** void exp_right_side_top (int i, int j, int col) {
 1069              		.loc 1 159 1 view .LVU176
 1070              		.align	2
 1071              	.L58:
 1072 0044 3D020008 		.word	134218301
 1073              		.cfi_endproc
 1074              	.LFE20:
 1076              		.section	.text.exp_right_side_top,"ax",%progbits
 1077              		.align	1
 1078              		.p2align 2,,3
 1079              		.global	exp_right_side_top
 1080              		.syntax unified
 1081              		.thumb
 1082              		.thumb_func
 1083              		.fpu fpv4-sp-d16
 1085              	exp_right_side_top:
 1086              	.LVL104:
ARM GAS  /tmp/ccYbhZ84.s 			page 32


 1087              	.LFB21:
 160:src/lcd.c     ****   exp_right_side(i, j, col);
 1088              		.loc 1 160 49 is_stmt 1 view -0
 1089              		.cfi_startproc
 1090              		@ args = 0, pretend = 0, frame = 0
 1091              		@ frame_needed = 0, uses_anonymous_args = 0
 1092              		@ link register save eliminated.
 161:src/lcd.c     **** }
 1093              		.loc 1 161 3 view .LVU178
 1094 0000 FFF7FEBF 		b	exp_right_side
 1095              	.LVL105:
 161:src/lcd.c     **** }
 1096              		.loc 1 161 3 is_stmt 0 view .LVU179
 1097              		.cfi_endproc
 1098              	.LFE21:
 1100              		.section	.text.exp_right_side_bottom,"ax",%progbits
 1101              		.align	1
 1102              		.p2align 2,,3
 1103              		.global	exp_right_side_bottom
 1104              		.syntax unified
 1105              		.thumb
 1106              		.thumb_func
 1107              		.fpu fpv4-sp-d16
 1109              	exp_right_side_bottom:
 1110              	.LVL106:
 1111              	.LFB22:
 163:src/lcd.c     ****   exp_right_side(i-1, j+11, col);
 1112              		.loc 1 163 52 is_stmt 1 view -0
 1113              		.cfi_startproc
 1114              		@ args = 0, pretend = 0, frame = 0
 1115              		@ frame_needed = 0, uses_anonymous_args = 0
 1116              		@ link register save eliminated.
 164:src/lcd.c     **** }
 1117              		.loc 1 164 3 view .LVU181
 1118 0000 0138     		subs	r0, r0, #1
 1119              	.LVL107:
 164:src/lcd.c     **** }
 1120              		.loc 1 164 3 is_stmt 0 view .LVU182
 1121 0002 0B31     		adds	r1, r1, #11
 1122              	.LVL108:
 164:src/lcd.c     **** }
 1123              		.loc 1 164 3 view .LVU183
 1124 0004 FFF7FEBF 		b	exp_right_side
 1125              	.LVL109:
 164:src/lcd.c     **** }
 1126              		.loc 1 164 3 view .LVU184
 1127              		.cfi_endproc
 1128              	.LFE22:
 1130              		.section	.text.exp_top,"ax",%progbits
 1131              		.align	1
 1132              		.p2align 2,,3
 1133              		.global	exp_top
 1134              		.syntax unified
 1135              		.thumb
 1136              		.thumb_func
 1137              		.fpu fpv4-sp-d16
 1139              	exp_top:
ARM GAS  /tmp/ccYbhZ84.s 			page 33


 1140              	.LVL110:
 1141              	.LFB23:
 166:src/lcd.c     ****   lcd_fill_rect (i+4, j, 7, 1, col );
 1142              		.loc 1 166 38 is_stmt 1 view -0
 1143              		.cfi_startproc
 1144              		@ args = 0, pretend = 0, frame = 0
 1145              		@ frame_needed = 0, uses_anonymous_args = 0
 167:src/lcd.c     ****   lcd_fill_rect (i+5, j+1, 5, 1, col );
 1146              		.loc 1 167 3 view .LVU186
 166:src/lcd.c     ****   lcd_fill_rect (i+4, j, 7, 1, col );
 1147              		.loc 1 166 38 is_stmt 0 view .LVU187
 1148 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1149              		.cfi_def_cfa_offset 20
 1150              		.cfi_offset 4, -20
 1151              		.cfi_offset 5, -16
 1152              		.cfi_offset 6, -12
 1153              		.cfi_offset 7, -8
 1154              		.cfi_offset 14, -4
 1155 0002 83B0     		sub	sp, sp, #12
 1156              		.cfi_def_cfa_offset 32
 167:src/lcd.c     ****   lcd_fill_rect (i+5, j+1, 5, 1, col );
 1157              		.loc 1 167 3 view .LVU188
 1158 0004 0B4F     		ldr	r7, .L64
 1159 0006 0092     		str	r2, [sp]
 166:src/lcd.c     ****   lcd_fill_rect (i+4, j, 7, 1, col );
 1160              		.loc 1 166 38 view .LVU189
 1161 0008 0446     		mov	r4, r0
 1162 000a 1546     		mov	r5, r2
 1163 000c 0E46     		mov	r6, r1
 167:src/lcd.c     ****   lcd_fill_rect (i+5, j+1, 5, 1, col );
 1164              		.loc 1 167 3 view .LVU190
 1165 000e 0430     		adds	r0, r0, #4
 1166              	.LVL111:
 167:src/lcd.c     ****   lcd_fill_rect (i+5, j+1, 5, 1, col );
 1167              		.loc 1 167 3 view .LVU191
 1168 0010 0123     		movs	r3, #1
 1169 0012 0722     		movs	r2, #7
 1170              	.LVL112:
 167:src/lcd.c     ****   lcd_fill_rect (i+5, j+1, 5, 1, col );
 1171              		.loc 1 167 3 view .LVU192
 1172 0014 B847     		blx	r7
 1173              	.LVL113:
 168:src/lcd.c     ****   lcd_fill_rect (i+6, j+2, 3, 1, col );
 1174              		.loc 1 168 3 is_stmt 1 view .LVU193
 1175 0016 711C     		adds	r1, r6, #1
 1176 0018 601D     		adds	r0, r4, #5
 1177 001a 0095     		str	r5, [sp]
 1178 001c 0123     		movs	r3, #1
 1179 001e 0522     		movs	r2, #5
 1180 0020 B847     		blx	r7
 1181              	.LVL114:
 169:src/lcd.c     **** }
 1182              		.loc 1 169 3 view .LVU194
 1183 0022 0095     		str	r5, [sp]
 1184 0024 B11C     		adds	r1, r6, #2
 1185 0026 A01D     		adds	r0, r4, #6
 1186 0028 0123     		movs	r3, #1
ARM GAS  /tmp/ccYbhZ84.s 			page 34


 1187 002a 0322     		movs	r2, #3
 1188 002c B847     		blx	r7
 1189              	.LVL115:
 170:src/lcd.c     **** void exp_bottom (int i, int j, int col) {
 1190              		.loc 1 170 1 is_stmt 0 view .LVU195
 1191 002e 03B0     		add	sp, sp, #12
 1192              		.cfi_def_cfa_offset 20
 1193              		@ sp needed
 1194 0030 F0BD     		pop	{r4, r5, r6, r7, pc}
 1195              	.LVL116:
 1196              	.L65:
 170:src/lcd.c     **** void exp_bottom (int i, int j, int col) {
 1197              		.loc 1 170 1 view .LVU196
 1198 0032 00BF     		.align	2
 1199              	.L64:
 1200 0034 3D020008 		.word	134218301
 1201              		.cfi_endproc
 1202              	.LFE23:
 1204              		.section	.text.exp_bottom,"ax",%progbits
 1205              		.align	1
 1206              		.p2align 2,,3
 1207              		.global	exp_bottom
 1208              		.syntax unified
 1209              		.thumb
 1210              		.thumb_func
 1211              		.fpu fpv4-sp-d16
 1213              	exp_bottom:
 1214              	.LVL117:
 1215              	.LFB24:
 171:src/lcd.c     ****   lcd_fill_rect (i+2, j+22, 7, 1, col );
 1216              		.loc 1 171 41 is_stmt 1 view -0
 1217              		.cfi_startproc
 1218              		@ args = 0, pretend = 0, frame = 0
 1219              		@ frame_needed = 0, uses_anonymous_args = 0
 172:src/lcd.c     ****   lcd_fill_rect (i+3, j+21, 5, 1, col );
 1220              		.loc 1 172 3 view .LVU198
 171:src/lcd.c     ****   lcd_fill_rect (i+2, j+22, 7, 1, col );
 1221              		.loc 1 171 41 is_stmt 0 view .LVU199
 1222 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1223              		.cfi_def_cfa_offset 20
 1224              		.cfi_offset 4, -20
 1225              		.cfi_offset 5, -16
 1226              		.cfi_offset 6, -12
 1227              		.cfi_offset 7, -8
 1228              		.cfi_offset 14, -4
 1229 0002 83B0     		sub	sp, sp, #12
 1230              		.cfi_def_cfa_offset 32
 172:src/lcd.c     ****   lcd_fill_rect (i+3, j+21, 5, 1, col );
 1231              		.loc 1 172 3 view .LVU200
 1232 0004 0C4F     		ldr	r7, .L68
 1233 0006 0092     		str	r2, [sp]
 171:src/lcd.c     ****   lcd_fill_rect (i+2, j+22, 7, 1, col );
 1234              		.loc 1 171 41 view .LVU201
 1235 0008 0446     		mov	r4, r0
 1236 000a 0D46     		mov	r5, r1
 1237 000c 1646     		mov	r6, r2
 172:src/lcd.c     ****   lcd_fill_rect (i+3, j+21, 5, 1, col );
ARM GAS  /tmp/ccYbhZ84.s 			page 35


 1238              		.loc 1 172 3 view .LVU202
 1239 000e 1631     		adds	r1, r1, #22
 1240              	.LVL118:
 172:src/lcd.c     ****   lcd_fill_rect (i+3, j+21, 5, 1, col );
 1241              		.loc 1 172 3 view .LVU203
 1242 0010 0230     		adds	r0, r0, #2
 1243              	.LVL119:
 172:src/lcd.c     ****   lcd_fill_rect (i+3, j+21, 5, 1, col );
 1244              		.loc 1 172 3 view .LVU204
 1245 0012 0123     		movs	r3, #1
 1246 0014 0722     		movs	r2, #7
 1247              	.LVL120:
 172:src/lcd.c     ****   lcd_fill_rect (i+3, j+21, 5, 1, col );
 1248              		.loc 1 172 3 view .LVU205
 1249 0016 B847     		blx	r7
 1250              	.LVL121:
 173:src/lcd.c     ****   lcd_fill_rect (i+4, j+20, 3, 1, col );
 1251              		.loc 1 173 3 is_stmt 1 view .LVU206
 1252 0018 05F11501 		add	r1, r5, #21
 1253 001c E01C     		adds	r0, r4, #3
 1254 001e 0096     		str	r6, [sp]
 1255 0020 0123     		movs	r3, #1
 1256 0022 0522     		movs	r2, #5
 1257 0024 B847     		blx	r7
 1258              	.LVL122:
 174:src/lcd.c     **** }
 1259              		.loc 1 174 3 view .LVU207
 1260 0026 0096     		str	r6, [sp]
 1261 0028 05F11401 		add	r1, r5, #20
 1262 002c 201D     		adds	r0, r4, #4
 1263 002e 0123     		movs	r3, #1
 1264 0030 0322     		movs	r2, #3
 1265 0032 B847     		blx	r7
 1266              	.LVL123:
 175:src/lcd.c     **** void exp_middle (int i, int j, int col) {
 1267              		.loc 1 175 1 is_stmt 0 view .LVU208
 1268 0034 03B0     		add	sp, sp, #12
 1269              		.cfi_def_cfa_offset 20
 1270              		@ sp needed
 1271 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 1272              	.LVL124:
 1273              	.L69:
 175:src/lcd.c     **** void exp_middle (int i, int j, int col) {
 1274              		.loc 1 175 1 view .LVU209
 1275              		.align	2
 1276              	.L68:
 1277 0038 3D020008 		.word	134218301
 1278              		.cfi_endproc
 1279              	.LFE24:
 1281              		.section	.text.exp_middle,"ax",%progbits
 1282              		.align	1
 1283              		.p2align 2,,3
 1284              		.global	exp_middle
 1285              		.syntax unified
 1286              		.thumb
 1287              		.thumb_func
 1288              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccYbhZ84.s 			page 36


 1290              	exp_middle:
 1291              	.LVL125:
 1292              	.LFB25:
 176:src/lcd.c     ****   lcd_fill_rect (i+4, j+10, 5, 1, col );
 1293              		.loc 1 176 41 is_stmt 1 view -0
 1294              		.cfi_startproc
 1295              		@ args = 0, pretend = 0, frame = 0
 1296              		@ frame_needed = 0, uses_anonymous_args = 0
 177:src/lcd.c     ****   lcd_fill_rect (i+3, j+11, 7, 1, col );
 1297              		.loc 1 177 3 view .LVU211
 176:src/lcd.c     ****   lcd_fill_rect (i+4, j+10, 5, 1, col );
 1298              		.loc 1 176 41 is_stmt 0 view .LVU212
 1299 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1300              		.cfi_def_cfa_offset 24
 1301              		.cfi_offset 4, -24
 1302              		.cfi_offset 5, -20
 1303              		.cfi_offset 6, -16
 1304              		.cfi_offset 7, -12
 1305              		.cfi_offset 8, -8
 1306              		.cfi_offset 14, -4
 1307 0004 82B0     		sub	sp, sp, #8
 1308              		.cfi_def_cfa_offset 32
 177:src/lcd.c     ****   lcd_fill_rect (i+3, j+11, 7, 1, col );
 1309              		.loc 1 177 19 view .LVU213
 1310 0006 00F10408 		add	r8, r0, #4
 177:src/lcd.c     ****   lcd_fill_rect (i+3, j+11, 7, 1, col );
 1311              		.loc 1 177 3 view .LVU214
 1312 000a 0D4F     		ldr	r7, .L72
 1313 000c 0092     		str	r2, [sp]
 176:src/lcd.c     ****   lcd_fill_rect (i+4, j+10, 5, 1, col );
 1314              		.loc 1 176 41 view .LVU215
 1315 000e 0C46     		mov	r4, r1
 1316 0010 1546     		mov	r5, r2
 1317 0012 0646     		mov	r6, r0
 177:src/lcd.c     ****   lcd_fill_rect (i+3, j+11, 7, 1, col );
 1318              		.loc 1 177 3 view .LVU216
 1319 0014 0A31     		adds	r1, r1, #10
 1320              	.LVL126:
 177:src/lcd.c     ****   lcd_fill_rect (i+3, j+11, 7, 1, col );
 1321              		.loc 1 177 3 view .LVU217
 1322 0016 4046     		mov	r0, r8
 1323              	.LVL127:
 177:src/lcd.c     ****   lcd_fill_rect (i+3, j+11, 7, 1, col );
 1324              		.loc 1 177 3 view .LVU218
 1325 0018 0123     		movs	r3, #1
 1326 001a 0522     		movs	r2, #5
 1327              	.LVL128:
 177:src/lcd.c     ****   lcd_fill_rect (i+3, j+11, 7, 1, col );
 1328              		.loc 1 177 3 view .LVU219
 1329 001c B847     		blx	r7
 1330              	.LVL129:
 178:src/lcd.c     ****   lcd_fill_rect (i+4, j+12, 5, 1, col );
 1331              		.loc 1 178 3 is_stmt 1 view .LVU220
 1332 001e F01C     		adds	r0, r6, #3
 1333 0020 04F10B01 		add	r1, r4, #11
 1334 0024 0095     		str	r5, [sp]
 1335 0026 0123     		movs	r3, #1
ARM GAS  /tmp/ccYbhZ84.s 			page 37


 1336 0028 0722     		movs	r2, #7
 1337 002a B847     		blx	r7
 1338              	.LVL130:
 179:src/lcd.c     **** }
 1339              		.loc 1 179 3 view .LVU221
 1340 002c 4046     		mov	r0, r8
 1341 002e 0095     		str	r5, [sp]
 1342 0030 04F10C01 		add	r1, r4, #12
 1343 0034 0123     		movs	r3, #1
 1344 0036 0522     		movs	r2, #5
 1345 0038 B847     		blx	r7
 1346              	.LVL131:
 180:src/lcd.c     **** 
 1347              		.loc 1 180 1 is_stmt 0 view .LVU222
 1348 003a 02B0     		add	sp, sp, #8
 1349              		.cfi_def_cfa_offset 24
 1350              		@ sp needed
 1351 003c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1352              	.LVL132:
 1353              	.L73:
 180:src/lcd.c     **** 
 1354              		.loc 1 180 1 view .LVU223
 1355              		.align	2
 1356              	.L72:
 1357 0040 3D020008 		.word	134218301
 1358              		.cfi_endproc
 1359              	.LFE25:
 1361              		.section	.rodata.draw_BEG.str1.4,"aMS",%progbits,1
 1362              		.align	2
 1363              	.LC1:
 1364 0000 533A3800 		.ascii	"S:8\000"
 1365              		.section	.text.draw_BEG,"ax",%progbits
 1366              		.align	1
 1367              		.p2align 2,,3
 1368              		.global	draw_BEG
 1369              		.syntax unified
 1370              		.thumb
 1371              		.thumb_func
 1372              		.fpu fpv4-sp-d16
 1374              	draw_BEG:
 1375              	.LVL133:
 1376              	.LFB27:
 541:src/lcd.c     ****   t20->inv = inverse;
 1377              		.loc 1 541 40 is_stmt 1 view -0
 1378              		.cfi_startproc
 1379              		@ args = 0, pretend = 0, frame = 0
 1380              		@ frame_needed = 0, uses_anonymous_args = 0
 541:src/lcd.c     ****   t20->inv = inverse;
 1381              		.loc 1 541 40 is_stmt 0 view .LVU225
 1382 0000 70B5     		push	{r4, r5, r6, lr}
 1383              		.cfi_def_cfa_offset 16
 1384              		.cfi_offset 4, -16
 1385              		.cfi_offset 5, -12
 1386              		.cfi_offset 6, -8
 1387              		.cfi_offset 14, -4
 542:src/lcd.c     ****   lcd_setXY (t20, 285, Y_ANNUNC-50);
 1388              		.loc 1 542 3 view .LVU226
ARM GAS  /tmp/ccYbhZ84.s 			page 38


 1389 0002 0B4D     		ldr	r5, .L78
 543:src/lcd.c     ****   if (depth == 4) {
 1390              		.loc 1 543 3 view .LVU227
 1391 0004 0B4E     		ldr	r6, .L78+4
 542:src/lcd.c     ****   lcd_setXY (t20, 285, Y_ANNUNC-50);
 1392              		.loc 1 542 3 view .LVU228
 1393 0006 2B6B     		ldr	r3, [r5, #48]
 541:src/lcd.c     ****   t20->inv = inverse;
 1394              		.loc 1 541 40 view .LVU229
 1395 0008 0446     		mov	r4, r0
 542:src/lcd.c     ****   lcd_setXY (t20, 285, Y_ANNUNC-50);
 1396              		.loc 1 542 3 is_stmt 1 view .LVU230
 542:src/lcd.c     ****   lcd_setXY (t20, 285, Y_ANNUNC-50);
 1397              		.loc 1 542 12 is_stmt 0 view .LVU231
 1398 000a 5974     		strb	r1, [r3, #17]
 543:src/lcd.c     ****   if (depth == 4) {
 1399              		.loc 1 543 3 is_stmt 1 view .LVU232
 1400 000c 1846     		mov	r0, r3
 1401              	.LVL134:
 543:src/lcd.c     ****   if (depth == 4) {
 1402              		.loc 1 543 3 is_stmt 0 view .LVU233
 1403 000e 1922     		movs	r2, #25
 1404 0010 40F21D11 		movw	r1, #285
 1405              	.LVL135:
 543:src/lcd.c     ****   if (depth == 4) {
 1406              		.loc 1 543 3 view .LVU234
 1407 0014 B047     		blx	r6
 1408              	.LVL136:
 544:src/lcd.c     ****     lcd_writeText(t20, "S:4");
 1409              		.loc 1 544 3 is_stmt 1 view .LVU235
 544:src/lcd.c     ****     lcd_writeText(t20, "S:4");
 1410              		.loc 1 544 6 is_stmt 0 view .LVU236
 1411 0016 042C     		cmp	r4, #4
 1412 0018 05D0     		beq	.L77
 546:src/lcd.c     ****   }
 547:src/lcd.c     ****   else {
 548:src/lcd.c     ****     lcd_writeText(t20, "S:8");
 1413              		.loc 1 548 5 is_stmt 1 view .LVU237
 1414 001a 286B     		ldr	r0, [r5, #48]
 1415 001c 064B     		ldr	r3, .L78+8
 1416 001e 0749     		ldr	r1, .L78+12
 549:src/lcd.c     ****   }
 550:src/lcd.c     ****   return;
 551:src/lcd.c     **** }
 1417              		.loc 1 551 1 is_stmt 0 view .LVU238
 1418 0020 BDE87040 		pop	{r4, r5, r6, lr}
 1419              		.cfi_remember_state
 1420              		.cfi_restore 14
 1421              		.cfi_restore 6
 1422              		.cfi_restore 5
 1423              		.cfi_restore 4
 1424              		.cfi_def_cfa_offset 0
 1425              	.LVL137:
 548:src/lcd.c     ****   }
 1426              		.loc 1 548 5 view .LVU239
 1427 0024 1847     		bx	r3	@ indirect register sibling call
 1428              	.LVL138:
ARM GAS  /tmp/ccYbhZ84.s 			page 39


 1429              	.L77:
 1430              		.cfi_restore_state
 1431              		.loc 1 551 1 view .LVU240
 1432 0026 BDE87040 		pop	{r4, r5, r6, lr}
 1433              		.cfi_restore 14
 1434              		.cfi_restore 6
 1435              		.cfi_restore 5
 1436              		.cfi_restore 4
 1437              		.cfi_def_cfa_offset 0
 1438              	.LVL139:
 1439              		.loc 1 551 1 view .LVU241
 1440 002a FFF7FEBF 		b	draw_BEG.part.0
 1441              	.LVL140:
 1442              	.L79:
 1443 002e 00BF     		.align	2
 1444              	.L78:
 1445 0030 00200010 		.word	268443648
 1446 0034 6D020008 		.word	134218349
 1447 0038 7D020008 		.word	134218365
 1448 003c 00000000 		.word	.LC1
 1449              		.cfi_endproc
 1450              	.LFE27:
 1452              		.section	.rodata.draw_RPN.str1.4,"aMS",%progbits,1
 1453              		.align	2
 1454              	.LC2:
 1455 0000 6552504E 		.ascii	"eRPN\000"
 1455      00
 1456 0005 000000   		.align	2
 1457              	.LC3:
 1458 0008 52504E00 		.ascii	"RPN\000"
 1459              		.section	.text.draw_RPN,"ax",%progbits
 1460              		.align	1
 1461              		.p2align 2,,3
 1462              		.global	draw_RPN
 1463              		.syntax unified
 1464              		.thumb
 1465              		.thumb_func
 1466              		.fpu fpv4-sp-d16
 1468              	draw_RPN:
 1469              	.LVL141:
 1470              	.LFB31:
 552:src/lcd.c     **** 
 553:src/lcd.c     **** void finish_display(void) {
 554:src/lcd.c     ****   draw_PRT();
 555:src/lcd.c     ****   finish_7_segment();
 556:src/lcd.c     **** #ifdef TOP_ROW
 557:src/lcd.c     ****   finish_top_row();
 558:src/lcd.c     **** #endif
 559:src/lcd.c     ****   lcd_refresh();
 560:src/lcd.c     **** }
 561:src/lcd.c     **** 
 562:src/lcd.c     **** void finish_7_segment(void) {
 563:src/lcd.c     ****   for (int i = 0; i <= EXP_SIGN; ++i) {
 564:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 565:src/lcd.c     ****   }
 566:src/lcd.c     **** }
 567:src/lcd.c     **** 
ARM GAS  /tmp/ccYbhZ84.s 			page 40


 568:src/lcd.c     **** #ifdef TOP_ROW
 569:src/lcd.c     **** void finish_top_row(void) {
 570:src/lcd.c     ****  for (int i = MB_TOP; i < TOP_DOTS; ++i) {
 571:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 572:src/lcd.c     ****   }
 573:src/lcd.c     **** } 
 574:src/lcd.c     **** #endif
 575:src/lcd.c     **** 
 576:src/lcd.c     **** void draw_RPN(int inverse) {
 1471              		.loc 1 576 28 is_stmt 1 view -0
 1472              		.cfi_startproc
 1473              		@ args = 0, pretend = 0, frame = 0
 1474              		@ frame_needed = 0, uses_anonymous_args = 0
 577:src/lcd.c     ****   t20->inv = inverse;
 1475              		.loc 1 577 3 view .LVU243
 576:src/lcd.c     ****   t20->inv = inverse;
 1476              		.loc 1 576 28 is_stmt 0 view .LVU244
 1477 0000 10B5     		push	{r4, lr}
 1478              		.cfi_def_cfa_offset 8
 1479              		.cfi_offset 4, -8
 1480              		.cfi_offset 14, -4
 1481              		.loc 1 577 3 view .LVU245
 1482 0002 104C     		ldr	r4, .L83
 578:src/lcd.c     ****   if (ENTRY_RPN_ENABLED) {
 1483              		.loc 1 578 7 view .LVU246
 1484 0004 104A     		ldr	r2, .L83+4
 577:src/lcd.c     ****   t20->inv = inverse;
 1485              		.loc 1 577 3 view .LVU247
 1486 0006 236B     		ldr	r3, [r4, #48]
 1487              		.loc 1 578 7 view .LVU248
 1488 0008 1268     		ldr	r2, [r2]
 577:src/lcd.c     ****   t20->inv = inverse;
 1489              		.loc 1 577 12 view .LVU249
 1490 000a 5874     		strb	r0, [r3, #17]
 1491              		.loc 1 578 3 is_stmt 1 view .LVU250
 1492              		.loc 1 578 7 is_stmt 0 view .LVU251
 1493 000c 92F8AD27 		ldrb	r2, [r2, #1965]	@ zero_extendqisi2
 1494              		.loc 1 578 6 view .LVU252
 1495 0010 12F0020F 		tst	r2, #2
 579:src/lcd.c     ****     lcd_setXY (t20, 355, Y_ANNUNC-30);
 1496              		.loc 1 579 5 view .LVU253
 1497 0014 1846     		mov	r0, r3
 1498              	.LVL142:
 1499              		.loc 1 579 5 view .LVU254
 1500 0016 4FF02D02 		mov	r2, #45
 1501 001a 0C4B     		ldr	r3, .L83+8
 578:src/lcd.c     ****   if (ENTRY_RPN_ENABLED) {
 1502              		.loc 1 578 6 view .LVU255
 1503 001c 08D0     		beq	.L81
 1504              		.loc 1 579 5 is_stmt 1 view .LVU256
 1505 001e 40F26311 		movw	r1, #355
 1506 0022 9847     		blx	r3
 1507              	.LVL143:
 580:src/lcd.c     ****     lcd_writeText(t20, "eRPN");
 1508              		.loc 1 580 5 view .LVU257
 1509 0024 206B     		ldr	r0, [r4, #48]
 1510 0026 0A4B     		ldr	r3, .L83+12
ARM GAS  /tmp/ccYbhZ84.s 			page 41


 1511 0028 0A49     		ldr	r1, .L83+16
 581:src/lcd.c     ****   }
 582:src/lcd.c     ****   else {
 583:src/lcd.c     ****     lcd_setXY (t20, 365, Y_ANNUNC-30);
 584:src/lcd.c     ****     lcd_writeText(t20, "RPN");
 585:src/lcd.c     ****   }
 586:src/lcd.c     **** }
 1512              		.loc 1 586 1 is_stmt 0 view .LVU258
 1513 002a BDE81040 		pop	{r4, lr}
 1514              		.cfi_remember_state
 1515              		.cfi_restore 14
 1516              		.cfi_restore 4
 1517              		.cfi_def_cfa_offset 0
 580:src/lcd.c     ****     lcd_writeText(t20, "eRPN");
 1518              		.loc 1 580 5 view .LVU259
 1519 002e 1847     		bx	r3	@ indirect register sibling call
 1520              	.LVL144:
 1521              	.L81:
 1522              		.cfi_restore_state
 583:src/lcd.c     ****     lcd_writeText(t20, "RPN");
 1523              		.loc 1 583 5 is_stmt 1 view .LVU260
 1524 0030 40F26D11 		movw	r1, #365
 1525 0034 9847     		blx	r3
 1526              	.LVL145:
 584:src/lcd.c     ****   }
 1527              		.loc 1 584 5 view .LVU261
 1528 0036 206B     		ldr	r0, [r4, #48]
 1529 0038 054B     		ldr	r3, .L83+12
 1530 003a 0749     		ldr	r1, .L83+20
 1531              		.loc 1 586 1 is_stmt 0 view .LVU262
 1532 003c BDE81040 		pop	{r4, lr}
 1533              		.cfi_restore 14
 1534              		.cfi_restore 4
 1535              		.cfi_def_cfa_offset 0
 584:src/lcd.c     ****   }
 1536              		.loc 1 584 5 view .LVU263
 1537 0040 1847     		bx	r3	@ indirect register sibling call
 1538              	.LVL146:
 1539              	.L84:
 1540 0042 00BF     		.align	2
 1541              	.L83:
 1542 0044 00200010 		.word	268443648
 1543 0048 00000000 		.word	main_ram
 1544 004c 6D020008 		.word	134218349
 1545 0050 7D020008 		.word	134218365
 1546 0054 00000000 		.word	.LC2
 1547 0058 08000000 		.word	.LC3
 1548              		.cfi_endproc
 1549              	.LFE31:
 1551              		.section	.rodata.draw_RCL.str1.4,"aMS",%progbits,1
 1552              		.align	2
 1553              	.LC4:
 1554 0000 52554E00 		.ascii	"RUN\000"
 1555              		.section	.text.draw_RCL,"ax",%progbits
 1556              		.align	1
 1557              		.p2align 2,,3
 1558              		.global	draw_RCL
ARM GAS  /tmp/ccYbhZ84.s 			page 42


 1559              		.syntax unified
 1560              		.thumb
 1561              		.thumb_func
 1562              		.fpu fpv4-sp-d16
 1564              	draw_RCL:
 1565              	.LVL147:
 1566              	.LFB32:
 587:src/lcd.c     **** 
 588:src/lcd.c     **** void draw_RCL(int inverse) {
 1567              		.loc 1 588 28 is_stmt 1 view -0
 1568              		.cfi_startproc
 1569              		@ args = 0, pretend = 0, frame = 0
 1570              		@ frame_needed = 0, uses_anonymous_args = 0
 589:src/lcd.c     ****   t20->inv = inverse;
 1571              		.loc 1 589 3 view .LVU265
 588:src/lcd.c     ****   t20->inv = inverse;
 1572              		.loc 1 588 28 is_stmt 0 view .LVU266
 1573 0000 70B5     		push	{r4, r5, r6, lr}
 1574              		.cfi_def_cfa_offset 16
 1575              		.cfi_offset 4, -16
 1576              		.cfi_offset 5, -12
 1577              		.cfi_offset 6, -8
 1578              		.cfi_offset 14, -4
 1579              		.loc 1 589 3 view .LVU267
 1580 0002 074C     		ldr	r4, .L87
 590:src/lcd.c     ****   lcd_setXY (t20, 365, Y_ANNUNC-50);
 1581              		.loc 1 590 3 view .LVU268
 1582 0004 074D     		ldr	r5, .L87+4
 589:src/lcd.c     ****   t20->inv = inverse;
 1583              		.loc 1 589 3 view .LVU269
 1584 0006 236B     		ldr	r3, [r4, #48]
 1585              		.loc 1 590 3 view .LVU270
 1586 0008 40F26D11 		movw	r1, #365
 589:src/lcd.c     ****   t20->inv = inverse;
 1587              		.loc 1 589 12 view .LVU271
 1588 000c 5874     		strb	r0, [r3, #17]
 1589              		.loc 1 590 3 is_stmt 1 view .LVU272
 1590 000e 1922     		movs	r2, #25
 1591 0010 1846     		mov	r0, r3
 1592              	.LVL148:
 1593              		.loc 1 590 3 is_stmt 0 view .LVU273
 1594 0012 A847     		blx	r5
 1595              	.LVL149:
 591:src/lcd.c     ****   lcd_writeText(t20, "RUN");
 1596              		.loc 1 591 3 is_stmt 1 view .LVU274
 1597 0014 206B     		ldr	r0, [r4, #48]
 1598 0016 044B     		ldr	r3, .L87+8
 1599 0018 0449     		ldr	r1, .L87+12
 592:src/lcd.c     ****   //  t20->inv = 0;
 593:src/lcd.c     **** }
 1600              		.loc 1 593 1 is_stmt 0 view .LVU275
 1601 001a BDE87040 		pop	{r4, r5, r6, lr}
 1602              		.cfi_restore 14
 1603              		.cfi_restore 6
 1604              		.cfi_restore 5
 1605              		.cfi_restore 4
 1606              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccYbhZ84.s 			page 43


 591:src/lcd.c     ****   lcd_writeText(t20, "RUN");
 1607              		.loc 1 591 3 view .LVU276
 1608 001e 1847     		bx	r3	@ indirect register sibling call
 1609              	.LVL150:
 1610              	.L88:
 1611              		.align	2
 1612              	.L87:
 1613 0020 00200010 		.word	268443648
 1614 0024 6D020008 		.word	134218349
 1615 0028 7D020008 		.word	134218365
 1616 002c 00000000 		.word	.LC4
 1617              		.cfi_endproc
 1618              	.LFE32:
 1620              		.section	.rodata.draw_LEQ.str1.4,"aMS",%progbits,1
 1621              		.align	2
 1622              	.LC5:
 1623 0000 435F4C4B 		.ascii	"C_LK\000"
 1623      00
 1624 0005 000000   		.align	2
 1625              	.LC6:
 1626 0008 3D00     		.ascii	"=\000"
 1627              		.section	.text.draw_LEQ,"ax",%progbits
 1628              		.align	1
 1629              		.p2align 2,,3
 1630              		.global	draw_LEQ
 1631              		.syntax unified
 1632              		.thumb
 1633              		.thumb_func
 1634              		.fpu fpv4-sp-d16
 1636              	draw_LEQ:
 1637              	.LFB33:
 594:src/lcd.c     **** 
 595:src/lcd.c     **** void draw_LEQ(void) { // little equals
 1638              		.loc 1 595 21 is_stmt 1 view -0
 1639              		.cfi_startproc
 1640              		@ args = 0, pretend = 0, frame = 0
 1641              		@ frame_needed = 0, uses_anonymous_args = 0
 596:src/lcd.c     ****   t20->inv = !(dots[LIT_EQ]&1);
 1642              		.loc 1 596 3 view .LVU278
 595:src/lcd.c     ****   t20->inv = !(dots[LIT_EQ]&1);
 1643              		.loc 1 595 21 is_stmt 0 view .LVU279
 1644 0000 38B5     		push	{r3, r4, r5, lr}
 1645              		.cfi_def_cfa_offset 16
 1646              		.cfi_offset 3, -16
 1647              		.cfi_offset 4, -12
 1648              		.cfi_offset 5, -8
 1649              		.cfi_offset 14, -4
 1650              		.loc 1 596 20 view .LVU280
 1651 0002 104B     		ldr	r3, .L93
 1652              		.loc 1 596 3 view .LVU281
 1653 0004 104C     		ldr	r4, .L93+4
 1654              		.loc 1 596 12 view .LVU282
 1655 0006 93F88430 		ldrb	r3, [r3, #132]	@ zero_extendqisi2
 1656              		.loc 1 596 3 view .LVU283
 1657 000a 206B     		ldr	r0, [r4, #48]
 597:src/lcd.c     ****   lcd_setXY (t20, 360, Y_ANNUNC-70);
 1658              		.loc 1 597 3 view .LVU284
ARM GAS  /tmp/ccYbhZ84.s 			page 44


 1659 000c 0F4D     		ldr	r5, .L93+8
 596:src/lcd.c     ****   t20->inv = !(dots[LIT_EQ]&1);
 1660              		.loc 1 596 12 view .LVU285
 1661 000e DB43     		mvns	r3, r3
 1662 0010 03F00103 		and	r3, r3, #1
 1663              		.loc 1 597 3 view .LVU286
 1664 0014 4FF4B471 		mov	r1, #360
 596:src/lcd.c     ****   t20->inv = !(dots[LIT_EQ]&1);
 1665              		.loc 1 596 12 view .LVU287
 1666 0018 4374     		strb	r3, [r0, #17]
 1667              		.loc 1 597 3 is_stmt 1 view .LVU288
 1668 001a 0522     		movs	r2, #5
 1669 001c A847     		blx	r5
 1670              	.LVL151:
 598:src/lcd.c     **** #ifdef INCLUDE_C_LOCK
 599:src/lcd.c     ****   if (C_LOCKED) {
 1671              		.loc 1 599 3 view .LVU289
 600:src/lcd.c     ****     lcd_writeText(t20, "C_LK");
 1672              		.loc 1 600 5 view .LVU290
 601:src/lcd.c     ****   }
 602:src/lcd.c     ****   else {
 603:src/lcd.c     ****     lcd_writeText(t20, "=");
 1673              		.loc 1 603 5 view .LVU291
 599:src/lcd.c     ****     lcd_writeText(t20, "C_LK");
 1674              		.loc 1 599 7 is_stmt 0 view .LVU292
 1675 001e 0C4B     		ldr	r3, .L93+12
 600:src/lcd.c     ****     lcd_writeText(t20, "C_LK");
 1676              		.loc 1 600 5 view .LVU293
 1677 0020 206B     		ldr	r0, [r4, #48]
 599:src/lcd.c     ****     lcd_writeText(t20, "C_LK");
 1678              		.loc 1 599 7 view .LVU294
 1679 0022 1B68     		ldr	r3, [r3]
 1680 0024 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 599:src/lcd.c     ****     lcd_writeText(t20, "C_LK");
 1681              		.loc 1 599 6 view .LVU295
 1682 0028 03F04103 		and	r3, r3, #65
 1683 002c 412B     		cmp	r3, #65
 600:src/lcd.c     ****     lcd_writeText(t20, "C_LK");
 1684              		.loc 1 600 5 view .LVU296
 1685 002e 08BF     		it	eq
 1686 0030 0849     		ldreq	r1, .L93+16
 1687 0032 094B     		ldr	r3, .L93+20
 1688              		.loc 1 603 5 view .LVU297
 1689 0034 18BF     		it	ne
 1690 0036 0949     		ldrne	r1, .L93+24
 1691 0038 9847     		blx	r3
 1692              	.LVL152:
 604:src/lcd.c     ****   }
 605:src/lcd.c     **** #else
 606:src/lcd.c     ****   lcd_writeText(t20, "=");
 607:src/lcd.c     **** #endif
 608:src/lcd.c     ****   t20->inv = 0;
 1693              		.loc 1 608 3 is_stmt 1 view .LVU298
 1694 003a 034B     		ldr	r3, .L93+4
 1695              		.loc 1 608 12 is_stmt 0 view .LVU299
 1696 003c 1B6B     		ldr	r3, [r3, #48]
 1697 003e 0022     		movs	r2, #0
ARM GAS  /tmp/ccYbhZ84.s 			page 45


 1698 0040 5A74     		strb	r2, [r3, #17]
 609:src/lcd.c     **** }
 1699              		.loc 1 609 1 view .LVU300
 1700 0042 38BD     		pop	{r3, r4, r5, pc}
 1701              	.L94:
 1702              		.align	2
 1703              	.L93:
 1704 0044 00000000 		.word	.LANCHOR0
 1705 0048 00200010 		.word	268443648
 1706 004c 6D020008 		.word	134218349
 1707 0050 00000000 		.word	main_ram
 1708 0054 00000000 		.word	.LC5
 1709 0058 7D020008 		.word	134218365
 1710 005c 08000000 		.word	.LC6
 1711              		.cfi_endproc
 1712              	.LFE33:
 1714              		.section	.rodata.draw_dot.str1.4,"aMS",%progbits,1
 1715              		.align	2
 1716              	.LC7:
 1717 0000 414C5048 		.ascii	"ALPHA\000"
 1717      4100
 1718 0006 0000     		.align	2
 1719              	.LC8:
 1720 0008 50474D00 		.ascii	"PGM\000"
 1721              		.align	2
 1722              	.LC9:
 1723 000c 52414400 		.ascii	"RAD\000"
 1724              		.align	2
 1725              	.LC10:
 1726 0010 44454700 		.ascii	"DEG\000"
 1727              		.section	.text.draw_dot,"ax",%progbits
 1728              		.align	1
 1729              		.p2align 2,,3
 1730              		.global	draw_dot
 1731              		.syntax unified
 1732              		.thumb
 1733              		.thumb_func
 1734              		.fpu fpv4-sp-d16
 1736              	draw_dot:
 1737              	.LVL153:
 1738              	.LFB26:
 360:src/lcd.c     ****   int x, col = 0, inverse = 1;
 1739              		.loc 1 360 23 is_stmt 1 view -0
 1740              		.cfi_startproc
 1741              		@ args = 0, pretend = 0, frame = 0
 1742              		@ frame_needed = 0, uses_anonymous_args = 0
 361:src/lcd.c     ****   if (dots[n] & 1) {
 1743              		.loc 1 361 3 view .LVU302
 362:src/lcd.c     ****     col = 0xff;
 1744              		.loc 1 362 3 view .LVU303
 360:src/lcd.c     ****   int x, col = 0, inverse = 1;
 1745              		.loc 1 360 23 is_stmt 0 view .LVU304
 1746 0000 70B5     		push	{r4, r5, r6, lr}
 1747              		.cfi_def_cfa_offset 16
 1748              		.cfi_offset 4, -16
 1749              		.cfi_offset 5, -12
 1750              		.cfi_offset 6, -8
ARM GAS  /tmp/ccYbhZ84.s 			page 46


 1751              		.cfi_offset 14, -4
 362:src/lcd.c     ****     col = 0xff;
 1752              		.loc 1 362 11 view .LVU305
 1753 0002 B44D     		ldr	r5, .L155
 362:src/lcd.c     ****     col = 0xff;
 1754              		.loc 1 362 6 view .LVU306
 1755 0004 2B5C     		ldrb	r3, [r5, r0]	@ zero_extendqisi2
 364:src/lcd.c     ****   }
 1756              		.loc 1 364 13 view .LVU307
 1757 0006 13F00103 		ands	r3, r3, #1
 1758 000a 0CBF     		ite	eq
 1759 000c 0024     		moveq	r4, #0
 1760 000e FF24     		movne	r4, #255
 1761              	.LVL154:
 367:src/lcd.c     ****     x = XLEFT + DWIDTH*(n/9);
 1762              		.loc 1 367 3 is_stmt 1 view .LVU308
 367:src/lcd.c     ****     x = XLEFT + DWIDTH*(n/9);
 1763              		.loc 1 367 6 is_stmt 0 view .LVU309
 1764 0010 6B28     		cmp	r0, #107
 360:src/lcd.c     ****   int x, col = 0, inverse = 1;
 1765              		.loc 1 360 23 view .LVU310
 1766 0012 82B0     		sub	sp, sp, #8
 1767              		.cfi_def_cfa_offset 24
 367:src/lcd.c     ****     x = XLEFT + DWIDTH*(n/9);
 1768              		.loc 1 367 6 view .LVU311
 1769 0014 17DC     		bgt	.L97
 368:src/lcd.c     ****     switch (n % 9) {  
 1770              		.loc 1 368 5 is_stmt 1 view .LVU312
 368:src/lcd.c     ****     switch (n % 9) {  
 1771              		.loc 1 368 26 is_stmt 0 view .LVU313
 1772 0016 B04A     		ldr	r2, .L155+4
 1773 0018 C317     		asrs	r3, r0, #31
 1774              	.LVL155:
 368:src/lcd.c     ****     switch (n % 9) {  
 1775              		.loc 1 368 26 view .LVU314
 1776 001a 82FB0012 		smull	r1, r2, r2, r0
 1777 001e C3EB6203 		rsb	r3, r3, r2, asr #1
 368:src/lcd.c     ****     switch (n % 9) {  
 1778              		.loc 1 368 23 view .LVU315
 1779 0022 03EB8302 		add	r2, r3, r3, lsl #2
 369:src/lcd.c     ****     case 0:
 1780              		.loc 1 369 15 view .LVU316
 1781 0026 03EBC303 		add	r3, r3, r3, lsl #3
 368:src/lcd.c     ****     switch (n % 9) {  
 1782              		.loc 1 368 23 view .LVU317
 1783 002a 02EB8205 		add	r5, r2, r2, lsl #2
 1784              	.LVL156:
 369:src/lcd.c     ****     case 0:
 1785              		.loc 1 369 15 view .LVU318
 1786 002e C31A     		subs	r3, r0, r3
 368:src/lcd.c     ****     switch (n % 9) {  
 1787              		.loc 1 368 7 view .LVU319
 1788 0030 05F11A00 		add	r0, r5, #26
 1789              	.LVL157:
 369:src/lcd.c     ****     case 0:
 1790              		.loc 1 369 5 is_stmt 1 view .LVU320
 1791 0034 082B     		cmp	r3, #8
ARM GAS  /tmp/ccYbhZ84.s 			page 47


 1792 0036 3ED8     		bhi	.L95
 1793 0038 DFE803F0 		tbb	[pc, r3]
 1794              	.L100:
 1795 003c 80       		.byte	(.L108-.L100)/2
 1796 003d 87       		.byte	(.L107-.L100)/2
 1797 003e 8E       		.byte	(.L106-.L100)/2
 1798 003f 95       		.byte	(.L105-.L100)/2
 1799 0040 9C       		.byte	(.L104-.L100)/2
 1800 0041 A1       		.byte	(.L103-.L100)/2
 1801 0042 A8       		.byte	(.L102-.L100)/2
 1802 0043 AD       		.byte	(.L101-.L100)/2
 1803 0044 B6       		.byte	(.L99-.L100)/2
 1804              	.LVL158:
 1805 0045 00       		.p2align 1
 1806              	.L97:
 400:src/lcd.c     ****     x = XLEFT_EXP + DWIDTH_EXP*((n-108)/7);
 1807              		.loc 1 400 8 view .LVU321
 400:src/lcd.c     ****     x = XLEFT_EXP + DWIDTH_EXP*((n-108)/7);
 1808              		.loc 1 400 11 is_stmt 0 view .LVU322
 1809 0046 8028     		cmp	r0, #128
 1810 0048 37DC     		bgt	.L109
 401:src/lcd.c     ****     switch ((n-108) % 7) {
 1811              		.loc 1 401 5 is_stmt 1 view .LVU323
 401:src/lcd.c     ****     switch ((n-108) % 7) {
 1812              		.loc 1 401 40 is_stmt 0 view .LVU324
 1813 004a A44B     		ldr	r3, .L155+8
 1814              	.LVL159:
 401:src/lcd.c     ****     switch ((n-108) % 7) {
 1815              		.loc 1 401 35 view .LVU325
 1816 004c 6C38     		subs	r0, r0, #108
 1817              	.LVL160:
 401:src/lcd.c     ****     switch ((n-108) % 7) {
 1818              		.loc 1 401 40 view .LVU326
 1819 004e A3FB0023 		umull	r2, r3, r3, r0
 1820 0052 C21A     		subs	r2, r0, r3
 1821 0054 03EB5203 		add	r3, r3, r2, lsr #1
 1822 0058 9B08     		lsrs	r3, r3, #2
 402:src/lcd.c     ****     case 0:
 1823              		.loc 1 402 21 view .LVU327
 1824 005a C3EBC302 		rsb	r2, r3, r3, lsl #3
 1825 005e 801A     		subs	r0, r0, r2
 1826              	.LVL161:
 401:src/lcd.c     ****     switch ((n-108) % 7) {
 1827              		.loc 1 401 31 view .LVU328
 1828 0060 03EBC303 		add	r3, r3, r3, lsl #3
 1829 0064 421E     		subs	r2, r0, #1
 1830 0066 5B00     		lsls	r3, r3, #1
 401:src/lcd.c     ****     switch ((n-108) % 7) {
 1831              		.loc 1 401 7 view .LVU329
 1832 0068 03F5AC70 		add	r0, r3, #344
 1833              	.LVL162:
 402:src/lcd.c     ****     case 0:
 1834              		.loc 1 402 5 is_stmt 1 view .LVU330
 1835 006c 052A     		cmp	r2, #5
 1836 006e 00F2B081 		bhi	.L110
 1837 0072 DFE812F0 		tbh	[pc, r2, lsl #1]
 1838              	.L112:
ARM GAS  /tmp/ccYbhZ84.s 			page 48


 1839 0076 8601     		.2byte	(.L117-.L112)/2
 1840 0078 8B01     		.2byte	(.L116-.L112)/2
 1841 007a 6C01     		.2byte	(.L115-.L112)/2
 1842 007c 7301     		.2byte	(.L114-.L112)/2
 1843 007e 7A01     		.2byte	(.L113-.L112)/2
 1844 0080 8101     		.2byte	(.L111-.L112)/2
 1845              	.LVL163:
 1846              		.p2align 1
 1847              	.L133:
 1848              	.LBB56:
 481:src/lcd.c     **** 	  if (d) {
 1849              		.loc 1 481 7 view .LVU331
 481:src/lcd.c     **** 	  if (d) {
 1850              		.loc 1 481 10 is_stmt 0 view .LVU332
 1851 0082 02F00202 		and	r2, r2, #2
 1852 0086 A242     		cmp	r2, r4
 1853 0088 00F09A81 		beq	.L152
 490:src/lcd.c     **** 	    draw_BEG(4, 1);
 1854              		.loc 1 490 4 is_stmt 1 view .LVU333
 490:src/lcd.c     **** 	    draw_BEG(4, 1);
 1855              		.loc 1 490 7 is_stmt 0 view .LVU334
 1856 008c 002C     		cmp	r4, #0
 1857 008e 00F09B81 		beq	.L137
 491:src/lcd.c     **** 	    draw_BEG(8, 0);
 1858              		.loc 1 491 6 is_stmt 1 view .LVU335
 1859              	.LVL164:
 1860              	.LBB57:
 1861              	.LBI57:
 541:src/lcd.c     ****   t20->inv = inverse;
 1862              		.loc 1 541 6 view .LVU336
 1863              	.LBB58:
 542:src/lcd.c     ****   lcd_setXY (t20, 285, Y_ANNUNC-50);
 1864              		.loc 1 542 3 view .LVU337
 1865 0092 934A     		ldr	r2, .L155+12
 543:src/lcd.c     ****   if (depth == 4) {
 1866              		.loc 1 543 3 is_stmt 0 view .LVU338
 1867 0094 934B     		ldr	r3, .L155+16
 542:src/lcd.c     ****   lcd_setXY (t20, 285, Y_ANNUNC-50);
 1868              		.loc 1 542 3 view .LVU339
 1869 0096 106B     		ldr	r0, [r2, #48]
 1870              	.LVL165:
 542:src/lcd.c     ****   lcd_setXY (t20, 285, Y_ANNUNC-50);
 1871              		.loc 1 542 12 view .LVU340
 1872 0098 0122     		movs	r2, #1
 1873 009a 4274     		strb	r2, [r0, #17]
 1874              	.LVL166:
 543:src/lcd.c     ****   if (depth == 4) {
 1875              		.loc 1 543 3 is_stmt 1 view .LVU341
 1876 009c 40F21D11 		movw	r1, #285
 1877 00a0 1922     		movs	r2, #25
 1878 00a2 9847     		blx	r3
 1879              	.LVL167:
 544:src/lcd.c     ****     lcd_writeText(t20, "S:4");
 1880              		.loc 1 544 3 view .LVU342
 1881 00a4 FFF7FEFF 		bl	draw_BEG.part.0
 1882              	.LVL168:
 550:src/lcd.c     **** }
ARM GAS  /tmp/ccYbhZ84.s 			page 49


 1883              		.loc 1 550 3 view .LVU343
 550:src/lcd.c     **** }
 1884              		.loc 1 550 3 is_stmt 0 view .LVU344
 1885              	.LBE58:
 1886              	.LBE57:
 492:src/lcd.c     **** 	    dots[BEG] = 7;
 1887              		.loc 1 492 6 is_stmt 1 view .LVU345
 1888 00a8 0021     		movs	r1, #0
 1889              	.L141:
 492:src/lcd.c     **** 	    dots[BEG] = 7;
 1890              		.loc 1 492 6 is_stmt 0 view .LVU346
 1891 00aa 0820     		movs	r0, #8
 1892 00ac FFF7FEFF 		bl	draw_BEG
 1893              	.LVL169:
 1894              	.L143:
 493:src/lcd.c     **** 	  }
 1895              		.loc 1 493 6 is_stmt 1 view .LVU347
 493:src/lcd.c     **** 	  }
 1896              		.loc 1 493 16 is_stmt 0 view .LVU348
 1897 00b0 0723     		movs	r3, #7
 1898 00b2 85F88830 		strb	r3, [r5, #136]
 1899              	.LVL170:
 1900              	.L95:
 493:src/lcd.c     **** 	  }
 1901              		.loc 1 493 16 view .LVU349
 1902              	.LBE56:
 539:src/lcd.c     **** 
 1903              		.loc 1 539 1 view .LVU350
 1904 00b6 02B0     		add	sp, sp, #8
 1905              		.cfi_remember_state
 1906              		.cfi_def_cfa_offset 16
 1907              		@ sp needed
 1908 00b8 70BD     		pop	{r4, r5, r6, pc}
 1909              	.LVL171:
 1910              	.L109:
 1911              		.cfi_restore_state
 427:src/lcd.c     ****     switch (n) {
 1912              		.loc 1 427 8 is_stmt 1 view .LVU351
 427:src/lcd.c     ****     switch (n) {
 1913              		.loc 1 427 11 is_stmt 0 view .LVU352
 1914 00ba 8D28     		cmp	r0, #141
 1915 00bc 1DDD     		ble	.L153
 531:src/lcd.c     ****     lcd_fill_rect ( XLEFT-DWIDTH+5*((n-142)/6)+15, YTOP-(10+6*6)+((n-142)%6)*6, 4, 5, col);
 1916              		.loc 1 531 8 is_stmt 1 view .LVU353
 531:src/lcd.c     ****     lcd_fill_rect ( XLEFT-DWIDTH+5*((n-142)/6)+15, YTOP-(10+6*6)+((n-142)%6)*6, 4, 5, col);
 1917              		.loc 1 531 11 is_stmt 0 view .LVU354
 1918 00be 40F24923 		movw	r3, #585
 1919              	.LVL172:
 531:src/lcd.c     ****     lcd_fill_rect ( XLEFT-DWIDTH+5*((n-142)/6)+15, YTOP-(10+6*6)+((n-142)%6)*6, 4, 5, col);
 1920              		.loc 1 531 11 view .LVU355
 1921 00c2 9842     		cmp	r0, r3
 1922 00c4 40F36581 		ble	.L154
 535:src/lcd.c     ****     lcd_fill_rect( XLEFT-DWIDTH+5*((n-MAX_DOTS)/6)+15, 70-(10+6*5)+((n-MAX_DOTS)%6)*5, 4, 4, col);
 1923              		.loc 1 535 8 is_stmt 1 view .LVU356
 535:src/lcd.c     ****     lcd_fill_rect( XLEFT-DWIDTH+5*((n-MAX_DOTS)/6)+15, 70-(10+6*5)+((n-MAX_DOTS)%6)*5, 4, 4, col);
 1924              		.loc 1 535 11 is_stmt 0 view .LVU357
 1925 00c8 B0F5537F 		cmp	r0, #844
ARM GAS  /tmp/ccYbhZ84.s 			page 50


 1926 00cc F3DA     		bge	.L95
 536:src/lcd.c     ****     return;
 1927              		.loc 1 536 5 is_stmt 1 view .LVU358
 536:src/lcd.c     ****     return;
 1928              		.loc 1 536 81 is_stmt 0 view .LVU359
 1929 00ce 864B     		ldr	r3, .L155+20
 536:src/lcd.c     ****     return;
 1930              		.loc 1 536 5 view .LVU360
 1931 00d0 0094     		str	r4, [sp]
 536:src/lcd.c     ****     return;
 1932              		.loc 1 536 38 view .LVU361
 1933 00d2 A0F24A20 		subw	r0, r0, #586
 1934              	.LVL173:
 536:src/lcd.c     ****     return;
 1935              		.loc 1 536 81 view .LVU362
 1936 00d6 A3FB0023 		umull	r2, r3, r3, r0
 1937 00da 9B08     		lsrs	r3, r3, #2
 1938 00dc 03EB4301 		add	r1, r3, r3, lsl #1
 1939 00e0 A0EB4101 		sub	r1, r0, r1, lsl #1
 536:src/lcd.c     ****     return;
 1940              		.loc 1 536 84 view .LVU363
 1941 00e4 01EB8101 		add	r1, r1, r1, lsl #2
 536:src/lcd.c     ****     return;
 1942              		.loc 1 536 34 view .LVU364
 1943 00e8 03EB8300 		add	r0, r3, r3, lsl #2
 1944              	.LVL174:
 536:src/lcd.c     ****     return;
 1945              		.loc 1 536 5 view .LVU365
 1946 00ec 0423     		movs	r3, #4
 1947 00ee 7F4C     		ldr	r4, .L155+24
 1948              	.LVL175:
 536:src/lcd.c     ****     return;
 1949              		.loc 1 536 5 view .LVU366
 1950 00f0 1E31     		adds	r1, r1, #30
 1951 00f2 1030     		adds	r0, r0, #16
 1952 00f4 1A46     		mov	r2, r3
 1953 00f6 A047     		blx	r4
 1954              	.LVL176:
 537:src/lcd.c     ****   }
 1955              		.loc 1 537 5 is_stmt 1 view .LVU367
 1956 00f8 DDE7     		b	.L95
 1957              	.LVL177:
 1958              	.L153:
 537:src/lcd.c     ****   }
 1959              		.loc 1 537 5 is_stmt 0 view .LVU368
 1960 00fa 8238     		subs	r0, r0, #130
 1961              	.LVL178:
 537:src/lcd.c     ****   }
 1962              		.loc 1 537 5 view .LVU369
 1963 00fc 83F00103 		eor	r3, r3, #1
 1964              	.LVL179:
 428:src/lcd.c     ****     case MANT_SIGN:
 1965              		.loc 1 428 5 is_stmt 1 view .LVU370
 1966 0100 0B28     		cmp	r0, #11
 1967 0102 00F26D81 		bhi	.L119
 1968 0106 01A2     		adr	r2, .L121
 1969 0108 52F820F0 		ldr	pc, [r2, r0, lsl #2]
ARM GAS  /tmp/ccYbhZ84.s 			page 51


 1970              		.p2align 2
 1971              	.L121:
 1972 010c D5010000 		.word	.L131+1
 1973 0110 E7010000 		.word	.L130+1
 1974 0114 03020000 		.word	.L129+1
 1975 0118 0D020000 		.word	.L128+1
 1976 011c 65020000 		.word	.L127+1
 1977 0120 B7000000 		.word	.L95+1
 1978 0124 83020000 		.word	.L126+1
 1979 0128 BD020000 		.word	.L125+1
 1980 012c 01030000 		.word	.L124+1
 1981 0130 33030000 		.word	.L123+1
 1982 0134 37030000 		.word	.L122+1
 1983 0138 C9010000 		.word	.L120+1
 1984              	.LVL180:
 1985              		.p2align 1
 1986              	.L108:
 371:src/lcd.c     ****       return;
 1987              		.loc 1 371 7 view .LVU371
 1988 013c 2246     		mov	r2, r4
 1989 013e 8221     		movs	r1, #130
 539:src/lcd.c     **** 
 1990              		.loc 1 539 1 is_stmt 0 view .LVU372
 1991 0140 02B0     		add	sp, sp, #8
 1992              		.cfi_remember_state
 1993              		.cfi_def_cfa_offset 16
 1994              		@ sp needed
 1995 0142 BDE87040 		pop	{r4, r5, r6, lr}
 1996              		.cfi_restore 14
 1997              		.cfi_restore 6
 1998              		.cfi_restore 5
 1999              		.cfi_restore 4
 2000              		.cfi_def_cfa_offset 0
 2001              	.LVL181:
 371:src/lcd.c     ****       return;
 2002              		.loc 1 371 7 view .LVU373
 2003 0146 FFF7FEBF 		b	top
 2004              	.LVL182:
 2005              	.L107:
 2006              		.cfi_restore_state
 374:src/lcd.c     ****       return;
 2007              		.loc 1 374 7 is_stmt 1 view .LVU374
 2008              	.LBB61:
 2009              	.LBI61:
  95:src/lcd.c     ****   left_side(i, j, col);
 2010              		.loc 1 95 6 view .LVU375
 2011              	.LBB62:
  96:src/lcd.c     **** }
 2012              		.loc 1 96 3 view .LVU376
 2013 014a 2246     		mov	r2, r4
 2014 014c 8221     		movs	r1, #130
 2015              	.LVL183:
 2016              	.L145:
  96:src/lcd.c     **** }
 2017              		.loc 1 96 3 is_stmt 0 view .LVU377
 2018              	.LBE62:
 2019              	.LBE61:
ARM GAS  /tmp/ccYbhZ84.s 			page 52


 539:src/lcd.c     **** 
 2020              		.loc 1 539 1 view .LVU378
 2021 014e 02B0     		add	sp, sp, #8
 2022              		.cfi_remember_state
 2023              		.cfi_def_cfa_offset 16
 2024              		@ sp needed
 2025 0150 BDE87040 		pop	{r4, r5, r6, lr}
 2026              		.cfi_restore 14
 2027              		.cfi_restore 6
 2028              		.cfi_restore 5
 2029              		.cfi_restore 4
 2030              		.cfi_def_cfa_offset 0
 2031              	.LVL184:
 2032              	.LBB63:
 2033              	.LBB64:
  99:src/lcd.c     **** }
 2034              		.loc 1 99 3 view .LVU379
 2035 0154 FFF7FEBF 		b	left_side
 2036              	.LVL185:
 2037              	.L106:
 2038              		.cfi_restore_state
  99:src/lcd.c     **** }
 2039              		.loc 1 99 3 view .LVU380
 2040              	.LBE64:
 2041              	.LBE63:
 377:src/lcd.c     ****       return;
 2042              		.loc 1 377 7 is_stmt 1 view .LVU381
 2043 0158 2246     		mov	r2, r4
 2044 015a 8221     		movs	r1, #130
 2045              	.LVL186:
 2046              	.L146:
 539:src/lcd.c     **** 
 2047              		.loc 1 539 1 is_stmt 0 view .LVU382
 2048 015c 02B0     		add	sp, sp, #8
 2049              		.cfi_remember_state
 2050              		.cfi_def_cfa_offset 16
 2051              		@ sp needed
 2052 015e BDE87040 		pop	{r4, r5, r6, lr}
 2053              		.cfi_restore 14
 2054              		.cfi_restore 6
 2055              		.cfi_restore 5
 2056              		.cfi_restore 4
 2057              		.cfi_def_cfa_offset 0
 430:src/lcd.c     ****       return;
 2058              		.loc 1 430 7 view .LVU383
 2059 0162 FFF7FEBF 		b	middle
 2060              	.LVL187:
 2061              	.L105:
 2062              		.cfi_restore_state
 380:src/lcd.c     ****       return;
 2063              		.loc 1 380 7 is_stmt 1 view .LVU384
 2064              	.LBB66:
 2065              	.LBI66:
 108:src/lcd.c     ****   right_side(i, j, col);
 2066              		.loc 1 108 6 view .LVU385
 2067              	.LBB67:
 109:src/lcd.c     **** }
ARM GAS  /tmp/ccYbhZ84.s 			page 53


 2068              		.loc 1 109 3 view .LVU386
 2069 0166 2246     		mov	r2, r4
 2070 0168 8221     		movs	r1, #130
 2071              	.LVL188:
 2072              	.L147:
 109:src/lcd.c     **** }
 2073              		.loc 1 109 3 is_stmt 0 view .LVU387
 2074              	.LBE67:
 2075              	.LBE66:
 539:src/lcd.c     **** 
 2076              		.loc 1 539 1 view .LVU388
 2077 016a 02B0     		add	sp, sp, #8
 2078              		.cfi_remember_state
 2079              		.cfi_def_cfa_offset 16
 2080              		@ sp needed
 2081 016c BDE87040 		pop	{r4, r5, r6, lr}
 2082              		.cfi_restore 14
 2083              		.cfi_restore 6
 2084              		.cfi_restore 5
 2085              		.cfi_restore 4
 2086              		.cfi_def_cfa_offset 0
 2087              	.LVL189:
 2088              	.LBB68:
 2089              	.LBB69:
 112:src/lcd.c     **** }
 2090              		.loc 1 112 3 view .LVU389
 2091 0170 FFF7FEBF 		b	right_side
 2092              	.LVL190:
 2093              	.L104:
 2094              		.cfi_restore_state
 112:src/lcd.c     **** }
 2095              		.loc 1 112 3 view .LVU390
 2096              	.LBE69:
 2097              	.LBE68:
 383:src/lcd.c     ****       return;
 2098              		.loc 1 383 7 is_stmt 1 view .LVU391
 2099              	.LBB71:
 2100              	.LBI63:
  98:src/lcd.c     ****   left_side(i-2, j+19, col);
 2101              		.loc 1 98 6 view .LVU392
 2102              	.LBB65:
  99:src/lcd.c     **** }
 2103              		.loc 1 99 3 view .LVU393
 2104 0174 2246     		mov	r2, r4
 2105 0176 05F11800 		add	r0, r5, #24
 2106              	.LVL191:
  99:src/lcd.c     **** }
 2107              		.loc 1 99 3 is_stmt 0 view .LVU394
 2108 017a 9521     		movs	r1, #149
 2109 017c E7E7     		b	.L145
 2110              	.LVL192:
 2111              	.L103:
  99:src/lcd.c     **** }
 2112              		.loc 1 99 3 view .LVU395
 2113              	.LBE65:
 2114              	.LBE71:
 386:src/lcd.c     ****       return;
ARM GAS  /tmp/ccYbhZ84.s 			page 54


 2115              		.loc 1 386 7 is_stmt 1 view .LVU396
 2116 017e 2246     		mov	r2, r4
 2117 0180 8221     		movs	r1, #130
 539:src/lcd.c     **** 
 2118              		.loc 1 539 1 is_stmt 0 view .LVU397
 2119 0182 02B0     		add	sp, sp, #8
 2120              		.cfi_remember_state
 2121              		.cfi_def_cfa_offset 16
 2122              		@ sp needed
 2123 0184 BDE87040 		pop	{r4, r5, r6, lr}
 2124              		.cfi_restore 14
 2125              		.cfi_restore 6
 2126              		.cfi_restore 5
 2127              		.cfi_restore 4
 2128              		.cfi_def_cfa_offset 0
 2129              	.LVL193:
 386:src/lcd.c     ****       return;
 2130              		.loc 1 386 7 view .LVU398
 2131 0188 FFF7FEBF 		b	bottom
 2132              	.LVL194:
 2133              	.L102:
 2134              		.cfi_restore_state
 389:src/lcd.c     ****       return;
 2135              		.loc 1 389 7 is_stmt 1 view .LVU399
 2136              	.LBB72:
 2137              	.LBI68:
 111:src/lcd.c     ****   right_side(i-2, j+19, col);
 2138              		.loc 1 111 6 view .LVU400
 2139              	.LBB70:
 112:src/lcd.c     **** }
 2140              		.loc 1 112 3 view .LVU401
 2141 018c 2246     		mov	r2, r4
 2142 018e 05F11800 		add	r0, r5, #24
 2143              	.LVL195:
 112:src/lcd.c     **** }
 2144              		.loc 1 112 3 is_stmt 0 view .LVU402
 2145 0192 9521     		movs	r1, #149
 2146 0194 E9E7     		b	.L147
 2147              	.LVL196:
 2148              	.L101:
 112:src/lcd.c     **** }
 2149              		.loc 1 112 3 view .LVU403
 2150              	.LBE70:
 2151              	.LBE72:
 392:src/lcd.c     ****       return;
 2152              		.loc 1 392 7 is_stmt 1 view .LVU404
 2153              	.LBB73:
 2154              	.LBI73:
 134:src/lcd.c     ****   lcd_fill_rect (i+19, j+40, 5, 5, col);
 2155              		.loc 1 134 6 view .LVU405
 2156              	.LBB74:
 135:src/lcd.c     **** }
 2157              		.loc 1 135 3 view .LVU406
 2158 0196 0523     		movs	r3, #5
 2159 0198 0094     		str	r4, [sp]
 2160 019a 05F12D00 		add	r0, r5, #45
 2161              	.LVL197:
ARM GAS  /tmp/ccYbhZ84.s 			page 55


 135:src/lcd.c     **** }
 2162              		.loc 1 135 3 is_stmt 0 view .LVU407
 2163 019e 534C     		ldr	r4, .L155+24
 2164              	.LVL198:
 135:src/lcd.c     **** }
 2165              		.loc 1 135 3 view .LVU408
 2166 01a0 1A46     		mov	r2, r3
 2167 01a2 AA21     		movs	r1, #170
 2168 01a4 A047     		blx	r4
 2169              	.LVL199:
 135:src/lcd.c     **** }
 2170              		.loc 1 135 3 view .LVU409
 2171              	.LBE74:
 2172              	.LBE73:
 393:src/lcd.c     ****     case 8:
 2173              		.loc 1 393 7 is_stmt 1 view .LVU410
 2174 01a6 86E7     		b	.L95
 2175              	.LVL200:
 2176              	.L99:
 395:src/lcd.c     ****       return;
 2177              		.loc 1 395 7 view .LVU411
 2178              	.LBB75:
 2179              	.LBI75:
 137:src/lcd.c     ****   lcd_fill_rect (i+21, j+45, 3, 3, col);
 2180              		.loc 1 137 6 view .LVU412
 2181              	.LBB76:
 138:src/lcd.c     ****   lcd_fill_rect (i+19, j+48, 3, 3, col);
 2182              		.loc 1 138 3 view .LVU413
 2183 01a8 0323     		movs	r3, #3
 2184 01aa 1A46     		mov	r2, r3
 2185 01ac 05F12F00 		add	r0, r5, #47
 2186              	.LVL201:
 138:src/lcd.c     ****   lcd_fill_rect (i+19, j+48, 3, 3, col);
 2187              		.loc 1 138 3 is_stmt 0 view .LVU414
 2188 01b0 4E4E     		ldr	r6, .L155+24
 2189 01b2 0094     		str	r4, [sp]
 2190 01b4 AF21     		movs	r1, #175
 2191 01b6 B047     		blx	r6
 2192              	.LVL202:
 139:src/lcd.c     **** }
 2193              		.loc 1 139 3 is_stmt 1 view .LVU415
 2194 01b8 0323     		movs	r3, #3
 2195 01ba 0094     		str	r4, [sp]
 2196 01bc 05F12D00 		add	r0, r5, #45
 2197 01c0 1A46     		mov	r2, r3
 2198 01c2 B221     		movs	r1, #178
 2199 01c4 B047     		blx	r6
 2200              	.LVL203:
 139:src/lcd.c     **** }
 2201              		.loc 1 139 3 is_stmt 0 view .LVU416
 2202              	.LBE76:
 2203              	.LBE75:
 396:src/lcd.c     ****     default:;
 2204              		.loc 1 396 7 is_stmt 1 view .LVU417
 2205 01c6 76E7     		b	.L95
 2206              	.LVL204:
 2207              	.L120:
ARM GAS  /tmp/ccYbhZ84.s 			page 56


 526:src/lcd.c     ****       return;
 2208              		.loc 1 526 7 view .LVU418
 2209 01c8 1846     		mov	r0, r3
 2210              	.LVL205:
 539:src/lcd.c     **** 
 2211              		.loc 1 539 1 is_stmt 0 view .LVU419
 2212 01ca 02B0     		add	sp, sp, #8
 2213              		.cfi_remember_state
 2214              		.cfi_def_cfa_offset 16
 2215              		@ sp needed
 2216 01cc BDE87040 		pop	{r4, r5, r6, lr}
 2217              		.cfi_restore 14
 2218              		.cfi_restore 6
 2219              		.cfi_restore 5
 2220              		.cfi_restore 4
 2221              		.cfi_def_cfa_offset 0
 2222              	.LVL206:
 526:src/lcd.c     ****       return;
 2223              		.loc 1 526 7 view .LVU420
 2224 01d0 FFF7FEBF 		b	draw_RPN
 2225              	.LVL207:
 2226              	.L131:
 2227              		.cfi_restore_state
 433:src/lcd.c     ****       return;
 2228              		.loc 1 433 7 is_stmt 1 view .LVU421
 2229 01d4 2246     		mov	r2, r4
 2230 01d6 8221     		movs	r1, #130
 2231 01d8 4FF4A370 		mov	r0, #326
 2232              	.LVL208:
 2233              	.L150:
 539:src/lcd.c     **** 
 2234              		.loc 1 539 1 is_stmt 0 view .LVU422
 2235 01dc 02B0     		add	sp, sp, #8
 2236              		.cfi_remember_state
 2237              		.cfi_def_cfa_offset 16
 2238              		@ sp needed
 2239 01de BDE87040 		pop	{r4, r5, r6, lr}
 2240              		.cfi_restore 14
 2241              		.cfi_restore 6
 2242              		.cfi_restore 5
 2243              		.cfi_restore 4
 2244              		.cfi_def_cfa_offset 0
 2245              	.LVL209:
 433:src/lcd.c     ****       return;
 2246              		.loc 1 433 7 view .LVU423
 2247 01e2 FFF7FEBF 		b	exp_middle
 2248              	.LVL210:
 2249              	.L130:
 2250              		.cfi_restore_state
 436:src/lcd.c     ****       lcd_fill_rect (250, Y_ANNUNC-24, 15, 4, col);
 2251              		.loc 1 436 7 is_stmt 1 view .LVU424
 2252 01e6 414D     		ldr	r5, .L155+24
 2253 01e8 0094     		str	r4, [sp]
 2254 01ea 0423     		movs	r3, #4
 2255              	.LVL211:
 436:src/lcd.c     ****       lcd_fill_rect (250, Y_ANNUNC-24, 15, 4, col);
 2256              		.loc 1 436 7 is_stmt 0 view .LVU425
ARM GAS  /tmp/ccYbhZ84.s 			page 57


 2257 01ec 0F22     		movs	r2, #15
 2258 01ee 2921     		movs	r1, #41
 2259 01f0 FA20     		movs	r0, #250
 2260              	.LVL212:
 436:src/lcd.c     ****       lcd_fill_rect (250, Y_ANNUNC-24, 15, 4, col);
 2261              		.loc 1 436 7 view .LVU426
 2262 01f2 A847     		blx	r5
 2263              	.LVL213:
 437:src/lcd.c     ****       return;
 2264              		.loc 1 437 7 is_stmt 1 view .LVU427
 2265 01f4 0094     		str	r4, [sp]
 2266 01f6 0423     		movs	r3, #4
 2267 01f8 0F22     		movs	r2, #15
 2268 01fa 3321     		movs	r1, #51
 2269 01fc FA20     		movs	r0, #250
 2270 01fe A847     		blx	r5
 2271              	.LVL214:
 438:src/lcd.c     ****     case LIT_EQ:
 2272              		.loc 1 438 7 view .LVU428
 2273 0200 59E7     		b	.L95
 2274              	.LVL215:
 2275              	.L129:
 440:src/lcd.c     ****       return;
 2276              		.loc 1 440 7 view .LVU429
 539:src/lcd.c     **** 
 2277              		.loc 1 539 1 is_stmt 0 view .LVU430
 2278 0202 02B0     		add	sp, sp, #8
 2279              		.cfi_remember_state
 2280              		.cfi_def_cfa_offset 16
 2281              		@ sp needed
 2282 0204 BDE87040 		pop	{r4, r5, r6, lr}
 2283              		.cfi_restore 14
 2284              		.cfi_restore 6
 2285              		.cfi_restore 5
 2286              		.cfi_restore 4
 2287              		.cfi_def_cfa_offset 0
 2288              	.LVL216:
 440:src/lcd.c     ****       return;
 2289              		.loc 1 440 7 view .LVU431
 2290 0208 FFF7FEBF 		b	draw_LEQ
 2291              	.LVL217:
 2292              	.L128:
 2293              		.cfi_restore_state
 443:src/lcd.c     ****       lcd_fill_rect(285,Y_ANNUNC-55,9,1,col);
 2294              		.loc 1 443 7 is_stmt 1 view .LVU432
 2295 020c 374D     		ldr	r5, .L155+24
 2296 020e 0094     		str	r4, [sp]
 2297 0210 0C23     		movs	r3, #12
 2298              	.LVL218:
 443:src/lcd.c     ****       lcd_fill_rect(285,Y_ANNUNC-55,9,1,col);
 2299              		.loc 1 443 7 is_stmt 0 view .LVU433
 2300 0212 0522     		movs	r2, #5
 2301 0214 0821     		movs	r1, #8
 2302 0216 40F21F10 		movw	r0, #287
 2303 021a A847     		blx	r5
 2304              	.LVL219:
 444:src/lcd.c     ****       lcd_fill_rect(286,Y_ANNUNC-54,7,1,col);
ARM GAS  /tmp/ccYbhZ84.s 			page 58


 2305              		.loc 1 444 7 is_stmt 1 view .LVU434
 2306 021c 0094     		str	r4, [sp]
 2307 021e 0123     		movs	r3, #1
 2308 0220 0922     		movs	r2, #9
 2309 0222 1421     		movs	r1, #20
 2310 0224 40F21D10 		movw	r0, #285
 2311 0228 A847     		blx	r5
 2312              	.LVL220:
 445:src/lcd.c     ****       lcd_fill_rect(287,Y_ANNUNC-53,5,1,col);
 2313              		.loc 1 445 7 view .LVU435
 2314 022a 0094     		str	r4, [sp]
 2315 022c 0123     		movs	r3, #1
 2316 022e 0722     		movs	r2, #7
 2317 0230 1521     		movs	r1, #21
 2318 0232 4FF48F70 		mov	r0, #286
 2319 0236 A847     		blx	r5
 2320              	.LVL221:
 446:src/lcd.c     ****       lcd_fill_rect(288,Y_ANNUNC-52,3,1,col);
 2321              		.loc 1 446 7 view .LVU436
 2322 0238 0094     		str	r4, [sp]
 2323 023a 0123     		movs	r3, #1
 2324 023c 0522     		movs	r2, #5
 2325 023e 1621     		movs	r1, #22
 2326 0240 40F21F10 		movw	r0, #287
 2327 0244 A847     		blx	r5
 2328              	.LVL222:
 447:src/lcd.c     ****       lcd_fill_rect(289,Y_ANNUNC-51,1,1,col);
 2329              		.loc 1 447 7 view .LVU437
 2330 0246 0094     		str	r4, [sp]
 2331 0248 0123     		movs	r3, #1
 2332 024a 0322     		movs	r2, #3
 2333 024c 1721     		movs	r1, #23
 2334 024e 4FF49070 		mov	r0, #288
 2335 0252 A847     		blx	r5
 2336              	.LVL223:
 448:src/lcd.c     ****       return;
 2337              		.loc 1 448 7 view .LVU438
 2338 0254 0123     		movs	r3, #1
 2339 0256 0094     		str	r4, [sp]
 2340 0258 1A46     		mov	r2, r3
 2341 025a 1821     		movs	r1, #24
 2342 025c 40F22110 		movw	r0, #289
 2343 0260 A847     		blx	r5
 2344              	.LVL224:
 449:src/lcd.c     ****     case INPUT:
 2345              		.loc 1 449 7 view .LVU439
 2346 0262 28E7     		b	.L95
 2347              	.LVL225:
 2348              	.L127:
 451:src/lcd.c     ****       lcd_setXY(t20, 305, Y_ANNUNC-70);
 2349              		.loc 1 451 7 view .LVU440
 2350 0264 1E4C     		ldr	r4, .L155+12
 2351              	.LVL226:
 452:src/lcd.c     ****       lcd_writeText(t20,"ALPHA");
 2352              		.loc 1 452 7 is_stmt 0 view .LVU441
 2353 0266 1F4D     		ldr	r5, .L155+16
 451:src/lcd.c     ****       lcd_setXY(t20, 305, Y_ANNUNC-70);
ARM GAS  /tmp/ccYbhZ84.s 			page 59


 2354              		.loc 1 451 7 view .LVU442
 2355 0268 206B     		ldr	r0, [r4, #48]
 452:src/lcd.c     ****       lcd_writeText(t20,"ALPHA");
 2356              		.loc 1 452 7 view .LVU443
 2357 026a 40F23111 		movw	r1, #305
 451:src/lcd.c     ****       lcd_setXY(t20, 305, Y_ANNUNC-70);
 2358              		.loc 1 451 16 view .LVU444
 2359 026e 4374     		strb	r3, [r0, #17]
 452:src/lcd.c     ****       lcd_writeText(t20,"ALPHA");
 2360              		.loc 1 452 7 is_stmt 1 view .LVU445
 2361 0270 0522     		movs	r2, #5
 2362 0272 A847     		blx	r5
 2363              	.LVL227:
 453:src/lcd.c     ****       return;
 2364              		.loc 1 453 7 view .LVU446
 2365 0274 206B     		ldr	r0, [r4, #48]
 2366 0276 1E4B     		ldr	r3, .L155+28
 2367 0278 1E49     		ldr	r1, .L155+32
 2368              	.L148:
 539:src/lcd.c     **** 
 2369              		.loc 1 539 1 is_stmt 0 view .LVU447
 2370 027a 02B0     		add	sp, sp, #8
 2371              		.cfi_remember_state
 2372              		.cfi_def_cfa_offset 16
 2373              		@ sp needed
 2374 027c BDE87040 		pop	{r4, r5, r6, lr}
 2375              		.cfi_restore 14
 2376              		.cfi_restore 6
 2377              		.cfi_restore 5
 2378              		.cfi_restore 4
 2379              		.cfi_def_cfa_offset 0
 523:src/lcd.c     ****       return;
 2380              		.loc 1 523 7 view .LVU448
 2381 0280 1847     		bx	r3	@ indirect register sibling call
 2382              	.LVL228:
 2383              	.L126:
 2384              		.cfi_restore_state
 2385              	.LBB77:
 469:src/lcd.c     **** 	//	print_debug(100, dots[BEG]);
 2386              		.loc 1 469 2 is_stmt 1 view .LVU449
 469:src/lcd.c     **** 	//	print_debug(100, dots[BEG]);
 2387              		.loc 1 469 16 is_stmt 0 view .LVU450
 2388 0282 1D4B     		ldr	r3, .L155+36
 2389              	.LVL229:
 471:src/lcd.c     **** 	  if (d) {
 2390              		.loc 1 471 12 view .LVU451
 2391 0284 95F88820 		ldrb	r2, [r5, #136]	@ zero_extendqisi2
 469:src/lcd.c     **** 	//	print_debug(100, dots[BEG]);
 2392              		.loc 1 469 16 view .LVU452
 2393 0288 1B68     		ldr	r3, [r3]
 2394 028a 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
 471:src/lcd.c     **** 	  if (d) {
 2395              		.loc 1 471 5 view .LVU453
 2396 028e 12F00801 		ands	r1, r2, #8
 469:src/lcd.c     **** 	//	print_debug(100, dots[BEG]);
 2397              		.loc 1 469 16 view .LVU454
 2398 0292 C3F3C004 		ubfx	r4, r3, #3, #1
ARM GAS  /tmp/ccYbhZ84.s 			page 60


 2399              	.LVL230:
 471:src/lcd.c     **** 	  if (d) {
 2400              		.loc 1 471 2 is_stmt 1 view .LVU455
 471:src/lcd.c     **** 	  if (d) {
 2401              		.loc 1 471 5 is_stmt 0 view .LVU456
 2402 0296 7FF4F4AE 		bne	.L133
 472:src/lcd.c     **** 	    draw_BEG(8, 0);
 2403              		.loc 1 472 4 is_stmt 1 view .LVU457
 472:src/lcd.c     **** 	    draw_BEG(8, 0);
 2404              		.loc 1 472 7 is_stmt 0 view .LVU458
 2405 029a 002C     		cmp	r4, #0
 2406 029c 7FF405AF 		bne	.L141
 2407              	.LVL231:
 2408              	.L142:
 497:src/lcd.c     **** 	    dots[BEG] = 4;
 2409              		.loc 1 497 6 is_stmt 1 view .LVU459
 2410              	.LBB59:
 2411              	.LBI59:
 541:src/lcd.c     ****   t20->inv = inverse;
 2412              		.loc 1 541 6 view .LVU460
 2413              	.LBB60:
 542:src/lcd.c     ****   lcd_setXY (t20, 285, Y_ANNUNC-50);
 2414              		.loc 1 542 3 view .LVU461
 2415 02a0 0F4A     		ldr	r2, .L155+12
 543:src/lcd.c     ****   if (depth == 4) {
 2416              		.loc 1 543 3 is_stmt 0 view .LVU462
 2417 02a2 104B     		ldr	r3, .L155+16
 542:src/lcd.c     ****   lcd_setXY (t20, 285, Y_ANNUNC-50);
 2418              		.loc 1 542 3 view .LVU463
 2419 02a4 106B     		ldr	r0, [r2, #48]
 543:src/lcd.c     ****   if (depth == 4) {
 2420              		.loc 1 543 3 view .LVU464
 2421 02a6 40F21D11 		movw	r1, #285
 2422 02aa 1922     		movs	r2, #25
 542:src/lcd.c     ****   lcd_setXY (t20, 285, Y_ANNUNC-50);
 2423              		.loc 1 542 12 view .LVU465
 2424 02ac 4474     		strb	r4, [r0, #17]
 543:src/lcd.c     ****   if (depth == 4) {
 2425              		.loc 1 543 3 is_stmt 1 view .LVU466
 2426 02ae 9847     		blx	r3
 2427              	.LVL232:
 544:src/lcd.c     ****     lcd_writeText(t20, "S:4");
 2428              		.loc 1 544 3 view .LVU467
 2429 02b0 FFF7FEFF 		bl	draw_BEG.part.0
 2430              	.LVL233:
 2431              	.L144:
 550:src/lcd.c     **** }
 2432              		.loc 1 550 3 view .LVU468
 2433              	.LBE60:
 2434              	.LBE59:
 498:src/lcd.c     **** 	  }
 2435              		.loc 1 498 6 view .LVU469
 498:src/lcd.c     **** 	  }
 2436              		.loc 1 498 16 is_stmt 0 view .LVU470
 2437 02b4 0423     		movs	r3, #4
 2438 02b6 85F88830 		strb	r3, [r5, #136]
 2439 02ba FCE6     		b	.L95
ARM GAS  /tmp/ccYbhZ84.s 			page 61


 2440              	.LVL234:
 2441              	.L125:
 498:src/lcd.c     **** 	  }
 2442              		.loc 1 498 16 view .LVU471
 2443              	.LBE77:
 509:src/lcd.c     ****       lcd_setXY (t20, 325, Y_ANNUNC-50);
 2444              		.loc 1 509 7 is_stmt 1 view .LVU472
 2445 02bc 084C     		ldr	r4, .L155+12
 2446              	.LVL235:
 510:src/lcd.c     ****       lcd_writeText(t20, "PGM");
 2447              		.loc 1 510 7 is_stmt 0 view .LVU473
 2448 02be 094D     		ldr	r5, .L155+16
 509:src/lcd.c     ****       lcd_setXY (t20, 325, Y_ANNUNC-50);
 2449              		.loc 1 509 7 view .LVU474
 2450 02c0 206B     		ldr	r0, [r4, #48]
 510:src/lcd.c     ****       lcd_writeText(t20, "PGM");
 2451              		.loc 1 510 7 view .LVU475
 2452 02c2 40F24511 		movw	r1, #325
 509:src/lcd.c     ****       lcd_setXY (t20, 325, Y_ANNUNC-50);
 2453              		.loc 1 509 16 view .LVU476
 2454 02c6 4374     		strb	r3, [r0, #17]
 510:src/lcd.c     ****       lcd_writeText(t20, "PGM");
 2455              		.loc 1 510 7 is_stmt 1 view .LVU477
 2456 02c8 1922     		movs	r2, #25
 2457 02ca A847     		blx	r5
 2458              	.LVL236:
 511:src/lcd.c     ****       return;
 2459              		.loc 1 511 7 view .LVU478
 2460 02cc 206B     		ldr	r0, [r4, #48]
 2461 02ce 084B     		ldr	r3, .L155+28
 2462 02d0 0A49     		ldr	r1, .L155+40
 2463 02d2 D2E7     		b	.L148
 2464              	.L156:
 2465              		.align	2
 2466              	.L155:
 2467 02d4 00000000 		.word	.LANCHOR0
 2468 02d8 398EE338 		.word	954437177
 2469 02dc 25499224 		.word	613566757
 2470 02e0 00200010 		.word	268443648
 2471 02e4 6D020008 		.word	134218349
 2472 02e8 ABAAAAAA 		.word	-1431655765
 2473 02ec 3D020008 		.word	134218301
 2474 02f0 7D020008 		.word	134218365
 2475 02f4 00000000 		.word	.LC7
 2476 02f8 00000000 		.word	main_ram
 2477 02fc 08000000 		.word	.LC8
 2478              	.LVL237:
 2479              	.L124:
 514:src/lcd.c     ****     case RAD:
 2480              		.loc 1 514 7 view .LVU479
 2481              	.LBB78:
 2482              	.LBI78:
 588:src/lcd.c     ****   t20->inv = inverse;
 2483              		.loc 1 588 6 view .LVU480
 2484              	.LBB79:
 589:src/lcd.c     ****   lcd_setXY (t20, 365, Y_ANNUNC-50);
 2485              		.loc 1 589 3 view .LVU481
ARM GAS  /tmp/ccYbhZ84.s 			page 62


 2486 0300 394C     		ldr	r4, .L157
 2487              	.LVL238:
 590:src/lcd.c     ****   lcd_writeText(t20, "RUN");
 2488              		.loc 1 590 3 is_stmt 0 view .LVU482
 2489 0302 3A4E     		ldr	r6, .L157+4
 589:src/lcd.c     ****   lcd_setXY (t20, 365, Y_ANNUNC-50);
 2490              		.loc 1 589 3 view .LVU483
 2491 0304 206B     		ldr	r0, [r4, #48]
 589:src/lcd.c     ****   lcd_setXY (t20, 365, Y_ANNUNC-50);
 2492              		.loc 1 589 12 view .LVU484
 2493 0306 DDB2     		uxtb	r5, r3
 589:src/lcd.c     ****   lcd_setXY (t20, 365, Y_ANNUNC-50);
 2494              		.loc 1 589 12 view .LVU485
 2495 0308 4574     		strb	r5, [r0, #17]
 590:src/lcd.c     ****   lcd_writeText(t20, "RUN");
 2496              		.loc 1 590 3 is_stmt 1 view .LVU486
 2497 030a 40F26D11 		movw	r1, #365
 2498 030e 1922     		movs	r2, #25
 2499 0310 B047     		blx	r6
 2500              	.LVL239:
 591:src/lcd.c     ****   //  t20->inv = 0;
 2501              		.loc 1 591 3 view .LVU487
 2502 0312 206B     		ldr	r0, [r4, #48]
 2503 0314 364B     		ldr	r3, .L157+8
 2504 0316 3749     		ldr	r1, .L157+12
 2505 0318 9847     		blx	r3
 2506              	.LVL240:
 2507              	.L132:
 591:src/lcd.c     ****   //  t20->inv = 0;
 2508              		.loc 1 591 3 is_stmt 0 view .LVU488
 2509              	.LBE79:
 2510              	.LBE78:
 516:src/lcd.c     ****       lcd_setXY (t20, 285, Y_ANNUNC-30);
 2511              		.loc 1 516 7 is_stmt 1 view .LVU489
 2512 031a 334C     		ldr	r4, .L157
 517:src/lcd.c     ****       lcd_writeText(t20, "RAD");
 2513              		.loc 1 517 7 is_stmt 0 view .LVU490
 2514 031c 334B     		ldr	r3, .L157+4
 516:src/lcd.c     ****       lcd_setXY (t20, 285, Y_ANNUNC-30);
 2515              		.loc 1 516 7 view .LVU491
 2516 031e 206B     		ldr	r0, [r4, #48]
 517:src/lcd.c     ****       lcd_writeText(t20, "RAD");
 2517              		.loc 1 517 7 view .LVU492
 2518 0320 40F21D11 		movw	r1, #285
 516:src/lcd.c     ****       lcd_setXY (t20, 285, Y_ANNUNC-30);
 2519              		.loc 1 516 16 view .LVU493
 2520 0324 4574     		strb	r5, [r0, #17]
 517:src/lcd.c     ****       lcd_writeText(t20, "RAD");
 2521              		.loc 1 517 7 is_stmt 1 view .LVU494
 2522 0326 2D22     		movs	r2, #45
 2523 0328 9847     		blx	r3
 2524              	.LVL241:
 518:src/lcd.c     ****       return;
 2525              		.loc 1 518 7 view .LVU495
 2526 032a 206B     		ldr	r0, [r4, #48]
 2527 032c 304B     		ldr	r3, .L157+8
 2528 032e 3249     		ldr	r1, .L157+16
ARM GAS  /tmp/ccYbhZ84.s 			page 63


 2529 0330 A3E7     		b	.L148
 2530              	.LVL242:
 2531              	.L123:
 518:src/lcd.c     ****       return;
 2532              		.loc 1 518 7 is_stmt 0 view .LVU496
 2533 0332 DDB2     		uxtb	r5, r3
 2534 0334 F1E7     		b	.L132
 2535              	.L122:
 521:src/lcd.c     ****       lcd_setXY (t20, 325, Y_ANNUNC-30);
 2536              		.loc 1 521 7 is_stmt 1 view .LVU497
 2537 0336 2C4C     		ldr	r4, .L157
 2538              	.LVL243:
 522:src/lcd.c     ****       lcd_writeText(t20, "DEG");
 2539              		.loc 1 522 7 is_stmt 0 view .LVU498
 2540 0338 2C4D     		ldr	r5, .L157+4
 521:src/lcd.c     ****       lcd_setXY (t20, 325, Y_ANNUNC-30);
 2541              		.loc 1 521 7 view .LVU499
 2542 033a 206B     		ldr	r0, [r4, #48]
 522:src/lcd.c     ****       lcd_writeText(t20, "DEG");
 2543              		.loc 1 522 7 view .LVU500
 2544 033c 40F24511 		movw	r1, #325
 521:src/lcd.c     ****       lcd_setXY (t20, 325, Y_ANNUNC-30);
 2545              		.loc 1 521 16 view .LVU501
 2546 0340 4374     		strb	r3, [r0, #17]
 522:src/lcd.c     ****       lcd_writeText(t20, "DEG");
 2547              		.loc 1 522 7 is_stmt 1 view .LVU502
 2548 0342 2D22     		movs	r2, #45
 2549 0344 A847     		blx	r5
 2550              	.LVL244:
 523:src/lcd.c     ****       return;
 2551              		.loc 1 523 7 view .LVU503
 2552 0346 206B     		ldr	r0, [r4, #48]
 2553 0348 294B     		ldr	r3, .L157+8
 2554 034a 2C49     		ldr	r1, .L157+20
 2555 034c 95E7     		b	.L148
 2556              	.LVL245:
 2557              	.L115:
 413:src/lcd.c     ****       return;
 2558              		.loc 1 413 7 view .LVU504
 2559              	.LBB80:
 2560              	.LBI80:
 160:src/lcd.c     ****   exp_right_side(i, j, col);
 2561              		.loc 1 160 6 view .LVU505
 2562              	.LBB81:
 161:src/lcd.c     **** }
 2563              		.loc 1 161 3 view .LVU506
 2564 034e 2246     		mov	r2, r4
 2565 0350 8221     		movs	r1, #130
 2566              	.LVL246:
 2567              	.L151:
 161:src/lcd.c     **** }
 2568              		.loc 1 161 3 is_stmt 0 view .LVU507
 2569              	.LBE81:
 2570              	.LBE80:
 539:src/lcd.c     **** 
 2571              		.loc 1 539 1 view .LVU508
 2572 0352 02B0     		add	sp, sp, #8
ARM GAS  /tmp/ccYbhZ84.s 			page 64


 2573              		.cfi_remember_state
 2574              		.cfi_def_cfa_offset 16
 2575              		@ sp needed
 2576 0354 BDE87040 		pop	{r4, r5, r6, lr}
 2577              		.cfi_restore 14
 2578              		.cfi_restore 6
 2579              		.cfi_restore 5
 2580              		.cfi_restore 4
 2581              		.cfi_def_cfa_offset 0
 2582              	.LVL247:
 2583              	.LBB82:
 2584              	.LBB83:
 164:src/lcd.c     **** }
 2585              		.loc 1 164 3 view .LVU509
 2586 0358 FFF7FEBF 		b	exp_right_side
 2587              	.LVL248:
 2588              	.L114:
 2589              		.cfi_restore_state
 164:src/lcd.c     **** }
 2590              		.loc 1 164 3 view .LVU510
 2591              	.LBE83:
 2592              	.LBE82:
 416:src/lcd.c     ****       return;
 2593              		.loc 1 416 7 is_stmt 1 view .LVU511
 2594              	.LBB85:
 2595              	.LBI85:
 151:src/lcd.c     ****   exp_left_side(i, j+11, col);
 2596              		.loc 1 151 6 view .LVU512
 2597              	.LBB86:
 152:src/lcd.c     **** }
 2598              		.loc 1 152 3 view .LVU513
 2599 035c 2246     		mov	r2, r4
 2600 035e 8D21     		movs	r1, #141
 2601              	.LVL249:
 2602              	.L149:
 152:src/lcd.c     **** }
 2603              		.loc 1 152 3 is_stmt 0 view .LVU514
 2604              	.LBE86:
 2605              	.LBE85:
 539:src/lcd.c     **** 
 2606              		.loc 1 539 1 view .LVU515
 2607 0360 02B0     		add	sp, sp, #8
 2608              		.cfi_remember_state
 2609              		.cfi_def_cfa_offset 16
 2610              		@ sp needed
 2611 0362 BDE87040 		pop	{r4, r5, r6, lr}
 2612              		.cfi_restore 14
 2613              		.cfi_restore 6
 2614              		.cfi_restore 5
 2615              		.cfi_restore 4
 2616              		.cfi_def_cfa_offset 0
 2617              	.LVL250:
 2618              	.LBB88:
 2619              	.LBB87:
 152:src/lcd.c     **** }
 2620              		.loc 1 152 3 view .LVU516
 2621 0366 FFF7FEBF 		b	exp_left_side
ARM GAS  /tmp/ccYbhZ84.s 			page 65


 2622              	.LVL251:
 2623              	.L113:
 2624              		.cfi_restore_state
 152:src/lcd.c     **** }
 2625              		.loc 1 152 3 view .LVU517
 2626              	.LBE87:
 2627              	.LBE88:
 419:src/lcd.c     ****       return;
 2628              		.loc 1 419 7 is_stmt 1 view .LVU518
 2629 036a 2246     		mov	r2, r4
 2630 036c 8221     		movs	r1, #130
 539:src/lcd.c     **** 
 2631              		.loc 1 539 1 is_stmt 0 view .LVU519
 2632 036e 02B0     		add	sp, sp, #8
 2633              		.cfi_remember_state
 2634              		.cfi_def_cfa_offset 16
 2635              		@ sp needed
 2636 0370 BDE87040 		pop	{r4, r5, r6, lr}
 2637              		.cfi_restore 14
 2638              		.cfi_restore 6
 2639              		.cfi_restore 5
 2640              		.cfi_restore 4
 2641              		.cfi_def_cfa_offset 0
 2642              	.LVL252:
 419:src/lcd.c     ****       return;
 2643              		.loc 1 419 7 view .LVU520
 2644 0374 FFF7FEBF 		b	exp_bottom
 2645              	.LVL253:
 2646              	.L111:
 2647              		.cfi_restore_state
 422:src/lcd.c     ****       return;
 2648              		.loc 1 422 7 is_stmt 1 view .LVU521
 2649              	.LBB89:
 2650              	.LBI82:
 163:src/lcd.c     ****   exp_right_side(i-1, j+11, col);
 2651              		.loc 1 163 6 view .LVU522
 2652              	.LBB84:
 164:src/lcd.c     **** }
 2653              		.loc 1 164 3 view .LVU523
 2654 0378 2246     		mov	r2, r4
 2655 037a 03F25710 		addw	r0, r3, #343
 2656              	.LVL254:
 164:src/lcd.c     **** }
 2657              		.loc 1 164 3 is_stmt 0 view .LVU524
 2658 037e 8D21     		movs	r1, #141
 2659 0380 E7E7     		b	.L151
 2660              	.LVL255:
 2661              	.L117:
 164:src/lcd.c     **** }
 2662              		.loc 1 164 3 view .LVU525
 2663              	.LBE84:
 2664              	.LBE89:
 407:src/lcd.c     ****       return;
 2665              		.loc 1 407 7 is_stmt 1 view .LVU526
 2666              	.LBB90:
 2667              	.LBI90:
 148:src/lcd.c     ****   exp_left_side(i+1, j, col);
ARM GAS  /tmp/ccYbhZ84.s 			page 66


 2668              		.loc 1 148 6 view .LVU527
 2669              	.LBB91:
 149:src/lcd.c     **** }
 2670              		.loc 1 149 3 view .LVU528
 2671 0382 2246     		mov	r2, r4
 2672 0384 03F25910 		addw	r0, r3, #345
 2673              	.LVL256:
 149:src/lcd.c     **** }
 2674              		.loc 1 149 3 is_stmt 0 view .LVU529
 2675 0388 8221     		movs	r1, #130
 2676 038a E9E7     		b	.L149
 2677              	.LVL257:
 2678              	.L116:
 149:src/lcd.c     **** }
 2679              		.loc 1 149 3 view .LVU530
 2680              	.LBE91:
 2681              	.LBE90:
 410:src/lcd.c     ****       return;
 2682              		.loc 1 410 7 is_stmt 1 view .LVU531
 2683 038c 2246     		mov	r2, r4
 2684 038e 8221     		movs	r1, #130
 2685 0390 24E7     		b	.L150
 2686              	.LVL258:
 2687              	.L154:
 532:src/lcd.c     ****     return;
 2688              		.loc 1 532 5 view .LVU532
 532:src/lcd.c     ****     return;
 2689              		.loc 1 532 74 is_stmt 0 view .LVU533
 2690 0392 1B4B     		ldr	r3, .L157+24
 532:src/lcd.c     ****     return;
 2691              		.loc 1 532 5 view .LVU534
 2692 0394 0094     		str	r4, [sp]
 532:src/lcd.c     ****     return;
 2693              		.loc 1 532 39 view .LVU535
 2694 0396 8E38     		subs	r0, r0, #142
 2695              	.LVL259:
 532:src/lcd.c     ****     return;
 2696              		.loc 1 532 74 view .LVU536
 2697 0398 A3FB0023 		umull	r2, r3, r3, r0
 2698 039c 9B08     		lsrs	r3, r3, #2
 2699 039e 03EB4302 		add	r2, r3, r3, lsl #1
 2700 03a2 A0EB4200 		sub	r0, r0, r2, lsl #1
 2701              	.LVL260:
 532:src/lcd.c     ****     return;
 2702              		.loc 1 532 77 view .LVU537
 2703 03a6 00EB4000 		add	r0, r0, r0, lsl #1
 2704 03aa 4100     		lsls	r1, r0, #1
 532:src/lcd.c     ****     return;
 2705              		.loc 1 532 35 view .LVU538
 2706 03ac 03EB8303 		add	r3, r3, r3, lsl #2
 532:src/lcd.c     ****     return;
 2707              		.loc 1 532 5 view .LVU539
 2708 03b0 03F11000 		add	r0, r3, #16
 2709 03b4 134C     		ldr	r4, .L157+28
 2710              	.LVL261:
 532:src/lcd.c     ****     return;
 2711              		.loc 1 532 5 view .LVU540
ARM GAS  /tmp/ccYbhZ84.s 			page 67


 2712 03b6 5431     		adds	r1, r1, #84
 2713 03b8 0523     		movs	r3, #5
 2714 03ba 0422     		movs	r2, #4
 2715 03bc A047     		blx	r4
 2716              	.LVL262:
 533:src/lcd.c     ****   }
 2717              		.loc 1 533 5 is_stmt 1 view .LVU541
 2718 03be 7AE6     		b	.L95
 2719              	.LVL263:
 2720              	.L152:
 2721              	.LBB92:
 482:src/lcd.c     **** 	    dots[BEG] = 7;
 2722              		.loc 1 482 4 view .LVU542
 482:src/lcd.c     **** 	    dots[BEG] = 7;
 2723              		.loc 1 482 7 is_stmt 0 view .LVU543
 2724 03c0 002A     		cmp	r2, #0
 2725 03c2 3FF477AF 		beq	.L144
 2726 03c6 73E6     		b	.L143
 2727              	.L137:
 496:src/lcd.c     **** 	    draw_BEG(4, 0);
 2728              		.loc 1 496 6 is_stmt 1 view .LVU544
 2729 03c8 0121     		movs	r1, #1
 2730 03ca 0820     		movs	r0, #8
 2731              	.LVL264:
 496:src/lcd.c     **** 	    draw_BEG(4, 0);
 2732              		.loc 1 496 6 is_stmt 0 view .LVU545
 2733 03cc FFF7FEFF 		bl	draw_BEG
 2734              	.LVL265:
 496:src/lcd.c     **** 	    draw_BEG(4, 0);
 2735              		.loc 1 496 6 view .LVU546
 2736 03d0 66E7     		b	.L142
 2737              	.LVL266:
 2738              	.L110:
 496:src/lcd.c     **** 	    draw_BEG(4, 0);
 2739              		.loc 1 496 6 view .LVU547
 2740              	.LBE92:
 404:src/lcd.c     ****       return;
 2741              		.loc 1 404 7 is_stmt 1 view .LVU548
 2742 03d2 2246     		mov	r2, r4
 2743 03d4 8221     		movs	r1, #130
 539:src/lcd.c     **** 
 2744              		.loc 1 539 1 is_stmt 0 view .LVU549
 2745 03d6 02B0     		add	sp, sp, #8
 2746              		@ sp needed
 2747 03d8 BDE87040 		pop	{r4, r5, r6, lr}
 2748              	.LVL267:
 404:src/lcd.c     ****       return;
 2749              		.loc 1 404 7 view .LVU550
 2750 03dc FFF7FEBF 		b	exp_top
 2751              	.LVL268:
 2752              	.L119:
 430:src/lcd.c     ****       return;
 2753              		.loc 1 430 7 is_stmt 1 view .LVU551
 2754 03e0 2246     		mov	r2, r4
 2755 03e2 8221     		movs	r1, #130
 2756 03e4 0120     		movs	r0, #1
 2757              	.LVL269:
ARM GAS  /tmp/ccYbhZ84.s 			page 68


 430:src/lcd.c     ****       return;
 2758              		.loc 1 430 7 is_stmt 0 view .LVU552
 2759 03e6 B9E6     		b	.L146
 2760              	.L158:
 2761              		.align	2
 2762              	.L157:
 2763 03e8 00200010 		.word	268443648
 2764 03ec 6D020008 		.word	134218349
 2765 03f0 7D020008 		.word	134218365
 2766 03f4 00000000 		.word	.LC4
 2767 03f8 0C000000 		.word	.LC9
 2768 03fc 10000000 		.word	.LC10
 2769 0400 ABAAAAAA 		.word	-1431655765
 2770 0404 3D020008 		.word	134218301
 2771              		.cfi_endproc
 2772              	.LFE26:
 2774              		.section	.text.set_dot,"ax",%progbits
 2775              		.align	1
 2776              		.p2align 2,,3
 2777              		.global	set_dot
 2778              		.syntax unified
 2779              		.thumb
 2780              		.thumb_func
 2781              		.fpu fpv4-sp-d16
 2783              	set_dot:
 2784              	.LVL270:
 2785              	.LFB0:
  39:src/lcd.c     ****   dots[n] |= 1;
 2786              		.loc 1 39 21 is_stmt 1 view -0
 2787              		.cfi_startproc
 2788              		@ args = 0, pretend = 0, frame = 0
 2789              		@ frame_needed = 0, uses_anonymous_args = 0
  40:src/lcd.c     ****   if (dots[n]&2) return;
 2790              		.loc 1 40 3 view .LVU554
  39:src/lcd.c     ****   dots[n] |= 1;
 2791              		.loc 1 39 21 is_stmt 0 view .LVU555
 2792 0000 38B5     		push	{r3, r4, r5, lr}
 2793              		.cfi_def_cfa_offset 16
 2794              		.cfi_offset 3, -16
 2795              		.cfi_offset 4, -12
 2796              		.cfi_offset 5, -8
 2797              		.cfi_offset 14, -4
  40:src/lcd.c     ****   if (dots[n]&2) return;
 2798              		.loc 1 40 11 view .LVU556
 2799 0002 074D     		ldr	r5, .L163
 2800 0004 2B5C     		ldrb	r3, [r5, r0]	@ zero_extendqisi2
 2801 0006 43F00102 		orr	r2, r3, #1
  41:src/lcd.c     ****   draw_dot(n);
 2802              		.loc 1 41 6 view .LVU557
 2803 000a 9B07     		lsls	r3, r3, #30
  40:src/lcd.c     ****   if (dots[n]&2) return;
 2804              		.loc 1 40 11 view .LVU558
 2805 000c 2A54     		strb	r2, [r5, r0]
  41:src/lcd.c     ****   draw_dot(n);
 2806              		.loc 1 41 3 is_stmt 1 view .LVU559
  41:src/lcd.c     ****   draw_dot(n);
 2807              		.loc 1 41 6 is_stmt 0 view .LVU560
ARM GAS  /tmp/ccYbhZ84.s 			page 69


 2808 000e 00D5     		bpl	.L162
  44:src/lcd.c     **** void clr_dot(int n) {
 2809              		.loc 1 44 1 view .LVU561
 2810 0010 38BD     		pop	{r3, r4, r5, pc}
 2811              	.L162:
 2812 0012 0446     		mov	r4, r0
  42:src/lcd.c     ****   dots[n] = 3; // 11;
 2813              		.loc 1 42 3 is_stmt 1 view .LVU562
 2814 0014 FFF7FEFF 		bl	draw_dot
 2815              	.LVL271:
  43:src/lcd.c     **** }
 2816              		.loc 1 43 3 view .LVU563
  43:src/lcd.c     **** }
 2817              		.loc 1 43 11 is_stmt 0 view .LVU564
 2818 0018 0323     		movs	r3, #3
 2819 001a 2B55     		strb	r3, [r5, r4]
  44:src/lcd.c     **** void clr_dot(int n) {
 2820              		.loc 1 44 1 view .LVU565
 2821 001c 38BD     		pop	{r3, r4, r5, pc}
 2822              	.LVL272:
 2823              	.L164:
  44:src/lcd.c     **** void clr_dot(int n) {
 2824              		.loc 1 44 1 view .LVU566
 2825 001e 00BF     		.align	2
 2826              	.L163:
 2827 0020 00000000 		.word	.LANCHOR0
 2828              		.cfi_endproc
 2829              	.LFE0:
 2831              		.section	.text.clr_dot,"ax",%progbits
 2832              		.align	1
 2833              		.p2align 2,,3
 2834              		.global	clr_dot
 2835              		.syntax unified
 2836              		.thumb
 2837              		.thumb_func
 2838              		.fpu fpv4-sp-d16
 2840              	clr_dot:
 2841              	.LVL273:
 2842              	.LFB1:
  45:src/lcd.c     ****   dots[n] &= ~1;
 2843              		.loc 1 45 21 is_stmt 1 view -0
 2844              		.cfi_startproc
 2845              		@ args = 0, pretend = 0, frame = 0
 2846              		@ frame_needed = 0, uses_anonymous_args = 0
  46:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 2847              		.loc 1 46 3 view .LVU568
  45:src/lcd.c     ****   dots[n] &= ~1;
 2848              		.loc 1 45 21 is_stmt 0 view .LVU569
 2849 0000 38B5     		push	{r3, r4, r5, lr}
 2850              		.cfi_def_cfa_offset 16
 2851              		.cfi_offset 3, -16
 2852              		.cfi_offset 4, -12
 2853              		.cfi_offset 5, -8
 2854              		.cfi_offset 14, -4
  46:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 2855              		.loc 1 46 11 view .LVU570
 2856 0002 074D     		ldr	r5, .L172
ARM GAS  /tmp/ccYbhZ84.s 			page 70


 2857 0004 2B5C     		ldrb	r3, [r5, r0]	@ zero_extendqisi2
 2858 0006 23F00102 		bic	r2, r3, #1
  47:src/lcd.c     ****   draw_dot(n);
 2859              		.loc 1 47 6 view .LVU571
 2860 000a 9B07     		lsls	r3, r3, #30
  46:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 2861              		.loc 1 46 11 view .LVU572
 2862 000c 2A54     		strb	r2, [r5, r0]
  47:src/lcd.c     ****   draw_dot(n);
 2863              		.loc 1 47 3 is_stmt 1 view .LVU573
  47:src/lcd.c     ****   draw_dot(n);
 2864              		.loc 1 47 6 is_stmt 0 view .LVU574
 2865 000e 00D4     		bmi	.L171
  50:src/lcd.c     **** 
 2866              		.loc 1 50 1 view .LVU575
 2867 0010 38BD     		pop	{r3, r4, r5, pc}
 2868              	.L171:
 2869 0012 0446     		mov	r4, r0
  48:src/lcd.c     ****   dots[n] = 0; // =0 would work too.
 2870              		.loc 1 48 3 is_stmt 1 view .LVU576
 2871 0014 FFF7FEFF 		bl	draw_dot
 2872              	.LVL274:
  49:src/lcd.c     **** }
 2873              		.loc 1 49 3 view .LVU577
  49:src/lcd.c     **** }
 2874              		.loc 1 49 11 is_stmt 0 view .LVU578
 2875 0018 0023     		movs	r3, #0
 2876 001a 2B55     		strb	r3, [r5, r4]
  50:src/lcd.c     **** 
 2877              		.loc 1 50 1 view .LVU579
 2878 001c 38BD     		pop	{r3, r4, r5, pc}
 2879              	.LVL275:
 2880              	.L173:
  50:src/lcd.c     **** 
 2881              		.loc 1 50 1 view .LVU580
 2882 001e 00BF     		.align	2
 2883              	.L172:
 2884 0020 00000000 		.word	.LANCHOR0
 2885              		.cfi_endproc
 2886              	.LFE1:
 2888              		.section	.text.reset_disp,"ax",%progbits
 2889              		.align	1
 2890              		.p2align 2,,3
 2891              		.global	reset_disp
 2892              		.syntax unified
 2893              		.thumb
 2894              		.thumb_func
 2895              		.fpu fpv4-sp-d16
 2897              	reset_disp:
 2898              	.LFB4:
  62:src/lcd.c     ****   clr_dot(STO_annun); // gets turned back on if needed;
 2899              		.loc 1 62 23 is_stmt 1 view -0
 2900              		.cfi_startproc
 2901              		@ args = 0, pretend = 0, frame = 0
 2902              		@ frame_needed = 0, uses_anonymous_args = 0
  63:src/lcd.c     ****   int rcl = is_dot(RCL_annun);
 2903              		.loc 1 63 3 view .LVU582
ARM GAS  /tmp/ccYbhZ84.s 			page 71


 2904              	.LVL276:
 2905              	.LBB93:
 2906              	.LBI93:
  45:src/lcd.c     ****   dots[n] &= ~1;
 2907              		.loc 1 45 6 view .LVU583
 2908              	.LBB94:
  46:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 2909              		.loc 1 46 3 view .LVU584
 2910              	.LBE94:
 2911              	.LBE93:
  62:src/lcd.c     ****   clr_dot(STO_annun); // gets turned back on if needed;
 2912              		.loc 1 62 23 is_stmt 0 view .LVU585
 2913 0000 70B5     		push	{r4, r5, r6, lr}
 2914              		.cfi_def_cfa_offset 16
 2915              		.cfi_offset 4, -16
 2916              		.cfi_offset 5, -12
 2917              		.cfi_offset 6, -8
 2918              		.cfi_offset 14, -4
 2919              	.LBB96:
 2920              	.LBB95:
  46:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 2921              		.loc 1 46 11 view .LVU586
 2922 0002 1C4C     		ldr	r4, .L182
 2923 0004 94F88930 		ldrb	r3, [r4, #137]	@ zero_extendqisi2
 2924 0008 23F00102 		bic	r2, r3, #1
  47:src/lcd.c     ****   draw_dot(n);
 2925              		.loc 1 47 6 view .LVU587
 2926 000c 9B07     		lsls	r3, r3, #30
  46:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 2927              		.loc 1 46 11 view .LVU588
 2928 000e 84F88920 		strb	r2, [r4, #137]
  47:src/lcd.c     ****   draw_dot(n);
 2929              		.loc 1 47 3 is_stmt 1 view .LVU589
  47:src/lcd.c     ****   draw_dot(n);
 2930              		.loc 1 47 6 is_stmt 0 view .LVU590
 2931 0012 05D5     		bpl	.L175
  48:src/lcd.c     ****   dots[n] = 0; // =0 would work too.
 2932              		.loc 1 48 3 is_stmt 1 view .LVU591
 2933 0014 8920     		movs	r0, #137
 2934 0016 FFF7FEFF 		bl	draw_dot
 2935              	.LVL277:
  49:src/lcd.c     **** }
 2936              		.loc 1 49 3 view .LVU592
  49:src/lcd.c     **** }
 2937              		.loc 1 49 11 is_stmt 0 view .LVU593
 2938 001a 0023     		movs	r3, #0
 2939 001c 84F88930 		strb	r3, [r4, #137]
 2940              	.L175:
 2941              	.LVL278:
  49:src/lcd.c     **** }
 2942              		.loc 1 49 11 view .LVU594
 2943              	.LBE95:
 2944              	.LBE96:
  64:src/lcd.c     ****   int bat = is_dot(BATTERY);
 2945              		.loc 1 64 3 is_stmt 1 view .LVU595
 2946              	.LBB97:
 2947              	.LBI97:
ARM GAS  /tmp/ccYbhZ84.s 			page 72


  52:src/lcd.c     **** 	return dots[n]&1;
 2948              		.loc 1 52 5 view .LVU596
 2949              	.LBB98:
  53:src/lcd.c     **** }
 2950              		.loc 1 53 2 view .LVU597
  53:src/lcd.c     **** }
 2951              		.loc 1 53 16 is_stmt 0 view .LVU598
 2952 0020 94F88A10 		ldrb	r1, [r4, #138]	@ zero_extendqisi2
 2953              	.LBE98:
 2954              	.LBE97:
 2955              	.LBB100:
 2956              	.LBB101:
 2957 0024 94F88760 		ldrb	r6, [r4, #135]	@ zero_extendqisi2
 2958              	.LBE101:
 2959              	.LBE100:
 2960              	.LBB103:
 2961              	.LBB104:
 2962 0028 94F88450 		ldrb	r5, [r4, #132]	@ zero_extendqisi2
 2963 002c 124B     		ldr	r3, .L182+4
 2964              	.LBE104:
 2965              	.LBE103:
 2966              	.LBB106:
 2967              	.LBB107:
 2968 002e 94F88D40 		ldrb	r4, [r4, #141]	@ zero_extendqisi2
 2969              	.LBE107:
 2970              	.LBE106:
 2971              	.LBB109:
 2972              	.LBB99:
 2973 0032 01F00101 		and	r1, r1, #1
 2974              	.LVL279:
  53:src/lcd.c     **** }
 2975              		.loc 1 53 16 view .LVU599
 2976              	.LBE99:
 2977              	.LBE109:
  65:src/lcd.c     ****   int leq = is_dot(LIT_EQ);
 2978              		.loc 1 65 3 is_stmt 1 view .LVU600
 2979              	.LBB110:
 2980              	.LBI100:
  52:src/lcd.c     **** 	return dots[n]&1;
 2981              		.loc 1 52 5 view .LVU601
 2982              	.LBB102:
  53:src/lcd.c     **** }
 2983              		.loc 1 53 2 view .LVU602
  53:src/lcd.c     **** }
 2984              		.loc 1 53 16 is_stmt 0 view .LVU603
 2985 0036 06F00106 		and	r6, r6, #1
 2986              	.LVL280:
  53:src/lcd.c     **** }
 2987              		.loc 1 53 16 view .LVU604
 2988              	.LBE102:
 2989              	.LBE110:
  66:src/lcd.c     ****   int rpn = is_dot(RPN);
 2990              		.loc 1 66 3 is_stmt 1 view .LVU605
 2991              	.LBB111:
 2992              	.LBI103:
  52:src/lcd.c     **** 	return dots[n]&1;
 2993              		.loc 1 52 5 view .LVU606
ARM GAS  /tmp/ccYbhZ84.s 			page 73


 2994              	.LBB105:
  53:src/lcd.c     **** }
 2995              		.loc 1 53 2 view .LVU607
  53:src/lcd.c     **** }
 2996              		.loc 1 53 16 is_stmt 0 view .LVU608
 2997 003a 05F00105 		and	r5, r5, #1
 2998              	.LVL281:
  53:src/lcd.c     **** }
 2999              		.loc 1 53 16 view .LVU609
 3000              	.LBE105:
 3001              	.LBE111:
  67:src/lcd.c     ****   int i;
 3002              		.loc 1 67 3 is_stmt 1 view .LVU610
 3003              	.LBB112:
 3004              	.LBI106:
  52:src/lcd.c     **** 	return dots[n]&1;
 3005              		.loc 1 52 5 view .LVU611
 3006              	.LBB108:
  53:src/lcd.c     **** }
 3007              		.loc 1 53 2 view .LVU612
  53:src/lcd.c     **** }
 3008              		.loc 1 53 16 is_stmt 0 view .LVU613
 3009 003e 04F00104 		and	r4, r4, #1
 3010              	.LVL282:
  53:src/lcd.c     **** }
 3011              		.loc 1 53 16 view .LVU614
 3012              	.LBE108:
 3013              	.LBE112:
  68:src/lcd.c     ****   for (i=0; i<TOP_DOTS; i++)
 3014              		.loc 1 68 3 is_stmt 1 view .LVU615
  69:src/lcd.c     ****     //		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 3015              		.loc 1 69 3 view .LVU616
  69:src/lcd.c     ****     //		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 3016              		.loc 1 69 13 view .LVU617
 3017 0042 03F55370 		add	r0, r3, #844
 3018              	.LVL283:
 3019              	.L176:
  72:src/lcd.c     ****   dot(RCL_annun, rcl);
 3020              		.loc 1 72 5 discriminator 3 view .LVU618
  72:src/lcd.c     ****   dot(RCL_annun, rcl);
 3021              		.loc 1 72 13 is_stmt 0 discriminator 3 view .LVU619
 3022 0046 13F8012F 		ldrb	r2, [r3, #1]!	@ zero_extendqisi2
 3023              	.LVL284:
  72:src/lcd.c     ****   dot(RCL_annun, rcl);
 3024              		.loc 1 72 13 discriminator 3 view .LVU620
 3025 004a 5200     		lsls	r2, r2, #1
  69:src/lcd.c     ****     //		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 3026              		.loc 1 69 3 discriminator 3 view .LVU621
 3027 004c 9842     		cmp	r0, r3
  72:src/lcd.c     ****   dot(RCL_annun, rcl);
 3028              		.loc 1 72 13 discriminator 3 view .LVU622
 3029 004e 1A70     		strb	r2, [r3]
  69:src/lcd.c     ****     //		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 3030              		.loc 1 69 25 is_stmt 1 discriminator 3 view .LVU623
 3031              	.LVL285:
  69:src/lcd.c     ****     //		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 3032              		.loc 1 69 13 discriminator 3 view .LVU624
ARM GAS  /tmp/ccYbhZ84.s 			page 74


  69:src/lcd.c     ****     //		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 3033              		.loc 1 69 3 is_stmt 0 discriminator 3 view .LVU625
 3034 0050 F9D1     		bne	.L176
  73:src/lcd.c     ****   dot(BATTERY, bat);
 3035              		.loc 1 73 3 is_stmt 1 view .LVU626
 3036 0052 8A20     		movs	r0, #138
 3037 0054 FFF7FEFF 		bl	dot
 3038              	.LVL286:
  74:src/lcd.c     ****   dot(LIT_EQ, leq);
 3039              		.loc 1 74 3 view .LVU627
 3040 0058 3146     		mov	r1, r6
 3041 005a 8720     		movs	r0, #135
 3042 005c FFF7FEFF 		bl	dot
 3043              	.LVL287:
  75:src/lcd.c     ****   dot(RPN, rpn);
 3044              		.loc 1 75 3 view .LVU628
 3045 0060 2946     		mov	r1, r5
 3046 0062 8420     		movs	r0, #132
 3047 0064 FFF7FEFF 		bl	dot
 3048              	.LVL288:
  76:src/lcd.c     **** }
 3049              		.loc 1 76 3 view .LVU629
 3050 0068 2146     		mov	r1, r4
 3051 006a 8D20     		movs	r0, #141
  77:src/lcd.c     **** 
 3052              		.loc 1 77 1 is_stmt 0 view .LVU630
 3053 006c BDE87040 		pop	{r4, r5, r6, lr}
 3054              		.cfi_restore 14
 3055              		.cfi_restore 6
 3056              		.cfi_restore 5
 3057              		.cfi_restore 4
 3058              		.cfi_def_cfa_offset 0
 3059              	.LVL289:
  76:src/lcd.c     **** }
 3060              		.loc 1 76 3 view .LVU631
 3061 0070 FFF7FEBF 		b	dot
 3062              	.LVL290:
 3063              	.L183:
  76:src/lcd.c     **** }
 3064              		.loc 1 76 3 view .LVU632
 3065              		.align	2
 3066              	.L182:
 3067 0074 00000000 		.word	.LANCHOR0
 3068 0078 FFFFFFFF 		.word	.LANCHOR0-1
 3069              		.cfi_endproc
 3070              	.LFE4:
 3072              		.section	.text.finish_7_segment,"ax",%progbits
 3073              		.align	1
 3074              		.p2align 2,,3
 3075              		.global	finish_7_segment
 3076              		.syntax unified
 3077              		.thumb
 3078              		.thumb_func
 3079              		.fpu fpv4-sp-d16
 3081              	finish_7_segment:
 3082              	.LFB29:
 562:src/lcd.c     ****   for (int i = 0; i <= EXP_SIGN; ++i) {
ARM GAS  /tmp/ccYbhZ84.s 			page 75


 3083              		.loc 1 562 29 is_stmt 1 view -0
 3084              		.cfi_startproc
 3085              		@ args = 0, pretend = 0, frame = 0
 3086              		@ frame_needed = 0, uses_anonymous_args = 0
 563:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3087              		.loc 1 563 3 view .LVU634
 3088              	.LBB113:
 563:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3089              		.loc 1 563 8 view .LVU635
 3090              	.LVL291:
 563:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3091              		.loc 1 563 19 view .LVU636
 3092              	.LBE113:
 562:src/lcd.c     ****   for (int i = 0; i <= EXP_SIGN; ++i) {
 3093              		.loc 1 562 29 is_stmt 0 view .LVU637
 3094 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3095              		.cfi_def_cfa_offset 24
 3096              		.cfi_offset 3, -24
 3097              		.cfi_offset 4, -20
 3098              		.cfi_offset 5, -16
 3099              		.cfi_offset 6, -12
 3100              		.cfi_offset 7, -8
 3101              		.cfi_offset 14, -4
 3102 0002 0D4C     		ldr	r4, .L195
 3103              	.LBB120:
 3104              	.LBB114:
 3105              	.LBB115:
  49:src/lcd.c     **** }
 3106              		.loc 1 49 11 view .LVU638
 3107 0004 0027     		movs	r7, #0
 3108 0006 04F18306 		add	r6, r4, #131
 3109 000a 6542     		rsbs	r5, r4, #0
 3110 000c 01E0     		b	.L188
 3111              	.LVL292:
 3112              	.L186:
  49:src/lcd.c     **** }
 3113              		.loc 1 49 11 view .LVU639
 3114              	.LBE115:
 3115              	.LBE114:
 563:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3116              		.loc 1 563 34 is_stmt 1 discriminator 2 view .LVU640
 563:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3117              		.loc 1 563 19 discriminator 2 view .LVU641
 563:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3118              		.loc 1 563 3 is_stmt 0 discriminator 2 view .LVU642
 3119 000e B442     		cmp	r4, r6
 3120 0010 10D0     		beq	.L194
 3121              	.LVL293:
 3122              	.L188:
 563:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3123              		.loc 1 563 3 discriminator 2 view .LVU643
 3124 0012 2819     		adds	r0, r5, r4
 3125              	.LVL294:
 564:src/lcd.c     ****   }
 3126              		.loc 1 564 5 is_stmt 1 view .LVU644
 564:src/lcd.c     ****   }
 3127              		.loc 1 564 14 is_stmt 0 view .LVU645
ARM GAS  /tmp/ccYbhZ84.s 			page 76


 3128 0014 14F8013F 		ldrb	r3, [r4, #1]!	@ zero_extendqisi2
 564:src/lcd.c     ****   }
 3129              		.loc 1 564 8 view .LVU646
 3130 0018 03F00302 		and	r2, r3, #3
 3131 001c 022A     		cmp	r2, #2
 3132 001e F6D1     		bne	.L186
 564:src/lcd.c     ****   }
 3133              		.loc 1 564 27 is_stmt 1 view .LVU647
 3134              	.LVL295:
 3135              	.LBB118:
 3136              	.LBI114:
  45:src/lcd.c     ****   dots[n] &= ~1;
 3137              		.loc 1 45 6 view .LVU648
 3138              	.LBB116:
  46:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 3139              		.loc 1 46 3 view .LVU649
  48:src/lcd.c     ****   dots[n] = 0; // =0 would work too.
 3140              		.loc 1 48 3 view .LVU650
  46:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 3141              		.loc 1 46 11 is_stmt 0 view .LVU651
 3142 0020 23F00102 		bic	r2, r3, #1
  47:src/lcd.c     ****   draw_dot(n);
 3143              		.loc 1 47 6 view .LVU652
 3144 0024 9B07     		lsls	r3, r3, #30
  46:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 3145              		.loc 1 46 11 view .LVU653
 3146 0026 2270     		strb	r2, [r4]
  47:src/lcd.c     ****   draw_dot(n);
 3147              		.loc 1 47 3 is_stmt 1 view .LVU654
  47:src/lcd.c     ****   draw_dot(n);
 3148              		.loc 1 47 6 is_stmt 0 view .LVU655
 3149 0028 F1D5     		bpl	.L186
  48:src/lcd.c     ****   dots[n] = 0; // =0 would work too.
 3150              		.loc 1 48 3 view .LVU656
 3151 002a FFF7FEFF 		bl	draw_dot
 3152              	.LVL296:
  49:src/lcd.c     **** }
 3153              		.loc 1 49 3 is_stmt 1 view .LVU657
 3154              	.LBE116:
 3155              	.LBE118:
 563:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3156              		.loc 1 563 3 is_stmt 0 view .LVU658
 3157 002e B442     		cmp	r4, r6
 3158              	.LBB119:
 3159              	.LBB117:
  49:src/lcd.c     **** }
 3160              		.loc 1 49 11 view .LVU659
 3161 0030 2770     		strb	r7, [r4]
 3162              	.LVL297:
  49:src/lcd.c     **** }
 3163              		.loc 1 49 11 view .LVU660
 3164              	.LBE117:
 3165              	.LBE119:
 563:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3166              		.loc 1 563 34 is_stmt 1 view .LVU661
 563:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3167              		.loc 1 563 19 view .LVU662
ARM GAS  /tmp/ccYbhZ84.s 			page 77


 563:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3168              		.loc 1 563 3 is_stmt 0 view .LVU663
 3169 0032 EED1     		bne	.L188
 3170              	.LVL298:
 3171              	.L194:
 563:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3172              		.loc 1 563 3 view .LVU664
 3173              	.LBE120:
 566:src/lcd.c     **** 
 3174              		.loc 1 566 1 view .LVU665
 3175 0034 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3176              	.L196:
 3177 0036 00BF     		.align	2
 3178              	.L195:
 3179 0038 FFFFFFFF 		.word	.LANCHOR0-1
 3180              		.cfi_endproc
 3181              	.LFE29:
 3183              		.section	.text.finish_top_row,"ax",%progbits
 3184              		.align	1
 3185              		.p2align 2,,3
 3186              		.global	finish_top_row
 3187              		.syntax unified
 3188              		.thumb
 3189              		.thumb_func
 3190              		.fpu fpv4-sp-d16
 3192              	finish_top_row:
 3193              	.LFB30:
 569:src/lcd.c     ****  for (int i = MB_TOP; i < TOP_DOTS; ++i) {
 3194              		.loc 1 569 27 is_stmt 1 view -0
 3195              		.cfi_startproc
 3196              		@ args = 0, pretend = 0, frame = 0
 3197              		@ frame_needed = 0, uses_anonymous_args = 0
 570:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3198              		.loc 1 570 2 view .LVU667
 3199              	.LBB121:
 570:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3200              		.loc 1 570 7 view .LVU668
 3201              	.LVL299:
 570:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3202              		.loc 1 570 23 view .LVU669
 3203              	.LBE121:
 569:src/lcd.c     ****  for (int i = MB_TOP; i < TOP_DOTS; ++i) {
 3204              		.loc 1 569 27 is_stmt 0 view .LVU670
 3205 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3206              		.cfi_def_cfa_offset 24
 3207              		.cfi_offset 3, -24
 3208              		.cfi_offset 4, -20
 3209              		.cfi_offset 5, -16
 3210              		.cfi_offset 6, -12
 3211              		.cfi_offset 7, -8
 3212              		.cfi_offset 14, -4
 3213 0002 0E4C     		ldr	r4, .L208
 3214 0004 C4F51275 		rsb	r5, r4, #584
 3215 0008 0235     		adds	r5, r5, #2
 3216 000a 04F58176 		add	r6, r4, #258
 3217              	.LBB128:
 3218              	.LBB122:
ARM GAS  /tmp/ccYbhZ84.s 			page 78


 3219              	.LBB123:
  49:src/lcd.c     **** }
 3220              		.loc 1 49 11 view .LVU671
 3221 000e 0027     		movs	r7, #0
 3222 0010 01E0     		b	.L201
 3223              	.LVL300:
 3224              	.L199:
  49:src/lcd.c     **** }
 3225              		.loc 1 49 11 view .LVU672
 3226              	.LBE123:
 3227              	.LBE122:
 570:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3228              		.loc 1 570 37 is_stmt 1 discriminator 2 view .LVU673
 570:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3229              		.loc 1 570 23 discriminator 2 view .LVU674
 570:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3230              		.loc 1 570 2 is_stmt 0 discriminator 2 view .LVU675
 3231 0012 B442     		cmp	r4, r6
 3232 0014 10D0     		beq	.L207
 3233              	.LVL301:
 3234              	.L201:
 570:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3235              		.loc 1 570 2 discriminator 2 view .LVU676
 3236 0016 2819     		adds	r0, r5, r4
 3237              	.LVL302:
 571:src/lcd.c     ****   }
 3238              		.loc 1 571 5 is_stmt 1 view .LVU677
 571:src/lcd.c     ****   }
 3239              		.loc 1 571 14 is_stmt 0 view .LVU678
 3240 0018 14F8013F 		ldrb	r3, [r4, #1]!	@ zero_extendqisi2
 571:src/lcd.c     ****   }
 3241              		.loc 1 571 8 view .LVU679
 3242 001c 03F00302 		and	r2, r3, #3
 3243 0020 022A     		cmp	r2, #2
 3244 0022 F6D1     		bne	.L199
 571:src/lcd.c     ****   }
 3245              		.loc 1 571 27 is_stmt 1 view .LVU680
 3246              	.LVL303:
 3247              	.LBB126:
 3248              	.LBI122:
  45:src/lcd.c     ****   dots[n] &= ~1;
 3249              		.loc 1 45 6 view .LVU681
 3250              	.LBB124:
  46:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 3251              		.loc 1 46 3 view .LVU682
  48:src/lcd.c     ****   dots[n] = 0; // =0 would work too.
 3252              		.loc 1 48 3 view .LVU683
  46:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 3253              		.loc 1 46 11 is_stmt 0 view .LVU684
 3254 0024 23F00102 		bic	r2, r3, #1
  47:src/lcd.c     ****   draw_dot(n);
 3255              		.loc 1 47 6 view .LVU685
 3256 0028 9B07     		lsls	r3, r3, #30
  46:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 3257              		.loc 1 46 11 view .LVU686
 3258 002a 2270     		strb	r2, [r4]
  47:src/lcd.c     ****   draw_dot(n);
ARM GAS  /tmp/ccYbhZ84.s 			page 79


 3259              		.loc 1 47 3 is_stmt 1 view .LVU687
  47:src/lcd.c     ****   draw_dot(n);
 3260              		.loc 1 47 6 is_stmt 0 view .LVU688
 3261 002c F1D5     		bpl	.L199
  48:src/lcd.c     ****   dots[n] = 0; // =0 would work too.
 3262              		.loc 1 48 3 view .LVU689
 3263 002e FFF7FEFF 		bl	draw_dot
 3264              	.LVL304:
  49:src/lcd.c     **** }
 3265              		.loc 1 49 3 is_stmt 1 view .LVU690
 3266              	.LBE124:
 3267              	.LBE126:
 570:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3268              		.loc 1 570 2 is_stmt 0 view .LVU691
 3269 0032 B442     		cmp	r4, r6
 3270              	.LBB127:
 3271              	.LBB125:
  49:src/lcd.c     **** }
 3272              		.loc 1 49 11 view .LVU692
 3273 0034 2770     		strb	r7, [r4]
 3274              	.LVL305:
  49:src/lcd.c     **** }
 3275              		.loc 1 49 11 view .LVU693
 3276              	.LBE125:
 3277              	.LBE127:
 570:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3278              		.loc 1 570 37 is_stmt 1 view .LVU694
 570:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3279              		.loc 1 570 23 view .LVU695
 570:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3280              		.loc 1 570 2 is_stmt 0 view .LVU696
 3281 0036 EED1     		bne	.L201
 3282              	.LVL306:
 3283              	.L207:
 570:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3284              		.loc 1 570 2 view .LVU697
 3285              	.LBE128:
 573:src/lcd.c     **** #endif
 3286              		.loc 1 573 1 view .LVU698
 3287 0038 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3288              	.L209:
 3289 003a 00BF     		.align	2
 3290              	.L208:
 3291 003c 49020000 		.word	.LANCHOR0+585
 3292              		.cfi_endproc
 3293              	.LFE30:
 3295              		.section	.rodata.draw_PRT.str1.4,"aMS",%progbits,1
 3296              		.align	2
 3297              	.LC11:
 3298 0000 50525400 		.ascii	"PRT\000"
 3299              		.section	.text.draw_PRT,"ax",%progbits
 3300              		.align	1
 3301              		.p2align 2,,3
 3302              		.global	draw_PRT
 3303              		.syntax unified
 3304              		.thumb
 3305              		.thumb_func
ARM GAS  /tmp/ccYbhZ84.s 			page 80


 3306              		.fpu fpv4-sp-d16
 3308              	draw_PRT:
 3309              	.LFB34:
 610:src/lcd.c     **** 
 611:src/lcd.c     **** void draw_PRT (void) {
 3310              		.loc 1 611 22 is_stmt 1 view -0
 3311              		.cfi_startproc
 3312              		@ args = 0, pretend = 0, frame = 0
 3313              		@ frame_needed = 0, uses_anonymous_args = 0
 612:src/lcd.c     ****   t20->inv = !UState.print_on;
 3314              		.loc 1 612 3 view .LVU700
 3315              		.loc 1 612 14 is_stmt 0 view .LVU701
 3316 0000 0A4B     		ldr	r3, .L212
 3317 0002 1B68     		ldr	r3, [r3]
 611:src/lcd.c     ****   t20->inv = !UState.print_on;
 3318              		.loc 1 611 22 view .LVU702
 3319 0004 70B5     		push	{r4, r5, r6, lr}
 3320              		.cfi_def_cfa_offset 16
 3321              		.cfi_offset 4, -16
 3322              		.cfi_offset 5, -12
 3323              		.cfi_offset 6, -8
 3324              		.cfi_offset 14, -4
 3325              		.loc 1 612 12 view .LVU703
 3326 0006 93F8E437 		ldrb	r3, [r3, #2020]	@ zero_extendqisi2
 3327              		.loc 1 612 3 view .LVU704
 3328 000a 094C     		ldr	r4, .L212+4
 613:src/lcd.c     ****   lcd_setXY(t20, 250, Y_ANNUNC-70);
 3329              		.loc 1 613 3 view .LVU705
 3330 000c 094D     		ldr	r5, .L212+8
 612:src/lcd.c     ****   t20->inv = !UState.print_on;
 3331              		.loc 1 612 3 view .LVU706
 3332 000e 206B     		ldr	r0, [r4, #48]
 612:src/lcd.c     ****   t20->inv = !UState.print_on;
 3333              		.loc 1 612 12 view .LVU707
 3334 0010 DB43     		mvns	r3, r3
 3335 0012 03F00103 		and	r3, r3, #1
 3336 0016 4374     		strb	r3, [r0, #17]
 3337              		.loc 1 613 3 is_stmt 1 view .LVU708
 3338 0018 FA21     		movs	r1, #250
 3339 001a 0522     		movs	r2, #5
 3340 001c A847     		blx	r5
 3341              	.LVL307:
 614:src/lcd.c     ****   lcd_writeText(t20,"PRT");
 3342              		.loc 1 614 3 view .LVU709
 3343 001e 206B     		ldr	r0, [r4, #48]
 3344 0020 054B     		ldr	r3, .L212+12
 3345 0022 0649     		ldr	r1, .L212+16
 615:src/lcd.c     **** }
 3346              		.loc 1 615 1 is_stmt 0 view .LVU710
 3347 0024 BDE87040 		pop	{r4, r5, r6, lr}
 3348              		.cfi_restore 14
 3349              		.cfi_restore 6
 3350              		.cfi_restore 5
 3351              		.cfi_restore 4
 3352              		.cfi_def_cfa_offset 0
 614:src/lcd.c     ****   lcd_writeText(t20,"PRT");
 3353              		.loc 1 614 3 view .LVU711
ARM GAS  /tmp/ccYbhZ84.s 			page 81


 3354 0028 1847     		bx	r3	@ indirect register sibling call
 3355              	.LVL308:
 3356              	.L213:
 3357 002a 00BF     		.align	2
 3358              	.L212:
 3359 002c 00000000 		.word	main_ram
 3360 0030 00200010 		.word	268443648
 3361 0034 6D020008 		.word	134218349
 3362 0038 7D020008 		.word	134218365
 3363 003c 00000000 		.word	.LC11
 3364              		.cfi_endproc
 3365              	.LFE34:
 3367              		.section	.text.finish_display,"ax",%progbits
 3368              		.align	1
 3369              		.p2align 2,,3
 3370              		.global	finish_display
 3371              		.syntax unified
 3372              		.thumb
 3373              		.thumb_func
 3374              		.fpu fpv4-sp-d16
 3376              	finish_display:
 3377              	.LFB28:
 553:src/lcd.c     ****   draw_PRT();
 3378              		.loc 1 553 27 is_stmt 1 view -0
 3379              		.cfi_startproc
 3380              		@ args = 0, pretend = 0, frame = 0
 3381              		@ frame_needed = 0, uses_anonymous_args = 0
 554:src/lcd.c     ****   finish_7_segment();
 3382              		.loc 1 554 3 view .LVU713
 553:src/lcd.c     ****   draw_PRT();
 3383              		.loc 1 553 27 is_stmt 0 view .LVU714
 3384 0000 10B5     		push	{r4, lr}
 3385              		.cfi_def_cfa_offset 8
 3386              		.cfi_offset 4, -8
 3387              		.cfi_offset 14, -4
 554:src/lcd.c     ****   finish_7_segment();
 3388              		.loc 1 554 3 view .LVU715
 3389 0002 FFF7FEFF 		bl	draw_PRT
 3390              	.LVL309:
 555:src/lcd.c     **** #ifdef TOP_ROW
 3391              		.loc 1 555 3 is_stmt 1 view .LVU716
 3392 0006 FFF7FEFF 		bl	finish_7_segment
 3393              	.LVL310:
 557:src/lcd.c     **** #endif
 3394              		.loc 1 557 3 view .LVU717
 3395 000a FFF7FEFF 		bl	finish_top_row
 3396              	.LVL311:
 559:src/lcd.c     **** }
 3397              		.loc 1 559 3 view .LVU718
 560:src/lcd.c     **** 
 3398              		.loc 1 560 1 is_stmt 0 view .LVU719
 3399 000e BDE81040 		pop	{r4, lr}
 3400              		.cfi_restore 14
 3401              		.cfi_restore 4
 3402              		.cfi_def_cfa_offset 0
 559:src/lcd.c     **** }
 3403              		.loc 1 559 3 view .LVU720
ARM GAS  /tmp/ccYbhZ84.s 			page 82


 3404 0012 014B     		ldr	r3, .L216
 3405 0014 1847     		bx	r3	@ indirect register sibling call
 3406              	.LVL312:
 3407              	.L217:
 3408 0016 00BF     		.align	2
 3409              	.L216:
 3410 0018 31020008 		.word	134218289
 3411              		.cfi_endproc
 3412              	.LFE28:
 3414              		.section	.text.finish_PRT,"ax",%progbits
 3415              		.align	1
 3416              		.p2align 2,,3
 3417              		.global	finish_PRT
 3418              		.syntax unified
 3419              		.thumb
 3420              		.thumb_func
 3421              		.fpu fpv4-sp-d16
 3423              	finish_PRT:
 3424              	.LFB35:
 616:src/lcd.c     **** 
 617:src/lcd.c     **** void finish_PRT (void) {
 3425              		.loc 1 617 24 is_stmt 1 view -0
 3426              		.cfi_startproc
 3427              		@ args = 0, pretend = 0, frame = 0
 3428              		@ frame_needed = 0, uses_anonymous_args = 0
 618:src/lcd.c     ****   draw_PRT();
 3429              		.loc 1 618 3 view .LVU722
 617:src/lcd.c     ****   draw_PRT();
 3430              		.loc 1 617 24 is_stmt 0 view .LVU723
 3431 0000 10B5     		push	{r4, lr}
 3432              		.cfi_def_cfa_offset 8
 3433              		.cfi_offset 4, -8
 3434              		.cfi_offset 14, -4
 3435              		.loc 1 618 3 view .LVU724
 3436 0002 FFF7FEFF 		bl	draw_PRT
 3437              	.LVL313:
 619:src/lcd.c     ****   lcd_refresh();
 3438              		.loc 1 619 3 is_stmt 1 view .LVU725
 620:src/lcd.c     **** }
 3439              		.loc 1 620 1 is_stmt 0 view .LVU726
 3440 0006 BDE81040 		pop	{r4, lr}
 3441              		.cfi_restore 14
 3442              		.cfi_restore 4
 3443              		.cfi_def_cfa_offset 0
 619:src/lcd.c     ****   lcd_refresh();
 3444              		.loc 1 619 3 view .LVU727
 3445 000a 014B     		ldr	r3, .L220
 3446 000c 1847     		bx	r3	@ indirect register sibling call
 3447              	.LVL314:
 3448              	.L221:
 3449 000e 00BF     		.align	2
 3450              	.L220:
 3451 0010 31020008 		.word	134218289
 3452              		.cfi_endproc
 3453              	.LFE35:
 3455              		.section	.text.finish_LEQ,"ax",%progbits
 3456              		.align	1
ARM GAS  /tmp/ccYbhZ84.s 			page 83


 3457              		.p2align 2,,3
 3458              		.global	finish_LEQ
 3459              		.syntax unified
 3460              		.thumb
 3461              		.thumb_func
 3462              		.fpu fpv4-sp-d16
 3464              	finish_LEQ:
 3465              	.LFB36:
 621:src/lcd.c     **** 
 622:src/lcd.c     **** void finish_LEQ(void) { // refreshes the LEQ flag only
 3466              		.loc 1 622 23 is_stmt 1 view -0
 3467              		.cfi_startproc
 3468              		@ args = 0, pretend = 0, frame = 0
 3469              		@ frame_needed = 0, uses_anonymous_args = 0
 3470              		@ link register save eliminated.
 623:src/lcd.c     ****   lcd_refresh();
 3471              		.loc 1 623 3 view .LVU729
 3472 0000 004B     		ldr	r3, .L223
 3473 0002 1847     		bx	r3	@ indirect register sibling call
 3474              	.LVL315:
 3475              	.L224:
 3476              		.align	2
 3477              	.L223:
 3478 0004 31020008 		.word	134218289
 3479              		.cfi_endproc
 3480              	.LFE36:
 3482              		.section	.text.do_all_dots,"ax",%progbits
 3483              		.align	1
 3484              		.p2align 2,,3
 3485              		.global	do_all_dots
 3486              		.syntax unified
 3487              		.thumb
 3488              		.thumb_func
 3489              		.fpu fpv4-sp-d16
 3491              	do_all_dots:
 3492              	.LFB37:
 624:src/lcd.c     **** }
 625:src/lcd.c     ****   
 626:src/lcd.c     **** extern void all_menu_dots (void);
 627:src/lcd.c     **** 
 628:src/lcd.c     **** void do_all_dots(void) {
 3493              		.loc 1 628 24 view -0
 3494              		.cfi_startproc
 3495              		@ args = 0, pretend = 0, frame = 0
 3496              		@ frame_needed = 0, uses_anonymous_args = 0
 629:src/lcd.c     ****   for (int i=0; i<TOP_DOTS; i++) {
 3497              		.loc 1 629 3 view .LVU731
 3498              	.LBB129:
 3499              		.loc 1 629 8 view .LVU732
 3500              	.LVL316:
 3501              		.loc 1 629 17 view .LVU733
 3502              	.LBE129:
 628:src/lcd.c     ****   for (int i=0; i<TOP_DOTS; i++) {
 3503              		.loc 1 628 24 is_stmt 0 view .LVU734
 3504 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3505              		.cfi_def_cfa_offset 24
 3506              		.cfi_offset 4, -24
ARM GAS  /tmp/ccYbhZ84.s 			page 84


 3507              		.cfi_offset 5, -20
 3508              		.cfi_offset 6, -16
 3509              		.cfi_offset 7, -12
 3510              		.cfi_offset 8, -8
 3511              		.cfi_offset 14, -4
 3512 0004 1A4C     		ldr	r4, .L238
 3513              	.LBB134:
 3514              	.LBB130:
 3515              	.LBB131:
  43:src/lcd.c     **** }
 3516              		.loc 1 43 11 view .LVU735
 3517 0006 0327     		movs	r7, #3
 3518 0008 04F10108 		add	r8, r4, #1
 3519 000c 04F55376 		add	r6, r4, #844
 3520 0010 6542     		rsbs	r5, r4, #0
 3521              	.LVL317:
 3522              	.L227:
  42:src/lcd.c     ****   dots[n] = 3; // 11;
 3523              		.loc 1 42 3 is_stmt 1 view .LVU736
 3524 0012 2819     		adds	r0, r5, r4
 3525              	.LVL318:
  42:src/lcd.c     ****   dots[n] = 3; // 11;
 3526              		.loc 1 42 3 is_stmt 0 view .LVU737
 3527              	.LBE131:
 3528              	.LBE130:
 630:src/lcd.c     ****     set_dot(i);
 3529              		.loc 1 630 5 is_stmt 1 view .LVU738
 3530              	.LBB133:
 3531              	.LBI130:
  39:src/lcd.c     ****   dots[n] |= 1;
 3532              		.loc 1 39 6 view .LVU739
 3533              	.LBB132:
  40:src/lcd.c     ****   if (dots[n]&2) return;
 3534              		.loc 1 40 3 view .LVU740
  40:src/lcd.c     ****   if (dots[n]&2) return;
 3535              		.loc 1 40 11 is_stmt 0 view .LVU741
 3536 0014 14F8013F 		ldrb	r3, [r4, #1]!	@ zero_extendqisi2
 3537 0018 43F00102 		orr	r2, r3, #1
  41:src/lcd.c     ****   draw_dot(n);
 3538              		.loc 1 41 6 view .LVU742
 3539 001c 9907     		lsls	r1, r3, #30
  40:src/lcd.c     ****   if (dots[n]&2) return;
 3540              		.loc 1 40 11 view .LVU743
 3541 001e 2270     		strb	r2, [r4]
  41:src/lcd.c     ****   draw_dot(n);
 3542              		.loc 1 41 3 is_stmt 1 view .LVU744
  41:src/lcd.c     ****   draw_dot(n);
 3543              		.loc 1 41 6 is_stmt 0 view .LVU745
 3544 0020 02D4     		bmi	.L226
  42:src/lcd.c     ****   dots[n] = 3; // 11;
 3545              		.loc 1 42 3 view .LVU746
 3546 0022 FFF7FEFF 		bl	draw_dot
 3547              	.LVL319:
  43:src/lcd.c     **** }
 3548              		.loc 1 43 3 is_stmt 1 view .LVU747
  43:src/lcd.c     **** }
 3549              		.loc 1 43 11 is_stmt 0 view .LVU748
ARM GAS  /tmp/ccYbhZ84.s 			page 85


 3550 0026 2770     		strb	r7, [r4]
 3551              	.L226:
 3552              	.LVL320:
  43:src/lcd.c     **** }
 3553              		.loc 1 43 11 view .LVU749
 3554              	.LBE132:
 3555              	.LBE133:
 629:src/lcd.c     ****     set_dot(i);
 3556              		.loc 1 629 29 is_stmt 1 view .LVU750
 629:src/lcd.c     ****     set_dot(i);
 3557              		.loc 1 629 17 view .LVU751
 629:src/lcd.c     ****     set_dot(i);
 3558              		.loc 1 629 3 is_stmt 0 view .LVU752
 3559 0028 B442     		cmp	r4, r6
 3560 002a F2D1     		bne	.L227
 3561              	.LBE134:
 631:src/lcd.c     ****   }
 632:src/lcd.c     ****   all_menu_dots();
 3562              		.loc 1 632 3 is_stmt 1 view .LVU753
 3563 002c FFF7FEFF 		bl	all_menu_dots
 3564              	.LVL321:
 633:src/lcd.c     ****   finish_display();
 3565              		.loc 1 633 3 view .LVU754
 3566 0030 FFF7FEFF 		bl	finish_display
 3567              	.LVL322:
 634:src/lcd.c     ****   clr_dot(RCL_annun);
 3568              		.loc 1 634 3 view .LVU755
 3569              	.LBB135:
 3570              	.LBI135:
  45:src/lcd.c     ****   dots[n] &= ~1;
 3571              		.loc 1 45 6 view .LVU756
 3572              	.LBB136:
  46:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 3573              		.loc 1 46 3 view .LVU757
  46:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 3574              		.loc 1 46 11 is_stmt 0 view .LVU758
 3575 0034 98F88A30 		ldrb	r3, [r8, #138]	@ zero_extendqisi2
 3576 0038 23F00102 		bic	r2, r3, #1
 3577 003c 88F88A20 		strb	r2, [r8, #138]
  47:src/lcd.c     ****   draw_dot(n);
 3578              		.loc 1 47 3 is_stmt 1 view .LVU759
  47:src/lcd.c     ****   draw_dot(n);
 3579              		.loc 1 47 6 is_stmt 0 view .LVU760
 3580 0040 9A07     		lsls	r2, r3, #30
 3581 0042 05D5     		bpl	.L228
  48:src/lcd.c     ****   dots[n] = 0; // =0 would work too.
 3582              		.loc 1 48 3 is_stmt 1 view .LVU761
 3583 0044 8A20     		movs	r0, #138
 3584 0046 FFF7FEFF 		bl	draw_dot
 3585              	.LVL323:
  49:src/lcd.c     **** }
 3586              		.loc 1 49 3 view .LVU762
  49:src/lcd.c     **** }
 3587              		.loc 1 49 11 is_stmt 0 view .LVU763
 3588 004a 0023     		movs	r3, #0
 3589 004c 88F88A30 		strb	r3, [r8, #138]
 3590              	.L228:
ARM GAS  /tmp/ccYbhZ84.s 			page 86


 3591              	.LVL324:
  49:src/lcd.c     **** }
 3592              		.loc 1 49 11 view .LVU764
 3593              	.LBE136:
 3594              	.LBE135:
 635:src/lcd.c     ****   clr_dot(LIT_EQ);
 3595              		.loc 1 635 3 is_stmt 1 view .LVU765
 3596              	.LBB137:
 3597              	.LBI137:
  45:src/lcd.c     ****   dots[n] &= ~1;
 3598              		.loc 1 45 6 view .LVU766
 3599              	.LBB138:
  46:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 3600              		.loc 1 46 3 view .LVU767
  46:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 3601              		.loc 1 46 11 is_stmt 0 view .LVU768
 3602 0050 98F88430 		ldrb	r3, [r8, #132]	@ zero_extendqisi2
 3603 0054 23F00102 		bic	r2, r3, #1
  47:src/lcd.c     ****   draw_dot(n);
 3604              		.loc 1 47 6 view .LVU769
 3605 0058 9B07     		lsls	r3, r3, #30
  46:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 3606              		.loc 1 46 11 view .LVU770
 3607 005a 88F88420 		strb	r2, [r8, #132]
  47:src/lcd.c     ****   draw_dot(n);
 3608              		.loc 1 47 3 is_stmt 1 view .LVU771
  47:src/lcd.c     ****   draw_dot(n);
 3609              		.loc 1 47 6 is_stmt 0 view .LVU772
 3610 005e 05D5     		bpl	.L225
  48:src/lcd.c     ****   dots[n] = 0; // =0 would work too.
 3611              		.loc 1 48 3 is_stmt 1 view .LVU773
 3612 0060 8420     		movs	r0, #132
 3613 0062 FFF7FEFF 		bl	draw_dot
 3614              	.LVL325:
  49:src/lcd.c     **** }
 3615              		.loc 1 49 3 view .LVU774
  49:src/lcd.c     **** }
 3616              		.loc 1 49 11 is_stmt 0 view .LVU775
 3617 0066 0023     		movs	r3, #0
 3618 0068 88F88430 		strb	r3, [r8, #132]
 3619              	.LVL326:
 3620              	.L225:
  49:src/lcd.c     **** }
 3621              		.loc 1 49 11 view .LVU776
 3622              	.LBE138:
 3623              	.LBE137:
 636:src/lcd.c     **** }
 3624              		.loc 1 636 1 view .LVU777
 3625 006c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3626              	.LVL327:
 3627              	.L239:
 3628              		.loc 1 636 1 view .LVU778
 3629              		.align	2
 3630              	.L238:
 3631 0070 FFFFFFFF 		.word	.LANCHOR0-1
 3632              		.cfi_endproc
 3633              	.LFE37:
ARM GAS  /tmp/ccYbhZ84.s 			page 87


 3635              		.section	.text.show_progtrace,"ax",%progbits
 3636              		.align	1
 3637              		.p2align 2,,3
 3638              		.global	show_progtrace
 3639              		.syntax unified
 3640              		.thumb
 3641              		.thumb_func
 3642              		.fpu fpv4-sp-d16
 3644              	show_progtrace:
 3645              	.LVL328:
 3646              	.LFB38:
 637:src/lcd.c     **** 
 638:src/lcd.c     **** void show_progtrace(char *buf) {
 3647              		.loc 1 638 32 is_stmt 1 view -0
 3648              		.cfi_startproc
 3649              		@ args = 0, pretend = 0, frame = 0
 3650              		@ frame_needed = 0, uses_anonymous_args = 0
 3651              		@ link register save eliminated.
 639:src/lcd.c     **** }
 3652              		.loc 1 639 1 view .LVU780
 3653 0000 7047     		bx	lr
 3654              		.cfi_endproc
 3655              	.LFE38:
 3657 0002 00BF     		.section	.text.show_stack,"ax",%progbits
 3658              		.align	1
 3659              		.p2align 2,,3
 3660              		.global	show_stack
 3661              		.syntax unified
 3662              		.thumb
 3663              		.thumb_func
 3664              		.fpu fpv4-sp-d16
 3666              	show_stack:
 3667              	.LFB46:
 3668              		.cfi_startproc
 3669              		@ args = 0, pretend = 0, frame = 0
 3670              		@ frame_needed = 0, uses_anonymous_args = 0
 3671              		@ link register save eliminated.
 3672 0000 7047     		bx	lr
 3673              		.cfi_endproc
 3674              	.LFE46:
 3676 0002 00BF     		.section	.text.show_flags,"ax",%progbits
 3677              		.align	1
 3678              		.p2align 2,,3
 3679              		.global	show_flags
 3680              		.syntax unified
 3681              		.thumb
 3682              		.thumb_func
 3683              		.fpu fpv4-sp-d16
 3685              	show_flags:
 3686              	.LFB44:
 3687              		.cfi_startproc
 3688              		@ args = 0, pretend = 0, frame = 0
 3689              		@ frame_needed = 0, uses_anonymous_args = 0
 3690              		@ link register save eliminated.
 3691 0000 7047     		bx	lr
 3692              		.cfi_endproc
 3693              	.LFE44:
ARM GAS  /tmp/ccYbhZ84.s 			page 88


 3695 0002 00BF     		.section	.text.wait_for_display,"ax",%progbits
 3696              		.align	1
 3697              		.p2align 2,,3
 3698              		.global	wait_for_display
 3699              		.syntax unified
 3700              		.thumb
 3701              		.thumb_func
 3702              		.fpu fpv4-sp-d16
 3704              	wait_for_display:
 3705              	.LFB41:
 640:src/lcd.c     **** 
 641:src/lcd.c     **** void show_stack(void) {
 642:src/lcd.c     **** }
 643:src/lcd.c     **** 
 644:src/lcd.c     **** void show_flags(void) {
 645:src/lcd.c     **** }
 646:src/lcd.c     **** 
 647:src/lcd.c     **** void wait_for_display(void)
 648:src/lcd.c     **** {
 3706              		.loc 1 648 1 view -0
 3707              		.cfi_startproc
 3708              		@ args = 0, pretend = 0, frame = 0
 3709              		@ frame_needed = 0, uses_anonymous_args = 0
 3710              		@ link register save eliminated.
 649:src/lcd.c     **** }
 3711              		.loc 1 649 1 view .LVU782
 3712 0000 7047     		bx	lr
 3713              		.cfi_endproc
 3714              	.LFE41:
 3716 0002 00BF     		.section	.bss.dots,"aw",%nobits
 3717              		.align	2
 3718              		.set	.LANCHOR0,. + 0
 3721              	dots:
 3722 0000 00000000 		.space	844
 3722      00000000 
 3722      00000000 
 3722      00000000 
 3722      00000000 
 3723              		.text
 3724              	.Letext0:
 3725              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 3726              		.file 3 "dmcp/ff_ifc.h"
 3727              		.file 4 "dmcp/dmcp.h"
 3728              		.file 5 "src/decNumber/decContext.h"
 3729              		.file 6 "src/decNumber/decNumber.h"
 3730              		.file 7 "src/decNumber/decimal64.h"
 3731              		.file 8 "src/decNumber/decimal128.h"
 3732              		.file 9 "src/xeq.h"
 3733              		.file 10 "src/data.h"
 3734              		.file 11 "src/display.h"
 3735              		.file 12 "src/storage.h"
 3736              		.file 13 "src/pretty.h"
ARM GAS  /tmp/ccYbhZ84.s 			page 89


DEFINED SYMBOLS
                            *ABS*:0000000000000000 lcd.c
     /tmp/ccYbhZ84.s:18     .rodata.draw_BEG.part.0.str1.4:0000000000000000 $d
     /tmp/ccYbhZ84.s:22     .text.draw_BEG.part.0:0000000000000000 $t
     /tmp/ccYbhZ84.s:30     .text.draw_BEG.part.0:0000000000000000 draw_BEG.part.0
     /tmp/ccYbhZ84.s:49     .text.draw_BEG.part.0:000000000000000c $d
     /tmp/ccYbhZ84.s:56     .text.is_dot:0000000000000000 $t
     /tmp/ccYbhZ84.s:64     .text.is_dot:0000000000000000 is_dot
     /tmp/ccYbhZ84.s:84     .text.is_dot:000000000000000c $d
     /tmp/ccYbhZ84.s:89     .text.clear_disp:0000000000000000 $t
     /tmp/ccYbhZ84.s:97     .text.clear_disp:0000000000000000 clear_disp
     /tmp/ccYbhZ84.s:134    .text.clear_disp:0000000000000014 $d
     /tmp/ccYbhZ84.s:140    .text.reset_7_segment:0000000000000000 $t
     /tmp/ccYbhZ84.s:148    .text.reset_7_segment:0000000000000000 reset_7_segment
     /tmp/ccYbhZ84.s:185    .text.reset_7_segment:0000000000000014 $d
     /tmp/ccYbhZ84.s:190    .text.left_side:0000000000000000 $t
     /tmp/ccYbhZ84.s:198    .text.left_side:0000000000000000 left_side
     /tmp/ccYbhZ84.s:282    .text.left_side:0000000000000054 $d
     /tmp/ccYbhZ84.s:287    .text.left_side_top:0000000000000000 $t
     /tmp/ccYbhZ84.s:295    .text.left_side_top:0000000000000000 left_side_top
     /tmp/ccYbhZ84.s:311    .text.left_side_bottom:0000000000000000 $t
     /tmp/ccYbhZ84.s:319    .text.left_side_bottom:0000000000000000 left_side_bottom
     /tmp/ccYbhZ84.s:341    .text.right_side:0000000000000000 $t
     /tmp/ccYbhZ84.s:349    .text.right_side:0000000000000000 right_side
     /tmp/ccYbhZ84.s:433    .text.right_side:000000000000005c $d
     /tmp/ccYbhZ84.s:438    .text.right_side_top:0000000000000000 $t
     /tmp/ccYbhZ84.s:446    .text.right_side_top:0000000000000000 right_side_top
     /tmp/ccYbhZ84.s:462    .text.right_side_bottom:0000000000000000 $t
     /tmp/ccYbhZ84.s:470    .text.right_side_bottom:0000000000000000 right_side_bottom
     /tmp/ccYbhZ84.s:492    .text.top:0000000000000000 $t
     /tmp/ccYbhZ84.s:500    .text.top:0000000000000000 top
     /tmp/ccYbhZ84.s:569    .text.top:0000000000000040 $d
     /tmp/ccYbhZ84.s:574    .text.middle:0000000000000000 $t
     /tmp/ccYbhZ84.s:582    .text.middle:0000000000000000 middle
     /tmp/ccYbhZ84.s:649    .text.middle:0000000000000040 $d
     /tmp/ccYbhZ84.s:654    .text.bottom:0000000000000000 $t
     /tmp/ccYbhZ84.s:662    .text.bottom:0000000000000000 bottom
     /tmp/ccYbhZ84.s:734    .text.bottom:0000000000000048 $d
     /tmp/ccYbhZ84.s:739    .text.decimal:0000000000000000 $t
     /tmp/ccYbhZ84.s:747    .text.decimal:0000000000000000 decimal
     /tmp/ccYbhZ84.s:785    .text.decimal:0000000000000018 $d
     /tmp/ccYbhZ84.s:790    .text.comma:0000000000000000 $t
     /tmp/ccYbhZ84.s:798    .text.comma:0000000000000000 comma
     /tmp/ccYbhZ84.s:854    .text.comma:000000000000002c $d
     /tmp/ccYbhZ84.s:859    .text.exp_left_side:0000000000000000 $t
     /tmp/ccYbhZ84.s:867    .text.exp_left_side:0000000000000000 exp_left_side
     /tmp/ccYbhZ84.s:936    .text.exp_left_side:0000000000000040 $d
     /tmp/ccYbhZ84.s:941    .text.exp_left_side_top:0000000000000000 $t
     /tmp/ccYbhZ84.s:949    .text.exp_left_side_top:0000000000000000 exp_left_side_top
     /tmp/ccYbhZ84.s:968    .text.exp_left_side_bottom:0000000000000000 $t
     /tmp/ccYbhZ84.s:976    .text.exp_left_side_bottom:0000000000000000 exp_left_side_bottom
     /tmp/ccYbhZ84.s:995    .text.exp_right_side:0000000000000000 $t
     /tmp/ccYbhZ84.s:1003   .text.exp_right_side:0000000000000000 exp_right_side
     /tmp/ccYbhZ84.s:1072   .text.exp_right_side:0000000000000044 $d
     /tmp/ccYbhZ84.s:1077   .text.exp_right_side_top:0000000000000000 $t
     /tmp/ccYbhZ84.s:1085   .text.exp_right_side_top:0000000000000000 exp_right_side_top
     /tmp/ccYbhZ84.s:1101   .text.exp_right_side_bottom:0000000000000000 $t
ARM GAS  /tmp/ccYbhZ84.s 			page 90


     /tmp/ccYbhZ84.s:1109   .text.exp_right_side_bottom:0000000000000000 exp_right_side_bottom
     /tmp/ccYbhZ84.s:1131   .text.exp_top:0000000000000000 $t
     /tmp/ccYbhZ84.s:1139   .text.exp_top:0000000000000000 exp_top
     /tmp/ccYbhZ84.s:1200   .text.exp_top:0000000000000034 $d
     /tmp/ccYbhZ84.s:1205   .text.exp_bottom:0000000000000000 $t
     /tmp/ccYbhZ84.s:1213   .text.exp_bottom:0000000000000000 exp_bottom
     /tmp/ccYbhZ84.s:1277   .text.exp_bottom:0000000000000038 $d
     /tmp/ccYbhZ84.s:1282   .text.exp_middle:0000000000000000 $t
     /tmp/ccYbhZ84.s:1290   .text.exp_middle:0000000000000000 exp_middle
     /tmp/ccYbhZ84.s:1357   .text.exp_middle:0000000000000040 $d
     /tmp/ccYbhZ84.s:1362   .rodata.draw_BEG.str1.4:0000000000000000 $d
     /tmp/ccYbhZ84.s:1366   .text.draw_BEG:0000000000000000 $t
     /tmp/ccYbhZ84.s:1374   .text.draw_BEG:0000000000000000 draw_BEG
     /tmp/ccYbhZ84.s:1445   .text.draw_BEG:0000000000000030 $d
     /tmp/ccYbhZ84.s:1453   .rodata.draw_RPN.str1.4:0000000000000000 $d
     /tmp/ccYbhZ84.s:1460   .text.draw_RPN:0000000000000000 $t
     /tmp/ccYbhZ84.s:1468   .text.draw_RPN:0000000000000000 draw_RPN
     /tmp/ccYbhZ84.s:1542   .text.draw_RPN:0000000000000044 $d
     /tmp/ccYbhZ84.s:1552   .rodata.draw_RCL.str1.4:0000000000000000 $d
     /tmp/ccYbhZ84.s:1556   .text.draw_RCL:0000000000000000 $t
     /tmp/ccYbhZ84.s:1564   .text.draw_RCL:0000000000000000 draw_RCL
     /tmp/ccYbhZ84.s:1613   .text.draw_RCL:0000000000000020 $d
     /tmp/ccYbhZ84.s:1621   .rodata.draw_LEQ.str1.4:0000000000000000 $d
     /tmp/ccYbhZ84.s:1628   .text.draw_LEQ:0000000000000000 $t
     /tmp/ccYbhZ84.s:1636   .text.draw_LEQ:0000000000000000 draw_LEQ
     /tmp/ccYbhZ84.s:1704   .text.draw_LEQ:0000000000000044 $d
     /tmp/ccYbhZ84.s:1715   .rodata.draw_dot.str1.4:0000000000000000 $d
     /tmp/ccYbhZ84.s:1728   .text.draw_dot:0000000000000000 $t
     /tmp/ccYbhZ84.s:1736   .text.draw_dot:0000000000000000 draw_dot
     /tmp/ccYbhZ84.s:1795   .text.draw_dot:000000000000003c $d
     /tmp/ccYbhZ84.s:1839   .text.draw_dot:0000000000000076 $d
     /tmp/ccYbhZ84.s:1846   .text.draw_dot:0000000000000082 $t
     /tmp/ccYbhZ84.s:1972   .text.draw_dot:000000000000010c $d
     /tmp/ccYbhZ84.s:1985   .text.draw_dot:000000000000013c $t
     /tmp/ccYbhZ84.s:2467   .text.draw_dot:00000000000002d4 $d
     /tmp/ccYbhZ84.s:2486   .text.draw_dot:0000000000000300 $t
     /tmp/ccYbhZ84.s:2763   .text.draw_dot:00000000000003e8 $d
     /tmp/ccYbhZ84.s:2775   .text.set_dot:0000000000000000 $t
     /tmp/ccYbhZ84.s:2783   .text.set_dot:0000000000000000 set_dot
     /tmp/ccYbhZ84.s:2827   .text.set_dot:0000000000000020 $d
     /tmp/ccYbhZ84.s:2832   .text.clr_dot:0000000000000000 $t
     /tmp/ccYbhZ84.s:2840   .text.clr_dot:0000000000000000 clr_dot
     /tmp/ccYbhZ84.s:2884   .text.clr_dot:0000000000000020 $d
     /tmp/ccYbhZ84.s:2889   .text.reset_disp:0000000000000000 $t
     /tmp/ccYbhZ84.s:2897   .text.reset_disp:0000000000000000 reset_disp
     /tmp/ccYbhZ84.s:3067   .text.reset_disp:0000000000000074 $d
     /tmp/ccYbhZ84.s:3073   .text.finish_7_segment:0000000000000000 $t
     /tmp/ccYbhZ84.s:3081   .text.finish_7_segment:0000000000000000 finish_7_segment
     /tmp/ccYbhZ84.s:3179   .text.finish_7_segment:0000000000000038 $d
     /tmp/ccYbhZ84.s:3184   .text.finish_top_row:0000000000000000 $t
     /tmp/ccYbhZ84.s:3192   .text.finish_top_row:0000000000000000 finish_top_row
     /tmp/ccYbhZ84.s:3291   .text.finish_top_row:000000000000003c $d
     /tmp/ccYbhZ84.s:3296   .rodata.draw_PRT.str1.4:0000000000000000 $d
     /tmp/ccYbhZ84.s:3300   .text.draw_PRT:0000000000000000 $t
     /tmp/ccYbhZ84.s:3308   .text.draw_PRT:0000000000000000 draw_PRT
     /tmp/ccYbhZ84.s:3359   .text.draw_PRT:000000000000002c $d
     /tmp/ccYbhZ84.s:3368   .text.finish_display:0000000000000000 $t
ARM GAS  /tmp/ccYbhZ84.s 			page 91


     /tmp/ccYbhZ84.s:3376   .text.finish_display:0000000000000000 finish_display
     /tmp/ccYbhZ84.s:3410   .text.finish_display:0000000000000018 $d
     /tmp/ccYbhZ84.s:3415   .text.finish_PRT:0000000000000000 $t
     /tmp/ccYbhZ84.s:3423   .text.finish_PRT:0000000000000000 finish_PRT
     /tmp/ccYbhZ84.s:3451   .text.finish_PRT:0000000000000010 $d
     /tmp/ccYbhZ84.s:3456   .text.finish_LEQ:0000000000000000 $t
     /tmp/ccYbhZ84.s:3464   .text.finish_LEQ:0000000000000000 finish_LEQ
     /tmp/ccYbhZ84.s:3478   .text.finish_LEQ:0000000000000004 $d
     /tmp/ccYbhZ84.s:3483   .text.do_all_dots:0000000000000000 $t
     /tmp/ccYbhZ84.s:3491   .text.do_all_dots:0000000000000000 do_all_dots
     /tmp/ccYbhZ84.s:3631   .text.do_all_dots:0000000000000070 $d
     /tmp/ccYbhZ84.s:3636   .text.show_progtrace:0000000000000000 $t
     /tmp/ccYbhZ84.s:3644   .text.show_progtrace:0000000000000000 show_progtrace
     /tmp/ccYbhZ84.s:3658   .text.show_stack:0000000000000000 $t
     /tmp/ccYbhZ84.s:3666   .text.show_stack:0000000000000000 show_stack
     /tmp/ccYbhZ84.s:3677   .text.show_flags:0000000000000000 $t
     /tmp/ccYbhZ84.s:3685   .text.show_flags:0000000000000000 show_flags
     /tmp/ccYbhZ84.s:3696   .text.wait_for_display:0000000000000000 $t
     /tmp/ccYbhZ84.s:3704   .text.wait_for_display:0000000000000000 wait_for_display
     /tmp/ccYbhZ84.s:3717   .bss.dots:0000000000000000 $d
     /tmp/ccYbhZ84.s:3721   .bss.dots:0000000000000000 dots
     /tmp/ccYbhZ84.s:1805   .text.draw_dot:0000000000000045 $d
     /tmp/ccYbhZ84.s:1805   .text.draw_dot:0000000000000046 $t

UNDEFINED SYMBOLS
main_ram
dot
all_menu_dots

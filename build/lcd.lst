ARM GAS  /tmp/ccs5LAM9.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"lcd.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_dot,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.global	set_dot
  21              		.arch armv7e-m
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  25              		.fpu fpv4-sp-d16
  27              	set_dot:
  28              	.LVL0:
  29              	.LFB0:
  30              		.file 1 "src/lcd.c"
   1:src/lcd.c     **** /* This file is part of 34S.
   2:src/lcd.c     ****  * 
   3:src/lcd.c     ****  * 34S is free software: you can redistribute it and/or modify
   4:src/lcd.c     ****  * it under the terms of the GNU General Public License as published by
   5:src/lcd.c     ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/lcd.c     ****  * (at your option) any later version.
   7:src/lcd.c     ****  * 
   8:src/lcd.c     ****  * 34S is distributed in the hope that it will be useful,
   9:src/lcd.c     ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/lcd.c     ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/lcd.c     ****  * GNU General Public License for more details.
  12:src/lcd.c     ****  * 
  13:src/lcd.c     ****  * You should have received a copy of the GNU General Public License
  14:src/lcd.c     ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/lcd.c     ****  */
  16:src/lcd.c     **** 
  17:src/lcd.c     **** #ifdef DM42
  18:src/lcd.c     **** #include "dmcp.h"
  19:src/lcd.c     **** #endif
  20:src/lcd.c     **** 
  21:src/lcd.c     **** #define DM42SAFE
  22:src/lcd.c     **** #include "lcd.h"
  23:src/lcd.c     **** #include "display.h"
  24:src/lcd.c     **** #include "xeq.h"
  25:src/lcd.c     **** 
  26:src/lcd.c     **** #if defined(INCLUDE_C_LOCK) || defined(INFRARED)
  27:src/lcd.c     **** #include "data.h"
  28:src/lcd.c     **** #include "storage.h"
ARM GAS  /tmp/ccs5LAM9.s 			page 2


  29:src/lcd.c     **** #endif
  30:src/lcd.c     **** 
  31:src/lcd.c     **** #undef DM42SAFE
  32:src/lcd.c     **** 
  33:src/lcd.c     **** #include "pretty.h"
  34:src/lcd.c     **** 
  35:src/lcd.c     **** 
  36:src/lcd.c     **** #if defined(USECURSES) || defined(DM42) // want this in DM42
  37:src/lcd.c     **** static unsigned char dots[TOP_DOTS];
  38:src/lcd.c     **** #endif
  39:src/lcd.c     **** 
  40:src/lcd.c     **** #if defined(USECURSES) && !defined(DM42)
  41:src/lcd.c     **** static void dispreg(const char n, int index) {
  42:src/lcd.c     ****   char buf[64];
  43:src/lcd.c     ****         if (is_intmode())
  44:src/lcd.c     ****                 sprintf(buf, "%llx", (unsigned long long int)get_reg_n_int(index));
  45:src/lcd.c     ****         else {
  46:src/lcd.c     **** 		if (is_dblmode())
  47:src/lcd.c     **** 			decimal128ToString(&(get_reg_n(index)->d), buf);
  48:src/lcd.c     **** 		else
  49:src/lcd.c     **** 			decimal64ToString(&(get_reg_n(index)->s), buf);
  50:src/lcd.c     **** 	}
  51:src/lcd.c     ****         PRINTF("%c: %s", n, buf);
  52:src/lcd.c     **** }
  53:src/lcd.c     **** #endif
  54:src/lcd.c     **** 
  55:src/lcd.c     **** #if defined(USECURSES) || defined(DM42) // want this in DM42
  56:src/lcd.c     **** /* Some wrapper routines to set segments of the display */
  57:src/lcd.c     **** void set_dot(int n) {
  31              		.loc 1 57 21 view -0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 0
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  35              		@ link register save eliminated.
  58:src/lcd.c     ****         dots[n] = 1;
  36              		.loc 1 58 9 view .LVU1
  37              		.loc 1 58 17 is_stmt 0 view .LVU2
  38 0000 014B     		ldr	r3, .L3
  39 0002 0122     		movs	r2, #1
  40 0004 1A54     		strb	r2, [r3, r0]
  59:src/lcd.c     **** }
  41              		.loc 1 59 1 view .LVU3
  42 0006 7047     		bx	lr
  43              	.L4:
  44              		.align	2
  45              	.L3:
  46 0008 00000000 		.word	.LANCHOR0
  47              		.cfi_endproc
  48              	.LFE0:
  50              		.section	.text.clr_dot,"ax",%progbits
  51              		.align	1
  52              		.p2align 2,,3
  53              		.global	clr_dot
  54              		.syntax unified
  55              		.thumb
  56              		.thumb_func
  57              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccs5LAM9.s 			page 3


  59              	clr_dot:
  60              	.LVL1:
  61              	.LFB1:
  60:src/lcd.c     **** void clr_dot(int n) {
  62              		.loc 1 60 21 is_stmt 1 view -0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  61:src/lcd.c     ****         dots[n] = 0;
  67              		.loc 1 61 9 view .LVU5
  68              		.loc 1 61 17 is_stmt 0 view .LVU6
  69 0000 014B     		ldr	r3, .L6
  70 0002 0022     		movs	r2, #0
  71 0004 1A54     		strb	r2, [r3, r0]
  62:src/lcd.c     **** }
  72              		.loc 1 62 1 view .LVU7
  73 0006 7047     		bx	lr
  74              	.L7:
  75              		.align	2
  76              	.L6:
  77 0008 00000000 		.word	.LANCHOR0
  78              		.cfi_endproc
  79              	.LFE1:
  81              		.section	.text.is_dot,"ax",%progbits
  82              		.align	1
  83              		.p2align 2,,3
  84              		.global	is_dot
  85              		.syntax unified
  86              		.thumb
  87              		.thumb_func
  88              		.fpu fpv4-sp-d16
  90              	is_dot:
  91              	.LVL2:
  92              	.LFB2:
  63:src/lcd.c     **** int is_dot(int n) {
  93              		.loc 1 63 19 is_stmt 1 view -0
  94              		.cfi_startproc
  95              		@ args = 0, pretend = 0, frame = 0
  96              		@ frame_needed = 0, uses_anonymous_args = 0
  97              		@ link register save eliminated.
  64:src/lcd.c     **** 	return dots[n];
  98              		.loc 1 64 2 view .LVU9
  99              		.loc 1 64 13 is_stmt 0 view .LVU10
 100 0000 014B     		ldr	r3, .L9
  65:src/lcd.c     **** }
 101              		.loc 1 65 1 view .LVU11
 102 0002 185C     		ldrb	r0, [r3, r0]	@ zero_extendqisi2
 103              	.LVL3:
 104              		.loc 1 65 1 view .LVU12
 105 0004 7047     		bx	lr
 106              	.L10:
 107 0006 00BF     		.align	2
 108              	.L9:
 109 0008 00000000 		.word	.LANCHOR0
 110              		.cfi_endproc
 111              	.LFE2:
ARM GAS  /tmp/ccs5LAM9.s 			page 4


 113              		.section	.text.setuptty,"ax",%progbits
 114              		.align	1
 115              		.p2align 2,,3
 116              		.global	setuptty
 117              		.syntax unified
 118              		.thumb
 119              		.thumb_func
 120              		.fpu fpv4-sp-d16
 122              	setuptty:
 123              	.LVL4:
 124              	.LFB3:
  66:src/lcd.c     **** #endif
  67:src/lcd.c     **** 
  68:src/lcd.c     **** int setuptty(int reset) {
 125              		.loc 1 68 25 is_stmt 1 view -0
 126              		.cfi_startproc
 127              		@ args = 0, pretend = 0, frame = 0
 128              		@ frame_needed = 0, uses_anonymous_args = 0
 129              		@ link register save eliminated.
  69:src/lcd.c     **** #ifdef CONSOLE
  70:src/lcd.c     **** #if defined(USECURSES) && !defined(DM42) //don't want this in DM42
  71:src/lcd.c     ****         if (reset)
  72:src/lcd.c     ****                 endwin();
  73:src/lcd.c     ****         else {
  74:src/lcd.c     ****                 initscr();
  75:src/lcd.c     ****                 cbreak();
  76:src/lcd.c     ****                 noecho();
  77:src/lcd.c     ****                 //keypad(stdscr, TRUE);
  78:src/lcd.c     **** 				}
  79:src/lcd.c     **** #endif
  80:src/lcd.c     **** #endif
  81:src/lcd.c     ****         return 0;
 130              		.loc 1 81 9 view .LVU14
  82:src/lcd.c     **** }
 131              		.loc 1 82 1 is_stmt 0 view .LVU15
 132 0000 0020     		movs	r0, #0
 133              	.LVL5:
 134              		.loc 1 82 1 view .LVU16
 135 0002 7047     		bx	lr
 136              		.cfi_endproc
 137              	.LFE3:
 139              		.section	.text.reset_disp,"ax",%progbits
 140              		.align	1
 141              		.p2align 2,,3
 142              		.global	reset_disp
 143              		.syntax unified
 144              		.thumb
 145              		.thumb_func
 146              		.fpu fpv4-sp-d16
 148              	reset_disp:
 149              	.LFB4:
  83:src/lcd.c     **** 
  84:src/lcd.c     **** 
  85:src/lcd.c     **** void reset_disp(void) {
 150              		.loc 1 85 23 is_stmt 1 view -0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccs5LAM9.s 			page 5


 153              		@ frame_needed = 0, uses_anonymous_args = 0
  86:src/lcd.c     **** #ifdef DM42
  87:src/lcd.c     ****   int rcl = is_dot(RCL_annun);
 154              		.loc 1 87 3 view .LVU18
 155              	.LVL6:
 156              	.LBB37:
 157              	.LBI37:
  63:src/lcd.c     **** 	return dots[n];
 158              		.loc 1 63 5 view .LVU19
 159              	.LBB38:
  64:src/lcd.c     **** }
 160              		.loc 1 64 2 view .LVU20
 161              	.LBE38:
 162              	.LBE37:
  85:src/lcd.c     **** #ifdef DM42
 163              		.loc 1 85 23 is_stmt 0 view .LVU21
 164 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 165              		.cfi_def_cfa_offset 32
 166              		.cfi_offset 4, -32
 167              		.cfi_offset 5, -28
 168              		.cfi_offset 6, -24
 169              		.cfi_offset 7, -20
 170              		.cfi_offset 8, -16
 171              		.cfi_offset 9, -12
 172              		.cfi_offset 10, -8
 173              		.cfi_offset 14, -4
 174              	.LBB41:
 175              	.LBB39:
  64:src/lcd.c     **** }
 176              		.loc 1 64 13 view .LVU22
 177 0004 1848     		ldr	r0, .L20
 178              	.LBE39:
 179              	.LBE41:
 180              	.LBB42:
 181              	.LBB43:
 182 0006 6FF08303 		mvn	r3, #131
 183              	.LBE43:
 184              	.LBE42:
 185              	.LBB45:
 186              	.LBB40:
 187 000a 90F88A10 		ldrb	r1, [r0, #138]	@ zero_extendqisi2
 188              	.LVL7:
  64:src/lcd.c     **** }
 189              		.loc 1 64 13 view .LVU23
 190              	.LBE40:
 191              	.LBE45:
  88:src/lcd.c     ****   int bat = is_dot(BATTERY);
 192              		.loc 1 88 3 is_stmt 1 view .LVU24
 193              	.LBB46:
 194              	.LBI46:
  63:src/lcd.c     **** 	return dots[n];
 195              		.loc 1 63 5 view .LVU25
 196              	.LBB47:
  64:src/lcd.c     **** }
 197              		.loc 1 64 2 view .LVU26
  64:src/lcd.c     **** }
 198              		.loc 1 64 13 is_stmt 0 view .LVU27
ARM GAS  /tmp/ccs5LAM9.s 			page 6


 199 000e 90F887A0 		ldrb	r10, [r0, #135]	@ zero_extendqisi2
 200              	.LVL8:
  64:src/lcd.c     **** }
 201              		.loc 1 64 13 view .LVU28
 202              	.LBE47:
 203              	.LBE46:
  89:src/lcd.c     ****   int leq = is_dot(LIT_EQ);
 204              		.loc 1 89 3 is_stmt 1 view .LVU29
 205              	.LBB48:
 206              	.LBI48:
  63:src/lcd.c     **** 	return dots[n];
 207              		.loc 1 63 5 view .LVU30
 208              	.LBB49:
  64:src/lcd.c     **** }
 209              		.loc 1 64 2 view .LVU31
  64:src/lcd.c     **** }
 210              		.loc 1 64 13 is_stmt 0 view .LVU32
 211 0012 90F88490 		ldrb	r9, [r0, #132]	@ zero_extendqisi2
 212              	.LVL9:
  64:src/lcd.c     **** }
 213              		.loc 1 64 13 view .LVU33
 214              	.LBE49:
 215              	.LBE48:
  90:src/lcd.c     ****   int rpn = is_dot(RPN);
 216              		.loc 1 90 3 is_stmt 1 view .LVU34
 217              	.LBB50:
 218              	.LBI42:
  63:src/lcd.c     **** 	return dots[n];
 219              		.loc 1 63 5 view .LVU35
 220              	.LBB44:
  64:src/lcd.c     **** }
 221              		.loc 1 64 2 view .LVU36
  64:src/lcd.c     **** }
 222              		.loc 1 64 13 is_stmt 0 view .LVU37
 223 0016 90F88D80 		ldrb	r8, [r0, #141]	@ zero_extendqisi2
 224              	.LVL10:
  64:src/lcd.c     **** }
 225              		.loc 1 64 13 view .LVU38
 226              	.LBE44:
 227              	.LBE50:
  91:src/lcd.c     ****   int i;
 228              		.loc 1 91 3 is_stmt 1 view .LVU39
  92:src/lcd.c     ****   for (i=0; i<TOP_DOTS; i++)
 229              		.loc 1 92 3 view .LVU40
 230              		.loc 1 92 13 view .LVU41
  93:src/lcd.c     ****     if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 231              		.loc 1 93 40 is_stmt 0 view .LVU42
 232 001a 4925     		movs	r5, #73
 233              	.LBB51:
 234              	.LBB52:
  61:src/lcd.c     **** }
 235              		.loc 1 61 17 view .LVU43
 236 001c 0026     		movs	r6, #0
 237              	.LBE52:
 238              	.LBE51:
  92:src/lcd.c     ****   for (i=0; i<TOP_DOTS; i++)
 239              		.loc 1 92 3 view .LVU44
ARM GAS  /tmp/ccs5LAM9.s 			page 7


 240 001e 40F2C727 		movw	r7, #711
 241 0022 06E0     		b	.L17
 242              	.LVL11:
 243              	.L13:
  94:src/lcd.c     ****       clr_dot(i);
 244              		.loc 1 94 7 is_stmt 1 discriminator 2 view .LVU45
 245              	.LBB59:
 246              	.LBI51:
  60:src/lcd.c     ****         dots[n] = 0;
 247              		.loc 1 60 6 discriminator 2 view .LVU46
 248              	.LBB53:
  61:src/lcd.c     **** }
 249              		.loc 1 61 9 discriminator 2 view .LVU47
 250              	.LBE53:
 251              	.LBE59:
  93:src/lcd.c     ****       clr_dot(i);
 252              		.loc 1 93 40 is_stmt 0 discriminator 2 view .LVU48
 253 0024 E407     		lsls	r4, r4, #31
 254              	.LBB60:
 255              	.LBB54:
  61:src/lcd.c     **** }
 256              		.loc 1 61 17 discriminator 2 view .LVU49
 257 0026 00EB0302 		add	r2, r0, r3
 258              	.LBE54:
 259              	.LBE60:
  93:src/lcd.c     ****       clr_dot(i);
 260              		.loc 1 93 40 discriminator 2 view .LVU50
 261 002a 01D4     		bmi	.L14
 262              	.LBB61:
 263              	.LBB55:
  61:src/lcd.c     **** }
 264              		.loc 1 61 17 view .LVU51
 265 002c 82F88460 		strb	r6, [r2, #132]
 266              	.LVL12:
  61:src/lcd.c     **** }
 267              		.loc 1 61 17 view .LVU52
 268              	.LBE55:
 269              	.LBE61:
  92:src/lcd.c     ****     if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 270              		.loc 1 92 25 is_stmt 1 view .LVU53
  92:src/lcd.c     ****     if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 271              		.loc 1 92 13 view .LVU54
 272              	.L14:
  92:src/lcd.c     ****     if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 273              		.loc 1 92 13 is_stmt 0 view .LVU55
 274 0030 0133     		adds	r3, r3, #1
 275              	.L17:
 276              	.LVL13:
  93:src/lcd.c     ****       clr_dot(i);
 277              		.loc 1 93 5 is_stmt 1 view .LVU56
 278              		.loc 1 94 7 view .LVU57
 279              	.LBB62:
  60:src/lcd.c     ****         dots[n] = 0;
 280              		.loc 1 60 6 view .LVU58
 281              	.LBB56:
  61:src/lcd.c     **** }
 282              		.loc 1 61 9 view .LVU59
ARM GAS  /tmp/ccs5LAM9.s 			page 8


 283              	.LBE56:
 284              	.LBE62:
  93:src/lcd.c     ****       clr_dot(i);
 285              		.loc 1 93 40 is_stmt 0 view .LVU60
 286 0032 062B     		cmp	r3, #6
 287              	.LBB63:
 288              	.LBB57:
  61:src/lcd.c     **** }
 289              		.loc 1 61 17 view .LVU61
 290 0034 00EB0302 		add	r2, r0, r3
 291              	.LBE57:
 292              	.LBE63:
  93:src/lcd.c     ****       clr_dot(i);
 293              		.loc 1 93 40 view .LVU62
 294 0038 25FA03F4 		lsr	r4, r5, r3
 295 003c F2D9     		bls	.L13
  92:src/lcd.c     ****     if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 296              		.loc 1 92 3 view .LVU63
 297 003e BB42     		cmp	r3, r7
 298              	.LBB64:
 299              	.LBB58:
  61:src/lcd.c     **** }
 300              		.loc 1 61 17 view .LVU64
 301 0040 82F88460 		strb	r6, [r2, #132]
 302              	.LVL14:
  61:src/lcd.c     **** }
 303              		.loc 1 61 17 view .LVU65
 304              	.LBE58:
 305              	.LBE64:
  92:src/lcd.c     ****     if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 306              		.loc 1 92 25 is_stmt 1 view .LVU66
  92:src/lcd.c     ****     if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 307              		.loc 1 92 13 view .LVU67
  92:src/lcd.c     ****     if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 308              		.loc 1 92 3 is_stmt 0 view .LVU68
 309 0044 F4D1     		bne	.L14
  95:src/lcd.c     ****   dot(RCL_annun, rcl);
 310              		.loc 1 95 3 is_stmt 1 view .LVU69
 311 0046 8A20     		movs	r0, #138
 312 0048 FFF7FEFF 		bl	dot
 313              	.LVL15:
  96:src/lcd.c     ****   dot(BATTERY, bat);
 314              		.loc 1 96 3 view .LVU70
 315 004c 5146     		mov	r1, r10
 316 004e 8720     		movs	r0, #135
 317 0050 FFF7FEFF 		bl	dot
 318              	.LVL16:
  97:src/lcd.c     ****   dot(LIT_EQ, leq);
 319              		.loc 1 97 3 view .LVU71
 320 0054 4946     		mov	r1, r9
 321 0056 8420     		movs	r0, #132
 322 0058 FFF7FEFF 		bl	dot
 323              	.LVL17:
  98:src/lcd.c     ****   dot(RPN, rpn);
 324              		.loc 1 98 3 view .LVU72
 325 005c 4146     		mov	r1, r8
 326 005e 8D20     		movs	r0, #141
ARM GAS  /tmp/ccs5LAM9.s 			page 9


  99:src/lcd.c     **** #endif
 100:src/lcd.c     **** }
 327              		.loc 1 100 1 is_stmt 0 view .LVU73
 328 0060 BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 329              		.cfi_restore 14
 330              		.cfi_restore 10
 331              		.cfi_restore 9
 332              		.cfi_restore 8
 333              		.cfi_restore 7
 334              		.cfi_restore 6
 335              		.cfi_restore 5
 336              		.cfi_restore 4
 337              		.cfi_def_cfa_offset 0
 338              	.LVL18:
  98:src/lcd.c     ****   dot(RPN, rpn);
 339              		.loc 1 98 3 view .LVU74
 340 0064 FFF7FEBF 		b	dot
 341              	.LVL19:
 342              	.L21:
  98:src/lcd.c     ****   dot(RPN, rpn);
 343              		.loc 1 98 3 view .LVU75
 344              		.align	2
 345              	.L20:
 346 0068 00000000 		.word	.LANCHOR0
 347              		.cfi_endproc
 348              	.LFE4:
 350              		.section	.text.left_side,"ax",%progbits
 351              		.align	1
 352              		.p2align 2,,3
 353              		.global	left_side
 354              		.syntax unified
 355              		.thumb
 356              		.thumb_func
 357              		.fpu fpv4-sp-d16
 359              	left_side:
 360              	.LVL20:
 361              	.LFB5:
 101:src/lcd.c     **** 
 102:src/lcd.c     **** #if defined(DM42)
 103:src/lcd.c     ****   #define setBlackPixel(x, y)                bitblt24(x, 1, y, 1, BLT_OR,   BLT_NONE)
 104:src/lcd.c     ****   #define setWhitePixel(x, y)                bitblt24(x, 1, y, 1, BLT_ANDN, BLT_NONE)
 105:src/lcd.c     **** 
 106:src/lcd.c     **** /* void left_side (int i, int j) { //i - xleft reference; j - ytop reference */
 107:src/lcd.c     **** /*   lcd_fill_rect ( i+2, j+11, 4, 8, 0xff ); */
 108:src/lcd.c     **** /*   lcd_fill_rect ( i+3, j+3, 4, 8, 0xff ); */
 109:src/lcd.c     **** /*   setBlackPixel ( i+4, j+2 ); */
 110:src/lcd.c     **** /*   setBlackPixel ( i+3, j+19 ); */
 111:src/lcd.c     **** /*   setWhitePixel ( i+6, j+3 ); */
 112:src/lcd.c     **** /*   setWhitePixel ( i+5, j+18 ); */
 113:src/lcd.c     **** /* } */
 114:src/lcd.c     **** 
 115:src/lcd.c     **** void left_side (int i, int j) { //i - xleft reference; j - ytop reference
 362              		.loc 1 115 31 is_stmt 1 view -0
 363              		.cfi_startproc
 364              		@ args = 0, pretend = 0, frame = 0
 365              		@ frame_needed = 0, uses_anonymous_args = 0
 116:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
ARM GAS  /tmp/ccs5LAM9.s 			page 10


 366              		.loc 1 116 3 view .LVU77
 115:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 367              		.loc 1 115 31 is_stmt 0 view .LVU78
 368 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 369              		.cfi_def_cfa_offset 24
 370              		.cfi_offset 4, -24
 371              		.cfi_offset 5, -20
 372              		.cfi_offset 6, -16
 373              		.cfi_offset 7, -12
 374              		.cfi_offset 8, -8
 375              		.cfi_offset 14, -4
 376 0004 82B0     		sub	sp, sp, #8
 377              		.cfi_def_cfa_offset 32
 378              		.loc 1 116 3 view .LVU79
 379 0006 FF27     		movs	r7, #255
 115:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 380              		.loc 1 115 31 view .LVU80
 381 0008 0D46     		mov	r5, r1
 382              		.loc 1 116 3 view .LVU81
 383 000a 124E     		ldr	r6, .L24
 384 000c 0097     		str	r7, [sp]
 115:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 385              		.loc 1 115 31 view .LVU82
 386 000e 0446     		mov	r4, r0
 117:src/lcd.c     ****   lcd_fill_rect (i+3, j+2, 1, 18, 0xff);
 387              		.loc 1 117 24 view .LVU83
 388 0010 05F10208 		add	r8, r5, #2
 116:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 389              		.loc 1 116 3 view .LVU84
 390 0014 0B31     		adds	r1, r1, #11
 391              	.LVL21:
 116:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 392              		.loc 1 116 3 view .LVU85
 393 0016 0230     		adds	r0, r0, #2
 394              	.LVL22:
 116:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 395              		.loc 1 116 3 view .LVU86
 396 0018 0923     		movs	r3, #9
 397 001a 0122     		movs	r2, #1
 398 001c B047     		blx	r6
 399              	.LVL23:
 400              		.loc 1 117 3 is_stmt 1 view .LVU87
 401 001e 4146     		mov	r1, r8
 402 0020 E01C     		adds	r0, r4, #3
 403 0022 0097     		str	r7, [sp]
 404 0024 1223     		movs	r3, #18
 405 0026 0122     		movs	r2, #1
 406 0028 B047     		blx	r6
 407              	.LVL24:
 118:src/lcd.c     ****   lcd_fill_rect (i+4, j+2, 1, 17, 0xff);
 408              		.loc 1 118 3 view .LVU88
 409 002a 4146     		mov	r1, r8
 410 002c 201D     		adds	r0, r4, #4
 411 002e 0097     		str	r7, [sp]
 412 0030 1123     		movs	r3, #17
 413 0032 0122     		movs	r2, #1
 414 0034 B047     		blx	r6
ARM GAS  /tmp/ccs5LAM9.s 			page 11


 415              	.LVL25:
 119:src/lcd.c     ****   lcd_fill_rect (i+5, j+3, 1, 15, 0xff);
 416              		.loc 1 119 3 view .LVU89
 417 0036 E91C     		adds	r1, r5, #3
 418 0038 601D     		adds	r0, r4, #5
 419 003a 0097     		str	r7, [sp]
 420 003c 0F23     		movs	r3, #15
 421 003e 0122     		movs	r2, #1
 422 0040 B047     		blx	r6
 423              	.LVL26:
 120:src/lcd.c     ****   lcd_fill_rect (i+6, j+4, 1, 7, 0xff);
 424              		.loc 1 120 3 view .LVU90
 425 0042 291D     		adds	r1, r5, #4
 426 0044 A01D     		adds	r0, r4, #6
 427 0046 0097     		str	r7, [sp]
 428 0048 0723     		movs	r3, #7
 429 004a 0122     		movs	r2, #1
 430 004c B047     		blx	r6
 431              	.LVL27:
 121:src/lcd.c     **** }
 432              		.loc 1 121 1 is_stmt 0 view .LVU91
 433 004e 02B0     		add	sp, sp, #8
 434              		.cfi_def_cfa_offset 24
 435              		@ sp needed
 436 0050 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 437              	.LVL28:
 438              	.L25:
 439              		.loc 1 121 1 view .LVU92
 440              		.align	2
 441              	.L24:
 442 0054 3D020008 		.word	134218301
 443              		.cfi_endproc
 444              	.LFE5:
 446              		.section	.text.left_side_top,"ax",%progbits
 447              		.align	1
 448              		.p2align 2,,3
 449              		.global	left_side_top
 450              		.syntax unified
 451              		.thumb
 452              		.thumb_func
 453              		.fpu fpv4-sp-d16
 455              	left_side_top:
 456              	.LVL29:
 457              	.LFB6:
 122:src/lcd.c     **** void left_side_top (int i, int j) {
 458              		.loc 1 122 35 is_stmt 1 view -0
 459              		.cfi_startproc
 460              		@ args = 0, pretend = 0, frame = 0
 461              		@ frame_needed = 0, uses_anonymous_args = 0
 462              		@ link register save eliminated.
 123:src/lcd.c     ****   left_side(i, j);
 463              		.loc 1 123 3 view .LVU94
 464 0000 FFF7FEBF 		b	left_side
 465              	.LVL30:
 466              		.loc 1 123 3 is_stmt 0 view .LVU95
 467              		.cfi_endproc
 468              	.LFE6:
ARM GAS  /tmp/ccs5LAM9.s 			page 12


 470              		.section	.text.left_side_bottom,"ax",%progbits
 471              		.align	1
 472              		.p2align 2,,3
 473              		.global	left_side_bottom
 474              		.syntax unified
 475              		.thumb
 476              		.thumb_func
 477              		.fpu fpv4-sp-d16
 479              	left_side_bottom:
 480              	.LVL31:
 481              	.LFB7:
 124:src/lcd.c     **** }
 125:src/lcd.c     **** void left_side_bottom (int i, int j) {
 482              		.loc 1 125 38 is_stmt 1 view -0
 483              		.cfi_startproc
 484              		@ args = 0, pretend = 0, frame = 0
 485              		@ frame_needed = 0, uses_anonymous_args = 0
 486              		@ link register save eliminated.
 126:src/lcd.c     ****   left_side(i-2, j+19);
 487              		.loc 1 126 3 view .LVU97
 488 0000 0238     		subs	r0, r0, #2
 489              	.LVL32:
 490              		.loc 1 126 3 is_stmt 0 view .LVU98
 491 0002 1331     		adds	r1, r1, #19
 492              	.LVL33:
 493              		.loc 1 126 3 view .LVU99
 494 0004 FFF7FEBF 		b	left_side
 495              	.LVL34:
 496              		.loc 1 126 3 view .LVU100
 497              		.cfi_endproc
 498              	.LFE7:
 500              		.section	.text.right_side,"ax",%progbits
 501              		.align	1
 502              		.p2align 2,,3
 503              		.global	right_side
 504              		.syntax unified
 505              		.thumb
 506              		.thumb_func
 507              		.fpu fpv4-sp-d16
 509              	right_side:
 510              	.LVL35:
 511              	.LFB8:
 127:src/lcd.c     **** }
 128:src/lcd.c     **** void right_side (int i, int j) {
 512              		.loc 1 128 32 is_stmt 1 view -0
 513              		.cfi_startproc
 514              		@ args = 0, pretend = 0, frame = 0
 515              		@ frame_needed = 0, uses_anonymous_args = 0
 129:src/lcd.c     ****   lcd_fill_rect (i+16, j+11, 1, 7, 0xff);
 516              		.loc 1 129 3 view .LVU102
 128:src/lcd.c     ****   lcd_fill_rect (i+16, j+11, 1, 7, 0xff);
 517              		.loc 1 128 32 is_stmt 0 view .LVU103
 518 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 519              		.cfi_def_cfa_offset 24
 520              		.cfi_offset 4, -24
 521              		.cfi_offset 5, -20
 522              		.cfi_offset 6, -16
ARM GAS  /tmp/ccs5LAM9.s 			page 13


 523              		.cfi_offset 7, -12
 524              		.cfi_offset 8, -8
 525              		.cfi_offset 14, -4
 526 0004 82B0     		sub	sp, sp, #8
 527              		.cfi_def_cfa_offset 32
 528              		.loc 1 129 3 view .LVU104
 529 0006 FF27     		movs	r7, #255
 530 0008 144E     		ldr	r6, .L30
 531 000a 0097     		str	r7, [sp]
 128:src/lcd.c     ****   lcd_fill_rect (i+16, j+11, 1, 7, 0xff);
 532              		.loc 1 128 32 view .LVU105
 533 000c 0446     		mov	r4, r0
 534 000e 0D46     		mov	r5, r1
 535              		.loc 1 129 3 view .LVU106
 536 0010 1030     		adds	r0, r0, #16
 537              	.LVL36:
 538              		.loc 1 129 3 view .LVU107
 539 0012 0B31     		adds	r1, r1, #11
 540              	.LVL37:
 541              		.loc 1 129 3 view .LVU108
 542 0014 0723     		movs	r3, #7
 543 0016 0122     		movs	r2, #1
 544 0018 B047     		blx	r6
 545              	.LVL38:
 130:src/lcd.c     ****   lcd_fill_rect (i+17, j+4, 1, 15, 0xff);
 546              		.loc 1 130 3 is_stmt 1 view .LVU109
 547 001a 291D     		adds	r1, r5, #4
 548 001c 04F11100 		add	r0, r4, #17
 549 0020 0097     		str	r7, [sp]
 550 0022 0F23     		movs	r3, #15
 551 0024 0122     		movs	r2, #1
 552 0026 B047     		blx	r6
 553              	.LVL39:
 131:src/lcd.c     ****   lcd_fill_rect (i+18, j+3, 1, 17, 0xff);
 554              		.loc 1 131 3 view .LVU110
 132:src/lcd.c     ****   lcd_fill_rect (i+19, j+2, 1, 18, 0xff);
 555              		.loc 1 132 25 is_stmt 0 view .LVU111
 556 0028 05F10208 		add	r8, r5, #2
 131:src/lcd.c     ****   lcd_fill_rect (i+18, j+3, 1, 17, 0xff);
 557              		.loc 1 131 3 view .LVU112
 558 002c E91C     		adds	r1, r5, #3
 559 002e 04F11200 		add	r0, r4, #18
 560 0032 0097     		str	r7, [sp]
 561 0034 1123     		movs	r3, #17
 562 0036 0122     		movs	r2, #1
 563 0038 B047     		blx	r6
 564              	.LVL40:
 565              		.loc 1 132 3 is_stmt 1 view .LVU113
 566 003a 4146     		mov	r1, r8
 567 003c 04F11300 		add	r0, r4, #19
 568 0040 0097     		str	r7, [sp]
 569 0042 1223     		movs	r3, #18
 570 0044 0122     		movs	r2, #1
 571 0046 B047     		blx	r6
 572              	.LVL41:
 133:src/lcd.c     ****   lcd_fill_rect (i+20, j+2, 1, 9, 0xff);
 573              		.loc 1 133 3 view .LVU114
ARM GAS  /tmp/ccs5LAM9.s 			page 14


 574 0048 4146     		mov	r1, r8
 575 004a 04F11400 		add	r0, r4, #20
 576 004e 0097     		str	r7, [sp]
 577 0050 0923     		movs	r3, #9
 578 0052 0122     		movs	r2, #1
 579 0054 B047     		blx	r6
 580              	.LVL42:
 134:src/lcd.c     **** }
 581              		.loc 1 134 1 is_stmt 0 view .LVU115
 582 0056 02B0     		add	sp, sp, #8
 583              		.cfi_def_cfa_offset 24
 584              		@ sp needed
 585 0058 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 586              	.LVL43:
 587              	.L31:
 588              		.loc 1 134 1 view .LVU116
 589              		.align	2
 590              	.L30:
 591 005c 3D020008 		.word	134218301
 592              		.cfi_endproc
 593              	.LFE8:
 595              		.section	.text.right_side_top,"ax",%progbits
 596              		.align	1
 597              		.p2align 2,,3
 598              		.global	right_side_top
 599              		.syntax unified
 600              		.thumb
 601              		.thumb_func
 602              		.fpu fpv4-sp-d16
 604              	right_side_top:
 605              	.LVL44:
 606              	.LFB9:
 135:src/lcd.c     **** void right_side_top (int i, int j) {
 607              		.loc 1 135 36 is_stmt 1 view -0
 608              		.cfi_startproc
 609              		@ args = 0, pretend = 0, frame = 0
 610              		@ frame_needed = 0, uses_anonymous_args = 0
 611              		@ link register save eliminated.
 136:src/lcd.c     ****   right_side(i, j);
 612              		.loc 1 136 3 view .LVU118
 613 0000 FFF7FEBF 		b	right_side
 614              	.LVL45:
 615              		.loc 1 136 3 is_stmt 0 view .LVU119
 616              		.cfi_endproc
 617              	.LFE9:
 619              		.section	.text.right_side_bottom,"ax",%progbits
 620              		.align	1
 621              		.p2align 2,,3
 622              		.global	right_side_bottom
 623              		.syntax unified
 624              		.thumb
 625              		.thumb_func
 626              		.fpu fpv4-sp-d16
 628              	right_side_bottom:
 629              	.LVL46:
 630              	.LFB10:
 137:src/lcd.c     **** }
ARM GAS  /tmp/ccs5LAM9.s 			page 15


 138:src/lcd.c     **** void right_side_bottom (int i, int j) {
 631              		.loc 1 138 39 is_stmt 1 view -0
 632              		.cfi_startproc
 633              		@ args = 0, pretend = 0, frame = 0
 634              		@ frame_needed = 0, uses_anonymous_args = 0
 635              		@ link register save eliminated.
 139:src/lcd.c     ****   right_side(i-2, j+19);
 636              		.loc 1 139 3 view .LVU121
 637 0000 0238     		subs	r0, r0, #2
 638              	.LVL47:
 639              		.loc 1 139 3 is_stmt 0 view .LVU122
 640 0002 1331     		adds	r1, r1, #19
 641              	.LVL48:
 642              		.loc 1 139 3 view .LVU123
 643 0004 FFF7FEBF 		b	right_side
 644              	.LVL49:
 645              		.loc 1 139 3 view .LVU124
 646              		.cfi_endproc
 647              	.LFE10:
 649              		.section	.text.top,"ax",%progbits
 650              		.align	1
 651              		.p2align 2,,3
 652              		.global	top
 653              		.syntax unified
 654              		.thumb
 655              		.thumb_func
 656              		.fpu fpv4-sp-d16
 658              	top:
 659              	.LVL50:
 660              	.LFB11:
 140:src/lcd.c     **** }
 141:src/lcd.c     **** void top (int i, int j) {
 661              		.loc 1 141 25 is_stmt 1 view -0
 662              		.cfi_startproc
 663              		@ args = 0, pretend = 0, frame = 0
 664              		@ frame_needed = 0, uses_anonymous_args = 0
 142:src/lcd.c     ****   lcd_fill_rect ( i+5, j, 14, 1, 0xff );
 665              		.loc 1 142 3 view .LVU126
 141:src/lcd.c     ****   lcd_fill_rect ( i+5, j, 14, 1, 0xff );
 666              		.loc 1 141 25 is_stmt 0 view .LVU127
 667 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 668              		.cfi_def_cfa_offset 20
 669              		.cfi_offset 4, -20
 670              		.cfi_offset 5, -16
 671              		.cfi_offset 6, -12
 672              		.cfi_offset 7, -8
 673              		.cfi_offset 14, -4
 674 0002 83B0     		sub	sp, sp, #12
 675              		.cfi_def_cfa_offset 32
 676              		.loc 1 142 3 view .LVU128
 677 0004 FF27     		movs	r7, #255
 678 0006 0E4E     		ldr	r6, .L36
 679 0008 0097     		str	r7, [sp]
 141:src/lcd.c     ****   lcd_fill_rect ( i+5, j, 14, 1, 0xff );
 680              		.loc 1 141 25 view .LVU129
 681 000a 0446     		mov	r4, r0
 682 000c 0D46     		mov	r5, r1
ARM GAS  /tmp/ccs5LAM9.s 			page 16


 683              		.loc 1 142 3 view .LVU130
 684 000e 0530     		adds	r0, r0, #5
 685              	.LVL51:
 686              		.loc 1 142 3 view .LVU131
 687 0010 0123     		movs	r3, #1
 688 0012 0E22     		movs	r2, #14
 689 0014 B047     		blx	r6
 690              	.LVL52:
 143:src/lcd.c     ****   lcd_fill_rect ( i+4, j+1, 16, 1, 0xff );
 691              		.loc 1 143 3 is_stmt 1 view .LVU132
 692 0016 691C     		adds	r1, r5, #1
 693 0018 201D     		adds	r0, r4, #4
 694 001a 0097     		str	r7, [sp]
 695 001c 0123     		movs	r3, #1
 696 001e 1022     		movs	r2, #16
 697 0020 B047     		blx	r6
 698              	.LVL53:
 144:src/lcd.c     ****   lcd_fill_rect ( i+6, j+2, 12, 1, 0xff );
 699              		.loc 1 144 3 view .LVU133
 700 0022 A91C     		adds	r1, r5, #2
 701 0024 A01D     		adds	r0, r4, #6
 702 0026 0097     		str	r7, [sp]
 703 0028 0123     		movs	r3, #1
 704 002a 0C22     		movs	r2, #12
 705 002c B047     		blx	r6
 706              	.LVL54:
 145:src/lcd.c     ****   lcd_fill_rect ( i+7, j+3, 10, 1, 0xff );
 707              		.loc 1 145 3 view .LVU134
 708 002e E91C     		adds	r1, r5, #3
 709 0030 E01D     		adds	r0, r4, #7
 710 0032 0097     		str	r7, [sp]
 711 0034 0123     		movs	r3, #1
 712 0036 0A22     		movs	r2, #10
 713 0038 B047     		blx	r6
 714              	.LVL55:
 146:src/lcd.c     **** }
 715              		.loc 1 146 1 is_stmt 0 view .LVU135
 716 003a 03B0     		add	sp, sp, #12
 717              		.cfi_def_cfa_offset 20
 718              		@ sp needed
 719 003c F0BD     		pop	{r4, r5, r6, r7, pc}
 720              	.LVL56:
 721              	.L37:
 722              		.loc 1 146 1 view .LVU136
 723 003e 00BF     		.align	2
 724              	.L36:
 725 0040 3D020008 		.word	134218301
 726              		.cfi_endproc
 727              	.LFE11:
 729              		.section	.text.middle,"ax",%progbits
 730              		.align	1
 731              		.p2align 2,,3
 732              		.global	middle
 733              		.syntax unified
 734              		.thumb
 735              		.thumb_func
 736              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccs5LAM9.s 			page 17


 738              	middle:
 739              	.LVL57:
 740              	.LFB12:
 147:src/lcd.c     **** void middle (int i, int j) {
 741              		.loc 1 147 28 is_stmt 1 view -0
 742              		.cfi_startproc
 743              		@ args = 0, pretend = 0, frame = 0
 744              		@ frame_needed = 0, uses_anonymous_args = 0
 148:src/lcd.c     ****   lcd_fill_rect ( i+5, j+19, 11, 3, 0xff );
 745              		.loc 1 148 3 view .LVU138
 147:src/lcd.c     **** void middle (int i, int j) {
 746              		.loc 1 147 28 is_stmt 0 view .LVU139
 747 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 748              		.cfi_def_cfa_offset 20
 749              		.cfi_offset 4, -20
 750              		.cfi_offset 5, -16
 751              		.cfi_offset 6, -12
 752              		.cfi_offset 7, -8
 753              		.cfi_offset 14, -4
 754 0002 83B0     		sub	sp, sp, #12
 755              		.cfi_def_cfa_offset 32
 756              		.loc 1 148 3 view .LVU140
 757 0004 FF23     		movs	r3, #255
 147:src/lcd.c     **** void middle (int i, int j) {
 758              		.loc 1 147 28 view .LVU141
 759 0006 0546     		mov	r5, r0
 760              		.loc 1 148 3 view .LVU142
 761 0008 0093     		str	r3, [sp]
 762 000a 0D4E     		ldr	r6, .L40
 149:src/lcd.c     ****   setBlackPixel ( i+4, j+20 );
 763              		.loc 1 149 3 view .LVU143
 764 000c 0D4F     		ldr	r7, .L40+4
 147:src/lcd.c     **** void middle (int i, int j) {
 765              		.loc 1 147 28 view .LVU144
 766 000e 0C46     		mov	r4, r1
 148:src/lcd.c     ****   lcd_fill_rect ( i+5, j+19, 11, 3, 0xff );
 767              		.loc 1 148 3 view .LVU145
 768 0010 0530     		adds	r0, r0, #5
 769              	.LVL58:
 148:src/lcd.c     ****   lcd_fill_rect ( i+5, j+19, 11, 3, 0xff );
 770              		.loc 1 148 3 view .LVU146
 771 0012 1331     		adds	r1, r1, #19
 772              	.LVL59:
 148:src/lcd.c     ****   lcd_fill_rect ( i+5, j+19, 11, 3, 0xff );
 773              		.loc 1 148 3 view .LVU147
 774 0014 0323     		movs	r3, #3
 775 0016 0B22     		movs	r2, #11
 776 0018 B047     		blx	r6
 777              	.LVL60:
 778              		.loc 1 149 3 is_stmt 1 view .LVU148
 779 001a 1434     		adds	r4, r4, #20
 780              	.LVL61:
 781              		.loc 1 149 3 is_stmt 0 view .LVU149
 782 001c 0026     		movs	r6, #0
 783 001e 0123     		movs	r3, #1
 784 0020 2246     		mov	r2, r4
 785 0022 281D     		adds	r0, r5, #4
ARM GAS  /tmp/ccs5LAM9.s 			page 18


 786 0024 1946     		mov	r1, r3
 787 0026 CDE90066 		strd	r6, r6, [sp]
 788 002a B847     		blx	r7
 789              	.LVL62:
 150:src/lcd.c     ****   setBlackPixel ( i+16, j+20 );
 790              		.loc 1 150 3 is_stmt 1 view .LVU150
 791 002c 0123     		movs	r3, #1
 792 002e CDE90066 		strd	r6, r6, [sp]
 793 0032 2246     		mov	r2, r4
 794 0034 05F11000 		add	r0, r5, #16
 795 0038 1946     		mov	r1, r3
 796 003a B847     		blx	r7
 797              	.LVL63:
 151:src/lcd.c     **** }
 798              		.loc 1 151 1 is_stmt 0 view .LVU151
 799 003c 03B0     		add	sp, sp, #12
 800              		.cfi_def_cfa_offset 20
 801              		@ sp needed
 802 003e F0BD     		pop	{r4, r5, r6, r7, pc}
 803              	.LVL64:
 804              	.L41:
 805              		.loc 1 151 1 view .LVU152
 806              		.align	2
 807              	.L40:
 808 0040 3D020008 		.word	134218301
 809 0044 25020008 		.word	134218277
 810              		.cfi_endproc
 811              	.LFE12:
 813              		.section	.text.bottom,"ax",%progbits
 814              		.align	1
 815              		.p2align 2,,3
 816              		.global	bottom
 817              		.syntax unified
 818              		.thumb
 819              		.thumb_func
 820              		.fpu fpv4-sp-d16
 822              	bottom:
 823              	.LVL65:
 824              	.LFB13:
 152:src/lcd.c     **** void bottom (int i, int j) {
 825              		.loc 1 152 28 is_stmt 1 view -0
 826              		.cfi_startproc
 827              		@ args = 0, pretend = 0, frame = 0
 828              		@ frame_needed = 0, uses_anonymous_args = 0
 153:src/lcd.c     ****   lcd_fill_rect ( i+2, j+40, 14, 1, 0xff );
 829              		.loc 1 153 3 view .LVU154
 152:src/lcd.c     **** void bottom (int i, int j) {
 830              		.loc 1 152 28 is_stmt 0 view .LVU155
 831 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 832              		.cfi_def_cfa_offset 20
 833              		.cfi_offset 4, -20
 834              		.cfi_offset 5, -16
 835              		.cfi_offset 6, -12
 836              		.cfi_offset 7, -8
 837              		.cfi_offset 14, -4
 838 0002 83B0     		sub	sp, sp, #12
 839              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/ccs5LAM9.s 			page 19


 840              		.loc 1 153 3 view .LVU156
 841 0004 FF27     		movs	r7, #255
 842 0006 104E     		ldr	r6, .L44
 843 0008 0097     		str	r7, [sp]
 152:src/lcd.c     **** void bottom (int i, int j) {
 844              		.loc 1 152 28 view .LVU157
 845 000a 0446     		mov	r4, r0
 846 000c 0D46     		mov	r5, r1
 847              		.loc 1 153 3 view .LVU158
 848 000e 0230     		adds	r0, r0, #2
 849              	.LVL66:
 850              		.loc 1 153 3 view .LVU159
 851 0010 2831     		adds	r1, r1, #40
 852              	.LVL67:
 853              		.loc 1 153 3 view .LVU160
 854 0012 0123     		movs	r3, #1
 855 0014 0E22     		movs	r2, #14
 856 0016 B047     		blx	r6
 857              	.LVL68:
 154:src/lcd.c     ****   lcd_fill_rect ( i+1, j+39, 16, 1, 0xff );
 858              		.loc 1 154 3 is_stmt 1 view .LVU161
 859 0018 05F12701 		add	r1, r5, #39
 860 001c 601C     		adds	r0, r4, #1
 861 001e 0097     		str	r7, [sp]
 862 0020 0123     		movs	r3, #1
 863 0022 1022     		movs	r2, #16
 864 0024 B047     		blx	r6
 865              	.LVL69:
 155:src/lcd.c     ****   lcd_fill_rect ( i+3, j+38, 12, 1, 0xff );
 866              		.loc 1 155 3 view .LVU162
 867 0026 05F12601 		add	r1, r5, #38
 868 002a E01C     		adds	r0, r4, #3
 869 002c 0097     		str	r7, [sp]
 870 002e 0123     		movs	r3, #1
 871 0030 0C22     		movs	r2, #12
 872 0032 B047     		blx	r6
 873              	.LVL70:
 156:src/lcd.c     ****   lcd_fill_rect ( i+4, j+37, 10, 1, 0xff );
 874              		.loc 1 156 3 view .LVU163
 875 0034 05F12501 		add	r1, r5, #37
 876 0038 201D     		adds	r0, r4, #4
 877 003a 0097     		str	r7, [sp]
 878 003c 0123     		movs	r3, #1
 879 003e 0A22     		movs	r2, #10
 880 0040 B047     		blx	r6
 881              	.LVL71:
 157:src/lcd.c     **** }
 882              		.loc 1 157 1 is_stmt 0 view .LVU164
 883 0042 03B0     		add	sp, sp, #12
 884              		.cfi_def_cfa_offset 20
 885              		@ sp needed
 886 0044 F0BD     		pop	{r4, r5, r6, r7, pc}
 887              	.LVL72:
 888              	.L45:
 889              		.loc 1 157 1 view .LVU165
 890 0046 00BF     		.align	2
 891              	.L44:
ARM GAS  /tmp/ccs5LAM9.s 			page 20


 892 0048 3D020008 		.word	134218301
 893              		.cfi_endproc
 894              	.LFE13:
 896              		.section	.text.decimal,"ax",%progbits
 897              		.align	1
 898              		.p2align 2,,3
 899              		.global	decimal
 900              		.syntax unified
 901              		.thumb
 902              		.thumb_func
 903              		.fpu fpv4-sp-d16
 905              	decimal:
 906              	.LVL73:
 907              	.LFB14:
 158:src/lcd.c     **** void decimal (int i, int j) {
 908              		.loc 1 158 29 is_stmt 1 view -0
 909              		.cfi_startproc
 910              		@ args = 0, pretend = 0, frame = 0
 911              		@ frame_needed = 0, uses_anonymous_args = 0
 159:src/lcd.c     ****   lcd_fill_rect (i+19, j+40, 5, 5, 0xff);
 912              		.loc 1 159 3 view .LVU167
 158:src/lcd.c     **** void decimal (int i, int j) {
 913              		.loc 1 158 29 is_stmt 0 view .LVU168
 914 0000 10B5     		push	{r4, lr}
 915              		.cfi_def_cfa_offset 8
 916              		.cfi_offset 4, -8
 917              		.cfi_offset 14, -4
 918 0002 82B0     		sub	sp, sp, #8
 919              		.cfi_def_cfa_offset 16
 920              		.loc 1 159 3 view .LVU169
 921 0004 0523     		movs	r3, #5
 922 0006 FF22     		movs	r2, #255
 923 0008 0092     		str	r2, [sp]
 924 000a 034C     		ldr	r4, .L48
 925 000c 1330     		adds	r0, r0, #19
 926              	.LVL74:
 927              		.loc 1 159 3 view .LVU170
 928 000e 2831     		adds	r1, r1, #40
 929              	.LVL75:
 930              		.loc 1 159 3 view .LVU171
 931 0010 1A46     		mov	r2, r3
 932 0012 A047     		blx	r4
 933              	.LVL76:
 160:src/lcd.c     **** }
 934              		.loc 1 160 1 view .LVU172
 935 0014 02B0     		add	sp, sp, #8
 936              		.cfi_def_cfa_offset 8
 937              		@ sp needed
 938 0016 10BD     		pop	{r4, pc}
 939              	.L49:
 940              		.align	2
 941              	.L48:
 942 0018 3D020008 		.word	134218301
 943              		.cfi_endproc
 944              	.LFE14:
 946              		.section	.text.comma,"ax",%progbits
 947              		.align	1
ARM GAS  /tmp/ccs5LAM9.s 			page 21


 948              		.p2align 2,,3
 949              		.global	comma
 950              		.syntax unified
 951              		.thumb
 952              		.thumb_func
 953              		.fpu fpv4-sp-d16
 955              	comma:
 956              	.LVL77:
 957              	.LFB15:
 161:src/lcd.c     **** void comma (int i, int j) {
 958              		.loc 1 161 27 is_stmt 1 view -0
 959              		.cfi_startproc
 960              		@ args = 0, pretend = 0, frame = 0
 961              		@ frame_needed = 0, uses_anonymous_args = 0
 162:src/lcd.c     ****   lcd_fill_rect (i+21, j+45, 3, 3, 0xff);
 962              		.loc 1 162 3 view .LVU174
 161:src/lcd.c     **** void comma (int i, int j) {
 963              		.loc 1 161 27 is_stmt 0 view .LVU175
 964 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 965              		.cfi_def_cfa_offset 20
 966              		.cfi_offset 4, -20
 967              		.cfi_offset 5, -16
 968              		.cfi_offset 6, -12
 969              		.cfi_offset 7, -8
 970              		.cfi_offset 14, -4
 971 0002 83B0     		sub	sp, sp, #12
 972              		.cfi_def_cfa_offset 32
 973              		.loc 1 162 3 view .LVU176
 974 0004 FF27     		movs	r7, #255
 975 0006 0323     		movs	r3, #3
 976 0008 084E     		ldr	r6, .L52
 977 000a 0097     		str	r7, [sp]
 161:src/lcd.c     **** void comma (int i, int j) {
 978              		.loc 1 161 27 view .LVU177
 979 000c 0446     		mov	r4, r0
 980 000e 0D46     		mov	r5, r1
 981              		.loc 1 162 3 view .LVU178
 982 0010 1A46     		mov	r2, r3
 983 0012 2D31     		adds	r1, r1, #45
 984              	.LVL78:
 985              		.loc 1 162 3 view .LVU179
 986 0014 1530     		adds	r0, r0, #21
 987              	.LVL79:
 988              		.loc 1 162 3 view .LVU180
 989 0016 B047     		blx	r6
 990              	.LVL80:
 163:src/lcd.c     ****   lcd_fill_rect (i+19, j+48, 3, 3, 0xff);
 991              		.loc 1 163 3 is_stmt 1 view .LVU181
 992 0018 0323     		movs	r3, #3
 993 001a 05F13001 		add	r1, r5, #48
 994 001e 04F11300 		add	r0, r4, #19
 995 0022 0097     		str	r7, [sp]
 996 0024 1A46     		mov	r2, r3
 997 0026 B047     		blx	r6
 998              	.LVL81:
 164:src/lcd.c     **** }
 999              		.loc 1 164 1 is_stmt 0 view .LVU182
ARM GAS  /tmp/ccs5LAM9.s 			page 22


 1000 0028 03B0     		add	sp, sp, #12
 1001              		.cfi_def_cfa_offset 20
 1002              		@ sp needed
 1003 002a F0BD     		pop	{r4, r5, r6, r7, pc}
 1004              	.LVL82:
 1005              	.L53:
 1006              		.loc 1 164 1 view .LVU183
 1007              		.align	2
 1008              	.L52:
 1009 002c 3D020008 		.word	134218301
 1010              		.cfi_endproc
 1011              	.LFE15:
 1013              		.section	.text.exp_left_side,"ax",%progbits
 1014              		.align	1
 1015              		.p2align 2,,3
 1016              		.global	exp_left_side
 1017              		.syntax unified
 1018              		.thumb
 1019              		.thumb_func
 1020              		.fpu fpv4-sp-d16
 1022              	exp_left_side:
 1023              	.LVL83:
 1024              	.LFB16:
 165:src/lcd.c     **** 
 166:src/lcd.c     **** void exp_left_side (int i, int j) {
 1025              		.loc 1 166 35 is_stmt 1 view -0
 1026              		.cfi_startproc
 1027              		@ args = 0, pretend = 0, frame = 0
 1028              		@ frame_needed = 0, uses_anonymous_args = 0
 167:src/lcd.c     ****   lcd_fill_rect (i, j+6, 1, 6, 0xff );
 1029              		.loc 1 167 3 view .LVU185
 166:src/lcd.c     ****   lcd_fill_rect (i, j+6, 1, 6, 0xff );
 1030              		.loc 1 166 35 is_stmt 0 view .LVU186
 1031 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1032              		.cfi_def_cfa_offset 20
 1033              		.cfi_offset 4, -20
 1034              		.cfi_offset 5, -16
 1035              		.cfi_offset 6, -12
 1036              		.cfi_offset 7, -8
 1037              		.cfi_offset 14, -4
 1038 0002 83B0     		sub	sp, sp, #12
 1039              		.cfi_def_cfa_offset 32
 1040              		.loc 1 167 3 view .LVU187
 1041 0004 FF27     		movs	r7, #255
 1042 0006 0E4E     		ldr	r6, .L56
 1043 0008 0097     		str	r7, [sp]
 166:src/lcd.c     ****   lcd_fill_rect (i, j+6, 1, 6, 0xff );
 1044              		.loc 1 166 35 view .LVU188
 1045 000a 0C46     		mov	r4, r1
 1046 000c 0546     		mov	r5, r0
 1047              		.loc 1 167 3 view .LVU189
 1048 000e 0631     		adds	r1, r1, #6
 1049              	.LVL84:
 1050              		.loc 1 167 3 view .LVU190
 1051 0010 0623     		movs	r3, #6
 1052 0012 0122     		movs	r2, #1
 1053 0014 B047     		blx	r6
ARM GAS  /tmp/ccs5LAM9.s 			page 23


 1054              	.LVL85:
 168:src/lcd.c     ****   lcd_fill_rect (i+1, j, 1, 11, 0xff );
 1055              		.loc 1 168 3 is_stmt 1 view .LVU191
 1056 0016 2146     		mov	r1, r4
 1057 0018 681C     		adds	r0, r5, #1
 1058 001a 0097     		str	r7, [sp]
 1059 001c 0B23     		movs	r3, #11
 1060 001e 0122     		movs	r2, #1
 1061 0020 B047     		blx	r6
 1062              	.LVL86:
 169:src/lcd.c     ****   lcd_fill_rect (i+2, j+1, 1, 9, 0xff );
 1063              		.loc 1 169 3 view .LVU192
 1064 0022 611C     		adds	r1, r4, #1
 1065 0024 A81C     		adds	r0, r5, #2
 1066 0026 0097     		str	r7, [sp]
 1067 0028 0923     		movs	r3, #9
 1068 002a 0122     		movs	r2, #1
 1069 002c B047     		blx	r6
 1070              	.LVL87:
 170:src/lcd.c     ****   lcd_fill_rect (i+3, j+2, 1, 4, 0xff );
 1071              		.loc 1 170 3 view .LVU193
 1072 002e A11C     		adds	r1, r4, #2
 1073 0030 E81C     		adds	r0, r5, #3
 1074 0032 0097     		str	r7, [sp]
 1075 0034 0423     		movs	r3, #4
 1076 0036 0122     		movs	r2, #1
 1077 0038 B047     		blx	r6
 1078              	.LVL88:
 171:src/lcd.c     **** }
 1079              		.loc 1 171 1 is_stmt 0 view .LVU194
 1080 003a 03B0     		add	sp, sp, #12
 1081              		.cfi_def_cfa_offset 20
 1082              		@ sp needed
 1083 003c F0BD     		pop	{r4, r5, r6, r7, pc}
 1084              	.LVL89:
 1085              	.L57:
 1086              		.loc 1 171 1 view .LVU195
 1087 003e 00BF     		.align	2
 1088              	.L56:
 1089 0040 3D020008 		.word	134218301
 1090              		.cfi_endproc
 1091              	.LFE16:
 1093              		.section	.text.exp_left_side_top,"ax",%progbits
 1094              		.align	1
 1095              		.p2align 2,,3
 1096              		.global	exp_left_side_top
 1097              		.syntax unified
 1098              		.thumb
 1099              		.thumb_func
 1100              		.fpu fpv4-sp-d16
 1102              	exp_left_side_top:
 1103              	.LVL90:
 1104              	.LFB17:
 172:src/lcd.c     **** void exp_left_side_top (int i, int j) {
 1105              		.loc 1 172 39 is_stmt 1 view -0
 1106              		.cfi_startproc
 1107              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccs5LAM9.s 			page 24


 1108              		@ frame_needed = 0, uses_anonymous_args = 0
 1109              		@ link register save eliminated.
 173:src/lcd.c     ****   exp_left_side(i+1, j);
 1110              		.loc 1 173 3 view .LVU197
 1111 0000 0130     		adds	r0, r0, #1
 1112              	.LVL91:
 1113              		.loc 1 173 3 is_stmt 0 view .LVU198
 1114 0002 FFF7FEBF 		b	exp_left_side
 1115              	.LVL92:
 1116              		.loc 1 173 3 view .LVU199
 1117              		.cfi_endproc
 1118              	.LFE17:
 1120 0006 00BF     		.section	.text.exp_left_side_bottom,"ax",%progbits
 1121              		.align	1
 1122              		.p2align 2,,3
 1123              		.global	exp_left_side_bottom
 1124              		.syntax unified
 1125              		.thumb
 1126              		.thumb_func
 1127              		.fpu fpv4-sp-d16
 1129              	exp_left_side_bottom:
 1130              	.LVL93:
 1131              	.LFB18:
 174:src/lcd.c     **** }
 175:src/lcd.c     **** void exp_left_side_bottom (int i, int j) {
 1132              		.loc 1 175 42 is_stmt 1 view -0
 1133              		.cfi_startproc
 1134              		@ args = 0, pretend = 0, frame = 0
 1135              		@ frame_needed = 0, uses_anonymous_args = 0
 1136              		@ link register save eliminated.
 176:src/lcd.c     ****   exp_left_side(i, j+11);
 1137              		.loc 1 176 3 view .LVU201
 1138 0000 0B31     		adds	r1, r1, #11
 1139              	.LVL94:
 1140              		.loc 1 176 3 is_stmt 0 view .LVU202
 1141 0002 FFF7FEBF 		b	exp_left_side
 1142              	.LVL95:
 1143              		.loc 1 176 3 view .LVU203
 1144              		.cfi_endproc
 1145              	.LFE18:
 1147 0006 00BF     		.section	.text.exp_right_side,"ax",%progbits
 1148              		.align	1
 1149              		.p2align 2,,3
 1150              		.global	exp_right_side
 1151              		.syntax unified
 1152              		.thumb
 1153              		.thumb_func
 1154              		.fpu fpv4-sp-d16
 1156              	exp_right_side:
 1157              	.LVL96:
 1158              	.LFB19:
 177:src/lcd.c     **** }
 178:src/lcd.c     **** void exp_right_side (int i, int j) {
 1159              		.loc 1 178 36 is_stmt 1 view -0
 1160              		.cfi_startproc
 1161              		@ args = 0, pretend = 0, frame = 0
 1162              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccs5LAM9.s 			page 25


 179:src/lcd.c     ****   lcd_fill_rect (i+12, j, 1, 6, 0xff );
 1163              		.loc 1 179 3 view .LVU205
 178:src/lcd.c     ****   lcd_fill_rect (i+12, j, 1, 6, 0xff );
 1164              		.loc 1 178 36 is_stmt 0 view .LVU206
 1165 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1166              		.cfi_def_cfa_offset 20
 1167              		.cfi_offset 4, -20
 1168              		.cfi_offset 5, -16
 1169              		.cfi_offset 6, -12
 1170              		.cfi_offset 7, -8
 1171              		.cfi_offset 14, -4
 1172 0002 83B0     		sub	sp, sp, #12
 1173              		.cfi_def_cfa_offset 32
 1174              		.loc 1 179 3 view .LVU207
 1175 0004 FF27     		movs	r7, #255
 1176 0006 0F4E     		ldr	r6, .L62
 1177 0008 0097     		str	r7, [sp]
 178:src/lcd.c     ****   lcd_fill_rect (i+12, j, 1, 6, 0xff );
 1178              		.loc 1 178 36 view .LVU208
 1179 000a 0446     		mov	r4, r0
 1180 000c 0D46     		mov	r5, r1
 1181              		.loc 1 179 3 view .LVU209
 1182 000e 0C30     		adds	r0, r0, #12
 1183              	.LVL97:
 1184              		.loc 1 179 3 view .LVU210
 1185 0010 0623     		movs	r3, #6
 1186 0012 0122     		movs	r2, #1
 1187 0014 B047     		blx	r6
 1188              	.LVL98:
 180:src/lcd.c     ****   lcd_fill_rect (i+11, j+1, 1, 11, 0xff );
 1189              		.loc 1 180 3 is_stmt 1 view .LVU211
 1190 0016 691C     		adds	r1, r5, #1
 1191 0018 04F10B00 		add	r0, r4, #11
 1192 001c 0097     		str	r7, [sp]
 1193 001e 0B23     		movs	r3, #11
 1194 0020 0122     		movs	r2, #1
 1195 0022 B047     		blx	r6
 1196              	.LVL99:
 181:src/lcd.c     ****   lcd_fill_rect (i+10, j+2, 1, 9, 0xff );
 1197              		.loc 1 181 3 view .LVU212
 1198 0024 A91C     		adds	r1, r5, #2
 1199 0026 04F10A00 		add	r0, r4, #10
 1200 002a 0097     		str	r7, [sp]
 1201 002c 0923     		movs	r3, #9
 1202 002e 0122     		movs	r2, #1
 1203 0030 B047     		blx	r6
 1204              	.LVL100:
 182:src/lcd.c     ****   lcd_fill_rect (i+9, j+6, 1, 4, 0xff );
 1205              		.loc 1 182 3 view .LVU213
 1206 0032 A91D     		adds	r1, r5, #6
 1207 0034 04F10900 		add	r0, r4, #9
 1208 0038 0097     		str	r7, [sp]
 1209 003a 0423     		movs	r3, #4
 1210 003c 0122     		movs	r2, #1
 1211 003e B047     		blx	r6
 1212              	.LVL101:
 183:src/lcd.c     **** }
ARM GAS  /tmp/ccs5LAM9.s 			page 26


 1213              		.loc 1 183 1 is_stmt 0 view .LVU214
 1214 0040 03B0     		add	sp, sp, #12
 1215              		.cfi_def_cfa_offset 20
 1216              		@ sp needed
 1217 0042 F0BD     		pop	{r4, r5, r6, r7, pc}
 1218              	.LVL102:
 1219              	.L63:
 1220              		.loc 1 183 1 view .LVU215
 1221              		.align	2
 1222              	.L62:
 1223 0044 3D020008 		.word	134218301
 1224              		.cfi_endproc
 1225              	.LFE19:
 1227              		.section	.text.exp_right_side_top,"ax",%progbits
 1228              		.align	1
 1229              		.p2align 2,,3
 1230              		.global	exp_right_side_top
 1231              		.syntax unified
 1232              		.thumb
 1233              		.thumb_func
 1234              		.fpu fpv4-sp-d16
 1236              	exp_right_side_top:
 1237              	.LVL103:
 1238              	.LFB20:
 184:src/lcd.c     **** void exp_right_side_top (int i, int j) {
 1239              		.loc 1 184 40 is_stmt 1 view -0
 1240              		.cfi_startproc
 1241              		@ args = 0, pretend = 0, frame = 0
 1242              		@ frame_needed = 0, uses_anonymous_args = 0
 1243              		@ link register save eliminated.
 185:src/lcd.c     ****   exp_right_side(i, j);
 1244              		.loc 1 185 3 view .LVU217
 1245 0000 FFF7FEBF 		b	exp_right_side
 1246              	.LVL104:
 1247              		.loc 1 185 3 is_stmt 0 view .LVU218
 1248              		.cfi_endproc
 1249              	.LFE20:
 1251              		.section	.text.exp_right_side_bottom,"ax",%progbits
 1252              		.align	1
 1253              		.p2align 2,,3
 1254              		.global	exp_right_side_bottom
 1255              		.syntax unified
 1256              		.thumb
 1257              		.thumb_func
 1258              		.fpu fpv4-sp-d16
 1260              	exp_right_side_bottom:
 1261              	.LVL105:
 1262              	.LFB21:
 186:src/lcd.c     **** }
 187:src/lcd.c     **** void exp_right_side_bottom (int i, int j) {
 1263              		.loc 1 187 43 is_stmt 1 view -0
 1264              		.cfi_startproc
 1265              		@ args = 0, pretend = 0, frame = 0
 1266              		@ frame_needed = 0, uses_anonymous_args = 0
 1267              		@ link register save eliminated.
 188:src/lcd.c     ****   exp_right_side(i-1, j+11);
 1268              		.loc 1 188 3 view .LVU220
ARM GAS  /tmp/ccs5LAM9.s 			page 27


 1269 0000 0138     		subs	r0, r0, #1
 1270              	.LVL106:
 1271              		.loc 1 188 3 is_stmt 0 view .LVU221
 1272 0002 0B31     		adds	r1, r1, #11
 1273              	.LVL107:
 1274              		.loc 1 188 3 view .LVU222
 1275 0004 FFF7FEBF 		b	exp_right_side
 1276              	.LVL108:
 1277              		.loc 1 188 3 view .LVU223
 1278              		.cfi_endproc
 1279              	.LFE21:
 1281              		.section	.text.exp_top,"ax",%progbits
 1282              		.align	1
 1283              		.p2align 2,,3
 1284              		.global	exp_top
 1285              		.syntax unified
 1286              		.thumb
 1287              		.thumb_func
 1288              		.fpu fpv4-sp-d16
 1290              	exp_top:
 1291              	.LVL109:
 1292              	.LFB22:
 189:src/lcd.c     **** }
 190:src/lcd.c     **** void exp_top (int i, int j) {
 1293              		.loc 1 190 29 is_stmt 1 view -0
 1294              		.cfi_startproc
 1295              		@ args = 0, pretend = 0, frame = 0
 1296              		@ frame_needed = 0, uses_anonymous_args = 0
 191:src/lcd.c     ****   lcd_fill_rect (i+4, j, 7, 1, 0xff );
 1297              		.loc 1 191 3 view .LVU225
 190:src/lcd.c     ****   lcd_fill_rect (i+4, j, 7, 1, 0xff );
 1298              		.loc 1 190 29 is_stmt 0 view .LVU226
 1299 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1300              		.cfi_def_cfa_offset 20
 1301              		.cfi_offset 4, -20
 1302              		.cfi_offset 5, -16
 1303              		.cfi_offset 6, -12
 1304              		.cfi_offset 7, -8
 1305              		.cfi_offset 14, -4
 1306 0002 83B0     		sub	sp, sp, #12
 1307              		.cfi_def_cfa_offset 32
 1308              		.loc 1 191 3 view .LVU227
 1309 0004 FF27     		movs	r7, #255
 1310 0006 0B4E     		ldr	r6, .L68
 1311 0008 0097     		str	r7, [sp]
 190:src/lcd.c     ****   lcd_fill_rect (i+4, j, 7, 1, 0xff );
 1312              		.loc 1 190 29 view .LVU228
 1313 000a 0446     		mov	r4, r0
 1314 000c 0D46     		mov	r5, r1
 1315              		.loc 1 191 3 view .LVU229
 1316 000e 0430     		adds	r0, r0, #4
 1317              	.LVL110:
 1318              		.loc 1 191 3 view .LVU230
 1319 0010 0123     		movs	r3, #1
 1320 0012 0722     		movs	r2, #7
 1321 0014 B047     		blx	r6
 1322              	.LVL111:
ARM GAS  /tmp/ccs5LAM9.s 			page 28


 192:src/lcd.c     ****   lcd_fill_rect (i+5, j+1, 5, 1, 0xff );
 1323              		.loc 1 192 3 is_stmt 1 view .LVU231
 1324 0016 691C     		adds	r1, r5, #1
 1325 0018 601D     		adds	r0, r4, #5
 1326 001a 0097     		str	r7, [sp]
 1327 001c 0123     		movs	r3, #1
 1328 001e 0522     		movs	r2, #5
 1329 0020 B047     		blx	r6
 1330              	.LVL112:
 193:src/lcd.c     ****   lcd_fill_rect (i+6, j+2, 3, 1, 0xff );
 1331              		.loc 1 193 3 view .LVU232
 1332 0022 A91C     		adds	r1, r5, #2
 1333 0024 A01D     		adds	r0, r4, #6
 1334 0026 0097     		str	r7, [sp]
 1335 0028 0123     		movs	r3, #1
 1336 002a 0322     		movs	r2, #3
 1337 002c B047     		blx	r6
 1338              	.LVL113:
 194:src/lcd.c     **** }
 1339              		.loc 1 194 1 is_stmt 0 view .LVU233
 1340 002e 03B0     		add	sp, sp, #12
 1341              		.cfi_def_cfa_offset 20
 1342              		@ sp needed
 1343 0030 F0BD     		pop	{r4, r5, r6, r7, pc}
 1344              	.LVL114:
 1345              	.L69:
 1346              		.loc 1 194 1 view .LVU234
 1347 0032 00BF     		.align	2
 1348              	.L68:
 1349 0034 3D020008 		.word	134218301
 1350              		.cfi_endproc
 1351              	.LFE22:
 1353              		.section	.text.exp_bottom,"ax",%progbits
 1354              		.align	1
 1355              		.p2align 2,,3
 1356              		.global	exp_bottom
 1357              		.syntax unified
 1358              		.thumb
 1359              		.thumb_func
 1360              		.fpu fpv4-sp-d16
 1362              	exp_bottom:
 1363              	.LVL115:
 1364              	.LFB23:
 195:src/lcd.c     **** void exp_bottom (int i, int j) {
 1365              		.loc 1 195 32 is_stmt 1 view -0
 1366              		.cfi_startproc
 1367              		@ args = 0, pretend = 0, frame = 0
 1368              		@ frame_needed = 0, uses_anonymous_args = 0
 196:src/lcd.c     ****   lcd_fill_rect (i+2, j+22, 7, 1, 0xff );
 1369              		.loc 1 196 3 view .LVU236
 195:src/lcd.c     **** void exp_bottom (int i, int j) {
 1370              		.loc 1 195 32 is_stmt 0 view .LVU237
 1371 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1372              		.cfi_def_cfa_offset 20
 1373              		.cfi_offset 4, -20
 1374              		.cfi_offset 5, -16
 1375              		.cfi_offset 6, -12
ARM GAS  /tmp/ccs5LAM9.s 			page 29


 1376              		.cfi_offset 7, -8
 1377              		.cfi_offset 14, -4
 1378 0002 83B0     		sub	sp, sp, #12
 1379              		.cfi_def_cfa_offset 32
 1380              		.loc 1 196 3 view .LVU238
 1381 0004 FF27     		movs	r7, #255
 1382 0006 0C4E     		ldr	r6, .L72
 1383 0008 0097     		str	r7, [sp]
 195:src/lcd.c     **** void exp_bottom (int i, int j) {
 1384              		.loc 1 195 32 view .LVU239
 1385 000a 0446     		mov	r4, r0
 1386 000c 0D46     		mov	r5, r1
 1387              		.loc 1 196 3 view .LVU240
 1388 000e 0230     		adds	r0, r0, #2
 1389              	.LVL116:
 1390              		.loc 1 196 3 view .LVU241
 1391 0010 1631     		adds	r1, r1, #22
 1392              	.LVL117:
 1393              		.loc 1 196 3 view .LVU242
 1394 0012 0123     		movs	r3, #1
 1395 0014 0722     		movs	r2, #7
 1396 0016 B047     		blx	r6
 1397              	.LVL118:
 197:src/lcd.c     ****   lcd_fill_rect (i+3, j+21, 5, 1, 0xff );
 1398              		.loc 1 197 3 is_stmt 1 view .LVU243
 1399 0018 05F11501 		add	r1, r5, #21
 1400 001c E01C     		adds	r0, r4, #3
 1401 001e 0097     		str	r7, [sp]
 1402 0020 0123     		movs	r3, #1
 1403 0022 0522     		movs	r2, #5
 1404 0024 B047     		blx	r6
 1405              	.LVL119:
 198:src/lcd.c     ****   lcd_fill_rect (i+4, j+20, 3, 1, 0xff );
 1406              		.loc 1 198 3 view .LVU244
 1407 0026 05F11401 		add	r1, r5, #20
 1408 002a 201D     		adds	r0, r4, #4
 1409 002c 0097     		str	r7, [sp]
 1410 002e 0123     		movs	r3, #1
 1411 0030 0322     		movs	r2, #3
 1412 0032 B047     		blx	r6
 1413              	.LVL120:
 199:src/lcd.c     **** }
 1414              		.loc 1 199 1 is_stmt 0 view .LVU245
 1415 0034 03B0     		add	sp, sp, #12
 1416              		.cfi_def_cfa_offset 20
 1417              		@ sp needed
 1418 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 1419              	.LVL121:
 1420              	.L73:
 1421              		.loc 1 199 1 view .LVU246
 1422              		.align	2
 1423              	.L72:
 1424 0038 3D020008 		.word	134218301
 1425              		.cfi_endproc
 1426              	.LFE23:
 1428              		.section	.text.exp_middle,"ax",%progbits
 1429              		.align	1
ARM GAS  /tmp/ccs5LAM9.s 			page 30


 1430              		.p2align 2,,3
 1431              		.global	exp_middle
 1432              		.syntax unified
 1433              		.thumb
 1434              		.thumb_func
 1435              		.fpu fpv4-sp-d16
 1437              	exp_middle:
 1438              	.LVL122:
 1439              	.LFB24:
 200:src/lcd.c     **** void exp_middle (int i, int j) {
 1440              		.loc 1 200 32 is_stmt 1 view -0
 1441              		.cfi_startproc
 1442              		@ args = 0, pretend = 0, frame = 0
 1443              		@ frame_needed = 0, uses_anonymous_args = 0
 201:src/lcd.c     ****   lcd_fill_rect (i+4, j+10, 5, 1, 0xff );
 1444              		.loc 1 201 3 view .LVU248
 200:src/lcd.c     **** void exp_middle (int i, int j) {
 1445              		.loc 1 200 32 is_stmt 0 view .LVU249
 1446 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1447              		.cfi_def_cfa_offset 24
 1448              		.cfi_offset 4, -24
 1449              		.cfi_offset 5, -20
 1450              		.cfi_offset 6, -16
 1451              		.cfi_offset 7, -12
 1452              		.cfi_offset 8, -8
 1453              		.cfi_offset 14, -4
 1454 0004 82B0     		sub	sp, sp, #8
 1455              		.cfi_def_cfa_offset 32
 1456              		.loc 1 201 3 view .LVU250
 1457 0006 FF27     		movs	r7, #255
 1458              		.loc 1 201 19 view .LVU251
 1459 0008 00F10408 		add	r8, r0, #4
 1460              		.loc 1 201 3 view .LVU252
 1461 000c 0C4E     		ldr	r6, .L76
 1462 000e 0097     		str	r7, [sp]
 200:src/lcd.c     **** void exp_middle (int i, int j) {
 1463              		.loc 1 200 32 view .LVU253
 1464 0010 0C46     		mov	r4, r1
 1465 0012 0546     		mov	r5, r0
 1466              		.loc 1 201 3 view .LVU254
 1467 0014 0A31     		adds	r1, r1, #10
 1468              	.LVL123:
 1469              		.loc 1 201 3 view .LVU255
 1470 0016 4046     		mov	r0, r8
 1471              	.LVL124:
 1472              		.loc 1 201 3 view .LVU256
 1473 0018 0123     		movs	r3, #1
 1474 001a 0522     		movs	r2, #5
 1475 001c B047     		blx	r6
 1476              	.LVL125:
 202:src/lcd.c     ****   lcd_fill_rect (i+3, j+11, 7, 1, 0xff );
 1477              		.loc 1 202 3 is_stmt 1 view .LVU257
 1478 001e E81C     		adds	r0, r5, #3
 1479 0020 04F10B01 		add	r1, r4, #11
 1480 0024 0097     		str	r7, [sp]
 1481 0026 0123     		movs	r3, #1
 1482 0028 0722     		movs	r2, #7
ARM GAS  /tmp/ccs5LAM9.s 			page 31


 1483 002a B047     		blx	r6
 1484              	.LVL126:
 203:src/lcd.c     ****   lcd_fill_rect (i+4, j+12, 5, 1, 0xff );
 1485              		.loc 1 203 3 view .LVU258
 1486 002c 4046     		mov	r0, r8
 1487 002e 04F10C01 		add	r1, r4, #12
 1488 0032 0097     		str	r7, [sp]
 1489 0034 0123     		movs	r3, #1
 1490 0036 0522     		movs	r2, #5
 1491 0038 B047     		blx	r6
 1492              	.LVL127:
 204:src/lcd.c     **** }
 1493              		.loc 1 204 1 is_stmt 0 view .LVU259
 1494 003a 02B0     		add	sp, sp, #8
 1495              		.cfi_def_cfa_offset 24
 1496              		@ sp needed
 1497 003c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1498              	.LVL128:
 1499              	.L77:
 1500              		.loc 1 204 1 view .LVU260
 1501              		.align	2
 1502              	.L76:
 1503 0040 3D020008 		.word	134218301
 1504              		.cfi_endproc
 1505              	.LFE24:
 1507              		.section	.text.show_stack,"ax",%progbits
 1508              		.align	1
 1509              		.p2align 2,,3
 1510              		.global	show_stack
 1511              		.syntax unified
 1512              		.thumb
 1513              		.thumb_func
 1514              		.fpu fpv4-sp-d16
 1516              	show_stack:
 1517              	.LFB41:
 1518              		.cfi_startproc
 1519              		@ args = 0, pretend = 0, frame = 0
 1520              		@ frame_needed = 0, uses_anonymous_args = 0
 1521              		@ link register save eliminated.
 1522 0000 7047     		bx	lr
 1523              		.cfi_endproc
 1524              	.LFE41:
 1526 0002 00BF     		.section	.text.show_flags,"ax",%progbits
 1527              		.align	1
 1528              		.p2align 2,,3
 1529              		.global	show_flags
 1530              		.syntax unified
 1531              		.thumb
 1532              		.thumb_func
 1533              		.fpu fpv4-sp-d16
 1535              	show_flags:
 1536              	.LFB39:
 1537              		.cfi_startproc
 1538              		@ args = 0, pretend = 0, frame = 0
 1539              		@ frame_needed = 0, uses_anonymous_args = 0
 1540              		@ link register save eliminated.
 1541 0000 7047     		bx	lr
ARM GAS  /tmp/ccs5LAM9.s 			page 32


 1542              		.cfi_endproc
 1543              	.LFE39:
 1545 0002 00BF     		.section	.text.wait_for_display,"ax",%progbits
 1546              		.align	1
 1547              		.p2align 2,,3
 1548              		.global	wait_for_display
 1549              		.syntax unified
 1550              		.thumb
 1551              		.thumb_func
 1552              		.fpu fpv4-sp-d16
 1554              	wait_for_display:
 1555              	.LFB28:
 205:src/lcd.c     ****   
 206:src/lcd.c     **** void show_disp(void) { // This function re-draws everything.
 207:src/lcd.c     ****   // It may be fast enough. It does mean that clearing everything first is needed,
 208:src/lcd.c     ****   // or we keep track of changes.
 209:src/lcd.c     ****   // Try clearing everything first first.
 210:src/lcd.c     ****         int i, j, p;
 211:src/lcd.c     **** 	uint32_t x;
 212:src/lcd.c     **** 	const uint32_t xleft = 26;
 213:src/lcd.c     **** 	const uint32_t ytop = 130; // was 170
 214:src/lcd.c     **** 	const uint32_t dwidth = 25;
 215:src/lcd.c     **** 	const uint32_t xleft_exp = 344;
 216:src/lcd.c     **** 	const uint32_t ytop_exp = 130; // was 170
 217:src/lcd.c     **** 	const uint32_t dwidth_exp = 18;
 218:src/lcd.c     **** 	const uint32_t y_ann = Y_ANNUNC;
 219:src/lcd.c     ****         /* Segments 0 - 107 are the main digits */
 220:src/lcd.c     ****         for (i=0; i<DISPLAY_DIGITS; i++) { // 0 -> 11 inclusive
 221:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 222:src/lcd.c     ****                 x = xleft + dwidth*i;
 223:src/lcd.c     ****                 if (dots[p]) { // top
 224:src/lcd.c     **** 		  top (x, ytop);
 225:src/lcd.c     ****                 }
 226:src/lcd.c     ****                 if (dots[p+1]) { // top left
 227:src/lcd.c     **** 		  left_side_top (x, ytop);
 228:src/lcd.c     ****                 }
 229:src/lcd.c     ****                 if (dots[p+3]) { // top right
 230:src/lcd.c     **** 		  right_side_top (x, ytop);
 231:src/lcd.c     ****                 }
 232:src/lcd.c     ****                 if (dots[p+2]) { // centre line
 233:src/lcd.c     **** 		  middle (x, ytop);
 234:src/lcd.c     ****                 }
 235:src/lcd.c     ****                 if (dots[p+4]) { // lower left
 236:src/lcd.c     **** 		  left_side_bottom (x, ytop);
 237:src/lcd.c     ****                 }
 238:src/lcd.c     ****                 if (dots[p+6]) { // lower right
 239:src/lcd.c     **** 		  right_side_bottom (x, ytop);
 240:src/lcd.c     ****                 }
 241:src/lcd.c     ****                 if (dots[p+5]) { // bottom
 242:src/lcd.c     **** 		  bottom (x, ytop);
 243:src/lcd.c     ****                 }
 244:src/lcd.c     ****                 if (dots[p+7]) { // point
 245:src/lcd.c     **** 		  decimal (x, ytop);
 246:src/lcd.c     ****                 }
 247:src/lcd.c     ****                 if (dots[p+8]) { // comma
 248:src/lcd.c     **** 		  comma (x, ytop);
 249:src/lcd.c     ****                 }
ARM GAS  /tmp/ccs5LAM9.s 			page 33


 250:src/lcd.c     ****         }
 251:src/lcd.c     ****         /* Segments 108 - 128 are the exponent digits */
 252:src/lcd.c     ****         for (i=0; i<3; i++) {
 253:src/lcd.c     ****                 p = i*7+108;
 254:src/lcd.c     ****                 x = xleft_exp + dwidth_exp*i;
 255:src/lcd.c     ****                 if (dots[p]) { // top
 256:src/lcd.c     **** 		  exp_top (x, ytop_exp);
 257:src/lcd.c     ****                 }
 258:src/lcd.c     ****                 if (dots[p+1]) { // top left
 259:src/lcd.c     **** 		  exp_left_side_top (x, ytop_exp);
 260:src/lcd.c     ****                 }
 261:src/lcd.c     ****                 if (dots[p+3]) { // top right
 262:src/lcd.c     **** 		  exp_right_side_top (x, ytop_exp);
 263:src/lcd.c     ****                 }
 264:src/lcd.c     ****                 if (dots[p+2]) { // centre line
 265:src/lcd.c     **** 		  exp_middle (x, ytop_exp);
 266:src/lcd.c     ****                 }
 267:src/lcd.c     ****                 if (dots[p+4]) { // lower left
 268:src/lcd.c     **** 		  exp_left_side_bottom (x, ytop_exp);
 269:src/lcd.c     ****                 }
 270:src/lcd.c     ****                 if (dots[p+6]) { // lower right
 271:src/lcd.c     **** 		  exp_right_side_bottom (x, ytop_exp);
 272:src/lcd.c     ****                 }
 273:src/lcd.c     ****                 if (dots[p+5]) { // bottom
 274:src/lcd.c     **** 		  exp_bottom (x, ytop_exp);
 275:src/lcd.c     ****                 }
 276:src/lcd.c     ****         }
 277:src/lcd.c     ****         /* Segments 129 & 130 are the signs */
 278:src/lcd.c     ****         if (dots[MANT_SIGN]) {
 279:src/lcd.c     **** 	  middle (xleft - dwidth, ytop);
 280:src/lcd.c     ****         }
 281:src/lcd.c     ****         if (dots[EXP_SIGN]) {
 282:src/lcd.c     **** 	  exp_middle (xleft_exp-dwidth_exp, ytop);
 283:src/lcd.c     ****         }
 284:src/lcd.c     **** 
 285:src/lcd.c     **** 	if (dots[BIG_EQ]) {
 286:src/lcd.c     **** 	  lcd_fill_rect (250, y_ann-34, 15, 4, 0xff);
 287:src/lcd.c     **** 	  lcd_fill_rect (250, y_ann-24, 15, 4, 0xff);
 288:src/lcd.c     ****         }
 289:src/lcd.c     **** 	t20->inv = 0;
 290:src/lcd.c     **** 	
 291:src/lcd.c     **** 	draw_PRT();
 292:src/lcd.c     **** 	
 293:src/lcd.c     **** 	/* if (UState.print_on) { */
 294:src/lcd.c     **** 	/*   lcd_setXY(t20, 250, y_ann-70); */
 295:src/lcd.c     **** 	/*   lcd_writeText(t20,"PRT"); */
 296:src/lcd.c     ****         /* } */
 297:src/lcd.c     **** 
 298:src/lcd.c     ****         if (dots[DOWN_ARR]) {
 299:src/lcd.c     **** 	  lcd_fill_rect(287,y_ann-67,5,12,0xff);
 300:src/lcd.c     **** 	  lcd_fill_rect(285,y_ann-55,9,1,0xff);
 301:src/lcd.c     **** 	  lcd_fill_rect(286,y_ann-54,7,1,0xff);
 302:src/lcd.c     **** 	  lcd_fill_rect(287,y_ann-53,5,1,0xff);
 303:src/lcd.c     **** 	  lcd_fill_rect(288,y_ann-52,3,1,0xff);
 304:src/lcd.c     **** 	  lcd_fill_rect(289,y_ann-51,1,1,0xff);
 305:src/lcd.c     ****         }
 306:src/lcd.c     **** 
ARM GAS  /tmp/ccs5LAM9.s 			page 34


 307:src/lcd.c     **** 	if (dots[INPUT]) {
 308:src/lcd.c     **** 	  lcd_setXY(t20, 305, y_ann-70);
 309:src/lcd.c     **** 	  lcd_writeText(t20,"ALPHA");
 310:src/lcd.c     ****         }
 311:src/lcd.c     **** 
 312:src/lcd.c     **** 	/* if (dots[LIT_EQ]) { */
 313:src/lcd.c     **** 	/*   lcd_setXY (t20, 360, y_ann-70); */
 314:src/lcd.c     **** 	/*   if (C_LOCKED) { */
 315:src/lcd.c     **** 	/*     lcd_writeText(t20, "C_LK"); */
 316:src/lcd.c     **** 	/*   } */
 317:src/lcd.c     **** 	/*   else { */
 318:src/lcd.c     **** 	/*     lcd_writeText(t20, "="); */
 319:src/lcd.c     **** 	/*   } */
 320:src/lcd.c     ****         /* } */
 321:src/lcd.c     **** 
 322:src/lcd.c     **** 	draw_LEQ();
 323:src/lcd.c     **** 	
 324:src/lcd.c     **** 	if (dots[BATTERY]) {
 325:src/lcd.c     **** 	  //    MOVE(70, 10);   PRINTF("####-");
 326:src/lcd.c     ****         }
 327:src/lcd.c     **** #ifdef MODIFY_BEG_SSIZE8
 328:src/lcd.c     **** 	if (dots[BEG]) {
 329:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-50);
 330:src/lcd.c     **** 	  lcd_writeText(t20, "S:8");
 331:src/lcd.c     ****         }
 332:src/lcd.c     **** 	else {
 333:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-50);
 334:src/lcd.c     **** 	  lcd_writeText(t20, "S:4");
 335:src/lcd.c     **** 	}	  
 336:src/lcd.c     **** #else
 337:src/lcd.c     **** 	if (dots[BEG]) {
 338:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-50);
 339:src/lcd.c     **** 	  lcd_writeText(t20, "BEG");
 340:src/lcd.c     ****         }
 341:src/lcd.c     **** #endif
 342:src/lcd.c     **** 	if (dots[STO_annun]) {
 343:src/lcd.c     **** 	  lcd_setXY (t20, 325, y_ann-50);
 344:src/lcd.c     **** 	  lcd_writeText(t20, "PGM");
 345:src/lcd.c     ****         }
 346:src/lcd.c     **** 
 347:src/lcd.c     **** 	/* if (dots[RCL_annun]) { */
 348:src/lcd.c     **** 	/*   lcd_setXY (t20, 365, y_ann-50); */
 349:src/lcd.c     **** 	/*   lcd_writeText(t20, "RUN"); */
 350:src/lcd.c     ****         /* } */
 351:src/lcd.c     **** 
 352:src/lcd.c     **** 	if (dots[RAD]) {
 353:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-30);
 354:src/lcd.c     **** 	  lcd_writeText(t20, "RAD");
 355:src/lcd.c     **** 	}
 356:src/lcd.c     **** 
 357:src/lcd.c     **** 	if (dots[DEG]) {
 358:src/lcd.c     **** 	  lcd_setXY (t20, 325, y_ann-30);
 359:src/lcd.c     **** 	  lcd_writeText(t20, "DEG");
 360:src/lcd.c     ****         }
 361:src/lcd.c     ****         /* if (dots[RPN]) { */
 362:src/lcd.c     **** 	/*   lcd_setXY (t20, 365, y_ann-30); */
 363:src/lcd.c     **** 	/*   if (ENTRY_RPN_ENABLED) { */
ARM GAS  /tmp/ccs5LAM9.s 			page 35


 364:src/lcd.c     **** 	/*     lcd_writeText(t20, "eRPN"); */
 365:src/lcd.c     **** 	/*   } */
 366:src/lcd.c     **** 	/*   else { */
 367:src/lcd.c     **** 	/*     lcd_writeText(t20, "RPN"); */
 368:src/lcd.c     **** 	/*   } */
 369:src/lcd.c     ****         /* } */
 370:src/lcd.c     **** 	draw_RPN_RCL();
 371:src/lcd.c     **** 	
 372:src/lcd.c     **** 	/* The graphical bit last */
 373:src/lcd.c     ****         for (i=0; i<BITMAP_WIDTH; i++) {
 374:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 375:src/lcd.c     **** 	    if (dots[i*6+j+MATRIX_BASE]) {
 376:src/lcd.c     **** 	      lcd_fill_rect( xleft-dwidth+5*i+15, ytop-(10+6*6)+j*6, 4, 5, 0xff);
 377:src/lcd.c     **** 	    }
 378:src/lcd.c     **** 	  }
 379:src/lcd.c     **** 	}
 380:src/lcd.c     **** #ifdef TOP_ROW
 381:src/lcd.c     ****         for (i=0; i<BW_TOP; i++) {
 382:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 383:src/lcd.c     **** 	    if (dots[i*6+j+MB_TOP]) {
 384:src/lcd.c     **** 	      lcd_fill_rect( xleft-dwidth+5*i+15, 70-(10+6*5)+j*5, 4, 4, 0xff);
 385:src/lcd.c     **** 	    }
 386:src/lcd.c     **** 	  }
 387:src/lcd.c     **** 	}
 388:src/lcd.c     **** #endif
 389:src/lcd.c     **** }
 390:src/lcd.c     **** #endif
 391:src/lcd.c     **** 
 392:src/lcd.c     **** #if defined(USECURSES) && !defined(DM42)
 393:src/lcd.c     **** void show_disp(void) {
 394:src/lcd.c     ****         int i, j, p, x;
 395:src/lcd.c     ****         const int dig_base = 16;
 396:src/lcd.c     **** 
 397:src/lcd.c     ****         /* Segments 0 - 107 are the main digits */
 398:src/lcd.c     ****         for (i=0; i<DISPLAY_DIGITS; i++) {
 399:src/lcd.c     **** 	  p = i*SEGS_PER_DIGIT; // 9 - 7 + dot and comma
 400:src/lcd.c     ****                 x = 3+5*i;
 401:src/lcd.c     ****                 if (dots[p]) {
 402:src/lcd.c     ****                         MOVE(x+1, dig_base);    PRINTF("--");
 403:src/lcd.c     ****                 }
 404:src/lcd.c     ****                 if (dots[p+1]) {
 405:src/lcd.c     ****                         MOVE(x, dig_base+1);    PRINTF("|");
 406:src/lcd.c     ****                         MOVE(x, dig_base+2);    PRINTF("|");
 407:src/lcd.c     ****                 }
 408:src/lcd.c     ****                 if (dots[p+3]) {
 409:src/lcd.c     ****                         MOVE(x+3, dig_base+1);  PRINTF("|");
 410:src/lcd.c     ****                         MOVE(x+3, dig_base+2);  PRINTF("|");
 411:src/lcd.c     ****                 }
 412:src/lcd.c     ****                 if (dots[p+2]) {
 413:src/lcd.c     ****                         MOVE(x+1, dig_base+3);  PRINTF("--");
 414:src/lcd.c     ****                 }
 415:src/lcd.c     ****                 if (dots[p+4]) {
 416:src/lcd.c     ****                         MOVE(x, dig_base+4);    PRINTF("|");
 417:src/lcd.c     ****                         MOVE(x, dig_base+5);    PRINTF("|");
 418:src/lcd.c     ****                 }
 419:src/lcd.c     ****                 if (dots[p+6]) {
 420:src/lcd.c     ****                         MOVE(x+3, dig_base+4);  PRINTF("|");
ARM GAS  /tmp/ccs5LAM9.s 			page 36


 421:src/lcd.c     ****                         MOVE(x+3, dig_base+5);  PRINTF("|");
 422:src/lcd.c     ****                 }
 423:src/lcd.c     ****                 if (dots[p+5]) {
 424:src/lcd.c     ****                         MOVE(x+1, dig_base+6);  PRINTF("--");
 425:src/lcd.c     ****                 }
 426:src/lcd.c     ****                 if (dots[p+7]) {
 427:src/lcd.c     ****                         MOVE(x+4, dig_base+6);  PRINTF(".");
 428:src/lcd.c     ****                 }
 429:src/lcd.c     ****                 if (dots[p+8]) {
 430:src/lcd.c     ****                         MOVE(x+3, dig_base+7);  PRINTF("/");
 431:src/lcd.c     ****                 }
 432:src/lcd.c     ****         }
 433:src/lcd.c     ****         /* Segments 108 - 128 are the exponent digits */
 434:src/lcd.c     ****         for (i=0; i<3; i++) {
 435:src/lcd.c     ****                 p = i*7+108;
 436:src/lcd.c     ****                 x = 66 + i * 4;
 437:src/lcd.c     ****                 if (dots[p]) {
 438:src/lcd.c     ****                         MOVE(x+1, dig_base-1);  PRINTF("-");
 439:src/lcd.c     ****                 }
 440:src/lcd.c     ****                 if (dots[p+1]) {
 441:src/lcd.c     ****                         MOVE(x, dig_base);      PRINTF("|");
 442:src/lcd.c     ****                 }
 443:src/lcd.c     ****                 if (dots[p+3]) {
 444:src/lcd.c     ****                         MOVE(x+2, dig_base);    PRINTF("|");
 445:src/lcd.c     ****                 }
 446:src/lcd.c     ****                 if (dots[p+2]) {
 447:src/lcd.c     ****                         MOVE(x+1, dig_base+1);  PRINTF("-");
 448:src/lcd.c     ****                 }
 449:src/lcd.c     ****                 if (dots[p+4]) {
 450:src/lcd.c     ****                         MOVE(x, dig_base+2);    PRINTF("|");
 451:src/lcd.c     ****                 }
 452:src/lcd.c     ****                 if (dots[p+6]) {
 453:src/lcd.c     ****                         MOVE(x+2, dig_base+2);  PRINTF("|");
 454:src/lcd.c     ****                 }
 455:src/lcd.c     ****                 if (dots[p+5]) {
 456:src/lcd.c     ****                         MOVE(x+1, dig_base+3);  PRINTF("-");
 457:src/lcd.c     ****                 }
 458:src/lcd.c     ****         }
 459:src/lcd.c     ****         /* Segments 129 & 130 are the signs */
 460:src/lcd.c     ****         if (dots[MANT_SIGN]) {
 461:src/lcd.c     ****                 MOVE(0, dig_base+3);
 462:src/lcd.c     ****                 PRINTF("--");
 463:src/lcd.c     ****         }
 464:src/lcd.c     ****         if (dots[EXP_SIGN]) {
 465:src/lcd.c     ****                 MOVE(64, dig_base+1);
 466:src/lcd.c     ****                 PRINTF("-");
 467:src/lcd.c     ****         }
 468:src/lcd.c     ****         if (dots[BIG_EQ]) {
 469:src/lcd.c     ****                 MOVE(47, 12);   PRINTF("==");
 470:src/lcd.c     ****         }
 471:src/lcd.c     ****         if (dots[LIT_EQ]) {
 472:src/lcd.c     ****                 MOVE(64, 10);   PRINTF("=");
 473:src/lcd.c     ****         }
 474:src/lcd.c     ****         if (dots[DOWN_ARR]) {
 475:src/lcd.c     ****                 MOVE(52, 10);   PRINTF("v");
 476:src/lcd.c     ****         }
 477:src/lcd.c     ****         if (dots[INPUT]) {
ARM GAS  /tmp/ccs5LAM9.s 			page 37


 478:src/lcd.c     ****                 MOVE(55, 10);   PRINTF("INPUT");
 479:src/lcd.c     ****         }
 480:src/lcd.c     ****         if (dots[BATTERY]) {
 481:src/lcd.c     ****                 MOVE(70, 10);   PRINTF("####-");
 482:src/lcd.c     ****         }
 483:src/lcd.c     ****         if (dots[BEG]) {
 484:src/lcd.c     ****                 MOVE(52, 12);   PRINTF("BEG");
 485:src/lcd.c     ****         }
 486:src/lcd.c     ****         if (dots[STO_annun]) {
 487:src/lcd.c     ****                 MOVE(62, 12);   PRINTF("STO");
 488:src/lcd.c     ****         }
 489:src/lcd.c     ****         if (dots[RCL_annun]) {
 490:src/lcd.c     ****                 MOVE(72, 12);   PRINTF("RCL");
 491:src/lcd.c     ****         }
 492:src/lcd.c     ****         if (dots[RAD]) {
 493:src/lcd.c     ****                 MOVE(52, 14);   PRINTF("RAD");
 494:src/lcd.c     ****         }
 495:src/lcd.c     ****         if (dots[DEG]) {
 496:src/lcd.c     ****                 MOVE(62, 14);   PRINTF("360");
 497:src/lcd.c     ****         }
 498:src/lcd.c     ****         if (dots[RPN]) {
 499:src/lcd.c     ****                 MOVE(72, 14);   PRINTF("RPN");
 500:src/lcd.c     ****         }
 501:src/lcd.c     ****         /* The graphical bit last */
 502:src/lcd.c     ****         for (i=0; i<BITMAP_WIDTH; i++)
 503:src/lcd.c     ****                 for (j=0; j<6; j++) {
 504:src/lcd.c     ****                         if (dots[i*6+j+MATRIX_BASE]) {
 505:src/lcd.c     ****                                 MOVE(1+i, 9+j);
 506:src/lcd.c     ****                                 PRINTF("#");
 507:src/lcd.c     ****                         }
 508:src/lcd.c     ****                 }
 509:src/lcd.c     **** }
 510:src/lcd.c     **** #endif
 511:src/lcd.c     **** 
 512:src/lcd.c     **** void show_stack(void) {
 513:src/lcd.c     **** #ifdef USECURSES
 514:src/lcd.c     ****   int i;
 515:src/lcd.c     **** 
 516:src/lcd.c     ****         if (!State2.flags)
 517:src/lcd.c     ****                 return;
 518:src/lcd.c     **** 
 519:src/lcd.c     ****         // Stack display smashes the stack registers
 520:src/lcd.c     ****         for (i=4; i<STACK_SIZE; i++) {
 521:src/lcd.c     ****                 MOVE(26, 8-i);
 522:src/lcd.c     ****                 PRINTF("%c ", i<stack_size()?'*':' ');
 523:src/lcd.c     ****                 dispreg(REGNAMES[i], regX_idx + i);
 524:src/lcd.c     ****         }
 525:src/lcd.c     ****         MOVE(53, 2);    dispreg(REGNAMES[regJ_idx-regX_idx], regJ_idx);
 526:src/lcd.c     ****         MOVE(53, 1);    dispreg(REGNAMES[regK_idx-regX_idx], regK_idx);
 527:src/lcd.c     ****         for (i=0; i<4; i++) {
 528:src/lcd.c     ****                 MOVE(0, 4-i);
 529:src/lcd.c     ****                 dispreg(REGNAMES[i], regX_idx + i);
 530:src/lcd.c     ****         }
 531:src/lcd.c     ****         MOVE(53, 4);
 532:src/lcd.c     ****         dispreg(REGNAMES[regL_idx-regX_idx], regL_idx);
 533:src/lcd.c     ****         MOVE(53, 3);
 534:src/lcd.c     ****         dispreg(REGNAMES[regI_idx-regX_idx], regI_idx);
ARM GAS  /tmp/ccs5LAM9.s 			page 38


 535:src/lcd.c     ****         MOVE(53, 0);
 536:src/lcd.c     ****         PRINTF("stack depth: %d", stack_size());
 537:src/lcd.c     **** #endif
 538:src/lcd.c     **** }
 539:src/lcd.c     **** 
 540:src/lcd.c     **** void show_flags(void) {
 541:src/lcd.c     **** #if defined(CONSOLE) && !defined(DM42)
 542:src/lcd.c     **** 	extern unsigned int get_local_flags(void);
 543:src/lcd.c     **** 
 544:src/lcd.c     **** 	if (!State2.flags)
 545:src/lcd.c     **** 		return;
 546:src/lcd.c     **** 	MOVE(0, 0);
 547:src/lcd.c     **** 	PRINTF(" %c ", JustDisplayed ? '*' : ' ');
 548:src/lcd.c     **** 	MOVE(5, 0);
 549:src/lcd.c     **** 	switch (cur_shift()) {
 550:src/lcd.c     **** 	case SHIFT_F:   PRINTF("[f-shift]");    break;
 551:src/lcd.c     **** 	case SHIFT_G:   PRINTF("[g-shift]");    break;
 552:src/lcd.c     **** 	case SHIFT_H:   PRINTF("[h-shift]");    break;
 553:src/lcd.c     **** 	default:                                break;
 554:src/lcd.c     **** 	}
 555:src/lcd.c     **** 	if (State2.hyp) {
 556:src/lcd.c     **** 		MOVE(14, 0);
 557:src/lcd.c     **** 		if (State2.dot)
 558:src/lcd.c     **** 			PRINTF("[hyp]");
 559:src/lcd.c     **** 		else
 560:src/lcd.c     **** 			PRINTF("[hyp-1]");
 561:src/lcd.c     **** 	}
 562:src/lcd.c     **** 	if (!State2.runmode) {
 563:src/lcd.c     **** 		MOVE(21, 0);
 564:src/lcd.c     **** 		PRINTF("[prog]");
 565:src/lcd.c     **** 	}
 566:src/lcd.c     **** 	if (view_instruction_counter) {
 567:src/lcd.c     **** 		MOVE(28, 0);
 568:src/lcd.c     **** 		PRINTF("#%llu", instruction_count);
 569:src/lcd.c     **** 	}
 570:src/lcd.c     **** 	MOVE(0, 0);
 571:src/lcd.c     **** 
 572:src/lcd.c     **** #ifdef USECURSES
 573:src/lcd.c     **** #define FLAG_BASE       5
 574:src/lcd.c     **** 	MOVE(10, FLAG_BASE);
 575:src/lcd.c     **** 	if (State2.rarg)
 576:src/lcd.c     **** 		PRINTF("[rcmd]");
 577:src/lcd.c     **** 	else if (State2.arrow)
 578:src/lcd.c     **** 		PRINTF("[arr]");
 579:src/lcd.c     **** 	if (State2.dot) {
 580:src/lcd.c     **** 		MOVE(18, FLAG_BASE);
 581:src/lcd.c     **** 		PRINTF("[dot]");
 582:src/lcd.c     **** 	}
 583:src/lcd.c     **** 	if (State2.ind) {
 584:src/lcd.c     **** 		MOVE(24, FLAG_BASE);
 585:src/lcd.c     **** 		PRINTF("[ind]");
 586:src/lcd.c     **** 	}
 587:src/lcd.c     **** 	if (State2.trace) {
 588:src/lcd.c     **** 		MOVE(30, FLAG_BASE);
 589:src/lcd.c     **** 		PRINTF("[trace]");
 590:src/lcd.c     **** 	}
 591:src/lcd.c     **** 	if (State2.cmplx) {
ARM GAS  /tmp/ccs5LAM9.s 			page 39


 592:src/lcd.c     **** 		MOVE(40, FLAG_BASE);
 593:src/lcd.c     **** 		PRINTF("[cmplx]");
 594:src/lcd.c     **** 	}
 595:src/lcd.c     **** 	if (State2.catalogue) {
 596:src/lcd.c     **** 		MOVE(50, FLAG_BASE);
 597:src/lcd.c     **** 		PRINTF("[cat %03u]", State2.catalogue);
 598:src/lcd.c     **** 	}
 599:src/lcd.c     **** 	if (State2.hms) {
 600:src/lcd.c     **** 		MOVE(64, FLAG_BASE);
 601:src/lcd.c     **** 		PRINTF("[H.MS]");
 602:src/lcd.c     **** 	}
 603:src/lcd.c     **** 	if (UState.fract) {
 604:src/lcd.c     **** 		MOVE(71, FLAG_BASE);
 605:src/lcd.c     **** 		PRINTF("[FRACT]");
 606:src/lcd.c     **** 	}
 607:src/lcd.c     **** 	if (State2.multi) {
 608:src/lcd.c     **** 		MOVE(71, FLAG_BASE+1);
 609:src/lcd.c     **** 		PRINTF("[MULTI]");
 610:src/lcd.c     **** 	}
 611:src/lcd.c     **** 	MOVE(50, FLAG_BASE+1);
 612:src/lcd.c     **** 	PRINTF("[RRS %03u]", ProgSize);
 613:src/lcd.c     **** 	if (State2.state_lift) {
 614:src/lcd.c     **** 		MOVE(10, FLAG_BASE+1);
 615:src/lcd.c     **** 		PRINTF("[lift]");
 616:src/lcd.c     **** 	}
 617:src/lcd.c     **** 	if (Running) {
 618:src/lcd.c     **** 		MOVE(18, FLAG_BASE+1);
 619:src/lcd.c     **** 		PRINTF("[running]");
 620:src/lcd.c     **** 	}
 621:src/lcd.c     **** 	MOVE(70, 5);
 622:src/lcd.c     **** 	PRINTF("iw = %u/%u", State2.window, IntMaxWindow);
 623:src/lcd.c     **** 	MOVE(30, FLAG_BASE+1);
 624:src/lcd.c     **** 	PRINTF("shft = %u", cur_shift());
 625:src/lcd.c     **** 	MOVE(40, FLAG_BASE+1);
 626:src/lcd.c     **** 	PRINTF("trig = %u", UState.trigmode);
 627:src/lcd.c     **** 	MOVE(60, FLAG_BASE+1);
 628:src/lcd.c     **** 	PRINTF("r = %u", ShowRegister);
 629:src/lcd.c     **** //	MOVE(60, FLAG_BASE+1);
 630:src/lcd.c     **** //	PRINTF("apos = %u", State2.alpha_pos);
 631:src/lcd.c     **** 	MOVE(10, FLAG_BASE+2);
 632:src/lcd.c     **** 	PRINTF("numdig = %u   alpha '%-31s'   lflags = %03o-%03o",
 633:src/lcd.c     **** 			State2.numdigit, Alpha, get_local_flags() >> 8,
 634:src/lcd.c     **** 			get_local_flags() & 0xff);
 635:src/lcd.c     **** 	if (State.entryp) {
 636:src/lcd.c     **** 		MOVE(0, FLAG_BASE+2);
 637:src/lcd.c     **** 		PRINTF("entryp");
 638:src/lcd.c     **** 	}
 639:src/lcd.c     **** 	MOVE(10, FLAG_BASE+3);
 640:src/lcd.c     **** 	PRINTF("digval=%u", State2.digval);
 641:src/lcd.c     **** 	MOVE(23, FLAG_BASE+3);
 642:src/lcd.c     **** 	PRINTF("pc = %03u", state_pc());
 643:src/lcd.c     **** 	MOVE(34, FLAG_BASE+3);
 644:src/lcd.c     **** 	PRINTF("ap = %u", State2.alpha_pos);
 645:src/lcd.c     **** 	MOVE(45, FLAG_BASE+3);
 646:src/lcd.c     **** 	PRINTF("cmddot = %u  cmdeex = %u  eol = %u",
 647:src/lcd.c     **** 			CmdLineDot, CmdLineEex, CmdLineLength);
 648:src/lcd.c     **** 	MOVE(0, FLAG_BASE+3);
ARM GAS  /tmp/ccs5LAM9.s 			page 40


 649:src/lcd.c     **** 	PRINTF("JG=%d", UState.jg1582?1582:1752);
 650:src/lcd.c     **** #endif
 651:src/lcd.c     **** #endif
 652:src/lcd.c     **** }
 653:src/lcd.c     **** 
 654:src/lcd.c     **** void wait_for_display(void)
 655:src/lcd.c     **** {
 1556              		.loc 1 655 1 is_stmt 1 view -0
 1557              		.cfi_startproc
 1558              		@ args = 0, pretend = 0, frame = 0
 1559              		@ frame_needed = 0, uses_anonymous_args = 0
 1560              		@ link register save eliminated.
 656:src/lcd.c     **** }
 1561              		.loc 1 656 1 view .LVU262
 1562 0000 7047     		bx	lr
 1563              		.cfi_endproc
 1564              	.LFE28:
 1566 0002 00BF     		.section	.rodata.draw_RPN_RCL.str1.4,"aMS",%progbits,1
 1567              		.align	2
 1568              	.LC0:
 1569 0000 6552504E 		.ascii	"eRPN\000"
 1569      00
 1570 0005 000000   		.align	2
 1571              	.LC1:
 1572 0008 52504E00 		.ascii	"RPN\000"
 1573              		.align	2
 1574              	.LC2:
 1575 000c 52554E00 		.ascii	"RUN\000"
 1576              		.section	.text.draw_RPN_RCL,"ax",%progbits
 1577              		.align	1
 1578              		.p2align 2,,3
 1579              		.global	draw_RPN_RCL
 1580              		.syntax unified
 1581              		.thumb
 1582              		.thumb_func
 1583              		.fpu fpv4-sp-d16
 1585              	draw_RPN_RCL:
 1586              	.LFB30:
 657:src/lcd.c     **** 
 658:src/lcd.c     **** #if defined(USECURSES) && !defined(DM42) 
 659:src/lcd.c     **** void finish_display(void) {
 660:src/lcd.c     ****         show_disp();
 661:src/lcd.c     ****         MOVE(0, 0);
 662:src/lcd.c     ****         refresh();
 663:src/lcd.c     **** 
 664:src/lcd.c     **** }
 665:src/lcd.c     **** #endif
 666:src/lcd.c     **** #if defined(DM42) 
 667:src/lcd.c     **** void finish_display(void) {
 668:src/lcd.c     ****   //  lcd_clear_buf();
 669:src/lcd.c     ****   lcd_fill_rect (0, 0, 400, 188, 0); //leave bottom 52 rows for menu 
 670:src/lcd.c     ****   show_disp();
 671:src/lcd.c     ****   lcd_refresh();
 672:src/lcd.c     **** }
 673:src/lcd.c     **** 
 674:src/lcd.c     **** void draw_RPN_RCL(void) {
 1587              		.loc 1 674 25 view -0
ARM GAS  /tmp/ccs5LAM9.s 			page 41


 1588              		.cfi_startproc
 1589              		@ args = 0, pretend = 0, frame = 0
 1590              		@ frame_needed = 0, uses_anonymous_args = 0
 675:src/lcd.c     ****   t20->inv = !dots[RPN];
 1591              		.loc 1 675 3 view .LVU264
 674:src/lcd.c     ****   t20->inv = !dots[RPN];
 1592              		.loc 1 674 25 is_stmt 0 view .LVU265
 1593 0000 38B5     		push	{r3, r4, r5, lr}
 1594              		.cfi_def_cfa_offset 16
 1595              		.cfi_offset 3, -16
 1596              		.cfi_offset 4, -12
 1597              		.cfi_offset 5, -8
 1598              		.cfi_offset 14, -4
 1599              		.loc 1 675 19 view .LVU266
 1600 0002 1B4C     		ldr	r4, .L86
 1601              		.loc 1 675 3 view .LVU267
 1602 0004 1B4D     		ldr	r5, .L86+4
 1603              		.loc 1 675 14 view .LVU268
 1604 0006 94F88D30 		ldrb	r3, [r4, #141]	@ zero_extendqisi2
 676:src/lcd.c     ****   if (ENTRY_RPN_ENABLED) {
 1605              		.loc 1 676 7 view .LVU269
 1606 000a 1B4A     		ldr	r2, .L86+8
 675:src/lcd.c     ****   t20->inv = !dots[RPN];
 1607              		.loc 1 675 3 view .LVU270
 1608 000c 286B     		ldr	r0, [r5, #48]
 1609              		.loc 1 676 7 view .LVU271
 1610 000e 1268     		ldr	r2, [r2]
 675:src/lcd.c     ****   t20->inv = !dots[RPN];
 1611              		.loc 1 675 14 view .LVU272
 1612 0010 B3FA83F3 		clz	r3, r3
 1613 0014 5B09     		lsrs	r3, r3, #5
 1614 0016 4374     		strb	r3, [r0, #17]
 1615              		.loc 1 676 3 is_stmt 1 view .LVU273
 1616              		.loc 1 676 6 is_stmt 0 view .LVU274
 1617 0018 92F9DD37 		ldrsb	r3, [r2, #2013]
 1618 001c 002B     		cmp	r3, #0
 677:src/lcd.c     ****     lcd_setXY (t20, 355, Y_ANNUNC-30); // 70 is y_ann
 1619              		.loc 1 677 5 view .LVU275
 1620 001e 4FF02D02 		mov	r2, #45
 1621 0022 164B     		ldr	r3, .L86+12
 676:src/lcd.c     ****   if (ENTRY_RPN_ENABLED) {
 1622              		.loc 1 676 6 view .LVU276
 1623 0024 1BDB     		blt	.L85
 678:src/lcd.c     ****     lcd_writeText(t20, "eRPN");
 679:src/lcd.c     ****   }
 680:src/lcd.c     ****   else {
 681:src/lcd.c     ****     lcd_setXY (t20, 365, Y_ANNUNC-30); // 70 is y_ann
 1624              		.loc 1 681 5 is_stmt 1 view .LVU277
 1625 0026 40F26D11 		movw	r1, #365
 1626 002a 9847     		blx	r3
 1627              	.LVL129:
 682:src/lcd.c     ****     lcd_writeText(t20, "RPN");
 1628              		.loc 1 682 5 view .LVU278
 1629 002c 286B     		ldr	r0, [r5, #48]
 1630 002e 144B     		ldr	r3, .L86+16
 1631 0030 1449     		ldr	r1, .L86+20
 1632 0032 9847     		blx	r3
ARM GAS  /tmp/ccs5LAM9.s 			page 42


 1633              	.LVL130:
 1634              	.L83:
 683:src/lcd.c     ****   }
 684:src/lcd.c     ****   t20->inv = !dots[RCL_annun];
 1635              		.loc 1 684 3 view .LVU279
 1636              		.loc 1 684 14 is_stmt 0 view .LVU280
 1637 0034 94F88A30 		ldrb	r3, [r4, #138]	@ zero_extendqisi2
 1638              		.loc 1 684 3 view .LVU281
 1639 0038 0E4C     		ldr	r4, .L86+4
 685:src/lcd.c     ****   lcd_setXY (t20, 365, Y_ANNUNC-50); // 70 is y_ann
 1640              		.loc 1 685 3 view .LVU282
 1641 003a 104D     		ldr	r5, .L86+12
 684:src/lcd.c     ****   lcd_setXY (t20, 365, Y_ANNUNC-50); // 70 is y_ann
 1642              		.loc 1 684 3 view .LVU283
 1643 003c 206B     		ldr	r0, [r4, #48]
 684:src/lcd.c     ****   lcd_setXY (t20, 365, Y_ANNUNC-50); // 70 is y_ann
 1644              		.loc 1 684 14 view .LVU284
 1645 003e B3FA83F3 		clz	r3, r3
 1646 0042 5B09     		lsrs	r3, r3, #5
 1647 0044 4374     		strb	r3, [r0, #17]
 1648              		.loc 1 685 3 is_stmt 1 view .LVU285
 1649 0046 1922     		movs	r2, #25
 1650 0048 40F26D11 		movw	r1, #365
 1651 004c A847     		blx	r5
 1652              	.LVL131:
 686:src/lcd.c     ****   lcd_writeText(t20, "RUN");
 1653              		.loc 1 686 3 view .LVU286
 1654 004e 0C4B     		ldr	r3, .L86+16
 1655 0050 206B     		ldr	r0, [r4, #48]
 1656 0052 0D49     		ldr	r1, .L86+24
 1657 0054 9847     		blx	r3
 1658              	.LVL132:
 687:src/lcd.c     ****   t20->inv = 0;
 1659              		.loc 1 687 3 view .LVU287
 1660              		.loc 1 687 12 is_stmt 0 view .LVU288
 1661 0056 236B     		ldr	r3, [r4, #48]
 1662 0058 0022     		movs	r2, #0
 1663 005a 5A74     		strb	r2, [r3, #17]
 688:src/lcd.c     **** }
 1664              		.loc 1 688 1 view .LVU289
 1665 005c 38BD     		pop	{r3, r4, r5, pc}
 1666              	.L85:
 677:src/lcd.c     ****     lcd_writeText(t20, "eRPN");
 1667              		.loc 1 677 5 is_stmt 1 view .LVU290
 1668 005e 40F26311 		movw	r1, #355
 1669 0062 9847     		blx	r3
 1670              	.LVL133:
 678:src/lcd.c     ****   }
 1671              		.loc 1 678 5 view .LVU291
 1672 0064 286B     		ldr	r0, [r5, #48]
 1673 0066 064B     		ldr	r3, .L86+16
 1674 0068 0849     		ldr	r1, .L86+28
 1675 006a 9847     		blx	r3
 1676              	.LVL134:
 1677 006c E2E7     		b	.L83
 1678              	.L87:
 1679 006e 00BF     		.align	2
ARM GAS  /tmp/ccs5LAM9.s 			page 43


 1680              	.L86:
 1681 0070 00000000 		.word	.LANCHOR0
 1682 0074 00200010 		.word	268443648
 1683 0078 00000000 		.word	main_ram
 1684 007c 6D020008 		.word	134218349
 1685 0080 7D020008 		.word	134218365
 1686 0084 08000000 		.word	.LC1
 1687 0088 0C000000 		.word	.LC2
 1688 008c 00000000 		.word	.LC0
 1689              		.cfi_endproc
 1690              	.LFE30:
 1692              		.section	.rodata.draw_LEQ.str1.4,"aMS",%progbits,1
 1693              		.align	2
 1694              	.LC3:
 1695 0000 435F4C4B 		.ascii	"C_LK\000"
 1695      00
 1696 0005 000000   		.align	2
 1697              	.LC4:
 1698 0008 3D00     		.ascii	"=\000"
 1699              		.section	.text.draw_LEQ,"ax",%progbits
 1700              		.align	1
 1701              		.p2align 2,,3
 1702              		.global	draw_LEQ
 1703              		.syntax unified
 1704              		.thumb
 1705              		.thumb_func
 1706              		.fpu fpv4-sp-d16
 1708              	draw_LEQ:
 1709              	.LFB31:
 689:src/lcd.c     **** 
 690:src/lcd.c     **** void draw_LEQ(void) { // little equals
 1710              		.loc 1 690 21 view -0
 1711              		.cfi_startproc
 1712              		@ args = 0, pretend = 0, frame = 0
 1713              		@ frame_needed = 0, uses_anonymous_args = 0
 691:src/lcd.c     ****   t20->inv = !dots[LIT_EQ];
 1714              		.loc 1 691 3 view .LVU293
 690:src/lcd.c     ****   t20->inv = !dots[LIT_EQ];
 1715              		.loc 1 690 21 is_stmt 0 view .LVU294
 1716 0000 38B5     		push	{r3, r4, r5, lr}
 1717              		.cfi_def_cfa_offset 16
 1718              		.cfi_offset 3, -16
 1719              		.cfi_offset 4, -12
 1720              		.cfi_offset 5, -8
 1721              		.cfi_offset 14, -4
 1722              		.loc 1 691 19 view .LVU295
 1723 0002 154B     		ldr	r3, .L99
 1724              		.loc 1 691 3 view .LVU296
 1725 0004 154C     		ldr	r4, .L99+4
 1726              		.loc 1 691 14 view .LVU297
 1727 0006 93F88430 		ldrb	r3, [r3, #132]	@ zero_extendqisi2
 1728              		.loc 1 691 3 view .LVU298
 1729 000a 206B     		ldr	r0, [r4, #48]
 692:src/lcd.c     ****   lcd_setXY (t20, 360, Y_ANNUNC-70);
 1730              		.loc 1 692 3 view .LVU299
 1731 000c 144D     		ldr	r5, .L99+8
 691:src/lcd.c     ****   t20->inv = !dots[LIT_EQ];
ARM GAS  /tmp/ccs5LAM9.s 			page 44


 1732              		.loc 1 691 14 view .LVU300
 1733 000e B3FA83F3 		clz	r3, r3
 1734 0012 5B09     		lsrs	r3, r3, #5
 1735 0014 4374     		strb	r3, [r0, #17]
 1736              		.loc 1 692 3 is_stmt 1 view .LVU301
 1737 0016 0522     		movs	r2, #5
 1738 0018 4FF4B471 		mov	r1, #360
 1739 001c A847     		blx	r5
 1740              	.LVL135:
 693:src/lcd.c     **** #ifdef INCLUDE_C_LOCK
 694:src/lcd.c     ****   if (C_LOCKED) {
 1741              		.loc 1 694 3 view .LVU302
 1742              		.loc 1 694 7 is_stmt 0 view .LVU303
 1743 001e 114B     		ldr	r3, .L99+12
 1744 0020 1B68     		ldr	r3, [r3]
 1745 0022 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
 1746              		.loc 1 694 6 view .LVU304
 1747 0026 5207     		lsls	r2, r2, #29
 1748 0028 03D5     		bpl	.L89
 1749              		.loc 1 694 7 discriminator 1 view .LVU305
 1750 002a 93F8DE37 		ldrb	r3, [r3, #2014]	@ zero_extendqisi2
 1751 002e 5B07     		lsls	r3, r3, #29
 1752 0030 09D4     		bmi	.L98
 1753              	.L89:
 695:src/lcd.c     ****     lcd_writeText(t20, "C_LK");
 696:src/lcd.c     ****   }
 697:src/lcd.c     ****   else {
 698:src/lcd.c     ****     lcd_writeText(t20, "=");
 1754              		.loc 1 698 5 is_stmt 1 view .LVU306
 1755 0032 0A4A     		ldr	r2, .L99+4
 1756 0034 0C4B     		ldr	r3, .L99+16
 1757 0036 106B     		ldr	r0, [r2, #48]
 1758 0038 0C49     		ldr	r1, .L99+20
 1759 003a 9847     		blx	r3
 1760              	.LVL136:
 699:src/lcd.c     ****   }
 700:src/lcd.c     **** #else
 701:src/lcd.c     ****   lcd_writeText(t20, "=");
 702:src/lcd.c     **** #endif
 703:src/lcd.c     ****   t20->inv = 0;
 1761              		.loc 1 703 3 view .LVU307
 1762 003c 074B     		ldr	r3, .L99+4
 1763              		.loc 1 703 12 is_stmt 0 view .LVU308
 1764 003e 1B6B     		ldr	r3, [r3, #48]
 1765 0040 0022     		movs	r2, #0
 1766 0042 5A74     		strb	r2, [r3, #17]
 704:src/lcd.c     **** }
 1767              		.loc 1 704 1 view .LVU309
 1768 0044 38BD     		pop	{r3, r4, r5, pc}
 1769              	.L98:
 695:src/lcd.c     ****     lcd_writeText(t20, "C_LK");
 1770              		.loc 1 695 5 is_stmt 1 view .LVU310
 1771 0046 084B     		ldr	r3, .L99+16
 1772 0048 206B     		ldr	r0, [r4, #48]
 1773 004a 0949     		ldr	r1, .L99+24
 1774 004c 9847     		blx	r3
 1775              	.LVL137:
ARM GAS  /tmp/ccs5LAM9.s 			page 45


 703:src/lcd.c     **** }
 1776              		.loc 1 703 3 view .LVU311
 1777 004e 034B     		ldr	r3, .L99+4
 703:src/lcd.c     **** }
 1778              		.loc 1 703 12 is_stmt 0 view .LVU312
 1779 0050 1B6B     		ldr	r3, [r3, #48]
 1780 0052 0022     		movs	r2, #0
 1781 0054 5A74     		strb	r2, [r3, #17]
 1782              		.loc 1 704 1 view .LVU313
 1783 0056 38BD     		pop	{r3, r4, r5, pc}
 1784              	.L100:
 1785              		.align	2
 1786              	.L99:
 1787 0058 00000000 		.word	.LANCHOR0
 1788 005c 00200010 		.word	268443648
 1789 0060 6D020008 		.word	134218349
 1790 0064 00000000 		.word	main_ram
 1791 0068 7D020008 		.word	134218365
 1792 006c 08000000 		.word	.LC4
 1793 0070 00000000 		.word	.LC3
 1794              		.cfi_endproc
 1795              	.LFE31:
 1797              		.section	.rodata.draw_PRT.str1.4,"aMS",%progbits,1
 1798              		.align	2
 1799              	.LC5:
 1800 0000 50525400 		.ascii	"PRT\000"
 1801              		.section	.text.draw_PRT,"ax",%progbits
 1802              		.align	1
 1803              		.p2align 2,,3
 1804              		.global	draw_PRT
 1805              		.syntax unified
 1806              		.thumb
 1807              		.thumb_func
 1808              		.fpu fpv4-sp-d16
 1810              	draw_PRT:
 1811              	.LFB32:
 705:src/lcd.c     **** 
 706:src/lcd.c     **** void draw_PRT (void) {
 1812              		.loc 1 706 22 is_stmt 1 view -0
 1813              		.cfi_startproc
 1814              		@ args = 0, pretend = 0, frame = 0
 1815              		@ frame_needed = 0, uses_anonymous_args = 0
 707:src/lcd.c     ****   t20->inv = !UState.print_on;
 1816              		.loc 1 707 3 view .LVU315
 1817              		.loc 1 707 14 is_stmt 0 view .LVU316
 1818 0000 0A4B     		ldr	r3, .L103
 1819 0002 1B68     		ldr	r3, [r3]
 706:src/lcd.c     ****   t20->inv = !UState.print_on;
 1820              		.loc 1 706 22 view .LVU317
 1821 0004 70B5     		push	{r4, r5, r6, lr}
 1822              		.cfi_def_cfa_offset 16
 1823              		.cfi_offset 4, -16
 1824              		.cfi_offset 5, -12
 1825              		.cfi_offset 6, -8
 1826              		.cfi_offset 14, -4
 1827              		.loc 1 707 12 view .LVU318
 1828 0006 93F8E437 		ldrb	r3, [r3, #2020]	@ zero_extendqisi2
ARM GAS  /tmp/ccs5LAM9.s 			page 46


 1829              		.loc 1 707 3 view .LVU319
 1830 000a 094C     		ldr	r4, .L103+4
 708:src/lcd.c     ****   lcd_setXY(t20, 250, Y_ANNUNC-70);
 1831              		.loc 1 708 3 view .LVU320
 1832 000c 094D     		ldr	r5, .L103+8
 707:src/lcd.c     ****   t20->inv = !UState.print_on;
 1833              		.loc 1 707 3 view .LVU321
 1834 000e 206B     		ldr	r0, [r4, #48]
 707:src/lcd.c     ****   t20->inv = !UState.print_on;
 1835              		.loc 1 707 12 view .LVU322
 1836 0010 DB43     		mvns	r3, r3
 1837 0012 03F00103 		and	r3, r3, #1
 1838 0016 4374     		strb	r3, [r0, #17]
 1839              		.loc 1 708 3 is_stmt 1 view .LVU323
 1840 0018 FA21     		movs	r1, #250
 1841 001a 0522     		movs	r2, #5
 1842 001c A847     		blx	r5
 1843              	.LVL138:
 709:src/lcd.c     ****   lcd_writeText(t20,"PRT");
 1844              		.loc 1 709 3 view .LVU324
 1845 001e 206B     		ldr	r0, [r4, #48]
 1846 0020 054B     		ldr	r3, .L103+12
 1847 0022 0649     		ldr	r1, .L103+16
 710:src/lcd.c     **** }
 1848              		.loc 1 710 1 is_stmt 0 view .LVU325
 1849 0024 BDE87040 		pop	{r4, r5, r6, lr}
 1850              		.cfi_restore 14
 1851              		.cfi_restore 6
 1852              		.cfi_restore 5
 1853              		.cfi_restore 4
 1854              		.cfi_def_cfa_offset 0
 709:src/lcd.c     ****   lcd_writeText(t20,"PRT");
 1855              		.loc 1 709 3 view .LVU326
 1856 0028 1847     		bx	r3	@ indirect register sibling call
 1857              	.LVL139:
 1858              	.L104:
 1859 002a 00BF     		.align	2
 1860              	.L103:
 1861 002c 00000000 		.word	main_ram
 1862 0030 00200010 		.word	268443648
 1863 0034 6D020008 		.word	134218349
 1864 0038 7D020008 		.word	134218365
 1865 003c 00000000 		.word	.LC5
 1866              		.cfi_endproc
 1867              	.LFE32:
 1869              		.section	.rodata.show_disp.str1.4,"aMS",%progbits,1
 1870              		.align	2
 1871              	.LC6:
 1872 0000 414C5048 		.ascii	"ALPHA\000"
 1872      4100
 1873 0006 0000     		.align	2
 1874              	.LC7:
 1875 0008 533A3800 		.ascii	"S:8\000"
 1876              		.align	2
 1877              	.LC8:
 1878 000c 533A3400 		.ascii	"S:4\000"
 1879              		.align	2
ARM GAS  /tmp/ccs5LAM9.s 			page 47


 1880              	.LC9:
 1881 0010 50474D00 		.ascii	"PGM\000"
 1882              		.align	2
 1883              	.LC10:
 1884 0014 52414400 		.ascii	"RAD\000"
 1885              		.align	2
 1886              	.LC11:
 1887 0018 44454700 		.ascii	"DEG\000"
 1888              		.section	.text.show_disp,"ax",%progbits
 1889              		.align	1
 1890              		.p2align 2,,3
 1891              		.global	show_disp
 1892              		.syntax unified
 1893              		.thumb
 1894              		.thumb_func
 1895              		.fpu fpv4-sp-d16
 1897              	show_disp:
 1898              	.LFB25:
 206:src/lcd.c     ****   // It may be fast enough. It does mean that clearing everything first is needed,
 1899              		.loc 1 206 22 is_stmt 1 view -0
 1900              		.cfi_startproc
 1901              		@ args = 0, pretend = 0, frame = 0
 1902              		@ frame_needed = 0, uses_anonymous_args = 0
 210:src/lcd.c     **** 	uint32_t x;
 1903              		.loc 1 210 9 view .LVU328
 211:src/lcd.c     **** 	const uint32_t xleft = 26;
 1904              		.loc 1 211 2 view .LVU329
 212:src/lcd.c     **** 	const uint32_t ytop = 130; // was 170
 1905              		.loc 1 212 2 view .LVU330
 1906              	.LVL140:
 213:src/lcd.c     **** 	const uint32_t dwidth = 25;
 1907              		.loc 1 213 2 view .LVU331
 214:src/lcd.c     **** 	const uint32_t xleft_exp = 344;
 1908              		.loc 1 214 2 view .LVU332
 215:src/lcd.c     **** 	const uint32_t ytop_exp = 130; // was 170
 1909              		.loc 1 215 2 view .LVU333
 216:src/lcd.c     **** 	const uint32_t dwidth_exp = 18;
 1910              		.loc 1 216 2 view .LVU334
 217:src/lcd.c     **** 	const uint32_t y_ann = Y_ANNUNC;
 1911              		.loc 1 217 2 view .LVU335
 218:src/lcd.c     ****         /* Segments 0 - 107 are the main digits */
 1912              		.loc 1 218 2 view .LVU336
 220:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 1913              		.loc 1 220 9 view .LVU337
 220:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 1914              		.loc 1 220 19 view .LVU338
 206:src/lcd.c     ****   // It may be fast enough. It does mean that clearing everything first is needed,
 1915              		.loc 1 206 22 is_stmt 0 view .LVU339
 1916 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1917              		.cfi_def_cfa_offset 36
 1918              		.cfi_offset 4, -36
 1919              		.cfi_offset 5, -32
 1920              		.cfi_offset 6, -28
 1921              		.cfi_offset 7, -24
 1922              		.cfi_offset 8, -20
 1923              		.cfi_offset 9, -16
 1924              		.cfi_offset 10, -12
ARM GAS  /tmp/ccs5LAM9.s 			page 48


 1925              		.cfi_offset 11, -8
 1926              		.cfi_offset 14, -4
 1927 0004 DFF8C0B0 		ldr	fp, .L242+4
 1928              	.LBB65:
 1929              	.LBB66:
 159:src/lcd.c     **** }
 1930              		.loc 1 159 3 view .LVU340
 1931 0008 2E4F     		ldr	r7, .L242
 1932              	.LBE66:
 1933              	.LBE65:
 206:src/lcd.c     ****   // It may be fast enough. It does mean that clearing everything first is needed,
 1934              		.loc 1 206 22 view .LVU341
 1935 000a 83B0     		sub	sp, sp, #12
 1936              		.cfi_def_cfa_offset 48
 206:src/lcd.c     ****   // It may be fast enough. It does mean that clearing everything first is needed,
 1937              		.loc 1 206 22 view .LVU342
 1938 000c 5E46     		mov	r6, fp
 1939 000e 5C46     		mov	r4, fp
 1940 0010 1A25     		movs	r5, #26
 1941 0012 24E0     		b	.L115
 1942              	.LVL141:
 1943              	.L106:
 226:src/lcd.c     **** 		  left_side_top (x, ytop);
 1944              		.loc 1 226 17 is_stmt 1 view .LVU343
 226:src/lcd.c     **** 		  left_side_top (x, ytop);
 1945              		.loc 1 226 20 is_stmt 0 view .LVU344
 1946 0014 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1947 0016 002B     		cmp	r3, #0
 1948 0018 2BD1     		bne	.L225
 1949              	.L107:
 229:src/lcd.c     **** 		  right_side_top (x, ytop);
 1950              		.loc 1 229 17 is_stmt 1 view .LVU345
 229:src/lcd.c     **** 		  right_side_top (x, ytop);
 1951              		.loc 1 229 20 is_stmt 0 view .LVU346
 1952 001a E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
 1953 001c 002B     		cmp	r3, #0
 1954 001e 2FD1     		bne	.L226
 1955              	.L108:
 232:src/lcd.c     **** 		  middle (x, ytop);
 1956              		.loc 1 232 17 is_stmt 1 view .LVU347
 232:src/lcd.c     **** 		  middle (x, ytop);
 1957              		.loc 1 232 20 is_stmt 0 view .LVU348
 1958 0020 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 1959 0022 002B     		cmp	r3, #0
 1960 0024 33D1     		bne	.L227
 1961              	.L109:
 235:src/lcd.c     **** 		  left_side_bottom (x, ytop);
 1962              		.loc 1 235 17 is_stmt 1 view .LVU349
 235:src/lcd.c     **** 		  left_side_bottom (x, ytop);
 1963              		.loc 1 235 20 is_stmt 0 view .LVU350
 1964 0026 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 1965 0028 002B     		cmp	r3, #0
 1966 002a 37D1     		bne	.L228
 1967              	.L110:
 238:src/lcd.c     **** 		  right_side_bottom (x, ytop);
 1968              		.loc 1 238 17 is_stmt 1 view .LVU351
 238:src/lcd.c     **** 		  right_side_bottom (x, ytop);
ARM GAS  /tmp/ccs5LAM9.s 			page 49


 1969              		.loc 1 238 20 is_stmt 0 view .LVU352
 1970 002c A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 1971 002e 002B     		cmp	r3, #0
 1972 0030 3BD1     		bne	.L229
 1973              	.L111:
 241:src/lcd.c     **** 		  bottom (x, ytop);
 1974              		.loc 1 241 17 is_stmt 1 view .LVU353
 241:src/lcd.c     **** 		  bottom (x, ytop);
 1975              		.loc 1 241 20 is_stmt 0 view .LVU354
 1976 0032 6379     		ldrb	r3, [r4, #5]	@ zero_extendqisi2
 1977 0034 002B     		cmp	r3, #0
 1978 0036 3FD1     		bne	.L230
 1979              	.L112:
 244:src/lcd.c     **** 		  decimal (x, ytop);
 1980              		.loc 1 244 17 is_stmt 1 view .LVU355
 244:src/lcd.c     **** 		  decimal (x, ytop);
 1981              		.loc 1 244 20 is_stmt 0 view .LVU356
 1982 0038 E379     		ldrb	r3, [r4, #7]	@ zero_extendqisi2
 1983 003a 3BB1     		cbz	r3, .L113
 245:src/lcd.c     ****                 }
 1984              		.loc 1 245 5 is_stmt 1 view .LVU357
 1985              	.LVL142:
 1986              	.LBB68:
 1987              	.LBI65:
 158:src/lcd.c     ****   lcd_fill_rect (i+19, j+40, 5, 5, 0xff);
 1988              		.loc 1 158 6 view .LVU358
 1989              	.LBB67:
 159:src/lcd.c     **** }
 1990              		.loc 1 159 3 view .LVU359
 1991 003c FF22     		movs	r2, #255
 1992 003e 0523     		movs	r3, #5
 1993 0040 0092     		str	r2, [sp]
 1994 0042 AA21     		movs	r1, #170
 1995 0044 1A46     		mov	r2, r3
 1996 0046 05F11300 		add	r0, r5, #19
 1997 004a B847     		blx	r7
 1998              	.LVL143:
 1999              	.L113:
 159:src/lcd.c     **** }
 2000              		.loc 1 159 3 is_stmt 0 view .LVU360
 2001              	.LBE67:
 2002              	.LBE68:
 247:src/lcd.c     **** 		  comma (x, ytop);
 2003              		.loc 1 247 17 is_stmt 1 view .LVU361
 247:src/lcd.c     **** 		  comma (x, ytop);
 2004              		.loc 1 247 20 is_stmt 0 view .LVU362
 2005 004c 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 2006 004e 002B     		cmp	r3, #0
 2007 0050 3CD1     		bne	.L231
 220:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 2008              		.loc 1 220 37 is_stmt 1 discriminator 2 view .LVU363
 220:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 2009              		.loc 1 220 19 discriminator 2 view .LVU364
 2010 0052 1935     		adds	r5, r5, #25
 2011              	.LVL144:
 220:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 2012              		.loc 1 220 9 is_stmt 0 discriminator 2 view .LVU365
ARM GAS  /tmp/ccs5LAM9.s 			page 50


 2013 0054 B5F5A37F 		cmp	r5, #326
 2014 0058 04F10904 		add	r4, r4, #9
 2015              	.LVL145:
 220:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 2016              		.loc 1 220 9 discriminator 2 view .LVU366
 2017 005c 40D0     		beq	.L232
 2018              	.LVL146:
 2019              	.L115:
 221:src/lcd.c     ****                 x = xleft + dwidth*i;
 2020              		.loc 1 221 17 is_stmt 1 view .LVU367
 222:src/lcd.c     ****                 if (dots[p]) { // top
 2021              		.loc 1 222 17 view .LVU368
 223:src/lcd.c     **** 		  top (x, ytop);
 2022              		.loc 1 223 17 view .LVU369
 223:src/lcd.c     **** 		  top (x, ytop);
 2023              		.loc 1 223 20 is_stmt 0 view .LVU370
 2024 005e 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2025 0060 002B     		cmp	r3, #0
 2026 0062 D7D0     		beq	.L106
 224:src/lcd.c     ****                 }
 2027              		.loc 1 224 5 is_stmt 1 view .LVU371
 2028 0064 8221     		movs	r1, #130
 2029 0066 2846     		mov	r0, r5
 2030 0068 FFF7FEFF 		bl	top
 2031              	.LVL147:
 226:src/lcd.c     **** 		  left_side_top (x, ytop);
 2032              		.loc 1 226 17 view .LVU372
 226:src/lcd.c     **** 		  left_side_top (x, ytop);
 2033              		.loc 1 226 20 is_stmt 0 view .LVU373
 2034 006c 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 2035 006e 002B     		cmp	r3, #0
 2036 0070 D3D0     		beq	.L107
 2037              	.L225:
 227:src/lcd.c     ****                 }
 2038              		.loc 1 227 5 is_stmt 1 view .LVU374
 2039              	.LVL148:
 2040              	.LBB69:
 2041              	.LBI69:
 122:src/lcd.c     ****   left_side(i, j);
 2042              		.loc 1 122 6 view .LVU375
 2043              	.LBB70:
 123:src/lcd.c     **** }
 2044              		.loc 1 123 3 view .LVU376
 2045 0072 8221     		movs	r1, #130
 2046 0074 2846     		mov	r0, r5
 2047 0076 FFF7FEFF 		bl	left_side
 2048              	.LVL149:
 123:src/lcd.c     **** }
 2049              		.loc 1 123 3 is_stmt 0 view .LVU377
 2050              	.LBE70:
 2051              	.LBE69:
 229:src/lcd.c     **** 		  right_side_top (x, ytop);
 2052              		.loc 1 229 17 is_stmt 1 view .LVU378
 229:src/lcd.c     **** 		  right_side_top (x, ytop);
 2053              		.loc 1 229 20 is_stmt 0 view .LVU379
 2054 007a E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
 2055 007c 002B     		cmp	r3, #0
ARM GAS  /tmp/ccs5LAM9.s 			page 51


 2056 007e CFD0     		beq	.L108
 2057              	.L226:
 230:src/lcd.c     ****                 }
 2058              		.loc 1 230 5 is_stmt 1 view .LVU380
 2059              	.LVL150:
 2060              	.LBB71:
 2061              	.LBI71:
 135:src/lcd.c     ****   right_side(i, j);
 2062              		.loc 1 135 6 view .LVU381
 2063              	.LBB72:
 136:src/lcd.c     **** }
 2064              		.loc 1 136 3 view .LVU382
 2065 0080 8221     		movs	r1, #130
 2066 0082 2846     		mov	r0, r5
 2067 0084 FFF7FEFF 		bl	right_side
 2068              	.LVL151:
 136:src/lcd.c     **** }
 2069              		.loc 1 136 3 is_stmt 0 view .LVU383
 2070              	.LBE72:
 2071              	.LBE71:
 232:src/lcd.c     **** 		  middle (x, ytop);
 2072              		.loc 1 232 17 is_stmt 1 view .LVU384
 232:src/lcd.c     **** 		  middle (x, ytop);
 2073              		.loc 1 232 20 is_stmt 0 view .LVU385
 2074 0088 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 2075 008a 002B     		cmp	r3, #0
 2076 008c CBD0     		beq	.L109
 2077              	.L227:
 233:src/lcd.c     ****                 }
 2078              		.loc 1 233 5 is_stmt 1 view .LVU386
 2079 008e 8221     		movs	r1, #130
 2080 0090 2846     		mov	r0, r5
 2081 0092 FFF7FEFF 		bl	middle
 2082              	.LVL152:
 235:src/lcd.c     **** 		  left_side_bottom (x, ytop);
 2083              		.loc 1 235 17 view .LVU387
 235:src/lcd.c     **** 		  left_side_bottom (x, ytop);
 2084              		.loc 1 235 20 is_stmt 0 view .LVU388
 2085 0096 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2086 0098 002B     		cmp	r3, #0
 2087 009a C7D0     		beq	.L110
 2088              	.L228:
 236:src/lcd.c     ****                 }
 2089              		.loc 1 236 5 is_stmt 1 view .LVU389
 2090              	.LVL153:
 2091              	.LBB73:
 2092              	.LBI73:
 125:src/lcd.c     ****   left_side(i-2, j+19);
 2093              		.loc 1 125 6 view .LVU390
 2094              	.LBB74:
 126:src/lcd.c     **** }
 2095              		.loc 1 126 3 view .LVU391
 2096 009c 9521     		movs	r1, #149
 2097 009e A81E     		subs	r0, r5, #2
 2098 00a0 FFF7FEFF 		bl	left_side
 2099              	.LVL154:
 126:src/lcd.c     **** }
ARM GAS  /tmp/ccs5LAM9.s 			page 52


 2100              		.loc 1 126 3 is_stmt 0 view .LVU392
 2101              	.LBE74:
 2102              	.LBE73:
 238:src/lcd.c     **** 		  right_side_bottom (x, ytop);
 2103              		.loc 1 238 17 is_stmt 1 view .LVU393
 238:src/lcd.c     **** 		  right_side_bottom (x, ytop);
 2104              		.loc 1 238 20 is_stmt 0 view .LVU394
 2105 00a4 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2106 00a6 002B     		cmp	r3, #0
 2107 00a8 C3D0     		beq	.L111
 2108              	.L229:
 239:src/lcd.c     ****                 }
 2109              		.loc 1 239 5 is_stmt 1 view .LVU395
 2110              	.LVL155:
 2111              	.LBB75:
 2112              	.LBI75:
 138:src/lcd.c     ****   right_side(i-2, j+19);
 2113              		.loc 1 138 6 view .LVU396
 2114              	.LBB76:
 139:src/lcd.c     **** }
 2115              		.loc 1 139 3 view .LVU397
 2116 00aa 9521     		movs	r1, #149
 2117 00ac A81E     		subs	r0, r5, #2
 2118 00ae FFF7FEFF 		bl	right_side
 2119              	.LVL156:
 139:src/lcd.c     **** }
 2120              		.loc 1 139 3 is_stmt 0 view .LVU398
 2121              	.LBE76:
 2122              	.LBE75:
 241:src/lcd.c     **** 		  bottom (x, ytop);
 2123              		.loc 1 241 17 is_stmt 1 view .LVU399
 241:src/lcd.c     **** 		  bottom (x, ytop);
 2124              		.loc 1 241 20 is_stmt 0 view .LVU400
 2125 00b2 6379     		ldrb	r3, [r4, #5]	@ zero_extendqisi2
 2126 00b4 002B     		cmp	r3, #0
 2127 00b6 BFD0     		beq	.L112
 2128              	.L230:
 242:src/lcd.c     ****                 }
 2129              		.loc 1 242 5 is_stmt 1 view .LVU401
 2130 00b8 8221     		movs	r1, #130
 2131 00ba 2846     		mov	r0, r5
 2132 00bc FFF7FEFF 		bl	bottom
 2133              	.LVL157:
 2134 00c0 BAE7     		b	.L112
 2135              	.L243:
 2136 00c2 00BF     		.align	2
 2137              	.L242:
 2138 00c4 3D020008 		.word	134218301
 2139 00c8 00000000 		.word	.LANCHOR0
 2140              	.L231:
 248:src/lcd.c     ****                 }
 2141              		.loc 1 248 5 view .LVU402
 2142 00cc 2846     		mov	r0, r5
 2143 00ce 8221     		movs	r1, #130
 2144 00d0 1935     		adds	r5, r5, #25
 2145              	.LVL158:
 248:src/lcd.c     ****                 }
ARM GAS  /tmp/ccs5LAM9.s 			page 53


 2146              		.loc 1 248 5 is_stmt 0 view .LVU403
 2147 00d2 FFF7FEFF 		bl	comma
 2148              	.LVL159:
 220:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 2149              		.loc 1 220 37 is_stmt 1 view .LVU404
 220:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 2150              		.loc 1 220 19 view .LVU405
 220:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 2151              		.loc 1 220 9 is_stmt 0 view .LVU406
 2152 00d6 B5F5A37F 		cmp	r5, #326
 2153 00da 04F10904 		add	r4, r4, #9
 2154              	.LVL160:
 220:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 2155              		.loc 1 220 9 view .LVU407
 2156 00de BED1     		bne	.L115
 2157              	.LVL161:
 2158              	.L232:
 220:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 2159              		.loc 1 220 9 view .LVU408
 2160 00e0 A34C     		ldr	r4, .L244
 2161 00e2 4FF4AC75 		mov	r5, #344
 2162              	.L123:
 253:src/lcd.c     ****                 x = xleft_exp + dwidth_exp*i;
 2163              		.loc 1 253 17 is_stmt 1 view .LVU409
 2164              	.LVL162:
 254:src/lcd.c     ****                 if (dots[p]) { // top
 2165              		.loc 1 254 17 view .LVU410
 255:src/lcd.c     **** 		  exp_top (x, ytop_exp);
 2166              		.loc 1 255 17 view .LVU411
 255:src/lcd.c     **** 		  exp_top (x, ytop_exp);
 2167              		.loc 1 255 20 is_stmt 0 view .LVU412
 2168 00e6 94F86C30 		ldrb	r3, [r4, #108]	@ zero_extendqisi2
 2169 00ea 002B     		cmp	r3, #0
 2170 00ec 40F02181 		bne	.L233
 2171              	.L116:
 258:src/lcd.c     **** 		  exp_left_side_top (x, ytop_exp);
 2172              		.loc 1 258 17 is_stmt 1 view .LVU413
 258:src/lcd.c     **** 		  exp_left_side_top (x, ytop_exp);
 2173              		.loc 1 258 20 is_stmt 0 view .LVU414
 2174 00f0 94F86D30 		ldrb	r3, [r4, #109]	@ zero_extendqisi2
 2175 00f4 002B     		cmp	r3, #0
 2176 00f6 40F01781 		bne	.L234
 2177              	.L117:
 261:src/lcd.c     **** 		  exp_right_side_top (x, ytop_exp);
 2178              		.loc 1 261 17 is_stmt 1 view .LVU415
 261:src/lcd.c     **** 		  exp_right_side_top (x, ytop_exp);
 2179              		.loc 1 261 20 is_stmt 0 view .LVU416
 2180 00fa 94F86F30 		ldrb	r3, [r4, #111]	@ zero_extendqisi2
 2181 00fe 002B     		cmp	r3, #0
 2182 0100 40F00D81 		bne	.L235
 2183              	.L118:
 264:src/lcd.c     **** 		  exp_middle (x, ytop_exp);
 2184              		.loc 1 264 17 is_stmt 1 view .LVU417
 264:src/lcd.c     **** 		  exp_middle (x, ytop_exp);
 2185              		.loc 1 264 20 is_stmt 0 view .LVU418
 2186 0104 94F86E30 		ldrb	r3, [r4, #110]	@ zero_extendqisi2
 2187 0108 002B     		cmp	r3, #0
ARM GAS  /tmp/ccs5LAM9.s 			page 54


 2188 010a 40F00381 		bne	.L236
 2189              	.L119:
 267:src/lcd.c     **** 		  exp_left_side_bottom (x, ytop_exp);
 2190              		.loc 1 267 17 is_stmt 1 view .LVU419
 267:src/lcd.c     **** 		  exp_left_side_bottom (x, ytop_exp);
 2191              		.loc 1 267 20 is_stmt 0 view .LVU420
 2192 010e 94F87030 		ldrb	r3, [r4, #112]	@ zero_extendqisi2
 2193 0112 002B     		cmp	r3, #0
 2194 0114 40F0F980 		bne	.L237
 2195              	.L120:
 270:src/lcd.c     **** 		  exp_right_side_bottom (x, ytop_exp);
 2196              		.loc 1 270 17 is_stmt 1 view .LVU421
 270:src/lcd.c     **** 		  exp_right_side_bottom (x, ytop_exp);
 2197              		.loc 1 270 20 is_stmt 0 view .LVU422
 2198 0118 94F87230 		ldrb	r3, [r4, #114]	@ zero_extendqisi2
 2199 011c 002B     		cmp	r3, #0
 2200 011e 40F0EF80 		bne	.L238
 2201              	.L121:
 273:src/lcd.c     **** 		  exp_bottom (x, ytop_exp);
 2202              		.loc 1 273 17 is_stmt 1 view .LVU423
 273:src/lcd.c     **** 		  exp_bottom (x, ytop_exp);
 2203              		.loc 1 273 20 is_stmt 0 view .LVU424
 2204 0122 94F87130 		ldrb	r3, [r4, #113]	@ zero_extendqisi2
 2205 0126 002B     		cmp	r3, #0
 2206 0128 40F0E580 		bne	.L239
 2207              	.L122:
 252:src/lcd.c     ****                 p = i*7+108;
 2208              		.loc 1 252 24 is_stmt 1 discriminator 2 view .LVU425
 252:src/lcd.c     ****                 p = i*7+108;
 2209              		.loc 1 252 19 discriminator 2 view .LVU426
 2210 012c 1235     		adds	r5, r5, #18
 2211              	.LVL163:
 252:src/lcd.c     ****                 p = i*7+108;
 2212              		.loc 1 252 9 is_stmt 0 discriminator 2 view .LVU427
 2213 012e B5F5C77F 		cmp	r5, #398
 2214 0132 04F10704 		add	r4, r4, #7
 2215              	.LVL164:
 252:src/lcd.c     ****                 p = i*7+108;
 2216              		.loc 1 252 9 discriminator 2 view .LVU428
 2217 0136 D6D1     		bne	.L123
 278:src/lcd.c     **** 	  middle (xleft - dwidth, ytop);
 2218              		.loc 1 278 9 is_stmt 1 view .LVU429
 278:src/lcd.c     **** 	  middle (xleft - dwidth, ytop);
 2219              		.loc 1 278 12 is_stmt 0 view .LVU430
 2220 0138 96F88130 		ldrb	r3, [r6, #129]	@ zero_extendqisi2
 2221 013c 002B     		cmp	r3, #0
 2222 013e 40F00881 		bne	.L240
 281:src/lcd.c     **** 	  exp_middle (xleft_exp-dwidth_exp, ytop);
 2223              		.loc 1 281 9 is_stmt 1 view .LVU431
 281:src/lcd.c     **** 	  exp_middle (xleft_exp-dwidth_exp, ytop);
 2224              		.loc 1 281 12 is_stmt 0 view .LVU432
 2225 0142 96F88230 		ldrb	r3, [r6, #130]	@ zero_extendqisi2
 2226 0146 002B     		cmp	r3, #0
 2227 0148 40F00C81 		bne	.L241
 2228              	.L125:
 285:src/lcd.c     **** 	  lcd_fill_rect (250, y_ann-34, 15, 4, 0xff);
 2229              		.loc 1 285 2 is_stmt 1 view .LVU433
ARM GAS  /tmp/ccs5LAM9.s 			page 55


 285:src/lcd.c     **** 	  lcd_fill_rect (250, y_ann-34, 15, 4, 0xff);
 2230              		.loc 1 285 5 is_stmt 0 view .LVU434
 2231 014c 96F88330 		ldrb	r3, [r6, #131]	@ zero_extendqisi2
 2232 0150 6BB1     		cbz	r3, .L126
 286:src/lcd.c     **** 	  lcd_fill_rect (250, y_ann-24, 15, 4, 0xff);
 2233              		.loc 1 286 4 is_stmt 1 view .LVU435
 2234 0152 FF25     		movs	r5, #255
 2235              	.LVL165:
 286:src/lcd.c     **** 	  lcd_fill_rect (250, y_ann-24, 15, 4, 0xff);
 2236              		.loc 1 286 4 is_stmt 0 view .LVU436
 2237 0154 0423     		movs	r3, #4
 2238 0156 0F22     		movs	r2, #15
 2239 0158 2921     		movs	r1, #41
 2240 015a FA20     		movs	r0, #250
 2241 015c 854C     		ldr	r4, .L244+4
 2242              	.LVL166:
 286:src/lcd.c     **** 	  lcd_fill_rect (250, y_ann-24, 15, 4, 0xff);
 2243              		.loc 1 286 4 view .LVU437
 2244 015e 0095     		str	r5, [sp]
 2245 0160 A047     		blx	r4
 2246              	.LVL167:
 287:src/lcd.c     ****         }
 2247              		.loc 1 287 4 is_stmt 1 view .LVU438
 2248 0162 0095     		str	r5, [sp]
 2249 0164 0423     		movs	r3, #4
 2250 0166 0F22     		movs	r2, #15
 2251 0168 3321     		movs	r1, #51
 2252 016a FA20     		movs	r0, #250
 2253 016c A047     		blx	r4
 2254              	.LVL168:
 2255              	.L126:
 289:src/lcd.c     **** 	
 2256              		.loc 1 289 2 view .LVU439
 2257 016e 824B     		ldr	r3, .L244+8
 289:src/lcd.c     **** 	
 2258              		.loc 1 289 11 is_stmt 0 view .LVU440
 2259 0170 1B6B     		ldr	r3, [r3, #48]
 2260 0172 0022     		movs	r2, #0
 2261 0174 5A74     		strb	r2, [r3, #17]
 291:src/lcd.c     **** 	
 2262              		.loc 1 291 2 is_stmt 1 view .LVU441
 2263 0176 FFF7FEFF 		bl	draw_PRT
 2264              	.LVL169:
 298:src/lcd.c     **** 	  lcd_fill_rect(287,y_ann-67,5,12,0xff);
 2265              		.loc 1 298 9 view .LVU442
 298:src/lcd.c     **** 	  lcd_fill_rect(287,y_ann-67,5,12,0xff);
 2266              		.loc 1 298 12 is_stmt 0 view .LVU443
 2267 017a 96F88530 		ldrb	r3, [r6, #133]	@ zero_extendqisi2
 2268 017e 5BB3     		cbz	r3, .L127
 299:src/lcd.c     **** 	  lcd_fill_rect(285,y_ann-55,9,1,0xff);
 2269              		.loc 1 299 4 is_stmt 1 view .LVU444
 2270 0180 FF25     		movs	r5, #255
 2271 0182 7C4C     		ldr	r4, .L244+4
 2272 0184 0095     		str	r5, [sp]
 2273 0186 0C23     		movs	r3, #12
 2274 0188 0522     		movs	r2, #5
 2275 018a 0821     		movs	r1, #8
ARM GAS  /tmp/ccs5LAM9.s 			page 56


 2276 018c 40F21F10 		movw	r0, #287
 2277 0190 A047     		blx	r4
 2278              	.LVL170:
 300:src/lcd.c     **** 	  lcd_fill_rect(286,y_ann-54,7,1,0xff);
 2279              		.loc 1 300 4 view .LVU445
 2280 0192 0123     		movs	r3, #1
 2281 0194 0922     		movs	r2, #9
 2282 0196 1421     		movs	r1, #20
 2283 0198 40F21D10 		movw	r0, #285
 2284 019c 0095     		str	r5, [sp]
 2285 019e A047     		blx	r4
 2286              	.LVL171:
 301:src/lcd.c     **** 	  lcd_fill_rect(287,y_ann-53,5,1,0xff);
 2287              		.loc 1 301 4 view .LVU446
 2288 01a0 0123     		movs	r3, #1
 2289 01a2 0722     		movs	r2, #7
 2290 01a4 1521     		movs	r1, #21
 2291 01a6 4FF48F70 		mov	r0, #286
 2292 01aa 0095     		str	r5, [sp]
 2293 01ac A047     		blx	r4
 2294              	.LVL172:
 302:src/lcd.c     **** 	  lcd_fill_rect(288,y_ann-52,3,1,0xff);
 2295              		.loc 1 302 4 view .LVU447
 2296 01ae 0123     		movs	r3, #1
 2297 01b0 0522     		movs	r2, #5
 2298 01b2 1621     		movs	r1, #22
 2299 01b4 40F21F10 		movw	r0, #287
 2300 01b8 0095     		str	r5, [sp]
 2301 01ba A047     		blx	r4
 2302              	.LVL173:
 303:src/lcd.c     **** 	  lcd_fill_rect(289,y_ann-51,1,1,0xff);
 2303              		.loc 1 303 4 view .LVU448
 2304 01bc 0123     		movs	r3, #1
 2305 01be 0322     		movs	r2, #3
 2306 01c0 1721     		movs	r1, #23
 2307 01c2 4FF49070 		mov	r0, #288
 2308 01c6 0095     		str	r5, [sp]
 2309 01c8 A047     		blx	r4
 2310              	.LVL174:
 304:src/lcd.c     ****         }
 2311              		.loc 1 304 4 view .LVU449
 2312 01ca 0123     		movs	r3, #1
 2313 01cc 0095     		str	r5, [sp]
 2314 01ce 1A46     		mov	r2, r3
 2315 01d0 1821     		movs	r1, #24
 2316 01d2 40F22110 		movw	r0, #289
 2317 01d6 A047     		blx	r4
 2318              	.LVL175:
 2319              	.L127:
 307:src/lcd.c     **** 	  lcd_setXY(t20, 305, y_ann-70);
 2320              		.loc 1 307 2 view .LVU450
 307:src/lcd.c     **** 	  lcd_setXY(t20, 305, y_ann-70);
 2321              		.loc 1 307 5 is_stmt 0 view .LVU451
 2322 01d8 96F88630 		ldrb	r3, [r6, #134]	@ zero_extendqisi2
 2323 01dc 53B1     		cbz	r3, .L128
 308:src/lcd.c     **** 	  lcd_writeText(t20,"ALPHA");
 2324              		.loc 1 308 4 is_stmt 1 view .LVU452
ARM GAS  /tmp/ccs5LAM9.s 			page 57


 2325 01de 664C     		ldr	r4, .L244+8
 2326 01e0 664B     		ldr	r3, .L244+12
 2327 01e2 206B     		ldr	r0, [r4, #48]
 2328 01e4 40F23111 		movw	r1, #305
 2329 01e8 0522     		movs	r2, #5
 2330 01ea 9847     		blx	r3
 2331              	.LVL176:
 309:src/lcd.c     ****         }
 2332              		.loc 1 309 4 view .LVU453
 2333 01ec 206B     		ldr	r0, [r4, #48]
 2334 01ee 644B     		ldr	r3, .L244+16
 2335 01f0 6449     		ldr	r1, .L244+20
 2336 01f2 9847     		blx	r3
 2337              	.LVL177:
 2338              	.L128:
 322:src/lcd.c     **** 	
 2339              		.loc 1 322 2 view .LVU454
 2340 01f4 FFF7FEFF 		bl	draw_LEQ
 2341              	.LVL178:
 324:src/lcd.c     **** 	  //    MOVE(70, 10);   PRINTF("####-");
 2342              		.loc 1 324 2 view .LVU455
 326:src/lcd.c     **** #ifdef MODIFY_BEG_SSIZE8
 2343              		.loc 1 326 9 view .LVU456
 328:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-50);
 2344              		.loc 1 328 2 view .LVU457
 328:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-50);
 2345              		.loc 1 328 5 is_stmt 0 view .LVU458
 2346 01f8 96F88830 		ldrb	r3, [r6, #136]	@ zero_extendqisi2
 329:src/lcd.c     **** 	  lcd_writeText(t20, "S:8");
 2347              		.loc 1 329 4 view .LVU459
 2348 01fc 5E4C     		ldr	r4, .L244+8
 328:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-50);
 2349              		.loc 1 328 5 view .LVU460
 2350 01fe 002B     		cmp	r3, #0
 2351 0200 00F09C80 		beq	.L129
 329:src/lcd.c     **** 	  lcd_writeText(t20, "S:8");
 2352              		.loc 1 329 4 is_stmt 1 view .LVU461
 2353 0204 5D4B     		ldr	r3, .L244+12
 2354 0206 206B     		ldr	r0, [r4, #48]
 2355 0208 40F21D11 		movw	r1, #285
 2356 020c 1922     		movs	r2, #25
 2357 020e 9847     		blx	r3
 2358              	.LVL179:
 330:src/lcd.c     ****         }
 2359              		.loc 1 330 4 view .LVU462
 2360 0210 206B     		ldr	r0, [r4, #48]
 2361 0212 5B4B     		ldr	r3, .L244+16
 2362 0214 5C49     		ldr	r1, .L244+24
 2363 0216 9847     		blx	r3
 2364              	.LVL180:
 2365              	.L130:
 342:src/lcd.c     **** 	  lcd_setXY (t20, 325, y_ann-50);
 2366              		.loc 1 342 2 view .LVU463
 342:src/lcd.c     **** 	  lcd_setXY (t20, 325, y_ann-50);
 2367              		.loc 1 342 5 is_stmt 0 view .LVU464
 2368 0218 96F88930 		ldrb	r3, [r6, #137]	@ zero_extendqisi2
 2369 021c 53B1     		cbz	r3, .L131
ARM GAS  /tmp/ccs5LAM9.s 			page 58


 343:src/lcd.c     **** 	  lcd_writeText(t20, "PGM");
 2370              		.loc 1 343 4 is_stmt 1 view .LVU465
 2371 021e 564C     		ldr	r4, .L244+8
 2372 0220 564B     		ldr	r3, .L244+12
 2373 0222 206B     		ldr	r0, [r4, #48]
 2374 0224 40F24511 		movw	r1, #325
 2375 0228 1922     		movs	r2, #25
 2376 022a 9847     		blx	r3
 2377              	.LVL181:
 344:src/lcd.c     ****         }
 2378              		.loc 1 344 4 view .LVU466
 2379 022c 206B     		ldr	r0, [r4, #48]
 2380 022e 544B     		ldr	r3, .L244+16
 2381 0230 5649     		ldr	r1, .L244+28
 2382 0232 9847     		blx	r3
 2383              	.LVL182:
 2384              	.L131:
 352:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-30);
 2385              		.loc 1 352 2 view .LVU467
 352:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-30);
 2386              		.loc 1 352 5 is_stmt 0 view .LVU468
 2387 0234 96F88B30 		ldrb	r3, [r6, #139]	@ zero_extendqisi2
 2388 0238 53B1     		cbz	r3, .L132
 353:src/lcd.c     **** 	  lcd_writeText(t20, "RAD");
 2389              		.loc 1 353 4 is_stmt 1 view .LVU469
 2390 023a 4F4C     		ldr	r4, .L244+8
 2391 023c 4F4B     		ldr	r3, .L244+12
 2392 023e 206B     		ldr	r0, [r4, #48]
 2393 0240 40F21D11 		movw	r1, #285
 2394 0244 2D22     		movs	r2, #45
 2395 0246 9847     		blx	r3
 2396              	.LVL183:
 354:src/lcd.c     **** 	}
 2397              		.loc 1 354 4 view .LVU470
 2398 0248 206B     		ldr	r0, [r4, #48]
 2399 024a 4D4B     		ldr	r3, .L244+16
 2400 024c 5049     		ldr	r1, .L244+32
 2401 024e 9847     		blx	r3
 2402              	.LVL184:
 2403              	.L132:
 357:src/lcd.c     **** 	  lcd_setXY (t20, 325, y_ann-30);
 2404              		.loc 1 357 2 view .LVU471
 357:src/lcd.c     **** 	  lcd_setXY (t20, 325, y_ann-30);
 2405              		.loc 1 357 5 is_stmt 0 view .LVU472
 2406 0250 96F88C30 		ldrb	r3, [r6, #140]	@ zero_extendqisi2
 2407 0254 53B1     		cbz	r3, .L133
 358:src/lcd.c     **** 	  lcd_writeText(t20, "DEG");
 2408              		.loc 1 358 4 is_stmt 1 view .LVU473
 2409 0256 484C     		ldr	r4, .L244+8
 2410 0258 484B     		ldr	r3, .L244+12
 2411 025a 206B     		ldr	r0, [r4, #48]
 2412 025c 40F24511 		movw	r1, #325
 2413 0260 2D22     		movs	r2, #45
 2414 0262 9847     		blx	r3
 2415              	.LVL185:
 359:src/lcd.c     ****         }
 2416              		.loc 1 359 4 view .LVU474
ARM GAS  /tmp/ccs5LAM9.s 			page 59


 2417 0264 206B     		ldr	r0, [r4, #48]
 2418 0266 464B     		ldr	r3, .L244+16
 2419 0268 4A49     		ldr	r1, .L244+36
 2420 026a 9847     		blx	r3
 2421              	.LVL186:
 2422              	.L133:
 370:src/lcd.c     **** 	
 2423              		.loc 1 370 2 view .LVU475
 2424 026c FFF7FEFF 		bl	draw_RPN_RCL
 2425              	.LVL187:
 373:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 2426              		.loc 1 373 9 view .LVU476
 373:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 2427              		.loc 1 373 19 view .LVU477
 376:src/lcd.c     **** 	    }
 2428              		.loc 1 376 8 is_stmt 0 view .LVU478
 2429 0270 DFF80081 		ldr	r8, .L244+4
 370:src/lcd.c     **** 	
 2430              		.loc 1 370 2 view .LVU479
 2431 0274 0027     		movs	r7, #0
 2432 0276 1026     		movs	r6, #16
 2433 0278 0BF18E0A 		add	r10, fp, #142
 376:src/lcd.c     **** 	    }
 2434              		.loc 1 376 8 view .LVU480
 2435 027c 4FF0FF09 		mov	r9, #255
 2436              	.LVL188:
 2437              	.L134:
 374:src/lcd.c     **** 	    if (dots[i*6+j+MATRIX_BASE]) {
 2438              		.loc 1 374 14 is_stmt 1 view .LVU481
 2439 0280 0AEB0705 		add	r5, r10, r7
 2440 0284 5424     		movs	r4, #84
 2441              	.LVL189:
 2442              	.L136:
 375:src/lcd.c     **** 	      lcd_fill_rect( xleft-dwidth+5*i+15, ytop-(10+6*6)+j*6, 4, 5, 0xff);
 2443              		.loc 1 375 6 view .LVU482
 376:src/lcd.c     **** 	    }
 2444              		.loc 1 376 8 view .LVU483
 375:src/lcd.c     **** 	      lcd_fill_rect( xleft-dwidth+5*i+15, ytop-(10+6*6)+j*6, 4, 5, 0xff);
 2445              		.loc 1 375 14 is_stmt 0 view .LVU484
 2446 0286 15F801CB 		ldrb	ip, [r5], #1	@ zero_extendqisi2
 2447              	.LVL190:
 376:src/lcd.c     **** 	    }
 2448              		.loc 1 376 8 view .LVU485
 2449 028a 2146     		mov	r1, r4
 2450 028c 0523     		movs	r3, #5
 2451 028e 0634     		adds	r4, r4, #6
 2452 0290 0422     		movs	r2, #4
 2453 0292 3046     		mov	r0, r6
 375:src/lcd.c     **** 	      lcd_fill_rect( xleft-dwidth+5*i+15, ytop-(10+6*6)+j*6, 4, 5, 0xff);
 2454              		.loc 1 375 9 view .LVU486
 2455 0294 BCF1000F 		cmp	ip, #0
 2456 0298 02D0     		beq	.L135
 376:src/lcd.c     **** 	    }
 2457              		.loc 1 376 8 view .LVU487
 2458 029a CDF80090 		str	r9, [sp]
 2459 029e C047     		blx	r8
 2460              	.LVL191:
ARM GAS  /tmp/ccs5LAM9.s 			page 60


 2461              	.L135:
 374:src/lcd.c     **** 	    if (dots[i*6+j+MATRIX_BASE]) {
 2462              		.loc 1 374 19 is_stmt 1 discriminator 2 view .LVU488
 374:src/lcd.c     **** 	    if (dots[i*6+j+MATRIX_BASE]) {
 2463              		.loc 1 374 14 discriminator 2 view .LVU489
 374:src/lcd.c     **** 	    if (dots[i*6+j+MATRIX_BASE]) {
 2464              		.loc 1 374 4 is_stmt 0 discriminator 2 view .LVU490
 2465 02a0 782C     		cmp	r4, #120
 2466 02a2 F0D1     		bne	.L136
 373:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 2467              		.loc 1 373 35 is_stmt 1 discriminator 2 view .LVU491
 373:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 2468              		.loc 1 373 19 discriminator 2 view .LVU492
 2469 02a4 0637     		adds	r7, r7, #6
 2470              	.LVL192:
 373:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 2471              		.loc 1 373 9 is_stmt 0 discriminator 2 view .LVU493
 2472 02a6 B7F5DE7F 		cmp	r7, #444
 2473 02aa 06F10506 		add	r6, r6, #5
 2474 02ae E7D1     		bne	.L134
 384:src/lcd.c     **** 	    }
 2475              		.loc 1 384 8 view .LVU494
 2476 02b0 DFF8C0A0 		ldr	r10, .L244+4
 2477 02b4 0BF24A2B 		addw	fp, fp, #586
 2478 02b8 4FF00008 		mov	r8, #0
 2479 02bc 1027     		movs	r7, #16
 2480              	.LVL193:
 384:src/lcd.c     **** 	    }
 2481              		.loc 1 384 8 view .LVU495
 2482 02be 4FF0FF09 		mov	r9, #255
 2483              	.L137:
 2484              	.LVL194:
 382:src/lcd.c     **** 	    if (dots[i*6+j+MB_TOP]) {
 2485              		.loc 1 382 14 is_stmt 1 view .LVU496
 2486 02c2 0BEB0805 		add	r5, fp, r8
 370:src/lcd.c     **** 	
 2487              		.loc 1 370 2 is_stmt 0 view .LVU497
 2488 02c6 1E24     		movs	r4, #30
 2489              	.LVL195:
 2490              	.L139:
 383:src/lcd.c     **** 	      lcd_fill_rect( xleft-dwidth+5*i+15, 70-(10+6*5)+j*5, 4, 4, 0xff);
 2491              		.loc 1 383 6 is_stmt 1 view .LVU498
 384:src/lcd.c     **** 	    }
 2492              		.loc 1 384 8 view .LVU499
 383:src/lcd.c     **** 	      lcd_fill_rect( xleft-dwidth+5*i+15, 70-(10+6*5)+j*5, 4, 4, 0xff);
 2493              		.loc 1 383 14 is_stmt 0 view .LVU500
 2494 02c8 15F8016B 		ldrb	r6, [r5], #1	@ zero_extendqisi2
 2495              	.LVL196:
 384:src/lcd.c     **** 	    }
 2496              		.loc 1 384 8 view .LVU501
 2497 02cc 0423     		movs	r3, #4
 2498 02ce 2146     		mov	r1, r4
 2499 02d0 1A46     		mov	r2, r3
 2500 02d2 0534     		adds	r4, r4, #5
 2501 02d4 3846     		mov	r0, r7
 383:src/lcd.c     **** 	      lcd_fill_rect( xleft-dwidth+5*i+15, 70-(10+6*5)+j*5, 4, 4, 0xff);
 2502              		.loc 1 383 9 view .LVU502
ARM GAS  /tmp/ccs5LAM9.s 			page 61


 2503 02d6 16B1     		cbz	r6, .L138
 384:src/lcd.c     **** 	    }
 2504              		.loc 1 384 8 view .LVU503
 2505 02d8 CDF80090 		str	r9, [sp]
 2506 02dc D047     		blx	r10
 2507              	.LVL197:
 2508              	.L138:
 382:src/lcd.c     **** 	    if (dots[i*6+j+MB_TOP]) {
 2509              		.loc 1 382 19 is_stmt 1 discriminator 2 view .LVU504
 382:src/lcd.c     **** 	    if (dots[i*6+j+MB_TOP]) {
 2510              		.loc 1 382 14 discriminator 2 view .LVU505
 382:src/lcd.c     **** 	    if (dots[i*6+j+MB_TOP]) {
 2511              		.loc 1 382 4 is_stmt 0 discriminator 2 view .LVU506
 2512 02de 3C2C     		cmp	r4, #60
 2513 02e0 F2D1     		bne	.L139
 381:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 2514              		.loc 1 381 29 is_stmt 1 discriminator 2 view .LVU507
 381:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 2515              		.loc 1 381 19 discriminator 2 view .LVU508
 2516 02e2 08F10608 		add	r8, r8, #6
 2517              	.LVL198:
 381:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 2518              		.loc 1 381 9 is_stmt 0 discriminator 2 view .LVU509
 2519 02e6 B8F5817F 		cmp	r8, #258
 2520 02ea 07F10507 		add	r7, r7, #5
 2521 02ee E8D1     		bne	.L137
 389:src/lcd.c     **** #endif
 2522              		.loc 1 389 1 view .LVU510
 2523 02f0 03B0     		add	sp, sp, #12
 2524              		.cfi_remember_state
 2525              		.cfi_def_cfa_offset 36
 2526              		@ sp needed
 2527 02f2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2528              	.LVL199:
 2529              	.L239:
 2530              		.cfi_restore_state
 274:src/lcd.c     ****                 }
 2531              		.loc 1 274 5 is_stmt 1 view .LVU511
 2532 02f6 8221     		movs	r1, #130
 2533 02f8 2846     		mov	r0, r5
 2534 02fa FFF7FEFF 		bl	exp_bottom
 2535              	.LVL200:
 2536 02fe 15E7     		b	.L122
 2537              	.L238:
 271:src/lcd.c     ****                 }
 2538              		.loc 1 271 5 view .LVU512
 2539              	.LVL201:
 2540              	.LBB77:
 2541              	.LBI77:
 187:src/lcd.c     ****   exp_right_side(i-1, j+11);
 2542              		.loc 1 187 6 view .LVU513
 2543              	.LBB78:
 188:src/lcd.c     **** }
 2544              		.loc 1 188 3 view .LVU514
 2545 0300 8D21     		movs	r1, #141
 2546 0302 681E     		subs	r0, r5, #1
 2547 0304 FFF7FEFF 		bl	exp_right_side
ARM GAS  /tmp/ccs5LAM9.s 			page 62


 2548              	.LVL202:
 189:src/lcd.c     **** void exp_top (int i, int j) {
 2549              		.loc 1 189 1 is_stmt 0 view .LVU515
 2550 0308 0BE7     		b	.L121
 2551              	.LVL203:
 2552              	.L237:
 189:src/lcd.c     **** void exp_top (int i, int j) {
 2553              		.loc 1 189 1 view .LVU516
 2554              	.LBE78:
 2555              	.LBE77:
 268:src/lcd.c     ****                 }
 2556              		.loc 1 268 5 is_stmt 1 view .LVU517
 2557              	.LBB79:
 2558              	.LBI79:
 175:src/lcd.c     ****   exp_left_side(i, j+11);
 2559              		.loc 1 175 6 view .LVU518
 2560              	.LBB80:
 176:src/lcd.c     **** }
 2561              		.loc 1 176 3 view .LVU519
 2562 030a 8D21     		movs	r1, #141
 2563 030c 2846     		mov	r0, r5
 2564 030e FFF7FEFF 		bl	exp_left_side
 2565              	.LVL204:
 177:src/lcd.c     **** void exp_right_side (int i, int j) {
 2566              		.loc 1 177 1 is_stmt 0 view .LVU520
 2567 0312 01E7     		b	.L120
 2568              	.LVL205:
 2569              	.L236:
 177:src/lcd.c     **** void exp_right_side (int i, int j) {
 2570              		.loc 1 177 1 view .LVU521
 2571              	.LBE80:
 2572              	.LBE79:
 265:src/lcd.c     ****                 }
 2573              		.loc 1 265 5 is_stmt 1 view .LVU522
 2574 0314 8221     		movs	r1, #130
 2575 0316 2846     		mov	r0, r5
 2576 0318 FFF7FEFF 		bl	exp_middle
 2577              	.LVL206:
 2578 031c F7E6     		b	.L119
 2579              	.L235:
 262:src/lcd.c     ****                 }
 2580              		.loc 1 262 5 view .LVU523
 2581              	.LVL207:
 2582              	.LBB81:
 2583              	.LBI81:
 184:src/lcd.c     ****   exp_right_side(i, j);
 2584              		.loc 1 184 6 view .LVU524
 2585              	.LBB82:
 185:src/lcd.c     **** }
 2586              		.loc 1 185 3 view .LVU525
 2587 031e 8221     		movs	r1, #130
 2588 0320 2846     		mov	r0, r5
 2589 0322 FFF7FEFF 		bl	exp_right_side
 2590              	.LVL208:
 186:src/lcd.c     **** void exp_right_side_bottom (int i, int j) {
 2591              		.loc 1 186 1 is_stmt 0 view .LVU526
 2592 0326 EDE6     		b	.L118
ARM GAS  /tmp/ccs5LAM9.s 			page 63


 2593              	.LVL209:
 2594              	.L234:
 186:src/lcd.c     **** void exp_right_side_bottom (int i, int j) {
 2595              		.loc 1 186 1 view .LVU527
 2596              	.LBE82:
 2597              	.LBE81:
 259:src/lcd.c     ****                 }
 2598              		.loc 1 259 5 is_stmt 1 view .LVU528
 2599              	.LBB83:
 2600              	.LBI83:
 172:src/lcd.c     ****   exp_left_side(i+1, j);
 2601              		.loc 1 172 6 view .LVU529
 2602              	.LBB84:
 173:src/lcd.c     **** }
 2603              		.loc 1 173 3 view .LVU530
 2604 0328 8221     		movs	r1, #130
 2605 032a 681C     		adds	r0, r5, #1
 2606 032c FFF7FEFF 		bl	exp_left_side
 2607              	.LVL210:
 174:src/lcd.c     **** void exp_left_side_bottom (int i, int j) {
 2608              		.loc 1 174 1 is_stmt 0 view .LVU531
 2609 0330 E3E6     		b	.L117
 2610              	.LVL211:
 2611              	.L233:
 174:src/lcd.c     **** void exp_left_side_bottom (int i, int j) {
 2612              		.loc 1 174 1 view .LVU532
 2613              	.LBE84:
 2614              	.LBE83:
 256:src/lcd.c     ****                 }
 2615              		.loc 1 256 5 is_stmt 1 view .LVU533
 2616 0332 8221     		movs	r1, #130
 2617 0334 2846     		mov	r0, r5
 2618 0336 FFF7FEFF 		bl	exp_top
 2619              	.LVL212:
 2620 033a D9E6     		b	.L116
 2621              	.LVL213:
 2622              	.L129:
 333:src/lcd.c     **** 	  lcd_writeText(t20, "S:4");
 2623              		.loc 1 333 4 view .LVU534
 2624 033c 206B     		ldr	r0, [r4, #48]
 2625 033e 0F4B     		ldr	r3, .L244+12
 2626 0340 1922     		movs	r2, #25
 2627 0342 40F21D11 		movw	r1, #285
 2628 0346 9847     		blx	r3
 2629              	.LVL214:
 334:src/lcd.c     **** 	}	  
 2630              		.loc 1 334 4 view .LVU535
 2631 0348 206B     		ldr	r0, [r4, #48]
 2632 034a 0D4B     		ldr	r3, .L244+16
 2633 034c 1249     		ldr	r1, .L244+40
 2634 034e 9847     		blx	r3
 2635              	.LVL215:
 2636 0350 62E7     		b	.L130
 2637              	.LVL216:
 2638              	.L240:
 279:src/lcd.c     ****         }
 2639              		.loc 1 279 4 view .LVU536
ARM GAS  /tmp/ccs5LAM9.s 			page 64


 2640 0352 8221     		movs	r1, #130
 2641 0354 0120     		movs	r0, #1
 2642 0356 FFF7FEFF 		bl	middle
 2643              	.LVL217:
 281:src/lcd.c     **** 	  exp_middle (xleft_exp-dwidth_exp, ytop);
 2644              		.loc 1 281 9 view .LVU537
 281:src/lcd.c     **** 	  exp_middle (xleft_exp-dwidth_exp, ytop);
 2645              		.loc 1 281 12 is_stmt 0 view .LVU538
 2646 035a 96F88230 		ldrb	r3, [r6, #130]	@ zero_extendqisi2
 2647 035e 002B     		cmp	r3, #0
 2648 0360 3FF4F4AE 		beq	.L125
 2649              	.L241:
 282:src/lcd.c     ****         }
 2650              		.loc 1 282 4 is_stmt 1 view .LVU539
 2651 0364 8221     		movs	r1, #130
 2652 0366 4FF4A370 		mov	r0, #326
 2653 036a FFF7FEFF 		bl	exp_middle
 2654              	.LVL218:
 2655 036e EDE6     		b	.L125
 2656              	.L245:
 2657              		.align	2
 2658              	.L244:
 2659 0370 00000000 		.word	.LANCHOR0
 2660 0374 3D020008 		.word	134218301
 2661 0378 00200010 		.word	268443648
 2662 037c 6D020008 		.word	134218349
 2663 0380 7D020008 		.word	134218365
 2664 0384 00000000 		.word	.LC6
 2665 0388 08000000 		.word	.LC7
 2666 038c 10000000 		.word	.LC9
 2667 0390 14000000 		.word	.LC10
 2668 0394 18000000 		.word	.LC11
 2669 0398 0C000000 		.word	.LC8
 2670              		.cfi_endproc
 2671              	.LFE25:
 2673              		.section	.text.finish_display,"ax",%progbits
 2674              		.align	1
 2675              		.p2align 2,,3
 2676              		.global	finish_display
 2677              		.syntax unified
 2678              		.thumb
 2679              		.thumb_func
 2680              		.fpu fpv4-sp-d16
 2682              	finish_display:
 2683              	.LFB29:
 667:src/lcd.c     ****   //  lcd_clear_buf();
 2684              		.loc 1 667 27 view -0
 2685              		.cfi_startproc
 2686              		@ args = 0, pretend = 0, frame = 0
 2687              		@ frame_needed = 0, uses_anonymous_args = 0
 669:src/lcd.c     ****   show_disp();
 2688              		.loc 1 669 3 view .LVU541
 667:src/lcd.c     ****   //  lcd_clear_buf();
 2689              		.loc 1 667 27 is_stmt 0 view .LVU542
 2690 0000 10B5     		push	{r4, lr}
 2691              		.cfi_def_cfa_offset 8
 2692              		.cfi_offset 4, -8
ARM GAS  /tmp/ccs5LAM9.s 			page 65


 2693              		.cfi_offset 14, -4
 2694 0002 82B0     		sub	sp, sp, #8
 2695              		.cfi_def_cfa_offset 16
 669:src/lcd.c     ****   show_disp();
 2696              		.loc 1 669 3 view .LVU543
 2697 0004 0021     		movs	r1, #0
 2698 0006 0091     		str	r1, [sp]
 2699 0008 0846     		mov	r0, r1
 2700 000a BC23     		movs	r3, #188
 2701 000c 4FF4C872 		mov	r2, #400
 2702 0010 044C     		ldr	r4, .L248
 2703 0012 A047     		blx	r4
 2704              	.LVL219:
 670:src/lcd.c     ****   lcd_refresh();
 2705              		.loc 1 670 3 is_stmt 1 view .LVU544
 2706 0014 FFF7FEFF 		bl	show_disp
 2707              	.LVL220:
 671:src/lcd.c     **** }
 2708              		.loc 1 671 3 view .LVU545
 2709 0018 034B     		ldr	r3, .L248+4
 672:src/lcd.c     **** 
 2710              		.loc 1 672 1 is_stmt 0 view .LVU546
 2711 001a 02B0     		add	sp, sp, #8
 2712              		.cfi_def_cfa_offset 8
 2713              		@ sp needed
 2714 001c BDE81040 		pop	{r4, lr}
 2715              		.cfi_restore 14
 2716              		.cfi_restore 4
 2717              		.cfi_def_cfa_offset 0
 671:src/lcd.c     **** }
 2718              		.loc 1 671 3 view .LVU547
 2719 0020 1847     		bx	r3	@ indirect register sibling call
 2720              	.LVL221:
 2721              	.L249:
 2722 0022 00BF     		.align	2
 2723              	.L248:
 2724 0024 3D020008 		.word	134218301
 2725 0028 31020008 		.word	134218289
 2726              		.cfi_endproc
 2727              	.LFE29:
 2729              		.section	.text.finish_PRT,"ax",%progbits
 2730              		.align	1
 2731              		.p2align 2,,3
 2732              		.global	finish_PRT
 2733              		.syntax unified
 2734              		.thumb
 2735              		.thumb_func
 2736              		.fpu fpv4-sp-d16
 2738              	finish_PRT:
 2739              	.LFB33:
 711:src/lcd.c     **** 
 712:src/lcd.c     **** void finish_PRT (void) {
 2740              		.loc 1 712 24 is_stmt 1 view -0
 2741              		.cfi_startproc
 2742              		@ args = 0, pretend = 0, frame = 0
 2743              		@ frame_needed = 0, uses_anonymous_args = 0
 713:src/lcd.c     ****   draw_PRT();
ARM GAS  /tmp/ccs5LAM9.s 			page 66


 2744              		.loc 1 713 3 view .LVU549
 712:src/lcd.c     ****   draw_PRT();
 2745              		.loc 1 712 24 is_stmt 0 view .LVU550
 2746 0000 10B5     		push	{r4, lr}
 2747              		.cfi_def_cfa_offset 8
 2748              		.cfi_offset 4, -8
 2749              		.cfi_offset 14, -4
 2750              		.loc 1 713 3 view .LVU551
 2751 0002 FFF7FEFF 		bl	draw_PRT
 2752              	.LVL222:
 714:src/lcd.c     ****   lcd_refresh();
 2753              		.loc 1 714 3 is_stmt 1 view .LVU552
 715:src/lcd.c     **** }
 2754              		.loc 1 715 1 is_stmt 0 view .LVU553
 2755 0006 BDE81040 		pop	{r4, lr}
 2756              		.cfi_restore 14
 2757              		.cfi_restore 4
 2758              		.cfi_def_cfa_offset 0
 714:src/lcd.c     ****   lcd_refresh();
 2759              		.loc 1 714 3 view .LVU554
 2760 000a 014B     		ldr	r3, .L252
 2761 000c 1847     		bx	r3	@ indirect register sibling call
 2762              	.LVL223:
 2763              	.L253:
 2764 000e 00BF     		.align	2
 2765              	.L252:
 2766 0010 31020008 		.word	134218289
 2767              		.cfi_endproc
 2768              	.LFE33:
 2770              		.section	.text.finish_LEQ,"ax",%progbits
 2771              		.align	1
 2772              		.p2align 2,,3
 2773              		.global	finish_LEQ
 2774              		.syntax unified
 2775              		.thumb
 2776              		.thumb_func
 2777              		.fpu fpv4-sp-d16
 2779              	finish_LEQ:
 2780              	.LFB34:
 716:src/lcd.c     **** 
 717:src/lcd.c     **** void finish_LEQ(void) { // refreshes the LEQ flag only
 2781              		.loc 1 717 23 is_stmt 1 view -0
 2782              		.cfi_startproc
 2783              		@ args = 0, pretend = 0, frame = 0
 2784              		@ frame_needed = 0, uses_anonymous_args = 0
 718:src/lcd.c     ****   draw_LEQ();  
 2785              		.loc 1 718 3 view .LVU556
 717:src/lcd.c     ****   draw_LEQ();  
 2786              		.loc 1 717 23 is_stmt 0 view .LVU557
 2787 0000 10B5     		push	{r4, lr}
 2788              		.cfi_def_cfa_offset 8
 2789              		.cfi_offset 4, -8
 2790              		.cfi_offset 14, -4
 2791              		.loc 1 718 3 view .LVU558
 2792 0002 FFF7FEFF 		bl	draw_LEQ
 2793              	.LVL224:
 719:src/lcd.c     ****   lcd_refresh();
ARM GAS  /tmp/ccs5LAM9.s 			page 67


 2794              		.loc 1 719 3 is_stmt 1 view .LVU559
 720:src/lcd.c     **** }
 2795              		.loc 1 720 1 is_stmt 0 view .LVU560
 2796 0006 BDE81040 		pop	{r4, lr}
 2797              		.cfi_restore 14
 2798              		.cfi_restore 4
 2799              		.cfi_def_cfa_offset 0
 719:src/lcd.c     ****   lcd_refresh();
 2800              		.loc 1 719 3 view .LVU561
 2801 000a 014B     		ldr	r3, .L256
 2802 000c 1847     		bx	r3	@ indirect register sibling call
 2803              	.LVL225:
 2804              	.L257:
 2805 000e 00BF     		.align	2
 2806              	.L256:
 2807 0010 31020008 		.word	134218289
 2808              		.cfi_endproc
 2809              	.LFE34:
 2811              		.section	.text.finish_RPN,"ax",%progbits
 2812              		.align	1
 2813              		.p2align 2,,3
 2814              		.global	finish_RPN
 2815              		.syntax unified
 2816              		.thumb
 2817              		.thumb_func
 2818              		.fpu fpv4-sp-d16
 2820              	finish_RPN:
 2821              	.LFB35:
 721:src/lcd.c     ****   
 722:src/lcd.c     **** void finish_RPN(void) { // refreshes the RPN and RUN flags only
 2822              		.loc 1 722 23 is_stmt 1 view -0
 2823              		.cfi_startproc
 2824              		@ args = 0, pretend = 0, frame = 0
 2825              		@ frame_needed = 0, uses_anonymous_args = 0
 723:src/lcd.c     ****   draw_RPN_RCL();  
 2826              		.loc 1 723 3 view .LVU563
 722:src/lcd.c     ****   draw_RPN_RCL();  
 2827              		.loc 1 722 23 is_stmt 0 view .LVU564
 2828 0000 10B5     		push	{r4, lr}
 2829              		.cfi_def_cfa_offset 8
 2830              		.cfi_offset 4, -8
 2831              		.cfi_offset 14, -4
 2832              		.loc 1 723 3 view .LVU565
 2833 0002 FFF7FEFF 		bl	draw_RPN_RCL
 2834              	.LVL226:
 724:src/lcd.c     ****   lcd_refresh();
 2835              		.loc 1 724 3 is_stmt 1 view .LVU566
 725:src/lcd.c     **** }
 2836              		.loc 1 725 1 is_stmt 0 view .LVU567
 2837 0006 BDE81040 		pop	{r4, lr}
 2838              		.cfi_restore 14
 2839              		.cfi_restore 4
 2840              		.cfi_def_cfa_offset 0
 724:src/lcd.c     ****   lcd_refresh();
 2841              		.loc 1 724 3 view .LVU568
 2842 000a 014B     		ldr	r3, .L260
 2843 000c 1847     		bx	r3	@ indirect register sibling call
ARM GAS  /tmp/ccs5LAM9.s 			page 68


 2844              	.LVL227:
 2845              	.L261:
 2846 000e 00BF     		.align	2
 2847              	.L260:
 2848 0010 31020008 		.word	134218289
 2849              		.cfi_endproc
 2850              	.LFE35:
 2852              		.section	.text.do_all_dots,"ax",%progbits
 2853              		.align	1
 2854              		.p2align 2,,3
 2855              		.global	do_all_dots
 2856              		.syntax unified
 2857              		.thumb
 2858              		.thumb_func
 2859              		.fpu fpv4-sp-d16
 2861              	do_all_dots:
 2862              	.LFB36:
 726:src/lcd.c     **** 
 727:src/lcd.c     **** extern void all_menu_dots (void);
 728:src/lcd.c     **** 
 729:src/lcd.c     **** void do_all_dots(void) {
 2863              		.loc 1 729 24 is_stmt 1 view -0
 2864              		.cfi_startproc
 2865              		@ args = 0, pretend = 0, frame = 0
 2866              		@ frame_needed = 0, uses_anonymous_args = 0
 730:src/lcd.c     ****   for (int i=0; i<TOP_DOTS; i++) {
 2867              		.loc 1 730 3 view .LVU570
 2868              	.LBB85:
 2869              		.loc 1 730 8 view .LVU571
 2870              	.LVL228:
 2871              		.loc 1 730 17 view .LVU572
 2872              	.LBE85:
 729:src/lcd.c     ****   for (int i=0; i<TOP_DOTS; i++) {
 2873              		.loc 1 729 24 is_stmt 0 view .LVU573
 2874 0000 08B5     		push	{r3, lr}
 2875              		.cfi_def_cfa_offset 8
 2876              		.cfi_offset 3, -8
 2877              		.cfi_offset 14, -4
 2878 0002 094B     		ldr	r3, .L266
 2879              	.LBB90:
 2880              	.LBB86:
 2881              	.LBB87:
  58:src/lcd.c     **** }
 2882              		.loc 1 58 17 view .LVU574
 2883 0004 0121     		movs	r1, #1
 2884 0006 03F55372 		add	r2, r3, #844
 2885              	.LVL229:
 2886              	.L263:
  58:src/lcd.c     **** }
 2887              		.loc 1 58 17 view .LVU575
 2888              	.LBE87:
 2889              	.LBE86:
 731:src/lcd.c     ****     set_dot(i);
 2890              		.loc 1 731 5 is_stmt 1 view .LVU576
 2891              	.LBB89:
 2892              	.LBI86:
  57:src/lcd.c     ****         dots[n] = 1;
ARM GAS  /tmp/ccs5LAM9.s 			page 69


 2893              		.loc 1 57 6 view .LVU577
 2894              	.LBB88:
  58:src/lcd.c     **** }
 2895              		.loc 1 58 9 view .LVU578
  58:src/lcd.c     **** }
 2896              		.loc 1 58 17 is_stmt 0 view .LVU579
 2897 000a 03F8011F 		strb	r1, [r3, #1]!
 2898              	.LVL230:
  58:src/lcd.c     **** }
 2899              		.loc 1 58 17 view .LVU580
 2900              	.LBE88:
 2901              	.LBE89:
 730:src/lcd.c     ****     set_dot(i);
 2902              		.loc 1 730 29 is_stmt 1 view .LVU581
 730:src/lcd.c     ****     set_dot(i);
 2903              		.loc 1 730 17 view .LVU582
 730:src/lcd.c     ****     set_dot(i);
 2904              		.loc 1 730 3 is_stmt 0 view .LVU583
 2905 000e 9342     		cmp	r3, r2
 2906 0010 FBD1     		bne	.L263
 2907              	.LBE90:
 732:src/lcd.c     ****   }
 733:src/lcd.c     ****   all_menu_dots();
 2908              		.loc 1 733 3 is_stmt 1 view .LVU584
 2909 0012 FFF7FEFF 		bl	all_menu_dots
 2910              	.LVL231:
 734:src/lcd.c     ****   finish_display();
 2911              		.loc 1 734 3 view .LVU585
 2912 0016 FFF7FEFF 		bl	finish_display
 2913              	.LVL232:
 735:src/lcd.c     ****   clr_dot(RCL_annun);
 2914              		.loc 1 735 3 view .LVU586
 2915              	.LBB91:
 2916              	.LBI91:
  60:src/lcd.c     ****         dots[n] = 0;
 2917              		.loc 1 60 6 view .LVU587
 2918              	.LBB92:
  61:src/lcd.c     **** }
 2919              		.loc 1 61 9 view .LVU588
  61:src/lcd.c     **** }
 2920              		.loc 1 61 17 is_stmt 0 view .LVU589
 2921 001a 044B     		ldr	r3, .L266+4
 2922 001c 0022     		movs	r2, #0
 2923 001e 83F88A20 		strb	r2, [r3, #138]
 2924              	.LVL233:
  61:src/lcd.c     **** }
 2925              		.loc 1 61 17 view .LVU590
 2926              	.LBE92:
 2927              	.LBE91:
 736:src/lcd.c     ****   clr_dot(LIT_EQ);
 2928              		.loc 1 736 3 is_stmt 1 view .LVU591
 2929              	.LBB93:
 2930              	.LBI93:
  60:src/lcd.c     ****         dots[n] = 0;
 2931              		.loc 1 60 6 view .LVU592
 2932              	.LBB94:
  61:src/lcd.c     **** }
ARM GAS  /tmp/ccs5LAM9.s 			page 70


 2933              		.loc 1 61 9 view .LVU593
  61:src/lcd.c     **** }
 2934              		.loc 1 61 17 is_stmt 0 view .LVU594
 2935 0022 83F88420 		strb	r2, [r3, #132]
 2936              	.LVL234:
  61:src/lcd.c     **** }
 2937              		.loc 1 61 17 view .LVU595
 2938              	.LBE94:
 2939              	.LBE93:
 737:src/lcd.c     **** }
 2940              		.loc 1 737 1 view .LVU596
 2941 0026 08BD     		pop	{r3, pc}
 2942              	.L267:
 2943              		.align	2
 2944              	.L266:
 2945 0028 FFFFFFFF 		.word	.LANCHOR0-1
 2946 002c 00000000 		.word	.LANCHOR0
 2947              		.cfi_endproc
 2948              	.LFE36:
 2950              		.section	.text.show_progtrace,"ax",%progbits
 2951              		.align	1
 2952              		.p2align 2,,3
 2953              		.global	show_progtrace
 2954              		.syntax unified
 2955              		.thumb
 2956              		.thumb_func
 2957              		.fpu fpv4-sp-d16
 2959              	show_progtrace:
 2960              	.LVL235:
 2961              	.LFB37:
 738:src/lcd.c     **** #endif
 739:src/lcd.c     **** 
 740:src/lcd.c     **** #ifdef CONSOLE
 741:src/lcd.c     **** #ifndef DM42
 742:src/lcd.c     **** /* Take a string and cleanse all non-printing characters from it.
 743:src/lcd.c     ****  * Replace them with the usual [xxx] sequences.
 744:src/lcd.c     ****  */
 745:src/lcd.c     **** extern const char *pretty(unsigned char);
 746:src/lcd.c     **** 
 747:src/lcd.c     **** static char *cleanse(const char *s) {
 748:src/lcd.c     ****         static char res[50];
 749:src/lcd.c     ****         char *p;
 750:src/lcd.c     **** 
 751:src/lcd.c     ****         for (p=res; *s != '\0'; s++) {
 752:src/lcd.c     ****                 unsigned char c = 0xff & *s;
 753:src/lcd.c     ****                 const char *m = pretty(c);
 754:src/lcd.c     ****                 if (m == NULL) {
 755:src/lcd.c     ****                         *p++ = c;
 756:src/lcd.c     ****                 } else {
 757:src/lcd.c     ****                         *p++ = '[';
 758:src/lcd.c     ****                         p = scopy_char(p, m, ']');
 759:src/lcd.c     ****                 }
 760:src/lcd.c     ****         }
 761:src/lcd.c     ****         *p = '\0';
 762:src/lcd.c     ****         return res;
 763:src/lcd.c     **** }
 764:src/lcd.c     **** #endif
ARM GAS  /tmp/ccs5LAM9.s 			page 71


 765:src/lcd.c     **** #endif
 766:src/lcd.c     **** 
 767:src/lcd.c     **** void show_progtrace(char *buf) {
 2962              		.loc 1 767 32 is_stmt 1 view -0
 2963              		.cfi_startproc
 2964              		@ args = 0, pretend = 0, frame = 0
 2965              		@ frame_needed = 0, uses_anonymous_args = 0
 2966              		@ link register save eliminated.
 768:src/lcd.c     **** #ifndef DM42
 769:src/lcd.c     **** #ifdef CONSOLE
 770:src/lcd.c     ****         int pc = state_pc();
 771:src/lcd.c     **** 
 772:src/lcd.c     **** #ifdef USECURSES
 773:src/lcd.c     ****         int i;
 774:src/lcd.c     **** 
 775:src/lcd.c     ****         if (!State2.flags)
 776:src/lcd.c     ****                 return;
 777:src/lcd.c     **** 
 778:src/lcd.c     ****         for (i=4; i>0 && pc >= 0; i--) {
 779:src/lcd.c     ****                 MOVE(0, i);
 780:src/lcd.c     ****                 if (pc) {
 781:src/lcd.c     ****                         opcode op = getprog(pc);
 782:src/lcd.c     ****                         PRINTF("%03d %08x: %s", pc, op, cleanse(prt(op, buf)));
 783:src/lcd.c     ****                 } else
 784:src/lcd.c     ****                         PRINTF("000:");
 785:src/lcd.c     ****                 pc = do_dec(pc, 1);
 786:src/lcd.c     ****         }
 787:src/lcd.c     **** #endif
 788:src/lcd.c     **** #endif
 789:src/lcd.c     **** #endif       
 790:src/lcd.c     **** }
 2967              		.loc 1 790 1 view .LVU598
 2968 0000 7047     		bx	lr
 2969              		.cfi_endproc
 2970              	.LFE37:
 2972 0002 00BF     		.section	.bss.dots,"aw",%nobits
 2973              		.align	2
 2974              		.set	.LANCHOR0,. + 0
 2977              	dots:
 2978 0000 00000000 		.space	844
 2978      00000000 
 2978      00000000 
 2978      00000000 
 2978      00000000 
 2979              		.text
 2980              	.Letext0:
 2981              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 2982              		.file 3 "dmcp/ff_ifc.h"
 2983              		.file 4 "dmcp/dmcp.h"
 2984              		.file 5 "src/decNumber/decContext.h"
 2985              		.file 6 "src/decNumber/decNumber.h"
 2986              		.file 7 "src/decNumber/decimal64.h"
 2987              		.file 8 "src/decNumber/decimal128.h"
 2988              		.file 9 "src/xeq.h"
 2989              		.file 10 "src/data.h"
 2990              		.file 11 "src/display.h"
 2991              		.file 12 "src/storage.h"
ARM GAS  /tmp/ccs5LAM9.s 			page 72


 2992              		.file 13 "src/pretty.h"
ARM GAS  /tmp/ccs5LAM9.s 			page 73


DEFINED SYMBOLS
                            *ABS*:0000000000000000 lcd.c
     /tmp/ccs5LAM9.s:18     .text.set_dot:0000000000000000 $t
     /tmp/ccs5LAM9.s:27     .text.set_dot:0000000000000000 set_dot
     /tmp/ccs5LAM9.s:46     .text.set_dot:0000000000000008 $d
     /tmp/ccs5LAM9.s:51     .text.clr_dot:0000000000000000 $t
     /tmp/ccs5LAM9.s:59     .text.clr_dot:0000000000000000 clr_dot
     /tmp/ccs5LAM9.s:77     .text.clr_dot:0000000000000008 $d
     /tmp/ccs5LAM9.s:82     .text.is_dot:0000000000000000 $t
     /tmp/ccs5LAM9.s:90     .text.is_dot:0000000000000000 is_dot
     /tmp/ccs5LAM9.s:109    .text.is_dot:0000000000000008 $d
     /tmp/ccs5LAM9.s:114    .text.setuptty:0000000000000000 $t
     /tmp/ccs5LAM9.s:122    .text.setuptty:0000000000000000 setuptty
     /tmp/ccs5LAM9.s:140    .text.reset_disp:0000000000000000 $t
     /tmp/ccs5LAM9.s:148    .text.reset_disp:0000000000000000 reset_disp
     /tmp/ccs5LAM9.s:346    .text.reset_disp:0000000000000068 $d
     /tmp/ccs5LAM9.s:351    .text.left_side:0000000000000000 $t
     /tmp/ccs5LAM9.s:359    .text.left_side:0000000000000000 left_side
     /tmp/ccs5LAM9.s:442    .text.left_side:0000000000000054 $d
     /tmp/ccs5LAM9.s:447    .text.left_side_top:0000000000000000 $t
     /tmp/ccs5LAM9.s:455    .text.left_side_top:0000000000000000 left_side_top
     /tmp/ccs5LAM9.s:471    .text.left_side_bottom:0000000000000000 $t
     /tmp/ccs5LAM9.s:479    .text.left_side_bottom:0000000000000000 left_side_bottom
     /tmp/ccs5LAM9.s:501    .text.right_side:0000000000000000 $t
     /tmp/ccs5LAM9.s:509    .text.right_side:0000000000000000 right_side
     /tmp/ccs5LAM9.s:591    .text.right_side:000000000000005c $d
     /tmp/ccs5LAM9.s:596    .text.right_side_top:0000000000000000 $t
     /tmp/ccs5LAM9.s:604    .text.right_side_top:0000000000000000 right_side_top
     /tmp/ccs5LAM9.s:620    .text.right_side_bottom:0000000000000000 $t
     /tmp/ccs5LAM9.s:628    .text.right_side_bottom:0000000000000000 right_side_bottom
     /tmp/ccs5LAM9.s:650    .text.top:0000000000000000 $t
     /tmp/ccs5LAM9.s:658    .text.top:0000000000000000 top
     /tmp/ccs5LAM9.s:725    .text.top:0000000000000040 $d
     /tmp/ccs5LAM9.s:730    .text.middle:0000000000000000 $t
     /tmp/ccs5LAM9.s:738    .text.middle:0000000000000000 middle
     /tmp/ccs5LAM9.s:808    .text.middle:0000000000000040 $d
     /tmp/ccs5LAM9.s:814    .text.bottom:0000000000000000 $t
     /tmp/ccs5LAM9.s:822    .text.bottom:0000000000000000 bottom
     /tmp/ccs5LAM9.s:892    .text.bottom:0000000000000048 $d
     /tmp/ccs5LAM9.s:897    .text.decimal:0000000000000000 $t
     /tmp/ccs5LAM9.s:905    .text.decimal:0000000000000000 decimal
     /tmp/ccs5LAM9.s:942    .text.decimal:0000000000000018 $d
     /tmp/ccs5LAM9.s:947    .text.comma:0000000000000000 $t
     /tmp/ccs5LAM9.s:955    .text.comma:0000000000000000 comma
     /tmp/ccs5LAM9.s:1009   .text.comma:000000000000002c $d
     /tmp/ccs5LAM9.s:1014   .text.exp_left_side:0000000000000000 $t
     /tmp/ccs5LAM9.s:1022   .text.exp_left_side:0000000000000000 exp_left_side
     /tmp/ccs5LAM9.s:1089   .text.exp_left_side:0000000000000040 $d
     /tmp/ccs5LAM9.s:1094   .text.exp_left_side_top:0000000000000000 $t
     /tmp/ccs5LAM9.s:1102   .text.exp_left_side_top:0000000000000000 exp_left_side_top
     /tmp/ccs5LAM9.s:1121   .text.exp_left_side_bottom:0000000000000000 $t
     /tmp/ccs5LAM9.s:1129   .text.exp_left_side_bottom:0000000000000000 exp_left_side_bottom
     /tmp/ccs5LAM9.s:1148   .text.exp_right_side:0000000000000000 $t
     /tmp/ccs5LAM9.s:1156   .text.exp_right_side:0000000000000000 exp_right_side
     /tmp/ccs5LAM9.s:1223   .text.exp_right_side:0000000000000044 $d
     /tmp/ccs5LAM9.s:1228   .text.exp_right_side_top:0000000000000000 $t
     /tmp/ccs5LAM9.s:1236   .text.exp_right_side_top:0000000000000000 exp_right_side_top
ARM GAS  /tmp/ccs5LAM9.s 			page 74


     /tmp/ccs5LAM9.s:1252   .text.exp_right_side_bottom:0000000000000000 $t
     /tmp/ccs5LAM9.s:1260   .text.exp_right_side_bottom:0000000000000000 exp_right_side_bottom
     /tmp/ccs5LAM9.s:1282   .text.exp_top:0000000000000000 $t
     /tmp/ccs5LAM9.s:1290   .text.exp_top:0000000000000000 exp_top
     /tmp/ccs5LAM9.s:1349   .text.exp_top:0000000000000034 $d
     /tmp/ccs5LAM9.s:1354   .text.exp_bottom:0000000000000000 $t
     /tmp/ccs5LAM9.s:1362   .text.exp_bottom:0000000000000000 exp_bottom
     /tmp/ccs5LAM9.s:1424   .text.exp_bottom:0000000000000038 $d
     /tmp/ccs5LAM9.s:1429   .text.exp_middle:0000000000000000 $t
     /tmp/ccs5LAM9.s:1437   .text.exp_middle:0000000000000000 exp_middle
     /tmp/ccs5LAM9.s:1503   .text.exp_middle:0000000000000040 $d
     /tmp/ccs5LAM9.s:1508   .text.show_stack:0000000000000000 $t
     /tmp/ccs5LAM9.s:1516   .text.show_stack:0000000000000000 show_stack
     /tmp/ccs5LAM9.s:1527   .text.show_flags:0000000000000000 $t
     /tmp/ccs5LAM9.s:1535   .text.show_flags:0000000000000000 show_flags
     /tmp/ccs5LAM9.s:1546   .text.wait_for_display:0000000000000000 $t
     /tmp/ccs5LAM9.s:1554   .text.wait_for_display:0000000000000000 wait_for_display
     /tmp/ccs5LAM9.s:1567   .rodata.draw_RPN_RCL.str1.4:0000000000000000 $d
     /tmp/ccs5LAM9.s:1577   .text.draw_RPN_RCL:0000000000000000 $t
     /tmp/ccs5LAM9.s:1585   .text.draw_RPN_RCL:0000000000000000 draw_RPN_RCL
     /tmp/ccs5LAM9.s:1681   .text.draw_RPN_RCL:0000000000000070 $d
     /tmp/ccs5LAM9.s:1693   .rodata.draw_LEQ.str1.4:0000000000000000 $d
     /tmp/ccs5LAM9.s:1700   .text.draw_LEQ:0000000000000000 $t
     /tmp/ccs5LAM9.s:1708   .text.draw_LEQ:0000000000000000 draw_LEQ
     /tmp/ccs5LAM9.s:1787   .text.draw_LEQ:0000000000000058 $d
     /tmp/ccs5LAM9.s:1798   .rodata.draw_PRT.str1.4:0000000000000000 $d
     /tmp/ccs5LAM9.s:1802   .text.draw_PRT:0000000000000000 $t
     /tmp/ccs5LAM9.s:1810   .text.draw_PRT:0000000000000000 draw_PRT
     /tmp/ccs5LAM9.s:1861   .text.draw_PRT:000000000000002c $d
     /tmp/ccs5LAM9.s:1870   .rodata.show_disp.str1.4:0000000000000000 $d
     /tmp/ccs5LAM9.s:1889   .text.show_disp:0000000000000000 $t
     /tmp/ccs5LAM9.s:1897   .text.show_disp:0000000000000000 show_disp
     /tmp/ccs5LAM9.s:2138   .text.show_disp:00000000000000c4 $d
     /tmp/ccs5LAM9.s:2142   .text.show_disp:00000000000000cc $t
     /tmp/ccs5LAM9.s:2659   .text.show_disp:0000000000000370 $d
     /tmp/ccs5LAM9.s:2674   .text.finish_display:0000000000000000 $t
     /tmp/ccs5LAM9.s:2682   .text.finish_display:0000000000000000 finish_display
     /tmp/ccs5LAM9.s:2724   .text.finish_display:0000000000000024 $d
     /tmp/ccs5LAM9.s:2730   .text.finish_PRT:0000000000000000 $t
     /tmp/ccs5LAM9.s:2738   .text.finish_PRT:0000000000000000 finish_PRT
     /tmp/ccs5LAM9.s:2766   .text.finish_PRT:0000000000000010 $d
     /tmp/ccs5LAM9.s:2771   .text.finish_LEQ:0000000000000000 $t
     /tmp/ccs5LAM9.s:2779   .text.finish_LEQ:0000000000000000 finish_LEQ
     /tmp/ccs5LAM9.s:2807   .text.finish_LEQ:0000000000000010 $d
     /tmp/ccs5LAM9.s:2812   .text.finish_RPN:0000000000000000 $t
     /tmp/ccs5LAM9.s:2820   .text.finish_RPN:0000000000000000 finish_RPN
     /tmp/ccs5LAM9.s:2848   .text.finish_RPN:0000000000000010 $d
     /tmp/ccs5LAM9.s:2853   .text.do_all_dots:0000000000000000 $t
     /tmp/ccs5LAM9.s:2861   .text.do_all_dots:0000000000000000 do_all_dots
     /tmp/ccs5LAM9.s:2945   .text.do_all_dots:0000000000000028 $d
     /tmp/ccs5LAM9.s:2951   .text.show_progtrace:0000000000000000 $t
     /tmp/ccs5LAM9.s:2959   .text.show_progtrace:0000000000000000 show_progtrace
     /tmp/ccs5LAM9.s:2973   .bss.dots:0000000000000000 $d
     /tmp/ccs5LAM9.s:2977   .bss.dots:0000000000000000 dots

UNDEFINED SYMBOLS
dot
ARM GAS  /tmp/ccs5LAM9.s 			page 75


main_ram
all_menu_dots

ARM GAS  /tmp/cc1Hm38z.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"lcd.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_dot,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.global	set_dot
  21              		.arch armv7e-m
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  25              		.fpu fpv4-sp-d16
  27              	set_dot:
  28              	.LVL0:
  29              	.LFB0:
  30              		.file 1 "src/lcd.c"
   1:src/lcd.c     **** /* This file is part of 34S.
   2:src/lcd.c     ****  * 
   3:src/lcd.c     ****  * 34S is free software: you can redistribute it and/or modify
   4:src/lcd.c     ****  * it under the terms of the GNU General Public License as published by
   5:src/lcd.c     ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/lcd.c     ****  * (at your option) any later version.
   7:src/lcd.c     ****  * 
   8:src/lcd.c     ****  * 34S is distributed in the hope that it will be useful,
   9:src/lcd.c     ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/lcd.c     ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/lcd.c     ****  * GNU General Public License for more details.
  12:src/lcd.c     ****  * 
  13:src/lcd.c     ****  * You should have received a copy of the GNU General Public License
  14:src/lcd.c     ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/lcd.c     ****  */
  16:src/lcd.c     **** 
  17:src/lcd.c     **** #ifdef DM42
  18:src/lcd.c     **** #include "dmcp.h"
  19:src/lcd.c     **** #endif
  20:src/lcd.c     **** 
  21:src/lcd.c     **** #define DM42SAFE
  22:src/lcd.c     **** #include "lcd.h"
  23:src/lcd.c     **** #include "display.h"
  24:src/lcd.c     **** #include "xeq.h"
  25:src/lcd.c     **** 
  26:src/lcd.c     **** #ifdef INCLUDE_C_LOCK
  27:src/lcd.c     **** #include "data.h"
  28:src/lcd.c     **** #include "storage.h"
ARM GAS  /tmp/cc1Hm38z.s 			page 2


  29:src/lcd.c     **** #endif
  30:src/lcd.c     **** 
  31:src/lcd.c     **** #undef DM42SAFE
  32:src/lcd.c     **** 
  33:src/lcd.c     **** #include "pretty.h"
  34:src/lcd.c     **** 
  35:src/lcd.c     **** 
  36:src/lcd.c     **** #if defined(USECURSES) || defined(DM42) // want this in DM42
  37:src/lcd.c     **** static unsigned char dots[TOP_DOTS];
  38:src/lcd.c     **** #endif
  39:src/lcd.c     **** 
  40:src/lcd.c     **** #if defined(USECURSES) && !defined(DM42)
  41:src/lcd.c     **** static void dispreg(const char n, int index) {
  42:src/lcd.c     ****   char buf[64];
  43:src/lcd.c     ****         if (is_intmode())
  44:src/lcd.c     ****                 sprintf(buf, "%llx", (unsigned long long int)get_reg_n_int(index));
  45:src/lcd.c     ****         else {
  46:src/lcd.c     **** 		if (is_dblmode())
  47:src/lcd.c     **** 			decimal128ToString(&(get_reg_n(index)->d), buf);
  48:src/lcd.c     **** 		else
  49:src/lcd.c     **** 			decimal64ToString(&(get_reg_n(index)->s), buf);
  50:src/lcd.c     **** 	}
  51:src/lcd.c     ****         PRINTF("%c: %s", n, buf);
  52:src/lcd.c     **** }
  53:src/lcd.c     **** #endif
  54:src/lcd.c     **** 
  55:src/lcd.c     **** #if defined(USECURSES) || defined(DM42) // want this in DM42
  56:src/lcd.c     **** /* Some wrapper routines to set segments of the display */
  57:src/lcd.c     **** void set_dot(int n) {
  31              		.loc 1 57 21 view -0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 0
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  35              		@ link register save eliminated.
  58:src/lcd.c     ****         dots[n] = 1;
  36              		.loc 1 58 9 view .LVU1
  37              		.loc 1 58 17 is_stmt 0 view .LVU2
  38 0000 014B     		ldr	r3, .L3
  39 0002 0122     		movs	r2, #1
  40 0004 1A54     		strb	r2, [r3, r0]
  59:src/lcd.c     **** }
  41              		.loc 1 59 1 view .LVU3
  42 0006 7047     		bx	lr
  43              	.L4:
  44              		.align	2
  45              	.L3:
  46 0008 00000000 		.word	.LANCHOR0
  47              		.cfi_endproc
  48              	.LFE0:
  50              		.section	.text.clr_dot,"ax",%progbits
  51              		.align	1
  52              		.p2align 2,,3
  53              		.global	clr_dot
  54              		.syntax unified
  55              		.thumb
  56              		.thumb_func
  57              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cc1Hm38z.s 			page 3


  59              	clr_dot:
  60              	.LVL1:
  61              	.LFB1:
  60:src/lcd.c     **** void clr_dot(int n) {
  62              		.loc 1 60 21 is_stmt 1 view -0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  61:src/lcd.c     ****         dots[n] = 0;
  67              		.loc 1 61 9 view .LVU5
  68              		.loc 1 61 17 is_stmt 0 view .LVU6
  69 0000 014B     		ldr	r3, .L6
  70 0002 0022     		movs	r2, #0
  71 0004 1A54     		strb	r2, [r3, r0]
  62:src/lcd.c     **** }
  72              		.loc 1 62 1 view .LVU7
  73 0006 7047     		bx	lr
  74              	.L7:
  75              		.align	2
  76              	.L6:
  77 0008 00000000 		.word	.LANCHOR0
  78              		.cfi_endproc
  79              	.LFE1:
  81              		.section	.text.is_dot,"ax",%progbits
  82              		.align	1
  83              		.p2align 2,,3
  84              		.global	is_dot
  85              		.syntax unified
  86              		.thumb
  87              		.thumb_func
  88              		.fpu fpv4-sp-d16
  90              	is_dot:
  91              	.LVL2:
  92              	.LFB2:
  63:src/lcd.c     **** int is_dot(int n) {
  93              		.loc 1 63 19 is_stmt 1 view -0
  94              		.cfi_startproc
  95              		@ args = 0, pretend = 0, frame = 0
  96              		@ frame_needed = 0, uses_anonymous_args = 0
  97              		@ link register save eliminated.
  64:src/lcd.c     **** 	return dots[n];
  98              		.loc 1 64 2 view .LVU9
  99              		.loc 1 64 13 is_stmt 0 view .LVU10
 100 0000 014B     		ldr	r3, .L9
  65:src/lcd.c     **** }
 101              		.loc 1 65 1 view .LVU11
 102 0002 185C     		ldrb	r0, [r3, r0]	@ zero_extendqisi2
 103              	.LVL3:
 104              		.loc 1 65 1 view .LVU12
 105 0004 7047     		bx	lr
 106              	.L10:
 107 0006 00BF     		.align	2
 108              	.L9:
 109 0008 00000000 		.word	.LANCHOR0
 110              		.cfi_endproc
 111              	.LFE2:
ARM GAS  /tmp/cc1Hm38z.s 			page 4


 113              		.section	.text.setuptty,"ax",%progbits
 114              		.align	1
 115              		.p2align 2,,3
 116              		.global	setuptty
 117              		.syntax unified
 118              		.thumb
 119              		.thumb_func
 120              		.fpu fpv4-sp-d16
 122              	setuptty:
 123              	.LVL4:
 124              	.LFB3:
  66:src/lcd.c     **** #endif
  67:src/lcd.c     **** 
  68:src/lcd.c     **** int setuptty(int reset) {
 125              		.loc 1 68 25 is_stmt 1 view -0
 126              		.cfi_startproc
 127              		@ args = 0, pretend = 0, frame = 0
 128              		@ frame_needed = 0, uses_anonymous_args = 0
 129              		@ link register save eliminated.
  69:src/lcd.c     **** #ifdef CONSOLE
  70:src/lcd.c     **** #if defined(USECURSES) && !defined(DM42) //don't want this in DM42
  71:src/lcd.c     ****         if (reset)
  72:src/lcd.c     ****                 endwin();
  73:src/lcd.c     ****         else {
  74:src/lcd.c     ****                 initscr();
  75:src/lcd.c     ****                 cbreak();
  76:src/lcd.c     ****                 noecho();
  77:src/lcd.c     ****                 //keypad(stdscr, TRUE);
  78:src/lcd.c     **** 				}
  79:src/lcd.c     **** #endif
  80:src/lcd.c     **** #endif
  81:src/lcd.c     ****         return 0;
 130              		.loc 1 81 9 view .LVU14
  82:src/lcd.c     **** }
 131              		.loc 1 82 1 is_stmt 0 view .LVU15
 132 0000 0020     		movs	r0, #0
 133              	.LVL5:
 134              		.loc 1 82 1 view .LVU16
 135 0002 7047     		bx	lr
 136              		.cfi_endproc
 137              	.LFE3:
 139              		.section	.text.reset_disp,"ax",%progbits
 140              		.align	1
 141              		.p2align 2,,3
 142              		.global	reset_disp
 143              		.syntax unified
 144              		.thumb
 145              		.thumb_func
 146              		.fpu fpv4-sp-d16
 148              	reset_disp:
 149              	.LFB4:
  83:src/lcd.c     **** 
  84:src/lcd.c     **** 
  85:src/lcd.c     **** void reset_disp(void) {
 150              		.loc 1 85 23 is_stmt 1 view -0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc1Hm38z.s 			page 5


 153              		@ frame_needed = 0, uses_anonymous_args = 0
  86:src/lcd.c     **** #ifdef DM42
  87:src/lcd.c     **** 	int rcl = is_dot(RCL_annun);
 154              		.loc 1 87 2 view .LVU18
 155              	.LVL6:
 156              	.LBB37:
 157              	.LBI37:
  63:src/lcd.c     **** 	return dots[n];
 158              		.loc 1 63 5 view .LVU19
 159              	.LBB38:
  64:src/lcd.c     **** }
 160              		.loc 1 64 2 view .LVU20
 161              	.LBE38:
 162              	.LBE37:
  85:src/lcd.c     **** #ifdef DM42
 163              		.loc 1 85 23 is_stmt 0 view .LVU21
 164 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 165              		.cfi_def_cfa_offset 32
 166              		.cfi_offset 4, -32
 167              		.cfi_offset 5, -28
 168              		.cfi_offset 6, -24
 169              		.cfi_offset 7, -20
 170              		.cfi_offset 8, -16
 171              		.cfi_offset 9, -12
 172              		.cfi_offset 10, -8
 173              		.cfi_offset 14, -4
 174              	.LBB41:
 175              	.LBB39:
  64:src/lcd.c     **** }
 176              		.loc 1 64 13 view .LVU22
 177 0004 1848     		ldr	r0, .L20
 178              	.LBE39:
 179              	.LBE41:
 180              	.LBB42:
 181              	.LBB43:
 182 0006 6FF08303 		mvn	r3, #131
 183              	.LBE43:
 184              	.LBE42:
 185              	.LBB45:
 186              	.LBB40:
 187 000a 90F88A10 		ldrb	r1, [r0, #138]	@ zero_extendqisi2
 188              	.LVL7:
  64:src/lcd.c     **** }
 189              		.loc 1 64 13 view .LVU23
 190              	.LBE40:
 191              	.LBE45:
  88:src/lcd.c     **** 	int bat = is_dot(BATTERY);
 192              		.loc 1 88 2 is_stmt 1 view .LVU24
 193              	.LBB46:
 194              	.LBI46:
  63:src/lcd.c     **** 	return dots[n];
 195              		.loc 1 63 5 view .LVU25
 196              	.LBB47:
  64:src/lcd.c     **** }
 197              		.loc 1 64 2 view .LVU26
  64:src/lcd.c     **** }
 198              		.loc 1 64 13 is_stmt 0 view .LVU27
ARM GAS  /tmp/cc1Hm38z.s 			page 6


 199 000e 90F887A0 		ldrb	r10, [r0, #135]	@ zero_extendqisi2
 200              	.LVL8:
  64:src/lcd.c     **** }
 201              		.loc 1 64 13 view .LVU28
 202              	.LBE47:
 203              	.LBE46:
  89:src/lcd.c     **** 	int leq = is_dot(LIT_EQ);
 204              		.loc 1 89 2 is_stmt 1 view .LVU29
 205              	.LBB48:
 206              	.LBI48:
  63:src/lcd.c     **** 	return dots[n];
 207              		.loc 1 63 5 view .LVU30
 208              	.LBB49:
  64:src/lcd.c     **** }
 209              		.loc 1 64 2 view .LVU31
  64:src/lcd.c     **** }
 210              		.loc 1 64 13 is_stmt 0 view .LVU32
 211 0012 90F88490 		ldrb	r9, [r0, #132]	@ zero_extendqisi2
 212              	.LVL9:
  64:src/lcd.c     **** }
 213              		.loc 1 64 13 view .LVU33
 214              	.LBE49:
 215              	.LBE48:
  90:src/lcd.c     **** 	int rpn = is_dot(RPN);
 216              		.loc 1 90 2 is_stmt 1 view .LVU34
 217              	.LBB50:
 218              	.LBI42:
  63:src/lcd.c     **** 	return dots[n];
 219              		.loc 1 63 5 view .LVU35
 220              	.LBB44:
  64:src/lcd.c     **** }
 221              		.loc 1 64 2 view .LVU36
  64:src/lcd.c     **** }
 222              		.loc 1 64 13 is_stmt 0 view .LVU37
 223 0016 90F88D80 		ldrb	r8, [r0, #141]	@ zero_extendqisi2
 224              	.LVL10:
  64:src/lcd.c     **** }
 225              		.loc 1 64 13 view .LVU38
 226              	.LBE44:
 227              	.LBE50:
  91:src/lcd.c     **** 	int i;
 228              		.loc 1 91 2 is_stmt 1 view .LVU39
  92:src/lcd.c     ****         for (i=0; i<TOP_DOTS; i++)
 229              		.loc 1 92 9 view .LVU40
 230              		.loc 1 92 19 view .LVU41
  93:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 231              		.loc 1 93 38 is_stmt 0 view .LVU42
 232 001a 4925     		movs	r5, #73
 233              	.LBB51:
 234              	.LBB52:
  61:src/lcd.c     **** }
 235              		.loc 1 61 17 view .LVU43
 236 001c 0026     		movs	r6, #0
 237              	.LBE52:
 238              	.LBE51:
  92:src/lcd.c     ****         for (i=0; i<TOP_DOTS; i++)
 239              		.loc 1 92 9 view .LVU44
ARM GAS  /tmp/cc1Hm38z.s 			page 7


 240 001e 40F2C727 		movw	r7, #711
 241 0022 06E0     		b	.L17
 242              	.LVL11:
 243              	.L13:
  94:src/lcd.c     **** 			clr_dot(i);
 244              		.loc 1 94 4 is_stmt 1 discriminator 2 view .LVU45
 245              	.LBB59:
 246              	.LBI51:
  60:src/lcd.c     ****         dots[n] = 0;
 247              		.loc 1 60 6 discriminator 2 view .LVU46
 248              	.LBB53:
  61:src/lcd.c     **** }
 249              		.loc 1 61 9 discriminator 2 view .LVU47
 250              	.LBE53:
 251              	.LBE59:
  93:src/lcd.c     **** 			clr_dot(i);
 252              		.loc 1 93 38 is_stmt 0 discriminator 2 view .LVU48
 253 0024 E407     		lsls	r4, r4, #31
 254              	.LBB60:
 255              	.LBB54:
  61:src/lcd.c     **** }
 256              		.loc 1 61 17 discriminator 2 view .LVU49
 257 0026 00EB0302 		add	r2, r0, r3
 258              	.LBE54:
 259              	.LBE60:
  93:src/lcd.c     **** 			clr_dot(i);
 260              		.loc 1 93 38 discriminator 2 view .LVU50
 261 002a 01D4     		bmi	.L14
 262              	.LBB61:
 263              	.LBB55:
  61:src/lcd.c     **** }
 264              		.loc 1 61 17 view .LVU51
 265 002c 82F88460 		strb	r6, [r2, #132]
 266              	.LVL12:
  61:src/lcd.c     **** }
 267              		.loc 1 61 17 view .LVU52
 268              	.LBE55:
 269              	.LBE61:
  92:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 270              		.loc 1 92 31 is_stmt 1 view .LVU53
  92:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 271              		.loc 1 92 19 view .LVU54
 272              	.L14:
  92:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 273              		.loc 1 92 19 is_stmt 0 view .LVU55
 274 0030 0133     		adds	r3, r3, #1
 275              	.L17:
 276              	.LVL13:
  93:src/lcd.c     **** 			clr_dot(i);
 277              		.loc 1 93 3 is_stmt 1 view .LVU56
 278              		.loc 1 94 4 view .LVU57
 279              	.LBB62:
  60:src/lcd.c     ****         dots[n] = 0;
 280              		.loc 1 60 6 view .LVU58
 281              	.LBB56:
  61:src/lcd.c     **** }
 282              		.loc 1 61 9 view .LVU59
ARM GAS  /tmp/cc1Hm38z.s 			page 8


 283              	.LBE56:
 284              	.LBE62:
  93:src/lcd.c     **** 			clr_dot(i);
 285              		.loc 1 93 38 is_stmt 0 view .LVU60
 286 0032 062B     		cmp	r3, #6
 287              	.LBB63:
 288              	.LBB57:
  61:src/lcd.c     **** }
 289              		.loc 1 61 17 view .LVU61
 290 0034 00EB0302 		add	r2, r0, r3
 291              	.LBE57:
 292              	.LBE63:
  93:src/lcd.c     **** 			clr_dot(i);
 293              		.loc 1 93 38 view .LVU62
 294 0038 25FA03F4 		lsr	r4, r5, r3
 295 003c F2D9     		bls	.L13
  92:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 296              		.loc 1 92 9 view .LVU63
 297 003e BB42     		cmp	r3, r7
 298              	.LBB64:
 299              	.LBB58:
  61:src/lcd.c     **** }
 300              		.loc 1 61 17 view .LVU64
 301 0040 82F88460 		strb	r6, [r2, #132]
 302              	.LVL14:
  61:src/lcd.c     **** }
 303              		.loc 1 61 17 view .LVU65
 304              	.LBE58:
 305              	.LBE64:
  92:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 306              		.loc 1 92 31 is_stmt 1 view .LVU66
  92:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 307              		.loc 1 92 19 view .LVU67
  92:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 308              		.loc 1 92 9 is_stmt 0 view .LVU68
 309 0044 F4D1     		bne	.L14
  95:src/lcd.c     **** 	dot(RCL_annun, rcl);
 310              		.loc 1 95 2 is_stmt 1 view .LVU69
 311 0046 8A20     		movs	r0, #138
 312 0048 FFF7FEFF 		bl	dot
 313              	.LVL15:
  96:src/lcd.c     **** 	dot(BATTERY, bat);
 314              		.loc 1 96 2 view .LVU70
 315 004c 5146     		mov	r1, r10
 316 004e 8720     		movs	r0, #135
 317 0050 FFF7FEFF 		bl	dot
 318              	.LVL16:
  97:src/lcd.c     **** 	dot(LIT_EQ, leq);
 319              		.loc 1 97 2 view .LVU71
 320 0054 4946     		mov	r1, r9
 321 0056 8420     		movs	r0, #132
 322 0058 FFF7FEFF 		bl	dot
 323              	.LVL17:
  98:src/lcd.c     **** 	dot(RPN, rpn);
 324              		.loc 1 98 2 view .LVU72
 325 005c 4146     		mov	r1, r8
 326 005e 8D20     		movs	r0, #141
ARM GAS  /tmp/cc1Hm38z.s 			page 9


  99:src/lcd.c     **** #else  
 100:src/lcd.c     **** #ifndef CONSOLE
 101:src/lcd.c     **** 	int rcl = is_dot(RCL_annun);
 102:src/lcd.c     **** 	int bat = is_dot(BATTERY);
 103:src/lcd.c     **** 	int leq = is_dot(LIT_EQ);
 104:src/lcd.c     **** 	int rpn = is_dot(RPN);
 105:src/lcd.c     **** #ifndef REALBUILD
 106:src/lcd.c     **** 	*LastDisplayedText = '\0';
 107:src/lcd.c     **** #endif
 108:src/lcd.c     ****         wait_for_display();
 109:src/lcd.c     **** #if defined(QTGUI) || defined(IOS)
 110:src/lcd.c     ****     	xset(LcdData, 0, sizeof(LcdData));
 111:src/lcd.c     ****     	xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
 112:src/lcd.c     ****     	LastDisplayedNumber[NUMBER_LENGTH]=0;
 113:src/lcd.c     ****     	xset(LastDisplayedExponent, ' ', EXPONENT_LENGTH);
 114:src/lcd.c     ****     	LastDisplayedExponent[EXPONENT_LENGTH]=0;
 115:src/lcd.c     **** #else
 116:src/lcd.c     ****         // terrible code which assumes int are 4 bytes long. Works fine for realbuild and for WINGU
 117:src/lcd.c     **** 	xset((void *) AT91C_SLCDC_MEM, 0, 4 * 20);
 118:src/lcd.c     **** #endif
 119:src/lcd.c     **** 	dot(RCL_annun, rcl);
 120:src/lcd.c     **** 	dot(BATTERY, bat);
 121:src/lcd.c     **** 	dot(LIT_EQ, leq);
 122:src/lcd.c     **** 	dot(RPN, rpn);
 123:src/lcd.c     **** #else
 124:src/lcd.c     **** // Console
 125:src/lcd.c     **** #ifdef USECURSES
 126:src/lcd.c     **** 	int i;
 127:src/lcd.c     ****         for (i=0; i<400; i++)
 128:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 129:src/lcd.c     **** 			clr_dot(i);
 130:src/lcd.c     **** 
 131:src/lcd.c     **** 	erase();
 132:src/lcd.c     ****         MOVE(0, 4);
 133:src/lcd.c     **** #else
 134:src/lcd.c     ****         putchar('\r');
 135:src/lcd.c     ****         for (i=0; i<70; i++)
 136:src/lcd.c     ****                 putchar(' ');
 137:src/lcd.c     ****         putchar('\r');
 138:src/lcd.c     ****         putchar(' ');
 139:src/lcd.c     **** #endif
 140:src/lcd.c     **** #endif
 141:src/lcd.c     ****         State2.invalid_disp = 0;
 142:src/lcd.c     **** #endif
 143:src/lcd.c     **** }
 327              		.loc 1 143 1 is_stmt 0 view .LVU73
 328 0060 BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 329              		.cfi_restore 14
 330              		.cfi_restore 10
 331              		.cfi_restore 9
 332              		.cfi_restore 8
 333              		.cfi_restore 7
 334              		.cfi_restore 6
 335              		.cfi_restore 5
 336              		.cfi_restore 4
 337              		.cfi_def_cfa_offset 0
 338              	.LVL18:
ARM GAS  /tmp/cc1Hm38z.s 			page 10


  98:src/lcd.c     **** 	dot(RPN, rpn);
 339              		.loc 1 98 2 view .LVU74
 340 0064 FFF7FEBF 		b	dot
 341              	.LVL19:
 342              	.L21:
  98:src/lcd.c     **** 	dot(RPN, rpn);
 343              		.loc 1 98 2 view .LVU75
 344              		.align	2
 345              	.L20:
 346 0068 00000000 		.word	.LANCHOR0
 347              		.cfi_endproc
 348              	.LFE4:
 350              		.section	.text.left_side,"ax",%progbits
 351              		.align	1
 352              		.p2align 2,,3
 353              		.global	left_side
 354              		.syntax unified
 355              		.thumb
 356              		.thumb_func
 357              		.fpu fpv4-sp-d16
 359              	left_side:
 360              	.LVL20:
 361              	.LFB5:
 144:src/lcd.c     **** 
 145:src/lcd.c     **** #if defined(DM42)
 146:src/lcd.c     ****   #define setBlackPixel(x, y)                bitblt24(x, 1, y, 1, BLT_OR,   BLT_NONE)
 147:src/lcd.c     ****   #define setWhitePixel(x, y)                bitblt24(x, 1, y, 1, BLT_ANDN, BLT_NONE)
 148:src/lcd.c     **** 
 149:src/lcd.c     **** /* void left_side (int i, int j) { //i - xleft reference; j - ytop reference */
 150:src/lcd.c     **** /*   lcd_fill_rect ( i+2, j+11, 4, 8, 0xff ); */
 151:src/lcd.c     **** /*   lcd_fill_rect ( i+3, j+3, 4, 8, 0xff ); */
 152:src/lcd.c     **** /*   setBlackPixel ( i+4, j+2 ); */
 153:src/lcd.c     **** /*   setBlackPixel ( i+3, j+19 ); */
 154:src/lcd.c     **** /*   setWhitePixel ( i+6, j+3 ); */
 155:src/lcd.c     **** /*   setWhitePixel ( i+5, j+18 ); */
 156:src/lcd.c     **** /* } */
 157:src/lcd.c     **** 
 158:src/lcd.c     **** void left_side (int i, int j) { //i - xleft reference; j - ytop reference
 362              		.loc 1 158 31 is_stmt 1 view -0
 363              		.cfi_startproc
 364              		@ args = 0, pretend = 0, frame = 0
 365              		@ frame_needed = 0, uses_anonymous_args = 0
 159:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 366              		.loc 1 159 3 view .LVU77
 158:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 367              		.loc 1 158 31 is_stmt 0 view .LVU78
 368 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 369              		.cfi_def_cfa_offset 24
 370              		.cfi_offset 4, -24
 371              		.cfi_offset 5, -20
 372              		.cfi_offset 6, -16
 373              		.cfi_offset 7, -12
 374              		.cfi_offset 8, -8
 375              		.cfi_offset 14, -4
 376 0004 82B0     		sub	sp, sp, #8
 377              		.cfi_def_cfa_offset 32
 378              		.loc 1 159 3 view .LVU79
ARM GAS  /tmp/cc1Hm38z.s 			page 11


 379 0006 FF27     		movs	r7, #255
 158:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 380              		.loc 1 158 31 view .LVU80
 381 0008 0D46     		mov	r5, r1
 382              		.loc 1 159 3 view .LVU81
 383 000a 124E     		ldr	r6, .L24
 384 000c 0097     		str	r7, [sp]
 158:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 385              		.loc 1 158 31 view .LVU82
 386 000e 0446     		mov	r4, r0
 160:src/lcd.c     ****   lcd_fill_rect (i+3, j+2, 1, 18, 0xff);
 387              		.loc 1 160 24 view .LVU83
 388 0010 05F10208 		add	r8, r5, #2
 159:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 389              		.loc 1 159 3 view .LVU84
 390 0014 0B31     		adds	r1, r1, #11
 391              	.LVL21:
 159:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 392              		.loc 1 159 3 view .LVU85
 393 0016 0230     		adds	r0, r0, #2
 394              	.LVL22:
 159:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 395              		.loc 1 159 3 view .LVU86
 396 0018 0923     		movs	r3, #9
 397 001a 0122     		movs	r2, #1
 398 001c B047     		blx	r6
 399              	.LVL23:
 400              		.loc 1 160 3 is_stmt 1 view .LVU87
 401 001e 4146     		mov	r1, r8
 402 0020 E01C     		adds	r0, r4, #3
 403 0022 0097     		str	r7, [sp]
 404 0024 1223     		movs	r3, #18
 405 0026 0122     		movs	r2, #1
 406 0028 B047     		blx	r6
 407              	.LVL24:
 161:src/lcd.c     ****   lcd_fill_rect (i+4, j+2, 1, 17, 0xff);
 408              		.loc 1 161 3 view .LVU88
 409 002a 4146     		mov	r1, r8
 410 002c 201D     		adds	r0, r4, #4
 411 002e 0097     		str	r7, [sp]
 412 0030 1123     		movs	r3, #17
 413 0032 0122     		movs	r2, #1
 414 0034 B047     		blx	r6
 415              	.LVL25:
 162:src/lcd.c     ****   lcd_fill_rect (i+5, j+3, 1, 15, 0xff);
 416              		.loc 1 162 3 view .LVU89
 417 0036 E91C     		adds	r1, r5, #3
 418 0038 601D     		adds	r0, r4, #5
 419 003a 0097     		str	r7, [sp]
 420 003c 0F23     		movs	r3, #15
 421 003e 0122     		movs	r2, #1
 422 0040 B047     		blx	r6
 423              	.LVL26:
 163:src/lcd.c     ****   lcd_fill_rect (i+6, j+4, 1, 7, 0xff);
 424              		.loc 1 163 3 view .LVU90
 425 0042 291D     		adds	r1, r5, #4
 426 0044 A01D     		adds	r0, r4, #6
ARM GAS  /tmp/cc1Hm38z.s 			page 12


 427 0046 0097     		str	r7, [sp]
 428 0048 0723     		movs	r3, #7
 429 004a 0122     		movs	r2, #1
 430 004c B047     		blx	r6
 431              	.LVL27:
 164:src/lcd.c     **** }
 432              		.loc 1 164 1 is_stmt 0 view .LVU91
 433 004e 02B0     		add	sp, sp, #8
 434              		.cfi_def_cfa_offset 24
 435              		@ sp needed
 436 0050 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 437              	.LVL28:
 438              	.L25:
 439              		.loc 1 164 1 view .LVU92
 440              		.align	2
 441              	.L24:
 442 0054 3D020008 		.word	134218301
 443              		.cfi_endproc
 444              	.LFE5:
 446              		.section	.text.left_side_top,"ax",%progbits
 447              		.align	1
 448              		.p2align 2,,3
 449              		.global	left_side_top
 450              		.syntax unified
 451              		.thumb
 452              		.thumb_func
 453              		.fpu fpv4-sp-d16
 455              	left_side_top:
 456              	.LVL29:
 457              	.LFB6:
 165:src/lcd.c     **** void left_side_top (int i, int j) {
 458              		.loc 1 165 35 is_stmt 1 view -0
 459              		.cfi_startproc
 460              		@ args = 0, pretend = 0, frame = 0
 461              		@ frame_needed = 0, uses_anonymous_args = 0
 462              		@ link register save eliminated.
 166:src/lcd.c     ****   left_side(i, j);
 463              		.loc 1 166 3 view .LVU94
 464 0000 FFF7FEBF 		b	left_side
 465              	.LVL30:
 466              		.loc 1 166 3 is_stmt 0 view .LVU95
 467              		.cfi_endproc
 468              	.LFE6:
 470              		.section	.text.left_side_bottom,"ax",%progbits
 471              		.align	1
 472              		.p2align 2,,3
 473              		.global	left_side_bottom
 474              		.syntax unified
 475              		.thumb
 476              		.thumb_func
 477              		.fpu fpv4-sp-d16
 479              	left_side_bottom:
 480              	.LVL31:
 481              	.LFB7:
 167:src/lcd.c     **** }
 168:src/lcd.c     **** void left_side_bottom (int i, int j) {
 482              		.loc 1 168 38 is_stmt 1 view -0
ARM GAS  /tmp/cc1Hm38z.s 			page 13


 483              		.cfi_startproc
 484              		@ args = 0, pretend = 0, frame = 0
 485              		@ frame_needed = 0, uses_anonymous_args = 0
 486              		@ link register save eliminated.
 169:src/lcd.c     ****   left_side(i-2, j+19);
 487              		.loc 1 169 3 view .LVU97
 488 0000 0238     		subs	r0, r0, #2
 489              	.LVL32:
 490              		.loc 1 169 3 is_stmt 0 view .LVU98
 491 0002 1331     		adds	r1, r1, #19
 492              	.LVL33:
 493              		.loc 1 169 3 view .LVU99
 494 0004 FFF7FEBF 		b	left_side
 495              	.LVL34:
 496              		.loc 1 169 3 view .LVU100
 497              		.cfi_endproc
 498              	.LFE7:
 500              		.section	.text.right_side,"ax",%progbits
 501              		.align	1
 502              		.p2align 2,,3
 503              		.global	right_side
 504              		.syntax unified
 505              		.thumb
 506              		.thumb_func
 507              		.fpu fpv4-sp-d16
 509              	right_side:
 510              	.LVL35:
 511              	.LFB8:
 170:src/lcd.c     **** }
 171:src/lcd.c     **** void right_side (int i, int j) {
 512              		.loc 1 171 32 is_stmt 1 view -0
 513              		.cfi_startproc
 514              		@ args = 0, pretend = 0, frame = 0
 515              		@ frame_needed = 0, uses_anonymous_args = 0
 172:src/lcd.c     ****   lcd_fill_rect (i+16, j+11, 1, 7, 0xff);
 516              		.loc 1 172 3 view .LVU102
 171:src/lcd.c     ****   lcd_fill_rect (i+16, j+11, 1, 7, 0xff);
 517              		.loc 1 171 32 is_stmt 0 view .LVU103
 518 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 519              		.cfi_def_cfa_offset 24
 520              		.cfi_offset 4, -24
 521              		.cfi_offset 5, -20
 522              		.cfi_offset 6, -16
 523              		.cfi_offset 7, -12
 524              		.cfi_offset 8, -8
 525              		.cfi_offset 14, -4
 526 0004 82B0     		sub	sp, sp, #8
 527              		.cfi_def_cfa_offset 32
 528              		.loc 1 172 3 view .LVU104
 529 0006 FF27     		movs	r7, #255
 530 0008 144E     		ldr	r6, .L30
 531 000a 0097     		str	r7, [sp]
 171:src/lcd.c     ****   lcd_fill_rect (i+16, j+11, 1, 7, 0xff);
 532              		.loc 1 171 32 view .LVU105
 533 000c 0446     		mov	r4, r0
 534 000e 0D46     		mov	r5, r1
 535              		.loc 1 172 3 view .LVU106
ARM GAS  /tmp/cc1Hm38z.s 			page 14


 536 0010 1030     		adds	r0, r0, #16
 537              	.LVL36:
 538              		.loc 1 172 3 view .LVU107
 539 0012 0B31     		adds	r1, r1, #11
 540              	.LVL37:
 541              		.loc 1 172 3 view .LVU108
 542 0014 0723     		movs	r3, #7
 543 0016 0122     		movs	r2, #1
 544 0018 B047     		blx	r6
 545              	.LVL38:
 173:src/lcd.c     ****   lcd_fill_rect (i+17, j+4, 1, 15, 0xff);
 546              		.loc 1 173 3 is_stmt 1 view .LVU109
 547 001a 291D     		adds	r1, r5, #4
 548 001c 04F11100 		add	r0, r4, #17
 549 0020 0097     		str	r7, [sp]
 550 0022 0F23     		movs	r3, #15
 551 0024 0122     		movs	r2, #1
 552 0026 B047     		blx	r6
 553              	.LVL39:
 174:src/lcd.c     ****   lcd_fill_rect (i+18, j+3, 1, 17, 0xff);
 554              		.loc 1 174 3 view .LVU110
 175:src/lcd.c     ****   lcd_fill_rect (i+19, j+2, 1, 18, 0xff);
 555              		.loc 1 175 25 is_stmt 0 view .LVU111
 556 0028 05F10208 		add	r8, r5, #2
 174:src/lcd.c     ****   lcd_fill_rect (i+18, j+3, 1, 17, 0xff);
 557              		.loc 1 174 3 view .LVU112
 558 002c E91C     		adds	r1, r5, #3
 559 002e 04F11200 		add	r0, r4, #18
 560 0032 0097     		str	r7, [sp]
 561 0034 1123     		movs	r3, #17
 562 0036 0122     		movs	r2, #1
 563 0038 B047     		blx	r6
 564              	.LVL40:
 565              		.loc 1 175 3 is_stmt 1 view .LVU113
 566 003a 4146     		mov	r1, r8
 567 003c 04F11300 		add	r0, r4, #19
 568 0040 0097     		str	r7, [sp]
 569 0042 1223     		movs	r3, #18
 570 0044 0122     		movs	r2, #1
 571 0046 B047     		blx	r6
 572              	.LVL41:
 176:src/lcd.c     ****   lcd_fill_rect (i+20, j+2, 1, 9, 0xff);
 573              		.loc 1 176 3 view .LVU114
 574 0048 4146     		mov	r1, r8
 575 004a 04F11400 		add	r0, r4, #20
 576 004e 0097     		str	r7, [sp]
 577 0050 0923     		movs	r3, #9
 578 0052 0122     		movs	r2, #1
 579 0054 B047     		blx	r6
 580              	.LVL42:
 177:src/lcd.c     **** }
 581              		.loc 1 177 1 is_stmt 0 view .LVU115
 582 0056 02B0     		add	sp, sp, #8
 583              		.cfi_def_cfa_offset 24
 584              		@ sp needed
 585 0058 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 586              	.LVL43:
ARM GAS  /tmp/cc1Hm38z.s 			page 15


 587              	.L31:
 588              		.loc 1 177 1 view .LVU116
 589              		.align	2
 590              	.L30:
 591 005c 3D020008 		.word	134218301
 592              		.cfi_endproc
 593              	.LFE8:
 595              		.section	.text.right_side_top,"ax",%progbits
 596              		.align	1
 597              		.p2align 2,,3
 598              		.global	right_side_top
 599              		.syntax unified
 600              		.thumb
 601              		.thumb_func
 602              		.fpu fpv4-sp-d16
 604              	right_side_top:
 605              	.LVL44:
 606              	.LFB9:
 178:src/lcd.c     **** void right_side_top (int i, int j) {
 607              		.loc 1 178 36 is_stmt 1 view -0
 608              		.cfi_startproc
 609              		@ args = 0, pretend = 0, frame = 0
 610              		@ frame_needed = 0, uses_anonymous_args = 0
 611              		@ link register save eliminated.
 179:src/lcd.c     ****   right_side(i, j);
 612              		.loc 1 179 3 view .LVU118
 613 0000 FFF7FEBF 		b	right_side
 614              	.LVL45:
 615              		.loc 1 179 3 is_stmt 0 view .LVU119
 616              		.cfi_endproc
 617              	.LFE9:
 619              		.section	.text.right_side_bottom,"ax",%progbits
 620              		.align	1
 621              		.p2align 2,,3
 622              		.global	right_side_bottom
 623              		.syntax unified
 624              		.thumb
 625              		.thumb_func
 626              		.fpu fpv4-sp-d16
 628              	right_side_bottom:
 629              	.LVL46:
 630              	.LFB10:
 180:src/lcd.c     **** }
 181:src/lcd.c     **** void right_side_bottom (int i, int j) {
 631              		.loc 1 181 39 is_stmt 1 view -0
 632              		.cfi_startproc
 633              		@ args = 0, pretend = 0, frame = 0
 634              		@ frame_needed = 0, uses_anonymous_args = 0
 635              		@ link register save eliminated.
 182:src/lcd.c     ****   right_side(i-2, j+19);
 636              		.loc 1 182 3 view .LVU121
 637 0000 0238     		subs	r0, r0, #2
 638              	.LVL47:
 639              		.loc 1 182 3 is_stmt 0 view .LVU122
 640 0002 1331     		adds	r1, r1, #19
 641              	.LVL48:
 642              		.loc 1 182 3 view .LVU123
ARM GAS  /tmp/cc1Hm38z.s 			page 16


 643 0004 FFF7FEBF 		b	right_side
 644              	.LVL49:
 645              		.loc 1 182 3 view .LVU124
 646              		.cfi_endproc
 647              	.LFE10:
 649              		.section	.text.top,"ax",%progbits
 650              		.align	1
 651              		.p2align 2,,3
 652              		.global	top
 653              		.syntax unified
 654              		.thumb
 655              		.thumb_func
 656              		.fpu fpv4-sp-d16
 658              	top:
 659              	.LVL50:
 660              	.LFB11:
 183:src/lcd.c     **** }
 184:src/lcd.c     **** void top (int i, int j) {
 661              		.loc 1 184 25 is_stmt 1 view -0
 662              		.cfi_startproc
 663              		@ args = 0, pretend = 0, frame = 0
 664              		@ frame_needed = 0, uses_anonymous_args = 0
 185:src/lcd.c     ****   lcd_fill_rect ( i+5, j, 14, 1, 0xff );
 665              		.loc 1 185 3 view .LVU126
 184:src/lcd.c     ****   lcd_fill_rect ( i+5, j, 14, 1, 0xff );
 666              		.loc 1 184 25 is_stmt 0 view .LVU127
 667 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 668              		.cfi_def_cfa_offset 20
 669              		.cfi_offset 4, -20
 670              		.cfi_offset 5, -16
 671              		.cfi_offset 6, -12
 672              		.cfi_offset 7, -8
 673              		.cfi_offset 14, -4
 674 0002 83B0     		sub	sp, sp, #12
 675              		.cfi_def_cfa_offset 32
 676              		.loc 1 185 3 view .LVU128
 677 0004 FF27     		movs	r7, #255
 678 0006 0E4E     		ldr	r6, .L36
 679 0008 0097     		str	r7, [sp]
 184:src/lcd.c     ****   lcd_fill_rect ( i+5, j, 14, 1, 0xff );
 680              		.loc 1 184 25 view .LVU129
 681 000a 0446     		mov	r4, r0
 682 000c 0D46     		mov	r5, r1
 683              		.loc 1 185 3 view .LVU130
 684 000e 0530     		adds	r0, r0, #5
 685              	.LVL51:
 686              		.loc 1 185 3 view .LVU131
 687 0010 0123     		movs	r3, #1
 688 0012 0E22     		movs	r2, #14
 689 0014 B047     		blx	r6
 690              	.LVL52:
 186:src/lcd.c     ****   lcd_fill_rect ( i+4, j+1, 16, 1, 0xff );
 691              		.loc 1 186 3 is_stmt 1 view .LVU132
 692 0016 691C     		adds	r1, r5, #1
 693 0018 201D     		adds	r0, r4, #4
 694 001a 0097     		str	r7, [sp]
 695 001c 0123     		movs	r3, #1
ARM GAS  /tmp/cc1Hm38z.s 			page 17


 696 001e 1022     		movs	r2, #16
 697 0020 B047     		blx	r6
 698              	.LVL53:
 187:src/lcd.c     ****   lcd_fill_rect ( i+6, j+2, 12, 1, 0xff );
 699              		.loc 1 187 3 view .LVU133
 700 0022 A91C     		adds	r1, r5, #2
 701 0024 A01D     		adds	r0, r4, #6
 702 0026 0097     		str	r7, [sp]
 703 0028 0123     		movs	r3, #1
 704 002a 0C22     		movs	r2, #12
 705 002c B047     		blx	r6
 706              	.LVL54:
 188:src/lcd.c     ****   lcd_fill_rect ( i+7, j+3, 10, 1, 0xff );
 707              		.loc 1 188 3 view .LVU134
 708 002e E91C     		adds	r1, r5, #3
 709 0030 E01D     		adds	r0, r4, #7
 710 0032 0097     		str	r7, [sp]
 711 0034 0123     		movs	r3, #1
 712 0036 0A22     		movs	r2, #10
 713 0038 B047     		blx	r6
 714              	.LVL55:
 189:src/lcd.c     **** }
 715              		.loc 1 189 1 is_stmt 0 view .LVU135
 716 003a 03B0     		add	sp, sp, #12
 717              		.cfi_def_cfa_offset 20
 718              		@ sp needed
 719 003c F0BD     		pop	{r4, r5, r6, r7, pc}
 720              	.LVL56:
 721              	.L37:
 722              		.loc 1 189 1 view .LVU136
 723 003e 00BF     		.align	2
 724              	.L36:
 725 0040 3D020008 		.word	134218301
 726              		.cfi_endproc
 727              	.LFE11:
 729              		.section	.text.middle,"ax",%progbits
 730              		.align	1
 731              		.p2align 2,,3
 732              		.global	middle
 733              		.syntax unified
 734              		.thumb
 735              		.thumb_func
 736              		.fpu fpv4-sp-d16
 738              	middle:
 739              	.LVL57:
 740              	.LFB12:
 190:src/lcd.c     **** void middle (int i, int j) {
 741              		.loc 1 190 28 is_stmt 1 view -0
 742              		.cfi_startproc
 743              		@ args = 0, pretend = 0, frame = 0
 744              		@ frame_needed = 0, uses_anonymous_args = 0
 191:src/lcd.c     ****   lcd_fill_rect ( i+5, j+19, 11, 3, 0xff );
 745              		.loc 1 191 3 view .LVU138
 190:src/lcd.c     **** void middle (int i, int j) {
 746              		.loc 1 190 28 is_stmt 0 view .LVU139
 747 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 748              		.cfi_def_cfa_offset 20
ARM GAS  /tmp/cc1Hm38z.s 			page 18


 749              		.cfi_offset 4, -20
 750              		.cfi_offset 5, -16
 751              		.cfi_offset 6, -12
 752              		.cfi_offset 7, -8
 753              		.cfi_offset 14, -4
 754 0002 83B0     		sub	sp, sp, #12
 755              		.cfi_def_cfa_offset 32
 756              		.loc 1 191 3 view .LVU140
 757 0004 FF23     		movs	r3, #255
 190:src/lcd.c     **** void middle (int i, int j) {
 758              		.loc 1 190 28 view .LVU141
 759 0006 0546     		mov	r5, r0
 760              		.loc 1 191 3 view .LVU142
 761 0008 0093     		str	r3, [sp]
 762 000a 0D4E     		ldr	r6, .L40
 192:src/lcd.c     ****   setBlackPixel ( i+4, j+20 );
 763              		.loc 1 192 3 view .LVU143
 764 000c 0D4F     		ldr	r7, .L40+4
 190:src/lcd.c     **** void middle (int i, int j) {
 765              		.loc 1 190 28 view .LVU144
 766 000e 0C46     		mov	r4, r1
 191:src/lcd.c     ****   lcd_fill_rect ( i+5, j+19, 11, 3, 0xff );
 767              		.loc 1 191 3 view .LVU145
 768 0010 0530     		adds	r0, r0, #5
 769              	.LVL58:
 191:src/lcd.c     ****   lcd_fill_rect ( i+5, j+19, 11, 3, 0xff );
 770              		.loc 1 191 3 view .LVU146
 771 0012 1331     		adds	r1, r1, #19
 772              	.LVL59:
 191:src/lcd.c     ****   lcd_fill_rect ( i+5, j+19, 11, 3, 0xff );
 773              		.loc 1 191 3 view .LVU147
 774 0014 0323     		movs	r3, #3
 775 0016 0B22     		movs	r2, #11
 776 0018 B047     		blx	r6
 777              	.LVL60:
 778              		.loc 1 192 3 is_stmt 1 view .LVU148
 779 001a 1434     		adds	r4, r4, #20
 780              	.LVL61:
 781              		.loc 1 192 3 is_stmt 0 view .LVU149
 782 001c 0026     		movs	r6, #0
 783 001e 0123     		movs	r3, #1
 784 0020 2246     		mov	r2, r4
 785 0022 281D     		adds	r0, r5, #4
 786 0024 1946     		mov	r1, r3
 787 0026 CDE90066 		strd	r6, r6, [sp]
 788 002a B847     		blx	r7
 789              	.LVL62:
 193:src/lcd.c     ****   setBlackPixel ( i+16, j+20 );
 790              		.loc 1 193 3 is_stmt 1 view .LVU150
 791 002c 0123     		movs	r3, #1
 792 002e CDE90066 		strd	r6, r6, [sp]
 793 0032 2246     		mov	r2, r4
 794 0034 05F11000 		add	r0, r5, #16
 795 0038 1946     		mov	r1, r3
 796 003a B847     		blx	r7
 797              	.LVL63:
 194:src/lcd.c     **** }
ARM GAS  /tmp/cc1Hm38z.s 			page 19


 798              		.loc 1 194 1 is_stmt 0 view .LVU151
 799 003c 03B0     		add	sp, sp, #12
 800              		.cfi_def_cfa_offset 20
 801              		@ sp needed
 802 003e F0BD     		pop	{r4, r5, r6, r7, pc}
 803              	.LVL64:
 804              	.L41:
 805              		.loc 1 194 1 view .LVU152
 806              		.align	2
 807              	.L40:
 808 0040 3D020008 		.word	134218301
 809 0044 25020008 		.word	134218277
 810              		.cfi_endproc
 811              	.LFE12:
 813              		.section	.text.bottom,"ax",%progbits
 814              		.align	1
 815              		.p2align 2,,3
 816              		.global	bottom
 817              		.syntax unified
 818              		.thumb
 819              		.thumb_func
 820              		.fpu fpv4-sp-d16
 822              	bottom:
 823              	.LVL65:
 824              	.LFB13:
 195:src/lcd.c     **** void bottom (int i, int j) {
 825              		.loc 1 195 28 is_stmt 1 view -0
 826              		.cfi_startproc
 827              		@ args = 0, pretend = 0, frame = 0
 828              		@ frame_needed = 0, uses_anonymous_args = 0
 196:src/lcd.c     ****   lcd_fill_rect ( i+2, j+40, 14, 1, 0xff );
 829              		.loc 1 196 3 view .LVU154
 195:src/lcd.c     **** void bottom (int i, int j) {
 830              		.loc 1 195 28 is_stmt 0 view .LVU155
 831 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 832              		.cfi_def_cfa_offset 20
 833              		.cfi_offset 4, -20
 834              		.cfi_offset 5, -16
 835              		.cfi_offset 6, -12
 836              		.cfi_offset 7, -8
 837              		.cfi_offset 14, -4
 838 0002 83B0     		sub	sp, sp, #12
 839              		.cfi_def_cfa_offset 32
 840              		.loc 1 196 3 view .LVU156
 841 0004 FF27     		movs	r7, #255
 842 0006 104E     		ldr	r6, .L44
 843 0008 0097     		str	r7, [sp]
 195:src/lcd.c     **** void bottom (int i, int j) {
 844              		.loc 1 195 28 view .LVU157
 845 000a 0446     		mov	r4, r0
 846 000c 0D46     		mov	r5, r1
 847              		.loc 1 196 3 view .LVU158
 848 000e 0230     		adds	r0, r0, #2
 849              	.LVL66:
 850              		.loc 1 196 3 view .LVU159
 851 0010 2831     		adds	r1, r1, #40
 852              	.LVL67:
ARM GAS  /tmp/cc1Hm38z.s 			page 20


 853              		.loc 1 196 3 view .LVU160
 854 0012 0123     		movs	r3, #1
 855 0014 0E22     		movs	r2, #14
 856 0016 B047     		blx	r6
 857              	.LVL68:
 197:src/lcd.c     ****   lcd_fill_rect ( i+1, j+39, 16, 1, 0xff );
 858              		.loc 1 197 3 is_stmt 1 view .LVU161
 859 0018 05F12701 		add	r1, r5, #39
 860 001c 601C     		adds	r0, r4, #1
 861 001e 0097     		str	r7, [sp]
 862 0020 0123     		movs	r3, #1
 863 0022 1022     		movs	r2, #16
 864 0024 B047     		blx	r6
 865              	.LVL69:
 198:src/lcd.c     ****   lcd_fill_rect ( i+3, j+38, 12, 1, 0xff );
 866              		.loc 1 198 3 view .LVU162
 867 0026 05F12601 		add	r1, r5, #38
 868 002a E01C     		adds	r0, r4, #3
 869 002c 0097     		str	r7, [sp]
 870 002e 0123     		movs	r3, #1
 871 0030 0C22     		movs	r2, #12
 872 0032 B047     		blx	r6
 873              	.LVL70:
 199:src/lcd.c     ****   lcd_fill_rect ( i+4, j+37, 10, 1, 0xff );
 874              		.loc 1 199 3 view .LVU163
 875 0034 05F12501 		add	r1, r5, #37
 876 0038 201D     		adds	r0, r4, #4
 877 003a 0097     		str	r7, [sp]
 878 003c 0123     		movs	r3, #1
 879 003e 0A22     		movs	r2, #10
 880 0040 B047     		blx	r6
 881              	.LVL71:
 200:src/lcd.c     **** }
 882              		.loc 1 200 1 is_stmt 0 view .LVU164
 883 0042 03B0     		add	sp, sp, #12
 884              		.cfi_def_cfa_offset 20
 885              		@ sp needed
 886 0044 F0BD     		pop	{r4, r5, r6, r7, pc}
 887              	.LVL72:
 888              	.L45:
 889              		.loc 1 200 1 view .LVU165
 890 0046 00BF     		.align	2
 891              	.L44:
 892 0048 3D020008 		.word	134218301
 893              		.cfi_endproc
 894              	.LFE13:
 896              		.section	.text.decimal,"ax",%progbits
 897              		.align	1
 898              		.p2align 2,,3
 899              		.global	decimal
 900              		.syntax unified
 901              		.thumb
 902              		.thumb_func
 903              		.fpu fpv4-sp-d16
 905              	decimal:
 906              	.LVL73:
 907              	.LFB14:
ARM GAS  /tmp/cc1Hm38z.s 			page 21


 201:src/lcd.c     **** void decimal (int i, int j) {
 908              		.loc 1 201 29 is_stmt 1 view -0
 909              		.cfi_startproc
 910              		@ args = 0, pretend = 0, frame = 0
 911              		@ frame_needed = 0, uses_anonymous_args = 0
 202:src/lcd.c     ****   lcd_fill_rect (i+19, j+40, 5, 5, 0xff);
 912              		.loc 1 202 3 view .LVU167
 201:src/lcd.c     **** void decimal (int i, int j) {
 913              		.loc 1 201 29 is_stmt 0 view .LVU168
 914 0000 10B5     		push	{r4, lr}
 915              		.cfi_def_cfa_offset 8
 916              		.cfi_offset 4, -8
 917              		.cfi_offset 14, -4
 918 0002 82B0     		sub	sp, sp, #8
 919              		.cfi_def_cfa_offset 16
 920              		.loc 1 202 3 view .LVU169
 921 0004 0523     		movs	r3, #5
 922 0006 FF22     		movs	r2, #255
 923 0008 0092     		str	r2, [sp]
 924 000a 034C     		ldr	r4, .L48
 925 000c 1330     		adds	r0, r0, #19
 926              	.LVL74:
 927              		.loc 1 202 3 view .LVU170
 928 000e 2831     		adds	r1, r1, #40
 929              	.LVL75:
 930              		.loc 1 202 3 view .LVU171
 931 0010 1A46     		mov	r2, r3
 932 0012 A047     		blx	r4
 933              	.LVL76:
 203:src/lcd.c     **** }
 934              		.loc 1 203 1 view .LVU172
 935 0014 02B0     		add	sp, sp, #8
 936              		.cfi_def_cfa_offset 8
 937              		@ sp needed
 938 0016 10BD     		pop	{r4, pc}
 939              	.L49:
 940              		.align	2
 941              	.L48:
 942 0018 3D020008 		.word	134218301
 943              		.cfi_endproc
 944              	.LFE14:
 946              		.section	.text.comma,"ax",%progbits
 947              		.align	1
 948              		.p2align 2,,3
 949              		.global	comma
 950              		.syntax unified
 951              		.thumb
 952              		.thumb_func
 953              		.fpu fpv4-sp-d16
 955              	comma:
 956              	.LVL77:
 957              	.LFB15:
 204:src/lcd.c     **** void comma (int i, int j) {
 958              		.loc 1 204 27 is_stmt 1 view -0
 959              		.cfi_startproc
 960              		@ args = 0, pretend = 0, frame = 0
 961              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc1Hm38z.s 			page 22


 205:src/lcd.c     ****   lcd_fill_rect (i+21, j+45, 3, 3, 0xff);
 962              		.loc 1 205 3 view .LVU174
 204:src/lcd.c     **** void comma (int i, int j) {
 963              		.loc 1 204 27 is_stmt 0 view .LVU175
 964 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 965              		.cfi_def_cfa_offset 20
 966              		.cfi_offset 4, -20
 967              		.cfi_offset 5, -16
 968              		.cfi_offset 6, -12
 969              		.cfi_offset 7, -8
 970              		.cfi_offset 14, -4
 971 0002 83B0     		sub	sp, sp, #12
 972              		.cfi_def_cfa_offset 32
 973              		.loc 1 205 3 view .LVU176
 974 0004 FF27     		movs	r7, #255
 975 0006 0323     		movs	r3, #3
 976 0008 084E     		ldr	r6, .L52
 977 000a 0097     		str	r7, [sp]
 204:src/lcd.c     **** void comma (int i, int j) {
 978              		.loc 1 204 27 view .LVU177
 979 000c 0446     		mov	r4, r0
 980 000e 0D46     		mov	r5, r1
 981              		.loc 1 205 3 view .LVU178
 982 0010 1A46     		mov	r2, r3
 983 0012 2D31     		adds	r1, r1, #45
 984              	.LVL78:
 985              		.loc 1 205 3 view .LVU179
 986 0014 1530     		adds	r0, r0, #21
 987              	.LVL79:
 988              		.loc 1 205 3 view .LVU180
 989 0016 B047     		blx	r6
 990              	.LVL80:
 206:src/lcd.c     ****   lcd_fill_rect (i+19, j+48, 3, 3, 0xff);
 991              		.loc 1 206 3 is_stmt 1 view .LVU181
 992 0018 0323     		movs	r3, #3
 993 001a 05F13001 		add	r1, r5, #48
 994 001e 04F11300 		add	r0, r4, #19
 995 0022 0097     		str	r7, [sp]
 996 0024 1A46     		mov	r2, r3
 997 0026 B047     		blx	r6
 998              	.LVL81:
 207:src/lcd.c     **** }
 999              		.loc 1 207 1 is_stmt 0 view .LVU182
 1000 0028 03B0     		add	sp, sp, #12
 1001              		.cfi_def_cfa_offset 20
 1002              		@ sp needed
 1003 002a F0BD     		pop	{r4, r5, r6, r7, pc}
 1004              	.LVL82:
 1005              	.L53:
 1006              		.loc 1 207 1 view .LVU183
 1007              		.align	2
 1008              	.L52:
 1009 002c 3D020008 		.word	134218301
 1010              		.cfi_endproc
 1011              	.LFE15:
 1013              		.section	.text.exp_left_side,"ax",%progbits
 1014              		.align	1
ARM GAS  /tmp/cc1Hm38z.s 			page 23


 1015              		.p2align 2,,3
 1016              		.global	exp_left_side
 1017              		.syntax unified
 1018              		.thumb
 1019              		.thumb_func
 1020              		.fpu fpv4-sp-d16
 1022              	exp_left_side:
 1023              	.LVL83:
 1024              	.LFB16:
 208:src/lcd.c     **** 
 209:src/lcd.c     **** void exp_left_side (int i, int j) {
 1025              		.loc 1 209 35 is_stmt 1 view -0
 1026              		.cfi_startproc
 1027              		@ args = 0, pretend = 0, frame = 0
 1028              		@ frame_needed = 0, uses_anonymous_args = 0
 210:src/lcd.c     ****   lcd_fill_rect (i, j+6, 1, 6, 0xff );
 1029              		.loc 1 210 3 view .LVU185
 209:src/lcd.c     ****   lcd_fill_rect (i, j+6, 1, 6, 0xff );
 1030              		.loc 1 209 35 is_stmt 0 view .LVU186
 1031 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1032              		.cfi_def_cfa_offset 20
 1033              		.cfi_offset 4, -20
 1034              		.cfi_offset 5, -16
 1035              		.cfi_offset 6, -12
 1036              		.cfi_offset 7, -8
 1037              		.cfi_offset 14, -4
 1038 0002 83B0     		sub	sp, sp, #12
 1039              		.cfi_def_cfa_offset 32
 1040              		.loc 1 210 3 view .LVU187
 1041 0004 FF27     		movs	r7, #255
 1042 0006 0E4E     		ldr	r6, .L56
 1043 0008 0097     		str	r7, [sp]
 209:src/lcd.c     ****   lcd_fill_rect (i, j+6, 1, 6, 0xff );
 1044              		.loc 1 209 35 view .LVU188
 1045 000a 0C46     		mov	r4, r1
 1046 000c 0546     		mov	r5, r0
 1047              		.loc 1 210 3 view .LVU189
 1048 000e 0631     		adds	r1, r1, #6
 1049              	.LVL84:
 1050              		.loc 1 210 3 view .LVU190
 1051 0010 0623     		movs	r3, #6
 1052 0012 0122     		movs	r2, #1
 1053 0014 B047     		blx	r6
 1054              	.LVL85:
 211:src/lcd.c     ****   lcd_fill_rect (i+1, j, 1, 11, 0xff );
 1055              		.loc 1 211 3 is_stmt 1 view .LVU191
 1056 0016 2146     		mov	r1, r4
 1057 0018 681C     		adds	r0, r5, #1
 1058 001a 0097     		str	r7, [sp]
 1059 001c 0B23     		movs	r3, #11
 1060 001e 0122     		movs	r2, #1
 1061 0020 B047     		blx	r6
 1062              	.LVL86:
 212:src/lcd.c     ****   lcd_fill_rect (i+2, j+1, 1, 9, 0xff );
 1063              		.loc 1 212 3 view .LVU192
 1064 0022 611C     		adds	r1, r4, #1
 1065 0024 A81C     		adds	r0, r5, #2
ARM GAS  /tmp/cc1Hm38z.s 			page 24


 1066 0026 0097     		str	r7, [sp]
 1067 0028 0923     		movs	r3, #9
 1068 002a 0122     		movs	r2, #1
 1069 002c B047     		blx	r6
 1070              	.LVL87:
 213:src/lcd.c     ****   lcd_fill_rect (i+3, j+2, 1, 4, 0xff );
 1071              		.loc 1 213 3 view .LVU193
 1072 002e A11C     		adds	r1, r4, #2
 1073 0030 E81C     		adds	r0, r5, #3
 1074 0032 0097     		str	r7, [sp]
 1075 0034 0423     		movs	r3, #4
 1076 0036 0122     		movs	r2, #1
 1077 0038 B047     		blx	r6
 1078              	.LVL88:
 214:src/lcd.c     **** }
 1079              		.loc 1 214 1 is_stmt 0 view .LVU194
 1080 003a 03B0     		add	sp, sp, #12
 1081              		.cfi_def_cfa_offset 20
 1082              		@ sp needed
 1083 003c F0BD     		pop	{r4, r5, r6, r7, pc}
 1084              	.LVL89:
 1085              	.L57:
 1086              		.loc 1 214 1 view .LVU195
 1087 003e 00BF     		.align	2
 1088              	.L56:
 1089 0040 3D020008 		.word	134218301
 1090              		.cfi_endproc
 1091              	.LFE16:
 1093              		.section	.text.exp_left_side_top,"ax",%progbits
 1094              		.align	1
 1095              		.p2align 2,,3
 1096              		.global	exp_left_side_top
 1097              		.syntax unified
 1098              		.thumb
 1099              		.thumb_func
 1100              		.fpu fpv4-sp-d16
 1102              	exp_left_side_top:
 1103              	.LVL90:
 1104              	.LFB17:
 215:src/lcd.c     **** void exp_left_side_top (int i, int j) {
 1105              		.loc 1 215 39 is_stmt 1 view -0
 1106              		.cfi_startproc
 1107              		@ args = 0, pretend = 0, frame = 0
 1108              		@ frame_needed = 0, uses_anonymous_args = 0
 1109              		@ link register save eliminated.
 216:src/lcd.c     ****   exp_left_side(i+1, j);
 1110              		.loc 1 216 3 view .LVU197
 1111 0000 0130     		adds	r0, r0, #1
 1112              	.LVL91:
 1113              		.loc 1 216 3 is_stmt 0 view .LVU198
 1114 0002 FFF7FEBF 		b	exp_left_side
 1115              	.LVL92:
 1116              		.loc 1 216 3 view .LVU199
 1117              		.cfi_endproc
 1118              	.LFE17:
 1120 0006 00BF     		.section	.text.exp_left_side_bottom,"ax",%progbits
 1121              		.align	1
ARM GAS  /tmp/cc1Hm38z.s 			page 25


 1122              		.p2align 2,,3
 1123              		.global	exp_left_side_bottom
 1124              		.syntax unified
 1125              		.thumb
 1126              		.thumb_func
 1127              		.fpu fpv4-sp-d16
 1129              	exp_left_side_bottom:
 1130              	.LVL93:
 1131              	.LFB18:
 217:src/lcd.c     **** }
 218:src/lcd.c     **** void exp_left_side_bottom (int i, int j) {
 1132              		.loc 1 218 42 is_stmt 1 view -0
 1133              		.cfi_startproc
 1134              		@ args = 0, pretend = 0, frame = 0
 1135              		@ frame_needed = 0, uses_anonymous_args = 0
 1136              		@ link register save eliminated.
 219:src/lcd.c     ****   exp_left_side(i, j+11);
 1137              		.loc 1 219 3 view .LVU201
 1138 0000 0B31     		adds	r1, r1, #11
 1139              	.LVL94:
 1140              		.loc 1 219 3 is_stmt 0 view .LVU202
 1141 0002 FFF7FEBF 		b	exp_left_side
 1142              	.LVL95:
 1143              		.loc 1 219 3 view .LVU203
 1144              		.cfi_endproc
 1145              	.LFE18:
 1147 0006 00BF     		.section	.text.exp_right_side,"ax",%progbits
 1148              		.align	1
 1149              		.p2align 2,,3
 1150              		.global	exp_right_side
 1151              		.syntax unified
 1152              		.thumb
 1153              		.thumb_func
 1154              		.fpu fpv4-sp-d16
 1156              	exp_right_side:
 1157              	.LVL96:
 1158              	.LFB19:
 220:src/lcd.c     **** }
 221:src/lcd.c     **** void exp_right_side (int i, int j) {
 1159              		.loc 1 221 36 is_stmt 1 view -0
 1160              		.cfi_startproc
 1161              		@ args = 0, pretend = 0, frame = 0
 1162              		@ frame_needed = 0, uses_anonymous_args = 0
 222:src/lcd.c     ****   lcd_fill_rect (i+12, j, 1, 6, 0xff );
 1163              		.loc 1 222 3 view .LVU205
 221:src/lcd.c     ****   lcd_fill_rect (i+12, j, 1, 6, 0xff );
 1164              		.loc 1 221 36 is_stmt 0 view .LVU206
 1165 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1166              		.cfi_def_cfa_offset 20
 1167              		.cfi_offset 4, -20
 1168              		.cfi_offset 5, -16
 1169              		.cfi_offset 6, -12
 1170              		.cfi_offset 7, -8
 1171              		.cfi_offset 14, -4
 1172 0002 83B0     		sub	sp, sp, #12
 1173              		.cfi_def_cfa_offset 32
 1174              		.loc 1 222 3 view .LVU207
ARM GAS  /tmp/cc1Hm38z.s 			page 26


 1175 0004 FF27     		movs	r7, #255
 1176 0006 0F4E     		ldr	r6, .L62
 1177 0008 0097     		str	r7, [sp]
 221:src/lcd.c     ****   lcd_fill_rect (i+12, j, 1, 6, 0xff );
 1178              		.loc 1 221 36 view .LVU208
 1179 000a 0446     		mov	r4, r0
 1180 000c 0D46     		mov	r5, r1
 1181              		.loc 1 222 3 view .LVU209
 1182 000e 0C30     		adds	r0, r0, #12
 1183              	.LVL97:
 1184              		.loc 1 222 3 view .LVU210
 1185 0010 0623     		movs	r3, #6
 1186 0012 0122     		movs	r2, #1
 1187 0014 B047     		blx	r6
 1188              	.LVL98:
 223:src/lcd.c     ****   lcd_fill_rect (i+11, j+1, 1, 11, 0xff );
 1189              		.loc 1 223 3 is_stmt 1 view .LVU211
 1190 0016 691C     		adds	r1, r5, #1
 1191 0018 04F10B00 		add	r0, r4, #11
 1192 001c 0097     		str	r7, [sp]
 1193 001e 0B23     		movs	r3, #11
 1194 0020 0122     		movs	r2, #1
 1195 0022 B047     		blx	r6
 1196              	.LVL99:
 224:src/lcd.c     ****   lcd_fill_rect (i+10, j+2, 1, 9, 0xff );
 1197              		.loc 1 224 3 view .LVU212
 1198 0024 A91C     		adds	r1, r5, #2
 1199 0026 04F10A00 		add	r0, r4, #10
 1200 002a 0097     		str	r7, [sp]
 1201 002c 0923     		movs	r3, #9
 1202 002e 0122     		movs	r2, #1
 1203 0030 B047     		blx	r6
 1204              	.LVL100:
 225:src/lcd.c     ****   lcd_fill_rect (i+9, j+6, 1, 4, 0xff );
 1205              		.loc 1 225 3 view .LVU213
 1206 0032 A91D     		adds	r1, r5, #6
 1207 0034 04F10900 		add	r0, r4, #9
 1208 0038 0097     		str	r7, [sp]
 1209 003a 0423     		movs	r3, #4
 1210 003c 0122     		movs	r2, #1
 1211 003e B047     		blx	r6
 1212              	.LVL101:
 226:src/lcd.c     **** }
 1213              		.loc 1 226 1 is_stmt 0 view .LVU214
 1214 0040 03B0     		add	sp, sp, #12
 1215              		.cfi_def_cfa_offset 20
 1216              		@ sp needed
 1217 0042 F0BD     		pop	{r4, r5, r6, r7, pc}
 1218              	.LVL102:
 1219              	.L63:
 1220              		.loc 1 226 1 view .LVU215
 1221              		.align	2
 1222              	.L62:
 1223 0044 3D020008 		.word	134218301
 1224              		.cfi_endproc
 1225              	.LFE19:
 1227              		.section	.text.exp_right_side_top,"ax",%progbits
ARM GAS  /tmp/cc1Hm38z.s 			page 27


 1228              		.align	1
 1229              		.p2align 2,,3
 1230              		.global	exp_right_side_top
 1231              		.syntax unified
 1232              		.thumb
 1233              		.thumb_func
 1234              		.fpu fpv4-sp-d16
 1236              	exp_right_side_top:
 1237              	.LVL103:
 1238              	.LFB20:
 227:src/lcd.c     **** void exp_right_side_top (int i, int j) {
 1239              		.loc 1 227 40 is_stmt 1 view -0
 1240              		.cfi_startproc
 1241              		@ args = 0, pretend = 0, frame = 0
 1242              		@ frame_needed = 0, uses_anonymous_args = 0
 1243              		@ link register save eliminated.
 228:src/lcd.c     ****   exp_right_side(i, j);
 1244              		.loc 1 228 3 view .LVU217
 1245 0000 FFF7FEBF 		b	exp_right_side
 1246              	.LVL104:
 1247              		.loc 1 228 3 is_stmt 0 view .LVU218
 1248              		.cfi_endproc
 1249              	.LFE20:
 1251              		.section	.text.exp_right_side_bottom,"ax",%progbits
 1252              		.align	1
 1253              		.p2align 2,,3
 1254              		.global	exp_right_side_bottom
 1255              		.syntax unified
 1256              		.thumb
 1257              		.thumb_func
 1258              		.fpu fpv4-sp-d16
 1260              	exp_right_side_bottom:
 1261              	.LVL105:
 1262              	.LFB21:
 229:src/lcd.c     **** }
 230:src/lcd.c     **** void exp_right_side_bottom (int i, int j) {
 1263              		.loc 1 230 43 is_stmt 1 view -0
 1264              		.cfi_startproc
 1265              		@ args = 0, pretend = 0, frame = 0
 1266              		@ frame_needed = 0, uses_anonymous_args = 0
 1267              		@ link register save eliminated.
 231:src/lcd.c     ****   exp_right_side(i-1, j+11);
 1268              		.loc 1 231 3 view .LVU220
 1269 0000 0138     		subs	r0, r0, #1
 1270              	.LVL106:
 1271              		.loc 1 231 3 is_stmt 0 view .LVU221
 1272 0002 0B31     		adds	r1, r1, #11
 1273              	.LVL107:
 1274              		.loc 1 231 3 view .LVU222
 1275 0004 FFF7FEBF 		b	exp_right_side
 1276              	.LVL108:
 1277              		.loc 1 231 3 view .LVU223
 1278              		.cfi_endproc
 1279              	.LFE21:
 1281              		.section	.text.exp_top,"ax",%progbits
 1282              		.align	1
 1283              		.p2align 2,,3
ARM GAS  /tmp/cc1Hm38z.s 			page 28


 1284              		.global	exp_top
 1285              		.syntax unified
 1286              		.thumb
 1287              		.thumb_func
 1288              		.fpu fpv4-sp-d16
 1290              	exp_top:
 1291              	.LVL109:
 1292              	.LFB22:
 232:src/lcd.c     **** }
 233:src/lcd.c     **** void exp_top (int i, int j) {
 1293              		.loc 1 233 29 is_stmt 1 view -0
 1294              		.cfi_startproc
 1295              		@ args = 0, pretend = 0, frame = 0
 1296              		@ frame_needed = 0, uses_anonymous_args = 0
 234:src/lcd.c     ****   lcd_fill_rect (i+4, j, 7, 1, 0xff );
 1297              		.loc 1 234 3 view .LVU225
 233:src/lcd.c     ****   lcd_fill_rect (i+4, j, 7, 1, 0xff );
 1298              		.loc 1 233 29 is_stmt 0 view .LVU226
 1299 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1300              		.cfi_def_cfa_offset 20
 1301              		.cfi_offset 4, -20
 1302              		.cfi_offset 5, -16
 1303              		.cfi_offset 6, -12
 1304              		.cfi_offset 7, -8
 1305              		.cfi_offset 14, -4
 1306 0002 83B0     		sub	sp, sp, #12
 1307              		.cfi_def_cfa_offset 32
 1308              		.loc 1 234 3 view .LVU227
 1309 0004 FF27     		movs	r7, #255
 1310 0006 0B4E     		ldr	r6, .L68
 1311 0008 0097     		str	r7, [sp]
 233:src/lcd.c     ****   lcd_fill_rect (i+4, j, 7, 1, 0xff );
 1312              		.loc 1 233 29 view .LVU228
 1313 000a 0446     		mov	r4, r0
 1314 000c 0D46     		mov	r5, r1
 1315              		.loc 1 234 3 view .LVU229
 1316 000e 0430     		adds	r0, r0, #4
 1317              	.LVL110:
 1318              		.loc 1 234 3 view .LVU230
 1319 0010 0123     		movs	r3, #1
 1320 0012 0722     		movs	r2, #7
 1321 0014 B047     		blx	r6
 1322              	.LVL111:
 235:src/lcd.c     ****   lcd_fill_rect (i+5, j+1, 5, 1, 0xff );
 1323              		.loc 1 235 3 is_stmt 1 view .LVU231
 1324 0016 691C     		adds	r1, r5, #1
 1325 0018 601D     		adds	r0, r4, #5
 1326 001a 0097     		str	r7, [sp]
 1327 001c 0123     		movs	r3, #1
 1328 001e 0522     		movs	r2, #5
 1329 0020 B047     		blx	r6
 1330              	.LVL112:
 236:src/lcd.c     ****   lcd_fill_rect (i+6, j+2, 3, 1, 0xff );
 1331              		.loc 1 236 3 view .LVU232
 1332 0022 A91C     		adds	r1, r5, #2
 1333 0024 A01D     		adds	r0, r4, #6
 1334 0026 0097     		str	r7, [sp]
ARM GAS  /tmp/cc1Hm38z.s 			page 29


 1335 0028 0123     		movs	r3, #1
 1336 002a 0322     		movs	r2, #3
 1337 002c B047     		blx	r6
 1338              	.LVL113:
 237:src/lcd.c     **** }
 1339              		.loc 1 237 1 is_stmt 0 view .LVU233
 1340 002e 03B0     		add	sp, sp, #12
 1341              		.cfi_def_cfa_offset 20
 1342              		@ sp needed
 1343 0030 F0BD     		pop	{r4, r5, r6, r7, pc}
 1344              	.LVL114:
 1345              	.L69:
 1346              		.loc 1 237 1 view .LVU234
 1347 0032 00BF     		.align	2
 1348              	.L68:
 1349 0034 3D020008 		.word	134218301
 1350              		.cfi_endproc
 1351              	.LFE22:
 1353              		.section	.text.exp_bottom,"ax",%progbits
 1354              		.align	1
 1355              		.p2align 2,,3
 1356              		.global	exp_bottom
 1357              		.syntax unified
 1358              		.thumb
 1359              		.thumb_func
 1360              		.fpu fpv4-sp-d16
 1362              	exp_bottom:
 1363              	.LVL115:
 1364              	.LFB23:
 238:src/lcd.c     **** void exp_bottom (int i, int j) {
 1365              		.loc 1 238 32 is_stmt 1 view -0
 1366              		.cfi_startproc
 1367              		@ args = 0, pretend = 0, frame = 0
 1368              		@ frame_needed = 0, uses_anonymous_args = 0
 239:src/lcd.c     ****   lcd_fill_rect (i+2, j+22, 7, 1, 0xff );
 1369              		.loc 1 239 3 view .LVU236
 238:src/lcd.c     **** void exp_bottom (int i, int j) {
 1370              		.loc 1 238 32 is_stmt 0 view .LVU237
 1371 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1372              		.cfi_def_cfa_offset 20
 1373              		.cfi_offset 4, -20
 1374              		.cfi_offset 5, -16
 1375              		.cfi_offset 6, -12
 1376              		.cfi_offset 7, -8
 1377              		.cfi_offset 14, -4
 1378 0002 83B0     		sub	sp, sp, #12
 1379              		.cfi_def_cfa_offset 32
 1380              		.loc 1 239 3 view .LVU238
 1381 0004 FF27     		movs	r7, #255
 1382 0006 0C4E     		ldr	r6, .L72
 1383 0008 0097     		str	r7, [sp]
 238:src/lcd.c     **** void exp_bottom (int i, int j) {
 1384              		.loc 1 238 32 view .LVU239
 1385 000a 0446     		mov	r4, r0
 1386 000c 0D46     		mov	r5, r1
 1387              		.loc 1 239 3 view .LVU240
 1388 000e 0230     		adds	r0, r0, #2
ARM GAS  /tmp/cc1Hm38z.s 			page 30


 1389              	.LVL116:
 1390              		.loc 1 239 3 view .LVU241
 1391 0010 1631     		adds	r1, r1, #22
 1392              	.LVL117:
 1393              		.loc 1 239 3 view .LVU242
 1394 0012 0123     		movs	r3, #1
 1395 0014 0722     		movs	r2, #7
 1396 0016 B047     		blx	r6
 1397              	.LVL118:
 240:src/lcd.c     ****   lcd_fill_rect (i+3, j+21, 5, 1, 0xff );
 1398              		.loc 1 240 3 is_stmt 1 view .LVU243
 1399 0018 05F11501 		add	r1, r5, #21
 1400 001c E01C     		adds	r0, r4, #3
 1401 001e 0097     		str	r7, [sp]
 1402 0020 0123     		movs	r3, #1
 1403 0022 0522     		movs	r2, #5
 1404 0024 B047     		blx	r6
 1405              	.LVL119:
 241:src/lcd.c     ****   lcd_fill_rect (i+4, j+20, 3, 1, 0xff );
 1406              		.loc 1 241 3 view .LVU244
 1407 0026 05F11401 		add	r1, r5, #20
 1408 002a 201D     		adds	r0, r4, #4
 1409 002c 0097     		str	r7, [sp]
 1410 002e 0123     		movs	r3, #1
 1411 0030 0322     		movs	r2, #3
 1412 0032 B047     		blx	r6
 1413              	.LVL120:
 242:src/lcd.c     **** }
 1414              		.loc 1 242 1 is_stmt 0 view .LVU245
 1415 0034 03B0     		add	sp, sp, #12
 1416              		.cfi_def_cfa_offset 20
 1417              		@ sp needed
 1418 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 1419              	.LVL121:
 1420              	.L73:
 1421              		.loc 1 242 1 view .LVU246
 1422              		.align	2
 1423              	.L72:
 1424 0038 3D020008 		.word	134218301
 1425              		.cfi_endproc
 1426              	.LFE23:
 1428              		.section	.text.exp_middle,"ax",%progbits
 1429              		.align	1
 1430              		.p2align 2,,3
 1431              		.global	exp_middle
 1432              		.syntax unified
 1433              		.thumb
 1434              		.thumb_func
 1435              		.fpu fpv4-sp-d16
 1437              	exp_middle:
 1438              	.LVL122:
 1439              	.LFB24:
 243:src/lcd.c     **** void exp_middle (int i, int j) {
 1440              		.loc 1 243 32 is_stmt 1 view -0
 1441              		.cfi_startproc
 1442              		@ args = 0, pretend = 0, frame = 0
 1443              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc1Hm38z.s 			page 31


 244:src/lcd.c     ****   lcd_fill_rect (i+4, j+10, 5, 1, 0xff );
 1444              		.loc 1 244 3 view .LVU248
 243:src/lcd.c     **** void exp_middle (int i, int j) {
 1445              		.loc 1 243 32 is_stmt 0 view .LVU249
 1446 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1447              		.cfi_def_cfa_offset 24
 1448              		.cfi_offset 4, -24
 1449              		.cfi_offset 5, -20
 1450              		.cfi_offset 6, -16
 1451              		.cfi_offset 7, -12
 1452              		.cfi_offset 8, -8
 1453              		.cfi_offset 14, -4
 1454 0004 82B0     		sub	sp, sp, #8
 1455              		.cfi_def_cfa_offset 32
 1456              		.loc 1 244 3 view .LVU250
 1457 0006 FF27     		movs	r7, #255
 1458              		.loc 1 244 19 view .LVU251
 1459 0008 00F10408 		add	r8, r0, #4
 1460              		.loc 1 244 3 view .LVU252
 1461 000c 0C4E     		ldr	r6, .L76
 1462 000e 0097     		str	r7, [sp]
 243:src/lcd.c     **** void exp_middle (int i, int j) {
 1463              		.loc 1 243 32 view .LVU253
 1464 0010 0C46     		mov	r4, r1
 1465 0012 0546     		mov	r5, r0
 1466              		.loc 1 244 3 view .LVU254
 1467 0014 0A31     		adds	r1, r1, #10
 1468              	.LVL123:
 1469              		.loc 1 244 3 view .LVU255
 1470 0016 4046     		mov	r0, r8
 1471              	.LVL124:
 1472              		.loc 1 244 3 view .LVU256
 1473 0018 0123     		movs	r3, #1
 1474 001a 0522     		movs	r2, #5
 1475 001c B047     		blx	r6
 1476              	.LVL125:
 245:src/lcd.c     ****   lcd_fill_rect (i+3, j+11, 7, 1, 0xff );
 1477              		.loc 1 245 3 is_stmt 1 view .LVU257
 1478 001e E81C     		adds	r0, r5, #3
 1479 0020 04F10B01 		add	r1, r4, #11
 1480 0024 0097     		str	r7, [sp]
 1481 0026 0123     		movs	r3, #1
 1482 0028 0722     		movs	r2, #7
 1483 002a B047     		blx	r6
 1484              	.LVL126:
 246:src/lcd.c     ****   lcd_fill_rect (i+4, j+12, 5, 1, 0xff );
 1485              		.loc 1 246 3 view .LVU258
 1486 002c 4046     		mov	r0, r8
 1487 002e 04F10C01 		add	r1, r4, #12
 1488 0032 0097     		str	r7, [sp]
 1489 0034 0123     		movs	r3, #1
 1490 0036 0522     		movs	r2, #5
 1491 0038 B047     		blx	r6
 1492              	.LVL127:
 247:src/lcd.c     **** }
 1493              		.loc 1 247 1 is_stmt 0 view .LVU259
 1494 003a 02B0     		add	sp, sp, #8
ARM GAS  /tmp/cc1Hm38z.s 			page 32


 1495              		.cfi_def_cfa_offset 24
 1496              		@ sp needed
 1497 003c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1498              	.LVL128:
 1499              	.L77:
 1500              		.loc 1 247 1 view .LVU260
 1501              		.align	2
 1502              	.L76:
 1503 0040 3D020008 		.word	134218301
 1504              		.cfi_endproc
 1505              	.LFE24:
 1507              		.section	.text.show_stack,"ax",%progbits
 1508              		.align	1
 1509              		.p2align 2,,3
 1510              		.global	show_stack
 1511              		.syntax unified
 1512              		.thumb
 1513              		.thumb_func
 1514              		.fpu fpv4-sp-d16
 1516              	show_stack:
 1517              	.LFB40:
 1518              		.cfi_startproc
 1519              		@ args = 0, pretend = 0, frame = 0
 1520              		@ frame_needed = 0, uses_anonymous_args = 0
 1521              		@ link register save eliminated.
 1522 0000 7047     		bx	lr
 1523              		.cfi_endproc
 1524              	.LFE40:
 1526 0002 00BF     		.section	.text.show_flags,"ax",%progbits
 1527              		.align	1
 1528              		.p2align 2,,3
 1529              		.global	show_flags
 1530              		.syntax unified
 1531              		.thumb
 1532              		.thumb_func
 1533              		.fpu fpv4-sp-d16
 1535              	show_flags:
 1536              	.LFB38:
 1537              		.cfi_startproc
 1538              		@ args = 0, pretend = 0, frame = 0
 1539              		@ frame_needed = 0, uses_anonymous_args = 0
 1540              		@ link register save eliminated.
 1541 0000 7047     		bx	lr
 1542              		.cfi_endproc
 1543              	.LFE38:
 1545 0002 00BF     		.section	.text.wait_for_display,"ax",%progbits
 1546              		.align	1
 1547              		.p2align 2,,3
 1548              		.global	wait_for_display
 1549              		.syntax unified
 1550              		.thumb
 1551              		.thumb_func
 1552              		.fpu fpv4-sp-d16
 1554              	wait_for_display:
 1555              	.LFB28:
 248:src/lcd.c     ****   
 249:src/lcd.c     **** void show_disp(void) { // This function re-draws everything.
ARM GAS  /tmp/cc1Hm38z.s 			page 33


 250:src/lcd.c     ****   // It may be fast enough. It does mean that clearing everything first is needed,
 251:src/lcd.c     ****   // or we keep track of changes.
 252:src/lcd.c     ****   // Try clearing everything first first.
 253:src/lcd.c     ****         int i, j, p;
 254:src/lcd.c     **** 	uint32_t x;
 255:src/lcd.c     **** 	const uint32_t xleft = 26;
 256:src/lcd.c     **** 	const uint32_t ytop = 130; // was 170
 257:src/lcd.c     **** 	const uint32_t dwidth = 25;
 258:src/lcd.c     **** 	const uint32_t xleft_exp = 344;
 259:src/lcd.c     **** 	const uint32_t ytop_exp = 130; // was 170
 260:src/lcd.c     **** 	const uint32_t dwidth_exp = 18;
 261:src/lcd.c     **** 	const uint32_t y_ann = Y_ANNUNC;
 262:src/lcd.c     ****         /* Segments 0 - 107 are the main digits */
 263:src/lcd.c     ****         for (i=0; i<DISPLAY_DIGITS; i++) { // 0 -> 11 inclusive
 264:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 265:src/lcd.c     ****                 x = xleft + dwidth*i;
 266:src/lcd.c     ****                 if (dots[p]) { // top
 267:src/lcd.c     **** 		  top (x, ytop);
 268:src/lcd.c     ****                 }
 269:src/lcd.c     ****                 if (dots[p+1]) { // top left
 270:src/lcd.c     **** 		  left_side_top (x, ytop);
 271:src/lcd.c     ****                 }
 272:src/lcd.c     ****                 if (dots[p+3]) { // top right
 273:src/lcd.c     **** 		  right_side_top (x, ytop);
 274:src/lcd.c     ****                 }
 275:src/lcd.c     ****                 if (dots[p+2]) { // centre line
 276:src/lcd.c     **** 		  middle (x, ytop);
 277:src/lcd.c     ****                 }
 278:src/lcd.c     ****                 if (dots[p+4]) { // lower left
 279:src/lcd.c     **** 		  left_side_bottom (x, ytop);
 280:src/lcd.c     ****                 }
 281:src/lcd.c     ****                 if (dots[p+6]) { // lower right
 282:src/lcd.c     **** 		  right_side_bottom (x, ytop);
 283:src/lcd.c     ****                 }
 284:src/lcd.c     ****                 if (dots[p+5]) { // bottom
 285:src/lcd.c     **** 		  bottom (x, ytop);
 286:src/lcd.c     ****                 }
 287:src/lcd.c     ****                 if (dots[p+7]) { // point
 288:src/lcd.c     **** 		  decimal (x, ytop);
 289:src/lcd.c     ****                 }
 290:src/lcd.c     ****                 if (dots[p+8]) { // comma
 291:src/lcd.c     **** 		  comma (x, ytop);
 292:src/lcd.c     ****                 }
 293:src/lcd.c     ****         }
 294:src/lcd.c     ****         /* Segments 108 - 128 are the exponent digits */
 295:src/lcd.c     ****         for (i=0; i<3; i++) {
 296:src/lcd.c     ****                 p = i*7+108;
 297:src/lcd.c     ****                 x = xleft_exp + dwidth_exp*i;
 298:src/lcd.c     ****                 if (dots[p]) { // top
 299:src/lcd.c     **** 		  exp_top (x, ytop_exp);
 300:src/lcd.c     ****                 }
 301:src/lcd.c     ****                 if (dots[p+1]) { // top left
 302:src/lcd.c     **** 		  exp_left_side_top (x, ytop_exp);
 303:src/lcd.c     ****                 }
 304:src/lcd.c     ****                 if (dots[p+3]) { // top right
 305:src/lcd.c     **** 		  exp_right_side_top (x, ytop_exp);
 306:src/lcd.c     ****                 }
ARM GAS  /tmp/cc1Hm38z.s 			page 34


 307:src/lcd.c     ****                 if (dots[p+2]) { // centre line
 308:src/lcd.c     **** 		  exp_middle (x, ytop_exp);
 309:src/lcd.c     ****                 }
 310:src/lcd.c     ****                 if (dots[p+4]) { // lower left
 311:src/lcd.c     **** 		  exp_left_side_bottom (x, ytop_exp);
 312:src/lcd.c     ****                 }
 313:src/lcd.c     ****                 if (dots[p+6]) { // lower right
 314:src/lcd.c     **** 		  exp_right_side_bottom (x, ytop_exp);
 315:src/lcd.c     ****                 }
 316:src/lcd.c     ****                 if (dots[p+5]) { // bottom
 317:src/lcd.c     **** 		  exp_bottom (x, ytop_exp);
 318:src/lcd.c     ****                 }
 319:src/lcd.c     ****         }
 320:src/lcd.c     ****         /* Segments 129 & 130 are the signs */
 321:src/lcd.c     ****         if (dots[MANT_SIGN]) {
 322:src/lcd.c     **** 	  middle (xleft - dwidth, ytop);
 323:src/lcd.c     ****         }
 324:src/lcd.c     ****         if (dots[EXP_SIGN]) {
 325:src/lcd.c     **** 	  exp_middle (xleft_exp-dwidth_exp, ytop);
 326:src/lcd.c     ****         }
 327:src/lcd.c     **** 
 328:src/lcd.c     **** 	if (dots[BIG_EQ]) {
 329:src/lcd.c     **** 	  lcd_fill_rect (250, y_ann-34, 15, 4, 0xff);
 330:src/lcd.c     **** 	  lcd_fill_rect (250, y_ann-24, 15, 4, 0xff);
 331:src/lcd.c     ****         }
 332:src/lcd.c     **** 	t20->inv = 0;
 333:src/lcd.c     **** 	
 334:src/lcd.c     ****         if (dots[DOWN_ARR]) {
 335:src/lcd.c     **** 	  lcd_fill_rect(287,y_ann-67,5,12,0xff);
 336:src/lcd.c     **** 	  lcd_fill_rect(285,y_ann-55,9,1,0xff);
 337:src/lcd.c     **** 	  lcd_fill_rect(286,y_ann-54,7,1,0xff);
 338:src/lcd.c     **** 	  lcd_fill_rect(287,y_ann-53,5,1,0xff);
 339:src/lcd.c     **** 	  lcd_fill_rect(288,y_ann-52,3,1,0xff);
 340:src/lcd.c     **** 	  lcd_fill_rect(289,y_ann-51,1,1,0xff);
 341:src/lcd.c     ****         }
 342:src/lcd.c     **** 
 343:src/lcd.c     **** 	if (dots[INPUT]) {
 344:src/lcd.c     **** 	  lcd_setXY(t20, 305, y_ann-70);
 345:src/lcd.c     **** 	  lcd_writeText(t20,"ALPHA");
 346:src/lcd.c     ****         }
 347:src/lcd.c     **** 
 348:src/lcd.c     **** 	/* if (dots[LIT_EQ]) { */
 349:src/lcd.c     **** 	/*   lcd_setXY (t20, 360, y_ann-70); */
 350:src/lcd.c     **** 	/*   if (C_LOCKED) { */
 351:src/lcd.c     **** 	/*     lcd_writeText(t20, "C_LK"); */
 352:src/lcd.c     **** 	/*   } */
 353:src/lcd.c     **** 	/*   else { */
 354:src/lcd.c     **** 	/*     lcd_writeText(t20, "="); */
 355:src/lcd.c     **** 	/*   } */
 356:src/lcd.c     ****         /* } */
 357:src/lcd.c     **** 
 358:src/lcd.c     **** 	draw_LEQ();
 359:src/lcd.c     **** 	
 360:src/lcd.c     **** 	if (dots[BATTERY]) {
 361:src/lcd.c     **** 	  //    MOVE(70, 10);   PRINTF("####-");
 362:src/lcd.c     ****         }
 363:src/lcd.c     **** #ifdef MODIFY_BEG_SSIZE8
ARM GAS  /tmp/cc1Hm38z.s 			page 35


 364:src/lcd.c     **** 	if (dots[BEG]) {
 365:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-50);
 366:src/lcd.c     **** 	  lcd_writeText(t20, "S:8");
 367:src/lcd.c     ****         }
 368:src/lcd.c     **** 	else {
 369:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-50);
 370:src/lcd.c     **** 	  lcd_writeText(t20, "S:4");
 371:src/lcd.c     **** 	}	  
 372:src/lcd.c     **** #else
 373:src/lcd.c     **** 	if (dots[BEG]) {
 374:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-50);
 375:src/lcd.c     **** 	  lcd_writeText(t20, "BEG");
 376:src/lcd.c     ****         }
 377:src/lcd.c     **** #endif
 378:src/lcd.c     **** 	if (dots[STO_annun]) {
 379:src/lcd.c     **** 	  lcd_setXY (t20, 325, y_ann-50);
 380:src/lcd.c     **** 	  lcd_writeText(t20, "PGM");
 381:src/lcd.c     ****         }
 382:src/lcd.c     **** 
 383:src/lcd.c     **** 	/* if (dots[RCL_annun]) { */
 384:src/lcd.c     **** 	/*   lcd_setXY (t20, 365, y_ann-50); */
 385:src/lcd.c     **** 	/*   lcd_writeText(t20, "RUN"); */
 386:src/lcd.c     ****         /* } */
 387:src/lcd.c     **** 
 388:src/lcd.c     **** 	if (dots[RAD]) {
 389:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-30);
 390:src/lcd.c     **** 	  lcd_writeText(t20, "RAD");
 391:src/lcd.c     **** 	}
 392:src/lcd.c     **** 
 393:src/lcd.c     **** 	if (dots[DEG]) {
 394:src/lcd.c     **** 	  lcd_setXY (t20, 325, y_ann-30);
 395:src/lcd.c     **** 	  lcd_writeText(t20, "DEG");
 396:src/lcd.c     ****         }
 397:src/lcd.c     ****         /* if (dots[RPN]) { */
 398:src/lcd.c     **** 	/*   lcd_setXY (t20, 365, y_ann-30); */
 399:src/lcd.c     **** 	/*   if (ENTRY_RPN_ENABLED) { */
 400:src/lcd.c     **** 	/*     lcd_writeText(t20, "eRPN"); */
 401:src/lcd.c     **** 	/*   } */
 402:src/lcd.c     **** 	/*   else { */
 403:src/lcd.c     **** 	/*     lcd_writeText(t20, "RPN"); */
 404:src/lcd.c     **** 	/*   } */
 405:src/lcd.c     ****         /* } */
 406:src/lcd.c     **** 	draw_RPN_RCL();
 407:src/lcd.c     **** 	
 408:src/lcd.c     **** 	/* The graphical bit last */
 409:src/lcd.c     ****         for (i=0; i<BITMAP_WIDTH; i++) {
 410:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 411:src/lcd.c     **** 	    if (dots[i*6+j+MATRIX_BASE]) {
 412:src/lcd.c     **** 	      lcd_fill_rect( xleft-dwidth+5*i+15, ytop-(10+6*6)+j*6, 4, 5, 0xff);
 413:src/lcd.c     **** 	    }
 414:src/lcd.c     **** 	  }
 415:src/lcd.c     **** 	}
 416:src/lcd.c     **** #ifdef TOP_ROW
 417:src/lcd.c     ****         for (i=0; i<BW_TOP; i++) {
 418:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 419:src/lcd.c     **** 	    if (dots[i*6+j+MB_TOP]) {
 420:src/lcd.c     **** 	      lcd_fill_rect( xleft-dwidth+5*i+15, 70-(10+6*5)+j*5, 4, 4, 0xff);
ARM GAS  /tmp/cc1Hm38z.s 			page 36


 421:src/lcd.c     **** 	    }
 422:src/lcd.c     **** 	  }
 423:src/lcd.c     **** 	}
 424:src/lcd.c     **** #endif
 425:src/lcd.c     **** }
 426:src/lcd.c     **** #endif
 427:src/lcd.c     **** 
 428:src/lcd.c     **** #if defined(USECURSES) && !defined(DM42)
 429:src/lcd.c     **** void show_disp(void) {
 430:src/lcd.c     ****         int i, j, p, x;
 431:src/lcd.c     ****         const int dig_base = 16;
 432:src/lcd.c     **** 
 433:src/lcd.c     ****         /* Segments 0 - 107 are the main digits */
 434:src/lcd.c     ****         for (i=0; i<DISPLAY_DIGITS; i++) {
 435:src/lcd.c     **** 	  p = i*SEGS_PER_DIGIT; // 9 - 7 + dot and comma
 436:src/lcd.c     ****                 x = 3+5*i;
 437:src/lcd.c     ****                 if (dots[p]) {
 438:src/lcd.c     ****                         MOVE(x+1, dig_base);    PRINTF("--");
 439:src/lcd.c     ****                 }
 440:src/lcd.c     ****                 if (dots[p+1]) {
 441:src/lcd.c     ****                         MOVE(x, dig_base+1);    PRINTF("|");
 442:src/lcd.c     ****                         MOVE(x, dig_base+2);    PRINTF("|");
 443:src/lcd.c     ****                 }
 444:src/lcd.c     ****                 if (dots[p+3]) {
 445:src/lcd.c     ****                         MOVE(x+3, dig_base+1);  PRINTF("|");
 446:src/lcd.c     ****                         MOVE(x+3, dig_base+2);  PRINTF("|");
 447:src/lcd.c     ****                 }
 448:src/lcd.c     ****                 if (dots[p+2]) {
 449:src/lcd.c     ****                         MOVE(x+1, dig_base+3);  PRINTF("--");
 450:src/lcd.c     ****                 }
 451:src/lcd.c     ****                 if (dots[p+4]) {
 452:src/lcd.c     ****                         MOVE(x, dig_base+4);    PRINTF("|");
 453:src/lcd.c     ****                         MOVE(x, dig_base+5);    PRINTF("|");
 454:src/lcd.c     ****                 }
 455:src/lcd.c     ****                 if (dots[p+6]) {
 456:src/lcd.c     ****                         MOVE(x+3, dig_base+4);  PRINTF("|");
 457:src/lcd.c     ****                         MOVE(x+3, dig_base+5);  PRINTF("|");
 458:src/lcd.c     ****                 }
 459:src/lcd.c     ****                 if (dots[p+5]) {
 460:src/lcd.c     ****                         MOVE(x+1, dig_base+6);  PRINTF("--");
 461:src/lcd.c     ****                 }
 462:src/lcd.c     ****                 if (dots[p+7]) {
 463:src/lcd.c     ****                         MOVE(x+4, dig_base+6);  PRINTF(".");
 464:src/lcd.c     ****                 }
 465:src/lcd.c     ****                 if (dots[p+8]) {
 466:src/lcd.c     ****                         MOVE(x+3, dig_base+7);  PRINTF("/");
 467:src/lcd.c     ****                 }
 468:src/lcd.c     ****         }
 469:src/lcd.c     ****         /* Segments 108 - 128 are the exponent digits */
 470:src/lcd.c     ****         for (i=0; i<3; i++) {
 471:src/lcd.c     ****                 p = i*7+108;
 472:src/lcd.c     ****                 x = 66 + i * 4;
 473:src/lcd.c     ****                 if (dots[p]) {
 474:src/lcd.c     ****                         MOVE(x+1, dig_base-1);  PRINTF("-");
 475:src/lcd.c     ****                 }
 476:src/lcd.c     ****                 if (dots[p+1]) {
 477:src/lcd.c     ****                         MOVE(x, dig_base);      PRINTF("|");
ARM GAS  /tmp/cc1Hm38z.s 			page 37


 478:src/lcd.c     ****                 }
 479:src/lcd.c     ****                 if (dots[p+3]) {
 480:src/lcd.c     ****                         MOVE(x+2, dig_base);    PRINTF("|");
 481:src/lcd.c     ****                 }
 482:src/lcd.c     ****                 if (dots[p+2]) {
 483:src/lcd.c     ****                         MOVE(x+1, dig_base+1);  PRINTF("-");
 484:src/lcd.c     ****                 }
 485:src/lcd.c     ****                 if (dots[p+4]) {
 486:src/lcd.c     ****                         MOVE(x, dig_base+2);    PRINTF("|");
 487:src/lcd.c     ****                 }
 488:src/lcd.c     ****                 if (dots[p+6]) {
 489:src/lcd.c     ****                         MOVE(x+2, dig_base+2);  PRINTF("|");
 490:src/lcd.c     ****                 }
 491:src/lcd.c     ****                 if (dots[p+5]) {
 492:src/lcd.c     ****                         MOVE(x+1, dig_base+3);  PRINTF("-");
 493:src/lcd.c     ****                 }
 494:src/lcd.c     ****         }
 495:src/lcd.c     ****         /* Segments 129 & 130 are the signs */
 496:src/lcd.c     ****         if (dots[MANT_SIGN]) {
 497:src/lcd.c     ****                 MOVE(0, dig_base+3);
 498:src/lcd.c     ****                 PRINTF("--");
 499:src/lcd.c     ****         }
 500:src/lcd.c     ****         if (dots[EXP_SIGN]) {
 501:src/lcd.c     ****                 MOVE(64, dig_base+1);
 502:src/lcd.c     ****                 PRINTF("-");
 503:src/lcd.c     ****         }
 504:src/lcd.c     ****         if (dots[BIG_EQ]) {
 505:src/lcd.c     ****                 MOVE(47, 12);   PRINTF("==");
 506:src/lcd.c     ****         }
 507:src/lcd.c     ****         if (dots[LIT_EQ]) {
 508:src/lcd.c     ****                 MOVE(64, 10);   PRINTF("=");
 509:src/lcd.c     ****         }
 510:src/lcd.c     ****         if (dots[DOWN_ARR]) {
 511:src/lcd.c     ****                 MOVE(52, 10);   PRINTF("v");
 512:src/lcd.c     ****         }
 513:src/lcd.c     ****         if (dots[INPUT]) {
 514:src/lcd.c     ****                 MOVE(55, 10);   PRINTF("INPUT");
 515:src/lcd.c     ****         }
 516:src/lcd.c     ****         if (dots[BATTERY]) {
 517:src/lcd.c     ****                 MOVE(70, 10);   PRINTF("####-");
 518:src/lcd.c     ****         }
 519:src/lcd.c     ****         if (dots[BEG]) {
 520:src/lcd.c     ****                 MOVE(52, 12);   PRINTF("BEG");
 521:src/lcd.c     ****         }
 522:src/lcd.c     ****         if (dots[STO_annun]) {
 523:src/lcd.c     ****                 MOVE(62, 12);   PRINTF("STO");
 524:src/lcd.c     ****         }
 525:src/lcd.c     ****         if (dots[RCL_annun]) {
 526:src/lcd.c     ****                 MOVE(72, 12);   PRINTF("RCL");
 527:src/lcd.c     ****         }
 528:src/lcd.c     ****         if (dots[RAD]) {
 529:src/lcd.c     ****                 MOVE(52, 14);   PRINTF("RAD");
 530:src/lcd.c     ****         }
 531:src/lcd.c     ****         if (dots[DEG]) {
 532:src/lcd.c     ****                 MOVE(62, 14);   PRINTF("360");
 533:src/lcd.c     ****         }
 534:src/lcd.c     ****         if (dots[RPN]) {
ARM GAS  /tmp/cc1Hm38z.s 			page 38


 535:src/lcd.c     ****                 MOVE(72, 14);   PRINTF("RPN");
 536:src/lcd.c     ****         }
 537:src/lcd.c     ****         /* The graphical bit last */
 538:src/lcd.c     ****         for (i=0; i<BITMAP_WIDTH; i++)
 539:src/lcd.c     ****                 for (j=0; j<6; j++) {
 540:src/lcd.c     ****                         if (dots[i*6+j+MATRIX_BASE]) {
 541:src/lcd.c     ****                                 MOVE(1+i, 9+j);
 542:src/lcd.c     ****                                 PRINTF("#");
 543:src/lcd.c     ****                         }
 544:src/lcd.c     ****                 }
 545:src/lcd.c     **** }
 546:src/lcd.c     **** #endif
 547:src/lcd.c     **** 
 548:src/lcd.c     **** void show_stack(void) {
 549:src/lcd.c     **** #ifdef USECURSES
 550:src/lcd.c     ****   int i;
 551:src/lcd.c     **** 
 552:src/lcd.c     ****         if (!State2.flags)
 553:src/lcd.c     ****                 return;
 554:src/lcd.c     **** 
 555:src/lcd.c     ****         // Stack display smashes the stack registers
 556:src/lcd.c     ****         for (i=4; i<STACK_SIZE; i++) {
 557:src/lcd.c     ****                 MOVE(26, 8-i);
 558:src/lcd.c     ****                 PRINTF("%c ", i<stack_size()?'*':' ');
 559:src/lcd.c     ****                 dispreg(REGNAMES[i], regX_idx + i);
 560:src/lcd.c     ****         }
 561:src/lcd.c     ****         MOVE(53, 2);    dispreg(REGNAMES[regJ_idx-regX_idx], regJ_idx);
 562:src/lcd.c     ****         MOVE(53, 1);    dispreg(REGNAMES[regK_idx-regX_idx], regK_idx);
 563:src/lcd.c     ****         for (i=0; i<4; i++) {
 564:src/lcd.c     ****                 MOVE(0, 4-i);
 565:src/lcd.c     ****                 dispreg(REGNAMES[i], regX_idx + i);
 566:src/lcd.c     ****         }
 567:src/lcd.c     ****         MOVE(53, 4);
 568:src/lcd.c     ****         dispreg(REGNAMES[regL_idx-regX_idx], regL_idx);
 569:src/lcd.c     ****         MOVE(53, 3);
 570:src/lcd.c     ****         dispreg(REGNAMES[regI_idx-regX_idx], regI_idx);
 571:src/lcd.c     ****         MOVE(53, 0);
 572:src/lcd.c     ****         PRINTF("stack depth: %d", stack_size());
 573:src/lcd.c     **** #endif
 574:src/lcd.c     **** }
 575:src/lcd.c     **** 
 576:src/lcd.c     **** void show_flags(void) {
 577:src/lcd.c     **** #if defined(CONSOLE) && !defined(DM42)
 578:src/lcd.c     **** 	extern unsigned int get_local_flags(void);
 579:src/lcd.c     **** 
 580:src/lcd.c     **** 	if (!State2.flags)
 581:src/lcd.c     **** 		return;
 582:src/lcd.c     **** 	MOVE(0, 0);
 583:src/lcd.c     **** 	PRINTF(" %c ", JustDisplayed ? '*' : ' ');
 584:src/lcd.c     **** 	MOVE(5, 0);
 585:src/lcd.c     **** 	switch (cur_shift()) {
 586:src/lcd.c     **** 	case SHIFT_F:   PRINTF("[f-shift]");    break;
 587:src/lcd.c     **** 	case SHIFT_G:   PRINTF("[g-shift]");    break;
 588:src/lcd.c     **** 	case SHIFT_H:   PRINTF("[h-shift]");    break;
 589:src/lcd.c     **** 	default:                                break;
 590:src/lcd.c     **** 	}
 591:src/lcd.c     **** 	if (State2.hyp) {
ARM GAS  /tmp/cc1Hm38z.s 			page 39


 592:src/lcd.c     **** 		MOVE(14, 0);
 593:src/lcd.c     **** 		if (State2.dot)
 594:src/lcd.c     **** 			PRINTF("[hyp]");
 595:src/lcd.c     **** 		else
 596:src/lcd.c     **** 			PRINTF("[hyp-1]");
 597:src/lcd.c     **** 	}
 598:src/lcd.c     **** 	if (!State2.runmode) {
 599:src/lcd.c     **** 		MOVE(21, 0);
 600:src/lcd.c     **** 		PRINTF("[prog]");
 601:src/lcd.c     **** 	}
 602:src/lcd.c     **** 	if (view_instruction_counter) {
 603:src/lcd.c     **** 		MOVE(28, 0);
 604:src/lcd.c     **** 		PRINTF("#%llu", instruction_count);
 605:src/lcd.c     **** 	}
 606:src/lcd.c     **** 	MOVE(0, 0);
 607:src/lcd.c     **** 
 608:src/lcd.c     **** #ifdef USECURSES
 609:src/lcd.c     **** #define FLAG_BASE       5
 610:src/lcd.c     **** 	MOVE(10, FLAG_BASE);
 611:src/lcd.c     **** 	if (State2.rarg)
 612:src/lcd.c     **** 		PRINTF("[rcmd]");
 613:src/lcd.c     **** 	else if (State2.arrow)
 614:src/lcd.c     **** 		PRINTF("[arr]");
 615:src/lcd.c     **** 	if (State2.dot) {
 616:src/lcd.c     **** 		MOVE(18, FLAG_BASE);
 617:src/lcd.c     **** 		PRINTF("[dot]");
 618:src/lcd.c     **** 	}
 619:src/lcd.c     **** 	if (State2.ind) {
 620:src/lcd.c     **** 		MOVE(24, FLAG_BASE);
 621:src/lcd.c     **** 		PRINTF("[ind]");
 622:src/lcd.c     **** 	}
 623:src/lcd.c     **** 	if (State2.trace) {
 624:src/lcd.c     **** 		MOVE(30, FLAG_BASE);
 625:src/lcd.c     **** 		PRINTF("[trace]");
 626:src/lcd.c     **** 	}
 627:src/lcd.c     **** 	if (State2.cmplx) {
 628:src/lcd.c     **** 		MOVE(40, FLAG_BASE);
 629:src/lcd.c     **** 		PRINTF("[cmplx]");
 630:src/lcd.c     **** 	}
 631:src/lcd.c     **** 	if (State2.catalogue) {
 632:src/lcd.c     **** 		MOVE(50, FLAG_BASE);
 633:src/lcd.c     **** 		PRINTF("[cat %03u]", State2.catalogue);
 634:src/lcd.c     **** 	}
 635:src/lcd.c     **** 	if (State2.hms) {
 636:src/lcd.c     **** 		MOVE(64, FLAG_BASE);
 637:src/lcd.c     **** 		PRINTF("[H.MS]");
 638:src/lcd.c     **** 	}
 639:src/lcd.c     **** 	if (UState.fract) {
 640:src/lcd.c     **** 		MOVE(71, FLAG_BASE);
 641:src/lcd.c     **** 		PRINTF("[FRACT]");
 642:src/lcd.c     **** 	}
 643:src/lcd.c     **** 	if (State2.multi) {
 644:src/lcd.c     **** 		MOVE(71, FLAG_BASE+1);
 645:src/lcd.c     **** 		PRINTF("[MULTI]");
 646:src/lcd.c     **** 	}
 647:src/lcd.c     **** 	MOVE(50, FLAG_BASE+1);
 648:src/lcd.c     **** 	PRINTF("[RRS %03u]", ProgSize);
ARM GAS  /tmp/cc1Hm38z.s 			page 40


 649:src/lcd.c     **** 	if (State2.state_lift) {
 650:src/lcd.c     **** 		MOVE(10, FLAG_BASE+1);
 651:src/lcd.c     **** 		PRINTF("[lift]");
 652:src/lcd.c     **** 	}
 653:src/lcd.c     **** 	if (Running) {
 654:src/lcd.c     **** 		MOVE(18, FLAG_BASE+1);
 655:src/lcd.c     **** 		PRINTF("[running]");
 656:src/lcd.c     **** 	}
 657:src/lcd.c     **** 	MOVE(70, 5);
 658:src/lcd.c     **** 	PRINTF("iw = %u/%u", State2.window, IntMaxWindow);
 659:src/lcd.c     **** 	MOVE(30, FLAG_BASE+1);
 660:src/lcd.c     **** 	PRINTF("shft = %u", cur_shift());
 661:src/lcd.c     **** 	MOVE(40, FLAG_BASE+1);
 662:src/lcd.c     **** 	PRINTF("trig = %u", UState.trigmode);
 663:src/lcd.c     **** 	MOVE(60, FLAG_BASE+1);
 664:src/lcd.c     **** 	PRINTF("r = %u", ShowRegister);
 665:src/lcd.c     **** //	MOVE(60, FLAG_BASE+1);
 666:src/lcd.c     **** //	PRINTF("apos = %u", State2.alpha_pos);
 667:src/lcd.c     **** 	MOVE(10, FLAG_BASE+2);
 668:src/lcd.c     **** 	PRINTF("numdig = %u   alpha '%-31s'   lflags = %03o-%03o",
 669:src/lcd.c     **** 			State2.numdigit, Alpha, get_local_flags() >> 8,
 670:src/lcd.c     **** 			get_local_flags() & 0xff);
 671:src/lcd.c     **** 	if (State.entryp) {
 672:src/lcd.c     **** 		MOVE(0, FLAG_BASE+2);
 673:src/lcd.c     **** 		PRINTF("entryp");
 674:src/lcd.c     **** 	}
 675:src/lcd.c     **** 	MOVE(10, FLAG_BASE+3);
 676:src/lcd.c     **** 	PRINTF("digval=%u", State2.digval);
 677:src/lcd.c     **** 	MOVE(23, FLAG_BASE+3);
 678:src/lcd.c     **** 	PRINTF("pc = %03u", state_pc());
 679:src/lcd.c     **** 	MOVE(34, FLAG_BASE+3);
 680:src/lcd.c     **** 	PRINTF("ap = %u", State2.alpha_pos);
 681:src/lcd.c     **** 	MOVE(45, FLAG_BASE+3);
 682:src/lcd.c     **** 	PRINTF("cmddot = %u  cmdeex = %u  eol = %u",
 683:src/lcd.c     **** 			CmdLineDot, CmdLineEex, CmdLineLength);
 684:src/lcd.c     **** 	MOVE(0, FLAG_BASE+3);
 685:src/lcd.c     **** 	PRINTF("JG=%d", UState.jg1582?1582:1752);
 686:src/lcd.c     **** #endif
 687:src/lcd.c     **** #endif
 688:src/lcd.c     **** }
 689:src/lcd.c     **** 
 690:src/lcd.c     **** void wait_for_display(void)
 691:src/lcd.c     **** {
 1556              		.loc 1 691 1 is_stmt 1 view -0
 1557              		.cfi_startproc
 1558              		@ args = 0, pretend = 0, frame = 0
 1559              		@ frame_needed = 0, uses_anonymous_args = 0
 1560              		@ link register save eliminated.
 692:src/lcd.c     **** }
 1561              		.loc 1 692 1 view .LVU262
 1562 0000 7047     		bx	lr
 1563              		.cfi_endproc
 1564              	.LFE28:
 1566 0002 00BF     		.section	.rodata.draw_RPN_RCL.str1.4,"aMS",%progbits,1
 1567              		.align	2
 1568              	.LC0:
 1569 0000 6552504E 		.ascii	"eRPN\000"
ARM GAS  /tmp/cc1Hm38z.s 			page 41


 1569      00
 1570 0005 000000   		.align	2
 1571              	.LC1:
 1572 0008 52504E00 		.ascii	"RPN\000"
 1573              		.align	2
 1574              	.LC2:
 1575 000c 52554E00 		.ascii	"RUN\000"
 1576              		.section	.text.draw_RPN_RCL,"ax",%progbits
 1577              		.align	1
 1578              		.p2align 2,,3
 1579              		.global	draw_RPN_RCL
 1580              		.syntax unified
 1581              		.thumb
 1582              		.thumb_func
 1583              		.fpu fpv4-sp-d16
 1585              	draw_RPN_RCL:
 1586              	.LFB30:
 693:src/lcd.c     **** 
 694:src/lcd.c     **** #if defined(USECURSES) && !defined(DM42) 
 695:src/lcd.c     **** void finish_display(void) {
 696:src/lcd.c     ****         show_disp();
 697:src/lcd.c     ****         MOVE(0, 0);
 698:src/lcd.c     ****         refresh();
 699:src/lcd.c     **** 
 700:src/lcd.c     **** }
 701:src/lcd.c     **** #endif
 702:src/lcd.c     **** #if defined(DM42) 
 703:src/lcd.c     **** void finish_display(void) {
 704:src/lcd.c     ****   //  lcd_clear_buf();
 705:src/lcd.c     ****   lcd_fill_rect (0, 0, 400, 188, 0); //leave bottom 52 rows for menu 
 706:src/lcd.c     ****   show_disp();
 707:src/lcd.c     ****   lcd_refresh();
 708:src/lcd.c     **** }
 709:src/lcd.c     **** 
 710:src/lcd.c     **** void draw_RPN_RCL(void) {
 1587              		.loc 1 710 25 view -0
 1588              		.cfi_startproc
 1589              		@ args = 0, pretend = 0, frame = 0
 1590              		@ frame_needed = 0, uses_anonymous_args = 0
 711:src/lcd.c     ****   t20->inv = !dots[RPN];
 1591              		.loc 1 711 3 view .LVU264
 710:src/lcd.c     ****   t20->inv = !dots[RPN];
 1592              		.loc 1 710 25 is_stmt 0 view .LVU265
 1593 0000 70B5     		push	{r4, r5, r6, lr}
 1594              		.cfi_def_cfa_offset 16
 1595              		.cfi_offset 4, -16
 1596              		.cfi_offset 5, -12
 1597              		.cfi_offset 6, -8
 1598              		.cfi_offset 14, -4
 1599              		.loc 1 711 19 view .LVU266
 1600 0002 1A4C     		ldr	r4, .L85
 1601              		.loc 1 711 3 view .LVU267
 1602 0004 1A4D     		ldr	r5, .L85+4
 1603              		.loc 1 711 14 view .LVU268
 1604 0006 94F88D30 		ldrb	r3, [r4, #141]	@ zero_extendqisi2
 712:src/lcd.c     ****   if (ENTRY_RPN_ENABLED) {
 1605              		.loc 1 712 7 view .LVU269
ARM GAS  /tmp/cc1Hm38z.s 			page 42


 1606 000a 1A4A     		ldr	r2, .L85+8
 711:src/lcd.c     ****   t20->inv = !dots[RPN];
 1607              		.loc 1 711 3 view .LVU270
 1608 000c 286B     		ldr	r0, [r5, #48]
 1609              		.loc 1 712 7 view .LVU271
 1610 000e 1268     		ldr	r2, [r2]
 711:src/lcd.c     ****   t20->inv = !dots[RPN];
 1611              		.loc 1 711 14 view .LVU272
 1612 0010 B3FA83F3 		clz	r3, r3
 1613 0014 5B09     		lsrs	r3, r3, #5
 1614 0016 4374     		strb	r3, [r0, #17]
 1615              		.loc 1 712 3 is_stmt 1 view .LVU273
 1616              		.loc 1 712 7 is_stmt 0 view .LVU274
 1617 0018 92F8AD37 		ldrb	r3, [r2, #1965]	@ zero_extendqisi2
 1618              		.loc 1 712 6 view .LVU275
 1619 001c 13F0020F 		tst	r3, #2
 713:src/lcd.c     ****     lcd_setXY (t20, 355, Y_ANNUNC-30); // 70 is y_ann
 1620              		.loc 1 713 5 view .LVU276
 1621 0020 4FF02D02 		mov	r2, #45
 1622 0024 144B     		ldr	r3, .L85+12
 712:src/lcd.c     ****   if (ENTRY_RPN_ENABLED) {
 1623              		.loc 1 712 6 view .LVU277
 1624 0026 19D0     		beq	.L82
 1625              		.loc 1 713 5 is_stmt 1 view .LVU278
 1626 0028 40F26311 		movw	r1, #355
 1627 002c 9847     		blx	r3
 1628              	.LVL129:
 714:src/lcd.c     ****     lcd_writeText(t20, "eRPN");
 1629              		.loc 1 714 5 view .LVU279
 1630 002e 286B     		ldr	r0, [r5, #48]
 1631 0030 124B     		ldr	r3, .L85+16
 1632 0032 1349     		ldr	r1, .L85+20
 1633 0034 9847     		blx	r3
 1634              	.LVL130:
 1635              	.L83:
 715:src/lcd.c     ****   }
 716:src/lcd.c     ****   else {
 717:src/lcd.c     ****     lcd_setXY (t20, 365, Y_ANNUNC-30); // 70 is y_ann
 718:src/lcd.c     ****     lcd_writeText(t20, "RPN");
 719:src/lcd.c     ****   }
 720:src/lcd.c     ****   t20->inv = !dots[RCL_annun];
 1636              		.loc 1 720 3 view .LVU280
 1637              		.loc 1 720 14 is_stmt 0 view .LVU281
 1638 0036 94F88A30 		ldrb	r3, [r4, #138]	@ zero_extendqisi2
 1639              		.loc 1 720 3 view .LVU282
 1640 003a 0D4C     		ldr	r4, .L85+4
 721:src/lcd.c     ****   lcd_setXY (t20, 365, Y_ANNUNC-50); // 70 is y_ann
 1641              		.loc 1 721 3 view .LVU283
 1642 003c 0E4D     		ldr	r5, .L85+12
 720:src/lcd.c     ****   lcd_setXY (t20, 365, Y_ANNUNC-50); // 70 is y_ann
 1643              		.loc 1 720 3 view .LVU284
 1644 003e 206B     		ldr	r0, [r4, #48]
 720:src/lcd.c     ****   lcd_setXY (t20, 365, Y_ANNUNC-50); // 70 is y_ann
 1645              		.loc 1 720 14 view .LVU285
 1646 0040 B3FA83F3 		clz	r3, r3
 1647 0044 5B09     		lsrs	r3, r3, #5
 1648 0046 4374     		strb	r3, [r0, #17]
ARM GAS  /tmp/cc1Hm38z.s 			page 43


 1649              		.loc 1 721 3 is_stmt 1 view .LVU286
 1650 0048 40F26D11 		movw	r1, #365
 1651 004c 1922     		movs	r2, #25
 1652 004e A847     		blx	r5
 1653              	.LVL131:
 722:src/lcd.c     ****   lcd_writeText(t20, "RUN");
 1654              		.loc 1 722 3 view .LVU287
 1655 0050 206B     		ldr	r0, [r4, #48]
 1656 0052 0A4B     		ldr	r3, .L85+16
 1657 0054 0B49     		ldr	r1, .L85+24
 723:src/lcd.c     **** }
 1658              		.loc 1 723 1 is_stmt 0 view .LVU288
 1659 0056 BDE87040 		pop	{r4, r5, r6, lr}
 1660              		.cfi_remember_state
 1661              		.cfi_restore 14
 1662              		.cfi_restore 6
 1663              		.cfi_restore 5
 1664              		.cfi_restore 4
 1665              		.cfi_def_cfa_offset 0
 722:src/lcd.c     ****   lcd_writeText(t20, "RUN");
 1666              		.loc 1 722 3 view .LVU289
 1667 005a 1847     		bx	r3	@ indirect register sibling call
 1668              	.LVL132:
 1669              	.L82:
 1670              		.cfi_restore_state
 717:src/lcd.c     ****     lcd_writeText(t20, "RPN");
 1671              		.loc 1 717 5 is_stmt 1 view .LVU290
 1672 005c 40F26D11 		movw	r1, #365
 1673 0060 9847     		blx	r3
 1674              	.LVL133:
 718:src/lcd.c     ****   }
 1675              		.loc 1 718 5 view .LVU291
 1676 0062 286B     		ldr	r0, [r5, #48]
 1677 0064 054B     		ldr	r3, .L85+16
 1678 0066 0849     		ldr	r1, .L85+28
 1679 0068 9847     		blx	r3
 1680              	.LVL134:
 1681 006a E4E7     		b	.L83
 1682              	.L86:
 1683              		.align	2
 1684              	.L85:
 1685 006c 00000000 		.word	.LANCHOR0
 1686 0070 00200010 		.word	268443648
 1687 0074 00000000 		.word	main_ram
 1688 0078 6D020008 		.word	134218349
 1689 007c 7D020008 		.word	134218365
 1690 0080 00000000 		.word	.LC0
 1691 0084 0C000000 		.word	.LC2
 1692 0088 08000000 		.word	.LC1
 1693              		.cfi_endproc
 1694              	.LFE30:
 1696              		.section	.rodata.draw_LEQ.str1.4,"aMS",%progbits,1
 1697              		.align	2
 1698              	.LC3:
 1699 0000 435F4C4B 		.ascii	"C_LK\000"
 1699      00
 1700 0005 000000   		.align	2
ARM GAS  /tmp/cc1Hm38z.s 			page 44


 1701              	.LC4:
 1702 0008 3D00     		.ascii	"=\000"
 1703              		.section	.text.draw_LEQ,"ax",%progbits
 1704              		.align	1
 1705              		.p2align 2,,3
 1706              		.global	draw_LEQ
 1707              		.syntax unified
 1708              		.thumb
 1709              		.thumb_func
 1710              		.fpu fpv4-sp-d16
 1712              	draw_LEQ:
 1713              	.LFB31:
 724:src/lcd.c     **** 
 725:src/lcd.c     **** void draw_LEQ(void) { // little equals
 1714              		.loc 1 725 21 view -0
 1715              		.cfi_startproc
 1716              		@ args = 0, pretend = 0, frame = 0
 1717              		@ frame_needed = 0, uses_anonymous_args = 0
 726:src/lcd.c     ****   t20->inv = !dots[LIT_EQ];
 1718              		.loc 1 726 3 view .LVU293
 725:src/lcd.c     ****   t20->inv = !dots[LIT_EQ];
 1719              		.loc 1 725 21 is_stmt 0 view .LVU294
 1720 0000 70B5     		push	{r4, r5, r6, lr}
 1721              		.cfi_def_cfa_offset 16
 1722              		.cfi_offset 4, -16
 1723              		.cfi_offset 5, -12
 1724              		.cfi_offset 6, -8
 1725              		.cfi_offset 14, -4
 1726              		.loc 1 726 19 view .LVU295
 1727 0002 104B     		ldr	r3, .L91
 1728              		.loc 1 726 3 view .LVU296
 1729 0004 104C     		ldr	r4, .L91+4
 1730              		.loc 1 726 14 view .LVU297
 1731 0006 93F88430 		ldrb	r3, [r3, #132]	@ zero_extendqisi2
 1732              		.loc 1 726 3 view .LVU298
 1733 000a 206B     		ldr	r0, [r4, #48]
 727:src/lcd.c     ****   lcd_setXY (t20, 360, Y_ANNUNC-70);
 1734              		.loc 1 727 3 view .LVU299
 1735 000c 0F4D     		ldr	r5, .L91+8
 726:src/lcd.c     ****   t20->inv = !dots[LIT_EQ];
 1736              		.loc 1 726 14 view .LVU300
 1737 000e B3FA83F3 		clz	r3, r3
 1738 0012 5B09     		lsrs	r3, r3, #5
 1739 0014 4374     		strb	r3, [r0, #17]
 1740              		.loc 1 727 3 is_stmt 1 view .LVU301
 1741 0016 0522     		movs	r2, #5
 1742 0018 4FF4B471 		mov	r1, #360
 1743 001c A847     		blx	r5
 1744              	.LVL135:
 728:src/lcd.c     ****   if (C_LOCKED) {
 1745              		.loc 1 728 3 view .LVU302
 1746              		.loc 1 728 7 is_stmt 0 view .LVU303
 1747 001e 0C4B     		ldr	r3, .L91+12
 1748              	.LBB67:
 1749              	.LBB68:
 729:src/lcd.c     ****     lcd_writeText(t20, "C_LK");
 1750              		.loc 1 729 5 view .LVU304
ARM GAS  /tmp/cc1Hm38z.s 			page 45


 1751 0020 206B     		ldr	r0, [r4, #48]
 1752              	.LBE68:
 1753              	.LBE67:
 728:src/lcd.c     ****   if (C_LOCKED) {
 1754              		.loc 1 728 7 view .LVU305
 1755 0022 1B68     		ldr	r3, [r3]
 1756 0024 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 728:src/lcd.c     ****   if (C_LOCKED) {
 1757              		.loc 1 728 6 view .LVU306
 1758 0028 03F04103 		and	r3, r3, #65
 1759 002c 412B     		cmp	r3, #65
 1760              	.LBB72:
 1761              	.LBB69:
 1762              		.loc 1 729 5 view .LVU307
 1763 002e 094B     		ldr	r3, .L91+16
 1764              	.LBE69:
 1765              	.LBE72:
 728:src/lcd.c     ****   if (C_LOCKED) {
 1766              		.loc 1 728 6 view .LVU308
 1767 0030 03D0     		beq	.L90
 730:src/lcd.c     ****   }
 731:src/lcd.c     ****   else {
 732:src/lcd.c     ****     lcd_writeText(t20, "=");
 1768              		.loc 1 732 5 is_stmt 1 view .LVU309
 733:src/lcd.c     ****   }
 734:src/lcd.c     **** }
 1769              		.loc 1 734 1 is_stmt 0 view .LVU310
 1770 0032 BDE87040 		pop	{r4, r5, r6, lr}
 1771              		.cfi_remember_state
 1772              		.cfi_restore 14
 1773              		.cfi_restore 6
 1774              		.cfi_restore 5
 1775              		.cfi_restore 4
 1776              		.cfi_def_cfa_offset 0
 732:src/lcd.c     ****   }
 1777              		.loc 1 732 5 view .LVU311
 1778 0036 0849     		ldr	r1, .L91+20
 1779 0038 1847     		bx	r3	@ indirect register sibling call
 1780              	.LVL136:
 1781              	.L90:
 1782              		.cfi_restore_state
 1783              	.LBB73:
 1784              	.LBI67:
 725:src/lcd.c     ****   t20->inv = !dots[LIT_EQ];
 1785              		.loc 1 725 6 is_stmt 1 view .LVU312
 1786              	.LBB70:
 729:src/lcd.c     ****   }
 1787              		.loc 1 729 5 view .LVU313
 1788              	.LBE70:
 1789              	.LBE73:
 1790              		.loc 1 734 1 is_stmt 0 view .LVU314
 1791 003a BDE87040 		pop	{r4, r5, r6, lr}
 1792              		.cfi_restore 14
 1793              		.cfi_restore 6
 1794              		.cfi_restore 5
 1795              		.cfi_restore 4
 1796              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/cc1Hm38z.s 			page 46


 1797              	.LBB74:
 1798              	.LBB71:
 729:src/lcd.c     ****   }
 1799              		.loc 1 729 5 view .LVU315
 1800 003e 0749     		ldr	r1, .L91+24
 1801 0040 1847     		bx	r3	@ indirect register sibling call
 1802              	.LVL137:
 1803              	.L92:
 1804 0042 00BF     		.align	2
 1805              	.L91:
 1806 0044 00000000 		.word	.LANCHOR0
 1807 0048 00200010 		.word	268443648
 1808 004c 6D020008 		.word	134218349
 1809 0050 00000000 		.word	main_ram
 1810 0054 7D020008 		.word	134218365
 1811 0058 08000000 		.word	.LC4
 1812 005c 00000000 		.word	.LC3
 1813              	.LBE71:
 1814              	.LBE74:
 1815              		.cfi_endproc
 1816              	.LFE31:
 1818              		.section	.rodata.show_disp.str1.4,"aMS",%progbits,1
 1819              		.align	2
 1820              	.LC5:
 1821 0000 414C5048 		.ascii	"ALPHA\000"
 1821      4100
 1822 0006 0000     		.align	2
 1823              	.LC6:
 1824 0008 533A3800 		.ascii	"S:8\000"
 1825              		.align	2
 1826              	.LC7:
 1827 000c 533A3400 		.ascii	"S:4\000"
 1828              		.align	2
 1829              	.LC8:
 1830 0010 50474D00 		.ascii	"PGM\000"
 1831              		.align	2
 1832              	.LC9:
 1833 0014 52414400 		.ascii	"RAD\000"
 1834              		.align	2
 1835              	.LC10:
 1836 0018 44454700 		.ascii	"DEG\000"
 1837              		.section	.text.show_disp,"ax",%progbits
 1838              		.align	1
 1839              		.p2align 2,,3
 1840              		.global	show_disp
 1841              		.syntax unified
 1842              		.thumb
 1843              		.thumb_func
 1844              		.fpu fpv4-sp-d16
 1846              	show_disp:
 1847              	.LFB25:
 249:src/lcd.c     ****   // It may be fast enough. It does mean that clearing everything first is needed,
 1848              		.loc 1 249 22 is_stmt 1 view -0
 1849              		.cfi_startproc
 1850              		@ args = 0, pretend = 0, frame = 0
 1851              		@ frame_needed = 0, uses_anonymous_args = 0
 253:src/lcd.c     **** 	uint32_t x;
ARM GAS  /tmp/cc1Hm38z.s 			page 47


 1852              		.loc 1 253 9 view .LVU317
 254:src/lcd.c     **** 	const uint32_t xleft = 26;
 1853              		.loc 1 254 2 view .LVU318
 255:src/lcd.c     **** 	const uint32_t ytop = 130; // was 170
 1854              		.loc 1 255 2 view .LVU319
 1855              	.LVL138:
 256:src/lcd.c     **** 	const uint32_t dwidth = 25;
 1856              		.loc 1 256 2 view .LVU320
 257:src/lcd.c     **** 	const uint32_t xleft_exp = 344;
 1857              		.loc 1 257 2 view .LVU321
 258:src/lcd.c     **** 	const uint32_t ytop_exp = 130; // was 170
 1858              		.loc 1 258 2 view .LVU322
 259:src/lcd.c     **** 	const uint32_t dwidth_exp = 18;
 1859              		.loc 1 259 2 view .LVU323
 260:src/lcd.c     **** 	const uint32_t y_ann = Y_ANNUNC;
 1860              		.loc 1 260 2 view .LVU324
 261:src/lcd.c     ****         /* Segments 0 - 107 are the main digits */
 1861              		.loc 1 261 2 view .LVU325
 263:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 1862              		.loc 1 263 9 view .LVU326
 263:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 1863              		.loc 1 263 19 view .LVU327
 249:src/lcd.c     ****   // It may be fast enough. It does mean that clearing everything first is needed,
 1864              		.loc 1 249 22 is_stmt 0 view .LVU328
 1865 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1866              		.cfi_def_cfa_offset 36
 1867              		.cfi_offset 4, -36
 1868              		.cfi_offset 5, -32
 1869              		.cfi_offset 6, -28
 1870              		.cfi_offset 7, -24
 1871              		.cfi_offset 8, -20
 1872              		.cfi_offset 9, -16
 1873              		.cfi_offset 10, -12
 1874              		.cfi_offset 11, -8
 1875              		.cfi_offset 14, -4
 1876 0004 DFF8C0B0 		ldr	fp, .L230+4
 1877              	.LBB75:
 1878              	.LBB76:
 202:src/lcd.c     **** }
 1879              		.loc 1 202 3 view .LVU329
 1880 0008 2E4F     		ldr	r7, .L230
 1881              	.LBE76:
 1882              	.LBE75:
 249:src/lcd.c     ****   // It may be fast enough. It does mean that clearing everything first is needed,
 1883              		.loc 1 249 22 view .LVU330
 1884 000a 83B0     		sub	sp, sp, #12
 1885              		.cfi_def_cfa_offset 48
 249:src/lcd.c     ****   // It may be fast enough. It does mean that clearing everything first is needed,
 1886              		.loc 1 249 22 view .LVU331
 1887 000c 5E46     		mov	r6, fp
 1888 000e 5C46     		mov	r4, fp
 1889 0010 1A25     		movs	r5, #26
 1890 0012 24E0     		b	.L103
 1891              	.LVL139:
 1892              	.L94:
 269:src/lcd.c     **** 		  left_side_top (x, ytop);
 1893              		.loc 1 269 17 is_stmt 1 view .LVU332
ARM GAS  /tmp/cc1Hm38z.s 			page 48


 269:src/lcd.c     **** 		  left_side_top (x, ytop);
 1894              		.loc 1 269 20 is_stmt 0 view .LVU333
 1895 0014 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1896 0016 002B     		cmp	r3, #0
 1897 0018 2BD1     		bne	.L213
 1898              	.L95:
 272:src/lcd.c     **** 		  right_side_top (x, ytop);
 1899              		.loc 1 272 17 is_stmt 1 view .LVU334
 272:src/lcd.c     **** 		  right_side_top (x, ytop);
 1900              		.loc 1 272 20 is_stmt 0 view .LVU335
 1901 001a E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
 1902 001c 002B     		cmp	r3, #0
 1903 001e 2FD1     		bne	.L214
 1904              	.L96:
 275:src/lcd.c     **** 		  middle (x, ytop);
 1905              		.loc 1 275 17 is_stmt 1 view .LVU336
 275:src/lcd.c     **** 		  middle (x, ytop);
 1906              		.loc 1 275 20 is_stmt 0 view .LVU337
 1907 0020 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 1908 0022 002B     		cmp	r3, #0
 1909 0024 33D1     		bne	.L215
 1910              	.L97:
 278:src/lcd.c     **** 		  left_side_bottom (x, ytop);
 1911              		.loc 1 278 17 is_stmt 1 view .LVU338
 278:src/lcd.c     **** 		  left_side_bottom (x, ytop);
 1912              		.loc 1 278 20 is_stmt 0 view .LVU339
 1913 0026 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 1914 0028 002B     		cmp	r3, #0
 1915 002a 37D1     		bne	.L216
 1916              	.L98:
 281:src/lcd.c     **** 		  right_side_bottom (x, ytop);
 1917              		.loc 1 281 17 is_stmt 1 view .LVU340
 281:src/lcd.c     **** 		  right_side_bottom (x, ytop);
 1918              		.loc 1 281 20 is_stmt 0 view .LVU341
 1919 002c A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 1920 002e 002B     		cmp	r3, #0
 1921 0030 3BD1     		bne	.L217
 1922              	.L99:
 284:src/lcd.c     **** 		  bottom (x, ytop);
 1923              		.loc 1 284 17 is_stmt 1 view .LVU342
 284:src/lcd.c     **** 		  bottom (x, ytop);
 1924              		.loc 1 284 20 is_stmt 0 view .LVU343
 1925 0032 6379     		ldrb	r3, [r4, #5]	@ zero_extendqisi2
 1926 0034 002B     		cmp	r3, #0
 1927 0036 3FD1     		bne	.L218
 1928              	.L100:
 287:src/lcd.c     **** 		  decimal (x, ytop);
 1929              		.loc 1 287 17 is_stmt 1 view .LVU344
 287:src/lcd.c     **** 		  decimal (x, ytop);
 1930              		.loc 1 287 20 is_stmt 0 view .LVU345
 1931 0038 E379     		ldrb	r3, [r4, #7]	@ zero_extendqisi2
 1932 003a 3BB1     		cbz	r3, .L101
 288:src/lcd.c     ****                 }
 1933              		.loc 1 288 5 is_stmt 1 view .LVU346
 1934              	.LVL140:
 1935              	.LBB78:
 1936              	.LBI75:
ARM GAS  /tmp/cc1Hm38z.s 			page 49


 201:src/lcd.c     ****   lcd_fill_rect (i+19, j+40, 5, 5, 0xff);
 1937              		.loc 1 201 6 view .LVU347
 1938              	.LBB77:
 202:src/lcd.c     **** }
 1939              		.loc 1 202 3 view .LVU348
 1940 003c FF22     		movs	r2, #255
 1941 003e 0523     		movs	r3, #5
 1942 0040 0092     		str	r2, [sp]
 1943 0042 AA21     		movs	r1, #170
 1944 0044 1A46     		mov	r2, r3
 1945 0046 05F11300 		add	r0, r5, #19
 1946 004a B847     		blx	r7
 1947              	.LVL141:
 1948              	.L101:
 202:src/lcd.c     **** }
 1949              		.loc 1 202 3 is_stmt 0 view .LVU349
 1950              	.LBE77:
 1951              	.LBE78:
 290:src/lcd.c     **** 		  comma (x, ytop);
 1952              		.loc 1 290 17 is_stmt 1 view .LVU350
 290:src/lcd.c     **** 		  comma (x, ytop);
 1953              		.loc 1 290 20 is_stmt 0 view .LVU351
 1954 004c 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 1955 004e 002B     		cmp	r3, #0
 1956 0050 3CD1     		bne	.L219
 263:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 1957              		.loc 1 263 37 is_stmt 1 discriminator 2 view .LVU352
 263:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 1958              		.loc 1 263 19 discriminator 2 view .LVU353
 1959 0052 1935     		adds	r5, r5, #25
 1960              	.LVL142:
 263:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 1961              		.loc 1 263 9 is_stmt 0 discriminator 2 view .LVU354
 1962 0054 B5F5A37F 		cmp	r5, #326
 1963 0058 04F10904 		add	r4, r4, #9
 1964              	.LVL143:
 263:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 1965              		.loc 1 263 9 discriminator 2 view .LVU355
 1966 005c 40D0     		beq	.L220
 1967              	.LVL144:
 1968              	.L103:
 264:src/lcd.c     ****                 x = xleft + dwidth*i;
 1969              		.loc 1 264 17 is_stmt 1 view .LVU356
 265:src/lcd.c     ****                 if (dots[p]) { // top
 1970              		.loc 1 265 17 view .LVU357
 266:src/lcd.c     **** 		  top (x, ytop);
 1971              		.loc 1 266 17 view .LVU358
 266:src/lcd.c     **** 		  top (x, ytop);
 1972              		.loc 1 266 20 is_stmt 0 view .LVU359
 1973 005e 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1974 0060 002B     		cmp	r3, #0
 1975 0062 D7D0     		beq	.L94
 267:src/lcd.c     ****                 }
 1976              		.loc 1 267 5 is_stmt 1 view .LVU360
 1977 0064 8221     		movs	r1, #130
 1978 0066 2846     		mov	r0, r5
 1979 0068 FFF7FEFF 		bl	top
ARM GAS  /tmp/cc1Hm38z.s 			page 50


 1980              	.LVL145:
 269:src/lcd.c     **** 		  left_side_top (x, ytop);
 1981              		.loc 1 269 17 view .LVU361
 269:src/lcd.c     **** 		  left_side_top (x, ytop);
 1982              		.loc 1 269 20 is_stmt 0 view .LVU362
 1983 006c 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1984 006e 002B     		cmp	r3, #0
 1985 0070 D3D0     		beq	.L95
 1986              	.L213:
 270:src/lcd.c     ****                 }
 1987              		.loc 1 270 5 is_stmt 1 view .LVU363
 1988              	.LVL146:
 1989              	.LBB79:
 1990              	.LBI79:
 165:src/lcd.c     ****   left_side(i, j);
 1991              		.loc 1 165 6 view .LVU364
 1992              	.LBB80:
 166:src/lcd.c     **** }
 1993              		.loc 1 166 3 view .LVU365
 1994 0072 8221     		movs	r1, #130
 1995 0074 2846     		mov	r0, r5
 1996 0076 FFF7FEFF 		bl	left_side
 1997              	.LVL147:
 166:src/lcd.c     **** }
 1998              		.loc 1 166 3 is_stmt 0 view .LVU366
 1999              	.LBE80:
 2000              	.LBE79:
 272:src/lcd.c     **** 		  right_side_top (x, ytop);
 2001              		.loc 1 272 17 is_stmt 1 view .LVU367
 272:src/lcd.c     **** 		  right_side_top (x, ytop);
 2002              		.loc 1 272 20 is_stmt 0 view .LVU368
 2003 007a E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
 2004 007c 002B     		cmp	r3, #0
 2005 007e CFD0     		beq	.L96
 2006              	.L214:
 273:src/lcd.c     ****                 }
 2007              		.loc 1 273 5 is_stmt 1 view .LVU369
 2008              	.LVL148:
 2009              	.LBB81:
 2010              	.LBI81:
 178:src/lcd.c     ****   right_side(i, j);
 2011              		.loc 1 178 6 view .LVU370
 2012              	.LBB82:
 179:src/lcd.c     **** }
 2013              		.loc 1 179 3 view .LVU371
 2014 0080 8221     		movs	r1, #130
 2015 0082 2846     		mov	r0, r5
 2016 0084 FFF7FEFF 		bl	right_side
 2017              	.LVL149:
 179:src/lcd.c     **** }
 2018              		.loc 1 179 3 is_stmt 0 view .LVU372
 2019              	.LBE82:
 2020              	.LBE81:
 275:src/lcd.c     **** 		  middle (x, ytop);
 2021              		.loc 1 275 17 is_stmt 1 view .LVU373
 275:src/lcd.c     **** 		  middle (x, ytop);
 2022              		.loc 1 275 20 is_stmt 0 view .LVU374
ARM GAS  /tmp/cc1Hm38z.s 			page 51


 2023 0088 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 2024 008a 002B     		cmp	r3, #0
 2025 008c CBD0     		beq	.L97
 2026              	.L215:
 276:src/lcd.c     ****                 }
 2027              		.loc 1 276 5 is_stmt 1 view .LVU375
 2028 008e 8221     		movs	r1, #130
 2029 0090 2846     		mov	r0, r5
 2030 0092 FFF7FEFF 		bl	middle
 2031              	.LVL150:
 278:src/lcd.c     **** 		  left_side_bottom (x, ytop);
 2032              		.loc 1 278 17 view .LVU376
 278:src/lcd.c     **** 		  left_side_bottom (x, ytop);
 2033              		.loc 1 278 20 is_stmt 0 view .LVU377
 2034 0096 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2035 0098 002B     		cmp	r3, #0
 2036 009a C7D0     		beq	.L98
 2037              	.L216:
 279:src/lcd.c     ****                 }
 2038              		.loc 1 279 5 is_stmt 1 view .LVU378
 2039              	.LVL151:
 2040              	.LBB83:
 2041              	.LBI83:
 168:src/lcd.c     ****   left_side(i-2, j+19);
 2042              		.loc 1 168 6 view .LVU379
 2043              	.LBB84:
 169:src/lcd.c     **** }
 2044              		.loc 1 169 3 view .LVU380
 2045 009c 9521     		movs	r1, #149
 2046 009e A81E     		subs	r0, r5, #2
 2047 00a0 FFF7FEFF 		bl	left_side
 2048              	.LVL152:
 169:src/lcd.c     **** }
 2049              		.loc 1 169 3 is_stmt 0 view .LVU381
 2050              	.LBE84:
 2051              	.LBE83:
 281:src/lcd.c     **** 		  right_side_bottom (x, ytop);
 2052              		.loc 1 281 17 is_stmt 1 view .LVU382
 281:src/lcd.c     **** 		  right_side_bottom (x, ytop);
 2053              		.loc 1 281 20 is_stmt 0 view .LVU383
 2054 00a4 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2055 00a6 002B     		cmp	r3, #0
 2056 00a8 C3D0     		beq	.L99
 2057              	.L217:
 282:src/lcd.c     ****                 }
 2058              		.loc 1 282 5 is_stmt 1 view .LVU384
 2059              	.LVL153:
 2060              	.LBB85:
 2061              	.LBI85:
 181:src/lcd.c     ****   right_side(i-2, j+19);
 2062              		.loc 1 181 6 view .LVU385
 2063              	.LBB86:
 182:src/lcd.c     **** }
 2064              		.loc 1 182 3 view .LVU386
 2065 00aa 9521     		movs	r1, #149
 2066 00ac A81E     		subs	r0, r5, #2
 2067 00ae FFF7FEFF 		bl	right_side
ARM GAS  /tmp/cc1Hm38z.s 			page 52


 2068              	.LVL154:
 182:src/lcd.c     **** }
 2069              		.loc 1 182 3 is_stmt 0 view .LVU387
 2070              	.LBE86:
 2071              	.LBE85:
 284:src/lcd.c     **** 		  bottom (x, ytop);
 2072              		.loc 1 284 17 is_stmt 1 view .LVU388
 284:src/lcd.c     **** 		  bottom (x, ytop);
 2073              		.loc 1 284 20 is_stmt 0 view .LVU389
 2074 00b2 6379     		ldrb	r3, [r4, #5]	@ zero_extendqisi2
 2075 00b4 002B     		cmp	r3, #0
 2076 00b6 BFD0     		beq	.L100
 2077              	.L218:
 285:src/lcd.c     ****                 }
 2078              		.loc 1 285 5 is_stmt 1 view .LVU390
 2079 00b8 8221     		movs	r1, #130
 2080 00ba 2846     		mov	r0, r5
 2081 00bc FFF7FEFF 		bl	bottom
 2082              	.LVL155:
 2083 00c0 BAE7     		b	.L100
 2084              	.L231:
 2085 00c2 00BF     		.align	2
 2086              	.L230:
 2087 00c4 3D020008 		.word	134218301
 2088 00c8 00000000 		.word	.LANCHOR0
 2089              	.L219:
 291:src/lcd.c     ****                 }
 2090              		.loc 1 291 5 view .LVU391
 2091 00cc 2846     		mov	r0, r5
 2092 00ce 8221     		movs	r1, #130
 2093 00d0 1935     		adds	r5, r5, #25
 2094              	.LVL156:
 291:src/lcd.c     ****                 }
 2095              		.loc 1 291 5 is_stmt 0 view .LVU392
 2096 00d2 FFF7FEFF 		bl	comma
 2097              	.LVL157:
 263:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 2098              		.loc 1 263 37 is_stmt 1 view .LVU393
 263:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 2099              		.loc 1 263 19 view .LVU394
 263:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 2100              		.loc 1 263 9 is_stmt 0 view .LVU395
 2101 00d6 B5F5A37F 		cmp	r5, #326
 2102 00da 04F10904 		add	r4, r4, #9
 2103              	.LVL158:
 263:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 2104              		.loc 1 263 9 view .LVU396
 2105 00de BED1     		bne	.L103
 2106              	.LVL159:
 2107              	.L220:
 263:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 2108              		.loc 1 263 9 view .LVU397
 2109 00e0 A24C     		ldr	r4, .L232
 2110 00e2 4FF4AC75 		mov	r5, #344
 2111              	.L111:
 296:src/lcd.c     ****                 x = xleft_exp + dwidth_exp*i;
 2112              		.loc 1 296 17 is_stmt 1 view .LVU398
ARM GAS  /tmp/cc1Hm38z.s 			page 53


 2113              	.LVL160:
 297:src/lcd.c     ****                 if (dots[p]) { // top
 2114              		.loc 1 297 17 view .LVU399
 298:src/lcd.c     **** 		  exp_top (x, ytop_exp);
 2115              		.loc 1 298 17 view .LVU400
 298:src/lcd.c     **** 		  exp_top (x, ytop_exp);
 2116              		.loc 1 298 20 is_stmt 0 view .LVU401
 2117 00e6 94F86C30 		ldrb	r3, [r4, #108]	@ zero_extendqisi2
 2118 00ea 002B     		cmp	r3, #0
 2119 00ec 40F01F81 		bne	.L221
 2120              	.L104:
 301:src/lcd.c     **** 		  exp_left_side_top (x, ytop_exp);
 2121              		.loc 1 301 17 is_stmt 1 view .LVU402
 301:src/lcd.c     **** 		  exp_left_side_top (x, ytop_exp);
 2122              		.loc 1 301 20 is_stmt 0 view .LVU403
 2123 00f0 94F86D30 		ldrb	r3, [r4, #109]	@ zero_extendqisi2
 2124 00f4 002B     		cmp	r3, #0
 2125 00f6 40F01581 		bne	.L222
 2126              	.L105:
 304:src/lcd.c     **** 		  exp_right_side_top (x, ytop_exp);
 2127              		.loc 1 304 17 is_stmt 1 view .LVU404
 304:src/lcd.c     **** 		  exp_right_side_top (x, ytop_exp);
 2128              		.loc 1 304 20 is_stmt 0 view .LVU405
 2129 00fa 94F86F30 		ldrb	r3, [r4, #111]	@ zero_extendqisi2
 2130 00fe 002B     		cmp	r3, #0
 2131 0100 40F00B81 		bne	.L223
 2132              	.L106:
 307:src/lcd.c     **** 		  exp_middle (x, ytop_exp);
 2133              		.loc 1 307 17 is_stmt 1 view .LVU406
 307:src/lcd.c     **** 		  exp_middle (x, ytop_exp);
 2134              		.loc 1 307 20 is_stmt 0 view .LVU407
 2135 0104 94F86E30 		ldrb	r3, [r4, #110]	@ zero_extendqisi2
 2136 0108 002B     		cmp	r3, #0
 2137 010a 40F00181 		bne	.L224
 2138              	.L107:
 310:src/lcd.c     **** 		  exp_left_side_bottom (x, ytop_exp);
 2139              		.loc 1 310 17 is_stmt 1 view .LVU408
 310:src/lcd.c     **** 		  exp_left_side_bottom (x, ytop_exp);
 2140              		.loc 1 310 20 is_stmt 0 view .LVU409
 2141 010e 94F87030 		ldrb	r3, [r4, #112]	@ zero_extendqisi2
 2142 0112 002B     		cmp	r3, #0
 2143 0114 40F0F780 		bne	.L225
 2144              	.L108:
 313:src/lcd.c     **** 		  exp_right_side_bottom (x, ytop_exp);
 2145              		.loc 1 313 17 is_stmt 1 view .LVU410
 313:src/lcd.c     **** 		  exp_right_side_bottom (x, ytop_exp);
 2146              		.loc 1 313 20 is_stmt 0 view .LVU411
 2147 0118 94F87230 		ldrb	r3, [r4, #114]	@ zero_extendqisi2
 2148 011c 002B     		cmp	r3, #0
 2149 011e 40F0ED80 		bne	.L226
 2150              	.L109:
 316:src/lcd.c     **** 		  exp_bottom (x, ytop_exp);
 2151              		.loc 1 316 17 is_stmt 1 view .LVU412
 316:src/lcd.c     **** 		  exp_bottom (x, ytop_exp);
 2152              		.loc 1 316 20 is_stmt 0 view .LVU413
 2153 0122 94F87130 		ldrb	r3, [r4, #113]	@ zero_extendqisi2
 2154 0126 002B     		cmp	r3, #0
ARM GAS  /tmp/cc1Hm38z.s 			page 54


 2155 0128 40F0E380 		bne	.L227
 2156              	.L110:
 295:src/lcd.c     ****                 p = i*7+108;
 2157              		.loc 1 295 24 is_stmt 1 discriminator 2 view .LVU414
 295:src/lcd.c     ****                 p = i*7+108;
 2158              		.loc 1 295 19 discriminator 2 view .LVU415
 2159 012c 1235     		adds	r5, r5, #18
 2160              	.LVL161:
 295:src/lcd.c     ****                 p = i*7+108;
 2161              		.loc 1 295 9 is_stmt 0 discriminator 2 view .LVU416
 2162 012e B5F5C77F 		cmp	r5, #398
 2163 0132 04F10704 		add	r4, r4, #7
 2164              	.LVL162:
 295:src/lcd.c     ****                 p = i*7+108;
 2165              		.loc 1 295 9 discriminator 2 view .LVU417
 2166 0136 D6D1     		bne	.L111
 321:src/lcd.c     **** 	  middle (xleft - dwidth, ytop);
 2167              		.loc 1 321 9 is_stmt 1 view .LVU418
 321:src/lcd.c     **** 	  middle (xleft - dwidth, ytop);
 2168              		.loc 1 321 12 is_stmt 0 view .LVU419
 2169 0138 96F88130 		ldrb	r3, [r6, #129]	@ zero_extendqisi2
 2170 013c 002B     		cmp	r3, #0
 2171 013e 40F00681 		bne	.L228
 324:src/lcd.c     **** 	  exp_middle (xleft_exp-dwidth_exp, ytop);
 2172              		.loc 1 324 9 is_stmt 1 view .LVU420
 324:src/lcd.c     **** 	  exp_middle (xleft_exp-dwidth_exp, ytop);
 2173              		.loc 1 324 12 is_stmt 0 view .LVU421
 2174 0142 96F88230 		ldrb	r3, [r6, #130]	@ zero_extendqisi2
 2175 0146 002B     		cmp	r3, #0
 2176 0148 40F00A81 		bne	.L229
 2177              	.L113:
 328:src/lcd.c     **** 	  lcd_fill_rect (250, y_ann-34, 15, 4, 0xff);
 2178              		.loc 1 328 2 is_stmt 1 view .LVU422
 328:src/lcd.c     **** 	  lcd_fill_rect (250, y_ann-34, 15, 4, 0xff);
 2179              		.loc 1 328 5 is_stmt 0 view .LVU423
 2180 014c 96F88330 		ldrb	r3, [r6, #131]	@ zero_extendqisi2
 2181 0150 6BB1     		cbz	r3, .L114
 329:src/lcd.c     **** 	  lcd_fill_rect (250, y_ann-24, 15, 4, 0xff);
 2182              		.loc 1 329 4 is_stmt 1 view .LVU424
 2183 0152 FF25     		movs	r5, #255
 2184              	.LVL163:
 329:src/lcd.c     **** 	  lcd_fill_rect (250, y_ann-24, 15, 4, 0xff);
 2185              		.loc 1 329 4 is_stmt 0 view .LVU425
 2186 0154 0423     		movs	r3, #4
 2187 0156 0F22     		movs	r2, #15
 2188 0158 2921     		movs	r1, #41
 2189 015a FA20     		movs	r0, #250
 2190 015c 844C     		ldr	r4, .L232+4
 2191              	.LVL164:
 329:src/lcd.c     **** 	  lcd_fill_rect (250, y_ann-24, 15, 4, 0xff);
 2192              		.loc 1 329 4 view .LVU426
 2193 015e 0095     		str	r5, [sp]
 2194 0160 A047     		blx	r4
 2195              	.LVL165:
 330:src/lcd.c     ****         }
 2196              		.loc 1 330 4 is_stmt 1 view .LVU427
 2197 0162 0095     		str	r5, [sp]
ARM GAS  /tmp/cc1Hm38z.s 			page 55


 2198 0164 0423     		movs	r3, #4
 2199 0166 0F22     		movs	r2, #15
 2200 0168 3321     		movs	r1, #51
 2201 016a FA20     		movs	r0, #250
 2202 016c A047     		blx	r4
 2203              	.LVL166:
 2204              	.L114:
 332:src/lcd.c     **** 	
 2205              		.loc 1 332 2 view .LVU428
 2206 016e 814B     		ldr	r3, .L232+8
 332:src/lcd.c     **** 	
 2207              		.loc 1 332 11 is_stmt 0 view .LVU429
 2208 0170 1B6B     		ldr	r3, [r3, #48]
 2209 0172 0022     		movs	r2, #0
 2210 0174 5A74     		strb	r2, [r3, #17]
 334:src/lcd.c     **** 	  lcd_fill_rect(287,y_ann-67,5,12,0xff);
 2211              		.loc 1 334 9 is_stmt 1 view .LVU430
 334:src/lcd.c     **** 	  lcd_fill_rect(287,y_ann-67,5,12,0xff);
 2212              		.loc 1 334 12 is_stmt 0 view .LVU431
 2213 0176 96F88530 		ldrb	r3, [r6, #133]	@ zero_extendqisi2
 2214 017a 5BB3     		cbz	r3, .L115
 335:src/lcd.c     **** 	  lcd_fill_rect(285,y_ann-55,9,1,0xff);
 2215              		.loc 1 335 4 is_stmt 1 view .LVU432
 2216 017c FF25     		movs	r5, #255
 2217 017e 7C4C     		ldr	r4, .L232+4
 2218 0180 0095     		str	r5, [sp]
 2219 0182 0C23     		movs	r3, #12
 2220 0184 0522     		movs	r2, #5
 2221 0186 0821     		movs	r1, #8
 2222 0188 40F21F10 		movw	r0, #287
 2223 018c A047     		blx	r4
 2224              	.LVL167:
 336:src/lcd.c     **** 	  lcd_fill_rect(286,y_ann-54,7,1,0xff);
 2225              		.loc 1 336 4 view .LVU433
 2226 018e 0123     		movs	r3, #1
 2227 0190 0922     		movs	r2, #9
 2228 0192 1421     		movs	r1, #20
 2229 0194 40F21D10 		movw	r0, #285
 2230 0198 0095     		str	r5, [sp]
 2231 019a A047     		blx	r4
 2232              	.LVL168:
 337:src/lcd.c     **** 	  lcd_fill_rect(287,y_ann-53,5,1,0xff);
 2233              		.loc 1 337 4 view .LVU434
 2234 019c 0123     		movs	r3, #1
 2235 019e 0722     		movs	r2, #7
 2236 01a0 1521     		movs	r1, #21
 2237 01a2 4FF48F70 		mov	r0, #286
 2238 01a6 0095     		str	r5, [sp]
 2239 01a8 A047     		blx	r4
 2240              	.LVL169:
 338:src/lcd.c     **** 	  lcd_fill_rect(288,y_ann-52,3,1,0xff);
 2241              		.loc 1 338 4 view .LVU435
 2242 01aa 0123     		movs	r3, #1
 2243 01ac 0522     		movs	r2, #5
 2244 01ae 1621     		movs	r1, #22
 2245 01b0 40F21F10 		movw	r0, #287
 2246 01b4 0095     		str	r5, [sp]
ARM GAS  /tmp/cc1Hm38z.s 			page 56


 2247 01b6 A047     		blx	r4
 2248              	.LVL170:
 339:src/lcd.c     **** 	  lcd_fill_rect(289,y_ann-51,1,1,0xff);
 2249              		.loc 1 339 4 view .LVU436
 2250 01b8 0123     		movs	r3, #1
 2251 01ba 0322     		movs	r2, #3
 2252 01bc 1721     		movs	r1, #23
 2253 01be 4FF49070 		mov	r0, #288
 2254 01c2 0095     		str	r5, [sp]
 2255 01c4 A047     		blx	r4
 2256              	.LVL171:
 340:src/lcd.c     ****         }
 2257              		.loc 1 340 4 view .LVU437
 2258 01c6 0123     		movs	r3, #1
 2259 01c8 0095     		str	r5, [sp]
 2260 01ca 1A46     		mov	r2, r3
 2261 01cc 1821     		movs	r1, #24
 2262 01ce 40F22110 		movw	r0, #289
 2263 01d2 A047     		blx	r4
 2264              	.LVL172:
 2265              	.L115:
 343:src/lcd.c     **** 	  lcd_setXY(t20, 305, y_ann-70);
 2266              		.loc 1 343 2 view .LVU438
 343:src/lcd.c     **** 	  lcd_setXY(t20, 305, y_ann-70);
 2267              		.loc 1 343 5 is_stmt 0 view .LVU439
 2268 01d4 96F88630 		ldrb	r3, [r6, #134]	@ zero_extendqisi2
 2269 01d8 53B1     		cbz	r3, .L116
 344:src/lcd.c     **** 	  lcd_writeText(t20,"ALPHA");
 2270              		.loc 1 344 4 is_stmt 1 view .LVU440
 2271 01da 664C     		ldr	r4, .L232+8
 2272 01dc 664B     		ldr	r3, .L232+12
 2273 01de 206B     		ldr	r0, [r4, #48]
 2274 01e0 40F23111 		movw	r1, #305
 2275 01e4 0522     		movs	r2, #5
 2276 01e6 9847     		blx	r3
 2277              	.LVL173:
 345:src/lcd.c     ****         }
 2278              		.loc 1 345 4 view .LVU441
 2279 01e8 206B     		ldr	r0, [r4, #48]
 2280 01ea 644B     		ldr	r3, .L232+16
 2281 01ec 6449     		ldr	r1, .L232+20
 2282 01ee 9847     		blx	r3
 2283              	.LVL174:
 2284              	.L116:
 358:src/lcd.c     **** 	
 2285              		.loc 1 358 2 view .LVU442
 2286 01f0 FFF7FEFF 		bl	draw_LEQ
 2287              	.LVL175:
 360:src/lcd.c     **** 	  //    MOVE(70, 10);   PRINTF("####-");
 2288              		.loc 1 360 2 view .LVU443
 362:src/lcd.c     **** #ifdef MODIFY_BEG_SSIZE8
 2289              		.loc 1 362 9 view .LVU444
 364:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-50);
 2290              		.loc 1 364 2 view .LVU445
 364:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-50);
 2291              		.loc 1 364 5 is_stmt 0 view .LVU446
 2292 01f4 96F88830 		ldrb	r3, [r6, #136]	@ zero_extendqisi2
ARM GAS  /tmp/cc1Hm38z.s 			page 57


 365:src/lcd.c     **** 	  lcd_writeText(t20, "S:8");
 2293              		.loc 1 365 4 view .LVU447
 2294 01f8 5E4C     		ldr	r4, .L232+8
 364:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-50);
 2295              		.loc 1 364 5 view .LVU448
 2296 01fa 002B     		cmp	r3, #0
 2297 01fc 00F09C80 		beq	.L117
 365:src/lcd.c     **** 	  lcd_writeText(t20, "S:8");
 2298              		.loc 1 365 4 is_stmt 1 view .LVU449
 2299 0200 5D4B     		ldr	r3, .L232+12
 2300 0202 206B     		ldr	r0, [r4, #48]
 2301 0204 40F21D11 		movw	r1, #285
 2302 0208 1922     		movs	r2, #25
 2303 020a 9847     		blx	r3
 2304              	.LVL176:
 366:src/lcd.c     ****         }
 2305              		.loc 1 366 4 view .LVU450
 2306 020c 206B     		ldr	r0, [r4, #48]
 2307 020e 5B4B     		ldr	r3, .L232+16
 2308 0210 5C49     		ldr	r1, .L232+24
 2309 0212 9847     		blx	r3
 2310              	.LVL177:
 2311              	.L118:
 378:src/lcd.c     **** 	  lcd_setXY (t20, 325, y_ann-50);
 2312              		.loc 1 378 2 view .LVU451
 378:src/lcd.c     **** 	  lcd_setXY (t20, 325, y_ann-50);
 2313              		.loc 1 378 5 is_stmt 0 view .LVU452
 2314 0214 96F88930 		ldrb	r3, [r6, #137]	@ zero_extendqisi2
 2315 0218 53B1     		cbz	r3, .L119
 379:src/lcd.c     **** 	  lcd_writeText(t20, "PGM");
 2316              		.loc 1 379 4 is_stmt 1 view .LVU453
 2317 021a 564C     		ldr	r4, .L232+8
 2318 021c 564B     		ldr	r3, .L232+12
 2319 021e 206B     		ldr	r0, [r4, #48]
 2320 0220 40F24511 		movw	r1, #325
 2321 0224 1922     		movs	r2, #25
 2322 0226 9847     		blx	r3
 2323              	.LVL178:
 380:src/lcd.c     ****         }
 2324              		.loc 1 380 4 view .LVU454
 2325 0228 206B     		ldr	r0, [r4, #48]
 2326 022a 544B     		ldr	r3, .L232+16
 2327 022c 5649     		ldr	r1, .L232+28
 2328 022e 9847     		blx	r3
 2329              	.LVL179:
 2330              	.L119:
 388:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-30);
 2331              		.loc 1 388 2 view .LVU455
 388:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-30);
 2332              		.loc 1 388 5 is_stmt 0 view .LVU456
 2333 0230 96F88B30 		ldrb	r3, [r6, #139]	@ zero_extendqisi2
 2334 0234 53B1     		cbz	r3, .L120
 389:src/lcd.c     **** 	  lcd_writeText(t20, "RAD");
 2335              		.loc 1 389 4 is_stmt 1 view .LVU457
 2336 0236 4F4C     		ldr	r4, .L232+8
 2337 0238 4F4B     		ldr	r3, .L232+12
 2338 023a 206B     		ldr	r0, [r4, #48]
ARM GAS  /tmp/cc1Hm38z.s 			page 58


 2339 023c 40F21D11 		movw	r1, #285
 2340 0240 2D22     		movs	r2, #45
 2341 0242 9847     		blx	r3
 2342              	.LVL180:
 390:src/lcd.c     **** 	}
 2343              		.loc 1 390 4 view .LVU458
 2344 0244 206B     		ldr	r0, [r4, #48]
 2345 0246 4D4B     		ldr	r3, .L232+16
 2346 0248 5049     		ldr	r1, .L232+32
 2347 024a 9847     		blx	r3
 2348              	.LVL181:
 2349              	.L120:
 393:src/lcd.c     **** 	  lcd_setXY (t20, 325, y_ann-30);
 2350              		.loc 1 393 2 view .LVU459
 393:src/lcd.c     **** 	  lcd_setXY (t20, 325, y_ann-30);
 2351              		.loc 1 393 5 is_stmt 0 view .LVU460
 2352 024c 96F88C30 		ldrb	r3, [r6, #140]	@ zero_extendqisi2
 2353 0250 53B1     		cbz	r3, .L121
 394:src/lcd.c     **** 	  lcd_writeText(t20, "DEG");
 2354              		.loc 1 394 4 is_stmt 1 view .LVU461
 2355 0252 484C     		ldr	r4, .L232+8
 2356 0254 484B     		ldr	r3, .L232+12
 2357 0256 206B     		ldr	r0, [r4, #48]
 2358 0258 40F24511 		movw	r1, #325
 2359 025c 2D22     		movs	r2, #45
 2360 025e 9847     		blx	r3
 2361              	.LVL182:
 395:src/lcd.c     ****         }
 2362              		.loc 1 395 4 view .LVU462
 2363 0260 206B     		ldr	r0, [r4, #48]
 2364 0262 464B     		ldr	r3, .L232+16
 2365 0264 4A49     		ldr	r1, .L232+36
 2366 0266 9847     		blx	r3
 2367              	.LVL183:
 2368              	.L121:
 406:src/lcd.c     **** 	
 2369              		.loc 1 406 2 view .LVU463
 2370 0268 FFF7FEFF 		bl	draw_RPN_RCL
 2371              	.LVL184:
 409:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 2372              		.loc 1 409 9 view .LVU464
 409:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 2373              		.loc 1 409 19 view .LVU465
 412:src/lcd.c     **** 	    }
 2374              		.loc 1 412 8 is_stmt 0 view .LVU466
 2375 026c DFF80081 		ldr	r8, .L232+4
 406:src/lcd.c     **** 	
 2376              		.loc 1 406 2 view .LVU467
 2377 0270 0027     		movs	r7, #0
 2378 0272 1026     		movs	r6, #16
 2379 0274 0BF18E0A 		add	r10, fp, #142
 412:src/lcd.c     **** 	    }
 2380              		.loc 1 412 8 view .LVU468
 2381 0278 4FF0FF09 		mov	r9, #255
 2382              	.LVL185:
 2383              	.L122:
 410:src/lcd.c     **** 	    if (dots[i*6+j+MATRIX_BASE]) {
ARM GAS  /tmp/cc1Hm38z.s 			page 59


 2384              		.loc 1 410 14 is_stmt 1 view .LVU469
 2385 027c 0AEB0705 		add	r5, r10, r7
 2386 0280 5424     		movs	r4, #84
 2387              	.LVL186:
 2388              	.L124:
 411:src/lcd.c     **** 	      lcd_fill_rect( xleft-dwidth+5*i+15, ytop-(10+6*6)+j*6, 4, 5, 0xff);
 2389              		.loc 1 411 6 view .LVU470
 412:src/lcd.c     **** 	    }
 2390              		.loc 1 412 8 view .LVU471
 411:src/lcd.c     **** 	      lcd_fill_rect( xleft-dwidth+5*i+15, ytop-(10+6*6)+j*6, 4, 5, 0xff);
 2391              		.loc 1 411 14 is_stmt 0 view .LVU472
 2392 0282 15F801CB 		ldrb	ip, [r5], #1	@ zero_extendqisi2
 2393              	.LVL187:
 412:src/lcd.c     **** 	    }
 2394              		.loc 1 412 8 view .LVU473
 2395 0286 2146     		mov	r1, r4
 2396 0288 0523     		movs	r3, #5
 2397 028a 0634     		adds	r4, r4, #6
 2398 028c 0422     		movs	r2, #4
 2399 028e 3046     		mov	r0, r6
 411:src/lcd.c     **** 	      lcd_fill_rect( xleft-dwidth+5*i+15, ytop-(10+6*6)+j*6, 4, 5, 0xff);
 2400              		.loc 1 411 9 view .LVU474
 2401 0290 BCF1000F 		cmp	ip, #0
 2402 0294 02D0     		beq	.L123
 412:src/lcd.c     **** 	    }
 2403              		.loc 1 412 8 view .LVU475
 2404 0296 CDF80090 		str	r9, [sp]
 2405 029a C047     		blx	r8
 2406              	.LVL188:
 2407              	.L123:
 410:src/lcd.c     **** 	    if (dots[i*6+j+MATRIX_BASE]) {
 2408              		.loc 1 410 19 is_stmt 1 discriminator 2 view .LVU476
 410:src/lcd.c     **** 	    if (dots[i*6+j+MATRIX_BASE]) {
 2409              		.loc 1 410 14 discriminator 2 view .LVU477
 410:src/lcd.c     **** 	    if (dots[i*6+j+MATRIX_BASE]) {
 2410              		.loc 1 410 4 is_stmt 0 discriminator 2 view .LVU478
 2411 029c 782C     		cmp	r4, #120
 2412 029e F0D1     		bne	.L124
 409:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 2413              		.loc 1 409 35 is_stmt 1 discriminator 2 view .LVU479
 409:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 2414              		.loc 1 409 19 discriminator 2 view .LVU480
 2415 02a0 0637     		adds	r7, r7, #6
 2416              	.LVL189:
 409:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 2417              		.loc 1 409 9 is_stmt 0 discriminator 2 view .LVU481
 2418 02a2 B7F5DE7F 		cmp	r7, #444
 2419 02a6 06F10506 		add	r6, r6, #5
 2420 02aa E7D1     		bne	.L122
 420:src/lcd.c     **** 	    }
 2421              		.loc 1 420 8 view .LVU482
 2422 02ac DFF8C0A0 		ldr	r10, .L232+4
 2423 02b0 0BF24A2B 		addw	fp, fp, #586
 2424 02b4 4FF00008 		mov	r8, #0
 2425 02b8 1027     		movs	r7, #16
 2426              	.LVL190:
 420:src/lcd.c     **** 	    }
ARM GAS  /tmp/cc1Hm38z.s 			page 60


 2427              		.loc 1 420 8 view .LVU483
 2428 02ba 4FF0FF09 		mov	r9, #255
 2429              	.L125:
 2430              	.LVL191:
 418:src/lcd.c     **** 	    if (dots[i*6+j+MB_TOP]) {
 2431              		.loc 1 418 14 is_stmt 1 view .LVU484
 2432 02be 0BEB0805 		add	r5, fp, r8
 406:src/lcd.c     **** 	
 2433              		.loc 1 406 2 is_stmt 0 view .LVU485
 2434 02c2 1E24     		movs	r4, #30
 2435              	.LVL192:
 2436              	.L127:
 419:src/lcd.c     **** 	      lcd_fill_rect( xleft-dwidth+5*i+15, 70-(10+6*5)+j*5, 4, 4, 0xff);
 2437              		.loc 1 419 6 is_stmt 1 view .LVU486
 420:src/lcd.c     **** 	    }
 2438              		.loc 1 420 8 view .LVU487
 419:src/lcd.c     **** 	      lcd_fill_rect( xleft-dwidth+5*i+15, 70-(10+6*5)+j*5, 4, 4, 0xff);
 2439              		.loc 1 419 14 is_stmt 0 view .LVU488
 2440 02c4 15F8016B 		ldrb	r6, [r5], #1	@ zero_extendqisi2
 2441              	.LVL193:
 420:src/lcd.c     **** 	    }
 2442              		.loc 1 420 8 view .LVU489
 2443 02c8 0423     		movs	r3, #4
 2444 02ca 2146     		mov	r1, r4
 2445 02cc 1A46     		mov	r2, r3
 2446 02ce 0534     		adds	r4, r4, #5
 2447 02d0 3846     		mov	r0, r7
 419:src/lcd.c     **** 	      lcd_fill_rect( xleft-dwidth+5*i+15, 70-(10+6*5)+j*5, 4, 4, 0xff);
 2448              		.loc 1 419 9 view .LVU490
 2449 02d2 16B1     		cbz	r6, .L126
 420:src/lcd.c     **** 	    }
 2450              		.loc 1 420 8 view .LVU491
 2451 02d4 CDF80090 		str	r9, [sp]
 2452 02d8 D047     		blx	r10
 2453              	.LVL194:
 2454              	.L126:
 418:src/lcd.c     **** 	    if (dots[i*6+j+MB_TOP]) {
 2455              		.loc 1 418 19 is_stmt 1 discriminator 2 view .LVU492
 418:src/lcd.c     **** 	    if (dots[i*6+j+MB_TOP]) {
 2456              		.loc 1 418 14 discriminator 2 view .LVU493
 418:src/lcd.c     **** 	    if (dots[i*6+j+MB_TOP]) {
 2457              		.loc 1 418 4 is_stmt 0 discriminator 2 view .LVU494
 2458 02da 3C2C     		cmp	r4, #60
 2459 02dc F2D1     		bne	.L127
 417:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 2460              		.loc 1 417 29 is_stmt 1 discriminator 2 view .LVU495
 417:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 2461              		.loc 1 417 19 discriminator 2 view .LVU496
 2462 02de 08F10608 		add	r8, r8, #6
 2463              	.LVL195:
 417:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 2464              		.loc 1 417 9 is_stmt 0 discriminator 2 view .LVU497
 2465 02e2 B8F5817F 		cmp	r8, #258
 2466 02e6 07F10507 		add	r7, r7, #5
 2467 02ea E8D1     		bne	.L125
 425:src/lcd.c     **** #endif
 2468              		.loc 1 425 1 view .LVU498
ARM GAS  /tmp/cc1Hm38z.s 			page 61


 2469 02ec 03B0     		add	sp, sp, #12
 2470              		.cfi_remember_state
 2471              		.cfi_def_cfa_offset 36
 2472              		@ sp needed
 2473 02ee BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2474              	.LVL196:
 2475              	.L227:
 2476              		.cfi_restore_state
 317:src/lcd.c     ****                 }
 2477              		.loc 1 317 5 is_stmt 1 view .LVU499
 2478 02f2 8221     		movs	r1, #130
 2479 02f4 2846     		mov	r0, r5
 2480 02f6 FFF7FEFF 		bl	exp_bottom
 2481              	.LVL197:
 2482 02fa 17E7     		b	.L110
 2483              	.L226:
 314:src/lcd.c     ****                 }
 2484              		.loc 1 314 5 view .LVU500
 2485              	.LVL198:
 2486              	.LBB87:
 2487              	.LBI87:
 230:src/lcd.c     ****   exp_right_side(i-1, j+11);
 2488              		.loc 1 230 6 view .LVU501
 2489              	.LBB88:
 231:src/lcd.c     **** }
 2490              		.loc 1 231 3 view .LVU502
 2491 02fc 8D21     		movs	r1, #141
 2492 02fe 681E     		subs	r0, r5, #1
 2493 0300 FFF7FEFF 		bl	exp_right_side
 2494              	.LVL199:
 232:src/lcd.c     **** void exp_top (int i, int j) {
 2495              		.loc 1 232 1 is_stmt 0 view .LVU503
 2496 0304 0DE7     		b	.L109
 2497              	.LVL200:
 2498              	.L225:
 232:src/lcd.c     **** void exp_top (int i, int j) {
 2499              		.loc 1 232 1 view .LVU504
 2500              	.LBE88:
 2501              	.LBE87:
 311:src/lcd.c     ****                 }
 2502              		.loc 1 311 5 is_stmt 1 view .LVU505
 2503              	.LBB89:
 2504              	.LBI89:
 218:src/lcd.c     ****   exp_left_side(i, j+11);
 2505              		.loc 1 218 6 view .LVU506
 2506              	.LBB90:
 219:src/lcd.c     **** }
 2507              		.loc 1 219 3 view .LVU507
 2508 0306 8D21     		movs	r1, #141
 2509 0308 2846     		mov	r0, r5
 2510 030a FFF7FEFF 		bl	exp_left_side
 2511              	.LVL201:
 220:src/lcd.c     **** void exp_right_side (int i, int j) {
 2512              		.loc 1 220 1 is_stmt 0 view .LVU508
 2513 030e 03E7     		b	.L108
 2514              	.LVL202:
 2515              	.L224:
ARM GAS  /tmp/cc1Hm38z.s 			page 62


 220:src/lcd.c     **** void exp_right_side (int i, int j) {
 2516              		.loc 1 220 1 view .LVU509
 2517              	.LBE90:
 2518              	.LBE89:
 308:src/lcd.c     ****                 }
 2519              		.loc 1 308 5 is_stmt 1 view .LVU510
 2520 0310 8221     		movs	r1, #130
 2521 0312 2846     		mov	r0, r5
 2522 0314 FFF7FEFF 		bl	exp_middle
 2523              	.LVL203:
 2524 0318 F9E6     		b	.L107
 2525              	.L223:
 305:src/lcd.c     ****                 }
 2526              		.loc 1 305 5 view .LVU511
 2527              	.LVL204:
 2528              	.LBB91:
 2529              	.LBI91:
 227:src/lcd.c     ****   exp_right_side(i, j);
 2530              		.loc 1 227 6 view .LVU512
 2531              	.LBB92:
 228:src/lcd.c     **** }
 2532              		.loc 1 228 3 view .LVU513
 2533 031a 8221     		movs	r1, #130
 2534 031c 2846     		mov	r0, r5
 2535 031e FFF7FEFF 		bl	exp_right_side
 2536              	.LVL205:
 229:src/lcd.c     **** void exp_right_side_bottom (int i, int j) {
 2537              		.loc 1 229 1 is_stmt 0 view .LVU514
 2538 0322 EFE6     		b	.L106
 2539              	.LVL206:
 2540              	.L222:
 229:src/lcd.c     **** void exp_right_side_bottom (int i, int j) {
 2541              		.loc 1 229 1 view .LVU515
 2542              	.LBE92:
 2543              	.LBE91:
 302:src/lcd.c     ****                 }
 2544              		.loc 1 302 5 is_stmt 1 view .LVU516
 2545              	.LBB93:
 2546              	.LBI93:
 215:src/lcd.c     ****   exp_left_side(i+1, j);
 2547              		.loc 1 215 6 view .LVU517
 2548              	.LBB94:
 216:src/lcd.c     **** }
 2549              		.loc 1 216 3 view .LVU518
 2550 0324 8221     		movs	r1, #130
 2551 0326 681C     		adds	r0, r5, #1
 2552 0328 FFF7FEFF 		bl	exp_left_side
 2553              	.LVL207:
 217:src/lcd.c     **** void exp_left_side_bottom (int i, int j) {
 2554              		.loc 1 217 1 is_stmt 0 view .LVU519
 2555 032c E5E6     		b	.L105
 2556              	.LVL208:
 2557              	.L221:
 217:src/lcd.c     **** void exp_left_side_bottom (int i, int j) {
 2558              		.loc 1 217 1 view .LVU520
 2559              	.LBE94:
 2560              	.LBE93:
ARM GAS  /tmp/cc1Hm38z.s 			page 63


 299:src/lcd.c     ****                 }
 2561              		.loc 1 299 5 is_stmt 1 view .LVU521
 2562 032e 8221     		movs	r1, #130
 2563 0330 2846     		mov	r0, r5
 2564 0332 FFF7FEFF 		bl	exp_top
 2565              	.LVL209:
 2566 0336 DBE6     		b	.L104
 2567              	.LVL210:
 2568              	.L117:
 369:src/lcd.c     **** 	  lcd_writeText(t20, "S:4");
 2569              		.loc 1 369 4 view .LVU522
 2570 0338 206B     		ldr	r0, [r4, #48]
 2571 033a 0F4B     		ldr	r3, .L232+12
 2572 033c 1922     		movs	r2, #25
 2573 033e 40F21D11 		movw	r1, #285
 2574 0342 9847     		blx	r3
 2575              	.LVL211:
 370:src/lcd.c     **** 	}	  
 2576              		.loc 1 370 4 view .LVU523
 2577 0344 206B     		ldr	r0, [r4, #48]
 2578 0346 0D4B     		ldr	r3, .L232+16
 2579 0348 1249     		ldr	r1, .L232+40
 2580 034a 9847     		blx	r3
 2581              	.LVL212:
 2582 034c 62E7     		b	.L118
 2583              	.LVL213:
 2584              	.L228:
 322:src/lcd.c     ****         }
 2585              		.loc 1 322 4 view .LVU524
 2586 034e 8221     		movs	r1, #130
 2587 0350 0120     		movs	r0, #1
 2588 0352 FFF7FEFF 		bl	middle
 2589              	.LVL214:
 324:src/lcd.c     **** 	  exp_middle (xleft_exp-dwidth_exp, ytop);
 2590              		.loc 1 324 9 view .LVU525
 324:src/lcd.c     **** 	  exp_middle (xleft_exp-dwidth_exp, ytop);
 2591              		.loc 1 324 12 is_stmt 0 view .LVU526
 2592 0356 96F88230 		ldrb	r3, [r6, #130]	@ zero_extendqisi2
 2593 035a 002B     		cmp	r3, #0
 2594 035c 3FF4F6AE 		beq	.L113
 2595              	.L229:
 325:src/lcd.c     ****         }
 2596              		.loc 1 325 4 is_stmt 1 view .LVU527
 2597 0360 8221     		movs	r1, #130
 2598 0362 4FF4A370 		mov	r0, #326
 2599 0366 FFF7FEFF 		bl	exp_middle
 2600              	.LVL215:
 2601 036a EFE6     		b	.L113
 2602              	.L233:
 2603              		.align	2
 2604              	.L232:
 2605 036c 00000000 		.word	.LANCHOR0
 2606 0370 3D020008 		.word	134218301
 2607 0374 00200010 		.word	268443648
 2608 0378 6D020008 		.word	134218349
 2609 037c 7D020008 		.word	134218365
 2610 0380 00000000 		.word	.LC5
ARM GAS  /tmp/cc1Hm38z.s 			page 64


 2611 0384 08000000 		.word	.LC6
 2612 0388 10000000 		.word	.LC8
 2613 038c 14000000 		.word	.LC9
 2614 0390 18000000 		.word	.LC10
 2615 0394 0C000000 		.word	.LC7
 2616              		.cfi_endproc
 2617              	.LFE25:
 2619              		.section	.text.finish_display,"ax",%progbits
 2620              		.align	1
 2621              		.p2align 2,,3
 2622              		.global	finish_display
 2623              		.syntax unified
 2624              		.thumb
 2625              		.thumb_func
 2626              		.fpu fpv4-sp-d16
 2628              	finish_display:
 2629              	.LFB29:
 703:src/lcd.c     ****   //  lcd_clear_buf();
 2630              		.loc 1 703 27 view -0
 2631              		.cfi_startproc
 2632              		@ args = 0, pretend = 0, frame = 0
 2633              		@ frame_needed = 0, uses_anonymous_args = 0
 705:src/lcd.c     ****   show_disp();
 2634              		.loc 1 705 3 view .LVU529
 703:src/lcd.c     ****   //  lcd_clear_buf();
 2635              		.loc 1 703 27 is_stmt 0 view .LVU530
 2636 0000 10B5     		push	{r4, lr}
 2637              		.cfi_def_cfa_offset 8
 2638              		.cfi_offset 4, -8
 2639              		.cfi_offset 14, -4
 2640 0002 82B0     		sub	sp, sp, #8
 2641              		.cfi_def_cfa_offset 16
 705:src/lcd.c     ****   show_disp();
 2642              		.loc 1 705 3 view .LVU531
 2643 0004 0021     		movs	r1, #0
 2644 0006 0091     		str	r1, [sp]
 2645 0008 0846     		mov	r0, r1
 2646 000a BC23     		movs	r3, #188
 2647 000c 4FF4C872 		mov	r2, #400
 2648 0010 044C     		ldr	r4, .L236
 2649 0012 A047     		blx	r4
 2650              	.LVL216:
 706:src/lcd.c     ****   lcd_refresh();
 2651              		.loc 1 706 3 is_stmt 1 view .LVU532
 2652 0014 FFF7FEFF 		bl	show_disp
 2653              	.LVL217:
 707:src/lcd.c     **** }
 2654              		.loc 1 707 3 view .LVU533
 2655 0018 034B     		ldr	r3, .L236+4
 708:src/lcd.c     **** 
 2656              		.loc 1 708 1 is_stmt 0 view .LVU534
 2657 001a 02B0     		add	sp, sp, #8
 2658              		.cfi_def_cfa_offset 8
 2659              		@ sp needed
 2660 001c BDE81040 		pop	{r4, lr}
 2661              		.cfi_restore 14
 2662              		.cfi_restore 4
ARM GAS  /tmp/cc1Hm38z.s 			page 65


 2663              		.cfi_def_cfa_offset 0
 707:src/lcd.c     **** }
 2664              		.loc 1 707 3 view .LVU535
 2665 0020 1847     		bx	r3	@ indirect register sibling call
 2666              	.LVL218:
 2667              	.L237:
 2668 0022 00BF     		.align	2
 2669              	.L236:
 2670 0024 3D020008 		.word	134218301
 2671 0028 31020008 		.word	134218289
 2672              		.cfi_endproc
 2673              	.LFE29:
 2675              		.section	.text.finish_LEQ,"ax",%progbits
 2676              		.align	1
 2677              		.p2align 2,,3
 2678              		.global	finish_LEQ
 2679              		.syntax unified
 2680              		.thumb
 2681              		.thumb_func
 2682              		.fpu fpv4-sp-d16
 2684              	finish_LEQ:
 2685              	.LFB32:
 735:src/lcd.c     **** 
 736:src/lcd.c     **** void finish_LEQ(void) { // refreshes the RPN and RUN flags only
 2686              		.loc 1 736 23 is_stmt 1 view -0
 2687              		.cfi_startproc
 2688              		@ args = 0, pretend = 0, frame = 0
 2689              		@ frame_needed = 0, uses_anonymous_args = 0
 737:src/lcd.c     ****   draw_LEQ();  
 2690              		.loc 1 737 3 view .LVU537
 736:src/lcd.c     ****   draw_LEQ();  
 2691              		.loc 1 736 23 is_stmt 0 view .LVU538
 2692 0000 10B5     		push	{r4, lr}
 2693              		.cfi_def_cfa_offset 8
 2694              		.cfi_offset 4, -8
 2695              		.cfi_offset 14, -4
 2696              		.loc 1 737 3 view .LVU539
 2697 0002 FFF7FEFF 		bl	draw_LEQ
 2698              	.LVL219:
 738:src/lcd.c     ****   lcd_refresh();
 2699              		.loc 1 738 3 is_stmt 1 view .LVU540
 739:src/lcd.c     **** }
 2700              		.loc 1 739 1 is_stmt 0 view .LVU541
 2701 0006 BDE81040 		pop	{r4, lr}
 2702              		.cfi_restore 14
 2703              		.cfi_restore 4
 2704              		.cfi_def_cfa_offset 0
 738:src/lcd.c     ****   lcd_refresh();
 2705              		.loc 1 738 3 view .LVU542
 2706 000a 014B     		ldr	r3, .L240
 2707 000c 1847     		bx	r3	@ indirect register sibling call
 2708              	.LVL220:
 2709              	.L241:
 2710 000e 00BF     		.align	2
 2711              	.L240:
 2712 0010 31020008 		.word	134218289
 2713              		.cfi_endproc
ARM GAS  /tmp/cc1Hm38z.s 			page 66


 2714              	.LFE32:
 2716              		.section	.text.finish_RPN,"ax",%progbits
 2717              		.align	1
 2718              		.p2align 2,,3
 2719              		.global	finish_RPN
 2720              		.syntax unified
 2721              		.thumb
 2722              		.thumb_func
 2723              		.fpu fpv4-sp-d16
 2725              	finish_RPN:
 2726              	.LFB33:
 740:src/lcd.c     ****   
 741:src/lcd.c     **** void finish_RPN(void) { // refreshes the RPN and RUN flags only
 2727              		.loc 1 741 23 is_stmt 1 view -0
 2728              		.cfi_startproc
 2729              		@ args = 0, pretend = 0, frame = 0
 2730              		@ frame_needed = 0, uses_anonymous_args = 0
 742:src/lcd.c     ****   draw_RPN_RCL();  
 2731              		.loc 1 742 3 view .LVU544
 741:src/lcd.c     ****   draw_RPN_RCL();  
 2732              		.loc 1 741 23 is_stmt 0 view .LVU545
 2733 0000 10B5     		push	{r4, lr}
 2734              		.cfi_def_cfa_offset 8
 2735              		.cfi_offset 4, -8
 2736              		.cfi_offset 14, -4
 2737              		.loc 1 742 3 view .LVU546
 2738 0002 FFF7FEFF 		bl	draw_RPN_RCL
 2739              	.LVL221:
 743:src/lcd.c     ****   lcd_refresh();
 2740              		.loc 1 743 3 is_stmt 1 view .LVU547
 744:src/lcd.c     **** }
 2741              		.loc 1 744 1 is_stmt 0 view .LVU548
 2742 0006 BDE81040 		pop	{r4, lr}
 2743              		.cfi_restore 14
 2744              		.cfi_restore 4
 2745              		.cfi_def_cfa_offset 0
 743:src/lcd.c     ****   lcd_refresh();
 2746              		.loc 1 743 3 view .LVU549
 2747 000a 014B     		ldr	r3, .L244
 2748 000c 1847     		bx	r3	@ indirect register sibling call
 2749              	.LVL222:
 2750              	.L245:
 2751 000e 00BF     		.align	2
 2752              	.L244:
 2753 0010 31020008 		.word	134218289
 2754              		.cfi_endproc
 2755              	.LFE33:
 2757              		.section	.text.do_all_dots,"ax",%progbits
 2758              		.align	1
 2759              		.p2align 2,,3
 2760              		.global	do_all_dots
 2761              		.syntax unified
 2762              		.thumb
 2763              		.thumb_func
 2764              		.fpu fpv4-sp-d16
 2766              	do_all_dots:
 2767              	.LFB34:
ARM GAS  /tmp/cc1Hm38z.s 			page 67


 745:src/lcd.c     **** 
 746:src/lcd.c     **** extern void all_menu_dots (void);
 747:src/lcd.c     **** 
 748:src/lcd.c     **** void do_all_dots(void) {
 2768              		.loc 1 748 24 is_stmt 1 view -0
 2769              		.cfi_startproc
 2770              		@ args = 0, pretend = 0, frame = 0
 2771              		@ frame_needed = 0, uses_anonymous_args = 0
 749:src/lcd.c     ****   for (int i=0; i<TOP_DOTS; i++) {
 2772              		.loc 1 749 3 view .LVU551
 2773              	.LBB95:
 2774              		.loc 1 749 8 view .LVU552
 2775              	.LVL223:
 2776              		.loc 1 749 17 view .LVU553
 2777              	.LBE95:
 748:src/lcd.c     ****   for (int i=0; i<TOP_DOTS; i++) {
 2778              		.loc 1 748 24 is_stmt 0 view .LVU554
 2779 0000 08B5     		push	{r3, lr}
 2780              		.cfi_def_cfa_offset 8
 2781              		.cfi_offset 3, -8
 2782              		.cfi_offset 14, -4
 2783 0002 094B     		ldr	r3, .L250
 2784              	.LBB100:
 2785              	.LBB96:
 2786              	.LBB97:
  58:src/lcd.c     **** }
 2787              		.loc 1 58 17 view .LVU555
 2788 0004 0121     		movs	r1, #1
 2789 0006 03F55372 		add	r2, r3, #844
 2790              	.LVL224:
 2791              	.L247:
  58:src/lcd.c     **** }
 2792              		.loc 1 58 17 view .LVU556
 2793              	.LBE97:
 2794              	.LBE96:
 750:src/lcd.c     ****     set_dot(i);
 2795              		.loc 1 750 5 is_stmt 1 view .LVU557
 2796              	.LBB99:
 2797              	.LBI96:
  57:src/lcd.c     ****         dots[n] = 1;
 2798              		.loc 1 57 6 view .LVU558
 2799              	.LBB98:
  58:src/lcd.c     **** }
 2800              		.loc 1 58 9 view .LVU559
  58:src/lcd.c     **** }
 2801              		.loc 1 58 17 is_stmt 0 view .LVU560
 2802 000a 03F8011F 		strb	r1, [r3, #1]!
 2803              	.LVL225:
  58:src/lcd.c     **** }
 2804              		.loc 1 58 17 view .LVU561
 2805              	.LBE98:
 2806              	.LBE99:
 749:src/lcd.c     ****     set_dot(i);
 2807              		.loc 1 749 29 is_stmt 1 view .LVU562
 749:src/lcd.c     ****     set_dot(i);
 2808              		.loc 1 749 17 view .LVU563
 749:src/lcd.c     ****     set_dot(i);
ARM GAS  /tmp/cc1Hm38z.s 			page 68


 2809              		.loc 1 749 3 is_stmt 0 view .LVU564
 2810 000e 9342     		cmp	r3, r2
 2811 0010 FBD1     		bne	.L247
 2812              	.LBE100:
 751:src/lcd.c     ****   }
 752:src/lcd.c     ****   all_menu_dots();
 2813              		.loc 1 752 3 is_stmt 1 view .LVU565
 2814 0012 FFF7FEFF 		bl	all_menu_dots
 2815              	.LVL226:
 753:src/lcd.c     ****   finish_display();
 2816              		.loc 1 753 3 view .LVU566
 2817 0016 FFF7FEFF 		bl	finish_display
 2818              	.LVL227:
 754:src/lcd.c     ****   clr_dot(RCL_annun);
 2819              		.loc 1 754 3 view .LVU567
 2820              	.LBB101:
 2821              	.LBI101:
  60:src/lcd.c     ****         dots[n] = 0;
 2822              		.loc 1 60 6 view .LVU568
 2823              	.LBB102:
  61:src/lcd.c     **** }
 2824              		.loc 1 61 9 view .LVU569
  61:src/lcd.c     **** }
 2825              		.loc 1 61 17 is_stmt 0 view .LVU570
 2826 001a 044B     		ldr	r3, .L250+4
 2827 001c 0022     		movs	r2, #0
 2828 001e 83F88A20 		strb	r2, [r3, #138]
 2829              	.LVL228:
  61:src/lcd.c     **** }
 2830              		.loc 1 61 17 view .LVU571
 2831              	.LBE102:
 2832              	.LBE101:
 755:src/lcd.c     ****   clr_dot(LIT_EQ);
 2833              		.loc 1 755 3 is_stmt 1 view .LVU572
 2834              	.LBB103:
 2835              	.LBI103:
  60:src/lcd.c     ****         dots[n] = 0;
 2836              		.loc 1 60 6 view .LVU573
 2837              	.LBB104:
  61:src/lcd.c     **** }
 2838              		.loc 1 61 9 view .LVU574
  61:src/lcd.c     **** }
 2839              		.loc 1 61 17 is_stmt 0 view .LVU575
 2840 0022 83F88420 		strb	r2, [r3, #132]
 2841              	.LVL229:
  61:src/lcd.c     **** }
 2842              		.loc 1 61 17 view .LVU576
 2843              	.LBE104:
 2844              	.LBE103:
 756:src/lcd.c     **** }
 2845              		.loc 1 756 1 view .LVU577
 2846 0026 08BD     		pop	{r3, pc}
 2847              	.L251:
 2848              		.align	2
 2849              	.L250:
 2850 0028 FFFFFFFF 		.word	.LANCHOR0-1
 2851 002c 00000000 		.word	.LANCHOR0
ARM GAS  /tmp/cc1Hm38z.s 			page 69


 2852              		.cfi_endproc
 2853              	.LFE34:
 2855              		.section	.text.show_progtrace,"ax",%progbits
 2856              		.align	1
 2857              		.p2align 2,,3
 2858              		.global	show_progtrace
 2859              		.syntax unified
 2860              		.thumb
 2861              		.thumb_func
 2862              		.fpu fpv4-sp-d16
 2864              	show_progtrace:
 2865              	.LVL230:
 2866              	.LFB35:
 757:src/lcd.c     **** #endif
 758:src/lcd.c     **** 
 759:src/lcd.c     **** #ifdef CONSOLE
 760:src/lcd.c     **** #ifndef DM42
 761:src/lcd.c     **** /* Take a string and cleanse all non-printing characters from it.
 762:src/lcd.c     ****  * Replace them with the usual [xxx] sequences.
 763:src/lcd.c     ****  */
 764:src/lcd.c     **** extern const char *pretty(unsigned char);
 765:src/lcd.c     **** 
 766:src/lcd.c     **** static char *cleanse(const char *s) {
 767:src/lcd.c     ****         static char res[50];
 768:src/lcd.c     ****         char *p;
 769:src/lcd.c     **** 
 770:src/lcd.c     ****         for (p=res; *s != '\0'; s++) {
 771:src/lcd.c     ****                 unsigned char c = 0xff & *s;
 772:src/lcd.c     ****                 const char *m = pretty(c);
 773:src/lcd.c     ****                 if (m == NULL) {
 774:src/lcd.c     ****                         *p++ = c;
 775:src/lcd.c     ****                 } else {
 776:src/lcd.c     ****                         *p++ = '[';
 777:src/lcd.c     ****                         p = scopy_char(p, m, ']');
 778:src/lcd.c     ****                 }
 779:src/lcd.c     ****         }
 780:src/lcd.c     ****         *p = '\0';
 781:src/lcd.c     ****         return res;
 782:src/lcd.c     **** }
 783:src/lcd.c     **** #endif
 784:src/lcd.c     **** #endif
 785:src/lcd.c     **** 
 786:src/lcd.c     **** void show_progtrace(char *buf) {
 2867              		.loc 1 786 32 is_stmt 1 view -0
 2868              		.cfi_startproc
 2869              		@ args = 0, pretend = 0, frame = 0
 2870              		@ frame_needed = 0, uses_anonymous_args = 0
 2871              		@ link register save eliminated.
 787:src/lcd.c     **** #ifndef DM42
 788:src/lcd.c     **** #ifdef CONSOLE
 789:src/lcd.c     ****         int pc = state_pc();
 790:src/lcd.c     **** 
 791:src/lcd.c     **** #ifdef USECURSES
 792:src/lcd.c     ****         int i;
 793:src/lcd.c     **** 
 794:src/lcd.c     ****         if (!State2.flags)
 795:src/lcd.c     ****                 return;
ARM GAS  /tmp/cc1Hm38z.s 			page 70


 796:src/lcd.c     **** 
 797:src/lcd.c     ****         for (i=4; i>0 && pc >= 0; i--) {
 798:src/lcd.c     ****                 MOVE(0, i);
 799:src/lcd.c     ****                 if (pc) {
 800:src/lcd.c     ****                         opcode op = getprog(pc);
 801:src/lcd.c     ****                         PRINTF("%03d %08x: %s", pc, op, cleanse(prt(op, buf)));
 802:src/lcd.c     ****                 } else
 803:src/lcd.c     ****                         PRINTF("000:");
 804:src/lcd.c     ****                 pc = do_dec(pc, 1);
 805:src/lcd.c     ****         }
 806:src/lcd.c     **** #endif
 807:src/lcd.c     **** #endif
 808:src/lcd.c     **** #endif       
 809:src/lcd.c     **** }
 2872              		.loc 1 809 1 view .LVU579
 2873 0000 7047     		bx	lr
 2874              		.cfi_endproc
 2875              	.LFE35:
 2877 0002 00BF     		.section	.bss.dots,"aw",%nobits
 2878              		.align	2
 2879              		.set	.LANCHOR0,. + 0
 2882              	dots:
 2883 0000 00000000 		.space	844
 2883      00000000 
 2883      00000000 
 2883      00000000 
 2883      00000000 
 2884              		.text
 2885              	.Letext0:
 2886              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 2887              		.file 3 "dmcp/ff_ifc.h"
 2888              		.file 4 "dmcp/dmcp.h"
 2889              		.file 5 "src/decNumber/decContext.h"
 2890              		.file 6 "src/decNumber/decNumber.h"
 2891              		.file 7 "src/decNumber/decimal64.h"
 2892              		.file 8 "src/decNumber/decimal128.h"
 2893              		.file 9 "src/xeq.h"
 2894              		.file 10 "src/data.h"
 2895              		.file 11 "src/display.h"
 2896              		.file 12 "src/storage.h"
 2897              		.file 13 "src/pretty.h"
ARM GAS  /tmp/cc1Hm38z.s 			page 71


DEFINED SYMBOLS
                            *ABS*:0000000000000000 lcd.c
     /tmp/cc1Hm38z.s:18     .text.set_dot:0000000000000000 $t
     /tmp/cc1Hm38z.s:27     .text.set_dot:0000000000000000 set_dot
     /tmp/cc1Hm38z.s:46     .text.set_dot:0000000000000008 $d
     /tmp/cc1Hm38z.s:51     .text.clr_dot:0000000000000000 $t
     /tmp/cc1Hm38z.s:59     .text.clr_dot:0000000000000000 clr_dot
     /tmp/cc1Hm38z.s:77     .text.clr_dot:0000000000000008 $d
     /tmp/cc1Hm38z.s:82     .text.is_dot:0000000000000000 $t
     /tmp/cc1Hm38z.s:90     .text.is_dot:0000000000000000 is_dot
     /tmp/cc1Hm38z.s:109    .text.is_dot:0000000000000008 $d
     /tmp/cc1Hm38z.s:114    .text.setuptty:0000000000000000 $t
     /tmp/cc1Hm38z.s:122    .text.setuptty:0000000000000000 setuptty
     /tmp/cc1Hm38z.s:140    .text.reset_disp:0000000000000000 $t
     /tmp/cc1Hm38z.s:148    .text.reset_disp:0000000000000000 reset_disp
     /tmp/cc1Hm38z.s:346    .text.reset_disp:0000000000000068 $d
     /tmp/cc1Hm38z.s:351    .text.left_side:0000000000000000 $t
     /tmp/cc1Hm38z.s:359    .text.left_side:0000000000000000 left_side
     /tmp/cc1Hm38z.s:442    .text.left_side:0000000000000054 $d
     /tmp/cc1Hm38z.s:447    .text.left_side_top:0000000000000000 $t
     /tmp/cc1Hm38z.s:455    .text.left_side_top:0000000000000000 left_side_top
     /tmp/cc1Hm38z.s:471    .text.left_side_bottom:0000000000000000 $t
     /tmp/cc1Hm38z.s:479    .text.left_side_bottom:0000000000000000 left_side_bottom
     /tmp/cc1Hm38z.s:501    .text.right_side:0000000000000000 $t
     /tmp/cc1Hm38z.s:509    .text.right_side:0000000000000000 right_side
     /tmp/cc1Hm38z.s:591    .text.right_side:000000000000005c $d
     /tmp/cc1Hm38z.s:596    .text.right_side_top:0000000000000000 $t
     /tmp/cc1Hm38z.s:604    .text.right_side_top:0000000000000000 right_side_top
     /tmp/cc1Hm38z.s:620    .text.right_side_bottom:0000000000000000 $t
     /tmp/cc1Hm38z.s:628    .text.right_side_bottom:0000000000000000 right_side_bottom
     /tmp/cc1Hm38z.s:650    .text.top:0000000000000000 $t
     /tmp/cc1Hm38z.s:658    .text.top:0000000000000000 top
     /tmp/cc1Hm38z.s:725    .text.top:0000000000000040 $d
     /tmp/cc1Hm38z.s:730    .text.middle:0000000000000000 $t
     /tmp/cc1Hm38z.s:738    .text.middle:0000000000000000 middle
     /tmp/cc1Hm38z.s:808    .text.middle:0000000000000040 $d
     /tmp/cc1Hm38z.s:814    .text.bottom:0000000000000000 $t
     /tmp/cc1Hm38z.s:822    .text.bottom:0000000000000000 bottom
     /tmp/cc1Hm38z.s:892    .text.bottom:0000000000000048 $d
     /tmp/cc1Hm38z.s:897    .text.decimal:0000000000000000 $t
     /tmp/cc1Hm38z.s:905    .text.decimal:0000000000000000 decimal
     /tmp/cc1Hm38z.s:942    .text.decimal:0000000000000018 $d
     /tmp/cc1Hm38z.s:947    .text.comma:0000000000000000 $t
     /tmp/cc1Hm38z.s:955    .text.comma:0000000000000000 comma
     /tmp/cc1Hm38z.s:1009   .text.comma:000000000000002c $d
     /tmp/cc1Hm38z.s:1014   .text.exp_left_side:0000000000000000 $t
     /tmp/cc1Hm38z.s:1022   .text.exp_left_side:0000000000000000 exp_left_side
     /tmp/cc1Hm38z.s:1089   .text.exp_left_side:0000000000000040 $d
     /tmp/cc1Hm38z.s:1094   .text.exp_left_side_top:0000000000000000 $t
     /tmp/cc1Hm38z.s:1102   .text.exp_left_side_top:0000000000000000 exp_left_side_top
     /tmp/cc1Hm38z.s:1121   .text.exp_left_side_bottom:0000000000000000 $t
     /tmp/cc1Hm38z.s:1129   .text.exp_left_side_bottom:0000000000000000 exp_left_side_bottom
     /tmp/cc1Hm38z.s:1148   .text.exp_right_side:0000000000000000 $t
     /tmp/cc1Hm38z.s:1156   .text.exp_right_side:0000000000000000 exp_right_side
     /tmp/cc1Hm38z.s:1223   .text.exp_right_side:0000000000000044 $d
     /tmp/cc1Hm38z.s:1228   .text.exp_right_side_top:0000000000000000 $t
     /tmp/cc1Hm38z.s:1236   .text.exp_right_side_top:0000000000000000 exp_right_side_top
ARM GAS  /tmp/cc1Hm38z.s 			page 72


     /tmp/cc1Hm38z.s:1252   .text.exp_right_side_bottom:0000000000000000 $t
     /tmp/cc1Hm38z.s:1260   .text.exp_right_side_bottom:0000000000000000 exp_right_side_bottom
     /tmp/cc1Hm38z.s:1282   .text.exp_top:0000000000000000 $t
     /tmp/cc1Hm38z.s:1290   .text.exp_top:0000000000000000 exp_top
     /tmp/cc1Hm38z.s:1349   .text.exp_top:0000000000000034 $d
     /tmp/cc1Hm38z.s:1354   .text.exp_bottom:0000000000000000 $t
     /tmp/cc1Hm38z.s:1362   .text.exp_bottom:0000000000000000 exp_bottom
     /tmp/cc1Hm38z.s:1424   .text.exp_bottom:0000000000000038 $d
     /tmp/cc1Hm38z.s:1429   .text.exp_middle:0000000000000000 $t
     /tmp/cc1Hm38z.s:1437   .text.exp_middle:0000000000000000 exp_middle
     /tmp/cc1Hm38z.s:1503   .text.exp_middle:0000000000000040 $d
     /tmp/cc1Hm38z.s:1508   .text.show_stack:0000000000000000 $t
     /tmp/cc1Hm38z.s:1516   .text.show_stack:0000000000000000 show_stack
     /tmp/cc1Hm38z.s:1527   .text.show_flags:0000000000000000 $t
     /tmp/cc1Hm38z.s:1535   .text.show_flags:0000000000000000 show_flags
     /tmp/cc1Hm38z.s:1546   .text.wait_for_display:0000000000000000 $t
     /tmp/cc1Hm38z.s:1554   .text.wait_for_display:0000000000000000 wait_for_display
     /tmp/cc1Hm38z.s:1567   .rodata.draw_RPN_RCL.str1.4:0000000000000000 $d
     /tmp/cc1Hm38z.s:1577   .text.draw_RPN_RCL:0000000000000000 $t
     /tmp/cc1Hm38z.s:1585   .text.draw_RPN_RCL:0000000000000000 draw_RPN_RCL
     /tmp/cc1Hm38z.s:1685   .text.draw_RPN_RCL:000000000000006c $d
     /tmp/cc1Hm38z.s:1697   .rodata.draw_LEQ.str1.4:0000000000000000 $d
     /tmp/cc1Hm38z.s:1704   .text.draw_LEQ:0000000000000000 $t
     /tmp/cc1Hm38z.s:1712   .text.draw_LEQ:0000000000000000 draw_LEQ
     /tmp/cc1Hm38z.s:1806   .text.draw_LEQ:0000000000000044 $d
     /tmp/cc1Hm38z.s:1819   .rodata.show_disp.str1.4:0000000000000000 $d
     /tmp/cc1Hm38z.s:1838   .text.show_disp:0000000000000000 $t
     /tmp/cc1Hm38z.s:1846   .text.show_disp:0000000000000000 show_disp
     /tmp/cc1Hm38z.s:2087   .text.show_disp:00000000000000c4 $d
     /tmp/cc1Hm38z.s:2091   .text.show_disp:00000000000000cc $t
     /tmp/cc1Hm38z.s:2605   .text.show_disp:000000000000036c $d
     /tmp/cc1Hm38z.s:2620   .text.finish_display:0000000000000000 $t
     /tmp/cc1Hm38z.s:2628   .text.finish_display:0000000000000000 finish_display
     /tmp/cc1Hm38z.s:2670   .text.finish_display:0000000000000024 $d
     /tmp/cc1Hm38z.s:2676   .text.finish_LEQ:0000000000000000 $t
     /tmp/cc1Hm38z.s:2684   .text.finish_LEQ:0000000000000000 finish_LEQ
     /tmp/cc1Hm38z.s:2712   .text.finish_LEQ:0000000000000010 $d
     /tmp/cc1Hm38z.s:2717   .text.finish_RPN:0000000000000000 $t
     /tmp/cc1Hm38z.s:2725   .text.finish_RPN:0000000000000000 finish_RPN
     /tmp/cc1Hm38z.s:2753   .text.finish_RPN:0000000000000010 $d
     /tmp/cc1Hm38z.s:2758   .text.do_all_dots:0000000000000000 $t
     /tmp/cc1Hm38z.s:2766   .text.do_all_dots:0000000000000000 do_all_dots
     /tmp/cc1Hm38z.s:2850   .text.do_all_dots:0000000000000028 $d
     /tmp/cc1Hm38z.s:2856   .text.show_progtrace:0000000000000000 $t
     /tmp/cc1Hm38z.s:2864   .text.show_progtrace:0000000000000000 show_progtrace
     /tmp/cc1Hm38z.s:2878   .bss.dots:0000000000000000 $d
     /tmp/cc1Hm38z.s:2882   .bss.dots:0000000000000000 dots

UNDEFINED SYMBOLS
dot
main_ram
all_menu_dots

ARM GAS  /tmp/ccFPIr9f.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"lcd.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_dot,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.global	set_dot
  21              		.arch armv7e-m
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  25              		.fpu fpv4-sp-d16
  27              	set_dot:
  28              	.LVL0:
  29              	.LFB0:
  30              		.file 1 "src/lcd.c"
   1:src/lcd.c     **** /* This file is part of 34S.
   2:src/lcd.c     ****  * 
   3:src/lcd.c     ****  * 34S is free software: you can redistribute it and/or modify
   4:src/lcd.c     ****  * it under the terms of the GNU General Public License as published by
   5:src/lcd.c     ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/lcd.c     ****  * (at your option) any later version.
   7:src/lcd.c     ****  * 
   8:src/lcd.c     ****  * 34S is distributed in the hope that it will be useful,
   9:src/lcd.c     ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/lcd.c     ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/lcd.c     ****  * GNU General Public License for more details.
  12:src/lcd.c     ****  * 
  13:src/lcd.c     ****  * You should have received a copy of the GNU General Public License
  14:src/lcd.c     ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/lcd.c     ****  */
  16:src/lcd.c     **** 
  17:src/lcd.c     **** #ifdef DM42
  18:src/lcd.c     **** #include "dmcp.h"
  19:src/lcd.c     **** #endif
  20:src/lcd.c     **** 
  21:src/lcd.c     **** #define DM42SAFE
  22:src/lcd.c     **** #include "lcd.h"
  23:src/lcd.c     **** #include "display.h"
  24:src/lcd.c     **** #include "xeq.h"
  25:src/lcd.c     **** 
  26:src/lcd.c     **** #if defined(INCLUDE_C_LOCK) || defined(INFRARED)
  27:src/lcd.c     **** #include "data.h"
  28:src/lcd.c     **** #include "storage.h"
ARM GAS  /tmp/ccFPIr9f.s 			page 2


  29:src/lcd.c     **** #endif
  30:src/lcd.c     **** 
  31:src/lcd.c     **** #undef DM42SAFE
  32:src/lcd.c     **** 
  33:src/lcd.c     **** #include "pretty.h"
  34:src/lcd.c     **** 
  35:src/lcd.c     **** 
  36:src/lcd.c     **** #if defined(USECURSES) || defined(DM42) // want this in DM42
  37:src/lcd.c     **** static unsigned char dots[TOP_DOTS];
  38:src/lcd.c     **** #endif
  39:src/lcd.c     **** 
  40:src/lcd.c     **** #if defined(USECURSES) && !defined(DM42)
  41:src/lcd.c     **** static void dispreg(const char n, int index) {
  42:src/lcd.c     ****   char buf[64];
  43:src/lcd.c     ****         if (is_intmode())
  44:src/lcd.c     ****                 sprintf(buf, "%llx", (unsigned long long int)get_reg_n_int(index));
  45:src/lcd.c     ****         else {
  46:src/lcd.c     **** 		if (is_dblmode())
  47:src/lcd.c     **** 			decimal128ToString(&(get_reg_n(index)->d), buf);
  48:src/lcd.c     **** 		else
  49:src/lcd.c     **** 			decimal64ToString(&(get_reg_n(index)->s), buf);
  50:src/lcd.c     **** 	}
  51:src/lcd.c     ****         PRINTF("%c: %s", n, buf);
  52:src/lcd.c     **** }
  53:src/lcd.c     **** #endif
  54:src/lcd.c     **** 
  55:src/lcd.c     **** #if defined(USECURSES) || defined(DM42) // want this in DM42
  56:src/lcd.c     **** /* Some wrapper routines to set segments of the display */
  57:src/lcd.c     **** void set_dot(int n) {
  31              		.loc 1 57 21 view -0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 0
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  35              		@ link register save eliminated.
  58:src/lcd.c     ****         dots[n] = 1;
  36              		.loc 1 58 9 view .LVU1
  37              		.loc 1 58 17 is_stmt 0 view .LVU2
  38 0000 014B     		ldr	r3, .L3
  39 0002 0122     		movs	r2, #1
  40 0004 1A54     		strb	r2, [r3, r0]
  59:src/lcd.c     **** }
  41              		.loc 1 59 1 view .LVU3
  42 0006 7047     		bx	lr
  43              	.L4:
  44              		.align	2
  45              	.L3:
  46 0008 00000000 		.word	.LANCHOR0
  47              		.cfi_endproc
  48              	.LFE0:
  50              		.section	.text.clr_dot,"ax",%progbits
  51              		.align	1
  52              		.p2align 2,,3
  53              		.global	clr_dot
  54              		.syntax unified
  55              		.thumb
  56              		.thumb_func
  57              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccFPIr9f.s 			page 3


  59              	clr_dot:
  60              	.LVL1:
  61              	.LFB1:
  60:src/lcd.c     **** void clr_dot(int n) {
  62              		.loc 1 60 21 is_stmt 1 view -0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  61:src/lcd.c     ****         dots[n] = 0;
  67              		.loc 1 61 9 view .LVU5
  68              		.loc 1 61 17 is_stmt 0 view .LVU6
  69 0000 014B     		ldr	r3, .L6
  70 0002 0022     		movs	r2, #0
  71 0004 1A54     		strb	r2, [r3, r0]
  62:src/lcd.c     **** }
  72              		.loc 1 62 1 view .LVU7
  73 0006 7047     		bx	lr
  74              	.L7:
  75              		.align	2
  76              	.L6:
  77 0008 00000000 		.word	.LANCHOR0
  78              		.cfi_endproc
  79              	.LFE1:
  81              		.section	.text.is_dot,"ax",%progbits
  82              		.align	1
  83              		.p2align 2,,3
  84              		.global	is_dot
  85              		.syntax unified
  86              		.thumb
  87              		.thumb_func
  88              		.fpu fpv4-sp-d16
  90              	is_dot:
  91              	.LVL2:
  92              	.LFB2:
  63:src/lcd.c     **** int is_dot(int n) {
  93              		.loc 1 63 19 is_stmt 1 view -0
  94              		.cfi_startproc
  95              		@ args = 0, pretend = 0, frame = 0
  96              		@ frame_needed = 0, uses_anonymous_args = 0
  97              		@ link register save eliminated.
  64:src/lcd.c     **** 	return dots[n];
  98              		.loc 1 64 2 view .LVU9
  99              		.loc 1 64 13 is_stmt 0 view .LVU10
 100 0000 014B     		ldr	r3, .L9
  65:src/lcd.c     **** }
 101              		.loc 1 65 1 view .LVU11
 102 0002 185C     		ldrb	r0, [r3, r0]	@ zero_extendqisi2
 103              	.LVL3:
 104              		.loc 1 65 1 view .LVU12
 105 0004 7047     		bx	lr
 106              	.L10:
 107 0006 00BF     		.align	2
 108              	.L9:
 109 0008 00000000 		.word	.LANCHOR0
 110              		.cfi_endproc
 111              	.LFE2:
ARM GAS  /tmp/ccFPIr9f.s 			page 4


 113              		.section	.text.setuptty,"ax",%progbits
 114              		.align	1
 115              		.p2align 2,,3
 116              		.global	setuptty
 117              		.syntax unified
 118              		.thumb
 119              		.thumb_func
 120              		.fpu fpv4-sp-d16
 122              	setuptty:
 123              	.LVL4:
 124              	.LFB3:
  66:src/lcd.c     **** #endif
  67:src/lcd.c     **** 
  68:src/lcd.c     **** int setuptty(int reset) {
 125              		.loc 1 68 25 is_stmt 1 view -0
 126              		.cfi_startproc
 127              		@ args = 0, pretend = 0, frame = 0
 128              		@ frame_needed = 0, uses_anonymous_args = 0
 129              		@ link register save eliminated.
  69:src/lcd.c     **** #ifdef CONSOLE
  70:src/lcd.c     **** #if defined(USECURSES) && !defined(DM42) //don't want this in DM42
  71:src/lcd.c     ****         if (reset)
  72:src/lcd.c     ****                 endwin();
  73:src/lcd.c     ****         else {
  74:src/lcd.c     ****                 initscr();
  75:src/lcd.c     ****                 cbreak();
  76:src/lcd.c     ****                 noecho();
  77:src/lcd.c     ****                 //keypad(stdscr, TRUE);
  78:src/lcd.c     **** 				}
  79:src/lcd.c     **** #endif
  80:src/lcd.c     **** #endif
  81:src/lcd.c     ****         return 0;
 130              		.loc 1 81 9 view .LVU14
  82:src/lcd.c     **** }
 131              		.loc 1 82 1 is_stmt 0 view .LVU15
 132 0000 0020     		movs	r0, #0
 133              	.LVL5:
 134              		.loc 1 82 1 view .LVU16
 135 0002 7047     		bx	lr
 136              		.cfi_endproc
 137              	.LFE3:
 139              		.section	.text.reset_disp,"ax",%progbits
 140              		.align	1
 141              		.p2align 2,,3
 142              		.global	reset_disp
 143              		.syntax unified
 144              		.thumb
 145              		.thumb_func
 146              		.fpu fpv4-sp-d16
 148              	reset_disp:
 149              	.LFB4:
  83:src/lcd.c     **** 
  84:src/lcd.c     **** 
  85:src/lcd.c     **** void reset_disp(void) {
 150              		.loc 1 85 23 is_stmt 1 view -0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccFPIr9f.s 			page 5


 153              		@ frame_needed = 0, uses_anonymous_args = 0
  86:src/lcd.c     **** #ifdef DM42
  87:src/lcd.c     **** 	int rcl = is_dot(RCL_annun);
 154              		.loc 1 87 2 view .LVU18
 155              	.LVL6:
 156              	.LBB37:
 157              	.LBI37:
  63:src/lcd.c     **** 	return dots[n];
 158              		.loc 1 63 5 view .LVU19
 159              	.LBB38:
  64:src/lcd.c     **** }
 160              		.loc 1 64 2 view .LVU20
 161              	.LBE38:
 162              	.LBE37:
  85:src/lcd.c     **** #ifdef DM42
 163              		.loc 1 85 23 is_stmt 0 view .LVU21
 164 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 165              		.cfi_def_cfa_offset 32
 166              		.cfi_offset 4, -32
 167              		.cfi_offset 5, -28
 168              		.cfi_offset 6, -24
 169              		.cfi_offset 7, -20
 170              		.cfi_offset 8, -16
 171              		.cfi_offset 9, -12
 172              		.cfi_offset 10, -8
 173              		.cfi_offset 14, -4
 174              	.LBB41:
 175              	.LBB39:
  64:src/lcd.c     **** }
 176              		.loc 1 64 13 view .LVU22
 177 0004 1848     		ldr	r0, .L20
 178              	.LBE39:
 179              	.LBE41:
 180              	.LBB42:
 181              	.LBB43:
 182 0006 6FF08303 		mvn	r3, #131
 183              	.LBE43:
 184              	.LBE42:
 185              	.LBB45:
 186              	.LBB40:
 187 000a 90F88A10 		ldrb	r1, [r0, #138]	@ zero_extendqisi2
 188              	.LVL7:
  64:src/lcd.c     **** }
 189              		.loc 1 64 13 view .LVU23
 190              	.LBE40:
 191              	.LBE45:
  88:src/lcd.c     **** 	int bat = is_dot(BATTERY);
 192              		.loc 1 88 2 is_stmt 1 view .LVU24
 193              	.LBB46:
 194              	.LBI46:
  63:src/lcd.c     **** 	return dots[n];
 195              		.loc 1 63 5 view .LVU25
 196              	.LBB47:
  64:src/lcd.c     **** }
 197              		.loc 1 64 2 view .LVU26
  64:src/lcd.c     **** }
 198              		.loc 1 64 13 is_stmt 0 view .LVU27
ARM GAS  /tmp/ccFPIr9f.s 			page 6


 199 000e 90F887A0 		ldrb	r10, [r0, #135]	@ zero_extendqisi2
 200              	.LVL8:
  64:src/lcd.c     **** }
 201              		.loc 1 64 13 view .LVU28
 202              	.LBE47:
 203              	.LBE46:
  89:src/lcd.c     **** 	int leq = is_dot(LIT_EQ);
 204              		.loc 1 89 2 is_stmt 1 view .LVU29
 205              	.LBB48:
 206              	.LBI48:
  63:src/lcd.c     **** 	return dots[n];
 207              		.loc 1 63 5 view .LVU30
 208              	.LBB49:
  64:src/lcd.c     **** }
 209              		.loc 1 64 2 view .LVU31
  64:src/lcd.c     **** }
 210              		.loc 1 64 13 is_stmt 0 view .LVU32
 211 0012 90F88490 		ldrb	r9, [r0, #132]	@ zero_extendqisi2
 212              	.LVL9:
  64:src/lcd.c     **** }
 213              		.loc 1 64 13 view .LVU33
 214              	.LBE49:
 215              	.LBE48:
  90:src/lcd.c     **** 	int rpn = is_dot(RPN);
 216              		.loc 1 90 2 is_stmt 1 view .LVU34
 217              	.LBB50:
 218              	.LBI42:
  63:src/lcd.c     **** 	return dots[n];
 219              		.loc 1 63 5 view .LVU35
 220              	.LBB44:
  64:src/lcd.c     **** }
 221              		.loc 1 64 2 view .LVU36
  64:src/lcd.c     **** }
 222              		.loc 1 64 13 is_stmt 0 view .LVU37
 223 0016 90F88D80 		ldrb	r8, [r0, #141]	@ zero_extendqisi2
 224              	.LVL10:
  64:src/lcd.c     **** }
 225              		.loc 1 64 13 view .LVU38
 226              	.LBE44:
 227              	.LBE50:
  91:src/lcd.c     **** 	int i;
 228              		.loc 1 91 2 is_stmt 1 view .LVU39
  92:src/lcd.c     ****         for (i=0; i<TOP_DOTS; i++)
 229              		.loc 1 92 9 view .LVU40
 230              		.loc 1 92 19 view .LVU41
  93:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 231              		.loc 1 93 38 is_stmt 0 view .LVU42
 232 001a 4925     		movs	r5, #73
 233              	.LBB51:
 234              	.LBB52:
  61:src/lcd.c     **** }
 235              		.loc 1 61 17 view .LVU43
 236 001c 0026     		movs	r6, #0
 237              	.LBE52:
 238              	.LBE51:
  92:src/lcd.c     ****         for (i=0; i<TOP_DOTS; i++)
 239              		.loc 1 92 9 view .LVU44
ARM GAS  /tmp/ccFPIr9f.s 			page 7


 240 001e 40F2C727 		movw	r7, #711
 241 0022 06E0     		b	.L17
 242              	.LVL11:
 243              	.L13:
  94:src/lcd.c     **** 			clr_dot(i);
 244              		.loc 1 94 4 is_stmt 1 discriminator 2 view .LVU45
 245              	.LBB59:
 246              	.LBI51:
  60:src/lcd.c     ****         dots[n] = 0;
 247              		.loc 1 60 6 discriminator 2 view .LVU46
 248              	.LBB53:
  61:src/lcd.c     **** }
 249              		.loc 1 61 9 discriminator 2 view .LVU47
 250              	.LBE53:
 251              	.LBE59:
  93:src/lcd.c     **** 			clr_dot(i);
 252              		.loc 1 93 38 is_stmt 0 discriminator 2 view .LVU48
 253 0024 E407     		lsls	r4, r4, #31
 254              	.LBB60:
 255              	.LBB54:
  61:src/lcd.c     **** }
 256              		.loc 1 61 17 discriminator 2 view .LVU49
 257 0026 00EB0302 		add	r2, r0, r3
 258              	.LBE54:
 259              	.LBE60:
  93:src/lcd.c     **** 			clr_dot(i);
 260              		.loc 1 93 38 discriminator 2 view .LVU50
 261 002a 01D4     		bmi	.L14
 262              	.LBB61:
 263              	.LBB55:
  61:src/lcd.c     **** }
 264              		.loc 1 61 17 view .LVU51
 265 002c 82F88460 		strb	r6, [r2, #132]
 266              	.LVL12:
  61:src/lcd.c     **** }
 267              		.loc 1 61 17 view .LVU52
 268              	.LBE55:
 269              	.LBE61:
  92:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 270              		.loc 1 92 31 is_stmt 1 view .LVU53
  92:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 271              		.loc 1 92 19 view .LVU54
 272              	.L14:
  92:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 273              		.loc 1 92 19 is_stmt 0 view .LVU55
 274 0030 0133     		adds	r3, r3, #1
 275              	.L17:
 276              	.LVL13:
  93:src/lcd.c     **** 			clr_dot(i);
 277              		.loc 1 93 3 is_stmt 1 view .LVU56
 278              		.loc 1 94 4 view .LVU57
 279              	.LBB62:
  60:src/lcd.c     ****         dots[n] = 0;
 280              		.loc 1 60 6 view .LVU58
 281              	.LBB56:
  61:src/lcd.c     **** }
 282              		.loc 1 61 9 view .LVU59
ARM GAS  /tmp/ccFPIr9f.s 			page 8


 283              	.LBE56:
 284              	.LBE62:
  93:src/lcd.c     **** 			clr_dot(i);
 285              		.loc 1 93 38 is_stmt 0 view .LVU60
 286 0032 062B     		cmp	r3, #6
 287              	.LBB63:
 288              	.LBB57:
  61:src/lcd.c     **** }
 289              		.loc 1 61 17 view .LVU61
 290 0034 00EB0302 		add	r2, r0, r3
 291              	.LBE57:
 292              	.LBE63:
  93:src/lcd.c     **** 			clr_dot(i);
 293              		.loc 1 93 38 view .LVU62
 294 0038 25FA03F4 		lsr	r4, r5, r3
 295 003c F2D9     		bls	.L13
  92:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 296              		.loc 1 92 9 view .LVU63
 297 003e BB42     		cmp	r3, r7
 298              	.LBB64:
 299              	.LBB58:
  61:src/lcd.c     **** }
 300              		.loc 1 61 17 view .LVU64
 301 0040 82F88460 		strb	r6, [r2, #132]
 302              	.LVL14:
  61:src/lcd.c     **** }
 303              		.loc 1 61 17 view .LVU65
 304              	.LBE58:
 305              	.LBE64:
  92:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 306              		.loc 1 92 31 is_stmt 1 view .LVU66
  92:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 307              		.loc 1 92 19 view .LVU67
  92:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 308              		.loc 1 92 9 is_stmt 0 view .LVU68
 309 0044 F4D1     		bne	.L14
  95:src/lcd.c     **** 	dot(RCL_annun, rcl);
 310              		.loc 1 95 2 is_stmt 1 view .LVU69
 311 0046 8A20     		movs	r0, #138
 312 0048 FFF7FEFF 		bl	dot
 313              	.LVL15:
  96:src/lcd.c     **** 	dot(BATTERY, bat);
 314              		.loc 1 96 2 view .LVU70
 315 004c 5146     		mov	r1, r10
 316 004e 8720     		movs	r0, #135
 317 0050 FFF7FEFF 		bl	dot
 318              	.LVL16:
  97:src/lcd.c     **** 	dot(LIT_EQ, leq);
 319              		.loc 1 97 2 view .LVU71
 320 0054 4946     		mov	r1, r9
 321 0056 8420     		movs	r0, #132
 322 0058 FFF7FEFF 		bl	dot
 323              	.LVL17:
  98:src/lcd.c     **** 	dot(RPN, rpn);
 324              		.loc 1 98 2 view .LVU72
 325 005c 4146     		mov	r1, r8
 326 005e 8D20     		movs	r0, #141
ARM GAS  /tmp/ccFPIr9f.s 			page 9


  99:src/lcd.c     **** #else  
 100:src/lcd.c     **** #ifndef CONSOLE
 101:src/lcd.c     **** 	int rcl = is_dot(RCL_annun);
 102:src/lcd.c     **** 	int bat = is_dot(BATTERY);
 103:src/lcd.c     **** 	int leq = is_dot(LIT_EQ);
 104:src/lcd.c     **** 	int rpn = is_dot(RPN);
 105:src/lcd.c     **** #ifndef REALBUILD
 106:src/lcd.c     **** 	*LastDisplayedText = '\0';
 107:src/lcd.c     **** #endif
 108:src/lcd.c     ****         wait_for_display();
 109:src/lcd.c     **** #if defined(QTGUI) || defined(IOS)
 110:src/lcd.c     ****     	xset(LcdData, 0, sizeof(LcdData));
 111:src/lcd.c     ****     	xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
 112:src/lcd.c     ****     	LastDisplayedNumber[NUMBER_LENGTH]=0;
 113:src/lcd.c     ****     	xset(LastDisplayedExponent, ' ', EXPONENT_LENGTH);
 114:src/lcd.c     ****     	LastDisplayedExponent[EXPONENT_LENGTH]=0;
 115:src/lcd.c     **** #else
 116:src/lcd.c     ****         // terrible code which assumes int are 4 bytes long. Works fine for realbuild and for WINGU
 117:src/lcd.c     **** 	xset((void *) AT91C_SLCDC_MEM, 0, 4 * 20);
 118:src/lcd.c     **** #endif
 119:src/lcd.c     **** 	dot(RCL_annun, rcl);
 120:src/lcd.c     **** 	dot(BATTERY, bat);
 121:src/lcd.c     **** 	dot(LIT_EQ, leq);
 122:src/lcd.c     **** 	dot(RPN, rpn);
 123:src/lcd.c     **** #else
 124:src/lcd.c     **** // Console
 125:src/lcd.c     **** #ifdef USECURSES
 126:src/lcd.c     **** 	int i;
 127:src/lcd.c     ****         for (i=0; i<400; i++)
 128:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 129:src/lcd.c     **** 			clr_dot(i);
 130:src/lcd.c     **** 
 131:src/lcd.c     **** 	erase();
 132:src/lcd.c     ****         MOVE(0, 4);
 133:src/lcd.c     **** #else
 134:src/lcd.c     ****         putchar('\r');
 135:src/lcd.c     ****         for (i=0; i<70; i++)
 136:src/lcd.c     ****                 putchar(' ');
 137:src/lcd.c     ****         putchar('\r');
 138:src/lcd.c     ****         putchar(' ');
 139:src/lcd.c     **** #endif
 140:src/lcd.c     **** #endif
 141:src/lcd.c     ****         State2.invalid_disp = 0;
 142:src/lcd.c     **** #endif
 143:src/lcd.c     **** }
 327              		.loc 1 143 1 is_stmt 0 view .LVU73
 328 0060 BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 329              		.cfi_restore 14
 330              		.cfi_restore 10
 331              		.cfi_restore 9
 332              		.cfi_restore 8
 333              		.cfi_restore 7
 334              		.cfi_restore 6
 335              		.cfi_restore 5
 336              		.cfi_restore 4
 337              		.cfi_def_cfa_offset 0
 338              	.LVL18:
ARM GAS  /tmp/ccFPIr9f.s 			page 10


  98:src/lcd.c     **** 	dot(RPN, rpn);
 339              		.loc 1 98 2 view .LVU74
 340 0064 FFF7FEBF 		b	dot
 341              	.LVL19:
 342              	.L21:
  98:src/lcd.c     **** 	dot(RPN, rpn);
 343              		.loc 1 98 2 view .LVU75
 344              		.align	2
 345              	.L20:
 346 0068 00000000 		.word	.LANCHOR0
 347              		.cfi_endproc
 348              	.LFE4:
 350              		.section	.text.left_side,"ax",%progbits
 351              		.align	1
 352              		.p2align 2,,3
 353              		.global	left_side
 354              		.syntax unified
 355              		.thumb
 356              		.thumb_func
 357              		.fpu fpv4-sp-d16
 359              	left_side:
 360              	.LVL20:
 361              	.LFB5:
 144:src/lcd.c     **** 
 145:src/lcd.c     **** #if defined(DM42)
 146:src/lcd.c     ****   #define setBlackPixel(x, y)                bitblt24(x, 1, y, 1, BLT_OR,   BLT_NONE)
 147:src/lcd.c     ****   #define setWhitePixel(x, y)                bitblt24(x, 1, y, 1, BLT_ANDN, BLT_NONE)
 148:src/lcd.c     **** 
 149:src/lcd.c     **** /* void left_side (int i, int j) { //i - xleft reference; j - ytop reference */
 150:src/lcd.c     **** /*   lcd_fill_rect ( i+2, j+11, 4, 8, 0xff ); */
 151:src/lcd.c     **** /*   lcd_fill_rect ( i+3, j+3, 4, 8, 0xff ); */
 152:src/lcd.c     **** /*   setBlackPixel ( i+4, j+2 ); */
 153:src/lcd.c     **** /*   setBlackPixel ( i+3, j+19 ); */
 154:src/lcd.c     **** /*   setWhitePixel ( i+6, j+3 ); */
 155:src/lcd.c     **** /*   setWhitePixel ( i+5, j+18 ); */
 156:src/lcd.c     **** /* } */
 157:src/lcd.c     **** 
 158:src/lcd.c     **** void left_side (int i, int j) { //i - xleft reference; j - ytop reference
 362              		.loc 1 158 31 is_stmt 1 view -0
 363              		.cfi_startproc
 364              		@ args = 0, pretend = 0, frame = 0
 365              		@ frame_needed = 0, uses_anonymous_args = 0
 159:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 366              		.loc 1 159 3 view .LVU77
 158:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 367              		.loc 1 158 31 is_stmt 0 view .LVU78
 368 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 369              		.cfi_def_cfa_offset 24
 370              		.cfi_offset 4, -24
 371              		.cfi_offset 5, -20
 372              		.cfi_offset 6, -16
 373              		.cfi_offset 7, -12
 374              		.cfi_offset 8, -8
 375              		.cfi_offset 14, -4
 376 0004 82B0     		sub	sp, sp, #8
 377              		.cfi_def_cfa_offset 32
 378              		.loc 1 159 3 view .LVU79
ARM GAS  /tmp/ccFPIr9f.s 			page 11


 379 0006 FF27     		movs	r7, #255
 158:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 380              		.loc 1 158 31 view .LVU80
 381 0008 0D46     		mov	r5, r1
 382              		.loc 1 159 3 view .LVU81
 383 000a 124E     		ldr	r6, .L24
 384 000c 0097     		str	r7, [sp]
 158:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 385              		.loc 1 158 31 view .LVU82
 386 000e 0446     		mov	r4, r0
 160:src/lcd.c     ****   lcd_fill_rect (i+3, j+2, 1, 18, 0xff);
 387              		.loc 1 160 24 view .LVU83
 388 0010 05F10208 		add	r8, r5, #2
 159:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 389              		.loc 1 159 3 view .LVU84
 390 0014 0B31     		adds	r1, r1, #11
 391              	.LVL21:
 159:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 392              		.loc 1 159 3 view .LVU85
 393 0016 0230     		adds	r0, r0, #2
 394              	.LVL22:
 159:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 395              		.loc 1 159 3 view .LVU86
 396 0018 0923     		movs	r3, #9
 397 001a 0122     		movs	r2, #1
 398 001c B047     		blx	r6
 399              	.LVL23:
 400              		.loc 1 160 3 is_stmt 1 view .LVU87
 401 001e 4146     		mov	r1, r8
 402 0020 E01C     		adds	r0, r4, #3
 403 0022 0097     		str	r7, [sp]
 404 0024 1223     		movs	r3, #18
 405 0026 0122     		movs	r2, #1
 406 0028 B047     		blx	r6
 407              	.LVL24:
 161:src/lcd.c     ****   lcd_fill_rect (i+4, j+2, 1, 17, 0xff);
 408              		.loc 1 161 3 view .LVU88
 409 002a 4146     		mov	r1, r8
 410 002c 201D     		adds	r0, r4, #4
 411 002e 0097     		str	r7, [sp]
 412 0030 1123     		movs	r3, #17
 413 0032 0122     		movs	r2, #1
 414 0034 B047     		blx	r6
 415              	.LVL25:
 162:src/lcd.c     ****   lcd_fill_rect (i+5, j+3, 1, 15, 0xff);
 416              		.loc 1 162 3 view .LVU89
 417 0036 E91C     		adds	r1, r5, #3
 418 0038 601D     		adds	r0, r4, #5
 419 003a 0097     		str	r7, [sp]
 420 003c 0F23     		movs	r3, #15
 421 003e 0122     		movs	r2, #1
 422 0040 B047     		blx	r6
 423              	.LVL26:
 163:src/lcd.c     ****   lcd_fill_rect (i+6, j+4, 1, 7, 0xff);
 424              		.loc 1 163 3 view .LVU90
 425 0042 291D     		adds	r1, r5, #4
 426 0044 A01D     		adds	r0, r4, #6
ARM GAS  /tmp/ccFPIr9f.s 			page 12


 427 0046 0097     		str	r7, [sp]
 428 0048 0723     		movs	r3, #7
 429 004a 0122     		movs	r2, #1
 430 004c B047     		blx	r6
 431              	.LVL27:
 164:src/lcd.c     **** }
 432              		.loc 1 164 1 is_stmt 0 view .LVU91
 433 004e 02B0     		add	sp, sp, #8
 434              		.cfi_def_cfa_offset 24
 435              		@ sp needed
 436 0050 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 437              	.LVL28:
 438              	.L25:
 439              		.loc 1 164 1 view .LVU92
 440              		.align	2
 441              	.L24:
 442 0054 3D020008 		.word	134218301
 443              		.cfi_endproc
 444              	.LFE5:
 446              		.section	.text.left_side_top,"ax",%progbits
 447              		.align	1
 448              		.p2align 2,,3
 449              		.global	left_side_top
 450              		.syntax unified
 451              		.thumb
 452              		.thumb_func
 453              		.fpu fpv4-sp-d16
 455              	left_side_top:
 456              	.LVL29:
 457              	.LFB6:
 165:src/lcd.c     **** void left_side_top (int i, int j) {
 458              		.loc 1 165 35 is_stmt 1 view -0
 459              		.cfi_startproc
 460              		@ args = 0, pretend = 0, frame = 0
 461              		@ frame_needed = 0, uses_anonymous_args = 0
 462              		@ link register save eliminated.
 166:src/lcd.c     ****   left_side(i, j);
 463              		.loc 1 166 3 view .LVU94
 464 0000 FFF7FEBF 		b	left_side
 465              	.LVL30:
 466              		.loc 1 166 3 is_stmt 0 view .LVU95
 467              		.cfi_endproc
 468              	.LFE6:
 470              		.section	.text.left_side_bottom,"ax",%progbits
 471              		.align	1
 472              		.p2align 2,,3
 473              		.global	left_side_bottom
 474              		.syntax unified
 475              		.thumb
 476              		.thumb_func
 477              		.fpu fpv4-sp-d16
 479              	left_side_bottom:
 480              	.LVL31:
 481              	.LFB7:
 167:src/lcd.c     **** }
 168:src/lcd.c     **** void left_side_bottom (int i, int j) {
 482              		.loc 1 168 38 is_stmt 1 view -0
ARM GAS  /tmp/ccFPIr9f.s 			page 13


 483              		.cfi_startproc
 484              		@ args = 0, pretend = 0, frame = 0
 485              		@ frame_needed = 0, uses_anonymous_args = 0
 486              		@ link register save eliminated.
 169:src/lcd.c     ****   left_side(i-2, j+19);
 487              		.loc 1 169 3 view .LVU97
 488 0000 0238     		subs	r0, r0, #2
 489              	.LVL32:
 490              		.loc 1 169 3 is_stmt 0 view .LVU98
 491 0002 1331     		adds	r1, r1, #19
 492              	.LVL33:
 493              		.loc 1 169 3 view .LVU99
 494 0004 FFF7FEBF 		b	left_side
 495              	.LVL34:
 496              		.loc 1 169 3 view .LVU100
 497              		.cfi_endproc
 498              	.LFE7:
 500              		.section	.text.right_side,"ax",%progbits
 501              		.align	1
 502              		.p2align 2,,3
 503              		.global	right_side
 504              		.syntax unified
 505              		.thumb
 506              		.thumb_func
 507              		.fpu fpv4-sp-d16
 509              	right_side:
 510              	.LVL35:
 511              	.LFB8:
 170:src/lcd.c     **** }
 171:src/lcd.c     **** void right_side (int i, int j) {
 512              		.loc 1 171 32 is_stmt 1 view -0
 513              		.cfi_startproc
 514              		@ args = 0, pretend = 0, frame = 0
 515              		@ frame_needed = 0, uses_anonymous_args = 0
 172:src/lcd.c     ****   lcd_fill_rect (i+16, j+11, 1, 7, 0xff);
 516              		.loc 1 172 3 view .LVU102
 171:src/lcd.c     ****   lcd_fill_rect (i+16, j+11, 1, 7, 0xff);
 517              		.loc 1 171 32 is_stmt 0 view .LVU103
 518 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 519              		.cfi_def_cfa_offset 24
 520              		.cfi_offset 4, -24
 521              		.cfi_offset 5, -20
 522              		.cfi_offset 6, -16
 523              		.cfi_offset 7, -12
 524              		.cfi_offset 8, -8
 525              		.cfi_offset 14, -4
 526 0004 82B0     		sub	sp, sp, #8
 527              		.cfi_def_cfa_offset 32
 528              		.loc 1 172 3 view .LVU104
 529 0006 FF27     		movs	r7, #255
 530 0008 144E     		ldr	r6, .L30
 531 000a 0097     		str	r7, [sp]
 171:src/lcd.c     ****   lcd_fill_rect (i+16, j+11, 1, 7, 0xff);
 532              		.loc 1 171 32 view .LVU105
 533 000c 0446     		mov	r4, r0
 534 000e 0D46     		mov	r5, r1
 535              		.loc 1 172 3 view .LVU106
ARM GAS  /tmp/ccFPIr9f.s 			page 14


 536 0010 1030     		adds	r0, r0, #16
 537              	.LVL36:
 538              		.loc 1 172 3 view .LVU107
 539 0012 0B31     		adds	r1, r1, #11
 540              	.LVL37:
 541              		.loc 1 172 3 view .LVU108
 542 0014 0723     		movs	r3, #7
 543 0016 0122     		movs	r2, #1
 544 0018 B047     		blx	r6
 545              	.LVL38:
 173:src/lcd.c     ****   lcd_fill_rect (i+17, j+4, 1, 15, 0xff);
 546              		.loc 1 173 3 is_stmt 1 view .LVU109
 547 001a 291D     		adds	r1, r5, #4
 548 001c 04F11100 		add	r0, r4, #17
 549 0020 0097     		str	r7, [sp]
 550 0022 0F23     		movs	r3, #15
 551 0024 0122     		movs	r2, #1
 552 0026 B047     		blx	r6
 553              	.LVL39:
 174:src/lcd.c     ****   lcd_fill_rect (i+18, j+3, 1, 17, 0xff);
 554              		.loc 1 174 3 view .LVU110
 175:src/lcd.c     ****   lcd_fill_rect (i+19, j+2, 1, 18, 0xff);
 555              		.loc 1 175 25 is_stmt 0 view .LVU111
 556 0028 05F10208 		add	r8, r5, #2
 174:src/lcd.c     ****   lcd_fill_rect (i+18, j+3, 1, 17, 0xff);
 557              		.loc 1 174 3 view .LVU112
 558 002c E91C     		adds	r1, r5, #3
 559 002e 04F11200 		add	r0, r4, #18
 560 0032 0097     		str	r7, [sp]
 561 0034 1123     		movs	r3, #17
 562 0036 0122     		movs	r2, #1
 563 0038 B047     		blx	r6
 564              	.LVL40:
 565              		.loc 1 175 3 is_stmt 1 view .LVU113
 566 003a 4146     		mov	r1, r8
 567 003c 04F11300 		add	r0, r4, #19
 568 0040 0097     		str	r7, [sp]
 569 0042 1223     		movs	r3, #18
 570 0044 0122     		movs	r2, #1
 571 0046 B047     		blx	r6
 572              	.LVL41:
 176:src/lcd.c     ****   lcd_fill_rect (i+20, j+2, 1, 9, 0xff);
 573              		.loc 1 176 3 view .LVU114
 574 0048 4146     		mov	r1, r8
 575 004a 04F11400 		add	r0, r4, #20
 576 004e 0097     		str	r7, [sp]
 577 0050 0923     		movs	r3, #9
 578 0052 0122     		movs	r2, #1
 579 0054 B047     		blx	r6
 580              	.LVL42:
 177:src/lcd.c     **** }
 581              		.loc 1 177 1 is_stmt 0 view .LVU115
 582 0056 02B0     		add	sp, sp, #8
 583              		.cfi_def_cfa_offset 24
 584              		@ sp needed
 585 0058 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 586              	.LVL43:
ARM GAS  /tmp/ccFPIr9f.s 			page 15


 587              	.L31:
 588              		.loc 1 177 1 view .LVU116
 589              		.align	2
 590              	.L30:
 591 005c 3D020008 		.word	134218301
 592              		.cfi_endproc
 593              	.LFE8:
 595              		.section	.text.right_side_top,"ax",%progbits
 596              		.align	1
 597              		.p2align 2,,3
 598              		.global	right_side_top
 599              		.syntax unified
 600              		.thumb
 601              		.thumb_func
 602              		.fpu fpv4-sp-d16
 604              	right_side_top:
 605              	.LVL44:
 606              	.LFB9:
 178:src/lcd.c     **** void right_side_top (int i, int j) {
 607              		.loc 1 178 36 is_stmt 1 view -0
 608              		.cfi_startproc
 609              		@ args = 0, pretend = 0, frame = 0
 610              		@ frame_needed = 0, uses_anonymous_args = 0
 611              		@ link register save eliminated.
 179:src/lcd.c     ****   right_side(i, j);
 612              		.loc 1 179 3 view .LVU118
 613 0000 FFF7FEBF 		b	right_side
 614              	.LVL45:
 615              		.loc 1 179 3 is_stmt 0 view .LVU119
 616              		.cfi_endproc
 617              	.LFE9:
 619              		.section	.text.right_side_bottom,"ax",%progbits
 620              		.align	1
 621              		.p2align 2,,3
 622              		.global	right_side_bottom
 623              		.syntax unified
 624              		.thumb
 625              		.thumb_func
 626              		.fpu fpv4-sp-d16
 628              	right_side_bottom:
 629              	.LVL46:
 630              	.LFB10:
 180:src/lcd.c     **** }
 181:src/lcd.c     **** void right_side_bottom (int i, int j) {
 631              		.loc 1 181 39 is_stmt 1 view -0
 632              		.cfi_startproc
 633              		@ args = 0, pretend = 0, frame = 0
 634              		@ frame_needed = 0, uses_anonymous_args = 0
 635              		@ link register save eliminated.
 182:src/lcd.c     ****   right_side(i-2, j+19);
 636              		.loc 1 182 3 view .LVU121
 637 0000 0238     		subs	r0, r0, #2
 638              	.LVL47:
 639              		.loc 1 182 3 is_stmt 0 view .LVU122
 640 0002 1331     		adds	r1, r1, #19
 641              	.LVL48:
 642              		.loc 1 182 3 view .LVU123
ARM GAS  /tmp/ccFPIr9f.s 			page 16


 643 0004 FFF7FEBF 		b	right_side
 644              	.LVL49:
 645              		.loc 1 182 3 view .LVU124
 646              		.cfi_endproc
 647              	.LFE10:
 649              		.section	.text.top,"ax",%progbits
 650              		.align	1
 651              		.p2align 2,,3
 652              		.global	top
 653              		.syntax unified
 654              		.thumb
 655              		.thumb_func
 656              		.fpu fpv4-sp-d16
 658              	top:
 659              	.LVL50:
 660              	.LFB11:
 183:src/lcd.c     **** }
 184:src/lcd.c     **** void top (int i, int j) {
 661              		.loc 1 184 25 is_stmt 1 view -0
 662              		.cfi_startproc
 663              		@ args = 0, pretend = 0, frame = 0
 664              		@ frame_needed = 0, uses_anonymous_args = 0
 185:src/lcd.c     ****   lcd_fill_rect ( i+5, j, 14, 1, 0xff );
 665              		.loc 1 185 3 view .LVU126
 184:src/lcd.c     ****   lcd_fill_rect ( i+5, j, 14, 1, 0xff );
 666              		.loc 1 184 25 is_stmt 0 view .LVU127
 667 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 668              		.cfi_def_cfa_offset 20
 669              		.cfi_offset 4, -20
 670              		.cfi_offset 5, -16
 671              		.cfi_offset 6, -12
 672              		.cfi_offset 7, -8
 673              		.cfi_offset 14, -4
 674 0002 83B0     		sub	sp, sp, #12
 675              		.cfi_def_cfa_offset 32
 676              		.loc 1 185 3 view .LVU128
 677 0004 FF27     		movs	r7, #255
 678 0006 0E4E     		ldr	r6, .L36
 679 0008 0097     		str	r7, [sp]
 184:src/lcd.c     ****   lcd_fill_rect ( i+5, j, 14, 1, 0xff );
 680              		.loc 1 184 25 view .LVU129
 681 000a 0446     		mov	r4, r0
 682 000c 0D46     		mov	r5, r1
 683              		.loc 1 185 3 view .LVU130
 684 000e 0530     		adds	r0, r0, #5
 685              	.LVL51:
 686              		.loc 1 185 3 view .LVU131
 687 0010 0123     		movs	r3, #1
 688 0012 0E22     		movs	r2, #14
 689 0014 B047     		blx	r6
 690              	.LVL52:
 186:src/lcd.c     ****   lcd_fill_rect ( i+4, j+1, 16, 1, 0xff );
 691              		.loc 1 186 3 is_stmt 1 view .LVU132
 692 0016 691C     		adds	r1, r5, #1
 693 0018 201D     		adds	r0, r4, #4
 694 001a 0097     		str	r7, [sp]
 695 001c 0123     		movs	r3, #1
ARM GAS  /tmp/ccFPIr9f.s 			page 17


 696 001e 1022     		movs	r2, #16
 697 0020 B047     		blx	r6
 698              	.LVL53:
 187:src/lcd.c     ****   lcd_fill_rect ( i+6, j+2, 12, 1, 0xff );
 699              		.loc 1 187 3 view .LVU133
 700 0022 A91C     		adds	r1, r5, #2
 701 0024 A01D     		adds	r0, r4, #6
 702 0026 0097     		str	r7, [sp]
 703 0028 0123     		movs	r3, #1
 704 002a 0C22     		movs	r2, #12
 705 002c B047     		blx	r6
 706              	.LVL54:
 188:src/lcd.c     ****   lcd_fill_rect ( i+7, j+3, 10, 1, 0xff );
 707              		.loc 1 188 3 view .LVU134
 708 002e E91C     		adds	r1, r5, #3
 709 0030 E01D     		adds	r0, r4, #7
 710 0032 0097     		str	r7, [sp]
 711 0034 0123     		movs	r3, #1
 712 0036 0A22     		movs	r2, #10
 713 0038 B047     		blx	r6
 714              	.LVL55:
 189:src/lcd.c     **** }
 715              		.loc 1 189 1 is_stmt 0 view .LVU135
 716 003a 03B0     		add	sp, sp, #12
 717              		.cfi_def_cfa_offset 20
 718              		@ sp needed
 719 003c F0BD     		pop	{r4, r5, r6, r7, pc}
 720              	.LVL56:
 721              	.L37:
 722              		.loc 1 189 1 view .LVU136
 723 003e 00BF     		.align	2
 724              	.L36:
 725 0040 3D020008 		.word	134218301
 726              		.cfi_endproc
 727              	.LFE11:
 729              		.section	.text.middle,"ax",%progbits
 730              		.align	1
 731              		.p2align 2,,3
 732              		.global	middle
 733              		.syntax unified
 734              		.thumb
 735              		.thumb_func
 736              		.fpu fpv4-sp-d16
 738              	middle:
 739              	.LVL57:
 740              	.LFB12:
 190:src/lcd.c     **** void middle (int i, int j) {
 741              		.loc 1 190 28 is_stmt 1 view -0
 742              		.cfi_startproc
 743              		@ args = 0, pretend = 0, frame = 0
 744              		@ frame_needed = 0, uses_anonymous_args = 0
 191:src/lcd.c     ****   lcd_fill_rect ( i+5, j+19, 11, 3, 0xff );
 745              		.loc 1 191 3 view .LVU138
 190:src/lcd.c     **** void middle (int i, int j) {
 746              		.loc 1 190 28 is_stmt 0 view .LVU139
 747 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 748              		.cfi_def_cfa_offset 20
ARM GAS  /tmp/ccFPIr9f.s 			page 18


 749              		.cfi_offset 4, -20
 750              		.cfi_offset 5, -16
 751              		.cfi_offset 6, -12
 752              		.cfi_offset 7, -8
 753              		.cfi_offset 14, -4
 754 0002 83B0     		sub	sp, sp, #12
 755              		.cfi_def_cfa_offset 32
 756              		.loc 1 191 3 view .LVU140
 757 0004 FF23     		movs	r3, #255
 190:src/lcd.c     **** void middle (int i, int j) {
 758              		.loc 1 190 28 view .LVU141
 759 0006 0546     		mov	r5, r0
 760              		.loc 1 191 3 view .LVU142
 761 0008 0093     		str	r3, [sp]
 762 000a 0D4E     		ldr	r6, .L40
 192:src/lcd.c     ****   setBlackPixel ( i+4, j+20 );
 763              		.loc 1 192 3 view .LVU143
 764 000c 0D4F     		ldr	r7, .L40+4
 190:src/lcd.c     **** void middle (int i, int j) {
 765              		.loc 1 190 28 view .LVU144
 766 000e 0C46     		mov	r4, r1
 191:src/lcd.c     ****   lcd_fill_rect ( i+5, j+19, 11, 3, 0xff );
 767              		.loc 1 191 3 view .LVU145
 768 0010 0530     		adds	r0, r0, #5
 769              	.LVL58:
 191:src/lcd.c     ****   lcd_fill_rect ( i+5, j+19, 11, 3, 0xff );
 770              		.loc 1 191 3 view .LVU146
 771 0012 1331     		adds	r1, r1, #19
 772              	.LVL59:
 191:src/lcd.c     ****   lcd_fill_rect ( i+5, j+19, 11, 3, 0xff );
 773              		.loc 1 191 3 view .LVU147
 774 0014 0323     		movs	r3, #3
 775 0016 0B22     		movs	r2, #11
 776 0018 B047     		blx	r6
 777              	.LVL60:
 778              		.loc 1 192 3 is_stmt 1 view .LVU148
 779 001a 1434     		adds	r4, r4, #20
 780              	.LVL61:
 781              		.loc 1 192 3 is_stmt 0 view .LVU149
 782 001c 0026     		movs	r6, #0
 783 001e 0123     		movs	r3, #1
 784 0020 2246     		mov	r2, r4
 785 0022 281D     		adds	r0, r5, #4
 786 0024 1946     		mov	r1, r3
 787 0026 CDE90066 		strd	r6, r6, [sp]
 788 002a B847     		blx	r7
 789              	.LVL62:
 193:src/lcd.c     ****   setBlackPixel ( i+16, j+20 );
 790              		.loc 1 193 3 is_stmt 1 view .LVU150
 791 002c 0123     		movs	r3, #1
 792 002e CDE90066 		strd	r6, r6, [sp]
 793 0032 2246     		mov	r2, r4
 794 0034 05F11000 		add	r0, r5, #16
 795 0038 1946     		mov	r1, r3
 796 003a B847     		blx	r7
 797              	.LVL63:
 194:src/lcd.c     **** }
ARM GAS  /tmp/ccFPIr9f.s 			page 19


 798              		.loc 1 194 1 is_stmt 0 view .LVU151
 799 003c 03B0     		add	sp, sp, #12
 800              		.cfi_def_cfa_offset 20
 801              		@ sp needed
 802 003e F0BD     		pop	{r4, r5, r6, r7, pc}
 803              	.LVL64:
 804              	.L41:
 805              		.loc 1 194 1 view .LVU152
 806              		.align	2
 807              	.L40:
 808 0040 3D020008 		.word	134218301
 809 0044 25020008 		.word	134218277
 810              		.cfi_endproc
 811              	.LFE12:
 813              		.section	.text.bottom,"ax",%progbits
 814              		.align	1
 815              		.p2align 2,,3
 816              		.global	bottom
 817              		.syntax unified
 818              		.thumb
 819              		.thumb_func
 820              		.fpu fpv4-sp-d16
 822              	bottom:
 823              	.LVL65:
 824              	.LFB13:
 195:src/lcd.c     **** void bottom (int i, int j) {
 825              		.loc 1 195 28 is_stmt 1 view -0
 826              		.cfi_startproc
 827              		@ args = 0, pretend = 0, frame = 0
 828              		@ frame_needed = 0, uses_anonymous_args = 0
 196:src/lcd.c     ****   lcd_fill_rect ( i+2, j+40, 14, 1, 0xff );
 829              		.loc 1 196 3 view .LVU154
 195:src/lcd.c     **** void bottom (int i, int j) {
 830              		.loc 1 195 28 is_stmt 0 view .LVU155
 831 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 832              		.cfi_def_cfa_offset 20
 833              		.cfi_offset 4, -20
 834              		.cfi_offset 5, -16
 835              		.cfi_offset 6, -12
 836              		.cfi_offset 7, -8
 837              		.cfi_offset 14, -4
 838 0002 83B0     		sub	sp, sp, #12
 839              		.cfi_def_cfa_offset 32
 840              		.loc 1 196 3 view .LVU156
 841 0004 FF27     		movs	r7, #255
 842 0006 104E     		ldr	r6, .L44
 843 0008 0097     		str	r7, [sp]
 195:src/lcd.c     **** void bottom (int i, int j) {
 844              		.loc 1 195 28 view .LVU157
 845 000a 0446     		mov	r4, r0
 846 000c 0D46     		mov	r5, r1
 847              		.loc 1 196 3 view .LVU158
 848 000e 0230     		adds	r0, r0, #2
 849              	.LVL66:
 850              		.loc 1 196 3 view .LVU159
 851 0010 2831     		adds	r1, r1, #40
 852              	.LVL67:
ARM GAS  /tmp/ccFPIr9f.s 			page 20


 853              		.loc 1 196 3 view .LVU160
 854 0012 0123     		movs	r3, #1
 855 0014 0E22     		movs	r2, #14
 856 0016 B047     		blx	r6
 857              	.LVL68:
 197:src/lcd.c     ****   lcd_fill_rect ( i+1, j+39, 16, 1, 0xff );
 858              		.loc 1 197 3 is_stmt 1 view .LVU161
 859 0018 05F12701 		add	r1, r5, #39
 860 001c 601C     		adds	r0, r4, #1
 861 001e 0097     		str	r7, [sp]
 862 0020 0123     		movs	r3, #1
 863 0022 1022     		movs	r2, #16
 864 0024 B047     		blx	r6
 865              	.LVL69:
 198:src/lcd.c     ****   lcd_fill_rect ( i+3, j+38, 12, 1, 0xff );
 866              		.loc 1 198 3 view .LVU162
 867 0026 05F12601 		add	r1, r5, #38
 868 002a E01C     		adds	r0, r4, #3
 869 002c 0097     		str	r7, [sp]
 870 002e 0123     		movs	r3, #1
 871 0030 0C22     		movs	r2, #12
 872 0032 B047     		blx	r6
 873              	.LVL70:
 199:src/lcd.c     ****   lcd_fill_rect ( i+4, j+37, 10, 1, 0xff );
 874              		.loc 1 199 3 view .LVU163
 875 0034 05F12501 		add	r1, r5, #37
 876 0038 201D     		adds	r0, r4, #4
 877 003a 0097     		str	r7, [sp]
 878 003c 0123     		movs	r3, #1
 879 003e 0A22     		movs	r2, #10
 880 0040 B047     		blx	r6
 881              	.LVL71:
 200:src/lcd.c     **** }
 882              		.loc 1 200 1 is_stmt 0 view .LVU164
 883 0042 03B0     		add	sp, sp, #12
 884              		.cfi_def_cfa_offset 20
 885              		@ sp needed
 886 0044 F0BD     		pop	{r4, r5, r6, r7, pc}
 887              	.LVL72:
 888              	.L45:
 889              		.loc 1 200 1 view .LVU165
 890 0046 00BF     		.align	2
 891              	.L44:
 892 0048 3D020008 		.word	134218301
 893              		.cfi_endproc
 894              	.LFE13:
 896              		.section	.text.decimal,"ax",%progbits
 897              		.align	1
 898              		.p2align 2,,3
 899              		.global	decimal
 900              		.syntax unified
 901              		.thumb
 902              		.thumb_func
 903              		.fpu fpv4-sp-d16
 905              	decimal:
 906              	.LVL73:
 907              	.LFB14:
ARM GAS  /tmp/ccFPIr9f.s 			page 21


 201:src/lcd.c     **** void decimal (int i, int j) {
 908              		.loc 1 201 29 is_stmt 1 view -0
 909              		.cfi_startproc
 910              		@ args = 0, pretend = 0, frame = 0
 911              		@ frame_needed = 0, uses_anonymous_args = 0
 202:src/lcd.c     ****   lcd_fill_rect (i+19, j+40, 5, 5, 0xff);
 912              		.loc 1 202 3 view .LVU167
 201:src/lcd.c     **** void decimal (int i, int j) {
 913              		.loc 1 201 29 is_stmt 0 view .LVU168
 914 0000 10B5     		push	{r4, lr}
 915              		.cfi_def_cfa_offset 8
 916              		.cfi_offset 4, -8
 917              		.cfi_offset 14, -4
 918 0002 82B0     		sub	sp, sp, #8
 919              		.cfi_def_cfa_offset 16
 920              		.loc 1 202 3 view .LVU169
 921 0004 0523     		movs	r3, #5
 922 0006 FF22     		movs	r2, #255
 923 0008 0092     		str	r2, [sp]
 924 000a 034C     		ldr	r4, .L48
 925 000c 1330     		adds	r0, r0, #19
 926              	.LVL74:
 927              		.loc 1 202 3 view .LVU170
 928 000e 2831     		adds	r1, r1, #40
 929              	.LVL75:
 930              		.loc 1 202 3 view .LVU171
 931 0010 1A46     		mov	r2, r3
 932 0012 A047     		blx	r4
 933              	.LVL76:
 203:src/lcd.c     **** }
 934              		.loc 1 203 1 view .LVU172
 935 0014 02B0     		add	sp, sp, #8
 936              		.cfi_def_cfa_offset 8
 937              		@ sp needed
 938 0016 10BD     		pop	{r4, pc}
 939              	.L49:
 940              		.align	2
 941              	.L48:
 942 0018 3D020008 		.word	134218301
 943              		.cfi_endproc
 944              	.LFE14:
 946              		.section	.text.comma,"ax",%progbits
 947              		.align	1
 948              		.p2align 2,,3
 949              		.global	comma
 950              		.syntax unified
 951              		.thumb
 952              		.thumb_func
 953              		.fpu fpv4-sp-d16
 955              	comma:
 956              	.LVL77:
 957              	.LFB15:
 204:src/lcd.c     **** void comma (int i, int j) {
 958              		.loc 1 204 27 is_stmt 1 view -0
 959              		.cfi_startproc
 960              		@ args = 0, pretend = 0, frame = 0
 961              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccFPIr9f.s 			page 22


 205:src/lcd.c     ****   lcd_fill_rect (i+21, j+45, 3, 3, 0xff);
 962              		.loc 1 205 3 view .LVU174
 204:src/lcd.c     **** void comma (int i, int j) {
 963              		.loc 1 204 27 is_stmt 0 view .LVU175
 964 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 965              		.cfi_def_cfa_offset 20
 966              		.cfi_offset 4, -20
 967              		.cfi_offset 5, -16
 968              		.cfi_offset 6, -12
 969              		.cfi_offset 7, -8
 970              		.cfi_offset 14, -4
 971 0002 83B0     		sub	sp, sp, #12
 972              		.cfi_def_cfa_offset 32
 973              		.loc 1 205 3 view .LVU176
 974 0004 FF27     		movs	r7, #255
 975 0006 0323     		movs	r3, #3
 976 0008 084E     		ldr	r6, .L52
 977 000a 0097     		str	r7, [sp]
 204:src/lcd.c     **** void comma (int i, int j) {
 978              		.loc 1 204 27 view .LVU177
 979 000c 0446     		mov	r4, r0
 980 000e 0D46     		mov	r5, r1
 981              		.loc 1 205 3 view .LVU178
 982 0010 1A46     		mov	r2, r3
 983 0012 2D31     		adds	r1, r1, #45
 984              	.LVL78:
 985              		.loc 1 205 3 view .LVU179
 986 0014 1530     		adds	r0, r0, #21
 987              	.LVL79:
 988              		.loc 1 205 3 view .LVU180
 989 0016 B047     		blx	r6
 990              	.LVL80:
 206:src/lcd.c     ****   lcd_fill_rect (i+19, j+48, 3, 3, 0xff);
 991              		.loc 1 206 3 is_stmt 1 view .LVU181
 992 0018 0323     		movs	r3, #3
 993 001a 05F13001 		add	r1, r5, #48
 994 001e 04F11300 		add	r0, r4, #19
 995 0022 0097     		str	r7, [sp]
 996 0024 1A46     		mov	r2, r3
 997 0026 B047     		blx	r6
 998              	.LVL81:
 207:src/lcd.c     **** }
 999              		.loc 1 207 1 is_stmt 0 view .LVU182
 1000 0028 03B0     		add	sp, sp, #12
 1001              		.cfi_def_cfa_offset 20
 1002              		@ sp needed
 1003 002a F0BD     		pop	{r4, r5, r6, r7, pc}
 1004              	.LVL82:
 1005              	.L53:
 1006              		.loc 1 207 1 view .LVU183
 1007              		.align	2
 1008              	.L52:
 1009 002c 3D020008 		.word	134218301
 1010              		.cfi_endproc
 1011              	.LFE15:
 1013              		.section	.text.exp_left_side,"ax",%progbits
 1014              		.align	1
ARM GAS  /tmp/ccFPIr9f.s 			page 23


 1015              		.p2align 2,,3
 1016              		.global	exp_left_side
 1017              		.syntax unified
 1018              		.thumb
 1019              		.thumb_func
 1020              		.fpu fpv4-sp-d16
 1022              	exp_left_side:
 1023              	.LVL83:
 1024              	.LFB16:
 208:src/lcd.c     **** 
 209:src/lcd.c     **** void exp_left_side (int i, int j) {
 1025              		.loc 1 209 35 is_stmt 1 view -0
 1026              		.cfi_startproc
 1027              		@ args = 0, pretend = 0, frame = 0
 1028              		@ frame_needed = 0, uses_anonymous_args = 0
 210:src/lcd.c     ****   lcd_fill_rect (i, j+6, 1, 6, 0xff );
 1029              		.loc 1 210 3 view .LVU185
 209:src/lcd.c     ****   lcd_fill_rect (i, j+6, 1, 6, 0xff );
 1030              		.loc 1 209 35 is_stmt 0 view .LVU186
 1031 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1032              		.cfi_def_cfa_offset 20
 1033              		.cfi_offset 4, -20
 1034              		.cfi_offset 5, -16
 1035              		.cfi_offset 6, -12
 1036              		.cfi_offset 7, -8
 1037              		.cfi_offset 14, -4
 1038 0002 83B0     		sub	sp, sp, #12
 1039              		.cfi_def_cfa_offset 32
 1040              		.loc 1 210 3 view .LVU187
 1041 0004 FF27     		movs	r7, #255
 1042 0006 0E4E     		ldr	r6, .L56
 1043 0008 0097     		str	r7, [sp]
 209:src/lcd.c     ****   lcd_fill_rect (i, j+6, 1, 6, 0xff );
 1044              		.loc 1 209 35 view .LVU188
 1045 000a 0C46     		mov	r4, r1
 1046 000c 0546     		mov	r5, r0
 1047              		.loc 1 210 3 view .LVU189
 1048 000e 0631     		adds	r1, r1, #6
 1049              	.LVL84:
 1050              		.loc 1 210 3 view .LVU190
 1051 0010 0623     		movs	r3, #6
 1052 0012 0122     		movs	r2, #1
 1053 0014 B047     		blx	r6
 1054              	.LVL85:
 211:src/lcd.c     ****   lcd_fill_rect (i+1, j, 1, 11, 0xff );
 1055              		.loc 1 211 3 is_stmt 1 view .LVU191
 1056 0016 2146     		mov	r1, r4
 1057 0018 681C     		adds	r0, r5, #1
 1058 001a 0097     		str	r7, [sp]
 1059 001c 0B23     		movs	r3, #11
 1060 001e 0122     		movs	r2, #1
 1061 0020 B047     		blx	r6
 1062              	.LVL86:
 212:src/lcd.c     ****   lcd_fill_rect (i+2, j+1, 1, 9, 0xff );
 1063              		.loc 1 212 3 view .LVU192
 1064 0022 611C     		adds	r1, r4, #1
 1065 0024 A81C     		adds	r0, r5, #2
ARM GAS  /tmp/ccFPIr9f.s 			page 24


 1066 0026 0097     		str	r7, [sp]
 1067 0028 0923     		movs	r3, #9
 1068 002a 0122     		movs	r2, #1
 1069 002c B047     		blx	r6
 1070              	.LVL87:
 213:src/lcd.c     ****   lcd_fill_rect (i+3, j+2, 1, 4, 0xff );
 1071              		.loc 1 213 3 view .LVU193
 1072 002e A11C     		adds	r1, r4, #2
 1073 0030 E81C     		adds	r0, r5, #3
 1074 0032 0097     		str	r7, [sp]
 1075 0034 0423     		movs	r3, #4
 1076 0036 0122     		movs	r2, #1
 1077 0038 B047     		blx	r6
 1078              	.LVL88:
 214:src/lcd.c     **** }
 1079              		.loc 1 214 1 is_stmt 0 view .LVU194
 1080 003a 03B0     		add	sp, sp, #12
 1081              		.cfi_def_cfa_offset 20
 1082              		@ sp needed
 1083 003c F0BD     		pop	{r4, r5, r6, r7, pc}
 1084              	.LVL89:
 1085              	.L57:
 1086              		.loc 1 214 1 view .LVU195
 1087 003e 00BF     		.align	2
 1088              	.L56:
 1089 0040 3D020008 		.word	134218301
 1090              		.cfi_endproc
 1091              	.LFE16:
 1093              		.section	.text.exp_left_side_top,"ax",%progbits
 1094              		.align	1
 1095              		.p2align 2,,3
 1096              		.global	exp_left_side_top
 1097              		.syntax unified
 1098              		.thumb
 1099              		.thumb_func
 1100              		.fpu fpv4-sp-d16
 1102              	exp_left_side_top:
 1103              	.LVL90:
 1104              	.LFB17:
 215:src/lcd.c     **** void exp_left_side_top (int i, int j) {
 1105              		.loc 1 215 39 is_stmt 1 view -0
 1106              		.cfi_startproc
 1107              		@ args = 0, pretend = 0, frame = 0
 1108              		@ frame_needed = 0, uses_anonymous_args = 0
 1109              		@ link register save eliminated.
 216:src/lcd.c     ****   exp_left_side(i+1, j);
 1110              		.loc 1 216 3 view .LVU197
 1111 0000 0130     		adds	r0, r0, #1
 1112              	.LVL91:
 1113              		.loc 1 216 3 is_stmt 0 view .LVU198
 1114 0002 FFF7FEBF 		b	exp_left_side
 1115              	.LVL92:
 1116              		.loc 1 216 3 view .LVU199
 1117              		.cfi_endproc
 1118              	.LFE17:
 1120 0006 00BF     		.section	.text.exp_left_side_bottom,"ax",%progbits
 1121              		.align	1
ARM GAS  /tmp/ccFPIr9f.s 			page 25


 1122              		.p2align 2,,3
 1123              		.global	exp_left_side_bottom
 1124              		.syntax unified
 1125              		.thumb
 1126              		.thumb_func
 1127              		.fpu fpv4-sp-d16
 1129              	exp_left_side_bottom:
 1130              	.LVL93:
 1131              	.LFB18:
 217:src/lcd.c     **** }
 218:src/lcd.c     **** void exp_left_side_bottom (int i, int j) {
 1132              		.loc 1 218 42 is_stmt 1 view -0
 1133              		.cfi_startproc
 1134              		@ args = 0, pretend = 0, frame = 0
 1135              		@ frame_needed = 0, uses_anonymous_args = 0
 1136              		@ link register save eliminated.
 219:src/lcd.c     ****   exp_left_side(i, j+11);
 1137              		.loc 1 219 3 view .LVU201
 1138 0000 0B31     		adds	r1, r1, #11
 1139              	.LVL94:
 1140              		.loc 1 219 3 is_stmt 0 view .LVU202
 1141 0002 FFF7FEBF 		b	exp_left_side
 1142              	.LVL95:
 1143              		.loc 1 219 3 view .LVU203
 1144              		.cfi_endproc
 1145              	.LFE18:
 1147 0006 00BF     		.section	.text.exp_right_side,"ax",%progbits
 1148              		.align	1
 1149              		.p2align 2,,3
 1150              		.global	exp_right_side
 1151              		.syntax unified
 1152              		.thumb
 1153              		.thumb_func
 1154              		.fpu fpv4-sp-d16
 1156              	exp_right_side:
 1157              	.LVL96:
 1158              	.LFB19:
 220:src/lcd.c     **** }
 221:src/lcd.c     **** void exp_right_side (int i, int j) {
 1159              		.loc 1 221 36 is_stmt 1 view -0
 1160              		.cfi_startproc
 1161              		@ args = 0, pretend = 0, frame = 0
 1162              		@ frame_needed = 0, uses_anonymous_args = 0
 222:src/lcd.c     ****   lcd_fill_rect (i+12, j, 1, 6, 0xff );
 1163              		.loc 1 222 3 view .LVU205
 221:src/lcd.c     ****   lcd_fill_rect (i+12, j, 1, 6, 0xff );
 1164              		.loc 1 221 36 is_stmt 0 view .LVU206
 1165 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1166              		.cfi_def_cfa_offset 20
 1167              		.cfi_offset 4, -20
 1168              		.cfi_offset 5, -16
 1169              		.cfi_offset 6, -12
 1170              		.cfi_offset 7, -8
 1171              		.cfi_offset 14, -4
 1172 0002 83B0     		sub	sp, sp, #12
 1173              		.cfi_def_cfa_offset 32
 1174              		.loc 1 222 3 view .LVU207
ARM GAS  /tmp/ccFPIr9f.s 			page 26


 1175 0004 FF27     		movs	r7, #255
 1176 0006 0F4E     		ldr	r6, .L62
 1177 0008 0097     		str	r7, [sp]
 221:src/lcd.c     ****   lcd_fill_rect (i+12, j, 1, 6, 0xff );
 1178              		.loc 1 221 36 view .LVU208
 1179 000a 0446     		mov	r4, r0
 1180 000c 0D46     		mov	r5, r1
 1181              		.loc 1 222 3 view .LVU209
 1182 000e 0C30     		adds	r0, r0, #12
 1183              	.LVL97:
 1184              		.loc 1 222 3 view .LVU210
 1185 0010 0623     		movs	r3, #6
 1186 0012 0122     		movs	r2, #1
 1187 0014 B047     		blx	r6
 1188              	.LVL98:
 223:src/lcd.c     ****   lcd_fill_rect (i+11, j+1, 1, 11, 0xff );
 1189              		.loc 1 223 3 is_stmt 1 view .LVU211
 1190 0016 691C     		adds	r1, r5, #1
 1191 0018 04F10B00 		add	r0, r4, #11
 1192 001c 0097     		str	r7, [sp]
 1193 001e 0B23     		movs	r3, #11
 1194 0020 0122     		movs	r2, #1
 1195 0022 B047     		blx	r6
 1196              	.LVL99:
 224:src/lcd.c     ****   lcd_fill_rect (i+10, j+2, 1, 9, 0xff );
 1197              		.loc 1 224 3 view .LVU212
 1198 0024 A91C     		adds	r1, r5, #2
 1199 0026 04F10A00 		add	r0, r4, #10
 1200 002a 0097     		str	r7, [sp]
 1201 002c 0923     		movs	r3, #9
 1202 002e 0122     		movs	r2, #1
 1203 0030 B047     		blx	r6
 1204              	.LVL100:
 225:src/lcd.c     ****   lcd_fill_rect (i+9, j+6, 1, 4, 0xff );
 1205              		.loc 1 225 3 view .LVU213
 1206 0032 A91D     		adds	r1, r5, #6
 1207 0034 04F10900 		add	r0, r4, #9
 1208 0038 0097     		str	r7, [sp]
 1209 003a 0423     		movs	r3, #4
 1210 003c 0122     		movs	r2, #1
 1211 003e B047     		blx	r6
 1212              	.LVL101:
 226:src/lcd.c     **** }
 1213              		.loc 1 226 1 is_stmt 0 view .LVU214
 1214 0040 03B0     		add	sp, sp, #12
 1215              		.cfi_def_cfa_offset 20
 1216              		@ sp needed
 1217 0042 F0BD     		pop	{r4, r5, r6, r7, pc}
 1218              	.LVL102:
 1219              	.L63:
 1220              		.loc 1 226 1 view .LVU215
 1221              		.align	2
 1222              	.L62:
 1223 0044 3D020008 		.word	134218301
 1224              		.cfi_endproc
 1225              	.LFE19:
 1227              		.section	.text.exp_right_side_top,"ax",%progbits
ARM GAS  /tmp/ccFPIr9f.s 			page 27


 1228              		.align	1
 1229              		.p2align 2,,3
 1230              		.global	exp_right_side_top
 1231              		.syntax unified
 1232              		.thumb
 1233              		.thumb_func
 1234              		.fpu fpv4-sp-d16
 1236              	exp_right_side_top:
 1237              	.LVL103:
 1238              	.LFB20:
 227:src/lcd.c     **** void exp_right_side_top (int i, int j) {
 1239              		.loc 1 227 40 is_stmt 1 view -0
 1240              		.cfi_startproc
 1241              		@ args = 0, pretend = 0, frame = 0
 1242              		@ frame_needed = 0, uses_anonymous_args = 0
 1243              		@ link register save eliminated.
 228:src/lcd.c     ****   exp_right_side(i, j);
 1244              		.loc 1 228 3 view .LVU217
 1245 0000 FFF7FEBF 		b	exp_right_side
 1246              	.LVL104:
 1247              		.loc 1 228 3 is_stmt 0 view .LVU218
 1248              		.cfi_endproc
 1249              	.LFE20:
 1251              		.section	.text.exp_right_side_bottom,"ax",%progbits
 1252              		.align	1
 1253              		.p2align 2,,3
 1254              		.global	exp_right_side_bottom
 1255              		.syntax unified
 1256              		.thumb
 1257              		.thumb_func
 1258              		.fpu fpv4-sp-d16
 1260              	exp_right_side_bottom:
 1261              	.LVL105:
 1262              	.LFB21:
 229:src/lcd.c     **** }
 230:src/lcd.c     **** void exp_right_side_bottom (int i, int j) {
 1263              		.loc 1 230 43 is_stmt 1 view -0
 1264              		.cfi_startproc
 1265              		@ args = 0, pretend = 0, frame = 0
 1266              		@ frame_needed = 0, uses_anonymous_args = 0
 1267              		@ link register save eliminated.
 231:src/lcd.c     ****   exp_right_side(i-1, j+11);
 1268              		.loc 1 231 3 view .LVU220
 1269 0000 0138     		subs	r0, r0, #1
 1270              	.LVL106:
 1271              		.loc 1 231 3 is_stmt 0 view .LVU221
 1272 0002 0B31     		adds	r1, r1, #11
 1273              	.LVL107:
 1274              		.loc 1 231 3 view .LVU222
 1275 0004 FFF7FEBF 		b	exp_right_side
 1276              	.LVL108:
 1277              		.loc 1 231 3 view .LVU223
 1278              		.cfi_endproc
 1279              	.LFE21:
 1281              		.section	.text.exp_top,"ax",%progbits
 1282              		.align	1
 1283              		.p2align 2,,3
ARM GAS  /tmp/ccFPIr9f.s 			page 28


 1284              		.global	exp_top
 1285              		.syntax unified
 1286              		.thumb
 1287              		.thumb_func
 1288              		.fpu fpv4-sp-d16
 1290              	exp_top:
 1291              	.LVL109:
 1292              	.LFB22:
 232:src/lcd.c     **** }
 233:src/lcd.c     **** void exp_top (int i, int j) {
 1293              		.loc 1 233 29 is_stmt 1 view -0
 1294              		.cfi_startproc
 1295              		@ args = 0, pretend = 0, frame = 0
 1296              		@ frame_needed = 0, uses_anonymous_args = 0
 234:src/lcd.c     ****   lcd_fill_rect (i+4, j, 7, 1, 0xff );
 1297              		.loc 1 234 3 view .LVU225
 233:src/lcd.c     ****   lcd_fill_rect (i+4, j, 7, 1, 0xff );
 1298              		.loc 1 233 29 is_stmt 0 view .LVU226
 1299 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1300              		.cfi_def_cfa_offset 20
 1301              		.cfi_offset 4, -20
 1302              		.cfi_offset 5, -16
 1303              		.cfi_offset 6, -12
 1304              		.cfi_offset 7, -8
 1305              		.cfi_offset 14, -4
 1306 0002 83B0     		sub	sp, sp, #12
 1307              		.cfi_def_cfa_offset 32
 1308              		.loc 1 234 3 view .LVU227
 1309 0004 FF27     		movs	r7, #255
 1310 0006 0B4E     		ldr	r6, .L68
 1311 0008 0097     		str	r7, [sp]
 233:src/lcd.c     ****   lcd_fill_rect (i+4, j, 7, 1, 0xff );
 1312              		.loc 1 233 29 view .LVU228
 1313 000a 0446     		mov	r4, r0
 1314 000c 0D46     		mov	r5, r1
 1315              		.loc 1 234 3 view .LVU229
 1316 000e 0430     		adds	r0, r0, #4
 1317              	.LVL110:
 1318              		.loc 1 234 3 view .LVU230
 1319 0010 0123     		movs	r3, #1
 1320 0012 0722     		movs	r2, #7
 1321 0014 B047     		blx	r6
 1322              	.LVL111:
 235:src/lcd.c     ****   lcd_fill_rect (i+5, j+1, 5, 1, 0xff );
 1323              		.loc 1 235 3 is_stmt 1 view .LVU231
 1324 0016 691C     		adds	r1, r5, #1
 1325 0018 601D     		adds	r0, r4, #5
 1326 001a 0097     		str	r7, [sp]
 1327 001c 0123     		movs	r3, #1
 1328 001e 0522     		movs	r2, #5
 1329 0020 B047     		blx	r6
 1330              	.LVL112:
 236:src/lcd.c     ****   lcd_fill_rect (i+6, j+2, 3, 1, 0xff );
 1331              		.loc 1 236 3 view .LVU232
 1332 0022 A91C     		adds	r1, r5, #2
 1333 0024 A01D     		adds	r0, r4, #6
 1334 0026 0097     		str	r7, [sp]
ARM GAS  /tmp/ccFPIr9f.s 			page 29


 1335 0028 0123     		movs	r3, #1
 1336 002a 0322     		movs	r2, #3
 1337 002c B047     		blx	r6
 1338              	.LVL113:
 237:src/lcd.c     **** }
 1339              		.loc 1 237 1 is_stmt 0 view .LVU233
 1340 002e 03B0     		add	sp, sp, #12
 1341              		.cfi_def_cfa_offset 20
 1342              		@ sp needed
 1343 0030 F0BD     		pop	{r4, r5, r6, r7, pc}
 1344              	.LVL114:
 1345              	.L69:
 1346              		.loc 1 237 1 view .LVU234
 1347 0032 00BF     		.align	2
 1348              	.L68:
 1349 0034 3D020008 		.word	134218301
 1350              		.cfi_endproc
 1351              	.LFE22:
 1353              		.section	.text.exp_bottom,"ax",%progbits
 1354              		.align	1
 1355              		.p2align 2,,3
 1356              		.global	exp_bottom
 1357              		.syntax unified
 1358              		.thumb
 1359              		.thumb_func
 1360              		.fpu fpv4-sp-d16
 1362              	exp_bottom:
 1363              	.LVL115:
 1364              	.LFB23:
 238:src/lcd.c     **** void exp_bottom (int i, int j) {
 1365              		.loc 1 238 32 is_stmt 1 view -0
 1366              		.cfi_startproc
 1367              		@ args = 0, pretend = 0, frame = 0
 1368              		@ frame_needed = 0, uses_anonymous_args = 0
 239:src/lcd.c     ****   lcd_fill_rect (i+2, j+22, 7, 1, 0xff );
 1369              		.loc 1 239 3 view .LVU236
 238:src/lcd.c     **** void exp_bottom (int i, int j) {
 1370              		.loc 1 238 32 is_stmt 0 view .LVU237
 1371 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1372              		.cfi_def_cfa_offset 20
 1373              		.cfi_offset 4, -20
 1374              		.cfi_offset 5, -16
 1375              		.cfi_offset 6, -12
 1376              		.cfi_offset 7, -8
 1377              		.cfi_offset 14, -4
 1378 0002 83B0     		sub	sp, sp, #12
 1379              		.cfi_def_cfa_offset 32
 1380              		.loc 1 239 3 view .LVU238
 1381 0004 FF27     		movs	r7, #255
 1382 0006 0C4E     		ldr	r6, .L72
 1383 0008 0097     		str	r7, [sp]
 238:src/lcd.c     **** void exp_bottom (int i, int j) {
 1384              		.loc 1 238 32 view .LVU239
 1385 000a 0446     		mov	r4, r0
 1386 000c 0D46     		mov	r5, r1
 1387              		.loc 1 239 3 view .LVU240
 1388 000e 0230     		adds	r0, r0, #2
ARM GAS  /tmp/ccFPIr9f.s 			page 30


 1389              	.LVL116:
 1390              		.loc 1 239 3 view .LVU241
 1391 0010 1631     		adds	r1, r1, #22
 1392              	.LVL117:
 1393              		.loc 1 239 3 view .LVU242
 1394 0012 0123     		movs	r3, #1
 1395 0014 0722     		movs	r2, #7
 1396 0016 B047     		blx	r6
 1397              	.LVL118:
 240:src/lcd.c     ****   lcd_fill_rect (i+3, j+21, 5, 1, 0xff );
 1398              		.loc 1 240 3 is_stmt 1 view .LVU243
 1399 0018 05F11501 		add	r1, r5, #21
 1400 001c E01C     		adds	r0, r4, #3
 1401 001e 0097     		str	r7, [sp]
 1402 0020 0123     		movs	r3, #1
 1403 0022 0522     		movs	r2, #5
 1404 0024 B047     		blx	r6
 1405              	.LVL119:
 241:src/lcd.c     ****   lcd_fill_rect (i+4, j+20, 3, 1, 0xff );
 1406              		.loc 1 241 3 view .LVU244
 1407 0026 05F11401 		add	r1, r5, #20
 1408 002a 201D     		adds	r0, r4, #4
 1409 002c 0097     		str	r7, [sp]
 1410 002e 0123     		movs	r3, #1
 1411 0030 0322     		movs	r2, #3
 1412 0032 B047     		blx	r6
 1413              	.LVL120:
 242:src/lcd.c     **** }
 1414              		.loc 1 242 1 is_stmt 0 view .LVU245
 1415 0034 03B0     		add	sp, sp, #12
 1416              		.cfi_def_cfa_offset 20
 1417              		@ sp needed
 1418 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 1419              	.LVL121:
 1420              	.L73:
 1421              		.loc 1 242 1 view .LVU246
 1422              		.align	2
 1423              	.L72:
 1424 0038 3D020008 		.word	134218301
 1425              		.cfi_endproc
 1426              	.LFE23:
 1428              		.section	.text.exp_middle,"ax",%progbits
 1429              		.align	1
 1430              		.p2align 2,,3
 1431              		.global	exp_middle
 1432              		.syntax unified
 1433              		.thumb
 1434              		.thumb_func
 1435              		.fpu fpv4-sp-d16
 1437              	exp_middle:
 1438              	.LVL122:
 1439              	.LFB24:
 243:src/lcd.c     **** void exp_middle (int i, int j) {
 1440              		.loc 1 243 32 is_stmt 1 view -0
 1441              		.cfi_startproc
 1442              		@ args = 0, pretend = 0, frame = 0
 1443              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccFPIr9f.s 			page 31


 244:src/lcd.c     ****   lcd_fill_rect (i+4, j+10, 5, 1, 0xff );
 1444              		.loc 1 244 3 view .LVU248
 243:src/lcd.c     **** void exp_middle (int i, int j) {
 1445              		.loc 1 243 32 is_stmt 0 view .LVU249
 1446 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1447              		.cfi_def_cfa_offset 24
 1448              		.cfi_offset 4, -24
 1449              		.cfi_offset 5, -20
 1450              		.cfi_offset 6, -16
 1451              		.cfi_offset 7, -12
 1452              		.cfi_offset 8, -8
 1453              		.cfi_offset 14, -4
 1454 0004 82B0     		sub	sp, sp, #8
 1455              		.cfi_def_cfa_offset 32
 1456              		.loc 1 244 3 view .LVU250
 1457 0006 FF27     		movs	r7, #255
 1458              		.loc 1 244 19 view .LVU251
 1459 0008 00F10408 		add	r8, r0, #4
 1460              		.loc 1 244 3 view .LVU252
 1461 000c 0C4E     		ldr	r6, .L76
 1462 000e 0097     		str	r7, [sp]
 243:src/lcd.c     **** void exp_middle (int i, int j) {
 1463              		.loc 1 243 32 view .LVU253
 1464 0010 0C46     		mov	r4, r1
 1465 0012 0546     		mov	r5, r0
 1466              		.loc 1 244 3 view .LVU254
 1467 0014 0A31     		adds	r1, r1, #10
 1468              	.LVL123:
 1469              		.loc 1 244 3 view .LVU255
 1470 0016 4046     		mov	r0, r8
 1471              	.LVL124:
 1472              		.loc 1 244 3 view .LVU256
 1473 0018 0123     		movs	r3, #1
 1474 001a 0522     		movs	r2, #5
 1475 001c B047     		blx	r6
 1476              	.LVL125:
 245:src/lcd.c     ****   lcd_fill_rect (i+3, j+11, 7, 1, 0xff );
 1477              		.loc 1 245 3 is_stmt 1 view .LVU257
 1478 001e E81C     		adds	r0, r5, #3
 1479 0020 04F10B01 		add	r1, r4, #11
 1480 0024 0097     		str	r7, [sp]
 1481 0026 0123     		movs	r3, #1
 1482 0028 0722     		movs	r2, #7
 1483 002a B047     		blx	r6
 1484              	.LVL126:
 246:src/lcd.c     ****   lcd_fill_rect (i+4, j+12, 5, 1, 0xff );
 1485              		.loc 1 246 3 view .LVU258
 1486 002c 4046     		mov	r0, r8
 1487 002e 04F10C01 		add	r1, r4, #12
 1488 0032 0097     		str	r7, [sp]
 1489 0034 0123     		movs	r3, #1
 1490 0036 0522     		movs	r2, #5
 1491 0038 B047     		blx	r6
 1492              	.LVL127:
 247:src/lcd.c     **** }
 1493              		.loc 1 247 1 is_stmt 0 view .LVU259
 1494 003a 02B0     		add	sp, sp, #8
ARM GAS  /tmp/ccFPIr9f.s 			page 32


 1495              		.cfi_def_cfa_offset 24
 1496              		@ sp needed
 1497 003c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1498              	.LVL128:
 1499              	.L77:
 1500              		.loc 1 247 1 view .LVU260
 1501              		.align	2
 1502              	.L76:
 1503 0040 3D020008 		.word	134218301
 1504              		.cfi_endproc
 1505              	.LFE24:
 1507              		.section	.text.show_stack,"ax",%progbits
 1508              		.align	1
 1509              		.p2align 2,,3
 1510              		.global	show_stack
 1511              		.syntax unified
 1512              		.thumb
 1513              		.thumb_func
 1514              		.fpu fpv4-sp-d16
 1516              	show_stack:
 1517              	.LFB41:
 1518              		.cfi_startproc
 1519              		@ args = 0, pretend = 0, frame = 0
 1520              		@ frame_needed = 0, uses_anonymous_args = 0
 1521              		@ link register save eliminated.
 1522 0000 7047     		bx	lr
 1523              		.cfi_endproc
 1524              	.LFE41:
 1526 0002 00BF     		.section	.text.show_flags,"ax",%progbits
 1527              		.align	1
 1528              		.p2align 2,,3
 1529              		.global	show_flags
 1530              		.syntax unified
 1531              		.thumb
 1532              		.thumb_func
 1533              		.fpu fpv4-sp-d16
 1535              	show_flags:
 1536              	.LFB39:
 1537              		.cfi_startproc
 1538              		@ args = 0, pretend = 0, frame = 0
 1539              		@ frame_needed = 0, uses_anonymous_args = 0
 1540              		@ link register save eliminated.
 1541 0000 7047     		bx	lr
 1542              		.cfi_endproc
 1543              	.LFE39:
 1545 0002 00BF     		.section	.text.wait_for_display,"ax",%progbits
 1546              		.align	1
 1547              		.p2align 2,,3
 1548              		.global	wait_for_display
 1549              		.syntax unified
 1550              		.thumb
 1551              		.thumb_func
 1552              		.fpu fpv4-sp-d16
 1554              	wait_for_display:
 1555              	.LFB28:
 248:src/lcd.c     ****   
 249:src/lcd.c     **** void show_disp(void) { // This function re-draws everything.
ARM GAS  /tmp/ccFPIr9f.s 			page 33


 250:src/lcd.c     ****   // It may be fast enough. It does mean that clearing everything first is needed,
 251:src/lcd.c     ****   // or we keep track of changes.
 252:src/lcd.c     ****   // Try clearing everything first first.
 253:src/lcd.c     ****         int i, j, p;
 254:src/lcd.c     **** 	uint32_t x;
 255:src/lcd.c     **** 	const uint32_t xleft = 26;
 256:src/lcd.c     **** 	const uint32_t ytop = 130; // was 170
 257:src/lcd.c     **** 	const uint32_t dwidth = 25;
 258:src/lcd.c     **** 	const uint32_t xleft_exp = 344;
 259:src/lcd.c     **** 	const uint32_t ytop_exp = 130; // was 170
 260:src/lcd.c     **** 	const uint32_t dwidth_exp = 18;
 261:src/lcd.c     **** 	const uint32_t y_ann = Y_ANNUNC;
 262:src/lcd.c     ****         /* Segments 0 - 107 are the main digits */
 263:src/lcd.c     ****         for (i=0; i<DISPLAY_DIGITS; i++) { // 0 -> 11 inclusive
 264:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 265:src/lcd.c     ****                 x = xleft + dwidth*i;
 266:src/lcd.c     ****                 if (dots[p]) { // top
 267:src/lcd.c     **** 		  top (x, ytop);
 268:src/lcd.c     ****                 }
 269:src/lcd.c     ****                 if (dots[p+1]) { // top left
 270:src/lcd.c     **** 		  left_side_top (x, ytop);
 271:src/lcd.c     ****                 }
 272:src/lcd.c     ****                 if (dots[p+3]) { // top right
 273:src/lcd.c     **** 		  right_side_top (x, ytop);
 274:src/lcd.c     ****                 }
 275:src/lcd.c     ****                 if (dots[p+2]) { // centre line
 276:src/lcd.c     **** 		  middle (x, ytop);
 277:src/lcd.c     ****                 }
 278:src/lcd.c     ****                 if (dots[p+4]) { // lower left
 279:src/lcd.c     **** 		  left_side_bottom (x, ytop);
 280:src/lcd.c     ****                 }
 281:src/lcd.c     ****                 if (dots[p+6]) { // lower right
 282:src/lcd.c     **** 		  right_side_bottom (x, ytop);
 283:src/lcd.c     ****                 }
 284:src/lcd.c     ****                 if (dots[p+5]) { // bottom
 285:src/lcd.c     **** 		  bottom (x, ytop);
 286:src/lcd.c     ****                 }
 287:src/lcd.c     ****                 if (dots[p+7]) { // point
 288:src/lcd.c     **** 		  decimal (x, ytop);
 289:src/lcd.c     ****                 }
 290:src/lcd.c     ****                 if (dots[p+8]) { // comma
 291:src/lcd.c     **** 		  comma (x, ytop);
 292:src/lcd.c     ****                 }
 293:src/lcd.c     ****         }
 294:src/lcd.c     ****         /* Segments 108 - 128 are the exponent digits */
 295:src/lcd.c     ****         for (i=0; i<3; i++) {
 296:src/lcd.c     ****                 p = i*7+108;
 297:src/lcd.c     ****                 x = xleft_exp + dwidth_exp*i;
 298:src/lcd.c     ****                 if (dots[p]) { // top
 299:src/lcd.c     **** 		  exp_top (x, ytop_exp);
 300:src/lcd.c     ****                 }
 301:src/lcd.c     ****                 if (dots[p+1]) { // top left
 302:src/lcd.c     **** 		  exp_left_side_top (x, ytop_exp);
 303:src/lcd.c     ****                 }
 304:src/lcd.c     ****                 if (dots[p+3]) { // top right
 305:src/lcd.c     **** 		  exp_right_side_top (x, ytop_exp);
 306:src/lcd.c     ****                 }
ARM GAS  /tmp/ccFPIr9f.s 			page 34


 307:src/lcd.c     ****                 if (dots[p+2]) { // centre line
 308:src/lcd.c     **** 		  exp_middle (x, ytop_exp);
 309:src/lcd.c     ****                 }
 310:src/lcd.c     ****                 if (dots[p+4]) { // lower left
 311:src/lcd.c     **** 		  exp_left_side_bottom (x, ytop_exp);
 312:src/lcd.c     ****                 }
 313:src/lcd.c     ****                 if (dots[p+6]) { // lower right
 314:src/lcd.c     **** 		  exp_right_side_bottom (x, ytop_exp);
 315:src/lcd.c     ****                 }
 316:src/lcd.c     ****                 if (dots[p+5]) { // bottom
 317:src/lcd.c     **** 		  exp_bottom (x, ytop_exp);
 318:src/lcd.c     ****                 }
 319:src/lcd.c     ****         }
 320:src/lcd.c     ****         /* Segments 129 & 130 are the signs */
 321:src/lcd.c     ****         if (dots[MANT_SIGN]) {
 322:src/lcd.c     **** 	  middle (xleft - dwidth, ytop);
 323:src/lcd.c     ****         }
 324:src/lcd.c     ****         if (dots[EXP_SIGN]) {
 325:src/lcd.c     **** 	  exp_middle (xleft_exp-dwidth_exp, ytop);
 326:src/lcd.c     ****         }
 327:src/lcd.c     **** 
 328:src/lcd.c     **** 	if (dots[BIG_EQ]) {
 329:src/lcd.c     **** 	  lcd_fill_rect (250, y_ann-34, 15, 4, 0xff);
 330:src/lcd.c     **** 	  lcd_fill_rect (250, y_ann-24, 15, 4, 0xff);
 331:src/lcd.c     ****         }
 332:src/lcd.c     **** 	t20->inv = 0;
 333:src/lcd.c     **** 	
 334:src/lcd.c     **** 	draw_PRT();
 335:src/lcd.c     **** 	
 336:src/lcd.c     **** 	/* if (UState.print_on) { */
 337:src/lcd.c     **** 	/*   lcd_setXY(t20, 250, y_ann-70); */
 338:src/lcd.c     **** 	/*   lcd_writeText(t20,"PRT"); */
 339:src/lcd.c     ****         /* } */
 340:src/lcd.c     **** 
 341:src/lcd.c     ****         if (dots[DOWN_ARR]) {
 342:src/lcd.c     **** 	  lcd_fill_rect(287,y_ann-67,5,12,0xff);
 343:src/lcd.c     **** 	  lcd_fill_rect(285,y_ann-55,9,1,0xff);
 344:src/lcd.c     **** 	  lcd_fill_rect(286,y_ann-54,7,1,0xff);
 345:src/lcd.c     **** 	  lcd_fill_rect(287,y_ann-53,5,1,0xff);
 346:src/lcd.c     **** 	  lcd_fill_rect(288,y_ann-52,3,1,0xff);
 347:src/lcd.c     **** 	  lcd_fill_rect(289,y_ann-51,1,1,0xff);
 348:src/lcd.c     ****         }
 349:src/lcd.c     **** 
 350:src/lcd.c     **** 	if (dots[INPUT]) {
 351:src/lcd.c     **** 	  lcd_setXY(t20, 305, y_ann-70);
 352:src/lcd.c     **** 	  lcd_writeText(t20,"ALPHA");
 353:src/lcd.c     ****         }
 354:src/lcd.c     **** 
 355:src/lcd.c     **** 	/* if (dots[LIT_EQ]) { */
 356:src/lcd.c     **** 	/*   lcd_setXY (t20, 360, y_ann-70); */
 357:src/lcd.c     **** 	/*   if (C_LOCKED) { */
 358:src/lcd.c     **** 	/*     lcd_writeText(t20, "C_LK"); */
 359:src/lcd.c     **** 	/*   } */
 360:src/lcd.c     **** 	/*   else { */
 361:src/lcd.c     **** 	/*     lcd_writeText(t20, "="); */
 362:src/lcd.c     **** 	/*   } */
 363:src/lcd.c     ****         /* } */
ARM GAS  /tmp/ccFPIr9f.s 			page 35


 364:src/lcd.c     **** 
 365:src/lcd.c     **** 	draw_LEQ();
 366:src/lcd.c     **** 	
 367:src/lcd.c     **** 	if (dots[BATTERY]) {
 368:src/lcd.c     **** 	  //    MOVE(70, 10);   PRINTF("####-");
 369:src/lcd.c     ****         }
 370:src/lcd.c     **** #ifdef MODIFY_BEG_SSIZE8
 371:src/lcd.c     **** 	if (dots[BEG]) {
 372:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-50);
 373:src/lcd.c     **** 	  lcd_writeText(t20, "S:8");
 374:src/lcd.c     ****         }
 375:src/lcd.c     **** 	else {
 376:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-50);
 377:src/lcd.c     **** 	  lcd_writeText(t20, "S:4");
 378:src/lcd.c     **** 	}	  
 379:src/lcd.c     **** #else
 380:src/lcd.c     **** 	if (dots[BEG]) {
 381:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-50);
 382:src/lcd.c     **** 	  lcd_writeText(t20, "BEG");
 383:src/lcd.c     ****         }
 384:src/lcd.c     **** #endif
 385:src/lcd.c     **** 	if (dots[STO_annun]) {
 386:src/lcd.c     **** 	  lcd_setXY (t20, 325, y_ann-50);
 387:src/lcd.c     **** 	  lcd_writeText(t20, "PGM");
 388:src/lcd.c     ****         }
 389:src/lcd.c     **** 
 390:src/lcd.c     **** 	/* if (dots[RCL_annun]) { */
 391:src/lcd.c     **** 	/*   lcd_setXY (t20, 365, y_ann-50); */
 392:src/lcd.c     **** 	/*   lcd_writeText(t20, "RUN"); */
 393:src/lcd.c     ****         /* } */
 394:src/lcd.c     **** 
 395:src/lcd.c     **** 	if (dots[RAD]) {
 396:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-30);
 397:src/lcd.c     **** 	  lcd_writeText(t20, "RAD");
 398:src/lcd.c     **** 	}
 399:src/lcd.c     **** 
 400:src/lcd.c     **** 	if (dots[DEG]) {
 401:src/lcd.c     **** 	  lcd_setXY (t20, 325, y_ann-30);
 402:src/lcd.c     **** 	  lcd_writeText(t20, "DEG");
 403:src/lcd.c     ****         }
 404:src/lcd.c     ****         /* if (dots[RPN]) { */
 405:src/lcd.c     **** 	/*   lcd_setXY (t20, 365, y_ann-30); */
 406:src/lcd.c     **** 	/*   if (ENTRY_RPN_ENABLED) { */
 407:src/lcd.c     **** 	/*     lcd_writeText(t20, "eRPN"); */
 408:src/lcd.c     **** 	/*   } */
 409:src/lcd.c     **** 	/*   else { */
 410:src/lcd.c     **** 	/*     lcd_writeText(t20, "RPN"); */
 411:src/lcd.c     **** 	/*   } */
 412:src/lcd.c     ****         /* } */
 413:src/lcd.c     **** 	draw_RPN_RCL();
 414:src/lcd.c     **** 	
 415:src/lcd.c     **** 	/* The graphical bit last */
 416:src/lcd.c     ****         for (i=0; i<BITMAP_WIDTH; i++) {
 417:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 418:src/lcd.c     **** 	    if (dots[i*6+j+MATRIX_BASE]) {
 419:src/lcd.c     **** 	      lcd_fill_rect( xleft-dwidth+5*i+15, ytop-(10+6*6)+j*6, 4, 5, 0xff);
 420:src/lcd.c     **** 	    }
ARM GAS  /tmp/ccFPIr9f.s 			page 36


 421:src/lcd.c     **** 	  }
 422:src/lcd.c     **** 	}
 423:src/lcd.c     **** #ifdef TOP_ROW
 424:src/lcd.c     ****         for (i=0; i<BW_TOP; i++) {
 425:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 426:src/lcd.c     **** 	    if (dots[i*6+j+MB_TOP]) {
 427:src/lcd.c     **** 	      lcd_fill_rect( xleft-dwidth+5*i+15, 70-(10+6*5)+j*5, 4, 4, 0xff);
 428:src/lcd.c     **** 	    }
 429:src/lcd.c     **** 	  }
 430:src/lcd.c     **** 	}
 431:src/lcd.c     **** #endif
 432:src/lcd.c     **** }
 433:src/lcd.c     **** #endif
 434:src/lcd.c     **** 
 435:src/lcd.c     **** #if defined(USECURSES) && !defined(DM42)
 436:src/lcd.c     **** void show_disp(void) {
 437:src/lcd.c     ****         int i, j, p, x;
 438:src/lcd.c     ****         const int dig_base = 16;
 439:src/lcd.c     **** 
 440:src/lcd.c     ****         /* Segments 0 - 107 are the main digits */
 441:src/lcd.c     ****         for (i=0; i<DISPLAY_DIGITS; i++) {
 442:src/lcd.c     **** 	  p = i*SEGS_PER_DIGIT; // 9 - 7 + dot and comma
 443:src/lcd.c     ****                 x = 3+5*i;
 444:src/lcd.c     ****                 if (dots[p]) {
 445:src/lcd.c     ****                         MOVE(x+1, dig_base);    PRINTF("--");
 446:src/lcd.c     ****                 }
 447:src/lcd.c     ****                 if (dots[p+1]) {
 448:src/lcd.c     ****                         MOVE(x, dig_base+1);    PRINTF("|");
 449:src/lcd.c     ****                         MOVE(x, dig_base+2);    PRINTF("|");
 450:src/lcd.c     ****                 }
 451:src/lcd.c     ****                 if (dots[p+3]) {
 452:src/lcd.c     ****                         MOVE(x+3, dig_base+1);  PRINTF("|");
 453:src/lcd.c     ****                         MOVE(x+3, dig_base+2);  PRINTF("|");
 454:src/lcd.c     ****                 }
 455:src/lcd.c     ****                 if (dots[p+2]) {
 456:src/lcd.c     ****                         MOVE(x+1, dig_base+3);  PRINTF("--");
 457:src/lcd.c     ****                 }
 458:src/lcd.c     ****                 if (dots[p+4]) {
 459:src/lcd.c     ****                         MOVE(x, dig_base+4);    PRINTF("|");
 460:src/lcd.c     ****                         MOVE(x, dig_base+5);    PRINTF("|");
 461:src/lcd.c     ****                 }
 462:src/lcd.c     ****                 if (dots[p+6]) {
 463:src/lcd.c     ****                         MOVE(x+3, dig_base+4);  PRINTF("|");
 464:src/lcd.c     ****                         MOVE(x+3, dig_base+5);  PRINTF("|");
 465:src/lcd.c     ****                 }
 466:src/lcd.c     ****                 if (dots[p+5]) {
 467:src/lcd.c     ****                         MOVE(x+1, dig_base+6);  PRINTF("--");
 468:src/lcd.c     ****                 }
 469:src/lcd.c     ****                 if (dots[p+7]) {
 470:src/lcd.c     ****                         MOVE(x+4, dig_base+6);  PRINTF(".");
 471:src/lcd.c     ****                 }
 472:src/lcd.c     ****                 if (dots[p+8]) {
 473:src/lcd.c     ****                         MOVE(x+3, dig_base+7);  PRINTF("/");
 474:src/lcd.c     ****                 }
 475:src/lcd.c     ****         }
 476:src/lcd.c     ****         /* Segments 108 - 128 are the exponent digits */
 477:src/lcd.c     ****         for (i=0; i<3; i++) {
ARM GAS  /tmp/ccFPIr9f.s 			page 37


 478:src/lcd.c     ****                 p = i*7+108;
 479:src/lcd.c     ****                 x = 66 + i * 4;
 480:src/lcd.c     ****                 if (dots[p]) {
 481:src/lcd.c     ****                         MOVE(x+1, dig_base-1);  PRINTF("-");
 482:src/lcd.c     ****                 }
 483:src/lcd.c     ****                 if (dots[p+1]) {
 484:src/lcd.c     ****                         MOVE(x, dig_base);      PRINTF("|");
 485:src/lcd.c     ****                 }
 486:src/lcd.c     ****                 if (dots[p+3]) {
 487:src/lcd.c     ****                         MOVE(x+2, dig_base);    PRINTF("|");
 488:src/lcd.c     ****                 }
 489:src/lcd.c     ****                 if (dots[p+2]) {
 490:src/lcd.c     ****                         MOVE(x+1, dig_base+1);  PRINTF("-");
 491:src/lcd.c     ****                 }
 492:src/lcd.c     ****                 if (dots[p+4]) {
 493:src/lcd.c     ****                         MOVE(x, dig_base+2);    PRINTF("|");
 494:src/lcd.c     ****                 }
 495:src/lcd.c     ****                 if (dots[p+6]) {
 496:src/lcd.c     ****                         MOVE(x+2, dig_base+2);  PRINTF("|");
 497:src/lcd.c     ****                 }
 498:src/lcd.c     ****                 if (dots[p+5]) {
 499:src/lcd.c     ****                         MOVE(x+1, dig_base+3);  PRINTF("-");
 500:src/lcd.c     ****                 }
 501:src/lcd.c     ****         }
 502:src/lcd.c     ****         /* Segments 129 & 130 are the signs */
 503:src/lcd.c     ****         if (dots[MANT_SIGN]) {
 504:src/lcd.c     ****                 MOVE(0, dig_base+3);
 505:src/lcd.c     ****                 PRINTF("--");
 506:src/lcd.c     ****         }
 507:src/lcd.c     ****         if (dots[EXP_SIGN]) {
 508:src/lcd.c     ****                 MOVE(64, dig_base+1);
 509:src/lcd.c     ****                 PRINTF("-");
 510:src/lcd.c     ****         }
 511:src/lcd.c     ****         if (dots[BIG_EQ]) {
 512:src/lcd.c     ****                 MOVE(47, 12);   PRINTF("==");
 513:src/lcd.c     ****         }
 514:src/lcd.c     ****         if (dots[LIT_EQ]) {
 515:src/lcd.c     ****                 MOVE(64, 10);   PRINTF("=");
 516:src/lcd.c     ****         }
 517:src/lcd.c     ****         if (dots[DOWN_ARR]) {
 518:src/lcd.c     ****                 MOVE(52, 10);   PRINTF("v");
 519:src/lcd.c     ****         }
 520:src/lcd.c     ****         if (dots[INPUT]) {
 521:src/lcd.c     ****                 MOVE(55, 10);   PRINTF("INPUT");
 522:src/lcd.c     ****         }
 523:src/lcd.c     ****         if (dots[BATTERY]) {
 524:src/lcd.c     ****                 MOVE(70, 10);   PRINTF("####-");
 525:src/lcd.c     ****         }
 526:src/lcd.c     ****         if (dots[BEG]) {
 527:src/lcd.c     ****                 MOVE(52, 12);   PRINTF("BEG");
 528:src/lcd.c     ****         }
 529:src/lcd.c     ****         if (dots[STO_annun]) {
 530:src/lcd.c     ****                 MOVE(62, 12);   PRINTF("STO");
 531:src/lcd.c     ****         }
 532:src/lcd.c     ****         if (dots[RCL_annun]) {
 533:src/lcd.c     ****                 MOVE(72, 12);   PRINTF("RCL");
 534:src/lcd.c     ****         }
ARM GAS  /tmp/ccFPIr9f.s 			page 38


 535:src/lcd.c     ****         if (dots[RAD]) {
 536:src/lcd.c     ****                 MOVE(52, 14);   PRINTF("RAD");
 537:src/lcd.c     ****         }
 538:src/lcd.c     ****         if (dots[DEG]) {
 539:src/lcd.c     ****                 MOVE(62, 14);   PRINTF("360");
 540:src/lcd.c     ****         }
 541:src/lcd.c     ****         if (dots[RPN]) {
 542:src/lcd.c     ****                 MOVE(72, 14);   PRINTF("RPN");
 543:src/lcd.c     ****         }
 544:src/lcd.c     ****         /* The graphical bit last */
 545:src/lcd.c     ****         for (i=0; i<BITMAP_WIDTH; i++)
 546:src/lcd.c     ****                 for (j=0; j<6; j++) {
 547:src/lcd.c     ****                         if (dots[i*6+j+MATRIX_BASE]) {
 548:src/lcd.c     ****                                 MOVE(1+i, 9+j);
 549:src/lcd.c     ****                                 PRINTF("#");
 550:src/lcd.c     ****                         }
 551:src/lcd.c     ****                 }
 552:src/lcd.c     **** }
 553:src/lcd.c     **** #endif
 554:src/lcd.c     **** 
 555:src/lcd.c     **** void show_stack(void) {
 556:src/lcd.c     **** #ifdef USECURSES
 557:src/lcd.c     ****   int i;
 558:src/lcd.c     **** 
 559:src/lcd.c     ****         if (!State2.flags)
 560:src/lcd.c     ****                 return;
 561:src/lcd.c     **** 
 562:src/lcd.c     ****         // Stack display smashes the stack registers
 563:src/lcd.c     ****         for (i=4; i<STACK_SIZE; i++) {
 564:src/lcd.c     ****                 MOVE(26, 8-i);
 565:src/lcd.c     ****                 PRINTF("%c ", i<stack_size()?'*':' ');
 566:src/lcd.c     ****                 dispreg(REGNAMES[i], regX_idx + i);
 567:src/lcd.c     ****         }
 568:src/lcd.c     ****         MOVE(53, 2);    dispreg(REGNAMES[regJ_idx-regX_idx], regJ_idx);
 569:src/lcd.c     ****         MOVE(53, 1);    dispreg(REGNAMES[regK_idx-regX_idx], regK_idx);
 570:src/lcd.c     ****         for (i=0; i<4; i++) {
 571:src/lcd.c     ****                 MOVE(0, 4-i);
 572:src/lcd.c     ****                 dispreg(REGNAMES[i], regX_idx + i);
 573:src/lcd.c     ****         }
 574:src/lcd.c     ****         MOVE(53, 4);
 575:src/lcd.c     ****         dispreg(REGNAMES[regL_idx-regX_idx], regL_idx);
 576:src/lcd.c     ****         MOVE(53, 3);
 577:src/lcd.c     ****         dispreg(REGNAMES[regI_idx-regX_idx], regI_idx);
 578:src/lcd.c     ****         MOVE(53, 0);
 579:src/lcd.c     ****         PRINTF("stack depth: %d", stack_size());
 580:src/lcd.c     **** #endif
 581:src/lcd.c     **** }
 582:src/lcd.c     **** 
 583:src/lcd.c     **** void show_flags(void) {
 584:src/lcd.c     **** #if defined(CONSOLE) && !defined(DM42)
 585:src/lcd.c     **** 	extern unsigned int get_local_flags(void);
 586:src/lcd.c     **** 
 587:src/lcd.c     **** 	if (!State2.flags)
 588:src/lcd.c     **** 		return;
 589:src/lcd.c     **** 	MOVE(0, 0);
 590:src/lcd.c     **** 	PRINTF(" %c ", JustDisplayed ? '*' : ' ');
 591:src/lcd.c     **** 	MOVE(5, 0);
ARM GAS  /tmp/ccFPIr9f.s 			page 39


 592:src/lcd.c     **** 	switch (cur_shift()) {
 593:src/lcd.c     **** 	case SHIFT_F:   PRINTF("[f-shift]");    break;
 594:src/lcd.c     **** 	case SHIFT_G:   PRINTF("[g-shift]");    break;
 595:src/lcd.c     **** 	case SHIFT_H:   PRINTF("[h-shift]");    break;
 596:src/lcd.c     **** 	default:                                break;
 597:src/lcd.c     **** 	}
 598:src/lcd.c     **** 	if (State2.hyp) {
 599:src/lcd.c     **** 		MOVE(14, 0);
 600:src/lcd.c     **** 		if (State2.dot)
 601:src/lcd.c     **** 			PRINTF("[hyp]");
 602:src/lcd.c     **** 		else
 603:src/lcd.c     **** 			PRINTF("[hyp-1]");
 604:src/lcd.c     **** 	}
 605:src/lcd.c     **** 	if (!State2.runmode) {
 606:src/lcd.c     **** 		MOVE(21, 0);
 607:src/lcd.c     **** 		PRINTF("[prog]");
 608:src/lcd.c     **** 	}
 609:src/lcd.c     **** 	if (view_instruction_counter) {
 610:src/lcd.c     **** 		MOVE(28, 0);
 611:src/lcd.c     **** 		PRINTF("#%llu", instruction_count);
 612:src/lcd.c     **** 	}
 613:src/lcd.c     **** 	MOVE(0, 0);
 614:src/lcd.c     **** 
 615:src/lcd.c     **** #ifdef USECURSES
 616:src/lcd.c     **** #define FLAG_BASE       5
 617:src/lcd.c     **** 	MOVE(10, FLAG_BASE);
 618:src/lcd.c     **** 	if (State2.rarg)
 619:src/lcd.c     **** 		PRINTF("[rcmd]");
 620:src/lcd.c     **** 	else if (State2.arrow)
 621:src/lcd.c     **** 		PRINTF("[arr]");
 622:src/lcd.c     **** 	if (State2.dot) {
 623:src/lcd.c     **** 		MOVE(18, FLAG_BASE);
 624:src/lcd.c     **** 		PRINTF("[dot]");
 625:src/lcd.c     **** 	}
 626:src/lcd.c     **** 	if (State2.ind) {
 627:src/lcd.c     **** 		MOVE(24, FLAG_BASE);
 628:src/lcd.c     **** 		PRINTF("[ind]");
 629:src/lcd.c     **** 	}
 630:src/lcd.c     **** 	if (State2.trace) {
 631:src/lcd.c     **** 		MOVE(30, FLAG_BASE);
 632:src/lcd.c     **** 		PRINTF("[trace]");
 633:src/lcd.c     **** 	}
 634:src/lcd.c     **** 	if (State2.cmplx) {
 635:src/lcd.c     **** 		MOVE(40, FLAG_BASE);
 636:src/lcd.c     **** 		PRINTF("[cmplx]");
 637:src/lcd.c     **** 	}
 638:src/lcd.c     **** 	if (State2.catalogue) {
 639:src/lcd.c     **** 		MOVE(50, FLAG_BASE);
 640:src/lcd.c     **** 		PRINTF("[cat %03u]", State2.catalogue);
 641:src/lcd.c     **** 	}
 642:src/lcd.c     **** 	if (State2.hms) {
 643:src/lcd.c     **** 		MOVE(64, FLAG_BASE);
 644:src/lcd.c     **** 		PRINTF("[H.MS]");
 645:src/lcd.c     **** 	}
 646:src/lcd.c     **** 	if (UState.fract) {
 647:src/lcd.c     **** 		MOVE(71, FLAG_BASE);
 648:src/lcd.c     **** 		PRINTF("[FRACT]");
ARM GAS  /tmp/ccFPIr9f.s 			page 40


 649:src/lcd.c     **** 	}
 650:src/lcd.c     **** 	if (State2.multi) {
 651:src/lcd.c     **** 		MOVE(71, FLAG_BASE+1);
 652:src/lcd.c     **** 		PRINTF("[MULTI]");
 653:src/lcd.c     **** 	}
 654:src/lcd.c     **** 	MOVE(50, FLAG_BASE+1);
 655:src/lcd.c     **** 	PRINTF("[RRS %03u]", ProgSize);
 656:src/lcd.c     **** 	if (State2.state_lift) {
 657:src/lcd.c     **** 		MOVE(10, FLAG_BASE+1);
 658:src/lcd.c     **** 		PRINTF("[lift]");
 659:src/lcd.c     **** 	}
 660:src/lcd.c     **** 	if (Running) {
 661:src/lcd.c     **** 		MOVE(18, FLAG_BASE+1);
 662:src/lcd.c     **** 		PRINTF("[running]");
 663:src/lcd.c     **** 	}
 664:src/lcd.c     **** 	MOVE(70, 5);
 665:src/lcd.c     **** 	PRINTF("iw = %u/%u", State2.window, IntMaxWindow);
 666:src/lcd.c     **** 	MOVE(30, FLAG_BASE+1);
 667:src/lcd.c     **** 	PRINTF("shft = %u", cur_shift());
 668:src/lcd.c     **** 	MOVE(40, FLAG_BASE+1);
 669:src/lcd.c     **** 	PRINTF("trig = %u", UState.trigmode);
 670:src/lcd.c     **** 	MOVE(60, FLAG_BASE+1);
 671:src/lcd.c     **** 	PRINTF("r = %u", ShowRegister);
 672:src/lcd.c     **** //	MOVE(60, FLAG_BASE+1);
 673:src/lcd.c     **** //	PRINTF("apos = %u", State2.alpha_pos);
 674:src/lcd.c     **** 	MOVE(10, FLAG_BASE+2);
 675:src/lcd.c     **** 	PRINTF("numdig = %u   alpha '%-31s'   lflags = %03o-%03o",
 676:src/lcd.c     **** 			State2.numdigit, Alpha, get_local_flags() >> 8,
 677:src/lcd.c     **** 			get_local_flags() & 0xff);
 678:src/lcd.c     **** 	if (State.entryp) {
 679:src/lcd.c     **** 		MOVE(0, FLAG_BASE+2);
 680:src/lcd.c     **** 		PRINTF("entryp");
 681:src/lcd.c     **** 	}
 682:src/lcd.c     **** 	MOVE(10, FLAG_BASE+3);
 683:src/lcd.c     **** 	PRINTF("digval=%u", State2.digval);
 684:src/lcd.c     **** 	MOVE(23, FLAG_BASE+3);
 685:src/lcd.c     **** 	PRINTF("pc = %03u", state_pc());
 686:src/lcd.c     **** 	MOVE(34, FLAG_BASE+3);
 687:src/lcd.c     **** 	PRINTF("ap = %u", State2.alpha_pos);
 688:src/lcd.c     **** 	MOVE(45, FLAG_BASE+3);
 689:src/lcd.c     **** 	PRINTF("cmddot = %u  cmdeex = %u  eol = %u",
 690:src/lcd.c     **** 			CmdLineDot, CmdLineEex, CmdLineLength);
 691:src/lcd.c     **** 	MOVE(0, FLAG_BASE+3);
 692:src/lcd.c     **** 	PRINTF("JG=%d", UState.jg1582?1582:1752);
 693:src/lcd.c     **** #endif
 694:src/lcd.c     **** #endif
 695:src/lcd.c     **** }
 696:src/lcd.c     **** 
 697:src/lcd.c     **** void wait_for_display(void)
 698:src/lcd.c     **** {
 1556              		.loc 1 698 1 is_stmt 1 view -0
 1557              		.cfi_startproc
 1558              		@ args = 0, pretend = 0, frame = 0
 1559              		@ frame_needed = 0, uses_anonymous_args = 0
 1560              		@ link register save eliminated.
 699:src/lcd.c     **** }
 1561              		.loc 1 699 1 view .LVU262
ARM GAS  /tmp/ccFPIr9f.s 			page 41


 1562 0000 7047     		bx	lr
 1563              		.cfi_endproc
 1564              	.LFE28:
 1566 0002 00BF     		.section	.rodata.draw_RPN_RCL.str1.4,"aMS",%progbits,1
 1567              		.align	2
 1568              	.LC0:
 1569 0000 6552504E 		.ascii	"eRPN\000"
 1569      00
 1570 0005 000000   		.align	2
 1571              	.LC1:
 1572 0008 52504E00 		.ascii	"RPN\000"
 1573              		.align	2
 1574              	.LC2:
 1575 000c 52554E00 		.ascii	"RUN\000"
 1576              		.section	.text.draw_RPN_RCL,"ax",%progbits
 1577              		.align	1
 1578              		.p2align 2,,3
 1579              		.global	draw_RPN_RCL
 1580              		.syntax unified
 1581              		.thumb
 1582              		.thumb_func
 1583              		.fpu fpv4-sp-d16
 1585              	draw_RPN_RCL:
 1586              	.LFB30:
 700:src/lcd.c     **** 
 701:src/lcd.c     **** #if defined(USECURSES) && !defined(DM42) 
 702:src/lcd.c     **** void finish_display(void) {
 703:src/lcd.c     ****         show_disp();
 704:src/lcd.c     ****         MOVE(0, 0);
 705:src/lcd.c     ****         refresh();
 706:src/lcd.c     **** 
 707:src/lcd.c     **** }
 708:src/lcd.c     **** #endif
 709:src/lcd.c     **** #if defined(DM42) 
 710:src/lcd.c     **** void finish_display(void) {
 711:src/lcd.c     ****   //  lcd_clear_buf();
 712:src/lcd.c     ****   lcd_fill_rect (0, 0, 400, 188, 0); //leave bottom 52 rows for menu 
 713:src/lcd.c     ****   show_disp();
 714:src/lcd.c     ****   lcd_refresh();
 715:src/lcd.c     **** }
 716:src/lcd.c     **** 
 717:src/lcd.c     **** void draw_RPN_RCL(void) {
 1587              		.loc 1 717 25 view -0
 1588              		.cfi_startproc
 1589              		@ args = 0, pretend = 0, frame = 0
 1590              		@ frame_needed = 0, uses_anonymous_args = 0
 718:src/lcd.c     ****   t20->inv = !dots[RPN];
 1591              		.loc 1 718 3 view .LVU264
 717:src/lcd.c     ****   t20->inv = !dots[RPN];
 1592              		.loc 1 717 25 is_stmt 0 view .LVU265
 1593 0000 38B5     		push	{r3, r4, r5, lr}
 1594              		.cfi_def_cfa_offset 16
 1595              		.cfi_offset 3, -16
 1596              		.cfi_offset 4, -12
 1597              		.cfi_offset 5, -8
 1598              		.cfi_offset 14, -4
 1599              		.loc 1 718 19 view .LVU266
ARM GAS  /tmp/ccFPIr9f.s 			page 42


 1600 0002 1B4C     		ldr	r4, .L85
 1601              		.loc 1 718 3 view .LVU267
 1602 0004 1B4D     		ldr	r5, .L85+4
 1603              		.loc 1 718 14 view .LVU268
 1604 0006 94F88D30 		ldrb	r3, [r4, #141]	@ zero_extendqisi2
 719:src/lcd.c     ****   if (ENTRY_RPN_ENABLED) {
 1605              		.loc 1 719 7 view .LVU269
 1606 000a 1B4A     		ldr	r2, .L85+8
 718:src/lcd.c     ****   t20->inv = !dots[RPN];
 1607              		.loc 1 718 3 view .LVU270
 1608 000c 286B     		ldr	r0, [r5, #48]
 1609              		.loc 1 719 7 view .LVU271
 1610 000e 1268     		ldr	r2, [r2]
 718:src/lcd.c     ****   t20->inv = !dots[RPN];
 1611              		.loc 1 718 14 view .LVU272
 1612 0010 B3FA83F3 		clz	r3, r3
 1613 0014 5B09     		lsrs	r3, r3, #5
 1614 0016 4374     		strb	r3, [r0, #17]
 1615              		.loc 1 719 3 is_stmt 1 view .LVU273
 1616              		.loc 1 719 7 is_stmt 0 view .LVU274
 1617 0018 92F8AD37 		ldrb	r3, [r2, #1965]	@ zero_extendqisi2
 1618              		.loc 1 719 6 view .LVU275
 1619 001c 13F0020F 		tst	r3, #2
 720:src/lcd.c     ****     lcd_setXY (t20, 355, Y_ANNUNC-30); // 70 is y_ann
 1620              		.loc 1 720 5 view .LVU276
 1621 0020 4FF02D02 		mov	r2, #45
 1622 0024 154B     		ldr	r3, .L85+12
 719:src/lcd.c     ****   if (ENTRY_RPN_ENABLED) {
 1623              		.loc 1 719 6 view .LVU277
 1624 0026 1BD0     		beq	.L82
 1625              		.loc 1 720 5 is_stmt 1 view .LVU278
 1626 0028 40F26311 		movw	r1, #355
 1627 002c 9847     		blx	r3
 1628              	.LVL129:
 721:src/lcd.c     ****     lcd_writeText(t20, "eRPN");
 1629              		.loc 1 721 5 view .LVU279
 1630 002e 286B     		ldr	r0, [r5, #48]
 1631 0030 134B     		ldr	r3, .L85+16
 1632 0032 1449     		ldr	r1, .L85+20
 1633 0034 9847     		blx	r3
 1634              	.LVL130:
 1635              	.L83:
 722:src/lcd.c     ****   }
 723:src/lcd.c     ****   else {
 724:src/lcd.c     ****     lcd_setXY (t20, 365, Y_ANNUNC-30); // 70 is y_ann
 725:src/lcd.c     ****     lcd_writeText(t20, "RPN");
 726:src/lcd.c     ****   }
 727:src/lcd.c     ****   t20->inv = !dots[RCL_annun];
 1636              		.loc 1 727 3 view .LVU280
 1637              		.loc 1 727 14 is_stmt 0 view .LVU281
 1638 0036 94F88A30 		ldrb	r3, [r4, #138]	@ zero_extendqisi2
 1639              		.loc 1 727 3 view .LVU282
 1640 003a 0E4C     		ldr	r4, .L85+4
 728:src/lcd.c     ****   lcd_setXY (t20, 365, Y_ANNUNC-50); // 70 is y_ann
 1641              		.loc 1 728 3 view .LVU283
 1642 003c 0F4D     		ldr	r5, .L85+12
 727:src/lcd.c     ****   lcd_setXY (t20, 365, Y_ANNUNC-50); // 70 is y_ann
ARM GAS  /tmp/ccFPIr9f.s 			page 43


 1643              		.loc 1 727 3 view .LVU284
 1644 003e 206B     		ldr	r0, [r4, #48]
 727:src/lcd.c     ****   lcd_setXY (t20, 365, Y_ANNUNC-50); // 70 is y_ann
 1645              		.loc 1 727 14 view .LVU285
 1646 0040 B3FA83F3 		clz	r3, r3
 1647 0044 5B09     		lsrs	r3, r3, #5
 1648 0046 4374     		strb	r3, [r0, #17]
 1649              		.loc 1 728 3 is_stmt 1 view .LVU286
 1650 0048 1922     		movs	r2, #25
 1651 004a 40F26D11 		movw	r1, #365
 1652 004e A847     		blx	r5
 1653              	.LVL131:
 729:src/lcd.c     ****   lcd_writeText(t20, "RUN");
 1654              		.loc 1 729 3 view .LVU287
 1655 0050 0B4B     		ldr	r3, .L85+16
 1656 0052 206B     		ldr	r0, [r4, #48]
 1657 0054 0C49     		ldr	r1, .L85+24
 1658 0056 9847     		blx	r3
 1659              	.LVL132:
 730:src/lcd.c     ****   t20->inv = 0;
 1660              		.loc 1 730 3 view .LVU288
 1661              		.loc 1 730 12 is_stmt 0 view .LVU289
 1662 0058 236B     		ldr	r3, [r4, #48]
 1663 005a 0022     		movs	r2, #0
 1664 005c 5A74     		strb	r2, [r3, #17]
 731:src/lcd.c     **** }
 1665              		.loc 1 731 1 view .LVU290
 1666 005e 38BD     		pop	{r3, r4, r5, pc}
 1667              	.L82:
 724:src/lcd.c     ****     lcd_writeText(t20, "RPN");
 1668              		.loc 1 724 5 is_stmt 1 view .LVU291
 1669 0060 40F26D11 		movw	r1, #365
 1670 0064 9847     		blx	r3
 1671              	.LVL133:
 725:src/lcd.c     ****   }
 1672              		.loc 1 725 5 view .LVU292
 1673 0066 286B     		ldr	r0, [r5, #48]
 1674 0068 054B     		ldr	r3, .L85+16
 1675 006a 0849     		ldr	r1, .L85+28
 1676 006c 9847     		blx	r3
 1677              	.LVL134:
 1678 006e E2E7     		b	.L83
 1679              	.L86:
 1680              		.align	2
 1681              	.L85:
 1682 0070 00000000 		.word	.LANCHOR0
 1683 0074 00200010 		.word	268443648
 1684 0078 00000000 		.word	main_ram
 1685 007c 6D020008 		.word	134218349
 1686 0080 7D020008 		.word	134218365
 1687 0084 00000000 		.word	.LC0
 1688 0088 0C000000 		.word	.LC2
 1689 008c 08000000 		.word	.LC1
 1690              		.cfi_endproc
 1691              	.LFE30:
 1693              		.section	.rodata.draw_LEQ.str1.4,"aMS",%progbits,1
 1694              		.align	2
ARM GAS  /tmp/ccFPIr9f.s 			page 44


 1695              	.LC3:
 1696 0000 435F4C4B 		.ascii	"C_LK\000"
 1696      00
 1697 0005 000000   		.align	2
 1698              	.LC4:
 1699 0008 3D00     		.ascii	"=\000"
 1700              		.section	.text.draw_LEQ,"ax",%progbits
 1701              		.align	1
 1702              		.p2align 2,,3
 1703              		.global	draw_LEQ
 1704              		.syntax unified
 1705              		.thumb
 1706              		.thumb_func
 1707              		.fpu fpv4-sp-d16
 1709              	draw_LEQ:
 1710              	.LFB31:
 732:src/lcd.c     **** 
 733:src/lcd.c     **** void draw_LEQ(void) { // little equals
 1711              		.loc 1 733 21 view -0
 1712              		.cfi_startproc
 1713              		@ args = 0, pretend = 0, frame = 0
 1714              		@ frame_needed = 0, uses_anonymous_args = 0
 734:src/lcd.c     ****   t20->inv = !dots[LIT_EQ];
 1715              		.loc 1 734 3 view .LVU294
 733:src/lcd.c     ****   t20->inv = !dots[LIT_EQ];
 1716              		.loc 1 733 21 is_stmt 0 view .LVU295
 1717 0000 38B5     		push	{r3, r4, r5, lr}
 1718              		.cfi_def_cfa_offset 16
 1719              		.cfi_offset 3, -16
 1720              		.cfi_offset 4, -12
 1721              		.cfi_offset 5, -8
 1722              		.cfi_offset 14, -4
 1723              		.loc 1 734 19 view .LVU296
 1724 0002 104B     		ldr	r3, .L91
 1725              		.loc 1 734 3 view .LVU297
 1726 0004 104C     		ldr	r4, .L91+4
 1727              		.loc 1 734 14 view .LVU298
 1728 0006 93F88430 		ldrb	r3, [r3, #132]	@ zero_extendqisi2
 1729              		.loc 1 734 3 view .LVU299
 1730 000a 206B     		ldr	r0, [r4, #48]
 735:src/lcd.c     ****   lcd_setXY (t20, 360, Y_ANNUNC-70);
 1731              		.loc 1 735 3 view .LVU300
 1732 000c 0F4D     		ldr	r5, .L91+8
 734:src/lcd.c     ****   t20->inv = !dots[LIT_EQ];
 1733              		.loc 1 734 14 view .LVU301
 1734 000e B3FA83F3 		clz	r3, r3
 1735 0012 5B09     		lsrs	r3, r3, #5
 1736              		.loc 1 735 3 view .LVU302
 1737 0014 4FF4B471 		mov	r1, #360
 734:src/lcd.c     ****   t20->inv = !dots[LIT_EQ];
 1738              		.loc 1 734 14 view .LVU303
 1739 0018 4374     		strb	r3, [r0, #17]
 1740              		.loc 1 735 3 is_stmt 1 view .LVU304
 1741 001a 0522     		movs	r2, #5
 1742 001c A847     		blx	r5
 1743              	.LVL135:
 736:src/lcd.c     ****   if (C_LOCKED) {
ARM GAS  /tmp/ccFPIr9f.s 			page 45


 1744              		.loc 1 736 3 view .LVU305
 737:src/lcd.c     ****     lcd_writeText(t20, "C_LK");
 1745              		.loc 1 737 5 view .LVU306
 738:src/lcd.c     ****   }
 739:src/lcd.c     ****   else {
 740:src/lcd.c     ****     lcd_writeText(t20, "=");
 1746              		.loc 1 740 5 view .LVU307
 736:src/lcd.c     ****     lcd_writeText(t20, "C_LK");
 1747              		.loc 1 736 7 is_stmt 0 view .LVU308
 1748 001e 0C4B     		ldr	r3, .L91+12
 737:src/lcd.c     ****     lcd_writeText(t20, "C_LK");
 1749              		.loc 1 737 5 view .LVU309
 1750 0020 206B     		ldr	r0, [r4, #48]
 736:src/lcd.c     ****     lcd_writeText(t20, "C_LK");
 1751              		.loc 1 736 7 view .LVU310
 1752 0022 1B68     		ldr	r3, [r3]
 1753 0024 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 736:src/lcd.c     ****     lcd_writeText(t20, "C_LK");
 1754              		.loc 1 736 6 view .LVU311
 1755 0028 03F04103 		and	r3, r3, #65
 1756 002c 412B     		cmp	r3, #65
 737:src/lcd.c     ****     lcd_writeText(t20, "C_LK");
 1757              		.loc 1 737 5 view .LVU312
 1758 002e 08BF     		it	eq
 1759 0030 0849     		ldreq	r1, .L91+16
 1760 0032 094B     		ldr	r3, .L91+20
 1761              		.loc 1 740 5 view .LVU313
 1762 0034 18BF     		it	ne
 1763 0036 0949     		ldrne	r1, .L91+24
 1764 0038 9847     		blx	r3
 1765              	.LVL136:
 741:src/lcd.c     ****   }
 742:src/lcd.c     ****   t20->inv = 0;
 1766              		.loc 1 742 3 is_stmt 1 view .LVU314
 1767 003a 034B     		ldr	r3, .L91+4
 1768              		.loc 1 742 12 is_stmt 0 view .LVU315
 1769 003c 1B6B     		ldr	r3, [r3, #48]
 1770 003e 0022     		movs	r2, #0
 1771 0040 5A74     		strb	r2, [r3, #17]
 743:src/lcd.c     **** }
 1772              		.loc 1 743 1 view .LVU316
 1773 0042 38BD     		pop	{r3, r4, r5, pc}
 1774              	.L92:
 1775              		.align	2
 1776              	.L91:
 1777 0044 00000000 		.word	.LANCHOR0
 1778 0048 00200010 		.word	268443648
 1779 004c 6D020008 		.word	134218349
 1780 0050 00000000 		.word	main_ram
 1781 0054 00000000 		.word	.LC3
 1782 0058 7D020008 		.word	134218365
 1783 005c 08000000 		.word	.LC4
 1784              		.cfi_endproc
 1785              	.LFE31:
 1787              		.section	.rodata.draw_PRT.str1.4,"aMS",%progbits,1
 1788              		.align	2
 1789              	.LC5:
ARM GAS  /tmp/ccFPIr9f.s 			page 46


 1790 0000 50525400 		.ascii	"PRT\000"
 1791              		.section	.text.draw_PRT,"ax",%progbits
 1792              		.align	1
 1793              		.p2align 2,,3
 1794              		.global	draw_PRT
 1795              		.syntax unified
 1796              		.thumb
 1797              		.thumb_func
 1798              		.fpu fpv4-sp-d16
 1800              	draw_PRT:
 1801              	.LFB32:
 744:src/lcd.c     **** 
 745:src/lcd.c     **** void draw_PRT (void) {
 1802              		.loc 1 745 22 is_stmt 1 view -0
 1803              		.cfi_startproc
 1804              		@ args = 0, pretend = 0, frame = 0
 1805              		@ frame_needed = 0, uses_anonymous_args = 0
 746:src/lcd.c     ****   t20->inv = !UState.print_on;
 1806              		.loc 1 746 3 view .LVU318
 1807              		.loc 1 746 14 is_stmt 0 view .LVU319
 1808 0000 0A4B     		ldr	r3, .L95
 1809 0002 1B68     		ldr	r3, [r3]
 745:src/lcd.c     ****   t20->inv = !UState.print_on;
 1810              		.loc 1 745 22 view .LVU320
 1811 0004 70B5     		push	{r4, r5, r6, lr}
 1812              		.cfi_def_cfa_offset 16
 1813              		.cfi_offset 4, -16
 1814              		.cfi_offset 5, -12
 1815              		.cfi_offset 6, -8
 1816              		.cfi_offset 14, -4
 1817              		.loc 1 746 12 view .LVU321
 1818 0006 93F8E437 		ldrb	r3, [r3, #2020]	@ zero_extendqisi2
 1819              		.loc 1 746 3 view .LVU322
 1820 000a 094C     		ldr	r4, .L95+4
 747:src/lcd.c     ****   lcd_setXY(t20, 250, Y_ANNUNC-70);
 1821              		.loc 1 747 3 view .LVU323
 1822 000c 094D     		ldr	r5, .L95+8
 746:src/lcd.c     ****   t20->inv = !UState.print_on;
 1823              		.loc 1 746 3 view .LVU324
 1824 000e 206B     		ldr	r0, [r4, #48]
 746:src/lcd.c     ****   t20->inv = !UState.print_on;
 1825              		.loc 1 746 12 view .LVU325
 1826 0010 DB43     		mvns	r3, r3
 1827 0012 03F00103 		and	r3, r3, #1
 1828 0016 4374     		strb	r3, [r0, #17]
 1829              		.loc 1 747 3 is_stmt 1 view .LVU326
 1830 0018 FA21     		movs	r1, #250
 1831 001a 0522     		movs	r2, #5
 1832 001c A847     		blx	r5
 1833              	.LVL137:
 748:src/lcd.c     ****   lcd_writeText(t20,"PRT");
 1834              		.loc 1 748 3 view .LVU327
 1835 001e 206B     		ldr	r0, [r4, #48]
 1836 0020 054B     		ldr	r3, .L95+12
 1837 0022 0649     		ldr	r1, .L95+16
 749:src/lcd.c     **** }
 1838              		.loc 1 749 1 is_stmt 0 view .LVU328
ARM GAS  /tmp/ccFPIr9f.s 			page 47


 1839 0024 BDE87040 		pop	{r4, r5, r6, lr}
 1840              		.cfi_restore 14
 1841              		.cfi_restore 6
 1842              		.cfi_restore 5
 1843              		.cfi_restore 4
 1844              		.cfi_def_cfa_offset 0
 748:src/lcd.c     ****   lcd_writeText(t20,"PRT");
 1845              		.loc 1 748 3 view .LVU329
 1846 0028 1847     		bx	r3	@ indirect register sibling call
 1847              	.LVL138:
 1848              	.L96:
 1849 002a 00BF     		.align	2
 1850              	.L95:
 1851 002c 00000000 		.word	main_ram
 1852 0030 00200010 		.word	268443648
 1853 0034 6D020008 		.word	134218349
 1854 0038 7D020008 		.word	134218365
 1855 003c 00000000 		.word	.LC5
 1856              		.cfi_endproc
 1857              	.LFE32:
 1859              		.section	.rodata.show_disp.str1.4,"aMS",%progbits,1
 1860              		.align	2
 1861              	.LC6:
 1862 0000 414C5048 		.ascii	"ALPHA\000"
 1862      4100
 1863 0006 0000     		.align	2
 1864              	.LC7:
 1865 0008 533A3800 		.ascii	"S:8\000"
 1866              		.align	2
 1867              	.LC8:
 1868 000c 533A3400 		.ascii	"S:4\000"
 1869              		.align	2
 1870              	.LC9:
 1871 0010 50474D00 		.ascii	"PGM\000"
 1872              		.align	2
 1873              	.LC10:
 1874 0014 52414400 		.ascii	"RAD\000"
 1875              		.align	2
 1876              	.LC11:
 1877 0018 44454700 		.ascii	"DEG\000"
 1878              		.section	.text.show_disp,"ax",%progbits
 1879              		.align	1
 1880              		.p2align 2,,3
 1881              		.global	show_disp
 1882              		.syntax unified
 1883              		.thumb
 1884              		.thumb_func
 1885              		.fpu fpv4-sp-d16
 1887              	show_disp:
 1888              	.LFB25:
 249:src/lcd.c     ****   // It may be fast enough. It does mean that clearing everything first is needed,
 1889              		.loc 1 249 22 is_stmt 1 view -0
 1890              		.cfi_startproc
 1891              		@ args = 0, pretend = 0, frame = 0
 1892              		@ frame_needed = 0, uses_anonymous_args = 0
 253:src/lcd.c     **** 	uint32_t x;
 1893              		.loc 1 253 9 view .LVU331
ARM GAS  /tmp/ccFPIr9f.s 			page 48


 254:src/lcd.c     **** 	const uint32_t xleft = 26;
 1894              		.loc 1 254 2 view .LVU332
 255:src/lcd.c     **** 	const uint32_t ytop = 130; // was 170
 1895              		.loc 1 255 2 view .LVU333
 1896              	.LVL139:
 256:src/lcd.c     **** 	const uint32_t dwidth = 25;
 1897              		.loc 1 256 2 view .LVU334
 257:src/lcd.c     **** 	const uint32_t xleft_exp = 344;
 1898              		.loc 1 257 2 view .LVU335
 258:src/lcd.c     **** 	const uint32_t ytop_exp = 130; // was 170
 1899              		.loc 1 258 2 view .LVU336
 259:src/lcd.c     **** 	const uint32_t dwidth_exp = 18;
 1900              		.loc 1 259 2 view .LVU337
 260:src/lcd.c     **** 	const uint32_t y_ann = Y_ANNUNC;
 1901              		.loc 1 260 2 view .LVU338
 261:src/lcd.c     ****         /* Segments 0 - 107 are the main digits */
 1902              		.loc 1 261 2 view .LVU339
 263:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 1903              		.loc 1 263 9 view .LVU340
 263:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 1904              		.loc 1 263 19 view .LVU341
 249:src/lcd.c     ****   // It may be fast enough. It does mean that clearing everything first is needed,
 1905              		.loc 1 249 22 is_stmt 0 view .LVU342
 1906 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1907              		.cfi_def_cfa_offset 36
 1908              		.cfi_offset 4, -36
 1909              		.cfi_offset 5, -32
 1910              		.cfi_offset 6, -28
 1911              		.cfi_offset 7, -24
 1912              		.cfi_offset 8, -20
 1913              		.cfi_offset 9, -16
 1914              		.cfi_offset 10, -12
 1915              		.cfi_offset 11, -8
 1916              		.cfi_offset 14, -4
 1917 0004 DFF8C0B0 		ldr	fp, .L234+4
 1918              	.LBB65:
 1919              	.LBB66:
 202:src/lcd.c     **** }
 1920              		.loc 1 202 3 view .LVU343
 1921 0008 2E4F     		ldr	r7, .L234
 1922              	.LBE66:
 1923              	.LBE65:
 249:src/lcd.c     ****   // It may be fast enough. It does mean that clearing everything first is needed,
 1924              		.loc 1 249 22 view .LVU344
 1925 000a 83B0     		sub	sp, sp, #12
 1926              		.cfi_def_cfa_offset 48
 249:src/lcd.c     ****   // It may be fast enough. It does mean that clearing everything first is needed,
 1927              		.loc 1 249 22 view .LVU345
 1928 000c 5E46     		mov	r6, fp
 1929 000e 5C46     		mov	r4, fp
 1930 0010 1A25     		movs	r5, #26
 1931 0012 24E0     		b	.L107
 1932              	.LVL140:
 1933              	.L98:
 269:src/lcd.c     **** 		  left_side_top (x, ytop);
 1934              		.loc 1 269 17 is_stmt 1 view .LVU346
 269:src/lcd.c     **** 		  left_side_top (x, ytop);
ARM GAS  /tmp/ccFPIr9f.s 			page 49


 1935              		.loc 1 269 20 is_stmt 0 view .LVU347
 1936 0014 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1937 0016 002B     		cmp	r3, #0
 1938 0018 2BD1     		bne	.L217
 1939              	.L99:
 272:src/lcd.c     **** 		  right_side_top (x, ytop);
 1940              		.loc 1 272 17 is_stmt 1 view .LVU348
 272:src/lcd.c     **** 		  right_side_top (x, ytop);
 1941              		.loc 1 272 20 is_stmt 0 view .LVU349
 1942 001a E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
 1943 001c 002B     		cmp	r3, #0
 1944 001e 2FD1     		bne	.L218
 1945              	.L100:
 275:src/lcd.c     **** 		  middle (x, ytop);
 1946              		.loc 1 275 17 is_stmt 1 view .LVU350
 275:src/lcd.c     **** 		  middle (x, ytop);
 1947              		.loc 1 275 20 is_stmt 0 view .LVU351
 1948 0020 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 1949 0022 002B     		cmp	r3, #0
 1950 0024 33D1     		bne	.L219
 1951              	.L101:
 278:src/lcd.c     **** 		  left_side_bottom (x, ytop);
 1952              		.loc 1 278 17 is_stmt 1 view .LVU352
 278:src/lcd.c     **** 		  left_side_bottom (x, ytop);
 1953              		.loc 1 278 20 is_stmt 0 view .LVU353
 1954 0026 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 1955 0028 002B     		cmp	r3, #0
 1956 002a 37D1     		bne	.L220
 1957              	.L102:
 281:src/lcd.c     **** 		  right_side_bottom (x, ytop);
 1958              		.loc 1 281 17 is_stmt 1 view .LVU354
 281:src/lcd.c     **** 		  right_side_bottom (x, ytop);
 1959              		.loc 1 281 20 is_stmt 0 view .LVU355
 1960 002c A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 1961 002e 002B     		cmp	r3, #0
 1962 0030 3BD1     		bne	.L221
 1963              	.L103:
 284:src/lcd.c     **** 		  bottom (x, ytop);
 1964              		.loc 1 284 17 is_stmt 1 view .LVU356
 284:src/lcd.c     **** 		  bottom (x, ytop);
 1965              		.loc 1 284 20 is_stmt 0 view .LVU357
 1966 0032 6379     		ldrb	r3, [r4, #5]	@ zero_extendqisi2
 1967 0034 002B     		cmp	r3, #0
 1968 0036 3FD1     		bne	.L222
 1969              	.L104:
 287:src/lcd.c     **** 		  decimal (x, ytop);
 1970              		.loc 1 287 17 is_stmt 1 view .LVU358
 287:src/lcd.c     **** 		  decimal (x, ytop);
 1971              		.loc 1 287 20 is_stmt 0 view .LVU359
 1972 0038 E379     		ldrb	r3, [r4, #7]	@ zero_extendqisi2
 1973 003a 3BB1     		cbz	r3, .L105
 288:src/lcd.c     ****                 }
 1974              		.loc 1 288 5 is_stmt 1 view .LVU360
 1975              	.LVL141:
 1976              	.LBB68:
 1977              	.LBI65:
 201:src/lcd.c     ****   lcd_fill_rect (i+19, j+40, 5, 5, 0xff);
ARM GAS  /tmp/ccFPIr9f.s 			page 50


 1978              		.loc 1 201 6 view .LVU361
 1979              	.LBB67:
 202:src/lcd.c     **** }
 1980              		.loc 1 202 3 view .LVU362
 1981 003c FF22     		movs	r2, #255
 1982 003e 0523     		movs	r3, #5
 1983 0040 0092     		str	r2, [sp]
 1984 0042 AA21     		movs	r1, #170
 1985 0044 1A46     		mov	r2, r3
 1986 0046 05F11300 		add	r0, r5, #19
 1987 004a B847     		blx	r7
 1988              	.LVL142:
 1989              	.L105:
 202:src/lcd.c     **** }
 1990              		.loc 1 202 3 is_stmt 0 view .LVU363
 1991              	.LBE67:
 1992              	.LBE68:
 290:src/lcd.c     **** 		  comma (x, ytop);
 1993              		.loc 1 290 17 is_stmt 1 view .LVU364
 290:src/lcd.c     **** 		  comma (x, ytop);
 1994              		.loc 1 290 20 is_stmt 0 view .LVU365
 1995 004c 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 1996 004e 002B     		cmp	r3, #0
 1997 0050 3CD1     		bne	.L223
 263:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 1998              		.loc 1 263 37 is_stmt 1 discriminator 2 view .LVU366
 263:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 1999              		.loc 1 263 19 discriminator 2 view .LVU367
 2000 0052 1935     		adds	r5, r5, #25
 2001              	.LVL143:
 263:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 2002              		.loc 1 263 9 is_stmt 0 discriminator 2 view .LVU368
 2003 0054 B5F5A37F 		cmp	r5, #326
 2004 0058 04F10904 		add	r4, r4, #9
 2005              	.LVL144:
 263:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 2006              		.loc 1 263 9 discriminator 2 view .LVU369
 2007 005c 40D0     		beq	.L224
 2008              	.LVL145:
 2009              	.L107:
 264:src/lcd.c     ****                 x = xleft + dwidth*i;
 2010              		.loc 1 264 17 is_stmt 1 view .LVU370
 265:src/lcd.c     ****                 if (dots[p]) { // top
 2011              		.loc 1 265 17 view .LVU371
 266:src/lcd.c     **** 		  top (x, ytop);
 2012              		.loc 1 266 17 view .LVU372
 266:src/lcd.c     **** 		  top (x, ytop);
 2013              		.loc 1 266 20 is_stmt 0 view .LVU373
 2014 005e 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2015 0060 002B     		cmp	r3, #0
 2016 0062 D7D0     		beq	.L98
 267:src/lcd.c     ****                 }
 2017              		.loc 1 267 5 is_stmt 1 view .LVU374
 2018 0064 8221     		movs	r1, #130
 2019 0066 2846     		mov	r0, r5
 2020 0068 FFF7FEFF 		bl	top
 2021              	.LVL146:
ARM GAS  /tmp/ccFPIr9f.s 			page 51


 269:src/lcd.c     **** 		  left_side_top (x, ytop);
 2022              		.loc 1 269 17 view .LVU375
 269:src/lcd.c     **** 		  left_side_top (x, ytop);
 2023              		.loc 1 269 20 is_stmt 0 view .LVU376
 2024 006c 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 2025 006e 002B     		cmp	r3, #0
 2026 0070 D3D0     		beq	.L99
 2027              	.L217:
 270:src/lcd.c     ****                 }
 2028              		.loc 1 270 5 is_stmt 1 view .LVU377
 2029              	.LVL147:
 2030              	.LBB69:
 2031              	.LBI69:
 165:src/lcd.c     ****   left_side(i, j);
 2032              		.loc 1 165 6 view .LVU378
 2033              	.LBB70:
 166:src/lcd.c     **** }
 2034              		.loc 1 166 3 view .LVU379
 2035 0072 8221     		movs	r1, #130
 2036 0074 2846     		mov	r0, r5
 2037 0076 FFF7FEFF 		bl	left_side
 2038              	.LVL148:
 166:src/lcd.c     **** }
 2039              		.loc 1 166 3 is_stmt 0 view .LVU380
 2040              	.LBE70:
 2041              	.LBE69:
 272:src/lcd.c     **** 		  right_side_top (x, ytop);
 2042              		.loc 1 272 17 is_stmt 1 view .LVU381
 272:src/lcd.c     **** 		  right_side_top (x, ytop);
 2043              		.loc 1 272 20 is_stmt 0 view .LVU382
 2044 007a E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
 2045 007c 002B     		cmp	r3, #0
 2046 007e CFD0     		beq	.L100
 2047              	.L218:
 273:src/lcd.c     ****                 }
 2048              		.loc 1 273 5 is_stmt 1 view .LVU383
 2049              	.LVL149:
 2050              	.LBB71:
 2051              	.LBI71:
 178:src/lcd.c     ****   right_side(i, j);
 2052              		.loc 1 178 6 view .LVU384
 2053              	.LBB72:
 179:src/lcd.c     **** }
 2054              		.loc 1 179 3 view .LVU385
 2055 0080 8221     		movs	r1, #130
 2056 0082 2846     		mov	r0, r5
 2057 0084 FFF7FEFF 		bl	right_side
 2058              	.LVL150:
 179:src/lcd.c     **** }
 2059              		.loc 1 179 3 is_stmt 0 view .LVU386
 2060              	.LBE72:
 2061              	.LBE71:
 275:src/lcd.c     **** 		  middle (x, ytop);
 2062              		.loc 1 275 17 is_stmt 1 view .LVU387
 275:src/lcd.c     **** 		  middle (x, ytop);
 2063              		.loc 1 275 20 is_stmt 0 view .LVU388
 2064 0088 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
ARM GAS  /tmp/ccFPIr9f.s 			page 52


 2065 008a 002B     		cmp	r3, #0
 2066 008c CBD0     		beq	.L101
 2067              	.L219:
 276:src/lcd.c     ****                 }
 2068              		.loc 1 276 5 is_stmt 1 view .LVU389
 2069 008e 8221     		movs	r1, #130
 2070 0090 2846     		mov	r0, r5
 2071 0092 FFF7FEFF 		bl	middle
 2072              	.LVL151:
 278:src/lcd.c     **** 		  left_side_bottom (x, ytop);
 2073              		.loc 1 278 17 view .LVU390
 278:src/lcd.c     **** 		  left_side_bottom (x, ytop);
 2074              		.loc 1 278 20 is_stmt 0 view .LVU391
 2075 0096 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2076 0098 002B     		cmp	r3, #0
 2077 009a C7D0     		beq	.L102
 2078              	.L220:
 279:src/lcd.c     ****                 }
 2079              		.loc 1 279 5 is_stmt 1 view .LVU392
 2080              	.LVL152:
 2081              	.LBB73:
 2082              	.LBI73:
 168:src/lcd.c     ****   left_side(i-2, j+19);
 2083              		.loc 1 168 6 view .LVU393
 2084              	.LBB74:
 169:src/lcd.c     **** }
 2085              		.loc 1 169 3 view .LVU394
 2086 009c 9521     		movs	r1, #149
 2087 009e A81E     		subs	r0, r5, #2
 2088 00a0 FFF7FEFF 		bl	left_side
 2089              	.LVL153:
 169:src/lcd.c     **** }
 2090              		.loc 1 169 3 is_stmt 0 view .LVU395
 2091              	.LBE74:
 2092              	.LBE73:
 281:src/lcd.c     **** 		  right_side_bottom (x, ytop);
 2093              		.loc 1 281 17 is_stmt 1 view .LVU396
 281:src/lcd.c     **** 		  right_side_bottom (x, ytop);
 2094              		.loc 1 281 20 is_stmt 0 view .LVU397
 2095 00a4 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2096 00a6 002B     		cmp	r3, #0
 2097 00a8 C3D0     		beq	.L103
 2098              	.L221:
 282:src/lcd.c     ****                 }
 2099              		.loc 1 282 5 is_stmt 1 view .LVU398
 2100              	.LVL154:
 2101              	.LBB75:
 2102              	.LBI75:
 181:src/lcd.c     ****   right_side(i-2, j+19);
 2103              		.loc 1 181 6 view .LVU399
 2104              	.LBB76:
 182:src/lcd.c     **** }
 2105              		.loc 1 182 3 view .LVU400
 2106 00aa 9521     		movs	r1, #149
 2107 00ac A81E     		subs	r0, r5, #2
 2108 00ae FFF7FEFF 		bl	right_side
 2109              	.LVL155:
ARM GAS  /tmp/ccFPIr9f.s 			page 53


 182:src/lcd.c     **** }
 2110              		.loc 1 182 3 is_stmt 0 view .LVU401
 2111              	.LBE76:
 2112              	.LBE75:
 284:src/lcd.c     **** 		  bottom (x, ytop);
 2113              		.loc 1 284 17 is_stmt 1 view .LVU402
 284:src/lcd.c     **** 		  bottom (x, ytop);
 2114              		.loc 1 284 20 is_stmt 0 view .LVU403
 2115 00b2 6379     		ldrb	r3, [r4, #5]	@ zero_extendqisi2
 2116 00b4 002B     		cmp	r3, #0
 2117 00b6 BFD0     		beq	.L104
 2118              	.L222:
 285:src/lcd.c     ****                 }
 2119              		.loc 1 285 5 is_stmt 1 view .LVU404
 2120 00b8 8221     		movs	r1, #130
 2121 00ba 2846     		mov	r0, r5
 2122 00bc FFF7FEFF 		bl	bottom
 2123              	.LVL156:
 2124 00c0 BAE7     		b	.L104
 2125              	.L235:
 2126 00c2 00BF     		.align	2
 2127              	.L234:
 2128 00c4 3D020008 		.word	134218301
 2129 00c8 00000000 		.word	.LANCHOR0
 2130              	.L223:
 291:src/lcd.c     ****                 }
 2131              		.loc 1 291 5 view .LVU405
 2132 00cc 2846     		mov	r0, r5
 2133 00ce 8221     		movs	r1, #130
 2134 00d0 1935     		adds	r5, r5, #25
 2135              	.LVL157:
 291:src/lcd.c     ****                 }
 2136              		.loc 1 291 5 is_stmt 0 view .LVU406
 2137 00d2 FFF7FEFF 		bl	comma
 2138              	.LVL158:
 263:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 2139              		.loc 1 263 37 is_stmt 1 view .LVU407
 263:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 2140              		.loc 1 263 19 view .LVU408
 263:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 2141              		.loc 1 263 9 is_stmt 0 view .LVU409
 2142 00d6 B5F5A37F 		cmp	r5, #326
 2143 00da 04F10904 		add	r4, r4, #9
 2144              	.LVL159:
 263:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 2145              		.loc 1 263 9 view .LVU410
 2146 00de BED1     		bne	.L107
 2147              	.LVL160:
 2148              	.L224:
 263:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 2149              		.loc 1 263 9 view .LVU411
 2150 00e0 A34C     		ldr	r4, .L236
 2151 00e2 4FF4AC75 		mov	r5, #344
 2152              	.L115:
 296:src/lcd.c     ****                 x = xleft_exp + dwidth_exp*i;
 2153              		.loc 1 296 17 is_stmt 1 view .LVU412
 2154              	.LVL161:
ARM GAS  /tmp/ccFPIr9f.s 			page 54


 297:src/lcd.c     ****                 if (dots[p]) { // top
 2155              		.loc 1 297 17 view .LVU413
 298:src/lcd.c     **** 		  exp_top (x, ytop_exp);
 2156              		.loc 1 298 17 view .LVU414
 298:src/lcd.c     **** 		  exp_top (x, ytop_exp);
 2157              		.loc 1 298 20 is_stmt 0 view .LVU415
 2158 00e6 94F86C30 		ldrb	r3, [r4, #108]	@ zero_extendqisi2
 2159 00ea 002B     		cmp	r3, #0
 2160 00ec 40F02181 		bne	.L225
 2161              	.L108:
 301:src/lcd.c     **** 		  exp_left_side_top (x, ytop_exp);
 2162              		.loc 1 301 17 is_stmt 1 view .LVU416
 301:src/lcd.c     **** 		  exp_left_side_top (x, ytop_exp);
 2163              		.loc 1 301 20 is_stmt 0 view .LVU417
 2164 00f0 94F86D30 		ldrb	r3, [r4, #109]	@ zero_extendqisi2
 2165 00f4 002B     		cmp	r3, #0
 2166 00f6 40F01781 		bne	.L226
 2167              	.L109:
 304:src/lcd.c     **** 		  exp_right_side_top (x, ytop_exp);
 2168              		.loc 1 304 17 is_stmt 1 view .LVU418
 304:src/lcd.c     **** 		  exp_right_side_top (x, ytop_exp);
 2169              		.loc 1 304 20 is_stmt 0 view .LVU419
 2170 00fa 94F86F30 		ldrb	r3, [r4, #111]	@ zero_extendqisi2
 2171 00fe 002B     		cmp	r3, #0
 2172 0100 40F00D81 		bne	.L227
 2173              	.L110:
 307:src/lcd.c     **** 		  exp_middle (x, ytop_exp);
 2174              		.loc 1 307 17 is_stmt 1 view .LVU420
 307:src/lcd.c     **** 		  exp_middle (x, ytop_exp);
 2175              		.loc 1 307 20 is_stmt 0 view .LVU421
 2176 0104 94F86E30 		ldrb	r3, [r4, #110]	@ zero_extendqisi2
 2177 0108 002B     		cmp	r3, #0
 2178 010a 40F00381 		bne	.L228
 2179              	.L111:
 310:src/lcd.c     **** 		  exp_left_side_bottom (x, ytop_exp);
 2180              		.loc 1 310 17 is_stmt 1 view .LVU422
 310:src/lcd.c     **** 		  exp_left_side_bottom (x, ytop_exp);
 2181              		.loc 1 310 20 is_stmt 0 view .LVU423
 2182 010e 94F87030 		ldrb	r3, [r4, #112]	@ zero_extendqisi2
 2183 0112 002B     		cmp	r3, #0
 2184 0114 40F0F980 		bne	.L229
 2185              	.L112:
 313:src/lcd.c     **** 		  exp_right_side_bottom (x, ytop_exp);
 2186              		.loc 1 313 17 is_stmt 1 view .LVU424
 313:src/lcd.c     **** 		  exp_right_side_bottom (x, ytop_exp);
 2187              		.loc 1 313 20 is_stmt 0 view .LVU425
 2188 0118 94F87230 		ldrb	r3, [r4, #114]	@ zero_extendqisi2
 2189 011c 002B     		cmp	r3, #0
 2190 011e 40F0EF80 		bne	.L230
 2191              	.L113:
 316:src/lcd.c     **** 		  exp_bottom (x, ytop_exp);
 2192              		.loc 1 316 17 is_stmt 1 view .LVU426
 316:src/lcd.c     **** 		  exp_bottom (x, ytop_exp);
 2193              		.loc 1 316 20 is_stmt 0 view .LVU427
 2194 0122 94F87130 		ldrb	r3, [r4, #113]	@ zero_extendqisi2
 2195 0126 002B     		cmp	r3, #0
 2196 0128 40F0E580 		bne	.L231
ARM GAS  /tmp/ccFPIr9f.s 			page 55


 2197              	.L114:
 295:src/lcd.c     ****                 p = i*7+108;
 2198              		.loc 1 295 24 is_stmt 1 discriminator 2 view .LVU428
 295:src/lcd.c     ****                 p = i*7+108;
 2199              		.loc 1 295 19 discriminator 2 view .LVU429
 2200 012c 1235     		adds	r5, r5, #18
 2201              	.LVL162:
 295:src/lcd.c     ****                 p = i*7+108;
 2202              		.loc 1 295 9 is_stmt 0 discriminator 2 view .LVU430
 2203 012e B5F5C77F 		cmp	r5, #398
 2204 0132 04F10704 		add	r4, r4, #7
 2205              	.LVL163:
 295:src/lcd.c     ****                 p = i*7+108;
 2206              		.loc 1 295 9 discriminator 2 view .LVU431
 2207 0136 D6D1     		bne	.L115
 321:src/lcd.c     **** 	  middle (xleft - dwidth, ytop);
 2208              		.loc 1 321 9 is_stmt 1 view .LVU432
 321:src/lcd.c     **** 	  middle (xleft - dwidth, ytop);
 2209              		.loc 1 321 12 is_stmt 0 view .LVU433
 2210 0138 96F88130 		ldrb	r3, [r6, #129]	@ zero_extendqisi2
 2211 013c 002B     		cmp	r3, #0
 2212 013e 40F00881 		bne	.L232
 324:src/lcd.c     **** 	  exp_middle (xleft_exp-dwidth_exp, ytop);
 2213              		.loc 1 324 9 is_stmt 1 view .LVU434
 324:src/lcd.c     **** 	  exp_middle (xleft_exp-dwidth_exp, ytop);
 2214              		.loc 1 324 12 is_stmt 0 view .LVU435
 2215 0142 96F88230 		ldrb	r3, [r6, #130]	@ zero_extendqisi2
 2216 0146 002B     		cmp	r3, #0
 2217 0148 40F00C81 		bne	.L233
 2218              	.L117:
 328:src/lcd.c     **** 	  lcd_fill_rect (250, y_ann-34, 15, 4, 0xff);
 2219              		.loc 1 328 2 is_stmt 1 view .LVU436
 328:src/lcd.c     **** 	  lcd_fill_rect (250, y_ann-34, 15, 4, 0xff);
 2220              		.loc 1 328 5 is_stmt 0 view .LVU437
 2221 014c 96F88330 		ldrb	r3, [r6, #131]	@ zero_extendqisi2
 2222 0150 6BB1     		cbz	r3, .L118
 329:src/lcd.c     **** 	  lcd_fill_rect (250, y_ann-24, 15, 4, 0xff);
 2223              		.loc 1 329 4 is_stmt 1 view .LVU438
 2224 0152 FF25     		movs	r5, #255
 2225              	.LVL164:
 329:src/lcd.c     **** 	  lcd_fill_rect (250, y_ann-24, 15, 4, 0xff);
 2226              		.loc 1 329 4 is_stmt 0 view .LVU439
 2227 0154 0423     		movs	r3, #4
 2228 0156 0F22     		movs	r2, #15
 2229 0158 2921     		movs	r1, #41
 2230 015a FA20     		movs	r0, #250
 2231 015c 854C     		ldr	r4, .L236+4
 2232              	.LVL165:
 329:src/lcd.c     **** 	  lcd_fill_rect (250, y_ann-24, 15, 4, 0xff);
 2233              		.loc 1 329 4 view .LVU440
 2234 015e 0095     		str	r5, [sp]
 2235 0160 A047     		blx	r4
 2236              	.LVL166:
 330:src/lcd.c     ****         }
 2237              		.loc 1 330 4 is_stmt 1 view .LVU441
 2238 0162 0095     		str	r5, [sp]
 2239 0164 0423     		movs	r3, #4
ARM GAS  /tmp/ccFPIr9f.s 			page 56


 2240 0166 0F22     		movs	r2, #15
 2241 0168 3321     		movs	r1, #51
 2242 016a FA20     		movs	r0, #250
 2243 016c A047     		blx	r4
 2244              	.LVL167:
 2245              	.L118:
 332:src/lcd.c     **** 	
 2246              		.loc 1 332 2 view .LVU442
 2247 016e 824B     		ldr	r3, .L236+8
 332:src/lcd.c     **** 	
 2248              		.loc 1 332 11 is_stmt 0 view .LVU443
 2249 0170 1B6B     		ldr	r3, [r3, #48]
 2250 0172 0022     		movs	r2, #0
 2251 0174 5A74     		strb	r2, [r3, #17]
 334:src/lcd.c     **** 	
 2252              		.loc 1 334 2 is_stmt 1 view .LVU444
 2253 0176 FFF7FEFF 		bl	draw_PRT
 2254              	.LVL168:
 341:src/lcd.c     **** 	  lcd_fill_rect(287,y_ann-67,5,12,0xff);
 2255              		.loc 1 341 9 view .LVU445
 341:src/lcd.c     **** 	  lcd_fill_rect(287,y_ann-67,5,12,0xff);
 2256              		.loc 1 341 12 is_stmt 0 view .LVU446
 2257 017a 96F88530 		ldrb	r3, [r6, #133]	@ zero_extendqisi2
 2258 017e 5BB3     		cbz	r3, .L119
 342:src/lcd.c     **** 	  lcd_fill_rect(285,y_ann-55,9,1,0xff);
 2259              		.loc 1 342 4 is_stmt 1 view .LVU447
 2260 0180 FF25     		movs	r5, #255
 2261 0182 7C4C     		ldr	r4, .L236+4
 2262 0184 0095     		str	r5, [sp]
 2263 0186 0C23     		movs	r3, #12
 2264 0188 0522     		movs	r2, #5
 2265 018a 0821     		movs	r1, #8
 2266 018c 40F21F10 		movw	r0, #287
 2267 0190 A047     		blx	r4
 2268              	.LVL169:
 343:src/lcd.c     **** 	  lcd_fill_rect(286,y_ann-54,7,1,0xff);
 2269              		.loc 1 343 4 view .LVU448
 2270 0192 0123     		movs	r3, #1
 2271 0194 0922     		movs	r2, #9
 2272 0196 1421     		movs	r1, #20
 2273 0198 40F21D10 		movw	r0, #285
 2274 019c 0095     		str	r5, [sp]
 2275 019e A047     		blx	r4
 2276              	.LVL170:
 344:src/lcd.c     **** 	  lcd_fill_rect(287,y_ann-53,5,1,0xff);
 2277              		.loc 1 344 4 view .LVU449
 2278 01a0 0123     		movs	r3, #1
 2279 01a2 0722     		movs	r2, #7
 2280 01a4 1521     		movs	r1, #21
 2281 01a6 4FF48F70 		mov	r0, #286
 2282 01aa 0095     		str	r5, [sp]
 2283 01ac A047     		blx	r4
 2284              	.LVL171:
 345:src/lcd.c     **** 	  lcd_fill_rect(288,y_ann-52,3,1,0xff);
 2285              		.loc 1 345 4 view .LVU450
 2286 01ae 0123     		movs	r3, #1
 2287 01b0 0522     		movs	r2, #5
ARM GAS  /tmp/ccFPIr9f.s 			page 57


 2288 01b2 1621     		movs	r1, #22
 2289 01b4 40F21F10 		movw	r0, #287
 2290 01b8 0095     		str	r5, [sp]
 2291 01ba A047     		blx	r4
 2292              	.LVL172:
 346:src/lcd.c     **** 	  lcd_fill_rect(289,y_ann-51,1,1,0xff);
 2293              		.loc 1 346 4 view .LVU451
 2294 01bc 0123     		movs	r3, #1
 2295 01be 0322     		movs	r2, #3
 2296 01c0 1721     		movs	r1, #23
 2297 01c2 4FF49070 		mov	r0, #288
 2298 01c6 0095     		str	r5, [sp]
 2299 01c8 A047     		blx	r4
 2300              	.LVL173:
 347:src/lcd.c     ****         }
 2301              		.loc 1 347 4 view .LVU452
 2302 01ca 0123     		movs	r3, #1
 2303 01cc 0095     		str	r5, [sp]
 2304 01ce 1A46     		mov	r2, r3
 2305 01d0 1821     		movs	r1, #24
 2306 01d2 40F22110 		movw	r0, #289
 2307 01d6 A047     		blx	r4
 2308              	.LVL174:
 2309              	.L119:
 350:src/lcd.c     **** 	  lcd_setXY(t20, 305, y_ann-70);
 2310              		.loc 1 350 2 view .LVU453
 350:src/lcd.c     **** 	  lcd_setXY(t20, 305, y_ann-70);
 2311              		.loc 1 350 5 is_stmt 0 view .LVU454
 2312 01d8 96F88630 		ldrb	r3, [r6, #134]	@ zero_extendqisi2
 2313 01dc 53B1     		cbz	r3, .L120
 351:src/lcd.c     **** 	  lcd_writeText(t20,"ALPHA");
 2314              		.loc 1 351 4 is_stmt 1 view .LVU455
 2315 01de 664C     		ldr	r4, .L236+8
 2316 01e0 664B     		ldr	r3, .L236+12
 2317 01e2 206B     		ldr	r0, [r4, #48]
 2318 01e4 40F23111 		movw	r1, #305
 2319 01e8 0522     		movs	r2, #5
 2320 01ea 9847     		blx	r3
 2321              	.LVL175:
 352:src/lcd.c     ****         }
 2322              		.loc 1 352 4 view .LVU456
 2323 01ec 206B     		ldr	r0, [r4, #48]
 2324 01ee 644B     		ldr	r3, .L236+16
 2325 01f0 6449     		ldr	r1, .L236+20
 2326 01f2 9847     		blx	r3
 2327              	.LVL176:
 2328              	.L120:
 365:src/lcd.c     **** 	
 2329              		.loc 1 365 2 view .LVU457
 2330 01f4 FFF7FEFF 		bl	draw_LEQ
 2331              	.LVL177:
 367:src/lcd.c     **** 	  //    MOVE(70, 10);   PRINTF("####-");
 2332              		.loc 1 367 2 view .LVU458
 369:src/lcd.c     **** #ifdef MODIFY_BEG_SSIZE8
 2333              		.loc 1 369 9 view .LVU459
 371:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-50);
 2334              		.loc 1 371 2 view .LVU460
ARM GAS  /tmp/ccFPIr9f.s 			page 58


 371:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-50);
 2335              		.loc 1 371 5 is_stmt 0 view .LVU461
 2336 01f8 96F88830 		ldrb	r3, [r6, #136]	@ zero_extendqisi2
 372:src/lcd.c     **** 	  lcd_writeText(t20, "S:8");
 2337              		.loc 1 372 4 view .LVU462
 2338 01fc 5E4C     		ldr	r4, .L236+8
 371:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-50);
 2339              		.loc 1 371 5 view .LVU463
 2340 01fe 002B     		cmp	r3, #0
 2341 0200 00F09C80 		beq	.L121
 372:src/lcd.c     **** 	  lcd_writeText(t20, "S:8");
 2342              		.loc 1 372 4 is_stmt 1 view .LVU464
 2343 0204 5D4B     		ldr	r3, .L236+12
 2344 0206 206B     		ldr	r0, [r4, #48]
 2345 0208 40F21D11 		movw	r1, #285
 2346 020c 1922     		movs	r2, #25
 2347 020e 9847     		blx	r3
 2348              	.LVL178:
 373:src/lcd.c     ****         }
 2349              		.loc 1 373 4 view .LVU465
 2350 0210 206B     		ldr	r0, [r4, #48]
 2351 0212 5B4B     		ldr	r3, .L236+16
 2352 0214 5C49     		ldr	r1, .L236+24
 2353 0216 9847     		blx	r3
 2354              	.LVL179:
 2355              	.L122:
 385:src/lcd.c     **** 	  lcd_setXY (t20, 325, y_ann-50);
 2356              		.loc 1 385 2 view .LVU466
 385:src/lcd.c     **** 	  lcd_setXY (t20, 325, y_ann-50);
 2357              		.loc 1 385 5 is_stmt 0 view .LVU467
 2358 0218 96F88930 		ldrb	r3, [r6, #137]	@ zero_extendqisi2
 2359 021c 53B1     		cbz	r3, .L123
 386:src/lcd.c     **** 	  lcd_writeText(t20, "PGM");
 2360              		.loc 1 386 4 is_stmt 1 view .LVU468
 2361 021e 564C     		ldr	r4, .L236+8
 2362 0220 564B     		ldr	r3, .L236+12
 2363 0222 206B     		ldr	r0, [r4, #48]
 2364 0224 40F24511 		movw	r1, #325
 2365 0228 1922     		movs	r2, #25
 2366 022a 9847     		blx	r3
 2367              	.LVL180:
 387:src/lcd.c     ****         }
 2368              		.loc 1 387 4 view .LVU469
 2369 022c 206B     		ldr	r0, [r4, #48]
 2370 022e 544B     		ldr	r3, .L236+16
 2371 0230 5649     		ldr	r1, .L236+28
 2372 0232 9847     		blx	r3
 2373              	.LVL181:
 2374              	.L123:
 395:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-30);
 2375              		.loc 1 395 2 view .LVU470
 395:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-30);
 2376              		.loc 1 395 5 is_stmt 0 view .LVU471
 2377 0234 96F88B30 		ldrb	r3, [r6, #139]	@ zero_extendqisi2
 2378 0238 53B1     		cbz	r3, .L124
 396:src/lcd.c     **** 	  lcd_writeText(t20, "RAD");
 2379              		.loc 1 396 4 is_stmt 1 view .LVU472
ARM GAS  /tmp/ccFPIr9f.s 			page 59


 2380 023a 4F4C     		ldr	r4, .L236+8
 2381 023c 4F4B     		ldr	r3, .L236+12
 2382 023e 206B     		ldr	r0, [r4, #48]
 2383 0240 40F21D11 		movw	r1, #285
 2384 0244 2D22     		movs	r2, #45
 2385 0246 9847     		blx	r3
 2386              	.LVL182:
 397:src/lcd.c     **** 	}
 2387              		.loc 1 397 4 view .LVU473
 2388 0248 206B     		ldr	r0, [r4, #48]
 2389 024a 4D4B     		ldr	r3, .L236+16
 2390 024c 5049     		ldr	r1, .L236+32
 2391 024e 9847     		blx	r3
 2392              	.LVL183:
 2393              	.L124:
 400:src/lcd.c     **** 	  lcd_setXY (t20, 325, y_ann-30);
 2394              		.loc 1 400 2 view .LVU474
 400:src/lcd.c     **** 	  lcd_setXY (t20, 325, y_ann-30);
 2395              		.loc 1 400 5 is_stmt 0 view .LVU475
 2396 0250 96F88C30 		ldrb	r3, [r6, #140]	@ zero_extendqisi2
 2397 0254 53B1     		cbz	r3, .L125
 401:src/lcd.c     **** 	  lcd_writeText(t20, "DEG");
 2398              		.loc 1 401 4 is_stmt 1 view .LVU476
 2399 0256 484C     		ldr	r4, .L236+8
 2400 0258 484B     		ldr	r3, .L236+12
 2401 025a 206B     		ldr	r0, [r4, #48]
 2402 025c 40F24511 		movw	r1, #325
 2403 0260 2D22     		movs	r2, #45
 2404 0262 9847     		blx	r3
 2405              	.LVL184:
 402:src/lcd.c     ****         }
 2406              		.loc 1 402 4 view .LVU477
 2407 0264 206B     		ldr	r0, [r4, #48]
 2408 0266 464B     		ldr	r3, .L236+16
 2409 0268 4A49     		ldr	r1, .L236+36
 2410 026a 9847     		blx	r3
 2411              	.LVL185:
 2412              	.L125:
 413:src/lcd.c     **** 	
 2413              		.loc 1 413 2 view .LVU478
 2414 026c FFF7FEFF 		bl	draw_RPN_RCL
 2415              	.LVL186:
 416:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 2416              		.loc 1 416 9 view .LVU479
 416:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 2417              		.loc 1 416 19 view .LVU480
 419:src/lcd.c     **** 	    }
 2418              		.loc 1 419 8 is_stmt 0 view .LVU481
 2419 0270 DFF80081 		ldr	r8, .L236+4
 413:src/lcd.c     **** 	
 2420              		.loc 1 413 2 view .LVU482
 2421 0274 0027     		movs	r7, #0
 2422 0276 1026     		movs	r6, #16
 2423 0278 0BF18E0A 		add	r10, fp, #142
 419:src/lcd.c     **** 	    }
 2424              		.loc 1 419 8 view .LVU483
 2425 027c 4FF0FF09 		mov	r9, #255
ARM GAS  /tmp/ccFPIr9f.s 			page 60


 2426              	.LVL187:
 2427              	.L126:
 417:src/lcd.c     **** 	    if (dots[i*6+j+MATRIX_BASE]) {
 2428              		.loc 1 417 14 is_stmt 1 view .LVU484
 2429 0280 0AEB0705 		add	r5, r10, r7
 2430 0284 5424     		movs	r4, #84
 2431              	.LVL188:
 2432              	.L128:
 418:src/lcd.c     **** 	      lcd_fill_rect( xleft-dwidth+5*i+15, ytop-(10+6*6)+j*6, 4, 5, 0xff);
 2433              		.loc 1 418 6 view .LVU485
 419:src/lcd.c     **** 	    }
 2434              		.loc 1 419 8 view .LVU486
 418:src/lcd.c     **** 	      lcd_fill_rect( xleft-dwidth+5*i+15, ytop-(10+6*6)+j*6, 4, 5, 0xff);
 2435              		.loc 1 418 14 is_stmt 0 view .LVU487
 2436 0286 15F801CB 		ldrb	ip, [r5], #1	@ zero_extendqisi2
 2437              	.LVL189:
 419:src/lcd.c     **** 	    }
 2438              		.loc 1 419 8 view .LVU488
 2439 028a 2146     		mov	r1, r4
 2440 028c 0523     		movs	r3, #5
 2441 028e 0634     		adds	r4, r4, #6
 2442 0290 0422     		movs	r2, #4
 2443 0292 3046     		mov	r0, r6
 418:src/lcd.c     **** 	      lcd_fill_rect( xleft-dwidth+5*i+15, ytop-(10+6*6)+j*6, 4, 5, 0xff);
 2444              		.loc 1 418 9 view .LVU489
 2445 0294 BCF1000F 		cmp	ip, #0
 2446 0298 02D0     		beq	.L127
 419:src/lcd.c     **** 	    }
 2447              		.loc 1 419 8 view .LVU490
 2448 029a CDF80090 		str	r9, [sp]
 2449 029e C047     		blx	r8
 2450              	.LVL190:
 2451              	.L127:
 417:src/lcd.c     **** 	    if (dots[i*6+j+MATRIX_BASE]) {
 2452              		.loc 1 417 19 is_stmt 1 discriminator 2 view .LVU491
 417:src/lcd.c     **** 	    if (dots[i*6+j+MATRIX_BASE]) {
 2453              		.loc 1 417 14 discriminator 2 view .LVU492
 417:src/lcd.c     **** 	    if (dots[i*6+j+MATRIX_BASE]) {
 2454              		.loc 1 417 4 is_stmt 0 discriminator 2 view .LVU493
 2455 02a0 782C     		cmp	r4, #120
 2456 02a2 F0D1     		bne	.L128
 416:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 2457              		.loc 1 416 35 is_stmt 1 discriminator 2 view .LVU494
 416:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 2458              		.loc 1 416 19 discriminator 2 view .LVU495
 2459 02a4 0637     		adds	r7, r7, #6
 2460              	.LVL191:
 416:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 2461              		.loc 1 416 9 is_stmt 0 discriminator 2 view .LVU496
 2462 02a6 B7F5DE7F 		cmp	r7, #444
 2463 02aa 06F10506 		add	r6, r6, #5
 2464 02ae E7D1     		bne	.L126
 427:src/lcd.c     **** 	    }
 2465              		.loc 1 427 8 view .LVU497
 2466 02b0 DFF8C0A0 		ldr	r10, .L236+4
 2467 02b4 0BF24A2B 		addw	fp, fp, #586
 2468 02b8 4FF00008 		mov	r8, #0
ARM GAS  /tmp/ccFPIr9f.s 			page 61


 2469 02bc 1027     		movs	r7, #16
 2470              	.LVL192:
 427:src/lcd.c     **** 	    }
 2471              		.loc 1 427 8 view .LVU498
 2472 02be 4FF0FF09 		mov	r9, #255
 2473              	.L129:
 2474              	.LVL193:
 425:src/lcd.c     **** 	    if (dots[i*6+j+MB_TOP]) {
 2475              		.loc 1 425 14 is_stmt 1 view .LVU499
 2476 02c2 0BEB0805 		add	r5, fp, r8
 413:src/lcd.c     **** 	
 2477              		.loc 1 413 2 is_stmt 0 view .LVU500
 2478 02c6 1E24     		movs	r4, #30
 2479              	.LVL194:
 2480              	.L131:
 426:src/lcd.c     **** 	      lcd_fill_rect( xleft-dwidth+5*i+15, 70-(10+6*5)+j*5, 4, 4, 0xff);
 2481              		.loc 1 426 6 is_stmt 1 view .LVU501
 427:src/lcd.c     **** 	    }
 2482              		.loc 1 427 8 view .LVU502
 426:src/lcd.c     **** 	      lcd_fill_rect( xleft-dwidth+5*i+15, 70-(10+6*5)+j*5, 4, 4, 0xff);
 2483              		.loc 1 426 14 is_stmt 0 view .LVU503
 2484 02c8 15F8016B 		ldrb	r6, [r5], #1	@ zero_extendqisi2
 2485              	.LVL195:
 427:src/lcd.c     **** 	    }
 2486              		.loc 1 427 8 view .LVU504
 2487 02cc 0423     		movs	r3, #4
 2488 02ce 2146     		mov	r1, r4
 2489 02d0 1A46     		mov	r2, r3
 2490 02d2 0534     		adds	r4, r4, #5
 2491 02d4 3846     		mov	r0, r7
 426:src/lcd.c     **** 	      lcd_fill_rect( xleft-dwidth+5*i+15, 70-(10+6*5)+j*5, 4, 4, 0xff);
 2492              		.loc 1 426 9 view .LVU505
 2493 02d6 16B1     		cbz	r6, .L130
 427:src/lcd.c     **** 	    }
 2494              		.loc 1 427 8 view .LVU506
 2495 02d8 CDF80090 		str	r9, [sp]
 2496 02dc D047     		blx	r10
 2497              	.LVL196:
 2498              	.L130:
 425:src/lcd.c     **** 	    if (dots[i*6+j+MB_TOP]) {
 2499              		.loc 1 425 19 is_stmt 1 discriminator 2 view .LVU507
 425:src/lcd.c     **** 	    if (dots[i*6+j+MB_TOP]) {
 2500              		.loc 1 425 14 discriminator 2 view .LVU508
 425:src/lcd.c     **** 	    if (dots[i*6+j+MB_TOP]) {
 2501              		.loc 1 425 4 is_stmt 0 discriminator 2 view .LVU509
 2502 02de 3C2C     		cmp	r4, #60
 2503 02e0 F2D1     		bne	.L131
 424:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 2504              		.loc 1 424 29 is_stmt 1 discriminator 2 view .LVU510
 424:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 2505              		.loc 1 424 19 discriminator 2 view .LVU511
 2506 02e2 08F10608 		add	r8, r8, #6
 2507              	.LVL197:
 424:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 2508              		.loc 1 424 9 is_stmt 0 discriminator 2 view .LVU512
 2509 02e6 B8F5817F 		cmp	r8, #258
 2510 02ea 07F10507 		add	r7, r7, #5
ARM GAS  /tmp/ccFPIr9f.s 			page 62


 2511 02ee E8D1     		bne	.L129
 432:src/lcd.c     **** #endif
 2512              		.loc 1 432 1 view .LVU513
 2513 02f0 03B0     		add	sp, sp, #12
 2514              		.cfi_remember_state
 2515              		.cfi_def_cfa_offset 36
 2516              		@ sp needed
 2517 02f2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2518              	.LVL198:
 2519              	.L231:
 2520              		.cfi_restore_state
 317:src/lcd.c     ****                 }
 2521              		.loc 1 317 5 is_stmt 1 view .LVU514
 2522 02f6 8221     		movs	r1, #130
 2523 02f8 2846     		mov	r0, r5
 2524 02fa FFF7FEFF 		bl	exp_bottom
 2525              	.LVL199:
 2526 02fe 15E7     		b	.L114
 2527              	.L230:
 314:src/lcd.c     ****                 }
 2528              		.loc 1 314 5 view .LVU515
 2529              	.LVL200:
 2530              	.LBB77:
 2531              	.LBI77:
 230:src/lcd.c     ****   exp_right_side(i-1, j+11);
 2532              		.loc 1 230 6 view .LVU516
 2533              	.LBB78:
 231:src/lcd.c     **** }
 2534              		.loc 1 231 3 view .LVU517
 2535 0300 8D21     		movs	r1, #141
 2536 0302 681E     		subs	r0, r5, #1
 2537 0304 FFF7FEFF 		bl	exp_right_side
 2538              	.LVL201:
 232:src/lcd.c     **** void exp_top (int i, int j) {
 2539              		.loc 1 232 1 is_stmt 0 view .LVU518
 2540 0308 0BE7     		b	.L113
 2541              	.LVL202:
 2542              	.L229:
 232:src/lcd.c     **** void exp_top (int i, int j) {
 2543              		.loc 1 232 1 view .LVU519
 2544              	.LBE78:
 2545              	.LBE77:
 311:src/lcd.c     ****                 }
 2546              		.loc 1 311 5 is_stmt 1 view .LVU520
 2547              	.LBB79:
 2548              	.LBI79:
 218:src/lcd.c     ****   exp_left_side(i, j+11);
 2549              		.loc 1 218 6 view .LVU521
 2550              	.LBB80:
 219:src/lcd.c     **** }
 2551              		.loc 1 219 3 view .LVU522
 2552 030a 8D21     		movs	r1, #141
 2553 030c 2846     		mov	r0, r5
 2554 030e FFF7FEFF 		bl	exp_left_side
 2555              	.LVL203:
 220:src/lcd.c     **** void exp_right_side (int i, int j) {
 2556              		.loc 1 220 1 is_stmt 0 view .LVU523
ARM GAS  /tmp/ccFPIr9f.s 			page 63


 2557 0312 01E7     		b	.L112
 2558              	.LVL204:
 2559              	.L228:
 220:src/lcd.c     **** void exp_right_side (int i, int j) {
 2560              		.loc 1 220 1 view .LVU524
 2561              	.LBE80:
 2562              	.LBE79:
 308:src/lcd.c     ****                 }
 2563              		.loc 1 308 5 is_stmt 1 view .LVU525
 2564 0314 8221     		movs	r1, #130
 2565 0316 2846     		mov	r0, r5
 2566 0318 FFF7FEFF 		bl	exp_middle
 2567              	.LVL205:
 2568 031c F7E6     		b	.L111
 2569              	.L227:
 305:src/lcd.c     ****                 }
 2570              		.loc 1 305 5 view .LVU526
 2571              	.LVL206:
 2572              	.LBB81:
 2573              	.LBI81:
 227:src/lcd.c     ****   exp_right_side(i, j);
 2574              		.loc 1 227 6 view .LVU527
 2575              	.LBB82:
 228:src/lcd.c     **** }
 2576              		.loc 1 228 3 view .LVU528
 2577 031e 8221     		movs	r1, #130
 2578 0320 2846     		mov	r0, r5
 2579 0322 FFF7FEFF 		bl	exp_right_side
 2580              	.LVL207:
 229:src/lcd.c     **** void exp_right_side_bottom (int i, int j) {
 2581              		.loc 1 229 1 is_stmt 0 view .LVU529
 2582 0326 EDE6     		b	.L110
 2583              	.LVL208:
 2584              	.L226:
 229:src/lcd.c     **** void exp_right_side_bottom (int i, int j) {
 2585              		.loc 1 229 1 view .LVU530
 2586              	.LBE82:
 2587              	.LBE81:
 302:src/lcd.c     ****                 }
 2588              		.loc 1 302 5 is_stmt 1 view .LVU531
 2589              	.LBB83:
 2590              	.LBI83:
 215:src/lcd.c     ****   exp_left_side(i+1, j);
 2591              		.loc 1 215 6 view .LVU532
 2592              	.LBB84:
 216:src/lcd.c     **** }
 2593              		.loc 1 216 3 view .LVU533
 2594 0328 8221     		movs	r1, #130
 2595 032a 681C     		adds	r0, r5, #1
 2596 032c FFF7FEFF 		bl	exp_left_side
 2597              	.LVL209:
 217:src/lcd.c     **** void exp_left_side_bottom (int i, int j) {
 2598              		.loc 1 217 1 is_stmt 0 view .LVU534
 2599 0330 E3E6     		b	.L109
 2600              	.LVL210:
 2601              	.L225:
 217:src/lcd.c     **** void exp_left_side_bottom (int i, int j) {
ARM GAS  /tmp/ccFPIr9f.s 			page 64


 2602              		.loc 1 217 1 view .LVU535
 2603              	.LBE84:
 2604              	.LBE83:
 299:src/lcd.c     ****                 }
 2605              		.loc 1 299 5 is_stmt 1 view .LVU536
 2606 0332 8221     		movs	r1, #130
 2607 0334 2846     		mov	r0, r5
 2608 0336 FFF7FEFF 		bl	exp_top
 2609              	.LVL211:
 2610 033a D9E6     		b	.L108
 2611              	.LVL212:
 2612              	.L121:
 376:src/lcd.c     **** 	  lcd_writeText(t20, "S:4");
 2613              		.loc 1 376 4 view .LVU537
 2614 033c 206B     		ldr	r0, [r4, #48]
 2615 033e 0F4B     		ldr	r3, .L236+12
 2616 0340 1922     		movs	r2, #25
 2617 0342 40F21D11 		movw	r1, #285
 2618 0346 9847     		blx	r3
 2619              	.LVL213:
 377:src/lcd.c     **** 	}	  
 2620              		.loc 1 377 4 view .LVU538
 2621 0348 206B     		ldr	r0, [r4, #48]
 2622 034a 0D4B     		ldr	r3, .L236+16
 2623 034c 1249     		ldr	r1, .L236+40
 2624 034e 9847     		blx	r3
 2625              	.LVL214:
 2626 0350 62E7     		b	.L122
 2627              	.LVL215:
 2628              	.L232:
 322:src/lcd.c     ****         }
 2629              		.loc 1 322 4 view .LVU539
 2630 0352 8221     		movs	r1, #130
 2631 0354 0120     		movs	r0, #1
 2632 0356 FFF7FEFF 		bl	middle
 2633              	.LVL216:
 324:src/lcd.c     **** 	  exp_middle (xleft_exp-dwidth_exp, ytop);
 2634              		.loc 1 324 9 view .LVU540
 324:src/lcd.c     **** 	  exp_middle (xleft_exp-dwidth_exp, ytop);
 2635              		.loc 1 324 12 is_stmt 0 view .LVU541
 2636 035a 96F88230 		ldrb	r3, [r6, #130]	@ zero_extendqisi2
 2637 035e 002B     		cmp	r3, #0
 2638 0360 3FF4F4AE 		beq	.L117
 2639              	.L233:
 325:src/lcd.c     ****         }
 2640              		.loc 1 325 4 is_stmt 1 view .LVU542
 2641 0364 8221     		movs	r1, #130
 2642 0366 4FF4A370 		mov	r0, #326
 2643 036a FFF7FEFF 		bl	exp_middle
 2644              	.LVL217:
 2645 036e EDE6     		b	.L117
 2646              	.L237:
 2647              		.align	2
 2648              	.L236:
 2649 0370 00000000 		.word	.LANCHOR0
 2650 0374 3D020008 		.word	134218301
 2651 0378 00200010 		.word	268443648
ARM GAS  /tmp/ccFPIr9f.s 			page 65


 2652 037c 6D020008 		.word	134218349
 2653 0380 7D020008 		.word	134218365
 2654 0384 00000000 		.word	.LC6
 2655 0388 08000000 		.word	.LC7
 2656 038c 10000000 		.word	.LC9
 2657 0390 14000000 		.word	.LC10
 2658 0394 18000000 		.word	.LC11
 2659 0398 0C000000 		.word	.LC8
 2660              		.cfi_endproc
 2661              	.LFE25:
 2663              		.section	.text.finish_display,"ax",%progbits
 2664              		.align	1
 2665              		.p2align 2,,3
 2666              		.global	finish_display
 2667              		.syntax unified
 2668              		.thumb
 2669              		.thumb_func
 2670              		.fpu fpv4-sp-d16
 2672              	finish_display:
 2673              	.LFB29:
 710:src/lcd.c     ****   //  lcd_clear_buf();
 2674              		.loc 1 710 27 view -0
 2675              		.cfi_startproc
 2676              		@ args = 0, pretend = 0, frame = 0
 2677              		@ frame_needed = 0, uses_anonymous_args = 0
 712:src/lcd.c     ****   show_disp();
 2678              		.loc 1 712 3 view .LVU544
 710:src/lcd.c     ****   //  lcd_clear_buf();
 2679              		.loc 1 710 27 is_stmt 0 view .LVU545
 2680 0000 10B5     		push	{r4, lr}
 2681              		.cfi_def_cfa_offset 8
 2682              		.cfi_offset 4, -8
 2683              		.cfi_offset 14, -4
 2684 0002 82B0     		sub	sp, sp, #8
 2685              		.cfi_def_cfa_offset 16
 712:src/lcd.c     ****   show_disp();
 2686              		.loc 1 712 3 view .LVU546
 2687 0004 0021     		movs	r1, #0
 2688 0006 0091     		str	r1, [sp]
 2689 0008 0846     		mov	r0, r1
 2690 000a BC23     		movs	r3, #188
 2691 000c 4FF4C872 		mov	r2, #400
 2692 0010 044C     		ldr	r4, .L240
 2693 0012 A047     		blx	r4
 2694              	.LVL218:
 713:src/lcd.c     ****   lcd_refresh();
 2695              		.loc 1 713 3 is_stmt 1 view .LVU547
 2696 0014 FFF7FEFF 		bl	show_disp
 2697              	.LVL219:
 714:src/lcd.c     **** }
 2698              		.loc 1 714 3 view .LVU548
 2699 0018 034B     		ldr	r3, .L240+4
 715:src/lcd.c     **** 
 2700              		.loc 1 715 1 is_stmt 0 view .LVU549
 2701 001a 02B0     		add	sp, sp, #8
 2702              		.cfi_def_cfa_offset 8
 2703              		@ sp needed
ARM GAS  /tmp/ccFPIr9f.s 			page 66


 2704 001c BDE81040 		pop	{r4, lr}
 2705              		.cfi_restore 14
 2706              		.cfi_restore 4
 2707              		.cfi_def_cfa_offset 0
 714:src/lcd.c     **** }
 2708              		.loc 1 714 3 view .LVU550
 2709 0020 1847     		bx	r3	@ indirect register sibling call
 2710              	.LVL220:
 2711              	.L241:
 2712 0022 00BF     		.align	2
 2713              	.L240:
 2714 0024 3D020008 		.word	134218301
 2715 0028 31020008 		.word	134218289
 2716              		.cfi_endproc
 2717              	.LFE29:
 2719              		.section	.text.finish_PRT,"ax",%progbits
 2720              		.align	1
 2721              		.p2align 2,,3
 2722              		.global	finish_PRT
 2723              		.syntax unified
 2724              		.thumb
 2725              		.thumb_func
 2726              		.fpu fpv4-sp-d16
 2728              	finish_PRT:
 2729              	.LFB33:
 750:src/lcd.c     **** 
 751:src/lcd.c     **** void finish_PRT (void) {
 2730              		.loc 1 751 24 is_stmt 1 view -0
 2731              		.cfi_startproc
 2732              		@ args = 0, pretend = 0, frame = 0
 2733              		@ frame_needed = 0, uses_anonymous_args = 0
 752:src/lcd.c     ****   draw_PRT();
 2734              		.loc 1 752 3 view .LVU552
 751:src/lcd.c     ****   draw_PRT();
 2735              		.loc 1 751 24 is_stmt 0 view .LVU553
 2736 0000 10B5     		push	{r4, lr}
 2737              		.cfi_def_cfa_offset 8
 2738              		.cfi_offset 4, -8
 2739              		.cfi_offset 14, -4
 2740              		.loc 1 752 3 view .LVU554
 2741 0002 FFF7FEFF 		bl	draw_PRT
 2742              	.LVL221:
 753:src/lcd.c     ****   lcd_refresh();
 2743              		.loc 1 753 3 is_stmt 1 view .LVU555
 754:src/lcd.c     **** }
 2744              		.loc 1 754 1 is_stmt 0 view .LVU556
 2745 0006 BDE81040 		pop	{r4, lr}
 2746              		.cfi_restore 14
 2747              		.cfi_restore 4
 2748              		.cfi_def_cfa_offset 0
 753:src/lcd.c     ****   lcd_refresh();
 2749              		.loc 1 753 3 view .LVU557
 2750 000a 014B     		ldr	r3, .L244
 2751 000c 1847     		bx	r3	@ indirect register sibling call
 2752              	.LVL222:
 2753              	.L245:
 2754 000e 00BF     		.align	2
ARM GAS  /tmp/ccFPIr9f.s 			page 67


 2755              	.L244:
 2756 0010 31020008 		.word	134218289
 2757              		.cfi_endproc
 2758              	.LFE33:
 2760              		.section	.text.finish_LEQ,"ax",%progbits
 2761              		.align	1
 2762              		.p2align 2,,3
 2763              		.global	finish_LEQ
 2764              		.syntax unified
 2765              		.thumb
 2766              		.thumb_func
 2767              		.fpu fpv4-sp-d16
 2769              	finish_LEQ:
 2770              	.LFB34:
 755:src/lcd.c     **** 
 756:src/lcd.c     **** void finish_LEQ(void) { // refreshes the RPN and RUN flags only
 2771              		.loc 1 756 23 is_stmt 1 view -0
 2772              		.cfi_startproc
 2773              		@ args = 0, pretend = 0, frame = 0
 2774              		@ frame_needed = 0, uses_anonymous_args = 0
 757:src/lcd.c     ****   draw_LEQ();  
 2775              		.loc 1 757 3 view .LVU559
 756:src/lcd.c     ****   draw_LEQ();  
 2776              		.loc 1 756 23 is_stmt 0 view .LVU560
 2777 0000 10B5     		push	{r4, lr}
 2778              		.cfi_def_cfa_offset 8
 2779              		.cfi_offset 4, -8
 2780              		.cfi_offset 14, -4
 2781              		.loc 1 757 3 view .LVU561
 2782 0002 FFF7FEFF 		bl	draw_LEQ
 2783              	.LVL223:
 758:src/lcd.c     ****   lcd_refresh();
 2784              		.loc 1 758 3 is_stmt 1 view .LVU562
 759:src/lcd.c     **** }
 2785              		.loc 1 759 1 is_stmt 0 view .LVU563
 2786 0006 BDE81040 		pop	{r4, lr}
 2787              		.cfi_restore 14
 2788              		.cfi_restore 4
 2789              		.cfi_def_cfa_offset 0
 758:src/lcd.c     ****   lcd_refresh();
 2790              		.loc 1 758 3 view .LVU564
 2791 000a 014B     		ldr	r3, .L248
 2792 000c 1847     		bx	r3	@ indirect register sibling call
 2793              	.LVL224:
 2794              	.L249:
 2795 000e 00BF     		.align	2
 2796              	.L248:
 2797 0010 31020008 		.word	134218289
 2798              		.cfi_endproc
 2799              	.LFE34:
 2801              		.section	.text.finish_RPN,"ax",%progbits
 2802              		.align	1
 2803              		.p2align 2,,3
 2804              		.global	finish_RPN
 2805              		.syntax unified
 2806              		.thumb
 2807              		.thumb_func
ARM GAS  /tmp/ccFPIr9f.s 			page 68


 2808              		.fpu fpv4-sp-d16
 2810              	finish_RPN:
 2811              	.LFB35:
 760:src/lcd.c     ****   
 761:src/lcd.c     **** void finish_RPN(void) { // refreshes the RPN and RUN flags only
 2812              		.loc 1 761 23 is_stmt 1 view -0
 2813              		.cfi_startproc
 2814              		@ args = 0, pretend = 0, frame = 0
 2815              		@ frame_needed = 0, uses_anonymous_args = 0
 762:src/lcd.c     ****   draw_RPN_RCL();  
 2816              		.loc 1 762 3 view .LVU566
 761:src/lcd.c     ****   draw_RPN_RCL();  
 2817              		.loc 1 761 23 is_stmt 0 view .LVU567
 2818 0000 10B5     		push	{r4, lr}
 2819              		.cfi_def_cfa_offset 8
 2820              		.cfi_offset 4, -8
 2821              		.cfi_offset 14, -4
 2822              		.loc 1 762 3 view .LVU568
 2823 0002 FFF7FEFF 		bl	draw_RPN_RCL
 2824              	.LVL225:
 763:src/lcd.c     ****   lcd_refresh();
 2825              		.loc 1 763 3 is_stmt 1 view .LVU569
 764:src/lcd.c     **** }
 2826              		.loc 1 764 1 is_stmt 0 view .LVU570
 2827 0006 BDE81040 		pop	{r4, lr}
 2828              		.cfi_restore 14
 2829              		.cfi_restore 4
 2830              		.cfi_def_cfa_offset 0
 763:src/lcd.c     ****   lcd_refresh();
 2831              		.loc 1 763 3 view .LVU571
 2832 000a 014B     		ldr	r3, .L252
 2833 000c 1847     		bx	r3	@ indirect register sibling call
 2834              	.LVL226:
 2835              	.L253:
 2836 000e 00BF     		.align	2
 2837              	.L252:
 2838 0010 31020008 		.word	134218289
 2839              		.cfi_endproc
 2840              	.LFE35:
 2842              		.section	.text.do_all_dots,"ax",%progbits
 2843              		.align	1
 2844              		.p2align 2,,3
 2845              		.global	do_all_dots
 2846              		.syntax unified
 2847              		.thumb
 2848              		.thumb_func
 2849              		.fpu fpv4-sp-d16
 2851              	do_all_dots:
 2852              	.LFB36:
 765:src/lcd.c     **** 
 766:src/lcd.c     **** extern void all_menu_dots (void);
 767:src/lcd.c     **** 
 768:src/lcd.c     **** void do_all_dots(void) {
 2853              		.loc 1 768 24 is_stmt 1 view -0
 2854              		.cfi_startproc
 2855              		@ args = 0, pretend = 0, frame = 0
 2856              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccFPIr9f.s 			page 69


 769:src/lcd.c     ****   for (int i=0; i<TOP_DOTS; i++) {
 2857              		.loc 1 769 3 view .LVU573
 2858              	.LBB85:
 2859              		.loc 1 769 8 view .LVU574
 2860              	.LVL227:
 2861              		.loc 1 769 17 view .LVU575
 2862              	.LBE85:
 768:src/lcd.c     ****   for (int i=0; i<TOP_DOTS; i++) {
 2863              		.loc 1 768 24 is_stmt 0 view .LVU576
 2864 0000 08B5     		push	{r3, lr}
 2865              		.cfi_def_cfa_offset 8
 2866              		.cfi_offset 3, -8
 2867              		.cfi_offset 14, -4
 2868 0002 094B     		ldr	r3, .L258
 2869              	.LBB90:
 2870              	.LBB86:
 2871              	.LBB87:
  58:src/lcd.c     **** }
 2872              		.loc 1 58 17 view .LVU577
 2873 0004 0121     		movs	r1, #1
 2874 0006 03F55372 		add	r2, r3, #844
 2875              	.LVL228:
 2876              	.L255:
  58:src/lcd.c     **** }
 2877              		.loc 1 58 17 view .LVU578
 2878              	.LBE87:
 2879              	.LBE86:
 770:src/lcd.c     ****     set_dot(i);
 2880              		.loc 1 770 5 is_stmt 1 view .LVU579
 2881              	.LBB89:
 2882              	.LBI86:
  57:src/lcd.c     ****         dots[n] = 1;
 2883              		.loc 1 57 6 view .LVU580
 2884              	.LBB88:
  58:src/lcd.c     **** }
 2885              		.loc 1 58 9 view .LVU581
  58:src/lcd.c     **** }
 2886              		.loc 1 58 17 is_stmt 0 view .LVU582
 2887 000a 03F8011F 		strb	r1, [r3, #1]!
 2888              	.LVL229:
  58:src/lcd.c     **** }
 2889              		.loc 1 58 17 view .LVU583
 2890              	.LBE88:
 2891              	.LBE89:
 769:src/lcd.c     ****     set_dot(i);
 2892              		.loc 1 769 29 is_stmt 1 view .LVU584
 769:src/lcd.c     ****     set_dot(i);
 2893              		.loc 1 769 17 view .LVU585
 769:src/lcd.c     ****     set_dot(i);
 2894              		.loc 1 769 3 is_stmt 0 view .LVU586
 2895 000e 9342     		cmp	r3, r2
 2896 0010 FBD1     		bne	.L255
 2897              	.LBE90:
 771:src/lcd.c     ****   }
 772:src/lcd.c     ****   all_menu_dots();
 2898              		.loc 1 772 3 is_stmt 1 view .LVU587
 2899 0012 FFF7FEFF 		bl	all_menu_dots
ARM GAS  /tmp/ccFPIr9f.s 			page 70


 2900              	.LVL230:
 773:src/lcd.c     ****   finish_display();
 2901              		.loc 1 773 3 view .LVU588
 2902 0016 FFF7FEFF 		bl	finish_display
 2903              	.LVL231:
 774:src/lcd.c     ****   clr_dot(RCL_annun);
 2904              		.loc 1 774 3 view .LVU589
 2905              	.LBB91:
 2906              	.LBI91:
  60:src/lcd.c     ****         dots[n] = 0;
 2907              		.loc 1 60 6 view .LVU590
 2908              	.LBB92:
  61:src/lcd.c     **** }
 2909              		.loc 1 61 9 view .LVU591
  61:src/lcd.c     **** }
 2910              		.loc 1 61 17 is_stmt 0 view .LVU592
 2911 001a 044B     		ldr	r3, .L258+4
 2912 001c 0022     		movs	r2, #0
 2913 001e 83F88A20 		strb	r2, [r3, #138]
 2914              	.LVL232:
  61:src/lcd.c     **** }
 2915              		.loc 1 61 17 view .LVU593
 2916              	.LBE92:
 2917              	.LBE91:
 775:src/lcd.c     ****   clr_dot(LIT_EQ);
 2918              		.loc 1 775 3 is_stmt 1 view .LVU594
 2919              	.LBB93:
 2920              	.LBI93:
  60:src/lcd.c     ****         dots[n] = 0;
 2921              		.loc 1 60 6 view .LVU595
 2922              	.LBB94:
  61:src/lcd.c     **** }
 2923              		.loc 1 61 9 view .LVU596
  61:src/lcd.c     **** }
 2924              		.loc 1 61 17 is_stmt 0 view .LVU597
 2925 0022 83F88420 		strb	r2, [r3, #132]
 2926              	.LVL233:
  61:src/lcd.c     **** }
 2927              		.loc 1 61 17 view .LVU598
 2928              	.LBE94:
 2929              	.LBE93:
 776:src/lcd.c     **** }
 2930              		.loc 1 776 1 view .LVU599
 2931 0026 08BD     		pop	{r3, pc}
 2932              	.L259:
 2933              		.align	2
 2934              	.L258:
 2935 0028 FFFFFFFF 		.word	.LANCHOR0-1
 2936 002c 00000000 		.word	.LANCHOR0
 2937              		.cfi_endproc
 2938              	.LFE36:
 2940              		.section	.text.show_progtrace,"ax",%progbits
 2941              		.align	1
 2942              		.p2align 2,,3
 2943              		.global	show_progtrace
 2944              		.syntax unified
 2945              		.thumb
ARM GAS  /tmp/ccFPIr9f.s 			page 71


 2946              		.thumb_func
 2947              		.fpu fpv4-sp-d16
 2949              	show_progtrace:
 2950              	.LVL234:
 2951              	.LFB37:
 777:src/lcd.c     **** #endif
 778:src/lcd.c     **** 
 779:src/lcd.c     **** #ifdef CONSOLE
 780:src/lcd.c     **** #ifndef DM42
 781:src/lcd.c     **** /* Take a string and cleanse all non-printing characters from it.
 782:src/lcd.c     ****  * Replace them with the usual [xxx] sequences.
 783:src/lcd.c     ****  */
 784:src/lcd.c     **** extern const char *pretty(unsigned char);
 785:src/lcd.c     **** 
 786:src/lcd.c     **** static char *cleanse(const char *s) {
 787:src/lcd.c     ****         static char res[50];
 788:src/lcd.c     ****         char *p;
 789:src/lcd.c     **** 
 790:src/lcd.c     ****         for (p=res; *s != '\0'; s++) {
 791:src/lcd.c     ****                 unsigned char c = 0xff & *s;
 792:src/lcd.c     ****                 const char *m = pretty(c);
 793:src/lcd.c     ****                 if (m == NULL) {
 794:src/lcd.c     ****                         *p++ = c;
 795:src/lcd.c     ****                 } else {
 796:src/lcd.c     ****                         *p++ = '[';
 797:src/lcd.c     ****                         p = scopy_char(p, m, ']');
 798:src/lcd.c     ****                 }
 799:src/lcd.c     ****         }
 800:src/lcd.c     ****         *p = '\0';
 801:src/lcd.c     ****         return res;
 802:src/lcd.c     **** }
 803:src/lcd.c     **** #endif
 804:src/lcd.c     **** #endif
 805:src/lcd.c     **** 
 806:src/lcd.c     **** void show_progtrace(char *buf) {
 2952              		.loc 1 806 32 is_stmt 1 view -0
 2953              		.cfi_startproc
 2954              		@ args = 0, pretend = 0, frame = 0
 2955              		@ frame_needed = 0, uses_anonymous_args = 0
 2956              		@ link register save eliminated.
 807:src/lcd.c     **** #ifndef DM42
 808:src/lcd.c     **** #ifdef CONSOLE
 809:src/lcd.c     ****         int pc = state_pc();
 810:src/lcd.c     **** 
 811:src/lcd.c     **** #ifdef USECURSES
 812:src/lcd.c     ****         int i;
 813:src/lcd.c     **** 
 814:src/lcd.c     ****         if (!State2.flags)
 815:src/lcd.c     ****                 return;
 816:src/lcd.c     **** 
 817:src/lcd.c     ****         for (i=4; i>0 && pc >= 0; i--) {
 818:src/lcd.c     ****                 MOVE(0, i);
 819:src/lcd.c     ****                 if (pc) {
 820:src/lcd.c     ****                         opcode op = getprog(pc);
 821:src/lcd.c     ****                         PRINTF("%03d %08x: %s", pc, op, cleanse(prt(op, buf)));
 822:src/lcd.c     ****                 } else
 823:src/lcd.c     ****                         PRINTF("000:");
ARM GAS  /tmp/ccFPIr9f.s 			page 72


 824:src/lcd.c     ****                 pc = do_dec(pc, 1);
 825:src/lcd.c     ****         }
 826:src/lcd.c     **** #endif
 827:src/lcd.c     **** #endif
 828:src/lcd.c     **** #endif       
 829:src/lcd.c     **** }
 2957              		.loc 1 829 1 view .LVU601
 2958 0000 7047     		bx	lr
 2959              		.cfi_endproc
 2960              	.LFE37:
 2962 0002 00BF     		.section	.bss.dots,"aw",%nobits
 2963              		.align	2
 2964              		.set	.LANCHOR0,. + 0
 2967              	dots:
 2968 0000 00000000 		.space	844
 2968      00000000 
 2968      00000000 
 2968      00000000 
 2968      00000000 
 2969              		.text
 2970              	.Letext0:
 2971              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 2972              		.file 3 "dmcp/ff_ifc.h"
 2973              		.file 4 "dmcp/dmcp.h"
 2974              		.file 5 "src/decNumber/decContext.h"
 2975              		.file 6 "src/decNumber/decNumber.h"
 2976              		.file 7 "src/decNumber/decimal64.h"
 2977              		.file 8 "src/decNumber/decimal128.h"
 2978              		.file 9 "src/xeq.h"
 2979              		.file 10 "src/data.h"
 2980              		.file 11 "src/display.h"
 2981              		.file 12 "src/storage.h"
 2982              		.file 13 "src/pretty.h"
ARM GAS  /tmp/ccFPIr9f.s 			page 73


DEFINED SYMBOLS
                            *ABS*:0000000000000000 lcd.c
     /tmp/ccFPIr9f.s:18     .text.set_dot:0000000000000000 $t
     /tmp/ccFPIr9f.s:27     .text.set_dot:0000000000000000 set_dot
     /tmp/ccFPIr9f.s:46     .text.set_dot:0000000000000008 $d
     /tmp/ccFPIr9f.s:51     .text.clr_dot:0000000000000000 $t
     /tmp/ccFPIr9f.s:59     .text.clr_dot:0000000000000000 clr_dot
     /tmp/ccFPIr9f.s:77     .text.clr_dot:0000000000000008 $d
     /tmp/ccFPIr9f.s:82     .text.is_dot:0000000000000000 $t
     /tmp/ccFPIr9f.s:90     .text.is_dot:0000000000000000 is_dot
     /tmp/ccFPIr9f.s:109    .text.is_dot:0000000000000008 $d
     /tmp/ccFPIr9f.s:114    .text.setuptty:0000000000000000 $t
     /tmp/ccFPIr9f.s:122    .text.setuptty:0000000000000000 setuptty
     /tmp/ccFPIr9f.s:140    .text.reset_disp:0000000000000000 $t
     /tmp/ccFPIr9f.s:148    .text.reset_disp:0000000000000000 reset_disp
     /tmp/ccFPIr9f.s:346    .text.reset_disp:0000000000000068 $d
     /tmp/ccFPIr9f.s:351    .text.left_side:0000000000000000 $t
     /tmp/ccFPIr9f.s:359    .text.left_side:0000000000000000 left_side
     /tmp/ccFPIr9f.s:442    .text.left_side:0000000000000054 $d
     /tmp/ccFPIr9f.s:447    .text.left_side_top:0000000000000000 $t
     /tmp/ccFPIr9f.s:455    .text.left_side_top:0000000000000000 left_side_top
     /tmp/ccFPIr9f.s:471    .text.left_side_bottom:0000000000000000 $t
     /tmp/ccFPIr9f.s:479    .text.left_side_bottom:0000000000000000 left_side_bottom
     /tmp/ccFPIr9f.s:501    .text.right_side:0000000000000000 $t
     /tmp/ccFPIr9f.s:509    .text.right_side:0000000000000000 right_side
     /tmp/ccFPIr9f.s:591    .text.right_side:000000000000005c $d
     /tmp/ccFPIr9f.s:596    .text.right_side_top:0000000000000000 $t
     /tmp/ccFPIr9f.s:604    .text.right_side_top:0000000000000000 right_side_top
     /tmp/ccFPIr9f.s:620    .text.right_side_bottom:0000000000000000 $t
     /tmp/ccFPIr9f.s:628    .text.right_side_bottom:0000000000000000 right_side_bottom
     /tmp/ccFPIr9f.s:650    .text.top:0000000000000000 $t
     /tmp/ccFPIr9f.s:658    .text.top:0000000000000000 top
     /tmp/ccFPIr9f.s:725    .text.top:0000000000000040 $d
     /tmp/ccFPIr9f.s:730    .text.middle:0000000000000000 $t
     /tmp/ccFPIr9f.s:738    .text.middle:0000000000000000 middle
     /tmp/ccFPIr9f.s:808    .text.middle:0000000000000040 $d
     /tmp/ccFPIr9f.s:814    .text.bottom:0000000000000000 $t
     /tmp/ccFPIr9f.s:822    .text.bottom:0000000000000000 bottom
     /tmp/ccFPIr9f.s:892    .text.bottom:0000000000000048 $d
     /tmp/ccFPIr9f.s:897    .text.decimal:0000000000000000 $t
     /tmp/ccFPIr9f.s:905    .text.decimal:0000000000000000 decimal
     /tmp/ccFPIr9f.s:942    .text.decimal:0000000000000018 $d
     /tmp/ccFPIr9f.s:947    .text.comma:0000000000000000 $t
     /tmp/ccFPIr9f.s:955    .text.comma:0000000000000000 comma
     /tmp/ccFPIr9f.s:1009   .text.comma:000000000000002c $d
     /tmp/ccFPIr9f.s:1014   .text.exp_left_side:0000000000000000 $t
     /tmp/ccFPIr9f.s:1022   .text.exp_left_side:0000000000000000 exp_left_side
     /tmp/ccFPIr9f.s:1089   .text.exp_left_side:0000000000000040 $d
     /tmp/ccFPIr9f.s:1094   .text.exp_left_side_top:0000000000000000 $t
     /tmp/ccFPIr9f.s:1102   .text.exp_left_side_top:0000000000000000 exp_left_side_top
     /tmp/ccFPIr9f.s:1121   .text.exp_left_side_bottom:0000000000000000 $t
     /tmp/ccFPIr9f.s:1129   .text.exp_left_side_bottom:0000000000000000 exp_left_side_bottom
     /tmp/ccFPIr9f.s:1148   .text.exp_right_side:0000000000000000 $t
     /tmp/ccFPIr9f.s:1156   .text.exp_right_side:0000000000000000 exp_right_side
     /tmp/ccFPIr9f.s:1223   .text.exp_right_side:0000000000000044 $d
     /tmp/ccFPIr9f.s:1228   .text.exp_right_side_top:0000000000000000 $t
     /tmp/ccFPIr9f.s:1236   .text.exp_right_side_top:0000000000000000 exp_right_side_top
ARM GAS  /tmp/ccFPIr9f.s 			page 74


     /tmp/ccFPIr9f.s:1252   .text.exp_right_side_bottom:0000000000000000 $t
     /tmp/ccFPIr9f.s:1260   .text.exp_right_side_bottom:0000000000000000 exp_right_side_bottom
     /tmp/ccFPIr9f.s:1282   .text.exp_top:0000000000000000 $t
     /tmp/ccFPIr9f.s:1290   .text.exp_top:0000000000000000 exp_top
     /tmp/ccFPIr9f.s:1349   .text.exp_top:0000000000000034 $d
     /tmp/ccFPIr9f.s:1354   .text.exp_bottom:0000000000000000 $t
     /tmp/ccFPIr9f.s:1362   .text.exp_bottom:0000000000000000 exp_bottom
     /tmp/ccFPIr9f.s:1424   .text.exp_bottom:0000000000000038 $d
     /tmp/ccFPIr9f.s:1429   .text.exp_middle:0000000000000000 $t
     /tmp/ccFPIr9f.s:1437   .text.exp_middle:0000000000000000 exp_middle
     /tmp/ccFPIr9f.s:1503   .text.exp_middle:0000000000000040 $d
     /tmp/ccFPIr9f.s:1508   .text.show_stack:0000000000000000 $t
     /tmp/ccFPIr9f.s:1516   .text.show_stack:0000000000000000 show_stack
     /tmp/ccFPIr9f.s:1527   .text.show_flags:0000000000000000 $t
     /tmp/ccFPIr9f.s:1535   .text.show_flags:0000000000000000 show_flags
     /tmp/ccFPIr9f.s:1546   .text.wait_for_display:0000000000000000 $t
     /tmp/ccFPIr9f.s:1554   .text.wait_for_display:0000000000000000 wait_for_display
     /tmp/ccFPIr9f.s:1567   .rodata.draw_RPN_RCL.str1.4:0000000000000000 $d
     /tmp/ccFPIr9f.s:1577   .text.draw_RPN_RCL:0000000000000000 $t
     /tmp/ccFPIr9f.s:1585   .text.draw_RPN_RCL:0000000000000000 draw_RPN_RCL
     /tmp/ccFPIr9f.s:1682   .text.draw_RPN_RCL:0000000000000070 $d
     /tmp/ccFPIr9f.s:1694   .rodata.draw_LEQ.str1.4:0000000000000000 $d
     /tmp/ccFPIr9f.s:1701   .text.draw_LEQ:0000000000000000 $t
     /tmp/ccFPIr9f.s:1709   .text.draw_LEQ:0000000000000000 draw_LEQ
     /tmp/ccFPIr9f.s:1777   .text.draw_LEQ:0000000000000044 $d
     /tmp/ccFPIr9f.s:1788   .rodata.draw_PRT.str1.4:0000000000000000 $d
     /tmp/ccFPIr9f.s:1792   .text.draw_PRT:0000000000000000 $t
     /tmp/ccFPIr9f.s:1800   .text.draw_PRT:0000000000000000 draw_PRT
     /tmp/ccFPIr9f.s:1851   .text.draw_PRT:000000000000002c $d
     /tmp/ccFPIr9f.s:1860   .rodata.show_disp.str1.4:0000000000000000 $d
     /tmp/ccFPIr9f.s:1879   .text.show_disp:0000000000000000 $t
     /tmp/ccFPIr9f.s:1887   .text.show_disp:0000000000000000 show_disp
     /tmp/ccFPIr9f.s:2128   .text.show_disp:00000000000000c4 $d
     /tmp/ccFPIr9f.s:2132   .text.show_disp:00000000000000cc $t
     /tmp/ccFPIr9f.s:2649   .text.show_disp:0000000000000370 $d
     /tmp/ccFPIr9f.s:2664   .text.finish_display:0000000000000000 $t
     /tmp/ccFPIr9f.s:2672   .text.finish_display:0000000000000000 finish_display
     /tmp/ccFPIr9f.s:2714   .text.finish_display:0000000000000024 $d
     /tmp/ccFPIr9f.s:2720   .text.finish_PRT:0000000000000000 $t
     /tmp/ccFPIr9f.s:2728   .text.finish_PRT:0000000000000000 finish_PRT
     /tmp/ccFPIr9f.s:2756   .text.finish_PRT:0000000000000010 $d
     /tmp/ccFPIr9f.s:2761   .text.finish_LEQ:0000000000000000 $t
     /tmp/ccFPIr9f.s:2769   .text.finish_LEQ:0000000000000000 finish_LEQ
     /tmp/ccFPIr9f.s:2797   .text.finish_LEQ:0000000000000010 $d
     /tmp/ccFPIr9f.s:2802   .text.finish_RPN:0000000000000000 $t
     /tmp/ccFPIr9f.s:2810   .text.finish_RPN:0000000000000000 finish_RPN
     /tmp/ccFPIr9f.s:2838   .text.finish_RPN:0000000000000010 $d
     /tmp/ccFPIr9f.s:2843   .text.do_all_dots:0000000000000000 $t
     /tmp/ccFPIr9f.s:2851   .text.do_all_dots:0000000000000000 do_all_dots
     /tmp/ccFPIr9f.s:2935   .text.do_all_dots:0000000000000028 $d
     /tmp/ccFPIr9f.s:2941   .text.show_progtrace:0000000000000000 $t
     /tmp/ccFPIr9f.s:2949   .text.show_progtrace:0000000000000000 show_progtrace
     /tmp/ccFPIr9f.s:2963   .bss.dots:0000000000000000 $d
     /tmp/ccFPIr9f.s:2967   .bss.dots:0000000000000000 dots

UNDEFINED SYMBOLS
dot
ARM GAS  /tmp/ccFPIr9f.s 			page 75


main_ram
all_menu_dots

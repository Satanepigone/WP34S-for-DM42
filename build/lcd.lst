ARM GAS  /tmp/ccSLcNfJ.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"lcd.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_dot,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.global	set_dot
  21              		.arch armv7e-m
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  25              		.fpu fpv4-sp-d16
  27              	set_dot:
  28              	.LVL0:
  29              	.LFB0:
  30              		.file 1 "src/lcd.c"
   1:src/lcd.c     **** /* This file is part of 34S.
   2:src/lcd.c     ****  * 
   3:src/lcd.c     ****  * 34S is free software: you can redistribute it and/or modify
   4:src/lcd.c     ****  * it under the terms of the GNU General Public License as published by
   5:src/lcd.c     ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/lcd.c     ****  * (at your option) any later version.
   7:src/lcd.c     ****  * 
   8:src/lcd.c     ****  * 34S is distributed in the hope that it will be useful,
   9:src/lcd.c     ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/lcd.c     ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/lcd.c     ****  * GNU General Public License for more details.
  12:src/lcd.c     ****  * 
  13:src/lcd.c     ****  * You should have received a copy of the GNU General Public License
  14:src/lcd.c     ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/lcd.c     ****  */
  16:src/lcd.c     **** 
  17:src/lcd.c     **** #ifdef DM42
  18:src/lcd.c     **** #include "dmcp.h"
  19:src/lcd.c     **** #endif
  20:src/lcd.c     **** 
  21:src/lcd.c     **** #define DM42SAFE
  22:src/lcd.c     **** #include "lcd.h"
  23:src/lcd.c     **** #include "display.h"
  24:src/lcd.c     **** #include "xeq.h"
  25:src/lcd.c     **** 
  26:src/lcd.c     **** #ifdef INCLUDE_C_LOCK
  27:src/lcd.c     **** #include "data.h"
  28:src/lcd.c     **** #include "storage.h"
ARM GAS  /tmp/ccSLcNfJ.s 			page 2


  29:src/lcd.c     **** #endif
  30:src/lcd.c     **** 
  31:src/lcd.c     **** #undef DM42SAFE
  32:src/lcd.c     **** 
  33:src/lcd.c     **** #include "pretty.h"
  34:src/lcd.c     **** 
  35:src/lcd.c     **** 
  36:src/lcd.c     **** #if defined(USECURSES) || defined(DM42) // want this in DM42
  37:src/lcd.c     **** static unsigned char dots[TOP_DOTS];
  38:src/lcd.c     **** #endif
  39:src/lcd.c     **** 
  40:src/lcd.c     **** #if defined(USECURSES) && !defined(DM42)
  41:src/lcd.c     **** static void dispreg(const char n, int index) {
  42:src/lcd.c     ****   char buf[64];
  43:src/lcd.c     ****         if (is_intmode())
  44:src/lcd.c     ****                 sprintf(buf, "%llx", (unsigned long long int)get_reg_n_int(index));
  45:src/lcd.c     ****         else {
  46:src/lcd.c     **** 		if (is_dblmode())
  47:src/lcd.c     **** 			decimal128ToString(&(get_reg_n(index)->d), buf);
  48:src/lcd.c     **** 		else
  49:src/lcd.c     **** 			decimal64ToString(&(get_reg_n(index)->s), buf);
  50:src/lcd.c     **** 	}
  51:src/lcd.c     ****         PRINTF("%c: %s", n, buf);
  52:src/lcd.c     **** }
  53:src/lcd.c     **** #endif
  54:src/lcd.c     **** 
  55:src/lcd.c     **** #if defined(USECURSES) || defined(DM42) // want this in DM42
  56:src/lcd.c     **** /* Some wrapper routines to set segments of the display */
  57:src/lcd.c     **** void set_dot(int n) {
  31              		.loc 1 57 21 view -0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 0
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  35              		@ link register save eliminated.
  58:src/lcd.c     ****         dots[n] = 1;
  36              		.loc 1 58 9 view .LVU1
  37              		.loc 1 58 17 is_stmt 0 view .LVU2
  38 0000 014B     		ldr	r3, .L3
  39 0002 0122     		movs	r2, #1
  40 0004 1A54     		strb	r2, [r3, r0]
  59:src/lcd.c     **** }
  41              		.loc 1 59 1 view .LVU3
  42 0006 7047     		bx	lr
  43              	.L4:
  44              		.align	2
  45              	.L3:
  46 0008 00000000 		.word	.LANCHOR0
  47              		.cfi_endproc
  48              	.LFE0:
  50              		.section	.text.clr_dot,"ax",%progbits
  51              		.align	1
  52              		.p2align 2,,3
  53              		.global	clr_dot
  54              		.syntax unified
  55              		.thumb
  56              		.thumb_func
  57              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccSLcNfJ.s 			page 3


  59              	clr_dot:
  60              	.LVL1:
  61              	.LFB1:
  60:src/lcd.c     **** void clr_dot(int n) {
  62              		.loc 1 60 21 is_stmt 1 view -0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  61:src/lcd.c     ****         dots[n] = 0;
  67              		.loc 1 61 9 view .LVU5
  68              		.loc 1 61 17 is_stmt 0 view .LVU6
  69 0000 014B     		ldr	r3, .L6
  70 0002 0022     		movs	r2, #0
  71 0004 1A54     		strb	r2, [r3, r0]
  62:src/lcd.c     **** }
  72              		.loc 1 62 1 view .LVU7
  73 0006 7047     		bx	lr
  74              	.L7:
  75              		.align	2
  76              	.L6:
  77 0008 00000000 		.word	.LANCHOR0
  78              		.cfi_endproc
  79              	.LFE1:
  81              		.section	.text.is_dot,"ax",%progbits
  82              		.align	1
  83              		.p2align 2,,3
  84              		.global	is_dot
  85              		.syntax unified
  86              		.thumb
  87              		.thumb_func
  88              		.fpu fpv4-sp-d16
  90              	is_dot:
  91              	.LVL2:
  92              	.LFB2:
  63:src/lcd.c     **** int is_dot(int n) {
  93              		.loc 1 63 19 is_stmt 1 view -0
  94              		.cfi_startproc
  95              		@ args = 0, pretend = 0, frame = 0
  96              		@ frame_needed = 0, uses_anonymous_args = 0
  97              		@ link register save eliminated.
  64:src/lcd.c     **** 	return dots[n];
  98              		.loc 1 64 2 view .LVU9
  99              		.loc 1 64 13 is_stmt 0 view .LVU10
 100 0000 014B     		ldr	r3, .L9
  65:src/lcd.c     **** }
 101              		.loc 1 65 1 view .LVU11
 102 0002 185C     		ldrb	r0, [r3, r0]	@ zero_extendqisi2
 103              	.LVL3:
 104              		.loc 1 65 1 view .LVU12
 105 0004 7047     		bx	lr
 106              	.L10:
 107 0006 00BF     		.align	2
 108              	.L9:
 109 0008 00000000 		.word	.LANCHOR0
 110              		.cfi_endproc
 111              	.LFE2:
ARM GAS  /tmp/ccSLcNfJ.s 			page 4


 113              		.section	.text.setuptty,"ax",%progbits
 114              		.align	1
 115              		.p2align 2,,3
 116              		.global	setuptty
 117              		.syntax unified
 118              		.thumb
 119              		.thumb_func
 120              		.fpu fpv4-sp-d16
 122              	setuptty:
 123              	.LVL4:
 124              	.LFB3:
  66:src/lcd.c     **** #endif
  67:src/lcd.c     **** 
  68:src/lcd.c     **** int setuptty(int reset) {
 125              		.loc 1 68 25 is_stmt 1 view -0
 126              		.cfi_startproc
 127              		@ args = 0, pretend = 0, frame = 0
 128              		@ frame_needed = 0, uses_anonymous_args = 0
 129              		@ link register save eliminated.
  69:src/lcd.c     **** #ifdef CONSOLE
  70:src/lcd.c     **** #if defined(USECURSES) && !defined(DM42) //don't want this in DM42
  71:src/lcd.c     ****         if (reset)
  72:src/lcd.c     ****                 endwin();
  73:src/lcd.c     ****         else {
  74:src/lcd.c     ****                 initscr();
  75:src/lcd.c     ****                 cbreak();
  76:src/lcd.c     ****                 noecho();
  77:src/lcd.c     ****                 //keypad(stdscr, TRUE);
  78:src/lcd.c     **** 				}
  79:src/lcd.c     **** #endif
  80:src/lcd.c     **** #endif
  81:src/lcd.c     ****         return 0;
 130              		.loc 1 81 9 view .LVU14
  82:src/lcd.c     **** }
 131              		.loc 1 82 1 is_stmt 0 view .LVU15
 132 0000 0020     		movs	r0, #0
 133              	.LVL5:
 134              		.loc 1 82 1 view .LVU16
 135 0002 7047     		bx	lr
 136              		.cfi_endproc
 137              	.LFE3:
 139              		.section	.text.reset_disp,"ax",%progbits
 140              		.align	1
 141              		.p2align 2,,3
 142              		.global	reset_disp
 143              		.syntax unified
 144              		.thumb
 145              		.thumb_func
 146              		.fpu fpv4-sp-d16
 148              	reset_disp:
 149              	.LFB4:
  83:src/lcd.c     **** 
  84:src/lcd.c     **** 
  85:src/lcd.c     **** void reset_disp(void) {
 150              		.loc 1 85 23 is_stmt 1 view -0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccSLcNfJ.s 			page 5


 153              		@ frame_needed = 0, uses_anonymous_args = 0
  86:src/lcd.c     **** #ifdef DM42
  87:src/lcd.c     **** 	int rcl = is_dot(RCL_annun);
 154              		.loc 1 87 2 view .LVU18
 155              	.LVL6:
 156              	.LBB37:
 157              	.LBI37:
  63:src/lcd.c     **** 	return dots[n];
 158              		.loc 1 63 5 view .LVU19
 159              	.LBB38:
  64:src/lcd.c     **** }
 160              		.loc 1 64 2 view .LVU20
 161              	.LBE38:
 162              	.LBE37:
  85:src/lcd.c     **** #ifdef DM42
 163              		.loc 1 85 23 is_stmt 0 view .LVU21
 164 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 165              		.cfi_def_cfa_offset 32
 166              		.cfi_offset 4, -32
 167              		.cfi_offset 5, -28
 168              		.cfi_offset 6, -24
 169              		.cfi_offset 7, -20
 170              		.cfi_offset 8, -16
 171              		.cfi_offset 9, -12
 172              		.cfi_offset 10, -8
 173              		.cfi_offset 14, -4
 174              	.LBB41:
 175              	.LBB39:
  64:src/lcd.c     **** }
 176              		.loc 1 64 13 view .LVU22
 177 0004 1848     		ldr	r0, .L20
 178              	.LBE39:
 179              	.LBE41:
 180              	.LBB42:
 181              	.LBB43:
 182 0006 6FF08303 		mvn	r3, #131
 183              	.LBE43:
 184              	.LBE42:
 185              	.LBB45:
 186              	.LBB40:
 187 000a 90F88A10 		ldrb	r1, [r0, #138]	@ zero_extendqisi2
 188              	.LVL7:
  64:src/lcd.c     **** }
 189              		.loc 1 64 13 view .LVU23
 190              	.LBE40:
 191              	.LBE45:
  88:src/lcd.c     **** 	int bat = is_dot(BATTERY);
 192              		.loc 1 88 2 is_stmt 1 view .LVU24
 193              	.LBB46:
 194              	.LBI46:
  63:src/lcd.c     **** 	return dots[n];
 195              		.loc 1 63 5 view .LVU25
 196              	.LBB47:
  64:src/lcd.c     **** }
 197              		.loc 1 64 2 view .LVU26
  64:src/lcd.c     **** }
 198              		.loc 1 64 13 is_stmt 0 view .LVU27
ARM GAS  /tmp/ccSLcNfJ.s 			page 6


 199 000e 90F887A0 		ldrb	r10, [r0, #135]	@ zero_extendqisi2
 200              	.LVL8:
  64:src/lcd.c     **** }
 201              		.loc 1 64 13 view .LVU28
 202              	.LBE47:
 203              	.LBE46:
  89:src/lcd.c     **** 	int leq = is_dot(LIT_EQ);
 204              		.loc 1 89 2 is_stmt 1 view .LVU29
 205              	.LBB48:
 206              	.LBI48:
  63:src/lcd.c     **** 	return dots[n];
 207              		.loc 1 63 5 view .LVU30
 208              	.LBB49:
  64:src/lcd.c     **** }
 209              		.loc 1 64 2 view .LVU31
  64:src/lcd.c     **** }
 210              		.loc 1 64 13 is_stmt 0 view .LVU32
 211 0012 90F88490 		ldrb	r9, [r0, #132]	@ zero_extendqisi2
 212              	.LVL9:
  64:src/lcd.c     **** }
 213              		.loc 1 64 13 view .LVU33
 214              	.LBE49:
 215              	.LBE48:
  90:src/lcd.c     **** 	int rpn = is_dot(RPN);
 216              		.loc 1 90 2 is_stmt 1 view .LVU34
 217              	.LBB50:
 218              	.LBI42:
  63:src/lcd.c     **** 	return dots[n];
 219              		.loc 1 63 5 view .LVU35
 220              	.LBB44:
  64:src/lcd.c     **** }
 221              		.loc 1 64 2 view .LVU36
  64:src/lcd.c     **** }
 222              		.loc 1 64 13 is_stmt 0 view .LVU37
 223 0016 90F88D80 		ldrb	r8, [r0, #141]	@ zero_extendqisi2
 224              	.LVL10:
  64:src/lcd.c     **** }
 225              		.loc 1 64 13 view .LVU38
 226              	.LBE44:
 227              	.LBE50:
  91:src/lcd.c     **** 	int i;
 228              		.loc 1 91 2 is_stmt 1 view .LVU39
  92:src/lcd.c     ****         for (i=0; i<TOP_DOTS; i++)
 229              		.loc 1 92 9 view .LVU40
 230              		.loc 1 92 19 view .LVU41
  93:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 231              		.loc 1 93 38 is_stmt 0 view .LVU42
 232 001a 4925     		movs	r5, #73
 233              	.LBB51:
 234              	.LBB52:
  61:src/lcd.c     **** }
 235              		.loc 1 61 17 view .LVU43
 236 001c 0026     		movs	r6, #0
 237              	.LBE52:
 238              	.LBE51:
  92:src/lcd.c     ****         for (i=0; i<TOP_DOTS; i++)
 239              		.loc 1 92 9 view .LVU44
ARM GAS  /tmp/ccSLcNfJ.s 			page 7


 240 001e 40F2C727 		movw	r7, #711
 241 0022 06E0     		b	.L17
 242              	.LVL11:
 243              	.L13:
  94:src/lcd.c     **** 			clr_dot(i);
 244              		.loc 1 94 4 is_stmt 1 discriminator 2 view .LVU45
 245              	.LBB59:
 246              	.LBI51:
  60:src/lcd.c     ****         dots[n] = 0;
 247              		.loc 1 60 6 discriminator 2 view .LVU46
 248              	.LBB53:
  61:src/lcd.c     **** }
 249              		.loc 1 61 9 discriminator 2 view .LVU47
 250              	.LBE53:
 251              	.LBE59:
  93:src/lcd.c     **** 			clr_dot(i);
 252              		.loc 1 93 38 is_stmt 0 discriminator 2 view .LVU48
 253 0024 E407     		lsls	r4, r4, #31
 254              	.LBB60:
 255              	.LBB54:
  61:src/lcd.c     **** }
 256              		.loc 1 61 17 discriminator 2 view .LVU49
 257 0026 00EB0302 		add	r2, r0, r3
 258              	.LBE54:
 259              	.LBE60:
  93:src/lcd.c     **** 			clr_dot(i);
 260              		.loc 1 93 38 discriminator 2 view .LVU50
 261 002a 01D4     		bmi	.L14
 262              	.LBB61:
 263              	.LBB55:
  61:src/lcd.c     **** }
 264              		.loc 1 61 17 view .LVU51
 265 002c 82F88460 		strb	r6, [r2, #132]
 266              	.LVL12:
  61:src/lcd.c     **** }
 267              		.loc 1 61 17 view .LVU52
 268              	.LBE55:
 269              	.LBE61:
  92:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 270              		.loc 1 92 31 is_stmt 1 view .LVU53
  92:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 271              		.loc 1 92 19 view .LVU54
 272              	.L14:
  92:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 273              		.loc 1 92 19 is_stmt 0 view .LVU55
 274 0030 0133     		adds	r3, r3, #1
 275              	.L17:
 276              	.LVL13:
  93:src/lcd.c     **** 			clr_dot(i);
 277              		.loc 1 93 3 is_stmt 1 view .LVU56
 278              		.loc 1 94 4 view .LVU57
 279              	.LBB62:
  60:src/lcd.c     ****         dots[n] = 0;
 280              		.loc 1 60 6 view .LVU58
 281              	.LBB56:
  61:src/lcd.c     **** }
 282              		.loc 1 61 9 view .LVU59
ARM GAS  /tmp/ccSLcNfJ.s 			page 8


 283              	.LBE56:
 284              	.LBE62:
  93:src/lcd.c     **** 			clr_dot(i);
 285              		.loc 1 93 38 is_stmt 0 view .LVU60
 286 0032 062B     		cmp	r3, #6
 287              	.LBB63:
 288              	.LBB57:
  61:src/lcd.c     **** }
 289              		.loc 1 61 17 view .LVU61
 290 0034 00EB0302 		add	r2, r0, r3
 291              	.LBE57:
 292              	.LBE63:
  93:src/lcd.c     **** 			clr_dot(i);
 293              		.loc 1 93 38 view .LVU62
 294 0038 25FA03F4 		lsr	r4, r5, r3
 295 003c F2D9     		bls	.L13
  92:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 296              		.loc 1 92 9 view .LVU63
 297 003e BB42     		cmp	r3, r7
 298              	.LBB64:
 299              	.LBB58:
  61:src/lcd.c     **** }
 300              		.loc 1 61 17 view .LVU64
 301 0040 82F88460 		strb	r6, [r2, #132]
 302              	.LVL14:
  61:src/lcd.c     **** }
 303              		.loc 1 61 17 view .LVU65
 304              	.LBE58:
 305              	.LBE64:
  92:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 306              		.loc 1 92 31 is_stmt 1 view .LVU66
  92:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 307              		.loc 1 92 19 view .LVU67
  92:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 308              		.loc 1 92 9 is_stmt 0 view .LVU68
 309 0044 F4D1     		bne	.L14
  95:src/lcd.c     **** 	dot(RCL_annun, rcl);
 310              		.loc 1 95 2 is_stmt 1 view .LVU69
 311 0046 8A20     		movs	r0, #138
 312 0048 FFF7FEFF 		bl	dot
 313              	.LVL15:
  96:src/lcd.c     **** 	dot(BATTERY, bat);
 314              		.loc 1 96 2 view .LVU70
 315 004c 5146     		mov	r1, r10
 316 004e 8720     		movs	r0, #135
 317 0050 FFF7FEFF 		bl	dot
 318              	.LVL16:
  97:src/lcd.c     **** 	dot(LIT_EQ, leq);
 319              		.loc 1 97 2 view .LVU71
 320 0054 4946     		mov	r1, r9
 321 0056 8420     		movs	r0, #132
 322 0058 FFF7FEFF 		bl	dot
 323              	.LVL17:
  98:src/lcd.c     **** 	dot(RPN, rpn);
 324              		.loc 1 98 2 view .LVU72
 325 005c 4146     		mov	r1, r8
 326 005e 8D20     		movs	r0, #141
ARM GAS  /tmp/ccSLcNfJ.s 			page 9


  99:src/lcd.c     **** #else  
 100:src/lcd.c     **** #ifndef CONSOLE
 101:src/lcd.c     **** 	int rcl = is_dot(RCL_annun);
 102:src/lcd.c     **** 	int bat = is_dot(BATTERY);
 103:src/lcd.c     **** 	int leq = is_dot(LIT_EQ);
 104:src/lcd.c     **** 	int rpn = is_dot(RPN);
 105:src/lcd.c     **** #ifndef REALBUILD
 106:src/lcd.c     **** 	*LastDisplayedText = '\0';
 107:src/lcd.c     **** #endif
 108:src/lcd.c     ****         wait_for_display();
 109:src/lcd.c     **** #if defined(QTGUI) || defined(IOS)
 110:src/lcd.c     ****     	xset(LcdData, 0, sizeof(LcdData));
 111:src/lcd.c     ****     	xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
 112:src/lcd.c     ****     	LastDisplayedNumber[NUMBER_LENGTH]=0;
 113:src/lcd.c     ****     	xset(LastDisplayedExponent, ' ', EXPONENT_LENGTH);
 114:src/lcd.c     ****     	LastDisplayedExponent[EXPONENT_LENGTH]=0;
 115:src/lcd.c     **** #else
 116:src/lcd.c     ****         // terrible code which assumes int are 4 bytes long. Works fine for realbuild and for WINGU
 117:src/lcd.c     **** 	xset((void *) AT91C_SLCDC_MEM, 0, 4 * 20);
 118:src/lcd.c     **** #endif
 119:src/lcd.c     **** 	dot(RCL_annun, rcl);
 120:src/lcd.c     **** 	dot(BATTERY, bat);
 121:src/lcd.c     **** 	dot(LIT_EQ, leq);
 122:src/lcd.c     **** 	dot(RPN, rpn);
 123:src/lcd.c     **** #else
 124:src/lcd.c     **** // Console
 125:src/lcd.c     **** #ifdef USECURSES
 126:src/lcd.c     **** 	int i;
 127:src/lcd.c     ****         for (i=0; i<400; i++)
 128:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 129:src/lcd.c     **** 			clr_dot(i);
 130:src/lcd.c     **** 
 131:src/lcd.c     **** 	erase();
 132:src/lcd.c     ****         MOVE(0, 4);
 133:src/lcd.c     **** #else
 134:src/lcd.c     ****         putchar('\r');
 135:src/lcd.c     ****         for (i=0; i<70; i++)
 136:src/lcd.c     ****                 putchar(' ');
 137:src/lcd.c     ****         putchar('\r');
 138:src/lcd.c     ****         putchar(' ');
 139:src/lcd.c     **** #endif
 140:src/lcd.c     **** #endif
 141:src/lcd.c     ****         State2.invalid_disp = 0;
 142:src/lcd.c     **** #endif
 143:src/lcd.c     **** }
 327              		.loc 1 143 1 is_stmt 0 view .LVU73
 328 0060 BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 329              		.cfi_restore 14
 330              		.cfi_restore 10
 331              		.cfi_restore 9
 332              		.cfi_restore 8
 333              		.cfi_restore 7
 334              		.cfi_restore 6
 335              		.cfi_restore 5
 336              		.cfi_restore 4
 337              		.cfi_def_cfa_offset 0
 338              	.LVL18:
ARM GAS  /tmp/ccSLcNfJ.s 			page 10


  98:src/lcd.c     **** 	dot(RPN, rpn);
 339              		.loc 1 98 2 view .LVU74
 340 0064 FFF7FEBF 		b	dot
 341              	.LVL19:
 342              	.L21:
  98:src/lcd.c     **** 	dot(RPN, rpn);
 343              		.loc 1 98 2 view .LVU75
 344              		.align	2
 345              	.L20:
 346 0068 00000000 		.word	.LANCHOR0
 347              		.cfi_endproc
 348              	.LFE4:
 350              		.section	.text.left_side,"ax",%progbits
 351              		.align	1
 352              		.p2align 2,,3
 353              		.global	left_side
 354              		.syntax unified
 355              		.thumb
 356              		.thumb_func
 357              		.fpu fpv4-sp-d16
 359              	left_side:
 360              	.LVL20:
 361              	.LFB5:
 144:src/lcd.c     **** 
 145:src/lcd.c     **** #if defined(DM42)
 146:src/lcd.c     ****   #define setBlackPixel(x, y)                bitblt24(x, 1, y, 1, BLT_OR,   BLT_NONE)
 147:src/lcd.c     ****   #define setWhitePixel(x, y)                bitblt24(x, 1, y, 1, BLT_ANDN, BLT_NONE)
 148:src/lcd.c     **** 
 149:src/lcd.c     **** /* void left_side (int i, int j) { //i - xleft reference; j - ytop reference */
 150:src/lcd.c     **** /*   lcd_fill_rect ( i+2, j+11, 4, 8, 0xff ); */
 151:src/lcd.c     **** /*   lcd_fill_rect ( i+3, j+3, 4, 8, 0xff ); */
 152:src/lcd.c     **** /*   setBlackPixel ( i+4, j+2 ); */
 153:src/lcd.c     **** /*   setBlackPixel ( i+3, j+19 ); */
 154:src/lcd.c     **** /*   setWhitePixel ( i+6, j+3 ); */
 155:src/lcd.c     **** /*   setWhitePixel ( i+5, j+18 ); */
 156:src/lcd.c     **** /* } */
 157:src/lcd.c     **** 
 158:src/lcd.c     **** void left_side (int i, int j) { //i - xleft reference; j - ytop reference
 362              		.loc 1 158 31 is_stmt 1 view -0
 363              		.cfi_startproc
 364              		@ args = 0, pretend = 0, frame = 0
 365              		@ frame_needed = 0, uses_anonymous_args = 0
 159:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 366              		.loc 1 159 3 view .LVU77
 158:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 367              		.loc 1 158 31 is_stmt 0 view .LVU78
 368 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 369              		.cfi_def_cfa_offset 24
 370              		.cfi_offset 4, -24
 371              		.cfi_offset 5, -20
 372              		.cfi_offset 6, -16
 373              		.cfi_offset 7, -12
 374              		.cfi_offset 8, -8
 375              		.cfi_offset 14, -4
 376 0004 82B0     		sub	sp, sp, #8
 377              		.cfi_def_cfa_offset 32
 378              		.loc 1 159 3 view .LVU79
ARM GAS  /tmp/ccSLcNfJ.s 			page 11


 379 0006 FF27     		movs	r7, #255
 158:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 380              		.loc 1 158 31 view .LVU80
 381 0008 0D46     		mov	r5, r1
 382              		.loc 1 159 3 view .LVU81
 383 000a 124E     		ldr	r6, .L24
 384 000c 0097     		str	r7, [sp]
 158:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 385              		.loc 1 158 31 view .LVU82
 386 000e 0446     		mov	r4, r0
 160:src/lcd.c     ****   lcd_fill_rect (i+3, j+2, 1, 18, 0xff);
 387              		.loc 1 160 24 view .LVU83
 388 0010 05F10208 		add	r8, r5, #2
 159:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 389              		.loc 1 159 3 view .LVU84
 390 0014 0B31     		adds	r1, r1, #11
 391              	.LVL21:
 159:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 392              		.loc 1 159 3 view .LVU85
 393 0016 0230     		adds	r0, r0, #2
 394              	.LVL22:
 159:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 395              		.loc 1 159 3 view .LVU86
 396 0018 0923     		movs	r3, #9
 397 001a 0122     		movs	r2, #1
 398 001c B047     		blx	r6
 399              	.LVL23:
 400              		.loc 1 160 3 is_stmt 1 view .LVU87
 401 001e 4146     		mov	r1, r8
 402 0020 E01C     		adds	r0, r4, #3
 403 0022 0097     		str	r7, [sp]
 404 0024 1223     		movs	r3, #18
 405 0026 0122     		movs	r2, #1
 406 0028 B047     		blx	r6
 407              	.LVL24:
 161:src/lcd.c     ****   lcd_fill_rect (i+4, j+2, 1, 17, 0xff);
 408              		.loc 1 161 3 view .LVU88
 409 002a 4146     		mov	r1, r8
 410 002c 201D     		adds	r0, r4, #4
 411 002e 0097     		str	r7, [sp]
 412 0030 1123     		movs	r3, #17
 413 0032 0122     		movs	r2, #1
 414 0034 B047     		blx	r6
 415              	.LVL25:
 162:src/lcd.c     ****   lcd_fill_rect (i+5, j+3, 1, 15, 0xff);
 416              		.loc 1 162 3 view .LVU89
 417 0036 E91C     		adds	r1, r5, #3
 418 0038 601D     		adds	r0, r4, #5
 419 003a 0097     		str	r7, [sp]
 420 003c 0F23     		movs	r3, #15
 421 003e 0122     		movs	r2, #1
 422 0040 B047     		blx	r6
 423              	.LVL26:
 163:src/lcd.c     ****   lcd_fill_rect (i+6, j+4, 1, 7, 0xff);
 424              		.loc 1 163 3 view .LVU90
 425 0042 291D     		adds	r1, r5, #4
 426 0044 A01D     		adds	r0, r4, #6
ARM GAS  /tmp/ccSLcNfJ.s 			page 12


 427 0046 0097     		str	r7, [sp]
 428 0048 0723     		movs	r3, #7
 429 004a 0122     		movs	r2, #1
 430 004c B047     		blx	r6
 431              	.LVL27:
 164:src/lcd.c     **** }
 432              		.loc 1 164 1 is_stmt 0 view .LVU91
 433 004e 02B0     		add	sp, sp, #8
 434              		.cfi_def_cfa_offset 24
 435              		@ sp needed
 436 0050 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 437              	.LVL28:
 438              	.L25:
 439              		.loc 1 164 1 view .LVU92
 440              		.align	2
 441              	.L24:
 442 0054 3D020008 		.word	134218301
 443              		.cfi_endproc
 444              	.LFE5:
 446              		.section	.text.left_side_top,"ax",%progbits
 447              		.align	1
 448              		.p2align 2,,3
 449              		.global	left_side_top
 450              		.syntax unified
 451              		.thumb
 452              		.thumb_func
 453              		.fpu fpv4-sp-d16
 455              	left_side_top:
 456              	.LVL29:
 457              	.LFB6:
 165:src/lcd.c     **** void left_side_top (int i, int j) {
 458              		.loc 1 165 35 is_stmt 1 view -0
 459              		.cfi_startproc
 460              		@ args = 0, pretend = 0, frame = 0
 461              		@ frame_needed = 0, uses_anonymous_args = 0
 462              		@ link register save eliminated.
 166:src/lcd.c     ****   left_side(i, j);
 463              		.loc 1 166 3 view .LVU94
 464 0000 FFF7FEBF 		b	left_side
 465              	.LVL30:
 466              		.loc 1 166 3 is_stmt 0 view .LVU95
 467              		.cfi_endproc
 468              	.LFE6:
 470              		.section	.text.left_side_bottom,"ax",%progbits
 471              		.align	1
 472              		.p2align 2,,3
 473              		.global	left_side_bottom
 474              		.syntax unified
 475              		.thumb
 476              		.thumb_func
 477              		.fpu fpv4-sp-d16
 479              	left_side_bottom:
 480              	.LVL31:
 481              	.LFB7:
 167:src/lcd.c     **** }
 168:src/lcd.c     **** void left_side_bottom (int i, int j) {
 482              		.loc 1 168 38 is_stmt 1 view -0
ARM GAS  /tmp/ccSLcNfJ.s 			page 13


 483              		.cfi_startproc
 484              		@ args = 0, pretend = 0, frame = 0
 485              		@ frame_needed = 0, uses_anonymous_args = 0
 486              		@ link register save eliminated.
 169:src/lcd.c     ****   left_side(i-2, j+19);
 487              		.loc 1 169 3 view .LVU97
 488 0000 0238     		subs	r0, r0, #2
 489              	.LVL32:
 490              		.loc 1 169 3 is_stmt 0 view .LVU98
 491 0002 1331     		adds	r1, r1, #19
 492              	.LVL33:
 493              		.loc 1 169 3 view .LVU99
 494 0004 FFF7FEBF 		b	left_side
 495              	.LVL34:
 496              		.loc 1 169 3 view .LVU100
 497              		.cfi_endproc
 498              	.LFE7:
 500              		.section	.text.right_side,"ax",%progbits
 501              		.align	1
 502              		.p2align 2,,3
 503              		.global	right_side
 504              		.syntax unified
 505              		.thumb
 506              		.thumb_func
 507              		.fpu fpv4-sp-d16
 509              	right_side:
 510              	.LVL35:
 511              	.LFB8:
 170:src/lcd.c     **** }
 171:src/lcd.c     **** void right_side (int i, int j) {
 512              		.loc 1 171 32 is_stmt 1 view -0
 513              		.cfi_startproc
 514              		@ args = 0, pretend = 0, frame = 0
 515              		@ frame_needed = 0, uses_anonymous_args = 0
 172:src/lcd.c     ****   lcd_fill_rect (i+16, j+11, 1, 7, 0xff);
 516              		.loc 1 172 3 view .LVU102
 171:src/lcd.c     ****   lcd_fill_rect (i+16, j+11, 1, 7, 0xff);
 517              		.loc 1 171 32 is_stmt 0 view .LVU103
 518 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 519              		.cfi_def_cfa_offset 24
 520              		.cfi_offset 4, -24
 521              		.cfi_offset 5, -20
 522              		.cfi_offset 6, -16
 523              		.cfi_offset 7, -12
 524              		.cfi_offset 8, -8
 525              		.cfi_offset 14, -4
 526 0004 82B0     		sub	sp, sp, #8
 527              		.cfi_def_cfa_offset 32
 528              		.loc 1 172 3 view .LVU104
 529 0006 FF27     		movs	r7, #255
 530 0008 144E     		ldr	r6, .L30
 531 000a 0097     		str	r7, [sp]
 171:src/lcd.c     ****   lcd_fill_rect (i+16, j+11, 1, 7, 0xff);
 532              		.loc 1 171 32 view .LVU105
 533 000c 0446     		mov	r4, r0
 534 000e 0D46     		mov	r5, r1
 535              		.loc 1 172 3 view .LVU106
ARM GAS  /tmp/ccSLcNfJ.s 			page 14


 536 0010 1030     		adds	r0, r0, #16
 537              	.LVL36:
 538              		.loc 1 172 3 view .LVU107
 539 0012 0B31     		adds	r1, r1, #11
 540              	.LVL37:
 541              		.loc 1 172 3 view .LVU108
 542 0014 0723     		movs	r3, #7
 543 0016 0122     		movs	r2, #1
 544 0018 B047     		blx	r6
 545              	.LVL38:
 173:src/lcd.c     ****   lcd_fill_rect (i+17, j+4, 1, 15, 0xff);
 546              		.loc 1 173 3 is_stmt 1 view .LVU109
 547 001a 291D     		adds	r1, r5, #4
 548 001c 04F11100 		add	r0, r4, #17
 549 0020 0097     		str	r7, [sp]
 550 0022 0F23     		movs	r3, #15
 551 0024 0122     		movs	r2, #1
 552 0026 B047     		blx	r6
 553              	.LVL39:
 174:src/lcd.c     ****   lcd_fill_rect (i+18, j+3, 1, 17, 0xff);
 554              		.loc 1 174 3 view .LVU110
 175:src/lcd.c     ****   lcd_fill_rect (i+19, j+2, 1, 18, 0xff);
 555              		.loc 1 175 25 is_stmt 0 view .LVU111
 556 0028 05F10208 		add	r8, r5, #2
 174:src/lcd.c     ****   lcd_fill_rect (i+18, j+3, 1, 17, 0xff);
 557              		.loc 1 174 3 view .LVU112
 558 002c E91C     		adds	r1, r5, #3
 559 002e 04F11200 		add	r0, r4, #18
 560 0032 0097     		str	r7, [sp]
 561 0034 1123     		movs	r3, #17
 562 0036 0122     		movs	r2, #1
 563 0038 B047     		blx	r6
 564              	.LVL40:
 565              		.loc 1 175 3 is_stmt 1 view .LVU113
 566 003a 4146     		mov	r1, r8
 567 003c 04F11300 		add	r0, r4, #19
 568 0040 0097     		str	r7, [sp]
 569 0042 1223     		movs	r3, #18
 570 0044 0122     		movs	r2, #1
 571 0046 B047     		blx	r6
 572              	.LVL41:
 176:src/lcd.c     ****   lcd_fill_rect (i+20, j+2, 1, 9, 0xff);
 573              		.loc 1 176 3 view .LVU114
 574 0048 4146     		mov	r1, r8
 575 004a 04F11400 		add	r0, r4, #20
 576 004e 0097     		str	r7, [sp]
 577 0050 0923     		movs	r3, #9
 578 0052 0122     		movs	r2, #1
 579 0054 B047     		blx	r6
 580              	.LVL42:
 177:src/lcd.c     **** }
 581              		.loc 1 177 1 is_stmt 0 view .LVU115
 582 0056 02B0     		add	sp, sp, #8
 583              		.cfi_def_cfa_offset 24
 584              		@ sp needed
 585 0058 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 586              	.LVL43:
ARM GAS  /tmp/ccSLcNfJ.s 			page 15


 587              	.L31:
 588              		.loc 1 177 1 view .LVU116
 589              		.align	2
 590              	.L30:
 591 005c 3D020008 		.word	134218301
 592              		.cfi_endproc
 593              	.LFE8:
 595              		.section	.text.right_side_top,"ax",%progbits
 596              		.align	1
 597              		.p2align 2,,3
 598              		.global	right_side_top
 599              		.syntax unified
 600              		.thumb
 601              		.thumb_func
 602              		.fpu fpv4-sp-d16
 604              	right_side_top:
 605              	.LVL44:
 606              	.LFB9:
 178:src/lcd.c     **** void right_side_top (int i, int j) {
 607              		.loc 1 178 36 is_stmt 1 view -0
 608              		.cfi_startproc
 609              		@ args = 0, pretend = 0, frame = 0
 610              		@ frame_needed = 0, uses_anonymous_args = 0
 611              		@ link register save eliminated.
 179:src/lcd.c     ****   right_side(i, j);
 612              		.loc 1 179 3 view .LVU118
 613 0000 FFF7FEBF 		b	right_side
 614              	.LVL45:
 615              		.loc 1 179 3 is_stmt 0 view .LVU119
 616              		.cfi_endproc
 617              	.LFE9:
 619              		.section	.text.right_side_bottom,"ax",%progbits
 620              		.align	1
 621              		.p2align 2,,3
 622              		.global	right_side_bottom
 623              		.syntax unified
 624              		.thumb
 625              		.thumb_func
 626              		.fpu fpv4-sp-d16
 628              	right_side_bottom:
 629              	.LVL46:
 630              	.LFB10:
 180:src/lcd.c     **** }
 181:src/lcd.c     **** void right_side_bottom (int i, int j) {
 631              		.loc 1 181 39 is_stmt 1 view -0
 632              		.cfi_startproc
 633              		@ args = 0, pretend = 0, frame = 0
 634              		@ frame_needed = 0, uses_anonymous_args = 0
 635              		@ link register save eliminated.
 182:src/lcd.c     ****   right_side(i-2, j+19);
 636              		.loc 1 182 3 view .LVU121
 637 0000 0238     		subs	r0, r0, #2
 638              	.LVL47:
 639              		.loc 1 182 3 is_stmt 0 view .LVU122
 640 0002 1331     		adds	r1, r1, #19
 641              	.LVL48:
 642              		.loc 1 182 3 view .LVU123
ARM GAS  /tmp/ccSLcNfJ.s 			page 16


 643 0004 FFF7FEBF 		b	right_side
 644              	.LVL49:
 645              		.loc 1 182 3 view .LVU124
 646              		.cfi_endproc
 647              	.LFE10:
 649              		.section	.text.top,"ax",%progbits
 650              		.align	1
 651              		.p2align 2,,3
 652              		.global	top
 653              		.syntax unified
 654              		.thumb
 655              		.thumb_func
 656              		.fpu fpv4-sp-d16
 658              	top:
 659              	.LVL50:
 660              	.LFB11:
 183:src/lcd.c     **** }
 184:src/lcd.c     **** void top (int i, int j) {
 661              		.loc 1 184 25 is_stmt 1 view -0
 662              		.cfi_startproc
 663              		@ args = 0, pretend = 0, frame = 0
 664              		@ frame_needed = 0, uses_anonymous_args = 0
 185:src/lcd.c     ****   lcd_fill_rect ( i+5, j, 14, 1, 0xff );
 665              		.loc 1 185 3 view .LVU126
 184:src/lcd.c     ****   lcd_fill_rect ( i+5, j, 14, 1, 0xff );
 666              		.loc 1 184 25 is_stmt 0 view .LVU127
 667 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 668              		.cfi_def_cfa_offset 20
 669              		.cfi_offset 4, -20
 670              		.cfi_offset 5, -16
 671              		.cfi_offset 6, -12
 672              		.cfi_offset 7, -8
 673              		.cfi_offset 14, -4
 674 0002 83B0     		sub	sp, sp, #12
 675              		.cfi_def_cfa_offset 32
 676              		.loc 1 185 3 view .LVU128
 677 0004 FF27     		movs	r7, #255
 678 0006 0E4E     		ldr	r6, .L36
 679 0008 0097     		str	r7, [sp]
 184:src/lcd.c     ****   lcd_fill_rect ( i+5, j, 14, 1, 0xff );
 680              		.loc 1 184 25 view .LVU129
 681 000a 0446     		mov	r4, r0
 682 000c 0D46     		mov	r5, r1
 683              		.loc 1 185 3 view .LVU130
 684 000e 0530     		adds	r0, r0, #5
 685              	.LVL51:
 686              		.loc 1 185 3 view .LVU131
 687 0010 0123     		movs	r3, #1
 688 0012 0E22     		movs	r2, #14
 689 0014 B047     		blx	r6
 690              	.LVL52:
 186:src/lcd.c     ****   lcd_fill_rect ( i+4, j+1, 16, 1, 0xff );
 691              		.loc 1 186 3 is_stmt 1 view .LVU132
 692 0016 691C     		adds	r1, r5, #1
 693 0018 201D     		adds	r0, r4, #4
 694 001a 0097     		str	r7, [sp]
 695 001c 0123     		movs	r3, #1
ARM GAS  /tmp/ccSLcNfJ.s 			page 17


 696 001e 1022     		movs	r2, #16
 697 0020 B047     		blx	r6
 698              	.LVL53:
 187:src/lcd.c     ****   lcd_fill_rect ( i+6, j+2, 12, 1, 0xff );
 699              		.loc 1 187 3 view .LVU133
 700 0022 A91C     		adds	r1, r5, #2
 701 0024 A01D     		adds	r0, r4, #6
 702 0026 0097     		str	r7, [sp]
 703 0028 0123     		movs	r3, #1
 704 002a 0C22     		movs	r2, #12
 705 002c B047     		blx	r6
 706              	.LVL54:
 188:src/lcd.c     ****   lcd_fill_rect ( i+7, j+3, 10, 1, 0xff );
 707              		.loc 1 188 3 view .LVU134
 708 002e E91C     		adds	r1, r5, #3
 709 0030 E01D     		adds	r0, r4, #7
 710 0032 0097     		str	r7, [sp]
 711 0034 0123     		movs	r3, #1
 712 0036 0A22     		movs	r2, #10
 713 0038 B047     		blx	r6
 714              	.LVL55:
 189:src/lcd.c     **** }
 715              		.loc 1 189 1 is_stmt 0 view .LVU135
 716 003a 03B0     		add	sp, sp, #12
 717              		.cfi_def_cfa_offset 20
 718              		@ sp needed
 719 003c F0BD     		pop	{r4, r5, r6, r7, pc}
 720              	.LVL56:
 721              	.L37:
 722              		.loc 1 189 1 view .LVU136
 723 003e 00BF     		.align	2
 724              	.L36:
 725 0040 3D020008 		.word	134218301
 726              		.cfi_endproc
 727              	.LFE11:
 729              		.section	.text.middle,"ax",%progbits
 730              		.align	1
 731              		.p2align 2,,3
 732              		.global	middle
 733              		.syntax unified
 734              		.thumb
 735              		.thumb_func
 736              		.fpu fpv4-sp-d16
 738              	middle:
 739              	.LVL57:
 740              	.LFB12:
 190:src/lcd.c     **** void middle (int i, int j) {
 741              		.loc 1 190 28 is_stmt 1 view -0
 742              		.cfi_startproc
 743              		@ args = 0, pretend = 0, frame = 0
 744              		@ frame_needed = 0, uses_anonymous_args = 0
 191:src/lcd.c     ****   lcd_fill_rect ( i+5, j+19, 11, 3, 0xff );
 745              		.loc 1 191 3 view .LVU138
 190:src/lcd.c     **** void middle (int i, int j) {
 746              		.loc 1 190 28 is_stmt 0 view .LVU139
 747 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 748              		.cfi_def_cfa_offset 20
ARM GAS  /tmp/ccSLcNfJ.s 			page 18


 749              		.cfi_offset 4, -20
 750              		.cfi_offset 5, -16
 751              		.cfi_offset 6, -12
 752              		.cfi_offset 7, -8
 753              		.cfi_offset 14, -4
 754 0002 83B0     		sub	sp, sp, #12
 755              		.cfi_def_cfa_offset 32
 756              		.loc 1 191 3 view .LVU140
 757 0004 FF23     		movs	r3, #255
 190:src/lcd.c     **** void middle (int i, int j) {
 758              		.loc 1 190 28 view .LVU141
 759 0006 0546     		mov	r5, r0
 760              		.loc 1 191 3 view .LVU142
 761 0008 0093     		str	r3, [sp]
 762 000a 0D4E     		ldr	r6, .L40
 192:src/lcd.c     ****   setBlackPixel ( i+4, j+20 );
 763              		.loc 1 192 3 view .LVU143
 764 000c 0D4F     		ldr	r7, .L40+4
 190:src/lcd.c     **** void middle (int i, int j) {
 765              		.loc 1 190 28 view .LVU144
 766 000e 0C46     		mov	r4, r1
 191:src/lcd.c     ****   lcd_fill_rect ( i+5, j+19, 11, 3, 0xff );
 767              		.loc 1 191 3 view .LVU145
 768 0010 0530     		adds	r0, r0, #5
 769              	.LVL58:
 191:src/lcd.c     ****   lcd_fill_rect ( i+5, j+19, 11, 3, 0xff );
 770              		.loc 1 191 3 view .LVU146
 771 0012 1331     		adds	r1, r1, #19
 772              	.LVL59:
 191:src/lcd.c     ****   lcd_fill_rect ( i+5, j+19, 11, 3, 0xff );
 773              		.loc 1 191 3 view .LVU147
 774 0014 0323     		movs	r3, #3
 775 0016 0B22     		movs	r2, #11
 776 0018 B047     		blx	r6
 777              	.LVL60:
 778              		.loc 1 192 3 is_stmt 1 view .LVU148
 779 001a 1434     		adds	r4, r4, #20
 780              	.LVL61:
 781              		.loc 1 192 3 is_stmt 0 view .LVU149
 782 001c 0026     		movs	r6, #0
 783 001e 0123     		movs	r3, #1
 784 0020 2246     		mov	r2, r4
 785 0022 281D     		adds	r0, r5, #4
 786 0024 1946     		mov	r1, r3
 787 0026 CDE90066 		strd	r6, r6, [sp]
 788 002a B847     		blx	r7
 789              	.LVL62:
 193:src/lcd.c     ****   setBlackPixel ( i+16, j+20 );
 790              		.loc 1 193 3 is_stmt 1 view .LVU150
 791 002c 0123     		movs	r3, #1
 792 002e CDE90066 		strd	r6, r6, [sp]
 793 0032 2246     		mov	r2, r4
 794 0034 05F11000 		add	r0, r5, #16
 795 0038 1946     		mov	r1, r3
 796 003a B847     		blx	r7
 797              	.LVL63:
 194:src/lcd.c     **** }
ARM GAS  /tmp/ccSLcNfJ.s 			page 19


 798              		.loc 1 194 1 is_stmt 0 view .LVU151
 799 003c 03B0     		add	sp, sp, #12
 800              		.cfi_def_cfa_offset 20
 801              		@ sp needed
 802 003e F0BD     		pop	{r4, r5, r6, r7, pc}
 803              	.LVL64:
 804              	.L41:
 805              		.loc 1 194 1 view .LVU152
 806              		.align	2
 807              	.L40:
 808 0040 3D020008 		.word	134218301
 809 0044 25020008 		.word	134218277
 810              		.cfi_endproc
 811              	.LFE12:
 813              		.section	.text.bottom,"ax",%progbits
 814              		.align	1
 815              		.p2align 2,,3
 816              		.global	bottom
 817              		.syntax unified
 818              		.thumb
 819              		.thumb_func
 820              		.fpu fpv4-sp-d16
 822              	bottom:
 823              	.LVL65:
 824              	.LFB13:
 195:src/lcd.c     **** void bottom (int i, int j) {
 825              		.loc 1 195 28 is_stmt 1 view -0
 826              		.cfi_startproc
 827              		@ args = 0, pretend = 0, frame = 0
 828              		@ frame_needed = 0, uses_anonymous_args = 0
 196:src/lcd.c     ****   lcd_fill_rect ( i+2, j+40, 14, 1, 0xff );
 829              		.loc 1 196 3 view .LVU154
 195:src/lcd.c     **** void bottom (int i, int j) {
 830              		.loc 1 195 28 is_stmt 0 view .LVU155
 831 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 832              		.cfi_def_cfa_offset 20
 833              		.cfi_offset 4, -20
 834              		.cfi_offset 5, -16
 835              		.cfi_offset 6, -12
 836              		.cfi_offset 7, -8
 837              		.cfi_offset 14, -4
 838 0002 83B0     		sub	sp, sp, #12
 839              		.cfi_def_cfa_offset 32
 840              		.loc 1 196 3 view .LVU156
 841 0004 FF27     		movs	r7, #255
 842 0006 104E     		ldr	r6, .L44
 843 0008 0097     		str	r7, [sp]
 195:src/lcd.c     **** void bottom (int i, int j) {
 844              		.loc 1 195 28 view .LVU157
 845 000a 0446     		mov	r4, r0
 846 000c 0D46     		mov	r5, r1
 847              		.loc 1 196 3 view .LVU158
 848 000e 0230     		adds	r0, r0, #2
 849              	.LVL66:
 850              		.loc 1 196 3 view .LVU159
 851 0010 2831     		adds	r1, r1, #40
 852              	.LVL67:
ARM GAS  /tmp/ccSLcNfJ.s 			page 20


 853              		.loc 1 196 3 view .LVU160
 854 0012 0123     		movs	r3, #1
 855 0014 0E22     		movs	r2, #14
 856 0016 B047     		blx	r6
 857              	.LVL68:
 197:src/lcd.c     ****   lcd_fill_rect ( i+1, j+39, 16, 1, 0xff );
 858              		.loc 1 197 3 is_stmt 1 view .LVU161
 859 0018 05F12701 		add	r1, r5, #39
 860 001c 601C     		adds	r0, r4, #1
 861 001e 0097     		str	r7, [sp]
 862 0020 0123     		movs	r3, #1
 863 0022 1022     		movs	r2, #16
 864 0024 B047     		blx	r6
 865              	.LVL69:
 198:src/lcd.c     ****   lcd_fill_rect ( i+3, j+38, 12, 1, 0xff );
 866              		.loc 1 198 3 view .LVU162
 867 0026 05F12601 		add	r1, r5, #38
 868 002a E01C     		adds	r0, r4, #3
 869 002c 0097     		str	r7, [sp]
 870 002e 0123     		movs	r3, #1
 871 0030 0C22     		movs	r2, #12
 872 0032 B047     		blx	r6
 873              	.LVL70:
 199:src/lcd.c     ****   lcd_fill_rect ( i+4, j+37, 10, 1, 0xff );
 874              		.loc 1 199 3 view .LVU163
 875 0034 05F12501 		add	r1, r5, #37
 876 0038 201D     		adds	r0, r4, #4
 877 003a 0097     		str	r7, [sp]
 878 003c 0123     		movs	r3, #1
 879 003e 0A22     		movs	r2, #10
 880 0040 B047     		blx	r6
 881              	.LVL71:
 200:src/lcd.c     **** }
 882              		.loc 1 200 1 is_stmt 0 view .LVU164
 883 0042 03B0     		add	sp, sp, #12
 884              		.cfi_def_cfa_offset 20
 885              		@ sp needed
 886 0044 F0BD     		pop	{r4, r5, r6, r7, pc}
 887              	.LVL72:
 888              	.L45:
 889              		.loc 1 200 1 view .LVU165
 890 0046 00BF     		.align	2
 891              	.L44:
 892 0048 3D020008 		.word	134218301
 893              		.cfi_endproc
 894              	.LFE13:
 896              		.section	.text.decimal,"ax",%progbits
 897              		.align	1
 898              		.p2align 2,,3
 899              		.global	decimal
 900              		.syntax unified
 901              		.thumb
 902              		.thumb_func
 903              		.fpu fpv4-sp-d16
 905              	decimal:
 906              	.LVL73:
 907              	.LFB14:
ARM GAS  /tmp/ccSLcNfJ.s 			page 21


 201:src/lcd.c     **** void decimal (int i, int j) {
 908              		.loc 1 201 29 is_stmt 1 view -0
 909              		.cfi_startproc
 910              		@ args = 0, pretend = 0, frame = 0
 911              		@ frame_needed = 0, uses_anonymous_args = 0
 202:src/lcd.c     ****   lcd_fill_rect (i+19, j+40, 5, 5, 0xff);
 912              		.loc 1 202 3 view .LVU167
 201:src/lcd.c     **** void decimal (int i, int j) {
 913              		.loc 1 201 29 is_stmt 0 view .LVU168
 914 0000 10B5     		push	{r4, lr}
 915              		.cfi_def_cfa_offset 8
 916              		.cfi_offset 4, -8
 917              		.cfi_offset 14, -4
 918 0002 82B0     		sub	sp, sp, #8
 919              		.cfi_def_cfa_offset 16
 920              		.loc 1 202 3 view .LVU169
 921 0004 0523     		movs	r3, #5
 922 0006 FF22     		movs	r2, #255
 923 0008 0092     		str	r2, [sp]
 924 000a 034C     		ldr	r4, .L48
 925 000c 1330     		adds	r0, r0, #19
 926              	.LVL74:
 927              		.loc 1 202 3 view .LVU170
 928 000e 2831     		adds	r1, r1, #40
 929              	.LVL75:
 930              		.loc 1 202 3 view .LVU171
 931 0010 1A46     		mov	r2, r3
 932 0012 A047     		blx	r4
 933              	.LVL76:
 203:src/lcd.c     **** }
 934              		.loc 1 203 1 view .LVU172
 935 0014 02B0     		add	sp, sp, #8
 936              		.cfi_def_cfa_offset 8
 937              		@ sp needed
 938 0016 10BD     		pop	{r4, pc}
 939              	.L49:
 940              		.align	2
 941              	.L48:
 942 0018 3D020008 		.word	134218301
 943              		.cfi_endproc
 944              	.LFE14:
 946              		.section	.text.comma,"ax",%progbits
 947              		.align	1
 948              		.p2align 2,,3
 949              		.global	comma
 950              		.syntax unified
 951              		.thumb
 952              		.thumb_func
 953              		.fpu fpv4-sp-d16
 955              	comma:
 956              	.LVL77:
 957              	.LFB15:
 204:src/lcd.c     **** void comma (int i, int j) {
 958              		.loc 1 204 27 is_stmt 1 view -0
 959              		.cfi_startproc
 960              		@ args = 0, pretend = 0, frame = 0
 961              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccSLcNfJ.s 			page 22


 205:src/lcd.c     ****   lcd_fill_rect (i+21, j+45, 3, 3, 0xff);
 962              		.loc 1 205 3 view .LVU174
 204:src/lcd.c     **** void comma (int i, int j) {
 963              		.loc 1 204 27 is_stmt 0 view .LVU175
 964 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 965              		.cfi_def_cfa_offset 20
 966              		.cfi_offset 4, -20
 967              		.cfi_offset 5, -16
 968              		.cfi_offset 6, -12
 969              		.cfi_offset 7, -8
 970              		.cfi_offset 14, -4
 971 0002 83B0     		sub	sp, sp, #12
 972              		.cfi_def_cfa_offset 32
 973              		.loc 1 205 3 view .LVU176
 974 0004 FF27     		movs	r7, #255
 975 0006 0323     		movs	r3, #3
 976 0008 084E     		ldr	r6, .L52
 977 000a 0097     		str	r7, [sp]
 204:src/lcd.c     **** void comma (int i, int j) {
 978              		.loc 1 204 27 view .LVU177
 979 000c 0446     		mov	r4, r0
 980 000e 0D46     		mov	r5, r1
 981              		.loc 1 205 3 view .LVU178
 982 0010 1A46     		mov	r2, r3
 983 0012 2D31     		adds	r1, r1, #45
 984              	.LVL78:
 985              		.loc 1 205 3 view .LVU179
 986 0014 1530     		adds	r0, r0, #21
 987              	.LVL79:
 988              		.loc 1 205 3 view .LVU180
 989 0016 B047     		blx	r6
 990              	.LVL80:
 206:src/lcd.c     ****   lcd_fill_rect (i+19, j+48, 3, 3, 0xff);
 991              		.loc 1 206 3 is_stmt 1 view .LVU181
 992 0018 0323     		movs	r3, #3
 993 001a 05F13001 		add	r1, r5, #48
 994 001e 04F11300 		add	r0, r4, #19
 995 0022 0097     		str	r7, [sp]
 996 0024 1A46     		mov	r2, r3
 997 0026 B047     		blx	r6
 998              	.LVL81:
 207:src/lcd.c     **** }
 999              		.loc 1 207 1 is_stmt 0 view .LVU182
 1000 0028 03B0     		add	sp, sp, #12
 1001              		.cfi_def_cfa_offset 20
 1002              		@ sp needed
 1003 002a F0BD     		pop	{r4, r5, r6, r7, pc}
 1004              	.LVL82:
 1005              	.L53:
 1006              		.loc 1 207 1 view .LVU183
 1007              		.align	2
 1008              	.L52:
 1009 002c 3D020008 		.word	134218301
 1010              		.cfi_endproc
 1011              	.LFE15:
 1013              		.section	.text.exp_left_side,"ax",%progbits
 1014              		.align	1
ARM GAS  /tmp/ccSLcNfJ.s 			page 23


 1015              		.p2align 2,,3
 1016              		.global	exp_left_side
 1017              		.syntax unified
 1018              		.thumb
 1019              		.thumb_func
 1020              		.fpu fpv4-sp-d16
 1022              	exp_left_side:
 1023              	.LVL83:
 1024              	.LFB16:
 208:src/lcd.c     **** 
 209:src/lcd.c     **** void exp_left_side (int i, int j) {
 1025              		.loc 1 209 35 is_stmt 1 view -0
 1026              		.cfi_startproc
 1027              		@ args = 0, pretend = 0, frame = 0
 1028              		@ frame_needed = 0, uses_anonymous_args = 0
 210:src/lcd.c     ****   lcd_fill_rect (i, j+6, 1, 6, 0xff );
 1029              		.loc 1 210 3 view .LVU185
 209:src/lcd.c     ****   lcd_fill_rect (i, j+6, 1, 6, 0xff );
 1030              		.loc 1 209 35 is_stmt 0 view .LVU186
 1031 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1032              		.cfi_def_cfa_offset 20
 1033              		.cfi_offset 4, -20
 1034              		.cfi_offset 5, -16
 1035              		.cfi_offset 6, -12
 1036              		.cfi_offset 7, -8
 1037              		.cfi_offset 14, -4
 1038 0002 83B0     		sub	sp, sp, #12
 1039              		.cfi_def_cfa_offset 32
 1040              		.loc 1 210 3 view .LVU187
 1041 0004 FF27     		movs	r7, #255
 1042 0006 0E4E     		ldr	r6, .L56
 1043 0008 0097     		str	r7, [sp]
 209:src/lcd.c     ****   lcd_fill_rect (i, j+6, 1, 6, 0xff );
 1044              		.loc 1 209 35 view .LVU188
 1045 000a 0C46     		mov	r4, r1
 1046 000c 0546     		mov	r5, r0
 1047              		.loc 1 210 3 view .LVU189
 1048 000e 0631     		adds	r1, r1, #6
 1049              	.LVL84:
 1050              		.loc 1 210 3 view .LVU190
 1051 0010 0623     		movs	r3, #6
 1052 0012 0122     		movs	r2, #1
 1053 0014 B047     		blx	r6
 1054              	.LVL85:
 211:src/lcd.c     ****   lcd_fill_rect (i+1, j, 1, 11, 0xff );
 1055              		.loc 1 211 3 is_stmt 1 view .LVU191
 1056 0016 2146     		mov	r1, r4
 1057 0018 681C     		adds	r0, r5, #1
 1058 001a 0097     		str	r7, [sp]
 1059 001c 0B23     		movs	r3, #11
 1060 001e 0122     		movs	r2, #1
 1061 0020 B047     		blx	r6
 1062              	.LVL86:
 212:src/lcd.c     ****   lcd_fill_rect (i+2, j+1, 1, 9, 0xff );
 1063              		.loc 1 212 3 view .LVU192
 1064 0022 611C     		adds	r1, r4, #1
 1065 0024 A81C     		adds	r0, r5, #2
ARM GAS  /tmp/ccSLcNfJ.s 			page 24


 1066 0026 0097     		str	r7, [sp]
 1067 0028 0923     		movs	r3, #9
 1068 002a 0122     		movs	r2, #1
 1069 002c B047     		blx	r6
 1070              	.LVL87:
 213:src/lcd.c     ****   lcd_fill_rect (i+3, j+2, 1, 4, 0xff );
 1071              		.loc 1 213 3 view .LVU193
 1072 002e A11C     		adds	r1, r4, #2
 1073 0030 E81C     		adds	r0, r5, #3
 1074 0032 0097     		str	r7, [sp]
 1075 0034 0423     		movs	r3, #4
 1076 0036 0122     		movs	r2, #1
 1077 0038 B047     		blx	r6
 1078              	.LVL88:
 214:src/lcd.c     **** }
 1079              		.loc 1 214 1 is_stmt 0 view .LVU194
 1080 003a 03B0     		add	sp, sp, #12
 1081              		.cfi_def_cfa_offset 20
 1082              		@ sp needed
 1083 003c F0BD     		pop	{r4, r5, r6, r7, pc}
 1084              	.LVL89:
 1085              	.L57:
 1086              		.loc 1 214 1 view .LVU195
 1087 003e 00BF     		.align	2
 1088              	.L56:
 1089 0040 3D020008 		.word	134218301
 1090              		.cfi_endproc
 1091              	.LFE16:
 1093              		.section	.text.exp_left_side_top,"ax",%progbits
 1094              		.align	1
 1095              		.p2align 2,,3
 1096              		.global	exp_left_side_top
 1097              		.syntax unified
 1098              		.thumb
 1099              		.thumb_func
 1100              		.fpu fpv4-sp-d16
 1102              	exp_left_side_top:
 1103              	.LVL90:
 1104              	.LFB17:
 215:src/lcd.c     **** void exp_left_side_top (int i, int j) {
 1105              		.loc 1 215 39 is_stmt 1 view -0
 1106              		.cfi_startproc
 1107              		@ args = 0, pretend = 0, frame = 0
 1108              		@ frame_needed = 0, uses_anonymous_args = 0
 1109              		@ link register save eliminated.
 216:src/lcd.c     ****   exp_left_side(i+1, j);
 1110              		.loc 1 216 3 view .LVU197
 1111 0000 0130     		adds	r0, r0, #1
 1112              	.LVL91:
 1113              		.loc 1 216 3 is_stmt 0 view .LVU198
 1114 0002 FFF7FEBF 		b	exp_left_side
 1115              	.LVL92:
 1116              		.loc 1 216 3 view .LVU199
 1117              		.cfi_endproc
 1118              	.LFE17:
 1120 0006 00BF     		.section	.text.exp_left_side_bottom,"ax",%progbits
 1121              		.align	1
ARM GAS  /tmp/ccSLcNfJ.s 			page 25


 1122              		.p2align 2,,3
 1123              		.global	exp_left_side_bottom
 1124              		.syntax unified
 1125              		.thumb
 1126              		.thumb_func
 1127              		.fpu fpv4-sp-d16
 1129              	exp_left_side_bottom:
 1130              	.LVL93:
 1131              	.LFB18:
 217:src/lcd.c     **** }
 218:src/lcd.c     **** void exp_left_side_bottom (int i, int j) {
 1132              		.loc 1 218 42 is_stmt 1 view -0
 1133              		.cfi_startproc
 1134              		@ args = 0, pretend = 0, frame = 0
 1135              		@ frame_needed = 0, uses_anonymous_args = 0
 1136              		@ link register save eliminated.
 219:src/lcd.c     ****   exp_left_side(i, j+11);
 1137              		.loc 1 219 3 view .LVU201
 1138 0000 0B31     		adds	r1, r1, #11
 1139              	.LVL94:
 1140              		.loc 1 219 3 is_stmt 0 view .LVU202
 1141 0002 FFF7FEBF 		b	exp_left_side
 1142              	.LVL95:
 1143              		.loc 1 219 3 view .LVU203
 1144              		.cfi_endproc
 1145              	.LFE18:
 1147 0006 00BF     		.section	.text.exp_right_side,"ax",%progbits
 1148              		.align	1
 1149              		.p2align 2,,3
 1150              		.global	exp_right_side
 1151              		.syntax unified
 1152              		.thumb
 1153              		.thumb_func
 1154              		.fpu fpv4-sp-d16
 1156              	exp_right_side:
 1157              	.LVL96:
 1158              	.LFB19:
 220:src/lcd.c     **** }
 221:src/lcd.c     **** void exp_right_side (int i, int j) {
 1159              		.loc 1 221 36 is_stmt 1 view -0
 1160              		.cfi_startproc
 1161              		@ args = 0, pretend = 0, frame = 0
 1162              		@ frame_needed = 0, uses_anonymous_args = 0
 222:src/lcd.c     ****   lcd_fill_rect (i+12, j, 1, 6, 0xff );
 1163              		.loc 1 222 3 view .LVU205
 221:src/lcd.c     ****   lcd_fill_rect (i+12, j, 1, 6, 0xff );
 1164              		.loc 1 221 36 is_stmt 0 view .LVU206
 1165 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1166              		.cfi_def_cfa_offset 20
 1167              		.cfi_offset 4, -20
 1168              		.cfi_offset 5, -16
 1169              		.cfi_offset 6, -12
 1170              		.cfi_offset 7, -8
 1171              		.cfi_offset 14, -4
 1172 0002 83B0     		sub	sp, sp, #12
 1173              		.cfi_def_cfa_offset 32
 1174              		.loc 1 222 3 view .LVU207
ARM GAS  /tmp/ccSLcNfJ.s 			page 26


 1175 0004 FF27     		movs	r7, #255
 1176 0006 0F4E     		ldr	r6, .L62
 1177 0008 0097     		str	r7, [sp]
 221:src/lcd.c     ****   lcd_fill_rect (i+12, j, 1, 6, 0xff );
 1178              		.loc 1 221 36 view .LVU208
 1179 000a 0446     		mov	r4, r0
 1180 000c 0D46     		mov	r5, r1
 1181              		.loc 1 222 3 view .LVU209
 1182 000e 0C30     		adds	r0, r0, #12
 1183              	.LVL97:
 1184              		.loc 1 222 3 view .LVU210
 1185 0010 0623     		movs	r3, #6
 1186 0012 0122     		movs	r2, #1
 1187 0014 B047     		blx	r6
 1188              	.LVL98:
 223:src/lcd.c     ****   lcd_fill_rect (i+11, j+1, 1, 11, 0xff );
 1189              		.loc 1 223 3 is_stmt 1 view .LVU211
 1190 0016 691C     		adds	r1, r5, #1
 1191 0018 04F10B00 		add	r0, r4, #11
 1192 001c 0097     		str	r7, [sp]
 1193 001e 0B23     		movs	r3, #11
 1194 0020 0122     		movs	r2, #1
 1195 0022 B047     		blx	r6
 1196              	.LVL99:
 224:src/lcd.c     ****   lcd_fill_rect (i+10, j+2, 1, 9, 0xff );
 1197              		.loc 1 224 3 view .LVU212
 1198 0024 A91C     		adds	r1, r5, #2
 1199 0026 04F10A00 		add	r0, r4, #10
 1200 002a 0097     		str	r7, [sp]
 1201 002c 0923     		movs	r3, #9
 1202 002e 0122     		movs	r2, #1
 1203 0030 B047     		blx	r6
 1204              	.LVL100:
 225:src/lcd.c     ****   lcd_fill_rect (i+9, j+6, 1, 4, 0xff );
 1205              		.loc 1 225 3 view .LVU213
 1206 0032 A91D     		adds	r1, r5, #6
 1207 0034 04F10900 		add	r0, r4, #9
 1208 0038 0097     		str	r7, [sp]
 1209 003a 0423     		movs	r3, #4
 1210 003c 0122     		movs	r2, #1
 1211 003e B047     		blx	r6
 1212              	.LVL101:
 226:src/lcd.c     **** }
 1213              		.loc 1 226 1 is_stmt 0 view .LVU214
 1214 0040 03B0     		add	sp, sp, #12
 1215              		.cfi_def_cfa_offset 20
 1216              		@ sp needed
 1217 0042 F0BD     		pop	{r4, r5, r6, r7, pc}
 1218              	.LVL102:
 1219              	.L63:
 1220              		.loc 1 226 1 view .LVU215
 1221              		.align	2
 1222              	.L62:
 1223 0044 3D020008 		.word	134218301
 1224              		.cfi_endproc
 1225              	.LFE19:
 1227              		.section	.text.exp_right_side_top,"ax",%progbits
ARM GAS  /tmp/ccSLcNfJ.s 			page 27


 1228              		.align	1
 1229              		.p2align 2,,3
 1230              		.global	exp_right_side_top
 1231              		.syntax unified
 1232              		.thumb
 1233              		.thumb_func
 1234              		.fpu fpv4-sp-d16
 1236              	exp_right_side_top:
 1237              	.LVL103:
 1238              	.LFB20:
 227:src/lcd.c     **** void exp_right_side_top (int i, int j) {
 1239              		.loc 1 227 40 is_stmt 1 view -0
 1240              		.cfi_startproc
 1241              		@ args = 0, pretend = 0, frame = 0
 1242              		@ frame_needed = 0, uses_anonymous_args = 0
 1243              		@ link register save eliminated.
 228:src/lcd.c     ****   exp_right_side(i, j);
 1244              		.loc 1 228 3 view .LVU217
 1245 0000 FFF7FEBF 		b	exp_right_side
 1246              	.LVL104:
 1247              		.loc 1 228 3 is_stmt 0 view .LVU218
 1248              		.cfi_endproc
 1249              	.LFE20:
 1251              		.section	.text.exp_right_side_bottom,"ax",%progbits
 1252              		.align	1
 1253              		.p2align 2,,3
 1254              		.global	exp_right_side_bottom
 1255              		.syntax unified
 1256              		.thumb
 1257              		.thumb_func
 1258              		.fpu fpv4-sp-d16
 1260              	exp_right_side_bottom:
 1261              	.LVL105:
 1262              	.LFB21:
 229:src/lcd.c     **** }
 230:src/lcd.c     **** void exp_right_side_bottom (int i, int j) {
 1263              		.loc 1 230 43 is_stmt 1 view -0
 1264              		.cfi_startproc
 1265              		@ args = 0, pretend = 0, frame = 0
 1266              		@ frame_needed = 0, uses_anonymous_args = 0
 1267              		@ link register save eliminated.
 231:src/lcd.c     ****   exp_right_side(i-1, j+11);
 1268              		.loc 1 231 3 view .LVU220
 1269 0000 0138     		subs	r0, r0, #1
 1270              	.LVL106:
 1271              		.loc 1 231 3 is_stmt 0 view .LVU221
 1272 0002 0B31     		adds	r1, r1, #11
 1273              	.LVL107:
 1274              		.loc 1 231 3 view .LVU222
 1275 0004 FFF7FEBF 		b	exp_right_side
 1276              	.LVL108:
 1277              		.loc 1 231 3 view .LVU223
 1278              		.cfi_endproc
 1279              	.LFE21:
 1281              		.section	.text.exp_top,"ax",%progbits
 1282              		.align	1
 1283              		.p2align 2,,3
ARM GAS  /tmp/ccSLcNfJ.s 			page 28


 1284              		.global	exp_top
 1285              		.syntax unified
 1286              		.thumb
 1287              		.thumb_func
 1288              		.fpu fpv4-sp-d16
 1290              	exp_top:
 1291              	.LVL109:
 1292              	.LFB22:
 232:src/lcd.c     **** }
 233:src/lcd.c     **** void exp_top (int i, int j) {
 1293              		.loc 1 233 29 is_stmt 1 view -0
 1294              		.cfi_startproc
 1295              		@ args = 0, pretend = 0, frame = 0
 1296              		@ frame_needed = 0, uses_anonymous_args = 0
 234:src/lcd.c     ****   lcd_fill_rect (i+4, j, 7, 1, 0xff );
 1297              		.loc 1 234 3 view .LVU225
 233:src/lcd.c     ****   lcd_fill_rect (i+4, j, 7, 1, 0xff );
 1298              		.loc 1 233 29 is_stmt 0 view .LVU226
 1299 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1300              		.cfi_def_cfa_offset 20
 1301              		.cfi_offset 4, -20
 1302              		.cfi_offset 5, -16
 1303              		.cfi_offset 6, -12
 1304              		.cfi_offset 7, -8
 1305              		.cfi_offset 14, -4
 1306 0002 83B0     		sub	sp, sp, #12
 1307              		.cfi_def_cfa_offset 32
 1308              		.loc 1 234 3 view .LVU227
 1309 0004 FF27     		movs	r7, #255
 1310 0006 0B4E     		ldr	r6, .L68
 1311 0008 0097     		str	r7, [sp]
 233:src/lcd.c     ****   lcd_fill_rect (i+4, j, 7, 1, 0xff );
 1312              		.loc 1 233 29 view .LVU228
 1313 000a 0446     		mov	r4, r0
 1314 000c 0D46     		mov	r5, r1
 1315              		.loc 1 234 3 view .LVU229
 1316 000e 0430     		adds	r0, r0, #4
 1317              	.LVL110:
 1318              		.loc 1 234 3 view .LVU230
 1319 0010 0123     		movs	r3, #1
 1320 0012 0722     		movs	r2, #7
 1321 0014 B047     		blx	r6
 1322              	.LVL111:
 235:src/lcd.c     ****   lcd_fill_rect (i+5, j+1, 5, 1, 0xff );
 1323              		.loc 1 235 3 is_stmt 1 view .LVU231
 1324 0016 691C     		adds	r1, r5, #1
 1325 0018 601D     		adds	r0, r4, #5
 1326 001a 0097     		str	r7, [sp]
 1327 001c 0123     		movs	r3, #1
 1328 001e 0522     		movs	r2, #5
 1329 0020 B047     		blx	r6
 1330              	.LVL112:
 236:src/lcd.c     ****   lcd_fill_rect (i+6, j+2, 3, 1, 0xff );
 1331              		.loc 1 236 3 view .LVU232
 1332 0022 A91C     		adds	r1, r5, #2
 1333 0024 A01D     		adds	r0, r4, #6
 1334 0026 0097     		str	r7, [sp]
ARM GAS  /tmp/ccSLcNfJ.s 			page 29


 1335 0028 0123     		movs	r3, #1
 1336 002a 0322     		movs	r2, #3
 1337 002c B047     		blx	r6
 1338              	.LVL113:
 237:src/lcd.c     **** }
 1339              		.loc 1 237 1 is_stmt 0 view .LVU233
 1340 002e 03B0     		add	sp, sp, #12
 1341              		.cfi_def_cfa_offset 20
 1342              		@ sp needed
 1343 0030 F0BD     		pop	{r4, r5, r6, r7, pc}
 1344              	.LVL114:
 1345              	.L69:
 1346              		.loc 1 237 1 view .LVU234
 1347 0032 00BF     		.align	2
 1348              	.L68:
 1349 0034 3D020008 		.word	134218301
 1350              		.cfi_endproc
 1351              	.LFE22:
 1353              		.section	.text.exp_bottom,"ax",%progbits
 1354              		.align	1
 1355              		.p2align 2,,3
 1356              		.global	exp_bottom
 1357              		.syntax unified
 1358              		.thumb
 1359              		.thumb_func
 1360              		.fpu fpv4-sp-d16
 1362              	exp_bottom:
 1363              	.LVL115:
 1364              	.LFB23:
 238:src/lcd.c     **** void exp_bottom (int i, int j) {
 1365              		.loc 1 238 32 is_stmt 1 view -0
 1366              		.cfi_startproc
 1367              		@ args = 0, pretend = 0, frame = 0
 1368              		@ frame_needed = 0, uses_anonymous_args = 0
 239:src/lcd.c     ****   lcd_fill_rect (i+2, j+22, 7, 1, 0xff );
 1369              		.loc 1 239 3 view .LVU236
 238:src/lcd.c     **** void exp_bottom (int i, int j) {
 1370              		.loc 1 238 32 is_stmt 0 view .LVU237
 1371 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1372              		.cfi_def_cfa_offset 20
 1373              		.cfi_offset 4, -20
 1374              		.cfi_offset 5, -16
 1375              		.cfi_offset 6, -12
 1376              		.cfi_offset 7, -8
 1377              		.cfi_offset 14, -4
 1378 0002 83B0     		sub	sp, sp, #12
 1379              		.cfi_def_cfa_offset 32
 1380              		.loc 1 239 3 view .LVU238
 1381 0004 FF27     		movs	r7, #255
 1382 0006 0C4E     		ldr	r6, .L72
 1383 0008 0097     		str	r7, [sp]
 238:src/lcd.c     **** void exp_bottom (int i, int j) {
 1384              		.loc 1 238 32 view .LVU239
 1385 000a 0446     		mov	r4, r0
 1386 000c 0D46     		mov	r5, r1
 1387              		.loc 1 239 3 view .LVU240
 1388 000e 0230     		adds	r0, r0, #2
ARM GAS  /tmp/ccSLcNfJ.s 			page 30


 1389              	.LVL116:
 1390              		.loc 1 239 3 view .LVU241
 1391 0010 1631     		adds	r1, r1, #22
 1392              	.LVL117:
 1393              		.loc 1 239 3 view .LVU242
 1394 0012 0123     		movs	r3, #1
 1395 0014 0722     		movs	r2, #7
 1396 0016 B047     		blx	r6
 1397              	.LVL118:
 240:src/lcd.c     ****   lcd_fill_rect (i+3, j+21, 5, 1, 0xff );
 1398              		.loc 1 240 3 is_stmt 1 view .LVU243
 1399 0018 05F11501 		add	r1, r5, #21
 1400 001c E01C     		adds	r0, r4, #3
 1401 001e 0097     		str	r7, [sp]
 1402 0020 0123     		movs	r3, #1
 1403 0022 0522     		movs	r2, #5
 1404 0024 B047     		blx	r6
 1405              	.LVL119:
 241:src/lcd.c     ****   lcd_fill_rect (i+4, j+20, 3, 1, 0xff );
 1406              		.loc 1 241 3 view .LVU244
 1407 0026 05F11401 		add	r1, r5, #20
 1408 002a 201D     		adds	r0, r4, #4
 1409 002c 0097     		str	r7, [sp]
 1410 002e 0123     		movs	r3, #1
 1411 0030 0322     		movs	r2, #3
 1412 0032 B047     		blx	r6
 1413              	.LVL120:
 242:src/lcd.c     **** }
 1414              		.loc 1 242 1 is_stmt 0 view .LVU245
 1415 0034 03B0     		add	sp, sp, #12
 1416              		.cfi_def_cfa_offset 20
 1417              		@ sp needed
 1418 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 1419              	.LVL121:
 1420              	.L73:
 1421              		.loc 1 242 1 view .LVU246
 1422              		.align	2
 1423              	.L72:
 1424 0038 3D020008 		.word	134218301
 1425              		.cfi_endproc
 1426              	.LFE23:
 1428              		.section	.text.exp_middle,"ax",%progbits
 1429              		.align	1
 1430              		.p2align 2,,3
 1431              		.global	exp_middle
 1432              		.syntax unified
 1433              		.thumb
 1434              		.thumb_func
 1435              		.fpu fpv4-sp-d16
 1437              	exp_middle:
 1438              	.LVL122:
 1439              	.LFB24:
 243:src/lcd.c     **** void exp_middle (int i, int j) {
 1440              		.loc 1 243 32 is_stmt 1 view -0
 1441              		.cfi_startproc
 1442              		@ args = 0, pretend = 0, frame = 0
 1443              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccSLcNfJ.s 			page 31


 244:src/lcd.c     ****   lcd_fill_rect (i+4, j+10, 5, 1, 0xff );
 1444              		.loc 1 244 3 view .LVU248
 243:src/lcd.c     **** void exp_middle (int i, int j) {
 1445              		.loc 1 243 32 is_stmt 0 view .LVU249
 1446 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1447              		.cfi_def_cfa_offset 24
 1448              		.cfi_offset 4, -24
 1449              		.cfi_offset 5, -20
 1450              		.cfi_offset 6, -16
 1451              		.cfi_offset 7, -12
 1452              		.cfi_offset 8, -8
 1453              		.cfi_offset 14, -4
 1454 0004 82B0     		sub	sp, sp, #8
 1455              		.cfi_def_cfa_offset 32
 1456              		.loc 1 244 3 view .LVU250
 1457 0006 FF27     		movs	r7, #255
 1458              		.loc 1 244 19 view .LVU251
 1459 0008 00F10408 		add	r8, r0, #4
 1460              		.loc 1 244 3 view .LVU252
 1461 000c 0C4E     		ldr	r6, .L76
 1462 000e 0097     		str	r7, [sp]
 243:src/lcd.c     **** void exp_middle (int i, int j) {
 1463              		.loc 1 243 32 view .LVU253
 1464 0010 0C46     		mov	r4, r1
 1465 0012 0546     		mov	r5, r0
 1466              		.loc 1 244 3 view .LVU254
 1467 0014 0A31     		adds	r1, r1, #10
 1468              	.LVL123:
 1469              		.loc 1 244 3 view .LVU255
 1470 0016 4046     		mov	r0, r8
 1471              	.LVL124:
 1472              		.loc 1 244 3 view .LVU256
 1473 0018 0123     		movs	r3, #1
 1474 001a 0522     		movs	r2, #5
 1475 001c B047     		blx	r6
 1476              	.LVL125:
 245:src/lcd.c     ****   lcd_fill_rect (i+3, j+11, 7, 1, 0xff );
 1477              		.loc 1 245 3 is_stmt 1 view .LVU257
 1478 001e E81C     		adds	r0, r5, #3
 1479 0020 04F10B01 		add	r1, r4, #11
 1480 0024 0097     		str	r7, [sp]
 1481 0026 0123     		movs	r3, #1
 1482 0028 0722     		movs	r2, #7
 1483 002a B047     		blx	r6
 1484              	.LVL126:
 246:src/lcd.c     ****   lcd_fill_rect (i+4, j+12, 5, 1, 0xff );
 1485              		.loc 1 246 3 view .LVU258
 1486 002c 4046     		mov	r0, r8
 1487 002e 04F10C01 		add	r1, r4, #12
 1488 0032 0097     		str	r7, [sp]
 1489 0034 0123     		movs	r3, #1
 1490 0036 0522     		movs	r2, #5
 1491 0038 B047     		blx	r6
 1492              	.LVL127:
 247:src/lcd.c     **** }
 1493              		.loc 1 247 1 is_stmt 0 view .LVU259
 1494 003a 02B0     		add	sp, sp, #8
ARM GAS  /tmp/ccSLcNfJ.s 			page 32


 1495              		.cfi_def_cfa_offset 24
 1496              		@ sp needed
 1497 003c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1498              	.LVL128:
 1499              	.L77:
 1500              		.loc 1 247 1 view .LVU260
 1501              		.align	2
 1502              	.L76:
 1503 0040 3D020008 		.word	134218301
 1504              		.cfi_endproc
 1505              	.LFE24:
 1507              		.section	.rodata.show_disp.str1.4,"aMS",%progbits,1
 1508              		.align	2
 1509              	.LC0:
 1510 0000 414C5048 		.ascii	"ALPHA\000"
 1510      4100
 1511 0006 0000     		.align	2
 1512              	.LC1:
 1513 0008 435F4C4B 		.ascii	"C_LK\000"
 1513      00
 1514 000d 000000   		.align	2
 1515              	.LC2:
 1516 0010 3D00     		.ascii	"=\000"
 1517 0012 0000     		.align	2
 1518              	.LC3:
 1519 0014 533A3800 		.ascii	"S:8\000"
 1520              		.align	2
 1521              	.LC4:
 1522 0018 533A3400 		.ascii	"S:4\000"
 1523              		.align	2
 1524              	.LC5:
 1525 001c 50474D00 		.ascii	"PGM\000"
 1526              		.align	2
 1527              	.LC6:
 1528 0020 52554E00 		.ascii	"RUN\000"
 1529              		.align	2
 1530              	.LC7:
 1531 0024 52414400 		.ascii	"RAD\000"
 1532              		.align	2
 1533              	.LC8:
 1534 0028 44454700 		.ascii	"DEG\000"
 1535              		.align	2
 1536              	.LC9:
 1537 002c 52504E00 		.ascii	"RPN\000"
 1538              		.section	.text.show_disp,"ax",%progbits
 1539              		.align	1
 1540              		.p2align 2,,3
 1541              		.global	show_disp
 1542              		.syntax unified
 1543              		.thumb
 1544              		.thumb_func
 1545              		.fpu fpv4-sp-d16
 1547              	show_disp:
 1548              	.LFB25:
 248:src/lcd.c     ****   
 249:src/lcd.c     **** void show_disp(void) { // This function re-draws everything.
 1549              		.loc 1 249 22 is_stmt 1 view -0
ARM GAS  /tmp/ccSLcNfJ.s 			page 33


 1550              		.cfi_startproc
 1551              		@ args = 0, pretend = 0, frame = 0
 1552              		@ frame_needed = 0, uses_anonymous_args = 0
 250:src/lcd.c     ****   // It may be fast enough. It does mean that clearing everything first is needed,
 251:src/lcd.c     ****   // or we keep track of changes.
 252:src/lcd.c     ****   // Try clearing everything first first.
 253:src/lcd.c     ****         int i, j, p;
 1553              		.loc 1 253 9 view .LVU262
 254:src/lcd.c     **** 	uint32_t x;
 1554              		.loc 1 254 2 view .LVU263
 255:src/lcd.c     **** 	const uint32_t xleft = 26;
 1555              		.loc 1 255 2 view .LVU264
 1556              	.LVL129:
 256:src/lcd.c     **** 	const uint32_t ytop = 130; // was 170
 1557              		.loc 1 256 2 view .LVU265
 257:src/lcd.c     **** 	const uint32_t dwidth = 25;
 1558              		.loc 1 257 2 view .LVU266
 258:src/lcd.c     **** 	const uint32_t xleft_exp = 344;
 1559              		.loc 1 258 2 view .LVU267
 259:src/lcd.c     **** 	const uint32_t ytop_exp = 130; // was 170
 1560              		.loc 1 259 2 view .LVU268
 260:src/lcd.c     **** 	const uint32_t dwidth_exp = 18;
 1561              		.loc 1 260 2 view .LVU269
 261:src/lcd.c     **** #ifdef BIGGER_DISPLAY
 262:src/lcd.c     **** 	const uint32_t y_ann = 75;
 1562              		.loc 1 262 2 view .LVU270
 263:src/lcd.c     **** #else
 264:src/lcd.c     **** 	const uint32_t y_ann = 130;
 265:src/lcd.c     **** #endif
 266:src/lcd.c     ****         /* Segments 0 - 107 are the main digits */
 267:src/lcd.c     ****         for (i=0; i<DISPLAY_DIGITS; i++) { // 0 -> 11 inclusive
 1563              		.loc 1 267 9 view .LVU271
 1564              		.loc 1 267 19 view .LVU272
 249:src/lcd.c     ****   // It may be fast enough. It does mean that clearing everything first is needed,
 1565              		.loc 1 249 22 is_stmt 0 view .LVU273
 1566 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1567              		.cfi_def_cfa_offset 36
 1568              		.cfi_offset 4, -36
 1569              		.cfi_offset 5, -32
 1570              		.cfi_offset 6, -28
 1571              		.cfi_offset 7, -24
 1572              		.cfi_offset 8, -20
 1573              		.cfi_offset 9, -16
 1574              		.cfi_offset 10, -12
 1575              		.cfi_offset 11, -8
 1576              		.cfi_offset 14, -4
 1577 0004 DFF8C0B0 		ldr	fp, .L228+4
 1578              	.LBB65:
 1579              	.LBB66:
 202:src/lcd.c     **** }
 1580              		.loc 1 202 3 view .LVU274
 1581 0008 2E4F     		ldr	r7, .L228
 1582              	.LBE66:
 1583              	.LBE65:
 249:src/lcd.c     ****   // It may be fast enough. It does mean that clearing everything first is needed,
 1584              		.loc 1 249 22 view .LVU275
 1585 000a 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/ccSLcNfJ.s 			page 34


 1586              		.cfi_def_cfa_offset 48
 249:src/lcd.c     ****   // It may be fast enough. It does mean that clearing everything first is needed,
 1587              		.loc 1 249 22 view .LVU276
 1588 000c 5E46     		mov	r6, fp
 1589 000e 5C46     		mov	r4, fp
 1590 0010 1A25     		movs	r5, #26
 1591 0012 24E0     		b	.L88
 1592              	.LVL130:
 1593              	.L79:
 268:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 269:src/lcd.c     ****                 x = xleft + dwidth*i;
 270:src/lcd.c     ****                 if (dots[p]) { // top
 271:src/lcd.c     **** 		  top (x, ytop);
 272:src/lcd.c     ****                 }
 273:src/lcd.c     ****                 if (dots[p+1]) { // top left
 1594              		.loc 1 273 17 is_stmt 1 view .LVU277
 1595              		.loc 1 273 20 is_stmt 0 view .LVU278
 1596 0014 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1597 0016 002B     		cmp	r3, #0
 1598 0018 2BD1     		bne	.L211
 1599              	.L80:
 274:src/lcd.c     **** 		  left_side_top (x, ytop);
 275:src/lcd.c     ****                 }
 276:src/lcd.c     ****                 if (dots[p+3]) { // top right
 1600              		.loc 1 276 17 is_stmt 1 view .LVU279
 1601              		.loc 1 276 20 is_stmt 0 view .LVU280
 1602 001a E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
 1603 001c 002B     		cmp	r3, #0
 1604 001e 2FD1     		bne	.L212
 1605              	.L81:
 277:src/lcd.c     **** 		  right_side_top (x, ytop);
 278:src/lcd.c     ****                 }
 279:src/lcd.c     ****                 if (dots[p+2]) { // centre line
 1606              		.loc 1 279 17 is_stmt 1 view .LVU281
 1607              		.loc 1 279 20 is_stmt 0 view .LVU282
 1608 0020 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 1609 0022 002B     		cmp	r3, #0
 1610 0024 33D1     		bne	.L213
 1611              	.L82:
 280:src/lcd.c     **** 		  middle (x, ytop);
 281:src/lcd.c     ****                 }
 282:src/lcd.c     ****                 if (dots[p+4]) { // lower left
 1612              		.loc 1 282 17 is_stmt 1 view .LVU283
 1613              		.loc 1 282 20 is_stmt 0 view .LVU284
 1614 0026 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 1615 0028 002B     		cmp	r3, #0
 1616 002a 37D1     		bne	.L214
 1617              	.L83:
 283:src/lcd.c     **** 		  left_side_bottom (x, ytop);
 284:src/lcd.c     ****                 }
 285:src/lcd.c     ****                 if (dots[p+6]) { // lower right
 1618              		.loc 1 285 17 is_stmt 1 view .LVU285
 1619              		.loc 1 285 20 is_stmt 0 view .LVU286
 1620 002c A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 1621 002e 002B     		cmp	r3, #0
 1622 0030 3BD1     		bne	.L215
 1623              	.L84:
ARM GAS  /tmp/ccSLcNfJ.s 			page 35


 286:src/lcd.c     **** 		  right_side_bottom (x, ytop);
 287:src/lcd.c     ****                 }
 288:src/lcd.c     ****                 if (dots[p+5]) { // bottom
 1624              		.loc 1 288 17 is_stmt 1 view .LVU287
 1625              		.loc 1 288 20 is_stmt 0 view .LVU288
 1626 0032 6379     		ldrb	r3, [r4, #5]	@ zero_extendqisi2
 1627 0034 002B     		cmp	r3, #0
 1628 0036 3FD1     		bne	.L216
 1629              	.L85:
 289:src/lcd.c     **** 		  bottom (x, ytop);
 290:src/lcd.c     ****                 }
 291:src/lcd.c     ****                 if (dots[p+7]) { // point
 1630              		.loc 1 291 17 is_stmt 1 view .LVU289
 1631              		.loc 1 291 20 is_stmt 0 view .LVU290
 1632 0038 E379     		ldrb	r3, [r4, #7]	@ zero_extendqisi2
 1633 003a 3BB1     		cbz	r3, .L86
 292:src/lcd.c     **** 		  decimal (x, ytop);
 1634              		.loc 1 292 5 is_stmt 1 view .LVU291
 1635              	.LVL131:
 1636              	.LBB68:
 1637              	.LBI65:
 201:src/lcd.c     ****   lcd_fill_rect (i+19, j+40, 5, 5, 0xff);
 1638              		.loc 1 201 6 view .LVU292
 1639              	.LBB67:
 202:src/lcd.c     **** }
 1640              		.loc 1 202 3 view .LVU293
 1641 003c FF22     		movs	r2, #255
 1642 003e 0523     		movs	r3, #5
 1643 0040 0092     		str	r2, [sp]
 1644 0042 AA21     		movs	r1, #170
 1645 0044 1A46     		mov	r2, r3
 1646 0046 05F11300 		add	r0, r5, #19
 1647 004a B847     		blx	r7
 1648              	.LVL132:
 1649              	.L86:
 202:src/lcd.c     **** }
 1650              		.loc 1 202 3 is_stmt 0 view .LVU294
 1651              	.LBE67:
 1652              	.LBE68:
 293:src/lcd.c     ****                 }
 294:src/lcd.c     ****                 if (dots[p+8]) { // comma
 1653              		.loc 1 294 17 is_stmt 1 view .LVU295
 1654              		.loc 1 294 20 is_stmt 0 view .LVU296
 1655 004c 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 1656 004e 002B     		cmp	r3, #0
 1657 0050 3CD1     		bne	.L217
 267:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 1658              		.loc 1 267 37 is_stmt 1 discriminator 2 view .LVU297
 267:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 1659              		.loc 1 267 19 discriminator 2 view .LVU298
 1660 0052 1935     		adds	r5, r5, #25
 1661              	.LVL133:
 267:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 1662              		.loc 1 267 9 is_stmt 0 discriminator 2 view .LVU299
 1663 0054 B5F5A37F 		cmp	r5, #326
 1664 0058 04F10904 		add	r4, r4, #9
 1665              	.LVL134:
ARM GAS  /tmp/ccSLcNfJ.s 			page 36


 267:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 1666              		.loc 1 267 9 discriminator 2 view .LVU300
 1667 005c 40D0     		beq	.L218
 1668              	.LVL135:
 1669              	.L88:
 268:src/lcd.c     ****                 x = xleft + dwidth*i;
 1670              		.loc 1 268 17 is_stmt 1 view .LVU301
 269:src/lcd.c     ****                 if (dots[p]) { // top
 1671              		.loc 1 269 17 view .LVU302
 270:src/lcd.c     **** 		  top (x, ytop);
 1672              		.loc 1 270 17 view .LVU303
 270:src/lcd.c     **** 		  top (x, ytop);
 1673              		.loc 1 270 20 is_stmt 0 view .LVU304
 1674 005e 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1675 0060 002B     		cmp	r3, #0
 1676 0062 D7D0     		beq	.L79
 271:src/lcd.c     ****                 }
 1677              		.loc 1 271 5 is_stmt 1 view .LVU305
 1678 0064 8221     		movs	r1, #130
 1679 0066 2846     		mov	r0, r5
 1680 0068 FFF7FEFF 		bl	top
 1681              	.LVL136:
 273:src/lcd.c     **** 		  left_side_top (x, ytop);
 1682              		.loc 1 273 17 view .LVU306
 273:src/lcd.c     **** 		  left_side_top (x, ytop);
 1683              		.loc 1 273 20 is_stmt 0 view .LVU307
 1684 006c 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1685 006e 002B     		cmp	r3, #0
 1686 0070 D3D0     		beq	.L80
 1687              	.L211:
 274:src/lcd.c     ****                 }
 1688              		.loc 1 274 5 is_stmt 1 view .LVU308
 1689              	.LVL137:
 1690              	.LBB69:
 1691              	.LBI69:
 165:src/lcd.c     ****   left_side(i, j);
 1692              		.loc 1 165 6 view .LVU309
 1693              	.LBB70:
 166:src/lcd.c     **** }
 1694              		.loc 1 166 3 view .LVU310
 1695 0072 8221     		movs	r1, #130
 1696 0074 2846     		mov	r0, r5
 1697 0076 FFF7FEFF 		bl	left_side
 1698              	.LVL138:
 166:src/lcd.c     **** }
 1699              		.loc 1 166 3 is_stmt 0 view .LVU311
 1700              	.LBE70:
 1701              	.LBE69:
 276:src/lcd.c     **** 		  right_side_top (x, ytop);
 1702              		.loc 1 276 17 is_stmt 1 view .LVU312
 276:src/lcd.c     **** 		  right_side_top (x, ytop);
 1703              		.loc 1 276 20 is_stmt 0 view .LVU313
 1704 007a E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
 1705 007c 002B     		cmp	r3, #0
 1706 007e CFD0     		beq	.L81
 1707              	.L212:
 277:src/lcd.c     ****                 }
ARM GAS  /tmp/ccSLcNfJ.s 			page 37


 1708              		.loc 1 277 5 is_stmt 1 view .LVU314
 1709              	.LVL139:
 1710              	.LBB71:
 1711              	.LBI71:
 178:src/lcd.c     ****   right_side(i, j);
 1712              		.loc 1 178 6 view .LVU315
 1713              	.LBB72:
 179:src/lcd.c     **** }
 1714              		.loc 1 179 3 view .LVU316
 1715 0080 8221     		movs	r1, #130
 1716 0082 2846     		mov	r0, r5
 1717 0084 FFF7FEFF 		bl	right_side
 1718              	.LVL140:
 179:src/lcd.c     **** }
 1719              		.loc 1 179 3 is_stmt 0 view .LVU317
 1720              	.LBE72:
 1721              	.LBE71:
 279:src/lcd.c     **** 		  middle (x, ytop);
 1722              		.loc 1 279 17 is_stmt 1 view .LVU318
 279:src/lcd.c     **** 		  middle (x, ytop);
 1723              		.loc 1 279 20 is_stmt 0 view .LVU319
 1724 0088 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 1725 008a 002B     		cmp	r3, #0
 1726 008c CBD0     		beq	.L82
 1727              	.L213:
 280:src/lcd.c     ****                 }
 1728              		.loc 1 280 5 is_stmt 1 view .LVU320
 1729 008e 8221     		movs	r1, #130
 1730 0090 2846     		mov	r0, r5
 1731 0092 FFF7FEFF 		bl	middle
 1732              	.LVL141:
 282:src/lcd.c     **** 		  left_side_bottom (x, ytop);
 1733              		.loc 1 282 17 view .LVU321
 282:src/lcd.c     **** 		  left_side_bottom (x, ytop);
 1734              		.loc 1 282 20 is_stmt 0 view .LVU322
 1735 0096 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 1736 0098 002B     		cmp	r3, #0
 1737 009a C7D0     		beq	.L83
 1738              	.L214:
 283:src/lcd.c     ****                 }
 1739              		.loc 1 283 5 is_stmt 1 view .LVU323
 1740              	.LVL142:
 1741              	.LBB73:
 1742              	.LBI73:
 168:src/lcd.c     ****   left_side(i-2, j+19);
 1743              		.loc 1 168 6 view .LVU324
 1744              	.LBB74:
 169:src/lcd.c     **** }
 1745              		.loc 1 169 3 view .LVU325
 1746 009c 9521     		movs	r1, #149
 1747 009e A81E     		subs	r0, r5, #2
 1748 00a0 FFF7FEFF 		bl	left_side
 1749              	.LVL143:
 169:src/lcd.c     **** }
 1750              		.loc 1 169 3 is_stmt 0 view .LVU326
 1751              	.LBE74:
 1752              	.LBE73:
ARM GAS  /tmp/ccSLcNfJ.s 			page 38


 285:src/lcd.c     **** 		  right_side_bottom (x, ytop);
 1753              		.loc 1 285 17 is_stmt 1 view .LVU327
 285:src/lcd.c     **** 		  right_side_bottom (x, ytop);
 1754              		.loc 1 285 20 is_stmt 0 view .LVU328
 1755 00a4 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 1756 00a6 002B     		cmp	r3, #0
 1757 00a8 C3D0     		beq	.L84
 1758              	.L215:
 286:src/lcd.c     ****                 }
 1759              		.loc 1 286 5 is_stmt 1 view .LVU329
 1760              	.LVL144:
 1761              	.LBB75:
 1762              	.LBI75:
 181:src/lcd.c     ****   right_side(i-2, j+19);
 1763              		.loc 1 181 6 view .LVU330
 1764              	.LBB76:
 182:src/lcd.c     **** }
 1765              		.loc 1 182 3 view .LVU331
 1766 00aa 9521     		movs	r1, #149
 1767 00ac A81E     		subs	r0, r5, #2
 1768 00ae FFF7FEFF 		bl	right_side
 1769              	.LVL145:
 182:src/lcd.c     **** }
 1770              		.loc 1 182 3 is_stmt 0 view .LVU332
 1771              	.LBE76:
 1772              	.LBE75:
 288:src/lcd.c     **** 		  bottom (x, ytop);
 1773              		.loc 1 288 17 is_stmt 1 view .LVU333
 288:src/lcd.c     **** 		  bottom (x, ytop);
 1774              		.loc 1 288 20 is_stmt 0 view .LVU334
 1775 00b2 6379     		ldrb	r3, [r4, #5]	@ zero_extendqisi2
 1776 00b4 002B     		cmp	r3, #0
 1777 00b6 BFD0     		beq	.L85
 1778              	.L216:
 289:src/lcd.c     ****                 }
 1779              		.loc 1 289 5 is_stmt 1 view .LVU335
 1780 00b8 8221     		movs	r1, #130
 1781 00ba 2846     		mov	r0, r5
 1782 00bc FFF7FEFF 		bl	bottom
 1783              	.LVL146:
 1784 00c0 BAE7     		b	.L85
 1785              	.L229:
 1786 00c2 00BF     		.align	2
 1787              	.L228:
 1788 00c4 3D020008 		.word	134218301
 1789 00c8 00000000 		.word	.LANCHOR0
 1790              	.L217:
 295:src/lcd.c     **** 		  comma (x, ytop);
 1791              		.loc 1 295 5 view .LVU336
 1792 00cc 2846     		mov	r0, r5
 1793 00ce 8221     		movs	r1, #130
 1794 00d0 1935     		adds	r5, r5, #25
 1795              	.LVL147:
 1796              		.loc 1 295 5 is_stmt 0 view .LVU337
 1797 00d2 FFF7FEFF 		bl	comma
 1798              	.LVL148:
 267:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
ARM GAS  /tmp/ccSLcNfJ.s 			page 39


 1799              		.loc 1 267 37 is_stmt 1 view .LVU338
 267:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 1800              		.loc 1 267 19 view .LVU339
 267:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 1801              		.loc 1 267 9 is_stmt 0 view .LVU340
 1802 00d6 B5F5A37F 		cmp	r5, #326
 1803 00da 04F10904 		add	r4, r4, #9
 1804              	.LVL149:
 267:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 1805              		.loc 1 267 9 view .LVU341
 1806 00de BED1     		bne	.L88
 1807              	.LVL150:
 1808              	.L218:
 267:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 1809              		.loc 1 267 9 view .LVU342
 1810 00e0 AD4C     		ldr	r4, .L230
 1811 00e2 4FF4AC75 		mov	r5, #344
 1812              	.L96:
 296:src/lcd.c     ****                 }
 297:src/lcd.c     ****         }
 298:src/lcd.c     ****         /* Segments 108 - 128 are the exponent digits */
 299:src/lcd.c     ****         for (i=0; i<3; i++) {
 300:src/lcd.c     ****                 p = i*7+108;
 1813              		.loc 1 300 17 is_stmt 1 view .LVU343
 1814              	.LVL151:
 301:src/lcd.c     ****                 x = xleft_exp + dwidth_exp*i;
 1815              		.loc 1 301 17 view .LVU344
 302:src/lcd.c     ****                 if (dots[p]) { // top
 1816              		.loc 1 302 17 view .LVU345
 1817              		.loc 1 302 20 is_stmt 0 view .LVU346
 1818 00e6 94F86C30 		ldrb	r3, [r4, #108]	@ zero_extendqisi2
 1819 00ea 002B     		cmp	r3, #0
 1820 00ec 40F04F81 		bne	.L219
 1821              	.L89:
 303:src/lcd.c     **** 		  exp_top (x, ytop_exp);
 304:src/lcd.c     ****                 }
 305:src/lcd.c     ****                 if (dots[p+1]) { // top left
 1822              		.loc 1 305 17 is_stmt 1 view .LVU347
 1823              		.loc 1 305 20 is_stmt 0 view .LVU348
 1824 00f0 94F86D30 		ldrb	r3, [r4, #109]	@ zero_extendqisi2
 1825 00f4 002B     		cmp	r3, #0
 1826 00f6 40F04581 		bne	.L220
 1827              	.L90:
 306:src/lcd.c     **** 		  exp_left_side_top (x, ytop_exp);
 307:src/lcd.c     ****                 }
 308:src/lcd.c     ****                 if (dots[p+3]) { // top right
 1828              		.loc 1 308 17 is_stmt 1 view .LVU349
 1829              		.loc 1 308 20 is_stmt 0 view .LVU350
 1830 00fa 94F86F30 		ldrb	r3, [r4, #111]	@ zero_extendqisi2
 1831 00fe 002B     		cmp	r3, #0
 1832 0100 40F03B81 		bne	.L221
 1833              	.L91:
 309:src/lcd.c     **** 		  exp_right_side_top (x, ytop_exp);
 310:src/lcd.c     ****                 }
 311:src/lcd.c     ****                 if (dots[p+2]) { // centre line
 1834              		.loc 1 311 17 is_stmt 1 view .LVU351
 1835              		.loc 1 311 20 is_stmt 0 view .LVU352
ARM GAS  /tmp/ccSLcNfJ.s 			page 40


 1836 0104 94F86E30 		ldrb	r3, [r4, #110]	@ zero_extendqisi2
 1837 0108 002B     		cmp	r3, #0
 1838 010a 40F03181 		bne	.L222
 1839              	.L92:
 312:src/lcd.c     **** 		  exp_middle (x, ytop_exp);
 313:src/lcd.c     ****                 }
 314:src/lcd.c     ****                 if (dots[p+4]) { // lower left
 1840              		.loc 1 314 17 is_stmt 1 view .LVU353
 1841              		.loc 1 314 20 is_stmt 0 view .LVU354
 1842 010e 94F87030 		ldrb	r3, [r4, #112]	@ zero_extendqisi2
 1843 0112 002B     		cmp	r3, #0
 1844 0114 40F02781 		bne	.L223
 1845              	.L93:
 315:src/lcd.c     **** 		  exp_left_side_bottom (x, ytop_exp);
 316:src/lcd.c     ****                 }
 317:src/lcd.c     ****                 if (dots[p+6]) { // lower right
 1846              		.loc 1 317 17 is_stmt 1 view .LVU355
 1847              		.loc 1 317 20 is_stmt 0 view .LVU356
 1848 0118 94F87230 		ldrb	r3, [r4, #114]	@ zero_extendqisi2
 1849 011c 002B     		cmp	r3, #0
 1850 011e 40F01D81 		bne	.L224
 1851              	.L94:
 318:src/lcd.c     **** 		  exp_right_side_bottom (x, ytop_exp);
 319:src/lcd.c     ****                 }
 320:src/lcd.c     ****                 if (dots[p+5]) { // bottom
 1852              		.loc 1 320 17 is_stmt 1 view .LVU357
 1853              		.loc 1 320 20 is_stmt 0 view .LVU358
 1854 0122 94F87130 		ldrb	r3, [r4, #113]	@ zero_extendqisi2
 1855 0126 002B     		cmp	r3, #0
 1856 0128 40F01381 		bne	.L225
 1857              	.L95:
 299:src/lcd.c     ****                 p = i*7+108;
 1858              		.loc 1 299 24 is_stmt 1 discriminator 2 view .LVU359
 299:src/lcd.c     ****                 p = i*7+108;
 1859              		.loc 1 299 19 discriminator 2 view .LVU360
 1860 012c 1235     		adds	r5, r5, #18
 1861              	.LVL152:
 299:src/lcd.c     ****                 p = i*7+108;
 1862              		.loc 1 299 9 is_stmt 0 discriminator 2 view .LVU361
 1863 012e B5F5C77F 		cmp	r5, #398
 1864 0132 04F10704 		add	r4, r4, #7
 1865              	.LVL153:
 299:src/lcd.c     ****                 p = i*7+108;
 1866              		.loc 1 299 9 discriminator 2 view .LVU362
 1867 0136 D6D1     		bne	.L96
 321:src/lcd.c     **** 		  exp_bottom (x, ytop_exp);
 322:src/lcd.c     ****                 }
 323:src/lcd.c     ****         }
 324:src/lcd.c     ****         /* Segments 129 & 130 are the signs */
 325:src/lcd.c     ****         if (dots[MANT_SIGN]) {
 1868              		.loc 1 325 9 is_stmt 1 view .LVU363
 1869              		.loc 1 325 12 is_stmt 0 view .LVU364
 1870 0138 96F88130 		ldrb	r3, [r6, #129]	@ zero_extendqisi2
 1871 013c 002B     		cmp	r3, #0
 1872 013e 40F05481 		bne	.L226
 326:src/lcd.c     **** 	  middle (xleft - dwidth, ytop);
 327:src/lcd.c     ****         }
ARM GAS  /tmp/ccSLcNfJ.s 			page 41


 328:src/lcd.c     ****         if (dots[EXP_SIGN]) {
 1873              		.loc 1 328 9 is_stmt 1 view .LVU365
 1874              		.loc 1 328 12 is_stmt 0 view .LVU366
 1875 0142 96F88230 		ldrb	r3, [r6, #130]	@ zero_extendqisi2
 1876 0146 002B     		cmp	r3, #0
 1877 0148 40F05881 		bne	.L227
 1878              	.L98:
 329:src/lcd.c     **** 	  exp_middle (xleft_exp-dwidth_exp, ytop);
 330:src/lcd.c     ****         }
 331:src/lcd.c     **** 
 332:src/lcd.c     **** 	if (dots[BIG_EQ]) {
 1879              		.loc 1 332 2 is_stmt 1 view .LVU367
 1880              		.loc 1 332 5 is_stmt 0 view .LVU368
 1881 014c 96F88330 		ldrb	r3, [r6, #131]	@ zero_extendqisi2
 1882 0150 6BB1     		cbz	r3, .L99
 333:src/lcd.c     **** 	  lcd_fill_rect (250, y_ann-34, 15, 4, 0xff);
 1883              		.loc 1 333 4 is_stmt 1 view .LVU369
 1884 0152 FF25     		movs	r5, #255
 1885              	.LVL154:
 1886              		.loc 1 333 4 is_stmt 0 view .LVU370
 1887 0154 0423     		movs	r3, #4
 1888 0156 0F22     		movs	r2, #15
 1889 0158 2921     		movs	r1, #41
 1890 015a FA20     		movs	r0, #250
 1891 015c 8F4C     		ldr	r4, .L230+4
 1892              	.LVL155:
 1893              		.loc 1 333 4 view .LVU371
 1894 015e 0095     		str	r5, [sp]
 1895 0160 A047     		blx	r4
 1896              	.LVL156:
 334:src/lcd.c     **** 	  lcd_fill_rect (250, y_ann-24, 15, 4, 0xff);
 1897              		.loc 1 334 4 is_stmt 1 view .LVU372
 1898 0162 0095     		str	r5, [sp]
 1899 0164 0423     		movs	r3, #4
 1900 0166 0F22     		movs	r2, #15
 1901 0168 3321     		movs	r1, #51
 1902 016a FA20     		movs	r0, #250
 1903 016c A047     		blx	r4
 1904              	.LVL157:
 1905              	.L99:
 335:src/lcd.c     ****         }
 336:src/lcd.c     **** 	t20->inv = 0;
 1906              		.loc 1 336 2 view .LVU373
 1907 016e 8C4B     		ldr	r3, .L230+8
 1908              		.loc 1 336 11 is_stmt 0 view .LVU374
 1909 0170 1B6B     		ldr	r3, [r3, #48]
 1910 0172 0022     		movs	r2, #0
 1911 0174 5A74     		strb	r2, [r3, #17]
 337:src/lcd.c     **** 	
 338:src/lcd.c     ****         if (dots[DOWN_ARR]) {
 1912              		.loc 1 338 9 is_stmt 1 view .LVU375
 1913              		.loc 1 338 12 is_stmt 0 view .LVU376
 1914 0176 96F88530 		ldrb	r3, [r6, #133]	@ zero_extendqisi2
 1915 017a 5BB3     		cbz	r3, .L100
 339:src/lcd.c     **** 	  lcd_fill_rect(287,y_ann-67,5,12,0xff);
 1916              		.loc 1 339 4 is_stmt 1 view .LVU377
 1917 017c FF25     		movs	r5, #255
ARM GAS  /tmp/ccSLcNfJ.s 			page 42


 1918 017e 874C     		ldr	r4, .L230+4
 1919 0180 0095     		str	r5, [sp]
 1920 0182 0C23     		movs	r3, #12
 1921 0184 0522     		movs	r2, #5
 1922 0186 0821     		movs	r1, #8
 1923 0188 40F21F10 		movw	r0, #287
 1924 018c A047     		blx	r4
 1925              	.LVL158:
 340:src/lcd.c     **** 	  lcd_fill_rect(285,y_ann-55,9,1,0xff);
 1926              		.loc 1 340 4 view .LVU378
 1927 018e 0123     		movs	r3, #1
 1928 0190 0922     		movs	r2, #9
 1929 0192 1421     		movs	r1, #20
 1930 0194 40F21D10 		movw	r0, #285
 1931 0198 0095     		str	r5, [sp]
 1932 019a A047     		blx	r4
 1933              	.LVL159:
 341:src/lcd.c     **** 	  lcd_fill_rect(286,y_ann-54,7,1,0xff);
 1934              		.loc 1 341 4 view .LVU379
 1935 019c 0123     		movs	r3, #1
 1936 019e 0722     		movs	r2, #7
 1937 01a0 1521     		movs	r1, #21
 1938 01a2 4FF48F70 		mov	r0, #286
 1939 01a6 0095     		str	r5, [sp]
 1940 01a8 A047     		blx	r4
 1941              	.LVL160:
 342:src/lcd.c     **** 	  lcd_fill_rect(287,y_ann-53,5,1,0xff);
 1942              		.loc 1 342 4 view .LVU380
 1943 01aa 0123     		movs	r3, #1
 1944 01ac 0522     		movs	r2, #5
 1945 01ae 1621     		movs	r1, #22
 1946 01b0 40F21F10 		movw	r0, #287
 1947 01b4 0095     		str	r5, [sp]
 1948 01b6 A047     		blx	r4
 1949              	.LVL161:
 343:src/lcd.c     **** 	  lcd_fill_rect(288,y_ann-52,3,1,0xff);
 1950              		.loc 1 343 4 view .LVU381
 1951 01b8 0123     		movs	r3, #1
 1952 01ba 0322     		movs	r2, #3
 1953 01bc 1721     		movs	r1, #23
 1954 01be 4FF49070 		mov	r0, #288
 1955 01c2 0095     		str	r5, [sp]
 1956 01c4 A047     		blx	r4
 1957              	.LVL162:
 344:src/lcd.c     **** 	  lcd_fill_rect(289,y_ann-51,1,1,0xff);
 1958              		.loc 1 344 4 view .LVU382
 1959 01c6 0123     		movs	r3, #1
 1960 01c8 0095     		str	r5, [sp]
 1961 01ca 1A46     		mov	r2, r3
 1962 01cc 1821     		movs	r1, #24
 1963 01ce 40F22110 		movw	r0, #289
 1964 01d2 A047     		blx	r4
 1965              	.LVL163:
 1966              	.L100:
 345:src/lcd.c     ****         }
 346:src/lcd.c     **** 
 347:src/lcd.c     **** 	if (dots[INPUT]) {
ARM GAS  /tmp/ccSLcNfJ.s 			page 43


 1967              		.loc 1 347 2 view .LVU383
 1968              		.loc 1 347 5 is_stmt 0 view .LVU384
 1969 01d4 96F88630 		ldrb	r3, [r6, #134]	@ zero_extendqisi2
 1970 01d8 53B1     		cbz	r3, .L101
 348:src/lcd.c     **** 	  lcd_setXY(t20, 305, y_ann-70);
 1971              		.loc 1 348 4 is_stmt 1 view .LVU385
 1972 01da 714C     		ldr	r4, .L230+8
 1973 01dc 714B     		ldr	r3, .L230+12
 1974 01de 206B     		ldr	r0, [r4, #48]
 1975 01e0 40F23111 		movw	r1, #305
 1976 01e4 0522     		movs	r2, #5
 1977 01e6 9847     		blx	r3
 1978              	.LVL164:
 349:src/lcd.c     **** 	  lcd_writeText(t20,"ALPHA");
 1979              		.loc 1 349 4 view .LVU386
 1980 01e8 206B     		ldr	r0, [r4, #48]
 1981 01ea 6F4B     		ldr	r3, .L230+16
 1982 01ec 6F49     		ldr	r1, .L230+20
 1983 01ee 9847     		blx	r3
 1984              	.LVL165:
 1985              	.L101:
 350:src/lcd.c     ****         }
 351:src/lcd.c     **** 
 352:src/lcd.c     **** 	if (dots[LIT_EQ]) {
 1986              		.loc 1 352 2 view .LVU387
 1987              		.loc 1 352 5 is_stmt 0 view .LVU388
 1988 01f0 96F88430 		ldrb	r3, [r6, #132]	@ zero_extendqisi2
 1989 01f4 A3B1     		cbz	r3, .L102
 353:src/lcd.c     **** 	  lcd_setXY (t20, 360, y_ann-70);
 1990              		.loc 1 353 4 is_stmt 1 view .LVU389
 1991 01f6 6A4C     		ldr	r4, .L230+8
 1992 01f8 6A4B     		ldr	r3, .L230+12
 1993 01fa 206B     		ldr	r0, [r4, #48]
 1994 01fc 4FF4B471 		mov	r1, #360
 1995 0200 0522     		movs	r2, #5
 1996 0202 9847     		blx	r3
 1997              	.LVL166:
 354:src/lcd.c     **** 	  if (C_LOCKED) {
 1998              		.loc 1 354 4 view .LVU390
 355:src/lcd.c     **** 	    lcd_writeText(t20, "C_LK");
 1999              		.loc 1 355 6 view .LVU391
 356:src/lcd.c     **** 	  }
 357:src/lcd.c     **** 	  else {
 358:src/lcd.c     **** 	    lcd_writeText(t20, "=");
 2000              		.loc 1 358 6 view .LVU392
 354:src/lcd.c     **** 	    lcd_writeText(t20, "C_LK");
 2001              		.loc 1 354 8 is_stmt 0 view .LVU393
 2002 0204 6A4B     		ldr	r3, .L230+24
 355:src/lcd.c     **** 	    lcd_writeText(t20, "C_LK");
 2003              		.loc 1 355 6 view .LVU394
 2004 0206 206B     		ldr	r0, [r4, #48]
 354:src/lcd.c     **** 	    lcd_writeText(t20, "C_LK");
 2005              		.loc 1 354 8 view .LVU395
 2006 0208 1B68     		ldr	r3, [r3]
 2007 020a 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 354:src/lcd.c     **** 	    lcd_writeText(t20, "C_LK");
 2008              		.loc 1 354 7 view .LVU396
ARM GAS  /tmp/ccSLcNfJ.s 			page 44


 2009 020e 03F04103 		and	r3, r3, #65
 2010 0212 412B     		cmp	r3, #65
 355:src/lcd.c     **** 	    lcd_writeText(t20, "C_LK");
 2011              		.loc 1 355 6 view .LVU397
 2012 0214 08BF     		it	eq
 2013 0216 6749     		ldreq	r1, .L230+28
 2014 0218 634B     		ldr	r3, .L230+16
 2015              		.loc 1 358 6 view .LVU398
 2016 021a 18BF     		it	ne
 2017 021c 6649     		ldrne	r1, .L230+32
 2018 021e 9847     		blx	r3
 2019              	.LVL167:
 2020              	.L102:
 359:src/lcd.c     **** 	  }
 360:src/lcd.c     ****         }
 361:src/lcd.c     **** 
 362:src/lcd.c     **** 	if (dots[BATTERY]) {
 2021              		.loc 1 362 2 is_stmt 1 view .LVU399
 363:src/lcd.c     **** 	  //    MOVE(70, 10);   PRINTF("####-");
 364:src/lcd.c     ****         }
 2022              		.loc 1 364 9 view .LVU400
 365:src/lcd.c     **** #ifdef MODIFY_BEG_SSIZE8
 366:src/lcd.c     **** 	if (dots[BEG]) {
 2023              		.loc 1 366 2 view .LVU401
 2024              		.loc 1 366 5 is_stmt 0 view .LVU402
 2025 0220 96F88830 		ldrb	r3, [r6, #136]	@ zero_extendqisi2
 367:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-50);
 2026              		.loc 1 367 4 view .LVU403
 2027 0224 5E4C     		ldr	r4, .L230+8
 366:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-50);
 2028              		.loc 1 366 5 view .LVU404
 2029 0226 002B     		cmp	r3, #0
 2030 0228 00F0D480 		beq	.L104
 2031              		.loc 1 367 4 is_stmt 1 view .LVU405
 2032 022c 5D4B     		ldr	r3, .L230+12
 2033 022e 206B     		ldr	r0, [r4, #48]
 2034 0230 40F21D11 		movw	r1, #285
 2035 0234 1922     		movs	r2, #25
 2036 0236 9847     		blx	r3
 2037              	.LVL168:
 368:src/lcd.c     **** 	  lcd_writeText(t20, "S:8");
 2038              		.loc 1 368 4 view .LVU406
 2039 0238 206B     		ldr	r0, [r4, #48]
 2040 023a 5B4B     		ldr	r3, .L230+16
 2041 023c 5F49     		ldr	r1, .L230+36
 2042 023e 9847     		blx	r3
 2043              	.LVL169:
 2044              	.L105:
 369:src/lcd.c     ****         }
 370:src/lcd.c     **** 	else {
 371:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-50);
 372:src/lcd.c     **** 	  lcd_writeText(t20, "S:4");
 373:src/lcd.c     **** 	}	  
 374:src/lcd.c     **** #else
 375:src/lcd.c     **** 	if (dots[BEG]) {
 376:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-50);
 377:src/lcd.c     **** 	  lcd_writeText(t20, "BEG");
ARM GAS  /tmp/ccSLcNfJ.s 			page 45


 378:src/lcd.c     ****         }
 379:src/lcd.c     **** #endif
 380:src/lcd.c     **** 	if (dots[STO_annun]) {
 2045              		.loc 1 380 2 view .LVU407
 2046              		.loc 1 380 5 is_stmt 0 view .LVU408
 2047 0240 96F88930 		ldrb	r3, [r6, #137]	@ zero_extendqisi2
 2048 0244 53B1     		cbz	r3, .L106
 381:src/lcd.c     **** 	  lcd_setXY (t20, 325, y_ann-50);
 2049              		.loc 1 381 4 is_stmt 1 view .LVU409
 2050 0246 564C     		ldr	r4, .L230+8
 2051 0248 564B     		ldr	r3, .L230+12
 2052 024a 206B     		ldr	r0, [r4, #48]
 2053 024c 40F24511 		movw	r1, #325
 2054 0250 1922     		movs	r2, #25
 2055 0252 9847     		blx	r3
 2056              	.LVL170:
 382:src/lcd.c     **** 	  lcd_writeText(t20, "PGM");
 2057              		.loc 1 382 4 view .LVU410
 2058 0254 206B     		ldr	r0, [r4, #48]
 2059 0256 544B     		ldr	r3, .L230+16
 2060 0258 5949     		ldr	r1, .L230+40
 2061 025a 9847     		blx	r3
 2062              	.LVL171:
 2063              	.L106:
 383:src/lcd.c     ****         }
 384:src/lcd.c     **** 
 385:src/lcd.c     **** 	if (dots[RCL_annun]) {
 2064              		.loc 1 385 2 view .LVU411
 2065              		.loc 1 385 5 is_stmt 0 view .LVU412
 2066 025c 96F88A30 		ldrb	r3, [r6, #138]	@ zero_extendqisi2
 2067 0260 53B1     		cbz	r3, .L107
 386:src/lcd.c     **** 	  lcd_setXY (t20, 365, y_ann-50);
 2068              		.loc 1 386 4 is_stmt 1 view .LVU413
 2069 0262 4F4C     		ldr	r4, .L230+8
 2070 0264 4F4B     		ldr	r3, .L230+12
 2071 0266 206B     		ldr	r0, [r4, #48]
 2072 0268 40F26D11 		movw	r1, #365
 2073 026c 1922     		movs	r2, #25
 2074 026e 9847     		blx	r3
 2075              	.LVL172:
 387:src/lcd.c     **** 	  lcd_writeText(t20, "RUN");
 2076              		.loc 1 387 4 view .LVU414
 2077 0270 206B     		ldr	r0, [r4, #48]
 2078 0272 4D4B     		ldr	r3, .L230+16
 2079 0274 5349     		ldr	r1, .L230+44
 2080 0276 9847     		blx	r3
 2081              	.LVL173:
 2082              	.L107:
 388:src/lcd.c     ****         }
 389:src/lcd.c     **** 
 390:src/lcd.c     **** 	if (dots[RAD]) {
 2083              		.loc 1 390 2 view .LVU415
 2084              		.loc 1 390 5 is_stmt 0 view .LVU416
 2085 0278 96F88B30 		ldrb	r3, [r6, #139]	@ zero_extendqisi2
 2086 027c 53B1     		cbz	r3, .L108
 391:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-30);
 2087              		.loc 1 391 4 is_stmt 1 view .LVU417
ARM GAS  /tmp/ccSLcNfJ.s 			page 46


 2088 027e 484C     		ldr	r4, .L230+8
 2089 0280 484B     		ldr	r3, .L230+12
 2090 0282 206B     		ldr	r0, [r4, #48]
 2091 0284 40F21D11 		movw	r1, #285
 2092 0288 2D22     		movs	r2, #45
 2093 028a 9847     		blx	r3
 2094              	.LVL174:
 392:src/lcd.c     **** 	  lcd_writeText(t20, "RAD");
 2095              		.loc 1 392 4 view .LVU418
 2096 028c 206B     		ldr	r0, [r4, #48]
 2097 028e 464B     		ldr	r3, .L230+16
 2098 0290 4D49     		ldr	r1, .L230+48
 2099 0292 9847     		blx	r3
 2100              	.LVL175:
 2101              	.L108:
 393:src/lcd.c     **** 	}
 394:src/lcd.c     **** 
 395:src/lcd.c     **** 	if (dots[DEG]) {
 2102              		.loc 1 395 2 view .LVU419
 2103              		.loc 1 395 5 is_stmt 0 view .LVU420
 2104 0294 96F88C30 		ldrb	r3, [r6, #140]	@ zero_extendqisi2
 2105 0298 53B1     		cbz	r3, .L109
 396:src/lcd.c     **** 	  lcd_setXY (t20, 325, y_ann-30);
 2106              		.loc 1 396 4 is_stmt 1 view .LVU421
 2107 029a 414C     		ldr	r4, .L230+8
 2108 029c 414B     		ldr	r3, .L230+12
 2109 029e 206B     		ldr	r0, [r4, #48]
 2110 02a0 40F24511 		movw	r1, #325
 2111 02a4 2D22     		movs	r2, #45
 2112 02a6 9847     		blx	r3
 2113              	.LVL176:
 397:src/lcd.c     **** 	  lcd_writeText(t20, "DEG");
 2114              		.loc 1 397 4 view .LVU422
 2115 02a8 206B     		ldr	r0, [r4, #48]
 2116 02aa 3F4B     		ldr	r3, .L230+16
 2117 02ac 4749     		ldr	r1, .L230+52
 2118 02ae 9847     		blx	r3
 2119              	.LVL177:
 2120              	.L109:
 398:src/lcd.c     ****         }
 399:src/lcd.c     ****         if (dots[RPN]) {
 2121              		.loc 1 399 9 view .LVU423
 2122              		.loc 1 399 12 is_stmt 0 view .LVU424
 2123 02b0 96F88D30 		ldrb	r3, [r6, #141]	@ zero_extendqisi2
 2124 02b4 53B1     		cbz	r3, .L110
 400:src/lcd.c     **** 	  lcd_setXY (t20, 365, y_ann-30);
 2125              		.loc 1 400 4 is_stmt 1 view .LVU425
 2126 02b6 3A4C     		ldr	r4, .L230+8
 2127 02b8 3A4B     		ldr	r3, .L230+12
 2128 02ba 206B     		ldr	r0, [r4, #48]
 2129 02bc 40F26D11 		movw	r1, #365
 2130 02c0 2D22     		movs	r2, #45
 2131 02c2 9847     		blx	r3
 2132              	.LVL178:
 401:src/lcd.c     **** 	  lcd_writeText(t20, "RPN");
 2133              		.loc 1 401 4 view .LVU426
 2134 02c4 206B     		ldr	r0, [r4, #48]
ARM GAS  /tmp/ccSLcNfJ.s 			page 47


 2135 02c6 384B     		ldr	r3, .L230+16
 2136 02c8 4149     		ldr	r1, .L230+56
 2137 02ca 9847     		blx	r3
 2138              	.LVL179:
 2139              	.L110:
 402:src/lcd.c     ****         }
 403:src/lcd.c     **** 
 404:src/lcd.c     **** 	/* The graphical bit last */
 405:src/lcd.c     ****         for (i=0; i<BITMAP_WIDTH; i++) {
 406:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 407:src/lcd.c     **** 	    if (dots[i*6+j+MATRIX_BASE]) {
 408:src/lcd.c     **** 	      lcd_fill_rect( xleft-dwidth+5*i+15, ytop-(10+6*6)+j*6, 4, 5, 0xff);
 2140              		.loc 1 408 8 is_stmt 0 view .LVU427
 2141 02cc DFF8CC90 		ldr	r9, .L230+4
 2142 02d0 0027     		movs	r7, #0
 2143 02d2 1026     		movs	r6, #16
 2144 02d4 0BF18E0A 		add	r10, fp, #142
 2145 02d8 4FF0FF08 		mov	r8, #255
 2146              	.L113:
 2147              	.LVL180:
 406:src/lcd.c     **** 	    if (dots[i*6+j+MATRIX_BASE]) {
 2148              		.loc 1 406 14 is_stmt 1 view .LVU428
 2149 02dc 0AEB0705 		add	r5, r10, r7
 2150 02e0 5424     		movs	r4, #84
 2151              	.LVL181:
 2152              	.L112:
 407:src/lcd.c     **** 	      lcd_fill_rect( xleft-dwidth+5*i+15, ytop-(10+6*6)+j*6, 4, 5, 0xff);
 2153              		.loc 1 407 6 view .LVU429
 2154              		.loc 1 408 8 view .LVU430
 407:src/lcd.c     **** 	      lcd_fill_rect( xleft-dwidth+5*i+15, ytop-(10+6*6)+j*6, 4, 5, 0xff);
 2155              		.loc 1 407 14 is_stmt 0 view .LVU431
 2156 02e2 15F801CB 		ldrb	ip, [r5], #1	@ zero_extendqisi2
 2157              	.LVL182:
 2158              		.loc 1 408 8 view .LVU432
 2159 02e6 2146     		mov	r1, r4
 2160 02e8 0523     		movs	r3, #5
 2161 02ea 0634     		adds	r4, r4, #6
 2162 02ec 0422     		movs	r2, #4
 2163 02ee 3046     		mov	r0, r6
 407:src/lcd.c     **** 	      lcd_fill_rect( xleft-dwidth+5*i+15, ytop-(10+6*6)+j*6, 4, 5, 0xff);
 2164              		.loc 1 407 9 view .LVU433
 2165 02f0 BCF1000F 		cmp	ip, #0
 2166 02f4 02D0     		beq	.L111
 2167              		.loc 1 408 8 view .LVU434
 2168 02f6 CDF80080 		str	r8, [sp]
 2169 02fa C847     		blx	r9
 2170              	.LVL183:
 2171              	.L111:
 406:src/lcd.c     **** 	    if (dots[i*6+j+MATRIX_BASE]) {
 2172              		.loc 1 406 19 is_stmt 1 discriminator 2 view .LVU435
 406:src/lcd.c     **** 	    if (dots[i*6+j+MATRIX_BASE]) {
 2173              		.loc 1 406 14 discriminator 2 view .LVU436
 406:src/lcd.c     **** 	    if (dots[i*6+j+MATRIX_BASE]) {
 2174              		.loc 1 406 4 is_stmt 0 discriminator 2 view .LVU437
 2175 02fc 782C     		cmp	r4, #120
 2176 02fe F0D1     		bne	.L112
 405:src/lcd.c     **** 	  for (j=0; j<6; j++) {
ARM GAS  /tmp/ccSLcNfJ.s 			page 48


 2177              		.loc 1 405 35 is_stmt 1 discriminator 2 view .LVU438
 405:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 2178              		.loc 1 405 19 discriminator 2 view .LVU439
 2179 0300 0637     		adds	r7, r7, #6
 2180              	.LVL184:
 405:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 2181              		.loc 1 405 9 is_stmt 0 discriminator 2 view .LVU440
 2182 0302 B7F5DE7F 		cmp	r7, #444
 2183 0306 06F10506 		add	r6, r6, #5
 2184 030a E7D1     		bne	.L113
 409:src/lcd.c     **** 	    }
 410:src/lcd.c     **** 	  }
 411:src/lcd.c     **** 	}
 412:src/lcd.c     **** #ifdef TOP_ROW
 413:src/lcd.c     ****         for (i=0; i<BW_TOP; i++) {
 414:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 415:src/lcd.c     **** 	    if (dots[i*6+j+MB_TOP]) {
 416:src/lcd.c     **** 	      lcd_fill_rect( xleft-dwidth+5*i+15, 70-(10+6*5)+j*5, 4, 4, 0xff);
 2185              		.loc 1 416 8 view .LVU441
 2186 030c DFF88C90 		ldr	r9, .L230+4
 2187 0310 0BF24A2B 		addw	fp, fp, #586
 2188 0314 4FF00008 		mov	r8, #0
 2189 0318 1027     		movs	r7, #16
 2190              	.LVL185:
 2191              		.loc 1 416 8 view .LVU442
 2192 031a 4FF0FF0A 		mov	r10, #255
 2193              	.L114:
 2194              	.LVL186:
 414:src/lcd.c     **** 	    if (dots[i*6+j+MB_TOP]) {
 2195              		.loc 1 414 14 is_stmt 1 view .LVU443
 2196 031e 0BEB0805 		add	r5, fp, r8
 2197 0322 1E24     		movs	r4, #30
 2198              	.LVL187:
 2199              	.L116:
 415:src/lcd.c     **** 	      lcd_fill_rect( xleft-dwidth+5*i+15, 70-(10+6*5)+j*5, 4, 4, 0xff);
 2200              		.loc 1 415 6 view .LVU444
 2201              		.loc 1 416 8 view .LVU445
 415:src/lcd.c     **** 	      lcd_fill_rect( xleft-dwidth+5*i+15, 70-(10+6*5)+j*5, 4, 4, 0xff);
 2202              		.loc 1 415 14 is_stmt 0 view .LVU446
 2203 0324 15F8016B 		ldrb	r6, [r5], #1	@ zero_extendqisi2
 2204              	.LVL188:
 2205              		.loc 1 416 8 view .LVU447
 2206 0328 0423     		movs	r3, #4
 2207 032a 2146     		mov	r1, r4
 2208 032c 1A46     		mov	r2, r3
 2209 032e 0534     		adds	r4, r4, #5
 2210 0330 3846     		mov	r0, r7
 415:src/lcd.c     **** 	      lcd_fill_rect( xleft-dwidth+5*i+15, 70-(10+6*5)+j*5, 4, 4, 0xff);
 2211              		.loc 1 415 9 view .LVU448
 2212 0332 16B1     		cbz	r6, .L115
 2213              		.loc 1 416 8 view .LVU449
 2214 0334 CDF800A0 		str	r10, [sp]
 2215 0338 C847     		blx	r9
 2216              	.LVL189:
 2217              	.L115:
 414:src/lcd.c     **** 	    if (dots[i*6+j+MB_TOP]) {
 2218              		.loc 1 414 19 is_stmt 1 discriminator 2 view .LVU450
ARM GAS  /tmp/ccSLcNfJ.s 			page 49


 414:src/lcd.c     **** 	    if (dots[i*6+j+MB_TOP]) {
 2219              		.loc 1 414 14 discriminator 2 view .LVU451
 414:src/lcd.c     **** 	    if (dots[i*6+j+MB_TOP]) {
 2220              		.loc 1 414 4 is_stmt 0 discriminator 2 view .LVU452
 2221 033a 3C2C     		cmp	r4, #60
 2222 033c F2D1     		bne	.L116
 413:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 2223              		.loc 1 413 29 is_stmt 1 discriminator 2 view .LVU453
 413:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 2224              		.loc 1 413 19 discriminator 2 view .LVU454
 2225 033e 08F10608 		add	r8, r8, #6
 2226              	.LVL190:
 413:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 2227              		.loc 1 413 9 is_stmt 0 discriminator 2 view .LVU455
 2228 0342 B8F5817F 		cmp	r8, #258
 2229 0346 07F10507 		add	r7, r7, #5
 2230 034a E8D1     		bne	.L114
 417:src/lcd.c     **** 	    }
 418:src/lcd.c     **** 	  }
 419:src/lcd.c     **** 	}
 420:src/lcd.c     **** #endif
 421:src/lcd.c     **** }
 2231              		.loc 1 421 1 view .LVU456
 2232 034c 03B0     		add	sp, sp, #12
 2233              		.cfi_remember_state
 2234              		.cfi_def_cfa_offset 36
 2235              		@ sp needed
 2236 034e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2237              	.LVL191:
 2238              	.L225:
 2239              		.cfi_restore_state
 321:src/lcd.c     ****                 }
 2240              		.loc 1 321 5 is_stmt 1 view .LVU457
 2241 0352 8221     		movs	r1, #130
 2242 0354 2846     		mov	r0, r5
 2243 0356 FFF7FEFF 		bl	exp_bottom
 2244              	.LVL192:
 2245 035a E7E6     		b	.L95
 2246              	.L224:
 318:src/lcd.c     ****                 }
 2247              		.loc 1 318 5 view .LVU458
 2248              	.LVL193:
 2249              	.LBB77:
 2250              	.LBI77:
 230:src/lcd.c     ****   exp_right_side(i-1, j+11);
 2251              		.loc 1 230 6 view .LVU459
 2252              	.LBB78:
 231:src/lcd.c     **** }
 2253              		.loc 1 231 3 view .LVU460
 2254 035c 8D21     		movs	r1, #141
 2255 035e 681E     		subs	r0, r5, #1
 2256 0360 FFF7FEFF 		bl	exp_right_side
 2257              	.LVL194:
 232:src/lcd.c     **** void exp_top (int i, int j) {
 2258              		.loc 1 232 1 is_stmt 0 view .LVU461
 2259 0364 DDE6     		b	.L94
 2260              	.LVL195:
ARM GAS  /tmp/ccSLcNfJ.s 			page 50


 2261              	.L223:
 232:src/lcd.c     **** void exp_top (int i, int j) {
 2262              		.loc 1 232 1 view .LVU462
 2263              	.LBE78:
 2264              	.LBE77:
 315:src/lcd.c     ****                 }
 2265              		.loc 1 315 5 is_stmt 1 view .LVU463
 2266              	.LBB79:
 2267              	.LBI79:
 218:src/lcd.c     ****   exp_left_side(i, j+11);
 2268              		.loc 1 218 6 view .LVU464
 2269              	.LBB80:
 219:src/lcd.c     **** }
 2270              		.loc 1 219 3 view .LVU465
 2271 0366 8D21     		movs	r1, #141
 2272 0368 2846     		mov	r0, r5
 2273 036a FFF7FEFF 		bl	exp_left_side
 2274              	.LVL196:
 220:src/lcd.c     **** void exp_right_side (int i, int j) {
 2275              		.loc 1 220 1 is_stmt 0 view .LVU466
 2276 036e D3E6     		b	.L93
 2277              	.LVL197:
 2278              	.L222:
 220:src/lcd.c     **** void exp_right_side (int i, int j) {
 2279              		.loc 1 220 1 view .LVU467
 2280              	.LBE80:
 2281              	.LBE79:
 312:src/lcd.c     ****                 }
 2282              		.loc 1 312 5 is_stmt 1 view .LVU468
 2283 0370 8221     		movs	r1, #130
 2284 0372 2846     		mov	r0, r5
 2285 0374 FFF7FEFF 		bl	exp_middle
 2286              	.LVL198:
 2287 0378 C9E6     		b	.L92
 2288              	.L221:
 309:src/lcd.c     ****                 }
 2289              		.loc 1 309 5 view .LVU469
 2290              	.LVL199:
 2291              	.LBB81:
 2292              	.LBI81:
 227:src/lcd.c     ****   exp_right_side(i, j);
 2293              		.loc 1 227 6 view .LVU470
 2294              	.LBB82:
 228:src/lcd.c     **** }
 2295              		.loc 1 228 3 view .LVU471
 2296 037a 8221     		movs	r1, #130
 2297 037c 2846     		mov	r0, r5
 2298 037e FFF7FEFF 		bl	exp_right_side
 2299              	.LVL200:
 229:src/lcd.c     **** void exp_right_side_bottom (int i, int j) {
 2300              		.loc 1 229 1 is_stmt 0 view .LVU472
 2301 0382 BFE6     		b	.L91
 2302              	.LVL201:
 2303              	.L220:
 229:src/lcd.c     **** void exp_right_side_bottom (int i, int j) {
 2304              		.loc 1 229 1 view .LVU473
 2305              	.LBE82:
ARM GAS  /tmp/ccSLcNfJ.s 			page 51


 2306              	.LBE81:
 306:src/lcd.c     ****                 }
 2307              		.loc 1 306 5 is_stmt 1 view .LVU474
 2308              	.LBB83:
 2309              	.LBI83:
 215:src/lcd.c     ****   exp_left_side(i+1, j);
 2310              		.loc 1 215 6 view .LVU475
 2311              	.LBB84:
 216:src/lcd.c     **** }
 2312              		.loc 1 216 3 view .LVU476
 2313 0384 8221     		movs	r1, #130
 2314 0386 681C     		adds	r0, r5, #1
 2315 0388 FFF7FEFF 		bl	exp_left_side
 2316              	.LVL202:
 217:src/lcd.c     **** void exp_left_side_bottom (int i, int j) {
 2317              		.loc 1 217 1 is_stmt 0 view .LVU477
 2318 038c B5E6     		b	.L90
 2319              	.LVL203:
 2320              	.L219:
 217:src/lcd.c     **** void exp_left_side_bottom (int i, int j) {
 2321              		.loc 1 217 1 view .LVU478
 2322              	.LBE84:
 2323              	.LBE83:
 303:src/lcd.c     ****                 }
 2324              		.loc 1 303 5 is_stmt 1 view .LVU479
 2325 038e 8221     		movs	r1, #130
 2326 0390 2846     		mov	r0, r5
 2327 0392 FFF7FEFF 		bl	exp_top
 2328              	.LVL204:
 2329 0396 ABE6     		b	.L89
 2330              	.L231:
 2331              		.align	2
 2332              	.L230:
 2333 0398 00000000 		.word	.LANCHOR0
 2334 039c 3D020008 		.word	134218301
 2335 03a0 00200010 		.word	268443648
 2336 03a4 6D020008 		.word	134218349
 2337 03a8 7D020008 		.word	134218365
 2338 03ac 00000000 		.word	.LC0
 2339 03b0 00000000 		.word	main_ram
 2340 03b4 08000000 		.word	.LC1
 2341 03b8 10000000 		.word	.LC2
 2342 03bc 14000000 		.word	.LC3
 2343 03c0 1C000000 		.word	.LC5
 2344 03c4 20000000 		.word	.LC6
 2345 03c8 24000000 		.word	.LC7
 2346 03cc 28000000 		.word	.LC8
 2347 03d0 2C000000 		.word	.LC9
 2348              	.LVL205:
 2349              	.L104:
 371:src/lcd.c     **** 	  lcd_writeText(t20, "S:4");
 2350              		.loc 1 371 4 view .LVU480
 2351 03d4 206B     		ldr	r0, [r4, #48]
 2352 03d6 0C4B     		ldr	r3, .L232
 2353 03d8 1922     		movs	r2, #25
 2354 03da 40F21D11 		movw	r1, #285
 2355 03de 9847     		blx	r3
ARM GAS  /tmp/ccSLcNfJ.s 			page 52


 2356              	.LVL206:
 372:src/lcd.c     **** 	}	  
 2357              		.loc 1 372 4 view .LVU481
 2358 03e0 206B     		ldr	r0, [r4, #48]
 2359 03e2 0A4B     		ldr	r3, .L232+4
 2360 03e4 0A49     		ldr	r1, .L232+8
 2361 03e6 9847     		blx	r3
 2362              	.LVL207:
 2363 03e8 2AE7     		b	.L105
 2364              	.LVL208:
 2365              	.L226:
 326:src/lcd.c     ****         }
 2366              		.loc 1 326 4 view .LVU482
 2367 03ea 8221     		movs	r1, #130
 2368 03ec 0120     		movs	r0, #1
 2369 03ee FFF7FEFF 		bl	middle
 2370              	.LVL209:
 328:src/lcd.c     **** 	  exp_middle (xleft_exp-dwidth_exp, ytop);
 2371              		.loc 1 328 9 view .LVU483
 328:src/lcd.c     **** 	  exp_middle (xleft_exp-dwidth_exp, ytop);
 2372              		.loc 1 328 12 is_stmt 0 view .LVU484
 2373 03f2 96F88230 		ldrb	r3, [r6, #130]	@ zero_extendqisi2
 2374 03f6 002B     		cmp	r3, #0
 2375 03f8 3FF4A8AE 		beq	.L98
 2376              	.L227:
 329:src/lcd.c     ****         }
 2377              		.loc 1 329 4 is_stmt 1 view .LVU485
 2378 03fc 8221     		movs	r1, #130
 2379 03fe 4FF4A370 		mov	r0, #326
 2380 0402 FFF7FEFF 		bl	exp_middle
 2381              	.LVL210:
 2382 0406 A1E6     		b	.L98
 2383              	.L233:
 2384              		.align	2
 2385              	.L232:
 2386 0408 6D020008 		.word	134218349
 2387 040c 7D020008 		.word	134218365
 2388 0410 18000000 		.word	.LC4
 2389              		.cfi_endproc
 2390              	.LFE25:
 2392              		.section	.text.show_stack,"ax",%progbits
 2393              		.align	1
 2394              		.p2align 2,,3
 2395              		.global	show_stack
 2396              		.syntax unified
 2397              		.thumb
 2398              		.thumb_func
 2399              		.fpu fpv4-sp-d16
 2401              	show_stack:
 2402              	.LFB36:
 2403              		.cfi_startproc
 2404              		@ args = 0, pretend = 0, frame = 0
 2405              		@ frame_needed = 0, uses_anonymous_args = 0
 2406              		@ link register save eliminated.
 2407 0000 7047     		bx	lr
 2408              		.cfi_endproc
 2409              	.LFE36:
ARM GAS  /tmp/ccSLcNfJ.s 			page 53


 2411 0002 00BF     		.section	.text.show_flags,"ax",%progbits
 2412              		.align	1
 2413              		.p2align 2,,3
 2414              		.global	show_flags
 2415              		.syntax unified
 2416              		.thumb
 2417              		.thumb_func
 2418              		.fpu fpv4-sp-d16
 2420              	show_flags:
 2421              	.LFB34:
 2422              		.cfi_startproc
 2423              		@ args = 0, pretend = 0, frame = 0
 2424              		@ frame_needed = 0, uses_anonymous_args = 0
 2425              		@ link register save eliminated.
 2426 0000 7047     		bx	lr
 2427              		.cfi_endproc
 2428              	.LFE34:
 2430 0002 00BF     		.section	.text.wait_for_display,"ax",%progbits
 2431              		.align	1
 2432              		.p2align 2,,3
 2433              		.global	wait_for_display
 2434              		.syntax unified
 2435              		.thumb
 2436              		.thumb_func
 2437              		.fpu fpv4-sp-d16
 2439              	wait_for_display:
 2440              	.LFB28:
 422:src/lcd.c     **** #endif
 423:src/lcd.c     **** 
 424:src/lcd.c     **** #if defined(USECURSES) && !defined(DM42)
 425:src/lcd.c     **** void show_disp(void) {
 426:src/lcd.c     ****         int i, j, p, x;
 427:src/lcd.c     ****         const int dig_base = 16;
 428:src/lcd.c     **** 
 429:src/lcd.c     ****         /* Segments 0 - 107 are the main digits */
 430:src/lcd.c     ****         for (i=0; i<DISPLAY_DIGITS; i++) {
 431:src/lcd.c     **** 	  p = i*SEGS_PER_DIGIT; // 9 - 7 + dot and comma
 432:src/lcd.c     ****                 x = 3+5*i;
 433:src/lcd.c     ****                 if (dots[p]) {
 434:src/lcd.c     ****                         MOVE(x+1, dig_base);    PRINTF("--");
 435:src/lcd.c     ****                 }
 436:src/lcd.c     ****                 if (dots[p+1]) {
 437:src/lcd.c     ****                         MOVE(x, dig_base+1);    PRINTF("|");
 438:src/lcd.c     ****                         MOVE(x, dig_base+2);    PRINTF("|");
 439:src/lcd.c     ****                 }
 440:src/lcd.c     ****                 if (dots[p+3]) {
 441:src/lcd.c     ****                         MOVE(x+3, dig_base+1);  PRINTF("|");
 442:src/lcd.c     ****                         MOVE(x+3, dig_base+2);  PRINTF("|");
 443:src/lcd.c     ****                 }
 444:src/lcd.c     ****                 if (dots[p+2]) {
 445:src/lcd.c     ****                         MOVE(x+1, dig_base+3);  PRINTF("--");
 446:src/lcd.c     ****                 }
 447:src/lcd.c     ****                 if (dots[p+4]) {
 448:src/lcd.c     ****                         MOVE(x, dig_base+4);    PRINTF("|");
 449:src/lcd.c     ****                         MOVE(x, dig_base+5);    PRINTF("|");
 450:src/lcd.c     ****                 }
 451:src/lcd.c     ****                 if (dots[p+6]) {
ARM GAS  /tmp/ccSLcNfJ.s 			page 54


 452:src/lcd.c     ****                         MOVE(x+3, dig_base+4);  PRINTF("|");
 453:src/lcd.c     ****                         MOVE(x+3, dig_base+5);  PRINTF("|");
 454:src/lcd.c     ****                 }
 455:src/lcd.c     ****                 if (dots[p+5]) {
 456:src/lcd.c     ****                         MOVE(x+1, dig_base+6);  PRINTF("--");
 457:src/lcd.c     ****                 }
 458:src/lcd.c     ****                 if (dots[p+7]) {
 459:src/lcd.c     ****                         MOVE(x+4, dig_base+6);  PRINTF(".");
 460:src/lcd.c     ****                 }
 461:src/lcd.c     ****                 if (dots[p+8]) {
 462:src/lcd.c     ****                         MOVE(x+3, dig_base+7);  PRINTF("/");
 463:src/lcd.c     ****                 }
 464:src/lcd.c     ****         }
 465:src/lcd.c     ****         /* Segments 108 - 128 are the exponent digits */
 466:src/lcd.c     ****         for (i=0; i<3; i++) {
 467:src/lcd.c     ****                 p = i*7+108;
 468:src/lcd.c     ****                 x = 66 + i * 4;
 469:src/lcd.c     ****                 if (dots[p]) {
 470:src/lcd.c     ****                         MOVE(x+1, dig_base-1);  PRINTF("-");
 471:src/lcd.c     ****                 }
 472:src/lcd.c     ****                 if (dots[p+1]) {
 473:src/lcd.c     ****                         MOVE(x, dig_base);      PRINTF("|");
 474:src/lcd.c     ****                 }
 475:src/lcd.c     ****                 if (dots[p+3]) {
 476:src/lcd.c     ****                         MOVE(x+2, dig_base);    PRINTF("|");
 477:src/lcd.c     ****                 }
 478:src/lcd.c     ****                 if (dots[p+2]) {
 479:src/lcd.c     ****                         MOVE(x+1, dig_base+1);  PRINTF("-");
 480:src/lcd.c     ****                 }
 481:src/lcd.c     ****                 if (dots[p+4]) {
 482:src/lcd.c     ****                         MOVE(x, dig_base+2);    PRINTF("|");
 483:src/lcd.c     ****                 }
 484:src/lcd.c     ****                 if (dots[p+6]) {
 485:src/lcd.c     ****                         MOVE(x+2, dig_base+2);  PRINTF("|");
 486:src/lcd.c     ****                 }
 487:src/lcd.c     ****                 if (dots[p+5]) {
 488:src/lcd.c     ****                         MOVE(x+1, dig_base+3);  PRINTF("-");
 489:src/lcd.c     ****                 }
 490:src/lcd.c     ****         }
 491:src/lcd.c     ****         /* Segments 129 & 130 are the signs */
 492:src/lcd.c     ****         if (dots[MANT_SIGN]) {
 493:src/lcd.c     ****                 MOVE(0, dig_base+3);
 494:src/lcd.c     ****                 PRINTF("--");
 495:src/lcd.c     ****         }
 496:src/lcd.c     ****         if (dots[EXP_SIGN]) {
 497:src/lcd.c     ****                 MOVE(64, dig_base+1);
 498:src/lcd.c     ****                 PRINTF("-");
 499:src/lcd.c     ****         }
 500:src/lcd.c     ****         if (dots[BIG_EQ]) {
 501:src/lcd.c     ****                 MOVE(47, 12);   PRINTF("==");
 502:src/lcd.c     ****         }
 503:src/lcd.c     ****         if (dots[LIT_EQ]) {
 504:src/lcd.c     ****                 MOVE(64, 10);   PRINTF("=");
 505:src/lcd.c     ****         }
 506:src/lcd.c     ****         if (dots[DOWN_ARR]) {
 507:src/lcd.c     ****                 MOVE(52, 10);   PRINTF("v");
 508:src/lcd.c     ****         }
ARM GAS  /tmp/ccSLcNfJ.s 			page 55


 509:src/lcd.c     ****         if (dots[INPUT]) {
 510:src/lcd.c     ****                 MOVE(55, 10);   PRINTF("INPUT");
 511:src/lcd.c     ****         }
 512:src/lcd.c     ****         if (dots[BATTERY]) {
 513:src/lcd.c     ****                 MOVE(70, 10);   PRINTF("####-");
 514:src/lcd.c     ****         }
 515:src/lcd.c     ****         if (dots[BEG]) {
 516:src/lcd.c     ****                 MOVE(52, 12);   PRINTF("BEG");
 517:src/lcd.c     ****         }
 518:src/lcd.c     ****         if (dots[STO_annun]) {
 519:src/lcd.c     ****                 MOVE(62, 12);   PRINTF("STO");
 520:src/lcd.c     ****         }
 521:src/lcd.c     ****         if (dots[RCL_annun]) {
 522:src/lcd.c     ****                 MOVE(72, 12);   PRINTF("RCL");
 523:src/lcd.c     ****         }
 524:src/lcd.c     ****         if (dots[RAD]) {
 525:src/lcd.c     ****                 MOVE(52, 14);   PRINTF("RAD");
 526:src/lcd.c     ****         }
 527:src/lcd.c     ****         if (dots[DEG]) {
 528:src/lcd.c     ****                 MOVE(62, 14);   PRINTF("360");
 529:src/lcd.c     ****         }
 530:src/lcd.c     ****         if (dots[RPN]) {
 531:src/lcd.c     ****                 MOVE(72, 14);   PRINTF("RPN");
 532:src/lcd.c     ****         }
 533:src/lcd.c     ****         /* The graphical bit last */
 534:src/lcd.c     ****         for (i=0; i<BITMAP_WIDTH; i++)
 535:src/lcd.c     ****                 for (j=0; j<6; j++) {
 536:src/lcd.c     ****                         if (dots[i*6+j+MATRIX_BASE]) {
 537:src/lcd.c     ****                                 MOVE(1+i, 9+j);
 538:src/lcd.c     ****                                 PRINTF("#");
 539:src/lcd.c     ****                         }
 540:src/lcd.c     ****                 }
 541:src/lcd.c     **** }
 542:src/lcd.c     **** #endif
 543:src/lcd.c     **** 
 544:src/lcd.c     **** void show_stack(void) {
 545:src/lcd.c     **** #ifdef USECURSES
 546:src/lcd.c     ****   int i;
 547:src/lcd.c     **** 
 548:src/lcd.c     ****         if (!State2.flags)
 549:src/lcd.c     ****                 return;
 550:src/lcd.c     **** 
 551:src/lcd.c     ****         // Stack display smashes the stack registers
 552:src/lcd.c     ****         for (i=4; i<STACK_SIZE; i++) {
 553:src/lcd.c     ****                 MOVE(26, 8-i);
 554:src/lcd.c     ****                 PRINTF("%c ", i<stack_size()?'*':' ');
 555:src/lcd.c     ****                 dispreg(REGNAMES[i], regX_idx + i);
 556:src/lcd.c     ****         }
 557:src/lcd.c     ****         MOVE(53, 2);    dispreg(REGNAMES[regJ_idx-regX_idx], regJ_idx);
 558:src/lcd.c     ****         MOVE(53, 1);    dispreg(REGNAMES[regK_idx-regX_idx], regK_idx);
 559:src/lcd.c     ****         for (i=0; i<4; i++) {
 560:src/lcd.c     ****                 MOVE(0, 4-i);
 561:src/lcd.c     ****                 dispreg(REGNAMES[i], regX_idx + i);
 562:src/lcd.c     ****         }
 563:src/lcd.c     ****         MOVE(53, 4);
 564:src/lcd.c     ****         dispreg(REGNAMES[regL_idx-regX_idx], regL_idx);
 565:src/lcd.c     ****         MOVE(53, 3);
ARM GAS  /tmp/ccSLcNfJ.s 			page 56


 566:src/lcd.c     ****         dispreg(REGNAMES[regI_idx-regX_idx], regI_idx);
 567:src/lcd.c     ****         MOVE(53, 0);
 568:src/lcd.c     ****         PRINTF("stack depth: %d", stack_size());
 569:src/lcd.c     **** #endif
 570:src/lcd.c     **** }
 571:src/lcd.c     **** 
 572:src/lcd.c     **** void show_flags(void) {
 573:src/lcd.c     **** #if defined(CONSOLE) && !defined(DM42)
 574:src/lcd.c     **** 	extern unsigned int get_local_flags(void);
 575:src/lcd.c     **** 
 576:src/lcd.c     **** 	if (!State2.flags)
 577:src/lcd.c     **** 		return;
 578:src/lcd.c     **** 	MOVE(0, 0);
 579:src/lcd.c     **** 	PRINTF(" %c ", JustDisplayed ? '*' : ' ');
 580:src/lcd.c     **** 	MOVE(5, 0);
 581:src/lcd.c     **** 	switch (cur_shift()) {
 582:src/lcd.c     **** 	case SHIFT_F:   PRINTF("[f-shift]");    break;
 583:src/lcd.c     **** 	case SHIFT_G:   PRINTF("[g-shift]");    break;
 584:src/lcd.c     **** 	case SHIFT_H:   PRINTF("[h-shift]");    break;
 585:src/lcd.c     **** 	default:                                break;
 586:src/lcd.c     **** 	}
 587:src/lcd.c     **** 	if (State2.hyp) {
 588:src/lcd.c     **** 		MOVE(14, 0);
 589:src/lcd.c     **** 		if (State2.dot)
 590:src/lcd.c     **** 			PRINTF("[hyp]");
 591:src/lcd.c     **** 		else
 592:src/lcd.c     **** 			PRINTF("[hyp-1]");
 593:src/lcd.c     **** 	}
 594:src/lcd.c     **** 	if (!State2.runmode) {
 595:src/lcd.c     **** 		MOVE(21, 0);
 596:src/lcd.c     **** 		PRINTF("[prog]");
 597:src/lcd.c     **** 	}
 598:src/lcd.c     **** 	if (view_instruction_counter) {
 599:src/lcd.c     **** 		MOVE(28, 0);
 600:src/lcd.c     **** 		PRINTF("#%llu", instruction_count);
 601:src/lcd.c     **** 	}
 602:src/lcd.c     **** 	MOVE(0, 0);
 603:src/lcd.c     **** 
 604:src/lcd.c     **** #ifdef USECURSES
 605:src/lcd.c     **** #define FLAG_BASE       5
 606:src/lcd.c     **** 	MOVE(10, FLAG_BASE);
 607:src/lcd.c     **** 	if (State2.rarg)
 608:src/lcd.c     **** 		PRINTF("[rcmd]");
 609:src/lcd.c     **** 	else if (State2.arrow)
 610:src/lcd.c     **** 		PRINTF("[arr]");
 611:src/lcd.c     **** 	if (State2.dot) {
 612:src/lcd.c     **** 		MOVE(18, FLAG_BASE);
 613:src/lcd.c     **** 		PRINTF("[dot]");
 614:src/lcd.c     **** 	}
 615:src/lcd.c     **** 	if (State2.ind) {
 616:src/lcd.c     **** 		MOVE(24, FLAG_BASE);
 617:src/lcd.c     **** 		PRINTF("[ind]");
 618:src/lcd.c     **** 	}
 619:src/lcd.c     **** 	if (State2.trace) {
 620:src/lcd.c     **** 		MOVE(30, FLAG_BASE);
 621:src/lcd.c     **** 		PRINTF("[trace]");
 622:src/lcd.c     **** 	}
ARM GAS  /tmp/ccSLcNfJ.s 			page 57


 623:src/lcd.c     **** 	if (State2.cmplx) {
 624:src/lcd.c     **** 		MOVE(40, FLAG_BASE);
 625:src/lcd.c     **** 		PRINTF("[cmplx]");
 626:src/lcd.c     **** 	}
 627:src/lcd.c     **** 	if (State2.catalogue) {
 628:src/lcd.c     **** 		MOVE(50, FLAG_BASE);
 629:src/lcd.c     **** 		PRINTF("[cat %03u]", State2.catalogue);
 630:src/lcd.c     **** 	}
 631:src/lcd.c     **** 	if (State2.hms) {
 632:src/lcd.c     **** 		MOVE(64, FLAG_BASE);
 633:src/lcd.c     **** 		PRINTF("[H.MS]");
 634:src/lcd.c     **** 	}
 635:src/lcd.c     **** 	if (UState.fract) {
 636:src/lcd.c     **** 		MOVE(71, FLAG_BASE);
 637:src/lcd.c     **** 		PRINTF("[FRACT]");
 638:src/lcd.c     **** 	}
 639:src/lcd.c     **** 	if (State2.multi) {
 640:src/lcd.c     **** 		MOVE(71, FLAG_BASE+1);
 641:src/lcd.c     **** 		PRINTF("[MULTI]");
 642:src/lcd.c     **** 	}
 643:src/lcd.c     **** 	MOVE(50, FLAG_BASE+1);
 644:src/lcd.c     **** 	PRINTF("[RRS %03u]", ProgSize);
 645:src/lcd.c     **** 	if (State2.state_lift) {
 646:src/lcd.c     **** 		MOVE(10, FLAG_BASE+1);
 647:src/lcd.c     **** 		PRINTF("[lift]");
 648:src/lcd.c     **** 	}
 649:src/lcd.c     **** 	if (Running) {
 650:src/lcd.c     **** 		MOVE(18, FLAG_BASE+1);
 651:src/lcd.c     **** 		PRINTF("[running]");
 652:src/lcd.c     **** 	}
 653:src/lcd.c     **** 	MOVE(70, 5);
 654:src/lcd.c     **** 	PRINTF("iw = %u/%u", State2.window, IntMaxWindow);
 655:src/lcd.c     **** 	MOVE(30, FLAG_BASE+1);
 656:src/lcd.c     **** 	PRINTF("shft = %u", cur_shift());
 657:src/lcd.c     **** 	MOVE(40, FLAG_BASE+1);
 658:src/lcd.c     **** 	PRINTF("trig = %u", UState.trigmode);
 659:src/lcd.c     **** 	MOVE(60, FLAG_BASE+1);
 660:src/lcd.c     **** 	PRINTF("r = %u", ShowRegister);
 661:src/lcd.c     **** //	MOVE(60, FLAG_BASE+1);
 662:src/lcd.c     **** //	PRINTF("apos = %u", State2.alpha_pos);
 663:src/lcd.c     **** 	MOVE(10, FLAG_BASE+2);
 664:src/lcd.c     **** 	PRINTF("numdig = %u   alpha '%-31s'   lflags = %03o-%03o",
 665:src/lcd.c     **** 			State2.numdigit, Alpha, get_local_flags() >> 8,
 666:src/lcd.c     **** 			get_local_flags() & 0xff);
 667:src/lcd.c     **** 	if (State.entryp) {
 668:src/lcd.c     **** 		MOVE(0, FLAG_BASE+2);
 669:src/lcd.c     **** 		PRINTF("entryp");
 670:src/lcd.c     **** 	}
 671:src/lcd.c     **** 	MOVE(10, FLAG_BASE+3);
 672:src/lcd.c     **** 	PRINTF("digval=%u", State2.digval);
 673:src/lcd.c     **** 	MOVE(23, FLAG_BASE+3);
 674:src/lcd.c     **** 	PRINTF("pc = %03u", state_pc());
 675:src/lcd.c     **** 	MOVE(34, FLAG_BASE+3);
 676:src/lcd.c     **** 	PRINTF("ap = %u", State2.alpha_pos);
 677:src/lcd.c     **** 	MOVE(45, FLAG_BASE+3);
 678:src/lcd.c     **** 	PRINTF("cmddot = %u  cmdeex = %u  eol = %u",
 679:src/lcd.c     **** 			CmdLineDot, CmdLineEex, CmdLineLength);
ARM GAS  /tmp/ccSLcNfJ.s 			page 58


 680:src/lcd.c     **** 	MOVE(0, FLAG_BASE+3);
 681:src/lcd.c     **** 	PRINTF("JG=%d", UState.jg1582?1582:1752);
 682:src/lcd.c     **** #endif
 683:src/lcd.c     **** #endif
 684:src/lcd.c     **** }
 685:src/lcd.c     **** 
 686:src/lcd.c     **** void wait_for_display(void)
 687:src/lcd.c     **** {
 2441              		.loc 1 687 1 view -0
 2442              		.cfi_startproc
 2443              		@ args = 0, pretend = 0, frame = 0
 2444              		@ frame_needed = 0, uses_anonymous_args = 0
 2445              		@ link register save eliminated.
 688:src/lcd.c     **** }
 2446              		.loc 1 688 1 view .LVU487
 2447 0000 7047     		bx	lr
 2448              		.cfi_endproc
 2449              	.LFE28:
 2451 0002 00BF     		.section	.text.finish_display,"ax",%progbits
 2452              		.align	1
 2453              		.p2align 2,,3
 2454              		.global	finish_display
 2455              		.syntax unified
 2456              		.thumb
 2457              		.thumb_func
 2458              		.fpu fpv4-sp-d16
 2460              	finish_display:
 2461              	.LFB29:
 689:src/lcd.c     **** 
 690:src/lcd.c     **** #if defined(USECURSES) && !defined(DM42) 
 691:src/lcd.c     **** void finish_display(void) {
 692:src/lcd.c     ****         show_disp();
 693:src/lcd.c     ****         MOVE(0, 0);
 694:src/lcd.c     ****         refresh();
 695:src/lcd.c     **** 
 696:src/lcd.c     **** }
 697:src/lcd.c     **** #endif
 698:src/lcd.c     **** #if defined(DM42) 
 699:src/lcd.c     **** void finish_display(void) {
 2462              		.loc 1 699 27 view -0
 2463              		.cfi_startproc
 2464              		@ args = 0, pretend = 0, frame = 0
 2465              		@ frame_needed = 0, uses_anonymous_args = 0
 700:src/lcd.c     ****   //  lcd_clear_buf();
 701:src/lcd.c     ****   lcd_fill_rect (0, 0, 400, 188, 0); //leave bottom 52 rows for menu 
 2466              		.loc 1 701 3 view .LVU489
 699:src/lcd.c     ****   //  lcd_clear_buf();
 2467              		.loc 1 699 27 is_stmt 0 view .LVU490
 2468 0000 10B5     		push	{r4, lr}
 2469              		.cfi_def_cfa_offset 8
 2470              		.cfi_offset 4, -8
 2471              		.cfi_offset 14, -4
 2472 0002 82B0     		sub	sp, sp, #8
 2473              		.cfi_def_cfa_offset 16
 2474              		.loc 1 701 3 view .LVU491
 2475 0004 0021     		movs	r1, #0
 2476 0006 0091     		str	r1, [sp]
ARM GAS  /tmp/ccSLcNfJ.s 			page 59


 2477 0008 0846     		mov	r0, r1
 2478 000a BC23     		movs	r3, #188
 2479 000c 4FF4C872 		mov	r2, #400
 2480 0010 044C     		ldr	r4, .L239
 2481 0012 A047     		blx	r4
 2482              	.LVL211:
 702:src/lcd.c     ****   show_disp();
 2483              		.loc 1 702 3 is_stmt 1 view .LVU492
 2484 0014 FFF7FEFF 		bl	show_disp
 2485              	.LVL212:
 703:src/lcd.c     ****   lcd_refresh();
 2486              		.loc 1 703 3 view .LVU493
 2487 0018 034B     		ldr	r3, .L239+4
 704:src/lcd.c     **** }
 2488              		.loc 1 704 1 is_stmt 0 view .LVU494
 2489 001a 02B0     		add	sp, sp, #8
 2490              		.cfi_def_cfa_offset 8
 2491              		@ sp needed
 2492 001c BDE81040 		pop	{r4, lr}
 2493              		.cfi_restore 14
 2494              		.cfi_restore 4
 2495              		.cfi_def_cfa_offset 0
 703:src/lcd.c     ****   lcd_refresh();
 2496              		.loc 1 703 3 view .LVU495
 2497 0020 1847     		bx	r3	@ indirect register sibling call
 2498              	.LVL213:
 2499              	.L240:
 2500 0022 00BF     		.align	2
 2501              	.L239:
 2502 0024 3D020008 		.word	134218301
 2503 0028 31020008 		.word	134218289
 2504              		.cfi_endproc
 2505              	.LFE29:
 2507              		.section	.text.finish_RPN,"ax",%progbits
 2508              		.align	1
 2509              		.p2align 2,,3
 2510              		.global	finish_RPN
 2511              		.syntax unified
 2512              		.thumb
 2513              		.thumb_func
 2514              		.fpu fpv4-sp-d16
 2516              	finish_RPN:
 2517              	.LFB30:
 705:src/lcd.c     **** void finish_RPN(void) {//only refreshes the RPN flag
 2518              		.loc 1 705 23 is_stmt 1 view -0
 2519              		.cfi_startproc
 2520              		@ args = 0, pretend = 0, frame = 0
 2521              		@ frame_needed = 0, uses_anonymous_args = 0
 706:src/lcd.c     ****   t20->inv = !dots[RPN];
 2522              		.loc 1 706 3 view .LVU497
 705:src/lcd.c     **** void finish_RPN(void) {//only refreshes the RPN flag
 2523              		.loc 1 705 23 is_stmt 0 view .LVU498
 2524 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2525              		.cfi_def_cfa_offset 24
 2526              		.cfi_offset 4, -24
 2527              		.cfi_offset 5, -20
 2528              		.cfi_offset 6, -16
ARM GAS  /tmp/ccSLcNfJ.s 			page 60


 2529              		.cfi_offset 7, -12
 2530              		.cfi_offset 8, -8
 2531              		.cfi_offset 14, -4
 2532              		.loc 1 706 19 view .LVU499
 2533 0004 114F     		ldr	r7, .L243
 2534              		.loc 1 706 3 view .LVU500
 2535 0006 124C     		ldr	r4, .L243+4
 2536              		.loc 1 706 14 view .LVU501
 2537 0008 97F88D30 		ldrb	r3, [r7, #141]	@ zero_extendqisi2
 2538              		.loc 1 706 3 view .LVU502
 2539 000c 206B     		ldr	r0, [r4, #48]
 707:src/lcd.c     **** #ifdef BIGGER_DISPLAY
 708:src/lcd.c     ****   lcd_setXY (t20, 365, 75-30); // 70 is y_ann
 2540              		.loc 1 708 3 view .LVU503
 2541 000e 114E     		ldr	r6, .L243+8
 709:src/lcd.c     **** #else
 710:src/lcd.c     ****   lcd_setXY (t20, 365, 130-30); // 130 is y_ann
 711:src/lcd.c     **** #endif
 712:src/lcd.c     ****   lcd_writeText(t20, "RPN");
 2542              		.loc 1 712 3 view .LVU504
 2543 0010 114D     		ldr	r5, .L243+12
 706:src/lcd.c     **** #ifdef BIGGER_DISPLAY
 2544              		.loc 1 706 14 view .LVU505
 2545 0012 B3FA83F3 		clz	r3, r3
 2546 0016 5B09     		lsrs	r3, r3, #5
 2547 0018 4374     		strb	r3, [r0, #17]
 708:src/lcd.c     **** #else
 2548              		.loc 1 708 3 is_stmt 1 view .LVU506
 2549 001a 2D22     		movs	r2, #45
 2550 001c 40F26D11 		movw	r1, #365
 2551 0020 B047     		blx	r6
 2552              	.LVL214:
 2553              		.loc 1 712 3 view .LVU507
 2554 0022 206B     		ldr	r0, [r4, #48]
 2555 0024 0D49     		ldr	r1, .L243+16
 2556 0026 A847     		blx	r5
 2557              	.LVL215:
 713:src/lcd.c     ****   t20->inv = !dots[RCL_annun];
 2558              		.loc 1 713 3 view .LVU508
 2559              		.loc 1 713 14 is_stmt 0 view .LVU509
 2560 0028 97F88A30 		ldrb	r3, [r7, #138]	@ zero_extendqisi2
 2561              		.loc 1 713 3 view .LVU510
 2562 002c 206B     		ldr	r0, [r4, #48]
 2563              		.loc 1 713 14 view .LVU511
 2564 002e B3FA83F3 		clz	r3, r3
 2565 0032 5B09     		lsrs	r3, r3, #5
 2566 0034 4374     		strb	r3, [r0, #17]
 714:src/lcd.c     **** #ifdef BIGGER_DISPLAY
 715:src/lcd.c     ****   lcd_setXY (t20, 365, 75-50); // 70 is y_ann
 2567              		.loc 1 715 3 is_stmt 1 view .LVU512
 2568 0036 1922     		movs	r2, #25
 2569 0038 40F26D11 		movw	r1, #365
 2570 003c B047     		blx	r6
 2571              	.LVL216:
 716:src/lcd.c     **** #else
 717:src/lcd.c     ****   lcd_setXY (t20, 365, 130-50); // 130 is y_ann
 718:src/lcd.c     **** #endif
ARM GAS  /tmp/ccSLcNfJ.s 			page 61


 719:src/lcd.c     ****   lcd_writeText(t20, "RUN");
 2572              		.loc 1 719 3 view .LVU513
 2573 003e 206B     		ldr	r0, [r4, #48]
 2574 0040 0749     		ldr	r1, .L243+20
 2575 0042 A847     		blx	r5
 2576              	.LVL217:
 720:src/lcd.c     ****   lcd_refresh();
 2577              		.loc 1 720 3 view .LVU514
 721:src/lcd.c     **** }
 2578              		.loc 1 721 1 is_stmt 0 view .LVU515
 2579 0044 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2580              		.cfi_restore 14
 2581              		.cfi_restore 8
 2582              		.cfi_restore 7
 2583              		.cfi_restore 6
 2584              		.cfi_restore 5
 2585              		.cfi_restore 4
 2586              		.cfi_def_cfa_offset 0
 720:src/lcd.c     ****   lcd_refresh();
 2587              		.loc 1 720 3 view .LVU516
 2588 0048 064B     		ldr	r3, .L243+24
 2589 004a 1847     		bx	r3	@ indirect register sibling call
 2590              	.LVL218:
 2591              	.L244:
 2592              		.align	2
 2593              	.L243:
 2594 004c 00000000 		.word	.LANCHOR0
 2595 0050 00200010 		.word	268443648
 2596 0054 6D020008 		.word	134218349
 2597 0058 7D020008 		.word	134218365
 2598 005c 2C000000 		.word	.LC9
 2599 0060 20000000 		.word	.LC6
 2600 0064 31020008 		.word	134218289
 2601              		.cfi_endproc
 2602              	.LFE30:
 2604              		.section	.text.do_all_dots,"ax",%progbits
 2605              		.align	1
 2606              		.p2align 2,,3
 2607              		.global	do_all_dots
 2608              		.syntax unified
 2609              		.thumb
 2610              		.thumb_func
 2611              		.fpu fpv4-sp-d16
 2613              	do_all_dots:
 2614              	.LFB31:
 722:src/lcd.c     **** 
 723:src/lcd.c     **** extern void all_menu_dots (void);
 724:src/lcd.c     **** 
 725:src/lcd.c     **** void do_all_dots(void) {
 2615              		.loc 1 725 24 is_stmt 1 view -0
 2616              		.cfi_startproc
 2617              		@ args = 0, pretend = 0, frame = 0
 2618              		@ frame_needed = 0, uses_anonymous_args = 0
 726:src/lcd.c     ****   for (int i=0; i<TOP_DOTS; i++) {
 2619              		.loc 1 726 3 view .LVU518
 2620              	.LBB85:
 2621              		.loc 1 726 8 view .LVU519
ARM GAS  /tmp/ccSLcNfJ.s 			page 62


 2622              	.LVL219:
 2623              		.loc 1 726 17 view .LVU520
 2624              	.LBE85:
 725:src/lcd.c     ****   for (int i=0; i<TOP_DOTS; i++) {
 2625              		.loc 1 725 24 is_stmt 0 view .LVU521
 2626 0000 08B5     		push	{r3, lr}
 2627              		.cfi_def_cfa_offset 8
 2628              		.cfi_offset 3, -8
 2629              		.cfi_offset 14, -4
 2630 0002 094B     		ldr	r3, .L249
 2631              	.LBB90:
 2632              	.LBB86:
 2633              	.LBB87:
  58:src/lcd.c     **** }
 2634              		.loc 1 58 17 view .LVU522
 2635 0004 0121     		movs	r1, #1
 2636 0006 03F55372 		add	r2, r3, #844
 2637              	.LVL220:
 2638              	.L246:
  58:src/lcd.c     **** }
 2639              		.loc 1 58 17 view .LVU523
 2640              	.LBE87:
 2641              	.LBE86:
 727:src/lcd.c     ****     set_dot(i);
 2642              		.loc 1 727 5 is_stmt 1 view .LVU524
 2643              	.LBB89:
 2644              	.LBI86:
  57:src/lcd.c     ****         dots[n] = 1;
 2645              		.loc 1 57 6 view .LVU525
 2646              	.LBB88:
  58:src/lcd.c     **** }
 2647              		.loc 1 58 9 view .LVU526
  58:src/lcd.c     **** }
 2648              		.loc 1 58 17 is_stmt 0 view .LVU527
 2649 000a 03F8011F 		strb	r1, [r3, #1]!
 2650              	.LVL221:
  58:src/lcd.c     **** }
 2651              		.loc 1 58 17 view .LVU528
 2652              	.LBE88:
 2653              	.LBE89:
 726:src/lcd.c     ****     set_dot(i);
 2654              		.loc 1 726 29 is_stmt 1 view .LVU529
 726:src/lcd.c     ****     set_dot(i);
 2655              		.loc 1 726 17 view .LVU530
 726:src/lcd.c     ****     set_dot(i);
 2656              		.loc 1 726 3 is_stmt 0 view .LVU531
 2657 000e 9342     		cmp	r3, r2
 2658 0010 FBD1     		bne	.L246
 2659              	.LBE90:
 728:src/lcd.c     ****   }
 729:src/lcd.c     ****   all_menu_dots();
 2660              		.loc 1 729 3 is_stmt 1 view .LVU532
 2661 0012 FFF7FEFF 		bl	all_menu_dots
 2662              	.LVL222:
 730:src/lcd.c     ****   finish_display();
 2663              		.loc 1 730 3 view .LVU533
 2664 0016 FFF7FEFF 		bl	finish_display
ARM GAS  /tmp/ccSLcNfJ.s 			page 63


 2665              	.LVL223:
 731:src/lcd.c     ****   clr_dot(RCL_annun);
 2666              		.loc 1 731 3 view .LVU534
 2667              	.LBB91:
 2668              	.LBI91:
  60:src/lcd.c     ****         dots[n] = 0;
 2669              		.loc 1 60 6 view .LVU535
 2670              	.LBB92:
  61:src/lcd.c     **** }
 2671              		.loc 1 61 9 view .LVU536
  61:src/lcd.c     **** }
 2672              		.loc 1 61 17 is_stmt 0 view .LVU537
 2673 001a 044B     		ldr	r3, .L249+4
 2674 001c 0022     		movs	r2, #0
 2675 001e 83F88A20 		strb	r2, [r3, #138]
 2676              	.LVL224:
  61:src/lcd.c     **** }
 2677              		.loc 1 61 17 view .LVU538
 2678              	.LBE92:
 2679              	.LBE91:
 732:src/lcd.c     ****   clr_dot(LIT_EQ);
 2680              		.loc 1 732 3 is_stmt 1 view .LVU539
 2681              	.LBB93:
 2682              	.LBI93:
  60:src/lcd.c     ****         dots[n] = 0;
 2683              		.loc 1 60 6 view .LVU540
 2684              	.LBB94:
  61:src/lcd.c     **** }
 2685              		.loc 1 61 9 view .LVU541
  61:src/lcd.c     **** }
 2686              		.loc 1 61 17 is_stmt 0 view .LVU542
 2687 0022 83F88420 		strb	r2, [r3, #132]
 2688              	.LVL225:
  61:src/lcd.c     **** }
 2689              		.loc 1 61 17 view .LVU543
 2690              	.LBE94:
 2691              	.LBE93:
 733:src/lcd.c     **** }
 2692              		.loc 1 733 1 view .LVU544
 2693 0026 08BD     		pop	{r3, pc}
 2694              	.L250:
 2695              		.align	2
 2696              	.L249:
 2697 0028 FFFFFFFF 		.word	.LANCHOR0-1
 2698 002c 00000000 		.word	.LANCHOR0
 2699              		.cfi_endproc
 2700              	.LFE31:
 2702              		.section	.text.show_progtrace,"ax",%progbits
 2703              		.align	1
 2704              		.p2align 2,,3
 2705              		.global	show_progtrace
 2706              		.syntax unified
 2707              		.thumb
 2708              		.thumb_func
 2709              		.fpu fpv4-sp-d16
 2711              	show_progtrace:
 2712              	.LVL226:
ARM GAS  /tmp/ccSLcNfJ.s 			page 64


 2713              	.LFB32:
 734:src/lcd.c     **** #endif
 735:src/lcd.c     **** 
 736:src/lcd.c     **** #ifdef CONSOLE
 737:src/lcd.c     **** #ifndef DM42
 738:src/lcd.c     **** /* Take a string and cleanse all non-printing characters from it.
 739:src/lcd.c     ****  * Replace them with the usual [xxx] sequences.
 740:src/lcd.c     ****  */
 741:src/lcd.c     **** extern const char *pretty(unsigned char);
 742:src/lcd.c     **** 
 743:src/lcd.c     **** static char *cleanse(const char *s) {
 744:src/lcd.c     ****         static char res[50];
 745:src/lcd.c     ****         char *p;
 746:src/lcd.c     **** 
 747:src/lcd.c     ****         for (p=res; *s != '\0'; s++) {
 748:src/lcd.c     ****                 unsigned char c = 0xff & *s;
 749:src/lcd.c     ****                 const char *m = pretty(c);
 750:src/lcd.c     ****                 if (m == NULL) {
 751:src/lcd.c     ****                         *p++ = c;
 752:src/lcd.c     ****                 } else {
 753:src/lcd.c     ****                         *p++ = '[';
 754:src/lcd.c     ****                         p = scopy_char(p, m, ']');
 755:src/lcd.c     ****                 }
 756:src/lcd.c     ****         }
 757:src/lcd.c     ****         *p = '\0';
 758:src/lcd.c     ****         return res;
 759:src/lcd.c     **** }
 760:src/lcd.c     **** #endif
 761:src/lcd.c     **** #endif
 762:src/lcd.c     **** 
 763:src/lcd.c     **** void show_progtrace(char *buf) {
 2714              		.loc 1 763 32 is_stmt 1 view -0
 2715              		.cfi_startproc
 2716              		@ args = 0, pretend = 0, frame = 0
 2717              		@ frame_needed = 0, uses_anonymous_args = 0
 2718              		@ link register save eliminated.
 764:src/lcd.c     **** #ifndef DM42
 765:src/lcd.c     **** #ifdef CONSOLE
 766:src/lcd.c     ****         int pc = state_pc();
 767:src/lcd.c     **** 
 768:src/lcd.c     **** #ifdef USECURSES
 769:src/lcd.c     ****         int i;
 770:src/lcd.c     **** 
 771:src/lcd.c     ****         if (!State2.flags)
 772:src/lcd.c     ****                 return;
 773:src/lcd.c     **** 
 774:src/lcd.c     ****         for (i=4; i>0 && pc >= 0; i--) {
 775:src/lcd.c     ****                 MOVE(0, i);
 776:src/lcd.c     ****                 if (pc) {
 777:src/lcd.c     ****                         opcode op = getprog(pc);
 778:src/lcd.c     ****                         PRINTF("%03d %08x: %s", pc, op, cleanse(prt(op, buf)));
 779:src/lcd.c     ****                 } else
 780:src/lcd.c     ****                         PRINTF("000:");
 781:src/lcd.c     ****                 pc = do_dec(pc, 1);
 782:src/lcd.c     ****         }
 783:src/lcd.c     **** #endif
 784:src/lcd.c     **** #endif
ARM GAS  /tmp/ccSLcNfJ.s 			page 65


 785:src/lcd.c     **** #endif       
 786:src/lcd.c     **** }
 2719              		.loc 1 786 1 view .LVU546
 2720 0000 7047     		bx	lr
 2721              		.cfi_endproc
 2722              	.LFE32:
 2724 0002 00BF     		.section	.bss.dots,"aw",%nobits
 2725              		.align	2
 2726              		.set	.LANCHOR0,. + 0
 2729              	dots:
 2730 0000 00000000 		.space	844
 2730      00000000 
 2730      00000000 
 2730      00000000 
 2730      00000000 
 2731              		.text
 2732              	.Letext0:
 2733              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 2734              		.file 3 "dmcp/ff_ifc.h"
 2735              		.file 4 "dmcp/dmcp.h"
 2736              		.file 5 "src/decNumber/decContext.h"
 2737              		.file 6 "src/decNumber/decNumber.h"
 2738              		.file 7 "src/decNumber/decimal64.h"
 2739              		.file 8 "src/decNumber/decimal128.h"
 2740              		.file 9 "src/xeq.h"
 2741              		.file 10 "src/data.h"
 2742              		.file 11 "src/display.h"
 2743              		.file 12 "src/storage.h"
 2744              		.file 13 "src/pretty.h"
ARM GAS  /tmp/ccSLcNfJ.s 			page 66


DEFINED SYMBOLS
                            *ABS*:0000000000000000 lcd.c
     /tmp/ccSLcNfJ.s:18     .text.set_dot:0000000000000000 $t
     /tmp/ccSLcNfJ.s:27     .text.set_dot:0000000000000000 set_dot
     /tmp/ccSLcNfJ.s:46     .text.set_dot:0000000000000008 $d
     /tmp/ccSLcNfJ.s:51     .text.clr_dot:0000000000000000 $t
     /tmp/ccSLcNfJ.s:59     .text.clr_dot:0000000000000000 clr_dot
     /tmp/ccSLcNfJ.s:77     .text.clr_dot:0000000000000008 $d
     /tmp/ccSLcNfJ.s:82     .text.is_dot:0000000000000000 $t
     /tmp/ccSLcNfJ.s:90     .text.is_dot:0000000000000000 is_dot
     /tmp/ccSLcNfJ.s:109    .text.is_dot:0000000000000008 $d
     /tmp/ccSLcNfJ.s:114    .text.setuptty:0000000000000000 $t
     /tmp/ccSLcNfJ.s:122    .text.setuptty:0000000000000000 setuptty
     /tmp/ccSLcNfJ.s:140    .text.reset_disp:0000000000000000 $t
     /tmp/ccSLcNfJ.s:148    .text.reset_disp:0000000000000000 reset_disp
     /tmp/ccSLcNfJ.s:346    .text.reset_disp:0000000000000068 $d
     /tmp/ccSLcNfJ.s:351    .text.left_side:0000000000000000 $t
     /tmp/ccSLcNfJ.s:359    .text.left_side:0000000000000000 left_side
     /tmp/ccSLcNfJ.s:442    .text.left_side:0000000000000054 $d
     /tmp/ccSLcNfJ.s:447    .text.left_side_top:0000000000000000 $t
     /tmp/ccSLcNfJ.s:455    .text.left_side_top:0000000000000000 left_side_top
     /tmp/ccSLcNfJ.s:471    .text.left_side_bottom:0000000000000000 $t
     /tmp/ccSLcNfJ.s:479    .text.left_side_bottom:0000000000000000 left_side_bottom
     /tmp/ccSLcNfJ.s:501    .text.right_side:0000000000000000 $t
     /tmp/ccSLcNfJ.s:509    .text.right_side:0000000000000000 right_side
     /tmp/ccSLcNfJ.s:591    .text.right_side:000000000000005c $d
     /tmp/ccSLcNfJ.s:596    .text.right_side_top:0000000000000000 $t
     /tmp/ccSLcNfJ.s:604    .text.right_side_top:0000000000000000 right_side_top
     /tmp/ccSLcNfJ.s:620    .text.right_side_bottom:0000000000000000 $t
     /tmp/ccSLcNfJ.s:628    .text.right_side_bottom:0000000000000000 right_side_bottom
     /tmp/ccSLcNfJ.s:650    .text.top:0000000000000000 $t
     /tmp/ccSLcNfJ.s:658    .text.top:0000000000000000 top
     /tmp/ccSLcNfJ.s:725    .text.top:0000000000000040 $d
     /tmp/ccSLcNfJ.s:730    .text.middle:0000000000000000 $t
     /tmp/ccSLcNfJ.s:738    .text.middle:0000000000000000 middle
     /tmp/ccSLcNfJ.s:808    .text.middle:0000000000000040 $d
     /tmp/ccSLcNfJ.s:814    .text.bottom:0000000000000000 $t
     /tmp/ccSLcNfJ.s:822    .text.bottom:0000000000000000 bottom
     /tmp/ccSLcNfJ.s:892    .text.bottom:0000000000000048 $d
     /tmp/ccSLcNfJ.s:897    .text.decimal:0000000000000000 $t
     /tmp/ccSLcNfJ.s:905    .text.decimal:0000000000000000 decimal
     /tmp/ccSLcNfJ.s:942    .text.decimal:0000000000000018 $d
     /tmp/ccSLcNfJ.s:947    .text.comma:0000000000000000 $t
     /tmp/ccSLcNfJ.s:955    .text.comma:0000000000000000 comma
     /tmp/ccSLcNfJ.s:1009   .text.comma:000000000000002c $d
     /tmp/ccSLcNfJ.s:1014   .text.exp_left_side:0000000000000000 $t
     /tmp/ccSLcNfJ.s:1022   .text.exp_left_side:0000000000000000 exp_left_side
     /tmp/ccSLcNfJ.s:1089   .text.exp_left_side:0000000000000040 $d
     /tmp/ccSLcNfJ.s:1094   .text.exp_left_side_top:0000000000000000 $t
     /tmp/ccSLcNfJ.s:1102   .text.exp_left_side_top:0000000000000000 exp_left_side_top
     /tmp/ccSLcNfJ.s:1121   .text.exp_left_side_bottom:0000000000000000 $t
     /tmp/ccSLcNfJ.s:1129   .text.exp_left_side_bottom:0000000000000000 exp_left_side_bottom
     /tmp/ccSLcNfJ.s:1148   .text.exp_right_side:0000000000000000 $t
     /tmp/ccSLcNfJ.s:1156   .text.exp_right_side:0000000000000000 exp_right_side
     /tmp/ccSLcNfJ.s:1223   .text.exp_right_side:0000000000000044 $d
     /tmp/ccSLcNfJ.s:1228   .text.exp_right_side_top:0000000000000000 $t
     /tmp/ccSLcNfJ.s:1236   .text.exp_right_side_top:0000000000000000 exp_right_side_top
ARM GAS  /tmp/ccSLcNfJ.s 			page 67


     /tmp/ccSLcNfJ.s:1252   .text.exp_right_side_bottom:0000000000000000 $t
     /tmp/ccSLcNfJ.s:1260   .text.exp_right_side_bottom:0000000000000000 exp_right_side_bottom
     /tmp/ccSLcNfJ.s:1282   .text.exp_top:0000000000000000 $t
     /tmp/ccSLcNfJ.s:1290   .text.exp_top:0000000000000000 exp_top
     /tmp/ccSLcNfJ.s:1349   .text.exp_top:0000000000000034 $d
     /tmp/ccSLcNfJ.s:1354   .text.exp_bottom:0000000000000000 $t
     /tmp/ccSLcNfJ.s:1362   .text.exp_bottom:0000000000000000 exp_bottom
     /tmp/ccSLcNfJ.s:1424   .text.exp_bottom:0000000000000038 $d
     /tmp/ccSLcNfJ.s:1429   .text.exp_middle:0000000000000000 $t
     /tmp/ccSLcNfJ.s:1437   .text.exp_middle:0000000000000000 exp_middle
     /tmp/ccSLcNfJ.s:1503   .text.exp_middle:0000000000000040 $d
     /tmp/ccSLcNfJ.s:1508   .rodata.show_disp.str1.4:0000000000000000 $d
     /tmp/ccSLcNfJ.s:1539   .text.show_disp:0000000000000000 $t
     /tmp/ccSLcNfJ.s:1547   .text.show_disp:0000000000000000 show_disp
     /tmp/ccSLcNfJ.s:1788   .text.show_disp:00000000000000c4 $d
     /tmp/ccSLcNfJ.s:1792   .text.show_disp:00000000000000cc $t
     /tmp/ccSLcNfJ.s:2333   .text.show_disp:0000000000000398 $d
     /tmp/ccSLcNfJ.s:2351   .text.show_disp:00000000000003d4 $t
     /tmp/ccSLcNfJ.s:2386   .text.show_disp:0000000000000408 $d
     /tmp/ccSLcNfJ.s:2393   .text.show_stack:0000000000000000 $t
     /tmp/ccSLcNfJ.s:2401   .text.show_stack:0000000000000000 show_stack
     /tmp/ccSLcNfJ.s:2412   .text.show_flags:0000000000000000 $t
     /tmp/ccSLcNfJ.s:2420   .text.show_flags:0000000000000000 show_flags
     /tmp/ccSLcNfJ.s:2431   .text.wait_for_display:0000000000000000 $t
     /tmp/ccSLcNfJ.s:2439   .text.wait_for_display:0000000000000000 wait_for_display
     /tmp/ccSLcNfJ.s:2452   .text.finish_display:0000000000000000 $t
     /tmp/ccSLcNfJ.s:2460   .text.finish_display:0000000000000000 finish_display
     /tmp/ccSLcNfJ.s:2502   .text.finish_display:0000000000000024 $d
     /tmp/ccSLcNfJ.s:2508   .text.finish_RPN:0000000000000000 $t
     /tmp/ccSLcNfJ.s:2516   .text.finish_RPN:0000000000000000 finish_RPN
     /tmp/ccSLcNfJ.s:2594   .text.finish_RPN:000000000000004c $d
     /tmp/ccSLcNfJ.s:2605   .text.do_all_dots:0000000000000000 $t
     /tmp/ccSLcNfJ.s:2613   .text.do_all_dots:0000000000000000 do_all_dots
     /tmp/ccSLcNfJ.s:2697   .text.do_all_dots:0000000000000028 $d
     /tmp/ccSLcNfJ.s:2703   .text.show_progtrace:0000000000000000 $t
     /tmp/ccSLcNfJ.s:2711   .text.show_progtrace:0000000000000000 show_progtrace
     /tmp/ccSLcNfJ.s:2725   .bss.dots:0000000000000000 $d
     /tmp/ccSLcNfJ.s:2729   .bss.dots:0000000000000000 dots

UNDEFINED SYMBOLS
dot
main_ram
all_menu_dots

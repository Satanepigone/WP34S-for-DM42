ARM GAS  /tmp/cccOP6XM.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"lcd.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_dot,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.global	set_dot
  21              		.arch armv7e-m
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  25              		.fpu fpv4-sp-d16
  27              	set_dot:
  28              	.LVL0:
  29              	.LFB0:
  30              		.file 1 "src/lcd.c"
   1:src/lcd.c     **** /* This file is part of 34S.
   2:src/lcd.c     ****  * 
   3:src/lcd.c     ****  * 34S is free software: you can redistribute it and/or modify
   4:src/lcd.c     ****  * it under the terms of the GNU General Public License as published by
   5:src/lcd.c     ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/lcd.c     ****  * (at your option) any later version.
   7:src/lcd.c     ****  * 
   8:src/lcd.c     ****  * 34S is distributed in the hope that it will be useful,
   9:src/lcd.c     ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/lcd.c     ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/lcd.c     ****  * GNU General Public License for more details.
  12:src/lcd.c     ****  * 
  13:src/lcd.c     ****  * You should have received a copy of the GNU General Public License
  14:src/lcd.c     ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/lcd.c     ****  */
  16:src/lcd.c     **** 
  17:src/lcd.c     **** #ifdef DM42
  18:src/lcd.c     **** #include "dmcp.h"
  19:src/lcd.c     **** #endif
  20:src/lcd.c     **** 
  21:src/lcd.c     **** #define DM42SAFE
  22:src/lcd.c     **** #include "lcd.h"
  23:src/lcd.c     **** #include "display.h"
  24:src/lcd.c     **** #include "xeq.h"
  25:src/lcd.c     **** #undef DM42SAFE
  26:src/lcd.c     **** 
  27:src/lcd.c     **** #include "pretty.h"
  28:src/lcd.c     **** 
ARM GAS  /tmp/cccOP6XM.s 			page 2


  29:src/lcd.c     **** 
  30:src/lcd.c     **** #if defined(USECURSES) || defined(DM42) // want this in DM42
  31:src/lcd.c     **** static unsigned char dots[MAX_DOTS];
  32:src/lcd.c     **** #endif
  33:src/lcd.c     **** 
  34:src/lcd.c     **** #if defined(USECURSES) && !defined(DM42)
  35:src/lcd.c     **** static void dispreg(const char n, int index) {
  36:src/lcd.c     ****   char buf[64];
  37:src/lcd.c     ****         if (is_intmode())
  38:src/lcd.c     ****                 sprintf(buf, "%llx", (unsigned long long int)get_reg_n_int(index));
  39:src/lcd.c     ****         else {
  40:src/lcd.c     **** 		if (is_dblmode())
  41:src/lcd.c     **** 			decimal128ToString(&(get_reg_n(index)->d), buf);
  42:src/lcd.c     **** 		else
  43:src/lcd.c     **** 			decimal64ToString(&(get_reg_n(index)->s), buf);
  44:src/lcd.c     **** 	}
  45:src/lcd.c     ****         PRINTF("%c: %s", n, buf);
  46:src/lcd.c     **** }
  47:src/lcd.c     **** #endif
  48:src/lcd.c     **** 
  49:src/lcd.c     **** #if defined(USECURSES) || defined(DM42) // want this in DM42
  50:src/lcd.c     **** /* Some wrapper routines to set segments of the display */
  51:src/lcd.c     **** void set_dot(int n) {
  31              		.loc 1 51 21 view -0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 0
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  35              		@ link register save eliminated.
  52:src/lcd.c     ****         dots[n] = 1;
  36              		.loc 1 52 9 view .LVU1
  37              		.loc 1 52 17 is_stmt 0 view .LVU2
  38 0000 014B     		ldr	r3, .L3
  39 0002 0122     		movs	r2, #1
  40 0004 1A54     		strb	r2, [r3, r0]
  53:src/lcd.c     **** }
  41              		.loc 1 53 1 view .LVU3
  42 0006 7047     		bx	lr
  43              	.L4:
  44              		.align	2
  45              	.L3:
  46 0008 00000000 		.word	.LANCHOR0
  47              		.cfi_endproc
  48              	.LFE0:
  50              		.section	.text.clr_dot,"ax",%progbits
  51              		.align	1
  52              		.p2align 2,,3
  53              		.global	clr_dot
  54              		.syntax unified
  55              		.thumb
  56              		.thumb_func
  57              		.fpu fpv4-sp-d16
  59              	clr_dot:
  60              	.LVL1:
  61              	.LFB1:
  54:src/lcd.c     **** void clr_dot(int n) {
  62              		.loc 1 54 21 is_stmt 1 view -0
  63              		.cfi_startproc
ARM GAS  /tmp/cccOP6XM.s 			page 3


  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  55:src/lcd.c     ****         dots[n] = 0;
  67              		.loc 1 55 9 view .LVU5
  68              		.loc 1 55 17 is_stmt 0 view .LVU6
  69 0000 014B     		ldr	r3, .L6
  70 0002 0022     		movs	r2, #0
  71 0004 1A54     		strb	r2, [r3, r0]
  56:src/lcd.c     **** }
  72              		.loc 1 56 1 view .LVU7
  73 0006 7047     		bx	lr
  74              	.L7:
  75              		.align	2
  76              	.L6:
  77 0008 00000000 		.word	.LANCHOR0
  78              		.cfi_endproc
  79              	.LFE1:
  81              		.section	.text.is_dot,"ax",%progbits
  82              		.align	1
  83              		.p2align 2,,3
  84              		.global	is_dot
  85              		.syntax unified
  86              		.thumb
  87              		.thumb_func
  88              		.fpu fpv4-sp-d16
  90              	is_dot:
  91              	.LVL2:
  92              	.LFB2:
  57:src/lcd.c     **** int is_dot(int n) {
  93              		.loc 1 57 19 is_stmt 1 view -0
  94              		.cfi_startproc
  95              		@ args = 0, pretend = 0, frame = 0
  96              		@ frame_needed = 0, uses_anonymous_args = 0
  97              		@ link register save eliminated.
  58:src/lcd.c     **** 	return dots[n];
  98              		.loc 1 58 2 view .LVU9
  99              		.loc 1 58 13 is_stmt 0 view .LVU10
 100 0000 014B     		ldr	r3, .L9
  59:src/lcd.c     **** }
 101              		.loc 1 59 1 view .LVU11
 102 0002 185C     		ldrb	r0, [r3, r0]	@ zero_extendqisi2
 103              	.LVL3:
 104              		.loc 1 59 1 view .LVU12
 105 0004 7047     		bx	lr
 106              	.L10:
 107 0006 00BF     		.align	2
 108              	.L9:
 109 0008 00000000 		.word	.LANCHOR0
 110              		.cfi_endproc
 111              	.LFE2:
 113              		.section	.text.setuptty,"ax",%progbits
 114              		.align	1
 115              		.p2align 2,,3
 116              		.global	setuptty
 117              		.syntax unified
 118              		.thumb
ARM GAS  /tmp/cccOP6XM.s 			page 4


 119              		.thumb_func
 120              		.fpu fpv4-sp-d16
 122              	setuptty:
 123              	.LVL4:
 124              	.LFB3:
  60:src/lcd.c     **** #endif
  61:src/lcd.c     **** 
  62:src/lcd.c     **** int setuptty(int reset) {
 125              		.loc 1 62 25 is_stmt 1 view -0
 126              		.cfi_startproc
 127              		@ args = 0, pretend = 0, frame = 0
 128              		@ frame_needed = 0, uses_anonymous_args = 0
 129              		@ link register save eliminated.
  63:src/lcd.c     **** #ifdef CONSOLE
  64:src/lcd.c     **** #if defined(USECURSES) && !defined(DM42) //don't want this in DM42
  65:src/lcd.c     ****         if (reset)
  66:src/lcd.c     ****                 endwin();
  67:src/lcd.c     ****         else {
  68:src/lcd.c     ****                 initscr();
  69:src/lcd.c     ****                 cbreak();
  70:src/lcd.c     ****                 noecho();
  71:src/lcd.c     ****                 //keypad(stdscr, TRUE);
  72:src/lcd.c     **** 				}
  73:src/lcd.c     **** #endif
  74:src/lcd.c     **** #endif
  75:src/lcd.c     ****         return 0;
 130              		.loc 1 75 9 view .LVU14
  76:src/lcd.c     **** }
 131              		.loc 1 76 1 is_stmt 0 view .LVU15
 132 0000 0020     		movs	r0, #0
 133              	.LVL5:
 134              		.loc 1 76 1 view .LVU16
 135 0002 7047     		bx	lr
 136              		.cfi_endproc
 137              	.LFE3:
 139              		.section	.text.reset_disp,"ax",%progbits
 140              		.align	1
 141              		.p2align 2,,3
 142              		.global	reset_disp
 143              		.syntax unified
 144              		.thumb
 145              		.thumb_func
 146              		.fpu fpv4-sp-d16
 148              	reset_disp:
 149              	.LFB4:
  77:src/lcd.c     **** 
  78:src/lcd.c     **** 
  79:src/lcd.c     **** void reset_disp(void) {
 150              		.loc 1 79 23 is_stmt 1 view -0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 0, uses_anonymous_args = 0
  80:src/lcd.c     **** #ifdef DM42
  81:src/lcd.c     **** 	int rcl = is_dot(RCL_annun);
 154              		.loc 1 81 2 view .LVU18
 155              	.LVL6:
 156              	.LBB37:
ARM GAS  /tmp/cccOP6XM.s 			page 5


 157              	.LBI37:
  57:src/lcd.c     **** 	return dots[n];
 158              		.loc 1 57 5 view .LVU19
 159              	.LBB38:
  58:src/lcd.c     **** }
 160              		.loc 1 58 2 view .LVU20
 161              	.LBE38:
 162              	.LBE37:
  79:src/lcd.c     **** #ifdef DM42
 163              		.loc 1 79 23 is_stmt 0 view .LVU21
 164 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 165              		.cfi_def_cfa_offset 32
 166              		.cfi_offset 4, -32
 167              		.cfi_offset 5, -28
 168              		.cfi_offset 6, -24
 169              		.cfi_offset 7, -20
 170              		.cfi_offset 8, -16
 171              		.cfi_offset 9, -12
 172              		.cfi_offset 10, -8
 173              		.cfi_offset 14, -4
 174              	.LBB41:
 175              	.LBB39:
  58:src/lcd.c     **** }
 176              		.loc 1 58 13 view .LVU22
 177 0004 1848     		ldr	r0, .L20
 178              	.LBE39:
 179              	.LBE41:
 180              	.LBB42:
 181              	.LBB43:
 182 0006 6FF08303 		mvn	r3, #131
 183              	.LBE43:
 184              	.LBE42:
 185              	.LBB45:
 186              	.LBB40:
 187 000a 90F88A10 		ldrb	r1, [r0, #138]	@ zero_extendqisi2
 188              	.LVL7:
  58:src/lcd.c     **** }
 189              		.loc 1 58 13 view .LVU23
 190              	.LBE40:
 191              	.LBE45:
  82:src/lcd.c     **** 	int bat = is_dot(BATTERY);
 192              		.loc 1 82 2 is_stmt 1 view .LVU24
 193              	.LBB46:
 194              	.LBI46:
  57:src/lcd.c     **** 	return dots[n];
 195              		.loc 1 57 5 view .LVU25
 196              	.LBB47:
  58:src/lcd.c     **** }
 197              		.loc 1 58 2 view .LVU26
  58:src/lcd.c     **** }
 198              		.loc 1 58 13 is_stmt 0 view .LVU27
 199 000e 90F887A0 		ldrb	r10, [r0, #135]	@ zero_extendqisi2
 200              	.LVL8:
  58:src/lcd.c     **** }
 201              		.loc 1 58 13 view .LVU28
 202              	.LBE47:
 203              	.LBE46:
ARM GAS  /tmp/cccOP6XM.s 			page 6


  83:src/lcd.c     **** 	int leq = is_dot(LIT_EQ);
 204              		.loc 1 83 2 is_stmt 1 view .LVU29
 205              	.LBB48:
 206              	.LBI48:
  57:src/lcd.c     **** 	return dots[n];
 207              		.loc 1 57 5 view .LVU30
 208              	.LBB49:
  58:src/lcd.c     **** }
 209              		.loc 1 58 2 view .LVU31
  58:src/lcd.c     **** }
 210              		.loc 1 58 13 is_stmt 0 view .LVU32
 211 0012 90F88490 		ldrb	r9, [r0, #132]	@ zero_extendqisi2
 212              	.LVL9:
  58:src/lcd.c     **** }
 213              		.loc 1 58 13 view .LVU33
 214              	.LBE49:
 215              	.LBE48:
  84:src/lcd.c     **** 	int rpn = is_dot(RPN);
 216              		.loc 1 84 2 is_stmt 1 view .LVU34
 217              	.LBB50:
 218              	.LBI42:
  57:src/lcd.c     **** 	return dots[n];
 219              		.loc 1 57 5 view .LVU35
 220              	.LBB44:
  58:src/lcd.c     **** }
 221              		.loc 1 58 2 view .LVU36
  58:src/lcd.c     **** }
 222              		.loc 1 58 13 is_stmt 0 view .LVU37
 223 0016 90F88D80 		ldrb	r8, [r0, #141]	@ zero_extendqisi2
 224              	.LVL10:
  58:src/lcd.c     **** }
 225              		.loc 1 58 13 view .LVU38
 226              	.LBE44:
 227              	.LBE50:
  85:src/lcd.c     **** 	int i;
 228              		.loc 1 85 2 is_stmt 1 view .LVU39
  86:src/lcd.c     ****         for (i=0; i<400; i++)
 229              		.loc 1 86 9 view .LVU40
 230              		.loc 1 86 19 view .LVU41
  87:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 231              		.loc 1 87 38 is_stmt 0 view .LVU42
 232 001a 4925     		movs	r5, #73
 233              	.LBB51:
 234              	.LBB52:
  55:src/lcd.c     **** }
 235              		.loc 1 55 17 view .LVU43
 236 001c 0026     		movs	r6, #0
 237              	.LBE52:
 238              	.LBE51:
  86:src/lcd.c     ****         for (i=0; i<400; i++)
 239              		.loc 1 86 9 view .LVU44
 240 001e 40F20B17 		movw	r7, #267
 241 0022 06E0     		b	.L17
 242              	.LVL11:
 243              	.L13:
  88:src/lcd.c     **** 			clr_dot(i);
 244              		.loc 1 88 4 is_stmt 1 discriminator 2 view .LVU45
ARM GAS  /tmp/cccOP6XM.s 			page 7


 245              	.LBB59:
 246              	.LBI51:
  54:src/lcd.c     ****         dots[n] = 0;
 247              		.loc 1 54 6 discriminator 2 view .LVU46
 248              	.LBB53:
  55:src/lcd.c     **** }
 249              		.loc 1 55 9 discriminator 2 view .LVU47
 250              	.LBE53:
 251              	.LBE59:
  87:src/lcd.c     **** 			clr_dot(i);
 252              		.loc 1 87 38 is_stmt 0 discriminator 2 view .LVU48
 253 0024 E407     		lsls	r4, r4, #31
 254              	.LBB60:
 255              	.LBB54:
  55:src/lcd.c     **** }
 256              		.loc 1 55 17 discriminator 2 view .LVU49
 257 0026 00EB0302 		add	r2, r0, r3
 258              	.LBE54:
 259              	.LBE60:
  87:src/lcd.c     **** 			clr_dot(i);
 260              		.loc 1 87 38 discriminator 2 view .LVU50
 261 002a 01D4     		bmi	.L14
 262              	.LBB61:
 263              	.LBB55:
  55:src/lcd.c     **** }
 264              		.loc 1 55 17 view .LVU51
 265 002c 82F88460 		strb	r6, [r2, #132]
 266              	.LVL12:
  55:src/lcd.c     **** }
 267              		.loc 1 55 17 view .LVU52
 268              	.LBE55:
 269              	.LBE61:
  86:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 270              		.loc 1 86 26 is_stmt 1 view .LVU53
  86:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 271              		.loc 1 86 19 view .LVU54
 272              	.L14:
  86:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 273              		.loc 1 86 19 is_stmt 0 view .LVU55
 274 0030 0133     		adds	r3, r3, #1
 275              	.L17:
 276              	.LVL13:
  87:src/lcd.c     **** 			clr_dot(i);
 277              		.loc 1 87 3 is_stmt 1 view .LVU56
 278              		.loc 1 88 4 view .LVU57
 279              	.LBB62:
  54:src/lcd.c     ****         dots[n] = 0;
 280              		.loc 1 54 6 view .LVU58
 281              	.LBB56:
  55:src/lcd.c     **** }
 282              		.loc 1 55 9 view .LVU59
 283              	.LBE56:
 284              	.LBE62:
  87:src/lcd.c     **** 			clr_dot(i);
 285              		.loc 1 87 38 is_stmt 0 view .LVU60
 286 0032 062B     		cmp	r3, #6
 287              	.LBB63:
ARM GAS  /tmp/cccOP6XM.s 			page 8


 288              	.LBB57:
  55:src/lcd.c     **** }
 289              		.loc 1 55 17 view .LVU61
 290 0034 00EB0302 		add	r2, r0, r3
 291              	.LBE57:
 292              	.LBE63:
  87:src/lcd.c     **** 			clr_dot(i);
 293              		.loc 1 87 38 view .LVU62
 294 0038 25FA03F4 		lsr	r4, r5, r3
 295 003c F2D9     		bls	.L13
  86:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 296              		.loc 1 86 9 view .LVU63
 297 003e BB42     		cmp	r3, r7
 298              	.LBB64:
 299              	.LBB58:
  55:src/lcd.c     **** }
 300              		.loc 1 55 17 view .LVU64
 301 0040 82F88460 		strb	r6, [r2, #132]
 302              	.LVL14:
  55:src/lcd.c     **** }
 303              		.loc 1 55 17 view .LVU65
 304              	.LBE58:
 305              	.LBE64:
  86:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 306              		.loc 1 86 26 is_stmt 1 view .LVU66
  86:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 307              		.loc 1 86 19 view .LVU67
  86:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 308              		.loc 1 86 9 is_stmt 0 view .LVU68
 309 0044 F4D1     		bne	.L14
  89:src/lcd.c     **** 	dot(RCL_annun, rcl);
 310              		.loc 1 89 2 is_stmt 1 view .LVU69
 311 0046 8A20     		movs	r0, #138
 312 0048 FFF7FEFF 		bl	dot
 313              	.LVL15:
  90:src/lcd.c     **** 	dot(BATTERY, bat);
 314              		.loc 1 90 2 view .LVU70
 315 004c 5146     		mov	r1, r10
 316 004e 8720     		movs	r0, #135
 317 0050 FFF7FEFF 		bl	dot
 318              	.LVL16:
  91:src/lcd.c     **** 	dot(LIT_EQ, leq);
 319              		.loc 1 91 2 view .LVU71
 320 0054 4946     		mov	r1, r9
 321 0056 8420     		movs	r0, #132
 322 0058 FFF7FEFF 		bl	dot
 323              	.LVL17:
  92:src/lcd.c     **** 	dot(RPN, rpn);
 324              		.loc 1 92 2 view .LVU72
 325 005c 4146     		mov	r1, r8
 326 005e 8D20     		movs	r0, #141
  93:src/lcd.c     **** #else  
  94:src/lcd.c     **** #ifndef CONSOLE
  95:src/lcd.c     **** 	int rcl = is_dot(RCL_annun);
  96:src/lcd.c     **** 	int bat = is_dot(BATTERY);
  97:src/lcd.c     **** 	int leq = is_dot(LIT_EQ);
  98:src/lcd.c     **** 	int rpn = is_dot(RPN);
ARM GAS  /tmp/cccOP6XM.s 			page 9


  99:src/lcd.c     **** #ifndef REALBUILD
 100:src/lcd.c     **** 	*LastDisplayedText = '\0';
 101:src/lcd.c     **** #endif
 102:src/lcd.c     ****         wait_for_display();
 103:src/lcd.c     **** #if defined(QTGUI) || defined(IOS)
 104:src/lcd.c     ****     	xset(LcdData, 0, sizeof(LcdData));
 105:src/lcd.c     ****     	xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
 106:src/lcd.c     ****     	LastDisplayedNumber[NUMBER_LENGTH]=0;
 107:src/lcd.c     ****     	xset(LastDisplayedExponent, ' ', EXPONENT_LENGTH);
 108:src/lcd.c     ****     	LastDisplayedExponent[EXPONENT_LENGTH]=0;
 109:src/lcd.c     **** #else
 110:src/lcd.c     ****         // terrible code which assumes int are 4 bytes long. Works fine for realbuild and for WINGU
 111:src/lcd.c     **** 	xset((void *) AT91C_SLCDC_MEM, 0, 4 * 20);
 112:src/lcd.c     **** #endif
 113:src/lcd.c     **** 	dot(RCL_annun, rcl);
 114:src/lcd.c     **** 	dot(BATTERY, bat);
 115:src/lcd.c     **** 	dot(LIT_EQ, leq);
 116:src/lcd.c     **** 	dot(RPN, rpn);
 117:src/lcd.c     **** #else
 118:src/lcd.c     **** // Console
 119:src/lcd.c     **** #ifdef USECURSES
 120:src/lcd.c     **** 	int i;
 121:src/lcd.c     ****         for (i=0; i<400; i++)
 122:src/lcd.c     **** 		if (i != RCL_annun && i != BATTERY && i != LIT_EQ )
 123:src/lcd.c     **** 			clr_dot(i);
 124:src/lcd.c     **** 
 125:src/lcd.c     **** 	erase();
 126:src/lcd.c     ****         MOVE(0, 4);
 127:src/lcd.c     **** #else
 128:src/lcd.c     ****         putchar('\r');
 129:src/lcd.c     ****         for (i=0; i<70; i++)
 130:src/lcd.c     ****                 putchar(' ');
 131:src/lcd.c     ****         putchar('\r');
 132:src/lcd.c     ****         putchar(' ');
 133:src/lcd.c     **** #endif
 134:src/lcd.c     **** #endif
 135:src/lcd.c     ****         State2.invalid_disp = 0;
 136:src/lcd.c     **** #endif
 137:src/lcd.c     **** }
 327              		.loc 1 137 1 is_stmt 0 view .LVU73
 328 0060 BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 329              		.cfi_restore 14
 330              		.cfi_restore 10
 331              		.cfi_restore 9
 332              		.cfi_restore 8
 333              		.cfi_restore 7
 334              		.cfi_restore 6
 335              		.cfi_restore 5
 336              		.cfi_restore 4
 337              		.cfi_def_cfa_offset 0
 338              	.LVL18:
  92:src/lcd.c     **** 	dot(RPN, rpn);
 339              		.loc 1 92 2 view .LVU74
 340 0064 FFF7FEBF 		b	dot
 341              	.LVL19:
 342              	.L21:
  92:src/lcd.c     **** 	dot(RPN, rpn);
ARM GAS  /tmp/cccOP6XM.s 			page 10


 343              		.loc 1 92 2 view .LVU75
 344              		.align	2
 345              	.L20:
 346 0068 00000000 		.word	.LANCHOR0
 347              		.cfi_endproc
 348              	.LFE4:
 350              		.section	.text.left_side,"ax",%progbits
 351              		.align	1
 352              		.p2align 2,,3
 353              		.global	left_side
 354              		.syntax unified
 355              		.thumb
 356              		.thumb_func
 357              		.fpu fpv4-sp-d16
 359              	left_side:
 360              	.LVL20:
 361              	.LFB5:
 138:src/lcd.c     **** 
 139:src/lcd.c     **** #if defined(DM42)
 140:src/lcd.c     ****   #define setBlackPixel(x, y)                bitblt24(x, 1, y, 1, BLT_OR,   BLT_NONE)
 141:src/lcd.c     ****   #define setWhitePixel(x, y)                bitblt24(x, 1, y, 1, BLT_ANDN, BLT_NONE)
 142:src/lcd.c     **** 
 143:src/lcd.c     **** /* void left_side (int i, int j) { //i - xleft reference; j - ytop reference */
 144:src/lcd.c     **** /*   lcd_fill_rect ( i+2, j+11, 4, 8, 0xff ); */
 145:src/lcd.c     **** /*   lcd_fill_rect ( i+3, j+3, 4, 8, 0xff ); */
 146:src/lcd.c     **** /*   setBlackPixel ( i+4, j+2 ); */
 147:src/lcd.c     **** /*   setBlackPixel ( i+3, j+19 ); */
 148:src/lcd.c     **** /*   setWhitePixel ( i+6, j+3 ); */
 149:src/lcd.c     **** /*   setWhitePixel ( i+5, j+18 ); */
 150:src/lcd.c     **** /* } */
 151:src/lcd.c     **** 
 152:src/lcd.c     **** void left_side (int i, int j) { //i - xleft reference; j - ytop reference
 362              		.loc 1 152 31 is_stmt 1 view -0
 363              		.cfi_startproc
 364              		@ args = 0, pretend = 0, frame = 0
 365              		@ frame_needed = 0, uses_anonymous_args = 0
 153:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 366              		.loc 1 153 3 view .LVU77
 152:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 367              		.loc 1 152 31 is_stmt 0 view .LVU78
 368 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 369              		.cfi_def_cfa_offset 24
 370              		.cfi_offset 4, -24
 371              		.cfi_offset 5, -20
 372              		.cfi_offset 6, -16
 373              		.cfi_offset 7, -12
 374              		.cfi_offset 8, -8
 375              		.cfi_offset 14, -4
 376 0004 82B0     		sub	sp, sp, #8
 377              		.cfi_def_cfa_offset 32
 378              		.loc 1 153 3 view .LVU79
 379 0006 FF27     		movs	r7, #255
 152:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 380              		.loc 1 152 31 view .LVU80
 381 0008 0D46     		mov	r5, r1
 382              		.loc 1 153 3 view .LVU81
 383 000a 124E     		ldr	r6, .L24
ARM GAS  /tmp/cccOP6XM.s 			page 11


 384 000c 0097     		str	r7, [sp]
 152:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 385              		.loc 1 152 31 view .LVU82
 386 000e 0446     		mov	r4, r0
 154:src/lcd.c     ****   lcd_fill_rect (i+3, j+2, 1, 18, 0xff);
 387              		.loc 1 154 24 view .LVU83
 388 0010 05F10208 		add	r8, r5, #2
 153:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 389              		.loc 1 153 3 view .LVU84
 390 0014 0B31     		adds	r1, r1, #11
 391              	.LVL21:
 153:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 392              		.loc 1 153 3 view .LVU85
 393 0016 0230     		adds	r0, r0, #2
 394              	.LVL22:
 153:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, 0xff);
 395              		.loc 1 153 3 view .LVU86
 396 0018 0923     		movs	r3, #9
 397 001a 0122     		movs	r2, #1
 398 001c B047     		blx	r6
 399              	.LVL23:
 400              		.loc 1 154 3 is_stmt 1 view .LVU87
 401 001e 4146     		mov	r1, r8
 402 0020 E01C     		adds	r0, r4, #3
 403 0022 0097     		str	r7, [sp]
 404 0024 1223     		movs	r3, #18
 405 0026 0122     		movs	r2, #1
 406 0028 B047     		blx	r6
 407              	.LVL24:
 155:src/lcd.c     ****   lcd_fill_rect (i+4, j+2, 1, 17, 0xff);
 408              		.loc 1 155 3 view .LVU88
 409 002a 4146     		mov	r1, r8
 410 002c 201D     		adds	r0, r4, #4
 411 002e 0097     		str	r7, [sp]
 412 0030 1123     		movs	r3, #17
 413 0032 0122     		movs	r2, #1
 414 0034 B047     		blx	r6
 415              	.LVL25:
 156:src/lcd.c     ****   lcd_fill_rect (i+5, j+3, 1, 15, 0xff);
 416              		.loc 1 156 3 view .LVU89
 417 0036 E91C     		adds	r1, r5, #3
 418 0038 601D     		adds	r0, r4, #5
 419 003a 0097     		str	r7, [sp]
 420 003c 0F23     		movs	r3, #15
 421 003e 0122     		movs	r2, #1
 422 0040 B047     		blx	r6
 423              	.LVL26:
 157:src/lcd.c     ****   lcd_fill_rect (i+6, j+4, 1, 7, 0xff);
 424              		.loc 1 157 3 view .LVU90
 425 0042 291D     		adds	r1, r5, #4
 426 0044 A01D     		adds	r0, r4, #6
 427 0046 0097     		str	r7, [sp]
 428 0048 0723     		movs	r3, #7
 429 004a 0122     		movs	r2, #1
 430 004c B047     		blx	r6
 431              	.LVL27:
 158:src/lcd.c     **** }
ARM GAS  /tmp/cccOP6XM.s 			page 12


 432              		.loc 1 158 1 is_stmt 0 view .LVU91
 433 004e 02B0     		add	sp, sp, #8
 434              		.cfi_def_cfa_offset 24
 435              		@ sp needed
 436 0050 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 437              	.LVL28:
 438              	.L25:
 439              		.loc 1 158 1 view .LVU92
 440              		.align	2
 441              	.L24:
 442 0054 3D020008 		.word	134218301
 443              		.cfi_endproc
 444              	.LFE5:
 446              		.section	.text.left_side_top,"ax",%progbits
 447              		.align	1
 448              		.p2align 2,,3
 449              		.global	left_side_top
 450              		.syntax unified
 451              		.thumb
 452              		.thumb_func
 453              		.fpu fpv4-sp-d16
 455              	left_side_top:
 456              	.LVL29:
 457              	.LFB6:
 159:src/lcd.c     **** void left_side_top (int i, int j) {
 458              		.loc 1 159 35 is_stmt 1 view -0
 459              		.cfi_startproc
 460              		@ args = 0, pretend = 0, frame = 0
 461              		@ frame_needed = 0, uses_anonymous_args = 0
 462              		@ link register save eliminated.
 160:src/lcd.c     ****   left_side(i, j);
 463              		.loc 1 160 3 view .LVU94
 464 0000 FFF7FEBF 		b	left_side
 465              	.LVL30:
 466              		.loc 1 160 3 is_stmt 0 view .LVU95
 467              		.cfi_endproc
 468              	.LFE6:
 470              		.section	.text.left_side_bottom,"ax",%progbits
 471              		.align	1
 472              		.p2align 2,,3
 473              		.global	left_side_bottom
 474              		.syntax unified
 475              		.thumb
 476              		.thumb_func
 477              		.fpu fpv4-sp-d16
 479              	left_side_bottom:
 480              	.LVL31:
 481              	.LFB7:
 161:src/lcd.c     **** }
 162:src/lcd.c     **** void left_side_bottom (int i, int j) {
 482              		.loc 1 162 38 is_stmt 1 view -0
 483              		.cfi_startproc
 484              		@ args = 0, pretend = 0, frame = 0
 485              		@ frame_needed = 0, uses_anonymous_args = 0
 486              		@ link register save eliminated.
 163:src/lcd.c     ****   left_side(i-2, j+19);
 487              		.loc 1 163 3 view .LVU97
ARM GAS  /tmp/cccOP6XM.s 			page 13


 488 0000 0238     		subs	r0, r0, #2
 489              	.LVL32:
 490              		.loc 1 163 3 is_stmt 0 view .LVU98
 491 0002 1331     		adds	r1, r1, #19
 492              	.LVL33:
 493              		.loc 1 163 3 view .LVU99
 494 0004 FFF7FEBF 		b	left_side
 495              	.LVL34:
 496              		.loc 1 163 3 view .LVU100
 497              		.cfi_endproc
 498              	.LFE7:
 500              		.section	.text.right_side,"ax",%progbits
 501              		.align	1
 502              		.p2align 2,,3
 503              		.global	right_side
 504              		.syntax unified
 505              		.thumb
 506              		.thumb_func
 507              		.fpu fpv4-sp-d16
 509              	right_side:
 510              	.LVL35:
 511              	.LFB8:
 164:src/lcd.c     **** }
 165:src/lcd.c     **** void right_side (int i, int j) {
 512              		.loc 1 165 32 is_stmt 1 view -0
 513              		.cfi_startproc
 514              		@ args = 0, pretend = 0, frame = 0
 515              		@ frame_needed = 0, uses_anonymous_args = 0
 166:src/lcd.c     ****   lcd_fill_rect (i+16, j+11, 1, 7, 0xff);
 516              		.loc 1 166 3 view .LVU102
 165:src/lcd.c     ****   lcd_fill_rect (i+16, j+11, 1, 7, 0xff);
 517              		.loc 1 165 32 is_stmt 0 view .LVU103
 518 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 519              		.cfi_def_cfa_offset 24
 520              		.cfi_offset 4, -24
 521              		.cfi_offset 5, -20
 522              		.cfi_offset 6, -16
 523              		.cfi_offset 7, -12
 524              		.cfi_offset 8, -8
 525              		.cfi_offset 14, -4
 526 0004 82B0     		sub	sp, sp, #8
 527              		.cfi_def_cfa_offset 32
 528              		.loc 1 166 3 view .LVU104
 529 0006 FF27     		movs	r7, #255
 530 0008 144E     		ldr	r6, .L30
 531 000a 0097     		str	r7, [sp]
 165:src/lcd.c     ****   lcd_fill_rect (i+16, j+11, 1, 7, 0xff);
 532              		.loc 1 165 32 view .LVU105
 533 000c 0446     		mov	r4, r0
 534 000e 0D46     		mov	r5, r1
 535              		.loc 1 166 3 view .LVU106
 536 0010 1030     		adds	r0, r0, #16
 537              	.LVL36:
 538              		.loc 1 166 3 view .LVU107
 539 0012 0B31     		adds	r1, r1, #11
 540              	.LVL37:
 541              		.loc 1 166 3 view .LVU108
ARM GAS  /tmp/cccOP6XM.s 			page 14


 542 0014 0723     		movs	r3, #7
 543 0016 0122     		movs	r2, #1
 544 0018 B047     		blx	r6
 545              	.LVL38:
 167:src/lcd.c     ****   lcd_fill_rect (i+17, j+4, 1, 15, 0xff);
 546              		.loc 1 167 3 is_stmt 1 view .LVU109
 547 001a 291D     		adds	r1, r5, #4
 548 001c 04F11100 		add	r0, r4, #17
 549 0020 0097     		str	r7, [sp]
 550 0022 0F23     		movs	r3, #15
 551 0024 0122     		movs	r2, #1
 552 0026 B047     		blx	r6
 553              	.LVL39:
 168:src/lcd.c     ****   lcd_fill_rect (i+18, j+3, 1, 17, 0xff);
 554              		.loc 1 168 3 view .LVU110
 169:src/lcd.c     ****   lcd_fill_rect (i+19, j+2, 1, 18, 0xff);
 555              		.loc 1 169 25 is_stmt 0 view .LVU111
 556 0028 05F10208 		add	r8, r5, #2
 168:src/lcd.c     ****   lcd_fill_rect (i+18, j+3, 1, 17, 0xff);
 557              		.loc 1 168 3 view .LVU112
 558 002c E91C     		adds	r1, r5, #3
 559 002e 04F11200 		add	r0, r4, #18
 560 0032 0097     		str	r7, [sp]
 561 0034 1123     		movs	r3, #17
 562 0036 0122     		movs	r2, #1
 563 0038 B047     		blx	r6
 564              	.LVL40:
 565              		.loc 1 169 3 is_stmt 1 view .LVU113
 566 003a 4146     		mov	r1, r8
 567 003c 04F11300 		add	r0, r4, #19
 568 0040 0097     		str	r7, [sp]
 569 0042 1223     		movs	r3, #18
 570 0044 0122     		movs	r2, #1
 571 0046 B047     		blx	r6
 572              	.LVL41:
 170:src/lcd.c     ****   lcd_fill_rect (i+20, j+2, 1, 9, 0xff);
 573              		.loc 1 170 3 view .LVU114
 574 0048 4146     		mov	r1, r8
 575 004a 04F11400 		add	r0, r4, #20
 576 004e 0097     		str	r7, [sp]
 577 0050 0923     		movs	r3, #9
 578 0052 0122     		movs	r2, #1
 579 0054 B047     		blx	r6
 580              	.LVL42:
 171:src/lcd.c     **** }
 581              		.loc 1 171 1 is_stmt 0 view .LVU115
 582 0056 02B0     		add	sp, sp, #8
 583              		.cfi_def_cfa_offset 24
 584              		@ sp needed
 585 0058 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 586              	.LVL43:
 587              	.L31:
 588              		.loc 1 171 1 view .LVU116
 589              		.align	2
 590              	.L30:
 591 005c 3D020008 		.word	134218301
 592              		.cfi_endproc
ARM GAS  /tmp/cccOP6XM.s 			page 15


 593              	.LFE8:
 595              		.section	.text.right_side_top,"ax",%progbits
 596              		.align	1
 597              		.p2align 2,,3
 598              		.global	right_side_top
 599              		.syntax unified
 600              		.thumb
 601              		.thumb_func
 602              		.fpu fpv4-sp-d16
 604              	right_side_top:
 605              	.LVL44:
 606              	.LFB9:
 172:src/lcd.c     **** void right_side_top (int i, int j) {
 607              		.loc 1 172 36 is_stmt 1 view -0
 608              		.cfi_startproc
 609              		@ args = 0, pretend = 0, frame = 0
 610              		@ frame_needed = 0, uses_anonymous_args = 0
 611              		@ link register save eliminated.
 173:src/lcd.c     ****   right_side(i, j);
 612              		.loc 1 173 3 view .LVU118
 613 0000 FFF7FEBF 		b	right_side
 614              	.LVL45:
 615              		.loc 1 173 3 is_stmt 0 view .LVU119
 616              		.cfi_endproc
 617              	.LFE9:
 619              		.section	.text.right_side_bottom,"ax",%progbits
 620              		.align	1
 621              		.p2align 2,,3
 622              		.global	right_side_bottom
 623              		.syntax unified
 624              		.thumb
 625              		.thumb_func
 626              		.fpu fpv4-sp-d16
 628              	right_side_bottom:
 629              	.LVL46:
 630              	.LFB10:
 174:src/lcd.c     **** }
 175:src/lcd.c     **** void right_side_bottom (int i, int j) {
 631              		.loc 1 175 39 is_stmt 1 view -0
 632              		.cfi_startproc
 633              		@ args = 0, pretend = 0, frame = 0
 634              		@ frame_needed = 0, uses_anonymous_args = 0
 635              		@ link register save eliminated.
 176:src/lcd.c     ****   right_side(i-2, j+19);
 636              		.loc 1 176 3 view .LVU121
 637 0000 0238     		subs	r0, r0, #2
 638              	.LVL47:
 639              		.loc 1 176 3 is_stmt 0 view .LVU122
 640 0002 1331     		adds	r1, r1, #19
 641              	.LVL48:
 642              		.loc 1 176 3 view .LVU123
 643 0004 FFF7FEBF 		b	right_side
 644              	.LVL49:
 645              		.loc 1 176 3 view .LVU124
 646              		.cfi_endproc
 647              	.LFE10:
 649              		.section	.text.top,"ax",%progbits
ARM GAS  /tmp/cccOP6XM.s 			page 16


 650              		.align	1
 651              		.p2align 2,,3
 652              		.global	top
 653              		.syntax unified
 654              		.thumb
 655              		.thumb_func
 656              		.fpu fpv4-sp-d16
 658              	top:
 659              	.LVL50:
 660              	.LFB11:
 177:src/lcd.c     **** }
 178:src/lcd.c     **** void top (int i, int j) {
 661              		.loc 1 178 25 is_stmt 1 view -0
 662              		.cfi_startproc
 663              		@ args = 0, pretend = 0, frame = 0
 664              		@ frame_needed = 0, uses_anonymous_args = 0
 179:src/lcd.c     ****   lcd_fill_rect ( i+5, j, 14, 1, 0xff );
 665              		.loc 1 179 3 view .LVU126
 178:src/lcd.c     ****   lcd_fill_rect ( i+5, j, 14, 1, 0xff );
 666              		.loc 1 178 25 is_stmt 0 view .LVU127
 667 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 668              		.cfi_def_cfa_offset 20
 669              		.cfi_offset 4, -20
 670              		.cfi_offset 5, -16
 671              		.cfi_offset 6, -12
 672              		.cfi_offset 7, -8
 673              		.cfi_offset 14, -4
 674 0002 83B0     		sub	sp, sp, #12
 675              		.cfi_def_cfa_offset 32
 676              		.loc 1 179 3 view .LVU128
 677 0004 FF27     		movs	r7, #255
 678 0006 0E4E     		ldr	r6, .L36
 679 0008 0097     		str	r7, [sp]
 178:src/lcd.c     ****   lcd_fill_rect ( i+5, j, 14, 1, 0xff );
 680              		.loc 1 178 25 view .LVU129
 681 000a 0446     		mov	r4, r0
 682 000c 0D46     		mov	r5, r1
 683              		.loc 1 179 3 view .LVU130
 684 000e 0530     		adds	r0, r0, #5
 685              	.LVL51:
 686              		.loc 1 179 3 view .LVU131
 687 0010 0123     		movs	r3, #1
 688 0012 0E22     		movs	r2, #14
 689 0014 B047     		blx	r6
 690              	.LVL52:
 180:src/lcd.c     ****   lcd_fill_rect ( i+4, j+1, 16, 1, 0xff );
 691              		.loc 1 180 3 is_stmt 1 view .LVU132
 692 0016 691C     		adds	r1, r5, #1
 693 0018 201D     		adds	r0, r4, #4
 694 001a 0097     		str	r7, [sp]
 695 001c 0123     		movs	r3, #1
 696 001e 1022     		movs	r2, #16
 697 0020 B047     		blx	r6
 698              	.LVL53:
 181:src/lcd.c     ****   lcd_fill_rect ( i+6, j+2, 12, 1, 0xff );
 699              		.loc 1 181 3 view .LVU133
 700 0022 A91C     		adds	r1, r5, #2
ARM GAS  /tmp/cccOP6XM.s 			page 17


 701 0024 A01D     		adds	r0, r4, #6
 702 0026 0097     		str	r7, [sp]
 703 0028 0123     		movs	r3, #1
 704 002a 0C22     		movs	r2, #12
 705 002c B047     		blx	r6
 706              	.LVL54:
 182:src/lcd.c     ****   lcd_fill_rect ( i+7, j+3, 10, 1, 0xff );
 707              		.loc 1 182 3 view .LVU134
 708 002e E91C     		adds	r1, r5, #3
 709 0030 E01D     		adds	r0, r4, #7
 710 0032 0097     		str	r7, [sp]
 711 0034 0123     		movs	r3, #1
 712 0036 0A22     		movs	r2, #10
 713 0038 B047     		blx	r6
 714              	.LVL55:
 183:src/lcd.c     **** }
 715              		.loc 1 183 1 is_stmt 0 view .LVU135
 716 003a 03B0     		add	sp, sp, #12
 717              		.cfi_def_cfa_offset 20
 718              		@ sp needed
 719 003c F0BD     		pop	{r4, r5, r6, r7, pc}
 720              	.LVL56:
 721              	.L37:
 722              		.loc 1 183 1 view .LVU136
 723 003e 00BF     		.align	2
 724              	.L36:
 725 0040 3D020008 		.word	134218301
 726              		.cfi_endproc
 727              	.LFE11:
 729              		.section	.text.middle,"ax",%progbits
 730              		.align	1
 731              		.p2align 2,,3
 732              		.global	middle
 733              		.syntax unified
 734              		.thumb
 735              		.thumb_func
 736              		.fpu fpv4-sp-d16
 738              	middle:
 739              	.LVL57:
 740              	.LFB12:
 184:src/lcd.c     **** void middle (int i, int j) {
 741              		.loc 1 184 28 is_stmt 1 view -0
 742              		.cfi_startproc
 743              		@ args = 0, pretend = 0, frame = 0
 744              		@ frame_needed = 0, uses_anonymous_args = 0
 185:src/lcd.c     ****   lcd_fill_rect ( i+5, j+19, 11, 3, 0xff );
 745              		.loc 1 185 3 view .LVU138
 184:src/lcd.c     **** void middle (int i, int j) {
 746              		.loc 1 184 28 is_stmt 0 view .LVU139
 747 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 748              		.cfi_def_cfa_offset 20
 749              		.cfi_offset 4, -20
 750              		.cfi_offset 5, -16
 751              		.cfi_offset 6, -12
 752              		.cfi_offset 7, -8
 753              		.cfi_offset 14, -4
 754 0002 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/cccOP6XM.s 			page 18


 755              		.cfi_def_cfa_offset 32
 756              		.loc 1 185 3 view .LVU140
 757 0004 FF23     		movs	r3, #255
 184:src/lcd.c     **** void middle (int i, int j) {
 758              		.loc 1 184 28 view .LVU141
 759 0006 0546     		mov	r5, r0
 760              		.loc 1 185 3 view .LVU142
 761 0008 0093     		str	r3, [sp]
 762 000a 0D4E     		ldr	r6, .L40
 186:src/lcd.c     ****   setBlackPixel ( i+4, j+20 );
 763              		.loc 1 186 3 view .LVU143
 764 000c 0D4F     		ldr	r7, .L40+4
 184:src/lcd.c     **** void middle (int i, int j) {
 765              		.loc 1 184 28 view .LVU144
 766 000e 0C46     		mov	r4, r1
 185:src/lcd.c     ****   lcd_fill_rect ( i+5, j+19, 11, 3, 0xff );
 767              		.loc 1 185 3 view .LVU145
 768 0010 0530     		adds	r0, r0, #5
 769              	.LVL58:
 185:src/lcd.c     ****   lcd_fill_rect ( i+5, j+19, 11, 3, 0xff );
 770              		.loc 1 185 3 view .LVU146
 771 0012 1331     		adds	r1, r1, #19
 772              	.LVL59:
 185:src/lcd.c     ****   lcd_fill_rect ( i+5, j+19, 11, 3, 0xff );
 773              		.loc 1 185 3 view .LVU147
 774 0014 0323     		movs	r3, #3
 775 0016 0B22     		movs	r2, #11
 776 0018 B047     		blx	r6
 777              	.LVL60:
 778              		.loc 1 186 3 is_stmt 1 view .LVU148
 779 001a 1434     		adds	r4, r4, #20
 780              	.LVL61:
 781              		.loc 1 186 3 is_stmt 0 view .LVU149
 782 001c 0026     		movs	r6, #0
 783 001e 0123     		movs	r3, #1
 784 0020 2246     		mov	r2, r4
 785 0022 281D     		adds	r0, r5, #4
 786 0024 1946     		mov	r1, r3
 787 0026 CDE90066 		strd	r6, r6, [sp]
 788 002a B847     		blx	r7
 789              	.LVL62:
 187:src/lcd.c     ****   setBlackPixel ( i+16, j+20 );
 790              		.loc 1 187 3 is_stmt 1 view .LVU150
 791 002c 0123     		movs	r3, #1
 792 002e CDE90066 		strd	r6, r6, [sp]
 793 0032 2246     		mov	r2, r4
 794 0034 05F11000 		add	r0, r5, #16
 795 0038 1946     		mov	r1, r3
 796 003a B847     		blx	r7
 797              	.LVL63:
 188:src/lcd.c     **** }
 798              		.loc 1 188 1 is_stmt 0 view .LVU151
 799 003c 03B0     		add	sp, sp, #12
 800              		.cfi_def_cfa_offset 20
 801              		@ sp needed
 802 003e F0BD     		pop	{r4, r5, r6, r7, pc}
 803              	.LVL64:
ARM GAS  /tmp/cccOP6XM.s 			page 19


 804              	.L41:
 805              		.loc 1 188 1 view .LVU152
 806              		.align	2
 807              	.L40:
 808 0040 3D020008 		.word	134218301
 809 0044 25020008 		.word	134218277
 810              		.cfi_endproc
 811              	.LFE12:
 813              		.section	.text.bottom,"ax",%progbits
 814              		.align	1
 815              		.p2align 2,,3
 816              		.global	bottom
 817              		.syntax unified
 818              		.thumb
 819              		.thumb_func
 820              		.fpu fpv4-sp-d16
 822              	bottom:
 823              	.LVL65:
 824              	.LFB13:
 189:src/lcd.c     **** void bottom (int i, int j) {
 825              		.loc 1 189 28 is_stmt 1 view -0
 826              		.cfi_startproc
 827              		@ args = 0, pretend = 0, frame = 0
 828              		@ frame_needed = 0, uses_anonymous_args = 0
 190:src/lcd.c     ****   lcd_fill_rect ( i+2, j+40, 14, 1, 0xff );
 829              		.loc 1 190 3 view .LVU154
 189:src/lcd.c     **** void bottom (int i, int j) {
 830              		.loc 1 189 28 is_stmt 0 view .LVU155
 831 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 832              		.cfi_def_cfa_offset 20
 833              		.cfi_offset 4, -20
 834              		.cfi_offset 5, -16
 835              		.cfi_offset 6, -12
 836              		.cfi_offset 7, -8
 837              		.cfi_offset 14, -4
 838 0002 83B0     		sub	sp, sp, #12
 839              		.cfi_def_cfa_offset 32
 840              		.loc 1 190 3 view .LVU156
 841 0004 FF27     		movs	r7, #255
 842 0006 104E     		ldr	r6, .L44
 843 0008 0097     		str	r7, [sp]
 189:src/lcd.c     **** void bottom (int i, int j) {
 844              		.loc 1 189 28 view .LVU157
 845 000a 0446     		mov	r4, r0
 846 000c 0D46     		mov	r5, r1
 847              		.loc 1 190 3 view .LVU158
 848 000e 0230     		adds	r0, r0, #2
 849              	.LVL66:
 850              		.loc 1 190 3 view .LVU159
 851 0010 2831     		adds	r1, r1, #40
 852              	.LVL67:
 853              		.loc 1 190 3 view .LVU160
 854 0012 0123     		movs	r3, #1
 855 0014 0E22     		movs	r2, #14
 856 0016 B047     		blx	r6
 857              	.LVL68:
 191:src/lcd.c     ****   lcd_fill_rect ( i+1, j+39, 16, 1, 0xff );
ARM GAS  /tmp/cccOP6XM.s 			page 20


 858              		.loc 1 191 3 is_stmt 1 view .LVU161
 859 0018 05F12701 		add	r1, r5, #39
 860 001c 601C     		adds	r0, r4, #1
 861 001e 0097     		str	r7, [sp]
 862 0020 0123     		movs	r3, #1
 863 0022 1022     		movs	r2, #16
 864 0024 B047     		blx	r6
 865              	.LVL69:
 192:src/lcd.c     ****   lcd_fill_rect ( i+3, j+38, 12, 1, 0xff );
 866              		.loc 1 192 3 view .LVU162
 867 0026 05F12601 		add	r1, r5, #38
 868 002a E01C     		adds	r0, r4, #3
 869 002c 0097     		str	r7, [sp]
 870 002e 0123     		movs	r3, #1
 871 0030 0C22     		movs	r2, #12
 872 0032 B047     		blx	r6
 873              	.LVL70:
 193:src/lcd.c     ****   lcd_fill_rect ( i+4, j+37, 10, 1, 0xff );
 874              		.loc 1 193 3 view .LVU163
 875 0034 05F12501 		add	r1, r5, #37
 876 0038 201D     		adds	r0, r4, #4
 877 003a 0097     		str	r7, [sp]
 878 003c 0123     		movs	r3, #1
 879 003e 0A22     		movs	r2, #10
 880 0040 B047     		blx	r6
 881              	.LVL71:
 194:src/lcd.c     **** }
 882              		.loc 1 194 1 is_stmt 0 view .LVU164
 883 0042 03B0     		add	sp, sp, #12
 884              		.cfi_def_cfa_offset 20
 885              		@ sp needed
 886 0044 F0BD     		pop	{r4, r5, r6, r7, pc}
 887              	.LVL72:
 888              	.L45:
 889              		.loc 1 194 1 view .LVU165
 890 0046 00BF     		.align	2
 891              	.L44:
 892 0048 3D020008 		.word	134218301
 893              		.cfi_endproc
 894              	.LFE13:
 896              		.section	.text.decimal,"ax",%progbits
 897              		.align	1
 898              		.p2align 2,,3
 899              		.global	decimal
 900              		.syntax unified
 901              		.thumb
 902              		.thumb_func
 903              		.fpu fpv4-sp-d16
 905              	decimal:
 906              	.LVL73:
 907              	.LFB14:
 195:src/lcd.c     **** void decimal (int i, int j) {
 908              		.loc 1 195 29 is_stmt 1 view -0
 909              		.cfi_startproc
 910              		@ args = 0, pretend = 0, frame = 0
 911              		@ frame_needed = 0, uses_anonymous_args = 0
 196:src/lcd.c     ****   lcd_fill_rect (i+19, j+40, 5, 5, 0xff);
ARM GAS  /tmp/cccOP6XM.s 			page 21


 912              		.loc 1 196 3 view .LVU167
 195:src/lcd.c     **** void decimal (int i, int j) {
 913              		.loc 1 195 29 is_stmt 0 view .LVU168
 914 0000 10B5     		push	{r4, lr}
 915              		.cfi_def_cfa_offset 8
 916              		.cfi_offset 4, -8
 917              		.cfi_offset 14, -4
 918 0002 82B0     		sub	sp, sp, #8
 919              		.cfi_def_cfa_offset 16
 920              		.loc 1 196 3 view .LVU169
 921 0004 0523     		movs	r3, #5
 922 0006 FF22     		movs	r2, #255
 923 0008 0092     		str	r2, [sp]
 924 000a 034C     		ldr	r4, .L48
 925 000c 1330     		adds	r0, r0, #19
 926              	.LVL74:
 927              		.loc 1 196 3 view .LVU170
 928 000e 2831     		adds	r1, r1, #40
 929              	.LVL75:
 930              		.loc 1 196 3 view .LVU171
 931 0010 1A46     		mov	r2, r3
 932 0012 A047     		blx	r4
 933              	.LVL76:
 197:src/lcd.c     **** }
 934              		.loc 1 197 1 view .LVU172
 935 0014 02B0     		add	sp, sp, #8
 936              		.cfi_def_cfa_offset 8
 937              		@ sp needed
 938 0016 10BD     		pop	{r4, pc}
 939              	.L49:
 940              		.align	2
 941              	.L48:
 942 0018 3D020008 		.word	134218301
 943              		.cfi_endproc
 944              	.LFE14:
 946              		.section	.text.comma,"ax",%progbits
 947              		.align	1
 948              		.p2align 2,,3
 949              		.global	comma
 950              		.syntax unified
 951              		.thumb
 952              		.thumb_func
 953              		.fpu fpv4-sp-d16
 955              	comma:
 956              	.LVL77:
 957              	.LFB15:
 198:src/lcd.c     **** void comma (int i, int j) {
 958              		.loc 1 198 27 is_stmt 1 view -0
 959              		.cfi_startproc
 960              		@ args = 0, pretend = 0, frame = 0
 961              		@ frame_needed = 0, uses_anonymous_args = 0
 199:src/lcd.c     ****   lcd_fill_rect (i+21, j+45, 3, 3, 0xff);
 962              		.loc 1 199 3 view .LVU174
 198:src/lcd.c     **** void comma (int i, int j) {
 963              		.loc 1 198 27 is_stmt 0 view .LVU175
 964 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 965              		.cfi_def_cfa_offset 20
ARM GAS  /tmp/cccOP6XM.s 			page 22


 966              		.cfi_offset 4, -20
 967              		.cfi_offset 5, -16
 968              		.cfi_offset 6, -12
 969              		.cfi_offset 7, -8
 970              		.cfi_offset 14, -4
 971 0002 83B0     		sub	sp, sp, #12
 972              		.cfi_def_cfa_offset 32
 973              		.loc 1 199 3 view .LVU176
 974 0004 FF27     		movs	r7, #255
 975 0006 0323     		movs	r3, #3
 976 0008 084E     		ldr	r6, .L52
 977 000a 0097     		str	r7, [sp]
 198:src/lcd.c     **** void comma (int i, int j) {
 978              		.loc 1 198 27 view .LVU177
 979 000c 0446     		mov	r4, r0
 980 000e 0D46     		mov	r5, r1
 981              		.loc 1 199 3 view .LVU178
 982 0010 1A46     		mov	r2, r3
 983 0012 2D31     		adds	r1, r1, #45
 984              	.LVL78:
 985              		.loc 1 199 3 view .LVU179
 986 0014 1530     		adds	r0, r0, #21
 987              	.LVL79:
 988              		.loc 1 199 3 view .LVU180
 989 0016 B047     		blx	r6
 990              	.LVL80:
 200:src/lcd.c     ****   lcd_fill_rect (i+19, j+48, 3, 3, 0xff);
 991              		.loc 1 200 3 is_stmt 1 view .LVU181
 992 0018 0323     		movs	r3, #3
 993 001a 05F13001 		add	r1, r5, #48
 994 001e 04F11300 		add	r0, r4, #19
 995 0022 0097     		str	r7, [sp]
 996 0024 1A46     		mov	r2, r3
 997 0026 B047     		blx	r6
 998              	.LVL81:
 201:src/lcd.c     **** }
 999              		.loc 1 201 1 is_stmt 0 view .LVU182
 1000 0028 03B0     		add	sp, sp, #12
 1001              		.cfi_def_cfa_offset 20
 1002              		@ sp needed
 1003 002a F0BD     		pop	{r4, r5, r6, r7, pc}
 1004              	.LVL82:
 1005              	.L53:
 1006              		.loc 1 201 1 view .LVU183
 1007              		.align	2
 1008              	.L52:
 1009 002c 3D020008 		.word	134218301
 1010              		.cfi_endproc
 1011              	.LFE15:
 1013              		.section	.text.exp_left_side,"ax",%progbits
 1014              		.align	1
 1015              		.p2align 2,,3
 1016              		.global	exp_left_side
 1017              		.syntax unified
 1018              		.thumb
 1019              		.thumb_func
 1020              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cccOP6XM.s 			page 23


 1022              	exp_left_side:
 1023              	.LVL83:
 1024              	.LFB16:
 202:src/lcd.c     **** 
 203:src/lcd.c     **** void exp_left_side (int i, int j) {
 1025              		.loc 1 203 35 is_stmt 1 view -0
 1026              		.cfi_startproc
 1027              		@ args = 0, pretend = 0, frame = 0
 1028              		@ frame_needed = 0, uses_anonymous_args = 0
 204:src/lcd.c     ****   lcd_fill_rect (i, j+6, 1, 6, 0xff );
 1029              		.loc 1 204 3 view .LVU185
 203:src/lcd.c     ****   lcd_fill_rect (i, j+6, 1, 6, 0xff );
 1030              		.loc 1 203 35 is_stmt 0 view .LVU186
 1031 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1032              		.cfi_def_cfa_offset 20
 1033              		.cfi_offset 4, -20
 1034              		.cfi_offset 5, -16
 1035              		.cfi_offset 6, -12
 1036              		.cfi_offset 7, -8
 1037              		.cfi_offset 14, -4
 1038 0002 83B0     		sub	sp, sp, #12
 1039              		.cfi_def_cfa_offset 32
 1040              		.loc 1 204 3 view .LVU187
 1041 0004 FF27     		movs	r7, #255
 1042 0006 0E4E     		ldr	r6, .L56
 1043 0008 0097     		str	r7, [sp]
 203:src/lcd.c     ****   lcd_fill_rect (i, j+6, 1, 6, 0xff );
 1044              		.loc 1 203 35 view .LVU188
 1045 000a 0C46     		mov	r4, r1
 1046 000c 0546     		mov	r5, r0
 1047              		.loc 1 204 3 view .LVU189
 1048 000e 0631     		adds	r1, r1, #6
 1049              	.LVL84:
 1050              		.loc 1 204 3 view .LVU190
 1051 0010 0623     		movs	r3, #6
 1052 0012 0122     		movs	r2, #1
 1053 0014 B047     		blx	r6
 1054              	.LVL85:
 205:src/lcd.c     ****   lcd_fill_rect (i+1, j, 1, 11, 0xff );
 1055              		.loc 1 205 3 is_stmt 1 view .LVU191
 1056 0016 2146     		mov	r1, r4
 1057 0018 681C     		adds	r0, r5, #1
 1058 001a 0097     		str	r7, [sp]
 1059 001c 0B23     		movs	r3, #11
 1060 001e 0122     		movs	r2, #1
 1061 0020 B047     		blx	r6
 1062              	.LVL86:
 206:src/lcd.c     ****   lcd_fill_rect (i+2, j+1, 1, 9, 0xff );
 1063              		.loc 1 206 3 view .LVU192
 1064 0022 611C     		adds	r1, r4, #1
 1065 0024 A81C     		adds	r0, r5, #2
 1066 0026 0097     		str	r7, [sp]
 1067 0028 0923     		movs	r3, #9
 1068 002a 0122     		movs	r2, #1
 1069 002c B047     		blx	r6
 1070              	.LVL87:
 207:src/lcd.c     ****   lcd_fill_rect (i+3, j+2, 1, 4, 0xff );
ARM GAS  /tmp/cccOP6XM.s 			page 24


 1071              		.loc 1 207 3 view .LVU193
 1072 002e A11C     		adds	r1, r4, #2
 1073 0030 E81C     		adds	r0, r5, #3
 1074 0032 0097     		str	r7, [sp]
 1075 0034 0423     		movs	r3, #4
 1076 0036 0122     		movs	r2, #1
 1077 0038 B047     		blx	r6
 1078              	.LVL88:
 208:src/lcd.c     **** }
 1079              		.loc 1 208 1 is_stmt 0 view .LVU194
 1080 003a 03B0     		add	sp, sp, #12
 1081              		.cfi_def_cfa_offset 20
 1082              		@ sp needed
 1083 003c F0BD     		pop	{r4, r5, r6, r7, pc}
 1084              	.LVL89:
 1085              	.L57:
 1086              		.loc 1 208 1 view .LVU195
 1087 003e 00BF     		.align	2
 1088              	.L56:
 1089 0040 3D020008 		.word	134218301
 1090              		.cfi_endproc
 1091              	.LFE16:
 1093              		.section	.text.exp_left_side_top,"ax",%progbits
 1094              		.align	1
 1095              		.p2align 2,,3
 1096              		.global	exp_left_side_top
 1097              		.syntax unified
 1098              		.thumb
 1099              		.thumb_func
 1100              		.fpu fpv4-sp-d16
 1102              	exp_left_side_top:
 1103              	.LVL90:
 1104              	.LFB17:
 209:src/lcd.c     **** void exp_left_side_top (int i, int j) {
 1105              		.loc 1 209 39 is_stmt 1 view -0
 1106              		.cfi_startproc
 1107              		@ args = 0, pretend = 0, frame = 0
 1108              		@ frame_needed = 0, uses_anonymous_args = 0
 1109              		@ link register save eliminated.
 210:src/lcd.c     ****   exp_left_side(i+1, j);
 1110              		.loc 1 210 3 view .LVU197
 1111 0000 0130     		adds	r0, r0, #1
 1112              	.LVL91:
 1113              		.loc 1 210 3 is_stmt 0 view .LVU198
 1114 0002 FFF7FEBF 		b	exp_left_side
 1115              	.LVL92:
 1116              		.loc 1 210 3 view .LVU199
 1117              		.cfi_endproc
 1118              	.LFE17:
 1120 0006 00BF     		.section	.text.exp_left_side_bottom,"ax",%progbits
 1121              		.align	1
 1122              		.p2align 2,,3
 1123              		.global	exp_left_side_bottom
 1124              		.syntax unified
 1125              		.thumb
 1126              		.thumb_func
 1127              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cccOP6XM.s 			page 25


 1129              	exp_left_side_bottom:
 1130              	.LVL93:
 1131              	.LFB18:
 211:src/lcd.c     **** }
 212:src/lcd.c     **** void exp_left_side_bottom (int i, int j) {
 1132              		.loc 1 212 42 is_stmt 1 view -0
 1133              		.cfi_startproc
 1134              		@ args = 0, pretend = 0, frame = 0
 1135              		@ frame_needed = 0, uses_anonymous_args = 0
 1136              		@ link register save eliminated.
 213:src/lcd.c     ****   exp_left_side(i, j+11);
 1137              		.loc 1 213 3 view .LVU201
 1138 0000 0B31     		adds	r1, r1, #11
 1139              	.LVL94:
 1140              		.loc 1 213 3 is_stmt 0 view .LVU202
 1141 0002 FFF7FEBF 		b	exp_left_side
 1142              	.LVL95:
 1143              		.loc 1 213 3 view .LVU203
 1144              		.cfi_endproc
 1145              	.LFE18:
 1147 0006 00BF     		.section	.text.exp_right_side,"ax",%progbits
 1148              		.align	1
 1149              		.p2align 2,,3
 1150              		.global	exp_right_side
 1151              		.syntax unified
 1152              		.thumb
 1153              		.thumb_func
 1154              		.fpu fpv4-sp-d16
 1156              	exp_right_side:
 1157              	.LVL96:
 1158              	.LFB19:
 214:src/lcd.c     **** }
 215:src/lcd.c     **** void exp_right_side (int i, int j) {
 1159              		.loc 1 215 36 is_stmt 1 view -0
 1160              		.cfi_startproc
 1161              		@ args = 0, pretend = 0, frame = 0
 1162              		@ frame_needed = 0, uses_anonymous_args = 0
 216:src/lcd.c     ****   lcd_fill_rect (i+12, j, 1, 6, 0xff );
 1163              		.loc 1 216 3 view .LVU205
 215:src/lcd.c     ****   lcd_fill_rect (i+12, j, 1, 6, 0xff );
 1164              		.loc 1 215 36 is_stmt 0 view .LVU206
 1165 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1166              		.cfi_def_cfa_offset 20
 1167              		.cfi_offset 4, -20
 1168              		.cfi_offset 5, -16
 1169              		.cfi_offset 6, -12
 1170              		.cfi_offset 7, -8
 1171              		.cfi_offset 14, -4
 1172 0002 83B0     		sub	sp, sp, #12
 1173              		.cfi_def_cfa_offset 32
 1174              		.loc 1 216 3 view .LVU207
 1175 0004 FF27     		movs	r7, #255
 1176 0006 0F4E     		ldr	r6, .L62
 1177 0008 0097     		str	r7, [sp]
 215:src/lcd.c     ****   lcd_fill_rect (i+12, j, 1, 6, 0xff );
 1178              		.loc 1 215 36 view .LVU208
 1179 000a 0446     		mov	r4, r0
ARM GAS  /tmp/cccOP6XM.s 			page 26


 1180 000c 0D46     		mov	r5, r1
 1181              		.loc 1 216 3 view .LVU209
 1182 000e 0C30     		adds	r0, r0, #12
 1183              	.LVL97:
 1184              		.loc 1 216 3 view .LVU210
 1185 0010 0623     		movs	r3, #6
 1186 0012 0122     		movs	r2, #1
 1187 0014 B047     		blx	r6
 1188              	.LVL98:
 217:src/lcd.c     ****   lcd_fill_rect (i+11, j+1, 1, 11, 0xff );
 1189              		.loc 1 217 3 is_stmt 1 view .LVU211
 1190 0016 691C     		adds	r1, r5, #1
 1191 0018 04F10B00 		add	r0, r4, #11
 1192 001c 0097     		str	r7, [sp]
 1193 001e 0B23     		movs	r3, #11
 1194 0020 0122     		movs	r2, #1
 1195 0022 B047     		blx	r6
 1196              	.LVL99:
 218:src/lcd.c     ****   lcd_fill_rect (i+10, j+2, 1, 9, 0xff );
 1197              		.loc 1 218 3 view .LVU212
 1198 0024 A91C     		adds	r1, r5, #2
 1199 0026 04F10A00 		add	r0, r4, #10
 1200 002a 0097     		str	r7, [sp]
 1201 002c 0923     		movs	r3, #9
 1202 002e 0122     		movs	r2, #1
 1203 0030 B047     		blx	r6
 1204              	.LVL100:
 219:src/lcd.c     ****   lcd_fill_rect (i+9, j+6, 1, 4, 0xff );
 1205              		.loc 1 219 3 view .LVU213
 1206 0032 A91D     		adds	r1, r5, #6
 1207 0034 04F10900 		add	r0, r4, #9
 1208 0038 0097     		str	r7, [sp]
 1209 003a 0423     		movs	r3, #4
 1210 003c 0122     		movs	r2, #1
 1211 003e B047     		blx	r6
 1212              	.LVL101:
 220:src/lcd.c     **** }
 1213              		.loc 1 220 1 is_stmt 0 view .LVU214
 1214 0040 03B0     		add	sp, sp, #12
 1215              		.cfi_def_cfa_offset 20
 1216              		@ sp needed
 1217 0042 F0BD     		pop	{r4, r5, r6, r7, pc}
 1218              	.LVL102:
 1219              	.L63:
 1220              		.loc 1 220 1 view .LVU215
 1221              		.align	2
 1222              	.L62:
 1223 0044 3D020008 		.word	134218301
 1224              		.cfi_endproc
 1225              	.LFE19:
 1227              		.section	.text.exp_right_side_top,"ax",%progbits
 1228              		.align	1
 1229              		.p2align 2,,3
 1230              		.global	exp_right_side_top
 1231              		.syntax unified
 1232              		.thumb
 1233              		.thumb_func
ARM GAS  /tmp/cccOP6XM.s 			page 27


 1234              		.fpu fpv4-sp-d16
 1236              	exp_right_side_top:
 1237              	.LVL103:
 1238              	.LFB20:
 221:src/lcd.c     **** void exp_right_side_top (int i, int j) {
 1239              		.loc 1 221 40 is_stmt 1 view -0
 1240              		.cfi_startproc
 1241              		@ args = 0, pretend = 0, frame = 0
 1242              		@ frame_needed = 0, uses_anonymous_args = 0
 1243              		@ link register save eliminated.
 222:src/lcd.c     ****   exp_right_side(i, j);
 1244              		.loc 1 222 3 view .LVU217
 1245 0000 FFF7FEBF 		b	exp_right_side
 1246              	.LVL104:
 1247              		.loc 1 222 3 is_stmt 0 view .LVU218
 1248              		.cfi_endproc
 1249              	.LFE20:
 1251              		.section	.text.exp_right_side_bottom,"ax",%progbits
 1252              		.align	1
 1253              		.p2align 2,,3
 1254              		.global	exp_right_side_bottom
 1255              		.syntax unified
 1256              		.thumb
 1257              		.thumb_func
 1258              		.fpu fpv4-sp-d16
 1260              	exp_right_side_bottom:
 1261              	.LVL105:
 1262              	.LFB21:
 223:src/lcd.c     **** }
 224:src/lcd.c     **** void exp_right_side_bottom (int i, int j) {
 1263              		.loc 1 224 43 is_stmt 1 view -0
 1264              		.cfi_startproc
 1265              		@ args = 0, pretend = 0, frame = 0
 1266              		@ frame_needed = 0, uses_anonymous_args = 0
 1267              		@ link register save eliminated.
 225:src/lcd.c     ****   exp_right_side(i-1, j+11);
 1268              		.loc 1 225 3 view .LVU220
 1269 0000 0138     		subs	r0, r0, #1
 1270              	.LVL106:
 1271              		.loc 1 225 3 is_stmt 0 view .LVU221
 1272 0002 0B31     		adds	r1, r1, #11
 1273              	.LVL107:
 1274              		.loc 1 225 3 view .LVU222
 1275 0004 FFF7FEBF 		b	exp_right_side
 1276              	.LVL108:
 1277              		.loc 1 225 3 view .LVU223
 1278              		.cfi_endproc
 1279              	.LFE21:
 1281              		.section	.text.exp_top,"ax",%progbits
 1282              		.align	1
 1283              		.p2align 2,,3
 1284              		.global	exp_top
 1285              		.syntax unified
 1286              		.thumb
 1287              		.thumb_func
 1288              		.fpu fpv4-sp-d16
 1290              	exp_top:
ARM GAS  /tmp/cccOP6XM.s 			page 28


 1291              	.LVL109:
 1292              	.LFB22:
 226:src/lcd.c     **** }
 227:src/lcd.c     **** void exp_top (int i, int j) {
 1293              		.loc 1 227 29 is_stmt 1 view -0
 1294              		.cfi_startproc
 1295              		@ args = 0, pretend = 0, frame = 0
 1296              		@ frame_needed = 0, uses_anonymous_args = 0
 228:src/lcd.c     ****   lcd_fill_rect (i+4, j, 7, 1, 0xff );
 1297              		.loc 1 228 3 view .LVU225
 227:src/lcd.c     ****   lcd_fill_rect (i+4, j, 7, 1, 0xff );
 1298              		.loc 1 227 29 is_stmt 0 view .LVU226
 1299 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1300              		.cfi_def_cfa_offset 20
 1301              		.cfi_offset 4, -20
 1302              		.cfi_offset 5, -16
 1303              		.cfi_offset 6, -12
 1304              		.cfi_offset 7, -8
 1305              		.cfi_offset 14, -4
 1306 0002 83B0     		sub	sp, sp, #12
 1307              		.cfi_def_cfa_offset 32
 1308              		.loc 1 228 3 view .LVU227
 1309 0004 FF27     		movs	r7, #255
 1310 0006 0B4E     		ldr	r6, .L68
 1311 0008 0097     		str	r7, [sp]
 227:src/lcd.c     ****   lcd_fill_rect (i+4, j, 7, 1, 0xff );
 1312              		.loc 1 227 29 view .LVU228
 1313 000a 0446     		mov	r4, r0
 1314 000c 0D46     		mov	r5, r1
 1315              		.loc 1 228 3 view .LVU229
 1316 000e 0430     		adds	r0, r0, #4
 1317              	.LVL110:
 1318              		.loc 1 228 3 view .LVU230
 1319 0010 0123     		movs	r3, #1
 1320 0012 0722     		movs	r2, #7
 1321 0014 B047     		blx	r6
 1322              	.LVL111:
 229:src/lcd.c     ****   lcd_fill_rect (i+5, j+1, 5, 1, 0xff );
 1323              		.loc 1 229 3 is_stmt 1 view .LVU231
 1324 0016 691C     		adds	r1, r5, #1
 1325 0018 601D     		adds	r0, r4, #5
 1326 001a 0097     		str	r7, [sp]
 1327 001c 0123     		movs	r3, #1
 1328 001e 0522     		movs	r2, #5
 1329 0020 B047     		blx	r6
 1330              	.LVL112:
 230:src/lcd.c     ****   lcd_fill_rect (i+6, j+2, 3, 1, 0xff );
 1331              		.loc 1 230 3 view .LVU232
 1332 0022 A91C     		adds	r1, r5, #2
 1333 0024 A01D     		adds	r0, r4, #6
 1334 0026 0097     		str	r7, [sp]
 1335 0028 0123     		movs	r3, #1
 1336 002a 0322     		movs	r2, #3
 1337 002c B047     		blx	r6
 1338              	.LVL113:
 231:src/lcd.c     **** }
 1339              		.loc 1 231 1 is_stmt 0 view .LVU233
ARM GAS  /tmp/cccOP6XM.s 			page 29


 1340 002e 03B0     		add	sp, sp, #12
 1341              		.cfi_def_cfa_offset 20
 1342              		@ sp needed
 1343 0030 F0BD     		pop	{r4, r5, r6, r7, pc}
 1344              	.LVL114:
 1345              	.L69:
 1346              		.loc 1 231 1 view .LVU234
 1347 0032 00BF     		.align	2
 1348              	.L68:
 1349 0034 3D020008 		.word	134218301
 1350              		.cfi_endproc
 1351              	.LFE22:
 1353              		.section	.text.exp_bottom,"ax",%progbits
 1354              		.align	1
 1355              		.p2align 2,,3
 1356              		.global	exp_bottom
 1357              		.syntax unified
 1358              		.thumb
 1359              		.thumb_func
 1360              		.fpu fpv4-sp-d16
 1362              	exp_bottom:
 1363              	.LVL115:
 1364              	.LFB23:
 232:src/lcd.c     **** void exp_bottom (int i, int j) {
 1365              		.loc 1 232 32 is_stmt 1 view -0
 1366              		.cfi_startproc
 1367              		@ args = 0, pretend = 0, frame = 0
 1368              		@ frame_needed = 0, uses_anonymous_args = 0
 233:src/lcd.c     ****   lcd_fill_rect (i+2, j+22, 7, 1, 0xff );
 1369              		.loc 1 233 3 view .LVU236
 232:src/lcd.c     **** void exp_bottom (int i, int j) {
 1370              		.loc 1 232 32 is_stmt 0 view .LVU237
 1371 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1372              		.cfi_def_cfa_offset 20
 1373              		.cfi_offset 4, -20
 1374              		.cfi_offset 5, -16
 1375              		.cfi_offset 6, -12
 1376              		.cfi_offset 7, -8
 1377              		.cfi_offset 14, -4
 1378 0002 83B0     		sub	sp, sp, #12
 1379              		.cfi_def_cfa_offset 32
 1380              		.loc 1 233 3 view .LVU238
 1381 0004 FF27     		movs	r7, #255
 1382 0006 0C4E     		ldr	r6, .L72
 1383 0008 0097     		str	r7, [sp]
 232:src/lcd.c     **** void exp_bottom (int i, int j) {
 1384              		.loc 1 232 32 view .LVU239
 1385 000a 0446     		mov	r4, r0
 1386 000c 0D46     		mov	r5, r1
 1387              		.loc 1 233 3 view .LVU240
 1388 000e 0230     		adds	r0, r0, #2
 1389              	.LVL116:
 1390              		.loc 1 233 3 view .LVU241
 1391 0010 1631     		adds	r1, r1, #22
 1392              	.LVL117:
 1393              		.loc 1 233 3 view .LVU242
 1394 0012 0123     		movs	r3, #1
ARM GAS  /tmp/cccOP6XM.s 			page 30


 1395 0014 0722     		movs	r2, #7
 1396 0016 B047     		blx	r6
 1397              	.LVL118:
 234:src/lcd.c     ****   lcd_fill_rect (i+3, j+21, 5, 1, 0xff );
 1398              		.loc 1 234 3 is_stmt 1 view .LVU243
 1399 0018 05F11501 		add	r1, r5, #21
 1400 001c E01C     		adds	r0, r4, #3
 1401 001e 0097     		str	r7, [sp]
 1402 0020 0123     		movs	r3, #1
 1403 0022 0522     		movs	r2, #5
 1404 0024 B047     		blx	r6
 1405              	.LVL119:
 235:src/lcd.c     ****   lcd_fill_rect (i+4, j+20, 3, 1, 0xff );
 1406              		.loc 1 235 3 view .LVU244
 1407 0026 05F11401 		add	r1, r5, #20
 1408 002a 201D     		adds	r0, r4, #4
 1409 002c 0097     		str	r7, [sp]
 1410 002e 0123     		movs	r3, #1
 1411 0030 0322     		movs	r2, #3
 1412 0032 B047     		blx	r6
 1413              	.LVL120:
 236:src/lcd.c     **** }
 1414              		.loc 1 236 1 is_stmt 0 view .LVU245
 1415 0034 03B0     		add	sp, sp, #12
 1416              		.cfi_def_cfa_offset 20
 1417              		@ sp needed
 1418 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 1419              	.LVL121:
 1420              	.L73:
 1421              		.loc 1 236 1 view .LVU246
 1422              		.align	2
 1423              	.L72:
 1424 0038 3D020008 		.word	134218301
 1425              		.cfi_endproc
 1426              	.LFE23:
 1428              		.section	.text.exp_middle,"ax",%progbits
 1429              		.align	1
 1430              		.p2align 2,,3
 1431              		.global	exp_middle
 1432              		.syntax unified
 1433              		.thumb
 1434              		.thumb_func
 1435              		.fpu fpv4-sp-d16
 1437              	exp_middle:
 1438              	.LVL122:
 1439              	.LFB24:
 237:src/lcd.c     **** void exp_middle (int i, int j) {
 1440              		.loc 1 237 32 is_stmt 1 view -0
 1441              		.cfi_startproc
 1442              		@ args = 0, pretend = 0, frame = 0
 1443              		@ frame_needed = 0, uses_anonymous_args = 0
 238:src/lcd.c     ****   lcd_fill_rect (i+4, j+10, 5, 1, 0xff );
 1444              		.loc 1 238 3 view .LVU248
 237:src/lcd.c     **** void exp_middle (int i, int j) {
 1445              		.loc 1 237 32 is_stmt 0 view .LVU249
 1446 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1447              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/cccOP6XM.s 			page 31


 1448              		.cfi_offset 4, -24
 1449              		.cfi_offset 5, -20
 1450              		.cfi_offset 6, -16
 1451              		.cfi_offset 7, -12
 1452              		.cfi_offset 8, -8
 1453              		.cfi_offset 14, -4
 1454 0004 82B0     		sub	sp, sp, #8
 1455              		.cfi_def_cfa_offset 32
 1456              		.loc 1 238 3 view .LVU250
 1457 0006 FF27     		movs	r7, #255
 1458              		.loc 1 238 19 view .LVU251
 1459 0008 00F10408 		add	r8, r0, #4
 1460              		.loc 1 238 3 view .LVU252
 1461 000c 0C4E     		ldr	r6, .L76
 1462 000e 0097     		str	r7, [sp]
 237:src/lcd.c     **** void exp_middle (int i, int j) {
 1463              		.loc 1 237 32 view .LVU253
 1464 0010 0C46     		mov	r4, r1
 1465 0012 0546     		mov	r5, r0
 1466              		.loc 1 238 3 view .LVU254
 1467 0014 0A31     		adds	r1, r1, #10
 1468              	.LVL123:
 1469              		.loc 1 238 3 view .LVU255
 1470 0016 4046     		mov	r0, r8
 1471              	.LVL124:
 1472              		.loc 1 238 3 view .LVU256
 1473 0018 0123     		movs	r3, #1
 1474 001a 0522     		movs	r2, #5
 1475 001c B047     		blx	r6
 1476              	.LVL125:
 239:src/lcd.c     ****   lcd_fill_rect (i+3, j+11, 7, 1, 0xff );
 1477              		.loc 1 239 3 is_stmt 1 view .LVU257
 1478 001e E81C     		adds	r0, r5, #3
 1479 0020 04F10B01 		add	r1, r4, #11
 1480 0024 0097     		str	r7, [sp]
 1481 0026 0123     		movs	r3, #1
 1482 0028 0722     		movs	r2, #7
 1483 002a B047     		blx	r6
 1484              	.LVL126:
 240:src/lcd.c     ****   lcd_fill_rect (i+4, j+12, 5, 1, 0xff );
 1485              		.loc 1 240 3 view .LVU258
 1486 002c 4046     		mov	r0, r8
 1487 002e 04F10C01 		add	r1, r4, #12
 1488 0032 0097     		str	r7, [sp]
 1489 0034 0123     		movs	r3, #1
 1490 0036 0522     		movs	r2, #5
 1491 0038 B047     		blx	r6
 1492              	.LVL127:
 241:src/lcd.c     **** }
 1493              		.loc 1 241 1 is_stmt 0 view .LVU259
 1494 003a 02B0     		add	sp, sp, #8
 1495              		.cfi_def_cfa_offset 24
 1496              		@ sp needed
 1497 003c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1498              	.LVL128:
 1499              	.L77:
 1500              		.loc 1 241 1 view .LVU260
ARM GAS  /tmp/cccOP6XM.s 			page 32


 1501              		.align	2
 1502              	.L76:
 1503 0040 3D020008 		.word	134218301
 1504              		.cfi_endproc
 1505              	.LFE24:
 1507              		.section	.rodata.show_disp.str1.4,"aMS",%progbits,1
 1508              		.align	2
 1509              	.LC0:
 1510 0000 494E5055 		.ascii	"INPUT\000"
 1510      5400
 1511 0006 0000     		.align	2
 1512              	.LC1:
 1513 0008 3D00     		.ascii	"=\000"
 1514 000a 0000     		.align	2
 1515              	.LC2:
 1516 000c 42454700 		.ascii	"BEG\000"
 1517              		.align	2
 1518              	.LC3:
 1519 0010 53544F00 		.ascii	"STO\000"
 1520              		.align	2
 1521              	.LC4:
 1522 0014 52434C00 		.ascii	"RCL\000"
 1523              		.align	2
 1524              	.LC5:
 1525 0018 52414400 		.ascii	"RAD\000"
 1526              		.align	2
 1527              	.LC6:
 1528 001c 33363000 		.ascii	"360\000"
 1529              		.align	2
 1530              	.LC7:
 1531 0020 52504E00 		.ascii	"RPN\000"
 1532              		.section	.text.show_disp,"ax",%progbits
 1533              		.align	1
 1534              		.p2align 2,,3
 1535              		.global	show_disp
 1536              		.syntax unified
 1537              		.thumb
 1538              		.thumb_func
 1539              		.fpu fpv4-sp-d16
 1541              	show_disp:
 1542              	.LFB25:
 242:src/lcd.c     ****   
 243:src/lcd.c     **** void show_disp(void) { // This function re-draws everything.
 1543              		.loc 1 243 22 is_stmt 1 view -0
 1544              		.cfi_startproc
 1545              		@ args = 0, pretend = 0, frame = 0
 1546              		@ frame_needed = 0, uses_anonymous_args = 0
 244:src/lcd.c     ****   // It may be fast enough. It does mean that clearing everything first is needed,
 245:src/lcd.c     ****   // or we keep track of changes.
 246:src/lcd.c     ****   // Try clearing everything first first.
 247:src/lcd.c     ****         int i, j, p;
 1547              		.loc 1 247 9 view .LVU262
 248:src/lcd.c     **** 	uint32_t x;
 1548              		.loc 1 248 2 view .LVU263
 249:src/lcd.c     **** 	const uint32_t xleft = 26;
 1549              		.loc 1 249 2 view .LVU264
 1550              	.LVL129:
ARM GAS  /tmp/cccOP6XM.s 			page 33


 250:src/lcd.c     **** 	const uint32_t ytop = 130; // was 170
 1551              		.loc 1 250 2 view .LVU265
 251:src/lcd.c     **** 	const uint32_t dwidth = 25;
 1552              		.loc 1 251 2 view .LVU266
 252:src/lcd.c     **** 	const uint32_t xleft_exp = 344;
 1553              		.loc 1 252 2 view .LVU267
 253:src/lcd.c     **** 	const uint32_t ytop_exp = 130; // was 170
 1554              		.loc 1 253 2 view .LVU268
 254:src/lcd.c     **** 	const uint32_t dwidth_exp = 18;
 1555              		.loc 1 254 2 view .LVU269
 255:src/lcd.c     **** #ifdef BIGGER_DISPLAY
 256:src/lcd.c     **** 	const uint32_t y_ann = 70;
 1556              		.loc 1 256 2 view .LVU270
 257:src/lcd.c     **** #else
 258:src/lcd.c     **** 	const uint32_t y_ann = 130;
 259:src/lcd.c     **** #endif
 260:src/lcd.c     ****         /* Segments 0 - 107 are the main digits */
 261:src/lcd.c     ****         for (i=0; i<DISPLAY_DIGITS; i++) { // 0 -> 11 inclusive
 1557              		.loc 1 261 9 view .LVU271
 1558              		.loc 1 261 19 view .LVU272
 243:src/lcd.c     ****   // It may be fast enough. It does mean that clearing everything first is needed,
 1559              		.loc 1 243 22 is_stmt 0 view .LVU273
 1560 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1561              		.cfi_def_cfa_offset 36
 1562              		.cfi_offset 4, -36
 1563              		.cfi_offset 5, -32
 1564              		.cfi_offset 6, -28
 1565              		.cfi_offset 7, -24
 1566              		.cfi_offset 8, -20
 1567              		.cfi_offset 9, -16
 1568              		.cfi_offset 10, -12
 1569              		.cfi_offset 11, -8
 1570              		.cfi_offset 14, -4
 1571 0004 2F4D     		ldr	r5, .L223
 1572              	.LBB65:
 1573              	.LBB66:
 196:src/lcd.c     **** }
 1574              		.loc 1 196 3 view .LVU274
 1575 0006 DFF8C080 		ldr	r8, .L223+4
 1576              	.LBE66:
 1577              	.LBE65:
 243:src/lcd.c     ****   // It may be fast enough. It does mean that clearing everything first is needed,
 1578              		.loc 1 243 22 view .LVU275
 1579 000a 83B0     		sub	sp, sp, #12
 1580              		.cfi_def_cfa_offset 48
 243:src/lcd.c     ****   // It may be fast enough. It does mean that clearing everything first is needed,
 1581              		.loc 1 243 22 view .LVU276
 1582 000c 2F46     		mov	r7, r5
 1583 000e 2C46     		mov	r4, r5
 1584 0010 1A26     		movs	r6, #26
 1585 0012 24E0     		b	.L88
 1586              	.LVL130:
 1587              	.L79:
 262:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 263:src/lcd.c     ****                 x = xleft + dwidth*i;
 264:src/lcd.c     ****                 if (dots[p]) { // top
 265:src/lcd.c     **** 		  top (x, ytop);
ARM GAS  /tmp/cccOP6XM.s 			page 34


 266:src/lcd.c     ****                 }
 267:src/lcd.c     ****                 if (dots[p+1]) { // top left
 1588              		.loc 1 267 17 is_stmt 1 view .LVU277
 1589              		.loc 1 267 20 is_stmt 0 view .LVU278
 1590 0014 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1591 0016 002B     		cmp	r3, #0
 1592 0018 2BD1     		bne	.L206
 1593              	.L80:
 268:src/lcd.c     **** 		  left_side_top (x, ytop);
 269:src/lcd.c     ****                 }
 270:src/lcd.c     ****                 if (dots[p+3]) { // top right
 1594              		.loc 1 270 17 is_stmt 1 view .LVU279
 1595              		.loc 1 270 20 is_stmt 0 view .LVU280
 1596 001a E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
 1597 001c 002B     		cmp	r3, #0
 1598 001e 2FD1     		bne	.L207
 1599              	.L81:
 271:src/lcd.c     **** 		  right_side_top (x, ytop);
 272:src/lcd.c     ****                 }
 273:src/lcd.c     ****                 if (dots[p+2]) { // centre line
 1600              		.loc 1 273 17 is_stmt 1 view .LVU281
 1601              		.loc 1 273 20 is_stmt 0 view .LVU282
 1602 0020 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 1603 0022 002B     		cmp	r3, #0
 1604 0024 33D1     		bne	.L208
 1605              	.L82:
 274:src/lcd.c     **** 		  middle (x, ytop);
 275:src/lcd.c     ****                 }
 276:src/lcd.c     ****                 if (dots[p+4]) { // lower left
 1606              		.loc 1 276 17 is_stmt 1 view .LVU283
 1607              		.loc 1 276 20 is_stmt 0 view .LVU284
 1608 0026 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 1609 0028 002B     		cmp	r3, #0
 1610 002a 37D1     		bne	.L209
 1611              	.L83:
 277:src/lcd.c     **** 		  left_side_bottom (x, ytop);
 278:src/lcd.c     ****                 }
 279:src/lcd.c     ****                 if (dots[p+6]) { // lower right
 1612              		.loc 1 279 17 is_stmt 1 view .LVU285
 1613              		.loc 1 279 20 is_stmt 0 view .LVU286
 1614 002c A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 1615 002e 002B     		cmp	r3, #0
 1616 0030 3BD1     		bne	.L210
 1617              	.L84:
 280:src/lcd.c     **** 		  right_side_bottom (x, ytop);
 281:src/lcd.c     ****                 }
 282:src/lcd.c     ****                 if (dots[p+5]) { // bottom
 1618              		.loc 1 282 17 is_stmt 1 view .LVU287
 1619              		.loc 1 282 20 is_stmt 0 view .LVU288
 1620 0032 6379     		ldrb	r3, [r4, #5]	@ zero_extendqisi2
 1621 0034 002B     		cmp	r3, #0
 1622 0036 3FD1     		bne	.L211
 1623              	.L85:
 283:src/lcd.c     **** 		  bottom (x, ytop);
 284:src/lcd.c     ****                 }
 285:src/lcd.c     ****                 if (dots[p+7]) { // point
 1624              		.loc 1 285 17 is_stmt 1 view .LVU289
ARM GAS  /tmp/cccOP6XM.s 			page 35


 1625              		.loc 1 285 20 is_stmt 0 view .LVU290
 1626 0038 E379     		ldrb	r3, [r4, #7]	@ zero_extendqisi2
 1627 003a 3BB1     		cbz	r3, .L86
 286:src/lcd.c     **** 		  decimal (x, ytop);
 1628              		.loc 1 286 5 is_stmt 1 view .LVU291
 1629              	.LVL131:
 1630              	.LBB68:
 1631              	.LBI65:
 195:src/lcd.c     ****   lcd_fill_rect (i+19, j+40, 5, 5, 0xff);
 1632              		.loc 1 195 6 view .LVU292
 1633              	.LBB67:
 196:src/lcd.c     **** }
 1634              		.loc 1 196 3 view .LVU293
 1635 003c FF22     		movs	r2, #255
 1636 003e 0523     		movs	r3, #5
 1637 0040 0092     		str	r2, [sp]
 1638 0042 AA21     		movs	r1, #170
 1639 0044 1A46     		mov	r2, r3
 1640 0046 06F11300 		add	r0, r6, #19
 1641 004a C047     		blx	r8
 1642              	.LVL132:
 1643              	.L86:
 196:src/lcd.c     **** }
 1644              		.loc 1 196 3 is_stmt 0 view .LVU294
 1645              	.LBE67:
 1646              	.LBE68:
 287:src/lcd.c     ****                 }
 288:src/lcd.c     ****                 if (dots[p+8]) { // comma
 1647              		.loc 1 288 17 is_stmt 1 view .LVU295
 1648              		.loc 1 288 20 is_stmt 0 view .LVU296
 1649 004c 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 1650 004e 002B     		cmp	r3, #0
 1651 0050 3CD1     		bne	.L212
 261:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 1652              		.loc 1 261 37 is_stmt 1 discriminator 2 view .LVU297
 261:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 1653              		.loc 1 261 19 discriminator 2 view .LVU298
 1654 0052 1936     		adds	r6, r6, #25
 1655              	.LVL133:
 261:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 1656              		.loc 1 261 9 is_stmt 0 discriminator 2 view .LVU299
 1657 0054 B6F5A37F 		cmp	r6, #326
 1658 0058 04F10904 		add	r4, r4, #9
 1659              	.LVL134:
 261:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 1660              		.loc 1 261 9 discriminator 2 view .LVU300
 1661 005c 40D0     		beq	.L213
 1662              	.LVL135:
 1663              	.L88:
 262:src/lcd.c     ****                 x = xleft + dwidth*i;
 1664              		.loc 1 262 17 is_stmt 1 view .LVU301
 263:src/lcd.c     ****                 if (dots[p]) { // top
 1665              		.loc 1 263 17 view .LVU302
 264:src/lcd.c     **** 		  top (x, ytop);
 1666              		.loc 1 264 17 view .LVU303
 264:src/lcd.c     **** 		  top (x, ytop);
 1667              		.loc 1 264 20 is_stmt 0 view .LVU304
ARM GAS  /tmp/cccOP6XM.s 			page 36


 1668 005e 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1669 0060 002B     		cmp	r3, #0
 1670 0062 D7D0     		beq	.L79
 265:src/lcd.c     ****                 }
 1671              		.loc 1 265 5 is_stmt 1 view .LVU305
 1672 0064 8221     		movs	r1, #130
 1673 0066 3046     		mov	r0, r6
 1674 0068 FFF7FEFF 		bl	top
 1675              	.LVL136:
 267:src/lcd.c     **** 		  left_side_top (x, ytop);
 1676              		.loc 1 267 17 view .LVU306
 267:src/lcd.c     **** 		  left_side_top (x, ytop);
 1677              		.loc 1 267 20 is_stmt 0 view .LVU307
 1678 006c 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1679 006e 002B     		cmp	r3, #0
 1680 0070 D3D0     		beq	.L80
 1681              	.L206:
 268:src/lcd.c     ****                 }
 1682              		.loc 1 268 5 is_stmt 1 view .LVU308
 1683              	.LVL137:
 1684              	.LBB69:
 1685              	.LBI69:
 159:src/lcd.c     ****   left_side(i, j);
 1686              		.loc 1 159 6 view .LVU309
 1687              	.LBB70:
 160:src/lcd.c     **** }
 1688              		.loc 1 160 3 view .LVU310
 1689 0072 8221     		movs	r1, #130
 1690 0074 3046     		mov	r0, r6
 1691 0076 FFF7FEFF 		bl	left_side
 1692              	.LVL138:
 160:src/lcd.c     **** }
 1693              		.loc 1 160 3 is_stmt 0 view .LVU311
 1694              	.LBE70:
 1695              	.LBE69:
 270:src/lcd.c     **** 		  right_side_top (x, ytop);
 1696              		.loc 1 270 17 is_stmt 1 view .LVU312
 270:src/lcd.c     **** 		  right_side_top (x, ytop);
 1697              		.loc 1 270 20 is_stmt 0 view .LVU313
 1698 007a E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
 1699 007c 002B     		cmp	r3, #0
 1700 007e CFD0     		beq	.L81
 1701              	.L207:
 271:src/lcd.c     ****                 }
 1702              		.loc 1 271 5 is_stmt 1 view .LVU314
 1703              	.LVL139:
 1704              	.LBB71:
 1705              	.LBI71:
 172:src/lcd.c     ****   right_side(i, j);
 1706              		.loc 1 172 6 view .LVU315
 1707              	.LBB72:
 173:src/lcd.c     **** }
 1708              		.loc 1 173 3 view .LVU316
 1709 0080 8221     		movs	r1, #130
 1710 0082 3046     		mov	r0, r6
 1711 0084 FFF7FEFF 		bl	right_side
 1712              	.LVL140:
ARM GAS  /tmp/cccOP6XM.s 			page 37


 173:src/lcd.c     **** }
 1713              		.loc 1 173 3 is_stmt 0 view .LVU317
 1714              	.LBE72:
 1715              	.LBE71:
 273:src/lcd.c     **** 		  middle (x, ytop);
 1716              		.loc 1 273 17 is_stmt 1 view .LVU318
 273:src/lcd.c     **** 		  middle (x, ytop);
 1717              		.loc 1 273 20 is_stmt 0 view .LVU319
 1718 0088 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 1719 008a 002B     		cmp	r3, #0
 1720 008c CBD0     		beq	.L82
 1721              	.L208:
 274:src/lcd.c     ****                 }
 1722              		.loc 1 274 5 is_stmt 1 view .LVU320
 1723 008e 8221     		movs	r1, #130
 1724 0090 3046     		mov	r0, r6
 1725 0092 FFF7FEFF 		bl	middle
 1726              	.LVL141:
 276:src/lcd.c     **** 		  left_side_bottom (x, ytop);
 1727              		.loc 1 276 17 view .LVU321
 276:src/lcd.c     **** 		  left_side_bottom (x, ytop);
 1728              		.loc 1 276 20 is_stmt 0 view .LVU322
 1729 0096 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 1730 0098 002B     		cmp	r3, #0
 1731 009a C7D0     		beq	.L83
 1732              	.L209:
 277:src/lcd.c     ****                 }
 1733              		.loc 1 277 5 is_stmt 1 view .LVU323
 1734              	.LVL142:
 1735              	.LBB73:
 1736              	.LBI73:
 162:src/lcd.c     ****   left_side(i-2, j+19);
 1737              		.loc 1 162 6 view .LVU324
 1738              	.LBB74:
 163:src/lcd.c     **** }
 1739              		.loc 1 163 3 view .LVU325
 1740 009c 9521     		movs	r1, #149
 1741 009e B01E     		subs	r0, r6, #2
 1742 00a0 FFF7FEFF 		bl	left_side
 1743              	.LVL143:
 163:src/lcd.c     **** }
 1744              		.loc 1 163 3 is_stmt 0 view .LVU326
 1745              	.LBE74:
 1746              	.LBE73:
 279:src/lcd.c     **** 		  right_side_bottom (x, ytop);
 1747              		.loc 1 279 17 is_stmt 1 view .LVU327
 279:src/lcd.c     **** 		  right_side_bottom (x, ytop);
 1748              		.loc 1 279 20 is_stmt 0 view .LVU328
 1749 00a4 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 1750 00a6 002B     		cmp	r3, #0
 1751 00a8 C3D0     		beq	.L84
 1752              	.L210:
 280:src/lcd.c     ****                 }
 1753              		.loc 1 280 5 is_stmt 1 view .LVU329
 1754              	.LVL144:
 1755              	.LBB75:
 1756              	.LBI75:
ARM GAS  /tmp/cccOP6XM.s 			page 38


 175:src/lcd.c     ****   right_side(i-2, j+19);
 1757              		.loc 1 175 6 view .LVU330
 1758              	.LBB76:
 176:src/lcd.c     **** }
 1759              		.loc 1 176 3 view .LVU331
 1760 00aa 9521     		movs	r1, #149
 1761 00ac B01E     		subs	r0, r6, #2
 1762 00ae FFF7FEFF 		bl	right_side
 1763              	.LVL145:
 176:src/lcd.c     **** }
 1764              		.loc 1 176 3 is_stmt 0 view .LVU332
 1765              	.LBE76:
 1766              	.LBE75:
 282:src/lcd.c     **** 		  bottom (x, ytop);
 1767              		.loc 1 282 17 is_stmt 1 view .LVU333
 282:src/lcd.c     **** 		  bottom (x, ytop);
 1768              		.loc 1 282 20 is_stmt 0 view .LVU334
 1769 00b2 6379     		ldrb	r3, [r4, #5]	@ zero_extendqisi2
 1770 00b4 002B     		cmp	r3, #0
 1771 00b6 BFD0     		beq	.L85
 1772              	.L211:
 283:src/lcd.c     ****                 }
 1773              		.loc 1 283 5 is_stmt 1 view .LVU335
 1774 00b8 8221     		movs	r1, #130
 1775 00ba 3046     		mov	r0, r6
 1776 00bc FFF7FEFF 		bl	bottom
 1777              	.LVL146:
 1778 00c0 BAE7     		b	.L85
 1779              	.L224:
 1780 00c2 00BF     		.align	2
 1781              	.L223:
 1782 00c4 00000000 		.word	.LANCHOR0
 1783 00c8 3D020008 		.word	134218301
 1784              	.L212:
 289:src/lcd.c     **** 		  comma (x, ytop);
 1785              		.loc 1 289 5 view .LVU336
 1786 00cc 3046     		mov	r0, r6
 1787 00ce 8221     		movs	r1, #130
 1788 00d0 1936     		adds	r6, r6, #25
 1789              	.LVL147:
 1790              		.loc 1 289 5 is_stmt 0 view .LVU337
 1791 00d2 FFF7FEFF 		bl	comma
 1792              	.LVL148:
 261:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 1793              		.loc 1 261 37 is_stmt 1 view .LVU338
 261:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 1794              		.loc 1 261 19 view .LVU339
 261:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 1795              		.loc 1 261 9 is_stmt 0 view .LVU340
 1796 00d6 B6F5A37F 		cmp	r6, #326
 1797 00da 04F10904 		add	r4, r4, #9
 1798              	.LVL149:
 261:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 1799              		.loc 1 261 9 view .LVU341
 1800 00de BED1     		bne	.L88
 1801              	.LVL150:
 1802              	.L213:
ARM GAS  /tmp/cccOP6XM.s 			page 39


 261:src/lcd.c     ****                 p = i*SEGS_PER_DIGIT;
 1803              		.loc 1 261 9 view .LVU342
 1804 00e0 9F4C     		ldr	r4, .L225
 1805 00e2 4FF4AC76 		mov	r6, #344
 1806              	.L96:
 290:src/lcd.c     ****                 }
 291:src/lcd.c     ****         }
 292:src/lcd.c     ****         /* Segments 108 - 128 are the exponent digits */
 293:src/lcd.c     ****         for (i=0; i<3; i++) {
 294:src/lcd.c     ****                 p = i*7+108;
 1807              		.loc 1 294 17 is_stmt 1 view .LVU343
 1808              	.LVL151:
 295:src/lcd.c     ****                 x = xleft_exp + dwidth_exp*i;
 1809              		.loc 1 295 17 view .LVU344
 296:src/lcd.c     ****                 if (dots[p]) { // top
 1810              		.loc 1 296 17 view .LVU345
 1811              		.loc 1 296 20 is_stmt 0 view .LVU346
 1812 00e6 94F86C30 		ldrb	r3, [r4, #108]	@ zero_extendqisi2
 1813 00ea 002B     		cmp	r3, #0
 1814 00ec 40F02381 		bne	.L214
 1815              	.L89:
 297:src/lcd.c     **** 		  exp_top (x, ytop_exp);
 298:src/lcd.c     ****                 }
 299:src/lcd.c     ****                 if (dots[p+1]) { // top left
 1816              		.loc 1 299 17 is_stmt 1 view .LVU347
 1817              		.loc 1 299 20 is_stmt 0 view .LVU348
 1818 00f0 94F86D30 		ldrb	r3, [r4, #109]	@ zero_extendqisi2
 1819 00f4 002B     		cmp	r3, #0
 1820 00f6 40F01981 		bne	.L215
 1821              	.L90:
 300:src/lcd.c     **** 		  exp_left_side_top (x, ytop_exp);
 301:src/lcd.c     ****                 }
 302:src/lcd.c     ****                 if (dots[p+3]) { // top right
 1822              		.loc 1 302 17 is_stmt 1 view .LVU349
 1823              		.loc 1 302 20 is_stmt 0 view .LVU350
 1824 00fa 94F86F30 		ldrb	r3, [r4, #111]	@ zero_extendqisi2
 1825 00fe 002B     		cmp	r3, #0
 1826 0100 40F00F81 		bne	.L216
 1827              	.L91:
 303:src/lcd.c     **** 		  exp_right_side_top (x, ytop_exp);
 304:src/lcd.c     ****                 }
 305:src/lcd.c     ****                 if (dots[p+2]) { // centre line
 1828              		.loc 1 305 17 is_stmt 1 view .LVU351
 1829              		.loc 1 305 20 is_stmt 0 view .LVU352
 1830 0104 94F86E30 		ldrb	r3, [r4, #110]	@ zero_extendqisi2
 1831 0108 002B     		cmp	r3, #0
 1832 010a 40F00581 		bne	.L217
 1833              	.L92:
 306:src/lcd.c     **** 		  exp_middle (x, ytop_exp);
 307:src/lcd.c     ****                 }
 308:src/lcd.c     ****                 if (dots[p+4]) { // lower left
 1834              		.loc 1 308 17 is_stmt 1 view .LVU353
 1835              		.loc 1 308 20 is_stmt 0 view .LVU354
 1836 010e 94F87030 		ldrb	r3, [r4, #112]	@ zero_extendqisi2
 1837 0112 002B     		cmp	r3, #0
 1838 0114 40F0FB80 		bne	.L218
 1839              	.L93:
ARM GAS  /tmp/cccOP6XM.s 			page 40


 309:src/lcd.c     **** 		  exp_left_side_bottom (x, ytop_exp);
 310:src/lcd.c     ****                 }
 311:src/lcd.c     ****                 if (dots[p+6]) { // lower right
 1840              		.loc 1 311 17 is_stmt 1 view .LVU355
 1841              		.loc 1 311 20 is_stmt 0 view .LVU356
 1842 0118 94F87230 		ldrb	r3, [r4, #114]	@ zero_extendqisi2
 1843 011c 002B     		cmp	r3, #0
 1844 011e 40F0F180 		bne	.L219
 1845              	.L94:
 312:src/lcd.c     **** 		  exp_right_side_bottom (x, ytop_exp);
 313:src/lcd.c     ****                 }
 314:src/lcd.c     ****                 if (dots[p+5]) { // bottom
 1846              		.loc 1 314 17 is_stmt 1 view .LVU357
 1847              		.loc 1 314 20 is_stmt 0 view .LVU358
 1848 0122 94F87130 		ldrb	r3, [r4, #113]	@ zero_extendqisi2
 1849 0126 002B     		cmp	r3, #0
 1850 0128 40F0E780 		bne	.L220
 1851              	.L95:
 293:src/lcd.c     ****                 p = i*7+108;
 1852              		.loc 1 293 24 is_stmt 1 discriminator 2 view .LVU359
 293:src/lcd.c     ****                 p = i*7+108;
 1853              		.loc 1 293 19 discriminator 2 view .LVU360
 1854 012c 1236     		adds	r6, r6, #18
 1855              	.LVL152:
 293:src/lcd.c     ****                 p = i*7+108;
 1856              		.loc 1 293 9 is_stmt 0 discriminator 2 view .LVU361
 1857 012e B6F5C77F 		cmp	r6, #398
 1858 0132 04F10704 		add	r4, r4, #7
 1859              	.LVL153:
 293:src/lcd.c     ****                 p = i*7+108;
 1860              		.loc 1 293 9 discriminator 2 view .LVU362
 1861 0136 D6D1     		bne	.L96
 315:src/lcd.c     **** 		  exp_bottom (x, ytop_exp);
 316:src/lcd.c     ****                 }
 317:src/lcd.c     ****         }
 318:src/lcd.c     ****         /* Segments 129 & 130 are the signs */
 319:src/lcd.c     ****         if (dots[MANT_SIGN]) {
 1862              		.loc 1 319 9 is_stmt 1 view .LVU363
 1863              		.loc 1 319 12 is_stmt 0 view .LVU364
 1864 0138 97F88130 		ldrb	r3, [r7, #129]	@ zero_extendqisi2
 1865 013c 002B     		cmp	r3, #0
 1866 013e 40F0FF80 		bne	.L221
 320:src/lcd.c     **** 	  middle (xleft - dwidth, ytop);
 321:src/lcd.c     ****         }
 322:src/lcd.c     ****         if (dots[EXP_SIGN]) {
 1867              		.loc 1 322 9 is_stmt 1 view .LVU365
 1868              		.loc 1 322 12 is_stmt 0 view .LVU366
 1869 0142 97F88230 		ldrb	r3, [r7, #130]	@ zero_extendqisi2
 1870 0146 002B     		cmp	r3, #0
 1871 0148 40F00381 		bne	.L222
 1872              	.L98:
 323:src/lcd.c     **** 	  exp_middle (xleft_exp-dwidth_exp, ytop);
 324:src/lcd.c     ****         }
 325:src/lcd.c     **** 
 326:src/lcd.c     **** 	if (dots[BIG_EQ]) {
 1873              		.loc 1 326 2 is_stmt 1 view .LVU367
 1874              		.loc 1 326 5 is_stmt 0 view .LVU368
ARM GAS  /tmp/cccOP6XM.s 			page 41


 1875 014c 97F88330 		ldrb	r3, [r7, #131]	@ zero_extendqisi2
 1876 0150 6BB1     		cbz	r3, .L99
 327:src/lcd.c     **** 	  lcd_fill_rect (250, y_ann-34, 15, 4, 0xff);
 1877              		.loc 1 327 4 is_stmt 1 view .LVU369
 1878 0152 FF26     		movs	r6, #255
 1879              	.LVL154:
 1880              		.loc 1 327 4 is_stmt 0 view .LVU370
 1881 0154 0423     		movs	r3, #4
 1882 0156 0F22     		movs	r2, #15
 1883 0158 2421     		movs	r1, #36
 1884 015a FA20     		movs	r0, #250
 1885 015c 814C     		ldr	r4, .L225+4
 1886              	.LVL155:
 1887              		.loc 1 327 4 view .LVU371
 1888 015e 0096     		str	r6, [sp]
 1889 0160 A047     		blx	r4
 1890              	.LVL156:
 328:src/lcd.c     **** 	  lcd_fill_rect (250, y_ann-24, 15, 4, 0xff);
 1891              		.loc 1 328 4 is_stmt 1 view .LVU372
 1892 0162 0096     		str	r6, [sp]
 1893 0164 0423     		movs	r3, #4
 1894 0166 0F22     		movs	r2, #15
 1895 0168 2E21     		movs	r1, #46
 1896 016a FA20     		movs	r0, #250
 1897 016c A047     		blx	r4
 1898              	.LVL157:
 1899              	.L99:
 329:src/lcd.c     ****         }
 330:src/lcd.c     **** 	t20->inv = 0;
 1900              		.loc 1 330 2 view .LVU373
 1901 016e 7E4B     		ldr	r3, .L225+8
 1902              		.loc 1 330 11 is_stmt 0 view .LVU374
 1903 0170 1B6B     		ldr	r3, [r3, #48]
 1904 0172 0022     		movs	r2, #0
 1905 0174 5A74     		strb	r2, [r3, #17]
 331:src/lcd.c     **** 	
 332:src/lcd.c     ****         if (dots[DOWN_ARR]) {
 1906              		.loc 1 332 9 is_stmt 1 view .LVU375
 1907              		.loc 1 332 12 is_stmt 0 view .LVU376
 1908 0176 97F88530 		ldrb	r3, [r7, #133]	@ zero_extendqisi2
 1909 017a 5BB3     		cbz	r3, .L100
 333:src/lcd.c     **** 	  lcd_fill_rect(287,y_ann-67,5,12,0xff);
 1910              		.loc 1 333 4 is_stmt 1 view .LVU377
 1911 017c FF26     		movs	r6, #255
 1912 017e 794C     		ldr	r4, .L225+4
 1913 0180 0096     		str	r6, [sp]
 1914 0182 0C23     		movs	r3, #12
 1915 0184 0522     		movs	r2, #5
 1916 0186 0321     		movs	r1, #3
 1917 0188 40F21F10 		movw	r0, #287
 1918 018c A047     		blx	r4
 1919              	.LVL158:
 334:src/lcd.c     **** 	  lcd_fill_rect(285,y_ann-55,9,1,0xff);
 1920              		.loc 1 334 4 view .LVU378
 1921 018e 0123     		movs	r3, #1
 1922 0190 0922     		movs	r2, #9
 1923 0192 0F21     		movs	r1, #15
ARM GAS  /tmp/cccOP6XM.s 			page 42


 1924 0194 40F21D10 		movw	r0, #285
 1925 0198 0096     		str	r6, [sp]
 1926 019a A047     		blx	r4
 1927              	.LVL159:
 335:src/lcd.c     **** 	  lcd_fill_rect(286,y_ann-54,7,1,0xff);
 1928              		.loc 1 335 4 view .LVU379
 1929 019c 0123     		movs	r3, #1
 1930 019e 0722     		movs	r2, #7
 1931 01a0 1021     		movs	r1, #16
 1932 01a2 4FF48F70 		mov	r0, #286
 1933 01a6 0096     		str	r6, [sp]
 1934 01a8 A047     		blx	r4
 1935              	.LVL160:
 336:src/lcd.c     **** 	  lcd_fill_rect(287,y_ann-53,5,1,0xff);
 1936              		.loc 1 336 4 view .LVU380
 1937 01aa 0123     		movs	r3, #1
 1938 01ac 0522     		movs	r2, #5
 1939 01ae 1121     		movs	r1, #17
 1940 01b0 40F21F10 		movw	r0, #287
 1941 01b4 0096     		str	r6, [sp]
 1942 01b6 A047     		blx	r4
 1943              	.LVL161:
 337:src/lcd.c     **** 	  lcd_fill_rect(288,y_ann-52,3,1,0xff);
 1944              		.loc 1 337 4 view .LVU381
 1945 01b8 0123     		movs	r3, #1
 1946 01ba 0322     		movs	r2, #3
 1947 01bc 1221     		movs	r1, #18
 1948 01be 4FF49070 		mov	r0, #288
 1949 01c2 0096     		str	r6, [sp]
 1950 01c4 A047     		blx	r4
 1951              	.LVL162:
 338:src/lcd.c     **** 	  lcd_fill_rect(289,y_ann-51,1,1,0xff);
 1952              		.loc 1 338 4 view .LVU382
 1953 01c6 0123     		movs	r3, #1
 1954 01c8 0096     		str	r6, [sp]
 1955 01ca 1A46     		mov	r2, r3
 1956 01cc 1321     		movs	r1, #19
 1957 01ce 40F22110 		movw	r0, #289
 1958 01d2 A047     		blx	r4
 1959              	.LVL163:
 1960              	.L100:
 339:src/lcd.c     ****         }
 340:src/lcd.c     **** 
 341:src/lcd.c     **** 	if (dots[INPUT]) {
 1961              		.loc 1 341 2 view .LVU383
 1962              		.loc 1 341 5 is_stmt 0 view .LVU384
 1963 01d4 97F88630 		ldrb	r3, [r7, #134]	@ zero_extendqisi2
 1964 01d8 53B1     		cbz	r3, .L101
 342:src/lcd.c     **** 	  lcd_setXY(t20, 305, y_ann-70);
 1965              		.loc 1 342 4 is_stmt 1 view .LVU385
 1966 01da 634C     		ldr	r4, .L225+8
 1967 01dc 634B     		ldr	r3, .L225+12
 1968 01de 206B     		ldr	r0, [r4, #48]
 1969 01e0 40F23111 		movw	r1, #305
 1970 01e4 0022     		movs	r2, #0
 1971 01e6 9847     		blx	r3
 1972              	.LVL164:
ARM GAS  /tmp/cccOP6XM.s 			page 43


 343:src/lcd.c     **** 	  lcd_writeText(t20,"INPUT");
 1973              		.loc 1 343 4 view .LVU386
 1974 01e8 206B     		ldr	r0, [r4, #48]
 1975 01ea 614B     		ldr	r3, .L225+16
 1976 01ec 6149     		ldr	r1, .L225+20
 1977 01ee 9847     		blx	r3
 1978              	.LVL165:
 1979              	.L101:
 344:src/lcd.c     ****         }
 345:src/lcd.c     **** 
 346:src/lcd.c     **** 	if (dots[LIT_EQ]) {
 1980              		.loc 1 346 2 view .LVU387
 1981              		.loc 1 346 5 is_stmt 0 view .LVU388
 1982 01f0 97F88430 		ldrb	r3, [r7, #132]	@ zero_extendqisi2
 1983 01f4 53B1     		cbz	r3, .L102
 347:src/lcd.c     **** 	  lcd_setXY (t20, 360, y_ann-70);
 1984              		.loc 1 347 4 is_stmt 1 view .LVU389
 1985 01f6 5C4C     		ldr	r4, .L225+8
 1986 01f8 5C4B     		ldr	r3, .L225+12
 1987 01fa 206B     		ldr	r0, [r4, #48]
 1988 01fc 4FF4B471 		mov	r1, #360
 1989 0200 0022     		movs	r2, #0
 1990 0202 9847     		blx	r3
 1991              	.LVL166:
 348:src/lcd.c     **** 	  lcd_writeText(t20, "=");
 1992              		.loc 1 348 4 view .LVU390
 1993 0204 206B     		ldr	r0, [r4, #48]
 1994 0206 5A4B     		ldr	r3, .L225+16
 1995 0208 5B49     		ldr	r1, .L225+24
 1996 020a 9847     		blx	r3
 1997              	.LVL167:
 1998              	.L102:
 349:src/lcd.c     ****         }
 350:src/lcd.c     **** 
 351:src/lcd.c     **** 	if (dots[BATTERY]) {
 1999              		.loc 1 351 2 view .LVU391
 352:src/lcd.c     **** 	  //    MOVE(70, 10);   PRINTF("####-");
 353:src/lcd.c     ****         }
 2000              		.loc 1 353 9 view .LVU392
 354:src/lcd.c     **** 
 355:src/lcd.c     **** 	if (dots[BEG]) {
 2001              		.loc 1 355 2 view .LVU393
 2002              		.loc 1 355 5 is_stmt 0 view .LVU394
 2003 020c 97F88830 		ldrb	r3, [r7, #136]	@ zero_extendqisi2
 2004 0210 53B1     		cbz	r3, .L103
 356:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-50);
 2005              		.loc 1 356 4 is_stmt 1 view .LVU395
 2006 0212 554C     		ldr	r4, .L225+8
 2007 0214 554B     		ldr	r3, .L225+12
 2008 0216 206B     		ldr	r0, [r4, #48]
 2009 0218 40F21D11 		movw	r1, #285
 2010 021c 1422     		movs	r2, #20
 2011 021e 9847     		blx	r3
 2012              	.LVL168:
 357:src/lcd.c     **** 	  lcd_writeText(t20, "BEG");
 2013              		.loc 1 357 4 view .LVU396
 2014 0220 206B     		ldr	r0, [r4, #48]
ARM GAS  /tmp/cccOP6XM.s 			page 44


 2015 0222 534B     		ldr	r3, .L225+16
 2016 0224 5549     		ldr	r1, .L225+28
 2017 0226 9847     		blx	r3
 2018              	.LVL169:
 2019              	.L103:
 358:src/lcd.c     ****         }
 359:src/lcd.c     **** 
 360:src/lcd.c     **** 	if (dots[STO_annun]) {
 2020              		.loc 1 360 2 view .LVU397
 2021              		.loc 1 360 5 is_stmt 0 view .LVU398
 2022 0228 97F88930 		ldrb	r3, [r7, #137]	@ zero_extendqisi2
 2023 022c 53B1     		cbz	r3, .L104
 361:src/lcd.c     **** 	  lcd_setXY (t20, 325, y_ann-50);
 2024              		.loc 1 361 4 is_stmt 1 view .LVU399
 2025 022e 4E4C     		ldr	r4, .L225+8
 2026 0230 4E4B     		ldr	r3, .L225+12
 2027 0232 206B     		ldr	r0, [r4, #48]
 2028 0234 40F24511 		movw	r1, #325
 2029 0238 1422     		movs	r2, #20
 2030 023a 9847     		blx	r3
 2031              	.LVL170:
 362:src/lcd.c     **** 	  lcd_writeText(t20, "STO");
 2032              		.loc 1 362 4 view .LVU400
 2033 023c 206B     		ldr	r0, [r4, #48]
 2034 023e 4C4B     		ldr	r3, .L225+16
 2035 0240 4F49     		ldr	r1, .L225+32
 2036 0242 9847     		blx	r3
 2037              	.LVL171:
 2038              	.L104:
 363:src/lcd.c     ****         }
 364:src/lcd.c     **** 
 365:src/lcd.c     **** 	if (dots[RCL_annun]) {
 2039              		.loc 1 365 2 view .LVU401
 2040              		.loc 1 365 5 is_stmt 0 view .LVU402
 2041 0244 97F88A30 		ldrb	r3, [r7, #138]	@ zero_extendqisi2
 2042 0248 53B1     		cbz	r3, .L105
 366:src/lcd.c     **** 	  lcd_setXY (t20, 365, y_ann-50);
 2043              		.loc 1 366 4 is_stmt 1 view .LVU403
 2044 024a 474C     		ldr	r4, .L225+8
 2045 024c 474B     		ldr	r3, .L225+12
 2046 024e 206B     		ldr	r0, [r4, #48]
 2047 0250 40F26D11 		movw	r1, #365
 2048 0254 1422     		movs	r2, #20
 2049 0256 9847     		blx	r3
 2050              	.LVL172:
 367:src/lcd.c     **** 	  lcd_writeText(t20, "RCL");
 2051              		.loc 1 367 4 view .LVU404
 2052 0258 206B     		ldr	r0, [r4, #48]
 2053 025a 454B     		ldr	r3, .L225+16
 2054 025c 4949     		ldr	r1, .L225+36
 2055 025e 9847     		blx	r3
 2056              	.LVL173:
 2057              	.L105:
 368:src/lcd.c     ****         }
 369:src/lcd.c     **** 
 370:src/lcd.c     **** 	if (dots[RAD]) {
 2058              		.loc 1 370 2 view .LVU405
ARM GAS  /tmp/cccOP6XM.s 			page 45


 2059              		.loc 1 370 5 is_stmt 0 view .LVU406
 2060 0260 97F88B30 		ldrb	r3, [r7, #139]	@ zero_extendqisi2
 2061 0264 53B1     		cbz	r3, .L106
 371:src/lcd.c     **** 	  lcd_setXY (t20, 285, y_ann-30);
 2062              		.loc 1 371 4 is_stmt 1 view .LVU407
 2063 0266 404C     		ldr	r4, .L225+8
 2064 0268 404B     		ldr	r3, .L225+12
 2065 026a 206B     		ldr	r0, [r4, #48]
 2066 026c 40F21D11 		movw	r1, #285
 2067 0270 2822     		movs	r2, #40
 2068 0272 9847     		blx	r3
 2069              	.LVL174:
 372:src/lcd.c     **** 	  lcd_writeText(t20, "RAD");
 2070              		.loc 1 372 4 view .LVU408
 2071 0274 206B     		ldr	r0, [r4, #48]
 2072 0276 3E4B     		ldr	r3, .L225+16
 2073 0278 4349     		ldr	r1, .L225+40
 2074 027a 9847     		blx	r3
 2075              	.LVL175:
 2076              	.L106:
 373:src/lcd.c     **** 	}
 374:src/lcd.c     **** 
 375:src/lcd.c     **** 	if (dots[DEG]) {
 2077              		.loc 1 375 2 view .LVU409
 2078              		.loc 1 375 5 is_stmt 0 view .LVU410
 2079 027c 97F88C30 		ldrb	r3, [r7, #140]	@ zero_extendqisi2
 2080 0280 53B1     		cbz	r3, .L107
 376:src/lcd.c     **** 	  lcd_setXY (t20, 325, y_ann-30);
 2081              		.loc 1 376 4 is_stmt 1 view .LVU411
 2082 0282 394C     		ldr	r4, .L225+8
 2083 0284 394B     		ldr	r3, .L225+12
 2084 0286 206B     		ldr	r0, [r4, #48]
 2085 0288 40F24511 		movw	r1, #325
 2086 028c 2822     		movs	r2, #40
 2087 028e 9847     		blx	r3
 2088              	.LVL176:
 377:src/lcd.c     **** 	  lcd_writeText(t20, "360");
 2089              		.loc 1 377 4 view .LVU412
 2090 0290 206B     		ldr	r0, [r4, #48]
 2091 0292 374B     		ldr	r3, .L225+16
 2092 0294 3D49     		ldr	r1, .L225+44
 2093 0296 9847     		blx	r3
 2094              	.LVL177:
 2095              	.L107:
 378:src/lcd.c     ****         }
 379:src/lcd.c     ****         if (dots[RPN]) {
 2096              		.loc 1 379 9 view .LVU413
 2097              		.loc 1 379 12 is_stmt 0 view .LVU414
 2098 0298 97F88D30 		ldrb	r3, [r7, #141]	@ zero_extendqisi2
 2099 029c 53B1     		cbz	r3, .L108
 380:src/lcd.c     **** 	  lcd_setXY (t20, 365, y_ann-30);
 2100              		.loc 1 380 4 is_stmt 1 view .LVU415
 2101 029e 324C     		ldr	r4, .L225+8
 2102 02a0 324B     		ldr	r3, .L225+12
 2103 02a2 206B     		ldr	r0, [r4, #48]
 2104 02a4 40F26D11 		movw	r1, #365
 2105 02a8 2822     		movs	r2, #40
ARM GAS  /tmp/cccOP6XM.s 			page 46


 2106 02aa 9847     		blx	r3
 2107              	.LVL178:
 381:src/lcd.c     **** 	  lcd_writeText(t20, "RPN");
 2108              		.loc 1 381 4 view .LVU416
 2109 02ac 206B     		ldr	r0, [r4, #48]
 2110 02ae 304B     		ldr	r3, .L225+16
 2111 02b0 3749     		ldr	r1, .L225+48
 2112 02b2 9847     		blx	r3
 2113              	.LVL179:
 2114              	.L108:
 382:src/lcd.c     ****         }
 383:src/lcd.c     **** 
 384:src/lcd.c     **** 	/* The graphical bit last */
 385:src/lcd.c     ****         for (i=0; i<BITMAP_WIDTH; i++) {
 386:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 387:src/lcd.c     **** 	    if (dots[i*6+j+MATRIX_BASE]) {
 388:src/lcd.c     **** 	      //  lcd_fill_rect( xleft-dwidth+2*i, ytop-(5+3*6)+j*2, 2, 2, 0xff);
 389:src/lcd.c     **** 	      lcd_fill_rect( xleft-dwidth+5*i+15, ytop-(10+6*6)+j*6, 4, 5, 0xff);
 2115              		.loc 1 389 8 is_stmt 0 view .LVU417
 2116 02b4 DFF8ACA0 		ldr	r10, .L225+4
 2117 02b8 05F18E0B 		add	fp, r5, #142
 2118 02bc 4FF00008 		mov	r8, #0
 2119 02c0 1027     		movs	r7, #16
 2120 02c2 4FF0FF09 		mov	r9, #255
 2121              	.L111:
 2122              	.LVL180:
 386:src/lcd.c     **** 	    if (dots[i*6+j+MATRIX_BASE]) {
 2123              		.loc 1 386 14 is_stmt 1 view .LVU418
 2124 02c6 0BEB0805 		add	r5, fp, r8
 2125 02ca 5424     		movs	r4, #84
 2126              	.LVL181:
 2127              	.L110:
 387:src/lcd.c     **** 	      //  lcd_fill_rect( xleft-dwidth+2*i, ytop-(5+3*6)+j*2, 2, 2, 0xff);
 2128              		.loc 1 387 6 view .LVU419
 2129              		.loc 1 389 8 view .LVU420
 387:src/lcd.c     **** 	      //  lcd_fill_rect( xleft-dwidth+2*i, ytop-(5+3*6)+j*2, 2, 2, 0xff);
 2130              		.loc 1 387 14 is_stmt 0 view .LVU421
 2131 02cc 15F8016B 		ldrb	r6, [r5], #1	@ zero_extendqisi2
 2132              	.LVL182:
 2133              		.loc 1 389 8 view .LVU422
 2134 02d0 2146     		mov	r1, r4
 2135 02d2 0523     		movs	r3, #5
 2136 02d4 0634     		adds	r4, r4, #6
 2137 02d6 0422     		movs	r2, #4
 2138 02d8 3846     		mov	r0, r7
 387:src/lcd.c     **** 	      //  lcd_fill_rect( xleft-dwidth+2*i, ytop-(5+3*6)+j*2, 2, 2, 0xff);
 2139              		.loc 1 387 9 view .LVU423
 2140 02da 16B1     		cbz	r6, .L109
 2141              		.loc 1 389 8 view .LVU424
 2142 02dc CDF80090 		str	r9, [sp]
 2143 02e0 D047     		blx	r10
 2144              	.LVL183:
 2145              	.L109:
 386:src/lcd.c     **** 	    if (dots[i*6+j+MATRIX_BASE]) {
 2146              		.loc 1 386 19 is_stmt 1 discriminator 2 view .LVU425
 386:src/lcd.c     **** 	    if (dots[i*6+j+MATRIX_BASE]) {
 2147              		.loc 1 386 14 discriminator 2 view .LVU426
ARM GAS  /tmp/cccOP6XM.s 			page 47


 386:src/lcd.c     **** 	    if (dots[i*6+j+MATRIX_BASE]) {
 2148              		.loc 1 386 4 is_stmt 0 discriminator 2 view .LVU427
 2149 02e2 782C     		cmp	r4, #120
 2150 02e4 F2D1     		bne	.L110
 385:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 2151              		.loc 1 385 35 is_stmt 1 discriminator 2 view .LVU428
 385:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 2152              		.loc 1 385 19 discriminator 2 view .LVU429
 2153 02e6 08F10608 		add	r8, r8, #6
 2154              	.LVL184:
 385:src/lcd.c     **** 	  for (j=0; j<6; j++) {
 2155              		.loc 1 385 9 is_stmt 0 discriminator 2 view .LVU430
 2156 02ea B8F5DE7F 		cmp	r8, #444
 2157 02ee 07F10507 		add	r7, r7, #5
 2158 02f2 E8D1     		bne	.L111
 390:src/lcd.c     **** 	    }
 391:src/lcd.c     **** 	  }
 392:src/lcd.c     **** 	}
 393:src/lcd.c     **** }
 2159              		.loc 1 393 1 view .LVU431
 2160 02f4 03B0     		add	sp, sp, #12
 2161              		.cfi_remember_state
 2162              		.cfi_def_cfa_offset 36
 2163              		@ sp needed
 2164 02f6 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2165              	.LVL185:
 2166              	.L220:
 2167              		.cfi_restore_state
 315:src/lcd.c     ****                 }
 2168              		.loc 1 315 5 is_stmt 1 view .LVU432
 2169 02fa 8221     		movs	r1, #130
 2170 02fc 3046     		mov	r0, r6
 2171 02fe FFF7FEFF 		bl	exp_bottom
 2172              	.LVL186:
 2173 0302 13E7     		b	.L95
 2174              	.L219:
 312:src/lcd.c     ****                 }
 2175              		.loc 1 312 5 view .LVU433
 2176              	.LVL187:
 2177              	.LBB77:
 2178              	.LBI77:
 224:src/lcd.c     ****   exp_right_side(i-1, j+11);
 2179              		.loc 1 224 6 view .LVU434
 2180              	.LBB78:
 225:src/lcd.c     **** }
 2181              		.loc 1 225 3 view .LVU435
 2182 0304 8D21     		movs	r1, #141
 2183 0306 701E     		subs	r0, r6, #1
 2184 0308 FFF7FEFF 		bl	exp_right_side
 2185              	.LVL188:
 226:src/lcd.c     **** void exp_top (int i, int j) {
 2186              		.loc 1 226 1 is_stmt 0 view .LVU436
 2187 030c 09E7     		b	.L94
 2188              	.LVL189:
 2189              	.L218:
 226:src/lcd.c     **** void exp_top (int i, int j) {
 2190              		.loc 1 226 1 view .LVU437
ARM GAS  /tmp/cccOP6XM.s 			page 48


 2191              	.LBE78:
 2192              	.LBE77:
 309:src/lcd.c     ****                 }
 2193              		.loc 1 309 5 is_stmt 1 view .LVU438
 2194              	.LBB79:
 2195              	.LBI79:
 212:src/lcd.c     ****   exp_left_side(i, j+11);
 2196              		.loc 1 212 6 view .LVU439
 2197              	.LBB80:
 213:src/lcd.c     **** }
 2198              		.loc 1 213 3 view .LVU440
 2199 030e 8D21     		movs	r1, #141
 2200 0310 3046     		mov	r0, r6
 2201 0312 FFF7FEFF 		bl	exp_left_side
 2202              	.LVL190:
 214:src/lcd.c     **** void exp_right_side (int i, int j) {
 2203              		.loc 1 214 1 is_stmt 0 view .LVU441
 2204 0316 FFE6     		b	.L93
 2205              	.LVL191:
 2206              	.L217:
 214:src/lcd.c     **** void exp_right_side (int i, int j) {
 2207              		.loc 1 214 1 view .LVU442
 2208              	.LBE80:
 2209              	.LBE79:
 306:src/lcd.c     ****                 }
 2210              		.loc 1 306 5 is_stmt 1 view .LVU443
 2211 0318 8221     		movs	r1, #130
 2212 031a 3046     		mov	r0, r6
 2213 031c FFF7FEFF 		bl	exp_middle
 2214              	.LVL192:
 2215 0320 F5E6     		b	.L92
 2216              	.L216:
 303:src/lcd.c     ****                 }
 2217              		.loc 1 303 5 view .LVU444
 2218              	.LVL193:
 2219              	.LBB81:
 2220              	.LBI81:
 221:src/lcd.c     ****   exp_right_side(i, j);
 2221              		.loc 1 221 6 view .LVU445
 2222              	.LBB82:
 222:src/lcd.c     **** }
 2223              		.loc 1 222 3 view .LVU446
 2224 0322 8221     		movs	r1, #130
 2225 0324 3046     		mov	r0, r6
 2226 0326 FFF7FEFF 		bl	exp_right_side
 2227              	.LVL194:
 223:src/lcd.c     **** void exp_right_side_bottom (int i, int j) {
 2228              		.loc 1 223 1 is_stmt 0 view .LVU447
 2229 032a EBE6     		b	.L91
 2230              	.LVL195:
 2231              	.L215:
 223:src/lcd.c     **** void exp_right_side_bottom (int i, int j) {
 2232              		.loc 1 223 1 view .LVU448
 2233              	.LBE82:
 2234              	.LBE81:
 300:src/lcd.c     ****                 }
 2235              		.loc 1 300 5 is_stmt 1 view .LVU449
ARM GAS  /tmp/cccOP6XM.s 			page 49


 2236              	.LBB83:
 2237              	.LBI83:
 209:src/lcd.c     ****   exp_left_side(i+1, j);
 2238              		.loc 1 209 6 view .LVU450
 2239              	.LBB84:
 210:src/lcd.c     **** }
 2240              		.loc 1 210 3 view .LVU451
 2241 032c 8221     		movs	r1, #130
 2242 032e 701C     		adds	r0, r6, #1
 2243 0330 FFF7FEFF 		bl	exp_left_side
 2244              	.LVL196:
 211:src/lcd.c     **** void exp_left_side_bottom (int i, int j) {
 2245              		.loc 1 211 1 is_stmt 0 view .LVU452
 2246 0334 E1E6     		b	.L90
 2247              	.LVL197:
 2248              	.L214:
 211:src/lcd.c     **** void exp_left_side_bottom (int i, int j) {
 2249              		.loc 1 211 1 view .LVU453
 2250              	.LBE84:
 2251              	.LBE83:
 297:src/lcd.c     ****                 }
 2252              		.loc 1 297 5 is_stmt 1 view .LVU454
 2253 0336 8221     		movs	r1, #130
 2254 0338 3046     		mov	r0, r6
 2255 033a FFF7FEFF 		bl	exp_top
 2256              	.LVL198:
 2257 033e D7E6     		b	.L89
 2258              	.LVL199:
 2259              	.L221:
 320:src/lcd.c     ****         }
 2260              		.loc 1 320 4 view .LVU455
 2261 0340 8221     		movs	r1, #130
 2262 0342 0120     		movs	r0, #1
 2263 0344 FFF7FEFF 		bl	middle
 2264              	.LVL200:
 322:src/lcd.c     **** 	  exp_middle (xleft_exp-dwidth_exp, ytop);
 2265              		.loc 1 322 9 view .LVU456
 322:src/lcd.c     **** 	  exp_middle (xleft_exp-dwidth_exp, ytop);
 2266              		.loc 1 322 12 is_stmt 0 view .LVU457
 2267 0348 97F88230 		ldrb	r3, [r7, #130]	@ zero_extendqisi2
 2268 034c 002B     		cmp	r3, #0
 2269 034e 3FF4FDAE 		beq	.L98
 2270              	.L222:
 323:src/lcd.c     ****         }
 2271              		.loc 1 323 4 is_stmt 1 view .LVU458
 2272 0352 8221     		movs	r1, #130
 2273 0354 4FF4A370 		mov	r0, #326
 2274 0358 FFF7FEFF 		bl	exp_middle
 2275              	.LVL201:
 2276 035c F6E6     		b	.L98
 2277              	.L226:
 2278 035e 00BF     		.align	2
 2279              	.L225:
 2280 0360 00000000 		.word	.LANCHOR0
 2281 0364 3D020008 		.word	134218301
 2282 0368 00200010 		.word	268443648
 2283 036c 6D020008 		.word	134218349
ARM GAS  /tmp/cccOP6XM.s 			page 50


 2284 0370 7D020008 		.word	134218365
 2285 0374 00000000 		.word	.LC0
 2286 0378 08000000 		.word	.LC1
 2287 037c 0C000000 		.word	.LC2
 2288 0380 10000000 		.word	.LC3
 2289 0384 14000000 		.word	.LC4
 2290 0388 18000000 		.word	.LC5
 2291 038c 1C000000 		.word	.LC6
 2292 0390 20000000 		.word	.LC7
 2293              		.cfi_endproc
 2294              	.LFE25:
 2296              		.section	.text.show_stack,"ax",%progbits
 2297              		.align	1
 2298              		.p2align 2,,3
 2299              		.global	show_stack
 2300              		.syntax unified
 2301              		.thumb
 2302              		.thumb_func
 2303              		.fpu fpv4-sp-d16
 2305              	show_stack:
 2306              	.LFB36:
 2307              		.cfi_startproc
 2308              		@ args = 0, pretend = 0, frame = 0
 2309              		@ frame_needed = 0, uses_anonymous_args = 0
 2310              		@ link register save eliminated.
 2311 0000 7047     		bx	lr
 2312              		.cfi_endproc
 2313              	.LFE36:
 2315 0002 00BF     		.section	.text.show_flags,"ax",%progbits
 2316              		.align	1
 2317              		.p2align 2,,3
 2318              		.global	show_flags
 2319              		.syntax unified
 2320              		.thumb
 2321              		.thumb_func
 2322              		.fpu fpv4-sp-d16
 2324              	show_flags:
 2325              	.LFB34:
 2326              		.cfi_startproc
 2327              		@ args = 0, pretend = 0, frame = 0
 2328              		@ frame_needed = 0, uses_anonymous_args = 0
 2329              		@ link register save eliminated.
 2330 0000 7047     		bx	lr
 2331              		.cfi_endproc
 2332              	.LFE34:
 2334 0002 00BF     		.section	.text.wait_for_display,"ax",%progbits
 2335              		.align	1
 2336              		.p2align 2,,3
 2337              		.global	wait_for_display
 2338              		.syntax unified
 2339              		.thumb
 2340              		.thumb_func
 2341              		.fpu fpv4-sp-d16
 2343              	wait_for_display:
 2344              	.LFB28:
 394:src/lcd.c     **** #endif
 395:src/lcd.c     **** 
ARM GAS  /tmp/cccOP6XM.s 			page 51


 396:src/lcd.c     **** #if defined(USECURSES) && !defined(DM42)
 397:src/lcd.c     **** void show_disp(void) {
 398:src/lcd.c     ****         int i, j, p, x;
 399:src/lcd.c     ****         const int dig_base = 16;
 400:src/lcd.c     **** 
 401:src/lcd.c     ****         /* Segments 0 - 107 are the main digits */
 402:src/lcd.c     ****         for (i=0; i<DISPLAY_DIGITS; i++) {
 403:src/lcd.c     **** 	  p = i*SEGS_PER_DIGIT; // 9 - 7 + dot and comma
 404:src/lcd.c     ****                 x = 3+5*i;
 405:src/lcd.c     ****                 if (dots[p]) {
 406:src/lcd.c     ****                         MOVE(x+1, dig_base);    PRINTF("--");
 407:src/lcd.c     ****                 }
 408:src/lcd.c     ****                 if (dots[p+1]) {
 409:src/lcd.c     ****                         MOVE(x, dig_base+1);    PRINTF("|");
 410:src/lcd.c     ****                         MOVE(x, dig_base+2);    PRINTF("|");
 411:src/lcd.c     ****                 }
 412:src/lcd.c     ****                 if (dots[p+3]) {
 413:src/lcd.c     ****                         MOVE(x+3, dig_base+1);  PRINTF("|");
 414:src/lcd.c     ****                         MOVE(x+3, dig_base+2);  PRINTF("|");
 415:src/lcd.c     ****                 }
 416:src/lcd.c     ****                 if (dots[p+2]) {
 417:src/lcd.c     ****                         MOVE(x+1, dig_base+3);  PRINTF("--");
 418:src/lcd.c     ****                 }
 419:src/lcd.c     ****                 if (dots[p+4]) {
 420:src/lcd.c     ****                         MOVE(x, dig_base+4);    PRINTF("|");
 421:src/lcd.c     ****                         MOVE(x, dig_base+5);    PRINTF("|");
 422:src/lcd.c     ****                 }
 423:src/lcd.c     ****                 if (dots[p+6]) {
 424:src/lcd.c     ****                         MOVE(x+3, dig_base+4);  PRINTF("|");
 425:src/lcd.c     ****                         MOVE(x+3, dig_base+5);  PRINTF("|");
 426:src/lcd.c     ****                 }
 427:src/lcd.c     ****                 if (dots[p+5]) {
 428:src/lcd.c     ****                         MOVE(x+1, dig_base+6);  PRINTF("--");
 429:src/lcd.c     ****                 }
 430:src/lcd.c     ****                 if (dots[p+7]) {
 431:src/lcd.c     ****                         MOVE(x+4, dig_base+6);  PRINTF(".");
 432:src/lcd.c     ****                 }
 433:src/lcd.c     ****                 if (dots[p+8]) {
 434:src/lcd.c     ****                         MOVE(x+3, dig_base+7);  PRINTF("/");
 435:src/lcd.c     ****                 }
 436:src/lcd.c     ****         }
 437:src/lcd.c     ****         /* Segments 108 - 128 are the exponent digits */
 438:src/lcd.c     ****         for (i=0; i<3; i++) {
 439:src/lcd.c     ****                 p = i*7+108;
 440:src/lcd.c     ****                 x = 66 + i * 4;
 441:src/lcd.c     ****                 if (dots[p]) {
 442:src/lcd.c     ****                         MOVE(x+1, dig_base-1);  PRINTF("-");
 443:src/lcd.c     ****                 }
 444:src/lcd.c     ****                 if (dots[p+1]) {
 445:src/lcd.c     ****                         MOVE(x, dig_base);      PRINTF("|");
 446:src/lcd.c     ****                 }
 447:src/lcd.c     ****                 if (dots[p+3]) {
 448:src/lcd.c     ****                         MOVE(x+2, dig_base);    PRINTF("|");
 449:src/lcd.c     ****                 }
 450:src/lcd.c     ****                 if (dots[p+2]) {
 451:src/lcd.c     ****                         MOVE(x+1, dig_base+1);  PRINTF("-");
 452:src/lcd.c     ****                 }
ARM GAS  /tmp/cccOP6XM.s 			page 52


 453:src/lcd.c     ****                 if (dots[p+4]) {
 454:src/lcd.c     ****                         MOVE(x, dig_base+2);    PRINTF("|");
 455:src/lcd.c     ****                 }
 456:src/lcd.c     ****                 if (dots[p+6]) {
 457:src/lcd.c     ****                         MOVE(x+2, dig_base+2);  PRINTF("|");
 458:src/lcd.c     ****                 }
 459:src/lcd.c     ****                 if (dots[p+5]) {
 460:src/lcd.c     ****                         MOVE(x+1, dig_base+3);  PRINTF("-");
 461:src/lcd.c     ****                 }
 462:src/lcd.c     ****         }
 463:src/lcd.c     ****         /* Segments 129 & 130 are the signs */
 464:src/lcd.c     ****         if (dots[MANT_SIGN]) {
 465:src/lcd.c     ****                 MOVE(0, dig_base+3);
 466:src/lcd.c     ****                 PRINTF("--");
 467:src/lcd.c     ****         }
 468:src/lcd.c     ****         if (dots[EXP_SIGN]) {
 469:src/lcd.c     ****                 MOVE(64, dig_base+1);
 470:src/lcd.c     ****                 PRINTF("-");
 471:src/lcd.c     ****         }
 472:src/lcd.c     ****         if (dots[BIG_EQ]) {
 473:src/lcd.c     ****                 MOVE(47, 12);   PRINTF("==");
 474:src/lcd.c     ****         }
 475:src/lcd.c     ****         if (dots[LIT_EQ]) {
 476:src/lcd.c     ****                 MOVE(64, 10);   PRINTF("=");
 477:src/lcd.c     ****         }
 478:src/lcd.c     ****         if (dots[DOWN_ARR]) {
 479:src/lcd.c     ****                 MOVE(52, 10);   PRINTF("v");
 480:src/lcd.c     ****         }
 481:src/lcd.c     ****         if (dots[INPUT]) {
 482:src/lcd.c     ****                 MOVE(55, 10);   PRINTF("INPUT");
 483:src/lcd.c     ****         }
 484:src/lcd.c     ****         if (dots[BATTERY]) {
 485:src/lcd.c     ****                 MOVE(70, 10);   PRINTF("####-");
 486:src/lcd.c     ****         }
 487:src/lcd.c     ****         if (dots[BEG]) {
 488:src/lcd.c     ****                 MOVE(52, 12);   PRINTF("BEG");
 489:src/lcd.c     ****         }
 490:src/lcd.c     ****         if (dots[STO_annun]) {
 491:src/lcd.c     ****                 MOVE(62, 12);   PRINTF("STO");
 492:src/lcd.c     ****         }
 493:src/lcd.c     ****         if (dots[RCL_annun]) {
 494:src/lcd.c     ****                 MOVE(72, 12);   PRINTF("RCL");
 495:src/lcd.c     ****         }
 496:src/lcd.c     ****         if (dots[RAD]) {
 497:src/lcd.c     ****                 MOVE(52, 14);   PRINTF("RAD");
 498:src/lcd.c     ****         }
 499:src/lcd.c     ****         if (dots[DEG]) {
 500:src/lcd.c     ****                 MOVE(62, 14);   PRINTF("360");
 501:src/lcd.c     ****         }
 502:src/lcd.c     ****         if (dots[RPN]) {
 503:src/lcd.c     ****                 MOVE(72, 14);   PRINTF("RPN");
 504:src/lcd.c     ****         }
 505:src/lcd.c     ****         /* The graphical bit last */
 506:src/lcd.c     ****         for (i=0; i<BITMAP_WIDTH; i++)
 507:src/lcd.c     ****                 for (j=0; j<6; j++) {
 508:src/lcd.c     ****                         if (dots[i*6+j+MATRIX_BASE]) {
 509:src/lcd.c     ****                                 MOVE(1+i, 9+j);
ARM GAS  /tmp/cccOP6XM.s 			page 53


 510:src/lcd.c     ****                                 PRINTF("#");
 511:src/lcd.c     ****                         }
 512:src/lcd.c     ****                 }
 513:src/lcd.c     **** }
 514:src/lcd.c     **** #endif
 515:src/lcd.c     **** 
 516:src/lcd.c     **** void show_stack(void) {
 517:src/lcd.c     **** #ifdef USECURSES
 518:src/lcd.c     ****   int i;
 519:src/lcd.c     **** 
 520:src/lcd.c     ****         if (!State2.flags)
 521:src/lcd.c     ****                 return;
 522:src/lcd.c     **** 
 523:src/lcd.c     ****         // Stack display smashes the stack registers
 524:src/lcd.c     ****         for (i=4; i<STACK_SIZE; i++) {
 525:src/lcd.c     ****                 MOVE(26, 8-i);
 526:src/lcd.c     ****                 PRINTF("%c ", i<stack_size()?'*':' ');
 527:src/lcd.c     ****                 dispreg(REGNAMES[i], regX_idx + i);
 528:src/lcd.c     ****         }
 529:src/lcd.c     ****         MOVE(53, 2);    dispreg(REGNAMES[regJ_idx-regX_idx], regJ_idx);
 530:src/lcd.c     ****         MOVE(53, 1);    dispreg(REGNAMES[regK_idx-regX_idx], regK_idx);
 531:src/lcd.c     ****         for (i=0; i<4; i++) {
 532:src/lcd.c     ****                 MOVE(0, 4-i);
 533:src/lcd.c     ****                 dispreg(REGNAMES[i], regX_idx + i);
 534:src/lcd.c     ****         }
 535:src/lcd.c     ****         MOVE(53, 4);
 536:src/lcd.c     ****         dispreg(REGNAMES[regL_idx-regX_idx], regL_idx);
 537:src/lcd.c     ****         MOVE(53, 3);
 538:src/lcd.c     ****         dispreg(REGNAMES[regI_idx-regX_idx], regI_idx);
 539:src/lcd.c     ****         MOVE(53, 0);
 540:src/lcd.c     ****         PRINTF("stack depth: %d", stack_size());
 541:src/lcd.c     **** #endif
 542:src/lcd.c     **** }
 543:src/lcd.c     **** 
 544:src/lcd.c     **** void show_flags(void) {
 545:src/lcd.c     **** #if defined(CONSOLE) && !defined(DM42)
 546:src/lcd.c     **** 	extern unsigned int get_local_flags(void);
 547:src/lcd.c     **** 
 548:src/lcd.c     **** 	if (!State2.flags)
 549:src/lcd.c     **** 		return;
 550:src/lcd.c     **** 	MOVE(0, 0);
 551:src/lcd.c     **** 	PRINTF(" %c ", JustDisplayed ? '*' : ' ');
 552:src/lcd.c     **** 	MOVE(5, 0);
 553:src/lcd.c     **** 	switch (cur_shift()) {
 554:src/lcd.c     **** 	case SHIFT_F:   PRINTF("[f-shift]");    break;
 555:src/lcd.c     **** 	case SHIFT_G:   PRINTF("[g-shift]");    break;
 556:src/lcd.c     **** 	case SHIFT_H:   PRINTF("[h-shift]");    break;
 557:src/lcd.c     **** 	default:                                break;
 558:src/lcd.c     **** 	}
 559:src/lcd.c     **** 	if (State2.hyp) {
 560:src/lcd.c     **** 		MOVE(14, 0);
 561:src/lcd.c     **** 		if (State2.dot)
 562:src/lcd.c     **** 			PRINTF("[hyp]");
 563:src/lcd.c     **** 		else
 564:src/lcd.c     **** 			PRINTF("[hyp-1]");
 565:src/lcd.c     **** 	}
 566:src/lcd.c     **** 	if (!State2.runmode) {
ARM GAS  /tmp/cccOP6XM.s 			page 54


 567:src/lcd.c     **** 		MOVE(21, 0);
 568:src/lcd.c     **** 		PRINTF("[prog]");
 569:src/lcd.c     **** 	}
 570:src/lcd.c     **** 	if (view_instruction_counter) {
 571:src/lcd.c     **** 		MOVE(28, 0);
 572:src/lcd.c     **** 		PRINTF("#%llu", instruction_count);
 573:src/lcd.c     **** 	}
 574:src/lcd.c     **** 	MOVE(0, 0);
 575:src/lcd.c     **** 
 576:src/lcd.c     **** #ifdef USECURSES
 577:src/lcd.c     **** #define FLAG_BASE       5
 578:src/lcd.c     **** 	MOVE(10, FLAG_BASE);
 579:src/lcd.c     **** 	if (State2.rarg)
 580:src/lcd.c     **** 		PRINTF("[rcmd]");
 581:src/lcd.c     **** 	else if (State2.arrow)
 582:src/lcd.c     **** 		PRINTF("[arr]");
 583:src/lcd.c     **** 	if (State2.dot) {
 584:src/lcd.c     **** 		MOVE(18, FLAG_BASE);
 585:src/lcd.c     **** 		PRINTF("[dot]");
 586:src/lcd.c     **** 	}
 587:src/lcd.c     **** 	if (State2.ind) {
 588:src/lcd.c     **** 		MOVE(24, FLAG_BASE);
 589:src/lcd.c     **** 		PRINTF("[ind]");
 590:src/lcd.c     **** 	}
 591:src/lcd.c     **** 	if (State2.trace) {
 592:src/lcd.c     **** 		MOVE(30, FLAG_BASE);
 593:src/lcd.c     **** 		PRINTF("[trace]");
 594:src/lcd.c     **** 	}
 595:src/lcd.c     **** 	if (State2.cmplx) {
 596:src/lcd.c     **** 		MOVE(40, FLAG_BASE);
 597:src/lcd.c     **** 		PRINTF("[cmplx]");
 598:src/lcd.c     **** 	}
 599:src/lcd.c     **** 	if (State2.catalogue) {
 600:src/lcd.c     **** 		MOVE(50, FLAG_BASE);
 601:src/lcd.c     **** 		PRINTF("[cat %03u]", State2.catalogue);
 602:src/lcd.c     **** 	}
 603:src/lcd.c     **** 	if (State2.hms) {
 604:src/lcd.c     **** 		MOVE(64, FLAG_BASE);
 605:src/lcd.c     **** 		PRINTF("[H.MS]");
 606:src/lcd.c     **** 	}
 607:src/lcd.c     **** 	if (UState.fract) {
 608:src/lcd.c     **** 		MOVE(71, FLAG_BASE);
 609:src/lcd.c     **** 		PRINTF("[FRACT]");
 610:src/lcd.c     **** 	}
 611:src/lcd.c     **** 	if (State2.multi) {
 612:src/lcd.c     **** 		MOVE(71, FLAG_BASE+1);
 613:src/lcd.c     **** 		PRINTF("[MULTI]");
 614:src/lcd.c     **** 	}
 615:src/lcd.c     **** 	MOVE(50, FLAG_BASE+1);
 616:src/lcd.c     **** 	PRINTF("[RRS %03u]", ProgSize);
 617:src/lcd.c     **** 	if (State2.state_lift) {
 618:src/lcd.c     **** 		MOVE(10, FLAG_BASE+1);
 619:src/lcd.c     **** 		PRINTF("[lift]");
 620:src/lcd.c     **** 	}
 621:src/lcd.c     **** 	if (Running) {
 622:src/lcd.c     **** 		MOVE(18, FLAG_BASE+1);
 623:src/lcd.c     **** 		PRINTF("[running]");
ARM GAS  /tmp/cccOP6XM.s 			page 55


 624:src/lcd.c     **** 	}
 625:src/lcd.c     **** 	MOVE(70, 5);
 626:src/lcd.c     **** 	PRINTF("iw = %u/%u", State2.window, IntMaxWindow);
 627:src/lcd.c     **** 	MOVE(30, FLAG_BASE+1);
 628:src/lcd.c     **** 	PRINTF("shft = %u", cur_shift());
 629:src/lcd.c     **** 	MOVE(40, FLAG_BASE+1);
 630:src/lcd.c     **** 	PRINTF("trig = %u", UState.trigmode);
 631:src/lcd.c     **** 	MOVE(60, FLAG_BASE+1);
 632:src/lcd.c     **** 	PRINTF("r = %u", ShowRegister);
 633:src/lcd.c     **** //	MOVE(60, FLAG_BASE+1);
 634:src/lcd.c     **** //	PRINTF("apos = %u", State2.alpha_pos);
 635:src/lcd.c     **** 	MOVE(10, FLAG_BASE+2);
 636:src/lcd.c     **** 	PRINTF("numdig = %u   alpha '%-31s'   lflags = %03o-%03o",
 637:src/lcd.c     **** 			State2.numdigit, Alpha, get_local_flags() >> 8,
 638:src/lcd.c     **** 			get_local_flags() & 0xff);
 639:src/lcd.c     **** 	if (State.entryp) {
 640:src/lcd.c     **** 		MOVE(0, FLAG_BASE+2);
 641:src/lcd.c     **** 		PRINTF("entryp");
 642:src/lcd.c     **** 	}
 643:src/lcd.c     **** 	MOVE(10, FLAG_BASE+3);
 644:src/lcd.c     **** 	PRINTF("digval=%u", State2.digval);
 645:src/lcd.c     **** 	MOVE(23, FLAG_BASE+3);
 646:src/lcd.c     **** 	PRINTF("pc = %03u", state_pc());
 647:src/lcd.c     **** 	MOVE(34, FLAG_BASE+3);
 648:src/lcd.c     **** 	PRINTF("ap = %u", State2.alpha_pos);
 649:src/lcd.c     **** 	MOVE(45, FLAG_BASE+3);
 650:src/lcd.c     **** 	PRINTF("cmddot = %u  cmdeex = %u  eol = %u",
 651:src/lcd.c     **** 			CmdLineDot, CmdLineEex, CmdLineLength);
 652:src/lcd.c     **** 	MOVE(0, FLAG_BASE+3);
 653:src/lcd.c     **** 	PRINTF("JG=%d", UState.jg1582?1582:1752);
 654:src/lcd.c     **** #endif
 655:src/lcd.c     **** #endif
 656:src/lcd.c     **** }
 657:src/lcd.c     **** 
 658:src/lcd.c     **** void wait_for_display(void)
 659:src/lcd.c     **** {
 2345              		.loc 1 659 1 view -0
 2346              		.cfi_startproc
 2347              		@ args = 0, pretend = 0, frame = 0
 2348              		@ frame_needed = 0, uses_anonymous_args = 0
 2349              		@ link register save eliminated.
 660:src/lcd.c     **** }
 2350              		.loc 1 660 1 view .LVU460
 2351 0000 7047     		bx	lr
 2352              		.cfi_endproc
 2353              	.LFE28:
 2355 0002 00BF     		.section	.text.finish_display,"ax",%progbits
 2356              		.align	1
 2357              		.p2align 2,,3
 2358              		.global	finish_display
 2359              		.syntax unified
 2360              		.thumb
 2361              		.thumb_func
 2362              		.fpu fpv4-sp-d16
 2364              	finish_display:
 2365              	.LFB29:
 661:src/lcd.c     **** 
ARM GAS  /tmp/cccOP6XM.s 			page 56


 662:src/lcd.c     **** #if defined(USECURSES) && !defined(DM42) 
 663:src/lcd.c     **** void finish_display(void) {
 664:src/lcd.c     ****         show_disp();
 665:src/lcd.c     ****         MOVE(0, 0);
 666:src/lcd.c     ****         refresh();
 667:src/lcd.c     **** 
 668:src/lcd.c     **** }
 669:src/lcd.c     **** #endif
 670:src/lcd.c     **** #if defined(DM42) 
 671:src/lcd.c     **** void finish_display(void) {
 2366              		.loc 1 671 27 view -0
 2367              		.cfi_startproc
 2368              		@ args = 0, pretend = 0, frame = 0
 2369              		@ frame_needed = 0, uses_anonymous_args = 0
 672:src/lcd.c     ****   //  lcd_clear_buf();
 673:src/lcd.c     ****   lcd_fill_rect (0, 0, 400, 188, 0); //leave bottom 52 rows for menu 
 2370              		.loc 1 673 3 view .LVU462
 671:src/lcd.c     ****   //  lcd_clear_buf();
 2371              		.loc 1 671 27 is_stmt 0 view .LVU463
 2372 0000 10B5     		push	{r4, lr}
 2373              		.cfi_def_cfa_offset 8
 2374              		.cfi_offset 4, -8
 2375              		.cfi_offset 14, -4
 2376 0002 82B0     		sub	sp, sp, #8
 2377              		.cfi_def_cfa_offset 16
 2378              		.loc 1 673 3 view .LVU464
 2379 0004 0021     		movs	r1, #0
 2380 0006 0091     		str	r1, [sp]
 2381 0008 0846     		mov	r0, r1
 2382 000a BC23     		movs	r3, #188
 2383 000c 4FF4C872 		mov	r2, #400
 2384 0010 044C     		ldr	r4, .L232
 2385 0012 A047     		blx	r4
 2386              	.LVL202:
 674:src/lcd.c     ****   show_disp();
 2387              		.loc 1 674 3 is_stmt 1 view .LVU465
 2388 0014 FFF7FEFF 		bl	show_disp
 2389              	.LVL203:
 675:src/lcd.c     ****   lcd_refresh();
 2390              		.loc 1 675 3 view .LVU466
 2391 0018 034B     		ldr	r3, .L232+4
 676:src/lcd.c     **** }
 2392              		.loc 1 676 1 is_stmt 0 view .LVU467
 2393 001a 02B0     		add	sp, sp, #8
 2394              		.cfi_def_cfa_offset 8
 2395              		@ sp needed
 2396 001c BDE81040 		pop	{r4, lr}
 2397              		.cfi_restore 14
 2398              		.cfi_restore 4
 2399              		.cfi_def_cfa_offset 0
 675:src/lcd.c     ****   lcd_refresh();
 2400              		.loc 1 675 3 view .LVU468
 2401 0020 1847     		bx	r3	@ indirect register sibling call
 2402              	.LVL204:
 2403              	.L233:
 2404 0022 00BF     		.align	2
 2405              	.L232:
ARM GAS  /tmp/cccOP6XM.s 			page 57


 2406 0024 3D020008 		.word	134218301
 2407 0028 31020008 		.word	134218289
 2408              		.cfi_endproc
 2409              	.LFE29:
 2411              		.section	.text.finish_RPN,"ax",%progbits
 2412              		.align	1
 2413              		.p2align 2,,3
 2414              		.global	finish_RPN
 2415              		.syntax unified
 2416              		.thumb
 2417              		.thumb_func
 2418              		.fpu fpv4-sp-d16
 2420              	finish_RPN:
 2421              	.LFB30:
 677:src/lcd.c     **** void finish_RPN(void) {//only refreshes the RPN flag
 2422              		.loc 1 677 23 is_stmt 1 view -0
 2423              		.cfi_startproc
 2424              		@ args = 0, pretend = 0, frame = 0
 2425              		@ frame_needed = 0, uses_anonymous_args = 0
 678:src/lcd.c     ****   t20->inv = !dots[RPN];
 2426              		.loc 1 678 3 view .LVU470
 677:src/lcd.c     **** void finish_RPN(void) {//only refreshes the RPN flag
 2427              		.loc 1 677 23 is_stmt 0 view .LVU471
 2428 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2429              		.cfi_def_cfa_offset 24
 2430              		.cfi_offset 4, -24
 2431              		.cfi_offset 5, -20
 2432              		.cfi_offset 6, -16
 2433              		.cfi_offset 7, -12
 2434              		.cfi_offset 8, -8
 2435              		.cfi_offset 14, -4
 2436              		.loc 1 678 19 view .LVU472
 2437 0004 114F     		ldr	r7, .L236
 2438              		.loc 1 678 3 view .LVU473
 2439 0006 124C     		ldr	r4, .L236+4
 2440              		.loc 1 678 14 view .LVU474
 2441 0008 97F88D30 		ldrb	r3, [r7, #141]	@ zero_extendqisi2
 2442              		.loc 1 678 3 view .LVU475
 2443 000c 206B     		ldr	r0, [r4, #48]
 679:src/lcd.c     **** #ifdef BIGGER_DISPLAY
 680:src/lcd.c     ****   lcd_setXY (t20, 365, 70-30); // 70 is y_ann
 2444              		.loc 1 680 3 view .LVU476
 2445 000e 114E     		ldr	r6, .L236+8
 681:src/lcd.c     **** #else
 682:src/lcd.c     ****   lcd_setXY (t20, 365, 130-30); // 130 is y_ann
 683:src/lcd.c     **** #endif
 684:src/lcd.c     ****   lcd_writeText(t20, "RPN");
 2446              		.loc 1 684 3 view .LVU477
 2447 0010 114D     		ldr	r5, .L236+12
 678:src/lcd.c     **** #ifdef BIGGER_DISPLAY
 2448              		.loc 1 678 14 view .LVU478
 2449 0012 B3FA83F3 		clz	r3, r3
 2450 0016 5B09     		lsrs	r3, r3, #5
 2451 0018 4374     		strb	r3, [r0, #17]
 680:src/lcd.c     **** #else
 2452              		.loc 1 680 3 is_stmt 1 view .LVU479
 2453 001a 2822     		movs	r2, #40
ARM GAS  /tmp/cccOP6XM.s 			page 58


 2454 001c 40F26D11 		movw	r1, #365
 2455 0020 B047     		blx	r6
 2456              	.LVL205:
 2457              		.loc 1 684 3 view .LVU480
 2458 0022 206B     		ldr	r0, [r4, #48]
 2459 0024 0D49     		ldr	r1, .L236+16
 2460 0026 A847     		blx	r5
 2461              	.LVL206:
 685:src/lcd.c     ****   t20->inv = !dots[RCL_annun];
 2462              		.loc 1 685 3 view .LVU481
 2463              		.loc 1 685 14 is_stmt 0 view .LVU482
 2464 0028 97F88A30 		ldrb	r3, [r7, #138]	@ zero_extendqisi2
 2465              		.loc 1 685 3 view .LVU483
 2466 002c 206B     		ldr	r0, [r4, #48]
 2467              		.loc 1 685 14 view .LVU484
 2468 002e B3FA83F3 		clz	r3, r3
 2469 0032 5B09     		lsrs	r3, r3, #5
 2470 0034 4374     		strb	r3, [r0, #17]
 686:src/lcd.c     **** #ifdef BIGGER_DISPLAY
 687:src/lcd.c     ****   lcd_setXY (t20, 365, 70-50); // 70 is y_ann
 2471              		.loc 1 687 3 is_stmt 1 view .LVU485
 2472 0036 1422     		movs	r2, #20
 2473 0038 40F26D11 		movw	r1, #365
 2474 003c B047     		blx	r6
 2475              	.LVL207:
 688:src/lcd.c     **** #else
 689:src/lcd.c     ****   lcd_setXY (t20, 365, 130-50); // 130 is y_ann
 690:src/lcd.c     **** #endif
 691:src/lcd.c     ****   lcd_writeText(t20, "RCL");
 2476              		.loc 1 691 3 view .LVU486
 2477 003e 206B     		ldr	r0, [r4, #48]
 2478 0040 0749     		ldr	r1, .L236+20
 2479 0042 A847     		blx	r5
 2480              	.LVL208:
 692:src/lcd.c     ****   lcd_refresh();
 2481              		.loc 1 692 3 view .LVU487
 693:src/lcd.c     **** }
 2482              		.loc 1 693 1 is_stmt 0 view .LVU488
 2483 0044 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2484              		.cfi_restore 14
 2485              		.cfi_restore 8
 2486              		.cfi_restore 7
 2487              		.cfi_restore 6
 2488              		.cfi_restore 5
 2489              		.cfi_restore 4
 2490              		.cfi_def_cfa_offset 0
 692:src/lcd.c     ****   lcd_refresh();
 2491              		.loc 1 692 3 view .LVU489
 2492 0048 064B     		ldr	r3, .L236+24
 2493 004a 1847     		bx	r3	@ indirect register sibling call
 2494              	.LVL209:
 2495              	.L237:
 2496              		.align	2
 2497              	.L236:
 2498 004c 00000000 		.word	.LANCHOR0
 2499 0050 00200010 		.word	268443648
 2500 0054 6D020008 		.word	134218349
ARM GAS  /tmp/cccOP6XM.s 			page 59


 2501 0058 7D020008 		.word	134218365
 2502 005c 20000000 		.word	.LC7
 2503 0060 14000000 		.word	.LC4
 2504 0064 31020008 		.word	134218289
 2505              		.cfi_endproc
 2506              	.LFE30:
 2508              		.section	.text.do_all_dots,"ax",%progbits
 2509              		.align	1
 2510              		.p2align 2,,3
 2511              		.global	do_all_dots
 2512              		.syntax unified
 2513              		.thumb
 2514              		.thumb_func
 2515              		.fpu fpv4-sp-d16
 2517              	do_all_dots:
 2518              	.LFB31:
 694:src/lcd.c     **** 
 695:src/lcd.c     **** extern void all_menu_dots (void);
 696:src/lcd.c     **** 
 697:src/lcd.c     **** void do_all_dots(void) {
 2519              		.loc 1 697 24 is_stmt 1 view -0
 2520              		.cfi_startproc
 2521              		@ args = 0, pretend = 0, frame = 0
 2522              		@ frame_needed = 0, uses_anonymous_args = 0
 698:src/lcd.c     ****   for (int i=0; i<MAX_DOTS; i++) {
 2523              		.loc 1 698 3 view .LVU491
 2524              	.LBB85:
 2525              		.loc 1 698 8 view .LVU492
 2526              	.LVL210:
 2527              		.loc 1 698 17 view .LVU493
 2528              	.LBE85:
 697:src/lcd.c     ****   for (int i=0; i<MAX_DOTS; i++) {
 2529              		.loc 1 697 24 is_stmt 0 view .LVU494
 2530 0000 08B5     		push	{r3, lr}
 2531              		.cfi_def_cfa_offset 8
 2532              		.cfi_offset 3, -8
 2533              		.cfi_offset 14, -4
 2534 0002 094B     		ldr	r3, .L242
 2535              	.LBB90:
 2536              	.LBB86:
 2537              	.LBB87:
  52:src/lcd.c     **** }
 2538              		.loc 1 52 17 view .LVU495
 2539 0004 0121     		movs	r1, #1
 2540 0006 03F24A22 		addw	r2, r3, #586
 2541              	.LVL211:
 2542              	.L239:
  52:src/lcd.c     **** }
 2543              		.loc 1 52 17 view .LVU496
 2544              	.LBE87:
 2545              	.LBE86:
 699:src/lcd.c     ****     set_dot(i);
 2546              		.loc 1 699 5 is_stmt 1 view .LVU497
 2547              	.LBB89:
 2548              	.LBI86:
  51:src/lcd.c     ****         dots[n] = 1;
 2549              		.loc 1 51 6 view .LVU498
ARM GAS  /tmp/cccOP6XM.s 			page 60


 2550              	.LBB88:
  52:src/lcd.c     **** }
 2551              		.loc 1 52 9 view .LVU499
  52:src/lcd.c     **** }
 2552              		.loc 1 52 17 is_stmt 0 view .LVU500
 2553 000a 03F8011F 		strb	r1, [r3, #1]!
 2554              	.LVL212:
  52:src/lcd.c     **** }
 2555              		.loc 1 52 17 view .LVU501
 2556              	.LBE88:
 2557              	.LBE89:
 698:src/lcd.c     ****     set_dot(i);
 2558              		.loc 1 698 29 is_stmt 1 view .LVU502
 698:src/lcd.c     ****     set_dot(i);
 2559              		.loc 1 698 17 view .LVU503
 698:src/lcd.c     ****     set_dot(i);
 2560              		.loc 1 698 3 is_stmt 0 view .LVU504
 2561 000e 9342     		cmp	r3, r2
 2562 0010 FBD1     		bne	.L239
 2563              	.LBE90:
 700:src/lcd.c     ****   }
 701:src/lcd.c     ****   all_menu_dots();
 2564              		.loc 1 701 3 is_stmt 1 view .LVU505
 2565 0012 FFF7FEFF 		bl	all_menu_dots
 2566              	.LVL213:
 702:src/lcd.c     ****   finish_display();
 2567              		.loc 1 702 3 view .LVU506
 2568 0016 FFF7FEFF 		bl	finish_display
 2569              	.LVL214:
 703:src/lcd.c     ****   clr_dot(RCL_annun);
 2570              		.loc 1 703 3 view .LVU507
 2571              	.LBB91:
 2572              	.LBI91:
  54:src/lcd.c     ****         dots[n] = 0;
 2573              		.loc 1 54 6 view .LVU508
 2574              	.LBB92:
  55:src/lcd.c     **** }
 2575              		.loc 1 55 9 view .LVU509
  55:src/lcd.c     **** }
 2576              		.loc 1 55 17 is_stmt 0 view .LVU510
 2577 001a 044B     		ldr	r3, .L242+4
 2578 001c 0022     		movs	r2, #0
 2579 001e 83F88A20 		strb	r2, [r3, #138]
 2580              	.LVL215:
  55:src/lcd.c     **** }
 2581              		.loc 1 55 17 view .LVU511
 2582              	.LBE92:
 2583              	.LBE91:
 704:src/lcd.c     ****   clr_dot(LIT_EQ);
 2584              		.loc 1 704 3 is_stmt 1 view .LVU512
 2585              	.LBB93:
 2586              	.LBI93:
  54:src/lcd.c     ****         dots[n] = 0;
 2587              		.loc 1 54 6 view .LVU513
 2588              	.LBB94:
  55:src/lcd.c     **** }
 2589              		.loc 1 55 9 view .LVU514
ARM GAS  /tmp/cccOP6XM.s 			page 61


  55:src/lcd.c     **** }
 2590              		.loc 1 55 17 is_stmt 0 view .LVU515
 2591 0022 83F88420 		strb	r2, [r3, #132]
 2592              	.LVL216:
  55:src/lcd.c     **** }
 2593              		.loc 1 55 17 view .LVU516
 2594              	.LBE94:
 2595              	.LBE93:
 705:src/lcd.c     **** }
 2596              		.loc 1 705 1 view .LVU517
 2597 0026 08BD     		pop	{r3, pc}
 2598              	.L243:
 2599              		.align	2
 2600              	.L242:
 2601 0028 FFFFFFFF 		.word	.LANCHOR0-1
 2602 002c 00000000 		.word	.LANCHOR0
 2603              		.cfi_endproc
 2604              	.LFE31:
 2606              		.section	.text.show_progtrace,"ax",%progbits
 2607              		.align	1
 2608              		.p2align 2,,3
 2609              		.global	show_progtrace
 2610              		.syntax unified
 2611              		.thumb
 2612              		.thumb_func
 2613              		.fpu fpv4-sp-d16
 2615              	show_progtrace:
 2616              	.LVL217:
 2617              	.LFB32:
 706:src/lcd.c     **** #endif
 707:src/lcd.c     **** 
 708:src/lcd.c     **** #ifdef CONSOLE
 709:src/lcd.c     **** #ifndef DM42
 710:src/lcd.c     **** /* Take a string and cleanse all non-printing characters from it.
 711:src/lcd.c     ****  * Replace them with the usual [xxx] sequences.
 712:src/lcd.c     ****  */
 713:src/lcd.c     **** extern const char *pretty(unsigned char);
 714:src/lcd.c     **** 
 715:src/lcd.c     **** static char *cleanse(const char *s) {
 716:src/lcd.c     ****         static char res[50];
 717:src/lcd.c     ****         char *p;
 718:src/lcd.c     **** 
 719:src/lcd.c     ****         for (p=res; *s != '\0'; s++) {
 720:src/lcd.c     ****                 unsigned char c = 0xff & *s;
 721:src/lcd.c     ****                 const char *m = pretty(c);
 722:src/lcd.c     ****                 if (m == NULL) {
 723:src/lcd.c     ****                         *p++ = c;
 724:src/lcd.c     ****                 } else {
 725:src/lcd.c     ****                         *p++ = '[';
 726:src/lcd.c     ****                         p = scopy_char(p, m, ']');
 727:src/lcd.c     ****                 }
 728:src/lcd.c     ****         }
 729:src/lcd.c     ****         *p = '\0';
 730:src/lcd.c     ****         return res;
 731:src/lcd.c     **** }
 732:src/lcd.c     **** #endif
 733:src/lcd.c     **** #endif
ARM GAS  /tmp/cccOP6XM.s 			page 62


 734:src/lcd.c     **** 
 735:src/lcd.c     **** void show_progtrace(char *buf) {
 2618              		.loc 1 735 32 is_stmt 1 view -0
 2619              		.cfi_startproc
 2620              		@ args = 0, pretend = 0, frame = 0
 2621              		@ frame_needed = 0, uses_anonymous_args = 0
 2622              		@ link register save eliminated.
 736:src/lcd.c     **** #ifndef DM42
 737:src/lcd.c     **** #ifdef CONSOLE
 738:src/lcd.c     ****         int pc = state_pc();
 739:src/lcd.c     **** 
 740:src/lcd.c     **** #ifdef USECURSES
 741:src/lcd.c     ****         int i;
 742:src/lcd.c     **** 
 743:src/lcd.c     ****         if (!State2.flags)
 744:src/lcd.c     ****                 return;
 745:src/lcd.c     **** 
 746:src/lcd.c     ****         for (i=4; i>0 && pc >= 0; i--) {
 747:src/lcd.c     ****                 MOVE(0, i);
 748:src/lcd.c     ****                 if (pc) {
 749:src/lcd.c     ****                         opcode op = getprog(pc);
 750:src/lcd.c     ****                         PRINTF("%03d %08x: %s", pc, op, cleanse(prt(op, buf)));
 751:src/lcd.c     ****                 } else
 752:src/lcd.c     ****                         PRINTF("000:");
 753:src/lcd.c     ****                 pc = do_dec(pc, 1);
 754:src/lcd.c     ****         }
 755:src/lcd.c     **** #endif
 756:src/lcd.c     **** #endif
 757:src/lcd.c     **** #endif       
 758:src/lcd.c     **** }
 2623              		.loc 1 758 1 view .LVU519
 2624 0000 7047     		bx	lr
 2625              		.cfi_endproc
 2626              	.LFE32:
 2628 0002 00BF     		.section	.bss.dots,"aw",%nobits
 2629              		.align	2
 2630              		.set	.LANCHOR0,. + 0
 2633              	dots:
 2634 0000 00000000 		.space	586
 2634      00000000 
 2634      00000000 
 2634      00000000 
 2634      00000000 
 2635              		.text
 2636              	.Letext0:
 2637              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 2638              		.file 3 "dmcp/ff_ifc.h"
 2639              		.file 4 "dmcp/dmcp.h"
 2640              		.file 5 "src/decNumber/decContext.h"
 2641              		.file 6 "src/decNumber/decNumber.h"
 2642              		.file 7 "src/decNumber/decimal64.h"
 2643              		.file 8 "src/decNumber/decimal128.h"
 2644              		.file 9 "src/xeq.h"
 2645              		.file 10 "src/data.h"
 2646              		.file 11 "src/display.h"
 2647              		.file 12 "src/pretty.h"
ARM GAS  /tmp/cccOP6XM.s 			page 63


DEFINED SYMBOLS
                            *ABS*:0000000000000000 lcd.c
     /tmp/cccOP6XM.s:18     .text.set_dot:0000000000000000 $t
     /tmp/cccOP6XM.s:27     .text.set_dot:0000000000000000 set_dot
     /tmp/cccOP6XM.s:46     .text.set_dot:0000000000000008 $d
     /tmp/cccOP6XM.s:51     .text.clr_dot:0000000000000000 $t
     /tmp/cccOP6XM.s:59     .text.clr_dot:0000000000000000 clr_dot
     /tmp/cccOP6XM.s:77     .text.clr_dot:0000000000000008 $d
     /tmp/cccOP6XM.s:82     .text.is_dot:0000000000000000 $t
     /tmp/cccOP6XM.s:90     .text.is_dot:0000000000000000 is_dot
     /tmp/cccOP6XM.s:109    .text.is_dot:0000000000000008 $d
     /tmp/cccOP6XM.s:114    .text.setuptty:0000000000000000 $t
     /tmp/cccOP6XM.s:122    .text.setuptty:0000000000000000 setuptty
     /tmp/cccOP6XM.s:140    .text.reset_disp:0000000000000000 $t
     /tmp/cccOP6XM.s:148    .text.reset_disp:0000000000000000 reset_disp
     /tmp/cccOP6XM.s:346    .text.reset_disp:0000000000000068 $d
     /tmp/cccOP6XM.s:351    .text.left_side:0000000000000000 $t
     /tmp/cccOP6XM.s:359    .text.left_side:0000000000000000 left_side
     /tmp/cccOP6XM.s:442    .text.left_side:0000000000000054 $d
     /tmp/cccOP6XM.s:447    .text.left_side_top:0000000000000000 $t
     /tmp/cccOP6XM.s:455    .text.left_side_top:0000000000000000 left_side_top
     /tmp/cccOP6XM.s:471    .text.left_side_bottom:0000000000000000 $t
     /tmp/cccOP6XM.s:479    .text.left_side_bottom:0000000000000000 left_side_bottom
     /tmp/cccOP6XM.s:501    .text.right_side:0000000000000000 $t
     /tmp/cccOP6XM.s:509    .text.right_side:0000000000000000 right_side
     /tmp/cccOP6XM.s:591    .text.right_side:000000000000005c $d
     /tmp/cccOP6XM.s:596    .text.right_side_top:0000000000000000 $t
     /tmp/cccOP6XM.s:604    .text.right_side_top:0000000000000000 right_side_top
     /tmp/cccOP6XM.s:620    .text.right_side_bottom:0000000000000000 $t
     /tmp/cccOP6XM.s:628    .text.right_side_bottom:0000000000000000 right_side_bottom
     /tmp/cccOP6XM.s:650    .text.top:0000000000000000 $t
     /tmp/cccOP6XM.s:658    .text.top:0000000000000000 top
     /tmp/cccOP6XM.s:725    .text.top:0000000000000040 $d
     /tmp/cccOP6XM.s:730    .text.middle:0000000000000000 $t
     /tmp/cccOP6XM.s:738    .text.middle:0000000000000000 middle
     /tmp/cccOP6XM.s:808    .text.middle:0000000000000040 $d
     /tmp/cccOP6XM.s:814    .text.bottom:0000000000000000 $t
     /tmp/cccOP6XM.s:822    .text.bottom:0000000000000000 bottom
     /tmp/cccOP6XM.s:892    .text.bottom:0000000000000048 $d
     /tmp/cccOP6XM.s:897    .text.decimal:0000000000000000 $t
     /tmp/cccOP6XM.s:905    .text.decimal:0000000000000000 decimal
     /tmp/cccOP6XM.s:942    .text.decimal:0000000000000018 $d
     /tmp/cccOP6XM.s:947    .text.comma:0000000000000000 $t
     /tmp/cccOP6XM.s:955    .text.comma:0000000000000000 comma
     /tmp/cccOP6XM.s:1009   .text.comma:000000000000002c $d
     /tmp/cccOP6XM.s:1014   .text.exp_left_side:0000000000000000 $t
     /tmp/cccOP6XM.s:1022   .text.exp_left_side:0000000000000000 exp_left_side
     /tmp/cccOP6XM.s:1089   .text.exp_left_side:0000000000000040 $d
     /tmp/cccOP6XM.s:1094   .text.exp_left_side_top:0000000000000000 $t
     /tmp/cccOP6XM.s:1102   .text.exp_left_side_top:0000000000000000 exp_left_side_top
     /tmp/cccOP6XM.s:1121   .text.exp_left_side_bottom:0000000000000000 $t
     /tmp/cccOP6XM.s:1129   .text.exp_left_side_bottom:0000000000000000 exp_left_side_bottom
     /tmp/cccOP6XM.s:1148   .text.exp_right_side:0000000000000000 $t
     /tmp/cccOP6XM.s:1156   .text.exp_right_side:0000000000000000 exp_right_side
     /tmp/cccOP6XM.s:1223   .text.exp_right_side:0000000000000044 $d
     /tmp/cccOP6XM.s:1228   .text.exp_right_side_top:0000000000000000 $t
     /tmp/cccOP6XM.s:1236   .text.exp_right_side_top:0000000000000000 exp_right_side_top
ARM GAS  /tmp/cccOP6XM.s 			page 64


     /tmp/cccOP6XM.s:1252   .text.exp_right_side_bottom:0000000000000000 $t
     /tmp/cccOP6XM.s:1260   .text.exp_right_side_bottom:0000000000000000 exp_right_side_bottom
     /tmp/cccOP6XM.s:1282   .text.exp_top:0000000000000000 $t
     /tmp/cccOP6XM.s:1290   .text.exp_top:0000000000000000 exp_top
     /tmp/cccOP6XM.s:1349   .text.exp_top:0000000000000034 $d
     /tmp/cccOP6XM.s:1354   .text.exp_bottom:0000000000000000 $t
     /tmp/cccOP6XM.s:1362   .text.exp_bottom:0000000000000000 exp_bottom
     /tmp/cccOP6XM.s:1424   .text.exp_bottom:0000000000000038 $d
     /tmp/cccOP6XM.s:1429   .text.exp_middle:0000000000000000 $t
     /tmp/cccOP6XM.s:1437   .text.exp_middle:0000000000000000 exp_middle
     /tmp/cccOP6XM.s:1503   .text.exp_middle:0000000000000040 $d
     /tmp/cccOP6XM.s:1508   .rodata.show_disp.str1.4:0000000000000000 $d
     /tmp/cccOP6XM.s:1533   .text.show_disp:0000000000000000 $t
     /tmp/cccOP6XM.s:1541   .text.show_disp:0000000000000000 show_disp
     /tmp/cccOP6XM.s:1782   .text.show_disp:00000000000000c4 $d
     /tmp/cccOP6XM.s:1786   .text.show_disp:00000000000000cc $t
     /tmp/cccOP6XM.s:2280   .text.show_disp:0000000000000360 $d
     /tmp/cccOP6XM.s:2297   .text.show_stack:0000000000000000 $t
     /tmp/cccOP6XM.s:2305   .text.show_stack:0000000000000000 show_stack
     /tmp/cccOP6XM.s:2316   .text.show_flags:0000000000000000 $t
     /tmp/cccOP6XM.s:2324   .text.show_flags:0000000000000000 show_flags
     /tmp/cccOP6XM.s:2335   .text.wait_for_display:0000000000000000 $t
     /tmp/cccOP6XM.s:2343   .text.wait_for_display:0000000000000000 wait_for_display
     /tmp/cccOP6XM.s:2356   .text.finish_display:0000000000000000 $t
     /tmp/cccOP6XM.s:2364   .text.finish_display:0000000000000000 finish_display
     /tmp/cccOP6XM.s:2406   .text.finish_display:0000000000000024 $d
     /tmp/cccOP6XM.s:2412   .text.finish_RPN:0000000000000000 $t
     /tmp/cccOP6XM.s:2420   .text.finish_RPN:0000000000000000 finish_RPN
     /tmp/cccOP6XM.s:2498   .text.finish_RPN:000000000000004c $d
     /tmp/cccOP6XM.s:2509   .text.do_all_dots:0000000000000000 $t
     /tmp/cccOP6XM.s:2517   .text.do_all_dots:0000000000000000 do_all_dots
     /tmp/cccOP6XM.s:2601   .text.do_all_dots:0000000000000028 $d
     /tmp/cccOP6XM.s:2607   .text.show_progtrace:0000000000000000 $t
     /tmp/cccOP6XM.s:2615   .text.show_progtrace:0000000000000000 show_progtrace
     /tmp/cccOP6XM.s:2629   .bss.dots:0000000000000000 $d
     /tmp/cccOP6XM.s:2633   .bss.dots:0000000000000000 dots

UNDEFINED SYMBOLS
dot
all_menu_dots

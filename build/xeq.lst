ARM GAS  /tmp/ccqED0AM.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"xeq.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.find_section_bounds,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	find_section_bounds:
  27              	.LVL0:
  28              	.LFB19:
  29              		.file 1 "src/xeq.c"
   1:src/xeq.c     **** /* This file is part of 34S.
   2:src/xeq.c     ****  * 
   3:src/xeq.c     ****  * 34S is free software: you can redistribute it and/or modify
   4:src/xeq.c     ****  * it under the terms of the GNU General Public License as published by
   5:src/xeq.c     ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/xeq.c     ****  * (at your option) any later version.
   7:src/xeq.c     ****  * 
   8:src/xeq.c     ****  * 34S is distributed in the hope that it will be useful,
   9:src/xeq.c     ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/xeq.c     ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/xeq.c     ****  * GNU General Public License for more details.
  12:src/xeq.c     ****  * 
  13:src/xeq.c     ****  * You should have received a copy of the GNU General Public License
  14:src/xeq.c     ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/xeq.c     ****  */
  16:src/xeq.c     **** 
  17:src/xeq.c     **** #ifndef REALBUILD
  18:src/xeq.c     **** 
  19:src/xeq.c     **** #if defined(WIN32) && !defined(QTGUI) && !defined(IOS) && !defined(__GNUC__) && !defined(DM42)
  20:src/xeq.c     **** 
  21:src/xeq.c     **** #include <stdlib.h>  // sleep
  22:src/xeq.c     **** #include "win32.h"
  23:src/xeq.c     **** #define sleep _sleep
  24:src/xeq.c     **** #define strtoull _strtoui64
  25:src/xeq.c     **** 
  26:src/xeq.c     **** #else
  27:src/xeq.c     **** 
  28:src/xeq.c     **** #ifdef DM42
  29:src/xeq.c     **** #include "dmcp.h"
ARM GAS  /tmp/ccqED0AM.s 			page 2


  30:src/xeq.c     **** #else
  31:src/xeq.c     **** #include <unistd.h>
  32:src/xeq.c     **** #include <sys/time.h>
  33:src/xeq.c     **** extern unsigned long long strtoull(const char *, char **, int);
  34:src/xeq.c     **** #endif
  35:src/xeq.c     **** 
  36:src/xeq.c     **** #endif
  37:src/xeq.c     **** 
  38:src/xeq.c     **** #include <stdio.h>   // (s)printf
  39:src/xeq.c     **** #include <string.h>
  40:src/xeq.c     **** #include <stdlib.h>
  41:src/xeq.c     **** 
  42:src/xeq.c     **** #endif // not REALBUILD
  43:src/xeq.c     **** 
  44:src/xeq.c     **** #ifdef IOS
  45:src/xeq.c     **** #include <stdarg.h>
  46:src/xeq.c     **** #endif
  47:src/xeq.c     **** 
  48:src/xeq.c     **** #if __GNUC__ >= 4 && __GNUC_MINOR__ >= 6
  49:src/xeq.c     **** #define GNUC_POP_ERROR
  50:src/xeq.c     **** #pragma GCC diagnostic push
  51:src/xeq.c     **** #pragma GCC diagnostic ignored "-Warray-bounds"
  52:src/xeq.c     **** #endif
  53:src/xeq.c     **** 
  54:src/xeq.c     **** #define XEQ_INTERNAL 1
  55:src/xeq.c     **** #define DM42SAFE
  56:src/xeq.c     **** #include "xeq.h"
  57:src/xeq.c     **** #ifdef DM42
  58:src/xeq.c     **** #include "keys.h"
  59:src/xeq.c     **** #endif
  60:src/xeq.c     **** #include "storage.h"
  61:src/xeq.c     **** #include "decn.h"
  62:src/xeq.c     **** #include "complex.h"
  63:src/xeq.c     **** #include "stats.h"
  64:src/xeq.c     **** #include "display.h"
  65:src/xeq.c     **** #include "consts.h"
  66:src/xeq.c     **** #include "int.h"
  67:src/xeq.c     **** #include "date.h"
  68:src/xeq.c     **** #include "lcd.h"
  69:src/xeq.c     **** #include "xrom.h"
  70:src/xeq.c     **** #include "alpha.h"
  71:src/xeq.c     **** #ifdef INCLUDE_STOPWATCH
  72:src/xeq.c     **** #include "stopwatch.h"
  73:src/xeq.c     **** #endif
  74:src/xeq.c     **** #ifdef INFRARED
  75:src/xeq.c     **** #include "printer.h"
  76:src/xeq.c     **** #endif
  77:src/xeq.c     **** #undef DM42SAFE
  78:src/xeq.c     **** 
  79:src/xeq.c     **** #include "pretty.h"
  80:src/xeq.c     **** 
  81:src/xeq.c     **** 
  82:src/xeq.c     **** #include "xrom_targets.c"	// Generated by PP
  83:src/xeq.c     **** 
  84:src/xeq.c     **** /* Define the number of program Ticks that must elapse between flashing the
  85:src/xeq.c     ****  * RCL annunciator.
  86:src/xeq.c     ****  */
ARM GAS  /tmp/ccqED0AM.s 			page 3


  87:src/xeq.c     **** #define TICKS_PER_FLASH	(5)
  88:src/xeq.c     **** 
  89:src/xeq.c     **** /*
  90:src/xeq.c     ****  *  A program is running
  91:src/xeq.c     ****  */
  92:src/xeq.c     **** FLAG Running;
  93:src/xeq.c     **** FLAG XromRunning;
  94:src/xeq.c     **** 
  95:src/xeq.c     **** #ifndef CONSOLE
  96:src/xeq.c     **** /*
  97:src/xeq.c     ****  *  A program has just stopped
  98:src/xeq.c     ****  */
  99:src/xeq.c     **** FLAG JustStopped;
 100:src/xeq.c     **** #endif
 101:src/xeq.c     **** 
 102:src/xeq.c     **** /*
 103:src/xeq.c     ****  *  Count down counter for a programmed pause
 104:src/xeq.c     ****  */
 105:src/xeq.c     **** volatile unsigned char Pause;
 106:src/xeq.c     **** 
 107:src/xeq.c     **** /*
 108:src/xeq.c     ****  *  Some long running function has called busy();
 109:src/xeq.c     ****  */
 110:src/xeq.c     **** FLAG Busy;
 111:src/xeq.c     **** 
 112:src/xeq.c     **** /*
 113:src/xeq.c     ****  *  Error code
 114:src/xeq.c     ****  */
 115:src/xeq.c     **** SMALL_INT Error;
 116:src/xeq.c     **** 
 117:src/xeq.c     **** /*
 118:src/xeq.c     ****  *  Indication of PC wrap around
 119:src/xeq.c     ****  */
 120:src/xeq.c     **** FLAG PcWrapped;
 121:src/xeq.c     **** 
 122:src/xeq.c     **** /*
 123:src/xeq.c     ****  *  Currently executed function
 124:src/xeq.c     ****  */
 125:src/xeq.c     **** s_opcode XeqOpCode;
 126:src/xeq.c     **** 
 127:src/xeq.c     **** /*
 128:src/xeq.c     ****  *  Temporary display (not X)
 129:src/xeq.c     ****  */
 130:src/xeq.c     **** SMALL_INT ShowRegister;
 131:src/xeq.c     **** 
 132:src/xeq.c     **** /*
 133:src/xeq.c     ****  *  User code being called from XROM
 134:src/xeq.c     ****  */
 135:src/xeq.c     **** SMALL_INT XromUserPc;
 136:src/xeq.c     **** SMALL_INT UserLocalRegs;
 137:src/xeq.c     **** 
 138:src/xeq.c     **** /* We need various different math contexts.
 139:src/xeq.c     ****  * More efficient to define these globally and reuse them as needed.
 140:src/xeq.c     ****  */
 141:src/xeq.c     **** decContext Ctx;
 142:src/xeq.c     **** 
 143:src/xeq.c     **** /*
ARM GAS  /tmp/ccqED0AM.s 			page 4


 144:src/xeq.c     ****  * A buffer for instruction display
 145:src/xeq.c     ****  */
 146:src/xeq.c     **** char TraceBuffer[25];
 147:src/xeq.c     **** 
 148:src/xeq.c     **** /*
 149:src/xeq.c     ****  *  Total Size of the return stack
 150:src/xeq.c     ****  */
 151:src/xeq.c     **** SMALL_INT RetStkSize;
 152:src/xeq.c     **** 
 153:src/xeq.c     **** /*
 154:src/xeq.c     ****  *  Number of remaining program steps
 155:src/xeq.c     ****  */
 156:src/xeq.c     **** SMALL_INT ProgFree;
 157:src/xeq.c     **** 
 158:src/xeq.c     **** /*
 159:src/xeq.c     ****  * The actual top of the return stack
 160:src/xeq.c     ****  */
 161:src/xeq.c     **** unsigned short *RetStk;
 162:src/xeq.c     **** 
 163:src/xeq.c     **** /*
 164:src/xeq.c     ****  *  The location of the RPN stack
 165:src/xeq.c     ****  */
 166:src/xeq.c     **** REGISTER *StackBase;
 167:src/xeq.c     **** 
 168:src/xeq.c     **** #ifdef INFRARED
 169:src/xeq.c     **** /*
 170:src/xeq.c     ****  *  Is tracing active?
 171:src/xeq.c     ****  */
 172:src/xeq.c     **** FLAG Tracing;
 173:src/xeq.c     **** #endif
 174:src/xeq.c     **** 
 175:src/xeq.c     **** /*
 176:src/xeq.c     **** *	Indicates that a coordinate converstion has just happened
 177:src/xeq.c     **** */
 178:src/xeq.c     **** #ifdef RP_PREFIX
 179:src/xeq.c     **** SMALL_INT RectPolConv; // 1 - R->P just done; 2 - P->R just done
 180:src/xeq.c     **** #endif
 181:src/xeq.c     **** 
 182:src/xeq.c     **** /*
 183:src/xeq.c     ****  *  Check if the current PC is in XROM
 184:src/xeq.c     ****  */
 185:src/xeq.c     **** int is_xrom(void) {
 186:src/xeq.c     **** 	return isXROM(state_pc());
 187:src/xeq.c     **** }
 188:src/xeq.c     **** 
 189:src/xeq.c     **** /*
 190:src/xeq.c     ****  *  Shift the return stack.
 191:src/xeq.c     ****  *  The distance is in levels.
 192:src/xeq.c     ****  *  If argument is negative, return stack will shrink.
 193:src/xeq.c     ****  *  Returns 1 if unsuccessful (error is set)
 194:src/xeq.c     ****  */
 195:src/xeq.c     **** int move_retstk(int distance)
 196:src/xeq.c     **** {
 197:src/xeq.c     **** #ifndef REALBUILD
 198:src/xeq.c     **** 	// Sanity check
 199:src/xeq.c     **** 	if (XromFlags.xIN) {
 200:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
ARM GAS  /tmp/ccqED0AM.s 			page 5


 201:src/xeq.c     **** 		return 1;
 202:src/xeq.c     **** 	}
 203:src/xeq.c     **** #endif
 204:src/xeq.c     **** 	if (RetStkSize + RetStkPtr + distance < 0) {
 205:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 206:src/xeq.c     **** 		return 1;
 207:src/xeq.c     **** 	}
 208:src/xeq.c     **** 	xcopy(RetStk + RetStkPtr + distance, RetStk + RetStkPtr, (-RetStkPtr) << 1);
 209:src/xeq.c     **** 	RetStk += distance;
 210:src/xeq.c     **** 	RetStkSize += distance;
 211:src/xeq.c     **** 	return 0;
 212:src/xeq.c     **** }
 213:src/xeq.c     **** 
 214:src/xeq.c     **** /*
 215:src/xeq.c     ****  *  How many stack levels with local data have we?
 216:src/xeq.c     ****  */
 217:src/xeq.c     **** int local_levels(void) {
 218:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 219:src/xeq.c     **** }
 220:src/xeq.c     **** 
 221:src/xeq.c     **** /*
 222:src/xeq.c     ****  *  How many local registers have we?
 223:src/xeq.c     ****  *  The result depends on the RARG operation to allow for "alien" RCL commands
 224:src/xeq.c     ****  */
 225:src/xeq.c     **** int local_regs_rarg(enum rarg op) {
 226:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 227:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 228:src/xeq.c     **** }
 229:src/xeq.c     **** 
 230:src/xeq.c     **** /*
 231:src/xeq.c     ****  *  How many local registers have we?
 232:src/xeq.c     ****  */
 233:src/xeq.c     **** int local_regs(void) {
 234:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 235:src/xeq.c     **** }
 236:src/xeq.c     **** 
 237:src/xeq.c     **** /*
 238:src/xeq.c     ****  *  How many global registers have we?
 239:src/xeq.c     ****  *  The result depends on the RARG operation to allow for "alien" RCL commands
 240:src/xeq.c     ****  */
 241:src/xeq.c     **** unsigned int global_regs_rarg(enum rarg op) {
 242:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 243:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 244:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 245:src/xeq.c     **** 	}
 246:src/xeq.c     **** 	else
 247:src/xeq.c     **** 		return NumRegs;
 248:src/xeq.c     **** }
 249:src/xeq.c     **** 
 250:src/xeq.c     **** /*
 251:src/xeq.c     ****  *  How many global registers have we?
 252:src/xeq.c     ****  */
 253:src/xeq.c     **** unsigned int global_regs(void) {
 254:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 255:src/xeq.c     **** }
 256:src/xeq.c     **** 
 257:src/xeq.c     **** 
ARM GAS  /tmp/ccqED0AM.s 			page 6


 258:src/xeq.c     **** #if defined(CONSOLE)
 259:src/xeq.c     **** // Console screen only
 260:src/xeq.c     **** unsigned int get_local_flags(void) {
 261:src/xeq.c     **** 	if (LocalRegs == 0)
 262:src/xeq.c     **** 		return 0;
 263:src/xeq.c     **** 	return RetStk[LocalRegs + 1];
 264:src/xeq.c     **** }
 265:src/xeq.c     **** #endif
 266:src/xeq.c     **** 
 267:src/xeq.c     **** void version(enum nilop op) {
 268:src/xeq.c     **** 	State2.version = 1;
 269:src/xeq.c     **** 	if (!State2.runmode)
 270:src/xeq.c     **** 		display();
 271:src/xeq.c     **** }
 272:src/xeq.c     **** 
 273:src/xeq.c     **** void cmd_off(enum nilop op) {
 274:src/xeq.c     **** 	shutdown();
 275:src/xeq.c     **** }
 276:src/xeq.c     **** 
 277:src/xeq.c     **** #ifndef state_pc
 278:src/xeq.c     **** unsigned int state_pc(void) {
 279:src/xeq.c     **** 	return State.pc;	
 280:src/xeq.c     **** }
 281:src/xeq.c     **** #endif
 282:src/xeq.c     **** static void raw_set_pc(unsigned int pc) {
 283:src/xeq.c     **** 	State.pc = pc;
 284:src/xeq.c     **** 	update_program_bounds(0);
 285:src/xeq.c     **** }
 286:src/xeq.c     **** 
 287:src/xeq.c     **** /*
 288:src/xeq.c     ****  *  Where do the program regions start?
 289:src/xeq.c     ****  */
 290:src/xeq.c     **** #ifdef DM42
 291:src/xeq.c     **** 
 292:src/xeq.c     **** #pragma GCC diagnostic push
 293:src/xeq.c     **** #pragma GCC diagnostic ignored "-Wdiscarded-qualifiers"
 294:src/xeq.c     **** static s_opcode * RegionTab[] = {
 295:src/xeq.c     **** 	NULL,
 296:src/xeq.c     **** 	NULL,
 297:src/xeq.c     **** 	NULL,
 298:src/xeq.c     **** 	xrom
 299:src/xeq.c     **** };
 300:src/xeq.c     **** #pragma GCC diagnostic pop
 301:src/xeq.c     **** 
 302:src/xeq.c     **** void init_RegionTab (void) {
 303:src/xeq.c     ****   RegionTab[0] = (s_opcode*) Prog;
 304:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 305:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 306:src/xeq.c     **** }
 307:src/xeq.c     **** 
 308:src/xeq.c     **** #else
 309:src/xeq.c     **** static const s_opcode *const RegionTab[] = {
 310:src/xeq.c     **** 	Prog,
 311:src/xeq.c     **** 	UserFlash.prog,
 312:src/xeq.c     **** 	BackupFlash._prog,
 313:src/xeq.c     **** 	xrom
 314:src/xeq.c     **** };
ARM GAS  /tmp/ccqED0AM.s 			page 7


 315:src/xeq.c     **** #endif
 316:src/xeq.c     **** /*
 317:src/xeq.c     ****  *  Size of a program segment
 318:src/xeq.c     ****  */
 319:src/xeq.c     **** int sizeLIB(int region) {
 320:src/xeq.c     **** 	if (region == REGION_XROM)
 321:src/xeq.c     **** 		return xrom_size;
 322:src/xeq.c     **** 	else
 323:src/xeq.c     **** 		return (int)RegionTab[region][-1];
 324:src/xeq.c     **** }
 325:src/xeq.c     **** 
 326:src/xeq.c     **** 
 327:src/xeq.c     **** /*
 328:src/xeq.c     ****  *  Get an opcode, check for double length codes
 329:src/xeq.c     ****  */
 330:src/xeq.c     **** static opcode get_opcode( const s_opcode *loc )
 331:src/xeq.c     **** {
 332:src/xeq.c     **** 	opcode r = *loc;
 333:src/xeq.c     **** 	if ( isDBL(r) ) {
 334:src/xeq.c     **** 		r |= loc[1] << 16;
 335:src/xeq.c     **** 	}
 336:src/xeq.c     **** 	return r;
 337:src/xeq.c     **** }
 338:src/xeq.c     **** 
 339:src/xeq.c     **** 
 340:src/xeq.c     **** /* 
 341:src/xeq.c     ****  * Return the program memory location specified.
 342:src/xeq.c     ****  */
 343:src/xeq.c     **** opcode getprog(unsigned int pc) {
 344:src/xeq.c     **** 
 345:src/xeq.c     **** 	const int region = nLIB(pc);
 346:src/xeq.c     **** 	int offset = offsetLIB(pc);
 347:src/xeq.c     **** 
 348:src/xeq.c     **** 	if (offset < 0 || offset >= sizeLIB(region))
 349:src/xeq.c     **** 		return OP_NIL | OP_END;
 350:src/xeq.c     **** 	return get_opcode(RegionTab[region] + offset);
 351:src/xeq.c     **** }
 352:src/xeq.c     **** 
 353:src/xeq.c     **** 
 354:src/xeq.c     **** /* 
 355:src/xeq.c     ****  * Return the physical start-address of the current program
 356:src/xeq.c     ****  */
 357:src/xeq.c     **** const s_opcode *get_current_prog(void) {
 358:src/xeq.c     **** 
 359:src/xeq.c     **** 	const int region = nLIB(ProgBegin);
 360:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 361:src/xeq.c     **** }
 362:src/xeq.c     **** 
 363:src/xeq.c     **** 
 364:src/xeq.c     **** /*
 365:src/xeq.c     ****  *  Set PC with sanity check
 366:src/xeq.c     ****  */
 367:src/xeq.c     **** void set_pc(unsigned int pc) {
 368:src/xeq.c     **** 	if (isRAM(pc)) {
 369:src/xeq.c     **** 		if (pc > ProgSize)
 370:src/xeq.c     **** 			pc = ProgSize;
 371:src/xeq.c     **** 		if (pc > 1 && isDBL(Prog_1[pc - 1]))
ARM GAS  /tmp/ccqED0AM.s 			page 8


 372:src/xeq.c     **** 			pc--;
 373:src/xeq.c     **** 	} else if (!isXROM(pc)) {
 374:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 375:src/xeq.c     **** 		if (pc > n - 1)
 376:src/xeq.c     **** 			pc = n - 1;
 377:src/xeq.c     **** 		if (pc > startLIB(pc) && isDBL(getprog(pc - 1)))
 378:src/xeq.c     **** 			--pc;
 379:src/xeq.c     **** 	}
 380:src/xeq.c     **** 	raw_set_pc(pc);
 381:src/xeq.c     **** }
 382:src/xeq.c     **** 
 383:src/xeq.c     **** 
 384:src/xeq.c     **** 
 385:src/xeq.c     **** /* Locate the beginning and end of a section from a PC that points anywhere within
 386:src/xeq.c     ****  */
 387:src/xeq.c     **** static unsigned short int find_section_bounds(const unsigned int pc, const int endp, unsigned short
  30              		.loc 1 387 119 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 388:src/xeq.c     **** 	unsigned short int top, bottom;
  35              		.loc 1 388 2 view .LVU1
 389:src/xeq.c     **** 
 390:src/xeq.c     **** 	if (endp && State2.runmode) { 
  36              		.loc 1 390 2 view .LVU2
  37              		.loc 1 390 5 is_stmt 0 view .LVU3
  38 0000 71B1     		cbz	r1, .L2
  39              		.loc 1 390 11 discriminator 1 view .LVU4
  40 0002 194B     		ldr	r3, .L14
  41 0004 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
  42 0006 5B06     		lsls	r3, r3, #25
  43 0008 0AD5     		bpl	.L2
 391:src/xeq.c     **** 		// Use the current program as bounds
 392:src/xeq.c     **** 		top = ProgBegin;
  44              		.loc 1 392 3 is_stmt 1 view .LVU5
  45              		.loc 1 392 9 is_stmt 0 view .LVU6
  46 000a 184B     		ldr	r3, .L14+4
  47 000c 1968     		ldr	r1, [r3]
  48              	.LVL1:
 393:src/xeq.c     **** 		bottom = ProgEnd;
  49              		.loc 1 393 3 is_stmt 1 view .LVU7
  50 000e B1F8EC37 		ldrh	r3, [r1, #2028]
  51              		.loc 1 393 10 is_stmt 0 view .LVU8
  52 0012 B1F8EE07 		ldrh	r0, [r1, #2030]
  53              	.LVL2:
 394:src/xeq.c     **** 		if (top == 0)
  54              		.loc 1 394 3 is_stmt 1 view .LVU9
  55 0016 012B     		cmp	r3, #1
  56 0018 38BF     		it	cc
  57 001a 0123     		movcc	r3, #1
  58              	.LVL3:
 395:src/xeq.c     **** 			top = 1;
 396:src/xeq.c     **** 	}
 397:src/xeq.c     **** 	else if (isXROM(pc)) {
 398:src/xeq.c     **** 		top = addrXROM(1);
 399:src/xeq.c     **** 		bottom = addrXROM(xrom_size);
ARM GAS  /tmp/ccqED0AM.s 			page 9


 400:src/xeq.c     **** 	} 
 401:src/xeq.c     **** 	else if (isLIB(pc)) {
 402:src/xeq.c     **** 		top = startLIB(pc);
 403:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
 404:src/xeq.c     **** 	}
 405:src/xeq.c     **** 	else {
 406:src/xeq.c     **** 		top = State2.runmode;  // step 001 if not entering a program
 407:src/xeq.c     **** 		bottom = ProgSize;
 408:src/xeq.c     **** 	}
 409:src/xeq.c     **** 	*p_top = top;
  59              		.loc 1 409 2 view .LVU10
  60              		.loc 1 409 9 is_stmt 0 view .LVU11
  61 001c 1380     		strh	r3, [r2]	@ movhi
 410:src/xeq.c     **** 	return bottom;
  62              		.loc 1 410 2 is_stmt 1 view .LVU12
 411:src/xeq.c     **** }
  63              		.loc 1 411 1 is_stmt 0 view .LVU13
  64 001e 7047     		bx	lr
  65              	.LVL4:
  66              	.L2:
 397:src/xeq.c     **** 		top = addrXROM(1);
  67              		.loc 1 397 7 is_stmt 1 view .LVU14
 397:src/xeq.c     **** 		top = addrXROM(1);
  68              		.loc 1 397 11 is_stmt 0 view .LVU15
  69 0020 830B     		lsrs	r3, r0, #14
 397:src/xeq.c     **** 		top = addrXROM(1);
  70              		.loc 1 397 10 view .LVU16
  71 0022 032B     		cmp	r3, #3
  72 0024 0FD0     		beq	.L13
 401:src/xeq.c     **** 		top = startLIB(pc);
  73              		.loc 1 401 7 is_stmt 1 view .LVU17
 401:src/xeq.c     **** 		top = startLIB(pc);
  74              		.loc 1 401 10 is_stmt 0 view .LVU18
  75 0026 10F4404F 		tst	r0, #49152
  76 002a 14D0     		beq	.L5
 402:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
  77              		.loc 1 402 3 is_stmt 1 view .LVU19
  78              	.LBB1319:
  79              	.LBB1320:
 323:src/xeq.c     **** }
  80              		.loc 1 323 24 is_stmt 0 view .LVU20
  81 002c 1049     		ldr	r1, .L14+8
  82              	.LVL5:
 323:src/xeq.c     **** }
  83              		.loc 1 323 32 view .LVU21
  84 002e 51F82330 		ldr	r3, [r1, r3, lsl #2]
  85              	.LBE1320:
  86              	.LBE1319:
 403:src/xeq.c     **** 	}
  87              		.loc 1 403 10 view .LVU22
  88 0032 33F8021C 		ldrh	r1, [r3, #-2]
 402:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
  89              		.loc 1 402 9 view .LVU23
  90 0036 00F44043 		and	r3, r0, #49152
 403:src/xeq.c     **** 	}
  91              		.loc 1 403 10 view .LVU24
  92 003a 5818     		adds	r0, r3, r1
ARM GAS  /tmp/ccqED0AM.s 			page 10


  93              	.LVL6:
 402:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
  94              		.loc 1 402 7 view .LVU25
  95 003c 0133     		adds	r3, r3, #1
  96 003e 9BB2     		uxth	r3, r3
  97              	.LVL7:
 403:src/xeq.c     **** 	}
  98              		.loc 1 403 3 is_stmt 1 view .LVU26
  99              	.LBB1322:
 100              	.LBI1319:
 319:src/xeq.c     **** 	if (region == REGION_XROM)
 101              		.loc 1 319 5 view .LVU27
 102              	.LBB1321:
 320:src/xeq.c     **** 		return xrom_size;
 103              		.loc 1 320 2 view .LVU28
 323:src/xeq.c     **** }
 104              		.loc 1 323 3 view .LVU29
 323:src/xeq.c     **** }
 105              		.loc 1 323 3 is_stmt 0 view .LVU30
 106              	.LBE1321:
 107              	.LBE1322:
 403:src/xeq.c     **** 	}
 108              		.loc 1 403 10 view .LVU31
 109 0040 80B2     		uxth	r0, r0
 110              	.LVL8:
 409:src/xeq.c     **** 	return bottom;
 111              		.loc 1 409 2 is_stmt 1 view .LVU32
 409:src/xeq.c     **** 	return bottom;
 112              		.loc 1 409 9 is_stmt 0 view .LVU33
 113 0042 1380     		strh	r3, [r2]	@ movhi
 410:src/xeq.c     **** }
 114              		.loc 1 410 2 is_stmt 1 view .LVU34
 115              		.loc 1 411 1 is_stmt 0 view .LVU35
 116 0044 7047     		bx	lr
 117              	.LVL9:
 118              	.L13:
 398:src/xeq.c     **** 		bottom = addrXROM(xrom_size);
 119              		.loc 1 398 3 is_stmt 1 view .LVU36
 399:src/xeq.c     **** 	} 
 120              		.loc 1 399 3 view .LVU37
 399:src/xeq.c     **** 	} 
 121              		.loc 1 399 10 is_stmt 0 view .LVU38
 122 0046 0B4B     		ldr	r3, .L14+12
 123 0048 1888     		ldrh	r0, [r3]
 124              	.LVL10:
 398:src/xeq.c     **** 		bottom = addrXROM(xrom_size);
 125              		.loc 1 398 7 view .LVU39
 126 004a 4CF20103 		movw	r3, #49153
 399:src/xeq.c     **** 	} 
 127              		.loc 1 399 10 view .LVU40
 128 004e 40F44040 		orr	r0, r0, #49152
 129              	.LVL11:
 409:src/xeq.c     **** 	return bottom;
 130              		.loc 1 409 2 is_stmt 1 view .LVU41
 409:src/xeq.c     **** 	return bottom;
 131              		.loc 1 409 9 is_stmt 0 view .LVU42
 132 0052 1380     		strh	r3, [r2]	@ movhi
ARM GAS  /tmp/ccqED0AM.s 			page 11


 410:src/xeq.c     **** }
 133              		.loc 1 410 2 is_stmt 1 view .LVU43
 134              		.loc 1 411 1 is_stmt 0 view .LVU44
 135 0054 7047     		bx	lr
 136              	.LVL12:
 137              	.L5:
 406:src/xeq.c     **** 		bottom = ProgSize;
 138              		.loc 1 406 3 is_stmt 1 view .LVU45
 406:src/xeq.c     **** 		bottom = ProgSize;
 139              		.loc 1 406 15 is_stmt 0 view .LVU46
 140 0056 044B     		ldr	r3, .L14
 407:src/xeq.c     **** 	}
 141              		.loc 1 407 10 view .LVU47
 142 0058 0449     		ldr	r1, .L14+4
 143              	.LVL13:
 406:src/xeq.c     **** 		bottom = ProgSize;
 144              		.loc 1 406 15 view .LVU48
 145 005a 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 407:src/xeq.c     **** 	}
 146              		.loc 1 407 10 view .LVU49
 147 005c 0968     		ldr	r1, [r1]
 406:src/xeq.c     **** 		bottom = ProgSize;
 148              		.loc 1 406 7 view .LVU50
 149 005e C3F38013 		ubfx	r3, r3, #6, #1
 150              	.LVL14:
 407:src/xeq.c     **** 	}
 151              		.loc 1 407 3 is_stmt 1 view .LVU51
 407:src/xeq.c     **** 	}
 152              		.loc 1 407 10 is_stmt 0 view .LVU52
 153 0062 4888     		ldrh	r0, [r1, #2]
 154              	.LVL15:
 409:src/xeq.c     **** 	return bottom;
 155              		.loc 1 409 2 is_stmt 1 view .LVU53
 409:src/xeq.c     **** 	return bottom;
 156              		.loc 1 409 9 is_stmt 0 view .LVU54
 157 0064 1380     		strh	r3, [r2]	@ movhi
 410:src/xeq.c     **** }
 158              		.loc 1 410 2 is_stmt 1 view .LVU55
 159              		.loc 1 411 1 is_stmt 0 view .LVU56
 160 0066 7047     		bx	lr
 161              	.L15:
 162              		.align	2
 163              	.L14:
 164 0068 00000000 		.word	StateWhileOn
 165 006c 00000000 		.word	main_ram
 166 0070 00000000 		.word	.LANCHOR0
 167 0074 00000000 		.word	xrom_size
 168              		.cfi_endproc
 169              	.LFE19:
 171              		.section	.text.reg_address,"ax",%progbits
 172              		.align	1
 173              		.p2align 2,,3
 174              		.syntax unified
 175              		.thumb
 176              		.thumb_func
 177              		.fpu fpv4-sp-d16
 179              	reg_address:
ARM GAS  /tmp/ccqED0AM.s 			page 12


 180              	.LVL16:
 181              	.LFB90:
 412:src/xeq.c     **** 
 413:src/xeq.c     **** 
 414:src/xeq.c     **** /* Increment the passed PC.  Account for wrap around but nothing else.
 415:src/xeq.c     ****  * Return the updated PC.
 416:src/xeq.c     ****  * Set PcWrapped on wrap around
 417:src/xeq.c     ****  */
 418:src/xeq.c     **** unsigned int do_inc(const unsigned int pc, int endp) {
 419:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 420:src/xeq.c     **** 	unsigned short int top = 0;
 421:src/xeq.c     **** 	unsigned short int bottom = 0;
 422:src/xeq.c     **** 
 423:src/xeq.c     **** 	PcWrapped = 0;
 424:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 425:src/xeq.c     **** 
 426:src/xeq.c     **** 	if (npc > bottom) {
 427:src/xeq.c     **** 		PcWrapped = 1;
 428:src/xeq.c     **** 		return top;
 429:src/xeq.c     **** 	}
 430:src/xeq.c     **** 	return npc;
 431:src/xeq.c     **** }
 432:src/xeq.c     **** 
 433:src/xeq.c     **** /* Decrement the passed PC.  Account for wrap around but nothing else.
 434:src/xeq.c     ****  * Return the updated PC.
 435:src/xeq.c     ****  * Set PcWrapped on wrap around
 436:src/xeq.c     ****  */
 437:src/xeq.c     **** unsigned int do_dec(unsigned int pc, int endp) {
 438:src/xeq.c     **** 	unsigned short int top = 0;
 439:src/xeq.c     **** 	unsigned short int bottom = 0;
 440:src/xeq.c     **** 
 441:src/xeq.c     **** 	PcWrapped = 0;
 442:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 443:src/xeq.c     **** 
 444:src/xeq.c     **** 	if (pc <= top) {
 445:src/xeq.c     **** 		PcWrapped = 1;
 446:src/xeq.c     **** 		pc = bottom;
 447:src/xeq.c     **** 	}
 448:src/xeq.c     **** 	else
 449:src/xeq.c     **** 		--pc;
 450:src/xeq.c     **** 	if (pc > top && isDBL(getprog(pc - 1)))
 451:src/xeq.c     **** 		--pc;
 452:src/xeq.c     **** 	return pc;
 453:src/xeq.c     **** }
 454:src/xeq.c     **** 
 455:src/xeq.c     **** /* Increment the PC keeping account of wrapping around and stopping
 456:src/xeq.c     ****  * programs on such.  Return non-zero if we wrapped.
 457:src/xeq.c     ****  */
 458:src/xeq.c     **** int incpc(void) {
 459:src/xeq.c     **** 	raw_set_pc(do_inc(state_pc(), 1));
 460:src/xeq.c     **** 	return PcWrapped;
 461:src/xeq.c     **** }
 462:src/xeq.c     **** 
 463:src/xeq.c     **** void decpc(void) {
 464:src/xeq.c     **** 	raw_set_pc(do_dec(state_pc(), 1));
 465:src/xeq.c     **** }
 466:src/xeq.c     **** 
ARM GAS  /tmp/ccqED0AM.s 			page 13


 467:src/xeq.c     **** /*
 468:src/xeq.c     ****  * Update the pointers to the current program delimited by END statements
 469:src/xeq.c     ****  */
 470:src/xeq.c     **** void update_program_bounds(const int force) {
 471:src/xeq.c     **** 	unsigned int pc = state_pc();
 472:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 473:src/xeq.c     **** 		State.pc = pc = 1;
 474:src/xeq.c     **** 	if (! force && pc >= ProgBegin && pc <= ProgEnd)
 475:src/xeq.c     **** 		return;
 476:src/xeq.c     **** 	for (PcWrapped = 0; !PcWrapped; pc = do_inc(pc, 0)) {
 477:src/xeq.c     **** 		ProgEnd = pc;
 478:src/xeq.c     **** 		if (getprog(pc) == (OP_NIL | OP_END)) {
 479:src/xeq.c     **** 			break;
 480:src/xeq.c     **** 		}
 481:src/xeq.c     **** 	}
 482:src/xeq.c     **** 	for (pc = state_pc();;) {
 483:src/xeq.c     **** 		const unsigned int opc = pc;
 484:src/xeq.c     **** 		pc = do_dec(opc, 0);
 485:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 486:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 487:src/xeq.c     **** 			break;
 488:src/xeq.c     **** 		}
 489:src/xeq.c     **** 	}
 490:src/xeq.c     **** }
 491:src/xeq.c     **** 
 492:src/xeq.c     **** /* Determine where in program space the PC really is
 493:src/xeq.c     ****  */
 494:src/xeq.c     **** unsigned int user_pc(unsigned int pc) {
 495:src/xeq.c     **** 	unsigned int n = 1;
 496:src/xeq.c     **** 	unsigned int base;
 497:src/xeq.c     **** 
 498:src/xeq.c     **** #ifndef REALBUILD
 499:src/xeq.c     **** 	if (pc == 0 || isXROM(pc))
 500:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 501:src/xeq.c     **** #else
 502:src/xeq.c     **** 	if (pc == 0)
 503:src/xeq.c     **** 		return 0;
 504:src/xeq.c     **** #endif
 505:src/xeq.c     **** 	base = startLIB(pc);
 506:src/xeq.c     **** 	while (base < pc) {
 507:src/xeq.c     **** 		base = do_inc(base, 0);
 508:src/xeq.c     **** 		if (PcWrapped)
 509:src/xeq.c     **** 			return n;
 510:src/xeq.c     **** 		++n;
 511:src/xeq.c     **** 	}
 512:src/xeq.c     **** 	return n;
 513:src/xeq.c     **** }
 514:src/xeq.c     **** 
 515:src/xeq.c     **** /* Given a target user PC, figure out the real matching PC
 516:src/xeq.c     ****  */
 517:src/xeq.c     **** unsigned int find_user_pc(unsigned int target) {
 518:src/xeq.c     **** 	unsigned int upc = state_pc();
 519:src/xeq.c     **** 	const int libp = isLIB(upc);
 520:src/xeq.c     **** 	unsigned int base = libp ? startLIB(upc) : 0;
 521:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 522:src/xeq.c     **** #ifndef REALBUILD
 523:src/xeq.c     **** 	if (isXROM(upc))
ARM GAS  /tmp/ccqED0AM.s 			page 14


 524:src/xeq.c     **** 		return addrXROM(target);
 525:src/xeq.c     **** #endif
 526:src/xeq.c     **** 	while (n++ < target) {
 527:src/xeq.c     **** 		const unsigned int oldbase = base;
 528:src/xeq.c     **** 		base = do_inc(oldbase, 0);
 529:src/xeq.c     **** 		if (PcWrapped)
 530:src/xeq.c     **** 			return oldbase;
 531:src/xeq.c     **** 	}
 532:src/xeq.c     **** 	return base;
 533:src/xeq.c     **** }
 534:src/xeq.c     **** 
 535:src/xeq.c     **** 
 536:src/xeq.c     **** /* Set a flag to indicate that a complex operation has taken place
 537:src/xeq.c     ****  * The flag disappears with the next command executed.
 538:src/xeq.c     ****  */
 539:src/xeq.c     **** static void set_was_complex(void) {
 540:src/xeq.c     **** 	State2.wascomplex = 1;
 541:src/xeq.c     **** }
 542:src/xeq.c     **** 
 543:src/xeq.c     **** 
 544:src/xeq.c     **** /* Produce an error and stop
 545:src/xeq.c     ****  */
 546:src/xeq.c     **** int report_err(const unsigned int e) {
 547:src/xeq.c     **** 	if (Error == ERR_NONE) {
 548:src/xeq.c     **** 		Error = e;
 549:src/xeq.c     **** 		if (e == ERR_NONE) {
 550:src/xeq.c     **** 			error_message(e); // "Running Program"
 551:src/xeq.c     **** 			return 0;
 552:src/xeq.c     **** 		}
 553:src/xeq.c     **** 	}
 554:src/xeq.c     **** 	return 1;
 555:src/xeq.c     **** }
 556:src/xeq.c     **** 
 557:src/xeq.c     **** 
 558:src/xeq.c     **** /* Display a warning
 559:src/xeq.c     ****  */
 560:src/xeq.c     **** int report_warn(const unsigned int e) {
 561:src/xeq.c     **** 	if (Running) {
 562:src/xeq.c     **** 		return report_err(e);
 563:src/xeq.c     **** 	}
 564:src/xeq.c     **** 	error_message(e);
 565:src/xeq.c     **** #ifndef CONSOLE
 566:src/xeq.c     **** 	State2.disp_freeze = 0;
 567:src/xeq.c     **** 	JustDisplayed = 1;
 568:src/xeq.c     **** 	ShowRPN = 1;
 569:src/xeq.c     **** #endif
 570:src/xeq.c     **** 	return e != ERR_NONE;
 571:src/xeq.c     **** }
 572:src/xeq.c     **** 
 573:src/xeq.c     **** 
 574:src/xeq.c     **** /* Doing something in the wrong mode */
 575:src/xeq.c     **** void bad_mode_error(void) {
 576:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 577:src/xeq.c     **** }
 578:src/xeq.c     **** 
 579:src/xeq.c     **** 
 580:src/xeq.c     **** /* User command to produce an error */
ARM GAS  /tmp/ccqED0AM.s 			page 15


 581:src/xeq.c     **** void cmderr(unsigned int arg, enum rarg op) {
 582:src/xeq.c     **** 	report_err(arg);
 583:src/xeq.c     **** }
 584:src/xeq.c     **** 
 585:src/xeq.c     **** 
 586:src/xeq.c     **** /* User command to display a warning */
 587:src/xeq.c     **** void cmdmsg(unsigned int arg, enum rarg op) {
 588:src/xeq.c     **** 	error_message(arg);
 589:src/xeq.c     **** }
 590:src/xeq.c     **** 
 591:src/xeq.c     **** 
 592:src/xeq.c     **** #if defined(DEBUG) && defined(CONSOLE)
 593:src/xeq.c     **** #include <stdlib.h>
 594:src/xeq.c     **** static void error(const char *fmt, ...) {
 595:src/xeq.c     **** 	va_list ap;
 596:src/xeq.c     **** 	va_start(ap, fmt);
 597:src/xeq.c     **** 	vprintf(fmt, ap);
 598:src/xeq.c     **** 	va_end(ap);
 599:src/xeq.c     **** 	putchar('\n');
 600:src/xeq.c     **** 	exit(1);
 601:src/xeq.c     **** }
 602:src/xeq.c     **** 
 603:src/xeq.c     **** #define illegal(op)	do { report_err(ERR_PROG_BAD); printf("illegal opcode 0x%08x\n", op); } while (
 604:src/xeq.c     **** #else
 605:src/xeq.c     **** #define illegal(op)	do { report_err(ERR_PROG_BAD); } while (0)
 606:src/xeq.c     **** #endif
 607:src/xeq.c     **** 
 608:src/xeq.c     **** /* Real rounding mode access routine
 609:src/xeq.c     ****  */
 610:src/xeq.c     **** static enum rounding get_rounding_mode() {
 611:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 612:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 613:src/xeq.c     **** 		DEC_ROUND_UP, DEC_ROUND_DOWN,
 614:src/xeq.c     **** 		DEC_ROUND_CEILING, DEC_ROUND_FLOOR
 615:src/xeq.c     **** 	};
 616:src/xeq.c     **** 	return (enum rounding) modes[UState.rounding_mode];
 617:src/xeq.c     **** }
 618:src/xeq.c     **** 
 619:src/xeq.c     **** void op_roundingmode(enum nilop op) {
 620:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 621:src/xeq.c     **** }
 622:src/xeq.c     **** 
 623:src/xeq.c     **** void rarg_roundingmode(unsigned int arg, enum rarg op) {
 624:src/xeq.c     **** 	UState.rounding_mode = arg;
 625:src/xeq.c     **** }
 626:src/xeq.c     **** 
 627:src/xeq.c     **** 
 628:src/xeq.c     **** /* Pack a number into our DPD register format
 629:src/xeq.c     ****  */
 630:src/xeq.c     **** 
 631:src/xeq.c     **** void packed_from_number(decimal64 *r, const decNumber *x) {
 632:src/xeq.c     **** 	decContext ctx64;
 633:src/xeq.c     **** 
 634:src/xeq.c     **** 	decContextDefault(&ctx64, DEC_INIT_DECIMAL64);
 635:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 636:src/xeq.c     **** 	decimal64FromNumber(r, x, &ctx64);
 637:src/xeq.c     **** }
ARM GAS  /tmp/ccqED0AM.s 			page 16


 638:src/xeq.c     **** 
 639:src/xeq.c     **** void packed128_from_number(decimal128 *r, const decNumber *x) {
 640:src/xeq.c     **** 	decContext ctx128;
 641:src/xeq.c     **** 
 642:src/xeq.c     **** 	decContextDefault(&ctx128, DEC_INIT_DECIMAL128);
 643:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 644:src/xeq.c     **** 	decimal128FromNumber(r, x, &ctx128);
 645:src/xeq.c     **** }
 646:src/xeq.c     **** 
 647:src/xeq.c     **** // Repack a decimal128 to decimal64
 648:src/xeq.c     **** void packed_from_packed128(decimal64 *r, const decimal128 *s) {
 649:src/xeq.c     **** 	decNumber temp;
 650:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 651:src/xeq.c     **** }
 652:src/xeq.c     **** 
 653:src/xeq.c     **** // Repack a decimal64 to decimal128
 654:src/xeq.c     **** void packed128_from_packed(decimal128 *r, const decimal64 *s) {
 655:src/xeq.c     **** 	decNumber temp;
 656:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 657:src/xeq.c     **** }
 658:src/xeq.c     **** 
 659:src/xeq.c     **** /*
 660:src/xeq.c     ****  *  User command to round to a specific number of digits
 661:src/xeq.c     ****  */
 662:src/xeq.c     **** void rarg_round(unsigned int arg, enum rarg op) {
 663:src/xeq.c     **** 	decNumber res, x;
 664:src/xeq.c     **** 	const enum rounding rm = get_rounding_mode();
 665:src/xeq.c     **** 
 666:src/xeq.c     **** 	if (is_intmode()) {
 667:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 668:src/xeq.c     **** 		return;
 669:src/xeq.c     **** 	}
 670:src/xeq.c     **** 
 671:src/xeq.c     **** 	setlastX();
 672:src/xeq.c     **** 	getX(&x);
 673:src/xeq.c     **** 	if (op == RARG_ROUND)
 674:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 675:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 676:src/xeq.c     **** 		decNumberRoundDecimals(&res, &x, arg, rm);
 677:src/xeq.c     **** 	setX(&res);
 678:src/xeq.c     **** }
 679:src/xeq.c     **** 
 680:src/xeq.c     **** /* Check if a value is bogus and error out if so.
 681:src/xeq.c     ****  * A value is bogus if it is infinite, NaN *and* flag D is not set.
 682:src/xeq.c     ****  * If flag D is set, these values are allowed through just fine.
 683:src/xeq.c     ****  */
 684:src/xeq.c     **** static int check_special(const decNumber *x) {
 685:src/xeq.c     **** 	decNumber y;
 686:src/xeq.c     **** 	decimal64 z;
 687:src/xeq.c     **** 	decimal128 d;
 688:src/xeq.c     **** 	if (is_dblmode()) {
 689:src/xeq.c     **** 		packed128_from_number(&d, x);
 690:src/xeq.c     **** 		decimal128ToNumber(&d, &y);
 691:src/xeq.c     **** 	}
 692:src/xeq.c     **** 	else 
 693:src/xeq.c     **** 	{
 694:src/xeq.c     **** 		packed_from_number(&z, x);
ARM GAS  /tmp/ccqED0AM.s 			page 17


 695:src/xeq.c     **** 		decimal64ToNumber(&z, &y);
 696:src/xeq.c     **** 	}
 697:src/xeq.c     **** 	if (decNumberIsSpecial(&y)) {
 698:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 699:src/xeq.c     **** 			if (decNumberIsNaN(&y))
 700:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 701:src/xeq.c     **** 			else if (decNumberIsNegative(&y))
 702:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 703:src/xeq.c     **** 			else
 704:src/xeq.c     **** 				report_err(ERR_INFINITY);
 705:src/xeq.c     **** 			return 1;
 706:src/xeq.c     **** 		}
 707:src/xeq.c     **** 	}
 708:src/xeq.c     **** 	return 0;
 709:src/xeq.c     **** }
 710:src/xeq.c     **** 
 711:src/xeq.c     **** 
 712:src/xeq.c     **** int stack_size(void) {
 713:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 714:src/xeq.c     **** 		return 4;
 715:src/xeq.c     **** 	return 8;
 716:src/xeq.c     **** }
 717:src/xeq.c     **** 
 718:src/xeq.c     **** REGISTER *get_stack(int pos) {
 719:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 720:src/xeq.c     **** }
 721:src/xeq.c     **** 
 722:src/xeq.c     **** static REGISTER *get_stack_top(void) {
 723:src/xeq.c     **** 	return get_stack(stack_size()-1);
 724:src/xeq.c     **** }
 725:src/xeq.c     **** 
 726:src/xeq.c     **** void copyreg(REGISTER *d, const REGISTER *s) {
 727:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 728:src/xeq.c     **** }
 729:src/xeq.c     **** 
 730:src/xeq.c     **** void copyreg_n(int d, int s) {
 731:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 732:src/xeq.c     **** }
 733:src/xeq.c     **** 
 734:src/xeq.c     **** /* Lift the stack one level.
 735:src/xeq.c     ****  */
 736:src/xeq.c     **** void lift(void) {
 737:src/xeq.c     **** 	const int n = stack_size();
 738:src/xeq.c     **** 	int i;
 739:src/xeq.c     **** 	for (i=n-1; i>0; i--)
 740:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 741:src/xeq.c     **** }
 742:src/xeq.c     **** 
 743:src/xeq.c     **** static int get_lift(void) {
 744:src/xeq.c     **** 	return State2.state_lift;
 745:src/xeq.c     **** }
 746:src/xeq.c     **** 
 747:src/xeq.c     **** void lift_if_enabled(void) {
 748:src/xeq.c     **** 	if (get_lift())
 749:src/xeq.c     **** 		lift();
 750:src/xeq.c     **** }
 751:src/xeq.c     **** 
ARM GAS  /tmp/ccqED0AM.s 			page 18


 752:src/xeq.c     **** static void lift2_if_enabled(void) {
 753:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 754:src/xeq.c     **** 	lift_if_enabled();
 755:src/xeq.c     **** 	if (C_LOCKED) {
 756:src/xeq.c     **** 		lift_if_enabled();
 757:src/xeq.c     **** 	}
 758:src/xeq.c     **** 	else {
 759:src/xeq.c     **** 		lift();
 760:src/xeq.c     **** 	}
 761:src/xeq.c     **** #else
 762:src/xeq.c     **** 	lift_if_enabled();
 763:src/xeq.c     **** 	lift();
 764:src/xeq.c     **** #endif
 765:src/xeq.c     **** }
 766:src/xeq.c     **** 
 767:src/xeq.c     **** void set_lift(void) {
 768:src/xeq.c     ****     State2.state_lift = 1;
 769:src/xeq.c     **** }
 770:src/xeq.c     **** 
 771:src/xeq.c     **** static void clr_lift(void) {
 772:src/xeq.c     ****     State2.state_lift = 0;
 773:src/xeq.c     **** }
 774:src/xeq.c     **** 
 775:src/xeq.c     **** static void lower(void) {
 776:src/xeq.c     **** 	const int n = stack_size();
 777:src/xeq.c     **** 	int i;
 778:src/xeq.c     **** 
 779:src/xeq.c     **** 	for (i=1; i<n; i++)
 780:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 781:src/xeq.c     **** }
 782:src/xeq.c     **** 
 783:src/xeq.c     **** static void lower2(void) {
 784:src/xeq.c     **** 	const int n = stack_size();
 785:src/xeq.c     **** 	int i;
 786:src/xeq.c     **** 
 787:src/xeq.c     **** 	for (i=2; i<n; i++)
 788:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 789:src/xeq.c     **** }
 790:src/xeq.c     **** 
 791:src/xeq.c     **** 
 792:src/xeq.c     **** void setlastX(void) {
 793:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 794:src/xeq.c     **** }
 795:src/xeq.c     **** 
 796:src/xeq.c     **** static void setlastXY(void) {
 797:src/xeq.c     **** 	setlastX();
 798:src/xeq.c     **** 	copyreg_n(regI_idx, regY_idx);
 799:src/xeq.c     **** }
 800:src/xeq.c     **** 
 801:src/xeq.c     **** 
 802:src/xeq.c     **** decNumber *getRegister(decNumber *r, int index) {
 803:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 804:src/xeq.c     **** 	if (is_dblmode())
 805:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 806:src/xeq.c     **** 	else
 807:src/xeq.c     **** 		decimal64ToNumber(&(reg->s), r);
 808:src/xeq.c     **** 	return r;
ARM GAS  /tmp/ccqED0AM.s 			page 19


 809:src/xeq.c     **** }
 810:src/xeq.c     **** 
 811:src/xeq.c     **** void setRegister(int index, const decNumber *x) {
 812:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 813:src/xeq.c     **** 	decNumber dn;
 814:src/xeq.c     **** 
 815:src/xeq.c     **** 	if (! check_special(x)) {	/* This correctly deals with infinities and NaN based on flag D */
 816:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 817:src/xeq.c     **** 		if (is_dblmode())
 818:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 819:src/xeq.c     **** 		else
 820:src/xeq.c     **** 			packed_from_number(&(reg->s), &dn);
 821:src/xeq.c     **** 	}
 822:src/xeq.c     **** }
 823:src/xeq.c     **** 
 824:src/xeq.c     **** decNumber *getX(decNumber *x) {
 825:src/xeq.c     **** 	return getRegister(x, regX_idx);
 826:src/xeq.c     **** }
 827:src/xeq.c     **** 
 828:src/xeq.c     **** void setX(const decNumber *x) {
 829:src/xeq.c     **** 	setRegister(regX_idx, x);
 830:src/xeq.c     **** }
 831:src/xeq.c     **** 
 832:src/xeq.c     **** void getY(decNumber *y) {
 833:src/xeq.c     **** 	getRegister(y, regY_idx);
 834:src/xeq.c     **** }
 835:src/xeq.c     **** 
 836:src/xeq.c     **** void setY(const decNumber *y) {
 837:src/xeq.c     **** 	setRegister(regY_idx, y);
 838:src/xeq.c     **** }
 839:src/xeq.c     **** 
 840:src/xeq.c     **** static void getZ(decNumber *z) {
 841:src/xeq.c     **** 	getRegister(z, regZ_idx);
 842:src/xeq.c     **** }
 843:src/xeq.c     **** 
 844:src/xeq.c     **** #if 0
 845:src/xeq.c     **** static void setZ(const decNumber *z) {
 846:src/xeq.c     **** 	setRegister(regZ_idx, z);
 847:src/xeq.c     **** }
 848:src/xeq.c     **** #endif
 849:src/xeq.c     **** 
 850:src/xeq.c     **** static void getT(decNumber *t) {
 851:src/xeq.c     **** 	getRegister(t, regT_idx);
 852:src/xeq.c     **** }
 853:src/xeq.c     **** 
 854:src/xeq.c     **** void getXY(decNumber *x, decNumber *y) {
 855:src/xeq.c     **** 	getX(x);
 856:src/xeq.c     **** 	getY(y);
 857:src/xeq.c     **** }
 858:src/xeq.c     **** 
 859:src/xeq.c     **** void setXY(const decNumber *x, const decNumber *y) {
 860:src/xeq.c     **** 	setX(x);
 861:src/xeq.c     **** 	setY(y);
 862:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 863:src/xeq.c     **** 	CLEAR_POLAR_READY;
 864:src/xeq.c     **** #endif
 865:src/xeq.c     **** }
ARM GAS  /tmp/ccqED0AM.s 			page 20


 866:src/xeq.c     **** 
 867:src/xeq.c     **** void getXYZ(decNumber *x, decNumber *y, decNumber *z) {
 868:src/xeq.c     **** 	getXY(x, y);
 869:src/xeq.c     **** 	getZ(z);
 870:src/xeq.c     **** }
 871:src/xeq.c     **** 
 872:src/xeq.c     **** #if 0
 873:src/xeq.c     **** void setXYZ(const decNumber *x, const decNumber *y, const decNumber *z) {
 874:src/xeq.c     **** 	setXY(x, y);
 875:src/xeq.c     **** 	setZ(z);
 876:src/xeq.c     **** }
 877:src/xeq.c     **** #endif
 878:src/xeq.c     **** 
 879:src/xeq.c     **** void getXYZT(decNumber *x, decNumber *y, decNumber *z, decNumber *t) {
 880:src/xeq.c     **** 	getXYZ(x, y, z);
 881:src/xeq.c     **** 	getT(t);
 882:src/xeq.c     **** }
 883:src/xeq.c     **** 
 884:src/xeq.c     **** void getYZ(decNumber *y, decNumber *z) {
 885:src/xeq.c     **** 	getY(y);
 886:src/xeq.c     **** 	getZ(z);
 887:src/xeq.c     **** }
 888:src/xeq.c     **** 
 889:src/xeq.c     **** void roll_down(enum nilop op) {
 890:src/xeq.c     **** 	REGISTER r;
 891:src/xeq.c     **** 	copyreg(&r, StackBase);
 892:src/xeq.c     **** 	lower();
 893:src/xeq.c     **** 	copyreg(get_stack_top(), &r);
 894:src/xeq.c     **** }
 895:src/xeq.c     **** 
 896:src/xeq.c     **** void roll_up(enum nilop op) {
 897:src/xeq.c     **** 	REGISTER r;
 898:src/xeq.c     **** 	copyreg(&r, get_stack_top());
 899:src/xeq.c     **** 	lift();
 900:src/xeq.c     **** 	copyreg(StackBase, &r);
 901:src/xeq.c     **** }
 902:src/xeq.c     **** 
 903:src/xeq.c     **** void cpx_roll_down(enum nilop op) {
 904:src/xeq.c     **** 	roll_down(OP_RDOWN);
 905:src/xeq.c     **** 	roll_down(OP_RDOWN);
 906:src/xeq.c     **** 	set_was_complex();
 907:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 908:src/xeq.c     **** 	CLEAR_POLAR_READY;
 909:src/xeq.c     **** #endif
 910:src/xeq.c     **** }
 911:src/xeq.c     **** 
 912:src/xeq.c     **** void cpx_roll_up(enum nilop op) {
 913:src/xeq.c     **** 	roll_up(OP_RUP);
 914:src/xeq.c     **** 	roll_up(OP_RUP);
 915:src/xeq.c     **** 	set_was_complex();
 916:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 917:src/xeq.c     **** 	CLEAR_POLAR_READY;
 918:src/xeq.c     **** #endif
 919:src/xeq.c     **** }
 920:src/xeq.c     **** 
 921:src/xeq.c     **** void cpx_enter(enum nilop op) {
 922:src/xeq.c     ****   if( (State2.state_lift || (XromRunning || Running)) && ENTRY_RPN_ENABLED ) { // flag is zero if e
ARM GAS  /tmp/ccqED0AM.s 			page 21


 923:src/xeq.c     ****     //Only duplicate if needed, otherwise ignore. CPX LOCK mode cannot run code, but the same excep
 924:src/xeq.c     ****     lift();
 925:src/xeq.c     ****     lift();
 926:src/xeq.c     ****     copyreg(get_reg_n(regY_idx), get_reg_n(regT_idx));
 927:src/xeq.c     ****     set_was_complex();
 928:src/xeq.c     ****   }
 929:src/xeq.c     ****   else {
 930:src/xeq.c     ****     lift();
 931:src/xeq.c     ****     lift();
 932:src/xeq.c     ****     copyreg(get_reg_n(regY_idx), get_reg_n(regT_idx));
 933:src/xeq.c     ****     set_was_complex();
 934:src/xeq.c     ****   }
 935:src/xeq.c     **** }
 936:src/xeq.c     **** 
 937:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 938:src/xeq.c     **** 
 939:src/xeq.c     **** void convert_regK ( enum trig_modes i ) { // needed to change the displayed angular part in polar m
 940:src/xeq.c     **** 	decNumber k;
 941:src/xeq.c     **** 
 942:src/xeq.c     **** 	enum trig_modes j = get_trig_mode();
 943:src/xeq.c     **** 	if (i==j) return; // no mode change
 944:src/xeq.c     **** 	getRegister(&k, regK_idx);
 945:src/xeq.c     **** 	switch (j) { // convert angle to fraction of one complete turn
 946:src/xeq.c     **** 		case TRIG_DEG:
 947:src/xeq.c     **** 			dn_divide(&k, &k, &const_360);
 948:src/xeq.c     **** 			break;
 949:src/xeq.c     **** 		case TRIG_RAD:
 950:src/xeq.c     **** 			dn_divide(&k, &k, &const_2PI);
 951:src/xeq.c     **** 			break;
 952:src/xeq.c     **** 		case TRIG_GRAD:
 953:src/xeq.c     **** 			dn_divide(&k, &k, &const_400);
 954:src/xeq.c     **** 		default:;
 955:src/xeq.c     **** 	}
 956:src/xeq.c     **** 	switch (i) { // convert to new angular units
 957:src/xeq.c     **** 		case TRIG_DEG:
 958:src/xeq.c     **** 			dn_multiply(&k, &k, &const_360);
 959:src/xeq.c     **** 			break;
 960:src/xeq.c     **** 		case TRIG_RAD:
 961:src/xeq.c     **** 			dn_multiply(&k, &k, &const_2PI);
 962:src/xeq.c     **** 			break;
 963:src/xeq.c     **** 		case TRIG_GRAD:
 964:src/xeq.c     **** 			dn_multiply(&k, &k, &const_400);
 965:src/xeq.c     **** 		default:;
 966:src/xeq.c     **** 	}
 967:src/xeq.c     **** 	setRegister(regK_idx, &k);
 968:src/xeq.c     **** }
 969:src/xeq.c     **** 
 970:src/xeq.c     **** void finish_cpx_entry ( int lift );
 971:src/xeq.c     **** void stack_begin ( int zero_y ); // defined in keys.c - needed so it can be called here
 972:src/xeq.c     **** 
 973:src/xeq.c     **** void cpx_pi (enum nilop op) {
 974:src/xeq.c     **** 	switch (op) {
 975:src/xeq.c     **** 	case OP_PIA: // no command line present - puts pi into x-register
 976:src/xeq.c     **** 		if (!REAL_FLAG && !IMAG_FLAG) {
 977:src/xeq.c     **** 			stack_begin( 1 );
 978:src/xeq.c     **** 			SET_REAL;
 979:src/xeq.c     **** 		}
ARM GAS  /tmp/ccqED0AM.s 			page 22


 980:src/xeq.c     **** 		copyreg(StackBase, get_const(OP_PI, is_dblmode()));
 981:src/xeq.c     **** 		break;
 982:src/xeq.c     **** 	case OP_PIB: // command line present - multiplies contents by pi
 983:src/xeq.c     **** 		State2.state_lift = 0;
 984:src/xeq.c     **** 		process_cmdline();
 985:src/xeq.c     **** 		State2.state_lift = 0;
 986:src/xeq.c     **** 		{
 987:src/xeq.c     **** 			decNumber r;
 988:src/xeq.c     **** 			getX(&r);
 989:src/xeq.c     **** 			dn_multiply (&r, &const_PI, &r);
 990:src/xeq.c     **** 			setX(&r);
 991:src/xeq.c     **** 		}
 992:src/xeq.c     **** 	default:;
 993:src/xeq.c     **** 	}
 994:src/xeq.c     **** 	CLEAR_POLAR_READY;
 995:src/xeq.c     **** }
 996:src/xeq.c     **** 
 997:src/xeq.c     **** #ifdef ENTRY_RPN
 998:src/xeq.c     **** void entry_rpn_on_off(enum nilop op) { // turn entry_rpn on/off
 999:src/xeq.c     ****   switch (op) {
1000:src/xeq.c     ****   case OP_ENTRY_ON:
1001:src/xeq.c     ****     ENTRY_RPN_ON;
1002:src/xeq.c     ****     return;
1003:src/xeq.c     ****   case OP_ENTRY_OFF:
1004:src/xeq.c     ****     ENTRY_RPN_OFF;
1005:src/xeq.c     ****     return;
1006:src/xeq.c     ****   default:;
1007:src/xeq.c     ****   }
1008:src/xeq.c     **** }
1009:src/xeq.c     **** #endif
1010:src/xeq.c     **** 
1011:src/xeq.c     **** void cpx_nop(enum nilop op) { // miscellaneous complex operations
1012:src/xeq.c     ****   reset_shift();
1013:src/xeq.c     **** 	switch (op) {
1014:src/xeq.c     **** 	case OP_CYES: // set flag to allow complex mode to be entered - can be called at any time
1015:src/xeq.c     **** 	        SET_CPX_YES;
1016:src/xeq.c     **** 		CLEAR_REAL; // tidy a few flags when mode enabled
1017:src/xeq.c     **** 		CLEAR_IMAG;
1018:src/xeq.c     **** 		SET_RECTANGULAR_DISPLAY; 
1019:src/xeq.c     **** 		return;
1020:src/xeq.c     **** 	case OP_C_ON: // start complex mode - only called if CPX_ENABLED and C_LOCK_OFF
1021:src/xeq.c     **** 		if (UState.stack_depth) { // save prior stack size 
1022:src/xeq.c     **** 			INIT_8;
1023:src/xeq.c     **** 		}
1024:src/xeq.c     **** 		else {
1025:src/xeq.c     **** 			INIT_4;
1026:src/xeq.c     **** 		}
1027:src/xeq.c     **** 		LOCK_C;
1028:src/xeq.c     **** 		UState.stack_depth = 1; // set stack size to 8
1029:src/xeq.c     **** #ifdef DM42
1030:src/xeq.c     **** 		set_menu(M_C_Lock);
1031:src/xeq.c     **** 		display_current_menu();
1032:src/xeq.c     **** #endif
1033:src/xeq.c     **** 		break;
1034:src/xeq.c     **** 	case OP_CNO: // reset flag so that complex mode cannot be entered
1035:src/xeq.c     **** 		if (!C_LOCKED) { 
1036:src/xeq.c     **** 			SET_CPX_NO;
ARM GAS  /tmp/ccqED0AM.s 			page 23


1037:src/xeq.c     **** 			UNLOCK_C; //just in case
1038:src/xeq.c     **** 			return;
1039:src/xeq.c     **** 		}
1040:src/xeq.c     **** 		SET_CPX_NO;
1041:src/xeq.c     **** 	case OP_C_OFF: // exit complex mode - only called if CPX_ENABLED and C_LOCK_ON
1042:src/xeq.c     **** 		finish_cpx_entry(1);
1043:src/xeq.c     **** 		UNLOCK_C;
1044:src/xeq.c     **** 		UState.stack_depth = TRUE_8; // restore prior stack size
1045:src/xeq.c     **** 		State2.wascomplex = 0;
1046:src/xeq.c     **** #ifdef DM42
1047:src/xeq.c     **** 		set_default_menu();
1048:src/xeq.c     **** 		display_current_menu();
1049:src/xeq.c     **** #endif
1050:src/xeq.c     **** 		return;
1051:src/xeq.c     **** 	case OP_C_MIM: // change sign of imaginary part
1052:src/xeq.c     **** 		{
1053:src/xeq.c     **** 		decNumber y;
1054:src/xeq.c     **** 		getY(&y);
1055:src/xeq.c     **** 		dn_minus(&y, &y);
1056:src/xeq.c     **** 		setY(&y);
1057:src/xeq.c     **** 		}
1058:src/xeq.c     **** 		break;
1059:src/xeq.c     **** 	case OP_C_MRE: // change sign of real part
1060:src/xeq.c     **** 		{
1061:src/xeq.c     **** 		decNumber x;
1062:src/xeq.c     **** 		getX(&x);
1063:src/xeq.c     **** 		dn_minus(&x, &x);
1064:src/xeq.c     **** 		setX(&x);
1065:src/xeq.c     **** 		}
1066:src/xeq.c     **** 		break;
1067:src/xeq.c     **** 	case OP_C_IM: // zero real part
1068:src/xeq.c     **** 		zero_X();
1069:src/xeq.c     **** 		break;
1070:src/xeq.c     **** 	case OP_C_RE: // zero imag part
1071:src/xeq.c     **** 		zero_Y();
1072:src/xeq.c     **** 		break;
1073:src/xeq.c     **** 	case OP_CPXI: // use i to display complex numbers
1074:src/xeq.c     **** 		SET_CPX_I;
1075:src/xeq.c     **** 		break;
1076:src/xeq.c     **** 	case OP_CPXJ: // use j to display complex numbers
1077:src/xeq.c     **** 		SET_CPX_J;
1078:src/xeq.c     **** 		break;
1079:src/xeq.c     **** 	default:;
1080:src/xeq.c     **** 	}
1081:src/xeq.c     **** 	set_was_complex();
1082:src/xeq.c     **** 	CLEAR_POLAR_READY;
1083:src/xeq.c     **** }
1084:src/xeq.c     **** #endif
1085:src/xeq.c     **** 
1086:src/xeq.c     **** void cpx_fill(enum nilop op) {
1087:src/xeq.c     **** 	const int n = stack_size();
1088:src/xeq.c     **** 	const REGISTER *y = get_reg_n(regY_idx);
1089:src/xeq.c     **** 	int i;
1090:src/xeq.c     **** 
1091:src/xeq.c     **** 	for (i=2; i<n; i++)
1092:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
1093:src/xeq.c     **** 	set_was_complex();
ARM GAS  /tmp/ccqED0AM.s 			page 24


1094:src/xeq.c     **** }
1095:src/xeq.c     **** 
1096:src/xeq.c     **** void fill(enum nilop op) {
1097:src/xeq.c     **** 	const int n = stack_size();
1098:src/xeq.c     **** 	int i;
1099:src/xeq.c     **** 
1100:src/xeq.c     **** 	for (i=1; i<n; i++)
1101:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
1102:src/xeq.c     **** }
1103:src/xeq.c     **** 
1104:src/xeq.c     **** void drop(enum nilop op) {
1105:src/xeq.c     **** 	if (op == OP_DROPXY) {
1106:src/xeq.c     **** 		lower2();
1107:src/xeq.c     **** 		set_was_complex();
1108:src/xeq.c     **** 	} else
1109:src/xeq.c     **** 		lower();
1110:src/xeq.c     **** }
1111:src/xeq.c     **** 
1112:src/xeq.c     **** #ifndef is_intmode
1113:src/xeq.c     **** int is_intmode(void) {
1114:src/xeq.c     **** 	return UState.intm;
1115:src/xeq.c     **** }
1116:src/xeq.c     **** #endif
1117:src/xeq.c     **** 
1118:src/xeq.c     **** int is_dblmode(void) {
1119:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
1120:src/xeq.c     **** }
1121:src/xeq.c     **** 
1122:src/xeq.c     **** int is_usrdblmode(void) {
1123:src/xeq.c     **** 	if (XromFlags.xIN)
1124:src/xeq.c     **** 		return XromFlags.mode_double;
1125:src/xeq.c     **** 	return is_dblmode();
1126:src/xeq.c     **** }
1127:src/xeq.c     **** 
1128:src/xeq.c     **** /* Convert a possibly signed string to an integer
1129:src/xeq.c     ****  */
1130:src/xeq.c     **** int s_to_i(const char *s) {
1131:src/xeq.c     **** 	int x = 0;
1132:src/xeq.c     **** 	int neg;
1133:src/xeq.c     **** 
1134:src/xeq.c     **** 	if (*s == '-') {
1135:src/xeq.c     **** 		s++;
1136:src/xeq.c     **** 		neg = 1;
1137:src/xeq.c     **** 	} else {
1138:src/xeq.c     **** 		if (*s == '+')
1139:src/xeq.c     **** 			s++;
1140:src/xeq.c     **** 		neg = 0;
1141:src/xeq.c     **** 	}
1142:src/xeq.c     **** 
1143:src/xeq.c     **** 	for (;;) {
1144:src/xeq.c     **** 		const char c = *s++;
1145:src/xeq.c     **** 
1146:src/xeq.c     **** 		if (c < '0' || c > '9')
1147:src/xeq.c     **** 			break;
1148:src/xeq.c     **** 		x = 10 * x + (c - '0');
1149:src/xeq.c     **** 	}
1150:src/xeq.c     **** 	if (neg)
ARM GAS  /tmp/ccqED0AM.s 			page 25


1151:src/xeq.c     **** 		return -x;
1152:src/xeq.c     **** 	return x;
1153:src/xeq.c     **** }
1154:src/xeq.c     **** 
1155:src/xeq.c     **** /* Convert a string in the given base to an unsigned integer
1156:src/xeq.c     ****  */
1157:src/xeq.c     **** unsigned long long int s_to_ull(const char *s, unsigned int base) {
1158:src/xeq.c     **** 	unsigned long long int x = 0;
1159:src/xeq.c     **** 
1160:src/xeq.c     **** 	for (;;) {
1161:src/xeq.c     **** 		unsigned int n;
1162:src/xeq.c     **** 		const char c = *s++;
1163:src/xeq.c     **** 
1164:src/xeq.c     **** 		if (c >= '0' && c <= '9')
1165:src/xeq.c     **** 			n = c - '0';
1166:src/xeq.c     **** 		else if (c >= 'A' && c <= 'F')
1167:src/xeq.c     **** 			n = c - 'A' + 10;
1168:src/xeq.c     **** 		else
1169:src/xeq.c     **** 			break;
1170:src/xeq.c     **** 		if (n >= base)
1171:src/xeq.c     **** 			break;
1172:src/xeq.c     **** 		x = x * base + n;
1173:src/xeq.c     **** 	}
1174:src/xeq.c     **** 	return x;
1175:src/xeq.c     **** }
1176:src/xeq.c     **** 
1177:src/xeq.c     **** const char *get_cmdline(void) {
1178:src/xeq.c     **** 	if (CmdLineLength) {
1179:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
1180:src/xeq.c     **** 		return Cmdline;
1181:src/xeq.c     **** 	}
1182:src/xeq.c     **** 	return NULL;
1183:src/xeq.c     **** }
1184:src/xeq.c     **** 
1185:src/xeq.c     **** #if 0
1186:src/xeq.c     **** static int fract_convert_number(decNumber *x, const char *s) {
1187:src/xeq.c     **** 	if (*s == '\0') {
1188:src/xeq.c     **** 		report_err(ERR_DOMAIN);
1189:src/xeq.c     **** 		return 1;
1190:src/xeq.c     **** 	}
1191:src/xeq.c     **** 	decNumberFromString(x, s, &Ctx);
1192:src/xeq.c     **** 	return check_special(x);
1193:src/xeq.c     **** }
1194:src/xeq.c     **** #endif
1195:src/xeq.c     **** 
1196:src/xeq.c     **** /* Return 1 if the command line contains an error and also set an appropriate
1197:src/xeq.c     ****  * error message.
1198:src/xeq.c     ****  */
1199:src/xeq.c     **** int is_bad_cmdline(void)
1200:src/xeq.c     **** {
1201:src/xeq.c     **** #ifndef IGNORE_INVALID_FRACTIONS
1202:src/xeq.c     **** 	if (CmdLineDot == 2) {
1203:src/xeq.c     **** 		char *p;
1204:src/xeq.c     **** 
1205:src/xeq.c     **** 		// Check if there's a non-zero digit after the last decimal mark
1206:src/xeq.c     **** 		p = Cmdline + CmdLineLength;
1207:src/xeq.c     **** 		for (;;) {
ARM GAS  /tmp/ccqED0AM.s 			page 26


1208:src/xeq.c     **** 			p--;
1209:src/xeq.c     **** 			if (*p >= '1' && *p <= '9')
1210:src/xeq.c     **** 				return 0;
1211:src/xeq.c     **** 			if (*p == '.')
1212:src/xeq.c     **** 				break;
1213:src/xeq.c     **** 		}
1214:src/xeq.c     **** 
1215:src/xeq.c     **** 		reset_shift();
1216:src/xeq.c     **** 		error_message(ERR_DOMAIN);
1217:src/xeq.c     **** 		State2.invalid_disp = 1;
1218:src/xeq.c     **** 		return 1;
1219:src/xeq.c     **** 	}
1220:src/xeq.c     **** #endif
1221:src/xeq.c     **** 	return 0;
1222:src/xeq.c     **** }
1223:src/xeq.c     **** 
1224:src/xeq.c     **** /* Process the command line if any
1225:src/xeq.c     ****  */
1226:src/xeq.c     **** void process_cmdline(void) {
1227:src/xeq.c     **** 	decNumber a, b, x, t;
1228:src/xeq.c     **** 
1229:src/xeq.c     **** 	if (CmdLineLength) {
1230:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
1231:src/xeq.c     **** 		const unsigned int cmdlinedot = CmdLineDot;
1232:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
1233:src/xeq.c     **** 		char cmdline[CMDLINELEN + 2];
1234:src/xeq.c     **** #else
1235:src/xeq.c     **** 		char cmdline[CMDLINELEN + 1];
1236:src/xeq.c     **** #endif
1237:src/xeq.c     **** 
1238:src/xeq.c     **** 		xcopy(cmdline, Cmdline, CMDLINELEN + 1);
1239:src/xeq.c     **** 
1240:src/xeq.c     **** 		cmdline[CmdLineLength] = '\0';
1241:src/xeq.c     **** 		if (!is_intmode()) {
1242:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
1243:src/xeq.c     **** 			if (cmdline[CmdLineLength-1] == 'E' || cmdline[CmdLineLength-1] == 'D')
1244:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
1245:src/xeq.c     **** 			else if (cmdline[CmdLineEex] == 'D') {
1246:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
1247:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
1248:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
1249:src/xeq.c     **** 			}
1250:src/xeq.c     **** #else
1251:src/xeq.c     **** 			if (cmdline[CmdLineLength-1] == 'E')
1252:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
1253:src/xeq.c     **** 			else if (CmdLineLength > 1 && cmdline[CmdLineLength-2] == 'E' && cmdline[CmdLineLength-1] == '-'
1254:src/xeq.c     **** 				cmdline[CmdLineLength-2] = '\0';
1255:src/xeq.c     **** #endif
1256:src/xeq.c     **** 			if (0
1257:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
1258:src/xeq.c     **** 			    || CmdLineEex
1259:src/xeq.c     **** #endif
1260:src/xeq.c     **** #if FRACTION_MODE_INPUT & 4
1261:src/xeq.c     **** 			    || cmdlinedot == 1
1262:src/xeq.c     **** #endif
1263:src/xeq.c     **** 			   )
1264:src/xeq.c     **** 				UState.fract = 0;
ARM GAS  /tmp/ccqED0AM.s 			page 27


1265:src/xeq.c     **** 		}
1266:src/xeq.c     **** 		CmdLineLength = 0;
1267:src/xeq.c     **** 		lift_if_enabled();
1268:src/xeq.c     **** 		set_lift();
1269:src/xeq.c     **** 		CmdLineDot = 0;
1270:src/xeq.c     **** 		CmdLineEex = 0;
1271:src/xeq.c     **** 		if (is_intmode()) {
1272:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
1273:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
1274:src/xeq.c     **** 			setX_int_sgn(x, sgn);
1275:src/xeq.c     **** 		} else if (cmdlinedot == 2) {
1276:src/xeq.c     **** 			char *d0, *d1, *d2;
1277:src/xeq.c     **** 			int neg;
1278:src/xeq.c     **** 
1279:src/xeq.c     **** 			if (bad_cmdline)
1280:src/xeq.c     **** 				return;
1281:src/xeq.c     **** #if !(FRACTION_MODE_INPUT & 8)
1282:src/xeq.c     **** 			UState.fract = 1;
1283:src/xeq.c     **** #endif
1284:src/xeq.c     **** 			if (cmdline[0] == '-') {
1285:src/xeq.c     **** 				neg = 1;
1286:src/xeq.c     **** 				d0 = cmdline+1;
1287:src/xeq.c     **** 			} else {
1288:src/xeq.c     **** 				neg = 0;
1289:src/xeq.c     **** 				d0 = cmdline;
1290:src/xeq.c     **** 			}
1291:src/xeq.c     **** 			d1 = find_char(d0, '.');
1292:src/xeq.c     **** 			*d1++ = '\0';
1293:src/xeq.c     **** 			d2 = find_char(d1, '.');
1294:src/xeq.c     **** 			*d2++ = '\0';
1295:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
1296:src/xeq.c     **** 			decNumberFromString(&x, d0, &Ctx);
1297:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1298:src/xeq.c     **** 			if (d2 == d1+1) { // ND change starts here; if dots are adjacent...
1299:src/xeq.c     **** 				decNumberCopy(&a, &x); // put x (integer part) into a (numerator) ...
1300:src/xeq.c     **** 				decNumberZero(&x); // and zero x
1301:src/xeq.c     **** #if FRACTION_MODE_INPUT & 32
1302:src/xeq.c     **** 				UState.improperfrac = 1;
1303:src/xeq.c     **** #endif
1304:src/xeq.c     **** 			}
1305:src/xeq.c     **** 			else
1306:src/xeq.c     **** #endif
1307:src/xeq.c     **** 			{
1308:src/xeq.c     **** 				decNumberFromString(&a, d1, &Ctx);
1309:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 16) && defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1310:src/xeq.c     **** 				UState.improperfrac = 0;
1311:src/xeq.c     **** #endif
1312:src/xeq.c     **** 			}
1313:src/xeq.c     **** 			dn_divide(&t, &a, &b);
1314:src/xeq.c     **** #ifdef IGNORE_INVALID_FRACTIONS
1315:src/xeq.c     **** 			if (!decNumberIsSpecial(&t))
1316:src/xeq.c     **** #endif
1317:src/xeq.c     **** 				dn_add(&x, &x, &t);
1318:src/xeq.c     **** 			if (neg)
1319:src/xeq.c     **** 				dn_minus(&x, &x);
1320:src/xeq.c     **** 			setX(&x);
1321:src/xeq.c     **** 		} else {
ARM GAS  /tmp/ccqED0AM.s 			page 28


1322:src/xeq.c     **** 			decNumberFromString(&x, cmdline, &Ctx);
1323:src/xeq.c     **** 			setX(&x);
1324:src/xeq.c     **** 		}
1325:src/xeq.c     **** 		set_entry();
1326:src/xeq.c     **** #ifndef DM42
1327:src/xeq.c     **** 		print_trace( TRACE_DATA_ENTRY, 1 );
1328:src/xeq.c     **** #endif
1329:src/xeq.c     **** 	}
1330:src/xeq.c     **** }
1331:src/xeq.c     **** 
1332:src/xeq.c     **** void process_cmdline_set_lift(void) {
1333:src/xeq.c     **** 	process_cmdline();
1334:src/xeq.c     **** 	set_lift();
1335:src/xeq.c     **** }
1336:src/xeq.c     **** 
1337:src/xeq.c     **** 
1338:src/xeq.c     **** /*
1339:src/xeq.c     ****  *  Return a pointer to a numbered register.
1340:src/xeq.c     ****  *  If locals are enabled and a non existent local register
1341:src/xeq.c     ****  *  is accessed, the respective global register is returned.
1342:src/xeq.c     ****  *  Error checking must be done outside this routine.
1343:src/xeq.c     ****  *  We force the beginning of the local registers on an even stack position.
1344:src/xeq.c     ****  *  This ensures 32 bit alignment of the decima64 object.
1345:src/xeq.c     ****  */
1346:src/xeq.c     **** /*
1347:src/xeq.c     ****  *  If working in double precision, register numbers must be remapped
1348:src/xeq.c     ****  */
1349:src/xeq.c     **** static decimal64 *reg_address(int n, decimal64 *const regs, decimal64 *const named_regs) {
 182              		.loc 1 1349 90 is_stmt 1 view -0
 183              		.cfi_startproc
 184              		@ args = 0, pretend = 0, frame = 0
 185              		@ frame_needed = 0, uses_anonymous_args = 0
 186              		@ link register save eliminated.
1350:src/xeq.c     **** 	const int dbl = is_dblmode();
 187              		.loc 1 1350 2 view .LVU58
 188              	.LBB1323:
 189              	.LBI1323:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 190              		.loc 1 1118 5 view .LVU59
 191              	.LBB1324:
1119:src/xeq.c     **** }
 192              		.loc 1 1119 2 view .LVU60
1119:src/xeq.c     **** }
 193              		.loc 1 1119 24 is_stmt 0 view .LVU61
 194 0000 154B     		ldr	r3, .L25
 195 0002 1B68     		ldr	r3, [r3]
 196              	.LBE1324:
 197              	.LBE1323:
1349:src/xeq.c     **** 	const int dbl = is_dblmode();
 198              		.loc 1 1349 90 view .LVU62
 199 0004 10B4     		push	{r4}
 200              		.cfi_def_cfa_offset 4
 201              		.cfi_offset 4, -4
 202              	.LBB1327:
 203              	.LBB1325:
1119:src/xeq.c     **** }
 204              		.loc 1 1119 24 view .LVU63
ARM GAS  /tmp/ccqED0AM.s 			page 29


 205 0006 B3F8E847 		ldrh	r4, [r3, #2024]
 206              	.LBE1325:
 207              	.LBE1327:
1351:src/xeq.c     **** 
1352:src/xeq.c     **** 	if (n < regX_idx)
 208              		.loc 1 1352 5 view .LVU64
 209 000a 6328     		cmp	r0, #99
 210              	.LBB1328:
 211              	.LBB1326:
1119:src/xeq.c     **** }
 212              		.loc 1 1119 24 view .LVU65
 213 000c 44F20103 		movw	r3, #16385
 214 0010 03EA0403 		and	r3, r3, r4
 215              	.LVL17:
1119:src/xeq.c     **** }
 216              		.loc 1 1119 24 view .LVU66
 217              	.LBE1326:
 218              	.LBE1328:
 219              		.loc 1 1352 2 is_stmt 1 view .LVU67
 220              		.loc 1 1352 5 is_stmt 0 view .LVU68
 221 0014 10DD     		ble	.L23
1353:src/xeq.c     **** 		return regs + n + (dbl ? n : 0);
1354:src/xeq.c     **** 
1355:src/xeq.c     **** 	n -= regX_idx;
 222              		.loc 1 1355 2 is_stmt 1 view .LVU69
1356:src/xeq.c     **** 	// Lettered register
1357:src/xeq.c     **** 	if (XromFlags.xIN)
 223              		.loc 1 1357 6 is_stmt 0 view .LVU70
 224 0016 1149     		ldr	r1, .L25+4
 225              	.LVL18:
 226              		.loc 1 1357 5 view .LVU71
 227 0018 91F90140 		ldrsb	r4, [r1, #1]
 228 001c 002C     		cmp	r4, #0
1355:src/xeq.c     **** 	// Lettered register
 229              		.loc 1 1355 4 view .LVU72
 230 001e A0F16401 		sub	r1, r0, #100
 231              	.LVL19:
 232              		.loc 1 1357 2 is_stmt 1 view .LVU73
 233              		.loc 1 1357 5 is_stmt 0 view .LVU74
 234 0022 13DB     		blt	.L24
1358:src/xeq.c     **** 		return (decimal64 *) (XromStack + n);
1359:src/xeq.c     **** 	if (dbl)
 235              		.loc 1 1359 2 is_stmt 1 view .LVU75
 236              		.loc 1 1359 5 is_stmt 0 view .LVU76
 237 0024 B3F5804F 		cmp	r3, #16384
1360:src/xeq.c     **** 		n = (n << 1) - STACK_SIZE - EXTRA_REG;
 238              		.loc 1 1360 3 is_stmt 1 view .LVU77
 239              		.loc 1 1360 10 is_stmt 0 view .LVU78
 240 0028 04BF     		itt	eq
 241 002a 4900     		lsleq	r1, r1, #1
 242              	.LVL20:
 243              		.loc 1 1360 5 view .LVU79
 244 002c 0C39     		subeq	r1, r1, #12
 245              	.LVL21:
1361:src/xeq.c     **** 	return named_regs + n;
 246              		.loc 1 1361 2 is_stmt 1 view .LVU80
 247              		.loc 1 1361 20 is_stmt 0 view .LVU81
ARM GAS  /tmp/ccqED0AM.s 			page 30


 248 002e 02EBC100 		add	r0, r2, r1, lsl #3
1362:src/xeq.c     **** }
 249              		.loc 1 1362 1 view .LVU82
 250 0032 5DF8044B 		ldr	r4, [sp], #4
 251              		.cfi_remember_state
 252              		.cfi_restore 4
 253              		.cfi_def_cfa_offset 0
 254 0036 7047     		bx	lr
 255              	.LVL22:
 256              	.L23:
 257              		.cfi_restore_state
1353:src/xeq.c     **** 
 258              		.loc 1 1353 3 is_stmt 1 view .LVU83
1353:src/xeq.c     **** 
 259              		.loc 1 1353 19 is_stmt 0 view .LVU84
 260 0038 B3F5804F 		cmp	r3, #16384
1353:src/xeq.c     **** 
 261              		.loc 1 1353 15 view .LVU85
 262 003c 4FEAC002 		lsl	r2, r0, #3
 263              	.LVL23:
1353:src/xeq.c     **** 
 264              		.loc 1 1353 15 view .LVU86
 265 0040 08BF     		it	eq
 266 0042 0201     		lsleq	r2, r0, #4
1353:src/xeq.c     **** 
 267              		.loc 1 1353 19 view .LVU87
 268 0044 8818     		adds	r0, r1, r2
 269              	.LVL24:
 270              		.loc 1 1362 1 view .LVU88
 271 0046 5DF8044B 		ldr	r4, [sp], #4
 272              		.cfi_remember_state
 273              		.cfi_restore 4
 274              		.cfi_def_cfa_offset 0
 275 004a 7047     		bx	lr
 276              	.LVL25:
 277              	.L24:
 278              		.cfi_restore_state
1358:src/xeq.c     **** 	if (dbl)
 279              		.loc 1 1358 3 is_stmt 1 view .LVU89
1358:src/xeq.c     **** 	if (dbl)
 280              		.loc 1 1358 10 is_stmt 0 view .LVU90
 281 004c 0448     		ldr	r0, .L25+8
 282              		.loc 1 1362 1 view .LVU91
 283 004e 5DF8044B 		ldr	r4, [sp], #4
 284              		.cfi_restore 4
 285              		.cfi_def_cfa_offset 0
1358:src/xeq.c     **** 	if (dbl)
 286              		.loc 1 1358 10 view .LVU92
 287 0052 00EB0110 		add	r0, r0, r1, lsl #4
 288              		.loc 1 1362 1 view .LVU93
 289 0056 7047     		bx	lr
 290              	.L26:
 291              		.align	2
 292              	.L25:
 293 0058 00000000 		.word	main_ram
 294 005c 00000000 		.word	XromParams
 295 0060 00000000 		.word	XromLocal
ARM GAS  /tmp/ccqED0AM.s 			page 31


 296              		.cfi_endproc
 297              	.LFE90:
 299              		.section	.text.retstk_up,"ax",%progbits
 300              		.align	1
 301              		.p2align 2,,3
 302              		.syntax unified
 303              		.thumb
 304              		.thumb_func
 305              		.fpu fpv4-sp-d16
 307              	retstk_up:
 308              	.LFB150:
1363:src/xeq.c     **** 
1364:src/xeq.c     **** REGISTER *get_reg_n(int n) {
1365:src/xeq.c     **** 	const int dbl = is_dblmode();
1366:src/xeq.c     **** 
1367:src/xeq.c     **** 	if (n >= CONST_REG_BASE) {
1368:src/xeq.c     **** 		n -= CONST_REG_BASE;
1369:src/xeq.c     **** 		return get_const(n, dbl);
1370:src/xeq.c     **** 	}
1371:src/xeq.c     **** 	if (n >= FLASH_REG_BASE)
1372:src/xeq.c     **** 		return get_flash_reg_n(n - FLASH_REG_BASE);
1373:src/xeq.c     **** 
1374:src/xeq.c     **** 	if (n >= LOCAL_REG_BASE && local_regs() > 0) {
1375:src/xeq.c     **** 		// local register on the return stack
1376:src/xeq.c     **** 		n -= LOCAL_REG_BASE;
1377:src/xeq.c     **** 		if (dbl)
1378:src/xeq.c     **** 			n <<= 1;
1379:src/xeq.c     **** 		return (REGISTER *) ((decimal64 *) (RetStk + (short)((LocalRegs + 2) & 0xfffe)) + n);
1380:src/xeq.c     **** 	}
1381:src/xeq.c     **** 	return (REGISTER *) reg_address(n, Regs + TOPREALREG - NumRegs, Regs + regX_idx);
1382:src/xeq.c     **** }
1383:src/xeq.c     **** 
1384:src/xeq.c     **** 
1385:src/xeq.c     **** REGISTER *get_flash_reg_n(int n) {
1386:src/xeq.c     **** 	return (REGISTER *) reg_address(n, BackupFlash._regs + TOPREALREG - BackupFlash._numregs,
1387:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
1388:src/xeq.c     **** }
1389:src/xeq.c     **** 
1390:src/xeq.c     **** 
1391:src/xeq.c     **** /*
1392:src/xeq.c     ****  *  Get a constatnt by index and mode
1393:src/xeq.c     ****  *  In case of a conversion, a private copy is returned
1394:src/xeq.c     ****  */
1395:src/xeq.c     **** REGISTER *get_const(int index, int dbl)
1396:src/xeq.c     **** {
1397:src/xeq.c     **** 	static REGISTER result;
1398:src/xeq.c     **** 	const int i = cnsts[index].index;
1399:src/xeq.c     **** 	if (dbl) {
1400:src/xeq.c     **** 		if (i <= 1 || i >= 128)
1401:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
1402:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
1403:src/xeq.c     **** 	}
1404:src/xeq.c     **** 	else {
1405:src/xeq.c     **** 		if (i < 128)
1406:src/xeq.c     **** 			return (REGISTER *) (cnsts_d64 + i);
1407:src/xeq.c     **** 		packed_from_packed128(&(result.s), cnsts_d128 - 128 + i);
1408:src/xeq.c     **** 	}
ARM GAS  /tmp/ccqED0AM.s 			page 32


1409:src/xeq.c     **** 	return &result;
1410:src/xeq.c     **** }
1411:src/xeq.c     **** 
1412:src/xeq.c     **** 
1413:src/xeq.c     **** /*  Some conversion routines to take decimals and produce integers
1414:src/xeq.c     ****  *  This is for opaque storage, no conversion takes place.
1415:src/xeq.c     ****  */
1416:src/xeq.c     **** long long int get_reg_n_int(int index) {
1417:src/xeq.c     **** 	long long int ll;
1418:src/xeq.c     **** 	xcopy(&ll, get_reg_n(index), sizeof(ll));
1419:src/xeq.c     **** 	return ll;
1420:src/xeq.c     **** }
1421:src/xeq.c     **** 
1422:src/xeq.c     **** void set_reg_n_int(int index, long long int ll) {
1423:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
1424:src/xeq.c     **** }
1425:src/xeq.c     **** 
1426:src/xeq.c     **** /* Get an integer from a register
1427:src/xeq.c     ****  */
1428:src/xeq.c     **** unsigned long long int get_reg_n_int_sgn(int index, int *sgn) {
1429:src/xeq.c     **** 	if (is_intmode()) {
1430:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
1431:src/xeq.c     **** 	} else {
1432:src/xeq.c     **** 		decNumber n;
1433:src/xeq.c     **** 
1434:src/xeq.c     **** 		getRegister(&n, index);
1435:src/xeq.c     **** 		return dn_to_ull(&n, sgn);
1436:src/xeq.c     **** 	}
1437:src/xeq.c     **** }
1438:src/xeq.c     **** 
1439:src/xeq.c     **** 
1440:src/xeq.c     **** /* Get an integer from X
1441:src/xeq.c     ****  */
1442:src/xeq.c     **** long long int getX_int(void) {
1443:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
1444:src/xeq.c     **** }
1445:src/xeq.c     **** 
1446:src/xeq.c     **** unsigned long long int getX_int_sgn(int *sgn) {
1447:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
1448:src/xeq.c     **** }
1449:src/xeq.c     **** 
1450:src/xeq.c     **** /*
1451:src/xeq.c     ****  *  Forced conversion from real to intger
1452:src/xeq.c     ****  *  Leaves integer mode active on return!
1453:src/xeq.c     ****  */
1454:src/xeq.c     **** static void int_from_register(int out, int in) {
1455:src/xeq.c     **** 	int sgn;
1456:src/xeq.c     **** 	unsigned long long int val;
1457:src/xeq.c     **** 	
1458:src/xeq.c     **** 	UState.intm = 0;	// Force real mode access
1459:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
1460:src/xeq.c     **** 
1461:src/xeq.c     **** 	UState.intm = 1;	// Force integer access
1462:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
1463:src/xeq.c     **** }
1464:src/xeq.c     **** 
1465:src/xeq.c     **** /* Put an integer into a register
ARM GAS  /tmp/ccqED0AM.s 			page 33


1466:src/xeq.c     ****  */
1467:src/xeq.c     **** void set_reg_n_int_sgn(int index, unsigned long long int val, int sgn) {
1468:src/xeq.c     **** 	if (is_intmode()) {
1469:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
1470:src/xeq.c     **** 	} else {
1471:src/xeq.c     **** 		decNumber t;
1472:src/xeq.c     **** 
1473:src/xeq.c     **** 		ullint_to_dn(&t, val);
1474:src/xeq.c     **** 		if (sgn)
1475:src/xeq.c     **** 			dn_minus(&t, &t);
1476:src/xeq.c     **** 		setRegister(index, &t);
1477:src/xeq.c     **** 	}
1478:src/xeq.c     **** }
1479:src/xeq.c     **** 
1480:src/xeq.c     **** /* 
1481:src/xeq.c     ****  *  Forced conversion from integer to register format.
1482:src/xeq.c     ****  *  Leaves integer mode off after conversion.
1483:src/xeq.c     ****  *  Destination may be in XROM register space
1484:src/xeq.c     ****  */
1485:src/xeq.c     **** static void register_from_int(int out, int in, int called_from_xin) {
1486:src/xeq.c     **** 	int sgn;
1487:src/xeq.c     **** 	unsigned long long int val;
1488:src/xeq.c     **** 	const int xin = XromFlags.xIN;
1489:src/xeq.c     **** 	
1490:src/xeq.c     **** 	if (called_from_xin)
1491:src/xeq.c     **** 		XromFlags.xIN = 0;
1492:src/xeq.c     **** 	UState.intm = 1;
1493:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
1494:src/xeq.c     **** 
1495:src/xeq.c     **** 	XromFlags.xIN = xin;
1496:src/xeq.c     **** 	UState.intm = 0;
1497:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
1498:src/xeq.c     **** }
1499:src/xeq.c     **** 
1500:src/xeq.c     **** 
1501:src/xeq.c     **** /* Put an integer into X
1502:src/xeq.c     ****  * Integer registers are always single precision!
1503:src/xeq.c     ****  */
1504:src/xeq.c     **** void setX_int(long long int val) {
1505:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
1506:src/xeq.c     **** }
1507:src/xeq.c     **** 
1508:src/xeq.c     **** 
1509:src/xeq.c     **** void setX_int_sgn(unsigned long long int val, int sgn) {
1510:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
1511:src/xeq.c     **** }
1512:src/xeq.c     **** 
1513:src/xeq.c     **** 
1514:src/xeq.c     **** 
1515:src/xeq.c     **** /*
1516:src/xeq.c     ****  *  Set the register value explicitely
1517:src/xeq.c     ****  */
1518:src/xeq.c     **** void zero_regs(REGISTER *dest, int n) {
1519:src/xeq.c     **** #if 0
1520:src/xeq.c     **** 	if (is_intmode())
1521:src/xeq.c     **** 		xset(dest, 0, n << 3);
1522:src/xeq.c     **** 	else {
ARM GAS  /tmp/ccqED0AM.s 			page 34


1523:src/xeq.c     **** 		REGISTER *const zero = get_reg_n(CONST_REG_BASE + OP_ZERO);
1524:src/xeq.c     **** 		const int reg_size = is_dblmode() ? sizeof(decimal128) : sizeof(decimal64);
1525:src/xeq.c     **** 		char *d = (char *) dest;
1526:src/xeq.c     **** 		int i;
1527:src/xeq.c     **** 		for (i = 0; i < n; ++i, d += reg_size)
1528:src/xeq.c     **** 			copyreg((REGISTER *) d, zero);
1529:src/xeq.c     **** 	}
1530:src/xeq.c     **** #else
1531:src/xeq.c     **** 	// This works for all modes
1532:src/xeq.c     **** 	// no it doesn't -- it leaves varying values of zero around
1533:src/xeq.c     **** 	xset(dest, 0, n << (3 + is_dblmode()));
1534:src/xeq.c     **** #endif
1535:src/xeq.c     **** }
1536:src/xeq.c     **** 
1537:src/xeq.c     **** void move_regs(REGISTER *dest, REGISTER *src, int n) {
1538:src/xeq.c     **** 	if (is_dblmode())
1539:src/xeq.c     **** 		n <<= 1;
1540:src/xeq.c     **** 	xcopy(dest, src, n << 3);
1541:src/xeq.c     **** }
1542:src/xeq.c     **** 
1543:src/xeq.c     **** 
1544:src/xeq.c     **** /* Zero a register
1545:src/xeq.c     ****  */
1546:src/xeq.c     **** static void set_zero(REGISTER *x) {
1547:src/xeq.c     **** 	zero_regs(x, 1);
1548:src/xeq.c     **** }
1549:src/xeq.c     **** 
1550:src/xeq.c     **** void zero_X(void) {
1551:src/xeq.c     **** 	set_zero(StackBase);
1552:src/xeq.c     **** }
1553:src/xeq.c     **** 
1554:src/xeq.c     **** void zero_Y(void) {
1555:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
1556:src/xeq.c     **** }
1557:src/xeq.c     **** 
1558:src/xeq.c     **** void clrx(enum nilop op) {
1559:src/xeq.c     **** 	zero_X();
1560:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
1561:src/xeq.c     **** 	if (C_LOCKED) {
1562:src/xeq.c     **** 		zero_Y();
1563:src/xeq.c     **** 		if (POLAR_DISPLAY) {
1564:src/xeq.c     **** 			set_zero(get_reg_n(regJ_idx));
1565:src/xeq.c     **** 			set_zero(get_reg_n(regK_idx));
1566:src/xeq.c     **** 		}
1567:src/xeq.c     **** 		CLEAR_REAL;
1568:src/xeq.c     **** 		CLEAR_IMAG;
1569:src/xeq.c     **** 	}
1570:src/xeq.c     **** #endif
1571:src/xeq.c     **** 	clr_lift();
1572:src/xeq.c     **** }
1573:src/xeq.c     **** 
1574:src/xeq.c     **** /* Zero out the stack
1575:src/xeq.c     ****  */
1576:src/xeq.c     **** void clrstk(enum nilop op) {
1577:src/xeq.c     **** 	zero_regs(StackBase, stack_size());
1578:src/xeq.c     **** 	set_lift();
1579:src/xeq.c     **** }
ARM GAS  /tmp/ccqED0AM.s 			page 35


1580:src/xeq.c     **** 
1581:src/xeq.c     **** 
1582:src/xeq.c     **** /* Zero out all registers excluding the stack and lastx
1583:src/xeq.c     ****  */	
1584:src/xeq.c     **** void clrreg(enum nilop op) {
1585:src/xeq.c     **** 	const int local = local_regs();
1586:src/xeq.c     **** 	process_cmdline_set_lift();
1587:src/xeq.c     **** 
1588:src/xeq.c     **** 	// erase register memory
1589:src/xeq.c     **** 	zero_regs(get_reg_n(0), global_regs());
1590:src/xeq.c     **** 
1591:src/xeq.c     **** 	// Clear A, B, C & D if they aren't part of the stack
1592:src/xeq.c     **** 	if (stack_size() != 8)
1593:src/xeq.c     **** 		zero_regs(get_reg_n(regA_idx), 4);
1594:src/xeq.c     **** 
1595:src/xeq.c     **** 	// Clear J & K but not I and L since they are last X.
1596:src/xeq.c     **** 	zero_regs(get_reg_n(regJ_idx), 2);
1597:src/xeq.c     **** 
1598:src/xeq.c     **** 	// erase local registers but keep them allocated
1599:src/xeq.c     **** 	if (local)
1600:src/xeq.c     **** 		zero_regs(get_reg_n(LOCAL_REG_BASE), local);
1601:src/xeq.c     **** }
1602:src/xeq.c     **** 
1603:src/xeq.c     **** 
1604:src/xeq.c     **** /* Clear the subroutine return stack
1605:src/xeq.c     ****  */
1606:src/xeq.c     **** void clrretstk(void) {
1607:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
1608:src/xeq.c     **** }
1609:src/xeq.c     **** 
1610:src/xeq.c     **** void clrretstk_pc(void) {
1611:src/xeq.c     **** 	clrretstk();
1612:src/xeq.c     **** 	raw_set_pc(0);
1613:src/xeq.c     **** 	update_program_bounds(1);
1614:src/xeq.c     **** }
1615:src/xeq.c     **** 
1616:src/xeq.c     **** 
1617:src/xeq.c     **** /*
1618:src/xeq.c     ****  *  Command to allow access to constants and small integers
1619:src/xeq.c     ****  */
1620:src/xeq.c     **** void cmdconst(unsigned int arg, enum rarg op) {
1621:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
1622:src/xeq.c     **** 	if (op == RARG_INTNUM_CMPLX || op == RARG_CONST_CMPLX || op == RARG_IND_CONST_CMPLX) {
1623:src/xeq.c     **** #else
1624:src/xeq.c     **** 	if (op == RARG_INTNUM_CMPLX || op == RARG_CONST_CMPLX) {
1625:src/xeq.c     **** #endif
1626:src/xeq.c     **** 		lift2_if_enabled();
1627:src/xeq.c     **** 		zero_Y();
1628:src/xeq.c     **** 		set_was_complex();
1629:src/xeq.c     **** 	} else
1630:src/xeq.c     **** 		lift_if_enabled();
1631:src/xeq.c     **** 
1632:src/xeq.c     **** 	if (op == RARG_INTNUM || op == RARG_INTNUM_CMPLX)
1633:src/xeq.c     **** 		setX_int_sgn(arg, 0);
1634:src/xeq.c     **** 	else if (is_intmode())
1635:src/xeq.c     **** 		bad_mode_error();
1636:src/xeq.c     **** 	else 
ARM GAS  /tmp/ccqED0AM.s 			page 36


1637:src/xeq.c     **** 		copyreg(StackBase, get_const(arg, is_dblmode()));
1638:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
1639:src/xeq.c     **** 	CLEAR_POLAR_READY;
1640:src/xeq.c     **** #endif
1641:src/xeq.c     **** }
1642:src/xeq.c     **** 
1643:src/xeq.c     **** 
1644:src/xeq.c     **** /* Store/recall code here.
1645:src/xeq.c     ****  * These two are pretty much the same so we define some utility routines first.
1646:src/xeq.c     ****  */
1647:src/xeq.c     **** 
1648:src/xeq.c     **** /* Do a basic STO/RCL arithmetic operation.
1649:src/xeq.c     ****  */
1650:src/xeq.c     **** static int storcl_op(unsigned short opr, int index, decNumber *r, int rev) {
1651:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
1652:src/xeq.c     **** 
1653:src/xeq.c     **** 	getX(x);
1654:src/xeq.c     **** 	getRegister(y, index);
1655:src/xeq.c     **** 	if (rev) {
1656:src/xeq.c     **** 		x = y;
1657:src/xeq.c     **** 		y = &a;
1658:src/xeq.c     **** 	}
1659:src/xeq.c     **** 
1660:src/xeq.c     **** 	switch (opr) {
1661:src/xeq.c     **** 	case 1:
1662:src/xeq.c     **** 		dn_add(r, y, x);
1663:src/xeq.c     **** 		break;
1664:src/xeq.c     **** 	case 2:
1665:src/xeq.c     **** 		dn_subtract(r, y, x);
1666:src/xeq.c     **** 		break;
1667:src/xeq.c     **** 	case 3:
1668:src/xeq.c     **** 		dn_multiply(r, y, x);
1669:src/xeq.c     **** 		break;
1670:src/xeq.c     **** 	case 4:
1671:src/xeq.c     **** 		dn_divide(r, y, x);
1672:src/xeq.c     **** 		break;
1673:src/xeq.c     **** 	case 5:
1674:src/xeq.c     **** 		dn_min(r, y, x);
1675:src/xeq.c     **** 		break;
1676:src/xeq.c     **** 	case 6:
1677:src/xeq.c     **** 		dn_max(r, y, x);
1678:src/xeq.c     **** 		break;
1679:src/xeq.c     **** 	default:
1680:src/xeq.c     **** 		return 1;
1681:src/xeq.c     **** 	}
1682:src/xeq.c     **** 	return 0;
1683:src/xeq.c     **** }
1684:src/xeq.c     **** 
1685:src/xeq.c     **** static int storcl_intop(unsigned short opr, int index, long long int *r, int rev) {
1686:src/xeq.c     **** 	long long int x, y;
1687:src/xeq.c     **** 
1688:src/xeq.c     **** 	x = getX_int();
1689:src/xeq.c     **** 	y = get_reg_n_int(index);
1690:src/xeq.c     **** 
1691:src/xeq.c     **** 	if (rev) {
1692:src/xeq.c     **** 		const long long int t = x;
1693:src/xeq.c     **** 		x = y;
ARM GAS  /tmp/ccqED0AM.s 			page 37


1694:src/xeq.c     **** 		y = t;
1695:src/xeq.c     **** 	}
1696:src/xeq.c     **** 
1697:src/xeq.c     **** 	switch (opr) {
1698:src/xeq.c     **** 	case 1:
1699:src/xeq.c     **** 		*r = intAdd(y, x);
1700:src/xeq.c     **** 		break;
1701:src/xeq.c     **** 	case 2:
1702:src/xeq.c     **** 		*r = intSubtract(y, x);
1703:src/xeq.c     **** 		break;
1704:src/xeq.c     **** 	case 3:
1705:src/xeq.c     **** 		*r = intMultiply(y, x);
1706:src/xeq.c     **** 		break;
1707:src/xeq.c     **** 	case 4:
1708:src/xeq.c     **** 		*r = intDivide(y, x);
1709:src/xeq.c     **** 		break;
1710:src/xeq.c     **** 	case 5:
1711:src/xeq.c     **** 		*r = intMin(y, x);
1712:src/xeq.c     **** 		break;
1713:src/xeq.c     **** 	case 6:
1714:src/xeq.c     **** 		*r = intMax(y, x);
1715:src/xeq.c     **** 		break;
1716:src/xeq.c     **** 	default:
1717:src/xeq.c     **** 		return 1;
1718:src/xeq.c     **** 	}
1719:src/xeq.c     **** 	return 0;
1720:src/xeq.c     **** }
1721:src/xeq.c     **** 
1722:src/xeq.c     **** /* We've got a STO operation to do.
1723:src/xeq.c     ****  */
1724:src/xeq.c     **** void cmdsto(unsigned int arg, enum rarg op) {
1725:src/xeq.c     **** 	if (op == RARG_STO) {
1726:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
1727:src/xeq.c     **** 	} else {
1728:src/xeq.c     **** 		if (is_intmode()) {
1729:src/xeq.c     **** 			long long int r;
1730:src/xeq.c     **** 
1731:src/xeq.c     **** 			if (storcl_intop(op - RARG_STO, arg, &r, 0))
1732:src/xeq.c     **** 				illegal(op);
1733:src/xeq.c     **** 			set_reg_n_int(arg, r);
1734:src/xeq.c     **** 		} else {
1735:src/xeq.c     **** 			decNumber r;
1736:src/xeq.c     **** 
1737:src/xeq.c     **** 			if (storcl_op(op - RARG_STO, arg, &r, 0))
1738:src/xeq.c     **** 				illegal(op);
1739:src/xeq.c     **** 			setRegister(arg, &r);
1740:src/xeq.c     **** 		}
1741:src/xeq.c     **** 	}
1742:src/xeq.c     **** }
1743:src/xeq.c     **** 
1744:src/xeq.c     **** /* We've got a RCL operation to do.
1745:src/xeq.c     ****  */
1746:src/xeq.c     **** static void do_rcl(int index, enum rarg op) {
1747:src/xeq.c     **** 	if (op == RARG_RCL) {
1748:src/xeq.c     **** 		REGISTER temp;
1749:src/xeq.c     **** 		copyreg(&temp, get_reg_n(index));
1750:src/xeq.c     **** 		lift_if_enabled();
ARM GAS  /tmp/ccqED0AM.s 			page 38


1751:src/xeq.c     **** 		copyreg(StackBase, &temp);
1752:src/xeq.c     **** 	} else {
1753:src/xeq.c     **** 		if (is_intmode()) {
1754:src/xeq.c     **** 			long long int r;
1755:src/xeq.c     **** 
1756:src/xeq.c     **** 			if (storcl_intop(op - RARG_RCL, index, &r, 1))
1757:src/xeq.c     **** 				illegal(op);
1758:src/xeq.c     **** 			setlastX();
1759:src/xeq.c     **** 			setX_int(r);
1760:src/xeq.c     **** 		} else {
1761:src/xeq.c     **** 			decNumber r;
1762:src/xeq.c     **** 
1763:src/xeq.c     **** 			if (storcl_op(op - RARG_RCL, index, &r, 1))
1764:src/xeq.c     **** 				illegal(op);
1765:src/xeq.c     **** 			setlastX();
1766:src/xeq.c     **** 			setX(&r);
1767:src/xeq.c     **** 		}
1768:src/xeq.c     **** 	}
1769:src/xeq.c     **** }
1770:src/xeq.c     **** 
1771:src/xeq.c     **** void cmdrcl(unsigned int arg, enum rarg op) {
1772:src/xeq.c     **** 	do_rcl(arg, op);
1773:src/xeq.c     **** }
1774:src/xeq.c     **** 
1775:src/xeq.c     **** #ifdef INCLUDE_FLASH_RECALL
1776:src/xeq.c     **** void cmdflashrcl(unsigned int arg, enum rarg op) {
1777:src/xeq.c     **** 	do_rcl(FLASH_REG_BASE + arg, op - RARG_FLRCL + RARG_RCL);
1778:src/xeq.c     **** }
1779:src/xeq.c     **** #endif
1780:src/xeq.c     **** 
1781:src/xeq.c     **** /* And the complex equivalents for the above.
1782:src/xeq.c     ****  * We pair registers arg & arg+1 to provide a complex number
1783:src/xeq.c     ****  */
1784:src/xeq.c     **** static int storcl_cop(unsigned short opr, int index, decNumber *r1, decNumber *r2, int rev) {
1785:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
1786:src/xeq.c     **** 
1787:src/xeq.c     **** 	getXY(x + 0, x + 1);
1788:src/xeq.c     **** 	getRegister(y + 0, index);
1789:src/xeq.c     **** 	getRegister(y + 1, index + 1);
1790:src/xeq.c     **** 
1791:src/xeq.c     **** 	if (rev) {
1792:src/xeq.c     **** 		x = y;
1793:src/xeq.c     **** 		y = a;
1794:src/xeq.c     **** 	}
1795:src/xeq.c     **** 
1796:src/xeq.c     **** 	switch (opr) {
1797:src/xeq.c     **** 	case 1:
1798:src/xeq.c     **** 		cmplxAdd(r1, r2, y + 0, y + 1, x + 0, x + 1);
1799:src/xeq.c     **** 		break;
1800:src/xeq.c     **** 	case 2:
1801:src/xeq.c     **** 		cmplxSubtract(r1, r2, y + 0, y + 1, x + 0, x + 1);
1802:src/xeq.c     **** 		break;
1803:src/xeq.c     **** 	case 3:
1804:src/xeq.c     **** 		cmplxMultiply(r1, r2, y + 0, y + 1, x + 0, x + 1);
1805:src/xeq.c     **** 		break;
1806:src/xeq.c     **** 	case 4:
1807:src/xeq.c     **** 		cmplxDivide(r1, r2, y + 0, y + 1, x + 0, x + 1);
ARM GAS  /tmp/ccqED0AM.s 			page 39


1808:src/xeq.c     **** 		break;
1809:src/xeq.c     **** 	default:
1810:src/xeq.c     **** 		return 1;
1811:src/xeq.c     **** 	}
1812:src/xeq.c     **** 	return 0;
1813:src/xeq.c     **** }
1814:src/xeq.c     **** 
1815:src/xeq.c     **** 
1816:src/xeq.c     **** void cmdcsto(unsigned int arg, enum rarg op) {
1817:src/xeq.c     **** 	decNumber r1, r2;
1818:src/xeq.c     **** 	REGISTER *t1, *t2;
1819:src/xeq.c     **** 
1820:src/xeq.c     **** 	t1 = get_reg_n(arg);
1821:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
1822:src/xeq.c     **** 
1823:src/xeq.c     **** 	if (op == RARG_CSTO) {
1824:src/xeq.c     **** 		copyreg(t1, StackBase);
1825:src/xeq.c     **** 		copyreg(t2, get_reg_n(regY_idx));
1826:src/xeq.c     **** 	} else {
1827:src/xeq.c     **** 		if (is_intmode())
1828:src/xeq.c     **** 			bad_mode_error();
1829:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CSTO, arg, &r1, &r2, 0))
1830:src/xeq.c     **** 			illegal(op);
1831:src/xeq.c     **** 		else {
1832:src/xeq.c     **** 			setRegister(arg, &r1);
1833:src/xeq.c     **** 			setRegister(arg + 1, &r2);
1834:src/xeq.c     **** 		}
1835:src/xeq.c     **** 	}
1836:src/xeq.c     **** 	set_was_complex();
1837:src/xeq.c     **** }
1838:src/xeq.c     **** 
1839:src/xeq.c     **** static void do_crcl(int index, enum rarg op) {
1840:src/xeq.c     **** 	decNumber r1, r2;
1841:src/xeq.c     **** 
1842:src/xeq.c     **** 	if (op == RARG_CRCL) {
1843:src/xeq.c     **** 		REGISTER x, y;
1844:src/xeq.c     **** 		copyreg(&x, get_reg_n(index));
1845:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
1846:src/xeq.c     **** 		lift2_if_enabled();
1847:src/xeq.c     **** 		copyreg(StackBase, &x);
1848:src/xeq.c     **** 		copyreg(get_reg_n(regY_idx), &y);
1849:src/xeq.c     **** 	} else {
1850:src/xeq.c     **** 		if (is_intmode())
1851:src/xeq.c     **** 			bad_mode_error();
1852:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CRCL, index, &r1, &r2, 1))
1853:src/xeq.c     **** 			illegal(op);
1854:src/xeq.c     **** 		else {
1855:src/xeq.c     **** 			setlastXY();
1856:src/xeq.c     **** 			setXY(&r1, &r2);
1857:src/xeq.c     **** 		}
1858:src/xeq.c     **** 	}
1859:src/xeq.c     **** 	set_was_complex();
1860:src/xeq.c     **** }
1861:src/xeq.c     **** 
1862:src/xeq.c     **** void cmdcrcl(unsigned int arg, enum rarg op) {
1863:src/xeq.c     **** 	do_crcl(arg, op);
1864:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
ARM GAS  /tmp/ccqED0AM.s 			page 40


1865:src/xeq.c     **** 	CLEAR_POLAR_READY;
1866:src/xeq.c     **** #endif
1867:src/xeq.c     **** }
1868:src/xeq.c     **** 
1869:src/xeq.c     **** #ifdef INCLUDE_FLASH_RECALL
1870:src/xeq.c     **** void cmdflashcrcl(unsigned int arg, enum rarg op) {
1871:src/xeq.c     **** 	do_crcl(FLASH_REG_BASE + arg, op - RARG_FLCRCL + RARG_CRCL);
1872:src/xeq.c     **** }
1873:src/xeq.c     **** #endif
1874:src/xeq.c     **** 
1875:src/xeq.c     **** /*
1876:src/xeq.c     ****  *  "Alien" RCL commands to convert registers originally stored in a different format
1877:src/xeq.c     ****  */
1878:src/xeq.c     **** // RCL of an integer value
1879:src/xeq.c     **** void cmdircl(unsigned int arg, enum rarg op) {
1880:src/xeq.c     **** 	if (is_intmode())
1881:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
1882:src/xeq.c     **** 	else
1883:src/xeq.c     **** 		register_from_int(regX_idx, arg, 0);
1884:src/xeq.c     **** }
1885:src/xeq.c     **** 
1886:src/xeq.c     **** // RCL of a single or double precision real value
1887:src/xeq.c     **** void cmdrrcl(unsigned int arg, enum rarg op) {
1888:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
1889:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
1890:src/xeq.c     **** 
1891:src/xeq.c     **** 	if (rcl_dbl && arg >= regX_idx && arg <= regK_idx) {
1892:src/xeq.c     **** 		// dRCL is not valid for lettered registers
1893:src/xeq.c     **** 		report_err(ERR_RANGE);
1894:src/xeq.c     **** 		return;
1895:src/xeq.c     **** 	}
1896:src/xeq.c     **** 
1897:src/xeq.c     **** 	UState.mode_double = rcl_dbl; // Force reading in requested format
1898:src/xeq.c     **** 	if (is_intmode()) {
1899:src/xeq.c     **** 		int_from_register(regX_idx, arg);
1900:src/xeq.c     **** 		UState.mode_double = was_dbl;
1901:src/xeq.c     **** 	}
1902:src/xeq.c     **** 	else {
1903:src/xeq.c     **** 		decNumber x;
1904:src/xeq.c     **** 		getRegister(&x, arg);
1905:src/xeq.c     **** 
1906:src/xeq.c     **** 		UState.mode_double = was_dbl; // Force access in original mode
1907:src/xeq.c     **** 		setX(&x);
1908:src/xeq.c     **** 	}
1909:src/xeq.c     **** }
1910:src/xeq.c     **** 
1911:src/xeq.c     **** 
1912:src/xeq.c     **** /* SWAP x with the specified register
1913:src/xeq.c     ****  */
1914:src/xeq.c     **** void swap_reg(REGISTER *a, REGISTER *b) {
1915:src/xeq.c     **** 	REGISTER t;
1916:src/xeq.c     **** 
1917:src/xeq.c     **** 	copyreg(&t, a);
1918:src/xeq.c     **** 	copyreg(a, b);
1919:src/xeq.c     **** 	copyreg(b, &t);
1920:src/xeq.c     **** }
1921:src/xeq.c     **** 
ARM GAS  /tmp/ccqED0AM.s 			page 41


1922:src/xeq.c     **** void cmdswap(unsigned int arg, enum rarg op) {
1923:src/xeq.c     **** 	int idx;
1924:src/xeq.c     **** 
1925:src/xeq.c     **** 	if (op == RARG_CSWAPX)
1926:src/xeq.c     **** 		idx = regX_idx;
1927:src/xeq.c     **** 	else if (op == RARG_CSWAPZ)
1928:src/xeq.c     **** 		idx = regZ_idx;
1929:src/xeq.c     **** 	else
1930:src/xeq.c     **** 		idx = regX_idx + (int)(op - RARG_SWAPX);
1931:src/xeq.c     **** 
1932:src/xeq.c     **** 	swap_reg(get_reg_n(idx), get_reg_n(arg));
1933:src/xeq.c     **** 
1934:src/xeq.c     **** 	if (op >= RARG_CSWAPX) {
1935:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
1936:src/xeq.c     **** 		set_was_complex();
1937:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
1938:src/xeq.c     **** 	CLEAR_POLAR_READY;
1939:src/xeq.c     **** #endif
1940:src/xeq.c     **** 	}
1941:src/xeq.c     **** }
1942:src/xeq.c     **** 
1943:src/xeq.c     **** 
1944:src/xeq.c     **** /* View a specified register
1945:src/xeq.c     ****  */
1946:src/xeq.c     **** void cmdview(unsigned int arg, enum rarg op) {
1947:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
1948:src/xeq.c     **** 
1949:src/xeq.c     **** 	State2.wascomplex = cmplx;
1950:src/xeq.c     **** 	ShowRegister = arg;
1951:src/xeq.c     **** 	State2.disp_freeze = 0;
1952:src/xeq.c     **** 	display();
1953:src/xeq.c     **** 	State2.disp_freeze = cmplx || Running || arg != regX_idx;
1954:src/xeq.c     **** }
1955:src/xeq.c     **** 
1956:src/xeq.c     **** 
1957:src/xeq.c     **** /* Get the stack size */
1958:src/xeq.c     **** void get_stack_size(enum nilop op) {
1959:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
1960:src/xeq.c     **** }
1961:src/xeq.c     **** 
1962:src/xeq.c     **** void get_word_size(enum nilop op) {
1963:src/xeq.c     **** 	setX_int_sgn((int)word_size(), 0);
1964:src/xeq.c     **** }
1965:src/xeq.c     **** 
1966:src/xeq.c     **** void get_sign_mode(enum nilop op) {
1967:src/xeq.c     **** 	static const unsigned char modes[4] = {
1968:src/xeq.c     **** 		0x02,		// 2's complement
1969:src/xeq.c     **** 		0x01,		// 1's complement
1970:src/xeq.c     **** 		0x00,		// unsigned
1971:src/xeq.c     **** 		0x81		// sign and mantissa
1972:src/xeq.c     **** 	};
1973:src/xeq.c     **** 	const unsigned char v = modes[(int)int_mode()];
1974:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
1975:src/xeq.c     **** }
1976:src/xeq.c     **** 
1977:src/xeq.c     **** void get_base(enum nilop op) {
1978:src/xeq.c     **** 	setX_int_sgn((int)int_base(), 0);
ARM GAS  /tmp/ccqED0AM.s 			page 42


1979:src/xeq.c     **** }
1980:src/xeq.c     **** 
1981:src/xeq.c     **** #ifdef DM42
1982:src/xeq.c     ****  long int DM42_Ticker () {
1983:src/xeq.c     ****     long int f, t;
1984:src/xeq.c     ****     t = get_rtc_ticks();
1985:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
1986:src/xeq.c     ****     return f;
1987:src/xeq.c     ****  }
1988:src/xeq.c     **** #endif
1989:src/xeq.c     **** /* Get the current ticker value */
1990:src/xeq.c     **** void op_ticks(enum nilop op) {
1991:src/xeq.c     **** #if !defined(CONSOLE)
1992:src/xeq.c     ****     setX_int_sgn(Ticker, 0);
1993:src/xeq.c     **** #else 
1994:src/xeq.c     ****     struct timeval tv;
1995:src/xeq.c     ****     long long int t;
1996:src/xeq.c     ****     gettimeofday(&tv, NULL);
1997:src/xeq.c     ****     t = tv.tv_sec * 10 + tv.tv_usec / 100000;
1998:src/xeq.c     ****     setX_int_sgn(t, 0);
1999:src/xeq.c     **** #endif
2000:src/xeq.c     **** }
2001:src/xeq.c     **** 
2002:src/xeq.c     **** /* Display the battery voltage */
2003:src/xeq.c     **** void op_voltage(enum nilop op) {
2004:src/xeq.c     **** 	decNumber t, u;
2005:src/xeq.c     **** #ifdef REALBUILD
2006:src/xeq.c     **** 	unsigned long long int v = 19 + Voltage;
2007:src/xeq.c     **** #elif defined(DM42)
2008:src/xeq.c     **** 	int v = get_vbat();
2009:src/xeq.c     **** 	v = v / 100;
2010:src/xeq.c     **** #else
2011:src/xeq.c     **** 	unsigned long long int v = 32;
2012:src/xeq.c     **** #endif
2013:src/xeq.c     **** 
2014:src/xeq.c     **** 	if (is_intmode()) {
2015:src/xeq.c     **** 		setX_int_sgn(v, 0);
2016:src/xeq.c     **** 	} else {
2017:src/xeq.c     **** 		ullint_to_dn(&t, v);
2018:src/xeq.c     **** 		dn_mulpow10(&u, &t, -1);
2019:src/xeq.c     **** 		setX(&u);
2020:src/xeq.c     **** 	}
2021:src/xeq.c     **** }
2022:src/xeq.c     **** 
2023:src/xeq.c     **** /*
2024:src/xeq.c     ****  *  Commands to determine free memory
2025:src/xeq.c     ****  */
2026:src/xeq.c     **** int free_mem(void) {
2027:src/xeq.c     **** 	return RetStkSize + RetStkPtr;
2028:src/xeq.c     **** }
2029:src/xeq.c     **** 
2030:src/xeq.c     **** int free_flash(void) {
2031:src/xeq.c     **** 	return NUMPROG_FLASH_MAX - UserFlash.size;
2032:src/xeq.c     **** }
2033:src/xeq.c     **** 
2034:src/xeq.c     **** void get_mem(enum nilop op) {
2035:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
ARM GAS  /tmp/ccqED0AM.s 			page 43


2036:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
2037:src/xeq.c     **** 		 op == OP_FLASHQ ? free_flash() :
2038:src/xeq.c     **** 		 global_regs(),
2039:src/xeq.c     **** 		 0);
2040:src/xeq.c     **** }
2041:src/xeq.c     **** 
2042:src/xeq.c     **** 
2043:src/xeq.c     **** /* Check if a keystroke is pending in the buffer, if so return it to the specified
2044:src/xeq.c     ****  * register, if not skip the next step.
2045:src/xeq.c     ****  */
2046:src/xeq.c     **** void cmdkeyp(unsigned int arg, enum rarg op) {
2047:src/xeq.c     **** 	int cond = LastKey == 0;
2048:src/xeq.c     **** 	if (!cond) {
2049:src/xeq.c     **** 		int k = LastKey - 1;
2050:src/xeq.c     **** 		LastKey = 0;
2051:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
2052:src/xeq.c     **** 	}
2053:src/xeq.c     **** 	fin_tst(cond);
2054:src/xeq.c     **** }
2055:src/xeq.c     **** 
2056:src/xeq.c     **** /*
2057:src/xeq.c     ****  *  Get a key code from a register and translate it from row/colum to internal
2058:src/xeq.c     ****  *  Check for valid arguments
2059:src/xeq.c     ****  */
2060:src/xeq.c     **** static int get_keycode_from_reg(unsigned int n)
2061:src/xeq.c     **** {
2062:src/xeq.c     **** 	int sgn;
2063:src/xeq.c     **** 	const int c = row_column_to_keycode((int) get_reg_n_int_sgn((int) n, &sgn));
2064:src/xeq.c     **** 	if ( c < 0 )
2065:src/xeq.c     **** 		report_err(ERR_RANGE);
2066:src/xeq.c     **** 	return c;
2067:src/xeq.c     **** }
2068:src/xeq.c     **** 
2069:src/xeq.c     **** /*
2070:src/xeq.c     ****  *  Take a row/column key code and feed it to the keyboard buffer
2071:src/xeq.c     ****  *  This stops program execution first to make sure, the key is not
2072:src/xeq.c     ****  *  read in by KEY? again.
2073:src/xeq.c     ****  */
2074:src/xeq.c     **** void cmdputkey(unsigned int arg, enum rarg op)
2075:src/xeq.c     **** {
2076:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
2077:src/xeq.c     **** 
2078:src/xeq.c     **** 	if (c >= 0) {
2079:src/xeq.c     **** 		set_running_off();
2080:src/xeq.c     **** 		put_key(c);
2081:src/xeq.c     **** 	}
2082:src/xeq.c     **** }
2083:src/xeq.c     **** 
2084:src/xeq.c     **** /*
2085:src/xeq.c     ****  *  Return the type of the keycode in register n
2086:src/xeq.c     ****  *  returns 0-9 for digits, 10 for ., +/-, EEX, 11 for f,g,h, 12 for all other keys.
2087:src/xeq.c     ****  *  Invalid codes produce an error.
2088:src/xeq.c     ****  */
2089:src/xeq.c     **** void cmdkeytype(unsigned int arg, enum rarg op)
2090:src/xeq.c     **** {
2091:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
2092:src/xeq.c     **** 	if ( c >= 0 ) {
ARM GAS  /tmp/ccqED0AM.s 			page 44


2093:src/xeq.c     **** 		const char types[] = {
2094:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
2095:src/xeq.c     **** 			12, 12, 12, 11, 11, 11,
2096:src/xeq.c     **** 			12, 12, 10, 10, 12, 12,
2097:src/xeq.c     **** 			12,  7,  8,  9, 12, 12,
2098:src/xeq.c     **** 			12,  4,  5,  6, 12, 12,
2099:src/xeq.c     **** 			12,  1,  2,  3, 12, 12,
2100:src/xeq.c     **** 			12,  0, 10, 12, 12 };
2101:src/xeq.c     **** 		lift_if_enabled();
2102:src/xeq.c     **** 		setX_int_sgn(types[c], 0);
2103:src/xeq.c     **** 	}
2104:src/xeq.c     **** }
2105:src/xeq.c     **** 
2106:src/xeq.c     **** 
2107:src/xeq.c     **** /* Check which operating mode we're in -- integer or real -- they both
2108:src/xeq.c     ****  * vector through this routine.
2109:src/xeq.c     ****  */
2110:src/xeq.c     **** void check_mode(enum nilop op) {
2111:src/xeq.c     **** 	const int intmode = is_intmode() ? 1 : 0;
2112:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
2113:src/xeq.c     **** 
2114:src/xeq.c     **** 	fin_tst(intmode == desired);
2115:src/xeq.c     **** }
2116:src/xeq.c     **** 
2117:src/xeq.c     **** 
2118:src/xeq.c     **** /* Check if DBLON is active
2119:src/xeq.c     ****  */
2120:src/xeq.c     **** void check_dblmode(enum nilop op) {
2121:src/xeq.c     **** 	fin_tst(is_dblmode());
2122:src/xeq.c     **** }
2123:src/xeq.c     **** 
2124:src/xeq.c     **** void op_query_xtal(enum nilop op) {
2125:src/xeq.c     **** 	fin_tst(Xtal);
2126:src/xeq.c     **** }
2127:src/xeq.c     **** 
2128:src/xeq.c     **** void op_query_print(enum nilop op) {
2129:src/xeq.c     **** #ifdef INFRARED
2130:src/xeq.c     **** 	fin_tst(1);
2131:src/xeq.c     **** #else
2132:src/xeq.c     **** 	fin_tst(0);
2133:src/xeq.c     **** #endif
2134:src/xeq.c     **** }
2135:src/xeq.c     **** 
2136:src/xeq.c     **** /* Save and restore the entire stack to sequential registers */
2137:src/xeq.c     **** static int check_stack_overlap(unsigned int arg) {
2138:src/xeq.c     **** 	const int n = stack_size();
2139:src/xeq.c     **** 
2140:src/xeq.c     **** 	if (arg + n <= global_regs() || arg >= NUMREG) {
2141:src/xeq.c     **** 		return n;
2142:src/xeq.c     **** 	}
2143:src/xeq.c     **** 	report_err(ERR_STK_CLASH);
2144:src/xeq.c     **** 	return 0;
2145:src/xeq.c     **** }
2146:src/xeq.c     **** 
2147:src/xeq.c     **** void cmdstostk(unsigned int arg, enum rarg op) {
2148:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
2149:src/xeq.c     **** 
ARM GAS  /tmp/ccqED0AM.s 			page 45


2150:src/xeq.c     **** 	for (i=0; i<n; i++)
2151:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
2152:src/xeq.c     **** }
2153:src/xeq.c     **** 
2154:src/xeq.c     **** void cmdrclstk(unsigned int arg, enum rarg op) {
2155:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
2156:src/xeq.c     **** 
2157:src/xeq.c     **** 	for (i=0; i<n; i++)
2158:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
2159:src/xeq.c     **** }
2160:src/xeq.c     **** 
2161:src/xeq.c     **** 
2162:src/xeq.c     **** /*
2163:src/xeq.c     ****  *  Move up the return stack, skipping any local variables
2164:src/xeq.c     ****  */
2165:src/xeq.c     **** static void retstk_up(void)
2166:src/xeq.c     **** {
 309              		.loc 1 2166 1 is_stmt 1 view -0
 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 0
 312              		@ frame_needed = 0, uses_anonymous_args = 0
 313              		@ link register save eliminated.
2167:src/xeq.c     **** 	if (RetStkPtr < 0) {
 314              		.loc 1 2167 2 view .LVU95
 315              		.loc 1 2167 6 is_stmt 0 view .LVU96
 316 0000 1D4B     		ldr	r3, .L39
2166:src/xeq.c     **** 	if (RetStkPtr < 0) {
 317              		.loc 1 2166 1 view .LVU97
 318 0002 F0B4     		push	{r4, r5, r6, r7}
 319              		.cfi_def_cfa_offset 16
 320              		.cfi_offset 4, -16
 321              		.cfi_offset 5, -12
 322              		.cfi_offset 6, -8
 323              		.cfi_offset 7, -4
 324              		.loc 1 2167 6 view .LVU98
 325 0004 1C68     		ldr	r4, [r3]
 326 0006 B4F9E227 		ldrsh	r2, [r4, #2018]
 327              		.loc 1 2167 5 view .LVU99
 328 000a 002A     		cmp	r2, #0
 329 000c 01DB     		blt	.L37
 330              	.L27:
2168:src/xeq.c     **** 		int sp = RetStkPtr++;
2169:src/xeq.c     **** 		unsigned int s = RetStk[sp++];
2170:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
2171:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
2172:src/xeq.c     **** 			RetStkPtr = sp;
2173:src/xeq.c     **** 			// Re-adjust the LocalRegs pointer
2174:src/xeq.c     **** 			LocalRegs = 0;
2175:src/xeq.c     **** 			while (sp < 0) {
2176:src/xeq.c     **** 				s = RetStk[sp];
2177:src/xeq.c     **** 				if (isLOCAL(s)) {
2178:src/xeq.c     **** 					LocalRegs = sp;
2179:src/xeq.c     **** 					break;
2180:src/xeq.c     **** 				}
2181:src/xeq.c     **** 				++sp;
2182:src/xeq.c     **** 				if (isHIDDEN(s))
2183:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
ARM GAS  /tmp/ccqED0AM.s 			page 46


2184:src/xeq.c     **** 			}
2185:src/xeq.c     **** 		}
2186:src/xeq.c     **** 	}
2187:src/xeq.c     **** }
 331              		.loc 1 2187 1 view .LVU100
 332 000e F0BC     		pop	{r4, r5, r6, r7}
 333              		.cfi_remember_state
 334              		.cfi_restore 7
 335              		.cfi_restore 6
 336              		.cfi_restore 5
 337              		.cfi_restore 4
 338              		.cfi_def_cfa_offset 0
 339 0010 7047     		bx	lr
 340              	.L37:
 341              		.cfi_restore_state
 342              	.LBB1329:
2168:src/xeq.c     **** 		int sp = RetStkPtr++;
 343              		.loc 1 2168 3 is_stmt 1 view .LVU101
2169:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 344              		.loc 1 2169 26 is_stmt 0 view .LVU102
 345 0012 1A4B     		ldr	r3, .L39+4
2168:src/xeq.c     **** 		int sp = RetStkPtr++;
 346              		.loc 1 2168 21 view .LVU103
 347 0014 511C     		adds	r1, r2, #1
2169:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 348              		.loc 1 2169 26 view .LVU104
 349 0016 1D68     		ldr	r5, [r3]
2168:src/xeq.c     **** 		int sp = RetStkPtr++;
 350              		.loc 1 2168 21 view .LVU105
 351 0018 A4F8E217 		strh	r1, [r4, #2018]	@ movhi
 352              	.LVL26:
2169:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 353              		.loc 1 2169 3 is_stmt 1 view .LVU106
2169:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 354              		.loc 1 2169 26 is_stmt 0 view .LVU107
 355 001c 35F81230 		ldrh	r3, [r5, r2, lsl #1]
 356              	.LVL27:
2170:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
 357              		.loc 1 2170 3 is_stmt 1 view .LVU108
2170:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
 358              		.loc 1 2170 7 is_stmt 0 view .LVU109
 359 0020 1A0B     		lsrs	r2, r3, #12
 360              	.LVL28:
2170:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
 361              		.loc 1 2170 6 view .LVU110
 362 0022 22F00202 		bic	r2, r2, #2
 363 0026 012A     		cmp	r2, #1
 364 0028 F1D1     		bne	.L27
2171:src/xeq.c     **** 			RetStkPtr = sp;
 365              		.loc 1 2171 4 is_stmt 1 view .LVU111
2174:src/xeq.c     **** 			while (sp < 0) {
 366              		.loc 1 2174 14 is_stmt 0 view .LVU112
 367 002a B4F8DE67 		ldrh	r6, [r4, #2014]
2171:src/xeq.c     **** 			RetStkPtr = sp;
 368              		.loc 1 2171 10 view .LVU113
 369 002e C3F30B03 		ubfx	r3, r3, #0, #12
 370              	.LVL29:
ARM GAS  /tmp/ccqED0AM.s 			page 47


2171:src/xeq.c     **** 			RetStkPtr = sp;
 371              		.loc 1 2171 7 view .LVU114
 372 0032 0B44     		add	r3, r3, r1
 373              	.LVL30:
2172:src/xeq.c     **** 			// Re-adjust the LocalRegs pointer
 374              		.loc 1 2172 4 is_stmt 1 view .LVU115
2174:src/xeq.c     **** 			while (sp < 0) {
 375              		.loc 1 2174 14 is_stmt 0 view .LVU116
 376 0034 6FF34F16 		bfc	r6, #5, #11
 377              	.LVL31:
2172:src/xeq.c     **** 			// Re-adjust the LocalRegs pointer
 378              		.loc 1 2172 14 view .LVU117
 379 0038 A4F8E237 		strh	r3, [r4, #2018]	@ movhi
 380              	.LVL32:
2174:src/xeq.c     **** 			while (sp < 0) {
 381              		.loc 1 2174 4 is_stmt 1 view .LVU118
2174:src/xeq.c     **** 			while (sp < 0) {
 382              		.loc 1 2174 14 is_stmt 0 view .LVU119
 383 003c A4F8DE67 		strh	r6, [r4, #2014]	@ movhi
2175:src/xeq.c     **** 				s = RetStk[sp];
 384              		.loc 1 2175 4 is_stmt 1 view .LVU120
 385 0040 6FF00047 		mvn	r7, #-2147483648
 386              	.L31:
2175:src/xeq.c     **** 				s = RetStk[sp];
 387              		.loc 1 2175 4 is_stmt 0 view .LVU121
 388 0044 D919     		adds	r1, r3, r7
 389 0046 05EB4101 		add	r1, r5, r1, lsl #1
 390 004a 03E0     		b	.L33
 391              	.LVL33:
 392              	.L32:
2182:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
 393              		.loc 1 2182 8 view .LVU122
 394 004c 032A     		cmp	r2, #3
2181:src/xeq.c     **** 				if (isHIDDEN(s))
 395              		.loc 1 2181 5 view .LVU123
 396 004e 03F10103 		add	r3, r3, #1
 397              	.LVL34:
2182:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
 398              		.loc 1 2182 5 is_stmt 1 view .LVU124
2182:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
 399              		.loc 1 2182 8 is_stmt 0 view .LVU125
 400 0052 0CD0     		beq	.L38
 401              	.LVL35:
 402              	.L33:
2176:src/xeq.c     **** 				if (isLOCAL(s)) {
 403              		.loc 1 2176 5 is_stmt 1 view .LVU126
2181:src/xeq.c     **** 				if (isHIDDEN(s))
 404              		.loc 1 2181 5 view .LVU127
2175:src/xeq.c     **** 				s = RetStk[sp];
 405              		.loc 1 2175 10 view .LVU128
 406 0054 002B     		cmp	r3, #0
 407 0056 DADA     		bge	.L27
2176:src/xeq.c     **** 				if (isLOCAL(s)) {
 408              		.loc 1 2176 15 is_stmt 0 view .LVU129
 409 0058 31F8020F 		ldrh	r0, [r1, #2]!
 410              	.LVL36:
2177:src/xeq.c     **** 					LocalRegs = sp;
ARM GAS  /tmp/ccqED0AM.s 			page 48


 411              		.loc 1 2177 5 is_stmt 1 view .LVU130
2177:src/xeq.c     **** 					LocalRegs = sp;
 412              		.loc 1 2177 9 is_stmt 0 view .LVU131
 413 005c 020B     		lsrs	r2, r0, #12
2177:src/xeq.c     **** 					LocalRegs = sp;
 414              		.loc 1 2177 8 view .LVU132
 415 005e 012A     		cmp	r2, #1
 416 0060 F4D1     		bne	.L32
2178:src/xeq.c     **** 					break;
 417              		.loc 1 2178 6 is_stmt 1 view .LVU133
2178:src/xeq.c     **** 					break;
 418              		.loc 1 2178 16 is_stmt 0 view .LVU134
 419 0062 63F34F16 		bfi	r6, r3, #5, #11
 420              	.LVL37:
2178:src/xeq.c     **** 					break;
 421              		.loc 1 2178 16 view .LVU135
 422 0066 A4F8DE67 		strh	r6, [r4, #2014]	@ movhi
2179:src/xeq.c     **** 				}
 423              		.loc 1 2179 6 is_stmt 1 view .LVU136
 424              	.LBE1329:
 425              		.loc 1 2187 1 is_stmt 0 view .LVU137
 426 006a F0BC     		pop	{r4, r5, r6, r7}
 427              		.cfi_remember_state
 428              		.cfi_restore 7
 429              		.cfi_restore 6
 430              		.cfi_restore 5
 431              		.cfi_restore 4
 432              		.cfi_def_cfa_offset 0
 433 006c 7047     		bx	lr
 434              	.LVL38:
 435              	.L38:
 436              		.cfi_restore_state
 437              	.LBB1330:
2183:src/xeq.c     **** 			}
 438              		.loc 1 2183 6 is_stmt 1 view .LVU138
2183:src/xeq.c     **** 			}
 439              		.loc 1 2183 12 is_stmt 0 view .LVU139
 440 006e C0F30B00 		ubfx	r0, r0, #0, #12
 441              	.LVL39:
2183:src/xeq.c     **** 			}
 442              		.loc 1 2183 9 view .LVU140
 443 0072 0344     		add	r3, r3, r0
 444              	.LVL40:
2183:src/xeq.c     **** 			}
 445              		.loc 1 2183 9 view .LVU141
 446 0074 E6E7     		b	.L31
 447              	.L40:
 448 0076 00BF     		.align	2
 449              	.L39:
 450 0078 00000000 		.word	main_ram
 451 007c 00000000 		.word	RetStk
 452              	.LBE1330:
 453              		.cfi_endproc
 454              	.LFE150:
 456              		.section	.text.flag_word,"ax",%progbits
 457              		.align	1
 458              		.p2align 2,,3
ARM GAS  /tmp/ccqED0AM.s 			page 49


 459              		.syntax unified
 460              		.thumb
 461              		.thumb_func
 462              		.fpu fpv4-sp-d16
 464              	flag_word:
 465              	.LVL41:
 466              	.LFB198:
2188:src/xeq.c     **** 
2189:src/xeq.c     **** 
2190:src/xeq.c     **** /* Search from the given position for the specified numeric label.
2191:src/xeq.c     ****  */
2192:src/xeq.c     **** unsigned int find_opcode_from(unsigned int pc, const opcode l, const int flags) {
2193:src/xeq.c     **** 	unsigned short int top;
2194:src/xeq.c     **** 	int count;
2195:src/xeq.c     **** 	const int endp = flags & FIND_OP_ENDS;
2196:src/xeq.c     **** 	const int errp = flags & FIND_OP_ERROR;
2197:src/xeq.c     **** 
2198:src/xeq.c     **** 	count = 1 + find_section_bounds(pc, endp, &top);
2199:src/xeq.c     **** 	count -= top;
2200:src/xeq.c     **** 	while (count--) {
2201:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
2202:src/xeq.c     **** 		// If we don't find the label, we may search a little too far if many double word
2203:src/xeq.c     **** 		// instructions are in the code, but this doesn't do any harm.
2204:src/xeq.c     **** 		if (getprog(pc) == l)
2205:src/xeq.c     **** 			return pc;
2206:src/xeq.c     **** 		pc = do_inc(pc, endp);
2207:src/xeq.c     **** 	}
2208:src/xeq.c     **** 	if (errp)
2209:src/xeq.c     **** 		report_err(ERR_NO_LBL);
2210:src/xeq.c     **** 	return 0;
2211:src/xeq.c     **** }
2212:src/xeq.c     **** 
2213:src/xeq.c     **** 
2214:src/xeq.c     **** unsigned int find_label_from(unsigned int pc, unsigned int arg, int flags) {
2215:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
2216:src/xeq.c     **** }
2217:src/xeq.c     **** 
2218:src/xeq.c     **** 
2219:src/xeq.c     **** 
2220:src/xeq.c     **** /* Handle a GTO/GSB instruction
2221:src/xeq.c     ****  */
2222:src/xeq.c     **** static void gsbgto(unsigned int pc, int gsb, unsigned int oldpc) {
2223:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
2224:src/xeq.c     **** 	raw_set_pc(pc);
2225:src/xeq.c     **** 	if (gsb) {
2226:src/xeq.c     **** 		if (!Running && !XromRunning) {
2227:src/xeq.c     **** 			// XEQ or hot key from keyboard
2228:src/xeq.c     **** 			clrretstk();
2229:src/xeq.c     **** 			set_running_on();
2230:src/xeq.c     **** 			if (! isXROM(pc) && ProgBegin != old_begin)
2231:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
2232:src/xeq.c     **** 				oldpc = pc;
2233:src/xeq.c     **** 		}
2234:src/xeq.c     **** 		if (-RetStkPtr >= (XromFlags.xIN ? XROM_RET_STACK_SIZE : RetStkSize)) {
2235:src/xeq.c     **** 			// Stack is full
2236:src/xeq.c     **** 			report_err(ERR_RAM_FULL);
2237:src/xeq.c     **** 			// clrretstk();
ARM GAS  /tmp/ccqED0AM.s 			page 50


2238:src/xeq.c     **** 		}
2239:src/xeq.c     **** 		else {
2240:src/xeq.c     **** 			// Push PC on return stack
2241:src/xeq.c     **** 			RetStk[--RetStkPtr] = oldpc;
2242:src/xeq.c     **** 		}
2243:src/xeq.c     **** 	}
2244:src/xeq.c     **** }
2245:src/xeq.c     **** 
2246:src/xeq.c     **** // Handle a RTN
2247:src/xeq.c     **** static void do_rtn(int plus1) {
2248:src/xeq.c     **** 	unsigned short pc;
2249:src/xeq.c     **** 
2250:src/xeq.c     **** 	if (RetStkPtr >= 0) {
2251:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
2252:src/xeq.c     **** 		clrretstk();
2253:src/xeq.c     **** 		raw_set_pc(ProgBegin);
2254:src/xeq.c     **** 	}
2255:src/xeq.c     **** 	else {
2256:src/xeq.c     **** 		// Normal RTN within program
2257:src/xeq.c     **** 		// Pop any LOCALS off the stack, increment sp
2258:src/xeq.c     **** 		retstk_up();
2259:src/xeq.c     **** 		pc = RetStk[RetStkPtr - 1];
2260:src/xeq.c     **** 		raw_set_pc(pc);
2261:src/xeq.c     **** 		// If RTN+1 inc PC unless a POPUSR command or the program end would be skipped
2262:src/xeq.c     **** 		if (plus1 && getprog(pc) != (OP_NIL | OP_POPUSR))
2263:src/xeq.c     **** 			if (incpc())
2264:src/xeq.c     **** 				decpc();
2265:src/xeq.c     **** 	}
2266:src/xeq.c     **** 	if (RetStkPtr == 0) {
2267:src/xeq.c     **** 		// RTN with empty stack stops
2268:src/xeq.c     **** 		set_running_off();
2269:src/xeq.c     **** 	}
2270:src/xeq.c     **** }
2271:src/xeq.c     **** 
2272:src/xeq.c     **** // RTN and RTN+1
2273:src/xeq.c     **** void op_rtn(enum nilop op) {
2274:src/xeq.c     **** 	if (! Running && ! XromRunning) {
2275:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
2276:src/xeq.c     **** 		clrretstk_pc();
2277:src/xeq.c     **** 	}
2278:src/xeq.c     **** 	else
2279:src/xeq.c     **** 		do_rtn(op == OP_RTNp1 ? 1 : 0);
2280:src/xeq.c     **** }
2281:src/xeq.c     **** 
2282:src/xeq.c     **** 
2283:src/xeq.c     **** // Called by XEQ, GTO and CAT browser
2284:src/xeq.c     **** void cmdgtocommon(int gsb, unsigned int pc) {
2285:src/xeq.c     **** 	if (pc == 0)
2286:src/xeq.c     **** 		set_running_off();
2287:src/xeq.c     **** 	else
2288:src/xeq.c     **** 		gsbgto(pc, gsb, state_pc());
2289:src/xeq.c     **** }
2290:src/xeq.c     **** 
2291:src/xeq.c     **** 
2292:src/xeq.c     **** // Common part of XEQUSR and XEQ'...' from XROM
2293:src/xeq.c     **** // Command pushes 4 values on stack, needs to be followed by POPUSR
2294:src/xeq.c     **** static void usergsb_common(unsigned short int target) {
ARM GAS  /tmp/ccqED0AM.s 			page 51


2295:src/xeq.c     **** 	const unsigned int pc = state_pc();
2296:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
2297:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
2298:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
2299:src/xeq.c     **** 	gsbgto(target, 1, pc);		     // Push return address, transfer control
2300:src/xeq.c     **** 
2301:src/xeq.c     **** 	XromUserPc = 0;			     // Hide information irrelevant to user code
2302:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
2303:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
2304:src/xeq.c     **** 	if (! Running)
2305:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
2306:src/xeq.c     **** 	watchdog();			     // Just for safety. Shouldn't be needed.
2307:src/xeq.c     **** }
2308:src/xeq.c     **** 
2309:src/xeq.c     **** 
2310:src/xeq.c     **** // XEQUSR
2311:src/xeq.c     **** // Command fills the stack and calls the user's code.
2312:src/xeq.c     **** // Needs to be followed by POPUSR
2313:src/xeq.c     **** void do_usergsb(enum nilop op) {
2314:src/xeq.c     **** 	usergsb_common(XromUserPc);
2315:src/xeq.c     ****         fill(OP_FILL);
2316:src/xeq.c     **** }
2317:src/xeq.c     **** 
2318:src/xeq.c     **** 
2319:src/xeq.c     **** // POPUSR
2320:src/xeq.c     **** void op_popusr(enum nilop op) {
2321:src/xeq.c     **** 	UserLocalRegs = RetStk[RetStkPtr++]; // Previous local registers
2322:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
2323:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
2324:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
2325:src/xeq.c     **** }
2326:src/xeq.c     **** 
2327:src/xeq.c     **** /* Tests if the user program is at the top level */
2328:src/xeq.c     **** void isTop(enum nilop op) {
2329:src/xeq.c     **** 	int top = 0;
2330:src/xeq.c     **** 
2331:src/xeq.c     **** 	if (Running) {
2332:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
2333:src/xeq.c     **** 	}
2334:src/xeq.c     **** 	fin_tst(top);
2335:src/xeq.c     **** }
2336:src/xeq.c     **** 
2337:src/xeq.c     **** 
2338:src/xeq.c     **** // LBL?
2339:src/xeq.c     **** void cmdlblp(unsigned int arg, enum rarg op) {
2340:src/xeq.c     **** 	fin_tst(find_label_from(state_pc(), arg, FIND_OP_ENDS) != 0);
2341:src/xeq.c     **** }
2342:src/xeq.c     **** 
2343:src/xeq.c     **** 
2344:src/xeq.c     **** void cmdgto(unsigned int arg, enum rarg op) {
2345:src/xeq.c     **** 	unsigned int lbl;
2346:src/xeq.c     **** 	if (is_xrom())
2347:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
2348:src/xeq.c     **** 	else
2349:src/xeq.c     **** 		lbl = find_label_from(state_pc(), arg, FIND_OP_ERROR | FIND_OP_ENDS);
2350:src/xeq.c     **** 	cmdgtocommon(op != RARG_GTO, lbl);
2351:src/xeq.c     **** }
ARM GAS  /tmp/ccqED0AM.s 			page 52


2352:src/xeq.c     **** 
2353:src/xeq.c     **** unsigned int findmultilbl(const opcode o, int flags) {
2354:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
2355:src/xeq.c     **** 	unsigned int lbl;
2356:src/xeq.c     **** 
2357:src/xeq.c     **** 	lbl = find_opcode_from(0, dest, 0);					// RAM
2358:src/xeq.c     **** 	if (lbl == 0)
2359:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_LIBRARY), dest, 0);	// Library
2360:src/xeq.c     **** 	if (lbl == 0)
2361:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_BACKUP), dest, 0);	// Backup
2362:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
2363:src/xeq.c     **** 		report_err(ERR_NO_LBL);
2364:src/xeq.c     **** 	return lbl;
2365:src/xeq.c     **** }
2366:src/xeq.c     **** 
2367:src/xeq.c     **** // LBL?'...'
2368:src/xeq.c     **** void cmdmultilblp(const opcode o, enum multiops mopr) {
2369:src/xeq.c     **** 	fin_tst(findmultilbl(o, 0) != 0);
2370:src/xeq.c     **** }
2371:src/xeq.c     **** 
2372:src/xeq.c     **** void cmdmultigto(const opcode o, enum multiops mopr) {
2373:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
2374:src/xeq.c     **** 		// In XROM the command behaves differently!
2375:src/xeq.c     **** 		unsigned short int target = findmultilbl(o, 0);
2376:src/xeq.c     **** 		if (target != 0)
2377:src/xeq.c     **** 			usergsb_common(target); 
2378:src/xeq.c     **** 		else
2379:src/xeq.c     **** 			incpc();
2380:src/xeq.c     **** 	}
2381:src/xeq.c     **** 	else {
2382:src/xeq.c     **** 		cmdgtocommon(mopr != DBL_GTO, findmultilbl(o, FIND_OP_ERROR));
2383:src/xeq.c     **** 	}
2384:src/xeq.c     **** }
2385:src/xeq.c     **** 
2386:src/xeq.c     **** void multiumenu(const opcode o, enum multiops mopr) {
2387:src/xeq.c     ****   opcode op = (o & 0xFFFFF0FF) + ((DBL_LBL) << DBL_SHIFT); // change opcode to LBL
2388:src/xeq.c     ****   build_user_menu_from_program(op);
2389:src/xeq.c     ****   set_menu (M_User);
2390:src/xeq.c     ****   display_current_menu ();
2391:src/xeq.c     **** }
2392:src/xeq.c     **** 
2393:src/xeq.c     **** static void branchtoalpha(int is_gsb, char buf[]) {
2394:src/xeq.c     **** 	unsigned int op;
2395:src/xeq.c     **** 
2396:src/xeq.c     **** 	op = OP_DBL + (DBL_LBL << DBL_SHIFT);
2397:src/xeq.c     **** 	op |= buf[0] & 0xff;
2398:src/xeq.c     **** 	op |= (buf[1] & 0xff) << 16;
2399:src/xeq.c     **** 	op |= (buf[2] & 0xff) << 24;
2400:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
2401:src/xeq.c     **** }
2402:src/xeq.c     **** 
2403:src/xeq.c     **** void cmdalphagto(unsigned int arg, enum rarg op) {
2404:src/xeq.c     **** 	char buf[14];
2405:src/xeq.c     **** 
2406:src/xeq.c     **** 	xset(buf, '\0', sizeof(buf));
2407:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
2408:src/xeq.c     **** }
ARM GAS  /tmp/ccqED0AM.s 			page 53


2409:src/xeq.c     **** 
2410:src/xeq.c     **** static void do_branchalpha(int is_gsb) {
2411:src/xeq.c     **** 	char buf[4];
2412:src/xeq.c     **** 
2413:src/xeq.c     **** 	xcopy(buf, Alpha, 3);
2414:src/xeq.c     **** 	buf[3] = '\0';
2415:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
2416:src/xeq.c     **** }
2417:src/xeq.c     **** 
2418:src/xeq.c     **** void op_gtoalpha(enum nilop op) {
2419:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
2420:src/xeq.c     **** }
2421:src/xeq.c     **** 
2422:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
2423:src/xeq.c     **** int get_dispmode_digs(int *pdigs)
2424:src/xeq.c     **** {
2425:src/xeq.c     **** 	int dispmode = UState.dispmode;
2426:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
2427:src/xeq.c     **** 
2428:src/xeq.c     **** 	if (dispdigs >= 12) {
2429:src/xeq.c     **** 		dispdigs -= 12;
2430:src/xeq.c     **** 		dispmode += 4;
2431:src/xeq.c     **** 		if (dispmode >= 6) {
2432:src/xeq.c     **** 			dispmode -= 2;
2433:src/xeq.c     **** 			dispdigs += 4;
2434:src/xeq.c     **** 		}
2435:src/xeq.c     **** 	}
2436:src/xeq.c     **** 	*pdigs = dispdigs;
2437:src/xeq.c     **** 	return dispmode;
2438:src/xeq.c     **** }
2439:src/xeq.c     **** 
2440:src/xeq.c     **** void set_dispmode_digs(int dispmode, int dispdigs)
2441:src/xeq.c     **** {
2442:src/xeq.c     **** 	if (dispmode >= 4) {
2443:src/xeq.c     **** 		dispmode -= 4;
2444:src/xeq.c     **** 		dispdigs += 12;
2445:src/xeq.c     **** 		if (dispdigs >= 16) {
2446:src/xeq.c     **** 			dispdigs -= 4;
2447:src/xeq.c     **** 			dispmode += 2;
2448:src/xeq.c     **** 		}
2449:src/xeq.c     **** 	}
2450:src/xeq.c     **** 	UState.dispmode = dispmode;
2451:src/xeq.c     **** 	UState.dispdigs = dispdigs;
2452:src/xeq.c     **** }
2453:src/xeq.c     **** #endif
2454:src/xeq.c     **** 
2455:src/xeq.c     **** void cmddisp(unsigned int arg, enum rarg op) {
2456:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
2457:src/xeq.c     **** 	int dispdigs;
2458:src/xeq.c     **** 	int dispmode = get_dispmode_digs(&dispdigs);
2459:src/xeq.c     **** #ifdef DM42
2460:src/xeq.c     **** 	switch (op) {
2461:src/xeq.c     **** 	case RARG_STD:
2462:src/xeq.c     **** 	  dispmode = MODE_STD;
2463:src/xeq.c     **** 	  break;
2464:src/xeq.c     **** 	case RARG_FIX:
2465:src/xeq.c     **** 	  dispmode = MODE_FIX;
ARM GAS  /tmp/ccqED0AM.s 			page 54


2466:src/xeq.c     **** 	  break;
2467:src/xeq.c     **** 	case RARG_SCI:
2468:src/xeq.c     **** 	  dispmode = MODE_SCI;
2469:src/xeq.c     **** 	  break;
2470:src/xeq.c     **** 	case RARG_ENG:
2471:src/xeq.c     **** 	  dispmode = MODE_ENG;
2472:src/xeq.c     **** 	  break;
2473:src/xeq.c     **** 	case RARG_SIG:
2474:src/xeq.c     **** 	  dispmode = MODE_SIG;
2475:src/xeq.c     **** 	  break;
2476:src/xeq.c     **** 	case RARG_SIG0:
2477:src/xeq.c     **** 	  dispmode = MODE_SIG0;
2478:src/xeq.c     **** 	  break;
2479:src/xeq.c     **** 	default:;
2480:src/xeq.c     **** 	}
2481:src/xeq.c     **** 	if ((dispmode == MODE_SIG || dispmode == MODE_SIG0) && arg >= 8) {
2482:src/xeq.c     **** 	  report_err(ERR_RANGE);
2483:src/xeq.c     **** 	  return;
2484:src/xeq.c     **** 	}
2485:src/xeq.c     **** #else	
2486:src/xeq.c     **** 	if (op != RARG_DISP)
2487:src/xeq.c     **** 		dispmode = (op - RARG_STD) + MODE_STD;
2488:src/xeq.c     **** 	else if ((dispmode == MODE_SIG || dispmode == MODE_SIG0) && arg >= 8) {
2489:src/xeq.c     **** 		report_err(ERR_RANGE);
2490:src/xeq.c     **** 		return;
2491:src/xeq.c     **** 	}
2492:src/xeq.c     **** #endif
2493:src/xeq.c     **** 	set_dispmode_digs(dispmode, arg);
2494:src/xeq.c     **** #else
2495:src/xeq.c     **** 	UState.dispdigs = arg;
2496:src/xeq.c     **** 	if (op != RARG_DISP)
2497:src/xeq.c     **** 		UState.dispmode = (op - RARG_STD) + MODE_STD;
2498:src/xeq.c     **** #endif
2499:src/xeq.c     **** 	op_float(OP_FLOAT);
2500:src/xeq.c     **** }
2501:src/xeq.c     **** 
2502:src/xeq.c     **** 
2503:src/xeq.c     **** /* Metric / Imperial conversion code */
2504:src/xeq.c     **** decNumber *convC2F(decNumber *r, const decNumber *x) {
2505:src/xeq.c     **** 	decNumber s;
2506:src/xeq.c     **** 
2507:src/xeq.c     **** 	dn_multiply(&s, x, &const_9on5);
2508:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
2509:src/xeq.c     **** }
2510:src/xeq.c     **** 
2511:src/xeq.c     **** decNumber *convF2C(decNumber *r, const decNumber *x) {
2512:src/xeq.c     **** 	decNumber s;
2513:src/xeq.c     **** 
2514:src/xeq.c     **** 	dn_subtract(&s, x, &const_32);
2515:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
2516:src/xeq.c     **** }
2517:src/xeq.c     **** 
2518:src/xeq.c     **** decNumber *convDB2AR(decNumber *r, const decNumber *x) {
2519:src/xeq.c     **** 	decNumber t;
2520:src/xeq.c     **** 	dn_multiply(&t, x, &const_0_05);
2521:src/xeq.c     **** 	return decNumberPow10(r, &t);
2522:src/xeq.c     **** }
ARM GAS  /tmp/ccqED0AM.s 			page 55


2523:src/xeq.c     **** 
2524:src/xeq.c     **** decNumber *convAR2DB(decNumber *r, const decNumber *x) {
2525:src/xeq.c     **** 	decNumber t;
2526:src/xeq.c     **** 	dn_log10(&t, x);
2527:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
2528:src/xeq.c     **** }
2529:src/xeq.c     **** 
2530:src/xeq.c     **** decNumber *convDB2PR(decNumber *r, const decNumber *x) {
2531:src/xeq.c     **** 	decNumber t;
2532:src/xeq.c     **** 	dn_mulpow10(&t, x, -1);
2533:src/xeq.c     **** 	return decNumberPow10(r, &t);
2534:src/xeq.c     **** }
2535:src/xeq.c     **** 
2536:src/xeq.c     **** decNumber *convPR2DB(decNumber *r, const decNumber *x) {
2537:src/xeq.c     **** 	decNumber t;
2538:src/xeq.c     **** 	dn_log10(&t, x);
2539:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
2540:src/xeq.c     **** }
2541:src/xeq.c     **** 
2542:src/xeq.c     **** /* Scale conversions */
2543:src/xeq.c     **** void do_conv(decNumber *r, unsigned int arg, const decNumber *x) {
2544:src/xeq.c     **** 	decNumber m;
2545:src/xeq.c     **** 	const unsigned int conv = arg / 2;
2546:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
2547:src/xeq.c     **** 
2548:src/xeq.c     **** 	if (conv > NUM_CONSTS_CONV) {
2549:src/xeq.c     **** 		decNumberCopy(r, x);
2550:src/xeq.c     **** 		return;
2551:src/xeq.c     **** 	}
2552:src/xeq.c     **** 
2553:src/xeq.c     **** 	decimal64ToNumber(&CONSTANT_CONV(conv), &m);
2554:src/xeq.c     **** 
2555:src/xeq.c     **** 	if (dirn == 0)		// metric to imperial
2556:src/xeq.c     **** 		dn_divide(r, x, &m);
2557:src/xeq.c     **** 	else			// imperial to metric
2558:src/xeq.c     **** 		dn_multiply(r, x, &m);
2559:src/xeq.c     **** }
2560:src/xeq.c     **** 
2561:src/xeq.c     **** void cmdconv(unsigned int arg, enum rarg op) {
2562:src/xeq.c     **** 	decNumber x, r;
2563:src/xeq.c     **** 
2564:src/xeq.c     **** 	if (is_intmode())
2565:src/xeq.c     **** 		return;
2566:src/xeq.c     **** 
2567:src/xeq.c     **** 	getX(&x);
2568:src/xeq.c     **** 	do_conv(&r, arg, &x);
2569:src/xeq.c     **** 	setlastX();
2570:src/xeq.c     **** 	setX(&r);
2571:src/xeq.c     **** }
2572:src/xeq.c     **** 
2573:src/xeq.c     **** /*  Finish up a test -- if the value is non-zero, the test passes.
2574:src/xeq.c     ****  *  If it is zero, the test fails.
2575:src/xeq.c     ****  */
2576:src/xeq.c     **** void fin_tst(const int a) {
2577:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
2578:src/xeq.c     **** 	if (Running || XromRunning) {
2579:src/xeq.c     **** 		if (! a && incpc())
ARM GAS  /tmp/ccqED0AM.s 			page 56


2580:src/xeq.c     **** 			decpc();
2581:src/xeq.c     **** 	}
2582:src/xeq.c     **** 	else
2583:src/xeq.c     **** 		DispMsg = msg;
2584:src/xeq.c     **** #ifdef INFRARED
2585:src/xeq.c     **** 	if (Tracing) {
2586:src/xeq.c     **** 		print_justified( msg );
2587:src/xeq.c     **** 		Tracing = 0;
2588:src/xeq.c     **** 	}
2589:src/xeq.c     **** #endif
2590:src/xeq.c     **** }
2591:src/xeq.c     **** 
2592:src/xeq.c     **** 
2593:src/xeq.c     **** /* Skip a number of instructions forwards */
2594:src/xeq.c     **** void cmdskip(unsigned int arg, enum rarg op) {
2595:src/xeq.c     **** 	const unsigned int origpc = state_pc();
2596:src/xeq.c     **** 	unsigned int pc;
2597:src/xeq.c     **** 
2598:src/xeq.c     **** 	if (op == RARG_CASE) {
2599:src/xeq.c     **** 		int sgn;
2600:src/xeq.c     **** 		arg = (int) get_reg_n_int_sgn((int) arg, &sgn);
2601:src/xeq.c     **** 		if (sgn || arg >= 100) {
2602:src/xeq.c     **** 			report_err(ERR_RANGE);
2603:src/xeq.c     **** 			return;
2604:src/xeq.c     **** 		}
2605:src/xeq.c     **** 	}
2606:src/xeq.c     **** 
2607:src/xeq.c     **** 	if (isXROM(origpc))
2608:src/xeq.c     **** 		pc = origpc + arg;
2609:src/xeq.c     **** 	else {
2610:src/xeq.c     **** 		while (arg-- && !incpc());
2611:src/xeq.c     **** 		if (PcWrapped) {
2612:src/xeq.c     **** 			report_err(ERR_RANGE);
2613:src/xeq.c     **** 		}
2614:src/xeq.c     **** 		pc = state_pc();
2615:src/xeq.c     **** 	}
2616:src/xeq.c     **** 	gsbgto(pc, op == RARG_BSF, origpc);
2617:src/xeq.c     **** }
2618:src/xeq.c     **** 
2619:src/xeq.c     **** /* Skip backwards */
2620:src/xeq.c     **** void cmdback(unsigned int arg, enum rarg op) {
2621:src/xeq.c     **** 	const unsigned int origpc = state_pc();
2622:src/xeq.c     **** 	unsigned int pc = origpc;
2623:src/xeq.c     **** 
2624:src/xeq.c     **** 	if (isXROM(origpc))
2625:src/xeq.c     **** 		pc -= arg + 1;
2626:src/xeq.c     ****         else if (arg) {
2627:src/xeq.c     **** 		if ( Running ) {
2628:src/xeq.c     **** 			// Handles the case properly that we are on last step
2629:src/xeq.c     **** 			pc = do_dec(pc, 1);
2630:src/xeq.c     **** 		}
2631:src/xeq.c     **** 		do {
2632:src/xeq.c     **** 			pc = do_dec(pc, 1);
2633:src/xeq.c     **** 		} while (--arg && !PcWrapped);
2634:src/xeq.c     **** 		if (PcWrapped) {
2635:src/xeq.c     **** 			report_err(ERR_RANGE);
2636:src/xeq.c     **** 			return;
ARM GAS  /tmp/ccqED0AM.s 			page 57


2637:src/xeq.c     **** 		}
2638:src/xeq.c     **** 	}
2639:src/xeq.c     **** 	gsbgto(pc, op == RARG_BSB, origpc);
2640:src/xeq.c     **** }
2641:src/xeq.c     **** 
2642:src/xeq.c     **** 
2643:src/xeq.c     **** /* Append a character to the command line
2644:src/xeq.c     ****  */
2645:src/xeq.c     **** static void append_cmdline(char c) {
2646:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
2647:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
2648:src/xeq.c     **** }
2649:src/xeq.c     **** 
2650:src/xeq.c     **** /* Make sure exponent stays within allowed limits.
2651:src/xeq.c     ****  * was_digit_entered: 0: sign was changed
2652:src/xeq.c     ****  *                    1: new digit was entered
2653:src/xeq.c     ****  */
2654:src/xeq.c     **** static void exponent_adjusted(int was_digit_entered)
2655:src/xeq.c     **** {
2656:src/xeq.c     **** 	const int dbl = is_dblmode();
2657:src/xeq.c     **** 	int i;
2658:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DC == -1
2659:src/xeq.c     **** 	const int neg_type_dc = get_reg_n_int_sgn(0, &i);
2660:src/xeq.c     **** #else
2661:src/xeq.c     **** 	const int neg_type_dc = SP_NEG_EXP_ENTRY_TYPE_DC;
2662:src/xeq.c     **** #endif
2663:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_LIMIT_DC == -1
2664:src/xeq.c     **** 	const int neg_lim_dc = get_reg_n_int_sgn(1, &i);
2665:src/xeq.c     **** #else
2666:src/xeq.c     **** 	const int neg_lim_dc = SP_NEG_EXP_ENTRY_LIMIT_DC;
2667:src/xeq.c     **** #endif
2668:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DS == -1
2669:src/xeq.c     **** 	const int neg_type_ds = get_reg_n_int_sgn(2, &i);
2670:src/xeq.c     **** #else
2671:src/xeq.c     **** 	const int neg_type_ds = SP_NEG_EXP_ENTRY_TYPE_DS;
2672:src/xeq.c     **** #endif
2673:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_LIMIT_DS == -1
2674:src/xeq.c     **** 	const int neg_lim_ds = get_reg_n_int_sgn(3, &i);
2675:src/xeq.c     **** #else
2676:src/xeq.c     **** 	const int neg_lim_ds = SP_NEG_EXP_ENTRY_LIMIT_DS;
2677:src/xeq.c     **** #endif
2678:src/xeq.c     **** #if SP_POS_EXP_ENTRY_TYPE_DC == -1
2679:src/xeq.c     **** 	const int pos_type_dc = get_reg_n_int_sgn(4, &i);
2680:src/xeq.c     **** #else
2681:src/xeq.c     **** 	const int pos_type_dc = SP_POS_EXP_ENTRY_TYPE_DC;
2682:src/xeq.c     **** #endif
2683:src/xeq.c     **** #if SP_POS_EXP_ENTRY_LIMIT_DC == -1
2684:src/xeq.c     **** 	const int pos_lim_dc = get_reg_n_int_sgn(5, &i);
2685:src/xeq.c     **** #else
2686:src/xeq.c     **** 	const int pos_lim_dc = SP_POS_EXP_ENTRY_LIMIT_DC;
2687:src/xeq.c     **** #endif
2688:src/xeq.c     **** #if SP_POS_EXP_ENTRY_TYPE_DS == -1
2689:src/xeq.c     **** 	const int pos_type_ds = get_reg_n_int_sgn(6, &i);
2690:src/xeq.c     **** #else
2691:src/xeq.c     **** 	const int pos_type_ds = SP_POS_EXP_ENTRY_TYPE_DS;
2692:src/xeq.c     **** #endif
2693:src/xeq.c     **** #if SP_POS_EXP_ENTRY_LIMIT_DS == -1
ARM GAS  /tmp/ccqED0AM.s 			page 58


2694:src/xeq.c     **** 	const int pos_lim_ds = get_reg_n_int_sgn(7, &i);
2695:src/xeq.c     **** #else
2696:src/xeq.c     **** 	const int pos_lim_ds = SP_POS_EXP_ENTRY_LIMIT_DS;
2697:src/xeq.c     **** #endif
2698:src/xeq.c     **** #if SP_EXP_ENTRY_CHS_DC == -1
2699:src/xeq.c     **** 	const int exp_chs_dc = get_reg_n_int_sgn(8, &i);
2700:src/xeq.c     **** #else
2701:src/xeq.c     **** 	const int exp_chs_dc = SP_EXP_ENTRY_CHS_DC;
2702:src/xeq.c     **** #endif
2703:src/xeq.c     **** #if SP_EXP_ENTRY_CHS_DS == -1
2704:src/xeq.c     **** 	const int exp_chs_ds = get_reg_n_int_sgn(9, &i);
2705:src/xeq.c     **** #else
2706:src/xeq.c     **** 	const int exp_chs_ds = SP_EXP_ENTRY_CHS_DS;
2707:src/xeq.c     **** #endif
2708:src/xeq.c     **** 	const int dp_neg_type_dc = DP_NEG_EXP_ENTRY_TYPE_DC;
2709:src/xeq.c     **** 	const int dp_neg_lim_dc = DP_NEG_EXP_ENTRY_LIMIT_DC;
2710:src/xeq.c     **** 	const int dp_neg_type_ds = DP_NEG_EXP_ENTRY_TYPE_DS;
2711:src/xeq.c     **** 	const int dp_neg_lim_ds = DP_NEG_EXP_ENTRY_LIMIT_DS;
2712:src/xeq.c     **** 	const int dp_pos_type_dc = DP_POS_EXP_ENTRY_TYPE_DC;
2713:src/xeq.c     **** 	const int dp_pos_lim_dc = DP_POS_EXP_ENTRY_LIMIT_DC;
2714:src/xeq.c     **** 	const int dp_pos_type_ds = DP_POS_EXP_ENTRY_TYPE_DS;
2715:src/xeq.c     **** 	const int dp_pos_lim_ds = DP_POS_EXP_ENTRY_LIMIT_DS;
2716:src/xeq.c     **** 	const int dp_exp_chs_dc = DP_EXP_ENTRY_CHS_DC;
2717:src/xeq.c     **** 	const int dp_exp_chs_ds = DP_EXP_ENTRY_CHS_DS;
2718:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2719:src/xeq.c     **** 	const int large_exp_entry = 1;
2720:src/xeq.c     **** 	char *p = &Cmdline[CmdLineEex];
2721:src/xeq.c     **** #else
2722:src/xeq.c     **** 	const int large_exp_entry = 0;
2723:src/xeq.c     **** 	char *p = &Cmdline[CmdLineEex + 1];
2724:src/xeq.c     **** #endif
2725:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DC == -1 || SP_NEG_EXP_ENTRY_TYPE_DC != SP_NEG_EXP_ENTRY_TYPE_DS \
2726:src/xeq.c     ****     || SP_NEG_EXP_ENTRY_LIMIT_DC == -1 || SP_NEG_EXP_ENTRY_LIMIT_DC != SP_NEG_EXP_ENTRY_LIMIT_DS \
2727:src/xeq.c     ****     || SP_POS_EXP_ENTRY_TYPE_DC == -1 || SP_POS_EXP_ENTRY_TYPE_DC != SP_POS_EXP_ENTRY_TYPE_DS \
2728:src/xeq.c     ****     || SP_POS_EXP_ENTRY_LIMIT_DC == -1 || SP_POS_EXP_ENTRY_LIMIT_DC != SP_POS_EXP_ENTRY_LIMIT_DS \
2729:src/xeq.c     ****     || SP_EXP_ENTRY_CHS_DC == -1 || SP_EXP_ENTRY_CHS_DC != SP_EXP_ENTRY_CHS_DS \
2730:src/xeq.c     ****     || SP_EXP_ENTRY_ZERO_DC == -1 || SP_EXP_ENTRY_ZERO_DC != SP_EXP_ENTRY_ZERO_DS \
2731:src/xeq.c     ****     || ((DP_NEG_EXP_ENTRY_TYPE_DC != DP_NEG_EXP_ENTRY_TYPE_DS \
2732:src/xeq.c     ****          || DP_NEG_EXP_ENTRY_LIMIT_DC != DP_NEG_EXP_ENTRY_LIMIT_DS \
2733:src/xeq.c     ****          || DP_POS_EXP_ENTRY_TYPE_DC != DP_POS_EXP_ENTRY_TYPE_DS \
2734:src/xeq.c     ****          || DP_POS_EXP_ENTRY_LIMIT_DC != DP_POS_EXP_ENTRY_LIMIT_DS \
2735:src/xeq.c     ****          || DP_EXP_ENTRY_CHS_DC != DP_EXP_ENTRY_CHS_DS \
2736:src/xeq.c     ****          || DP_EXP_ENTRY_ZERO_DC != DP_EXP_ENTRY_ZERO_DS) && defined(LARGE_EXPONENT_ENTRY))
2737:src/xeq.c     **** 	const int flag_D = get_user_flag(NAN_FLAG);
2738:src/xeq.c     **** #else
2739:src/xeq.c     **** 	const int flag_D = 0;
2740:src/xeq.c     **** #endif
2741:src/xeq.c     **** #ifndef SHIFT_EXPONENT
2742:src/xeq.c     **** 	int negative;
2743:src/xeq.c     **** #endif
2744:src/xeq.c     **** 	int emax;
2745:src/xeq.c     **** 
2746:src/xeq.c     **** 	/* Figure out the range limit for the exponent */
2747:src/xeq.c     **** 	if (!large_exp_entry && dbl) {
2748:src/xeq.c     **** 		emax = 999;
2749:src/xeq.c     **** 	}
2750:src/xeq.c     **** 	else {
ARM GAS  /tmp/ccqED0AM.s 			page 59


2751:src/xeq.c     **** 		int emax_plus, emax_minus;
2752:src/xeq.c     **** 		int dot = 0, first_nonzero = -1, last_nonzero = 0;
2753:src/xeq.c     **** 
2754:src/xeq.c     **** 		if ((neg_type_dc >= 1 && neg_type_dc <= 9)
2755:src/xeq.c     **** 		    || (neg_type_ds >= 1 && neg_type_ds <= 9)
2756:src/xeq.c     **** 		    || (pos_type_dc >= 1 && pos_type_dc <= 3)
2757:src/xeq.c     **** 		    || (pos_type_ds >= 1 && pos_type_ds <= 3)
2758:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2759:src/xeq.c     **** 		    || (dp_neg_type_dc >= 1 && dp_neg_type_dc <= 9)
2760:src/xeq.c     **** 		    || (dp_neg_type_ds >= 1 && dp_neg_type_ds <= 9)
2761:src/xeq.c     **** 		    || (dp_pos_type_dc >= 1 && dp_pos_type_dc <= 3)
2762:src/xeq.c     **** 		    || (dp_pos_type_ds >= 1 && dp_pos_type_ds <= 3)
2763:src/xeq.c     **** #endif
2764:src/xeq.c     **** 		   ) {
2765:src/xeq.c     **** 			// Exponent limits have to be calculated at run-time
2766:src/xeq.c     **** 
2767:src/xeq.c     **** 			for (i = 0; i < CmdLineLength; ++i) {
2768:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2769:src/xeq.c     **** 				if (Cmdline[i] == 'E' || Cmdline[i] == 'D')
2770:src/xeq.c     **** #else
2771:src/xeq.c     **** 				if (Cmdline[i] == 'E')
2772:src/xeq.c     **** #endif
2773:src/xeq.c     **** 					break;
2774:src/xeq.c     **** 				else if (Cmdline[i] == '.')
2775:src/xeq.c     **** 					dot = i;
2776:src/xeq.c     **** 				else if (Cmdline[i] != '0') {
2777:src/xeq.c     **** 					last_nonzero = i - (dot != 0);
2778:src/xeq.c     **** 					if (first_nonzero < 0)
2779:src/xeq.c     **** 						first_nonzero = i - (dot != 0);
2780:src/xeq.c     **** 				}
2781:src/xeq.c     **** 			}
2782:src/xeq.c     **** 			if (first_nonzero < 0) { // Mantissa is zero.
2783:src/xeq.c     **** #if SP_EXP_ENTRY_ZERO_DC == -1
2784:src/xeq.c     **** 				const int zero_dc = (get_user_flag(1) << 1) | get_user_flag(0);
2785:src/xeq.c     **** #else
2786:src/xeq.c     **** 				const int zero_dc = SP_EXP_ENTRY_ZERO_DC;
2787:src/xeq.c     **** #endif
2788:src/xeq.c     **** #if SP_EXP_ENTRY_ZERO_DS == -1
2789:src/xeq.c     **** 				const int zero_ds = (get_user_flag(3) << 1) | get_user_flag(2);
2790:src/xeq.c     **** #else
2791:src/xeq.c     **** 				const int zero_ds = SP_EXP_ENTRY_ZERO_DS;
2792:src/xeq.c     **** #endif
2793:src/xeq.c     **** 				const int dp_zero_dc = DP_EXP_ENTRY_ZERO_DC;
2794:src/xeq.c     **** 				const int dp_zero_ds = DP_EXP_ENTRY_ZERO_DS;
2795:src/xeq.c     **** 
2796:src/xeq.c     **** 				if (large_exp_entry && dbl) {
2797:src/xeq.c     **** 					if ((dp_zero_dc == 1 && dp_zero_ds == 1)
2798:src/xeq.c     **** 					    || (dp_zero_dc == 1 && !flag_D)
2799:src/xeq.c     **** 					    || (dp_zero_ds == 1 && flag_D)) {
2800:src/xeq.c     **** 						// Double precision: Allow any exponent
2801:src/xeq.c     **** 						// within configured limits if any.
2802:src/xeq.c     **** 						emax_plus = emax_minus = 9999;
2803:src/xeq.c     **** 						goto check_limits;
2804:src/xeq.c     **** 					}
2805:src/xeq.c     **** 					else if ((dp_zero_dc == 2 && dp_zero_ds == 2)
2806:src/xeq.c     **** 					         || (dp_zero_dc == 2 && !flag_D)
2807:src/xeq.c     **** 					         || (dp_zero_ds == 2 && flag_D)) {
ARM GAS  /tmp/ccqED0AM.s 			page 60


2808:src/xeq.c     **** 						// Double precision: Allow any exponent
2809:src/xeq.c     **** 						// even outside of configured limits.
2810:src/xeq.c     **** 						emax = 9999;
2811:src/xeq.c     **** 						goto do_not_check_limits;
2812:src/xeq.c     **** 					}
2813:src/xeq.c     **** 					goto zero_has_one_significant_digit;
2814:src/xeq.c     **** 				}
2815:src/xeq.c     **** 				if ((zero_dc == 1 && zero_ds == 1)
2816:src/xeq.c     **** 				    || (zero_dc == 1 && !flag_D)
2817:src/xeq.c     **** 				    || (zero_ds == 1 && flag_D)) {
2818:src/xeq.c     **** 					// Allow any exponent within configured limits if any.
2819:src/xeq.c     **** 					emax_plus = emax_minus = 999;
2820:src/xeq.c     **** 					goto check_limits;
2821:src/xeq.c     **** 				}
2822:src/xeq.c     **** 				else if ((zero_dc == 2 && zero_ds == 2)
2823:src/xeq.c     **** 				         || (zero_dc == 2 && !flag_D)
2824:src/xeq.c     **** 				         || (zero_ds == 2 && flag_D)) {
2825:src/xeq.c     **** 					// Allow any exponent even outside of configured limits.
2826:src/xeq.c     **** 					emax = 999;
2827:src/xeq.c     **** 					goto do_not_check_limits;
2828:src/xeq.c     **** 				}
2829:src/xeq.c     **** 				else {
2830:src/xeq.c     **** zero_has_one_significant_digit:
2831:src/xeq.c     **** 					// Treat zero as if it had one significant digit.
2832:src/xeq.c     **** 					first_nonzero = 0;
2833:src/xeq.c     **** 					dot = 1;
2834:src/xeq.c     **** 				}
2835:src/xeq.c     **** 			}
2836:src/xeq.c     **** 			else if (dot == 0)
2837:src/xeq.c     **** 				dot = i;
2838:src/xeq.c     **** 		}
2839:src/xeq.c     **** 
2840:src/xeq.c     **** 		if (large_exp_entry && dbl) {
2841:src/xeq.c     **** 			// Double precision mode
2842:src/xeq.c     **** 			if (flag_D && dp_neg_type_dc != dp_neg_type_ds) {
2843:src/xeq.c     **** 				if (dp_neg_type_ds >= 1 && dp_neg_type_ds <= 3) {
2844:src/xeq.c     **** 					// Don't allow denormal numbers
2845:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin - 1 + dot - first_nonzero;
2846:src/xeq.c     **** 				}
2847:src/xeq.c     **** 				else if (dp_neg_type_ds >= 4 && dp_neg_type_ds <= 6) {
2848:src/xeq.c     **** 					// No entered digit can be lost in denormal numbers
2849:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 - (last_nonzero - dot);
2850:src/xeq.c     **** 				}
2851:src/xeq.c     **** 				else if (dp_neg_type_ds >= 7 && dp_neg_type_ds <= 9) {
2852:src/xeq.c     **** 					// At least one digit preserved in denormal numbers
2853:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 + dot - first_nonzero;
2854:src/xeq.c     **** 				}
2855:src/xeq.c     **** 				else {
2856:src/xeq.c     **** 					// Fixed limit
2857:src/xeq.c     **** 					emax_minus = dp_neg_lim_ds;
2858:src/xeq.c     **** 				}
2859:src/xeq.c     **** 			}
2860:src/xeq.c     **** 			else {
2861:src/xeq.c     **** 				if (dp_neg_type_dc >= 1 && dp_neg_type_dc <= 3) {
2862:src/xeq.c     **** 					// Don't allow denormal numbers
2863:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin - 1 + dot - first_nonzero;
2864:src/xeq.c     **** 				}
ARM GAS  /tmp/ccqED0AM.s 			page 61


2865:src/xeq.c     **** 				else if (dp_neg_type_dc >= 4 && dp_neg_type_dc <= 6) {
2866:src/xeq.c     **** 					// No entered digit can be lost in denormal numbers
2867:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 - (last_nonzero - dot);
2868:src/xeq.c     **** 				}
2869:src/xeq.c     **** 				else if (dp_neg_type_dc >= 7 && dp_neg_type_dc <= 9) {
2870:src/xeq.c     **** 					// At least one digit preserved in denormal numbers
2871:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 + dot - first_nonzero;
2872:src/xeq.c     **** 				}
2873:src/xeq.c     **** 				else {
2874:src/xeq.c     **** 					// Fixed limit
2875:src/xeq.c     **** 					emax_minus = dp_neg_lim_dc;
2876:src/xeq.c     **** 				}
2877:src/xeq.c     **** 			}
2878:src/xeq.c     **** 
2879:src/xeq.c     **** 			if (flag_D && dp_pos_type_dc != dp_pos_type_ds) {
2880:src/xeq.c     **** 				if (dp_pos_type_ds >= 1 && dp_pos_type_ds <= 3)
2881:src/xeq.c     **** 					// Don't allow numbers that overflow to infinity
2882:src/xeq.c     **** 					emax_plus = DECIMAL128_Emax + 1 - (dot - first_nonzero);
2883:src/xeq.c     **** 				else
2884:src/xeq.c     **** 					// Fixed limit
2885:src/xeq.c     **** 					emax_plus = dp_pos_lim_ds;
2886:src/xeq.c     **** 			}
2887:src/xeq.c     **** 			else {
2888:src/xeq.c     **** 				if (dp_pos_type_dc >= 1 && dp_pos_type_dc <= 3)
2889:src/xeq.c     **** 					// Don't allow numbers that overflow to infinity
2890:src/xeq.c     **** 					emax_plus = DECIMAL128_Emax + 1 - (dot - first_nonzero);
2891:src/xeq.c     **** 				else
2892:src/xeq.c     **** 					// Fixed limit
2893:src/xeq.c     **** 					emax_plus = dp_pos_lim_dc;
2894:src/xeq.c     **** 			}
2895:src/xeq.c     **** 
2896:src/xeq.c     **** 			goto check_limits;
2897:src/xeq.c     **** 		}
2898:src/xeq.c     **** 
2899:src/xeq.c     **** 		if (flag_D && neg_type_dc != neg_type_ds) {
2900:src/xeq.c     **** 			if (neg_type_ds >= 1 && neg_type_ds <= 3) {
2901:src/xeq.c     **** 				// Don't allow denormal numbers
2902:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin - 1 + dot - first_nonzero;
2903:src/xeq.c     **** 			}
2904:src/xeq.c     **** 			else if (neg_type_ds >= 4 && neg_type_ds <= 6) {
2905:src/xeq.c     **** 				// No entered digit can be lost in denormal numbers
2906:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 - (last_nonzero - dot);
2907:src/xeq.c     **** 			}
2908:src/xeq.c     **** 			else if (neg_type_ds >= 7 && neg_type_ds <= 9) {
2909:src/xeq.c     **** 				// At least one digit preserved in denormal numbers
2910:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 + dot - first_nonzero;
2911:src/xeq.c     **** 			}
2912:src/xeq.c     **** 			else {
2913:src/xeq.c     **** 				// Fixed limit
2914:src/xeq.c     **** 				emax_minus = neg_lim_ds;
2915:src/xeq.c     **** 			}
2916:src/xeq.c     **** 		}
2917:src/xeq.c     **** 		else {
2918:src/xeq.c     **** 			if (neg_type_dc >= 1 && neg_type_dc <= 3) {
2919:src/xeq.c     **** 				// Don't allow denormal numbers
2920:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin - 1 + dot - first_nonzero;
2921:src/xeq.c     **** 			}
ARM GAS  /tmp/ccqED0AM.s 			page 62


2922:src/xeq.c     **** 			else if (neg_type_dc >= 4 && neg_type_dc <= 6) {
2923:src/xeq.c     **** 				// No entered digit can be lost in denormal numbers
2924:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 - (last_nonzero - dot);
2925:src/xeq.c     **** 			}
2926:src/xeq.c     **** 			else if (neg_type_dc >= 7 && neg_type_dc <= 9) {
2927:src/xeq.c     **** 				// At least one digit preserved in denormal numbers
2928:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 + dot - first_nonzero;
2929:src/xeq.c     **** 			}
2930:src/xeq.c     **** 			else {
2931:src/xeq.c     **** 				// Fixed limit
2932:src/xeq.c     **** 				emax_minus = neg_lim_dc;
2933:src/xeq.c     **** 			}
2934:src/xeq.c     **** 		}
2935:src/xeq.c     **** 
2936:src/xeq.c     **** 		if (flag_D && pos_type_dc != pos_type_ds) {
2937:src/xeq.c     **** 			if (pos_type_ds >= 1 && pos_type_ds <= 3)
2938:src/xeq.c     **** 				// Don't allow numbers that overflow to infinity
2939:src/xeq.c     **** 				emax_plus = DECIMAL64_Emax + 1 - (dot - first_nonzero);
2940:src/xeq.c     **** 			else
2941:src/xeq.c     **** 				// Fixed limit
2942:src/xeq.c     **** 				emax_plus = pos_lim_ds;
2943:src/xeq.c     **** 		}
2944:src/xeq.c     **** 		else {
2945:src/xeq.c     **** 			if (pos_type_dc >= 1 && pos_type_dc <= 3)
2946:src/xeq.c     **** 				// Don't allow numbers that overflow to infinity
2947:src/xeq.c     **** 				emax_plus = DECIMAL64_Emax + 1 - (dot - first_nonzero);
2948:src/xeq.c     **** 			else
2949:src/xeq.c     **** 				// Fixed limit
2950:src/xeq.c     **** 				emax_plus = pos_lim_dc;
2951:src/xeq.c     **** 		}
2952:src/xeq.c     **** 
2953:src/xeq.c     **** check_limits:
2954:src/xeq.c     **** 		if (large_exp_entry && dbl && flag_D
2955:src/xeq.c     **** 		    && (dp_neg_type_dc != dp_neg_type_ds || dp_neg_lim_dc != dp_neg_lim_ds)
2956:src/xeq.c     **** 		    && (dp_neg_type_ds != neg_type_ds || dp_neg_lim_ds != neg_lim_ds)) {
2957:src/xeq.c     **** 			if (dp_neg_type_ds >= 1 && dp_neg_type_ds <= 9) {
2958:src/xeq.c     **** 				if (dp_neg_type_ds % 3 == 2) { // low limit
2959:src/xeq.c     **** 					if (emax_minus > dp_neg_lim_ds)
2960:src/xeq.c     **** 						emax_minus = dp_neg_lim_ds;
2961:src/xeq.c     **** 				}
2962:src/xeq.c     **** 				else if (dp_neg_type_ds % 3 == 0) { // high limit
2963:src/xeq.c     **** 					if (emax_minus < dp_neg_lim_ds)
2964:src/xeq.c     **** 						emax_minus = dp_neg_lim_ds;
2965:src/xeq.c     **** 				}
2966:src/xeq.c     **** 			}
2967:src/xeq.c     **** 			if (dp_neg_lim_ds < 0 && emax_minus < 0)
2968:src/xeq.c     **** 				emax_minus = 0;
2969:src/xeq.c     **** 		}
2970:src/xeq.c     **** 		else if (large_exp_entry && dbl
2971:src/xeq.c     **** 		         && (!flag_D || (dp_neg_type_dc == dp_neg_type_ds
2972:src/xeq.c     **** 		                         && dp_neg_lim_dc == dp_neg_lim_ds))
2973:src/xeq.c     **** 		         && (dp_neg_type_dc != neg_type_dc || dp_neg_lim_dc != neg_lim_dc)) {
2974:src/xeq.c     **** 			if (dp_neg_type_dc >= 1 && dp_neg_type_dc <= 9) {
2975:src/xeq.c     **** 				if (dp_neg_type_dc % 3 == 2) { // low limit
2976:src/xeq.c     **** 					if (emax_minus > dp_neg_lim_dc)
2977:src/xeq.c     **** 						emax_minus = dp_neg_lim_dc;
2978:src/xeq.c     **** 				}
ARM GAS  /tmp/ccqED0AM.s 			page 63


2979:src/xeq.c     **** 				else if (dp_neg_type_dc % 3 == 0) { // high limit
2980:src/xeq.c     **** 					if (emax_minus < dp_neg_lim_dc)
2981:src/xeq.c     **** 						emax_minus = dp_neg_lim_dc;
2982:src/xeq.c     **** 				}
2983:src/xeq.c     **** 			}
2984:src/xeq.c     **** 			if (dp_neg_lim_dc < 0 && emax_minus < 0)
2985:src/xeq.c     **** 				emax_minus = 0;
2986:src/xeq.c     **** 		}
2987:src/xeq.c     **** 		else if (flag_D && (neg_type_dc != neg_type_ds || neg_lim_dc != neg_lim_ds)) {
2988:src/xeq.c     **** 			if (neg_type_ds >= 1 && neg_type_ds <= 9) {
2989:src/xeq.c     **** 				if (neg_type_ds % 3 == 2) { // low limit
2990:src/xeq.c     **** 					if (emax_minus > neg_lim_ds)
2991:src/xeq.c     **** 						emax_minus = neg_lim_ds;
2992:src/xeq.c     **** 				}
2993:src/xeq.c     **** 				else if (neg_type_ds % 3 == 0) { // high limit
2994:src/xeq.c     **** 					if (emax_minus < neg_lim_ds)
2995:src/xeq.c     **** 						emax_minus = neg_lim_ds;
2996:src/xeq.c     **** 				}
2997:src/xeq.c     **** 			}
2998:src/xeq.c     **** 			if (neg_lim_ds < 0 && emax_minus < 0)
2999:src/xeq.c     **** 				emax_minus = 0;
3000:src/xeq.c     **** 		}
3001:src/xeq.c     **** 		else {
3002:src/xeq.c     **** 			if (neg_type_dc >= 1 && neg_type_dc <= 9) {
3003:src/xeq.c     **** 				if (neg_type_dc % 3 == 2) { // low limit
3004:src/xeq.c     **** 					if (emax_minus > neg_lim_dc)
3005:src/xeq.c     **** 						emax_minus = neg_lim_dc;
3006:src/xeq.c     **** 				}
3007:src/xeq.c     **** 				else if (neg_type_dc % 3 == 0) { // high limit
3008:src/xeq.c     **** 					if (emax_minus < neg_lim_dc)
3009:src/xeq.c     **** 						emax_minus = neg_lim_dc;
3010:src/xeq.c     **** 				}
3011:src/xeq.c     **** 			}
3012:src/xeq.c     **** 			if (neg_lim_dc < 0 && emax_minus < 0)
3013:src/xeq.c     **** 				emax_minus = 0;
3014:src/xeq.c     **** 		}
3015:src/xeq.c     **** 
3016:src/xeq.c     **** 		if (large_exp_entry && dbl && flag_D
3017:src/xeq.c     **** 		    && (dp_pos_type_dc != dp_pos_type_ds || dp_pos_lim_dc != dp_pos_lim_ds)
3018:src/xeq.c     **** 		    && (dp_pos_type_ds != pos_type_ds || dp_pos_lim_ds != pos_lim_ds)) {
3019:src/xeq.c     **** 			if (dp_pos_type_ds == 2) { // low limit
3020:src/xeq.c     **** 				if (emax_plus < dp_pos_lim_ds)
3021:src/xeq.c     **** 					emax_plus = dp_pos_lim_ds;
3022:src/xeq.c     **** 			}
3023:src/xeq.c     **** 			else if (dp_pos_type_ds == 3) { // high limit
3024:src/xeq.c     **** 				if (emax_plus > dp_pos_lim_ds)
3025:src/xeq.c     **** 					emax_plus = dp_pos_lim_ds;
3026:src/xeq.c     **** 			}
3027:src/xeq.c     **** 			if (dp_pos_lim_ds < 0 && emax_plus < 0)
3028:src/xeq.c     **** 				emax_plus = 0;
3029:src/xeq.c     **** 		}
3030:src/xeq.c     **** 		else if (large_exp_entry && dbl
3031:src/xeq.c     **** 		         && (!flag_D || (dp_pos_type_dc == dp_pos_type_ds
3032:src/xeq.c     **** 		                         && dp_pos_lim_dc == dp_pos_lim_ds))
3033:src/xeq.c     **** 		         && (dp_pos_type_dc != pos_type_dc || dp_pos_lim_dc != pos_lim_dc)) {
3034:src/xeq.c     **** 			if (dp_pos_type_dc == 2) { // low limit
3035:src/xeq.c     **** 				if (emax_plus < dp_pos_lim_dc)
ARM GAS  /tmp/ccqED0AM.s 			page 64


3036:src/xeq.c     **** 					emax_plus = dp_pos_lim_dc;
3037:src/xeq.c     **** 			}
3038:src/xeq.c     **** 			else if (dp_pos_type_dc == 3) { // high limit
3039:src/xeq.c     **** 				if (emax_plus > dp_pos_lim_dc)
3040:src/xeq.c     **** 					emax_plus = dp_pos_lim_dc;
3041:src/xeq.c     **** 			}
3042:src/xeq.c     **** 			if (dp_pos_lim_dc < 0 && emax_plus < 0)
3043:src/xeq.c     **** 				emax_plus = 0;
3044:src/xeq.c     **** 		}
3045:src/xeq.c     **** 		else if (flag_D && (pos_type_dc != pos_type_ds || pos_lim_dc != pos_lim_ds)) {
3046:src/xeq.c     **** 			if (pos_type_ds == 2) { // low limit
3047:src/xeq.c     **** 				if (emax_plus < pos_lim_ds)
3048:src/xeq.c     **** 					emax_plus = pos_lim_ds;
3049:src/xeq.c     **** 			}
3050:src/xeq.c     **** 			else if (pos_type_ds == 3) { // high limit
3051:src/xeq.c     **** 				if (emax_plus > pos_lim_ds)
3052:src/xeq.c     **** 					emax_plus = pos_lim_ds;
3053:src/xeq.c     **** 			}
3054:src/xeq.c     **** 			if (pos_lim_ds < 0 && emax_plus < 0)
3055:src/xeq.c     **** 				emax_plus = 0;
3056:src/xeq.c     **** 		}
3057:src/xeq.c     **** 		else {
3058:src/xeq.c     **** 			if (pos_type_dc == 2) { // low limit
3059:src/xeq.c     **** 				if (emax_plus < pos_lim_dc)
3060:src/xeq.c     **** 					emax_plus = pos_lim_dc;
3061:src/xeq.c     **** 			}
3062:src/xeq.c     **** 			else if (pos_type_dc == 3) { // high limit
3063:src/xeq.c     **** 				if (emax_plus > pos_lim_dc)
3064:src/xeq.c     **** 					emax_plus = pos_lim_dc;
3065:src/xeq.c     **** 			}
3066:src/xeq.c     **** 			if (pos_lim_dc < 0 && emax_plus < 0)
3067:src/xeq.c     **** 				emax_plus = 0;
3068:src/xeq.c     **** 		}
3069:src/xeq.c     **** 
3070:src/xeq.c     **** 		if (large_exp_entry && dbl && flag_D
3071:src/xeq.c     **** 		    && (dp_exp_chs_dc != dp_exp_chs_ds)
3072:src/xeq.c     **** 		    && (dp_exp_chs_ds != exp_chs_ds)) {
3073:src/xeq.c     **** 			if (dp_exp_chs_ds == 0) {
3074:src/xeq.c     **** 				// Limit exponents so sign change is always legal
3075:src/xeq.c     **** 				if (emax_minus < emax_plus)
3076:src/xeq.c     **** 					emax = emax_minus;
3077:src/xeq.c     **** 				else
3078:src/xeq.c     **** 					emax = emax_plus;
3079:src/xeq.c     **** 			}
3080:src/xeq.c     **** 			else if (dp_exp_chs_ds == 3) {
3081:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
3082:src/xeq.c     **** 				if (emax_minus > emax_plus)
3083:src/xeq.c     **** 					emax = emax_minus;
3084:src/xeq.c     **** 				else
3085:src/xeq.c     **** 					emax = emax_plus;
3086:src/xeq.c     **** 			}
3087:src/xeq.c     **** 			else {
3088:src/xeq.c     **** 				if (dp_exp_chs_ds == 2 && !was_digit_entered)
3089:src/xeq.c     **** 					return;
3090:src/xeq.c     **** 				if (*p == 'D')
3091:src/xeq.c     **** 					emax = emax_minus;
3092:src/xeq.c     **** 				else
ARM GAS  /tmp/ccqED0AM.s 			page 65


3093:src/xeq.c     **** 					emax = emax_plus;
3094:src/xeq.c     **** 			}
3095:src/xeq.c     **** 		}
3096:src/xeq.c     **** 		else if (large_exp_entry && dbl
3097:src/xeq.c     **** 		         && (!flag_D || dp_exp_chs_dc == dp_exp_chs_ds)
3098:src/xeq.c     **** 		         && (dp_exp_chs_dc != exp_chs_dc)) {
3099:src/xeq.c     **** 			if (dp_exp_chs_dc == 0) {
3100:src/xeq.c     **** 				// Limit exponents so sign change is always legal
3101:src/xeq.c     **** 				if (emax_minus < emax_plus)
3102:src/xeq.c     **** 					emax = emax_minus;
3103:src/xeq.c     **** 				else
3104:src/xeq.c     **** 					emax = emax_plus;
3105:src/xeq.c     **** 			}
3106:src/xeq.c     **** 			else if (dp_exp_chs_dc == 3) {
3107:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
3108:src/xeq.c     **** 				if (emax_minus > emax_plus)
3109:src/xeq.c     **** 					emax = emax_minus;
3110:src/xeq.c     **** 				else
3111:src/xeq.c     **** 					emax = emax_plus;
3112:src/xeq.c     **** 			}
3113:src/xeq.c     **** 			else {
3114:src/xeq.c     **** 				if (dp_exp_chs_dc == 2 && !was_digit_entered)
3115:src/xeq.c     **** 					return;
3116:src/xeq.c     **** 				if (*p == 'D')
3117:src/xeq.c     **** 					emax = emax_minus;
3118:src/xeq.c     **** 				else
3119:src/xeq.c     **** 					emax = emax_plus;
3120:src/xeq.c     **** 			}
3121:src/xeq.c     **** 		}
3122:src/xeq.c     **** 		else if (flag_D && exp_chs_dc != exp_chs_ds) {
3123:src/xeq.c     **** 			if (exp_chs_ds == 0) {
3124:src/xeq.c     **** 				// Limit exponents so sign change is always legal
3125:src/xeq.c     **** 				if (emax_minus < emax_plus)
3126:src/xeq.c     **** 					emax = emax_minus;
3127:src/xeq.c     **** 				else
3128:src/xeq.c     **** 					emax = emax_plus;
3129:src/xeq.c     **** 			}
3130:src/xeq.c     **** 			else if (exp_chs_ds == 3) {
3131:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
3132:src/xeq.c     **** 				if (emax_minus > emax_plus)
3133:src/xeq.c     **** 					emax = emax_minus;
3134:src/xeq.c     **** 				else
3135:src/xeq.c     **** 					emax = emax_plus;
3136:src/xeq.c     **** 			}
3137:src/xeq.c     **** 			else {
3138:src/xeq.c     **** 				if (exp_chs_ds == 2 && !was_digit_entered)
3139:src/xeq.c     **** 					return;
3140:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3141:src/xeq.c     **** 				if (*p == 'D')
3142:src/xeq.c     **** #else
3143:src/xeq.c     **** 				if (*p == '-')
3144:src/xeq.c     **** #endif
3145:src/xeq.c     **** 					emax = emax_minus;
3146:src/xeq.c     **** 				else
3147:src/xeq.c     **** 					emax = emax_plus;
3148:src/xeq.c     **** 			}
3149:src/xeq.c     **** 		}
ARM GAS  /tmp/ccqED0AM.s 			page 66


3150:src/xeq.c     **** 		else {
3151:src/xeq.c     **** 			if (exp_chs_dc == 0) {
3152:src/xeq.c     **** 				// Limit exponents so sign change is always legal
3153:src/xeq.c     **** 				if (emax_minus < emax_plus)
3154:src/xeq.c     **** 					emax = emax_minus;
3155:src/xeq.c     **** 				else
3156:src/xeq.c     **** 					emax = emax_plus;
3157:src/xeq.c     **** 			}
3158:src/xeq.c     **** 			else if (exp_chs_dc == 3) {
3159:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
3160:src/xeq.c     **** 				if (emax_minus > emax_plus)
3161:src/xeq.c     **** 					emax = emax_minus;
3162:src/xeq.c     **** 				else
3163:src/xeq.c     **** 					emax = emax_plus;
3164:src/xeq.c     **** 			}
3165:src/xeq.c     **** 			else {
3166:src/xeq.c     **** 				if (exp_chs_dc == 2 && !was_digit_entered)
3167:src/xeq.c     **** 					return;
3168:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3169:src/xeq.c     **** 				if (*p == 'D')
3170:src/xeq.c     **** #else
3171:src/xeq.c     **** 				if (*p == '-')
3172:src/xeq.c     **** #endif
3173:src/xeq.c     **** 					emax = emax_minus;
3174:src/xeq.c     **** 				else
3175:src/xeq.c     **** 					emax = emax_plus;
3176:src/xeq.c     **** 			}
3177:src/xeq.c     **** 		}
3178:src/xeq.c     **** 	}
3179:src/xeq.c     **** 
3180:src/xeq.c     **** do_not_check_limits:
3181:src/xeq.c     **** #ifdef SHIFT_EXPONENT
3182:src/xeq.c     **** #  ifdef LARGE_EXPONENT_ENTRY
3183:src/xeq.c     **** 	p++;
3184:src/xeq.c     **** #  else
3185:src/xeq.c     **** 	if (*p == '-')
3186:src/xeq.c     **** 		p++;
3187:src/xeq.c     **** #  endif
3188:src/xeq.c     **** 	/* Check if the current exponent exceeds the range.
3189:src/xeq.c     **** 	 * If so, shift it back until it doesn't.
3190:src/xeq.c     **** 	 * Also remove leading zeros.
3191:src/xeq.c     **** 	 */
3192:src/xeq.c     **** 	while (s_to_i(p) > emax || *p == '0') {
3193:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
3194:src/xeq.c     **** 			p[i] = p[i + 1];
3195:src/xeq.c     **** 		CmdLineLength--;
3196:src/xeq.c     **** 	}
3197:src/xeq.c     **** #else
3198:src/xeq.c     **** #  ifdef LARGE_EXPONENT_ENTRY
3199:src/xeq.c     **** 	negative = (*p == 'D');
3200:src/xeq.c     **** 	p++;
3201:src/xeq.c     **** #  else
3202:src/xeq.c     **** 	if (*p == '-') {
3203:src/xeq.c     **** 		p++;
3204:src/xeq.c     **** 		negative = 1;
3205:src/xeq.c     **** 	}
3206:src/xeq.c     **** 	else negative = 0;
ARM GAS  /tmp/ccqED0AM.s 			page 67


3207:src/xeq.c     **** #  endif
3208:src/xeq.c     **** 	// Display a warning if the exponent is out of range.
3209:src/xeq.c     **** 	if ((i = s_to_i(p)) > emax) {
3210:src/xeq.c     **** 		if (was_digit_entered) {
3211:src/xeq.c     **** 			CmdLineLength--;
3212:src/xeq.c     **** 			if (large_exp_entry && dbl ? i > 9999 : i > 999) {
3213:src/xeq.c     **** 				report_warn(ERR_TOO_LONG);
3214:src/xeq.c     **** 				return;
3215:src/xeq.c     **** 			}
3216:src/xeq.c     **** 		}
3217:src/xeq.c     **** #  ifdef LARGE_EXPONENT_ENTRY
3218:src/xeq.c     **** 		else if (('D' | 1) == 'E')
3219:src/xeq.c     **** 			Cmdline[CmdLineEex] ^= 1;
3220:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
3221:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'D';
3222:src/xeq.c     **** 		else
3223:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'E';
3224:src/xeq.c     **** #  else
3225:src/xeq.c     **** 		else if (negative) {
3226:src/xeq.c     **** 			scopy(p - 1, p);
3227:src/xeq.c     **** 			CmdLineLength--;
3228:src/xeq.c     **** 		}
3229:src/xeq.c     **** 		else {
3230:src/xeq.c     **** 			xcopy(p + 1, p, CMDLINELEN - 1 - CmdLineEex);
3231:src/xeq.c     **** 			*p = '-';
3232:src/xeq.c     **** 			CmdLineLength++;
3233:src/xeq.c     **** 		}
3234:src/xeq.c     **** #  endif
3235:src/xeq.c     **** 		if (negative)
3236:src/xeq.c     **** 			report_warn(ERR_TOO_SMALL);
3237:src/xeq.c     **** 		else
3238:src/xeq.c     **** 			report_warn(ERR_TOO_BIG);
3239:src/xeq.c     **** 	}
3240:src/xeq.c     **** #endif
3241:src/xeq.c     **** }
3242:src/xeq.c     **** 
3243:src/xeq.c     **** /* We've encountered a CHS while entering the command line.
3244:src/xeq.c     ****  */
3245:src/xeq.c     **** static void cmdlinechs(void) {
3246:src/xeq.c     **** 	if (CmdLineEex) {
3247:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3248:src/xeq.c     **** 		// 'D' instead of 'E' indicates a negative exponent.
3249:src/xeq.c     **** 		// Four-digit exponents wouldn't fit into Cmdline if we used 'E-'.
3250:src/xeq.c     **** 		if (('D' | 1) == 'E')
3251:src/xeq.c     **** 			Cmdline[CmdLineEex] ^= 1;
3252:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
3253:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'D';
3254:src/xeq.c     **** 		else
3255:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'E';
3256:src/xeq.c     **** #else
3257:src/xeq.c     **** 		const unsigned int pos = CmdLineEex + 1;
3258:src/xeq.c     **** 		if (CmdLineLength <= pos) {
3259:src/xeq.c     **** 			if (CmdLineLength < CMDLINELEN)
3260:src/xeq.c     **** 				append_cmdline('-');
3261:src/xeq.c     **** 		} else if (Cmdline[pos] == '-') {
3262:src/xeq.c     **** 			if (CmdLineLength != pos)
3263:src/xeq.c     **** 				xcopy(Cmdline + pos, Cmdline + pos + 1, CmdLineLength-pos);
ARM GAS  /tmp/ccqED0AM.s 			page 68


3264:src/xeq.c     **** 			CmdLineLength--;
3265:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
3266:src/xeq.c     **** 			xcopy(Cmdline+pos+1, Cmdline+pos, CmdLineLength-pos);
3267:src/xeq.c     **** 			Cmdline[pos] = '-';
3268:src/xeq.c     **** 			CmdLineLength++;
3269:src/xeq.c     **** 		}
3270:src/xeq.c     **** #endif
3271:src/xeq.c     **** #if SP_EXP_ENTRY_CHS_DC == -1 || SP_EXP_ENTRY_CHS_DC == 1 \
3272:src/xeq.c     ****     || SP_EXP_ENTRY_CHS_DS == -1 || SP_EXP_ENTRY_CHS_DS == 1 \
3273:src/xeq.c     ****     || ((DP_EXP_ENTRY_CHS_DC == 1 || DP_EXP_ENTRY_CHS_DS == 1) && defined(LARGE_EXPONENT_ENTRY))
3274:src/xeq.c     **** 		exponent_adjusted(0);
3275:src/xeq.c     **** #endif
3276:src/xeq.c     **** 	} else {
3277:src/xeq.c     **** 		if (Cmdline[0] == '-') {
3278:src/xeq.c     **** 			if (CmdLineLength > 1)
3279:src/xeq.c     **** 				xcopy(Cmdline, Cmdline+1, CmdLineLength);
3280:src/xeq.c     **** 			CmdLineLength--;
3281:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
3282:src/xeq.c     **** 			xcopy(Cmdline+1, Cmdline, CmdLineLength);
3283:src/xeq.c     **** 			Cmdline[0] = '-';
3284:src/xeq.c     **** 			CmdLineLength++;
3285:src/xeq.c     **** 		}
3286:src/xeq.c     **** 	}
3287:src/xeq.c     **** }
3288:src/xeq.c     **** 
3289:src/xeq.c     **** /* Execute a tests command
3290:src/xeq.c     ****  */
3291:src/xeq.c     **** static void do_tst(int cmp, const enum tst_op op) {
3292:src/xeq.c     **** 	int a = 0;
3293:src/xeq.c     **** 	int iszero, isneg;
3294:src/xeq.c     **** 
3295:src/xeq.c     **** 	process_cmdline_set_lift();
3296:src/xeq.c     **** 
3297:src/xeq.c     **** 	if (is_intmode()) {
3298:src/xeq.c     **** 		unsigned long long int xv, yv;
3299:src/xeq.c     **** 		int xs, ys;
3300:src/xeq.c     **** 
3301:src/xeq.c     **** 		xv = extract_value(getX_int(), &xs);
3302:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
3303:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
3304:src/xeq.c     **** 			ys = 0;
3305:src/xeq.c     **** 		} else
3306:src/xeq.c     **** 			yv = extract_value(get_reg_n_int(cmp), &ys);
3307:src/xeq.c     **** 
3308:src/xeq.c     **** 		if (xv == 0 && yv == 0)
3309:src/xeq.c     **** 			iszero = 1;
3310:src/xeq.c     **** 		else
3311:src/xeq.c     **** 			iszero = (xv == yv) && (xs == ys);
3312:src/xeq.c     **** 
3313:src/xeq.c     **** 		if (xs == ys) {		// same sign
3314:src/xeq.c     **** 			if (xs)		// both negative
3315:src/xeq.c     **** 				isneg = xv > yv;
3316:src/xeq.c     **** 			else		// both positive
3317:src/xeq.c     **** 				isneg = xv < yv;
3318:src/xeq.c     **** 		} else
3319:src/xeq.c     **** 			isneg = xs;	// opposite signs
3320:src/xeq.c     **** 	} else {
ARM GAS  /tmp/ccqED0AM.s 			page 69


3321:src/xeq.c     **** 		decNumber t, x, r;
3322:src/xeq.c     **** 
3323:src/xeq.c     **** 		getX(&x);
3324:src/xeq.c     **** 		if (decNumberIsNaN(&x))
3325:src/xeq.c     **** 			goto flse;
3326:src/xeq.c     **** 
3327:src/xeq.c     **** 		getRegister(&t, cmp);
3328:src/xeq.c     **** 		if (decNumberIsNaN(&t))
3329:src/xeq.c     **** 			goto flse;
3330:src/xeq.c     **** 
3331:src/xeq.c     **** 		if (op == TST_APX) {
3332:src/xeq.c     **** 			decNumberRnd(&x, &x);
3333:src/xeq.c     **** 			if (cmp < CONST_REG_BASE)
3334:src/xeq.c     **** 				decNumberRnd(&t, &t);
3335:src/xeq.c     **** 		}
3336:src/xeq.c     **** 		dn_compare(&r, &x, &t);
3337:src/xeq.c     **** 		iszero = dn_eq0(&r);
3338:src/xeq.c     **** 		isneg = decNumberIsNegative(&r);
3339:src/xeq.c     **** 	}
3340:src/xeq.c     **** 
3341:src/xeq.c     **** 	switch (op) {
3342:src/xeq.c     **** 	case TST_APX:
3343:src/xeq.c     **** 	case TST_EQ:	a = iszero;		break;
3344:src/xeq.c     **** 	case TST_NE:	a = !iszero;		break;
3345:src/xeq.c     **** 	case TST_LT:	a = isneg && !iszero;	break;
3346:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
3347:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
3348:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
3349:src/xeq.c     **** 	default:	a = 0;			break;
3350:src/xeq.c     **** 	}
3351:src/xeq.c     **** 
3352:src/xeq.c     **** flse:	fin_tst(a);
3353:src/xeq.c     **** }
3354:src/xeq.c     **** 
3355:src/xeq.c     **** void check_zero(enum nilop op) {
3356:src/xeq.c     **** 	int neg;
3357:src/xeq.c     **** 	int zero;
3358:src/xeq.c     **** 
3359:src/xeq.c     **** 	if (is_intmode()) {
3360:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
3361:src/xeq.c     **** 		zero = (xv == 0);
3362:src/xeq.c     **** 	} else {
3363:src/xeq.c     **** 		decNumber x;
3364:src/xeq.c     **** 		getX(&x);
3365:src/xeq.c     **** 		neg = decNumberIsNegative(&x);
3366:src/xeq.c     **** 		zero = dn_eq0(&x);
3367:src/xeq.c     **** 	}
3368:src/xeq.c     **** 	if (op == OP_Xeq_pos0)
3369:src/xeq.c     **** 		fin_tst(zero && !neg);
3370:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
3371:src/xeq.c     **** 		fin_tst(zero && neg);
3372:src/xeq.c     **** }
3373:src/xeq.c     **** 
3374:src/xeq.c     **** void cmdtest(unsigned int arg, enum rarg op) {
3375:src/xeq.c     **** 	do_tst(arg, (enum tst_op)(op - RARG_TEST_EQ));
3376:src/xeq.c     **** }
3377:src/xeq.c     **** 
ARM GAS  /tmp/ccqED0AM.s 			page 70


3378:src/xeq.c     **** static void do_ztst(const decNumber *re, const decNumber *im, enum tst_op op) {
3379:src/xeq.c     **** 	decNumber x, y;
3380:src/xeq.c     **** 
3381:src/xeq.c     **** 	process_cmdline_set_lift();
3382:src/xeq.c     **** 	if (is_intmode()) {
3383:src/xeq.c     **** 		bad_mode_error();
3384:src/xeq.c     **** 		return;
3385:src/xeq.c     **** 	}
3386:src/xeq.c     **** 	getXY(&x, &y);
3387:src/xeq.c     **** 	if (decNumberIsNaN(&x) || decNumberIsNaN(&y) || decNumberIsNaN(re) || decNumberIsNaN(im)) {
3388:src/xeq.c     **** 		fin_tst(0);
3389:src/xeq.c     **** 		return;
3390:src/xeq.c     **** 	}
3391:src/xeq.c     **** 	fin_tst((op == TST_EQ) == (dn_eq(&x, re) && dn_eq(&y, im)));
3392:src/xeq.c     **** }
3393:src/xeq.c     **** 
3394:src/xeq.c     **** void cmdztest(unsigned int arg, enum rarg op) {
3395:src/xeq.c     **** 	decNumber re, im;
3396:src/xeq.c     **** 	getRegister(&re, arg);
3397:src/xeq.c     **** 	getRegister(&im, arg + 1);
3398:src/xeq.c     **** 	do_ztst(&re, &im, (enum tst_op)(op - RARG_TEST_ZEQ));
3399:src/xeq.c     **** }
3400:src/xeq.c     **** 
3401:src/xeq.c     **** static int incdec(unsigned int arg, int inc) {
3402:src/xeq.c     **** 	if (is_intmode()) {
3403:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
3404:src/xeq.c     **** 		int xs;
3405:src/xeq.c     **** 		unsigned long long int xv;
3406:src/xeq.c     **** 
3407:src/xeq.c     **** 		if (inc)
3408:src/xeq.c     **** 			x = intAdd(x, 1LL);
3409:src/xeq.c     **** 		else
3410:src/xeq.c     **** 			x = intSubtract(x, 1LL);
3411:src/xeq.c     **** 		set_reg_n_int(arg, x);
3412:src/xeq.c     **** 
3413:src/xeq.c     **** 		xv = extract_value(x, &xs);
3414:src/xeq.c     **** 		return xv != 0;
3415:src/xeq.c     **** 	} else {
3416:src/xeq.c     **** 		decNumber x, y;
3417:src/xeq.c     **** 
3418:src/xeq.c     **** 		getRegister(&x, arg);
3419:src/xeq.c     **** 		if (inc)
3420:src/xeq.c     **** 			dn_inc(&x);
3421:src/xeq.c     **** 		else
3422:src/xeq.c     **** 			dn_dec(&x);
3423:src/xeq.c     **** 		setRegister(arg, &x);
3424:src/xeq.c     **** 		decNumberTrunc(&y, &x);
3425:src/xeq.c     **** 		return ! dn_eq0(&y);
3426:src/xeq.c     **** 	}
3427:src/xeq.c     **** }
3428:src/xeq.c     **** 
3429:src/xeq.c     **** void cmdlincdec(unsigned int arg, enum rarg op) {
3430:src/xeq.c     **** 	incdec(arg, op == RARG_INC);
3431:src/xeq.c     **** }
3432:src/xeq.c     **** 
3433:src/xeq.c     **** void cmdloopz(unsigned int arg, enum rarg op) {
3434:src/xeq.c     **** 	fin_tst(incdec(arg, op == RARG_ISZ));
ARM GAS  /tmp/ccqED0AM.s 			page 71


3435:src/xeq.c     **** }
3436:src/xeq.c     **** 
3437:src/xeq.c     **** void cmdloop(unsigned int arg, enum rarg op) {
3438:src/xeq.c     **** 	if (is_intmode()) {
3439:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
3440:src/xeq.c     **** 		int xs;
3441:src/xeq.c     **** 		unsigned long long int xv;
3442:src/xeq.c     **** 
3443:src/xeq.c     **** 		if (op == RARG_ISG || op == RARG_ISE)
3444:src/xeq.c     **** 			x = intAdd(x, 1LL);
3445:src/xeq.c     **** 		else
3446:src/xeq.c     **** 			x = intSubtract(x, 1LL);
3447:src/xeq.c     **** 		set_reg_n_int(arg, x);
3448:src/xeq.c     **** 
3449:src/xeq.c     **** 		xv = extract_value(x, &xs);
3450:src/xeq.c     **** 		if (op == RARG_ISG)
3451:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
3452:src/xeq.c     **** 		else if (op == RARG_DSE)
3453:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
3454:src/xeq.c     **** 		else if (op == RARG_ISE)
3455:src/xeq.c     **** 			fin_tst(! (xs == 0 || xv == 0));	// >= 0
3456:src/xeq.c     **** 		else // if (op == RARG_DSL)
3457:src/xeq.c     **** 			fin_tst(! (xs != 0 && xv > 0));		// < 0
3458:src/xeq.c     **** 		return;
3459:src/xeq.c     **** 	} else {
3460:src/xeq.c     **** 		decNumber x, i, f, n, u;
3461:src/xeq.c     **** 
3462:src/xeq.c     **** 		getRegister(&x, arg);
3463:src/xeq.c     **** 
3464:src/xeq.c     **** 		// Break the number into the important bits
3465:src/xeq.c     **** 		// nnnnn.fffii
3466:src/xeq.c     **** 		dn_abs(&f, &x);
3467:src/xeq.c     **** 		decNumberTrunc(&n, &f);			// n = nnnnn
3468:src/xeq.c     **** 		dn_subtract(&u, &f, &n);		// u = .fffii
3469:src/xeq.c     **** 		if (decNumberIsNegative(&x))
3470:src/xeq.c     **** 			dn_minus(&n, &n);
3471:src/xeq.c     **** 		dn_mulpow10(&i, &u, 3);			// i = fff.ii
3472:src/xeq.c     **** 		decNumberTrunc(&f, &i);			// f = fff
3473:src/xeq.c     **** 		dn_subtract(&i, &i, &f);		// i = .ii
3474:src/xeq.c     **** 		dn_mul100(&x, &i);
3475:src/xeq.c     **** 		decNumberTrunc(&i, &x);			// i = ii
3476:src/xeq.c     **** 		if (dn_eq0(&i))
3477:src/xeq.c     **** 			dn_1(&i);
3478:src/xeq.c     **** 
3479:src/xeq.c     **** 		if (op == RARG_ISG || op == RARG_ISE) {
3480:src/xeq.c     **** 			dn_add(&n, &n, &i);
3481:src/xeq.c     **** 			dn_compare(&x, &f, &n);
3482:src/xeq.c     **** 			if (op == RARG_ISE)
3483:src/xeq.c     **** 				fin_tst(dn_gt0(&x));
3484:src/xeq.c     **** 			else
3485:src/xeq.c     **** 				fin_tst(dn_ge0(&x));
3486:src/xeq.c     **** 		} else {
3487:src/xeq.c     **** 			dn_subtract(&n, &n, &i);
3488:src/xeq.c     **** 			dn_compare(&x, &f, &n);
3489:src/xeq.c     **** 			if (op == RARG_DSL)
3490:src/xeq.c     **** 				fin_tst(dn_le0(&x));
3491:src/xeq.c     **** 			else
ARM GAS  /tmp/ccqED0AM.s 			page 72


3492:src/xeq.c     **** 				fin_tst(dn_lt0(&x));
3493:src/xeq.c     **** 		}
3494:src/xeq.c     **** 
3495:src/xeq.c     **** 		// Finally rebuild the result
3496:src/xeq.c     **** 		if (decNumberIsNegative(&n)) {
3497:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
3498:src/xeq.c     **** 		} else
3499:src/xeq.c     **** 			dn_add(&x, &n, &u);
3500:src/xeq.c     **** 		setRegister(arg, &x);
3501:src/xeq.c     **** 	}
3502:src/xeq.c     **** }
3503:src/xeq.c     **** 
3504:src/xeq.c     **** 
3505:src/xeq.c     **** /* Shift a real number by 10 to the specified power
3506:src/xeq.c     ****  */
3507:src/xeq.c     **** void op_shift_digit(unsigned int n, enum rarg op) {
3508:src/xeq.c     **** 	decNumber x;
3509:src/xeq.c     **** 	int adjust = n;
3510:src/xeq.c     **** 
3511:src/xeq.c     **** 	if (is_intmode()) {
3512:src/xeq.c     **** 		bad_mode_error();
3513:src/xeq.c     **** 		return;
3514:src/xeq.c     **** 	}
3515:src/xeq.c     **** 	getX(&x);
3516:src/xeq.c     **** 	setlastX();
3517:src/xeq.c     **** 	if (decNumberIsSpecial(&x) || dn_eq0(&x))
3518:src/xeq.c     **** 		return;
3519:src/xeq.c     **** 	if (op == RARG_SRD)
3520:src/xeq.c     **** 		adjust = -adjust;
3521:src/xeq.c     **** 	x.exponent += adjust;
3522:src/xeq.c     **** 	setX(&x);
3523:src/xeq.c     **** }
3524:src/xeq.c     **** 
3525:src/xeq.c     **** 
3526:src/xeq.c     **** /* Return a pointer to the byte with the indicated flag in it.
3527:src/xeq.c     ****  * also return a byte with the relevant bit mask set up.
3528:src/xeq.c     ****  * Also, handle local flags.
3529:src/xeq.c     ****  */
3530:src/xeq.c     **** static unsigned short int *flag_word(int n, unsigned short int *mask) {
 467              		.loc 1 3530 71 is_stmt 1 view -0
 468              		.cfi_startproc
 469              		@ args = 0, pretend = 0, frame = 0
 470              		@ frame_needed = 0, uses_anonymous_args = 0
 471              		@ link register save eliminated.
3531:src/xeq.c     **** 	unsigned short int *p;
 472              		.loc 1 3531 2 view .LVU143
3532:src/xeq.c     **** 
3533:src/xeq.c     **** 	if (n >= LOCAL_FLAG_BASE) {
 473              		.loc 1 3533 2 view .LVU144
 474              		.loc 1 3533 5 is_stmt 0 view .LVU145
 475 0000 6F28     		cmp	r0, #111
3530:src/xeq.c     **** 	unsigned short int *p;
 476              		.loc 1 3530 71 view .LVU146
 477 0002 10B4     		push	{r4}
 478              		.cfi_def_cfa_offset 4
 479              		.cfi_offset 4, -4
 480              		.loc 1 3533 5 view .LVU147
ARM GAS  /tmp/ccqED0AM.s 			page 73


 481 0004 2CDD     		ble	.L42
3534:src/xeq.c     **** 		n -= LOCAL_FLAG_BASE;
 482              		.loc 1 3534 3 is_stmt 1 view .LVU148
 483              		.loc 1 3534 5 is_stmt 0 view .LVU149
 484 0006 7038     		subs	r0, r0, #112
 485              	.LVL42:
3535:src/xeq.c     **** 		if (n > XROM_SYSTEM_FLAG_BASE && XromFlags.xIN) {
 486              		.loc 1 3535 3 is_stmt 1 view .LVU150
 487              		.loc 1 3535 6 is_stmt 0 view .LVU151
 488 0008 0828     		cmp	r0, #8
 489 000a 04DD     		ble	.L43
 490              		.loc 1 3535 33 discriminator 1 view .LVU152
 491 000c 194B     		ldr	r3, .L54
 492 000e 93F90120 		ldrsb	r2, [r3, #1]
 493 0012 002A     		cmp	r2, #0
 494 0014 18DB     		blt	.L44
 495              	.L43:
3536:src/xeq.c     **** 			// XROM special
3537:src/xeq.c     **** 			p = &XromFlagWord;
3538:src/xeq.c     **** 		}
3539:src/xeq.c     **** 		else if (LocalRegs & 1) {
 496              		.loc 1 3539 8 is_stmt 1 view .LVU153
 497              		.loc 1 3539 12 is_stmt 0 view .LVU154
 498 0016 184B     		ldr	r3, .L54+4
 499 0018 1B68     		ldr	r3, [r3]
 500 001a B3F8DE37 		ldrh	r3, [r3, #2014]
 501 001e 43F34A12 		sbfx	r2, r3, #5, #11
 502              		.loc 1 3539 11 view .LVU155
 503 0022 13F0200F 		tst	r3, #32
3540:src/xeq.c     **** 			// Odd frame: flags are at end of frame
3541:src/xeq.c     **** 			p = RetStk + LocalRegs + local_levels() - 1;
 504              		.loc 1 3541 44 view .LVU156
 505 0026 154B     		ldr	r3, .L54+8
 506 0028 1B68     		ldr	r3, [r3]
3539:src/xeq.c     **** 			// Odd frame: flags are at end of frame
 507              		.loc 1 3539 11 view .LVU157
 508 002a 1ED0     		beq	.L45
 509              		.loc 1 3541 4 is_stmt 1 view .LVU158
 510              	.LBB1331:
 511              	.LBI1331:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 512              		.loc 1 217 5 view .LVU159
 513              	.LBB1332:
 218:src/xeq.c     **** }
 514              		.loc 1 218 2 view .LVU160
 218:src/xeq.c     **** }
 515              		.loc 1 218 57 is_stmt 0 view .LVU161
 516 002c 002A     		cmp	r2, #0
 517 002e B8BF     		it	lt
 518 0030 33F81240 		ldrhlt	r4, [r3, r2, lsl #1]
 519              	.LBE1332:
 520              	.LBE1331:
 521              		.loc 1 3541 44 view .LVU162
 522 0034 02F10042 		add	r2, r2, #-2147483648
 523 0038 B4BF     		ite	lt
 524 003a C4F30B04 		ubfxlt	r4, r4, #0, #12
 525              	.LBB1334:
ARM GAS  /tmp/ccqED0AM.s 			page 74


 526              	.LBB1333:
 527 003e 0024     		movge	r4, #0
 528              	.LBE1333:
 529              	.LBE1334:
 530 0040 013A     		subs	r2, r2, #1
 531 0042 2244     		add	r2, r2, r4
 532              		.loc 1 3541 6 view .LVU163
 533 0044 03EB4203 		add	r3, r3, r2, lsl #1
 534              	.LVL43:
 535              	.L44:
3542:src/xeq.c     **** 		}
3543:src/xeq.c     **** 		else {
3544:src/xeq.c     **** 			// Even frame: Flags are at beginning of frame
3545:src/xeq.c     **** 			p = RetStk + LocalRegs + 1;
3546:src/xeq.c     **** 		}
3547:src/xeq.c     **** 	}
3548:src/xeq.c     **** 	else
3549:src/xeq.c     **** 		p = UserFlags;
3550:src/xeq.c     **** 
3551:src/xeq.c     **** 	if (mask != NULL)
 536              		.loc 1 3551 2 is_stmt 1 view .LVU164
 537              		.loc 1 3551 5 is_stmt 0 view .LVU165
 538 0048 21B1     		cbz	r1, .L47
3552:src/xeq.c     **** 		*mask = 1 << (n & 15);
 539              		.loc 1 3552 3 is_stmt 1 view .LVU166
 540              		.loc 1 3552 19 is_stmt 0 view .LVU167
 541 004a 00F00F04 		and	r4, r0, #15
 542              		.loc 1 3552 13 view .LVU168
 543 004e 0122     		movs	r2, #1
 544 0050 A240     		lsls	r2, r2, r4
 545              		.loc 1 3552 9 view .LVU169
 546 0052 0A80     		strh	r2, [r1]	@ movhi
 547              	.L47:
3553:src/xeq.c     **** 	return p + (n >> 4);
 548              		.loc 1 3553 2 is_stmt 1 view .LVU170
 549              		.loc 1 3553 16 is_stmt 0 view .LVU171
 550 0054 0011     		asrs	r0, r0, #4
 551              	.LVL44:
3554:src/xeq.c     **** }
 552              		.loc 1 3554 1 view .LVU172
 553 0056 03EB4000 		add	r0, r3, r0, lsl #1
 554 005a 5DF8044B 		ldr	r4, [sp], #4
 555              		.cfi_remember_state
 556              		.cfi_restore 4
 557              		.cfi_def_cfa_offset 0
 558 005e 7047     		bx	lr
 559              	.LVL45:
 560              	.L42:
 561              		.cfi_restore_state
3549:src/xeq.c     **** 
 562              		.loc 1 3549 3 is_stmt 1 view .LVU173
3549:src/xeq.c     **** 
 563              		.loc 1 3549 7 is_stmt 0 view .LVU174
 564 0060 054B     		ldr	r3, .L54+4
3549:src/xeq.c     **** 
 565              		.loc 1 3549 5 view .LVU175
 566 0062 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccqED0AM.s 			page 75


 567 0064 03F5FE63 		add	r3, r3, #2032
 568              	.LVL46:
3549:src/xeq.c     **** 
 569              		.loc 1 3549 5 view .LVU176
 570 0068 EEE7     		b	.L44
 571              	.LVL47:
 572              	.L45:
3545:src/xeq.c     **** 		}
 573              		.loc 1 3545 4 is_stmt 1 view .LVU177
3545:src/xeq.c     **** 		}
 574              		.loc 1 3545 27 is_stmt 0 view .LVU178
 575 006a 0132     		adds	r2, r2, #1
3545:src/xeq.c     **** 		}
 576              		.loc 1 3545 6 view .LVU179
 577 006c 03EB4203 		add	r3, r3, r2, lsl #1
 578              	.LVL48:
3545:src/xeq.c     **** 		}
 579              		.loc 1 3545 6 view .LVU180
 580 0070 EAE7     		b	.L44
 581              	.L55:
 582 0072 00BF     		.align	2
 583              	.L54:
 584 0074 00000000 		.word	XromParams
 585 0078 00000000 		.word	main_ram
 586 007c 00000000 		.word	RetStk
 587              		.cfi_endproc
 588              	.LFE198:
 590              		.section	.text.set_zero,"ax",%progbits
 591              		.align	1
 592              		.p2align 2,,3
 593              		.syntax unified
 594              		.thumb
 595              		.thumb_func
 596              		.fpu fpv4-sp-d16
 598              	set_zero:
 599              	.LVL49:
 600              	.LFB106:
1546:src/xeq.c     **** 	zero_regs(x, 1);
 601              		.loc 1 1546 35 is_stmt 1 view -0
 602              		.cfi_startproc
 603              		@ args = 0, pretend = 0, frame = 0
 604              		@ frame_needed = 0, uses_anonymous_args = 0
 605              		@ link register save eliminated.
1547:src/xeq.c     **** }
 606              		.loc 1 1547 2 view .LVU182
 607              	.LBB1335:
 608              	.LBI1335:
1518:src/xeq.c     **** #if 0
 609              		.loc 1 1518 6 view .LVU183
 610              	.LBB1336:
1533:src/xeq.c     **** #endif
 611              		.loc 1 1533 2 view .LVU184
 612              	.LBB1337:
 613              	.LBI1337:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 614              		.loc 1 1118 5 view .LVU185
 615              	.LBB1338:
ARM GAS  /tmp/ccqED0AM.s 			page 76


1119:src/xeq.c     **** }
 616              		.loc 1 1119 2 view .LVU186
1119:src/xeq.c     **** }
 617              		.loc 1 1119 24 is_stmt 0 view .LVU187
 618 0000 074B     		ldr	r3, .L57
 619 0002 1B68     		ldr	r3, [r3]
 620 0004 B3F8E837 		ldrh	r3, [r3, #2024]
 621 0008 44F20102 		movw	r2, #16385
 622 000c 1A40     		ands	r2, r2, r3
 623              	.LBE1338:
 624              	.LBE1337:
1533:src/xeq.c     **** #endif
 625              		.loc 1 1533 2 view .LVU188
 626 000e B2F5804F 		cmp	r2, #16384
 627 0012 0CBF     		ite	eq
 628 0014 1022     		moveq	r2, #16
 629 0016 0822     		movne	r2, #8
 630 0018 0021     		movs	r1, #0
 631 001a FFF7FEBF 		b	xset
 632              	.LVL50:
 633              	.L58:
1533:src/xeq.c     **** #endif
 634              		.loc 1 1533 2 view .LVU189
 635 001e 00BF     		.align	2
 636              	.L57:
 637 0020 00000000 		.word	main_ram
 638              	.LBE1336:
 639              	.LBE1335:
 640              		.cfi_endproc
 641              	.LFE106:
 643              		.section	.text.intResult,"ax",%progbits
 644              		.align	1
 645              		.p2align 2,,3
 646              		.syntax unified
 647              		.thumb
 648              		.thumb_func
 649              		.fpu fpv4-sp-d16
 651              	intResult:
 652              	.LVL51:
 653              	.LFB239:
3555:src/xeq.c     **** 
3556:src/xeq.c     **** int get_user_flag(int n) {
3557:src/xeq.c     **** 	unsigned short mask;
3558:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
3559:src/xeq.c     **** 
3560:src/xeq.c     **** 	return (*f & mask)? 1 : 0;
3561:src/xeq.c     **** }
3562:src/xeq.c     **** 
3563:src/xeq.c     **** void put_user_flag(int n, int f) {
3564:src/xeq.c     **** 	if (f)	set_user_flag(n);
3565:src/xeq.c     **** 	else	clr_user_flag(n);
3566:src/xeq.c     **** }
3567:src/xeq.c     **** 
3568:src/xeq.c     **** #ifndef set_user_flag
3569:src/xeq.c     **** void set_user_flag(int n) {
3570:src/xeq.c     **** 	unsigned short mask;
3571:src/xeq.c     **** 	unsigned short *const f = flag_word(n, &mask);
ARM GAS  /tmp/ccqED0AM.s 			page 77


3572:src/xeq.c     **** 
3573:src/xeq.c     **** 	*f |= mask;
3574:src/xeq.c     **** }
3575:src/xeq.c     **** 
3576:src/xeq.c     **** void clr_user_flag(int n) {
3577:src/xeq.c     **** 	unsigned short mask;
3578:src/xeq.c     **** 	unsigned short *const f = flag_word(n, &mask);
3579:src/xeq.c     **** 
3580:src/xeq.c     **** 	*f &= ~mask;
3581:src/xeq.c     **** }
3582:src/xeq.c     **** #endif
3583:src/xeq.c     **** 
3584:src/xeq.c     **** void cmdflag(unsigned int arg, enum rarg op) {
3585:src/xeq.c     **** 	unsigned short mask;
3586:src/xeq.c     **** 	unsigned short *const f = flag_word(arg, &mask);
3587:src/xeq.c     **** 	int flg = *f & mask;
3588:src/xeq.c     **** 
3589:src/xeq.c     **** 	switch (op) {
3590:src/xeq.c     **** 	case RARG_SF:	flg = 1;			   break;
3591:src/xeq.c     **** 	case RARG_CF:	flg = 0;			   break;
3592:src/xeq.c     **** 	case RARG_FF:	flg = flg? 0 : 1;		   break;
3593:src/xeq.c     **** 
3594:src/xeq.c     **** 	case RARG_FS:	fin_tst(flg);			   return;
3595:src/xeq.c     **** 	case RARG_FC:	fin_tst(! flg);			   return;
3596:src/xeq.c     **** 
3597:src/xeq.c     **** 	case RARG_FSC:	fin_tst(flg); flg = 0;		   break;
3598:src/xeq.c     **** 	case RARG_FSS:	fin_tst(flg); flg = 1;		   break;
3599:src/xeq.c     **** 	case RARG_FSF:	fin_tst(flg); flg = flg ? 0 : 1;   break;
3600:src/xeq.c     **** 
3601:src/xeq.c     **** 	case RARG_FCC:	fin_tst(! flg);	flg = 0;	   break;
3602:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
3603:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
3604:src/xeq.c     **** 
3605:src/xeq.c     **** 	default:
3606:src/xeq.c     **** 		return;
3607:src/xeq.c     **** 	}
3608:src/xeq.c     **** 
3609:src/xeq.c     **** 	// And write the value back
3610:src/xeq.c     **** 	if (flg)
3611:src/xeq.c     **** 		*f |= mask;
3612:src/xeq.c     **** 	else
3613:src/xeq.c     **** 		*f &= ~mask;
3614:src/xeq.c     **** 
3615:src/xeq.c     **** 	if ( arg == A_FLAG ) {
3616:src/xeq.c     **** 		dot( BIG_EQ, flg );
3617:src/xeq.c     **** 		finish_display(); // BIG_EQ
3618:src/xeq.c     **** 	}
3619:src/xeq.c     **** }
3620:src/xeq.c     **** 
3621:src/xeq.c     **** /* Reset all flags to off/false
3622:src/xeq.c     ****  */
3623:src/xeq.c     **** void clrflags(enum nilop op) {
3624:src/xeq.c     **** 	xset(UserFlags, 0, sizeof(UserFlags));
3625:src/xeq.c     **** 	if (LocalRegs < 0) {
3626:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
3627:src/xeq.c     **** 	}
3628:src/xeq.c     **** }
ARM GAS  /tmp/ccqED0AM.s 			page 78


3629:src/xeq.c     **** 
3630:src/xeq.c     **** 
3631:src/xeq.c     **** /* Integer word size
3632:src/xeq.c     ****  */
3633:src/xeq.c     **** void intws(unsigned int arg, enum rarg op) {
3634:src/xeq.c     **** 	if (is_intmode()) {
3635:src/xeq.c     **** 		int i, ss = stack_size();
3636:src/xeq.c     **** 		unsigned int oldlen = UState.int_len;
3637:src/xeq.c     **** 		long long int v;
3638:src/xeq.c     **** 
3639:src/xeq.c     **** 		for (i=0; i<ss; i++) {
3640:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
3641:src/xeq.c     **** 			UState.int_len = arg;
3642:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, mask_value(v));
3643:src/xeq.c     **** 			UState.int_len = oldlen;
3644:src/xeq.c     **** 		}
3645:src/xeq.c     **** 		v = mask_value(get_reg_n_int(regL_idx));
3646:src/xeq.c     **** 		UState.int_len = arg;
3647:src/xeq.c     **** 		set_reg_n_int(regL_idx, mask_value(v));
3648:src/xeq.c     **** 	} else
3649:src/xeq.c     **** 	    UState.int_len = arg;
3650:src/xeq.c     **** }
3651:src/xeq.c     **** 
3652:src/xeq.c     **** 
3653:src/xeq.c     **** /* Convert from a real to a fraction
3654:src/xeq.c     ****  */
3655:src/xeq.c     **** 
3656:src/xeq.c     **** void get_maxdenom(decNumber *d) {
3657:src/xeq.c     **** 	const unsigned int dm = UState.denom_max;
3658:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
3659:src/xeq.c     **** }
3660:src/xeq.c     **** 
3661:src/xeq.c     **** void op_2frac(enum nilop op) {
3662:src/xeq.c     **** 	decNumber z, n, d, t;
3663:src/xeq.c     **** 
3664:src/xeq.c     **** 	if (UState.intm) {
3665:src/xeq.c     **** 		setX_int(1);
3666:src/xeq.c     **** 		return;
3667:src/xeq.c     **** 	}
3668:src/xeq.c     **** 
3669:src/xeq.c     **** 	getY(&z);			// Stack has been lifted already
3670:src/xeq.c     **** 	decNumber2Fraction(&n, &d, &z);
3671:src/xeq.c     **** 	setXY(&d, &n);			// Set numerator and denominator
3672:src/xeq.c     **** 	if (State2.runmode) {
3673:src/xeq.c     **** 		dn_divide(&t, &n, &d);
3674:src/xeq.c     **** 		dn_compare(&n, &t, &z);
3675:src/xeq.c     **** 		if (dn_eq0(&n))
3676:src/xeq.c     **** 			DispMsg = "y/x =";
3677:src/xeq.c     **** 		else if (decNumberIsNegative(&n))
3678:src/xeq.c     **** #ifdef INCLUDE_FONT_ESCAPE
3679:src/xeq.c     **** 			DispMsg = "y/x \007\344<";
3680:src/xeq.c     **** 		else
3681:src/xeq.c     **** 			DispMsg = "y/x \007\344>";
3682:src/xeq.c     **** #else
3683:src/xeq.c     **** 			DispMsg = "y/x <";
3684:src/xeq.c     **** 		else
3685:src/xeq.c     **** 			DispMsg = "y/x >";
ARM GAS  /tmp/ccqED0AM.s 			page 79


3686:src/xeq.c     **** #endif
3687:src/xeq.c     **** 	}
3688:src/xeq.c     **** }
3689:src/xeq.c     **** 
3690:src/xeq.c     **** void op_fracdenom(enum nilop op) {
3691:src/xeq.c     **** 	int s;
3692:src/xeq.c     **** 	unsigned long long int i;
3693:src/xeq.c     **** 
3694:src/xeq.c     **** 	i = getX_int_sgn(&s);
3695:src/xeq.c     **** 	if (i > 9999)
3696:src/xeq.c     **** 		UState.denom_max = 0;
3697:src/xeq.c     **** 	else if (i != 1)
3698:src/xeq.c     **** 		UState.denom_max = (unsigned int) i;
3699:src/xeq.c     **** 	else {
3700:src/xeq.c     **** 		setlastX();
3701:src/xeq.c     **** 		setX_int_sgn(UState.denom_max, 0);
3702:src/xeq.c     **** 	}
3703:src/xeq.c     **** }
3704:src/xeq.c     **** 
3705:src/xeq.c     **** 
3706:src/xeq.c     **** /*  Switching from an integer mode to real mode
3707:src/xeq.c     ****  *  We convert the stack and LastX 
3708:src/xeq.c     ****  */
3709:src/xeq.c     **** static const unsigned short int StackRegMask[] = { 0x10f, 0x1ff };
3710:src/xeq.c     **** 
3711:src/xeq.c     **** void op_float(enum nilop op) {
3712:src/xeq.c     **** 
3713:src/xeq.c     **** 	if (is_intmode()) {
3714:src/xeq.c     **** 		int i;
3715:src/xeq.c     **** 		int mask = StackRegMask[UState.stack_depth];
3716:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
3717:src/xeq.c     **** 			if (mask & 1) {
3718:src/xeq.c     **** 				// register belongs to stack
3719:src/xeq.c     **** 				register_from_int(i, i, op == OP_FLOAT_XIN);
3720:src/xeq.c     **** 			}
3721:src/xeq.c     **** 			else if (is_dblmode()) {
3722:src/xeq.c     **** 				// expand the other registers which have been left
3723:src/xeq.c     **** 				// in decimal64 format by the integer mode switch
3724:src/xeq.c     **** 				packed128_from_packed(&(get_reg_n(i)->d), Regs + i);
3725:src/xeq.c     **** 			}
3726:src/xeq.c     **** 		}
3727:src/xeq.c     **** 	}
3728:src/xeq.c     **** 	if (op != OP_FLOAT_XIN && op != OP_FLOAT_RCLM) {
3729:src/xeq.c     **** 		UState.fract = 0;
3730:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
3731:src/xeq.c     **** 	}
3732:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
3733:src/xeq.c     **** }
3734:src/xeq.c     **** 
3735:src/xeq.c     **** /*  Switch to integer mode.
3736:src/xeq.c     ****  *  We convert the stack and LastX
3737:src/xeq.c     ****  */
3738:src/xeq.c     **** static void switch_to_int(void) {
3739:src/xeq.c     **** 	int i;
3740:src/xeq.c     **** 	int mask = StackRegMask[UState.stack_depth];
3741:src/xeq.c     **** 	const int dbl = is_dblmode();
3742:src/xeq.c     **** 
ARM GAS  /tmp/ccqED0AM.s 			page 80


3743:src/xeq.c     **** 	for (i = regK_idx; i >= regX_idx; --i, mask <<= 1) {
3744:src/xeq.c     **** 		if (mask & 0x800) {
3745:src/xeq.c     **** 			// register belongs to stack
3746:src/xeq.c     **** 			int_from_register(i, i);
3747:src/xeq.c     **** 		}
3748:src/xeq.c     **** 		else if (dbl) {
3749:src/xeq.c     **** 			// compress the other registers to save them while integer mode is active
3750:src/xeq.c     **** 			packed_from_packed128(Regs + i, &(get_reg_n(i)->d));
3751:src/xeq.c     **** 		}
3752:src/xeq.c     **** 	}
3753:src/xeq.c     **** }
3754:src/xeq.c     **** 
3755:src/xeq.c     **** static void set_base(unsigned int b) {
3756:src/xeq.c     **** 	UState.int_base = b - 1;
3757:src/xeq.c     **** 	if (!is_intmode())
3758:src/xeq.c     **** 		switch_to_int();
3759:src/xeq.c     **** }
3760:src/xeq.c     **** 
3761:src/xeq.c     **** void set_int_base(unsigned int arg, enum rarg op) {
3762:src/xeq.c     **** 	if (arg < 2) {
3763:src/xeq.c     **** 		if (arg == 0)
3764:src/xeq.c     **** 			op_float(OP_FLOAT);
3765:src/xeq.c     **** 		else
3766:src/xeq.c     **** 			op_fract(OP_FRACT);
3767:src/xeq.c     **** 	} else
3768:src/xeq.c     **** 		set_base(arg);
3769:src/xeq.c     **** }
3770:src/xeq.c     **** 
3771:src/xeq.c     **** 
3772:src/xeq.c     **** void op_fract(enum nilop op) {
3773:src/xeq.c     **** 	op_float(OP_FLOAT);
3774:src/xeq.c     **** 	UState.fract = 1;
3775:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
3776:src/xeq.c     **** 		UState.improperfrac = 1;
3777:src/xeq.c     **** 	else if (op == OP_FRACPROPER)
3778:src/xeq.c     **** 		UState.improperfrac = 0;
3779:src/xeq.c     **** }
3780:src/xeq.c     **** 
3781:src/xeq.c     **** #ifdef INCLUDE_USER_MODE
3782:src/xeq.c     **** /* Save and restore user state.
3783:src/xeq.c     ****  */
3784:src/xeq.c     **** void cmdsavem(unsigned int arg, enum rarg op) {
3785:src/xeq.c     **** 	xcopy( get_reg_n(arg), &UState, sizeof(unsigned long long int) );
3786:src/xeq.c     **** }
3787:src/xeq.c     **** 
3788:src/xeq.c     **** void cmdrestm(unsigned int arg, enum rarg op) {
3789:src/xeq.c     **** 	const int dbl = is_dblmode();
3790:src/xeq.c     **** 	const int intm = is_intmode();
3791:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
3792:src/xeq.c     **** 
3793:src/xeq.c     **** 	// Fix things
3794:src/xeq.c     **** #ifndef DM42
3795:src/xeq.c     **** 	if ( UState.contrast == 0 )
3796:src/xeq.c     **** 		UState.contrast = 6;
3797:src/xeq.c     **** #endif
3798:src/xeq.c     **** 	if (intm != is_intmode()) {
3799:src/xeq.c     **** 		// Switch back to decimal or integer mode
ARM GAS  /tmp/ccqED0AM.s 			page 81


3800:src/xeq.c     **** 		UState.intm = intm;
3801:src/xeq.c     **** 		if (intm)
3802:src/xeq.c     **** 			op_float(OP_FLOAT_RCLM);
3803:src/xeq.c     **** 		else
3804:src/xeq.c     **** 			switch_to_int();
3805:src/xeq.c     **** 	}
3806:src/xeq.c     **** 	if (! is_intmode() && dbl != is_dblmode()) {
3807:src/xeq.c     **** 		// Switch back to double/single precision
3808:src/xeq.c     **** 		UState.mode_double = dbl;
3809:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
3810:src/xeq.c     **** 	}
3811:src/xeq.c     **** }
3812:src/xeq.c     **** #endif
3813:src/xeq.c     **** 
3814:src/xeq.c     **** /* Process a single digit.
3815:src/xeq.c     ****  */
3816:src/xeq.c     **** #if 0 // unused
3817:src/xeq.c     **** static int is_digit(const char c) {
3818:src/xeq.c     **** 	if (c >= '0' && c <= '9')
3819:src/xeq.c     **** 		return 1;
3820:src/xeq.c     **** 	return 0;
3821:src/xeq.c     **** }
3822:src/xeq.c     **** 
3823:src/xeq.c     **** static int is_xdigit(const char c) {
3824:src/xeq.c     **** 	if (is_digit(c) || (c >= 'A' && c <= 'F'))
3825:src/xeq.c     **** 		return 1;
3826:src/xeq.c     **** 	return 0;
3827:src/xeq.c     **** }
3828:src/xeq.c     **** #endif
3829:src/xeq.c     **** 
3830:src/xeq.c     **** static void digit(unsigned int c) {
3831:src/xeq.c     **** 	const int intm = is_intmode();
3832:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
3833:src/xeq.c     **** 
3834:src/xeq.c     **** 	if (Cmdline[0] == '-')
3835:src/xeq.c     **** 		lim++;
3836:src/xeq.c     **** 	if (intm) {
3837:src/xeq.c     **** 		if (c >= int_base()) {
3838:src/xeq.c     **** 			report_warn(ERR_DIGIT);
3839:src/xeq.c     **** 			return;
3840:src/xeq.c     **** 		}
3841:src/xeq.c     **** 	} else {
3842:src/xeq.c     **** 		if (c >= 10) {
3843:src/xeq.c     **** 			report_warn(ERR_DIGIT);
3844:src/xeq.c     **** 			return;
3845:src/xeq.c     **** 		}
3846:src/xeq.c     **** 
3847:src/xeq.c     **** 		if (CmdLineEex) {
3848:src/xeq.c     **** 			lim = CMDLINELEN;
3849:src/xeq.c     **** #ifdef SHIFT_EXPONENT
3850:src/xeq.c     **** 			if (CmdLineLength >= lim) {
3851:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
3852:src/xeq.c     **** 
3853:src/xeq.c     **** 				if (*p == '-')
3854:src/xeq.c     **** 					p++;
3855:src/xeq.c     **** 				while (p < &Cmdline[CMDLINELEN]) {
3856:src/xeq.c     **** 					p[0] = p[1];
ARM GAS  /tmp/ccqED0AM.s 			page 82


3857:src/xeq.c     **** 					p++;
3858:src/xeq.c     **** 				}
3859:src/xeq.c     **** 				CmdLineLength--;
3860:src/xeq.c     **** 			}
3861:src/xeq.c     **** #endif
3862:src/xeq.c     **** 		}
3863:src/xeq.c     **** 		else {
3864:src/xeq.c     **** 			lim += CmdLineDot;
3865:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
3866:src/xeq.c     **** 			if (CmdLineDot >= 2) {
3867:src/xeq.c     **** #  ifdef FRACTION_ENTRY_OVERFLOW_LEFT
3868:src/xeq.c     **** 				// Make space for the minus sign
3869:src/xeq.c     **** 				lim = CMDLINELEN - (Cmdline[0] != '-');
3870:src/xeq.c     **** #  elif defined(INCLUDE_DOUBLEDOT_FRACTIONS)
3871:src/xeq.c     **** 				lim += 1 + (find_char(Cmdline, '.')[1] == '.');
3872:src/xeq.c     **** #  else
3873:src/xeq.c     **** 				lim++;
3874:src/xeq.c     **** #  endif
3875:src/xeq.c     **** 			}
3876:src/xeq.c     **** #endif
3877:src/xeq.c     **** 		}
3878:src/xeq.c     **** 	}
3879:src/xeq.c     **** 	if (CmdLineLength >= lim
3880:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
3881:src/xeq.c     **** 		report_warn(ERR_TOO_LONG);
3882:src/xeq.c     **** 		return;
3883:src/xeq.c     **** 	}
3884:src/xeq.c     **** 
3885:src/xeq.c     **** 	if (c >= 10)
3886:src/xeq.c     **** 		append_cmdline(c - 10 + 'A');
3887:src/xeq.c     **** 	else {
3888:src/xeq.c     **** 		// Leading zeros in the exponent aren't visible to the user,
3889:src/xeq.c     **** 		// and they're removed automatically if digits are shifted,
3890:src/xeq.c     **** 		// so it's more consistent if they can't be entered, either.
3891:src/xeq.c     **** 		if (c == 0 && CmdLineEex) {
3892:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
3893:src/xeq.c     **** 				return;
3894:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3895:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'D')
3896:src/xeq.c     **** 				return;
3897:src/xeq.c     **** #else
3898:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == '-')
3899:src/xeq.c     **** 				return;
3900:src/xeq.c     **** #endif
3901:src/xeq.c     **** 		}
3902:src/xeq.c     **** 
3903:src/xeq.c     **** 		append_cmdline(c + '0');
3904:src/xeq.c     **** 
3905:src/xeq.c     **** 		if (CmdLineEex)
3906:src/xeq.c     **** 			exponent_adjusted(1);
3907:src/xeq.c     **** 	}
3908:src/xeq.c     **** }
3909:src/xeq.c     **** 
3910:src/xeq.c     **** 
3911:src/xeq.c     **** void set_entry() {
3912:src/xeq.c     **** 	if (!Running && !XromRunning)
3913:src/xeq.c     **** 		State.entryp = 1;
ARM GAS  /tmp/ccqED0AM.s 			page 83


3914:src/xeq.c     **** }
3915:src/xeq.c     **** 
3916:src/xeq.c     **** 
3917:src/xeq.c     **** /* Decode and process the specials.  These are niladic functions and
3918:src/xeq.c     ****  * commands with non-standard stack operation.
3919:src/xeq.c     ****  */
3920:src/xeq.c     **** static void specials(const opcode op) {
3921:src/xeq.c     **** 	int opm = argKIND(op);
3922:src/xeq.c     **** 
3923:src/xeq.c     **** 	switch (opm) {
3924:src/xeq.c     **** 	case OP_0:	case OP_1:	case OP_2:
3925:src/xeq.c     **** 	case OP_3:	case OP_4:	case OP_5:
3926:src/xeq.c     **** 	case OP_6:	case OP_7:	case OP_8:
3927:src/xeq.c     **** 	case OP_9:	case OP_A:	case OP_B:
3928:src/xeq.c     **** 	case OP_C:	case OP_D:	case OP_E:
3929:src/xeq.c     **** 	case OP_F:
3930:src/xeq.c     **** 		digit(opm - OP_0);
3931:src/xeq.c     **** 		break;
3932:src/xeq.c     **** 
3933:src/xeq.c     **** 	case OP_DOT:
3934:src/xeq.c     **** 		if (is_intmode())
3935:src/xeq.c     **** 			break;
3936:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
3937:src/xeq.c     **** 		if (CmdLineDot < 2 && !CmdLineEex && CmdLineLength < 13 + CmdLineDot) {
3938:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
3939:src/xeq.c     **** #else
3940:src/xeq.c     **** #  if defined(PRETTY_FRACTION_ENTRY)
3941:src/xeq.c     **** 		if (CmdLineDot < 2 && !CmdLineEex && CmdLineLength < 12 + 2*CmdLineDot) {
3942:src/xeq.c     **** #  else
3943:src/xeq.c     **** 		if (CmdLineDot < 2 && !CmdLineEex && CmdLineLength < 12 + CmdLineDot) {
3944:src/xeq.c     **** #  endif
3945:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '.'
3946:src/xeq.c     ****                             || Cmdline[CmdLineLength-1] == '-')
3947:src/xeq.c     **** #endif
3948:src/xeq.c     **** 				digit(0);
3949:src/xeq.c     **** 			CmdLineDot++;
3950:src/xeq.c     **** 			append_cmdline('.');
3951:src/xeq.c     **** 		}
3952:src/xeq.c     **** 		break;
3953:src/xeq.c     **** 
3954:src/xeq.c     **** 	case OP_EEX:
3955:src/xeq.c     **** 		if (is_intmode())
3956:src/xeq.c     **** 			break;
3957:src/xeq.c     **** 		else {
3958:src/xeq.c     **** #if INCLUDE_EEX_PI == 2
3959:src/xeq.c     **** 			const int eex_pi = 1;
3960:src/xeq.c     **** #elif INCLUDE_EEX_PI == 1
3961:src/xeq.c     **** 			const int eex_pi = get_user_flag(regL_idx);
3962:src/xeq.c     **** #else
3963:src/xeq.c     **** 			const int eex_pi = 0;
3964:src/xeq.c     **** #endif
3965:src/xeq.c     **** 
3966:src/xeq.c     **** 			if (CmdLineDot == 2) {
3967:src/xeq.c     **** 				if (eex_pi) {
3968:src/xeq.c     **** 					// fraction entered (two dots); execute ENTER and enter pi
3969:src/xeq.c     **** 					if (is_bad_cmdline()) {
3970:src/xeq.c     **** 						if (Running || XromRunning)
ARM GAS  /tmp/ccqED0AM.s 			page 84


3971:src/xeq.c     **** 							report_err(ERR_DOMAIN);
3972:src/xeq.c     **** 						break;
3973:src/xeq.c     **** 					}
3974:src/xeq.c     **** 					process_cmdline();
3975:src/xeq.c     **** 					lift();
3976:src/xeq.c     **** 					copyreg(StackBase, get_const(OP_PI, is_dblmode()));
3977:src/xeq.c     **** 					set_lift();
3978:src/xeq.c     **** 				}
3979:src/xeq.c     **** 				break;
3980:src/xeq.c     **** 			}
3981:src/xeq.c     **** 			if (CmdLineEex || CmdLineLength >= CMDLINELEN)
3982:src/xeq.c     **** 				break;
3983:src/xeq.c     **** 			if (eex_pi && CmdLineLength == 0) {
3984:src/xeq.c     **** 				// empty command line: enter pi
3985:src/xeq.c     **** 				lift_if_enabled();
3986:src/xeq.c     **** 				copyreg(StackBase, get_const(OP_PI, is_dblmode()));
3987:src/xeq.c     **** 				set_lift();
3988:src/xeq.c     **** 				break;
3989:src/xeq.c     **** 			}
3990:src/xeq.c     **** #if !(FRACTION_MODE_INPUT & 1)
3991:src/xeq.c     **** 			if (UState.fract)
3992:src/xeq.c     **** 				break;
3993:src/xeq.c     **** #endif
3994:src/xeq.c     **** 			if (CmdLineLength == 0)
3995:src/xeq.c     **** 				digit(1);
3996:src/xeq.c     **** 			CmdLineEex = CmdLineLength;
3997:src/xeq.c     **** 			append_cmdline('E');
3998:src/xeq.c     **** 		}
3999:src/xeq.c     **** 		break;
4000:src/xeq.c     **** 
4001:src/xeq.c     **** 	case OP_CHS:
4002:src/xeq.c     **** 		if (CmdLineLength)
4003:src/xeq.c     **** 			cmdlinechs();
4004:src/xeq.c     **** 		else if (is_intmode()) {
4005:src/xeq.c     **** 			setX_int(intChs(getX_int()));
4006:src/xeq.c     **** 			set_lift();
4007:src/xeq.c     **** 		} else {
4008:src/xeq.c     **** 			decNumber x, r;
4009:src/xeq.c     **** 
4010:src/xeq.c     **** 			getX(&x);
4011:src/xeq.c     **** 			dn_minus(&r, &x);
4012:src/xeq.c     **** 			setX(&r);
4013:src/xeq.c     **** 			set_lift();
4014:src/xeq.c     **** 		}
4015:src/xeq.c     **** 		break;
4016:src/xeq.c     **** 
4017:src/xeq.c     **** 	case OP_CLX:
4018:src/xeq.c     **** 		if (Running)
4019:src/xeq.c     **** 			illegal(op);
4020:src/xeq.c     **** 		else if (CmdLineLength) {
4021:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
4022:src/xeq.c     **** 			if (CmdLineEex != 0 && Cmdline[CmdLineLength-1] == 'D') {
4023:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
4024:src/xeq.c     **** 				break;
4025:src/xeq.c     **** 			}
4026:src/xeq.c     **** #endif
4027:src/xeq.c     **** 			CmdLineLength--;
ARM GAS  /tmp/ccqED0AM.s 			page 85


4028:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
4029:src/xeq.c     **** 				CmdLineEex = 0;
4030:src/xeq.c     **** 			else if (Cmdline[CmdLineLength] == '.')
4031:src/xeq.c     **** 				CmdLineDot--;
4032:src/xeq.c     **** 		} else
4033:src/xeq.c     **** 			clrx(OP_rCLX);
4034:src/xeq.c     **** 		break;
4035:src/xeq.c     **** 
4036:src/xeq.c     **** 		case OP_ENTER:
4037:src/xeq.c     **** 		  if (ENTRY_RPN_ENABLED) {  
4038:src/xeq.c     **** 		    if ( CmdLineLength && !(XromRunning || Running) ) { 
4039:src/xeq.c     **** 		      //exclude stack lift if there is something in the input line AND if NOT running code i.e. X
4040:src/xeq.c     **** 		      process_cmdline();     //JM
4041:src/xeq.c     **** 		    } else {                       //JM
4042:src/xeq.c     **** 		      process_cmdline();
4043:src/xeq.c     **** 		      lift();
4044:src/xeq.c     **** 		      if ( (XromRunning || Running) ) {//JMTEST Explicitly including standard functionality if co
4045:src/xeq.c     **** 			clr_lift();
4046:src/xeq.c     **** 		      }   
4047:src/xeq.c     **** 		    }                              //JM
4048:src/xeq.c     **** 		  }
4049:src/xeq.c     **** 		  else {
4050:src/xeq.c     **** 		    process_cmdline();
4051:src/xeq.c     **** 		    lift();
4052:src/xeq.c     **** 		    clr_lift();
4053:src/xeq.c     **** 		  }
4054:src/xeq.c     **** 		  break;
4055:src/xeq.c     **** 		  
4056:src/xeq.c     **** 	case OP_SIGMAPLUS:
4057:src/xeq.c     **** 	case OP_SIGMAMINUS:
4058:src/xeq.c     **** 		if (is_intmode()) {
4059:src/xeq.c     **** 			bad_mode_error();
4060:src/xeq.c     **** 			break;
4061:src/xeq.c     **** 		}
4062:src/xeq.c     **** 		process_cmdline();
4063:src/xeq.c     **** 		clr_lift();
4064:src/xeq.c     **** 		setlastX();
4065:src/xeq.c     **** 		if (opm == OP_SIGMAPLUS)
4066:src/xeq.c     **** 			sigma_plus();
4067:src/xeq.c     **** 		else
4068:src/xeq.c     **** 			sigma_minus();
4069:src/xeq.c     **** 		sigma_val(OP_sigmaN);
4070:src/xeq.c     **** 		break;
4071:src/xeq.c     **** 
4072:src/xeq.c     **** 	// Conditional tests vs registers....
4073:src/xeq.c     **** 	case OP_Xeq0:	case OP_Xlt0:	case OP_Xgt0:
4074:src/xeq.c     **** 	case OP_Xne0:	case OP_Xle0:	case OP_Xge0:
4075:src/xeq.c     **** 	case OP_Xapx0:
4076:src/xeq.c     **** 		do_tst(CONST_REG_BASE + OP_ZERO, (enum tst_op)(opm - OP_Xeq0));
4077:src/xeq.c     **** 		break;
4078:src/xeq.c     **** 	case OP_Zeq0: case OP_Zne0:
4079:src/xeq.c     **** 		do_ztst(&const_0, &const_0, (enum tst_op)(opm - OP_Zeq0));
4080:src/xeq.c     **** 		break;
4081:src/xeq.c     **** 
4082:src/xeq.c     **** 	case OP_Xeq1:	case OP_Xlt1:	case OP_Xgt1:
4083:src/xeq.c     **** 	case OP_Xne1:	case OP_Xle1:	case OP_Xge1:
4084:src/xeq.c     **** 	case OP_Xapx1:
ARM GAS  /tmp/ccqED0AM.s 			page 86


4085:src/xeq.c     **** 		do_tst(CONST_REG_BASE + OP_ONE, (enum tst_op)(opm - OP_Xeq1));
4086:src/xeq.c     **** 		break;
4087:src/xeq.c     **** 	case OP_Zeq1:	case OP_Zne1:
4088:src/xeq.c     **** 		do_ztst(&const_1, &const_0, (enum tst_op)(opm - OP_Zeq1));
4089:src/xeq.c     **** 		break;
4090:src/xeq.c     **** 	case OP_Zeqi:	case OP_Znei:
4091:src/xeq.c     **** 		do_ztst(&const_0, &const_1, (enum tst_op)(opm - OP_Zeqi));
4092:src/xeq.c     **** 		break;
4093:src/xeq.c     **** 
4094:src/xeq.c     **** 	default:
4095:src/xeq.c     **** 		illegal(op);
4096:src/xeq.c     **** 	}
4097:src/xeq.c     **** }
4098:src/xeq.c     **** 
4099:src/xeq.c     **** enum trig_modes get_trig_mode(void) {
4100:src/xeq.c     **** 	if (State2.cmplx || XromFlags.xIN)
4101:src/xeq.c     **** 		return TRIG_RAD;
4102:src/xeq.c     **** 	//if (State2.hyp)	return TRIG_RAD;
4103:src/xeq.c     **** 	return (enum trig_modes) UState.trigmode;
4104:src/xeq.c     **** }
4105:src/xeq.c     **** 
4106:src/xeq.c     **** void op_double(enum nilop op) {
4107:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
4108:src/xeq.c     **** 	const int intm = is_intmode();
4109:src/xeq.c     **** 	int i;
4110:src/xeq.c     **** 
4111:src/xeq.c     **** 	if (dbl != UState.mode_double) {
4112:src/xeq.c     **** 		// Mode switch
4113:src/xeq.c     **** 		if (dbl) {
4114:src/xeq.c     **** 			if (NumRegs < STACK_SIZE + EXTRA_REG) {
4115:src/xeq.c     **** 				// Need space for double precision stack
4116:src/xeq.c     **** 				cmdregs(STACK_SIZE + EXTRA_REG, RARG_REGS);
4117:src/xeq.c     **** 				if (Error) {
4118:src/xeq.c     **** 					return;
4119:src/xeq.c     **** 				}
4120:src/xeq.c     **** 			}
4121:src/xeq.c     **** 
4122:src/xeq.c     **** 			UState.mode_double = 1;
4123:src/xeq.c     **** 			if (! intm) {
4124:src/xeq.c     **** 				// Convert X to K to double precision
4125:src/xeq.c     **** 				// Avoid this in integer mode
4126:src/xeq.c     **** 				for (i = 0; i < STACK_SIZE + EXTRA_REG; ++i)
4127:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
4128:src/xeq.c     **** 			}
4129:src/xeq.c     **** 		}
4130:src/xeq.c     **** 		else {
4131:src/xeq.c     **** 			if (! intm) {
4132:src/xeq.c     **** 				// Convert X to K to single precision
4133:src/xeq.c     **** 				// Avoid this in integer mode
4134:src/xeq.c     **** 				for (i = STACK_SIZE + EXTRA_REG - 1; i >= 0; --i)
4135:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
4136:src/xeq.c     **** 			}
4137:src/xeq.c     **** 			UState.mode_double = 0;
4138:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
4139:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
4140:src/xeq.c     **** 		}
4141:src/xeq.c     **** 	}
ARM GAS  /tmp/ccqED0AM.s 			page 87


4142:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
4143:src/xeq.c     **** 	if (intm) {
4144:src/xeq.c     **** 		// Do the necessary conversions from integer mode
4145:src/xeq.c     **** 		op_float(OP_FLOAT_XIN);
4146:src/xeq.c     **** 	}
4147:src/xeq.c     **** }
4148:src/xeq.c     **** 
4149:src/xeq.c     **** void cmdpause(unsigned int arg, enum rarg op) {
4150:src/xeq.c     **** 	display();
4151:src/xeq.c     **** #ifndef CONSOLE
4152:src/xeq.c     **** 	// decremented in the low level heartbeat
4153:src/xeq.c     **** 	Pause = arg;
4154:src/xeq.c     **** 	GoFast = (arg == 0);
4155:src/xeq.c     **** #elif 0
4156:src/xeq.c     **** 	start_pause(arg);
4157:src/xeq.c     **** #else	
4158:src/xeq.c     **** #if defined(WIN32) && !defined(__GNUC__)
4159:src/xeq.c     **** #pragma warning(disable:4996)
4160:src/xeq.c     **** 	sleep(arg/10);
4161:src/xeq.c     **** #else
4162:src/xeq.c     **** 	usleep(arg * 100000);
4163:src/xeq.c     **** #endif
4164:src/xeq.c     **** #endif
4165:src/xeq.c     **** }
4166:src/xeq.c     **** 
4167:src/xeq.c     **** 
4168:src/xeq.c     **** 
4169:src/xeq.c     **** void op_setspeed(enum nilop op) {
4170:src/xeq.c     **** 	UState.slow_speed = (op == OP_SLOW) ? 1 : 0;
4171:src/xeq.c     **** 	update_speed(1);
4172:src/xeq.c     **** }
4173:src/xeq.c     **** 
4174:src/xeq.c     **** 
4175:src/xeq.c     **** void op_prompt(enum nilop op) {
4176:src/xeq.c     **** 	set_running_off();
4177:src/xeq.c     **** 	alpha_view_common(regX_idx);
4178:src/xeq.c     **** }
4179:src/xeq.c     **** 
4180:src/xeq.c     **** /* Test if a number is an integer or fractional */
4181:src/xeq.c     **** /* Special numbers are neither */
4182:src/xeq.c     **** void XisInt(enum nilop op) {
4183:src/xeq.c     **** 	decNumber x;
4184:src/xeq.c     **** 	int result, op_int = (op == OP_XisINT);
4185:src/xeq.c     **** 	if ( is_intmode() )
4186:src/xeq.c     **** 		result = op_int;
4187:src/xeq.c     **** 	else if (decNumberIsSpecial(getX(&x)))
4188:src/xeq.c     **** 		result = 0;
4189:src/xeq.c     **** 	else
4190:src/xeq.c     **** 	        result = (is_int(&x) == op_int);
4191:src/xeq.c     **** 	fin_tst(result);
4192:src/xeq.c     **** }
4193:src/xeq.c     **** 
4194:src/xeq.c     **** /* Test if a number is an even or odd integer */
4195:src/xeq.c     **** /* fractional or special values are neither even nor odd */
4196:src/xeq.c     **** void XisEvenOrOdd(enum nilop op) {
4197:src/xeq.c     **** 	decNumber x;
4198:src/xeq.c     **** 	int odd = (op == OP_XisODD);
ARM GAS  /tmp/ccqED0AM.s 			page 88


4199:src/xeq.c     **** 
4200:src/xeq.c     **** 	if (is_intmode()) {
4201:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
4202:src/xeq.c     **** 	} else {
4203:src/xeq.c     **** 		fin_tst(is_even(getX(&x)) == !odd);
4204:src/xeq.c     **** 	}
4205:src/xeq.c     **** }
4206:src/xeq.c     **** 
4207:src/xeq.c     **** 
4208:src/xeq.c     **** /* Test if a number is prime */
4209:src/xeq.c     **** void XisPrime(enum nilop op) {
4210:src/xeq.c     **** 	unsigned long long int i;
4211:src/xeq.c     **** 	int sgn;
4212:src/xeq.c     **** 
4213:src/xeq.c     **** 	i = getX_int_sgn(&sgn);
4214:src/xeq.c     **** 	if (!is_intmode()) {
4215:src/xeq.c     **** 		decNumber x;
4216:src/xeq.c     **** 
4217:src/xeq.c     **** 		getX(&x);
4218:src/xeq.c     **** 		if (decNumberIsSpecial(&x))
4219:src/xeq.c     **** 			sgn = 1; // not prime
4220:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
4221:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
4222:src/xeq.c     **** 			i = 0xFFFFFFFFFFFFFFFFull;
4223:src/xeq.c     **** 	}
4224:src/xeq.c     **** 	fin_tst(sgn == 0 && isPrime(i));
4225:src/xeq.c     **** }
4226:src/xeq.c     **** 
4227:src/xeq.c     **** /* Test is a number is infinite.
4228:src/xeq.c     ****  */
4229:src/xeq.c     **** void isInfinite(enum nilop op) {
4230:src/xeq.c     **** 	decNumber x;
4231:src/xeq.c     **** 
4232:src/xeq.c     **** 	getX(&x);
4233:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsInfinite(&x));
4234:src/xeq.c     **** }
4235:src/xeq.c     **** 
4236:src/xeq.c     **** /* Test for NaN.
4237:src/xeq.c     ****  * this could be done by testing x != x, but having a special command
4238:src/xeq.c     ****  * for it reads easier.
4239:src/xeq.c     ****  */
4240:src/xeq.c     **** void isNan(enum nilop op) {
4241:src/xeq.c     **** 	decNumber x;
4242:src/xeq.c     **** 
4243:src/xeq.c     **** 	getX(&x);
4244:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsNaN(&x));
4245:src/xeq.c     **** }
4246:src/xeq.c     **** 
4247:src/xeq.c     **** void isSpecial(enum nilop op) {
4248:src/xeq.c     **** 	decNumber x;
4249:src/xeq.c     **** 
4250:src/xeq.c     **** 	getX(&x);
4251:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsSpecial(&x));
4252:src/xeq.c     **** }
4253:src/xeq.c     **** 
4254:src/xeq.c     **** void op_entryp(enum nilop op) {
4255:src/xeq.c     **** 	fin_tst(State.entryp);
ARM GAS  /tmp/ccqED0AM.s 			page 89


4256:src/xeq.c     **** }
4257:src/xeq.c     **** 
4258:src/xeq.c     **** /* Bulk register operations */
4259:src/xeq.c     **** int reg_decode(int *s, int *n, int *d, int flash) {
4260:src/xeq.c     **** 	decNumber x, y;
4261:src/xeq.c     **** 	int rsrc, num, rdest, q, mx_src, mx_dest;
4262:src/xeq.c     **** 
4263:src/xeq.c     **** 	if (is_intmode()) {
4264:src/xeq.c     **** 		bad_mode_error();
4265:src/xeq.c     **** 		return 1;
4266:src/xeq.c     **** 	}
4267:src/xeq.c     **** 	getX(&x);			// sss.nnddd~
4268:src/xeq.c     **** 	dn_mulpow10(&y, &x, 2 + 3);	// sssnnddd.~
4269:src/xeq.c     **** 	decNumberTrunc(&x, &y);		// sssnnddd.0
4270:src/xeq.c     **** 	rsrc = dn_to_int(&x);		// sssnnddd
4271:src/xeq.c     **** 
4272:src/xeq.c     **** 	if (rsrc < 0) {
4273:src/xeq.c     **** 		if (!flash)
4274:src/xeq.c     **** 			goto range_error;
4275:src/xeq.c     **** 		rsrc = -rsrc;
4276:src/xeq.c     **** 	}
4277:src/xeq.c     **** 	else
4278:src/xeq.c     **** 		flash = 0;
4279:src/xeq.c     **** 
4280:src/xeq.c     **** 	rdest = rsrc % 1000;		// ddd
4281:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
4282:src/xeq.c     **** 	num = rsrc % 100;		// nn
4283:src/xeq.c     **** 	rsrc /= 100;			// sss
4284:src/xeq.c     **** 
4285:src/xeq.c     **** 	mx_src = flash ? BackupFlash._numregs
4286:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
4287:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
4288:src/xeq.c     **** 	       : global_regs();
4289:src/xeq.c     **** 	if (rsrc >= mx_src)
4290:src/xeq.c     **** 		goto range_error;
4291:src/xeq.c     **** 
4292:src/xeq.c     **** 	if (d != NULL) {
4293:src/xeq.c     **** 		mx_dest = rdest >= LOCAL_REG_BASE ? local_regs() : global_regs();
4294:src/xeq.c     **** 
4295:src/xeq.c     **** 		if (num == 0) {
4296:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
4297:src/xeq.c     **** 			if (flash || (rsrc >= LOCAL_REG_BASE) != (rdest >= LOCAL_REG_BASE))
4298:src/xeq.c     **** 				// source & destination in different memory areas
4299:src/xeq.c     **** 				num = mx_dest < mx_src ? mx_dest : mx_src;
4300:src/xeq.c     **** 			else {
4301:src/xeq.c     **** 				if (rsrc > rdest) {
4302:src/xeq.c     **** 					num = mx_src - rsrc;
4303:src/xeq.c     **** 					q = rsrc - rdest;
4304:src/xeq.c     **** 				}
4305:src/xeq.c     **** 				else {
4306:src/xeq.c     **** 					num = mx_dest - rdest;
4307:src/xeq.c     **** 					q = rdest - rsrc;
4308:src/xeq.c     **** 				}
4309:src/xeq.c     **** 				if (num > q)
4310:src/xeq.c     **** 					num = q;
4311:src/xeq.c     **** 			}
4312:src/xeq.c     **** 		}
ARM GAS  /tmp/ccqED0AM.s 			page 90


4313:src/xeq.c     **** 		if (rdest >= LOCAL_REG_BASE)
4314:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
4315:src/xeq.c     **** 		if (rdest + num > mx_dest)
4316:src/xeq.c     **** 			goto range_error;
4317:src/xeq.c     **** 		// Set pointer
4318:src/xeq.c     **** 		*d = rdest;
4319:src/xeq.c     **** 	}
4320:src/xeq.c     **** 	else {
4321:src/xeq.c     **** 		if (num == 0) {
4322:src/xeq.c     **** 			num = mx_src - rsrc;
4323:src/xeq.c     **** 		}
4324:src/xeq.c     **** 	}
4325:src/xeq.c     **** 	if (rsrc + num > mx_src)
4326:src/xeq.c     **** 		goto range_error;
4327:src/xeq.c     **** 
4328:src/xeq.c     **** 	// Now point to the correct source register
4329:src/xeq.c     **** 	*s = flash ? FLASH_REG_BASE + rsrc : rsrc;
4330:src/xeq.c     **** 	*n = num;
4331:src/xeq.c     **** 
4332:src/xeq.c     **** 	return 0;
4333:src/xeq.c     **** 
4334:src/xeq.c     **** range_error:
4335:src/xeq.c     **** 	report_err(ERR_RANGE);
4336:src/xeq.c     **** 	return 1;
4337:src/xeq.c     **** }
4338:src/xeq.c     **** 
4339:src/xeq.c     **** void op_regcopy(enum nilop op) {
4340:src/xeq.c     **** 	int s, n, d;
4341:src/xeq.c     **** 
4342:src/xeq.c     **** 	if (reg_decode(&s, &n, &d, 1))
4343:src/xeq.c     **** 		return;
4344:src/xeq.c     **** 	move_regs(get_reg_n(d), get_reg_n(s), n);
4345:src/xeq.c     **** }
4346:src/xeq.c     **** 
4347:src/xeq.c     **** void op_regswap(enum nilop op) {
4348:src/xeq.c     **** 	int s, n, d, i;
4349:src/xeq.c     **** 
4350:src/xeq.c     **** 	if (reg_decode(&s, &n, &d, 0) || s == d)
4351:src/xeq.c     **** 		return;
4352:src/xeq.c     **** 	else {
4353:src/xeq.c     **** 		if ((s > d && d + n > s) || (d > s && s + n > d))
4354:src/xeq.c     **** 			report_err(ERR_RANGE);
4355:src/xeq.c     **** 		else {
4356:src/xeq.c     **** 			for (i = 0; i < n; i++)
4357:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
4358:src/xeq.c     **** 		}
4359:src/xeq.c     **** 	}
4360:src/xeq.c     **** }
4361:src/xeq.c     **** 
4362:src/xeq.c     **** void op_regclr(enum nilop op) {
4363:src/xeq.c     **** 	int s, n;
4364:src/xeq.c     **** 
4365:src/xeq.c     **** 	if (reg_decode(&s, &n, NULL, 0))
4366:src/xeq.c     **** 		return;
4367:src/xeq.c     **** 	zero_regs(get_reg_n(s), n);
4368:src/xeq.c     **** }
4369:src/xeq.c     **** 
ARM GAS  /tmp/ccqED0AM.s 			page 91


4370:src/xeq.c     **** void op_regsort(enum nilop op) {
4371:src/xeq.c     **** 	int s, n;
4372:src/xeq.c     **** 	decNumber pivot, a;
4373:src/xeq.c     **** 	int beg[10], end[10], i;
4374:src/xeq.c     **** 
4375:src/xeq.c     **** 	if (reg_decode(&s, &n, NULL, 0) || n == 1)
4376:src/xeq.c     **** 		return;
4377:src/xeq.c     **** 
4378:src/xeq.c     **** 	/* Non-recursive quicksort */
4379:src/xeq.c     **** 	beg[0] = 0;
4380:src/xeq.c     **** 	end[0] = n;
4381:src/xeq.c     **** 	i = 0;
4382:src/xeq.c     **** 	while (i>=0) {
4383:src/xeq.c     **** 		int L = beg[i];
4384:src/xeq.c     **** 		int R = end[i] - 1;
4385:src/xeq.c     **** 		if (L<R) {
4386:src/xeq.c     **** 			const int pvt = s + L;
4387:src/xeq.c     **** 			getRegister(&pivot, pvt);
4388:src/xeq.c     **** 			while (L<R) {
4389:src/xeq.c     **** 				while (L<R) {
4390:src/xeq.c     **** 					getRegister(&a, s + R);
4391:src/xeq.c     **** 					if (dn_lt(&a, &pivot))
4392:src/xeq.c     **** 						break;
4393:src/xeq.c     **** 					R--;
4394:src/xeq.c     **** 				}
4395:src/xeq.c     **** 				if (L<R)
4396:src/xeq.c     **** 					copyreg_n(s + L++, s + R);
4397:src/xeq.c     **** 				while (L<R) {
4398:src/xeq.c     **** 					getRegister(&a, s + L);
4399:src/xeq.c     **** 					if (dn_gt(&a, &pivot))
4400:src/xeq.c     **** 						break;
4401:src/xeq.c     **** 					L++;
4402:src/xeq.c     **** 				}
4403:src/xeq.c     **** 				if (L<R)
4404:src/xeq.c     **** 					copyreg_n(s + R--, s + L);
4405:src/xeq.c     **** 			}
4406:src/xeq.c     **** 			setRegister(s + L, &pivot);
4407:src/xeq.c     **** 			if (L - beg[i] < end[i] - (L+1)) {
4408:src/xeq.c     **** 				beg[i+1] = beg[i];
4409:src/xeq.c     **** 				end[i+1] = L;
4410:src/xeq.c     **** 				beg[i] = L+1;
4411:src/xeq.c     **** 			} else {
4412:src/xeq.c     **** 				beg[i+1] = L+1;
4413:src/xeq.c     **** 				end[i+1] = end[i];
4414:src/xeq.c     **** 				end[i] = L;
4415:src/xeq.c     **** 			}
4416:src/xeq.c     **** 			i++;
4417:src/xeq.c     **** 		} else
4418:src/xeq.c     **** 			i--;
4419:src/xeq.c     **** 	}
4420:src/xeq.c     **** }
4421:src/xeq.c     **** 
4422:src/xeq.c     **** 
4423:src/xeq.c     **** 
4424:src/xeq.c     **** /* Print a single program step nicely.
4425:src/xeq.c     ****  */
4426:src/xeq.c     **** static void print_step(const opcode op) {
ARM GAS  /tmp/ccqED0AM.s 			page 92


4427:src/xeq.c     **** 	char buf[16];
4428:src/xeq.c     **** 	const unsigned int pc = state_pc();
4429:src/xeq.c     **** 	char *p = TraceBuffer;
4430:src/xeq.c     **** 
4431:src/xeq.c     **** 	if (isXROM(pc)) {
4432:src/xeq.c     **** 		*p++ = 'x';
4433:src/xeq.c     **** 	} else if (isLIB(pc)) {
4434:src/xeq.c     **** 		p = num_arg_0(p, nLIB(pc), 1);
4435:src/xeq.c     **** 		*p++ = ' ';
4436:src/xeq.c     **** 	}
4437:src/xeq.c     **** 	if (pc == 0)
4438:src/xeq.c     **** 		scopy(p, "000:");
4439:src/xeq.c     **** 	else {
4440:src/xeq.c     **** 		p = num_arg_0(p, user_pc(pc), 3);
4441:src/xeq.c     **** 		*p++ = ':';
4442:src/xeq.c     **** 		scopy_char(p, prt(op, buf), '\0');
4443:src/xeq.c     **** 		if (*p == '?')
4444:src/xeq.c     **** 			*p = '\0';
4445:src/xeq.c     **** 	}
4446:src/xeq.c     **** 	State2.disp_small = 1;
4447:src/xeq.c     **** 	DispMsg = TraceBuffer;
4448:src/xeq.c     **** }
4449:src/xeq.c     **** 
4450:src/xeq.c     **** 
4451:src/xeq.c     **** /* When stuff gets done, there are some bits of state that need
4452:src/xeq.c     ****  * to be reset -- SHOW, ->base change the display mode until something
4453:src/xeq.c     ****  * happens.  This should be called on that something.
4454:src/xeq.c     ****  */
4455:src/xeq.c     **** void reset_volatile_state(void) {
4456:src/xeq.c     **** 	// extern int IntMaxWindow;
4457:src/xeq.c     **** 	// IntMaxWindow = 0;
4458:src/xeq.c     **** 	State2.window = 0;
4459:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
4460:src/xeq.c     **** }
4461:src/xeq.c     **** 
4462:src/xeq.c     **** 
4463:src/xeq.c     **** /*
4464:src/xeq.c     ****  *  Called by any long running function
4465:src/xeq.c     ****  */
4466:src/xeq.c     **** void busy(void)
4467:src/xeq.c     **** {
4468:src/xeq.c     **** 	/*
4469:src/xeq.c     **** 	 *  Serve the hardware watch dog
4470:src/xeq.c     **** 	 */
4471:src/xeq.c     **** 	watchdog();
4472:src/xeq.c     **** 
4473:src/xeq.c     **** 	/*
4474:src/xeq.c     **** 	 *  Increase the speed
4475:src/xeq.c     **** 	 */
4476:src/xeq.c     **** 	update_speed(1);
4477:src/xeq.c     **** 
4478:src/xeq.c     **** 	/*
4479:src/xeq.c     **** 	 *  Indicate busy state to the user
4480:src/xeq.c     **** 	 */
4481:src/xeq.c     **** 	if (!Busy && !Running) {
4482:src/xeq.c     **** 		Busy = 1;
4483:src/xeq.c     **** 		message("Wait...", NULL);
ARM GAS  /tmp/ccqED0AM.s 			page 93


4484:src/xeq.c     **** 	}
4485:src/xeq.c     **** }
4486:src/xeq.c     **** 
4487:src/xeq.c     **** /***************************************************************************
4488:src/xeq.c     ****  * Function dispatchers.
4489:src/xeq.c     ****  */
4490:src/xeq.c     **** 
4491:src/xeq.c     **** /*
4492:src/xeq.c     ****  *  Check for a call into XROM space.
4493:src/xeq.c     ****  *  Fix the pointer alignment on the go.
4494:src/xeq.c     ****  */
4495:src/xeq.c     **** #ifdef REALBUILD
4496:src/xeq.c     **** typedef unsigned long uintptr_t;
4497:src/xeq.c     **** #else
4498:src/xeq.c     **** #include <stdint.h>
4499:src/xeq.c     **** #endif
4500:src/xeq.c     **** 
4501:src/xeq.c     **** static const s_opcode *check_for_xrom_address(void *fp)
4502:src/xeq.c     **** {
4503:src/xeq.c     **** 	const s_opcode *xp = (const s_opcode *) ((uintptr_t ) fp & ~1);
4504:src/xeq.c     **** 	if (xp < xrom)
4505:src/xeq.c     **** 		return NULL;
4506:src/xeq.c     **** #ifndef REALBUILD
4507:src/xeq.c     **** 	// On the device, XROM is at the end so this is not needed
4508:src/xeq.c     **** 	if (xp >= xrom + xrom_size)
4509:src/xeq.c     **** 		return NULL;
4510:src/xeq.c     **** #endif
4511:src/xeq.c     **** 	return xp;
4512:src/xeq.c     **** }
4513:src/xeq.c     **** 
4514:src/xeq.c     **** /*
4515:src/xeq.c     ****  *  Check for a call into XROM space and dispatch it.
4516:src/xeq.c     ****  */
4517:src/xeq.c     **** static int dispatch_xrom(void *fp)
4518:src/xeq.c     **** {
4519:src/xeq.c     **** 	const s_opcode *xp = check_for_xrom_address(fp);
4520:src/xeq.c     **** 	if (xp == NULL)
4521:src/xeq.c     **** 		return 0;
4522:src/xeq.c     **** 	// set_lift();
4523:src/xeq.c     **** 	UserLocalRegs = LocalRegs;
4524:src/xeq.c     **** 	XromRunning = 1;
4525:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
4526:src/xeq.c     **** 	xeq_xrom();
4527:src/xeq.c     **** 	//	print_debug(999,0);
4528:src/xeq.c     **** 	return 1;
4529:src/xeq.c     **** }
4530:src/xeq.c     **** 
4531:src/xeq.c     **** /*
4532:src/xeq.c     ****  *  Return an integer result from a decimal value, setting flags properly
4533:src/xeq.c     ****  */
4534:src/xeq.c     **** static long long int intResult(decNumber *r) {
 654              		.loc 1 4534 46 is_stmt 1 view -0
 655              		.cfi_startproc
 656              		@ args = 0, pretend = 0, frame = 80
 657              		@ frame_needed = 0, uses_anonymous_args = 0
4535:src/xeq.c     **** 	unsigned long long int i;
 658              		.loc 1 4535 2 view .LVU191
ARM GAS  /tmp/ccqED0AM.s 			page 94


4536:src/xeq.c     **** 	int s;
 659              		.loc 1 4536 2 view .LVU192
4537:src/xeq.c     **** 	decNumber ri, t;
 660              		.loc 1 4537 2 view .LVU193
4538:src/xeq.c     **** 
4539:src/xeq.c     **** 	decNumberRoundDigits(&t, r, 25, DEC_ROUND_HALF_EVEN);
 661              		.loc 1 4539 2 view .LVU194
4534:src/xeq.c     **** 	unsigned long long int i;
 662              		.loc 1 4534 46 is_stmt 0 view .LVU195
 663 0000 30B5     		push	{r4, r5, lr}
 664              		.cfi_def_cfa_offset 12
 665              		.cfi_offset 4, -12
 666              		.cfi_offset 5, -8
 667              		.cfi_offset 14, -4
 668 0002 95B0     		sub	sp, sp, #84
 669              		.cfi_def_cfa_offset 96
 670              		.loc 1 4539 2 view .LVU196
 671 0004 0323     		movs	r3, #3
 672 0006 1922     		movs	r2, #25
4534:src/xeq.c     **** 	unsigned long long int i;
 673              		.loc 1 4534 46 view .LVU197
 674 0008 0146     		mov	r1, r0
 675              		.loc 1 4539 2 view .LVU198
 676 000a 0BA8     		add	r0, sp, #44
 677              	.LVL52:
 678              		.loc 1 4539 2 view .LVU199
 679 000c FFF7FEFF 		bl	decNumberRoundDigits
 680              	.LVL53:
4540:src/xeq.c     **** 	decNumberTrunc(&ri, &t);
 681              		.loc 1 4540 2 is_stmt 1 view .LVU200
 682 0010 0BA9     		add	r1, sp, #44
 683 0012 02A8     		add	r0, sp, #8
 684 0014 FFF7FEFF 		bl	decNumberTrunc
 685              	.LVL54:
4541:src/xeq.c     **** 	set_carry(dn_eq(&ri, &t) ? 0 : 1);
 686              		.loc 1 4541 2 view .LVU201
 687              		.loc 1 4541 12 is_stmt 0 view .LVU202
 688 0018 0BA9     		add	r1, sp, #44
 689 001a 02A8     		add	r0, sp, #8
 690 001c FFF7FEFF 		bl	dn_eq
 691              	.LVL55:
 692              		.loc 1 4541 2 view .LVU203
 693 0020 B0FA80F0 		clz	r0, r0
 694 0024 4009     		lsrs	r0, r0, #5
 695 0026 FFF7FEFF 		bl	set_carry
 696              	.LVL56:
4542:src/xeq.c     **** 
4543:src/xeq.c     **** 	if (decNumberIsNaN(&t)) {
 697              		.loc 1 4543 2 is_stmt 1 view .LVU204
 698              		.loc 1 4543 6 is_stmt 0 view .LVU205
 699 002a 9DF83430 		ldrb	r3, [sp, #52]	@ zero_extendqisi2
 700              		.loc 1 4543 5 view .LVU206
 701 002e 13F0300F 		tst	r3, #48
 702 0032 22D1     		bne	.L67
4544:src/xeq.c     **** 		report_err(ERR_DOMAIN);
4545:src/xeq.c     **** 		return 0;
4546:src/xeq.c     **** 	}
ARM GAS  /tmp/ccqED0AM.s 			page 95


4547:src/xeq.c     **** 	if (decNumberIsSpecial(&t)) {
 703              		.loc 1 4547 2 is_stmt 1 view .LVU207
 704              		.loc 1 4547 5 is_stmt 0 view .LVU208
 705 0034 13F0700F 		tst	r3, #112
 706 0038 18D1     		bne	.L68
4548:src/xeq.c     **** 		set_overflow(1);
4549:src/xeq.c     **** 		return 0;
4550:src/xeq.c     **** 	}
4551:src/xeq.c     **** 	i = dn_to_ull(&ri, &s);
 707              		.loc 1 4551 2 is_stmt 1 view .LVU209
 708              		.loc 1 4551 6 is_stmt 0 view .LVU210
 709 003a 02A8     		add	r0, sp, #8
 710 003c 01A9     		add	r1, sp, #4
 711 003e FFF7FEFF 		bl	dn_to_ull
 712              	.LVL57:
 713 0042 0C46     		mov	r4, r1
4552:src/xeq.c     **** 	dn_abs(&t, &t);
 714              		.loc 1 4552 2 view .LVU211
 715 0044 0BA9     		add	r1, sp, #44
4551:src/xeq.c     **** 	dn_abs(&t, &t);
 716              		.loc 1 4551 6 view .LVU212
 717 0046 0546     		mov	r5, r0
 718              	.LVL58:
 719              		.loc 1 4552 2 is_stmt 1 view .LVU213
 720 0048 0846     		mov	r0, r1
 721              	.LVL59:
 722              		.loc 1 4552 2 is_stmt 0 view .LVU214
 723 004a FFF7FEFF 		bl	dn_abs
 724              	.LVL60:
4553:src/xeq.c     **** 	set_overflow(check_overflow(i) || dn_ge(&t, &const_2pow64));
 725              		.loc 1 4553 2 is_stmt 1 view .LVU215
 726              		.loc 1 4553 15 is_stmt 0 view .LVU216
 727 004e 2846     		mov	r0, r5
 728 0050 2146     		mov	r1, r4
 729 0052 FFF7FEFF 		bl	check_overflow
 730              	.LVL61:
 731              		.loc 1 4553 2 view .LVU217
 732 0056 E8B1     		cbz	r0, .L69
 733 0058 0120     		movs	r0, #1
 734              	.L63:
 735              		.loc 1 4553 2 discriminator 6 view .LVU218
 736 005a FFF7FEFF 		bl	set_overflow
 737              	.LVL62:
4554:src/xeq.c     **** 	return build_value(i, s);
 738              		.loc 1 4554 2 is_stmt 1 discriminator 6 view .LVU219
 739              		.loc 1 4554 9 is_stmt 0 discriminator 6 view .LVU220
 740 005e 019A     		ldr	r2, [sp, #4]
 741 0060 2846     		mov	r0, r5
 742 0062 2146     		mov	r1, r4
 743 0064 FFF7FEFF 		bl	build_value
 744              	.LVL63:
4555:src/xeq.c     **** }
 745              		.loc 1 4555 1 discriminator 6 view .LVU221
 746 0068 15B0     		add	sp, sp, #84
 747              		.cfi_remember_state
 748              		.cfi_def_cfa_offset 12
 749              		@ sp needed
ARM GAS  /tmp/ccqED0AM.s 			page 96


 750 006a 30BD     		pop	{r4, r5, pc}
 751              	.LVL64:
 752              	.L68:
 753              		.cfi_restore_state
4548:src/xeq.c     **** 		return 0;
 754              		.loc 1 4548 3 is_stmt 1 view .LVU222
 755 006c 0120     		movs	r0, #1
 756 006e FFF7FEFF 		bl	set_overflow
 757              	.LVL65:
4549:src/xeq.c     **** 	}
 758              		.loc 1 4549 3 view .LVU223
4549:src/xeq.c     **** 	}
 759              		.loc 1 4549 10 is_stmt 0 view .LVU224
 760 0072 0020     		movs	r0, #0
 761 0074 0146     		mov	r1, r0
 762              		.loc 1 4555 1 view .LVU225
 763 0076 15B0     		add	sp, sp, #84
 764              		.cfi_remember_state
 765              		.cfi_def_cfa_offset 12
 766              		@ sp needed
 767 0078 30BD     		pop	{r4, r5, pc}
 768              	.L67:
 769              		.cfi_restore_state
4544:src/xeq.c     **** 		return 0;
 770              		.loc 1 4544 3 is_stmt 1 view .LVU226
 771              	.LVL66:
 772              	.LBB1343:
 773              	.LBI1343:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 774              		.loc 1 546 5 view .LVU227
 775              	.LBB1344:
 547:src/xeq.c     **** 		Error = e;
 776              		.loc 1 547 2 view .LVU228
 547:src/xeq.c     **** 		Error = e;
 777              		.loc 1 547 12 is_stmt 0 view .LVU229
 778 007a 0A4B     		ldr	r3, .L70
 547:src/xeq.c     **** 		Error = e;
 779              		.loc 1 547 5 view .LVU230
 780 007c 1A68     		ldr	r2, [r3]
 781 007e 2AB9     		cbnz	r2, .L64
 782              	.LVL67:
 783              	.LBB1345:
 784              	.LBI1345:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 785              		.loc 1 546 5 is_stmt 1 view .LVU231
 786              	.LBB1346:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 787              		.loc 1 548 3 view .LVU232
 788              	.LBE1346:
 789              	.LBE1345:
 790              	.LBE1344:
 791              	.LBE1343:
4545:src/xeq.c     **** 	}
 792              		.loc 1 4545 10 is_stmt 0 view .LVU233
 793 0080 0020     		movs	r0, #0
 794              	.LBB1353:
 795              	.LBB1351:
ARM GAS  /tmp/ccqED0AM.s 			page 97


 796              	.LBB1349:
 797              	.LBB1347:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 798              		.loc 1 548 9 view .LVU234
 799 0082 0122     		movs	r2, #1
 800              	.LBE1347:
 801              	.LBE1349:
 802              	.LBE1351:
 803              	.LBE1353:
4545:src/xeq.c     **** 	}
 804              		.loc 1 4545 10 view .LVU235
 805 0084 0146     		mov	r1, r0
 806              	.LBB1354:
 807              	.LBB1352:
 808              	.LBB1350:
 809              	.LBB1348:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 810              		.loc 1 548 9 view .LVU236
 811 0086 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 812              		.loc 1 549 3 is_stmt 1 view .LVU237
 813              	.LBE1348:
 814              	.LBE1350:
 815              	.LBE1352:
 816              	.LBE1354:
 817              		.loc 1 4555 1 is_stmt 0 view .LVU238
 818 0088 15B0     		add	sp, sp, #84
 819              		.cfi_remember_state
 820              		.cfi_def_cfa_offset 12
 821              		@ sp needed
 822 008a 30BD     		pop	{r4, r5, pc}
 823              	.LVL68:
 824              	.L64:
 825              		.cfi_restore_state
4545:src/xeq.c     **** 	}
 826              		.loc 1 4545 10 view .LVU239
 827 008c 0020     		movs	r0, #0
 828 008e 0146     		mov	r1, r0
 829              	.LVL69:
 830              		.loc 1 4555 1 view .LVU240
 831 0090 15B0     		add	sp, sp, #84
 832              		.cfi_remember_state
 833              		.cfi_def_cfa_offset 12
 834              		@ sp needed
 835 0092 30BD     		pop	{r4, r5, pc}
 836              	.LVL70:
 837              	.L69:
 838              		.cfi_restore_state
4553:src/xeq.c     **** 	return build_value(i, s);
 839              		.loc 1 4553 36 discriminator 2 view .LVU241
 840 0094 0449     		ldr	r1, .L70+4
 841 0096 0BA8     		add	r0, sp, #44
 842 0098 FFF7FEFF 		bl	dn_lt
 843              	.LVL71:
4553:src/xeq.c     **** 	return build_value(i, s);
 844              		.loc 1 4553 2 discriminator 2 view .LVU242
 845 009c B0FA80F0 		clz	r0, r0
ARM GAS  /tmp/ccqED0AM.s 			page 98


 846 00a0 4009     		lsrs	r0, r0, #5
 847 00a2 DAE7     		b	.L63
 848              	.L71:
 849              		.align	2
 850              	.L70:
 851 00a4 00000000 		.word	Error
 852 00a8 00000000 		.word	const_2pow64
 853              		.cfi_endproc
 854              	.LFE239:
 856              		.section	.text.check_stack_overlap,"ax",%progbits
 857              		.align	1
 858              		.p2align 2,,3
 859              		.syntax unified
 860              		.thumb
 861              		.thumb_func
 862              		.fpu fpv4-sp-d16
 864              	check_stack_overlap:
 865              	.LVL72:
 866              	.LFB147:
2137:src/xeq.c     **** 	const int n = stack_size();
 867              		.loc 1 2137 50 is_stmt 1 view -0
 868              		.cfi_startproc
 869              		@ args = 0, pretend = 0, frame = 0
 870              		@ frame_needed = 0, uses_anonymous_args = 0
 871              		@ link register save eliminated.
2138:src/xeq.c     **** 
 872              		.loc 1 2138 2 view .LVU244
 873              	.LBB1381:
 874              	.LBI1381:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 875              		.loc 1 712 5 view .LVU245
 876              	.LBB1382:
 713:src/xeq.c     **** 		return 4;
 877              		.loc 1 713 2 view .LVU246
 713:src/xeq.c     **** 		return 4;
 878              		.loc 1 713 8 is_stmt 0 view .LVU247
 879 0000 194B     		ldr	r3, .L83
 880 0002 1A68     		ldr	r2, [r3]
 713:src/xeq.c     **** 		return 4;
 881              		.loc 1 713 6 view .LVU248
 882 0004 92F8EA37 		ldrb	r3, [r2, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 883              		.loc 1 713 5 view .LVU249
 884 0008 1B07     		lsls	r3, r3, #28
 885              	.LBE1382:
 886              	.LBE1381:
2137:src/xeq.c     **** 	const int n = stack_size();
 887              		.loc 1 2137 50 view .LVU250
 888 000a 30B4     		push	{r4, r5}
 889              		.cfi_def_cfa_offset 8
 890              		.cfi_offset 4, -8
 891              		.cfi_offset 5, -4
 892              	.LBB1387:
 893              	.LBB1385:
 713:src/xeq.c     **** 		return 4;
 894              		.loc 1 713 5 view .LVU251
 895 000c 25D5     		bpl	.L77
ARM GAS  /tmp/ccqED0AM.s 			page 99


 896              	.LBB1383:
 897              	.LBI1383:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 898              		.loc 1 185 5 is_stmt 1 view .LVU252
 899              	.LBB1384:
 186:src/xeq.c     **** }
 900              		.loc 1 186 2 view .LVU253
 186:src/xeq.c     **** }
 901              		.loc 1 186 9 is_stmt 0 view .LVU254
 902 000e B2F8E037 		ldrh	r3, [r2, #2016]
 903              	.LBE1384:
 904              	.LBE1383:
 713:src/xeq.c     **** 		return 4;
 905              		.loc 1 713 27 view .LVU255
 906 0012 9B0B     		lsrs	r3, r3, #14
 907 0014 032B     		cmp	r3, #3
 908 0016 1BD0     		beq	.L82
 909              	.L79:
 910 0018 0823     		movs	r3, #8
 715:src/xeq.c     **** }
 911              		.loc 1 715 9 view .LVU256
 912 001a 1C46     		mov	r4, r3
 913              	.L73:
 914              	.LVL73:
 715:src/xeq.c     **** }
 915              		.loc 1 715 9 view .LVU257
 916              	.LBE1385:
 917              	.LBE1387:
2140:src/xeq.c     **** 		return n;
 918              		.loc 1 2140 2 is_stmt 1 view .LVU258
 919              	.LBB1388:
 920              	.LBB1389:
 921              	.LBB1390:
 922              	.LBB1391:
 923              	.LBB1392:
1119:src/xeq.c     **** }
 924              		.loc 1 1119 24 is_stmt 0 view .LVU259
 925 001c B2F8E857 		ldrh	r5, [r2, #2024]
 926              	.LBE1392:
 927              	.LBE1391:
 928              	.LBB1395:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 929              		.loc 1 243 24 view .LVU260
 930 0020 92F8CF27 		ldrb	r2, [r2, #1999]	@ zero_extendqisi2
 931              	.LBE1395:
 932              	.LBB1396:
 933              	.LBB1393:
1119:src/xeq.c     **** }
 934              		.loc 1 1119 24 view .LVU261
 935 0024 44F20101 		movw	r1, #16385
 936              	.LBE1393:
 937              	.LBE1396:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 938              		.loc 1 242 5 view .LVU262
 939 0028 2940     		ands	r1, r1, r5
 940 002a B1F5804F 		cmp	r1, #16384
 941              	.LBB1397:
ARM GAS  /tmp/ccqED0AM.s 			page 100


 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 942              		.loc 1 243 13 view .LVU263
 943 002e 08BF     		it	eq
 944 0030 0C3A     		subeq	r2, r2, #12
 945              	.LBE1397:
 946              	.LBE1390:
 947              	.LBE1389:
 948              	.LBE1388:
2140:src/xeq.c     **** 		return n;
 949              		.loc 1 2140 10 view .LVU264
 950 0032 0344     		add	r3, r3, r0
 951              	.LBB1402:
 952              	.LBI1388:
 253:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 953              		.loc 1 253 14 is_stmt 1 view .LVU265
 954              	.LBE1402:
 254:src/xeq.c     **** }
 955              		.loc 1 254 2 view .LVU266
 956              	.LVL74:
 957              	.LBB1403:
 958              	.LBB1401:
 959              	.LBI1389:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 960              		.loc 1 241 14 view .LVU267
 961              	.LBB1400:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 962              		.loc 1 242 2 view .LVU268
 963              	.LBB1398:
 964              	.LBI1391:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 965              		.loc 1 1118 5 view .LVU269
 966              	.LBB1394:
1119:src/xeq.c     **** }
 967              		.loc 1 1119 2 view .LVU270
 968              	.LBE1394:
 969              	.LBE1398:
 970              	.LBB1399:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 971              		.loc 1 243 3 view .LVU271
 244:src/xeq.c     **** 	}
 972              		.loc 1 244 3 view .LVU272
 244:src/xeq.c     **** 	}
 973              		.loc 1 244 67 is_stmt 0 view .LVU273
 974 0034 08BF     		it	eq
 975 0036 5210     		asreq	r2, r2, #1
 976              	.LVL75:
 244:src/xeq.c     **** 	}
 977              		.loc 1 244 67 view .LVU274
 978              	.LBE1399:
 979              	.LBE1400:
 980              	.LBE1401:
 981              	.LBE1403:
2140:src/xeq.c     **** 		return n;
 982              		.loc 1 2140 5 view .LVU275
 983 0038 9342     		cmp	r3, r2
 984 003a 06D9     		bls	.L72
2140:src/xeq.c     **** 		return n;
ARM GAS  /tmp/ccqED0AM.s 			page 101


 985              		.loc 1 2140 31 discriminator 1 view .LVU276
 986 003c 6F28     		cmp	r0, #111
 987 003e 04D8     		bhi	.L72
 988              	.LBB1404:
 989              	.LBI1404:
2137:src/xeq.c     **** 	const int n = stack_size();
 990              		.loc 1 2137 12 is_stmt 1 view .LVU277
 991              	.LVL76:
 992              	.LBB1405:
2143:src/xeq.c     **** 	return 0;
 993              		.loc 1 2143 2 view .LVU278
 994              	.LBB1406:
 995              	.LBI1406:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 996              		.loc 1 546 5 view .LVU279
 997              	.LBB1407:
 547:src/xeq.c     **** 		Error = e;
 998              		.loc 1 547 2 view .LVU280
 547:src/xeq.c     **** 		Error = e;
 999              		.loc 1 547 12 is_stmt 0 view .LVU281
 1000 0040 0A4B     		ldr	r3, .L83+4
 1001 0042 1C68     		ldr	r4, [r3]
 1002              	.LVL77:
 547:src/xeq.c     **** 		Error = e;
 1003              		.loc 1 547 5 view .LVU282
 1004 0044 64B9     		cbnz	r4, .L80
 1005              	.LVL78:
 1006              	.LBB1408:
 1007              	.LBI1408:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1008              		.loc 1 546 5 is_stmt 1 view .LVU283
 1009              	.LBB1409:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 1010              		.loc 1 548 3 view .LVU284
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 1011              		.loc 1 548 9 is_stmt 0 view .LVU285
 1012 0046 0C22     		movs	r2, #12
 1013 0048 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 1014              		.loc 1 549 3 is_stmt 1 view .LVU286
 1015              	.LVL79:
 1016              	.L72:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 1017              		.loc 1 549 3 is_stmt 0 view .LVU287
 1018              	.LBE1409:
 1019              	.LBE1408:
 1020              	.LBE1407:
 1021              	.LBE1406:
 1022              	.LBE1405:
 1023              	.LBE1404:
2145:src/xeq.c     **** 
 1024              		.loc 1 2145 1 view .LVU288
 1025 004a 2046     		mov	r0, r4
 1026              	.LVL80:
2145:src/xeq.c     **** 
 1027              		.loc 1 2145 1 view .LVU289
 1028 004c 30BC     		pop	{r4, r5}
ARM GAS  /tmp/ccqED0AM.s 			page 102


 1029              		.cfi_remember_state
 1030              		.cfi_restore 5
 1031              		.cfi_restore 4
 1032              		.cfi_def_cfa_offset 0
 1033 004e 7047     		bx	lr
 1034              	.LVL81:
 1035              	.L82:
 1036              		.cfi_restore_state
 1037              	.LBB1413:
 1038              	.LBB1386:
 713:src/xeq.c     **** 		return 4;
 1039              		.loc 1 713 44 view .LVU290
 1040 0050 074B     		ldr	r3, .L83+8
 713:src/xeq.c     **** 		return 4;
 1041              		.loc 1 713 41 view .LVU291
 1042 0052 93F90130 		ldrsb	r3, [r3, #1]
 1043 0056 002B     		cmp	r3, #0
 1044 0058 DEDB     		blt	.L79
 1045              	.L77:
 1046 005a 0423     		movs	r3, #4
 714:src/xeq.c     **** 	return 8;
 1047              		.loc 1 714 10 view .LVU292
 1048 005c 1C46     		mov	r4, r3
 1049 005e DDE7     		b	.L73
 1050              	.LVL82:
 1051              	.L80:
 714:src/xeq.c     **** 	return 8;
 1052              		.loc 1 714 10 view .LVU293
 1053              	.LBE1386:
 1054              	.LBE1413:
 1055              	.LBB1414:
 1056              	.LBB1412:
 1057              	.LBB1411:
 1058              	.LBB1410:
 1059 0060 0024     		movs	r4, #0
 1060              	.LVL83:
 714:src/xeq.c     **** 	return 8;
 1061              		.loc 1 714 10 view .LVU294
 1062              	.LBE1410:
 1063              	.LBE1411:
 1064              	.LBE1412:
 1065              	.LBE1414:
2145:src/xeq.c     **** 
 1066              		.loc 1 2145 1 view .LVU295
 1067 0062 2046     		mov	r0, r4
 1068              	.LVL84:
2145:src/xeq.c     **** 
 1069              		.loc 1 2145 1 view .LVU296
 1070 0064 30BC     		pop	{r4, r5}
 1071              		.cfi_restore 5
 1072              		.cfi_restore 4
 1073              		.cfi_def_cfa_offset 0
 1074 0066 7047     		bx	lr
 1075              	.L84:
 1076              		.align	2
 1077              	.L83:
 1078 0068 00000000 		.word	main_ram
ARM GAS  /tmp/ccqED0AM.s 			page 103


 1079 006c 00000000 		.word	Error
 1080 0070 00000000 		.word	XromParams
 1081              		.cfi_endproc
 1082              	.LFE147:
 1084              		.section	.text.is_xrom,"ax",%progbits
 1085              		.align	1
 1086              		.p2align 2,,3
 1087              		.global	is_xrom
 1088              		.syntax unified
 1089              		.thumb
 1090              		.thumb_func
 1091              		.fpu fpv4-sp-d16
 1093              	is_xrom:
 1094              	.LFB3:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 1095              		.loc 1 185 19 is_stmt 1 view -0
 1096              		.cfi_startproc
 1097              		@ args = 0, pretend = 0, frame = 0
 1098              		@ frame_needed = 0, uses_anonymous_args = 0
 1099              		@ link register save eliminated.
 186:src/xeq.c     **** }
 1100              		.loc 1 186 2 view .LVU298
 186:src/xeq.c     **** }
 1101              		.loc 1 186 9 is_stmt 0 view .LVU299
 1102 0000 054B     		ldr	r3, .L86
 1103 0002 1B68     		ldr	r3, [r3]
 1104 0004 B3F8E007 		ldrh	r0, [r3, #2016]
 1105 0008 800B     		lsrs	r0, r0, #14
 187:src/xeq.c     **** 
 1106              		.loc 1 187 1 view .LVU300
 1107 000a A0F10300 		sub	r0, #3
 1108 000e B0FA80F0 		clz	r0, r0
 1109 0012 4009     		lsrs	r0, r0, #5
 1110 0014 7047     		bx	lr
 1111              	.L87:
 1112 0016 00BF     		.align	2
 1113              	.L86:
 1114 0018 00000000 		.word	main_ram
 1115              		.cfi_endproc
 1116              	.LFE3:
 1118              		.section	.text.move_retstk,"ax",%progbits
 1119              		.align	1
 1120              		.p2align 2,,3
 1121              		.global	move_retstk
 1122              		.syntax unified
 1123              		.thumb
 1124              		.thumb_func
 1125              		.fpu fpv4-sp-d16
 1127              	move_retstk:
 1128              	.LVL85:
 1129              	.LFB4:
 196:src/xeq.c     **** #ifndef REALBUILD
 1130              		.loc 1 196 1 is_stmt 1 view -0
 1131              		.cfi_startproc
 1132              		@ args = 0, pretend = 0, frame = 0
 1133              		@ frame_needed = 0, uses_anonymous_args = 0
 199:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
ARM GAS  /tmp/ccqED0AM.s 			page 104


 1134              		.loc 1 199 2 view .LVU302
 199:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 1135              		.loc 1 199 6 is_stmt 0 view .LVU303
 1136 0000 1A4B     		ldr	r3, .L99
 199:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 1137              		.loc 1 199 5 view .LVU304
 1138 0002 93F90130 		ldrsb	r3, [r3, #1]
 1139 0006 002B     		cmp	r3, #0
 1140 0008 25DB     		blt	.L97
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1141              		.loc 1 204 2 is_stmt 1 view .LVU305
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1142              		.loc 1 204 19 is_stmt 0 view .LVU306
 1143 000a 194B     		ldr	r3, .L99+4
 196:src/xeq.c     **** #ifndef REALBUILD
 1144              		.loc 1 196 1 view .LVU307
 1145 000c 70B5     		push	{r4, r5, r6, lr}
 1146              		.cfi_def_cfa_offset 16
 1147              		.cfi_offset 4, -16
 1148              		.cfi_offset 5, -12
 1149              		.cfi_offset 6, -8
 1150              		.cfi_offset 14, -4
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1151              		.loc 1 204 19 view .LVU308
 1152 000e 1A68     		ldr	r2, [r3]
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1153              		.loc 1 204 17 view .LVU309
 1154 0010 184D     		ldr	r5, .L99+8
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1155              		.loc 1 204 19 view .LVU310
 1156 0012 B2F9E217 		ldrsh	r1, [r2, #2018]
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1157              		.loc 1 204 17 view .LVU311
 1158 0016 2B68     		ldr	r3, [r5]
 1159 0018 0B44     		add	r3, r3, r1
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1160              		.loc 1 204 5 view .LVU312
 1161 001a C342     		cmn	r3, r0
 1162 001c 0446     		mov	r4, r0
 1163 001e 13D4     		bmi	.L98
 208:src/xeq.c     **** 	RetStk += distance;
 1164              		.loc 1 208 2 is_stmt 1 view .LVU313
 1165 0020 154E     		ldr	r6, .L99+12
 1166 0022 3368     		ldr	r3, [r6]
 208:src/xeq.c     **** 	RetStk += distance;
 1167              		.loc 1 208 27 is_stmt 0 view .LVU314
 1168 0024 0818     		adds	r0, r1, r0
 1169              	.LVL86:
 208:src/xeq.c     **** 	RetStk += distance;
 1170              		.loc 1 208 60 view .LVU315
 1171 0026 4A42     		rsbs	r2, r1, #0
 208:src/xeq.c     **** 	RetStk += distance;
 1172              		.loc 1 208 2 view .LVU316
 1173 0028 03EB4000 		add	r0, r3, r0, lsl #1
 1174 002c 03EB4101 		add	r1, r3, r1, lsl #1
 1175 0030 5200     		lsls	r2, r2, #1
 1176 0032 FFF7FEFF 		bl	xcopy
ARM GAS  /tmp/ccqED0AM.s 			page 105


 1177              	.LVL87:
 209:src/xeq.c     **** 	RetStkSize += distance;
 1178              		.loc 1 209 2 is_stmt 1 view .LVU317
 209:src/xeq.c     **** 	RetStkSize += distance;
 1179              		.loc 1 209 9 is_stmt 0 view .LVU318
 1180 0036 3368     		ldr	r3, [r6]
 210:src/xeq.c     **** 	return 0;
 1181              		.loc 1 210 13 view .LVU319
 1182 0038 2868     		ldr	r0, [r5]
 209:src/xeq.c     **** 	RetStkSize += distance;
 1183              		.loc 1 209 9 view .LVU320
 1184 003a 03EB4403 		add	r3, r3, r4, lsl #1
 210:src/xeq.c     **** 	return 0;
 1185              		.loc 1 210 13 view .LVU321
 1186 003e 2044     		add	r0, r0, r4
 1187 0040 2860     		str	r0, [r5]
 209:src/xeq.c     **** 	RetStkSize += distance;
 1188              		.loc 1 209 9 view .LVU322
 1189 0042 3360     		str	r3, [r6]
 210:src/xeq.c     **** 	return 0;
 1190              		.loc 1 210 2 is_stmt 1 view .LVU323
 211:src/xeq.c     **** }
 1191              		.loc 1 211 2 view .LVU324
 211:src/xeq.c     **** }
 1192              		.loc 1 211 9 is_stmt 0 view .LVU325
 1193 0044 0020     		movs	r0, #0
 212:src/xeq.c     **** 
 1194              		.loc 1 212 1 view .LVU326
 1195 0046 70BD     		pop	{r4, r5, r6, pc}
 1196              	.LVL88:
 1197              	.L98:
 205:src/xeq.c     **** 		return 1;
 1198              		.loc 1 205 3 is_stmt 1 view .LVU327
 1199              	.LBB1427:
 1200              	.LBI1427:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1201              		.loc 1 546 5 view .LVU328
 1202              	.LBB1428:
 547:src/xeq.c     **** 		Error = e;
 1203              		.loc 1 547 2 view .LVU329
 547:src/xeq.c     **** 		Error = e;
 1204              		.loc 1 547 12 is_stmt 0 view .LVU330
 1205 0048 0C4B     		ldr	r3, .L99+16
 547:src/xeq.c     **** 		Error = e;
 1206              		.loc 1 547 5 view .LVU331
 1207 004a 1A68     		ldr	r2, [r3]
 1208 004c 52B9     		cbnz	r2, .L93
 1209              	.LVL89:
 1210              	.LBB1429:
 1211              	.LBI1429:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1212              		.loc 1 546 5 is_stmt 1 view .LVU332
 1213              	.LBB1430:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 1214              		.loc 1 548 3 view .LVU333
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 1215              		.loc 1 548 9 is_stmt 0 view .LVU334
ARM GAS  /tmp/ccqED0AM.s 			page 106


 1216 004e 0B22     		movs	r2, #11
 1217 0050 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 1218              		.loc 1 549 3 is_stmt 1 view .LVU335
 1219              	.LBE1430:
 1220              	.LBE1429:
 1221              	.LBE1428:
 1222              	.LBE1427:
 206:src/xeq.c     **** 	}
 1223              		.loc 1 206 10 is_stmt 0 view .LVU336
 1224 0052 0120     		movs	r0, #1
 1225              	.LVL90:
 212:src/xeq.c     **** 
 1226              		.loc 1 212 1 view .LVU337
 1227 0054 70BD     		pop	{r4, r5, r6, pc}
 1228              	.LVL91:
 1229              	.L97:
 1230              		.cfi_def_cfa_offset 0
 1231              		.cfi_restore 4
 1232              		.cfi_restore 5
 1233              		.cfi_restore 6
 1234              		.cfi_restore 14
 1235              	.LBB1432:
 1236              	.LBI1432:
 195:src/xeq.c     **** {
 1237              		.loc 1 195 5 is_stmt 1 view .LVU338
 195:src/xeq.c     **** {
 1238              		.loc 1 195 5 is_stmt 0 view .LVU339
 1239              	.LBE1432:
 200:src/xeq.c     **** 		return 1;
 1240              		.loc 1 200 3 is_stmt 1 view .LVU340
 1241              	.LBB1439:
 1242              	.LBB1433:
 1243              	.LBI1433:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1244              		.loc 1 546 5 view .LVU341
 1245              	.LBB1434:
 547:src/xeq.c     **** 		Error = e;
 1246              		.loc 1 547 2 view .LVU342
 547:src/xeq.c     **** 		Error = e;
 1247              		.loc 1 547 12 is_stmt 0 view .LVU343
 1248 0056 094B     		ldr	r3, .L99+16
 547:src/xeq.c     **** 		Error = e;
 1249              		.loc 1 547 5 view .LVU344
 1250 0058 1A68     		ldr	r2, [r3]
 1251 005a 2AB9     		cbnz	r2, .L92
 1252              	.LVL92:
 1253              	.LBB1435:
 1254              	.LBI1435:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1255              		.loc 1 546 5 is_stmt 1 view .LVU345
 1256              	.LBB1436:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 1257              		.loc 1 548 3 view .LVU346
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 1258              		.loc 1 548 9 is_stmt 0 view .LVU347
 1259 005c 0722     		movs	r2, #7
ARM GAS  /tmp/ccqED0AM.s 			page 107


 1260 005e 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 1261              		.loc 1 549 3 is_stmt 1 view .LVU348
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 1262              		.loc 1 548 9 is_stmt 0 view .LVU349
 1263 0060 0120     		movs	r0, #1
 1264              	.LVL93:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 1265              		.loc 1 548 9 view .LVU350
 1266 0062 7047     		bx	lr
 1267              	.LVL94:
 1268              	.L93:
 1269              		.cfi_def_cfa_offset 16
 1270              		.cfi_offset 4, -16
 1271              		.cfi_offset 5, -12
 1272              		.cfi_offset 6, -8
 1273              		.cfi_offset 14, -4
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 1274              		.loc 1 548 9 view .LVU351
 1275              	.LBE1436:
 1276              	.LBE1435:
 1277              	.LBE1434:
 1278              	.LBE1433:
 1279              	.LBE1439:
 1280              	.LBB1440:
 1281              	.LBB1431:
 1282 0064 0120     		movs	r0, #1
 1283              	.LVL95:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 1284              		.loc 1 548 9 view .LVU352
 1285              	.LBE1431:
 1286              	.LBE1440:
 212:src/xeq.c     **** 
 1287              		.loc 1 212 1 view .LVU353
 1288 0066 70BD     		pop	{r4, r5, r6, pc}
 1289              	.LVL96:
 1290              	.L92:
 1291              		.cfi_def_cfa_offset 0
 1292              		.cfi_restore 4
 1293              		.cfi_restore 5
 1294              		.cfi_restore 6
 1295              		.cfi_restore 14
 1296              	.LBB1441:
 1297              	.LBB1438:
 1298              	.LBB1437:
 212:src/xeq.c     **** 
 1299              		.loc 1 212 1 view .LVU354
 1300 0068 0120     		movs	r0, #1
 1301              	.LVL97:
 212:src/xeq.c     **** 
 1302              		.loc 1 212 1 view .LVU355
 1303              	.LBE1437:
 1304              	.LBE1438:
 1305              	.LBE1441:
 1306 006a 7047     		bx	lr
 1307              	.L100:
 1308              		.align	2
ARM GAS  /tmp/ccqED0AM.s 			page 108


 1309              	.L99:
 1310 006c 00000000 		.word	XromParams
 1311 0070 00000000 		.word	main_ram
 1312 0074 00000000 		.word	RetStkSize
 1313 0078 00000000 		.word	RetStk
 1314 007c 00000000 		.word	Error
 1315              		.cfi_endproc
 1316              	.LFE4:
 1318              		.section	.text.local_levels,"ax",%progbits
 1319              		.align	1
 1320              		.p2align 2,,3
 1321              		.global	local_levels
 1322              		.syntax unified
 1323              		.thumb
 1324              		.thumb_func
 1325              		.fpu fpv4-sp-d16
 1327              	local_levels:
 1328              	.LFB5:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1329              		.loc 1 217 24 is_stmt 1 view -0
 1330              		.cfi_startproc
 1331              		@ args = 0, pretend = 0, frame = 0
 1332              		@ frame_needed = 0, uses_anonymous_args = 0
 1333              		@ link register save eliminated.
 218:src/xeq.c     **** }
 1334              		.loc 1 218 2 view .LVU357
 218:src/xeq.c     **** }
 1335              		.loc 1 218 9 is_stmt 0 view .LVU358
 1336 0000 084B     		ldr	r3, .L105
 1337 0002 1B68     		ldr	r3, [r3]
 1338 0004 B3F8DE37 		ldrh	r3, [r3, #2014]
 1339 0008 43F34A13 		sbfx	r3, r3, #5, #11
 218:src/xeq.c     **** }
 1340              		.loc 1 218 57 view .LVU359
 1341 000c 002B     		cmp	r3, #0
 1342 000e 01DB     		blt	.L104
 1343 0010 0020     		movs	r0, #0
 219:src/xeq.c     **** 
 1344              		.loc 1 219 1 view .LVU360
 1345 0012 7047     		bx	lr
 1346              	.L104:
 218:src/xeq.c     **** }
 1347              		.loc 1 218 25 discriminator 1 view .LVU361
 1348 0014 044A     		ldr	r2, .L105+4
 1349 0016 1268     		ldr	r2, [r2]
 218:src/xeq.c     **** }
 1350              		.loc 1 218 57 discriminator 1 view .LVU362
 1351 0018 32F81300 		ldrh	r0, [r2, r3, lsl #1]
 1352 001c C0F30B00 		ubfx	r0, r0, #0, #12
 1353 0020 7047     		bx	lr
 1354              	.L106:
 1355 0022 00BF     		.align	2
 1356              	.L105:
 1357 0024 00000000 		.word	main_ram
 1358 0028 00000000 		.word	RetStk
 1359              		.cfi_endproc
 1360              	.LFE5:
ARM GAS  /tmp/ccqED0AM.s 			page 109


 1362              		.section	.text.local_regs_rarg,"ax",%progbits
 1363              		.align	1
 1364              		.p2align 2,,3
 1365              		.global	local_regs_rarg
 1366              		.syntax unified
 1367              		.thumb
 1368              		.thumb_func
 1369              		.fpu fpv4-sp-d16
 1371              	local_regs_rarg:
 1372              	.LVL98:
 1373              	.LFB6:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 1374              		.loc 1 225 35 is_stmt 1 view -0
 1375              		.cfi_startproc
 1376              		@ args = 0, pretend = 0, frame = 0
 1377              		@ frame_needed = 0, uses_anonymous_args = 0
 1378              		@ link register save eliminated.
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1379              		.loc 1 226 2 view .LVU364
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1380              		.loc 1 226 53 is_stmt 0 view .LVU365
 1381 0000 A0F17E03 		sub	r3, r0, #126
 1382 0004 012B     		cmp	r3, #1
 1383 0006 164B     		ldr	r3, .L116
 1384 0008 27D9     		bls	.L113
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1385              		.loc 1 226 53 discriminator 1 view .LVU366
 1386 000a 8028     		cmp	r0, #128
 1387 000c 13D0     		beq	.L114
 1388              	.LBB1442:
 1389              	.LBI1442:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1390              		.loc 1 1118 5 is_stmt 1 view .LVU367
 1391              	.LBB1443:
1119:src/xeq.c     **** }
 1392              		.loc 1 1119 2 view .LVU368
1119:src/xeq.c     **** }
 1393              		.loc 1 1119 12 is_stmt 0 view .LVU369
 1394 000e 1B68     		ldr	r3, [r3]
1119:src/xeq.c     **** }
 1395              		.loc 1 1119 24 view .LVU370
 1396 0010 B3F8E827 		ldrh	r2, [r3, #2024]
 1397 0014 44F20100 		movw	r0, #16385
 1398              	.LVL99:
1119:src/xeq.c     **** }
 1399              		.loc 1 1119 24 view .LVU371
 1400              	.LBE1443:
 1401              	.LBE1442:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1402              		.loc 1 226 73 view .LVU372
 1403 0018 1040     		ands	r0, r0, r2
 1404 001a A0F58040 		sub	r0, r0, #16384
 1405 001e B0FA80F0 		clz	r0, r0
 1406 0022 4009     		lsrs	r0, r0, #5
 1407 0024 0230     		adds	r0, r0, #2
 1408              	.L109:
 227:src/xeq.c     **** }
ARM GAS  /tmp/ccqED0AM.s 			page 110


 1409              		.loc 1 227 2 is_stmt 1 discriminator 8 view .LVU373
 1410              	.LBB1444:
 1411              	.LBI1444:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1412              		.loc 1 217 5 discriminator 8 view .LVU374
 1413              	.LBB1445:
 218:src/xeq.c     **** }
 1414              		.loc 1 218 2 discriminator 8 view .LVU375
 218:src/xeq.c     **** }
 1415              		.loc 1 218 9 is_stmt 0 discriminator 8 view .LVU376
 1416 0026 B3F8DE37 		ldrh	r3, [r3, #2014]
 1417 002a 43F34A13 		sbfx	r3, r3, #5, #11
 218:src/xeq.c     **** }
 1418              		.loc 1 218 57 discriminator 8 view .LVU377
 1419 002e 002B     		cmp	r3, #0
 1420 0030 0ADB     		blt	.L115
 1421              	.L112:
 1422 0032 0020     		movs	r0, #0
 1423              	.LBE1445:
 1424              	.LBE1444:
 228:src/xeq.c     **** 
 1425              		.loc 1 228 1 view .LVU378
 1426 0034 7047     		bx	lr
 1427              	.LVL100:
 1428              	.L114:
 228:src/xeq.c     **** 
 1429              		.loc 1 228 1 view .LVU379
 1430 0036 1B68     		ldr	r3, [r3]
 227:src/xeq.c     **** }
 1431              		.loc 1 227 2 is_stmt 1 view .LVU380
 1432              	.LBB1448:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1433              		.loc 1 217 5 view .LVU381
 1434              	.LBB1446:
 218:src/xeq.c     **** }
 1435              		.loc 1 218 2 view .LVU382
 218:src/xeq.c     **** }
 1436              		.loc 1 218 9 is_stmt 0 view .LVU383
 1437 0038 B3F8DE37 		ldrh	r3, [r3, #2014]
 1438 003c 43F34A13 		sbfx	r3, r3, #5, #11
 218:src/xeq.c     **** }
 1439              		.loc 1 218 57 view .LVU384
 1440 0040 002B     		cmp	r3, #0
 1441              	.LBE1446:
 1442              	.LBE1448:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1443              		.loc 1 226 53 view .LVU385
 1444 0042 4FF00300 		mov	r0, #3
 1445              	.LVL101:
 1446              	.LBB1449:
 1447              	.LBB1447:
 218:src/xeq.c     **** }
 1448              		.loc 1 218 57 view .LVU386
 1449 0046 F4DA     		bge	.L112
 1450              	.L115:
 218:src/xeq.c     **** }
 1451              		.loc 1 218 25 view .LVU387
ARM GAS  /tmp/ccqED0AM.s 			page 111


 1452 0048 064A     		ldr	r2, .L116+4
 1453 004a 1268     		ldr	r2, [r2]
 218:src/xeq.c     **** }
 1454              		.loc 1 218 57 view .LVU388
 1455 004c 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1456 0050 C3F30B03 		ubfx	r3, r3, #0, #12
 1457 0054 43FA00F0 		asr	r0, r3, r0
 1458 0058 7047     		bx	lr
 1459              	.LVL102:
 1460              	.L113:
 218:src/xeq.c     **** }
 1461              		.loc 1 218 57 view .LVU389
 1462 005a 1B68     		ldr	r3, [r3]
 1463              	.LBE1447:
 1464              	.LBE1449:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1465              		.loc 1 226 53 view .LVU390
 1466 005c 0220     		movs	r0, #2
 1467              	.LVL103:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1468              		.loc 1 226 53 view .LVU391
 1469 005e E2E7     		b	.L109
 1470              	.L117:
 1471              		.align	2
 1472              	.L116:
 1473 0060 00000000 		.word	main_ram
 1474 0064 00000000 		.word	RetStk
 1475              		.cfi_endproc
 1476              	.LFE6:
 1478              		.section	.text.get_reg_limit,"ax",%progbits
 1479              		.align	1
 1480              		.p2align 2,,3
 1481              		.syntax unified
 1482              		.thumb
 1483              		.thumb_func
 1484              		.fpu fpv4-sp-d16
 1486              	get_reg_limit:
 1487              	.LVL104:
 1488              	.LFB248:
4556:src/xeq.c     **** 
4557:src/xeq.c     **** 
4558:src/xeq.c     **** #ifndef UNIVERSAL_DISPATCH
4559:src/xeq.c     **** 
4560:src/xeq.c     **** 
4561:src/xeq.c     **** /*
4562:src/xeq.c     ****  *  Call a monadic function by reusing the decimal code for integer mode
4563:src/xeq.c     ****  */
4564:src/xeq.c     **** long long int intMonadic(long long int x) {
4565:src/xeq.c     **** 	int s;
4566:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &s);
4567:src/xeq.c     **** 	decNumber rx, r;
4568:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
4569:src/xeq.c     **** 
4570:src/xeq.c     **** 	if (isNULL(monfuncs[f].mondreal))
4571:src/xeq.c     **** 		bad_mode_error();
4572:src/xeq.c     **** 	else {
4573:src/xeq.c     **** 		FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
ARM GAS  /tmp/ccqED0AM.s 			page 112


4574:src/xeq.c     **** #ifndef REALBUILD
4575:src/xeq.c     **** 		if (check_for_xrom_address(fp) != NULL)
4576:src/xeq.c     **** 			bad_mode_error();
4577:src/xeq.c     **** 		else 
4578:src/xeq.c     **** #endif
4579:src/xeq.c     **** 		{
4580:src/xeq.c     **** 			ullint_to_dn(&rx, vx);
4581:src/xeq.c     **** 			if (s)
4582:src/xeq.c     **** 				dn_minus(&rx, &rx);
4583:src/xeq.c     **** 			if (NULL == fp(&r, &rx))
4584:src/xeq.c     **** 				report_err(ERR_DOMAIN);
4585:src/xeq.c     **** 			else
4586:src/xeq.c     **** 				return intResult(&r);
4587:src/xeq.c     **** 		}
4588:src/xeq.c     **** 	}
4589:src/xeq.c     **** 	return 0;
4590:src/xeq.c     **** }
4591:src/xeq.c     **** 
4592:src/xeq.c     **** /*
4593:src/xeq.c     ****  *  Call a dyadic function by reusing the decimal code for integer mode
4594:src/xeq.c     ****  */
4595:src/xeq.c     **** long long int intDyadic(long long int y, long long int x) {
4596:src/xeq.c     **** 	int sx, sy;
4597:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &sx);
4598:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
4599:src/xeq.c     **** 	decNumber rx, ry, r;
4600:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
4601:src/xeq.c     **** 
4602:src/xeq.c     **** 	if (isNULL(dyfuncs[f].dydreal))
4603:src/xeq.c     **** 		bad_mode_error();
4604:src/xeq.c     **** 	else {
4605:src/xeq.c     **** 		FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
4606:src/xeq.c     **** 
4607:src/xeq.c     **** #ifndef REALBUILD
4608:src/xeq.c     **** 		if (check_for_xrom_address(fp) != NULL)
4609:src/xeq.c     **** 			bad_mode_error();
4610:src/xeq.c     **** 		else 
4611:src/xeq.c     **** #endif
4612:src/xeq.c     **** 		{
4613:src/xeq.c     **** 			ullint_to_dn(&rx, vx);	if (sx) dn_minus(&rx, &rx);
4614:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
4615:src/xeq.c     **** 
4616:src/xeq.c     **** 			if (NULL == fp(&r, &ry, &rx))
4617:src/xeq.c     **** 				report_err(ERR_DOMAIN);
4618:src/xeq.c     **** 			else
4619:src/xeq.c     **** 				return intResult(&r);
4620:src/xeq.c     **** 		}
4621:src/xeq.c     **** 	}
4622:src/xeq.c     **** 	return 0;
4623:src/xeq.c     **** }
4624:src/xeq.c     **** 
4625:src/xeq.c     **** 
4626:src/xeq.c     **** /* Dispatch routine for niladic functions.
4627:src/xeq.c     ****  */
4628:src/xeq.c     **** static void niladic(const opcode op) {
4629:src/xeq.c     **** 	const unsigned int idx = argKIND(op);
4630:src/xeq.c     **** 
ARM GAS  /tmp/ccqED0AM.s 			page 113


4631:src/xeq.c     **** 	process_cmdline();
4632:src/xeq.c     **** 	if (idx < NUM_NILADIC) {
4633:src/xeq.c     **** 		if (is_intmode() && NILADIC_NOTINT(niladics[idx]))
4634:src/xeq.c     **** 			bad_mode_error();
4635:src/xeq.c     **** 		else if (! isNULL(niladics[idx].niladicf)) {
4636:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
4637:src/xeq.c     **** 			if (dispatch_xrom(fp))
4638:src/xeq.c     **** 				return;
4639:src/xeq.c     **** 			else {
4640:src/xeq.c     **** 				switch (NILADIC_NUMRESULTS(niladics[idx])) {
4641:src/xeq.c     **** 				case 2:	lift_if_enabled();
4642:src/xeq.c     **** 				case 1:	lift_if_enabled();
4643:src/xeq.c     **** 				default:
4644:src/xeq.c     **** 					fp((enum nilop)idx);
4645:src/xeq.c     **** 					break;
4646:src/xeq.c     **** 				}
4647:src/xeq.c     **** 			}
4648:src/xeq.c     **** 		}
4649:src/xeq.c     **** 	} else
4650:src/xeq.c     **** 		illegal(op);
4651:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
4652:src/xeq.c     **** 	if (ENTRY_RPN_ENABLED && (idx != OP_rCLX)) {
4653:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
4654:src/xeq.c     **** 	}
4655:src/xeq.c     **** 	else if ( (idx != OP_rCLX) && ( ((idx != OP_CENTER) ) && (C_LOCKED) ) ) {
4656:src/xeq.c     **** 	  set_lift(); // don't turn on lift after CENTER (complex enter) in C_LOCK mode
4657:src/xeq.c     **** 	}
4658:src/xeq.c     **** #else
4659:src/xeq.c     **** 	if (idx != OP_rCLX) set_lift();// normally, just don't turn on lift after CLX
4660:src/xeq.c     **** #endif
4661:src/xeq.c     **** }
4662:src/xeq.c     **** 
4663:src/xeq.c     **** 
4664:src/xeq.c     **** /* Dispatch routine for monadic operations.
4665:src/xeq.c     ****  * Since these functions take an argument from the X register, save it in
4666:src/xeq.c     ****  * lastx and then replace it with their result, we can factor out the common
4667:src/xeq.c     ****  * stack manipulatin code.
4668:src/xeq.c     ****  */
4669:src/xeq.c     **** static void monadic(const opcode op)
4670:src/xeq.c     **** {
4671:src/xeq.c     **** 	unsigned int f;
4672:src/xeq.c     **** 	process_cmdline_set_lift();
4673:src/xeq.c     **** 
4674:src/xeq.c     **** 	f = argKIND(op);
4675:src/xeq.c     **** 	if (f < NUM_MONADIC) {
4676:src/xeq.c     **** 		if (is_intmode()) {
4677:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
4678:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
4679:src/xeq.c     **** 				if (dispatch_xrom(fp))
4680:src/xeq.c     **** 					return;
4681:src/xeq.c     **** 				else {
4682:src/xeq.c     **** 					long long int x = getX_int();
4683:src/xeq.c     **** 					x = fp(x);
4684:src/xeq.c     **** 					setlastX();
4685:src/xeq.c     **** 					setX_int(x);
4686:src/xeq.c     **** 				}
4687:src/xeq.c     **** 			} else
ARM GAS  /tmp/ccqED0AM.s 			page 114


4688:src/xeq.c     **** 				bad_mode_error();
4689:src/xeq.c     **** 		} else {
4690:src/xeq.c     **** 			if (! isNULL(monfuncs[f].mondreal)) {
4691:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
4692:src/xeq.c     **** 				if (dispatch_xrom(fp))
4693:src/xeq.c     **** 					return;
4694:src/xeq.c     **** 				else {
4695:src/xeq.c     **** 					decNumber x, r;
4696:src/xeq.c     **** 					getX(&x);
4697:src/xeq.c     **** 					if (NULL == fp(&r, &x))
4698:src/xeq.c     **** 						set_NaN(&r);
4699:src/xeq.c     **** 					setlastX();
4700:src/xeq.c     **** 					setX(&r);
4701:src/xeq.c     **** 				}
4702:src/xeq.c     **** 			} else
4703:src/xeq.c     **** 				bad_mode_error();
4704:src/xeq.c     **** 		}
4705:src/xeq.c     **** 	} else
4706:src/xeq.c     **** 		illegal(op);
4707:src/xeq.c     **** }
4708:src/xeq.c     **** 
4709:src/xeq.c     **** static void monadic_cmplex(const opcode op) {
4710:src/xeq.c     **** 	decNumber x, y, rx, ry;
4711:src/xeq.c     **** 	unsigned int f;
4712:src/xeq.c     **** 
4713:src/xeq.c     **** 	process_cmdline_set_lift();
4714:src/xeq.c     **** 
4715:src/xeq.c     **** 	f = argKIND(op);
4716:src/xeq.c     **** 
4717:src/xeq.c     **** 	if (f < NUM_MONADIC) {
4718:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
4719:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
4720:src/xeq.c     **** 			if (dispatch_xrom(fp))
4721:src/xeq.c     **** 				return;
4722:src/xeq.c     **** 			else {
4723:src/xeq.c     **** 				getXY(&x, &y);
4724:src/xeq.c     **** 				fp(&rx, &ry, &x, &y);
4725:src/xeq.c     **** 				setlastXY();
4726:src/xeq.c     **** 				setXY(&rx, &ry);
4727:src/xeq.c     **** 				set_was_complex();
4728:src/xeq.c     **** 			}
4729:src/xeq.c     **** 		} else
4730:src/xeq.c     **** 			bad_mode_error();
4731:src/xeq.c     **** 	} else
4732:src/xeq.c     **** 		illegal(op);
4733:src/xeq.c     **** }
4734:src/xeq.c     **** 
4735:src/xeq.c     **** /***************************************************************************
4736:src/xeq.c     ****  * Dyadic function handling.
4737:src/xeq.c     ****  */
4738:src/xeq.c     **** 
4739:src/xeq.c     **** /* Dispatch routine for dyadic operations.
4740:src/xeq.c     ****  * Again, these functions have a common argument decode and record and
4741:src/xeq.c     ****  * common stack manipulation.
4742:src/xeq.c     ****  */
4743:src/xeq.c     **** static void dyadic(const opcode op) {
4744:src/xeq.c     **** 
ARM GAS  /tmp/ccqED0AM.s 			page 115


4745:src/xeq.c     **** 	unsigned int f;
4746:src/xeq.c     **** 	process_cmdline_set_lift();
4747:src/xeq.c     **** 
4748:src/xeq.c     **** 	f = argKIND(op);
4749:src/xeq.c     **** 	if (f < NUM_DYADIC) {
4750:src/xeq.c     **** 		if (is_intmode()) {
4751:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
4752:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
4753:src/xeq.c     **** 				if (dispatch_xrom(fp))
4754:src/xeq.c     **** 					return;
4755:src/xeq.c     **** 				else {
4756:src/xeq.c     **** 					long long int x = getX_int();
4757:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
4758:src/xeq.c     **** 					x = fp(y, x);
4759:src/xeq.c     **** 					setlastX();
4760:src/xeq.c     **** 					lower();
4761:src/xeq.c     **** 					setX_int(x);
4762:src/xeq.c     **** 				}
4763:src/xeq.c     **** 			} else
4764:src/xeq.c     **** 				bad_mode_error();
4765:src/xeq.c     **** 		} else {
4766:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydreal)) {
4767:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
4768:src/xeq.c     **** 				if (dispatch_xrom(fp))
4769:src/xeq.c     **** 					return;
4770:src/xeq.c     **** 				else {
4771:src/xeq.c     **** 					decNumber x, y, r;
4772:src/xeq.c     **** 					getXY(&x, &y);
4773:src/xeq.c     **** 					if (NULL == fp(&r, &y, &x))
4774:src/xeq.c     **** 						set_NaN(&r);
4775:src/xeq.c     **** 					setlastX();
4776:src/xeq.c     **** 					lower();
4777:src/xeq.c     **** 					setX(&r);
4778:src/xeq.c     **** 				}
4779:src/xeq.c     **** 			} else
4780:src/xeq.c     **** 				bad_mode_error();
4781:src/xeq.c     **** 		}
4782:src/xeq.c     **** 	} else
4783:src/xeq.c     **** 		illegal(op);
4784:src/xeq.c     **** }
4785:src/xeq.c     **** 
4786:src/xeq.c     **** static void dyadic_cmplex(const opcode op) {
4787:src/xeq.c     **** 	decNumber x1, y1, x2, y2, xr, yr;
4788:src/xeq.c     **** 	unsigned int f;
4789:src/xeq.c     **** 
4790:src/xeq.c     **** 	process_cmdline_set_lift();
4791:src/xeq.c     **** 
4792:src/xeq.c     **** 	f = argKIND(op);
4793:src/xeq.c     **** 	if (f < NUM_DYADIC) {
4794:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
4795:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
4796:src/xeq.c     **** 			if (dispatch_xrom(fp))
4797:src/xeq.c     **** 				return;
4798:src/xeq.c     **** 			else {
4799:src/xeq.c     **** 				getXYZT(&x1, &y1, &x2, &y2);
4800:src/xeq.c     **** 
4801:src/xeq.c     **** 				fp(&xr, &yr, &x2, &y2, &x1, &y1);
ARM GAS  /tmp/ccqED0AM.s 			page 116


4802:src/xeq.c     **** 
4803:src/xeq.c     **** 				setlastXY();
4804:src/xeq.c     **** 				lower2();
4805:src/xeq.c     **** 				setXY(&xr, &yr);
4806:src/xeq.c     **** 				set_was_complex();
4807:src/xeq.c     **** 			}
4808:src/xeq.c     **** 		} else
4809:src/xeq.c     **** 			bad_mode_error();
4810:src/xeq.c     **** 	} else
4811:src/xeq.c     **** 		illegal(op);
4812:src/xeq.c     **** }
4813:src/xeq.c     **** 
4814:src/xeq.c     **** /* Dispatch routine for triadic operations.
4815:src/xeq.c     ****  * Again, these functions have a common argument decode and record and
4816:src/xeq.c     ****  * common stack manipulation.
4817:src/xeq.c     ****  */
4818:src/xeq.c     **** static void triadic(const opcode op) {
4819:src/xeq.c     **** 	unsigned int f;
4820:src/xeq.c     **** 	process_cmdline_set_lift();
4821:src/xeq.c     **** 
4822:src/xeq.c     **** 	f = argKIND(op);
4823:src/xeq.c     **** 	if (f < NUM_TRIADIC) {
4824:src/xeq.c     **** 		if (is_intmode()) {
4825:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
4826:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
4827:src/xeq.c     **** 				if (dispatch_xrom(fp))
4828:src/xeq.c     **** 					return;
4829:src/xeq.c     **** 				else {
4830:src/xeq.c     **** 					long long int x = getX_int();
4831:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
4832:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
4833:src/xeq.c     **** 					x = fp(z, y, x);
4834:src/xeq.c     **** 					setlastX();
4835:src/xeq.c     **** 					lower();
4836:src/xeq.c     **** 					lower();
4837:src/xeq.c     **** 					setX_int(x);
4838:src/xeq.c     **** 				}
4839:src/xeq.c     **** 			} else
4840:src/xeq.c     **** 				bad_mode_error();
4841:src/xeq.c     **** 		} else {
4842:src/xeq.c     **** 			if (! isNULL(trifuncs[f].trireal)) {
4843:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
4844:src/xeq.c     **** 				if (dispatch_xrom(fp))
4845:src/xeq.c     **** 					return;
4846:src/xeq.c     **** 				else {
4847:src/xeq.c     **** 					decNumber x, y, z, r;
4848:src/xeq.c     **** 					getXYZ(&x, &y, &z);
4849:src/xeq.c     **** 					if (NULL == fp(&r, &z, &y, &x))
4850:src/xeq.c     **** 						set_NaN(&r);
4851:src/xeq.c     **** 					setlastX();
4852:src/xeq.c     **** 					lower();
4853:src/xeq.c     **** 					lower();
4854:src/xeq.c     **** 					setX(&r);
4855:src/xeq.c     **** 				}
4856:src/xeq.c     **** 			} else
4857:src/xeq.c     **** 				bad_mode_error();
4858:src/xeq.c     **** 		}
ARM GAS  /tmp/ccqED0AM.s 			page 117


4859:src/xeq.c     **** 	} else
4860:src/xeq.c     **** 		illegal(op);
4861:src/xeq.c     **** }
4862:src/xeq.c     **** 
4863:src/xeq.c     **** 
4864:src/xeq.c     **** #else // UNIVERSAL_DISPATCH
4865:src/xeq.c     **** 
4866:src/xeq.c     **** 
4867:src/xeq.c     **** /*
4868:src/xeq.c     ****  *  Call functions by reusing the decimal code for integer mode
4869:src/xeq.c     ****  */
4870:src/xeq.c     **** static long long int universal_dispatch_int(long long int y, long long int x, unsigned int dyadic)
4871:src/xeq.c     **** {
4872:src/xeq.c     **** 	int sx, sy;
4873:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &sx);
4874:src/xeq.c     **** 	unsigned long long int vy;
4875:src/xeq.c     **** 	decNumber rx, ry, r;
4876:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
4877:src/xeq.c     **** 	void (*function_pointer)(void);
4878:src/xeq.c     **** 
4879:src/xeq.c     **** #ifdef SHORT_POINTERS
4880:src/xeq.c     **** 	unsigned short compact_pointer;
4881:src/xeq.c     **** #  define COMPACT_POINTER_TYPE unsigned short
4882:src/xeq.c     **** #else
4883:src/xeq.c     **** 	void (*compact_pointer)(void);
4884:src/xeq.c     **** #  define COMPACT_POINTER_TYPE void (*)(void)
4885:src/xeq.c     **** #endif
4886:src/xeq.c     **** 
4887:src/xeq.c     **** 	if (dyadic) {
4888:src/xeq.c     **** 		vy = extract_value(y, &sy);
4889:src/xeq.c     **** 		compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydreal;
4890:src/xeq.c     **** 	}
4891:src/xeq.c     **** 	else {
4892:src/xeq.c     **** 		compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].mondreal;
4893:src/xeq.c     **** 	}
4894:src/xeq.c     **** 	if (isNULL(compact_pointer)) {
4895:src/xeq.c     **** 		bad_mode_error();
4896:src/xeq.c     **** 	}
4897:src/xeq.c     **** 	else {
4898:src/xeq.c     **** 		function_pointer = (void (*)(void))EXPAND_ADDRESS(compact_pointer);
4899:src/xeq.c     **** #ifndef REALBUILD
4900:src/xeq.c     **** 		if (check_for_xrom_address(function_pointer) != NULL) {
4901:src/xeq.c     **** 			bad_mode_error();
4902:src/xeq.c     **** 		}
4903:src/xeq.c     **** 		else
4904:src/xeq.c     **** #endif
4905:src/xeq.c     **** 		{
4906:src/xeq.c     **** 			void *result;
4907:src/xeq.c     **** 
4908:src/xeq.c     **** 			ullint_to_dn(&rx, vx);		if (sx) dn_minus(&rx, &rx);
4909:src/xeq.c     **** 			if (dyadic) {
4910:src/xeq.c     **** 				ullint_to_dn(&ry, vy);		if (sy) dn_minus(&ry, &ry);
4911:src/xeq.c     **** 				result = ((FP_DYADIC_REAL)function_pointer)(&r, &ry, &rx);
4912:src/xeq.c     **** 			}
4913:src/xeq.c     **** 			else {
4914:src/xeq.c     **** 				result = ((FP_MONADIC_REAL)function_pointer)(&r, &rx);
4915:src/xeq.c     **** 			}
ARM GAS  /tmp/ccqED0AM.s 			page 118


4916:src/xeq.c     **** 			if (NULL == result) {
4917:src/xeq.c     **** 				report_err(ERR_DOMAIN);
4918:src/xeq.c     **** 			}
4919:src/xeq.c     **** 			else {
4920:src/xeq.c     **** 				return intResult(&r);
4921:src/xeq.c     **** 			}
4922:src/xeq.c     **** 		}
4923:src/xeq.c     **** 	}
4924:src/xeq.c     **** 	return 0;
4925:src/xeq.c     **** #undef COMPACT_POINTER_TYPE
4926:src/xeq.c     **** }
4927:src/xeq.c     **** 
4928:src/xeq.c     **** 
4929:src/xeq.c     **** long long int intMonadic(long long int x)
4930:src/xeq.c     **** {
4931:src/xeq.c     **** 	return universal_dispatch_int(0, x, 0);
4932:src/xeq.c     **** }
4933:src/xeq.c     **** 
4934:src/xeq.c     **** long long int intDyadic(long long int y, long long int x)
4935:src/xeq.c     **** {
4936:src/xeq.c     **** 	return universal_dispatch_int(y, x, 1);
4937:src/xeq.c     **** }
4938:src/xeq.c     **** 
4939:src/xeq.c     **** 
4940:src/xeq.c     **** /*
4941:src/xeq.c     ****  *  Universal dispatch function for niladic, monadic, dyadic and triadic functions, both real and c
4942:src/xeq.c     ****  */
4943:src/xeq.c     **** static void universal_dispatch(const opcode op, const unsigned int operands, const unsigned int com
4944:src/xeq.c     **** {
4945:src/xeq.c     **** 	const int intmode = is_intmode();
4946:src/xeq.c     **** 	volatile long long int ix; // declared volatile to avoid bogus warning about variable possibly bei
4947:src/xeq.c     **** 	const unsigned int f = argKIND(op);
4948:src/xeq.c     **** 	void (*function_pointer)(void);
4949:src/xeq.c     **** 
4950:src/xeq.c     **** #ifdef SHORT_POINTERS
4951:src/xeq.c     **** 	unsigned short compact_pointer;
4952:src/xeq.c     **** #  define COMPACT_POINTER_TYPE unsigned short
4953:src/xeq.c     **** #else
4954:src/xeq.c     **** 	void (*compact_pointer)(void);
4955:src/xeq.c     **** #  define COMPACT_POINTER_TYPE void (*)(void)
4956:src/xeq.c     **** #endif
4957:src/xeq.c     **** 
4958:src/xeq.c     **** 	process_cmdline();
4959:src/xeq.c     **** 	if (operands != 0) {
4960:src/xeq.c     **** 		set_lift();
4961:src/xeq.c     **** 	}
4962:src/xeq.c     **** 	switch (operands) {
4963:src/xeq.c     **** 	default:
4964:src/xeq.c     **** 	case 0:
4965:src/xeq.c     **** 		if (f >= NUM_NILADIC) {
4966:src/xeq.c     **** illegal:
4967:src/xeq.c     **** 			illegal(op);
4968:src/xeq.c     **** 			goto finish_niladic;
4969:src/xeq.c     **** 		}
4970:src/xeq.c     **** 		if (intmode && NILADIC_NOTINT(niladics[f])) {
4971:src/xeq.c     **** 			goto bad_mode;
4972:src/xeq.c     **** 		}
ARM GAS  /tmp/ccqED0AM.s 			page 119


4973:src/xeq.c     **** 		compact_pointer = (COMPACT_POINTER_TYPE)niladics[f].niladicf;
4974:src/xeq.c     **** 		break;
4975:src/xeq.c     **** 
4976:src/xeq.c     **** 	case 1:
4977:src/xeq.c     **** 		if (f >= NUM_MONADIC)
4978:src/xeq.c     **** 			goto illegal;
4979:src/xeq.c     **** 		if (intmode)
4980:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].monint;
4981:src/xeq.c     **** 		else if (complex)
4982:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].mondcmplx;
4983:src/xeq.c     **** 		else
4984:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].mondreal;
4985:src/xeq.c     **** 		break;
4986:src/xeq.c     **** 
4987:src/xeq.c     **** 	case 2:
4988:src/xeq.c     **** 		if (f >= NUM_DYADIC)
4989:src/xeq.c     **** 			goto illegal;
4990:src/xeq.c     **** 		if (intmode)
4991:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydint;
4992:src/xeq.c     **** 		else if (complex)
4993:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydcmplx;
4994:src/xeq.c     **** 		else
4995:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydreal;
4996:src/xeq.c     **** 		break;
4997:src/xeq.c     **** 
4998:src/xeq.c     **** 	case 3:
4999:src/xeq.c     **** 		if (f >= NUM_TRIADIC)
5000:src/xeq.c     **** 			goto illegal;
5001:src/xeq.c     **** 		if (intmode)
5002:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)trifuncs[f].triint;
5003:src/xeq.c     **** 		else
5004:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)trifuncs[f].trireal;
5005:src/xeq.c     **** 		break;
5006:src/xeq.c     **** 	}
5007:src/xeq.c     **** 	if (isNULL(compact_pointer)) {
5008:src/xeq.c     **** 		if (operands != 0) {
5009:src/xeq.c     **** 			// The original niladic() function doesn't invoke
5010:src/xeq.c     **** 			// bad_mode_error() if the function pointer is null.
5011:src/xeq.c     **** 			// TODO:  Verify that this behavior is really needed.
5012:src/xeq.c     **** bad_mode:
5013:src/xeq.c     **** 			bad_mode_error();
5014:src/xeq.c     **** 		}
5015:src/xeq.c     **** 		goto finish_niladic;
5016:src/xeq.c     **** 	}
5017:src/xeq.c     **** 	function_pointer = (void (*)(void))EXPAND_ADDRESS(compact_pointer);
5018:src/xeq.c     **** 	if (dispatch_xrom(function_pointer)) {
5019:src/xeq.c     **** 		return;
5020:src/xeq.c     **** 	}
5021:src/xeq.c     **** 	if (operands == 0) {
5022:src/xeq.c     **** 		switch (NILADIC_NUMRESULTS(niladics[f])) {
5023:src/xeq.c     **** 		case 2:		lift_if_enabled(); // fall through
5024:src/xeq.c     **** 		case 1:		lift_if_enabled(); break;
5025:src/xeq.c     **** 		}
5026:src/xeq.c     **** 		((FP_NILADIC)function_pointer)((enum nilop)f);
5027:src/xeq.c     **** finish_niladic:
5028:src/xeq.c     **** 		// If an error occurred, we end up here even if a non-niladic function was called.
5029:src/xeq.c     **** 		// set_lift() is always called for non-niladic functions so calling it again does no harm.
ARM GAS  /tmp/ccqED0AM.s 			page 120


5030:src/xeq.c     **** 		if (f != OP_rCLX) {
5031:src/xeq.c     **** 			set_lift();
5032:src/xeq.c     **** 		}
5033:src/xeq.c     **** 	}
5034:src/xeq.c     **** 	else if (intmode) {
5035:src/xeq.c     **** 		long long int iy;
5036:src/xeq.c     **** 		long long int iz;
5037:src/xeq.c     **** 
5038:src/xeq.c     **** 		ix = getX_int();
5039:src/xeq.c     **** 		iy = get_reg_n_int(regY_idx);
5040:src/xeq.c     **** 		switch (operands) {
5041:src/xeq.c     **** 		default:
5042:src/xeq.c     **** 		case 1:
5043:src/xeq.c     **** 			ix = ((FP_MONADIC_INT)function_pointer)(ix);
5044:src/xeq.c     **** 			break;
5045:src/xeq.c     **** 
5046:src/xeq.c     **** 		case 2:
5047:src/xeq.c     **** 			ix = ((FP_DYADIC_INT)function_pointer)(iy, ix);
5048:src/xeq.c     **** 			break;
5049:src/xeq.c     **** 
5050:src/xeq.c     **** 		case 3:
5051:src/xeq.c     **** 			iz = get_reg_n_int(regZ_idx);
5052:src/xeq.c     **** 			ix = ((FP_TRIADIC_INT)function_pointer)(iz, iy, ix);
5053:src/xeq.c     **** 			break;
5054:src/xeq.c     **** 		}
5055:src/xeq.c     **** 		goto finish_x;
5056:src/xeq.c     **** 	}
5057:src/xeq.c     **** 	else {
5058:src/xeq.c     **** 		decNumber x, y, z, t, r1;
5059:src/xeq.c     **** 
5060:src/xeq.c     **** 		if (operands + complex <= 2) {
5061:src/xeq.c     **** 			getXY(&x, &y);
5062:src/xeq.c     **** 		}
5063:src/xeq.c     **** 		else {
5064:src/xeq.c     **** 			getXYZT(&x, &y, &z, &t);
5065:src/xeq.c     **** 		}
5066:src/xeq.c     **** 
5067:src/xeq.c     **** 		if (complex) {
5068:src/xeq.c     **** 			decNumber r2;
5069:src/xeq.c     **** 
5070:src/xeq.c     **** 			if (operands == 1) {
5071:src/xeq.c     **** 				((FP_MONADIC_CMPLX)function_pointer)(&r1, &r2, &x, &y);
5072:src/xeq.c     **** 			}
5073:src/xeq.c     **** 			else {
5074:src/xeq.c     **** 				((FP_DYADIC_CMPLX)function_pointer)(&r1, &r2, &z, &t, &x, &y);
5075:src/xeq.c     **** 			}
5076:src/xeq.c     **** 			setlastXY();
5077:src/xeq.c     **** 			if (operands != 1) {
5078:src/xeq.c     **** 				lower2();
5079:src/xeq.c     **** 			}
5080:src/xeq.c     **** 			setXY(&r1, &r2);
5081:src/xeq.c     **** 			set_was_complex();
5082:src/xeq.c     **** 		}
5083:src/xeq.c     **** 		else { // real
5084:src/xeq.c     **** 			void *result;
5085:src/xeq.c     **** 
5086:src/xeq.c     **** 			switch (operands) {
ARM GAS  /tmp/ccqED0AM.s 			page 121


5087:src/xeq.c     **** 			default:
5088:src/xeq.c     **** 			case 1:
5089:src/xeq.c     **** 				result = ((FP_MONADIC_REAL)function_pointer)(&r1, &x);
5090:src/xeq.c     **** 				break;
5091:src/xeq.c     **** 
5092:src/xeq.c     **** 			case 2:
5093:src/xeq.c     **** 				result = ((FP_DYADIC_REAL)function_pointer)(&r1, &y, &x);
5094:src/xeq.c     **** 				break;
5095:src/xeq.c     **** 
5096:src/xeq.c     **** 			case 3:
5097:src/xeq.c     **** 				result = ((FP_TRIADIC_REAL)function_pointer)(&r1, &z, &y, &x);
5098:src/xeq.c     **** 				break;
5099:src/xeq.c     **** 			}
5100:src/xeq.c     **** 			if (NULL == result) {
5101:src/xeq.c     **** 				set_NaN(&r1);
5102:src/xeq.c     **** 			}
5103:src/xeq.c     **** finish_x:
5104:src/xeq.c     **** 			setlastX();
5105:src/xeq.c     **** 			switch (operands) {
5106:src/xeq.c     **** 			case 3:		lower(); // fall through
5107:src/xeq.c     **** 			case 2:		lower(); break;
5108:src/xeq.c     **** 			}
5109:src/xeq.c     **** 			if (!intmode) {
5110:src/xeq.c     **** 				setX(&r1);
5111:src/xeq.c     **** 			}
5112:src/xeq.c     **** 			else {
5113:src/xeq.c     **** 				setX_int(ix);
5114:src/xeq.c     **** 			}
5115:src/xeq.c     **** 		}
5116:src/xeq.c     **** 	}
5117:src/xeq.c     **** #undef COMPACT_POINTER_TYPE
5118:src/xeq.c     **** }
5119:src/xeq.c     **** 
5120:src/xeq.c     **** 
5121:src/xeq.c     **** static void niladic(const opcode op)
5122:src/xeq.c     **** {
5123:src/xeq.c     **** 	universal_dispatch(op, 0, 0);
5124:src/xeq.c     **** }
5125:src/xeq.c     **** 
5126:src/xeq.c     **** static void monadic(const opcode op)
5127:src/xeq.c     **** {
5128:src/xeq.c     **** 	universal_dispatch(op, 1, 0);
5129:src/xeq.c     **** }
5130:src/xeq.c     **** 
5131:src/xeq.c     **** static void monadic_cmplex(const opcode op)
5132:src/xeq.c     **** {
5133:src/xeq.c     **** 	universal_dispatch(op, 1, 1);
5134:src/xeq.c     **** }
5135:src/xeq.c     **** 
5136:src/xeq.c     **** static void dyadic(const opcode op)
5137:src/xeq.c     **** {
5138:src/xeq.c     **** 	universal_dispatch(op, 2, 0);
5139:src/xeq.c     **** }
5140:src/xeq.c     **** 
5141:src/xeq.c     **** static void dyadic_cmplex(const opcode op)
5142:src/xeq.c     **** {
5143:src/xeq.c     **** 	universal_dispatch(op, 2, 1);
ARM GAS  /tmp/ccqED0AM.s 			page 122


5144:src/xeq.c     **** }
5145:src/xeq.c     **** 
5146:src/xeq.c     **** static void triadic(const opcode op)
5147:src/xeq.c     **** {
5148:src/xeq.c     **** 	universal_dispatch(op, 3, 0);
5149:src/xeq.c     **** }
5150:src/xeq.c     **** 
5151:src/xeq.c     **** 
5152:src/xeq.c     **** #endif // UNIVERSAL_DISPATCH
5153:src/xeq.c     **** 
5154:src/xeq.c     **** 
5155:src/xeq.c     **** /*
5156:src/xeq.c     ****  *  Helper to check the maximum allowed register number, 
5157:src/xeq.c     ****  *  depending on command flags and current allocation.
5158:src/xeq.c     ****  *  This needs to be seperate because its called twice for indirect arguments
5159:src/xeq.c     ****  */
5160:src/xeq.c     **** static unsigned int get_reg_limit(unsigned int cmd, unsigned int arg)
5161:src/xeq.c     **** {
 1489              		.loc 1 5161 1 is_stmt 1 view -0
 1490              		.cfi_startproc
 1491              		@ args = 0, pretend = 0, frame = 0
 1492              		@ frame_needed = 0, uses_anonymous_args = 0
5162:src/xeq.c     **** 	unsigned int lim = LOCAL_REG_BASE;
 1493              		.loc 1 5162 2 view .LVU393
5163:src/xeq.c     **** 
5164:src/xeq.c     **** 	if (arg < TOPREALREG) {
 1494              		.loc 1 5164 2 view .LVU394
 1495              		.loc 1 5164 5 is_stmt 0 view .LVU395
 1496 0000 6329     		cmp	r1, #99
5161:src/xeq.c     **** 	unsigned int lim = LOCAL_REG_BASE;
 1497              		.loc 1 5161 1 view .LVU396
 1498 0002 38B5     		push	{r3, r4, r5, lr}
 1499              		.cfi_def_cfa_offset 16
 1500              		.cfi_offset 3, -16
 1501              		.cfi_offset 4, -12
 1502              		.cfi_offset 5, -8
 1503              		.cfi_offset 14, -4
5161:src/xeq.c     **** 	unsigned int lim = LOCAL_REG_BASE;
 1504              		.loc 1 5161 1 view .LVU397
 1505 0004 0446     		mov	r4, r0
 1506              		.loc 1 5164 5 view .LVU398
 1507 0006 16D8     		bhi	.L119
5165:src/xeq.c     **** 		// Range checking for registers against variable boundary
5166:src/xeq.c     **** 		lim = global_regs_rarg((enum rarg) cmd) - 1;
 1508              		.loc 1 5166 3 is_stmt 1 view .LVU399
 1509              	.LVL105:
 1510              	.LBB1450:
 1511              	.LBI1450:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 1512              		.loc 1 241 14 view .LVU400
 1513              	.LBB1451:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1514              		.loc 1 242 2 view .LVU401
 1515              	.LBB1452:
 1516              	.LBI1452:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1517              		.loc 1 1118 5 view .LVU402
ARM GAS  /tmp/ccqED0AM.s 			page 123


 1518              	.LBB1453:
1119:src/xeq.c     **** }
 1519              		.loc 1 1119 2 view .LVU403
1119:src/xeq.c     **** }
 1520              		.loc 1 1119 12 is_stmt 0 view .LVU404
 1521 0008 294B     		ldr	r3, .L139
 1522 000a 1A68     		ldr	r2, [r3]
1119:src/xeq.c     **** }
 1523              		.loc 1 1119 24 view .LVU405
 1524 000c B2F8E817 		ldrh	r1, [r2, #2024]
 1525              	.LVL106:
1119:src/xeq.c     **** }
 1526              		.loc 1 1119 24 view .LVU406
 1527 0010 44F20103 		movw	r3, #16385
 1528              	.LBE1453:
 1529              	.LBE1452:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1530              		.loc 1 242 5 view .LVU407
 1531 0014 0B40     		ands	r3, r3, r1
 1532 0016 B3F5804F 		cmp	r3, #16384
 1533 001a 2ED0     		beq	.L120
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1534              		.loc 1 242 19 view .LVU408
 1535 001c 8028     		cmp	r0, #128
 1536 001e 39D0     		beq	.L136
 247:src/xeq.c     **** }
 1537              		.loc 1 247 3 is_stmt 1 view .LVU409
 247:src/xeq.c     **** }
 1538              		.loc 1 247 10 is_stmt 0 view .LVU410
 1539 0020 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1540              	.LVL107:
 1541              	.L124:
 247:src/xeq.c     **** }
 1542              		.loc 1 247 10 view .LVU411
 1543 0024 2349     		ldr	r1, .L139+4
 1544              	.LBE1451:
 1545              	.LBE1450:
 1546              		.loc 1 5166 7 view .LVU412
 1547 0026 0138     		subs	r0, r0, #1
 1548              	.LVL108:
 1549              		.loc 1 5166 7 view .LVU413
 1550 0028 2501     		lsls	r5, r4, #4
 1551              	.LVL109:
 1552              	.L125:
5167:src/xeq.c     **** 	}
5168:src/xeq.c     **** 	else if (argcmds[cmd].local) {
5169:src/xeq.c     **** 		// Range checking for local registers
5170:src/xeq.c     **** 		lim = NUMREG - 1 + local_regs_rarg((enum rarg) cmd);
5171:src/xeq.c     **** 	}
5172:src/xeq.c     **** 	if (argcmds[cmd].cmplx) {
 1553              		.loc 1 5172 2 is_stmt 1 view .LVU414
 1554              		.loc 1 5172 18 is_stmt 0 view .LVU415
 1555 002a 2944     		add	r1, r1, r5
 1556 002c 4B79     		ldrb	r3, [r1, #5]	@ zero_extendqisi2
 1557              		.loc 1 5172 5 view .LVU416
 1558 002e D906     		lsls	r1, r3, #27
 1559 0030 10D5     		bpl	.L126
ARM GAS  /tmp/ccqED0AM.s 			page 124


 1560              	.L137:
5173:src/xeq.c     **** 		// one short of the last avialable register for complex access
5174:src/xeq.c     **** 		--lim;
 1561              		.loc 1 5174 3 is_stmt 1 view .LVU417
 1562 0032 0138     		subs	r0, r0, #1
 1563              	.LVL110:
 1564              	.L118:
5175:src/xeq.c     **** 	}
5176:src/xeq.c     **** 	else if (cmd == RARG_STOSTK || cmd == RARG_RCLSTK) {
5177:src/xeq.c     **** 		// avoid stack clash error in these commands
5178:src/xeq.c     **** 		lim -= stack_size() - 1;
5179:src/xeq.c     **** 	}
5180:src/xeq.c     **** 	return lim;
5181:src/xeq.c     **** }
 1565              		.loc 1 5181 1 is_stmt 0 view .LVU418
 1566 0034 38BD     		pop	{r3, r4, r5, pc}
 1567              	.LVL111:
 1568              	.L119:
5168:src/xeq.c     **** 		// Range checking for local registers
 1569              		.loc 1 5168 7 is_stmt 1 view .LVU419
5168:src/xeq.c     **** 		// Range checking for local registers
 1570              		.loc 1 5168 23 is_stmt 0 view .LVU420
 1571 0036 1F49     		ldr	r1, .L139+4
 1572              	.LVL112:
5168:src/xeq.c     **** 		// Range checking for local registers
 1573              		.loc 1 5168 23 view .LVU421
 1574 0038 01EB0013 		add	r3, r1, r0, lsl #4
 1575 003c 0501     		lsls	r5, r0, #4
 1576 003e 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
5168:src/xeq.c     **** 		// Range checking for local registers
 1577              		.loc 1 5168 10 view .LVU422
 1578 0040 1807     		lsls	r0, r3, #28
 1579              	.LVL113:
5168:src/xeq.c     **** 		// Range checking for local registers
 1580              		.loc 1 5168 10 view .LVU423
 1581 0042 18D5     		bpl	.L130
5170:src/xeq.c     **** 	}
 1582              		.loc 1 5170 3 is_stmt 1 view .LVU424
5170:src/xeq.c     **** 	}
 1583              		.loc 1 5170 22 is_stmt 0 view .LVU425
 1584 0044 E0B2     		uxtb	r0, r4
 1585 0046 FFF7FEFF 		bl	local_regs_rarg
 1586              	.LVL114:
5172:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1587              		.loc 1 5172 18 view .LVU426
 1588 004a 2944     		add	r1, r1, r5
5170:src/xeq.c     **** 	}
 1589              		.loc 1 5170 20 view .LVU427
 1590 004c 6F30     		adds	r0, r0, #111
 1591              	.LVL115:
5172:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1592              		.loc 1 5172 2 is_stmt 1 view .LVU428
5172:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1593              		.loc 1 5172 18 is_stmt 0 view .LVU429
 1594 004e 4B79     		ldrb	r3, [r1, #5]	@ zero_extendqisi2
5172:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1595              		.loc 1 5172 5 view .LVU430
ARM GAS  /tmp/ccqED0AM.s 			page 125


 1596 0050 D906     		lsls	r1, r3, #27
 1597 0052 EED4     		bmi	.L137
 1598              	.L126:
5176:src/xeq.c     **** 		// avoid stack clash error in these commands
 1599              		.loc 1 5176 7 is_stmt 1 view .LVU431
5176:src/xeq.c     **** 		// avoid stack clash error in these commands
 1600              		.loc 1 5176 30 is_stmt 0 view .LVU432
 1601 0054 223C     		subs	r4, r4, #34
 1602              	.LVL116:
5176:src/xeq.c     **** 		// avoid stack clash error in these commands
 1603              		.loc 1 5176 10 view .LVU433
 1604 0056 012C     		cmp	r4, #1
 1605 0058 ECD8     		bhi	.L118
5178:src/xeq.c     **** 	}
 1606              		.loc 1 5178 3 is_stmt 1 view .LVU434
 1607              	.LBB1458:
 1608              	.LBI1458:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 1609              		.loc 1 712 5 view .LVU435
 1610              	.LBB1459:
 713:src/xeq.c     **** 		return 4;
 1611              		.loc 1 713 2 view .LVU436
 713:src/xeq.c     **** 		return 4;
 1612              		.loc 1 713 8 is_stmt 0 view .LVU437
 1613 005a 154B     		ldr	r3, .L139
 1614 005c 1B68     		ldr	r3, [r3]
 713:src/xeq.c     **** 		return 4;
 1615              		.loc 1 713 6 view .LVU438
 1616 005e 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 1617              		.loc 1 713 5 view .LVU439
 1618 0062 1207     		lsls	r2, r2, #28
 1619 0064 14D5     		bpl	.L131
 1620              	.LBB1460:
 1621              	.LBI1460:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 1622              		.loc 1 185 5 is_stmt 1 view .LVU440
 1623              	.LBB1461:
 186:src/xeq.c     **** }
 1624              		.loc 1 186 2 view .LVU441
 186:src/xeq.c     **** }
 1625              		.loc 1 186 9 is_stmt 0 view .LVU442
 1626 0066 B3F8E037 		ldrh	r3, [r3, #2016]
 1627              	.LBE1461:
 1628              	.LBE1460:
 713:src/xeq.c     **** 		return 4;
 1629              		.loc 1 713 27 view .LVU443
 1630 006a 9B0B     		lsrs	r3, r3, #14
 1631 006c 032B     		cmp	r3, #3
 1632 006e 16D0     		beq	.L138
 1633 0070 0723     		movs	r3, #7
 1634              	.L128:
 1635              	.LBE1459:
 1636              	.LBE1458:
5178:src/xeq.c     **** 	}
 1637              		.loc 1 5178 7 view .LVU444
 1638 0072 C01A     		subs	r0, r0, r3
ARM GAS  /tmp/ccqED0AM.s 			page 126


 1639              	.LVL117:
5180:src/xeq.c     **** }
 1640              		.loc 1 5180 2 is_stmt 1 view .LVU445
 1641              		.loc 1 5181 1 is_stmt 0 view .LVU446
 1642 0074 38BD     		pop	{r3, r4, r5, pc}
 1643              	.LVL118:
 1644              	.L130:
5162:src/xeq.c     **** 
 1645              		.loc 1 5162 15 view .LVU447
 1646 0076 7020     		movs	r0, #112
 1647 0078 D7E7     		b	.L125
 1648              	.LVL119:
 1649              	.L120:
 1650              	.LBB1464:
 1651              	.LBB1456:
 1652              	.LBB1454:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1653              		.loc 1 243 3 is_stmt 1 view .LVU448
 244:src/xeq.c     **** 	}
 1654              		.loc 1 244 26 is_stmt 0 view .LVU449
 1655 007a A4F17E03 		sub	r3, r4, #126
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1656              		.loc 1 243 24 view .LVU450
 1657 007e 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1658              	.LVL120:
 244:src/xeq.c     **** 	}
 1659              		.loc 1 244 56 view .LVU451
 1660 0082 DBB2     		uxtb	r3, r3
 1661 0084 012B     		cmp	r3, #1
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1662              		.loc 1 243 13 view .LVU452
 1663 0086 A0F10C00 		sub	r0, r0, #12
 1664              	.LVL121:
 244:src/xeq.c     **** 	}
 1665              		.loc 1 244 3 is_stmt 1 view .LVU453
 244:src/xeq.c     **** 	}
 1666              		.loc 1 244 56 is_stmt 0 view .LVU454
 1667 008a CBD9     		bls	.L124
 244:src/xeq.c     **** 	}
 1668              		.loc 1 244 67 view .LVU455
 1669 008c 4010     		asrs	r0, r0, #1
 1670              	.LVL122:
 244:src/xeq.c     **** 	}
 1671              		.loc 1 244 67 view .LVU456
 1672 008e C9E7     		b	.L124
 1673              	.LVL123:
 1674              	.L131:
 244:src/xeq.c     **** 	}
 1675              		.loc 1 244 67 view .LVU457
 1676              	.LBE1454:
 1677              	.LBE1456:
 1678              	.LBE1464:
 1679              	.LBB1465:
 1680              	.LBB1462:
 1681 0090 0323     		movs	r3, #3
 1682 0092 EEE7     		b	.L128
 1683              	.LVL124:
ARM GAS  /tmp/ccqED0AM.s 			page 127


 1684              	.L136:
 244:src/xeq.c     **** 	}
 1685              		.loc 1 244 67 view .LVU458
 1686              	.LBE1462:
 1687              	.LBE1465:
 1688              	.LBB1466:
 1689              	.LBB1457:
 1690              	.LBB1455:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1691              		.loc 1 243 3 is_stmt 1 view .LVU459
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1692              		.loc 1 243 24 is_stmt 0 view .LVU460
 1693 0094 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1694              	.LVL125:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1695              		.loc 1 243 13 view .LVU461
 1696 0098 0C38     		subs	r0, r0, #12
 1697              	.LVL126:
 244:src/xeq.c     **** 	}
 1698              		.loc 1 244 3 is_stmt 1 view .LVU462
 244:src/xeq.c     **** 	}
 1699              		.loc 1 244 67 is_stmt 0 view .LVU463
 1700 009a 4010     		asrs	r0, r0, #1
 1701              	.LVL127:
 244:src/xeq.c     **** 	}
 1702              		.loc 1 244 67 view .LVU464
 1703 009c C2E7     		b	.L124
 1704              	.LVL128:
 1705              	.L138:
 244:src/xeq.c     **** 	}
 1706              		.loc 1 244 67 view .LVU465
 1707              	.LBE1455:
 1708              	.LBE1457:
 1709              	.LBE1466:
 1710              	.LBB1467:
 1711              	.LBB1463:
 713:src/xeq.c     **** 		return 4;
 1712              		.loc 1 713 44 view .LVU466
 1713 009e 064B     		ldr	r3, .L139+8
 713:src/xeq.c     **** 		return 4;
 1714              		.loc 1 713 41 view .LVU467
 1715 00a0 93F90130 		ldrsb	r3, [r3, #1]
 1716 00a4 002B     		cmp	r3, #0
 1717 00a6 B4BF     		ite	lt
 1718 00a8 0723     		movlt	r3, #7
 1719 00aa 0323     		movge	r3, #3
 1720 00ac E1E7     		b	.L128
 1721              	.L140:
 1722 00ae 00BF     		.align	2
 1723              	.L139:
 1724 00b0 00000000 		.word	main_ram
 1725 00b4 00000000 		.word	argcmds
 1726 00b8 00000000 		.word	XromParams
 1727              	.LBE1463:
 1728              	.LBE1467:
 1729              		.cfi_endproc
 1730              	.LFE248:
ARM GAS  /tmp/ccqED0AM.s 			page 128


 1732              		.section	.text.local_regs,"ax",%progbits
 1733              		.align	1
 1734              		.p2align 2,,3
 1735              		.global	local_regs
 1736              		.syntax unified
 1737              		.thumb
 1738              		.thumb_func
 1739              		.fpu fpv4-sp-d16
 1741              	local_regs:
 1742              	.LFB7:
 233:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 1743              		.loc 1 233 22 is_stmt 1 view -0
 1744              		.cfi_startproc
 1745              		@ args = 0, pretend = 0, frame = 0
 1746              		@ frame_needed = 0, uses_anonymous_args = 0
 1747              		@ link register save eliminated.
 234:src/xeq.c     **** }
 1748              		.loc 1 234 2 view .LVU469
 1749              	.LVL129:
 1750              	.LBB1468:
 1751              	.LBI1468:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 1752              		.loc 1 225 5 view .LVU470
 1753              	.LBB1469:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1754              		.loc 1 226 2 view .LVU471
 1755              	.LBB1470:
 1756              	.LBI1470:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1757              		.loc 1 1118 5 view .LVU472
 1758              	.LBB1471:
1119:src/xeq.c     **** }
 1759              		.loc 1 1119 2 view .LVU473
1119:src/xeq.c     **** }
 1760              		.loc 1 1119 12 is_stmt 0 view .LVU474
 1761 0000 0E4B     		ldr	r3, .L145
 1762 0002 1A68     		ldr	r2, [r3]
 1763              	.LVL130:
1119:src/xeq.c     **** }
 1764              		.loc 1 1119 12 view .LVU475
 1765              	.LBE1471:
 1766              	.LBE1470:
 227:src/xeq.c     **** }
 1767              		.loc 1 227 2 is_stmt 1 view .LVU476
 1768              	.LBB1474:
 1769              	.LBI1474:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1770              		.loc 1 217 5 view .LVU477
 1771              	.LBB1475:
 218:src/xeq.c     **** }
 1772              		.loc 1 218 2 view .LVU478
 218:src/xeq.c     **** }
 1773              		.loc 1 218 9 is_stmt 0 view .LVU479
 1774 0004 B2F8DE37 		ldrh	r3, [r2, #2014]
 1775 0008 43F34A13 		sbfx	r3, r3, #5, #11
 218:src/xeq.c     **** }
 1776              		.loc 1 218 57 view .LVU480
ARM GAS  /tmp/ccqED0AM.s 			page 129


 1777 000c 002B     		cmp	r3, #0
 1778 000e 01DB     		blt	.L144
 1779 0010 0020     		movs	r0, #0
 1780              	.LVL131:
 218:src/xeq.c     **** }
 1781              		.loc 1 218 57 view .LVU481
 1782              	.LBE1475:
 1783              	.LBE1474:
 1784              	.LBE1469:
 1785              	.LBE1468:
 235:src/xeq.c     **** 
 1786              		.loc 1 235 1 view .LVU482
 1787 0012 7047     		bx	lr
 1788              	.LVL132:
 1789              	.L144:
 1790              	.LBB1487:
 1791              	.LBB1486:
 1792              	.LBB1480:
 1793              	.LBB1476:
 218:src/xeq.c     **** }
 1794              		.loc 1 218 25 view .LVU483
 1795 0014 0A49     		ldr	r1, .L145+4
 1796              	.LBE1476:
 1797              	.LBE1480:
 1798              	.LBB1481:
 1799              	.LBB1472:
1119:src/xeq.c     **** }
 1800              		.loc 1 1119 24 view .LVU484
 1801 0016 B2F8E807 		ldrh	r0, [r2, #2024]
 1802              	.LBE1472:
 1803              	.LBE1481:
 1804              	.LBB1482:
 1805              	.LBB1477:
 218:src/xeq.c     **** }
 1806              		.loc 1 218 25 view .LVU485
 1807 001a 0968     		ldr	r1, [r1]
 1808              	.LBE1477:
 1809              	.LBE1482:
 1810              	.LBB1483:
 1811              	.LBB1473:
1119:src/xeq.c     **** }
 1812              		.loc 1 1119 24 view .LVU486
 1813 001c 44F20102 		movw	r2, #16385
 1814              	.LVL133:
1119:src/xeq.c     **** }
 1815              		.loc 1 1119 24 view .LVU487
 1816              	.LBE1473:
 1817              	.LBE1483:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1818              		.loc 1 226 73 view .LVU488
 1819 0020 0240     		ands	r2, r2, r0
 1820              	.LBB1484:
 1821              	.LBB1478:
 218:src/xeq.c     **** }
 1822              		.loc 1 218 57 view .LVU489
 1823 0022 31F81300 		ldrh	r0, [r1, r3, lsl #1]
 1824              	.LBE1478:
ARM GAS  /tmp/ccqED0AM.s 			page 130


 1825              	.LBE1484:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1826              		.loc 1 226 73 view .LVU490
 1827 0026 A2F58043 		sub	r3, r2, #16384
 1828 002a B3FA83F3 		clz	r3, r3
 1829 002e 5B09     		lsrs	r3, r3, #5
 1830 0030 0233     		adds	r3, r3, #2
 1831              	.LBB1485:
 1832              	.LBB1479:
 218:src/xeq.c     **** }
 1833              		.loc 1 218 57 view .LVU491
 1834 0032 C0F30B00 		ubfx	r0, r0, #0, #12
 1835 0036 1841     		asrs	r0, r0, r3
 1836 0038 7047     		bx	lr
 1837              	.L146:
 1838 003a 00BF     		.align	2
 1839              	.L145:
 1840 003c 00000000 		.word	main_ram
 1841 0040 00000000 		.word	RetStk
 1842              	.LBE1479:
 1843              	.LBE1485:
 1844              	.LBE1486:
 1845              	.LBE1487:
 1846              		.cfi_endproc
 1847              	.LFE7:
 1849              		.section	.text.global_regs_rarg,"ax",%progbits
 1850              		.align	1
 1851              		.p2align 2,,3
 1852              		.global	global_regs_rarg
 1853              		.syntax unified
 1854              		.thumb
 1855              		.thumb_func
 1856              		.fpu fpv4-sp-d16
 1858              	global_regs_rarg:
 1859              	.LVL134:
 1860              	.LFB8:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 1861              		.loc 1 241 45 is_stmt 1 view -0
 1862              		.cfi_startproc
 1863              		@ args = 0, pretend = 0, frame = 0
 1864              		@ frame_needed = 0, uses_anonymous_args = 0
 1865              		@ link register save eliminated.
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1866              		.loc 1 242 2 view .LVU493
 1867              	.LBB1488:
 1868              	.LBI1488:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1869              		.loc 1 1118 5 view .LVU494
 1870              	.LBB1489:
1119:src/xeq.c     **** }
 1871              		.loc 1 1119 2 view .LVU495
1119:src/xeq.c     **** }
 1872              		.loc 1 1119 12 is_stmt 0 view .LVU496
 1873 0000 0E4B     		ldr	r3, .L156
 1874 0002 1A68     		ldr	r2, [r3]
1119:src/xeq.c     **** }
 1875              		.loc 1 1119 24 view .LVU497
ARM GAS  /tmp/ccqED0AM.s 			page 131


 1876 0004 B2F8E817 		ldrh	r1, [r2, #2024]
 1877 0008 44F20103 		movw	r3, #16385
 1878              	.LBE1489:
 1879              	.LBE1488:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1880              		.loc 1 242 5 view .LVU498
 1881 000c 0B40     		ands	r3, r3, r1
 1882 000e B3F5804F 		cmp	r3, #16384
 1883 0012 09D0     		beq	.L148
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1884              		.loc 1 242 19 discriminator 1 view .LVU499
 1885 0014 8028     		cmp	r0, #128
 1886 0016 02D0     		beq	.L155
 247:src/xeq.c     **** }
 1887              		.loc 1 247 3 is_stmt 1 view .LVU500
 247:src/xeq.c     **** }
 1888              		.loc 1 247 10 is_stmt 0 view .LVU501
 1889 0018 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1890              	.LVL135:
 247:src/xeq.c     **** }
 1891              		.loc 1 247 10 view .LVU502
 1892 001c 7047     		bx	lr
 1893              	.LVL136:
 1894              	.L155:
 1895              	.LBB1490:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1896              		.loc 1 243 3 is_stmt 1 view .LVU503
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1897              		.loc 1 243 24 is_stmt 0 view .LVU504
 1898 001e 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1899              	.LVL137:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1900              		.loc 1 243 13 view .LVU505
 1901 0022 0C38     		subs	r0, r0, #12
 1902              	.LVL138:
 244:src/xeq.c     **** 	}
 1903              		.loc 1 244 3 is_stmt 1 view .LVU506
 1904              	.L153:
 244:src/xeq.c     **** 	}
 1905              		.loc 1 244 67 is_stmt 0 discriminator 1 view .LVU507
 1906 0024 4010     		asrs	r0, r0, #1
 1907              	.LVL139:
 244:src/xeq.c     **** 	}
 1908              		.loc 1 244 67 discriminator 1 view .LVU508
 1909 0026 7047     		bx	lr
 1910              	.LVL140:
 1911              	.L148:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1912              		.loc 1 243 3 is_stmt 1 view .LVU509
 244:src/xeq.c     **** 	}
 1913              		.loc 1 244 56 is_stmt 0 view .LVU510
 1914 0028 A0F17E03 		sub	r3, r0, #126
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1915              		.loc 1 243 24 view .LVU511
 1916 002c 92F8CF27 		ldrb	r2, [r2, #1999]	@ zero_extendqisi2
 244:src/xeq.c     **** 	}
 1917              		.loc 1 244 56 view .LVU512
ARM GAS  /tmp/ccqED0AM.s 			page 132


 1918 0030 012B     		cmp	r3, #1
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1919              		.loc 1 243 13 view .LVU513
 1920 0032 A2F10C00 		sub	r0, r2, #12
 1921              	.LVL141:
 244:src/xeq.c     **** 	}
 1922              		.loc 1 244 3 is_stmt 1 view .LVU514
 244:src/xeq.c     **** 	}
 1923              		.loc 1 244 56 is_stmt 0 view .LVU515
 1924 0036 F5D8     		bhi	.L153
 1925              	.LBE1490:
 248:src/xeq.c     **** 
 1926              		.loc 1 248 1 view .LVU516
 1927 0038 7047     		bx	lr
 1928              	.L157:
 1929 003a 00BF     		.align	2
 1930              	.L156:
 1931 003c 00000000 		.word	main_ram
 1932              		.cfi_endproc
 1933              	.LFE8:
 1935              		.section	.text.global_regs,"ax",%progbits
 1936              		.align	1
 1937              		.p2align 2,,3
 1938              		.global	global_regs
 1939              		.syntax unified
 1940              		.thumb
 1941              		.thumb_func
 1942              		.fpu fpv4-sp-d16
 1944              	global_regs:
 1945              	.LFB9:
 253:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 1946              		.loc 1 253 32 is_stmt 1 view -0
 1947              		.cfi_startproc
 1948              		@ args = 0, pretend = 0, frame = 0
 1949              		@ frame_needed = 0, uses_anonymous_args = 0
 1950              		@ link register save eliminated.
 254:src/xeq.c     **** }
 1951              		.loc 1 254 2 view .LVU518
 1952              	.LVL142:
 1953              	.LBB1491:
 1954              	.LBI1491:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 1955              		.loc 1 241 14 view .LVU519
 1956              	.LBB1492:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1957              		.loc 1 242 2 view .LVU520
 1958              	.LBB1493:
 1959              	.LBI1493:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1960              		.loc 1 1118 5 view .LVU521
 1961              	.LBB1494:
1119:src/xeq.c     **** }
 1962              		.loc 1 1119 2 view .LVU522
1119:src/xeq.c     **** }
 1963              		.loc 1 1119 12 is_stmt 0 view .LVU523
 1964 0000 074B     		ldr	r3, .L161
 1965 0002 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/ccqED0AM.s 			page 133


1119:src/xeq.c     **** }
 1966              		.loc 1 1119 24 view .LVU524
 1967 0004 B2F8E817 		ldrh	r1, [r2, #2024]
 1968              	.LBE1494:
 1969              	.LBE1493:
 1970              	.LBB1496:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1971              		.loc 1 243 24 view .LVU525
 1972 0008 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1973              	.LBE1496:
 1974              	.LBB1497:
 1975              	.LBB1495:
1119:src/xeq.c     **** }
 1976              		.loc 1 1119 24 view .LVU526
 1977 000c 44F20103 		movw	r3, #16385
 1978              	.LBE1495:
 1979              	.LBE1497:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1980              		.loc 1 242 5 view .LVU527
 1981 0010 0B40     		ands	r3, r3, r1
 1982 0012 B3F5804F 		cmp	r3, #16384
 1983              	.LBB1498:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1984              		.loc 1 243 3 is_stmt 1 view .LVU528
 244:src/xeq.c     **** 	}
 1985              		.loc 1 244 3 view .LVU529
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1986              		.loc 1 243 13 is_stmt 0 view .LVU530
 1987 0016 04BF     		itt	eq
 1988 0018 0C38     		subeq	r0, r0, #12
 244:src/xeq.c     **** 	}
 1989              		.loc 1 244 67 view .LVU531
 1990 001a 4010     		asreq	r0, r0, #1
 1991              	.LBE1498:
 247:src/xeq.c     **** }
 1992              		.loc 1 247 3 is_stmt 1 view .LVU532
 1993              	.LVL143:
 247:src/xeq.c     **** }
 1994              		.loc 1 247 3 is_stmt 0 view .LVU533
 1995              	.LBE1492:
 1996              	.LBE1491:
 255:src/xeq.c     **** 
 1997              		.loc 1 255 1 view .LVU534
 1998 001c 7047     		bx	lr
 1999              	.L162:
 2000 001e 00BF     		.align	2
 2001              	.L161:
 2002 0020 00000000 		.word	main_ram
 2003              		.cfi_endproc
 2004              	.LFE9:
 2006              		.section	.text.version,"ax",%progbits
 2007              		.align	1
 2008              		.p2align 2,,3
 2009              		.global	version
 2010              		.syntax unified
 2011              		.thumb
 2012              		.thumb_func
ARM GAS  /tmp/ccqED0AM.s 			page 134


 2013              		.fpu fpv4-sp-d16
 2015              	version:
 2016              	.LVL144:
 2017              	.LFB10:
 267:src/xeq.c     **** 	State2.version = 1;
 2018              		.loc 1 267 29 is_stmt 1 view -0
 2019              		.cfi_startproc
 2020              		@ args = 0, pretend = 0, frame = 0
 2021              		@ frame_needed = 0, uses_anonymous_args = 0
 2022              		@ link register save eliminated.
 268:src/xeq.c     **** 	if (!State2.runmode)
 2023              		.loc 1 268 2 view .LVU536
 268:src/xeq.c     **** 	if (!State2.runmode)
 2024              		.loc 1 268 17 is_stmt 0 view .LVU537
 2025 0000 054B     		ldr	r3, .L166
 2026 0002 5A7D     		ldrb	r2, [r3, #21]	@ zero_extendqisi2
 269:src/xeq.c     **** 		display();
 2027              		.loc 1 269 6 view .LVU538
 2028 0004 997D     		ldrb	r1, [r3, #22]	@ zero_extendqisi2
 268:src/xeq.c     **** 	if (!State2.runmode)
 2029              		.loc 1 268 17 view .LVU539
 2030 0006 42F01002 		orr	r2, r2, #16
 2031 000a 5A75     		strb	r2, [r3, #21]
 269:src/xeq.c     **** 		display();
 2032              		.loc 1 269 2 is_stmt 1 view .LVU540
 269:src/xeq.c     **** 		display();
 2033              		.loc 1 269 5 is_stmt 0 view .LVU541
 2034 000c 4B06     		lsls	r3, r1, #25
 2035 000e 00D5     		bpl	.L165
 271:src/xeq.c     **** 
 2036              		.loc 1 271 1 view .LVU542
 2037 0010 7047     		bx	lr
 2038              	.L165:
 270:src/xeq.c     **** }
 2039              		.loc 1 270 3 is_stmt 1 view .LVU543
 2040 0012 FFF7FEBF 		b	display
 2041              	.LVL145:
 2042              	.L167:
 270:src/xeq.c     **** }
 2043              		.loc 1 270 3 is_stmt 0 view .LVU544
 2044 0016 00BF     		.align	2
 2045              	.L166:
 2046 0018 00000000 		.word	StateWhileOn
 2047              		.cfi_endproc
 2048              	.LFE10:
 2050              		.section	.text.cmd_off,"ax",%progbits
 2051              		.align	1
 2052              		.p2align 2,,3
 2053              		.global	cmd_off
 2054              		.syntax unified
 2055              		.thumb
 2056              		.thumb_func
 2057              		.fpu fpv4-sp-d16
 2059              	cmd_off:
 2060              	.LVL146:
 2061              	.LFB11:
 273:src/xeq.c     **** 	shutdown();
ARM GAS  /tmp/ccqED0AM.s 			page 135


 2062              		.loc 1 273 29 is_stmt 1 view -0
 2063              		.cfi_startproc
 2064              		@ args = 0, pretend = 0, frame = 0
 2065              		@ frame_needed = 0, uses_anonymous_args = 0
 2066              		@ link register save eliminated.
 274:src/xeq.c     **** }
 2067              		.loc 1 274 2 view .LVU546
 2068 0000 FFF7FEBF 		b	shutdown
 2069              	.LVL147:
 274:src/xeq.c     **** }
 2070              		.loc 1 274 2 is_stmt 0 view .LVU547
 2071              		.cfi_endproc
 2072              	.LFE11:
 2074              		.section	.text.init_RegionTab,"ax",%progbits
 2075              		.align	1
 2076              		.p2align 2,,3
 2077              		.global	init_RegionTab
 2078              		.syntax unified
 2079              		.thumb
 2080              		.thumb_func
 2081              		.fpu fpv4-sp-d16
 2083              	init_RegionTab:
 2084              	.LFB13:
 302:src/xeq.c     ****   RegionTab[0] = (s_opcode*) Prog;
 2085              		.loc 1 302 28 is_stmt 1 view -0
 2086              		.cfi_startproc
 2087              		@ args = 0, pretend = 0, frame = 0
 2088              		@ frame_needed = 0, uses_anonymous_args = 0
 2089              		@ link register save eliminated.
 303:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2090              		.loc 1 303 3 view .LVU549
 303:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2091              		.loc 1 303 30 is_stmt 0 view .LVU550
 2092 0000 0649     		ldr	r1, .L170
 304:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 2093              		.loc 1 304 30 view .LVU551
 2094 0002 074A     		ldr	r2, .L170+4
 305:src/xeq.c     **** }
 2095              		.loc 1 305 30 view .LVU552
 2096 0004 074B     		ldr	r3, .L170+8
 303:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2097              		.loc 1 303 30 view .LVU553
 2098 0006 0868     		ldr	r0, [r1]
 304:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 2099              		.loc 1 304 30 view .LVU554
 2100 0008 1168     		ldr	r1, [r2]
 305:src/xeq.c     **** }
 2101              		.loc 1 305 30 view .LVU555
 2102 000a 1A68     		ldr	r2, [r3]
 303:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2103              		.loc 1 303 16 view .LVU556
 2104 000c 064B     		ldr	r3, .L170+12
 303:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2105              		.loc 1 303 30 view .LVU557
 2106 000e 0430     		adds	r0, r0, #4
 304:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 2107              		.loc 1 304 30 view .LVU558
ARM GAS  /tmp/ccqED0AM.s 			page 136


 2108 0010 0431     		adds	r1, r1, #4
 305:src/xeq.c     **** }
 2109              		.loc 1 305 30 view .LVU559
 2110 0012 0432     		adds	r2, r2, #4
 304:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 2111              		.loc 1 304 16 view .LVU560
 2112 0014 C3E90001 		strd	r0, r1, [r3]
 305:src/xeq.c     **** }
 2113              		.loc 1 305 3 is_stmt 1 view .LVU561
 305:src/xeq.c     **** }
 2114              		.loc 1 305 16 is_stmt 0 view .LVU562
 2115 0018 9A60     		str	r2, [r3, #8]
 306:src/xeq.c     **** 
 2116              		.loc 1 306 1 view .LVU563
 2117 001a 7047     		bx	lr
 2118              	.L171:
 2119              		.align	2
 2120              	.L170:
 2121 001c 00000000 		.word	main_ram
 2122 0020 00000000 		.word	library_ram
 2123 0024 00000000 		.word	backup_ram
 2124 0028 00000000 		.word	.LANCHOR0
 2125              		.cfi_endproc
 2126              	.LFE13:
 2128              		.section	.text.sizeLIB,"ax",%progbits
 2129              		.align	1
 2130              		.p2align 2,,3
 2131              		.global	sizeLIB
 2132              		.syntax unified
 2133              		.thumb
 2134              		.thumb_func
 2135              		.fpu fpv4-sp-d16
 2137              	sizeLIB:
 2138              	.LVL148:
 2139              	.LFB14:
 319:src/xeq.c     **** 	if (region == REGION_XROM)
 2140              		.loc 1 319 25 is_stmt 1 view -0
 2141              		.cfi_startproc
 2142              		@ args = 0, pretend = 0, frame = 0
 2143              		@ frame_needed = 0, uses_anonymous_args = 0
 2144              		@ link register save eliminated.
 320:src/xeq.c     **** 		return xrom_size;
 2145              		.loc 1 320 2 view .LVU565
 320:src/xeq.c     **** 		return xrom_size;
 2146              		.loc 1 320 5 is_stmt 0 view .LVU566
 2147 0000 0328     		cmp	r0, #3
 2148 0002 05D0     		beq	.L175
 323:src/xeq.c     **** }
 2149              		.loc 1 323 3 is_stmt 1 view .LVU567
 323:src/xeq.c     **** }
 2150              		.loc 1 323 24 is_stmt 0 view .LVU568
 2151 0004 044B     		ldr	r3, .L176
 323:src/xeq.c     **** }
 2152              		.loc 1 323 32 view .LVU569
 2153 0006 53F82030 		ldr	r3, [r3, r0, lsl #2]
 323:src/xeq.c     **** }
 2154              		.loc 1 323 10 view .LVU570
ARM GAS  /tmp/ccqED0AM.s 			page 137


 2155 000a 33F8020C 		ldrh	r0, [r3, #-2]
 2156              	.LVL149:
 324:src/xeq.c     **** 
 2157              		.loc 1 324 1 view .LVU571
 2158 000e 7047     		bx	lr
 2159              	.LVL150:
 2160              	.L175:
 321:src/xeq.c     **** 	else
 2161              		.loc 1 321 3 is_stmt 1 view .LVU572
 321:src/xeq.c     **** 	else
 2162              		.loc 1 321 10 is_stmt 0 view .LVU573
 2163 0010 024B     		ldr	r3, .L176+4
 2164 0012 1888     		ldrh	r0, [r3]
 2165              	.LVL151:
 321:src/xeq.c     **** 	else
 2166              		.loc 1 321 10 view .LVU574
 2167 0014 7047     		bx	lr
 2168              	.L177:
 2169 0016 00BF     		.align	2
 2170              	.L176:
 2171 0018 00000000 		.word	.LANCHOR0
 2172 001c 00000000 		.word	xrom_size
 2173              		.cfi_endproc
 2174              	.LFE14:
 2176              		.section	.text.getprog,"ax",%progbits
 2177              		.align	1
 2178              		.p2align 2,,3
 2179              		.global	getprog
 2180              		.syntax unified
 2181              		.thumb
 2182              		.thumb_func
 2183              		.fpu fpv4-sp-d16
 2185              	getprog:
 2186              	.LVL152:
 2187              	.LFB16:
 343:src/xeq.c     **** 
 2188              		.loc 1 343 33 is_stmt 1 view -0
 2189              		.cfi_startproc
 2190              		@ args = 0, pretend = 0, frame = 0
 2191              		@ frame_needed = 0, uses_anonymous_args = 0
 2192              		@ link register save eliminated.
 345:src/xeq.c     **** 	int offset = offsetLIB(pc);
 2193              		.loc 1 345 2 view .LVU576
 346:src/xeq.c     **** 
 2194              		.loc 1 346 15 is_stmt 0 view .LVU577
 2195 0000 C0F30D02 		ubfx	r2, r0, #0, #14
 2196 0004 531E     		subs	r3, r2, #1
 345:src/xeq.c     **** 	int offset = offsetLIB(pc);
 2197              		.loc 1 345 21 view .LVU578
 2198 0006 800B     		lsrs	r0, r0, #14
 2199              	.LVL153:
 346:src/xeq.c     **** 
 2200              		.loc 1 346 2 is_stmt 1 view .LVU579
 348:src/xeq.c     **** 		return OP_NIL | OP_END;
 2201              		.loc 1 348 2 view .LVU580
 348:src/xeq.c     **** 		return OP_NIL | OP_END;
 2202              		.loc 1 348 5 is_stmt 0 view .LVU581
ARM GAS  /tmp/ccqED0AM.s 			page 138


 2203 0008 BAB1     		cbz	r2, .L184
 2204              	.LVL154:
 2205              	.LBB1499:
 2206              	.LBI1499:
 319:src/xeq.c     **** 	if (region == REGION_XROM)
 2207              		.loc 1 319 5 is_stmt 1 view .LVU582
 2208              	.LBB1500:
 320:src/xeq.c     **** 		return xrom_size;
 2209              		.loc 1 320 2 view .LVU583
 320:src/xeq.c     **** 		return xrom_size;
 2210              		.loc 1 320 5 is_stmt 0 view .LVU584
 2211 000a 0328     		cmp	r0, #3
 2212 000c 18D0     		beq	.L185
 323:src/xeq.c     **** }
 2213              		.loc 1 323 3 is_stmt 1 view .LVU585
 323:src/xeq.c     **** }
 2214              		.loc 1 323 24 is_stmt 0 view .LVU586
 2215 000e 0E4A     		ldr	r2, .L187
 323:src/xeq.c     **** }
 2216              		.loc 1 323 32 view .LVU587
 2217 0010 52F82020 		ldr	r2, [r2, r0, lsl #2]
 323:src/xeq.c     **** }
 2218              		.loc 1 323 10 view .LVU588
 2219 0014 32F8022C 		ldrh	r2, [r2, #-2]
 2220              	.L181:
 2221              	.LVL155:
 323:src/xeq.c     **** }
 2222              		.loc 1 323 10 view .LVU589
 2223              	.LBE1500:
 2224              	.LBE1499:
 348:src/xeq.c     **** 		return OP_NIL | OP_END;
 2225              		.loc 1 348 17 view .LVU590
 2226 0018 9342     		cmp	r3, r2
 2227 001a 0EDA     		bge	.L184
 350:src/xeq.c     **** }
 2228              		.loc 1 350 2 is_stmt 1 view .LVU591
 350:src/xeq.c     **** }
 2229              		.loc 1 350 29 is_stmt 0 view .LVU592
 2230 001c 0A4A     		ldr	r2, .L187
 350:src/xeq.c     **** }
 2231              		.loc 1 350 38 view .LVU593
 2232 001e 52F82020 		ldr	r2, [r2, r0, lsl #2]
 2233              	.LBB1502:
 2234              	.LBB1503:
 332:src/xeq.c     **** 	if ( isDBL(r) ) {
 2235              		.loc 1 332 13 view .LVU594
 2236 0022 32F81300 		ldrh	r0, [r2, r3, lsl #1]
 2237              	.LVL156:
 333:src/xeq.c     **** 		r |= loc[1] << 16;
 2238              		.loc 1 333 5 view .LVU595
 2239 0026 00F47041 		and	r1, r0, #61440
 2240 002a B1F5704F 		cmp	r1, #61440
 2241              	.LBE1503:
 2242              	.LBE1502:
 350:src/xeq.c     **** }
 2243              		.loc 1 350 38 view .LVU596
 2244 002e 02EB4303 		add	r3, r2, r3, lsl #1
ARM GAS  /tmp/ccqED0AM.s 			page 139


 2245              	.LVL157:
 2246              	.LBB1506:
 2247              	.LBI1502:
 330:src/xeq.c     **** {
 2248              		.loc 1 330 15 is_stmt 1 view .LVU597
 2249              	.LBB1504:
 332:src/xeq.c     **** 	if ( isDBL(r) ) {
 2250              		.loc 1 332 2 view .LVU598
 333:src/xeq.c     **** 		r |= loc[1] << 16;
 2251              		.loc 1 333 2 view .LVU599
 333:src/xeq.c     **** 		r |= loc[1] << 16;
 2252              		.loc 1 333 5 is_stmt 0 view .LVU600
 2253 0032 00D0     		beq	.L186
 2254              	.LBE1504:
 2255              	.LBE1506:
 351:src/xeq.c     **** 
 2256              		.loc 1 351 1 view .LVU601
 2257 0034 7047     		bx	lr
 2258              	.L186:
 2259              	.LBB1507:
 2260              	.LBB1505:
 334:src/xeq.c     **** 	}
 2261              		.loc 1 334 3 is_stmt 1 view .LVU602
 334:src/xeq.c     **** 	}
 2262              		.loc 1 334 5 is_stmt 0 view .LVU603
 2263 0036 1868     		ldr	r0, [r3]	@ unaligned
 2264              	.LVL158:
 334:src/xeq.c     **** 	}
 2265              		.loc 1 334 5 view .LVU604
 2266 0038 7047     		bx	lr
 2267              	.LVL159:
 2268              	.L184:
 334:src/xeq.c     **** 	}
 2269              		.loc 1 334 5 view .LVU605
 2270              	.LBE1505:
 2271              	.LBE1507:
 349:src/xeq.c     **** 	return get_opcode(RegionTab[region] + offset);
 2272              		.loc 1 349 10 view .LVU606
 2273 003a 4FF49D70 		mov	r0, #314
 2274              	.LVL160:
 351:src/xeq.c     **** 
 2275              		.loc 1 351 1 view .LVU607
 2276 003e 7047     		bx	lr
 2277              	.LVL161:
 2278              	.L185:
 2279              	.LBB1508:
 2280              	.LBB1501:
 321:src/xeq.c     **** 	else
 2281              		.loc 1 321 3 is_stmt 1 view .LVU608
 321:src/xeq.c     **** 	else
 2282              		.loc 1 321 10 is_stmt 0 view .LVU609
 2283 0040 024A     		ldr	r2, .L187+4
 2284 0042 1288     		ldrh	r2, [r2]
 2285 0044 E8E7     		b	.L181
 2286              	.L188:
 2287 0046 00BF     		.align	2
 2288              	.L187:
ARM GAS  /tmp/ccqED0AM.s 			page 140


 2289 0048 00000000 		.word	.LANCHOR0
 2290 004c 00000000 		.word	xrom_size
 2291              	.LBE1501:
 2292              	.LBE1508:
 2293              		.cfi_endproc
 2294              	.LFE16:
 2296              		.section	.text.get_current_prog,"ax",%progbits
 2297              		.align	1
 2298              		.p2align 2,,3
 2299              		.global	get_current_prog
 2300              		.syntax unified
 2301              		.thumb
 2302              		.thumb_func
 2303              		.fpu fpv4-sp-d16
 2305              	get_current_prog:
 2306              	.LFB17:
 357:src/xeq.c     **** 
 2307              		.loc 1 357 40 is_stmt 1 view -0
 2308              		.cfi_startproc
 2309              		@ args = 0, pretend = 0, frame = 0
 2310              		@ frame_needed = 0, uses_anonymous_args = 0
 2311              		@ link register save eliminated.
 359:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2312              		.loc 1 359 2 view .LVU611
 359:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2313              		.loc 1 359 21 is_stmt 0 view .LVU612
 2314 0000 074B     		ldr	r3, .L190
 360:src/xeq.c     **** }
 2315              		.loc 1 360 18 view .LVU613
 2316 0002 084A     		ldr	r2, .L190+4
 359:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2317              		.loc 1 359 21 view .LVU614
 2318 0004 1B68     		ldr	r3, [r3]
 2319 0006 B3F8EC37 		ldrh	r3, [r3, #2028]
 2320              	.LVL162:
 360:src/xeq.c     **** }
 2321              		.loc 1 360 2 is_stmt 1 view .LVU615
 359:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2322              		.loc 1 359 12 is_stmt 0 view .LVU616
 2323 000a 990B     		lsrs	r1, r3, #14
 360:src/xeq.c     **** }
 2324              		.loc 1 360 27 view .LVU617
 2325 000c C3F30D03 		ubfx	r3, r3, #0, #14
 2326              	.LVL163:
 360:src/xeq.c     **** }
 2327              		.loc 1 360 27 view .LVU618
 2328 0010 52F82100 		ldr	r0, [r2, r1, lsl #2]
 2329 0014 03F10043 		add	r3, r3, #-2147483648
 2330 0018 013B     		subs	r3, r3, #1
 361:src/xeq.c     **** 
 2331              		.loc 1 361 1 view .LVU619
 2332 001a 00EB4300 		add	r0, r0, r3, lsl #1
 2333 001e 7047     		bx	lr
 2334              	.L191:
 2335              		.align	2
 2336              	.L190:
 2337 0020 00000000 		.word	main_ram
ARM GAS  /tmp/ccqED0AM.s 			page 141


 2338 0024 00000000 		.word	.LANCHOR0
 2339              		.cfi_endproc
 2340              	.LFE17:
 2342              		.section	.text.do_inc,"ax",%progbits
 2343              		.align	1
 2344              		.p2align 2,,3
 2345              		.global	do_inc
 2346              		.syntax unified
 2347              		.thumb
 2348              		.thumb_func
 2349              		.fpu fpv4-sp-d16
 2351              	do_inc:
 2352              	.LVL164:
 2353              	.LFB20:
 418:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 2354              		.loc 1 418 54 is_stmt 1 view -0
 2355              		.cfi_startproc
 2356              		@ args = 0, pretend = 0, frame = 16
 2357              		@ frame_needed = 0, uses_anonymous_args = 0
 419:src/xeq.c     **** 	unsigned short int top = 0;
 2358              		.loc 1 419 2 view .LVU621
 418:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 2359              		.loc 1 418 54 is_stmt 0 view .LVU622
 2360 0000 70B5     		push	{r4, r5, r6, lr}
 2361              		.cfi_def_cfa_offset 16
 2362              		.cfi_offset 4, -16
 2363              		.cfi_offset 5, -12
 2364              		.cfi_offset 6, -8
 2365              		.cfi_offset 14, -4
 2366 0002 84B0     		sub	sp, sp, #16
 2367              		.cfi_def_cfa_offset 32
 418:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 2368              		.loc 1 418 54 view .LVU623
 2369 0004 0546     		mov	r5, r0
 2370 0006 0191     		str	r1, [sp, #4]
 419:src/xeq.c     **** 	unsigned short int top = 0;
 2371              		.loc 1 419 42 view .LVU624
 2372 0008 FFF7FEFF 		bl	getprog
 2373              	.LVL165:
 423:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2374              		.loc 1 423 12 view .LVU625
 2375 000c 0D4E     		ldr	r6, .L196
 424:src/xeq.c     **** 
 2376              		.loc 1 424 11 view .LVU626
 2377 000e 0199     		ldr	r1, [sp, #4]
 419:src/xeq.c     **** 	unsigned short int top = 0;
 2378              		.loc 1 419 42 view .LVU627
 2379 0010 00F47040 		and	r0, r0, #61440
 419:src/xeq.c     **** 	unsigned short int top = 0;
 2380              		.loc 1 419 27 view .LVU628
 2381 0014 6C1C     		adds	r4, r5, #1
 420:src/xeq.c     **** 	unsigned short int bottom = 0;
 2382              		.loc 1 420 21 view .LVU629
 2383 0016 0023     		movs	r3, #0
 419:src/xeq.c     **** 	unsigned short int top = 0;
 2384              		.loc 1 419 27 view .LVU630
 2385 0018 B0F5704F 		cmp	r0, #61440
ARM GAS  /tmp/ccqED0AM.s 			page 142


 2386 001c 08BF     		it	eq
 2387 001e 0134     		addeq	r4, r4, #1
 424:src/xeq.c     **** 
 2388              		.loc 1 424 11 view .LVU631
 2389 0020 0DF10E02 		add	r2, sp, #14
 2390 0024 2846     		mov	r0, r5
 423:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2391              		.loc 1 423 12 view .LVU632
 2392 0026 3360     		str	r3, [r6]
 420:src/xeq.c     **** 	unsigned short int bottom = 0;
 2393              		.loc 1 420 21 view .LVU633
 2394 0028 ADF80E30 		strh	r3, [sp, #14]	@ movhi
 424:src/xeq.c     **** 
 2395              		.loc 1 424 11 view .LVU634
 2396 002c FFF7FEFF 		bl	find_section_bounds
 2397              	.LVL166:
 419:src/xeq.c     **** 	unsigned short int top = 0;
 2398              		.loc 1 419 27 view .LVU635
 2399 0030 A4B2     		uxth	r4, r4
 2400              	.LVL167:
 420:src/xeq.c     **** 	unsigned short int bottom = 0;
 2401              		.loc 1 420 2 is_stmt 1 view .LVU636
 421:src/xeq.c     **** 
 2402              		.loc 1 421 2 view .LVU637
 423:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2403              		.loc 1 423 2 view .LVU638
 424:src/xeq.c     **** 
 2404              		.loc 1 424 2 view .LVU639
 426:src/xeq.c     **** 		PcWrapped = 1;
 2405              		.loc 1 426 2 view .LVU640
 426:src/xeq.c     **** 		PcWrapped = 1;
 2406              		.loc 1 426 5 is_stmt 0 view .LVU641
 2407 0032 8442     		cmp	r4, r0
 427:src/xeq.c     **** 		return top;
 2408              		.loc 1 427 3 is_stmt 1 view .LVU642
 428:src/xeq.c     **** 	}
 2409              		.loc 1 428 10 is_stmt 0 view .LVU643
 2410 0034 85BF     		ittet	hi
 2411 0036 BDF80E00 		ldrhhi	r0, [sp, #14]
 2412              	.LVL168:
 427:src/xeq.c     **** 		return top;
 2413              		.loc 1 427 13 view .LVU644
 2414 003a 0123     		movhi	r3, #1
 430:src/xeq.c     **** }
 2415              		.loc 1 430 9 view .LVU645
 2416 003c 2046     		movls	r0, r4
 427:src/xeq.c     **** 		return top;
 2417              		.loc 1 427 13 view .LVU646
 2418 003e 3360     		strhi	r3, [r6]
 428:src/xeq.c     **** 	}
 2419              		.loc 1 428 3 is_stmt 1 view .LVU647
 430:src/xeq.c     **** }
 2420              		.loc 1 430 2 view .LVU648
 431:src/xeq.c     **** 
 2421              		.loc 1 431 1 is_stmt 0 view .LVU649
 2422 0040 04B0     		add	sp, sp, #16
 2423              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccqED0AM.s 			page 143


 2424              		@ sp needed
 2425 0042 70BD     		pop	{r4, r5, r6, pc}
 2426              	.LVL169:
 2427              	.L197:
 431:src/xeq.c     **** 
 2428              		.loc 1 431 1 view .LVU650
 2429              		.align	2
 2430              	.L196:
 2431 0044 00000000 		.word	PcWrapped
 2432              		.cfi_endproc
 2433              	.LFE20:
 2435              		.section	.text.user_pc.part.0,"ax",%progbits
 2436              		.align	1
 2437              		.p2align 2,,3
 2438              		.syntax unified
 2439              		.thumb
 2440              		.thumb_func
 2441              		.fpu fpv4-sp-d16
 2443              	user_pc.part.0:
 2444              	.LVL170:
 2445              	.LFB276:
 494:src/xeq.c     **** 	unsigned int n = 1;
 2446              		.loc 1 494 14 is_stmt 1 view -0
 2447              		.cfi_startproc
 2448              		@ args = 0, pretend = 0, frame = 0
 2449              		@ frame_needed = 0, uses_anonymous_args = 0
 505:src/xeq.c     **** 	while (base < pc) {
 2450              		.loc 1 505 2 view .LVU652
 505:src/xeq.c     **** 	while (base < pc) {
 2451              		.loc 1 505 9 is_stmt 0 view .LVU653
 2452 0000 20F47F53 		bic	r3, r0, #16320
 2453 0004 23F03F03 		bic	r3, r3, #63
 494:src/xeq.c     **** 	unsigned int n = 1;
 2454              		.loc 1 494 14 view .LVU654
 2455 0008 70B5     		push	{r4, r5, r6, lr}
 2456              		.cfi_def_cfa_offset 16
 2457              		.cfi_offset 4, -16
 2458              		.cfi_offset 5, -12
 2459              		.cfi_offset 6, -8
 2460              		.cfi_offset 14, -4
 494:src/xeq.c     **** 	unsigned int n = 1;
 2461              		.loc 1 494 14 view .LVU655
 2462 000a 0546     		mov	r5, r0
 505:src/xeq.c     **** 	while (base < pc) {
 2463              		.loc 1 505 7 view .LVU656
 2464 000c 581C     		adds	r0, r3, #1
 2465              	.LVL171:
 506:src/xeq.c     **** 		base = do_inc(base, 0);
 2466              		.loc 1 506 2 is_stmt 1 view .LVU657
 506:src/xeq.c     **** 		base = do_inc(base, 0);
 2467              		.loc 1 506 8 view .LVU658
 2468 000e 8542     		cmp	r5, r0
 2469 0010 0ED9     		bls	.L201
 2470 0012 084E     		ldr	r6, .L205
 495:src/xeq.c     **** 	unsigned int base;
 2471              		.loc 1 495 15 is_stmt 0 view .LVU659
 2472 0014 0124     		movs	r4, #1
ARM GAS  /tmp/ccqED0AM.s 			page 144


 2473 0016 03E0     		b	.L200
 2474              	.LVL172:
 2475              	.L204:
 506:src/xeq.c     **** 		base = do_inc(base, 0);
 2476              		.loc 1 506 8 view .LVU660
 2477 0018 8542     		cmp	r5, r0
 510:src/xeq.c     **** 	}
 2478              		.loc 1 510 3 view .LVU661
 2479 001a 04F10104 		add	r4, r4, #1
 2480              	.LVL173:
 506:src/xeq.c     **** 		base = do_inc(base, 0);
 2481              		.loc 1 506 8 is_stmt 1 view .LVU662
 2482 001e 05D9     		bls	.L198
 2483              	.LVL174:
 2484              	.L200:
 507:src/xeq.c     **** 		if (PcWrapped)
 2485              		.loc 1 507 3 view .LVU663
 507:src/xeq.c     **** 		if (PcWrapped)
 2486              		.loc 1 507 10 is_stmt 0 view .LVU664
 2487 0020 0021     		movs	r1, #0
 2488 0022 FFF7FEFF 		bl	do_inc
 2489              	.LVL175:
 510:src/xeq.c     **** 	}
 2490              		.loc 1 510 3 is_stmt 1 view .LVU665
 508:src/xeq.c     **** 			return n;
 2491              		.loc 1 508 6 is_stmt 0 view .LVU666
 2492 0026 3368     		ldr	r3, [r6]
 2493              	.LVL176:
 508:src/xeq.c     **** 			return n;
 2494              		.loc 1 508 3 is_stmt 1 view .LVU667
 508:src/xeq.c     **** 			return n;
 2495              		.loc 1 508 6 is_stmt 0 view .LVU668
 2496 0028 002B     		cmp	r3, #0
 2497 002a F5D0     		beq	.L204
 2498              	.LVL177:
 2499              	.L198:
 513:src/xeq.c     **** 
 2500              		.loc 1 513 1 view .LVU669
 2501 002c 2046     		mov	r0, r4
 2502              	.LVL178:
 513:src/xeq.c     **** 
 2503              		.loc 1 513 1 view .LVU670
 2504 002e 70BD     		pop	{r4, r5, r6, pc}
 2505              	.LVL179:
 2506              	.L201:
 495:src/xeq.c     **** 	unsigned int base;
 2507              		.loc 1 495 15 view .LVU671
 2508 0030 0124     		movs	r4, #1
 2509 0032 FBE7     		b	.L198
 2510              	.L206:
 2511              		.align	2
 2512              	.L205:
 2513 0034 00000000 		.word	PcWrapped
 2514              		.cfi_endproc
 2515              	.LFE276:
 2517              		.section	.rodata.print_step.str1.4,"aMS",%progbits,1
 2518              		.align	2
ARM GAS  /tmp/ccqED0AM.s 			page 145


 2519              	.LC0:
 2520 0000 3030303A 		.ascii	"000:\000"
 2520      00
 2521              		.section	.text.print_step,"ax",%progbits
 2522              		.align	1
 2523              		.p2align 2,,3
 2524              		.syntax unified
 2525              		.thumb
 2526              		.thumb_func
 2527              		.fpu fpv4-sp-d16
 2529              	print_step:
 2530              	.LVL180:
 2531              	.LFB234:
4426:src/xeq.c     **** 	char buf[16];
 2532              		.loc 1 4426 41 is_stmt 1 view -0
 2533              		.cfi_startproc
 2534              		@ args = 0, pretend = 0, frame = 16
 2535              		@ frame_needed = 0, uses_anonymous_args = 0
4427:src/xeq.c     **** 	const unsigned int pc = state_pc();
 2536              		.loc 1 4427 2 view .LVU673
4428:src/xeq.c     **** 	char *p = TraceBuffer;
 2537              		.loc 1 4428 2 view .LVU674
4428:src/xeq.c     **** 	char *p = TraceBuffer;
 2538              		.loc 1 4428 26 is_stmt 0 view .LVU675
 2539 0000 254B     		ldr	r3, .L221
 2540 0002 1B68     		ldr	r3, [r3]
4426:src/xeq.c     **** 	char buf[16];
 2541              		.loc 1 4426 41 view .LVU676
 2542 0004 F0B5     		push	{r4, r5, r6, r7, lr}
 2543              		.cfi_def_cfa_offset 20
 2544              		.cfi_offset 4, -20
 2545              		.cfi_offset 5, -16
 2546              		.cfi_offset 6, -12
 2547              		.cfi_offset 7, -8
 2548              		.cfi_offset 14, -4
4428:src/xeq.c     **** 	char *p = TraceBuffer;
 2549              		.loc 1 4428 26 view .LVU677
 2550 0006 B3F8E047 		ldrh	r4, [r3, #2016]
 2551              	.LVL181:
4429:src/xeq.c     **** 
 2552              		.loc 1 4429 2 is_stmt 1 view .LVU678
4431:src/xeq.c     **** 		*p++ = 'x';
 2553              		.loc 1 4431 2 view .LVU679
4431:src/xeq.c     **** 		*p++ = 'x';
 2554              		.loc 1 4431 6 is_stmt 0 view .LVU680
 2555 000a A10B     		lsrs	r1, r4, #14
4431:src/xeq.c     **** 		*p++ = 'x';
 2556              		.loc 1 4431 5 view .LVU681
 2557 000c 0329     		cmp	r1, #3
4426:src/xeq.c     **** 	char buf[16];
 2558              		.loc 1 4426 41 view .LVU682
 2559 000e 85B0     		sub	sp, sp, #20
 2560              		.cfi_def_cfa_offset 40
4426:src/xeq.c     **** 	char buf[16];
 2561              		.loc 1 4426 41 view .LVU683
 2562 0010 0546     		mov	r5, r0
4431:src/xeq.c     **** 		*p++ = 'x';
ARM GAS  /tmp/ccqED0AM.s 			page 146


 2563              		.loc 1 4431 5 view .LVU684
 2564 0012 39D0     		beq	.L218
4433:src/xeq.c     **** 		p = num_arg_0(p, nLIB(pc), 1);
 2565              		.loc 1 4433 9 is_stmt 1 view .LVU685
4433:src/xeq.c     **** 		p = num_arg_0(p, nLIB(pc), 1);
 2566              		.loc 1 4433 12 is_stmt 0 view .LVU686
 2567 0014 14F4404F 		tst	r4, #49152
 2568 0018 0FD1     		bne	.L219
4429:src/xeq.c     **** 
 2569              		.loc 1 4429 8 view .LVU687
 2570 001a 204E     		ldr	r6, .L221+4
 2571 001c 3746     		mov	r7, r6
 2572              	.LVL182:
4437:src/xeq.c     **** 		scopy(p, "000:");
 2573              		.loc 1 4437 2 is_stmt 1 view .LVU688
4437:src/xeq.c     **** 		scopy(p, "000:");
 2574              		.loc 1 4437 5 is_stmt 0 view .LVU689
 2575 001e BCB9     		cbnz	r4, .L220
 2576              	.LVL183:
 2577              	.L212:
4438:src/xeq.c     **** 	else {
 2578              		.loc 1 4438 3 is_stmt 1 view .LVU690
 2579 0020 1F49     		ldr	r1, .L221+8
 2580 0022 3846     		mov	r0, r7
 2581 0024 FFF7FEFF 		bl	scopy
 2582              	.LVL184:
 2583              	.L211:
4446:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2584              		.loc 1 4446 2 view .LVU691
4446:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2585              		.loc 1 4446 20 is_stmt 0 view .LVU692
 2586 0028 1E4A     		ldr	r2, .L221+12
4447:src/xeq.c     **** }
 2587              		.loc 1 4447 10 view .LVU693
 2588 002a 1F49     		ldr	r1, .L221+16
4446:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2589              		.loc 1 4446 20 view .LVU694
 2590 002c 937D     		ldrb	r3, [r2, #22]	@ zero_extendqisi2
4447:src/xeq.c     **** }
 2591              		.loc 1 4447 10 view .LVU695
 2592 002e 0E60     		str	r6, [r1]
4446:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2593              		.loc 1 4446 20 view .LVU696
 2594 0030 43F08003 		orr	r3, r3, #128
 2595 0034 9375     		strb	r3, [r2, #22]
4447:src/xeq.c     **** }
 2596              		.loc 1 4447 2 is_stmt 1 view .LVU697
4448:src/xeq.c     **** 
 2597              		.loc 1 4448 1 is_stmt 0 view .LVU698
 2598 0036 05B0     		add	sp, sp, #20
 2599              		.cfi_remember_state
 2600              		.cfi_def_cfa_offset 20
 2601              		@ sp needed
 2602 0038 F0BD     		pop	{r4, r5, r6, r7, pc}
 2603              	.LVL185:
 2604              	.L219:
 2605              		.cfi_restore_state
ARM GAS  /tmp/ccqED0AM.s 			page 147


4434:src/xeq.c     **** 		*p++ = ' ';
 2606              		.loc 1 4434 3 is_stmt 1 view .LVU699
4434:src/xeq.c     **** 		*p++ = ' ';
 2607              		.loc 1 4434 7 is_stmt 0 view .LVU700
 2608 003a 1848     		ldr	r0, .L221+4
 2609              	.LVL186:
4434:src/xeq.c     **** 		*p++ = ' ';
 2610              		.loc 1 4434 7 view .LVU701
 2611 003c 0122     		movs	r2, #1
 2612 003e 0646     		mov	r6, r0
 2613 0040 FFF7FEFF 		bl	num_arg_0
 2614              	.LVL187:
4435:src/xeq.c     **** 	}
 2615              		.loc 1 4435 3 is_stmt 1 view .LVU702
4435:src/xeq.c     **** 	}
 2616              		.loc 1 4435 5 is_stmt 0 view .LVU703
 2617 0044 0746     		mov	r7, r0
 2618              	.LVL188:
4435:src/xeq.c     **** 	}
 2619              		.loc 1 4435 8 view .LVU704
 2620 0046 2023     		movs	r3, #32
 2621 0048 07F8013B 		strb	r3, [r7], #1
 2622              	.LVL189:
4437:src/xeq.c     **** 		scopy(p, "000:");
 2623              		.loc 1 4437 2 is_stmt 1 view .LVU705
4437:src/xeq.c     **** 		scopy(p, "000:");
 2624              		.loc 1 4437 5 is_stmt 0 view .LVU706
 2625 004c 002C     		cmp	r4, #0
 2626 004e E7D0     		beq	.L212
 2627              	.L220:
 2628              	.LVL190:
 2629              	.LBB1509:
 2630              	.LBB1510:
4437:src/xeq.c     **** 		scopy(p, "000:");
 2631              		.loc 1 4437 5 view .LVU707
 2632 0050 2046     		mov	r0, r4
 2633 0052 FFF7FEFF 		bl	user_pc.part.0
 2634              	.LVL191:
 2635 0056 0146     		mov	r1, r0
 2636              	.L209:
4437:src/xeq.c     **** 		scopy(p, "000:");
 2637              		.loc 1 4437 5 view .LVU708
 2638              	.LBE1510:
 2639              	.LBE1509:
4440:src/xeq.c     **** 		*p++ = ':';
 2640              		.loc 1 4440 7 view .LVU709
 2641 0058 0322     		movs	r2, #3
 2642 005a 3846     		mov	r0, r7
 2643 005c FFF7FEFF 		bl	num_arg_0
 2644              	.LVL192:
4441:src/xeq.c     **** 		scopy_char(p, prt(op, buf), '\0');
 2645              		.loc 1 4441 8 view .LVU710
 2646 0060 0746     		mov	r7, r0
 2647 0062 3A23     		movs	r3, #58
 2648 0064 07F8013B 		strb	r3, [r7], #1
4440:src/xeq.c     **** 		*p++ = ':';
 2649              		.loc 1 4440 7 view .LVU711
ARM GAS  /tmp/ccqED0AM.s 			page 148


 2650 0068 0446     		mov	r4, r0
 2651              	.LVL193:
4441:src/xeq.c     **** 		scopy_char(p, prt(op, buf), '\0');
 2652              		.loc 1 4441 3 is_stmt 1 view .LVU712
4442:src/xeq.c     **** 		if (*p == '?')
 2653              		.loc 1 4442 3 view .LVU713
 2654 006a 6946     		mov	r1, sp
 2655 006c 2846     		mov	r0, r5
 2656 006e FFF7FEFF 		bl	prt
 2657              	.LVL194:
 2658 0072 0022     		movs	r2, #0
 2659 0074 0146     		mov	r1, r0
 2660 0076 3846     		mov	r0, r7
 2661 0078 FFF7FEFF 		bl	scopy_char
 2662              	.LVL195:
4443:src/xeq.c     **** 			*p = '\0';
 2663              		.loc 1 4443 3 view .LVU714
4443:src/xeq.c     **** 			*p = '\0';
 2664              		.loc 1 4443 6 is_stmt 0 view .LVU715
 2665 007c 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 2666 007e 3F2B     		cmp	r3, #63
4444:src/xeq.c     **** 	}
 2667              		.loc 1 4444 4 is_stmt 1 view .LVU716
4444:src/xeq.c     **** 	}
 2668              		.loc 1 4444 7 is_stmt 0 view .LVU717
 2669 0080 04BF     		itt	eq
 2670 0082 0023     		moveq	r3, #0
 2671 0084 6370     		strbeq	r3, [r4, #1]
 2672 0086 CFE7     		b	.L211
 2673              	.LVL196:
 2674              	.L218:
4432:src/xeq.c     **** 	} else if (isLIB(pc)) {
 2675              		.loc 1 4432 3 is_stmt 1 view .LVU718
4432:src/xeq.c     **** 	} else if (isLIB(pc)) {
 2676              		.loc 1 4432 8 is_stmt 0 view .LVU719
 2677 0088 044E     		ldr	r6, .L221+4
 2678 008a 3746     		mov	r7, r6
 2679 008c 7823     		movs	r3, #120
 2680 008e 07F8013B 		strb	r3, [r7], #1
4437:src/xeq.c     **** 		scopy(p, "000:");
 2681              		.loc 1 4437 2 is_stmt 1 view .LVU720
4440:src/xeq.c     **** 		*p++ = ':';
 2682              		.loc 1 4440 3 view .LVU721
 2683              	.LBB1512:
 2684              	.LBI1509:
 494:src/xeq.c     **** 	unsigned int n = 1;
 2685              		.loc 1 494 14 view .LVU722
 2686              	.LBB1511:
 495:src/xeq.c     **** 	unsigned int base;
 2687              		.loc 1 495 2 view .LVU723
 2688              	.LVL197:
 496:src/xeq.c     **** 
 2689              		.loc 1 496 2 view .LVU724
 499:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 2690              		.loc 1 499 2 view .LVU725
 500:src/xeq.c     **** #else
 2691              		.loc 1 500 3 view .LVU726
ARM GAS  /tmp/ccqED0AM.s 			page 149


 500:src/xeq.c     **** #else
 2692              		.loc 1 500 24 is_stmt 0 view .LVU727
 2693 0092 C4F30D01 		ubfx	r1, r4, #0, #14
 2694 0096 DFE7     		b	.L209
 2695              	.L222:
 2696              		.align	2
 2697              	.L221:
 2698 0098 00000000 		.word	main_ram
 2699 009c 00000000 		.word	TraceBuffer
 2700 00a0 00000000 		.word	.LC0
 2701 00a4 00000000 		.word	StateWhileOn
 2702 00a8 00000000 		.word	DispMsg
 2703              	.LBE1511:
 2704              	.LBE1512:
 2705              		.cfi_endproc
 2706              	.LFE234:
 2708              		.section	.text.do_dec,"ax",%progbits
 2709              		.align	1
 2710              		.p2align 2,,3
 2711              		.global	do_dec
 2712              		.syntax unified
 2713              		.thumb
 2714              		.thumb_func
 2715              		.fpu fpv4-sp-d16
 2717              	do_dec:
 2718              	.LVL198:
 2719              	.LFB21:
 437:src/xeq.c     **** 	unsigned short int top = 0;
 2720              		.loc 1 437 48 is_stmt 1 view -0
 2721              		.cfi_startproc
 2722              		@ args = 0, pretend = 0, frame = 8
 2723              		@ frame_needed = 0, uses_anonymous_args = 0
 438:src/xeq.c     **** 	unsigned short int bottom = 0;
 2724              		.loc 1 438 2 view .LVU729
 437:src/xeq.c     **** 	unsigned short int top = 0;
 2725              		.loc 1 437 48 is_stmt 0 view .LVU730
 2726 0000 70B5     		push	{r4, r5, r6, lr}
 2727              		.cfi_def_cfa_offset 16
 2728              		.cfi_offset 4, -16
 2729              		.cfi_offset 5, -12
 2730              		.cfi_offset 6, -8
 2731              		.cfi_offset 14, -4
 441:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2732              		.loc 1 441 12 view .LVU731
 2733 0002 114E     		ldr	r6, .L228
 437:src/xeq.c     **** 	unsigned short int top = 0;
 2734              		.loc 1 437 48 view .LVU732
 2735 0004 82B0     		sub	sp, sp, #8
 2736              		.cfi_def_cfa_offset 24
 438:src/xeq.c     **** 	unsigned short int bottom = 0;
 2737              		.loc 1 438 21 view .LVU733
 2738 0006 0023     		movs	r3, #0
 442:src/xeq.c     **** 
 2739              		.loc 1 442 11 view .LVU734
 2740 0008 0DF10602 		add	r2, sp, #6
 437:src/xeq.c     **** 	unsigned short int top = 0;
 2741              		.loc 1 437 48 view .LVU735
ARM GAS  /tmp/ccqED0AM.s 			page 150


 2742 000c 0546     		mov	r5, r0
 441:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2743              		.loc 1 441 12 view .LVU736
 2744 000e 3360     		str	r3, [r6]
 438:src/xeq.c     **** 	unsigned short int bottom = 0;
 2745              		.loc 1 438 21 view .LVU737
 2746 0010 ADF80630 		strh	r3, [sp, #6]	@ movhi
 439:src/xeq.c     **** 
 2747              		.loc 1 439 2 is_stmt 1 view .LVU738
 2748              	.LVL199:
 441:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2749              		.loc 1 441 2 view .LVU739
 442:src/xeq.c     **** 
 2750              		.loc 1 442 2 view .LVU740
 442:src/xeq.c     **** 
 2751              		.loc 1 442 11 is_stmt 0 view .LVU741
 2752 0014 FFF7FEFF 		bl	find_section_bounds
 2753              	.LVL200:
 444:src/xeq.c     **** 		PcWrapped = 1;
 2754              		.loc 1 444 9 view .LVU742
 2755 0018 BDF80630 		ldrh	r3, [sp, #6]
 2756              	.LVL201:
 444:src/xeq.c     **** 		PcWrapped = 1;
 2757              		.loc 1 444 2 is_stmt 1 view .LVU743
 444:src/xeq.c     **** 		PcWrapped = 1;
 2758              		.loc 1 444 5 is_stmt 0 view .LVU744
 2759 001c AB42     		cmp	r3, r5
 445:src/xeq.c     **** 		pc = bottom;
 2760              		.loc 1 445 13 view .LVU745
 2761 001e 25BF     		ittet	cs
 2762 0020 0122     		movcs	r2, #1
 2763 0022 0446     		movcs	r4, r0
 445:src/xeq.c     **** 		pc = bottom;
 2764              		.loc 1 445 3 is_stmt 1 view .LVU746
 449:src/xeq.c     **** 	if (pc > top && isDBL(getprog(pc - 1)))
 2765              		.loc 1 449 3 is_stmt 0 view .LVU747
 2766 0024 05F1FF34 		addcc	r4, r5, #-1
 445:src/xeq.c     **** 		pc = bottom;
 2767              		.loc 1 445 13 view .LVU748
 2768 0028 3260     		strcs	r2, [r6]
 446:src/xeq.c     **** 	}
 2769              		.loc 1 446 3 is_stmt 1 view .LVU749
 2770              	.LVL202:
 449:src/xeq.c     **** 	if (pc > top && isDBL(getprog(pc - 1)))
 2771              		.loc 1 449 3 view .LVU750
 450:src/xeq.c     **** 		--pc;
 2772              		.loc 1 450 2 view .LVU751
 450:src/xeq.c     **** 		--pc;
 2773              		.loc 1 450 5 is_stmt 0 view .LVU752
 2774 002a A342     		cmp	r3, r4
 2775 002c 09D2     		bcs	.L223
 450:src/xeq.c     **** 		--pc;
 2776              		.loc 1 450 18 discriminator 1 view .LVU753
 2777 002e 651E     		subs	r5, r4, #1
 2778 0030 2846     		mov	r0, r5
 2779              	.LVL203:
 450:src/xeq.c     **** 		--pc;
ARM GAS  /tmp/ccqED0AM.s 			page 151


 2780              		.loc 1 450 18 discriminator 1 view .LVU754
 2781 0032 FFF7FEFF 		bl	getprog
 2782              	.LVL204:
 2783 0036 00F47040 		and	r0, r0, #61440
 451:src/xeq.c     **** 	return pc;
 2784              		.loc 1 451 3 discriminator 1 view .LVU755
 2785 003a B0F5704F 		cmp	r0, #61440
 2786 003e 08BF     		it	eq
 2787 0040 2C46     		moveq	r4, r5
 2788              	.LVL205:
 2789              	.L223:
 453:src/xeq.c     **** 
 2790              		.loc 1 453 1 view .LVU756
 2791 0042 2046     		mov	r0, r4
 2792 0044 02B0     		add	sp, sp, #8
 2793              		.cfi_def_cfa_offset 16
 2794              		@ sp needed
 2795 0046 70BD     		pop	{r4, r5, r6, pc}
 2796              	.L229:
 2797              		.align	2
 2798              	.L228:
 2799 0048 00000000 		.word	PcWrapped
 2800              		.cfi_endproc
 2801              	.LFE21:
 2803              		.section	.text.update_program_bounds,"ax",%progbits
 2804              		.align	1
 2805              		.p2align 2,,3
 2806              		.global	update_program_bounds
 2807              		.syntax unified
 2808              		.thumb
 2809              		.thumb_func
 2810              		.fpu fpv4-sp-d16
 2812              	update_program_bounds:
 2813              	.LVL206:
 2814              	.LFB24:
 470:src/xeq.c     **** 	unsigned int pc = state_pc();
 2815              		.loc 1 470 45 is_stmt 1 view -0
 2816              		.cfi_startproc
 2817              		@ args = 0, pretend = 0, frame = 0
 2818              		@ frame_needed = 0, uses_anonymous_args = 0
 471:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 2819              		.loc 1 471 2 view .LVU758
 470:src/xeq.c     **** 	unsigned int pc = state_pc();
 2820              		.loc 1 470 45 is_stmt 0 view .LVU759
 2821 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2822              		.cfi_def_cfa_offset 24
 2823              		.cfi_offset 3, -24
 2824              		.cfi_offset 4, -20
 2825              		.cfi_offset 5, -16
 2826              		.cfi_offset 6, -12
 2827              		.cfi_offset 7, -8
 2828              		.cfi_offset 14, -4
 471:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 2829              		.loc 1 471 20 view .LVU760
 2830 0002 224F     		ldr	r7, .L251
 2831 0004 3D68     		ldr	r5, [r7]
 471:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
ARM GAS  /tmp/ccqED0AM.s 			page 152


 2832              		.loc 1 471 15 view .LVU761
 2833 0006 B5F8E047 		ldrh	r4, [r5, #2016]
 2834              	.LVL207:
 472:src/xeq.c     **** 		State.pc = pc = 1;
 2835              		.loc 1 472 2 is_stmt 1 view .LVU762
 472:src/xeq.c     **** 		State.pc = pc = 1;
 2836              		.loc 1 472 5 is_stmt 0 view .LVU763
 2837 000a 34B9     		cbnz	r4, .L231
 472:src/xeq.c     **** 		State.pc = pc = 1;
 2838              		.loc 1 472 14 discriminator 1 view .LVU764
 2839 000c 204B     		ldr	r3, .L251+4
 2840 000e 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 2841 0010 5B06     		lsls	r3, r3, #25
 473:src/xeq.c     **** 	if (! force && pc >= ProgBegin && pc <= ProgEnd)
 2842              		.loc 1 473 3 is_stmt 1 discriminator 1 view .LVU765
 2843              	.LVL208:
 473:src/xeq.c     **** 	if (! force && pc >= ProgBegin && pc <= ProgEnd)
 2844              		.loc 1 473 12 is_stmt 0 discriminator 1 view .LVU766
 2845 0012 44BF     		itt	mi
 2846 0014 0124     		movmi	r4, #1
 2847 0016 A5F8E047 		strhmi	r4, [r5, #2016]	@ movhi
 2848              	.LVL209:
 2849              	.L231:
 474:src/xeq.c     **** 		return;
 2850              		.loc 1 474 2 is_stmt 1 view .LVU767
 474:src/xeq.c     **** 		return;
 2851              		.loc 1 474 5 is_stmt 0 view .LVU768
 2852 001a 18B9     		cbnz	r0, .L232
 474:src/xeq.c     **** 		return;
 2853              		.loc 1 474 23 discriminator 1 view .LVU769
 2854 001c B5F8EC37 		ldrh	r3, [r5, #2028]
 474:src/xeq.c     **** 		return;
 2855              		.loc 1 474 14 discriminator 1 view .LVU770
 2856 0020 A342     		cmp	r3, r4
 2857 0022 2DD9     		bls	.L248
 2858              	.L232:
 476:src/xeq.c     **** 		ProgEnd = pc;
 2859              		.loc 1 476 2 is_stmt 1 view .LVU771
 476:src/xeq.c     **** 		ProgEnd = pc;
 2860              		.loc 1 476 17 is_stmt 0 view .LVU772
 2861 0024 1B4E     		ldr	r6, .L251+8
 2862 0026 0023     		movs	r3, #0
 2863 0028 3360     		str	r3, [r6]
 476:src/xeq.c     **** 		ProgEnd = pc;
 2864              		.loc 1 476 22 is_stmt 1 view .LVU773
 2865 002a 05E0     		b	.L236
 2866              	.LVL210:
 2867              	.L249:
 476:src/xeq.c     **** 		ProgEnd = pc;
 2868              		.loc 1 476 39 is_stmt 0 discriminator 2 view .LVU774
 2869 002c FFF7FEFF 		bl	do_inc
 2870              	.LVL211:
 476:src/xeq.c     **** 		ProgEnd = pc;
 2871              		.loc 1 476 2 discriminator 2 view .LVU775
 2872 0030 3368     		ldr	r3, [r6]
 2873 0032 3D68     		ldr	r5, [r7]
 476:src/xeq.c     **** 		ProgEnd = pc;
ARM GAS  /tmp/ccqED0AM.s 			page 153


 2874              		.loc 1 476 39 discriminator 2 view .LVU776
 2875 0034 0446     		mov	r4, r0
 2876              	.LVL212:
 476:src/xeq.c     **** 		ProgEnd = pc;
 2877              		.loc 1 476 22 is_stmt 1 discriminator 2 view .LVU777
 476:src/xeq.c     **** 		ProgEnd = pc;
 2878              		.loc 1 476 2 is_stmt 0 discriminator 2 view .LVU778
 2879 0036 5BB9     		cbnz	r3, .L234
 2880              	.LVL213:
 2881              	.L236:
 477:src/xeq.c     **** 		if (getprog(pc) == (OP_NIL | OP_END)) {
 2882              		.loc 1 477 3 is_stmt 1 view .LVU779
 477:src/xeq.c     **** 		if (getprog(pc) == (OP_NIL | OP_END)) {
 2883              		.loc 1 477 11 is_stmt 0 view .LVU780
 2884 0038 A5F8EE47 		strh	r4, [r5, #2030]	@ movhi
 478:src/xeq.c     **** 			break;
 2885              		.loc 1 478 3 is_stmt 1 view .LVU781
 478:src/xeq.c     **** 			break;
 2886              		.loc 1 478 7 is_stmt 0 view .LVU782
 2887 003c 2046     		mov	r0, r4
 2888 003e FFF7FEFF 		bl	getprog
 2889              	.LVL214:
 476:src/xeq.c     **** 		ProgEnd = pc;
 2890              		.loc 1 476 34 is_stmt 1 view .LVU783
 478:src/xeq.c     **** 			break;
 2891              		.loc 1 478 7 is_stmt 0 view .LVU784
 2892 0042 0346     		mov	r3, r0
 478:src/xeq.c     **** 			break;
 2893              		.loc 1 478 6 view .LVU785
 2894 0044 B3F59D7F 		cmp	r3, #314
 476:src/xeq.c     **** 		ProgEnd = pc;
 2895              		.loc 1 476 39 view .LVU786
 2896 0048 4FF00001 		mov	r1, #0
 2897 004c 2046     		mov	r0, r4
 478:src/xeq.c     **** 			break;
 2898              		.loc 1 478 6 view .LVU787
 2899 004e EDD1     		bne	.L249
 2900              	.LVL215:
 2901              	.L234:
 482:src/xeq.c     **** 		const unsigned int opc = pc;
 2902              		.loc 1 482 2 is_stmt 1 view .LVU788
 482:src/xeq.c     **** 		const unsigned int opc = pc;
 2903              		.loc 1 482 10 is_stmt 0 view .LVU789
 2904 0050 B5F8E047 		ldrh	r4, [r5, #2016]
 2905              	.LVL216:
 482:src/xeq.c     **** 		const unsigned int opc = pc;
 2906              		.loc 1 482 10 view .LVU790
 2907 0054 04E0     		b	.L238
 2908              	.LVL217:
 2909              	.L250:
 2910              	.LBB1513:
 485:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2911              		.loc 1 485 20 discriminator 1 view .LVU791
 2912 0056 FFF7FEFF 		bl	getprog
 2913              	.LVL218:
 485:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2914              		.loc 1 485 17 discriminator 1 view .LVU792
ARM GAS  /tmp/ccqED0AM.s 			page 154


 2915 005a B0F59D7F 		cmp	r0, #314
 2916 005e 08D0     		beq	.L237
 2917              	.LVL219:
 2918              	.L238:
 483:src/xeq.c     **** 		pc = do_dec(opc, 0);
 2919              		.loc 1 483 3 is_stmt 1 view .LVU793
 484:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 2920              		.loc 1 484 3 view .LVU794
 484:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 2921              		.loc 1 484 8 is_stmt 0 view .LVU795
 2922 0060 2046     		mov	r0, r4
 2923 0062 0021     		movs	r1, #0
 2924 0064 FFF7FEFF 		bl	do_dec
 2925              	.LVL220:
 485:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2926              		.loc 1 485 6 view .LVU796
 2927 0068 3368     		ldr	r3, [r6]
 2928 006a 2546     		mov	r5, r4
 484:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 2929              		.loc 1 484 8 view .LVU797
 2930 006c 0446     		mov	r4, r0
 2931              	.LVL221:
 485:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2932              		.loc 1 485 3 is_stmt 1 view .LVU798
 485:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2933              		.loc 1 485 6 is_stmt 0 view .LVU799
 2934 006e 002B     		cmp	r3, #0
 2935 0070 F1D0     		beq	.L250
 2936              	.LVL222:
 2937              	.L237:
 486:src/xeq.c     **** 			break;
 2938              		.loc 1 486 4 is_stmt 1 view .LVU800
 486:src/xeq.c     **** 			break;
 2939              		.loc 1 486 14 is_stmt 0 view .LVU801
 2940 0072 3B68     		ldr	r3, [r7]
 2941 0074 012D     		cmp	r5, #1
 2942 0076 38BF     		it	cc
 2943 0078 0125     		movcc	r5, #1
 2944              	.LVL223:
 486:src/xeq.c     **** 			break;
 2945              		.loc 1 486 14 view .LVU802
 2946 007a A3F8EC57 		strh	r5, [r3, #2028]	@ movhi
 487:src/xeq.c     **** 		}
 2947              		.loc 1 487 4 is_stmt 1 view .LVU803
 2948              	.LBE1513:
 490:src/xeq.c     **** 
 2949              		.loc 1 490 1 is_stmt 0 view .LVU804
 2950 007e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2951              	.LVL224:
 2952              	.L248:
 474:src/xeq.c     **** 		return;
 2953              		.loc 1 474 42 discriminator 2 view .LVU805
 2954 0080 B5F8EE37 		ldrh	r3, [r5, #2030]
 474:src/xeq.c     **** 		return;
 2955              		.loc 1 474 33 discriminator 2 view .LVU806
 2956 0084 A342     		cmp	r3, r4
 2957 0086 CDD3     		bcc	.L232
ARM GAS  /tmp/ccqED0AM.s 			page 155


 490:src/xeq.c     **** 
 2958              		.loc 1 490 1 view .LVU807
 2959 0088 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2960              	.LVL225:
 2961              	.L252:
 490:src/xeq.c     **** 
 2962              		.loc 1 490 1 view .LVU808
 2963 008a 00BF     		.align	2
 2964              	.L251:
 2965 008c 00000000 		.word	main_ram
 2966 0090 00000000 		.word	StateWhileOn
 2967 0094 00000000 		.word	PcWrapped
 2968              		.cfi_endproc
 2969              	.LFE24:
 2971              		.section	.text.set_pc,"ax",%progbits
 2972              		.align	1
 2973              		.p2align 2,,3
 2974              		.global	set_pc
 2975              		.syntax unified
 2976              		.thumb
 2977              		.thumb_func
 2978              		.fpu fpv4-sp-d16
 2980              	set_pc:
 2981              	.LVL226:
 2982              	.LFB18:
 367:src/xeq.c     **** 	if (isRAM(pc)) {
 2983              		.loc 1 367 30 is_stmt 1 view -0
 2984              		.cfi_startproc
 2985              		@ args = 0, pretend = 0, frame = 0
 2986              		@ frame_needed = 0, uses_anonymous_args = 0
 368:src/xeq.c     **** 		if (pc > ProgSize)
 2987              		.loc 1 368 2 view .LVU810
 368:src/xeq.c     **** 		if (pc > ProgSize)
 2988              		.loc 1 368 5 is_stmt 0 view .LVU811
 2989 0000 10F4704F 		tst	r0, #61440
 367:src/xeq.c     **** 	if (isRAM(pc)) {
 2990              		.loc 1 367 30 view .LVU812
 2991 0004 38B5     		push	{r3, r4, r5, lr}
 2992              		.cfi_def_cfa_offset 16
 2993              		.cfi_offset 3, -16
 2994              		.cfi_offset 4, -12
 2995              		.cfi_offset 5, -8
 2996              		.cfi_offset 14, -4
 367:src/xeq.c     **** 	if (isRAM(pc)) {
 2997              		.loc 1 367 30 view .LVU813
 2998 0006 0446     		mov	r4, r0
 368:src/xeq.c     **** 		if (pc > ProgSize)
 2999              		.loc 1 368 5 view .LVU814
 3000 0008 15D1     		bne	.L254
 369:src/xeq.c     **** 			pc = ProgSize;
 3001              		.loc 1 369 3 is_stmt 1 view .LVU815
 369:src/xeq.c     **** 			pc = ProgSize;
 3002              		.loc 1 369 12 is_stmt 0 view .LVU816
 3003 000a 264B     		ldr	r3, .L262
 3004 000c 1B68     		ldr	r3, [r3]
 3005 000e 5A88     		ldrh	r2, [r3, #2]
 3006 0010 9042     		cmp	r0, r2
ARM GAS  /tmp/ccqED0AM.s 			page 156


 3007 0012 28BF     		it	cs
 3008 0014 1446     		movcs	r4, r2
 3009              	.LVL227:
 371:src/xeq.c     **** 			pc--;
 3010              		.loc 1 371 3 is_stmt 1 view .LVU817
 371:src/xeq.c     **** 			pc--;
 3011              		.loc 1 371 6 is_stmt 0 view .LVU818
 3012 0016 012C     		cmp	r4, #1
 3013 0018 06D9     		bls	.L255
 371:src/xeq.c     **** 			pc--;
 3014              		.loc 1 371 14 discriminator 1 view .LVU819
 3015 001a 33F81420 		ldrh	r2, [r3, r4, lsl #1]
 3016 001e 02F47042 		and	r2, r2, #61440
 3017 0022 B2F5704F 		cmp	r2, #61440
 3018 0026 35D0     		beq	.L261
 3019              	.L255:
 380:src/xeq.c     **** }
 3020              		.loc 1 380 2 is_stmt 1 view .LVU820
 3021              	.LVL228:
 3022              	.LBB1514:
 3023              	.LBI1514:
 282:src/xeq.c     **** 	State.pc = pc;
 3024              		.loc 1 282 13 view .LVU821
 3025              	.LBB1515:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3026              		.loc 1 283 2 view .LVU822
 283:src/xeq.c     **** 	update_program_bounds(0);
 3027              		.loc 1 283 11 is_stmt 0 view .LVU823
 3028 0028 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 3029              		.loc 1 284 2 is_stmt 1 view .LVU824
 3030 002c 0020     		movs	r0, #0
 3031              	.LBE1515:
 3032              	.LBE1514:
 381:src/xeq.c     **** 
 3033              		.loc 1 381 1 is_stmt 0 view .LVU825
 3034 002e BDE83840 		pop	{r3, r4, r5, lr}
 3035              		.cfi_remember_state
 3036              		.cfi_restore 14
 3037              		.cfi_restore 5
 3038              		.cfi_restore 4
 3039              		.cfi_restore 3
 3040              		.cfi_def_cfa_offset 0
 3041              	.LVL229:
 3042              	.LBB1523:
 3043              	.LBB1516:
 284:src/xeq.c     **** }
 3044              		.loc 1 284 2 view .LVU826
 3045 0032 FFF7FEBF 		b	update_program_bounds
 3046              	.LVL230:
 3047              	.L254:
 3048              		.cfi_restore_state
 284:src/xeq.c     **** }
 3049              		.loc 1 284 2 view .LVU827
 3050              	.LBE1516:
 3051              	.LBE1523:
 373:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
ARM GAS  /tmp/ccqED0AM.s 			page 157


 3052              		.loc 1 373 9 is_stmt 1 view .LVU828
 373:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 3053              		.loc 1 373 14 is_stmt 0 view .LVU829
 3054 0036 820B     		lsrs	r2, r0, #14
 373:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 3055              		.loc 1 373 12 view .LVU830
 3056 0038 032A     		cmp	r2, #3
 3057 003a 22D0     		beq	.L260
 3058              	.LBB1524:
 374:src/xeq.c     **** 		if (pc > n - 1)
 3059              		.loc 1 374 3 is_stmt 1 view .LVU831
 3060              	.LVL231:
 3061              	.LBB1525:
 3062              	.LBI1525:
 319:src/xeq.c     **** 	if (region == REGION_XROM)
 3063              		.loc 1 319 5 view .LVU832
 3064              	.LBB1526:
 320:src/xeq.c     **** 		return xrom_size;
 3065              		.loc 1 320 2 view .LVU833
 323:src/xeq.c     **** }
 3066              		.loc 1 323 3 view .LVU834
 323:src/xeq.c     **** }
 3067              		.loc 1 323 24 is_stmt 0 view .LVU835
 3068 003c 1A49     		ldr	r1, .L262+4
 3069              	.LBE1526:
 3070              	.LBE1525:
 374:src/xeq.c     **** 		if (pc > n - 1)
 3071              		.loc 1 374 26 view .LVU836
 3072 003e 1B4B     		ldr	r3, .L262+8
 3073              	.LBB1528:
 3074              	.LBB1527:
 323:src/xeq.c     **** }
 3075              		.loc 1 323 32 view .LVU837
 3076 0040 51F82220 		ldr	r2, [r1, r2, lsl #2]
 3077              	.LBE1527:
 3078              	.LBE1528:
 374:src/xeq.c     **** 		if (pc > n - 1)
 3079              		.loc 1 374 39 view .LVU838
 3080 0044 32F8022C 		ldrh	r2, [r2, #-2]
 374:src/xeq.c     **** 		if (pc > n - 1)
 3081              		.loc 1 374 26 view .LVU839
 3082 0048 00EA0301 		and	r1, r0, r3
 374:src/xeq.c     **** 		if (pc > n - 1)
 3083              		.loc 1 374 39 view .LVU840
 3084 004c 0A44     		add	r2, r2, r1
 3085              	.LVL232:
 375:src/xeq.c     **** 			pc = n - 1;
 3086              		.loc 1 375 3 is_stmt 1 view .LVU841
 3087 004e 9042     		cmp	r0, r2
 3088 0050 28BF     		it	cs
 3089 0052 1446     		movcs	r4, r2
 3090              	.LVL233:
 377:src/xeq.c     **** 			--pc;
 3091              		.loc 1 377 3 view .LVU842
 377:src/xeq.c     **** 			--pc;
 3092              		.loc 1 377 12 is_stmt 0 view .LVU843
 3093 0054 2340     		ands	r3, r3, r4
ARM GAS  /tmp/ccqED0AM.s 			page 158


 3094 0056 0133     		adds	r3, r3, #1
 377:src/xeq.c     **** 			--pc;
 3095              		.loc 1 377 6 view .LVU844
 3096 0058 A342     		cmp	r3, r4
 3097 005a 12D2     		bcs	.L260
 377:src/xeq.c     **** 			--pc;
 3098              		.loc 1 377 28 discriminator 1 view .LVU845
 3099 005c 651E     		subs	r5, r4, #1
 3100 005e 2846     		mov	r0, r5
 3101 0060 FFF7FEFF 		bl	getprog
 3102              	.LVL234:
 377:src/xeq.c     **** 			--pc;
 3103              		.loc 1 377 28 discriminator 1 view .LVU846
 3104 0064 0F4B     		ldr	r3, .L262
 3105 0066 00F47040 		and	r0, r0, #61440
 3106 006a 1B68     		ldr	r3, [r3]
 377:src/xeq.c     **** 			--pc;
 3107              		.loc 1 377 25 discriminator 1 view .LVU847
 3108 006c B0F5704F 		cmp	r0, #61440
 378:src/xeq.c     **** 	}
 3109              		.loc 1 378 4 is_stmt 1 discriminator 1 view .LVU848
 3110              	.LVL235:
 378:src/xeq.c     **** 	}
 3111              		.loc 1 378 4 is_stmt 0 discriminator 1 view .LVU849
 3112 0070 08BF     		it	eq
 3113 0072 2C46     		moveq	r4, r5
 3114              	.LVL236:
 378:src/xeq.c     **** 	}
 3115              		.loc 1 378 4 discriminator 1 view .LVU850
 3116              	.LBE1524:
 380:src/xeq.c     **** }
 3117              		.loc 1 380 2 is_stmt 1 discriminator 1 view .LVU851
 3118              	.LBB1529:
 282:src/xeq.c     **** 	State.pc = pc;
 3119              		.loc 1 282 13 discriminator 1 view .LVU852
 3120              	.LBB1517:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3121              		.loc 1 283 2 discriminator 1 view .LVU853
 283:src/xeq.c     **** 	update_program_bounds(0);
 3122              		.loc 1 283 11 is_stmt 0 discriminator 1 view .LVU854
 3123 0074 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 3124              		.loc 1 284 2 is_stmt 1 discriminator 1 view .LVU855
 3125 0078 0020     		movs	r0, #0
 3126              	.LBE1517:
 3127              	.LBE1529:
 381:src/xeq.c     **** 
 3128              		.loc 1 381 1 is_stmt 0 discriminator 1 view .LVU856
 3129 007a BDE83840 		pop	{r3, r4, r5, lr}
 3130              		.cfi_remember_state
 3131              		.cfi_restore 14
 3132              		.cfi_restore 5
 3133              		.cfi_restore 4
 3134              		.cfi_restore 3
 3135              		.cfi_def_cfa_offset 0
 3136              	.LVL237:
 3137              	.LBB1530:
ARM GAS  /tmp/ccqED0AM.s 			page 159


 3138              	.LBB1518:
 284:src/xeq.c     **** }
 3139              		.loc 1 284 2 discriminator 1 view .LVU857
 3140 007e FFF7FEBF 		b	update_program_bounds
 3141              	.LVL238:
 3142              	.L260:
 3143              		.cfi_restore_state
 284:src/xeq.c     **** }
 3144              		.loc 1 284 2 discriminator 1 view .LVU858
 3145 0082 084B     		ldr	r3, .L262
 3146 0084 1B68     		ldr	r3, [r3]
 284:src/xeq.c     **** }
 3147              		.loc 1 284 2 discriminator 1 view .LVU859
 3148              	.LBE1518:
 3149              	.LBE1530:
 380:src/xeq.c     **** }
 3150              		.loc 1 380 2 is_stmt 1 view .LVU860
 3151              	.LVL239:
 3152              	.LBB1531:
 282:src/xeq.c     **** 	State.pc = pc;
 3153              		.loc 1 282 13 view .LVU861
 3154              	.LBB1519:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3155              		.loc 1 283 2 view .LVU862
 284:src/xeq.c     **** }
 3156              		.loc 1 284 2 is_stmt 0 view .LVU863
 3157 0086 0020     		movs	r0, #0
 283:src/xeq.c     **** 	update_program_bounds(0);
 3158              		.loc 1 283 11 view .LVU864
 3159 0088 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 3160              		.loc 1 284 2 is_stmt 1 view .LVU865
 3161              	.LBE1519:
 3162              	.LBE1531:
 381:src/xeq.c     **** 
 3163              		.loc 1 381 1 is_stmt 0 view .LVU866
 3164 008c BDE83840 		pop	{r3, r4, r5, lr}
 3165              		.cfi_remember_state
 3166              		.cfi_restore 14
 3167              		.cfi_restore 5
 3168              		.cfi_restore 4
 3169              		.cfi_restore 3
 3170              		.cfi_def_cfa_offset 0
 3171              	.LVL240:
 3172              	.LBB1532:
 3173              	.LBB1520:
 284:src/xeq.c     **** }
 3174              		.loc 1 284 2 view .LVU867
 3175 0090 FFF7FEBF 		b	update_program_bounds
 3176              	.LVL241:
 3177              	.L261:
 3178              		.cfi_restore_state
 284:src/xeq.c     **** }
 3179              		.loc 1 284 2 view .LVU868
 3180              	.LBE1520:
 3181              	.LBE1532:
 372:src/xeq.c     **** 	} else if (!isXROM(pc)) {
ARM GAS  /tmp/ccqED0AM.s 			page 160


 3182              		.loc 1 372 4 is_stmt 1 view .LVU869
 372:src/xeq.c     **** 	} else if (!isXROM(pc)) {
 3183              		.loc 1 372 6 is_stmt 0 view .LVU870
 3184 0094 013C     		subs	r4, r4, #1
 3185              	.LVL242:
 380:src/xeq.c     **** }
 3186              		.loc 1 380 2 is_stmt 1 view .LVU871
 3187              	.LBB1533:
 282:src/xeq.c     **** 	State.pc = pc;
 3188              		.loc 1 282 13 view .LVU872
 3189              	.LBB1521:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3190              		.loc 1 283 2 view .LVU873
 283:src/xeq.c     **** 	update_program_bounds(0);
 3191              		.loc 1 283 11 is_stmt 0 view .LVU874
 3192 0096 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 3193              		.loc 1 284 2 is_stmt 1 view .LVU875
 3194 009a 0020     		movs	r0, #0
 3195              	.LBE1521:
 3196              	.LBE1533:
 381:src/xeq.c     **** 
 3197              		.loc 1 381 1 is_stmt 0 view .LVU876
 3198 009c BDE83840 		pop	{r3, r4, r5, lr}
 3199              		.cfi_restore 14
 3200              		.cfi_restore 5
 3201              		.cfi_restore 4
 3202              		.cfi_restore 3
 3203              		.cfi_def_cfa_offset 0
 3204              	.LVL243:
 3205              	.LBB1534:
 3206              	.LBB1522:
 284:src/xeq.c     **** }
 3207              		.loc 1 284 2 view .LVU877
 3208 00a0 FFF7FEBF 		b	update_program_bounds
 3209              	.LVL244:
 3210              	.L263:
 284:src/xeq.c     **** }
 3211              		.loc 1 284 2 view .LVU878
 3212              		.align	2
 3213              	.L262:
 3214 00a4 00000000 		.word	main_ram
 3215 00a8 00000000 		.word	.LANCHOR0
 3216 00ac 00C0FFFF 		.word	-16384
 3217              	.LBE1522:
 3218              	.LBE1534:
 3219              		.cfi_endproc
 3220              	.LFE18:
 3222              		.section	.text.incpc,"ax",%progbits
 3223              		.align	1
 3224              		.p2align 2,,3
 3225              		.global	incpc
 3226              		.syntax unified
 3227              		.thumb
 3228              		.thumb_func
 3229              		.fpu fpv4-sp-d16
 3231              	incpc:
ARM GAS  /tmp/ccqED0AM.s 			page 161


 3232              	.LFB22:
 458:src/xeq.c     **** 	raw_set_pc(do_inc(state_pc(), 1));
 3233              		.loc 1 458 17 is_stmt 1 view -0
 3234              		.cfi_startproc
 3235              		@ args = 0, pretend = 0, frame = 0
 3236              		@ frame_needed = 0, uses_anonymous_args = 0
 459:src/xeq.c     **** 	return PcWrapped;
 3237              		.loc 1 459 2 view .LVU880
 458:src/xeq.c     **** 	raw_set_pc(do_inc(state_pc(), 1));
 3238              		.loc 1 458 17 is_stmt 0 view .LVU881
 3239 0000 10B5     		push	{r4, lr}
 3240              		.cfi_def_cfa_offset 8
 3241              		.cfi_offset 4, -8
 3242              		.cfi_offset 14, -4
 459:src/xeq.c     **** 	return PcWrapped;
 3243              		.loc 1 459 20 view .LVU882
 3244 0002 084C     		ldr	r4, .L266
 3245 0004 2368     		ldr	r3, [r4]
 459:src/xeq.c     **** 	return PcWrapped;
 3246              		.loc 1 459 2 view .LVU883
 3247 0006 0121     		movs	r1, #1
 3248 0008 B3F8E007 		ldrh	r0, [r3, #2016]
 3249 000c FFF7FEFF 		bl	do_inc
 3250              	.LVL245:
 3251              	.LBB1535:
 3252              	.LBB1536:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3253              		.loc 1 283 11 view .LVU884
 3254 0010 2368     		ldr	r3, [r4]
 3255              	.LBE1536:
 3256              	.LBE1535:
 459:src/xeq.c     **** 	return PcWrapped;
 3257              		.loc 1 459 2 view .LVU885
 3258 0012 0246     		mov	r2, r0
 3259              	.LVL246:
 3260              	.LBB1538:
 3261              	.LBI1535:
 282:src/xeq.c     **** 	State.pc = pc;
 3262              		.loc 1 282 13 is_stmt 1 view .LVU886
 3263              	.LBB1537:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3264              		.loc 1 283 2 view .LVU887
 283:src/xeq.c     **** 	update_program_bounds(0);
 3265              		.loc 1 283 11 is_stmt 0 view .LVU888
 3266 0014 A3F8E027 		strh	r2, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 3267              		.loc 1 284 2 is_stmt 1 view .LVU889
 3268 0018 0020     		movs	r0, #0
 3269              	.LVL247:
 284:src/xeq.c     **** }
 3270              		.loc 1 284 2 is_stmt 0 view .LVU890
 3271 001a FFF7FEFF 		bl	update_program_bounds
 3272              	.LVL248:
 284:src/xeq.c     **** }
 3273              		.loc 1 284 2 view .LVU891
 3274              	.LBE1537:
 3275              	.LBE1538:
ARM GAS  /tmp/ccqED0AM.s 			page 162


 460:src/xeq.c     **** }
 3276              		.loc 1 460 2 is_stmt 1 view .LVU892
 460:src/xeq.c     **** }
 3277              		.loc 1 460 9 is_stmt 0 view .LVU893
 3278 001e 024B     		ldr	r3, .L266+4
 461:src/xeq.c     **** 
 3279              		.loc 1 461 1 view .LVU894
 3280 0020 1868     		ldr	r0, [r3]
 3281 0022 10BD     		pop	{r4, pc}
 3282              	.L267:
 3283              		.align	2
 3284              	.L266:
 3285 0024 00000000 		.word	main_ram
 3286 0028 00000000 		.word	PcWrapped
 3287              		.cfi_endproc
 3288              	.LFE22:
 3290              		.section	.text.decpc,"ax",%progbits
 3291              		.align	1
 3292              		.p2align 2,,3
 3293              		.global	decpc
 3294              		.syntax unified
 3295              		.thumb
 3296              		.thumb_func
 3297              		.fpu fpv4-sp-d16
 3299              	decpc:
 3300              	.LFB23:
 463:src/xeq.c     **** 	raw_set_pc(do_dec(state_pc(), 1));
 3301              		.loc 1 463 18 is_stmt 1 view -0
 3302              		.cfi_startproc
 3303              		@ args = 0, pretend = 0, frame = 0
 3304              		@ frame_needed = 0, uses_anonymous_args = 0
 464:src/xeq.c     **** }
 3305              		.loc 1 464 2 view .LVU896
 463:src/xeq.c     **** 	raw_set_pc(do_dec(state_pc(), 1));
 3306              		.loc 1 463 18 is_stmt 0 view .LVU897
 3307 0000 10B5     		push	{r4, lr}
 3308              		.cfi_def_cfa_offset 8
 3309              		.cfi_offset 4, -8
 3310              		.cfi_offset 14, -4
 464:src/xeq.c     **** }
 3311              		.loc 1 464 20 view .LVU898
 3312 0002 084C     		ldr	r4, .L270
 3313 0004 2368     		ldr	r3, [r4]
 464:src/xeq.c     **** }
 3314              		.loc 1 464 2 view .LVU899
 3315 0006 0121     		movs	r1, #1
 3316 0008 B3F8E007 		ldrh	r0, [r3, #2016]
 3317 000c FFF7FEFF 		bl	do_dec
 3318              	.LVL249:
 3319              	.LBB1539:
 3320              	.LBB1540:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3321              		.loc 1 283 11 view .LVU900
 3322 0010 2368     		ldr	r3, [r4]
 3323              	.LBE1540:
 3324              	.LBE1539:
 464:src/xeq.c     **** }
ARM GAS  /tmp/ccqED0AM.s 			page 163


 3325              		.loc 1 464 2 view .LVU901
 3326 0012 0246     		mov	r2, r0
 3327              	.LVL250:
 3328              	.LBB1543:
 3329              	.LBI1539:
 282:src/xeq.c     **** 	State.pc = pc;
 3330              		.loc 1 282 13 is_stmt 1 view .LVU902
 3331              	.LBB1541:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3332              		.loc 1 283 2 view .LVU903
 3333              	.LBE1541:
 3334              	.LBE1543:
 465:src/xeq.c     **** 
 3335              		.loc 1 465 1 is_stmt 0 view .LVU904
 3336 0014 BDE81040 		pop	{r4, lr}
 3337              		.cfi_restore 14
 3338              		.cfi_restore 4
 3339              		.cfi_def_cfa_offset 0
 3340              	.LBB1544:
 3341              	.LBB1542:
 284:src/xeq.c     **** }
 3342              		.loc 1 284 2 view .LVU905
 3343 0018 0020     		movs	r0, #0
 3344              	.LVL251:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3345              		.loc 1 283 11 view .LVU906
 3346 001a A3F8E027 		strh	r2, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 3347              		.loc 1 284 2 is_stmt 1 view .LVU907
 3348 001e FFF7FEBF 		b	update_program_bounds
 3349              	.LVL252:
 3350              	.L271:
 284:src/xeq.c     **** }
 3351              		.loc 1 284 2 is_stmt 0 view .LVU908
 3352 0022 00BF     		.align	2
 3353              	.L270:
 3354 0024 00000000 		.word	main_ram
 3355              	.LBE1542:
 3356              	.LBE1544:
 3357              		.cfi_endproc
 3358              	.LFE23:
 3360              		.section	.text.do_rtn,"ax",%progbits
 3361              		.align	1
 3362              		.p2align 2,,3
 3363              		.syntax unified
 3364              		.thumb
 3365              		.thumb_func
 3366              		.fpu fpv4-sp-d16
 3368              	do_rtn:
 3369              	.LVL253:
 3370              	.LFB154:
2247:src/xeq.c     **** 	unsigned short pc;
 3371              		.loc 1 2247 31 is_stmt 1 view -0
 3372              		.cfi_startproc
 3373              		@ args = 0, pretend = 0, frame = 0
 3374              		@ frame_needed = 0, uses_anonymous_args = 0
2248:src/xeq.c     **** 
ARM GAS  /tmp/ccqED0AM.s 			page 164


 3375              		.loc 1 2248 2 view .LVU910
2250:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
 3376              		.loc 1 2250 2 view .LVU911
2247:src/xeq.c     **** 	unsigned short pc;
 3377              		.loc 1 2247 31 is_stmt 0 view .LVU912
 3378 0000 70B5     		push	{r4, r5, r6, lr}
 3379              		.cfi_def_cfa_offset 16
 3380              		.cfi_offset 4, -16
 3381              		.cfi_offset 5, -12
 3382              		.cfi_offset 6, -8
 3383              		.cfi_offset 14, -4
2250:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
 3384              		.loc 1 2250 6 view .LVU913
 3385 0002 244C     		ldr	r4, .L286
 3386 0004 2368     		ldr	r3, [r4]
2250:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
 3387              		.loc 1 2250 5 view .LVU914
 3388 0006 B3F9E227 		ldrsh	r2, [r3, #2018]
 3389 000a 002A     		cmp	r2, #0
 3390 000c 13DB     		blt	.L273
2252:src/xeq.c     **** 		raw_set_pc(ProgBegin);
 3391              		.loc 1 2252 3 is_stmt 1 view .LVU915
 3392              	.LBB1545:
 3393              	.LBI1545:
1606:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 3394              		.loc 1 1606 6 view .LVU916
 3395              	.LBB1546:
1607:src/xeq.c     **** }
 3396              		.loc 1 1607 2 view .LVU917
1607:src/xeq.c     **** }
 3397              		.loc 1 1607 24 is_stmt 0 view .LVU918
 3398 000e B3F8DE27 		ldrh	r2, [r3, #2014]
 3399              	.LBE1546:
 3400              	.LBE1545:
 3401              	.LBB1548:
 3402              	.LBB1549:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3403              		.loc 1 283 11 view .LVU919
 3404 0012 B3F8EC17 		ldrh	r1, [r3, #2028]
 3405 0016 A3F8E017 		strh	r1, [r3, #2016]	@ movhi
 3406              	.LBE1549:
 3407              	.LBE1548:
 3408              	.LBB1551:
 3409              	.LBB1547:
1607:src/xeq.c     **** }
 3410              		.loc 1 1607 24 view .LVU920
 3411 001a 6FF34F12 		bfc	r2, #5, #11
1607:src/xeq.c     **** }
 3412              		.loc 1 1607 12 view .LVU921
 3413 001e 0020     		movs	r0, #0
 3414              	.LVL254:
1607:src/xeq.c     **** }
 3415              		.loc 1 1607 24 view .LVU922
 3416 0020 A3F8DE27 		strh	r2, [r3, #2014]	@ movhi
1607:src/xeq.c     **** }
 3417              		.loc 1 1607 12 view .LVU923
 3418 0024 A3F8E207 		strh	r0, [r3, #2018]	@ movhi
ARM GAS  /tmp/ccqED0AM.s 			page 165


 3419              	.LBE1547:
 3420              	.LBE1551:
2253:src/xeq.c     **** 	}
 3421              		.loc 1 2253 3 is_stmt 1 view .LVU924
 3422              	.LVL255:
 3423              	.LBB1552:
 3424              	.LBI1548:
 282:src/xeq.c     **** 	State.pc = pc;
 3425              		.loc 1 282 13 view .LVU925
 3426              	.LBB1550:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3427              		.loc 1 283 2 view .LVU926
 284:src/xeq.c     **** }
 3428              		.loc 1 284 2 view .LVU927
 3429 0028 FFF7FEFF 		bl	update_program_bounds
 3430              	.LVL256:
 3431              	.L274:
 284:src/xeq.c     **** }
 3432              		.loc 1 284 2 is_stmt 0 view .LVU928
 3433              	.LBE1550:
 3434              	.LBE1552:
2266:src/xeq.c     **** 		// RTN with empty stack stops
 3435              		.loc 1 2266 2 is_stmt 1 view .LVU929
2266:src/xeq.c     **** 		// RTN with empty stack stops
 3436              		.loc 1 2266 6 is_stmt 0 view .LVU930
 3437 002c 2368     		ldr	r3, [r4]
2266:src/xeq.c     **** 		// RTN with empty stack stops
 3438              		.loc 1 2266 5 view .LVU931
 3439 002e B3F9E217 		ldrsh	r1, [r3, #2018]
 3440 0032 09B3     		cbz	r1, .L285
2270:src/xeq.c     **** 
 3441              		.loc 1 2270 1 view .LVU932
 3442 0034 70BD     		pop	{r4, r5, r6, pc}
 3443              	.LVL257:
 3444              	.L273:
2258:src/xeq.c     **** 		pc = RetStk[RetStkPtr - 1];
 3445              		.loc 1 2258 3 is_stmt 1 view .LVU933
 3446 0036 0546     		mov	r5, r0
 3447 0038 FFF7FEFF 		bl	retstk_up
 3448              	.LVL258:
2259:src/xeq.c     **** 		raw_set_pc(pc);
 3449              		.loc 1 2259 3 view .LVU934
2259:src/xeq.c     **** 		raw_set_pc(pc);
 3450              		.loc 1 2259 15 is_stmt 0 view .LVU935
 3451 003c 2268     		ldr	r2, [r4]
2259:src/xeq.c     **** 		raw_set_pc(pc);
 3452              		.loc 1 2259 6 view .LVU936
 3453 003e 1649     		ldr	r1, .L286+4
2259:src/xeq.c     **** 		raw_set_pc(pc);
 3454              		.loc 1 2259 14 view .LVU937
 3455 0040 B2F9E237 		ldrsh	r3, [r2, #2018]
2259:src/xeq.c     **** 		raw_set_pc(pc);
 3456              		.loc 1 2259 6 view .LVU938
 3457 0044 0968     		ldr	r1, [r1]
2259:src/xeq.c     **** 		raw_set_pc(pc);
 3458              		.loc 1 2259 14 view .LVU939
 3459 0046 03F10043 		add	r3, r3, #-2147483648
ARM GAS  /tmp/ccqED0AM.s 			page 166


 3460 004a 013B     		subs	r3, r3, #1
 3461              	.LBB1553:
 3462              	.LBB1554:
 284:src/xeq.c     **** }
 3463              		.loc 1 284 2 view .LVU940
 3464 004c 0020     		movs	r0, #0
 3465              	.LBE1554:
 3466              	.LBE1553:
2259:src/xeq.c     **** 		raw_set_pc(pc);
 3467              		.loc 1 2259 6 view .LVU941
 3468 004e 31F81360 		ldrh	r6, [r1, r3, lsl #1]
 3469              	.LVL259:
2260:src/xeq.c     **** 		// If RTN+1 inc PC unless a POPUSR command or the program end would be skipped
 3470              		.loc 1 2260 3 is_stmt 1 view .LVU942
 3471              	.LBB1556:
 3472              	.LBI1553:
 282:src/xeq.c     **** 	State.pc = pc;
 3473              		.loc 1 282 13 view .LVU943
 3474              	.LBB1555:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3475              		.loc 1 283 2 view .LVU944
 283:src/xeq.c     **** 	update_program_bounds(0);
 3476              		.loc 1 283 11 is_stmt 0 view .LVU945
 3477 0052 A2F8E067 		strh	r6, [r2, #2016]	@ movhi
 284:src/xeq.c     **** }
 3478              		.loc 1 284 2 is_stmt 1 view .LVU946
 3479 0056 FFF7FEFF 		bl	update_program_bounds
 3480              	.LVL260:
 284:src/xeq.c     **** }
 3481              		.loc 1 284 2 is_stmt 0 view .LVU947
 3482              	.LBE1555:
 3483              	.LBE1556:
2262:src/xeq.c     **** 			if (incpc())
 3484              		.loc 1 2262 3 is_stmt 1 view .LVU948
2262:src/xeq.c     **** 			if (incpc())
 3485              		.loc 1 2262 6 is_stmt 0 view .LVU949
 3486 005a 002D     		cmp	r5, #0
 3487 005c E6D0     		beq	.L274
2262:src/xeq.c     **** 			if (incpc())
 3488              		.loc 1 2262 16 discriminator 1 view .LVU950
 3489 005e 3046     		mov	r0, r6
 3490 0060 FFF7FEFF 		bl	getprog
 3491              	.LVL261:
2262:src/xeq.c     **** 			if (incpc())
 3492              		.loc 1 2262 13 discriminator 1 view .LVU951
 3493 0064 B0F5C17F 		cmp	r0, #386
 3494 0068 E0D0     		beq	.L274
2263:src/xeq.c     **** 				decpc();
 3495              		.loc 1 2263 4 is_stmt 1 view .LVU952
2263:src/xeq.c     **** 				decpc();
 3496              		.loc 1 2263 8 is_stmt 0 view .LVU953
 3497 006a FFF7FEFF 		bl	incpc
 3498              	.LVL262:
2263:src/xeq.c     **** 				decpc();
 3499              		.loc 1 2263 7 view .LVU954
 3500 006e 0028     		cmp	r0, #0
 3501 0070 DCD0     		beq	.L274
ARM GAS  /tmp/ccqED0AM.s 			page 167


2264:src/xeq.c     **** 	}
 3502              		.loc 1 2264 5 is_stmt 1 view .LVU955
 3503 0072 FFF7FEFF 		bl	decpc
 3504              	.LVL263:
 3505 0076 D9E7     		b	.L274
 3506              	.LVL264:
 3507              	.L285:
2268:src/xeq.c     **** 	}
 3508              		.loc 1 2268 3 view .LVU956
 3509              	.LBB1557:
 3510              	.LBI1557:
5182:src/xeq.c     **** 
5183:src/xeq.c     **** 
5184:src/xeq.c     **** /* Handle a command that takes an argument.  The argument is encoded
5185:src/xeq.c     ****  * in the low order bits of the opcode.  We also have to take
5186:src/xeq.c     ****  * account of the indirection flag and various limits.
5187:src/xeq.c     ****  */
5188:src/xeq.c     **** static void rargs(const opcode op) {
5189:src/xeq.c     **** 	unsigned int arg = op & RARG_MASK;
5190:src/xeq.c     **** 	const unsigned int cmd = RARG_CMD(op);
5191:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
5192:src/xeq.c     **** 	unsigned int lim = argcmds[cmd].lim;
5193:src/xeq.c     **** 
5194:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
5195:src/xeq.c     **** 
5196:src/xeq.c     **** 	process_cmdline();
5197:src/xeq.c     **** 
5198:src/xeq.c     **** 	if (cmd >= NUM_RARG) {
5199:src/xeq.c     **** 		illegal(op);
5200:src/xeq.c     **** 		return;
5201:src/xeq.c     **** 	}
5202:src/xeq.c     **** 	if (isNULL(argcmds[cmd].f)) {
5203:src/xeq.c     **** 		set_lift();
5204:src/xeq.c     **** 		return;
5205:src/xeq.c     **** 	}
5206:src/xeq.c     **** 
5207:src/xeq.c     **** 	if (ind) {
5208:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
5209:src/xeq.c     **** 			// Get the argument by reading a register
5210:src/xeq.c     **** 			int sgn;
5211:src/xeq.c     **** 			unsigned long long int regval;
5212:src/xeq.c     **** 
5213:src/xeq.c     **** 			if (arg > get_reg_limit(RARG_RCL, arg)) {
5214:src/xeq.c     **** 				// Invalid register specified for indirect access
5215:src/xeq.c     **** 				report_err(ERR_RANGE);
5216:src/xeq.c     **** 				return;
5217:src/xeq.c     **** 			}
5218:src/xeq.c     **** 			regval = get_reg_n_int_sgn(arg, &sgn);
5219:src/xeq.c     **** 			if ((regval >> 32) != 0)
5220:src/xeq.c     **** 				goto range;
5221:src/xeq.c     **** 			arg = (unsigned int) regval;
5222:src/xeq.c     **** 			if (argcmds[cmd].local && sgn) {
5223:src/xeq.c     **** 				// negative arguments address local registers or flags
5224:src/xeq.c     **** 				arg = LOCAL_REG_BASE + arg;
5225:src/xeq.c     **** 			}
5226:src/xeq.c     **** 		} 
5227:src/xeq.c     **** 		else {
ARM GAS  /tmp/ccqED0AM.s 			page 168


5228:src/xeq.c     **** 			// put the top bit back in
5229:src/xeq.c     **** 			arg |= RARG_IND;
5230:src/xeq.c     **** 		}
5231:src/xeq.c     **** 	}
5232:src/xeq.c     **** 	if (argcmds[cmd].reg) {
5233:src/xeq.c     **** 		// Range checking for registers against variable boundary
5234:src/xeq.c     **** 		lim = get_reg_limit(cmd, arg);
5235:src/xeq.c     **** 	}
5236:src/xeq.c     **** 	else if (argcmds[cmd].flag) {
5237:src/xeq.c     **** 		if (LocalRegs == 0)
5238:src/xeq.c     **** 			lim = NUMFLG - 1;
5239:src/xeq.c     **** 		else 
5240:src/xeq.c     **** 			lim = LOCAL_FLAG_BASE + MAX_LOCAL_DIRECT - 1;
5241:src/xeq.c     **** 	}
5242:src/xeq.c     **** 	if (arg > lim) {
5243:src/xeq.c     **** 		// Argument is too large
5244:src/xeq.c     **** range:		report_err(ERR_RANGE);
5245:src/xeq.c     **** 	}
5246:src/xeq.c     **** 	else if (argcmds[cmd].cmplx && arg >= TOPREALREG-1 && arg < NUMREG && (arg & 1)) {
5247:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
5248:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
5249:src/xeq.c     **** 	}
5250:src/xeq.c     **** 	else {
5251:src/xeq.c     **** 		// Dispatch the command
5252:src/xeq.c     **** 		FP_RARG fp = (FP_RARG) EXPAND_ADDRESS(argcmds[cmd].f);
5253:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
5254:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
5255:src/xeq.c     **** 			if (argcmds[cmd].label) {
5256:src/xeq.c     **** 				XromUserPc = find_label_from(state_pc(), arg, 0);
5257:src/xeq.c     **** 				if (XromUserPc == 0)
5258:src/xeq.c     **** 					return;
5259:src/xeq.c     **** 				if (! Running)
5260:src/xeq.c     **** 					clrretstk();
5261:src/xeq.c     **** 			}
5262:src/xeq.c     **** 			else
5263:src/xeq.c     **** 				XromArg = (unsigned char) arg;
5264:src/xeq.c     **** #else
5265:src/xeq.c     **** 			XromUserPc = find_label_from(state_pc(), arg, FIND_OP_ERROR | FIND_OP_ENDS);
5266:src/xeq.c     **** 			if (XromUserPc == 0)
5267:src/xeq.c     **** 				return;
5268:src/xeq.c     **** 			if (! Running)
5269:src/xeq.c     **** 				clrretstk();
5270:src/xeq.c     **** #endif
5271:src/xeq.c     **** 			dispatch_xrom(fp);
5272:src/xeq.c     **** 			return;
5273:src/xeq.c     **** 		}
5274:src/xeq.c     **** 		else {
5275:src/xeq.c     **** 			fp(arg, (enum rarg)cmd);
5276:src/xeq.c     **** 		}
5277:src/xeq.c     **** 		if (cmd != RARG_XROM_OUT) {
5278:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
5279:src/xeq.c     **** 			set_lift();
5280:src/xeq.c     **** 		}
5281:src/xeq.c     **** 	}
5282:src/xeq.c     **** }
5283:src/xeq.c     **** 
5284:src/xeq.c     **** static void multi(const opcode op) {
ARM GAS  /tmp/ccqED0AM.s 			page 169


5285:src/xeq.c     **** 	const int cmd = opDBL(op);
5286:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
5287:src/xeq.c     **** 
5288:src/xeq.c     **** 	process_cmdline_set_lift();
5289:src/xeq.c     **** 
5290:src/xeq.c     **** 	if (cmd >= NUM_MULTI) {
5291:src/xeq.c     **** 		illegal(op);
5292:src/xeq.c     **** 		return;
5293:src/xeq.c     **** 	}
5294:src/xeq.c     **** 	if (isNULL(multicmds[cmd].f))	// LBL does nothing
5295:src/xeq.c     **** 		return;
5296:src/xeq.c     **** 	else {
5297:src/xeq.c     **** 		FP_MULTI fp = (FP_MULTI) EXPAND_ADDRESS(multicmds[cmd].f);
5298:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
5299:src/xeq.c     **** 			XromUserPc = findmultilbl(op, FIND_OP_ERROR);
5300:src/xeq.c     **** 			if (XromUserPc != 0) {
5301:src/xeq.c     **** 				if (! Running)
5302:src/xeq.c     **** 					clrretstk();
5303:src/xeq.c     **** 				dispatch_xrom(fp);
5304:src/xeq.c     **** 			}
5305:src/xeq.c     **** 			return;
5306:src/xeq.c     **** 		}
5307:src/xeq.c     **** 		else {
5308:src/xeq.c     **** 			fp(op, (enum multiops)cmd);
5309:src/xeq.c     **** 			set_lift();
5310:src/xeq.c     **** 		}
5311:src/xeq.c     **** 	}
5312:src/xeq.c     **** }
5313:src/xeq.c     **** 
5314:src/xeq.c     **** 
5315:src/xeq.c     **** 
5316:src/xeq.c     **** /* Main dispatch routine that decodes the top level of the opcode and
5317:src/xeq.c     ****  * goes to the appropriate lower level dispatch routine.
5318:src/xeq.c     ****  */
5319:src/xeq.c     **** void xeq(opcode op) 
5320:src/xeq.c     **** {
5321:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
5322:src/xeq.c     **** 	const unsigned short flags = UserFlags[regA_idx >> 4];
5323:src/xeq.c     **** 	const struct _ustate old = UState;
5324:src/xeq.c     **** 	const unsigned char lift = get_lift();
5325:src/xeq.c     **** 	const unsigned short old_pc = state_pc();
5326:src/xeq.c     **** 	const int old_cl = *((int *)&CommandLine);
5327:src/xeq.c     **** #ifdef INFRARED
5328:src/xeq.c     **** 	int tracing;
5329:src/xeq.c     **** #endif
5330:src/xeq.c     **** 
5331:src/xeq.c     **** #ifndef IGNORE_INVALID_FRACTIONS
5332:src/xeq.c     **** 	if (op == (OP_NIL | OP_rCLX) || op == (OP_NIL | OP_CLSTK)) {
5333:src/xeq.c     **** 		// Make sure that if the command line isn't empty, it contains
5334:src/xeq.c     **** 		// valid input so no error message will be generated.
5335:src/xeq.c     **** 		CmdLineDot = 0;
5336:src/xeq.c     **** 		Cmdline[0] = '0';
5337:src/xeq.c     **** 		Cmdline[1] = '\0';
5338:src/xeq.c     **** 	}
5339:src/xeq.c     **** #endif
5340:src/xeq.c     **** 
5341:src/xeq.c     **** 	xcopy(save, StackBase, sizeof(save));
ARM GAS  /tmp/ccqED0AM.s 			page 170


5342:src/xeq.c     **** #if defined(CONSOLE)
5343:src/xeq.c     **** 	instruction_count++;
5344:src/xeq.c     **** #endif
5345:src/xeq.c     **** #ifndef REALBUILD
5346:src/xeq.c     **** 	if (State2.trace && ! State2.sst) {
5347:src/xeq.c     **** 		char buf[16];
5348:src/xeq.c     **** 		if (Running)
5349:src/xeq.c     **** 			print_step(op);
5350:src/xeq.c     **** 		else
5351:src/xeq.c     **** 			sprintf(TraceBuffer, "%04X:%s", op, prt(op, buf));
5352:src/xeq.c     **** 		DispMsg = TraceBuffer;
5353:src/xeq.c     **** 	}
5354:src/xeq.c     **** #endif
5355:src/xeq.c     **** #ifdef INFRARED
5356:src/xeq.c     **** #ifdef REALBUILD
5357:src/xeq.c     **** 	tracing = get_user_flag(T_FLAG) && ! is_xrom() && State2.runmode;
5358:src/xeq.c     **** #else
5359:src/xeq.c     **** 	tracing = get_user_flag(T_FLAG) && (! is_xrom() || State2.trace) && State2.runmode;
5360:src/xeq.c     **** #endif
5361:src/xeq.c     **** 	Tracing = tracing;
5362:src/xeq.c     **** 	print_trace( op, 0 );
5363:src/xeq.c     **** #endif
5364:src/xeq.c     **** 	Busy = 0;
5365:src/xeq.c     **** 	State2.wascomplex = 0;
5366:src/xeq.c     **** 	if (isDBL(op))
5367:src/xeq.c     **** 		multi(op);
5368:src/xeq.c     **** 	else if (isRARG(op))
5369:src/xeq.c     **** 		rargs(op);
5370:src/xeq.c     **** 	else {
5371:src/xeq.c     **** 		XeqOpCode = (s_opcode) op;
5372:src/xeq.c     **** 		switch (opKIND(op)) {
5373:src/xeq.c     **** 		case KIND_SPEC:	specials(op);	break;
5374:src/xeq.c     **** 		case KIND_NIL:	niladic(op);	break;
5375:src/xeq.c     **** 		case KIND_MON:	monadic(op);	break;
5376:src/xeq.c     **** 		case KIND_DYA:	dyadic(op);	break;
5377:src/xeq.c     **** 		case KIND_TRI:	triadic(op);	break;
5378:src/xeq.c     **** 		case KIND_CMON:	monadic_cmplex(op);	break;
5379:src/xeq.c     **** 		case KIND_CDYA:	dyadic_cmplex(op);	break;
5380:src/xeq.c     **** 		default:	illegal(op);
5381:src/xeq.c     **** 		}
5382:src/xeq.c     **** 	}
5383:src/xeq.c     **** #if INTERRUPT_XROM_TICKS > 0
5384:src/xeq.c     **** 	if (OnKeyTicks >= INTERRUPT_XROM_TICKS) {
5385:src/xeq.c     **** 		report_err(ERR_INTERRUPTED);
5386:src/xeq.c     **** 		while (get_key() >= 0) { } // Empty keyboard buffer
5387:src/xeq.c     **** 	}
5388:src/xeq.c     **** #endif
5389:src/xeq.c     **** 
5390:src/xeq.c     **** 	if (Error != ERR_NONE) {
5391:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
5392:src/xeq.c     **** 		error_message( Error );
5393:src/xeq.c     **** 		// Repair stack and state
5394:src/xeq.c     **** 		// Clear return stack
5395:src/xeq.c     **** 		xcopy(StackBase, save, sizeof(save));
5396:src/xeq.c     **** 		UserFlags[regA_idx >> 4] = flags;
5397:src/xeq.c     **** 		UState = old;
5398:src/xeq.c     **** 		State2.state_lift = lift;
ARM GAS  /tmp/ccqED0AM.s 			page 171


5399:src/xeq.c     **** 		raw_set_pc(old_pc);
5400:src/xeq.c     **** 		*((int *)&CommandLine) = old_cl;
5401:src/xeq.c     **** 		process_cmdline_set_lift();
5402:src/xeq.c     **** 		// process_cmdline_set_lift() may set an error code if there was something
5403:src/xeq.c     **** 		// wrong with the command line, e.g. it had a partially entered fraction
5404:src/xeq.c     **** 		Error = ERR_NONE;
5405:src/xeq.c     **** 		if (Running || XromRunning) {
5406:src/xeq.c     **** #ifndef REALBUILD
5407:src/xeq.c     **** 			if (State2.trace ) {
5408:src/xeq.c     **** 				// Special handling for debug environment
5409:src/xeq.c     **** 				if (XromFlags.xIN) {
5410:src/xeq.c     **** 					// Restore the global return stack
5411:src/xeq.c     **** 					RetStk = XromUserRetStk;
5412:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
5413:src/xeq.c     **** 					// Restore private stack to normal stack
5414:src/xeq.c     **** 					if (! XromFlags.mode_double && NumRegs < STACK_SIZE + EXTRA_REG) {
5415:src/xeq.c     **** 						// Need space for double precision stack
5416:src/xeq.c     **** 						cmdregs(STACK_SIZE + EXTRA_REG, RARG_REGS);
5417:src/xeq.c     **** 					}
5418:src/xeq.c     **** 					XromFlags.xIN = 0;		// Clear flag before get_reg_n!
5419:src/xeq.c     **** 					if (Error == ERR_NONE) {
5420:src/xeq.c     **** 						UState.mode_double = 1;
5421:src/xeq.c     **** 						xcopy(get_reg_n(regX_idx), XromStack, sizeof(XromStack));
5422:src/xeq.c     **** 					}
5423:src/xeq.c     **** 					else
5424:src/xeq.c     **** 						Error = ERR_NONE;	// Not enough RAM, can't restore
5425:src/xeq.c     **** 				}
5426:src/xeq.c     **** 			}
5427:src/xeq.c     **** 			else {
5428:src/xeq.c     **** #endif
5429:src/xeq.c     **** 				unsigned short int pc = state_pc();
5430:src/xeq.c     **** 				if (XromFlags.xIN) {
5431:src/xeq.c     **** 					// Restore state to before xIN
5432:src/xeq.c     **** 					XromFlags.xIN = 0;
5433:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
5434:src/xeq.c     **** 					UState.intm = XromFlags.mode_int;
5435:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
5436:src/xeq.c     **** 					// Restore the global return stack
5437:src/xeq.c     **** 					RetStk = XromUserRetStk;
5438:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
5439:src/xeq.c     **** 				}
5440:src/xeq.c     **** 				while (isXROM(pc)) {
5441:src/xeq.c     **** 					// Leave XROM
5442:src/xeq.c     **** 					if (RetStkPtr != 0) {
5443:src/xeq.c     **** 						retstk_up();
5444:src/xeq.c     **** 						pc = RetStk[RetStkPtr - 1];
5445:src/xeq.c     **** 					}
5446:src/xeq.c     **** 					if (RetStkPtr == 0)
5447:src/xeq.c     **** 						++pc; // compensate for decpc below
5448:src/xeq.c     **** 				}
5449:src/xeq.c     **** 				raw_set_pc(pc);
5450:src/xeq.c     **** #ifndef REALBUILD
5451:src/xeq.c     **** 			}
5452:src/xeq.c     **** #endif
5453:src/xeq.c     **** 			decpc();		// Back to error instruction
5454:src/xeq.c     **** 			xeq_init_contexts();	// Repair any pointers clobberd by xIN
5455:src/xeq.c     **** 
ARM GAS  /tmp/ccqED0AM.s 			page 172


5456:src/xeq.c     **** 			set_running_off();
5457:src/xeq.c     **** 		}
5458:src/xeq.c     **** 	} 
5459:src/xeq.c     **** 	reset_volatile_state();
5460:src/xeq.c     **** #ifdef INFRARED
5461:src/xeq.c     **** 	Tracing = tracing;
5462:src/xeq.c     **** 	print_trace( op, 1 );
5463:src/xeq.c     **** #endif
5464:src/xeq.c     **** }
5465:src/xeq.c     **** 
5466:src/xeq.c     **** /* Execute a single step and return.
5467:src/xeq.c     ****  */
5468:src/xeq.c     **** static void xeq_single(void) {
5469:src/xeq.c     **** 	const opcode op = getprog(state_pc());
5470:src/xeq.c     **** 
5471:src/xeq.c     **** 	incpc();
5472:src/xeq.c     **** 	xeq(op);
5473:src/xeq.c     **** }
5474:src/xeq.c     **** 
5475:src/xeq.c     **** /* Continue execution trough xrom code
5476:src/xeq.c     ****  */
5477:src/xeq.c     **** #ifdef REALBUILD
5478:src/xeq.c     **** void xeq_xrom(void) {
5479:src/xeq.c     **** #else
5480:src/xeq.c     **** static void xeq_xrom2(void) {
5481:src/xeq.c     **** #endif
5482:src/xeq.c     **** 	int count = 0;
5483:src/xeq.c     **** 	/* Now if we've stepped into the XROM area, keep going until
5484:src/xeq.c     **** 	 * we break free.
5485:src/xeq.c     **** 	 */
5486:src/xeq.c     **** 	  while (!Pause && is_xrom() && RetStkPtr != 0) {
5487:src/xeq.c     **** 		XromRunning = 1;
5488:src/xeq.c     **** 		xeq_single();
5489:src/xeq.c     **** 		XromRunning = 0;
5490:src/xeq.c     **** 		if ((++count & 31) == 0)
5491:src/xeq.c     **** 			busy();
5492:src/xeq.c     **** 		  if (Pause)
5493:src/xeq.c     **** 			// Special case: WHO has a PSE built in.
5494:src/xeq.c     **** 			// Switch to Running mode to force continued execution.
5495:src/xeq.c     **** 			Running = 1;
5496:src/xeq.c     **** 		
5497:src/xeq.c     **** 	}
5498:src/xeq.c     **** }
5499:src/xeq.c     **** 
5500:src/xeq.c     **** #ifndef REALBUILD
5501:src/xeq.c     **** void xeq_xrom(void) {
5502:src/xeq.c     **** 	// We split the routine in two parts for debugging only
5503:src/xeq.c     **** 	if (! State2.trace)
5504:src/xeq.c     **** 		xeq_xrom2();
5505:src/xeq.c     **** }
5506:src/xeq.c     **** #endif
5507:src/xeq.c     **** 
5508:src/xeq.c     **** /* Check to see if we're running a program and if so execute it
5509:src/xeq.c     ****  * for a while.
5510:src/xeq.c     ****  *
5511:src/xeq.c     ****  */
5512:src/xeq.c     **** 
ARM GAS  /tmp/ccqED0AM.s 			page 173


5513:src/xeq.c     **** /*
5514:src/xeq.c     **** 'Pause' is true if Pause is non-zero, i.e., if the pause is still running.
5515:src/xeq.c     **** */
5516:src/xeq.c     ****  void xeqprog(void) 
5517:src/xeq.c     ****  {
5518:src/xeq.c     ****    int state = 0;
5519:src/xeq.c     ****    if (Running || Pause) {
5520:src/xeq.c     **** 
5521:src/xeq.c     **** #if !(defined(CONSOLE)) && !(defined(DM42))
5522:src/xeq.c     ****      long long last_ticker = Ticker;
5523:src/xeq.c     ****      state = ((int) last_ticker % (2*TICKS_PER_FLASH) < TICKS_PER_FLASH);
5524:src/xeq.c     **** #else
5525:src/xeq.c     ****      state = 1;
5526:src/xeq.c     **** #endif
5527:src/xeq.c     ****      
5528:src/xeq.c     ****      dot(RCL_annun, state);
5529:src/xeq.c     ****      lcd_refresh();
5530:src/xeq.c     ****      
5531:src/xeq.c     ****      while (! Pause && Running) {
5532:src/xeq.c     ****        xeq_single();
5533:src/xeq.c     ****        //       if (is_key_pressed() || (Ticker != last_ticker)) // flashes but empty loop 1/3 the 
5534:src/xeq.c     ****        if (is_key_pressed())
5535:src/xeq.c     **** 	 {
5536:src/xeq.c     **** 	 // Key press or heart beat
5537:src/xeq.c     **** 	 // Note: DM42 doesn't have real heart beat so no flash
5538:src/xeq.c     **** 	 // xeq_xrom(); // Already done by dispatch_xrom()
5539:src/xeq.c     **** 	 break;
5540:src/xeq.c     ****        }
5541:src/xeq.c     ****      }
5542:src/xeq.c     ****    }
5543:src/xeq.c     ****    if (! Running && ! Pause) {	  
5544:src/xeq.c     ****      // Program has terminated
5545:src/xeq.c     ****      clr_dot(RCL_annun);
5546:src/xeq.c     ****      ShowRPN = 1; // display() may turn it off again
5547:src/xeq.c     ****      lcd_refresh(); // put here to turn off the RCL annunciator
5548:src/xeq.c     ****      display(); // turns off RPN if it was freeeeze and returns doing little
5549:src/xeq.c     ****      
5550:src/xeq.c     ****      if (ShowRPN) {
5551:src/xeq.c     ****        set_dot(RPN);
5552:src/xeq.c     ****        lcd_refresh(); // RPN
5553:src/xeq.c     ****      }
5554:src/xeq.c     **** #ifndef CONSOLE
5555:src/xeq.c     ****      // Avoid accidental restart with R/S or APD after program ends
5556:src/xeq.c     ****      JustStopped = 1;
5557:src/xeq.c     **** #endif
5558:src/xeq.c     ****    }
5559:src/xeq.c     ****  }
5560:src/xeq.c     **** 
5561:src/xeq.c     **** /* Single step and back step routine
5562:src/xeq.c     ****  */
5563:src/xeq.c     **** void xeq_sst_bst(int kind) 
5564:src/xeq.c     **** {
5565:src/xeq.c     **** 	opcode op;
5566:src/xeq.c     **** 
5567:src/xeq.c     **** 	reset_volatile_state();
5568:src/xeq.c     **** 	if (kind == -1)
5569:src/xeq.c     **** 		decpc();
ARM GAS  /tmp/ccqED0AM.s 			page 174


5570:src/xeq.c     **** 
5571:src/xeq.c     **** 	if (State2.runmode) {
5572:src/xeq.c     **** 		// Display the step
5573:src/xeq.c     **** 		op = getprog(state_pc());
5574:src/xeq.c     **** 		print_step(op);
5575:src/xeq.c     **** 		if (kind == 1) {
5576:src/xeq.c     **** 			// Execute the step on key up
5577:src/xeq.c     **** #ifndef REALBUILD
5578:src/xeq.c     **** 			State2.sst = 1;
5579:src/xeq.c     **** #endif
5580:src/xeq.c     **** 			set_running_on_sst();
5581:src/xeq.c     **** 			incpc();
5582:src/xeq.c     **** 			xeq(op);
5583:src/xeq.c     **** #ifndef REALBUILD
5584:src/xeq.c     **** 			State2.sst = 0;
5585:src/xeq.c     **** #endif
5586:src/xeq.c     **** 			xeq_xrom();  // necessary for code called from XROM
5587:src/xeq.c     **** 			set_running_off_sst();
5588:src/xeq.c     **** 		}
5589:src/xeq.c     **** 	}
5590:src/xeq.c     **** 	else if (kind == 0) {
5591:src/xeq.c     **** 		// Key down in program mode
5592:src/xeq.c     **** 		incpc();
5593:src/xeq.c     **** 		OpCode = 0;
5594:src/xeq.c     **** 	}
5595:src/xeq.c     **** }
5596:src/xeq.c     **** 
5597:src/xeq.c     **** 
5598:src/xeq.c     **** /*
5599:src/xeq.c     ****  *  User command to start or stop execution
5600:src/xeq.c     ****  */
5601:src/xeq.c     **** void op_rs(enum nilop op) {
5602:src/xeq.c     **** #ifndef REALBUILD
5603:src/xeq.c     **** 	// This is for debugging purposes only
5604:src/xeq.c     **** 	// STOP does not appear in XROM normally
5605:src/xeq.c     **** 	if (is_xrom()) {
5606:src/xeq.c     **** 		if (State2.trace && (Running || XromRunning)) {
5607:src/xeq.c     **** 			Running = XromRunning = 0;
5608:src/xeq.c     **** 		}
5609:src/xeq.c     **** 		else {
5610:src/xeq.c     **** 			xeq_xrom2();
5611:src/xeq.c     **** 		}
5612:src/xeq.c     **** 		return;
5613:src/xeq.c     **** 	}
5614:src/xeq.c     **** #endif
5615:src/xeq.c     **** 	if (Running)
5616:src/xeq.c     **** 		set_running_off();
5617:src/xeq.c     **** 	else {
5618:src/xeq.c     **** 		set_running_on();
5619:src/xeq.c     **** 		if (RetStkPtr == 0)
5620:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
5621:src/xeq.c     **** 	}
5622:src/xeq.c     **** }
5623:src/xeq.c     **** 
5624:src/xeq.c     **** 
5625:src/xeq.c     **** /* 
5626:src/xeq.c     ****  *  The following needs to be done each time before any user input is processed.
ARM GAS  /tmp/ccqED0AM.s 			page 175


5627:src/xeq.c     ****  *  On the hardware, RAM is volatile and these pointers and structures need valid values!
5628:src/xeq.c     ****  */
5629:src/xeq.c     **** void xeq_init_contexts(void) {
5630:src/xeq.c     **** 	/*
5631:src/xeq.c     **** 	 *  Compute the sizes of the various memory portions
5632:src/xeq.c     **** 	 */
5633:src/xeq.c     **** 	short int s;
5634:src/xeq.c     **** 	SizeStatRegs = State.have_stats ? sizeof(STAT_DATA) >> 1 : 0;	// in 16 bit words!
5635:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
5636:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
5637:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
5638:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
5639:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
5640:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
5641:src/xeq.c     **** 
5642:src/xeq.c     **** 	/*
5643:src/xeq.c     **** 	 *  Initialise our standard contexts.
5644:src/xeq.c     **** 	 *  We bump the digits for internal calculations.
5645:src/xeq.c     **** 	 */
5646:src/xeq.c     **** 	decContextDefault(&Ctx, DEC_INIT_BASE);
5647:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
5648:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
5649:src/xeq.c     **** 	Ctx.emin=-DEC_MAX_MATH;
5650:src/xeq.c     **** 	Ctx.round = DEC_ROUND_HALF_EVEN;
5651:src/xeq.c     **** }
5652:src/xeq.c     **** 
5653:src/xeq.c     **** 
5654:src/xeq.c     **** 
5655:src/xeq.c     **** #ifdef INCLUDE_PLOTTING
5656:src/xeq.c     **** /*
5657:src/xeq.c     ****  *  Plotting commands
5658:src/xeq.c     ****  *
5659:src/xeq.c     ****  *  The plot buffer is a range of registers that is treated as pixel data
5660:src/xeq.c     ****  *  The first byte contains the length of the buffer in columns (bytes)
5661:src/xeq.c     ****  */
5662:src/xeq.c     **** 
5663:src/xeq.c     **** /*
5664:src/xeq.c     ****  *  Check register range and return a pointer to the plot data.
5665:src/xeq.c     ****  */
5666:src/xeq.c     **** unsigned char *plot_check_range( int arg, int width, int height )
5667:src/xeq.c     **** {
5668:src/xeq.c     **** 	unsigned char *p = (unsigned char *) get_reg_n( arg );
5669:src/xeq.c     **** 	int n = is_dblmode() ? 16 : 8;
5670:src/xeq.c     **** 	int lim = arg < TOPREALREG ? global_regs() : local_regs() + LOCAL_REG_BASE;
5671:src/xeq.c     **** 	int bytes;
5672:src/xeq.c     **** 
5673:src/xeq.c     **** 	if ( width == 0 ) {
5674:src/xeq.c     **** 		width = (int) *p;
5675:src/xeq.c     **** 		height = (int) p[ 1 ];
5676:src/xeq.c     **** 	}
5677:src/xeq.c     **** 
5678:src/xeq.c     **** 	/*
5679:src/xeq.c     **** 	 *  Compute total number of bytes
5680:src/xeq.c     **** 	 */
5681:src/xeq.c     **** 	bytes = 2 + width * height;
5682:src/xeq.c     **** 
5683:src/xeq.c     **** 	/*
ARM GAS  /tmp/ccqED0AM.s 			page 176


5684:src/xeq.c     **** 	 *  Check if we have enough room
5685:src/xeq.c     **** 	 */
5686:src/xeq.c     **** 	if ( width > PAPER_WIDTH || arg + ( bytes + n - 1 ) / n > lim ) {
5687:src/xeq.c     **** 		report_err( ERR_RANGE );
5688:src/xeq.c     **** 		return (unsigned char *) NULL;
5689:src/xeq.c     **** 	}
5690:src/xeq.c     **** 	return p;
5691:src/xeq.c     **** }
5692:src/xeq.c     **** 
5693:src/xeq.c     **** /*
5694:src/xeq.c     ****  * Set up for graphical object display.
5695:src/xeq.c     ****  */
5696:src/xeq.c     **** void cmdplotdisplay( unsigned int arg, enum rarg op )
5697:src/xeq.c     **** {
5698:src/xeq.c     **** 	if (plot_check_range(arg, 0, 0) != NULL) {
5699:src/xeq.c     **** 		DispPlot = arg + 1;
5700:src/xeq.c     **** 		frozen_display();
5701:src/xeq.c     **** 	}
5702:src/xeq.c     **** }
5703:src/xeq.c     **** 
5704:src/xeq.c     **** /*
5705:src/xeq.c     ****  *  Initialize a block of registers to act as a buffer for plotting
5706:src/xeq.c     ****  *  X contains the maximum width (<= 0 is default: 166)
5707:src/xeq.c     ****  */
5708:src/xeq.c     **** void cmdplotinit( unsigned int arg, enum rarg op )
5709:src/xeq.c     **** {
5710:src/xeq.c     **** 	int sgnx, sgny;
5711:src/xeq.c     **** 	int width = (int) getX_int_sgn( &sgnx );
5712:src/xeq.c     **** 	int height = (int) get_reg_n_int_sgn( regY_idx, &sgny ); 
5713:src/xeq.c     **** 	unsigned char *p;
5714:src/xeq.c     **** 	
5715:src/xeq.c     **** 	if ( sgnx || width == 0 ) {
5716:src/xeq.c     **** 		width = PAPER_WIDTH;
5717:src/xeq.c     **** 	}
5718:src/xeq.c     **** 	if ( sgny || height == 0 ) {
5719:src/xeq.c     **** 		height = 1;
5720:src/xeq.c     **** 	}
5721:src/xeq.c     **** 	else {
5722:src/xeq.c     **** 		/*
5723:src/xeq.c     **** 		 *  Make height count the byte rows
5724:src/xeq.c     **** 		 */
5725:src/xeq.c     **** 		height = ( height + 7 ) >> 3;
5726:src/xeq.c     **** 	}
5727:src/xeq.c     **** 
5728:src/xeq.c     **** 	p = plot_check_range( arg, width, height );
5729:src/xeq.c     **** 	if ( p != NULL ) {
5730:src/xeq.c     **** 		*p++ = (unsigned char) width;
5731:src/xeq.c     **** 		*p++ = (unsigned char) height;
5732:src/xeq.c     **** 		xset( p, 0, width * height );
5733:src/xeq.c     **** 	}
5734:src/xeq.c     **** }
5735:src/xeq.c     **** 
5736:src/xeq.c     **** /*
5737:src/xeq.c     ****  *  Return the width and height of the plotting block
5738:src/xeq.c     ****  */
5739:src/xeq.c     **** void cmdplotdim( unsigned int arg, enum rarg op )
5740:src/xeq.c     **** {
ARM GAS  /tmp/ccqED0AM.s 			page 177


5741:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
5742:src/xeq.c     **** 	if ( p != NULL ) {
5743:src/xeq.c     **** 		lift2_if_enabled();
5744:src/xeq.c     **** 		setX_int_sgn( p[ 0 ], 0 ); // width
5745:src/xeq.c     **** 		set_reg_n_int_sgn( regY_idx, p[ 1 ] << 3, 0 ); // height
5746:src/xeq.c     **** 	}
5747:src/xeq.c     **** }
5748:src/xeq.c     **** 
5749:src/xeq.c     **** /*
5750:src/xeq.c     ****  *  All pixel related commands
5751:src/xeq.c     ****  *  X is the horizontal position 0..width
5752:src/xeq.c     ****  *  Y is the vertical position 0..7
5753:src/xeq.c     ****  */
5754:src/xeq.c     **** void cmdplotpixel( unsigned int arg, enum rarg op )
5755:src/xeq.c     **** {
5756:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
5757:src/xeq.c     **** 	if ( p != NULL ) {
5758:src/xeq.c     **** 		/*
5759:src/xeq.c     **** 		 *  Get row from Y
5760:src/xeq.c     **** 		 */
5761:src/xeq.c     **** 		int sgn;
5762:src/xeq.c     **** 		unsigned int row = (unsigned int) get_reg_n_int_sgn( regY_idx, &sgn );
5763:src/xeq.c     **** 		int pix = 0;
5764:src/xeq.c     **** 		if ( sgn == 0 && ( row >> 3 ) < (unsigned int) p[ 1 ] ) {
5765:src/xeq.c     **** 			/*
5766:src/xeq.c     **** 			 *  Row is OK, get column from X
5767:src/xeq.c     **** 			 */
5768:src/xeq.c     **** 			unsigned int width = (unsigned int) *p;
5769:src/xeq.c     **** 			unsigned int column = (unsigned int) getX_int_sgn( &sgn );
5770:src/xeq.c     **** 			if ( sgn == 0 && column < width ) {
5771:src/xeq.c     **** 				/*
5772:src/xeq.c     **** 				 *  Modify the bit in the correct byte
5773:src/xeq.c     **** 				 */
5774:src/xeq.c     **** 				pix = 1 << ( row & 7 );
5775:src/xeq.c     **** 				p += 2 + width * ( row >> 3 ) + column;
5776:src/xeq.c     **** 
5777:src/xeq.c     **** 				if ( op == RARG_PLOT_SETPIX ) {
5778:src/xeq.c     **** 					*p |= pix;
5779:src/xeq.c     **** 				}
5780:src/xeq.c     **** 				else if ( op == RARG_PLOT_CLRPIX ) {
5781:src/xeq.c     **** 					*p &= ~pix;
5782:src/xeq.c     **** 				}
5783:src/xeq.c     **** 				else if ( op == RARG_PLOT_FLIPPIX ) {
5784:src/xeq.c     **** 					*p ^= pix;
5785:src/xeq.c     **** 				}
5786:src/xeq.c     **** 			}
5787:src/xeq.c     **** 		}
5788:src/xeq.c     **** 		if ( op == RARG_PLOT_ISSET ) {
5789:src/xeq.c     **** 			fin_tst( *p & pix );
5790:src/xeq.c     **** 		}
5791:src/xeq.c     **** 	}
5792:src/xeq.c     **** }
5793:src/xeq.c     **** #endif
5794:src/xeq.c     **** 
5795:src/xeq.c     **** 
5796:src/xeq.c     **** /*
5797:src/xeq.c     ****  *  We don't allow some commands from a running program
ARM GAS  /tmp/ccqED0AM.s 			page 178


5798:src/xeq.c     ****  */
5799:src/xeq.c     **** int not_running(void) {
5800:src/xeq.c     **** 	if ( Running ) {
5801:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
5802:src/xeq.c     **** 		return 0;
5803:src/xeq.c     **** 	}
5804:src/xeq.c     **** 	return 1;
5805:src/xeq.c     **** }
5806:src/xeq.c     **** 
5807:src/xeq.c     **** /*
5808:src/xeq.c     ****  *  Handle the Running Flag
5809:src/xeq.c     ****  */
5810:src/xeq.c     **** void set_running_off_sst() {
5811:src/xeq.c     **** 	Running = 0;
5812:src/xeq.c     **** }
5813:src/xeq.c     **** 
5814:src/xeq.c     **** void set_running_on_sst() {
5815:src/xeq.c     **** 	Running = 1;
5816:src/xeq.c     **** }
5817:src/xeq.c     **** 
5818:src/xeq.c     **** void set_running_off() {
 3511              		.loc 1 5818 6 view .LVU957
 3512              	.LBB1558:
5819:src/xeq.c     **** 	set_running_off_sst();
 3513              		.loc 1 5819 2 view .LVU958
 3514              	.LBB1559:
 3515              	.LBI1559:
5810:src/xeq.c     **** 	Running = 0;
 3516              		.loc 1 5810 6 view .LVU959
 3517              	.LBB1560:
5811:src/xeq.c     **** }
 3518              		.loc 1 5811 2 view .LVU960
5811:src/xeq.c     **** }
 3519              		.loc 1 5811 10 is_stmt 0 view .LVU961
 3520 0078 084A     		ldr	r2, .L286+8
 3521 007a 1160     		str	r1, [r2]
 3522              	.LBE1560:
 3523              	.LBE1559:
5820:src/xeq.c     **** 	State.entryp = 0;
 3524              		.loc 1 5820 2 is_stmt 1 view .LVU962
 3525              		.loc 1 5820 15 is_stmt 0 view .LVU963
 3526 007c 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 3527 0080 61F30412 		bfi	r2, r1, #4, #1
 3528 0084 83F8DD27 		strb	r2, [r3, #2013]
5821:src/xeq.c     **** 	dot( RCL_annun, 0);
 3529              		.loc 1 5821 2 is_stmt 1 view .LVU964
 3530              	.LBE1558:
 3531              	.LBE1557:
2270:src/xeq.c     **** 
 3532              		.loc 1 2270 1 is_stmt 0 view .LVU965
 3533 0088 BDE87040 		pop	{r4, r5, r6, lr}
 3534              		.cfi_restore 14
 3535              		.cfi_restore 6
 3536              		.cfi_restore 5
 3537              		.cfi_restore 4
 3538              		.cfi_def_cfa_offset 0
 3539              	.LBB1562:
ARM GAS  /tmp/ccqED0AM.s 			page 179


 3540              	.LBB1561:
 3541              		.loc 1 5821 2 view .LVU966
 3542 008c 8A20     		movs	r0, #138
 3543 008e FFF7FEBF 		b	dot
 3544              	.LVL265:
 3545              	.L287:
 3546 0092 00BF     		.align	2
 3547              	.L286:
 3548 0094 00000000 		.word	main_ram
 3549 0098 00000000 		.word	RetStk
 3550 009c 00000000 		.word	Running
 3551              	.LBE1561:
 3552              	.LBE1562:
 3553              		.cfi_endproc
 3554              	.LFE154:
 3556              		.section	.text.user_pc,"ax",%progbits
 3557              		.align	1
 3558              		.p2align 2,,3
 3559              		.global	user_pc
 3560              		.syntax unified
 3561              		.thumb
 3562              		.thumb_func
 3563              		.fpu fpv4-sp-d16
 3565              	user_pc:
 3566              	.LVL266:
 3567              	.LFB25:
 494:src/xeq.c     **** 	unsigned int n = 1;
 3568              		.loc 1 494 39 is_stmt 1 view -0
 3569              		.cfi_startproc
 3570              		@ args = 0, pretend = 0, frame = 0
 3571              		@ frame_needed = 0, uses_anonymous_args = 0
 3572              		@ link register save eliminated.
 495:src/xeq.c     **** 	unsigned int base;
 3573              		.loc 1 495 2 view .LVU968
 496:src/xeq.c     **** 
 3574              		.loc 1 496 2 view .LVU969
 499:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3575              		.loc 1 499 2 view .LVU970
 499:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3576              		.loc 1 499 5 is_stmt 0 view .LVU971
 3577 0000 0346     		mov	r3, r0
 3578 0002 20B1     		cbz	r0, .L289
 499:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3579              		.loc 1 499 17 discriminator 1 view .LVU972
 3580 0004 820B     		lsrs	r2, r0, #14
 499:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3581              		.loc 1 499 14 discriminator 1 view .LVU973
 3582 0006 032A     		cmp	r2, #3
 3583 0008 01D0     		beq	.L289
 3584 000a FFF7FEBF 		b	user_pc.part.0
 3585              	.LVL267:
 3586              	.L289:
 500:src/xeq.c     **** #else
 3587              		.loc 1 500 3 is_stmt 1 view .LVU974
 500:src/xeq.c     **** #else
 3588              		.loc 1 500 24 is_stmt 0 view .LVU975
 3589 000e C3F30D00 		ubfx	r0, r3, #0, #14
ARM GAS  /tmp/ccqED0AM.s 			page 180


 3590              	.LVL268:
 513:src/xeq.c     **** 
 3591              		.loc 1 513 1 view .LVU976
 3592 0012 7047     		bx	lr
 3593              		.cfi_endproc
 3594              	.LFE25:
 3596              		.section	.text.find_user_pc,"ax",%progbits
 3597              		.align	1
 3598              		.p2align 2,,3
 3599              		.global	find_user_pc
 3600              		.syntax unified
 3601              		.thumb
 3602              		.thumb_func
 3603              		.fpu fpv4-sp-d16
 3605              	find_user_pc:
 3606              	.LVL269:
 3607              	.LFB26:
 517:src/xeq.c     **** 	unsigned int upc = state_pc();
 3608              		.loc 1 517 48 is_stmt 1 view -0
 3609              		.cfi_startproc
 3610              		@ args = 0, pretend = 0, frame = 0
 3611              		@ frame_needed = 0, uses_anonymous_args = 0
 518:src/xeq.c     **** 	const int libp = isLIB(upc);
 3612              		.loc 1 518 2 view .LVU978
 517:src/xeq.c     **** 	unsigned int upc = state_pc();
 3613              		.loc 1 517 48 is_stmt 0 view .LVU979
 3614 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3615              		.cfi_def_cfa_offset 24
 3616              		.cfi_offset 3, -24
 3617              		.cfi_offset 4, -20
 3618              		.cfi_offset 5, -16
 3619              		.cfi_offset 6, -12
 3620              		.cfi_offset 7, -8
 3621              		.cfi_offset 14, -4
 518:src/xeq.c     **** 	const int libp = isLIB(upc);
 3622              		.loc 1 518 21 view .LVU980
 3623 0002 124B     		ldr	r3, .L305
 3624 0004 1B68     		ldr	r3, [r3]
 3625 0006 B3F8E037 		ldrh	r3, [r3, #2016]
 3626              	.LVL270:
 519:src/xeq.c     **** 	unsigned int base = libp ? startLIB(upc) : 0;
 3627              		.loc 1 519 2 is_stmt 1 view .LVU981
 520:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 3628              		.loc 1 520 2 view .LVU982
 520:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 3629              		.loc 1 520 43 is_stmt 0 view .LVU983
 3630 000a 13F44044 		ands	r4, r3, #49152
 3631              	.LVL271:
 520:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 3632              		.loc 1 520 43 view .LVU984
 3633 000e 1ABF     		itte	ne
 3634 0010 03F44045 		andne	r5, r3, #49152
 3635 0014 0135     		addne	r5, r5, #1
 3636 0016 2546     		moveq	r5, r4
 3637              	.LVL272:
 521:src/xeq.c     **** #ifndef REALBUILD
 3638              		.loc 1 521 2 is_stmt 1 view .LVU985
ARM GAS  /tmp/ccqED0AM.s 			page 181


 523:src/xeq.c     **** 		return addrXROM(target);
 3639              		.loc 1 523 6 is_stmt 0 view .LVU986
 3640 0018 9B0B     		lsrs	r3, r3, #14
 3641              	.LVL273:
 521:src/xeq.c     **** #ifndef REALBUILD
 3642              		.loc 1 521 28 view .LVU987
 3643 001a 003C     		subs	r4, r4, #0
 521:src/xeq.c     **** #ifndef REALBUILD
 3644              		.loc 1 521 28 view .LVU988
 3645 001c 18BF     		it	ne
 3646 001e 0124     		movne	r4, #1
 3647              	.LVL274:
 523:src/xeq.c     **** 		return addrXROM(target);
 3648              		.loc 1 523 2 is_stmt 1 view .LVU989
 523:src/xeq.c     **** 		return addrXROM(target);
 3649              		.loc 1 523 5 is_stmt 0 view .LVU990
 3650 0020 032B     		cmp	r3, #3
 517:src/xeq.c     **** 	unsigned int upc = state_pc();
 3651              		.loc 1 517 48 view .LVU991
 3652 0022 0646     		mov	r6, r0
 523:src/xeq.c     **** 		return addrXROM(target);
 3653              		.loc 1 523 5 view .LVU992
 3654 0024 0ED0     		beq	.L303
 3655              	.LBB1563:
 529:src/xeq.c     **** 			return oldbase;
 3656              		.loc 1 529 7 view .LVU993
 3657 0026 0A4F     		ldr	r7, .L305+4
 3658 0028 05E0     		b	.L298
 3659              	.LVL275:
 3660              	.L300:
 528:src/xeq.c     **** 		if (PcWrapped)
 3661              		.loc 1 528 10 view .LVU994
 3662 002a FFF7FEFF 		bl	do_inc
 3663              	.LVL276:
 529:src/xeq.c     **** 			return oldbase;
 3664              		.loc 1 529 6 view .LVU995
 3665 002e 3B68     		ldr	r3, [r7]
 3666              	.LVL277:
 529:src/xeq.c     **** 			return oldbase;
 3667              		.loc 1 529 3 is_stmt 1 view .LVU996
 3668 0030 0134     		adds	r4, r4, #1
 3669              	.LVL278:
 529:src/xeq.c     **** 			return oldbase;
 3670              		.loc 1 529 6 is_stmt 0 view .LVU997
 3671 0032 2BB9     		cbnz	r3, .L296
 528:src/xeq.c     **** 		if (PcWrapped)
 3672              		.loc 1 528 10 view .LVU998
 3673 0034 0546     		mov	r5, r0
 3674              	.LVL279:
 3675              	.L298:
 527:src/xeq.c     **** 		base = do_inc(oldbase, 0);
 3676              		.loc 1 527 3 is_stmt 1 view .LVU999
 528:src/xeq.c     **** 		if (PcWrapped)
 3677              		.loc 1 528 3 view .LVU1000
 528:src/xeq.c     **** 		if (PcWrapped)
 3678              		.loc 1 528 3 is_stmt 0 view .LVU1001
 3679              	.LBE1563:
ARM GAS  /tmp/ccqED0AM.s 			page 182


 526:src/xeq.c     **** 		const unsigned int oldbase = base;
 3680              		.loc 1 526 8 is_stmt 1 view .LVU1002
 526:src/xeq.c     **** 		const unsigned int oldbase = base;
 3681              		.loc 1 526 8 is_stmt 0 view .LVU1003
 3682 0036 A642     		cmp	r6, r4
 3683              	.LBB1564:
 528:src/xeq.c     **** 		if (PcWrapped)
 3684              		.loc 1 528 10 view .LVU1004
 3685 0038 2846     		mov	r0, r5
 3686 003a 4FF00001 		mov	r1, #0
 3687              	.LBE1564:
 526:src/xeq.c     **** 		const unsigned int oldbase = base;
 3688              		.loc 1 526 8 view .LVU1005
 3689 003e F4D8     		bhi	.L300
 3690              	.LVL280:
 3691              	.L296:
 533:src/xeq.c     **** 
 3692              		.loc 1 533 1 view .LVU1006
 3693 0040 2846     		mov	r0, r5
 3694              	.LVL281:
 533:src/xeq.c     **** 
 3695              		.loc 1 533 1 view .LVU1007
 3696 0042 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3697              	.LVL282:
 3698              	.L303:
 524:src/xeq.c     **** #endif
 3699              		.loc 1 524 3 is_stmt 1 view .LVU1008
 524:src/xeq.c     **** #endif
 3700              		.loc 1 524 10 is_stmt 0 view .LVU1009
 3701 0044 40F44045 		orr	r5, r0, #49152
 3702              	.LVL283:
 533:src/xeq.c     **** 
 3703              		.loc 1 533 1 view .LVU1010
 3704 0048 2846     		mov	r0, r5
 3705              	.LVL284:
 533:src/xeq.c     **** 
 3706              		.loc 1 533 1 view .LVU1011
 3707 004a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3708              	.LVL285:
 3709              	.L306:
 533:src/xeq.c     **** 
 3710              		.loc 1 533 1 view .LVU1012
 3711              		.align	2
 3712              	.L305:
 3713 004c 00000000 		.word	main_ram
 3714 0050 00000000 		.word	PcWrapped
 3715              		.cfi_endproc
 3716              	.LFE26:
 3718              		.section	.text.report_err,"ax",%progbits
 3719              		.align	1
 3720              		.p2align 2,,3
 3721              		.global	report_err
 3722              		.syntax unified
 3723              		.thumb
 3724              		.thumb_func
 3725              		.fpu fpv4-sp-d16
 3727              	report_err:
ARM GAS  /tmp/ccqED0AM.s 			page 183


 3728              	.LVL286:
 3729              	.LFB28:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3730              		.loc 1 546 38 is_stmt 1 view -0
 3731              		.cfi_startproc
 3732              		@ args = 0, pretend = 0, frame = 0
 3733              		@ frame_needed = 0, uses_anonymous_args = 0
 547:src/xeq.c     **** 		Error = e;
 3734              		.loc 1 547 2 view .LVU1014
 547:src/xeq.c     **** 		Error = e;
 3735              		.loc 1 547 12 is_stmt 0 view .LVU1015
 3736 0000 064A     		ldr	r2, .L313
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3737              		.loc 1 546 38 view .LVU1016
 3738 0002 10B5     		push	{r4, lr}
 3739              		.cfi_def_cfa_offset 8
 3740              		.cfi_offset 4, -8
 3741              		.cfi_offset 14, -4
 547:src/xeq.c     **** 		Error = e;
 3742              		.loc 1 547 12 view .LVU1017
 3743 0004 1468     		ldr	r4, [r2]
 547:src/xeq.c     **** 		Error = e;
 3744              		.loc 1 547 5 view .LVU1018
 3745 0006 0CB9     		cbnz	r4, .L310
 3746              	.LVL287:
 3747              	.LBB1567:
 3748              	.LBI1567:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3749              		.loc 1 546 5 is_stmt 1 view .LVU1019
 3750              	.LBB1568:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 3751              		.loc 1 548 3 view .LVU1020
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 3752              		.loc 1 548 9 is_stmt 0 view .LVU1021
 3753 0008 1060     		str	r0, [r2]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 3754              		.loc 1 549 3 is_stmt 1 view .LVU1022
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 3755              		.loc 1 549 6 is_stmt 0 view .LVU1023
 3756 000a 10B1     		cbz	r0, .L312
 3757              	.LVL288:
 3758              	.L310:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 3759              		.loc 1 549 6 view .LVU1024
 3760              	.LBE1568:
 3761              	.LBE1567:
 554:src/xeq.c     **** }
 3762              		.loc 1 554 9 view .LVU1025
 3763 000c 0124     		movs	r4, #1
 555:src/xeq.c     **** 
 3764              		.loc 1 555 1 view .LVU1026
 3765 000e 2046     		mov	r0, r4
 3766              	.LVL289:
 555:src/xeq.c     **** 
 3767              		.loc 1 555 1 view .LVU1027
 3768 0010 10BD     		pop	{r4, pc}
 3769              	.LVL290:
ARM GAS  /tmp/ccqED0AM.s 			page 184


 3770              	.L312:
 3771              	.LBB1570:
 3772              	.LBB1569:
 550:src/xeq.c     **** 			return 0;
 3773              		.loc 1 550 4 is_stmt 1 view .LVU1028
 3774 0012 FFF7FEFF 		bl	error_message
 3775              	.LVL291:
 551:src/xeq.c     **** 		}
 3776              		.loc 1 551 4 view .LVU1029
 551:src/xeq.c     **** 		}
 3777              		.loc 1 551 4 is_stmt 0 view .LVU1030
 3778              	.LBE1569:
 3779              	.LBE1570:
 555:src/xeq.c     **** 
 3780              		.loc 1 555 1 view .LVU1031
 3781 0016 2046     		mov	r0, r4
 3782 0018 10BD     		pop	{r4, pc}
 3783              	.L314:
 3784 001a 00BF     		.align	2
 3785              	.L313:
 3786 001c 00000000 		.word	Error
 3787              		.cfi_endproc
 3788              	.LFE28:
 3790              		.section	.text.report_warn,"ax",%progbits
 3791              		.align	1
 3792              		.p2align 2,,3
 3793              		.global	report_warn
 3794              		.syntax unified
 3795              		.thumb
 3796              		.thumb_func
 3797              		.fpu fpv4-sp-d16
 3799              	report_warn:
 3800              	.LVL292:
 3801              	.LFB29:
 560:src/xeq.c     **** 	if (Running) {
 3802              		.loc 1 560 39 is_stmt 1 view -0
 3803              		.cfi_startproc
 3804              		@ args = 0, pretend = 0, frame = 0
 3805              		@ frame_needed = 0, uses_anonymous_args = 0
 561:src/xeq.c     **** 		return report_err(e);
 3806              		.loc 1 561 2 view .LVU1033
 561:src/xeq.c     **** 		return report_err(e);
 3807              		.loc 1 561 6 is_stmt 0 view .LVU1034
 3808 0000 114B     		ldr	r3, .L321
 560:src/xeq.c     **** 	if (Running) {
 3809              		.loc 1 560 39 view .LVU1035
 3810 0002 70B5     		push	{r4, r5, r6, lr}
 3811              		.cfi_def_cfa_offset 16
 3812              		.cfi_offset 4, -16
 3813              		.cfi_offset 5, -12
 3814              		.cfi_offset 6, -8
 3815              		.cfi_offset 14, -4
 561:src/xeq.c     **** 		return report_err(e);
 3816              		.loc 1 561 5 view .LVU1036
 3817 0004 1D68     		ldr	r5, [r3]
 560:src/xeq.c     **** 	if (Running) {
 3818              		.loc 1 560 39 view .LVU1037
ARM GAS  /tmp/ccqED0AM.s 			page 185


 3819 0006 0446     		mov	r4, r0
 561:src/xeq.c     **** 		return report_err(e);
 3820              		.loc 1 561 5 view .LVU1038
 3821 0008 5DB1     		cbz	r5, .L316
 562:src/xeq.c     **** 	}
 3822              		.loc 1 562 3 is_stmt 1 view .LVU1039
 3823              	.LVL293:
 3824              	.LBB1579:
 3825              	.LBI1579:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3826              		.loc 1 546 5 view .LVU1040
 3827              	.LBB1580:
 547:src/xeq.c     **** 		Error = e;
 3828              		.loc 1 547 2 view .LVU1041
 547:src/xeq.c     **** 		Error = e;
 3829              		.loc 1 547 12 is_stmt 0 view .LVU1042
 3830 000a 104B     		ldr	r3, .L321+4
 3831 000c 1D68     		ldr	r5, [r3]
 547:src/xeq.c     **** 		Error = e;
 3832              		.loc 1 547 5 view .LVU1043
 3833 000e 15B1     		cbz	r5, .L317
 3834              	.L319:
 554:src/xeq.c     **** }
 3835              		.loc 1 554 9 view .LVU1044
 3836 0010 0125     		movs	r5, #1
 3837              	.LVL294:
 3838              	.L315:
 554:src/xeq.c     **** }
 3839              		.loc 1 554 9 view .LVU1045
 3840              	.LBE1580:
 3841              	.LBE1579:
 571:src/xeq.c     **** 
 3842              		.loc 1 571 1 view .LVU1046
 3843 0012 2846     		mov	r0, r5
 3844 0014 70BD     		pop	{r4, r5, r6, pc}
 3845              	.LVL295:
 3846              	.L317:
 3847              	.LBB1584:
 3848              	.LBB1583:
 3849              	.LBB1581:
 3850              	.LBI1581:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3851              		.loc 1 546 5 is_stmt 1 view .LVU1047
 3852              	.LBB1582:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 3853              		.loc 1 548 3 view .LVU1048
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 3854              		.loc 1 548 9 is_stmt 0 view .LVU1049
 3855 0016 1860     		str	r0, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 3856              		.loc 1 549 3 is_stmt 1 view .LVU1050
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 3857              		.loc 1 549 6 is_stmt 0 view .LVU1051
 3858 0018 0028     		cmp	r0, #0
 3859 001a F9D1     		bne	.L319
 550:src/xeq.c     **** 			return 0;
 3860              		.loc 1 550 4 is_stmt 1 view .LVU1052
ARM GAS  /tmp/ccqED0AM.s 			page 186


 3861 001c FFF7FEFF 		bl	error_message
 3862              	.LVL296:
 551:src/xeq.c     **** 		}
 3863              		.loc 1 551 4 view .LVU1053
 551:src/xeq.c     **** 		}
 3864              		.loc 1 551 11 is_stmt 0 view .LVU1054
 3865 0020 F7E7     		b	.L315
 3866              	.LVL297:
 3867              	.L316:
 551:src/xeq.c     **** 		}
 3868              		.loc 1 551 11 view .LVU1055
 3869              	.LBE1582:
 3870              	.LBE1581:
 3871              	.LBE1583:
 3872              	.LBE1584:
 3873              	.LBB1585:
 3874              	.LBI1585:
 560:src/xeq.c     **** 	if (Running) {
 3875              		.loc 1 560 5 is_stmt 1 view .LVU1056
 3876              	.LBB1586:
 564:src/xeq.c     **** #ifndef CONSOLE
 3877              		.loc 1 564 2 view .LVU1057
 3878 0022 FFF7FEFF 		bl	error_message
 3879              	.LVL298:
 566:src/xeq.c     **** 	JustDisplayed = 1;
 3880              		.loc 1 566 2 view .LVU1058
 566:src/xeq.c     **** 	JustDisplayed = 1;
 3881              		.loc 1 566 21 is_stmt 0 view .LVU1059
 3882 0026 0A4A     		ldr	r2, .L321+8
 567:src/xeq.c     **** 	ShowRPN = 1;
 3883              		.loc 1 567 16 view .LVU1060
 3884 0028 0A4E     		ldr	r6, .L321+12
 566:src/xeq.c     **** 	JustDisplayed = 1;
 3885              		.loc 1 566 21 view .LVU1061
 3886 002a D17D     		ldrb	r1, [r2, #23]	@ zero_extendqisi2
 568:src/xeq.c     **** #endif
 3887              		.loc 1 568 10 view .LVU1062
 3888 002c 0A48     		ldr	r0, .L321+16
 566:src/xeq.c     **** 	JustDisplayed = 1;
 3889              		.loc 1 566 21 view .LVU1063
 3890 002e 65F30411 		bfi	r1, r5, #4, #1
 570:src/xeq.c     **** }
 3891              		.loc 1 570 11 view .LVU1064
 3892 0032 251E     		subs	r5, r4, #0
 567:src/xeq.c     **** 	ShowRPN = 1;
 3893              		.loc 1 567 16 view .LVU1065
 3894 0034 4FF00103 		mov	r3, #1
 566:src/xeq.c     **** 	JustDisplayed = 1;
 3895              		.loc 1 566 21 view .LVU1066
 3896 0038 D175     		strb	r1, [r2, #23]
 567:src/xeq.c     **** 	ShowRPN = 1;
 3897              		.loc 1 567 2 is_stmt 1 view .LVU1067
 570:src/xeq.c     **** }
 3898              		.loc 1 570 11 is_stmt 0 view .LVU1068
 3899 003a 18BF     		it	ne
 3900 003c 0125     		movne	r5, #1
 568:src/xeq.c     **** #endif
ARM GAS  /tmp/ccqED0AM.s 			page 187


 3901              		.loc 1 568 10 view .LVU1069
 3902 003e 0360     		str	r3, [r0]
 567:src/xeq.c     **** 	ShowRPN = 1;
 3903              		.loc 1 567 16 view .LVU1070
 3904 0040 3360     		str	r3, [r6]
 568:src/xeq.c     **** #endif
 3905              		.loc 1 568 2 is_stmt 1 view .LVU1071
 570:src/xeq.c     **** }
 3906              		.loc 1 570 2 view .LVU1072
 3907              	.LVL299:
 570:src/xeq.c     **** }
 3908              		.loc 1 570 2 is_stmt 0 view .LVU1073
 3909              	.LBE1586:
 3910              	.LBE1585:
 571:src/xeq.c     **** 
 3911              		.loc 1 571 1 view .LVU1074
 3912 0042 2846     		mov	r0, r5
 3913 0044 70BD     		pop	{r4, r5, r6, pc}
 3914              	.LVL300:
 3915              	.L322:
 571:src/xeq.c     **** 
 3916              		.loc 1 571 1 view .LVU1075
 3917 0046 00BF     		.align	2
 3918              	.L321:
 3919 0048 00000000 		.word	Running
 3920 004c 00000000 		.word	Error
 3921 0050 00000000 		.word	StateWhileOn
 3922 0054 00000000 		.word	JustDisplayed
 3923 0058 00000000 		.word	ShowRPN
 3924              		.cfi_endproc
 3925              	.LFE29:
 3927              		.section	.text.bad_mode_error,"ax",%progbits
 3928              		.align	1
 3929              		.p2align 2,,3
 3930              		.global	bad_mode_error
 3931              		.syntax unified
 3932              		.thumb
 3933              		.thumb_func
 3934              		.fpu fpv4-sp-d16
 3936              	bad_mode_error:
 3937              	.LFB30:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 3938              		.loc 1 575 27 is_stmt 1 view -0
 3939              		.cfi_startproc
 3940              		@ args = 0, pretend = 0, frame = 0
 3941              		@ frame_needed = 0, uses_anonymous_args = 0
 3942              		@ link register save eliminated.
 576:src/xeq.c     **** }
 3943              		.loc 1 576 2 view .LVU1077
 3944              	.LVL301:
 3945              	.LBB1591:
 3946              	.LBI1591:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3947              		.loc 1 546 5 view .LVU1078
 3948              	.LBB1592:
 547:src/xeq.c     **** 		Error = e;
 3949              		.loc 1 547 2 view .LVU1079
ARM GAS  /tmp/ccqED0AM.s 			page 188


 547:src/xeq.c     **** 		Error = e;
 3950              		.loc 1 547 12 is_stmt 0 view .LVU1080
 3951 0000 024B     		ldr	r3, .L325
 547:src/xeq.c     **** 		Error = e;
 3952              		.loc 1 547 5 view .LVU1081
 3953 0002 1A68     		ldr	r2, [r3]
 3954 0004 0AB9     		cbnz	r2, .L323
 3955              	.LVL302:
 3956              	.LBB1593:
 3957              	.LBI1593:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3958              		.loc 1 546 5 is_stmt 1 view .LVU1082
 3959              	.LBB1594:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 3960              		.loc 1 548 3 view .LVU1083
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 3961              		.loc 1 548 9 is_stmt 0 view .LVU1084
 3962 0006 0D22     		movs	r2, #13
 3963 0008 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 3964              		.loc 1 549 3 is_stmt 1 view .LVU1085
 3965              	.LVL303:
 3966              	.L323:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 3967              		.loc 1 549 3 is_stmt 0 view .LVU1086
 3968              	.LBE1594:
 3969              	.LBE1593:
 3970              	.LBE1592:
 3971              	.LBE1591:
 577:src/xeq.c     **** 
 3972              		.loc 1 577 1 view .LVU1087
 3973 000a 7047     		bx	lr
 3974              	.L326:
 3975              		.align	2
 3976              	.L325:
 3977 000c 00000000 		.word	Error
 3978              		.cfi_endproc
 3979              	.LFE30:
 3981              		.section	.text.cmderr,"ax",%progbits
 3982              		.align	1
 3983              		.p2align 2,,3
 3984              		.global	cmderr
 3985              		.syntax unified
 3986              		.thumb
 3987              		.thumb_func
 3988              		.fpu fpv4-sp-d16
 3990              	cmderr:
 3991              	.LVL304:
 3992              	.LFB31:
 581:src/xeq.c     **** 	report_err(arg);
 3993              		.loc 1 581 45 is_stmt 1 view -0
 3994              		.cfi_startproc
 3995              		@ args = 0, pretend = 0, frame = 0
 3996              		@ frame_needed = 0, uses_anonymous_args = 0
 3997              		@ link register save eliminated.
 582:src/xeq.c     **** }
 3998              		.loc 1 582 2 view .LVU1089
ARM GAS  /tmp/ccqED0AM.s 			page 189


 3999              	.LBB1599:
 4000              	.LBB1600:
 547:src/xeq.c     **** 		Error = e;
 4001              		.loc 1 547 12 is_stmt 0 view .LVU1090
 4002 0000 034A     		ldr	r2, .L332
 547:src/xeq.c     **** 		Error = e;
 4003              		.loc 1 547 5 view .LVU1091
 4004 0002 1168     		ldr	r1, [r2]
 4005              	.LVL305:
 547:src/xeq.c     **** 		Error = e;
 4006              		.loc 1 547 5 view .LVU1092
 4007              	.LBE1600:
 4008              	.LBI1599:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4009              		.loc 1 546 5 is_stmt 1 view .LVU1093
 4010              	.LBB1605:
 547:src/xeq.c     **** 		Error = e;
 4011              		.loc 1 547 2 view .LVU1094
 547:src/xeq.c     **** 		Error = e;
 4012              		.loc 1 547 5 is_stmt 0 view .LVU1095
 4013 0004 09B9     		cbnz	r1, .L327
 4014              	.LVL306:
 4015              	.LBB1601:
 4016              	.LBI1601:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4017              		.loc 1 546 5 is_stmt 1 view .LVU1096
 4018              	.LBB1602:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 4019              		.loc 1 548 3 view .LVU1097
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 4020              		.loc 1 548 9 is_stmt 0 view .LVU1098
 4021 0006 1060     		str	r0, [r2]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 4022              		.loc 1 549 3 is_stmt 1 view .LVU1099
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 4023              		.loc 1 549 6 is_stmt 0 view .LVU1100
 4024 0008 00B1     		cbz	r0, .L331
 4025              	.LVL307:
 4026              	.L327:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 4027              		.loc 1 549 6 view .LVU1101
 4028              	.LBE1602:
 4029              	.LBE1601:
 4030              	.LBE1605:
 4031              	.LBE1599:
 583:src/xeq.c     **** 
 4032              		.loc 1 583 1 view .LVU1102
 4033 000a 7047     		bx	lr
 4034              	.LVL308:
 4035              	.L331:
 4036              	.LBB1607:
 4037              	.LBB1606:
 4038              	.LBB1604:
 4039              	.LBB1603:
 550:src/xeq.c     **** 			return 0;
 4040              		.loc 1 550 4 is_stmt 1 view .LVU1103
 4041 000c FFF7FEBF 		b	error_message
ARM GAS  /tmp/ccqED0AM.s 			page 190


 4042              	.LVL309:
 4043              	.L333:
 550:src/xeq.c     **** 			return 0;
 4044              		.loc 1 550 4 is_stmt 0 view .LVU1104
 4045              		.align	2
 4046              	.L332:
 4047 0010 00000000 		.word	Error
 4048              	.LBE1603:
 4049              	.LBE1604:
 4050              	.LBE1606:
 4051              	.LBE1607:
 4052              		.cfi_endproc
 4053              	.LFE31:
 4055              		.section	.text.cmdmsg,"ax",%progbits
 4056              		.align	1
 4057              		.p2align 2,,3
 4058              		.global	cmdmsg
 4059              		.syntax unified
 4060              		.thumb
 4061              		.thumb_func
 4062              		.fpu fpv4-sp-d16
 4064              	cmdmsg:
 4065              	.LVL310:
 4066              	.LFB32:
 587:src/xeq.c     **** 	error_message(arg);
 4067              		.loc 1 587 45 is_stmt 1 view -0
 4068              		.cfi_startproc
 4069              		@ args = 0, pretend = 0, frame = 0
 4070              		@ frame_needed = 0, uses_anonymous_args = 0
 4071              		@ link register save eliminated.
 588:src/xeq.c     **** }
 4072              		.loc 1 588 2 view .LVU1106
 4073 0000 FFF7FEBF 		b	error_message
 4074              	.LVL311:
 588:src/xeq.c     **** }
 4075              		.loc 1 588 2 is_stmt 0 view .LVU1107
 4076              		.cfi_endproc
 4077              	.LFE32:
 4079              		.section	.text.rarg_roundingmode,"ax",%progbits
 4080              		.align	1
 4081              		.p2align 2,,3
 4082              		.global	rarg_roundingmode
 4083              		.syntax unified
 4084              		.thumb
 4085              		.thumb_func
 4086              		.fpu fpv4-sp-d16
 4088              	rarg_roundingmode:
 4089              	.LVL312:
 4090              	.LFB35:
 623:src/xeq.c     **** 	UState.rounding_mode = arg;
 4091              		.loc 1 623 56 is_stmt 1 view -0
 4092              		.cfi_startproc
 4093              		@ args = 0, pretend = 0, frame = 0
 4094              		@ frame_needed = 0, uses_anonymous_args = 0
 4095              		@ link register save eliminated.
 624:src/xeq.c     **** }
 4096              		.loc 1 624 2 view .LVU1109
ARM GAS  /tmp/ccqED0AM.s 			page 191


 624:src/xeq.c     **** }
 4097              		.loc 1 624 23 is_stmt 0 view .LVU1110
 4098 0000 044B     		ldr	r3, .L336
 4099 0002 1B68     		ldr	r3, [r3]
 4100 0004 93F8EB27 		ldrb	r2, [r3, #2027]	@ zero_extendqisi2
 4101 0008 60F30612 		bfi	r2, r0, #4, #3
 4102              	.LVL313:
 624:src/xeq.c     **** }
 4103              		.loc 1 624 23 view .LVU1111
 4104 000c 83F8EB27 		strb	r2, [r3, #2027]
 625:src/xeq.c     **** 
 4105              		.loc 1 625 1 view .LVU1112
 4106 0010 7047     		bx	lr
 4107              	.L337:
 4108 0012 00BF     		.align	2
 4109              	.L336:
 4110 0014 00000000 		.word	main_ram
 4111              		.cfi_endproc
 4112              	.LFE35:
 4114              		.section	.text.packed_from_number,"ax",%progbits
 4115              		.align	1
 4116              		.p2align 2,,3
 4117              		.global	packed_from_number
 4118              		.syntax unified
 4119              		.thumb
 4120              		.thumb_func
 4121              		.fpu fpv4-sp-d16
 4123              	packed_from_number:
 4124              	.LVL314:
 4125              	.LFB36:
 631:src/xeq.c     **** 	decContext ctx64;
 4126              		.loc 1 631 59 is_stmt 1 view -0
 4127              		.cfi_startproc
 4128              		@ args = 0, pretend = 0, frame = 24
 4129              		@ frame_needed = 0, uses_anonymous_args = 0
 632:src/xeq.c     **** 
 4130              		.loc 1 632 2 view .LVU1114
 634:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4131              		.loc 1 634 2 view .LVU1115
 631:src/xeq.c     **** 	decContext ctx64;
 4132              		.loc 1 631 59 is_stmt 0 view .LVU1116
 4133 0000 70B5     		push	{r4, r5, r6, lr}
 4134              		.cfi_def_cfa_offset 16
 4135              		.cfi_offset 4, -16
 4136              		.cfi_offset 5, -12
 4137              		.cfi_offset 6, -8
 4138              		.cfi_offset 14, -4
 4139 0002 86B0     		sub	sp, sp, #24
 4140              		.cfi_def_cfa_offset 40
 631:src/xeq.c     **** 	decContext ctx64;
 4141              		.loc 1 631 59 view .LVU1117
 4142 0004 0446     		mov	r4, r0
 4143 0006 0D46     		mov	r5, r1
 634:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4144              		.loc 1 634 2 view .LVU1118
 4145 0008 6846     		mov	r0, sp
 4146              	.LVL315:
ARM GAS  /tmp/ccqED0AM.s 			page 192


 634:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4147              		.loc 1 634 2 view .LVU1119
 4148 000a 4021     		movs	r1, #64
 4149              	.LVL316:
 634:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4150              		.loc 1 634 2 view .LVU1120
 4151 000c FFF7FEFF 		bl	decContextDefault
 4152              	.LVL317:
 635:src/xeq.c     **** 	decimal64FromNumber(r, x, &ctx64);
 4153              		.loc 1 635 2 is_stmt 1 view .LVU1121
 4154              	.LBB1608:
 4155              	.LBI1608:
 610:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 4156              		.loc 1 610 22 view .LVU1122
 4157              	.LBB1609:
 611:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 4158              		.loc 1 611 2 view .LVU1123
 616:src/xeq.c     **** }
 4159              		.loc 1 616 2 view .LVU1124
 616:src/xeq.c     **** }
 4160              		.loc 1 616 37 is_stmt 0 view .LVU1125
 4161 0010 084B     		ldr	r3, .L340
 616:src/xeq.c     **** }
 4162              		.loc 1 616 9 view .LVU1126
 4163 0012 094E     		ldr	r6, .L340+4
 616:src/xeq.c     **** }
 4164              		.loc 1 616 37 view .LVU1127
 4165 0014 1B68     		ldr	r3, [r3]
 4166 0016 93F8EB37 		ldrb	r3, [r3, #2027]	@ zero_extendqisi2
 4167 001a C3F30213 		ubfx	r3, r3, #4, #3
 4168              	.LBE1609:
 4169              	.LBE1608:
 636:src/xeq.c     **** }
 4170              		.loc 1 636 2 view .LVU1128
 4171 001e 2946     		mov	r1, r5
 635:src/xeq.c     **** 	decimal64FromNumber(r, x, &ctx64);
 4172              		.loc 1 635 14 view .LVU1129
 4173 0020 F35C     		ldrb	r3, [r6, r3]	@ zero_extendqisi2
 4174 0022 8DF80C30 		strb	r3, [sp, #12]
 636:src/xeq.c     **** }
 4175              		.loc 1 636 2 is_stmt 1 view .LVU1130
 4176 0026 2046     		mov	r0, r4
 4177 0028 6A46     		mov	r2, sp
 4178 002a FFF7FEFF 		bl	decimal64FromNumber
 4179              	.LVL318:
 637:src/xeq.c     **** 
 4180              		.loc 1 637 1 is_stmt 0 view .LVU1131
 4181 002e 06B0     		add	sp, sp, #24
 4182              		.cfi_def_cfa_offset 16
 4183              		@ sp needed
 4184 0030 70BD     		pop	{r4, r5, r6, pc}
 4185              	.LVL319:
 4186              	.L341:
 637:src/xeq.c     **** 
 4187              		.loc 1 637 1 view .LVU1132
 4188 0032 00BF     		.align	2
 4189              	.L340:
ARM GAS  /tmp/ccqED0AM.s 			page 193


 4190 0034 00000000 		.word	main_ram
 4191 0038 00000000 		.word	.LANCHOR1
 4192              		.cfi_endproc
 4193              	.LFE36:
 4195              		.section	.text.packed128_from_number,"ax",%progbits
 4196              		.align	1
 4197              		.p2align 2,,3
 4198              		.global	packed128_from_number
 4199              		.syntax unified
 4200              		.thumb
 4201              		.thumb_func
 4202              		.fpu fpv4-sp-d16
 4204              	packed128_from_number:
 4205              	.LVL320:
 4206              	.LFB37:
 639:src/xeq.c     **** 	decContext ctx128;
 4207              		.loc 1 639 63 is_stmt 1 view -0
 4208              		.cfi_startproc
 4209              		@ args = 0, pretend = 0, frame = 24
 4210              		@ frame_needed = 0, uses_anonymous_args = 0
 640:src/xeq.c     **** 
 4211              		.loc 1 640 2 view .LVU1134
 642:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4212              		.loc 1 642 2 view .LVU1135
 639:src/xeq.c     **** 	decContext ctx128;
 4213              		.loc 1 639 63 is_stmt 0 view .LVU1136
 4214 0000 70B5     		push	{r4, r5, r6, lr}
 4215              		.cfi_def_cfa_offset 16
 4216              		.cfi_offset 4, -16
 4217              		.cfi_offset 5, -12
 4218              		.cfi_offset 6, -8
 4219              		.cfi_offset 14, -4
 4220 0002 86B0     		sub	sp, sp, #24
 4221              		.cfi_def_cfa_offset 40
 639:src/xeq.c     **** 	decContext ctx128;
 4222              		.loc 1 639 63 view .LVU1137
 4223 0004 0446     		mov	r4, r0
 4224 0006 0D46     		mov	r5, r1
 642:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4225              		.loc 1 642 2 view .LVU1138
 4226 0008 6846     		mov	r0, sp
 4227              	.LVL321:
 642:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4228              		.loc 1 642 2 view .LVU1139
 4229 000a 8021     		movs	r1, #128
 4230              	.LVL322:
 642:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4231              		.loc 1 642 2 view .LVU1140
 4232 000c FFF7FEFF 		bl	decContextDefault
 4233              	.LVL323:
 643:src/xeq.c     **** 	decimal128FromNumber(r, x, &ctx128);
 4234              		.loc 1 643 2 is_stmt 1 view .LVU1141
 4235              	.LBB1610:
 4236              	.LBI1610:
 610:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 4237              		.loc 1 610 22 view .LVU1142
 4238              	.LBB1611:
ARM GAS  /tmp/ccqED0AM.s 			page 194


 611:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 4239              		.loc 1 611 2 view .LVU1143
 616:src/xeq.c     **** }
 4240              		.loc 1 616 2 view .LVU1144
 616:src/xeq.c     **** }
 4241              		.loc 1 616 37 is_stmt 0 view .LVU1145
 4242 0010 084B     		ldr	r3, .L344
 616:src/xeq.c     **** }
 4243              		.loc 1 616 9 view .LVU1146
 4244 0012 094E     		ldr	r6, .L344+4
 616:src/xeq.c     **** }
 4245              		.loc 1 616 37 view .LVU1147
 4246 0014 1B68     		ldr	r3, [r3]
 4247 0016 93F8EB37 		ldrb	r3, [r3, #2027]	@ zero_extendqisi2
 4248 001a C3F30213 		ubfx	r3, r3, #4, #3
 4249              	.LBE1611:
 4250              	.LBE1610:
 644:src/xeq.c     **** }
 4251              		.loc 1 644 2 view .LVU1148
 4252 001e 2946     		mov	r1, r5
 643:src/xeq.c     **** 	decimal128FromNumber(r, x, &ctx128);
 4253              		.loc 1 643 15 view .LVU1149
 4254 0020 F35C     		ldrb	r3, [r6, r3]	@ zero_extendqisi2
 4255 0022 8DF80C30 		strb	r3, [sp, #12]
 644:src/xeq.c     **** }
 4256              		.loc 1 644 2 is_stmt 1 view .LVU1150
 4257 0026 2046     		mov	r0, r4
 4258 0028 6A46     		mov	r2, sp
 4259 002a FFF7FEFF 		bl	decimal128FromNumber
 4260              	.LVL324:
 645:src/xeq.c     **** 
 4261              		.loc 1 645 1 is_stmt 0 view .LVU1151
 4262 002e 06B0     		add	sp, sp, #24
 4263              		.cfi_def_cfa_offset 16
 4264              		@ sp needed
 4265 0030 70BD     		pop	{r4, r5, r6, pc}
 4266              	.LVL325:
 4267              	.L345:
 645:src/xeq.c     **** 
 4268              		.loc 1 645 1 view .LVU1152
 4269 0032 00BF     		.align	2
 4270              	.L344:
 4271 0034 00000000 		.word	main_ram
 4272 0038 00000000 		.word	.LANCHOR1
 4273              		.cfi_endproc
 4274              	.LFE37:
 4276              		.section	.text.check_special,"ax",%progbits
 4277              		.align	1
 4278              		.p2align 2,,3
 4279              		.syntax unified
 4280              		.thumb
 4281              		.thumb_func
 4282              		.fpu fpv4-sp-d16
 4284              	check_special:
 4285              	.LVL326:
 4286              	.LFB41:
 684:src/xeq.c     **** 	decNumber y;
ARM GAS  /tmp/ccqED0AM.s 			page 195


 4287              		.loc 1 684 46 is_stmt 1 view -0
 4288              		.cfi_startproc
 4289              		@ args = 0, pretend = 0, frame = 64
 4290              		@ frame_needed = 0, uses_anonymous_args = 0
 685:src/xeq.c     **** 	decimal64 z;
 4291              		.loc 1 685 2 view .LVU1154
 686:src/xeq.c     **** 	decimal128 d;
 4292              		.loc 1 686 2 view .LVU1155
 687:src/xeq.c     **** 	if (is_dblmode()) {
 4293              		.loc 1 687 2 view .LVU1156
 688:src/xeq.c     **** 		packed128_from_number(&d, x);
 4294              		.loc 1 688 2 view .LVU1157
 4295              	.LBB1628:
 4296              	.LBI1628:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4297              		.loc 1 1118 5 view .LVU1158
 4298              	.LBB1629:
1119:src/xeq.c     **** }
 4299              		.loc 1 1119 2 view .LVU1159
1119:src/xeq.c     **** }
 4300              		.loc 1 1119 24 is_stmt 0 view .LVU1160
 4301 0000 274B     		ldr	r3, .L360
 4302 0002 1B68     		ldr	r3, [r3]
 4303              	.LBE1629:
 4304              	.LBE1628:
 684:src/xeq.c     **** 	decNumber y;
 4305              		.loc 1 684 46 view .LVU1161
 4306 0004 00B5     		push	{lr}
 4307              		.cfi_def_cfa_offset 4
 4308              		.cfi_offset 14, -4
 4309              	.LBB1631:
 4310              	.LBB1630:
1119:src/xeq.c     **** }
 4311              		.loc 1 1119 24 view .LVU1162
 4312 0006 B3F8E827 		ldrh	r2, [r3, #2024]
 4313 000a 44F20103 		movw	r3, #16385
 4314              	.LBE1630:
 4315              	.LBE1631:
 688:src/xeq.c     **** 		packed128_from_number(&d, x);
 4316              		.loc 1 688 5 view .LVU1163
 4317 000e 1340     		ands	r3, r3, r2
 4318 0010 B3F5804F 		cmp	r3, #16384
 684:src/xeq.c     **** 	decNumber y;
 4319              		.loc 1 684 46 view .LVU1164
 4320 0014 91B0     		sub	sp, sp, #68
 4321              		.cfi_def_cfa_offset 72
 684:src/xeq.c     **** 	decNumber y;
 4322              		.loc 1 684 46 view .LVU1165
 4323 0016 0146     		mov	r1, r0
 688:src/xeq.c     **** 		packed128_from_number(&d, x);
 4324              		.loc 1 688 5 view .LVU1166
 4325 0018 0FD0     		beq	.L358
 694:src/xeq.c     **** 		decimal64ToNumber(&z, &y);
 4326              		.loc 1 694 3 is_stmt 1 view .LVU1167
 4327 001a 01A8     		add	r0, sp, #4
 4328              	.LVL327:
 694:src/xeq.c     **** 		decimal64ToNumber(&z, &y);
ARM GAS  /tmp/ccqED0AM.s 			page 196


 4329              		.loc 1 694 3 is_stmt 0 view .LVU1168
 4330 001c FFF7FEFF 		bl	packed_from_number
 4331              	.LVL328:
 695:src/xeq.c     **** 	}
 4332              		.loc 1 695 3 is_stmt 1 view .LVU1169
 4333 0020 01A8     		add	r0, sp, #4
 4334 0022 07A9     		add	r1, sp, #28
 4335 0024 FFF7FEFF 		bl	decimal64ToNumber
 4336              	.LVL329:
 697:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4337              		.loc 1 697 2 view .LVU1170
 697:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4338              		.loc 1 697 5 is_stmt 0 view .LVU1171
 4339 0028 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 4340 002c 13F0700F 		tst	r3, #112
 4341 0030 0FD1     		bne	.L349
 4342              	.L351:
 708:src/xeq.c     **** }
 4343              		.loc 1 708 9 view .LVU1172
 4344 0032 0020     		movs	r0, #0
 4345              	.L346:
 709:src/xeq.c     **** 
 4346              		.loc 1 709 1 view .LVU1173
 4347 0034 11B0     		add	sp, sp, #68
 4348              		.cfi_remember_state
 4349              		.cfi_def_cfa_offset 4
 4350              		@ sp needed
 4351 0036 5DF804FB 		ldr	pc, [sp], #4
 4352              	.LVL330:
 4353              	.L358:
 4354              		.cfi_restore_state
 689:src/xeq.c     **** 		decimal128ToNumber(&d, &y);
 4355              		.loc 1 689 3 is_stmt 1 view .LVU1174
 4356 003a 03A8     		add	r0, sp, #12
 4357              	.LVL331:
 689:src/xeq.c     **** 		decimal128ToNumber(&d, &y);
 4358              		.loc 1 689 3 is_stmt 0 view .LVU1175
 4359 003c FFF7FEFF 		bl	packed128_from_number
 4360              	.LVL332:
 690:src/xeq.c     **** 	}
 4361              		.loc 1 690 3 is_stmt 1 view .LVU1176
 4362 0040 03A8     		add	r0, sp, #12
 4363 0042 07A9     		add	r1, sp, #28
 4364 0044 FFF7FEFF 		bl	decimal128ToNumber
 4365              	.LVL333:
 697:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4366              		.loc 1 697 2 view .LVU1177
 697:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4367              		.loc 1 697 5 is_stmt 0 view .LVU1178
 4368 0048 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 4369 004c 13F0700F 		tst	r3, #112
 4370 0050 EFD0     		beq	.L351
 4371              	.L349:
 698:src/xeq.c     **** 			if (decNumberIsNaN(&y))
 4372              		.loc 1 698 3 is_stmt 1 view .LVU1179
 4373              	.LVL334:
 4374              	.LBB1632:
ARM GAS  /tmp/ccqED0AM.s 			page 197


 4375              	.LBI1632:
3556:src/xeq.c     **** 	unsigned short mask;
 4376              		.loc 1 3556 5 view .LVU1180
 4377              	.LBB1633:
3557:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
 4378              		.loc 1 3557 2 view .LVU1181
3558:src/xeq.c     **** 
 4379              		.loc 1 3558 2 view .LVU1182
3558:src/xeq.c     **** 
 4380              		.loc 1 3558 34 is_stmt 0 view .LVU1183
 4381 0052 0DF10201 		add	r1, sp, #2
 4382 0056 6B20     		movs	r0, #107
 4383 0058 FFF7FEFF 		bl	flag_word
 4384              	.LVL335:
3560:src/xeq.c     **** }
 4385              		.loc 1 3560 2 is_stmt 1 view .LVU1184
3560:src/xeq.c     **** }
 4386              		.loc 1 3560 24 is_stmt 0 view .LVU1185
 4387 005c BDF80230 		ldrh	r3, [sp, #2]
 4388 0060 0288     		ldrh	r2, [r0]
 4389              	.LBE1633:
 4390              	.LBE1632:
 698:src/xeq.c     **** 			if (decNumberIsNaN(&y))
 4391              		.loc 1 698 6 view .LVU1186
 4392 0062 1A42     		tst	r2, r3
 4393 0064 E5D1     		bne	.L351
 699:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 4394              		.loc 1 699 4 is_stmt 1 view .LVU1187
 699:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 4395              		.loc 1 699 8 is_stmt 0 view .LVU1188
 4396 0066 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 699:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 4397              		.loc 1 699 7 view .LVU1189
 4398 006a 13F0300F 		tst	r3, #48
 4399 006e 06D0     		beq	.L352
 700:src/xeq.c     **** 			else if (decNumberIsNegative(&y))
 4400              		.loc 1 700 5 is_stmt 1 view .LVU1190
 4401              	.LVL336:
 4402              	.LBB1634:
 4403              	.LBI1634:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4404              		.loc 1 546 5 view .LVU1191
 4405              	.LBB1635:
 547:src/xeq.c     **** 		Error = e;
 4406              		.loc 1 547 2 view .LVU1192
 547:src/xeq.c     **** 		Error = e;
 4407              		.loc 1 547 12 is_stmt 0 view .LVU1193
 4408 0070 0C4B     		ldr	r3, .L360+4
 547:src/xeq.c     **** 		Error = e;
 4409              		.loc 1 547 5 view .LVU1194
 4410 0072 1A68     		ldr	r2, [r3]
 4411              	.LBB1636:
 4412              	.LBB1637:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 4413              		.loc 1 548 9 view .LVU1195
 4414 0074 0120     		movs	r0, #1
 4415              	.LBE1637:
ARM GAS  /tmp/ccqED0AM.s 			page 198


 4416              	.LBE1636:
 547:src/xeq.c     **** 		Error = e;
 4417              		.loc 1 547 5 view .LVU1196
 4418 0076 002A     		cmp	r2, #0
 4419 0078 DCD1     		bne	.L346
 4420              	.LVL337:
 4421              	.LBB1639:
 4422              	.LBI1636:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4423              		.loc 1 546 5 is_stmt 1 view .LVU1197
 4424              	.LBB1638:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 4425              		.loc 1 548 3 view .LVU1198
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 4426              		.loc 1 548 9 is_stmt 0 view .LVU1199
 4427 007a 1860     		str	r0, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 4428              		.loc 1 549 3 is_stmt 1 view .LVU1200
 4429 007c DAE7     		b	.L346
 4430              	.LVL338:
 4431              	.L352:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 4432              		.loc 1 549 3 is_stmt 0 view .LVU1201
 4433              	.LBE1638:
 4434              	.LBE1639:
 4435              	.LBE1635:
 4436              	.LBE1634:
 701:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 4437              		.loc 1 701 9 is_stmt 1 view .LVU1202
 701:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 4438              		.loc 1 701 12 is_stmt 0 view .LVU1203
 4439 007e 13F0800F 		tst	r3, #128
 4440              	.LBB1640:
 4441              	.LBB1641:
 547:src/xeq.c     **** 		Error = e;
 4442              		.loc 1 547 12 view .LVU1204
 4443 0082 084B     		ldr	r3, .L360+4
 547:src/xeq.c     **** 		Error = e;
 4444              		.loc 1 547 5 view .LVU1205
 4445 0084 1A68     		ldr	r2, [r3]
 4446              	.LBE1641:
 4447              	.LBE1640:
 701:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 4448              		.loc 1 701 12 view .LVU1206
 4449 0086 04D1     		bne	.L359
 704:src/xeq.c     **** 			return 1;
 4450              		.loc 1 704 5 is_stmt 1 view .LVU1207
 4451              	.LVL339:
 4452              	.LBB1645:
 4453              	.LBI1645:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4454              		.loc 1 546 5 view .LVU1208
 4455              	.LBB1646:
 547:src/xeq.c     **** 		Error = e;
 4456              		.loc 1 547 2 view .LVU1209
 547:src/xeq.c     **** 		Error = e;
 4457              		.loc 1 547 5 is_stmt 0 view .LVU1210
ARM GAS  /tmp/ccqED0AM.s 			page 199


 4458 0088 42B9     		cbnz	r2, .L356
 4459              	.LVL340:
 4460              	.LBB1647:
 4461              	.LBI1647:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4462              		.loc 1 546 5 is_stmt 1 view .LVU1211
 4463              	.LBB1648:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 4464              		.loc 1 548 3 view .LVU1212
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 4465              		.loc 1 548 9 is_stmt 0 view .LVU1213
 4466 008a 0422     		movs	r2, #4
 4467 008c 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 4468              		.loc 1 549 3 is_stmt 1 view .LVU1214
 4469              	.LBE1648:
 4470              	.LBE1647:
 4471              	.LBE1646:
 4472              	.LBE1645:
 705:src/xeq.c     **** 		}
 4473              		.loc 1 705 11 is_stmt 0 view .LVU1215
 4474 008e 0120     		movs	r0, #1
 4475 0090 D0E7     		b	.L346
 4476              	.LVL341:
 4477              	.L359:
 702:src/xeq.c     **** 			else
 4478              		.loc 1 702 5 is_stmt 1 view .LVU1216
 4479              	.LBB1649:
 4480              	.LBI1640:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4481              		.loc 1 546 5 view .LVU1217
 4482              	.LBB1644:
 547:src/xeq.c     **** 		Error = e;
 4483              		.loc 1 547 2 view .LVU1218
 547:src/xeq.c     **** 		Error = e;
 4484              		.loc 1 547 5 is_stmt 0 view .LVU1219
 4485 0092 1AB9     		cbnz	r2, .L356
 4486              	.LVL342:
 4487              	.LBB1642:
 4488              	.LBI1642:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4489              		.loc 1 546 5 is_stmt 1 view .LVU1220
 4490              	.LBB1643:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 4491              		.loc 1 548 3 view .LVU1221
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 4492              		.loc 1 548 9 is_stmt 0 view .LVU1222
 4493 0094 0522     		movs	r2, #5
 4494 0096 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 4495              		.loc 1 549 3 is_stmt 1 view .LVU1223
 4496              	.LBE1643:
 4497              	.LBE1642:
 4498              	.LBE1644:
 4499              	.LBE1649:
 705:src/xeq.c     **** 		}
 4500              		.loc 1 705 11 is_stmt 0 view .LVU1224
ARM GAS  /tmp/ccqED0AM.s 			page 200


 4501 0098 0120     		movs	r0, #1
 4502 009a CBE7     		b	.L346
 4503              	.LVL343:
 4504              	.L356:
 705:src/xeq.c     **** 		}
 4505              		.loc 1 705 11 view .LVU1225
 4506 009c 0120     		movs	r0, #1
 4507 009e C9E7     		b	.L346
 4508              	.L361:
 4509              		.align	2
 4510              	.L360:
 4511 00a0 00000000 		.word	main_ram
 4512 00a4 00000000 		.word	Error
 4513              		.cfi_endproc
 4514              	.LFE41:
 4516              		.section	.text.packed_from_packed128,"ax",%progbits
 4517              		.align	1
 4518              		.p2align 2,,3
 4519              		.global	packed_from_packed128
 4520              		.syntax unified
 4521              		.thumb
 4522              		.thumb_func
 4523              		.fpu fpv4-sp-d16
 4525              	packed_from_packed128:
 4526              	.LVL344:
 4527              	.LFB38:
 648:src/xeq.c     **** 	decNumber temp;
 4528              		.loc 1 648 63 is_stmt 1 view -0
 4529              		.cfi_startproc
 4530              		@ args = 0, pretend = 0, frame = 40
 4531              		@ frame_needed = 0, uses_anonymous_args = 0
 649:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 4532              		.loc 1 649 2 view .LVU1227
 650:src/xeq.c     **** }
 4533              		.loc 1 650 2 view .LVU1228
 648:src/xeq.c     **** 	decNumber temp;
 4534              		.loc 1 648 63 is_stmt 0 view .LVU1229
 4535 0000 10B5     		push	{r4, lr}
 4536              		.cfi_def_cfa_offset 8
 4537              		.cfi_offset 4, -8
 4538              		.cfi_offset 14, -4
 4539 0002 8AB0     		sub	sp, sp, #40
 4540              		.cfi_def_cfa_offset 48
 648:src/xeq.c     **** 	decNumber temp;
 4541              		.loc 1 648 63 view .LVU1230
 4542 0004 0446     		mov	r4, r0
 650:src/xeq.c     **** }
 4543              		.loc 1 650 24 view .LVU1231
 4544 0006 0846     		mov	r0, r1
 4545              	.LVL345:
 650:src/xeq.c     **** }
 4546              		.loc 1 650 24 view .LVU1232
 4547 0008 01A9     		add	r1, sp, #4
 4548              	.LVL346:
 650:src/xeq.c     **** }
 4549              		.loc 1 650 24 view .LVU1233
 4550 000a FFF7FEFF 		bl	decimal128ToNumber
ARM GAS  /tmp/ccqED0AM.s 			page 201


 4551              	.LVL347:
 650:src/xeq.c     **** }
 4552              		.loc 1 650 24 view .LVU1234
 4553 000e 0146     		mov	r1, r0
 650:src/xeq.c     **** }
 4554              		.loc 1 650 2 view .LVU1235
 4555 0010 2046     		mov	r0, r4
 4556 0012 FFF7FEFF 		bl	packed_from_number
 4557              	.LVL348:
 651:src/xeq.c     **** 
 4558              		.loc 1 651 1 view .LVU1236
 4559 0016 0AB0     		add	sp, sp, #40
 4560              		.cfi_def_cfa_offset 8
 4561              		@ sp needed
 4562 0018 10BD     		pop	{r4, pc}
 651:src/xeq.c     **** 
 4563              		.loc 1 651 1 view .LVU1237
 4564              		.cfi_endproc
 4565              	.LFE38:
 4567 001a 00BF     		.section	.text.packed128_from_packed,"ax",%progbits
 4568              		.align	1
 4569              		.p2align 2,,3
 4570              		.global	packed128_from_packed
 4571              		.syntax unified
 4572              		.thumb
 4573              		.thumb_func
 4574              		.fpu fpv4-sp-d16
 4576              	packed128_from_packed:
 4577              	.LVL349:
 4578              	.LFB39:
 654:src/xeq.c     **** 	decNumber temp;
 4579              		.loc 1 654 63 is_stmt 1 view -0
 4580              		.cfi_startproc
 4581              		@ args = 0, pretend = 0, frame = 40
 4582              		@ frame_needed = 0, uses_anonymous_args = 0
 655:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 4583              		.loc 1 655 2 view .LVU1239
 656:src/xeq.c     **** }
 4584              		.loc 1 656 2 view .LVU1240
 654:src/xeq.c     **** 	decNumber temp;
 4585              		.loc 1 654 63 is_stmt 0 view .LVU1241
 4586 0000 10B5     		push	{r4, lr}
 4587              		.cfi_def_cfa_offset 8
 4588              		.cfi_offset 4, -8
 4589              		.cfi_offset 14, -4
 4590 0002 8AB0     		sub	sp, sp, #40
 4591              		.cfi_def_cfa_offset 48
 654:src/xeq.c     **** 	decNumber temp;
 4592              		.loc 1 654 63 view .LVU1242
 4593 0004 0446     		mov	r4, r0
 656:src/xeq.c     **** }
 4594              		.loc 1 656 27 view .LVU1243
 4595 0006 0846     		mov	r0, r1
 4596              	.LVL350:
 656:src/xeq.c     **** }
 4597              		.loc 1 656 27 view .LVU1244
 4598 0008 01A9     		add	r1, sp, #4
ARM GAS  /tmp/ccqED0AM.s 			page 202


 4599              	.LVL351:
 656:src/xeq.c     **** }
 4600              		.loc 1 656 27 view .LVU1245
 4601 000a FFF7FEFF 		bl	decimal64ToNumber
 4602              	.LVL352:
 656:src/xeq.c     **** }
 4603              		.loc 1 656 27 view .LVU1246
 4604 000e 0146     		mov	r1, r0
 656:src/xeq.c     **** }
 4605              		.loc 1 656 2 view .LVU1247
 4606 0010 2046     		mov	r0, r4
 4607 0012 FFF7FEFF 		bl	packed128_from_number
 4608              	.LVL353:
 657:src/xeq.c     **** 
 4609              		.loc 1 657 1 view .LVU1248
 4610 0016 0AB0     		add	sp, sp, #40
 4611              		.cfi_def_cfa_offset 8
 4612              		@ sp needed
 4613 0018 10BD     		pop	{r4, pc}
 657:src/xeq.c     **** 
 4614              		.loc 1 657 1 view .LVU1249
 4615              		.cfi_endproc
 4616              	.LFE39:
 4618 001a 00BF     		.section	.text.stack_size,"ax",%progbits
 4619              		.align	1
 4620              		.p2align 2,,3
 4621              		.global	stack_size
 4622              		.syntax unified
 4623              		.thumb
 4624              		.thumb_func
 4625              		.fpu fpv4-sp-d16
 4627              	stack_size:
 4628              	.LFB42:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 4629              		.loc 1 712 22 is_stmt 1 view -0
 4630              		.cfi_startproc
 4631              		@ args = 0, pretend = 0, frame = 0
 4632              		@ frame_needed = 0, uses_anonymous_args = 0
 4633              		@ link register save eliminated.
 713:src/xeq.c     **** 		return 4;
 4634              		.loc 1 713 2 view .LVU1251
 713:src/xeq.c     **** 		return 4;
 4635              		.loc 1 713 8 is_stmt 0 view .LVU1252
 4636 0000 0B4B     		ldr	r3, .L372
 4637 0002 1B68     		ldr	r3, [r3]
 713:src/xeq.c     **** 		return 4;
 4638              		.loc 1 713 6 view .LVU1253
 4639 0004 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 4640              		.loc 1 713 5 view .LVU1254
 4641 0008 1207     		lsls	r2, r2, #28
 4642 000a 0ED5     		bpl	.L368
 4643              	.LBB1650:
 4644              	.LBI1650:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 4645              		.loc 1 185 5 is_stmt 1 view .LVU1255
 4646              	.LBB1651:
ARM GAS  /tmp/ccqED0AM.s 			page 203


 186:src/xeq.c     **** }
 4647              		.loc 1 186 2 view .LVU1256
 186:src/xeq.c     **** }
 4648              		.loc 1 186 9 is_stmt 0 view .LVU1257
 4649 000c B3F8E037 		ldrh	r3, [r3, #2016]
 4650              	.LBE1651:
 4651              	.LBE1650:
 713:src/xeq.c     **** 		return 4;
 4652              		.loc 1 713 27 view .LVU1258
 4653 0010 9B0B     		lsrs	r3, r3, #14
 4654 0012 032B     		cmp	r3, #3
 4655 0014 01D0     		beq	.L371
 715:src/xeq.c     **** }
 4656              		.loc 1 715 9 view .LVU1259
 4657 0016 0820     		movs	r0, #8
 716:src/xeq.c     **** 
 4658              		.loc 1 716 1 view .LVU1260
 4659 0018 7047     		bx	lr
 4660              	.L371:
 713:src/xeq.c     **** 		return 4;
 4661              		.loc 1 713 44 discriminator 2 view .LVU1261
 4662 001a 064B     		ldr	r3, .L372+4
 713:src/xeq.c     **** 		return 4;
 4663              		.loc 1 713 41 discriminator 2 view .LVU1262
 4664 001c 93F90130 		ldrsb	r3, [r3, #1]
 4665 0020 002B     		cmp	r3, #0
 714:src/xeq.c     **** 	return 8;
 4666              		.loc 1 714 10 discriminator 2 view .LVU1263
 4667 0022 B4BF     		ite	lt
 4668 0024 0820     		movlt	r0, #8
 4669 0026 0420     		movge	r0, #4
 4670 0028 7047     		bx	lr
 4671              	.L368:
 714:src/xeq.c     **** 	return 8;
 4672              		.loc 1 714 10 view .LVU1264
 4673 002a 0420     		movs	r0, #4
 4674 002c 7047     		bx	lr
 4675              	.L373:
 4676 002e 00BF     		.align	2
 4677              	.L372:
 4678 0030 00000000 		.word	main_ram
 4679 0034 00000000 		.word	XromParams
 4680              		.cfi_endproc
 4681              	.LFE42:
 4683              		.section	.text.copyreg,"ax",%progbits
 4684              		.align	1
 4685              		.p2align 2,,3
 4686              		.global	copyreg
 4687              		.syntax unified
 4688              		.thumb
 4689              		.thumb_func
 4690              		.fpu fpv4-sp-d16
 4692              	copyreg:
 4693              	.LVL354:
 4694              	.LFB45:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 4695              		.loc 1 726 46 is_stmt 1 view -0
ARM GAS  /tmp/ccqED0AM.s 			page 204


 4696              		.cfi_startproc
 4697              		@ args = 0, pretend = 0, frame = 0
 4698              		@ frame_needed = 0, uses_anonymous_args = 0
 4699              		@ link register save eliminated.
 727:src/xeq.c     **** }
 4700              		.loc 1 727 2 view .LVU1266
 4701              	.LBB1652:
 4702              	.LBI1652:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4703              		.loc 1 1118 5 view .LVU1267
 4704              	.LBB1653:
1119:src/xeq.c     **** }
 4705              		.loc 1 1119 2 view .LVU1268
1119:src/xeq.c     **** }
 4706              		.loc 1 1119 24 is_stmt 0 view .LVU1269
 4707 0000 064B     		ldr	r3, .L377
 4708 0002 1B68     		ldr	r3, [r3]
 4709 0004 B3F8E827 		ldrh	r2, [r3, #2024]
 4710 0008 44F20103 		movw	r3, #16385
 4711              	.LBE1653:
 4712              	.LBE1652:
 727:src/xeq.c     **** }
 4713              		.loc 1 727 2 view .LVU1270
 4714 000c 1340     		ands	r3, r3, r2
 4715 000e B3F5804F 		cmp	r3, #16384
 4716 0012 0CBF     		ite	eq
 4717 0014 1022     		moveq	r2, #16
 4718 0016 0822     		movne	r2, #8
 4719 0018 FFF7FEBF 		b	xcopy
 4720              	.LVL355:
 4721              	.L378:
 727:src/xeq.c     **** }
 4722              		.loc 1 727 2 view .LVU1271
 4723              		.align	2
 4724              	.L377:
 4725 001c 00000000 		.word	main_ram
 4726              		.cfi_endproc
 4727              	.LFE45:
 4729              		.section	.text.set_lift,"ax",%progbits
 4730              		.align	1
 4731              		.p2align 2,,3
 4732              		.global	set_lift
 4733              		.syntax unified
 4734              		.thumb
 4735              		.thumb_func
 4736              		.fpu fpv4-sp-d16
 4738              	set_lift:
 4739              	.LFB51:
 767:src/xeq.c     ****     State2.state_lift = 1;
 4740              		.loc 1 767 21 is_stmt 1 view -0
 4741              		.cfi_startproc
 4742              		@ args = 0, pretend = 0, frame = 0
 4743              		@ frame_needed = 0, uses_anonymous_args = 0
 4744              		@ link register save eliminated.
 768:src/xeq.c     **** }
 4745              		.loc 1 768 5 view .LVU1273
 768:src/xeq.c     **** }
ARM GAS  /tmp/ccqED0AM.s 			page 205


 4746              		.loc 1 768 23 is_stmt 0 view .LVU1274
 4747 0000 024A     		ldr	r2, .L380
 4748 0002 D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 4749 0004 43F04003 		orr	r3, r3, #64
 4750 0008 D375     		strb	r3, [r2, #23]
 769:src/xeq.c     **** 
 4751              		.loc 1 769 1 view .LVU1275
 4752 000a 7047     		bx	lr
 4753              	.L381:
 4754              		.align	2
 4755              	.L380:
 4756 000c 00000000 		.word	StateWhileOn
 4757              		.cfi_endproc
 4758              	.LFE51:
 4760              		.section	.text.entry_rpn_on_off,"ax",%progbits
 4761              		.align	1
 4762              		.p2align 2,,3
 4763              		.global	entry_rpn_on_off
 4764              		.syntax unified
 4765              		.thumb
 4766              		.thumb_func
 4767              		.fpu fpv4-sp-d16
 4769              	entry_rpn_on_off:
 4770              	.LVL356:
 4771              	.LFB77:
 998:src/xeq.c     ****   switch (op) {
 4772              		.loc 1 998 38 is_stmt 1 view -0
 4773              		.cfi_startproc
 4774              		@ args = 0, pretend = 0, frame = 0
 4775              		@ frame_needed = 0, uses_anonymous_args = 0
 4776              		@ link register save eliminated.
 999:src/xeq.c     ****   case OP_ENTRY_ON:
 4777              		.loc 1 999 3 view .LVU1277
 4778 0000 D628     		cmp	r0, #214
 4779 0002 0BD0     		beq	.L383
 4780 0004 D728     		cmp	r0, #215
 4781 0006 08D1     		bne	.L386
1004:src/xeq.c     ****     return;
 4782              		.loc 1 1004 5 view .LVU1278
 4783 0008 094B     		ldr	r3, .L387
 4784 000a 1B68     		ldr	r3, [r3]
 4785 000c 93F8AD27 		ldrb	r2, [r3, #1965]	@ zero_extendqisi2
 4786 0010 6FF34102 		bfc	r2, #1, #1
 4787 0014 83F8AD27 		strb	r2, [r3, #1965]
1005:src/xeq.c     ****   default:;
 4788              		.loc 1 1005 5 view .LVU1279
1006:src/xeq.c     ****   }
 4789              		.loc 1 1006 11 view .LVU1280
1008:src/xeq.c     **** #endif
 4790              		.loc 1 1008 1 is_stmt 0 view .LVU1281
 4791 0018 7047     		bx	lr
 4792              	.L386:
 4793 001a 7047     		bx	lr
 4794              	.L383:
1001:src/xeq.c     ****     return;
 4795              		.loc 1 1001 5 is_stmt 1 view .LVU1282
 4796 001c 044B     		ldr	r3, .L387
ARM GAS  /tmp/ccqED0AM.s 			page 206


 4797 001e 1A68     		ldr	r2, [r3]
 4798 0020 92F8AD37 		ldrb	r3, [r2, #1965]	@ zero_extendqisi2
 4799 0024 43F00203 		orr	r3, r3, #2
 4800 0028 82F8AD37 		strb	r3, [r2, #1965]
1002:src/xeq.c     ****   case OP_ENTRY_OFF:
 4801              		.loc 1 1002 5 view .LVU1283
 4802 002c 7047     		bx	lr
 4803              	.L388:
 4804 002e 00BF     		.align	2
 4805              	.L387:
 4806 0030 00000000 		.word	main_ram
 4807              		.cfi_endproc
 4808              	.LFE77:
 4810              		.section	.text.is_dblmode,"ax",%progbits
 4811              		.align	1
 4812              		.p2align 2,,3
 4813              		.global	is_dblmode
 4814              		.syntax unified
 4815              		.thumb
 4816              		.thumb_func
 4817              		.fpu fpv4-sp-d16
 4819              	is_dblmode:
 4820              	.LFB82:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4821              		.loc 1 1118 22 view -0
 4822              		.cfi_startproc
 4823              		@ args = 0, pretend = 0, frame = 0
 4824              		@ frame_needed = 0, uses_anonymous_args = 0
 4825              		@ link register save eliminated.
1119:src/xeq.c     **** }
 4826              		.loc 1 1119 2 view .LVU1285
1119:src/xeq.c     **** }
 4827              		.loc 1 1119 24 is_stmt 0 view .LVU1286
 4828 0000 064B     		ldr	r3, .L390
 4829 0002 1B68     		ldr	r3, [r3]
 4830 0004 B3F8E837 		ldrh	r3, [r3, #2024]
 4831 0008 44F20100 		movw	r0, #16385
 4832 000c 1840     		ands	r0, r0, r3
1120:src/xeq.c     **** 
 4833              		.loc 1 1120 1 view .LVU1287
 4834 000e A0F58040 		sub	r0, r0, #16384
 4835 0012 B0FA80F0 		clz	r0, r0
 4836 0016 4009     		lsrs	r0, r0, #5
 4837 0018 7047     		bx	lr
 4838              	.L391:
 4839 001a 00BF     		.align	2
 4840              	.L390:
 4841 001c 00000000 		.word	main_ram
 4842              		.cfi_endproc
 4843              	.LFE82:
 4845              		.section	.text.is_usrdblmode,"ax",%progbits
 4846              		.align	1
 4847              		.p2align 2,,3
 4848              		.global	is_usrdblmode
 4849              		.syntax unified
 4850              		.thumb
 4851              		.thumb_func
ARM GAS  /tmp/ccqED0AM.s 			page 207


 4852              		.fpu fpv4-sp-d16
 4854              	is_usrdblmode:
 4855              	.LFB83:
1122:src/xeq.c     **** 	if (XromFlags.xIN)
 4856              		.loc 1 1122 25 is_stmt 1 view -0
 4857              		.cfi_startproc
 4858              		@ args = 0, pretend = 0, frame = 0
 4859              		@ frame_needed = 0, uses_anonymous_args = 0
 4860              		@ link register save eliminated.
1123:src/xeq.c     **** 		return XromFlags.mode_double;
 4861              		.loc 1 1123 2 view .LVU1289
1123:src/xeq.c     **** 		return XromFlags.mode_double;
 4862              		.loc 1 1123 6 is_stmt 0 view .LVU1290
 4863 0000 0A4B     		ldr	r3, .L396
1123:src/xeq.c     **** 		return XromFlags.mode_double;
 4864              		.loc 1 1123 5 view .LVU1291
 4865 0002 93F90120 		ldrsb	r2, [r3, #1]
 4866 0006 002A     		cmp	r2, #0
 4867 0008 0CDB     		blt	.L395
1125:src/xeq.c     **** }
 4868              		.loc 1 1125 2 is_stmt 1 view .LVU1292
 4869              	.LBB1654:
 4870              	.LBI1654:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4871              		.loc 1 1118 5 view .LVU1293
 4872              	.LBB1655:
1119:src/xeq.c     **** }
 4873              		.loc 1 1119 2 view .LVU1294
1119:src/xeq.c     **** }
 4874              		.loc 1 1119 24 is_stmt 0 view .LVU1295
 4875 000a 094B     		ldr	r3, .L396+4
 4876 000c 1B68     		ldr	r3, [r3]
 4877 000e B3F8E837 		ldrh	r3, [r3, #2024]
 4878 0012 44F20100 		movw	r0, #16385
 4879 0016 1840     		ands	r0, r0, r3
 4880 0018 A0F58040 		sub	r0, r0, #16384
 4881 001c B0FA80F0 		clz	r0, r0
 4882 0020 4009     		lsrs	r0, r0, #5
 4883              	.LBE1655:
 4884              	.LBE1654:
1126:src/xeq.c     **** 
 4885              		.loc 1 1126 1 view .LVU1296
 4886 0022 7047     		bx	lr
 4887              	.L395:
1124:src/xeq.c     **** 	return is_dblmode();
 4888              		.loc 1 1124 3 is_stmt 1 view .LVU1297
1124:src/xeq.c     **** 	return is_dblmode();
 4889              		.loc 1 1124 19 is_stmt 0 view .LVU1298
 4890 0024 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 4891 0026 C0F3C000 		ubfx	r0, r0, #3, #1
 4892 002a 7047     		bx	lr
 4893              	.L397:
 4894              		.align	2
 4895              	.L396:
 4896 002c 00000000 		.word	XromParams
 4897 0030 00000000 		.word	main_ram
 4898              		.cfi_endproc
ARM GAS  /tmp/ccqED0AM.s 			page 208


 4899              	.LFE83:
 4901              		.section	.text.s_to_i,"ax",%progbits
 4902              		.align	1
 4903              		.p2align 2,,3
 4904              		.global	s_to_i
 4905              		.syntax unified
 4906              		.thumb
 4907              		.thumb_func
 4908              		.fpu fpv4-sp-d16
 4910              	s_to_i:
 4911              	.LVL357:
 4912              	.LFB84:
1130:src/xeq.c     **** 	int x = 0;
 4913              		.loc 1 1130 27 is_stmt 1 view -0
 4914              		.cfi_startproc
 4915              		@ args = 0, pretend = 0, frame = 0
 4916              		@ frame_needed = 0, uses_anonymous_args = 0
 4917              		@ link register save eliminated.
1131:src/xeq.c     **** 	int neg;
 4918              		.loc 1 1131 2 view .LVU1300
1132:src/xeq.c     **** 
 4919              		.loc 1 1132 2 view .LVU1301
1134:src/xeq.c     **** 		s++;
 4920              		.loc 1 1134 2 view .LVU1302
1130:src/xeq.c     **** 	int x = 0;
 4921              		.loc 1 1130 27 is_stmt 0 view .LVU1303
 4922 0000 10B4     		push	{r4}
 4923              		.cfi_def_cfa_offset 4
 4924              		.cfi_offset 4, -4
1134:src/xeq.c     **** 		s++;
 4925              		.loc 1 1134 6 view .LVU1304
 4926 0002 0178     		ldrb	r1, [r0]	@ zero_extendqisi2
1134:src/xeq.c     **** 		s++;
 4927              		.loc 1 1134 5 view .LVU1305
 4928 0004 2D29     		cmp	r1, #45
 4929 0006 26D0     		beq	.L414
1138:src/xeq.c     **** 			s++;
 4930              		.loc 1 1138 3 is_stmt 1 view .LVU1306
1138:src/xeq.c     **** 			s++;
 4931              		.loc 1 1138 6 is_stmt 0 view .LVU1307
 4932 0008 2B29     		cmp	r1, #43
 4933 000a 18D0     		beq	.L402
 4934              	.LVL358:
1143:src/xeq.c     **** 		const char c = *s++;
 4935              		.loc 1 1143 2 is_stmt 1 view .LVU1308
 4936              	.LBB1656:
1144:src/xeq.c     **** 
 4937              		.loc 1 1144 3 view .LVU1309
1146:src/xeq.c     **** 			break;
 4938              		.loc 1 1146 15 is_stmt 0 view .LVU1310
 4939 000c A1F13003 		sub	r3, r1, #48
1146:src/xeq.c     **** 			break;
 4940              		.loc 1 1146 6 view .LVU1311
 4941 0010 D9B2     		uxtb	r1, r3
 4942 0012 0929     		cmp	r1, #9
1144:src/xeq.c     **** 
 4943              		.loc 1 1144 20 view .LVU1312
ARM GAS  /tmp/ccqED0AM.s 			page 209


 4944 0014 00F10102 		add	r2, r0, #1
 4945              	.LVL359:
1146:src/xeq.c     **** 			break;
 4946              		.loc 1 1146 3 is_stmt 1 view .LVU1313
1146:src/xeq.c     **** 			break;
 4947              		.loc 1 1146 6 is_stmt 0 view .LVU1314
 4948 0018 19D8     		bhi	.L407
 4949              	.LVL360:
 4950              	.L413:
1146:src/xeq.c     **** 			break;
 4951              		.loc 1 1146 6 view .LVU1315
 4952              	.LBE1656:
1140:src/xeq.c     **** 	}
 4953              		.loc 1 1140 7 view .LVU1316
 4954 001a 0024     		movs	r4, #0
 4955              	.LVL361:
 4956              	.L401:
1140:src/xeq.c     **** 	}
 4957              		.loc 1 1140 7 view .LVU1317
 4958 001c 0020     		movs	r0, #0
 4959              	.LVL362:
 4960              	.L404:
 4961              	.LBB1657:
1148:src/xeq.c     **** 	}
 4962              		.loc 1 1148 3 is_stmt 1 view .LVU1318
1144:src/xeq.c     **** 
 4963              		.loc 1 1144 14 is_stmt 0 view .LVU1319
 4964 001e 12F8011B 		ldrb	r1, [r2], #1	@ zero_extendqisi2
 4965              	.LVL363:
1148:src/xeq.c     **** 	}
 4966              		.loc 1 1148 10 view .LVU1320
 4967 0022 00EB8000 		add	r0, r0, r0, lsl #2
 4968              	.LVL364:
1148:src/xeq.c     **** 	}
 4969              		.loc 1 1148 5 view .LVU1321
 4970 0026 03EB4000 		add	r0, r3, r0, lsl #1
 4971              	.LVL365:
1148:src/xeq.c     **** 	}
 4972              		.loc 1 1148 5 view .LVU1322
 4973              	.LBE1657:
1143:src/xeq.c     **** 		const char c = *s++;
 4974              		.loc 1 1143 8 is_stmt 1 view .LVU1323
1143:src/xeq.c     **** 		const char c = *s++;
 4975              		.loc 1 1143 2 view .LVU1324
 4976              	.LBB1658:
1144:src/xeq.c     **** 
 4977              		.loc 1 1144 3 view .LVU1325
1146:src/xeq.c     **** 			break;
 4978              		.loc 1 1146 3 view .LVU1326
1146:src/xeq.c     **** 			break;
 4979              		.loc 1 1146 15 is_stmt 0 view .LVU1327
 4980 002a A1F13003 		sub	r3, r1, #48
1146:src/xeq.c     **** 			break;
 4981              		.loc 1 1146 6 view .LVU1328
 4982 002e D9B2     		uxtb	r1, r3
 4983 0030 0929     		cmp	r1, #9
 4984 0032 F4D9     		bls	.L404
ARM GAS  /tmp/ccqED0AM.s 			page 210


 4985              	.LBE1658:
1150:src/xeq.c     **** 		return -x;
 4986              		.loc 1 1150 2 is_stmt 1 view .LVU1329
1150:src/xeq.c     **** 		return -x;
 4987              		.loc 1 1150 5 is_stmt 0 view .LVU1330
 4988 0034 04B1     		cbz	r4, .L398
 4989 0036 4042     		rsbs	r0, r0, #0
 4990              	.LVL366:
 4991              	.L398:
1153:src/xeq.c     **** 
 4992              		.loc 1 1153 1 view .LVU1331
 4993 0038 5DF8044B 		ldr	r4, [sp], #4
 4994              		.cfi_remember_state
 4995              		.cfi_restore 4
 4996              		.cfi_def_cfa_offset 0
 4997 003c 7047     		bx	lr
 4998              	.LVL367:
 4999              	.L402:
 5000              		.cfi_restore_state
1139:src/xeq.c     **** 		neg = 0;
 5001              		.loc 1 1139 4 is_stmt 1 view .LVU1332
1143:src/xeq.c     **** 		const char c = *s++;
 5002              		.loc 1 1143 2 view .LVU1333
 5003              	.LBB1659:
1144:src/xeq.c     **** 
 5004              		.loc 1 1144 3 view .LVU1334
1144:src/xeq.c     **** 
 5005              		.loc 1 1144 14 is_stmt 0 view .LVU1335
 5006 003e 4178     		ldrb	r1, [r0, #1]	@ zero_extendqisi2
1146:src/xeq.c     **** 			break;
 5007              		.loc 1 1146 15 view .LVU1336
 5008 0040 A1F13003 		sub	r3, r1, #48
1146:src/xeq.c     **** 			break;
 5009              		.loc 1 1146 6 view .LVU1337
 5010 0044 D9B2     		uxtb	r1, r3
 5011 0046 0929     		cmp	r1, #9
1144:src/xeq.c     **** 
 5012              		.loc 1 1144 20 view .LVU1338
 5013 0048 00F10202 		add	r2, r0, #2
 5014              	.LVL368:
1146:src/xeq.c     **** 			break;
 5015              		.loc 1 1146 3 is_stmt 1 view .LVU1339
1146:src/xeq.c     **** 			break;
 5016              		.loc 1 1146 6 is_stmt 0 view .LVU1340
 5017 004c E5D9     		bls	.L413
 5018              	.LVL369:
 5019              	.L407:
1146:src/xeq.c     **** 			break;
 5020              		.loc 1 1146 6 view .LVU1341
 5021 004e 0020     		movs	r0, #0
 5022              	.LBE1659:
1153:src/xeq.c     **** 
 5023              		.loc 1 1153 1 view .LVU1342
 5024 0050 5DF8044B 		ldr	r4, [sp], #4
 5025              		.cfi_remember_state
 5026              		.cfi_restore 4
 5027              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccqED0AM.s 			page 211


 5028 0054 7047     		bx	lr
 5029              	.LVL370:
 5030              	.L414:
 5031              		.cfi_restore_state
1135:src/xeq.c     **** 		neg = 1;
 5032              		.loc 1 1135 3 is_stmt 1 view .LVU1343
1136:src/xeq.c     **** 	} else {
 5033              		.loc 1 1136 3 view .LVU1344
1143:src/xeq.c     **** 		const char c = *s++;
 5034              		.loc 1 1143 2 view .LVU1345
 5035              	.LBB1660:
1144:src/xeq.c     **** 
 5036              		.loc 1 1144 3 view .LVU1346
1144:src/xeq.c     **** 
 5037              		.loc 1 1144 14 is_stmt 0 view .LVU1347
 5038 0056 4178     		ldrb	r1, [r0, #1]	@ zero_extendqisi2
1146:src/xeq.c     **** 			break;
 5039              		.loc 1 1146 15 view .LVU1348
 5040 0058 A1F13003 		sub	r3, r1, #48
1146:src/xeq.c     **** 			break;
 5041              		.loc 1 1146 6 view .LVU1349
 5042 005c D9B2     		uxtb	r1, r3
 5043 005e 0929     		cmp	r1, #9
1144:src/xeq.c     **** 
 5044              		.loc 1 1144 20 view .LVU1350
 5045 0060 00F10202 		add	r2, r0, #2
 5046              	.LVL371:
1146:src/xeq.c     **** 			break;
 5047              		.loc 1 1146 3 is_stmt 1 view .LVU1351
1146:src/xeq.c     **** 			break;
 5048              		.loc 1 1146 6 is_stmt 0 view .LVU1352
 5049 0064 F3D8     		bhi	.L407
 5050              	.LBE1660:
1136:src/xeq.c     **** 	} else {
 5051              		.loc 1 1136 7 view .LVU1353
 5052 0066 0124     		movs	r4, #1
 5053 0068 D8E7     		b	.L401
 5054              		.cfi_endproc
 5055              	.LFE84:
 5057 006a 00BF     		.section	.text.digit,"ax",%progbits
 5058              		.align	1
 5059              		.p2align 2,,3
 5060              		.syntax unified
 5061              		.thumb
 5062              		.thumb_func
 5063              		.fpu fpv4-sp-d16
 5065              	digit:
 5066              	.LVL372:
 5067              	.LFB214:
3830:src/xeq.c     **** 	const int intm = is_intmode();
 5068              		.loc 1 3830 35 is_stmt 1 view -0
 5069              		.cfi_startproc
 5070              		@ args = 0, pretend = 0, frame = 0
 5071              		@ frame_needed = 0, uses_anonymous_args = 0
3831:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 5072              		.loc 1 3831 2 view .LVU1355
3830:src/xeq.c     **** 	const int intm = is_intmode();
ARM GAS  /tmp/ccqED0AM.s 			page 212


 5073              		.loc 1 3830 35 is_stmt 0 view .LVU1356
 5074 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5075              		.cfi_def_cfa_offset 24
 5076              		.cfi_offset 3, -24
 5077              		.cfi_offset 4, -20
 5078              		.cfi_offset 5, -16
 5079              		.cfi_offset 6, -12
 5080              		.cfi_offset 7, -8
 5081              		.cfi_offset 14, -4
3831:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 5082              		.loc 1 3831 19 view .LVU1357
 5083 0002 604E     		ldr	r6, .L461
3834:src/xeq.c     **** 		lim++;
 5084              		.loc 1 3834 13 view .LVU1358
 5085 0004 604C     		ldr	r4, .L461+4
3831:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 5086              		.loc 1 3831 19 view .LVU1359
 5087 0006 3368     		ldr	r3, [r6]
3834:src/xeq.c     **** 		lim++;
 5088              		.loc 1 3834 13 view .LVU1360
 5089 0008 94F82020 		ldrb	r2, [r4, #32]	@ zero_extendqisi2
3831:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 5090              		.loc 1 3831 19 view .LVU1361
 5091 000c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 5092              	.LVL373:
3832:src/xeq.c     **** 
 5093              		.loc 1 3832 2 is_stmt 1 view .LVU1362
3834:src/xeq.c     **** 		lim++;
 5094              		.loc 1 3834 2 view .LVU1363
3835:src/xeq.c     **** 	if (intm) {
 5095              		.loc 1 3835 6 is_stmt 0 view .LVU1364
 5096 0010 2D2A     		cmp	r2, #45
 5097 0012 14BF     		ite	ne
 5098 0014 0C27     		movne	r7, #12
 5099 0016 0D27     		moveq	r7, #13
 5100              	.LVL374:
3836:src/xeq.c     **** 		if (c >= int_base()) {
 5101              		.loc 1 3836 2 is_stmt 1 view .LVU1365
3836:src/xeq.c     **** 		if (c >= int_base()) {
 5102              		.loc 1 3836 5 is_stmt 0 view .LVU1366
 5103 0018 DB07     		lsls	r3, r3, #31
 5104              	.LVL375:
3830:src/xeq.c     **** 	const int intm = is_intmode();
 5105              		.loc 1 3830 35 view .LVU1367
 5106 001a 0546     		mov	r5, r0
3836:src/xeq.c     **** 		if (c >= int_base()) {
 5107              		.loc 1 3836 5 view .LVU1368
 5108 001c 79D4     		bmi	.L458
3842:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5109              		.loc 1 3842 3 is_stmt 1 view .LVU1369
3842:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5110              		.loc 1 3842 6 is_stmt 0 view .LVU1370
 5111 001e 0928     		cmp	r0, #9
 5112 0020 00F28C80 		bhi	.L419
3847:src/xeq.c     **** 			lim = CMDLINELEN;
 5113              		.loc 1 3847 3 is_stmt 1 view .LVU1371
3847:src/xeq.c     **** 			lim = CMDLINELEN;
ARM GAS  /tmp/ccqED0AM.s 			page 213


 5114              		.loc 1 3847 7 is_stmt 0 view .LVU1372
 5115 0024 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
3847:src/xeq.c     **** 			lim = CMDLINELEN;
 5116              		.loc 1 3847 6 view .LVU1373
 5117 0026 002B     		cmp	r3, #0
 5118 0028 65D0     		beq	.L420
3848:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5119              		.loc 1 3848 4 is_stmt 1 view .LVU1374
 5120              	.LVL376:
3850:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
 5121              		.loc 1 3850 4 view .LVU1375
3850:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
 5122              		.loc 1 3850 8 is_stmt 0 view .LVU1376
 5123 002a 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
3850:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
 5124              		.loc 1 3850 7 view .LVU1377
 5125 002c 122A     		cmp	r2, #18
 5126 002e 40F29980 		bls	.L444
 5127              	.LBB1671:
3851:src/xeq.c     **** 
 5128              		.loc 1 3851 5 is_stmt 1 view .LVU1378
3853:src/xeq.c     **** 					p++;
 5129              		.loc 1 3853 9 is_stmt 0 view .LVU1379
 5130 0032 E118     		adds	r1, r4, r3
3851:src/xeq.c     **** 
 5131              		.loc 1 3851 11 view .LVU1380
 5132 0034 2133     		adds	r3, r3, #33
3853:src/xeq.c     **** 					p++;
 5133              		.loc 1 3853 8 view .LVU1381
 5134 0036 91F82110 		ldrb	r1, [r1, #33]	@ zero_extendqisi2
3851:src/xeq.c     **** 
 5135              		.loc 1 3851 11 view .LVU1382
 5136 003a 2344     		add	r3, r3, r4
 5137              	.LVL377:
3853:src/xeq.c     **** 					p++;
 5138              		.loc 1 3853 5 is_stmt 1 view .LVU1383
3853:src/xeq.c     **** 					p++;
 5139              		.loc 1 3853 8 is_stmt 0 view .LVU1384
 5140 003c 2D29     		cmp	r1, #45
3854:src/xeq.c     **** 				while (p < &Cmdline[CMDLINELEN]) {
 5141              		.loc 1 3854 6 is_stmt 1 view .LVU1385
3855:src/xeq.c     **** 					p[0] = p[1];
 5142              		.loc 1 3855 11 is_stmt 0 view .LVU1386
 5143 003e 5349     		ldr	r1, .L461+8
3854:src/xeq.c     **** 				while (p < &Cmdline[CMDLINELEN]) {
 5144              		.loc 1 3854 7 view .LVU1387
 5145 0040 08BF     		it	eq
 5146 0042 0133     		addeq	r3, r3, #1
 5147              	.LVL378:
3855:src/xeq.c     **** 					p[0] = p[1];
 5148              		.loc 1 3855 11 is_stmt 1 view .LVU1388
 5149 0044 8B42     		cmp	r3, r1
 5150 0046 05D2     		bcs	.L423
 5151              	.LVL379:
 5152              	.L424:
3856:src/xeq.c     **** 					p++;
 5153              		.loc 1 3856 6 view .LVU1389
ARM GAS  /tmp/ccqED0AM.s 			page 214


3856:src/xeq.c     **** 					p++;
 5154              		.loc 1 3856 11 is_stmt 0 view .LVU1390
 5155 0048 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 5156 004a 03F8012B 		strb	r2, [r3], #1
 5157              	.LVL380:
3857:src/xeq.c     **** 				}
 5158              		.loc 1 3857 6 is_stmt 1 view .LVU1391
3855:src/xeq.c     **** 					p[0] = p[1];
 5159              		.loc 1 3855 11 view .LVU1392
 5160 004e 8B42     		cmp	r3, r1
 5161 0050 FAD1     		bne	.L424
 5162 0052 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
 5163              	.L423:
3859:src/xeq.c     **** 			}
 5164              		.loc 1 3859 5 view .LVU1393
3859:src/xeq.c     **** 			}
 5165              		.loc 1 3859 18 is_stmt 0 view .LVU1394
 5166 0054 013A     		subs	r2, r2, #1
 5167 0056 D2B2     		uxtb	r2, r2
 5168              	.LBE1671:
3848:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5169              		.loc 1 3848 8 view .LVU1395
 5170 0058 1323     		movs	r3, #19
 5171              	.LVL381:
3879:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5172              		.loc 1 3879 2 is_stmt 1 view .LVU1396
3879:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5173              		.loc 1 3879 5 is_stmt 0 view .LVU1397
 5174 005a 9342     		cmp	r3, r2
 5175              	.LBB1672:
3859:src/xeq.c     **** 			}
 5176              		.loc 1 3859 18 view .LVU1398
 5177 005c 2277     		strb	r2, [r4, #28]
 5178              	.LBE1672:
3879:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5179              		.loc 1 3879 5 view .LVU1399
 5180 005e 53DD     		ble	.L441
 5181              	.LVL382:
 5182              	.L428:
3891:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5183              		.loc 1 3891 3 is_stmt 1 view .LVU1400
3891:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5184              		.loc 1 3891 6 is_stmt 0 view .LVU1401
 5185 0060 002D     		cmp	r5, #0
 5186 0062 70D1     		bne	.L430
3891:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5187              		.loc 1 3891 17 discriminator 1 view .LVU1402
 5188 0064 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
3891:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5189              		.loc 1 3891 14 discriminator 1 view .LVU1403
 5190 0066 002B     		cmp	r3, #0
 5191 0068 00F08180 		beq	.L431
3892:src/xeq.c     **** 				return;
 5192              		.loc 1 3892 4 is_stmt 1 view .LVU1404
3895:src/xeq.c     **** 				return;
 5193              		.loc 1 3895 4 view .LVU1405
3892:src/xeq.c     **** 				return;
ARM GAS  /tmp/ccqED0AM.s 			page 215


 5194              		.loc 1 3892 15 is_stmt 0 view .LVU1406
 5195 006c A018     		adds	r0, r4, r2
3895:src/xeq.c     **** 				return;
 5196              		.loc 1 3895 7 view .LVU1407
 5197 006e C17F     		ldrb	r1, [r0, #31]	@ zero_extendqisi2
 5198 0070 4439     		subs	r1, r1, #68
 5199 0072 0129     		cmp	r1, #1
 5200 0074 3ED9     		bls	.L415
3903:src/xeq.c     **** 
 5201              		.loc 1 3903 3 is_stmt 1 view .LVU1408
 5202              	.LVL383:
 5203              	.LBB1673:
 5204              	.LBI1673:
2645:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5205              		.loc 1 2645 13 view .LVU1409
 5206              	.LBB1674:
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5207              		.loc 1 2646 2 view .LVU1410
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5208              		.loc 1 2646 23 is_stmt 0 view .LVU1411
 5209 0076 0132     		adds	r2, r2, #1
 5210 0078 D2B2     		uxtb	r2, r2
2647:src/xeq.c     **** }
 5211              		.loc 1 2647 25 view .LVU1412
 5212 007a A118     		adds	r1, r4, r2
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5213              		.loc 1 2646 27 view .LVU1413
 5214 007c 3027     		movs	r7, #48
 5215 007e 80F82070 		strb	r7, [r0, #32]
2647:src/xeq.c     **** }
 5216              		.loc 1 2647 2 is_stmt 1 view .LVU1414
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5217              		.loc 1 2646 23 is_stmt 0 view .LVU1415
 5218 0082 2277     		strb	r2, [r4, #28]
2647:src/xeq.c     **** }
 5219              		.loc 1 2647 25 view .LVU1416
 5220 0084 81F82050 		strb	r5, [r1, #32]
 5221              	.LVL384:
2647:src/xeq.c     **** }
 5222              		.loc 1 2647 25 view .LVU1417
 5223              	.LBE1674:
 5224              	.LBE1673:
3905:src/xeq.c     **** 			exponent_adjusted(1);
 5225              		.loc 1 3905 3 is_stmt 1 view .LVU1418
 5226              	.L442:
 5227              	.L434:
 5228              	.L435:
3906:src/xeq.c     **** 	}
 5229              		.loc 1 3906 4 view .LVU1419
 5230              	.LBB1679:
 5231              	.LBI1679:
2654:src/xeq.c     **** {
 5232              		.loc 1 2654 13 view .LVU1420
 5233              	.LBB1680:
2656:src/xeq.c     **** 	int i;
 5234              		.loc 1 2656 2 view .LVU1421
 5235              	.LBB1681:
ARM GAS  /tmp/ccqED0AM.s 			page 216


 5236              	.LBI1681:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 5237              		.loc 1 1118 5 view .LVU1422
 5238              	.LBB1682:
1119:src/xeq.c     **** }
 5239              		.loc 1 1119 2 view .LVU1423
1119:src/xeq.c     **** }
 5240              		.loc 1 1119 2 is_stmt 0 view .LVU1424
 5241              	.LBE1682:
 5242              	.LBE1681:
2657:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DC == -1
 5243              		.loc 1 2657 2 is_stmt 1 view .LVU1425
2661:src/xeq.c     **** #endif
 5244              		.loc 1 2661 2 view .LVU1426
2666:src/xeq.c     **** #endif
 5245              		.loc 1 2666 2 view .LVU1427
2671:src/xeq.c     **** #endif
 5246              		.loc 1 2671 2 view .LVU1428
2676:src/xeq.c     **** #endif
 5247              		.loc 1 2676 2 view .LVU1429
2681:src/xeq.c     **** #endif
 5248              		.loc 1 2681 2 view .LVU1430
2686:src/xeq.c     **** #endif
 5249              		.loc 1 2686 2 view .LVU1431
2691:src/xeq.c     **** #endif
 5250              		.loc 1 2691 2 view .LVU1432
2696:src/xeq.c     **** #endif
 5251              		.loc 1 2696 2 view .LVU1433
2701:src/xeq.c     **** #endif
 5252              		.loc 1 2701 2 view .LVU1434
2706:src/xeq.c     **** #endif
 5253              		.loc 1 2706 2 view .LVU1435
2708:src/xeq.c     **** 	const int dp_neg_lim_dc = DP_NEG_EXP_ENTRY_LIMIT_DC;
 5254              		.loc 1 2708 2 view .LVU1436
2709:src/xeq.c     **** 	const int dp_neg_type_ds = DP_NEG_EXP_ENTRY_TYPE_DS;
 5255              		.loc 1 2709 2 view .LVU1437
2710:src/xeq.c     **** 	const int dp_neg_lim_ds = DP_NEG_EXP_ENTRY_LIMIT_DS;
 5256              		.loc 1 2710 2 view .LVU1438
2711:src/xeq.c     **** 	const int dp_pos_type_dc = DP_POS_EXP_ENTRY_TYPE_DC;
 5257              		.loc 1 2711 2 view .LVU1439
2712:src/xeq.c     **** 	const int dp_pos_lim_dc = DP_POS_EXP_ENTRY_LIMIT_DC;
 5258              		.loc 1 2712 2 view .LVU1440
2713:src/xeq.c     **** 	const int dp_pos_type_ds = DP_POS_EXP_ENTRY_TYPE_DS;
 5259              		.loc 1 2713 2 view .LVU1441
2714:src/xeq.c     **** 	const int dp_pos_lim_ds = DP_POS_EXP_ENTRY_LIMIT_DS;
 5260              		.loc 1 2714 2 view .LVU1442
2715:src/xeq.c     **** 	const int dp_exp_chs_dc = DP_EXP_ENTRY_CHS_DC;
 5261              		.loc 1 2715 2 view .LVU1443
2716:src/xeq.c     **** 	const int dp_exp_chs_ds = DP_EXP_ENTRY_CHS_DS;
 5262              		.loc 1 2716 2 view .LVU1444
2717:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 5263              		.loc 1 2717 2 view .LVU1445
2719:src/xeq.c     **** 	char *p = &Cmdline[CmdLineEex];
 5264              		.loc 1 2719 2 view .LVU1446
2720:src/xeq.c     **** #else
 5265              		.loc 1 2720 2 view .LVU1447
 5266              	.LBB1685:
ARM GAS  /tmp/ccqED0AM.s 			page 217


 5267              	.LBB1683:
1119:src/xeq.c     **** }
 5268              		.loc 1 1119 24 is_stmt 0 view .LVU1448
 5269 0088 3268     		ldr	r2, [r6]
 5270 008a B2F8E807 		ldrh	r0, [r2, #2024]
 5271              	.LBE1683:
 5272              	.LBE1685:
 5273              	.LBB1686:
3169:src/xeq.c     **** #else
 5274              		.loc 1 3169 9 view .LVU1449
 5275 008e E118     		adds	r1, r4, r3
 5276              	.LBE1686:
2720:src/xeq.c     **** #else
 5277              		.loc 1 2720 8 view .LVU1450
 5278 0090 03F12005 		add	r5, r3, #32
 5279              	.LBB1687:
 5280              	.LBB1684:
1119:src/xeq.c     **** }
 5281              		.loc 1 1119 24 view .LVU1451
 5282 0094 44F20102 		movw	r2, #16385
 5283              	.LBE1684:
 5284              	.LBE1687:
 5285              	.LBB1688:
2840:src/xeq.c     **** 			// Double precision mode
 5286              		.loc 1 2840 6 view .LVU1452
 5287 0098 0240     		ands	r2, r2, r0
 5288              	.LBE1688:
2720:src/xeq.c     **** #else
 5289              		.loc 1 2720 8 view .LVU1453
 5290 009a 2544     		add	r5, r5, r4
 5291              	.LVL385:
2739:src/xeq.c     **** #endif
 5292              		.loc 1 2739 2 is_stmt 1 view .LVU1454
2744:src/xeq.c     **** 
 5293              		.loc 1 2744 2 view .LVU1455
2747:src/xeq.c     **** 		emax = 999;
 5294              		.loc 1 2747 2 view .LVU1456
 5295              	.LBB1689:
2751:src/xeq.c     **** 		int dot = 0, first_nonzero = -1, last_nonzero = 0;
 5296              		.loc 1 2751 3 view .LVU1457
2752:src/xeq.c     **** 
 5297              		.loc 1 2752 3 view .LVU1458
2754:src/xeq.c     **** 		    || (neg_type_ds >= 1 && neg_type_ds <= 9)
 5298              		.loc 1 2754 3 view .LVU1459
2840:src/xeq.c     **** 			// Double precision mode
 5299              		.loc 1 2840 3 view .LVU1460
2875:src/xeq.c     **** 				}
 5300              		.loc 1 2875 17 is_stmt 0 view .LVU1461
 5301 009c B2F5804F 		cmp	r2, #16384
3169:src/xeq.c     **** #else
 5302              		.loc 1 3169 8 view .LVU1462
 5303 00a0 91F82010 		ldrb	r1, [r1, #32]	@ zero_extendqisi2
2875:src/xeq.c     **** 				}
 5304              		.loc 1 2875 17 view .LVU1463
 5305 00a4 41F2FF72 		movw	r2, #6143
 5306              	.LBE1689:
3183:src/xeq.c     **** #  else
ARM GAS  /tmp/ccqED0AM.s 			page 218


 5307              		.loc 1 3183 3 view .LVU1464
 5308 00a8 05F10107 		add	r7, r5, #1
 5309              	.LBB1690:
2875:src/xeq.c     **** 				}
 5310              		.loc 1 2875 17 view .LVU1465
 5311 00ac 18BF     		it	ne
 5312 00ae 4FF4C072 		movne	r2, #384
 5313 00b2 40F27F16 		movw	r6, #383
 5314              	.LVL386:
2875:src/xeq.c     **** 				}
 5315              		.loc 1 2875 17 view .LVU1466
 5316              	.LBE1690:
3192:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5317              		.loc 1 3192 9 view .LVU1467
 5318 00b6 3846     		mov	r0, r7
 5319              	.LBB1691:
2875:src/xeq.c     **** 				}
 5320              		.loc 1 2875 17 view .LVU1468
 5321 00b8 04BF     		itt	eq
 5322 00ba 1646     		moveq	r6, r2
 5323              	.LVL387:
2875:src/xeq.c     **** 				}
 5324              		.loc 1 2875 17 view .LVU1469
 5325 00bc 4FF4C052 		moveq	r2, #6144
 5326              	.LVL388:
2954:src/xeq.c     **** 		    && (dp_neg_type_dc != dp_neg_type_ds || dp_neg_lim_dc != dp_neg_lim_ds)
 5327              		.loc 1 2954 3 is_stmt 1 view .LVU1470
2970:src/xeq.c     **** 		         && (!flag_D || (dp_neg_type_dc == dp_neg_type_ds
 5328              		.loc 1 2970 8 view .LVU1471
3016:src/xeq.c     **** 		    && (dp_pos_type_dc != dp_pos_type_ds || dp_pos_lim_dc != dp_pos_lim_ds)
 5329              		.loc 1 3016 3 view .LVU1472
3030:src/xeq.c     **** 		         && (!flag_D || (dp_pos_type_dc == dp_pos_type_ds
 5330              		.loc 1 3030 8 view .LVU1473
3070:src/xeq.c     **** 		    && (dp_exp_chs_dc != dp_exp_chs_ds)
 5331              		.loc 1 3070 3 view .LVU1474
3096:src/xeq.c     **** 		         && (!flag_D || dp_exp_chs_dc == dp_exp_chs_ds)
 5332              		.loc 1 3096 8 view .LVU1475
3122:src/xeq.c     **** 			if (exp_chs_ds == 0) {
 5333              		.loc 1 3122 8 view .LVU1476
3151:src/xeq.c     **** 				// Limit exponents so sign change is always legal
 5334              		.loc 1 3151 4 view .LVU1477
3158:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
 5335              		.loc 1 3158 9 view .LVU1478
3166:src/xeq.c     **** 					return;
 5336              		.loc 1 3166 5 view .LVU1479
3169:src/xeq.c     **** #else
 5337              		.loc 1 3169 5 view .LVU1480
3175:src/xeq.c     **** 			}
 5338              		.loc 1 3175 11 is_stmt 0 view .LVU1481
 5339 00c0 4429     		cmp	r1, #68
 5340 00c2 18BF     		it	ne
 5341 00c4 1646     		movne	r6, r2
 5342              	.LVL389:
3175:src/xeq.c     **** 			}
 5343              		.loc 1 3175 11 view .LVU1482
 5344              	.LBE1691:
3183:src/xeq.c     **** #  else
ARM GAS  /tmp/ccqED0AM.s 			page 219


 5345              		.loc 1 3183 2 is_stmt 1 view .LVU1483
3192:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5346              		.loc 1 3192 2 view .LVU1484
3192:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5347              		.loc 1 3192 8 view .LVU1485
3192:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5348              		.loc 1 3192 9 is_stmt 0 view .LVU1486
 5349 00c6 FFF7FEFF 		bl	s_to_i
 5350              	.LVL390:
3192:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5351              		.loc 1 3192 8 view .LVU1487
 5352 00ca B042     		cmp	r0, r6
3193:src/xeq.c     **** 			p[i] = p[i + 1];
 5353              		.loc 1 3193 3 view .LVU1488
 5354 00cc 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
3192:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5355              		.loc 1 3192 8 view .LVU1489
 5356 00ce 0FDD     		ble	.L438
 5357              	.L459:
 5358              	.LVL391:
3193:src/xeq.c     **** 			p[i] = p[i + 1];
 5359              		.loc 1 3193 15 is_stmt 1 view .LVU1490
3193:src/xeq.c     **** 			p[i] = p[i + 1];
 5360              		.loc 1 3193 3 is_stmt 0 view .LVU1491
 5361 00d0 2BB1     		cbz	r3, .L440
 5362              	.LVL392:
 5363              	.L447:
3193:src/xeq.c     **** 			p[i] = p[i + 1];
 5364              		.loc 1 3193 3 view .LVU1492
 5365 00d2 3B46     		mov	r3, r7
 5366              	.L437:
3194:src/xeq.c     **** 		CmdLineLength--;
 5367              		.loc 1 3194 4 is_stmt 1 view .LVU1493
3194:src/xeq.c     **** 		CmdLineLength--;
 5368              		.loc 1 3194 9 is_stmt 0 view .LVU1494
 5369 00d4 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 5370 00d6 1A70     		strb	r2, [r3]
3193:src/xeq.c     **** 			p[i] = p[i + 1];
 5371              		.loc 1 3193 29 is_stmt 1 view .LVU1495
3193:src/xeq.c     **** 			p[i] = p[i + 1];
 5372              		.loc 1 3193 15 view .LVU1496
3193:src/xeq.c     **** 			p[i] = p[i + 1];
 5373              		.loc 1 3193 3 is_stmt 0 view .LVU1497
 5374 00d8 0133     		adds	r3, r3, #1
 5375 00da 002A     		cmp	r2, #0
 5376 00dc FAD1     		bne	.L437
 5377              	.L440:
3195:src/xeq.c     **** 	}
 5378              		.loc 1 3195 3 is_stmt 1 view .LVU1498
3195:src/xeq.c     **** 	}
 5379              		.loc 1 3195 16 is_stmt 0 view .LVU1499
 5380 00de 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
3192:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5381              		.loc 1 3192 9 view .LVU1500
 5382 00e0 3846     		mov	r0, r7
3195:src/xeq.c     **** 	}
 5383              		.loc 1 3195 16 view .LVU1501
ARM GAS  /tmp/ccqED0AM.s 			page 220


 5384 00e2 013B     		subs	r3, r3, #1
 5385 00e4 2377     		strb	r3, [r4, #28]
3192:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5386              		.loc 1 3192 8 is_stmt 1 view .LVU1502
3192:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5387              		.loc 1 3192 9 is_stmt 0 view .LVU1503
 5388 00e6 FFF7FEFF 		bl	s_to_i
 5389              	.LVL393:
3192:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5390              		.loc 1 3192 8 view .LVU1504
 5391 00ea B042     		cmp	r0, r6
3193:src/xeq.c     **** 			p[i] = p[i + 1];
 5392              		.loc 1 3193 3 view .LVU1505
 5393 00ec 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
3192:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5394              		.loc 1 3192 8 view .LVU1506
 5395 00ee EFDC     		bgt	.L459
 5396              	.L438:
3192:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5397              		.loc 1 3192 26 view .LVU1507
 5398 00f0 302B     		cmp	r3, #48
 5399 00f2 EED0     		beq	.L447
 5400              	.LVL394:
 5401              	.L415:
3192:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5402              		.loc 1 3192 26 view .LVU1508
 5403              	.LBE1680:
 5404              	.LBE1679:
3908:src/xeq.c     **** 
 5405              		.loc 1 3908 1 view .LVU1509
 5406 00f4 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5407              	.LVL395:
 5408              	.L420:
3864:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5409              		.loc 1 3864 4 is_stmt 1 view .LVU1510
3864:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5410              		.loc 1 3864 11 is_stmt 0 view .LVU1511
 5411 00f6 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 5412              	.LVL396:
3866:src/xeq.c     **** #  ifdef FRACTION_ENTRY_OVERFLOW_LEFT
 5413              		.loc 1 3866 4 is_stmt 1 view .LVU1512
3866:src/xeq.c     **** #  ifdef FRACTION_ENTRY_OVERFLOW_LEFT
 5414              		.loc 1 3866 7 is_stmt 0 view .LVU1513
 5415 00f8 012B     		cmp	r3, #1
 5416 00fa 35D9     		bls	.L460
3869:src/xeq.c     **** #  elif defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 5417              		.loc 1 3869 5 is_stmt 1 view .LVU1514
3869:src/xeq.c     **** #  elif defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 5418              		.loc 1 3869 22 is_stmt 0 view .LVU1515
 5419 00fc 2D2A     		cmp	r2, #45
 5420 00fe 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
 5421 0100 30D0     		beq	.L444
 5422 0102 1223     		movs	r3, #18
 5423              	.LVL397:
 5424              	.L421:
3879:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5425              		.loc 1 3879 2 is_stmt 1 view .LVU1516
ARM GAS  /tmp/ccqED0AM.s 			page 221


3879:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5426              		.loc 1 3879 5 is_stmt 0 view .LVU1517
 5427 0104 9342     		cmp	r3, r2
 5428 0106 ABDC     		bgt	.L428
 5429              	.LVL398:
 5430              	.L441:
3881:src/xeq.c     **** 		return;
 5431              		.loc 1 3881 3 is_stmt 1 view .LVU1518
3908:src/xeq.c     **** 
 5432              		.loc 1 3908 1 is_stmt 0 view .LVU1519
 5433 0108 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 5434              		.cfi_remember_state
 5435              		.cfi_restore 14
 5436              		.cfi_restore 7
 5437              		.cfi_restore 6
 5438              		.cfi_restore 5
 5439              		.cfi_restore 4
 5440              		.cfi_restore 3
 5441              		.cfi_def_cfa_offset 0
 5442              	.LVL399:
3881:src/xeq.c     **** 		return;
 5443              		.loc 1 3881 3 view .LVU1520
 5444 010c 0A20     		movs	r0, #10
 5445 010e FFF7FEBF 		b	report_warn
 5446              	.LVL400:
 5447              	.L458:
 5448              		.cfi_restore_state
3837:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5449              		.loc 1 3837 3 is_stmt 1 view .LVU1521
3837:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5450              		.loc 1 3837 12 is_stmt 0 view .LVU1522
 5451 0112 FFF7FEFF 		bl	int_base
 5452              	.LVL401:
3837:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5453              		.loc 1 3837 6 view .LVU1523
 5454 0116 A842     		cmp	r0, r5
 5455 0118 10D9     		bls	.L419
3879:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5456              		.loc 1 3879 2 is_stmt 1 view .LVU1524
3879:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5457              		.loc 1 3879 6 is_stmt 0 view .LVU1525
 5458 011a 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
3879:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5459              		.loc 1 3879 5 view .LVU1526
 5460 011c BA42     		cmp	r2, r7
 5461 011e F3DA     		bge	.L441
3885:src/xeq.c     **** 		append_cmdline(c - 10 + 'A');
 5462              		.loc 1 3885 2 is_stmt 1 view .LVU1527
3885:src/xeq.c     **** 		append_cmdline(c - 10 + 'A');
 5463              		.loc 1 3885 5 is_stmt 0 view .LVU1528
 5464 0120 092D     		cmp	r5, #9
 5465 0122 9DD9     		bls	.L428
3886:src/xeq.c     **** 	else {
 5466              		.loc 1 3886 3 is_stmt 1 view .LVU1529
 5467              	.LVL402:
 5468              	.LBB1692:
 5469              	.LBI1692:
ARM GAS  /tmp/ccqED0AM.s 			page 222


2645:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5470              		.loc 1 2645 13 view .LVU1530
 5471              	.LBB1693:
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5472              		.loc 1 2646 2 view .LVU1531
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5473              		.loc 1 2646 23 is_stmt 0 view .LVU1532
 5474 0124 531C     		adds	r3, r2, #1
 5475 0126 DBB2     		uxtb	r3, r3
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5476              		.loc 1 2646 27 view .LVU1533
 5477 0128 2244     		add	r2, r2, r4
2647:src/xeq.c     **** }
 5478              		.loc 1 2647 25 view .LVU1534
 5479 012a E118     		adds	r1, r4, r3
 5480              	.LBE1693:
 5481              	.LBE1692:
3886:src/xeq.c     **** 	else {
 5482              		.loc 1 3886 3 view .LVU1535
 5483 012c 3735     		adds	r5, r5, #55
 5484              	.LVL403:
 5485              	.LBB1695:
 5486              	.LBB1694:
2647:src/xeq.c     **** }
 5487              		.loc 1 2647 25 view .LVU1536
 5488 012e 0026     		movs	r6, #0
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5489              		.loc 1 2646 27 view .LVU1537
 5490 0130 82F82050 		strb	r5, [r2, #32]
2647:src/xeq.c     **** }
 5491              		.loc 1 2647 2 is_stmt 1 view .LVU1538
2647:src/xeq.c     **** }
 5492              		.loc 1 2647 25 is_stmt 0 view .LVU1539
 5493 0134 81F82060 		strb	r6, [r1, #32]
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5494              		.loc 1 2646 23 view .LVU1540
 5495 0138 2377     		strb	r3, [r4, #28]
 5496              	.LBE1694:
 5497              	.LBE1695:
3908:src/xeq.c     **** 
 5498              		.loc 1 3908 1 view .LVU1541
 5499 013a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5500              	.LVL404:
 5501              	.L419:
3838:src/xeq.c     **** 			return;
 5502              		.loc 1 3838 4 is_stmt 1 view .LVU1542
3908:src/xeq.c     **** 
 5503              		.loc 1 3908 1 is_stmt 0 view .LVU1543
 5504 013c BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 5505              		.cfi_remember_state
 5506              		.cfi_restore 14
 5507              		.cfi_restore 7
 5508              		.cfi_restore 6
 5509              		.cfi_restore 5
 5510              		.cfi_restore 4
 5511              		.cfi_restore 3
 5512              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccqED0AM.s 			page 223


 5513              	.LVL405:
3838:src/xeq.c     **** 			return;
 5514              		.loc 1 3838 4 view .LVU1544
 5515 0140 0920     		movs	r0, #9
 5516 0142 FFF7FEBF 		b	report_warn
 5517              	.LVL406:
 5518              	.L430:
 5519              		.cfi_restore_state
3903:src/xeq.c     **** 
 5520              		.loc 1 3903 3 is_stmt 1 view .LVU1545
 5521              	.LBB1696:
2645:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5522              		.loc 1 2645 13 view .LVU1546
 5523              	.LBB1675:
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5524              		.loc 1 2646 2 view .LVU1547
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5525              		.loc 1 2646 23 is_stmt 0 view .LVU1548
 5526 0146 511C     		adds	r1, r2, #1
 5527 0148 C9B2     		uxtb	r1, r1
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5528              		.loc 1 2646 27 view .LVU1549
 5529 014a 2244     		add	r2, r2, r4
2647:src/xeq.c     **** }
 5530              		.loc 1 2647 25 view .LVU1550
 5531 014c 6718     		adds	r7, r4, r1
 5532              	.LBE1675:
 5533              	.LBE1696:
3903:src/xeq.c     **** 
 5534              		.loc 1 3903 3 view .LVU1551
 5535 014e 3035     		adds	r5, r5, #48
 5536              	.LVL407:
3905:src/xeq.c     **** 			exponent_adjusted(1);
 5537              		.loc 1 3905 7 view .LVU1552
 5538 0150 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
 5539              	.LBB1697:
 5540              	.LBB1676:
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5541              		.loc 1 2646 27 view .LVU1553
 5542 0152 82F82050 		strb	r5, [r2, #32]
2647:src/xeq.c     **** }
 5543              		.loc 1 2647 2 is_stmt 1 view .LVU1554
2647:src/xeq.c     **** }
 5544              		.loc 1 2647 25 is_stmt 0 view .LVU1555
 5545 0156 0022     		movs	r2, #0
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5546              		.loc 1 2646 23 view .LVU1556
 5547 0158 2177     		strb	r1, [r4, #28]
2647:src/xeq.c     **** }
 5548              		.loc 1 2647 25 view .LVU1557
 5549 015a 87F82020 		strb	r2, [r7, #32]
2647:src/xeq.c     **** }
 5550              		.loc 1 2647 25 view .LVU1558
 5551              	.LBE1676:
 5552              	.LBE1697:
3905:src/xeq.c     **** 			exponent_adjusted(1);
 5553              		.loc 1 3905 3 is_stmt 1 view .LVU1559
ARM GAS  /tmp/ccqED0AM.s 			page 224


3905:src/xeq.c     **** 			exponent_adjusted(1);
 5554              		.loc 1 3905 6 is_stmt 0 view .LVU1560
 5555 015e 002B     		cmp	r3, #0
 5556 0160 92D1     		bne	.L442
3908:src/xeq.c     **** 
 5557              		.loc 1 3908 1 view .LVU1561
 5558 0162 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5559              	.LVL408:
 5560              	.L444:
3848:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5561              		.loc 1 3848 8 view .LVU1562
 5562 0164 1323     		movs	r3, #19
 5563 0166 CDE7     		b	.L421
 5564              	.LVL409:
 5565              	.L460:
3848:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5566              		.loc 1 3848 8 view .LVU1563
 5567 0168 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
3864:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5568              		.loc 1 3864 8 view .LVU1564
 5569 016a 3B44     		add	r3, r3, r7
 5570              	.LVL410:
3864:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5571              		.loc 1 3864 8 view .LVU1565
 5572 016c CAE7     		b	.L421
 5573              	.LVL411:
 5574              	.L431:
3903:src/xeq.c     **** 
 5575              		.loc 1 3903 3 is_stmt 1 view .LVU1566
 5576              	.LBB1698:
2645:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5577              		.loc 1 2645 13 view .LVU1567
 5578              	.LBB1677:
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5579              		.loc 1 2646 2 view .LVU1568
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5580              		.loc 1 2646 23 is_stmt 0 view .LVU1569
 5581 016e 531C     		adds	r3, r2, #1
 5582 0170 DBB2     		uxtb	r3, r3
2647:src/xeq.c     **** }
 5583              		.loc 1 2647 25 view .LVU1570
 5584 0172 E118     		adds	r1, r4, r3
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5585              		.loc 1 2646 27 view .LVU1571
 5586 0174 2244     		add	r2, r2, r4
 5587 0176 3020     		movs	r0, #48
 5588 0178 82F82000 		strb	r0, [r2, #32]
2647:src/xeq.c     **** }
 5589              		.loc 1 2647 2 is_stmt 1 view .LVU1572
2647:src/xeq.c     **** }
 5590              		.loc 1 2647 25 is_stmt 0 view .LVU1573
 5591 017c 81F82050 		strb	r5, [r1, #32]
 5592              	.LVL412:
2647:src/xeq.c     **** }
 5593              		.loc 1 2647 25 view .LVU1574
 5594              	.LBE1677:
 5595              	.LBE1698:
ARM GAS  /tmp/ccqED0AM.s 			page 225


3905:src/xeq.c     **** 			exponent_adjusted(1);
 5596              		.loc 1 3905 3 is_stmt 1 view .LVU1575
 5597              	.LBB1699:
 5598              	.LBB1678:
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5599              		.loc 1 2646 23 is_stmt 0 view .LVU1576
 5600 0180 2377     		strb	r3, [r4, #28]
 5601              	.LBE1678:
 5602              	.LBE1699:
3908:src/xeq.c     **** 
 5603              		.loc 1 3908 1 view .LVU1577
 5604 0182 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5605              	.LVL413:
 5606              	.L462:
3908:src/xeq.c     **** 
 5607              		.loc 1 3908 1 view .LVU1578
 5608              		.align	2
 5609              	.L461:
 5610 0184 00000000 		.word	main_ram
 5611 0188 00000000 		.word	StateWhileOn
 5612 018c 33000000 		.word	StateWhileOn+51
 5613              		.cfi_endproc
 5614              	.LFE214:
 5616              		.section	.text.s_to_ull,"ax",%progbits
 5617              		.align	1
 5618              		.p2align 2,,3
 5619              		.global	s_to_ull
 5620              		.syntax unified
 5621              		.thumb
 5622              		.thumb_func
 5623              		.fpu fpv4-sp-d16
 5625              	s_to_ull:
 5626              	.LVL414:
 5627              	.LFB85:
1157:src/xeq.c     **** 	unsigned long long int x = 0;
 5628              		.loc 1 1157 67 is_stmt 1 view -0
 5629              		.cfi_startproc
 5630              		@ args = 0, pretend = 0, frame = 0
 5631              		@ frame_needed = 0, uses_anonymous_args = 0
 5632              		@ link register save eliminated.
1158:src/xeq.c     **** 
 5633              		.loc 1 1158 2 view .LVU1580
1157:src/xeq.c     **** 	unsigned long long int x = 0;
 5634              		.loc 1 1157 67 is_stmt 0 view .LVU1581
 5635 0000 F0B4     		push	{r4, r5, r6, r7}
 5636              		.cfi_def_cfa_offset 16
 5637              		.cfi_offset 4, -16
 5638              		.cfi_offset 5, -12
 5639              		.cfi_offset 6, -8
 5640              		.cfi_offset 7, -4
1158:src/xeq.c     **** 
 5641              		.loc 1 1158 25 view .LVU1582
 5642 0002 0026     		movs	r6, #0
 5643 0004 0027     		movs	r7, #0
 5644 0006 02E0     		b	.L467
 5645              	.LVL415:
 5646              	.L469:
ARM GAS  /tmp/ccqED0AM.s 			page 226


 5647              	.LBB1700:
1172:src/xeq.c     **** 	}
 5648              		.loc 1 1172 5 view .LVU1583
 5649 0008 E618     		adds	r6, r4, r3
 5650              	.LVL416:
1172:src/xeq.c     **** 	}
 5651              		.loc 1 1172 5 view .LVU1584
 5652 000a 45F10007 		adc	r7, r5, #0
 5653              	.LVL417:
1172:src/xeq.c     **** 	}
 5654              		.loc 1 1172 5 view .LVU1585
 5655              	.LBE1700:
1160:src/xeq.c     **** 		unsigned int n;
 5656              		.loc 1 1160 8 is_stmt 1 view .LVU1586
 5657              	.L467:
1160:src/xeq.c     **** 		unsigned int n;
 5658              		.loc 1 1160 2 view .LVU1587
 5659              	.LBB1701:
1161:src/xeq.c     **** 		const char c = *s++;
 5660              		.loc 1 1161 3 view .LVU1588
1162:src/xeq.c     **** 
 5661              		.loc 1 1162 3 view .LVU1589
1165:src/xeq.c     **** 		else if (c >= 'A' && c <= 'F')
 5662              		.loc 1 1165 4 view .LVU1590
1166:src/xeq.c     **** 			n = c - 'A' + 10;
 5663              		.loc 1 1166 8 view .LVU1591
1167:src/xeq.c     **** 		else
 5664              		.loc 1 1167 4 view .LVU1592
1162:src/xeq.c     **** 
 5665              		.loc 1 1162 14 is_stmt 0 view .LVU1593
 5666 000e 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 5667              	.LVL418:
1164:src/xeq.c     **** 			n = c - '0';
 5668              		.loc 1 1164 3 is_stmt 1 view .LVU1594
1164:src/xeq.c     **** 			n = c - '0';
 5669              		.loc 1 1164 16 is_stmt 0 view .LVU1595
 5670 0012 A2F13003 		sub	r3, r2, #48
1164:src/xeq.c     **** 			n = c - '0';
 5671              		.loc 1 1164 6 view .LVU1596
 5672 0016 DCB2     		uxtb	r4, r3
 5673 0018 092C     		cmp	r4, #9
1166:src/xeq.c     **** 			n = c - 'A' + 10;
 5674              		.loc 1 1166 11 view .LVU1597
 5675 001a A2F14105 		sub	r5, r2, #65
1164:src/xeq.c     **** 			n = c - '0';
 5676              		.loc 1 1164 6 view .LVU1598
 5677 001e 03D9     		bls	.L465
1166:src/xeq.c     **** 			n = c - 'A' + 10;
 5678              		.loc 1 1166 11 view .LVU1599
 5679 0020 052D     		cmp	r5, #5
 5680 0022 07D8     		bhi	.L463
1167:src/xeq.c     **** 		else
 5681              		.loc 1 1167 16 view .LVU1600
 5682 0024 A2F13703 		sub	r3, r2, #55
 5683              	.LVL419:
 5684              	.L465:
1170:src/xeq.c     **** 			break;
ARM GAS  /tmp/ccqED0AM.s 			page 227


 5685              		.loc 1 1170 3 is_stmt 1 view .LVU1601
1172:src/xeq.c     **** 	}
 5686              		.loc 1 1172 3 view .LVU1602
1172:src/xeq.c     **** 	}
 5687              		.loc 1 1172 9 is_stmt 0 view .LVU1603
 5688 0028 A1FB0645 		umull	r4, r5, r1, r6
1170:src/xeq.c     **** 			break;
 5689              		.loc 1 1170 6 view .LVU1604
 5690 002c 8B42     		cmp	r3, r1
1172:src/xeq.c     **** 	}
 5691              		.loc 1 1172 9 view .LVU1605
 5692 002e 01FB0755 		mla	r5, r1, r7, r5
1170:src/xeq.c     **** 			break;
 5693              		.loc 1 1170 6 view .LVU1606
 5694 0032 E9D3     		bcc	.L469
 5695              	.LVL420:
 5696              	.L463:
1170:src/xeq.c     **** 			break;
 5697              		.loc 1 1170 6 view .LVU1607
 5698              	.LBE1701:
1175:src/xeq.c     **** 
 5699              		.loc 1 1175 1 view .LVU1608
 5700 0034 3046     		mov	r0, r6
 5701              	.LVL421:
1175:src/xeq.c     **** 
 5702              		.loc 1 1175 1 view .LVU1609
 5703 0036 3946     		mov	r1, r7
 5704              	.LVL422:
1175:src/xeq.c     **** 
 5705              		.loc 1 1175 1 view .LVU1610
 5706 0038 F0BC     		pop	{r4, r5, r6, r7}
 5707              		.cfi_restore 7
 5708              		.cfi_restore 6
 5709              		.cfi_restore 5
 5710              		.cfi_restore 4
 5711              		.cfi_def_cfa_offset 0
 5712              	.LVL423:
1175:src/xeq.c     **** 
 5713              		.loc 1 1175 1 view .LVU1611
 5714 003a 7047     		bx	lr
 5715              		.cfi_endproc
 5716              	.LFE85:
 5718              		.section	.text.get_cmdline,"ax",%progbits
 5719              		.align	1
 5720              		.p2align 2,,3
 5721              		.global	get_cmdline
 5722              		.syntax unified
 5723              		.thumb
 5724              		.thumb_func
 5725              		.fpu fpv4-sp-d16
 5727              	get_cmdline:
 5728              	.LFB86:
1177:src/xeq.c     **** 	if (CmdLineLength) {
 5729              		.loc 1 1177 31 is_stmt 1 view -0
 5730              		.cfi_startproc
 5731              		@ args = 0, pretend = 0, frame = 0
 5732              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccqED0AM.s 			page 228


 5733              		@ link register save eliminated.
1178:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
 5734              		.loc 1 1178 2 view .LVU1613
1178:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
 5735              		.loc 1 1178 6 is_stmt 0 view .LVU1614
 5736 0000 044B     		ldr	r3, .L473
 5737 0002 187F     		ldrb	r0, [r3, #28]	@ zero_extendqisi2
1178:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
 5738              		.loc 1 1178 5 view .LVU1615
 5739 0004 28B1     		cbz	r0, .L470
1179:src/xeq.c     **** 		return Cmdline;
 5740              		.loc 1 1179 3 is_stmt 1 view .LVU1616
1179:src/xeq.c     **** 		return Cmdline;
 5741              		.loc 1 1179 26 is_stmt 0 view .LVU1617
 5742 0006 1A18     		adds	r2, r3, r0
 5743 0008 0021     		movs	r1, #0
1180:src/xeq.c     **** 	}
 5744              		.loc 1 1180 10 view .LVU1618
 5745 000a 03F12000 		add	r0, r3, #32
1179:src/xeq.c     **** 		return Cmdline;
 5746              		.loc 1 1179 26 view .LVU1619
 5747 000e 82F82010 		strb	r1, [r2, #32]
1180:src/xeq.c     **** 	}
 5748              		.loc 1 1180 3 is_stmt 1 view .LVU1620
 5749              	.L470:
1183:src/xeq.c     **** 
 5750              		.loc 1 1183 1 is_stmt 0 view .LVU1621
 5751 0012 7047     		bx	lr
 5752              	.L474:
 5753              		.align	2
 5754              	.L473:
 5755 0014 00000000 		.word	StateWhileOn
 5756              		.cfi_endproc
 5757              	.LFE86:
 5759              		.section	.text.is_bad_cmdline,"ax",%progbits
 5760              		.align	1
 5761              		.p2align 2,,3
 5762              		.global	is_bad_cmdline
 5763              		.syntax unified
 5764              		.thumb
 5765              		.thumb_func
 5766              		.fpu fpv4-sp-d16
 5768              	is_bad_cmdline:
 5769              	.LFB87:
1200:src/xeq.c     **** #ifndef IGNORE_INVALID_FRACTIONS
 5770              		.loc 1 1200 1 is_stmt 1 view -0
 5771              		.cfi_startproc
 5772              		@ args = 0, pretend = 0, frame = 0
 5773              		@ frame_needed = 0, uses_anonymous_args = 0
 5774              		@ link register save eliminated.
1221:src/xeq.c     **** }
 5775              		.loc 1 1221 2 view .LVU1623
1222:src/xeq.c     **** 
 5776              		.loc 1 1222 1 is_stmt 0 view .LVU1624
 5777 0000 0020     		movs	r0, #0
 5778 0002 7047     		bx	lr
 5779              		.cfi_endproc
ARM GAS  /tmp/ccqED0AM.s 			page 229


 5780              	.LFE87:
 5782              		.section	.text.get_flash_reg_n,"ax",%progbits
 5783              		.align	1
 5784              		.p2align 2,,3
 5785              		.global	get_flash_reg_n
 5786              		.syntax unified
 5787              		.thumb
 5788              		.thumb_func
 5789              		.fpu fpv4-sp-d16
 5791              	get_flash_reg_n:
 5792              	.LVL424:
 5793              	.LFB92:
1385:src/xeq.c     **** 	return (REGISTER *) reg_address(n, BackupFlash._regs + TOPREALREG - BackupFlash._numregs,
 5794              		.loc 1 1385 34 is_stmt 1 view -0
 5795              		.cfi_startproc
 5796              		@ args = 0, pretend = 0, frame = 0
 5797              		@ frame_needed = 0, uses_anonymous_args = 0
 5798              		@ link register save eliminated.
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5799              		.loc 1 1386 2 view .LVU1626
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5800              		.loc 1 1386 37 is_stmt 0 view .LVU1627
 5801 0000 064B     		ldr	r3, .L477
 5802 0002 1A68     		ldr	r2, [r3]
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5803              		.loc 1 1386 68 view .LVU1628
 5804 0004 92F8CF37 		ldrb	r3, [r2, #1999]	@ zero_extendqisi2
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5805              		.loc 1 1386 37 view .LVU1629
 5806 0008 02F22C41 		addw	r1, r2, #1068
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5807              		.loc 1 1386 68 view .LVU1630
 5808 000c C3F16403 		rsb	r3, r3, #100
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5809              		.loc 1 1386 22 view .LVU1631
 5810 0010 01EBC301 		add	r1, r1, r3, lsl #3
 5811 0014 02F24C72 		addw	r2, r2, #1868
 5812 0018 FFF7FEBF 		b	reg_address
 5813              	.LVL425:
 5814              	.L478:
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5815              		.loc 1 1386 22 view .LVU1632
 5816              		.align	2
 5817              	.L477:
 5818 001c 00000000 		.word	backup_ram
 5819              		.cfi_endproc
 5820              	.LFE92:
 5822              		.section	.text.get_const,"ax",%progbits
 5823              		.align	1
 5824              		.p2align 2,,3
 5825              		.global	get_const
 5826              		.syntax unified
 5827              		.thumb
 5828              		.thumb_func
 5829              		.fpu fpv4-sp-d16
 5831              	get_const:
 5832              	.LVL426:
ARM GAS  /tmp/ccqED0AM.s 			page 230


 5833              	.LFB93:
1396:src/xeq.c     **** 	static REGISTER result;
 5834              		.loc 1 1396 1 is_stmt 1 view -0
 5835              		.cfi_startproc
 5836              		@ args = 0, pretend = 0, frame = 40
 5837              		@ frame_needed = 0, uses_anonymous_args = 0
1397:src/xeq.c     **** 	const int i = cnsts[index].index;
 5838              		.loc 1 1397 2 view .LVU1634
1398:src/xeq.c     **** 	if (dbl) {
 5839              		.loc 1 1398 2 view .LVU1635
1396:src/xeq.c     **** 	static REGISTER result;
 5840              		.loc 1 1396 1 is_stmt 0 view .LVU1636
 5841 0000 00B5     		push	{lr}
 5842              		.cfi_def_cfa_offset 4
 5843              		.cfi_offset 14, -4
1398:src/xeq.c     **** 	if (dbl) {
 5844              		.loc 1 1398 28 view .LVU1637
 5845 0002 1C4B     		ldr	r3, .L485
 5846 0004 00EB4000 		add	r0, r0, r0, lsl #1
 5847              	.LVL427:
1396:src/xeq.c     **** 	static REGISTER result;
 5848              		.loc 1 1396 1 view .LVU1638
 5849 0008 8BB0     		sub	sp, sp, #44
 5850              		.cfi_def_cfa_offset 48
1398:src/xeq.c     **** 	if (dbl) {
 5851              		.loc 1 1398 28 view .LVU1639
 5852 000a 13F82030 		ldrb	r3, [r3, r0, lsl #2]	@ zero_extendqisi2
 5853              	.LVL428:
1399:src/xeq.c     **** 		if (i <= 1 || i >= 128)
 5854              		.loc 1 1399 2 is_stmt 1 view .LVU1640
1399:src/xeq.c     **** 		if (i <= 1 || i >= 128)
 5855              		.loc 1 1399 5 is_stmt 0 view .LVU1641
 5856 000e 51B1     		cbz	r1, .L480
1400:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
 5857              		.loc 1 1400 3 is_stmt 1 view .LVU1642
1400:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
 5858              		.loc 1 1400 14 is_stmt 0 view .LVU1643
 5859 0010 9A1E     		subs	r2, r3, #2
1400:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
 5860              		.loc 1 1400 6 view .LVU1644
 5861 0012 7D2A     		cmp	r2, #125
 5862 0014 0FD9     		bls	.L481
1401:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5863              		.loc 1 1401 4 is_stmt 1 view .LVU1645
1401:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5864              		.loc 1 1401 11 is_stmt 0 view .LVU1646
 5865 0016 184A     		ldr	r2, .L485+4
1401:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5866              		.loc 1 1401 36 view .LVU1647
 5867 0018 03F07F00 		and	r0, r3, #127
1401:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5868              		.loc 1 1401 11 view .LVU1648
 5869 001c 02EB0010 		add	r0, r2, r0, lsl #4
1410:src/xeq.c     **** 
 5870              		.loc 1 1410 1 view .LVU1649
 5871 0020 0BB0     		add	sp, sp, #44
 5872              		.cfi_remember_state
ARM GAS  /tmp/ccqED0AM.s 			page 231


 5873              		.cfi_def_cfa_offset 4
 5874              		@ sp needed
 5875 0022 5DF804FB 		ldr	pc, [sp], #4
 5876              	.L480:
 5877              		.cfi_restore_state
1405:src/xeq.c     **** 			return (REGISTER *) (cnsts_d64 + i);
 5878              		.loc 1 1405 3 is_stmt 1 view .LVU1650
1405:src/xeq.c     **** 			return (REGISTER *) (cnsts_d64 + i);
 5879              		.loc 1 1405 6 is_stmt 0 view .LVU1651
 5880 0026 1A06     		lsls	r2, r3, #24
 5881 0028 13D4     		bmi	.L483
1406:src/xeq.c     **** 		packed_from_packed128(&(result.s), cnsts_d128 - 128 + i);
 5882              		.loc 1 1406 4 is_stmt 1 view .LVU1652
1406:src/xeq.c     **** 		packed_from_packed128(&(result.s), cnsts_d128 - 128 + i);
 5883              		.loc 1 1406 11 is_stmt 0 view .LVU1653
 5884 002a 1448     		ldr	r0, .L485+8
 5885 002c 00EBC300 		add	r0, r0, r3, lsl #3
1410:src/xeq.c     **** 
 5886              		.loc 1 1410 1 view .LVU1654
 5887 0030 0BB0     		add	sp, sp, #44
 5888              		.cfi_remember_state
 5889              		.cfi_def_cfa_offset 4
 5890              		@ sp needed
 5891 0032 5DF804FB 		ldr	pc, [sp], #4
 5892              	.L481:
 5893              		.cfi_restore_state
1402:src/xeq.c     **** 	}
 5894              		.loc 1 1402 3 is_stmt 1 view .LVU1655
 5895              	.LVL429:
 5896              	.LBB1702:
 5897              	.LBI1702:
 654:src/xeq.c     **** 	decNumber temp;
 5898              		.loc 1 654 6 view .LVU1656
 5899              	.LBB1703:
 655:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 5900              		.loc 1 655 2 view .LVU1657
 656:src/xeq.c     **** }
 5901              		.loc 1 656 2 view .LVU1658
 5902              	.LBE1703:
 5903              	.LBE1702:
1402:src/xeq.c     **** 	}
 5904              		.loc 1 1402 3 is_stmt 0 view .LVU1659
 5905 0036 1148     		ldr	r0, .L485+8
 5906              	.LBB1705:
 5907              	.LBB1704:
 656:src/xeq.c     **** }
 5908              		.loc 1 656 27 view .LVU1660
 5909 0038 01A9     		add	r1, sp, #4
 5910              	.LVL430:
 656:src/xeq.c     **** }
 5911              		.loc 1 656 27 view .LVU1661
 5912 003a 00EBC300 		add	r0, r0, r3, lsl #3
 5913 003e FFF7FEFF 		bl	decimal64ToNumber
 5914              	.LVL431:
 656:src/xeq.c     **** }
 5915              		.loc 1 656 27 view .LVU1662
 5916 0042 0146     		mov	r1, r0
ARM GAS  /tmp/ccqED0AM.s 			page 232


 656:src/xeq.c     **** }
 5917              		.loc 1 656 2 view .LVU1663
 5918 0044 0E48     		ldr	r0, .L485+12
 5919 0046 FFF7FEFF 		bl	packed128_from_number
 5920              	.LVL432:
 5921              	.LBE1704:
 5922              	.LBE1705:
1409:src/xeq.c     **** }
 5923              		.loc 1 1409 9 view .LVU1664
 5924 004a 0D48     		ldr	r0, .L485+12
1410:src/xeq.c     **** 
 5925              		.loc 1 1410 1 view .LVU1665
 5926 004c 0BB0     		add	sp, sp, #44
 5927              		.cfi_remember_state
 5928              		.cfi_def_cfa_offset 4
 5929              		@ sp needed
 5930 004e 5DF804FB 		ldr	pc, [sp], #4
 5931              	.LVL433:
 5932              	.L483:
 5933              		.cfi_restore_state
1407:src/xeq.c     **** 	}
 5934              		.loc 1 1407 3 is_stmt 1 view .LVU1666
 5935              	.LBB1706:
 5936              	.LBI1706:
 648:src/xeq.c     **** 	decNumber temp;
 5937              		.loc 1 648 6 view .LVU1667
 5938              	.LBB1707:
 649:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 5939              		.loc 1 649 2 view .LVU1668
 650:src/xeq.c     **** }
 5940              		.loc 1 650 2 view .LVU1669
 5941              	.LBE1707:
 5942              	.LBE1706:
1407:src/xeq.c     **** 	}
 5943              		.loc 1 1407 3 is_stmt 0 view .LVU1670
 5944 0052 0948     		ldr	r0, .L485+4
1407:src/xeq.c     **** 	}
 5945              		.loc 1 1407 55 view .LVU1671
 5946 0054 03F18053 		add	r3, r3, #268435456
 5947              	.LVL434:
1407:src/xeq.c     **** 	}
 5948              		.loc 1 1407 55 view .LVU1672
 5949 0058 803B     		subs	r3, r3, #128
 5950              	.LVL435:
 5951              	.LBB1709:
 5952              	.LBB1708:
 650:src/xeq.c     **** }
 5953              		.loc 1 650 24 view .LVU1673
 5954 005a 00EB0310 		add	r0, r0, r3, lsl #4
 5955 005e 01A9     		add	r1, sp, #4
 5956              	.LVL436:
 650:src/xeq.c     **** }
 5957              		.loc 1 650 24 view .LVU1674
 5958 0060 FFF7FEFF 		bl	decimal128ToNumber
 5959              	.LVL437:
 650:src/xeq.c     **** }
 5960              		.loc 1 650 24 view .LVU1675
ARM GAS  /tmp/ccqED0AM.s 			page 233


 5961 0064 0146     		mov	r1, r0
 650:src/xeq.c     **** }
 5962              		.loc 1 650 2 view .LVU1676
 5963 0066 0648     		ldr	r0, .L485+12
 5964 0068 FFF7FEFF 		bl	packed_from_number
 5965              	.LVL438:
 5966              	.LBE1708:
 5967              	.LBE1709:
1409:src/xeq.c     **** }
 5968              		.loc 1 1409 9 view .LVU1677
 5969 006c 0448     		ldr	r0, .L485+12
 5970              	.LVL439:
1410:src/xeq.c     **** 
 5971              		.loc 1 1410 1 view .LVU1678
 5972 006e 0BB0     		add	sp, sp, #44
 5973              		.cfi_def_cfa_offset 4
 5974              		@ sp needed
 5975 0070 5DF804FB 		ldr	pc, [sp], #4
 5976              	.L486:
 5977              		.align	2
 5978              	.L485:
 5979 0074 00000000 		.word	cnsts
 5980 0078 00000000 		.word	cnsts_d128
 5981 007c 00000000 		.word	cnsts_d64
 5982 0080 00000000 		.word	.LANCHOR2
 5983              		.cfi_endproc
 5984              	.LFE93:
 5986              		.section	.text.get_reg_n,"ax",%progbits
 5987              		.align	1
 5988              		.p2align 2,,3
 5989              		.global	get_reg_n
 5990              		.syntax unified
 5991              		.thumb
 5992              		.thumb_func
 5993              		.fpu fpv4-sp-d16
 5995              	get_reg_n:
 5996              	.LVL440:
 5997              	.LFB91:
1364:src/xeq.c     **** 	const int dbl = is_dblmode();
 5998              		.loc 1 1364 28 is_stmt 1 view -0
 5999              		.cfi_startproc
 6000              		@ args = 0, pretend = 0, frame = 0
 6001              		@ frame_needed = 0, uses_anonymous_args = 0
 6002              		@ link register save eliminated.
1365:src/xeq.c     **** 
 6003              		.loc 1 1365 2 view .LVU1680
 6004              	.LBB1710:
 6005              	.LBI1710:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6006              		.loc 1 1118 5 view .LVU1681
 6007              	.LBB1711:
1119:src/xeq.c     **** }
 6008              		.loc 1 1119 2 view .LVU1682
1119:src/xeq.c     **** }
 6009              		.loc 1 1119 12 is_stmt 0 view .LVU1683
 6010 0000 2B4B     		ldr	r3, .L502
 6011 0002 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/ccqED0AM.s 			page 234


1119:src/xeq.c     **** }
 6012              		.loc 1 1119 24 view .LVU1684
 6013 0004 B2F8E817 		ldrh	r1, [r2, #2024]
 6014 0008 44F20103 		movw	r3, #16385
 6015 000c 0B40     		ands	r3, r3, r1
 6016 000e A3F58041 		sub	r1, r3, #16384
 6017 0012 B1FA81F1 		clz	r1, r1
 6018              	.LBE1711:
 6019              	.LBE1710:
1367:src/xeq.c     **** 		n -= CONST_REG_BASE;
 6020              		.loc 1 1367 5 view .LVU1685
 6021 0016 B0F5FA6F 		cmp	r0, #2000
 6022              	.LBB1713:
 6023              	.LBB1712:
1119:src/xeq.c     **** }
 6024              		.loc 1 1119 24 view .LVU1686
 6025 001a 4FEA5111 		lsr	r1, r1, #5
 6026              	.LVL441:
1119:src/xeq.c     **** }
 6027              		.loc 1 1119 24 view .LVU1687
 6028              	.LBE1712:
 6029              	.LBE1713:
1367:src/xeq.c     **** 		n -= CONST_REG_BASE;
 6030              		.loc 1 1367 2 is_stmt 1 view .LVU1688
1367:src/xeq.c     **** 		n -= CONST_REG_BASE;
 6031              		.loc 1 1367 5 is_stmt 0 view .LVU1689
 6032 001e 29DA     		bge	.L499
1371:src/xeq.c     **** 		return get_flash_reg_n(n - FLASH_REG_BASE);
 6033              		.loc 1 1371 2 is_stmt 1 view .LVU1690
1371:src/xeq.c     **** 		return get_flash_reg_n(n - FLASH_REG_BASE);
 6034              		.loc 1 1371 5 is_stmt 0 view .LVU1691
 6035 0020 B0F57A7F 		cmp	r0, #1000
 6036 0024 16DA     		bge	.L500
1374:src/xeq.c     **** 		// local register on the return stack
 6037              		.loc 1 1374 2 is_stmt 1 view .LVU1692
1374:src/xeq.c     **** 		// local register on the return stack
 6038              		.loc 1 1374 5 is_stmt 0 view .LVU1693
 6039 0026 6F28     		cmp	r0, #111
1364:src/xeq.c     **** 	const int dbl = is_dblmode();
 6040              		.loc 1 1364 28 view .LVU1694
 6041 0028 70B4     		push	{r4, r5, r6}
 6042              		.cfi_def_cfa_offset 12
 6043              		.cfi_offset 4, -12
 6044              		.cfi_offset 5, -8
 6045              		.cfi_offset 6, -4
1374:src/xeq.c     **** 		// local register on the return stack
 6046              		.loc 1 1374 5 view .LVU1695
 6047 002a 06DD     		ble	.L490
 6048              	.LBB1714:
 6049              	.LBI1714:
 233:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 6050              		.loc 1 233 5 is_stmt 1 view .LVU1696
 6051              	.LBE1714:
 234:src/xeq.c     **** }
 6052              		.loc 1 234 2 view .LVU1697
 6053              	.LVL442:
 6054              	.LBB1727:
ARM GAS  /tmp/ccqED0AM.s 			page 235


 6055              	.LBB1715:
 6056              	.LBI1715:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 6057              		.loc 1 225 5 view .LVU1698
 6058              	.LBB1716:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 6059              		.loc 1 226 2 view .LVU1699
 6060              	.LBE1716:
 6061              	.LBE1715:
 6062              	.LBE1727:
1119:src/xeq.c     **** }
 6063              		.loc 1 1119 2 view .LVU1700
 6064              	.LBB1728:
 6065              	.LBB1725:
 6066              	.LBB1723:
 227:src/xeq.c     **** }
 6067              		.loc 1 227 2 view .LVU1701
 6068              	.LBB1717:
 6069              	.LBI1717:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 6070              		.loc 1 217 5 view .LVU1702
 6071              	.LBB1718:
 218:src/xeq.c     **** }
 6072              		.loc 1 218 2 view .LVU1703
 218:src/xeq.c     **** }
 6073              		.loc 1 218 9 is_stmt 0 view .LVU1704
 6074 002c B2F8DE47 		ldrh	r4, [r2, #2014]
 6075 0030 44F34A15 		sbfx	r5, r4, #5, #11
 218:src/xeq.c     **** }
 6076              		.loc 1 218 57 view .LVU1705
 6077 0034 002D     		cmp	r5, #0
 218:src/xeq.c     **** }
 6078              		.loc 1 218 9 view .LVU1706
 6079 0036 2C46     		mov	r4, r5
 218:src/xeq.c     **** }
 6080              		.loc 1 218 57 view .LVU1707
 6081 0038 20DB     		blt	.L501
 6082              	.LVL443:
 6083              	.L490:
 218:src/xeq.c     **** }
 6084              		.loc 1 218 57 view .LVU1708
 6085              	.LBE1718:
 6086              	.LBE1717:
 6087              	.LBE1723:
 6088              	.LBE1725:
 6089              	.LBE1728:
1381:src/xeq.c     **** }
 6090              		.loc 1 1381 2 is_stmt 1 view .LVU1709
1381:src/xeq.c     **** }
 6091              		.loc 1 1381 55 is_stmt 0 view .LVU1710
 6092 003a 92F8CF37 		ldrb	r3, [r2, #1999]	@ zero_extendqisi2
 6093              	.LVL444:
1381:src/xeq.c     **** }
 6094              		.loc 1 1381 37 view .LVU1711
 6095 003e 02F22C41 		addw	r1, r2, #1068
1381:src/xeq.c     **** }
 6096              		.loc 1 1381 55 view .LVU1712
ARM GAS  /tmp/ccqED0AM.s 			page 236


 6097 0042 C3F16403 		rsb	r3, r3, #100
1382:src/xeq.c     **** 
 6098              		.loc 1 1382 1 view .LVU1713
 6099 0046 70BC     		pop	{r4, r5, r6}
 6100              		.cfi_restore 6
 6101              		.cfi_restore 5
 6102              		.cfi_restore 4
 6103              		.cfi_def_cfa_offset 0
1381:src/xeq.c     **** }
 6104              		.loc 1 1381 22 view .LVU1714
 6105 0048 01EBC301 		add	r1, r1, r3, lsl #3
 6106 004c 02F24C72 		addw	r2, r2, #1868
 6107              	.LVL445:
1381:src/xeq.c     **** }
 6108              		.loc 1 1381 22 view .LVU1715
 6109 0050 FFF7FEBF 		b	reg_address
 6110              	.LVL446:
 6111              	.L500:
1372:src/xeq.c     **** 
 6112              		.loc 1 1372 3 is_stmt 1 view .LVU1716
 6113              	.LBB1729:
 6114              	.LBI1729:
1385:src/xeq.c     **** 	return (REGISTER *) reg_address(n, BackupFlash._regs + TOPREALREG - BackupFlash._numregs,
 6115              		.loc 1 1385 11 view .LVU1717
 6116              	.LBB1730:
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6117              		.loc 1 1386 2 view .LVU1718
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6118              		.loc 1 1386 37 is_stmt 0 view .LVU1719
 6119 0054 174B     		ldr	r3, .L502+4
 6120 0056 1A68     		ldr	r2, [r3]
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6121              		.loc 1 1386 68 view .LVU1720
 6122 0058 92F8CF37 		ldrb	r3, [r2, #1999]	@ zero_extendqisi2
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6123              		.loc 1 1386 37 view .LVU1721
 6124 005c 02F22C41 		addw	r1, r2, #1068
 6125              	.LVL447:
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6126              		.loc 1 1386 68 view .LVU1722
 6127 0060 C3F16403 		rsb	r3, r3, #100
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6128              		.loc 1 1386 22 view .LVU1723
 6129 0064 A0F57A70 		sub	r0, r0, #1000
 6130              	.LVL448:
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6131              		.loc 1 1386 22 view .LVU1724
 6132 0068 01EBC301 		add	r1, r1, r3, lsl #3
 6133 006c 02F24C72 		addw	r2, r2, #1868
 6134 0070 FFF7FEBF 		b	reg_address
 6135              	.LVL449:
 6136              	.L499:
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6137              		.loc 1 1386 22 view .LVU1725
 6138              	.LBE1730:
 6139              	.LBE1729:
1368:src/xeq.c     **** 		return get_const(n, dbl);
ARM GAS  /tmp/ccqED0AM.s 			page 237


 6140              		.loc 1 1368 3 is_stmt 1 view .LVU1726
1369:src/xeq.c     **** 	}
 6141              		.loc 1 1369 3 view .LVU1727
1369:src/xeq.c     **** 	}
 6142              		.loc 1 1369 10 is_stmt 0 view .LVU1728
 6143 0074 A0F5FA60 		sub	r0, r0, #2000
 6144              	.LVL450:
1369:src/xeq.c     **** 	}
 6145              		.loc 1 1369 10 view .LVU1729
 6146 0078 FFF7FEBF 		b	get_const
 6147              	.LVL451:
 6148              	.L501:
 6149              		.cfi_def_cfa_offset 12
 6150              		.cfi_offset 4, -12
 6151              		.cfi_offset 5, -8
 6152              		.cfi_offset 6, -4
 6153              	.LBB1731:
 6154              	.LBB1726:
 6155              	.LBB1724:
 6156              	.LBB1721:
 6157              	.LBB1719:
 218:src/xeq.c     **** }
 6158              		.loc 1 218 25 view .LVU1730
 6159 007c 0E4E     		ldr	r6, .L502+8
 6160 007e 3668     		ldr	r6, [r6]
 6161              	.LVL452:
 218:src/xeq.c     **** }
 6162              		.loc 1 218 57 view .LVU1731
 6163 0080 36F81550 		ldrh	r5, [r6, r5, lsl #1]
 6164              	.LBE1719:
 6165              	.LBE1721:
 227:src/xeq.c     **** }
 6166              		.loc 1 227 30 view .LVU1732
 6167 0084 0231     		adds	r1, r1, #2
 6168              	.LVL453:
 6169              	.LBB1722:
 6170              	.LBB1720:
 218:src/xeq.c     **** }
 6171              		.loc 1 218 57 view .LVU1733
 6172 0086 C5F30B05 		ubfx	r5, r5, #0, #12
 6173              	.LBE1720:
 6174              	.LBE1722:
 6175              	.LBE1724:
 6176              	.LBE1726:
 6177              	.LBE1731:
1374:src/xeq.c     **** 		// local register on the return stack
 6178              		.loc 1 1374 26 view .LVU1734
 6179 008a 55FA01F1 		asrs	r1, r5, r1
 6180              	.LVL454:
1374:src/xeq.c     **** 		// local register on the return stack
 6181              		.loc 1 1374 26 view .LVU1735
 6182 008e D4D0     		beq	.L490
1376:src/xeq.c     **** 		if (dbl)
 6183              		.loc 1 1376 3 is_stmt 1 view .LVU1736
1376:src/xeq.c     **** 		if (dbl)
 6184              		.loc 1 1376 5 is_stmt 0 view .LVU1737
 6185 0090 7038     		subs	r0, r0, #112
ARM GAS  /tmp/ccqED0AM.s 			page 238


 6186              	.LVL455:
1377:src/xeq.c     **** 			n <<= 1;
 6187              		.loc 1 1377 3 is_stmt 1 view .LVU1738
1377:src/xeq.c     **** 			n <<= 1;
 6188              		.loc 1 1377 6 is_stmt 0 view .LVU1739
 6189 0092 B3F5804F 		cmp	r3, #16384
1378:src/xeq.c     **** 		return (REGISTER *) ((decimal64 *) (RetStk + (short)((LocalRegs + 2) & 0xfffe)) + n);
 6190              		.loc 1 1378 4 is_stmt 1 view .LVU1740
1378:src/xeq.c     **** 		return (REGISTER *) ((decimal64 *) (RetStk + (short)((LocalRegs + 2) & 0xfffe)) + n);
 6191              		.loc 1 1378 6 is_stmt 0 view .LVU1741
 6192 0096 08BF     		it	eq
 6193 0098 4000     		lsleq	r0, r0, #1
 6194              	.LVL456:
1379:src/xeq.c     **** 	}
 6195              		.loc 1 1379 3 is_stmt 1 view .LVU1742
1379:src/xeq.c     **** 	}
 6196              		.loc 1 1379 67 is_stmt 0 view .LVU1743
 6197 009a 0234     		adds	r4, r4, #2
1379:src/xeq.c     **** 	}
 6198              		.loc 1 1379 48 view .LVU1744
 6199 009c 24F00104 		bic	r4, r4, #1
1379:src/xeq.c     **** 	}
 6200              		.loc 1 1379 83 view .LVU1745
 6201 00a0 C000     		lsls	r0, r0, #3
 6202              	.LVL457:
1379:src/xeq.c     **** 	}
 6203              		.loc 1 1379 10 view .LVU1746
 6204 00a2 0223     		movs	r3, #2
 6205              	.LVL458:
1379:src/xeq.c     **** 	}
 6206              		.loc 1 1379 10 view .LVU1747
 6207 00a4 14FB0300 		smlabb	r0, r4, r3, r0
 6208 00a8 3044     		add	r0, r0, r6
1382:src/xeq.c     **** 
 6209              		.loc 1 1382 1 view .LVU1748
 6210 00aa 70BC     		pop	{r4, r5, r6}
 6211              		.cfi_restore 6
 6212              		.cfi_restore 5
 6213              		.cfi_restore 4
 6214              		.cfi_def_cfa_offset 0
 6215 00ac 7047     		bx	lr
 6216              	.L503:
 6217 00ae 00BF     		.align	2
 6218              	.L502:
 6219 00b0 00000000 		.word	main_ram
 6220 00b4 00000000 		.word	backup_ram
 6221 00b8 00000000 		.word	RetStk
 6222              		.cfi_endproc
 6223              	.LFE91:
 6225              		.section	.text.get_stack,"ax",%progbits
 6226              		.align	1
 6227              		.p2align 2,,3
 6228              		.global	get_stack
 6229              		.syntax unified
 6230              		.thumb
 6231              		.thumb_func
 6232              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccqED0AM.s 			page 239


 6234              	get_stack:
 6235              	.LVL459:
 6236              	.LFB43:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6237              		.loc 1 718 30 is_stmt 1 view -0
 6238              		.cfi_startproc
 6239              		@ args = 0, pretend = 0, frame = 0
 6240              		@ frame_needed = 0, uses_anonymous_args = 0
 6241              		@ link register save eliminated.
 719:src/xeq.c     **** }
 6242              		.loc 1 719 2 view .LVU1750
 719:src/xeq.c     **** }
 6243              		.loc 1 719 9 is_stmt 0 view .LVU1751
 6244 0000 6430     		adds	r0, r0, #100
 6245              	.LVL460:
 719:src/xeq.c     **** }
 6246              		.loc 1 719 9 view .LVU1752
 6247 0002 FFF7FEBF 		b	get_reg_n
 6248              	.LVL461:
 719:src/xeq.c     **** }
 6249              		.loc 1 719 9 view .LVU1753
 6250              		.cfi_endproc
 6251              	.LFE43:
 6253 0006 00BF     		.section	.text.lift,"ax",%progbits
 6254              		.align	1
 6255              		.p2align 2,,3
 6256              		.global	lift
 6257              		.syntax unified
 6258              		.thumb
 6259              		.thumb_func
 6260              		.fpu fpv4-sp-d16
 6262              	lift:
 6263              	.LFB47:
 736:src/xeq.c     **** 	const int n = stack_size();
 6264              		.loc 1 736 17 is_stmt 1 view -0
 6265              		.cfi_startproc
 6266              		@ args = 0, pretend = 0, frame = 0
 6267              		@ frame_needed = 0, uses_anonymous_args = 0
 737:src/xeq.c     **** 	int i;
 6268              		.loc 1 737 2 view .LVU1755
 6269              	.LBB1732:
 6270              	.LBI1732:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 6271              		.loc 1 712 5 view .LVU1756
 6272              	.LBB1733:
 713:src/xeq.c     **** 		return 4;
 6273              		.loc 1 713 2 view .LVU1757
 6274              	.LBE1733:
 6275              	.LBE1732:
 736:src/xeq.c     **** 	const int n = stack_size();
 6276              		.loc 1 736 17 is_stmt 0 view .LVU1758
 6277 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 6278              		.cfi_def_cfa_offset 24
 6279              		.cfi_offset 3, -24
 6280              		.cfi_offset 4, -20
 6281              		.cfi_offset 5, -16
 6282              		.cfi_offset 6, -12
ARM GAS  /tmp/ccqED0AM.s 			page 240


 6283              		.cfi_offset 7, -8
 6284              		.cfi_offset 14, -4
 6285              	.LBB1738:
 6286              	.LBB1736:
 713:src/xeq.c     **** 		return 4;
 6287              		.loc 1 713 8 view .LVU1759
 6288 0002 184E     		ldr	r6, .L516
 6289 0004 3368     		ldr	r3, [r6]
 713:src/xeq.c     **** 		return 4;
 6290              		.loc 1 713 6 view .LVU1760
 6291 0006 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 6292              		.loc 1 713 5 view .LVU1761
 6293 000a 1207     		lsls	r2, r2, #28
 6294 000c 28D5     		bpl	.L509
 6295              	.LBB1734:
 6296              	.LBI1734:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 6297              		.loc 1 185 5 is_stmt 1 view .LVU1762
 6298              	.LBB1735:
 186:src/xeq.c     **** }
 6299              		.loc 1 186 2 view .LVU1763
 186:src/xeq.c     **** }
 6300              		.loc 1 186 9 is_stmt 0 view .LVU1764
 6301 000e B3F8E037 		ldrh	r3, [r3, #2016]
 6302              	.LBE1735:
 6303              	.LBE1734:
 713:src/xeq.c     **** 		return 4;
 6304              		.loc 1 713 27 view .LVU1765
 6305 0012 9B0B     		lsrs	r3, r3, #14
 6306 0014 032B     		cmp	r3, #3
 6307 0016 1BD0     		beq	.L515
 6308 0018 0724     		movs	r4, #7
 6309              	.L506:
 6310              	.LBE1736:
 6311              	.LBE1738:
 738:src/xeq.c     **** 	for (i=n-1; i>0; i--)
 6312              		.loc 1 738 2 is_stmt 1 view .LVU1766
 739:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6313              		.loc 1 739 2 view .LVU1767
 739:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6314              		.loc 1 739 14 view .LVU1768
 6315 001a 6434     		adds	r4, r4, #100
 6316              	.LBB1739:
 6317              	.LBB1740:
 6318              	.LBB1741:
 6319              	.LBB1742:
1119:src/xeq.c     **** }
 6320              		.loc 1 1119 24 is_stmt 0 view .LVU1769
 6321 001c 44F20107 		movw	r7, #16385
 6322              	.L508:
 6323              	.LVL462:
1119:src/xeq.c     **** }
 6324              		.loc 1 1119 24 view .LVU1770
 6325              	.LBE1742:
 6326              	.LBE1741:
 6327              	.LBE1740:
ARM GAS  /tmp/ccqED0AM.s 			page 241


 6328              	.LBE1739:
 740:src/xeq.c     **** }
 6329              		.loc 1 740 3 is_stmt 1 view .LVU1771
 6330              	.LBB1749:
 6331              	.LBI1749:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6332              		.loc 1 718 11 view .LVU1772
 6333              	.LBB1750:
 719:src/xeq.c     **** }
 6334              		.loc 1 719 2 view .LVU1773
 719:src/xeq.c     **** }
 6335              		.loc 1 719 9 is_stmt 0 view .LVU1774
 6336 0020 2046     		mov	r0, r4
 6337 0022 FFF7FEFF 		bl	get_reg_n
 6338              	.LVL463:
 6339              	.LBE1750:
 6340              	.LBE1749:
 6341              	.LBB1752:
 6342              	.LBB1753:
 6343 0026 013C     		subs	r4, r4, #1
 6344              	.LVL464:
 719:src/xeq.c     **** }
 6345              		.loc 1 719 9 view .LVU1775
 6346              	.LBE1753:
 6347              	.LBE1752:
 6348              	.LBB1757:
 6349              	.LBB1751:
 6350 0028 0546     		mov	r5, r0
 6351              	.LBE1751:
 6352              	.LBE1757:
 6353              	.LBB1758:
 6354              	.LBB1754:
 6355 002a 2046     		mov	r0, r4
 6356              	.LVL465:
 719:src/xeq.c     **** }
 6357              		.loc 1 719 9 view .LVU1776
 6358              	.LBE1754:
 6359              	.LBI1752:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6360              		.loc 1 718 11 is_stmt 1 view .LVU1777
 6361              	.LBB1755:
 719:src/xeq.c     **** }
 6362              		.loc 1 719 2 view .LVU1778
 719:src/xeq.c     **** }
 6363              		.loc 1 719 9 is_stmt 0 view .LVU1779
 6364 002c FFF7FEFF 		bl	get_reg_n
 6365              	.LVL466:
 719:src/xeq.c     **** }
 6366              		.loc 1 719 9 view .LVU1780
 6367              	.LBE1755:
 6368              	.LBE1758:
 6369              	.LBB1759:
 6370              	.LBB1747:
 6371              	.LBB1745:
 6372              	.LBB1743:
1119:src/xeq.c     **** }
 6373              		.loc 1 1119 24 view .LVU1781
ARM GAS  /tmp/ccqED0AM.s 			page 242


 6374 0030 3368     		ldr	r3, [r6]
 6375 0032 B3F8E837 		ldrh	r3, [r3, #2024]
 6376              	.LBE1743:
 6377              	.LBE1745:
 727:src/xeq.c     **** }
 6378              		.loc 1 727 2 view .LVU1782
 6379 0036 3B40     		ands	r3, r3, r7
 6380 0038 B3F5804F 		cmp	r3, #16384
 6381              	.LBE1747:
 6382              	.LBE1759:
 6383              	.LBB1760:
 6384              	.LBB1756:
 719:src/xeq.c     **** }
 6385              		.loc 1 719 9 view .LVU1783
 6386 003c 0146     		mov	r1, r0
 6387              	.LVL467:
 719:src/xeq.c     **** }
 6388              		.loc 1 719 9 view .LVU1784
 6389              	.LBE1756:
 6390              	.LBE1760:
 6391              	.LBB1761:
 6392              	.LBI1739:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6393              		.loc 1 726 6 is_stmt 1 view .LVU1785
 6394              	.LBB1748:
 727:src/xeq.c     **** }
 6395              		.loc 1 727 2 view .LVU1786
 6396              	.LBB1746:
 6397              	.LBI1741:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6398              		.loc 1 1118 5 view .LVU1787
 6399              	.LBB1744:
1119:src/xeq.c     **** }
 6400              		.loc 1 1119 2 view .LVU1788
 6401              	.LBE1744:
 6402              	.LBE1746:
 727:src/xeq.c     **** }
 6403              		.loc 1 727 2 is_stmt 0 view .LVU1789
 6404 003e 0CBF     		ite	eq
 6405 0040 1022     		moveq	r2, #16
 6406 0042 0822     		movne	r2, #8
 6407 0044 2846     		mov	r0, r5
 6408              	.LVL468:
 727:src/xeq.c     **** }
 6409              		.loc 1 727 2 view .LVU1790
 6410 0046 FFF7FEFF 		bl	xcopy
 6411              	.LVL469:
 727:src/xeq.c     **** }
 6412              		.loc 1 727 2 view .LVU1791
 6413              	.LBE1748:
 6414              	.LBE1761:
 739:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6415              		.loc 1 739 19 is_stmt 1 view .LVU1792
 739:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6416              		.loc 1 739 14 view .LVU1793
 739:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6417              		.loc 1 739 2 is_stmt 0 view .LVU1794
ARM GAS  /tmp/ccqED0AM.s 			page 243


 6418 004a 642C     		cmp	r4, #100
 6419 004c E8D1     		bne	.L508
 741:src/xeq.c     **** 
 6420              		.loc 1 741 1 view .LVU1795
 6421 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 6422              	.LVL470:
 6423              	.L515:
 6424              	.LBB1762:
 6425              	.LBB1737:
 713:src/xeq.c     **** 		return 4;
 6426              		.loc 1 713 44 view .LVU1796
 6427 0050 054B     		ldr	r3, .L516+4
 713:src/xeq.c     **** 		return 4;
 6428              		.loc 1 713 41 view .LVU1797
 6429 0052 93F90130 		ldrsb	r3, [r3, #1]
 6430 0056 002B     		cmp	r3, #0
 6431 0058 B4BF     		ite	lt
 6432 005a 0724     		movlt	r4, #7
 6433 005c 0324     		movge	r4, #3
 6434 005e DCE7     		b	.L506
 6435              	.L509:
 6436 0060 0324     		movs	r4, #3
 6437 0062 DAE7     		b	.L506
 6438              	.L517:
 6439              		.align	2
 6440              	.L516:
 6441 0064 00000000 		.word	main_ram
 6442 0068 00000000 		.word	XromParams
 6443              	.LBE1737:
 6444              	.LBE1762:
 6445              		.cfi_endproc
 6446              	.LFE47:
 6448              		.section	.text.lift_if_enabled,"ax",%progbits
 6449              		.align	1
 6450              		.p2align 2,,3
 6451              		.global	lift_if_enabled
 6452              		.syntax unified
 6453              		.thumb
 6454              		.thumb_func
 6455              		.fpu fpv4-sp-d16
 6457              	lift_if_enabled:
 6458              	.LFB49:
 747:src/xeq.c     **** 	if (get_lift())
 6459              		.loc 1 747 28 is_stmt 1 view -0
 6460              		.cfi_startproc
 6461              		@ args = 0, pretend = 0, frame = 0
 6462              		@ frame_needed = 0, uses_anonymous_args = 0
 6463              		@ link register save eliminated.
 748:src/xeq.c     **** 		lift();
 6464              		.loc 1 748 2 view .LVU1799
 6465              	.LBB1763:
 6466              	.LBI1763:
 743:src/xeq.c     **** 	return State2.state_lift;
 6467              		.loc 1 743 12 view .LVU1800
 6468              	.LBB1764:
 744:src/xeq.c     **** }
 6469              		.loc 1 744 2 view .LVU1801
ARM GAS  /tmp/ccqED0AM.s 			page 244


 744:src/xeq.c     **** }
 6470              		.loc 1 744 15 is_stmt 0 view .LVU1802
 6471 0000 034B     		ldr	r3, .L521
 6472 0002 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 6473              	.LBE1764:
 6474              	.LBE1763:
 748:src/xeq.c     **** 		lift();
 6475              		.loc 1 748 5 view .LVU1803
 6476 0004 5B06     		lsls	r3, r3, #25
 6477 0006 00D4     		bmi	.L520
 750:src/xeq.c     **** 
 6478              		.loc 1 750 1 view .LVU1804
 6479 0008 7047     		bx	lr
 6480              	.L520:
 749:src/xeq.c     **** }
 6481              		.loc 1 749 3 is_stmt 1 view .LVU1805
 6482 000a FFF7FEBF 		b	lift
 6483              	.LVL471:
 6484              	.L522:
 6485 000e 00BF     		.align	2
 6486              	.L521:
 6487 0010 00000000 		.word	StateWhileOn
 6488              		.cfi_endproc
 6489              	.LFE49:
 6491              		.section	.text.lift2_if_enabled,"ax",%progbits
 6492              		.align	1
 6493              		.p2align 2,,3
 6494              		.syntax unified
 6495              		.thumb
 6496              		.thumb_func
 6497              		.fpu fpv4-sp-d16
 6499              	lift2_if_enabled:
 6500              	.LFB50:
 752:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 6501              		.loc 1 752 36 view -0
 6502              		.cfi_startproc
 6503              		@ args = 0, pretend = 0, frame = 0
 6504              		@ frame_needed = 0, uses_anonymous_args = 0
 754:src/xeq.c     **** 	if (C_LOCKED) {
 6505              		.loc 1 754 2 view .LVU1807
 6506              	.LBB1779:
 6507              	.LBI1779:
 747:src/xeq.c     **** 	if (get_lift())
 6508              		.loc 1 747 6 view .LVU1808
 6509              	.LBB1780:
 748:src/xeq.c     **** 		lift();
 6510              		.loc 1 748 2 view .LVU1809
 6511              	.LBB1781:
 6512              	.LBI1781:
 743:src/xeq.c     **** 	return State2.state_lift;
 6513              		.loc 1 743 12 view .LVU1810
 6514              	.LBB1782:
 744:src/xeq.c     **** }
 6515              		.loc 1 744 2 view .LVU1811
 6516              	.LBE1782:
 6517              	.LBE1781:
 6518              	.LBE1780:
ARM GAS  /tmp/ccqED0AM.s 			page 245


 6519              	.LBE1779:
 752:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 6520              		.loc 1 752 36 is_stmt 0 view .LVU1812
 6521 0000 10B5     		push	{r4, lr}
 6522              		.cfi_def_cfa_offset 8
 6523              		.cfi_offset 4, -8
 6524              		.cfi_offset 14, -4
 6525              	.LBB1787:
 6526              	.LBB1785:
 6527              	.LBB1784:
 6528              	.LBB1783:
 744:src/xeq.c     **** }
 6529              		.loc 1 744 15 view .LVU1813
 6530 0002 0F4C     		ldr	r4, .L534
 6531 0004 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 6532              	.LBE1783:
 6533              	.LBE1784:
 748:src/xeq.c     **** 		lift();
 6534              		.loc 1 748 5 view .LVU1814
 6535 0006 5A06     		lsls	r2, r3, #25
 6536 0008 08D4     		bmi	.L533
 6537              	.LBE1785:
 6538              	.LBE1787:
 755:src/xeq.c     **** 		lift_if_enabled();
 6539              		.loc 1 755 2 is_stmt 1 view .LVU1815
 755:src/xeq.c     **** 		lift_if_enabled();
 6540              		.loc 1 755 6 is_stmt 0 view .LVU1816
 6541 000a 0E4B     		ldr	r3, .L534+4
 6542 000c 1B68     		ldr	r3, [r3]
 6543 000e 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 755:src/xeq.c     **** 		lift_if_enabled();
 6544              		.loc 1 755 5 view .LVU1817
 6545 0012 03F04103 		and	r3, r3, #65
 6546 0016 412B     		cmp	r3, #65
 6547 0018 0DD1     		bne	.L526
 6548              	.L523:
 765:src/xeq.c     **** 
 6549              		.loc 1 765 1 view .LVU1818
 6550 001a 10BD     		pop	{r4, pc}
 6551              	.L533:
 6552              	.LBB1788:
 6553              	.LBB1786:
 749:src/xeq.c     **** }
 6554              		.loc 1 749 3 is_stmt 1 view .LVU1819
 6555 001c FFF7FEFF 		bl	lift
 6556              	.LVL472:
 6557              	.LBE1786:
 6558              	.LBE1788:
 755:src/xeq.c     **** 		lift_if_enabled();
 6559              		.loc 1 755 2 view .LVU1820
 755:src/xeq.c     **** 		lift_if_enabled();
 6560              		.loc 1 755 6 is_stmt 0 view .LVU1821
 6561 0020 084B     		ldr	r3, .L534+4
 6562 0022 1B68     		ldr	r3, [r3]
 6563 0024 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 755:src/xeq.c     **** 		lift_if_enabled();
 6564              		.loc 1 755 5 view .LVU1822
ARM GAS  /tmp/ccqED0AM.s 			page 246


 6565 0028 03F04103 		and	r3, r3, #65
 6566 002c 412B     		cmp	r3, #65
 6567 002e 02D1     		bne	.L526
 6568              	.LBB1789:
 6569              	.LBI1789:
 752:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 6570              		.loc 1 752 13 is_stmt 1 view .LVU1823
 6571              	.LBE1789:
 756:src/xeq.c     **** 	}
 6572              		.loc 1 756 3 view .LVU1824
 6573              	.LBB1796:
 6574              	.LBB1790:
 6575              	.LBI1790:
 747:src/xeq.c     **** 	if (get_lift())
 6576              		.loc 1 747 6 view .LVU1825
 6577              	.LBB1791:
 748:src/xeq.c     **** 		lift();
 6578              		.loc 1 748 2 view .LVU1826
 6579              	.LBB1792:
 6580              	.LBI1792:
 743:src/xeq.c     **** 	return State2.state_lift;
 6581              		.loc 1 743 12 view .LVU1827
 6582              	.LBB1793:
 744:src/xeq.c     **** }
 6583              		.loc 1 744 2 view .LVU1828
 744:src/xeq.c     **** }
 6584              		.loc 1 744 15 is_stmt 0 view .LVU1829
 6585 0030 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 6586              	.LBE1793:
 6587              	.LBE1792:
 748:src/xeq.c     **** 		lift();
 6588              		.loc 1 748 5 view .LVU1830
 6589 0032 5B06     		lsls	r3, r3, #25
 6590 0034 F1D5     		bpl	.L523
 6591              	.L526:
 749:src/xeq.c     **** }
 6592              		.loc 1 749 3 is_stmt 1 view .LVU1831
 6593              	.LBE1791:
 6594              	.LBE1790:
 6595              	.LBE1796:
 765:src/xeq.c     **** 
 6596              		.loc 1 765 1 is_stmt 0 view .LVU1832
 6597 0036 BDE81040 		pop	{r4, lr}
 6598              		.cfi_restore 14
 6599              		.cfi_restore 4
 6600              		.cfi_def_cfa_offset 0
 6601              	.LBB1797:
 6602              	.LBB1795:
 6603              	.LBB1794:
 749:src/xeq.c     **** }
 6604              		.loc 1 749 3 view .LVU1833
 6605 003a FFF7FEBF 		b	lift
 6606              	.LVL473:
 6607              	.L535:
 6608 003e 00BF     		.align	2
 6609              	.L534:
 6610 0040 00000000 		.word	StateWhileOn
ARM GAS  /tmp/ccqED0AM.s 			page 247


 6611 0044 00000000 		.word	main_ram
 6612              	.LBE1794:
 6613              	.LBE1795:
 6614              	.LBE1797:
 6615              		.cfi_endproc
 6616              	.LFE50:
 6618              		.section	.text.lower,"ax",%progbits
 6619              		.align	1
 6620              		.p2align 2,,3
 6621              		.syntax unified
 6622              		.thumb
 6623              		.thumb_func
 6624              		.fpu fpv4-sp-d16
 6626              	lower:
 6627              	.LFB53:
 775:src/xeq.c     **** 	const int n = stack_size();
 6628              		.loc 1 775 25 is_stmt 1 view -0
 6629              		.cfi_startproc
 6630              		@ args = 0, pretend = 0, frame = 0
 6631              		@ frame_needed = 0, uses_anonymous_args = 0
 776:src/xeq.c     **** 	int i;
 6632              		.loc 1 776 2 view .LVU1835
 6633              	.LBB1798:
 6634              	.LBI1798:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 6635              		.loc 1 712 5 view .LVU1836
 6636              	.LBB1799:
 713:src/xeq.c     **** 		return 4;
 6637              		.loc 1 713 2 view .LVU1837
 6638              	.LBE1799:
 6639              	.LBE1798:
 775:src/xeq.c     **** 	const int n = stack_size();
 6640              		.loc 1 775 25 is_stmt 0 view .LVU1838
 6641 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 6642              		.cfi_def_cfa_offset 24
 6643              		.cfi_offset 4, -24
 6644              		.cfi_offset 5, -20
 6645              		.cfi_offset 6, -16
 6646              		.cfi_offset 7, -12
 6647              		.cfi_offset 8, -8
 6648              		.cfi_offset 14, -4
 6649              	.LBB1805:
 6650              	.LBB1802:
 713:src/xeq.c     **** 		return 4;
 6651              		.loc 1 713 8 view .LVU1839
 6652 0004 194F     		ldr	r7, .L547
 6653 0006 3B68     		ldr	r3, [r7]
 713:src/xeq.c     **** 		return 4;
 6654              		.loc 1 713 6 view .LVU1840
 6655 0008 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 6656              		.loc 1 713 5 view .LVU1841
 6657 000c 1207     		lsls	r2, r2, #28
 6658 000e 2BD5     		bpl	.L540
 6659              	.LBB1800:
 6660              	.LBI1800:
 185:src/xeq.c     **** 	return isXROM(state_pc());
ARM GAS  /tmp/ccqED0AM.s 			page 248


 6661              		.loc 1 185 5 is_stmt 1 view .LVU1842
 6662              	.LBB1801:
 186:src/xeq.c     **** }
 6663              		.loc 1 186 2 view .LVU1843
 186:src/xeq.c     **** }
 6664              		.loc 1 186 9 is_stmt 0 view .LVU1844
 6665 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 6666              	.LBE1801:
 6667              	.LBE1800:
 713:src/xeq.c     **** 		return 4;
 6668              		.loc 1 713 27 view .LVU1845
 6669 0014 9B0B     		lsrs	r3, r3, #14
 6670 0016 032B     		cmp	r3, #3
 6671 0018 1ED0     		beq	.L546
 715:src/xeq.c     **** }
 6672              		.loc 1 715 9 view .LVU1846
 6673 001a 0826     		movs	r6, #8
 6674              	.L537:
 6675              	.LVL474:
 715:src/xeq.c     **** }
 6676              		.loc 1 715 9 view .LVU1847
 6677              	.LBE1802:
 6678              	.LBE1805:
 777:src/xeq.c     **** 
 6679              		.loc 1 777 2 is_stmt 1 view .LVU1848
 779:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6680              		.loc 1 779 2 view .LVU1849
 779:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6681              		.loc 1 779 12 view .LVU1850
 6682 001c 6336     		adds	r6, r6, #99
 6683              	.LVL475:
 6684              	.LBB1806:
 6685              	.LBB1803:
 714:src/xeq.c     **** 	return 8;
 6686              		.loc 1 714 10 is_stmt 0 view .LVU1851
 6687 001e 6424     		movs	r4, #100
 6688              	.LBE1803:
 6689              	.LBE1806:
 6690              	.LBB1807:
 6691              	.LBB1808:
 6692              	.LBB1809:
 6693              	.LBB1810:
1119:src/xeq.c     **** }
 6694              		.loc 1 1119 24 view .LVU1852
 6695 0020 44F20108 		movw	r8, #16385
 6696              	.LVL476:
 6697              	.L539:
1119:src/xeq.c     **** }
 6698              		.loc 1 1119 24 view .LVU1853
 6699              	.LBE1810:
 6700              	.LBE1809:
 6701              	.LBE1808:
 6702              	.LBE1807:
 780:src/xeq.c     **** }
 6703              		.loc 1 780 3 is_stmt 1 discriminator 3 view .LVU1854
 6704              	.LBB1817:
 6705              	.LBI1817:
ARM GAS  /tmp/ccqED0AM.s 			page 249


 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6706              		.loc 1 718 11 discriminator 3 view .LVU1855
 6707              	.LBB1818:
 719:src/xeq.c     **** }
 6708              		.loc 1 719 2 discriminator 3 view .LVU1856
 719:src/xeq.c     **** }
 6709              		.loc 1 719 9 is_stmt 0 discriminator 3 view .LVU1857
 6710 0024 2046     		mov	r0, r4
 6711 0026 FFF7FEFF 		bl	get_reg_n
 6712              	.LVL477:
 6713 002a 0134     		adds	r4, r4, #1
 6714              	.LVL478:
 719:src/xeq.c     **** }
 6715              		.loc 1 719 9 discriminator 3 view .LVU1858
 6716 002c 0546     		mov	r5, r0
 6717              	.LBE1818:
 6718              	.LBE1817:
 6719              	.LBB1819:
 6720              	.LBB1820:
 6721 002e 2046     		mov	r0, r4
 6722              	.LVL479:
 719:src/xeq.c     **** }
 6723              		.loc 1 719 9 discriminator 3 view .LVU1859
 6724              	.LBE1820:
 6725              	.LBI1819:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6726              		.loc 1 718 11 is_stmt 1 discriminator 3 view .LVU1860
 6727              	.LBB1821:
 719:src/xeq.c     **** }
 6728              		.loc 1 719 2 discriminator 3 view .LVU1861
 719:src/xeq.c     **** }
 6729              		.loc 1 719 9 is_stmt 0 discriminator 3 view .LVU1862
 6730 0030 FFF7FEFF 		bl	get_reg_n
 6731              	.LVL480:
 719:src/xeq.c     **** }
 6732              		.loc 1 719 9 discriminator 3 view .LVU1863
 6733              	.LBE1821:
 6734              	.LBE1819:
 6735              	.LBB1823:
 6736              	.LBB1815:
 6737              	.LBB1813:
 6738              	.LBB1811:
1119:src/xeq.c     **** }
 6739              		.loc 1 1119 24 discriminator 3 view .LVU1864
 6740 0034 3B68     		ldr	r3, [r7]
 6741 0036 B3F8E837 		ldrh	r3, [r3, #2024]
 6742              	.LBE1811:
 6743              	.LBE1813:
 727:src/xeq.c     **** }
 6744              		.loc 1 727 2 discriminator 3 view .LVU1865
 6745 003a 08EA0303 		and	r3, r8, r3
 6746 003e B3F5804F 		cmp	r3, #16384
 6747              	.LBE1815:
 6748              	.LBE1823:
 6749              	.LBB1824:
 6750              	.LBB1822:
 719:src/xeq.c     **** }
ARM GAS  /tmp/ccqED0AM.s 			page 250


 6751              		.loc 1 719 9 discriminator 3 view .LVU1866
 6752 0042 0146     		mov	r1, r0
 6753              	.LVL481:
 719:src/xeq.c     **** }
 6754              		.loc 1 719 9 discriminator 3 view .LVU1867
 6755              	.LBE1822:
 6756              	.LBE1824:
 6757              	.LBB1825:
 6758              	.LBI1807:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6759              		.loc 1 726 6 is_stmt 1 discriminator 3 view .LVU1868
 6760              	.LBB1816:
 727:src/xeq.c     **** }
 6761              		.loc 1 727 2 discriminator 3 view .LVU1869
 6762              	.LBB1814:
 6763              	.LBI1809:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6764              		.loc 1 1118 5 discriminator 3 view .LVU1870
 6765              	.LBB1812:
1119:src/xeq.c     **** }
 6766              		.loc 1 1119 2 discriminator 3 view .LVU1871
 6767              	.LBE1812:
 6768              	.LBE1814:
 727:src/xeq.c     **** }
 6769              		.loc 1 727 2 is_stmt 0 discriminator 3 view .LVU1872
 6770 0044 0CBF     		ite	eq
 6771 0046 1022     		moveq	r2, #16
 6772 0048 0822     		movne	r2, #8
 6773 004a 2846     		mov	r0, r5
 6774              	.LVL482:
 727:src/xeq.c     **** }
 6775              		.loc 1 727 2 discriminator 3 view .LVU1873
 6776 004c FFF7FEFF 		bl	xcopy
 6777              	.LVL483:
 727:src/xeq.c     **** }
 6778              		.loc 1 727 2 discriminator 3 view .LVU1874
 6779              	.LBE1816:
 6780              	.LBE1825:
 779:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6781              		.loc 1 779 17 is_stmt 1 discriminator 3 view .LVU1875
 779:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6782              		.loc 1 779 12 discriminator 3 view .LVU1876
 779:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6783              		.loc 1 779 2 is_stmt 0 discriminator 3 view .LVU1877
 6784 0050 B442     		cmp	r4, r6
 6785 0052 E7D1     		bne	.L539
 781:src/xeq.c     **** 
 6786              		.loc 1 781 1 view .LVU1878
 6787 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 6788              	.LVL484:
 6789              	.L546:
 6790              	.LBB1826:
 6791              	.LBB1804:
 713:src/xeq.c     **** 		return 4;
 6792              		.loc 1 713 44 view .LVU1879
 6793 0058 054B     		ldr	r3, .L547+4
 713:src/xeq.c     **** 		return 4;
ARM GAS  /tmp/ccqED0AM.s 			page 251


 6794              		.loc 1 713 41 view .LVU1880
 6795 005a 93F90130 		ldrsb	r3, [r3, #1]
 714:src/xeq.c     **** 	return 8;
 6796              		.loc 1 714 10 view .LVU1881
 6797 005e 002B     		cmp	r3, #0
 6798 0060 B4BF     		ite	lt
 6799 0062 0826     		movlt	r6, #8
 6800 0064 0426     		movge	r6, #4
 6801 0066 D9E7     		b	.L537
 6802              	.L540:
 6803 0068 0426     		movs	r6, #4
 6804 006a D7E7     		b	.L537
 6805              	.L548:
 6806              		.align	2
 6807              	.L547:
 6808 006c 00000000 		.word	main_ram
 6809 0070 00000000 		.word	XromParams
 6810              	.LBE1804:
 6811              	.LBE1826:
 6812              		.cfi_endproc
 6813              	.LFE53:
 6815              		.section	.text.get_stack_top,"ax",%progbits
 6816              		.align	1
 6817              		.p2align 2,,3
 6818              		.syntax unified
 6819              		.thumb
 6820              		.thumb_func
 6821              		.fpu fpv4-sp-d16
 6823              	get_stack_top:
 6824              	.LFB44:
 722:src/xeq.c     **** 	return get_stack(stack_size()-1);
 6825              		.loc 1 722 38 is_stmt 1 view -0
 6826              		.cfi_startproc
 6827              		@ args = 0, pretend = 0, frame = 0
 6828              		@ frame_needed = 0, uses_anonymous_args = 0
 6829              		@ link register save eliminated.
 723:src/xeq.c     **** }
 6830              		.loc 1 723 2 view .LVU1883
 6831              	.LBB1827:
 6832              	.LBI1827:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 6833              		.loc 1 712 5 view .LVU1884
 6834              	.LBB1828:
 713:src/xeq.c     **** 		return 4;
 6835              		.loc 1 713 2 view .LVU1885
 713:src/xeq.c     **** 		return 4;
 6836              		.loc 1 713 8 is_stmt 0 view .LVU1886
 6837 0000 0C4B     		ldr	r3, .L555
 6838 0002 1B68     		ldr	r3, [r3]
 713:src/xeq.c     **** 		return 4;
 6839              		.loc 1 713 6 view .LVU1887
 6840 0004 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 6841              		.loc 1 713 5 view .LVU1888
 6842 0008 1207     		lsls	r2, r2, #28
 6843 000a 10D5     		bpl	.L551
 6844              	.LBB1829:
ARM GAS  /tmp/ccqED0AM.s 			page 252


 6845              	.LBI1829:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 6846              		.loc 1 185 5 is_stmt 1 view .LVU1889
 6847              	.LBB1830:
 186:src/xeq.c     **** }
 6848              		.loc 1 186 2 view .LVU1890
 186:src/xeq.c     **** }
 6849              		.loc 1 186 9 is_stmt 0 view .LVU1891
 6850 000c B3F8E037 		ldrh	r3, [r3, #2016]
 6851              	.LBE1830:
 6852              	.LBE1829:
 713:src/xeq.c     **** 		return 4;
 6853              		.loc 1 713 27 view .LVU1892
 6854 0010 9B0B     		lsrs	r3, r3, #14
 6855 0012 032B     		cmp	r3, #3
 6856 0014 02D0     		beq	.L554
 6857 0016 6B20     		movs	r0, #107
 6858              	.LBE1828:
 6859              	.LBE1827:
 6860              	.LBB1833:
 6861              	.LBI1833:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6862              		.loc 1 718 11 is_stmt 1 view .LVU1893
 6863              	.LBB1834:
 719:src/xeq.c     **** }
 6864              		.loc 1 719 2 view .LVU1894
 719:src/xeq.c     **** }
 6865              		.loc 1 719 9 is_stmt 0 view .LVU1895
 6866 0018 FFF7FEBF 		b	get_reg_n
 6867              	.LVL485:
 6868              	.L554:
 6869              	.LBE1834:
 6870              	.LBE1833:
 6871              	.LBB1837:
 6872              	.LBB1831:
 713:src/xeq.c     **** 		return 4;
 6873              		.loc 1 713 44 view .LVU1896
 6874 001c 064B     		ldr	r3, .L555+4
 713:src/xeq.c     **** 		return 4;
 6875              		.loc 1 713 41 view .LVU1897
 6876 001e 93F90130 		ldrsb	r3, [r3, #1]
 6877 0022 002B     		cmp	r3, #0
 6878 0024 B4BF     		ite	lt
 6879 0026 6B20     		movlt	r0, #107
 6880 0028 6720     		movge	r0, #103
 6881              	.LBE1831:
 6882              	.LBE1837:
 6883              	.LBB1838:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6884              		.loc 1 718 11 is_stmt 1 view .LVU1898
 6885              	.LBB1835:
 719:src/xeq.c     **** }
 6886              		.loc 1 719 2 view .LVU1899
 719:src/xeq.c     **** }
 6887              		.loc 1 719 9 is_stmt 0 view .LVU1900
 6888 002a FFF7FEBF 		b	get_reg_n
 6889              	.LVL486:
ARM GAS  /tmp/ccqED0AM.s 			page 253


 6890              	.L551:
 6891              	.LBE1835:
 6892              	.LBE1838:
 6893              	.LBB1839:
 6894              	.LBB1832:
 6895 002e 6720     		movs	r0, #103
 6896              	.LBE1832:
 6897              	.LBE1839:
 6898              	.LBB1840:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6899              		.loc 1 718 11 is_stmt 1 view .LVU1901
 6900              	.LBB1836:
 719:src/xeq.c     **** }
 6901              		.loc 1 719 2 view .LVU1902
 719:src/xeq.c     **** }
 6902              		.loc 1 719 9 is_stmt 0 view .LVU1903
 6903 0030 FFF7FEBF 		b	get_reg_n
 6904              	.LVL487:
 6905              	.L556:
 6906              		.align	2
 6907              	.L555:
 6908 0034 00000000 		.word	main_ram
 6909 0038 00000000 		.word	XromParams
 6910              	.LBE1836:
 6911              	.LBE1840:
 6912              		.cfi_endproc
 6913              	.LFE44:
 6915              		.section	.text.roll_down,"ax",%progbits
 6916              		.align	1
 6917              		.p2align 2,,3
 6918              		.global	roll_down
 6919              		.syntax unified
 6920              		.thumb
 6921              		.thumb_func
 6922              		.fpu fpv4-sp-d16
 6924              	roll_down:
 6925              	.LVL488:
 6926              	.LFB70:
 889:src/xeq.c     **** 	REGISTER r;
 6927              		.loc 1 889 31 is_stmt 1 view -0
 6928              		.cfi_startproc
 6929              		@ args = 0, pretend = 0, frame = 16
 6930              		@ frame_needed = 0, uses_anonymous_args = 0
 890:src/xeq.c     **** 	copyreg(&r, StackBase);
 6931              		.loc 1 890 2 view .LVU1905
 891:src/xeq.c     **** 	lower();
 6932              		.loc 1 891 2 view .LVU1906
 889:src/xeq.c     **** 	REGISTER r;
 6933              		.loc 1 889 31 is_stmt 0 view .LVU1907
 6934 0000 30B5     		push	{r4, r5, lr}
 6935              		.cfi_def_cfa_offset 12
 6936              		.cfi_offset 4, -12
 6937              		.cfi_offset 5, -8
 6938              		.cfi_offset 14, -4
 6939              	.LBB1841:
 6940              	.LBB1842:
 6941              	.LBB1843:
ARM GAS  /tmp/ccqED0AM.s 			page 254


 6942              	.LBB1844:
1119:src/xeq.c     **** }
 6943              		.loc 1 1119 24 view .LVU1908
 6944 0002 124D     		ldr	r5, .L563
 6945              	.LBE1844:
 6946              	.LBE1843:
 6947              	.LBE1842:
 6948              	.LBE1841:
 891:src/xeq.c     **** 	lower();
 6949              		.loc 1 891 2 view .LVU1909
 6950 0004 124A     		ldr	r2, .L563+4
 6951              	.LBB1853:
 6952              	.LBB1851:
 6953              	.LBB1848:
 6954              	.LBB1845:
1119:src/xeq.c     **** }
 6955              		.loc 1 1119 24 view .LVU1910
 6956 0006 2B68     		ldr	r3, [r5]
 6957              	.LBE1845:
 6958              	.LBE1848:
 727:src/xeq.c     **** }
 6959              		.loc 1 727 2 view .LVU1911
 6960 0008 1168     		ldr	r1, [r2]
 6961              	.LBB1849:
 6962              	.LBB1846:
1119:src/xeq.c     **** }
 6963              		.loc 1 1119 24 view .LVU1912
 6964 000a B3F8E837 		ldrh	r3, [r3, #2024]
 6965 000e 44F20104 		movw	r4, #16385
 6966              	.LBE1846:
 6967              	.LBE1849:
 727:src/xeq.c     **** }
 6968              		.loc 1 727 2 view .LVU1913
 6969 0012 2340     		ands	r3, r3, r4
 6970              	.LBE1851:
 6971              	.LBE1853:
 889:src/xeq.c     **** 	REGISTER r;
 6972              		.loc 1 889 31 view .LVU1914
 6973 0014 85B0     		sub	sp, sp, #20
 6974              		.cfi_def_cfa_offset 32
 6975              	.LVL489:
 6976              	.LBB1854:
 6977              	.LBI1841:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6978              		.loc 1 726 6 is_stmt 1 view .LVU1915
 6979              	.LBB1852:
 727:src/xeq.c     **** }
 6980              		.loc 1 727 2 view .LVU1916
 6981              	.LBB1850:
 6982              	.LBI1843:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6983              		.loc 1 1118 5 view .LVU1917
 6984              	.LBB1847:
1119:src/xeq.c     **** }
 6985              		.loc 1 1119 2 view .LVU1918
 6986              	.LBE1847:
 6987              	.LBE1850:
ARM GAS  /tmp/ccqED0AM.s 			page 255


 727:src/xeq.c     **** }
 6988              		.loc 1 727 2 is_stmt 0 view .LVU1919
 6989 0016 B3F5804F 		cmp	r3, #16384
 6990 001a 0CBF     		ite	eq
 6991 001c 1022     		moveq	r2, #16
 6992 001e 0822     		movne	r2, #8
 6993 0020 6846     		mov	r0, sp
 6994              	.LVL490:
 727:src/xeq.c     **** }
 6995              		.loc 1 727 2 view .LVU1920
 6996 0022 FFF7FEFF 		bl	xcopy
 6997              	.LVL491:
 727:src/xeq.c     **** }
 6998              		.loc 1 727 2 view .LVU1921
 6999              	.LBE1852:
 7000              	.LBE1854:
 892:src/xeq.c     **** 	copyreg(get_stack_top(), &r);
 7001              		.loc 1 892 2 is_stmt 1 view .LVU1922
 7002 0026 FFF7FEFF 		bl	lower
 7003              	.LVL492:
 893:src/xeq.c     **** }
 7004              		.loc 1 893 2 view .LVU1923
 7005 002a FFF7FEFF 		bl	get_stack_top
 7006              	.LVL493:
 7007              	.LBB1855:
 7008              	.LBI1855:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7009              		.loc 1 726 6 view .LVU1924
 7010              	.LBB1856:
 727:src/xeq.c     **** }
 7011              		.loc 1 727 2 view .LVU1925
 7012              	.LBB1857:
 7013              	.LBI1857:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7014              		.loc 1 1118 5 view .LVU1926
 7015              	.LBB1858:
1119:src/xeq.c     **** }
 7016              		.loc 1 1119 2 view .LVU1927
1119:src/xeq.c     **** }
 7017              		.loc 1 1119 24 is_stmt 0 view .LVU1928
 7018 002e 2B68     		ldr	r3, [r5]
 7019 0030 B3F8E837 		ldrh	r3, [r3, #2024]
 7020              	.LBE1858:
 7021              	.LBE1857:
 727:src/xeq.c     **** }
 7022              		.loc 1 727 2 view .LVU1929
 7023 0034 1C40     		ands	r4, r4, r3
 7024 0036 B4F5804F 		cmp	r4, #16384
 7025 003a 6946     		mov	r1, sp
 7026 003c 0CBF     		ite	eq
 7027 003e 1022     		moveq	r2, #16
 7028 0040 0822     		movne	r2, #8
 7029 0042 FFF7FEFF 		bl	xcopy
 7030              	.LVL494:
 727:src/xeq.c     **** }
 7031              		.loc 1 727 2 view .LVU1930
 7032              	.LBE1856:
ARM GAS  /tmp/ccqED0AM.s 			page 256


 7033              	.LBE1855:
 894:src/xeq.c     **** 
 7034              		.loc 1 894 1 view .LVU1931
 7035 0046 05B0     		add	sp, sp, #20
 7036              		.cfi_def_cfa_offset 12
 7037              		@ sp needed
 7038 0048 30BD     		pop	{r4, r5, pc}
 7039              	.L564:
 7040 004a 00BF     		.align	2
 7041              	.L563:
 7042 004c 00000000 		.word	main_ram
 7043 0050 00000000 		.word	StackBase
 7044              		.cfi_endproc
 7045              	.LFE70:
 7047              		.section	.text.cpx_roll_down,"ax",%progbits
 7048              		.align	1
 7049              		.p2align 2,,3
 7050              		.global	cpx_roll_down
 7051              		.syntax unified
 7052              		.thumb
 7053              		.thumb_func
 7054              		.fpu fpv4-sp-d16
 7056              	cpx_roll_down:
 7057              	.LVL495:
 7058              	.LFB72:
 903:src/xeq.c     **** 	roll_down(OP_RDOWN);
 7059              		.loc 1 903 35 is_stmt 1 view -0
 7060              		.cfi_startproc
 7061              		@ args = 0, pretend = 0, frame = 0
 7062              		@ frame_needed = 0, uses_anonymous_args = 0
 904:src/xeq.c     **** 	roll_down(OP_RDOWN);
 7063              		.loc 1 904 2 view .LVU1933
 903:src/xeq.c     **** 	roll_down(OP_RDOWN);
 7064              		.loc 1 903 35 is_stmt 0 view .LVU1934
 7065 0000 08B5     		push	{r3, lr}
 7066              		.cfi_def_cfa_offset 8
 7067              		.cfi_offset 3, -8
 7068              		.cfi_offset 14, -4
 904:src/xeq.c     **** 	roll_down(OP_RDOWN);
 7069              		.loc 1 904 2 view .LVU1935
 7070 0002 0720     		movs	r0, #7
 7071              	.LVL496:
 904:src/xeq.c     **** 	roll_down(OP_RDOWN);
 7072              		.loc 1 904 2 view .LVU1936
 7073 0004 FFF7FEFF 		bl	roll_down
 7074              	.LVL497:
 905:src/xeq.c     **** 	set_was_complex();
 7075              		.loc 1 905 2 is_stmt 1 view .LVU1937
 7076 0008 0720     		movs	r0, #7
 7077 000a FFF7FEFF 		bl	roll_down
 7078              	.LVL498:
 906:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 7079              		.loc 1 906 2 view .LVU1938
 7080              	.LBB1859:
 7081              	.LBI1859:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 7082              		.loc 1 539 13 view .LVU1939
ARM GAS  /tmp/ccqED0AM.s 			page 257


 7083              	.LBB1860:
 540:src/xeq.c     **** }
 7084              		.loc 1 540 2 view .LVU1940
 540:src/xeq.c     **** }
 7085              		.loc 1 540 20 is_stmt 0 view .LVU1941
 7086 000e 074B     		ldr	r3, .L567
 7087              	.LBE1860:
 7088              	.LBE1859:
 908:src/xeq.c     **** #endif
 7089              		.loc 1 908 2 view .LVU1942
 7090 0010 074A     		ldr	r2, .L567+4
 7091              	.LBB1863:
 7092              	.LBB1861:
 540:src/xeq.c     **** }
 7093              		.loc 1 540 20 view .LVU1943
 7094 0012 197D     		ldrb	r1, [r3, #20]	@ zero_extendqisi2
 7095              	.LBE1861:
 7096              	.LBE1863:
 908:src/xeq.c     **** #endif
 7097              		.loc 1 908 2 view .LVU1944
 7098 0014 1268     		ldr	r2, [r2]
 7099              	.LBB1864:
 7100              	.LBB1862:
 540:src/xeq.c     **** }
 7101              		.loc 1 540 20 view .LVU1945
 7102 0016 0120     		movs	r0, #1
 7103 0018 60F38711 		bfi	r1, r0, #6, #2
 7104 001c 1975     		strb	r1, [r3, #20]
 7105              	.LBE1862:
 7106              	.LBE1864:
 908:src/xeq.c     **** #endif
 7107              		.loc 1 908 2 is_stmt 1 view .LVU1946
 7108 001e 92F8AD37 		ldrb	r3, [r2, #1965]	@ zero_extendqisi2
 7109 0022 0343     		orrs	r3, r3, r0
 7110 0024 82F8AD37 		strb	r3, [r2, #1965]
 910:src/xeq.c     **** 
 7111              		.loc 1 910 1 is_stmt 0 view .LVU1947
 7112 0028 08BD     		pop	{r3, pc}
 7113              	.L568:
 7114 002a 00BF     		.align	2
 7115              	.L567:
 7116 002c 00000000 		.word	StateWhileOn
 7117 0030 00000000 		.word	main_ram
 7118              		.cfi_endproc
 7119              	.LFE72:
 7121              		.section	.text.roll_up,"ax",%progbits
 7122              		.align	1
 7123              		.p2align 2,,3
 7124              		.global	roll_up
 7125              		.syntax unified
 7126              		.thumb
 7127              		.thumb_func
 7128              		.fpu fpv4-sp-d16
 7130              	roll_up:
 7131              	.LVL499:
 7132              	.LFB71:
 896:src/xeq.c     **** 	REGISTER r;
ARM GAS  /tmp/ccqED0AM.s 			page 258


 7133              		.loc 1 896 29 is_stmt 1 view -0
 7134              		.cfi_startproc
 7135              		@ args = 0, pretend = 0, frame = 16
 7136              		@ frame_needed = 0, uses_anonymous_args = 0
 897:src/xeq.c     **** 	copyreg(&r, get_stack_top());
 7137              		.loc 1 897 2 view .LVU1949
 898:src/xeq.c     **** 	lift();
 7138              		.loc 1 898 2 view .LVU1950
 896:src/xeq.c     **** 	REGISTER r;
 7139              		.loc 1 896 29 is_stmt 0 view .LVU1951
 7140 0000 30B5     		push	{r4, r5, lr}
 7141              		.cfi_def_cfa_offset 12
 7142              		.cfi_offset 4, -12
 7143              		.cfi_offset 5, -8
 7144              		.cfi_offset 14, -4
 7145              	.LBB1865:
 7146              	.LBB1866:
 7147              	.LBB1867:
 7148              	.LBB1868:
1119:src/xeq.c     **** }
 7149              		.loc 1 1119 24 view .LVU1952
 7150 0002 124D     		ldr	r5, .L575
 7151              	.LBE1868:
 7152              	.LBE1867:
 7153              	.LBE1866:
 7154              	.LBE1865:
 896:src/xeq.c     **** 	REGISTER r;
 7155              		.loc 1 896 29 view .LVU1953
 7156 0004 85B0     		sub	sp, sp, #20
 7157              		.cfi_def_cfa_offset 32
 898:src/xeq.c     **** 	lift();
 7158              		.loc 1 898 14 view .LVU1954
 7159 0006 FFF7FEFF 		bl	get_stack_top
 7160              	.LVL500:
 7161              	.LBB1875:
 7162              	.LBB1873:
 7163              	.LBB1871:
 7164              	.LBB1869:
1119:src/xeq.c     **** }
 7165              		.loc 1 1119 24 view .LVU1955
 7166 000a 2B68     		ldr	r3, [r5]
 7167 000c B3F8E837 		ldrh	r3, [r3, #2024]
 7168 0010 44F20104 		movw	r4, #16385
 7169              	.LBE1869:
 7170              	.LBE1871:
 727:src/xeq.c     **** }
 7171              		.loc 1 727 2 view .LVU1956
 7172 0014 2340     		ands	r3, r3, r4
 7173 0016 B3F5804F 		cmp	r3, #16384
 7174              	.LBE1873:
 7175              	.LBE1875:
 898:src/xeq.c     **** 	lift();
 7176              		.loc 1 898 14 view .LVU1957
 7177 001a 0146     		mov	r1, r0
 7178              	.LVL501:
 7179              	.LBB1876:
 7180              	.LBI1865:
ARM GAS  /tmp/ccqED0AM.s 			page 259


 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7181              		.loc 1 726 6 is_stmt 1 view .LVU1958
 7182              	.LBB1874:
 727:src/xeq.c     **** }
 7183              		.loc 1 727 2 view .LVU1959
 7184              	.LBB1872:
 7185              	.LBI1867:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7186              		.loc 1 1118 5 view .LVU1960
 7187              	.LBB1870:
1119:src/xeq.c     **** }
 7188              		.loc 1 1119 2 view .LVU1961
 7189              	.LBE1870:
 7190              	.LBE1872:
 727:src/xeq.c     **** }
 7191              		.loc 1 727 2 is_stmt 0 view .LVU1962
 7192 001c 0CBF     		ite	eq
 7193 001e 1022     		moveq	r2, #16
 7194 0020 0822     		movne	r2, #8
 7195 0022 6846     		mov	r0, sp
 7196              	.LVL502:
 727:src/xeq.c     **** }
 7197              		.loc 1 727 2 view .LVU1963
 7198 0024 FFF7FEFF 		bl	xcopy
 7199              	.LVL503:
 727:src/xeq.c     **** }
 7200              		.loc 1 727 2 view .LVU1964
 7201              	.LBE1874:
 7202              	.LBE1876:
 899:src/xeq.c     **** 	copyreg(StackBase, &r);
 7203              		.loc 1 899 2 is_stmt 1 view .LVU1965
 7204 0028 FFF7FEFF 		bl	lift
 7205              	.LVL504:
 900:src/xeq.c     **** }
 7206              		.loc 1 900 2 view .LVU1966
 7207              	.LBB1877:
 7208              	.LBB1878:
 7209              	.LBB1879:
 7210              	.LBB1880:
1119:src/xeq.c     **** }
 7211              		.loc 1 1119 24 is_stmt 0 view .LVU1967
 7212 002c 2B68     		ldr	r3, [r5]
 7213              	.LBE1880:
 7214              	.LBE1879:
 7215              	.LBE1878:
 7216              	.LBE1877:
 900:src/xeq.c     **** }
 7217              		.loc 1 900 2 view .LVU1968
 7218 002e 084A     		ldr	r2, .L575+4
 7219              	.LVL505:
 7220              	.LBB1884:
 7221              	.LBI1877:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7222              		.loc 1 726 6 is_stmt 1 view .LVU1969
 7223              	.LBB1883:
 727:src/xeq.c     **** }
 7224              		.loc 1 727 2 view .LVU1970
ARM GAS  /tmp/ccqED0AM.s 			page 260


 7225              	.LBB1882:
 7226              	.LBI1879:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7227              		.loc 1 1118 5 view .LVU1971
 7228              	.LBB1881:
1119:src/xeq.c     **** }
 7229              		.loc 1 1119 2 view .LVU1972
1119:src/xeq.c     **** }
 7230              		.loc 1 1119 24 is_stmt 0 view .LVU1973
 7231 0030 B3F8E837 		ldrh	r3, [r3, #2024]
 7232              	.LBE1881:
 7233              	.LBE1882:
 727:src/xeq.c     **** }
 7234              		.loc 1 727 2 view .LVU1974
 7235 0034 1068     		ldr	r0, [r2]
 7236 0036 1C40     		ands	r4, r4, r3
 7237 0038 B4F5804F 		cmp	r4, #16384
 7238 003c 6946     		mov	r1, sp
 7239 003e 0CBF     		ite	eq
 7240 0040 1022     		moveq	r2, #16
 7241              	.LVL506:
 727:src/xeq.c     **** }
 7242              		.loc 1 727 2 view .LVU1975
 7243 0042 0822     		movne	r2, #8
 7244 0044 FFF7FEFF 		bl	xcopy
 7245              	.LVL507:
 727:src/xeq.c     **** }
 7246              		.loc 1 727 2 view .LVU1976
 7247              	.LBE1883:
 7248              	.LBE1884:
 901:src/xeq.c     **** 
 7249              		.loc 1 901 1 view .LVU1977
 7250 0048 05B0     		add	sp, sp, #20
 7251              		.cfi_def_cfa_offset 12
 7252              		@ sp needed
 7253 004a 30BD     		pop	{r4, r5, pc}
 7254              	.L576:
 7255              		.align	2
 7256              	.L575:
 7257 004c 00000000 		.word	main_ram
 7258 0050 00000000 		.word	StackBase
 7259              		.cfi_endproc
 7260              	.LFE71:
 7262              		.section	.text.cpx_roll_up,"ax",%progbits
 7263              		.align	1
 7264              		.p2align 2,,3
 7265              		.global	cpx_roll_up
 7266              		.syntax unified
 7267              		.thumb
 7268              		.thumb_func
 7269              		.fpu fpv4-sp-d16
 7271              	cpx_roll_up:
 7272              	.LVL508:
 7273              	.LFB73:
 912:src/xeq.c     **** 	roll_up(OP_RUP);
 7274              		.loc 1 912 33 is_stmt 1 view -0
 7275              		.cfi_startproc
ARM GAS  /tmp/ccqED0AM.s 			page 261


 7276              		@ args = 0, pretend = 0, frame = 0
 7277              		@ frame_needed = 0, uses_anonymous_args = 0
 913:src/xeq.c     **** 	roll_up(OP_RUP);
 7278              		.loc 1 913 2 view .LVU1979
 912:src/xeq.c     **** 	roll_up(OP_RUP);
 7279              		.loc 1 912 33 is_stmt 0 view .LVU1980
 7280 0000 08B5     		push	{r3, lr}
 7281              		.cfi_def_cfa_offset 8
 7282              		.cfi_offset 3, -8
 7283              		.cfi_offset 14, -4
 913:src/xeq.c     **** 	roll_up(OP_RUP);
 7284              		.loc 1 913 2 view .LVU1981
 7285 0002 0820     		movs	r0, #8
 7286              	.LVL509:
 913:src/xeq.c     **** 	roll_up(OP_RUP);
 7287              		.loc 1 913 2 view .LVU1982
 7288 0004 FFF7FEFF 		bl	roll_up
 7289              	.LVL510:
 914:src/xeq.c     **** 	set_was_complex();
 7290              		.loc 1 914 2 is_stmt 1 view .LVU1983
 7291 0008 0820     		movs	r0, #8
 7292 000a FFF7FEFF 		bl	roll_up
 7293              	.LVL511:
 915:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 7294              		.loc 1 915 2 view .LVU1984
 7295              	.LBB1885:
 7296              	.LBI1885:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 7297              		.loc 1 539 13 view .LVU1985
 7298              	.LBB1886:
 540:src/xeq.c     **** }
 7299              		.loc 1 540 2 view .LVU1986
 540:src/xeq.c     **** }
 7300              		.loc 1 540 20 is_stmt 0 view .LVU1987
 7301 000e 074B     		ldr	r3, .L579
 7302              	.LBE1886:
 7303              	.LBE1885:
 917:src/xeq.c     **** #endif
 7304              		.loc 1 917 2 view .LVU1988
 7305 0010 074A     		ldr	r2, .L579+4
 7306              	.LBB1889:
 7307              	.LBB1887:
 540:src/xeq.c     **** }
 7308              		.loc 1 540 20 view .LVU1989
 7309 0012 197D     		ldrb	r1, [r3, #20]	@ zero_extendqisi2
 7310              	.LBE1887:
 7311              	.LBE1889:
 917:src/xeq.c     **** #endif
 7312              		.loc 1 917 2 view .LVU1990
 7313 0014 1268     		ldr	r2, [r2]
 7314              	.LBB1890:
 7315              	.LBB1888:
 540:src/xeq.c     **** }
 7316              		.loc 1 540 20 view .LVU1991
 7317 0016 0120     		movs	r0, #1
 7318 0018 60F38711 		bfi	r1, r0, #6, #2
 7319 001c 1975     		strb	r1, [r3, #20]
ARM GAS  /tmp/ccqED0AM.s 			page 262


 7320              	.LBE1888:
 7321              	.LBE1890:
 917:src/xeq.c     **** #endif
 7322              		.loc 1 917 2 is_stmt 1 view .LVU1992
 7323 001e 92F8AD37 		ldrb	r3, [r2, #1965]	@ zero_extendqisi2
 7324 0022 0343     		orrs	r3, r3, r0
 7325 0024 82F8AD37 		strb	r3, [r2, #1965]
 919:src/xeq.c     **** 
 7326              		.loc 1 919 1 is_stmt 0 view .LVU1993
 7327 0028 08BD     		pop	{r3, pc}
 7328              	.L580:
 7329 002a 00BF     		.align	2
 7330              	.L579:
 7331 002c 00000000 		.word	StateWhileOn
 7332 0030 00000000 		.word	main_ram
 7333              		.cfi_endproc
 7334              	.LFE73:
 7336              		.section	.text.fill,"ax",%progbits
 7337              		.align	1
 7338              		.p2align 2,,3
 7339              		.global	fill
 7340              		.syntax unified
 7341              		.thumb
 7342              		.thumb_func
 7343              		.fpu fpv4-sp-d16
 7345              	fill:
 7346              	.LVL512:
 7347              	.LFB80:
1096:src/xeq.c     **** 	const int n = stack_size();
 7348              		.loc 1 1096 26 is_stmt 1 view -0
 7349              		.cfi_startproc
 7350              		@ args = 0, pretend = 0, frame = 0
 7351              		@ frame_needed = 0, uses_anonymous_args = 0
1097:src/xeq.c     **** 	int i;
 7352              		.loc 1 1097 2 view .LVU1995
 7353              	.LBB1891:
 7354              	.LBI1891:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 7355              		.loc 1 712 5 view .LVU1996
 7356              	.LBB1892:
 713:src/xeq.c     **** 		return 4;
 7357              		.loc 1 713 2 view .LVU1997
 7358              	.LBE1892:
 7359              	.LBE1891:
1096:src/xeq.c     **** 	const int n = stack_size();
 7360              		.loc 1 1096 26 is_stmt 0 view .LVU1998
 7361 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 7362              		.cfi_def_cfa_offset 24
 7363              		.cfi_offset 4, -24
 7364              		.cfi_offset 5, -20
 7365              		.cfi_offset 6, -16
 7366              		.cfi_offset 7, -12
 7367              		.cfi_offset 8, -8
 7368              		.cfi_offset 14, -4
 7369              	.LBB1898:
 7370              	.LBB1895:
 713:src/xeq.c     **** 		return 4;
ARM GAS  /tmp/ccqED0AM.s 			page 263


 7371              		.loc 1 713 8 view .LVU1999
 7372 0004 174E     		ldr	r6, .L592
 7373 0006 3368     		ldr	r3, [r6]
 713:src/xeq.c     **** 		return 4;
 7374              		.loc 1 713 6 view .LVU2000
 7375 0008 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 7376              		.loc 1 713 5 view .LVU2001
 7377 000c 1207     		lsls	r2, r2, #28
 7378 000e 27D5     		bpl	.L585
 7379              	.LBB1893:
 7380              	.LBI1893:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 7381              		.loc 1 185 5 is_stmt 1 view .LVU2002
 7382              	.LBB1894:
 186:src/xeq.c     **** }
 7383              		.loc 1 186 2 view .LVU2003
 186:src/xeq.c     **** }
 7384              		.loc 1 186 9 is_stmt 0 view .LVU2004
 7385 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 7386              	.LBE1894:
 7387              	.LBE1893:
 713:src/xeq.c     **** 		return 4;
 7388              		.loc 1 713 27 view .LVU2005
 7389 0014 9B0B     		lsrs	r3, r3, #14
 7390 0016 032B     		cmp	r3, #3
 7391 0018 1AD0     		beq	.L591
 715:src/xeq.c     **** }
 7392              		.loc 1 715 9 view .LVU2006
 7393 001a 0825     		movs	r5, #8
 7394              	.L582:
 7395              	.LVL513:
 715:src/xeq.c     **** }
 7396              		.loc 1 715 9 view .LVU2007
 7397              	.LBE1895:
 7398              	.LBE1898:
1098:src/xeq.c     **** 
 7399              		.loc 1 1098 2 is_stmt 1 view .LVU2008
1100:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7400              		.loc 1 1100 2 view .LVU2009
1100:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7401              		.loc 1 1100 12 view .LVU2010
 7402 001c 124F     		ldr	r7, .L592+4
 7403 001e 6435     		adds	r5, r5, #100
 7404              	.LVL514:
 7405              	.LBB1899:
 7406              	.LBB1896:
 714:src/xeq.c     **** 	return 8;
 7407              		.loc 1 714 10 is_stmt 0 view .LVU2011
 7408 0020 6524     		movs	r4, #101
 7409              	.LBE1896:
 7410              	.LBE1899:
 7411              	.LBB1900:
 7412              	.LBB1901:
 7413              	.LBB1902:
 7414              	.LBB1903:
1119:src/xeq.c     **** }
ARM GAS  /tmp/ccqED0AM.s 			page 264


 7415              		.loc 1 1119 24 view .LVU2012
 7416 0022 44F20108 		movw	r8, #16385
 7417              	.LVL515:
 7418              	.L584:
1119:src/xeq.c     **** }
 7419              		.loc 1 1119 24 view .LVU2013
 7420              	.LBE1903:
 7421              	.LBE1902:
 7422              	.LBE1901:
 7423              	.LBE1900:
1101:src/xeq.c     **** }
 7424              		.loc 1 1101 3 is_stmt 1 view .LVU2014
 7425              	.LBB1909:
 7426              	.LBI1909:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 7427              		.loc 1 718 11 view .LVU2015
 7428              	.LBB1910:
 719:src/xeq.c     **** }
 7429              		.loc 1 719 2 view .LVU2016
 719:src/xeq.c     **** }
 7430              		.loc 1 719 9 is_stmt 0 view .LVU2017
 7431 0026 2046     		mov	r0, r4
 7432 0028 FFF7FEFF 		bl	get_reg_n
 7433              	.LVL516:
 719:src/xeq.c     **** }
 7434              		.loc 1 719 9 view .LVU2018
 7435              	.LBE1910:
 7436              	.LBE1909:
 7437              	.LBB1911:
 7438              	.LBI1900:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7439              		.loc 1 726 6 is_stmt 1 view .LVU2019
 7440              	.LBB1908:
 727:src/xeq.c     **** }
 7441              		.loc 1 727 2 view .LVU2020
 7442              	.LBB1906:
 7443              	.LBI1902:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7444              		.loc 1 1118 5 view .LVU2021
 7445              	.LBB1904:
1119:src/xeq.c     **** }
 7446              		.loc 1 1119 2 view .LVU2022
1119:src/xeq.c     **** }
 7447              		.loc 1 1119 24 is_stmt 0 view .LVU2023
 7448 002c 3368     		ldr	r3, [r6]
 7449              	.LBE1904:
 7450              	.LBE1906:
 727:src/xeq.c     **** }
 7451              		.loc 1 727 2 view .LVU2024
 7452 002e 3968     		ldr	r1, [r7]
 7453              	.LBB1907:
 7454              	.LBB1905:
1119:src/xeq.c     **** }
 7455              		.loc 1 1119 24 view .LVU2025
 7456 0030 B3F8E837 		ldrh	r3, [r3, #2024]
 7457              	.LBE1905:
 7458              	.LBE1907:
ARM GAS  /tmp/ccqED0AM.s 			page 265


 727:src/xeq.c     **** }
 7459              		.loc 1 727 2 view .LVU2026
 7460 0034 08EA0303 		and	r3, r8, r3
 7461 0038 B3F5804F 		cmp	r3, #16384
 7462 003c 0CBF     		ite	eq
 7463 003e 1022     		moveq	r2, #16
 7464 0040 0822     		movne	r2, #8
 7465 0042 0134     		adds	r4, r4, #1
 7466              	.LVL517:
 727:src/xeq.c     **** }
 7467              		.loc 1 727 2 view .LVU2027
 7468 0044 FFF7FEFF 		bl	xcopy
 7469              	.LVL518:
 727:src/xeq.c     **** }
 7470              		.loc 1 727 2 view .LVU2028
 7471              	.LBE1908:
 7472              	.LBE1911:
1100:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7473              		.loc 1 1100 17 is_stmt 1 view .LVU2029
1100:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7474              		.loc 1 1100 12 view .LVU2030
1100:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7475              		.loc 1 1100 2 is_stmt 0 view .LVU2031
 7476 0048 AC42     		cmp	r4, r5
 7477 004a ECD1     		bne	.L584
1102:src/xeq.c     **** 
 7478              		.loc 1 1102 1 view .LVU2032
 7479 004c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 7480              	.LVL519:
 7481              	.L591:
 7482              	.LBB1912:
 7483              	.LBB1897:
 713:src/xeq.c     **** 		return 4;
 7484              		.loc 1 713 44 view .LVU2033
 7485 0050 064B     		ldr	r3, .L592+8
 713:src/xeq.c     **** 		return 4;
 7486              		.loc 1 713 41 view .LVU2034
 7487 0052 93F90130 		ldrsb	r3, [r3, #1]
 714:src/xeq.c     **** 	return 8;
 7488              		.loc 1 714 10 view .LVU2035
 7489 0056 002B     		cmp	r3, #0
 7490 0058 B4BF     		ite	lt
 7491 005a 0825     		movlt	r5, #8
 7492 005c 0425     		movge	r5, #4
 7493 005e DDE7     		b	.L582
 7494              	.L585:
 7495 0060 0425     		movs	r5, #4
 7496 0062 DBE7     		b	.L582
 7497              	.L593:
 7498              		.align	2
 7499              	.L592:
 7500 0064 00000000 		.word	main_ram
 7501 0068 00000000 		.word	StackBase
 7502 006c 00000000 		.word	XromParams
 7503              	.LBE1897:
 7504              	.LBE1912:
 7505              		.cfi_endproc
ARM GAS  /tmp/ccqED0AM.s 			page 266


 7506              	.LFE80:
 7508              		.section	.text.lower2,"ax",%progbits
 7509              		.align	1
 7510              		.p2align 2,,3
 7511              		.syntax unified
 7512              		.thumb
 7513              		.thumb_func
 7514              		.fpu fpv4-sp-d16
 7516              	lower2:
 7517              	.LFB54:
 783:src/xeq.c     **** 	const int n = stack_size();
 7518              		.loc 1 783 26 is_stmt 1 view -0
 7519              		.cfi_startproc
 7520              		@ args = 0, pretend = 0, frame = 0
 7521              		@ frame_needed = 0, uses_anonymous_args = 0
 784:src/xeq.c     **** 	int i;
 7522              		.loc 1 784 2 view .LVU2037
 7523              	.LBB1913:
 7524              	.LBI1913:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 7525              		.loc 1 712 5 view .LVU2038
 7526              	.LBB1914:
 713:src/xeq.c     **** 		return 4;
 7527              		.loc 1 713 2 view .LVU2039
 7528              	.LBE1914:
 7529              	.LBE1913:
 783:src/xeq.c     **** 	const int n = stack_size();
 7530              		.loc 1 783 26 is_stmt 0 view .LVU2040
 7531 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 7532              		.cfi_def_cfa_offset 24
 7533              		.cfi_offset 4, -24
 7534              		.cfi_offset 5, -20
 7535              		.cfi_offset 6, -16
 7536              		.cfi_offset 7, -12
 7537              		.cfi_offset 8, -8
 7538              		.cfi_offset 14, -4
 7539              	.LBB1920:
 7540              	.LBB1917:
 713:src/xeq.c     **** 		return 4;
 7541              		.loc 1 713 8 view .LVU2041
 7542 0004 194F     		ldr	r7, .L605
 7543 0006 3B68     		ldr	r3, [r7]
 713:src/xeq.c     **** 		return 4;
 7544              		.loc 1 713 6 view .LVU2042
 7545 0008 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 7546              		.loc 1 713 5 view .LVU2043
 7547 000c 1207     		lsls	r2, r2, #28
 7548 000e 2BD5     		bpl	.L598
 7549              	.LBB1915:
 7550              	.LBI1915:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 7551              		.loc 1 185 5 is_stmt 1 view .LVU2044
 7552              	.LBB1916:
 186:src/xeq.c     **** }
 7553              		.loc 1 186 2 view .LVU2045
 186:src/xeq.c     **** }
ARM GAS  /tmp/ccqED0AM.s 			page 267


 7554              		.loc 1 186 9 is_stmt 0 view .LVU2046
 7555 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 7556              	.LBE1916:
 7557              	.LBE1915:
 713:src/xeq.c     **** 		return 4;
 7558              		.loc 1 713 27 view .LVU2047
 7559 0014 9B0B     		lsrs	r3, r3, #14
 7560 0016 032B     		cmp	r3, #3
 7561 0018 1ED0     		beq	.L604
 715:src/xeq.c     **** }
 7562              		.loc 1 715 9 view .LVU2048
 7563 001a 0826     		movs	r6, #8
 7564              	.L595:
 7565              	.LVL520:
 715:src/xeq.c     **** }
 7566              		.loc 1 715 9 view .LVU2049
 7567              	.LBE1917:
 7568              	.LBE1920:
 785:src/xeq.c     **** 
 7569              		.loc 1 785 2 is_stmt 1 view .LVU2050
 787:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7570              		.loc 1 787 2 view .LVU2051
 787:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7571              		.loc 1 787 12 view .LVU2052
 7572 001c 6236     		adds	r6, r6, #98
 7573              	.LVL521:
 7574              	.LBB1921:
 7575              	.LBB1918:
 714:src/xeq.c     **** 	return 8;
 7576              		.loc 1 714 10 is_stmt 0 view .LVU2053
 7577 001e 6424     		movs	r4, #100
 7578              	.LBE1918:
 7579              	.LBE1921:
 7580              	.LBB1922:
 7581              	.LBB1923:
 7582              	.LBB1924:
 7583              	.LBB1925:
1119:src/xeq.c     **** }
 7584              		.loc 1 1119 24 view .LVU2054
 7585 0020 44F20108 		movw	r8, #16385
 7586              	.LVL522:
 7587              	.L597:
1119:src/xeq.c     **** }
 7588              		.loc 1 1119 24 view .LVU2055
 7589              	.LBE1925:
 7590              	.LBE1924:
 7591              	.LBE1923:
 7592              	.LBE1922:
 788:src/xeq.c     **** }
 7593              		.loc 1 788 3 is_stmt 1 discriminator 3 view .LVU2056
 7594              	.LBB1932:
 7595              	.LBI1932:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 7596              		.loc 1 718 11 discriminator 3 view .LVU2057
 7597              	.LBB1933:
 719:src/xeq.c     **** }
 7598              		.loc 1 719 2 discriminator 3 view .LVU2058
ARM GAS  /tmp/ccqED0AM.s 			page 268


 719:src/xeq.c     **** }
 7599              		.loc 1 719 9 is_stmt 0 discriminator 3 view .LVU2059
 7600 0024 2046     		mov	r0, r4
 7601 0026 FFF7FEFF 		bl	get_reg_n
 7602              	.LVL523:
 7603 002a 0546     		mov	r5, r0
 7604              	.LBE1933:
 7605              	.LBE1932:
 7606              	.LBB1934:
 7607              	.LBB1935:
 7608 002c A01C     		adds	r0, r4, #2
 7609              	.LVL524:
 719:src/xeq.c     **** }
 7610              		.loc 1 719 9 discriminator 3 view .LVU2060
 7611              	.LBE1935:
 7612              	.LBI1934:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 7613              		.loc 1 718 11 is_stmt 1 discriminator 3 view .LVU2061
 7614              	.LBB1936:
 719:src/xeq.c     **** }
 7615              		.loc 1 719 2 discriminator 3 view .LVU2062
 719:src/xeq.c     **** }
 7616              		.loc 1 719 9 is_stmt 0 discriminator 3 view .LVU2063
 7617 002e FFF7FEFF 		bl	get_reg_n
 7618              	.LVL525:
 719:src/xeq.c     **** }
 7619              		.loc 1 719 9 discriminator 3 view .LVU2064
 7620              	.LBE1936:
 7621              	.LBE1934:
 7622              	.LBB1938:
 7623              	.LBB1930:
 7624              	.LBB1928:
 7625              	.LBB1926:
1119:src/xeq.c     **** }
 7626              		.loc 1 1119 24 discriminator 3 view .LVU2065
 7627 0032 3B68     		ldr	r3, [r7]
 7628 0034 B3F8E837 		ldrh	r3, [r3, #2024]
 7629              	.LBE1926:
 7630              	.LBE1928:
 727:src/xeq.c     **** }
 7631              		.loc 1 727 2 discriminator 3 view .LVU2066
 7632 0038 08EA0303 		and	r3, r8, r3
 7633 003c B3F5804F 		cmp	r3, #16384
 7634              	.LBE1930:
 7635              	.LBE1938:
 7636              	.LBB1939:
 7637              	.LBB1937:
 719:src/xeq.c     **** }
 7638              		.loc 1 719 9 discriminator 3 view .LVU2067
 7639 0040 0146     		mov	r1, r0
 7640              	.LVL526:
 719:src/xeq.c     **** }
 7641              		.loc 1 719 9 discriminator 3 view .LVU2068
 7642              	.LBE1937:
 7643              	.LBE1939:
 7644              	.LBB1940:
 7645              	.LBI1922:
ARM GAS  /tmp/ccqED0AM.s 			page 269


 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7646              		.loc 1 726 6 is_stmt 1 discriminator 3 view .LVU2069
 7647              	.LBB1931:
 727:src/xeq.c     **** }
 7648              		.loc 1 727 2 discriminator 3 view .LVU2070
 7649              	.LBB1929:
 7650              	.LBI1924:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7651              		.loc 1 1118 5 discriminator 3 view .LVU2071
 7652              	.LBB1927:
1119:src/xeq.c     **** }
 7653              		.loc 1 1119 2 discriminator 3 view .LVU2072
 7654              	.LBE1927:
 7655              	.LBE1929:
 727:src/xeq.c     **** }
 7656              		.loc 1 727 2 is_stmt 0 discriminator 3 view .LVU2073
 7657 0042 0CBF     		ite	eq
 7658 0044 1022     		moveq	r2, #16
 7659 0046 0822     		movne	r2, #8
 7660 0048 2846     		mov	r0, r5
 7661              	.LVL527:
 727:src/xeq.c     **** }
 7662              		.loc 1 727 2 discriminator 3 view .LVU2074
 7663 004a 0134     		adds	r4, r4, #1
 7664              	.LVL528:
 727:src/xeq.c     **** }
 7665              		.loc 1 727 2 discriminator 3 view .LVU2075
 7666 004c FFF7FEFF 		bl	xcopy
 7667              	.LVL529:
 727:src/xeq.c     **** }
 7668              		.loc 1 727 2 discriminator 3 view .LVU2076
 7669              	.LBE1931:
 7670              	.LBE1940:
 787:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7671              		.loc 1 787 17 is_stmt 1 discriminator 3 view .LVU2077
 787:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7672              		.loc 1 787 12 discriminator 3 view .LVU2078
 787:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7673              		.loc 1 787 2 is_stmt 0 discriminator 3 view .LVU2079
 7674 0050 B442     		cmp	r4, r6
 7675 0052 E7D1     		bne	.L597
 789:src/xeq.c     **** 
 7676              		.loc 1 789 1 view .LVU2080
 7677 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 7678              	.LVL530:
 7679              	.L604:
 7680              	.LBB1941:
 7681              	.LBB1919:
 713:src/xeq.c     **** 		return 4;
 7682              		.loc 1 713 44 view .LVU2081
 7683 0058 054B     		ldr	r3, .L605+4
 713:src/xeq.c     **** 		return 4;
 7684              		.loc 1 713 41 view .LVU2082
 7685 005a 93F90130 		ldrsb	r3, [r3, #1]
 714:src/xeq.c     **** 	return 8;
 7686              		.loc 1 714 10 view .LVU2083
 7687 005e 002B     		cmp	r3, #0
ARM GAS  /tmp/ccqED0AM.s 			page 270


 7688 0060 B4BF     		ite	lt
 7689 0062 0826     		movlt	r6, #8
 7690 0064 0426     		movge	r6, #4
 7691 0066 D9E7     		b	.L595
 7692              	.L598:
 7693 0068 0426     		movs	r6, #4
 7694 006a D7E7     		b	.L595
 7695              	.L606:
 7696              		.align	2
 7697              	.L605:
 7698 006c 00000000 		.word	main_ram
 7699 0070 00000000 		.word	XromParams
 7700              	.LBE1919:
 7701              	.LBE1941:
 7702              		.cfi_endproc
 7703              	.LFE54:
 7705              		.section	.text.drop,"ax",%progbits
 7706              		.align	1
 7707              		.p2align 2,,3
 7708              		.global	drop
 7709              		.syntax unified
 7710              		.thumb
 7711              		.thumb_func
 7712              		.fpu fpv4-sp-d16
 7714              	drop:
 7715              	.LVL531:
 7716              	.LFB81:
1104:src/xeq.c     **** 	if (op == OP_DROPXY) {
 7717              		.loc 1 1104 26 is_stmt 1 view -0
 7718              		.cfi_startproc
 7719              		@ args = 0, pretend = 0, frame = 0
 7720              		@ frame_needed = 0, uses_anonymous_args = 0
1105:src/xeq.c     **** 		lower2();
 7721              		.loc 1 1105 2 view .LVU2085
1105:src/xeq.c     **** 		lower2();
 7722              		.loc 1 1105 5 is_stmt 0 view .LVU2086
 7723 0000 0F28     		cmp	r0, #15
 7724 0002 01D0     		beq	.L614
1109:src/xeq.c     **** }
 7725              		.loc 1 1109 3 is_stmt 1 view .LVU2087
 7726 0004 FFF7FEBF 		b	lower
 7727              	.LVL532:
 7728              	.L614:
1106:src/xeq.c     **** 		set_was_complex();
 7729              		.loc 1 1106 3 view .LVU2088
1104:src/xeq.c     **** 	if (op == OP_DROPXY) {
 7730              		.loc 1 1104 26 is_stmt 0 view .LVU2089
 7731 0008 08B5     		push	{r3, lr}
 7732              		.cfi_def_cfa_offset 8
 7733              		.cfi_offset 3, -8
 7734              		.cfi_offset 14, -4
1106:src/xeq.c     **** 		set_was_complex();
 7735              		.loc 1 1106 3 view .LVU2090
 7736 000a FFF7FEFF 		bl	lower2
 7737              	.LVL533:
1107:src/xeq.c     **** 	} else
 7738              		.loc 1 1107 3 is_stmt 1 view .LVU2091
ARM GAS  /tmp/ccqED0AM.s 			page 271


 7739              	.LBB1942:
 7740              	.LBI1942:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 7741              		.loc 1 539 13 view .LVU2092
 7742              	.LBB1943:
 540:src/xeq.c     **** }
 7743              		.loc 1 540 2 view .LVU2093
 540:src/xeq.c     **** }
 7744              		.loc 1 540 20 is_stmt 0 view .LVU2094
 7745 000e 034B     		ldr	r3, .L615
 7746 0010 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 7747 0012 0121     		movs	r1, #1
 7748 0014 61F38712 		bfi	r2, r1, #6, #2
 7749 0018 1A75     		strb	r2, [r3, #20]
 7750              	.LBE1943:
 7751              	.LBE1942:
1110:src/xeq.c     **** 
 7752              		.loc 1 1110 1 view .LVU2095
 7753 001a 08BD     		pop	{r3, pc}
 7754              	.L616:
 7755              		.align	2
 7756              	.L615:
 7757 001c 00000000 		.word	StateWhileOn
 7758              		.cfi_endproc
 7759              	.LFE81:
 7761              		.section	.text.copyreg_n,"ax",%progbits
 7762              		.align	1
 7763              		.p2align 2,,3
 7764              		.global	copyreg_n
 7765              		.syntax unified
 7766              		.thumb
 7767              		.thumb_func
 7768              		.fpu fpv4-sp-d16
 7770              	copyreg_n:
 7771              	.LVL534:
 7772              	.LFB46:
 730:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 7773              		.loc 1 730 30 is_stmt 1 view -0
 7774              		.cfi_startproc
 7775              		@ args = 0, pretend = 0, frame = 0
 7776              		@ frame_needed = 0, uses_anonymous_args = 0
 731:src/xeq.c     **** }
 7777              		.loc 1 731 2 view .LVU2097
 730:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 7778              		.loc 1 730 30 is_stmt 0 view .LVU2098
 7779 0000 38B5     		push	{r3, r4, r5, lr}
 7780              		.cfi_def_cfa_offset 16
 7781              		.cfi_offset 3, -16
 7782              		.cfi_offset 4, -12
 7783              		.cfi_offset 5, -8
 7784              		.cfi_offset 14, -4
 730:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 7785              		.loc 1 730 30 view .LVU2099
 7786 0002 0D46     		mov	r5, r1
 731:src/xeq.c     **** }
 7787              		.loc 1 731 2 view .LVU2100
 7788 0004 FFF7FEFF 		bl	get_reg_n
ARM GAS  /tmp/ccqED0AM.s 			page 272


 7789              	.LVL535:
 731:src/xeq.c     **** }
 7790              		.loc 1 731 2 view .LVU2101
 7791 0008 0446     		mov	r4, r0
 731:src/xeq.c     **** }
 7792              		.loc 1 731 24 view .LVU2102
 7793 000a 2846     		mov	r0, r5
 7794 000c FFF7FEFF 		bl	get_reg_n
 7795              	.LVL536:
 7796              	.LBB1944:
 7797              	.LBB1945:
 7798              	.LBB1946:
 7799              	.LBB1947:
1119:src/xeq.c     **** }
 7800              		.loc 1 1119 24 view .LVU2103
 7801 0010 094B     		ldr	r3, .L621
 7802 0012 1B68     		ldr	r3, [r3]
 7803 0014 B3F8E827 		ldrh	r2, [r3, #2024]
 7804 0018 44F20103 		movw	r3, #16385
 7805              	.LBE1947:
 7806              	.LBE1946:
 727:src/xeq.c     **** }
 7807              		.loc 1 727 2 view .LVU2104
 7808 001c 1340     		ands	r3, r3, r2
 7809 001e B3F5804F 		cmp	r3, #16384
 7810              	.LBE1945:
 7811              	.LBE1944:
 731:src/xeq.c     **** }
 7812              		.loc 1 731 24 view .LVU2105
 7813 0022 0146     		mov	r1, r0
 7814              	.LVL537:
 7815              	.LBB1952:
 7816              	.LBI1944:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7817              		.loc 1 726 6 is_stmt 1 view .LVU2106
 7818              	.LBB1950:
 727:src/xeq.c     **** }
 7819              		.loc 1 727 2 view .LVU2107
 7820              	.LBB1949:
 7821              	.LBI1946:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7822              		.loc 1 1118 5 view .LVU2108
 7823              	.LBB1948:
1119:src/xeq.c     **** }
 7824              		.loc 1 1119 2 view .LVU2109
 7825              	.LBE1948:
 7826              	.LBE1949:
 727:src/xeq.c     **** }
 7827              		.loc 1 727 2 is_stmt 0 view .LVU2110
 7828 0024 08BF     		it	eq
 7829 0026 1022     		moveq	r2, #16
 7830 0028 2046     		mov	r0, r4
 7831              	.LVL538:
 727:src/xeq.c     **** }
 7832              		.loc 1 727 2 view .LVU2111
 7833 002a 18BF     		it	ne
 7834 002c 0822     		movne	r2, #8
ARM GAS  /tmp/ccqED0AM.s 			page 273


 7835              	.LBE1950:
 7836              	.LBE1952:
 732:src/xeq.c     **** 
 7837              		.loc 1 732 1 view .LVU2112
 7838 002e BDE83840 		pop	{r3, r4, r5, lr}
 7839              		.cfi_restore 14
 7840              		.cfi_restore 5
 7841              		.cfi_restore 4
 7842              		.cfi_restore 3
 7843              		.cfi_def_cfa_offset 0
 7844              	.LVL539:
 7845              	.LBB1953:
 7846              	.LBB1951:
 727:src/xeq.c     **** }
 7847              		.loc 1 727 2 view .LVU2113
 7848 0032 FFF7FEBF 		b	xcopy
 7849              	.LVL540:
 7850              	.L622:
 727:src/xeq.c     **** }
 7851              		.loc 1 727 2 view .LVU2114
 7852 0036 00BF     		.align	2
 7853              	.L621:
 7854 0038 00000000 		.word	main_ram
 7855              	.LBE1951:
 7856              	.LBE1953:
 7857              		.cfi_endproc
 7858              	.LFE46:
 7860              		.section	.text.setlastX,"ax",%progbits
 7861              		.align	1
 7862              		.p2align 2,,3
 7863              		.global	setlastX
 7864              		.syntax unified
 7865              		.thumb
 7866              		.thumb_func
 7867              		.fpu fpv4-sp-d16
 7869              	setlastX:
 7870              	.LFB55:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 7871              		.loc 1 792 21 is_stmt 1 view -0
 7872              		.cfi_startproc
 7873              		@ args = 0, pretend = 0, frame = 0
 7874              		@ frame_needed = 0, uses_anonymous_args = 0
 7875              		@ link register save eliminated.
 793:src/xeq.c     **** }
 7876              		.loc 1 793 2 view .LVU2116
 7877 0000 6421     		movs	r1, #100
 7878 0002 6C20     		movs	r0, #108
 7879 0004 FFF7FEBF 		b	copyreg_n
 7880              	.LVL541:
 7881              		.cfi_endproc
 7882              	.LFE55:
 7884              		.section	.text.setlastXY,"ax",%progbits
 7885              		.align	1
 7886              		.p2align 2,,3
 7887              		.syntax unified
 7888              		.thumb
 7889              		.thumb_func
ARM GAS  /tmp/ccqED0AM.s 			page 274


 7890              		.fpu fpv4-sp-d16
 7892              	setlastXY:
 7893              	.LFB56:
 796:src/xeq.c     **** 	setlastX();
 7894              		.loc 1 796 29 view -0
 7895              		.cfi_startproc
 7896              		@ args = 0, pretend = 0, frame = 0
 7897              		@ frame_needed = 0, uses_anonymous_args = 0
 797:src/xeq.c     **** 	copyreg_n(regI_idx, regY_idx);
 7898              		.loc 1 797 2 view .LVU2118
 7899              	.LBB1954:
 7900              	.LBI1954:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 7901              		.loc 1 792 6 view .LVU2119
 7902              	.LBB1955:
 793:src/xeq.c     **** }
 7903              		.loc 1 793 2 view .LVU2120
 7904              	.LBE1955:
 7905              	.LBE1954:
 796:src/xeq.c     **** 	setlastX();
 7906              		.loc 1 796 29 is_stmt 0 view .LVU2121
 7907 0000 08B5     		push	{r3, lr}
 7908              		.cfi_def_cfa_offset 8
 7909              		.cfi_offset 3, -8
 7910              		.cfi_offset 14, -4
 7911              	.LBB1957:
 7912              	.LBB1956:
 793:src/xeq.c     **** }
 7913              		.loc 1 793 2 view .LVU2122
 7914 0002 6421     		movs	r1, #100
 7915 0004 6C20     		movs	r0, #108
 7916 0006 FFF7FEFF 		bl	copyreg_n
 7917              	.LVL542:
 7918              	.LBE1956:
 7919              	.LBE1957:
 798:src/xeq.c     **** }
 7920              		.loc 1 798 2 is_stmt 1 view .LVU2123
 799:src/xeq.c     **** 
 7921              		.loc 1 799 1 is_stmt 0 view .LVU2124
 7922 000a BDE80840 		pop	{r3, lr}
 7923              		.cfi_restore 14
 7924              		.cfi_restore 3
 7925              		.cfi_def_cfa_offset 0
 798:src/xeq.c     **** }
 7926              		.loc 1 798 2 view .LVU2125
 7927 000e 6521     		movs	r1, #101
 7928 0010 6D20     		movs	r0, #109
 7929 0012 FFF7FEBF 		b	copyreg_n
 7930              	.LVL543:
 7931              		.cfi_endproc
 7932              	.LFE56:
 7934 0016 00BF     		.section	.text.getRegister,"ax",%progbits
 7935              		.align	1
 7936              		.p2align 2,,3
 7937              		.global	getRegister
 7938              		.syntax unified
 7939              		.thumb
ARM GAS  /tmp/ccqED0AM.s 			page 275


 7940              		.thumb_func
 7941              		.fpu fpv4-sp-d16
 7943              	getRegister:
 7944              	.LVL544:
 7945              	.LFB57:
 802:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 7946              		.loc 1 802 49 is_stmt 1 view -0
 7947              		.cfi_startproc
 7948              		@ args = 0, pretend = 0, frame = 0
 7949              		@ frame_needed = 0, uses_anonymous_args = 0
 803:src/xeq.c     **** 	if (is_dblmode())
 7950              		.loc 1 803 2 view .LVU2127
 802:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 7951              		.loc 1 802 49 is_stmt 0 view .LVU2128
 7952 0000 10B5     		push	{r4, lr}
 7953              		.cfi_def_cfa_offset 8
 7954              		.cfi_offset 4, -8
 7955              		.cfi_offset 14, -4
 802:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 7956              		.loc 1 802 49 view .LVU2129
 7957 0002 0446     		mov	r4, r0
 803:src/xeq.c     **** 	if (is_dblmode())
 7958              		.loc 1 803 30 view .LVU2130
 7959 0004 0846     		mov	r0, r1
 7960              	.LVL545:
 803:src/xeq.c     **** 	if (is_dblmode())
 7961              		.loc 1 803 30 view .LVU2131
 7962 0006 FFF7FEFF 		bl	get_reg_n
 7963              	.LVL546:
 804:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 7964              		.loc 1 804 2 is_stmt 1 view .LVU2132
 7965              	.LBB1958:
 7966              	.LBI1958:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7967              		.loc 1 1118 5 view .LVU2133
 7968              	.LBB1959:
1119:src/xeq.c     **** }
 7969              		.loc 1 1119 2 view .LVU2134
1119:src/xeq.c     **** }
 7970              		.loc 1 1119 24 is_stmt 0 view .LVU2135
 7971 000a 094B     		ldr	r3, .L631
 7972 000c 1B68     		ldr	r3, [r3]
 7973 000e B3F8E827 		ldrh	r2, [r3, #2024]
 7974 0012 44F20103 		movw	r3, #16385
 7975              	.LBE1959:
 7976              	.LBE1958:
 804:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 7977              		.loc 1 804 5 view .LVU2136
 7978 0016 1340     		ands	r3, r3, r2
 7979 0018 B3F5804F 		cmp	r3, #16384
 805:src/xeq.c     **** 	else
 7980              		.loc 1 805 3 view .LVU2137
 7981 001c 2146     		mov	r1, r4
 804:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 7982              		.loc 1 804 5 view .LVU2138
 7983 001e 03D0     		beq	.L630
 807:src/xeq.c     **** 	return r;
ARM GAS  /tmp/ccqED0AM.s 			page 276


 7984              		.loc 1 807 3 is_stmt 1 view .LVU2139
 7985 0020 FFF7FEFF 		bl	decimal64ToNumber
 7986              	.LVL547:
 808:src/xeq.c     **** }
 7987              		.loc 1 808 2 view .LVU2140
 809:src/xeq.c     **** 
 7988              		.loc 1 809 1 is_stmt 0 view .LVU2141
 7989 0024 2046     		mov	r0, r4
 7990 0026 10BD     		pop	{r4, pc}
 7991              	.LVL548:
 7992              	.L630:
 805:src/xeq.c     **** 	else
 7993              		.loc 1 805 3 is_stmt 1 view .LVU2142
 7994 0028 FFF7FEFF 		bl	decimal128ToNumber
 7995              	.LVL549:
 808:src/xeq.c     **** }
 7996              		.loc 1 808 2 view .LVU2143
 809:src/xeq.c     **** 
 7997              		.loc 1 809 1 is_stmt 0 view .LVU2144
 7998 002c 2046     		mov	r0, r4
 7999 002e 10BD     		pop	{r4, pc}
 8000              	.LVL550:
 8001              	.L632:
 809:src/xeq.c     **** 
 8002              		.loc 1 809 1 view .LVU2145
 8003              		.align	2
 8004              	.L631:
 8005 0030 00000000 		.word	main_ram
 8006              		.cfi_endproc
 8007              	.LFE57:
 8009              		.section	.text.getX,"ax",%progbits
 8010              		.align	1
 8011              		.p2align 2,,3
 8012              		.global	getX
 8013              		.syntax unified
 8014              		.thumb
 8015              		.thumb_func
 8016              		.fpu fpv4-sp-d16
 8018              	getX:
 8019              	.LVL551:
 8020              	.LFB59:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8021              		.loc 1 824 31 is_stmt 1 view -0
 8022              		.cfi_startproc
 8023              		@ args = 0, pretend = 0, frame = 0
 8024              		@ frame_needed = 0, uses_anonymous_args = 0
 8025              		@ link register save eliminated.
 825:src/xeq.c     **** }
 8026              		.loc 1 825 2 view .LVU2147
 825:src/xeq.c     **** }
 8027              		.loc 1 825 9 is_stmt 0 view .LVU2148
 8028 0000 6421     		movs	r1, #100
 8029 0002 FFF7FEBF 		b	getRegister
 8030              	.LVL552:
 825:src/xeq.c     **** }
 8031              		.loc 1 825 9 view .LVU2149
 8032              		.cfi_endproc
ARM GAS  /tmp/ccqED0AM.s 			page 277


 8033              	.LFE59:
 8035 0006 00BF     		.section	.text.getY,"ax",%progbits
 8036              		.align	1
 8037              		.p2align 2,,3
 8038              		.global	getY
 8039              		.syntax unified
 8040              		.thumb
 8041              		.thumb_func
 8042              		.fpu fpv4-sp-d16
 8044              	getY:
 8045              	.LVL553:
 8046              	.LFB61:
 832:src/xeq.c     **** 	getRegister(y, regY_idx);
 8047              		.loc 1 832 25 is_stmt 1 view -0
 8048              		.cfi_startproc
 8049              		@ args = 0, pretend = 0, frame = 0
 8050              		@ frame_needed = 0, uses_anonymous_args = 0
 8051              		@ link register save eliminated.
 833:src/xeq.c     **** }
 8052              		.loc 1 833 2 view .LVU2151
 8053 0000 6521     		movs	r1, #101
 8054 0002 FFF7FEBF 		b	getRegister
 8055              	.LVL554:
 833:src/xeq.c     **** }
 8056              		.loc 1 833 2 is_stmt 0 view .LVU2152
 8057              		.cfi_endproc
 8058              	.LFE61:
 8060 0006 00BF     		.section	.text.getXY,"ax",%progbits
 8061              		.align	1
 8062              		.p2align 2,,3
 8063              		.global	getXY
 8064              		.syntax unified
 8065              		.thumb
 8066              		.thumb_func
 8067              		.fpu fpv4-sp-d16
 8069              	getXY:
 8070              	.LVL555:
 8071              	.LFB65:
 854:src/xeq.c     **** 	getX(x);
 8072              		.loc 1 854 40 is_stmt 1 view -0
 8073              		.cfi_startproc
 8074              		@ args = 0, pretend = 0, frame = 0
 8075              		@ frame_needed = 0, uses_anonymous_args = 0
 855:src/xeq.c     **** 	getY(y);
 8076              		.loc 1 855 2 view .LVU2154
 8077              	.LBB1960:
 8078              	.LBI1960:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8079              		.loc 1 824 12 view .LVU2155
 8080              	.LBB1961:
 825:src/xeq.c     **** }
 8081              		.loc 1 825 2 view .LVU2156
 8082              	.LBE1961:
 8083              	.LBE1960:
 854:src/xeq.c     **** 	getX(x);
 8084              		.loc 1 854 40 is_stmt 0 view .LVU2157
 8085 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/ccqED0AM.s 			page 278


 8086              		.cfi_def_cfa_offset 8
 8087              		.cfi_offset 4, -8
 8088              		.cfi_offset 14, -4
 854:src/xeq.c     **** 	getX(x);
 8089              		.loc 1 854 40 view .LVU2158
 8090 0002 0C46     		mov	r4, r1
 8091              	.LBB1963:
 8092              	.LBB1962:
 825:src/xeq.c     **** }
 8093              		.loc 1 825 9 view .LVU2159
 8094 0004 6421     		movs	r1, #100
 8095              	.LVL556:
 825:src/xeq.c     **** }
 8096              		.loc 1 825 9 view .LVU2160
 8097 0006 FFF7FEFF 		bl	getRegister
 8098              	.LVL557:
 825:src/xeq.c     **** }
 8099              		.loc 1 825 9 view .LVU2161
 8100              	.LBE1962:
 8101              	.LBE1963:
 856:src/xeq.c     **** }
 8102              		.loc 1 856 2 is_stmt 1 view .LVU2162
 8103              	.LBB1964:
 8104              	.LBI1964:
 832:src/xeq.c     **** 	getRegister(y, regY_idx);
 8105              		.loc 1 832 6 view .LVU2163
 8106              	.LBB1965:
 833:src/xeq.c     **** }
 8107              		.loc 1 833 2 view .LVU2164
 8108 000a 2046     		mov	r0, r4
 8109 000c 6521     		movs	r1, #101
 8110              	.LBE1965:
 8111              	.LBE1964:
 857:src/xeq.c     **** 
 8112              		.loc 1 857 1 is_stmt 0 view .LVU2165
 8113 000e BDE81040 		pop	{r4, lr}
 8114              		.cfi_restore 14
 8115              		.cfi_restore 4
 8116              		.cfi_def_cfa_offset 0
 8117              	.LVL558:
 8118              	.LBB1967:
 8119              	.LBB1966:
 833:src/xeq.c     **** }
 8120              		.loc 1 833 2 view .LVU2166
 8121 0012 FFF7FEBF 		b	getRegister
 8122              	.LVL559:
 833:src/xeq.c     **** }
 8123              		.loc 1 833 2 view .LVU2167
 8124              	.LBE1966:
 8125              	.LBE1967:
 8126              		.cfi_endproc
 8127              	.LFE65:
 8129 0016 00BF     		.section	.text.getXYZ,"ax",%progbits
 8130              		.align	1
 8131              		.p2align 2,,3
 8132              		.global	getXYZ
 8133              		.syntax unified
ARM GAS  /tmp/ccqED0AM.s 			page 279


 8134              		.thumb
 8135              		.thumb_func
 8136              		.fpu fpv4-sp-d16
 8138              	getXYZ:
 8139              	.LVL560:
 8140              	.LFB67:
 867:src/xeq.c     **** 	getXY(x, y);
 8141              		.loc 1 867 55 is_stmt 1 view -0
 8142              		.cfi_startproc
 8143              		@ args = 0, pretend = 0, frame = 0
 8144              		@ frame_needed = 0, uses_anonymous_args = 0
 868:src/xeq.c     **** 	getZ(z);
 8145              		.loc 1 868 2 view .LVU2169
 867:src/xeq.c     **** 	getXY(x, y);
 8146              		.loc 1 867 55 is_stmt 0 view .LVU2170
 8147 0000 38B5     		push	{r3, r4, r5, lr}
 8148              		.cfi_def_cfa_offset 16
 8149              		.cfi_offset 3, -16
 8150              		.cfi_offset 4, -12
 8151              		.cfi_offset 5, -8
 8152              		.cfi_offset 14, -4
 867:src/xeq.c     **** 	getXY(x, y);
 8153              		.loc 1 867 55 view .LVU2171
 8154 0002 0D46     		mov	r5, r1
 8155              	.LVL561:
 8156              	.LBB1968:
 8157              	.LBI1968:
 854:src/xeq.c     **** 	getX(x);
 8158              		.loc 1 854 6 is_stmt 1 view .LVU2172
 8159              	.LBE1968:
 855:src/xeq.c     **** 	getY(y);
 8160              		.loc 1 855 2 view .LVU2173
 8161              	.LBB1975:
 8162              	.LBB1969:
 8163              	.LBI1969:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8164              		.loc 1 824 12 view .LVU2174
 8165              	.LBB1970:
 825:src/xeq.c     **** }
 8166              		.loc 1 825 2 view .LVU2175
 825:src/xeq.c     **** }
 8167              		.loc 1 825 9 is_stmt 0 view .LVU2176
 8168 0004 6421     		movs	r1, #100
 8169              	.LVL562:
 825:src/xeq.c     **** }
 8170              		.loc 1 825 9 view .LVU2177
 8171              	.LBE1970:
 8172              	.LBE1969:
 8173              	.LBE1975:
 867:src/xeq.c     **** 	getXY(x, y);
 8174              		.loc 1 867 55 view .LVU2178
 8175 0006 1446     		mov	r4, r2
 8176              	.LBB1976:
 8177              	.LBB1972:
 8178              	.LBB1971:
 825:src/xeq.c     **** }
 8179              		.loc 1 825 9 view .LVU2179
ARM GAS  /tmp/ccqED0AM.s 			page 280


 8180 0008 FFF7FEFF 		bl	getRegister
 8181              	.LVL563:
 825:src/xeq.c     **** }
 8182              		.loc 1 825 9 view .LVU2180
 8183              	.LBE1971:
 8184              	.LBE1972:
 8185              	.LBE1976:
 856:src/xeq.c     **** }
 8186              		.loc 1 856 2 is_stmt 1 view .LVU2181
 8187              	.LBB1977:
 8188              	.LBB1973:
 8189              	.LBI1973:
 832:src/xeq.c     **** 	getRegister(y, regY_idx);
 8190              		.loc 1 832 6 view .LVU2182
 8191              	.LBB1974:
 833:src/xeq.c     **** }
 8192              		.loc 1 833 2 view .LVU2183
 8193 000c 2846     		mov	r0, r5
 8194 000e 6521     		movs	r1, #101
 8195 0010 FFF7FEFF 		bl	getRegister
 8196              	.LVL564:
 833:src/xeq.c     **** }
 8197              		.loc 1 833 2 is_stmt 0 view .LVU2184
 8198              	.LBE1974:
 8199              	.LBE1973:
 8200              	.LBE1977:
 869:src/xeq.c     **** }
 8201              		.loc 1 869 2 is_stmt 1 view .LVU2185
 8202              	.LBB1978:
 8203              	.LBI1978:
 840:src/xeq.c     **** 	getRegister(z, regZ_idx);
 8204              		.loc 1 840 13 view .LVU2186
 8205              	.LBB1979:
 841:src/xeq.c     **** }
 8206              		.loc 1 841 2 view .LVU2187
 8207 0014 2046     		mov	r0, r4
 8208 0016 6621     		movs	r1, #102
 8209              	.LBE1979:
 8210              	.LBE1978:
 870:src/xeq.c     **** 
 8211              		.loc 1 870 1 is_stmt 0 view .LVU2188
 8212 0018 BDE83840 		pop	{r3, r4, r5, lr}
 8213              		.cfi_restore 14
 8214              		.cfi_restore 5
 8215              		.cfi_restore 4
 8216              		.cfi_restore 3
 8217              		.cfi_def_cfa_offset 0
 8218              	.LVL565:
 8219              	.LBB1981:
 8220              	.LBB1980:
 841:src/xeq.c     **** }
 8221              		.loc 1 841 2 view .LVU2189
 8222 001c FFF7FEBF 		b	getRegister
 8223              	.LVL566:
 841:src/xeq.c     **** }
 8224              		.loc 1 841 2 view .LVU2190
 8225              	.LBE1980:
ARM GAS  /tmp/ccqED0AM.s 			page 281


 8226              	.LBE1981:
 8227              		.cfi_endproc
 8228              	.LFE67:
 8230              		.section	.text.getYZ,"ax",%progbits
 8231              		.align	1
 8232              		.p2align 2,,3
 8233              		.global	getYZ
 8234              		.syntax unified
 8235              		.thumb
 8236              		.thumb_func
 8237              		.fpu fpv4-sp-d16
 8239              	getYZ:
 8240              	.LVL567:
 8241              	.LFB69:
 884:src/xeq.c     **** 	getY(y);
 8242              		.loc 1 884 40 is_stmt 1 view -0
 8243              		.cfi_startproc
 8244              		@ args = 0, pretend = 0, frame = 0
 8245              		@ frame_needed = 0, uses_anonymous_args = 0
 885:src/xeq.c     **** 	getZ(z);
 8246              		.loc 1 885 2 view .LVU2192
 8247              	.LBB1982:
 8248              	.LBI1982:
 832:src/xeq.c     **** 	getRegister(y, regY_idx);
 8249              		.loc 1 832 6 view .LVU2193
 8250              	.LBB1983:
 833:src/xeq.c     **** }
 8251              		.loc 1 833 2 view .LVU2194
 8252              	.LBE1983:
 8253              	.LBE1982:
 884:src/xeq.c     **** 	getY(y);
 8254              		.loc 1 884 40 is_stmt 0 view .LVU2195
 8255 0000 10B5     		push	{r4, lr}
 8256              		.cfi_def_cfa_offset 8
 8257              		.cfi_offset 4, -8
 8258              		.cfi_offset 14, -4
 884:src/xeq.c     **** 	getY(y);
 8259              		.loc 1 884 40 view .LVU2196
 8260 0002 0C46     		mov	r4, r1
 8261              	.LBB1985:
 8262              	.LBB1984:
 833:src/xeq.c     **** }
 8263              		.loc 1 833 2 view .LVU2197
 8264 0004 6521     		movs	r1, #101
 8265              	.LVL568:
 833:src/xeq.c     **** }
 8266              		.loc 1 833 2 view .LVU2198
 8267 0006 FFF7FEFF 		bl	getRegister
 8268              	.LVL569:
 833:src/xeq.c     **** }
 8269              		.loc 1 833 2 view .LVU2199
 8270              	.LBE1984:
 8271              	.LBE1985:
 886:src/xeq.c     **** }
 8272              		.loc 1 886 2 is_stmt 1 view .LVU2200
 8273              	.LBB1986:
 8274              	.LBI1986:
ARM GAS  /tmp/ccqED0AM.s 			page 282


 840:src/xeq.c     **** 	getRegister(z, regZ_idx);
 8275              		.loc 1 840 13 view .LVU2201
 8276              	.LBB1987:
 841:src/xeq.c     **** }
 8277              		.loc 1 841 2 view .LVU2202
 8278 000a 2046     		mov	r0, r4
 8279 000c 6621     		movs	r1, #102
 8280              	.LBE1987:
 8281              	.LBE1986:
 887:src/xeq.c     **** 
 8282              		.loc 1 887 1 is_stmt 0 view .LVU2203
 8283 000e BDE81040 		pop	{r4, lr}
 8284              		.cfi_restore 14
 8285              		.cfi_restore 4
 8286              		.cfi_def_cfa_offset 0
 8287              	.LVL570:
 8288              	.LBB1989:
 8289              	.LBB1988:
 841:src/xeq.c     **** }
 8290              		.loc 1 841 2 view .LVU2204
 8291 0012 FFF7FEBF 		b	getRegister
 8292              	.LVL571:
 841:src/xeq.c     **** }
 8293              		.loc 1 841 2 view .LVU2205
 8294              	.LBE1988:
 8295              	.LBE1989:
 8296              		.cfi_endproc
 8297              	.LFE69:
 8299 0016 00BF     		.section	.text.getXYZT,"ax",%progbits
 8300              		.align	1
 8301              		.p2align 2,,3
 8302              		.global	getXYZT
 8303              		.syntax unified
 8304              		.thumb
 8305              		.thumb_func
 8306              		.fpu fpv4-sp-d16
 8308              	getXYZT:
 8309              	.LVL572:
 8310              	.LFB68:
 879:src/xeq.c     **** 	getXYZ(x, y, z);
 8311              		.loc 1 879 70 is_stmt 1 view -0
 8312              		.cfi_startproc
 8313              		@ args = 0, pretend = 0, frame = 0
 8314              		@ frame_needed = 0, uses_anonymous_args = 0
 880:src/xeq.c     **** 	getT(t);
 8315              		.loc 1 880 2 view .LVU2207
 879:src/xeq.c     **** 	getXYZ(x, y, z);
 8316              		.loc 1 879 70 is_stmt 0 view .LVU2208
 8317 0000 10B5     		push	{r4, lr}
 8318              		.cfi_def_cfa_offset 8
 8319              		.cfi_offset 4, -8
 8320              		.cfi_offset 14, -4
 879:src/xeq.c     **** 	getXYZ(x, y, z);
 8321              		.loc 1 879 70 view .LVU2209
 8322 0002 1C46     		mov	r4, r3
 880:src/xeq.c     **** 	getT(t);
 8323              		.loc 1 880 2 view .LVU2210
ARM GAS  /tmp/ccqED0AM.s 			page 283


 8324 0004 FFF7FEFF 		bl	getXYZ
 8325              	.LVL573:
 881:src/xeq.c     **** }
 8326              		.loc 1 881 2 is_stmt 1 view .LVU2211
 8327              	.LBB1990:
 8328              	.LBI1990:
 850:src/xeq.c     **** 	getRegister(t, regT_idx);
 8329              		.loc 1 850 13 view .LVU2212
 8330              	.LBB1991:
 851:src/xeq.c     **** }
 8331              		.loc 1 851 2 view .LVU2213
 8332 0008 2046     		mov	r0, r4
 8333 000a 6721     		movs	r1, #103
 8334              	.LBE1991:
 8335              	.LBE1990:
 882:src/xeq.c     **** 
 8336              		.loc 1 882 1 is_stmt 0 view .LVU2214
 8337 000c BDE81040 		pop	{r4, lr}
 8338              		.cfi_restore 14
 8339              		.cfi_restore 4
 8340              		.cfi_def_cfa_offset 0
 8341              	.LVL574:
 8342              	.LBB1993:
 8343              	.LBB1992:
 851:src/xeq.c     **** }
 8344              		.loc 1 851 2 view .LVU2215
 8345 0010 FFF7FEBF 		b	getRegister
 8346              	.LVL575:
 851:src/xeq.c     **** }
 8347              		.loc 1 851 2 view .LVU2216
 8348              	.LBE1992:
 8349              	.LBE1993:
 8350              		.cfi_endproc
 8351              	.LFE68:
 8353              		.section	.text.storcl_op,"ax",%progbits
 8354              		.align	1
 8355              		.p2align 2,,3
 8356              		.syntax unified
 8357              		.thumb
 8358              		.thumb_func
 8359              		.fpu fpv4-sp-d16
 8361              	storcl_op:
 8362              	.LVL576:
 8363              	.LFB115:
1650:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8364              		.loc 1 1650 76 is_stmt 1 view -0
 8365              		.cfi_startproc
 8366              		@ args = 0, pretend = 0, frame = 72
 8367              		@ frame_needed = 0, uses_anonymous_args = 0
1651:src/xeq.c     **** 
 8368              		.loc 1 1651 2 view .LVU2218
1650:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8369              		.loc 1 1650 76 is_stmt 0 view .LVU2219
 8370 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 8371              		.cfi_def_cfa_offset 20
 8372              		.cfi_offset 4, -20
 8373              		.cfi_offset 5, -16
ARM GAS  /tmp/ccqED0AM.s 			page 284


 8374              		.cfi_offset 6, -12
 8375              		.cfi_offset 7, -8
 8376              		.cfi_offset 14, -4
 8377 0002 93B0     		sub	sp, sp, #76
 8378              		.cfi_def_cfa_offset 96
 8379              	.LVL577:
1653:src/xeq.c     **** 	getRegister(y, index);
 8380              		.loc 1 1653 2 is_stmt 1 view .LVU2220
 8381              	.LBB1994:
 8382              	.LBI1994:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8383              		.loc 1 824 12 view .LVU2221
 8384              	.LBB1995:
 825:src/xeq.c     **** }
 8385              		.loc 1 825 2 view .LVU2222
 8386              	.LBE1995:
 8387              	.LBE1994:
1650:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8388              		.loc 1 1650 76 is_stmt 0 view .LVU2223
 8389 0004 0E46     		mov	r6, r1
 8390 0006 0446     		mov	r4, r0
 8391              	.LBB1998:
 8392              	.LBB1996:
 825:src/xeq.c     **** }
 8393              		.loc 1 825 9 view .LVU2224
 8394 0008 6421     		movs	r1, #100
 8395              	.LVL578:
 825:src/xeq.c     **** }
 8396              		.loc 1 825 9 view .LVU2225
 8397 000a 6846     		mov	r0, sp
 8398              	.LVL579:
 825:src/xeq.c     **** }
 8399              		.loc 1 825 9 view .LVU2226
 8400              	.LBE1996:
 8401              	.LBE1998:
1650:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8402              		.loc 1 1650 76 view .LVU2227
 8403 000c 1D46     		mov	r5, r3
 8404 000e 1746     		mov	r7, r2
 8405              	.LBB1999:
 8406              	.LBB1997:
 825:src/xeq.c     **** }
 8407              		.loc 1 825 9 view .LVU2228
 8408 0010 FFF7FEFF 		bl	getRegister
 8409              	.LVL580:
 825:src/xeq.c     **** }
 8410              		.loc 1 825 9 view .LVU2229
 8411              	.LBE1997:
 8412              	.LBE1999:
1654:src/xeq.c     **** 	if (rev) {
 8413              		.loc 1 1654 2 is_stmt 1 view .LVU2230
 8414 0014 3146     		mov	r1, r6
 8415 0016 09A8     		add	r0, sp, #36
 8416              	.LVL581:
1654:src/xeq.c     **** 	if (rev) {
 8417              		.loc 1 1654 2 is_stmt 0 view .LVU2231
 8418 0018 FFF7FEFF 		bl	getRegister
ARM GAS  /tmp/ccqED0AM.s 			page 285


 8419              	.LVL582:
1655:src/xeq.c     **** 		x = y;
 8420              		.loc 1 1655 2 is_stmt 1 view .LVU2232
1655:src/xeq.c     **** 		x = y;
 8421              		.loc 1 1655 5 is_stmt 0 view .LVU2233
 8422 001c 4DB1     		cbz	r5, .L653
1657:src/xeq.c     **** 	}
 8423              		.loc 1 1657 5 view .LVU2234
 8424 001e 6946     		mov	r1, sp
1656:src/xeq.c     **** 		y = &a;
 8425              		.loc 1 1656 5 view .LVU2235
 8426 0020 09AA     		add	r2, sp, #36
 8427              	.LVL583:
 8428              	.L644:
1660:src/xeq.c     **** 	case 1:
 8429              		.loc 1 1660 2 is_stmt 1 view .LVU2236
 8430 0022 601E     		subs	r0, r4, #1
 8431 0024 0528     		cmp	r0, #5
 8432 0026 2BD8     		bhi	.L654
 8433 0028 DFE800F0 		tbb	[pc, r0]
 8434              	.L647:
 8435 002c 0C       		.byte	(.L652-.L647)/2
 8436 002d 12       		.byte	(.L651-.L647)/2
 8437 002e 18       		.byte	(.L650-.L647)/2
 8438 002f 1E       		.byte	(.L649-.L647)/2
 8439 0030 24       		.byte	(.L648-.L647)/2
 8440 0031 06       		.byte	(.L646-.L647)/2
 8441              	.LVL584:
 8442              		.p2align 1
 8443              	.L653:
1651:src/xeq.c     **** 
 8444              		.loc 1 1651 28 is_stmt 0 view .LVU2237
 8445 0032 09A9     		add	r1, sp, #36
 8446              	.LVL585:
1651:src/xeq.c     **** 
 8447              		.loc 1 1651 19 view .LVU2238
 8448 0034 6A46     		mov	r2, sp
 8449 0036 F4E7     		b	.L644
 8450              	.LVL586:
 8451              	.L646:
1677:src/xeq.c     **** 		break;
 8452              		.loc 1 1677 3 is_stmt 1 view .LVU2239
 8453 0038 3846     		mov	r0, r7
 8454 003a FFF7FEFF 		bl	dn_max
 8455              	.LVL587:
1678:src/xeq.c     **** 	default:
 8456              		.loc 1 1678 3 view .LVU2240
1682:src/xeq.c     **** }
 8457              		.loc 1 1682 9 is_stmt 0 view .LVU2241
 8458 003e 0020     		movs	r0, #0
 8459              	.L643:
1683:src/xeq.c     **** 
 8460              		.loc 1 1683 1 view .LVU2242
 8461 0040 13B0     		add	sp, sp, #76
 8462              		.cfi_remember_state
 8463              		.cfi_def_cfa_offset 20
 8464              		@ sp needed
ARM GAS  /tmp/ccqED0AM.s 			page 286


 8465 0042 F0BD     		pop	{r4, r5, r6, r7, pc}
 8466              	.LVL588:
 8467              	.L652:
 8468              		.cfi_restore_state
1662:src/xeq.c     **** 		break;
 8469              		.loc 1 1662 3 is_stmt 1 view .LVU2243
 8470 0044 3846     		mov	r0, r7
 8471 0046 FFF7FEFF 		bl	dn_add
 8472              	.LVL589:
1663:src/xeq.c     **** 	case 2:
 8473              		.loc 1 1663 3 view .LVU2244
1682:src/xeq.c     **** }
 8474              		.loc 1 1682 9 is_stmt 0 view .LVU2245
 8475 004a 0020     		movs	r0, #0
1683:src/xeq.c     **** 
 8476              		.loc 1 1683 1 view .LVU2246
 8477 004c 13B0     		add	sp, sp, #76
 8478              		.cfi_remember_state
 8479              		.cfi_def_cfa_offset 20
 8480              		@ sp needed
 8481 004e F0BD     		pop	{r4, r5, r6, r7, pc}
 8482              	.LVL590:
 8483              	.L651:
 8484              		.cfi_restore_state
1665:src/xeq.c     **** 		break;
 8485              		.loc 1 1665 3 is_stmt 1 view .LVU2247
 8486 0050 3846     		mov	r0, r7
 8487 0052 FFF7FEFF 		bl	dn_subtract
 8488              	.LVL591:
1666:src/xeq.c     **** 	case 3:
 8489              		.loc 1 1666 3 view .LVU2248
1682:src/xeq.c     **** }
 8490              		.loc 1 1682 9 is_stmt 0 view .LVU2249
 8491 0056 0020     		movs	r0, #0
1683:src/xeq.c     **** 
 8492              		.loc 1 1683 1 view .LVU2250
 8493 0058 13B0     		add	sp, sp, #76
 8494              		.cfi_remember_state
 8495              		.cfi_def_cfa_offset 20
 8496              		@ sp needed
 8497 005a F0BD     		pop	{r4, r5, r6, r7, pc}
 8498              	.LVL592:
 8499              	.L650:
 8500              		.cfi_restore_state
1668:src/xeq.c     **** 		break;
 8501              		.loc 1 1668 3 is_stmt 1 view .LVU2251
 8502 005c 3846     		mov	r0, r7
 8503 005e FFF7FEFF 		bl	dn_multiply
 8504              	.LVL593:
1669:src/xeq.c     **** 	case 4:
 8505              		.loc 1 1669 3 view .LVU2252
1682:src/xeq.c     **** }
 8506              		.loc 1 1682 9 is_stmt 0 view .LVU2253
 8507 0062 0020     		movs	r0, #0
1683:src/xeq.c     **** 
 8508              		.loc 1 1683 1 view .LVU2254
 8509 0064 13B0     		add	sp, sp, #76
ARM GAS  /tmp/ccqED0AM.s 			page 287


 8510              		.cfi_remember_state
 8511              		.cfi_def_cfa_offset 20
 8512              		@ sp needed
 8513 0066 F0BD     		pop	{r4, r5, r6, r7, pc}
 8514              	.LVL594:
 8515              	.L649:
 8516              		.cfi_restore_state
1671:src/xeq.c     **** 		break;
 8517              		.loc 1 1671 3 is_stmt 1 view .LVU2255
 8518 0068 3846     		mov	r0, r7
 8519 006a FFF7FEFF 		bl	dn_divide
 8520              	.LVL595:
1672:src/xeq.c     **** 	case 5:
 8521              		.loc 1 1672 3 view .LVU2256
1682:src/xeq.c     **** }
 8522              		.loc 1 1682 9 is_stmt 0 view .LVU2257
 8523 006e 0020     		movs	r0, #0
1683:src/xeq.c     **** 
 8524              		.loc 1 1683 1 view .LVU2258
 8525 0070 13B0     		add	sp, sp, #76
 8526              		.cfi_remember_state
 8527              		.cfi_def_cfa_offset 20
 8528              		@ sp needed
 8529 0072 F0BD     		pop	{r4, r5, r6, r7, pc}
 8530              	.LVL596:
 8531              	.L648:
 8532              		.cfi_restore_state
1674:src/xeq.c     **** 		break;
 8533              		.loc 1 1674 3 is_stmt 1 view .LVU2259
 8534 0074 3846     		mov	r0, r7
 8535 0076 FFF7FEFF 		bl	dn_min
 8536              	.LVL597:
1675:src/xeq.c     **** 	case 6:
 8537              		.loc 1 1675 3 view .LVU2260
1682:src/xeq.c     **** }
 8538              		.loc 1 1682 9 is_stmt 0 view .LVU2261
 8539 007a 0020     		movs	r0, #0
1683:src/xeq.c     **** 
 8540              		.loc 1 1683 1 view .LVU2262
 8541 007c 13B0     		add	sp, sp, #76
 8542              		.cfi_def_cfa_offset 20
 8543              		@ sp needed
 8544 007e F0BD     		pop	{r4, r5, r6, r7, pc}
 8545              	.LVL598:
 8546              	.L654:
1682:src/xeq.c     **** }
 8547              		.loc 1 1682 9 view .LVU2263
 8548 0080 0120     		movs	r0, #1
 8549 0082 DDE7     		b	.L643
 8550              		.cfi_endproc
 8551              	.LFE115:
 8553              		.section	.text.storcl_cop,"ax",%progbits
 8554              		.align	1
 8555              		.p2align 2,,3
 8556              		.syntax unified
 8557              		.thumb
 8558              		.thumb_func
ARM GAS  /tmp/ccqED0AM.s 			page 288


 8559              		.fpu fpv4-sp-d16
 8561              	storcl_cop:
 8562              	.LVL599:
 8563              	.LFB120:
1784:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8564              		.loc 1 1784 93 is_stmt 1 view -0
 8565              		.cfi_startproc
 8566              		@ args = 4, pretend = 0, frame = 144
 8567              		@ frame_needed = 0, uses_anonymous_args = 0
1785:src/xeq.c     **** 
 8568              		.loc 1 1785 2 view .LVU2265
1784:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8569              		.loc 1 1784 93 is_stmt 0 view .LVU2266
 8570 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 8571              		.cfi_def_cfa_offset 24
 8572              		.cfi_offset 4, -24
 8573              		.cfi_offset 5, -20
 8574              		.cfi_offset 6, -16
 8575              		.cfi_offset 7, -12
 8576              		.cfi_offset 8, -8
 8577              		.cfi_offset 14, -4
 8578 0004 A6B0     		sub	sp, sp, #152
 8579              		.cfi_def_cfa_offset 176
 8580              	.LVL600:
1787:src/xeq.c     **** 	getRegister(y + 0, index);
 8581              		.loc 1 1787 2 is_stmt 1 view .LVU2267
 8582              	.LBB2000:
 8583              	.LBI2000:
 854:src/xeq.c     **** 	getX(x);
 8584              		.loc 1 854 6 view .LVU2268
 8585              	.LBE2000:
 855:src/xeq.c     **** 	getY(y);
 8586              		.loc 1 855 2 view .LVU2269
 8587              	.LBB2009:
 8588              	.LBB2001:
 8589              	.LBI2001:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8590              		.loc 1 824 12 view .LVU2270
 8591              	.LBB2002:
 825:src/xeq.c     **** }
 8592              		.loc 1 825 2 view .LVU2271
 8593              	.LBE2002:
 8594              	.LBE2001:
 8595              	.LBE2009:
1784:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8596              		.loc 1 1784 93 is_stmt 0 view .LVU2272
 8597 0006 0D46     		mov	r5, r1
 8598 0008 0446     		mov	r4, r0
 8599              	.LBB2010:
 8600              	.LBB2005:
 8601              	.LBB2003:
 825:src/xeq.c     **** }
 8602              		.loc 1 825 9 view .LVU2273
 8603 000a 6421     		movs	r1, #100
 8604              	.LVL601:
 825:src/xeq.c     **** }
 8605              		.loc 1 825 9 view .LVU2274
ARM GAS  /tmp/ccqED0AM.s 			page 289


 8606 000c 02A8     		add	r0, sp, #8
 8607              	.LVL602:
 825:src/xeq.c     **** }
 8608              		.loc 1 825 9 view .LVU2275
 8609              	.LBE2003:
 8610              	.LBE2005:
 8611              	.LBE2010:
1784:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8612              		.loc 1 1784 93 view .LVU2276
 8613 000e 9046     		mov	r8, r2
 8614 0010 1E46     		mov	r6, r3
 8615 0012 2C9F     		ldr	r7, [sp, #176]
 8616              	.LBB2011:
 8617              	.LBB2006:
 8618              	.LBB2004:
 825:src/xeq.c     **** }
 8619              		.loc 1 825 9 view .LVU2277
 8620 0014 FFF7FEFF 		bl	getRegister
 8621              	.LVL603:
 825:src/xeq.c     **** }
 8622              		.loc 1 825 9 view .LVU2278
 8623              	.LBE2004:
 8624              	.LBE2006:
 8625              	.LBE2011:
 856:src/xeq.c     **** }
 8626              		.loc 1 856 2 is_stmt 1 view .LVU2279
 8627              	.LBB2012:
 8628              	.LBB2007:
 8629              	.LBI2007:
 832:src/xeq.c     **** 	getRegister(y, regY_idx);
 8630              		.loc 1 832 6 view .LVU2280
 8631              	.LBB2008:
 833:src/xeq.c     **** }
 8632              		.loc 1 833 2 view .LVU2281
 8633 0018 6521     		movs	r1, #101
 8634 001a 0BA8     		add	r0, sp, #44
 8635              	.LVL604:
 833:src/xeq.c     **** }
 8636              		.loc 1 833 2 is_stmt 0 view .LVU2282
 8637 001c FFF7FEFF 		bl	getRegister
 8638              	.LVL605:
 833:src/xeq.c     **** }
 8639              		.loc 1 833 2 view .LVU2283
 8640              	.LBE2008:
 8641              	.LBE2007:
 8642              	.LBE2012:
1788:src/xeq.c     **** 	getRegister(y + 1, index + 1);
 8643              		.loc 1 1788 2 is_stmt 1 view .LVU2284
 8644 0020 2946     		mov	r1, r5
 8645 0022 14A8     		add	r0, sp, #80
 8646              	.LVL606:
1788:src/xeq.c     **** 	getRegister(y + 1, index + 1);
 8647              		.loc 1 1788 2 is_stmt 0 view .LVU2285
 8648 0024 FFF7FEFF 		bl	getRegister
 8649              	.LVL607:
1789:src/xeq.c     **** 
 8650              		.loc 1 1789 2 is_stmt 1 view .LVU2286
ARM GAS  /tmp/ccqED0AM.s 			page 290


 8651 0028 691C     		adds	r1, r5, #1
 8652 002a 1DA8     		add	r0, sp, #116
 8653 002c FFF7FEFF 		bl	getRegister
 8654              	.LVL608:
1791:src/xeq.c     **** 		x = y;
 8655              		.loc 1 1791 2 view .LVU2287
1791:src/xeq.c     **** 		x = y;
 8656              		.loc 1 1791 5 is_stmt 0 view .LVU2288
 8657 0030 47B1     		cbz	r7, .L664
1793:src/xeq.c     **** 	}
 8658              		.loc 1 1793 5 view .LVU2289
 8659 0032 02AA     		add	r2, sp, #8
 8660              	.LVL609:
1792:src/xeq.c     **** 		y = a;
 8661              		.loc 1 1792 5 view .LVU2290
 8662 0034 14A9     		add	r1, sp, #80
 8663              	.LVL610:
 8664              	.L657:
1796:src/xeq.c     **** 	case 1:
 8665              		.loc 1 1796 2 is_stmt 1 view .LVU2291
 8666 0036 601E     		subs	r0, r4, #1
 8667 0038 0328     		cmp	r0, #3
 8668 003a 3ED8     		bhi	.L665
 8669 003c DFE800F0 		tbb	[pc, r0]
 8670              	.L660:
 8671 0040 13       		.byte	(.L663-.L660)/2
 8672 0041 21       		.byte	(.L662-.L660)/2
 8673 0042 2F       		.byte	(.L661-.L660)/2
 8674 0043 05       		.byte	(.L659-.L660)/2
 8675              	.LVL611:
 8676              		.p2align 1
 8677              	.L664:
1785:src/xeq.c     **** 
 8678              		.loc 1 1785 33 is_stmt 0 view .LVU2292
 8679 0044 14AA     		add	r2, sp, #80
 8680              	.LVL612:
1785:src/xeq.c     **** 
 8681              		.loc 1 1785 25 view .LVU2293
 8682 0046 02A9     		add	r1, sp, #8
 8683              	.LVL613:
1785:src/xeq.c     **** 
 8684              		.loc 1 1785 25 view .LVU2294
 8685 0048 F5E7     		b	.L657
 8686              	.L659:
1807:src/xeq.c     **** 		break;
 8687              		.loc 1 1807 3 is_stmt 1 view .LVU2295
1807:src/xeq.c     **** 		break;
 8688              		.loc 1 1807 46 is_stmt 0 view .LVU2296
 8689 004a 01F12403 		add	r3, r1, #36
1807:src/xeq.c     **** 		break;
 8690              		.loc 1 1807 3 view .LVU2297
 8691 004e CDE90013 		strd	r1, r3, [sp]
 8692 0052 4046     		mov	r0, r8
 8693 0054 3146     		mov	r1, r6
 8694              	.LVL614:
1807:src/xeq.c     **** 		break;
 8695              		.loc 1 1807 3 view .LVU2298
ARM GAS  /tmp/ccqED0AM.s 			page 291


 8696 0056 02F12403 		add	r3, r2, #36
 8697 005a FFF7FEFF 		bl	cmplxDivide
 8698              	.LVL615:
1808:src/xeq.c     **** 	default:
 8699              		.loc 1 1808 3 is_stmt 1 view .LVU2299
1812:src/xeq.c     **** }
 8700              		.loc 1 1812 9 is_stmt 0 view .LVU2300
 8701 005e 0020     		movs	r0, #0
 8702              	.L656:
1813:src/xeq.c     **** 
 8703              		.loc 1 1813 1 view .LVU2301
 8704 0060 26B0     		add	sp, sp, #152
 8705              		.cfi_remember_state
 8706              		.cfi_def_cfa_offset 24
 8707              		@ sp needed
 8708 0062 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8709              	.LVL616:
 8710              	.L663:
 8711              		.cfi_restore_state
1798:src/xeq.c     **** 		break;
 8712              		.loc 1 1798 3 is_stmt 1 view .LVU2302
1798:src/xeq.c     **** 		break;
 8713              		.loc 1 1798 43 is_stmt 0 view .LVU2303
 8714 0066 01F12403 		add	r3, r1, #36
1798:src/xeq.c     **** 		break;
 8715              		.loc 1 1798 3 view .LVU2304
 8716 006a CDE90013 		strd	r1, r3, [sp]
 8717 006e 4046     		mov	r0, r8
 8718 0070 3146     		mov	r1, r6
 8719              	.LVL617:
1798:src/xeq.c     **** 		break;
 8720              		.loc 1 1798 3 view .LVU2305
 8721 0072 02F12403 		add	r3, r2, #36
 8722 0076 FFF7FEFF 		bl	cmplxAdd
 8723              	.LVL618:
1799:src/xeq.c     **** 	case 2:
 8724              		.loc 1 1799 3 is_stmt 1 view .LVU2306
1812:src/xeq.c     **** }
 8725              		.loc 1 1812 9 is_stmt 0 view .LVU2307
 8726 007a 0020     		movs	r0, #0
1813:src/xeq.c     **** 
 8727              		.loc 1 1813 1 view .LVU2308
 8728 007c 26B0     		add	sp, sp, #152
 8729              		.cfi_remember_state
 8730              		.cfi_def_cfa_offset 24
 8731              		@ sp needed
 8732 007e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8733              	.LVL619:
 8734              	.L662:
 8735              		.cfi_restore_state
1801:src/xeq.c     **** 		break;
 8736              		.loc 1 1801 3 is_stmt 1 view .LVU2309
1801:src/xeq.c     **** 		break;
 8737              		.loc 1 1801 48 is_stmt 0 view .LVU2310
 8738 0082 01F12403 		add	r3, r1, #36
1801:src/xeq.c     **** 		break;
 8739              		.loc 1 1801 3 view .LVU2311
ARM GAS  /tmp/ccqED0AM.s 			page 292


 8740 0086 CDE90013 		strd	r1, r3, [sp]
 8741 008a 4046     		mov	r0, r8
 8742 008c 3146     		mov	r1, r6
 8743              	.LVL620:
1801:src/xeq.c     **** 		break;
 8744              		.loc 1 1801 3 view .LVU2312
 8745 008e 02F12403 		add	r3, r2, #36
 8746 0092 FFF7FEFF 		bl	cmplxSubtract
 8747              	.LVL621:
1802:src/xeq.c     **** 	case 3:
 8748              		.loc 1 1802 3 is_stmt 1 view .LVU2313
1812:src/xeq.c     **** }
 8749              		.loc 1 1812 9 is_stmt 0 view .LVU2314
 8750 0096 0020     		movs	r0, #0
1813:src/xeq.c     **** 
 8751              		.loc 1 1813 1 view .LVU2315
 8752 0098 26B0     		add	sp, sp, #152
 8753              		.cfi_remember_state
 8754              		.cfi_def_cfa_offset 24
 8755              		@ sp needed
 8756 009a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8757              	.LVL622:
 8758              	.L661:
 8759              		.cfi_restore_state
1804:src/xeq.c     **** 		break;
 8760              		.loc 1 1804 3 is_stmt 1 view .LVU2316
1804:src/xeq.c     **** 		break;
 8761              		.loc 1 1804 48 is_stmt 0 view .LVU2317
 8762 009e 01F12403 		add	r3, r1, #36
1804:src/xeq.c     **** 		break;
 8763              		.loc 1 1804 3 view .LVU2318
 8764 00a2 CDE90013 		strd	r1, r3, [sp]
 8765 00a6 4046     		mov	r0, r8
 8766 00a8 3146     		mov	r1, r6
 8767              	.LVL623:
1804:src/xeq.c     **** 		break;
 8768              		.loc 1 1804 3 view .LVU2319
 8769 00aa 02F12403 		add	r3, r2, #36
 8770 00ae FFF7FEFF 		bl	cmplxMultiply
 8771              	.LVL624:
1805:src/xeq.c     **** 	case 4:
 8772              		.loc 1 1805 3 is_stmt 1 view .LVU2320
1812:src/xeq.c     **** }
 8773              		.loc 1 1812 9 is_stmt 0 view .LVU2321
 8774 00b2 0020     		movs	r0, #0
1813:src/xeq.c     **** 
 8775              		.loc 1 1813 1 view .LVU2322
 8776 00b4 26B0     		add	sp, sp, #152
 8777              		.cfi_def_cfa_offset 24
 8778              		@ sp needed
 8779 00b6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8780              	.LVL625:
 8781              	.L665:
1812:src/xeq.c     **** }
 8782              		.loc 1 1812 9 view .LVU2323
 8783 00ba 0120     		movs	r0, #1
 8784 00bc D0E7     		b	.L656
ARM GAS  /tmp/ccqED0AM.s 			page 293


 8785              		.cfi_endproc
 8786              	.LFE120:
 8788 00be 00BF     		.section	.text.cpx_enter,"ax",%progbits
 8789              		.align	1
 8790              		.p2align 2,,3
 8791              		.global	cpx_enter
 8792              		.syntax unified
 8793              		.thumb
 8794              		.thumb_func
 8795              		.fpu fpv4-sp-d16
 8797              	cpx_enter:
 8798              	.LVL626:
 8799              	.LFB74:
 921:src/xeq.c     ****   if( (State2.state_lift || (XromRunning || Running)) && ENTRY_RPN_ENABLED ) { // flag is zero if e
 8800              		.loc 1 921 31 is_stmt 1 view -0
 8801              		.cfi_startproc
 8802              		@ args = 0, pretend = 0, frame = 0
 8803              		@ frame_needed = 0, uses_anonymous_args = 0
 922:src/xeq.c     ****     //Only duplicate if needed, otherwise ignore. CPX LOCK mode cannot run code, but the same excep
 8804              		.loc 1 922 3 view .LVU2325
 930:src/xeq.c     ****     lift();
 8805              		.loc 1 930 5 view .LVU2326
 921:src/xeq.c     ****   if( (State2.state_lift || (XromRunning || Running)) && ENTRY_RPN_ENABLED ) { // flag is zero if e
 8806              		.loc 1 921 31 is_stmt 0 view .LVU2327
 8807 0000 70B5     		push	{r4, r5, r6, lr}
 8808              		.cfi_def_cfa_offset 16
 8809              		.cfi_offset 4, -16
 8810              		.cfi_offset 5, -12
 8811              		.cfi_offset 6, -8
 8812              		.cfi_offset 14, -4
 930:src/xeq.c     ****     lift();
 8813              		.loc 1 930 5 view .LVU2328
 8814 0002 FFF7FEFF 		bl	lift
 8815              	.LVL627:
 931:src/xeq.c     ****     copyreg(get_reg_n(regY_idx), get_reg_n(regT_idx));
 8816              		.loc 1 931 5 is_stmt 1 view .LVU2329
 8817 0006 FFF7FEFF 		bl	lift
 8818              	.LVL628:
 932:src/xeq.c     ****     set_was_complex();
 8819              		.loc 1 932 5 view .LVU2330
 8820 000a 6520     		movs	r0, #101
 8821 000c FFF7FEFF 		bl	get_reg_n
 8822              	.LVL629:
 922:src/xeq.c     ****     //Only duplicate if needed, otherwise ignore. CPX LOCK mode cannot run code, but the same excep
 8823              		.loc 1 922 55 is_stmt 0 view .LVU2331
 8824 0010 0D4D     		ldr	r5, .L681
 922:src/xeq.c     ****     //Only duplicate if needed, otherwise ignore. CPX LOCK mode cannot run code, but the same excep
 8825              		.loc 1 922 8 view .LVU2332
 8826 0012 0E4C     		ldr	r4, .L681+4
 932:src/xeq.c     ****     set_was_complex();
 8827              		.loc 1 932 5 view .LVU2333
 8828 0014 0646     		mov	r6, r0
 932:src/xeq.c     ****     set_was_complex();
 8829              		.loc 1 932 34 view .LVU2334
 8830 0016 6720     		movs	r0, #103
 8831 0018 FFF7FEFF 		bl	get_reg_n
 8832              	.LVL630:
ARM GAS  /tmp/ccqED0AM.s 			page 294


 8833              	.LBB2013:
 8834              	.LBB2014:
 8835              	.LBB2015:
 8836              	.LBB2016:
1119:src/xeq.c     **** }
 8837              		.loc 1 1119 24 view .LVU2335
 8838 001c 2B68     		ldr	r3, [r5]
 8839 001e B3F8E827 		ldrh	r2, [r3, #2024]
 8840 0022 44F20103 		movw	r3, #16385
 8841              	.LBE2016:
 8842              	.LBE2015:
 727:src/xeq.c     **** }
 8843              		.loc 1 727 2 view .LVU2336
 8844 0026 1340     		ands	r3, r3, r2
 8845 0028 B3F5804F 		cmp	r3, #16384
 8846              	.LBE2014:
 8847              	.LBE2013:
 932:src/xeq.c     ****     set_was_complex();
 8848              		.loc 1 932 34 view .LVU2337
 8849 002c 0146     		mov	r1, r0
 8850              	.LVL631:
 8851              	.LBB2020:
 8852              	.LBI2013:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 8853              		.loc 1 726 6 is_stmt 1 view .LVU2338
 8854              	.LBB2019:
 727:src/xeq.c     **** }
 8855              		.loc 1 727 2 view .LVU2339
 8856              	.LBB2018:
 8857              	.LBI2015:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 8858              		.loc 1 1118 5 view .LVU2340
 8859              	.LBB2017:
1119:src/xeq.c     **** }
 8860              		.loc 1 1119 2 view .LVU2341
 8861              	.LBE2017:
 8862              	.LBE2018:
 727:src/xeq.c     **** }
 8863              		.loc 1 727 2 is_stmt 0 view .LVU2342
 8864 002e 0CBF     		ite	eq
 8865 0030 1022     		moveq	r2, #16
 8866 0032 0822     		movne	r2, #8
 8867 0034 3046     		mov	r0, r6
 8868              	.LVL632:
 727:src/xeq.c     **** }
 8869              		.loc 1 727 2 view .LVU2343
 8870 0036 FFF7FEFF 		bl	xcopy
 8871              	.LVL633:
 727:src/xeq.c     **** }
 8872              		.loc 1 727 2 view .LVU2344
 8873              	.LBE2019:
 8874              	.LBE2020:
 933:src/xeq.c     ****   }
 8875              		.loc 1 933 5 is_stmt 1 view .LVU2345
 8876              	.LBB2021:
 8877              	.LBI2021:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
ARM GAS  /tmp/ccqED0AM.s 			page 295


 8878              		.loc 1 539 13 view .LVU2346
 8879              	.LBB2022:
 540:src/xeq.c     **** }
 8880              		.loc 1 540 2 view .LVU2347
 540:src/xeq.c     **** }
 8881              		.loc 1 540 20 is_stmt 0 view .LVU2348
 8882 003a 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 8883 003c 0122     		movs	r2, #1
 8884 003e 62F38713 		bfi	r3, r2, #6, #2
 8885 0042 2375     		strb	r3, [r4, #20]
 8886              	.LBE2022:
 8887              	.LBE2021:
 935:src/xeq.c     **** 
 8888              		.loc 1 935 1 view .LVU2349
 8889 0044 70BD     		pop	{r4, r5, r6, pc}
 8890              	.L682:
 8891 0046 00BF     		.align	2
 8892              	.L681:
 8893 0048 00000000 		.word	main_ram
 8894 004c 00000000 		.word	StateWhileOn
 8895              		.cfi_endproc
 8896              	.LFE74:
 8898              		.section	.text.cpx_fill,"ax",%progbits
 8899              		.align	1
 8900              		.p2align 2,,3
 8901              		.global	cpx_fill
 8902              		.syntax unified
 8903              		.thumb
 8904              		.thumb_func
 8905              		.fpu fpv4-sp-d16
 8907              	cpx_fill:
 8908              	.LVL634:
 8909              	.LFB79:
1086:src/xeq.c     **** 	const int n = stack_size();
 8910              		.loc 1 1086 30 is_stmt 1 view -0
 8911              		.cfi_startproc
 8912              		@ args = 0, pretend = 0, frame = 0
 8913              		@ frame_needed = 0, uses_anonymous_args = 0
1087:src/xeq.c     **** 	const REGISTER *y = get_reg_n(regY_idx);
 8914              		.loc 1 1087 2 view .LVU2351
 8915              	.LBB2023:
 8916              	.LBI2023:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 8917              		.loc 1 712 5 view .LVU2352
 8918              	.LBB2024:
 713:src/xeq.c     **** 		return 4;
 8919              		.loc 1 713 2 view .LVU2353
 8920              	.LBE2024:
 8921              	.LBE2023:
1086:src/xeq.c     **** 	const int n = stack_size();
 8922              		.loc 1 1086 30 is_stmt 0 view .LVU2354
 8923 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 8924              		.cfi_def_cfa_offset 32
 8925              		.cfi_offset 3, -32
 8926              		.cfi_offset 4, -28
 8927              		.cfi_offset 5, -24
 8928              		.cfi_offset 6, -20
ARM GAS  /tmp/ccqED0AM.s 			page 296


 8929              		.cfi_offset 7, -16
 8930              		.cfi_offset 8, -12
 8931              		.cfi_offset 9, -8
 8932              		.cfi_offset 14, -4
 8933              	.LBB2029:
 8934              	.LBB2027:
 713:src/xeq.c     **** 		return 4;
 8935              		.loc 1 713 8 view .LVU2355
 8936 0004 1F4D     		ldr	r5, .L696
 8937 0006 2B68     		ldr	r3, [r5]
 713:src/xeq.c     **** 		return 4;
 8938              		.loc 1 713 6 view .LVU2356
 8939 0008 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 8940              		.loc 1 713 5 view .LVU2357
 8941 000c 1207     		lsls	r2, r2, #28
 8942 000e 37D5     		bpl	.L688
 8943              	.LBB2025:
 8944              	.LBI2025:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 8945              		.loc 1 185 5 is_stmt 1 view .LVU2358
 8946              	.LBB2026:
 186:src/xeq.c     **** }
 8947              		.loc 1 186 2 view .LVU2359
 186:src/xeq.c     **** }
 8948              		.loc 1 186 9 is_stmt 0 view .LVU2360
 8949 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 8950              	.LBE2026:
 8951              	.LBE2025:
 713:src/xeq.c     **** 		return 4;
 8952              		.loc 1 713 27 view .LVU2361
 8953 0014 9B0B     		lsrs	r3, r3, #14
 8954 0016 032B     		cmp	r3, #3
 8955 0018 2AD0     		beq	.L695
 715:src/xeq.c     **** }
 8956              		.loc 1 715 9 view .LVU2362
 8957 001a 0827     		movs	r7, #8
 8958              	.L684:
 8959              	.LVL635:
 715:src/xeq.c     **** }
 8960              		.loc 1 715 9 view .LVU2363
 8961              	.LBE2027:
 8962              	.LBE2029:
1088:src/xeq.c     **** 	int i;
 8963              		.loc 1 1088 2 is_stmt 1 view .LVU2364
1088:src/xeq.c     **** 	int i;
 8964              		.loc 1 1088 22 is_stmt 0 view .LVU2365
 8965 001c 6520     		movs	r0, #101
 8966              	.LVL636:
1088:src/xeq.c     **** 	int i;
 8967              		.loc 1 1088 22 view .LVU2366
 8968 001e FFF7FEFF 		bl	get_reg_n
 8969              	.LVL637:
1092:src/xeq.c     **** 	set_was_complex();
 8970              		.loc 1 1092 3 view .LVU2367
 8971 0022 DFF86C90 		ldr	r9, .L696+12
1088:src/xeq.c     **** 	int i;
ARM GAS  /tmp/ccqED0AM.s 			page 297


 8972              		.loc 1 1088 22 view .LVU2368
 8973 0026 8046     		mov	r8, r0
 8974              	.LVL638:
1089:src/xeq.c     **** 
 8975              		.loc 1 1089 2 is_stmt 1 view .LVU2369
1091:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8976              		.loc 1 1091 2 view .LVU2370
1091:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8977              		.loc 1 1091 12 view .LVU2371
1091:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8978              		.loc 1 1091 8 is_stmt 0 view .LVU2372
 8979 0028 0224     		movs	r4, #2
 8980              	.LBB2030:
 8981              	.LBB2031:
 8982              	.LBB2032:
 8983              	.LBB2033:
1119:src/xeq.c     **** }
 8984              		.loc 1 1119 24 view .LVU2373
 8985 002a 44F20106 		movw	r6, #16385
 8986              	.LVL639:
 8987              	.L687:
1119:src/xeq.c     **** }
 8988              		.loc 1 1119 24 view .LVU2374
 8989              	.LBE2033:
 8990              	.LBE2032:
 8991              	.LBE2031:
 8992              	.LBE2030:
1092:src/xeq.c     **** 	set_was_complex();
 8993              		.loc 1 1092 3 is_stmt 1 view .LVU2375
 8994              	.LBB2044:
 8995              	.LBI2044:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 8996              		.loc 1 718 11 view .LVU2376
 8997              	.LBB2045:
 719:src/xeq.c     **** }
 8998              		.loc 1 719 2 view .LVU2377
 719:src/xeq.c     **** }
 8999              		.loc 1 719 9 is_stmt 0 view .LVU2378
 9000 002e 04F16400 		add	r0, r4, #100
 9001 0032 FFF7FEFF 		bl	get_reg_n
 9002              	.LVL640:
 719:src/xeq.c     **** }
 9003              		.loc 1 719 9 view .LVU2379
 9004              	.LBE2045:
 9005              	.LBE2044:
1092:src/xeq.c     **** 	set_was_complex();
 9006              		.loc 1 1092 3 view .LVU2380
 9007 0036 E307     		lsls	r3, r4, #31
 9008              	.LBB2046:
 9009              	.LBB2040:
 9010              	.LBB2037:
 9011              	.LBB2034:
1119:src/xeq.c     **** }
 9012              		.loc 1 1119 24 view .LVU2381
 9013 0038 2B68     		ldr	r3, [r5]
 9014              	.LBE2034:
 9015              	.LBE2037:
ARM GAS  /tmp/ccqED0AM.s 			page 298


 9016              	.LBE2040:
 9017              	.LBE2046:
1092:src/xeq.c     **** 	set_was_complex();
 9018              		.loc 1 1092 3 view .LVU2382
 9019 003a 58BF     		it	pl
 9020 003c D9F80010 		ldrpl	r1, [r9]
 9021              	.LBB2047:
 9022              	.LBB2041:
 9023              	.LBB2038:
 9024              	.LBB2035:
1119:src/xeq.c     **** }
 9025              		.loc 1 1119 24 view .LVU2383
 9026 0040 B3F8E837 		ldrh	r3, [r3, #2024]
 9027              	.LBE2035:
 9028              	.LBE2038:
 727:src/xeq.c     **** }
 9029              		.loc 1 727 2 view .LVU2384
 9030 0044 03EA0603 		and	r3, r3, r6
 9031              	.LBE2041:
 9032              	.LBE2047:
1092:src/xeq.c     **** 	set_was_complex();
 9033              		.loc 1 1092 3 view .LVU2385
 9034 0048 48BF     		it	mi
 9035 004a 4146     		movmi	r1, r8
 9036              	.LVL641:
 9037              	.LBB2048:
 9038              	.LBI2030:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 9039              		.loc 1 726 6 is_stmt 1 view .LVU2386
 9040              	.LBB2042:
 727:src/xeq.c     **** }
 9041              		.loc 1 727 2 view .LVU2387
 9042              	.LBB2039:
 9043              	.LBI2032:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 9044              		.loc 1 1118 5 view .LVU2388
 9045              	.LBB2036:
1119:src/xeq.c     **** }
 9046              		.loc 1 1119 2 view .LVU2389
 9047              	.LBE2036:
 9048              	.LBE2039:
 727:src/xeq.c     **** }
 9049              		.loc 1 727 2 is_stmt 0 view .LVU2390
 9050 004c B3F5804F 		cmp	r3, #16384
 9051 0050 0CBF     		ite	eq
 9052 0052 1022     		moveq	r2, #16
 9053 0054 0822     		movne	r2, #8
 9054              	.LBE2042:
 9055              	.LBE2048:
1091:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 9056              		.loc 1 1091 18 view .LVU2391
 9057 0056 0134     		adds	r4, r4, #1
 9058              	.LVL642:
 9059              	.LBB2049:
 9060              	.LBB2043:
 727:src/xeq.c     **** }
 9061              		.loc 1 727 2 view .LVU2392
ARM GAS  /tmp/ccqED0AM.s 			page 299


 9062 0058 FFF7FEFF 		bl	xcopy
 9063              	.LVL643:
 727:src/xeq.c     **** }
 9064              		.loc 1 727 2 view .LVU2393
 9065              	.LBE2043:
 9066              	.LBE2049:
1091:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 9067              		.loc 1 1091 17 is_stmt 1 view .LVU2394
1091:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 9068              		.loc 1 1091 12 view .LVU2395
1091:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 9069              		.loc 1 1091 2 is_stmt 0 view .LVU2396
 9070 005c BC42     		cmp	r4, r7
 9071 005e E6D1     		bne	.L687
1093:src/xeq.c     **** }
 9072              		.loc 1 1093 2 is_stmt 1 view .LVU2397
 9073              	.LBB2050:
 9074              	.LBI2050:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 9075              		.loc 1 539 13 view .LVU2398
 9076              	.LBB2051:
 540:src/xeq.c     **** }
 9077              		.loc 1 540 2 view .LVU2399
 540:src/xeq.c     **** }
 9078              		.loc 1 540 20 is_stmt 0 view .LVU2400
 9079 0060 094B     		ldr	r3, .L696+4
 9080 0062 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 9081 0064 0121     		movs	r1, #1
 9082 0066 61F38712 		bfi	r2, r1, #6, #2
 9083 006a 1A75     		strb	r2, [r3, #20]
 9084              	.LBE2051:
 9085              	.LBE2050:
1094:src/xeq.c     **** 
 9086              		.loc 1 1094 1 view .LVU2401
 9087 006c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 9088              	.LVL644:
 9089              	.L695:
 9090              	.LBB2052:
 9091              	.LBB2028:
 713:src/xeq.c     **** 		return 4;
 9092              		.loc 1 713 44 view .LVU2402
 9093 0070 064B     		ldr	r3, .L696+8
 713:src/xeq.c     **** 		return 4;
 9094              		.loc 1 713 41 view .LVU2403
 9095 0072 93F90130 		ldrsb	r3, [r3, #1]
 714:src/xeq.c     **** 	return 8;
 9096              		.loc 1 714 10 view .LVU2404
 9097 0076 002B     		cmp	r3, #0
 9098 0078 B4BF     		ite	lt
 9099 007a 0827     		movlt	r7, #8
 9100 007c 0427     		movge	r7, #4
 9101 007e CDE7     		b	.L684
 9102              	.L688:
 9103 0080 0427     		movs	r7, #4
 9104 0082 CBE7     		b	.L684
 9105              	.L697:
 9106              		.align	2
ARM GAS  /tmp/ccqED0AM.s 			page 300


 9107              	.L696:
 9108 0084 00000000 		.word	main_ram
 9109 0088 00000000 		.word	StateWhileOn
 9110 008c 00000000 		.word	XromParams
 9111 0090 00000000 		.word	StackBase
 9112              	.LBE2028:
 9113              	.LBE2052:
 9114              		.cfi_endproc
 9115              	.LFE79:
 9117              		.section	.text.setRegister,"ax",%progbits
 9118              		.align	1
 9119              		.p2align 2,,3
 9120              		.global	setRegister
 9121              		.syntax unified
 9122              		.thumb
 9123              		.thumb_func
 9124              		.fpu fpv4-sp-d16
 9126              	setRegister:
 9127              	.LVL645:
 9128              	.LFB58:
 811:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 9129              		.loc 1 811 49 is_stmt 1 view -0
 9130              		.cfi_startproc
 9131              		@ args = 0, pretend = 0, frame = 40
 9132              		@ frame_needed = 0, uses_anonymous_args = 0
 812:src/xeq.c     **** 	decNumber dn;
 9133              		.loc 1 812 2 view .LVU2406
 811:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 9134              		.loc 1 811 49 is_stmt 0 view .LVU2407
 9135 0000 30B5     		push	{r4, r5, lr}
 9136              		.cfi_def_cfa_offset 12
 9137              		.cfi_offset 4, -12
 9138              		.cfi_offset 5, -8
 9139              		.cfi_offset 14, -4
 9140 0002 8BB0     		sub	sp, sp, #44
 9141              		.cfi_def_cfa_offset 56
 811:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 9142              		.loc 1 811 49 view .LVU2408
 9143 0004 0C46     		mov	r4, r1
 812:src/xeq.c     **** 	decNumber dn;
 9144              		.loc 1 812 24 view .LVU2409
 9145 0006 FFF7FEFF 		bl	get_reg_n
 9146              	.LVL646:
 812:src/xeq.c     **** 	decNumber dn;
 9147              		.loc 1 812 24 view .LVU2410
 9148 000a 0546     		mov	r5, r0
 815:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 9149              		.loc 1 815 8 view .LVU2411
 9150 000c 2046     		mov	r0, r4
 9151              	.LVL647:
 813:src/xeq.c     **** 
 9152              		.loc 1 813 2 is_stmt 1 view .LVU2412
 815:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 9153              		.loc 1 815 2 view .LVU2413
 815:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 9154              		.loc 1 815 8 is_stmt 0 view .LVU2414
 9155 000e FFF7FEFF 		bl	check_special
ARM GAS  /tmp/ccqED0AM.s 			page 301


 9156              	.LVL648:
 815:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 9157              		.loc 1 815 5 view .LVU2415
 9158 0012 08B1     		cbz	r0, .L702
 822:src/xeq.c     **** 
 9159              		.loc 1 822 1 view .LVU2416
 9160 0014 0BB0     		add	sp, sp, #44
 9161              		.cfi_remember_state
 9162              		.cfi_def_cfa_offset 12
 9163              		@ sp needed
 9164 0016 30BD     		pop	{r4, r5, pc}
 9165              	.LVL649:
 9166              	.L702:
 9167              		.cfi_restore_state
 816:src/xeq.c     **** 		if (is_dblmode())
 9168              		.loc 1 816 3 is_stmt 1 view .LVU2417
 9169 0018 0C4A     		ldr	r2, .L704
 9170 001a 2146     		mov	r1, r4
 9171 001c 01A8     		add	r0, sp, #4
 9172 001e FFF7FEFF 		bl	decNumberNormalize
 9173              	.LVL650:
 817:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 9174              		.loc 1 817 3 view .LVU2418
 9175              	.LBB2053:
 9176              	.LBI2053:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 9177              		.loc 1 1118 5 view .LVU2419
 9178              	.LBB2054:
1119:src/xeq.c     **** }
 9179              		.loc 1 1119 2 view .LVU2420
1119:src/xeq.c     **** }
 9180              		.loc 1 1119 24 is_stmt 0 view .LVU2421
 9181 0022 0B4B     		ldr	r3, .L704+4
 9182 0024 1B68     		ldr	r3, [r3]
 9183 0026 B3F8E827 		ldrh	r2, [r3, #2024]
 9184 002a 44F20103 		movw	r3, #16385
 9185              	.LBE2054:
 9186              	.LBE2053:
 817:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 9187              		.loc 1 817 6 view .LVU2422
 9188 002e 1340     		ands	r3, r3, r2
 9189 0030 B3F5804F 		cmp	r3, #16384
 818:src/xeq.c     **** 		else
 9190              		.loc 1 818 4 view .LVU2423
 9191 0034 01A9     		add	r1, sp, #4
 9192 0036 2846     		mov	r0, r5
 817:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 9193              		.loc 1 817 6 view .LVU2424
 9194 0038 03D0     		beq	.L703
 9195              	.LVL651:
 820:src/xeq.c     **** 	}
 9196              		.loc 1 820 4 is_stmt 1 view .LVU2425
 9197 003a FFF7FEFF 		bl	packed_from_number
 9198              	.LVL652:
 822:src/xeq.c     **** 
 9199              		.loc 1 822 1 is_stmt 0 view .LVU2426
 9200 003e 0BB0     		add	sp, sp, #44
ARM GAS  /tmp/ccqED0AM.s 			page 302


 9201              		.cfi_remember_state
 9202              		.cfi_def_cfa_offset 12
 9203              		@ sp needed
 9204 0040 30BD     		pop	{r4, r5, pc}
 9205              	.LVL653:
 9206              	.L703:
 9207              		.cfi_restore_state
 818:src/xeq.c     **** 		else
 9208              		.loc 1 818 4 is_stmt 1 view .LVU2427
 9209 0042 FFF7FEFF 		bl	packed128_from_number
 9210              	.LVL654:
 822:src/xeq.c     **** 
 9211              		.loc 1 822 1 is_stmt 0 view .LVU2428
 9212 0046 0BB0     		add	sp, sp, #44
 9213              		.cfi_def_cfa_offset 12
 9214              		@ sp needed
 9215 0048 30BD     		pop	{r4, r5, pc}
 9216              	.LVL655:
 9217              	.L705:
 822:src/xeq.c     **** 
 9218              		.loc 1 822 1 view .LVU2429
 9219 004a 00BF     		.align	2
 9220              	.L704:
 9221 004c 00000000 		.word	Ctx
 9222 0050 00000000 		.word	main_ram
 9223              		.cfi_endproc
 9224              	.LFE58:
 9226              		.section	.text.setX,"ax",%progbits
 9227              		.align	1
 9228              		.p2align 2,,3
 9229              		.global	setX
 9230              		.syntax unified
 9231              		.thumb
 9232              		.thumb_func
 9233              		.fpu fpv4-sp-d16
 9235              	setX:
 9236              	.LVL656:
 9237              	.LFB60:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 9238              		.loc 1 828 31 is_stmt 1 view -0
 9239              		.cfi_startproc
 9240              		@ args = 0, pretend = 0, frame = 0
 9241              		@ frame_needed = 0, uses_anonymous_args = 0
 9242              		@ link register save eliminated.
 829:src/xeq.c     **** }
 9243              		.loc 1 829 2 view .LVU2431
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 9244              		.loc 1 828 31 is_stmt 0 view .LVU2432
 9245 0000 0146     		mov	r1, r0
 829:src/xeq.c     **** }
 9246              		.loc 1 829 2 view .LVU2433
 9247 0002 6420     		movs	r0, #100
 9248              	.LVL657:
 829:src/xeq.c     **** }
 9249              		.loc 1 829 2 view .LVU2434
 9250 0004 FFF7FEBF 		b	setRegister
 9251              	.LVL658:
ARM GAS  /tmp/ccqED0AM.s 			page 303


 829:src/xeq.c     **** }
 9252              		.loc 1 829 2 view .LVU2435
 9253              		.cfi_endproc
 9254              	.LFE60:
 9256              		.section	.text.rarg_round,"ax",%progbits
 9257              		.align	1
 9258              		.p2align 2,,3
 9259              		.global	rarg_round
 9260              		.syntax unified
 9261              		.thumb
 9262              		.thumb_func
 9263              		.fpu fpv4-sp-d16
 9265              	rarg_round:
 9266              	.LVL659:
 9267              	.LFB40:
 662:src/xeq.c     **** 	decNumber res, x;
 9268              		.loc 1 662 49 is_stmt 1 view -0
 9269              		.cfi_startproc
 9270              		@ args = 0, pretend = 0, frame = 80
 9271              		@ frame_needed = 0, uses_anonymous_args = 0
 663:src/xeq.c     **** 	const enum rounding rm = get_rounding_mode();
 9272              		.loc 1 663 2 view .LVU2437
 664:src/xeq.c     **** 
 9273              		.loc 1 664 2 view .LVU2438
 9274              	.LBB2067:
 9275              	.LBI2067:
 610:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 9276              		.loc 1 610 22 view .LVU2439
 9277              	.LBB2068:
 611:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 9278              		.loc 1 611 2 view .LVU2440
 616:src/xeq.c     **** }
 9279              		.loc 1 616 2 view .LVU2441
 616:src/xeq.c     **** }
 9280              		.loc 1 616 31 is_stmt 0 view .LVU2442
 9281 0000 184B     		ldr	r3, .L715
 9282              	.LBE2068:
 9283              	.LBE2067:
 662:src/xeq.c     **** 	decNumber res, x;
 9284              		.loc 1 662 49 view .LVU2443
 9285 0002 70B5     		push	{r4, r5, r6, lr}
 9286              		.cfi_def_cfa_offset 16
 9287              		.cfi_offset 4, -16
 9288              		.cfi_offset 5, -12
 9289              		.cfi_offset 6, -8
 9290              		.cfi_offset 14, -4
 9291              	.LBB2071:
 9292              	.LBB2069:
 616:src/xeq.c     **** }
 9293              		.loc 1 616 31 view .LVU2444
 9294 0004 1B68     		ldr	r3, [r3]
 9295              	.LVL660:
 616:src/xeq.c     **** }
 9296              		.loc 1 616 31 view .LVU2445
 9297              	.LBE2069:
 9298              	.LBE2071:
 666:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
ARM GAS  /tmp/ccqED0AM.s 			page 304


 9299              		.loc 1 666 2 is_stmt 1 view .LVU2446
 666:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9300              		.loc 1 666 6 is_stmt 0 view .LVU2447
 9301 0006 93F8E857 		ldrb	r5, [r3, #2024]	@ zero_extendqisi2
 666:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9302              		.loc 1 666 5 view .LVU2448
 9303 000a EA07     		lsls	r2, r5, #31
 662:src/xeq.c     **** 	decNumber res, x;
 9304              		.loc 1 662 49 view .LVU2449
 9305 000c 94B0     		sub	sp, sp, #80
 9306              		.cfi_def_cfa_offset 96
 666:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9307              		.loc 1 666 5 view .LVU2450
 9308 000e 06D5     		bpl	.L708
 667:src/xeq.c     **** 		return;
 9309              		.loc 1 667 3 is_stmt 1 view .LVU2451
 9310              	.LVL661:
 9311              	.LBB2072:
 9312              	.LBI2072:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 9313              		.loc 1 546 5 view .LVU2452
 9314              	.LBB2073:
 547:src/xeq.c     **** 		Error = e;
 9315              		.loc 1 547 2 view .LVU2453
 547:src/xeq.c     **** 		Error = e;
 9316              		.loc 1 547 12 is_stmt 0 view .LVU2454
 9317 0010 154B     		ldr	r3, .L715+4
 9318              	.LVL662:
 547:src/xeq.c     **** 		Error = e;
 9319              		.loc 1 547 5 view .LVU2455
 9320 0012 1A68     		ldr	r2, [r3]
 9321 0014 0AB9     		cbnz	r2, .L707
 9322              	.LVL663:
 9323              	.LBB2074:
 9324              	.LBI2074:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 9325              		.loc 1 546 5 is_stmt 1 view .LVU2456
 9326              	.LBB2075:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 9327              		.loc 1 548 3 view .LVU2457
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 9328              		.loc 1 548 9 is_stmt 0 view .LVU2458
 9329 0016 0D22     		movs	r2, #13
 9330 0018 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 9331              		.loc 1 549 3 is_stmt 1 view .LVU2459
 9332              	.LVL664:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 9333              		.loc 1 549 3 is_stmt 0 view .LVU2460
 9334              	.LBE2075:
 9335              	.LBE2074:
 9336              	.LBE2073:
 9337              	.LBE2072:
 668:src/xeq.c     **** 	}
 9338              		.loc 1 668 3 is_stmt 1 view .LVU2461
 9339              	.L707:
 678:src/xeq.c     **** 
ARM GAS  /tmp/ccqED0AM.s 			page 305


 9340              		.loc 1 678 1 is_stmt 0 view .LVU2462
 9341 001a 14B0     		add	sp, sp, #80
 9342              		.cfi_remember_state
 9343              		.cfi_def_cfa_offset 16
 9344              		@ sp needed
 9345 001c 70BD     		pop	{r4, r5, r6, pc}
 9346              	.LVL665:
 9347              	.L708:
 9348              		.cfi_restore_state
 9349              	.LBB2076:
 9350              	.LBB2070:
 616:src/xeq.c     **** }
 9351              		.loc 1 616 37 view .LVU2463
 9352 001e 93F8EB37 		ldrb	r3, [r3, #2027]	@ zero_extendqisi2
 9353              	.LVL666:
 616:src/xeq.c     **** }
 9354              		.loc 1 616 9 view .LVU2464
 9355 0022 124A     		ldr	r2, .L715+8
 616:src/xeq.c     **** }
 9356              		.loc 1 616 37 view .LVU2465
 9357 0024 C3F30213 		ubfx	r3, r3, #4, #3
 9358 0028 0C46     		mov	r4, r1
 616:src/xeq.c     **** }
 9359              		.loc 1 616 9 view .LVU2466
 9360 002a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9361 002c 0193     		str	r3, [sp, #4]
 9362              	.LBE2070:
 9363              	.LBE2076:
 671:src/xeq.c     **** 	getX(&x);
 9364              		.loc 1 671 2 is_stmt 1 view .LVU2467
 9365              	.LBB2077:
 9366              	.LBI2077:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 9367              		.loc 1 792 6 view .LVU2468
 9368              	.LBB2078:
 793:src/xeq.c     **** }
 9369              		.loc 1 793 2 view .LVU2469
 9370 002e 0646     		mov	r6, r0
 9371 0030 6421     		movs	r1, #100
 9372              	.LVL667:
 793:src/xeq.c     **** }
 9373              		.loc 1 793 2 is_stmt 0 view .LVU2470
 9374 0032 6C20     		movs	r0, #108
 9375              	.LVL668:
 793:src/xeq.c     **** }
 9376              		.loc 1 793 2 view .LVU2471
 9377 0034 FFF7FEFF 		bl	copyreg_n
 9378              	.LVL669:
 793:src/xeq.c     **** }
 9379              		.loc 1 793 2 view .LVU2472
 9380              	.LBE2078:
 9381              	.LBE2077:
 672:src/xeq.c     **** 	if (op == RARG_ROUND)
 9382              		.loc 1 672 2 is_stmt 1 view .LVU2473
 9383              	.LBB2079:
 9384              	.LBI2079:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
ARM GAS  /tmp/ccqED0AM.s 			page 306


 9385              		.loc 1 824 12 view .LVU2474
 9386              	.LBB2080:
 825:src/xeq.c     **** }
 9387              		.loc 1 825 2 view .LVU2475
 825:src/xeq.c     **** }
 9388              		.loc 1 825 9 is_stmt 0 view .LVU2476
 9389 0038 6421     		movs	r1, #100
 9390 003a 0BA8     		add	r0, sp, #44
 9391              	.LVL670:
 825:src/xeq.c     **** }
 9392              		.loc 1 825 9 view .LVU2477
 9393 003c FFF7FEFF 		bl	getRegister
 9394              	.LVL671:
 825:src/xeq.c     **** }
 9395              		.loc 1 825 9 view .LVU2478
 9396              	.LBE2080:
 9397              	.LBE2079:
 673:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9398              		.loc 1 673 2 is_stmt 1 view .LVU2479
 673:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9399              		.loc 1 673 5 is_stmt 0 view .LVU2480
 9400 0040 752C     		cmp	r4, #117
 674:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9401              		.loc 1 674 3 view .LVU2481
 9402 0042 02AC     		add	r4, sp, #8
 673:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9403              		.loc 1 673 5 view .LVU2482
 9404 0044 019B     		ldr	r3, [sp, #4]
 674:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9405              		.loc 1 674 3 view .LVU2483
 9406 0046 3246     		mov	r2, r6
 9407 0048 0BA9     		add	r1, sp, #44
 9408 004a 2046     		mov	r0, r4
 673:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9409              		.loc 1 673 5 view .LVU2484
 9410 004c 07D0     		beq	.L714
 9411              	.LVL672:
 676:src/xeq.c     **** 	setX(&res);
 9412              		.loc 1 676 3 is_stmt 1 view .LVU2485
 9413 004e FFF7FEFF 		bl	decNumberRoundDecimals
 9414              	.LVL673:
 9415              	.L712:
 677:src/xeq.c     **** }
 9416              		.loc 1 677 2 view .LVU2486
 9417              	.LBB2081:
 9418              	.LBI2081:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 9419              		.loc 1 828 6 view .LVU2487
 9420              	.LBB2082:
 829:src/xeq.c     **** }
 9421              		.loc 1 829 2 view .LVU2488
 9422 0052 2146     		mov	r1, r4
 9423 0054 6420     		movs	r0, #100
 9424 0056 FFF7FEFF 		bl	setRegister
 9425              	.LVL674:
 829:src/xeq.c     **** }
 9426              		.loc 1 829 2 is_stmt 0 view .LVU2489
ARM GAS  /tmp/ccqED0AM.s 			page 307


 9427              	.LBE2082:
 9428              	.LBE2081:
 678:src/xeq.c     **** 
 9429              		.loc 1 678 1 view .LVU2490
 9430 005a 14B0     		add	sp, sp, #80
 9431              		.cfi_remember_state
 9432              		.cfi_def_cfa_offset 16
 9433              		@ sp needed
 9434 005c 70BD     		pop	{r4, r5, r6, pc}
 9435              	.LVL675:
 9436              	.L714:
 9437              		.cfi_restore_state
 674:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9438              		.loc 1 674 3 is_stmt 1 view .LVU2491
 9439 005e FFF7FEFF 		bl	decNumberRoundDigits
 9440              	.LVL676:
 674:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9441              		.loc 1 674 3 is_stmt 0 view .LVU2492
 9442 0062 F6E7     		b	.L712
 9443              	.L716:
 9444              		.align	2
 9445              	.L715:
 9446 0064 00000000 		.word	main_ram
 9447 0068 00000000 		.word	Error
 9448 006c 00000000 		.word	.LANCHOR1
 9449              		.cfi_endproc
 9450              	.LFE40:
 9452              		.section	.text.setY,"ax",%progbits
 9453              		.align	1
 9454              		.p2align 2,,3
 9455              		.global	setY
 9456              		.syntax unified
 9457              		.thumb
 9458              		.thumb_func
 9459              		.fpu fpv4-sp-d16
 9461              	setY:
 9462              	.LVL677:
 9463              	.LFB62:
 836:src/xeq.c     **** 	setRegister(regY_idx, y);
 9464              		.loc 1 836 31 is_stmt 1 view -0
 9465              		.cfi_startproc
 9466              		@ args = 0, pretend = 0, frame = 0
 9467              		@ frame_needed = 0, uses_anonymous_args = 0
 9468              		@ link register save eliminated.
 837:src/xeq.c     **** }
 9469              		.loc 1 837 2 view .LVU2494
 836:src/xeq.c     **** 	setRegister(regY_idx, y);
 9470              		.loc 1 836 31 is_stmt 0 view .LVU2495
 9471 0000 0146     		mov	r1, r0
 837:src/xeq.c     **** }
 9472              		.loc 1 837 2 view .LVU2496
 9473 0002 6520     		movs	r0, #101
 9474              	.LVL678:
 837:src/xeq.c     **** }
 9475              		.loc 1 837 2 view .LVU2497
 9476 0004 FFF7FEBF 		b	setRegister
 9477              	.LVL679:
ARM GAS  /tmp/ccqED0AM.s 			page 308


 837:src/xeq.c     **** }
 9478              		.loc 1 837 2 view .LVU2498
 9479              		.cfi_endproc
 9480              	.LFE62:
 9482              		.section	.text.setXY,"ax",%progbits
 9483              		.align	1
 9484              		.p2align 2,,3
 9485              		.global	setXY
 9486              		.syntax unified
 9487              		.thumb
 9488              		.thumb_func
 9489              		.fpu fpv4-sp-d16
 9491              	setXY:
 9492              	.LVL680:
 9493              	.LFB66:
 859:src/xeq.c     **** 	setX(x);
 9494              		.loc 1 859 52 is_stmt 1 view -0
 9495              		.cfi_startproc
 9496              		@ args = 0, pretend = 0, frame = 0
 9497              		@ frame_needed = 0, uses_anonymous_args = 0
 860:src/xeq.c     **** 	setY(y);
 9498              		.loc 1 860 2 view .LVU2500
 9499              	.LBB2083:
 9500              	.LBI2083:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 9501              		.loc 1 828 6 view .LVU2501
 9502              	.LBB2084:
 829:src/xeq.c     **** }
 9503              		.loc 1 829 2 view .LVU2502
 9504              	.LBE2084:
 9505              	.LBE2083:
 859:src/xeq.c     **** 	setX(x);
 9506              		.loc 1 859 52 is_stmt 0 view .LVU2503
 9507 0000 10B5     		push	{r4, lr}
 9508              		.cfi_def_cfa_offset 8
 9509              		.cfi_offset 4, -8
 9510              		.cfi_offset 14, -4
 859:src/xeq.c     **** 	setX(x);
 9511              		.loc 1 859 52 view .LVU2504
 9512 0002 0C46     		mov	r4, r1
 9513              	.LBB2086:
 9514              	.LBB2085:
 829:src/xeq.c     **** }
 9515              		.loc 1 829 2 view .LVU2505
 9516 0004 0146     		mov	r1, r0
 9517              	.LVL681:
 829:src/xeq.c     **** }
 9518              		.loc 1 829 2 view .LVU2506
 9519 0006 6420     		movs	r0, #100
 9520              	.LVL682:
 829:src/xeq.c     **** }
 9521              		.loc 1 829 2 view .LVU2507
 9522 0008 FFF7FEFF 		bl	setRegister
 9523              	.LVL683:
 829:src/xeq.c     **** }
 9524              		.loc 1 829 2 view .LVU2508
 9525              	.LBE2085:
ARM GAS  /tmp/ccqED0AM.s 			page 309


 9526              	.LBE2086:
 861:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 9527              		.loc 1 861 2 is_stmt 1 view .LVU2509
 9528              	.LBB2087:
 9529              	.LBI2087:
 836:src/xeq.c     **** 	setRegister(regY_idx, y);
 9530              		.loc 1 836 6 view .LVU2510
 9531              	.LBB2088:
 837:src/xeq.c     **** }
 9532              		.loc 1 837 2 view .LVU2511
 9533 000c 2146     		mov	r1, r4
 9534 000e 6520     		movs	r0, #101
 9535 0010 FFF7FEFF 		bl	setRegister
 9536              	.LVL684:
 837:src/xeq.c     **** }
 9537              		.loc 1 837 2 is_stmt 0 view .LVU2512
 9538              	.LBE2088:
 9539              	.LBE2087:
 863:src/xeq.c     **** #endif
 9540              		.loc 1 863 2 is_stmt 1 view .LVU2513
 9541 0014 044B     		ldr	r3, .L720
 9542 0016 1A68     		ldr	r2, [r3]
 9543 0018 92F8AD37 		ldrb	r3, [r2, #1965]	@ zero_extendqisi2
 9544 001c 43F00103 		orr	r3, r3, #1
 9545 0020 82F8AD37 		strb	r3, [r2, #1965]
 865:src/xeq.c     **** 
 9546              		.loc 1 865 1 is_stmt 0 view .LVU2514
 9547 0024 10BD     		pop	{r4, pc}
 9548              	.LVL685:
 9549              	.L721:
 865:src/xeq.c     **** 
 9550              		.loc 1 865 1 view .LVU2515
 9551 0026 00BF     		.align	2
 9552              	.L720:
 9553 0028 00000000 		.word	main_ram
 9554              		.cfi_endproc
 9555              	.LFE66:
 9557              		.section	.text.convert_regK,"ax",%progbits
 9558              		.align	1
 9559              		.p2align 2,,3
 9560              		.global	convert_regK
 9561              		.syntax unified
 9562              		.thumb
 9563              		.thumb_func
 9564              		.fpu fpv4-sp-d16
 9566              	convert_regK:
 9567              	.LVL686:
 9568              	.LFB75:
 939:src/xeq.c     **** 	decNumber k;
 9569              		.loc 1 939 41 is_stmt 1 view -0
 9570              		.cfi_startproc
 9571              		@ args = 0, pretend = 0, frame = 40
 9572              		@ frame_needed = 0, uses_anonymous_args = 0
 940:src/xeq.c     **** 
 9573              		.loc 1 940 2 view .LVU2517
 942:src/xeq.c     **** 	if (i==j) return; // no mode change
 9574              		.loc 1 942 2 view .LVU2518
ARM GAS  /tmp/ccqED0AM.s 			page 310


 9575              	.LBB2089:
 9576              	.LBI2089:
4099:src/xeq.c     **** 	if (State2.cmplx || XromFlags.xIN)
 9577              		.loc 1 4099 17 view .LVU2519
 9578              	.LBB2090:
4100:src/xeq.c     **** 		return TRIG_RAD;
 9579              		.loc 1 4100 2 view .LVU2520
 9580              	.LBE2090:
 9581              	.LBE2089:
 939:src/xeq.c     **** 	decNumber k;
 9582              		.loc 1 939 41 is_stmt 0 view .LVU2521
 9583 0000 70B5     		push	{r4, r5, r6, lr}
 9584              		.cfi_def_cfa_offset 16
 9585              		.cfi_offset 4, -16
 9586              		.cfi_offset 5, -12
 9587              		.cfi_offset 6, -8
 9588              		.cfi_offset 14, -4
 9589              	.LBB2094:
 9590              	.LBB2091:
4100:src/xeq.c     **** 		return TRIG_RAD;
 9591              		.loc 1 4100 6 view .LVU2522
 9592 0002 2A4B     		ldr	r3, .L743
 9593 0004 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
4100:src/xeq.c     **** 		return TRIG_RAD;
 9594              		.loc 1 4100 5 view .LVU2523
 9595 0006 9B07     		lsls	r3, r3, #30
 9596              	.LBE2091:
 9597              	.LBE2094:
 939:src/xeq.c     **** 	decNumber k;
 9598              		.loc 1 939 41 view .LVU2524
 9599 0008 8AB0     		sub	sp, sp, #40
 9600              		.cfi_def_cfa_offset 56
 939:src/xeq.c     **** 	decNumber k;
 9601              		.loc 1 939 41 view .LVU2525
 9602 000a 0446     		mov	r4, r0
 9603              	.LBB2095:
 9604              	.LBB2092:
4100:src/xeq.c     **** 		return TRIG_RAD;
 9605              		.loc 1 4100 5 view .LVU2526
 9606 000c 27D4     		bmi	.L726
4100:src/xeq.c     **** 		return TRIG_RAD;
 9607              		.loc 1 4100 19 view .LVU2527
 9608 000e 284B     		ldr	r3, .L743+4
 9609 0010 93F90130 		ldrsb	r3, [r3, #1]
 9610 0014 002B     		cmp	r3, #0
 9611 0016 22DB     		blt	.L726
4103:src/xeq.c     **** }
 9612              		.loc 1 4103 2 is_stmt 1 view .LVU2528
4103:src/xeq.c     **** }
 9613              		.loc 1 4103 33 is_stmt 0 view .LVU2529
 9614 0018 264B     		ldr	r3, .L743+8
 9615 001a 1B68     		ldr	r3, [r3]
 9616 001c 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
 9617              	.LBE2092:
 9618              	.LBE2095:
 943:src/xeq.c     **** 	getRegister(&k, regK_idx);
 9619              		.loc 1 943 5 view .LVU2530
ARM GAS  /tmp/ccqED0AM.s 			page 311


 9620 0020 B0EB931F 		cmp	r0, r3, lsr #6
 9621              	.LBB2096:
 9622              	.LBB2093:
4103:src/xeq.c     **** }
 9623              		.loc 1 4103 33 view .LVU2531
 9624 0024 4FEA9316 		lsr	r6, r3, #6
 9625              	.LVL687:
4103:src/xeq.c     **** }
 9626              		.loc 1 4103 33 view .LVU2532
 9627              	.LBE2093:
 9628              	.LBE2096:
 943:src/xeq.c     **** 	getRegister(&k, regK_idx);
 9629              		.loc 1 943 2 is_stmt 1 view .LVU2533
 943:src/xeq.c     **** 	getRegister(&k, regK_idx);
 9630              		.loc 1 943 5 is_stmt 0 view .LVU2534
 9631 0028 17D0     		beq	.L722
 944:src/xeq.c     **** 	switch (j) { // convert angle to fraction of one complete turn
 9632              		.loc 1 944 2 is_stmt 1 view .LVU2535
 9633 002a 01AD     		add	r5, sp, #4
 9634 002c 2846     		mov	r0, r5
 9635              	.LVL688:
 944:src/xeq.c     **** 	switch (j) { // convert angle to fraction of one complete turn
 9636              		.loc 1 944 2 is_stmt 0 view .LVU2536
 9637 002e 6F21     		movs	r1, #111
 9638 0030 FFF7FEFF 		bl	getRegister
 9639              	.LVL689:
 945:src/xeq.c     **** 		case TRIG_DEG:
 9640              		.loc 1 945 2 is_stmt 1 view .LVU2537
 9641 0034 012E     		cmp	r6, #1
 9642 0036 19D0     		beq	.L725
 9643 0038 022E     		cmp	r6, #2
 9644 003a 24D0     		beq	.L729
 9645 003c 26B9     		cbnz	r6, .L730
 947:src/xeq.c     **** 			break;
 9646              		.loc 1 947 4 view .LVU2538
 9647 003e 1E4A     		ldr	r2, .L743+12
 9648 0040 2946     		mov	r1, r5
 9649 0042 2846     		mov	r0, r5
 9650 0044 FFF7FEFF 		bl	dn_divide
 9651              	.LVL690:
 948:src/xeq.c     **** 		case TRIG_RAD:
 9652              		.loc 1 948 4 view .LVU2539
 9653              	.L730:
 954:src/xeq.c     **** 	}
 9654              		.loc 1 954 11 view .LVU2540
 956:src/xeq.c     **** 		case TRIG_DEG:
 9655              		.loc 1 956 2 view .LVU2541
 9656 0048 012C     		cmp	r4, #1
 9657 004a 16D0     		beq	.L731
 9658              	.L742:
 956:src/xeq.c     **** 		case TRIG_DEG:
 9659              		.loc 1 956 2 is_stmt 0 view .LVU2542
 9660 004c 022C     		cmp	r4, #2
 9661 004e 20D0     		beq	.L732
 9662 0050 2CB3     		cbz	r4, .L741
 9663              	.L733:
 965:src/xeq.c     **** 	}
ARM GAS  /tmp/ccqED0AM.s 			page 312


 9664              		.loc 1 965 11 is_stmt 1 view .LVU2543
 967:src/xeq.c     **** }
 9665              		.loc 1 967 2 view .LVU2544
 9666 0052 2946     		mov	r1, r5
 9667 0054 6F20     		movs	r0, #111
 9668 0056 FFF7FEFF 		bl	setRegister
 9669              	.LVL691:
 9670              	.L722:
 968:src/xeq.c     **** 
 9671              		.loc 1 968 1 is_stmt 0 view .LVU2545
 9672 005a 0AB0     		add	sp, sp, #40
 9673              		.cfi_remember_state
 9674              		.cfi_def_cfa_offset 16
 9675              		@ sp needed
 9676 005c 70BD     		pop	{r4, r5, r6, pc}
 9677              	.LVL692:
 9678              	.L726:
 9679              		.cfi_restore_state
 943:src/xeq.c     **** 	getRegister(&k, regK_idx);
 9680              		.loc 1 943 2 is_stmt 1 view .LVU2546
 943:src/xeq.c     **** 	getRegister(&k, regK_idx);
 9681              		.loc 1 943 5 is_stmt 0 view .LVU2547
 9682 005e 012C     		cmp	r4, #1
 9683 0060 FBD0     		beq	.L722
 944:src/xeq.c     **** 	switch (j) { // convert angle to fraction of one complete turn
 9684              		.loc 1 944 2 is_stmt 1 view .LVU2548
 9685 0062 01AD     		add	r5, sp, #4
 9686 0064 2846     		mov	r0, r5
 9687              	.LVL693:
 944:src/xeq.c     **** 	switch (j) { // convert angle to fraction of one complete turn
 9688              		.loc 1 944 2 is_stmt 0 view .LVU2549
 9689 0066 6F21     		movs	r1, #111
 9690 0068 FFF7FEFF 		bl	getRegister
 9691              	.LVL694:
 945:src/xeq.c     **** 		case TRIG_DEG:
 9692              		.loc 1 945 2 is_stmt 1 view .LVU2550
 9693              	.L725:
 950:src/xeq.c     **** 			break;
 9694              		.loc 1 950 4 view .LVU2551
 9695 006c 134A     		ldr	r2, .L743+16
 9696 006e 2946     		mov	r1, r5
 9697 0070 2846     		mov	r0, r5
 9698 0072 FFF7FEFF 		bl	dn_divide
 9699              	.LVL695:
 951:src/xeq.c     **** 		case TRIG_GRAD:
 9700              		.loc 1 951 4 view .LVU2552
 954:src/xeq.c     **** 	}
 9701              		.loc 1 954 11 view .LVU2553
 956:src/xeq.c     **** 		case TRIG_DEG:
 9702              		.loc 1 956 2 view .LVU2554
 9703 0076 012C     		cmp	r4, #1
 9704 0078 E8D1     		bne	.L742
 9705              	.L731:
 961:src/xeq.c     **** 			break;
 9706              		.loc 1 961 4 view .LVU2555
 9707 007a 104A     		ldr	r2, .L743+16
 9708 007c 2946     		mov	r1, r5
ARM GAS  /tmp/ccqED0AM.s 			page 313


 9709 007e 2846     		mov	r0, r5
 9710 0080 FFF7FEFF 		bl	dn_multiply
 9711              	.LVL696:
 962:src/xeq.c     **** 		case TRIG_GRAD:
 9712              		.loc 1 962 4 view .LVU2556
 9713 0084 E5E7     		b	.L733
 9714              	.L729:
 953:src/xeq.c     **** 		default:;
 9715              		.loc 1 953 4 view .LVU2557
 9716 0086 0E4A     		ldr	r2, .L743+20
 9717 0088 2946     		mov	r1, r5
 9718 008a 2846     		mov	r0, r5
 9719 008c FFF7FEFF 		bl	dn_divide
 9720              	.LVL697:
 9721 0090 DAE7     		b	.L730
 9722              	.L732:
 964:src/xeq.c     **** 		default:;
 9723              		.loc 1 964 4 view .LVU2558
 9724 0092 0B4A     		ldr	r2, .L743+20
 9725 0094 2946     		mov	r1, r5
 9726 0096 2846     		mov	r0, r5
 9727 0098 FFF7FEFF 		bl	dn_multiply
 9728              	.LVL698:
 9729 009c D9E7     		b	.L733
 9730              	.L741:
 958:src/xeq.c     **** 			break;
 9731              		.loc 1 958 4 view .LVU2559
 9732 009e 064A     		ldr	r2, .L743+12
 9733 00a0 2946     		mov	r1, r5
 9734 00a2 2846     		mov	r0, r5
 9735 00a4 FFF7FEFF 		bl	dn_multiply
 9736              	.LVL699:
 959:src/xeq.c     **** 		case TRIG_RAD:
 9737              		.loc 1 959 4 view .LVU2560
 9738 00a8 D3E7     		b	.L733
 9739              	.L744:
 9740 00aa 00BF     		.align	2
 9741              	.L743:
 9742 00ac 00000000 		.word	StateWhileOn
 9743 00b0 00000000 		.word	XromParams
 9744 00b4 00000000 		.word	main_ram
 9745 00b8 00000000 		.word	const_360
 9746 00bc 00000000 		.word	const_2PI
 9747 00c0 00000000 		.word	const_400
 9748              		.cfi_endproc
 9749              	.LFE75:
 9751              		.section	.text.cpx_nop,"ax",%progbits
 9752              		.align	1
 9753              		.p2align 2,,3
 9754              		.global	cpx_nop
 9755              		.syntax unified
 9756              		.thumb
 9757              		.thumb_func
 9758              		.fpu fpv4-sp-d16
 9760              	cpx_nop:
 9761              	.LVL700:
 9762              	.LFB78:
ARM GAS  /tmp/ccqED0AM.s 			page 314


1011:src/xeq.c     ****   reset_shift();
 9763              		.loc 1 1011 29 view -0
 9764              		.cfi_startproc
 9765              		@ args = 0, pretend = 0, frame = 40
 9766              		@ frame_needed = 0, uses_anonymous_args = 0
1012:src/xeq.c     **** 	switch (op) {
 9767              		.loc 1 1012 3 view .LVU2562
1011:src/xeq.c     ****   reset_shift();
 9768              		.loc 1 1011 29 is_stmt 0 view .LVU2563
 9769 0000 10B5     		push	{r4, lr}
 9770              		.cfi_def_cfa_offset 8
 9771              		.cfi_offset 4, -8
 9772              		.cfi_offset 14, -4
 9773 0002 0446     		mov	r4, r0
 9774 0004 8AB0     		sub	sp, sp, #40
 9775              		.cfi_def_cfa_offset 48
1012:src/xeq.c     **** 	switch (op) {
 9776              		.loc 1 1012 3 view .LVU2564
 9777 0006 FFF7FEFF 		bl	reset_shift
 9778              	.LVL701:
1013:src/xeq.c     **** 	case OP_CYES: // set flag to allow complex mode to be entered - can be called at any time
 9779              		.loc 1 1013 2 is_stmt 1 view .LVU2565
 9780 000a A4F1CA00 		sub	r0, r4, #202
 9781 000e 0B28     		cmp	r0, #11
 9782 0010 13D8     		bhi	.L763
 9783 0012 DFE800F0 		tbb	[pc, r0]
 9784              	.L748:
 9785 0016 21       		.byte	(.L757-.L748)/2
 9786 0017 3B       		.byte	(.L761-.L748)/2
 9787 0018 06       		.byte	(.L755-.L748)/2
 9788 0019 59       		.byte	(.L754-.L748)/2
 9789 001a 68       		.byte	(.L753-.L748)/2
 9790 001b 70       		.byte	(.L752-.L748)/2
 9791 001c 12       		.byte	(.L763-.L748)/2
 9792 001d 12       		.byte	(.L763-.L748)/2
 9793 001e 77       		.byte	(.L751-.L748)/2
 9794 001f 80       		.byte	(.L750-.L748)/2
 9795 0020 89       		.byte	(.L749-.L748)/2
 9796 0021 94       		.byte	(.L747-.L748)/2
 9797              		.p2align 1
 9798              	.L755:
 9799              	.LBB2097:
1053:src/xeq.c     **** 		getY(&y);
 9800              		.loc 1 1053 3 view .LVU2566
1054:src/xeq.c     **** 		dn_minus(&y, &y);
 9801              		.loc 1 1054 3 view .LVU2567
 9802              	.LVL702:
 9803              	.LBB2098:
 9804              	.LBI2098:
 832:src/xeq.c     **** 	getRegister(y, regY_idx);
 9805              		.loc 1 832 6 view .LVU2568
 9806              	.LBB2099:
 833:src/xeq.c     **** }
 9807              		.loc 1 833 2 view .LVU2569
 9808 0022 6521     		movs	r1, #101
 9809 0024 01A8     		add	r0, sp, #4
 9810              	.LVL703:
ARM GAS  /tmp/ccqED0AM.s 			page 315


 833:src/xeq.c     **** }
 9811              		.loc 1 833 2 is_stmt 0 view .LVU2570
 9812 0026 FFF7FEFF 		bl	getRegister
 9813              	.LVL704:
 833:src/xeq.c     **** }
 9814              		.loc 1 833 2 view .LVU2571
 9815              	.LBE2099:
 9816              	.LBE2098:
1055:src/xeq.c     **** 		setY(&y);
 9817              		.loc 1 1055 3 is_stmt 1 view .LVU2572
 9818 002a 01A9     		add	r1, sp, #4
 9819 002c 0846     		mov	r0, r1
 9820 002e FFF7FEFF 		bl	dn_minus
 9821              	.LVL705:
1056:src/xeq.c     **** 		}
 9822              		.loc 1 1056 3 view .LVU2573
 9823              	.LBB2100:
 9824              	.LBI2100:
 836:src/xeq.c     **** 	setRegister(regY_idx, y);
 9825              		.loc 1 836 6 view .LVU2574
 9826              	.LBB2101:
 837:src/xeq.c     **** }
 9827              		.loc 1 837 2 view .LVU2575
 9828 0032 01A9     		add	r1, sp, #4
 9829              	.LVL706:
 837:src/xeq.c     **** }
 9830              		.loc 1 837 2 is_stmt 0 view .LVU2576
 9831 0034 6520     		movs	r0, #101
 9832 0036 FFF7FEFF 		bl	setRegister
 9833              	.LVL707:
 9834              	.L763:
 837:src/xeq.c     **** }
 9835              		.loc 1 837 2 view .LVU2577
 9836              	.LBE2101:
 9837              	.LBE2100:
 9838              	.LBE2097:
1058:src/xeq.c     **** 	case OP_C_MRE: // change sign of real part
 9839              		.loc 1 1058 3 is_stmt 1 view .LVU2578
 9840 003a 4A4B     		ldr	r3, .L764
 9841 003c 1A68     		ldr	r2, [r3]
 9842              	.L758:
1079:src/xeq.c     **** 	}
 9843              		.loc 1 1079 10 view .LVU2579
1081:src/xeq.c     **** 	CLEAR_POLAR_READY;
 9844              		.loc 1 1081 2 view .LVU2580
 9845              	.LBB2102:
 9846              	.LBI2102:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 9847              		.loc 1 539 13 view .LVU2581
 9848              	.LBB2103:
 540:src/xeq.c     **** }
 9849              		.loc 1 540 2 view .LVU2582
 540:src/xeq.c     **** }
 9850              		.loc 1 540 20 is_stmt 0 view .LVU2583
 9851 003e 4A4B     		ldr	r3, .L764+4
 9852 0040 197D     		ldrb	r1, [r3, #20]	@ zero_extendqisi2
 9853 0042 0120     		movs	r0, #1
ARM GAS  /tmp/ccqED0AM.s 			page 316


 9854 0044 60F38711 		bfi	r1, r0, #6, #2
 9855 0048 1975     		strb	r1, [r3, #20]
 9856              	.LBE2103:
 9857              	.LBE2102:
1082:src/xeq.c     **** }
 9858              		.loc 1 1082 2 is_stmt 1 view .LVU2584
 9859 004a 92F8AD37 		ldrb	r3, [r2, #1965]	@ zero_extendqisi2
 9860 004e 0343     		orrs	r3, r3, r0
 9861 0050 82F8AD37 		strb	r3, [r2, #1965]
 9862              	.L745:
1083:src/xeq.c     **** #endif
 9863              		.loc 1 1083 1 is_stmt 0 view .LVU2585
 9864 0054 0AB0     		add	sp, sp, #40
 9865              		.cfi_remember_state
 9866              		.cfi_def_cfa_offset 8
 9867              		@ sp needed
 9868 0056 10BD     		pop	{r4, pc}
 9869              	.L757:
 9870              		.cfi_restore_state
1021:src/xeq.c     **** 			INIT_8;
 9871              		.loc 1 1021 3 is_stmt 1 view .LVU2586
1021:src/xeq.c     **** 			INIT_8;
 9872              		.loc 1 1021 7 is_stmt 0 view .LVU2587
 9873 0058 424C     		ldr	r4, .L764
 9874 005a 2268     		ldr	r2, [r4]
1027:src/xeq.c     **** 		UState.stack_depth = 1; // set stack size to 8
 9875              		.loc 1 1027 3 is_stmt 1 view .LVU2588
1021:src/xeq.c     **** 			INIT_8;
 9876              		.loc 1 1021 6 is_stmt 0 view .LVU2589
 9877 005c 92F8EA17 		ldrb	r1, [r2, #2026]	@ zero_extendqisi2
1027:src/xeq.c     **** 		UState.stack_depth = 1; // set stack size to 8
 9878              		.loc 1 1027 3 view .LVU2590
 9879 0060 92F8AC07 		ldrb	r0, [r2, #1964]	@ zero_extendqisi2
 9880 0064 01F00803 		and	r3, r1, #8
 9881 0068 20F00900 		bic	r0, r0, #9
 9882 006c 43F00103 		orr	r3, r3, #1
 9883 0070 0343     		orrs	r3, r3, r0
1028:src/xeq.c     **** #ifdef DM42
 9884              		.loc 1 1028 22 view .LVU2591
 9885 0072 41F00801 		orr	r1, r1, #8
 9886 0076 82F8EA17 		strb	r1, [r2, #2026]
1027:src/xeq.c     **** 		UState.stack_depth = 1; // set stack size to 8
 9887              		.loc 1 1027 3 view .LVU2592
 9888 007a 82F8AC37 		strb	r3, [r2, #1964]
1028:src/xeq.c     **** #ifdef DM42
 9889              		.loc 1 1028 3 is_stmt 1 view .LVU2593
1030:src/xeq.c     **** 		display_current_menu();
 9890              		.loc 1 1030 3 view .LVU2594
 9891 007e 1120     		movs	r0, #17
 9892 0080 FFF7FEFF 		bl	set_menu
 9893              	.LVL708:
1031:src/xeq.c     **** #endif
 9894              		.loc 1 1031 3 view .LVU2595
 9895 0084 FFF7FEFF 		bl	display_current_menu
 9896              	.LVL709:
1033:src/xeq.c     **** 	case OP_CNO: // reset flag so that complex mode cannot be entered
 9897              		.loc 1 1033 3 view .LVU2596
ARM GAS  /tmp/ccqED0AM.s 			page 317


 9898 0088 2268     		ldr	r2, [r4]
 9899 008a D8E7     		b	.L758
 9900              	.L761:
 9901 008c 354C     		ldr	r4, .L764
 9902              	.L756:
1042:src/xeq.c     **** 		UNLOCK_C;
 9903              		.loc 1 1042 3 view .LVU2597
 9904 008e 0120     		movs	r0, #1
 9905 0090 FFF7FEFF 		bl	finish_cpx_entry
 9906              	.LVL710:
1043:src/xeq.c     **** 		UState.stack_depth = TRUE_8; // restore prior stack size
 9907              		.loc 1 1043 3 view .LVU2598
 9908 0094 2368     		ldr	r3, [r4]
1045:src/xeq.c     **** #ifdef DM42
 9909              		.loc 1 1045 21 is_stmt 0 view .LVU2599
 9910 0096 3449     		ldr	r1, .L764+4
1043:src/xeq.c     **** 		UState.stack_depth = TRUE_8; // restore prior stack size
 9911              		.loc 1 1043 3 view .LVU2600
 9912 0098 93F8AC27 		ldrb	r2, [r3, #1964]	@ zero_extendqisi2
1044:src/xeq.c     **** 		State2.wascomplex = 0;
 9913              		.loc 1 1044 22 view .LVU2601
 9914 009c 93F8EA07 		ldrb	r0, [r3, #2026]	@ zero_extendqisi2
1043:src/xeq.c     **** 		UState.stack_depth = TRUE_8; // restore prior stack size
 9915              		.loc 1 1043 3 view .LVU2602
 9916 00a0 6FF30002 		bfc	r2, #0, #1
1044:src/xeq.c     **** 		State2.wascomplex = 0;
 9917              		.loc 1 1044 22 view .LVU2603
 9918 00a4 C2F3C004 		ubfx	r4, r2, #3, #1
 9919 00a8 64F3C300 		bfi	r0, r4, #3, #1
 9920 00ac 83F8EA07 		strb	r0, [r3, #2026]
1045:src/xeq.c     **** #ifdef DM42
 9921              		.loc 1 1045 21 view .LVU2604
 9922 00b0 087D     		ldrb	r0, [r1, #20]	@ zero_extendqisi2
1043:src/xeq.c     **** 		UState.stack_depth = TRUE_8; // restore prior stack size
 9923              		.loc 1 1043 3 view .LVU2605
 9924 00b2 83F8AC27 		strb	r2, [r3, #1964]
1044:src/xeq.c     **** 		State2.wascomplex = 0;
 9925              		.loc 1 1044 3 is_stmt 1 view .LVU2606
1045:src/xeq.c     **** #ifdef DM42
 9926              		.loc 1 1045 3 view .LVU2607
1045:src/xeq.c     **** #ifdef DM42
 9927              		.loc 1 1045 21 is_stmt 0 view .LVU2608
 9928 00b6 6FF38710 		bfc	r0, #6, #2
 9929 00ba 0875     		strb	r0, [r1, #20]
1047:src/xeq.c     **** 		display_current_menu();
 9930              		.loc 1 1047 3 is_stmt 1 view .LVU2609
 9931 00bc FFF7FEFF 		bl	set_default_menu
 9932              	.LVL711:
1048:src/xeq.c     **** #endif
 9933              		.loc 1 1048 3 view .LVU2610
 9934 00c0 FFF7FEFF 		bl	display_current_menu
 9935              	.LVL712:
1050:src/xeq.c     **** 	case OP_C_MIM: // change sign of imaginary part
 9936              		.loc 1 1050 3 view .LVU2611
1083:src/xeq.c     **** #endif
 9937              		.loc 1 1083 1 is_stmt 0 view .LVU2612
 9938 00c4 0AB0     		add	sp, sp, #40
ARM GAS  /tmp/ccqED0AM.s 			page 318


 9939              		.cfi_remember_state
 9940              		.cfi_def_cfa_offset 8
 9941              		@ sp needed
 9942 00c6 10BD     		pop	{r4, pc}
 9943              	.L754:
 9944              		.cfi_restore_state
 9945              	.LBB2104:
1061:src/xeq.c     **** 		getX(&x);
 9946              		.loc 1 1061 3 is_stmt 1 view .LVU2613
1062:src/xeq.c     **** 		dn_minus(&x, &x);
 9947              		.loc 1 1062 3 view .LVU2614
 9948              	.LVL713:
 9949              	.LBB2105:
 9950              	.LBI2105:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 9951              		.loc 1 824 12 view .LVU2615
 9952              	.LBB2106:
 825:src/xeq.c     **** }
 9953              		.loc 1 825 2 view .LVU2616
 825:src/xeq.c     **** }
 9954              		.loc 1 825 9 is_stmt 0 view .LVU2617
 9955 00c8 6421     		movs	r1, #100
 9956 00ca 01A8     		add	r0, sp, #4
 9957              	.LVL714:
 825:src/xeq.c     **** }
 9958              		.loc 1 825 9 view .LVU2618
 9959 00cc FFF7FEFF 		bl	getRegister
 9960              	.LVL715:
 825:src/xeq.c     **** }
 9961              		.loc 1 825 9 view .LVU2619
 9962              	.LBE2106:
 9963              	.LBE2105:
1063:src/xeq.c     **** 		setX(&x);
 9964              		.loc 1 1063 3 is_stmt 1 view .LVU2620
 9965 00d0 01A9     		add	r1, sp, #4
 9966 00d2 0846     		mov	r0, r1
 9967 00d4 FFF7FEFF 		bl	dn_minus
 9968              	.LVL716:
1064:src/xeq.c     **** 		}
 9969              		.loc 1 1064 3 view .LVU2621
 9970              	.LBB2107:
 9971              	.LBI2107:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 9972              		.loc 1 828 6 view .LVU2622
 9973              	.LBB2108:
 829:src/xeq.c     **** }
 9974              		.loc 1 829 2 view .LVU2623
 9975 00d8 01A9     		add	r1, sp, #4
 9976              	.LVL717:
 829:src/xeq.c     **** }
 9977              		.loc 1 829 2 is_stmt 0 view .LVU2624
 9978 00da 6420     		movs	r0, #100
 9979 00dc FFF7FEFF 		bl	setRegister
 9980              	.LVL718:
 829:src/xeq.c     **** }
 9981              		.loc 1 829 2 view .LVU2625
 9982              	.LBE2108:
ARM GAS  /tmp/ccqED0AM.s 			page 319


 9983              	.LBE2107:
 9984              	.LBE2104:
1066:src/xeq.c     **** 	case OP_C_IM: // zero real part
 9985              		.loc 1 1066 3 is_stmt 1 view .LVU2626
 9986 00e0 204B     		ldr	r3, .L764
 9987 00e2 1A68     		ldr	r2, [r3]
 9988 00e4 ABE7     		b	.L758
 9989              	.L753:
1071:src/xeq.c     **** 		break;
 9990              		.loc 1 1071 3 view .LVU2627
 9991              	.LBB2109:
 9992              	.LBI2109:
1554:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 9993              		.loc 1 1554 6 view .LVU2628
 9994              	.LBB2110:
1555:src/xeq.c     **** }
 9995              		.loc 1 1555 2 view .LVU2629
 9996 00e6 6520     		movs	r0, #101
 9997 00e8 FFF7FEFF 		bl	get_reg_n
 9998              	.LVL719:
 9999 00ec FFF7FEFF 		bl	set_zero
 10000              	.LVL720:
 10001 00f0 1C4B     		ldr	r3, .L764
 10002 00f2 1A68     		ldr	r2, [r3]
1556:src/xeq.c     **** 
 10003              		.loc 1 1556 1 is_stmt 0 view .LVU2630
 10004 00f4 A3E7     		b	.L758
 10005              	.L752:
 10006              	.LBE2110:
 10007              	.LBE2109:
1068:src/xeq.c     **** 		break;
 10008              		.loc 1 1068 3 is_stmt 1 view .LVU2631
 10009              	.LBB2111:
 10010              	.LBI2111:
1550:src/xeq.c     **** 	set_zero(StackBase);
 10011              		.loc 1 1550 6 view .LVU2632
 10012              	.LBB2112:
1551:src/xeq.c     **** }
 10013              		.loc 1 1551 2 view .LVU2633
 10014 00f6 1D4B     		ldr	r3, .L764+8
 10015 00f8 1868     		ldr	r0, [r3]
 10016 00fa FFF7FEFF 		bl	set_zero
 10017              	.LVL721:
 10018 00fe 194B     		ldr	r3, .L764
 10019 0100 1A68     		ldr	r2, [r3]
1552:src/xeq.c     **** 
 10020              		.loc 1 1552 1 is_stmt 0 view .LVU2634
 10021 0102 9CE7     		b	.L758
 10022              	.L751:
 10023              	.LBE2112:
 10024              	.LBE2111:
1074:src/xeq.c     **** 		break;
 10025              		.loc 1 1074 3 is_stmt 1 view .LVU2635
 10026 0104 174B     		ldr	r3, .L764
 10027 0106 1A68     		ldr	r2, [r3]
 10028 0108 92F8AC37 		ldrb	r3, [r2, #1964]	@ zero_extendqisi2
 10029 010c 6FF34513 		bfc	r3, #5, #1
ARM GAS  /tmp/ccqED0AM.s 			page 320


 10030 0110 82F8AC37 		strb	r3, [r2, #1964]
1075:src/xeq.c     **** 	case OP_CPXJ: // use j to display complex numbers
 10031              		.loc 1 1075 3 view .LVU2636
 10032 0114 93E7     		b	.L758
 10033              	.L750:
1077:src/xeq.c     **** 		break;
 10034              		.loc 1 1077 3 view .LVU2637
 10035 0116 134B     		ldr	r3, .L764
 10036 0118 1A68     		ldr	r2, [r3]
 10037 011a 92F8AC37 		ldrb	r3, [r2, #1964]	@ zero_extendqisi2
 10038 011e 43F02003 		orr	r3, r3, #32
 10039 0122 82F8AC37 		strb	r3, [r2, #1964]
1078:src/xeq.c     **** 	default:;
 10040              		.loc 1 1078 3 view .LVU2638
 10041 0126 8AE7     		b	.L758
 10042              	.L749:
1015:src/xeq.c     **** 		CLEAR_REAL; // tidy a few flags when mode enabled
 10043              		.loc 1 1015 10 view .LVU2639
 10044 0128 0E4B     		ldr	r3, .L764
 10045 012a 1A68     		ldr	r2, [r3]
1016:src/xeq.c     **** 		CLEAR_IMAG;
 10046              		.loc 1 1016 3 view .LVU2640
1017:src/xeq.c     **** 		SET_RECTANGULAR_DISPLAY; 
 10047              		.loc 1 1017 3 view .LVU2641
1018:src/xeq.c     **** 		return;
 10048              		.loc 1 1018 3 view .LVU2642
1016:src/xeq.c     **** 		CLEAR_IMAG;
 10049              		.loc 1 1016 3 is_stmt 0 view .LVU2643
 10050 012c 92F8AC37 		ldrb	r3, [r2, #1964]	@ zero_extendqisi2
 10051 0130 03F03903 		and	r3, r3, #57
 10052 0134 43F04003 		orr	r3, r3, #64
 10053 0138 82F8AC37 		strb	r3, [r2, #1964]
1019:src/xeq.c     **** 	case OP_C_ON: // start complex mode - only called if CPX_ENABLED and C_LOCK_OFF
 10054              		.loc 1 1019 3 is_stmt 1 view .LVU2644
 10055 013c 8AE7     		b	.L745
 10056              	.L747:
1035:src/xeq.c     **** 			SET_CPX_NO;
 10057              		.loc 1 1035 3 view .LVU2645
1035:src/xeq.c     **** 			SET_CPX_NO;
 10058              		.loc 1 1035 8 is_stmt 0 view .LVU2646
 10059 013e 094C     		ldr	r4, .L764
 10060 0140 2268     		ldr	r2, [r4]
1035:src/xeq.c     **** 			SET_CPX_NO;
 10061              		.loc 1 1035 7 view .LVU2647
 10062 0142 92F8AC37 		ldrb	r3, [r2, #1964]	@ zero_extendqisi2
1035:src/xeq.c     **** 			SET_CPX_NO;
 10063              		.loc 1 1035 6 view .LVU2648
 10064 0146 03F04101 		and	r1, r3, #65
 10065 014a 4129     		cmp	r1, #65
 10066 014c 04D0     		beq	.L760
1036:src/xeq.c     **** 			UNLOCK_C; //just in case
 10067              		.loc 1 1036 4 is_stmt 1 view .LVU2649
1037:src/xeq.c     **** 			return;
 10068              		.loc 1 1037 4 view .LVU2650
 10069 014e 23F04103 		bic	r3, r3, #65
 10070 0152 82F8AC37 		strb	r3, [r2, #1964]
1038:src/xeq.c     **** 		}
ARM GAS  /tmp/ccqED0AM.s 			page 321


 10071              		.loc 1 1038 4 view .LVU2651
 10072 0156 7DE7     		b	.L745
 10073              	.L760:
1040:src/xeq.c     **** 	case OP_C_OFF: // exit complex mode - only called if CPX_ENABLED and C_LOCK_ON
 10074              		.loc 1 1040 3 view .LVU2652
 10075 0158 6FF38613 		bfc	r3, #6, #1
 10076 015c 82F8AC37 		strb	r3, [r2, #1964]
 10077 0160 95E7     		b	.L756
 10078              	.L765:
 10079 0162 00BF     		.align	2
 10080              	.L764:
 10081 0164 00000000 		.word	main_ram
 10082 0168 00000000 		.word	StateWhileOn
 10083 016c 00000000 		.word	StackBase
 10084              		.cfi_endproc
 10085              	.LFE78:
 10087              		.section	.text.get_reg_n_int,"ax",%progbits
 10088              		.align	1
 10089              		.p2align 2,,3
 10090              		.global	get_reg_n_int
 10091              		.syntax unified
 10092              		.thumb
 10093              		.thumb_func
 10094              		.fpu fpv4-sp-d16
 10096              	get_reg_n_int:
 10097              	.LVL722:
 10098              	.LFB94:
1416:src/xeq.c     **** 	long long int ll;
 10099              		.loc 1 1416 40 view -0
 10100              		.cfi_startproc
 10101              		@ args = 0, pretend = 0, frame = 8
 10102              		@ frame_needed = 0, uses_anonymous_args = 0
1417:src/xeq.c     **** 	xcopy(&ll, get_reg_n(index), sizeof(ll));
 10103              		.loc 1 1417 2 view .LVU2654
1418:src/xeq.c     **** 	return ll;
 10104              		.loc 1 1418 2 view .LVU2655
1416:src/xeq.c     **** 	long long int ll;
 10105              		.loc 1 1416 40 is_stmt 0 view .LVU2656
 10106 0000 00B5     		push	{lr}
 10107              		.cfi_def_cfa_offset 4
 10108              		.cfi_offset 14, -4
 10109 0002 83B0     		sub	sp, sp, #12
 10110              		.cfi_def_cfa_offset 16
1418:src/xeq.c     **** 	return ll;
 10111              		.loc 1 1418 13 view .LVU2657
 10112 0004 FFF7FEFF 		bl	get_reg_n
 10113              	.LVL723:
1418:src/xeq.c     **** 	return ll;
 10114              		.loc 1 1418 2 view .LVU2658
 10115 0008 0822     		movs	r2, #8
1418:src/xeq.c     **** 	return ll;
 10116              		.loc 1 1418 13 view .LVU2659
 10117 000a 0146     		mov	r1, r0
1418:src/xeq.c     **** 	return ll;
 10118              		.loc 1 1418 2 view .LVU2660
 10119 000c 6846     		mov	r0, sp
 10120 000e FFF7FEFF 		bl	xcopy
ARM GAS  /tmp/ccqED0AM.s 			page 322


 10121              	.LVL724:
1419:src/xeq.c     **** }
 10122              		.loc 1 1419 2 is_stmt 1 view .LVU2661
1420:src/xeq.c     **** 
 10123              		.loc 1 1420 1 is_stmt 0 view .LVU2662
 10124 0012 DDE90001 		ldrd	r0, [sp]
 10125 0016 03B0     		add	sp, sp, #12
 10126              		.cfi_def_cfa_offset 4
 10127              		@ sp needed
 10128 0018 5DF804FB 		ldr	pc, [sp], #4
 10129              		.cfi_endproc
 10130              	.LFE94:
 10132              		.section	.text.storcl_intop,"ax",%progbits
 10133              		.align	1
 10134              		.p2align 2,,3
 10135              		.syntax unified
 10136              		.thumb
 10137              		.thumb_func
 10138              		.fpu fpv4-sp-d16
 10140              	storcl_intop:
 10141              	.LVL725:
 10142              	.LFB116:
1685:src/xeq.c     **** 	long long int x, y;
 10143              		.loc 1 1685 83 is_stmt 1 view -0
 10144              		.cfi_startproc
 10145              		@ args = 0, pretend = 0, frame = 0
 10146              		@ frame_needed = 0, uses_anonymous_args = 0
1686:src/xeq.c     **** 
 10147              		.loc 1 1686 2 view .LVU2664
1688:src/xeq.c     **** 	y = get_reg_n_int(index);
 10148              		.loc 1 1688 2 view .LVU2665
 10149              	.LBB2113:
 10150              	.LBI2113:
1442:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 10151              		.loc 1 1442 15 view .LVU2666
 10152              	.LBB2114:
1443:src/xeq.c     **** }
 10153              		.loc 1 1443 2 view .LVU2667
 10154              	.LBE2114:
 10155              	.LBE2113:
1685:src/xeq.c     **** 	long long int x, y;
 10156              		.loc 1 1685 83 is_stmt 0 view .LVU2668
 10157 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 10158              		.cfi_def_cfa_offset 32
 10159              		.cfi_offset 3, -32
 10160              		.cfi_offset 4, -28
 10161              		.cfi_offset 5, -24
 10162              		.cfi_offset 6, -20
 10163              		.cfi_offset 7, -16
 10164              		.cfi_offset 8, -12
 10165              		.cfi_offset 9, -8
 10166              		.cfi_offset 14, -4
1685:src/xeq.c     **** 	long long int x, y;
 10167              		.loc 1 1685 83 view .LVU2669
 10168 0004 0446     		mov	r4, r0
 10169              	.LBB2118:
 10170              	.LBB2115:
ARM GAS  /tmp/ccqED0AM.s 			page 323


1443:src/xeq.c     **** }
 10171              		.loc 1 1443 9 view .LVU2670
 10172 0006 6420     		movs	r0, #100
 10173              	.LVL726:
1443:src/xeq.c     **** }
 10174              		.loc 1 1443 9 view .LVU2671
 10175              	.LBE2115:
 10176              	.LBE2118:
1685:src/xeq.c     **** 	long long int x, y;
 10177              		.loc 1 1685 83 view .LVU2672
 10178 0008 8946     		mov	r9, r1
 10179 000a 9846     		mov	r8, r3
 10180 000c 1646     		mov	r6, r2
 10181              	.LBB2119:
 10182              	.LBB2116:
1443:src/xeq.c     **** }
 10183              		.loc 1 1443 9 view .LVU2673
 10184 000e FFF7FEFF 		bl	get_reg_n_int
 10185              	.LVL727:
1443:src/xeq.c     **** }
 10186              		.loc 1 1443 9 view .LVU2674
 10187 0012 0746     		mov	r7, r0
 10188              	.LBE2116:
 10189              	.LBE2119:
1689:src/xeq.c     **** 
 10190              		.loc 1 1689 6 view .LVU2675
 10191 0014 4846     		mov	r0, r9
 10192              	.LBB2120:
 10193              	.LBB2117:
1443:src/xeq.c     **** }
 10194              		.loc 1 1443 9 view .LVU2676
 10195 0016 0D46     		mov	r5, r1
 10196              	.LVL728:
1443:src/xeq.c     **** }
 10197              		.loc 1 1443 9 view .LVU2677
 10198              	.LBE2117:
 10199              	.LBE2120:
1689:src/xeq.c     **** 
 10200              		.loc 1 1689 2 is_stmt 1 view .LVU2678
1689:src/xeq.c     **** 
 10201              		.loc 1 1689 6 is_stmt 0 view .LVU2679
 10202 0018 FFF7FEFF 		bl	get_reg_n_int
 10203              	.LVL729:
1691:src/xeq.c     **** 		const long long int t = x;
 10204              		.loc 1 1691 2 is_stmt 1 view .LVU2680
1691:src/xeq.c     **** 		const long long int t = x;
 10205              		.loc 1 1691 5 is_stmt 0 view .LVU2681
 10206 001c B8F1000F 		cmp	r8, #0
 10207 0020 05D0     		beq	.L769
 10208 0022 3A46     		mov	r2, r7
 10209 0024 2B46     		mov	r3, r5
 10210              	.LBB2121:
1693:src/xeq.c     **** 		y = t;
 10211              		.loc 1 1693 5 view .LVU2682
 10212 0026 0746     		mov	r7, r0
 10213              	.LVL730:
1693:src/xeq.c     **** 		y = t;
ARM GAS  /tmp/ccqED0AM.s 			page 324


 10214              		.loc 1 1693 5 view .LVU2683
 10215 0028 0D46     		mov	r5, r1
 10216              	.LVL731:
1694:src/xeq.c     **** 	}
 10217              		.loc 1 1694 5 view .LVU2684
 10218 002a 1046     		mov	r0, r2
 10219              	.LVL732:
1694:src/xeq.c     **** 	}
 10220              		.loc 1 1694 5 view .LVU2685
 10221 002c 1946     		mov	r1, r3
 10222              	.LVL733:
 10223              	.L769:
1694:src/xeq.c     **** 	}
 10224              		.loc 1 1694 5 view .LVU2686
 10225              	.LBE2121:
1697:src/xeq.c     **** 	case 1:
 10226              		.loc 1 1697 2 is_stmt 1 view .LVU2687
 10227 002e 013C     		subs	r4, r4, #1
 10228 0030 052C     		cmp	r4, #5
 10229 0032 3AD8     		bhi	.L778
 10230 0034 DFE804F0 		tbb	[pc, r4]
 10231              	.L772:
 10232 0038 0C       		.byte	(.L777-.L772)/2
 10233 0039 15       		.byte	(.L776-.L772)/2
 10234 003a 1E       		.byte	(.L775-.L772)/2
 10235 003b 27       		.byte	(.L774-.L772)/2
 10236 003c 30       		.byte	(.L773-.L772)/2
 10237 003d 03       		.byte	(.L771-.L772)/2
 10238              		.p2align 1
 10239              	.L771:
1714:src/xeq.c     **** 		break;
 10240              		.loc 1 1714 3 view .LVU2688
1714:src/xeq.c     **** 		break;
 10241              		.loc 1 1714 8 is_stmt 0 view .LVU2689
 10242 003e 3A46     		mov	r2, r7
 10243 0040 2B46     		mov	r3, r5
 10244 0042 FFF7FEFF 		bl	intMax
 10245              	.LVL734:
1714:src/xeq.c     **** 		break;
 10246              		.loc 1 1714 6 view .LVU2690
 10247 0046 C6E90001 		strd	r0, [r6]
1715:src/xeq.c     **** 	default:
 10248              		.loc 1 1715 3 is_stmt 1 view .LVU2691
1719:src/xeq.c     **** }
 10249              		.loc 1 1719 9 is_stmt 0 view .LVU2692
 10250 004a 0020     		movs	r0, #0
 10251              	.L768:
1720:src/xeq.c     **** 
 10252              		.loc 1 1720 1 view .LVU2693
 10253 004c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10254              	.LVL735:
 10255              	.L777:
1699:src/xeq.c     **** 		break;
 10256              		.loc 1 1699 3 is_stmt 1 view .LVU2694
1699:src/xeq.c     **** 		break;
 10257              		.loc 1 1699 8 is_stmt 0 view .LVU2695
 10258 0050 3A46     		mov	r2, r7
ARM GAS  /tmp/ccqED0AM.s 			page 325


 10259 0052 2B46     		mov	r3, r5
 10260 0054 FFF7FEFF 		bl	intAdd
 10261              	.LVL736:
1699:src/xeq.c     **** 		break;
 10262              		.loc 1 1699 6 view .LVU2696
 10263 0058 C6E90001 		strd	r0, [r6]
1700:src/xeq.c     **** 	case 2:
 10264              		.loc 1 1700 3 is_stmt 1 view .LVU2697
1719:src/xeq.c     **** }
 10265              		.loc 1 1719 9 is_stmt 0 view .LVU2698
 10266 005c 0020     		movs	r0, #0
1720:src/xeq.c     **** 
 10267              		.loc 1 1720 1 view .LVU2699
 10268 005e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10269              	.LVL737:
 10270              	.L776:
1702:src/xeq.c     **** 		break;
 10271              		.loc 1 1702 3 is_stmt 1 view .LVU2700
1702:src/xeq.c     **** 		break;
 10272              		.loc 1 1702 8 is_stmt 0 view .LVU2701
 10273 0062 3A46     		mov	r2, r7
 10274 0064 2B46     		mov	r3, r5
 10275 0066 FFF7FEFF 		bl	intSubtract
 10276              	.LVL738:
1702:src/xeq.c     **** 		break;
 10277              		.loc 1 1702 6 view .LVU2702
 10278 006a C6E90001 		strd	r0, [r6]
1703:src/xeq.c     **** 	case 3:
 10279              		.loc 1 1703 3 is_stmt 1 view .LVU2703
1719:src/xeq.c     **** }
 10280              		.loc 1 1719 9 is_stmt 0 view .LVU2704
 10281 006e 0020     		movs	r0, #0
1720:src/xeq.c     **** 
 10282              		.loc 1 1720 1 view .LVU2705
 10283 0070 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10284              	.LVL739:
 10285              	.L775:
1705:src/xeq.c     **** 		break;
 10286              		.loc 1 1705 3 is_stmt 1 view .LVU2706
1705:src/xeq.c     **** 		break;
 10287              		.loc 1 1705 8 is_stmt 0 view .LVU2707
 10288 0074 3A46     		mov	r2, r7
 10289 0076 2B46     		mov	r3, r5
 10290 0078 FFF7FEFF 		bl	intMultiply
 10291              	.LVL740:
1705:src/xeq.c     **** 		break;
 10292              		.loc 1 1705 6 view .LVU2708
 10293 007c C6E90001 		strd	r0, [r6]
1706:src/xeq.c     **** 	case 4:
 10294              		.loc 1 1706 3 is_stmt 1 view .LVU2709
1719:src/xeq.c     **** }
 10295              		.loc 1 1719 9 is_stmt 0 view .LVU2710
 10296 0080 0020     		movs	r0, #0
1720:src/xeq.c     **** 
 10297              		.loc 1 1720 1 view .LVU2711
 10298 0082 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10299              	.LVL741:
ARM GAS  /tmp/ccqED0AM.s 			page 326


 10300              	.L774:
1708:src/xeq.c     **** 		break;
 10301              		.loc 1 1708 3 is_stmt 1 view .LVU2712
1708:src/xeq.c     **** 		break;
 10302              		.loc 1 1708 8 is_stmt 0 view .LVU2713
 10303 0086 3A46     		mov	r2, r7
 10304 0088 2B46     		mov	r3, r5
 10305 008a FFF7FEFF 		bl	intDivide
 10306              	.LVL742:
1708:src/xeq.c     **** 		break;
 10307              		.loc 1 1708 6 view .LVU2714
 10308 008e C6E90001 		strd	r0, [r6]
1709:src/xeq.c     **** 	case 5:
 10309              		.loc 1 1709 3 is_stmt 1 view .LVU2715
1719:src/xeq.c     **** }
 10310              		.loc 1 1719 9 is_stmt 0 view .LVU2716
 10311 0092 0020     		movs	r0, #0
1720:src/xeq.c     **** 
 10312              		.loc 1 1720 1 view .LVU2717
 10313 0094 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10314              	.LVL743:
 10315              	.L773:
1711:src/xeq.c     **** 		break;
 10316              		.loc 1 1711 3 is_stmt 1 view .LVU2718
1711:src/xeq.c     **** 		break;
 10317              		.loc 1 1711 8 is_stmt 0 view .LVU2719
 10318 0098 3A46     		mov	r2, r7
 10319 009a 2B46     		mov	r3, r5
 10320 009c FFF7FEFF 		bl	intMin
 10321              	.LVL744:
1711:src/xeq.c     **** 		break;
 10322              		.loc 1 1711 6 view .LVU2720
 10323 00a0 C6E90001 		strd	r0, [r6]
1712:src/xeq.c     **** 	case 6:
 10324              		.loc 1 1712 3 is_stmt 1 view .LVU2721
1719:src/xeq.c     **** }
 10325              		.loc 1 1719 9 is_stmt 0 view .LVU2722
 10326 00a4 0020     		movs	r0, #0
1720:src/xeq.c     **** 
 10327              		.loc 1 1720 1 view .LVU2723
 10328 00a6 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10329              	.LVL745:
 10330              	.L778:
1719:src/xeq.c     **** }
 10331              		.loc 1 1719 9 view .LVU2724
 10332 00aa 0120     		movs	r0, #1
 10333              	.LVL746:
1719:src/xeq.c     **** }
 10334              		.loc 1 1719 9 view .LVU2725
 10335 00ac CEE7     		b	.L768
 10336              		.cfi_endproc
 10337              	.LFE116:
 10339 00ae 00BF     		.section	.text.incdec,"ax",%progbits
 10340              		.align	1
 10341              		.p2align 2,,3
 10342              		.syntax unified
 10343              		.thumb
ARM GAS  /tmp/ccqED0AM.s 			page 327


 10344              		.thumb_func
 10345              		.fpu fpv4-sp-d16
 10347              	incdec:
 10348              	.LVL747:
 10349              	.LFB193:
3401:src/xeq.c     **** 	if (is_intmode()) {
 10350              		.loc 1 3401 46 is_stmt 1 view -0
 10351              		.cfi_startproc
 10352              		@ args = 0, pretend = 0, frame = 80
 10353              		@ frame_needed = 0, uses_anonymous_args = 0
3402:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 10354              		.loc 1 3402 2 view .LVU2727
3402:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 10355              		.loc 1 3402 6 is_stmt 0 view .LVU2728
 10356 0000 244B     		ldr	r3, .L793
3401:src/xeq.c     **** 	if (is_intmode()) {
 10357              		.loc 1 3401 46 view .LVU2729
 10358 0002 70B5     		push	{r4, r5, r6, lr}
 10359              		.cfi_def_cfa_offset 16
 10360              		.cfi_offset 4, -16
 10361              		.cfi_offset 5, -12
 10362              		.cfi_offset 6, -8
 10363              		.cfi_offset 14, -4
3402:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 10364              		.loc 1 3402 6 view .LVU2730
 10365 0004 1B68     		ldr	r3, [r3]
 10366 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3402:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 10367              		.loc 1 3402 5 view .LVU2731
 10368 000a DB07     		lsls	r3, r3, #31
3401:src/xeq.c     **** 	if (is_intmode()) {
 10369              		.loc 1 3401 46 view .LVU2732
 10370 000c 94B0     		sub	sp, sp, #80
 10371              		.cfi_def_cfa_offset 96
3401:src/xeq.c     **** 	if (is_intmode()) {
 10372              		.loc 1 3401 46 view .LVU2733
 10373 000e 0D46     		mov	r5, r1
 10374 0010 0446     		mov	r4, r0
3402:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 10375              		.loc 1 3402 5 view .LVU2734
 10376 0012 1ED5     		bpl	.L784
 10377              	.LVL748:
 10378              	.LBB2129:
 10379              	.LBI2129:
3401:src/xeq.c     **** 	if (is_intmode()) {
 10380              		.loc 1 3401 12 is_stmt 1 view .LVU2735
 10381              	.LBB2130:
3403:src/xeq.c     **** 		int xs;
 10382              		.loc 1 3403 3 view .LVU2736
3403:src/xeq.c     **** 		int xs;
 10383              		.loc 1 3403 21 is_stmt 0 view .LVU2737
 10384 0014 FFF7FEFF 		bl	get_reg_n_int
 10385              	.LVL749:
3404:src/xeq.c     **** 		unsigned long long int xv;
 10386              		.loc 1 3404 3 is_stmt 1 view .LVU2738
3405:src/xeq.c     **** 
 10387              		.loc 1 3405 3 view .LVU2739
ARM GAS  /tmp/ccqED0AM.s 			page 328


3407:src/xeq.c     **** 			x = intAdd(x, 1LL);
 10388              		.loc 1 3407 3 view .LVU2740
3408:src/xeq.c     **** 		else
 10389              		.loc 1 3408 8 is_stmt 0 view .LVU2741
 10390 0018 0122     		movs	r2, #1
 10391 001a 0023     		movs	r3, #0
3407:src/xeq.c     **** 			x = intAdd(x, 1LL);
 10392              		.loc 1 3407 6 view .LVU2742
 10393 001c 002D     		cmp	r5, #0
 10394 001e 33D1     		bne	.L791
3410:src/xeq.c     **** 		set_reg_n_int(arg, x);
 10395              		.loc 1 3410 4 is_stmt 1 view .LVU2743
3410:src/xeq.c     **** 		set_reg_n_int(arg, x);
 10396              		.loc 1 3410 8 is_stmt 0 view .LVU2744
 10397 0020 FFF7FEFF 		bl	intSubtract
 10398              	.LVL750:
3410:src/xeq.c     **** 		set_reg_n_int(arg, x);
 10399              		.loc 1 3410 8 view .LVU2745
 10400 0024 0646     		mov	r6, r0
 10401 0026 0D46     		mov	r5, r1
 10402              	.LVL751:
 10403              	.L786:
3411:src/xeq.c     **** 
 10404              		.loc 1 3411 3 is_stmt 1 view .LVU2746
 10405              	.LBB2131:
 10406              	.LBB2132:
1423:src/xeq.c     **** }
 10407              		.loc 1 1423 8 is_stmt 0 view .LVU2747
 10408 0028 2046     		mov	r0, r4
 10409 002a CDE90A65 		strd	r6, r5, [sp, #40]
 10410              	.LVL752:
1423:src/xeq.c     **** }
 10411              		.loc 1 1423 8 view .LVU2748
 10412              	.LBE2132:
 10413              	.LBI2131:
1422:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 10414              		.loc 1 1422 6 is_stmt 1 view .LVU2749
 10415              	.LBB2133:
1423:src/xeq.c     **** }
 10416              		.loc 1 1423 2 view .LVU2750
1423:src/xeq.c     **** }
 10417              		.loc 1 1423 8 is_stmt 0 view .LVU2751
 10418 002e FFF7FEFF 		bl	get_reg_n
 10419              	.LVL753:
1423:src/xeq.c     **** }
 10420              		.loc 1 1423 2 view .LVU2752
 10421 0032 0AA9     		add	r1, sp, #40
 10422 0034 0822     		movs	r2, #8
 10423 0036 FFF7FEFF 		bl	xcopy
 10424              	.LVL754:
1423:src/xeq.c     **** }
 10425              		.loc 1 1423 2 view .LVU2753
 10426              	.LBE2133:
 10427              	.LBE2131:
3413:src/xeq.c     **** 		return xv != 0;
 10428              		.loc 1 3413 3 is_stmt 1 view .LVU2754
3413:src/xeq.c     **** 		return xv != 0;
ARM GAS  /tmp/ccqED0AM.s 			page 329


 10429              		.loc 1 3413 8 is_stmt 0 view .LVU2755
 10430 003a 0AAA     		add	r2, sp, #40
 10431 003c 3046     		mov	r0, r6
 10432 003e 2946     		mov	r1, r5
 10433 0040 FFF7FEFF 		bl	extract_value
 10434              	.LVL755:
3414:src/xeq.c     **** 	} else {
 10435              		.loc 1 3414 3 is_stmt 1 view .LVU2756
3414:src/xeq.c     **** 	} else {
 10436              		.loc 1 3414 13 is_stmt 0 view .LVU2757
 10437 0044 50EA0103 		orrs	r3, r0, r1
 10438 0048 14BF     		ite	ne
 10439 004a 0120     		movne	r0, #1
 10440              	.LVL756:
3414:src/xeq.c     **** 	} else {
 10441              		.loc 1 3414 13 view .LVU2758
 10442 004c 0020     		moveq	r0, #0
 10443              	.LVL757:
3414:src/xeq.c     **** 	} else {
 10444              		.loc 1 3414 13 view .LVU2759
 10445              	.LBE2130:
 10446              	.LBE2129:
3427:src/xeq.c     **** 
 10447              		.loc 1 3427 1 view .LVU2760
 10448 004e 14B0     		add	sp, sp, #80
 10449              		.cfi_remember_state
 10450              		.cfi_def_cfa_offset 16
 10451              		@ sp needed
 10452 0050 70BD     		pop	{r4, r5, r6, pc}
 10453              	.LVL758:
 10454              	.L784:
 10455              		.cfi_restore_state
 10456              	.LBB2135:
3416:src/xeq.c     **** 
 10457              		.loc 1 3416 3 is_stmt 1 view .LVU2761
3418:src/xeq.c     **** 		if (inc)
 10458              		.loc 1 3418 3 view .LVU2762
 10459 0052 01A8     		add	r0, sp, #4
 10460              	.LVL759:
3418:src/xeq.c     **** 		if (inc)
 10461              		.loc 1 3418 3 is_stmt 0 view .LVU2763
 10462 0054 2146     		mov	r1, r4
 10463              	.LVL760:
3418:src/xeq.c     **** 		if (inc)
 10464              		.loc 1 3418 3 view .LVU2764
 10465 0056 FFF7FEFF 		bl	getRegister
 10466              	.LVL761:
3419:src/xeq.c     **** 			dn_inc(&x);
 10467              		.loc 1 3419 3 is_stmt 1 view .LVU2765
3420:src/xeq.c     **** 		else
 10468              		.loc 1 3420 4 is_stmt 0 view .LVU2766
 10469 005a 01A8     		add	r0, sp, #4
3419:src/xeq.c     **** 			dn_inc(&x);
 10470              		.loc 1 3419 6 view .LVU2767
 10471 005c 8DB9     		cbnz	r5, .L792
3422:src/xeq.c     **** 		setRegister(arg, &x);
 10472              		.loc 1 3422 4 is_stmt 1 view .LVU2768
ARM GAS  /tmp/ccqED0AM.s 			page 330


 10473 005e FFF7FEFF 		bl	dn_dec
 10474              	.LVL762:
 10475              	.L789:
3423:src/xeq.c     **** 		decNumberTrunc(&y, &x);
 10476              		.loc 1 3423 3 view .LVU2769
 10477 0062 2046     		mov	r0, r4
 10478 0064 01A9     		add	r1, sp, #4
 10479 0066 FFF7FEFF 		bl	setRegister
 10480              	.LVL763:
3424:src/xeq.c     **** 		return ! dn_eq0(&y);
 10481              		.loc 1 3424 3 view .LVU2770
 10482 006a 01A9     		add	r1, sp, #4
 10483 006c 0AA8     		add	r0, sp, #40
 10484 006e FFF7FEFF 		bl	decNumberTrunc
 10485              	.LVL764:
3425:src/xeq.c     **** 	}
 10486              		.loc 1 3425 3 view .LVU2771
3425:src/xeq.c     **** 	}
 10487              		.loc 1 3425 12 is_stmt 0 view .LVU2772
 10488 0072 0AA8     		add	r0, sp, #40
 10489 0074 FFF7FEFF 		bl	dn_eq0
 10490              	.LVL765:
3425:src/xeq.c     **** 	}
 10491              		.loc 1 3425 10 view .LVU2773
 10492 0078 B0FA80F0 		clz	r0, r0
 10493 007c 4009     		lsrs	r0, r0, #5
 10494              	.LBE2135:
3427:src/xeq.c     **** 
 10495              		.loc 1 3427 1 view .LVU2774
 10496 007e 14B0     		add	sp, sp, #80
 10497              		.cfi_remember_state
 10498              		.cfi_def_cfa_offset 16
 10499              		@ sp needed
 10500 0080 70BD     		pop	{r4, r5, r6, pc}
 10501              	.LVL766:
 10502              	.L792:
 10503              		.cfi_restore_state
 10504              	.LBB2136:
3420:src/xeq.c     **** 		else
 10505              		.loc 1 3420 4 is_stmt 1 view .LVU2775
 10506 0082 FFF7FEFF 		bl	dn_inc
 10507              	.LVL767:
 10508 0086 ECE7     		b	.L789
 10509              	.LVL768:
 10510              	.L791:
3420:src/xeq.c     **** 		else
 10511              		.loc 1 3420 4 is_stmt 0 view .LVU2776
 10512              	.LBE2136:
 10513              	.LBB2137:
 10514              	.LBB2134:
3408:src/xeq.c     **** 		else
 10515              		.loc 1 3408 4 is_stmt 1 view .LVU2777
3408:src/xeq.c     **** 		else
 10516              		.loc 1 3408 8 is_stmt 0 view .LVU2778
 10517 0088 FFF7FEFF 		bl	intAdd
 10518              	.LVL769:
3408:src/xeq.c     **** 		else
ARM GAS  /tmp/ccqED0AM.s 			page 331


 10519              		.loc 1 3408 8 view .LVU2779
 10520 008c 0646     		mov	r6, r0
 10521 008e 0D46     		mov	r5, r1
 10522              	.LVL770:
3408:src/xeq.c     **** 		else
 10523              		.loc 1 3408 8 view .LVU2780
 10524 0090 CAE7     		b	.L786
 10525              	.L794:
 10526 0092 00BF     		.align	2
 10527              	.L793:
 10528 0094 00000000 		.word	main_ram
 10529              	.LBE2134:
 10530              	.LBE2137:
 10531              		.cfi_endproc
 10532              	.LFE193:
 10534              		.section	.text.set_reg_n_int,"ax",%progbits
 10535              		.align	1
 10536              		.p2align 2,,3
 10537              		.global	set_reg_n_int
 10538              		.syntax unified
 10539              		.thumb
 10540              		.thumb_func
 10541              		.fpu fpv4-sp-d16
 10543              	set_reg_n_int:
 10544              	.LVL771:
 10545              	.LFB95:
1422:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 10546              		.loc 1 1422 49 is_stmt 1 view -0
 10547              		.cfi_startproc
 10548              		@ args = 0, pretend = 0, frame = 8
 10549              		@ frame_needed = 0, uses_anonymous_args = 0
1423:src/xeq.c     **** }
 10550              		.loc 1 1423 2 view .LVU2782
1422:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 10551              		.loc 1 1422 49 is_stmt 0 view .LVU2783
 10552 0000 00B5     		push	{lr}
 10553              		.cfi_def_cfa_offset 4
 10554              		.cfi_offset 14, -4
 10555 0002 83B0     		sub	sp, sp, #12
 10556              		.cfi_def_cfa_offset 16
1422:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 10557              		.loc 1 1422 49 view .LVU2784
 10558 0004 CDE90023 		strd	r2, [sp]
1423:src/xeq.c     **** }
 10559              		.loc 1 1423 8 view .LVU2785
 10560 0008 FFF7FEFF 		bl	get_reg_n
 10561              	.LVL772:
1423:src/xeq.c     **** }
 10562              		.loc 1 1423 2 view .LVU2786
 10563 000c 0822     		movs	r2, #8
 10564 000e 6946     		mov	r1, sp
 10565 0010 FFF7FEFF 		bl	xcopy
 10566              	.LVL773:
1424:src/xeq.c     **** 
 10567              		.loc 1 1424 1 view .LVU2787
 10568 0014 03B0     		add	sp, sp, #12
 10569              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccqED0AM.s 			page 332


 10570              		@ sp needed
 10571 0016 5DF804FB 		ldr	pc, [sp], #4
 10572              		.cfi_endproc
 10573              	.LFE95:
 10575 001a 00BF     		.section	.text.get_reg_n_int_sgn,"ax",%progbits
 10576              		.align	1
 10577              		.p2align 2,,3
 10578              		.global	get_reg_n_int_sgn
 10579              		.syntax unified
 10580              		.thumb
 10581              		.thumb_func
 10582              		.fpu fpv4-sp-d16
 10584              	get_reg_n_int_sgn:
 10585              	.LVL774:
 10586              	.LFB96:
1428:src/xeq.c     **** 	if (is_intmode()) {
 10587              		.loc 1 1428 63 is_stmt 1 view -0
 10588              		.cfi_startproc
 10589              		@ args = 0, pretend = 0, frame = 40
 10590              		@ frame_needed = 0, uses_anonymous_args = 0
1429:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 10591              		.loc 1 1429 2 view .LVU2789
1429:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 10592              		.loc 1 1429 6 is_stmt 0 view .LVU2790
 10593 0000 0C4B     		ldr	r3, .L801
1428:src/xeq.c     **** 	if (is_intmode()) {
 10594              		.loc 1 1428 63 view .LVU2791
 10595 0002 10B5     		push	{r4, lr}
 10596              		.cfi_def_cfa_offset 8
 10597              		.cfi_offset 4, -8
 10598              		.cfi_offset 14, -4
1429:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 10599              		.loc 1 1429 6 view .LVU2792
 10600 0004 1B68     		ldr	r3, [r3]
 10601 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1429:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 10602              		.loc 1 1429 5 view .LVU2793
 10603 000a DB07     		lsls	r3, r3, #31
1428:src/xeq.c     **** 	if (is_intmode()) {
 10604              		.loc 1 1428 63 view .LVU2794
 10605 000c 8AB0     		sub	sp, sp, #40
 10606              		.cfi_def_cfa_offset 48
1428:src/xeq.c     **** 	if (is_intmode()) {
 10607              		.loc 1 1428 63 view .LVU2795
 10608 000e 0C46     		mov	r4, r1
1429:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 10609              		.loc 1 1429 5 view .LVU2796
 10610 0010 06D5     		bpl	.L798
 10611              	.LVL775:
 10612              	.LBB2142:
 10613              	.LBI2142:
1428:src/xeq.c     **** 	if (is_intmode()) {
 10614              		.loc 1 1428 24 is_stmt 1 view .LVU2797
 10615              	.LBB2143:
1430:src/xeq.c     **** 	} else {
 10616              		.loc 1 1430 3 view .LVU2798
1430:src/xeq.c     **** 	} else {
ARM GAS  /tmp/ccqED0AM.s 			page 333


 10617              		.loc 1 1430 10 is_stmt 0 view .LVU2799
 10618 0012 FFF7FEFF 		bl	get_reg_n_int
 10619              	.LVL776:
1430:src/xeq.c     **** 	} else {
 10620              		.loc 1 1430 10 view .LVU2800
 10621 0016 2246     		mov	r2, r4
 10622 0018 FFF7FEFF 		bl	extract_value
 10623              	.LVL777:
1430:src/xeq.c     **** 	} else {
 10624              		.loc 1 1430 10 view .LVU2801
 10625              	.LBE2143:
 10626              	.LBE2142:
1437:src/xeq.c     **** 
 10627              		.loc 1 1437 1 view .LVU2802
 10628 001c 0AB0     		add	sp, sp, #40
 10629              		.cfi_remember_state
 10630              		.cfi_def_cfa_offset 8
 10631              		@ sp needed
 10632 001e 10BD     		pop	{r4, pc}
 10633              	.LVL778:
 10634              	.L798:
 10635              		.cfi_restore_state
1437:src/xeq.c     **** 
 10636              		.loc 1 1437 1 view .LVU2803
 10637 0020 0146     		mov	r1, r0
 10638              	.LVL779:
 10639              	.LBB2144:
1432:src/xeq.c     **** 
 10640              		.loc 1 1432 3 is_stmt 1 view .LVU2804
1434:src/xeq.c     **** 		return dn_to_ull(&n, sgn);
 10641              		.loc 1 1434 3 view .LVU2805
 10642 0022 01A8     		add	r0, sp, #4
 10643              	.LVL780:
1434:src/xeq.c     **** 		return dn_to_ull(&n, sgn);
 10644              		.loc 1 1434 3 is_stmt 0 view .LVU2806
 10645 0024 FFF7FEFF 		bl	getRegister
 10646              	.LVL781:
1435:src/xeq.c     **** 	}
 10647              		.loc 1 1435 3 is_stmt 1 view .LVU2807
1435:src/xeq.c     **** 	}
 10648              		.loc 1 1435 10 is_stmt 0 view .LVU2808
 10649 0028 2146     		mov	r1, r4
 10650 002a 01A8     		add	r0, sp, #4
 10651 002c FFF7FEFF 		bl	dn_to_ull
 10652              	.LVL782:
 10653              	.LBE2144:
1437:src/xeq.c     **** 
 10654              		.loc 1 1437 1 view .LVU2809
 10655 0030 0AB0     		add	sp, sp, #40
 10656              		.cfi_def_cfa_offset 8
 10657              		@ sp needed
 10658 0032 10BD     		pop	{r4, pc}
 10659              	.LVL783:
 10660              	.L802:
1437:src/xeq.c     **** 
 10661              		.loc 1 1437 1 view .LVU2810
 10662              		.align	2
ARM GAS  /tmp/ccqED0AM.s 			page 334


 10663              	.L801:
 10664 0034 00000000 		.word	main_ram
 10665              		.cfi_endproc
 10666              	.LFE96:
 10668              		.section	.text.get_keycode_from_reg,"ax",%progbits
 10669              		.align	1
 10670              		.p2align 2,,3
 10671              		.syntax unified
 10672              		.thumb
 10673              		.thumb_func
 10674              		.fpu fpv4-sp-d16
 10676              	get_keycode_from_reg:
 10677              	.LVL784:
 10678              	.LFB140:
2061:src/xeq.c     **** 	int sgn;
 10679              		.loc 1 2061 1 is_stmt 1 view -0
 10680              		.cfi_startproc
 10681              		@ args = 0, pretend = 0, frame = 8
 10682              		@ frame_needed = 0, uses_anonymous_args = 0
2062:src/xeq.c     **** 	const int c = row_column_to_keycode((int) get_reg_n_int_sgn((int) n, &sgn));
 10683              		.loc 1 2062 2 view .LVU2812
2063:src/xeq.c     **** 	if ( c < 0 )
 10684              		.loc 1 2063 2 view .LVU2813
2061:src/xeq.c     **** 	int sgn;
 10685              		.loc 1 2061 1 is_stmt 0 view .LVU2814
 10686 0000 00B5     		push	{lr}
 10687              		.cfi_def_cfa_offset 4
 10688              		.cfi_offset 14, -4
 10689 0002 83B0     		sub	sp, sp, #12
 10690              		.cfi_def_cfa_offset 16
2063:src/xeq.c     **** 	if ( c < 0 )
 10691              		.loc 1 2063 44 view .LVU2815
 10692 0004 01A9     		add	r1, sp, #4
 10693 0006 FFF7FEFF 		bl	get_reg_n_int_sgn
 10694              	.LVL785:
2063:src/xeq.c     **** 	if ( c < 0 )
 10695              		.loc 1 2063 16 view .LVU2816
 10696 000a FFF7FEFF 		bl	row_column_to_keycode
 10697              	.LVL786:
2064:src/xeq.c     **** 		report_err(ERR_RANGE);
 10698              		.loc 1 2064 2 is_stmt 1 view .LVU2817
2064:src/xeq.c     **** 		report_err(ERR_RANGE);
 10699              		.loc 1 2064 5 is_stmt 0 view .LVU2818
 10700 000e 0028     		cmp	r0, #0
2064:src/xeq.c     **** 		report_err(ERR_RANGE);
 10701              		.loc 1 2064 5 view .LVU2819
 10702 0010 02DB     		blt	.L806
 10703              	.L803:
2067:src/xeq.c     **** 
 10704              		.loc 1 2067 1 view .LVU2820
 10705 0012 03B0     		add	sp, sp, #12
 10706              		.cfi_remember_state
 10707              		.cfi_def_cfa_offset 4
 10708              		@ sp needed
 10709 0014 5DF804FB 		ldr	pc, [sp], #4
 10710              	.L806:
 10711              		.cfi_restore_state
ARM GAS  /tmp/ccqED0AM.s 			page 335


 10712              	.LBB2151:
 10713              	.LBI2151:
2060:src/xeq.c     **** {
 10714              		.loc 1 2060 12 is_stmt 1 view .LVU2821
 10715              	.LVL787:
 10716              	.LBB2152:
2065:src/xeq.c     **** 	return c;
 10717              		.loc 1 2065 3 view .LVU2822
 10718              	.LBB2153:
 10719              	.LBI2153:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 10720              		.loc 1 546 5 view .LVU2823
 10721              	.LBB2154:
 547:src/xeq.c     **** 		Error = e;
 10722              		.loc 1 547 2 view .LVU2824
 547:src/xeq.c     **** 		Error = e;
 10723              		.loc 1 547 12 is_stmt 0 view .LVU2825
 10724 0018 044B     		ldr	r3, .L807
 547:src/xeq.c     **** 		Error = e;
 10725              		.loc 1 547 5 view .LVU2826
 10726 001a 1A68     		ldr	r2, [r3]
 10727 001c 002A     		cmp	r2, #0
 10728 001e F8D1     		bne	.L803
 10729              	.LVL788:
 10730              	.LBB2155:
 10731              	.LBI2155:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 10732              		.loc 1 546 5 is_stmt 1 view .LVU2827
 10733              	.LBB2156:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 10734              		.loc 1 548 3 view .LVU2828
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 10735              		.loc 1 548 9 is_stmt 0 view .LVU2829
 10736 0020 0822     		movs	r2, #8
 10737 0022 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 10738              		.loc 1 549 3 is_stmt 1 view .LVU2830
 10739              	.LVL789:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 10740              		.loc 1 549 3 is_stmt 0 view .LVU2831
 10741              	.LBE2156:
 10742              	.LBE2155:
 10743              	.LBE2154:
 10744              	.LBE2153:
 10745              	.LBE2152:
 10746              	.LBE2151:
2066:src/xeq.c     **** }
 10747              		.loc 1 2066 2 is_stmt 1 view .LVU2832
2067:src/xeq.c     **** 
 10748              		.loc 1 2067 1 is_stmt 0 view .LVU2833
 10749 0024 03B0     		add	sp, sp, #12
 10750              		.cfi_def_cfa_offset 4
 10751              		@ sp needed
 10752 0026 5DF804FB 		ldr	pc, [sp], #4
 10753              	.L808:
 10754 002a 00BF     		.align	2
 10755              	.L807:
ARM GAS  /tmp/ccqED0AM.s 			page 336


 10756 002c 00000000 		.word	Error
 10757              		.cfi_endproc
 10758              	.LFE140:
 10760              		.section	.text.getX_int,"ax",%progbits
 10761              		.align	1
 10762              		.p2align 2,,3
 10763              		.global	getX_int
 10764              		.syntax unified
 10765              		.thumb
 10766              		.thumb_func
 10767              		.fpu fpv4-sp-d16
 10769              	getX_int:
 10770              	.LFB97:
1442:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 10771              		.loc 1 1442 30 is_stmt 1 view -0
 10772              		.cfi_startproc
 10773              		@ args = 0, pretend = 0, frame = 0
 10774              		@ frame_needed = 0, uses_anonymous_args = 0
 10775              		@ link register save eliminated.
1443:src/xeq.c     **** }
 10776              		.loc 1 1443 2 view .LVU2835
1443:src/xeq.c     **** }
 10777              		.loc 1 1443 9 is_stmt 0 view .LVU2836
 10778 0000 6420     		movs	r0, #100
 10779 0002 FFF7FEBF 		b	get_reg_n_int
 10780              	.LVL790:
 10781              		.cfi_endproc
 10782              	.LFE97:
 10784 0006 00BF     		.section	.text.getX_int_sgn,"ax",%progbits
 10785              		.align	1
 10786              		.p2align 2,,3
 10787              		.global	getX_int_sgn
 10788              		.syntax unified
 10789              		.thumb
 10790              		.thumb_func
 10791              		.fpu fpv4-sp-d16
 10793              	getX_int_sgn:
 10794              	.LVL791:
 10795              	.LFB98:
1446:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 10796              		.loc 1 1446 47 is_stmt 1 view -0
 10797              		.cfi_startproc
 10798              		@ args = 0, pretend = 0, frame = 0
 10799              		@ frame_needed = 0, uses_anonymous_args = 0
 10800              		@ link register save eliminated.
1447:src/xeq.c     **** }
 10801              		.loc 1 1447 2 view .LVU2838
1446:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 10802              		.loc 1 1446 47 is_stmt 0 view .LVU2839
 10803 0000 0146     		mov	r1, r0
1447:src/xeq.c     **** }
 10804              		.loc 1 1447 9 view .LVU2840
 10805 0002 6420     		movs	r0, #100
 10806              	.LVL792:
1447:src/xeq.c     **** }
 10807              		.loc 1 1447 9 view .LVU2841
 10808 0004 FFF7FEBF 		b	get_reg_n_int_sgn
ARM GAS  /tmp/ccqED0AM.s 			page 337


 10809              	.LVL793:
1447:src/xeq.c     **** }
 10810              		.loc 1 1447 9 view .LVU2842
 10811              		.cfi_endproc
 10812              	.LFE98:
 10814              		.section	.text.set_reg_n_int_sgn,"ax",%progbits
 10815              		.align	1
 10816              		.p2align 2,,3
 10817              		.global	set_reg_n_int_sgn
 10818              		.syntax unified
 10819              		.thumb
 10820              		.thumb_func
 10821              		.fpu fpv4-sp-d16
 10823              	set_reg_n_int_sgn:
 10824              	.LVL794:
 10825              	.LFB100:
1467:src/xeq.c     **** 	if (is_intmode()) {
 10826              		.loc 1 1467 72 is_stmt 1 view -0
 10827              		.cfi_startproc
 10828              		@ args = 4, pretend = 0, frame = 40
 10829              		@ frame_needed = 0, uses_anonymous_args = 0
1468:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10830              		.loc 1 1468 2 view .LVU2844
1468:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10831              		.loc 1 1468 6 is_stmt 0 view .LVU2845
 10832 0000 1749     		ldr	r1, .L821
1467:src/xeq.c     **** 	if (is_intmode()) {
 10833              		.loc 1 1467 72 view .LVU2846
 10834 0002 30B5     		push	{r4, r5, lr}
 10835              		.cfi_def_cfa_offset 12
 10836              		.cfi_offset 4, -12
 10837              		.cfi_offset 5, -8
 10838              		.cfi_offset 14, -4
1468:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10839              		.loc 1 1468 6 view .LVU2847
 10840 0004 0968     		ldr	r1, [r1]
 10841 0006 91F8E857 		ldrb	r5, [r1, #2024]	@ zero_extendqisi2
1468:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10842              		.loc 1 1468 5 view .LVU2848
 10843 000a E907     		lsls	r1, r5, #31
1467:src/xeq.c     **** 	if (is_intmode()) {
 10844              		.loc 1 1467 72 view .LVU2849
 10845 000c 8BB0     		sub	sp, sp, #44
 10846              		.cfi_def_cfa_offset 56
1467:src/xeq.c     **** 	if (is_intmode()) {
 10847              		.loc 1 1467 72 view .LVU2850
 10848 000e 0446     		mov	r4, r0
1468:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10849              		.loc 1 1468 5 view .LVU2851
 10850 0010 11D5     		bpl	.L812
 10851              	.LVL795:
1468:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10852              		.loc 1 1468 5 view .LVU2852
 10853 0012 1046     		mov	r0, r2
 10854              	.LVL796:
1468:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10855              		.loc 1 1468 5 view .LVU2853
ARM GAS  /tmp/ccqED0AM.s 			page 338


 10856 0014 1946     		mov	r1, r3
 10857              	.LVL797:
 10858              	.LBB2163:
 10859              	.LBI2163:
1467:src/xeq.c     **** 	if (is_intmode()) {
 10860              		.loc 1 1467 6 is_stmt 1 view .LVU2854
 10861              	.LBB2164:
1469:src/xeq.c     **** 	} else {
 10862              		.loc 1 1469 3 view .LVU2855
 10863 0016 0E9A     		ldr	r2, [sp, #56]
 10864              	.LVL798:
1469:src/xeq.c     **** 	} else {
 10865              		.loc 1 1469 3 is_stmt 0 view .LVU2856
 10866 0018 FFF7FEFF 		bl	build_value
 10867              	.LVL799:
1469:src/xeq.c     **** 	} else {
 10868              		.loc 1 1469 3 view .LVU2857
 10869 001c 0B46     		mov	r3, r1
 10870 001e 0246     		mov	r2, r0
 10871              	.LBB2165:
 10872              	.LBB2166:
1423:src/xeq.c     **** }
 10873              		.loc 1 1423 8 view .LVU2858
 10874 0020 2046     		mov	r0, r4
 10875 0022 CDE90023 		strd	r2, [sp]
 10876              	.LVL800:
1423:src/xeq.c     **** }
 10877              		.loc 1 1423 8 view .LVU2859
 10878              	.LBE2166:
 10879              	.LBI2165:
1422:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 10880              		.loc 1 1422 6 is_stmt 1 view .LVU2860
 10881              	.LBB2167:
1423:src/xeq.c     **** }
 10882              		.loc 1 1423 2 view .LVU2861
1423:src/xeq.c     **** }
 10883              		.loc 1 1423 8 is_stmt 0 view .LVU2862
 10884 0026 FFF7FEFF 		bl	get_reg_n
 10885              	.LVL801:
1423:src/xeq.c     **** }
 10886              		.loc 1 1423 2 view .LVU2863
 10887 002a 0822     		movs	r2, #8
 10888 002c 6946     		mov	r1, sp
 10889 002e FFF7FEFF 		bl	xcopy
 10890              	.LVL802:
1423:src/xeq.c     **** }
 10891              		.loc 1 1423 2 view .LVU2864
 10892              	.LBE2167:
 10893              	.LBE2165:
 10894              	.LBE2164:
 10895              	.LBE2163:
1478:src/xeq.c     **** 
 10896              		.loc 1 1478 1 view .LVU2865
 10897 0032 0BB0     		add	sp, sp, #44
 10898              		.cfi_remember_state
 10899              		.cfi_def_cfa_offset 12
 10900              		@ sp needed
ARM GAS  /tmp/ccqED0AM.s 			page 339


 10901 0034 30BD     		pop	{r4, r5, pc}
 10902              	.LVL803:
 10903              	.L812:
 10904              		.cfi_restore_state
 10905              	.LBB2168:
1471:src/xeq.c     **** 
 10906              		.loc 1 1471 3 is_stmt 1 view .LVU2866
1473:src/xeq.c     **** 		if (sgn)
 10907              		.loc 1 1473 3 view .LVU2867
 10908 0036 6846     		mov	r0, sp
 10909              	.LVL804:
1473:src/xeq.c     **** 		if (sgn)
 10910              		.loc 1 1473 3 is_stmt 0 view .LVU2868
 10911 0038 FFF7FEFF 		bl	ullint_to_dn
 10912              	.LVL805:
1474:src/xeq.c     **** 			dn_minus(&t, &t);
 10913              		.loc 1 1474 3 is_stmt 1 view .LVU2869
1474:src/xeq.c     **** 			dn_minus(&t, &t);
 10914              		.loc 1 1474 6 is_stmt 0 view .LVU2870
 10915 003c 0E9B     		ldr	r3, [sp, #56]
 10916 003e 2BB9     		cbnz	r3, .L819
1476:src/xeq.c     **** 	}
 10917              		.loc 1 1476 3 is_stmt 1 view .LVU2871
 10918 0040 6946     		mov	r1, sp
 10919 0042 2046     		mov	r0, r4
 10920 0044 FFF7FEFF 		bl	setRegister
 10921              	.LVL806:
 10922              	.L820:
1476:src/xeq.c     **** 	}
 10923              		.loc 1 1476 3 is_stmt 0 view .LVU2872
 10924              	.LBE2168:
1478:src/xeq.c     **** 
 10925              		.loc 1 1478 1 view .LVU2873
 10926 0048 0BB0     		add	sp, sp, #44
 10927              		.cfi_remember_state
 10928              		.cfi_def_cfa_offset 12
 10929              		@ sp needed
 10930 004a 30BD     		pop	{r4, r5, pc}
 10931              	.LVL807:
 10932              	.L819:
 10933              		.cfi_restore_state
 10934              	.LBB2169:
1475:src/xeq.c     **** 		setRegister(index, &t);
 10935              		.loc 1 1475 4 is_stmt 1 view .LVU2874
 10936 004c 6946     		mov	r1, sp
 10937 004e 6846     		mov	r0, sp
 10938 0050 FFF7FEFF 		bl	dn_minus
 10939              	.LVL808:
1476:src/xeq.c     **** 	}
 10940              		.loc 1 1476 3 view .LVU2875
 10941 0054 6946     		mov	r1, sp
 10942 0056 2046     		mov	r0, r4
 10943 0058 FFF7FEFF 		bl	setRegister
 10944              	.LVL809:
 10945 005c F4E7     		b	.L820
 10946              	.L822:
 10947 005e 00BF     		.align	2
ARM GAS  /tmp/ccqED0AM.s 			page 340


 10948              	.L821:
 10949 0060 00000000 		.word	main_ram
 10950              	.LBE2169:
 10951              		.cfi_endproc
 10952              	.LFE100:
 10954              		.section	.text.op_roundingmode,"ax",%progbits
 10955              		.align	1
 10956              		.p2align 2,,3
 10957              		.global	op_roundingmode
 10958              		.syntax unified
 10959              		.thumb
 10960              		.thumb_func
 10961              		.fpu fpv4-sp-d16
 10963              	op_roundingmode:
 10964              	.LVL810:
 10965              	.LFB34:
 619:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 10966              		.loc 1 619 37 view -0
 10967              		.cfi_startproc
 10968              		@ args = 0, pretend = 0, frame = 0
 10969              		@ frame_needed = 0, uses_anonymous_args = 0
 620:src/xeq.c     **** }
 10970              		.loc 1 620 2 view .LVU2877
 10971              	.LBB2170:
 10972              	.LBI2170:
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 10973              		.loc 1 1509 6 view .LVU2878
 10974              	.LBB2171:
1510:src/xeq.c     **** }
 10975              		.loc 1 1510 2 view .LVU2879
 10976              	.LBE2171:
 10977              	.LBE2170:
 619:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 10978              		.loc 1 619 37 is_stmt 0 view .LVU2880
 10979 0000 00B5     		push	{lr}
 10980              		.cfi_def_cfa_offset 4
 10981              		.cfi_offset 14, -4
 620:src/xeq.c     **** }
 10982              		.loc 1 620 21 view .LVU2881
 10983 0002 084B     		ldr	r3, .L825
 10984              	.LVL811:
 620:src/xeq.c     **** }
 10985              		.loc 1 620 21 view .LVU2882
 10986 0004 1B68     		ldr	r3, [r3]
 10987              	.LVL812:
 620:src/xeq.c     **** }
 10988              		.loc 1 620 21 view .LVU2883
 10989 0006 93F8EB27 		ldrb	r2, [r3, #2027]	@ zero_extendqisi2
 619:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 10990              		.loc 1 619 37 view .LVU2884
 10991 000a 83B0     		sub	sp, sp, #12
 10992              		.cfi_def_cfa_offset 16
 10993              	.LBB2174:
 10994              	.LBB2172:
1510:src/xeq.c     **** }
 10995              		.loc 1 1510 2 view .LVU2885
 10996 000c 0021     		movs	r1, #0
ARM GAS  /tmp/ccqED0AM.s 			page 341


 10997              	.LBE2172:
 10998              	.LBE2174:
 620:src/xeq.c     **** }
 10999              		.loc 1 620 21 view .LVU2886
 11000 000e C2F30212 		ubfx	r2, r2, #4, #3
 11001              	.LBB2175:
 11002              	.LBB2173:
1510:src/xeq.c     **** }
 11003              		.loc 1 1510 2 view .LVU2887
 11004 0012 D2B2     		uxtb	r2, r2
 11005 0014 0023     		movs	r3, #0
 11006              	.LVL813:
1510:src/xeq.c     **** }
 11007              		.loc 1 1510 2 view .LVU2888
 11008 0016 0091     		str	r1, [sp]
 11009              	.LVL814:
1510:src/xeq.c     **** }
 11010              		.loc 1 1510 2 view .LVU2889
 11011 0018 6420     		movs	r0, #100
 11012              	.LVL815:
1510:src/xeq.c     **** }
 11013              		.loc 1 1510 2 view .LVU2890
 11014 001a FFF7FEFF 		bl	set_reg_n_int_sgn
 11015              	.LVL816:
1510:src/xeq.c     **** }
 11016              		.loc 1 1510 2 view .LVU2891
 11017              	.LBE2173:
 11018              	.LBE2175:
 621:src/xeq.c     **** 
 11019              		.loc 1 621 1 view .LVU2892
 11020 001e 03B0     		add	sp, sp, #12
 11021              		.cfi_def_cfa_offset 4
 11022              		@ sp needed
 11023 0020 5DF804FB 		ldr	pc, [sp], #4
 11024              	.L826:
 11025              		.align	2
 11026              	.L825:
 11027 0024 00000000 		.word	main_ram
 11028              		.cfi_endproc
 11029              	.LFE34:
 11031              		.section	.text.register_from_int,"ax",%progbits
 11032              		.align	1
 11033              		.p2align 2,,3
 11034              		.syntax unified
 11035              		.thumb
 11036              		.thumb_func
 11037              		.fpu fpv4-sp-d16
 11039              	register_from_int:
 11040              	.LVL817:
 11041              	.LFB101:
1485:src/xeq.c     **** 	int sgn;
 11042              		.loc 1 1485 69 is_stmt 1 view -0
 11043              		.cfi_startproc
 11044              		@ args = 0, pretend = 0, frame = 8
 11045              		@ frame_needed = 0, uses_anonymous_args = 0
1486:src/xeq.c     **** 	unsigned long long int val;
 11046              		.loc 1 1486 2 view .LVU2894
ARM GAS  /tmp/ccqED0AM.s 			page 342


1487:src/xeq.c     **** 	const int xin = XromFlags.xIN;
 11047              		.loc 1 1487 2 view .LVU2895
1488:src/xeq.c     **** 	
 11048              		.loc 1 1488 2 view .LVU2896
1485:src/xeq.c     **** 	int sgn;
 11049              		.loc 1 1485 69 is_stmt 0 view .LVU2897
 11050 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 11051              		.cfi_def_cfa_offset 28
 11052              		.cfi_offset 4, -28
 11053              		.cfi_offset 5, -24
 11054              		.cfi_offset 6, -20
 11055              		.cfi_offset 7, -16
 11056              		.cfi_offset 8, -12
 11057              		.cfi_offset 9, -8
 11058              		.cfi_offset 14, -4
1488:src/xeq.c     **** 	
 11059              		.loc 1 1488 27 view .LVU2898
 11060 0004 154C     		ldr	r4, .L833
 11061 0006 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
1485:src/xeq.c     **** 	int sgn;
 11062              		.loc 1 1485 69 view .LVU2899
 11063 0008 0546     		mov	r5, r0
 11064 000a 85B0     		sub	sp, sp, #20
 11065              		.cfi_def_cfa_offset 48
1485:src/xeq.c     **** 	int sgn;
 11066              		.loc 1 1485 69 view .LVU2900
 11067 000c 0846     		mov	r0, r1
 11068              	.LVL818:
1488:src/xeq.c     **** 	
 11069              		.loc 1 1488 27 view .LVU2901
 11070 000e DE09     		lsrs	r6, r3, #7
 11071              	.LVL819:
1490:src/xeq.c     **** 		XromFlags.xIN = 0;
 11072              		.loc 1 1490 2 is_stmt 1 view .LVU2902
1490:src/xeq.c     **** 		XromFlags.xIN = 0;
 11073              		.loc 1 1490 5 is_stmt 0 view .LVU2903
 11074 0010 12B1     		cbz	r2, .L828
1491:src/xeq.c     **** 	UState.intm = 1;
 11075              		.loc 1 1491 3 is_stmt 1 view .LVU2904
1491:src/xeq.c     **** 	UState.intm = 1;
 11076              		.loc 1 1491 17 is_stmt 0 view .LVU2905
 11077 0012 6FF3C713 		bfc	r3, #7, #1
 11078              	.LVL820:
1491:src/xeq.c     **** 	UState.intm = 1;
 11079              		.loc 1 1491 17 view .LVU2906
 11080 0016 6370     		strb	r3, [r4, #1]
 11081              	.LVL821:
 11082              	.L828:
1492:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11083              		.loc 1 1492 2 is_stmt 1 view .LVU2907
1492:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11084              		.loc 1 1492 14 is_stmt 0 view .LVU2908
 11085 0018 114F     		ldr	r7, .L833+4
 11086 001a 3A68     		ldr	r2, [r7]
 11087              	.LVL822:
1492:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11088              		.loc 1 1492 14 view .LVU2909
ARM GAS  /tmp/ccqED0AM.s 			page 343


 11089 001c 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
 11090 0020 43F00103 		orr	r3, r3, #1
 11091 0024 82F8E837 		strb	r3, [r2, #2024]
1493:src/xeq.c     **** 
 11092              		.loc 1 1493 2 is_stmt 1 view .LVU2910
1493:src/xeq.c     **** 
 11093              		.loc 1 1493 8 is_stmt 0 view .LVU2911
 11094 0028 03A9     		add	r1, sp, #12
 11095              	.LVL823:
1493:src/xeq.c     **** 
 11096              		.loc 1 1493 8 view .LVU2912
 11097 002a FFF7FEFF 		bl	get_reg_n_int_sgn
 11098              	.LVL824:
1495:src/xeq.c     **** 	UState.intm = 0;
 11099              		.loc 1 1495 16 view .LVU2913
 11100 002e 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
1496:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 11101              		.loc 1 1496 14 view .LVU2914
 11102 0030 3B68     		ldr	r3, [r7]
1495:src/xeq.c     **** 	UState.intm = 0;
 11103              		.loc 1 1495 16 view .LVU2915
 11104 0032 66F3C712 		bfi	r2, r6, #7, #1
 11105 0036 6270     		strb	r2, [r4, #1]
1493:src/xeq.c     **** 
 11106              		.loc 1 1493 8 view .LVU2916
 11107 0038 8946     		mov	r9, r1
1496:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 11108              		.loc 1 1496 14 view .LVU2917
 11109 003a 93F8E817 		ldrb	r1, [r3, #2024]	@ zero_extendqisi2
 11110 003e 6FF30001 		bfc	r1, #0, #1
 11111 0042 83F8E817 		strb	r1, [r3, #2024]
1497:src/xeq.c     **** }
 11112              		.loc 1 1497 2 view .LVU2918
 11113 0046 039B     		ldr	r3, [sp, #12]
 11114 0048 0093     		str	r3, [sp]
1493:src/xeq.c     **** 
 11115              		.loc 1 1493 8 view .LVU2919
 11116 004a 8046     		mov	r8, r0
 11117              	.LVL825:
1495:src/xeq.c     **** 	UState.intm = 0;
 11118              		.loc 1 1495 2 is_stmt 1 view .LVU2920
1496:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 11119              		.loc 1 1496 2 view .LVU2921
1497:src/xeq.c     **** }
 11120              		.loc 1 1497 2 view .LVU2922
 11121 004c 4246     		mov	r2, r8
 11122 004e 4B46     		mov	r3, r9
 11123 0050 2846     		mov	r0, r5
 11124 0052 FFF7FEFF 		bl	set_reg_n_int_sgn
 11125              	.LVL826:
1498:src/xeq.c     **** 
 11126              		.loc 1 1498 1 is_stmt 0 view .LVU2923
 11127 0056 05B0     		add	sp, sp, #20
 11128              		.cfi_def_cfa_offset 28
 11129              		@ sp needed
 11130 0058 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 11131              	.LVL827:
ARM GAS  /tmp/ccqED0AM.s 			page 344


 11132              	.L834:
1498:src/xeq.c     **** 
 11133              		.loc 1 1498 1 view .LVU2924
 11134              		.align	2
 11135              	.L833:
 11136 005c 00000000 		.word	XromParams
 11137 0060 00000000 		.word	main_ram
 11138              		.cfi_endproc
 11139              	.LFE101:
 11141              		.section	.text.int_from_register,"ax",%progbits
 11142              		.align	1
 11143              		.p2align 2,,3
 11144              		.syntax unified
 11145              		.thumb
 11146              		.thumb_func
 11147              		.fpu fpv4-sp-d16
 11149              	int_from_register:
 11150              	.LVL828:
 11151              	.LFB99:
1454:src/xeq.c     **** 	int sgn;
 11152              		.loc 1 1454 48 is_stmt 1 view -0
 11153              		.cfi_startproc
 11154              		@ args = 0, pretend = 0, frame = 8
 11155              		@ frame_needed = 0, uses_anonymous_args = 0
1455:src/xeq.c     **** 	unsigned long long int val;
 11156              		.loc 1 1455 2 view .LVU2926
1456:src/xeq.c     **** 	
 11157              		.loc 1 1456 2 view .LVU2927
1458:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11158              		.loc 1 1458 2 view .LVU2928
1454:src/xeq.c     **** 	int sgn;
 11159              		.loc 1 1454 48 is_stmt 0 view .LVU2929
 11160 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 11161              		.cfi_def_cfa_offset 20
 11162              		.cfi_offset 4, -20
 11163              		.cfi_offset 5, -16
 11164              		.cfi_offset 6, -12
 11165              		.cfi_offset 7, -8
 11166              		.cfi_offset 14, -4
1458:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11167              		.loc 1 1458 14 view .LVU2930
 11168 0002 104D     		ldr	r5, .L837
 11169 0004 2B68     		ldr	r3, [r5]
 11170 0006 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
1454:src/xeq.c     **** 	int sgn;
 11171              		.loc 1 1454 48 view .LVU2931
 11172 000a 85B0     		sub	sp, sp, #20
 11173              		.cfi_def_cfa_offset 40
1458:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11174              		.loc 1 1458 14 view .LVU2932
 11175 000c 6FF30002 		bfc	r2, #0, #1
1454:src/xeq.c     **** 	int sgn;
 11176              		.loc 1 1454 48 view .LVU2933
 11177 0010 0446     		mov	r4, r0
1458:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11178              		.loc 1 1458 14 view .LVU2934
 11179 0012 83F8E827 		strb	r2, [r3, #2024]
ARM GAS  /tmp/ccqED0AM.s 			page 345


1459:src/xeq.c     **** 
 11180              		.loc 1 1459 2 is_stmt 1 view .LVU2935
1459:src/xeq.c     **** 
 11181              		.loc 1 1459 8 is_stmt 0 view .LVU2936
 11182 0016 0846     		mov	r0, r1
 11183              	.LVL829:
1459:src/xeq.c     **** 
 11184              		.loc 1 1459 8 view .LVU2937
 11185 0018 03A9     		add	r1, sp, #12
 11186              	.LVL830:
1459:src/xeq.c     **** 
 11187              		.loc 1 1459 8 view .LVU2938
 11188 001a FFF7FEFF 		bl	get_reg_n_int_sgn
 11189              	.LVL831:
1459:src/xeq.c     **** 
 11190              		.loc 1 1459 8 view .LVU2939
 11191 001e 0F46     		mov	r7, r1
1461:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 11192              		.loc 1 1461 14 view .LVU2940
 11193 0020 2968     		ldr	r1, [r5]
 11194 0022 91F8E837 		ldrb	r3, [r1, #2024]	@ zero_extendqisi2
 11195 0026 43F00103 		orr	r3, r3, #1
 11196 002a 81F8E837 		strb	r3, [r1, #2024]
1462:src/xeq.c     **** }
 11197              		.loc 1 1462 2 view .LVU2941
 11198 002e 039B     		ldr	r3, [sp, #12]
 11199 0030 0093     		str	r3, [sp]
1459:src/xeq.c     **** 
 11200              		.loc 1 1459 8 view .LVU2942
 11201 0032 0646     		mov	r6, r0
 11202              	.LVL832:
1461:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 11203              		.loc 1 1461 2 is_stmt 1 view .LVU2943
1462:src/xeq.c     **** }
 11204              		.loc 1 1462 2 view .LVU2944
 11205 0034 3246     		mov	r2, r6
 11206 0036 2046     		mov	r0, r4
 11207 0038 3B46     		mov	r3, r7
 11208 003a FFF7FEFF 		bl	set_reg_n_int_sgn
 11209              	.LVL833:
1463:src/xeq.c     **** 
 11210              		.loc 1 1463 1 is_stmt 0 view .LVU2945
 11211 003e 05B0     		add	sp, sp, #20
 11212              		.cfi_def_cfa_offset 20
 11213              		@ sp needed
 11214 0040 F0BD     		pop	{r4, r5, r6, r7, pc}
 11215              	.LVL834:
 11216              	.L838:
1463:src/xeq.c     **** 
 11217              		.loc 1 1463 1 view .LVU2946
 11218 0042 00BF     		.align	2
 11219              	.L837:
 11220 0044 00000000 		.word	main_ram
 11221              		.cfi_endproc
 11222              	.LFE99:
 11224              		.section	.text.switch_to_int,"ax",%progbits
 11225              		.align	1
ARM GAS  /tmp/ccqED0AM.s 			page 346


 11226              		.p2align 2,,3
 11227              		.syntax unified
 11228              		.thumb
 11229              		.thumb_func
 11230              		.fpu fpv4-sp-d16
 11232              	switch_to_int:
 11233              	.LFB208:
3738:src/xeq.c     **** 	int i;
 11234              		.loc 1 3738 33 is_stmt 1 view -0
 11235              		.cfi_startproc
 11236              		@ args = 0, pretend = 0, frame = 40
 11237              		@ frame_needed = 0, uses_anonymous_args = 0
3739:src/xeq.c     **** 	int mask = StackRegMask[UState.stack_depth];
 11238              		.loc 1 3739 2 view .LVU2948
3740:src/xeq.c     **** 	const int dbl = is_dblmode();
 11239              		.loc 1 3740 2 view .LVU2949
3738:src/xeq.c     **** 	int i;
 11240              		.loc 1 3738 33 is_stmt 0 view .LVU2950
 11241 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 11242              		.cfi_def_cfa_offset 24
 11243              		.cfi_offset 4, -24
 11244              		.cfi_offset 5, -20
 11245              		.cfi_offset 6, -16
 11246              		.cfi_offset 7, -12
 11247              		.cfi_offset 8, -8
 11248              		.cfi_offset 14, -4
3740:src/xeq.c     **** 	const int dbl = is_dblmode();
 11249              		.loc 1 3740 26 view .LVU2951
 11250 0004 DFF87480 		ldr	r8, .L847+4
3740:src/xeq.c     **** 	const int dbl = is_dblmode();
 11251              		.loc 1 3740 25 view .LVU2952
 11252 0008 1B49     		ldr	r1, .L847
3740:src/xeq.c     **** 	const int dbl = is_dblmode();
 11253              		.loc 1 3740 26 view .LVU2953
 11254 000a D8F80020 		ldr	r2, [r8]
3740:src/xeq.c     **** 	const int dbl = is_dblmode();
 11255              		.loc 1 3740 32 view .LVU2954
 11256 000e 92F8EA37 		ldrb	r3, [r2, #2026]	@ zero_extendqisi2
 11257              	.LBB2176:
 11258              	.LBB2177:
1119:src/xeq.c     **** }
 11259              		.loc 1 1119 24 view .LVU2955
 11260 0012 B2F8E827 		ldrh	r2, [r2, #2024]
 11261              	.LBE2177:
 11262              	.LBE2176:
3740:src/xeq.c     **** 	const int dbl = is_dblmode();
 11263              		.loc 1 3740 32 view .LVU2956
 11264 0016 C3F3C003 		ubfx	r3, r3, #3, #1
 11265              	.LBB2181:
 11266              	.LBB2178:
1119:src/xeq.c     **** }
 11267              		.loc 1 1119 24 view .LVU2957
 11268 001a 44F20106 		movw	r6, #16385
 11269              	.LBE2178:
 11270              	.LBE2181:
3740:src/xeq.c     **** 	const int dbl = is_dblmode();
 11271              		.loc 1 3740 6 view .LVU2958
ARM GAS  /tmp/ccqED0AM.s 			page 347


 11272 001e 31F81350 		ldrh	r5, [r1, r3, lsl #1]
 11273              	.LVL835:
3741:src/xeq.c     **** 
 11274              		.loc 1 3741 2 is_stmt 1 view .LVU2959
 11275              	.LBB2182:
 11276              	.LBI2176:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 11277              		.loc 1 1118 5 view .LVU2960
 11278              	.LBB2179:
1119:src/xeq.c     **** }
 11279              		.loc 1 1119 2 view .LVU2961
 11280              	.LBE2179:
 11281              	.LBE2182:
3738:src/xeq.c     **** 	int i;
 11282              		.loc 1 3738 33 is_stmt 0 view .LVU2962
 11283 0022 8AB0     		sub	sp, sp, #40
 11284              		.cfi_def_cfa_offset 64
 11285              	.LBB2183:
 11286              	.LBB2180:
1119:src/xeq.c     **** }
 11287              		.loc 1 1119 24 view .LVU2963
 11288 0024 1640     		ands	r6, r6, r2
 11289              	.LVL836:
1119:src/xeq.c     **** }
 11290              		.loc 1 1119 24 view .LVU2964
 11291              	.LBE2180:
 11292              	.LBE2183:
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11293              		.loc 1 3743 2 is_stmt 1 view .LVU2965
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11294              		.loc 1 3743 21 view .LVU2966
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11295              		.loc 1 3743 9 is_stmt 0 view .LVU2967
 11296 0026 6F24     		movs	r4, #111
 11297 0028 07E0     		b	.L842
 11298              	.LVL837:
 11299              	.L840:
3748:src/xeq.c     **** 			// compress the other registers to save them while integer mode is active
 11300              		.loc 1 3748 11 view .LVU2968
 11301 002a B6F5804F 		cmp	r6, #16384
 11302 002e 12D0     		beq	.L845
 11303              	.L841:
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11304              		.loc 1 3743 36 is_stmt 1 discriminator 2 view .LVU2969
 11305 0030 013C     		subs	r4, r4, #1
 11306              	.LVL838:
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11307              		.loc 1 3743 2 is_stmt 0 discriminator 2 view .LVU2970
 11308 0032 632C     		cmp	r4, #99
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11309              		.loc 1 3743 46 discriminator 2 view .LVU2971
 11310 0034 4FEA4505 		lsl	r5, r5, #1
 11311              	.LVL839:
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11312              		.loc 1 3743 21 is_stmt 1 discriminator 2 view .LVU2972
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11313              		.loc 1 3743 2 is_stmt 0 discriminator 2 view .LVU2973
ARM GAS  /tmp/ccqED0AM.s 			page 348


 11314 0038 0AD0     		beq	.L846
 11315              	.LVL840:
 11316              	.L842:
3744:src/xeq.c     **** 			// register belongs to stack
 11317              		.loc 1 3744 3 is_stmt 1 view .LVU2974
3748:src/xeq.c     **** 			// compress the other registers to save them while integer mode is active
 11318              		.loc 1 3748 8 view .LVU2975
3744:src/xeq.c     **** 			// register belongs to stack
 11319              		.loc 1 3744 6 is_stmt 0 view .LVU2976
 11320 003a 2B05     		lsls	r3, r5, #20
 11321 003c F5D5     		bpl	.L840
3746:src/xeq.c     **** 		}
 11322              		.loc 1 3746 4 is_stmt 1 view .LVU2977
 11323 003e 2146     		mov	r1, r4
 11324 0040 2046     		mov	r0, r4
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11325              		.loc 1 3743 36 is_stmt 0 view .LVU2978
 11326 0042 013C     		subs	r4, r4, #1
 11327              	.LVL841:
3746:src/xeq.c     **** 		}
 11328              		.loc 1 3746 4 view .LVU2979
 11329 0044 FFF7FEFF 		bl	int_from_register
 11330              	.LVL842:
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11331              		.loc 1 3743 36 is_stmt 1 view .LVU2980
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11332              		.loc 1 3743 2 is_stmt 0 view .LVU2981
 11333 0048 632C     		cmp	r4, #99
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11334              		.loc 1 3743 46 view .LVU2982
 11335 004a 4FEA4505 		lsl	r5, r5, #1
 11336              	.LVL843:
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11337              		.loc 1 3743 21 is_stmt 1 view .LVU2983
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11338              		.loc 1 3743 2 is_stmt 0 view .LVU2984
 11339 004e F4D1     		bne	.L842
 11340              	.L846:
3753:src/xeq.c     **** 
 11341              		.loc 1 3753 1 view .LVU2985
 11342 0050 0AB0     		add	sp, sp, #40
 11343              		.cfi_remember_state
 11344              		.cfi_def_cfa_offset 24
 11345              		@ sp needed
 11346 0052 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 11347              	.LVL844:
 11348              	.L845:
 11349              		.cfi_restore_state
3750:src/xeq.c     **** 		}
 11350              		.loc 1 3750 4 is_stmt 1 view .LVU2986
3750:src/xeq.c     **** 		}
 11351              		.loc 1 3750 26 is_stmt 0 view .LVU2987
 11352 0056 D8F80030 		ldr	r3, [r8]
3750:src/xeq.c     **** 		}
 11353              		.loc 1 3750 38 view .LVU2988
 11354 005a 2046     		mov	r0, r4
3750:src/xeq.c     **** 		}
ARM GAS  /tmp/ccqED0AM.s 			page 349


 11355              		.loc 1 3750 26 view .LVU2989
 11356 005c 03F22C43 		addw	r3, r3, #1068
3750:src/xeq.c     **** 		}
 11357              		.loc 1 3750 4 view .LVU2990
 11358 0060 03EBC407 		add	r7, r3, r4, lsl #3
3750:src/xeq.c     **** 		}
 11359              		.loc 1 3750 38 view .LVU2991
 11360 0064 FFF7FEFF 		bl	get_reg_n
 11361              	.LVL845:
 11362              	.LBB2184:
 11363              	.LBI2184:
 648:src/xeq.c     **** 	decNumber temp;
 11364              		.loc 1 648 6 is_stmt 1 view .LVU2992
 11365              	.LBB2185:
 649:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 11366              		.loc 1 649 2 view .LVU2993
 650:src/xeq.c     **** }
 11367              		.loc 1 650 2 view .LVU2994
 650:src/xeq.c     **** }
 11368              		.loc 1 650 24 is_stmt 0 view .LVU2995
 11369 0068 01A9     		add	r1, sp, #4
 11370 006a FFF7FEFF 		bl	decimal128ToNumber
 11371              	.LVL846:
 650:src/xeq.c     **** }
 11372              		.loc 1 650 24 view .LVU2996
 11373 006e 0146     		mov	r1, r0
 650:src/xeq.c     **** }
 11374              		.loc 1 650 2 view .LVU2997
 11375 0070 3846     		mov	r0, r7
 11376 0072 FFF7FEFF 		bl	packed_from_number
 11377              	.LVL847:
 651:src/xeq.c     **** 
 11378              		.loc 1 651 1 view .LVU2998
 11379 0076 DBE7     		b	.L841
 11380              	.L848:
 11381              		.align	2
 11382              	.L847:
 11383 0078 00000000 		.word	.LANCHOR3
 11384 007c 00000000 		.word	main_ram
 11385              	.LBE2185:
 11386              	.LBE2184:
 11387              		.cfi_endproc
 11388              	.LFE208:
 11390              		.section	.text.process_cmdline.part.0,"ax",%progbits
 11391              		.align	1
 11392              		.p2align 2,,3
 11393              		.syntax unified
 11394              		.thumb
 11395              		.thumb_func
 11396              		.fpu fpv4-sp-d16
 11398              	process_cmdline.part.0:
 11399              	.LFB289:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 11400              		.loc 1 1226 6 is_stmt 1 view -0
 11401              		.cfi_startproc
 11402              		@ args = 0, pretend = 0, frame = 168
 11403              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccqED0AM.s 			page 350


 11404              	.LBB2208:
1230:src/xeq.c     **** 		const unsigned int cmdlinedot = CmdLineDot;
 11405              		.loc 1 1230 3 view .LVU3000
 11406              	.LBE2208:
1221:src/xeq.c     **** }
 11407              		.loc 1 1221 2 view .LVU3001
 11408              	.LVL848:
 11409              	.LBB2252:
1231:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11410              		.loc 1 1231 3 view .LVU3002
 11411              	.LBE2252:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 11412              		.loc 1 1226 6 is_stmt 0 view .LVU3003
 11413 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 11414              		.cfi_def_cfa_offset 32
 11415              		.cfi_offset 4, -32
 11416              		.cfi_offset 5, -28
 11417              		.cfi_offset 6, -24
 11418              		.cfi_offset 7, -20
 11419              		.cfi_offset 8, -16
 11420              		.cfi_offset 9, -12
 11421              		.cfi_offset 10, -8
 11422              		.cfi_offset 14, -4
 11423              	.LBB2253:
1231:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11424              		.loc 1 1231 35 view .LVU3004
 11425 0004 8D4C     		ldr	r4, .L888
1241:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11426              		.loc 1 1241 7 view .LVU3005
 11427 0006 DFF84482 		ldr	r8, .L888+16
1231:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11428              		.loc 1 1231 22 view .LVU3006
 11429 000a A57F     		ldrb	r5, [r4, #30]	@ zero_extendqisi2
 11430              	.LVL849:
1233:src/xeq.c     **** #else
 11431              		.loc 1 1233 3 is_stmt 1 view .LVU3007
1238:src/xeq.c     **** 
 11432              		.loc 1 1238 3 view .LVU3008
 11433              	.LBE2253:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 11434              		.loc 1 1226 6 is_stmt 0 view .LVU3009
 11435 000c ACB0     		sub	sp, sp, #176
 11436              		.cfi_def_cfa_offset 208
 11437              	.LBB2254:
1238:src/xeq.c     **** 
 11438              		.loc 1 1238 3 view .LVU3010
 11439 000e 04F12001 		add	r1, r4, #32
 11440 0012 1422     		movs	r2, #20
 11441 0014 02A8     		add	r0, sp, #8
 11442 0016 FFF7FEFF 		bl	xcopy
 11443              	.LVL850:
1240:src/xeq.c     **** 		if (!is_intmode()) {
 11444              		.loc 1 1240 3 is_stmt 1 view .LVU3011
1241:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11445              		.loc 1 1241 7 is_stmt 0 view .LVU3012
 11446 001a D8F80020 		ldr	r2, [r8]
1240:src/xeq.c     **** 		if (!is_intmode()) {
ARM GAS  /tmp/ccqED0AM.s 			page 351


 11447              		.loc 1 1240 11 view .LVU3013
 11448 001e 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
1241:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11449              		.loc 1 1241 7 view .LVU3014
 11450 0020 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
1240:src/xeq.c     **** 		if (!is_intmode()) {
 11451              		.loc 1 1240 26 view .LVU3015
 11452 0024 2CA9     		add	r1, sp, #176
 11453 0026 1944     		add	r1, r1, r3
 11454 0028 0020     		movs	r0, #0
1241:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11455              		.loc 1 1241 6 view .LVU3016
 11456 002a 12F00102 		ands	r2, r2, #1
1240:src/xeq.c     **** 		if (!is_intmode()) {
 11457              		.loc 1 1240 26 view .LVU3017
 11458 002e 01F8A80C 		strb	r0, [r1, #-168]
1241:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11459              		.loc 1 1241 3 is_stmt 1 view .LVU3018
1241:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11460              		.loc 1 1241 6 is_stmt 0 view .LVU3019
 11461 0032 16D1     		bne	.L851
1243:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11462              		.loc 1 1243 4 is_stmt 1 view .LVU3020
1243:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11463              		.loc 1 1243 15 is_stmt 0 view .LVU3021
 11464 0034 2CA9     		add	r1, sp, #176
1243:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11465              		.loc 1 1243 29 view .LVU3022
 11466 0036 013B     		subs	r3, r3, #1
1243:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11467              		.loc 1 1243 15 view .LVU3023
 11468 0038 0B44     		add	r3, r3, r1
1243:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11469              		.loc 1 1243 40 view .LVU3024
 11470 003a 13F8A81C 		ldrb	r1, [r3, #-168]	@ zero_extendqisi2
1243:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11471              		.loc 1 1243 7 view .LVU3025
 11472 003e 4439     		subs	r1, r1, #68
 11473 0040 0129     		cmp	r1, #1
 11474 0042 40F28B80 		bls	.L879
1245:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
 11475              		.loc 1 1245 9 is_stmt 1 view .LVU3026
1245:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
 11476              		.loc 1 1245 21 is_stmt 0 view .LVU3027
 11477 0046 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
1245:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
 11478              		.loc 1 1245 20 view .LVU3028
 11479 0048 2CAB     		add	r3, sp, #176
 11480 004a 1344     		add	r3, r3, r2
1245:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
 11481              		.loc 1 1245 12 view .LVU3029
 11482 004c 13F8A83C 		ldrb	r3, [r3, #-168]	@ zero_extendqisi2
 11483 0050 442B     		cmp	r3, #68
 11484 0052 00F0D080 		beq	.L880
 11485              	.L853:
1256:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
 11486              		.loc 1 1256 4 is_stmt 1 view .LVU3030
ARM GAS  /tmp/ccqED0AM.s 			page 352


1256:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
 11487              		.loc 1 1256 7 is_stmt 0 view .LVU3031
 11488 0056 002A     		cmp	r2, #0
 11489 0058 40F08680 		bne	.L854
 11490              	.L885:
1261:src/xeq.c     **** #endif
 11491              		.loc 1 1261 8 view .LVU3032
 11492 005c 012D     		cmp	r5, #1
 11493 005e 00F08380 		beq	.L854
 11494              	.L851:
1266:src/xeq.c     **** 		lift_if_enabled();
 11495              		.loc 1 1266 3 is_stmt 1 view .LVU3033
 11496              	.LBB2209:
 11497              	.LBB2210:
 11498              	.LBB2211:
 11499              	.LBB2212:
 744:src/xeq.c     **** }
 11500              		.loc 1 744 15 is_stmt 0 view .LVU3034
 11501 0062 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11502              	.LBE2212:
 11503              	.LBE2211:
 11504              	.LBE2210:
 11505              	.LBE2209:
1266:src/xeq.c     **** 		lift_if_enabled();
 11506              		.loc 1 1266 17 view .LVU3035
 11507 0064 0022     		movs	r2, #0
 11508              	.LBB2224:
 11509              	.LBB2219:
 748:src/xeq.c     **** 		lift();
 11510              		.loc 1 748 5 view .LVU3036
 11511 0066 5B06     		lsls	r3, r3, #25
 11512              	.LBE2219:
 11513              	.LBE2224:
1266:src/xeq.c     **** 		lift_if_enabled();
 11514              		.loc 1 1266 17 view .LVU3037
 11515 0068 2277     		strb	r2, [r4, #28]
1267:src/xeq.c     **** 		set_lift();
 11516              		.loc 1 1267 3 is_stmt 1 view .LVU3038
 11517              	.LBB2225:
 11518              	.LBI2209:
 747:src/xeq.c     **** 	if (get_lift())
 11519              		.loc 1 747 6 view .LVU3039
 11520              	.LBB2220:
 748:src/xeq.c     **** 		lift();
 11521              		.loc 1 748 2 view .LVU3040
 11522              	.LBB2216:
 11523              	.LBI2211:
 743:src/xeq.c     **** 	return State2.state_lift;
 11524              		.loc 1 743 12 view .LVU3041
 11525              	.LBB2213:
 744:src/xeq.c     **** }
 11526              		.loc 1 744 2 view .LVU3042
 11527              	.LBE2213:
 11528              	.LBE2216:
 748:src/xeq.c     **** 		lift();
 11529              		.loc 1 748 5 is_stmt 0 view .LVU3043
 11530 006a 00F18B80 		bmi	.L881
ARM GAS  /tmp/ccqED0AM.s 			page 353


 11531              	.L856:
 11532              	.LBE2220:
 11533              	.LBE2225:
1268:src/xeq.c     **** 		CmdLineDot = 0;
 11534              		.loc 1 1268 3 is_stmt 1 view .LVU3044
 11535              	.LBB2226:
 11536              	.LBI2226:
 767:src/xeq.c     ****     State2.state_lift = 1;
 11537              		.loc 1 767 6 view .LVU3045
 11538              	.LBB2227:
 768:src/xeq.c     **** }
 11539              		.loc 1 768 5 view .LVU3046
 768:src/xeq.c     **** }
 11540              		.loc 1 768 23 is_stmt 0 view .LVU3047
 11541 006e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11542              	.LBE2227:
 11543              	.LBE2226:
1271:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11544              		.loc 1 1271 7 view .LVU3048
 11545 0070 D8F80010 		ldr	r1, [r8]
 11546              	.LBB2229:
 11547              	.LBB2228:
 768:src/xeq.c     **** }
 11548              		.loc 1 768 23 view .LVU3049
 11549 0074 43F04003 		orr	r3, r3, #64
 11550 0078 E375     		strb	r3, [r4, #23]
 11551              	.LBE2228:
 11552              	.LBE2229:
1269:src/xeq.c     **** 		CmdLineEex = 0;
 11553              		.loc 1 1269 3 is_stmt 1 view .LVU3050
1271:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11554              		.loc 1 1271 7 is_stmt 0 view .LVU3051
 11555 007a 91F8E837 		ldrb	r3, [r1, #2024]	@ zero_extendqisi2
1269:src/xeq.c     **** 		CmdLineEex = 0;
 11556              		.loc 1 1269 14 view .LVU3052
 11557 007e 0022     		movs	r2, #0
1271:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11558              		.loc 1 1271 6 view .LVU3053
 11559 0080 13F00103 		ands	r3, r3, #1
1269:src/xeq.c     **** 		CmdLineEex = 0;
 11560              		.loc 1 1269 14 view .LVU3054
 11561 0084 A277     		strb	r2, [r4, #30]
1270:src/xeq.c     **** 		if (is_intmode()) {
 11562              		.loc 1 1270 3 is_stmt 1 view .LVU3055
1270:src/xeq.c     **** 		if (is_intmode()) {
 11563              		.loc 1 1270 14 is_stmt 0 view .LVU3056
 11564 0086 6277     		strb	r2, [r4, #29]
1271:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11565              		.loc 1 1271 3 is_stmt 1 view .LVU3057
1271:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11566              		.loc 1 1271 6 is_stmt 0 view .LVU3058
 11567 0088 7FD1     		bne	.L882
1275:src/xeq.c     **** 			char *d0, *d1, *d2;
 11568              		.loc 1 1275 10 is_stmt 1 view .LVU3059
1275:src/xeq.c     **** 			char *d0, *d1, *d2;
 11569              		.loc 1 1275 13 is_stmt 0 view .LVU3060
 11570 008a 022D     		cmp	r5, #2
ARM GAS  /tmp/ccqED0AM.s 			page 354


 11571 008c 4CD1     		bne	.L863
 11572              	.LBB2230:
1276:src/xeq.c     **** 			int neg;
 11573              		.loc 1 1276 4 is_stmt 1 view .LVU3061
1277:src/xeq.c     **** 
 11574              		.loc 1 1277 4 view .LVU3062
1279:src/xeq.c     **** 				return;
 11575              		.loc 1 1279 4 view .LVU3063
1282:src/xeq.c     **** #endif
 11576              		.loc 1 1282 4 view .LVU3064
1282:src/xeq.c     **** #endif
 11577              		.loc 1 1282 17 is_stmt 0 view .LVU3065
 11578 008e 91F8E627 		ldrb	r2, [r1, #2022]	@ zero_extendqisi2
 11579 0092 42F02002 		orr	r2, r2, #32
 11580 0096 81F8E627 		strb	r2, [r1, #2022]
1284:src/xeq.c     **** 				neg = 1;
 11581              		.loc 1 1284 4 is_stmt 1 view .LVU3066
1284:src/xeq.c     **** 				neg = 1;
 11582              		.loc 1 1284 7 is_stmt 0 view .LVU3067
 11583 009a 9DF80820 		ldrb	r2, [sp, #8]	@ zero_extendqisi2
 11584 009e 2D2A     		cmp	r2, #45
1289:src/xeq.c     **** 			}
 11585              		.loc 1 1289 8 view .LVU3068
 11586 00a0 14BF     		ite	ne
 11587 00a2 02AD     		addne	r5, sp, #8
 11588              	.LVL851:
1286:src/xeq.c     **** 			} else {
 11589              		.loc 1 1286 8 view .LVU3069
 11590 00a4 0DF10905 		addeq	r5, sp, #9
1291:src/xeq.c     **** 			*d1++ = '\0';
 11591              		.loc 1 1291 9 view .LVU3070
 11592 00a8 4FF02E01 		mov	r1, #46
 11593 00ac 2846     		mov	r0, r5
1288:src/xeq.c     **** 				d0 = cmdline;
 11594              		.loc 1 1288 9 view .LVU3071
 11595 00ae 14BF     		ite	ne
 11596 00b0 1C46     		movne	r4, r3
1285:src/xeq.c     **** 				d0 = cmdline+1;
 11597              		.loc 1 1285 9 view .LVU3072
 11598 00b2 0124     		moveq	r4, #1
 11599              	.LVL852:
1291:src/xeq.c     **** 			*d1++ = '\0';
 11600              		.loc 1 1291 4 is_stmt 1 view .LVU3073
1291:src/xeq.c     **** 			*d1++ = '\0';
 11601              		.loc 1 1291 9 is_stmt 0 view .LVU3074
 11602 00b4 FFF7FEFF 		bl	find_char
 11603              	.LVL853:
1292:src/xeq.c     **** 			d2 = find_char(d1, '.');
 11604              		.loc 1 1292 4 is_stmt 1 view .LVU3075
1292:src/xeq.c     **** 			d2 = find_char(d1, '.');
 11605              		.loc 1 1292 10 is_stmt 0 view .LVU3076
 11606 00b8 8146     		mov	r9, r0
 11607 00ba 4FF0000A 		mov	r10, #0
1292:src/xeq.c     **** 			d2 = find_char(d1, '.');
 11608              		.loc 1 1292 7 view .LVU3077
 11609 00be 461C     		adds	r6, r0, #1
 11610              	.LVL854:
ARM GAS  /tmp/ccqED0AM.s 			page 355


1292:src/xeq.c     **** 			d2 = find_char(d1, '.');
 11611              		.loc 1 1292 10 view .LVU3078
 11612 00c0 09F802AB 		strb	r10, [r9], #2
1293:src/xeq.c     **** 			*d2++ = '\0';
 11613              		.loc 1 1293 4 is_stmt 1 view .LVU3079
1293:src/xeq.c     **** 			*d2++ = '\0';
 11614              		.loc 1 1293 9 is_stmt 0 view .LVU3080
 11615 00c4 2E21     		movs	r1, #46
 11616 00c6 3046     		mov	r0, r6
 11617 00c8 FFF7FEFF 		bl	find_char
 11618              	.LVL855:
1294:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
 11619              		.loc 1 1294 4 is_stmt 1 view .LVU3081
1294:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
 11620              		.loc 1 1294 7 is_stmt 0 view .LVU3082
 11621 00cc 0746     		mov	r7, r0
 11622              	.LVL856:
1295:src/xeq.c     **** 			decNumberFromString(&x, d0, &Ctx);
 11623              		.loc 1 1295 4 view .LVU3083
 11624 00ce 5C4A     		ldr	r2, .L888+4
1294:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
 11625              		.loc 1 1294 10 view .LVU3084
 11626 00d0 07F801AB 		strb	r10, [r7], #1
 11627              	.LVL857:
1295:src/xeq.c     **** 			decNumberFromString(&x, d0, &Ctx);
 11628              		.loc 1 1295 4 is_stmt 1 view .LVU3085
 11629 00d4 11A8     		add	r0, sp, #68
 11630 00d6 3946     		mov	r1, r7
 11631 00d8 FFF7FEFF 		bl	decNumberFromString
 11632              	.LVL858:
1296:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 11633              		.loc 1 1296 4 view .LVU3086
 11634 00dc 2946     		mov	r1, r5
 11635 00de 584A     		ldr	r2, .L888+4
 11636 00e0 1AA8     		add	r0, sp, #104
 11637 00e2 FFF7FEFF 		bl	decNumberFromString
 11638              	.LVL859:
1298:src/xeq.c     **** 				decNumberCopy(&a, &x); // put x (integer part) into a (numerator) ...
 11639              		.loc 1 1298 4 view .LVU3087
1298:src/xeq.c     **** 				decNumberCopy(&a, &x); // put x (integer part) into a (numerator) ...
 11640              		.loc 1 1298 7 is_stmt 0 view .LVU3088
 11641 00e6 4F45     		cmp	r7, r9
1299:src/xeq.c     **** 				decNumberZero(&x); // and zero x
 11642              		.loc 1 1299 5 view .LVU3089
 11643 00e8 08AD     		add	r5, sp, #32
 11644              	.LVL860:
1298:src/xeq.c     **** 				decNumberCopy(&a, &x); // put x (integer part) into a (numerator) ...
 11645              		.loc 1 1298 7 view .LVU3090
 11646 00ea 00F09780 		beq	.L883
1308:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 16) && defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 11647              		.loc 1 1308 5 is_stmt 1 view .LVU3091
 11648 00ee 544A     		ldr	r2, .L888+4
 11649 00f0 3146     		mov	r1, r6
 11650 00f2 2846     		mov	r0, r5
 11651 00f4 FFF7FEFF 		bl	decNumberFromString
 11652              	.LVL861:
1310:src/xeq.c     **** #endif
ARM GAS  /tmp/ccqED0AM.s 			page 356


 11653              		.loc 1 1310 5 view .LVU3092
1310:src/xeq.c     **** #endif
 11654              		.loc 1 1310 25 is_stmt 0 view .LVU3093
 11655 00f8 D8F80030 		ldr	r3, [r8]
 11656 00fc 93F8E627 		ldrb	r2, [r3, #2022]	@ zero_extendqisi2
 11657 0100 6AF30412 		bfi	r2, r10, #4, #1
 11658 0104 83F8E627 		strb	r2, [r3, #2022]
 11659              	.L866:
1313:src/xeq.c     **** #ifdef IGNORE_INVALID_FRACTIONS
 11660              		.loc 1 1313 4 is_stmt 1 view .LVU3094
 11661 0108 11AA     		add	r2, sp, #68
 11662 010a 2946     		mov	r1, r5
 11663 010c 23A8     		add	r0, sp, #140
 11664 010e FFF7FEFF 		bl	dn_divide
 11665              	.LVL862:
1315:src/xeq.c     **** #endif
 11666              		.loc 1 1315 4 view .LVU3095
1315:src/xeq.c     **** #endif
 11667              		.loc 1 1315 7 is_stmt 0 view .LVU3096
 11668 0112 9DF89430 		ldrb	r3, [sp, #148]	@ zero_extendqisi2
 11669 0116 13F0700F 		tst	r3, #112
 11670 011a 64D0     		beq	.L884
1318:src/xeq.c     **** 				dn_minus(&x, &x);
 11671              		.loc 1 1318 4 is_stmt 1 view .LVU3097
1318:src/xeq.c     **** 				dn_minus(&x, &x);
 11672              		.loc 1 1318 7 is_stmt 0 view .LVU3098
 11673 011c 4CB1     		cbz	r4, .L878
 11674              	.L887:
1319:src/xeq.c     **** 			setX(&x);
 11675              		.loc 1 1319 5 is_stmt 1 view .LVU3099
 11676 011e 1AA9     		add	r1, sp, #104
 11677 0120 0846     		mov	r0, r1
 11678 0122 FFF7FEFF 		bl	dn_minus
 11679              	.LVL863:
1320:src/xeq.c     **** 		} else {
 11680              		.loc 1 1320 4 view .LVU3100
 11681              	.LBB2231:
 11682              	.LBI2231:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 11683              		.loc 1 828 6 view .LVU3101
 11684              	.LBB2232:
 829:src/xeq.c     **** }
 11685              		.loc 1 829 2 view .LVU3102
 11686 0126 04E0     		b	.L878
 11687              	.LVL864:
 11688              	.L863:
 829:src/xeq.c     **** }
 11689              		.loc 1 829 2 is_stmt 0 view .LVU3103
 11690              	.LBE2232:
 11691              	.LBE2231:
 11692              	.LBE2230:
1322:src/xeq.c     **** 			setX(&x);
 11693              		.loc 1 1322 4 is_stmt 1 view .LVU3104
 11694 0128 454A     		ldr	r2, .L888+4
 11695 012a 02A9     		add	r1, sp, #8
 11696 012c 1AA8     		add	r0, sp, #104
 11697 012e FFF7FEFF 		bl	decNumberFromString
ARM GAS  /tmp/ccqED0AM.s 			page 357


 11698              	.LVL865:
 11699              	.L878:
1323:src/xeq.c     **** 		}
 11700              		.loc 1 1323 4 view .LVU3105
 11701              	.LBB2233:
 11702              	.LBI2233:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 11703              		.loc 1 828 6 view .LVU3106
 11704              	.LBB2234:
 829:src/xeq.c     **** }
 11705              		.loc 1 829 2 view .LVU3107
 11706 0132 1AA9     		add	r1, sp, #104
 11707              	.LVL866:
 829:src/xeq.c     **** }
 11708              		.loc 1 829 2 is_stmt 0 view .LVU3108
 11709 0134 6420     		movs	r0, #100
 11710 0136 FFF7FEFF 		bl	setRegister
 11711              	.LVL867:
 11712              	.L862:
 829:src/xeq.c     **** }
 11713              		.loc 1 829 2 view .LVU3109
 11714              	.LBE2234:
 11715              	.LBE2233:
1325:src/xeq.c     **** #ifndef DM42
 11716              		.loc 1 1325 3 is_stmt 1 view .LVU3110
 11717              	.LBB2235:
 11718              	.LBI2235:
3911:src/xeq.c     **** 	if (!Running && !XromRunning)
 11719              		.loc 1 3911 6 view .LVU3111
 11720              	.LBB2236:
3912:src/xeq.c     **** 		State.entryp = 1;
 11721              		.loc 1 3912 2 view .LVU3112
 11722              	.LBB2237:
 11723              	.LBI2237:
3911:src/xeq.c     **** 	if (!Running && !XromRunning)
 11724              		.loc 1 3911 6 view .LVU3113
 11725              	.LBE2237:
3912:src/xeq.c     **** 		State.entryp = 1;
 11726              		.loc 1 3912 6 is_stmt 0 view .LVU3114
 11727 013a 424A     		ldr	r2, .L888+8
 11728              	.LBB2239:
 11729              	.LBB2238:
3912:src/xeq.c     **** 		State.entryp = 1;
 11730              		.loc 1 3912 18 view .LVU3115
 11731 013c 424B     		ldr	r3, .L888+12
3912:src/xeq.c     **** 		State.entryp = 1;
 11732              		.loc 1 3912 15 view .LVU3116
 11733 013e 1268     		ldr	r2, [r2]
 11734 0140 1B68     		ldr	r3, [r3]
 11735 0142 1343     		orrs	r3, r2, r3
 11736 0144 07D1     		bne	.L849
3913:src/xeq.c     **** }
 11737              		.loc 1 3913 3 is_stmt 1 view .LVU3117
3913:src/xeq.c     **** }
 11738              		.loc 1 3913 16 is_stmt 0 view .LVU3118
 11739 0146 D8F80020 		ldr	r2, [r8]
 11740 014a 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
ARM GAS  /tmp/ccqED0AM.s 			page 358


 11741 014e 43F01003 		orr	r3, r3, #16
 11742 0152 82F8DD37 		strb	r3, [r2, #2013]
 11743              	.L849:
 11744              	.LBE2238:
 11745              	.LBE2239:
 11746              	.LBE2236:
 11747              	.LBE2235:
 11748              	.LBE2254:
1330:src/xeq.c     **** 
 11749              		.loc 1 1330 1 view .LVU3119
 11750 0156 2CB0     		add	sp, sp, #176
 11751              		.cfi_remember_state
 11752              		.cfi_def_cfa_offset 32
 11753              		@ sp needed
 11754 0158 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 11755              	.LVL868:
 11756              	.L879:
 11757              		.cfi_restore_state
 11758              	.LBB2255:
1244:src/xeq.c     **** 			else if (cmdline[CmdLineEex] == 'D') {
 11759              		.loc 1 1244 5 is_stmt 1 view .LVU3120
1244:src/xeq.c     **** 			else if (cmdline[CmdLineEex] == 'D') {
 11760              		.loc 1 1244 30 is_stmt 0 view .LVU3121
 11761 015c 03F8A82C 		strb	r2, [r3, #-168]
 11762 0160 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
1256:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
 11763              		.loc 1 1256 4 is_stmt 1 view .LVU3122
1256:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
 11764              		.loc 1 1256 7 is_stmt 0 view .LVU3123
 11765 0162 002A     		cmp	r2, #0
 11766 0164 3FF47AAF 		beq	.L885
 11767              	.L854:
1264:src/xeq.c     **** 		}
 11768              		.loc 1 1264 5 is_stmt 1 view .LVU3124
1264:src/xeq.c     **** 		}
 11769              		.loc 1 1264 18 is_stmt 0 view .LVU3125
 11770 0168 D8F80030 		ldr	r3, [r8]
 11771 016c 93F8E627 		ldrb	r2, [r3, #2022]	@ zero_extendqisi2
 11772 0170 6FF34512 		bfc	r2, #5, #1
 11773 0174 83F8E627 		strb	r2, [r3, #2022]
1266:src/xeq.c     **** 		lift_if_enabled();
 11774              		.loc 1 1266 3 is_stmt 1 view .LVU3126
 11775              	.LBB2240:
 11776              	.LBB2221:
 11777              	.LBB2217:
 11778              	.LBB2214:
 744:src/xeq.c     **** }
 11779              		.loc 1 744 15 is_stmt 0 view .LVU3127
 11780 0178 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11781              	.LBE2214:
 11782              	.LBE2217:
 11783              	.LBE2221:
 11784              	.LBE2240:
1266:src/xeq.c     **** 		lift_if_enabled();
 11785              		.loc 1 1266 17 view .LVU3128
 11786 017a 0022     		movs	r2, #0
 11787              	.LBB2241:
ARM GAS  /tmp/ccqED0AM.s 			page 359


 11788              	.LBB2222:
 748:src/xeq.c     **** 		lift();
 11789              		.loc 1 748 5 view .LVU3129
 11790 017c 5B06     		lsls	r3, r3, #25
 11791              	.LBE2222:
 11792              	.LBE2241:
1266:src/xeq.c     **** 		lift_if_enabled();
 11793              		.loc 1 1266 17 view .LVU3130
 11794 017e 2277     		strb	r2, [r4, #28]
1267:src/xeq.c     **** 		set_lift();
 11795              		.loc 1 1267 3 is_stmt 1 view .LVU3131
 11796              	.LBB2242:
 747:src/xeq.c     **** 	if (get_lift())
 11797              		.loc 1 747 6 view .LVU3132
 11798              	.LBB2223:
 748:src/xeq.c     **** 		lift();
 11799              		.loc 1 748 2 view .LVU3133
 11800              	.LBB2218:
 743:src/xeq.c     **** 	return State2.state_lift;
 11801              		.loc 1 743 12 view .LVU3134
 11802              	.LBB2215:
 744:src/xeq.c     **** }
 11803              		.loc 1 744 2 view .LVU3135
 11804              	.LBE2215:
 11805              	.LBE2218:
 748:src/xeq.c     **** 		lift();
 11806              		.loc 1 748 5 is_stmt 0 view .LVU3136
 11807 0180 7FF575AF 		bpl	.L856
 11808              	.L881:
 749:src/xeq.c     **** }
 11809              		.loc 1 749 3 is_stmt 1 view .LVU3137
 11810 0184 FFF7FEFF 		bl	lift
 11811              	.LVL869:
 11812 0188 71E7     		b	.L856
 11813              	.L882:
 11814              	.LBE2223:
 11815              	.LBE2242:
 11816              	.LBB2243:
1272:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
 11817              		.loc 1 1272 4 view .LVU3138
1272:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
 11818              		.loc 1 1272 41 is_stmt 0 view .LVU3139
 11819 018a 9DF80890 		ldrb	r9, [sp, #8]	@ zero_extendqisi2
 11820 018e A9F12D09 		sub	r9, r9, #45
 11821 0192 B9FA89F9 		clz	r9, r9
1273:src/xeq.c     **** 			setX_int_sgn(x, sgn);
 11822              		.loc 1 1273 31 view .LVU3140
 11823 0196 FFF7FEFF 		bl	int_base
 11824              	.LVL870:
1272:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
 11825              		.loc 1 1272 41 view .LVU3141
 11826 019a 4FEA5919 		lsr	r9, r9, #5
 11827              	.LVL871:
1273:src/xeq.c     **** 			setX_int_sgn(x, sgn);
 11828              		.loc 1 1273 4 is_stmt 1 view .LVU3142
1273:src/xeq.c     **** 			setX_int_sgn(x, sgn);
 11829              		.loc 1 1273 31 is_stmt 0 view .LVU3143
ARM GAS  /tmp/ccqED0AM.s 			page 360


 11830 019e 02AB     		add	r3, sp, #8
 11831 01a0 03EB0902 		add	r2, r3, r9
 11832              	.LVL872:
 11833              	.LBB2244:
 11834              	.LBI2244:
1157:src/xeq.c     **** 	unsigned long long int x = 0;
 11835              		.loc 1 1157 24 is_stmt 1 view .LVU3144
 11836              	.LBB2245:
1158:src/xeq.c     **** 
 11837              		.loc 1 1158 2 view .LVU3145
1158:src/xeq.c     **** 
 11838              		.loc 1 1158 25 is_stmt 0 view .LVU3146
 11839 01a4 0026     		movs	r6, #0
 11840 01a6 0027     		movs	r7, #0
 11841 01a8 02E0     		b	.L861
 11842              	.LVL873:
 11843              	.L886:
 11844              	.LBB2246:
1172:src/xeq.c     **** 	}
 11845              		.loc 1 1172 5 view .LVU3147
 11846 01aa E618     		adds	r6, r4, r3
 11847              	.LVL874:
1172:src/xeq.c     **** 	}
 11848              		.loc 1 1172 5 view .LVU3148
 11849 01ac 45F10007 		adc	r7, r5, #0
 11850              	.LVL875:
1172:src/xeq.c     **** 	}
 11851              		.loc 1 1172 5 view .LVU3149
 11852              	.LBE2246:
1160:src/xeq.c     **** 		unsigned int n;
 11853              		.loc 1 1160 8 is_stmt 1 view .LVU3150
 11854              	.L861:
1160:src/xeq.c     **** 		unsigned int n;
 11855              		.loc 1 1160 2 view .LVU3151
 11856              	.LBB2247:
1161:src/xeq.c     **** 		const char c = *s++;
 11857              		.loc 1 1161 3 view .LVU3152
1162:src/xeq.c     **** 
 11858              		.loc 1 1162 3 view .LVU3153
1165:src/xeq.c     **** 		else if (c >= 'A' && c <= 'F')
 11859              		.loc 1 1165 4 view .LVU3154
1166:src/xeq.c     **** 			n = c - 'A' + 10;
 11860              		.loc 1 1166 8 view .LVU3155
1167:src/xeq.c     **** 		else
 11861              		.loc 1 1167 4 view .LVU3156
1162:src/xeq.c     **** 
 11862              		.loc 1 1162 14 is_stmt 0 view .LVU3157
 11863 01b0 12F8011B 		ldrb	r1, [r2], #1	@ zero_extendqisi2
 11864              	.LVL876:
1164:src/xeq.c     **** 			n = c - '0';
 11865              		.loc 1 1164 3 is_stmt 1 view .LVU3158
1164:src/xeq.c     **** 			n = c - '0';
 11866              		.loc 1 1164 16 is_stmt 0 view .LVU3159
 11867 01b4 A1F13003 		sub	r3, r1, #48
1164:src/xeq.c     **** 			n = c - '0';
 11868              		.loc 1 1164 6 view .LVU3160
 11869 01b8 DCB2     		uxtb	r4, r3
ARM GAS  /tmp/ccqED0AM.s 			page 361


 11870 01ba 092C     		cmp	r4, #9
1166:src/xeq.c     **** 			n = c - 'A' + 10;
 11871              		.loc 1 1166 11 view .LVU3161
 11872 01bc A1F14105 		sub	r5, r1, #65
1164:src/xeq.c     **** 			n = c - '0';
 11873              		.loc 1 1164 6 view .LVU3162
 11874 01c0 03D9     		bls	.L859
1166:src/xeq.c     **** 			n = c - 'A' + 10;
 11875              		.loc 1 1166 11 view .LVU3163
 11876 01c2 052D     		cmp	r5, #5
 11877 01c4 07D8     		bhi	.L860
1167:src/xeq.c     **** 		else
 11878              		.loc 1 1167 16 view .LVU3164
 11879 01c6 A1F13703 		sub	r3, r1, #55
 11880              	.LVL877:
 11881              	.L859:
1170:src/xeq.c     **** 			break;
 11882              		.loc 1 1170 3 is_stmt 1 view .LVU3165
1172:src/xeq.c     **** 	}
 11883              		.loc 1 1172 3 view .LVU3166
1172:src/xeq.c     **** 	}
 11884              		.loc 1 1172 9 is_stmt 0 view .LVU3167
 11885 01ca A0FB0645 		umull	r4, r5, r0, r6
1170:src/xeq.c     **** 			break;
 11886              		.loc 1 1170 6 view .LVU3168
 11887 01ce 9842     		cmp	r0, r3
1172:src/xeq.c     **** 	}
 11888              		.loc 1 1172 9 view .LVU3169
 11889 01d0 00FB0755 		mla	r5, r0, r7, r5
1170:src/xeq.c     **** 			break;
 11890              		.loc 1 1170 6 view .LVU3170
 11891 01d4 E9D8     		bhi	.L886
 11892              	.LVL878:
 11893              	.L860:
1170:src/xeq.c     **** 			break;
 11894              		.loc 1 1170 6 view .LVU3171
 11895              	.LBE2247:
1174:src/xeq.c     **** }
 11896              		.loc 1 1174 2 is_stmt 1 view .LVU3172
1174:src/xeq.c     **** }
 11897              		.loc 1 1174 2 is_stmt 0 view .LVU3173
 11898              	.LBE2245:
 11899              	.LBE2244:
1274:src/xeq.c     **** 		} else if (cmdlinedot == 2) {
 11900              		.loc 1 1274 4 is_stmt 1 view .LVU3174
 11901              	.LBB2248:
 11902              	.LBI2248:
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 11903              		.loc 1 1509 6 view .LVU3175
 11904              	.LBB2249:
1510:src/xeq.c     **** }
 11905              		.loc 1 1510 2 view .LVU3176
 11906 01d6 CDF80090 		str	r9, [sp]
 11907 01da 3246     		mov	r2, r6
 11908 01dc 3B46     		mov	r3, r7
 11909 01de 6420     		movs	r0, #100
 11910 01e0 FFF7FEFF 		bl	set_reg_n_int_sgn
ARM GAS  /tmp/ccqED0AM.s 			page 362


 11911              	.LVL879:
1511:src/xeq.c     **** 
 11912              		.loc 1 1511 1 is_stmt 0 view .LVU3177
 11913 01e4 A9E7     		b	.L862
 11914              	.LVL880:
 11915              	.L884:
1511:src/xeq.c     **** 
 11916              		.loc 1 1511 1 view .LVU3178
 11917              	.LBE2249:
 11918              	.LBE2248:
 11919              	.LBE2243:
 11920              	.LBB2250:
1317:src/xeq.c     **** 			if (neg)
 11921              		.loc 1 1317 5 is_stmt 1 view .LVU3179
 11922 01e6 1AA9     		add	r1, sp, #104
 11923 01e8 23AA     		add	r2, sp, #140
 11924 01ea 0846     		mov	r0, r1
 11925 01ec FFF7FEFF 		bl	dn_add
 11926              	.LVL881:
1318:src/xeq.c     **** 				dn_minus(&x, &x);
 11927              		.loc 1 1318 4 view .LVU3180
1318:src/xeq.c     **** 				dn_minus(&x, &x);
 11928              		.loc 1 1318 7 is_stmt 0 view .LVU3181
 11929 01f0 002C     		cmp	r4, #0
 11930 01f2 9ED0     		beq	.L878
 11931 01f4 93E7     		b	.L887
 11932              	.LVL882:
 11933              	.L880:
1318:src/xeq.c     **** 				dn_minus(&x, &x);
 11934              		.loc 1 1318 7 view .LVU3182
 11935              	.LBE2250:
1246:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
 11936              		.loc 1 1246 5 is_stmt 1 view .LVU3183
 11937 01f6 02AB     		add	r3, sp, #8
1246:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
 11938              		.loc 1 1246 58 is_stmt 0 view .LVU3184
 11939 01f8 511C     		adds	r1, r2, #1
1246:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
 11940              		.loc 1 1246 32 view .LVU3185
 11941 01fa 901C     		adds	r0, r2, #2
1246:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
 11942              		.loc 1 1246 5 view .LVU3186
 11943 01fc 1944     		add	r1, r1, r3
 11944 01fe 1844     		add	r0, r0, r3
 11945 0200 C2F11202 		rsb	r2, r2, #18
 11946 0204 FFF7FEFF 		bl	xcopy
 11947              	.LVL883:
1247:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
 11948              		.loc 1 1247 5 is_stmt 1 view .LVU3187
1247:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
 11949              		.loc 1 1247 13 is_stmt 0 view .LVU3188
 11950 0208 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
1247:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
 11951              		.loc 1 1247 25 view .LVU3189
 11952 020a 2CAB     		add	r3, sp, #176
 11953 020c 1344     		add	r3, r3, r2
 11954 020e 4520     		movs	r0, #69
ARM GAS  /tmp/ccqED0AM.s 			page 363


1248:src/xeq.c     **** 			}
 11955              		.loc 1 1248 29 view .LVU3190
 11956 0210 2D21     		movs	r1, #45
1247:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
 11957              		.loc 1 1247 25 view .LVU3191
 11958 0212 03F8A80C 		strb	r0, [r3, #-168]
1248:src/xeq.c     **** 			}
 11959              		.loc 1 1248 5 is_stmt 1 view .LVU3192
1248:src/xeq.c     **** 			}
 11960              		.loc 1 1248 29 is_stmt 0 view .LVU3193
 11961 0216 03F8A71C 		strb	r1, [r3, #-167]
 11962 021a 1CE7     		b	.L853
 11963              	.LVL884:
 11964              	.L883:
 11965              	.LBB2251:
1299:src/xeq.c     **** 				decNumberZero(&x); // and zero x
 11966              		.loc 1 1299 5 is_stmt 1 view .LVU3194
 11967 021c 1AA9     		add	r1, sp, #104
 11968 021e 2846     		mov	r0, r5
 11969 0220 FFF7FEFF 		bl	decNumberCopy
 11970              	.LVL885:
1300:src/xeq.c     **** #if FRACTION_MODE_INPUT & 32
 11971              		.loc 1 1300 5 view .LVU3195
 11972 0224 1AA8     		add	r0, sp, #104
 11973 0226 FFF7FEFF 		bl	decNumberZero
 11974              	.LVL886:
1302:src/xeq.c     **** #endif
 11975              		.loc 1 1302 5 view .LVU3196
1302:src/xeq.c     **** #endif
 11976              		.loc 1 1302 25 is_stmt 0 view .LVU3197
 11977 022a D8F80020 		ldr	r2, [r8]
 11978 022e 92F8E637 		ldrb	r3, [r2, #2022]	@ zero_extendqisi2
 11979 0232 43F01003 		orr	r3, r3, #16
 11980 0236 82F8E637 		strb	r3, [r2, #2022]
 11981 023a 65E7     		b	.L866
 11982              	.L889:
 11983              		.align	2
 11984              	.L888:
 11985 023c 00000000 		.word	StateWhileOn
 11986 0240 00000000 		.word	Ctx
 11987 0244 00000000 		.word	Running
 11988 0248 00000000 		.word	XromRunning
 11989 024c 00000000 		.word	main_ram
 11990              	.LBE2251:
 11991              	.LBE2255:
 11992              		.cfi_endproc
 11993              	.LFE289:
 11995              		.section	.text.process_cmdline,"ax",%progbits
 11996              		.align	1
 11997              		.p2align 2,,3
 11998              		.global	process_cmdline
 11999              		.syntax unified
 12000              		.thumb
 12001              		.thumb_func
 12002              		.fpu fpv4-sp-d16
 12004              	process_cmdline:
 12005              	.LFB88:
ARM GAS  /tmp/ccqED0AM.s 			page 364


1226:src/xeq.c     **** 	decNumber a, b, x, t;
 12006              		.loc 1 1226 28 is_stmt 1 view -0
 12007              		.cfi_startproc
 12008              		@ args = 0, pretend = 0, frame = 0
 12009              		@ frame_needed = 0, uses_anonymous_args = 0
 12010              		@ link register save eliminated.
1227:src/xeq.c     **** 
 12011              		.loc 1 1227 2 view .LVU3199
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12012              		.loc 1 1229 2 view .LVU3200
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12013              		.loc 1 1229 6 is_stmt 0 view .LVU3201
 12014 0000 024B     		ldr	r3, .L893
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12015              		.loc 1 1229 5 view .LVU3202
 12016 0002 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 12017 0004 03B9     		cbnz	r3, .L892
1330:src/xeq.c     **** 
 12018              		.loc 1 1330 1 view .LVU3203
 12019 0006 7047     		bx	lr
 12020              	.L892:
 12021 0008 FFF7FEBF 		b	process_cmdline.part.0
 12022              	.LVL887:
 12023              	.L894:
 12024              		.align	2
 12025              	.L893:
 12026 000c 00000000 		.word	StateWhileOn
 12027              		.cfi_endproc
 12028              	.LFE88:
 12030              		.section	.text.cpx_pi,"ax",%progbits
 12031              		.align	1
 12032              		.p2align 2,,3
 12033              		.global	cpx_pi
 12034              		.syntax unified
 12035              		.thumb
 12036              		.thumb_func
 12037              		.fpu fpv4-sp-d16
 12039              	cpx_pi:
 12040              	.LVL888:
 12041              	.LFB76:
 973:src/xeq.c     **** 	switch (op) {
 12042              		.loc 1 973 29 is_stmt 1 view -0
 12043              		.cfi_startproc
 12044              		@ args = 0, pretend = 0, frame = 40
 12045              		@ frame_needed = 0, uses_anonymous_args = 0
 974:src/xeq.c     **** 	case OP_PIA: // no command line present - puts pi into x-register
 12046              		.loc 1 974 2 view .LVU3205
 973:src/xeq.c     **** 	switch (op) {
 12047              		.loc 1 973 29 is_stmt 0 view .LVU3206
 12048 0000 70B5     		push	{r4, r5, r6, lr}
 12049              		.cfi_def_cfa_offset 16
 12050              		.cfi_offset 4, -16
 12051              		.cfi_offset 5, -12
 12052              		.cfi_offset 6, -8
 12053              		.cfi_offset 14, -4
 974:src/xeq.c     **** 	case OP_PIA: // no command line present - puts pi into x-register
 12054              		.loc 1 974 2 view .LVU3207
ARM GAS  /tmp/ccqED0AM.s 			page 365


 12055 0002 D028     		cmp	r0, #208
 973:src/xeq.c     **** 	switch (op) {
 12056              		.loc 1 973 29 view .LVU3208
 12057 0004 8AB0     		sub	sp, sp, #40
 12058              		.cfi_def_cfa_offset 56
 974:src/xeq.c     **** 	case OP_PIA: // no command line present - puts pi into x-register
 12059              		.loc 1 974 2 view .LVU3209
 12060 0006 26D0     		beq	.L896
 12061 0008 D128     		cmp	r0, #209
 12062 000a 1AD1     		bne	.L907
 983:src/xeq.c     **** 		process_cmdline();
 12063              		.loc 1 983 3 is_stmt 1 view .LVU3210
 983:src/xeq.c     **** 		process_cmdline();
 12064              		.loc 1 983 21 is_stmt 0 view .LVU3211
 12065 000c 2B4D     		ldr	r5, .L910
 12066 000e EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 12067              	.LBB2256:
 12068              	.LBB2257:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12069              		.loc 1 1229 5 view .LVU3212
 12070 0010 2A7F     		ldrb	r2, [r5, #28]	@ zero_extendqisi2
 12071              	.LBE2257:
 12072              	.LBE2256:
 983:src/xeq.c     **** 		process_cmdline();
 12073              		.loc 1 983 21 view .LVU3213
 12074 0012 6FF38613 		bfc	r3, #6, #1
 12075 0016 EB75     		strb	r3, [r5, #23]
 984:src/xeq.c     **** 		State2.state_lift = 0;
 12076              		.loc 1 984 3 is_stmt 1 view .LVU3214
 12077              	.LBB2260:
 12078              	.LBI2256:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 12079              		.loc 1 1226 6 view .LVU3215
 12080              	.LBB2258:
1227:src/xeq.c     **** 
 12081              		.loc 1 1227 2 view .LVU3216
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12082              		.loc 1 1229 2 view .LVU3217
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12083              		.loc 1 1229 5 is_stmt 0 view .LVU3218
 12084 0018 002A     		cmp	r2, #0
 12085 001a 41D1     		bne	.L908
 12086              	.LVL889:
 12087              	.L901:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12088              		.loc 1 1229 5 view .LVU3219
 12089              	.LBE2258:
 12090              	.LBE2260:
 985:src/xeq.c     **** 		{
 12091              		.loc 1 985 3 is_stmt 1 view .LVU3220
 985:src/xeq.c     **** 		{
 12092              		.loc 1 985 21 is_stmt 0 view .LVU3221
 12093 001c EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 12094 001e 284C     		ldr	r4, .L910+4
 12095 0020 6FF38613 		bfc	r3, #6, #1
 12096 0024 EB75     		strb	r3, [r5, #23]
 12097              	.LBB2261:
ARM GAS  /tmp/ccqED0AM.s 			page 366


 987:src/xeq.c     **** 			getX(&r);
 12098              		.loc 1 987 4 is_stmt 1 view .LVU3222
 988:src/xeq.c     **** 			dn_multiply (&r, &const_PI, &r);
 12099              		.loc 1 988 4 view .LVU3223
 12100              	.LVL890:
 12101              	.LBB2262:
 12102              	.LBI2262:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 12103              		.loc 1 824 12 view .LVU3224
 12104              	.LBB2263:
 825:src/xeq.c     **** }
 12105              		.loc 1 825 2 view .LVU3225
 825:src/xeq.c     **** }
 12106              		.loc 1 825 9 is_stmt 0 view .LVU3226
 12107 0026 01A8     		add	r0, sp, #4
 12108              	.LVL891:
 825:src/xeq.c     **** }
 12109              		.loc 1 825 9 view .LVU3227
 12110 0028 6421     		movs	r1, #100
 12111 002a FFF7FEFF 		bl	getRegister
 12112              	.LVL892:
 825:src/xeq.c     **** }
 12113              		.loc 1 825 9 view .LVU3228
 12114              	.LBE2263:
 12115              	.LBE2262:
 989:src/xeq.c     **** 			setX(&r);
 12116              		.loc 1 989 4 is_stmt 1 view .LVU3229
 12117 002e 01AA     		add	r2, sp, #4
 12118 0030 2449     		ldr	r1, .L910+8
 12119 0032 1046     		mov	r0, r2
 12120 0034 FFF7FEFF 		bl	dn_multiply
 12121              	.LVL893:
 990:src/xeq.c     **** 		}
 12122              		.loc 1 990 4 view .LVU3230
 12123              	.LBB2264:
 12124              	.LBI2264:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 12125              		.loc 1 828 6 view .LVU3231
 12126              	.LBB2265:
 829:src/xeq.c     **** }
 12127              		.loc 1 829 2 view .LVU3232
 12128 0038 01A9     		add	r1, sp, #4
 12129              	.LVL894:
 829:src/xeq.c     **** }
 12130              		.loc 1 829 2 is_stmt 0 view .LVU3233
 12131 003a 6420     		movs	r0, #100
 12132 003c FFF7FEFF 		bl	setRegister
 12133              	.LVL895:
 829:src/xeq.c     **** }
 12134              		.loc 1 829 2 view .LVU3234
 12135 0040 00E0     		b	.L898
 12136              	.LVL896:
 12137              	.L907:
 829:src/xeq.c     **** }
 12138              		.loc 1 829 2 view .LVU3235
 12139 0042 1F4C     		ldr	r4, .L910+4
 12140              	.LVL897:
ARM GAS  /tmp/ccqED0AM.s 			page 367


 12141              	.L898:
 829:src/xeq.c     **** }
 12142              		.loc 1 829 2 view .LVU3236
 12143              	.LBE2265:
 12144              	.LBE2264:
 12145              	.LBE2261:
 992:src/xeq.c     **** 	}
 12146              		.loc 1 992 10 is_stmt 1 view .LVU3237
 994:src/xeq.c     **** }
 12147              		.loc 1 994 2 view .LVU3238
 12148 0044 2268     		ldr	r2, [r4]
 12149 0046 92F8AD37 		ldrb	r3, [r2, #1965]	@ zero_extendqisi2
 12150 004a 43F00103 		orr	r3, r3, #1
 12151 004e 82F8AD37 		strb	r3, [r2, #1965]
 995:src/xeq.c     **** 
 12152              		.loc 1 995 1 is_stmt 0 view .LVU3239
 12153 0052 0AB0     		add	sp, sp, #40
 12154              		.cfi_remember_state
 12155              		.cfi_def_cfa_offset 16
 12156              		@ sp needed
 12157 0054 70BD     		pop	{r4, r5, r6, pc}
 12158              	.LVL898:
 12159              	.L896:
 12160              		.cfi_restore_state
 976:src/xeq.c     **** 			stack_begin( 1 );
 12161              		.loc 1 976 3 is_stmt 1 view .LVU3240
 976:src/xeq.c     **** 			stack_begin( 1 );
 12162              		.loc 1 976 8 is_stmt 0 view .LVU3241
 12163 0056 1A4C     		ldr	r4, .L910+4
 12164 0058 2368     		ldr	r3, [r4]
 976:src/xeq.c     **** 			stack_begin( 1 );
 12165              		.loc 1 976 18 view .LVU3242
 12166 005a 93F8AC27 		ldrb	r2, [r3, #1964]	@ zero_extendqisi2
 976:src/xeq.c     **** 			stack_begin( 1 );
 12167              		.loc 1 976 6 view .LVU3243
 12168 005e 12F0060F 		tst	r2, #6
 12169 0062 20D0     		beq	.L909
 12170              	.LVL899:
 12171              	.L899:
 980:src/xeq.c     **** 		break;
 12172              		.loc 1 980 3 is_stmt 1 view .LVU3244
 12173              	.LBB2266:
 12174              	.LBB2267:
1119:src/xeq.c     **** }
 12175              		.loc 1 1119 24 is_stmt 0 view .LVU3245
 12176 0064 B3F8E817 		ldrh	r1, [r3, #2024]
 12177              	.LBE2267:
 12178              	.LBE2266:
 980:src/xeq.c     **** 		break;
 12179              		.loc 1 980 3 view .LVU3246
 12180 0068 174B     		ldr	r3, .L910+12
 12181              	.LBB2270:
 12182              	.LBB2268:
1119:src/xeq.c     **** }
 12183              		.loc 1 1119 24 view .LVU3247
 12184 006a 44F20105 		movw	r5, #16385
 12185 006e 2940     		ands	r1, r1, r5
ARM GAS  /tmp/ccqED0AM.s 			page 368


 12186              	.LBE2268:
 12187              	.LBE2270:
 980:src/xeq.c     **** 		break;
 12188              		.loc 1 980 22 view .LVU3248
 12189 0070 A1F58041 		sub	r1, r1, #16384
 12190 0074 B1FA81F1 		clz	r1, r1
 12191 0078 4909     		lsrs	r1, r1, #5
 12192 007a 6620     		movs	r0, #102
 980:src/xeq.c     **** 		break;
 12193              		.loc 1 980 3 view .LVU3249
 12194 007c 1E68     		ldr	r6, [r3]
 12195              	.LBB2271:
 12196              	.LBI2266:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12197              		.loc 1 1118 5 is_stmt 1 view .LVU3250
 12198              	.LBB2269:
1119:src/xeq.c     **** }
 12199              		.loc 1 1119 2 view .LVU3251
 12200              	.LBE2269:
 12201              	.LBE2271:
 980:src/xeq.c     **** 		break;
 12202              		.loc 1 980 22 is_stmt 0 view .LVU3252
 12203 007e FFF7FEFF 		bl	get_const
 12204              	.LVL900:
 12205              	.LBB2272:
 12206              	.LBB2273:
 12207              	.LBB2274:
 12208              	.LBB2275:
1119:src/xeq.c     **** }
 12209              		.loc 1 1119 24 view .LVU3253
 12210 0082 2368     		ldr	r3, [r4]
 12211 0084 B3F8E837 		ldrh	r3, [r3, #2024]
 12212              	.LBE2275:
 12213              	.LBE2274:
 727:src/xeq.c     **** }
 12214              		.loc 1 727 2 view .LVU3254
 12215 0088 1D40     		ands	r5, r5, r3
 12216 008a B5F5804F 		cmp	r5, #16384
 12217              	.LBE2273:
 12218              	.LBE2272:
 980:src/xeq.c     **** 		break;
 12219              		.loc 1 980 22 view .LVU3255
 12220 008e 0146     		mov	r1, r0
 12221              	.LVL901:
 12222              	.LBB2279:
 12223              	.LBI2272:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 12224              		.loc 1 726 6 is_stmt 1 view .LVU3256
 12225              	.LBB2278:
 727:src/xeq.c     **** }
 12226              		.loc 1 727 2 view .LVU3257
 12227              	.LBB2277:
 12228              	.LBI2274:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12229              		.loc 1 1118 5 view .LVU3258
 12230              	.LBB2276:
1119:src/xeq.c     **** }
ARM GAS  /tmp/ccqED0AM.s 			page 369


 12231              		.loc 1 1119 2 view .LVU3259
 12232              	.LBE2276:
 12233              	.LBE2277:
 727:src/xeq.c     **** }
 12234              		.loc 1 727 2 is_stmt 0 view .LVU3260
 12235 0090 08BF     		it	eq
 12236 0092 1022     		moveq	r2, #16
 12237 0094 3046     		mov	r0, r6
 12238              	.LVL902:
 727:src/xeq.c     **** }
 12239              		.loc 1 727 2 view .LVU3261
 12240 0096 18BF     		it	ne
 12241 0098 0822     		movne	r2, #8
 12242 009a FFF7FEFF 		bl	xcopy
 12243              	.LVL903:
 728:src/xeq.c     **** 
 12244              		.loc 1 728 1 view .LVU3262
 12245 009e D1E7     		b	.L898
 12246              	.LVL904:
 12247              	.L908:
 728:src/xeq.c     **** 
 12248              		.loc 1 728 1 view .LVU3263
 12249              	.LBE2278:
 12250              	.LBE2279:
 12251              	.LBB2280:
 12252              	.LBB2259:
 12253 00a0 FFF7FEFF 		bl	process_cmdline.part.0
 12254              	.LVL905:
 728:src/xeq.c     **** 
 12255              		.loc 1 728 1 view .LVU3264
 12256 00a4 BAE7     		b	.L901
 12257              	.LVL906:
 12258              	.L909:
 728:src/xeq.c     **** 
 12259              		.loc 1 728 1 view .LVU3265
 12260              	.LBE2259:
 12261              	.LBE2280:
 977:src/xeq.c     **** 			SET_REAL;
 12262              		.loc 1 977 4 is_stmt 1 view .LVU3266
 12263 00a6 0120     		movs	r0, #1
 12264              	.LVL907:
 977:src/xeq.c     **** 			SET_REAL;
 12265              		.loc 1 977 4 is_stmt 0 view .LVU3267
 12266 00a8 FFF7FEFF 		bl	stack_begin
 12267              	.LVL908:
 978:src/xeq.c     **** 		}
 12268              		.loc 1 978 4 is_stmt 1 view .LVU3268
 12269 00ac 2368     		ldr	r3, [r4]
 12270 00ae 93F8AC27 		ldrb	r2, [r3, #1964]	@ zero_extendqisi2
 12271 00b2 42F00202 		orr	r2, r2, #2
 12272 00b6 83F8AC27 		strb	r2, [r3, #1964]
 12273 00ba D3E7     		b	.L899
 12274              	.L911:
 12275              		.align	2
 12276              	.L910:
 12277 00bc 00000000 		.word	StateWhileOn
 12278 00c0 00000000 		.word	main_ram
ARM GAS  /tmp/ccqED0AM.s 			page 370


 12279 00c4 00000000 		.word	const_PI
 12280 00c8 00000000 		.word	StackBase
 12281              		.cfi_endproc
 12282              	.LFE76:
 12284              		.section	.text.process_cmdline_set_lift,"ax",%progbits
 12285              		.align	1
 12286              		.p2align 2,,3
 12287              		.global	process_cmdline_set_lift
 12288              		.syntax unified
 12289              		.thumb
 12290              		.thumb_func
 12291              		.fpu fpv4-sp-d16
 12293              	process_cmdline_set_lift:
 12294              	.LFB89:
1332:src/xeq.c     **** 	process_cmdline();
 12295              		.loc 1 1332 37 view -0
 12296              		.cfi_startproc
 12297              		@ args = 0, pretend = 0, frame = 0
 12298              		@ frame_needed = 0, uses_anonymous_args = 0
1333:src/xeq.c     **** 	set_lift();
 12299              		.loc 1 1333 2 view .LVU3270
 12300              	.LBB2281:
 12301              	.LBI2281:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 12302              		.loc 1 1226 6 view .LVU3271
 12303              	.LBB2282:
1227:src/xeq.c     **** 
 12304              		.loc 1 1227 2 view .LVU3272
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12305              		.loc 1 1229 2 view .LVU3273
 12306              	.LBE2282:
 12307              	.LBE2281:
1332:src/xeq.c     **** 	process_cmdline();
 12308              		.loc 1 1332 37 is_stmt 0 view .LVU3274
 12309 0000 10B5     		push	{r4, lr}
 12310              		.cfi_def_cfa_offset 8
 12311              		.cfi_offset 4, -8
 12312              		.cfi_offset 14, -4
 12313              	.LBB2285:
 12314              	.LBB2283:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12315              		.loc 1 1229 6 view .LVU3275
 12316 0002 074C     		ldr	r4, .L919
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12317              		.loc 1 1229 5 view .LVU3276
 12318 0004 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 12319 0006 23B9     		cbnz	r3, .L918
 12320              	.LBE2283:
 12321              	.LBE2285:
1334:src/xeq.c     **** }
 12322              		.loc 1 1334 2 is_stmt 1 view .LVU3277
 12323              	.LBB2286:
 12324              	.LBI2286:
 767:src/xeq.c     ****     State2.state_lift = 1;
 12325              		.loc 1 767 6 view .LVU3278
 12326              	.LBB2287:
 768:src/xeq.c     **** }
ARM GAS  /tmp/ccqED0AM.s 			page 371


 12327              		.loc 1 768 5 view .LVU3279
 768:src/xeq.c     **** }
 12328              		.loc 1 768 23 is_stmt 0 view .LVU3280
 12329 0008 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12330 000a 43F04003 		orr	r3, r3, #64
 12331 000e E375     		strb	r3, [r4, #23]
 12332              	.LBE2287:
 12333              	.LBE2286:
1335:src/xeq.c     **** 
 12334              		.loc 1 1335 1 view .LVU3281
 12335 0010 10BD     		pop	{r4, pc}
 12336              	.L918:
 12337              	.LBB2289:
 12338              	.LBB2284:
 12339 0012 FFF7FEFF 		bl	process_cmdline.part.0
 12340              	.LVL909:
 12341              	.LBE2284:
 12342              	.LBE2289:
1334:src/xeq.c     **** }
 12343              		.loc 1 1334 2 is_stmt 1 view .LVU3282
 12344              	.LBB2290:
 767:src/xeq.c     ****     State2.state_lift = 1;
 12345              		.loc 1 767 6 view .LVU3283
 12346              	.LBB2288:
 768:src/xeq.c     **** }
 12347              		.loc 1 768 5 view .LVU3284
 768:src/xeq.c     **** }
 12348              		.loc 1 768 23 is_stmt 0 view .LVU3285
 12349 0016 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12350 0018 43F04003 		orr	r3, r3, #64
 12351 001c E375     		strb	r3, [r4, #23]
 12352              	.LBE2288:
 12353              	.LBE2290:
1335:src/xeq.c     **** 
 12354              		.loc 1 1335 1 view .LVU3286
 12355 001e 10BD     		pop	{r4, pc}
 12356              	.L920:
 12357              		.align	2
 12358              	.L919:
 12359 0020 00000000 		.word	StateWhileOn
 12360              		.cfi_endproc
 12361              	.LFE89:
 12363              		.section	.text.setX_int,"ax",%progbits
 12364              		.align	1
 12365              		.p2align 2,,3
 12366              		.global	setX_int
 12367              		.syntax unified
 12368              		.thumb
 12369              		.thumb_func
 12370              		.fpu fpv4-sp-d16
 12372              	setX_int:
 12373              	.LVL910:
 12374              	.LFB102:
1504:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
 12375              		.loc 1 1504 34 is_stmt 1 view -0
 12376              		.cfi_startproc
 12377              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccqED0AM.s 			page 372


 12378              		@ frame_needed = 0, uses_anonymous_args = 0
1505:src/xeq.c     **** }
 12379              		.loc 1 1505 2 view .LVU3288
1504:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
 12380              		.loc 1 1504 34 is_stmt 0 view .LVU3289
 12381 0000 00B5     		push	{lr}
 12382              		.cfi_def_cfa_offset 4
 12383              		.cfi_offset 14, -4
 12384 0002 0B46     		mov	r3, r1
 12385 0004 83B0     		sub	sp, sp, #12
 12386              		.cfi_def_cfa_offset 16
1504:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
 12387              		.loc 1 1504 34 view .LVU3290
 12388 0006 0246     		mov	r2, r0
 12389              	.LBB2291:
 12390              	.LBB2292:
1423:src/xeq.c     **** }
 12391              		.loc 1 1423 8 view .LVU3291
 12392 0008 6420     		movs	r0, #100
 12393              	.LVL911:
1423:src/xeq.c     **** }
 12394              		.loc 1 1423 8 view .LVU3292
 12395 000a CDE90023 		strd	r2, [sp]
 12396              	.LVL912:
1423:src/xeq.c     **** }
 12397              		.loc 1 1423 8 view .LVU3293
 12398              	.LBE2292:
 12399              	.LBI2291:
1422:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 12400              		.loc 1 1422 6 is_stmt 1 view .LVU3294
 12401              	.LBB2293:
1423:src/xeq.c     **** }
 12402              		.loc 1 1423 2 view .LVU3295
1423:src/xeq.c     **** }
 12403              		.loc 1 1423 8 is_stmt 0 view .LVU3296
 12404 000e FFF7FEFF 		bl	get_reg_n
 12405              	.LVL913:
1423:src/xeq.c     **** }
 12406              		.loc 1 1423 2 view .LVU3297
 12407 0012 0822     		movs	r2, #8
 12408 0014 6946     		mov	r1, sp
 12409 0016 FFF7FEFF 		bl	xcopy
 12410              	.LVL914:
1423:src/xeq.c     **** }
 12411              		.loc 1 1423 2 view .LVU3298
 12412              	.LBE2293:
 12413              	.LBE2291:
1506:src/xeq.c     **** 
 12414              		.loc 1 1506 1 view .LVU3299
 12415 001a 03B0     		add	sp, sp, #12
 12416              		.cfi_def_cfa_offset 4
 12417              		@ sp needed
 12418 001c 5DF804FB 		ldr	pc, [sp], #4
 12419              		.cfi_endproc
 12420              	.LFE102:
 12422              		.section	.text.do_rcl,"ax",%progbits
 12423              		.align	1
ARM GAS  /tmp/ccqED0AM.s 			page 373


 12424              		.p2align 2,,3
 12425              		.syntax unified
 12426              		.thumb
 12427              		.thumb_func
 12428              		.fpu fpv4-sp-d16
 12430              	do_rcl:
 12431              	.LVL915:
 12432              	.LFB118:
1746:src/xeq.c     **** 	if (op == RARG_RCL) {
 12433              		.loc 1 1746 45 is_stmt 1 view -0
 12434              		.cfi_startproc
 12435              		@ args = 0, pretend = 0, frame = 40
 12436              		@ frame_needed = 0, uses_anonymous_args = 0
1747:src/xeq.c     **** 		REGISTER temp;
 12437              		.loc 1 1747 2 view .LVU3301
1746:src/xeq.c     **** 	if (op == RARG_RCL) {
 12438              		.loc 1 1746 45 is_stmt 0 view .LVU3302
 12439 0000 30B5     		push	{r4, r5, lr}
 12440              		.cfi_def_cfa_offset 12
 12441              		.cfi_offset 4, -12
 12442              		.cfi_offset 5, -8
 12443              		.cfi_offset 14, -4
1747:src/xeq.c     **** 		REGISTER temp;
 12444              		.loc 1 1747 5 view .LVU3303
 12445 0002 0A29     		cmp	r1, #10
1746:src/xeq.c     **** 	if (op == RARG_RCL) {
 12446              		.loc 1 1746 45 view .LVU3304
 12447 0004 8BB0     		sub	sp, sp, #44
 12448              		.cfi_def_cfa_offset 56
1746:src/xeq.c     **** 	if (op == RARG_RCL) {
 12449              		.loc 1 1746 45 view .LVU3305
 12450 0006 0B46     		mov	r3, r1
1747:src/xeq.c     **** 		REGISTER temp;
 12451              		.loc 1 1747 5 view .LVU3306
 12452 0008 33D0     		beq	.L944
1753:src/xeq.c     **** 			long long int r;
 12453              		.loc 1 1753 3 is_stmt 1 view .LVU3307
1753:src/xeq.c     **** 			long long int r;
 12454              		.loc 1 1753 7 is_stmt 0 view .LVU3308
 12455 000a 304A     		ldr	r2, .L946
 12456 000c 1268     		ldr	r2, [r2]
 12457 000e 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
1753:src/xeq.c     **** 			long long int r;
 12458              		.loc 1 1753 6 view .LVU3309
 12459 0012 D207     		lsls	r2, r2, #31
 12460 0014 0146     		mov	r1, r0
 12461              	.LVL916:
 12462              	.LBB2323:
1756:src/xeq.c     **** 				illegal(op);
 12463              		.loc 1 1756 8 view .LVU3310
 12464 0016 A3F10A03 		sub	r3, r3, #10
 12465              	.LBE2323:
1753:src/xeq.c     **** 			long long int r;
 12466              		.loc 1 1753 6 view .LVU3311
 12467 001a 14D5     		bpl	.L929
 12468              	.LBB2330:
1754:src/xeq.c     **** 
ARM GAS  /tmp/ccqED0AM.s 			page 374


 12469              		.loc 1 1754 4 is_stmt 1 view .LVU3312
1756:src/xeq.c     **** 				illegal(op);
 12470              		.loc 1 1756 4 view .LVU3313
1756:src/xeq.c     **** 				illegal(op);
 12471              		.loc 1 1756 8 is_stmt 0 view .LVU3314
 12472 001c 98B2     		uxth	r0, r3
 12473              	.LVL917:
1756:src/xeq.c     **** 				illegal(op);
 12474              		.loc 1 1756 8 view .LVU3315
 12475 001e 6A46     		mov	r2, sp
 12476 0020 0123     		movs	r3, #1
 12477 0022 FFF7FEFF 		bl	storcl_intop
 12478              	.LVL918:
1756:src/xeq.c     **** 				illegal(op);
 12479              		.loc 1 1756 7 view .LVU3316
 12480 0026 20B1     		cbz	r0, .L930
1757:src/xeq.c     **** 			setlastX();
 12481              		.loc 1 1757 5 is_stmt 1 view .LVU3317
1757:src/xeq.c     **** 			setlastX();
 12482              		.loc 1 1757 5 view .LVU3318
 12483              	.LVL919:
 12484              	.LBB2324:
 12485              	.LBI2324:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 12486              		.loc 1 546 5 view .LVU3319
 12487              	.LBB2325:
 547:src/xeq.c     **** 		Error = e;
 12488              		.loc 1 547 2 view .LVU3320
 547:src/xeq.c     **** 		Error = e;
 12489              		.loc 1 547 12 is_stmt 0 view .LVU3321
 12490 0028 294B     		ldr	r3, .L946+4
 547:src/xeq.c     **** 		Error = e;
 12491              		.loc 1 547 5 view .LVU3322
 12492 002a 1A68     		ldr	r2, [r3]
 12493 002c 0AB9     		cbnz	r2, .L930
 12494              	.LVL920:
 12495              	.LBB2326:
 12496              	.LBI2326:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 12497              		.loc 1 546 5 is_stmt 1 view .LVU3323
 12498              	.LBB2327:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 12499              		.loc 1 548 3 view .LVU3324
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 12500              		.loc 1 548 9 is_stmt 0 view .LVU3325
 12501 002e 0322     		movs	r2, #3
 12502 0030 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 12503              		.loc 1 549 3 is_stmt 1 view .LVU3326
 12504              	.LVL921:
 12505              	.L930:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 12506              		.loc 1 549 3 is_stmt 0 view .LVU3327
 12507              	.LBE2327:
 12508              	.LBE2326:
 12509              	.LBE2325:
 12510              	.LBE2324:
ARM GAS  /tmp/ccqED0AM.s 			page 375


1757:src/xeq.c     **** 			setlastX();
 12511              		.loc 1 1757 5 is_stmt 1 discriminator 1 view .LVU3328
1758:src/xeq.c     **** 			setX_int(r);
 12512              		.loc 1 1758 4 discriminator 1 view .LVU3329
 12513              	.LBB2328:
 12514              	.LBI2328:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 12515              		.loc 1 792 6 discriminator 1 view .LVU3330
 12516              	.LBB2329:
 793:src/xeq.c     **** }
 12517              		.loc 1 793 2 discriminator 1 view .LVU3331
 12518 0032 6421     		movs	r1, #100
 12519 0034 6C20     		movs	r0, #108
 12520 0036 FFF7FEFF 		bl	copyreg_n
 12521              	.LVL922:
 12522              	.LBE2329:
 12523              	.LBE2328:
1759:src/xeq.c     **** 		} else {
 12524              		.loc 1 1759 4 discriminator 1 view .LVU3332
 12525 003a DDE90001 		ldrd	r0, [sp]
 12526 003e FFF7FEFF 		bl	setX_int
 12527              	.LVL923:
 12528              	.LBE2330:
1769:src/xeq.c     **** 
 12529              		.loc 1 1769 1 is_stmt 0 discriminator 1 view .LVU3333
 12530 0042 0BB0     		add	sp, sp, #44
 12531              		.cfi_remember_state
 12532              		.cfi_def_cfa_offset 12
 12533              		@ sp needed
 12534 0044 30BD     		pop	{r4, r5, pc}
 12535              	.LVL924:
 12536              	.L929:
 12537              		.cfi_restore_state
 12538              	.LBB2331:
1761:src/xeq.c     **** 
 12539              		.loc 1 1761 4 is_stmt 1 view .LVU3334
1763:src/xeq.c     **** 				illegal(op);
 12540              		.loc 1 1763 4 view .LVU3335
1763:src/xeq.c     **** 				illegal(op);
 12541              		.loc 1 1763 8 is_stmt 0 view .LVU3336
 12542 0046 6C46     		mov	r4, sp
 12543 0048 98B2     		uxth	r0, r3
 12544              	.LVL925:
1763:src/xeq.c     **** 				illegal(op);
 12545              		.loc 1 1763 8 view .LVU3337
 12546 004a 2246     		mov	r2, r4
 12547 004c 0123     		movs	r3, #1
 12548 004e FFF7FEFF 		bl	storcl_op
 12549              	.LVL926:
1763:src/xeq.c     **** 				illegal(op);
 12550              		.loc 1 1763 7 view .LVU3338
 12551 0052 20B1     		cbz	r0, .L931
1764:src/xeq.c     **** 			setlastX();
 12552              		.loc 1 1764 5 is_stmt 1 view .LVU3339
1764:src/xeq.c     **** 			setlastX();
 12553              		.loc 1 1764 5 view .LVU3340
 12554              	.LVL927:
ARM GAS  /tmp/ccqED0AM.s 			page 376


 12555              	.LBB2332:
 12556              	.LBI2332:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 12557              		.loc 1 546 5 view .LVU3341
 12558              	.LBB2333:
 547:src/xeq.c     **** 		Error = e;
 12559              		.loc 1 547 2 view .LVU3342
 547:src/xeq.c     **** 		Error = e;
 12560              		.loc 1 547 12 is_stmt 0 view .LVU3343
 12561 0054 1E4B     		ldr	r3, .L946+4
 547:src/xeq.c     **** 		Error = e;
 12562              		.loc 1 547 5 view .LVU3344
 12563 0056 1A68     		ldr	r2, [r3]
 12564 0058 0AB9     		cbnz	r2, .L931
 12565              	.LVL928:
 12566              	.LBB2334:
 12567              	.LBI2334:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 12568              		.loc 1 546 5 is_stmt 1 view .LVU3345
 12569              	.LBB2335:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 12570              		.loc 1 548 3 view .LVU3346
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 12571              		.loc 1 548 9 is_stmt 0 view .LVU3347
 12572 005a 0322     		movs	r2, #3
 12573 005c 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 12574              		.loc 1 549 3 is_stmt 1 view .LVU3348
 12575              	.LVL929:
 12576              	.L931:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 12577              		.loc 1 549 3 is_stmt 0 view .LVU3349
 12578              	.LBE2335:
 12579              	.LBE2334:
 12580              	.LBE2333:
 12581              	.LBE2332:
1764:src/xeq.c     **** 			setlastX();
 12582              		.loc 1 1764 5 is_stmt 1 discriminator 1 view .LVU3350
1765:src/xeq.c     **** 			setX(&r);
 12583              		.loc 1 1765 4 discriminator 1 view .LVU3351
 12584              	.LBB2336:
 12585              	.LBI2336:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 12586              		.loc 1 792 6 discriminator 1 view .LVU3352
 12587              	.LBB2337:
 793:src/xeq.c     **** }
 12588              		.loc 1 793 2 discriminator 1 view .LVU3353
 12589 005e 6421     		movs	r1, #100
 12590 0060 6C20     		movs	r0, #108
 12591 0062 FFF7FEFF 		bl	copyreg_n
 12592              	.LVL930:
 12593              	.LBE2337:
 12594              	.LBE2336:
1766:src/xeq.c     **** 		}
 12595              		.loc 1 1766 4 discriminator 1 view .LVU3354
 12596              	.LBB2338:
 12597              	.LBI2338:
ARM GAS  /tmp/ccqED0AM.s 			page 377


 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 12598              		.loc 1 828 6 discriminator 1 view .LVU3355
 12599              	.LBB2339:
 829:src/xeq.c     **** }
 12600              		.loc 1 829 2 discriminator 1 view .LVU3356
 12601 0066 2146     		mov	r1, r4
 12602 0068 6420     		movs	r0, #100
 12603 006a FFF7FEFF 		bl	setRegister
 12604              	.LVL931:
 829:src/xeq.c     **** }
 12605              		.loc 1 829 2 is_stmt 0 discriminator 1 view .LVU3357
 12606              	.LBE2339:
 12607              	.LBE2338:
 12608              	.LBE2331:
1769:src/xeq.c     **** 
 12609              		.loc 1 1769 1 discriminator 1 view .LVU3358
 12610 006e 0BB0     		add	sp, sp, #44
 12611              		.cfi_remember_state
 12612              		.cfi_def_cfa_offset 12
 12613              		@ sp needed
 12614 0070 30BD     		pop	{r4, r5, pc}
 12615              	.LVL932:
 12616              	.L944:
 12617              		.cfi_restore_state
 12618              	.LBB2340:
1748:src/xeq.c     **** 		copyreg(&temp, get_reg_n(index));
 12619              		.loc 1 1748 3 is_stmt 1 view .LVU3359
1749:src/xeq.c     **** 		lift_if_enabled();
 12620              		.loc 1 1749 3 view .LVU3360
 12621              	.LBB2341:
 12622              	.LBB2342:
 12623              	.LBB2343:
 12624              	.LBB2344:
1119:src/xeq.c     **** }
 12625              		.loc 1 1119 24 is_stmt 0 view .LVU3361
 12626 0072 164D     		ldr	r5, .L946
 12627              	.LBE2344:
 12628              	.LBE2343:
 12629              	.LBE2342:
 12630              	.LBE2341:
1749:src/xeq.c     **** 		lift_if_enabled();
 12631              		.loc 1 1749 18 view .LVU3362
 12632 0074 FFF7FEFF 		bl	get_reg_n
 12633              	.LVL933:
 12634              	.LBB2351:
 12635              	.LBB2349:
 12636              	.LBB2347:
 12637              	.LBB2345:
1119:src/xeq.c     **** }
 12638              		.loc 1 1119 24 view .LVU3363
 12639 0078 2B68     		ldr	r3, [r5]
 12640 007a B3F8E827 		ldrh	r2, [r3, #2024]
 12641 007e 44F20103 		movw	r3, #16385
 12642              	.LBE2345:
 12643              	.LBE2347:
 727:src/xeq.c     **** }
 12644              		.loc 1 727 2 view .LVU3364
ARM GAS  /tmp/ccqED0AM.s 			page 378


 12645 0082 1340     		ands	r3, r3, r2
 12646 0084 B3F5804F 		cmp	r3, #16384
 12647 0088 6C46     		mov	r4, sp
 12648              	.LBE2349:
 12649              	.LBE2351:
1749:src/xeq.c     **** 		lift_if_enabled();
 12650              		.loc 1 1749 18 view .LVU3365
 12651 008a 0146     		mov	r1, r0
 12652              	.LVL934:
 12653              	.LBB2352:
 12654              	.LBI2341:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 12655              		.loc 1 726 6 is_stmt 1 view .LVU3366
 12656              	.LBB2350:
 727:src/xeq.c     **** }
 12657              		.loc 1 727 2 view .LVU3367
 12658              	.LBB2348:
 12659              	.LBI2343:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12660              		.loc 1 1118 5 view .LVU3368
 12661              	.LBB2346:
1119:src/xeq.c     **** }
 12662              		.loc 1 1119 2 view .LVU3369
 12663              	.LBE2346:
 12664              	.LBE2348:
 727:src/xeq.c     **** }
 12665              		.loc 1 727 2 is_stmt 0 view .LVU3370
 12666 008c 0CBF     		ite	eq
 12667 008e 1022     		moveq	r2, #16
 12668 0090 0822     		movne	r2, #8
 12669 0092 2046     		mov	r0, r4
 12670              	.LVL935:
 727:src/xeq.c     **** }
 12671              		.loc 1 727 2 view .LVU3371
 12672 0094 FFF7FEFF 		bl	xcopy
 12673              	.LVL936:
 727:src/xeq.c     **** }
 12674              		.loc 1 727 2 view .LVU3372
 12675              	.LBE2350:
 12676              	.LBE2352:
1750:src/xeq.c     **** 		copyreg(StackBase, &temp);
 12677              		.loc 1 1750 3 is_stmt 1 view .LVU3373
 12678              	.LBB2353:
 12679              	.LBI2353:
 747:src/xeq.c     **** 	if (get_lift())
 12680              		.loc 1 747 6 view .LVU3374
 12681              	.LBB2354:
 748:src/xeq.c     **** 		lift();
 12682              		.loc 1 748 2 view .LVU3375
 12683              	.LBB2355:
 12684              	.LBI2355:
 743:src/xeq.c     **** 	return State2.state_lift;
 12685              		.loc 1 743 12 view .LVU3376
 12686              	.LBB2356:
 744:src/xeq.c     **** }
 12687              		.loc 1 744 2 view .LVU3377
 744:src/xeq.c     **** }
ARM GAS  /tmp/ccqED0AM.s 			page 379


 12688              		.loc 1 744 15 is_stmt 0 view .LVU3378
 12689 0098 0E4B     		ldr	r3, .L946+8
 12690 009a DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 12691              	.LBE2356:
 12692              	.LBE2355:
 748:src/xeq.c     **** 		lift();
 12693              		.loc 1 748 5 view .LVU3379
 12694 009c 5906     		lsls	r1, r3, #25
 12695 009e 11D4     		bmi	.L945
 12696              	.L926:
 12697              	.LBE2354:
 12698              	.LBE2353:
1751:src/xeq.c     **** 	} else {
 12699              		.loc 1 1751 3 is_stmt 1 view .LVU3380
 12700              	.LBB2358:
 12701              	.LBB2359:
 12702              	.LBB2360:
 12703              	.LBB2361:
1119:src/xeq.c     **** }
 12704              		.loc 1 1119 24 is_stmt 0 view .LVU3381
 12705 00a0 2A68     		ldr	r2, [r5]
 12706              	.LBE2361:
 12707              	.LBE2360:
 12708              	.LBE2359:
 12709              	.LBE2358:
1751:src/xeq.c     **** 	} else {
 12710              		.loc 1 1751 3 view .LVU3382
 12711 00a2 0D4B     		ldr	r3, .L946+12
 12712              	.LVL937:
 12713              	.LBB2367:
 12714              	.LBI2358:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 12715              		.loc 1 726 6 is_stmt 1 view .LVU3383
 12716              	.LBB2366:
 727:src/xeq.c     **** }
 12717              		.loc 1 727 2 view .LVU3384
 12718              	.LBB2364:
 12719              	.LBI2360:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12720              		.loc 1 1118 5 view .LVU3385
 12721              	.LBB2362:
1119:src/xeq.c     **** }
 12722              		.loc 1 1119 2 view .LVU3386
1119:src/xeq.c     **** }
 12723              		.loc 1 1119 24 is_stmt 0 view .LVU3387
 12724 00a4 B2F8E827 		ldrh	r2, [r2, #2024]
 12725              	.LBE2362:
 12726              	.LBE2364:
 727:src/xeq.c     **** }
 12727              		.loc 1 727 2 view .LVU3388
 12728 00a8 1868     		ldr	r0, [r3]
 12729              	.LBB2365:
 12730              	.LBB2363:
1119:src/xeq.c     **** }
 12731              		.loc 1 1119 24 view .LVU3389
 12732 00aa 44F20103 		movw	r3, #16385
 12733              	.LVL938:
ARM GAS  /tmp/ccqED0AM.s 			page 380


1119:src/xeq.c     **** }
 12734              		.loc 1 1119 24 view .LVU3390
 12735              	.LBE2363:
 12736              	.LBE2365:
 727:src/xeq.c     **** }
 12737              		.loc 1 727 2 view .LVU3391
 12738 00ae 1340     		ands	r3, r3, r2
 12739 00b0 B3F5804F 		cmp	r3, #16384
 12740 00b4 2146     		mov	r1, r4
 12741 00b6 0CBF     		ite	eq
 12742 00b8 1022     		moveq	r2, #16
 12743 00ba 0822     		movne	r2, #8
 12744 00bc FFF7FEFF 		bl	xcopy
 12745              	.LVL939:
 727:src/xeq.c     **** }
 12746              		.loc 1 727 2 view .LVU3392
 12747              	.LBE2366:
 12748              	.LBE2367:
 12749              	.LBE2340:
1769:src/xeq.c     **** 
 12750              		.loc 1 1769 1 view .LVU3393
 12751 00c0 0BB0     		add	sp, sp, #44
 12752              		.cfi_remember_state
 12753              		.cfi_def_cfa_offset 12
 12754              		@ sp needed
 12755 00c2 30BD     		pop	{r4, r5, pc}
 12756              	.L945:
 12757              		.cfi_restore_state
 12758              	.LBB2369:
 12759              	.LBB2368:
 12760              	.LBB2357:
 749:src/xeq.c     **** }
 12761              		.loc 1 749 3 is_stmt 1 view .LVU3394
 12762 00c4 FFF7FEFF 		bl	lift
 12763              	.LVL940:
 12764 00c8 EAE7     		b	.L926
 12765              	.L947:
 12766 00ca 00BF     		.align	2
 12767              	.L946:
 12768 00cc 00000000 		.word	main_ram
 12769 00d0 00000000 		.word	Error
 12770 00d4 00000000 		.word	StateWhileOn
 12771 00d8 00000000 		.word	StackBase
 12772              	.LBE2357:
 12773              	.LBE2368:
 12774              	.LBE2369:
 12775              		.cfi_endproc
 12776              	.LFE118:
 12778              		.section	.text.setX_int_sgn,"ax",%progbits
 12779              		.align	1
 12780              		.p2align 2,,3
 12781              		.global	setX_int_sgn
 12782              		.syntax unified
 12783              		.thumb
 12784              		.thumb_func
 12785              		.fpu fpv4-sp-d16
 12787              	setX_int_sgn:
ARM GAS  /tmp/ccqED0AM.s 			page 381


 12788              	.LVL941:
 12789              	.LFB103:
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 12790              		.loc 1 1509 56 view -0
 12791              		.cfi_startproc
 12792              		@ args = 0, pretend = 0, frame = 0
 12793              		@ frame_needed = 0, uses_anonymous_args = 0
1510:src/xeq.c     **** }
 12794              		.loc 1 1510 2 view .LVU3396
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 12795              		.loc 1 1509 56 is_stmt 0 view .LVU3397
 12796 0000 00B5     		push	{lr}
 12797              		.cfi_def_cfa_offset 4
 12798              		.cfi_offset 14, -4
 12799 0002 83B0     		sub	sp, sp, #12
 12800              		.cfi_def_cfa_offset 16
1510:src/xeq.c     **** }
 12801              		.loc 1 1510 2 view .LVU3398
 12802 0004 0B46     		mov	r3, r1
 12803 0006 0092     		str	r2, [sp]
 12804 0008 0246     		mov	r2, r0
 12805              	.LVL942:
1510:src/xeq.c     **** }
 12806              		.loc 1 1510 2 view .LVU3399
 12807 000a 6420     		movs	r0, #100
 12808              	.LVL943:
1510:src/xeq.c     **** }
 12809              		.loc 1 1510 2 view .LVU3400
 12810 000c FFF7FEFF 		bl	set_reg_n_int_sgn
 12811              	.LVL944:
1511:src/xeq.c     **** 
 12812              		.loc 1 1511 1 view .LVU3401
 12813 0010 03B0     		add	sp, sp, #12
 12814              		.cfi_def_cfa_offset 4
 12815              		@ sp needed
 12816 0012 5DF804FB 		ldr	pc, [sp], #4
 12817              		.cfi_endproc
 12818              	.LFE103:
 12820 0016 00BF     		.section	.text.zero_regs,"ax",%progbits
 12821              		.align	1
 12822              		.p2align 2,,3
 12823              		.global	zero_regs
 12824              		.syntax unified
 12825              		.thumb
 12826              		.thumb_func
 12827              		.fpu fpv4-sp-d16
 12829              	zero_regs:
 12830              	.LVL945:
 12831              	.LFB104:
1518:src/xeq.c     **** #if 0
 12832              		.loc 1 1518 39 is_stmt 1 view -0
 12833              		.cfi_startproc
 12834              		@ args = 0, pretend = 0, frame = 0
 12835              		@ frame_needed = 0, uses_anonymous_args = 0
 12836              		@ link register save eliminated.
1533:src/xeq.c     **** #endif
 12837              		.loc 1 1533 2 view .LVU3403
ARM GAS  /tmp/ccqED0AM.s 			page 382


 12838              	.LBB2370:
 12839              	.LBI2370:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12840              		.loc 1 1118 5 view .LVU3404
 12841              	.LBB2371:
1119:src/xeq.c     **** }
 12842              		.loc 1 1119 2 view .LVU3405
1119:src/xeq.c     **** }
 12843              		.loc 1 1119 24 is_stmt 0 view .LVU3406
 12844 0000 084B     		ldr	r3, .L951
 12845 0002 1B68     		ldr	r3, [r3]
 12846 0004 B3F8E827 		ldrh	r2, [r3, #2024]
 12847 0008 44F20103 		movw	r3, #16385
 12848 000c 1340     		ands	r3, r3, r2
 12849 000e A3F58043 		sub	r3, r3, #16384
 12850 0012 B3FA83F3 		clz	r3, r3
 12851 0016 5B09     		lsrs	r3, r3, #5
 12852              	.LBE2371:
 12853              	.LBE2370:
1533:src/xeq.c     **** #endif
 12854              		.loc 1 1533 24 view .LVU3407
 12855 0018 0333     		adds	r3, r3, #3
1533:src/xeq.c     **** #endif
 12856              		.loc 1 1533 2 view .LVU3408
 12857 001a 01FA03F2 		lsl	r2, r1, r3
 12858 001e 0021     		movs	r1, #0
 12859              	.LVL946:
1533:src/xeq.c     **** #endif
 12860              		.loc 1 1533 2 view .LVU3409
 12861 0020 FFF7FEBF 		b	xset
 12862              	.LVL947:
 12863              	.L952:
1533:src/xeq.c     **** #endif
 12864              		.loc 1 1533 2 view .LVU3410
 12865              		.align	2
 12866              	.L951:
 12867 0024 00000000 		.word	main_ram
 12868              		.cfi_endproc
 12869              	.LFE104:
 12871              		.section	.text.move_regs,"ax",%progbits
 12872              		.align	1
 12873              		.p2align 2,,3
 12874              		.global	move_regs
 12875              		.syntax unified
 12876              		.thumb
 12877              		.thumb_func
 12878              		.fpu fpv4-sp-d16
 12880              	move_regs:
 12881              	.LVL948:
 12882              	.LFB105:
1537:src/xeq.c     **** 	if (is_dblmode())
 12883              		.loc 1 1537 54 is_stmt 1 view -0
 12884              		.cfi_startproc
 12885              		@ args = 0, pretend = 0, frame = 0
 12886              		@ frame_needed = 0, uses_anonymous_args = 0
 12887              		@ link register save eliminated.
1538:src/xeq.c     **** 		n <<= 1;
ARM GAS  /tmp/ccqED0AM.s 			page 383


 12888              		.loc 1 1538 2 view .LVU3412
 12889              	.LBB2372:
 12890              	.LBI2372:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12891              		.loc 1 1118 5 view .LVU3413
 12892              	.LBB2373:
1119:src/xeq.c     **** }
 12893              		.loc 1 1119 2 view .LVU3414
1119:src/xeq.c     **** }
 12894              		.loc 1 1119 24 is_stmt 0 view .LVU3415
 12895 0000 084B     		ldr	r3, .L956
 12896 0002 1B68     		ldr	r3, [r3]
 12897              	.LBE2373:
 12898              	.LBE2372:
1537:src/xeq.c     **** 	if (is_dblmode())
 12899              		.loc 1 1537 54 view .LVU3416
 12900 0004 10B4     		push	{r4}
 12901              		.cfi_def_cfa_offset 4
 12902              		.cfi_offset 4, -4
 12903              	.LBB2375:
 12904              	.LBB2374:
1119:src/xeq.c     **** }
 12905              		.loc 1 1119 24 view .LVU3417
 12906 0006 B3F8E847 		ldrh	r4, [r3, #2024]
 12907 000a 44F20103 		movw	r3, #16385
 12908              	.LBE2374:
 12909              	.LBE2375:
1538:src/xeq.c     **** 		n <<= 1;
 12910              		.loc 1 1538 5 view .LVU3418
 12911 000e 2340     		ands	r3, r3, r4
 12912 0010 B3F5804F 		cmp	r3, #16384
1539:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 12913              		.loc 1 1539 3 is_stmt 1 view .LVU3419
1539:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 12914              		.loc 1 1539 5 is_stmt 0 view .LVU3420
 12915 0014 08BF     		it	eq
 12916 0016 5200     		lsleq	r2, r2, #1
 12917              	.LVL949:
1540:src/xeq.c     **** }
 12918              		.loc 1 1540 2 is_stmt 1 view .LVU3421
1541:src/xeq.c     **** 
 12919              		.loc 1 1541 1 is_stmt 0 view .LVU3422
 12920 0018 5DF8044B 		ldr	r4, [sp], #4
 12921              		.cfi_restore 4
 12922              		.cfi_def_cfa_offset 0
1540:src/xeq.c     **** }
 12923              		.loc 1 1540 2 view .LVU3423
 12924 001c D200     		lsls	r2, r2, #3
 12925              	.LVL950:
1540:src/xeq.c     **** }
 12926              		.loc 1 1540 2 view .LVU3424
 12927 001e FFF7FEBF 		b	xcopy
 12928              	.LVL951:
 12929              	.L957:
1540:src/xeq.c     **** }
 12930              		.loc 1 1540 2 view .LVU3425
 12931 0022 00BF     		.align	2
ARM GAS  /tmp/ccqED0AM.s 			page 384


 12932              	.L956:
 12933 0024 00000000 		.word	main_ram
 12934              		.cfi_endproc
 12935              	.LFE105:
 12937              		.section	.text.zero_X,"ax",%progbits
 12938              		.align	1
 12939              		.p2align 2,,3
 12940              		.global	zero_X
 12941              		.syntax unified
 12942              		.thumb
 12943              		.thumb_func
 12944              		.fpu fpv4-sp-d16
 12946              	zero_X:
 12947              	.LFB107:
1550:src/xeq.c     **** 	set_zero(StackBase);
 12948              		.loc 1 1550 19 is_stmt 1 view -0
 12949              		.cfi_startproc
 12950              		@ args = 0, pretend = 0, frame = 0
 12951              		@ frame_needed = 0, uses_anonymous_args = 0
 12952              		@ link register save eliminated.
1551:src/xeq.c     **** }
 12953              		.loc 1 1551 2 view .LVU3427
 12954 0000 014B     		ldr	r3, .L959
 12955 0002 1868     		ldr	r0, [r3]
 12956 0004 FFF7FEBF 		b	set_zero
 12957              	.LVL952:
 12958              	.L960:
 12959              		.align	2
 12960              	.L959:
 12961 0008 00000000 		.word	StackBase
 12962              		.cfi_endproc
 12963              	.LFE107:
 12965              		.section	.text.zero_Y,"ax",%progbits
 12966              		.align	1
 12967              		.p2align 2,,3
 12968              		.global	zero_Y
 12969              		.syntax unified
 12970              		.thumb
 12971              		.thumb_func
 12972              		.fpu fpv4-sp-d16
 12974              	zero_Y:
 12975              	.LFB108:
1554:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 12976              		.loc 1 1554 19 view -0
 12977              		.cfi_startproc
 12978              		@ args = 0, pretend = 0, frame = 0
 12979              		@ frame_needed = 0, uses_anonymous_args = 0
1555:src/xeq.c     **** }
 12980              		.loc 1 1555 2 view .LVU3429
1554:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 12981              		.loc 1 1554 19 is_stmt 0 view .LVU3430
 12982 0000 08B5     		push	{r3, lr}
 12983              		.cfi_def_cfa_offset 8
 12984              		.cfi_offset 3, -8
 12985              		.cfi_offset 14, -4
1555:src/xeq.c     **** }
 12986              		.loc 1 1555 2 view .LVU3431
ARM GAS  /tmp/ccqED0AM.s 			page 385


 12987 0002 6520     		movs	r0, #101
 12988 0004 FFF7FEFF 		bl	get_reg_n
 12989              	.LVL953:
1556:src/xeq.c     **** 
 12990              		.loc 1 1556 1 view .LVU3432
 12991 0008 BDE80840 		pop	{r3, lr}
 12992              		.cfi_restore 14
 12993              		.cfi_restore 3
 12994              		.cfi_def_cfa_offset 0
1555:src/xeq.c     **** }
 12995              		.loc 1 1555 2 view .LVU3433
 12996 000c FFF7FEBF 		b	set_zero
 12997              	.LVL954:
 12998              		.cfi_endproc
 12999              	.LFE108:
 13001              		.section	.text.clrx,"ax",%progbits
 13002              		.align	1
 13003              		.p2align 2,,3
 13004              		.global	clrx
 13005              		.syntax unified
 13006              		.thumb
 13007              		.thumb_func
 13008              		.fpu fpv4-sp-d16
 13010              	clrx:
 13011              	.LVL955:
 13012              	.LFB109:
1558:src/xeq.c     **** 	zero_X();
 13013              		.loc 1 1558 26 is_stmt 1 view -0
 13014              		.cfi_startproc
 13015              		@ args = 0, pretend = 0, frame = 0
 13016              		@ frame_needed = 0, uses_anonymous_args = 0
1559:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 13017              		.loc 1 1559 2 view .LVU3435
 13018              	.LBB2376:
 13019              	.LBI2376:
1550:src/xeq.c     **** 	set_zero(StackBase);
 13020              		.loc 1 1550 6 view .LVU3436
 13021              	.LBB2377:
1551:src/xeq.c     **** }
 13022              		.loc 1 1551 2 view .LVU3437
 13023 0000 1A4B     		ldr	r3, .L969
 13024              	.LBE2377:
 13025              	.LBE2376:
1558:src/xeq.c     **** 	zero_X();
 13026              		.loc 1 1558 26 is_stmt 0 view .LVU3438
 13027 0002 10B5     		push	{r4, lr}
 13028              		.cfi_def_cfa_offset 8
 13029              		.cfi_offset 4, -8
 13030              		.cfi_offset 14, -4
1561:src/xeq.c     **** 		zero_Y();
 13031              		.loc 1 1561 6 view .LVU3439
 13032 0004 1A4C     		ldr	r4, .L969+4
 13033              	.LBB2379:
 13034              	.LBB2378:
1551:src/xeq.c     **** }
 13035              		.loc 1 1551 2 view .LVU3440
 13036 0006 1868     		ldr	r0, [r3]
ARM GAS  /tmp/ccqED0AM.s 			page 386


 13037              	.LVL956:
1551:src/xeq.c     **** }
 13038              		.loc 1 1551 2 view .LVU3441
 13039 0008 FFF7FEFF 		bl	set_zero
 13040              	.LVL957:
 13041              	.LBE2378:
 13042              	.LBE2379:
1561:src/xeq.c     **** 		zero_Y();
 13043              		.loc 1 1561 2 is_stmt 1 view .LVU3442
1561:src/xeq.c     **** 		zero_Y();
 13044              		.loc 1 1561 6 is_stmt 0 view .LVU3443
 13045 000c 2368     		ldr	r3, [r4]
 13046 000e 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
1561:src/xeq.c     **** 		zero_Y();
 13047              		.loc 1 1561 5 view .LVU3444
 13048 0012 03F04103 		and	r3, r3, #65
 13049 0016 412B     		cmp	r3, #65
 13050 0018 05D0     		beq	.L967
1571:src/xeq.c     **** }
 13051              		.loc 1 1571 2 is_stmt 1 view .LVU3445
 13052              	.LBB2380:
 13053              	.LBI2380:
 771:src/xeq.c     ****     State2.state_lift = 0;
 13054              		.loc 1 771 13 view .LVU3446
 13055              	.LBB2381:
 772:src/xeq.c     **** }
 13056              		.loc 1 772 5 view .LVU3447
 772:src/xeq.c     **** }
 13057              		.loc 1 772 23 is_stmt 0 view .LVU3448
 13058 001a 164B     		ldr	r3, .L969+8
 13059 001c DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 13060 001e 6FF38612 		bfc	r2, #6, #1
 13061 0022 DA75     		strb	r2, [r3, #23]
 13062              	.LBE2381:
 13063              	.LBE2380:
1572:src/xeq.c     **** 
 13064              		.loc 1 1572 1 view .LVU3449
 13065 0024 10BD     		pop	{r4, pc}
 13066              	.L967:
1562:src/xeq.c     **** 		if (POLAR_DISPLAY) {
 13067              		.loc 1 1562 3 is_stmt 1 view .LVU3450
 13068              	.LBB2383:
 13069              	.LBI2383:
1554:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 13070              		.loc 1 1554 6 view .LVU3451
 13071              	.LBB2384:
1555:src/xeq.c     **** }
 13072              		.loc 1 1555 2 view .LVU3452
 13073 0026 6520     		movs	r0, #101
 13074 0028 FFF7FEFF 		bl	get_reg_n
 13075              	.LVL958:
 13076 002c FFF7FEFF 		bl	set_zero
 13077              	.LVL959:
 13078              	.LBE2384:
 13079              	.LBE2383:
1563:src/xeq.c     **** 			set_zero(get_reg_n(regJ_idx));
 13080              		.loc 1 1563 3 view .LVU3453
ARM GAS  /tmp/ccqED0AM.s 			page 387


1563:src/xeq.c     **** 			set_zero(get_reg_n(regJ_idx));
 13081              		.loc 1 1563 7 is_stmt 0 view .LVU3454
 13082 0030 2368     		ldr	r3, [r4]
1563:src/xeq.c     **** 			set_zero(get_reg_n(regJ_idx));
 13083              		.loc 1 1563 6 view .LVU3455
 13084 0032 93F9AC27 		ldrsb	r2, [r3, #1964]
 13085 0036 002A     		cmp	r2, #0
 13086 0038 0BDB     		blt	.L968
 13087              	.L965:
1567:src/xeq.c     **** 		CLEAR_IMAG;
 13088              		.loc 1 1567 3 is_stmt 1 view .LVU3456
1568:src/xeq.c     **** 	}
 13089              		.loc 1 1568 3 view .LVU3457
1567:src/xeq.c     **** 		CLEAR_IMAG;
 13090              		.loc 1 1567 3 is_stmt 0 view .LVU3458
 13091 003a 93F8AC27 		ldrb	r2, [r3, #1964]	@ zero_extendqisi2
 13092 003e 22F00602 		bic	r2, r2, #6
 13093 0042 83F8AC27 		strb	r2, [r3, #1964]
1571:src/xeq.c     **** }
 13094              		.loc 1 1571 2 is_stmt 1 view .LVU3459
 13095              	.LBB2385:
 771:src/xeq.c     ****     State2.state_lift = 0;
 13096              		.loc 1 771 13 view .LVU3460
 13097              	.LBB2382:
 772:src/xeq.c     **** }
 13098              		.loc 1 772 5 view .LVU3461
 772:src/xeq.c     **** }
 13099              		.loc 1 772 23 is_stmt 0 view .LVU3462
 13100 0046 0B4B     		ldr	r3, .L969+8
 13101 0048 DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 13102 004a 6FF38612 		bfc	r2, #6, #1
 13103 004e DA75     		strb	r2, [r3, #23]
 13104              	.LBE2382:
 13105              	.LBE2385:
1572:src/xeq.c     **** 
 13106              		.loc 1 1572 1 view .LVU3463
 13107 0050 10BD     		pop	{r4, pc}
 13108              	.L968:
1564:src/xeq.c     **** 			set_zero(get_reg_n(regK_idx));
 13109              		.loc 1 1564 4 is_stmt 1 view .LVU3464
 13110 0052 6E20     		movs	r0, #110
 13111 0054 FFF7FEFF 		bl	get_reg_n
 13112              	.LVL960:
 13113 0058 FFF7FEFF 		bl	set_zero
 13114              	.LVL961:
1565:src/xeq.c     **** 		}
 13115              		.loc 1 1565 4 view .LVU3465
 13116 005c 6F20     		movs	r0, #111
 13117 005e FFF7FEFF 		bl	get_reg_n
 13118              	.LVL962:
 13119 0062 FFF7FEFF 		bl	set_zero
 13120              	.LVL963:
 13121 0066 2368     		ldr	r3, [r4]
 13122 0068 E7E7     		b	.L965
 13123              	.L970:
 13124 006a 00BF     		.align	2
 13125              	.L969:
ARM GAS  /tmp/ccqED0AM.s 			page 388


 13126 006c 00000000 		.word	StackBase
 13127 0070 00000000 		.word	main_ram
 13128 0074 00000000 		.word	StateWhileOn
 13129              		.cfi_endproc
 13130              	.LFE109:
 13132              		.section	.text.clrstk,"ax",%progbits
 13133              		.align	1
 13134              		.p2align 2,,3
 13135              		.global	clrstk
 13136              		.syntax unified
 13137              		.thumb
 13138              		.thumb_func
 13139              		.fpu fpv4-sp-d16
 13141              	clrstk:
 13142              	.LVL964:
 13143              	.LFB110:
1576:src/xeq.c     **** 	zero_regs(StackBase, stack_size());
 13144              		.loc 1 1576 28 view -0
 13145              		.cfi_startproc
 13146              		@ args = 0, pretend = 0, frame = 0
 13147              		@ frame_needed = 0, uses_anonymous_args = 0
1577:src/xeq.c     **** 	set_lift();
 13148              		.loc 1 1577 2 view .LVU3467
1576:src/xeq.c     **** 	zero_regs(StackBase, stack_size());
 13149              		.loc 1 1576 28 is_stmt 0 view .LVU3468
 13150 0000 08B5     		push	{r3, lr}
 13151              		.cfi_def_cfa_offset 8
 13152              		.cfi_offset 3, -8
 13153              		.cfi_offset 14, -4
 13154              	.LBB2386:
 13155              	.LBB2387:
 713:src/xeq.c     **** 		return 4;
 13156              		.loc 1 713 8 view .LVU3469
 13157 0002 164B     		ldr	r3, .L978
 13158              	.LBE2387:
 13159              	.LBE2386:
1577:src/xeq.c     **** 	set_lift();
 13160              		.loc 1 1577 2 view .LVU3470
 13161 0004 164A     		ldr	r2, .L978+4
 13162              	.LBB2393:
 13163              	.LBB2390:
 713:src/xeq.c     **** 		return 4;
 13164              		.loc 1 713 8 view .LVU3471
 13165 0006 1B68     		ldr	r3, [r3]
 13166              	.LBE2390:
 13167              	.LBE2393:
1577:src/xeq.c     **** 	set_lift();
 13168              		.loc 1 1577 2 view .LVU3472
 13169 0008 1068     		ldr	r0, [r2]
 13170              	.LVL965:
 13171              	.LBB2394:
 13172              	.LBI2386:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 13173              		.loc 1 712 5 is_stmt 1 view .LVU3473
 13174              	.LBB2391:
 713:src/xeq.c     **** 		return 4;
 13175              		.loc 1 713 2 view .LVU3474
ARM GAS  /tmp/ccqED0AM.s 			page 389


 713:src/xeq.c     **** 		return 4;
 13176              		.loc 1 713 6 is_stmt 0 view .LVU3475
 13177 000a 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 13178              		.loc 1 713 5 view .LVU3476
 13179 000e 1207     		lsls	r2, r2, #28
 13180 0010 22D5     		bpl	.L973
 13181              	.LBB2388:
 13182              	.LBI2388:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 13183              		.loc 1 185 5 is_stmt 1 view .LVU3477
 13184              	.LBB2389:
 186:src/xeq.c     **** }
 13185              		.loc 1 186 2 view .LVU3478
 186:src/xeq.c     **** }
 13186              		.loc 1 186 9 is_stmt 0 view .LVU3479
 13187 0012 B3F8E027 		ldrh	r2, [r3, #2016]
 13188              	.LBE2389:
 13189              	.LBE2388:
 713:src/xeq.c     **** 		return 4;
 13190              		.loc 1 713 27 view .LVU3480
 13191 0016 920B     		lsrs	r2, r2, #14
 13192 0018 032A     		cmp	r2, #3
 13193 001a 15D0     		beq	.L977
 715:src/xeq.c     **** }
 13194              		.loc 1 715 9 view .LVU3481
 13195 001c 0822     		movs	r2, #8
 13196              	.L972:
 13197              	.LVL966:
 715:src/xeq.c     **** }
 13198              		.loc 1 715 9 view .LVU3482
 13199              	.LBE2391:
 13200              	.LBE2394:
 13201              	.LBB2395:
 13202              	.LBI2395:
1518:src/xeq.c     **** #if 0
 13203              		.loc 1 1518 6 is_stmt 1 view .LVU3483
 13204              	.LBB2396:
1533:src/xeq.c     **** #endif
 13205              		.loc 1 1533 2 view .LVU3484
 13206              	.LBB2397:
 13207              	.LBI2397:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13208              		.loc 1 1118 5 view .LVU3485
 13209              	.LBB2398:
1119:src/xeq.c     **** }
 13210              		.loc 1 1119 2 view .LVU3486
1119:src/xeq.c     **** }
 13211              		.loc 1 1119 24 is_stmt 0 view .LVU3487
 13212 001e B3F8E817 		ldrh	r1, [r3, #2024]
 13213 0022 44F20103 		movw	r3, #16385
 13214 0026 0B40     		ands	r3, r3, r1
 13215 0028 A3F58043 		sub	r3, r3, #16384
 13216 002c B3FA83F3 		clz	r3, r3
 13217 0030 5B09     		lsrs	r3, r3, #5
 13218              	.LBE2398:
 13219              	.LBE2397:
ARM GAS  /tmp/ccqED0AM.s 			page 390


1533:src/xeq.c     **** #endif
 13220              		.loc 1 1533 24 view .LVU3488
 13221 0032 0333     		adds	r3, r3, #3
1533:src/xeq.c     **** #endif
 13222              		.loc 1 1533 2 view .LVU3489
 13223 0034 9A40     		lsls	r2, r2, r3
 13224              	.LVL967:
1533:src/xeq.c     **** #endif
 13225              		.loc 1 1533 2 view .LVU3490
 13226 0036 0021     		movs	r1, #0
 13227 0038 FFF7FEFF 		bl	xset
 13228              	.LVL968:
1533:src/xeq.c     **** #endif
 13229              		.loc 1 1533 2 view .LVU3491
 13230              	.LBE2396:
 13231              	.LBE2395:
1578:src/xeq.c     **** }
 13232              		.loc 1 1578 2 is_stmt 1 view .LVU3492
 13233              	.LBB2399:
 13234              	.LBI2399:
 767:src/xeq.c     ****     State2.state_lift = 1;
 13235              		.loc 1 767 6 view .LVU3493
 13236              	.LBB2400:
 768:src/xeq.c     **** }
 13237              		.loc 1 768 5 view .LVU3494
 768:src/xeq.c     **** }
 13238              		.loc 1 768 23 is_stmt 0 view .LVU3495
 13239 003c 094A     		ldr	r2, .L978+8
 13240 003e D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 13241 0040 43F04003 		orr	r3, r3, #64
 13242 0044 D375     		strb	r3, [r2, #23]
 13243              	.LBE2400:
 13244              	.LBE2399:
1579:src/xeq.c     **** 
 13245              		.loc 1 1579 1 view .LVU3496
 13246 0046 08BD     		pop	{r3, pc}
 13247              	.L977:
 13248              	.LBB2401:
 13249              	.LBB2392:
 713:src/xeq.c     **** 		return 4;
 13250              		.loc 1 713 44 view .LVU3497
 13251 0048 074A     		ldr	r2, .L978+12
 713:src/xeq.c     **** 		return 4;
 13252              		.loc 1 713 41 view .LVU3498
 13253 004a 92F90120 		ldrsb	r2, [r2, #1]
 13254 004e 002A     		cmp	r2, #0
 714:src/xeq.c     **** 	return 8;
 13255              		.loc 1 714 10 view .LVU3499
 13256 0050 B4BF     		ite	lt
 13257 0052 0822     		movlt	r2, #8
 13258 0054 0422     		movge	r2, #4
 13259 0056 E2E7     		b	.L972
 13260              	.L973:
 13261 0058 0422     		movs	r2, #4
 13262 005a E0E7     		b	.L972
 13263              	.L979:
 13264              		.align	2
ARM GAS  /tmp/ccqED0AM.s 			page 391


 13265              	.L978:
 13266 005c 00000000 		.word	main_ram
 13267 0060 00000000 		.word	StackBase
 13268 0064 00000000 		.word	StateWhileOn
 13269 0068 00000000 		.word	XromParams
 13270              	.LBE2392:
 13271              	.LBE2401:
 13272              		.cfi_endproc
 13273              	.LFE110:
 13275              		.section	.text.clrreg,"ax",%progbits
 13276              		.align	1
 13277              		.p2align 2,,3
 13278              		.global	clrreg
 13279              		.syntax unified
 13280              		.thumb
 13281              		.thumb_func
 13282              		.fpu fpv4-sp-d16
 13284              	clrreg:
 13285              	.LVL969:
 13286              	.LFB111:
1584:src/xeq.c     **** 	const int local = local_regs();
 13287              		.loc 1 1584 28 is_stmt 1 view -0
 13288              		.cfi_startproc
 13289              		@ args = 0, pretend = 0, frame = 0
 13290              		@ frame_needed = 0, uses_anonymous_args = 0
1585:src/xeq.c     **** 	process_cmdline_set_lift();
 13291              		.loc 1 1585 2 view .LVU3501
 13292              	.LBB2402:
 13293              	.LBI2402:
 233:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 13294              		.loc 1 233 5 view .LVU3502
 13295              	.LBE2402:
 234:src/xeq.c     **** }
 13296              		.loc 1 234 2 view .LVU3503
 13297              	.LBB2433:
 13298              	.LBB2403:
 13299              	.LBI2403:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 13300              		.loc 1 225 5 view .LVU3504
 13301              	.LBB2404:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 13302              		.loc 1 226 2 view .LVU3505
 13303              	.LBB2405:
 13304              	.LBI2405:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13305              		.loc 1 1118 5 view .LVU3506
 13306              	.LBB2406:
1119:src/xeq.c     **** }
 13307              		.loc 1 1119 2 view .LVU3507
 13308              	.LBE2406:
 13309              	.LBE2405:
 13310              	.LBE2404:
 13311              	.LBE2403:
 13312              	.LBE2433:
1584:src/xeq.c     **** 	const int local = local_regs();
 13313              		.loc 1 1584 28 is_stmt 0 view .LVU3508
 13314 0000 70B5     		push	{r4, r5, r6, lr}
ARM GAS  /tmp/ccqED0AM.s 			page 392


 13315              		.cfi_def_cfa_offset 16
 13316              		.cfi_offset 4, -16
 13317              		.cfi_offset 5, -12
 13318              		.cfi_offset 6, -8
 13319              		.cfi_offset 14, -4
 13320              	.LBB2434:
 13321              	.LBB2429:
 13322              	.LBB2425:
 13323              	.LBB2410:
 13324              	.LBB2407:
1119:src/xeq.c     **** }
 13325              		.loc 1 1119 12 view .LVU3509
 13326 0002 474C     		ldr	r4, .L1000
 13327 0004 2268     		ldr	r2, [r4]
 13328              	.LVL970:
1119:src/xeq.c     **** }
 13329              		.loc 1 1119 12 view .LVU3510
 13330              	.LBE2407:
 13331              	.LBE2410:
 227:src/xeq.c     **** }
 13332              		.loc 1 227 2 is_stmt 1 view .LVU3511
 13333              	.LBB2411:
 13334              	.LBI2411:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 13335              		.loc 1 217 5 view .LVU3512
 13336              	.LBB2412:
 218:src/xeq.c     **** }
 13337              		.loc 1 218 2 view .LVU3513
 218:src/xeq.c     **** }
 13338              		.loc 1 218 9 is_stmt 0 view .LVU3514
 13339 0006 B2F8DE37 		ldrh	r3, [r2, #2014]
 13340 000a 43F34A13 		sbfx	r3, r3, #5, #11
 218:src/xeq.c     **** }
 13341              		.loc 1 218 57 view .LVU3515
 13342 000e 002B     		cmp	r3, #0
 13343 0010 58DB     		blt	.L996
 13344              	.LVL971:
 218:src/xeq.c     **** }
 13345              		.loc 1 218 57 view .LVU3516
 13346              	.LBE2412:
 13347              	.LBE2411:
 13348              	.LBE2425:
 13349              	.LBE2429:
 13350              	.LBE2434:
1586:src/xeq.c     **** 
 13351              		.loc 1 1586 2 is_stmt 1 view .LVU3517
 13352              	.LBB2435:
 13353              	.LBI2435:
1332:src/xeq.c     **** 	process_cmdline();
 13354              		.loc 1 1332 6 view .LVU3518
 13355              	.LBE2435:
1333:src/xeq.c     **** 	set_lift();
 13356              		.loc 1 1333 2 view .LVU3519
 13357              	.LBB2446:
 13358              	.LBB2436:
 13359              	.LBI2436:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
ARM GAS  /tmp/ccqED0AM.s 			page 393


 13360              		.loc 1 1226 6 view .LVU3520
 13361              	.LBB2437:
1227:src/xeq.c     **** 
 13362              		.loc 1 1227 2 view .LVU3521
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13363              		.loc 1 1229 2 view .LVU3522
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13364              		.loc 1 1229 6 is_stmt 0 view .LVU3523
 13365 0012 444D     		ldr	r5, .L1000+4
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13366              		.loc 1 1229 5 view .LVU3524
 13367 0014 2B7F     		ldrb	r3, [r5, #28]	@ zero_extendqisi2
 13368              	.LBE2437:
 13369              	.LBE2436:
 13370              	.LBE2446:
 13371              	.LBB2447:
 13372              	.LBB2430:
 13373              	.LBB2426:
 13374              	.LBB2418:
 13375              	.LBB2413:
 13376 0016 0026     		movs	r6, #0
 13377              	.LBE2413:
 13378              	.LBE2418:
 13379              	.LBE2426:
 13380              	.LBE2430:
 13381              	.LBE2447:
 13382              	.LBB2448:
 13383              	.LBB2441:
 13384              	.LBB2438:
 13385 0018 002B     		cmp	r3, #0
 13386 001a 69D1     		bne	.L997
 13387              	.LVL972:
 13388              	.L982:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13389              		.loc 1 1229 5 view .LVU3525
 13390              	.LBE2438:
 13391              	.LBE2441:
 13392              	.LBE2448:
1334:src/xeq.c     **** }
 13393              		.loc 1 1334 2 is_stmt 1 view .LVU3526
 13394              	.LBB2449:
 13395              	.LBB2442:
 13396              	.LBI2442:
 767:src/xeq.c     ****     State2.state_lift = 1;
 13397              		.loc 1 767 6 view .LVU3527
 13398              	.LBB2443:
 768:src/xeq.c     **** }
 13399              		.loc 1 768 5 view .LVU3528
 768:src/xeq.c     **** }
 13400              		.loc 1 768 23 is_stmt 0 view .LVU3529
 13401 001c EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 13402 001e 43F04003 		orr	r3, r3, #64
 13403 0022 EB75     		strb	r3, [r5, #23]
 13404              	.LBE2443:
 13405              	.LBE2442:
 13406              	.LBE2449:
1589:src/xeq.c     **** 
ARM GAS  /tmp/ccqED0AM.s 			page 394


 13407              		.loc 1 1589 2 is_stmt 1 view .LVU3530
 13408 0024 0020     		movs	r0, #0
 13409 0026 FFF7FEFF 		bl	get_reg_n
 13410              	.LVL973:
 13411              	.LBB2450:
 13412              	.LBB2451:
 13413              	.LBB2452:
 13414              	.LBB2453:
 13415              	.LBB2454:
1119:src/xeq.c     **** }
 13416              		.loc 1 1119 12 is_stmt 0 view .LVU3531
 13417 002a 2168     		ldr	r1, [r4]
1119:src/xeq.c     **** }
 13418              		.loc 1 1119 24 view .LVU3532
 13419 002c B1F8E827 		ldrh	r2, [r1, #2024]
 13420 0030 44F20103 		movw	r3, #16385
 13421 0034 1340     		ands	r3, r3, r2
 13422              	.LBE2454:
 13423              	.LBE2453:
 13424              	.LBE2452:
 13425              	.LBE2451:
 13426              	.LBI2450:
 253:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 13427              		.loc 1 253 14 is_stmt 1 view .LVU3533
 13428              	.LBE2450:
 254:src/xeq.c     **** }
 13429              		.loc 1 254 2 view .LVU3534
 13430              	.LVL974:
 13431              	.LBB2469:
 13432              	.LBB2465:
 13433              	.LBI2451:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 13434              		.loc 1 241 14 view .LVU3535
 13435              	.LBB2461:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 13436              		.loc 1 242 2 view .LVU3536
 13437              	.LBB2456:
 13438              	.LBI2453:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13439              		.loc 1 1118 5 view .LVU3537
 13440              	.LBB2455:
1119:src/xeq.c     **** }
 13441              		.loc 1 1119 2 view .LVU3538
 13442              	.LBE2455:
 13443              	.LBE2456:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 13444              		.loc 1 242 5 is_stmt 0 view .LVU3539
 13445 0036 B3F5804F 		cmp	r3, #16384
 13446              	.LBB2457:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 13447              		.loc 1 243 3 is_stmt 1 view .LVU3540
 244:src/xeq.c     **** 	}
 13448              		.loc 1 244 3 view .LVU3541
 13449              	.LVL975:
 244:src/xeq.c     **** 	}
 13450              		.loc 1 244 3 is_stmt 0 view .LVU3542
 13451              	.LBE2457:
ARM GAS  /tmp/ccqED0AM.s 			page 395


 13452              	.LBE2461:
 13453              	.LBE2465:
 13454              	.LBE2469:
 13455              	.LBB2470:
 13456              	.LBI2470:
1518:src/xeq.c     **** #if 0
 13457              		.loc 1 1518 6 is_stmt 1 view .LVU3543
 13458              	.LBB2471:
1533:src/xeq.c     **** #endif
 13459              		.loc 1 1533 2 view .LVU3544
 13460              	.LBB2472:
 13461              	.LBI2472:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13462              		.loc 1 1118 5 view .LVU3545
 13463              	.LBB2473:
1119:src/xeq.c     **** }
 13464              		.loc 1 1119 2 view .LVU3546
 13465              	.LBE2473:
 13466              	.LBE2472:
 13467              	.LBE2471:
 13468              	.LBE2470:
 13469              	.LBB2481:
 13470              	.LBB2466:
 13471              	.LBB2462:
 13472              	.LBB2458:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 13473              		.loc 1 243 24 is_stmt 0 view .LVU3547
 13474 003a 91F8CF27 		ldrb	r2, [r1, #1999]	@ zero_extendqisi2
 13475              	.LBE2458:
 13476              	.LBE2462:
 13477              	.LBE2466:
 13478              	.LBE2481:
 13479              	.LBB2482:
 13480              	.LBB2478:
 13481              	.LBB2476:
 13482              	.LBB2474:
1119:src/xeq.c     **** }
 13483              		.loc 1 1119 24 view .LVU3548
 13484 003e A3F58043 		sub	r3, r3, #16384
 13485 0042 B3FA83F3 		clz	r3, r3
 13486              	.LBE2474:
 13487              	.LBE2476:
 13488              	.LBE2478:
 13489              	.LBE2482:
 13490              	.LBB2483:
 13491              	.LBB2467:
 13492              	.LBB2463:
 13493              	.LBB2459:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 13494              		.loc 1 243 13 view .LVU3549
 13495 0046 08BF     		it	eq
 13496 0048 0C3A     		subeq	r2, r2, #12
 13497              	.LBE2459:
 13498              	.LBE2463:
 13499              	.LBE2467:
 13500              	.LBE2483:
 13501              	.LBB2484:
ARM GAS  /tmp/ccqED0AM.s 			page 396


 13502              	.LBB2479:
 13503              	.LBB2477:
 13504              	.LBB2475:
1119:src/xeq.c     **** }
 13505              		.loc 1 1119 24 view .LVU3550
 13506 004a 4FEA5313 		lsr	r3, r3, #5
 13507              	.LBE2475:
 13508              	.LBE2477:
 13509              	.LBE2479:
 13510              	.LBE2484:
 13511              	.LBB2485:
 13512              	.LBB2468:
 13513              	.LBB2464:
 13514              	.LBB2460:
 244:src/xeq.c     **** 	}
 13515              		.loc 1 244 67 view .LVU3551
 13516 004e 08BF     		it	eq
 13517 0050 5210     		asreq	r2, r2, #1
 13518              	.LBE2460:
 13519              	.LBE2464:
 13520              	.LBE2468:
 13521              	.LBE2485:
 13522              	.LBB2486:
 13523              	.LBB2480:
1533:src/xeq.c     **** #endif
 13524              		.loc 1 1533 24 view .LVU3552
 13525 0052 0333     		adds	r3, r3, #3
1533:src/xeq.c     **** #endif
 13526              		.loc 1 1533 2 view .LVU3553
 13527 0054 9A40     		lsls	r2, r2, r3
 13528 0056 0021     		movs	r1, #0
 13529 0058 FFF7FEFF 		bl	xset
 13530              	.LVL976:
1533:src/xeq.c     **** #endif
 13531              		.loc 1 1533 2 view .LVU3554
 13532              	.LBE2480:
 13533              	.LBE2486:
1592:src/xeq.c     **** 		zero_regs(get_reg_n(regA_idx), 4);
 13534              		.loc 1 1592 2 is_stmt 1 view .LVU3555
 13535              	.LBB2487:
 13536              	.LBI2487:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 13537              		.loc 1 712 5 view .LVU3556
 13538              	.LBB2488:
 713:src/xeq.c     **** 		return 4;
 13539              		.loc 1 713 2 view .LVU3557
 713:src/xeq.c     **** 		return 4;
 13540              		.loc 1 713 8 is_stmt 0 view .LVU3558
 13541 005c 2368     		ldr	r3, [r4]
 713:src/xeq.c     **** 		return 4;
 13542              		.loc 1 713 6 view .LVU3559
 13543 005e 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 13544              		.loc 1 713 5 view .LVU3560
 13545 0062 1207     		lsls	r2, r2, #28
 13546 0064 1CD5     		bpl	.L985
 13547              	.LBB2489:
ARM GAS  /tmp/ccqED0AM.s 			page 397


 13548              	.LBI2489:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 13549              		.loc 1 185 5 is_stmt 1 view .LVU3561
 13550              	.LBB2490:
 186:src/xeq.c     **** }
 13551              		.loc 1 186 2 view .LVU3562
 186:src/xeq.c     **** }
 13552              		.loc 1 186 9 is_stmt 0 view .LVU3563
 13553 0066 B3F8E037 		ldrh	r3, [r3, #2016]
 13554              	.LBE2490:
 13555              	.LBE2489:
 713:src/xeq.c     **** 		return 4;
 13556              		.loc 1 713 27 view .LVU3564
 13557 006a 9B0B     		lsrs	r3, r3, #14
 13558 006c 032B     		cmp	r3, #3
 13559 006e 12D0     		beq	.L998
 13560              	.L986:
 13561              	.LBE2488:
 13562              	.LBE2487:
1596:src/xeq.c     **** 
 13563              		.loc 1 1596 2 is_stmt 1 view .LVU3565
 13564 0070 6E20     		movs	r0, #110
 13565 0072 FFF7FEFF 		bl	get_reg_n
 13566              	.LVL977:
 13567              	.LBB2492:
 13568              	.LBI2492:
1518:src/xeq.c     **** #if 0
 13569              		.loc 1 1518 6 view .LVU3566
 13570              	.LBB2493:
1533:src/xeq.c     **** #endif
 13571              		.loc 1 1533 2 view .LVU3567
 13572              	.LBB2494:
 13573              	.LBI2494:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13574              		.loc 1 1118 5 view .LVU3568
 13575              	.LBB2495:
1119:src/xeq.c     **** }
 13576              		.loc 1 1119 2 view .LVU3569
1119:src/xeq.c     **** }
 13577              		.loc 1 1119 24 is_stmt 0 view .LVU3570
 13578 0076 2368     		ldr	r3, [r4]
 13579 0078 B3F8E827 		ldrh	r2, [r3, #2024]
 13580 007c 44F20105 		movw	r5, #16385
 13581 0080 2A40     		ands	r2, r2, r5
 13582              	.LBE2495:
 13583              	.LBE2494:
1533:src/xeq.c     **** #endif
 13584              		.loc 1 1533 2 view .LVU3571
 13585 0082 B2F5804F 		cmp	r2, #16384
 13586 0086 0CBF     		ite	eq
 13587 0088 2022     		moveq	r2, #32
 13588 008a 1022     		movne	r2, #16
 13589 008c 0021     		movs	r1, #0
 13590 008e FFF7FEFF 		bl	xset
 13591              	.LVL978:
1533:src/xeq.c     **** #endif
 13592              		.loc 1 1533 2 view .LVU3572
ARM GAS  /tmp/ccqED0AM.s 			page 398


 13593              	.LBE2493:
 13594              	.LBE2492:
1599:src/xeq.c     **** 		zero_regs(get_reg_n(LOCAL_REG_BASE), local);
 13595              		.loc 1 1599 2 is_stmt 1 view .LVU3573
1599:src/xeq.c     **** 		zero_regs(get_reg_n(LOCAL_REG_BASE), local);
 13596              		.loc 1 1599 5 is_stmt 0 view .LVU3574
 13597 0092 86BB     		cbnz	r6, .L999
1601:src/xeq.c     **** 
 13598              		.loc 1 1601 1 view .LVU3575
 13599 0094 70BD     		pop	{r4, r5, r6, pc}
 13600              	.L998:
 13601              	.LBB2496:
 13602              	.LBB2491:
 713:src/xeq.c     **** 		return 4;
 13603              		.loc 1 713 44 view .LVU3576
 13604 0096 244B     		ldr	r3, .L1000+8
 713:src/xeq.c     **** 		return 4;
 13605              		.loc 1 713 41 view .LVU3577
 13606 0098 93F90130 		ldrsb	r3, [r3, #1]
 13607 009c 002B     		cmp	r3, #0
 13608 009e E7DB     		blt	.L986
 13609              	.L985:
 714:src/xeq.c     **** 	return 8;
 13610              		.loc 1 714 3 is_stmt 1 view .LVU3578
 13611              	.LBE2491:
 13612              	.LBE2496:
1593:src/xeq.c     **** 
 13613              		.loc 1 1593 3 view .LVU3579
 13614 00a0 6820     		movs	r0, #104
 13615 00a2 FFF7FEFF 		bl	get_reg_n
 13616              	.LVL979:
 13617              	.LBB2497:
 13618              	.LBI2497:
1518:src/xeq.c     **** #if 0
 13619              		.loc 1 1518 6 view .LVU3580
 13620              	.LBB2498:
1533:src/xeq.c     **** #endif
 13621              		.loc 1 1533 2 view .LVU3581
 13622              	.LBB2499:
 13623              	.LBI2499:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13624              		.loc 1 1118 5 view .LVU3582
 13625              	.LBB2500:
1119:src/xeq.c     **** }
 13626              		.loc 1 1119 2 view .LVU3583
1119:src/xeq.c     **** }
 13627              		.loc 1 1119 24 is_stmt 0 view .LVU3584
 13628 00a6 2368     		ldr	r3, [r4]
 13629 00a8 B3F8E837 		ldrh	r3, [r3, #2024]
 13630 00ac 44F20102 		movw	r2, #16385
 13631 00b0 1A40     		ands	r2, r2, r3
 13632              	.LBE2500:
 13633              	.LBE2499:
1533:src/xeq.c     **** #endif
 13634              		.loc 1 1533 2 view .LVU3585
 13635 00b2 B2F5804F 		cmp	r2, #16384
 13636 00b6 0CBF     		ite	eq
ARM GAS  /tmp/ccqED0AM.s 			page 399


 13637 00b8 4022     		moveq	r2, #64
 13638 00ba 2022     		movne	r2, #32
 13639 00bc 0021     		movs	r1, #0
 13640 00be FFF7FEFF 		bl	xset
 13641              	.LVL980:
1535:src/xeq.c     **** 
 13642              		.loc 1 1535 1 view .LVU3586
 13643 00c2 D5E7     		b	.L986
 13644              	.LVL981:
 13645              	.L996:
1535:src/xeq.c     **** 
 13646              		.loc 1 1535 1 view .LVU3587
 13647              	.LBE2498:
 13648              	.LBE2497:
 13649              	.LBB2501:
 13650              	.LBB2431:
 13651              	.LBB2427:
 13652              	.LBB2419:
 13653              	.LBB2414:
 218:src/xeq.c     **** }
 13654              		.loc 1 218 25 view .LVU3588
 13655 00c4 1948     		ldr	r0, .L1000+12
 13656              	.LVL982:
 218:src/xeq.c     **** }
 13657              		.loc 1 218 25 view .LVU3589
 13658              	.LBE2414:
 13659              	.LBE2419:
 13660              	.LBB2420:
 13661              	.LBB2408:
1119:src/xeq.c     **** }
 13662              		.loc 1 1119 24 view .LVU3590
 13663 00c6 B2F8E817 		ldrh	r1, [r2, #2024]
 13664              	.LBE2408:
 13665              	.LBE2420:
 13666              	.LBB2421:
 13667              	.LBB2415:
 218:src/xeq.c     **** }
 13668              		.loc 1 218 25 view .LVU3591
 13669 00ca 0268     		ldr	r2, [r0]
 13670              	.LVL983:
 218:src/xeq.c     **** }
 13671              		.loc 1 218 25 view .LVU3592
 13672              	.LBE2415:
 13673              	.LBE2421:
 13674              	.LBE2427:
 13675              	.LBE2431:
 13676              	.LBE2501:
 13677              	.LBB2502:
 13678              	.LBB2444:
 13679              	.LBB2439:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13680              		.loc 1 1229 6 view .LVU3593
 13681 00cc 154D     		ldr	r5, .L1000+4
 13682              	.LBE2439:
 13683              	.LBE2444:
 13684              	.LBE2502:
 13685              	.LBB2503:
ARM GAS  /tmp/ccqED0AM.s 			page 400


 13686              	.LBB2432:
 13687              	.LBB2428:
 13688              	.LBB2422:
 13689              	.LBB2416:
 218:src/xeq.c     **** }
 13690              		.loc 1 218 57 view .LVU3594
 13691 00ce 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 13692              	.LBE2416:
 13693              	.LBE2422:
 13694              	.LBB2423:
 13695              	.LBB2409:
1119:src/xeq.c     **** }
 13696              		.loc 1 1119 24 view .LVU3595
 13697 00d2 44F20106 		movw	r6, #16385
 13698              	.LBE2409:
 13699              	.LBE2423:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 13700              		.loc 1 226 73 view .LVU3596
 13701 00d6 0E40     		ands	r6, r6, r1
 13702 00d8 A6F58043 		sub	r3, r6, #16384
 13703 00dc B3FA83F3 		clz	r3, r3
 13704 00e0 5B09     		lsrs	r3, r3, #5
 13705 00e2 0233     		adds	r3, r3, #2
 13706              	.LBB2424:
 13707              	.LBB2417:
 218:src/xeq.c     **** }
 13708              		.loc 1 218 57 view .LVU3597
 13709 00e4 C2F30B06 		ubfx	r6, r2, #0, #12
 13710 00e8 1E41     		asrs	r6, r6, r3
 13711              	.LVL984:
 218:src/xeq.c     **** }
 13712              		.loc 1 218 57 view .LVU3598
 13713              	.LBE2417:
 13714              	.LBE2424:
 13715              	.LBE2428:
 13716              	.LBE2432:
 13717              	.LBE2503:
1586:src/xeq.c     **** 
 13718              		.loc 1 1586 2 is_stmt 1 view .LVU3599
 13719              	.LBB2504:
1332:src/xeq.c     **** 	process_cmdline();
 13720              		.loc 1 1332 6 view .LVU3600
 13721              	.LBE2504:
1333:src/xeq.c     **** 	set_lift();
 13722              		.loc 1 1333 2 view .LVU3601
 13723              	.LBB2505:
 13724              	.LBB2445:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 13725              		.loc 1 1226 6 view .LVU3602
 13726              	.LBB2440:
1227:src/xeq.c     **** 
 13727              		.loc 1 1227 2 view .LVU3603
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13728              		.loc 1 1229 2 view .LVU3604
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13729              		.loc 1 1229 5 is_stmt 0 view .LVU3605
 13730 00ea 2B7F     		ldrb	r3, [r5, #28]	@ zero_extendqisi2
ARM GAS  /tmp/ccqED0AM.s 			page 401


 13731 00ec 002B     		cmp	r3, #0
 13732 00ee 95D0     		beq	.L982
 13733              	.L997:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13734              		.loc 1 1229 5 view .LVU3606
 13735 00f0 FFF7FEFF 		bl	process_cmdline.part.0
 13736              	.LVL985:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13737              		.loc 1 1229 5 view .LVU3607
 13738 00f4 92E7     		b	.L982
 13739              	.L999:
 13740              	.LBE2440:
 13741              	.LBE2445:
 13742              	.LBE2505:
1600:src/xeq.c     **** }
 13743              		.loc 1 1600 3 is_stmt 1 view .LVU3608
 13744 00f6 7020     		movs	r0, #112
 13745 00f8 FFF7FEFF 		bl	get_reg_n
 13746              	.LVL986:
 13747              	.LBB2506:
 13748              	.LBI2506:
1518:src/xeq.c     **** #if 0
 13749              		.loc 1 1518 6 view .LVU3609
 13750              	.LBB2507:
1533:src/xeq.c     **** #endif
 13751              		.loc 1 1533 2 view .LVU3610
 13752              	.LBB2508:
 13753              	.LBI2508:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13754              		.loc 1 1118 5 view .LVU3611
 13755              	.LBB2509:
1119:src/xeq.c     **** }
 13756              		.loc 1 1119 2 view .LVU3612
1119:src/xeq.c     **** }
 13757              		.loc 1 1119 24 is_stmt 0 view .LVU3613
 13758 00fc 2368     		ldr	r3, [r4]
 13759 00fe B3F8E827 		ldrh	r2, [r3, #2024]
 13760 0102 2A40     		ands	r2, r2, r5
 13761 0104 A2F58042 		sub	r2, r2, #16384
 13762 0108 B2FA82F2 		clz	r2, r2
 13763 010c 5209     		lsrs	r2, r2, #5
 13764              	.LBE2509:
 13765              	.LBE2508:
1533:src/xeq.c     **** #endif
 13766              		.loc 1 1533 24 view .LVU3614
 13767 010e 0332     		adds	r2, r2, #3
1533:src/xeq.c     **** #endif
 13768              		.loc 1 1533 2 view .LVU3615
 13769 0110 06FA02F2 		lsl	r2, r6, r2
 13770 0114 0021     		movs	r1, #0
 13771              	.LBE2507:
 13772              	.LBE2506:
1601:src/xeq.c     **** 
 13773              		.loc 1 1601 1 view .LVU3616
 13774 0116 BDE87040 		pop	{r4, r5, r6, lr}
 13775              		.cfi_restore 14
 13776              		.cfi_restore 6
ARM GAS  /tmp/ccqED0AM.s 			page 402


 13777              		.cfi_restore 5
 13778              		.cfi_restore 4
 13779              		.cfi_def_cfa_offset 0
 13780              	.LBB2511:
 13781              	.LBB2510:
1533:src/xeq.c     **** #endif
 13782              		.loc 1 1533 2 view .LVU3617
 13783 011a FFF7FEBF 		b	xset
 13784              	.LVL987:
 13785              	.L1001:
1533:src/xeq.c     **** #endif
 13786              		.loc 1 1533 2 view .LVU3618
 13787 011e 00BF     		.align	2
 13788              	.L1000:
 13789 0120 00000000 		.word	main_ram
 13790 0124 00000000 		.word	StateWhileOn
 13791 0128 00000000 		.word	XromParams
 13792 012c 00000000 		.word	RetStk
 13793              	.LBE2510:
 13794              	.LBE2511:
 13795              		.cfi_endproc
 13796              	.LFE111:
 13798              		.section	.text.clrretstk,"ax",%progbits
 13799              		.align	1
 13800              		.p2align 2,,3
 13801              		.global	clrretstk
 13802              		.syntax unified
 13803              		.thumb
 13804              		.thumb_func
 13805              		.fpu fpv4-sp-d16
 13807              	clrretstk:
 13808              	.LFB112:
1606:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 13809              		.loc 1 1606 22 is_stmt 1 view -0
 13810              		.cfi_startproc
 13811              		@ args = 0, pretend = 0, frame = 0
 13812              		@ frame_needed = 0, uses_anonymous_args = 0
 13813              		@ link register save eliminated.
1607:src/xeq.c     **** }
 13814              		.loc 1 1607 2 view .LVU3620
1607:src/xeq.c     **** }
 13815              		.loc 1 1607 14 is_stmt 0 view .LVU3621
 13816 0000 054B     		ldr	r3, .L1003
 13817 0002 1B68     		ldr	r3, [r3]
1607:src/xeq.c     **** }
 13818              		.loc 1 1607 24 view .LVU3622
 13819 0004 B3F8DE27 		ldrh	r2, [r3, #2014]
1607:src/xeq.c     **** }
 13820              		.loc 1 1607 12 view .LVU3623
 13821 0008 0021     		movs	r1, #0
1607:src/xeq.c     **** }
 13822              		.loc 1 1607 24 view .LVU3624
 13823 000a 6FF34F12 		bfc	r2, #5, #11
 13824 000e A3F8DE27 		strh	r2, [r3, #2014]	@ movhi
1607:src/xeq.c     **** }
 13825              		.loc 1 1607 12 view .LVU3625
 13826 0012 A3F8E217 		strh	r1, [r3, #2018]	@ movhi
ARM GAS  /tmp/ccqED0AM.s 			page 403


1608:src/xeq.c     **** 
 13827              		.loc 1 1608 1 view .LVU3626
 13828 0016 7047     		bx	lr
 13829              	.L1004:
 13830              		.align	2
 13831              	.L1003:
 13832 0018 00000000 		.word	main_ram
 13833              		.cfi_endproc
 13834              	.LFE112:
 13836              		.section	.text.clrretstk_pc,"ax",%progbits
 13837              		.align	1
 13838              		.p2align 2,,3
 13839              		.global	clrretstk_pc
 13840              		.syntax unified
 13841              		.thumb
 13842              		.thumb_func
 13843              		.fpu fpv4-sp-d16
 13845              	clrretstk_pc:
 13846              	.LFB113:
1610:src/xeq.c     **** 	clrretstk();
 13847              		.loc 1 1610 25 is_stmt 1 view -0
 13848              		.cfi_startproc
 13849              		@ args = 0, pretend = 0, frame = 0
 13850              		@ frame_needed = 0, uses_anonymous_args = 0
1611:src/xeq.c     **** 	raw_set_pc(0);
 13851              		.loc 1 1611 2 view .LVU3628
 13852              	.LBB2512:
 13853              	.LBI2512:
1606:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 13854              		.loc 1 1606 6 view .LVU3629
 13855              	.LBB2513:
1607:src/xeq.c     **** }
 13856              		.loc 1 1607 2 view .LVU3630
 13857              	.LBE2513:
 13858              	.LBE2512:
1610:src/xeq.c     **** 	clrretstk();
 13859              		.loc 1 1610 25 is_stmt 0 view .LVU3631
 13860 0000 08B5     		push	{r3, lr}
 13861              		.cfi_def_cfa_offset 8
 13862              		.cfi_offset 3, -8
 13863              		.cfi_offset 14, -4
 13864              	.LBB2518:
 13865              	.LBB2514:
1607:src/xeq.c     **** }
 13866              		.loc 1 1607 14 view .LVU3632
 13867 0002 094B     		ldr	r3, .L1007
 13868 0004 1B68     		ldr	r3, [r3]
 13869              	.LBE2514:
 13870              	.LBE2518:
1612:src/xeq.c     **** 	update_program_bounds(1);
 13871              		.loc 1 1612 2 is_stmt 1 view .LVU3633
 13872              	.LVL988:
 13873              	.LBB2519:
 13874              	.LBI2519:
 282:src/xeq.c     **** 	State.pc = pc;
 13875              		.loc 1 282 13 view .LVU3634
 13876              	.LBB2520:
ARM GAS  /tmp/ccqED0AM.s 			page 404


 283:src/xeq.c     **** 	update_program_bounds(0);
 13877              		.loc 1 283 2 view .LVU3635
 13878              	.LBE2520:
 13879              	.LBE2519:
 13880              	.LBB2524:
 13881              	.LBB2515:
1607:src/xeq.c     **** }
 13882              		.loc 1 1607 24 is_stmt 0 view .LVU3636
 13883 0006 B3F8DE27 		ldrh	r2, [r3, #2014]
 13884              	.LBE2515:
 13885              	.LBE2524:
 13886              	.LBB2525:
 13887              	.LBB2521:
 283:src/xeq.c     **** 	update_program_bounds(0);
 13888              		.loc 1 283 11 view .LVU3637
 13889 000a 0020     		movs	r0, #0
 13890              	.LBE2521:
 13891              	.LBE2525:
 13892              	.LBB2526:
 13893              	.LBB2516:
1607:src/xeq.c     **** }
 13894              		.loc 1 1607 24 view .LVU3638
 13895 000c 6FF34F12 		bfc	r2, #5, #11
 13896              	.LBE2516:
 13897              	.LBE2526:
 13898              	.LBB2527:
 13899              	.LBB2522:
 283:src/xeq.c     **** 	update_program_bounds(0);
 13900              		.loc 1 283 11 view .LVU3639
 13901 0010 C3F8E007 		str	r0, [r3, #2016]
 284:src/xeq.c     **** }
 13902              		.loc 1 284 2 is_stmt 1 view .LVU3640
 13903              	.LBE2522:
 13904              	.LBE2527:
 13905              	.LBB2528:
 13906              	.LBB2517:
1607:src/xeq.c     **** }
 13907              		.loc 1 1607 24 is_stmt 0 view .LVU3641
 13908 0014 A3F8DE27 		strh	r2, [r3, #2014]	@ movhi
 13909              	.LBE2517:
 13910              	.LBE2528:
 13911              	.LBB2529:
 13912              	.LBB2523:
 284:src/xeq.c     **** }
 13913              		.loc 1 284 2 view .LVU3642
 13914 0018 FFF7FEFF 		bl	update_program_bounds
 13915              	.LVL989:
 284:src/xeq.c     **** }
 13916              		.loc 1 284 2 view .LVU3643
 13917              	.LBE2523:
 13918              	.LBE2529:
1613:src/xeq.c     **** }
 13919              		.loc 1 1613 2 is_stmt 1 view .LVU3644
1614:src/xeq.c     **** 
 13920              		.loc 1 1614 1 is_stmt 0 view .LVU3645
 13921 001c BDE80840 		pop	{r3, lr}
 13922              		.cfi_restore 14
ARM GAS  /tmp/ccqED0AM.s 			page 405


 13923              		.cfi_restore 3
 13924              		.cfi_def_cfa_offset 0
1613:src/xeq.c     **** }
 13925              		.loc 1 1613 2 view .LVU3646
 13926 0020 0120     		movs	r0, #1
 13927 0022 FFF7FEBF 		b	update_program_bounds
 13928              	.LVL990:
 13929              	.L1008:
 13930 0026 00BF     		.align	2
 13931              	.L1007:
 13932 0028 00000000 		.word	main_ram
 13933              		.cfi_endproc
 13934              	.LFE113:
 13936              		.section	.text.cmdconst,"ax",%progbits
 13937              		.align	1
 13938              		.p2align 2,,3
 13939              		.global	cmdconst
 13940              		.syntax unified
 13941              		.thumb
 13942              		.thumb_func
 13943              		.fpu fpv4-sp-d16
 13945              	cmdconst:
 13946              	.LVL991:
 13947              	.LFB114:
1620:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 13948              		.loc 1 1620 47 is_stmt 1 view -0
 13949              		.cfi_startproc
 13950              		@ args = 0, pretend = 0, frame = 0
 13951              		@ frame_needed = 0, uses_anonymous_args = 0
1622:src/xeq.c     **** #else
 13952              		.loc 1 1622 2 view .LVU3648
1620:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 13953              		.loc 1 1620 47 is_stmt 0 view .LVU3649
 13954 0000 70B5     		push	{r4, r5, r6, lr}
 13955              		.cfi_def_cfa_offset 16
 13956              		.cfi_offset 4, -16
 13957              		.cfi_offset 5, -12
 13958              		.cfi_offset 6, -8
 13959              		.cfi_offset 14, -4
1622:src/xeq.c     **** #else
 13960              		.loc 1 1622 5 view .LVU3650
 13961 0002 01F0FD03 		and	r3, r1, #253
 13962 0006 882B     		cmp	r3, #136
1620:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 13963              		.loc 1 1620 47 view .LVU3651
 13964 0008 82B0     		sub	sp, sp, #8
 13965              		.cfi_def_cfa_offset 24
1620:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 13966              		.loc 1 1620 47 view .LVU3652
 13967 000a 0C46     		mov	r4, r1
 13968 000c 0546     		mov	r5, r0
1622:src/xeq.c     **** #else
 13969              		.loc 1 1622 5 view .LVU3653
 13970 000e 1CD0     		beq	.L1010
1622:src/xeq.c     **** #else
 13971              		.loc 1 1622 30 discriminator 1 view .LVU3654
 13972 0010 0129     		cmp	r1, #1
ARM GAS  /tmp/ccqED0AM.s 			page 406


 13973 0012 1AD0     		beq	.L1010
1630:src/xeq.c     **** 
 13974              		.loc 1 1630 3 is_stmt 1 view .LVU3655
 13975              	.LBB2551:
 13976              	.LBI2551:
 747:src/xeq.c     **** 	if (get_lift())
 13977              		.loc 1 747 6 view .LVU3656
 13978              	.LBB2552:
 748:src/xeq.c     **** 		lift();
 13979              		.loc 1 748 2 view .LVU3657
 13980              	.LBB2553:
 13981              	.LBI2553:
 743:src/xeq.c     **** 	return State2.state_lift;
 13982              		.loc 1 743 12 view .LVU3658
 13983              	.LBB2554:
 744:src/xeq.c     **** }
 13984              		.loc 1 744 2 view .LVU3659
 744:src/xeq.c     **** }
 13985              		.loc 1 744 15 is_stmt 0 view .LVU3660
 13986 0014 2B4B     		ldr	r3, .L1027
 13987 0016 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 13988              	.LBE2554:
 13989              	.LBE2553:
 748:src/xeq.c     **** 		lift();
 13990              		.loc 1 748 5 view .LVU3661
 13991 0018 5906     		lsls	r1, r3, #25
 13992              	.LVL992:
 748:src/xeq.c     **** 		lift();
 13993              		.loc 1 748 5 view .LVU3662
 13994 001a 4FD4     		bmi	.L1025
 13995              	.LVL993:
 13996              	.L1012:
 748:src/xeq.c     **** 		lift();
 13997              		.loc 1 748 5 view .LVU3663
 13998              	.LBE2552:
 13999              	.LBE2551:
1632:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14000              		.loc 1 1632 2 is_stmt 1 view .LVU3664
1632:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14001              		.loc 1 1632 24 is_stmt 0 view .LVU3665
 14002 001c 7934     		adds	r4, r4, #121
1632:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14003              		.loc 1 1632 5 view .LVU3666
 14004 001e E4B2     		uxtb	r4, r4
 14005 0020 012C     		cmp	r4, #1
 14006 0022 23D9     		bls	.L1026
 14007              	.L1013:
1634:src/xeq.c     **** 		bad_mode_error();
 14008              		.loc 1 1634 7 is_stmt 1 view .LVU3667
1634:src/xeq.c     **** 		bad_mode_error();
 14009              		.loc 1 1634 11 is_stmt 0 view .LVU3668
 14010 0024 284C     		ldr	r4, .L1027+4
 14011 0026 2368     		ldr	r3, [r4]
 14012 0028 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
1634:src/xeq.c     **** 		bad_mode_error();
 14013              		.loc 1 1634 10 view .LVU3669
 14014 002c D207     		lsls	r2, r2, #31
ARM GAS  /tmp/ccqED0AM.s 			page 407


 14015 002e 26D5     		bpl	.L1015
1635:src/xeq.c     **** 	else 
 14016              		.loc 1 1635 3 is_stmt 1 view .LVU3670
 14017              	.LBB2556:
 14018              	.LBI2556:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 14019              		.loc 1 575 6 view .LVU3671
 14020              	.LBE2556:
 576:src/xeq.c     **** }
 14021              		.loc 1 576 2 view .LVU3672
 14022              	.LVL994:
 14023              	.LBB2561:
 14024              	.LBB2557:
 14025              	.LBI2557:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14026              		.loc 1 546 5 view .LVU3673
 14027              	.LBB2558:
 547:src/xeq.c     **** 		Error = e;
 14028              		.loc 1 547 2 view .LVU3674
 547:src/xeq.c     **** 		Error = e;
 14029              		.loc 1 547 12 is_stmt 0 view .LVU3675
 14030 0030 264A     		ldr	r2, .L1027+8
 547:src/xeq.c     **** 		Error = e;
 14031              		.loc 1 547 5 view .LVU3676
 14032 0032 1168     		ldr	r1, [r2]
 14033 0034 09B9     		cbnz	r1, .L1014
 14034              	.LVL995:
 14035              	.LBB2559:
 14036              	.LBI2559:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14037              		.loc 1 546 5 is_stmt 1 view .LVU3677
 14038              	.LBB2560:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14039              		.loc 1 548 3 view .LVU3678
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14040              		.loc 1 548 9 is_stmt 0 view .LVU3679
 14041 0036 0D21     		movs	r1, #13
 14042 0038 1160     		str	r1, [r2]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14043              		.loc 1 549 3 is_stmt 1 view .LVU3680
 14044              	.LVL996:
 14045              	.L1014:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14046              		.loc 1 549 3 is_stmt 0 view .LVU3681
 14047              	.LBE2560:
 14048              	.LBE2559:
 14049              	.LBE2558:
 14050              	.LBE2557:
 14051              	.LBE2561:
1639:src/xeq.c     **** #endif
 14052              		.loc 1 1639 2 is_stmt 1 view .LVU3682
 14053 003a 93F8AD27 		ldrb	r2, [r3, #1965]	@ zero_extendqisi2
 14054 003e 42F00102 		orr	r2, r2, #1
 14055 0042 83F8AD27 		strb	r2, [r3, #1965]
1641:src/xeq.c     **** 
 14056              		.loc 1 1641 1 is_stmt 0 view .LVU3683
 14057 0046 02B0     		add	sp, sp, #8
ARM GAS  /tmp/ccqED0AM.s 			page 408


 14058              		.cfi_remember_state
 14059              		.cfi_def_cfa_offset 16
 14060              		@ sp needed
 14061 0048 70BD     		pop	{r4, r5, r6, pc}
 14062              	.LVL997:
 14063              	.L1010:
 14064              		.cfi_restore_state
1626:src/xeq.c     **** 		zero_Y();
 14065              		.loc 1 1626 3 is_stmt 1 view .LVU3684
 14066 004a FFF7FEFF 		bl	lift2_if_enabled
 14067              	.LVL998:
1627:src/xeq.c     **** 		set_was_complex();
 14068              		.loc 1 1627 3 view .LVU3685
 14069              	.LBB2562:
 14070              	.LBI2562:
1554:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 14071              		.loc 1 1554 6 view .LVU3686
 14072              	.LBB2563:
1555:src/xeq.c     **** }
 14073              		.loc 1 1555 2 view .LVU3687
 14074 004e 6520     		movs	r0, #101
 14075 0050 FFF7FEFF 		bl	get_reg_n
 14076              	.LVL999:
 14077 0054 FFF7FEFF 		bl	set_zero
 14078              	.LVL1000:
 14079              	.LBE2563:
 14080              	.LBE2562:
1628:src/xeq.c     **** 	} else
 14081              		.loc 1 1628 3 view .LVU3688
 14082              	.LBB2564:
 14083              	.LBI2564:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 14084              		.loc 1 539 13 view .LVU3689
 14085              	.LBB2565:
 540:src/xeq.c     **** }
 14086              		.loc 1 540 2 view .LVU3690
 540:src/xeq.c     **** }
 14087              		.loc 1 540 20 is_stmt 0 view .LVU3691
 14088 0058 1A4B     		ldr	r3, .L1027
 14089              	.LBE2565:
 14090              	.LBE2564:
1632:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14091              		.loc 1 1632 24 view .LVU3692
 14092 005a 7934     		adds	r4, r4, #121
 14093              	.LBB2569:
 14094              	.LBB2566:
 540:src/xeq.c     **** }
 14095              		.loc 1 540 20 view .LVU3693
 14096 005c 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 14097 005e 0121     		movs	r1, #1
 14098              	.LBE2566:
 14099              	.LBE2569:
1632:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14100              		.loc 1 1632 5 view .LVU3694
 14101 0060 E4B2     		uxtb	r4, r4
 14102              	.LBB2570:
 14103              	.LBB2567:
ARM GAS  /tmp/ccqED0AM.s 			page 409


 540:src/xeq.c     **** }
 14104              		.loc 1 540 20 view .LVU3695
 14105 0062 61F38712 		bfi	r2, r1, #6, #2
 14106              	.LBE2567:
 14107              	.LBE2570:
1632:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14108              		.loc 1 1632 5 view .LVU3696
 14109 0066 012C     		cmp	r4, #1
 14110              	.LBB2571:
 14111              	.LBB2568:
 540:src/xeq.c     **** }
 14112              		.loc 1 540 20 view .LVU3697
 14113 0068 1A75     		strb	r2, [r3, #20]
 14114              	.LBE2568:
 14115              	.LBE2571:
1632:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14116              		.loc 1 1632 2 is_stmt 1 view .LVU3698
1632:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14117              		.loc 1 1632 5 is_stmt 0 view .LVU3699
 14118 006a DBD8     		bhi	.L1013
 14119              	.L1026:
1633:src/xeq.c     **** 	else if (is_intmode())
 14120              		.loc 1 1633 3 is_stmt 1 view .LVU3700
 14121              	.LVL1001:
 14122              	.LBB2572:
 14123              	.LBI2572:
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 14124              		.loc 1 1509 6 view .LVU3701
 14125              	.LBB2573:
1510:src/xeq.c     **** }
 14126              		.loc 1 1510 2 view .LVU3702
 14127              	.LBE2573:
 14128              	.LBE2572:
1633:src/xeq.c     **** 	else if (is_intmode())
 14129              		.loc 1 1633 3 is_stmt 0 view .LVU3703
 14130 006c 0023     		movs	r3, #0
 14131              	.LBB2575:
 14132              	.LBB2574:
1510:src/xeq.c     **** }
 14133              		.loc 1 1510 2 view .LVU3704
 14134 006e 0093     		str	r3, [sp]
 14135 0070 2A46     		mov	r2, r5
 14136 0072 6420     		movs	r0, #100
 14137 0074 FFF7FEFF 		bl	set_reg_n_int_sgn
 14138              	.LVL1002:
 14139 0078 134B     		ldr	r3, .L1027+4
 14140 007a 1B68     		ldr	r3, [r3]
1511:src/xeq.c     **** 
 14141              		.loc 1 1511 1 view .LVU3705
 14142 007c DDE7     		b	.L1014
 14143              	.LVL1003:
 14144              	.L1015:
1511:src/xeq.c     **** 
 14145              		.loc 1 1511 1 view .LVU3706
 14146              	.LBE2574:
 14147              	.LBE2575:
1637:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
ARM GAS  /tmp/ccqED0AM.s 			page 410


 14148              		.loc 1 1637 3 is_stmt 1 view .LVU3707
 14149              	.LBB2576:
 14150              	.LBB2577:
1119:src/xeq.c     **** }
 14151              		.loc 1 1119 24 is_stmt 0 view .LVU3708
 14152 007e B3F8E817 		ldrh	r1, [r3, #2024]
 14153              	.LBE2577:
 14154              	.LBE2576:
1637:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14155              		.loc 1 1637 3 view .LVU3709
 14156 0082 134B     		ldr	r3, .L1027+12
 14157              	.LBB2580:
 14158              	.LBB2578:
1119:src/xeq.c     **** }
 14159              		.loc 1 1119 24 view .LVU3710
 14160 0084 44F20106 		movw	r6, #16385
 14161 0088 3140     		ands	r1, r1, r6
 14162              	.LBE2578:
 14163              	.LBE2580:
1637:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14164              		.loc 1 1637 22 view .LVU3711
 14165 008a A1F58041 		sub	r1, r1, #16384
 14166 008e B1FA81F1 		clz	r1, r1
 14167 0092 2846     		mov	r0, r5
 14168 0094 4909     		lsrs	r1, r1, #5
1637:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14169              		.loc 1 1637 3 view .LVU3712
 14170 0096 1D68     		ldr	r5, [r3]
 14171              	.LVL1004:
 14172              	.LBB2581:
 14173              	.LBI2576:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14174              		.loc 1 1118 5 is_stmt 1 view .LVU3713
 14175              	.LBB2579:
1119:src/xeq.c     **** }
 14176              		.loc 1 1119 2 view .LVU3714
 14177              	.LBE2579:
 14178              	.LBE2581:
1637:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14179              		.loc 1 1637 22 is_stmt 0 view .LVU3715
 14180 0098 FFF7FEFF 		bl	get_const
 14181              	.LVL1005:
 14182              	.LBB2582:
 14183              	.LBB2583:
 14184              	.LBB2584:
 14185              	.LBB2585:
1119:src/xeq.c     **** }
 14186              		.loc 1 1119 24 view .LVU3716
 14187 009c 2368     		ldr	r3, [r4]
 14188 009e B3F8E837 		ldrh	r3, [r3, #2024]
 14189              	.LBE2585:
 14190              	.LBE2584:
 727:src/xeq.c     **** }
 14191              		.loc 1 727 2 view .LVU3717
 14192 00a2 1E40     		ands	r6, r6, r3
 14193 00a4 B6F5804F 		cmp	r6, #16384
 14194              	.LBE2583:
ARM GAS  /tmp/ccqED0AM.s 			page 411


 14195              	.LBE2582:
1637:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14196              		.loc 1 1637 22 view .LVU3718
 14197 00a8 0146     		mov	r1, r0
 14198              	.LVL1006:
 14199              	.LBB2589:
 14200              	.LBI2582:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14201              		.loc 1 726 6 is_stmt 1 view .LVU3719
 14202              	.LBB2588:
 727:src/xeq.c     **** }
 14203              		.loc 1 727 2 view .LVU3720
 14204              	.LBB2587:
 14205              	.LBI2584:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14206              		.loc 1 1118 5 view .LVU3721
 14207              	.LBB2586:
1119:src/xeq.c     **** }
 14208              		.loc 1 1119 2 view .LVU3722
 14209              	.LBE2586:
 14210              	.LBE2587:
 727:src/xeq.c     **** }
 14211              		.loc 1 727 2 is_stmt 0 view .LVU3723
 14212 00aa 08BF     		it	eq
 14213 00ac 1022     		moveq	r2, #16
 14214 00ae 2846     		mov	r0, r5
 14215              	.LVL1007:
 727:src/xeq.c     **** }
 14216              		.loc 1 727 2 view .LVU3724
 14217 00b0 18BF     		it	ne
 14218 00b2 0822     		movne	r2, #8
 14219 00b4 FFF7FEFF 		bl	xcopy
 14220              	.LVL1008:
 727:src/xeq.c     **** }
 14221              		.loc 1 727 2 view .LVU3725
 14222 00b8 2368     		ldr	r3, [r4]
 728:src/xeq.c     **** 
 14223              		.loc 1 728 1 view .LVU3726
 14224 00ba BEE7     		b	.L1014
 14225              	.LVL1009:
 14226              	.L1025:
 728:src/xeq.c     **** 
 14227              		.loc 1 728 1 view .LVU3727
 14228              	.LBE2588:
 14229              	.LBE2589:
 14230              	.LBB2590:
 14231              	.LBB2555:
 749:src/xeq.c     **** }
 14232              		.loc 1 749 3 is_stmt 1 view .LVU3728
 14233 00bc FFF7FEFF 		bl	lift
 14234              	.LVL1010:
 749:src/xeq.c     **** }
 14235              		.loc 1 749 3 is_stmt 0 view .LVU3729
 14236 00c0 ACE7     		b	.L1012
 14237              	.L1028:
 14238 00c2 00BF     		.align	2
 14239              	.L1027:
ARM GAS  /tmp/ccqED0AM.s 			page 412


 14240 00c4 00000000 		.word	StateWhileOn
 14241 00c8 00000000 		.word	main_ram
 14242 00cc 00000000 		.word	Error
 14243 00d0 00000000 		.word	StackBase
 14244              	.LBE2555:
 14245              	.LBE2590:
 14246              		.cfi_endproc
 14247              	.LFE114:
 14249              		.section	.text.cmdsto,"ax",%progbits
 14250              		.align	1
 14251              		.p2align 2,,3
 14252              		.global	cmdsto
 14253              		.syntax unified
 14254              		.thumb
 14255              		.thumb_func
 14256              		.fpu fpv4-sp-d16
 14258              	cmdsto:
 14259              	.LVL1011:
 14260              	.LFB117:
1724:src/xeq.c     **** 	if (op == RARG_STO) {
 14261              		.loc 1 1724 45 is_stmt 1 view -0
 14262              		.cfi_startproc
 14263              		@ args = 0, pretend = 0, frame = 48
 14264              		@ frame_needed = 0, uses_anonymous_args = 0
1725:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
 14265              		.loc 1 1725 2 view .LVU3731
1724:src/xeq.c     **** 	if (op == RARG_STO) {
 14266              		.loc 1 1724 45 is_stmt 0 view .LVU3732
 14267 0000 10B5     		push	{r4, lr}
 14268              		.cfi_def_cfa_offset 8
 14269              		.cfi_offset 4, -8
 14270              		.cfi_offset 14, -4
1725:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
 14271              		.loc 1 1725 5 view .LVU3733
 14272 0002 0329     		cmp	r1, #3
1724:src/xeq.c     **** 	if (op == RARG_STO) {
 14273              		.loc 1 1724 45 view .LVU3734
 14274 0004 8CB0     		sub	sp, sp, #48
 14275              		.cfi_def_cfa_offset 56
1725:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
 14276              		.loc 1 1725 5 view .LVU3735
 14277 0006 32D0     		beq	.L1042
1728:src/xeq.c     **** 			long long int r;
 14278              		.loc 1 1728 3 is_stmt 1 view .LVU3736
1728:src/xeq.c     **** 			long long int r;
 14279              		.loc 1 1728 7 is_stmt 0 view .LVU3737
 14280 0008 1B4B     		ldr	r3, .L1043
 14281 000a 1B68     		ldr	r3, [r3]
 14282 000c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 14283              	.LBB2603:
1731:src/xeq.c     **** 				illegal(op);
 14284              		.loc 1 1731 8 view .LVU3738
 14285 0010 0339     		subs	r1, r1, #3
 14286              	.LVL1012:
1731:src/xeq.c     **** 				illegal(op);
 14287              		.loc 1 1731 8 view .LVU3739
 14288              	.LBE2603:
ARM GAS  /tmp/ccqED0AM.s 			page 413


1728:src/xeq.c     **** 			long long int r;
 14289              		.loc 1 1728 6 view .LVU3740
 14290 0012 13F00103 		ands	r3, r3, #1
 14291 0016 0446     		mov	r4, r0
 14292              	.LBB2611:
1731:src/xeq.c     **** 				illegal(op);
 14293              		.loc 1 1731 8 view .LVU3741
 14294 0018 88B2     		uxth	r0, r1
 14295              	.LVL1013:
1731:src/xeq.c     **** 				illegal(op);
 14296              		.loc 1 1731 8 view .LVU3742
 14297              	.LBE2611:
1728:src/xeq.c     **** 			long long int r;
 14298              		.loc 1 1728 6 view .LVU3743
 14299 001a 18D0     		beq	.L1032
 14300              	.LBB2612:
1729:src/xeq.c     **** 
 14301              		.loc 1 1729 4 is_stmt 1 view .LVU3744
1731:src/xeq.c     **** 				illegal(op);
 14302              		.loc 1 1731 4 view .LVU3745
1731:src/xeq.c     **** 				illegal(op);
 14303              		.loc 1 1731 8 is_stmt 0 view .LVU3746
 14304 001c 0023     		movs	r3, #0
 14305 001e 6A46     		mov	r2, sp
 14306 0020 2146     		mov	r1, r4
 14307 0022 FFF7FEFF 		bl	storcl_intop
 14308              	.LVL1014:
1731:src/xeq.c     **** 				illegal(op);
 14309              		.loc 1 1731 7 view .LVU3747
 14310 0026 20B1     		cbz	r0, .L1033
1732:src/xeq.c     **** 			set_reg_n_int(arg, r);
 14311              		.loc 1 1732 5 is_stmt 1 view .LVU3748
1732:src/xeq.c     **** 			set_reg_n_int(arg, r);
 14312              		.loc 1 1732 5 view .LVU3749
 14313              	.LVL1015:
 14314              	.LBB2604:
 14315              	.LBI2604:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14316              		.loc 1 546 5 view .LVU3750
 14317              	.LBB2605:
 547:src/xeq.c     **** 		Error = e;
 14318              		.loc 1 547 2 view .LVU3751
 547:src/xeq.c     **** 		Error = e;
 14319              		.loc 1 547 12 is_stmt 0 view .LVU3752
 14320 0028 144B     		ldr	r3, .L1043+4
 547:src/xeq.c     **** 		Error = e;
 14321              		.loc 1 547 5 view .LVU3753
 14322 002a 1A68     		ldr	r2, [r3]
 14323 002c 0AB9     		cbnz	r2, .L1033
 14324              	.LVL1016:
 14325              	.LBB2606:
 14326              	.LBI2606:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14327              		.loc 1 546 5 is_stmt 1 view .LVU3754
 14328              	.LBB2607:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14329              		.loc 1 548 3 view .LVU3755
ARM GAS  /tmp/ccqED0AM.s 			page 414


 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14330              		.loc 1 548 9 is_stmt 0 view .LVU3756
 14331 002e 0322     		movs	r2, #3
 14332 0030 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14333              		.loc 1 549 3 is_stmt 1 view .LVU3757
 14334              	.LVL1017:
 14335              	.L1033:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14336              		.loc 1 549 3 is_stmt 0 view .LVU3758
 14337              	.LBE2607:
 14338              	.LBE2606:
 14339              	.LBE2605:
 14340              	.LBE2604:
1732:src/xeq.c     **** 			set_reg_n_int(arg, r);
 14341              		.loc 1 1732 5 is_stmt 1 discriminator 1 view .LVU3759
1733:src/xeq.c     **** 		} else {
 14342              		.loc 1 1733 4 discriminator 1 view .LVU3760
1733:src/xeq.c     **** 		} else {
 14343              		.loc 1 1733 4 is_stmt 0 discriminator 1 view .LVU3761
 14344 0032 DDE90023 		ldrd	r2, [sp]
 14345              	.LBB2608:
 14346              	.LBB2609:
1423:src/xeq.c     **** }
 14347              		.loc 1 1423 8 discriminator 1 view .LVU3762
 14348 0036 2046     		mov	r0, r4
 14349 0038 CDE90223 		strd	r2, [sp, #8]
 14350              	.LVL1018:
1423:src/xeq.c     **** }
 14351              		.loc 1 1423 8 discriminator 1 view .LVU3763
 14352              	.LBE2609:
 14353              	.LBI2608:
1422:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 14354              		.loc 1 1422 6 is_stmt 1 discriminator 1 view .LVU3764
 14355              	.LBB2610:
1423:src/xeq.c     **** }
 14356              		.loc 1 1423 2 discriminator 1 view .LVU3765
1423:src/xeq.c     **** }
 14357              		.loc 1 1423 8 is_stmt 0 discriminator 1 view .LVU3766
 14358 003c FFF7FEFF 		bl	get_reg_n
 14359              	.LVL1019:
1423:src/xeq.c     **** }
 14360              		.loc 1 1423 2 discriminator 1 view .LVU3767
 14361 0040 0822     		movs	r2, #8
 14362 0042 0DEB0201 		add	r1, sp, r2
 14363 0046 FFF7FEFF 		bl	xcopy
 14364              	.LVL1020:
1423:src/xeq.c     **** }
 14365              		.loc 1 1423 2 discriminator 1 view .LVU3768
 14366              	.LBE2610:
 14367              	.LBE2608:
 14368              	.LBE2612:
1742:src/xeq.c     **** 
 14369              		.loc 1 1742 1 discriminator 1 view .LVU3769
 14370 004a 0CB0     		add	sp, sp, #48
 14371              		.cfi_remember_state
 14372              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccqED0AM.s 			page 415


 14373              		@ sp needed
 14374 004c 10BD     		pop	{r4, pc}
 14375              	.LVL1021:
 14376              	.L1032:
 14377              		.cfi_restore_state
 14378              	.LBB2613:
1735:src/xeq.c     **** 
 14379              		.loc 1 1735 4 is_stmt 1 view .LVU3770
1737:src/xeq.c     **** 				illegal(op);
 14380              		.loc 1 1737 4 view .LVU3771
1737:src/xeq.c     **** 				illegal(op);
 14381              		.loc 1 1737 8 is_stmt 0 view .LVU3772
 14382 004e 02AA     		add	r2, sp, #8
 14383 0050 2146     		mov	r1, r4
 14384 0052 FFF7FEFF 		bl	storcl_op
 14385              	.LVL1022:
1737:src/xeq.c     **** 				illegal(op);
 14386              		.loc 1 1737 7 view .LVU3773
 14387 0056 20B1     		cbz	r0, .L1034
1738:src/xeq.c     **** 			setRegister(arg, &r);
 14388              		.loc 1 1738 5 is_stmt 1 view .LVU3774
1738:src/xeq.c     **** 			setRegister(arg, &r);
 14389              		.loc 1 1738 5 view .LVU3775
 14390              	.LVL1023:
 14391              	.LBB2614:
 14392              	.LBI2614:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14393              		.loc 1 546 5 view .LVU3776
 14394              	.LBB2615:
 547:src/xeq.c     **** 		Error = e;
 14395              		.loc 1 547 2 view .LVU3777
 547:src/xeq.c     **** 		Error = e;
 14396              		.loc 1 547 12 is_stmt 0 view .LVU3778
 14397 0058 084B     		ldr	r3, .L1043+4
 547:src/xeq.c     **** 		Error = e;
 14398              		.loc 1 547 5 view .LVU3779
 14399 005a 1A68     		ldr	r2, [r3]
 14400 005c 0AB9     		cbnz	r2, .L1034
 14401              	.LVL1024:
 14402              	.LBB2616:
 14403              	.LBI2616:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14404              		.loc 1 546 5 is_stmt 1 view .LVU3780
 14405              	.LBB2617:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14406              		.loc 1 548 3 view .LVU3781
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14407              		.loc 1 548 9 is_stmt 0 view .LVU3782
 14408 005e 0322     		movs	r2, #3
 14409 0060 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14410              		.loc 1 549 3 is_stmt 1 view .LVU3783
 14411              	.LVL1025:
 14412              	.L1034:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14413              		.loc 1 549 3 is_stmt 0 view .LVU3784
 14414              	.LBE2617:
ARM GAS  /tmp/ccqED0AM.s 			page 416


 14415              	.LBE2616:
 14416              	.LBE2615:
 14417              	.LBE2614:
1738:src/xeq.c     **** 			setRegister(arg, &r);
 14418              		.loc 1 1738 5 is_stmt 1 discriminator 1 view .LVU3785
1739:src/xeq.c     **** 		}
 14419              		.loc 1 1739 4 discriminator 1 view .LVU3786
 14420 0062 02A9     		add	r1, sp, #8
 14421 0064 2046     		mov	r0, r4
 14422 0066 FFF7FEFF 		bl	setRegister
 14423              	.LVL1026:
 14424              	.LBE2613:
1742:src/xeq.c     **** 
 14425              		.loc 1 1742 1 is_stmt 0 discriminator 1 view .LVU3787
 14426 006a 0CB0     		add	sp, sp, #48
 14427              		.cfi_remember_state
 14428              		.cfi_def_cfa_offset 8
 14429              		@ sp needed
 14430 006c 10BD     		pop	{r4, pc}
 14431              	.LVL1027:
 14432              	.L1042:
 14433              		.cfi_restore_state
1726:src/xeq.c     **** 	} else {
 14434              		.loc 1 1726 3 is_stmt 1 view .LVU3788
 14435 006e 6421     		movs	r1, #100
 14436              	.LVL1028:
1726:src/xeq.c     **** 	} else {
 14437              		.loc 1 1726 3 is_stmt 0 view .LVU3789
 14438 0070 FFF7FEFF 		bl	copyreg_n
 14439              	.LVL1029:
1742:src/xeq.c     **** 
 14440              		.loc 1 1742 1 view .LVU3790
 14441 0074 0CB0     		add	sp, sp, #48
 14442              		.cfi_def_cfa_offset 8
 14443              		@ sp needed
 14444 0076 10BD     		pop	{r4, pc}
 14445              	.L1044:
 14446              		.align	2
 14447              	.L1043:
 14448 0078 00000000 		.word	main_ram
 14449 007c 00000000 		.word	Error
 14450              		.cfi_endproc
 14451              	.LFE117:
 14453              		.section	.text.cmdrcl,"ax",%progbits
 14454              		.align	1
 14455              		.p2align 2,,3
 14456              		.global	cmdrcl
 14457              		.syntax unified
 14458              		.thumb
 14459              		.thumb_func
 14460              		.fpu fpv4-sp-d16
 14462              	cmdrcl:
 14463              	.LVL1030:
 14464              	.LFB119:
1771:src/xeq.c     **** 	do_rcl(arg, op);
 14465              		.loc 1 1771 45 is_stmt 1 view -0
 14466              		.cfi_startproc
ARM GAS  /tmp/ccqED0AM.s 			page 417


 14467              		@ args = 0, pretend = 0, frame = 0
 14468              		@ frame_needed = 0, uses_anonymous_args = 0
 14469              		@ link register save eliminated.
1772:src/xeq.c     **** }
 14470              		.loc 1 1772 2 view .LVU3792
 14471 0000 FFF7FEBF 		b	do_rcl
 14472              	.LVL1031:
1772:src/xeq.c     **** }
 14473              		.loc 1 1772 2 is_stmt 0 view .LVU3793
 14474              		.cfi_endproc
 14475              	.LFE119:
 14477              		.section	.text.cmdcsto,"ax",%progbits
 14478              		.align	1
 14479              		.p2align 2,,3
 14480              		.global	cmdcsto
 14481              		.syntax unified
 14482              		.thumb
 14483              		.thumb_func
 14484              		.fpu fpv4-sp-d16
 14486              	cmdcsto:
 14487              	.LVL1032:
 14488              	.LFB121:
1816:src/xeq.c     **** 	decNumber r1, r2;
 14489              		.loc 1 1816 46 is_stmt 1 view -0
 14490              		.cfi_startproc
 14491              		@ args = 0, pretend = 0, frame = 72
 14492              		@ frame_needed = 0, uses_anonymous_args = 0
1817:src/xeq.c     **** 	REGISTER *t1, *t2;
 14493              		.loc 1 1817 2 view .LVU3795
1818:src/xeq.c     **** 
 14494              		.loc 1 1818 2 view .LVU3796
1820:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
 14495              		.loc 1 1820 2 view .LVU3797
1816:src/xeq.c     **** 	decNumber r1, r2;
 14496              		.loc 1 1816 46 is_stmt 0 view .LVU3798
 14497 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 14498              		.cfi_def_cfa_offset 24
 14499              		.cfi_offset 4, -24
 14500              		.cfi_offset 5, -20
 14501              		.cfi_offset 6, -16
 14502              		.cfi_offset 7, -12
 14503              		.cfi_offset 8, -8
 14504              		.cfi_offset 14, -4
 14505 0004 94B0     		sub	sp, sp, #80
 14506              		.cfi_def_cfa_offset 104
1816:src/xeq.c     **** 	decNumber r1, r2;
 14507              		.loc 1 1816 46 view .LVU3799
 14508 0006 0C46     		mov	r4, r1
1821:src/xeq.c     **** 
 14509              		.loc 1 1821 21 view .LVU3800
 14510 0008 461C     		adds	r6, r0, #1
1816:src/xeq.c     **** 	decNumber r1, r2;
 14511              		.loc 1 1816 46 view .LVU3801
 14512 000a 0546     		mov	r5, r0
1820:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
 14513              		.loc 1 1820 7 view .LVU3802
 14514 000c FFF7FEFF 		bl	get_reg_n
ARM GAS  /tmp/ccqED0AM.s 			page 418


 14515              	.LVL1033:
1820:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
 14516              		.loc 1 1820 7 view .LVU3803
 14517 0010 8046     		mov	r8, r0
1821:src/xeq.c     **** 
 14518              		.loc 1 1821 7 view .LVU3804
 14519 0012 3046     		mov	r0, r6
 14520              	.LVL1034:
1821:src/xeq.c     **** 
 14521              		.loc 1 1821 2 is_stmt 1 view .LVU3805
1821:src/xeq.c     **** 
 14522              		.loc 1 1821 7 is_stmt 0 view .LVU3806
 14523 0014 FFF7FEFF 		bl	get_reg_n
 14524              	.LVL1035:
1823:src/xeq.c     **** 		copyreg(t1, StackBase);
 14525              		.loc 1 1823 2 is_stmt 1 view .LVU3807
1823:src/xeq.c     **** 		copyreg(t1, StackBase);
 14526              		.loc 1 1823 5 is_stmt 0 view .LVU3808
 14527 0018 152C     		cmp	r4, #21
 14528 001a 24D0     		beq	.L1058
1827:src/xeq.c     **** 			bad_mode_error();
 14529              		.loc 1 1827 3 is_stmt 1 view .LVU3809
1827:src/xeq.c     **** 			bad_mode_error();
 14530              		.loc 1 1827 7 is_stmt 0 view .LVU3810
 14531 001c 284B     		ldr	r3, .L1059
 14532 001e 1B68     		ldr	r3, [r3]
 14533 0020 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1827:src/xeq.c     **** 			bad_mode_error();
 14534              		.loc 1 1827 6 view .LVU3811
 14535 0024 13F00103 		ands	r3, r3, #1
 14536 0028 0DD0     		beq	.L1051
1828:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CSTO, arg, &r1, &r2, 0))
 14537              		.loc 1 1828 4 is_stmt 1 view .LVU3812
 14538              	.LBB2637:
 14539              	.LBI2637:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 14540              		.loc 1 575 6 view .LVU3813
 14541              	.LBE2637:
 576:src/xeq.c     **** }
 14542              		.loc 1 576 2 view .LVU3814
 14543              	.LVL1036:
 14544              	.LBB2642:
 14545              	.LBB2638:
 14546              	.LBI2638:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14547              		.loc 1 546 5 view .LVU3815
 14548              	.LBB2639:
 547:src/xeq.c     **** 		Error = e;
 14549              		.loc 1 547 2 view .LVU3816
 547:src/xeq.c     **** 		Error = e;
 14550              		.loc 1 547 12 is_stmt 0 view .LVU3817
 14551 002a 264B     		ldr	r3, .L1059+4
 547:src/xeq.c     **** 		Error = e;
 14552              		.loc 1 547 5 view .LVU3818
 14553 002c 1A68     		ldr	r2, [r3]
 14554 002e 0AB9     		cbnz	r2, .L1050
 14555              	.LVL1037:
ARM GAS  /tmp/ccqED0AM.s 			page 419


 14556              	.LBB2640:
 14557              	.LBI2640:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14558              		.loc 1 546 5 is_stmt 1 view .LVU3819
 14559              	.LBB2641:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14560              		.loc 1 548 3 view .LVU3820
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14561              		.loc 1 548 9 is_stmt 0 view .LVU3821
 14562 0030 0D22     		movs	r2, #13
 14563 0032 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14564              		.loc 1 549 3 is_stmt 1 view .LVU3822
 14565              	.LVL1038:
 14566              	.L1050:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14567              		.loc 1 549 3 is_stmt 0 view .LVU3823
 14568              	.LBE2641:
 14569              	.LBE2640:
 14570              	.LBE2639:
 14571              	.LBE2638:
 14572              	.LBE2642:
1836:src/xeq.c     **** }
 14573              		.loc 1 1836 2 is_stmt 1 view .LVU3824
 14574              	.LBB2643:
 14575              	.LBI2643:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 14576              		.loc 1 539 13 view .LVU3825
 14577              	.LBB2644:
 540:src/xeq.c     **** }
 14578              		.loc 1 540 2 view .LVU3826
 540:src/xeq.c     **** }
 14579              		.loc 1 540 20 is_stmt 0 view .LVU3827
 14580 0034 244B     		ldr	r3, .L1059+8
 14581 0036 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 14582 0038 0121     		movs	r1, #1
 14583 003a 61F38712 		bfi	r2, r1, #6, #2
 14584 003e 1A75     		strb	r2, [r3, #20]
 14585              	.LBE2644:
 14586              	.LBE2643:
1837:src/xeq.c     **** 
 14587              		.loc 1 1837 1 view .LVU3828
 14588 0040 14B0     		add	sp, sp, #80
 14589              		.cfi_remember_state
 14590              		.cfi_def_cfa_offset 24
 14591              		@ sp needed
 14592 0042 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 14593              	.LVL1039:
 14594              	.L1051:
 14595              		.cfi_restore_state
1829:src/xeq.c     **** 			illegal(op);
 14596              		.loc 1 1829 8 is_stmt 1 view .LVU3829
1829:src/xeq.c     **** 			illegal(op);
 14597              		.loc 1 1829 12 is_stmt 0 view .LVU3830
 14598 0046 153C     		subs	r4, r4, #21
 14599 0048 0093     		str	r3, [sp]
 14600 004a A0B2     		uxth	r0, r4
ARM GAS  /tmp/ccqED0AM.s 			page 420


 14601              	.LVL1040:
1829:src/xeq.c     **** 			illegal(op);
 14602              		.loc 1 1829 12 view .LVU3831
 14603 004c 0BAB     		add	r3, sp, #44
 14604 004e 02AA     		add	r2, sp, #8
 14605 0050 2946     		mov	r1, r5
 14606 0052 FFF7FEFF 		bl	storcl_cop
 14607              	.LVL1041:
1829:src/xeq.c     **** 			illegal(op);
 14608              		.loc 1 1829 11 view .LVU3832
 14609 0056 50B3     		cbz	r0, .L1053
1830:src/xeq.c     **** 		else {
 14610              		.loc 1 1830 4 is_stmt 1 view .LVU3833
1830:src/xeq.c     **** 		else {
 14611              		.loc 1 1830 4 view .LVU3834
 14612              	.LVL1042:
 14613              	.LBB2645:
 14614              	.LBI2645:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14615              		.loc 1 546 5 view .LVU3835
 14616              	.LBB2646:
 547:src/xeq.c     **** 		Error = e;
 14617              		.loc 1 547 2 view .LVU3836
 547:src/xeq.c     **** 		Error = e;
 14618              		.loc 1 547 12 is_stmt 0 view .LVU3837
 14619 0058 1A4B     		ldr	r3, .L1059+4
 547:src/xeq.c     **** 		Error = e;
 14620              		.loc 1 547 5 view .LVU3838
 14621 005a 1A68     		ldr	r2, [r3]
 14622 005c 002A     		cmp	r2, #0
 14623 005e E9D1     		bne	.L1050
 14624              	.LVL1043:
 14625              	.LBB2647:
 14626              	.LBI2647:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14627              		.loc 1 546 5 is_stmt 1 view .LVU3839
 14628              	.LBB2648:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14629              		.loc 1 548 3 view .LVU3840
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14630              		.loc 1 548 9 is_stmt 0 view .LVU3841
 14631 0060 0322     		movs	r2, #3
 14632 0062 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14633              		.loc 1 549 3 is_stmt 1 view .LVU3842
 14634 0064 E6E7     		b	.L1050
 14635              	.LVL1044:
 14636              	.L1058:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14637              		.loc 1 549 3 is_stmt 0 view .LVU3843
 14638              	.LBE2648:
 14639              	.LBE2647:
 14640              	.LBE2646:
 14641              	.LBE2645:
1824:src/xeq.c     **** 		copyreg(t2, get_reg_n(regY_idx));
 14642              		.loc 1 1824 3 is_stmt 1 view .LVU3844
 14643              	.LBB2649:
ARM GAS  /tmp/ccqED0AM.s 			page 421


 14644              	.LBB2650:
 14645              	.LBB2651:
 14646              	.LBB2652:
1119:src/xeq.c     **** }
 14647              		.loc 1 1119 24 is_stmt 0 view .LVU3845
 14648 0066 164D     		ldr	r5, .L1059
 14649              	.LVL1045:
1119:src/xeq.c     **** }
 14650              		.loc 1 1119 24 view .LVU3846
 14651              	.LBE2652:
 14652              	.LBE2651:
 14653              	.LBE2650:
 14654              	.LBE2649:
1824:src/xeq.c     **** 		copyreg(t2, get_reg_n(regY_idx));
 14655              		.loc 1 1824 3 view .LVU3847
 14656 0068 184A     		ldr	r2, .L1059+12
 14657              	.LVL1046:
 14658              	.LBB2658:
 14659              	.LBI2649:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14660              		.loc 1 726 6 is_stmt 1 view .LVU3848
 14661              	.LBB2657:
 727:src/xeq.c     **** }
 14662              		.loc 1 727 2 view .LVU3849
 14663              	.LBB2655:
 14664              	.LBI2651:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14665              		.loc 1 1118 5 view .LVU3850
 14666              	.LBB2653:
1119:src/xeq.c     **** }
 14667              		.loc 1 1119 2 view .LVU3851
1119:src/xeq.c     **** }
 14668              		.loc 1 1119 24 is_stmt 0 view .LVU3852
 14669 006a 2B68     		ldr	r3, [r5]
 14670              	.LBE2653:
 14671              	.LBE2655:
 727:src/xeq.c     **** }
 14672              		.loc 1 727 2 view .LVU3853
 14673 006c 1168     		ldr	r1, [r2]
 14674              	.LBB2656:
 14675              	.LBB2654:
1119:src/xeq.c     **** }
 14676              		.loc 1 1119 24 view .LVU3854
 14677 006e B3F8E837 		ldrh	r3, [r3, #2024]
 14678 0072 44F20104 		movw	r4, #16385
 14679              	.LBE2654:
 14680              	.LBE2656:
 727:src/xeq.c     **** }
 14681              		.loc 1 727 2 view .LVU3855
 14682 0076 2340     		ands	r3, r3, r4
 14683 0078 B3F5804F 		cmp	r3, #16384
 14684 007c 0CBF     		ite	eq
 14685 007e 1022     		moveq	r2, #16
 14686              	.LVL1047:
 727:src/xeq.c     **** }
 14687              		.loc 1 727 2 view .LVU3856
 14688 0080 0822     		movne	r2, #8
ARM GAS  /tmp/ccqED0AM.s 			page 422


 14689 0082 0746     		mov	r7, r0
 14690 0084 4046     		mov	r0, r8
 14691              	.LVL1048:
 727:src/xeq.c     **** }
 14692              		.loc 1 727 2 view .LVU3857
 14693 0086 FFF7FEFF 		bl	xcopy
 14694              	.LVL1049:
 727:src/xeq.c     **** }
 14695              		.loc 1 727 2 view .LVU3858
 14696              	.LBE2657:
 14697              	.LBE2658:
1825:src/xeq.c     **** 	} else {
 14698              		.loc 1 1825 3 is_stmt 1 view .LVU3859
1825:src/xeq.c     **** 	} else {
 14699              		.loc 1 1825 15 is_stmt 0 view .LVU3860
 14700 008a 6520     		movs	r0, #101
 14701 008c FFF7FEFF 		bl	get_reg_n
 14702              	.LVL1050:
 14703              	.LBB2659:
 14704              	.LBB2660:
 14705              	.LBB2661:
 14706              	.LBB2662:
1119:src/xeq.c     **** }
 14707              		.loc 1 1119 24 view .LVU3861
 14708 0090 2B68     		ldr	r3, [r5]
 14709 0092 B3F8E837 		ldrh	r3, [r3, #2024]
 14710              	.LBE2662:
 14711              	.LBE2661:
 727:src/xeq.c     **** }
 14712              		.loc 1 727 2 view .LVU3862
 14713 0096 1C40     		ands	r4, r4, r3
 14714 0098 B4F5804F 		cmp	r4, #16384
 14715              	.LBE2660:
 14716              	.LBE2659:
1825:src/xeq.c     **** 	} else {
 14717              		.loc 1 1825 15 view .LVU3863
 14718 009c 0146     		mov	r1, r0
 14719              	.LVL1051:
 14720              	.LBB2666:
 14721              	.LBI2659:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14722              		.loc 1 726 6 is_stmt 1 view .LVU3864
 14723              	.LBB2665:
 727:src/xeq.c     **** }
 14724              		.loc 1 727 2 view .LVU3865
 14725              	.LBB2664:
 14726              	.LBI2661:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14727              		.loc 1 1118 5 view .LVU3866
 14728              	.LBB2663:
1119:src/xeq.c     **** }
 14729              		.loc 1 1119 2 view .LVU3867
 14730              	.LBE2663:
 14731              	.LBE2664:
 727:src/xeq.c     **** }
 14732              		.loc 1 727 2 is_stmt 0 view .LVU3868
 14733 009e 08BF     		it	eq
ARM GAS  /tmp/ccqED0AM.s 			page 423


 14734 00a0 1022     		moveq	r2, #16
 14735 00a2 3846     		mov	r0, r7
 14736              	.LVL1052:
 727:src/xeq.c     **** }
 14737              		.loc 1 727 2 view .LVU3869
 14738 00a4 18BF     		it	ne
 14739 00a6 0822     		movne	r2, #8
 14740 00a8 FFF7FEFF 		bl	xcopy
 14741              	.LVL1053:
 728:src/xeq.c     **** 
 14742              		.loc 1 728 1 view .LVU3870
 14743 00ac C2E7     		b	.L1050
 14744              	.LVL1054:
 14745              	.L1053:
 728:src/xeq.c     **** 
 14746              		.loc 1 728 1 view .LVU3871
 14747              	.LBE2665:
 14748              	.LBE2666:
1832:src/xeq.c     **** 			setRegister(arg + 1, &r2);
 14749              		.loc 1 1832 4 is_stmt 1 view .LVU3872
 14750 00ae 02A9     		add	r1, sp, #8
 14751 00b0 2846     		mov	r0, r5
 14752 00b2 FFF7FEFF 		bl	setRegister
 14753              	.LVL1055:
1833:src/xeq.c     **** 		}
 14754              		.loc 1 1833 4 view .LVU3873
 14755 00b6 0BA9     		add	r1, sp, #44
 14756 00b8 3046     		mov	r0, r6
 14757 00ba FFF7FEFF 		bl	setRegister
 14758              	.LVL1056:
 14759 00be B9E7     		b	.L1050
 14760              	.L1060:
 14761              		.align	2
 14762              	.L1059:
 14763 00c0 00000000 		.word	main_ram
 14764 00c4 00000000 		.word	Error
 14765 00c8 00000000 		.word	StateWhileOn
 14766 00cc 00000000 		.word	StackBase
 14767              		.cfi_endproc
 14768              	.LFE121:
 14770              		.section	.text.cmdcrcl,"ax",%progbits
 14771              		.align	1
 14772              		.p2align 2,,3
 14773              		.global	cmdcrcl
 14774              		.syntax unified
 14775              		.thumb
 14776              		.thumb_func
 14777              		.fpu fpv4-sp-d16
 14779              	cmdcrcl:
 14780              	.LVL1057:
 14781              	.LFB123:
1862:src/xeq.c     **** 	do_crcl(arg, op);
 14782              		.loc 1 1862 46 view -0
 14783              		.cfi_startproc
 14784              		@ args = 0, pretend = 0, frame = 72
 14785              		@ frame_needed = 0, uses_anonymous_args = 0
1863:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
ARM GAS  /tmp/ccqED0AM.s 			page 424


 14786              		.loc 1 1863 2 view .LVU3875
1862:src/xeq.c     **** 	do_crcl(arg, op);
 14787              		.loc 1 1862 46 is_stmt 0 view .LVU3876
 14788 0000 70B5     		push	{r4, r5, r6, lr}
 14789              		.cfi_def_cfa_offset 16
 14790              		.cfi_offset 4, -16
 14791              		.cfi_offset 5, -12
 14792              		.cfi_offset 6, -8
 14793              		.cfi_offset 14, -4
 14794              	.LBB2697:
 14795              	.LBB2698:
1842:src/xeq.c     **** 		REGISTER x, y;
 14796              		.loc 1 1842 5 view .LVU3877
 14797 0002 1A29     		cmp	r1, #26
 14798              	.LBE2698:
 14799              	.LBE2697:
1862:src/xeq.c     **** 	do_crcl(arg, op);
 14800              		.loc 1 1862 46 view .LVU3878
 14801 0004 94B0     		sub	sp, sp, #80
 14802              		.cfi_def_cfa_offset 96
1862:src/xeq.c     **** 	do_crcl(arg, op);
 14803              		.loc 1 1862 46 view .LVU3879
 14804 0006 0446     		mov	r4, r0
 14805              	.LVL1058:
 14806              	.LBB2747:
 14807              	.LBI2697:
1839:src/xeq.c     **** 	decNumber r1, r2;
 14808              		.loc 1 1839 13 is_stmt 1 view .LVU3880
 14809              	.LBB2744:
1840:src/xeq.c     **** 
 14810              		.loc 1 1840 2 view .LVU3881
1842:src/xeq.c     **** 		REGISTER x, y;
 14811              		.loc 1 1842 2 view .LVU3882
1842:src/xeq.c     **** 		REGISTER x, y;
 14812              		.loc 1 1842 5 is_stmt 0 view .LVU3883
 14813 0008 2AD0     		beq	.L1077
1850:src/xeq.c     **** 			bad_mode_error();
 14814              		.loc 1 1850 3 is_stmt 1 view .LVU3884
1850:src/xeq.c     **** 			bad_mode_error();
 14815              		.loc 1 1850 7 is_stmt 0 view .LVU3885
 14816 000a 3B4D     		ldr	r5, .L1078
 14817 000c 2B68     		ldr	r3, [r5]
 14818 000e 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
1850:src/xeq.c     **** 			bad_mode_error();
 14819              		.loc 1 1850 6 view .LVU3886
 14820 0012 D207     		lsls	r2, r2, #31
 14821 0014 11D5     		bpl	.L1068
1851:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CRCL, index, &r1, &r2, 1))
 14822              		.loc 1 1851 4 is_stmt 1 view .LVU3887
 14823              	.LBB2699:
 14824              	.LBI2699:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 14825              		.loc 1 575 6 view .LVU3888
 14826              	.LBE2699:
 14827              	.LBE2744:
 14828              	.LBE2747:
 576:src/xeq.c     **** }
ARM GAS  /tmp/ccqED0AM.s 			page 425


 14829              		.loc 1 576 2 view .LVU3889
 14830              	.LVL1059:
 14831              	.LBB2748:
 14832              	.LBB2745:
 14833              	.LBB2704:
 14834              	.LBB2700:
 14835              	.LBI2700:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14836              		.loc 1 546 5 view .LVU3890
 14837              	.LBB2701:
 547:src/xeq.c     **** 		Error = e;
 14838              		.loc 1 547 2 view .LVU3891
 547:src/xeq.c     **** 		Error = e;
 14839              		.loc 1 547 12 is_stmt 0 view .LVU3892
 14840 0016 394A     		ldr	r2, .L1078+4
 547:src/xeq.c     **** 		Error = e;
 14841              		.loc 1 547 5 view .LVU3893
 14842 0018 1168     		ldr	r1, [r2]
 14843              	.LVL1060:
 547:src/xeq.c     **** 		Error = e;
 14844              		.loc 1 547 5 view .LVU3894
 14845 001a 09B9     		cbnz	r1, .L1067
 14846              	.LVL1061:
 14847              	.LBB2702:
 14848              	.LBI2702:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14849              		.loc 1 546 5 is_stmt 1 view .LVU3895
 14850              	.LBB2703:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14851              		.loc 1 548 3 view .LVU3896
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14852              		.loc 1 548 9 is_stmt 0 view .LVU3897
 14853 001c 0D21     		movs	r1, #13
 14854 001e 1160     		str	r1, [r2]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14855              		.loc 1 549 3 is_stmt 1 view .LVU3898
 14856              	.LVL1062:
 14857              	.L1067:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14858              		.loc 1 549 3 is_stmt 0 view .LVU3899
 14859              	.LBE2703:
 14860              	.LBE2702:
 14861              	.LBE2701:
 14862              	.LBE2700:
 14863              	.LBE2704:
1859:src/xeq.c     **** }
 14864              		.loc 1 1859 2 is_stmt 1 view .LVU3900
 14865              	.LBB2705:
 14866              	.LBI2705:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 14867              		.loc 1 539 13 view .LVU3901
 14868              	.LBB2706:
 540:src/xeq.c     **** }
 14869              		.loc 1 540 2 view .LVU3902
 540:src/xeq.c     **** }
 14870              		.loc 1 540 20 is_stmt 0 view .LVU3903
 14871 0020 374A     		ldr	r2, .L1078+8
ARM GAS  /tmp/ccqED0AM.s 			page 426


 14872 0022 117D     		ldrb	r1, [r2, #20]	@ zero_extendqisi2
 14873 0024 0120     		movs	r0, #1
 14874 0026 60F38711 		bfi	r1, r0, #6, #2
 14875 002a 1175     		strb	r1, [r2, #20]
 14876              	.LVL1063:
 540:src/xeq.c     **** }
 14877              		.loc 1 540 20 view .LVU3904
 14878              	.LBE2706:
 14879              	.LBE2705:
 14880              	.LBE2745:
 14881              	.LBE2748:
1865:src/xeq.c     **** #endif
 14882              		.loc 1 1865 2 is_stmt 1 view .LVU3905
 14883 002c 93F8AD27 		ldrb	r2, [r3, #1965]	@ zero_extendqisi2
 14884 0030 0243     		orrs	r2, r2, r0
 14885 0032 83F8AD27 		strb	r2, [r3, #1965]
1867:src/xeq.c     **** 
 14886              		.loc 1 1867 1 is_stmt 0 view .LVU3906
 14887 0036 14B0     		add	sp, sp, #80
 14888              		.cfi_remember_state
 14889              		.cfi_def_cfa_offset 16
 14890              		@ sp needed
 14891 0038 70BD     		pop	{r4, r5, r6, pc}
 14892              	.LVL1064:
 14893              	.L1068:
 14894              		.cfi_restore_state
 14895              	.LBB2749:
 14896              	.LBB2746:
1852:src/xeq.c     **** 			illegal(op);
 14897              		.loc 1 1852 8 is_stmt 1 view .LVU3907
1852:src/xeq.c     **** 			illegal(op);
 14898              		.loc 1 1852 12 is_stmt 0 view .LVU3908
 14899 003a 1A39     		subs	r1, r1, #26
 14900              	.LVL1065:
1852:src/xeq.c     **** 			illegal(op);
 14901              		.loc 1 1852 12 view .LVU3909
 14902 003c 0126     		movs	r6, #1
 14903 003e 88B2     		uxth	r0, r1
 14904              	.LVL1066:
1852:src/xeq.c     **** 			illegal(op);
 14905              		.loc 1 1852 12 view .LVU3910
 14906 0040 0BAB     		add	r3, sp, #44
 14907 0042 2146     		mov	r1, r4
 14908 0044 02AA     		add	r2, sp, #8
 14909 0046 0096     		str	r6, [sp]
 14910 0048 FFF7FEFF 		bl	storcl_cop
 14911              	.LVL1067:
1852:src/xeq.c     **** 			illegal(op);
 14912              		.loc 1 1852 11 view .LVU3911
 14913 004c 0028     		cmp	r0, #0
 14914 004e 4AD0     		beq	.L1069
1853:src/xeq.c     **** 		else {
 14915              		.loc 1 1853 4 is_stmt 1 view .LVU3912
1853:src/xeq.c     **** 		else {
 14916              		.loc 1 1853 4 view .LVU3913
 14917              	.LVL1068:
 14918              	.LBB2707:
ARM GAS  /tmp/ccqED0AM.s 			page 427


 14919              	.LBI2707:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14920              		.loc 1 546 5 view .LVU3914
 14921              	.LBB2708:
 547:src/xeq.c     **** 		Error = e;
 14922              		.loc 1 547 2 view .LVU3915
 547:src/xeq.c     **** 		Error = e;
 14923              		.loc 1 547 12 is_stmt 0 view .LVU3916
 14924 0050 2A4A     		ldr	r2, .L1078+4
 547:src/xeq.c     **** 		Error = e;
 14925              		.loc 1 547 5 view .LVU3917
 14926 0052 1368     		ldr	r3, [r2]
 14927 0054 002B     		cmp	r3, #0
 14928 0056 4CD1     		bne	.L1076
 14929              	.LVL1069:
 14930              	.LBB2709:
 14931              	.LBI2709:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14932              		.loc 1 546 5 is_stmt 1 view .LVU3918
 14933              	.LBB2710:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14934              		.loc 1 548 3 view .LVU3919
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14935              		.loc 1 548 9 is_stmt 0 view .LVU3920
 14936 0058 0321     		movs	r1, #3
 14937 005a 2B68     		ldr	r3, [r5]
 14938 005c 1160     		str	r1, [r2]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14939              		.loc 1 549 3 is_stmt 1 view .LVU3921
 14940 005e DFE7     		b	.L1067
 14941              	.LVL1070:
 14942              	.L1077:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14943              		.loc 1 549 3 is_stmt 0 view .LVU3922
 14944              	.LBE2710:
 14945              	.LBE2709:
 14946              	.LBE2708:
 14947              	.LBE2707:
 14948              	.LBB2711:
1843:src/xeq.c     **** 		copyreg(&x, get_reg_n(index));
 14949              		.loc 1 1843 3 is_stmt 1 view .LVU3923
1844:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
 14950              		.loc 1 1844 3 view .LVU3924
 14951              	.LBB2712:
 14952              	.LBB2713:
 14953              	.LBB2714:
 14954              	.LBB2715:
1119:src/xeq.c     **** }
 14955              		.loc 1 1119 24 is_stmt 0 view .LVU3925
 14956 0060 254E     		ldr	r6, .L1078
 14957              	.LBE2715:
 14958              	.LBE2714:
 14959              	.LBE2713:
 14960              	.LBE2712:
1844:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
 14961              		.loc 1 1844 15 view .LVU3926
 14962 0062 FFF7FEFF 		bl	get_reg_n
ARM GAS  /tmp/ccqED0AM.s 			page 428


 14963              	.LVL1071:
 14964              	.LBB2722:
 14965              	.LBB2720:
 14966              	.LBB2718:
 14967              	.LBB2716:
1119:src/xeq.c     **** }
 14968              		.loc 1 1119 24 view .LVU3927
 14969 0066 3368     		ldr	r3, [r6]
 14970 0068 B3F8E837 		ldrh	r3, [r3, #2024]
 14971 006c 44F20105 		movw	r5, #16385
 14972              	.LBE2716:
 14973              	.LBE2718:
 727:src/xeq.c     **** }
 14974              		.loc 1 727 2 view .LVU3928
 14975 0070 2B40     		ands	r3, r3, r5
 14976 0072 B3F5804F 		cmp	r3, #16384
 14977 0076 0CBF     		ite	eq
 14978 0078 1022     		moveq	r2, #16
 14979 007a 0822     		movne	r2, #8
 14980              	.LBE2720:
 14981              	.LBE2722:
1844:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
 14982              		.loc 1 1844 15 view .LVU3929
 14983 007c 0146     		mov	r1, r0
 14984              	.LVL1072:
 14985              	.LBB2723:
 14986              	.LBI2712:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14987              		.loc 1 726 6 is_stmt 1 view .LVU3930
 14988              	.LBB2721:
 727:src/xeq.c     **** }
 14989              		.loc 1 727 2 view .LVU3931
 14990              	.LBB2719:
 14991              	.LBI2714:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14992              		.loc 1 1118 5 view .LVU3932
 14993              	.LBB2717:
1119:src/xeq.c     **** }
 14994              		.loc 1 1119 2 view .LVU3933
 14995              	.LBE2717:
 14996              	.LBE2719:
 727:src/xeq.c     **** }
 14997              		.loc 1 727 2 is_stmt 0 view .LVU3934
 14998 007e 02A8     		add	r0, sp, #8
 14999              	.LVL1073:
 727:src/xeq.c     **** }
 15000              		.loc 1 727 2 view .LVU3935
 15001 0080 FFF7FEFF 		bl	xcopy
 15002              	.LVL1074:
 727:src/xeq.c     **** }
 15003              		.loc 1 727 2 view .LVU3936
 15004              	.LBE2721:
 15005              	.LBE2723:
1845:src/xeq.c     **** 		lift2_if_enabled();
 15006              		.loc 1 1845 3 is_stmt 1 view .LVU3937
1845:src/xeq.c     **** 		lift2_if_enabled();
 15007              		.loc 1 1845 15 is_stmt 0 view .LVU3938
ARM GAS  /tmp/ccqED0AM.s 			page 429


 15008 0084 601C     		adds	r0, r4, #1
 15009 0086 FFF7FEFF 		bl	get_reg_n
 15010              	.LVL1075:
 15011              	.LBB2724:
 15012              	.LBB2725:
 15013              	.LBB2726:
 15014              	.LBB2727:
1119:src/xeq.c     **** }
 15015              		.loc 1 1119 24 view .LVU3939
 15016 008a 3368     		ldr	r3, [r6]
 15017 008c B3F8E837 		ldrh	r3, [r3, #2024]
 15018              	.LBE2727:
 15019              	.LBE2726:
 727:src/xeq.c     **** }
 15020              		.loc 1 727 2 view .LVU3940
 15021 0090 2B40     		ands	r3, r3, r5
 15022 0092 B3F5804F 		cmp	r3, #16384
 15023              	.LBE2725:
 15024              	.LBE2724:
1845:src/xeq.c     **** 		lift2_if_enabled();
 15025              		.loc 1 1845 15 view .LVU3941
 15026 0096 0146     		mov	r1, r0
 15027              	.LVL1076:
 15028              	.LBB2731:
 15029              	.LBI2724:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 15030              		.loc 1 726 6 is_stmt 1 view .LVU3942
 15031              	.LBB2730:
 727:src/xeq.c     **** }
 15032              		.loc 1 727 2 view .LVU3943
 15033              	.LBB2729:
 15034              	.LBI2726:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15035              		.loc 1 1118 5 view .LVU3944
 15036              	.LBB2728:
1119:src/xeq.c     **** }
 15037              		.loc 1 1119 2 view .LVU3945
 15038              	.LBE2728:
 15039              	.LBE2729:
 727:src/xeq.c     **** }
 15040              		.loc 1 727 2 is_stmt 0 view .LVU3946
 15041 0098 0CBF     		ite	eq
 15042 009a 1022     		moveq	r2, #16
 15043 009c 0822     		movne	r2, #8
 15044 009e 0BA8     		add	r0, sp, #44
 15045              	.LVL1077:
 727:src/xeq.c     **** }
 15046              		.loc 1 727 2 view .LVU3947
 15047 00a0 FFF7FEFF 		bl	xcopy
 15048              	.LVL1078:
 727:src/xeq.c     **** }
 15049              		.loc 1 727 2 view .LVU3948
 15050              	.LBE2730:
 15051              	.LBE2731:
1846:src/xeq.c     **** 		copyreg(StackBase, &x);
 15052              		.loc 1 1846 3 is_stmt 1 view .LVU3949
 15053 00a4 FFF7FEFF 		bl	lift2_if_enabled
ARM GAS  /tmp/ccqED0AM.s 			page 430


 15054              	.LVL1079:
1847:src/xeq.c     **** 		copyreg(get_reg_n(regY_idx), &y);
 15055              		.loc 1 1847 3 view .LVU3950
 15056              	.LBB2732:
 15057              	.LBB2733:
 15058              	.LBB2734:
 15059              	.LBB2735:
1119:src/xeq.c     **** }
 15060              		.loc 1 1119 24 is_stmt 0 view .LVU3951
 15061 00a8 3368     		ldr	r3, [r6]
 15062              	.LBE2735:
 15063              	.LBE2734:
 15064              	.LBE2733:
 15065              	.LBE2732:
1847:src/xeq.c     **** 		copyreg(get_reg_n(regY_idx), &y);
 15066              		.loc 1 1847 3 view .LVU3952
 15067 00aa 164A     		ldr	r2, .L1078+12
 15068              	.LVL1080:
 15069              	.LBB2739:
 15070              	.LBI2732:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 15071              		.loc 1 726 6 is_stmt 1 view .LVU3953
 15072              	.LBB2738:
 727:src/xeq.c     **** }
 15073              		.loc 1 727 2 view .LVU3954
 15074              	.LBB2737:
 15075              	.LBI2734:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15076              		.loc 1 1118 5 view .LVU3955
 15077              	.LBB2736:
1119:src/xeq.c     **** }
 15078              		.loc 1 1119 2 view .LVU3956
1119:src/xeq.c     **** }
 15079              		.loc 1 1119 24 is_stmt 0 view .LVU3957
 15080 00ac B3F8E837 		ldrh	r3, [r3, #2024]
 15081              	.LBE2736:
 15082              	.LBE2737:
 727:src/xeq.c     **** }
 15083              		.loc 1 727 2 view .LVU3958
 15084 00b0 1068     		ldr	r0, [r2]
 15085 00b2 2B40     		ands	r3, r3, r5
 15086 00b4 B3F5804F 		cmp	r3, #16384
 15087 00b8 0CBF     		ite	eq
 15088 00ba 1022     		moveq	r2, #16
 15089              	.LVL1081:
 727:src/xeq.c     **** }
 15090              		.loc 1 727 2 view .LVU3959
 15091 00bc 0822     		movne	r2, #8
 15092 00be 02A9     		add	r1, sp, #8
 15093              	.LVL1082:
 727:src/xeq.c     **** }
 15094              		.loc 1 727 2 view .LVU3960
 15095 00c0 FFF7FEFF 		bl	xcopy
 15096              	.LVL1083:
 727:src/xeq.c     **** }
 15097              		.loc 1 727 2 view .LVU3961
 15098              	.LBE2738:
ARM GAS  /tmp/ccqED0AM.s 			page 431


 15099              	.LBE2739:
1848:src/xeq.c     **** 	} else {
 15100              		.loc 1 1848 3 is_stmt 1 view .LVU3962
 15101 00c4 6520     		movs	r0, #101
 15102 00c6 FFF7FEFF 		bl	get_reg_n
 15103              	.LVL1084:
 15104              	.LBB2740:
 15105              	.LBI2740:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 15106              		.loc 1 726 6 view .LVU3963
 15107              	.LBB2741:
 727:src/xeq.c     **** }
 15108              		.loc 1 727 2 view .LVU3964
 15109              	.LBB2742:
 15110              	.LBI2742:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15111              		.loc 1 1118 5 view .LVU3965
 15112              	.LBB2743:
1119:src/xeq.c     **** }
 15113              		.loc 1 1119 2 view .LVU3966
1119:src/xeq.c     **** }
 15114              		.loc 1 1119 24 is_stmt 0 view .LVU3967
 15115 00ca 3368     		ldr	r3, [r6]
 15116 00cc B3F8E837 		ldrh	r3, [r3, #2024]
 15117              	.LBE2743:
 15118              	.LBE2742:
 727:src/xeq.c     **** }
 15119              		.loc 1 727 2 view .LVU3968
 15120 00d0 1D40     		ands	r5, r5, r3
 15121 00d2 B5F5804F 		cmp	r5, #16384
 15122 00d6 0BA9     		add	r1, sp, #44
 15123              	.LVL1085:
 727:src/xeq.c     **** }
 15124              		.loc 1 727 2 view .LVU3969
 15125 00d8 0CBF     		ite	eq
 15126 00da 1022     		moveq	r2, #16
 15127 00dc 0822     		movne	r2, #8
 15128 00de FFF7FEFF 		bl	xcopy
 15129              	.LVL1086:
 727:src/xeq.c     **** }
 15130              		.loc 1 727 2 view .LVU3970
 15131 00e2 3368     		ldr	r3, [r6]
 15132              	.LBE2741:
 15133              	.LBE2740:
 15134              	.LBE2711:
 15135 00e4 9CE7     		b	.L1067
 15136              	.L1069:
1855:src/xeq.c     **** 			setXY(&r1, &r2);
 15137              		.loc 1 1855 4 is_stmt 1 view .LVU3971
 15138 00e6 FFF7FEFF 		bl	setlastXY
 15139              	.LVL1087:
1856:src/xeq.c     **** 		}
 15140              		.loc 1 1856 4 view .LVU3972
 15141 00ea 0BA9     		add	r1, sp, #44
 15142 00ec 02A8     		add	r0, sp, #8
 15143 00ee FFF7FEFF 		bl	setXY
 15144              	.LVL1088:
ARM GAS  /tmp/ccqED0AM.s 			page 432


 15145              	.L1076:
 15146 00f2 2B68     		ldr	r3, [r5]
 15147 00f4 94E7     		b	.L1067
 15148              	.L1079:
 15149 00f6 00BF     		.align	2
 15150              	.L1078:
 15151 00f8 00000000 		.word	main_ram
 15152 00fc 00000000 		.word	Error
 15153 0100 00000000 		.word	StateWhileOn
 15154 0104 00000000 		.word	StackBase
 15155              	.LBE2746:
 15156              	.LBE2749:
 15157              		.cfi_endproc
 15158              	.LFE123:
 15160              		.section	.text.cmdircl,"ax",%progbits
 15161              		.align	1
 15162              		.p2align 2,,3
 15163              		.global	cmdircl
 15164              		.syntax unified
 15165              		.thumb
 15166              		.thumb_func
 15167              		.fpu fpv4-sp-d16
 15169              	cmdircl:
 15170              	.LVL1089:
 15171              	.LFB124:
1879:src/xeq.c     **** 	if (is_intmode())
 15172              		.loc 1 1879 46 view -0
 15173              		.cfi_startproc
 15174              		@ args = 0, pretend = 0, frame = 0
 15175              		@ frame_needed = 0, uses_anonymous_args = 0
 15176              		@ link register save eliminated.
1880:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 15177              		.loc 1 1880 2 view .LVU3974
1880:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 15178              		.loc 1 1880 6 is_stmt 0 view .LVU3975
 15179 0000 064B     		ldr	r3, .L1082
 15180 0002 1B68     		ldr	r3, [r3]
 15181 0004 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
1880:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 15182              		.loc 1 1880 5 view .LVU3976
 15183 0008 12F00102 		ands	r2, r2, #1
1879:src/xeq.c     **** 	if (is_intmode())
 15184              		.loc 1 1879 46 view .LVU3977
 15185 000c 0146     		mov	r1, r0
 15186              	.LVL1090:
1880:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 15187              		.loc 1 1880 5 view .LVU3978
 15188 000e 02D0     		beq	.L1081
1881:src/xeq.c     **** 	else
 15189              		.loc 1 1881 3 is_stmt 1 view .LVU3979
 15190              	.LVL1091:
 15191              	.LBB2750:
 15192              	.LBI2750:
1771:src/xeq.c     **** 	do_rcl(arg, op);
 15193              		.loc 1 1771 6 view .LVU3980
 15194              	.LBB2751:
1772:src/xeq.c     **** }
ARM GAS  /tmp/ccqED0AM.s 			page 433


 15195              		.loc 1 1772 2 view .LVU3981
 15196 0010 0A21     		movs	r1, #10
 15197 0012 FFF7FEBF 		b	do_rcl
 15198              	.LVL1092:
 15199              	.L1081:
1772:src/xeq.c     **** }
 15200              		.loc 1 1772 2 is_stmt 0 view .LVU3982
 15201              	.LBE2751:
 15202              	.LBE2750:
1883:src/xeq.c     **** }
 15203              		.loc 1 1883 3 is_stmt 1 view .LVU3983
 15204 0016 6420     		movs	r0, #100
 15205              	.LVL1093:
1883:src/xeq.c     **** }
 15206              		.loc 1 1883 3 is_stmt 0 view .LVU3984
 15207 0018 FFF7FEBF 		b	register_from_int
 15208              	.LVL1094:
 15209              	.L1083:
1883:src/xeq.c     **** }
 15210              		.loc 1 1883 3 view .LVU3985
 15211              		.align	2
 15212              	.L1082:
 15213 001c 00000000 		.word	main_ram
 15214              		.cfi_endproc
 15215              	.LFE124:
 15217              		.section	.text.cmdrrcl,"ax",%progbits
 15218              		.align	1
 15219              		.p2align 2,,3
 15220              		.global	cmdrrcl
 15221              		.syntax unified
 15222              		.thumb
 15223              		.thumb_func
 15224              		.fpu fpv4-sp-d16
 15226              	cmdrrcl:
 15227              	.LVL1095:
 15228              	.LFB125:
1887:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
 15229              		.loc 1 1887 46 is_stmt 1 view -0
 15230              		.cfi_startproc
 15231              		@ args = 0, pretend = 0, frame = 40
 15232              		@ frame_needed = 0, uses_anonymous_args = 0
1888:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 15233              		.loc 1 1888 2 view .LVU3987
1887:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
 15234              		.loc 1 1887 46 is_stmt 0 view .LVU3988
 15235 0000 70B5     		push	{r4, r5, r6, lr}
 15236              		.cfi_def_cfa_offset 16
 15237              		.cfi_offset 4, -16
 15238              		.cfi_offset 5, -12
 15239              		.cfi_offset 6, -8
 15240              		.cfi_offset 14, -4
1888:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 15241              		.loc 1 1888 22 view .LVU3989
 15242 0002 1F4C     		ldr	r4, .L1091
 15243 0004 2368     		ldr	r3, [r4]
1888:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 15244              		.loc 1 1888 28 view .LVU3990
ARM GAS  /tmp/ccqED0AM.s 			page 434


 15245 0006 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
1889:src/xeq.c     **** 
 15246              		.loc 1 1889 26 view .LVU3991
 15247 000a 8029     		cmp	r1, #128
1887:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
 15248              		.loc 1 1887 46 view .LVU3992
 15249 000c 8AB0     		sub	sp, sp, #40
 15250              		.cfi_def_cfa_offset 56
1888:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 15251              		.loc 1 1888 28 view .LVU3993
 15252 000e C2F38015 		ubfx	r5, r2, #6, #1
 15253              	.LVL1096:
1889:src/xeq.c     **** 
 15254              		.loc 1 1889 2 is_stmt 1 view .LVU3994
1889:src/xeq.c     **** 
 15255              		.loc 1 1889 26 is_stmt 0 view .LVU3995
 15256 0012 0CBF     		ite	eq
 15257 0014 0121     		moveq	r1, #1
 15258              	.LVL1097:
1889:src/xeq.c     **** 
 15259              		.loc 1 1889 26 view .LVU3996
 15260 0016 0021     		movne	r1, #0
 15261              	.LVL1098:
1891:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 15262              		.loc 1 1891 2 is_stmt 1 view .LVU3997
1891:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 15263              		.loc 1 1891 5 is_stmt 0 view .LVU3998
 15264 0018 26D0     		beq	.L1089
 15265              	.LVL1099:
 15266              	.L1085:
1897:src/xeq.c     **** 	if (is_intmode()) {
 15267              		.loc 1 1897 2 is_stmt 1 view .LVU3999
1897:src/xeq.c     **** 	if (is_intmode()) {
 15268              		.loc 1 1897 21 is_stmt 0 view .LVU4000
 15269 001a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
1898:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 15270              		.loc 1 1898 6 view .LVU4001
 15271 001e 93F8E867 		ldrb	r6, [r3, #2024]	@ zero_extendqisi2
1897:src/xeq.c     **** 	if (is_intmode()) {
 15272              		.loc 1 1897 21 view .LVU4002
 15273 0022 61F38612 		bfi	r2, r1, #6, #1
 15274 0026 83F8E927 		strb	r2, [r3, #2025]
 15275              	.LVL1100:
1898:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 15276              		.loc 1 1898 2 is_stmt 1 view .LVU4003
1898:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 15277              		.loc 1 1898 5 is_stmt 0 view .LVU4004
 15278 002a F307     		lsls	r3, r6, #31
1899:src/xeq.c     **** 		UState.mode_double = was_dbl;
 15279              		.loc 1 1899 3 view .LVU4005
 15280 002c 0146     		mov	r1, r0
 15281              	.LVL1101:
1898:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 15282              		.loc 1 1898 5 view .LVU4006
 15283 002e 0FD4     		bmi	.L1090
 15284              	.LBB2759:
1903:src/xeq.c     **** 		getRegister(&x, arg);
ARM GAS  /tmp/ccqED0AM.s 			page 435


 15285              		.loc 1 1903 3 is_stmt 1 view .LVU4007
1904:src/xeq.c     **** 
 15286              		.loc 1 1904 3 view .LVU4008
 15287 0030 01A8     		add	r0, sp, #4
 15288              	.LVL1102:
1904:src/xeq.c     **** 
 15289              		.loc 1 1904 3 is_stmt 0 view .LVU4009
 15290 0032 FFF7FEFF 		bl	getRegister
 15291              	.LVL1103:
1906:src/xeq.c     **** 		setX(&x);
 15292              		.loc 1 1906 3 is_stmt 1 view .LVU4010
1906:src/xeq.c     **** 		setX(&x);
 15293              		.loc 1 1906 22 is_stmt 0 view .LVU4011
 15294 0036 2368     		ldr	r3, [r4]
 15295 0038 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 15296 003c 65F38612 		bfi	r2, r5, #6, #1
 15297              	.LBB2760:
 15298              	.LBB2761:
 829:src/xeq.c     **** }
 15299              		.loc 1 829 2 view .LVU4012
 15300 0040 01A9     		add	r1, sp, #4
 15301              	.LBE2761:
 15302              	.LBE2760:
1906:src/xeq.c     **** 		setX(&x);
 15303              		.loc 1 1906 22 view .LVU4013
 15304 0042 83F8E927 		strb	r2, [r3, #2025]
1907:src/xeq.c     **** 	}
 15305              		.loc 1 1907 3 is_stmt 1 view .LVU4014
 15306              	.LVL1104:
 15307              	.LBB2763:
 15308              	.LBI2760:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 15309              		.loc 1 828 6 view .LVU4015
 15310              	.LBB2762:
 829:src/xeq.c     **** }
 15311              		.loc 1 829 2 view .LVU4016
 15312 0046 6420     		movs	r0, #100
 15313 0048 FFF7FEFF 		bl	setRegister
 15314              	.LVL1105:
 15315              	.L1084:
 829:src/xeq.c     **** }
 15316              		.loc 1 829 2 is_stmt 0 view .LVU4017
 15317              	.LBE2762:
 15318              	.LBE2763:
 15319              	.LBE2759:
1909:src/xeq.c     **** 
 15320              		.loc 1 1909 1 view .LVU4018
 15321 004c 0AB0     		add	sp, sp, #40
 15322              		.cfi_remember_state
 15323              		.cfi_def_cfa_offset 16
 15324              		@ sp needed
 15325 004e 70BD     		pop	{r4, r5, r6, pc}
 15326              	.LVL1106:
 15327              	.L1090:
 15328              		.cfi_restore_state
1899:src/xeq.c     **** 		UState.mode_double = was_dbl;
 15329              		.loc 1 1899 3 is_stmt 1 view .LVU4019
ARM GAS  /tmp/ccqED0AM.s 			page 436


 15330 0050 6420     		movs	r0, #100
 15331              	.LVL1107:
1899:src/xeq.c     **** 		UState.mode_double = was_dbl;
 15332              		.loc 1 1899 3 is_stmt 0 view .LVU4020
 15333 0052 FFF7FEFF 		bl	int_from_register
 15334              	.LVL1108:
1900:src/xeq.c     **** 	}
 15335              		.loc 1 1900 3 is_stmt 1 view .LVU4021
1900:src/xeq.c     **** 	}
 15336              		.loc 1 1900 22 is_stmt 0 view .LVU4022
 15337 0056 2368     		ldr	r3, [r4]
 15338 0058 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 15339 005c 65F38612 		bfi	r2, r5, #6, #1
 15340 0060 83F8E927 		strb	r2, [r3, #2025]
1909:src/xeq.c     **** 
 15341              		.loc 1 1909 1 view .LVU4023
 15342 0064 0AB0     		add	sp, sp, #40
 15343              		.cfi_remember_state
 15344              		.cfi_def_cfa_offset 16
 15345              		@ sp needed
 15346 0066 70BD     		pop	{r4, r5, r6, pc}
 15347              	.LVL1109:
 15348              	.L1089:
 15349              		.cfi_restore_state
1891:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 15350              		.loc 1 1891 14 discriminator 1 view .LVU4024
 15351 0068 A0F16402 		sub	r2, r0, #100
 15352              	.LVL1110:
1891:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 15353              		.loc 1 1891 14 discriminator 1 view .LVU4025
 15354 006c 0B2A     		cmp	r2, #11
 15355 006e D4D8     		bhi	.L1085
1893:src/xeq.c     **** 		return;
 15356              		.loc 1 1893 3 is_stmt 1 view .LVU4026
 15357              	.LVL1111:
 15358              	.LBB2764:
 15359              	.LBI2764:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 15360              		.loc 1 546 5 view .LVU4027
 15361              	.LBB2765:
 547:src/xeq.c     **** 		Error = e;
 15362              		.loc 1 547 2 view .LVU4028
 547:src/xeq.c     **** 		Error = e;
 15363              		.loc 1 547 12 is_stmt 0 view .LVU4029
 15364 0070 044B     		ldr	r3, .L1091+4
 15365              	.LVL1112:
 547:src/xeq.c     **** 		Error = e;
 15366              		.loc 1 547 5 view .LVU4030
 15367 0072 1A68     		ldr	r2, [r3]
 15368 0074 002A     		cmp	r2, #0
 15369 0076 E9D1     		bne	.L1084
 15370              	.LVL1113:
 15371              	.LBB2766:
 15372              	.LBI2766:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 15373              		.loc 1 546 5 is_stmt 1 view .LVU4031
 15374              	.LBB2767:
ARM GAS  /tmp/ccqED0AM.s 			page 437


 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 15375              		.loc 1 548 3 view .LVU4032
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 15376              		.loc 1 548 9 is_stmt 0 view .LVU4033
 15377 0078 0822     		movs	r2, #8
 15378 007a 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 15379              		.loc 1 549 3 is_stmt 1 view .LVU4034
 15380 007c E6E7     		b	.L1084
 15381              	.L1092:
 15382 007e 00BF     		.align	2
 15383              	.L1091:
 15384 0080 00000000 		.word	main_ram
 15385 0084 00000000 		.word	Error
 15386              	.LBE2767:
 15387              	.LBE2766:
 15388              	.LBE2765:
 15389              	.LBE2764:
 15390              		.cfi_endproc
 15391              	.LFE125:
 15393              		.section	.text.swap_reg,"ax",%progbits
 15394              		.align	1
 15395              		.p2align 2,,3
 15396              		.global	swap_reg
 15397              		.syntax unified
 15398              		.thumb
 15399              		.thumb_func
 15400              		.fpu fpv4-sp-d16
 15402              	swap_reg:
 15403              	.LVL1114:
 15404              	.LFB126:
1914:src/xeq.c     **** 	REGISTER t;
 15405              		.loc 1 1914 41 view -0
 15406              		.cfi_startproc
 15407              		@ args = 0, pretend = 0, frame = 16
 15408              		@ frame_needed = 0, uses_anonymous_args = 0
1915:src/xeq.c     **** 
 15409              		.loc 1 1915 2 view .LVU4036
1917:src/xeq.c     **** 	copyreg(a, b);
 15410              		.loc 1 1917 2 view .LVU4037
1914:src/xeq.c     **** 	REGISTER t;
 15411              		.loc 1 1914 41 is_stmt 0 view .LVU4038
 15412 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 15413              		.cfi_def_cfa_offset 20
 15414              		.cfi_offset 4, -20
 15415              		.cfi_offset 5, -16
 15416              		.cfi_offset 6, -12
 15417              		.cfi_offset 7, -8
 15418              		.cfi_offset 14, -4
 15419              	.LBB2768:
 15420              	.LBB2769:
 15421              	.LBB2770:
 15422              	.LBB2771:
1119:src/xeq.c     **** }
 15423              		.loc 1 1119 24 view .LVU4039
 15424 0002 174F     		ldr	r7, .L1101
 15425 0004 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccqED0AM.s 			page 438


 15426 0006 B3F8E837 		ldrh	r3, [r3, #2024]
 15427 000a 44F20104 		movw	r4, #16385
 15428              	.LBE2771:
 15429              	.LBE2770:
 727:src/xeq.c     **** }
 15430              		.loc 1 727 2 view .LVU4040
 15431 000e 2340     		ands	r3, r3, r4
 15432              	.LBE2769:
 15433              	.LBE2768:
1914:src/xeq.c     **** 	REGISTER t;
 15434              		.loc 1 1914 41 view .LVU4041
 15435 0010 85B0     		sub	sp, sp, #20
 15436              		.cfi_def_cfa_offset 40
 15437              	.LVL1115:
 15438              	.LBB2776:
 15439              	.LBB2774:
 727:src/xeq.c     **** }
 15440              		.loc 1 727 2 view .LVU4042
 15441 0012 B3F5804F 		cmp	r3, #16384
 15442 0016 0CBF     		ite	eq
 15443 0018 1022     		moveq	r2, #16
 15444 001a 0822     		movne	r2, #8
 15445              	.LBE2774:
 15446              	.LBE2776:
1914:src/xeq.c     **** 	REGISTER t;
 15447              		.loc 1 1914 41 view .LVU4043
 15448 001c 0D46     		mov	r5, r1
 15449 001e 0646     		mov	r6, r0
 15450              	.LVL1116:
 15451              	.LBB2777:
 15452              	.LBI2768:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 15453              		.loc 1 726 6 is_stmt 1 view .LVU4044
 15454              	.LBB2775:
 727:src/xeq.c     **** }
 15455              		.loc 1 727 2 view .LVU4045
 15456              	.LBB2773:
 15457              	.LBI2770:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15458              		.loc 1 1118 5 view .LVU4046
 15459              	.LBB2772:
1119:src/xeq.c     **** }
 15460              		.loc 1 1119 2 view .LVU4047
 15461              	.LBE2772:
 15462              	.LBE2773:
 727:src/xeq.c     **** }
 15463              		.loc 1 727 2 is_stmt 0 view .LVU4048
 15464 0020 0146     		mov	r1, r0
 15465              	.LVL1117:
 727:src/xeq.c     **** }
 15466              		.loc 1 727 2 view .LVU4049
 15467 0022 6846     		mov	r0, sp
 15468              	.LVL1118:
 727:src/xeq.c     **** }
 15469              		.loc 1 727 2 view .LVU4050
 15470 0024 FFF7FEFF 		bl	xcopy
 15471              	.LVL1119:
ARM GAS  /tmp/ccqED0AM.s 			page 439


 727:src/xeq.c     **** }
 15472              		.loc 1 727 2 view .LVU4051
 15473              	.LBE2775:
 15474              	.LBE2777:
1918:src/xeq.c     **** 	copyreg(b, &t);
 15475              		.loc 1 1918 2 is_stmt 1 view .LVU4052
 15476              	.LBB2778:
 15477              	.LBI2778:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 15478              		.loc 1 726 6 view .LVU4053
 15479              	.LBB2779:
 727:src/xeq.c     **** }
 15480              		.loc 1 727 2 view .LVU4054
 15481              	.LBB2780:
 15482              	.LBI2780:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15483              		.loc 1 1118 5 view .LVU4055
 15484              	.LBB2781:
1119:src/xeq.c     **** }
 15485              		.loc 1 1119 2 view .LVU4056
1119:src/xeq.c     **** }
 15486              		.loc 1 1119 24 is_stmt 0 view .LVU4057
 15487 0028 3B68     		ldr	r3, [r7]
 15488 002a B3F8E837 		ldrh	r3, [r3, #2024]
 15489              	.LBE2781:
 15490              	.LBE2780:
 727:src/xeq.c     **** }
 15491              		.loc 1 727 2 view .LVU4058
 15492 002e 2340     		ands	r3, r3, r4
 15493 0030 B3F5804F 		cmp	r3, #16384
 15494 0034 0CBF     		ite	eq
 15495 0036 1022     		moveq	r2, #16
 15496 0038 0822     		movne	r2, #8
 15497 003a 2946     		mov	r1, r5
 15498 003c 3046     		mov	r0, r6
 15499 003e FFF7FEFF 		bl	xcopy
 15500              	.LVL1120:
 727:src/xeq.c     **** }
 15501              		.loc 1 727 2 view .LVU4059
 15502              	.LBE2779:
 15503              	.LBE2778:
1919:src/xeq.c     **** }
 15504              		.loc 1 1919 2 is_stmt 1 view .LVU4060
 15505              	.LBB2782:
 15506              	.LBI2782:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 15507              		.loc 1 726 6 view .LVU4061
 15508              	.LBB2783:
 727:src/xeq.c     **** }
 15509              		.loc 1 727 2 view .LVU4062
 15510              	.LBB2784:
 15511              	.LBI2784:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15512              		.loc 1 1118 5 view .LVU4063
 15513              	.LBB2785:
1119:src/xeq.c     **** }
 15514              		.loc 1 1119 2 view .LVU4064
ARM GAS  /tmp/ccqED0AM.s 			page 440


1119:src/xeq.c     **** }
 15515              		.loc 1 1119 24 is_stmt 0 view .LVU4065
 15516 0042 3B68     		ldr	r3, [r7]
 15517 0044 B3F8E837 		ldrh	r3, [r3, #2024]
 15518              	.LBE2785:
 15519              	.LBE2784:
 727:src/xeq.c     **** }
 15520              		.loc 1 727 2 view .LVU4066
 15521 0048 1C40     		ands	r4, r4, r3
 15522 004a B4F5804F 		cmp	r4, #16384
 15523 004e 2846     		mov	r0, r5
 15524 0050 6946     		mov	r1, sp
 15525 0052 0CBF     		ite	eq
 15526 0054 1022     		moveq	r2, #16
 15527 0056 0822     		movne	r2, #8
 15528 0058 FFF7FEFF 		bl	xcopy
 15529              	.LVL1121:
 727:src/xeq.c     **** }
 15530              		.loc 1 727 2 view .LVU4067
 15531              	.LBE2783:
 15532              	.LBE2782:
1920:src/xeq.c     **** 
 15533              		.loc 1 1920 1 view .LVU4068
 15534 005c 05B0     		add	sp, sp, #20
 15535              		.cfi_def_cfa_offset 20
 15536              		@ sp needed
 15537 005e F0BD     		pop	{r4, r5, r6, r7, pc}
 15538              	.LVL1122:
 15539              	.L1102:
1920:src/xeq.c     **** 
 15540              		.loc 1 1920 1 view .LVU4069
 15541              		.align	2
 15542              	.L1101:
 15543 0060 00000000 		.word	main_ram
 15544              		.cfi_endproc
 15545              	.LFE126:
 15547              		.section	.text.cmdswap,"ax",%progbits
 15548              		.align	1
 15549              		.p2align 2,,3
 15550              		.global	cmdswap
 15551              		.syntax unified
 15552              		.thumb
 15553              		.thumb_func
 15554              		.fpu fpv4-sp-d16
 15556              	cmdswap:
 15557              	.LVL1123:
 15558              	.LFB127:
1922:src/xeq.c     **** 	int idx;
 15559              		.loc 1 1922 46 is_stmt 1 view -0
 15560              		.cfi_startproc
 15561              		@ args = 0, pretend = 0, frame = 0
 15562              		@ frame_needed = 0, uses_anonymous_args = 0
1923:src/xeq.c     **** 
 15563              		.loc 1 1923 2 view .LVU4071
1925:src/xeq.c     **** 		idx = regX_idx;
 15564              		.loc 1 1925 2 view .LVU4072
1925:src/xeq.c     **** 		idx = regX_idx;
ARM GAS  /tmp/ccqED0AM.s 			page 441


 15565              		.loc 1 1925 5 is_stmt 0 view .LVU4073
 15566 0000 1F29     		cmp	r1, #31
1922:src/xeq.c     **** 	int idx;
 15567              		.loc 1 1922 46 view .LVU4074
 15568 0002 70B5     		push	{r4, r5, r6, lr}
 15569              		.cfi_def_cfa_offset 16
 15570              		.cfi_offset 4, -16
 15571              		.cfi_offset 5, -12
 15572              		.cfi_offset 6, -8
 15573              		.cfi_offset 14, -4
1922:src/xeq.c     **** 	int idx;
 15574              		.loc 1 1922 46 view .LVU4075
 15575 0004 0546     		mov	r5, r0
1925:src/xeq.c     **** 		idx = regX_idx;
 15576              		.loc 1 1925 5 view .LVU4076
 15577 0006 11D0     		beq	.L1104
1927:src/xeq.c     **** 		idx = regZ_idx;
 15578              		.loc 1 1927 10 view .LVU4077
 15579 0008 2029     		cmp	r1, #32
 15580 000a 0C46     		mov	r4, r1
1927:src/xeq.c     **** 		idx = regZ_idx;
 15581              		.loc 1 1927 7 is_stmt 1 view .LVU4078
1927:src/xeq.c     **** 		idx = regZ_idx;
 15582              		.loc 1 1927 10 is_stmt 0 view .LVU4079
 15583 000c 32D0     		beq	.L1105
1930:src/xeq.c     **** 
 15584              		.loc 1 1930 3 is_stmt 1 view .LVU4080
 15585              	.LVL1124:
1932:src/xeq.c     **** 
 15586              		.loc 1 1932 2 view .LVU4081
 15587 000e 01F15300 		add	r0, r1, #83
 15588              	.LVL1125:
1932:src/xeq.c     **** 
 15589              		.loc 1 1932 2 is_stmt 0 view .LVU4082
 15590 0012 FFF7FEFF 		bl	get_reg_n
 15591              	.LVL1126:
1932:src/xeq.c     **** 
 15592              		.loc 1 1932 2 view .LVU4083
 15593 0016 0646     		mov	r6, r0
 15594 0018 2846     		mov	r0, r5
 15595 001a FFF7FEFF 		bl	get_reg_n
 15596              	.LVL1127:
 15597 001e 0146     		mov	r1, r0
 15598 0020 3046     		mov	r0, r6
 15599 0022 FFF7FEFF 		bl	swap_reg
 15600              	.LVL1128:
1934:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 15601              		.loc 1 1934 2 is_stmt 1 view .LVU4084
1934:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 15602              		.loc 1 1934 5 is_stmt 0 view .LVU4085
 15603 0026 1E2C     		cmp	r4, #30
 15604 0028 31D8     		bhi	.L1109
1941:src/xeq.c     **** 
 15605              		.loc 1 1941 1 view .LVU4086
 15606 002a 70BD     		pop	{r4, r5, r6, pc}
 15607              	.LVL1129:
 15608              	.L1104:
ARM GAS  /tmp/ccqED0AM.s 			page 442


1932:src/xeq.c     **** 
 15609              		.loc 1 1932 2 is_stmt 1 view .LVU4087
 15610 002c 6420     		movs	r0, #100
 15611              	.LVL1130:
1932:src/xeq.c     **** 
 15612              		.loc 1 1932 2 is_stmt 0 view .LVU4088
 15613 002e FFF7FEFF 		bl	get_reg_n
 15614              	.LVL1131:
1932:src/xeq.c     **** 
 15615              		.loc 1 1932 2 view .LVU4089
 15616 0032 0446     		mov	r4, r0
 15617 0034 2846     		mov	r0, r5
 15618 0036 FFF7FEFF 		bl	get_reg_n
 15619              	.LVL1132:
 15620 003a 0146     		mov	r1, r0
 15621 003c 2046     		mov	r0, r4
 15622 003e FFF7FEFF 		bl	swap_reg
 15623              	.LVL1133:
1934:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 15624              		.loc 1 1934 2 is_stmt 1 view .LVU4090
1932:src/xeq.c     **** 
 15625              		.loc 1 1932 2 is_stmt 0 view .LVU4091
 15626 0042 6520     		movs	r0, #101
 15627              	.LVL1134:
 15628              	.L1107:
1935:src/xeq.c     **** 		set_was_complex();
 15629              		.loc 1 1935 3 is_stmt 1 view .LVU4092
 15630 0044 FFF7FEFF 		bl	get_reg_n
 15631              	.LVL1135:
 15632 0048 0446     		mov	r4, r0
 15633 004a 681C     		adds	r0, r5, #1
 15634 004c FFF7FEFF 		bl	get_reg_n
 15635              	.LVL1136:
 15636 0050 0146     		mov	r1, r0
 15637 0052 2046     		mov	r0, r4
 15638 0054 FFF7FEFF 		bl	swap_reg
 15639              	.LVL1137:
1936:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 15640              		.loc 1 1936 3 view .LVU4093
 15641              	.LBB2786:
 15642              	.LBI2786:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 15643              		.loc 1 539 13 view .LVU4094
 15644              	.LBB2787:
 540:src/xeq.c     **** }
 15645              		.loc 1 540 2 view .LVU4095
 540:src/xeq.c     **** }
 15646              		.loc 1 540 20 is_stmt 0 view .LVU4096
 15647 0058 0E4B     		ldr	r3, .L1110
 15648              	.LBE2787:
 15649              	.LBE2786:
1938:src/xeq.c     **** #endif
 15650              		.loc 1 1938 2 view .LVU4097
 15651 005a 0F4A     		ldr	r2, .L1110+4
 15652              	.LBB2790:
 15653              	.LBB2788:
 540:src/xeq.c     **** }
ARM GAS  /tmp/ccqED0AM.s 			page 443


 15654              		.loc 1 540 20 view .LVU4098
 15655 005c 197D     		ldrb	r1, [r3, #20]	@ zero_extendqisi2
 15656              	.LBE2788:
 15657              	.LBE2790:
1938:src/xeq.c     **** #endif
 15658              		.loc 1 1938 2 view .LVU4099
 15659 005e 1268     		ldr	r2, [r2]
 15660              	.LBB2791:
 15661              	.LBB2789:
 540:src/xeq.c     **** }
 15662              		.loc 1 540 20 view .LVU4100
 15663 0060 0120     		movs	r0, #1
 15664 0062 60F38711 		bfi	r1, r0, #6, #2
 15665 0066 1975     		strb	r1, [r3, #20]
 15666              	.LBE2789:
 15667              	.LBE2791:
1938:src/xeq.c     **** #endif
 15668              		.loc 1 1938 2 is_stmt 1 view .LVU4101
 15669 0068 92F8AD37 		ldrb	r3, [r2, #1965]	@ zero_extendqisi2
 15670 006c 0343     		orrs	r3, r3, r0
 15671 006e 82F8AD37 		strb	r3, [r2, #1965]
1941:src/xeq.c     **** 
 15672              		.loc 1 1941 1 is_stmt 0 view .LVU4102
 15673 0072 70BD     		pop	{r4, r5, r6, pc}
 15674              	.LVL1138:
 15675              	.L1105:
1932:src/xeq.c     **** 
 15676              		.loc 1 1932 2 is_stmt 1 view .LVU4103
 15677 0074 6620     		movs	r0, #102
 15678              	.LVL1139:
1932:src/xeq.c     **** 
 15679              		.loc 1 1932 2 is_stmt 0 view .LVU4104
 15680 0076 FFF7FEFF 		bl	get_reg_n
 15681              	.LVL1140:
1932:src/xeq.c     **** 
 15682              		.loc 1 1932 2 view .LVU4105
 15683 007a 0446     		mov	r4, r0
 15684 007c 2846     		mov	r0, r5
 15685 007e FFF7FEFF 		bl	get_reg_n
 15686              	.LVL1141:
 15687 0082 0146     		mov	r1, r0
 15688 0084 2046     		mov	r0, r4
 15689 0086 FFF7FEFF 		bl	swap_reg
 15690              	.LVL1142:
1934:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 15691              		.loc 1 1934 2 is_stmt 1 view .LVU4106
1932:src/xeq.c     **** 
 15692              		.loc 1 1932 2 is_stmt 0 view .LVU4107
 15693 008a 6720     		movs	r0, #103
 15694 008c DAE7     		b	.L1107
 15695              	.LVL1143:
 15696              	.L1109:
1932:src/xeq.c     **** 
 15697              		.loc 1 1932 2 view .LVU4108
 15698 008e 04F15400 		add	r0, r4, #84
 15699 0092 D7E7     		b	.L1107
 15700              	.L1111:
ARM GAS  /tmp/ccqED0AM.s 			page 444


 15701              		.align	2
 15702              	.L1110:
 15703 0094 00000000 		.word	StateWhileOn
 15704 0098 00000000 		.word	main_ram
 15705              		.cfi_endproc
 15706              	.LFE127:
 15708              		.section	.text.cmdview,"ax",%progbits
 15709              		.align	1
 15710              		.p2align 2,,3
 15711              		.global	cmdview
 15712              		.syntax unified
 15713              		.thumb
 15714              		.thumb_func
 15715              		.fpu fpv4-sp-d16
 15717              	cmdview:
 15718              	.LVL1144:
 15719              	.LFB128:
1946:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 15720              		.loc 1 1946 46 is_stmt 1 view -0
 15721              		.cfi_startproc
 15722              		@ args = 0, pretend = 0, frame = 0
 15723              		@ frame_needed = 0, uses_anonymous_args = 0
1947:src/xeq.c     **** 
 15724              		.loc 1 1947 2 view .LVU4110
1946:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 15725              		.loc 1 1946 46 is_stmt 0 view .LVU4111
 15726 0000 70B5     		push	{r4, r5, r6, lr}
 15727              		.cfi_def_cfa_offset 16
 15728              		.cfi_offset 4, -16
 15729              		.cfi_offset 5, -12
 15730              		.cfi_offset 6, -8
 15731              		.cfi_offset 14, -4
1949:src/xeq.c     **** 	ShowRegister = arg;
 15732              		.loc 1 1949 20 view .LVU4112
 15733 0002 134D     		ldr	r5, .L1118
1950:src/xeq.c     **** 	State2.disp_freeze = 0;
 15734              		.loc 1 1950 15 view .LVU4113
 15735 0004 134A     		ldr	r2, .L1118+4
1949:src/xeq.c     **** 	ShowRegister = arg;
 15736              		.loc 1 1949 20 view .LVU4114
 15737 0006 6B69     		ldr	r3, [r5, #20]
1950:src/xeq.c     **** 	State2.disp_freeze = 0;
 15738              		.loc 1 1950 15 view .LVU4115
 15739 0008 1060     		str	r0, [r2]
1946:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 15740              		.loc 1 1946 46 view .LVU4116
 15741 000a 0E46     		mov	r6, r1
 15742              	.LVL1145:
1949:src/xeq.c     **** 	ShowRegister = arg;
 15743              		.loc 1 1949 2 is_stmt 1 view .LVU4117
1950:src/xeq.c     **** 	State2.disp_freeze = 0;
 15744              		.loc 1 1950 2 view .LVU4118
1951:src/xeq.c     **** 	display();
 15745              		.loc 1 1951 2 view .LVU4119
1947:src/xeq.c     **** 
 15746              		.loc 1 1947 41 is_stmt 0 view .LVU4120
 15747 000c A1F19301 		sub	r1, #147
ARM GAS  /tmp/ccqED0AM.s 			page 445


 15748              	.LVL1146:
1949:src/xeq.c     **** 	ShowRegister = arg;
 15749              		.loc 1 1949 20 view .LVU4121
 15750 0010 23F08053 		bic	r3, r3, #268435456
1947:src/xeq.c     **** 
 15751              		.loc 1 1947 41 view .LVU4122
 15752 0014 B1FA81F1 		clz	r1, r1
 15753 0018 4909     		lsrs	r1, r1, #5
1949:src/xeq.c     **** 	ShowRegister = arg;
 15754              		.loc 1 1949 20 view .LVU4123
 15755 001a 23F0C003 		bic	r3, r3, #192
 15756 001e 43EA8113 		orr	r3, r3, r1, lsl #6
1946:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 15757              		.loc 1 1946 46 view .LVU4124
 15758 0022 0446     		mov	r4, r0
1949:src/xeq.c     **** 	ShowRegister = arg;
 15759              		.loc 1 1949 20 view .LVU4125
 15760 0024 6B61     		str	r3, [r5, #20]
1952:src/xeq.c     **** 	State2.disp_freeze = cmplx || Running || arg != regX_idx;
 15761              		.loc 1 1952 2 is_stmt 1 view .LVU4126
 15762 0026 FFF7FEFF 		bl	display
 15763              	.LVL1147:
1953:src/xeq.c     **** }
 15764              		.loc 1 1953 2 view .LVU4127
1953:src/xeq.c     **** }
 15765              		.loc 1 1953 40 is_stmt 0 view .LVU4128
 15766 002a 932E     		cmp	r6, #147
 15767 002c 02D0     		beq	.L1115
1953:src/xeq.c     **** }
 15768              		.loc 1 1953 29 discriminator 2 view .LVU4129
 15769 002e 0A4B     		ldr	r3, .L1118+8
 15770 0030 1B68     		ldr	r3, [r3]
 15771 0032 2BB1     		cbz	r3, .L1117
 15772              	.L1115:
1953:src/xeq.c     **** }
 15773              		.loc 1 1953 21 view .LVU4130
 15774 0034 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 15775 0036 0124     		movs	r4, #1
 15776              	.LVL1148:
1953:src/xeq.c     **** }
 15777              		.loc 1 1953 21 view .LVU4131
 15778 0038 64F30413 		bfi	r3, r4, #4, #1
 15779 003c EB75     		strb	r3, [r5, #23]
1954:src/xeq.c     **** 
 15780              		.loc 1 1954 1 view .LVU4132
 15781 003e 70BD     		pop	{r4, r5, r6, pc}
 15782              	.LVL1149:
 15783              	.L1117:
1953:src/xeq.c     **** }
 15784              		.loc 1 1953 21 discriminator 4 view .LVU4133
 15785 0040 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
1953:src/xeq.c     **** }
 15786              		.loc 1 1953 40 discriminator 4 view .LVU4134
 15787 0042 643C     		subs	r4, r4, #100
 15788              	.LVL1150:
1953:src/xeq.c     **** }
 15789              		.loc 1 1953 40 discriminator 4 view .LVU4135
ARM GAS  /tmp/ccqED0AM.s 			page 446


 15790 0044 18BF     		it	ne
 15791 0046 0124     		movne	r4, #1
 15792              	.LVL1151:
1953:src/xeq.c     **** }
 15793              		.loc 1 1953 21 discriminator 4 view .LVU4136
 15794 0048 64F30413 		bfi	r3, r4, #4, #1
 15795 004c EB75     		strb	r3, [r5, #23]
1954:src/xeq.c     **** 
 15796              		.loc 1 1954 1 discriminator 4 view .LVU4137
 15797 004e 70BD     		pop	{r4, r5, r6, pc}
 15798              	.L1119:
 15799              		.align	2
 15800              	.L1118:
 15801 0050 00000000 		.word	StateWhileOn
 15802 0054 00000000 		.word	ShowRegister
 15803 0058 00000000 		.word	Running
 15804              		.cfi_endproc
 15805              	.LFE128:
 15807              		.section	.text.get_stack_size,"ax",%progbits
 15808              		.align	1
 15809              		.p2align 2,,3
 15810              		.global	get_stack_size
 15811              		.syntax unified
 15812              		.thumb
 15813              		.thumb_func
 15814              		.fpu fpv4-sp-d16
 15816              	get_stack_size:
 15817              	.LVL1152:
 15818              	.LFB129:
1958:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
 15819              		.loc 1 1958 36 is_stmt 1 view -0
 15820              		.cfi_startproc
 15821              		@ args = 0, pretend = 0, frame = 0
 15822              		@ frame_needed = 0, uses_anonymous_args = 0
1959:src/xeq.c     **** }
 15823              		.loc 1 1959 2 view .LVU4139
 15824              	.LBB2792:
 15825              	.LBI2792:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 15826              		.loc 1 712 5 view .LVU4140
 15827              	.LBB2793:
 713:src/xeq.c     **** 		return 4;
 15828              		.loc 1 713 2 view .LVU4141
 713:src/xeq.c     **** 		return 4;
 15829              		.loc 1 713 8 is_stmt 0 view .LVU4142
 15830 0000 0F4B     		ldr	r3, .L1127
 15831              	.LBE2793:
 15832              	.LBE2792:
1958:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
 15833              		.loc 1 1958 36 view .LVU4143
 15834 0002 00B5     		push	{lr}
 15835              		.cfi_def_cfa_offset 4
 15836              		.cfi_offset 14, -4
 15837              	.LBB2799:
 15838              	.LBB2796:
 713:src/xeq.c     **** 		return 4;
 15839              		.loc 1 713 8 view .LVU4144
ARM GAS  /tmp/ccqED0AM.s 			page 447


 15840 0004 1B68     		ldr	r3, [r3]
 713:src/xeq.c     **** 		return 4;
 15841              		.loc 1 713 6 view .LVU4145
 15842 0006 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 15843              		.loc 1 713 5 view .LVU4146
 15844 000a 1207     		lsls	r2, r2, #28
 15845              	.LBE2796:
 15846              	.LBE2799:
1958:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
 15847              		.loc 1 1958 36 view .LVU4147
 15848 000c 83B0     		sub	sp, sp, #12
 15849              		.cfi_def_cfa_offset 16
 15850              	.LBB2800:
 15851              	.LBB2797:
 713:src/xeq.c     **** 		return 4;
 15852              		.loc 1 713 5 view .LVU4148
 15853 000e 13D5     		bpl	.L1122
 15854              	.LBB2794:
 15855              	.LBI2794:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 15856              		.loc 1 185 5 is_stmt 1 view .LVU4149
 15857              	.LBB2795:
 186:src/xeq.c     **** }
 15858              		.loc 1 186 2 view .LVU4150
 186:src/xeq.c     **** }
 15859              		.loc 1 186 9 is_stmt 0 view .LVU4151
 15860 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 15861              	.LBE2795:
 15862              	.LBE2794:
 713:src/xeq.c     **** 		return 4;
 15863              		.loc 1 713 27 view .LVU4152
 15864 0014 9B0B     		lsrs	r3, r3, #14
 15865 0016 032B     		cmp	r3, #3
 15866 0018 09D0     		beq	.L1126
 15867              	.L1124:
 15868 001a 0822     		movs	r2, #8
 15869 001c 0023     		movs	r3, #0
 15870              	.L1121:
 15871              	.LVL1153:
 713:src/xeq.c     **** 		return 4;
 15872              		.loc 1 713 27 view .LVU4153
 15873              	.LBE2797:
 15874              	.LBE2800:
 15875              	.LBB2801:
 15876              	.LBI2801:
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 15877              		.loc 1 1509 6 is_stmt 1 view .LVU4154
 15878              	.LBB2802:
1510:src/xeq.c     **** }
 15879              		.loc 1 1510 2 view .LVU4155
 15880 001e 0021     		movs	r1, #0
 15881 0020 0091     		str	r1, [sp]
 15882 0022 6420     		movs	r0, #100
 15883              	.LVL1154:
1510:src/xeq.c     **** }
 15884              		.loc 1 1510 2 is_stmt 0 view .LVU4156
ARM GAS  /tmp/ccqED0AM.s 			page 448


 15885 0024 FFF7FEFF 		bl	set_reg_n_int_sgn
 15886              	.LVL1155:
1510:src/xeq.c     **** }
 15887              		.loc 1 1510 2 view .LVU4157
 15888              	.LBE2802:
 15889              	.LBE2801:
1960:src/xeq.c     **** 
 15890              		.loc 1 1960 1 view .LVU4158
 15891 0028 03B0     		add	sp, sp, #12
 15892              		.cfi_remember_state
 15893              		.cfi_def_cfa_offset 4
 15894              		@ sp needed
 15895 002a 5DF804FB 		ldr	pc, [sp], #4
 15896              	.LVL1156:
 15897              	.L1126:
 15898              		.cfi_restore_state
 15899              	.LBB2803:
 15900              	.LBB2798:
 713:src/xeq.c     **** 		return 4;
 15901              		.loc 1 713 44 view .LVU4159
 15902 002e 054B     		ldr	r3, .L1127+4
 713:src/xeq.c     **** 		return 4;
 15903              		.loc 1 713 41 view .LVU4160
 15904 0030 93F90130 		ldrsb	r3, [r3, #1]
 15905 0034 002B     		cmp	r3, #0
 15906 0036 F0DB     		blt	.L1124
 15907              	.L1122:
 15908 0038 0422     		movs	r2, #4
 15909 003a 0023     		movs	r3, #0
 15910 003c EFE7     		b	.L1121
 15911              	.L1128:
 15912 003e 00BF     		.align	2
 15913              	.L1127:
 15914 0040 00000000 		.word	main_ram
 15915 0044 00000000 		.word	XromParams
 15916              	.LBE2798:
 15917              	.LBE2803:
 15918              		.cfi_endproc
 15919              	.LFE129:
 15921              		.section	.text.get_word_size,"ax",%progbits
 15922              		.align	1
 15923              		.p2align 2,,3
 15924              		.global	get_word_size
 15925              		.syntax unified
 15926              		.thumb
 15927              		.thumb_func
 15928              		.fpu fpv4-sp-d16
 15930              	get_word_size:
 15931              	.LVL1157:
 15932              	.LFB130:
1962:src/xeq.c     **** 	setX_int_sgn((int)word_size(), 0);
 15933              		.loc 1 1962 35 is_stmt 1 view -0
 15934              		.cfi_startproc
 15935              		@ args = 0, pretend = 0, frame = 0
 15936              		@ frame_needed = 0, uses_anonymous_args = 0
1963:src/xeq.c     **** }
 15937              		.loc 1 1963 2 view .LVU4162
ARM GAS  /tmp/ccqED0AM.s 			page 449


1962:src/xeq.c     **** 	setX_int_sgn((int)word_size(), 0);
 15938              		.loc 1 1962 35 is_stmt 0 view .LVU4163
 15939 0000 00B5     		push	{lr}
 15940              		.cfi_def_cfa_offset 4
 15941              		.cfi_offset 14, -4
 15942 0002 83B0     		sub	sp, sp, #12
 15943              		.cfi_def_cfa_offset 16
1963:src/xeq.c     **** }
 15944              		.loc 1 1963 20 view .LVU4164
 15945 0004 FFF7FEFF 		bl	word_size
 15946              	.LVL1158:
 15947              	.LBB2804:
 15948              	.LBI2804:
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 15949              		.loc 1 1509 6 is_stmt 1 view .LVU4165
 15950              	.LBB2805:
1510:src/xeq.c     **** }
 15951              		.loc 1 1510 2 view .LVU4166
 15952 0008 0021     		movs	r1, #0
 15953 000a 0246     		mov	r2, r0
 15954 000c C317     		asrs	r3, r0, #31
 15955 000e 0091     		str	r1, [sp]
 15956 0010 6420     		movs	r0, #100
 15957              	.LVL1159:
1510:src/xeq.c     **** }
 15958              		.loc 1 1510 2 is_stmt 0 view .LVU4167
 15959 0012 FFF7FEFF 		bl	set_reg_n_int_sgn
 15960              	.LVL1160:
1510:src/xeq.c     **** }
 15961              		.loc 1 1510 2 view .LVU4168
 15962              	.LBE2805:
 15963              	.LBE2804:
1964:src/xeq.c     **** 
 15964              		.loc 1 1964 1 view .LVU4169
 15965 0016 03B0     		add	sp, sp, #12
 15966              		.cfi_def_cfa_offset 4
 15967              		@ sp needed
 15968 0018 5DF804FB 		ldr	pc, [sp], #4
 15969              		.cfi_endproc
 15970              	.LFE130:
 15972              		.section	.text.get_sign_mode,"ax",%progbits
 15973              		.align	1
 15974              		.p2align 2,,3
 15975              		.global	get_sign_mode
 15976              		.syntax unified
 15977              		.thumb
 15978              		.thumb_func
 15979              		.fpu fpv4-sp-d16
 15981              	get_sign_mode:
 15982              	.LVL1161:
 15983              	.LFB131:
1966:src/xeq.c     **** 	static const unsigned char modes[4] = {
 15984              		.loc 1 1966 35 is_stmt 1 view -0
 15985              		.cfi_startproc
 15986              		@ args = 0, pretend = 0, frame = 0
 15987              		@ frame_needed = 0, uses_anonymous_args = 0
1967:src/xeq.c     **** 		0x02,		// 2's complement
ARM GAS  /tmp/ccqED0AM.s 			page 450


 15988              		.loc 1 1967 2 view .LVU4171
1973:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
 15989              		.loc 1 1973 2 view .LVU4172
1966:src/xeq.c     **** 	static const unsigned char modes[4] = {
 15990              		.loc 1 1966 35 is_stmt 0 view .LVU4173
 15991 0000 00B5     		push	{lr}
 15992              		.cfi_def_cfa_offset 4
 15993              		.cfi_offset 14, -4
 15994 0002 83B0     		sub	sp, sp, #12
 15995              		.cfi_def_cfa_offset 16
1973:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
 15996              		.loc 1 1973 37 view .LVU4174
 15997 0004 FFF7FEFF 		bl	int_mode
 15998              	.LVL1162:
1973:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
 15999              		.loc 1 1973 22 view .LVU4175
 16000 0008 064B     		ldr	r3, .L1133
 16001 000a 1B5C     		ldrb	r3, [r3, r0]	@ zero_extendqisi2
 16002              	.LVL1163:
1974:src/xeq.c     **** }
 16003              		.loc 1 1974 2 is_stmt 1 view .LVU4176
 16004              	.LBB2806:
 16005              	.LBI2806:
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 16006              		.loc 1 1509 6 view .LVU4177
 16007              	.LBB2807:
1510:src/xeq.c     **** }
 16008              		.loc 1 1510 2 view .LVU4178
 16009              	.LBE2807:
 16010              	.LBE2806:
1974:src/xeq.c     **** }
 16011              		.loc 1 1974 2 is_stmt 0 view .LVU4179
 16012 000c 03F00302 		and	r2, r3, #3
 16013 0010 03F08003 		and	r3, r3, #128
 16014              	.LVL1164:
1974:src/xeq.c     **** }
 16015              		.loc 1 1974 2 view .LVU4180
 16016 0014 0093     		str	r3, [sp]
 16017              	.LBB2809:
 16018              	.LBB2808:
1510:src/xeq.c     **** }
 16019              		.loc 1 1510 2 view .LVU4181
 16020 0016 6420     		movs	r0, #100
 16021              	.LVL1165:
1510:src/xeq.c     **** }
 16022              		.loc 1 1510 2 view .LVU4182
 16023 0018 0023     		movs	r3, #0
 16024 001a FFF7FEFF 		bl	set_reg_n_int_sgn
 16025              	.LVL1166:
1510:src/xeq.c     **** }
 16026              		.loc 1 1510 2 view .LVU4183
 16027              	.LBE2808:
 16028              	.LBE2809:
1975:src/xeq.c     **** 
 16029              		.loc 1 1975 1 view .LVU4184
 16030 001e 03B0     		add	sp, sp, #12
 16031              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccqED0AM.s 			page 451


 16032              		@ sp needed
 16033 0020 5DF804FB 		ldr	pc, [sp], #4
 16034              	.L1134:
 16035              		.align	2
 16036              	.L1133:
 16037 0024 00000000 		.word	.LANCHOR4
 16038              		.cfi_endproc
 16039              	.LFE131:
 16041              		.section	.text.get_base,"ax",%progbits
 16042              		.align	1
 16043              		.p2align 2,,3
 16044              		.global	get_base
 16045              		.syntax unified
 16046              		.thumb
 16047              		.thumb_func
 16048              		.fpu fpv4-sp-d16
 16050              	get_base:
 16051              	.LVL1167:
 16052              	.LFB132:
1977:src/xeq.c     **** 	setX_int_sgn((int)int_base(), 0);
 16053              		.loc 1 1977 30 is_stmt 1 view -0
 16054              		.cfi_startproc
 16055              		@ args = 0, pretend = 0, frame = 0
 16056              		@ frame_needed = 0, uses_anonymous_args = 0
1978:src/xeq.c     **** }
 16057              		.loc 1 1978 2 view .LVU4186
1977:src/xeq.c     **** 	setX_int_sgn((int)int_base(), 0);
 16058              		.loc 1 1977 30 is_stmt 0 view .LVU4187
 16059 0000 00B5     		push	{lr}
 16060              		.cfi_def_cfa_offset 4
 16061              		.cfi_offset 14, -4
 16062 0002 83B0     		sub	sp, sp, #12
 16063              		.cfi_def_cfa_offset 16
1978:src/xeq.c     **** }
 16064              		.loc 1 1978 20 view .LVU4188
 16065 0004 FFF7FEFF 		bl	int_base
 16066              	.LVL1168:
 16067              	.LBB2810:
 16068              	.LBI2810:
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 16069              		.loc 1 1509 6 is_stmt 1 view .LVU4189
 16070              	.LBB2811:
1510:src/xeq.c     **** }
 16071              		.loc 1 1510 2 view .LVU4190
 16072 0008 0021     		movs	r1, #0
 16073 000a 0246     		mov	r2, r0
 16074 000c C317     		asrs	r3, r0, #31
 16075 000e 0091     		str	r1, [sp]
 16076 0010 6420     		movs	r0, #100
 16077              	.LVL1169:
1510:src/xeq.c     **** }
 16078              		.loc 1 1510 2 is_stmt 0 view .LVU4191
 16079 0012 FFF7FEFF 		bl	set_reg_n_int_sgn
 16080              	.LVL1170:
1510:src/xeq.c     **** }
 16081              		.loc 1 1510 2 view .LVU4192
 16082              	.LBE2811:
ARM GAS  /tmp/ccqED0AM.s 			page 452


 16083              	.LBE2810:
1979:src/xeq.c     **** 
 16084              		.loc 1 1979 1 view .LVU4193
 16085 0016 03B0     		add	sp, sp, #12
 16086              		.cfi_def_cfa_offset 4
 16087              		@ sp needed
 16088 0018 5DF804FB 		ldr	pc, [sp], #4
 16089              		.cfi_endproc
 16090              	.LFE132:
 16092              		.section	.text.DM42_Ticker,"ax",%progbits
 16093              		.align	1
 16094              		.p2align 2,,3
 16095              		.global	DM42_Ticker
 16096              		.syntax unified
 16097              		.thumb
 16098              		.thumb_func
 16099              		.fpu fpv4-sp-d16
 16101              	DM42_Ticker:
 16102              	.LFB133:
1982:src/xeq.c     ****     long int f, t;
 16103              		.loc 1 1982 26 is_stmt 1 view -0
 16104              		.cfi_startproc
 16105              		@ args = 0, pretend = 0, frame = 0
 16106              		@ frame_needed = 0, uses_anonymous_args = 0
1983:src/xeq.c     ****     t = get_rtc_ticks();
 16107              		.loc 1 1983 5 view .LVU4195
1984:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 16108              		.loc 1 1984 5 view .LVU4196
1982:src/xeq.c     ****     long int f, t;
 16109              		.loc 1 1982 26 is_stmt 0 view .LVU4197
 16110 0000 08B5     		push	{r3, lr}
 16111              		.cfi_def_cfa_offset 8
 16112              		.cfi_offset 3, -8
 16113              		.cfi_offset 14, -4
1984:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 16114              		.loc 1 1984 9 view .LVU4198
 16115 0002 044B     		ldr	r3, .L1139
 16116 0004 9847     		blx	r3
 16117              	.LVL1171:
1985:src/xeq.c     ****     return f;
 16118              		.loc 1 1985 5 is_stmt 1 view .LVU4199
1986:src/xeq.c     ****  }
 16119              		.loc 1 1986 5 view .LVU4200
1985:src/xeq.c     ****     return f;
 16120              		.loc 1 1985 13 is_stmt 0 view .LVU4201
 16121 0006 C0F31300 		ubfx	r0, r0, #0, #20
 16122              	.LVL1172:
1985:src/xeq.c     ****     return f;
 16123              		.loc 1 1985 23 view .LVU4202
 16124 000a 00EB8000 		add	r0, r0, r0, lsl #2
1987:src/xeq.c     **** #endif
 16125              		.loc 1 1987 2 view .LVU4203
 16126 000e C009     		lsrs	r0, r0, #7
 16127 0010 08BD     		pop	{r3, pc}
 16128              	.L1140:
 16129 0012 00BF     		.align	2
 16130              	.L1139:
ARM GAS  /tmp/ccqED0AM.s 			page 453


 16131 0014 B9040008 		.word	134218937
 16132              		.cfi_endproc
 16133              	.LFE133:
 16135              		.section	.text.op_ticks,"ax",%progbits
 16136              		.align	1
 16137              		.p2align 2,,3
 16138              		.global	op_ticks
 16139              		.syntax unified
 16140              		.thumb
 16141              		.thumb_func
 16142              		.fpu fpv4-sp-d16
 16144              	op_ticks:
 16145              	.LVL1173:
 16146              	.LFB134:
1990:src/xeq.c     **** #if !defined(CONSOLE)
 16147              		.loc 1 1990 30 is_stmt 1 view -0
 16148              		.cfi_startproc
 16149              		@ args = 0, pretend = 0, frame = 0
 16150              		@ frame_needed = 0, uses_anonymous_args = 0
1992:src/xeq.c     **** #else 
 16151              		.loc 1 1992 5 view .LVU4205
 16152              	.LBB2812:
 16153              	.LBI2812:
1982:src/xeq.c     ****     long int f, t;
 16154              		.loc 1 1982 11 view .LVU4206
 16155              	.LBB2813:
1983:src/xeq.c     ****     t = get_rtc_ticks();
 16156              		.loc 1 1983 5 view .LVU4207
1984:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 16157              		.loc 1 1984 5 view .LVU4208
 16158              	.LBE2813:
 16159              	.LBE2812:
1990:src/xeq.c     **** #if !defined(CONSOLE)
 16160              		.loc 1 1990 30 is_stmt 0 view .LVU4209
 16161 0000 00B5     		push	{lr}
 16162              		.cfi_def_cfa_offset 4
 16163              		.cfi_offset 14, -4
 16164              	.LBB2817:
 16165              	.LBB2814:
1984:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 16166              		.loc 1 1984 9 view .LVU4210
 16167 0002 084B     		ldr	r3, .L1143
 16168              	.LBE2814:
 16169              	.LBE2817:
1990:src/xeq.c     **** #if !defined(CONSOLE)
 16170              		.loc 1 1990 30 view .LVU4211
 16171 0004 83B0     		sub	sp, sp, #12
 16172              		.cfi_def_cfa_offset 16
 16173              	.LBB2818:
 16174              	.LBB2815:
1984:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 16175              		.loc 1 1984 9 view .LVU4212
 16176 0006 9847     		blx	r3
 16177              	.LVL1174:
1985:src/xeq.c     ****     return f;
 16178              		.loc 1 1985 5 is_stmt 1 view .LVU4213
1986:src/xeq.c     ****  }
ARM GAS  /tmp/ccqED0AM.s 			page 454


 16179              		.loc 1 1986 5 view .LVU4214
1986:src/xeq.c     ****  }
 16180              		.loc 1 1986 5 is_stmt 0 view .LVU4215
 16181              	.LBE2815:
 16182              	.LBE2818:
 16183              	.LBB2819:
 16184              	.LBI2819:
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 16185              		.loc 1 1509 6 is_stmt 1 view .LVU4216
 16186              	.LBB2820:
1510:src/xeq.c     **** }
 16187              		.loc 1 1510 2 view .LVU4217
 16188              	.LBE2820:
 16189              	.LBE2819:
 16190              	.LBB2822:
 16191              	.LBB2816:
1985:src/xeq.c     ****     return f;
 16192              		.loc 1 1985 13 is_stmt 0 view .LVU4218
 16193 0008 C0F31300 		ubfx	r0, r0, #0, #20
 16194              	.LVL1175:
1985:src/xeq.c     ****     return f;
 16195              		.loc 1 1985 23 view .LVU4219
 16196 000c 00EB8000 		add	r0, r0, r0, lsl #2
1985:src/xeq.c     ****     return f;
 16197              		.loc 1 1985 7 view .LVU4220
 16198 0010 C209     		lsrs	r2, r0, #7
 16199              	.LBE2816:
 16200              	.LBE2822:
 16201              	.LBB2823:
 16202              	.LBB2821:
1510:src/xeq.c     **** }
 16203              		.loc 1 1510 2 view .LVU4221
 16204 0012 0021     		movs	r1, #0
 16205 0014 D317     		asrs	r3, r2, #31
 16206 0016 0091     		str	r1, [sp]
 16207 0018 6420     		movs	r0, #100
 16208 001a FFF7FEFF 		bl	set_reg_n_int_sgn
 16209              	.LVL1176:
1510:src/xeq.c     **** }
 16210              		.loc 1 1510 2 view .LVU4222
 16211              	.LBE2821:
 16212              	.LBE2823:
2000:src/xeq.c     **** 
 16213              		.loc 1 2000 1 view .LVU4223
 16214 001e 03B0     		add	sp, sp, #12
 16215              		.cfi_def_cfa_offset 4
 16216              		@ sp needed
 16217 0020 5DF804FB 		ldr	pc, [sp], #4
 16218              	.L1144:
 16219              		.align	2
 16220              	.L1143:
 16221 0024 B9040008 		.word	134218937
 16222              		.cfi_endproc
 16223              	.LFE134:
 16225              		.section	.text.op_voltage,"ax",%progbits
 16226              		.align	1
 16227              		.p2align 2,,3
ARM GAS  /tmp/ccqED0AM.s 			page 455


 16228              		.global	op_voltage
 16229              		.syntax unified
 16230              		.thumb
 16231              		.thumb_func
 16232              		.fpu fpv4-sp-d16
 16234              	op_voltage:
 16235              	.LVL1177:
 16236              	.LFB135:
2003:src/xeq.c     **** 	decNumber t, u;
 16237              		.loc 1 2003 32 is_stmt 1 view -0
 16238              		.cfi_startproc
 16239              		@ args = 0, pretend = 0, frame = 72
 16240              		@ frame_needed = 0, uses_anonymous_args = 0
2004:src/xeq.c     **** #ifdef REALBUILD
 16241              		.loc 1 2004 2 view .LVU4225
2008:src/xeq.c     **** 	v = v / 100;
 16242              		.loc 1 2008 2 view .LVU4226
2003:src/xeq.c     **** 	decNumber t, u;
 16243              		.loc 1 2003 32 is_stmt 0 view .LVU4227
 16244 0000 00B5     		push	{lr}
 16245              		.cfi_def_cfa_offset 4
 16246              		.cfi_offset 14, -4
2008:src/xeq.c     **** 	v = v / 100;
 16247              		.loc 1 2008 10 view .LVU4228
 16248 0002 154B     		ldr	r3, .L1149
2003:src/xeq.c     **** 	decNumber t, u;
 16249              		.loc 1 2003 32 view .LVU4229
 16250 0004 95B0     		sub	sp, sp, #84
 16251              		.cfi_def_cfa_offset 88
2008:src/xeq.c     **** 	v = v / 100;
 16252              		.loc 1 2008 10 view .LVU4230
 16253 0006 9847     		blx	r3
 16254              	.LVL1178:
2014:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16255              		.loc 1 2014 6 view .LVU4231
 16256 0008 144B     		ldr	r3, .L1149+4
2009:src/xeq.c     **** #else
 16257              		.loc 1 2009 4 view .LVU4232
 16258 000a 154A     		ldr	r2, .L1149+8
2014:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16259              		.loc 1 2014 6 view .LVU4233
 16260 000c 1B68     		ldr	r3, [r3]
 16261              	.LVL1179:
2009:src/xeq.c     **** #else
 16262              		.loc 1 2009 2 is_stmt 1 view .LVU4234
2014:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16263              		.loc 1 2014 6 is_stmt 0 view .LVU4235
 16264 000e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
2009:src/xeq.c     **** #else
 16265              		.loc 1 2009 4 view .LVU4236
 16266 0012 82FB0012 		smull	r1, r2, r2, r0
2014:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16267              		.loc 1 2014 5 view .LVU4237
 16268 0016 DB07     		lsls	r3, r3, #31
2009:src/xeq.c     **** #else
 16269              		.loc 1 2009 4 view .LVU4238
 16270 0018 4FEAE070 		asr	r0, r0, #31
ARM GAS  /tmp/ccqED0AM.s 			page 456


 16271              	.LVL1180:
2009:src/xeq.c     **** #else
 16272              		.loc 1 2009 4 view .LVU4239
 16273 001c C0EB6212 		rsb	r2, r0, r2, asr #5
 16274              	.LVL1181:
2014:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16275              		.loc 1 2014 2 is_stmt 1 view .LVU4240
2014:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16276              		.loc 1 2014 5 is_stmt 0 view .LVU4241
 16277 0020 08D5     		bpl	.L1146
2015:src/xeq.c     **** 	} else {
 16278              		.loc 1 2015 3 is_stmt 1 view .LVU4242
 16279              	.LVL1182:
 16280              	.LBB2824:
 16281              	.LBI2824:
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 16282              		.loc 1 1509 6 view .LVU4243
 16283              	.LBB2825:
1510:src/xeq.c     **** }
 16284              		.loc 1 1510 2 view .LVU4244
 16285 0022 0023     		movs	r3, #0
 16286 0024 0093     		str	r3, [sp]
 16287 0026 6420     		movs	r0, #100
 16288 0028 D317     		asrs	r3, r2, #31
 16289 002a FFF7FEFF 		bl	set_reg_n_int_sgn
 16290              	.LVL1183:
1510:src/xeq.c     **** }
 16291              		.loc 1 1510 2 is_stmt 0 view .LVU4245
 16292              	.LBE2825:
 16293              	.LBE2824:
2021:src/xeq.c     **** 
 16294              		.loc 1 2021 1 view .LVU4246
 16295 002e 15B0     		add	sp, sp, #84
 16296              		.cfi_remember_state
 16297              		.cfi_def_cfa_offset 4
 16298              		@ sp needed
 16299 0030 5DF804FB 		ldr	pc, [sp], #4
 16300              	.LVL1184:
 16301              	.L1146:
 16302              		.cfi_restore_state
2017:src/xeq.c     **** 		dn_mulpow10(&u, &t, -1);
 16303              		.loc 1 2017 3 is_stmt 1 view .LVU4247
 16304 0034 D317     		asrs	r3, r2, #31
 16305 0036 02A8     		add	r0, sp, #8
 16306 0038 FFF7FEFF 		bl	ullint_to_dn
 16307              	.LVL1185:
2018:src/xeq.c     **** 		setX(&u);
 16308              		.loc 1 2018 3 view .LVU4248
 16309 003c 02A9     		add	r1, sp, #8
 16310 003e 4FF0FF32 		mov	r2, #-1
 16311 0042 0BA8     		add	r0, sp, #44
 16312 0044 FFF7FEFF 		bl	dn_mulpow10
 16313              	.LVL1186:
2019:src/xeq.c     **** 	}
 16314              		.loc 1 2019 3 view .LVU4249
 16315              	.LBB2826:
 16316              	.LBI2826:
ARM GAS  /tmp/ccqED0AM.s 			page 457


 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 16317              		.loc 1 828 6 view .LVU4250
 16318              	.LBB2827:
 829:src/xeq.c     **** }
 16319              		.loc 1 829 2 view .LVU4251
 16320 0048 0BA9     		add	r1, sp, #44
 16321              	.LVL1187:
 829:src/xeq.c     **** }
 16322              		.loc 1 829 2 is_stmt 0 view .LVU4252
 16323 004a 6420     		movs	r0, #100
 16324 004c FFF7FEFF 		bl	setRegister
 16325              	.LVL1188:
 829:src/xeq.c     **** }
 16326              		.loc 1 829 2 view .LVU4253
 16327              	.LBE2827:
 16328              	.LBE2826:
2021:src/xeq.c     **** 
 16329              		.loc 1 2021 1 view .LVU4254
 16330 0050 15B0     		add	sp, sp, #84
 16331              		.cfi_def_cfa_offset 4
 16332              		@ sp needed
 16333 0052 5DF804FB 		ldr	pc, [sp], #4
 16334              	.L1150:
 16335 0056 00BF     		.align	2
 16336              	.L1149:
 16337 0058 F1020008 		.word	134218481
 16338 005c 00000000 		.word	main_ram
 16339 0060 1F85EB51 		.word	1374389535
 16340              		.cfi_endproc
 16341              	.LFE135:
 16343              		.section	.text.free_mem,"ax",%progbits
 16344              		.align	1
 16345              		.p2align 2,,3
 16346              		.global	free_mem
 16347              		.syntax unified
 16348              		.thumb
 16349              		.thumb_func
 16350              		.fpu fpv4-sp-d16
 16352              	free_mem:
 16353              	.LFB136:
2026:src/xeq.c     **** 	return RetStkSize + RetStkPtr;
 16354              		.loc 1 2026 20 is_stmt 1 view -0
 16355              		.cfi_startproc
 16356              		@ args = 0, pretend = 0, frame = 0
 16357              		@ frame_needed = 0, uses_anonymous_args = 0
 16358              		@ link register save eliminated.
2027:src/xeq.c     **** }
 16359              		.loc 1 2027 2 view .LVU4256
2027:src/xeq.c     **** }
 16360              		.loc 1 2027 22 is_stmt 0 view .LVU4257
 16361 0000 034A     		ldr	r2, .L1152
2027:src/xeq.c     **** }
 16362              		.loc 1 2027 20 view .LVU4258
 16363 0002 044B     		ldr	r3, .L1152+4
2027:src/xeq.c     **** }
 16364              		.loc 1 2027 22 view .LVU4259
 16365 0004 1268     		ldr	r2, [r2]
ARM GAS  /tmp/ccqED0AM.s 			page 458


2027:src/xeq.c     **** }
 16366              		.loc 1 2027 20 view .LVU4260
 16367 0006 1B68     		ldr	r3, [r3]
2027:src/xeq.c     **** }
 16368              		.loc 1 2027 22 view .LVU4261
 16369 0008 B2F9E207 		ldrsh	r0, [r2, #2018]
2028:src/xeq.c     **** 
 16370              		.loc 1 2028 1 view .LVU4262
 16371 000c 1844     		add	r0, r0, r3
 16372 000e 7047     		bx	lr
 16373              	.L1153:
 16374              		.align	2
 16375              	.L1152:
 16376 0010 00000000 		.word	main_ram
 16377 0014 00000000 		.word	RetStkSize
 16378              		.cfi_endproc
 16379              	.LFE136:
 16381              		.section	.text.free_flash,"ax",%progbits
 16382              		.align	1
 16383              		.p2align 2,,3
 16384              		.global	free_flash
 16385              		.syntax unified
 16386              		.thumb
 16387              		.thumb_func
 16388              		.fpu fpv4-sp-d16
 16390              	free_flash:
 16391              	.LFB137:
2030:src/xeq.c     **** 	return NUMPROG_FLASH_MAX - UserFlash.size;
 16392              		.loc 1 2030 22 is_stmt 1 view -0
 16393              		.cfi_startproc
 16394              		@ args = 0, pretend = 0, frame = 0
 16395              		@ frame_needed = 0, uses_anonymous_args = 0
 16396              		@ link register save eliminated.
2031:src/xeq.c     **** }
 16397              		.loc 1 2031 2 view .LVU4264
2031:src/xeq.c     **** }
 16398              		.loc 1 2031 38 is_stmt 0 view .LVU4265
 16399 0000 034B     		ldr	r3, .L1155
 16400 0002 1B68     		ldr	r3, [r3]
 16401 0004 5888     		ldrh	r0, [r3, #2]
2032:src/xeq.c     **** 
 16402              		.loc 1 2032 1 view .LVU4266
 16403 0006 C0F5FF50 		rsb	r0, r0, #8160
 16404 000a 1E30     		adds	r0, r0, #30
 16405 000c 7047     		bx	lr
 16406              	.L1156:
 16407 000e 00BF     		.align	2
 16408              	.L1155:
 16409 0010 00000000 		.word	library_ram
 16410              		.cfi_endproc
 16411              	.LFE137:
 16413              		.section	.text.get_mem,"ax",%progbits
 16414              		.align	1
 16415              		.p2align 2,,3
 16416              		.global	get_mem
 16417              		.syntax unified
 16418              		.thumb
ARM GAS  /tmp/ccqED0AM.s 			page 459


 16419              		.thumb_func
 16420              		.fpu fpv4-sp-d16
 16422              	get_mem:
 16423              	.LVL1189:
 16424              	.LFB138:
2034:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
 16425              		.loc 1 2034 29 is_stmt 1 view -0
 16426              		.cfi_startproc
 16427              		@ args = 0, pretend = 0, frame = 0
 16428              		@ frame_needed = 0, uses_anonymous_args = 0
2035:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 16429              		.loc 1 2035 2 view .LVU4268
2034:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
 16430              		.loc 1 2034 29 is_stmt 0 view .LVU4269
 16431 0000 00B5     		push	{lr}
 16432              		.cfi_def_cfa_offset 4
 16433              		.cfi_offset 14, -4
2035:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 16434              		.loc 1 2035 2 view .LVU4270
 16435 0002 A928     		cmp	r0, #169
2034:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
 16436              		.loc 1 2034 29 view .LVU4271
 16437 0004 83B0     		sub	sp, sp, #12
 16438              		.cfi_def_cfa_offset 16
2035:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 16439              		.loc 1 2035 2 view .LVU4272
 16440 0006 25D0     		beq	.L1166
2035:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 16441              		.loc 1 2035 2 discriminator 2 view .LVU4273
 16442 0008 AA28     		cmp	r0, #170
 16443 000a 18D0     		beq	.L1167
2035:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 16444              		.loc 1 2035 2 discriminator 5 view .LVU4274
 16445 000c AC28     		cmp	r0, #172
 16446 000e 3ED0     		beq	.L1168
 16447              	.LBB2828:
 16448              	.LBI2828:
 253:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 16449              		.loc 1 253 14 is_stmt 1 view .LVU4275
 16450              	.LBE2828:
 254:src/xeq.c     **** }
 16451              		.loc 1 254 2 view .LVU4276
 16452              	.LVL1190:
 16453              	.LBB2837:
 16454              	.LBB2829:
 16455              	.LBI2829:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 16456              		.loc 1 241 14 view .LVU4277
 16457              	.LBB2830:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 16458              		.loc 1 242 2 view .LVU4278
 16459              	.LBB2831:
 16460              	.LBI2831:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 16461              		.loc 1 1118 5 view .LVU4279
 16462              	.LBB2832:
1119:src/xeq.c     **** }
ARM GAS  /tmp/ccqED0AM.s 			page 460


 16463              		.loc 1 1119 2 view .LVU4280
1119:src/xeq.c     **** }
 16464              		.loc 1 1119 12 is_stmt 0 view .LVU4281
 16465 0010 234B     		ldr	r3, .L1170
 16466 0012 1A68     		ldr	r2, [r3]
1119:src/xeq.c     **** }
 16467              		.loc 1 1119 24 view .LVU4282
 16468 0014 B2F8E817 		ldrh	r1, [r2, #2024]
 16469              	.LBE2832:
 16470              	.LBE2831:
 16471              	.LBB2834:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 16472              		.loc 1 243 24 view .LVU4283
 16473 0018 92F8CF27 		ldrb	r2, [r2, #1999]	@ zero_extendqisi2
 16474              	.LBE2834:
 16475              	.LBB2835:
 16476              	.LBB2833:
1119:src/xeq.c     **** }
 16477              		.loc 1 1119 24 view .LVU4284
 16478 001c 44F20103 		movw	r3, #16385
 16479              	.LBE2833:
 16480              	.LBE2835:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 16481              		.loc 1 242 5 view .LVU4285
 16482 0020 0B40     		ands	r3, r3, r1
 16483 0022 B3F5804F 		cmp	r3, #16384
 16484              	.LBB2836:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 16485              		.loc 1 243 3 is_stmt 1 view .LVU4286
 16486              	.LVL1191:
 244:src/xeq.c     **** 	}
 16487              		.loc 1 244 3 view .LVU4287
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 16488              		.loc 1 243 13 is_stmt 0 view .LVU4288
 16489 0026 04BF     		itt	eq
 16490 0028 0C3A     		subeq	r2, r2, #12
 16491              	.LVL1192:
 244:src/xeq.c     **** 	}
 16492              		.loc 1 244 67 view .LVU4289
 16493 002a 5210     		asreq	r2, r2, #1
 16494              	.LBE2836:
 247:src/xeq.c     **** }
 16495              		.loc 1 247 3 is_stmt 1 view .LVU4290
 16496 002c 0023     		movs	r3, #0
 16497              	.LVL1193:
 16498              	.L1159:
 247:src/xeq.c     **** }
 16499              		.loc 1 247 3 is_stmt 0 view .LVU4291
 16500              	.LBE2830:
 16501              	.LBE2829:
 16502              	.LBE2837:
 16503              	.LBB2838:
 16504              	.LBI2838:
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 16505              		.loc 1 1509 6 is_stmt 1 discriminator 10 view .LVU4292
 16506              	.LBB2839:
1510:src/xeq.c     **** }
ARM GAS  /tmp/ccqED0AM.s 			page 461


 16507              		.loc 1 1510 2 discriminator 10 view .LVU4293
 16508 002e 0021     		movs	r1, #0
 16509 0030 0091     		str	r1, [sp]
 16510 0032 6420     		movs	r0, #100
 16511 0034 FFF7FEFF 		bl	set_reg_n_int_sgn
 16512              	.LVL1194:
1510:src/xeq.c     **** }
 16513              		.loc 1 1510 2 is_stmt 0 discriminator 10 view .LVU4294
 16514              	.LBE2839:
 16515              	.LBE2838:
2040:src/xeq.c     **** 
 16516              		.loc 1 2040 1 discriminator 10 view .LVU4295
 16517 0038 03B0     		add	sp, sp, #12
 16518              		.cfi_remember_state
 16519              		.cfi_def_cfa_offset 4
 16520              		@ sp needed
 16521 003a 5DF804FB 		ldr	pc, [sp], #4
 16522              	.LVL1195:
 16523              	.L1167:
 16524              		.cfi_restore_state
 16525              	.LBB2840:
 16526              	.LBI2840:
 233:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 16527              		.loc 1 233 5 is_stmt 1 view .LVU4296
 16528              	.LBE2840:
 234:src/xeq.c     **** }
 16529              		.loc 1 234 2 view .LVU4297
 16530              	.LBB2861:
 16531              	.LBB2841:
 16532              	.LBI2841:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 16533              		.loc 1 225 5 view .LVU4298
 16534              	.LBB2842:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 16535              		.loc 1 226 2 view .LVU4299
 16536              	.LBB2843:
 16537              	.LBI2843:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 16538              		.loc 1 1118 5 view .LVU4300
 16539              	.LBB2844:
1119:src/xeq.c     **** }
 16540              		.loc 1 1119 2 view .LVU4301
1119:src/xeq.c     **** }
 16541              		.loc 1 1119 12 is_stmt 0 view .LVU4302
 16542 003e 184B     		ldr	r3, .L1170
 16543 0040 1A68     		ldr	r2, [r3]
 16544              	.LVL1196:
1119:src/xeq.c     **** }
 16545              		.loc 1 1119 12 view .LVU4303
 16546              	.LBE2844:
 16547              	.LBE2843:
 227:src/xeq.c     **** }
 16548              		.loc 1 227 2 is_stmt 1 view .LVU4304
 16549              	.LBB2847:
 16550              	.LBI2847:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 16551              		.loc 1 217 5 view .LVU4305
ARM GAS  /tmp/ccqED0AM.s 			page 462


 16552              	.LBB2848:
 218:src/xeq.c     **** }
 16553              		.loc 1 218 2 view .LVU4306
 218:src/xeq.c     **** }
 16554              		.loc 1 218 9 is_stmt 0 view .LVU4307
 16555 0042 B2F8DE37 		ldrh	r3, [r2, #2014]
 16556 0046 43F34A13 		sbfx	r3, r3, #5, #11
 218:src/xeq.c     **** }
 16557              		.loc 1 218 57 view .LVU4308
 16558 004a 002B     		cmp	r3, #0
 16559 004c 0BDB     		blt	.L1169
 16560 004e 0022     		movs	r2, #0
 16561              	.LVL1197:
 218:src/xeq.c     **** }
 16562              		.loc 1 218 57 view .LVU4309
 16563 0050 0023     		movs	r3, #0
 16564              	.LVL1198:
 218:src/xeq.c     **** }
 16565              		.loc 1 218 57 view .LVU4310
 16566 0052 ECE7     		b	.L1159
 16567              	.LVL1199:
 16568              	.L1166:
 218:src/xeq.c     **** }
 16569              		.loc 1 218 57 view .LVU4311
 16570              	.LBE2848:
 16571              	.LBE2847:
 16572              	.LBE2842:
 16573              	.LBE2841:
 16574              	.LBE2861:
 16575              	.LBB2862:
 16576              	.LBI2862:
2026:src/xeq.c     **** 	return RetStkSize + RetStkPtr;
 16577              		.loc 1 2026 5 is_stmt 1 view .LVU4312
 16578              	.LBB2863:
2027:src/xeq.c     **** }
 16579              		.loc 1 2027 2 view .LVU4313
2027:src/xeq.c     **** }
 16580              		.loc 1 2027 22 is_stmt 0 view .LVU4314
 16581 0054 124A     		ldr	r2, .L1170
2027:src/xeq.c     **** }
 16582              		.loc 1 2027 20 view .LVU4315
 16583 0056 134B     		ldr	r3, .L1170+4
2027:src/xeq.c     **** }
 16584              		.loc 1 2027 22 view .LVU4316
 16585 0058 1268     		ldr	r2, [r2]
2027:src/xeq.c     **** }
 16586              		.loc 1 2027 20 view .LVU4317
 16587 005a 1B68     		ldr	r3, [r3]
2027:src/xeq.c     **** }
 16588              		.loc 1 2027 22 view .LVU4318
 16589 005c B2F9E227 		ldrsh	r2, [r2, #2018]
2027:src/xeq.c     **** }
 16590              		.loc 1 2027 20 view .LVU4319
 16591 0060 1A44     		add	r2, r2, r3
 16592 0062 0023     		movs	r3, #0
 16593              	.LBE2863:
 16594              	.LBE2862:
ARM GAS  /tmp/ccqED0AM.s 			page 463


 16595 0064 E3E7     		b	.L1159
 16596              	.LVL1200:
 16597              	.L1169:
 16598              	.LBB2864:
 16599              	.LBB2860:
 16600              	.LBB2859:
 16601              	.LBB2853:
 16602              	.LBB2849:
 218:src/xeq.c     **** }
 16603              		.loc 1 218 25 view .LVU4320
 16604 0066 1049     		ldr	r1, .L1170+8
 16605              	.LBE2849:
 16606              	.LBE2853:
 16607              	.LBB2854:
 16608              	.LBB2845:
1119:src/xeq.c     **** }
 16609              		.loc 1 1119 24 view .LVU4321
 16610 0068 B2F8E807 		ldrh	r0, [r2, #2024]
 16611              	.LVL1201:
1119:src/xeq.c     **** }
 16612              		.loc 1 1119 24 view .LVU4322
 16613              	.LBE2845:
 16614              	.LBE2854:
 16615              	.LBB2855:
 16616              	.LBB2850:
 218:src/xeq.c     **** }
 16617              		.loc 1 218 25 view .LVU4323
 16618 006c 0A68     		ldr	r2, [r1]
 16619              	.LVL1202:
 218:src/xeq.c     **** }
 16620              		.loc 1 218 25 view .LVU4324
 16621              	.LBE2850:
 16622              	.LBE2855:
 16623              	.LBB2856:
 16624              	.LBB2846:
1119:src/xeq.c     **** }
 16625              		.loc 1 1119 24 view .LVU4325
 16626 006e 44F20101 		movw	r1, #16385
 16627              	.LBE2846:
 16628              	.LBE2856:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 16629              		.loc 1 226 73 view .LVU4326
 16630 0072 0140     		ands	r1, r1, r0
 16631              	.LBB2857:
 16632              	.LBB2851:
 218:src/xeq.c     **** }
 16633              		.loc 1 218 57 view .LVU4327
 16634 0074 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 16635              	.LBE2851:
 16636              	.LBE2857:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 16637              		.loc 1 226 73 view .LVU4328
 16638 0078 A1F58043 		sub	r3, r1, #16384
 16639 007c B3FA83F3 		clz	r3, r3
 16640 0080 5B09     		lsrs	r3, r3, #5
 16641 0082 0233     		adds	r3, r3, #2
 16642              	.LBB2858:
ARM GAS  /tmp/ccqED0AM.s 			page 464


 16643              	.LBB2852:
 218:src/xeq.c     **** }
 16644              		.loc 1 218 57 view .LVU4329
 16645 0084 C2F30B02 		ubfx	r2, r2, #0, #12
 16646 0088 1A41     		asrs	r2, r2, r3
 16647 008a D317     		asrs	r3, r2, #31
 16648 008c CFE7     		b	.L1159
 16649              	.LVL1203:
 16650              	.L1168:
 218:src/xeq.c     **** }
 16651              		.loc 1 218 57 view .LVU4330
 16652              	.LBE2852:
 16653              	.LBE2858:
 16654              	.LBE2859:
 16655              	.LBE2860:
 16656              	.LBE2864:
 16657              	.LBB2865:
 16658              	.LBI2865:
2030:src/xeq.c     **** 	return NUMPROG_FLASH_MAX - UserFlash.size;
 16659              		.loc 1 2030 5 is_stmt 1 view .LVU4331
 16660              	.LBB2866:
2031:src/xeq.c     **** }
 16661              		.loc 1 2031 2 view .LVU4332
2031:src/xeq.c     **** }
 16662              		.loc 1 2031 38 is_stmt 0 view .LVU4333
 16663 008e 074B     		ldr	r3, .L1170+12
 16664 0090 1B68     		ldr	r3, [r3]
 16665 0092 5A88     		ldrh	r2, [r3, #2]
2031:src/xeq.c     **** }
 16666              		.loc 1 2031 27 view .LVU4334
 16667 0094 C2F5FF52 		rsb	r2, r2, #8160
 16668 0098 1E32     		adds	r2, r2, #30
 16669 009a 0023     		movs	r3, #0
 16670              	.LBE2866:
 16671              	.LBE2865:
 16672 009c C7E7     		b	.L1159
 16673              	.L1171:
 16674 009e 00BF     		.align	2
 16675              	.L1170:
 16676 00a0 00000000 		.word	main_ram
 16677 00a4 00000000 		.word	RetStkSize
 16678 00a8 00000000 		.word	RetStk
 16679 00ac 00000000 		.word	library_ram
 16680              		.cfi_endproc
 16681              	.LFE138:
 16683              		.section	.text.cmdputkey,"ax",%progbits
 16684              		.align	1
 16685              		.p2align 2,,3
 16686              		.global	cmdputkey
 16687              		.syntax unified
 16688              		.thumb
 16689              		.thumb_func
 16690              		.fpu fpv4-sp-d16
 16692              	cmdputkey:
 16693              	.LVL1204:
 16694              	.LFB141:
2075:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
ARM GAS  /tmp/ccqED0AM.s 			page 465


 16695              		.loc 1 2075 1 is_stmt 1 view -0
 16696              		.cfi_startproc
 16697              		@ args = 0, pretend = 0, frame = 0
 16698              		@ frame_needed = 0, uses_anonymous_args = 0
2076:src/xeq.c     **** 
 16699              		.loc 1 2076 2 view .LVU4336
2075:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 16700              		.loc 1 2075 1 is_stmt 0 view .LVU4337
 16701 0000 10B5     		push	{r4, lr}
 16702              		.cfi_def_cfa_offset 8
 16703              		.cfi_offset 4, -8
 16704              		.cfi_offset 14, -4
2076:src/xeq.c     **** 
 16705              		.loc 1 2076 16 view .LVU4338
 16706 0002 FFF7FEFF 		bl	get_keycode_from_reg
 16707              	.LVL1205:
2078:src/xeq.c     **** 		set_running_off();
 16708              		.loc 1 2078 2 is_stmt 1 view .LVU4339
2078:src/xeq.c     **** 		set_running_off();
 16709              		.loc 1 2078 5 is_stmt 0 view .LVU4340
 16710 0006 041E     		subs	r4, r0, #0
 16711 0008 00DA     		bge	.L1175
2082:src/xeq.c     **** 
 16712              		.loc 1 2082 1 view .LVU4341
 16713 000a 10BD     		pop	{r4, pc}
 16714              	.L1175:
2079:src/xeq.c     **** 		put_key(c);
 16715              		.loc 1 2079 3 is_stmt 1 view .LVU4342
 16716              	.LBB2867:
 16717              	.LBI2867:
5818:src/xeq.c     **** 	set_running_off_sst();
 16718              		.loc 1 5818 6 view .LVU4343
 16719              	.LBB2868:
5819:src/xeq.c     **** 	State.entryp = 0;
 16720              		.loc 1 5819 2 view .LVU4344
 16721              	.LBB2869:
 16722              	.LBI2869:
5810:src/xeq.c     **** 	Running = 0;
 16723              		.loc 1 5810 6 view .LVU4345
 16724              	.LBB2870:
5811:src/xeq.c     **** }
 16725              		.loc 1 5811 2 view .LVU4346
 16726              	.LBE2870:
 16727              	.LBE2869:
5820:src/xeq.c     **** 	dot( RCL_annun, 0);
 16728              		.loc 1 5820 15 is_stmt 0 view .LVU4347
 16729 000c 094B     		ldr	r3, .L1176
 16730              	.LBB2873:
 16731              	.LBB2871:
5811:src/xeq.c     **** }
 16732              		.loc 1 5811 10 view .LVU4348
 16733 000e 0A4A     		ldr	r2, .L1176+4
 16734              	.LBE2871:
 16735              	.LBE2873:
5820:src/xeq.c     **** 	dot( RCL_annun, 0);
 16736              		.loc 1 5820 15 view .LVU4349
 16737 0010 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccqED0AM.s 			page 466


 16738              	.LBB2874:
 16739              	.LBB2872:
5811:src/xeq.c     **** }
 16740              		.loc 1 5811 10 view .LVU4350
 16741 0012 0021     		movs	r1, #0
 16742 0014 1160     		str	r1, [r2]
 16743              	.LBE2872:
 16744              	.LBE2874:
5820:src/xeq.c     **** 	dot( RCL_annun, 0);
 16745              		.loc 1 5820 2 is_stmt 1 view .LVU4351
5820:src/xeq.c     **** 	dot( RCL_annun, 0);
 16746              		.loc 1 5820 15 is_stmt 0 view .LVU4352
 16747 0016 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 16748 001a 61F30412 		bfi	r2, r1, #4, #1
 16749              		.loc 1 5821 2 view .LVU4353
 16750 001e 8A20     		movs	r0, #138
 16751              	.LVL1206:
5820:src/xeq.c     **** 	dot( RCL_annun, 0);
 16752              		.loc 1 5820 15 view .LVU4354
 16753 0020 83F8DD27 		strb	r2, [r3, #2013]
 16754              		.loc 1 5821 2 is_stmt 1 view .LVU4355
 16755 0024 FFF7FEFF 		bl	dot
 16756              	.LVL1207:
 16757              	.LBE2868:
 16758              	.LBE2867:
2080:src/xeq.c     **** 	}
 16759              		.loc 1 2080 3 view .LVU4356
 16760 0028 2046     		mov	r0, r4
2082:src/xeq.c     **** 
 16761              		.loc 1 2082 1 is_stmt 0 view .LVU4357
 16762 002a BDE81040 		pop	{r4, lr}
 16763              		.cfi_restore 14
 16764              		.cfi_restore 4
 16765              		.cfi_def_cfa_offset 0
 16766              	.LVL1208:
2080:src/xeq.c     **** 	}
 16767              		.loc 1 2080 3 view .LVU4358
 16768 002e FFF7FEBF 		b	put_key
 16769              	.LVL1209:
 16770              	.L1177:
2080:src/xeq.c     **** 	}
 16771              		.loc 1 2080 3 view .LVU4359
 16772 0032 00BF     		.align	2
 16773              	.L1176:
 16774 0034 00000000 		.word	main_ram
 16775 0038 00000000 		.word	Running
 16776              		.cfi_endproc
 16777              	.LFE141:
 16779              		.section	.text.cmdkeytype,"ax",%progbits
 16780              		.align	1
 16781              		.p2align 2,,3
 16782              		.global	cmdkeytype
 16783              		.syntax unified
 16784              		.thumb
 16785              		.thumb_func
 16786              		.fpu fpv4-sp-d16
 16788              	cmdkeytype:
ARM GAS  /tmp/ccqED0AM.s 			page 467


 16789              	.LVL1210:
 16790              	.LFB142:
2090:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 16791              		.loc 1 2090 1 is_stmt 1 view -0
 16792              		.cfi_startproc
 16793              		@ args = 0, pretend = 0, frame = 48
 16794              		@ frame_needed = 0, uses_anonymous_args = 0
2091:src/xeq.c     **** 	if ( c >= 0 ) {
 16795              		.loc 1 2091 2 view .LVU4361
2090:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 16796              		.loc 1 2090 1 is_stmt 0 view .LVU4362
 16797 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 16798              		.cfi_def_cfa_offset 20
 16799              		.cfi_offset 4, -20
 16800              		.cfi_offset 5, -16
 16801              		.cfi_offset 6, -12
 16802              		.cfi_offset 7, -8
 16803              		.cfi_offset 14, -4
 16804 0002 8FB0     		sub	sp, sp, #60
 16805              		.cfi_def_cfa_offset 80
2091:src/xeq.c     **** 	if ( c >= 0 ) {
 16806              		.loc 1 2091 16 view .LVU4363
 16807 0004 FFF7FEFF 		bl	get_keycode_from_reg
 16808              	.LVL1211:
2092:src/xeq.c     **** 		const char types[] = {
 16809              		.loc 1 2092 2 is_stmt 1 view .LVU4364
2092:src/xeq.c     **** 		const char types[] = {
 16810              		.loc 1 2092 5 is_stmt 0 view .LVU4365
 16811 0008 061E     		subs	r6, r0, #0
 16812 000a 17DB     		blt	.L1178
 16813              	.LBB2875:
2093:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16814              		.loc 1 2093 3 is_stmt 1 view .LVU4366
2093:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16815              		.loc 1 2093 14 is_stmt 0 view .LVU4367
 16816 000c 0E4D     		ldr	r5, .L1186
 16817              	.LBB2876:
 16818              	.LBB2877:
 16819              	.LBB2878:
 16820              	.LBB2879:
 744:src/xeq.c     **** }
 16821              		.loc 1 744 15 view .LVU4368
 16822 000e 0F4F     		ldr	r7, .L1186+4
 16823              	.LBE2879:
 16824              	.LBE2878:
 16825              	.LBE2877:
 16826              	.LBE2876:
2093:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16827              		.loc 1 2093 14 view .LVU4369
 16828 0010 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 16829              	.LVL1212:
2093:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16830              		.loc 1 2093 14 view .LVU4370
 16831 0012 03AC     		add	r4, sp, #12
 16832 0014 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 16833 0016 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 16834 0018 0FC4     		stmia	r4!, {r0, r1, r2, r3}
ARM GAS  /tmp/ccqED0AM.s 			page 468


 16835 001a 95E80700 		ldm	r5, {r0, r1, r2}
 16836              	.LBB2888:
 16837              	.LBB2884:
 16838              	.LBB2882:
 16839              	.LBB2880:
 744:src/xeq.c     **** }
 16840              		.loc 1 744 15 view .LVU4371
 16841 001e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 16842              	.LBE2880:
 16843              	.LBE2882:
 16844              	.LBE2884:
 16845              	.LBE2888:
2093:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16846              		.loc 1 2093 14 view .LVU4372
 16847 0020 03C4     		stmia	r4!, {r0, r1}
 16848              	.LBB2889:
 16849              	.LBB2885:
 748:src/xeq.c     **** 		lift();
 16850              		.loc 1 748 5 view .LVU4373
 16851 0022 5B06     		lsls	r3, r3, #25
 16852              	.LBE2885:
 16853              	.LBE2889:
2093:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16854              		.loc 1 2093 14 view .LVU4374
 16855 0024 2270     		strb	r2, [r4]
2101:src/xeq.c     **** 		setX_int_sgn(types[c], 0);
 16856              		.loc 1 2101 3 is_stmt 1 view .LVU4375
 16857              	.LBB2890:
 16858              	.LBI2876:
 747:src/xeq.c     **** 	if (get_lift())
 16859              		.loc 1 747 6 view .LVU4376
 16860              	.LBB2886:
 748:src/xeq.c     **** 		lift();
 16861              		.loc 1 748 2 view .LVU4377
 16862              	.LBB2883:
 16863              	.LBI2878:
 743:src/xeq.c     **** 	return State2.state_lift;
 16864              		.loc 1 743 12 view .LVU4378
 16865              	.LBB2881:
 744:src/xeq.c     **** }
 16866              		.loc 1 744 2 view .LVU4379
 16867              	.LBE2881:
 16868              	.LBE2883:
 748:src/xeq.c     **** 		lift();
 16869              		.loc 1 748 5 is_stmt 0 view .LVU4380
 16870 0026 0BD4     		bmi	.L1185
 16871              	.L1180:
 16872              	.LBE2886:
 16873              	.LBE2890:
2102:src/xeq.c     **** 	}
 16874              		.loc 1 2102 3 is_stmt 1 view .LVU4381
 16875              	.LVL1213:
 16876              	.LBB2891:
 16877              	.LBI2891:
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 16878              		.loc 1 1509 6 view .LVU4382
 16879              	.LBB2892:
ARM GAS  /tmp/ccqED0AM.s 			page 469


1510:src/xeq.c     **** }
 16880              		.loc 1 1510 2 view .LVU4383
 16881              	.LBE2892:
 16882              	.LBE2891:
2102:src/xeq.c     **** 	}
 16883              		.loc 1 2102 21 is_stmt 0 view .LVU4384
 16884 0028 0EAB     		add	r3, sp, #56
 16885 002a 9819     		adds	r0, r3, r6
 16886              	.LBB2894:
 16887              	.LBB2893:
1510:src/xeq.c     **** }
 16888              		.loc 1 1510 2 view .LVU4385
 16889 002c 0021     		movs	r1, #0
 16890 002e 10F82C2C 		ldrb	r2, [r0, #-44]	@ zero_extendqisi2
 16891 0032 0091     		str	r1, [sp]
 16892              	.LVL1214:
1510:src/xeq.c     **** }
 16893              		.loc 1 1510 2 view .LVU4386
 16894 0034 0023     		movs	r3, #0
 16895 0036 6420     		movs	r0, #100
 16896 0038 FFF7FEFF 		bl	set_reg_n_int_sgn
 16897              	.LVL1215:
 16898              	.L1178:
1510:src/xeq.c     **** }
 16899              		.loc 1 1510 2 view .LVU4387
 16900              	.LBE2893:
 16901              	.LBE2894:
 16902              	.LBE2875:
2104:src/xeq.c     **** 
 16903              		.loc 1 2104 1 view .LVU4388
 16904 003c 0FB0     		add	sp, sp, #60
 16905              		.cfi_remember_state
 16906              		.cfi_def_cfa_offset 20
 16907              		@ sp needed
 16908 003e F0BD     		pop	{r4, r5, r6, r7, pc}
 16909              	.LVL1216:
 16910              	.L1185:
 16911              		.cfi_restore_state
 16912              	.LBB2896:
 16913              	.LBB2895:
 16914              	.LBB2887:
 749:src/xeq.c     **** }
 16915              		.loc 1 749 3 is_stmt 1 view .LVU4389
 16916 0040 FFF7FEFF 		bl	lift
 16917              	.LVL1217:
 16918 0044 F0E7     		b	.L1180
 16919              	.L1187:
 16920 0046 00BF     		.align	2
 16921              	.L1186:
 16922 0048 00000000 		.word	.LANCHOR5
 16923 004c 00000000 		.word	StateWhileOn
 16924              	.LBE2887:
 16925              	.LBE2895:
 16926              	.LBE2896:
 16927              		.cfi_endproc
 16928              	.LFE142:
 16930              		.section	.text.cmdstostk,"ax",%progbits
ARM GAS  /tmp/ccqED0AM.s 			page 470


 16931              		.align	1
 16932              		.p2align 2,,3
 16933              		.global	cmdstostk
 16934              		.syntax unified
 16935              		.thumb
 16936              		.thumb_func
 16937              		.fpu fpv4-sp-d16
 16939              	cmdstostk:
 16940              	.LVL1218:
 16941              	.LFB148:
2147:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 16942              		.loc 1 2147 48 view -0
 16943              		.cfi_startproc
 16944              		@ args = 0, pretend = 0, frame = 0
 16945              		@ frame_needed = 0, uses_anonymous_args = 0
2148:src/xeq.c     **** 
 16946              		.loc 1 2148 2 view .LVU4391
2147:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 16947              		.loc 1 2147 48 is_stmt 0 view .LVU4392
 16948 0000 70B5     		push	{r4, r5, r6, lr}
 16949              		.cfi_def_cfa_offset 16
 16950              		.cfi_offset 4, -16
 16951              		.cfi_offset 5, -12
 16952              		.cfi_offset 6, -8
 16953              		.cfi_offset 14, -4
2147:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 16954              		.loc 1 2147 48 view .LVU4393
 16955 0002 0546     		mov	r5, r0
2148:src/xeq.c     **** 
 16956              		.loc 1 2148 13 view .LVU4394
 16957 0004 FFF7FEFF 		bl	check_stack_overlap
 16958              	.LVL1219:
2150:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 16959              		.loc 1 2150 2 is_stmt 1 view .LVU4395
2150:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 16960              		.loc 1 2150 12 view .LVU4396
2150:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 16961              		.loc 1 2150 2 is_stmt 0 view .LVU4397
 16962 0008 031E     		subs	r3, r0, #0
 16963 000a 0ADD     		ble	.L1188
 16964 000c 2C46     		mov	r4, r5
 16965 000e C4F16406 		rsb	r6, r4, #100
 16966 0012 1D44     		add	r5, r5, r3
 16967              	.LVL1220:
 16968              	.L1190:
2151:src/xeq.c     **** }
 16969              		.loc 1 2151 3 is_stmt 1 discriminator 3 view .LVU4398
 16970 0014 3119     		adds	r1, r6, r4
 16971 0016 2046     		mov	r0, r4
 16972 0018 0134     		adds	r4, r4, #1
 16973              	.LVL1221:
2151:src/xeq.c     **** }
 16974              		.loc 1 2151 3 is_stmt 0 discriminator 3 view .LVU4399
 16975 001a FFF7FEFF 		bl	copyreg_n
 16976              	.LVL1222:
2150:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 16977              		.loc 1 2150 17 is_stmt 1 discriminator 3 view .LVU4400
ARM GAS  /tmp/ccqED0AM.s 			page 471


2150:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 16978              		.loc 1 2150 12 discriminator 3 view .LVU4401
2150:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 16979              		.loc 1 2150 2 is_stmt 0 discriminator 3 view .LVU4402
 16980 001e AC42     		cmp	r4, r5
 16981 0020 F8D1     		bne	.L1190
 16982              	.L1188:
2152:src/xeq.c     **** 
 16983              		.loc 1 2152 1 view .LVU4403
 16984 0022 70BD     		pop	{r4, r5, r6, pc}
 16985              		.cfi_endproc
 16986              	.LFE148:
 16988              		.section	.text.cmdrclstk,"ax",%progbits
 16989              		.align	1
 16990              		.p2align 2,,3
 16991              		.global	cmdrclstk
 16992              		.syntax unified
 16993              		.thumb
 16994              		.thumb_func
 16995              		.fpu fpv4-sp-d16
 16997              	cmdrclstk:
 16998              	.LVL1223:
 16999              	.LFB149:
2154:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 17000              		.loc 1 2154 48 is_stmt 1 view -0
 17001              		.cfi_startproc
 17002              		@ args = 0, pretend = 0, frame = 0
 17003              		@ frame_needed = 0, uses_anonymous_args = 0
2155:src/xeq.c     **** 
 17004              		.loc 1 2155 2 view .LVU4405
2154:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 17005              		.loc 1 2154 48 is_stmt 0 view .LVU4406
 17006 0000 70B5     		push	{r4, r5, r6, lr}
 17007              		.cfi_def_cfa_offset 16
 17008              		.cfi_offset 4, -16
 17009              		.cfi_offset 5, -12
 17010              		.cfi_offset 6, -8
 17011              		.cfi_offset 14, -4
2154:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 17012              		.loc 1 2154 48 view .LVU4407
 17013 0002 0646     		mov	r6, r0
2155:src/xeq.c     **** 
 17014              		.loc 1 2155 13 view .LVU4408
 17015 0004 FFF7FEFF 		bl	check_stack_overlap
 17016              	.LVL1224:
2157:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17017              		.loc 1 2157 2 is_stmt 1 view .LVU4409
2157:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17018              		.loc 1 2157 12 view .LVU4410
2157:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17019              		.loc 1 2157 2 is_stmt 0 view .LVU4411
 17020 0008 051E     		subs	r5, r0, #0
 17021 000a 09DD     		ble	.L1193
 17022 000c 6435     		adds	r5, r5, #100
 17023 000e 643E     		subs	r6, r6, #100
 17024              	.LVL1225:
2157:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
ARM GAS  /tmp/ccqED0AM.s 			page 472


 17025              		.loc 1 2157 2 view .LVU4412
 17026 0010 6424     		movs	r4, #100
 17027              	.LVL1226:
 17028              	.L1195:
2158:src/xeq.c     **** }
 17029              		.loc 1 2158 3 is_stmt 1 discriminator 3 view .LVU4413
 17030 0012 3119     		adds	r1, r6, r4
 17031 0014 2046     		mov	r0, r4
 17032 0016 0134     		adds	r4, r4, #1
 17033              	.LVL1227:
2158:src/xeq.c     **** }
 17034              		.loc 1 2158 3 is_stmt 0 discriminator 3 view .LVU4414
 17035 0018 FFF7FEFF 		bl	copyreg_n
 17036              	.LVL1228:
2157:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17037              		.loc 1 2157 17 is_stmt 1 discriminator 3 view .LVU4415
2157:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17038              		.loc 1 2157 12 discriminator 3 view .LVU4416
2157:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17039              		.loc 1 2157 2 is_stmt 0 discriminator 3 view .LVU4417
 17040 001c AC42     		cmp	r4, r5
 17041 001e F8D1     		bne	.L1195
 17042              	.LVL1229:
 17043              	.L1193:
2159:src/xeq.c     **** 
 17044              		.loc 1 2159 1 view .LVU4418
 17045 0020 70BD     		pop	{r4, r5, r6, pc}
 17046              		.cfi_endproc
 17047              	.LFE149:
 17049 0022 00BF     		.section	.text.find_opcode_from,"ax",%progbits
 17050              		.align	1
 17051              		.p2align 2,,3
 17052              		.global	find_opcode_from
 17053              		.syntax unified
 17054              		.thumb
 17055              		.thumb_func
 17056              		.fpu fpv4-sp-d16
 17058              	find_opcode_from:
 17059              	.LVL1230:
 17060              	.LFB151:
2192:src/xeq.c     **** 	unsigned short int top;
 17061              		.loc 1 2192 81 is_stmt 1 view -0
 17062              		.cfi_startproc
 17063              		@ args = 0, pretend = 0, frame = 8
 17064              		@ frame_needed = 0, uses_anonymous_args = 0
2192:src/xeq.c     **** 	unsigned short int top;
 17065              		.loc 1 2192 81 is_stmt 0 view .LVU4420
 17066 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 17067              		.cfi_def_cfa_offset 24
 17068              		.cfi_offset 4, -24
 17069              		.cfi_offset 5, -20
 17070              		.cfi_offset 6, -16
 17071              		.cfi_offset 7, -12
 17072              		.cfi_offset 8, -8
 17073              		.cfi_offset 14, -4
2195:src/xeq.c     **** 	const int errp = flags & FIND_OP_ERROR;
 17074              		.loc 1 2195 12 view .LVU4421
ARM GAS  /tmp/ccqED0AM.s 			page 473


 17075 0004 02F00207 		and	r7, r2, #2
2192:src/xeq.c     **** 	unsigned short int top;
 17076              		.loc 1 2192 81 view .LVU4422
 17077 0008 82B0     		sub	sp, sp, #8
 17078              		.cfi_def_cfa_offset 32
2192:src/xeq.c     **** 	unsigned short int top;
 17079              		.loc 1 2192 81 view .LVU4423
 17080 000a 9046     		mov	r8, r2
 17081 000c 0E46     		mov	r6, r1
2198:src/xeq.c     **** 	count -= top;
 17082              		.loc 1 2198 14 view .LVU4424
 17083 000e 0DF10602 		add	r2, sp, #6
 17084              	.LVL1231:
2198:src/xeq.c     **** 	count -= top;
 17085              		.loc 1 2198 14 view .LVU4425
 17086 0012 3946     		mov	r1, r7
 17087              	.LVL1232:
2192:src/xeq.c     **** 	unsigned short int top;
 17088              		.loc 1 2192 81 view .LVU4426
 17089 0014 0446     		mov	r4, r0
2193:src/xeq.c     **** 	int count;
 17090              		.loc 1 2193 2 is_stmt 1 view .LVU4427
2194:src/xeq.c     **** 	const int endp = flags & FIND_OP_ENDS;
 17091              		.loc 1 2194 2 view .LVU4428
2195:src/xeq.c     **** 	const int errp = flags & FIND_OP_ERROR;
 17092              		.loc 1 2195 2 view .LVU4429
 17093              	.LVL1233:
2196:src/xeq.c     **** 
 17094              		.loc 1 2196 2 view .LVU4430
2198:src/xeq.c     **** 	count -= top;
 17095              		.loc 1 2198 2 view .LVU4431
2198:src/xeq.c     **** 	count -= top;
 17096              		.loc 1 2198 14 is_stmt 0 view .LVU4432
 17097 0016 FFF7FEFF 		bl	find_section_bounds
 17098              	.LVL1234:
2199:src/xeq.c     **** 	while (count--) {
 17099              		.loc 1 2199 8 view .LVU4433
 17100 001a BDF80650 		ldrh	r5, [sp, #6]
2198:src/xeq.c     **** 	count -= top;
 17101              		.loc 1 2198 8 view .LVU4434
 17102 001e 0130     		adds	r0, r0, #1
 17103              	.LVL1235:
2199:src/xeq.c     **** 	while (count--) {
 17104              		.loc 1 2199 2 is_stmt 1 view .LVU4435
2200:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17105              		.loc 1 2200 2 view .LVU4436
2200:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17106              		.loc 1 2200 8 view .LVU4437
2200:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17107              		.loc 1 2200 8 is_stmt 0 view .LVU4438
 17108 0020 451B     		subs	r5, r0, r5
 17109              	.LVL1236:
2200:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17110              		.loc 1 2200 8 view .LVU4439
 17111 0022 05D1     		bne	.L1201
 17112 0024 10E0     		b	.L1199
 17113              	.LVL1237:
ARM GAS  /tmp/ccqED0AM.s 			page 474


 17114              	.L1209:
2206:src/xeq.c     **** 	}
 17115              		.loc 1 2206 8 view .LVU4440
 17116 0026 FFF7FEFF 		bl	do_inc
 17117              	.LVL1238:
2200:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17118              		.loc 1 2200 8 view .LVU4441
 17119 002a 013D     		subs	r5, r5, #1
 17120              	.LVL1239:
2206:src/xeq.c     **** 	}
 17121              		.loc 1 2206 8 view .LVU4442
 17122 002c 0446     		mov	r4, r0
 17123              	.LVL1240:
2200:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17124              		.loc 1 2200 8 is_stmt 1 view .LVU4443
2200:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17125              		.loc 1 2200 8 is_stmt 0 view .LVU4444
 17126 002e 0BD0     		beq	.L1199
 17127              	.LVL1241:
 17128              	.L1201:
2204:src/xeq.c     **** 			return pc;
 17129              		.loc 1 2204 3 is_stmt 1 view .LVU4445
2204:src/xeq.c     **** 			return pc;
 17130              		.loc 1 2204 7 is_stmt 0 view .LVU4446
 17131 0030 2046     		mov	r0, r4
 17132 0032 FFF7FEFF 		bl	getprog
 17133              	.LVL1242:
2206:src/xeq.c     **** 	}
 17134              		.loc 1 2206 3 is_stmt 1 view .LVU4447
2204:src/xeq.c     **** 			return pc;
 17135              		.loc 1 2204 7 is_stmt 0 view .LVU4448
 17136 0036 0346     		mov	r3, r0
2204:src/xeq.c     **** 			return pc;
 17137              		.loc 1 2204 6 view .LVU4449
 17138 0038 B342     		cmp	r3, r6
2206:src/xeq.c     **** 	}
 17139              		.loc 1 2206 8 view .LVU4450
 17140 003a 3946     		mov	r1, r7
 17141 003c 2046     		mov	r0, r4
2204:src/xeq.c     **** 			return pc;
 17142              		.loc 1 2204 6 view .LVU4451
 17143 003e F2D1     		bne	.L1209
 17144              	.LVL1243:
 17145              	.L1198:
2211:src/xeq.c     **** 
 17146              		.loc 1 2211 1 view .LVU4452
 17147 0040 2046     		mov	r0, r4
 17148 0042 02B0     		add	sp, sp, #8
 17149              		.cfi_remember_state
 17150              		.cfi_def_cfa_offset 24
 17151              		@ sp needed
 17152 0044 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 17153              	.LVL1244:
 17154              	.L1199:
 17155              		.cfi_restore_state
2208:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 17156              		.loc 1 2208 2 is_stmt 1 view .LVU4453
ARM GAS  /tmp/ccqED0AM.s 			page 475


2208:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 17157              		.loc 1 2208 5 is_stmt 0 view .LVU4454
 17158 0048 18F00104 		ands	r4, r8, #1
 17159 004c F8D0     		beq	.L1198
 17160              	.LBB2903:
 17161              	.LBI2903:
2192:src/xeq.c     **** 	unsigned short int top;
 17162              		.loc 1 2192 14 is_stmt 1 view .LVU4455
 17163              	.LVL1245:
 17164              	.LBB2904:
2209:src/xeq.c     **** 	return 0;
 17165              		.loc 1 2209 3 view .LVU4456
 17166              	.LBB2905:
 17167              	.LBI2905:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 17168              		.loc 1 546 5 view .LVU4457
 17169              	.LBB2906:
 547:src/xeq.c     **** 		Error = e;
 17170              		.loc 1 547 2 view .LVU4458
 547:src/xeq.c     **** 		Error = e;
 17171              		.loc 1 547 12 is_stmt 0 view .LVU4459
 17172 004e 074B     		ldr	r3, .L1210
 547:src/xeq.c     **** 		Error = e;
 17173              		.loc 1 547 5 view .LVU4460
 17174 0050 1C68     		ldr	r4, [r3]
 17175 0052 2CB9     		cbnz	r4, .L1203
 17176              	.LVL1246:
 17177              	.LBB2907:
 17178              	.LBI2907:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 17179              		.loc 1 546 5 is_stmt 1 view .LVU4461
 17180              	.LBB2908:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 17181              		.loc 1 548 3 view .LVU4462
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 17182              		.loc 1 548 9 is_stmt 0 view .LVU4463
 17183 0054 0622     		movs	r2, #6
 17184              	.LBE2908:
 17185              	.LBE2907:
 17186              	.LBE2906:
 17187              	.LBE2905:
 17188              	.LBE2904:
 17189              	.LBE2903:
2211:src/xeq.c     **** 
 17190              		.loc 1 2211 1 view .LVU4464
 17191 0056 2046     		mov	r0, r4
 17192              	.LBB2914:
 17193              	.LBB2913:
 17194              	.LBB2912:
 17195              	.LBB2911:
 17196              	.LBB2910:
 17197              	.LBB2909:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 17198              		.loc 1 548 9 view .LVU4465
 17199 0058 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 17200              		.loc 1 549 3 is_stmt 1 view .LVU4466
ARM GAS  /tmp/ccqED0AM.s 			page 476


 17201              	.LBE2909:
 17202              	.LBE2910:
 17203              	.LBE2911:
 17204              	.LBE2912:
 17205              	.LBE2913:
 17206              	.LBE2914:
2211:src/xeq.c     **** 
 17207              		.loc 1 2211 1 is_stmt 0 view .LVU4467
 17208 005a 02B0     		add	sp, sp, #8
 17209              		.cfi_remember_state
 17210              		.cfi_def_cfa_offset 24
 17211              		@ sp needed
 17212 005c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 17213              	.LVL1247:
 17214              	.L1203:
 17215              		.cfi_restore_state
2210:src/xeq.c     **** }
 17216              		.loc 1 2210 9 view .LVU4468
 17217 0060 0024     		movs	r4, #0
 17218              	.LVL1248:
2211:src/xeq.c     **** 
 17219              		.loc 1 2211 1 view .LVU4469
 17220 0062 2046     		mov	r0, r4
 17221 0064 02B0     		add	sp, sp, #8
 17222              		.cfi_def_cfa_offset 24
 17223              		@ sp needed
 17224 0066 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 17225              	.LVL1249:
 17226              	.L1211:
2211:src/xeq.c     **** 
 17227              		.loc 1 2211 1 view .LVU4470
 17228 006a 00BF     		.align	2
 17229              	.L1210:
 17230 006c 00000000 		.word	Error
 17231              		.cfi_endproc
 17232              	.LFE151:
 17234              		.section	.text.find_label_from,"ax",%progbits
 17235              		.align	1
 17236              		.p2align 2,,3
 17237              		.global	find_label_from
 17238              		.syntax unified
 17239              		.thumb
 17240              		.thumb_func
 17241              		.fpu fpv4-sp-d16
 17243              	find_label_from:
 17244              	.LVL1250:
 17245              	.LFB152:
2214:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 17246              		.loc 1 2214 76 is_stmt 1 view -0
 17247              		.cfi_startproc
 17248              		@ args = 0, pretend = 0, frame = 0
 17249              		@ frame_needed = 0, uses_anonymous_args = 0
 17250              		@ link register save eliminated.
2215:src/xeq.c     **** }
 17251              		.loc 1 2215 2 view .LVU4472
2215:src/xeq.c     **** }
 17252              		.loc 1 2215 9 is_stmt 0 view .LVU4473
ARM GAS  /tmp/ccqED0AM.s 			page 477


 17253 0000 41F4C441 		orr	r1, r1, #25088
 17254              	.LVL1251:
2215:src/xeq.c     **** }
 17255              		.loc 1 2215 9 view .LVU4474
 17256 0004 FFF7FEBF 		b	find_opcode_from
 17257              	.LVL1252:
2215:src/xeq.c     **** }
 17258              		.loc 1 2215 9 view .LVU4475
 17259              		.cfi_endproc
 17260              	.LFE152:
 17262              		.section	.text.op_rtn,"ax",%progbits
 17263              		.align	1
 17264              		.p2align 2,,3
 17265              		.global	op_rtn
 17266              		.syntax unified
 17267              		.thumb
 17268              		.thumb_func
 17269              		.fpu fpv4-sp-d16
 17271              	op_rtn:
 17272              	.LVL1253:
 17273              	.LFB155:
2273:src/xeq.c     **** 	if (! Running && ! XromRunning) {
 17274              		.loc 1 2273 28 is_stmt 1 view -0
 17275              		.cfi_startproc
 17276              		@ args = 0, pretend = 0, frame = 0
 17277              		@ frame_needed = 0, uses_anonymous_args = 0
 17278              		@ link register save eliminated.
2274:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 17279              		.loc 1 2274 2 view .LVU4477
2274:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 17280              		.loc 1 2274 6 is_stmt 0 view .LVU4478
 17281 0000 074A     		ldr	r2, .L1216
2274:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 17282              		.loc 1 2274 19 view .LVU4479
 17283 0002 084B     		ldr	r3, .L1216+4
2274:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 17284              		.loc 1 2274 16 view .LVU4480
 17285 0004 1268     		ldr	r2, [r2]
 17286 0006 1B68     		ldr	r3, [r3]
 17287 0008 1343     		orrs	r3, r2, r3
 17288 000a 06D0     		beq	.L1215
2279:src/xeq.c     **** }
 17289              		.loc 1 2279 3 is_stmt 1 view .LVU4481
 17290 000c A0F13900 		sub	r0, #57
 17291              	.LVL1254:
2279:src/xeq.c     **** }
 17292              		.loc 1 2279 3 is_stmt 0 view .LVU4482
 17293 0010 B0FA80F0 		clz	r0, r0
 17294 0014 4009     		lsrs	r0, r0, #5
 17295 0016 FFF7FEBF 		b	do_rtn
 17296              	.LVL1255:
 17297              	.L1215:
2276:src/xeq.c     **** 	}
 17298              		.loc 1 2276 3 is_stmt 1 view .LVU4483
 17299 001a FFF7FEBF 		b	clrretstk_pc
 17300              	.LVL1256:
 17301              	.L1217:
ARM GAS  /tmp/ccqED0AM.s 			page 478


2276:src/xeq.c     **** 	}
 17302              		.loc 1 2276 3 is_stmt 0 view .LVU4484
 17303 001e 00BF     		.align	2
 17304              	.L1216:
 17305 0020 00000000 		.word	Running
 17306 0024 00000000 		.word	XromRunning
 17307              		.cfi_endproc
 17308              	.LFE155:
 17310              		.section	.text.op_popusr,"ax",%progbits
 17311              		.align	1
 17312              		.p2align 2,,3
 17313              		.global	op_popusr
 17314              		.syntax unified
 17315              		.thumb
 17316              		.thumb_func
 17317              		.fpu fpv4-sp-d16
 17319              	op_popusr:
 17320              	.LVL1257:
 17321              	.LFB159:
2320:src/xeq.c     **** 	UserLocalRegs = RetStk[RetStkPtr++]; // Previous local registers
 17322              		.loc 1 2320 31 is_stmt 1 view -0
 17323              		.cfi_startproc
 17324              		@ args = 0, pretend = 0, frame = 0
 17325              		@ frame_needed = 0, uses_anonymous_args = 0
 17326              		@ link register save eliminated.
2321:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17327              		.loc 1 2321 2 view .LVU4486
2321:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17328              		.loc 1 2321 25 is_stmt 0 view .LVU4487
 17329 0000 164B     		ldr	r3, .L1220
2321:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17330              		.loc 1 2321 24 view .LVU4488
 17331 0002 174A     		ldr	r2, .L1220+4
2321:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17332              		.loc 1 2321 25 view .LVU4489
 17333 0004 1B68     		ldr	r3, [r3]
2321:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17334              		.loc 1 2321 24 view .LVU4490
 17335 0006 1268     		ldr	r2, [r2]
2320:src/xeq.c     **** 	UserLocalRegs = RetStk[RetStkPtr++]; // Previous local registers
 17336              		.loc 1 2320 31 view .LVU4491
 17337 0008 F0B4     		push	{r4, r5, r6, r7}
 17338              		.cfi_def_cfa_offset 16
 17339              		.cfi_offset 4, -16
 17340              		.cfi_offset 5, -12
 17341              		.cfi_offset 6, -8
 17342              		.cfi_offset 7, -4
2321:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17343              		.loc 1 2321 25 view .LVU4492
 17344 000a B3F9E257 		ldrsh	r5, [r3, #2018]
2321:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17345              		.loc 1 2321 16 view .LVU4493
 17346 000e 154F     		ldr	r7, .L1220+8
2323:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 17347              		.loc 1 2323 13 view .LVU4494
 17348 0010 154E     		ldr	r6, .L1220+12
2321:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
ARM GAS  /tmp/ccqED0AM.s 			page 479


 17349              		.loc 1 2321 34 view .LVU4495
 17350 0012 A8B2     		uxth	r0, r5
 17351              	.LVL1258:
2321:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17352              		.loc 1 2321 34 view .LVU4496
 17353 0014 411C     		adds	r1, r0, #1
 17354 0016 09B2     		sxth	r1, r1
2322:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17355              		.loc 1 2322 34 view .LVU4497
 17356 0018 841C     		adds	r4, r0, #2
2321:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17357              		.loc 1 2321 34 view .LVU4498
 17358 001a A3F8E217 		strh	r1, [r3, #2018]	@ movhi
2322:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17359              		.loc 1 2322 34 view .LVU4499
 17360 001e 24B2     		sxth	r4, r4
2321:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17361              		.loc 1 2321 24 view .LVU4500
 17362 0020 32F81550 		ldrh	r5, [r2, r5, lsl #1]
2322:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17363              		.loc 1 2322 34 view .LVU4501
 17364 0024 A3F8E247 		strh	r4, [r3, #2018]	@ movhi
2322:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17365              		.loc 1 2322 24 view .LVU4502
 17366 0028 32F81110 		ldrh	r1, [r2, r1, lsl #1]
2321:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17367              		.loc 1 2321 24 view .LVU4503
 17368 002c 3D60     		str	r5, [r7]
2322:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17369              		.loc 1 2322 2 is_stmt 1 view .LVU4504
2322:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17370              		.loc 1 2322 12 is_stmt 0 view .LVU4505
 17371 002e B3F8DE57 		ldrh	r5, [r3, #2014]
2322:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17372              		.loc 1 2322 24 view .LVU4506
 17373 0032 41F30A01 		sbfx	r1, r1, #0, #11
2322:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17374              		.loc 1 2322 12 view .LVU4507
 17375 0036 61F34F15 		bfi	r5, r1, #5, #11
2323:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 17376              		.loc 1 2323 34 view .LVU4508
 17377 003a 0330     		adds	r0, r0, #3
2322:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17378              		.loc 1 2322 12 view .LVU4509
 17379 003c A3F8DE57 		strh	r5, [r3, #2014]	@ movhi
2323:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 17380              		.loc 1 2323 2 is_stmt 1 view .LVU4510
2323:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 17381              		.loc 1 2323 34 is_stmt 0 view .LVU4511
 17382 0040 A3F8E207 		strh	r0, [r3, #2018]	@ movhi
2324:src/xeq.c     **** }
 17383              		.loc 1 2324 20 view .LVU4512
 17384 0044 32F81130 		ldrh	r3, [r2, r1, lsl #1]
2323:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 17385              		.loc 1 2323 24 view .LVU4513
 17386 0048 32F81400 		ldrh	r0, [r2, r4, lsl #1]
 17387 004c 3060     		str	r0, [r6]
ARM GAS  /tmp/ccqED0AM.s 			page 480


2324:src/xeq.c     **** }
 17388              		.loc 1 2324 2 is_stmt 1 view .LVU4514
2324:src/xeq.c     **** }
 17389              		.loc 1 2324 20 is_stmt 0 view .LVU4515
 17390 004e 23F40053 		bic	r3, r3, #8192
2325:src/xeq.c     **** 
 17391              		.loc 1 2325 1 view .LVU4516
 17392 0052 F0BC     		pop	{r4, r5, r6, r7}
 17393              		.cfi_restore 7
 17394              		.cfi_restore 6
 17395              		.cfi_restore 5
 17396              		.cfi_restore 4
 17397              		.cfi_def_cfa_offset 0
2324:src/xeq.c     **** }
 17398              		.loc 1 2324 20 view .LVU4517
 17399 0054 22F81130 		strh	r3, [r2, r1, lsl #1]	@ movhi
2325:src/xeq.c     **** 
 17400              		.loc 1 2325 1 view .LVU4518
 17401 0058 7047     		bx	lr
 17402              	.L1221:
 17403 005a 00BF     		.align	2
 17404              	.L1220:
 17405 005c 00000000 		.word	main_ram
 17406 0060 00000000 		.word	RetStk
 17407 0064 00000000 		.word	UserLocalRegs
 17408 0068 00000000 		.word	XromUserPc
 17409              		.cfi_endproc
 17410              	.LFE159:
 17412              		.section	.text.findmultilbl,"ax",%progbits
 17413              		.align	1
 17414              		.p2align 2,,3
 17415              		.global	findmultilbl
 17416              		.syntax unified
 17417              		.thumb
 17418              		.thumb_func
 17419              		.fpu fpv4-sp-d16
 17421              	findmultilbl:
 17422              	.LVL1259:
 17423              	.LFB163:
2353:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 17424              		.loc 1 2353 54 is_stmt 1 view -0
 17425              		.cfi_startproc
 17426              		@ args = 0, pretend = 0, frame = 0
 17427              		@ frame_needed = 0, uses_anonymous_args = 0
2354:src/xeq.c     **** 	unsigned int lbl;
 17428              		.loc 1 2354 2 view .LVU4520
2353:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 17429              		.loc 1 2353 54 is_stmt 0 view .LVU4521
 17430 0000 38B5     		push	{r3, r4, r5, lr}
 17431              		.cfi_def_cfa_offset 16
 17432              		.cfi_offset 3, -16
 17433              		.cfi_offset 4, -12
 17434              		.cfi_offset 5, -8
 17435              		.cfi_offset 14, -4
2357:src/xeq.c     **** 	if (lbl == 0)
 17436              		.loc 1 2357 8 view .LVU4522
 17437 0002 0022     		movs	r2, #0
ARM GAS  /tmp/ccqED0AM.s 			page 481


2354:src/xeq.c     **** 	unsigned int lbl;
 17438              		.loc 1 2354 15 view .LVU4523
 17439 0004 20F47064 		bic	r4, r0, #3840
 17440              	.LVL1260:
2355:src/xeq.c     **** 
 17441              		.loc 1 2355 2 is_stmt 1 view .LVU4524
2357:src/xeq.c     **** 	if (lbl == 0)
 17442              		.loc 1 2357 2 view .LVU4525
2353:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 17443              		.loc 1 2353 54 is_stmt 0 view .LVU4526
 17444 0008 0D46     		mov	r5, r1
2357:src/xeq.c     **** 	if (lbl == 0)
 17445              		.loc 1 2357 8 view .LVU4527
 17446 000a 1046     		mov	r0, r2
 17447              	.LVL1261:
2357:src/xeq.c     **** 	if (lbl == 0)
 17448              		.loc 1 2357 8 view .LVU4528
 17449 000c 2146     		mov	r1, r4
 17450              	.LVL1262:
2357:src/xeq.c     **** 	if (lbl == 0)
 17451              		.loc 1 2357 8 view .LVU4529
 17452 000e FFF7FEFF 		bl	find_opcode_from
 17453              	.LVL1263:
2358:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_LIBRARY), dest, 0);	// Library
 17454              		.loc 1 2358 2 is_stmt 1 view .LVU4530
2358:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_LIBRARY), dest, 0);	// Library
 17455              		.loc 1 2358 5 is_stmt 0 view .LVU4531
 17456 0012 00B1     		cbz	r0, .L1228
 17457              	.L1222:
2365:src/xeq.c     **** 
 17458              		.loc 1 2365 1 view .LVU4532
 17459 0014 38BD     		pop	{r3, r4, r5, pc}
 17460              	.LVL1264:
 17461              	.L1228:
2359:src/xeq.c     **** 	if (lbl == 0)
 17462              		.loc 1 2359 3 is_stmt 1 view .LVU4533
2359:src/xeq.c     **** 	if (lbl == 0)
 17463              		.loc 1 2359 9 is_stmt 0 view .LVU4534
 17464 0016 0246     		mov	r2, r0
 17465 0018 2146     		mov	r1, r4
 17466 001a 4FF48040 		mov	r0, #16384
 17467              	.LVL1265:
2359:src/xeq.c     **** 	if (lbl == 0)
 17468              		.loc 1 2359 9 view .LVU4535
 17469 001e FFF7FEFF 		bl	find_opcode_from
 17470              	.LVL1266:
2360:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_BACKUP), dest, 0);	// Backup
 17471              		.loc 1 2360 2 is_stmt 1 view .LVU4536
2360:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_BACKUP), dest, 0);	// Backup
 17472              		.loc 1 2360 5 is_stmt 0 view .LVU4537
 17473 0022 0028     		cmp	r0, #0
 17474 0024 F6D1     		bne	.L1222
2361:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
 17475              		.loc 1 2361 3 is_stmt 1 view .LVU4538
2361:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
 17476              		.loc 1 2361 9 is_stmt 0 view .LVU4539
 17477 0026 0246     		mov	r2, r0
ARM GAS  /tmp/ccqED0AM.s 			page 482


 17478 0028 2146     		mov	r1, r4
 17479 002a 4FF40040 		mov	r0, #32768
 17480              	.LVL1267:
2361:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
 17481              		.loc 1 2361 9 view .LVU4540
 17482 002e FFF7FEFF 		bl	find_opcode_from
 17483              	.LVL1268:
2362:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 17484              		.loc 1 2362 2 is_stmt 1 view .LVU4541
2362:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 17485              		.loc 1 2362 5 is_stmt 0 view .LVU4542
 17486 0032 0028     		cmp	r0, #0
 17487 0034 EED1     		bne	.L1222
2362:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 17488              		.loc 1 2362 15 discriminator 1 view .LVU4543
 17489 0036 EB07     		lsls	r3, r5, #31
 17490 0038 ECD5     		bpl	.L1222
 17491              	.LBB2921:
 17492              	.LBI2921:
2353:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 17493              		.loc 1 2353 14 is_stmt 1 view .LVU4544
 17494              	.LVL1269:
 17495              	.LBB2922:
2363:src/xeq.c     **** 	return lbl;
 17496              		.loc 1 2363 3 view .LVU4545
 17497              	.LBB2923:
 17498              	.LBI2923:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 17499              		.loc 1 546 5 view .LVU4546
 17500              	.LBB2924:
 547:src/xeq.c     **** 		Error = e;
 17501              		.loc 1 547 2 view .LVU4547
 547:src/xeq.c     **** 		Error = e;
 17502              		.loc 1 547 12 is_stmt 0 view .LVU4548
 17503 003a 034B     		ldr	r3, .L1229
 547:src/xeq.c     **** 		Error = e;
 17504              		.loc 1 547 5 view .LVU4549
 17505 003c 1A68     		ldr	r2, [r3]
 17506 003e 002A     		cmp	r2, #0
 17507 0040 E8D1     		bne	.L1222
 17508              	.LVL1270:
 17509              	.LBB2925:
 17510              	.LBI2925:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 17511              		.loc 1 546 5 is_stmt 1 view .LVU4550
 17512              	.LBB2926:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 17513              		.loc 1 548 3 view .LVU4551
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 17514              		.loc 1 548 9 is_stmt 0 view .LVU4552
 17515 0042 0622     		movs	r2, #6
 17516 0044 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 17517              		.loc 1 549 3 is_stmt 1 view .LVU4553
 17518              	.LVL1271:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 17519              		.loc 1 549 3 is_stmt 0 view .LVU4554
ARM GAS  /tmp/ccqED0AM.s 			page 483


 17520              	.LBE2926:
 17521              	.LBE2925:
 17522              	.LBE2924:
 17523              	.LBE2923:
 17524              	.LBE2922:
 17525              	.LBE2921:
2364:src/xeq.c     **** }
 17526              		.loc 1 2364 2 is_stmt 1 view .LVU4555
2365:src/xeq.c     **** 
 17527              		.loc 1 2365 1 is_stmt 0 view .LVU4556
 17528 0046 38BD     		pop	{r3, r4, r5, pc}
 17529              	.LVL1272:
 17530              	.L1230:
2365:src/xeq.c     **** 
 17531              		.loc 1 2365 1 view .LVU4557
 17532              		.align	2
 17533              	.L1229:
 17534 0048 00000000 		.word	Error
 17535              		.cfi_endproc
 17536              	.LFE163:
 17538              		.section	.text.multiumenu,"ax",%progbits
 17539              		.align	1
 17540              		.p2align 2,,3
 17541              		.global	multiumenu
 17542              		.syntax unified
 17543              		.thumb
 17544              		.thumb_func
 17545              		.fpu fpv4-sp-d16
 17547              	multiumenu:
 17548              	.LVL1273:
 17549              	.LFB166:
2386:src/xeq.c     ****   opcode op = (o & 0xFFFFF0FF) + ((DBL_LBL) << DBL_SHIFT); // change opcode to LBL
 17550              		.loc 1 2386 53 is_stmt 1 view -0
 17551              		.cfi_startproc
 17552              		@ args = 0, pretend = 0, frame = 0
 17553              		@ frame_needed = 0, uses_anonymous_args = 0
2387:src/xeq.c     ****   build_user_menu_from_program(op);
 17554              		.loc 1 2387 3 view .LVU4559
2388:src/xeq.c     ****   set_menu (M_User);
 17555              		.loc 1 2388 3 view .LVU4560
2386:src/xeq.c     ****   opcode op = (o & 0xFFFFF0FF) + ((DBL_LBL) << DBL_SHIFT); // change opcode to LBL
 17556              		.loc 1 2386 53 is_stmt 0 view .LVU4561
 17557 0000 08B5     		push	{r3, lr}
 17558              		.cfi_def_cfa_offset 8
 17559              		.cfi_offset 3, -8
 17560              		.cfi_offset 14, -4
2388:src/xeq.c     ****   set_menu (M_User);
 17561              		.loc 1 2388 3 view .LVU4562
 17562 0002 20F47060 		bic	r0, r0, #3840
 17563              	.LVL1274:
2388:src/xeq.c     ****   set_menu (M_User);
 17564              		.loc 1 2388 3 view .LVU4563
 17565 0006 FFF7FEFF 		bl	build_user_menu_from_program
 17566              	.LVL1275:
2389:src/xeq.c     ****   display_current_menu ();
 17567              		.loc 1 2389 3 is_stmt 1 view .LVU4564
 17568 000a 6320     		movs	r0, #99
ARM GAS  /tmp/ccqED0AM.s 			page 484


 17569 000c FFF7FEFF 		bl	set_menu
 17570              	.LVL1276:
2390:src/xeq.c     **** }
 17571              		.loc 1 2390 3 view .LVU4565
2391:src/xeq.c     **** 
 17572              		.loc 1 2391 1 is_stmt 0 view .LVU4566
 17573 0010 BDE80840 		pop	{r3, lr}
 17574              		.cfi_restore 14
 17575              		.cfi_restore 3
 17576              		.cfi_def_cfa_offset 0
2390:src/xeq.c     **** }
 17577              		.loc 1 2390 3 view .LVU4567
 17578 0014 FFF7FEBF 		b	display_current_menu
 17579              	.LVL1277:
 17580              		.cfi_endproc
 17581              	.LFE166:
 17583              		.section	.text.get_dispmode_digs,"ax",%progbits
 17584              		.align	1
 17585              		.p2align 2,,3
 17586              		.global	get_dispmode_digs
 17587              		.syntax unified
 17588              		.thumb
 17589              		.thumb_func
 17590              		.fpu fpv4-sp-d16
 17592              	get_dispmode_digs:
 17593              	.LVL1278:
 17594              	.LFB171:
2424:src/xeq.c     **** 	int dispmode = UState.dispmode;
 17595              		.loc 1 2424 1 is_stmt 1 view -0
 17596              		.cfi_startproc
 17597              		@ args = 0, pretend = 0, frame = 0
 17598              		@ frame_needed = 0, uses_anonymous_args = 0
 17599              		@ link register save eliminated.
2425:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 17600              		.loc 1 2425 2 view .LVU4569
2425:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 17601              		.loc 1 2425 17 is_stmt 0 view .LVU4570
 17602 0000 0A4B     		ldr	r3, .L1236
 17603 0002 1A68     		ldr	r2, [r3]
2426:src/xeq.c     **** 
 17604              		.loc 1 2426 23 view .LVU4571
 17605 0004 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
2425:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 17606              		.loc 1 2425 23 view .LVU4572
 17607 0008 92F8E627 		ldrb	r2, [r2, #2022]	@ zero_extendqisi2
2426:src/xeq.c     **** 
 17608              		.loc 1 2426 6 view .LVU4573
 17609 000c 03F00F03 		and	r3, r3, #15
2428:src/xeq.c     **** 		dispdigs -= 12;
 17610              		.loc 1 2428 5 view .LVU4574
 17611 0010 0B2B     		cmp	r3, #11
2424:src/xeq.c     **** 	int dispmode = UState.dispmode;
 17612              		.loc 1 2424 1 view .LVU4575
 17613 0012 0146     		mov	r1, r0
2425:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 17614              		.loc 1 2425 6 view .LVU4576
 17615 0014 4FEA9210 		lsr	r0, r2, #6
ARM GAS  /tmp/ccqED0AM.s 			page 485


 17616              	.LVL1279:
2426:src/xeq.c     **** 
 17617              		.loc 1 2426 2 is_stmt 1 view .LVU4577
2428:src/xeq.c     **** 		dispdigs -= 12;
 17618              		.loc 1 2428 2 view .LVU4578
2428:src/xeq.c     **** 		dispdigs -= 12;
 17619              		.loc 1 2428 5 is_stmt 0 view .LVU4579
 17620 0018 06DD     		ble	.L1234
2429:src/xeq.c     **** 		dispmode += 4;
 17621              		.loc 1 2429 3 is_stmt 1 view .LVU4580
 17622              	.LVL1280:
2430:src/xeq.c     **** 		if (dispmode >= 6) {
 17623              		.loc 1 2430 3 view .LVU4581
2430:src/xeq.c     **** 		if (dispmode >= 6) {
 17624              		.loc 1 2430 12 is_stmt 0 view .LVU4582
 17625 001a 021D     		adds	r2, r0, #4
 17626              	.LVL1281:
2431:src/xeq.c     **** 			dispmode -= 2;
 17627              		.loc 1 2431 3 is_stmt 1 view .LVU4583
2431:src/xeq.c     **** 			dispmode -= 2;
 17628              		.loc 1 2431 6 is_stmt 0 view .LVU4584
 17629 001c 052A     		cmp	r2, #5
2429:src/xeq.c     **** 		dispmode += 4;
 17630              		.loc 1 2429 12 view .LVU4585
 17631 001e D9BF     		ittee	le
 17632 0020 0C3B     		suble	r3, r3, #12
 17633              	.LVL1282:
2429:src/xeq.c     **** 		dispmode += 4;
 17634              		.loc 1 2429 12 view .LVU4586
 17635 0022 1046     		movle	r0, r2
2432:src/xeq.c     **** 			dispdigs += 4;
 17636              		.loc 1 2432 4 is_stmt 1 view .LVU4587
2432:src/xeq.c     **** 			dispdigs += 4;
 17637              		.loc 1 2432 13 is_stmt 0 view .LVU4588
 17638 0024 0230     		addgt	r0, r0, #2
 17639              	.LVL1283:
2433:src/xeq.c     **** 		}
 17640              		.loc 1 2433 4 is_stmt 1 view .LVU4589
2433:src/xeq.c     **** 		}
 17641              		.loc 1 2433 13 is_stmt 0 view .LVU4590
 17642 0026 083B     		subgt	r3, r3, #8
 17643              	.LVL1284:
 17644              	.L1234:
2436:src/xeq.c     **** 	return dispmode;
 17645              		.loc 1 2436 2 is_stmt 1 view .LVU4591
2436:src/xeq.c     **** 	return dispmode;
 17646              		.loc 1 2436 9 is_stmt 0 view .LVU4592
 17647 0028 0B60     		str	r3, [r1]
2437:src/xeq.c     **** }
 17648              		.loc 1 2437 2 is_stmt 1 view .LVU4593
2438:src/xeq.c     **** 
 17649              		.loc 1 2438 1 is_stmt 0 view .LVU4594
 17650 002a 7047     		bx	lr
 17651              	.L1237:
 17652              		.align	2
 17653              	.L1236:
 17654 002c 00000000 		.word	main_ram
ARM GAS  /tmp/ccqED0AM.s 			page 486


 17655              		.cfi_endproc
 17656              	.LFE171:
 17658              		.section	.text.set_dispmode_digs,"ax",%progbits
 17659              		.align	1
 17660              		.p2align 2,,3
 17661              		.global	set_dispmode_digs
 17662              		.syntax unified
 17663              		.thumb
 17664              		.thumb_func
 17665              		.fpu fpv4-sp-d16
 17667              	set_dispmode_digs:
 17668              	.LVL1285:
 17669              	.LFB172:
2441:src/xeq.c     **** 	if (dispmode >= 4) {
 17670              		.loc 1 2441 1 is_stmt 1 view -0
 17671              		.cfi_startproc
 17672              		@ args = 0, pretend = 0, frame = 0
 17673              		@ frame_needed = 0, uses_anonymous_args = 0
 17674              		@ link register save eliminated.
2442:src/xeq.c     **** 		dispmode -= 4;
 17675              		.loc 1 2442 2 view .LVU4596
2442:src/xeq.c     **** 		dispmode -= 4;
 17676              		.loc 1 2442 5 is_stmt 0 view .LVU4597
 17677 0000 0328     		cmp	r0, #3
 17678 0002 07DD     		ble	.L1239
2443:src/xeq.c     **** 		dispdigs += 12;
 17679              		.loc 1 2443 3 is_stmt 1 view .LVU4598
 17680              	.LVL1286:
2444:src/xeq.c     **** 		if (dispdigs >= 16) {
 17681              		.loc 1 2444 3 view .LVU4599
2444:src/xeq.c     **** 		if (dispdigs >= 16) {
 17682              		.loc 1 2444 12 is_stmt 0 view .LVU4600
 17683 0004 01F10C03 		add	r3, r1, #12
 17684              	.LVL1287:
2445:src/xeq.c     **** 			dispdigs -= 4;
 17685              		.loc 1 2445 3 is_stmt 1 view .LVU4601
2445:src/xeq.c     **** 			dispdigs -= 4;
 17686              		.loc 1 2445 6 is_stmt 0 view .LVU4602
 17687 0008 0F2B     		cmp	r3, #15
2443:src/xeq.c     **** 		dispdigs += 12;
 17688              		.loc 1 2443 12 view .LVU4603
 17689 000a D9BF     		ittee	le
 17690 000c 0438     		suble	r0, r0, #4
 17691              	.LVL1288:
2443:src/xeq.c     **** 		dispdigs += 12;
 17692              		.loc 1 2443 12 view .LVU4604
 17693 000e 1946     		movle	r1, r3
2446:src/xeq.c     **** 			dispmode += 2;
 17694              		.loc 1 2446 4 is_stmt 1 view .LVU4605
2446:src/xeq.c     **** 			dispmode += 2;
 17695              		.loc 1 2446 13 is_stmt 0 view .LVU4606
 17696 0010 0831     		addgt	r1, r1, #8
 17697              	.LVL1289:
2447:src/xeq.c     **** 		}
 17698              		.loc 1 2447 4 is_stmt 1 view .LVU4607
2447:src/xeq.c     **** 		}
 17699              		.loc 1 2447 13 is_stmt 0 view .LVU4608
ARM GAS  /tmp/ccqED0AM.s 			page 487


 17700 0012 0238     		subgt	r0, r0, #2
 17701              	.LVL1290:
 17702              	.L1239:
2450:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 17703              		.loc 1 2450 2 is_stmt 1 view .LVU4609
 17704 0014 084B     		ldr	r3, .L1241
 17705 0016 1A68     		ldr	r2, [r3]
2451:src/xeq.c     **** }
 17706              		.loc 1 2451 2 view .LVU4610
2450:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 17707              		.loc 1 2450 18 is_stmt 0 view .LVU4611
 17708 0018 00F00300 		and	r0, r0, #3
 17709              	.LVL1291:
2450:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 17710              		.loc 1 2450 18 view .LVU4612
 17711 001c B2F8E637 		ldrh	r3, [r2, #2022]
 17712 0020 8001     		lsls	r0, r0, #6
 17713 0022 01F00F01 		and	r1, r1, #15
 17714              	.LVL1292:
2450:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 17715              		.loc 1 2450 18 view .LVU4613
 17716 0026 40EA0120 		orr	r0, r0, r1, lsl #8
 17717 002a 23F47C63 		bic	r3, r3, #4032
 17718 002e 1843     		orrs	r0, r0, r3
 17719 0030 A2F8E607 		strh	r0, [r2, #2022]	@ movhi
2452:src/xeq.c     **** #endif
 17720              		.loc 1 2452 1 view .LVU4614
 17721 0034 7047     		bx	lr
 17722              	.L1242:
 17723 0036 00BF     		.align	2
 17724              	.L1241:
 17725 0038 00000000 		.word	main_ram
 17726              		.cfi_endproc
 17727              	.LFE172:
 17729              		.section	.text.convC2F,"ax",%progbits
 17730              		.align	1
 17731              		.p2align 2,,3
 17732              		.global	convC2F
 17733              		.syntax unified
 17734              		.thumb
 17735              		.thumb_func
 17736              		.fpu fpv4-sp-d16
 17738              	convC2F:
 17739              	.LVL1293:
 17740              	.LFB174:
2504:src/xeq.c     **** 	decNumber s;
 17741              		.loc 1 2504 54 is_stmt 1 view -0
 17742              		.cfi_startproc
 17743              		@ args = 0, pretend = 0, frame = 40
 17744              		@ frame_needed = 0, uses_anonymous_args = 0
2505:src/xeq.c     **** 
 17745              		.loc 1 2505 2 view .LVU4616
2507:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
 17746              		.loc 1 2507 2 view .LVU4617
2504:src/xeq.c     **** 	decNumber s;
 17747              		.loc 1 2504 54 is_stmt 0 view .LVU4618
 17748 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/ccqED0AM.s 			page 488


 17749              		.cfi_def_cfa_offset 8
 17750              		.cfi_offset 4, -8
 17751              		.cfi_offset 14, -4
 17752 0002 8AB0     		sub	sp, sp, #40
 17753              		.cfi_def_cfa_offset 48
2504:src/xeq.c     **** 	decNumber s;
 17754              		.loc 1 2504 54 view .LVU4619
 17755 0004 0446     		mov	r4, r0
2507:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
 17756              		.loc 1 2507 2 view .LVU4620
 17757 0006 054A     		ldr	r2, .L1245
 17758 0008 01A8     		add	r0, sp, #4
 17759              	.LVL1294:
2507:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
 17760              		.loc 1 2507 2 view .LVU4621
 17761 000a FFF7FEFF 		bl	dn_multiply
 17762              	.LVL1295:
2508:src/xeq.c     **** }
 17763              		.loc 1 2508 2 is_stmt 1 view .LVU4622
2508:src/xeq.c     **** }
 17764              		.loc 1 2508 9 is_stmt 0 view .LVU4623
 17765 000e 044A     		ldr	r2, .L1245+4
 17766 0010 2046     		mov	r0, r4
 17767 0012 01A9     		add	r1, sp, #4
 17768 0014 FFF7FEFF 		bl	dn_add
 17769              	.LVL1296:
2509:src/xeq.c     **** 
 17770              		.loc 1 2509 1 view .LVU4624
 17771 0018 0AB0     		add	sp, sp, #40
 17772              		.cfi_def_cfa_offset 8
 17773              		@ sp needed
 17774 001a 10BD     		pop	{r4, pc}
 17775              	.LVL1297:
 17776              	.L1246:
2509:src/xeq.c     **** 
 17777              		.loc 1 2509 1 view .LVU4625
 17778              		.align	2
 17779              	.L1245:
 17780 001c 00000000 		.word	const_9on5
 17781 0020 00000000 		.word	const_32
 17782              		.cfi_endproc
 17783              	.LFE174:
 17785              		.section	.text.convF2C,"ax",%progbits
 17786              		.align	1
 17787              		.p2align 2,,3
 17788              		.global	convF2C
 17789              		.syntax unified
 17790              		.thumb
 17791              		.thumb_func
 17792              		.fpu fpv4-sp-d16
 17794              	convF2C:
 17795              	.LVL1298:
 17796              	.LFB175:
2511:src/xeq.c     **** 	decNumber s;
 17797              		.loc 1 2511 54 is_stmt 1 view -0
 17798              		.cfi_startproc
 17799              		@ args = 0, pretend = 0, frame = 40
ARM GAS  /tmp/ccqED0AM.s 			page 489


 17800              		@ frame_needed = 0, uses_anonymous_args = 0
2512:src/xeq.c     **** 
 17801              		.loc 1 2512 2 view .LVU4627
2514:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
 17802              		.loc 1 2514 2 view .LVU4628
2511:src/xeq.c     **** 	decNumber s;
 17803              		.loc 1 2511 54 is_stmt 0 view .LVU4629
 17804 0000 10B5     		push	{r4, lr}
 17805              		.cfi_def_cfa_offset 8
 17806              		.cfi_offset 4, -8
 17807              		.cfi_offset 14, -4
 17808 0002 8AB0     		sub	sp, sp, #40
 17809              		.cfi_def_cfa_offset 48
2511:src/xeq.c     **** 	decNumber s;
 17810              		.loc 1 2511 54 view .LVU4630
 17811 0004 0446     		mov	r4, r0
2514:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
 17812              		.loc 1 2514 2 view .LVU4631
 17813 0006 054A     		ldr	r2, .L1249
 17814 0008 01A8     		add	r0, sp, #4
 17815              	.LVL1299:
2514:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
 17816              		.loc 1 2514 2 view .LVU4632
 17817 000a FFF7FEFF 		bl	dn_subtract
 17818              	.LVL1300:
2515:src/xeq.c     **** }
 17819              		.loc 1 2515 2 is_stmt 1 view .LVU4633
2515:src/xeq.c     **** }
 17820              		.loc 1 2515 9 is_stmt 0 view .LVU4634
 17821 000e 044A     		ldr	r2, .L1249+4
 17822 0010 2046     		mov	r0, r4
 17823 0012 01A9     		add	r1, sp, #4
 17824 0014 FFF7FEFF 		bl	dn_divide
 17825              	.LVL1301:
2516:src/xeq.c     **** 
 17826              		.loc 1 2516 1 view .LVU4635
 17827 0018 0AB0     		add	sp, sp, #40
 17828              		.cfi_def_cfa_offset 8
 17829              		@ sp needed
 17830 001a 10BD     		pop	{r4, pc}
 17831              	.LVL1302:
 17832              	.L1250:
2516:src/xeq.c     **** 
 17833              		.loc 1 2516 1 view .LVU4636
 17834              		.align	2
 17835              	.L1249:
 17836 001c 00000000 		.word	const_32
 17837 0020 00000000 		.word	const_9on5
 17838              		.cfi_endproc
 17839              	.LFE175:
 17841              		.section	.text.convDB2AR,"ax",%progbits
 17842              		.align	1
 17843              		.p2align 2,,3
 17844              		.global	convDB2AR
 17845              		.syntax unified
 17846              		.thumb
 17847              		.thumb_func
ARM GAS  /tmp/ccqED0AM.s 			page 490


 17848              		.fpu fpv4-sp-d16
 17850              	convDB2AR:
 17851              	.LVL1303:
 17852              	.LFB176:
2518:src/xeq.c     **** 	decNumber t;
 17853              		.loc 1 2518 56 is_stmt 1 view -0
 17854              		.cfi_startproc
 17855              		@ args = 0, pretend = 0, frame = 40
 17856              		@ frame_needed = 0, uses_anonymous_args = 0
2519:src/xeq.c     **** 	dn_multiply(&t, x, &const_0_05);
 17857              		.loc 1 2519 2 view .LVU4638
2520:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17858              		.loc 1 2520 2 view .LVU4639
2518:src/xeq.c     **** 	decNumber t;
 17859              		.loc 1 2518 56 is_stmt 0 view .LVU4640
 17860 0000 10B5     		push	{r4, lr}
 17861              		.cfi_def_cfa_offset 8
 17862              		.cfi_offset 4, -8
 17863              		.cfi_offset 14, -4
 17864 0002 8AB0     		sub	sp, sp, #40
 17865              		.cfi_def_cfa_offset 48
2520:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17866              		.loc 1 2520 2 view .LVU4641
 17867 0004 054A     		ldr	r2, .L1253
2518:src/xeq.c     **** 	decNumber t;
 17868              		.loc 1 2518 56 view .LVU4642
 17869 0006 0446     		mov	r4, r0
2520:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17870              		.loc 1 2520 2 view .LVU4643
 17871 0008 01A8     		add	r0, sp, #4
 17872              	.LVL1304:
2520:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17873              		.loc 1 2520 2 view .LVU4644
 17874 000a FFF7FEFF 		bl	dn_multiply
 17875              	.LVL1305:
2521:src/xeq.c     **** }
 17876              		.loc 1 2521 2 is_stmt 1 view .LVU4645
2521:src/xeq.c     **** }
 17877              		.loc 1 2521 9 is_stmt 0 view .LVU4646
 17878 000e 01A9     		add	r1, sp, #4
 17879 0010 2046     		mov	r0, r4
 17880 0012 FFF7FEFF 		bl	decNumberPow10
 17881              	.LVL1306:
2522:src/xeq.c     **** 
 17882              		.loc 1 2522 1 view .LVU4647
 17883 0016 0AB0     		add	sp, sp, #40
 17884              		.cfi_def_cfa_offset 8
 17885              		@ sp needed
 17886 0018 10BD     		pop	{r4, pc}
 17887              	.LVL1307:
 17888              	.L1254:
2522:src/xeq.c     **** 
 17889              		.loc 1 2522 1 view .LVU4648
 17890 001a 00BF     		.align	2
 17891              	.L1253:
 17892 001c 00000000 		.word	const_0_05
 17893              		.cfi_endproc
ARM GAS  /tmp/ccqED0AM.s 			page 491


 17894              	.LFE176:
 17896              		.section	.text.convAR2DB,"ax",%progbits
 17897              		.align	1
 17898              		.p2align 2,,3
 17899              		.global	convAR2DB
 17900              		.syntax unified
 17901              		.thumb
 17902              		.thumb_func
 17903              		.fpu fpv4-sp-d16
 17905              	convAR2DB:
 17906              	.LVL1308:
 17907              	.LFB177:
2524:src/xeq.c     **** 	decNumber t;
 17908              		.loc 1 2524 56 is_stmt 1 view -0
 17909              		.cfi_startproc
 17910              		@ args = 0, pretend = 0, frame = 40
 17911              		@ frame_needed = 0, uses_anonymous_args = 0
2525:src/xeq.c     **** 	dn_log10(&t, x);
 17912              		.loc 1 2525 2 view .LVU4650
2526:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
 17913              		.loc 1 2526 2 view .LVU4651
2524:src/xeq.c     **** 	decNumber t;
 17914              		.loc 1 2524 56 is_stmt 0 view .LVU4652
 17915 0000 10B5     		push	{r4, lr}
 17916              		.cfi_def_cfa_offset 8
 17917              		.cfi_offset 4, -8
 17918              		.cfi_offset 14, -4
 17919 0002 8AB0     		sub	sp, sp, #40
 17920              		.cfi_def_cfa_offset 48
2524:src/xeq.c     **** 	decNumber t;
 17921              		.loc 1 2524 56 view .LVU4653
 17922 0004 0446     		mov	r4, r0
2526:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
 17923              		.loc 1 2526 2 view .LVU4654
 17924 0006 01A8     		add	r0, sp, #4
 17925              	.LVL1309:
2526:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
 17926              		.loc 1 2526 2 view .LVU4655
 17927 0008 FFF7FEFF 		bl	dn_log10
 17928              	.LVL1310:
2527:src/xeq.c     **** }
 17929              		.loc 1 2527 2 is_stmt 1 view .LVU4656
2527:src/xeq.c     **** }
 17930              		.loc 1 2527 9 is_stmt 0 view .LVU4657
 17931 000c 034A     		ldr	r2, .L1257
 17932 000e 2046     		mov	r0, r4
 17933 0010 01A9     		add	r1, sp, #4
 17934 0012 FFF7FEFF 		bl	dn_multiply
 17935              	.LVL1311:
2528:src/xeq.c     **** 
 17936              		.loc 1 2528 1 view .LVU4658
 17937 0016 0AB0     		add	sp, sp, #40
 17938              		.cfi_def_cfa_offset 8
 17939              		@ sp needed
 17940 0018 10BD     		pop	{r4, pc}
 17941              	.LVL1312:
 17942              	.L1258:
ARM GAS  /tmp/ccqED0AM.s 			page 492


2528:src/xeq.c     **** 
 17943              		.loc 1 2528 1 view .LVU4659
 17944 001a 00BF     		.align	2
 17945              	.L1257:
 17946 001c 00000000 		.word	const_20
 17947              		.cfi_endproc
 17948              	.LFE177:
 17950              		.section	.text.convDB2PR,"ax",%progbits
 17951              		.align	1
 17952              		.p2align 2,,3
 17953              		.global	convDB2PR
 17954              		.syntax unified
 17955              		.thumb
 17956              		.thumb_func
 17957              		.fpu fpv4-sp-d16
 17959              	convDB2PR:
 17960              	.LVL1313:
 17961              	.LFB178:
2530:src/xeq.c     **** 	decNumber t;
 17962              		.loc 1 2530 56 is_stmt 1 view -0
 17963              		.cfi_startproc
 17964              		@ args = 0, pretend = 0, frame = 40
 17965              		@ frame_needed = 0, uses_anonymous_args = 0
2531:src/xeq.c     **** 	dn_mulpow10(&t, x, -1);
 17966              		.loc 1 2531 2 view .LVU4661
2532:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17967              		.loc 1 2532 2 view .LVU4662
2530:src/xeq.c     **** 	decNumber t;
 17968              		.loc 1 2530 56 is_stmt 0 view .LVU4663
 17969 0000 10B5     		push	{r4, lr}
 17970              		.cfi_def_cfa_offset 8
 17971              		.cfi_offset 4, -8
 17972              		.cfi_offset 14, -4
 17973 0002 8AB0     		sub	sp, sp, #40
 17974              		.cfi_def_cfa_offset 48
2530:src/xeq.c     **** 	decNumber t;
 17975              		.loc 1 2530 56 view .LVU4664
 17976 0004 0446     		mov	r4, r0
2532:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17977              		.loc 1 2532 2 view .LVU4665
 17978 0006 4FF0FF32 		mov	r2, #-1
 17979 000a 01A8     		add	r0, sp, #4
 17980              	.LVL1314:
2532:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17981              		.loc 1 2532 2 view .LVU4666
 17982 000c FFF7FEFF 		bl	dn_mulpow10
 17983              	.LVL1315:
2533:src/xeq.c     **** }
 17984              		.loc 1 2533 2 is_stmt 1 view .LVU4667
2533:src/xeq.c     **** }
 17985              		.loc 1 2533 9 is_stmt 0 view .LVU4668
 17986 0010 01A9     		add	r1, sp, #4
 17987 0012 2046     		mov	r0, r4
 17988 0014 FFF7FEFF 		bl	decNumberPow10
 17989              	.LVL1316:
2534:src/xeq.c     **** 
 17990              		.loc 1 2534 1 view .LVU4669
ARM GAS  /tmp/ccqED0AM.s 			page 493


 17991 0018 0AB0     		add	sp, sp, #40
 17992              		.cfi_def_cfa_offset 8
 17993              		@ sp needed
 17994 001a 10BD     		pop	{r4, pc}
2534:src/xeq.c     **** 
 17995              		.loc 1 2534 1 view .LVU4670
 17996              		.cfi_endproc
 17997              	.LFE178:
 17999              		.section	.text.convPR2DB,"ax",%progbits
 18000              		.align	1
 18001              		.p2align 2,,3
 18002              		.global	convPR2DB
 18003              		.syntax unified
 18004              		.thumb
 18005              		.thumb_func
 18006              		.fpu fpv4-sp-d16
 18008              	convPR2DB:
 18009              	.LVL1317:
 18010              	.LFB179:
2536:src/xeq.c     **** 	decNumber t;
 18011              		.loc 1 2536 56 is_stmt 1 view -0
 18012              		.cfi_startproc
 18013              		@ args = 0, pretend = 0, frame = 40
 18014              		@ frame_needed = 0, uses_anonymous_args = 0
2537:src/xeq.c     **** 	dn_log10(&t, x);
 18015              		.loc 1 2537 2 view .LVU4672
2538:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
 18016              		.loc 1 2538 2 view .LVU4673
2536:src/xeq.c     **** 	decNumber t;
 18017              		.loc 1 2536 56 is_stmt 0 view .LVU4674
 18018 0000 10B5     		push	{r4, lr}
 18019              		.cfi_def_cfa_offset 8
 18020              		.cfi_offset 4, -8
 18021              		.cfi_offset 14, -4
 18022 0002 8AB0     		sub	sp, sp, #40
 18023              		.cfi_def_cfa_offset 48
2536:src/xeq.c     **** 	decNumber t;
 18024              		.loc 1 2536 56 view .LVU4675
 18025 0004 0446     		mov	r4, r0
2538:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
 18026              		.loc 1 2538 2 view .LVU4676
 18027 0006 01A8     		add	r0, sp, #4
 18028              	.LVL1318:
2538:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
 18029              		.loc 1 2538 2 view .LVU4677
 18030 0008 FFF7FEFF 		bl	dn_log10
 18031              	.LVL1319:
2539:src/xeq.c     **** }
 18032              		.loc 1 2539 2 is_stmt 1 view .LVU4678
2539:src/xeq.c     **** }
 18033              		.loc 1 2539 9 is_stmt 0 view .LVU4679
 18034 000c 2046     		mov	r0, r4
 18035 000e 01A9     		add	r1, sp, #4
 18036 0010 0122     		movs	r2, #1
 18037 0012 FFF7FEFF 		bl	dn_mulpow10
 18038              	.LVL1320:
2540:src/xeq.c     **** 
ARM GAS  /tmp/ccqED0AM.s 			page 494


 18039              		.loc 1 2540 1 view .LVU4680
 18040 0016 0AB0     		add	sp, sp, #40
 18041              		.cfi_def_cfa_offset 8
 18042              		@ sp needed
 18043 0018 10BD     		pop	{r4, pc}
2540:src/xeq.c     **** 
 18044              		.loc 1 2540 1 view .LVU4681
 18045              		.cfi_endproc
 18046              	.LFE179:
 18048 001a 00BF     		.section	.text.do_conv,"ax",%progbits
 18049              		.align	1
 18050              		.p2align 2,,3
 18051              		.global	do_conv
 18052              		.syntax unified
 18053              		.thumb
 18054              		.thumb_func
 18055              		.fpu fpv4-sp-d16
 18057              	do_conv:
 18058              	.LVL1321:
 18059              	.LFB180:
2543:src/xeq.c     **** 	decNumber m;
 18060              		.loc 1 2543 66 is_stmt 1 view -0
 18061              		.cfi_startproc
 18062              		@ args = 0, pretend = 0, frame = 40
 18063              		@ frame_needed = 0, uses_anonymous_args = 0
2544:src/xeq.c     **** 	const unsigned int conv = arg / 2;
 18064              		.loc 1 2544 2 view .LVU4683
2545:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
 18065              		.loc 1 2545 2 view .LVU4684
2546:src/xeq.c     **** 
 18066              		.loc 1 2546 2 view .LVU4685
2548:src/xeq.c     **** 		decNumberCopy(r, x);
 18067              		.loc 1 2548 2 view .LVU4686
2543:src/xeq.c     **** 	decNumber m;
 18068              		.loc 1 2543 66 is_stmt 0 view .LVU4687
 18069 0000 70B5     		push	{r4, r5, r6, lr}
 18070              		.cfi_def_cfa_offset 16
 18071              		.cfi_offset 4, -16
 18072              		.cfi_offset 5, -12
 18073              		.cfi_offset 6, -8
 18074              		.cfi_offset 14, -4
2548:src/xeq.c     **** 		decNumberCopy(r, x);
 18075              		.loc 1 2548 5 view .LVU4688
 18076 0002 4D29     		cmp	r1, #77
2543:src/xeq.c     **** 	decNumber m;
 18077              		.loc 1 2543 66 view .LVU4689
 18078 0004 8AB0     		sub	sp, sp, #40
 18079              		.cfi_def_cfa_offset 56
2543:src/xeq.c     **** 	decNumber m;
 18080              		.loc 1 2543 66 view .LVU4690
 18081 0006 1546     		mov	r5, r2
2548:src/xeq.c     **** 		decNumberCopy(r, x);
 18082              		.loc 1 2548 5 view .LVU4691
 18083 0008 15D8     		bhi	.L1269
2553:src/xeq.c     **** 
 18084              		.loc 1 2553 2 is_stmt 1 view .LVU4692
 18085 000a 0D4B     		ldr	r3, .L1271
ARM GAS  /tmp/ccqED0AM.s 			page 495


 18086 000c 0646     		mov	r6, r0
2545:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
 18087              		.loc 1 2545 21 is_stmt 0 view .LVU4693
 18088 000e 4808     		lsrs	r0, r1, #1
 18089              	.LVL1322:
2545:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
 18090              		.loc 1 2545 21 view .LVU4694
 18091 0010 0C46     		mov	r4, r1
2553:src/xeq.c     **** 
 18092              		.loc 1 2553 2 view .LVU4695
 18093 0012 03EB0010 		add	r0, r3, r0, lsl #4
 18094 0016 01A9     		add	r1, sp, #4
 18095              	.LVL1323:
2553:src/xeq.c     **** 
 18096              		.loc 1 2553 2 view .LVU4696
 18097 0018 FFF7FEFF 		bl	decimal64ToNumber
 18098              	.LVL1324:
2555:src/xeq.c     **** 		dn_divide(r, x, &m);
 18099              		.loc 1 2555 2 is_stmt 1 view .LVU4697
2555:src/xeq.c     **** 		dn_divide(r, x, &m);
 18100              		.loc 1 2555 5 is_stmt 0 view .LVU4698
 18101 001c E307     		lsls	r3, r4, #31
2556:src/xeq.c     **** 	else			// imperial to metric
 18102              		.loc 1 2556 3 view .LVU4699
 18103 001e 01AA     		add	r2, sp, #4
 18104 0020 2946     		mov	r1, r5
 18105 0022 3046     		mov	r0, r6
2555:src/xeq.c     **** 		dn_divide(r, x, &m);
 18106              		.loc 1 2555 5 view .LVU4700
 18107 0024 03D5     		bpl	.L1270
2558:src/xeq.c     **** }
 18108              		.loc 1 2558 3 is_stmt 1 view .LVU4701
 18109 0026 FFF7FEFF 		bl	dn_multiply
 18110              	.LVL1325:
2559:src/xeq.c     **** 
 18111              		.loc 1 2559 1 is_stmt 0 view .LVU4702
 18112 002a 0AB0     		add	sp, sp, #40
 18113              		.cfi_remember_state
 18114              		.cfi_def_cfa_offset 16
 18115              		@ sp needed
 18116 002c 70BD     		pop	{r4, r5, r6, pc}
 18117              	.LVL1326:
 18118              	.L1270:
 18119              		.cfi_restore_state
2556:src/xeq.c     **** 	else			// imperial to metric
 18120              		.loc 1 2556 3 is_stmt 1 view .LVU4703
 18121 002e FFF7FEFF 		bl	dn_divide
 18122              	.LVL1327:
2559:src/xeq.c     **** 
 18123              		.loc 1 2559 1 is_stmt 0 view .LVU4704
 18124 0032 0AB0     		add	sp, sp, #40
 18125              		.cfi_remember_state
 18126              		.cfi_def_cfa_offset 16
 18127              		@ sp needed
 18128 0034 70BD     		pop	{r4, r5, r6, pc}
 18129              	.LVL1328:
 18130              	.L1269:
ARM GAS  /tmp/ccqED0AM.s 			page 496


 18131              		.cfi_restore_state
2549:src/xeq.c     **** 		return;
 18132              		.loc 1 2549 3 is_stmt 1 view .LVU4705
 18133 0036 1146     		mov	r1, r2
 18134              	.LVL1329:
2549:src/xeq.c     **** 		return;
 18135              		.loc 1 2549 3 is_stmt 0 view .LVU4706
 18136 0038 FFF7FEFF 		bl	decNumberCopy
 18137              	.LVL1330:
2550:src/xeq.c     **** 	}
 18138              		.loc 1 2550 3 is_stmt 1 view .LVU4707
2559:src/xeq.c     **** 
 18139              		.loc 1 2559 1 is_stmt 0 view .LVU4708
 18140 003c 0AB0     		add	sp, sp, #40
 18141              		.cfi_def_cfa_offset 16
 18142              		@ sp needed
 18143 003e 70BD     		pop	{r4, r5, r6, pc}
 18144              	.LVL1331:
 18145              	.L1272:
2559:src/xeq.c     **** 
 18146              		.loc 1 2559 1 view .LVU4709
 18147              		.align	2
 18148              	.L1271:
 18149 0040 00000000 		.word	cnsts_conv
 18150              		.cfi_endproc
 18151              	.LFE180:
 18153              		.section	.text.cmdconv,"ax",%progbits
 18154              		.align	1
 18155              		.p2align 2,,3
 18156              		.global	cmdconv
 18157              		.syntax unified
 18158              		.thumb
 18159              		.thumb_func
 18160              		.fpu fpv4-sp-d16
 18162              	cmdconv:
 18163              	.LVL1332:
 18164              	.LFB181:
2561:src/xeq.c     **** 	decNumber x, r;
 18165              		.loc 1 2561 46 is_stmt 1 view -0
 18166              		.cfi_startproc
 18167              		@ args = 0, pretend = 0, frame = 72
 18168              		@ frame_needed = 0, uses_anonymous_args = 0
2562:src/xeq.c     **** 
 18169              		.loc 1 2562 2 view .LVU4711
2564:src/xeq.c     **** 		return;
 18170              		.loc 1 2564 2 view .LVU4712
2564:src/xeq.c     **** 		return;
 18171              		.loc 1 2564 6 is_stmt 0 view .LVU4713
 18172 0000 0E4B     		ldr	r3, .L1281
 18173 0002 1B68     		ldr	r3, [r3]
 18174 0004 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
2564:src/xeq.c     **** 		return;
 18175              		.loc 1 2564 5 view .LVU4714
 18176 0008 DB07     		lsls	r3, r3, #31
 18177 000a 00D5     		bpl	.L1280
 18178 000c 7047     		bx	lr
 18179              	.L1280:
ARM GAS  /tmp/ccqED0AM.s 			page 497


2561:src/xeq.c     **** 	decNumber x, r;
 18180              		.loc 1 2561 46 view .LVU4715
 18181 000e 10B5     		push	{r4, lr}
 18182              		.cfi_def_cfa_offset 8
 18183              		.cfi_offset 4, -8
 18184              		.cfi_offset 14, -4
 18185 0010 92B0     		sub	sp, sp, #72
 18186              		.cfi_def_cfa_offset 80
 18187 0012 0446     		mov	r4, r0
2567:src/xeq.c     **** 	do_conv(&r, arg, &x);
 18188              		.loc 1 2567 2 is_stmt 1 view .LVU4716
 18189              	.LVL1333:
 18190              	.LBB2927:
 18191              	.LBI2927:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 18192              		.loc 1 824 12 view .LVU4717
 18193              	.LBB2928:
 825:src/xeq.c     **** }
 18194              		.loc 1 825 2 view .LVU4718
 825:src/xeq.c     **** }
 18195              		.loc 1 825 9 is_stmt 0 view .LVU4719
 18196 0014 6421     		movs	r1, #100
 18197              	.LVL1334:
 825:src/xeq.c     **** }
 18198              		.loc 1 825 9 view .LVU4720
 18199 0016 6846     		mov	r0, sp
 18200              	.LVL1335:
 825:src/xeq.c     **** }
 18201              		.loc 1 825 9 view .LVU4721
 18202 0018 FFF7FEFF 		bl	getRegister
 18203              	.LVL1336:
 825:src/xeq.c     **** }
 18204              		.loc 1 825 9 view .LVU4722
 18205              	.LBE2928:
 18206              	.LBE2927:
2568:src/xeq.c     **** 	setlastX();
 18207              		.loc 1 2568 2 is_stmt 1 view .LVU4723
 18208 001c 6A46     		mov	r2, sp
 18209 001e 2146     		mov	r1, r4
 18210 0020 09A8     		add	r0, sp, #36
 18211 0022 FFF7FEFF 		bl	do_conv
 18212              	.LVL1337:
2569:src/xeq.c     **** 	setX(&r);
 18213              		.loc 1 2569 2 view .LVU4724
 18214              	.LBB2929:
 18215              	.LBI2929:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 18216              		.loc 1 792 6 view .LVU4725
 18217              	.LBB2930:
 793:src/xeq.c     **** }
 18218              		.loc 1 793 2 view .LVU4726
 18219 0026 6421     		movs	r1, #100
 18220 0028 6C20     		movs	r0, #108
 18221 002a FFF7FEFF 		bl	copyreg_n
 18222              	.LVL1338:
 18223              	.LBE2930:
 18224              	.LBE2929:
ARM GAS  /tmp/ccqED0AM.s 			page 498


2570:src/xeq.c     **** }
 18225              		.loc 1 2570 2 view .LVU4727
 18226              	.LBB2931:
 18227              	.LBI2931:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 18228              		.loc 1 828 6 view .LVU4728
 18229              	.LBB2932:
 829:src/xeq.c     **** }
 18230              		.loc 1 829 2 view .LVU4729
 18231 002e 09A9     		add	r1, sp, #36
 18232              	.LVL1339:
 829:src/xeq.c     **** }
 18233              		.loc 1 829 2 is_stmt 0 view .LVU4730
 18234 0030 6420     		movs	r0, #100
 18235 0032 FFF7FEFF 		bl	setRegister
 18236              	.LVL1340:
 829:src/xeq.c     **** }
 18237              		.loc 1 829 2 view .LVU4731
 18238              	.LBE2932:
 18239              	.LBE2931:
2571:src/xeq.c     **** 
 18240              		.loc 1 2571 1 view .LVU4732
 18241 0036 12B0     		add	sp, sp, #72
 18242              		.cfi_def_cfa_offset 8
 18243              		@ sp needed
 18244 0038 10BD     		pop	{r4, pc}
 18245              	.LVL1341:
 18246              	.L1282:
2571:src/xeq.c     **** 
 18247              		.loc 1 2571 1 view .LVU4733
 18248 003a 00BF     		.align	2
 18249              	.L1281:
 18250 003c 00000000 		.word	main_ram
 18251              		.cfi_endproc
 18252              	.LFE181:
 18254              		.section	.rodata.fin_tst.str1.4,"aMS",%progbits,1
 18255              		.align	2
 18256              	.LC2:
 18257 0000 66616C73 		.ascii	"false\000"
 18257      6500
 18258 0006 0000     		.align	2
 18259              	.LC3:
 18260 0008 74727565 		.ascii	"true\000"
 18260      00
 18261              		.section	.text.fin_tst,"ax",%progbits
 18262              		.align	1
 18263              		.p2align 2,,3
 18264              		.global	fin_tst
 18265              		.syntax unified
 18266              		.thumb
 18267              		.thumb_func
 18268              		.fpu fpv4-sp-d16
 18270              	fin_tst:
 18271              	.LVL1342:
 18272              	.LFB182:
2576:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 18273              		.loc 1 2576 27 is_stmt 1 view -0
ARM GAS  /tmp/ccqED0AM.s 			page 499


 18274              		.cfi_startproc
 18275              		@ args = 0, pretend = 0, frame = 0
 18276              		@ frame_needed = 0, uses_anonymous_args = 0
2577:src/xeq.c     **** 	if (Running || XromRunning) {
 18277              		.loc 1 2577 2 view .LVU4735
2576:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 18278              		.loc 1 2576 27 is_stmt 0 view .LVU4736
 18279 0000 10B5     		push	{r4, lr}
 18280              		.cfi_def_cfa_offset 8
 18281              		.cfi_offset 4, -8
 18282              		.cfi_offset 14, -4
2577:src/xeq.c     **** 	if (Running || XromRunning) {
 18283              		.loc 1 2577 31 view .LVU4737
 18284 0002 50B1     		cbz	r0, .L1297
 18285              	.LVL1343:
2578:src/xeq.c     **** 		if (! a && incpc())
 18286              		.loc 1 2578 2 is_stmt 1 view .LVU4738
2578:src/xeq.c     **** 		if (! a && incpc())
 18287              		.loc 1 2578 14 is_stmt 0 view .LVU4739
 18288 0004 124A     		ldr	r2, .L1300
2578:src/xeq.c     **** 		if (! a && incpc())
 18289              		.loc 1 2578 6 view .LVU4740
 18290 0006 134B     		ldr	r3, .L1300+4
2578:src/xeq.c     **** 		if (! a && incpc())
 18291              		.loc 1 2578 14 view .LVU4741
 18292 0008 1268     		ldr	r2, [r2]
 18293 000a 1B68     		ldr	r3, [r3]
2577:src/xeq.c     **** 	if (Running || XromRunning) {
 18294              		.loc 1 2577 31 view .LVU4742
 18295 000c 1248     		ldr	r0, .L1300+8
 18296              	.LVL1344:
2578:src/xeq.c     **** 		if (! a && incpc())
 18297              		.loc 1 2578 14 view .LVU4743
 18298 000e 1343     		orrs	r3, r2, r3
 18299 0010 0AD0     		beq	.L1289
 18300              	.LVL1345:
 18301              	.L1286:
2585:src/xeq.c     **** 		print_justified( msg );
 18302              		.loc 1 2585 2 is_stmt 1 view .LVU4744
2585:src/xeq.c     **** 		print_justified( msg );
 18303              		.loc 1 2585 6 is_stmt 0 view .LVU4745
 18304 0012 124C     		ldr	r4, .L1300+12
2585:src/xeq.c     **** 		print_justified( msg );
 18305              		.loc 1 2585 5 view .LVU4746
 18306 0014 2368     		ldr	r3, [r4]
 18307 0016 6BB9     		cbnz	r3, .L1298
 18308              	.L1283:
2590:src/xeq.c     **** 
 18309              		.loc 1 2590 1 view .LVU4747
 18310 0018 10BD     		pop	{r4, pc}
 18311              	.LVL1346:
 18312              	.L1297:
2578:src/xeq.c     **** 		if (! a && incpc())
 18313              		.loc 1 2578 2 is_stmt 1 view .LVU4748
2578:src/xeq.c     **** 		if (! a && incpc())
 18314              		.loc 1 2578 14 is_stmt 0 view .LVU4749
 18315 001a 0D4A     		ldr	r2, .L1300
ARM GAS  /tmp/ccqED0AM.s 			page 500


2578:src/xeq.c     **** 		if (! a && incpc())
 18316              		.loc 1 2578 6 view .LVU4750
 18317 001c 0D4B     		ldr	r3, .L1300+4
2578:src/xeq.c     **** 		if (! a && incpc())
 18318              		.loc 1 2578 14 view .LVU4751
 18319 001e 1268     		ldr	r2, [r2]
 18320 0020 1B68     		ldr	r3, [r3]
 18321 0022 1343     		orrs	r3, r2, r3
 18322 0024 0BD1     		bne	.L1288
2577:src/xeq.c     **** 	if (Running || XromRunning) {
 18323              		.loc 1 2577 31 view .LVU4752
 18324 0026 0E48     		ldr	r0, .L1300+16
 18325              	.LVL1347:
 18326              	.L1289:
2583:src/xeq.c     **** #ifdef INFRARED
 18327              		.loc 1 2583 3 is_stmt 1 view .LVU4753
2583:src/xeq.c     **** #ifdef INFRARED
 18328              		.loc 1 2583 11 is_stmt 0 view .LVU4754
 18329 0028 0E4B     		ldr	r3, .L1300+20
2585:src/xeq.c     **** 		print_justified( msg );
 18330              		.loc 1 2585 6 view .LVU4755
 18331 002a 0C4C     		ldr	r4, .L1300+12
2583:src/xeq.c     **** #ifdef INFRARED
 18332              		.loc 1 2583 11 view .LVU4756
 18333 002c 1860     		str	r0, [r3]
2585:src/xeq.c     **** 		print_justified( msg );
 18334              		.loc 1 2585 2 is_stmt 1 view .LVU4757
2585:src/xeq.c     **** 		print_justified( msg );
 18335              		.loc 1 2585 5 is_stmt 0 view .LVU4758
 18336 002e 2368     		ldr	r3, [r4]
 18337 0030 002B     		cmp	r3, #0
 18338 0032 F1D0     		beq	.L1283
 18339              	.L1298:
2586:src/xeq.c     **** 		Tracing = 0;
 18340              		.loc 1 2586 3 is_stmt 1 view .LVU4759
 18341 0034 FFF7FEFF 		bl	print_justified
 18342              	.LVL1348:
2587:src/xeq.c     **** 	}
 18343              		.loc 1 2587 3 view .LVU4760
2587:src/xeq.c     **** 	}
 18344              		.loc 1 2587 11 is_stmt 0 view .LVU4761
 18345 0038 0023     		movs	r3, #0
 18346 003a 2360     		str	r3, [r4]
2590:src/xeq.c     **** 
 18347              		.loc 1 2590 1 view .LVU4762
 18348 003c 10BD     		pop	{r4, pc}
 18349              	.LVL1349:
 18350              	.L1288:
2579:src/xeq.c     **** 			decpc();
 18351              		.loc 1 2579 14 discriminator 1 view .LVU4763
 18352 003e FFF7FEFF 		bl	incpc
 18353              	.LVL1350:
2579:src/xeq.c     **** 			decpc();
 18354              		.loc 1 2579 11 discriminator 1 view .LVU4764
 18355 0042 08B9     		cbnz	r0, .L1299
 18356 0044 0648     		ldr	r0, .L1300+16
 18357 0046 E4E7     		b	.L1286
ARM GAS  /tmp/ccqED0AM.s 			page 501


 18358              	.L1299:
2580:src/xeq.c     **** 	}
 18359              		.loc 1 2580 4 is_stmt 1 view .LVU4765
 18360 0048 FFF7FEFF 		bl	decpc
 18361              	.LVL1351:
 18362 004c 0448     		ldr	r0, .L1300+16
 18363 004e E0E7     		b	.L1286
 18364              	.L1301:
 18365              		.align	2
 18366              	.L1300:
 18367 0050 00000000 		.word	XromRunning
 18368 0054 00000000 		.word	Running
 18369 0058 08000000 		.word	.LC3
 18370 005c 00000000 		.word	Tracing
 18371 0060 00000000 		.word	.LC2
 18372 0064 00000000 		.word	DispMsg
 18373              		.cfi_endproc
 18374              	.LFE182:
 18376              		.section	.text.check_mode,"ax",%progbits
 18377              		.align	1
 18378              		.p2align 2,,3
 18379              		.global	check_mode
 18380              		.syntax unified
 18381              		.thumb
 18382              		.thumb_func
 18383              		.fpu fpv4-sp-d16
 18385              	check_mode:
 18386              	.LVL1352:
 18387              	.LFB143:
2110:src/xeq.c     **** 	const int intmode = is_intmode() ? 1 : 0;
 18388              		.loc 1 2110 32 view -0
 18389              		.cfi_startproc
 18390              		@ args = 0, pretend = 0, frame = 0
 18391              		@ frame_needed = 0, uses_anonymous_args = 0
 18392              		@ link register save eliminated.
2111:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
 18393              		.loc 1 2111 2 view .LVU4767
2112:src/xeq.c     **** 
 18394              		.loc 1 2112 2 view .LVU4768
2111:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
 18395              		.loc 1 2111 35 is_stmt 0 view .LVU4769
 18396 0000 084B     		ldr	r3, .L1303
 18397              	.LVL1353:
2111:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
 18398              		.loc 1 2111 35 view .LVU4770
 18399 0002 1B68     		ldr	r3, [r3]
 18400              	.LVL1354:
2114:src/xeq.c     **** }
 18401              		.loc 1 2114 2 view .LVU4771
 18402 0004 A0F19F00 		sub	r0, #159
 18403              	.LVL1355:
2114:src/xeq.c     **** }
 18404              		.loc 1 2114 2 view .LVU4772
 18405 0008 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 18406              	.LVL1356:
2114:src/xeq.c     **** }
 18407              		.loc 1 2114 2 is_stmt 1 view .LVU4773
ARM GAS  /tmp/ccqED0AM.s 			page 502


 18408 000c B0FA80F0 		clz	r0, r0
 18409 0010 4009     		lsrs	r0, r0, #5
 18410 0012 03F00103 		and	r3, r3, #1
 18411 0016 C01A     		subs	r0, r0, r3
 18412 0018 B0FA80F0 		clz	r0, r0
 18413 001c 4009     		lsrs	r0, r0, #5
 18414 001e FFF7FEBF 		b	fin_tst
 18415              	.LVL1357:
 18416              	.L1304:
2114:src/xeq.c     **** }
 18417              		.loc 1 2114 2 is_stmt 0 view .LVU4774
 18418 0022 00BF     		.align	2
 18419              	.L1303:
 18420 0024 00000000 		.word	main_ram
 18421              		.cfi_endproc
 18422              	.LFE143:
 18424              		.section	.text.check_dblmode,"ax",%progbits
 18425              		.align	1
 18426              		.p2align 2,,3
 18427              		.global	check_dblmode
 18428              		.syntax unified
 18429              		.thumb
 18430              		.thumb_func
 18431              		.fpu fpv4-sp-d16
 18433              	check_dblmode:
 18434              	.LVL1358:
 18435              	.LFB144:
2120:src/xeq.c     **** 	fin_tst(is_dblmode());
 18436              		.loc 1 2120 35 is_stmt 1 view -0
 18437              		.cfi_startproc
 18438              		@ args = 0, pretend = 0, frame = 0
 18439              		@ frame_needed = 0, uses_anonymous_args = 0
 18440              		@ link register save eliminated.
2121:src/xeq.c     **** }
 18441              		.loc 1 2121 2 view .LVU4776
 18442              	.LBB2933:
 18443              	.LBI2933:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 18444              		.loc 1 1118 5 view .LVU4777
 18445              	.LBB2934:
1119:src/xeq.c     **** }
 18446              		.loc 1 1119 2 view .LVU4778
1119:src/xeq.c     **** }
 18447              		.loc 1 1119 24 is_stmt 0 view .LVU4779
 18448 0000 064B     		ldr	r3, .L1306
 18449 0002 1B68     		ldr	r3, [r3]
 18450 0004 B3F8E837 		ldrh	r3, [r3, #2024]
 18451 0008 44F20100 		movw	r0, #16385
 18452              	.LVL1359:
1119:src/xeq.c     **** }
 18453              		.loc 1 1119 24 view .LVU4780
 18454 000c 1840     		ands	r0, r0, r3
 18455              	.LBE2934:
 18456              	.LBE2933:
2121:src/xeq.c     **** }
 18457              		.loc 1 2121 2 view .LVU4781
 18458 000e A0F58040 		sub	r0, r0, #16384
ARM GAS  /tmp/ccqED0AM.s 			page 503


 18459 0012 B0FA80F0 		clz	r0, r0
 18460 0016 4009     		lsrs	r0, r0, #5
 18461 0018 FFF7FEBF 		b	fin_tst
 18462              	.LVL1360:
 18463              	.L1307:
 18464              		.align	2
 18465              	.L1306:
 18466 001c 00000000 		.word	main_ram
 18467              		.cfi_endproc
 18468              	.LFE144:
 18470              		.section	.text.op_query_xtal,"ax",%progbits
 18471              		.align	1
 18472              		.p2align 2,,3
 18473              		.global	op_query_xtal
 18474              		.syntax unified
 18475              		.thumb
 18476              		.thumb_func
 18477              		.fpu fpv4-sp-d16
 18479              	op_query_xtal:
 18480              	.LVL1361:
 18481              	.LFB145:
2124:src/xeq.c     **** 	fin_tst(Xtal);
 18482              		.loc 1 2124 35 is_stmt 1 view -0
 18483              		.cfi_startproc
 18484              		@ args = 0, pretend = 0, frame = 0
 18485              		@ frame_needed = 0, uses_anonymous_args = 0
 18486              		@ link register save eliminated.
2125:src/xeq.c     **** }
 18487              		.loc 1 2125 2 view .LVU4783
 18488 0000 0120     		movs	r0, #1
 18489              	.LVL1362:
2125:src/xeq.c     **** }
 18490              		.loc 1 2125 2 is_stmt 0 view .LVU4784
 18491 0002 FFF7FEBF 		b	fin_tst
 18492              	.LVL1363:
 18493              		.cfi_endproc
 18494              	.LFE145:
 18496 0006 00BF     		.section	.text.isTop,"ax",%progbits
 18497              		.align	1
 18498              		.p2align 2,,3
 18499              		.global	isTop
 18500              		.syntax unified
 18501              		.thumb
 18502              		.thumb_func
 18503              		.fpu fpv4-sp-d16
 18505              	isTop:
 18506              	.LVL1364:
 18507              	.LFB160:
2328:src/xeq.c     **** 	int top = 0;
 18508              		.loc 1 2328 27 is_stmt 1 view -0
 18509              		.cfi_startproc
 18510              		@ args = 0, pretend = 0, frame = 0
 18511              		@ frame_needed = 0, uses_anonymous_args = 0
 18512              		@ link register save eliminated.
2329:src/xeq.c     **** 
 18513              		.loc 1 2329 2 view .LVU4786
2331:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
ARM GAS  /tmp/ccqED0AM.s 			page 504


 18514              		.loc 1 2331 2 view .LVU4787
2331:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
 18515              		.loc 1 2331 6 is_stmt 0 view .LVU4788
 18516 0000 0E4B     		ldr	r3, .L1317
 18517 0002 1868     		ldr	r0, [r3]
 18518              	.LVL1365:
2331:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
 18519              		.loc 1 2331 5 view .LVU4789
 18520 0004 78B1     		cbz	r0, .L1310
2332:src/xeq.c     **** 	}
 18521              		.loc 1 2332 3 is_stmt 1 view .LVU4790
2332:src/xeq.c     **** 	}
 18522              		.loc 1 2332 9 is_stmt 0 view .LVU4791
 18523 0006 0E4B     		ldr	r3, .L1317+4
 18524 0008 1A68     		ldr	r2, [r3]
 18525              	.LBB2935:
 18526              	.LBB2936:
 218:src/xeq.c     **** }
 18527              		.loc 1 218 9 view .LVU4792
 18528 000a B2F8DE37 		ldrh	r3, [r2, #2014]
 18529              	.LBE2936:
 18530              	.LBE2935:
2332:src/xeq.c     **** 	}
 18531              		.loc 1 2332 9 view .LVU4793
 18532 000e B2F9E207 		ldrsh	r0, [r2, #2018]
 18533              	.LBB2939:
 18534              	.LBI2935:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 18535              		.loc 1 217 5 is_stmt 1 view .LVU4794
 18536              	.LBB2937:
 218:src/xeq.c     **** }
 18537              		.loc 1 218 2 view .LVU4795
 218:src/xeq.c     **** }
 18538              		.loc 1 218 9 is_stmt 0 view .LVU4796
 18539 0012 43F34A13 		sbfx	r3, r3, #5, #11
 218:src/xeq.c     **** }
 18540              		.loc 1 218 57 view .LVU4797
 18541 0016 002B     		cmp	r3, #0
 18542 0018 07DB     		blt	.L1316
 18543 001a 4FF0FF33 		mov	r3, #-1
 18544              	.L1311:
 18545              	.LBE2937:
 18546              	.LBE2939:
2332:src/xeq.c     **** 	}
 18547              		.loc 1 2332 19 view .LVU4798
 18548 001e 9842     		cmp	r0, r3
 18549 0020 B4BF     		ite	lt
 18550 0022 0020     		movlt	r0, #0
 18551 0024 0120     		movge	r0, #1
 18552              	.LVL1366:
 18553              	.L1310:
2334:src/xeq.c     **** }
 18554              		.loc 1 2334 2 is_stmt 1 view .LVU4799
 18555 0026 FFF7FEBF 		b	fin_tst
 18556              	.LVL1367:
 18557              	.L1316:
 18558              	.LBB2940:
ARM GAS  /tmp/ccqED0AM.s 			page 505


 18559              	.LBB2938:
 218:src/xeq.c     **** }
 18560              		.loc 1 218 25 is_stmt 0 view .LVU4800
 18561 002a 064A     		ldr	r2, .L1317+8
 18562 002c 1268     		ldr	r2, [r2]
 218:src/xeq.c     **** }
 18563              		.loc 1 218 57 view .LVU4801
 18564 002e 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 18565 0032 C3F30B03 		ubfx	r3, r3, #0, #12
 18566 0036 DB43     		mvns	r3, r3
 18567 0038 F1E7     		b	.L1311
 18568              	.L1318:
 18569 003a 00BF     		.align	2
 18570              	.L1317:
 18571 003c 00000000 		.word	Running
 18572 0040 00000000 		.word	main_ram
 18573 0044 00000000 		.word	RetStk
 18574              	.LBE2938:
 18575              	.LBE2940:
 18576              		.cfi_endproc
 18577              	.LFE160:
 18579              		.section	.text.cmdlblp,"ax",%progbits
 18580              		.align	1
 18581              		.p2align 2,,3
 18582              		.global	cmdlblp
 18583              		.syntax unified
 18584              		.thumb
 18585              		.thumb_func
 18586              		.fpu fpv4-sp-d16
 18588              	cmdlblp:
 18589              	.LVL1368:
 18590              	.LFB161:
2339:src/xeq.c     **** 	fin_tst(find_label_from(state_pc(), arg, FIND_OP_ENDS) != 0);
 18591              		.loc 1 2339 46 is_stmt 1 view -0
 18592              		.cfi_startproc
 18593              		@ args = 0, pretend = 0, frame = 0
 18594              		@ frame_needed = 0, uses_anonymous_args = 0
2340:src/xeq.c     **** }
 18595              		.loc 1 2340 2 view .LVU4803
2339:src/xeq.c     **** 	fin_tst(find_label_from(state_pc(), arg, FIND_OP_ENDS) != 0);
 18596              		.loc 1 2339 46 is_stmt 0 view .LVU4804
 18597 0000 08B5     		push	{r3, lr}
 18598              		.cfi_def_cfa_offset 8
 18599              		.cfi_offset 3, -8
 18600              		.cfi_offset 14, -4
2340:src/xeq.c     **** }
 18601              		.loc 1 2340 26 view .LVU4805
 18602 0002 084B     		ldr	r3, .L1321
 18603              	.LVL1369:
2340:src/xeq.c     **** }
 18604              		.loc 1 2340 26 view .LVU4806
 18605 0004 1B68     		ldr	r3, [r3]
 18606              	.LVL1370:
 18607              	.LBB2941:
 18608              	.LBI2941:
2214:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 18609              		.loc 1 2214 14 is_stmt 1 view .LVU4807
ARM GAS  /tmp/ccqED0AM.s 			page 506


 18610              	.LBB2942:
2215:src/xeq.c     **** }
 18611              		.loc 1 2215 2 view .LVU4808
2215:src/xeq.c     **** }
 18612              		.loc 1 2215 9 is_stmt 0 view .LVU4809
 18613 0006 40F4C441 		orr	r1, r0, #25088
 18614              	.LVL1371:
2215:src/xeq.c     **** }
 18615              		.loc 1 2215 9 view .LVU4810
 18616 000a 0222     		movs	r2, #2
 18617 000c B3F8E007 		ldrh	r0, [r3, #2016]
 18618              	.LVL1372:
2215:src/xeq.c     **** }
 18619              		.loc 1 2215 9 view .LVU4811
 18620 0010 FFF7FEFF 		bl	find_opcode_from
 18621              	.LVL1373:
2215:src/xeq.c     **** }
 18622              		.loc 1 2215 9 view .LVU4812
 18623              	.LBE2942:
 18624              	.LBE2941:
2340:src/xeq.c     **** }
 18625              		.loc 1 2340 2 view .LVU4813
 18626 0014 0038     		subs	r0, r0, #0
2341:src/xeq.c     **** 
 18627              		.loc 1 2341 1 view .LVU4814
 18628 0016 BDE80840 		pop	{r3, lr}
 18629              		.cfi_restore 14
 18630              		.cfi_restore 3
 18631              		.cfi_def_cfa_offset 0
2340:src/xeq.c     **** }
 18632              		.loc 1 2340 2 view .LVU4815
 18633 001a 18BF     		it	ne
 18634 001c 0120     		movne	r0, #1
 18635 001e FFF7FEBF 		b	fin_tst
 18636              	.LVL1374:
 18637              	.L1322:
 18638 0022 00BF     		.align	2
 18639              	.L1321:
 18640 0024 00000000 		.word	main_ram
 18641              		.cfi_endproc
 18642              	.LFE161:
 18644              		.section	.text.cmdmultilblp,"ax",%progbits
 18645              		.align	1
 18646              		.p2align 2,,3
 18647              		.global	cmdmultilblp
 18648              		.syntax unified
 18649              		.thumb
 18650              		.thumb_func
 18651              		.fpu fpv4-sp-d16
 18653              	cmdmultilblp:
 18654              	.LVL1375:
 18655              	.LFB164:
2368:src/xeq.c     **** 	fin_tst(findmultilbl(o, 0) != 0);
 18656              		.loc 1 2368 55 is_stmt 1 view -0
 18657              		.cfi_startproc
 18658              		@ args = 0, pretend = 0, frame = 0
 18659              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccqED0AM.s 			page 507


2369:src/xeq.c     **** }
 18660              		.loc 1 2369 2 view .LVU4817
2368:src/xeq.c     **** 	fin_tst(findmultilbl(o, 0) != 0);
 18661              		.loc 1 2368 55 is_stmt 0 view .LVU4818
 18662 0000 08B5     		push	{r3, lr}
 18663              		.cfi_def_cfa_offset 8
 18664              		.cfi_offset 3, -8
 18665              		.cfi_offset 14, -4
2369:src/xeq.c     **** }
 18666              		.loc 1 2369 10 view .LVU4819
 18667 0002 0021     		movs	r1, #0
 18668              	.LVL1376:
2369:src/xeq.c     **** }
 18669              		.loc 1 2369 10 view .LVU4820
 18670 0004 FFF7FEFF 		bl	findmultilbl
 18671              	.LVL1377:
2369:src/xeq.c     **** }
 18672              		.loc 1 2369 2 view .LVU4821
 18673 0008 0038     		subs	r0, r0, #0
2370:src/xeq.c     **** 
 18674              		.loc 1 2370 1 view .LVU4822
 18675 000a BDE80840 		pop	{r3, lr}
 18676              		.cfi_restore 14
 18677              		.cfi_restore 3
 18678              		.cfi_def_cfa_offset 0
2369:src/xeq.c     **** }
 18679              		.loc 1 2369 2 view .LVU4823
 18680 000e 18BF     		it	ne
 18681 0010 0120     		movne	r0, #1
 18682 0012 FFF7FEBF 		b	fin_tst
 18683              	.LVL1378:
 18684              		.cfi_endproc
 18685              	.LFE164:
 18687 0016 00BF     		.section	.text.cmdkeyp,"ax",%progbits
 18688              		.align	1
 18689              		.p2align 2,,3
 18690              		.global	cmdkeyp
 18691              		.syntax unified
 18692              		.thumb
 18693              		.thumb_func
 18694              		.fpu fpv4-sp-d16
 18696              	cmdkeyp:
 18697              	.LVL1379:
 18698              	.LFB139:
2046:src/xeq.c     **** 	int cond = LastKey == 0;
 18699              		.loc 1 2046 46 is_stmt 1 view -0
 18700              		.cfi_startproc
 18701              		@ args = 0, pretend = 0, frame = 0
 18702              		@ frame_needed = 0, uses_anonymous_args = 0
2047:src/xeq.c     **** 	if (!cond) {
 18703              		.loc 1 2047 2 view .LVU4825
2046:src/xeq.c     **** 	int cond = LastKey == 0;
 18704              		.loc 1 2046 46 is_stmt 0 view .LVU4826
 18705 0000 70B5     		push	{r4, r5, r6, lr}
 18706              		.cfi_def_cfa_offset 16
 18707              		.cfi_offset 4, -16
 18708              		.cfi_offset 5, -12
ARM GAS  /tmp/ccqED0AM.s 			page 508


 18709              		.cfi_offset 6, -8
 18710              		.cfi_offset 14, -4
2047:src/xeq.c     **** 	if (!cond) {
 18711              		.loc 1 2047 13 view .LVU4827
 18712 0002 104B     		ldr	r3, .L1332
 18713 0004 93F91320 		ldrsb	r2, [r3, #19]
2047:src/xeq.c     **** 	if (!cond) {
 18714              		.loc 1 2047 21 view .LVU4828
 18715 0008 002A     		cmp	r2, #0
2046:src/xeq.c     **** 	int cond = LastKey == 0;
 18716              		.loc 1 2046 46 view .LVU4829
 18717 000a 82B0     		sub	sp, sp, #8
 18718              		.cfi_def_cfa_offset 24
2047:src/xeq.c     **** 	if (!cond) {
 18719              		.loc 1 2047 21 view .LVU4830
 18720 000c 0CBF     		ite	eq
 18721 000e 0125     		moveq	r5, #1
 18722 0010 0025     		movne	r5, #0
 18723              	.LVL1380:
2048:src/xeq.c     **** 		int k = LastKey - 1;
 18724              		.loc 1 2048 2 is_stmt 1 view .LVU4831
2048:src/xeq.c     **** 		int k = LastKey - 1;
 18725              		.loc 1 2048 5 is_stmt 0 view .LVU4832
 18726 0012 05D1     		bne	.L1331
2053:src/xeq.c     **** }
 18727              		.loc 1 2053 2 is_stmt 1 view .LVU4833
 18728 0014 2846     		mov	r0, r5
 18729              	.LVL1381:
2054:src/xeq.c     **** 
 18730              		.loc 1 2054 1 is_stmt 0 view .LVU4834
 18731 0016 02B0     		add	sp, sp, #8
 18732              		.cfi_remember_state
 18733              		.cfi_def_cfa_offset 16
 18734              		@ sp needed
 18735 0018 BDE87040 		pop	{r4, r5, r6, lr}
 18736              		.cfi_restore 14
 18737              		.cfi_restore 6
 18738              		.cfi_restore 5
 18739              		.cfi_restore 4
 18740              		.cfi_def_cfa_offset 0
 18741              	.LVL1382:
2053:src/xeq.c     **** }
 18742              		.loc 1 2053 2 view .LVU4835
 18743 001c FFF7FEBF 		b	fin_tst
 18744              	.LVL1383:
 18745              	.L1331:
 18746              		.cfi_restore_state
 18747              	.LBB2943:
2049:src/xeq.c     **** 		LastKey = 0;
 18748              		.loc 1 2049 3 is_stmt 1 view .LVU4836
2050:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
 18749              		.loc 1 2050 3 view .LVU4837
 18750 0020 0446     		mov	r4, r0
2050:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
 18751              		.loc 1 2050 11 is_stmt 0 view .LVU4838
 18752 0022 0026     		movs	r6, #0
2051:src/xeq.c     **** 	}
ARM GAS  /tmp/ccqED0AM.s 			page 509


 18753              		.loc 1 2051 26 view .LVU4839
 18754 0024 501E     		subs	r0, r2, #1
 18755              	.LVL1384:
2050:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
 18756              		.loc 1 2050 11 view .LVU4840
 18757 0026 DE74     		strb	r6, [r3, #19]
2051:src/xeq.c     **** 	}
 18758              		.loc 1 2051 3 is_stmt 1 view .LVU4841
2051:src/xeq.c     **** 	}
 18759              		.loc 1 2051 26 is_stmt 0 view .LVU4842
 18760 0028 FFF7FEFF 		bl	keycode_to_row_column
 18761              	.LVL1385:
2051:src/xeq.c     **** 	}
 18762              		.loc 1 2051 26 view .LVU4843
 18763 002c 0246     		mov	r2, r0
2051:src/xeq.c     **** 	}
 18764              		.loc 1 2051 3 view .LVU4844
 18765 002e 0096     		str	r6, [sp]
 18766 0030 2046     		mov	r0, r4
 18767 0032 D317     		asrs	r3, r2, #31
 18768 0034 FFF7FEFF 		bl	set_reg_n_int_sgn
 18769              	.LVL1386:
 18770              	.LBE2943:
2053:src/xeq.c     **** }
 18771              		.loc 1 2053 2 is_stmt 1 view .LVU4845
 18772 0038 2846     		mov	r0, r5
2054:src/xeq.c     **** 
 18773              		.loc 1 2054 1 is_stmt 0 view .LVU4846
 18774 003a 02B0     		add	sp, sp, #8
 18775              		.cfi_def_cfa_offset 16
 18776              		@ sp needed
 18777 003c BDE87040 		pop	{r4, r5, r6, lr}
 18778              		.cfi_restore 14
 18779              		.cfi_restore 6
 18780              		.cfi_restore 5
 18781              		.cfi_restore 4
 18782              		.cfi_def_cfa_offset 0
 18783              	.LVL1387:
2053:src/xeq.c     **** }
 18784              		.loc 1 2053 2 view .LVU4847
 18785 0040 FFF7FEBF 		b	fin_tst
 18786              	.LVL1388:
 18787              	.L1333:
2053:src/xeq.c     **** }
 18788              		.loc 1 2053 2 view .LVU4848
 18789              		.align	2
 18790              	.L1332:
 18791 0044 00000000 		.word	StateWhileOn
 18792              		.cfi_endproc
 18793              	.LFE139:
 18795              		.section	.text.do_tst,"ax",%progbits
 18796              		.align	1
 18797              		.p2align 2,,3
 18798              		.syntax unified
 18799              		.thumb
 18800              		.thumb_func
 18801              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccqED0AM.s 			page 510


 18803              	do_tst:
 18804              	.LVL1389:
 18805              	.LFB188:
3291:src/xeq.c     **** 	int a = 0;
 18806              		.loc 1 3291 51 is_stmt 1 view -0
 18807              		.cfi_startproc
 18808              		@ args = 0, pretend = 0, frame = 112
 18809              		@ frame_needed = 0, uses_anonymous_args = 0
3292:src/xeq.c     **** 	int iszero, isneg;
 18810              		.loc 1 3292 2 view .LVU4850
3293:src/xeq.c     **** 
 18811              		.loc 1 3293 2 view .LVU4851
3295:src/xeq.c     **** 
 18812              		.loc 1 3295 2 view .LVU4852
 18813              	.LBB2944:
 18814              	.LBI2944:
1332:src/xeq.c     **** 	process_cmdline();
 18815              		.loc 1 1332 6 view .LVU4853
 18816              	.LBE2944:
1333:src/xeq.c     **** 	set_lift();
 18817              		.loc 1 1333 2 view .LVU4854
 18818              	.LBB2959:
 18819              	.LBB2945:
 18820              	.LBI2945:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 18821              		.loc 1 1226 6 view .LVU4855
 18822              	.LBB2946:
1227:src/xeq.c     **** 
 18823              		.loc 1 1227 2 view .LVU4856
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 18824              		.loc 1 1229 2 view .LVU4857
 18825              	.LBE2946:
 18826              	.LBE2945:
 18827              	.LBE2959:
3291:src/xeq.c     **** 	int a = 0;
 18828              		.loc 1 3291 51 is_stmt 0 view .LVU4858
 18829 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 18830              		.cfi_def_cfa_offset 28
 18831              		.cfi_offset 4, -28
 18832              		.cfi_offset 5, -24
 18833              		.cfi_offset 6, -20
 18834              		.cfi_offset 7, -16
 18835              		.cfi_offset 8, -12
 18836              		.cfi_offset 9, -8
 18837              		.cfi_offset 14, -4
 18838              	.LBB2960:
 18839              	.LBB2950:
 18840              	.LBB2947:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 18841              		.loc 1 1229 6 view .LVU4859
 18842 0004 584D     		ldr	r5, .L1369
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 18843              		.loc 1 1229 5 view .LVU4860
 18844 0006 2B7F     		ldrb	r3, [r5, #28]	@ zero_extendqisi2
 18845              	.LBE2947:
 18846              	.LBE2950:
 18847              	.LBE2960:
ARM GAS  /tmp/ccqED0AM.s 			page 511


3291:src/xeq.c     **** 	int a = 0;
 18848              		.loc 1 3291 51 view .LVU4861
 18849 0008 9DB0     		sub	sp, sp, #116
 18850              		.cfi_def_cfa_offset 144
3291:src/xeq.c     **** 	int a = 0;
 18851              		.loc 1 3291 51 view .LVU4862
 18852 000a 8046     		mov	r8, r0
 18853 000c 0C46     		mov	r4, r1
 18854              	.LBB2961:
 18855              	.LBB2951:
 18856              	.LBB2948:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 18857              		.loc 1 1229 5 view .LVU4863
 18858 000e 002B     		cmp	r3, #0
 18859 0010 5DD1     		bne	.L1367
 18860              	.LVL1390:
 18861              	.L1335:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 18862              		.loc 1 1229 5 view .LVU4864
 18863              	.LBE2948:
 18864              	.LBE2951:
 18865              	.LBE2961:
1334:src/xeq.c     **** }
 18866              		.loc 1 1334 2 is_stmt 1 view .LVU4865
 18867              	.LBB2962:
 18868              	.LBB2952:
 18869              	.LBI2952:
 767:src/xeq.c     ****     State2.state_lift = 1;
 18870              		.loc 1 767 6 view .LVU4866
 18871              	.LBB2953:
 768:src/xeq.c     **** }
 18872              		.loc 1 768 5 view .LVU4867
 768:src/xeq.c     **** }
 18873              		.loc 1 768 23 is_stmt 0 view .LVU4868
 18874 0012 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 18875              	.LBE2953:
 18876              	.LBE2952:
 18877              	.LBE2962:
3297:src/xeq.c     **** 		unsigned long long int xv, yv;
 18878              		.loc 1 3297 6 view .LVU4869
 18879 0014 554A     		ldr	r2, .L1369+4
 18880              	.LBB2963:
 18881              	.LBB2956:
 18882              	.LBB2954:
 768:src/xeq.c     **** }
 18883              		.loc 1 768 23 view .LVU4870
 18884 0016 43F04003 		orr	r3, r3, #64
 18885              	.LBE2954:
 18886              	.LBE2956:
 18887              	.LBE2963:
3297:src/xeq.c     **** 		unsigned long long int xv, yv;
 18888              		.loc 1 3297 6 view .LVU4871
 18889 001a 1268     		ldr	r2, [r2]
 18890              	.LBB2964:
 18891              	.LBB2957:
 18892              	.LBB2955:
 768:src/xeq.c     **** }
ARM GAS  /tmp/ccqED0AM.s 			page 512


 18893              		.loc 1 768 23 view .LVU4872
 18894 001c EB75     		strb	r3, [r5, #23]
 18895              	.LBE2955:
 18896              	.LBE2957:
 18897              	.LBE2964:
3297:src/xeq.c     **** 		unsigned long long int xv, yv;
 18898              		.loc 1 3297 2 is_stmt 1 view .LVU4873
3297:src/xeq.c     **** 		unsigned long long int xv, yv;
 18899              		.loc 1 3297 6 is_stmt 0 view .LVU4874
 18900 001e 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
3297:src/xeq.c     **** 		unsigned long long int xv, yv;
 18901              		.loc 1 3297 5 view .LVU4875
 18902 0022 DB07     		lsls	r3, r3, #31
 18903 0024 2CD5     		bpl	.L1336
 18904              	.LBB2965:
3298:src/xeq.c     **** 		int xs, ys;
 18905              		.loc 1 3298 3 is_stmt 1 view .LVU4876
3299:src/xeq.c     **** 
 18906              		.loc 1 3299 3 view .LVU4877
3301:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
 18907              		.loc 1 3301 3 view .LVU4878
 18908              	.LBB2966:
 18909              	.LBI2966:
1442:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 18910              		.loc 1 1442 15 view .LVU4879
 18911              	.LBB2967:
1443:src/xeq.c     **** }
 18912              		.loc 1 1443 2 view .LVU4880
1443:src/xeq.c     **** }
 18913              		.loc 1 1443 9 is_stmt 0 view .LVU4881
 18914 0026 6420     		movs	r0, #100
 18915 0028 FFF7FEFF 		bl	get_reg_n_int
 18916              	.LVL1391:
 18917              	.LBE2967:
 18918              	.LBE2966:
3301:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
 18919              		.loc 1 3301 8 view .LVU4882
 18920 002c 0AAA     		add	r2, sp, #40
 18921 002e FFF7FEFF 		bl	extract_value
 18922              	.LVL1392:
3302:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
 18923              		.loc 1 3302 6 view .LVU4883
 18924 0032 B8F5FA6F 		cmp	r8, #2000
3301:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
 18925              		.loc 1 3301 8 view .LVU4884
 18926 0036 0646     		mov	r6, r0
 18927 0038 0F46     		mov	r7, r1
 18928              	.LVL1393:
3302:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
 18929              		.loc 1 3302 3 is_stmt 1 view .LVU4885
3302:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
 18930              		.loc 1 3302 6 is_stmt 0 view .LVU4886
 18931 003a 54DB     		blt	.L1337
3303:src/xeq.c     **** 			ys = 0;
 18932              		.loc 1 3303 4 is_stmt 1 view .LVU4887
3303:src/xeq.c     **** 			ys = 0;
 18933              		.loc 1 3303 30 is_stmt 0 view .LVU4888
ARM GAS  /tmp/ccqED0AM.s 			page 513


 18934 003c A8F61B08 		subw	r8, r8, #2075
 18935              	.LVL1394:
3303:src/xeq.c     **** 			ys = 0;
 18936              		.loc 1 3303 7 view .LVU4889
 18937 0040 4FEAE879 		asr	r9, r8, #31
 18938              	.LVL1395:
3304:src/xeq.c     **** 		} else
 18939              		.loc 1 3304 4 is_stmt 1 view .LVU4890
 18940 0044 0022     		movs	r2, #0
 18941              	.LVL1396:
 18942              	.L1338:
3308:src/xeq.c     **** 			iszero = 1;
 18943              		.loc 1 3308 3 view .LVU4891
3308:src/xeq.c     **** 			iszero = 1;
 18944              		.loc 1 3308 6 is_stmt 0 view .LVU4892
 18945 0046 56EA0703 		orrs	r3, r6, r7
 18946 004a 43D1     		bne	.L1339
3308:src/xeq.c     **** 			iszero = 1;
 18947              		.loc 1 3308 15 discriminator 1 view .LVU4893
 18948 004c 58EA0903 		orrs	r3, r8, r9
 18949 0050 53D0     		beq	.L1340
 18950              	.L1342:
 18951 0052 0A9B     		ldr	r3, [sp, #40]
3313:src/xeq.c     **** 			if (xs)		// both negative
 18952              		.loc 1 3313 6 view .LVU4894
 18953 0054 9A42     		cmp	r2, r3
3311:src/xeq.c     **** 
 18954              		.loc 1 3311 24 view .LVU4895
 18955 0056 4FF00000 		mov	r0, #0
 18956              	.LVL1397:
3313:src/xeq.c     **** 			if (xs)		// both negative
 18957              		.loc 1 3313 3 is_stmt 1 view .LVU4896
3313:src/xeq.c     **** 			if (xs)		// both negative
 18958              		.loc 1 3313 6 is_stmt 0 view .LVU4897
 18959 005a 53D0     		beq	.L1343
 18960              	.LVL1398:
 18961              	.L1346:
3313:src/xeq.c     **** 			if (xs)		// both negative
 18962              		.loc 1 3313 6 view .LVU4898
 18963              	.LBE2965:
3341:src/xeq.c     **** 	case TST_APX:
 18964              		.loc 1 3341 2 is_stmt 1 view .LVU4899
 18965 005c 062C     		cmp	r4, #6
 18966 005e 30D8     		bhi	.L1352
 18967 0060 DFE804F0 		tbb	[pc, r4]
 18968              	.L1354:
 18969 0064 09       		.byte	(.L1351-.L1354)/2
 18970 0065 58       		.byte	(.L1366-.L1354)/2
 18971 0066 09       		.byte	(.L1351-.L1354)/2
 18972 0067 2E       		.byte	(.L1357-.L1354)/2
 18973 0068 67       		.byte	(.L1356-.L1354)/2
 18974 0069 6C       		.byte	(.L1355-.L1354)/2
 18975 006a 04       		.byte	(.L1353-.L1354)/2
 18976 006b 00       		.p2align 1
 18977              	.L1353:
3348:src/xeq.c     **** 	default:	a = 0;			break;
 18978              		.loc 1 3348 15 view .LVU4900
ARM GAS  /tmp/ccqED0AM.s 			page 514


3348:src/xeq.c     **** 	default:	a = 0;			break;
 18979              		.loc 1 3348 26 is_stmt 0 view .LVU4901
 18980 006c 002B     		cmp	r3, #0
 18981 006e 6AD0     		beq	.L1361
3348:src/xeq.c     **** 	default:	a = 0;			break;
 18982              		.loc 1 3348 26 discriminator 2 view .LVU4902
 18983 0070 0038     		subs	r0, r0, #0
3348:src/xeq.c     **** 	default:	a = 0;			break;
 18984              		.loc 1 3348 26 discriminator 2 view .LVU4903
 18985 0072 18BF     		it	ne
 18986 0074 0120     		movne	r0, #1
 18987              	.LVL1399:
 18988              	.L1351:
3352:src/xeq.c     **** }
 18989              		.loc 1 3352 7 is_stmt 1 view .LVU4904
 18990 0076 FFF7FEFF 		bl	fin_tst
 18991              	.LVL1400:
3353:src/xeq.c     **** 
 18992              		.loc 1 3353 1 is_stmt 0 view .LVU4905
 18993 007a 1DB0     		add	sp, sp, #116
 18994              		.cfi_remember_state
 18995              		.cfi_def_cfa_offset 28
 18996              		@ sp needed
 18997 007c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 18998              	.LVL1401:
 18999              	.L1336:
 19000              		.cfi_restore_state
 19001              	.LBB2968:
3321:src/xeq.c     **** 
 19002              		.loc 1 3321 3 is_stmt 1 view .LVU4906
3323:src/xeq.c     **** 		if (decNumberIsNaN(&x))
 19003              		.loc 1 3323 3 view .LVU4907
 19004              	.LBB2969:
 19005              	.LBI2969:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 19006              		.loc 1 824 12 view .LVU4908
 19007              	.LBB2970:
 825:src/xeq.c     **** }
 19008              		.loc 1 825 2 view .LVU4909
 825:src/xeq.c     **** }
 19009              		.loc 1 825 9 is_stmt 0 view .LVU4910
 19010 0080 0AA8     		add	r0, sp, #40
 19011              	.LVL1402:
 825:src/xeq.c     **** }
 19012              		.loc 1 825 9 view .LVU4911
 19013 0082 6421     		movs	r1, #100
 19014 0084 FFF7FEFF 		bl	getRegister
 19015              	.LVL1403:
 825:src/xeq.c     **** }
 19016              		.loc 1 825 9 view .LVU4912
 19017              	.LBE2970:
 19018              	.LBE2969:
3324:src/xeq.c     **** 			goto flse;
 19019              		.loc 1 3324 3 is_stmt 1 view .LVU4913
3324:src/xeq.c     **** 			goto flse;
 19020              		.loc 1 3324 6 is_stmt 0 view .LVU4914
 19021 0088 9DF83030 		ldrb	r3, [sp, #48]	@ zero_extendqisi2
ARM GAS  /tmp/ccqED0AM.s 			page 515


 19022 008c 13F0300F 		tst	r3, #48
 19023 0090 17D1     		bne	.L1352
3327:src/xeq.c     **** 		if (decNumberIsNaN(&t))
 19024              		.loc 1 3327 3 is_stmt 1 view .LVU4915
 19025 0092 01A8     		add	r0, sp, #4
 19026 0094 4146     		mov	r1, r8
 19027 0096 FFF7FEFF 		bl	getRegister
 19028              	.LVL1404:
3328:src/xeq.c     **** 			goto flse;
 19029              		.loc 1 3328 3 view .LVU4916
3328:src/xeq.c     **** 			goto flse;
 19030              		.loc 1 3328 6 is_stmt 0 view .LVU4917
 19031 009a 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 19032 009e 13F0300F 		tst	r3, #48
 19033 00a2 0ED1     		bne	.L1352
3331:src/xeq.c     **** 			decNumberRnd(&x, &x);
 19034              		.loc 1 3331 3 is_stmt 1 view .LVU4918
3331:src/xeq.c     **** 			decNumberRnd(&x, &x);
 19035              		.loc 1 3331 6 is_stmt 0 view .LVU4919
 19036 00a4 022C     		cmp	r4, #2
 19037 00a6 53D0     		beq	.L1368
 19038              	.L1349:
3336:src/xeq.c     **** 		iszero = dn_eq0(&r);
 19039              		.loc 1 3336 3 is_stmt 1 view .LVU4920
 19040 00a8 01AA     		add	r2, sp, #4
 19041 00aa 0AA9     		add	r1, sp, #40
 19042 00ac 13A8     		add	r0, sp, #76
 19043 00ae FFF7FEFF 		bl	dn_compare
 19044              	.LVL1405:
3337:src/xeq.c     **** 		isneg = decNumberIsNegative(&r);
 19045              		.loc 1 3337 3 view .LVU4921
3337:src/xeq.c     **** 		isneg = decNumberIsNegative(&r);
 19046              		.loc 1 3337 12 is_stmt 0 view .LVU4922
 19047 00b2 13A8     		add	r0, sp, #76
 19048 00b4 FFF7FEFF 		bl	dn_eq0
 19049              	.LVL1406:
3338:src/xeq.c     **** 	}
 19050              		.loc 1 3338 11 view .LVU4923
 19051 00b8 9DF95430 		ldrsb	r3, [sp, #84]
 19052              	.LVL1407:
3338:src/xeq.c     **** 	}
 19053              		.loc 1 3338 3 is_stmt 1 view .LVU4924
3338:src/xeq.c     **** 	}
 19054              		.loc 1 3338 11 is_stmt 0 view .LVU4925
 19055 00bc DB0F     		lsrs	r3, r3, #31
 19056              	.LVL1408:
3338:src/xeq.c     **** 	}
 19057              		.loc 1 3338 11 view .LVU4926
 19058 00be CDE7     		b	.L1346
 19059              	.LVL1409:
 19060              	.L1357:
3338:src/xeq.c     **** 	}
 19061              		.loc 1 3338 11 view .LVU4927
 19062              	.LBE2968:
3345:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 19063              		.loc 1 3345 15 is_stmt 1 view .LVU4928
3345:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
ARM GAS  /tmp/ccqED0AM.s 			page 516


 19064              		.loc 1 3345 25 is_stmt 0 view .LVU4929
 19065 00c0 43BB     		cbnz	r3, .L1366
 19066              	.LVL1410:
 19067              	.L1352:
3345:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 19068              		.loc 1 3345 25 view .LVU4930
 19069 00c2 0020     		movs	r0, #0
 19070              	.LVL1411:
3352:src/xeq.c     **** }
 19071              		.loc 1 3352 7 is_stmt 1 view .LVU4931
 19072 00c4 FFF7FEFF 		bl	fin_tst
 19073              	.LVL1412:
3353:src/xeq.c     **** 
 19074              		.loc 1 3353 1 is_stmt 0 view .LVU4932
 19075 00c8 1DB0     		add	sp, sp, #116
 19076              		.cfi_remember_state
 19077              		.cfi_def_cfa_offset 28
 19078              		@ sp needed
 19079 00ca BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 19080              	.LVL1413:
 19081              	.L1367:
 19082              		.cfi_restore_state
 19083              	.LBB2971:
 19084              	.LBB2958:
 19085              	.LBB2949:
3353:src/xeq.c     **** 
 19086              		.loc 1 3353 1 view .LVU4933
 19087 00ce FFF7FEFF 		bl	process_cmdline.part.0
 19088              	.LVL1414:
3353:src/xeq.c     **** 
 19089              		.loc 1 3353 1 view .LVU4934
 19090 00d2 9EE7     		b	.L1335
 19091              	.LVL1415:
 19092              	.L1339:
3353:src/xeq.c     **** 
 19093              		.loc 1 3353 1 view .LVU4935
 19094              	.LBE2949:
 19095              	.LBE2958:
 19096              	.LBE2971:
 19097              	.LBB2972:
3311:src/xeq.c     **** 
 19098              		.loc 1 3311 4 is_stmt 1 view .LVU4936
3311:src/xeq.c     **** 
 19099              		.loc 1 3311 24 is_stmt 0 view .LVU4937
 19100 00d4 B945     		cmp	r9, r7
 19101 00d6 08BF     		it	eq
 19102 00d8 B045     		cmpeq	r8, r6
 19103 00da BAD1     		bne	.L1342
3311:src/xeq.c     **** 
 19104              		.loc 1 3311 31 discriminator 1 view .LVU4938
 19105 00dc 0A9B     		ldr	r3, [sp, #40]
3311:src/xeq.c     **** 
 19106              		.loc 1 3311 24 discriminator 1 view .LVU4939
 19107 00de 9342     		cmp	r3, r2
 19108 00e0 33D0     		beq	.L1359
3311:src/xeq.c     **** 
 19109              		.loc 1 3311 24 view .LVU4940
ARM GAS  /tmp/ccqED0AM.s 			page 517


 19110 00e2 0020     		movs	r0, #0
 19111 00e4 BAE7     		b	.L1346
 19112              	.LVL1416:
 19113              	.L1337:
3306:src/xeq.c     **** 
 19114              		.loc 1 3306 4 is_stmt 1 view .LVU4941
3306:src/xeq.c     **** 
 19115              		.loc 1 3306 9 is_stmt 0 view .LVU4942
 19116 00e6 4046     		mov	r0, r8
 19117 00e8 FFF7FEFF 		bl	get_reg_n_int
 19118              	.LVL1417:
 19119 00ec 13AA     		add	r2, sp, #76
 19120 00ee FFF7FEFF 		bl	extract_value
 19121              	.LVL1418:
 19122 00f2 139A     		ldr	r2, [sp, #76]
 19123 00f4 8046     		mov	r8, r0
 19124              	.LVL1419:
3306:src/xeq.c     **** 
 19125              		.loc 1 3306 9 view .LVU4943
 19126 00f6 8946     		mov	r9, r1
 19127              	.LVL1420:
3306:src/xeq.c     **** 
 19128              		.loc 1 3306 9 view .LVU4944
 19129 00f8 A5E7     		b	.L1338
 19130              	.L1340:
3306:src/xeq.c     **** 
 19131              		.loc 1 3306 9 view .LVU4945
 19132 00fa 0A9B     		ldr	r3, [sp, #40]
3313:src/xeq.c     **** 			if (xs)		// both negative
 19133              		.loc 1 3313 6 view .LVU4946
 19134 00fc 9A42     		cmp	r2, r3
3309:src/xeq.c     **** 		else
 19135              		.loc 1 3309 11 view .LVU4947
 19136 00fe 4FF00100 		mov	r0, #1
 19137              	.LVL1421:
3313:src/xeq.c     **** 			if (xs)		// both negative
 19138              		.loc 1 3313 3 is_stmt 1 view .LVU4948
3313:src/xeq.c     **** 			if (xs)		// both negative
 19139              		.loc 1 3313 6 is_stmt 0 view .LVU4949
 19140 0102 ABD1     		bne	.L1346
 19141              	.LVL1422:
 19142              	.L1343:
3314:src/xeq.c     **** 				isneg = xv > yv;
 19143              		.loc 1 3314 4 is_stmt 1 view .LVU4950
3314:src/xeq.c     **** 				isneg = xv > yv;
 19144              		.loc 1 3314 7 is_stmt 0 view .LVU4951
 19145 0104 73B1     		cbz	r3, .L1345
3315:src/xeq.c     **** 			else		// both positive
 19146              		.loc 1 3315 5 is_stmt 1 view .LVU4952
3315:src/xeq.c     **** 			else		// both positive
 19147              		.loc 1 3315 16 is_stmt 0 view .LVU4953
 19148 0106 B945     		cmp	r9, r7
 19149 0108 08BF     		it	eq
 19150 010a B045     		cmpeq	r8, r6
 19151 010c 34BF     		ite	cc
 19152 010e 0123     		movcc	r3, #1
 19153 0110 0023     		movcs	r3, #0
ARM GAS  /tmp/ccqED0AM.s 			page 518


 19154              	.LVL1423:
3315:src/xeq.c     **** 			else		// both positive
 19155              		.loc 1 3315 16 view .LVU4954
 19156 0112 A3E7     		b	.L1346
 19157              	.LVL1424:
 19158              	.L1366:
3315:src/xeq.c     **** 			else		// both positive
 19159              		.loc 1 3315 16 view .LVU4955
 19160              	.LBE2972:
3345:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 19161              		.loc 1 3345 25 discriminator 1 view .LVU4956
 19162 0114 B0FA80F0 		clz	r0, r0
 19163              	.LVL1425:
3345:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 19164              		.loc 1 3345 25 discriminator 1 view .LVU4957
 19165 0118 4009     		lsrs	r0, r0, #5
 19166              	.LVL1426:
3352:src/xeq.c     **** }
 19167              		.loc 1 3352 7 is_stmt 1 discriminator 1 view .LVU4958
 19168 011a FFF7FEFF 		bl	fin_tst
 19169              	.LVL1427:
3353:src/xeq.c     **** 
 19170              		.loc 1 3353 1 is_stmt 0 discriminator 1 view .LVU4959
 19171 011e 1DB0     		add	sp, sp, #116
 19172              		.cfi_remember_state
 19173              		.cfi_def_cfa_offset 28
 19174              		@ sp needed
 19175 0120 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 19176              	.LVL1428:
 19177              	.L1345:
 19178              		.cfi_restore_state
 19179              	.LBB2973:
3317:src/xeq.c     **** 		} else
 19180              		.loc 1 3317 5 is_stmt 1 view .LVU4960
3317:src/xeq.c     **** 		} else
 19181              		.loc 1 3317 16 is_stmt 0 view .LVU4961
 19182 0124 4F45     		cmp	r7, r9
 19183 0126 08BF     		it	eq
 19184 0128 4645     		cmpeq	r6, r8
 19185 012a 34BF     		ite	cc
 19186 012c 0123     		movcc	r3, #1
 19187 012e 0023     		movcs	r3, #0
 19188              	.LVL1429:
3317:src/xeq.c     **** 		} else
 19189              		.loc 1 3317 16 view .LVU4962
 19190 0130 94E7     		b	.L1346
 19191              	.LVL1430:
 19192              	.L1356:
3317:src/xeq.c     **** 		} else
 19193              		.loc 1 3317 16 view .LVU4963
 19194              	.LBE2973:
3346:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 19195              		.loc 1 3346 15 is_stmt 1 discriminator 2 view .LVU4964
3346:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 19196              		.loc 1 3346 25 is_stmt 0 discriminator 2 view .LVU4965
 19197 0132 0343     		orrs	r3, r0, r3
 19198              	.LVL1431:
ARM GAS  /tmp/ccqED0AM.s 			page 519


3346:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 19199              		.loc 1 3346 25 discriminator 2 view .LVU4966
 19200 0134 14BF     		ite	ne
 19201 0136 0120     		movne	r0, #1
 19202              	.LVL1432:
3346:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 19203              		.loc 1 3346 25 discriminator 2 view .LVU4967
 19204 0138 0020     		moveq	r0, #0
 19205 013a 9CE7     		b	.L1351
 19206              	.LVL1433:
 19207              	.L1355:
3347:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 19208              		.loc 1 3347 15 is_stmt 1 discriminator 1 view .LVU4968
3347:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 19209              		.loc 1 3347 26 is_stmt 0 discriminator 1 view .LVU4969
 19210 013c 0343     		orrs	r3, r0, r3
 19211              	.LVL1434:
3347:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 19212              		.loc 1 3347 26 discriminator 1 view .LVU4970
 19213 013e 0CBF     		ite	eq
 19214 0140 0120     		moveq	r0, #1
 19215              	.LVL1435:
3347:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 19216              		.loc 1 3347 26 discriminator 1 view .LVU4971
 19217 0142 0020     		movne	r0, #0
 19218 0144 97E7     		b	.L1351
 19219              	.LVL1436:
 19220              	.L1361:
3348:src/xeq.c     **** 	default:	a = 0;			break;
 19221              		.loc 1 3348 26 view .LVU4972
 19222 0146 0120     		movs	r0, #1
 19223              	.LVL1437:
3348:src/xeq.c     **** 	default:	a = 0;			break;
 19224              		.loc 1 3348 26 view .LVU4973
 19225 0148 95E7     		b	.L1351
 19226              	.LVL1438:
 19227              	.L1359:
 19228              	.LBB2974:
3348:src/xeq.c     **** 	default:	a = 0;			break;
 19229              		.loc 1 3348 26 view .LVU4974
 19230 014a 1346     		mov	r3, r2
3311:src/xeq.c     **** 
 19231              		.loc 1 3311 24 view .LVU4975
 19232 014c 0120     		movs	r0, #1
 19233 014e D9E7     		b	.L1343
 19234              	.LVL1439:
 19235              	.L1368:
3311:src/xeq.c     **** 
 19236              		.loc 1 3311 24 view .LVU4976
 19237              	.LBE2974:
 19238              	.LBB2975:
3332:src/xeq.c     **** 			if (cmp < CONST_REG_BASE)
 19239              		.loc 1 3332 4 is_stmt 1 view .LVU4977
 19240 0150 0AA9     		add	r1, sp, #40
 19241 0152 0846     		mov	r0, r1
 19242 0154 FFF7FEFF 		bl	decNumberRnd
 19243              	.LVL1440:
ARM GAS  /tmp/ccqED0AM.s 			page 520


3333:src/xeq.c     **** 				decNumberRnd(&t, &t);
 19244              		.loc 1 3333 4 view .LVU4978
3333:src/xeq.c     **** 				decNumberRnd(&t, &t);
 19245              		.loc 1 3333 7 is_stmt 0 view .LVU4979
 19246 0158 B8F5FA6F 		cmp	r8, #2000
 19247 015c A4DA     		bge	.L1349
3334:src/xeq.c     **** 		}
 19248              		.loc 1 3334 5 is_stmt 1 view .LVU4980
 19249 015e 01A9     		add	r1, sp, #4
 19250 0160 0846     		mov	r0, r1
 19251 0162 FFF7FEFF 		bl	decNumberRnd
 19252              	.LVL1441:
 19253 0166 9FE7     		b	.L1349
 19254              	.L1370:
 19255              		.align	2
 19256              	.L1369:
 19257 0168 00000000 		.word	StateWhileOn
 19258 016c 00000000 		.word	main_ram
 19259              	.LBE2975:
 19260              		.cfi_endproc
 19261              	.LFE188:
 19263              		.section	.text.do_ztst,"ax",%progbits
 19264              		.align	1
 19265              		.p2align 2,,3
 19266              		.syntax unified
 19267              		.thumb
 19268              		.thumb_func
 19269              		.fpu fpv4-sp-d16
 19271              	do_ztst:
 19272              	.LVL1442:
 19273              	.LFB191:
3378:src/xeq.c     **** 	decNumber x, y;
 19274              		.loc 1 3378 79 view -0
 19275              		.cfi_startproc
 19276              		@ args = 0, pretend = 0, frame = 72
 19277              		@ frame_needed = 0, uses_anonymous_args = 0
3379:src/xeq.c     **** 
 19278              		.loc 1 3379 2 view .LVU4982
3381:src/xeq.c     **** 	if (is_intmode()) {
 19279              		.loc 1 3381 2 view .LVU4983
 19280              	.LBB2991:
 19281              	.LBI2991:
1332:src/xeq.c     **** 	process_cmdline();
 19282              		.loc 1 1332 6 view .LVU4984
 19283              	.LBE2991:
1333:src/xeq.c     **** 	set_lift();
 19284              		.loc 1 1333 2 view .LVU4985
 19285              	.LBB3006:
 19286              	.LBB2992:
 19287              	.LBI2992:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 19288              		.loc 1 1226 6 view .LVU4986
 19289              	.LBB2993:
1227:src/xeq.c     **** 
 19290              		.loc 1 1227 2 view .LVU4987
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 19291              		.loc 1 1229 2 view .LVU4988
ARM GAS  /tmp/ccqED0AM.s 			page 521


 19292              	.LBE2993:
 19293              	.LBE2992:
 19294              	.LBE3006:
3378:src/xeq.c     **** 	decNumber x, y;
 19295              		.loc 1 3378 79 is_stmt 0 view .LVU4989
 19296 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 19297              		.cfi_def_cfa_offset 20
 19298              		.cfi_offset 4, -20
 19299              		.cfi_offset 5, -16
 19300              		.cfi_offset 6, -12
 19301              		.cfi_offset 7, -8
 19302              		.cfi_offset 14, -4
 19303              	.LBB3007:
 19304              	.LBB2997:
 19305              	.LBB2994:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 19306              		.loc 1 1229 6 view .LVU4990
 19307 0002 274C     		ldr	r4, .L1388
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 19308              		.loc 1 1229 5 view .LVU4991
 19309 0004 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 19310              	.LBE2994:
 19311              	.LBE2997:
 19312              	.LBE3007:
3378:src/xeq.c     **** 	decNumber x, y;
 19313              		.loc 1 3378 79 view .LVU4992
 19314 0006 93B0     		sub	sp, sp, #76
 19315              		.cfi_def_cfa_offset 96
3378:src/xeq.c     **** 	decNumber x, y;
 19316              		.loc 1 3378 79 view .LVU4993
 19317 0008 0546     		mov	r5, r0
 19318 000a 0F46     		mov	r7, r1
 19319 000c 1646     		mov	r6, r2
 19320              	.LBB3008:
 19321              	.LBB2998:
 19322              	.LBB2995:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 19323              		.loc 1 1229 5 view .LVU4994
 19324 000e 002B     		cmp	r3, #0
 19325 0010 39D1     		bne	.L1386
 19326              	.LVL1443:
 19327              	.L1372:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 19328              		.loc 1 1229 5 view .LVU4995
 19329              	.LBE2995:
 19330              	.LBE2998:
 19331              	.LBE3008:
1334:src/xeq.c     **** }
 19332              		.loc 1 1334 2 is_stmt 1 view .LVU4996
 19333              	.LBB3009:
 19334              	.LBB2999:
 19335              	.LBI2999:
 767:src/xeq.c     ****     State2.state_lift = 1;
 19336              		.loc 1 767 6 view .LVU4997
 19337              	.LBB3000:
 768:src/xeq.c     **** }
 19338              		.loc 1 768 5 view .LVU4998
ARM GAS  /tmp/ccqED0AM.s 			page 522


 768:src/xeq.c     **** }
 19339              		.loc 1 768 23 is_stmt 0 view .LVU4999
 19340 0012 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 19341              	.LBE3000:
 19342              	.LBE2999:
 19343              	.LBE3009:
3382:src/xeq.c     **** 		bad_mode_error();
 19344              		.loc 1 3382 6 view .LVU5000
 19345 0014 234A     		ldr	r2, .L1388+4
 19346              	.LBB3010:
 19347              	.LBB3003:
 19348              	.LBB3001:
 768:src/xeq.c     **** }
 19349              		.loc 1 768 23 view .LVU5001
 19350 0016 43F04003 		orr	r3, r3, #64
 19351              	.LBE3001:
 19352              	.LBE3003:
 19353              	.LBE3010:
3382:src/xeq.c     **** 		bad_mode_error();
 19354              		.loc 1 3382 6 view .LVU5002
 19355 001a 1268     		ldr	r2, [r2]
 19356              	.LBB3011:
 19357              	.LBB3004:
 19358              	.LBB3002:
 768:src/xeq.c     **** }
 19359              		.loc 1 768 23 view .LVU5003
 19360 001c E375     		strb	r3, [r4, #23]
 19361              	.LBE3002:
 19362              	.LBE3004:
 19363              	.LBE3011:
3382:src/xeq.c     **** 		bad_mode_error();
 19364              		.loc 1 3382 2 is_stmt 1 view .LVU5004
3382:src/xeq.c     **** 		bad_mode_error();
 19365              		.loc 1 3382 6 is_stmt 0 view .LVU5005
 19366 001e 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
3382:src/xeq.c     **** 		bad_mode_error();
 19367              		.loc 1 3382 5 view .LVU5006
 19368 0022 DB07     		lsls	r3, r3, #31
 19369 0024 06D5     		bpl	.L1373
3383:src/xeq.c     **** 		return;
 19370              		.loc 1 3383 3 is_stmt 1 view .LVU5007
 19371              	.LBB3012:
 19372              	.LBI3012:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 19373              		.loc 1 575 6 view .LVU5008
 19374              	.LBE3012:
 576:src/xeq.c     **** }
 19375              		.loc 1 576 2 view .LVU5009
 19376              	.LVL1444:
 19377              	.LBB3017:
 19378              	.LBB3013:
 19379              	.LBI3013:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 19380              		.loc 1 546 5 view .LVU5010
 19381              	.LBB3014:
 547:src/xeq.c     **** 		Error = e;
 19382              		.loc 1 547 2 view .LVU5011
ARM GAS  /tmp/ccqED0AM.s 			page 523


 547:src/xeq.c     **** 		Error = e;
 19383              		.loc 1 547 12 is_stmt 0 view .LVU5012
 19384 0026 204B     		ldr	r3, .L1388+8
 547:src/xeq.c     **** 		Error = e;
 19385              		.loc 1 547 5 view .LVU5013
 19386 0028 1A68     		ldr	r2, [r3]
 19387 002a 0AB9     		cbnz	r2, .L1371
 19388              	.LVL1445:
 19389              	.LBB3015:
 19390              	.LBI3015:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 19391              		.loc 1 546 5 is_stmt 1 view .LVU5014
 19392              	.LBB3016:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 19393              		.loc 1 548 3 view .LVU5015
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 19394              		.loc 1 548 9 is_stmt 0 view .LVU5016
 19395 002c 0D22     		movs	r2, #13
 19396 002e 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 19397              		.loc 1 549 3 is_stmt 1 view .LVU5017
 19398              	.LVL1446:
 19399              	.L1371:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 19400              		.loc 1 549 3 is_stmt 0 view .LVU5018
 19401              	.LBE3016:
 19402              	.LBE3015:
 19403              	.LBE3014:
 19404              	.LBE3013:
 19405              	.LBE3017:
3392:src/xeq.c     **** 
 19406              		.loc 1 3392 1 view .LVU5019
 19407 0030 13B0     		add	sp, sp, #76
 19408              		.cfi_remember_state
 19409              		.cfi_def_cfa_offset 20
 19410              		@ sp needed
 19411 0032 F0BD     		pop	{r4, r5, r6, r7, pc}
 19412              	.LVL1447:
 19413              	.L1373:
 19414              		.cfi_restore_state
3386:src/xeq.c     **** 	if (decNumberIsNaN(&x) || decNumberIsNaN(&y) || decNumberIsNaN(re) || decNumberIsNaN(im)) {
 19415              		.loc 1 3386 2 is_stmt 1 view .LVU5020
 19416              	.LBB3018:
 19417              	.LBI3018:
 854:src/xeq.c     **** 	getX(x);
 19418              		.loc 1 854 6 view .LVU5021
 19419              	.LBE3018:
 855:src/xeq.c     **** 	getY(y);
 19420              		.loc 1 855 2 view .LVU5022
 19421              	.LBB3023:
 19422              	.LBB3019:
 19423              	.LBI3019:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 19424              		.loc 1 824 12 view .LVU5023
 19425              	.LBB3020:
 825:src/xeq.c     **** }
 19426              		.loc 1 825 2 view .LVU5024
ARM GAS  /tmp/ccqED0AM.s 			page 524


 825:src/xeq.c     **** }
 19427              		.loc 1 825 9 is_stmt 0 view .LVU5025
 19428 0034 6421     		movs	r1, #100
 19429 0036 6846     		mov	r0, sp
 19430 0038 FFF7FEFF 		bl	getRegister
 19431              	.LVL1448:
 825:src/xeq.c     **** }
 19432              		.loc 1 825 9 view .LVU5026
 19433              	.LBE3020:
 19434              	.LBE3019:
 19435              	.LBE3023:
 856:src/xeq.c     **** }
 19436              		.loc 1 856 2 is_stmt 1 view .LVU5027
 19437              	.LBB3024:
 19438              	.LBB3021:
 19439              	.LBI3021:
 832:src/xeq.c     **** 	getRegister(y, regY_idx);
 19440              		.loc 1 832 6 view .LVU5028
 19441              	.LBB3022:
 833:src/xeq.c     **** }
 19442              		.loc 1 833 2 view .LVU5029
 19443 003c 09A8     		add	r0, sp, #36
 19444              	.LVL1449:
 833:src/xeq.c     **** }
 19445              		.loc 1 833 2 is_stmt 0 view .LVU5030
 19446 003e 6521     		movs	r1, #101
 19447 0040 FFF7FEFF 		bl	getRegister
 19448              	.LVL1450:
 833:src/xeq.c     **** }
 19449              		.loc 1 833 2 view .LVU5031
 19450              	.LBE3022:
 19451              	.LBE3021:
 19452              	.LBE3024:
3387:src/xeq.c     **** 		fin_tst(0);
 19453              		.loc 1 3387 2 is_stmt 1 view .LVU5032
3387:src/xeq.c     **** 		fin_tst(0);
 19454              		.loc 1 3387 25 is_stmt 0 view .LVU5033
 19455 0044 9DF80830 		ldrb	r3, [sp, #8]	@ zero_extendqisi2
 19456 0048 9DF82C20 		ldrb	r2, [sp, #44]	@ zero_extendqisi2
 19457 004c 1343     		orrs	r3, r3, r2
 19458 004e 13F0300F 		tst	r3, #48
 19459 0052 13D1     		bne	.L1375
3387:src/xeq.c     **** 		fin_tst(0);
 19460              		.loc 1 3387 47 discriminator 2 view .LVU5034
 19461 0054 2B7A     		ldrb	r3, [r5, #8]	@ zero_extendqisi2
 19462 0056 13F0300F 		tst	r3, #48
 19463 005a 0FD1     		bne	.L1375
3387:src/xeq.c     **** 		fin_tst(0);
 19464              		.loc 1 3387 69 discriminator 3 view .LVU5035
 19465 005c 3B7A     		ldrb	r3, [r7, #8]	@ zero_extendqisi2
 19466 005e 13F0300F 		tst	r3, #48
 19467 0062 0BD1     		bne	.L1375
3391:src/xeq.c     **** }
 19468              		.loc 1 3391 2 is_stmt 1 view .LVU5036
3391:src/xeq.c     **** }
 19469              		.loc 1 3391 29 is_stmt 0 view .LVU5037
 19470 0064 2946     		mov	r1, r5
ARM GAS  /tmp/ccqED0AM.s 			page 525


 19471 0066 6846     		mov	r0, sp
 19472 0068 FFF7FEFF 		bl	dn_eq
 19473              	.LVL1451:
3391:src/xeq.c     **** }
 19474              		.loc 1 3391 25 view .LVU5038
 19475 006c 003E     		subs	r6, r6, #0
 19476 006e 18BF     		it	ne
 19477 0070 0126     		movne	r6, #1
3391:src/xeq.c     **** }
 19478              		.loc 1 3391 43 view .LVU5039
 19479 0072 58B9     		cbnz	r0, .L1387
 19480              	.L1377:
3391:src/xeq.c     **** }
 19481              		.loc 1 3391 2 discriminator 6 view .LVU5040
 19482 0074 3046     		mov	r0, r6
 19483 0076 FFF7FEFF 		bl	fin_tst
 19484              	.LVL1452:
 19485 007a D9E7     		b	.L1371
 19486              	.L1375:
3388:src/xeq.c     **** 		return;
 19487              		.loc 1 3388 3 is_stmt 1 view .LVU5041
 19488 007c 0020     		movs	r0, #0
 19489 007e FFF7FEFF 		bl	fin_tst
 19490              	.LVL1453:
3389:src/xeq.c     **** 	}
 19491              		.loc 1 3389 3 view .LVU5042
3392:src/xeq.c     **** 
 19492              		.loc 1 3392 1 is_stmt 0 view .LVU5043
 19493 0082 13B0     		add	sp, sp, #76
 19494              		.cfi_remember_state
 19495              		.cfi_def_cfa_offset 20
 19496              		@ sp needed
 19497 0084 F0BD     		pop	{r4, r5, r6, r7, pc}
 19498              	.LVL1454:
 19499              	.L1386:
 19500              		.cfi_restore_state
 19501              	.LBB3025:
 19502              	.LBB3005:
 19503              	.LBB2996:
3392:src/xeq.c     **** 
 19504              		.loc 1 3392 1 view .LVU5044
 19505 0086 FFF7FEFF 		bl	process_cmdline.part.0
 19506              	.LVL1455:
3392:src/xeq.c     **** 
 19507              		.loc 1 3392 1 view .LVU5045
 19508 008a C2E7     		b	.L1372
 19509              	.L1387:
3392:src/xeq.c     **** 
 19510              		.loc 1 3392 1 view .LVU5046
 19511              	.LBE2996:
 19512              	.LBE3005:
 19513              	.LBE3025:
3391:src/xeq.c     **** }
 19514              		.loc 1 3391 46 discriminator 1 view .LVU5047
 19515 008c 3946     		mov	r1, r7
 19516 008e 09A8     		add	r0, sp, #36
 19517 0090 FFF7FEFF 		bl	dn_eq
ARM GAS  /tmp/ccqED0AM.s 			page 526


 19518              	.LVL1456:
 19519 0094 0028     		cmp	r0, #0
 19520 0096 18BF     		it	ne
 19521 0098 86F00106 		eorne	r6, r6, #1
 19522 009c EAE7     		b	.L1377
 19523              	.L1389:
 19524 009e 00BF     		.align	2
 19525              	.L1388:
 19526 00a0 00000000 		.word	StateWhileOn
 19527 00a4 00000000 		.word	main_ram
 19528 00a8 00000000 		.word	Error
 19529              		.cfi_endproc
 19530              	.LFE191:
 19532              		.section	.text.op_query_print,"ax",%progbits
 19533              		.align	1
 19534              		.p2align 2,,3
 19535              		.global	op_query_print
 19536              		.syntax unified
 19537              		.thumb
 19538              		.thumb_func
 19539              		.fpu fpv4-sp-d16
 19541              	op_query_print:
 19542              	.LFB295:
 19543              		.cfi_startproc
 19544              		@ args = 0, pretend = 0, frame = 0
 19545              		@ frame_needed = 0, uses_anonymous_args = 0
 19546              		@ link register save eliminated.
 19547 0000 0120     		movs	r0, #1
 19548 0002 FFF7FEBF 		b	fin_tst
 19549              		.cfi_endproc
 19550              	.LFE295:
 19552 0006 00BF     		.section	.text.check_zero,"ax",%progbits
 19553              		.align	1
 19554              		.p2align 2,,3
 19555              		.global	check_zero
 19556              		.syntax unified
 19557              		.thumb
 19558              		.thumb_func
 19559              		.fpu fpv4-sp-d16
 19561              	check_zero:
 19562              	.LVL1457:
 19563              	.LFB189:
3355:src/xeq.c     **** 	int neg;
 19564              		.loc 1 3355 32 is_stmt 1 view -0
 19565              		.cfi_startproc
 19566              		@ args = 0, pretend = 0, frame = 40
 19567              		@ frame_needed = 0, uses_anonymous_args = 0
3356:src/xeq.c     **** 	int zero;
 19568              		.loc 1 3356 2 view .LVU5049
3357:src/xeq.c     **** 
 19569              		.loc 1 3357 2 view .LVU5050
3359:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 19570              		.loc 1 3359 2 view .LVU5051
3359:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 19571              		.loc 1 3359 6 is_stmt 0 view .LVU5052
 19572 0000 1A4B     		ldr	r3, .L1406
3355:src/xeq.c     **** 	int neg;
ARM GAS  /tmp/ccqED0AM.s 			page 527


 19573              		.loc 1 3355 32 view .LVU5053
 19574 0002 10B5     		push	{r4, lr}
 19575              		.cfi_def_cfa_offset 8
 19576              		.cfi_offset 4, -8
 19577              		.cfi_offset 14, -4
3359:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 19578              		.loc 1 3359 6 view .LVU5054
 19579 0004 1B68     		ldr	r3, [r3]
 19580 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3359:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 19581              		.loc 1 3359 5 view .LVU5055
 19582 000a DB07     		lsls	r3, r3, #31
3355:src/xeq.c     **** 	int neg;
 19583              		.loc 1 3355 32 view .LVU5056
 19584 000c 8AB0     		sub	sp, sp, #40
 19585              		.cfi_def_cfa_offset 48
3355:src/xeq.c     **** 	int neg;
 19586              		.loc 1 3355 32 view .LVU5057
 19587 000e 0446     		mov	r4, r0
3359:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 19588              		.loc 1 3359 5 view .LVU5058
 19589 0010 15D5     		bpl	.L1392
 19590              	.LBB3026:
3360:src/xeq.c     **** 		zero = (xv == 0);
 19591              		.loc 1 3360 3 is_stmt 1 view .LVU5059
 19592              	.LBB3027:
 19593              	.LBI3027:
1442:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 19594              		.loc 1 1442 15 view .LVU5060
 19595              	.LBB3028:
1443:src/xeq.c     **** }
 19596              		.loc 1 1443 2 view .LVU5061
1443:src/xeq.c     **** }
 19597              		.loc 1 1443 9 is_stmt 0 view .LVU5062
 19598 0012 6420     		movs	r0, #100
 19599              	.LVL1458:
1443:src/xeq.c     **** }
 19600              		.loc 1 1443 9 view .LVU5063
 19601 0014 FFF7FEFF 		bl	get_reg_n_int
 19602              	.LVL1459:
 19603              	.LBE3028:
 19604              	.LBE3027:
3360:src/xeq.c     **** 		zero = (xv == 0);
 19605              		.loc 1 3360 37 view .LVU5064
 19606 0018 6A46     		mov	r2, sp
 19607 001a FFF7FEFF 		bl	extract_value
 19608              	.LVL1460:
3361:src/xeq.c     **** 	} else {
 19609              		.loc 1 3361 3 is_stmt 1 view .LVU5065
3361:src/xeq.c     **** 	} else {
 19610              		.loc 1 3361 14 is_stmt 0 view .LVU5066
 19611 001e 50EA0103 		orrs	r3, r0, r1
 19612 0022 0CBF     		ite	eq
 19613 0024 0120     		moveq	r0, #1
 19614              	.LVL1461:
3361:src/xeq.c     **** 	} else {
 19615              		.loc 1 3361 14 view .LVU5067
ARM GAS  /tmp/ccqED0AM.s 			page 528


 19616 0026 0020     		movne	r0, #0
 19617              	.LVL1462:
3361:src/xeq.c     **** 	} else {
 19618              		.loc 1 3361 14 view .LVU5068
 19619              	.LBE3026:
3368:src/xeq.c     **** 		fin_tst(zero && !neg);
 19620              		.loc 1 3368 2 is_stmt 1 view .LVU5069
3368:src/xeq.c     **** 		fin_tst(zero && !neg);
 19621              		.loc 1 3368 5 is_stmt 0 view .LVU5070
 19622 0028 A12C     		cmp	r4, #161
 19623 002a 15D0     		beq	.L1405
 19624              	.L1394:
3371:src/xeq.c     **** }
 19625              		.loc 1 3371 3 is_stmt 1 view .LVU5071
 19626 002c 18B1     		cbz	r0, .L1397
3371:src/xeq.c     **** }
 19627              		.loc 1 3371 3 is_stmt 0 discriminator 1 view .LVU5072
 19628 002e 0098     		ldr	r0, [sp]
 19629              	.LVL1463:
3371:src/xeq.c     **** }
 19630              		.loc 1 3371 3 discriminator 1 view .LVU5073
 19631 0030 0038     		subs	r0, r0, #0
 19632 0032 18BF     		it	ne
 19633 0034 0120     		movne	r0, #1
 19634              	.L1397:
3371:src/xeq.c     **** }
 19635              		.loc 1 3371 3 discriminator 6 view .LVU5074
 19636 0036 FFF7FEFF 		bl	fin_tst
 19637              	.LVL1464:
3372:src/xeq.c     **** 
 19638              		.loc 1 3372 1 discriminator 6 view .LVU5075
 19639 003a 0AB0     		add	sp, sp, #40
 19640              		.cfi_remember_state
 19641              		.cfi_def_cfa_offset 8
 19642              		@ sp needed
 19643 003c 10BD     		pop	{r4, pc}
 19644              	.LVL1465:
 19645              	.L1392:
 19646              		.cfi_restore_state
 19647              	.LBB3029:
3363:src/xeq.c     **** 		getX(&x);
 19648              		.loc 1 3363 3 is_stmt 1 view .LVU5076
3364:src/xeq.c     **** 		neg = decNumberIsNegative(&x);
 19649              		.loc 1 3364 3 view .LVU5077
 19650              	.LBB3030:
 19651              	.LBI3030:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 19652              		.loc 1 824 12 view .LVU5078
 19653              	.LBB3031:
 825:src/xeq.c     **** }
 19654              		.loc 1 825 2 view .LVU5079
 825:src/xeq.c     **** }
 19655              		.loc 1 825 9 is_stmt 0 view .LVU5080
 19656 003e 6421     		movs	r1, #100
 19657 0040 01A8     		add	r0, sp, #4
 19658              	.LVL1466:
 825:src/xeq.c     **** }
ARM GAS  /tmp/ccqED0AM.s 			page 529


 19659              		.loc 1 825 9 view .LVU5081
 19660 0042 FFF7FEFF 		bl	getRegister
 19661              	.LVL1467:
 825:src/xeq.c     **** }
 19662              		.loc 1 825 9 view .LVU5082
 19663              	.LBE3031:
 19664              	.LBE3030:
3365:src/xeq.c     **** 		zero = dn_eq0(&x);
 19665              		.loc 1 3365 3 is_stmt 1 view .LVU5083
3365:src/xeq.c     **** 		zero = dn_eq0(&x);
 19666              		.loc 1 3365 9 is_stmt 0 view .LVU5084
 19667 0046 9DF90C30 		ldrsb	r3, [sp, #12]
3366:src/xeq.c     **** 	}
 19668              		.loc 1 3366 10 view .LVU5085
 19669 004a 01A8     		add	r0, sp, #4
3365:src/xeq.c     **** 		zero = dn_eq0(&x);
 19670              		.loc 1 3365 9 view .LVU5086
 19671 004c DB0F     		lsrs	r3, r3, #31
3365:src/xeq.c     **** 		zero = dn_eq0(&x);
 19672              		.loc 1 3365 7 view .LVU5087
 19673 004e 0093     		str	r3, [sp]
3366:src/xeq.c     **** 	}
 19674              		.loc 1 3366 3 is_stmt 1 view .LVU5088
3366:src/xeq.c     **** 	}
 19675              		.loc 1 3366 10 is_stmt 0 view .LVU5089
 19676 0050 FFF7FEFF 		bl	dn_eq0
 19677              	.LVL1468:
3366:src/xeq.c     **** 	}
 19678              		.loc 1 3366 10 view .LVU5090
 19679              	.LBE3029:
3368:src/xeq.c     **** 		fin_tst(zero && !neg);
 19680              		.loc 1 3368 2 is_stmt 1 view .LVU5091
3368:src/xeq.c     **** 		fin_tst(zero && !neg);
 19681              		.loc 1 3368 5 is_stmt 0 view .LVU5092
 19682 0054 A12C     		cmp	r4, #161
 19683 0056 E9D1     		bne	.L1394
 19684              	.L1405:
3369:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
 19685              		.loc 1 3369 3 is_stmt 1 view .LVU5093
 19686 0058 0028     		cmp	r0, #0
 19687 005a ECD0     		beq	.L1397
3369:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
 19688              		.loc 1 3369 3 is_stmt 0 discriminator 1 view .LVU5094
 19689 005c 0098     		ldr	r0, [sp]
 19690              	.LVL1469:
3369:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
 19691              		.loc 1 3369 3 discriminator 1 view .LVU5095
 19692 005e B0FA80F0 		clz	r0, r0
 19693 0062 4009     		lsrs	r0, r0, #5
3371:src/xeq.c     **** }
 19694              		.loc 1 3371 3 discriminator 1 view .LVU5096
 19695 0064 FFF7FEFF 		bl	fin_tst
 19696              	.LVL1470:
3372:src/xeq.c     **** 
 19697              		.loc 1 3372 1 discriminator 1 view .LVU5097
 19698 0068 0AB0     		add	sp, sp, #40
 19699              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccqED0AM.s 			page 530


 19700              		@ sp needed
 19701 006a 10BD     		pop	{r4, pc}
 19702              	.L1407:
 19703              		.align	2
 19704              	.L1406:
 19705 006c 00000000 		.word	main_ram
 19706              		.cfi_endproc
 19707              	.LFE189:
 19709              		.section	.text.cmdtest,"ax",%progbits
 19710              		.align	1
 19711              		.p2align 2,,3
 19712              		.global	cmdtest
 19713              		.syntax unified
 19714              		.thumb
 19715              		.thumb_func
 19716              		.fpu fpv4-sp-d16
 19718              	cmdtest:
 19719              	.LVL1471:
 19720              	.LFB190:
3374:src/xeq.c     **** 	do_tst(arg, (enum tst_op)(op - RARG_TEST_EQ));
 19721              		.loc 1 3374 46 is_stmt 1 view -0
 19722              		.cfi_startproc
 19723              		@ args = 0, pretend = 0, frame = 0
 19724              		@ frame_needed = 0, uses_anonymous_args = 0
 19725              		@ link register save eliminated.
3375:src/xeq.c     **** }
 19726              		.loc 1 3375 2 view .LVU5099
3375:src/xeq.c     **** }
 19727              		.loc 1 3375 31 is_stmt 0 view .LVU5100
 19728 0000 2D39     		subs	r1, r1, #45
 19729              	.LVL1472:
3375:src/xeq.c     **** }
 19730              		.loc 1 3375 2 view .LVU5101
 19731 0002 C9B2     		uxtb	r1, r1
 19732 0004 FFF7FEBF 		b	do_tst
 19733              	.LVL1473:
3375:src/xeq.c     **** }
 19734              		.loc 1 3375 2 view .LVU5102
 19735              		.cfi_endproc
 19736              	.LFE190:
 19738              		.section	.text.cmdztest,"ax",%progbits
 19739              		.align	1
 19740              		.p2align 2,,3
 19741              		.global	cmdztest
 19742              		.syntax unified
 19743              		.thumb
 19744              		.thumb_func
 19745              		.fpu fpv4-sp-d16
 19747              	cmdztest:
 19748              	.LVL1474:
 19749              	.LFB192:
3394:src/xeq.c     **** 	decNumber re, im;
 19750              		.loc 1 3394 47 is_stmt 1 view -0
 19751              		.cfi_startproc
 19752              		@ args = 0, pretend = 0, frame = 72
 19753              		@ frame_needed = 0, uses_anonymous_args = 0
3395:src/xeq.c     **** 	getRegister(&re, arg);
ARM GAS  /tmp/ccqED0AM.s 			page 531


 19754              		.loc 1 3395 2 view .LVU5104
3396:src/xeq.c     **** 	getRegister(&im, arg + 1);
 19755              		.loc 1 3396 2 view .LVU5105
3394:src/xeq.c     **** 	decNumber re, im;
 19756              		.loc 1 3394 47 is_stmt 0 view .LVU5106
 19757 0000 30B5     		push	{r4, r5, lr}
 19758              		.cfi_def_cfa_offset 12
 19759              		.cfi_offset 4, -12
 19760              		.cfi_offset 5, -8
 19761              		.cfi_offset 14, -4
 19762 0002 0546     		mov	r5, r0
 19763 0004 93B0     		sub	sp, sp, #76
 19764              		.cfi_def_cfa_offset 88
3394:src/xeq.c     **** 	decNumber re, im;
 19765              		.loc 1 3394 47 view .LVU5107
 19766 0006 0C46     		mov	r4, r1
3396:src/xeq.c     **** 	getRegister(&im, arg + 1);
 19767              		.loc 1 3396 2 view .LVU5108
 19768 0008 6846     		mov	r0, sp
 19769              	.LVL1475:
3396:src/xeq.c     **** 	getRegister(&im, arg + 1);
 19770              		.loc 1 3396 2 view .LVU5109
 19771 000a 2946     		mov	r1, r5
 19772              	.LVL1476:
3396:src/xeq.c     **** 	getRegister(&im, arg + 1);
 19773              		.loc 1 3396 2 view .LVU5110
 19774 000c FFF7FEFF 		bl	getRegister
 19775              	.LVL1477:
3397:src/xeq.c     **** 	do_ztst(&re, &im, (enum tst_op)(op - RARG_TEST_ZEQ));
 19776              		.loc 1 3397 2 is_stmt 1 view .LVU5111
 19777 0010 691C     		adds	r1, r5, #1
 19778 0012 09A8     		add	r0, sp, #36
 19779 0014 FFF7FEFF 		bl	getRegister
 19780              	.LVL1478:
3398:src/xeq.c     **** }
 19781              		.loc 1 3398 2 view .LVU5112
3398:src/xeq.c     **** }
 19782              		.loc 1 3398 37 is_stmt 0 view .LVU5113
 19783 0018 A4F13402 		sub	r2, r4, #52
3398:src/xeq.c     **** }
 19784              		.loc 1 3398 2 view .LVU5114
 19785 001c D2B2     		uxtb	r2, r2
 19786 001e 09A9     		add	r1, sp, #36
 19787 0020 6846     		mov	r0, sp
 19788 0022 FFF7FEFF 		bl	do_ztst
 19789              	.LVL1479:
3399:src/xeq.c     **** 
 19790              		.loc 1 3399 1 view .LVU5115
 19791 0026 13B0     		add	sp, sp, #76
 19792              		.cfi_def_cfa_offset 12
 19793              		@ sp needed
 19794 0028 30BD     		pop	{r4, r5, pc}
3399:src/xeq.c     **** 
 19795              		.loc 1 3399 1 view .LVU5116
 19796              		.cfi_endproc
 19797              	.LFE192:
 19799 002a 00BF     		.section	.text.cmdlincdec,"ax",%progbits
ARM GAS  /tmp/ccqED0AM.s 			page 532


 19800              		.align	1
 19801              		.p2align 2,,3
 19802              		.global	cmdlincdec
 19803              		.syntax unified
 19804              		.thumb
 19805              		.thumb_func
 19806              		.fpu fpv4-sp-d16
 19808              	cmdlincdec:
 19809              	.LVL1480:
 19810              	.LFB194:
3429:src/xeq.c     **** 	incdec(arg, op == RARG_INC);
 19811              		.loc 1 3429 49 is_stmt 1 view -0
 19812              		.cfi_startproc
 19813              		@ args = 0, pretend = 0, frame = 0
 19814              		@ frame_needed = 0, uses_anonymous_args = 0
 19815              		@ link register save eliminated.
3430:src/xeq.c     **** }
 19816              		.loc 1 3430 2 view .LVU5118
 19817 0000 A1F14101 		sub	r1, #65
 19818              	.LVL1481:
3430:src/xeq.c     **** }
 19819              		.loc 1 3430 2 is_stmt 0 view .LVU5119
 19820 0004 B1FA81F1 		clz	r1, r1
 19821 0008 4909     		lsrs	r1, r1, #5
 19822 000a FFF7FEBF 		b	incdec
 19823              	.LVL1482:
3430:src/xeq.c     **** }
 19824              		.loc 1 3430 2 view .LVU5120
 19825              		.cfi_endproc
 19826              	.LFE194:
 19828 000e 00BF     		.section	.text.cmdloopz,"ax",%progbits
 19829              		.align	1
 19830              		.p2align 2,,3
 19831              		.global	cmdloopz
 19832              		.syntax unified
 19833              		.thumb
 19834              		.thumb_func
 19835              		.fpu fpv4-sp-d16
 19837              	cmdloopz:
 19838              	.LVL1483:
 19839              	.LFB195:
3433:src/xeq.c     **** 	fin_tst(incdec(arg, op == RARG_ISZ));
 19840              		.loc 1 3433 47 is_stmt 1 view -0
 19841              		.cfi_startproc
 19842              		@ args = 0, pretend = 0, frame = 0
 19843              		@ frame_needed = 0, uses_anonymous_args = 0
3434:src/xeq.c     **** }
 19844              		.loc 1 3434 2 view .LVU5122
3433:src/xeq.c     **** 	fin_tst(incdec(arg, op == RARG_ISZ));
 19845              		.loc 1 3433 47 is_stmt 0 view .LVU5123
 19846 0000 08B5     		push	{r3, lr}
 19847              		.cfi_def_cfa_offset 8
 19848              		.cfi_offset 3, -8
 19849              		.cfi_offset 14, -4
3434:src/xeq.c     **** }
 19850              		.loc 1 3434 2 view .LVU5124
 19851 0002 A1F13F01 		sub	r1, #63
ARM GAS  /tmp/ccqED0AM.s 			page 533


 19852              	.LVL1484:
3434:src/xeq.c     **** }
 19853              		.loc 1 3434 2 view .LVU5125
 19854 0006 B1FA81F1 		clz	r1, r1
 19855 000a 4909     		lsrs	r1, r1, #5
 19856 000c FFF7FEFF 		bl	incdec
 19857              	.LVL1485:
3435:src/xeq.c     **** 
 19858              		.loc 1 3435 1 view .LVU5126
 19859 0010 BDE80840 		pop	{r3, lr}
 19860              		.cfi_restore 14
 19861              		.cfi_restore 3
 19862              		.cfi_def_cfa_offset 0
3434:src/xeq.c     **** }
 19863              		.loc 1 3434 2 view .LVU5127
 19864 0014 FFF7FEBF 		b	fin_tst
 19865              	.LVL1486:
 19866              		.cfi_endproc
 19867              	.LFE195:
 19869              		.section	.text.cmdloop,"ax",%progbits
 19870              		.align	1
 19871              		.p2align 2,,3
 19872              		.global	cmdloop
 19873              		.syntax unified
 19874              		.thumb
 19875              		.thumb_func
 19876              		.fpu fpv4-sp-d16
 19878              	cmdloop:
 19879              	.LVL1487:
 19880              	.LFB196:
3437:src/xeq.c     **** 	if (is_intmode()) {
 19881              		.loc 1 3437 46 is_stmt 1 view -0
 19882              		.cfi_startproc
 19883              		@ args = 0, pretend = 0, frame = 184
 19884              		@ frame_needed = 0, uses_anonymous_args = 0
3438:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 19885              		.loc 1 3438 2 view .LVU5129
3438:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 19886              		.loc 1 3438 6 is_stmt 0 view .LVU5130
 19887 0000 7C4B     		ldr	r3, .L1454
3437:src/xeq.c     **** 	if (is_intmode()) {
 19888              		.loc 1 3437 46 view .LVU5131
 19889 0002 F0B5     		push	{r4, r5, r6, r7, lr}
 19890              		.cfi_def_cfa_offset 20
 19891              		.cfi_offset 4, -20
 19892              		.cfi_offset 5, -16
 19893              		.cfi_offset 6, -12
 19894              		.cfi_offset 7, -8
 19895              		.cfi_offset 14, -4
3438:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 19896              		.loc 1 3438 6 view .LVU5132
 19897 0004 1B68     		ldr	r3, [r3]
 19898 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3438:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 19899              		.loc 1 3438 5 view .LVU5133
 19900 000a DB07     		lsls	r3, r3, #31
3437:src/xeq.c     **** 	if (is_intmode()) {
ARM GAS  /tmp/ccqED0AM.s 			page 534


 19901              		.loc 1 3437 46 view .LVU5134
 19902 000c AFB0     		sub	sp, sp, #188
 19903              		.cfi_def_cfa_offset 208
3437:src/xeq.c     **** 	if (is_intmode()) {
 19904              		.loc 1 3437 46 view .LVU5135
 19905 000e 0C46     		mov	r4, r1
 19906 0010 0546     		mov	r5, r0
3438:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 19907              		.loc 1 3438 5 view .LVU5136
 19908 0012 7BD4     		bmi	.L1446
 19909              	.LBB3032:
3460:src/xeq.c     **** 
 19910              		.loc 1 3460 3 is_stmt 1 view .LVU5137
3462:src/xeq.c     **** 
 19911              		.loc 1 3462 3 view .LVU5138
 19912 0014 2946     		mov	r1, r5
 19913              	.LVL1488:
3462:src/xeq.c     **** 
 19914              		.loc 1 3462 3 is_stmt 0 view .LVU5139
 19915 0016 6846     		mov	r0, sp
 19916              	.LVL1489:
3462:src/xeq.c     **** 
 19917              		.loc 1 3462 3 view .LVU5140
 19918 0018 FFF7FEFF 		bl	getRegister
 19919              	.LVL1490:
3466:src/xeq.c     **** 		decNumberTrunc(&n, &f);			// n = nnnnn
 19920              		.loc 1 3466 3 is_stmt 1 view .LVU5141
 19921 001c 6946     		mov	r1, sp
 19922 001e 12A8     		add	r0, sp, #72
 19923 0020 FFF7FEFF 		bl	dn_abs
 19924              	.LVL1491:
3467:src/xeq.c     **** 		dn_subtract(&u, &f, &n);		// u = .fffii
 19925              		.loc 1 3467 3 view .LVU5142
 19926 0024 12A9     		add	r1, sp, #72
 19927 0026 1BA8     		add	r0, sp, #108
 19928 0028 FFF7FEFF 		bl	decNumberTrunc
 19929              	.LVL1492:
3468:src/xeq.c     **** 		if (decNumberIsNegative(&x))
 19930              		.loc 1 3468 3 view .LVU5143
 19931 002c 1BAA     		add	r2, sp, #108
 19932 002e 12A9     		add	r1, sp, #72
 19933 0030 24A8     		add	r0, sp, #144
 19934 0032 FFF7FEFF 		bl	dn_subtract
 19935              	.LVL1493:
3469:src/xeq.c     **** 			dn_minus(&n, &n);
 19936              		.loc 1 3469 3 view .LVU5144
3469:src/xeq.c     **** 			dn_minus(&n, &n);
 19937              		.loc 1 3469 6 is_stmt 0 view .LVU5145
 19938 0036 9DF90830 		ldrsb	r3, [sp, #8]
 19939 003a 002B     		cmp	r3, #0
 19940 003c C0F29080 		blt	.L1447
 19941              	.L1424:
3471:src/xeq.c     **** 		decNumberTrunc(&f, &i);			// f = fff
 19942              		.loc 1 3471 3 is_stmt 1 view .LVU5146
 19943 0040 0322     		movs	r2, #3
 19944 0042 24A9     		add	r1, sp, #144
 19945 0044 09A8     		add	r0, sp, #36
ARM GAS  /tmp/ccqED0AM.s 			page 535


 19946 0046 FFF7FEFF 		bl	dn_mulpow10
 19947              	.LVL1494:
3472:src/xeq.c     **** 		dn_subtract(&i, &i, &f);		// i = .ii
 19948              		.loc 1 3472 3 view .LVU5147
 19949 004a 09A9     		add	r1, sp, #36
 19950 004c 12A8     		add	r0, sp, #72
 19951 004e FFF7FEFF 		bl	decNumberTrunc
 19952              	.LVL1495:
3473:src/xeq.c     **** 		dn_mul100(&x, &i);
 19953              		.loc 1 3473 3 view .LVU5148
 19954 0052 09A9     		add	r1, sp, #36
 19955 0054 12AA     		add	r2, sp, #72
 19956 0056 0846     		mov	r0, r1
 19957 0058 FFF7FEFF 		bl	dn_subtract
 19958              	.LVL1496:
3474:src/xeq.c     **** 		decNumberTrunc(&i, &x);			// i = ii
 19959              		.loc 1 3474 3 view .LVU5149
 19960 005c 09A9     		add	r1, sp, #36
 19961 005e 6846     		mov	r0, sp
 19962 0060 FFF7FEFF 		bl	dn_mul100
 19963              	.LVL1497:
3475:src/xeq.c     **** 		if (dn_eq0(&i))
 19964              		.loc 1 3475 3 view .LVU5150
 19965 0064 6946     		mov	r1, sp
 19966 0066 09A8     		add	r0, sp, #36
 19967 0068 FFF7FEFF 		bl	decNumberTrunc
 19968              	.LVL1498:
3476:src/xeq.c     **** 			dn_1(&i);
 19969              		.loc 1 3476 3 view .LVU5151
3476:src/xeq.c     **** 			dn_1(&i);
 19970              		.loc 1 3476 7 is_stmt 0 view .LVU5152
 19971 006c 09A8     		add	r0, sp, #36
 19972 006e FFF7FEFF 		bl	dn_eq0
 19973              	.LVL1499:
3476:src/xeq.c     **** 			dn_1(&i);
 19974              		.loc 1 3476 6 view .LVU5153
 19975 0072 98BB     		cbnz	r0, .L1448
3479:src/xeq.c     **** 			dn_add(&n, &n, &i);
 19976              		.loc 1 3479 3 is_stmt 1 view .LVU5154
3480:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 19977              		.loc 1 3480 4 is_stmt 0 view .LVU5155
 19978 0074 1BA9     		add	r1, sp, #108
3479:src/xeq.c     **** 			dn_add(&n, &n, &i);
 19979              		.loc 1 3479 6 view .LVU5156
 19980 0076 3B2C     		cmp	r4, #59
3480:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 19981              		.loc 1 3480 4 view .LVU5157
 19982 0078 09AA     		add	r2, sp, #36
 19983 007a 0846     		mov	r0, r1
3479:src/xeq.c     **** 			dn_add(&n, &n, &i);
 19984              		.loc 1 3479 6 view .LVU5158
 19985 007c 36D0     		beq	.L1426
 19986              	.L1451:
3479:src/xeq.c     **** 			dn_add(&n, &n, &i);
 19987              		.loc 1 3479 22 discriminator 1 view .LVU5159
 19988 007e 3D2C     		cmp	r4, #61
 19989 0080 1DD1     		bne	.L1427
ARM GAS  /tmp/ccqED0AM.s 			page 536


3480:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 19990              		.loc 1 3480 4 is_stmt 1 view .LVU5160
 19991 0082 FFF7FEFF 		bl	dn_add
 19992              	.LVL1500:
3481:src/xeq.c     **** 			if (op == RARG_ISE)
 19993              		.loc 1 3481 4 view .LVU5161
 19994 0086 1BAA     		add	r2, sp, #108
 19995 0088 12A9     		add	r1, sp, #72
 19996 008a 6846     		mov	r0, sp
 19997 008c FFF7FEFF 		bl	dn_compare
 19998              	.LVL1501:
3482:src/xeq.c     **** 				fin_tst(dn_gt0(&x));
 19999              		.loc 1 3482 4 view .LVU5162
3483:src/xeq.c     **** 			else
 20000              		.loc 1 3483 5 view .LVU5163
3483:src/xeq.c     **** 			else
 20001              		.loc 1 3483 13 is_stmt 0 view .LVU5164
 20002 0090 6846     		mov	r0, sp
 20003 0092 FFF7FEFF 		bl	dn_le0
 20004              	.LVL1502:
3483:src/xeq.c     **** 			else
 20005              		.loc 1 3483 5 view .LVU5165
 20006 0096 B0FA80F0 		clz	r0, r0
 20007 009a 4009     		lsrs	r0, r0, #5
 20008 009c FFF7FEFF 		bl	fin_tst
 20009              	.LVL1503:
 20010              	.L1428:
3496:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
 20011              		.loc 1 3496 3 is_stmt 1 view .LVU5166
3496:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
 20012              		.loc 1 3496 6 is_stmt 0 view .LVU5167
 20013 00a0 9DF97430 		ldrsb	r3, [sp, #116]
 20014 00a4 002B     		cmp	r3, #0
3497:src/xeq.c     **** 		} else
 20015              		.loc 1 3497 4 view .LVU5168
 20016 00a6 24AA     		add	r2, sp, #144
 20017 00a8 1BA9     		add	r1, sp, #108
 20018 00aa 6846     		mov	r0, sp
3496:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
 20019              		.loc 1 3496 6 view .LVU5169
 20020 00ac 55DB     		blt	.L1449
3499:src/xeq.c     **** 		setRegister(arg, &x);
 20021              		.loc 1 3499 4 is_stmt 1 view .LVU5170
 20022 00ae FFF7FEFF 		bl	dn_add
 20023              	.LVL1504:
 20024              	.L1431:
3500:src/xeq.c     **** 	}
 20025              		.loc 1 3500 3 discriminator 2 view .LVU5171
 20026 00b2 6946     		mov	r1, sp
 20027 00b4 2846     		mov	r0, r5
 20028 00b6 FFF7FEFF 		bl	setRegister
 20029              	.LVL1505:
 20030              	.L1414:
3500:src/xeq.c     **** 	}
 20031              		.loc 1 3500 3 is_stmt 0 discriminator 2 view .LVU5172
 20032              	.LBE3032:
3502:src/xeq.c     **** 
ARM GAS  /tmp/ccqED0AM.s 			page 537


 20033              		.loc 1 3502 1 view .LVU5173
 20034 00ba 2FB0     		add	sp, sp, #188
 20035              		.cfi_remember_state
 20036              		.cfi_def_cfa_offset 20
 20037              		@ sp needed
 20038 00bc F0BD     		pop	{r4, r5, r6, r7, pc}
 20039              	.LVL1506:
 20040              	.L1427:
 20041              		.cfi_restore_state
 20042              	.LBB3033:
3487:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 20043              		.loc 1 3487 4 is_stmt 1 view .LVU5174
 20044 00be FFF7FEFF 		bl	dn_subtract
 20045              	.LVL1507:
3488:src/xeq.c     **** 			if (op == RARG_DSL)
 20046              		.loc 1 3488 4 view .LVU5175
 20047 00c2 1BAA     		add	r2, sp, #108
 20048 00c4 12A9     		add	r1, sp, #72
 20049 00c6 6846     		mov	r0, sp
 20050 00c8 FFF7FEFF 		bl	dn_compare
 20051              	.LVL1508:
3489:src/xeq.c     **** 				fin_tst(dn_le0(&x));
 20052              		.loc 1 3489 4 view .LVU5176
3489:src/xeq.c     **** 				fin_tst(dn_le0(&x));
 20053              		.loc 1 3489 7 is_stmt 0 view .LVU5177
 20054 00cc 3C2C     		cmp	r4, #60
3490:src/xeq.c     **** 			else
 20055              		.loc 1 3490 5 view .LVU5178
 20056 00ce 6846     		mov	r0, sp
3489:src/xeq.c     **** 				fin_tst(dn_le0(&x));
 20057              		.loc 1 3489 7 view .LVU5179
 20058 00d0 6AD0     		beq	.L1450
3492:src/xeq.c     **** 		}
 20059              		.loc 1 3492 5 is_stmt 1 view .LVU5180
 20060 00d2 FFF7FEFF 		bl	dn_lt0
 20061              	.LVL1509:
 20062 00d6 FFF7FEFF 		bl	fin_tst
 20063              	.LVL1510:
 20064 00da E1E7     		b	.L1428
 20065              	.L1448:
3477:src/xeq.c     **** 
 20066              		.loc 1 3477 4 view .LVU5181
 20067 00dc 09A8     		add	r0, sp, #36
 20068 00de FFF7FEFF 		bl	dn_1
 20069              	.LVL1511:
3479:src/xeq.c     **** 			dn_add(&n, &n, &i);
 20070              		.loc 1 3479 3 view .LVU5182
3480:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 20071              		.loc 1 3480 4 is_stmt 0 view .LVU5183
 20072 00e2 1BA9     		add	r1, sp, #108
3479:src/xeq.c     **** 			dn_add(&n, &n, &i);
 20073              		.loc 1 3479 6 view .LVU5184
 20074 00e4 3B2C     		cmp	r4, #59
3480:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 20075              		.loc 1 3480 4 view .LVU5185
 20076 00e6 09AA     		add	r2, sp, #36
 20077 00e8 0846     		mov	r0, r1
ARM GAS  /tmp/ccqED0AM.s 			page 538


3479:src/xeq.c     **** 			dn_add(&n, &n, &i);
 20078              		.loc 1 3479 6 view .LVU5186
 20079 00ea C8D1     		bne	.L1451
 20080              	.L1426:
3480:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 20081              		.loc 1 3480 4 is_stmt 1 view .LVU5187
 20082 00ec FFF7FEFF 		bl	dn_add
 20083              	.LVL1512:
3481:src/xeq.c     **** 			if (op == RARG_ISE)
 20084              		.loc 1 3481 4 view .LVU5188
 20085 00f0 1BAA     		add	r2, sp, #108
 20086 00f2 12A9     		add	r1, sp, #72
 20087 00f4 6846     		mov	r0, sp
 20088 00f6 FFF7FEFF 		bl	dn_compare
 20089              	.LVL1513:
3482:src/xeq.c     **** 				fin_tst(dn_gt0(&x));
 20090              		.loc 1 3482 4 view .LVU5189
3485:src/xeq.c     **** 		} else {
 20091              		.loc 1 3485 5 view .LVU5190
3485:src/xeq.c     **** 		} else {
 20092              		.loc 1 3485 13 is_stmt 0 view .LVU5191
 20093 00fa 6846     		mov	r0, sp
 20094 00fc FFF7FEFF 		bl	dn_lt0
 20095              	.LVL1514:
3485:src/xeq.c     **** 		} else {
 20096              		.loc 1 3485 5 view .LVU5192
 20097 0100 B0FA80F0 		clz	r0, r0
 20098 0104 4009     		lsrs	r0, r0, #5
 20099 0106 FFF7FEFF 		bl	fin_tst
 20100              	.LVL1515:
 20101 010a C9E7     		b	.L1428
 20102              	.LVL1516:
 20103              	.L1446:
3485:src/xeq.c     **** 		} else {
 20104              		.loc 1 3485 5 view .LVU5193
 20105              	.LBE3033:
 20106              	.LBB3034:
3439:src/xeq.c     **** 		int xs;
 20107              		.loc 1 3439 3 is_stmt 1 view .LVU5194
3439:src/xeq.c     **** 		int xs;
 20108              		.loc 1 3439 21 is_stmt 0 view .LVU5195
 20109 010c FFF7FEFF 		bl	get_reg_n_int
 20110              	.LVL1517:
3440:src/xeq.c     **** 		unsigned long long int xv;
 20111              		.loc 1 3440 3 is_stmt 1 view .LVU5196
3441:src/xeq.c     **** 
 20112              		.loc 1 3441 3 view .LVU5197
3443:src/xeq.c     **** 			x = intAdd(x, 1LL);
 20113              		.loc 1 3443 3 view .LVU5198
3443:src/xeq.c     **** 			x = intAdd(x, 1LL);
 20114              		.loc 1 3443 6 is_stmt 0 view .LVU5199
 20115 0110 3B2C     		cmp	r4, #59
3444:src/xeq.c     **** 		else
 20116              		.loc 1 3444 8 view .LVU5200
 20117 0112 4FF00102 		mov	r2, #1
 20118 0116 4FF00003 		mov	r3, #0
3443:src/xeq.c     **** 			x = intAdd(x, 1LL);
ARM GAS  /tmp/ccqED0AM.s 			page 539


 20119              		.loc 1 3443 6 view .LVU5201
 20120 011a 4AD0     		beq	.L1416
3443:src/xeq.c     **** 			x = intAdd(x, 1LL);
 20121              		.loc 1 3443 22 discriminator 1 view .LVU5202
 20122 011c 3D2C     		cmp	r4, #61
 20123 011e 24D1     		bne	.L1452
3444:src/xeq.c     **** 		else
 20124              		.loc 1 3444 4 is_stmt 1 view .LVU5203
3444:src/xeq.c     **** 		else
 20125              		.loc 1 3444 8 is_stmt 0 view .LVU5204
 20126 0120 FFF7FEFF 		bl	intAdd
 20127              	.LVL1518:
3444:src/xeq.c     **** 		else
 20128              		.loc 1 3444 8 view .LVU5205
 20129 0124 0646     		mov	r6, r0
 20130              	.LBB3035:
 20131              	.LBB3036:
1423:src/xeq.c     **** }
 20132              		.loc 1 1423 8 view .LVU5206
 20133 0126 2846     		mov	r0, r5
 20134              	.LBE3036:
 20135              	.LBE3035:
3444:src/xeq.c     **** 		else
 20136              		.loc 1 3444 8 view .LVU5207
 20137 0128 0C46     		mov	r4, r1
 20138              	.LVL1519:
3447:src/xeq.c     **** 
 20139              		.loc 1 3447 3 is_stmt 1 view .LVU5208
3447:src/xeq.c     **** 
 20140              		.loc 1 3447 3 is_stmt 0 view .LVU5209
 20141 012a CDE92461 		strd	r6, r1, [sp, #144]
 20142              	.LVL1520:
 20143              	.LBB3042:
 20144              	.LBI3035:
1422:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 20145              		.loc 1 1422 6 is_stmt 1 view .LVU5210
 20146              	.LBB3037:
1423:src/xeq.c     **** }
 20147              		.loc 1 1423 2 view .LVU5211
1423:src/xeq.c     **** }
 20148              		.loc 1 1423 8 is_stmt 0 view .LVU5212
 20149 012e FFF7FEFF 		bl	get_reg_n
 20150              	.LVL1521:
1423:src/xeq.c     **** }
 20151              		.loc 1 1423 2 view .LVU5213
 20152 0132 24A9     		add	r1, sp, #144
 20153 0134 0822     		movs	r2, #8
 20154 0136 FFF7FEFF 		bl	xcopy
 20155              	.LVL1522:
1423:src/xeq.c     **** }
 20156              		.loc 1 1423 2 view .LVU5214
 20157              	.LBE3037:
 20158              	.LBE3042:
3449:src/xeq.c     **** 		if (op == RARG_ISG)
 20159              		.loc 1 3449 3 is_stmt 1 view .LVU5215
3449:src/xeq.c     **** 		if (op == RARG_ISG)
 20160              		.loc 1 3449 8 is_stmt 0 view .LVU5216
ARM GAS  /tmp/ccqED0AM.s 			page 540


 20161 013a 24AA     		add	r2, sp, #144
 20162 013c 3046     		mov	r0, r6
 20163 013e 2146     		mov	r1, r4
 20164 0140 FFF7FEFF 		bl	extract_value
 20165              	.LVL1523:
3455:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20166              		.loc 1 3455 18 view .LVU5217
 20167 0144 249B     		ldr	r3, [sp, #144]
 20168              	.LVL1524:
3450:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
 20169              		.loc 1 3450 3 is_stmt 1 view .LVU5218
3452:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 20170              		.loc 1 3452 8 view .LVU5219
3454:src/xeq.c     **** 			fin_tst(! (xs == 0 || xv == 0));	// >= 0
 20171              		.loc 1 3454 8 view .LVU5220
3455:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20172              		.loc 1 3455 4 view .LVU5221
 20173 0146 23B1     		cbz	r3, .L1435
3455:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20174              		.loc 1 3455 4 is_stmt 0 discriminator 1 view .LVU5222
 20175 0148 50EA0103 		orrs	r3, r0, r1
 20176 014c 14BF     		ite	ne
 20177 014e 0123     		movne	r3, #1
 20178 0150 0023     		moveq	r3, #0
 20179              	.L1435:
3455:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20180              		.loc 1 3455 4 discriminator 6 view .LVU5223
 20181 0152 1846     		mov	r0, r3
 20182              	.LVL1525:
3455:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20183              		.loc 1 3455 4 discriminator 6 view .LVU5224
 20184 0154 FFF7FEFF 		bl	fin_tst
 20185              	.LVL1526:
 20186 0158 AFE7     		b	.L1414
 20187              	.L1449:
3455:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20188              		.loc 1 3455 4 discriminator 6 view .LVU5225
 20189              	.LBE3034:
 20190              	.LBB3047:
3497:src/xeq.c     **** 		} else
 20191              		.loc 1 3497 4 is_stmt 1 view .LVU5226
 20192 015a FFF7FEFF 		bl	dn_subtract
 20193              	.LVL1527:
 20194 015e A8E7     		b	.L1431
 20195              	.L1447:
3470:src/xeq.c     **** 		dn_mulpow10(&i, &u, 3);			// i = fff.ii
 20196              		.loc 1 3470 4 view .LVU5227
 20197 0160 1BA9     		add	r1, sp, #108
 20198 0162 0846     		mov	r0, r1
 20199 0164 FFF7FEFF 		bl	dn_minus
 20200              	.LVL1528:
 20201 0168 6AE7     		b	.L1424
 20202              	.LVL1529:
 20203              	.L1452:
3470:src/xeq.c     **** 		dn_mulpow10(&i, &u, 3);			// i = fff.ii
 20204              		.loc 1 3470 4 is_stmt 0 view .LVU5228
 20205              	.LBE3047:
ARM GAS  /tmp/ccqED0AM.s 			page 541


 20206              	.LBB3048:
3446:src/xeq.c     **** 		set_reg_n_int(arg, x);
 20207              		.loc 1 3446 4 is_stmt 1 view .LVU5229
3446:src/xeq.c     **** 		set_reg_n_int(arg, x);
 20208              		.loc 1 3446 8 is_stmt 0 view .LVU5230
 20209 016a FFF7FEFF 		bl	intSubtract
 20210              	.LVL1530:
3446:src/xeq.c     **** 		set_reg_n_int(arg, x);
 20211              		.loc 1 3446 8 view .LVU5231
 20212 016e 0746     		mov	r7, r0
 20213              	.LBB3043:
 20214              	.LBB3038:
1423:src/xeq.c     **** }
 20215              		.loc 1 1423 8 view .LVU5232
 20216 0170 2846     		mov	r0, r5
 20217              	.LBE3038:
 20218              	.LBE3043:
3446:src/xeq.c     **** 		set_reg_n_int(arg, x);
 20219              		.loc 1 3446 8 view .LVU5233
 20220 0172 0E46     		mov	r6, r1
 20221              	.LVL1531:
3447:src/xeq.c     **** 
 20222              		.loc 1 3447 3 is_stmt 1 view .LVU5234
3447:src/xeq.c     **** 
 20223              		.loc 1 3447 3 is_stmt 0 view .LVU5235
 20224 0174 CDE92471 		strd	r7, r1, [sp, #144]
 20225              	.LVL1532:
 20226              	.LBB3044:
1422:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 20227              		.loc 1 1422 6 is_stmt 1 view .LVU5236
 20228              	.LBB3039:
1423:src/xeq.c     **** }
 20229              		.loc 1 1423 2 view .LVU5237
1423:src/xeq.c     **** }
 20230              		.loc 1 1423 8 is_stmt 0 view .LVU5238
 20231 0178 FFF7FEFF 		bl	get_reg_n
 20232              	.LVL1533:
1423:src/xeq.c     **** }
 20233              		.loc 1 1423 2 view .LVU5239
 20234 017c 24A9     		add	r1, sp, #144
 20235 017e 0822     		movs	r2, #8
 20236 0180 FFF7FEFF 		bl	xcopy
 20237              	.LVL1534:
1423:src/xeq.c     **** }
 20238              		.loc 1 1423 2 view .LVU5240
 20239              	.LBE3039:
 20240              	.LBE3044:
3449:src/xeq.c     **** 		if (op == RARG_ISG)
 20241              		.loc 1 3449 3 is_stmt 1 view .LVU5241
3449:src/xeq.c     **** 		if (op == RARG_ISG)
 20242              		.loc 1 3449 8 is_stmt 0 view .LVU5242
 20243 0184 24AA     		add	r2, sp, #144
 20244 0186 3846     		mov	r0, r7
 20245 0188 3146     		mov	r1, r6
 20246 018a FFF7FEFF 		bl	extract_value
 20247              	.LVL1535:
3450:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
ARM GAS  /tmp/ccqED0AM.s 			page 542


 20248              		.loc 1 3450 3 is_stmt 1 view .LVU5243
3452:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 20249              		.loc 1 3452 8 view .LVU5244
3452:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 20250              		.loc 1 3452 11 is_stmt 0 view .LVU5245
 20251 018e 3A2C     		cmp	r4, #58
3453:src/xeq.c     **** 		else if (op == RARG_ISE)
 20252              		.loc 1 3453 4 view .LVU5246
 20253 0190 249B     		ldr	r3, [sp, #144]
3452:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 20254              		.loc 1 3452 11 view .LVU5247
 20255 0192 25D0     		beq	.L1453
3457:src/xeq.c     **** 		return;
 20256              		.loc 1 3457 4 is_stmt 1 view .LVU5248
 20257 0194 13B3     		cbz	r3, .L1437
 20258              	.LVL1536:
 20259              	.L1445:
3457:src/xeq.c     **** 		return;
 20260              		.loc 1 3457 4 is_stmt 0 discriminator 2 view .LVU5249
 20261 0196 50EA0103 		orrs	r3, r0, r1
 20262 019a 0CBF     		ite	eq
 20263 019c 0120     		moveq	r0, #1
 20264 019e 0020     		movne	r0, #0
 20265              	.L1422:
3457:src/xeq.c     **** 		return;
 20266              		.loc 1 3457 4 discriminator 6 view .LVU5250
 20267 01a0 FFF7FEFF 		bl	fin_tst
 20268              	.LVL1537:
3458:src/xeq.c     **** 	} else {
 20269              		.loc 1 3458 3 is_stmt 1 discriminator 6 view .LVU5251
 20270              	.LBE3048:
3502:src/xeq.c     **** 
 20271              		.loc 1 3502 1 is_stmt 0 discriminator 6 view .LVU5252
 20272 01a4 2FB0     		add	sp, sp, #188
 20273              		.cfi_remember_state
 20274              		.cfi_def_cfa_offset 20
 20275              		@ sp needed
 20276 01a6 F0BD     		pop	{r4, r5, r6, r7, pc}
 20277              	.LVL1538:
 20278              	.L1450:
 20279              		.cfi_restore_state
 20280              	.LBB3049:
3490:src/xeq.c     **** 			else
 20281              		.loc 1 3490 5 is_stmt 1 view .LVU5253
 20282 01a8 FFF7FEFF 		bl	dn_le0
 20283              	.LVL1539:
 20284 01ac FFF7FEFF 		bl	fin_tst
 20285              	.LVL1540:
 20286 01b0 76E7     		b	.L1428
 20287              	.LVL1541:
 20288              	.L1416:
3490:src/xeq.c     **** 			else
 20289              		.loc 1 3490 5 is_stmt 0 view .LVU5254
 20290              	.LBE3049:
 20291              	.LBB3050:
3444:src/xeq.c     **** 		else
 20292              		.loc 1 3444 4 is_stmt 1 view .LVU5255
ARM GAS  /tmp/ccqED0AM.s 			page 543


3444:src/xeq.c     **** 		else
 20293              		.loc 1 3444 8 is_stmt 0 view .LVU5256
 20294 01b2 FFF7FEFF 		bl	intAdd
 20295              	.LVL1542:
3444:src/xeq.c     **** 		else
 20296              		.loc 1 3444 8 view .LVU5257
 20297 01b6 0646     		mov	r6, r0
 20298              	.LBB3045:
 20299              	.LBB3040:
1423:src/xeq.c     **** }
 20300              		.loc 1 1423 8 view .LVU5258
 20301 01b8 2846     		mov	r0, r5
 20302              	.LBE3040:
 20303              	.LBE3045:
3444:src/xeq.c     **** 		else
 20304              		.loc 1 3444 8 view .LVU5259
 20305 01ba 0C46     		mov	r4, r1
 20306              	.LVL1543:
3447:src/xeq.c     **** 
 20307              		.loc 1 3447 3 is_stmt 1 view .LVU5260
3447:src/xeq.c     **** 
 20308              		.loc 1 3447 3 is_stmt 0 view .LVU5261
 20309 01bc CDE92461 		strd	r6, r1, [sp, #144]
 20310              	.LVL1544:
 20311              	.LBB3046:
1422:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 20312              		.loc 1 1422 6 is_stmt 1 view .LVU5262
 20313              	.LBB3041:
1423:src/xeq.c     **** }
 20314              		.loc 1 1423 2 view .LVU5263
1423:src/xeq.c     **** }
 20315              		.loc 1 1423 8 is_stmt 0 view .LVU5264
 20316 01c0 FFF7FEFF 		bl	get_reg_n
 20317              	.LVL1545:
1423:src/xeq.c     **** }
 20318              		.loc 1 1423 2 view .LVU5265
 20319 01c4 24A9     		add	r1, sp, #144
 20320 01c6 0822     		movs	r2, #8
 20321 01c8 FFF7FEFF 		bl	xcopy
 20322              	.LVL1546:
1423:src/xeq.c     **** }
 20323              		.loc 1 1423 2 view .LVU5266
 20324              	.LBE3041:
 20325              	.LBE3046:
3449:src/xeq.c     **** 		if (op == RARG_ISG)
 20326              		.loc 1 3449 3 is_stmt 1 view .LVU5267
3449:src/xeq.c     **** 		if (op == RARG_ISG)
 20327              		.loc 1 3449 8 is_stmt 0 view .LVU5268
 20328 01cc 24AA     		add	r2, sp, #144
 20329 01ce 3046     		mov	r0, r6
 20330 01d0 2146     		mov	r1, r4
 20331 01d2 FFF7FEFF 		bl	extract_value
 20332              	.LVL1547:
3451:src/xeq.c     **** 		else if (op == RARG_DSE)
 20333              		.loc 1 3451 4 view .LVU5269
 20334 01d6 249B     		ldr	r3, [sp, #144]
 20335              	.LVL1548:
ARM GAS  /tmp/ccqED0AM.s 			page 544


3450:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
 20336              		.loc 1 3450 3 is_stmt 1 view .LVU5270
3451:src/xeq.c     **** 		else if (op == RARG_DSE)
 20337              		.loc 1 3451 4 view .LVU5271
 20338 01d8 002B     		cmp	r3, #0
 20339 01da DCD0     		beq	.L1445
 20340              	.LVL1549:
 20341              	.L1437:
3457:src/xeq.c     **** 		return;
 20342              		.loc 1 3457 4 is_stmt 0 view .LVU5272
 20343 01dc 0120     		movs	r0, #1
 20344 01de DFE7     		b	.L1422
 20345              	.LVL1550:
 20346              	.L1453:
3453:src/xeq.c     **** 		else if (op == RARG_ISE)
 20347              		.loc 1 3453 4 is_stmt 1 view .LVU5273
 20348 01e0 2BB9     		cbnz	r3, .L1436
3453:src/xeq.c     **** 		else if (op == RARG_ISE)
 20349              		.loc 1 3453 4 is_stmt 0 discriminator 1 view .LVU5274
 20350 01e2 50EA0103 		orrs	r3, r0, r1
 20351 01e6 14BF     		ite	ne
 20352 01e8 0120     		movne	r0, #1
 20353              	.LVL1551:
3453:src/xeq.c     **** 		else if (op == RARG_ISE)
 20354              		.loc 1 3453 4 discriminator 1 view .LVU5275
 20355 01ea 0020     		moveq	r0, #0
 20356 01ec D8E7     		b	.L1422
 20357              	.LVL1552:
 20358              	.L1436:
3453:src/xeq.c     **** 		else if (op == RARG_ISE)
 20359              		.loc 1 3453 4 view .LVU5276
 20360 01ee 0020     		movs	r0, #0
 20361              	.LVL1553:
3453:src/xeq.c     **** 		else if (op == RARG_ISE)
 20362              		.loc 1 3453 4 view .LVU5277
 20363 01f0 D6E7     		b	.L1422
 20364              	.L1455:
 20365 01f2 00BF     		.align	2
 20366              	.L1454:
 20367 01f4 00000000 		.word	main_ram
 20368              	.LBE3050:
 20369              		.cfi_endproc
 20370              	.LFE196:
 20372              		.section	.text.op_shift_digit,"ax",%progbits
 20373              		.align	1
 20374              		.p2align 2,,3
 20375              		.global	op_shift_digit
 20376              		.syntax unified
 20377              		.thumb
 20378              		.thumb_func
 20379              		.fpu fpv4-sp-d16
 20381              	op_shift_digit:
 20382              	.LVL1554:
 20383              	.LFB197:
3507:src/xeq.c     **** 	decNumber x;
 20384              		.loc 1 3507 51 is_stmt 1 view -0
 20385              		.cfi_startproc
ARM GAS  /tmp/ccqED0AM.s 			page 545


 20386              		@ args = 0, pretend = 0, frame = 40
 20387              		@ frame_needed = 0, uses_anonymous_args = 0
3508:src/xeq.c     **** 	int adjust = n;
 20388              		.loc 1 3508 2 view .LVU5279
3509:src/xeq.c     **** 
 20389              		.loc 1 3509 2 view .LVU5280
3511:src/xeq.c     **** 		bad_mode_error();
 20390              		.loc 1 3511 6 is_stmt 0 view .LVU5281
 20391 0000 174B     		ldr	r3, .L1465
 20392 0002 1B68     		ldr	r3, [r3]
 20393 0004 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 20394              	.LVL1555:
3511:src/xeq.c     **** 		bad_mode_error();
 20395              		.loc 1 3511 2 is_stmt 1 view .LVU5282
3511:src/xeq.c     **** 		bad_mode_error();
 20396              		.loc 1 3511 5 is_stmt 0 view .LVU5283
 20397 0008 DB07     		lsls	r3, r3, #31
 20398 000a 06D5     		bpl	.L1457
3512:src/xeq.c     **** 		return;
 20399              		.loc 1 3512 3 is_stmt 1 view .LVU5284
 20400              	.LBB3062:
 20401              	.LBI3062:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 20402              		.loc 1 575 6 view .LVU5285
 20403              	.LBE3062:
 576:src/xeq.c     **** }
 20404              		.loc 1 576 2 view .LVU5286
 20405              	.LVL1556:
 20406              	.LBB3067:
 20407              	.LBB3063:
 20408              	.LBI3063:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 20409              		.loc 1 546 5 view .LVU5287
 20410              	.LBB3064:
 547:src/xeq.c     **** 		Error = e;
 20411              		.loc 1 547 2 view .LVU5288
 547:src/xeq.c     **** 		Error = e;
 20412              		.loc 1 547 12 is_stmt 0 view .LVU5289
 20413 000c 154B     		ldr	r3, .L1465+4
 547:src/xeq.c     **** 		Error = e;
 20414              		.loc 1 547 5 view .LVU5290
 20415 000e 1A68     		ldr	r2, [r3]
 20416 0010 12B9     		cbnz	r2, .L1463
 20417              	.LVL1557:
 20418              	.LBB3065:
 20419              	.LBI3065:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 20420              		.loc 1 546 5 is_stmt 1 view .LVU5291
 20421              	.LBB3066:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 20422              		.loc 1 548 3 view .LVU5292
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 20423              		.loc 1 548 9 is_stmt 0 view .LVU5293
 20424 0012 0D22     		movs	r2, #13
 20425 0014 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 20426              		.loc 1 549 3 is_stmt 1 view .LVU5294
ARM GAS  /tmp/ccqED0AM.s 			page 546


 20427 0016 7047     		bx	lr
 20428              	.LVL1558:
 20429              	.L1463:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 20430              		.loc 1 549 3 is_stmt 0 view .LVU5295
 20431 0018 7047     		bx	lr
 20432              	.LVL1559:
 20433              	.L1457:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 20434              		.loc 1 549 3 view .LVU5296
 20435              	.LBE3066:
 20436              	.LBE3065:
 20437              	.LBE3064:
 20438              	.LBE3063:
 20439              	.LBE3067:
3515:src/xeq.c     **** 	setlastX();
 20440              		.loc 1 3515 2 is_stmt 1 view .LVU5297
3507:src/xeq.c     **** 	decNumber x;
 20441              		.loc 1 3507 51 is_stmt 0 view .LVU5298
 20442 001a 30B5     		push	{r4, r5, lr}
 20443              		.cfi_def_cfa_offset 12
 20444              		.cfi_offset 4, -12
 20445              		.cfi_offset 5, -8
 20446              		.cfi_offset 14, -4
 20447 001c 8BB0     		sub	sp, sp, #44
 20448              		.cfi_def_cfa_offset 56
 20449              	.LVL1560:
 20450              	.LBB3068:
 20451              	.LBI3068:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 20452              		.loc 1 824 12 is_stmt 1 view .LVU5299
 20453              	.LBB3069:
 825:src/xeq.c     **** }
 20454              		.loc 1 825 2 view .LVU5300
 20455 001e 0446     		mov	r4, r0
 20456 0020 0D46     		mov	r5, r1
 825:src/xeq.c     **** }
 20457              		.loc 1 825 9 is_stmt 0 view .LVU5301
 20458 0022 01A8     		add	r0, sp, #4
 20459              	.LVL1561:
 825:src/xeq.c     **** }
 20460              		.loc 1 825 9 view .LVU5302
 20461 0024 6421     		movs	r1, #100
 20462              	.LVL1562:
 825:src/xeq.c     **** }
 20463              		.loc 1 825 9 view .LVU5303
 20464 0026 FFF7FEFF 		bl	getRegister
 20465              	.LVL1563:
 825:src/xeq.c     **** }
 20466              		.loc 1 825 9 view .LVU5304
 20467              	.LBE3069:
 20468              	.LBE3068:
3516:src/xeq.c     **** 	if (decNumberIsSpecial(&x) || dn_eq0(&x))
 20469              		.loc 1 3516 2 is_stmt 1 view .LVU5305
 20470              	.LBB3070:
 20471              	.LBI3070:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
ARM GAS  /tmp/ccqED0AM.s 			page 547


 20472              		.loc 1 792 6 view .LVU5306
 20473              	.LBB3071:
 793:src/xeq.c     **** }
 20474              		.loc 1 793 2 view .LVU5307
 20475 002a 6421     		movs	r1, #100
 20476 002c 6C20     		movs	r0, #108
 20477 002e FFF7FEFF 		bl	copyreg_n
 20478              	.LVL1564:
 20479              	.LBE3071:
 20480              	.LBE3070:
3517:src/xeq.c     **** 		return;
 20481              		.loc 1 3517 2 view .LVU5308
3517:src/xeq.c     **** 		return;
 20482              		.loc 1 3517 5 is_stmt 0 view .LVU5309
 20483 0032 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 20484 0036 13F0700F 		tst	r3, #112
 20485 003a 0ED1     		bne	.L1456
3517:src/xeq.c     **** 		return;
 20486              		.loc 1 3517 32 discriminator 1 view .LVU5310
 20487 003c 01A8     		add	r0, sp, #4
 20488 003e FFF7FEFF 		bl	dn_eq0
 20489              	.LVL1565:
3517:src/xeq.c     **** 		return;
 20490              		.loc 1 3517 29 discriminator 1 view .LVU5311
 20491 0042 50B9     		cbnz	r0, .L1456
3519:src/xeq.c     **** 		adjust = -adjust;
 20492              		.loc 1 3519 5 view .LVU5312
 20493 0044 722D     		cmp	r5, #114
3509:src/xeq.c     **** 
 20494              		.loc 1 3509 6 view .LVU5313
 20495 0046 2046     		mov	r0, r4
3519:src/xeq.c     **** 		adjust = -adjust;
 20496              		.loc 1 3519 2 is_stmt 1 view .LVU5314
3520:src/xeq.c     **** 	x.exponent += adjust;
 20497              		.loc 1 3520 3 view .LVU5315
3520:src/xeq.c     **** 	x.exponent += adjust;
 20498              		.loc 1 3520 10 is_stmt 0 view .LVU5316
 20499 0048 08BF     		it	eq
 20500 004a 6042     		rsbeq	r0, r4, #0
 20501              	.LVL1566:
3521:src/xeq.c     **** 	setX(&x);
 20502              		.loc 1 3521 2 is_stmt 1 view .LVU5317
3521:src/xeq.c     **** 	setX(&x);
 20503              		.loc 1 3521 13 is_stmt 0 view .LVU5318
 20504 004c 029C     		ldr	r4, [sp, #8]
 20505              	.LVL1567:
 20506              	.LBB3072:
 20507              	.LBB3073:
 829:src/xeq.c     **** }
 20508              		.loc 1 829 2 view .LVU5319
 20509 004e 01A9     		add	r1, sp, #4
 20510              	.LBE3073:
 20511              	.LBE3072:
3521:src/xeq.c     **** 	setX(&x);
 20512              		.loc 1 3521 13 view .LVU5320
 20513 0050 0444     		add	r4, r4, r0
 20514              	.LBB3076:
ARM GAS  /tmp/ccqED0AM.s 			page 548


 20515              	.LBB3074:
 829:src/xeq.c     **** }
 20516              		.loc 1 829 2 view .LVU5321
 20517 0052 6420     		movs	r0, #100
 20518              	.LVL1568:
 829:src/xeq.c     **** }
 20519              		.loc 1 829 2 view .LVU5322
 20520              	.LBE3074:
 20521              	.LBE3076:
3521:src/xeq.c     **** 	setX(&x);
 20522              		.loc 1 3521 13 view .LVU5323
 20523 0054 0294     		str	r4, [sp, #8]
3522:src/xeq.c     **** }
 20524              		.loc 1 3522 2 is_stmt 1 view .LVU5324
 20525              	.LVL1569:
 20526              	.LBB3077:
 20527              	.LBI3072:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 20528              		.loc 1 828 6 view .LVU5325
 20529              	.LBB3075:
 829:src/xeq.c     **** }
 20530              		.loc 1 829 2 view .LVU5326
 20531 0056 FFF7FEFF 		bl	setRegister
 20532              	.LVL1570:
 20533              	.L1456:
 829:src/xeq.c     **** }
 20534              		.loc 1 829 2 is_stmt 0 view .LVU5327
 20535              	.LBE3075:
 20536              	.LBE3077:
3523:src/xeq.c     **** 
 20537              		.loc 1 3523 1 view .LVU5328
 20538 005a 0BB0     		add	sp, sp, #44
 20539              		.cfi_def_cfa_offset 12
 20540              		@ sp needed
 20541 005c 30BD     		pop	{r4, r5, pc}
 20542              	.L1466:
 20543 005e 00BF     		.align	2
 20544              	.L1465:
 20545 0060 00000000 		.word	main_ram
 20546 0064 00000000 		.word	Error
 20547              		.cfi_endproc
 20548              	.LFE197:
 20550              		.section	.text.get_user_flag,"ax",%progbits
 20551              		.align	1
 20552              		.p2align 2,,3
 20553              		.global	get_user_flag
 20554              		.syntax unified
 20555              		.thumb
 20556              		.thumb_func
 20557              		.fpu fpv4-sp-d16
 20559              	get_user_flag:
 20560              	.LVL1571:
 20561              	.LFB199:
3556:src/xeq.c     **** 	unsigned short mask;
 20562              		.loc 1 3556 26 is_stmt 1 view -0
 20563              		.cfi_startproc
 20564              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccqED0AM.s 			page 549


 20565              		@ frame_needed = 0, uses_anonymous_args = 0
3557:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
 20566              		.loc 1 3557 2 view .LVU5330
3558:src/xeq.c     **** 
 20567              		.loc 1 3558 2 view .LVU5331
3556:src/xeq.c     **** 	unsigned short mask;
 20568              		.loc 1 3556 26 is_stmt 0 view .LVU5332
 20569 0000 00B5     		push	{lr}
 20570              		.cfi_def_cfa_offset 4
 20571              		.cfi_offset 14, -4
 20572 0002 83B0     		sub	sp, sp, #12
 20573              		.cfi_def_cfa_offset 16
3558:src/xeq.c     **** 
 20574              		.loc 1 3558 34 view .LVU5333
 20575 0004 0DF10601 		add	r1, sp, #6
 20576 0008 FFF7FEFF 		bl	flag_word
 20577              	.LVL1572:
3560:src/xeq.c     **** }
 20578              		.loc 1 3560 2 is_stmt 1 view .LVU5334
3560:src/xeq.c     **** }
 20579              		.loc 1 3560 24 is_stmt 0 view .LVU5335
 20580 000c BDF80630 		ldrh	r3, [sp, #6]
 20581 0010 0288     		ldrh	r2, [r0]
 20582 0012 1A42     		tst	r2, r3
3561:src/xeq.c     **** 
 20583              		.loc 1 3561 1 view .LVU5336
 20584 0014 14BF     		ite	ne
 20585 0016 0120     		movne	r0, #1
 20586              	.LVL1573:
3561:src/xeq.c     **** 
 20587              		.loc 1 3561 1 view .LVU5337
 20588 0018 0020     		moveq	r0, #0
 20589 001a 03B0     		add	sp, sp, #12
 20590              		.cfi_def_cfa_offset 4
 20591              		@ sp needed
 20592 001c 5DF804FB 		ldr	pc, [sp], #4
 20593              		.cfi_endproc
 20594              	.LFE199:
 20596              		.section	.text.cmdflag,"ax",%progbits
 20597              		.align	1
 20598              		.p2align 2,,3
 20599              		.global	cmdflag
 20600              		.syntax unified
 20601              		.thumb
 20602              		.thumb_func
 20603              		.fpu fpv4-sp-d16
 20605              	cmdflag:
 20606              	.LVL1574:
 20607              	.LFB201:
3584:src/xeq.c     **** 	unsigned short mask;
 20608              		.loc 1 3584 46 is_stmt 1 view -0
 20609              		.cfi_startproc
 20610              		@ args = 0, pretend = 0, frame = 8
 20611              		@ frame_needed = 0, uses_anonymous_args = 0
3585:src/xeq.c     **** 	unsigned short *const f = flag_word(arg, &mask);
 20612              		.loc 1 3585 2 view .LVU5339
3586:src/xeq.c     **** 	int flg = *f & mask;
ARM GAS  /tmp/ccqED0AM.s 			page 550


 20613              		.loc 1 3586 2 view .LVU5340
3584:src/xeq.c     **** 	unsigned short mask;
 20614              		.loc 1 3584 46 is_stmt 0 view .LVU5341
 20615 0000 70B5     		push	{r4, r5, r6, lr}
 20616              		.cfi_def_cfa_offset 16
 20617              		.cfi_offset 4, -16
 20618              		.cfi_offset 5, -12
 20619              		.cfi_offset 6, -8
 20620              		.cfi_offset 14, -4
 20621 0002 82B0     		sub	sp, sp, #8
 20622              		.cfi_def_cfa_offset 24
3584:src/xeq.c     **** 	unsigned short mask;
 20623              		.loc 1 3584 46 view .LVU5342
 20624 0004 0C46     		mov	r4, r1
3586:src/xeq.c     **** 	int flg = *f & mask;
 20625              		.loc 1 3586 28 view .LVU5343
 20626 0006 0DF10601 		add	r1, sp, #6
 20627              	.LVL1575:
3584:src/xeq.c     **** 	unsigned short mask;
 20628              		.loc 1 3584 46 view .LVU5344
 20629 000a 0646     		mov	r6, r0
3586:src/xeq.c     **** 	int flg = *f & mask;
 20630              		.loc 1 3586 28 view .LVU5345
 20631 000c FFF7FEFF 		bl	flag_word
 20632              	.LVL1576:
3587:src/xeq.c     **** 
 20633              		.loc 1 3587 15 view .LVU5346
 20634 0010 BDF80620 		ldrh	r2, [sp, #6]
3587:src/xeq.c     **** 
 20635              		.loc 1 3587 12 view .LVU5347
 20636 0014 0388     		ldrh	r3, [r0]
 20637 0016 A4F15101 		sub	r1, r4, #81
3586:src/xeq.c     **** 	int flg = *f & mask;
 20638              		.loc 1 3586 28 view .LVU5348
 20639 001a 0546     		mov	r5, r0
 20640              	.LVL1577:
3587:src/xeq.c     **** 
 20641              		.loc 1 3587 2 is_stmt 1 view .LVU5349
3587:src/xeq.c     **** 
 20642              		.loc 1 3587 6 is_stmt 0 view .LVU5350
 20643 001c 03EA0200 		and	r0, r3, r2
 20644              	.LVL1578:
3589:src/xeq.c     **** 	case RARG_SF:	flg = 1;			   break;
 20645              		.loc 1 3589 2 is_stmt 1 view .LVU5351
 20646 0020 0A29     		cmp	r1, #10
 20647 0022 1AD8     		bhi	.L1469
 20648 0024 DFE801F0 		tbb	[pc, r1]
 20649              	.L1472:
 20650 0028 23       		.byte	(.L1482-.L1472)/2
 20651 0029 0E       		.byte	(.L1481-.L1472)/2
 20652 002a 46       		.byte	(.L1480-.L1472)/2
 20653 002b 29       		.byte	(.L1493-.L1472)/2
 20654 002c 26       		.byte	(.L1478-.L1472)/2
 20655 002d 09       		.byte	(.L1492-.L1472)/2
 20656 002e 1E       		.byte	(.L1491-.L1472)/2
 20657 002f 2D       		.byte	(.L1475-.L1472)/2
 20658 0030 06       		.byte	(.L1474-.L1472)/2
ARM GAS  /tmp/ccqED0AM.s 			page 551


 20659 0031 1B       		.byte	(.L1473-.L1472)/2
 20660 0032 3A       		.byte	(.L1471-.L1472)/2
 20661 0033 00       		.p2align 1
 20662              	.L1474:
3601:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 20663              		.loc 1 3601 17 view .LVU5352
 20664 0034 B0FA80F0 		clz	r0, r0
 20665              	.LVL1579:
3601:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 20666              		.loc 1 3601 17 is_stmt 0 view .LVU5353
 20667 0038 4009     		lsrs	r0, r0, #5
 20668              	.L1492:
3601:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 20669              		.loc 1 3601 17 view .LVU5354
 20670 003a FFF7FEFF 		bl	fin_tst
 20671              	.LVL1580:
3601:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 20672              		.loc 1 3601 33 is_stmt 1 view .LVU5355
3601:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 20673              		.loc 1 3601 45 view .LVU5356
3610:src/xeq.c     **** 		*f |= mask;
 20674              		.loc 1 3610 2 view .LVU5357
 20675 003e 2B88     		ldrh	r3, [r5]
 20676 0040 BDF80620 		ldrh	r2, [sp, #6]
 20677              	.LVL1581:
 20678              	.L1481:
3613:src/xeq.c     **** 
 20679              		.loc 1 3613 3 view .LVU5358
3613:src/xeq.c     **** 
 20680              		.loc 1 3613 6 is_stmt 0 view .LVU5359
 20681 0044 23EA0203 		bic	r3, r3, r2
 20682 0048 0021     		movs	r1, #0
 20683              	.L1484:
3615:src/xeq.c     **** 		dot( BIG_EQ, flg );
 20684              		.loc 1 3615 5 view .LVU5360
 20685 004a 682E     		cmp	r6, #104
 20686 004c 2B80     		strh	r3, [r5]	@ movhi
3615:src/xeq.c     **** 		dot( BIG_EQ, flg );
 20687              		.loc 1 3615 2 is_stmt 1 view .LVU5361
3615:src/xeq.c     **** 		dot( BIG_EQ, flg );
 20688              		.loc 1 3615 5 is_stmt 0 view .LVU5362
 20689 004e 04D1     		bne	.L1469
3616:src/xeq.c     **** 		finish_display(); // BIG_EQ
 20690              		.loc 1 3616 3 is_stmt 1 view .LVU5363
 20691 0050 8320     		movs	r0, #131
 20692 0052 FFF7FEFF 		bl	dot
 20693              	.LVL1582:
3617:src/xeq.c     **** 	}
 20694              		.loc 1 3617 3 view .LVU5364
 20695 0056 FFF7FEFF 		bl	finish_display
 20696              	.LVL1583:
 20697              	.L1469:
3619:src/xeq.c     **** 
 20698              		.loc 1 3619 1 is_stmt 0 view .LVU5365
 20699 005a 02B0     		add	sp, sp, #8
 20700              		.cfi_remember_state
 20701              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccqED0AM.s 			page 552


 20702              		@ sp needed
 20703 005c 70BD     		pop	{r4, r5, r6, pc}
 20704              	.LVL1584:
 20705              	.L1473:
 20706              		.cfi_restore_state
3602:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 20707              		.loc 1 3602 17 is_stmt 1 view .LVU5366
 20708 005e B0FA80F0 		clz	r0, r0
 20709              	.LVL1585:
3602:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 20710              		.loc 1 3602 17 is_stmt 0 view .LVU5367
 20711 0062 4009     		lsrs	r0, r0, #5
 20712              	.L1491:
3602:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 20713              		.loc 1 3602 17 view .LVU5368
 20714 0064 FFF7FEFF 		bl	fin_tst
 20715              	.LVL1586:
3602:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 20716              		.loc 1 3602 33 is_stmt 1 view .LVU5369
3602:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 20717              		.loc 1 3602 45 view .LVU5370
3610:src/xeq.c     **** 		*f |= mask;
 20718              		.loc 1 3610 2 view .LVU5371
 20719 0068 2B88     		ldrh	r3, [r5]
 20720 006a BDF80620 		ldrh	r2, [sp, #6]
 20721              	.LVL1587:
 20722              	.L1482:
3611:src/xeq.c     **** 	else
 20723              		.loc 1 3611 3 view .LVU5372
3611:src/xeq.c     **** 	else
 20724              		.loc 1 3611 6 is_stmt 0 view .LVU5373
 20725 006e 1343     		orrs	r3, r3, r2
 20726 0070 0121     		movs	r1, #1
 20727 0072 EAE7     		b	.L1484
 20728              	.LVL1588:
 20729              	.L1478:
3595:src/xeq.c     **** 
 20730              		.loc 1 3595 16 is_stmt 1 view .LVU5374
 20731 0074 B0FA80F0 		clz	r0, r0
 20732              	.LVL1589:
3595:src/xeq.c     **** 
 20733              		.loc 1 3595 16 is_stmt 0 view .LVU5375
 20734 0078 4009     		lsrs	r0, r0, #5
 20735              	.L1493:
3595:src/xeq.c     **** 
 20736              		.loc 1 3595 16 view .LVU5376
 20737 007a FFF7FEFF 		bl	fin_tst
 20738              	.LVL1590:
3595:src/xeq.c     **** 
 20739              		.loc 1 3595 37 is_stmt 1 view .LVU5377
3619:src/xeq.c     **** 
 20740              		.loc 1 3619 1 is_stmt 0 view .LVU5378
 20741 007e 02B0     		add	sp, sp, #8
 20742              		.cfi_remember_state
 20743              		.cfi_def_cfa_offset 16
 20744              		@ sp needed
 20745 0080 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  /tmp/ccqED0AM.s 			page 553


 20746              	.LVL1591:
 20747              	.L1475:
 20748              		.cfi_restore_state
3599:src/xeq.c     **** 
 20749              		.loc 1 3599 17 is_stmt 1 view .LVU5379
3599:src/xeq.c     **** 
 20750              		.loc 1 3599 45 is_stmt 0 view .LVU5380
 20751 0082 B0FA80F4 		clz	r4, r0
 20752 0086 6409     		lsrs	r4, r4, #5
3599:src/xeq.c     **** 
 20753              		.loc 1 3599 17 view .LVU5381
 20754 0088 FFF7FEFF 		bl	fin_tst
 20755              	.LVL1592:
3599:src/xeq.c     **** 
 20756              		.loc 1 3599 31 is_stmt 1 view .LVU5382
3599:src/xeq.c     **** 
 20757              		.loc 1 3599 52 view .LVU5383
3610:src/xeq.c     **** 		*f |= mask;
 20758              		.loc 1 3610 2 view .LVU5384
 20759 008c 2B88     		ldrh	r3, [r5]
 20760 008e BDF80620 		ldrh	r2, [sp, #6]
3610:src/xeq.c     **** 		*f |= mask;
 20761              		.loc 1 3610 5 is_stmt 0 view .LVU5385
 20762 0092 002C     		cmp	r4, #0
 20763 0094 D6D0     		beq	.L1481
 20764              	.L1494:
 20765              	.LVL1593:
3611:src/xeq.c     **** 	else
 20766              		.loc 1 3611 3 is_stmt 1 view .LVU5386
3611:src/xeq.c     **** 	else
 20767              		.loc 1 3611 6 is_stmt 0 view .LVU5387
 20768 0096 1343     		orrs	r3, r3, r2
 20769 0098 0121     		movs	r1, #1
 20770 009a D6E7     		b	.L1484
 20771              	.LVL1594:
 20772              	.L1471:
3603:src/xeq.c     **** 
 20773              		.loc 1 3603 17 is_stmt 1 view .LVU5388
 20774 009c B0FA80F4 		clz	r4, r0
 20775 00a0 6409     		lsrs	r4, r4, #5
 20776 00a2 2046     		mov	r0, r4
 20777              	.LVL1595:
3603:src/xeq.c     **** 
 20778              		.loc 1 3603 17 is_stmt 0 view .LVU5389
 20779 00a4 FFF7FEFF 		bl	fin_tst
 20780              	.LVL1596:
3603:src/xeq.c     **** 
 20781              		.loc 1 3603 33 is_stmt 1 view .LVU5390
3603:src/xeq.c     **** 
 20782              		.loc 1 3603 52 view .LVU5391
 20783 00a8 2B88     		ldrh	r3, [r5]
 20784 00aa BDF80620 		ldrh	r2, [sp, #6]
3610:src/xeq.c     **** 		*f |= mask;
 20785              		.loc 1 3610 2 view .LVU5392
3610:src/xeq.c     **** 		*f |= mask;
 20786              		.loc 1 3610 5 is_stmt 0 view .LVU5393
 20787 00ae 002C     		cmp	r4, #0
ARM GAS  /tmp/ccqED0AM.s 			page 554


 20788 00b0 C8D0     		beq	.L1481
 20789 00b2 F0E7     		b	.L1494
 20790              	.LVL1597:
 20791              	.L1480:
3592:src/xeq.c     **** 
 20792              		.loc 1 3592 16 is_stmt 1 view .LVU5394
3592:src/xeq.c     **** 
 20793              		.loc 1 3592 29 is_stmt 0 view .LVU5395
 20794 00b4 B0FA80F4 		clz	r4, r0
 20795 00b8 6409     		lsrs	r4, r4, #5
 20796              	.LVL1598:
3592:src/xeq.c     **** 
 20797              		.loc 1 3592 38 is_stmt 1 view .LVU5396
3610:src/xeq.c     **** 		*f |= mask;
 20798              		.loc 1 3610 2 view .LVU5397
3610:src/xeq.c     **** 		*f |= mask;
 20799              		.loc 1 3610 5 is_stmt 0 view .LVU5398
 20800 00ba 002C     		cmp	r4, #0
 20801 00bc C2D0     		beq	.L1481
 20802 00be EAE7     		b	.L1494
 20803              		.cfi_endproc
 20804              	.LFE201:
 20806              		.section	.text.put_user_flag,"ax",%progbits
 20807              		.align	1
 20808              		.p2align 2,,3
 20809              		.global	put_user_flag
 20810              		.syntax unified
 20811              		.thumb
 20812              		.thumb_func
 20813              		.fpu fpv4-sp-d16
 20815              	put_user_flag:
 20816              	.LVL1599:
 20817              	.LFB200:
3563:src/xeq.c     **** 	if (f)	set_user_flag(n);
 20818              		.loc 1 3563 34 is_stmt 1 view -0
 20819              		.cfi_startproc
 20820              		@ args = 0, pretend = 0, frame = 0
 20821              		@ frame_needed = 0, uses_anonymous_args = 0
 20822              		@ link register save eliminated.
3564:src/xeq.c     **** 	else	clr_user_flag(n);
 20823              		.loc 1 3564 2 view .LVU5400
3564:src/xeq.c     **** 	else	clr_user_flag(n);
 20824              		.loc 1 3564 5 is_stmt 0 view .LVU5401
 20825 0000 11B1     		cbz	r1, .L1496
3564:src/xeq.c     **** 	else	clr_user_flag(n);
 20826              		.loc 1 3564 9 is_stmt 1 discriminator 1 view .LVU5402
 20827 0002 5121     		movs	r1, #81
 20828              	.LVL1600:
3564:src/xeq.c     **** 	else	clr_user_flag(n);
 20829              		.loc 1 3564 9 is_stmt 0 discriminator 1 view .LVU5403
 20830 0004 FFF7FEBF 		b	cmdflag
 20831              	.LVL1601:
 20832              	.L1496:
3565:src/xeq.c     **** }
 20833              		.loc 1 3565 7 is_stmt 1 view .LVU5404
 20834 0008 5221     		movs	r1, #82
 20835              	.LVL1602:
ARM GAS  /tmp/ccqED0AM.s 			page 555


3565:src/xeq.c     **** }
 20836              		.loc 1 3565 7 is_stmt 0 view .LVU5405
 20837 000a FFF7FEBF 		b	cmdflag
 20838              	.LVL1603:
3565:src/xeq.c     **** }
 20839              		.loc 1 3565 7 view .LVU5406
 20840              		.cfi_endproc
 20841              	.LFE200:
 20843 000e 00BF     		.section	.text.clrflags,"ax",%progbits
 20844              		.align	1
 20845              		.p2align 2,,3
 20846              		.global	clrflags
 20847              		.syntax unified
 20848              		.thumb
 20849              		.thumb_func
 20850              		.fpu fpv4-sp-d16
 20852              	clrflags:
 20853              	.LVL1604:
 20854              	.LFB202:
3623:src/xeq.c     **** 	xset(UserFlags, 0, sizeof(UserFlags));
 20855              		.loc 1 3623 30 is_stmt 1 view -0
 20856              		.cfi_startproc
 20857              		@ args = 0, pretend = 0, frame = 0
 20858              		@ frame_needed = 0, uses_anonymous_args = 0
3624:src/xeq.c     **** 	if (LocalRegs < 0) {
 20859              		.loc 1 3624 2 view .LVU5408
3623:src/xeq.c     **** 	xset(UserFlags, 0, sizeof(UserFlags));
 20860              		.loc 1 3623 30 is_stmt 0 view .LVU5409
 20861 0000 10B5     		push	{r4, lr}
 20862              		.cfi_def_cfa_offset 8
 20863              		.cfi_offset 4, -8
 20864              		.cfi_offset 14, -4
3624:src/xeq.c     **** 	if (LocalRegs < 0) {
 20865              		.loc 1 3624 7 view .LVU5410
 20866 0002 0A4C     		ldr	r4, .L1501
 20867 0004 2068     		ldr	r0, [r4]
 20868              	.LVL1605:
3624:src/xeq.c     **** 	if (LocalRegs < 0) {
 20869              		.loc 1 3624 2 view .LVU5411
 20870 0006 0E22     		movs	r2, #14
 20871 0008 00F5FE60 		add	r0, r0, #2032
 20872 000c 0021     		movs	r1, #0
 20873 000e FFF7FEFF 		bl	xset
 20874              	.LVL1606:
3625:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
 20875              		.loc 1 3625 2 is_stmt 1 view .LVU5412
3625:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
 20876              		.loc 1 3625 6 is_stmt 0 view .LVU5413
 20877 0012 2368     		ldr	r3, [r4]
 20878 0014 B3F8DE37 		ldrh	r3, [r3, #2014]
3625:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
 20879              		.loc 1 3625 5 view .LVU5414
 20880 0018 1B04     		lsls	r3, r3, #16
 20881 001a 00D4     		bmi	.L1500
3628:src/xeq.c     **** 
 20882              		.loc 1 3628 1 view .LVU5415
 20883 001c 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccqED0AM.s 			page 556


 20884              	.L1500:
3626:src/xeq.c     **** 	}
 20885              		.loc 1 3626 3 is_stmt 1 view .LVU5416
3626:src/xeq.c     **** 	}
 20886              		.loc 1 3626 5 is_stmt 0 view .LVU5417
 20887 001e 0021     		movs	r1, #0
 20888 0020 7020     		movs	r0, #112
 20889 0022 FFF7FEFF 		bl	flag_word
 20890              	.LVL1607:
3626:src/xeq.c     **** 	}
 20891              		.loc 1 3626 37 view .LVU5418
 20892 0026 0023     		movs	r3, #0
 20893 0028 0380     		strh	r3, [r0]	@ movhi
3628:src/xeq.c     **** 
 20894              		.loc 1 3628 1 view .LVU5419
 20895 002a 10BD     		pop	{r4, pc}
 20896              	.L1502:
 20897              		.align	2
 20898              	.L1501:
 20899 002c 00000000 		.word	main_ram
 20900              		.cfi_endproc
 20901              	.LFE202:
 20903              		.section	.text.intws,"ax",%progbits
 20904              		.align	1
 20905              		.p2align 2,,3
 20906              		.global	intws
 20907              		.syntax unified
 20908              		.thumb
 20909              		.thumb_func
 20910              		.fpu fpv4-sp-d16
 20912              	intws:
 20913              	.LVL1608:
 20914              	.LFB203:
3633:src/xeq.c     **** 	if (is_intmode()) {
 20915              		.loc 1 3633 44 is_stmt 1 view -0
 20916              		.cfi_startproc
 20917              		@ args = 0, pretend = 0, frame = 8
 20918              		@ frame_needed = 0, uses_anonymous_args = 0
3634:src/xeq.c     **** 		int i, ss = stack_size();
 20919              		.loc 1 3634 2 view .LVU5421
3633:src/xeq.c     **** 	if (is_intmode()) {
 20920              		.loc 1 3633 44 is_stmt 0 view .LVU5422
 20921 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 20922              		.cfi_def_cfa_offset 24
 20923              		.cfi_offset 4, -24
 20924              		.cfi_offset 5, -20
 20925              		.cfi_offset 6, -16
 20926              		.cfi_offset 7, -12
 20927              		.cfi_offset 8, -8
 20928              		.cfi_offset 14, -4
3634:src/xeq.c     **** 		int i, ss = stack_size();
 20929              		.loc 1 3634 6 view .LVU5423
 20930 0004 DFF8E080 		ldr	r8, .L1514+4
 20931 0008 D8F80030 		ldr	r3, [r8]
 20932 000c 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
3634:src/xeq.c     **** 		int i, ss = stack_size();
 20933              		.loc 1 3634 5 view .LVU5424
ARM GAS  /tmp/ccqED0AM.s 			page 557


 20934 0010 D107     		lsls	r1, r2, #31
 20935              	.LVL1609:
3633:src/xeq.c     **** 	if (is_intmode()) {
 20936              		.loc 1 3633 44 view .LVU5425
 20937 0012 82B0     		sub	sp, sp, #8
 20938              		.cfi_def_cfa_offset 32
3634:src/xeq.c     **** 		int i, ss = stack_size();
 20939              		.loc 1 3634 5 view .LVU5426
 20940 0014 53D5     		bpl	.L1504
 20941              	.LBB3078:
3635:src/xeq.c     **** 		unsigned int oldlen = UState.int_len;
 20942              		.loc 1 3635 3 is_stmt 1 view .LVU5427
 20943              	.LBB3079:
 20944              	.LBI3079:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 20945              		.loc 1 712 5 view .LVU5428
 20946              	.LBB3080:
 713:src/xeq.c     **** 		return 4;
 20947              		.loc 1 713 2 view .LVU5429
 713:src/xeq.c     **** 		return 4;
 20948              		.loc 1 713 6 is_stmt 0 view .LVU5430
 20949 0016 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 20950              		.loc 1 713 5 view .LVU5431
 20951 001a 1207     		lsls	r2, r2, #28
 20952 001c 58D5     		bpl	.L1508
 20953              	.LBB3081:
 20954              	.LBI3081:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 20955              		.loc 1 185 5 is_stmt 1 view .LVU5432
 20956              	.LBB3082:
 186:src/xeq.c     **** }
 20957              		.loc 1 186 2 view .LVU5433
 186:src/xeq.c     **** }
 20958              		.loc 1 186 9 is_stmt 0 view .LVU5434
 20959 001e B3F8E027 		ldrh	r2, [r3, #2016]
 20960              	.LBE3082:
 20961              	.LBE3081:
 713:src/xeq.c     **** 		return 4;
 20962              		.loc 1 713 27 view .LVU5435
 20963 0022 920B     		lsrs	r2, r2, #14
 20964 0024 032A     		cmp	r2, #3
 20965 0026 55D0     		beq	.L1513
 715:src/xeq.c     **** }
 20966              		.loc 1 715 9 view .LVU5436
 20967 0028 0827     		movs	r7, #8
 20968              	.L1505:
 20969              	.LVL1610:
 715:src/xeq.c     **** }
 20970              		.loc 1 715 9 view .LVU5437
 20971              	.LBE3080:
 20972              	.LBE3079:
3636:src/xeq.c     **** 		long long int v;
 20973              		.loc 1 3636 3 is_stmt 1 view .LVU5438
3636:src/xeq.c     **** 		long long int v;
 20974              		.loc 1 3636 31 is_stmt 0 view .LVU5439
 20975 002a 93F8E967 		ldrb	r6, [r3, #2025]	@ zero_extendqisi2
ARM GAS  /tmp/ccqED0AM.s 			page 558


 20976 002e 00F03F05 		and	r5, r0, #63
 20977 0032 06F03F06 		and	r6, r6, #63
 20978              	.LVL1611:
3637:src/xeq.c     **** 
 20979              		.loc 1 3637 3 is_stmt 1 view .LVU5440
3639:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 20980              		.loc 1 3639 3 view .LVU5441
3639:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 20981              		.loc 1 3639 13 view .LVU5442
 20982 0036 6437     		adds	r7, r7, #100
 20983              	.LVL1612:
3636:src/xeq.c     **** 		long long int v;
 20984              		.loc 1 3636 31 is_stmt 0 view .LVU5443
 20985 0038 6424     		movs	r4, #100
 20986              	.LVL1613:
 20987              	.L1506:
3640:src/xeq.c     **** 			UState.int_len = arg;
 20988              		.loc 1 3640 4 is_stmt 1 discriminator 3 view .LVU5444
3640:src/xeq.c     **** 			UState.int_len = arg;
 20989              		.loc 1 3640 8 is_stmt 0 discriminator 3 view .LVU5445
 20990 003a 2046     		mov	r0, r4
 20991 003c FFF7FEFF 		bl	get_reg_n_int
 20992              	.LVL1614:
 20993 0040 FFF7FEFF 		bl	mask_value
 20994              	.LVL1615:
3641:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, mask_value(v));
 20995              		.loc 1 3641 4 is_stmt 1 discriminator 3 view .LVU5446
3641:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, mask_value(v));
 20996              		.loc 1 3641 19 is_stmt 0 discriminator 3 view .LVU5447
 20997 0044 D8F80030 		ldr	r3, [r8]
 20998 0048 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 20999 004c 65F30502 		bfi	r2, r5, #0, #6
 21000 0050 83F8E927 		strb	r2, [r3, #2025]
3642:src/xeq.c     **** 			UState.int_len = oldlen;
 21001              		.loc 1 3642 4 is_stmt 1 discriminator 3 view .LVU5448
 21002 0054 FFF7FEFF 		bl	mask_value
 21003              	.LVL1616:
3642:src/xeq.c     **** 			UState.int_len = oldlen;
 21004              		.loc 1 3642 4 is_stmt 0 discriminator 3 view .LVU5449
 21005 0058 0B46     		mov	r3, r1
 21006 005a 0246     		mov	r2, r0
 21007              	.LBB3084:
 21008              	.LBB3085:
1423:src/xeq.c     **** }
 21009              		.loc 1 1423 8 discriminator 3 view .LVU5450
 21010 005c 2046     		mov	r0, r4
 21011 005e CDE90023 		strd	r2, [sp]
 21012              	.LVL1617:
1423:src/xeq.c     **** }
 21013              		.loc 1 1423 8 discriminator 3 view .LVU5451
 21014              	.LBE3085:
 21015              	.LBI3084:
1422:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 21016              		.loc 1 1422 6 is_stmt 1 discriminator 3 view .LVU5452
 21017              	.LBB3086:
1423:src/xeq.c     **** }
 21018              		.loc 1 1423 2 discriminator 3 view .LVU5453
ARM GAS  /tmp/ccqED0AM.s 			page 559


1423:src/xeq.c     **** }
 21019              		.loc 1 1423 8 is_stmt 0 discriminator 3 view .LVU5454
 21020 0062 FFF7FEFF 		bl	get_reg_n
 21021              	.LVL1618:
1423:src/xeq.c     **** }
 21022              		.loc 1 1423 2 discriminator 3 view .LVU5455
 21023 0066 0822     		movs	r2, #8
 21024 0068 6946     		mov	r1, sp
 21025 006a FFF7FEFF 		bl	xcopy
 21026              	.LVL1619:
1423:src/xeq.c     **** }
 21027              		.loc 1 1423 2 discriminator 3 view .LVU5456
 21028              	.LBE3086:
 21029              	.LBE3084:
3643:src/xeq.c     **** 		}
 21030              		.loc 1 3643 4 is_stmt 1 discriminator 3 view .LVU5457
3643:src/xeq.c     **** 		}
 21031              		.loc 1 3643 19 is_stmt 0 discriminator 3 view .LVU5458
 21032 006e D8F80030 		ldr	r3, [r8]
 21033 0072 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 21034 0076 0134     		adds	r4, r4, #1
 21035              	.LVL1620:
3643:src/xeq.c     **** 		}
 21036              		.loc 1 3643 19 discriminator 3 view .LVU5459
 21037 0078 66F30502 		bfi	r2, r6, #0, #6
3639:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 21038              		.loc 1 3639 3 discriminator 3 view .LVU5460
 21039 007c BC42     		cmp	r4, r7
3643:src/xeq.c     **** 		}
 21040              		.loc 1 3643 19 discriminator 3 view .LVU5461
 21041 007e 83F8E927 		strb	r2, [r3, #2025]
3639:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 21042              		.loc 1 3639 19 is_stmt 1 discriminator 3 view .LVU5462
 21043              	.LVL1621:
3639:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 21044              		.loc 1 3639 13 discriminator 3 view .LVU5463
3639:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 21045              		.loc 1 3639 3 is_stmt 0 discriminator 3 view .LVU5464
 21046 0082 DAD1     		bne	.L1506
3645:src/xeq.c     **** 		UState.int_len = arg;
 21047              		.loc 1 3645 3 is_stmt 1 view .LVU5465
3645:src/xeq.c     **** 		UState.int_len = arg;
 21048              		.loc 1 3645 7 is_stmt 0 view .LVU5466
 21049 0084 6C20     		movs	r0, #108
 21050 0086 FFF7FEFF 		bl	get_reg_n_int
 21051              	.LVL1622:
 21052 008a FFF7FEFF 		bl	mask_value
 21053              	.LVL1623:
3646:src/xeq.c     **** 		set_reg_n_int(regL_idx, mask_value(v));
 21054              		.loc 1 3646 3 is_stmt 1 view .LVU5467
3646:src/xeq.c     **** 		set_reg_n_int(regL_idx, mask_value(v));
 21055              		.loc 1 3646 18 is_stmt 0 view .LVU5468
 21056 008e D8F80030 		ldr	r3, [r8]
 21057 0092 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 21058 0096 65F30502 		bfi	r2, r5, #0, #6
 21059 009a 83F8E927 		strb	r2, [r3, #2025]
3647:src/xeq.c     **** 	} else
ARM GAS  /tmp/ccqED0AM.s 			page 560


 21060              		.loc 1 3647 3 is_stmt 1 view .LVU5469
 21061 009e FFF7FEFF 		bl	mask_value
 21062              	.LVL1624:
3647:src/xeq.c     **** 	} else
 21063              		.loc 1 3647 3 is_stmt 0 view .LVU5470
 21064 00a2 0B46     		mov	r3, r1
 21065 00a4 0246     		mov	r2, r0
 21066              	.LBB3087:
 21067              	.LBB3088:
1423:src/xeq.c     **** }
 21068              		.loc 1 1423 8 view .LVU5471
 21069 00a6 6C20     		movs	r0, #108
 21070 00a8 CDE90023 		strd	r2, [sp]
 21071              	.LVL1625:
1423:src/xeq.c     **** }
 21072              		.loc 1 1423 8 view .LVU5472
 21073              	.LBE3088:
 21074              	.LBI3087:
1422:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 21075              		.loc 1 1422 6 is_stmt 1 view .LVU5473
 21076              	.LBB3089:
1423:src/xeq.c     **** }
 21077              		.loc 1 1423 2 view .LVU5474
1423:src/xeq.c     **** }
 21078              		.loc 1 1423 8 is_stmt 0 view .LVU5475
 21079 00ac FFF7FEFF 		bl	get_reg_n
 21080              	.LVL1626:
1423:src/xeq.c     **** }
 21081              		.loc 1 1423 2 view .LVU5476
 21082 00b0 6946     		mov	r1, sp
 21083 00b2 0822     		movs	r2, #8
 21084 00b4 FFF7FEFF 		bl	xcopy
 21085              	.LVL1627:
1423:src/xeq.c     **** }
 21086              		.loc 1 1423 2 view .LVU5477
 21087              	.LBE3089:
 21088              	.LBE3087:
 21089              	.LBE3078:
3650:src/xeq.c     **** 
 21090              		.loc 1 3650 1 view .LVU5478
 21091 00b8 02B0     		add	sp, sp, #8
 21092              		.cfi_remember_state
 21093              		.cfi_def_cfa_offset 24
 21094              		@ sp needed
 21095 00ba BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 21096              	.LVL1628:
 21097              	.L1504:
 21098              		.cfi_restore_state
3649:src/xeq.c     **** }
 21099              		.loc 1 3649 6 is_stmt 1 view .LVU5479
3649:src/xeq.c     **** }
 21100              		.loc 1 3649 21 is_stmt 0 view .LVU5480
 21101 00be 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 21102 00c2 60F30502 		bfi	r2, r0, #0, #6
 21103              	.LVL1629:
3649:src/xeq.c     **** }
 21104              		.loc 1 3649 21 view .LVU5481
ARM GAS  /tmp/ccqED0AM.s 			page 561


 21105 00c6 83F8E927 		strb	r2, [r3, #2025]
3650:src/xeq.c     **** 
 21106              		.loc 1 3650 1 view .LVU5482
 21107 00ca 02B0     		add	sp, sp, #8
 21108              		.cfi_remember_state
 21109              		.cfi_def_cfa_offset 24
 21110              		@ sp needed
 21111 00cc BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 21112              	.LVL1630:
 21113              	.L1508:
 21114              		.cfi_restore_state
 21115              	.LBB3091:
 21116              	.LBB3090:
 21117              	.LBB3083:
 714:src/xeq.c     **** 	return 8;
 21118              		.loc 1 714 10 view .LVU5483
 21119 00d0 0427     		movs	r7, #4
 21120 00d2 AAE7     		b	.L1505
 21121              	.L1513:
 713:src/xeq.c     **** 		return 4;
 21122              		.loc 1 713 44 view .LVU5484
 21123 00d4 034A     		ldr	r2, .L1514
 713:src/xeq.c     **** 		return 4;
 21124              		.loc 1 713 41 view .LVU5485
 21125 00d6 92F90120 		ldrsb	r2, [r2, #1]
 714:src/xeq.c     **** 	return 8;
 21126              		.loc 1 714 10 view .LVU5486
 21127 00da 002A     		cmp	r2, #0
 21128 00dc B4BF     		ite	lt
 21129 00de 0827     		movlt	r7, #8
 21130 00e0 0427     		movge	r7, #4
 21131 00e2 A2E7     		b	.L1505
 21132              	.L1515:
 21133              		.align	2
 21134              	.L1514:
 21135 00e4 00000000 		.word	XromParams
 21136 00e8 00000000 		.word	main_ram
 21137              	.LBE3083:
 21138              	.LBE3090:
 21139              	.LBE3091:
 21140              		.cfi_endproc
 21141              	.LFE203:
 21143              		.section	.text.get_maxdenom,"ax",%progbits
 21144              		.align	1
 21145              		.p2align 2,,3
 21146              		.global	get_maxdenom
 21147              		.syntax unified
 21148              		.thumb
 21149              		.thumb_func
 21150              		.fpu fpv4-sp-d16
 21152              	get_maxdenom:
 21153              	.LVL1631:
 21154              	.LFB204:
3656:src/xeq.c     **** 	const unsigned int dm = UState.denom_max;
 21155              		.loc 1 3656 33 is_stmt 1 view -0
 21156              		.cfi_startproc
 21157              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccqED0AM.s 			page 562


 21158              		@ frame_needed = 0, uses_anonymous_args = 0
 21159              		@ link register save eliminated.
3657:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
 21160              		.loc 1 3657 2 view .LVU5488
3657:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
 21161              		.loc 1 3657 32 is_stmt 0 view .LVU5489
 21162 0000 064B     		ldr	r3, .L1518
 21163 0002 1B68     		ldr	r3, [r3]
 21164 0004 D3F8E417 		ldr	r1, [r3, #2020]
3658:src/xeq.c     **** }
 21165              		.loc 1 3658 2 view .LVU5490
 21166 0008 42F20F73 		movw	r3, #9999
3657:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
 21167              		.loc 1 3657 32 view .LVU5491
 21168 000c C1F38D11 		ubfx	r1, r1, #6, #14
 21169              	.LVL1632:
3658:src/xeq.c     **** }
 21170              		.loc 1 3658 2 is_stmt 1 view .LVU5492
 21171 0010 0029     		cmp	r1, #0
 21172 0012 08BF     		it	eq
 21173 0014 1946     		moveq	r1, r3
 21174 0016 FFF7FEBF 		b	int_to_dn
 21175              	.LVL1633:
 21176              	.L1519:
3658:src/xeq.c     **** }
 21177              		.loc 1 3658 2 is_stmt 0 view .LVU5493
 21178 001a 00BF     		.align	2
 21179              	.L1518:
 21180 001c 00000000 		.word	main_ram
 21181              		.cfi_endproc
 21182              	.LFE204:
 21184              		.section	.rodata.op_2frac.str1.4,"aMS",%progbits,1
 21185              		.align	2
 21186              	.LC4:
 21187 0000 792F7820 		.ascii	"y/x =\000"
 21187      3D00
 21188 0006 0000     		.align	2
 21189              	.LC5:
 21190 0008 792F7820 		.ascii	"y/x \007\344<\000"
 21190      07E43C00 
 21191              		.align	2
 21192              	.LC6:
 21193 0010 792F7820 		.ascii	"y/x \007\344>\000"
 21193      07E43E00 
 21194              		.section	.text.op_2frac,"ax",%progbits
 21195              		.align	1
 21196              		.p2align 2,,3
 21197              		.global	op_2frac
 21198              		.syntax unified
 21199              		.thumb
 21200              		.thumb_func
 21201              		.fpu fpv4-sp-d16
 21203              	op_2frac:
 21204              	.LVL1634:
 21205              	.LFB205:
3661:src/xeq.c     **** 	decNumber z, n, d, t;
 21206              		.loc 1 3661 30 is_stmt 1 view -0
ARM GAS  /tmp/ccqED0AM.s 			page 563


 21207              		.cfi_startproc
 21208              		@ args = 0, pretend = 0, frame = 144
 21209              		@ frame_needed = 0, uses_anonymous_args = 0
3662:src/xeq.c     **** 
 21210              		.loc 1 3662 2 view .LVU5495
3664:src/xeq.c     **** 		setX_int(1);
 21211              		.loc 1 3664 2 view .LVU5496
3664:src/xeq.c     **** 		setX_int(1);
 21212              		.loc 1 3664 6 is_stmt 0 view .LVU5497
 21213 0000 214B     		ldr	r3, .L1532
3661:src/xeq.c     **** 	decNumber z, n, d, t;
 21214              		.loc 1 3661 30 view .LVU5498
 21215 0002 00B5     		push	{lr}
 21216              		.cfi_def_cfa_offset 4
 21217              		.cfi_offset 14, -4
3664:src/xeq.c     **** 		setX_int(1);
 21218              		.loc 1 3664 6 view .LVU5499
 21219 0004 1B68     		ldr	r3, [r3]
 21220 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3664:src/xeq.c     **** 		setX_int(1);
 21221              		.loc 1 3664 5 view .LVU5500
 21222 000a DA07     		lsls	r2, r3, #31
3661:src/xeq.c     **** 	decNumber z, n, d, t;
 21223              		.loc 1 3661 30 view .LVU5501
 21224 000c A5B0     		sub	sp, sp, #148
 21225              		.cfi_def_cfa_offset 152
3664:src/xeq.c     **** 		setX_int(1);
 21226              		.loc 1 3664 5 view .LVU5502
 21227 000e 27D4     		bmi	.L1530
3669:src/xeq.c     **** 	decNumber2Fraction(&n, &d, &z);
 21228              		.loc 1 3669 2 is_stmt 1 view .LVU5503
 21229              	.LVL1635:
 21230              	.LBB3092:
 21231              	.LBI3092:
 832:src/xeq.c     **** 	getRegister(y, regY_idx);
 21232              		.loc 1 832 6 view .LVU5504
 21233              	.LBB3093:
 833:src/xeq.c     **** }
 21234              		.loc 1 833 2 view .LVU5505
 21235 0010 6521     		movs	r1, #101
 21236 0012 6846     		mov	r0, sp
 21237              	.LVL1636:
 833:src/xeq.c     **** }
 21238              		.loc 1 833 2 is_stmt 0 view .LVU5506
 21239 0014 FFF7FEFF 		bl	getRegister
 21240              	.LVL1637:
 833:src/xeq.c     **** }
 21241              		.loc 1 833 2 view .LVU5507
 21242              	.LBE3093:
 21243              	.LBE3092:
3670:src/xeq.c     **** 	setXY(&d, &n);			// Set numerator and denominator
 21244              		.loc 1 3670 2 is_stmt 1 view .LVU5508
 21245 0018 6A46     		mov	r2, sp
 21246 001a 12A9     		add	r1, sp, #72
 21247 001c 09A8     		add	r0, sp, #36
 21248 001e FFF7FEFF 		bl	decNumber2Fraction
 21249              	.LVL1638:
ARM GAS  /tmp/ccqED0AM.s 			page 564


3671:src/xeq.c     **** 	if (State2.runmode) {
 21250              		.loc 1 3671 2 view .LVU5509
 21251 0022 09A9     		add	r1, sp, #36
 21252 0024 12A8     		add	r0, sp, #72
 21253 0026 FFF7FEFF 		bl	setXY
 21254              	.LVL1639:
3672:src/xeq.c     **** 		dn_divide(&t, &n, &d);
 21255              		.loc 1 3672 2 view .LVU5510
3672:src/xeq.c     **** 		dn_divide(&t, &n, &d);
 21256              		.loc 1 3672 6 is_stmt 0 view .LVU5511
 21257 002a 184B     		ldr	r3, .L1532+4
 21258 002c 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
3672:src/xeq.c     **** 		dn_divide(&t, &n, &d);
 21259              		.loc 1 3672 5 view .LVU5512
 21260 002e 5B06     		lsls	r3, r3, #25
 21261 0030 02D4     		bmi	.L1531
3688:src/xeq.c     **** 
 21262              		.loc 1 3688 1 view .LVU5513
 21263 0032 25B0     		add	sp, sp, #148
 21264              		.cfi_remember_state
 21265              		.cfi_def_cfa_offset 4
 21266              		@ sp needed
 21267 0034 5DF804FB 		ldr	pc, [sp], #4
 21268              	.L1531:
 21269              		.cfi_restore_state
3673:src/xeq.c     **** 		dn_compare(&n, &t, &z);
 21270              		.loc 1 3673 3 is_stmt 1 view .LVU5514
 21271 0038 12AA     		add	r2, sp, #72
 21272 003a 09A9     		add	r1, sp, #36
 21273 003c 1BA8     		add	r0, sp, #108
 21274 003e FFF7FEFF 		bl	dn_divide
 21275              	.LVL1640:
3674:src/xeq.c     **** 		if (dn_eq0(&n))
 21276              		.loc 1 3674 3 view .LVU5515
 21277 0042 6A46     		mov	r2, sp
 21278 0044 1BA9     		add	r1, sp, #108
 21279 0046 09A8     		add	r0, sp, #36
 21280 0048 FFF7FEFF 		bl	dn_compare
 21281              	.LVL1641:
3675:src/xeq.c     **** 			DispMsg = "y/x =";
 21282              		.loc 1 3675 3 view .LVU5516
3675:src/xeq.c     **** 			DispMsg = "y/x =";
 21283              		.loc 1 3675 7 is_stmt 0 view .LVU5517
 21284 004c 09A8     		add	r0, sp, #36
 21285 004e FFF7FEFF 		bl	dn_eq0
 21286              	.LVL1642:
3675:src/xeq.c     **** 			DispMsg = "y/x =";
 21287              		.loc 1 3675 6 view .LVU5518
 21288 0052 60B1     		cbz	r0, .L1524
3676:src/xeq.c     **** 		else if (decNumberIsNegative(&n))
 21289              		.loc 1 3676 4 is_stmt 1 view .LVU5519
3676:src/xeq.c     **** 		else if (decNumberIsNegative(&n))
 21290              		.loc 1 3676 12 is_stmt 0 view .LVU5520
 21291 0054 0E4B     		ldr	r3, .L1532+8
 21292 0056 0F4A     		ldr	r2, .L1532+12
 21293 0058 1A60     		str	r2, [r3]
3688:src/xeq.c     **** 
ARM GAS  /tmp/ccqED0AM.s 			page 565


 21294              		.loc 1 3688 1 view .LVU5521
 21295 005a 25B0     		add	sp, sp, #148
 21296              		.cfi_remember_state
 21297              		.cfi_def_cfa_offset 4
 21298              		@ sp needed
 21299 005c 5DF804FB 		ldr	pc, [sp], #4
 21300              	.LVL1643:
 21301              	.L1530:
 21302              		.cfi_restore_state
3665:src/xeq.c     **** 		return;
 21303              		.loc 1 3665 3 is_stmt 1 view .LVU5522
 21304 0060 0120     		movs	r0, #1
 21305              	.LVL1644:
3665:src/xeq.c     **** 		return;
 21306              		.loc 1 3665 3 is_stmt 0 view .LVU5523
 21307 0062 0021     		movs	r1, #0
 21308 0064 FFF7FEFF 		bl	setX_int
 21309              	.LVL1645:
3666:src/xeq.c     **** 	}
 21310              		.loc 1 3666 3 is_stmt 1 view .LVU5524
3688:src/xeq.c     **** 
 21311              		.loc 1 3688 1 is_stmt 0 view .LVU5525
 21312 0068 25B0     		add	sp, sp, #148
 21313              		.cfi_remember_state
 21314              		.cfi_def_cfa_offset 4
 21315              		@ sp needed
 21316 006a 5DF804FB 		ldr	pc, [sp], #4
 21317              	.L1524:
 21318              		.cfi_restore_state
3677:src/xeq.c     **** #ifdef INCLUDE_FONT_ESCAPE
 21319              		.loc 1 3677 8 is_stmt 1 view .LVU5526
3677:src/xeq.c     **** #ifdef INCLUDE_FONT_ESCAPE
 21320              		.loc 1 3677 11 is_stmt 0 view .LVU5527
 21321 006e 9DF92C30 		ldrsb	r3, [sp, #44]
 21322 0072 002B     		cmp	r3, #0
3679:src/xeq.c     **** 		else
 21323              		.loc 1 3679 12 view .LVU5528
 21324 0074 B8BF     		it	lt
 21325 0076 084A     		ldrlt	r2, .L1532+16
 21326 0078 054B     		ldr	r3, .L1532+8
3679:src/xeq.c     **** 		else
 21327              		.loc 1 3679 4 is_stmt 1 view .LVU5529
3681:src/xeq.c     **** #else
 21328              		.loc 1 3681 4 view .LVU5530
3681:src/xeq.c     **** #else
 21329              		.loc 1 3681 12 is_stmt 0 view .LVU5531
 21330 007a A8BF     		it	ge
 21331 007c 074A     		ldrge	r2, .L1532+20
 21332 007e 1A60     		str	r2, [r3]
3688:src/xeq.c     **** 
 21333              		.loc 1 3688 1 view .LVU5532
 21334 0080 25B0     		add	sp, sp, #148
 21335              		.cfi_def_cfa_offset 4
 21336              		@ sp needed
 21337 0082 5DF804FB 		ldr	pc, [sp], #4
 21338              	.L1533:
 21339 0086 00BF     		.align	2
ARM GAS  /tmp/ccqED0AM.s 			page 566


 21340              	.L1532:
 21341 0088 00000000 		.word	main_ram
 21342 008c 00000000 		.word	StateWhileOn
 21343 0090 00000000 		.word	DispMsg
 21344 0094 00000000 		.word	.LC4
 21345 0098 08000000 		.word	.LC5
 21346 009c 10000000 		.word	.LC6
 21347              		.cfi_endproc
 21348              	.LFE205:
 21350              		.section	.text.op_fracdenom,"ax",%progbits
 21351              		.align	1
 21352              		.p2align 2,,3
 21353              		.global	op_fracdenom
 21354              		.syntax unified
 21355              		.thumb
 21356              		.thumb_func
 21357              		.fpu fpv4-sp-d16
 21359              	op_fracdenom:
 21360              	.LVL1646:
 21361              	.LFB206:
3690:src/xeq.c     **** 	int s;
 21362              		.loc 1 3690 34 is_stmt 1 view -0
 21363              		.cfi_startproc
 21364              		@ args = 0, pretend = 0, frame = 8
 21365              		@ frame_needed = 0, uses_anonymous_args = 0
3691:src/xeq.c     **** 	unsigned long long int i;
 21366              		.loc 1 3691 2 view .LVU5534
3692:src/xeq.c     **** 
 21367              		.loc 1 3692 2 view .LVU5535
3694:src/xeq.c     **** 	if (i > 9999)
 21368              		.loc 1 3694 2 view .LVU5536
3690:src/xeq.c     **** 	int s;
 21369              		.loc 1 3690 34 is_stmt 0 view .LVU5537
 21370 0000 2DE90048 		push	{fp, lr}
 21371              		.cfi_def_cfa_offset 8
 21372              		.cfi_offset 11, -8
 21373              		.cfi_offset 14, -4
 21374 0004 84B0     		sub	sp, sp, #16
 21375              		.cfi_def_cfa_offset 24
 21376              	.LVL1647:
 21377              	.LBB3094:
 21378              	.LBI3094:
1446:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 21379              		.loc 1 1446 24 is_stmt 1 view .LVU5538
 21380              	.LBB3095:
1447:src/xeq.c     **** }
 21381              		.loc 1 1447 2 view .LVU5539
1447:src/xeq.c     **** }
 21382              		.loc 1 1447 9 is_stmt 0 view .LVU5540
 21383 0006 03A9     		add	r1, sp, #12
 21384              	.LVL1648:
1447:src/xeq.c     **** }
 21385              		.loc 1 1447 9 view .LVU5541
 21386 0008 6420     		movs	r0, #100
 21387              	.LVL1649:
1447:src/xeq.c     **** }
 21388              		.loc 1 1447 9 view .LVU5542
ARM GAS  /tmp/ccqED0AM.s 			page 567


 21389 000a FFF7FEFF 		bl	get_reg_n_int_sgn
 21390              	.LVL1650:
1447:src/xeq.c     **** }
 21391              		.loc 1 1447 9 view .LVU5543
 21392 000e 8C46     		mov	ip, r1
 21393              	.LVL1651:
1447:src/xeq.c     **** }
 21394              		.loc 1 1447 9 view .LVU5544
 21395              	.LBE3095:
 21396              	.LBE3094:
3695:src/xeq.c     **** 		UState.denom_max = 0;
 21397              		.loc 1 3695 5 view .LVU5545
 21398 0010 0021     		movs	r1, #0
 21399              	.LBB3097:
 21400              	.LBB3096:
1447:src/xeq.c     **** }
 21401              		.loc 1 1447 9 view .LVU5546
 21402 0012 8346     		mov	fp, r0
 21403              	.LVL1652:
1447:src/xeq.c     **** }
 21404              		.loc 1 1447 9 view .LVU5547
 21405              	.LBE3096:
 21406              	.LBE3097:
3695:src/xeq.c     **** 		UState.denom_max = 0;
 21407              		.loc 1 3695 2 is_stmt 1 view .LVU5548
3695:src/xeq.c     **** 		UState.denom_max = 0;
 21408              		.loc 1 3695 5 is_stmt 0 view .LVU5549
 21409 0014 6145     		cmp	r1, ip
 21410 0016 42F20F70 		movw	r0, #9999
 21411 001a 08BF     		it	eq
 21412 001c 5845     		cmpeq	r0, fp
 21413 001e 0AD2     		bcs	.L1535
3696:src/xeq.c     **** 	else if (i != 1)
 21414              		.loc 1 3696 3 is_stmt 1 view .LVU5550
3696:src/xeq.c     **** 	else if (i != 1)
 21415              		.loc 1 3696 20 is_stmt 0 view .LVU5551
 21416 0020 174B     		ldr	r3, .L1539
 21417 0022 1B68     		ldr	r3, [r3]
 21418 0024 D3F8E427 		ldr	r2, [r3, #2020]
 21419 0028 6FF39312 		bfc	r2, #6, #14
 21420 002c C3F8E427 		str	r2, [r3, #2020]
3703:src/xeq.c     **** 
 21421              		.loc 1 3703 1 view .LVU5552
 21422 0030 04B0     		add	sp, sp, #16
 21423              		.cfi_remember_state
 21424              		.cfi_def_cfa_offset 8
 21425              		@ sp needed
 21426 0032 BDE80088 		pop	{fp, pc}
 21427              	.LVL1653:
 21428              	.L1535:
 21429              		.cfi_restore_state
3697:src/xeq.c     **** 		UState.denom_max = (unsigned int) i;
 21430              		.loc 1 3697 7 is_stmt 1 view .LVU5553
3697:src/xeq.c     **** 		UState.denom_max = (unsigned int) i;
 21431              		.loc 1 3697 10 is_stmt 0 view .LVU5554
 21432 0036 BCF1000F 		cmp	ip, #0
 21433 003a 08BF     		it	eq
ARM GAS  /tmp/ccqED0AM.s 			page 568


 21434 003c BBF1010F 		cmpeq	fp, #1
 21435 0040 0AD0     		beq	.L1537
3698:src/xeq.c     **** 	else {
 21436              		.loc 1 3698 3 is_stmt 1 view .LVU5555
3698:src/xeq.c     **** 	else {
 21437              		.loc 1 3698 20 is_stmt 0 view .LVU5556
 21438 0042 0F4B     		ldr	r3, .L1539
 21439 0044 1B68     		ldr	r3, [r3]
 21440 0046 D3F8E417 		ldr	r1, [r3, #2020]
 21441 004a 6BF39311 		bfi	r1, fp, #6, #14
 21442 004e C3F8E417 		str	r1, [r3, #2020]
3703:src/xeq.c     **** 
 21443              		.loc 1 3703 1 view .LVU5557
 21444 0052 04B0     		add	sp, sp, #16
 21445              		.cfi_remember_state
 21446              		.cfi_def_cfa_offset 8
 21447              		@ sp needed
 21448 0054 BDE80088 		pop	{fp, pc}
 21449              	.LVL1654:
 21450              	.L1537:
 21451              		.cfi_restore_state
3700:src/xeq.c     **** 		setX_int_sgn(UState.denom_max, 0);
 21452              		.loc 1 3700 3 is_stmt 1 view .LVU5558
 21453              	.LBB3098:
 21454              	.LBI3098:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 21455              		.loc 1 792 6 view .LVU5559
 21456              	.LBB3099:
 793:src/xeq.c     **** }
 21457              		.loc 1 793 2 view .LVU5560
 21458 0058 6421     		movs	r1, #100
 21459 005a 6C20     		movs	r0, #108
 21460 005c FFF7FEFF 		bl	copyreg_n
 21461              	.LVL1655:
 21462              	.LBE3099:
 21463              	.LBE3098:
3701:src/xeq.c     **** 	}
 21464              		.loc 1 3701 3 view .LVU5561
 21465              	.LBB3100:
 21466              	.LBI3100:
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 21467              		.loc 1 1509 6 view .LVU5562
 21468              	.LBB3101:
1510:src/xeq.c     **** }
 21469              		.loc 1 1510 2 view .LVU5563
 21470              	.LBE3101:
 21471              	.LBE3100:
3701:src/xeq.c     **** 	}
 21472              		.loc 1 3701 22 is_stmt 0 view .LVU5564
 21473 0060 074B     		ldr	r3, .L1539
 21474              	.LVL1656:
3701:src/xeq.c     **** 	}
 21475              		.loc 1 3701 22 view .LVU5565
 21476 0062 1B68     		ldr	r3, [r3]
 21477              	.LVL1657:
3701:src/xeq.c     **** 	}
 21478              		.loc 1 3701 22 view .LVU5566
ARM GAS  /tmp/ccqED0AM.s 			page 569


 21479 0064 D3F8E427 		ldr	r2, [r3, #2020]
 21480              	.LBB3104:
 21481              	.LBB3102:
1510:src/xeq.c     **** }
 21482              		.loc 1 1510 2 view .LVU5567
 21483 0068 0021     		movs	r1, #0
 21484              	.LBE3102:
 21485              	.LBE3104:
3701:src/xeq.c     **** 	}
 21486              		.loc 1 3701 22 view .LVU5568
 21487 006a C2F38D12 		ubfx	r2, r2, #6, #14
 21488              	.LBB3105:
 21489              	.LBB3103:
1510:src/xeq.c     **** }
 21490              		.loc 1 1510 2 view .LVU5569
 21491 006e 92B2     		uxth	r2, r2
 21492 0070 0023     		movs	r3, #0
 21493              	.LVL1658:
1510:src/xeq.c     **** }
 21494              		.loc 1 1510 2 view .LVU5570
 21495 0072 0091     		str	r1, [sp]
 21496              	.LVL1659:
1510:src/xeq.c     **** }
 21497              		.loc 1 1510 2 view .LVU5571
 21498 0074 6420     		movs	r0, #100
 21499 0076 FFF7FEFF 		bl	set_reg_n_int_sgn
 21500              	.LVL1660:
1510:src/xeq.c     **** }
 21501              		.loc 1 1510 2 view .LVU5572
 21502              	.LBE3103:
 21503              	.LBE3105:
3703:src/xeq.c     **** 
 21504              		.loc 1 3703 1 view .LVU5573
 21505 007a 04B0     		add	sp, sp, #16
 21506              		.cfi_def_cfa_offset 8
 21507              		@ sp needed
 21508 007c BDE80088 		pop	{fp, pc}
 21509              	.LVL1661:
 21510              	.L1540:
3703:src/xeq.c     **** 
 21511              		.loc 1 3703 1 view .LVU5574
 21512              		.align	2
 21513              	.L1539:
 21514 0080 00000000 		.word	main_ram
 21515              		.cfi_endproc
 21516              	.LFE206:
 21518              		.section	.text.op_float,"ax",%progbits
 21519              		.align	1
 21520              		.p2align 2,,3
 21521              		.global	op_float
 21522              		.syntax unified
 21523              		.thumb
 21524              		.thumb_func
 21525              		.fpu fpv4-sp-d16
 21527              	op_float:
 21528              	.LVL1662:
 21529              	.LFB207:
ARM GAS  /tmp/ccqED0AM.s 			page 570


3711:src/xeq.c     **** 
 21530              		.loc 1 3711 30 is_stmt 1 view -0
 21531              		.cfi_startproc
 21532              		@ args = 0, pretend = 0, frame = 40
 21533              		@ frame_needed = 0, uses_anonymous_args = 0
3713:src/xeq.c     **** 		int i;
 21534              		.loc 1 3713 2 view .LVU5576
3711:src/xeq.c     **** 
 21535              		.loc 1 3711 30 is_stmt 0 view .LVU5577
 21536 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 21537              		.cfi_def_cfa_offset 28
 21538              		.cfi_offset 4, -28
 21539              		.cfi_offset 5, -24
 21540              		.cfi_offset 6, -20
 21541              		.cfi_offset 7, -16
 21542              		.cfi_offset 8, -12
 21543              		.cfi_offset 9, -8
 21544              		.cfi_offset 14, -4
3713:src/xeq.c     **** 		int i;
 21545              		.loc 1 3713 6 view .LVU5578
 21546 0004 2F4F     		ldr	r7, .L1553
 21547 0006 3B68     		ldr	r3, [r7]
 21548 0008 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
3713:src/xeq.c     **** 		int i;
 21549              		.loc 1 3713 5 view .LVU5579
 21550 000c D207     		lsls	r2, r2, #31
3711:src/xeq.c     **** 
 21551              		.loc 1 3711 30 view .LVU5580
 21552 000e 8BB0     		sub	sp, sp, #44
 21553              		.cfi_def_cfa_offset 72
3711:src/xeq.c     **** 
 21554              		.loc 1 3711 30 view .LVU5581
 21555 0010 0646     		mov	r6, r0
3713:src/xeq.c     **** 		int i;
 21556              		.loc 1 3713 5 view .LVU5582
 21557 0012 27D5     		bpl	.L1542
 21558              	.LBB3106:
3714:src/xeq.c     **** 		int mask = StackRegMask[UState.stack_depth];
 21559              		.loc 1 3714 3 is_stmt 1 view .LVU5583
3715:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 21560              		.loc 1 3715 3 view .LVU5584
3715:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 21561              		.loc 1 3715 33 is_stmt 0 view .LVU5585
 21562 0014 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
3715:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 21563              		.loc 1 3715 26 view .LVU5586
 21564 0018 2B4A     		ldr	r2, .L1553+4
3715:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 21565              		.loc 1 3715 33 view .LVU5587
 21566 001a C3F3C003 		ubfx	r3, r3, #3, #1
3716:src/xeq.c     **** 			if (mask & 1) {
 21567              		.loc 1 3716 10 view .LVU5588
 21568 001e 6424     		movs	r4, #100
3715:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 21569              		.loc 1 3715 7 view .LVU5589
 21570 0020 32F81350 		ldrh	r5, [r2, r3, lsl #1]
 21571              	.LVL1663:
ARM GAS  /tmp/ccqED0AM.s 			page 571


3716:src/xeq.c     **** 			if (mask & 1) {
 21572              		.loc 1 3716 3 is_stmt 1 view .LVU5590
3716:src/xeq.c     **** 			if (mask & 1) {
 21573              		.loc 1 3716 22 view .LVU5591
 21574              	.LBB3107:
 21575              	.LBB3108:
1119:src/xeq.c     **** }
 21576              		.loc 1 1119 24 is_stmt 0 view .LVU5592
 21577 0024 44F20108 		movw	r8, #16385
 21578 0028 0CE0     		b	.L1545
 21579              	.LVL1664:
 21580              	.L1543:
1119:src/xeq.c     **** }
 21581              		.loc 1 1119 24 view .LVU5593
 21582 002a 3B68     		ldr	r3, [r7]
 21583 002c B3F8E837 		ldrh	r3, [r3, #2024]
 21584              	.LBE3108:
 21585              	.LBE3107:
3721:src/xeq.c     **** 				// expand the other registers which have been left
 21586              		.loc 1 3721 12 view .LVU5594
 21587 0030 08EA0303 		and	r3, r8, r3
 21588 0034 B3F5804F 		cmp	r3, #16384
 21589 0038 32D0     		beq	.L1552
 21590              	.L1544:
3716:src/xeq.c     **** 			if (mask & 1) {
 21591              		.loc 1 3716 37 is_stmt 1 discriminator 2 view .LVU5595
 21592 003a 0134     		adds	r4, r4, #1
 21593              	.LVL1665:
3716:src/xeq.c     **** 			if (mask & 1) {
 21594              		.loc 1 3716 3 is_stmt 0 discriminator 2 view .LVU5596
 21595 003c 702C     		cmp	r4, #112
3716:src/xeq.c     **** 			if (mask & 1) {
 21596              		.loc 1 3716 47 discriminator 2 view .LVU5597
 21597 003e 4FEA6505 		asr	r5, r5, #1
 21598              	.LVL1666:
3716:src/xeq.c     **** 			if (mask & 1) {
 21599              		.loc 1 3716 22 is_stmt 1 discriminator 2 view .LVU5598
3716:src/xeq.c     **** 			if (mask & 1) {
 21600              		.loc 1 3716 3 is_stmt 0 discriminator 2 view .LVU5599
 21601 0042 0FD0     		beq	.L1542
 21602              	.LVL1667:
 21603              	.L1545:
3717:src/xeq.c     **** 				// register belongs to stack
 21604              		.loc 1 3717 4 is_stmt 1 view .LVU5600
3721:src/xeq.c     **** 				// expand the other registers which have been left
 21605              		.loc 1 3721 9 view .LVU5601
 21606              	.LBB3110:
 21607              	.LBI3107:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 21608              		.loc 1 1118 5 view .LVU5602
 21609              	.LBB3109:
1119:src/xeq.c     **** }
 21610              		.loc 1 1119 2 view .LVU5603
 21611              	.LBE3109:
 21612              	.LBE3110:
3717:src/xeq.c     **** 				// register belongs to stack
 21613              		.loc 1 3717 7 is_stmt 0 view .LVU5604
ARM GAS  /tmp/ccqED0AM.s 			page 572


 21614 0044 EB07     		lsls	r3, r5, #31
 21615 0046 F0D5     		bpl	.L1543
3719:src/xeq.c     **** 			}
 21616              		.loc 1 3719 5 is_stmt 1 view .LVU5605
 21617 0048 A6F1DC02 		sub	r2, r6, #220
 21618 004c B2FA82F2 		clz	r2, r2
 21619 0050 2146     		mov	r1, r4
 21620 0052 2046     		mov	r0, r4
 21621 0054 5209     		lsrs	r2, r2, #5
3716:src/xeq.c     **** 			if (mask & 1) {
 21622              		.loc 1 3716 37 is_stmt 0 view .LVU5606
 21623 0056 0134     		adds	r4, r4, #1
 21624              	.LVL1668:
3719:src/xeq.c     **** 			}
 21625              		.loc 1 3719 5 view .LVU5607
 21626 0058 FFF7FEFF 		bl	register_from_int
 21627              	.LVL1669:
3716:src/xeq.c     **** 			if (mask & 1) {
 21628              		.loc 1 3716 37 is_stmt 1 view .LVU5608
3716:src/xeq.c     **** 			if (mask & 1) {
 21629              		.loc 1 3716 3 is_stmt 0 view .LVU5609
 21630 005c 702C     		cmp	r4, #112
3716:src/xeq.c     **** 			if (mask & 1) {
 21631              		.loc 1 3716 47 view .LVU5610
 21632 005e 4FEA6505 		asr	r5, r5, #1
 21633              	.LVL1670:
3716:src/xeq.c     **** 			if (mask & 1) {
 21634              		.loc 1 3716 22 is_stmt 1 view .LVU5611
3716:src/xeq.c     **** 			if (mask & 1) {
 21635              		.loc 1 3716 3 is_stmt 0 view .LVU5612
 21636 0062 EFD1     		bne	.L1545
 21637              	.LVL1671:
 21638              	.L1542:
3716:src/xeq.c     **** 			if (mask & 1) {
 21639              		.loc 1 3716 3 view .LVU5613
 21640              	.LBE3106:
3728:src/xeq.c     **** 		UState.fract = 0;
 21641              		.loc 1 3728 2 is_stmt 1 view .LVU5614
3728:src/xeq.c     **** 		UState.fract = 0;
 21642              		.loc 1 3728 25 is_stmt 0 view .LVU5615
 21643 0064 06F12403 		add	r3, r6, #36
3728:src/xeq.c     **** 		UState.fract = 0;
 21644              		.loc 1 3728 5 view .LVU5616
 21645 0068 DBB2     		uxtb	r3, r3
 21646 006a 012B     		cmp	r3, #1
 21647 006c 10D9     		bls	.L1546
3729:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
 21648              		.loc 1 3729 3 is_stmt 1 view .LVU5617
3729:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
 21649              		.loc 1 3729 16 is_stmt 0 view .LVU5618
 21650 006e 3A68     		ldr	r2, [r7]
3730:src/xeq.c     **** 	}
 21651              		.loc 1 3730 14 view .LVU5619
 21652 0070 164B     		ldr	r3, .L1553+8
3729:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
 21653              		.loc 1 3729 16 view .LVU5620
 21654 0072 92F8E617 		ldrb	r1, [r2, #2022]	@ zero_extendqisi2
ARM GAS  /tmp/ccqED0AM.s 			page 573


 21655 0076 6FF34511 		bfc	r1, #5, #1
 21656 007a 82F8E617 		strb	r1, [r2, #2022]
3730:src/xeq.c     **** 	}
 21657              		.loc 1 3730 3 is_stmt 1 view .LVU5621
3730:src/xeq.c     **** 	}
 21658              		.loc 1 3730 35 is_stmt 0 view .LVU5622
 21659 007e A6F15C06 		sub	r6, #92
3730:src/xeq.c     **** 	}
 21660              		.loc 1 3730 14 view .LVU5623
 21661 0082 DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
3730:src/xeq.c     **** 	}
 21662              		.loc 1 3730 35 view .LVU5624
 21663 0084 B6FA86F6 		clz	r6, r6
 21664 0088 7609     		lsrs	r6, r6, #5
3730:src/xeq.c     **** 	}
 21665              		.loc 1 3730 14 view .LVU5625
 21666 008a 66F30002 		bfi	r2, r6, #0, #1
 21667 008e DA75     		strb	r2, [r3, #23]
 21668              	.L1546:
3732:src/xeq.c     **** }
 21669              		.loc 1 3732 2 is_stmt 1 view .LVU5626
3732:src/xeq.c     **** }
 21670              		.loc 1 3732 14 is_stmt 0 view .LVU5627
 21671 0090 6420     		movs	r0, #100
 21672 0092 FFF7FEFF 		bl	get_reg_n
 21673              	.LVL1672:
3732:src/xeq.c     **** }
 21674              		.loc 1 3732 12 view .LVU5628
 21675 0096 0E4B     		ldr	r3, .L1553+12
 21676 0098 1860     		str	r0, [r3]
3733:src/xeq.c     **** 
 21677              		.loc 1 3733 1 view .LVU5629
 21678 009a 0BB0     		add	sp, sp, #44
 21679              		.cfi_remember_state
 21680              		.cfi_def_cfa_offset 28
 21681              		@ sp needed
 21682 009c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 21683              	.LVL1673:
 21684              	.L1552:
 21685              		.cfi_restore_state
 21686              	.LBB3113:
3724:src/xeq.c     **** 			}
 21687              		.loc 1 3724 5 is_stmt 1 view .LVU5630
3724:src/xeq.c     **** 			}
 21688              		.loc 1 3724 29 is_stmt 0 view .LVU5631
 21689 00a0 2046     		mov	r0, r4
 21690 00a2 FFF7FEFF 		bl	get_reg_n
 21691              	.LVL1674:
3724:src/xeq.c     **** 			}
 21692              		.loc 1 3724 47 view .LVU5632
 21693 00a6 3B68     		ldr	r3, [r7]
 21694 00a8 03F22C43 		addw	r3, r3, #1068
3724:src/xeq.c     **** 			}
 21695              		.loc 1 3724 29 view .LVU5633
 21696 00ac 8146     		mov	r9, r0
 21697              	.LVL1675:
 21698              	.LBB3111:
ARM GAS  /tmp/ccqED0AM.s 			page 574


 21699              	.LBI3111:
 654:src/xeq.c     **** 	decNumber temp;
 21700              		.loc 1 654 6 is_stmt 1 view .LVU5634
 21701              	.LBB3112:
 655:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 21702              		.loc 1 655 2 view .LVU5635
 656:src/xeq.c     **** }
 21703              		.loc 1 656 2 view .LVU5636
 656:src/xeq.c     **** }
 21704              		.loc 1 656 27 is_stmt 0 view .LVU5637
 21705 00ae 01A9     		add	r1, sp, #4
 21706 00b0 03EBC400 		add	r0, r3, r4, lsl #3
 21707              	.LVL1676:
 656:src/xeq.c     **** }
 21708              		.loc 1 656 27 view .LVU5638
 21709 00b4 FFF7FEFF 		bl	decimal64ToNumber
 21710              	.LVL1677:
 656:src/xeq.c     **** }
 21711              		.loc 1 656 27 view .LVU5639
 21712 00b8 0146     		mov	r1, r0
 656:src/xeq.c     **** }
 21713              		.loc 1 656 2 view .LVU5640
 21714 00ba 4846     		mov	r0, r9
 21715 00bc FFF7FEFF 		bl	packed128_from_number
 21716              	.LVL1678:
 657:src/xeq.c     **** 
 21717              		.loc 1 657 1 view .LVU5641
 21718 00c0 BBE7     		b	.L1544
 21719              	.L1554:
 21720 00c2 00BF     		.align	2
 21721              	.L1553:
 21722 00c4 00000000 		.word	main_ram
 21723 00c8 00000000 		.word	.LANCHOR3
 21724 00cc 00000000 		.word	StateWhileOn
 21725 00d0 00000000 		.word	StackBase
 21726              	.LBE3112:
 21727              	.LBE3111:
 21728              	.LBE3113:
 21729              		.cfi_endproc
 21730              	.LFE207:
 21732              		.section	.text.cmddisp,"ax",%progbits
 21733              		.align	1
 21734              		.p2align 2,,3
 21735              		.global	cmddisp
 21736              		.syntax unified
 21737              		.thumb
 21738              		.thumb_func
 21739              		.fpu fpv4-sp-d16
 21741              	cmddisp:
 21742              	.LVL1679:
 21743              	.LFB173:
2455:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
 21744              		.loc 1 2455 46 is_stmt 1 view -0
 21745              		.cfi_startproc
 21746              		@ args = 0, pretend = 0, frame = 0
 21747              		@ frame_needed = 0, uses_anonymous_args = 0
 21748              		@ link register save eliminated.
ARM GAS  /tmp/ccqED0AM.s 			page 575


2457:src/xeq.c     **** 	int dispmode = get_dispmode_digs(&dispdigs);
 21749              		.loc 1 2457 2 view .LVU5643
2458:src/xeq.c     **** #ifdef DM42
 21750              		.loc 1 2458 2 view .LVU5644
 21751              	.LBB3122:
 21752              	.LBI3122:
2423:src/xeq.c     **** {
 21753              		.loc 1 2423 5 view .LVU5645
 21754              	.LBB3123:
2425:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 21755              		.loc 1 2425 2 view .LVU5646
2425:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 21756              		.loc 1 2425 17 is_stmt 0 view .LVU5647
 21757 0000 2E4B     		ldr	r3, .L1575
 21758 0002 1A68     		ldr	r2, [r3]
 21759              	.LBE3123:
 21760              	.LBE3122:
2455:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
 21761              		.loc 1 2455 46 view .LVU5648
 21762 0004 10B4     		push	{r4}
 21763              		.cfi_def_cfa_offset 4
 21764              		.cfi_offset 4, -4
 21765              	.LBB3125:
 21766              	.LBB3124:
2426:src/xeq.c     **** 
 21767              		.loc 1 2426 23 view .LVU5649
 21768 0006 92F8E747 		ldrb	r4, [r2, #2023]	@ zero_extendqisi2
2425:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 21769              		.loc 1 2425 23 view .LVU5650
 21770 000a 92F8E637 		ldrb	r3, [r2, #2022]	@ zero_extendqisi2
2428:src/xeq.c     **** 		dispdigs -= 12;
 21771              		.loc 1 2428 5 view .LVU5651
 21772 000e 04F00F04 		and	r4, r4, #15
 21773 0012 0B2C     		cmp	r4, #11
2425:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 21774              		.loc 1 2425 6 view .LVU5652
 21775 0014 4FEA9313 		lsr	r3, r3, #6
 21776              	.LVL1680:
2426:src/xeq.c     **** 
 21777              		.loc 1 2426 2 is_stmt 1 view .LVU5653
2428:src/xeq.c     **** 		dispdigs -= 12;
 21778              		.loc 1 2428 2 view .LVU5654
2428:src/xeq.c     **** 		dispdigs -= 12;
 21779              		.loc 1 2428 5 is_stmt 0 view .LVU5655
 21780 0018 04D9     		bls	.L1556
2429:src/xeq.c     **** 		dispmode += 4;
 21781              		.loc 1 2429 3 is_stmt 1 view .LVU5656
 21782              	.LVL1681:
2430:src/xeq.c     **** 		if (dispmode >= 6) {
 21783              		.loc 1 2430 3 view .LVU5657
2430:src/xeq.c     **** 		if (dispmode >= 6) {
 21784              		.loc 1 2430 12 is_stmt 0 view .LVU5658
 21785 001a 1C1D     		adds	r4, r3, #4
 21786              	.LVL1682:
2431:src/xeq.c     **** 			dispmode -= 2;
 21787              		.loc 1 2431 3 is_stmt 1 view .LVU5659
2431:src/xeq.c     **** 			dispmode -= 2;
ARM GAS  /tmp/ccqED0AM.s 			page 576


 21788              		.loc 1 2431 6 is_stmt 0 view .LVU5660
 21789 001c 052C     		cmp	r4, #5
2432:src/xeq.c     **** 			dispdigs += 4;
 21790              		.loc 1 2432 4 is_stmt 1 view .LVU5661
2432:src/xeq.c     **** 			dispdigs += 4;
 21791              		.loc 1 2432 13 is_stmt 0 view .LVU5662
 21792 001e CCBF     		ite	gt
 21793 0020 0233     		addgt	r3, r3, #2
 21794              	.LVL1683:
2433:src/xeq.c     **** 		}
 21795              		.loc 1 2433 4 is_stmt 1 view .LVU5663
2433:src/xeq.c     **** 		}
 21796              		.loc 1 2433 4 is_stmt 0 view .LVU5664
 21797 0022 2346     		movle	r3, r4
 21798              	.LVL1684:
 21799              	.L1556:
2436:src/xeq.c     **** 	return dispmode;
 21800              		.loc 1 2436 2 is_stmt 1 view .LVU5665
2437:src/xeq.c     **** }
 21801              		.loc 1 2437 2 view .LVU5666
2437:src/xeq.c     **** }
 21802              		.loc 1 2437 2 is_stmt 0 view .LVU5667
 21803              	.LBE3124:
 21804              	.LBE3125:
2460:src/xeq.c     **** 	case RARG_STD:
 21805              		.loc 1 2460 2 is_stmt 1 view .LVU5668
 21806 0024 4F29     		cmp	r1, #79
 21807 0026 1DD8     		bhi	.L1557
 21808 0028 4B29     		cmp	r1, #75
 21809 002a 3ED9     		bls	.L1558
 21810 002c 4D39     		subs	r1, r1, #77
 21811              	.LVL1685:
2460:src/xeq.c     **** 	case RARG_STD:
 21812              		.loc 1 2460 2 is_stmt 0 view .LVU5669
 21813 002e 0229     		cmp	r1, #2
 21814 0030 41D8     		bhi	.L1559
 21815 0032 DFE801F0 		tbb	[pc, r1]
 21816              	.LVL1686:
 21817              	.L1561:
 21818 0036 15       		.byte	(.L1563-.L1561)/2
 21819 0037 02       		.byte	(.L1570-.L1561)/2
 21820 0038 38       		.byte	(.L1560-.L1561)/2
 21821 0039 00       		.p2align 1
 21822              	.L1570:
2460:src/xeq.c     **** 	case RARG_STD:
 21823              		.loc 1 2460 2 view .LVU5670
 21824 003a 0223     		movs	r3, #2
 21825              	.L1562:
2493:src/xeq.c     **** #else
 21826              		.loc 1 2493 2 is_stmt 1 view .LVU5671
 21827 003c 0146     		mov	r1, r0
 21828              	.LVL1687:
 21829              	.LBB3126:
 21830              	.LBI3126:
2440:src/xeq.c     **** {
 21831              		.loc 1 2440 6 view .LVU5672
 21832              	.LBB3127:
ARM GAS  /tmp/ccqED0AM.s 			page 577


2442:src/xeq.c     **** 		dispmode -= 4;
 21833              		.loc 1 2442 2 view .LVU5673
 21834              	.L1567:
2450:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21835              		.loc 1 2450 2 view .LVU5674
2451:src/xeq.c     **** }
 21836              		.loc 1 2451 2 view .LVU5675
2450:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21837              		.loc 1 2450 18 is_stmt 0 view .LVU5676
 21838 003e B2F8E607 		ldrh	r0, [r2, #2022]
 21839              	.LVL1688:
2450:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21840              		.loc 1 2450 18 view .LVU5677
 21841              	.LBE3127:
 21842              	.LBE3126:
2500:src/xeq.c     **** 
 21843              		.loc 1 2500 1 view .LVU5678
 21844 0042 5DF8044B 		ldr	r4, [sp], #4
 21845              		.cfi_remember_state
 21846              		.cfi_restore 4
 21847              		.cfi_def_cfa_offset 0
 21848              	.LBB3131:
 21849              	.LBB3128:
2450:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21850              		.loc 1 2450 18 view .LVU5679
 21851 0046 01F00F01 		and	r1, r1, #15
 21852              	.LVL1689:
2450:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21853              		.loc 1 2450 18 view .LVU5680
 21854 004a 9B01     		lsls	r3, r3, #6
 21855 004c 43EA0123 		orr	r3, r3, r1, lsl #8
 21856 0050 20F47C61 		bic	r1, r0, #4032
 21857 0054 0B43     		orrs	r3, r3, r1
 21858 0056 A2F8E637 		strh	r3, [r2, #2022]	@ movhi
2450:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21859              		.loc 1 2450 18 view .LVU5681
 21860              	.LBE3128:
 21861              	.LBE3131:
2499:src/xeq.c     **** }
 21862              		.loc 1 2499 2 is_stmt 1 view .LVU5682
 21863 005a 5B20     		movs	r0, #91
 21864 005c FFF7FEBF 		b	op_float
 21865              	.LVL1690:
 21866              	.L1563:
 21867              		.cfi_restore_state
2460:src/xeq.c     **** 	case RARG_STD:
 21868              		.loc 1 2460 2 is_stmt 0 view .LVU5683
 21869 0060 0123     		movs	r3, #1
 21870 0062 EBE7     		b	.L1562
 21871              	.LVL1691:
 21872              	.L1557:
2460:src/xeq.c     **** 	case RARG_STD:
 21873              		.loc 1 2460 2 view .LVU5684
 21874 0064 9429     		cmp	r1, #148
 21875 0066 0CD0     		beq	.L1571
 21876 0068 9529     		cmp	r1, #149
 21877 006a 08BF     		it	eq
ARM GAS  /tmp/ccqED0AM.s 			page 578


 21878 006c 0523     		moveq	r3, #5
 21879              	.LVL1692:
2460:src/xeq.c     **** 	case RARG_STD:
 21880              		.loc 1 2460 2 view .LVU5685
 21881 006e 1CD1     		bne	.L1558
 21882              	.LVL1693:
 21883              	.L1564:
2481:src/xeq.c     **** 	  report_err(ERR_RANGE);
 21884              		.loc 1 2481 54 discriminator 1 view .LVU5686
 21885 0070 0728     		cmp	r0, #7
 21886 0072 0AD8     		bhi	.L1574
 21887              	.L1565:
2493:src/xeq.c     **** #else
 21888              		.loc 1 2493 2 is_stmt 1 view .LVU5687
 21889              	.LVL1694:
 21890              	.LBB3132:
2440:src/xeq.c     **** {
 21891              		.loc 1 2440 6 view .LVU5688
 21892              	.LBB3129:
2442:src/xeq.c     **** 		dispmode -= 4;
 21893              		.loc 1 2442 2 view .LVU5689
2443:src/xeq.c     **** 		dispdigs += 12;
 21894              		.loc 1 2443 3 view .LVU5690
2444:src/xeq.c     **** 		if (dispdigs >= 16) {
 21895              		.loc 1 2444 3 view .LVU5691
2444:src/xeq.c     **** 		if (dispdigs >= 16) {
 21896              		.loc 1 2444 12 is_stmt 0 view .LVU5692
 21897 0074 00F10C01 		add	r1, r0, #12
 21898              	.LVL1695:
2445:src/xeq.c     **** 			dispdigs -= 4;
 21899              		.loc 1 2445 3 is_stmt 1 view .LVU5693
2445:src/xeq.c     **** 			dispdigs -= 4;
 21900              		.loc 1 2445 6 is_stmt 0 view .LVU5694
 21901 0078 0F29     		cmp	r1, #15
 21902 007a 0EDC     		bgt	.L1568
2445:src/xeq.c     **** 			dispdigs -= 4;
 21903              		.loc 1 2445 6 view .LVU5695
 21904 007c 03F00303 		and	r3, r3, #3
 21905              	.LVL1696:
2445:src/xeq.c     **** 			dispdigs -= 4;
 21906              		.loc 1 2445 6 view .LVU5696
 21907 0080 DDE7     		b	.L1567
 21908              	.LVL1697:
 21909              	.L1571:
2445:src/xeq.c     **** 			dispdigs -= 4;
 21910              		.loc 1 2445 6 view .LVU5697
 21911              	.LBE3129:
 21912              	.LBE3132:
2481:src/xeq.c     **** 	  report_err(ERR_RANGE);
 21913              		.loc 1 2481 54 view .LVU5698
 21914 0082 0728     		cmp	r0, #7
2474:src/xeq.c     **** 	  break;
 21915              		.loc 1 2474 13 view .LVU5699
 21916 0084 4FF00403 		mov	r3, #4
 21917              	.LVL1698:
2481:src/xeq.c     **** 	  report_err(ERR_RANGE);
 21918              		.loc 1 2481 54 view .LVU5700
ARM GAS  /tmp/ccqED0AM.s 			page 579


 21919 0088 F4D9     		bls	.L1565
 21920              	.LVL1699:
 21921              	.L1574:
2482:src/xeq.c     **** 	  return;
 21922              		.loc 1 2482 4 is_stmt 1 view .LVU5701
 21923              	.LBB3133:
 21924              	.LBI3133:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 21925              		.loc 1 546 5 view .LVU5702
 21926              	.LBB3134:
 547:src/xeq.c     **** 		Error = e;
 21927              		.loc 1 547 2 view .LVU5703
 547:src/xeq.c     **** 		Error = e;
 21928              		.loc 1 547 12 is_stmt 0 view .LVU5704
 21929 008a 0D4B     		ldr	r3, .L1575+4
 21930              	.LVL1700:
 547:src/xeq.c     **** 		Error = e;
 21931              		.loc 1 547 5 view .LVU5705
 21932 008c 1A68     		ldr	r2, [r3]
 21933 008e 0AB9     		cbnz	r2, .L1555
 21934              	.LVL1701:
 21935              	.LBB3135:
 21936              	.LBI3135:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 21937              		.loc 1 546 5 is_stmt 1 view .LVU5706
 21938              	.LBB3136:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 21939              		.loc 1 548 3 view .LVU5707
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 21940              		.loc 1 548 9 is_stmt 0 view .LVU5708
 21941 0090 0822     		movs	r2, #8
 21942 0092 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 21943              		.loc 1 549 3 is_stmt 1 view .LVU5709
 21944              	.LVL1702:
 21945              	.L1555:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 21946              		.loc 1 549 3 is_stmt 0 view .LVU5710
 21947              	.LBE3136:
 21948              	.LBE3135:
 21949              	.LBE3134:
 21950              	.LBE3133:
2500:src/xeq.c     **** 
 21951              		.loc 1 2500 1 view .LVU5711
 21952 0094 5DF8044B 		ldr	r4, [sp], #4
 21953              		.cfi_remember_state
 21954              		.cfi_restore 4
 21955              		.cfi_def_cfa_offset 0
 21956 0098 7047     		bx	lr
 21957              	.LVL1703:
 21958              	.L1568:
 21959              		.cfi_restore_state
 21960              	.LBB3137:
 21961              	.LBB3130:
2446:src/xeq.c     **** 			dispmode += 2;
 21962              		.loc 1 2446 4 is_stmt 1 view .LVU5712
2447:src/xeq.c     **** 		}
ARM GAS  /tmp/ccqED0AM.s 			page 580


 21963              		.loc 1 2447 13 is_stmt 0 view .LVU5713
 21964 009a 023B     		subs	r3, r3, #2
 21965              	.LVL1704:
2447:src/xeq.c     **** 		}
 21966              		.loc 1 2447 13 view .LVU5714
 21967 009c 03F00303 		and	r3, r3, #3
 21968              	.LVL1705:
2446:src/xeq.c     **** 			dispmode += 2;
 21969              		.loc 1 2446 13 view .LVU5715
 21970 00a0 00F10801 		add	r1, r0, #8
 21971              	.LVL1706:
2447:src/xeq.c     **** 		}
 21972              		.loc 1 2447 4 is_stmt 1 view .LVU5716
2447:src/xeq.c     **** 		}
 21973              		.loc 1 2447 4 is_stmt 0 view .LVU5717
 21974 00a4 CBE7     		b	.L1567
 21975              	.LVL1707:
 21976              	.L1560:
2447:src/xeq.c     **** 		}
 21977              		.loc 1 2447 4 view .LVU5718
 21978              	.LBE3130:
 21979              	.LBE3137:
2471:src/xeq.c     **** 	  break;
 21980              		.loc 1 2471 4 is_stmt 1 view .LVU5719
2472:src/xeq.c     **** 	case RARG_SIG:
 21981              		.loc 1 2472 4 view .LVU5720
 21982 00a6 0323     		movs	r3, #3
 21983 00a8 C8E7     		b	.L1562
 21984              	.LVL1708:
 21985              	.L1558:
2479:src/xeq.c     **** 	}
 21986              		.loc 1 2479 10 view .LVU5721
2481:src/xeq.c     **** 	  report_err(ERR_RANGE);
 21987              		.loc 1 2481 2 view .LVU5722
2481:src/xeq.c     **** 	  report_err(ERR_RANGE);
 21988              		.loc 1 2481 28 is_stmt 0 view .LVU5723
 21989 00aa 191F     		subs	r1, r3, #4
 21990              	.LVL1709:
2481:src/xeq.c     **** 	  report_err(ERR_RANGE);
 21991              		.loc 1 2481 5 view .LVU5724
 21992 00ac 0129     		cmp	r1, #1
 21993 00ae DFD9     		bls	.L1564
 21994 00b0 03F00303 		and	r3, r3, #3
 21995              	.LVL1710:
2481:src/xeq.c     **** 	  report_err(ERR_RANGE);
 21996              		.loc 1 2481 5 view .LVU5725
 21997 00b4 C2E7     		b	.L1562
 21998              	.LVL1711:
 21999              	.L1559:
2460:src/xeq.c     **** 	case RARG_STD:
 22000              		.loc 1 2460 2 view .LVU5726
 22001 00b6 0023     		movs	r3, #0
 22002 00b8 C0E7     		b	.L1562
 22003              	.L1576:
 22004 00ba 00BF     		.align	2
 22005              	.L1575:
 22006 00bc 00000000 		.word	main_ram
ARM GAS  /tmp/ccqED0AM.s 			page 581


 22007 00c0 00000000 		.word	Error
 22008              		.cfi_endproc
 22009              	.LFE173:
 22011              		.section	.text.set_int_base,"ax",%progbits
 22012              		.align	1
 22013              		.p2align 2,,3
 22014              		.global	set_int_base
 22015              		.syntax unified
 22016              		.thumb
 22017              		.thumb_func
 22018              		.fpu fpv4-sp-d16
 22020              	set_int_base:
 22021              	.LVL1712:
 22022              	.LFB210:
3761:src/xeq.c     **** 	if (arg < 2) {
 22023              		.loc 1 3761 51 is_stmt 1 view -0
 22024              		.cfi_startproc
 22025              		@ args = 0, pretend = 0, frame = 0
 22026              		@ frame_needed = 0, uses_anonymous_args = 0
3762:src/xeq.c     **** 		if (arg == 0)
 22027              		.loc 1 3762 2 view .LVU5728
3762:src/xeq.c     **** 		if (arg == 0)
 22028              		.loc 1 3762 5 is_stmt 0 view .LVU5729
 22029 0000 0128     		cmp	r0, #1
3761:src/xeq.c     **** 	if (arg < 2) {
 22030              		.loc 1 3761 51 view .LVU5730
 22031 0002 08B5     		push	{r3, lr}
 22032              		.cfi_def_cfa_offset 8
 22033              		.cfi_offset 3, -8
 22034              		.cfi_offset 14, -4
3762:src/xeq.c     **** 		if (arg == 0)
 22035              		.loc 1 3762 5 view .LVU5731
 22036 0004 0BD9     		bls	.L1582
3768:src/xeq.c     **** }
 22037              		.loc 1 3768 3 is_stmt 1 view .LVU5732
 22038              	.LVL1713:
 22039              	.LBB3138:
 22040              	.LBI3138:
3755:src/xeq.c     **** 	UState.int_base = b - 1;
 22041              		.loc 1 3755 13 view .LVU5733
 22042              	.LBB3139:
3756:src/xeq.c     **** 	if (!is_intmode())
 22043              		.loc 1 3756 2 view .LVU5734
 22044 0006 114B     		ldr	r3, .L1584
 22045 0008 1A68     		ldr	r2, [r3]
3756:src/xeq.c     **** 	if (!is_intmode())
 22046              		.loc 1 3756 18 is_stmt 0 view .LVU5735
 22047 000a 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
3756:src/xeq.c     **** 	if (!is_intmode())
 22048              		.loc 1 3756 22 view .LVU5736
 22049 000e 0138     		subs	r0, r0, #1
 22050              	.LVL1714:
3756:src/xeq.c     **** 	if (!is_intmode())
 22051              		.loc 1 3756 18 view .LVU5737
 22052 0010 60F30713 		bfi	r3, r0, #4, #4
 22053 0014 82F8E837 		strb	r3, [r2, #2024]
3757:src/xeq.c     **** 		switch_to_int();
ARM GAS  /tmp/ccqED0AM.s 			page 582


 22054              		.loc 1 3757 2 is_stmt 1 view .LVU5738
3757:src/xeq.c     **** 		switch_to_int();
 22055              		.loc 1 3757 5 is_stmt 0 view .LVU5739
 22056 0018 DB07     		lsls	r3, r3, #31
 22057 001a 12D5     		bpl	.L1583
 22058              	.LBE3139:
 22059              	.LBE3138:
3769:src/xeq.c     **** 
 22060              		.loc 1 3769 1 view .LVU5740
 22061 001c 08BD     		pop	{r3, pc}
 22062              	.LVL1715:
 22063              	.L1582:
3763:src/xeq.c     **** 			op_float(OP_FLOAT);
 22064              		.loc 1 3763 3 is_stmt 1 view .LVU5741
3763:src/xeq.c     **** 			op_float(OP_FLOAT);
 22065              		.loc 1 3763 6 is_stmt 0 view .LVU5742
 22066 001e 20B9     		cbnz	r0, .L1579
3764:src/xeq.c     **** 		else
 22067              		.loc 1 3764 4 is_stmt 1 view .LVU5743
3769:src/xeq.c     **** 
 22068              		.loc 1 3769 1 is_stmt 0 view .LVU5744
 22069 0020 BDE80840 		pop	{r3, lr}
 22070              		.cfi_remember_state
 22071              		.cfi_restore 14
 22072              		.cfi_restore 3
 22073              		.cfi_def_cfa_offset 0
3764:src/xeq.c     **** 		else
 22074              		.loc 1 3764 4 view .LVU5745
 22075 0024 5B20     		movs	r0, #91
 22076              	.LVL1716:
3764:src/xeq.c     **** 		else
 22077              		.loc 1 3764 4 view .LVU5746
 22078 0026 FFF7FEBF 		b	op_float
 22079              	.LVL1717:
 22080              	.L1579:
 22081              		.cfi_restore_state
3766:src/xeq.c     **** 	} else
 22082              		.loc 1 3766 4 is_stmt 1 view .LVU5747
 22083              	.LBB3142:
 22084              	.LBI3142:
3772:src/xeq.c     **** 	op_float(OP_FLOAT);
 22085              		.loc 1 3772 6 view .LVU5748
 22086              	.LBB3143:
3773:src/xeq.c     **** 	UState.fract = 1;
 22087              		.loc 1 3773 2 view .LVU5749
 22088 002a 5B20     		movs	r0, #91
 22089              	.LVL1718:
3773:src/xeq.c     **** 	UState.fract = 1;
 22090              		.loc 1 3773 2 is_stmt 0 view .LVU5750
 22091 002c FFF7FEFF 		bl	op_float
 22092              	.LVL1719:
3774:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 22093              		.loc 1 3774 2 is_stmt 1 view .LVU5751
3774:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 22094              		.loc 1 3774 15 is_stmt 0 view .LVU5752
 22095 0030 064B     		ldr	r3, .L1584
 22096 0032 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/ccqED0AM.s 			page 583


 22097 0034 92F8E637 		ldrb	r3, [r2, #2022]	@ zero_extendqisi2
 22098 0038 43F02003 		orr	r3, r3, #32
 22099 003c 82F8E637 		strb	r3, [r2, #2022]
3775:src/xeq.c     **** 		UState.improperfrac = 1;
 22100              		.loc 1 3775 2 is_stmt 1 view .LVU5753
3777:src/xeq.c     **** 		UState.improperfrac = 0;
 22101              		.loc 1 3777 7 view .LVU5754
 22102              	.LBE3143:
 22103              	.LBE3142:
3769:src/xeq.c     **** 
 22104              		.loc 1 3769 1 is_stmt 0 view .LVU5755
 22105 0040 08BD     		pop	{r3, pc}
 22106              	.LVL1720:
 22107              	.L1583:
 22108              	.LBB3144:
 22109              	.LBB3140:
3758:src/xeq.c     **** }
 22110              		.loc 1 3758 3 is_stmt 1 view .LVU5756
 22111              	.LBE3140:
 22112              	.LBE3144:
3769:src/xeq.c     **** 
 22113              		.loc 1 3769 1 is_stmt 0 view .LVU5757
 22114 0042 BDE80840 		pop	{r3, lr}
 22115              		.cfi_restore 14
 22116              		.cfi_restore 3
 22117              		.cfi_def_cfa_offset 0
 22118              	.LBB3145:
 22119              	.LBB3141:
3758:src/xeq.c     **** }
 22120              		.loc 1 3758 3 view .LVU5758
 22121 0046 FFF7FEBF 		b	switch_to_int
 22122              	.LVL1721:
 22123              	.L1585:
3758:src/xeq.c     **** }
 22124              		.loc 1 3758 3 view .LVU5759
 22125 004a 00BF     		.align	2
 22126              	.L1584:
 22127 004c 00000000 		.word	main_ram
 22128              	.LBE3141:
 22129              	.LBE3145:
 22130              		.cfi_endproc
 22131              	.LFE210:
 22133              		.section	.text.op_fract,"ax",%progbits
 22134              		.align	1
 22135              		.p2align 2,,3
 22136              		.global	op_fract
 22137              		.syntax unified
 22138              		.thumb
 22139              		.thumb_func
 22140              		.fpu fpv4-sp-d16
 22142              	op_fract:
 22143              	.LVL1722:
 22144              	.LFB211:
3772:src/xeq.c     **** 	op_float(OP_FLOAT);
 22145              		.loc 1 3772 30 is_stmt 1 view -0
 22146              		.cfi_startproc
 22147              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccqED0AM.s 			page 584


 22148              		@ frame_needed = 0, uses_anonymous_args = 0
3773:src/xeq.c     **** 	UState.fract = 1;
 22149              		.loc 1 3773 2 view .LVU5761
3772:src/xeq.c     **** 	op_float(OP_FLOAT);
 22150              		.loc 1 3772 30 is_stmt 0 view .LVU5762
 22151 0000 10B5     		push	{r4, lr}
 22152              		.cfi_def_cfa_offset 8
 22153              		.cfi_offset 4, -8
 22154              		.cfi_offset 14, -4
3772:src/xeq.c     **** 	op_float(OP_FLOAT);
 22155              		.loc 1 3772 30 view .LVU5763
 22156 0002 0446     		mov	r4, r0
3773:src/xeq.c     **** 	UState.fract = 1;
 22157              		.loc 1 3773 2 view .LVU5764
 22158 0004 5B20     		movs	r0, #91
 22159              	.LVL1723:
3773:src/xeq.c     **** 	UState.fract = 1;
 22160              		.loc 1 3773 2 view .LVU5765
 22161 0006 FFF7FEFF 		bl	op_float
 22162              	.LVL1724:
3774:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 22163              		.loc 1 3774 2 is_stmt 1 view .LVU5766
 22164 000a 0D4B     		ldr	r3, .L1592
 22165 000c 1B68     		ldr	r3, [r3]
3774:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 22166              		.loc 1 3774 15 is_stmt 0 view .LVU5767
 22167 000e 93F8E627 		ldrb	r2, [r3, #2022]	@ zero_extendqisi2
3775:src/xeq.c     **** 		UState.improperfrac = 1;
 22168              		.loc 1 3775 5 view .LVU5768
 22169 0012 4D2C     		cmp	r4, #77
3774:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 22170              		.loc 1 3774 15 view .LVU5769
 22171 0014 42F02002 		orr	r2, r2, #32
 22172 0018 83F8E627 		strb	r2, [r3, #2022]
3775:src/xeq.c     **** 		UState.improperfrac = 1;
 22173              		.loc 1 3775 2 is_stmt 1 view .LVU5770
3775:src/xeq.c     **** 		UState.improperfrac = 1;
 22174              		.loc 1 3775 5 is_stmt 0 view .LVU5771
 22175 001c 09D0     		beq	.L1590
3777:src/xeq.c     **** 		UState.improperfrac = 0;
 22176              		.loc 1 3777 7 is_stmt 1 view .LVU5772
3777:src/xeq.c     **** 		UState.improperfrac = 0;
 22177              		.loc 1 3777 10 is_stmt 0 view .LVU5773
 22178 001e 4E2C     		cmp	r4, #78
 22179 0020 00D0     		beq	.L1591
3779:src/xeq.c     **** 
 22180              		.loc 1 3779 1 view .LVU5774
 22181 0022 10BD     		pop	{r4, pc}
 22182              	.L1591:
3778:src/xeq.c     **** }
 22183              		.loc 1 3778 3 is_stmt 1 view .LVU5775
3778:src/xeq.c     **** }
 22184              		.loc 1 3778 23 is_stmt 0 view .LVU5776
 22185 0024 93F8E627 		ldrb	r2, [r3, #2022]	@ zero_extendqisi2
 22186 0028 6FF30412 		bfc	r2, #4, #1
 22187 002c 83F8E627 		strb	r2, [r3, #2022]
3779:src/xeq.c     **** 
ARM GAS  /tmp/ccqED0AM.s 			page 585


 22188              		.loc 1 3779 1 view .LVU5777
 22189 0030 10BD     		pop	{r4, pc}
 22190              	.L1590:
3776:src/xeq.c     **** 	else if (op == OP_FRACPROPER)
 22191              		.loc 1 3776 3 is_stmt 1 view .LVU5778
3776:src/xeq.c     **** 	else if (op == OP_FRACPROPER)
 22192              		.loc 1 3776 23 is_stmt 0 view .LVU5779
 22193 0032 D2B2     		uxtb	r2, r2
 22194 0034 42F01002 		orr	r2, r2, #16
 22195 0038 83F8E627 		strb	r2, [r3, #2022]
3779:src/xeq.c     **** 
 22196              		.loc 1 3779 1 view .LVU5780
 22197 003c 10BD     		pop	{r4, pc}
 22198              	.L1593:
 22199 003e 00BF     		.align	2
 22200              	.L1592:
 22201 0040 00000000 		.word	main_ram
 22202              		.cfi_endproc
 22203              	.LFE211:
 22205              		.section	.text.cmdsavem,"ax",%progbits
 22206              		.align	1
 22207              		.p2align 2,,3
 22208              		.global	cmdsavem
 22209              		.syntax unified
 22210              		.thumb
 22211              		.thumb_func
 22212              		.fpu fpv4-sp-d16
 22214              	cmdsavem:
 22215              	.LVL1725:
 22216              	.LFB212:
3784:src/xeq.c     **** 	xcopy( get_reg_n(arg), &UState, sizeof(unsigned long long int) );
 22217              		.loc 1 3784 47 is_stmt 1 view -0
 22218              		.cfi_startproc
 22219              		@ args = 0, pretend = 0, frame = 0
 22220              		@ frame_needed = 0, uses_anonymous_args = 0
3785:src/xeq.c     **** }
 22221              		.loc 1 3785 2 view .LVU5782
3784:src/xeq.c     **** 	xcopy( get_reg_n(arg), &UState, sizeof(unsigned long long int) );
 22222              		.loc 1 3784 47 is_stmt 0 view .LVU5783
 22223 0000 08B5     		push	{r3, lr}
 22224              		.cfi_def_cfa_offset 8
 22225              		.cfi_offset 3, -8
 22226              		.cfi_offset 14, -4
3785:src/xeq.c     **** }
 22227              		.loc 1 3785 9 view .LVU5784
 22228 0002 FFF7FEFF 		bl	get_reg_n
 22229              	.LVL1726:
3785:src/xeq.c     **** }
 22230              		.loc 1 3785 26 view .LVU5785
 22231 0006 044B     		ldr	r3, .L1596
3785:src/xeq.c     **** }
 22232              		.loc 1 3785 25 view .LVU5786
 22233 0008 1968     		ldr	r1, [r3]
3785:src/xeq.c     **** }
 22234              		.loc 1 3785 2 view .LVU5787
 22235 000a 0822     		movs	r2, #8
3786:src/xeq.c     **** 
ARM GAS  /tmp/ccqED0AM.s 			page 586


 22236              		.loc 1 3786 1 view .LVU5788
 22237 000c BDE80840 		pop	{r3, lr}
 22238              		.cfi_restore 14
 22239              		.cfi_restore 3
 22240              		.cfi_def_cfa_offset 0
3785:src/xeq.c     **** }
 22241              		.loc 1 3785 2 view .LVU5789
 22242 0010 01F2E471 		addw	r1, r1, #2020
 22243 0014 FFF7FEBF 		b	xcopy
 22244              	.LVL1727:
 22245              	.L1597:
 22246              		.align	2
 22247              	.L1596:
 22248 0018 00000000 		.word	main_ram
 22249              		.cfi_endproc
 22250              	.LFE212:
 22252              		.section	.text.set_entry,"ax",%progbits
 22253              		.align	1
 22254              		.p2align 2,,3
 22255              		.global	set_entry
 22256              		.syntax unified
 22257              		.thumb
 22258              		.thumb_func
 22259              		.fpu fpv4-sp-d16
 22261              	set_entry:
 22262              	.LFB215:
3911:src/xeq.c     **** 	if (!Running && !XromRunning)
 22263              		.loc 1 3911 18 is_stmt 1 view -0
 22264              		.cfi_startproc
 22265              		@ args = 0, pretend = 0, frame = 0
 22266              		@ frame_needed = 0, uses_anonymous_args = 0
 22267              		@ link register save eliminated.
3912:src/xeq.c     **** 		State.entryp = 1;
 22268              		.loc 1 3912 2 view .LVU5791
 22269              	.LBB3148:
 22270              	.LBI3148:
3911:src/xeq.c     **** 	if (!Running && !XromRunning)
 22271              		.loc 1 3911 6 view .LVU5792
 22272              	.LBE3148:
3912:src/xeq.c     **** 		State.entryp = 1;
 22273              		.loc 1 3912 6 is_stmt 0 view .LVU5793
 22274 0000 074A     		ldr	r2, .L1600
 22275              	.LBB3150:
 22276              	.LBB3149:
3912:src/xeq.c     **** 		State.entryp = 1;
 22277              		.loc 1 3912 18 view .LVU5794
 22278 0002 084B     		ldr	r3, .L1600+4
3912:src/xeq.c     **** 		State.entryp = 1;
 22279              		.loc 1 3912 15 view .LVU5795
 22280 0004 1268     		ldr	r2, [r2]
 22281 0006 1B68     		ldr	r3, [r3]
 22282 0008 1343     		orrs	r3, r2, r3
 22283 000a 07D1     		bne	.L1598
3913:src/xeq.c     **** }
 22284              		.loc 1 3913 3 is_stmt 1 view .LVU5796
3913:src/xeq.c     **** }
 22285              		.loc 1 3913 16 is_stmt 0 view .LVU5797
ARM GAS  /tmp/ccqED0AM.s 			page 587


 22286 000c 064B     		ldr	r3, .L1600+8
 22287 000e 1A68     		ldr	r2, [r3]
 22288 0010 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
 22289 0014 43F01003 		orr	r3, r3, #16
 22290 0018 82F8DD37 		strb	r3, [r2, #2013]
 22291              	.L1598:
 22292              	.LBE3149:
 22293              	.LBE3150:
3914:src/xeq.c     **** 
 22294              		.loc 1 3914 1 view .LVU5798
 22295 001c 7047     		bx	lr
 22296              	.L1601:
 22297 001e 00BF     		.align	2
 22298              	.L1600:
 22299 0020 00000000 		.word	Running
 22300 0024 00000000 		.word	XromRunning
 22301 0028 00000000 		.word	main_ram
 22302              		.cfi_endproc
 22303              	.LFE215:
 22305              		.section	.text.get_trig_mode,"ax",%progbits
 22306              		.align	1
 22307              		.p2align 2,,3
 22308              		.global	get_trig_mode
 22309              		.syntax unified
 22310              		.thumb
 22311              		.thumb_func
 22312              		.fpu fpv4-sp-d16
 22314              	get_trig_mode:
 22315              	.LFB217:
4099:src/xeq.c     **** 	if (State2.cmplx || XromFlags.xIN)
 22316              		.loc 1 4099 37 is_stmt 1 view -0
 22317              		.cfi_startproc
 22318              		@ args = 0, pretend = 0, frame = 0
 22319              		@ frame_needed = 0, uses_anonymous_args = 0
 22320              		@ link register save eliminated.
4100:src/xeq.c     **** 		return TRIG_RAD;
 22321              		.loc 1 4100 2 view .LVU5800
4100:src/xeq.c     **** 		return TRIG_RAD;
 22322              		.loc 1 4100 6 is_stmt 0 view .LVU5801
 22323 0000 084B     		ldr	r3, .L1606
 22324 0002 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
4100:src/xeq.c     **** 		return TRIG_RAD;
 22325              		.loc 1 4100 5 view .LVU5802
 22326 0004 9B07     		lsls	r3, r3, #30
 22327 0006 0AD4     		bmi	.L1605
4100:src/xeq.c     **** 		return TRIG_RAD;
 22328              		.loc 1 4100 19 discriminator 1 view .LVU5803
 22329 0008 074B     		ldr	r3, .L1606+4
 22330 000a 93F90130 		ldrsb	r3, [r3, #1]
 22331 000e 002B     		cmp	r3, #0
 22332 0010 05DB     		blt	.L1605
4103:src/xeq.c     **** }
 22333              		.loc 1 4103 2 is_stmt 1 view .LVU5804
4103:src/xeq.c     **** }
 22334              		.loc 1 4103 33 is_stmt 0 view .LVU5805
 22335 0012 064B     		ldr	r3, .L1606+8
 22336 0014 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccqED0AM.s 			page 588


 22337 0016 93F8EA07 		ldrb	r0, [r3, #2026]	@ zero_extendqisi2
4103:src/xeq.c     **** }
 22338              		.loc 1 4103 9 view .LVU5806
 22339 001a 8009     		lsrs	r0, r0, #6
 22340 001c 7047     		bx	lr
 22341              	.L1605:
4101:src/xeq.c     **** 	//if (State2.hyp)	return TRIG_RAD;
 22342              		.loc 1 4101 10 view .LVU5807
 22343 001e 0120     		movs	r0, #1
4104:src/xeq.c     **** 
 22344              		.loc 1 4104 1 view .LVU5808
 22345 0020 7047     		bx	lr
 22346              	.L1607:
 22347 0022 00BF     		.align	2
 22348              	.L1606:
 22349 0024 00000000 		.word	StateWhileOn
 22350 0028 00000000 		.word	XromParams
 22351 002c 00000000 		.word	main_ram
 22352              		.cfi_endproc
 22353              	.LFE217:
 22355              		.section	.text.cmdpause,"ax",%progbits
 22356              		.align	1
 22357              		.p2align 2,,3
 22358              		.global	cmdpause
 22359              		.syntax unified
 22360              		.thumb
 22361              		.thumb_func
 22362              		.fpu fpv4-sp-d16
 22364              	cmdpause:
 22365              	.LVL1728:
 22366              	.LFB219:
4149:src/xeq.c     **** 	display();
 22367              		.loc 1 4149 47 is_stmt 1 view -0
 22368              		.cfi_startproc
 22369              		@ args = 0, pretend = 0, frame = 0
 22370              		@ frame_needed = 0, uses_anonymous_args = 0
4150:src/xeq.c     **** #ifndef CONSOLE
 22371              		.loc 1 4150 2 view .LVU5810
4149:src/xeq.c     **** 	display();
 22372              		.loc 1 4149 47 is_stmt 0 view .LVU5811
 22373 0000 10B5     		push	{r4, lr}
 22374              		.cfi_def_cfa_offset 8
 22375              		.cfi_offset 4, -8
 22376              		.cfi_offset 14, -4
4149:src/xeq.c     **** 	display();
 22377              		.loc 1 4149 47 view .LVU5812
 22378 0002 0446     		mov	r4, r0
4150:src/xeq.c     **** #ifndef CONSOLE
 22379              		.loc 1 4150 2 view .LVU5813
 22380 0004 FFF7FEFF 		bl	display
 22381              	.LVL1729:
4153:src/xeq.c     **** 	GoFast = (arg == 0);
 22382              		.loc 1 4153 2 is_stmt 1 view .LVU5814
4153:src/xeq.c     **** 	GoFast = (arg == 0);
 22383              		.loc 1 4153 8 is_stmt 0 view .LVU5815
 22384 0008 044A     		ldr	r2, .L1610
4154:src/xeq.c     **** #elif 0
ARM GAS  /tmp/ccqED0AM.s 			page 589


 22385              		.loc 1 4154 9 view .LVU5816
 22386 000a 0549     		ldr	r1, .L1610+4
4154:src/xeq.c     **** #elif 0
 22387              		.loc 1 4154 16 view .LVU5817
 22388 000c B4FA84F3 		clz	r3, r4
4153:src/xeq.c     **** 	GoFast = (arg == 0);
 22389              		.loc 1 4153 8 view .LVU5818
 22390 0010 E4B2     		uxtb	r4, r4
 22391              	.LVL1730:
4154:src/xeq.c     **** #elif 0
 22392              		.loc 1 4154 16 view .LVU5819
 22393 0012 5B09     		lsrs	r3, r3, #5
4153:src/xeq.c     **** 	GoFast = (arg == 0);
 22394              		.loc 1 4153 8 view .LVU5820
 22395 0014 1470     		strb	r4, [r2]
4154:src/xeq.c     **** #elif 0
 22396              		.loc 1 4154 2 is_stmt 1 view .LVU5821
4154:src/xeq.c     **** #elif 0
 22397              		.loc 1 4154 9 is_stmt 0 view .LVU5822
 22398 0016 0B60     		str	r3, [r1]
4165:src/xeq.c     **** 
 22399              		.loc 1 4165 1 view .LVU5823
 22400 0018 10BD     		pop	{r4, pc}
 22401              	.L1611:
 22402 001a 00BF     		.align	2
 22403              	.L1610:
 22404 001c 00000000 		.word	Pause
 22405 0020 00000000 		.word	GoFast
 22406              		.cfi_endproc
 22407              	.LFE219:
 22409              		.section	.text.op_setspeed,"ax",%progbits
 22410              		.align	1
 22411              		.p2align 2,,3
 22412              		.global	op_setspeed
 22413              		.syntax unified
 22414              		.thumb
 22415              		.thumb_func
 22416              		.fpu fpv4-sp-d16
 22418              	op_setspeed:
 22419              	.LVL1731:
 22420              	.LFB220:
4169:src/xeq.c     **** 	UState.slow_speed = (op == OP_SLOW) ? 1 : 0;
 22421              		.loc 1 4169 33 is_stmt 1 view -0
 22422              		.cfi_startproc
 22423              		@ args = 0, pretend = 0, frame = 0
 22424              		@ frame_needed = 0, uses_anonymous_args = 0
 22425              		@ link register save eliminated.
4170:src/xeq.c     **** 	update_speed(1);
 22426              		.loc 1 4170 2 view .LVU5825
4170:src/xeq.c     **** 	update_speed(1);
 22427              		.loc 1 4170 20 is_stmt 0 view .LVU5826
 22428 0000 064B     		ldr	r3, .L1613
 22429 0002 1B68     		ldr	r3, [r3]
4170:src/xeq.c     **** 	update_speed(1);
 22430              		.loc 1 4170 42 view .LVU5827
 22431 0004 A0F19A00 		sub	r0, #154
 22432              	.LVL1732:
ARM GAS  /tmp/ccqED0AM.s 			page 590


4170:src/xeq.c     **** 	update_speed(1);
 22433              		.loc 1 4170 20 view .LVU5828
 22434 0008 93F8EB27 		ldrb	r2, [r3, #2027]	@ zero_extendqisi2
4170:src/xeq.c     **** 	update_speed(1);
 22435              		.loc 1 4170 42 view .LVU5829
 22436 000c B0FA80F0 		clz	r0, r0
 22437 0010 4009     		lsrs	r0, r0, #5
4170:src/xeq.c     **** 	update_speed(1);
 22438              		.loc 1 4170 20 view .LVU5830
 22439 0012 60F3C302 		bfi	r2, r0, #3, #1
 22440 0016 83F8EB27 		strb	r2, [r3, #2027]
4171:src/xeq.c     **** }
 22441              		.loc 1 4171 17 is_stmt 1 view .LVU5831
4172:src/xeq.c     **** 
 22442              		.loc 1 4172 1 is_stmt 0 view .LVU5832
 22443 001a 7047     		bx	lr
 22444              	.L1614:
 22445              		.align	2
 22446              	.L1613:
 22447 001c 00000000 		.word	main_ram
 22448              		.cfi_endproc
 22449              	.LFE220:
 22451              		.section	.text.op_prompt,"ax",%progbits
 22452              		.align	1
 22453              		.p2align 2,,3
 22454              		.global	op_prompt
 22455              		.syntax unified
 22456              		.thumb
 22457              		.thumb_func
 22458              		.fpu fpv4-sp-d16
 22460              	op_prompt:
 22461              	.LVL1733:
 22462              	.LFB221:
4175:src/xeq.c     **** 	set_running_off();
 22463              		.loc 1 4175 31 is_stmt 1 view -0
 22464              		.cfi_startproc
 22465              		@ args = 0, pretend = 0, frame = 0
 22466              		@ frame_needed = 0, uses_anonymous_args = 0
4176:src/xeq.c     **** 	alpha_view_common(regX_idx);
 22467              		.loc 1 4176 2 view .LVU5834
 22468              	.LBB3151:
 22469              	.LBI3151:
5818:src/xeq.c     **** 	set_running_off_sst();
 22470              		.loc 1 5818 6 view .LVU5835
 22471              	.LBB3152:
5819:src/xeq.c     **** 	State.entryp = 0;
 22472              		.loc 1 5819 2 view .LVU5836
 22473              	.LBB3153:
 22474              	.LBI3153:
5810:src/xeq.c     **** 	Running = 0;
 22475              		.loc 1 5810 6 view .LVU5837
 22476              	.LBB3154:
5811:src/xeq.c     **** }
 22477              		.loc 1 5811 2 view .LVU5838
 22478              	.LBE3154:
 22479              	.LBE3153:
 22480              	.LBE3152:
ARM GAS  /tmp/ccqED0AM.s 			page 591


 22481              	.LBE3151:
4175:src/xeq.c     **** 	set_running_off();
 22482              		.loc 1 4175 31 is_stmt 0 view .LVU5839
 22483 0000 08B5     		push	{r3, lr}
 22484              		.cfi_def_cfa_offset 8
 22485              		.cfi_offset 3, -8
 22486              		.cfi_offset 14, -4
 22487              	.LBB3160:
 22488              	.LBB3159:
5820:src/xeq.c     **** 	dot( RCL_annun, 0);
 22489              		.loc 1 5820 15 view .LVU5840
 22490 0002 094B     		ldr	r3, .L1617
 22491              	.LBB3157:
 22492              	.LBB3155:
5811:src/xeq.c     **** }
 22493              		.loc 1 5811 10 view .LVU5841
 22494 0004 094A     		ldr	r2, .L1617+4
 22495              	.LBE3155:
 22496              	.LBE3157:
5820:src/xeq.c     **** 	dot( RCL_annun, 0);
 22497              		.loc 1 5820 15 view .LVU5842
 22498 0006 1B68     		ldr	r3, [r3]
 22499              	.LBB3158:
 22500              	.LBB3156:
5811:src/xeq.c     **** }
 22501              		.loc 1 5811 10 view .LVU5843
 22502 0008 0021     		movs	r1, #0
 22503 000a 1160     		str	r1, [r2]
 22504              	.LBE3156:
 22505              	.LBE3158:
5820:src/xeq.c     **** 	dot( RCL_annun, 0);
 22506              		.loc 1 5820 2 is_stmt 1 view .LVU5844
5820:src/xeq.c     **** 	dot( RCL_annun, 0);
 22507              		.loc 1 5820 15 is_stmt 0 view .LVU5845
 22508 000c 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 22509 0010 61F30412 		bfi	r2, r1, #4, #1
 22510 0014 83F8DD27 		strb	r2, [r3, #2013]
 22511              		.loc 1 5821 2 is_stmt 1 view .LVU5846
 22512 0018 8A20     		movs	r0, #138
 22513              	.LVL1734:
 22514              		.loc 1 5821 2 is_stmt 0 view .LVU5847
 22515 001a FFF7FEFF 		bl	dot
 22516              	.LVL1735:
 22517              	.LBE3159:
 22518              	.LBE3160:
4177:src/xeq.c     **** }
 22519              		.loc 1 4177 2 is_stmt 1 view .LVU5848
4178:src/xeq.c     **** 
 22520              		.loc 1 4178 1 is_stmt 0 view .LVU5849
 22521 001e BDE80840 		pop	{r3, lr}
 22522              		.cfi_restore 14
 22523              		.cfi_restore 3
 22524              		.cfi_def_cfa_offset 0
4177:src/xeq.c     **** }
 22525              		.loc 1 4177 2 view .LVU5850
 22526 0022 6420     		movs	r0, #100
 22527 0024 FFF7FEBF 		b	alpha_view_common
ARM GAS  /tmp/ccqED0AM.s 			page 592


 22528              	.LVL1736:
 22529              	.L1618:
 22530              		.align	2
 22531              	.L1617:
 22532 0028 00000000 		.word	main_ram
 22533 002c 00000000 		.word	Running
 22534              		.cfi_endproc
 22535              	.LFE221:
 22537              		.section	.text.XisInt,"ax",%progbits
 22538              		.align	1
 22539              		.p2align 2,,3
 22540              		.global	XisInt
 22541              		.syntax unified
 22542              		.thumb
 22543              		.thumb_func
 22544              		.fpu fpv4-sp-d16
 22546              	XisInt:
 22547              	.LVL1737:
 22548              	.LFB222:
4182:src/xeq.c     **** 	decNumber x;
 22549              		.loc 1 4182 28 is_stmt 1 view -0
 22550              		.cfi_startproc
 22551              		@ args = 0, pretend = 0, frame = 40
 22552              		@ frame_needed = 0, uses_anonymous_args = 0
4183:src/xeq.c     **** 	int result, op_int = (op == OP_XisINT);
 22553              		.loc 1 4183 2 view .LVU5852
4184:src/xeq.c     **** 	if ( is_intmode() )
 22554              		.loc 1 4184 2 view .LVU5853
4185:src/xeq.c     **** 		result = op_int;
 22555              		.loc 1 4185 7 is_stmt 0 view .LVU5854
 22556 0000 164B     		ldr	r3, .L1625
4182:src/xeq.c     **** 	decNumber x;
 22557              		.loc 1 4182 28 view .LVU5855
 22558 0002 30B5     		push	{r4, r5, lr}
 22559              		.cfi_def_cfa_offset 12
 22560              		.cfi_offset 4, -12
 22561              		.cfi_offset 5, -8
 22562              		.cfi_offset 14, -4
4185:src/xeq.c     **** 		result = op_int;
 22563              		.loc 1 4185 7 view .LVU5856
 22564 0004 1B68     		ldr	r3, [r3]
 22565 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4184:src/xeq.c     **** 	if ( is_intmode() )
 22566              		.loc 1 4184 27 view .LVU5857
 22567 000a A0F18704 		sub	r4, r0, #135
 22568 000e B4FA84F4 		clz	r4, r4
4185:src/xeq.c     **** 		result = op_int;
 22569              		.loc 1 4185 5 view .LVU5858
 22570 0012 13F00105 		ands	r5, r3, #1
4182:src/xeq.c     **** 	decNumber x;
 22571              		.loc 1 4182 28 view .LVU5859
 22572 0016 8BB0     		sub	sp, sp, #44
 22573              		.cfi_def_cfa_offset 56
4184:src/xeq.c     **** 	if ( is_intmode() )
 22574              		.loc 1 4184 27 view .LVU5860
 22575 0018 4FEA5414 		lsr	r4, r4, #5
 22576              	.LVL1738:
ARM GAS  /tmp/ccqED0AM.s 			page 593


4185:src/xeq.c     **** 		result = op_int;
 22577              		.loc 1 4185 2 is_stmt 1 view .LVU5861
4185:src/xeq.c     **** 		result = op_int;
 22578              		.loc 1 4185 5 is_stmt 0 view .LVU5862
 22579 001c 04D0     		beq	.L1623
 22580              	.LVL1739:
4191:src/xeq.c     **** }
 22581              		.loc 1 4191 2 is_stmt 1 view .LVU5863
 22582 001e 2046     		mov	r0, r4
 22583              	.LVL1740:
4191:src/xeq.c     **** }
 22584              		.loc 1 4191 2 is_stmt 0 view .LVU5864
 22585 0020 FFF7FEFF 		bl	fin_tst
 22586              	.LVL1741:
4192:src/xeq.c     **** 
 22587              		.loc 1 4192 1 view .LVU5865
 22588 0024 0BB0     		add	sp, sp, #44
 22589              		.cfi_remember_state
 22590              		.cfi_def_cfa_offset 12
 22591              		@ sp needed
 22592 0026 30BD     		pop	{r4, r5, pc}
 22593              	.LVL1742:
 22594              	.L1623:
 22595              		.cfi_restore_state
4187:src/xeq.c     **** 		result = 0;
 22596              		.loc 1 4187 7 is_stmt 1 view .LVU5866
 22597              	.LBB3161:
 22598              	.LBI3161:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 22599              		.loc 1 824 12 view .LVU5867
 22600              	.LBB3162:
 825:src/xeq.c     **** }
 22601              		.loc 1 825 2 view .LVU5868
 825:src/xeq.c     **** }
 22602              		.loc 1 825 9 is_stmt 0 view .LVU5869
 22603 0028 01A8     		add	r0, sp, #4
 22604              	.LVL1743:
 825:src/xeq.c     **** }
 22605              		.loc 1 825 9 view .LVU5870
 22606 002a 6421     		movs	r1, #100
 22607 002c FFF7FEFF 		bl	getRegister
 22608              	.LVL1744:
 825:src/xeq.c     **** }
 22609              		.loc 1 825 9 view .LVU5871
 22610              	.LBE3162:
 22611              	.LBE3161:
4187:src/xeq.c     **** 		result = 0;
 22612              		.loc 1 4187 10 view .LVU5872
 22613 0030 037A     		ldrb	r3, [r0, #8]	@ zero_extendqisi2
 22614 0032 13F0700F 		tst	r3, #112
 22615 0036 05D0     		beq	.L1624
4188:src/xeq.c     **** 	else
 22616              		.loc 1 4188 10 view .LVU5873
 22617 0038 2C46     		mov	r4, r5
 22618              	.LVL1745:
4191:src/xeq.c     **** }
 22619              		.loc 1 4191 2 is_stmt 1 view .LVU5874
ARM GAS  /tmp/ccqED0AM.s 			page 594


 22620 003a 2046     		mov	r0, r4
 22621 003c FFF7FEFF 		bl	fin_tst
 22622              	.LVL1746:
4192:src/xeq.c     **** 
 22623              		.loc 1 4192 1 is_stmt 0 view .LVU5875
 22624 0040 0BB0     		add	sp, sp, #44
 22625              		.cfi_remember_state
 22626              		.cfi_def_cfa_offset 12
 22627              		@ sp needed
 22628 0042 30BD     		pop	{r4, r5, pc}
 22629              	.LVL1747:
 22630              	.L1624:
 22631              		.cfi_restore_state
4190:src/xeq.c     **** 	fin_tst(result);
 22632              		.loc 1 4190 10 is_stmt 1 view .LVU5876
4190:src/xeq.c     **** 	fin_tst(result);
 22633              		.loc 1 4190 20 is_stmt 0 view .LVU5877
 22634 0044 01A8     		add	r0, sp, #4
 22635 0046 FFF7FEFF 		bl	is_int
 22636              	.LVL1748:
4190:src/xeq.c     **** 	fin_tst(result);
 22637              		.loc 1 4190 31 view .LVU5878
 22638 004a 041B     		subs	r4, r0, r4
 22639              	.LVL1749:
4190:src/xeq.c     **** 	fin_tst(result);
 22640              		.loc 1 4190 31 view .LVU5879
 22641 004c B4FA84F4 		clz	r4, r4
 22642 0050 6409     		lsrs	r4, r4, #5
 22643              	.LVL1750:
4191:src/xeq.c     **** }
 22644              		.loc 1 4191 2 is_stmt 1 view .LVU5880
 22645 0052 2046     		mov	r0, r4
 22646 0054 FFF7FEFF 		bl	fin_tst
 22647              	.LVL1751:
4192:src/xeq.c     **** 
 22648              		.loc 1 4192 1 is_stmt 0 view .LVU5881
 22649 0058 0BB0     		add	sp, sp, #44
 22650              		.cfi_def_cfa_offset 12
 22651              		@ sp needed
 22652 005a 30BD     		pop	{r4, r5, pc}
 22653              	.LVL1752:
 22654              	.L1626:
4192:src/xeq.c     **** 
 22655              		.loc 1 4192 1 view .LVU5882
 22656              		.align	2
 22657              	.L1625:
 22658 005c 00000000 		.word	main_ram
 22659              		.cfi_endproc
 22660              	.LFE222:
 22662              		.section	.text.XisEvenOrOdd,"ax",%progbits
 22663              		.align	1
 22664              		.p2align 2,,3
 22665              		.global	XisEvenOrOdd
 22666              		.syntax unified
 22667              		.thumb
 22668              		.thumb_func
 22669              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccqED0AM.s 			page 595


 22671              	XisEvenOrOdd:
 22672              	.LVL1753:
 22673              	.LFB223:
4196:src/xeq.c     **** 	decNumber x;
 22674              		.loc 1 4196 34 is_stmt 1 view -0
 22675              		.cfi_startproc
 22676              		@ args = 0, pretend = 0, frame = 40
 22677              		@ frame_needed = 0, uses_anonymous_args = 0
4197:src/xeq.c     **** 	int odd = (op == OP_XisODD);
 22678              		.loc 1 4197 2 view .LVU5884
4198:src/xeq.c     **** 
 22679              		.loc 1 4198 2 view .LVU5885
4200:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 22680              		.loc 1 4200 6 is_stmt 0 view .LVU5886
 22681 0000 174B     		ldr	r3, .L1631
4196:src/xeq.c     **** 	decNumber x;
 22682              		.loc 1 4196 34 view .LVU5887
 22683 0002 30B5     		push	{r4, r5, lr}
 22684              		.cfi_def_cfa_offset 12
 22685              		.cfi_offset 4, -12
 22686              		.cfi_offset 5, -8
 22687              		.cfi_offset 14, -4
4200:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 22688              		.loc 1 4200 6 view .LVU5888
 22689 0004 1B68     		ldr	r3, [r3]
 22690 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4200:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 22691              		.loc 1 4200 5 view .LVU5889
 22692 000a DB07     		lsls	r3, r3, #31
4196:src/xeq.c     **** 	decNumber x;
 22693              		.loc 1 4196 34 view .LVU5890
 22694 000c 8BB0     		sub	sp, sp, #44
 22695              		.cfi_def_cfa_offset 56
4196:src/xeq.c     **** 	decNumber x;
 22696              		.loc 1 4196 34 view .LVU5891
 22697 000e 0446     		mov	r4, r0
 22698              	.LVL1754:
4200:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 22699              		.loc 1 4200 2 is_stmt 1 view .LVU5892
4200:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 22700              		.loc 1 4200 5 is_stmt 0 view .LVU5893
 22701 0010 15D5     		bpl	.L1628
4201:src/xeq.c     **** 	} else {
 22702              		.loc 1 4201 3 is_stmt 1 view .LVU5894
 22703              	.LBB3163:
 22704              	.LBI3163:
1442:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 22705              		.loc 1 1442 15 view .LVU5895
 22706              	.LBB3164:
1443:src/xeq.c     **** }
 22707              		.loc 1 1443 2 view .LVU5896
1443:src/xeq.c     **** }
 22708              		.loc 1 1443 9 is_stmt 0 view .LVU5897
 22709 0012 6420     		movs	r0, #100
 22710              	.LVL1755:
1443:src/xeq.c     **** }
 22711              		.loc 1 1443 9 view .LVU5898
ARM GAS  /tmp/ccqED0AM.s 			page 596


 22712 0014 FFF7FEFF 		bl	get_reg_n_int
 22713              	.LVL1756:
 22714              	.LBE3164:
 22715              	.LBE3163:
4198:src/xeq.c     **** 
 22716              		.loc 1 4198 16 view .LVU5899
 22717 0018 A4F18A04 		sub	r4, #138
 22718              	.LVL1757:
4201:src/xeq.c     **** 	} else {
 22719              		.loc 1 4201 23 view .LVU5900
 22720 001c 0023     		movs	r3, #0
4198:src/xeq.c     **** 
 22721              		.loc 1 4198 16 view .LVU5901
 22722 001e 0025     		movs	r5, #0
 22723 0020 B4FA84F4 		clz	r4, r4
4201:src/xeq.c     **** 	} else {
 22724              		.loc 1 4201 23 view .LVU5902
 22725 0024 00F00102 		and	r2, r0, #1
4201:src/xeq.c     **** 	} else {
 22726              		.loc 1 4201 3 view .LVU5903
 22727 0028 AB42     		cmp	r3, r5
4198:src/xeq.c     **** 
 22728              		.loc 1 4198 16 view .LVU5904
 22729 002a 4FEA5414 		lsr	r4, r4, #5
4201:src/xeq.c     **** 	} else {
 22730              		.loc 1 4201 3 view .LVU5905
 22731 002e 06BF     		itte	eq
 22732 0030 A242     		cmpeq	r2, r4
 22733 0032 0120     		moveq	r0, #1
 22734 0034 1846     		movne	r0, r3
 22735 0036 FFF7FEFF 		bl	fin_tst
 22736              	.LVL1758:
4205:src/xeq.c     **** 
 22737              		.loc 1 4205 1 view .LVU5906
 22738 003a 0BB0     		add	sp, sp, #44
 22739              		.cfi_remember_state
 22740              		.cfi_def_cfa_offset 12
 22741              		@ sp needed
 22742 003c 30BD     		pop	{r4, r5, pc}
 22743              	.LVL1759:
 22744              	.L1628:
 22745              		.cfi_restore_state
4203:src/xeq.c     **** 	}
 22746              		.loc 1 4203 3 is_stmt 1 view .LVU5907
 22747              	.LBB3165:
 22748              	.LBI3165:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 22749              		.loc 1 824 12 view .LVU5908
 22750              	.LBB3166:
 825:src/xeq.c     **** }
 22751              		.loc 1 825 2 view .LVU5909
 825:src/xeq.c     **** }
 22752              		.loc 1 825 9 is_stmt 0 view .LVU5910
 22753 003e 6421     		movs	r1, #100
 22754 0040 01A8     		add	r0, sp, #4
 22755              	.LVL1760:
 825:src/xeq.c     **** }
ARM GAS  /tmp/ccqED0AM.s 			page 597


 22756              		.loc 1 825 9 view .LVU5911
 22757 0042 FFF7FEFF 		bl	getRegister
 22758              	.LVL1761:
 825:src/xeq.c     **** }
 22759              		.loc 1 825 9 view .LVU5912
 22760              	.LBE3166:
 22761              	.LBE3165:
4203:src/xeq.c     **** 	}
 22762              		.loc 1 4203 11 view .LVU5913
 22763 0046 FFF7FEFF 		bl	is_even
 22764              	.LVL1762:
4203:src/xeq.c     **** 	}
 22765              		.loc 1 4203 32 view .LVU5914
 22766 004a 8A3C     		subs	r4, r4, #138
 22767              	.LVL1763:
4203:src/xeq.c     **** 	}
 22768              		.loc 1 4203 32 view .LVU5915
 22769 004c 18BF     		it	ne
 22770 004e 0124     		movne	r4, #1
4203:src/xeq.c     **** 	}
 22771              		.loc 1 4203 3 view .LVU5916
 22772 0050 201A     		subs	r0, r4, r0
 22773 0052 B0FA80F0 		clz	r0, r0
 22774 0056 4009     		lsrs	r0, r0, #5
 22775 0058 FFF7FEFF 		bl	fin_tst
 22776              	.LVL1764:
4205:src/xeq.c     **** 
 22777              		.loc 1 4205 1 view .LVU5917
 22778 005c 0BB0     		add	sp, sp, #44
 22779              		.cfi_def_cfa_offset 12
 22780              		@ sp needed
 22781 005e 30BD     		pop	{r4, r5, pc}
 22782              	.L1632:
 22783              		.align	2
 22784              	.L1631:
 22785 0060 00000000 		.word	main_ram
 22786              		.cfi_endproc
 22787              	.LFE223:
 22789              		.section	.text.XisPrime,"ax",%progbits
 22790              		.align	1
 22791              		.p2align 2,,3
 22792              		.global	XisPrime
 22793              		.syntax unified
 22794              		.thumb
 22795              		.thumb_func
 22796              		.fpu fpv4-sp-d16
 22798              	XisPrime:
 22799              	.LVL1765:
 22800              	.LFB224:
4209:src/xeq.c     **** 	unsigned long long int i;
 22801              		.loc 1 4209 30 is_stmt 1 view -0
 22802              		.cfi_startproc
 22803              		@ args = 0, pretend = 0, frame = 40
 22804              		@ frame_needed = 0, uses_anonymous_args = 0
4210:src/xeq.c     **** 	int sgn;
 22805              		.loc 1 4210 2 view .LVU5919
4211:src/xeq.c     **** 
ARM GAS  /tmp/ccqED0AM.s 			page 598


 22806              		.loc 1 4211 2 view .LVU5920
4213:src/xeq.c     **** 	if (!is_intmode()) {
 22807              		.loc 1 4213 2 view .LVU5921
4209:src/xeq.c     **** 	unsigned long long int i;
 22808              		.loc 1 4209 30 is_stmt 0 view .LVU5922
 22809 0000 70B5     		push	{r4, r5, r6, lr}
 22810              		.cfi_def_cfa_offset 16
 22811              		.cfi_offset 4, -16
 22812              		.cfi_offset 5, -12
 22813              		.cfi_offset 6, -8
 22814              		.cfi_offset 14, -4
 22815 0002 8AB0     		sub	sp, sp, #40
 22816              		.cfi_def_cfa_offset 56
 22817              	.LVL1766:
 22818              	.LBB3167:
 22819              	.LBI3167:
1446:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 22820              		.loc 1 1446 24 is_stmt 1 view .LVU5923
 22821              	.LBB3168:
1447:src/xeq.c     **** }
 22822              		.loc 1 1447 2 view .LVU5924
1447:src/xeq.c     **** }
 22823              		.loc 1 1447 9 is_stmt 0 view .LVU5925
 22824 0004 6946     		mov	r1, sp
 22825 0006 6420     		movs	r0, #100
 22826              	.LVL1767:
1447:src/xeq.c     **** }
 22827              		.loc 1 1447 9 view .LVU5926
 22828 0008 FFF7FEFF 		bl	get_reg_n_int_sgn
 22829              	.LVL1768:
 22830              	.LBE3168:
 22831              	.LBE3167:
4214:src/xeq.c     **** 		decNumber x;
 22832              		.loc 1 4214 6 view .LVU5927
 22833 000c 1B4B     		ldr	r3, .L1643
 22834 000e 1B68     		ldr	r3, [r3]
 22835 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4214:src/xeq.c     **** 		decNumber x;
 22836              		.loc 1 4214 5 view .LVU5928
 22837 0014 13F00104 		ands	r4, r3, #1
 22838              	.LBB3170:
 22839              	.LBB3169:
1447:src/xeq.c     **** }
 22840              		.loc 1 1447 9 view .LVU5929
 22841 0018 0646     		mov	r6, r0
 22842 001a 0D46     		mov	r5, r1
 22843              	.LVL1769:
1447:src/xeq.c     **** }
 22844              		.loc 1 1447 9 view .LVU5930
 22845              	.LBE3169:
 22846              	.LBE3170:
4214:src/xeq.c     **** 		decNumber x;
 22847              		.loc 1 4214 2 is_stmt 1 view .LVU5931
4214:src/xeq.c     **** 		decNumber x;
 22848              		.loc 1 4214 5 is_stmt 0 view .LVU5932
 22849 001c 11D0     		beq	.L1634
 22850 001e 009B     		ldr	r3, [sp]
ARM GAS  /tmp/ccqED0AM.s 			page 599


 22851              	.LVL1770:
 22852              	.L1635:
4224:src/xeq.c     **** }
 22853              		.loc 1 4224 2 is_stmt 1 view .LVU5933
 22854 0020 23B1     		cbz	r3, .L1642
 22855              	.L1640:
4224:src/xeq.c     **** }
 22856              		.loc 1 4224 2 is_stmt 0 view .LVU5934
 22857 0022 0020     		movs	r0, #0
 22858 0024 FFF7FEFF 		bl	fin_tst
 22859              	.LVL1771:
4225:src/xeq.c     **** 
 22860              		.loc 1 4225 1 view .LVU5935
 22861 0028 0AB0     		add	sp, sp, #40
 22862              		.cfi_remember_state
 22863              		.cfi_def_cfa_offset 16
 22864              		@ sp needed
 22865 002a 70BD     		pop	{r4, r5, r6, pc}
 22866              	.L1642:
 22867              		.cfi_restore_state
4224:src/xeq.c     **** }
 22868              		.loc 1 4224 22 discriminator 1 view .LVU5936
 22869 002c 2946     		mov	r1, r5
 22870 002e 3046     		mov	r0, r6
 22871 0030 FFF7FEFF 		bl	isPrime
 22872              	.LVL1772:
4224:src/xeq.c     **** }
 22873              		.loc 1 4224 2 discriminator 1 view .LVU5937
 22874 0034 0038     		subs	r0, r0, #0
 22875 0036 18BF     		it	ne
 22876 0038 0120     		movne	r0, #1
 22877 003a FFF7FEFF 		bl	fin_tst
 22878              	.LVL1773:
4225:src/xeq.c     **** 
 22879              		.loc 1 4225 1 discriminator 1 view .LVU5938
 22880 003e 0AB0     		add	sp, sp, #40
 22881              		.cfi_remember_state
 22882              		.cfi_def_cfa_offset 16
 22883              		@ sp needed
 22884 0040 70BD     		pop	{r4, r5, r6, pc}
 22885              	.LVL1774:
 22886              	.L1634:
 22887              		.cfi_restore_state
 22888              	.LBB3171:
4215:src/xeq.c     **** 
 22889              		.loc 1 4215 3 is_stmt 1 view .LVU5939
4217:src/xeq.c     **** 		if (decNumberIsSpecial(&x))
 22890              		.loc 1 4217 3 view .LVU5940
 22891              	.LBB3172:
 22892              	.LBI3172:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 22893              		.loc 1 824 12 view .LVU5941
 22894              	.LBB3173:
 825:src/xeq.c     **** }
 22895              		.loc 1 825 2 view .LVU5942
 825:src/xeq.c     **** }
 22896              		.loc 1 825 9 is_stmt 0 view .LVU5943
ARM GAS  /tmp/ccqED0AM.s 			page 600


 22897 0042 01A8     		add	r0, sp, #4
 22898              	.LVL1775:
 825:src/xeq.c     **** }
 22899              		.loc 1 825 9 view .LVU5944
 22900 0044 6421     		movs	r1, #100
 22901 0046 FFF7FEFF 		bl	getRegister
 22902              	.LVL1776:
 825:src/xeq.c     **** }
 22903              		.loc 1 825 9 view .LVU5945
 22904              	.LBE3173:
 22905              	.LBE3172:
4218:src/xeq.c     **** 			sgn = 1; // not prime
 22906              		.loc 1 4218 3 is_stmt 1 view .LVU5946
4218:src/xeq.c     **** 			sgn = 1; // not prime
 22907              		.loc 1 4218 6 is_stmt 0 view .LVU5947
 22908 004a 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 22909 004e 13F0700F 		tst	r3, #112
 22910 0052 06D0     		beq	.L1636
4219:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 22911              		.loc 1 4219 4 is_stmt 1 view .LVU5948
4219:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 22912              		.loc 1 4219 8 is_stmt 0 view .LVU5949
 22913 0054 0123     		movs	r3, #1
 22914              	.LBE3171:
4224:src/xeq.c     **** }
 22915              		.loc 1 4224 2 view .LVU5950
 22916 0056 2046     		mov	r0, r4
 22917              	.LBB3174:
4219:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 22918              		.loc 1 4219 8 view .LVU5951
 22919 0058 0093     		str	r3, [sp]
4219:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 22920              		.loc 1 4219 8 view .LVU5952
 22921              	.LBE3174:
4224:src/xeq.c     **** }
 22922              		.loc 1 4224 2 is_stmt 1 view .LVU5953
 22923 005a FFF7FEFF 		bl	fin_tst
 22924              	.LVL1777:
4225:src/xeq.c     **** 
 22925              		.loc 1 4225 1 is_stmt 0 view .LVU5954
 22926 005e 0AB0     		add	sp, sp, #40
 22927              		.cfi_remember_state
 22928              		.cfi_def_cfa_offset 16
 22929              		@ sp needed
 22930 0060 70BD     		pop	{r4, r5, r6, pc}
 22931              	.L1636:
 22932              		.cfi_restore_state
 22933              	.LBB3175:
4220:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
 22934              		.loc 1 4220 8 is_stmt 1 view .LVU5955
4220:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
 22935              		.loc 1 4220 12 is_stmt 0 view .LVU5956
 22936 0062 0749     		ldr	r1, .L1643+4
 22937 0064 01A8     		add	r0, sp, #4
 22938 0066 FFF7FEFF 		bl	dn_lt
 22939              	.LVL1778:
 22940 006a 009B     		ldr	r3, [sp]
ARM GAS  /tmp/ccqED0AM.s 			page 601


4220:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
 22941              		.loc 1 4220 11 view .LVU5957
 22942 006c 0028     		cmp	r0, #0
 22943 006e D7D1     		bne	.L1635
4222:src/xeq.c     **** 	}
 22944              		.loc 1 4222 4 is_stmt 1 view .LVU5958
 22945              	.LVL1779:
4222:src/xeq.c     **** 	}
 22946              		.loc 1 4222 6 is_stmt 0 view .LVU5959
 22947 0070 4FF0FF36 		mov	r6, #-1
 22948 0074 3546     		mov	r5, r6
4222:src/xeq.c     **** 	}
 22949              		.loc 1 4222 6 view .LVU5960
 22950              	.LBE3175:
4224:src/xeq.c     **** }
 22951              		.loc 1 4224 2 is_stmt 1 view .LVU5961
 22952 0076 002B     		cmp	r3, #0
 22953 0078 D3D1     		bne	.L1640
 22954 007a D7E7     		b	.L1642
 22955              	.L1644:
 22956              		.align	2
 22957              	.L1643:
 22958 007c 00000000 		.word	main_ram
 22959 0080 00000000 		.word	const_2pow64
 22960              		.cfi_endproc
 22961              	.LFE224:
 22963              		.section	.text.isInfinite,"ax",%progbits
 22964              		.align	1
 22965              		.p2align 2,,3
 22966              		.global	isInfinite
 22967              		.syntax unified
 22968              		.thumb
 22969              		.thumb_func
 22970              		.fpu fpv4-sp-d16
 22972              	isInfinite:
 22973              	.LVL1780:
 22974              	.LFB225:
4229:src/xeq.c     **** 	decNumber x;
 22975              		.loc 1 4229 32 view -0
 22976              		.cfi_startproc
 22977              		@ args = 0, pretend = 0, frame = 40
 22978              		@ frame_needed = 0, uses_anonymous_args = 0
4230:src/xeq.c     **** 
 22979              		.loc 1 4230 2 view .LVU5963
4232:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsInfinite(&x));
 22980              		.loc 1 4232 2 view .LVU5964
4229:src/xeq.c     **** 	decNumber x;
 22981              		.loc 1 4229 32 is_stmt 0 view .LVU5965
 22982 0000 00B5     		push	{lr}
 22983              		.cfi_def_cfa_offset 4
 22984              		.cfi_offset 14, -4
 22985 0002 8BB0     		sub	sp, sp, #44
 22986              		.cfi_def_cfa_offset 48
 22987              	.LVL1781:
 22988              	.LBB3176:
 22989              	.LBI3176:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
ARM GAS  /tmp/ccqED0AM.s 			page 602


 22990              		.loc 1 824 12 is_stmt 1 view .LVU5966
 22991              	.LBB3177:
 825:src/xeq.c     **** }
 22992              		.loc 1 825 2 view .LVU5967
 825:src/xeq.c     **** }
 22993              		.loc 1 825 9 is_stmt 0 view .LVU5968
 22994 0004 6421     		movs	r1, #100
 22995 0006 01A8     		add	r0, sp, #4
 22996              	.LVL1782:
 825:src/xeq.c     **** }
 22997              		.loc 1 825 9 view .LVU5969
 22998 0008 FFF7FEFF 		bl	getRegister
 22999              	.LVL1783:
 825:src/xeq.c     **** }
 23000              		.loc 1 825 9 view .LVU5970
 23001              	.LBE3177:
 23002              	.LBE3176:
4233:src/xeq.c     **** }
 23003              		.loc 1 4233 2 is_stmt 1 view .LVU5971
4233:src/xeq.c     **** }
 23004              		.loc 1 4233 10 is_stmt 0 view .LVU5972
 23005 000c 074B     		ldr	r3, .L1649
 23006 000e 1B68     		ldr	r3, [r3]
 23007 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4233:src/xeq.c     **** }
 23008              		.loc 1 4233 2 view .LVU5973
 23009 0014 DB07     		lsls	r3, r3, #31
 23010 0016 56BF     		itet	pl
 23011 0018 9DF80C00 		ldrbpl	r0, [sp, #12]	@ zero_extendqisi2
 23012 001c 0020     		movmi	r0, #0
 23013 001e C0F38010 		ubfxpl	r0, r0, #6, #1
 23014 0022 FFF7FEFF 		bl	fin_tst
 23015              	.LVL1784:
4234:src/xeq.c     **** 
 23016              		.loc 1 4234 1 view .LVU5974
 23017 0026 0BB0     		add	sp, sp, #44
 23018              		.cfi_def_cfa_offset 4
 23019              		@ sp needed
 23020 0028 5DF804FB 		ldr	pc, [sp], #4
 23021              	.L1650:
 23022              		.align	2
 23023              	.L1649:
 23024 002c 00000000 		.word	main_ram
 23025              		.cfi_endproc
 23026              	.LFE225:
 23028              		.section	.text.isNan,"ax",%progbits
 23029              		.align	1
 23030              		.p2align 2,,3
 23031              		.global	isNan
 23032              		.syntax unified
 23033              		.thumb
 23034              		.thumb_func
 23035              		.fpu fpv4-sp-d16
 23037              	isNan:
 23038              	.LVL1785:
 23039              	.LFB226:
4240:src/xeq.c     **** 	decNumber x;
ARM GAS  /tmp/ccqED0AM.s 			page 603


 23040              		.loc 1 4240 27 is_stmt 1 view -0
 23041              		.cfi_startproc
 23042              		@ args = 0, pretend = 0, frame = 40
 23043              		@ frame_needed = 0, uses_anonymous_args = 0
4241:src/xeq.c     **** 
 23044              		.loc 1 4241 2 view .LVU5976
4243:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsNaN(&x));
 23045              		.loc 1 4243 2 view .LVU5977
4240:src/xeq.c     **** 	decNumber x;
 23046              		.loc 1 4240 27 is_stmt 0 view .LVU5978
 23047 0000 00B5     		push	{lr}
 23048              		.cfi_def_cfa_offset 4
 23049              		.cfi_offset 14, -4
 23050 0002 8BB0     		sub	sp, sp, #44
 23051              		.cfi_def_cfa_offset 48
 23052              	.LVL1786:
 23053              	.LBB3178:
 23054              	.LBI3178:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 23055              		.loc 1 824 12 is_stmt 1 view .LVU5979
 23056              	.LBB3179:
 825:src/xeq.c     **** }
 23057              		.loc 1 825 2 view .LVU5980
 825:src/xeq.c     **** }
 23058              		.loc 1 825 9 is_stmt 0 view .LVU5981
 23059 0004 6421     		movs	r1, #100
 23060 0006 01A8     		add	r0, sp, #4
 23061              	.LVL1787:
 825:src/xeq.c     **** }
 23062              		.loc 1 825 9 view .LVU5982
 23063 0008 FFF7FEFF 		bl	getRegister
 23064              	.LVL1788:
 825:src/xeq.c     **** }
 23065              		.loc 1 825 9 view .LVU5983
 23066              	.LBE3179:
 23067              	.LBE3178:
4244:src/xeq.c     **** }
 23068              		.loc 1 4244 2 is_stmt 1 view .LVU5984
4244:src/xeq.c     **** }
 23069              		.loc 1 4244 10 is_stmt 0 view .LVU5985
 23070 000c 0B4B     		ldr	r3, .L1655
 23071 000e 1B68     		ldr	r3, [r3]
 23072 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4244:src/xeq.c     **** }
 23073              		.loc 1 4244 2 view .LVU5986
 23074 0014 DB07     		lsls	r3, r3, #31
 23075 0016 0BD4     		bmi	.L1653
4244:src/xeq.c     **** }
 23076              		.loc 1 4244 2 discriminator 1 view .LVU5987
 23077 0018 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 23078 001c 13F0300F 		tst	r3, #48
 23079 0020 14BF     		ite	ne
 23080 0022 0120     		movne	r0, #1
 23081 0024 0020     		moveq	r0, #0
 23082 0026 FFF7FEFF 		bl	fin_tst
 23083              	.LVL1789:
4245:src/xeq.c     **** 
ARM GAS  /tmp/ccqED0AM.s 			page 604


 23084              		.loc 1 4245 1 discriminator 1 view .LVU5988
 23085 002a 0BB0     		add	sp, sp, #44
 23086              		.cfi_remember_state
 23087              		.cfi_def_cfa_offset 4
 23088              		@ sp needed
 23089 002c 5DF804FB 		ldr	pc, [sp], #4
 23090              	.L1653:
 23091              		.cfi_restore_state
4244:src/xeq.c     **** }
 23092              		.loc 1 4244 2 view .LVU5989
 23093 0030 0020     		movs	r0, #0
 23094 0032 FFF7FEFF 		bl	fin_tst
 23095              	.LVL1790:
4245:src/xeq.c     **** 
 23096              		.loc 1 4245 1 view .LVU5990
 23097 0036 0BB0     		add	sp, sp, #44
 23098              		.cfi_def_cfa_offset 4
 23099              		@ sp needed
 23100 0038 5DF804FB 		ldr	pc, [sp], #4
 23101              	.L1656:
 23102              		.align	2
 23103              	.L1655:
 23104 003c 00000000 		.word	main_ram
 23105              		.cfi_endproc
 23106              	.LFE226:
 23108              		.section	.text.isSpecial,"ax",%progbits
 23109              		.align	1
 23110              		.p2align 2,,3
 23111              		.global	isSpecial
 23112              		.syntax unified
 23113              		.thumb
 23114              		.thumb_func
 23115              		.fpu fpv4-sp-d16
 23117              	isSpecial:
 23118              	.LVL1791:
 23119              	.LFB227:
4247:src/xeq.c     **** 	decNumber x;
 23120              		.loc 1 4247 31 is_stmt 1 view -0
 23121              		.cfi_startproc
 23122              		@ args = 0, pretend = 0, frame = 40
 23123              		@ frame_needed = 0, uses_anonymous_args = 0
4248:src/xeq.c     **** 
 23124              		.loc 1 4248 2 view .LVU5992
4250:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsSpecial(&x));
 23125              		.loc 1 4250 2 view .LVU5993
4247:src/xeq.c     **** 	decNumber x;
 23126              		.loc 1 4247 31 is_stmt 0 view .LVU5994
 23127 0000 00B5     		push	{lr}
 23128              		.cfi_def_cfa_offset 4
 23129              		.cfi_offset 14, -4
 23130 0002 8BB0     		sub	sp, sp, #44
 23131              		.cfi_def_cfa_offset 48
 23132              	.LVL1792:
 23133              	.LBB3180:
 23134              	.LBI3180:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 23135              		.loc 1 824 12 is_stmt 1 view .LVU5995
ARM GAS  /tmp/ccqED0AM.s 			page 605


 23136              	.LBB3181:
 825:src/xeq.c     **** }
 23137              		.loc 1 825 2 view .LVU5996
 825:src/xeq.c     **** }
 23138              		.loc 1 825 9 is_stmt 0 view .LVU5997
 23139 0004 6421     		movs	r1, #100
 23140 0006 01A8     		add	r0, sp, #4
 23141              	.LVL1793:
 825:src/xeq.c     **** }
 23142              		.loc 1 825 9 view .LVU5998
 23143 0008 FFF7FEFF 		bl	getRegister
 23144              	.LVL1794:
 825:src/xeq.c     **** }
 23145              		.loc 1 825 9 view .LVU5999
 23146              	.LBE3181:
 23147              	.LBE3180:
4251:src/xeq.c     **** }
 23148              		.loc 1 4251 2 is_stmt 1 view .LVU6000
4251:src/xeq.c     **** }
 23149              		.loc 1 4251 10 is_stmt 0 view .LVU6001
 23150 000c 0B4B     		ldr	r3, .L1661
 23151 000e 1B68     		ldr	r3, [r3]
 23152 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4251:src/xeq.c     **** }
 23153              		.loc 1 4251 2 view .LVU6002
 23154 0014 DB07     		lsls	r3, r3, #31
 23155 0016 0BD4     		bmi	.L1659
4251:src/xeq.c     **** }
 23156              		.loc 1 4251 2 discriminator 1 view .LVU6003
 23157 0018 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 23158 001c 13F0700F 		tst	r3, #112
 23159 0020 14BF     		ite	ne
 23160 0022 0120     		movne	r0, #1
 23161 0024 0020     		moveq	r0, #0
 23162 0026 FFF7FEFF 		bl	fin_tst
 23163              	.LVL1795:
4252:src/xeq.c     **** 
 23164              		.loc 1 4252 1 discriminator 1 view .LVU6004
 23165 002a 0BB0     		add	sp, sp, #44
 23166              		.cfi_remember_state
 23167              		.cfi_def_cfa_offset 4
 23168              		@ sp needed
 23169 002c 5DF804FB 		ldr	pc, [sp], #4
 23170              	.L1659:
 23171              		.cfi_restore_state
4251:src/xeq.c     **** }
 23172              		.loc 1 4251 2 view .LVU6005
 23173 0030 0020     		movs	r0, #0
 23174 0032 FFF7FEFF 		bl	fin_tst
 23175              	.LVL1796:
4252:src/xeq.c     **** 
 23176              		.loc 1 4252 1 view .LVU6006
 23177 0036 0BB0     		add	sp, sp, #44
 23178              		.cfi_def_cfa_offset 4
 23179              		@ sp needed
 23180 0038 5DF804FB 		ldr	pc, [sp], #4
 23181              	.L1662:
ARM GAS  /tmp/ccqED0AM.s 			page 606


 23182              		.align	2
 23183              	.L1661:
 23184 003c 00000000 		.word	main_ram
 23185              		.cfi_endproc
 23186              	.LFE227:
 23188              		.section	.text.op_entryp,"ax",%progbits
 23189              		.align	1
 23190              		.p2align 2,,3
 23191              		.global	op_entryp
 23192              		.syntax unified
 23193              		.thumb
 23194              		.thumb_func
 23195              		.fpu fpv4-sp-d16
 23197              	op_entryp:
 23198              	.LVL1797:
 23199              	.LFB228:
4254:src/xeq.c     **** 	fin_tst(State.entryp);
 23200              		.loc 1 4254 31 is_stmt 1 view -0
 23201              		.cfi_startproc
 23202              		@ args = 0, pretend = 0, frame = 0
 23203              		@ frame_needed = 0, uses_anonymous_args = 0
 23204              		@ link register save eliminated.
4255:src/xeq.c     **** }
 23205              		.loc 1 4255 2 view .LVU6008
4255:src/xeq.c     **** }
 23206              		.loc 1 4255 15 is_stmt 0 view .LVU6009
 23207 0000 034B     		ldr	r3, .L1664
 23208 0002 1B68     		ldr	r3, [r3]
 23209 0004 93F8DD07 		ldrb	r0, [r3, #2013]	@ zero_extendqisi2
 23210              	.LVL1798:
4255:src/xeq.c     **** }
 23211              		.loc 1 4255 2 view .LVU6010
 23212 0008 C0F30010 		ubfx	r0, r0, #4, #1
 23213 000c FFF7FEBF 		b	fin_tst
 23214              	.LVL1799:
 23215              	.L1665:
 23216              		.align	2
 23217              	.L1664:
 23218 0010 00000000 		.word	main_ram
 23219              		.cfi_endproc
 23220              	.LFE228:
 23222              		.section	.text.reg_decode,"ax",%progbits
 23223              		.align	1
 23224              		.p2align 2,,3
 23225              		.global	reg_decode
 23226              		.syntax unified
 23227              		.thumb
 23228              		.thumb_func
 23229              		.fpu fpv4-sp-d16
 23231              	reg_decode:
 23232              	.LVL1800:
 23233              	.LFB229:
4259:src/xeq.c     **** 	decNumber x, y;
 23234              		.loc 1 4259 51 is_stmt 1 view -0
 23235              		.cfi_startproc
 23236              		@ args = 0, pretend = 0, frame = 80
 23237              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccqED0AM.s 			page 607


4260:src/xeq.c     **** 	int rsrc, num, rdest, q, mx_src, mx_dest;
 23238              		.loc 1 4260 2 view .LVU6012
4261:src/xeq.c     **** 
 23239              		.loc 1 4261 2 view .LVU6013
4263:src/xeq.c     **** 		bad_mode_error();
 23240              		.loc 1 4263 2 view .LVU6014
4259:src/xeq.c     **** 	decNumber x, y;
 23241              		.loc 1 4259 51 is_stmt 0 view .LVU6015
 23242 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 23243              		.cfi_def_cfa_offset 36
 23244              		.cfi_offset 4, -36
 23245              		.cfi_offset 5, -32
 23246              		.cfi_offset 6, -28
 23247              		.cfi_offset 7, -24
 23248              		.cfi_offset 8, -20
 23249              		.cfi_offset 9, -16
 23250              		.cfi_offset 10, -12
 23251              		.cfi_offset 11, -8
 23252              		.cfi_offset 14, -4
4263:src/xeq.c     **** 		bad_mode_error();
 23253              		.loc 1 4263 6 view .LVU6016
 23254 0004 DFF834A2 		ldr	r10, .L1718+28
 23255 0008 DAF80040 		ldr	r4, [r10]
 23256 000c 94F8E847 		ldrb	r4, [r4, #2024]	@ zero_extendqisi2
4259:src/xeq.c     **** 	decNumber x, y;
 23257              		.loc 1 4259 51 view .LVU6017
 23258 0010 1F46     		mov	r7, r3
4263:src/xeq.c     **** 		bad_mode_error();
 23259              		.loc 1 4263 5 view .LVU6018
 23260 0012 14F00103 		ands	r3, r4, #1
 23261              	.LVL1801:
4259:src/xeq.c     **** 	decNumber x, y;
 23262              		.loc 1 4259 51 view .LVU6019
 23263 0016 95B0     		sub	sp, sp, #84
 23264              		.cfi_def_cfa_offset 120
4263:src/xeq.c     **** 		bad_mode_error();
 23265              		.loc 1 4263 5 view .LVU6020
 23266 0018 0CD0     		beq	.L1667
4264:src/xeq.c     **** 		return 1;
 23267              		.loc 1 4264 3 is_stmt 1 view .LVU6021
 23268              	.LBB3224:
 23269              	.LBI3224:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 23270              		.loc 1 575 6 view .LVU6022
 23271              	.LBE3224:
 576:src/xeq.c     **** }
 23272              		.loc 1 576 2 view .LVU6023
 23273              	.LVL1802:
 23274              	.LBB3235:
 23275              	.LBB3225:
 23276              	.LBI3225:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23277              		.loc 1 546 5 view .LVU6024
 23278              	.LBB3226:
 547:src/xeq.c     **** 		Error = e;
 23279              		.loc 1 547 2 view .LVU6025
 547:src/xeq.c     **** 		Error = e;
ARM GAS  /tmp/ccqED0AM.s 			page 608


 23280              		.loc 1 547 12 is_stmt 0 view .LVU6026
 23281 001a 814B     		ldr	r3, .L1718
 547:src/xeq.c     **** 		Error = e;
 23282              		.loc 1 547 5 view .LVU6027
 23283 001c 1A68     		ldr	r2, [r3]
 23284              	.LVL1803:
 547:src/xeq.c     **** 		Error = e;
 23285              		.loc 1 547 5 view .LVU6028
 23286 001e 1AB1     		cbz	r2, .L1712
 23287              	.LVL1804:
 23288              	.L1695:
 547:src/xeq.c     **** 		Error = e;
 23289              		.loc 1 547 5 view .LVU6029
 23290              	.LBE3226:
 23291              	.LBE3225:
 23292              	.LBE3235:
4265:src/xeq.c     **** 	}
 23293              		.loc 1 4265 10 view .LVU6030
 23294 0020 0120     		movs	r0, #1
4337:src/xeq.c     **** 
 23295              		.loc 1 4337 1 view .LVU6031
 23296 0022 15B0     		add	sp, sp, #84
 23297              		.cfi_remember_state
 23298              		.cfi_def_cfa_offset 36
 23299              		@ sp needed
 23300 0024 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 23301              	.LVL1805:
 23302              	.L1712:
 23303              		.cfi_restore_state
 23304              	.LBB3236:
 23305              	.LBB3233:
 23306              	.LBB3231:
 23307              	.LBB3227:
 23308              	.LBI3227:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23309              		.loc 1 546 5 is_stmt 1 view .LVU6032
 23310              	.LBB3228:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 23311              		.loc 1 548 3 view .LVU6033
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 23312              		.loc 1 548 9 is_stmt 0 view .LVU6034
 23313 0028 0D22     		movs	r2, #13
 23314              	.LBE3228:
 23315              	.LBE3227:
 23316              	.LBE3231:
 23317              	.LBE3233:
 23318              	.LBE3236:
4265:src/xeq.c     **** 	}
 23319              		.loc 1 4265 10 view .LVU6035
 23320 002a 0120     		movs	r0, #1
 23321              	.LVL1806:
 23322              	.LBB3237:
 23323              	.LBB3234:
 23324              	.LBB3232:
 23325              	.LBB3230:
 23326              	.LBB3229:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
ARM GAS  /tmp/ccqED0AM.s 			page 609


 23327              		.loc 1 548 9 view .LVU6036
 23328 002c 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 23329              		.loc 1 549 3 is_stmt 1 view .LVU6037
 23330              	.LBE3229:
 23331              	.LBE3230:
 23332              	.LBE3232:
 23333              	.LBE3234:
 23334              	.LBE3237:
4337:src/xeq.c     **** 
 23335              		.loc 1 4337 1 is_stmt 0 view .LVU6038
 23336 002e 15B0     		add	sp, sp, #84
 23337              		.cfi_remember_state
 23338              		.cfi_def_cfa_offset 36
 23339              		@ sp needed
 23340 0030 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 23341              	.LVL1807:
 23342              	.L1667:
 23343              		.cfi_restore_state
4337:src/xeq.c     **** 
 23344              		.loc 1 4337 1 view .LVU6039
 23345 0034 8346     		mov	fp, r0
 23346              	.LVL1808:
4337:src/xeq.c     **** 
 23347              		.loc 1 4337 1 view .LVU6040
 23348 0036 8946     		mov	r9, r1
 23349              	.LVL1809:
 23350              	.LBB3238:
 23351              	.LBB3239:
 23352              	.LBB3240:
 23353              	.LBB3241:
 825:src/xeq.c     **** }
 23354              		.loc 1 825 9 view .LVU6041
 23355 0038 02A8     		add	r0, sp, #8
 23356              	.LVL1810:
 825:src/xeq.c     **** }
 23357              		.loc 1 825 9 view .LVU6042
 23358 003a 6421     		movs	r1, #100
 23359              	.LVL1811:
 825:src/xeq.c     **** }
 23360              		.loc 1 825 9 view .LVU6043
 23361 003c 0193     		str	r3, [sp, #4]
 23362 003e 9046     		mov	r8, r2
 23363              	.LVL1812:
 825:src/xeq.c     **** }
 23364              		.loc 1 825 9 view .LVU6044
 23365              	.LBE3241:
 23366              	.LBE3240:
 23367              	.LBE3239:
 23368              	.LBI3238:
4259:src/xeq.c     **** 	decNumber x, y;
 23369              		.loc 1 4259 5 is_stmt 1 view .LVU6045
 23370              	.LBB3321:
4267:src/xeq.c     **** 	dn_mulpow10(&y, &x, 2 + 3);	// sssnnddd.~
 23371              		.loc 1 4267 2 view .LVU6046
 23372              	.LBB3243:
 23373              	.LBI3240:
ARM GAS  /tmp/ccqED0AM.s 			page 610


 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 23374              		.loc 1 824 12 view .LVU6047
 23375              	.LBB3242:
 825:src/xeq.c     **** }
 23376              		.loc 1 825 2 view .LVU6048
 825:src/xeq.c     **** }
 23377              		.loc 1 825 9 is_stmt 0 view .LVU6049
 23378 0040 FFF7FEFF 		bl	getRegister
 23379              	.LVL1813:
 825:src/xeq.c     **** }
 23380              		.loc 1 825 9 view .LVU6050
 23381              	.LBE3242:
 23382              	.LBE3243:
4268:src/xeq.c     **** 	decNumberTrunc(&x, &y);		// sssnnddd.0
 23383              		.loc 1 4268 2 is_stmt 1 view .LVU6051
 23384 0044 0522     		movs	r2, #5
 23385 0046 02A9     		add	r1, sp, #8
 23386 0048 0BA8     		add	r0, sp, #44
 23387 004a FFF7FEFF 		bl	dn_mulpow10
 23388              	.LVL1814:
4269:src/xeq.c     **** 	rsrc = dn_to_int(&x);		// sssnnddd
 23389              		.loc 1 4269 2 view .LVU6052
 23390 004e 0BA9     		add	r1, sp, #44
 23391 0050 02A8     		add	r0, sp, #8
 23392 0052 FFF7FEFF 		bl	decNumberTrunc
 23393              	.LVL1815:
4270:src/xeq.c     **** 
 23394              		.loc 1 4270 2 view .LVU6053
4270:src/xeq.c     **** 
 23395              		.loc 1 4270 9 is_stmt 0 view .LVU6054
 23396 0056 02A8     		add	r0, sp, #8
 23397 0058 FFF7FEFF 		bl	dn_to_int
 23398              	.LVL1816:
4272:src/xeq.c     **** 		if (!flash)
 23399              		.loc 1 4272 2 is_stmt 1 view .LVU6055
4272:src/xeq.c     **** 		if (!flash)
 23400              		.loc 1 4272 5 is_stmt 0 view .LVU6056
 23401 005c 041E     		subs	r4, r0, #0
 23402 005e 35DB     		blt	.L1669
 23403              	.LVL1817:
4280:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23404              		.loc 1 4280 2 is_stmt 1 view .LVU6057
4280:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23405              		.loc 1 4280 8 is_stmt 0 view .LVU6058
 23406 0060 704A     		ldr	r2, .L1718+4
4282:src/xeq.c     **** 	rsrc /= 100;			// sss
 23407              		.loc 1 4282 6 view .LVU6059
 23408 0062 714E     		ldr	r6, .L1718+8
4286:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 23409              		.loc 1 4286 9 view .LVU6060
 23410 0064 7148     		ldr	r0, .L1718+12
 23411              	.LVL1818:
4280:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23412              		.loc 1 4280 8 view .LVU6061
 23413 0066 82FB0432 		smull	r3, r2, r2, r4
 23414 006a E517     		asrs	r5, r4, #31
4281:src/xeq.c     **** 	num = rsrc % 100;		// nn
ARM GAS  /tmp/ccqED0AM.s 			page 611


 23415              		.loc 1 4281 7 view .LVU6062
 23416 006c C5EBA211 		rsb	r1, r5, r2, asr #6
4282:src/xeq.c     **** 	rsrc /= 100;			// sss
 23417              		.loc 1 4282 6 view .LVU6063
 23418 0070 A6FB0136 		umull	r3, r6, r6, r1
4280:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23419              		.loc 1 4280 8 view .LVU6064
 23420 0074 4FF47A77 		mov	r7, #1000
 23421              	.LVL1819:
4282:src/xeq.c     **** 	rsrc /= 100;			// sss
 23422              		.loc 1 4282 6 view .LVU6065
 23423 0078 7209     		lsrs	r2, r6, #5
4280:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23424              		.loc 1 4280 8 view .LVU6066
 23425 007a 07FB1145 		mls	r5, r7, r1, r4
 23426              	.LVL1820:
4281:src/xeq.c     **** 	num = rsrc % 100;		// nn
 23427              		.loc 1 4281 2 is_stmt 1 view .LVU6067
4282:src/xeq.c     **** 	rsrc /= 100;			// sss
 23428              		.loc 1 4282 2 view .LVU6068
4286:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 23429              		.loc 1 4286 9 is_stmt 0 view .LVU6069
 23430 007e 8442     		cmp	r4, r0
4282:src/xeq.c     **** 	rsrc /= 100;			// sss
 23431              		.loc 1 4282 6 view .LVU6070
 23432 0080 4FF06407 		mov	r7, #100
4283:src/xeq.c     **** 
 23433              		.loc 1 4283 7 view .LVU6071
 23434 0084 1646     		mov	r6, r2
4282:src/xeq.c     **** 	rsrc /= 100;			// sss
 23435              		.loc 1 4282 6 view .LVU6072
 23436 0086 07FB1212 		mls	r2, r7, r2, r1
 23437              	.LVL1821:
4283:src/xeq.c     **** 
 23438              		.loc 1 4283 2 is_stmt 1 view .LVU6073
4285:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 23439              		.loc 1 4285 2 view .LVU6074
4286:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 23440              		.loc 1 4286 9 is_stmt 0 view .LVU6075
 23441 008a 5BDA     		bge	.L1670
 23442 008c 6849     		ldr	r1, .L1718+16
 23443 008e 019B     		ldr	r3, [sp, #4]
 23444 0090 8C42     		cmp	r4, r1
 23445 0092 7EDA     		bge	.L1697
 23446              	.LBB3244:
 23447              	.LBI3244:
 253:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 23448              		.loc 1 253 14 is_stmt 1 view .LVU6076
 23449              	.LBE3244:
 23450              	.LBE3321:
 23451              	.LBE3238:
 254:src/xeq.c     **** }
 23452              		.loc 1 254 2 view .LVU6077
 23453              	.LVL1822:
 23454              	.LBB3328:
 23455              	.LBB3322:
 23456              	.LBB3250:
ARM GAS  /tmp/ccqED0AM.s 			page 612


 23457              	.LBB3245:
 23458              	.LBI3245:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 23459              		.loc 1 241 14 view .LVU6078
 23460              	.LBB3246:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 23461              		.loc 1 242 2 view .LVU6079
 23462              	.LBB3247:
 23463              	.LBI3247:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 23464              		.loc 1 1118 5 view .LVU6080
 23465              	.LBB3248:
1119:src/xeq.c     **** }
 23466              		.loc 1 1119 2 view .LVU6081
1119:src/xeq.c     **** }
 23467              		.loc 1 1119 12 is_stmt 0 view .LVU6082
 23468 0094 DAF80010 		ldr	r1, [r10]
1119:src/xeq.c     **** }
 23469              		.loc 1 1119 24 view .LVU6083
 23470 0098 B1F8E807 		ldrh	r0, [r1, #2024]
 23471 009c 44F20103 		movw	r3, #16385
 23472              	.LBE3248:
 23473              	.LBE3247:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 23474              		.loc 1 242 5 view .LVU6084
 23475 00a0 0340     		ands	r3, r3, r0
 23476 00a2 B3F5804F 		cmp	r3, #16384
 23477              	.LBB3249:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23478              		.loc 1 243 24 view .LVU6085
 23479 00a6 91F8CF37 		ldrb	r3, [r1, #1999]	@ zero_extendqisi2
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23480              		.loc 1 243 3 is_stmt 1 view .LVU6086
 244:src/xeq.c     **** 	}
 23481              		.loc 1 244 3 view .LVU6087
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23482              		.loc 1 243 13 is_stmt 0 view .LVU6088
 23483 00aa 04BF     		itt	eq
 23484 00ac 0C3B     		subeq	r3, r3, #12
 244:src/xeq.c     **** 	}
 23485              		.loc 1 244 67 view .LVU6089
 23486 00ae 5B10     		asreq	r3, r3, #1
 23487              	.LVL1823:
 23488              	.L1676:
 244:src/xeq.c     **** 	}
 23489              		.loc 1 244 67 view .LVU6090
 23490              	.LBE3249:
 23491              	.LBE3246:
 23492              	.LBE3245:
 23493              	.LBE3250:
4289:src/xeq.c     **** 		goto range_error;
 23494              		.loc 1 4289 5 view .LVU6091
 23495 00b0 B342     		cmp	r3, r6
 23496 00b2 4FF00007 		mov	r7, #0
 23497              	.LVL1824:
4289:src/xeq.c     **** 		goto range_error;
 23498              		.loc 1 4289 2 is_stmt 1 view .LVU6092
ARM GAS  /tmp/ccqED0AM.s 			page 613


4289:src/xeq.c     **** 		goto range_error;
 23499              		.loc 1 4289 5 is_stmt 0 view .LVU6093
 23500 00b6 22DC     		bgt	.L1713
 23501              	.LVL1825:
 23502              	.L1672:
 23503              	.LDL1:
4335:src/xeq.c     **** 	return 1;
 23504              		.loc 1 4335 2 is_stmt 1 view .LVU6094
 23505              	.LBB3251:
 23506              	.LBI3251:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23507              		.loc 1 546 5 view .LVU6095
 23508              	.LBB3252:
 547:src/xeq.c     **** 		Error = e;
 23509              		.loc 1 547 2 view .LVU6096
 547:src/xeq.c     **** 		Error = e;
 23510              		.loc 1 547 12 is_stmt 0 view .LVU6097
 23511 00b8 594B     		ldr	r3, .L1718
 547:src/xeq.c     **** 		Error = e;
 23512              		.loc 1 547 5 view .LVU6098
 23513 00ba 1A68     		ldr	r2, [r3]
 23514 00bc 002A     		cmp	r2, #0
 23515 00be AFD1     		bne	.L1695
 23516              	.LVL1826:
 23517              	.LBB3253:
 23518              	.LBI3253:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23519              		.loc 1 546 5 is_stmt 1 view .LVU6099
 23520              	.LBB3254:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 23521              		.loc 1 548 3 view .LVU6100
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 23522              		.loc 1 548 9 is_stmt 0 view .LVU6101
 23523 00c0 0822     		movs	r2, #8
 23524              	.LBE3254:
 23525              	.LBE3253:
 23526              	.LBE3252:
 23527              	.LBE3251:
4336:src/xeq.c     **** }
 23528              		.loc 1 4336 9 view .LVU6102
 23529 00c2 0120     		movs	r0, #1
 23530              	.LBB3258:
 23531              	.LBB3257:
 23532              	.LBB3256:
 23533              	.LBB3255:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 23534              		.loc 1 548 9 view .LVU6103
 23535 00c4 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 23536              		.loc 1 549 3 is_stmt 1 view .LVU6104
 23537              	.LBE3255:
 23538              	.LBE3256:
 23539              	.LBE3257:
 23540              	.LBE3258:
 23541              	.LBE3322:
 23542              	.LBE3328:
4337:src/xeq.c     **** 
ARM GAS  /tmp/ccqED0AM.s 			page 614


 23543              		.loc 1 4337 1 is_stmt 0 view .LVU6105
 23544 00c6 15B0     		add	sp, sp, #84
 23545              		.cfi_remember_state
 23546              		.cfi_def_cfa_offset 36
 23547              		@ sp needed
 23548 00c8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 23549              	.LVL1827:
 23550              	.L1669:
 23551              		.cfi_restore_state
 23552              	.LBB3329:
 23553              	.LBB3323:
4273:src/xeq.c     **** 			goto range_error;
 23554              		.loc 1 4273 3 is_stmt 1 view .LVU6106
4273:src/xeq.c     **** 			goto range_error;
 23555              		.loc 1 4273 6 is_stmt 0 view .LVU6107
 23556 00cc 002F     		cmp	r7, #0
 23557 00ce F3D0     		beq	.L1672
4275:src/xeq.c     **** 	}
 23558              		.loc 1 4275 3 is_stmt 1 view .LVU6108
4280:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23559              		.loc 1 4280 8 is_stmt 0 view .LVU6109
 23560 00d0 544D     		ldr	r5, .L1718+4
4285:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 23561              		.loc 1 4285 30 view .LVU6110
 23562 00d2 584A     		ldr	r2, .L1718+20
4282:src/xeq.c     **** 	rsrc /= 100;			// sss
 23563              		.loc 1 4282 6 view .LVU6111
 23564 00d4 544E     		ldr	r6, .L1718+8
4275:src/xeq.c     **** 	}
 23565              		.loc 1 4275 8 view .LVU6112
 23566 00d6 6442     		rsbs	r4, r4, #0
 23567              	.LVL1828:
4280:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23568              		.loc 1 4280 2 is_stmt 1 view .LVU6113
4280:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23569              		.loc 1 4280 8 is_stmt 0 view .LVU6114
 23570 00d8 A5FB0435 		umull	r3, r5, r5, r4
4281:src/xeq.c     **** 	num = rsrc % 100;		// nn
 23571              		.loc 1 4281 7 view .LVU6115
 23572 00dc AB09     		lsrs	r3, r5, #6
4282:src/xeq.c     **** 	rsrc /= 100;			// sss
 23573              		.loc 1 4282 6 view .LVU6116
 23574 00de A6FB0316 		umull	r1, r6, r6, r3
4280:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23575              		.loc 1 4280 8 view .LVU6117
 23576 00e2 4FF47A70 		mov	r0, #1000
4285:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 23577              		.loc 1 4285 30 view .LVU6118
 23578 00e6 1168     		ldr	r1, [r2]
4280:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23579              		.loc 1 4280 8 view .LVU6119
 23580 00e8 00FB1345 		mls	r5, r0, r3, r4
 23581              	.LVL1829:
4281:src/xeq.c     **** 	num = rsrc % 100;		// nn
 23582              		.loc 1 4281 2 is_stmt 1 view .LVU6120
4282:src/xeq.c     **** 	rsrc /= 100;			// sss
 23583              		.loc 1 4282 2 view .LVU6121
ARM GAS  /tmp/ccqED0AM.s 			page 615


4282:src/xeq.c     **** 	rsrc /= 100;			// sss
 23584              		.loc 1 4282 6 is_stmt 0 view .LVU6122
 23585 00ec 7209     		lsrs	r2, r6, #5
 23586 00ee 6420     		movs	r0, #100
4283:src/xeq.c     **** 
 23587              		.loc 1 4283 7 view .LVU6123
 23588 00f0 1646     		mov	r6, r2
4282:src/xeq.c     **** 	rsrc /= 100;			// sss
 23589              		.loc 1 4282 6 view .LVU6124
 23590 00f2 00FB1232 		mls	r2, r0, r2, r3
 23591              	.LVL1830:
4283:src/xeq.c     **** 
 23592              		.loc 1 4283 2 is_stmt 1 view .LVU6125
4285:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 23593              		.loc 1 4285 2 view .LVU6126
4286:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 23594              		.loc 1 4286 9 is_stmt 0 view .LVU6127
 23595 00f6 91F8CF37 		ldrb	r3, [r1, #1999]	@ zero_extendqisi2
 23596              	.LVL1831:
 23597              	.L1673:
4289:src/xeq.c     **** 		goto range_error;
 23598              		.loc 1 4289 2 is_stmt 1 view .LVU6128
4289:src/xeq.c     **** 		goto range_error;
 23599              		.loc 1 4289 5 is_stmt 0 view .LVU6129
 23600 00fa B342     		cmp	r3, r6
 23601 00fc DCDD     		ble	.L1672
 23602              	.L1713:
4292:src/xeq.c     **** 		mx_dest = rdest >= LOCAL_REG_BASE ? local_regs() : global_regs();
 23603              		.loc 1 4292 2 is_stmt 1 view .LVU6130
4292:src/xeq.c     **** 		mx_dest = rdest >= LOCAL_REG_BASE ? local_regs() : global_regs();
 23604              		.loc 1 4292 5 is_stmt 0 view .LVU6131
 23605 00fe B8F1000F 		cmp	r8, #0
 23606 0102 29D0     		beq	.L1677
4293:src/xeq.c     **** 
 23607              		.loc 1 4293 3 is_stmt 1 view .LVU6132
4293:src/xeq.c     **** 
 23608              		.loc 1 4293 52 is_stmt 0 view .LVU6133
 23609 0104 6F2D     		cmp	r5, #111
 23610 0106 2BDD     		ble	.L1678
 23611              	.LBB3259:
 23612              	.LBI3259:
 233:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 23613              		.loc 1 233 5 is_stmt 1 view .LVU6134
 23614              	.LBE3259:
 23615              	.LBE3323:
 23616              	.LBE3329:
 234:src/xeq.c     **** }
 23617              		.loc 1 234 2 view .LVU6135
 23618              	.LVL1832:
 23619              	.LBB3330:
 23620              	.LBB3324:
 23621              	.LBB3284:
 23622              	.LBB3260:
 23623              	.LBI3260:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 23624              		.loc 1 225 5 view .LVU6136
 23625              	.LBB3261:
ARM GAS  /tmp/ccqED0AM.s 			page 616


 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 23626              		.loc 1 226 2 view .LVU6137
 23627              	.LBB3262:
 23628              	.LBI3262:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 23629              		.loc 1 1118 5 view .LVU6138
 23630              	.LBB3263:
1119:src/xeq.c     **** }
 23631              		.loc 1 1119 2 view .LVU6139
1119:src/xeq.c     **** }
 23632              		.loc 1 1119 12 is_stmt 0 view .LVU6140
 23633 0108 DAF80010 		ldr	r1, [r10]
 23634              	.LVL1833:
1119:src/xeq.c     **** }
 23635              		.loc 1 1119 12 view .LVU6141
 23636              	.LBE3263:
 23637              	.LBE3262:
 227:src/xeq.c     **** }
 23638              		.loc 1 227 2 is_stmt 1 view .LVU6142
 23639              	.LBB3266:
 23640              	.LBI3266:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 23641              		.loc 1 217 5 view .LVU6143
 23642              	.LBB3267:
 218:src/xeq.c     **** }
 23643              		.loc 1 218 2 view .LVU6144
 218:src/xeq.c     **** }
 23644              		.loc 1 218 9 is_stmt 0 view .LVU6145
 23645 010c B1F8DE07 		ldrh	r0, [r1, #2014]
 23646 0110 40F34A10 		sbfx	r0, r0, #5, #11
 218:src/xeq.c     **** }
 23647              		.loc 1 218 57 view .LVU6146
 23648 0114 0028     		cmp	r0, #0
 23649 0116 6BDB     		blt	.L1714
 23650              	.LVL1834:
 218:src/xeq.c     **** }
 23651              		.loc 1 218 57 view .LVU6147
 23652              	.LBE3267:
 23653              	.LBE3266:
 23654              	.LBE3261:
 23655              	.LBE3260:
 23656              	.LBE3284:
4295:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 23657              		.loc 1 4295 3 is_stmt 1 view .LVU6148
 23658              	.LBB3285:
 23659              	.LBB3282:
 23660              	.LBB3280:
 23661              	.LBB3273:
 23662              	.LBB3268:
 23663 0118 0021     		movs	r1, #0
 23664              	.LVL1835:
4295:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 23665              		.loc 1 4295 3 is_stmt 0 view .LVU6149
 23666              	.LBE3268:
 23667              	.LBE3273:
 23668              	.LBE3280:
 23669              	.LBE3282:
ARM GAS  /tmp/ccqED0AM.s 			page 617


 23670              	.LBE3285:
4295:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 23671              		.loc 1 4295 6 view .LVU6150
 23672 011a 92B3     		cbz	r2, .L1680
 23673              	.LVL1836:
 23674              	.L1681:
4314:src/xeq.c     **** 		if (rdest + num > mx_dest)
 23675              		.loc 1 4314 4 is_stmt 1 view .LVU6151
4314:src/xeq.c     **** 		if (rdest + num > mx_dest)
 23676              		.loc 1 4314 12 is_stmt 0 view .LVU6152
 23677 011c 7031     		adds	r1, r1, #112
 23678              	.LVL1837:
 23679              	.L1684:
4315:src/xeq.c     **** 			goto range_error;
 23680              		.loc 1 4315 3 is_stmt 1 view .LVU6153
4315:src/xeq.c     **** 			goto range_error;
 23681              		.loc 1 4315 13 is_stmt 0 view .LVU6154
 23682 011e A818     		adds	r0, r5, r2
4315:src/xeq.c     **** 			goto range_error;
 23683              		.loc 1 4315 6 view .LVU6155
 23684 0120 8842     		cmp	r0, r1
 23685 0122 C9DC     		bgt	.L1672
4318:src/xeq.c     **** 	}
 23686              		.loc 1 4318 3 is_stmt 1 view .LVU6156
4318:src/xeq.c     **** 	}
 23687              		.loc 1 4318 6 is_stmt 0 view .LVU6157
 23688 0124 C8F80050 		str	r5, [r8]
 23689 0128 B118     		adds	r1, r6, r2
 23690              	.LVL1838:
 23691              	.L1690:
4325:src/xeq.c     **** 		goto range_error;
 23692              		.loc 1 4325 2 is_stmt 1 view .LVU6158
4325:src/xeq.c     **** 		goto range_error;
 23693              		.loc 1 4325 5 is_stmt 0 view .LVU6159
 23694 012a 8B42     		cmp	r3, r1
 23695 012c C4DB     		blt	.L1672
 23696              	.L1692:
4329:src/xeq.c     **** 	*n = num;
 23697              		.loc 1 4329 2 is_stmt 1 view .LVU6160
4329:src/xeq.c     **** 	*n = num;
 23698              		.loc 1 4329 37 is_stmt 0 view .LVU6161
 23699 012e 0FB1     		cbz	r7, .L1693
4329:src/xeq.c     **** 	*n = num;
 23700              		.loc 1 4329 37 view .LVU6162
 23701 0130 06F57A76 		add	r6, r6, #1000
 23702              	.LVL1839:
 23703              	.L1693:
4332:src/xeq.c     **** 
 23704              		.loc 1 4332 9 view .LVU6163
 23705 0134 0020     		movs	r0, #0
4329:src/xeq.c     **** 	*n = num;
 23706              		.loc 1 4329 5 view .LVU6164
 23707 0136 CBF80060 		str	r6, [fp]
4330:src/xeq.c     **** 
 23708              		.loc 1 4330 2 is_stmt 1 view .LVU6165
4330:src/xeq.c     **** 
 23709              		.loc 1 4330 5 is_stmt 0 view .LVU6166
ARM GAS  /tmp/ccqED0AM.s 			page 618


 23710 013a C9F80020 		str	r2, [r9]
4332:src/xeq.c     **** 
 23711              		.loc 1 4332 2 is_stmt 1 view .LVU6167
 23712              	.LBE3324:
 23713              	.LBE3330:
4337:src/xeq.c     **** 
 23714              		.loc 1 4337 1 is_stmt 0 view .LVU6168
 23715 013e 15B0     		add	sp, sp, #84
 23716              		.cfi_remember_state
 23717              		.cfi_def_cfa_offset 36
 23718              		@ sp needed
 23719 0140 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 23720              	.LVL1840:
 23721              	.L1670:
 23722              		.cfi_restore_state
 23723              	.LBB3331:
 23724              	.LBB3325:
 23725              	.LBB3286:
 23726              	.LBI3286:
 233:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 23727              		.loc 1 233 5 is_stmt 1 view .LVU6169
 23728              	.LBE3286:
 23729              	.LBE3325:
 23730              	.LBE3331:
 234:src/xeq.c     **** }
 23731              		.loc 1 234 2 view .LVU6170
 23732              	.LBB3332:
 23733              	.LBB3326:
 23734              	.LBB3307:
 23735              	.LBB3287:
 23736              	.LBI3287:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 23737              		.loc 1 225 5 view .LVU6171
 23738              	.LBB3288:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 23739              		.loc 1 226 2 view .LVU6172
 23740              	.LBB3289:
 23741              	.LBI3289:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 23742              		.loc 1 1118 5 view .LVU6173
 23743              	.LBB3290:
1119:src/xeq.c     **** }
 23744              		.loc 1 1119 2 view .LVU6174
1119:src/xeq.c     **** }
 23745              		.loc 1 1119 12 is_stmt 0 view .LVU6175
 23746 0144 DAF80030 		ldr	r3, [r10]
 23747              	.LVL1841:
1119:src/xeq.c     **** }
 23748              		.loc 1 1119 12 view .LVU6176
 23749              	.LBE3290:
 23750              	.LBE3289:
 227:src/xeq.c     **** }
 23751              		.loc 1 227 2 is_stmt 1 view .LVU6177
 23752              	.LBB3293:
 23753              	.LBI3293:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 23754              		.loc 1 217 5 view .LVU6178
ARM GAS  /tmp/ccqED0AM.s 			page 619


 23755              	.LBB3294:
 218:src/xeq.c     **** }
 23756              		.loc 1 218 2 view .LVU6179
 218:src/xeq.c     **** }
 23757              		.loc 1 218 9 is_stmt 0 view .LVU6180
 23758 0148 B3F8DE17 		ldrh	r1, [r3, #2014]
 23759 014c 41F34A11 		sbfx	r1, r1, #5, #11
 218:src/xeq.c     **** }
 23760              		.loc 1 218 57 view .LVU6181
 23761 0150 0029     		cmp	r1, #0
 23762 0152 38DB     		blt	.L1715
 23763 0154 7023     		movs	r3, #112
 23764              	.LVL1842:
 218:src/xeq.c     **** }
 23765              		.loc 1 218 57 view .LVU6182
 23766 0156 ABE7     		b	.L1676
 23767              	.LVL1843:
 23768              	.L1677:
 218:src/xeq.c     **** }
 23769              		.loc 1 218 57 view .LVU6183
 23770              	.LBE3294:
 23771              	.LBE3293:
 23772              	.LBE3288:
 23773              	.LBE3287:
 23774              	.LBE3307:
4321:src/xeq.c     **** 			num = mx_src - rsrc;
 23775              		.loc 1 4321 3 is_stmt 1 view .LVU6184
4321:src/xeq.c     **** 			num = mx_src - rsrc;
 23776              		.loc 1 4321 6 is_stmt 0 view .LVU6185
 23777 0158 002A     		cmp	r2, #0
 23778 015a 32D1     		bne	.L1716
4322:src/xeq.c     **** 		}
 23779              		.loc 1 4322 4 is_stmt 1 view .LVU6186
4322:src/xeq.c     **** 		}
 23780              		.loc 1 4322 8 is_stmt 0 view .LVU6187
 23781 015c 9A1B     		subs	r2, r3, r6
 23782              	.LVL1844:
4325:src/xeq.c     **** 		goto range_error;
 23783              		.loc 1 4325 2 is_stmt 1 view .LVU6188
 23784 015e E6E7     		b	.L1692
 23785              	.L1678:
 23786              	.LBB3308:
 23787              	.LBI3308:
 253:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 23788              		.loc 1 253 14 view .LVU6189
 23789              	.LBE3308:
 23790              	.LBE3326:
 23791              	.LBE3332:
 254:src/xeq.c     **** }
 23792              		.loc 1 254 2 view .LVU6190
 23793              	.LVL1845:
 23794              	.LBB3333:
 23795              	.LBB3327:
 23796              	.LBB3317:
 23797              	.LBB3309:
 23798              	.LBI3309:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
ARM GAS  /tmp/ccqED0AM.s 			page 620


 23799              		.loc 1 241 14 view .LVU6191
 23800              	.LBB3310:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 23801              		.loc 1 242 2 view .LVU6192
 23802              	.LBB3311:
 23803              	.LBI3311:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 23804              		.loc 1 1118 5 view .LVU6193
 23805              	.LBB3312:
1119:src/xeq.c     **** }
 23806              		.loc 1 1119 2 view .LVU6194
1119:src/xeq.c     **** }
 23807              		.loc 1 1119 12 is_stmt 0 view .LVU6195
 23808 0160 DAF80000 		ldr	r0, [r10]
1119:src/xeq.c     **** }
 23809              		.loc 1 1119 24 view .LVU6196
 23810 0164 B0F8E8C7 		ldrh	ip, [r0, #2024]
 23811 0168 44F20101 		movw	r1, #16385
 23812              	.LBE3312:
 23813              	.LBE3311:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 23814              		.loc 1 242 5 view .LVU6197
 23815 016c 01EA0C01 		and	r1, r1, ip
 23816 0170 B1F5804F 		cmp	r1, #16384
 23817              	.LBB3313:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23818              		.loc 1 243 24 view .LVU6198
 23819 0174 90F8CF17 		ldrb	r1, [r0, #1999]	@ zero_extendqisi2
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23820              		.loc 1 243 3 is_stmt 1 view .LVU6199
 244:src/xeq.c     **** 	}
 23821              		.loc 1 244 3 view .LVU6200
 23822              	.LVL1846:
 244:src/xeq.c     **** 	}
 23823              		.loc 1 244 3 is_stmt 0 view .LVU6201
 23824              	.LBE3313:
 23825              	.LBE3310:
 23826              	.LBE3309:
 23827              	.LBE3317:
4295:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 23828              		.loc 1 4295 3 is_stmt 1 view .LVU6202
 23829              	.LBB3318:
 23830              	.LBB3316:
 23831              	.LBB3315:
 23832              	.LBB3314:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23833              		.loc 1 243 13 is_stmt 0 view .LVU6203
 23834 0178 04BF     		itt	eq
 23835 017a 0C39     		subeq	r1, r1, #12
 244:src/xeq.c     **** 	}
 23836              		.loc 1 244 67 view .LVU6204
 23837 017c 4910     		asreq	r1, r1, #1
 23838              	.LBE3314:
 23839              	.LBE3315:
 23840              	.LBE3316:
 23841              	.LBE3318:
4295:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
ARM GAS  /tmp/ccqED0AM.s 			page 621


 23842              		.loc 1 4295 6 view .LVU6205
 23843 017e 002A     		cmp	r2, #0
 23844 0180 CDD1     		bne	.L1684
 23845              	.L1680:
4297:src/xeq.c     **** 				// source & destination in different memory areas
 23846              		.loc 1 4297 4 is_stmt 1 view .LVU6206
4297:src/xeq.c     **** 				// source & destination in different memory areas
 23847              		.loc 1 4297 7 is_stmt 0 view .LVU6207
 23848 0182 4FB1     		cbz	r7, .L1717
 23849              	.LVL1847:
 23850              	.L1685:
4299:src/xeq.c     **** 			else {
 23851              		.loc 1 4299 5 is_stmt 1 view .LVU6208
4299:src/xeq.c     **** 			else {
 23852              		.loc 1 4299 9 is_stmt 0 view .LVU6209
 23853 0184 8B42     		cmp	r3, r1
 23854 0186 1A46     		mov	r2, r3
 23855 0188 A8BF     		it	ge
 23856 018a 0A46     		movge	r2, r1
 23857              	.LVL1848:
 23858              	.L1687:
4313:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
 23859              		.loc 1 4313 3 is_stmt 1 view .LVU6210
4313:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
 23860              		.loc 1 4313 6 is_stmt 0 view .LVU6211
 23861 018c 6F2D     		cmp	r5, #111
 23862 018e C6DD     		ble	.L1684
 23863 0190 C4E7     		b	.L1681
 23864              	.LVL1849:
 23865              	.L1697:
4313:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
 23866              		.loc 1 4313 6 view .LVU6212
 23867 0192 1F46     		mov	r7, r3
4286:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 23868              		.loc 1 4286 9 view .LVU6213
 23869 0194 7023     		movs	r3, #112
 23870 0196 B0E7     		b	.L1673
 23871              	.LVL1850:
 23872              	.L1717:
4297:src/xeq.c     **** 				// source & destination in different memory areas
 23873              		.loc 1 4297 42 view .LVU6214
 23874 0198 244A     		ldr	r2, .L1718+12
 23875              	.LVL1851:
4297:src/xeq.c     **** 				// source & destination in different memory areas
 23876              		.loc 1 4297 14 view .LVU6215
 23877 019a 9442     		cmp	r4, r2
 23878 019c B4BF     		ite	lt
 23879 019e 0024     		movlt	r4, #0
 23880 01a0 0124     		movge	r4, #1
 23881 01a2 6F2D     		cmp	r5, #111
 23882 01a4 D4BF     		ite	le
 23883 01a6 0022     		movle	r2, #0
 23884 01a8 0122     		movgt	r2, #1
 23885 01aa 9442     		cmp	r4, r2
 23886 01ac EAD1     		bne	.L1685
4301:src/xeq.c     **** 					num = mx_src - rsrc;
 23887              		.loc 1 4301 5 is_stmt 1 view .LVU6216
ARM GAS  /tmp/ccqED0AM.s 			page 622


4301:src/xeq.c     **** 					num = mx_src - rsrc;
 23888              		.loc 1 4301 8 is_stmt 0 view .LVU6217
 23889 01ae B542     		cmp	r5, r6
4302:src/xeq.c     **** 					q = rsrc - rdest;
 23890              		.loc 1 4302 6 is_stmt 1 view .LVU6218
4306:src/xeq.c     **** 					q = rdest - rsrc;
 23891              		.loc 1 4306 10 is_stmt 0 view .LVU6219
 23892 01b0 A7BF     		ittee	ge
 23893 01b2 4A1B     		subge	r2, r1, r5
4307:src/xeq.c     **** 				}
 23894              		.loc 1 4307 8 view .LVU6220
 23895 01b4 A81B     		subge	r0, r5, r6
4302:src/xeq.c     **** 					q = rsrc - rdest;
 23896              		.loc 1 4302 10 view .LVU6221
 23897 01b6 9A1B     		sublt	r2, r3, r6
4303:src/xeq.c     **** 				}
 23898              		.loc 1 4303 6 is_stmt 1 view .LVU6222
4303:src/xeq.c     **** 				}
 23899              		.loc 1 4303 8 is_stmt 0 view .LVU6223
 23900 01b8 701B     		sublt	r0, r6, r5
4306:src/xeq.c     **** 					q = rdest - rsrc;
 23901              		.loc 1 4306 6 is_stmt 1 view .LVU6224
 23902              	.LVL1852:
4307:src/xeq.c     **** 				}
 23903              		.loc 1 4307 6 view .LVU6225
4309:src/xeq.c     **** 					num = q;
 23904              		.loc 1 4309 5 view .LVU6226
 23905 01ba 8242     		cmp	r2, r0
 23906 01bc A8BF     		it	ge
 23907 01be 0246     		movge	r2, r0
 23908              	.LVL1853:
4309:src/xeq.c     **** 					num = q;
 23909              		.loc 1 4309 5 is_stmt 0 view .LVU6227
 23910 01c0 E4E7     		b	.L1687
 23911              	.LVL1854:
 23912              	.L1716:
4309:src/xeq.c     **** 					num = q;
 23913              		.loc 1 4309 5 view .LVU6228
 23914 01c2 9119     		adds	r1, r2, r6
 23915 01c4 B1E7     		b	.L1690
 23916              	.LVL1855:
 23917              	.L1715:
 23918              	.LBB3319:
 23919              	.LBB3306:
 23920              	.LBB3305:
 23921              	.LBB3299:
 23922              	.LBB3291:
1119:src/xeq.c     **** }
 23923              		.loc 1 1119 24 view .LVU6229
 23924 01c6 B3F8E877 		ldrh	r7, [r3, #2024]
 23925              	.LBE3291:
 23926              	.LBE3299:
 23927              	.LBB3300:
 23928              	.LBB3295:
 218:src/xeq.c     **** }
 23929              		.loc 1 218 25 view .LVU6230
 23930 01ca 1B48     		ldr	r0, .L1718+24
ARM GAS  /tmp/ccqED0AM.s 			page 623


 23931              	.LBE3295:
 23932              	.LBE3300:
 23933              	.LBB3301:
 23934              	.LBB3292:
1119:src/xeq.c     **** }
 23935              		.loc 1 1119 24 view .LVU6231
 23936 01cc 44F20103 		movw	r3, #16385
 23937              	.LVL1856:
1119:src/xeq.c     **** }
 23938              		.loc 1 1119 24 view .LVU6232
 23939              	.LBE3292:
 23940              	.LBE3301:
 23941              	.LBB3302:
 23942              	.LBB3296:
 218:src/xeq.c     **** }
 23943              		.loc 1 218 25 view .LVU6233
 23944 01d0 0068     		ldr	r0, [r0]
 23945              	.LBE3296:
 23946              	.LBE3302:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 23947              		.loc 1 226 73 view .LVU6234
 23948 01d2 3B40     		ands	r3, r3, r7
 23949 01d4 A3F58043 		sub	r3, r3, #16384
 23950              	.LBB3303:
 23951              	.LBB3297:
 218:src/xeq.c     **** }
 23952              		.loc 1 218 57 view .LVU6235
 23953 01d8 30F81110 		ldrh	r1, [r0, r1, lsl #1]
 23954              	.LBE3297:
 23955              	.LBE3303:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 23956              		.loc 1 226 73 view .LVU6236
 23957 01dc B3FA83F3 		clz	r3, r3
 23958 01e0 5B09     		lsrs	r3, r3, #5
 23959 01e2 0233     		adds	r3, r3, #2
 23960              	.LBB3304:
 23961              	.LBB3298:
 218:src/xeq.c     **** }
 23962              		.loc 1 218 57 view .LVU6237
 23963 01e4 C1F30B01 		ubfx	r1, r1, #0, #12
 23964 01e8 41FA03F3 		asr	r3, r1, r3
 23965 01ec 7033     		adds	r3, r3, #112
 23966 01ee 5FE7     		b	.L1676
 23967              	.LVL1857:
 23968              	.L1714:
 218:src/xeq.c     **** }
 23969              		.loc 1 218 57 view .LVU6238
 23970              	.LBE3298:
 23971              	.LBE3304:
 23972              	.LBE3305:
 23973              	.LBE3306:
 23974              	.LBE3319:
 23975              	.LBB3320:
 23976              	.LBB3283:
 23977              	.LBB3281:
 23978              	.LBB3274:
 23979              	.LBB3264:
ARM GAS  /tmp/ccqED0AM.s 			page 624


1119:src/xeq.c     **** }
 23980              		.loc 1 1119 24 view .LVU6239
 23981 01f0 B1F8E8E7 		ldrh	lr, [r1, #2024]
 23982              	.LBE3264:
 23983              	.LBE3274:
 23984              	.LBB3275:
 23985              	.LBB3269:
 218:src/xeq.c     **** }
 23986              		.loc 1 218 25 view .LVU6240
 23987 01f4 DFF840C0 		ldr	ip, .L1718+24
 23988              	.LBE3269:
 23989              	.LBE3275:
 23990              	.LBB3276:
 23991              	.LBB3265:
1119:src/xeq.c     **** }
 23992              		.loc 1 1119 24 view .LVU6241
 23993 01f8 44F20101 		movw	r1, #16385
 23994              	.LVL1858:
1119:src/xeq.c     **** }
 23995              		.loc 1 1119 24 view .LVU6242
 23996              	.LBE3265:
 23997              	.LBE3276:
 23998              	.LBB3277:
 23999              	.LBB3270:
 218:src/xeq.c     **** }
 24000              		.loc 1 218 25 view .LVU6243
 24001 01fc DCF800C0 		ldr	ip, [ip]
 24002              	.LBE3270:
 24003              	.LBE3277:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 24004              		.loc 1 226 73 view .LVU6244
 24005 0200 01EA0E01 		and	r1, r1, lr
 24006 0204 A1F58041 		sub	r1, r1, #16384
 24007              	.LBB3278:
 24008              	.LBB3271:
 218:src/xeq.c     **** }
 24009              		.loc 1 218 57 view .LVU6245
 24010 0208 3CF810C0 		ldrh	ip, [ip, r0, lsl #1]
 24011              	.LBE3271:
 24012              	.LBE3278:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 24013              		.loc 1 226 73 view .LVU6246
 24014 020c B1FA81F1 		clz	r1, r1
 24015 0210 4909     		lsrs	r1, r1, #5
 24016 0212 881C     		adds	r0, r1, #2
 24017              	.LBB3279:
 24018              	.LBB3272:
 218:src/xeq.c     **** }
 24019              		.loc 1 218 57 view .LVU6247
 24020 0214 CCF30B01 		ubfx	r1, ip, #0, #12
 24021 0218 0141     		asrs	r1, r1, r0
 24022              	.LVL1859:
 218:src/xeq.c     **** }
 24023              		.loc 1 218 57 view .LVU6248
 24024              	.LBE3272:
 24025              	.LBE3279:
 24026              	.LBE3281:
ARM GAS  /tmp/ccqED0AM.s 			page 625


 24027              	.LBE3283:
 24028              	.LBE3320:
4295:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 24029              		.loc 1 4295 3 is_stmt 1 view .LVU6249
4295:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 24030              		.loc 1 4295 6 is_stmt 0 view .LVU6250
 24031 021a 002A     		cmp	r2, #0
 24032 021c B1D0     		beq	.L1680
 24033 021e 7DE7     		b	.L1681
 24034              	.L1719:
 24035              		.align	2
 24036              	.L1718:
 24037 0220 00000000 		.word	Error
 24038 0224 D34D6210 		.word	274877907
 24039 0228 1F85EB51 		.word	1374389535
 24040 022c 00E6AA00 		.word	11200000
 24041 0230 80969800 		.word	10000000
 24042 0234 00000000 		.word	backup_ram
 24043 0238 00000000 		.word	RetStk
 24044 023c 00000000 		.word	main_ram
 24045              	.LBE3327:
 24046              	.LBE3333:
 24047              		.cfi_endproc
 24048              	.LFE229:
 24050              		.section	.text.op_regcopy,"ax",%progbits
 24051              		.align	1
 24052              		.p2align 2,,3
 24053              		.global	op_regcopy
 24054              		.syntax unified
 24055              		.thumb
 24056              		.thumb_func
 24057              		.fpu fpv4-sp-d16
 24059              	op_regcopy:
 24060              	.LVL1860:
 24061              	.LFB230:
4339:src/xeq.c     **** 	int s, n, d;
 24062              		.loc 1 4339 32 is_stmt 1 view -0
 24063              		.cfi_startproc
 24064              		@ args = 0, pretend = 0, frame = 16
 24065              		@ frame_needed = 0, uses_anonymous_args = 0
4340:src/xeq.c     **** 
 24066              		.loc 1 4340 2 view .LVU6252
4342:src/xeq.c     **** 		return;
 24067              		.loc 1 4342 2 view .LVU6253
4339:src/xeq.c     **** 	int s, n, d;
 24068              		.loc 1 4339 32 is_stmt 0 view .LVU6254
 24069 0000 10B5     		push	{r4, lr}
 24070              		.cfi_def_cfa_offset 8
 24071              		.cfi_offset 4, -8
 24072              		.cfi_offset 14, -4
 24073 0002 84B0     		sub	sp, sp, #16
 24074              		.cfi_def_cfa_offset 24
4342:src/xeq.c     **** 		return;
 24075              		.loc 1 4342 6 view .LVU6255
 24076 0004 0123     		movs	r3, #1
 24077 0006 03AA     		add	r2, sp, #12
 24078 0008 02A9     		add	r1, sp, #8
ARM GAS  /tmp/ccqED0AM.s 			page 626


 24079 000a 01A8     		add	r0, sp, #4
 24080              	.LVL1861:
4342:src/xeq.c     **** 		return;
 24081              		.loc 1 4342 6 view .LVU6256
 24082 000c FFF7FEFF 		bl	reg_decode
 24083              	.LVL1862:
4342:src/xeq.c     **** 		return;
 24084              		.loc 1 4342 5 view .LVU6257
 24085 0010 B8B9     		cbnz	r0, .L1720
4344:src/xeq.c     **** }
 24086              		.loc 1 4344 2 is_stmt 1 view .LVU6258
 24087 0012 0398     		ldr	r0, [sp, #12]
 24088 0014 FFF7FEFF 		bl	get_reg_n
 24089              	.LVL1863:
 24090 0018 0446     		mov	r4, r0
 24091 001a 0198     		ldr	r0, [sp, #4]
 24092 001c FFF7FEFF 		bl	get_reg_n
 24093              	.LVL1864:
 24094              	.LBB3334:
 24095              	.LBB3335:
 24096              	.LBB3336:
 24097              	.LBB3337:
1119:src/xeq.c     **** }
 24098              		.loc 1 1119 24 is_stmt 0 view .LVU6259
 24099 0020 094B     		ldr	r3, .L1725
 24100              	.LBE3337:
 24101              	.LBE3336:
 24102              	.LBE3335:
 24103              	.LBE3334:
4344:src/xeq.c     **** }
 24104              		.loc 1 4344 2 view .LVU6260
 24105 0022 029A     		ldr	r2, [sp, #8]
 24106              	.LVL1865:
 24107              	.LBB3344:
 24108              	.LBB3342:
 24109              	.LBB3340:
 24110              	.LBB3338:
1119:src/xeq.c     **** }
 24111              		.loc 1 1119 24 view .LVU6261
 24112 0024 1B68     		ldr	r3, [r3]
 24113 0026 B3F8E817 		ldrh	r1, [r3, #2024]
 24114 002a 44F20103 		movw	r3, #16385
 24115              	.LBE3338:
 24116              	.LBE3340:
1538:src/xeq.c     **** 		n <<= 1;
 24117              		.loc 1 1538 5 view .LVU6262
 24118 002e 0B40     		ands	r3, r3, r1
 24119 0030 B3F5804F 		cmp	r3, #16384
1539:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 24120              		.loc 1 1539 5 view .LVU6263
 24121 0034 08BF     		it	eq
 24122 0036 5200     		lsleq	r2, r2, #1
 24123              	.LBE3342:
 24124              	.LBE3344:
4344:src/xeq.c     **** }
 24125              		.loc 1 4344 2 view .LVU6264
 24126 0038 0146     		mov	r1, r0
ARM GAS  /tmp/ccqED0AM.s 			page 627


 24127              	.LVL1866:
 24128              	.LBB3345:
 24129              	.LBI3334:
1537:src/xeq.c     **** 	if (is_dblmode())
 24130              		.loc 1 1537 6 is_stmt 1 view .LVU6265
 24131              	.LBB3343:
1538:src/xeq.c     **** 		n <<= 1;
 24132              		.loc 1 1538 2 view .LVU6266
 24133              	.LBB3341:
 24134              	.LBI3336:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 24135              		.loc 1 1118 5 view .LVU6267
 24136              	.LBB3339:
1119:src/xeq.c     **** }
 24137              		.loc 1 1119 2 view .LVU6268
 24138              	.LBE3339:
 24139              	.LBE3341:
1539:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 24140              		.loc 1 1539 3 view .LVU6269
1540:src/xeq.c     **** }
 24141              		.loc 1 1540 2 view .LVU6270
 24142 003a D200     		lsls	r2, r2, #3
 24143              	.LVL1867:
1540:src/xeq.c     **** }
 24144              		.loc 1 1540 2 is_stmt 0 view .LVU6271
 24145 003c 2046     		mov	r0, r4
 24146              	.LVL1868:
1540:src/xeq.c     **** }
 24147              		.loc 1 1540 2 view .LVU6272
 24148 003e FFF7FEFF 		bl	xcopy
 24149              	.LVL1869:
 24150              	.L1720:
1540:src/xeq.c     **** }
 24151              		.loc 1 1540 2 view .LVU6273
 24152              	.LBE3343:
 24153              	.LBE3345:
4345:src/xeq.c     **** 
 24154              		.loc 1 4345 1 view .LVU6274
 24155 0042 04B0     		add	sp, sp, #16
 24156              		.cfi_def_cfa_offset 8
 24157              		@ sp needed
 24158 0044 10BD     		pop	{r4, pc}
 24159              	.L1726:
 24160 0046 00BF     		.align	2
 24161              	.L1725:
 24162 0048 00000000 		.word	main_ram
 24163              		.cfi_endproc
 24164              	.LFE230:
 24166              		.section	.text.op_regswap,"ax",%progbits
 24167              		.align	1
 24168              		.p2align 2,,3
 24169              		.global	op_regswap
 24170              		.syntax unified
 24171              		.thumb
 24172              		.thumb_func
 24173              		.fpu fpv4-sp-d16
 24175              	op_regswap:
ARM GAS  /tmp/ccqED0AM.s 			page 628


 24176              	.LVL1870:
 24177              	.LFB231:
4347:src/xeq.c     **** 	int s, n, d, i;
 24178              		.loc 1 4347 32 is_stmt 1 view -0
 24179              		.cfi_startproc
 24180              		@ args = 0, pretend = 0, frame = 16
 24181              		@ frame_needed = 0, uses_anonymous_args = 0
4348:src/xeq.c     **** 
 24182              		.loc 1 4348 2 view .LVU6276
4350:src/xeq.c     **** 		return;
 24183              		.loc 1 4350 2 view .LVU6277
4347:src/xeq.c     **** 	int s, n, d, i;
 24184              		.loc 1 4347 32 is_stmt 0 view .LVU6278
 24185 0000 30B5     		push	{r4, r5, lr}
 24186              		.cfi_def_cfa_offset 12
 24187              		.cfi_offset 4, -12
 24188              		.cfi_offset 5, -8
 24189              		.cfi_offset 14, -4
 24190 0002 85B0     		sub	sp, sp, #20
 24191              		.cfi_def_cfa_offset 32
4350:src/xeq.c     **** 		return;
 24192              		.loc 1 4350 6 view .LVU6279
 24193 0004 0023     		movs	r3, #0
 24194 0006 03AA     		add	r2, sp, #12
 24195 0008 02A9     		add	r1, sp, #8
 24196 000a 01A8     		add	r0, sp, #4
 24197              	.LVL1871:
4350:src/xeq.c     **** 		return;
 24198              		.loc 1 4350 6 view .LVU6280
 24199 000c FFF7FEFF 		bl	reg_decode
 24200              	.LVL1872:
4350:src/xeq.c     **** 		return;
 24201              		.loc 1 4350 5 view .LVU6281
 24202 0010 E8B9     		cbnz	r0, .L1727
4350:src/xeq.c     **** 		return;
 24203              		.loc 1 4350 37 discriminator 1 view .LVU6282
 24204 0012 039B     		ldr	r3, [sp, #12]
 24205 0014 0446     		mov	r4, r0
 24206 0016 0198     		ldr	r0, [sp, #4]
4350:src/xeq.c     **** 		return;
 24207              		.loc 1 4350 32 discriminator 1 view .LVU6283
 24208 0018 9842     		cmp	r0, r3
 24209 001a 18D0     		beq	.L1727
4353:src/xeq.c     **** 			report_err(ERR_RANGE);
 24210              		.loc 1 4353 3 is_stmt 1 view .LVU6284
4353:src/xeq.c     **** 			report_err(ERR_RANGE);
 24211              		.loc 1 4353 19 is_stmt 0 view .LVU6285
 24212 001c 029A     		ldr	r2, [sp, #8]
4353:src/xeq.c     **** 			report_err(ERR_RANGE);
 24213              		.loc 1 4353 6 view .LVU6286
 24214 001e 18DD     		ble	.L1732
4353:src/xeq.c     **** 			report_err(ERR_RANGE);
 24215              		.loc 1 4353 19 discriminator 1 view .LVU6287
 24216 0020 1344     		add	r3, r3, r2
4353:src/xeq.c     **** 			report_err(ERR_RANGE);
 24217              		.loc 1 4353 14 discriminator 1 view .LVU6288
 24218 0022 9842     		cmp	r0, r3
ARM GAS  /tmp/ccqED0AM.s 			page 629


 24219 0024 19DB     		blt	.L1733
 24220              	.L1734:
 24221              	.LVL1873:
4356:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24222              		.loc 1 4356 16 is_stmt 1 discriminator 1 view .LVU6289
4356:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24223              		.loc 1 4356 4 is_stmt 0 discriminator 1 view .LVU6290
 24224 0026 002A     		cmp	r2, #0
 24225 0028 01DC     		bgt	.L1736
 24226 002a 10E0     		b	.L1727
 24227              	.LVL1874:
 24228              	.L1739:
4356:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24229              		.loc 1 4356 4 discriminator 1 view .LVU6291
 24230 002c 0198     		ldr	r0, [sp, #4]
 24231              	.LVL1875:
 24232              	.L1736:
4357:src/xeq.c     **** 		}
 24233              		.loc 1 4357 5 is_stmt 1 discriminator 3 view .LVU6292
 24234 002e 2044     		add	r0, r0, r4
 24235 0030 FFF7FEFF 		bl	get_reg_n
 24236              	.LVL1876:
 24237 0034 039B     		ldr	r3, [sp, #12]
 24238 0036 0546     		mov	r5, r0
 24239 0038 E018     		adds	r0, r4, r3
 24240 003a FFF7FEFF 		bl	get_reg_n
 24241              	.LVL1877:
 24242 003e 0146     		mov	r1, r0
 24243 0040 2846     		mov	r0, r5
 24244 0042 FFF7FEFF 		bl	swap_reg
 24245              	.LVL1878:
4356:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24246              		.loc 1 4356 23 discriminator 3 view .LVU6293
4356:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24247              		.loc 1 4356 4 is_stmt 0 discriminator 3 view .LVU6294
 24248 0046 029B     		ldr	r3, [sp, #8]
4356:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24249              		.loc 1 4356 24 discriminator 3 view .LVU6295
 24250 0048 0134     		adds	r4, r4, #1
 24251              	.LVL1879:
4356:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24252              		.loc 1 4356 16 is_stmt 1 discriminator 3 view .LVU6296
4356:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24253              		.loc 1 4356 4 is_stmt 0 discriminator 3 view .LVU6297
 24254 004a A342     		cmp	r3, r4
 24255 004c EEDC     		bgt	.L1739
 24256              	.LVL1880:
 24257              	.L1727:
4360:src/xeq.c     **** 
 24258              		.loc 1 4360 1 view .LVU6298
 24259 004e 05B0     		add	sp, sp, #20
 24260              		.cfi_remember_state
 24261              		.cfi_def_cfa_offset 12
 24262              		@ sp needed
 24263 0050 30BD     		pop	{r4, r5, pc}
 24264              	.L1732:
 24265              		.cfi_restore_state
ARM GAS  /tmp/ccqED0AM.s 			page 630


4353:src/xeq.c     **** 			report_err(ERR_RANGE);
 24266              		.loc 1 4353 28 discriminator 3 view .LVU6299
 24267 0052 E8DA     		bge	.L1734
4353:src/xeq.c     **** 			report_err(ERR_RANGE);
 24268              		.loc 1 4353 43 discriminator 4 view .LVU6300
 24269 0054 8118     		adds	r1, r0, r2
4353:src/xeq.c     **** 			report_err(ERR_RANGE);
 24270              		.loc 1 4353 38 discriminator 4 view .LVU6301
 24271 0056 8B42     		cmp	r3, r1
 24272 0058 E5DA     		bge	.L1734
 24273              	.L1733:
4354:src/xeq.c     **** 		else {
 24274              		.loc 1 4354 4 is_stmt 1 view .LVU6302
 24275              	.LVL1881:
 24276              	.LBB3350:
 24277              	.LBI3350:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24278              		.loc 1 546 5 view .LVU6303
 24279              	.LBB3351:
 547:src/xeq.c     **** 		Error = e;
 24280              		.loc 1 547 2 view .LVU6304
 547:src/xeq.c     **** 		Error = e;
 24281              		.loc 1 547 12 is_stmt 0 view .LVU6305
 24282 005a 044B     		ldr	r3, .L1740
 547:src/xeq.c     **** 		Error = e;
 24283              		.loc 1 547 5 view .LVU6306
 24284 005c 1A68     		ldr	r2, [r3]
 24285 005e 002A     		cmp	r2, #0
 24286 0060 F5D1     		bne	.L1727
 24287              	.LVL1882:
 24288              	.LBB3352:
 24289              	.LBI3352:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24290              		.loc 1 546 5 is_stmt 1 view .LVU6307
 24291              	.LBB3353:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 24292              		.loc 1 548 3 view .LVU6308
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 24293              		.loc 1 548 9 is_stmt 0 view .LVU6309
 24294 0062 0822     		movs	r2, #8
 24295 0064 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 24296              		.loc 1 549 3 is_stmt 1 view .LVU6310
 24297              	.LBE3353:
 24298              	.LBE3352:
 24299              	.LBE3351:
 24300              	.LBE3350:
4360:src/xeq.c     **** 
 24301              		.loc 1 4360 1 is_stmt 0 view .LVU6311
 24302 0066 05B0     		add	sp, sp, #20
 24303              		.cfi_def_cfa_offset 12
 24304              		@ sp needed
 24305 0068 30BD     		pop	{r4, r5, pc}
 24306              	.L1741:
 24307 006a 00BF     		.align	2
 24308              	.L1740:
 24309 006c 00000000 		.word	Error
ARM GAS  /tmp/ccqED0AM.s 			page 631


 24310              		.cfi_endproc
 24311              	.LFE231:
 24313              		.section	.text.op_regclr,"ax",%progbits
 24314              		.align	1
 24315              		.p2align 2,,3
 24316              		.global	op_regclr
 24317              		.syntax unified
 24318              		.thumb
 24319              		.thumb_func
 24320              		.fpu fpv4-sp-d16
 24322              	op_regclr:
 24323              	.LVL1883:
 24324              	.LFB232:
4362:src/xeq.c     **** 	int s, n;
 24325              		.loc 1 4362 31 is_stmt 1 view -0
 24326              		.cfi_startproc
 24327              		@ args = 0, pretend = 0, frame = 8
 24328              		@ frame_needed = 0, uses_anonymous_args = 0
4363:src/xeq.c     **** 
 24329              		.loc 1 4363 2 view .LVU6313
4365:src/xeq.c     **** 		return;
 24330              		.loc 1 4365 2 view .LVU6314
4362:src/xeq.c     **** 	int s, n;
 24331              		.loc 1 4362 31 is_stmt 0 view .LVU6315
 24332 0000 10B5     		push	{r4, lr}
 24333              		.cfi_def_cfa_offset 8
 24334              		.cfi_offset 4, -8
 24335              		.cfi_offset 14, -4
4365:src/xeq.c     **** 		return;
 24336              		.loc 1 4365 6 view .LVU6316
 24337 0002 0023     		movs	r3, #0
4362:src/xeq.c     **** 	int s, n;
 24338              		.loc 1 4362 31 view .LVU6317
 24339 0004 82B0     		sub	sp, sp, #8
 24340              		.cfi_def_cfa_offset 16
4365:src/xeq.c     **** 		return;
 24341              		.loc 1 4365 6 view .LVU6318
 24342 0006 1A46     		mov	r2, r3
 24343 0008 01A9     		add	r1, sp, #4
 24344 000a 6846     		mov	r0, sp
 24345              	.LVL1884:
4365:src/xeq.c     **** 		return;
 24346              		.loc 1 4365 6 view .LVU6319
 24347 000c FFF7FEFF 		bl	reg_decode
 24348              	.LVL1885:
4365:src/xeq.c     **** 		return;
 24349              		.loc 1 4365 5 view .LVU6320
 24350 0010 A8B9     		cbnz	r0, .L1742
4367:src/xeq.c     **** }
 24351              		.loc 1 4367 2 is_stmt 1 view .LVU6321
 24352 0012 0446     		mov	r4, r0
 24353 0014 0098     		ldr	r0, [sp]
 24354 0016 FFF7FEFF 		bl	get_reg_n
 24355              	.LVL1886:
 24356              	.LBB3354:
 24357              	.LBI3354:
1518:src/xeq.c     **** #if 0
ARM GAS  /tmp/ccqED0AM.s 			page 632


 24358              		.loc 1 1518 6 view .LVU6322
 24359              	.LBB3355:
1533:src/xeq.c     **** #endif
 24360              		.loc 1 1533 2 view .LVU6323
 24361              	.LBB3356:
 24362              	.LBI3356:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 24363              		.loc 1 1118 5 view .LVU6324
 24364              	.LBB3357:
1119:src/xeq.c     **** }
 24365              		.loc 1 1119 2 view .LVU6325
1119:src/xeq.c     **** }
 24366              		.loc 1 1119 24 is_stmt 0 view .LVU6326
 24367 001a 0A4B     		ldr	r3, .L1746
 24368              	.LBE3357:
 24369              	.LBE3356:
1533:src/xeq.c     **** #endif
 24370              		.loc 1 1533 2 view .LVU6327
 24371 001c 019A     		ldr	r2, [sp, #4]
 24372              	.LBB3359:
 24373              	.LBB3358:
1119:src/xeq.c     **** }
 24374              		.loc 1 1119 24 view .LVU6328
 24375 001e 1B68     		ldr	r3, [r3]
 24376 0020 B3F8E817 		ldrh	r1, [r3, #2024]
 24377 0024 44F20103 		movw	r3, #16385
 24378 0028 0B40     		ands	r3, r3, r1
 24379 002a A3F58043 		sub	r3, r3, #16384
 24380 002e B3FA83F3 		clz	r3, r3
 24381 0032 5B09     		lsrs	r3, r3, #5
 24382              	.LBE3358:
 24383              	.LBE3359:
1533:src/xeq.c     **** #endif
 24384              		.loc 1 1533 24 view .LVU6329
 24385 0034 0333     		adds	r3, r3, #3
1533:src/xeq.c     **** #endif
 24386              		.loc 1 1533 2 view .LVU6330
 24387 0036 2146     		mov	r1, r4
 24388 0038 9A40     		lsls	r2, r2, r3
 24389 003a FFF7FEFF 		bl	xset
 24390              	.LVL1887:
 24391              	.L1742:
1533:src/xeq.c     **** #endif
 24392              		.loc 1 1533 2 view .LVU6331
 24393              	.LBE3355:
 24394              	.LBE3354:
4368:src/xeq.c     **** 
 24395              		.loc 1 4368 1 view .LVU6332
 24396 003e 02B0     		add	sp, sp, #8
 24397              		.cfi_def_cfa_offset 8
 24398              		@ sp needed
 24399 0040 10BD     		pop	{r4, pc}
 24400              	.L1747:
 24401 0042 00BF     		.align	2
 24402              	.L1746:
 24403 0044 00000000 		.word	main_ram
 24404              		.cfi_endproc
ARM GAS  /tmp/ccqED0AM.s 			page 633


 24405              	.LFE232:
 24407              		.section	.text.op_regsort,"ax",%progbits
 24408              		.align	1
 24409              		.p2align 2,,3
 24410              		.global	op_regsort
 24411              		.syntax unified
 24412              		.thumb
 24413              		.thumb_func
 24414              		.fpu fpv4-sp-d16
 24416              	op_regsort:
 24417              	.LVL1888:
 24418              	.LFB233:
4370:src/xeq.c     **** 	int s, n;
 24419              		.loc 1 4370 32 is_stmt 1 view -0
 24420              		.cfi_startproc
 24421              		@ args = 0, pretend = 0, frame = 160
 24422              		@ frame_needed = 0, uses_anonymous_args = 0
4371:src/xeq.c     **** 	decNumber pivot, a;
 24423              		.loc 1 4371 2 view .LVU6334
4372:src/xeq.c     **** 	int beg[10], end[10], i;
 24424              		.loc 1 4372 2 view .LVU6335
4373:src/xeq.c     **** 
 24425              		.loc 1 4373 2 view .LVU6336
4375:src/xeq.c     **** 		return;
 24426              		.loc 1 4375 2 view .LVU6337
4370:src/xeq.c     **** 	int s, n;
 24427              		.loc 1 4370 32 is_stmt 0 view .LVU6338
 24428 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 24429              		.cfi_def_cfa_offset 28
 24430              		.cfi_offset 4, -28
 24431              		.cfi_offset 5, -24
 24432              		.cfi_offset 6, -20
 24433              		.cfi_offset 7, -16
 24434              		.cfi_offset 8, -12
 24435              		.cfi_offset 9, -8
 24436              		.cfi_offset 14, -4
4375:src/xeq.c     **** 		return;
 24437              		.loc 1 4375 6 view .LVU6339
 24438 0004 0023     		movs	r3, #0
4370:src/xeq.c     **** 	int s, n;
 24439              		.loc 1 4370 32 view .LVU6340
 24440 0006 A9B0     		sub	sp, sp, #164
 24441              		.cfi_def_cfa_offset 192
4375:src/xeq.c     **** 		return;
 24442              		.loc 1 4375 6 view .LVU6341
 24443 0008 1A46     		mov	r2, r3
 24444 000a 01A9     		add	r1, sp, #4
 24445 000c 6846     		mov	r0, sp
 24446              	.LVL1889:
4375:src/xeq.c     **** 		return;
 24447              		.loc 1 4375 6 view .LVU6342
 24448 000e FFF7FEFF 		bl	reg_decode
 24449              	.LVL1890:
4375:src/xeq.c     **** 		return;
 24450              		.loc 1 4375 5 view .LVU6343
 24451 0012 20B9     		cbnz	r0, .L1748
4375:src/xeq.c     **** 		return;
ARM GAS  /tmp/ccqED0AM.s 			page 634


 24452              		.loc 1 4375 39 discriminator 1 view .LVU6344
 24453 0014 DDF80480 		ldr	r8, [sp, #4]
4375:src/xeq.c     **** 		return;
 24454              		.loc 1 4375 34 discriminator 1 view .LVU6345
 24455 0018 B8F1010F 		cmp	r8, #1
 24456 001c 02D1     		bne	.L1772
 24457              	.L1748:
4420:src/xeq.c     **** 
 24458              		.loc 1 4420 1 view .LVU6346
 24459 001e 29B0     		add	sp, sp, #164
 24460              		.cfi_remember_state
 24461              		.cfi_def_cfa_offset 28
 24462              		@ sp needed
 24463 0020 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 24464              	.L1772:
 24465              		.cfi_restore_state
 24466 0024 0646     		mov	r6, r0
4379:src/xeq.c     **** 	end[0] = n;
 24467              		.loc 1 4379 2 is_stmt 1 view .LVU6347
4379:src/xeq.c     **** 	end[0] = n;
 24468              		.loc 1 4379 9 is_stmt 0 view .LVU6348
 24469 0026 1490     		str	r0, [sp, #80]
4380:src/xeq.c     **** 	i = 0;
 24470              		.loc 1 4380 2 is_stmt 1 view .LVU6349
4380:src/xeq.c     **** 	i = 0;
 24471              		.loc 1 4380 9 is_stmt 0 view .LVU6350
 24472 0028 CDF87880 		str	r8, [sp, #120]
4381:src/xeq.c     **** 	while (i>=0) {
 24473              		.loc 1 4381 2 is_stmt 1 view .LVU6351
 24474              	.LVL1891:
4382:src/xeq.c     **** 		int L = beg[i];
 24475              		.loc 1 4382 2 view .LVU6352
4382:src/xeq.c     **** 		int L = beg[i];
 24476              		.loc 1 4382 8 view .LVU6353
4381:src/xeq.c     **** 	while (i>=0) {
 24477              		.loc 1 4381 4 is_stmt 0 view .LVU6354
 24478 002c 0746     		mov	r7, r0
 24479              	.LVL1892:
 24480              	.L1762:
 24481              	.LBB3360:
4383:src/xeq.c     **** 		int R = end[i] - 1;
 24482              		.loc 1 4383 3 is_stmt 1 view .LVU6355
4384:src/xeq.c     **** 		if (L<R) {
 24483              		.loc 1 4384 3 view .LVU6356
4384:src/xeq.c     **** 		if (L<R) {
 24484              		.loc 1 4384 7 is_stmt 0 view .LVU6357
 24485 002e 08F1FF34 		add	r4, r8, #-1
 24486              	.LVL1893:
4385:src/xeq.c     **** 			const int pvt = s + L;
 24487              		.loc 1 4385 3 is_stmt 1 view .LVU6358
4385:src/xeq.c     **** 			const int pvt = s + L;
 24488              		.loc 1 4385 6 is_stmt 0 view .LVU6359
 24489 0032 B442     		cmp	r4, r6
 24490 0034 0CDC     		bgt	.L1773
 24491              	.LVL1894:
 24492              	.L1751:
4418:src/xeq.c     **** 	}
ARM GAS  /tmp/ccqED0AM.s 			page 635


 24493              		.loc 1 4418 4 is_stmt 1 view .LVU6360
 24494              	.LBE3360:
4382:src/xeq.c     **** 		int L = beg[i];
 24495              		.loc 1 4382 8 is_stmt 0 view .LVU6361
 24496 0036 013F     		subs	r7, r7, #1
 24497              	.LVL1895:
4382:src/xeq.c     **** 		int L = beg[i];
 24498              		.loc 1 4382 8 view .LVU6362
 24499 0038 F1D3     		bcc	.L1748
 24500 003a 28AB     		add	r3, sp, #160
 24501 003c 03EB8703 		add	r3, r3, r7, lsl #2
 24502 0040 53F8288C 		ldr	r8, [r3, #-40]
 24503 0044 53F8506C 		ldr	r6, [r3, #-80]
 24504              	.LVL1896:
 24505              	.LBB3363:
4383:src/xeq.c     **** 		int R = end[i] - 1;
 24506              		.loc 1 4383 3 is_stmt 1 view .LVU6363
4384:src/xeq.c     **** 		if (L<R) {
 24507              		.loc 1 4384 3 view .LVU6364
4384:src/xeq.c     **** 		if (L<R) {
 24508              		.loc 1 4384 7 is_stmt 0 view .LVU6365
 24509 0048 08F1FF34 		add	r4, r8, #-1
 24510              	.LVL1897:
4385:src/xeq.c     **** 			const int pvt = s + L;
 24511              		.loc 1 4385 3 is_stmt 1 view .LVU6366
4385:src/xeq.c     **** 			const int pvt = s + L;
 24512              		.loc 1 4385 6 is_stmt 0 view .LVU6367
 24513 004c B442     		cmp	r4, r6
 24514 004e F2DD     		ble	.L1751
 24515              	.LVL1898:
 24516              	.L1773:
 24517              	.LBB3361:
4386:src/xeq.c     **** 			getRegister(&pivot, pvt);
 24518              		.loc 1 4386 4 is_stmt 1 view .LVU6368
4387:src/xeq.c     **** 			while (L<R) {
 24519              		.loc 1 4387 4 view .LVU6369
4386:src/xeq.c     **** 			getRegister(&pivot, pvt);
 24520              		.loc 1 4386 14 is_stmt 0 view .LVU6370
 24521 0050 0099     		ldr	r1, [sp]
4387:src/xeq.c     **** 			while (L<R) {
 24522              		.loc 1 4387 4 view .LVU6371
 24523 0052 02A8     		add	r0, sp, #8
 24524 0054 3144     		add	r1, r1, r6
 24525              	.LVL1899:
4387:src/xeq.c     **** 			while (L<R) {
 24526              		.loc 1 4387 4 view .LVU6372
 24527 0056 FFF7FEFF 		bl	getRegister
 24528              	.LVL1900:
4388:src/xeq.c     **** 				while (L<R) {
 24529              		.loc 1 4388 4 is_stmt 1 view .LVU6373
4388:src/xeq.c     **** 				while (L<R) {
 24530              		.loc 1 4388 10 view .LVU6374
4387:src/xeq.c     **** 			while (L<R) {
 24531              		.loc 1 4387 4 is_stmt 0 view .LVU6375
 24532 005a B146     		mov	r9, r6
 24533              	.L1754:
4390:src/xeq.c     **** 					if (dn_lt(&a, &pivot))
ARM GAS  /tmp/ccqED0AM.s 			page 636


 24534              		.loc 1 4390 6 is_stmt 1 view .LVU6376
 24535 005c 0099     		ldr	r1, [sp]
 24536 005e 0BA8     		add	r0, sp, #44
 24537 0060 2144     		add	r1, r1, r4
 24538 0062 FFF7FEFF 		bl	getRegister
 24539              	.LVL1901:
4391:src/xeq.c     **** 						break;
 24540              		.loc 1 4391 6 view .LVU6377
4391:src/xeq.c     **** 						break;
 24541              		.loc 1 4391 10 is_stmt 0 view .LVU6378
 24542 0066 02A9     		add	r1, sp, #8
 24543 0068 0BA8     		add	r0, sp, #44
 24544 006a FFF7FEFF 		bl	dn_lt
 24545              	.LVL1902:
4393:src/xeq.c     **** 				}
 24546              		.loc 1 4393 6 is_stmt 1 view .LVU6379
4391:src/xeq.c     **** 						break;
 24547              		.loc 1 4391 9 is_stmt 0 view .LVU6380
 24548 006e 00BB     		cbnz	r0, .L1753
4393:src/xeq.c     **** 				}
 24549              		.loc 1 4393 7 view .LVU6381
 24550 0070 013C     		subs	r4, r4, #1
 24551              	.LVL1903:
4389:src/xeq.c     **** 					getRegister(&a, s + R);
 24552              		.loc 1 4389 11 is_stmt 1 view .LVU6382
 24553 0072 4C45     		cmp	r4, r9
 24554 0074 F2DC     		bgt	.L1754
 24555              	.L1755:
 24556              	.LVL1904:
4397:src/xeq.c     **** 					getRegister(&a, s + L);
 24557              		.loc 1 4397 11 is_stmt 0 view .LVU6383
 24558 0076 4D46     		mov	r5, r9
 24559              	.LVL1905:
4388:src/xeq.c     **** 				while (L<R) {
 24560              		.loc 1 4388 10 is_stmt 1 view .LVU6384
 24561              	.L1763:
4406:src/xeq.c     **** 			if (L - beg[i] < end[i] - (L+1)) {
 24562              		.loc 1 4406 4 view .LVU6385
 24563 0078 0098     		ldr	r0, [sp]
 24564 007a 02A9     		add	r1, sp, #8
 24565 007c 2844     		add	r0, r0, r5
 24566 007e FFF7FEFF 		bl	setRegister
 24567              	.LVL1906:
4407:src/xeq.c     **** 				beg[i+1] = beg[i];
 24568              		.loc 1 4407 4 view .LVU6386
4407:src/xeq.c     **** 				beg[i+1] = beg[i];
 24569              		.loc 1 4407 32 is_stmt 0 view .LVU6387
 24570 0082 6B1C     		adds	r3, r5, #1
4407:src/xeq.c     **** 				beg[i+1] = beg[i];
 24571              		.loc 1 4407 28 view .LVU6388
 24572 0084 A8EB0302 		sub	r2, r8, r3
4407:src/xeq.c     **** 				beg[i+1] = beg[i];
 24573              		.loc 1 4407 10 view .LVU6389
 24574 0088 A91B     		subs	r1, r5, r6
4407:src/xeq.c     **** 				beg[i+1] = beg[i];
 24575              		.loc 1 4407 7 view .LVU6390
 24576 008a 9142     		cmp	r1, r2
ARM GAS  /tmp/ccqED0AM.s 			page 637


4408:src/xeq.c     **** 				end[i+1] = L;
 24577              		.loc 1 4408 10 view .LVU6391
 24578 008c 07F10101 		add	r1, r7, #1
4410:src/xeq.c     **** 			} else {
 24579              		.loc 1 4410 12 view .LVU6392
 24580 0090 28AA     		add	r2, sp, #160
 24581 0092 02EB8700 		add	r0, r2, r7, lsl #2
4408:src/xeq.c     **** 				end[i+1] = L;
 24582              		.loc 1 4408 14 view .LVU6393
 24583 0096 02EB8102 		add	r2, r2, r1, lsl #2
 24584 009a 0F46     		mov	r7, r1
 24585              	.LVL1907:
4407:src/xeq.c     **** 				beg[i+1] = beg[i];
 24586              		.loc 1 4407 7 view .LVU6394
 24587 009c 2DDA     		bge	.L1759
4408:src/xeq.c     **** 				end[i+1] = L;
 24588              		.loc 1 4408 5 is_stmt 1 view .LVU6395
4408:src/xeq.c     **** 				end[i+1] = L;
 24589              		.loc 1 4408 14 is_stmt 0 view .LVU6396
 24590 009e 42F8506C 		str	r6, [r2, #-80]
4409:src/xeq.c     **** 				beg[i] = L+1;
 24591              		.loc 1 4409 5 is_stmt 1 view .LVU6397
4410:src/xeq.c     **** 			} else {
 24592              		.loc 1 4410 12 is_stmt 0 view .LVU6398
 24593 00a2 40F8503C 		str	r3, [r0, #-80]
 24594 00a6 52F8506C 		ldr	r6, [r2, #-80]
4409:src/xeq.c     **** 				beg[i] = L+1;
 24595              		.loc 1 4409 14 view .LVU6399
 24596 00aa 42F8285C 		str	r5, [r2, #-40]
4410:src/xeq.c     **** 			} else {
 24597              		.loc 1 4410 5 is_stmt 1 view .LVU6400
 24598 00ae A846     		mov	r8, r5
 24599 00b0 BDE7     		b	.L1762
 24600              	.LVL1908:
 24601              	.L1753:
4395:src/xeq.c     **** 					copyreg_n(s + L++, s + R);
 24602              		.loc 1 4395 5 view .LVU6401
4395:src/xeq.c     **** 					copyreg_n(s + L++, s + R);
 24603              		.loc 1 4395 8 is_stmt 0 view .LVU6402
 24604 00b2 A145     		cmp	r9, r4
 24605 00b4 DFDA     		bge	.L1755
4396:src/xeq.c     **** 				while (L<R) {
 24606              		.loc 1 4396 6 is_stmt 1 view .LVU6403
 24607 00b6 0098     		ldr	r0, [sp]
4396:src/xeq.c     **** 				while (L<R) {
 24608              		.loc 1 4396 21 is_stmt 0 view .LVU6404
 24609 00b8 09F10105 		add	r5, r9, #1
 24610              	.LVL1909:
4396:src/xeq.c     **** 				while (L<R) {
 24611              		.loc 1 4396 6 view .LVU6405
 24612 00bc 0119     		adds	r1, r0, r4
 24613 00be 4844     		add	r0, r0, r9
 24614 00c0 FFF7FEFF 		bl	copyreg_n
 24615              	.LVL1910:
4397:src/xeq.c     **** 					getRegister(&a, s + L);
 24616              		.loc 1 4397 11 is_stmt 1 view .LVU6406
 24617 00c4 A542     		cmp	r5, r4
ARM GAS  /tmp/ccqED0AM.s 			page 638


 24618 00c6 03DB     		blt	.L1757
 24619 00c8 21E0     		b	.L1764
 24620              	.L1774:
4401:src/xeq.c     **** 				}
 24621              		.loc 1 4401 7 is_stmt 0 view .LVU6407
 24622 00ca 0135     		adds	r5, r5, #1
 24623              	.LVL1911:
4397:src/xeq.c     **** 					getRegister(&a, s + L);
 24624              		.loc 1 4397 11 is_stmt 1 view .LVU6408
 24625 00cc A542     		cmp	r5, r4
 24626 00ce D3D0     		beq	.L1763
 24627              	.L1757:
4398:src/xeq.c     **** 					if (dn_gt(&a, &pivot))
 24628              		.loc 1 4398 6 view .LVU6409
 24629 00d0 0099     		ldr	r1, [sp]
 24630 00d2 0BA8     		add	r0, sp, #44
 24631 00d4 2944     		add	r1, r1, r5
 24632 00d6 FFF7FEFF 		bl	getRegister
 24633              	.LVL1912:
4399:src/xeq.c     **** 						break;
 24634              		.loc 1 4399 6 view .LVU6410
4399:src/xeq.c     **** 						break;
 24635              		.loc 1 4399 10 is_stmt 0 view .LVU6411
 24636 00da 0BA9     		add	r1, sp, #44
 24637 00dc 02A8     		add	r0, sp, #8
 24638 00de FFF7FEFF 		bl	dn_lt
 24639              	.LVL1913:
4401:src/xeq.c     **** 				}
 24640              		.loc 1 4401 6 is_stmt 1 view .LVU6412
4399:src/xeq.c     **** 						break;
 24641              		.loc 1 4399 9 is_stmt 0 view .LVU6413
 24642 00e2 0028     		cmp	r0, #0
 24643 00e4 F1D0     		beq	.L1774
4403:src/xeq.c     **** 					copyreg_n(s + R--, s + L);
 24644              		.loc 1 4403 5 is_stmt 1 view .LVU6414
4404:src/xeq.c     **** 			}
 24645              		.loc 1 4404 6 view .LVU6415
 24646 00e6 0098     		ldr	r0, [sp]
 24647 00e8 4119     		adds	r1, r0, r5
 24648 00ea 2044     		add	r0, r0, r4
4404:src/xeq.c     **** 			}
 24649              		.loc 1 4404 21 is_stmt 0 view .LVU6416
 24650 00ec 013C     		subs	r4, r4, #1
 24651              	.LVL1914:
4404:src/xeq.c     **** 			}
 24652              		.loc 1 4404 6 view .LVU6417
 24653 00ee FFF7FEFF 		bl	copyreg_n
 24654              	.LVL1915:
4388:src/xeq.c     **** 				while (L<R) {
 24655              		.loc 1 4388 10 is_stmt 1 view .LVU6418
 24656 00f2 A542     		cmp	r5, r4
 24657 00f4 C0DA     		bge	.L1763
 24658 00f6 A946     		mov	r9, r5
4389:src/xeq.c     **** 					getRegister(&a, s + R);
 24659              		.loc 1 4389 11 view .LVU6419
 24660 00f8 B0E7     		b	.L1754
 24661              	.LVL1916:
ARM GAS  /tmp/ccqED0AM.s 			page 639


 24662              	.L1759:
4412:src/xeq.c     **** 				end[i+1] = end[i];
 24663              		.loc 1 4412 5 view .LVU6420
4413:src/xeq.c     **** 				end[i] = L;
 24664              		.loc 1 4413 14 is_stmt 0 view .LVU6421
 24665 00fa 42F8288C 		str	r8, [r2, #-40]
4414:src/xeq.c     **** 			}
 24666              		.loc 1 4414 12 view .LVU6422
 24667 00fe 40F8285C 		str	r5, [r0, #-40]
 24668 0102 52F8288C 		ldr	r8, [r2, #-40]
4412:src/xeq.c     **** 				end[i+1] = end[i];
 24669              		.loc 1 4412 14 view .LVU6423
 24670 0106 42F8503C 		str	r3, [r2, #-80]
4413:src/xeq.c     **** 				end[i] = L;
 24671              		.loc 1 4413 5 is_stmt 1 view .LVU6424
4414:src/xeq.c     **** 			}
 24672              		.loc 1 4414 5 view .LVU6425
4416:src/xeq.c     **** 		} else
 24673              		.loc 1 4416 4 view .LVU6426
 24674              	.LVL1917:
4416:src/xeq.c     **** 		} else
 24675              		.loc 1 4416 4 is_stmt 0 view .LVU6427
 24676              	.LBE3361:
 24677              	.LBE3363:
4382:src/xeq.c     **** 		int L = beg[i];
 24678              		.loc 1 4382 8 is_stmt 1 view .LVU6428
 24679              	.LBB3364:
 24680              	.LBB3362:
4414:src/xeq.c     **** 			}
 24681              		.loc 1 4414 12 is_stmt 0 view .LVU6429
 24682 010a 1E46     		mov	r6, r3
 24683 010c 8FE7     		b	.L1762
 24684              	.LVL1918:
 24685              	.L1764:
4397:src/xeq.c     **** 					getRegister(&a, s + L);
 24686              		.loc 1 4397 11 view .LVU6430
 24687 010e A946     		mov	r9, r5
 24688              	.LVL1919:
4397:src/xeq.c     **** 					getRegister(&a, s + L);
 24689              		.loc 1 4397 11 view .LVU6431
 24690 0110 4D46     		mov	r5, r9
 24691              	.LVL1920:
4388:src/xeq.c     **** 				while (L<R) {
 24692              		.loc 1 4388 10 is_stmt 1 view .LVU6432
 24693 0112 B1E7     		b	.L1763
 24694              	.LBE3362:
 24695              	.LBE3364:
 24696              		.cfi_endproc
 24697              	.LFE233:
 24699              		.section	.text.reset_volatile_state,"ax",%progbits
 24700              		.align	1
 24701              		.p2align 2,,3
 24702              		.global	reset_volatile_state
 24703              		.syntax unified
 24704              		.thumb
 24705              		.thumb_func
 24706              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccqED0AM.s 			page 640


 24708              	reset_volatile_state:
 24709              	.LFB235:
4455:src/xeq.c     **** 	// extern int IntMaxWindow;
 24710              		.loc 1 4455 33 view -0
 24711              		.cfi_startproc
 24712              		@ args = 0, pretend = 0, frame = 0
 24713              		@ frame_needed = 0, uses_anonymous_args = 0
 24714              		@ link register save eliminated.
4458:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 24715              		.loc 1 4458 2 view .LVU6434
4458:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 24716              		.loc 1 4458 16 is_stmt 0 view .LVU6435
 24717 0000 034B     		ldr	r3, .L1776
 24718 0002 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
4459:src/xeq.c     **** }
 24719              		.loc 1 4459 15 view .LVU6436
 24720 0004 0021     		movs	r1, #0
4458:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 24721              		.loc 1 4458 16 view .LVU6437
 24722 0006 6FF3C502 		bfc	r2, #3, #3
 24723 000a 1A75     		strb	r2, [r3, #20]
4459:src/xeq.c     **** }
 24724              		.loc 1 4459 2 is_stmt 1 view .LVU6438
4459:src/xeq.c     **** }
 24725              		.loc 1 4459 15 is_stmt 0 view .LVU6439
 24726 000c 5974     		strb	r1, [r3, #17]
4460:src/xeq.c     **** 
 24727              		.loc 1 4460 1 view .LVU6440
 24728 000e 7047     		bx	lr
 24729              	.L1777:
 24730              		.align	2
 24731              	.L1776:
 24732 0010 00000000 		.word	StateWhileOn
 24733              		.cfi_endproc
 24734              	.LFE235:
 24736              		.section	.rodata.busy.str1.4,"aMS",%progbits,1
 24737              		.align	2
 24738              	.LC7:
 24739 0000 57616974 		.ascii	"Wait...\000"
 24739      2E2E2E00 
 24740              		.section	.text.busy,"ax",%progbits
 24741              		.align	1
 24742              		.p2align 2,,3
 24743              		.global	busy
 24744              		.syntax unified
 24745              		.thumb
 24746              		.thumb_func
 24747              		.fpu fpv4-sp-d16
 24749              	busy:
 24750              	.LFB236:
4467:src/xeq.c     **** 	/*
 24751              		.loc 1 4467 1 is_stmt 1 view -0
 24752              		.cfi_startproc
 24753              		@ args = 0, pretend = 0, frame = 0
 24754              		@ frame_needed = 0, uses_anonymous_args = 0
 24755              		@ link register save eliminated.
4471:src/xeq.c     **** 
ARM GAS  /tmp/ccqED0AM.s 			page 641


 24756              		.loc 1 4471 12 view .LVU6442
4476:src/xeq.c     **** 
 24757              		.loc 1 4476 17 view .LVU6443
4481:src/xeq.c     **** 		Busy = 1;
 24758              		.loc 1 4481 2 view .LVU6444
4481:src/xeq.c     **** 		Busy = 1;
 24759              		.loc 1 4481 6 is_stmt 0 view .LVU6445
 24760 0000 054A     		ldr	r2, .L1781
4481:src/xeq.c     **** 		Busy = 1;
 24761              		.loc 1 4481 15 view .LVU6446
 24762 0002 064B     		ldr	r3, .L1781+4
4481:src/xeq.c     **** 		Busy = 1;
 24763              		.loc 1 4481 12 view .LVU6447
 24764 0004 1168     		ldr	r1, [r2]
 24765 0006 1B68     		ldr	r3, [r3]
 24766 0008 1943     		orrs	r1, r1, r3
 24767 000a 00D0     		beq	.L1780
4485:src/xeq.c     **** 
 24768              		.loc 1 4485 1 view .LVU6448
 24769 000c 7047     		bx	lr
 24770              	.L1780:
 24771              	.LBB3367:
 24772              	.LBI3367:
4466:src/xeq.c     **** {
 24773              		.loc 1 4466 6 is_stmt 1 view .LVU6449
 24774              	.LBB3368:
4482:src/xeq.c     **** 		message("Wait...", NULL);
 24775              		.loc 1 4482 3 view .LVU6450
4482:src/xeq.c     **** 		message("Wait...", NULL);
 24776              		.loc 1 4482 8 is_stmt 0 view .LVU6451
 24777 000e 0123     		movs	r3, #1
4483:src/xeq.c     **** 	}
 24778              		.loc 1 4483 3 view .LVU6452
 24779 0010 0348     		ldr	r0, .L1781+8
4482:src/xeq.c     **** 		message("Wait...", NULL);
 24780              		.loc 1 4482 8 view .LVU6453
 24781 0012 1360     		str	r3, [r2]
4483:src/xeq.c     **** 	}
 24782              		.loc 1 4483 3 is_stmt 1 view .LVU6454
 24783 0014 FFF7FEBF 		b	message
 24784              	.LVL1921:
 24785              	.L1782:
 24786              		.align	2
 24787              	.L1781:
 24788 0018 00000000 		.word	Busy
 24789 001c 00000000 		.word	Running
 24790 0020 00000000 		.word	.LC7
 24791              	.LBE3368:
 24792              	.LBE3367:
 24793              		.cfi_endproc
 24794              	.LFE236:
 24796              		.section	.text.intMonadic,"ax",%progbits
 24797              		.align	1
 24798              		.p2align 2,,3
 24799              		.global	intMonadic
 24800              		.syntax unified
 24801              		.thumb
ARM GAS  /tmp/ccqED0AM.s 			page 642


 24802              		.thumb_func
 24803              		.fpu fpv4-sp-d16
 24805              	intMonadic:
 24806              	.LVL1922:
 24807              	.LFB240:
4564:src/xeq.c     **** 	int s;
 24808              		.loc 1 4564 43 view -0
 24809              		.cfi_startproc
 24810              		@ args = 0, pretend = 0, frame = 80
 24811              		@ frame_needed = 0, uses_anonymous_args = 0
4565:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &s);
 24812              		.loc 1 4565 2 view .LVU6456
4566:src/xeq.c     **** 	decNumber rx, r;
 24813              		.loc 1 4566 2 view .LVU6457
4564:src/xeq.c     **** 	int s;
 24814              		.loc 1 4564 43 is_stmt 0 view .LVU6458
 24815 0000 30B5     		push	{r4, r5, lr}
 24816              		.cfi_def_cfa_offset 12
 24817              		.cfi_offset 4, -12
 24818              		.cfi_offset 5, -8
 24819              		.cfi_offset 14, -4
 24820 0002 95B0     		sub	sp, sp, #84
 24821              		.cfi_def_cfa_offset 96
4566:src/xeq.c     **** 	decNumber rx, r;
 24822              		.loc 1 4566 30 view .LVU6459
 24823 0004 01AA     		add	r2, sp, #4
 24824 0006 FFF7FEFF 		bl	extract_value
 24825              	.LVL1923:
4568:src/xeq.c     **** 
 24826              		.loc 1 4568 19 view .LVU6460
 24827 000a 1E4A     		ldr	r2, .L1798
4570:src/xeq.c     **** 		bad_mode_error();
 24828              		.loc 1 4570 6 view .LVU6461
 24829 000c 1E4B     		ldr	r3, .L1798+4
4568:src/xeq.c     **** 
 24830              		.loc 1 4568 15 view .LVU6462
 24831 000e 1478     		ldrb	r4, [r2]	@ zero_extendqisi2
4570:src/xeq.c     **** 		bad_mode_error();
 24832              		.loc 1 4570 6 view .LVU6463
 24833 0010 04EB4404 		add	r4, r4, r4, lsl #1
 24834 0014 53F83440 		ldr	r4, [r3, r4, lsl #3]
 24835              	.LVL1924:
4567:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
 24836              		.loc 1 4567 2 is_stmt 1 view .LVU6464
4568:src/xeq.c     **** 
 24837              		.loc 1 4568 2 view .LVU6465
4570:src/xeq.c     **** 		bad_mode_error();
 24838              		.loc 1 4570 2 view .LVU6466
4570:src/xeq.c     **** 		bad_mode_error();
 24839              		.loc 1 4570 5 is_stmt 0 view .LVU6467
 24840 0018 5CB1     		cbz	r4, .L1788
 24841              	.LBB3386:
4573:src/xeq.c     **** #ifndef REALBUILD
 24842              		.loc 1 4573 3 is_stmt 1 view .LVU6468
 24843              	.LVL1925:
4575:src/xeq.c     **** 			bad_mode_error();
 24844              		.loc 1 4575 3 view .LVU6469
ARM GAS  /tmp/ccqED0AM.s 			page 643


 24845              	.LBB3387:
 24846              	.LBI3387:
4501:src/xeq.c     **** {
 24847              		.loc 1 4501 24 view .LVU6470
 24848              	.LBB3388:
4503:src/xeq.c     **** 	if (xp < xrom)
 24849              		.loc 1 4503 2 view .LVU6471
4504:src/xeq.c     **** 		return NULL;
 24850              		.loc 1 4504 5 is_stmt 0 view .LVU6472
 24851 001a 1C4B     		ldr	r3, .L1798+8
4503:src/xeq.c     **** 	if (xp < xrom)
 24852              		.loc 1 4503 59 view .LVU6473
 24853 001c 24F00102 		bic	r2, r4, #1
 24854              	.LVL1926:
4504:src/xeq.c     **** 		return NULL;
 24855              		.loc 1 4504 2 is_stmt 1 view .LVU6474
4504:src/xeq.c     **** 		return NULL;
 24856              		.loc 1 4504 5 is_stmt 0 view .LVU6475
 24857 0020 9A42     		cmp	r2, r3
 24858 0022 10D3     		bcc	.L1787
4508:src/xeq.c     **** 		return NULL;
 24859              		.loc 1 4508 2 is_stmt 1 view .LVU6476
4508:src/xeq.c     **** 		return NULL;
 24860              		.loc 1 4508 17 is_stmt 0 view .LVU6477
 24861 0024 1A4D     		ldr	r5, .L1798+12
 24862 0026 2D88     		ldrh	r5, [r5]
 24863 0028 03EB4503 		add	r3, r3, r5, lsl #1
4508:src/xeq.c     **** 		return NULL;
 24864              		.loc 1 4508 5 view .LVU6478
 24865 002c 9A42     		cmp	r2, r3
 24866 002e 0AD2     		bcs	.L1787
 24867              	.LVL1927:
4508:src/xeq.c     **** 		return NULL;
 24868              		.loc 1 4508 5 view .LVU6479
 24869              	.LBE3388:
 24870              	.LBE3387:
4575:src/xeq.c     **** 			bad_mode_error();
 24871              		.loc 1 4575 6 view .LVU6480
 24872 0030 4AB1     		cbz	r2, .L1787
 24873              	.LVL1928:
 24874              	.L1788:
4575:src/xeq.c     **** 			bad_mode_error();
 24875              		.loc 1 4575 6 view .LVU6481
 24876              	.LBE3386:
4571:src/xeq.c     **** 	else {
 24877              		.loc 1 4571 3 is_stmt 1 view .LVU6482
 24878              	.LBB3397:
 24879              	.LBI3397:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 24880              		.loc 1 575 6 view .LVU6483
 24881              	.LBE3397:
 576:src/xeq.c     **** }
 24882              		.loc 1 576 2 view .LVU6484
 24883              	.LBB3406:
 24884              	.LBB3398:
 24885              	.LBI3398:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
ARM GAS  /tmp/ccqED0AM.s 			page 644


 24886              		.loc 1 546 5 view .LVU6485
 24887              	.LBB3399:
 547:src/xeq.c     **** 		Error = e;
 24888              		.loc 1 547 2 view .LVU6486
 547:src/xeq.c     **** 		Error = e;
 24889              		.loc 1 547 12 is_stmt 0 view .LVU6487
 24890 0032 184B     		ldr	r3, .L1798+16
 547:src/xeq.c     **** 		Error = e;
 24891              		.loc 1 547 5 view .LVU6488
 24892 0034 1A68     		ldr	r2, [r3]
 24893 0036 1AB1     		cbz	r2, .L1785
 24894              	.LVL1929:
 24895              	.L1796:
 24896              	.LBB3400:
 24897              	.LBB3401:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 24898              		.loc 1 549 3 is_stmt 1 view .LVU6489
 24899              	.LBE3401:
 24900              	.LBE3400:
 24901              	.LBE3399:
 24902              	.LBE3398:
 24903              	.LBE3406:
4589:src/xeq.c     **** }
 24904              		.loc 1 4589 9 is_stmt 0 view .LVU6490
 24905 0038 0020     		movs	r0, #0
 24906 003a 0146     		mov	r1, r0
4590:src/xeq.c     **** 
 24907              		.loc 1 4590 1 view .LVU6491
 24908 003c 15B0     		add	sp, sp, #84
 24909              		.cfi_remember_state
 24910              		.cfi_def_cfa_offset 12
 24911              		@ sp needed
 24912 003e 30BD     		pop	{r4, r5, pc}
 24913              	.LVL1930:
 24914              	.L1785:
 24915              		.cfi_restore_state
 24916              	.LBB3407:
 24917              	.LBB3405:
 24918              	.LBB3404:
 24919              	.LBB3403:
 24920              	.LBI3400:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24921              		.loc 1 546 5 is_stmt 1 view .LVU6492
 24922              	.LBB3402:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 24923              		.loc 1 548 3 view .LVU6493
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 24924              		.loc 1 548 9 is_stmt 0 view .LVU6494
 24925 0040 0D22     		movs	r2, #13
 24926 0042 1A60     		str	r2, [r3]
 24927 0044 F8E7     		b	.L1796
 24928              	.LVL1931:
 24929              	.L1787:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 24930              		.loc 1 548 9 view .LVU6495
 24931              	.LBE3402:
 24932              	.LBE3403:
ARM GAS  /tmp/ccqED0AM.s 			page 645


 24933              	.LBE3404:
 24934              	.LBE3405:
 24935              	.LBE3407:
 24936              	.LBB3408:
4580:src/xeq.c     **** 			if (s)
 24937              		.loc 1 4580 4 is_stmt 1 view .LVU6496
 24938 0046 0246     		mov	r2, r0
 24939 0048 0B46     		mov	r3, r1
 24940 004a 02A8     		add	r0, sp, #8
 24941              	.LVL1932:
4580:src/xeq.c     **** 			if (s)
 24942              		.loc 1 4580 4 is_stmt 0 view .LVU6497
 24943 004c FFF7FEFF 		bl	ullint_to_dn
 24944              	.LVL1933:
4581:src/xeq.c     **** 				dn_minus(&rx, &rx);
 24945              		.loc 1 4581 4 is_stmt 1 view .LVU6498
4581:src/xeq.c     **** 				dn_minus(&rx, &rx);
 24946              		.loc 1 4581 7 is_stmt 0 view .LVU6499
 24947 0050 019B     		ldr	r3, [sp, #4]
 24948 0052 8BB9     		cbnz	r3, .L1797
 24949              	.L1789:
4583:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 24950              		.loc 1 4583 4 is_stmt 1 view .LVU6500
4583:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 24951              		.loc 1 4583 16 is_stmt 0 view .LVU6501
 24952 0054 02A9     		add	r1, sp, #8
 24953 0056 0BA8     		add	r0, sp, #44
 24954 0058 A047     		blx	r4
 24955              	.LVL1934:
4583:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 24956              		.loc 1 4583 7 view .LVU6502
 24957 005a 40B9     		cbnz	r0, .L1790
4584:src/xeq.c     **** 			else
 24958              		.loc 1 4584 5 is_stmt 1 view .LVU6503
 24959              	.LVL1935:
 24960              	.LBB3389:
 24961              	.LBI3389:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24962              		.loc 1 546 5 view .LVU6504
 24963              	.LBB3390:
 547:src/xeq.c     **** 		Error = e;
 24964              		.loc 1 547 2 view .LVU6505
 547:src/xeq.c     **** 		Error = e;
 24965              		.loc 1 547 12 is_stmt 0 view .LVU6506
 24966 005c 0D4B     		ldr	r3, .L1798+16
 547:src/xeq.c     **** 		Error = e;
 24967              		.loc 1 547 5 view .LVU6507
 24968 005e 1A68     		ldr	r2, [r3]
 24969 0060 002A     		cmp	r2, #0
 24970 0062 E9D1     		bne	.L1796
 24971              	.LVL1936:
 24972              	.LBB3391:
 24973              	.LBI3391:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24974              		.loc 1 546 5 is_stmt 1 view .LVU6508
 24975              	.LBB3392:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
ARM GAS  /tmp/ccqED0AM.s 			page 646


 24976              		.loc 1 548 3 view .LVU6509
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 24977              		.loc 1 548 9 is_stmt 0 view .LVU6510
 24978 0064 0122     		movs	r2, #1
 24979              	.LBE3392:
 24980              	.LBE3391:
 24981              	.LBE3390:
 24982              	.LBE3389:
 24983              	.LBE3408:
4589:src/xeq.c     **** }
 24984              		.loc 1 4589 9 view .LVU6511
 24985 0066 0146     		mov	r1, r0
 24986              	.LBB3409:
 24987              	.LBB3396:
 24988              	.LBB3395:
 24989              	.LBB3394:
 24990              	.LBB3393:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 24991              		.loc 1 548 9 view .LVU6512
 24992 0068 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 24993              		.loc 1 549 3 is_stmt 1 view .LVU6513
 24994              	.LBE3393:
 24995              	.LBE3394:
 24996              	.LBE3395:
 24997              	.LBE3396:
 24998              	.LBE3409:
4590:src/xeq.c     **** 
 24999              		.loc 1 4590 1 is_stmt 0 view .LVU6514
 25000 006a 15B0     		add	sp, sp, #84
 25001              		.cfi_remember_state
 25002              		.cfi_def_cfa_offset 12
 25003              		@ sp needed
 25004 006c 30BD     		pop	{r4, r5, pc}
 25005              	.LVL1937:
 25006              	.L1790:
 25007              		.cfi_restore_state
 25008              	.LBB3410:
4586:src/xeq.c     **** 		}
 25009              		.loc 1 4586 5 is_stmt 1 view .LVU6515
4586:src/xeq.c     **** 		}
 25010              		.loc 1 4586 12 is_stmt 0 view .LVU6516
 25011 006e 0BA8     		add	r0, sp, #44
 25012 0070 FFF7FEFF 		bl	intResult
 25013              	.LVL1938:
 25014              	.LBE3410:
4590:src/xeq.c     **** 
 25015              		.loc 1 4590 1 view .LVU6517
 25016 0074 15B0     		add	sp, sp, #84
 25017              		.cfi_remember_state
 25018              		.cfi_def_cfa_offset 12
 25019              		@ sp needed
 25020 0076 30BD     		pop	{r4, r5, pc}
 25021              	.LVL1939:
 25022              	.L1797:
 25023              		.cfi_restore_state
 25024              	.LBB3411:
ARM GAS  /tmp/ccqED0AM.s 			page 647


4582:src/xeq.c     **** 			if (NULL == fp(&r, &rx))
 25025              		.loc 1 4582 5 is_stmt 1 view .LVU6518
 25026 0078 02A9     		add	r1, sp, #8
 25027 007a 0846     		mov	r0, r1
 25028 007c FFF7FEFF 		bl	dn_minus
 25029              	.LVL1940:
 25030 0080 E8E7     		b	.L1789
 25031              	.L1799:
 25032 0082 00BF     		.align	2
 25033              	.L1798:
 25034 0084 00000000 		.word	XeqOpCode
 25035 0088 00000000 		.word	monfuncs
 25036 008c 00000000 		.word	xrom
 25037 0090 00000000 		.word	xrom_size
 25038 0094 00000000 		.word	Error
 25039              	.LBE3411:
 25040              		.cfi_endproc
 25041              	.LFE240:
 25043              		.section	.text.intDyadic,"ax",%progbits
 25044              		.align	1
 25045              		.p2align 2,,3
 25046              		.global	intDyadic
 25047              		.syntax unified
 25048              		.thumb
 25049              		.thumb_func
 25050              		.fpu fpv4-sp-d16
 25052              	intDyadic:
 25053              	.LVL1941:
 25054              	.LFB241:
4595:src/xeq.c     **** 	int sx, sy;
 25055              		.loc 1 4595 59 view -0
 25056              		.cfi_startproc
 25057              		@ args = 0, pretend = 0, frame = 120
 25058              		@ frame_needed = 0, uses_anonymous_args = 0
4596:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &sx);
 25059              		.loc 1 4596 2 view .LVU6520
4597:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 25060              		.loc 1 4597 2 view .LVU6521
4595:src/xeq.c     **** 	int sx, sy;
 25061              		.loc 1 4595 59 is_stmt 0 view .LVU6522
 25062 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 25063              		.cfi_def_cfa_offset 24
 25064              		.cfi_offset 4, -24
 25065              		.cfi_offset 5, -20
 25066              		.cfi_offset 6, -16
 25067              		.cfi_offset 7, -12
 25068              		.cfi_offset 8, -8
 25069              		.cfi_offset 14, -4
 25070 0004 9EB0     		sub	sp, sp, #120
 25071              		.cfi_def_cfa_offset 144
4595:src/xeq.c     **** 	int sx, sy;
 25072              		.loc 1 4595 59 view .LVU6523
 25073 0006 0546     		mov	r5, r0
 25074 0008 0C46     		mov	r4, r1
4597:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 25075              		.loc 1 4597 30 view .LVU6524
 25076 000a 1046     		mov	r0, r2
ARM GAS  /tmp/ccqED0AM.s 			page 648


 25077              	.LVL1942:
4597:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 25078              		.loc 1 4597 30 view .LVU6525
 25079 000c 1946     		mov	r1, r3
 25080 000e 01AA     		add	r2, sp, #4
 25081              	.LVL1943:
4597:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 25082              		.loc 1 4597 30 view .LVU6526
 25083 0010 FFF7FEFF 		bl	extract_value
 25084              	.LVL1944:
4598:src/xeq.c     **** 	decNumber rx, ry, r;
 25085              		.loc 1 4598 30 view .LVU6527
 25086 0014 02AA     		add	r2, sp, #8
4597:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 25087              		.loc 1 4597 30 view .LVU6528
 25088 0016 0B46     		mov	r3, r1
 25089 0018 0646     		mov	r6, r0
4598:src/xeq.c     **** 	decNumber rx, ry, r;
 25090              		.loc 1 4598 30 view .LVU6529
 25091 001a 2146     		mov	r1, r4
 25092 001c 2846     		mov	r0, r5
4597:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 25093              		.loc 1 4597 30 view .LVU6530
 25094 001e 1D46     		mov	r5, r3
 25095              	.LVL1945:
4598:src/xeq.c     **** 	decNumber rx, ry, r;
 25096              		.loc 1 4598 2 is_stmt 1 view .LVU6531
4598:src/xeq.c     **** 	decNumber rx, ry, r;
 25097              		.loc 1 4598 30 is_stmt 0 view .LVU6532
 25098 0020 FFF7FEFF 		bl	extract_value
 25099              	.LVL1946:
4600:src/xeq.c     **** 
 25100              		.loc 1 4600 19 view .LVU6533
 25101 0024 264A     		ldr	r2, .L1820
4602:src/xeq.c     **** 		bad_mode_error();
 25102              		.loc 1 4602 6 view .LVU6534
 25103 0026 274B     		ldr	r3, .L1820+4
4600:src/xeq.c     **** 
 25104              		.loc 1 4600 15 view .LVU6535
 25105 0028 1478     		ldrb	r4, [r2]	@ zero_extendqisi2
4602:src/xeq.c     **** 		bad_mode_error();
 25106              		.loc 1 4602 6 view .LVU6536
 25107 002a 04EB4404 		add	r4, r4, r4, lsl #1
 25108 002e 53F83440 		ldr	r4, [r3, r4, lsl #3]
 25109              	.LVL1947:
4599:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
 25110              		.loc 1 4599 2 is_stmt 1 view .LVU6537
4600:src/xeq.c     **** 
 25111              		.loc 1 4600 2 view .LVU6538
4602:src/xeq.c     **** 		bad_mode_error();
 25112              		.loc 1 4602 2 view .LVU6539
4602:src/xeq.c     **** 		bad_mode_error();
 25113              		.loc 1 4602 5 is_stmt 0 view .LVU6540
 25114 0032 6CB1     		cbz	r4, .L1805
 25115              	.LBB3429:
 25116              	.LBB3430:
 25117              	.LBB3431:
ARM GAS  /tmp/ccqED0AM.s 			page 649


4504:src/xeq.c     **** 		return NULL;
 25118              		.loc 1 4504 5 view .LVU6541
 25119 0034 244B     		ldr	r3, .L1820+8
4503:src/xeq.c     **** 	if (xp < xrom)
 25120              		.loc 1 4503 59 view .LVU6542
 25121 0036 24F00102 		bic	r2, r4, #1
 25122              	.LVL1948:
4504:src/xeq.c     **** 		return NULL;
 25123              		.loc 1 4504 5 view .LVU6543
 25124 003a 9A42     		cmp	r2, r3
 25125 003c 0746     		mov	r7, r0
 25126 003e 8846     		mov	r8, r1
 25127              	.LBE3431:
 25128              	.LBE3430:
4605:src/xeq.c     **** 
 25129              		.loc 1 4605 3 is_stmt 1 view .LVU6544
 25130              	.LVL1949:
4608:src/xeq.c     **** 			bad_mode_error();
 25131              		.loc 1 4608 3 view .LVU6545
 25132              	.LBB3433:
 25133              	.LBI3430:
4501:src/xeq.c     **** {
 25134              		.loc 1 4501 24 view .LVU6546
 25135              	.LBB3432:
4503:src/xeq.c     **** 	if (xp < xrom)
 25136              		.loc 1 4503 2 view .LVU6547
4504:src/xeq.c     **** 		return NULL;
 25137              		.loc 1 4504 2 view .LVU6548
4504:src/xeq.c     **** 		return NULL;
 25138              		.loc 1 4504 5 is_stmt 0 view .LVU6549
 25139 0040 11D3     		bcc	.L1804
4508:src/xeq.c     **** 		return NULL;
 25140              		.loc 1 4508 2 is_stmt 1 view .LVU6550
4508:src/xeq.c     **** 		return NULL;
 25141              		.loc 1 4508 17 is_stmt 0 view .LVU6551
 25142 0042 2249     		ldr	r1, .L1820+12
 25143              	.LVL1950:
4508:src/xeq.c     **** 		return NULL;
 25144              		.loc 1 4508 17 view .LVU6552
 25145 0044 0988     		ldrh	r1, [r1]
 25146 0046 03EB4103 		add	r3, r3, r1, lsl #1
4508:src/xeq.c     **** 		return NULL;
 25147              		.loc 1 4508 5 view .LVU6553
 25148 004a 9A42     		cmp	r2, r3
 25149 004c 0BD2     		bcs	.L1804
 25150              	.LVL1951:
4508:src/xeq.c     **** 		return NULL;
 25151              		.loc 1 4508 5 view .LVU6554
 25152              	.LBE3432:
 25153              	.LBE3433:
4608:src/xeq.c     **** 			bad_mode_error();
 25154              		.loc 1 4608 6 view .LVU6555
 25155 004e 52B1     		cbz	r2, .L1804
 25156              	.LVL1952:
 25157              	.L1805:
4608:src/xeq.c     **** 			bad_mode_error();
 25158              		.loc 1 4608 6 view .LVU6556
ARM GAS  /tmp/ccqED0AM.s 			page 650


 25159              	.LBE3429:
4603:src/xeq.c     **** 	else {
 25160              		.loc 1 4603 3 is_stmt 1 view .LVU6557
 25161              	.LBB3442:
 25162              	.LBI3442:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 25163              		.loc 1 575 6 view .LVU6558
 25164              	.LBE3442:
 576:src/xeq.c     **** }
 25165              		.loc 1 576 2 view .LVU6559
 25166              	.LBB3451:
 25167              	.LBB3443:
 25168              	.LBI3443:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25169              		.loc 1 546 5 view .LVU6560
 25170              	.LBB3444:
 547:src/xeq.c     **** 		Error = e;
 25171              		.loc 1 547 2 view .LVU6561
 547:src/xeq.c     **** 		Error = e;
 25172              		.loc 1 547 12 is_stmt 0 view .LVU6562
 25173 0050 1F4B     		ldr	r3, .L1820+16
 547:src/xeq.c     **** 		Error = e;
 25174              		.loc 1 547 5 view .LVU6563
 25175 0052 1A68     		ldr	r2, [r3]
 25176 0054 22B1     		cbz	r2, .L1802
 25177              	.LVL1953:
 25178              	.L1817:
 25179              	.LBB3445:
 25180              	.LBB3446:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 25181              		.loc 1 549 3 is_stmt 1 view .LVU6564
 25182              	.LBE3446:
 25183              	.LBE3445:
 25184              	.LBE3444:
 25185              	.LBE3443:
 25186              	.LBE3451:
4622:src/xeq.c     **** }
 25187              		.loc 1 4622 9 is_stmt 0 view .LVU6565
 25188 0056 0020     		movs	r0, #0
 25189 0058 0146     		mov	r1, r0
4623:src/xeq.c     **** 
 25190              		.loc 1 4623 1 view .LVU6566
 25191 005a 1EB0     		add	sp, sp, #120
 25192              		.cfi_remember_state
 25193              		.cfi_def_cfa_offset 24
 25194              		@ sp needed
 25195 005c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25196              	.LVL1954:
 25197              	.L1802:
 25198              		.cfi_restore_state
 25199              	.LBB3452:
 25200              	.LBB3450:
 25201              	.LBB3449:
 25202              	.LBB3448:
 25203              	.LBI3445:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25204              		.loc 1 546 5 is_stmt 1 view .LVU6567
ARM GAS  /tmp/ccqED0AM.s 			page 651


 25205              	.LBB3447:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25206              		.loc 1 548 3 view .LVU6568
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25207              		.loc 1 548 9 is_stmt 0 view .LVU6569
 25208 0060 0D22     		movs	r2, #13
 25209 0062 1A60     		str	r2, [r3]
 25210 0064 F7E7     		b	.L1817
 25211              	.LVL1955:
 25212              	.L1804:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25213              		.loc 1 548 9 view .LVU6570
 25214              	.LBE3447:
 25215              	.LBE3448:
 25216              	.LBE3449:
 25217              	.LBE3450:
 25218              	.LBE3452:
 25219              	.LBB3453:
4613:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 25220              		.loc 1 4613 4 is_stmt 1 view .LVU6571
 25221 0066 2B46     		mov	r3, r5
 25222 0068 3246     		mov	r2, r6
 25223 006a 03A8     		add	r0, sp, #12
 25224              	.LVL1956:
4613:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 25225              		.loc 1 4613 4 is_stmt 0 view .LVU6572
 25226 006c FFF7FEFF 		bl	ullint_to_dn
 25227              	.LVL1957:
4613:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 25228              		.loc 1 4613 27 is_stmt 1 view .LVU6573
4613:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 25229              		.loc 1 4613 30 is_stmt 0 view .LVU6574
 25230 0070 019B     		ldr	r3, [sp, #4]
 25231 0072 03BB     		cbnz	r3, .L1818
 25232              	.L1806:
4614:src/xeq.c     **** 
 25233              		.loc 1 4614 4 is_stmt 1 view .LVU6575
 25234 0074 4346     		mov	r3, r8
 25235 0076 3A46     		mov	r2, r7
 25236 0078 0CA8     		add	r0, sp, #48
 25237 007a FFF7FEFF 		bl	ullint_to_dn
 25238              	.LVL1958:
4614:src/xeq.c     **** 
 25239              		.loc 1 4614 27 view .LVU6576
4614:src/xeq.c     **** 
 25240              		.loc 1 4614 30 is_stmt 0 view .LVU6577
 25241 007e 029B     		ldr	r3, [sp, #8]
 25242 0080 A3B9     		cbnz	r3, .L1819
 25243              	.L1807:
4616:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 25244              		.loc 1 4616 4 is_stmt 1 view .LVU6578
4616:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 25245              		.loc 1 4616 16 is_stmt 0 view .LVU6579
 25246 0082 03AA     		add	r2, sp, #12
 25247 0084 0CA9     		add	r1, sp, #48
 25248 0086 15A8     		add	r0, sp, #84
 25249 0088 A047     		blx	r4
ARM GAS  /tmp/ccqED0AM.s 			page 652


 25250              	.LVL1959:
4616:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 25251              		.loc 1 4616 7 view .LVU6580
 25252 008a 48B9     		cbnz	r0, .L1808
4617:src/xeq.c     **** 			else
 25253              		.loc 1 4617 5 is_stmt 1 view .LVU6581
 25254              	.LVL1960:
 25255              	.LBB3434:
 25256              	.LBI3434:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25257              		.loc 1 546 5 view .LVU6582
 25258              	.LBB3435:
 547:src/xeq.c     **** 		Error = e;
 25259              		.loc 1 547 2 view .LVU6583
 547:src/xeq.c     **** 		Error = e;
 25260              		.loc 1 547 12 is_stmt 0 view .LVU6584
 25261 008c 104B     		ldr	r3, .L1820+16
 547:src/xeq.c     **** 		Error = e;
 25262              		.loc 1 547 5 view .LVU6585
 25263 008e 1A68     		ldr	r2, [r3]
 25264 0090 002A     		cmp	r2, #0
 25265 0092 E0D1     		bne	.L1817
 25266              	.LVL1961:
 25267              	.LBB3436:
 25268              	.LBI3436:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25269              		.loc 1 546 5 is_stmt 1 view .LVU6586
 25270              	.LBB3437:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25271              		.loc 1 548 3 view .LVU6587
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25272              		.loc 1 548 9 is_stmt 0 view .LVU6588
 25273 0094 0122     		movs	r2, #1
 25274              	.LBE3437:
 25275              	.LBE3436:
 25276              	.LBE3435:
 25277              	.LBE3434:
 25278              	.LBE3453:
4622:src/xeq.c     **** }
 25279              		.loc 1 4622 9 view .LVU6589
 25280 0096 0146     		mov	r1, r0
 25281              	.LBB3454:
 25282              	.LBB3441:
 25283              	.LBB3440:
 25284              	.LBB3439:
 25285              	.LBB3438:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25286              		.loc 1 548 9 view .LVU6590
 25287 0098 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 25288              		.loc 1 549 3 is_stmt 1 view .LVU6591
 25289              	.LBE3438:
 25290              	.LBE3439:
 25291              	.LBE3440:
 25292              	.LBE3441:
 25293              	.LBE3454:
4623:src/xeq.c     **** 
ARM GAS  /tmp/ccqED0AM.s 			page 653


 25294              		.loc 1 4623 1 is_stmt 0 view .LVU6592
 25295 009a 1EB0     		add	sp, sp, #120
 25296              		.cfi_remember_state
 25297              		.cfi_def_cfa_offset 24
 25298              		@ sp needed
 25299 009c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25300              	.LVL1962:
 25301              	.L1808:
 25302              		.cfi_restore_state
 25303              	.LBB3455:
4619:src/xeq.c     **** 		}
 25304              		.loc 1 4619 5 is_stmt 1 view .LVU6593
4619:src/xeq.c     **** 		}
 25305              		.loc 1 4619 12 is_stmt 0 view .LVU6594
 25306 00a0 15A8     		add	r0, sp, #84
 25307 00a2 FFF7FEFF 		bl	intResult
 25308              	.LVL1963:
 25309              	.LBE3455:
4623:src/xeq.c     **** 
 25310              		.loc 1 4623 1 view .LVU6595
 25311 00a6 1EB0     		add	sp, sp, #120
 25312              		.cfi_remember_state
 25313              		.cfi_def_cfa_offset 24
 25314              		@ sp needed
 25315 00a8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25316              	.LVL1964:
 25317              	.L1819:
 25318              		.cfi_restore_state
 25319              	.LBB3456:
4614:src/xeq.c     **** 
 25320              		.loc 1 4614 35 is_stmt 1 discriminator 1 view .LVU6596
 25321 00ac 0CA9     		add	r1, sp, #48
 25322 00ae 0846     		mov	r0, r1
 25323 00b0 FFF7FEFF 		bl	dn_minus
 25324              	.LVL1965:
 25325 00b4 E5E7     		b	.L1807
 25326              	.L1818:
4613:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 25327              		.loc 1 4613 35 discriminator 1 view .LVU6597
 25328 00b6 03A9     		add	r1, sp, #12
 25329 00b8 0846     		mov	r0, r1
 25330 00ba FFF7FEFF 		bl	dn_minus
 25331              	.LVL1966:
 25332 00be D9E7     		b	.L1806
 25333              	.L1821:
 25334              		.align	2
 25335              	.L1820:
 25336 00c0 00000000 		.word	XeqOpCode
 25337 00c4 00000000 		.word	dyfuncs
 25338 00c8 00000000 		.word	xrom
 25339 00cc 00000000 		.word	xrom_size
 25340 00d0 00000000 		.word	Error
 25341              	.LBE3456:
 25342              		.cfi_endproc
 25343              	.LFE241:
 25345              		.section	.text.xeq_init_contexts,"ax",%progbits
 25346              		.align	1
ARM GAS  /tmp/ccqED0AM.s 			page 654


 25347              		.p2align 2,,3
 25348              		.global	xeq_init_contexts
 25349              		.syntax unified
 25350              		.thumb
 25351              		.thumb_func
 25352              		.fpu fpv4-sp-d16
 25354              	xeq_init_contexts:
 25355              	.LFB258:
5629:src/xeq.c     **** 	/*
 25356              		.loc 1 5629 30 view -0
 25357              		.cfi_startproc
 25358              		@ args = 0, pretend = 0, frame = 0
 25359              		@ frame_needed = 0, uses_anonymous_args = 0
5633:src/xeq.c     **** 	SizeStatRegs = State.have_stats ? sizeof(STAT_DATA) >> 1 : 0;	// in 16 bit words!
 25360              		.loc 1 5633 2 view .LVU6599
5634:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25361              		.loc 1 5634 2 view .LVU6600
5629:src/xeq.c     **** 	/*
 25362              		.loc 1 5629 30 is_stmt 0 view .LVU6601
 25363 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 25364              		.cfi_def_cfa_offset 24
 25365              		.cfi_offset 3, -24
 25366              		.cfi_offset 4, -20
 25367              		.cfi_offset 5, -16
 25368              		.cfi_offset 6, -12
 25369              		.cfi_offset 7, -8
 25370              		.cfi_offset 14, -4
5634:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25371              		.loc 1 5634 17 view .LVU6602
 25372 0002 1D4B     		ldr	r3, .L1827
5637:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 25373              		.loc 1 5637 13 view .LVU6603
 25374 0004 1D4F     		ldr	r7, .L1827+4
5634:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25375              		.loc 1 5634 17 view .LVU6604
 25376 0006 1A68     		ldr	r2, [r3]
5634:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25377              		.loc 1 5634 34 view .LVU6605
 25378 0008 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
5635:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 25379              		.loc 1 5635 21 view .LVU6606
 25380 000c 92F8CF17 		ldrb	r1, [r2, #1999]	@ zero_extendqisi2
5637:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 25381              		.loc 1 5637 36 view .LVU6607
 25382 0010 5088     		ldrh	r0, [r2, #2]
5639:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25383              		.loc 1 5639 34 view .LVU6608
 25384 0012 B2F9E247 		ldrsh	r4, [r2, #2018]
5634:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25385              		.loc 1 5634 59 view .LVU6609
 25386 0016 13F02003 		ands	r3, r3, #32
 25387 001a 18BF     		it	ne
 25388 001c 4623     		movne	r3, #70
5635:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 25389              		.loc 1 5635 19 view .LVU6610
 25390 001e C1F16401 		rsb	r1, r1, #100
5634:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
ARM GAS  /tmp/ccqED0AM.s 			page 655


 25391              		.loc 1 5634 59 view .LVU6611
 25392 0022 1E46     		mov	r6, r3
5635:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 25393              		.loc 1 5635 36 view .LVU6612
 25394 0024 C3EB8103 		rsb	r3, r3, r1, lsl #2
5638:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
 25395              		.loc 1 5638 31 view .LVU6613
 25396 0028 03F20E21 		addw	r1, r3, #526
 25397 002c 89B2     		uxth	r1, r1
5639:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25398              		.loc 1 5639 21 view .LVU6614
 25399 002e 0D1A     		subs	r5, r1, r0
5636:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25400              		.loc 1 5636 22 view .LVU6615
 25401 0030 03F50573 		add	r3, r3, #532
5637:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 25402              		.loc 1 5637 34 view .LVU6616
 25403 0034 181A     		subs	r0, r3, r0
5639:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25404              		.loc 1 5639 32 view .LVU6617
 25405 0036 2544     		add	r5, r5, r4
5636:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25406              		.loc 1 5636 11 view .LVU6618
 25407 0038 141D     		adds	r4, r2, #4
5637:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 25408              		.loc 1 5637 13 view .LVU6619
 25409 003a 3860     		str	r0, [r7]
5636:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25410              		.loc 1 5636 22 view .LVU6620
 25411 003c 04EB4303 		add	r3, r4, r3, lsl #1
5634:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25412              		.loc 1 5634 15 view .LVU6621
 25413 0040 0F48     		ldr	r0, .L1827+8
5636:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25414              		.loc 1 5636 9 view .LVU6622
 25415 0042 104C     		ldr	r4, .L1827+12
5639:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25416              		.loc 1 5639 11 view .LVU6623
 25417 0044 104F     		ldr	r7, .L1827+16
5636:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25418              		.loc 1 5636 9 view .LVU6624
 25419 0046 2360     		str	r3, [r4]
5634:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25420              		.loc 1 5634 15 view .LVU6625
 25421 0048 0660     		str	r6, [r0]
5635:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 25422              		.loc 1 5635 2 is_stmt 1 view .LVU6626
 25423              	.LVL1967:
5636:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25424              		.loc 1 5636 2 view .LVU6627
5637:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 25425              		.loc 1 5637 2 view .LVU6628
5638:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
 25426              		.loc 1 5638 2 view .LVU6629
5638:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
 25427              		.loc 1 5638 10 is_stmt 0 view .LVU6630
 25428 004a 1180     		strh	r1, [r2]	@ movhi
ARM GAS  /tmp/ccqED0AM.s 			page 656


5639:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25429              		.loc 1 5639 2 is_stmt 1 view .LVU6631
5640:src/xeq.c     **** 
 25430              		.loc 1 5640 14 is_stmt 0 view .LVU6632
 25431 004c 6420     		movs	r0, #100
5639:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25432              		.loc 1 5639 11 view .LVU6633
 25433 004e 3D60     		str	r5, [r7]
5640:src/xeq.c     **** 
 25434              		.loc 1 5640 2 is_stmt 1 view .LVU6634
5640:src/xeq.c     **** 
 25435              		.loc 1 5640 14 is_stmt 0 view .LVU6635
 25436 0050 FFF7FEFF 		bl	get_reg_n
 25437              	.LVL1968:
5646:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
 25438              		.loc 1 5646 2 view .LVU6636
 25439 0054 0D4C     		ldr	r4, .L1827+20
5640:src/xeq.c     **** 
 25440              		.loc 1 5640 12 view .LVU6637
 25441 0056 0E4B     		ldr	r3, .L1827+24
5640:src/xeq.c     **** 
 25442              		.loc 1 5640 14 view .LVU6638
 25443 0058 0246     		mov	r2, r0
5646:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
 25444              		.loc 1 5646 2 view .LVU6639
 25445 005a 0021     		movs	r1, #0
 25446 005c 2046     		mov	r0, r4
5640:src/xeq.c     **** 
 25447              		.loc 1 5640 12 view .LVU6640
 25448 005e 1A60     		str	r2, [r3]
5646:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
 25449              		.loc 1 5646 2 is_stmt 1 view .LVU6641
 25450 0060 FFF7FEFF 		bl	decContextDefault
 25451              	.LVL1969:
5647:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
 25452              		.loc 1 5647 2 view .LVU6642
5647:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
 25453              		.loc 1 5647 13 is_stmt 0 view .LVU6643
 25454 0064 2723     		movs	r3, #39
5648:src/xeq.c     **** 	Ctx.emin=-DEC_MAX_MATH;
 25455              		.loc 1 5648 10 view .LVU6644
 25456 0066 0B49     		ldr	r1, .L1827+28
5649:src/xeq.c     **** 	Ctx.round = DEC_ROUND_HALF_EVEN;
 25457              		.loc 1 5649 10 view .LVU6645
 25458 0068 0B4A     		ldr	r2, .L1827+32
5647:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
 25459              		.loc 1 5647 13 view .LVU6646
 25460 006a 2360     		str	r3, [r4]
5648:src/xeq.c     **** 	Ctx.emin=-DEC_MAX_MATH;
 25461              		.loc 1 5648 2 is_stmt 1 view .LVU6647
5650:src/xeq.c     **** }
 25462              		.loc 1 5650 12 is_stmt 0 view .LVU6648
 25463 006c 0323     		movs	r3, #3
 25464 006e 2373     		strb	r3, [r4, #12]
5649:src/xeq.c     **** 	Ctx.round = DEC_ROUND_HALF_EVEN;
 25465              		.loc 1 5649 10 view .LVU6649
 25466 0070 C4E90112 		strd	r1, r2, [r4, #4]
ARM GAS  /tmp/ccqED0AM.s 			page 657


5650:src/xeq.c     **** }
 25467              		.loc 1 5650 2 is_stmt 1 view .LVU6650
5651:src/xeq.c     **** 
 25468              		.loc 1 5651 1 is_stmt 0 view .LVU6651
 25469 0074 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 25470              	.L1828:
 25471 0076 00BF     		.align	2
 25472              	.L1827:
 25473 0078 00000000 		.word	main_ram
 25474 007c 00000000 		.word	RetStkSize
 25475 0080 00000000 		.word	SizeStatRegs
 25476 0084 00000000 		.word	RetStk
 25477 0088 00000000 		.word	ProgFree
 25478 008c 00000000 		.word	Ctx
 25479 0090 00000000 		.word	StackBase
 25480 0094 3F420F00 		.word	999999
 25481 0098 C1BDF0FF 		.word	-999999
 25482              		.cfi_endproc
 25483              	.LFE258:
 25485              		.section	.text.not_running,"ax",%progbits
 25486              		.align	1
 25487              		.p2align 2,,3
 25488              		.global	not_running
 25489              		.syntax unified
 25490              		.thumb
 25491              		.thumb_func
 25492              		.fpu fpv4-sp-d16
 25494              	not_running:
 25495              	.LFB259:
5799:src/xeq.c     **** 	if ( Running ) {
 25496              		.loc 1 5799 23 is_stmt 1 view -0
 25497              		.cfi_startproc
 25498              		@ args = 0, pretend = 0, frame = 0
 25499              		@ frame_needed = 0, uses_anonymous_args = 0
 25500              		@ link register save eliminated.
5800:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 25501              		.loc 1 5800 2 view .LVU6653
5800:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 25502              		.loc 1 5800 7 is_stmt 0 view .LVU6654
 25503 0000 064B     		ldr	r3, .L1834
5800:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 25504              		.loc 1 5800 5 view .LVU6655
 25505 0002 1B68     		ldr	r3, [r3]
 25506 0004 0BB9     		cbnz	r3, .L1833
5804:src/xeq.c     **** }
 25507              		.loc 1 5804 9 view .LVU6656
 25508 0006 0120     		movs	r0, #1
 25509 0008 7047     		bx	lr
 25510              	.L1833:
5801:src/xeq.c     **** 		return 0;
 25511              		.loc 1 5801 3 is_stmt 1 view .LVU6657
 25512              	.LVL1970:
 25513              	.LBB3461:
 25514              	.LBI3461:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25515              		.loc 1 546 5 view .LVU6658
 25516              	.LBB3462:
ARM GAS  /tmp/ccqED0AM.s 			page 658


 547:src/xeq.c     **** 		Error = e;
 25517              		.loc 1 547 2 view .LVU6659
 547:src/xeq.c     **** 		Error = e;
 25518              		.loc 1 547 12 is_stmt 0 view .LVU6660
 25519 000a 054B     		ldr	r3, .L1834+4
 25520 000c 1868     		ldr	r0, [r3]
 547:src/xeq.c     **** 		Error = e;
 25521              		.loc 1 547 5 view .LVU6661
 25522 000e 10B9     		cbnz	r0, .L1832
 25523              	.LVL1971:
 25524              	.LBB3463:
 25525              	.LBI3463:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25526              		.loc 1 546 5 is_stmt 1 view .LVU6662
 25527              	.LBB3464:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25528              		.loc 1 548 3 view .LVU6663
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25529              		.loc 1 548 9 is_stmt 0 view .LVU6664
 25530 0010 0722     		movs	r2, #7
 25531 0012 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 25532              		.loc 1 549 3 is_stmt 1 view .LVU6665
 25533 0014 7047     		bx	lr
 25534              	.LVL1972:
 25535              	.L1832:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 25536              		.loc 1 549 3 is_stmt 0 view .LVU6666
 25537              	.LBE3464:
 25538              	.LBE3463:
 25539              	.LBE3462:
 25540              	.LBE3461:
5802:src/xeq.c     **** 	}
 25541              		.loc 1 5802 10 view .LVU6667
 25542 0016 0020     		movs	r0, #0
 25543              	.LVL1973:
5805:src/xeq.c     **** 
 25544              		.loc 1 5805 1 view .LVU6668
 25545 0018 7047     		bx	lr
 25546              	.L1835:
 25547 001a 00BF     		.align	2
 25548              	.L1834:
 25549 001c 00000000 		.word	Running
 25550 0020 00000000 		.word	Error
 25551              		.cfi_endproc
 25552              	.LFE259:
 25554              		.section	.text.set_running_off_sst,"ax",%progbits
 25555              		.align	1
 25556              		.p2align 2,,3
 25557              		.global	set_running_off_sst
 25558              		.syntax unified
 25559              		.thumb
 25560              		.thumb_func
 25561              		.fpu fpv4-sp-d16
 25563              	set_running_off_sst:
 25564              	.LFB260:
5810:src/xeq.c     **** 	Running = 0;
ARM GAS  /tmp/ccqED0AM.s 			page 659


 25565              		.loc 1 5810 28 is_stmt 1 view -0
 25566              		.cfi_startproc
 25567              		@ args = 0, pretend = 0, frame = 0
 25568              		@ frame_needed = 0, uses_anonymous_args = 0
 25569              		@ link register save eliminated.
5811:src/xeq.c     **** }
 25570              		.loc 1 5811 2 view .LVU6670
5811:src/xeq.c     **** }
 25571              		.loc 1 5811 10 is_stmt 0 view .LVU6671
 25572 0000 014B     		ldr	r3, .L1837
 25573 0002 0022     		movs	r2, #0
 25574 0004 1A60     		str	r2, [r3]
5812:src/xeq.c     **** 
 25575              		.loc 1 5812 1 view .LVU6672
 25576 0006 7047     		bx	lr
 25577              	.L1838:
 25578              		.align	2
 25579              	.L1837:
 25580 0008 00000000 		.word	Running
 25581              		.cfi_endproc
 25582              	.LFE260:
 25584              		.section	.text.set_running_on_sst,"ax",%progbits
 25585              		.align	1
 25586              		.p2align 2,,3
 25587              		.global	set_running_on_sst
 25588              		.syntax unified
 25589              		.thumb
 25590              		.thumb_func
 25591              		.fpu fpv4-sp-d16
 25593              	set_running_on_sst:
 25594              	.LFB261:
5814:src/xeq.c     **** 	Running = 1;
 25595              		.loc 1 5814 27 is_stmt 1 view -0
 25596              		.cfi_startproc
 25597              		@ args = 0, pretend = 0, frame = 0
 25598              		@ frame_needed = 0, uses_anonymous_args = 0
 25599              		@ link register save eliminated.
5815:src/xeq.c     **** }
 25600              		.loc 1 5815 2 view .LVU6674
5815:src/xeq.c     **** }
 25601              		.loc 1 5815 10 is_stmt 0 view .LVU6675
 25602 0000 014B     		ldr	r3, .L1840
 25603 0002 0122     		movs	r2, #1
 25604 0004 1A60     		str	r2, [r3]
5816:src/xeq.c     **** 
 25605              		.loc 1 5816 1 view .LVU6676
 25606 0006 7047     		bx	lr
 25607              	.L1841:
 25608              		.align	2
 25609              	.L1840:
 25610 0008 00000000 		.word	Running
 25611              		.cfi_endproc
 25612              	.LFE261:
 25614              		.section	.text.set_running_off,"ax",%progbits
 25615              		.align	1
 25616              		.p2align 2,,3
 25617              		.global	set_running_off
ARM GAS  /tmp/ccqED0AM.s 			page 660


 25618              		.syntax unified
 25619              		.thumb
 25620              		.thumb_func
 25621              		.fpu fpv4-sp-d16
 25623              	set_running_off:
 25624              	.LFB262:
5818:src/xeq.c     **** 	set_running_off_sst();
 25625              		.loc 1 5818 24 is_stmt 1 view -0
 25626              		.cfi_startproc
 25627              		@ args = 0, pretend = 0, frame = 0
 25628              		@ frame_needed = 0, uses_anonymous_args = 0
 25629              		@ link register save eliminated.
5819:src/xeq.c     **** 	State.entryp = 0;
 25630              		.loc 1 5819 2 view .LVU6678
 25631              	.LBB3465:
 25632              	.LBI3465:
5810:src/xeq.c     **** 	Running = 0;
 25633              		.loc 1 5810 6 view .LVU6679
 25634              	.LBB3466:
5811:src/xeq.c     **** }
 25635              		.loc 1 5811 2 view .LVU6680
 25636              	.LBE3466:
 25637              	.LBE3465:
5820:src/xeq.c     **** 	dot( RCL_annun, 0);
 25638              		.loc 1 5820 15 is_stmt 0 view .LVU6681
 25639 0000 064B     		ldr	r3, .L1843
 25640              	.LBB3469:
 25641              	.LBB3467:
5811:src/xeq.c     **** }
 25642              		.loc 1 5811 10 view .LVU6682
 25643 0002 074A     		ldr	r2, .L1843+4
 25644              	.LBE3467:
 25645              	.LBE3469:
5820:src/xeq.c     **** 	dot( RCL_annun, 0);
 25646              		.loc 1 5820 15 view .LVU6683
 25647 0004 1B68     		ldr	r3, [r3]
 25648              	.LBB3470:
 25649              	.LBB3468:
5811:src/xeq.c     **** }
 25650              		.loc 1 5811 10 view .LVU6684
 25651 0006 0021     		movs	r1, #0
 25652 0008 1160     		str	r1, [r2]
 25653              	.LBE3468:
 25654              	.LBE3470:
5820:src/xeq.c     **** 	dot( RCL_annun, 0);
 25655              		.loc 1 5820 2 is_stmt 1 view .LVU6685
5820:src/xeq.c     **** 	dot( RCL_annun, 0);
 25656              		.loc 1 5820 15 is_stmt 0 view .LVU6686
 25657 000a 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 25658 000e 61F30412 		bfi	r2, r1, #4, #1
 25659 0012 83F8DD27 		strb	r2, [r3, #2013]
 25660              		.loc 1 5821 2 is_stmt 1 view .LVU6687
 25661 0016 8A20     		movs	r0, #138
 25662 0018 FFF7FEBF 		b	dot
 25663              	.LVL1974:
 25664              	.L1844:
 25665              		.align	2
ARM GAS  /tmp/ccqED0AM.s 			page 661


 25666              	.L1843:
 25667 001c 00000000 		.word	main_ram
 25668 0020 00000000 		.word	Running
 25669              		.cfi_endproc
 25670              	.LFE262:
 25672              		.section	.text.set_running_on,"ax",%progbits
 25673              		.align	1
 25674              		.p2align 2,,3
 25675              		.global	set_running_on
 25676              		.syntax unified
 25677              		.thumb
 25678              		.thumb_func
 25679              		.fpu fpv4-sp-d16
 25681              	set_running_on:
 25682              	.LFB263:
5822:src/xeq.c     **** }
5823:src/xeq.c     **** 
5824:src/xeq.c     **** void set_running_on() {
 25683              		.loc 1 5824 23 view -0
 25684              		.cfi_startproc
 25685              		@ args = 0, pretend = 0, frame = 0
 25686              		@ frame_needed = 0, uses_anonymous_args = 0
5825:src/xeq.c     **** 	update_speed(0);
 25687              		.loc 1 5825 17 view .LVU6689
5826:src/xeq.c     **** 	GoFast = 1;
 25688              		.loc 1 5826 2 view .LVU6690
5824:src/xeq.c     **** 	update_speed(0);
 25689              		.loc 1 5824 23 is_stmt 0 view .LVU6691
 25690 0000 38B5     		push	{r3, r4, r5, lr}
 25691              		.cfi_def_cfa_offset 16
 25692              		.cfi_offset 3, -16
 25693              		.cfi_offset 4, -12
 25694              		.cfi_offset 5, -8
 25695              		.cfi_offset 14, -4
 25696              	.LBB3471:
 25697              	.LBB3472:
 186:src/xeq.c     **** }
 25698              		.loc 1 186 9 view .LVU6692
 25699 0002 0C4B     		ldr	r3, .L1851
 25700              	.LBE3472:
 25701              	.LBE3471:
 25702              		.loc 1 5826 9 view .LVU6693
 25703 0004 0C4D     		ldr	r5, .L1851+4
 25704              	.LBB3476:
 25705              	.LBB3473:
 186:src/xeq.c     **** }
 25706              		.loc 1 186 9 view .LVU6694
 25707 0006 1B68     		ldr	r3, [r3]
 25708              	.LBE3473:
 25709              	.LBE3476:
 25710              	.LBB3477:
 25711              	.LBB3478:
5815:src/xeq.c     **** }
 25712              		.loc 1 5815 10 view .LVU6695
 25713 0008 0C4C     		ldr	r4, .L1851+8
 25714              	.LBE3478:
 25715              	.LBE3477:
ARM GAS  /tmp/ccqED0AM.s 			page 662


 25716              	.LBB3480:
 25717              	.LBB3474:
 186:src/xeq.c     **** }
 25718              		.loc 1 186 9 view .LVU6696
 25719 000a B3F8E037 		ldrh	r3, [r3, #2016]
 25720              	.LBE3474:
 25721              	.LBE3480:
5827:src/xeq.c     **** 	set_running_on_sst();
5828:src/xeq.c     **** 	LastKey = 0;
 25722              		.loc 1 5828 10 view .LVU6697
 25723 000e 0C49     		ldr	r1, .L1851+12
5829:src/xeq.c     **** 	if (!is_xrom())
 25724              		.loc 1 5829 5 view .LVU6698
 25725 0010 9B0B     		lsrs	r3, r3, #14
5826:src/xeq.c     **** 	set_running_on_sst();
 25726              		.loc 1 5826 9 view .LVU6699
 25727 0012 0122     		movs	r2, #1
5828:src/xeq.c     **** 	if (!is_xrom())
 25728              		.loc 1 5828 10 view .LVU6700
 25729 0014 0020     		movs	r0, #0
 25730              		.loc 1 5829 5 view .LVU6701
 25731 0016 032B     		cmp	r3, #3
5826:src/xeq.c     **** 	set_running_on_sst();
 25732              		.loc 1 5826 9 view .LVU6702
 25733 0018 2A60     		str	r2, [r5]
5827:src/xeq.c     **** 	LastKey = 0;
 25734              		.loc 1 5827 2 is_stmt 1 view .LVU6703
 25735              	.LBB3481:
 25736              	.LBI3477:
5814:src/xeq.c     **** 	Running = 1;
 25737              		.loc 1 5814 6 view .LVU6704
 25738              	.LBB3479:
5815:src/xeq.c     **** }
 25739              		.loc 1 5815 2 view .LVU6705
5815:src/xeq.c     **** }
 25740              		.loc 1 5815 10 is_stmt 0 view .LVU6706
 25741 001a 2260     		str	r2, [r4]
 25742              	.LBE3479:
 25743              	.LBE3481:
5828:src/xeq.c     **** 	if (!is_xrom())
 25744              		.loc 1 5828 2 is_stmt 1 view .LVU6707
5828:src/xeq.c     **** 	if (!is_xrom())
 25745              		.loc 1 5828 10 is_stmt 0 view .LVU6708
 25746 001c C874     		strb	r0, [r1, #19]
 25747              		.loc 1 5829 2 is_stmt 1 view .LVU6709
 25748              	.LBB3482:
 25749              	.LBI3471:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 25750              		.loc 1 185 5 view .LVU6710
 25751              	.LBB3475:
 186:src/xeq.c     **** }
 25752              		.loc 1 186 2 view .LVU6711
 25753              	.LBE3475:
 25754              	.LBE3482:
 25755              		.loc 1 5829 5 is_stmt 0 view .LVU6712
 25756 001e 01D0     		beq	.L1846
5830:src/xeq.c     **** 		error_message(ERR_NONE);
ARM GAS  /tmp/ccqED0AM.s 			page 663


 25757              		.loc 1 5830 3 is_stmt 1 view .LVU6713
 25758 0020 FFF7FEFF 		bl	error_message
 25759              	.LVL1975:
 25760              	.L1846:
5831:src/xeq.c     **** 	dot(BEG, 0);
 25761              		.loc 1 5831 2 view .LVU6714
 25762 0024 0021     		movs	r1, #0
 25763 0026 8820     		movs	r0, #136
 25764 0028 FFF7FEFF 		bl	dot
 25765              	.LVL1976:
5832:src/xeq.c     **** 	finish_display(); // BEG
 25766              		.loc 1 5832 2 view .LVU6715
5833:src/xeq.c     **** }
 25767              		.loc 1 5833 1 is_stmt 0 view .LVU6716
 25768 002c BDE83840 		pop	{r3, r4, r5, lr}
 25769              		.cfi_restore 14
 25770              		.cfi_restore 5
 25771              		.cfi_restore 4
 25772              		.cfi_restore 3
 25773              		.cfi_def_cfa_offset 0
5832:src/xeq.c     **** 	finish_display(); // BEG
 25774              		.loc 1 5832 2 view .LVU6717
 25775 0030 FFF7FEBF 		b	finish_display
 25776              	.LVL1977:
 25777              	.L1852:
 25778              		.align	2
 25779              	.L1851:
 25780 0034 00000000 		.word	main_ram
 25781 0038 00000000 		.word	GoFast
 25782 003c 00000000 		.word	Running
 25783 0040 00000000 		.word	StateWhileOn
 25784              		.cfi_endproc
 25785              	.LFE263:
 25787              		.section	.text.gsbgto,"ax",%progbits
 25788              		.align	1
 25789              		.p2align 2,,3
 25790              		.syntax unified
 25791              		.thumb
 25792              		.thumb_func
 25793              		.fpu fpv4-sp-d16
 25795              	gsbgto:
 25796              	.LVL1978:
 25797              	.LFB153:
2222:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 25798              		.loc 1 2222 66 is_stmt 1 view -0
 25799              		.cfi_startproc
 25800              		@ args = 0, pretend = 0, frame = 0
 25801              		@ frame_needed = 0, uses_anonymous_args = 0
2223:src/xeq.c     **** 	raw_set_pc(pc);
 25802              		.loc 1 2223 2 view .LVU6719
2222:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 25803              		.loc 1 2222 66 is_stmt 0 view .LVU6720
 25804 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 25805              		.cfi_def_cfa_offset 24
 25806              		.cfi_offset 4, -24
 25807              		.cfi_offset 5, -20
 25808              		.cfi_offset 6, -16
ARM GAS  /tmp/ccqED0AM.s 			page 664


 25809              		.cfi_offset 7, -12
 25810              		.cfi_offset 8, -8
 25811              		.cfi_offset 14, -4
2223:src/xeq.c     **** 	raw_set_pc(pc);
 25812              		.loc 1 2223 39 view .LVU6721
 25813 0004 234F     		ldr	r7, .L1864
 25814 0006 3B68     		ldr	r3, [r7]
2222:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 25815              		.loc 1 2222 66 view .LVU6722
 25816 0008 0446     		mov	r4, r0
 25817 000a 0D46     		mov	r5, r1
 25818              	.LBB3491:
 25819              	.LBB3492:
 283:src/xeq.c     **** 	update_program_bounds(0);
 25820              		.loc 1 283 11 view .LVU6723
 25821 000c A3F8E007 		strh	r0, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 25822              		.loc 1 284 2 view .LVU6724
 25823 0010 0020     		movs	r0, #0
 25824              	.LVL1979:
 284:src/xeq.c     **** }
 25825              		.loc 1 284 2 view .LVU6725
 25826              	.LBE3492:
 25827              	.LBE3491:
2223:src/xeq.c     **** 	raw_set_pc(pc);
 25828              		.loc 1 2223 27 view .LVU6726
 25829 0012 B3F8EC87 		ldrh	r8, [r3, #2028]
 25830              	.LVL1980:
2224:src/xeq.c     **** 	if (gsb) {
 25831              		.loc 1 2224 2 is_stmt 1 view .LVU6727
 25832              	.LBB3495:
 25833              	.LBI3491:
 282:src/xeq.c     **** 	State.pc = pc;
 25834              		.loc 1 282 13 view .LVU6728
 25835              	.LBB3493:
 283:src/xeq.c     **** 	update_program_bounds(0);
 25836              		.loc 1 283 2 view .LVU6729
 284:src/xeq.c     **** }
 25837              		.loc 1 284 2 view .LVU6730
 25838              	.LBE3493:
 25839              	.LBE3495:
2222:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 25840              		.loc 1 2222 66 is_stmt 0 view .LVU6731
 25841 0016 1646     		mov	r6, r2
 25842              	.LBB3496:
 25843              	.LBB3494:
 284:src/xeq.c     **** }
 25844              		.loc 1 284 2 view .LVU6732
 25845 0018 FFF7FEFF 		bl	update_program_bounds
 25846              	.LVL1981:
 284:src/xeq.c     **** }
 25847              		.loc 1 284 2 view .LVU6733
 25848              	.LBE3494:
 25849              	.LBE3496:
2225:src/xeq.c     **** 		if (!Running && !XromRunning) {
 25850              		.loc 1 2225 2 is_stmt 1 view .LVU6734
2225:src/xeq.c     **** 		if (!Running && !XromRunning) {
ARM GAS  /tmp/ccqED0AM.s 			page 665


 25851              		.loc 1 2225 5 is_stmt 0 view .LVU6735
 25852 001c D5B1     		cbz	r5, .L1853
2226:src/xeq.c     **** 			// XEQ or hot key from keyboard
 25853              		.loc 1 2226 3 is_stmt 1 view .LVU6736
2226:src/xeq.c     **** 			// XEQ or hot key from keyboard
 25854              		.loc 1 2226 7 is_stmt 0 view .LVU6737
 25855 001e 1E4B     		ldr	r3, .L1864+4
2226:src/xeq.c     **** 			// XEQ or hot key from keyboard
 25856              		.loc 1 2226 19 view .LVU6738
 25857 0020 1E4A     		ldr	r2, .L1864+8
2226:src/xeq.c     **** 			// XEQ or hot key from keyboard
 25858              		.loc 1 2226 16 view .LVU6739
 25859 0022 1B68     		ldr	r3, [r3]
 25860 0024 1268     		ldr	r2, [r2]
 25861 0026 1343     		orrs	r3, r3, r2
 25862              	.LBB3497:
 25863              	.LBB3498:
1607:src/xeq.c     **** }
 25864              		.loc 1 1607 14 view .LVU6740
 25865 0028 3A68     		ldr	r2, [r7]
 25866              	.LBE3498:
 25867              	.LBE3497:
2226:src/xeq.c     **** 			// XEQ or hot key from keyboard
 25868              		.loc 1 2226 16 view .LVU6741
 25869 002a 1FD0     		beq	.L1856
 25870              	.LVL1982:
 25871              	.L1857:
2234:src/xeq.c     **** 			// Stack is full
 25872              		.loc 1 2234 3 is_stmt 1 view .LVU6742
2234:src/xeq.c     **** 			// Stack is full
 25873              		.loc 1 2234 36 is_stmt 0 view .LVU6743
 25874 002c 1C49     		ldr	r1, .L1864+12
2234:src/xeq.c     **** 			// Stack is full
 25875              		.loc 1 2234 8 view .LVU6744
 25876 002e B2F9E237 		ldrsh	r3, [r2, #2018]
2234:src/xeq.c     **** 			// Stack is full
 25877              		.loc 1 2234 58 view .LVU6745
 25878 0032 91F90110 		ldrsb	r1, [r1, #1]
 25879 0036 0029     		cmp	r1, #0
 25880 0038 A4BF     		itt	ge
 25881 003a 1A49     		ldrge	r1, .L1864+16
 25882 003c 0968     		ldrge	r1, [r1]
2234:src/xeq.c     **** 			// Stack is full
 25883              		.loc 1 2234 7 view .LVU6746
 25884 003e C3F10000 		rsb	r0, r3, #0
2234:src/xeq.c     **** 			// Stack is full
 25885              		.loc 1 2234 58 view .LVU6747
 25886 0042 B8BF     		it	lt
 25887 0044 8821     		movlt	r1, #136
2234:src/xeq.c     **** 			// Stack is full
 25888              		.loc 1 2234 6 view .LVU6748
 25889 0046 8842     		cmp	r0, r1
 25890 0048 06DB     		blt	.L1860
2236:src/xeq.c     **** 			// clrretstk();
 25891              		.loc 1 2236 4 is_stmt 1 view .LVU6749
 25892              	.LVL1983:
 25893              	.LBB3501:
ARM GAS  /tmp/ccqED0AM.s 			page 666


 25894              	.LBI3501:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25895              		.loc 1 546 5 view .LVU6750
 25896              	.LBB3502:
 547:src/xeq.c     **** 		Error = e;
 25897              		.loc 1 547 2 view .LVU6751
 547:src/xeq.c     **** 		Error = e;
 25898              		.loc 1 547 12 is_stmt 0 view .LVU6752
 25899 004a 174B     		ldr	r3, .L1864+20
 547:src/xeq.c     **** 		Error = e;
 25900              		.loc 1 547 5 view .LVU6753
 25901 004c 1A68     		ldr	r2, [r3]
 25902 004e 0AB9     		cbnz	r2, .L1853
 25903              	.LVL1984:
 25904              	.LBB3503:
 25905              	.LBI3503:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25906              		.loc 1 546 5 is_stmt 1 view .LVU6754
 25907              	.LBB3504:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25908              		.loc 1 548 3 view .LVU6755
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25909              		.loc 1 548 9 is_stmt 0 view .LVU6756
 25910 0050 0B22     		movs	r2, #11
 25911 0052 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 25912              		.loc 1 549 3 is_stmt 1 view .LVU6757
 25913              	.LVL1985:
 25914              	.L1853:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 25915              		.loc 1 549 3 is_stmt 0 view .LVU6758
 25916              	.LBE3504:
 25917              	.LBE3503:
 25918              	.LBE3502:
 25919              	.LBE3501:
2244:src/xeq.c     **** 
 25920              		.loc 1 2244 1 view .LVU6759
 25921 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25922              	.LVL1986:
 25923              	.L1860:
2241:src/xeq.c     **** 		}
 25924              		.loc 1 2241 4 is_stmt 1 view .LVU6760
2241:src/xeq.c     **** 		}
 25925              		.loc 1 2241 10 is_stmt 0 view .LVU6761
 25926 0058 1449     		ldr	r1, .L1864+24
2241:src/xeq.c     **** 		}
 25927              		.loc 1 2241 11 view .LVU6762
 25928 005a 013B     		subs	r3, r3, #1
 25929 005c 1BB2     		sxth	r3, r3
2241:src/xeq.c     **** 		}
 25930              		.loc 1 2241 10 view .LVU6763
 25931 005e 0968     		ldr	r1, [r1]
2241:src/xeq.c     **** 		}
 25932              		.loc 1 2241 24 view .LVU6764
 25933 0060 A2F8E237 		strh	r3, [r2, #2018]	@ movhi
 25934 0064 21F81360 		strh	r6, [r1, r3, lsl #1]	@ movhi
2244:src/xeq.c     **** 
ARM GAS  /tmp/ccqED0AM.s 			page 667


 25935              		.loc 1 2244 1 view .LVU6765
 25936 0068 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25937              	.LVL1987:
 25938              	.L1856:
2228:src/xeq.c     **** 			set_running_on();
 25939              		.loc 1 2228 4 is_stmt 1 view .LVU6766
 25940              	.LBB3505:
 25941              	.LBI3497:
1606:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 25942              		.loc 1 1606 6 view .LVU6767
 25943              	.LBB3499:
1607:src/xeq.c     **** }
 25944              		.loc 1 1607 2 view .LVU6768
1607:src/xeq.c     **** }
 25945              		.loc 1 1607 24 is_stmt 0 view .LVU6769
 25946 006c B2F8DE17 		ldrh	r1, [r2, #2014]
1607:src/xeq.c     **** }
 25947              		.loc 1 1607 12 view .LVU6770
 25948 0070 A2F8E237 		strh	r3, [r2, #2018]	@ movhi
 25949              	.LBE3499:
 25950              	.LBE3505:
2229:src/xeq.c     **** 			if (! isXROM(pc) && ProgBegin != old_begin)
 25951              		.loc 1 2229 4 is_stmt 1 view .LVU6771
 25952              	.LBB3506:
 25953              	.LBB3500:
1607:src/xeq.c     **** }
 25954              		.loc 1 1607 24 is_stmt 0 view .LVU6772
 25955 0074 63F34F11 		bfi	r1, r3, #5, #11
 25956 0078 A2F8DE17 		strh	r1, [r2, #2014]	@ movhi
 25957              	.LBE3500:
 25958              	.LBE3506:
2229:src/xeq.c     **** 			if (! isXROM(pc) && ProgBegin != old_begin)
 25959              		.loc 1 2229 4 view .LVU6773
 25960 007c FFF7FEFF 		bl	set_running_on
 25961              	.LVL1988:
2230:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25962              		.loc 1 2230 4 is_stmt 1 view .LVU6774
2230:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25963              		.loc 1 2230 10 is_stmt 0 view .LVU6775
 25964 0080 A30B     		lsrs	r3, r4, #14
2230:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25965              		.loc 1 2230 7 view .LVU6776
 25966 0082 032B     		cmp	r3, #3
2230:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25967              		.loc 1 2230 24 view .LVU6777
 25968 0084 3A68     		ldr	r2, [r7]
2230:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25969              		.loc 1 2230 7 view .LVU6778
 25970 0086 D1D0     		beq	.L1857
2230:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25971              		.loc 1 2230 21 discriminator 1 view .LVU6779
 25972 0088 B2F8EC37 		ldrh	r3, [r2, #2028]
 25973 008c 4345     		cmp	r3, r8
 25974 008e 18BF     		it	ne
 25975 0090 2646     		movne	r6, r4
 25976              	.LVL1989:
2230:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
ARM GAS  /tmp/ccqED0AM.s 			page 668


 25977              		.loc 1 2230 21 discriminator 1 view .LVU6780
 25978 0092 CBE7     		b	.L1857
 25979              	.L1865:
 25980              		.align	2
 25981              	.L1864:
 25982 0094 00000000 		.word	main_ram
 25983 0098 00000000 		.word	Running
 25984 009c 00000000 		.word	XromRunning
 25985 00a0 00000000 		.word	XromParams
 25986 00a4 00000000 		.word	RetStkSize
 25987 00a8 00000000 		.word	Error
 25988 00ac 00000000 		.word	RetStk
 25989              		.cfi_endproc
 25990              	.LFE153:
 25992              		.section	.text.cmdgtocommon,"ax",%progbits
 25993              		.align	1
 25994              		.p2align 2,,3
 25995              		.global	cmdgtocommon
 25996              		.syntax unified
 25997              		.thumb
 25998              		.thumb_func
 25999              		.fpu fpv4-sp-d16
 26001              	cmdgtocommon:
 26002              	.LVL1990:
 26003              	.LFB156:
2284:src/xeq.c     **** 	if (pc == 0)
 26004              		.loc 1 2284 45 is_stmt 1 view -0
 26005              		.cfi_startproc
 26006              		@ args = 0, pretend = 0, frame = 0
 26007              		@ frame_needed = 0, uses_anonymous_args = 0
 26008              		@ link register save eliminated.
2285:src/xeq.c     **** 		set_running_off();
 26009              		.loc 1 2285 2 view .LVU6782
 26010              	.LBB3513:
 26011              	.LBB3514:
 26012              	.LBB3515:
 26013              	.LBB3516:
5820:src/xeq.c     **** 	dot( RCL_annun, 0);
 26014              		.loc 1 5820 15 is_stmt 0 view .LVU6783
 26015 0000 0A4A     		ldr	r2, .L1868
 26016              	.LBE3516:
 26017              	.LBE3515:
 26018              	.LBE3514:
 26019              	.LBE3513:
2285:src/xeq.c     **** 		set_running_off();
 26020              		.loc 1 2285 5 view .LVU6784
 26021 0002 0B46     		mov	r3, r1
 26022 0004 59B9     		cbnz	r1, .L1867
 26023              	.LBB3524:
 26024              	.LBI3513:
2284:src/xeq.c     **** 	if (pc == 0)
 26025              		.loc 1 2284 6 is_stmt 1 view .LVU6785
 26026              	.LVL1991:
 26027              	.LBB3523:
2286:src/xeq.c     **** 	else
 26028              		.loc 1 2286 3 view .LVU6786
 26029              	.LBB3522:
ARM GAS  /tmp/ccqED0AM.s 			page 669


 26030              	.LBI3515:
5818:src/xeq.c     **** 	set_running_off_sst();
 26031              		.loc 1 5818 6 view .LVU6787
 26032              	.LBB3521:
5819:src/xeq.c     **** 	State.entryp = 0;
 26033              		.loc 1 5819 2 view .LVU6788
 26034              	.LBB3517:
 26035              	.LBI3517:
5810:src/xeq.c     **** 	Running = 0;
 26036              		.loc 1 5810 6 view .LVU6789
 26037              	.LBB3518:
5811:src/xeq.c     **** }
 26038              		.loc 1 5811 2 view .LVU6790
5811:src/xeq.c     **** }
 26039              		.loc 1 5811 10 is_stmt 0 view .LVU6791
 26040 0006 0A48     		ldr	r0, .L1868+4
 26041              	.LVL1992:
5811:src/xeq.c     **** }
 26042              		.loc 1 5811 10 view .LVU6792
 26043              	.LBE3518:
 26044              	.LBE3517:
5820:src/xeq.c     **** 	dot( RCL_annun, 0);
 26045              		.loc 1 5820 15 view .LVU6793
 26046 0008 1268     		ldr	r2, [r2]
 26047              	.LBB3520:
 26048              	.LBB3519:
5811:src/xeq.c     **** }
 26049              		.loc 1 5811 10 view .LVU6794
 26050 000a 0160     		str	r1, [r0]
 26051              	.LBE3519:
 26052              	.LBE3520:
5820:src/xeq.c     **** 	dot( RCL_annun, 0);
 26053              		.loc 1 5820 2 is_stmt 1 view .LVU6795
5820:src/xeq.c     **** 	dot( RCL_annun, 0);
 26054              		.loc 1 5820 15 is_stmt 0 view .LVU6796
 26055 000c 92F8DD07 		ldrb	r0, [r2, #2013]	@ zero_extendqisi2
 26056 0010 61F30410 		bfi	r0, r1, #4, #1
 26057              	.LVL1993:
5820:src/xeq.c     **** 	dot( RCL_annun, 0);
 26058              		.loc 1 5820 15 view .LVU6797
 26059 0014 82F8DD07 		strb	r0, [r2, #2013]
5821:src/xeq.c     **** }
 26060              		.loc 1 5821 2 is_stmt 1 view .LVU6798
 26061 0018 8A20     		movs	r0, #138
 26062 001a FFF7FEBF 		b	dot
 26063              	.LVL1994:
 26064              	.L1867:
5821:src/xeq.c     **** }
 26065              		.loc 1 5821 2 is_stmt 0 view .LVU6799
 26066              	.LBE3521:
 26067              	.LBE3522:
 26068              	.LBE3523:
 26069              	.LBE3524:
2288:src/xeq.c     **** }
 26070              		.loc 1 2288 3 is_stmt 1 view .LVU6800
2288:src/xeq.c     **** }
 26071              		.loc 1 2288 19 is_stmt 0 view .LVU6801
ARM GAS  /tmp/ccqED0AM.s 			page 670


 26072 001e 1268     		ldr	r2, [r2]
2288:src/xeq.c     **** }
 26073              		.loc 1 2288 3 view .LVU6802
 26074 0020 0146     		mov	r1, r0
 26075              	.LVL1995:
2288:src/xeq.c     **** }
 26076              		.loc 1 2288 3 view .LVU6803
 26077 0022 B2F8E027 		ldrh	r2, [r2, #2016]
 26078 0026 1846     		mov	r0, r3
 26079              	.LVL1996:
2288:src/xeq.c     **** }
 26080              		.loc 1 2288 3 view .LVU6804
 26081 0028 FFF7FEBF 		b	gsbgto
 26082              	.LVL1997:
 26083              	.L1869:
2288:src/xeq.c     **** }
 26084              		.loc 1 2288 3 view .LVU6805
 26085              		.align	2
 26086              	.L1868:
 26087 002c 00000000 		.word	main_ram
 26088 0030 00000000 		.word	Running
 26089              		.cfi_endproc
 26090              	.LFE156:
 26092              		.section	.text.cmdgto,"ax",%progbits
 26093              		.align	1
 26094              		.p2align 2,,3
 26095              		.global	cmdgto
 26096              		.syntax unified
 26097              		.thumb
 26098              		.thumb_func
 26099              		.fpu fpv4-sp-d16
 26101              	cmdgto:
 26102              	.LVL1998:
 26103              	.LFB162:
2344:src/xeq.c     **** 	unsigned int lbl;
 26104              		.loc 1 2344 45 is_stmt 1 view -0
 26105              		.cfi_startproc
 26106              		@ args = 0, pretend = 0, frame = 0
 26107              		@ frame_needed = 0, uses_anonymous_args = 0
2345:src/xeq.c     **** 	if (is_xrom())
 26108              		.loc 1 2345 2 view .LVU6807
2346:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
 26109              		.loc 1 2346 2 view .LVU6808
 26110              	.LBB3525:
 26111              	.LBI3525:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 26112              		.loc 1 185 5 view .LVU6809
 26113              	.LBB3526:
 186:src/xeq.c     **** }
 26114              		.loc 1 186 2 view .LVU6810
 186:src/xeq.c     **** }
 26115              		.loc 1 186 9 is_stmt 0 view .LVU6811
 26116 0000 0E4B     		ldr	r3, .L1874
 26117 0002 1B68     		ldr	r3, [r3]
 26118 0004 B3F8E037 		ldrh	r3, [r3, #2016]
 26119              	.LBE3526:
 26120              	.LBE3525:
ARM GAS  /tmp/ccqED0AM.s 			page 671


2346:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
 26121              		.loc 1 2346 5 view .LVU6812
 26122 0008 9A0B     		lsrs	r2, r3, #14
 26123 000a 032A     		cmp	r2, #3
2344:src/xeq.c     **** 	unsigned int lbl;
 26124              		.loc 1 2344 45 view .LVU6813
 26125 000c 10B5     		push	{r4, lr}
 26126              		.cfi_def_cfa_offset 8
 26127              		.cfi_offset 4, -8
 26128              		.cfi_offset 14, -4
2344:src/xeq.c     **** 	unsigned int lbl;
 26129              		.loc 1 2344 45 view .LVU6814
 26130 000e 0C46     		mov	r4, r1
2346:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
 26131              		.loc 1 2346 5 view .LVU6815
 26132 0010 0CD1     		bne	.L1871
2347:src/xeq.c     **** 	else
 26133              		.loc 1 2347 3 is_stmt 1 view .LVU6816
2347:src/xeq.c     **** 	else
 26134              		.loc 1 2347 9 is_stmt 0 view .LVU6817
 26135 0012 0B4B     		ldr	r3, .L1874+4
2347:src/xeq.c     **** 	else
 26136              		.loc 1 2347 37 view .LVU6818
 26137 0014 33F81010 		ldrh	r1, [r3, r0, lsl #1]
 26138              	.LVL1999:
2347:src/xeq.c     **** 	else
 26139              		.loc 1 2347 7 view .LVU6819
 26140 0018 41F44041 		orr	r1, r1, #49152
 26141              	.LVL2000:
 26142              	.L1872:
2350:src/xeq.c     **** }
 26143              		.loc 1 2350 2 is_stmt 1 view .LVU6820
 26144 001c B4F14500 		subs	r0, r4, #69
 26145 0020 18BF     		it	ne
 26146 0022 0120     		movne	r0, #1
2351:src/xeq.c     **** 
 26147              		.loc 1 2351 1 is_stmt 0 view .LVU6821
 26148 0024 BDE81040 		pop	{r4, lr}
 26149              		.cfi_remember_state
 26150              		.cfi_restore 14
 26151              		.cfi_restore 4
 26152              		.cfi_def_cfa_offset 0
2350:src/xeq.c     **** }
 26153              		.loc 1 2350 2 view .LVU6822
 26154 0028 FFF7FEBF 		b	cmdgtocommon
 26155              	.LVL2001:
 26156              	.L1871:
 26157              		.cfi_restore_state
2349:src/xeq.c     **** 	cmdgtocommon(op != RARG_GTO, lbl);
 26158              		.loc 1 2349 3 is_stmt 1 view .LVU6823
 26159              	.LBB3527:
 26160              	.LBI3527:
2214:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 26161              		.loc 1 2214 14 view .LVU6824
 26162              	.LBB3528:
2215:src/xeq.c     **** }
 26163              		.loc 1 2215 2 view .LVU6825
ARM GAS  /tmp/ccqED0AM.s 			page 672


2215:src/xeq.c     **** }
 26164              		.loc 1 2215 9 is_stmt 0 view .LVU6826
 26165 002c 40F4C441 		orr	r1, r0, #25088
 26166              	.LVL2002:
2215:src/xeq.c     **** }
 26167              		.loc 1 2215 9 view .LVU6827
 26168 0030 0322     		movs	r2, #3
 26169 0032 1846     		mov	r0, r3
 26170              	.LVL2003:
2215:src/xeq.c     **** }
 26171              		.loc 1 2215 9 view .LVU6828
 26172 0034 FFF7FEFF 		bl	find_opcode_from
 26173              	.LVL2004:
2215:src/xeq.c     **** }
 26174              		.loc 1 2215 9 view .LVU6829
 26175 0038 0146     		mov	r1, r0
 26176              	.LVL2005:
2215:src/xeq.c     **** }
 26177              		.loc 1 2215 9 view .LVU6830
 26178 003a EFE7     		b	.L1872
 26179              	.L1875:
 26180              		.align	2
 26181              	.L1874:
 26182 003c 00000000 		.word	main_ram
 26183 0040 00000000 		.word	.LANCHOR6
 26184              	.LBE3528:
 26185              	.LBE3527:
 26186              		.cfi_endproc
 26187              	.LFE162:
 26189              		.section	.text.branchtoalpha,"ax",%progbits
 26190              		.align	1
 26191              		.p2align 2,,3
 26192              		.syntax unified
 26193              		.thumb
 26194              		.thumb_func
 26195              		.fpu fpv4-sp-d16
 26197              	branchtoalpha:
 26198              	.LVL2006:
 26199              	.LFB167:
2393:src/xeq.c     **** 	unsigned int op;
 26200              		.loc 1 2393 51 is_stmt 1 view -0
 26201              		.cfi_startproc
 26202              		@ args = 0, pretend = 0, frame = 0
 26203              		@ frame_needed = 0, uses_anonymous_args = 0
2394:src/xeq.c     **** 
 26204              		.loc 1 2394 2 view .LVU6832
2396:src/xeq.c     **** 	op |= buf[0] & 0xff;
 26205              		.loc 1 2396 2 view .LVU6833
2397:src/xeq.c     **** 	op |= (buf[1] & 0xff) << 16;
 26206              		.loc 1 2397 2 view .LVU6834
2398:src/xeq.c     **** 	op |= (buf[2] & 0xff) << 24;
 26207              		.loc 1 2398 2 view .LVU6835
2399:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 26208              		.loc 1 2399 2 view .LVU6836
2400:src/xeq.c     **** }
 26209              		.loc 1 2400 2 view .LVU6837
2393:src/xeq.c     **** 	unsigned int op;
ARM GAS  /tmp/ccqED0AM.s 			page 673


 26210              		.loc 1 2393 51 is_stmt 0 view .LVU6838
 26211 0000 10B5     		push	{r4, lr}
 26212              		.cfi_def_cfa_offset 8
 26213              		.cfi_offset 4, -8
 26214              		.cfi_offset 14, -4
2399:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 26215              		.loc 1 2399 16 view .LVU6839
 26216 0002 8B78     		ldrb	r3, [r1, #2]	@ zero_extendqisi2
2398:src/xeq.c     **** 	op |= (buf[2] & 0xff) << 24;
 26217              		.loc 1 2398 16 view .LVU6840
 26218 0004 4C78     		ldrb	r4, [r1, #1]	@ zero_extendqisi2
2397:src/xeq.c     **** 	op |= (buf[1] & 0xff) << 16;
 26219              		.loc 1 2397 15 view .LVU6841
 26220 0006 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
2399:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 26221              		.loc 1 2399 24 view .LVU6842
 26222 0008 1B06     		lsls	r3, r3, #24
2399:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 26223              		.loc 1 2399 5 view .LVU6843
 26224 000a 43EA0443 		orr	r3, r3, r4, lsl #16
 26225 000e 1343     		orrs	r3, r3, r2
2393:src/xeq.c     **** 	unsigned int op;
 26226              		.loc 1 2393 51 view .LVU6844
 26227 0010 0446     		mov	r4, r0
2400:src/xeq.c     **** }
 26228              		.loc 1 2400 2 view .LVU6845
 26229 0012 0121     		movs	r1, #1
 26230              	.LVL2007:
2400:src/xeq.c     **** }
 26231              		.loc 1 2400 2 view .LVU6846
 26232 0014 43F47040 		orr	r0, r3, #61440
 26233              	.LVL2008:
2400:src/xeq.c     **** }
 26234              		.loc 1 2400 2 view .LVU6847
 26235 0018 FFF7FEFF 		bl	findmultilbl
 26236              	.LVL2009:
2400:src/xeq.c     **** }
 26237              		.loc 1 2400 2 view .LVU6848
 26238 001c 0146     		mov	r1, r0
 26239 001e 2046     		mov	r0, r4
2401:src/xeq.c     **** 
 26240              		.loc 1 2401 1 view .LVU6849
 26241 0020 BDE81040 		pop	{r4, lr}
 26242              		.cfi_restore 14
 26243              		.cfi_restore 4
 26244              		.cfi_def_cfa_offset 0
 26245              	.LVL2010:
2400:src/xeq.c     **** }
 26246              		.loc 1 2400 2 view .LVU6850
 26247 0024 FFF7FEBF 		b	cmdgtocommon
 26248              	.LVL2011:
2400:src/xeq.c     **** }
 26249              		.loc 1 2400 2 view .LVU6851
 26250              		.cfi_endproc
 26251              	.LFE167:
 26253              		.section	.text.cmdalphagto,"ax",%progbits
 26254              		.align	1
ARM GAS  /tmp/ccqED0AM.s 			page 674


 26255              		.p2align 2,,3
 26256              		.global	cmdalphagto
 26257              		.syntax unified
 26258              		.thumb
 26259              		.thumb_func
 26260              		.fpu fpv4-sp-d16
 26262              	cmdalphagto:
 26263              	.LVL2012:
 26264              	.LFB168:
2403:src/xeq.c     **** 	char buf[14];
 26265              		.loc 1 2403 50 is_stmt 1 view -0
 26266              		.cfi_startproc
 26267              		@ args = 0, pretend = 0, frame = 16
 26268              		@ frame_needed = 0, uses_anonymous_args = 0
2404:src/xeq.c     **** 
 26269              		.loc 1 2404 2 view .LVU6853
2406:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 26270              		.loc 1 2406 2 view .LVU6854
2403:src/xeq.c     **** 	char buf[14];
 26271              		.loc 1 2403 50 is_stmt 0 view .LVU6855
 26272 0000 30B5     		push	{r4, r5, lr}
 26273              		.cfi_def_cfa_offset 12
 26274              		.cfi_offset 4, -12
 26275              		.cfi_offset 5, -8
 26276              		.cfi_offset 14, -4
 26277 0002 85B0     		sub	sp, sp, #20
 26278              		.cfi_def_cfa_offset 32
2406:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 26279              		.loc 1 2406 2 view .LVU6856
 26280 0004 0E22     		movs	r2, #14
2403:src/xeq.c     **** 	char buf[14];
 26281              		.loc 1 2403 50 view .LVU6857
 26282 0006 0546     		mov	r5, r0
 26283 0008 0C46     		mov	r4, r1
2406:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 26284              		.loc 1 2406 2 view .LVU6858
 26285 000a 6846     		mov	r0, sp
 26286              	.LVL2013:
2406:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 26287              		.loc 1 2406 2 view .LVU6859
 26288 000c 0021     		movs	r1, #0
 26289              	.LVL2014:
2406:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 26290              		.loc 1 2406 2 view .LVU6860
 26291 000e FFF7FEFF 		bl	xset
 26292              	.LVL2015:
2407:src/xeq.c     **** }
 26293              		.loc 1 2407 2 is_stmt 1 view .LVU6861
 26294 0012 6946     		mov	r1, sp
 26295 0014 2846     		mov	r0, r5
 26296 0016 FFF7FEFF 		bl	alpha_rcl_s
 26297              	.LVL2016:
 26298 001a 0146     		mov	r1, r0
 26299 001c B4F17000 		subs	r0, r4, #112
 26300 0020 18BF     		it	ne
 26301 0022 0120     		movne	r0, #1
 26302 0024 FFF7FEFF 		bl	branchtoalpha
ARM GAS  /tmp/ccqED0AM.s 			page 675


 26303              	.LVL2017:
2408:src/xeq.c     **** 
 26304              		.loc 1 2408 1 is_stmt 0 view .LVU6862
 26305 0028 05B0     		add	sp, sp, #20
 26306              		.cfi_def_cfa_offset 12
 26307              		@ sp needed
 26308 002a 30BD     		pop	{r4, r5, pc}
2408:src/xeq.c     **** 
 26309              		.loc 1 2408 1 view .LVU6863
 26310              		.cfi_endproc
 26311              	.LFE168:
 26313              		.section	.text.op_gtoalpha,"ax",%progbits
 26314              		.align	1
 26315              		.p2align 2,,3
 26316              		.global	op_gtoalpha
 26317              		.syntax unified
 26318              		.thumb
 26319              		.thumb_func
 26320              		.fpu fpv4-sp-d16
 26322              	op_gtoalpha:
 26323              	.LVL2018:
 26324              	.LFB170:
2418:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 26325              		.loc 1 2418 33 is_stmt 1 view -0
 26326              		.cfi_startproc
 26327              		@ args = 0, pretend = 0, frame = 8
 26328              		@ frame_needed = 0, uses_anonymous_args = 0
2419:src/xeq.c     **** }
 26329              		.loc 1 2419 2 view .LVU6865
2418:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 26330              		.loc 1 2418 33 is_stmt 0 view .LVU6866
 26331 0000 10B5     		push	{r4, lr}
 26332              		.cfi_def_cfa_offset 8
 26333              		.cfi_offset 4, -8
 26334              		.cfi_offset 14, -4
 26335              	.LBB3531:
 26336              	.LBB3532:
2413:src/xeq.c     **** 	buf[3] = '\0';
 26337              		.loc 1 2413 13 view .LVU6867
 26338 0002 0B4B     		ldr	r3, .L1882
 26339 0004 1968     		ldr	r1, [r3]
 26340              	.LBE3532:
 26341              	.LBE3531:
2418:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 26342              		.loc 1 2418 33 view .LVU6868
 26343 0006 82B0     		sub	sp, sp, #8
 26344              		.cfi_def_cfa_offset 16
2418:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 26345              		.loc 1 2418 33 view .LVU6869
 26346 0008 0446     		mov	r4, r0
 26347              	.LVL2019:
 26348              	.LBB3534:
 26349              	.LBI3531:
2410:src/xeq.c     **** 	char buf[4];
 26350              		.loc 1 2410 13 is_stmt 1 view .LVU6870
 26351              	.LBB3533:
2411:src/xeq.c     **** 
ARM GAS  /tmp/ccqED0AM.s 			page 676


 26352              		.loc 1 2411 2 view .LVU6871
2413:src/xeq.c     **** 	buf[3] = '\0';
 26353              		.loc 1 2413 2 view .LVU6872
 26354 000a 0322     		movs	r2, #3
 26355 000c 01F5F661 		add	r1, r1, #1968
 26356 0010 01A8     		add	r0, sp, #4
 26357              	.LVL2020:
2413:src/xeq.c     **** 	buf[3] = '\0';
 26358              		.loc 1 2413 2 is_stmt 0 view .LVU6873
 26359 0012 FFF7FEFF 		bl	xcopy
 26360              	.LVL2021:
2414:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
 26361              		.loc 1 2414 2 is_stmt 1 view .LVU6874
2415:src/xeq.c     **** }
 26362              		.loc 1 2415 2 is_stmt 0 view .LVU6875
 26363 0016 B4F19800 		subs	r0, r4, #152
2414:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
 26364              		.loc 1 2414 9 view .LVU6876
 26365 001a 4FF00003 		mov	r3, #0
2415:src/xeq.c     **** }
 26366              		.loc 1 2415 2 view .LVU6877
 26367 001e 18BF     		it	ne
 26368 0020 0120     		movne	r0, #1
 26369 0022 01A9     		add	r1, sp, #4
2414:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
 26370              		.loc 1 2414 9 view .LVU6878
 26371 0024 8DF80730 		strb	r3, [sp, #7]
2415:src/xeq.c     **** }
 26372              		.loc 1 2415 2 is_stmt 1 view .LVU6879
 26373 0028 FFF7FEFF 		bl	branchtoalpha
 26374              	.LVL2022:
2415:src/xeq.c     **** }
 26375              		.loc 1 2415 2 is_stmt 0 view .LVU6880
 26376              	.LBE3533:
 26377              	.LBE3534:
2420:src/xeq.c     **** 
 26378              		.loc 1 2420 1 view .LVU6881
 26379 002c 02B0     		add	sp, sp, #8
 26380              		.cfi_def_cfa_offset 8
 26381              		@ sp needed
 26382 002e 10BD     		pop	{r4, pc}
 26383              	.L1883:
 26384              		.align	2
 26385              	.L1882:
 26386 0030 00000000 		.word	main_ram
 26387              		.cfi_endproc
 26388              	.LFE170:
 26390              		.section	.text.cmdskip,"ax",%progbits
 26391              		.align	1
 26392              		.p2align 2,,3
 26393              		.global	cmdskip
 26394              		.syntax unified
 26395              		.thumb
 26396              		.thumb_func
 26397              		.fpu fpv4-sp-d16
 26399              	cmdskip:
 26400              	.LVL2023:
ARM GAS  /tmp/ccqED0AM.s 			page 677


 26401              	.LFB183:
2594:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26402              		.loc 1 2594 46 is_stmt 1 view -0
 26403              		.cfi_startproc
 26404              		@ args = 0, pretend = 0, frame = 8
 26405              		@ frame_needed = 0, uses_anonymous_args = 0
2595:src/xeq.c     **** 	unsigned int pc;
 26406              		.loc 1 2595 2 view .LVU6883
2594:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26407              		.loc 1 2594 46 is_stmt 0 view .LVU6884
 26408 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 26409              		.cfi_def_cfa_offset 20
 26410              		.cfi_offset 4, -20
 26411              		.cfi_offset 5, -16
 26412              		.cfi_offset 6, -12
 26413              		.cfi_offset 7, -8
 26414              		.cfi_offset 14, -4
2595:src/xeq.c     **** 	unsigned int pc;
 26415              		.loc 1 2595 30 view .LVU6885
 26416 0002 1D4F     		ldr	r7, .L1908
 26417 0004 3B68     		ldr	r3, [r7]
2598:src/xeq.c     **** 		int sgn;
 26418              		.loc 1 2598 5 view .LVU6886
 26419 0006 9229     		cmp	r1, #146
2595:src/xeq.c     **** 	unsigned int pc;
 26420              		.loc 1 2595 21 view .LVU6887
 26421 0008 B3F8E067 		ldrh	r6, [r3, #2016]
 26422              	.LVL2024:
2596:src/xeq.c     **** 
 26423              		.loc 1 2596 2 is_stmt 1 view .LVU6888
2598:src/xeq.c     **** 		int sgn;
 26424              		.loc 1 2598 2 view .LVU6889
2594:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26425              		.loc 1 2594 46 is_stmt 0 view .LVU6890
 26426 000c 83B0     		sub	sp, sp, #12
 26427              		.cfi_def_cfa_offset 32
2594:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26428              		.loc 1 2594 46 view .LVU6891
 26429 000e 0D46     		mov	r5, r1
2598:src/xeq.c     **** 		int sgn;
 26430              		.loc 1 2598 5 view .LVU6892
 26431 0010 22D0     		beq	.L1905
 26432 0012 0446     		mov	r4, r0
 26433              	.LVL2025:
 26434              	.L1885:
2607:src/xeq.c     **** 		pc = origpc + arg;
 26435              		.loc 1 2607 2 is_stmt 1 view .LVU6893
2607:src/xeq.c     **** 		pc = origpc + arg;
 26436              		.loc 1 2607 6 is_stmt 0 view .LVU6894
 26437 0014 B30B     		lsrs	r3, r6, #14
2607:src/xeq.c     **** 		pc = origpc + arg;
 26438              		.loc 1 2607 5 view .LVU6895
 26439 0016 032B     		cmp	r3, #3
 26440 0018 15D0     		beq	.L1906
 26441              	.LVL2026:
 26442              	.L1890:
2610:src/xeq.c     **** 		if (PcWrapped) {
ARM GAS  /tmp/ccqED0AM.s 			page 678


 26443              		.loc 1 2610 28 is_stmt 1 discriminator 2 view .LVU6896
2610:src/xeq.c     **** 		if (PcWrapped) {
 26444              		.loc 1 2610 9 discriminator 2 view .LVU6897
2610:src/xeq.c     **** 		if (PcWrapped) {
 26445              		.loc 1 2610 9 is_stmt 0 discriminator 2 view .LVU6898
 26446 001a 24B1     		cbz	r4, .L1892
2610:src/xeq.c     **** 		if (PcWrapped) {
 26447              		.loc 1 2610 20 discriminator 1 view .LVU6899
 26448 001c FFF7FEFF 		bl	incpc
 26449              	.LVL2027:
 26450 0020 013C     		subs	r4, r4, #1
 26451              	.LVL2028:
2610:src/xeq.c     **** 		if (PcWrapped) {
 26452              		.loc 1 2610 16 discriminator 1 view .LVU6900
 26453 0022 0028     		cmp	r0, #0
 26454 0024 F9D0     		beq	.L1890
 26455              	.LVL2029:
 26456              	.L1892:
2611:src/xeq.c     **** 			report_err(ERR_RANGE);
 26457              		.loc 1 2611 3 is_stmt 1 view .LVU6901
2611:src/xeq.c     **** 			report_err(ERR_RANGE);
 26458              		.loc 1 2611 7 is_stmt 0 view .LVU6902
 26459 0026 154B     		ldr	r3, .L1908+4
2611:src/xeq.c     **** 			report_err(ERR_RANGE);
 26460              		.loc 1 2611 6 view .LVU6903
 26461 0028 1B68     		ldr	r3, [r3]
 26462 002a 73B9     		cbnz	r3, .L1907
 26463              	.L1893:
2614:src/xeq.c     **** 	}
 26464              		.loc 1 2614 3 is_stmt 1 view .LVU6904
2614:src/xeq.c     **** 	}
 26465              		.loc 1 2614 8 is_stmt 0 view .LVU6905
 26466 002c 3B68     		ldr	r3, [r7]
2614:src/xeq.c     **** 	}
 26467              		.loc 1 2614 6 view .LVU6906
 26468 002e B3F8E007 		ldrh	r0, [r3, #2016]
 26469              	.LVL2030:
 26470              	.L1891:
2616:src/xeq.c     **** }
 26471              		.loc 1 2616 2 is_stmt 1 view .LVU6907
 26472 0032 A5F13801 		sub	r1, r5, #56
 26473 0036 B1FA81F1 		clz	r1, r1
 26474 003a 3246     		mov	r2, r6
 26475 003c 4909     		lsrs	r1, r1, #5
 26476 003e FFF7FEFF 		bl	gsbgto
 26477              	.LVL2031:
 26478              	.L1884:
2617:src/xeq.c     **** 
 26479              		.loc 1 2617 1 is_stmt 0 view .LVU6908
 26480 0042 03B0     		add	sp, sp, #12
 26481              		.cfi_remember_state
 26482              		.cfi_def_cfa_offset 20
 26483              		@ sp needed
 26484 0044 F0BD     		pop	{r4, r5, r6, r7, pc}
 26485              	.LVL2032:
 26486              	.L1906:
 26487              		.cfi_restore_state
ARM GAS  /tmp/ccqED0AM.s 			page 679


2608:src/xeq.c     **** 	else {
 26488              		.loc 1 2608 3 is_stmt 1 view .LVU6909
2608:src/xeq.c     **** 	else {
 26489              		.loc 1 2608 6 is_stmt 0 view .LVU6910
 26490 0046 A019     		adds	r0, r4, r6
 26491              	.LVL2033:
2608:src/xeq.c     **** 	else {
 26492              		.loc 1 2608 6 view .LVU6911
 26493 0048 F3E7     		b	.L1891
 26494              	.LVL2034:
 26495              	.L1907:
2612:src/xeq.c     **** 		}
 26496              		.loc 1 2612 4 is_stmt 1 view .LVU6912
 26497              	.LBB3544:
 26498              	.LBI3544:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26499              		.loc 1 546 5 view .LVU6913
 26500              	.LBB3545:
 547:src/xeq.c     **** 		Error = e;
 26501              		.loc 1 547 2 view .LVU6914
 547:src/xeq.c     **** 		Error = e;
 26502              		.loc 1 547 12 is_stmt 0 view .LVU6915
 26503 004a 0D4B     		ldr	r3, .L1908+8
 547:src/xeq.c     **** 		Error = e;
 26504              		.loc 1 547 5 view .LVU6916
 26505 004c 1A68     		ldr	r2, [r3]
 26506 004e 002A     		cmp	r2, #0
 26507 0050 ECD1     		bne	.L1893
 26508              	.LVL2035:
 26509              	.LBB3546:
 26510              	.LBI3546:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26511              		.loc 1 546 5 is_stmt 1 view .LVU6917
 26512              	.LBB3547:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 26513              		.loc 1 548 3 view .LVU6918
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 26514              		.loc 1 548 9 is_stmt 0 view .LVU6919
 26515 0052 0822     		movs	r2, #8
 26516 0054 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 26517              		.loc 1 549 3 is_stmt 1 view .LVU6920
 26518 0056 E9E7     		b	.L1893
 26519              	.LVL2036:
 26520              	.L1905:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 26521              		.loc 1 549 3 is_stmt 0 view .LVU6921
 26522              	.LBE3547:
 26523              	.LBE3546:
 26524              	.LBE3545:
 26525              	.LBE3544:
 26526              	.LBB3548:
2599:src/xeq.c     **** 		arg = (int) get_reg_n_int_sgn((int) arg, &sgn);
 26527              		.loc 1 2599 3 is_stmt 1 view .LVU6922
2600:src/xeq.c     **** 		if (sgn || arg >= 100) {
 26528              		.loc 1 2600 3 view .LVU6923
2600:src/xeq.c     **** 		if (sgn || arg >= 100) {
ARM GAS  /tmp/ccqED0AM.s 			page 680


 26529              		.loc 1 2600 15 is_stmt 0 view .LVU6924
 26530 0058 01A9     		add	r1, sp, #4
 26531              	.LVL2037:
2600:src/xeq.c     **** 		if (sgn || arg >= 100) {
 26532              		.loc 1 2600 15 view .LVU6925
 26533 005a FFF7FEFF 		bl	get_reg_n_int_sgn
 26534              	.LVL2038:
2601:src/xeq.c     **** 			report_err(ERR_RANGE);
 26535              		.loc 1 2601 6 view .LVU6926
 26536 005e 019B     		ldr	r3, [sp, #4]
 26537              	.LVL2039:
2601:src/xeq.c     **** 			report_err(ERR_RANGE);
 26538              		.loc 1 2601 3 is_stmt 1 view .LVU6927
2601:src/xeq.c     **** 			report_err(ERR_RANGE);
 26539              		.loc 1 2601 6 is_stmt 0 view .LVU6928
 26540 0060 13B9     		cbnz	r3, .L1886
2601:src/xeq.c     **** 			report_err(ERR_RANGE);
 26541              		.loc 1 2601 11 discriminator 1 view .LVU6929
 26542 0062 6328     		cmp	r0, #99
2600:src/xeq.c     **** 		if (sgn || arg >= 100) {
 26543              		.loc 1 2600 7 discriminator 1 view .LVU6930
 26544 0064 0446     		mov	r4, r0
2601:src/xeq.c     **** 			report_err(ERR_RANGE);
 26545              		.loc 1 2601 11 discriminator 1 view .LVU6931
 26546 0066 D5D9     		bls	.L1885
 26547              	.L1886:
2602:src/xeq.c     **** 			return;
 26548              		.loc 1 2602 4 is_stmt 1 view .LVU6932
 26549              	.LVL2040:
 26550              	.LBB3549:
 26551              	.LBI3549:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26552              		.loc 1 546 5 view .LVU6933
 26553              	.LBB3550:
 547:src/xeq.c     **** 		Error = e;
 26554              		.loc 1 547 2 view .LVU6934
 547:src/xeq.c     **** 		Error = e;
 26555              		.loc 1 547 12 is_stmt 0 view .LVU6935
 26556 0068 054B     		ldr	r3, .L1908+8
 547:src/xeq.c     **** 		Error = e;
 26557              		.loc 1 547 5 view .LVU6936
 26558 006a 1A68     		ldr	r2, [r3]
 26559 006c 002A     		cmp	r2, #0
 26560 006e E8D1     		bne	.L1884
 26561              	.LVL2041:
 26562              	.LBB3551:
 26563              	.LBI3551:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26564              		.loc 1 546 5 is_stmt 1 view .LVU6937
 26565              	.LBB3552:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 26566              		.loc 1 548 3 view .LVU6938
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 26567              		.loc 1 548 9 is_stmt 0 view .LVU6939
 26568 0070 0822     		movs	r2, #8
 26569 0072 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
ARM GAS  /tmp/ccqED0AM.s 			page 681


 26570              		.loc 1 549 3 is_stmt 1 view .LVU6940
 26571              	.LVL2042:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 26572              		.loc 1 549 3 is_stmt 0 view .LVU6941
 26573              	.LBE3552:
 26574              	.LBE3551:
 26575              	.LBE3550:
 26576              	.LBE3549:
2603:src/xeq.c     **** 		}
 26577              		.loc 1 2603 4 is_stmt 1 view .LVU6942
 26578 0074 E5E7     		b	.L1884
 26579              	.L1909:
 26580 0076 00BF     		.align	2
 26581              	.L1908:
 26582 0078 00000000 		.word	main_ram
 26583 007c 00000000 		.word	PcWrapped
 26584 0080 00000000 		.word	Error
 26585              	.LBE3548:
 26586              		.cfi_endproc
 26587              	.LFE183:
 26589              		.section	.text.cmdback,"ax",%progbits
 26590              		.align	1
 26591              		.p2align 2,,3
 26592              		.global	cmdback
 26593              		.syntax unified
 26594              		.thumb
 26595              		.thumb_func
 26596              		.fpu fpv4-sp-d16
 26598              	cmdback:
 26599              	.LVL2043:
 26600              	.LFB184:
2620:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26601              		.loc 1 2620 46 view -0
 26602              		.cfi_startproc
 26603              		@ args = 0, pretend = 0, frame = 0
 26604              		@ frame_needed = 0, uses_anonymous_args = 0
2621:src/xeq.c     **** 	unsigned int pc = origpc;
 26605              		.loc 1 2621 2 view .LVU6944
2620:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26606              		.loc 1 2620 46 is_stmt 0 view .LVU6945
 26607 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 26608              		.cfi_def_cfa_offset 24
 26609              		.cfi_offset 3, -24
 26610              		.cfi_offset 4, -20
 26611              		.cfi_offset 5, -16
 26612              		.cfi_offset 6, -12
 26613              		.cfi_offset 7, -8
 26614              		.cfi_offset 14, -4
2621:src/xeq.c     **** 	unsigned int pc = origpc;
 26615              		.loc 1 2621 30 view .LVU6946
 26616 0002 184B     		ldr	r3, .L1929
 26617 0004 1B68     		ldr	r3, [r3]
2621:src/xeq.c     **** 	unsigned int pc = origpc;
 26618              		.loc 1 2621 21 view .LVU6947
 26619 0006 B3F8E067 		ldrh	r6, [r3, #2016]
 26620              	.LVL2044:
2622:src/xeq.c     **** 
ARM GAS  /tmp/ccqED0AM.s 			page 682


 26621              		.loc 1 2622 2 is_stmt 1 view .LVU6948
2624:src/xeq.c     **** 		pc -= arg + 1;
 26622              		.loc 1 2624 2 view .LVU6949
2624:src/xeq.c     **** 		pc -= arg + 1;
 26623              		.loc 1 2624 6 is_stmt 0 view .LVU6950
 26624 000a B30B     		lsrs	r3, r6, #14
2624:src/xeq.c     **** 		pc -= arg + 1;
 26625              		.loc 1 2624 5 view .LVU6951
 26626 000c 032B     		cmp	r3, #3
2620:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26627              		.loc 1 2620 46 view .LVU6952
 26628 000e 0446     		mov	r4, r0
 26629 0010 0D46     		mov	r5, r1
2624:src/xeq.c     **** 		pc -= arg + 1;
 26630              		.loc 1 2624 5 view .LVU6953
 26631 0012 1FD0     		beq	.L1926
2626:src/xeq.c     **** 		if ( Running ) {
 26632              		.loc 1 2626 14 is_stmt 1 view .LVU6954
2626:src/xeq.c     **** 		if ( Running ) {
 26633              		.loc 1 2626 17 is_stmt 0 view .LVU6955
 26634 0014 98B1     		cbz	r0, .L1918
2627:src/xeq.c     **** 			// Handles the case properly that we are on last step
 26635              		.loc 1 2627 3 is_stmt 1 view .LVU6956
2627:src/xeq.c     **** 			// Handles the case properly that we are on last step
 26636              		.loc 1 2627 8 is_stmt 0 view .LVU6957
 26637 0016 144B     		ldr	r3, .L1929+4
2627:src/xeq.c     **** 			// Handles the case properly that we are on last step
 26638              		.loc 1 2627 6 view .LVU6958
 26639 0018 1B68     		ldr	r3, [r3]
 26640 001a F3B9     		cbnz	r3, .L1927
 26641 001c 3046     		mov	r0, r6
 26642              	.LVL2045:
 26643              	.L1913:
2627:src/xeq.c     **** 			// Handles the case properly that we are on last step
 26644              		.loc 1 2627 6 view .LVU6959
 26645 001e 134F     		ldr	r7, .L1929+8
 26646 0020 00E0     		b	.L1915
 26647              	.L1928:
2633:src/xeq.c     **** 		if (PcWrapped) {
 26648              		.loc 1 2633 18 discriminator 1 view .LVU6960
 26649 0022 33B9     		cbnz	r3, .L1916
 26650              	.L1915:
2631:src/xeq.c     **** 			pc = do_dec(pc, 1);
 26651              		.loc 1 2631 3 is_stmt 1 discriminator 2 view .LVU6961
2632:src/xeq.c     **** 		} while (--arg && !PcWrapped);
 26652              		.loc 1 2632 4 discriminator 2 view .LVU6962
2632:src/xeq.c     **** 		} while (--arg && !PcWrapped);
 26653              		.loc 1 2632 9 is_stmt 0 discriminator 2 view .LVU6963
 26654 0024 0121     		movs	r1, #1
 26655 0026 FFF7FEFF 		bl	do_dec
 26656              	.LVL2046:
2633:src/xeq.c     **** 		if (PcWrapped) {
 26657              		.loc 1 2633 11 is_stmt 1 discriminator 2 view .LVU6964
2633:src/xeq.c     **** 		if (PcWrapped) {
 26658              		.loc 1 2633 3 is_stmt 0 discriminator 2 view .LVU6965
 26659 002a 013C     		subs	r4, r4, #1
 26660              	.LVL2047:
ARM GAS  /tmp/ccqED0AM.s 			page 683


2633:src/xeq.c     **** 		if (PcWrapped) {
 26661              		.loc 1 2633 18 discriminator 2 view .LVU6966
 26662 002c 3B68     		ldr	r3, [r7]
2633:src/xeq.c     **** 		if (PcWrapped) {
 26663              		.loc 1 2633 3 discriminator 2 view .LVU6967
 26664 002e F8D1     		bne	.L1928
2634:src/xeq.c     **** 			report_err(ERR_RANGE);
 26665              		.loc 1 2634 3 is_stmt 1 view .LVU6968
2634:src/xeq.c     **** 			report_err(ERR_RANGE);
 26666              		.loc 1 2634 6 is_stmt 0 view .LVU6969
 26667 0030 33B1     		cbz	r3, .L1912
 26668              	.L1916:
2635:src/xeq.c     **** 			return;
 26669              		.loc 1 2635 4 is_stmt 1 view .LVU6970
 26670              	.LVL2048:
 26671              	.LBB3557:
 26672              	.LBI3557:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26673              		.loc 1 546 5 view .LVU6971
 26674              	.LBB3558:
 547:src/xeq.c     **** 		Error = e;
 26675              		.loc 1 547 2 view .LVU6972
 547:src/xeq.c     **** 		Error = e;
 26676              		.loc 1 547 12 is_stmt 0 view .LVU6973
 26677 0032 0F4B     		ldr	r3, .L1929+12
 547:src/xeq.c     **** 		Error = e;
 26678              		.loc 1 547 5 view .LVU6974
 26679 0034 1A68     		ldr	r2, [r3]
 26680 0036 0AB9     		cbnz	r2, .L1910
 26681              	.LVL2049:
 26682              	.LBB3559:
 26683              	.LBI3559:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26684              		.loc 1 546 5 is_stmt 1 view .LVU6975
 26685              	.LBB3560:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 26686              		.loc 1 548 3 view .LVU6976
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 26687              		.loc 1 548 9 is_stmt 0 view .LVU6977
 26688 0038 0822     		movs	r2, #8
 26689 003a 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 26690              		.loc 1 549 3 is_stmt 1 view .LVU6978
 26691              	.LVL2050:
 26692              	.L1910:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 26693              		.loc 1 549 3 is_stmt 0 view .LVU6979
 26694              	.LBE3560:
 26695              	.LBE3559:
 26696              	.LBE3558:
 26697              	.LBE3557:
2640:src/xeq.c     **** 
 26698              		.loc 1 2640 1 view .LVU6980
 26699 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 26700              	.LVL2051:
 26701              	.L1918:
2640:src/xeq.c     **** 
ARM GAS  /tmp/ccqED0AM.s 			page 684


 26702              		.loc 1 2640 1 view .LVU6981
 26703 003e 3046     		mov	r0, r6
 26704              	.LVL2052:
 26705              	.L1912:
2639:src/xeq.c     **** }
 26706              		.loc 1 2639 2 is_stmt 1 view .LVU6982
 26707 0040 A5F13901 		sub	r1, r5, #57
 26708 0044 B1FA81F1 		clz	r1, r1
 26709 0048 3246     		mov	r2, r6
 26710 004a 4909     		lsrs	r1, r1, #5
2640:src/xeq.c     **** 
 26711              		.loc 1 2640 1 is_stmt 0 view .LVU6983
 26712 004c BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 26713              		.cfi_remember_state
 26714              		.cfi_restore 14
 26715              		.cfi_restore 7
 26716              		.cfi_restore 6
 26717              		.cfi_restore 5
 26718              		.cfi_restore 4
 26719              		.cfi_restore 3
 26720              		.cfi_def_cfa_offset 0
 26721              	.LVL2053:
2639:src/xeq.c     **** }
 26722              		.loc 1 2639 2 view .LVU6984
 26723 0050 FFF7FEBF 		b	gsbgto
 26724              	.LVL2054:
 26725              	.L1926:
 26726              		.cfi_restore_state
2625:src/xeq.c     ****         else if (arg) {
 26727              		.loc 1 2625 3 is_stmt 1 view .LVU6985
2625:src/xeq.c     ****         else if (arg) {
 26728              		.loc 1 2625 6 is_stmt 0 view .LVU6986
 26729 0054 731E     		subs	r3, r6, #1
 26730 0056 181A     		subs	r0, r3, r0
 26731              	.LVL2055:
2625:src/xeq.c     ****         else if (arg) {
 26732              		.loc 1 2625 6 view .LVU6987
 26733 0058 F2E7     		b	.L1912
 26734              	.LVL2056:
 26735              	.L1927:
2629:src/xeq.c     **** 		}
 26736              		.loc 1 2629 4 is_stmt 1 view .LVU6988
2629:src/xeq.c     **** 		}
 26737              		.loc 1 2629 9 is_stmt 0 view .LVU6989
 26738 005a 0121     		movs	r1, #1
 26739              	.LVL2057:
2629:src/xeq.c     **** 		}
 26740              		.loc 1 2629 9 view .LVU6990
 26741 005c 3046     		mov	r0, r6
 26742              	.LVL2058:
2629:src/xeq.c     **** 		}
 26743              		.loc 1 2629 9 view .LVU6991
 26744 005e FFF7FEFF 		bl	do_dec
 26745              	.LVL2059:
2629:src/xeq.c     **** 		}
 26746              		.loc 1 2629 9 view .LVU6992
 26747 0062 DCE7     		b	.L1913
ARM GAS  /tmp/ccqED0AM.s 			page 685


 26748              	.L1930:
 26749              		.align	2
 26750              	.L1929:
 26751 0064 00000000 		.word	main_ram
 26752 0068 00000000 		.word	Running
 26753 006c 00000000 		.word	PcWrapped
 26754 0070 00000000 		.word	Error
 26755              		.cfi_endproc
 26756              	.LFE184:
 26758              		.section	.text.usergsb_common,"ax",%progbits
 26759              		.align	1
 26760              		.p2align 2,,3
 26761              		.syntax unified
 26762              		.thumb
 26763              		.thumb_func
 26764              		.fpu fpv4-sp-d16
 26766              	usergsb_common:
 26767              	.LVL2060:
 26768              	.LFB157:
2294:src/xeq.c     **** 	const unsigned int pc = state_pc();
 26769              		.loc 1 2294 55 is_stmt 1 view -0
 26770              		.cfi_startproc
 26771              		@ args = 0, pretend = 0, frame = 0
 26772              		@ frame_needed = 0, uses_anonymous_args = 0
2295:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 26773              		.loc 1 2295 2 view .LVU6994
2294:src/xeq.c     **** 	const unsigned int pc = state_pc();
 26774              		.loc 1 2294 55 is_stmt 0 view .LVU6995
 26775 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 26776              		.cfi_def_cfa_offset 24
 26777              		.cfi_offset 4, -24
 26778              		.cfi_offset 5, -20
 26779              		.cfi_offset 6, -16
 26780              		.cfi_offset 7, -12
 26781              		.cfi_offset 8, -8
 26782              		.cfi_offset 14, -4
2295:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 26783              		.loc 1 2295 26 view .LVU6996
 26784 0004 204D     		ldr	r5, .L1935
2296:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 26785              		.loc 1 2296 2 view .LVU6997
 26786 0006 214F     		ldr	r7, .L1935+4
2295:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 26787              		.loc 1 2295 26 view .LVU6998
 26788 0008 2B68     		ldr	r3, [r5]
2296:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 26789              		.loc 1 2296 2 view .LVU6999
 26790 000a 3A68     		ldr	r2, [r7]
2295:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 26791              		.loc 1 2295 21 view .LVU7000
 26792 000c B3F8E047 		ldrh	r4, [r3, #2016]
 26793              	.LVL2061:
2296:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 26794              		.loc 1 2296 2 is_stmt 1 view .LVU7001
2298:src/xeq.c     **** 	gsbgto(target, 1, pc);		     // Push return address, transfer control
 26795              		.loc 1 2298 2 is_stmt 0 view .LVU7002
 26796 0010 DFF88480 		ldr	r8, .L1935+16
ARM GAS  /tmp/ccqED0AM.s 			page 686


2294:src/xeq.c     **** 	const unsigned int pc = state_pc();
 26797              		.loc 1 2294 55 view .LVU7003
 26798 0014 0646     		mov	r6, r0
2296:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 26799              		.loc 1 2296 2 view .LVU7004
 26800 0016 0121     		movs	r1, #1
 26801 0018 2046     		mov	r0, r4
 26802              	.LVL2062:
2296:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 26803              		.loc 1 2296 2 view .LVU7005
 26804 001a FFF7FEFF 		bl	gsbgto
 26805              	.LVL2063:
2297:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
 26806              		.loc 1 2297 2 is_stmt 1 view .LVU7006
2297:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
 26807              		.loc 1 2297 16 is_stmt 0 view .LVU7007
 26808 001e 2B68     		ldr	r3, [r5]
 26809 0020 B3F8DE27 		ldrh	r2, [r3, #2014]
2297:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
 26810              		.loc 1 2297 2 view .LVU7008
 26811 0024 2046     		mov	r0, r4
 26812 0026 42F34A12 		sbfx	r2, r2, #5, #11
 26813 002a 0121     		movs	r1, #1
 26814 002c FFF7FEFF 		bl	gsbgto
 26815              	.LVL2064:
2298:src/xeq.c     **** 	gsbgto(target, 1, pc);		     // Push return address, transfer control
 26816              		.loc 1 2298 2 is_stmt 1 view .LVU7009
 26817 0030 2046     		mov	r0, r4
 26818 0032 D8F80020 		ldr	r2, [r8]
 26819 0036 0121     		movs	r1, #1
 26820 0038 FFF7FEFF 		bl	gsbgto
 26821              	.LVL2065:
2299:src/xeq.c     **** 
 26822              		.loc 1 2299 2 view .LVU7010
 26823 003c 2246     		mov	r2, r4
 26824 003e 3046     		mov	r0, r6
 26825 0040 0121     		movs	r1, #1
 26826 0042 FFF7FEFF 		bl	gsbgto
 26827              	.LVL2066:
2301:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
 26828              		.loc 1 2301 2 view .LVU7011
2302:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26829              		.loc 1 2302 9 is_stmt 0 view .LVU7012
 26830 0046 2A68     		ldr	r2, [r5]
2302:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26831              		.loc 1 2302 20 view .LVU7013
 26832 0048 1149     		ldr	r1, .L1935+8
2302:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26833              		.loc 1 2302 9 view .LVU7014
 26834 004a B2F8DE37 		ldrh	r3, [r2, #2014]
2302:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26835              		.loc 1 2302 20 view .LVU7015
 26836 004e 0868     		ldr	r0, [r1]
2303:src/xeq.c     **** 	if (! Running)
 26837              		.loc 1 2303 12 view .LVU7016
 26838 0050 D8F80050 		ldr	r5, [r8]
2304:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
ARM GAS  /tmp/ccqED0AM.s 			page 687


 26839              		.loc 1 2304 6 view .LVU7017
 26840 0054 0F4C     		ldr	r4, .L1935+12
 26841              	.LVL2067:
2302:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26842              		.loc 1 2302 20 view .LVU7018
 26843 0056 43F34A13 		sbfx	r3, r3, #5, #11
2301:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
 26844              		.loc 1 2301 13 view .LVU7019
 26845 005a 0026     		movs	r6, #0
2302:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26846              		.loc 1 2302 20 view .LVU7020
 26847 005c 30F81310 		ldrh	r1, [r0, r3, lsl #1]
2301:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
 26848              		.loc 1 2301 13 view .LVU7021
 26849 0060 3E60     		str	r6, [r7]
2302:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26850              		.loc 1 2302 2 is_stmt 1 view .LVU7022
2302:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26851              		.loc 1 2302 20 is_stmt 0 view .LVU7023
 26852 0062 41F40051 		orr	r1, r1, #8192
 26853 0066 20F81310 		strh	r1, [r0, r3, lsl #1]	@ movhi
2303:src/xeq.c     **** 	if (! Running)
 26854              		.loc 1 2303 2 is_stmt 1 view .LVU7024
2303:src/xeq.c     **** 	if (! Running)
 26855              		.loc 1 2303 12 is_stmt 0 view .LVU7025
 26856 006a B2F8DE37 		ldrh	r3, [r2, #2014]
 26857 006e 65F34F13 		bfi	r3, r5, #5, #11
 26858 0072 A2F8DE37 		strh	r3, [r2, #2014]	@ movhi
2304:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
 26859              		.loc 1 2304 2 is_stmt 1 view .LVU7026
2304:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
 26860              		.loc 1 2304 5 is_stmt 0 view .LVU7027
 26861 0076 2368     		ldr	r3, [r4]
 26862 0078 0BB1     		cbz	r3, .L1934
2307:src/xeq.c     **** 
 26863              		.loc 1 2307 1 view .LVU7028
 26864 007a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 26865              	.L1934:
2305:src/xeq.c     **** 	watchdog();			     // Just for safety. Shouldn't be needed.
 26866              		.loc 1 2305 3 is_stmt 1 view .LVU7029
2307:src/xeq.c     **** 
 26867              		.loc 1 2307 1 is_stmt 0 view .LVU7030
 26868 007e BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 26869              		.cfi_restore 14
 26870              		.cfi_restore 8
 26871              		.cfi_restore 7
 26872              		.cfi_restore 6
 26873              		.cfi_restore 5
 26874              		.cfi_restore 4
 26875              		.cfi_def_cfa_offset 0
2305:src/xeq.c     **** 	watchdog();			     // Just for safety. Shouldn't be needed.
 26876              		.loc 1 2305 3 view .LVU7031
 26877 0082 FFF7FEBF 		b	set_running_on
 26878              	.LVL2068:
 26879              	.L1936:
 26880 0086 00BF     		.align	2
 26881              	.L1935:
ARM GAS  /tmp/ccqED0AM.s 			page 688


 26882 0088 00000000 		.word	main_ram
 26883 008c 00000000 		.word	XromUserPc
 26884 0090 00000000 		.word	RetStk
 26885 0094 00000000 		.word	Running
 26886 0098 00000000 		.word	UserLocalRegs
 26887              		.cfi_endproc
 26888              	.LFE157:
 26890              		.section	.text.do_usergsb,"ax",%progbits
 26891              		.align	1
 26892              		.p2align 2,,3
 26893              		.global	do_usergsb
 26894              		.syntax unified
 26895              		.thumb
 26896              		.thumb_func
 26897              		.fpu fpv4-sp-d16
 26899              	do_usergsb:
 26900              	.LVL2069:
 26901              	.LFB158:
2313:src/xeq.c     **** 	usergsb_common(XromUserPc);
 26902              		.loc 1 2313 32 is_stmt 1 view -0
 26903              		.cfi_startproc
 26904              		@ args = 0, pretend = 0, frame = 0
 26905              		@ frame_needed = 0, uses_anonymous_args = 0
2314:src/xeq.c     ****         fill(OP_FILL);
 26906              		.loc 1 2314 2 view .LVU7033
2313:src/xeq.c     **** 	usergsb_common(XromUserPc);
 26907              		.loc 1 2313 32 is_stmt 0 view .LVU7034
 26908 0000 08B5     		push	{r3, lr}
 26909              		.cfi_def_cfa_offset 8
 26910              		.cfi_offset 3, -8
 26911              		.cfi_offset 14, -4
2314:src/xeq.c     ****         fill(OP_FILL);
 26912              		.loc 1 2314 2 view .LVU7035
 26913 0002 044B     		ldr	r3, .L1939
 26914 0004 1888     		ldrh	r0, [r3]
 26915              	.LVL2070:
2314:src/xeq.c     ****         fill(OP_FILL);
 26916              		.loc 1 2314 2 view .LVU7036
 26917 0006 FFF7FEFF 		bl	usergsb_common
 26918              	.LVL2071:
2315:src/xeq.c     **** }
 26919              		.loc 1 2315 9 is_stmt 1 view .LVU7037
2316:src/xeq.c     **** 
 26920              		.loc 1 2316 1 is_stmt 0 view .LVU7038
 26921 000a BDE80840 		pop	{r3, lr}
 26922              		.cfi_restore 14
 26923              		.cfi_restore 3
 26924              		.cfi_def_cfa_offset 0
2315:src/xeq.c     **** }
 26925              		.loc 1 2315 9 view .LVU7039
 26926 000e 0C20     		movs	r0, #12
 26927 0010 FFF7FEBF 		b	fill
 26928              	.LVL2072:
 26929              	.L1940:
 26930              		.align	2
 26931              	.L1939:
 26932 0014 00000000 		.word	XromUserPc
ARM GAS  /tmp/ccqED0AM.s 			page 689


 26933              		.cfi_endproc
 26934              	.LFE158:
 26936              		.section	.text.cmdmultigto,"ax",%progbits
 26937              		.align	1
 26938              		.p2align 2,,3
 26939              		.global	cmdmultigto
 26940              		.syntax unified
 26941              		.thumb
 26942              		.thumb_func
 26943              		.fpu fpv4-sp-d16
 26945              	cmdmultigto:
 26946              	.LVL2073:
 26947              	.LFB165:
2372:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
 26948              		.loc 1 2372 54 is_stmt 1 view -0
 26949              		.cfi_startproc
 26950              		@ args = 0, pretend = 0, frame = 0
 26951              		@ frame_needed = 0, uses_anonymous_args = 0
2373:src/xeq.c     **** 		// In XROM the command behaves differently!
 26952              		.loc 1 2373 2 view .LVU7041
2373:src/xeq.c     **** 		// In XROM the command behaves differently!
 26953              		.loc 1 2373 5 is_stmt 0 view .LVU7042
 26954 0000 0229     		cmp	r1, #2
2372:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
 26955              		.loc 1 2372 54 view .LVU7043
 26956 0002 10B5     		push	{r4, lr}
 26957              		.cfi_def_cfa_offset 8
 26958              		.cfi_offset 4, -8
 26959              		.cfi_offset 14, -4
2372:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
 26960              		.loc 1 2372 54 view .LVU7044
 26961 0004 0346     		mov	r3, r0
 26962 0006 0C46     		mov	r4, r1
2373:src/xeq.c     **** 		// In XROM the command behaves differently!
 26963              		.loc 1 2373 5 view .LVU7045
 26964 0008 06D1     		bne	.L1942
 26965              	.LBB3561:
 26966              	.LBI3561:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 26967              		.loc 1 185 5 is_stmt 1 view .LVU7046
 26968              	.LBB3562:
 186:src/xeq.c     **** }
 26969              		.loc 1 186 2 view .LVU7047
 186:src/xeq.c     **** }
 26970              		.loc 1 186 9 is_stmt 0 view .LVU7048
 26971 000a 104A     		ldr	r2, .L1946
 26972 000c 1268     		ldr	r2, [r2]
 26973 000e B2F8E027 		ldrh	r2, [r2, #2016]
 26974              	.LBE3562:
 26975              	.LBE3561:
2373:src/xeq.c     **** 		// In XROM the command behaves differently!
 26976              		.loc 1 2373 22 view .LVU7049
 26977 0012 920B     		lsrs	r2, r2, #14
 26978 0014 032A     		cmp	r2, #3
 26979 0016 0BD0     		beq	.L1945
 26980              	.L1942:
2382:src/xeq.c     **** 	}
ARM GAS  /tmp/ccqED0AM.s 			page 690


 26981              		.loc 1 2382 3 is_stmt 1 view .LVU7050
 26982 0018 0121     		movs	r1, #1
 26983              	.LVL2074:
2382:src/xeq.c     **** 	}
 26984              		.loc 1 2382 3 is_stmt 0 view .LVU7051
 26985 001a 1846     		mov	r0, r3
 26986              	.LVL2075:
2382:src/xeq.c     **** 	}
 26987              		.loc 1 2382 3 view .LVU7052
 26988 001c FFF7FEFF 		bl	findmultilbl
 26989              	.LVL2076:
2382:src/xeq.c     **** 	}
 26990              		.loc 1 2382 3 view .LVU7053
 26991 0020 0146     		mov	r1, r0
 26992 0022 E01E     		subs	r0, r4, #3
 26993 0024 18BF     		it	ne
 26994 0026 0120     		movne	r0, #1
2384:src/xeq.c     **** 
 26995              		.loc 1 2384 1 view .LVU7054
 26996 0028 BDE81040 		pop	{r4, lr}
 26997              		.cfi_remember_state
 26998              		.cfi_restore 14
 26999              		.cfi_restore 4
 27000              		.cfi_def_cfa_offset 0
2382:src/xeq.c     **** 	}
 27001              		.loc 1 2382 3 view .LVU7055
 27002 002c FFF7FEBF 		b	cmdgtocommon
 27003              	.LVL2077:
 27004              	.L1945:
 27005              		.cfi_restore_state
 27006              	.LBB3563:
2375:src/xeq.c     **** 		if (target != 0)
 27007              		.loc 1 2375 3 is_stmt 1 view .LVU7056
2375:src/xeq.c     **** 		if (target != 0)
 27008              		.loc 1 2375 31 is_stmt 0 view .LVU7057
 27009 0030 0021     		movs	r1, #0
 27010              	.LVL2078:
2375:src/xeq.c     **** 		if (target != 0)
 27011              		.loc 1 2375 31 view .LVU7058
 27012 0032 FFF7FEFF 		bl	findmultilbl
 27013              	.LVL2079:
2375:src/xeq.c     **** 		if (target != 0)
 27014              		.loc 1 2375 22 view .LVU7059
 27015 0036 80B2     		uxth	r0, r0
 27016              	.LVL2080:
2376:src/xeq.c     **** 			usergsb_common(target); 
 27017              		.loc 1 2376 3 is_stmt 1 view .LVU7060
2376:src/xeq.c     **** 			usergsb_common(target); 
 27018              		.loc 1 2376 6 is_stmt 0 view .LVU7061
 27019 0038 18B1     		cbz	r0, .L1943
2377:src/xeq.c     **** 		else
 27020              		.loc 1 2377 4 is_stmt 1 view .LVU7062
 27021              	.LBE3563:
2384:src/xeq.c     **** 
 27022              		.loc 1 2384 1 is_stmt 0 view .LVU7063
 27023 003a BDE81040 		pop	{r4, lr}
 27024              		.cfi_remember_state
ARM GAS  /tmp/ccqED0AM.s 			page 691


 27025              		.cfi_restore 14
 27026              		.cfi_restore 4
 27027              		.cfi_def_cfa_offset 0
 27028              	.LBB3564:
2377:src/xeq.c     **** 		else
 27029              		.loc 1 2377 4 view .LVU7064
 27030 003e FFF7FEBF 		b	usergsb_common
 27031              	.LVL2081:
 27032              	.L1943:
 27033              		.cfi_restore_state
2379:src/xeq.c     **** 	}
 27034              		.loc 1 2379 4 is_stmt 1 view .LVU7065
 27035              	.LBE3564:
2384:src/xeq.c     **** 
 27036              		.loc 1 2384 1 is_stmt 0 view .LVU7066
 27037 0042 BDE81040 		pop	{r4, lr}
 27038              		.cfi_restore 14
 27039              		.cfi_restore 4
 27040              		.cfi_def_cfa_offset 0
 27041              	.LBB3565:
2379:src/xeq.c     **** 	}
 27042              		.loc 1 2379 4 view .LVU7067
 27043 0046 FFF7FEBF 		b	incpc
 27044              	.LVL2082:
 27045              	.L1947:
2379:src/xeq.c     **** 	}
 27046              		.loc 1 2379 4 view .LVU7068
 27047 004a 00BF     		.align	2
 27048              	.L1946:
 27049 004c 00000000 		.word	main_ram
 27050              	.LBE3565:
 27051              		.cfi_endproc
 27052              	.LFE165:
 27054              		.section	.text.store_a_to_d,"ax",%progbits
 27055              		.align	1
 27056              		.p2align 2,,3
 27057              		.global	store_a_to_d
 27058              		.syntax unified
 27059              		.thumb
 27060              		.thumb_func
 27061              		.fpu fpv4-sp-d16
 27063              	store_a_to_d:
 27064              	.LVL2083:
 27065              	.LFB264:
5834:src/xeq.c     **** 
5835:src/xeq.c     **** /* Command to stash registers A through D into volatile RAM and to restore them
5836:src/xeq.c     ****  * again.
5837:src/xeq.c     ****  */
5838:src/xeq.c     **** void store_a_to_d(enum nilop op) {
 27066              		.loc 1 5838 34 is_stmt 1 view -0
 27067              		.cfi_startproc
 27068              		@ args = 0, pretend = 0, frame = 0
 27069              		@ frame_needed = 0, uses_anonymous_args = 0
5839:src/xeq.c     **** 	const void *src = XromA2D;
 27070              		.loc 1 5839 2 view .LVU7070
5840:src/xeq.c     **** 	void *dest = get_reg_n(regA_idx);
 27071              		.loc 1 5840 2 view .LVU7071
ARM GAS  /tmp/ccqED0AM.s 			page 692


5838:src/xeq.c     **** 	const void *src = XromA2D;
 27072              		.loc 1 5838 34 is_stmt 0 view .LVU7072
 27073 0000 10B5     		push	{r4, lr}
 27074              		.cfi_def_cfa_offset 8
 27075              		.cfi_offset 4, -8
 27076              		.cfi_offset 14, -4
5838:src/xeq.c     **** 	const void *src = XromA2D;
 27077              		.loc 1 5838 34 view .LVU7073
 27078 0002 0446     		mov	r4, r0
 27079              		.loc 1 5840 15 view .LVU7074
 27080 0004 6820     		movs	r0, #104
 27081              	.LVL2084:
 27082              		.loc 1 5840 15 view .LVU7075
 27083 0006 FFF7FEFF 		bl	get_reg_n
 27084              	.LVL2085:
5841:src/xeq.c     **** 
5842:src/xeq.c     **** 	if (op == OP_SAVEA2D) {
 27085              		.loc 1 5842 2 is_stmt 1 view .LVU7076
 27086              		.loc 1 5842 5 is_stmt 0 view .LVU7077
 27087 000a 802C     		cmp	r4, #128
5843:src/xeq.c     **** 		src = dest;
 27088              		.loc 1 5843 7 view .LVU7078
 27089 000c 08BF     		it	eq
 27090 000e 0146     		moveq	r1, r0
5844:src/xeq.c     **** 		dest = XromA2D;
5845:src/xeq.c     **** 	}
5846:src/xeq.c     **** 	xcopy(dest, src, sizeof(REGISTER) * 4);
5847:src/xeq.c     **** }
 27091              		.loc 1 5847 1 view .LVU7079
 27092 0010 BDE81040 		pop	{r4, lr}
 27093              		.cfi_restore 14
 27094              		.cfi_restore 4
 27095              		.cfi_def_cfa_offset 0
5844:src/xeq.c     **** 		dest = XromA2D;
 27096              		.loc 1 5844 8 view .LVU7080
 27097 0014 0CBF     		ite	eq
 27098 0016 0248     		ldreq	r0, .L1952
 27099              	.LVL2086:
5839:src/xeq.c     **** 	void *dest = get_reg_n(regA_idx);
 27100              		.loc 1 5839 14 view .LVU7081
 27101 0018 0149     		ldrne	r1, .L1952
 27102              	.LVL2087:
5846:src/xeq.c     **** }
 27103              		.loc 1 5846 2 is_stmt 1 view .LVU7082
 27104 001a 4022     		movs	r2, #64
 27105 001c FFF7FEBF 		b	xcopy
 27106              	.LVL2088:
 27107              	.L1953:
5846:src/xeq.c     **** }
 27108              		.loc 1 5846 2 is_stmt 0 view .LVU7083
 27109              		.align	2
 27110              	.L1952:
 27111 0020 00000000 		.word	XromA2D
 27112              		.cfi_endproc
 27113              	.LFE264:
 27115              		.section	.text.cmdlocr,"ax",%progbits
 27116              		.align	1
ARM GAS  /tmp/ccqED0AM.s 			page 693


 27117              		.p2align 2,,3
 27118              		.global	cmdlocr
 27119              		.syntax unified
 27120              		.thumb
 27121              		.thumb_func
 27122              		.fpu fpv4-sp-d16
 27124              	cmdlocr:
 27125              	.LVL2089:
 27126              	.LFB265:
5848:src/xeq.c     **** 
5849:src/xeq.c     **** /*
5850:src/xeq.c     ****  *  Command to support local variables.
5851:src/xeq.c     ****  *  A stack frame is constructed:
5852:src/xeq.c     ****  *	marker including size of frame,
5853:src/xeq.c     ****  *	register + flag area.
5854:src/xeq.c     ****  *  Registers must reside on even stack positions
5855:src/xeq.c     ****  *  so the flag word is either at the top or at the bottom of the frame.
5856:src/xeq.c     ****  */
5857:src/xeq.c     **** void cmdlocr(unsigned int arg, enum rarg op) {
 27127              		.loc 1 5857 46 is_stmt 1 view -0
 27128              		.cfi_startproc
 27129              		@ args = 0, pretend = 0, frame = 8
 27130              		@ frame_needed = 0, uses_anonymous_args = 0
5858:src/xeq.c     **** 	short int sp = RetStkPtr;
 27131              		.loc 1 5858 2 view .LVU7085
5857:src/xeq.c     **** 	short int sp = RetStkPtr;
 27132              		.loc 1 5857 46 is_stmt 0 view .LVU7086
 27133 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 27134              		.cfi_def_cfa_offset 36
 27135              		.cfi_offset 4, -36
 27136              		.cfi_offset 5, -32
 27137              		.cfi_offset 6, -28
 27138              		.cfi_offset 7, -24
 27139              		.cfi_offset 8, -20
 27140              		.cfi_offset 9, -16
 27141              		.cfi_offset 10, -12
 27142              		.cfi_offset 11, -8
 27143              		.cfi_offset 14, -4
 27144              		.loc 1 5858 17 view .LVU7087
 27145 0004 DFF88081 		ldr	r8, .L1974+8
 27146 0008 D8F80010 		ldr	r1, [r8]
 27147              	.LVL2090:
 27148              	.LBB3575:
 27149              	.LBB3576:
1119:src/xeq.c     **** }
 27150              		.loc 1 1119 24 view .LVU7088
 27151 000c B1F8E847 		ldrh	r4, [r1, #2024]
 27152              	.LBE3576:
 27153              	.LBE3575:
 27154              		.loc 1 5858 12 view .LVU7089
 27155 0010 B1F9E277 		ldrsh	r7, [r1, #2018]
 27156              	.LVL2091:
5859:src/xeq.c     **** 	int size = (arg << (is_dblmode() ? 3 : 2)) + 2;
 27157              		.loc 1 5859 2 is_stmt 1 view .LVU7090
 27158              	.LBB3578:
 27159              	.LBI3575:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
ARM GAS  /tmp/ccqED0AM.s 			page 694


 27160              		.loc 1 1118 5 view .LVU7091
 27161              	.LBB3577:
1119:src/xeq.c     **** }
 27162              		.loc 1 1119 2 view .LVU7092
1119:src/xeq.c     **** }
 27163              		.loc 1 1119 24 is_stmt 0 view .LVU7093
 27164 0014 44F20102 		movw	r2, #16385
 27165              	.LBE3577:
 27166              	.LBE3578:
 27167              		.loc 1 5859 39 view .LVU7094
 27168 0018 2240     		ands	r2, r2, r4
 27169 001a B2F5804F 		cmp	r2, #16384
 27170 001e 0CBF     		ite	eq
 27171 0020 0325     		moveq	r5, #3
 27172 0022 0225     		movne	r5, #2
 27173              		.loc 1 5859 18 view .LVU7095
 27174 0024 A840     		lsls	r0, r0, r5
 27175              	.LVL2092:
 27176              		.loc 1 5859 45 view .LVU7096
 27177 0026 851C     		adds	r5, r0, #2
 27178              	.LVL2093:
5860:src/xeq.c     **** 	const unsigned short marker = LOCAL_MARKER | size;
 27179              		.loc 1 5860 2 is_stmt 1 view .LVU7097
5857:src/xeq.c     **** 	short int sp = RetStkPtr;
 27180              		.loc 1 5857 46 is_stmt 0 view .LVU7098
 27181 0028 83B0     		sub	sp, sp, #12
 27182              		.cfi_def_cfa_offset 48
 27183              		.loc 1 5860 45 view .LVU7099
 27184 002a 1FFA85F9 		uxth	r9, r5
 27185              	.LVL2094:
5861:src/xeq.c     **** 	int old_size = 0;
 27186              		.loc 1 5861 2 is_stmt 1 view .LVU7100
5862:src/xeq.c     **** 	short unsigned int old_flags = 0;
 27187              		.loc 1 5862 2 view .LVU7101
5863:src/xeq.c     **** 
5864:src/xeq.c     **** 	if (sp != 0 && sp == LocalRegs) {
 27188              		.loc 1 5864 2 view .LVU7102
 27189              		.loc 1 5864 5 is_stmt 0 view .LVU7103
 27190 002e 7FB9     		cbnz	r7, .L1956
 27191              	.LVL2095:
5865:src/xeq.c     **** 		// resize required
5866:src/xeq.c     **** 		old_size = local_levels();
5867:src/xeq.c     **** 		sp += old_size;
5868:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
5869:src/xeq.c     **** 	}
5870:src/xeq.c     **** 	// compute space needed
5871:src/xeq.c     **** 	sp -= size;
 27192              		.loc 1 5871 2 is_stmt 1 view .LVU7104
5872:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27193              		.loc 1 5872 10 is_stmt 0 view .LVU7105
 27194 0030 534A     		ldr	r2, .L1974
5871:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27195              		.loc 1 5871 5 view .LVU7106
 27196 0032 C9F10004 		rsb	r4, r9, #0
 27197 0036 26B2     		sxth	r6, r4
 27198              	.LVL2096:
 27199              		.loc 1 5872 2 is_stmt 1 view .LVU7107
ARM GAS  /tmp/ccqED0AM.s 			page 695


 27200              		.loc 1 5872 5 is_stmt 0 view .LVU7108
 27201 0038 1268     		ldr	r2, [r2]
 27202              		.loc 1 5872 6 view .LVU7109
 27203 003a 7142     		rsbs	r1, r6, #0
 27204              		.loc 1 5872 5 view .LVU7110
 27205 003c 9142     		cmp	r1, r2
5871:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27206              		.loc 1 5871 5 view .LVU7111
 27207 003e A4B2     		uxth	r4, r4
 27208              		.loc 1 5872 5 view .LVU7112
 27209 0040 4CDC     		bgt	.L1962
 27210 0042 7600     		lsls	r6, r6, #1
 27211              	.LVL2097:
 27212              		.loc 1 5872 5 view .LVU7113
 27213 0044 DFF844B1 		ldr	fp, .L1974+12
 27214 0048 4FEA450A 		lsl	r10, r5, #1
 27215 004c 3346     		mov	r3, r6
 27216 004e 15E0     		b	.L1960
 27217              	.LVL2098:
 27218              	.L1956:
5864:src/xeq.c     **** 		// resize required
 27219              		.loc 1 5864 23 discriminator 1 view .LVU7114
 27220 0050 B1F8DE47 		ldrh	r4, [r1, #2014]
 27221 0054 44F34A14 		sbfx	r4, r4, #5, #11
5864:src/xeq.c     **** 		// resize required
 27222              		.loc 1 5864 14 discriminator 1 view .LVU7115
 27223 0058 BC42     		cmp	r4, r7
 27224 005a 30D0     		beq	.L1961
5871:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27225              		.loc 1 5871 2 is_stmt 1 view .LVU7116
 27226              		.loc 1 5872 10 is_stmt 0 view .LVU7117
 27227 005c 484A     		ldr	r2, .L1974
5871:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27228              		.loc 1 5871 5 view .LVU7118
 27229 005e A7EB0904 		sub	r4, r7, r9
 27230              		.loc 1 5872 5 view .LVU7119
 27231 0062 1368     		ldr	r3, [r2]
5871:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27232              		.loc 1 5871 5 view .LVU7120
 27233 0064 26B2     		sxth	r6, r4
 27234              	.LVL2099:
 27235              		.loc 1 5872 2 is_stmt 1 view .LVU7121
 27236              		.loc 1 5872 6 is_stmt 0 view .LVU7122
 27237 0066 7242     		rsbs	r2, r6, #0
 27238              		.loc 1 5872 5 view .LVU7123
 27239 0068 9A42     		cmp	r2, r3
5871:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27240              		.loc 1 5871 5 view .LVU7124
 27241 006a A4B2     		uxth	r4, r4
 27242              		.loc 1 5872 5 view .LVU7125
 27243 006c 36DC     		bgt	.L1962
 27244 006e 7600     		lsls	r6, r6, #1
 27245              	.LVL2100:
 27246              		.loc 1 5872 5 view .LVU7126
 27247 0070 DFF818B1 		ldr	fp, .L1974+12
 27248 0074 4FEA450A 		lsl	r10, r5, #1
 27249 0078 3346     		mov	r3, r6
ARM GAS  /tmp/ccqED0AM.s 			page 696


5862:src/xeq.c     **** 
 27250              		.loc 1 5862 21 view .LVU7127
 27251 007a 0027     		movs	r7, #0
 27252              	.LVL2101:
 27253              	.L1960:
5873:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
5874:src/xeq.c     **** 		return;
5875:src/xeq.c     **** 	}
5876:src/xeq.c     **** 	if ( old_size > 0 ) {
5877:src/xeq.c     **** 		// move previous contents to new destination
5878:src/xeq.c     **** 		int n;
5879:src/xeq.c     **** 		if (size > old_size) {
5880:src/xeq.c     **** 			n = old_size;
5881:src/xeq.c     **** 			size -= old_size;
5882:src/xeq.c     **** 		}
5883:src/xeq.c     **** 		else {
5884:src/xeq.c     **** 			n = size;
5885:src/xeq.c     **** 			size = 0;
5886:src/xeq.c     **** 		}
5887:src/xeq.c     **** 		xcopy(RetStk + sp, RetStk + LocalRegs, n + n);
5888:src/xeq.c     **** 	}
5889:src/xeq.c     **** 	// fill the rest with 0
5890:src/xeq.c     **** 	xset(RetStk + sp + old_size, 0, size + size);
 27254              		.loc 1 5890 2 is_stmt 1 view .LVU7128
 27255              		.loc 1 5890 19 is_stmt 0 view .LVU7129
 27256 007c DBF80000 		ldr	r0, [fp]
 27257              		.loc 1 5890 2 view .LVU7130
 27258 0080 5246     		mov	r2, r10
 27259 0082 1844     		add	r0, r0, r3
 27260 0084 0021     		movs	r1, #0
 27261 0086 FFF7FEFF 		bl	xset
 27262              	.LVL2102:
5891:src/xeq.c     **** 
5892:src/xeq.c     **** 	// set marker, pointers and flags
5893:src/xeq.c     **** 	RetStk[sp] = marker;
 27263              		.loc 1 5893 2 is_stmt 1 view .LVU7131
 27264              		.loc 1 5893 13 is_stmt 0 view .LVU7132
 27265 008a DBF80020 		ldr	r2, [fp]
5894:src/xeq.c     **** 	RetStkPtr = LocalRegs = sp;
 27266              		.loc 1 5894 14 view .LVU7133
 27267 008e D8F80030 		ldr	r3, [r8]
5860:src/xeq.c     **** 	int old_size = 0;
 27268              		.loc 1 5860 23 view .LVU7134
 27269 0092 49F48059 		orr	r9, r9, #4096
 27270              	.LVL2103:
5893:src/xeq.c     **** 	RetStkPtr = LocalRegs = sp;
 27271              		.loc 1 5893 13 view .LVU7135
 27272 0096 22F80690 		strh	r9, [r2, r6]	@ movhi
 27273              		.loc 1 5894 2 is_stmt 1 view .LVU7136
 27274              		.loc 1 5894 24 is_stmt 0 view .LVU7137
 27275 009a B3F8DE27 		ldrh	r2, [r3, #2014]
 27276 009e 44F30A04 		sbfx	r4, r4, #0, #11
 27277 00a2 64F34F12 		bfi	r2, r4, #5, #11
 27278              		.loc 1 5894 12 view .LVU7138
 27279 00a6 A3F8E247 		strh	r4, [r3, #2018]	@ movhi
5895:src/xeq.c     **** 	*flag_word(LOCAL_FLAG_BASE, NULL) = old_flags;
 27280              		.loc 1 5895 2 is_stmt 1 view .LVU7139
ARM GAS  /tmp/ccqED0AM.s 			page 697


5894:src/xeq.c     **** 	*flag_word(LOCAL_FLAG_BASE, NULL) = old_flags;
 27281              		.loc 1 5894 24 is_stmt 0 view .LVU7140
 27282 00aa A3F8DE27 		strh	r2, [r3, #2014]	@ movhi
 27283              		.loc 1 5895 3 view .LVU7141
 27284 00ae 0021     		movs	r1, #0
 27285 00b0 7020     		movs	r0, #112
 27286 00b2 FFF7FEFF 		bl	flag_word
 27287              	.LVL2104:
 27288              		.loc 1 5895 36 view .LVU7142
 27289 00b6 0780     		strh	r7, [r0]	@ movhi
 27290              	.L1954:
5896:src/xeq.c     **** }
 27291              		.loc 1 5896 1 view .LVU7143
 27292 00b8 03B0     		add	sp, sp, #12
 27293              		.cfi_remember_state
 27294              		.cfi_def_cfa_offset 36
 27295              		@ sp needed
 27296 00ba BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 27297              	.LVL2105:
 27298              	.L1961:
 27299              		.cfi_restore_state
5866:src/xeq.c     **** 		sp += old_size;
 27300              		.loc 1 5866 3 is_stmt 1 view .LVU7144
 27301              	.LBB3579:
 27302              	.LBI3579:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 27303              		.loc 1 217 5 view .LVU7145
 27304              	.LBB3580:
 218:src/xeq.c     **** }
 27305              		.loc 1 218 2 view .LVU7146
 218:src/xeq.c     **** }
 27306              		.loc 1 218 57 is_stmt 0 view .LVU7147
 27307 00be 002C     		cmp	r4, #0
 27308 00c0 15DB     		blt	.L1971
 218:src/xeq.c     **** }
 27309              		.loc 1 218 57 view .LVU7148
 27310              	.LBE3580:
 27311              	.LBE3579:
5867:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 27312              		.loc 1 5867 3 is_stmt 1 view .LVU7149
 27313              	.LVL2106:
5868:src/xeq.c     **** 	}
 27314              		.loc 1 5868 3 view .LVU7150
5868:src/xeq.c     **** 	}
 27315              		.loc 1 5868 16 is_stmt 0 view .LVU7151
 27316 00c2 0021     		movs	r1, #0
 27317 00c4 7020     		movs	r0, #112
 27318 00c6 FFF7FEFF 		bl	flag_word
 27319              	.LVL2107:
5872:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27320              		.loc 1 5872 10 view .LVU7152
 27321 00ca 2D4B     		ldr	r3, .L1974
5871:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27322              		.loc 1 5871 5 view .LVU7153
 27323 00cc A4EB0904 		sub	r4, r4, r9
 27324              	.LVL2108:
5871:src/xeq.c     **** 	if (-sp > RetStkSize) {
ARM GAS  /tmp/ccqED0AM.s 			page 698


 27325              		.loc 1 5871 5 view .LVU7154
 27326 00d0 26B2     		sxth	r6, r4
5872:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27327              		.loc 1 5872 5 view .LVU7155
 27328 00d2 1B68     		ldr	r3, [r3]
5872:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27329              		.loc 1 5872 6 view .LVU7156
 27330 00d4 7242     		rsbs	r2, r6, #0
 27331              	.LVL2109:
5871:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27332              		.loc 1 5871 2 is_stmt 1 view .LVU7157
5872:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27333              		.loc 1 5872 2 view .LVU7158
5872:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27334              		.loc 1 5872 5 is_stmt 0 view .LVU7159
 27335 00d6 9A42     		cmp	r2, r3
5871:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27336              		.loc 1 5871 5 view .LVU7160
 27337 00d8 A4B2     		uxth	r4, r4
5872:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27338              		.loc 1 5872 5 view .LVU7161
 27339 00da 43DD     		ble	.L1972
 27340              	.LVL2110:
 27341              	.L1962:
5873:src/xeq.c     **** 		return;
 27342              		.loc 1 5873 3 is_stmt 1 view .LVU7162
 27343              	.LBB3582:
 27344              	.LBI3582:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27345              		.loc 1 546 5 view .LVU7163
 27346              	.LBB3583:
 547:src/xeq.c     **** 		Error = e;
 27347              		.loc 1 547 2 view .LVU7164
 547:src/xeq.c     **** 		Error = e;
 27348              		.loc 1 547 12 is_stmt 0 view .LVU7165
 27349 00dc 294B     		ldr	r3, .L1974+4
 547:src/xeq.c     **** 		Error = e;
 27350              		.loc 1 547 5 view .LVU7166
 27351 00de 1A68     		ldr	r2, [r3]
 27352 00e0 002A     		cmp	r2, #0
 27353 00e2 E9D1     		bne	.L1954
 27354              	.LVL2111:
 27355              	.LBB3584:
 27356              	.LBI3584:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27357              		.loc 1 546 5 is_stmt 1 view .LVU7167
 27358              	.LBB3585:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 27359              		.loc 1 548 3 view .LVU7168
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 27360              		.loc 1 548 9 is_stmt 0 view .LVU7169
 27361 00e4 0B22     		movs	r2, #11
 27362 00e6 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 27363              		.loc 1 549 3 is_stmt 1 view .LVU7170
 27364              	.LBE3585:
 27365              	.LBE3584:
ARM GAS  /tmp/ccqED0AM.s 			page 699


 27366              	.LBE3583:
 27367              	.LBE3582:
 27368              		.loc 1 5896 1 is_stmt 0 view .LVU7171
 27369 00e8 03B0     		add	sp, sp, #12
 27370              		.cfi_remember_state
 27371              		.cfi_def_cfa_offset 36
 27372              		@ sp needed
 27373 00ea BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 27374              	.LVL2112:
 27375              	.L1971:
 27376              		.cfi_restore_state
 27377              	.LBB3586:
 27378              	.LBB3581:
 218:src/xeq.c     **** }
 27379              		.loc 1 218 25 view .LVU7172
 27380 00ee DFF89CB0 		ldr	fp, .L1974+12
 27381 00f2 DBF80030 		ldr	r3, [fp]
 27382 00f6 33F81430 		ldrh	r3, [r3, r4, lsl #1]
 27383 00fa C3F30B03 		ubfx	r3, r3, #0, #12
 27384              	.LVL2113:
 218:src/xeq.c     **** }
 27385              		.loc 1 218 25 view .LVU7173
 27386              	.LBE3581:
 27387              	.LBE3586:
5867:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 27388              		.loc 1 5867 3 is_stmt 1 view .LVU7174
5867:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 27389              		.loc 1 5867 6 is_stmt 0 view .LVU7175
 27390 00fe 1C44     		add	r4, r4, r3
5868:src/xeq.c     **** 	}
 27391              		.loc 1 5868 16 view .LVU7176
 27392 0100 0021     		movs	r1, #0
 27393 0102 7020     		movs	r0, #112
5867:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 27394              		.loc 1 5867 6 view .LVU7177
 27395 0104 0193     		str	r3, [sp, #4]
 27396 0106 A4B2     		uxth	r4, r4
 27397              	.LVL2114:
5868:src/xeq.c     **** 	}
 27398              		.loc 1 5868 3 is_stmt 1 view .LVU7178
5868:src/xeq.c     **** 	}
 27399              		.loc 1 5868 16 is_stmt 0 view .LVU7179
 27400 0108 FFF7FEFF 		bl	flag_word
 27401              	.LVL2115:
5872:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27402              		.loc 1 5872 10 view .LVU7180
 27403 010c 1C4A     		ldr	r2, .L1974
5868:src/xeq.c     **** 	}
 27404              		.loc 1 5868 13 view .LVU7181
 27405 010e 0788     		ldrh	r7, [r0]
 27406              	.LVL2116:
5871:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27407              		.loc 1 5871 2 is_stmt 1 view .LVU7182
5872:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27408              		.loc 1 5872 5 is_stmt 0 view .LVU7183
 27409 0110 1268     		ldr	r2, [r2]
 27410 0112 019B     		ldr	r3, [sp, #4]
ARM GAS  /tmp/ccqED0AM.s 			page 700


5871:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27411              		.loc 1 5871 5 view .LVU7184
 27412 0114 A4EB0904 		sub	r4, r4, r9
 27413              	.LVL2117:
5871:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27414              		.loc 1 5871 5 view .LVU7185
 27415 0118 26B2     		sxth	r6, r4
 27416              	.LVL2118:
5872:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27417              		.loc 1 5872 2 is_stmt 1 view .LVU7186
5872:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27418              		.loc 1 5872 6 is_stmt 0 view .LVU7187
 27419 011a 7142     		rsbs	r1, r6, #0
5872:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27420              		.loc 1 5872 5 view .LVU7188
 27421 011c 9142     		cmp	r1, r2
5871:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27422              		.loc 1 5871 5 view .LVU7189
 27423 011e A4B2     		uxth	r4, r4
5872:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27424              		.loc 1 5872 5 view .LVU7190
 27425 0120 DCDC     		bgt	.L1962
5876:src/xeq.c     **** 		// move previous contents to new destination
 27426              		.loc 1 5876 2 is_stmt 1 view .LVU7191
5876:src/xeq.c     **** 		// move previous contents to new destination
 27427              		.loc 1 5876 5 is_stmt 0 view .LVU7192
 27428 0122 3BB3     		cbz	r3, .L1973
 27429              	.LBB3587:
5878:src/xeq.c     **** 		if (size > old_size) {
 27430              		.loc 1 5878 3 is_stmt 1 view .LVU7193
5879:src/xeq.c     **** 			n = old_size;
 27431              		.loc 1 5879 3 view .LVU7194
5887:src/xeq.c     **** 	}
 27432              		.loc 1 5887 31 is_stmt 0 view .LVU7195
 27433 0124 D8F80020 		ldr	r2, [r8]
5887:src/xeq.c     **** 	}
 27434              		.loc 1 5887 3 view .LVU7196
 27435 0128 DBF80000 		ldr	r0, [fp]
5887:src/xeq.c     **** 	}
 27436              		.loc 1 5887 31 view .LVU7197
 27437 012c B2F8DE17 		ldrh	r1, [r2, #2014]
 27438 0130 0193     		str	r3, [sp, #4]
 27439              	.LVL2119:
5879:src/xeq.c     **** 			n = old_size;
 27440              		.loc 1 5879 6 view .LVU7198
 27441 0132 9D42     		cmp	r5, r3
5880:src/xeq.c     **** 			size -= old_size;
 27442              		.loc 1 5880 4 is_stmt 1 view .LVU7199
 27443              	.LVL2120:
5881:src/xeq.c     **** 		}
 27444              		.loc 1 5881 4 view .LVU7200
5881:src/xeq.c     **** 		}
 27445              		.loc 1 5881 9 is_stmt 0 view .LVU7201
 27446 0134 C4BF     		itt	gt
 27447 0136 ED1A     		subgt	r5, r5, r3
 27448              	.LVL2121:
5881:src/xeq.c     **** 		}
ARM GAS  /tmp/ccqED0AM.s 			page 701


 27449              		.loc 1 5881 9 view .LVU7202
 27450 0138 4FEA450A 		lslgt	r10, r5, #1
5887:src/xeq.c     **** 	}
 27451              		.loc 1 5887 29 view .LVU7203
 27452 013c 41F34A11 		sbfx	r1, r1, #5, #11
 27453 0140 C8BF     		it	gt
 27454 0142 1D46     		movgt	r5, r3
 27455              	.LVL2122:
5887:src/xeq.c     **** 	}
 27456              		.loc 1 5887 3 is_stmt 1 view .LVU7204
 27457 0144 00EB4101 		add	r1, r0, r1, lsl #1
 27458 0148 4FEA4502 		lsl	r2, r5, #1
 27459 014c 00EB4600 		add	r0, r0, r6, lsl #1
 27460 0150 D8BF     		it	le
 27461 0152 4FF0000A 		movle	r10, #0
 27462 0156 FFF7FEFF 		bl	xcopy
 27463              	.LVL2123:
5887:src/xeq.c     **** 	}
 27464              		.loc 1 5887 3 is_stmt 0 view .LVU7205
 27465 015a 019B     		ldr	r3, [sp, #4]
 27466 015c 3344     		add	r3, r3, r6
 27467 015e 5B00     		lsls	r3, r3, #1
5887:src/xeq.c     **** 	}
 27468              		.loc 1 5887 16 view .LVU7206
 27469 0160 7600     		lsls	r6, r6, #1
 27470              	.LVL2124:
5887:src/xeq.c     **** 	}
 27471              		.loc 1 5887 16 view .LVU7207
 27472 0162 8BE7     		b	.L1960
 27473              	.LVL2125:
 27474              	.L1972:
5887:src/xeq.c     **** 	}
 27475              		.loc 1 5887 16 view .LVU7208
 27476 0164 7600     		lsls	r6, r6, #1
 27477              	.LVL2126:
5887:src/xeq.c     **** 	}
 27478              		.loc 1 5887 16 view .LVU7209
 27479              	.LBE3587:
5868:src/xeq.c     **** 	}
 27480              		.loc 1 5868 13 view .LVU7210
 27481 0166 0788     		ldrh	r7, [r0]
 27482 0168 DFF820B0 		ldr	fp, .L1974+12
 27483 016c 4FEA450A 		lsl	r10, r5, #1
 27484 0170 3346     		mov	r3, r6
 27485 0172 83E7     		b	.L1960
 27486              	.LVL2127:
 27487              	.L1973:
5868:src/xeq.c     **** 	}
 27488              		.loc 1 5868 13 view .LVU7211
 27489 0174 7600     		lsls	r6, r6, #1
 27490              	.LVL2128:
5868:src/xeq.c     **** 	}
 27491              		.loc 1 5868 13 view .LVU7212
 27492 0176 4FEA450A 		lsl	r10, r5, #1
5876:src/xeq.c     **** 		// move previous contents to new destination
 27493              		.loc 1 5876 5 view .LVU7213
 27494 017a 3346     		mov	r3, r6
ARM GAS  /tmp/ccqED0AM.s 			page 702


 27495              	.LVL2129:
5876:src/xeq.c     **** 		// move previous contents to new destination
 27496              		.loc 1 5876 5 view .LVU7214
 27497 017c 7EE7     		b	.L1960
 27498              	.L1975:
 27499 017e 00BF     		.align	2
 27500              	.L1974:
 27501 0180 00000000 		.word	RetStkSize
 27502 0184 00000000 		.word	Error
 27503 0188 00000000 		.word	main_ram
 27504 018c 00000000 		.word	RetStk
 27505              		.cfi_endproc
 27506              	.LFE265:
 27508              		.section	.text.cmdxout,"ax",%progbits
 27509              		.align	1
 27510              		.p2align 2,,3
 27511              		.global	cmdxout
 27512              		.syntax unified
 27513              		.thumb
 27514              		.thumb_func
 27515              		.fpu fpv4-sp-d16
 27517              	cmdxout:
 27518              	.LVL2130:
 27519              	.LFB267:
5897:src/xeq.c     **** 
5898:src/xeq.c     **** 
5899:src/xeq.c     **** /*
5900:src/xeq.c     ****  *  xIN: Setup an environment for XROM based math routines:
5901:src/xeq.c     ****  *
5902:src/xeq.c     ****  *  - 12 Private double precision stack & special registers X to K
5903:src/xeq.c     ****  *  - private return stack for local flags & registers
5904:src/xeq.c     ****  *  - 6 system flags
5905:src/xeq.c     ****  *
5906:src/xeq.c     ****  *  Argument:
5907:src/xeq.c     ****  *      noLocals - bit 7
5908:src/xeq.c     ****  *      out      - bits 4..5
5909:src/xeq.c     ****  *      in       - bits 2..4		
5910:src/xeq.c     ****  *      setLastX - bit 1
5911:src/xeq.c     ****  *      complex  - bit 0
5912:src/xeq.c     ****  *
5913:src/xeq.c     ****  *  Local flags:
5914:src/xeq.c     ****  *      .00 to .09 are free for general use.
5915:src/xeq.c     ****  *	.10 - stack_depth as previously set by user, don't touch it!
5916:src/xeq.c     ****  *	.11 - mode_double as previously set by user, don't touch it!
5917:src/xeq.c     ****  *      .12 - complex, from argument, can be modified.
5918:src/xeq.c     ****  *	.13 - setLastX, from argumment, can be modified.
5919:src/xeq.c     ****  *	.14 - state_lift as desired on exit, set to 1 by default, can be modified.
5920:src/xeq.c     ****  *      .15 - reserved, indicates that xIN is active, set to 1, don't touch it!
5921:src/xeq.c     ****  *
5922:src/xeq.c     ****  *  If the call is repeated only the argument values are reevaluated.
5923:src/xeq.c     ****  */
5924:src/xeq.c     **** void cmdxin(unsigned int arg, enum rarg op) {
5925:src/xeq.c     **** 
5926:src/xeq.c     **** 	int i;
5927:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5928:src/xeq.c     **** 	REGISTER *previousLocals = NULL;
5929:src/xeq.c     **** 	unsigned short previousFlags = 0;
ARM GAS  /tmp/ccqED0AM.s 			page 703


5930:src/xeq.c     **** 	int num_locals = 0;
5931:src/xeq.c     **** #endif
5932:src/xeq.c     **** #ifndef REALBUILD
5933:src/xeq.c     **** 	/* This should never happen in a real build but it causes havoc writing
5934:src/xeq.c     **** 	 * xrom code, so trap it here.
5935:src/xeq.c     **** 	 */
5936:src/xeq.c     **** 	if (XromFlags.xIN) {
5937:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
5938:src/xeq.c     **** 		return;
5939:src/xeq.c     **** 	}
5940:src/xeq.c     **** #endif
5941:src/xeq.c     **** 
5942:src/xeq.c     **** 	// Setup the XromLocal and XromParams structures in volatile RAM
5943:src/xeq.c     **** 	// fill with 0
5944:src/xeq.c     **** 	xset(&XromLocal, 0, sizeof(XromLocal));
5945:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
5946:src/xeq.c     **** 
5947:src/xeq.c     **** 	// Flags
5948:src/xeq.c     **** 	XromFlags.state_lift_in = get_lift();
5949:src/xeq.c     **** 	XromFlags.stack_depth = UState.stack_depth;
5950:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
5951:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
5952:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
5953:src/xeq.c     **** 	XromFlags.state_lift = 1;
5954:src/xeq.c     **** 	XromFlags.xIN = 1;
5955:src/xeq.c     **** 
5956:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5957:src/xeq.c     **** 	// Save pointers to original local data
5958:src/xeq.c     **** 	if ((arg & 0x80) != 0 && LocalRegs < 0) {
5959:src/xeq.c     **** 		XromFlags.copyLocals = 1;
5960:src/xeq.c     **** 		previousFlags = *flag_word(LOCAL_FLAG_BASE, NULL);
5961:src/xeq.c     **** 		previousLocals = get_reg_n(LOCAL_REG_BASE);
5962:src/xeq.c     **** 		num_locals = local_regs();
5963:src/xeq.c     **** 	}
5964:src/xeq.c     **** #endif
5965:src/xeq.c     **** 	// Establish local return stack
5966:src/xeq.c     **** 	XromUserRetStk = RetStk;
5967:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
5968:src/xeq.c     **** 
5969:src/xeq.c     **** 	RetStk = XromRetStk;
5970:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5971:src/xeq.c     **** 	RetStkPtr = 0;			// Locals will be allocated later
5972:src/xeq.c     **** #else
5973:src/xeq.c     **** 	LocalRegs = RetStkPtr = -2;	// Allocate just the local flags
5974:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
5975:src/xeq.c     **** #endif
5976:src/xeq.c     **** 
5977:src/xeq.c     **** 	// Parse the argument into fields
5978:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5979:src/xeq.c     **** 	XromFlags.setLastX = (arg & 0x20) != 0;
5980:src/xeq.c     **** 	XromFlags.complex = (arg & 0x40) != 0;
5981:src/xeq.c     **** 	XromIn = (arg & 0x1f) % 5;
5982:src/xeq.c     **** 	XromOut = (arg & 0x1f) / 5;
5983:src/xeq.c     **** #else
5984:src/xeq.c     **** 	XromFlags.setLastX = (arg & 0x40) != 0;
5985:src/xeq.c     **** 	XromFlags.complex = (arg & 0x80) != 0;
5986:src/xeq.c     **** 	XromIn = (arg & 0x7);
ARM GAS  /tmp/ccqED0AM.s 			page 704


5987:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
5988:src/xeq.c     **** #endif
5989:src/xeq.c     **** 	if (XromFlags.complex) {
5990:src/xeq.c     **** 		// Complex arguments are always in pairs
5991:src/xeq.c     **** 		XromIn <<= 1;
5992:src/xeq.c     **** 		XromOut <<= 1;
5993:src/xeq.c     **** 	}
5994:src/xeq.c     **** 
5995:src/xeq.c     ****         UState.rounding_mode = 0;
5996:src/xeq.c     **** 
5997:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5998:src/xeq.c     **** 	// Allocate the local frame
5999:src/xeq.c     **** 	LocalRegs = 0;
6000:src/xeq.c     **** 	UState.mode_double = 1;		// Needed to allocate enough registers
6001:src/xeq.c     **** 	cmdlocr(num_locals, RARG_LOCR);
6002:src/xeq.c     **** 	if (XromFlags.copyLocals)
6003:src/xeq.c     **** 		*flag_word(LOCAL_FLAG_BASE, NULL) = previousFlags;
6004:src/xeq.c     **** #endif
6005:src/xeq.c     **** 	// Switch to double precision mode
6006:src/xeq.c     **** 	if (XromFlags.mode_int) {
6007:src/xeq.c     **** 		// Convert integers to decimal128
6008:src/xeq.c     **** #ifndef ENABLE_COPYLOCALS
6009:src/xeq.c     **** 		UState.mode_double = 1;
6010:src/xeq.c     **** #endif
6011:src/xeq.c     **** 		op_float(OP_FLOAT_XIN);
6012:src/xeq.c     **** 		// Do not copy the local registers because we don't use this case anyway
6013:src/xeq.c     **** 	}
6014:src/xeq.c     **** 	else if (XromFlags.mode_double) {
6015:src/xeq.c     **** 		// No conversion necessary
6016:src/xeq.c     **** 		xcopy(XromStack, StackBase, sizeof(XromStack));
6017:src/xeq.c     **** 		StackBase = XromStack;
6018:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
6019:src/xeq.c     **** 		if (XromFlags.copyLocals)
6020:src/xeq.c     **** 			move_regs(get_reg_n(LOCAL_REG_BASE), previousLocals, num_locals);
6021:src/xeq.c     **** #endif
6022:src/xeq.c     **** 	}
6023:src/xeq.c     **** 	else {
6024:src/xeq.c     **** 		// Convert decimal64 to decinal128
6025:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
6026:src/xeq.c     **** 		UState.mode_double = 0;		// This was the original state before xIN
6027:src/xeq.c     **** 		op_double(OP_DBLON);		// Now mode_double should be set again
6028:src/xeq.c     **** 		if (XromFlags.copyLocals) {
6029:src/xeq.c     **** 			decimal64  *src  = &(previousLocals->s);
6030:src/xeq.c     **** 			decimal128 *dest = &(get_reg_n(LOCAL_REG_BASE)->d);
6031:src/xeq.c     **** 			while (num_locals--)
6032:src/xeq.c     **** 				packed128_from_packed(dest++, src++);
6033:src/xeq.c     **** 		}
6034:src/xeq.c     **** #else
6035:src/xeq.c     **** 		op_double(OP_DBLON);		// Now mode_double should be set again
6036:src/xeq.c     **** #endif
6037:src/xeq.c     **** 	}
6038:src/xeq.c     **** 
6039:src/xeq.c     **** 	// Set stack size to 8 and turn on stack_lift
6040:src/xeq.c     **** 	set_lift();
6041:src/xeq.c     **** 	UState.stack_depth = 1;
6042:src/xeq.c     **** 
6043:src/xeq.c     **** 	// check for any NaNs in input
ARM GAS  /tmp/ccqED0AM.s 			page 705


6044:src/xeq.c     **** 	for (i = 0; i < XromIn; ++i) {
6045:src/xeq.c     **** 		decNumber x;
6046:src/xeq.c     **** 		if (decNumberIsNaN(getRegister(&x, regX_idx + i))) {
6047:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
6048:src/xeq.c     **** 			// domain error
6049:src/xeq.c     **** 			if (get_user_flag(NAN_FLAG)) {
6050:src/xeq.c     **** 				for (i = 0; i < XromOut; ++i)
6051:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
6052:src/xeq.c     **** 				// Early exit of routine
6053:src/xeq.c     **** 				cmdxout(0, RARG_XROM_OUT);
6054:src/xeq.c     **** 			} 
6055:src/xeq.c     **** 			else
6056:src/xeq.c     **** 				report_err(ERR_DOMAIN);	// this will do all the cleanup
6057:src/xeq.c     **** 			return;
6058:src/xeq.c     **** 		}
6059:src/xeq.c     **** 	}
6060:src/xeq.c     **** }
6061:src/xeq.c     **** 
6062:src/xeq.c     **** /*
6063:src/xeq.c     ****  *  xOUT: Return from an XROM routine that has previously called xIN
6064:src/xeq.c     ****  *  Argument:
6065:src/xeq.c     ****  *     bit 0 set - do a RTN+1
6066:src/xeq.c     ****  *     bit 1 set - leave I alone even with a complex result
6067:src/xeq.c     ****  */
6068:src/xeq.c     **** void cmdxout(unsigned int arg, enum rarg op) {
 27520              		.loc 1 6068 46 is_stmt 1 view -0
 27521              		.cfi_startproc
 27522              		@ args = 0, pretend = 0, frame = 56
 27523              		@ frame_needed = 0, uses_anonymous_args = 0
6069:src/xeq.c     **** 	int i, dbl, intm;
 27524              		.loc 1 6069 2 view .LVU7216
6070:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
6071:src/xeq.c     **** 	unsigned short flags = *flag_word(LOCAL_FLAG_BASE, NULL);
6072:src/xeq.c     **** 	REGISTER *locals = get_reg_n(LOCAL_REG_BASE);
6073:src/xeq.c     **** 	int num_locals = local_regs();
6074:src/xeq.c     **** #endif
6075:src/xeq.c     **** #ifndef REALBUILD
6076:src/xeq.c     **** 	// shouldn't happen in final build
6077:src/xeq.c     **** 	if (! XromFlags.xIN) {
 27525              		.loc 1 6077 2 view .LVU7217
6068:src/xeq.c     **** 	int i, dbl, intm;
 27526              		.loc 1 6068 46 is_stmt 0 view .LVU7218
 27527 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 27528              		.cfi_def_cfa_offset 36
 27529              		.cfi_offset 4, -36
 27530              		.cfi_offset 5, -32
 27531              		.cfi_offset 6, -28
 27532              		.cfi_offset 7, -24
 27533              		.cfi_offset 8, -20
 27534              		.cfi_offset 9, -16
 27535              		.cfi_offset 10, -12
 27536              		.cfi_offset 11, -8
 27537              		.cfi_offset 14, -4
 27538              		.loc 1 6077 6 view .LVU7219
 27539 0004 794C     		ldr	r4, .L2022
 27540              		.loc 1 6077 5 view .LVU7220
 27541 0006 94F90130 		ldrsb	r3, [r4, #1]
ARM GAS  /tmp/ccqED0AM.s 			page 706


 27542 000a 002B     		cmp	r3, #0
6068:src/xeq.c     **** 	int i, dbl, intm;
 27543              		.loc 1 6068 46 view .LVU7221
 27544 000c 8FB0     		sub	sp, sp, #60
 27545              		.cfi_def_cfa_offset 96
 27546              		.loc 1 6077 5 view .LVU7222
 27547 000e 07DB     		blt	.L1977
6078:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 27548              		.loc 1 6078 3 is_stmt 1 view .LVU7223
 27549              	.LVL2131:
 27550              	.LBB3611:
 27551              	.LBI3611:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27552              		.loc 1 546 5 view .LVU7224
 27553              	.LBB3612:
 547:src/xeq.c     **** 		Error = e;
 27554              		.loc 1 547 2 view .LVU7225
 547:src/xeq.c     **** 		Error = e;
 27555              		.loc 1 547 12 is_stmt 0 view .LVU7226
 27556 0010 774B     		ldr	r3, .L2022+4
 547:src/xeq.c     **** 		Error = e;
 27557              		.loc 1 547 5 view .LVU7227
 27558 0012 1A68     		ldr	r2, [r3]
 27559 0014 0AB9     		cbnz	r2, .L1976
 27560              	.LVL2132:
 27561              	.LBB3613:
 27562              	.LBI3613:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27563              		.loc 1 546 5 is_stmt 1 view .LVU7228
 27564              	.LBB3614:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 27565              		.loc 1 548 3 view .LVU7229
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 27566              		.loc 1 548 9 is_stmt 0 view .LVU7230
 27567 0016 0722     		movs	r2, #7
 27568 0018 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 27569              		.loc 1 549 3 is_stmt 1 view .LVU7231
 27570              	.LVL2133:
 27571              	.L1976:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 27572              		.loc 1 549 3 is_stmt 0 view .LVU7232
 27573              	.LBE3614:
 27574              	.LBE3613:
 27575              	.LBE3612:
 27576              	.LBE3611:
6079:src/xeq.c     **** 		return;
6080:src/xeq.c     **** 	}
6081:src/xeq.c     **** #endif
6082:src/xeq.c     **** 	// End special handling
6083:src/xeq.c     **** 	XromFlags.xIN = 0;
6084:src/xeq.c     **** 
6085:src/xeq.c     **** 	// Restore the global return stack
6086:src/xeq.c     **** 	RetStk = XromUserRetStk;
6087:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
6088:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
6089:src/xeq.c     **** 
ARM GAS  /tmp/ccqED0AM.s 			page 707


6090:src/xeq.c     **** 	// RTN or RTN+1 depending on bit 0 of argument
6091:src/xeq.c     **** 	do_rtn(arg & 1);
6092:src/xeq.c     **** 
6093:src/xeq.c     **** 	// Switch back to user stack settings
6094:src/xeq.c     **** 	dbl = UState.mode_double = XromFlags.mode_double;
6095:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
6096:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
6097:src/xeq.c     **** 	UState.stack_depth = XromFlags.stack_depth;
6098:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
6099:src/xeq.c     **** 
6100:src/xeq.c     **** 	// Last X handling and complex flag
6101:src/xeq.c     **** 	if (XromFlags.setLastX) {
6102:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
6103:src/xeq.c     **** 			setlastXY();
6104:src/xeq.c     **** 		else
6105:src/xeq.c     **** 			setlastX();
6106:src/xeq.c     **** 	}
6107:src/xeq.c     **** 
6108:src/xeq.c     **** 	// Move the stack according to the in/out fields
6109:src/xeq.c     **** 	i = (int) XromOut - (int) XromIn;
6110:src/xeq.c     **** 	if (XromFlags.complex) {
6111:src/xeq.c     **** 		set_was_complex();
6112:src/xeq.c     **** 		while (i < 0) {
6113:src/xeq.c     **** 			// different stack handling in complex mode
6114:src/xeq.c     **** 			// more to consume then to push back
6115:src/xeq.c     **** 			lower2();
6116:src/xeq.c     **** 			i += 2;
6117:src/xeq.c     **** 		}
6118:src/xeq.c     **** 	}
6119:src/xeq.c     **** 	else {
6120:src/xeq.c     **** 		while (i < 0) {
6121:src/xeq.c     **** 			// more to consume then to push back
6122:src/xeq.c     **** 			lower();	
6123:src/xeq.c     **** 			++i;
6124:src/xeq.c     **** 		}
6125:src/xeq.c     **** 	}
6126:src/xeq.c     **** 	if (i > 0) {
6127:src/xeq.c     **** 		// more to push back then to consume
6128:src/xeq.c     **** 		if (! XromFlags.state_lift_in)
6129:src/xeq.c     **** 			--i;
6130:src/xeq.c     **** 		while (i > 0) {
6131:src/xeq.c     **** 			lift();
6132:src/xeq.c     **** 			--i;
6133:src/xeq.c     **** 		}
6134:src/xeq.c     **** 	}
6135:src/xeq.c     **** 	State2.state_lift = XromFlags.state_lift;
6136:src/xeq.c     **** 
6137:src/xeq.c     **** 	// Copy results
6138:src/xeq.c     **** 	i = XromOut;
6139:src/xeq.c     **** 	if (intm) {
6140:src/xeq.c     **** 		while (i--) {
6141:src/xeq.c     **** 			decNumber r;
6142:src/xeq.c     **** 			decimal128ToNumber(&(XromStack[i].d), &r);
6143:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, intResult(&r));
6144:src/xeq.c     **** 		}
6145:src/xeq.c     **** 	}
6146:src/xeq.c     **** 	else if (dbl) {
ARM GAS  /tmp/ccqED0AM.s 			page 708


6147:src/xeq.c     **** 		move_regs(StackBase, XromStack, i);
6148:src/xeq.c     **** 	}
6149:src/xeq.c     **** 	else {
6150:src/xeq.c     **** 		while (i--)
6151:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
6152:src/xeq.c     **** 	}
6153:src/xeq.c     **** 
6154:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
6155:src/xeq.c     **** 	// Copy back local data
6156:src/xeq.c     **** 	if (XromFlags.copyLocals) {
6157:src/xeq.c     **** 		i = local_regs();
6158:src/xeq.c     **** 		num_locals = i < num_locals ? i : num_locals; 
6159:src/xeq.c     **** 		*flag_word(LOCAL_FLAG_BASE, NULL) = flags;
6160:src/xeq.c     **** 		if (intm) {
6161:src/xeq.c     **** 			// not used
6162:src/xeq.c     **** 		}
6163:src/xeq.c     **** 		else if (dbl) {
6164:src/xeq.c     **** 			move_regs(get_reg_n(LOCAL_REG_BASE), locals, num_locals);
6165:src/xeq.c     **** 		}
6166:src/xeq.c     **** 		else {
6167:src/xeq.c     **** 			decimal64  *dest = &(get_reg_n(LOCAL_REG_BASE)->s);
6168:src/xeq.c     **** 			decimal128 *src  = &(locals->d);
6169:src/xeq.c     **** 			while (num_locals--)
6170:src/xeq.c     **** 				packed_from_packed128(dest++, src++);
6171:src/xeq.c     **** 		}
6172:src/xeq.c     **** 	}
6173:src/xeq.c     **** #endif
6174:src/xeq.c     **** }
 27577              		.loc 1 6174 1 view .LVU7233
 27578 001a 0FB0     		add	sp, sp, #60
 27579              		.cfi_remember_state
 27580              		.cfi_def_cfa_offset 36
 27581              		@ sp needed
 27582 001c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 27583              	.LVL2134:
 27584              	.L1977:
 27585              		.cfi_restore_state
 27586              	.LBB3615:
 27587              	.LBB3616:
6083:src/xeq.c     **** 
 27588              		.loc 1 6083 16 view .LVU7234
 27589 0020 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
6087:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 27590              		.loc 1 6087 2 view .LVU7235
 27591 0022 744F     		ldr	r7, .L2022+8
6086:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
 27592              		.loc 1 6086 9 view .LVU7236
 27593 0024 A668     		ldr	r6, [r4, #8]
6087:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 27594              		.loc 1 6087 2 view .LVU7237
 27595 0026 3B68     		ldr	r3, [r7]
6088:src/xeq.c     **** 
 27596              		.loc 1 6088 12 view .LVU7238
 27597 0028 7349     		ldr	r1, .L2022+12
 27598              	.LVL2135:
6098:src/xeq.c     **** 
 27599              		.loc 1 6098 12 view .LVU7239
ARM GAS  /tmp/ccqED0AM.s 			page 709


 27600 002a DFF8E0A1 		ldr	r10, .L2022+32
6088:src/xeq.c     **** 
 27601              		.loc 1 6088 12 view .LVU7240
 27602 002e 0968     		ldr	r1, [r1]
 27603 0030 0546     		mov	r5, r0
 27604              	.LVL2136:
6088:src/xeq.c     **** 
 27605              		.loc 1 6088 12 view .LVU7241
 27606              	.LBE3616:
 27607              	.LBI3615:
6068:src/xeq.c     **** 	int i, dbl, intm;
 27608              		.loc 1 6068 6 is_stmt 1 view .LVU7242
 27609              	.LBB3645:
6083:src/xeq.c     **** 
 27610              		.loc 1 6083 2 view .LVU7243
6086:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
 27611              		.loc 1 6086 9 is_stmt 0 view .LVU7244
 27612 0032 7248     		ldr	r0, .L2022+16
 27613              	.LVL2137:
6083:src/xeq.c     **** 
 27614              		.loc 1 6083 16 view .LVU7245
 27615 0034 6FF3C712 		bfc	r2, #7, #1
6086:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
 27616              		.loc 1 6086 9 view .LVU7246
 27617 0038 0660     		str	r6, [r0]
6083:src/xeq.c     **** 
 27618              		.loc 1 6083 16 view .LVU7247
 27619 003a 6270     		strb	r2, [r4, #1]
6086:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
 27620              		.loc 1 6086 2 is_stmt 1 view .LVU7248
6087:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 27621              		.loc 1 6087 2 view .LVU7249
6088:src/xeq.c     **** 
 27622              		.loc 1 6088 12 is_stmt 0 view .LVU7250
 27623 003c B3F8DE27 		ldrh	r2, [r3, #2014]
6087:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 27624              		.loc 1 6087 12 view .LVU7251
 27625 0040 A089     		ldrh	r0, [r4, #12]
 27626 0042 A3F8E207 		strh	r0, [r3, #2018]	@ movhi
6088:src/xeq.c     **** 
 27627              		.loc 1 6088 2 is_stmt 1 view .LVU7252
6088:src/xeq.c     **** 
 27628              		.loc 1 6088 12 is_stmt 0 view .LVU7253
 27629 0046 61F34F12 		bfi	r2, r1, #5, #11
 27630 004a A3F8DE27 		strh	r2, [r3, #2014]	@ movhi
6091:src/xeq.c     **** 
 27631              		.loc 1 6091 2 is_stmt 1 view .LVU7254
 27632 004e 05F00100 		and	r0, r5, #1
 27633 0052 FFF7FEFF 		bl	do_rtn
 27634              	.LVL2138:
6094:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 27635              		.loc 1 6094 2 view .LVU7255
6094:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 27636              		.loc 1 6094 38 is_stmt 0 view .LVU7256
 27637 0056 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
6094:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 27638              		.loc 1 6094 8 view .LVU7257
ARM GAS  /tmp/ccqED0AM.s 			page 710


 27639 0058 3868     		ldr	r0, [r7]
6096:src/xeq.c     **** 	UState.stack_depth = XromFlags.stack_depth;
 27640              		.loc 1 6096 41 view .LVU7258
 27641 005a A678     		ldrb	r6, [r4, #2]	@ zero_extendqisi2
6095:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 27642              		.loc 1 6095 21 view .LVU7259
 27643 005c D0F8E827 		ldr	r2, [r0, #2024]
6094:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 27644              		.loc 1 6094 38 view .LVU7260
 27645 0060 C3F3C009 		ubfx	r9, r3, #3, #1
 27646              	.LVL2139:
6095:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 27647              		.loc 1 6095 2 is_stmt 1 view .LVU7261
6095:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 27648              		.loc 1 6095 32 is_stmt 0 view .LVU7262
 27649 0064 03F00108 		and	r8, r3, #1
 27650              	.LVL2140:
6096:src/xeq.c     **** 	UState.stack_depth = XromFlags.stack_depth;
 27651              		.loc 1 6096 9 is_stmt 1 view .LVU7263
6097:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 27652              		.loc 1 6097 2 view .LVU7264
6095:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 27653              		.loc 1 6095 21 is_stmt 0 view .LVU7265
 27654 0068 C3F38001 		ubfx	r1, r3, #2, #1
 27655 006c 48EA8933 		orr	r3, r8, r9, lsl #14
 27656              	.LVL2141:
6095:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 27657              		.loc 1 6095 21 view .LVU7266
 27658 0070 43EAC143 		orr	r3, r3, r1, lsl #19
 27659 0074 6249     		ldr	r1, .L2022+20
 27660 0076 06F00706 		and	r6, r6, #7
 27661 007a 1140     		ands	r1, r1, r2
 27662 007c 43EA0673 		orr	r3, r3, r6, lsl #28
 27663 0080 0B43     		orrs	r3, r3, r1
 27664 0082 C0F8E837 		str	r3, [r0, #2024]
6098:src/xeq.c     **** 
 27665              		.loc 1 6098 2 is_stmt 1 view .LVU7267
6098:src/xeq.c     **** 
 27666              		.loc 1 6098 14 is_stmt 0 view .LVU7268
 27667 0086 6420     		movs	r0, #100
 27668 0088 FFF7FEFF 		bl	get_reg_n
 27669              	.LVL2142:
6101:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
 27670              		.loc 1 6101 6 view .LVU7269
 27671 008c 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
6098:src/xeq.c     **** 
 27672              		.loc 1 6098 12 view .LVU7270
 27673 008e CAF80000 		str	r0, [r10]
6101:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
 27674              		.loc 1 6101 2 is_stmt 1 view .LVU7271
6101:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
 27675              		.loc 1 6101 5 is_stmt 0 view .LVU7272
 27676 0092 9606     		lsls	r6, r2, #26
 27677 0094 09D5     		bpl	.L1980
6102:src/xeq.c     **** 			setlastXY();
 27678              		.loc 1 6102 3 is_stmt 1 view .LVU7273
6102:src/xeq.c     **** 			setlastXY();
ARM GAS  /tmp/ccqED0AM.s 			page 711


 27679              		.loc 1 6102 6 is_stmt 0 view .LVU7274
 27680 0096 D006     		lsls	r0, r2, #27
 27681 0098 02D5     		bpl	.L1981
6102:src/xeq.c     **** 			setlastXY();
 27682              		.loc 1 6102 25 view .LVU7275
 27683 009a A907     		lsls	r1, r5, #30
 27684 009c 40F19F80 		bpl	.L2018
 27685              	.L1981:
6105:src/xeq.c     **** 	}
 27686              		.loc 1 6105 4 is_stmt 1 view .LVU7276
 27687              	.LBB3617:
 27688              	.LBI3617:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 27689              		.loc 1 792 6 view .LVU7277
 27690              	.LBB3618:
 793:src/xeq.c     **** }
 27691              		.loc 1 793 2 view .LVU7278
 27692 00a0 6421     		movs	r1, #100
 27693 00a2 6C20     		movs	r0, #108
 27694 00a4 FFF7FEFF 		bl	copyreg_n
 27695              	.LVL2143:
 27696 00a8 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 27697              	.L1980:
 27698              	.LBE3618:
 27699              	.LBE3617:
6109:src/xeq.c     **** 	if (XromFlags.complex) {
 27700              		.loc 1 6109 2 view .LVU7279
6109:src/xeq.c     **** 	if (XromFlags.complex) {
 27701              		.loc 1 6109 6 is_stmt 0 view .LVU7280
 27702 00aa 94F805B0 		ldrb	fp, [r4, #5]	@ zero_extendqisi2
6109:src/xeq.c     **** 	if (XromFlags.complex) {
 27703              		.loc 1 6109 22 view .LVU7281
 27704 00ae 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
6110:src/xeq.c     **** 		set_was_complex();
 27705              		.loc 1 6110 5 view .LVU7282
 27706 00b0 D206     		lsls	r2, r2, #27
6109:src/xeq.c     **** 	if (XromFlags.complex) {
 27707              		.loc 1 6109 4 view .LVU7283
 27708 00b2 ABEB030B 		sub	fp, fp, r3
 27709              	.LVL2144:
6110:src/xeq.c     **** 		set_was_complex();
 27710              		.loc 1 6110 2 is_stmt 1 view .LVU7284
6110:src/xeq.c     **** 		set_was_complex();
 27711              		.loc 1 6110 5 is_stmt 0 view .LVU7285
 27712 00b6 2BD5     		bpl	.L2019
6111:src/xeq.c     **** 		while (i < 0) {
 27713              		.loc 1 6111 3 is_stmt 1 view .LVU7286
 27714              	.LBB3619:
 27715              	.LBI3619:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 27716              		.loc 1 539 13 view .LVU7287
 27717              	.LBB3620:
 540:src/xeq.c     **** }
 27718              		.loc 1 540 2 view .LVU7288
 540:src/xeq.c     **** }
 27719              		.loc 1 540 20 is_stmt 0 view .LVU7289
 27720 00b8 524E     		ldr	r6, .L2022+24
ARM GAS  /tmp/ccqED0AM.s 			page 712


 27721 00ba 327D     		ldrb	r2, [r6, #20]	@ zero_extendqisi2
 27722 00bc 0121     		movs	r1, #1
 27723 00be 61F38712 		bfi	r2, r1, #6, #2
 27724              	.LBE3620:
 27725              	.LBE3619:
6112:src/xeq.c     **** 			// different stack handling in complex mode
 27726              		.loc 1 6112 9 view .LVU7290
 27727 00c2 BBF1000F 		cmp	fp, #0
 27728              	.LBB3622:
 27729              	.LBB3621:
 540:src/xeq.c     **** }
 27730              		.loc 1 540 20 view .LVU7291
 27731 00c6 3275     		strb	r2, [r6, #20]
 540:src/xeq.c     **** }
 27732              		.loc 1 540 20 view .LVU7292
 27733              	.LBE3621:
 27734              	.LBE3622:
6112:src/xeq.c     **** 			// different stack handling in complex mode
 27735              		.loc 1 6112 9 is_stmt 1 view .LVU7293
 27736 00c8 13DA     		bge	.L1984
 27737 00ca 6FEA0B03 		mvn	r3, fp
 27738 00ce 23F00105 		bic	r5, r3, #1
 27739              	.LVL2145:
6112:src/xeq.c     **** 			// different stack handling in complex mode
 27740              		.loc 1 6112 9 is_stmt 0 view .LVU7294
 27741 00d2 0093     		str	r3, [sp]
 27742 00d4 0BF10203 		add	r3, fp, #2
 27743 00d8 0193     		str	r3, [sp, #4]
 27744 00da 1D44     		add	r5, r5, r3
 27745              	.L1985:
6115:src/xeq.c     **** 			i += 2;
 27746              		.loc 1 6115 4 is_stmt 1 view .LVU7295
6116:src/xeq.c     **** 		}
 27747              		.loc 1 6116 6 is_stmt 0 view .LVU7296
 27748 00dc 0BF1020B 		add	fp, fp, #2
 27749              	.LVL2146:
6115:src/xeq.c     **** 			i += 2;
 27750              		.loc 1 6115 4 view .LVU7297
 27751 00e0 FFF7FEFF 		bl	lower2
 27752              	.LVL2147:
6116:src/xeq.c     **** 		}
 27753              		.loc 1 6116 4 is_stmt 1 view .LVU7298
6112:src/xeq.c     **** 			// different stack handling in complex mode
 27754              		.loc 1 6112 9 view .LVU7299
 27755 00e4 AB45     		cmp	fp, r5
 27756 00e6 F9D1     		bne	.L1985
 27757 00e8 009B     		ldr	r3, [sp]
 27758 00ea 23F0010B 		bic	fp, r3, #1
 27759              	.LVL2148:
6112:src/xeq.c     **** 			// different stack handling in complex mode
 27760              		.loc 1 6112 9 is_stmt 0 view .LVU7300
 27761 00ee 019B     		ldr	r3, [sp, #4]
 27762 00f0 9B44     		add	fp, fp, r3
 27763              	.L1984:
 27764              	.LVL2149:
6126:src/xeq.c     **** 		// more to push back then to consume
 27765              		.loc 1 6126 2 is_stmt 1 view .LVU7301
ARM GAS  /tmp/ccqED0AM.s 			page 713


6126:src/xeq.c     **** 		// more to push back then to consume
 27766              		.loc 1 6126 5 is_stmt 0 view .LVU7302
 27767 00f2 BBF1000F 		cmp	fp, #0
 27768 00f6 14D0     		beq	.L1986
6128:src/xeq.c     **** 			--i;
 27769              		.loc 1 6128 3 is_stmt 1 view .LVU7303
6128:src/xeq.c     **** 			--i;
 27770              		.loc 1 6128 7 is_stmt 0 view .LVU7304
 27771 00f8 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
6128:src/xeq.c     **** 			--i;
 27772              		.loc 1 6128 6 view .LVU7305
 27773 00fa 9307     		lsls	r3, r2, #30
 27774 00fc 02D4     		bmi	.L1991
6129:src/xeq.c     **** 		while (i > 0) {
 27775              		.loc 1 6129 4 is_stmt 1 view .LVU7306
 27776              	.LVL2150:
6130:src/xeq.c     **** 			lift();
 27777              		.loc 1 6130 9 view .LVU7307
 27778 00fe BBF1010B 		subs	fp, fp, #1
 27779              	.LVL2151:
6130:src/xeq.c     **** 			lift();
 27780              		.loc 1 6130 9 is_stmt 0 view .LVU7308
 27781 0102 0ED0     		beq	.L1986
 27782              	.L1991:
6131:src/xeq.c     **** 			--i;
 27783              		.loc 1 6131 4 is_stmt 1 view .LVU7309
 27784 0104 FFF7FEFF 		bl	lift
 27785              	.LVL2152:
6132:src/xeq.c     **** 		}
 27786              		.loc 1 6132 4 view .LVU7310
6130:src/xeq.c     **** 			lift();
 27787              		.loc 1 6130 9 view .LVU7311
 27788 0108 BBF1010B 		subs	fp, fp, #1
 27789              	.LVL2153:
6130:src/xeq.c     **** 			lift();
 27790              		.loc 1 6130 9 is_stmt 0 view .LVU7312
 27791 010c FAD1     		bne	.L1991
 27792 010e 08E0     		b	.L1986
 27793              	.LVL2154:
 27794              	.L2019:
6120:src/xeq.c     **** 			// more to consume then to push back
 27795              		.loc 1 6120 9 is_stmt 1 view .LVU7313
 27796 0110 BBF1000F 		cmp	fp, #0
 27797 0114 67DA     		bge	.L2020
 27798              	.L1983:
6122:src/xeq.c     **** 			++i;
 27799              		.loc 1 6122 4 view .LVU7314
 27800 0116 FFF7FEFF 		bl	lower
 27801              	.LVL2155:
6123:src/xeq.c     **** 		}
 27802              		.loc 1 6123 4 view .LVU7315
6120:src/xeq.c     **** 			// more to consume then to push back
 27803              		.loc 1 6120 9 view .LVU7316
 27804 011a 1BF1010B 		adds	fp, fp, #1
 27805              	.LVL2156:
6120:src/xeq.c     **** 			// more to consume then to push back
 27806              		.loc 1 6120 9 is_stmt 0 view .LVU7317
ARM GAS  /tmp/ccqED0AM.s 			page 714


 27807 011e FAD1     		bne	.L1983
 27808 0120 384E     		ldr	r6, .L2022+24
 27809              	.LVL2157:
 27810              	.L1986:
6135:src/xeq.c     **** 
 27811              		.loc 1 6135 2 is_stmt 1 view .LVU7318
6135:src/xeq.c     **** 
 27812              		.loc 1 6135 31 is_stmt 0 view .LVU7319
 27813 0122 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
6135:src/xeq.c     **** 
 27814              		.loc 1 6135 20 view .LVU7320
 27815 0124 F27D     		ldrb	r2, [r6, #23]	@ zero_extendqisi2
6138:src/xeq.c     **** 	if (intm) {
 27816              		.loc 1 6138 4 view .LVU7321
 27817 0126 6479     		ldrb	r4, [r4, #5]	@ zero_extendqisi2
6135:src/xeq.c     **** 
 27818              		.loc 1 6135 31 view .LVU7322
 27819 0128 C3F38013 		ubfx	r3, r3, #6, #1
6135:src/xeq.c     **** 
 27820              		.loc 1 6135 20 view .LVU7323
 27821 012c 63F38612 		bfi	r2, r3, #6, #1
 27822 0130 F275     		strb	r2, [r6, #23]
6138:src/xeq.c     **** 	if (intm) {
 27823              		.loc 1 6138 2 is_stmt 1 view .LVU7324
 27824              	.LVL2158:
6139:src/xeq.c     **** 		while (i--) {
 27825              		.loc 1 6139 2 view .LVU7325
6139:src/xeq.c     **** 		while (i--) {
 27826              		.loc 1 6139 5 is_stmt 0 view .LVU7326
 27827 0132 B8F1000F 		cmp	r8, #0
 27828 0136 23D0     		beq	.L2021
6140:src/xeq.c     **** 			decNumber r;
 27829              		.loc 1 6140 9 is_stmt 1 view .LVU7327
6140:src/xeq.c     **** 			decNumber r;
 27830              		.loc 1 6140 11 is_stmt 0 view .LVU7328
 27831 0138 631E     		subs	r3, r4, #1
 27832              	.LVL2159:
6140:src/xeq.c     **** 			decNumber r;
 27833              		.loc 1 6140 9 view .LVU7329
 27834 013a 002C     		cmp	r4, #0
 27835 013c 3FF46DAF 		beq	.L1976
 27836 0140 314D     		ldr	r5, .L2022+28
 27837 0142 6334     		adds	r4, r4, #99
 27838 0144 05EB0315 		add	r5, r5, r3, lsl #4
 27839 0148 05AE     		add	r6, sp, #20
 27840              	.LVL2160:
 27841              	.L1993:
 27842              	.LBB3623:
6141:src/xeq.c     **** 			decimal128ToNumber(&(XromStack[i].d), &r);
 27843              		.loc 1 6141 4 is_stmt 1 view .LVU7330
6142:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, intResult(&r));
 27844              		.loc 1 6142 4 view .LVU7331
 27845 014a 3146     		mov	r1, r6
 27846 014c 2846     		mov	r0, r5
 27847 014e FFF7FEFF 		bl	decimal128ToNumber
 27848              	.LVL2161:
6143:src/xeq.c     **** 		}
ARM GAS  /tmp/ccqED0AM.s 			page 715


 27849              		.loc 1 6143 4 view .LVU7332
 27850 0152 3046     		mov	r0, r6
 27851 0154 FFF7FEFF 		bl	intResult
 27852              	.LVL2162:
6143:src/xeq.c     **** 		}
 27853              		.loc 1 6143 4 is_stmt 0 view .LVU7333
 27854 0158 0246     		mov	r2, r0
 27855 015a 0B46     		mov	r3, r1
 27856              	.LBB3624:
 27857              	.LBB3625:
1423:src/xeq.c     **** }
 27858              		.loc 1 1423 8 view .LVU7334
 27859 015c 2046     		mov	r0, r4
 27860 015e CDE90223 		strd	r2, [sp, #8]
 27861              	.LVL2163:
1423:src/xeq.c     **** }
 27862              		.loc 1 1423 8 view .LVU7335
 27863              	.LBE3625:
 27864              	.LBI3624:
1422:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 27865              		.loc 1 1422 6 is_stmt 1 view .LVU7336
 27866              	.LBB3626:
1423:src/xeq.c     **** }
 27867              		.loc 1 1423 2 view .LVU7337
1423:src/xeq.c     **** }
 27868              		.loc 1 1423 8 is_stmt 0 view .LVU7338
 27869 0162 FFF7FEFF 		bl	get_reg_n
 27870              	.LVL2164:
1423:src/xeq.c     **** }
 27871              		.loc 1 1423 2 view .LVU7339
 27872 0166 0822     		movs	r2, #8
 27873 0168 013C     		subs	r4, r4, #1
 27874              	.LVL2165:
1423:src/xeq.c     **** }
 27875              		.loc 1 1423 2 view .LVU7340
 27876 016a 0DEB0201 		add	r1, sp, r2
 27877 016e FFF7FEFF 		bl	xcopy
 27878              	.LVL2166:
1423:src/xeq.c     **** }
 27879              		.loc 1 1423 2 view .LVU7341
 27880              	.LBE3626:
 27881              	.LBE3624:
 27882              	.LBE3623:
6140:src/xeq.c     **** 			decNumber r;
 27883              		.loc 1 6140 9 is_stmt 1 view .LVU7342
 27884 0172 632C     		cmp	r4, #99
 27885 0174 A5F11005 		sub	r5, r5, #16
 27886 0178 E7D1     		bne	.L1993
 27887              	.LBE3645:
 27888              	.LBE3615:
 27889              		.loc 1 6174 1 is_stmt 0 view .LVU7343
 27890 017a 0FB0     		add	sp, sp, #60
 27891              		.cfi_remember_state
 27892              		.cfi_def_cfa_offset 36
 27893              		@ sp needed
 27894 017c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 27895              	.LVL2167:
ARM GAS  /tmp/ccqED0AM.s 			page 716


 27896              	.L2021:
 27897              		.cfi_restore_state
 27898              	.LBB3647:
 27899              	.LBB3646:
6146:src/xeq.c     **** 		move_regs(StackBase, XromStack, i);
 27900              		.loc 1 6146 7 is_stmt 1 view .LVU7344
6146:src/xeq.c     **** 		move_regs(StackBase, XromStack, i);
 27901              		.loc 1 6146 10 is_stmt 0 view .LVU7345
 27902 0180 B9F1000F 		cmp	r9, #0
 27903 0184 1AD1     		bne	.L1994
6150:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 27904              		.loc 1 6150 9 is_stmt 1 view .LVU7346
6150:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 27905              		.loc 1 6150 11 is_stmt 0 view .LVU7347
 27906 0186 631E     		subs	r3, r4, #1
 27907              	.LVL2168:
6150:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 27908              		.loc 1 6150 9 view .LVU7348
 27909 0188 002C     		cmp	r4, #0
 27910 018a 3FF446AF 		beq	.L1976
 27911 018e 1E4F     		ldr	r7, .L2022+28
 27912 0190 6334     		adds	r4, r4, #99
 27913 0192 07EB0317 		add	r7, r7, r3, lsl #4
 27914 0196 05AE     		add	r6, sp, #20
 27915              	.LVL2169:
 27916              	.L1997:
6151:src/xeq.c     **** 	}
 27917              		.loc 1 6151 4 is_stmt 1 view .LVU7349
 27918              	.LBB3627:
 27919              	.LBI3627:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 27920              		.loc 1 718 11 view .LVU7350
 27921              	.LBB3628:
 719:src/xeq.c     **** }
 27922              		.loc 1 719 2 view .LVU7351
 719:src/xeq.c     **** }
 27923              		.loc 1 719 9 is_stmt 0 view .LVU7352
 27924 0198 2046     		mov	r0, r4
 27925 019a FFF7FEFF 		bl	get_reg_n
 27926              	.LVL2170:
 27927              	.LBE3628:
 27928              	.LBE3627:
 27929              	.LBB3630:
 27930              	.LBB3631:
 650:src/xeq.c     **** }
 27931              		.loc 1 650 24 view .LVU7353
 27932 019e 3146     		mov	r1, r6
 27933              	.LBE3631:
 27934              	.LBE3630:
 27935              	.LBB3633:
 27936              	.LBB3629:
 719:src/xeq.c     **** }
 27937              		.loc 1 719 9 view .LVU7354
 27938 01a0 0546     		mov	r5, r0
 27939              	.LVL2171:
 719:src/xeq.c     **** }
 27940              		.loc 1 719 9 view .LVU7355
ARM GAS  /tmp/ccqED0AM.s 			page 717


 27941              	.LBE3629:
 27942              	.LBE3633:
 27943              	.LBB3634:
 27944              	.LBI3630:
 648:src/xeq.c     **** 	decNumber temp;
 27945              		.loc 1 648 6 is_stmt 1 view .LVU7356
 27946              	.LBB3632:
 649:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 27947              		.loc 1 649 2 view .LVU7357
 650:src/xeq.c     **** }
 27948              		.loc 1 650 2 view .LVU7358
 650:src/xeq.c     **** }
 27949              		.loc 1 650 24 is_stmt 0 view .LVU7359
 27950 01a2 3846     		mov	r0, r7
 27951              	.LVL2172:
 650:src/xeq.c     **** }
 27952              		.loc 1 650 24 view .LVU7360
 27953 01a4 FFF7FEFF 		bl	decimal128ToNumber
 27954              	.LVL2173:
 27955 01a8 013C     		subs	r4, r4, #1
 27956              	.LVL2174:
 650:src/xeq.c     **** }
 27957              		.loc 1 650 24 view .LVU7361
 27958 01aa 0146     		mov	r1, r0
 650:src/xeq.c     **** }
 27959              		.loc 1 650 2 view .LVU7362
 27960 01ac 2846     		mov	r0, r5
 27961 01ae FFF7FEFF 		bl	packed_from_number
 27962              	.LVL2175:
 650:src/xeq.c     **** }
 27963              		.loc 1 650 2 view .LVU7363
 27964              	.LBE3632:
 27965              	.LBE3634:
6150:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 27966              		.loc 1 6150 9 is_stmt 1 view .LVU7364
6150:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 27967              		.loc 1 6150 9 is_stmt 0 view .LVU7365
 27968 01b2 632C     		cmp	r4, #99
 27969 01b4 A7F11007 		sub	r7, r7, #16
 27970 01b8 EED1     		bne	.L1997
 27971 01ba 2EE7     		b	.L1976
 27972              	.LVL2176:
 27973              	.L1994:
6147:src/xeq.c     **** 	}
 27974              		.loc 1 6147 3 is_stmt 1 view .LVU7366
 27975              	.LBB3635:
 27976              	.LBB3636:
 27977              	.LBB3637:
 27978              	.LBB3638:
1119:src/xeq.c     **** }
 27979              		.loc 1 1119 24 is_stmt 0 view .LVU7367
 27980 01bc 3B68     		ldr	r3, [r7]
 27981              	.LBE3638:
 27982              	.LBE3637:
 27983              	.LBE3636:
 27984              	.LBE3635:
6147:src/xeq.c     **** 	}
ARM GAS  /tmp/ccqED0AM.s 			page 718


 27985              		.loc 1 6147 3 view .LVU7368
 27986 01be DAF80000 		ldr	r0, [r10]
 27987              	.LVL2177:
 27988              	.LBB3644:
 27989              	.LBI3635:
1537:src/xeq.c     **** 	if (is_dblmode())
 27990              		.loc 1 1537 6 is_stmt 1 view .LVU7369
 27991              	.LBB3643:
1538:src/xeq.c     **** 		n <<= 1;
 27992              		.loc 1 1538 2 view .LVU7370
 27993              	.LBB3641:
 27994              	.LBI3637:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 27995              		.loc 1 1118 5 view .LVU7371
 27996              	.LBB3639:
1119:src/xeq.c     **** }
 27997              		.loc 1 1119 2 view .LVU7372
1119:src/xeq.c     **** }
 27998              		.loc 1 1119 24 is_stmt 0 view .LVU7373
 27999 01c2 B3F8E827 		ldrh	r2, [r3, #2024]
 28000              	.LBE3639:
 28001              	.LBE3641:
1540:src/xeq.c     **** }
 28002              		.loc 1 1540 2 view .LVU7374
 28003 01c6 1049     		ldr	r1, .L2022+28
 28004              	.LBB3642:
 28005              	.LBB3640:
1119:src/xeq.c     **** }
 28006              		.loc 1 1119 24 view .LVU7375
 28007 01c8 44F20103 		movw	r3, #16385
 28008              	.LBE3640:
 28009              	.LBE3642:
1538:src/xeq.c     **** 		n <<= 1;
 28010              		.loc 1 1538 5 view .LVU7376
 28011 01cc 1340     		ands	r3, r3, r2
 28012 01ce B3F5804F 		cmp	r3, #16384
1539:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 28013              		.loc 1 1539 3 is_stmt 1 view .LVU7377
1539:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 28014              		.loc 1 1539 5 is_stmt 0 view .LVU7378
 28015 01d2 08BF     		it	eq
 28016 01d4 6400     		lsleq	r4, r4, #1
 28017              	.LVL2178:
1540:src/xeq.c     **** }
 28018              		.loc 1 1540 2 is_stmt 1 view .LVU7379
 28019 01d6 E200     		lsls	r2, r4, #3
 28020 01d8 FFF7FEFF 		bl	xcopy
 28021              	.LVL2179:
1541:src/xeq.c     **** 
 28022              		.loc 1 1541 1 is_stmt 0 view .LVU7380
 28023 01dc 1DE7     		b	.L1976
 28024              	.LVL2180:
 28025              	.L2018:
1541:src/xeq.c     **** 
 28026              		.loc 1 1541 1 view .LVU7381
 28027              	.LBE3643:
 28028              	.LBE3644:
ARM GAS  /tmp/ccqED0AM.s 			page 719


6103:src/xeq.c     **** 		else
 28029              		.loc 1 6103 4 is_stmt 1 view .LVU7382
 28030 01de FFF7FEFF 		bl	setlastXY
 28031              	.LVL2181:
 28032 01e2 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 28033 01e4 61E7     		b	.L1980
 28034              	.LVL2182:
 28035              	.L2020:
6103:src/xeq.c     **** 		else
 28036              		.loc 1 6103 4 is_stmt 0 view .LVU7383
 28037 01e6 074E     		ldr	r6, .L2022+24
 28038 01e8 83E7     		b	.L1984
 28039              	.L2023:
 28040 01ea 00BF     		.align	2
 28041              	.L2022:
 28042 01ec 00000000 		.word	XromParams
 28043 01f0 00000000 		.word	Error
 28044 01f4 00000000 		.word	main_ram
 28045 01f8 00000000 		.word	UserLocalRegs
 28046 01fc 00000000 		.word	RetStk
 28047 0200 FEBFF78F 		.word	-1879588866
 28048 0204 00000000 		.word	StateWhileOn
 28049 0208 00000000 		.word	XromLocal
 28050 020c 00000000 		.word	StackBase
 28051              	.LBE3646:
 28052              	.LBE3647:
 28053              		.cfi_endproc
 28054              	.LFE267:
 28056              		.section	.text.cmdconverged,"ax",%progbits
 28057              		.align	1
 28058              		.p2align 2,,3
 28059              		.global	cmdconverged
 28060              		.syntax unified
 28061              		.thumb
 28062              		.thumb_func
 28063              		.fpu fpv4-sp-d16
 28065              	cmdconverged:
 28066              	.LVL2183:
 28067              	.LFB268:
6175:src/xeq.c     **** 
6176:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
6177:src/xeq.c     **** /*
6178:src/xeq.c     ****  *  Allow access to command argument from XROM
6179:src/xeq.c     ****  */
6180:src/xeq.c     **** void cmdxarg(unsigned int arg, enum rarg op) {
6181:src/xeq.c     **** 	set_reg_n_int_sgn(arg, XromArg, 0);
6182:src/xeq.c     **** }
6183:src/xeq.c     **** #endif
6184:src/xeq.c     **** 
6185:src/xeq.c     **** 
6186:src/xeq.c     **** /* A slightly obtuse command to check for convergence.
6187:src/xeq.c     ****  * Arguments are organised bitwise in this form:
6188:src/xeq.c     ****  *
6189:src/xeq.c     ****  *	SMMTT
6190:src/xeq.c     ****  *
6191:src/xeq.c     ****  * where:
6192:src/xeq.c     ****  *	TT is the tolerance parameter:
ARM GAS  /tmp/ccqED0AM.s 			page 720


6193:src/xeq.c     ****  *
6194:src/xeq.c     ****  *	  	0	1e-14 tolerance
6195:src/xeq.c     ****  *	  	1	1e-24 tolerance
6196:src/xeq.c     ****  *	  	2	1e-32 tolerance
6197:src/xeq.c     ****  *	  	3	choose the best tolerance for the current modes
6198:src/xeq.c     ****  *			for user mode this means 0 for single precision and 2 for double precision
6199:src/xeq.c     ****  *
6200:src/xeq.c     ****  *	MM is the mode parameter:
6201:src/xeq.c     ****  *	  	0	compare real X & Y relatively
6202:src/xeq.c     ****  *	  	1	compare real X & Y absolutely
6203:src/xeq.c     ****  *	  	2	compare complex X/Y & Z/T for absolute difference
6204:src/xeq.c     ****  *	  	3	compare real X & Y relatively
6205:src/xeq.c     ****  *
6206:src/xeq.c     ****  *	S is the special number validation:
6207:src/xeq.c     ****  *		0	Nan & infinities are considered converged
6208:src/xeq.c     ****  *		1	NaN & infinities are not considered converged
6209:src/xeq.c     ****  *
6210:src/xeq.c     ****  * In integer mode, the arguemnt is completely ignored and an equality
6211:src/xeq.c     ****  * comparision is undertaken instead.
6212:src/xeq.c     ****  */
6213:src/xeq.c     **** static const decNumber * const convergence_tolerances[3] = {
6214:src/xeq.c     **** 	&const_1e_14, &const_1e_24, &const_1e_32
6215:src/xeq.c     **** };
6216:src/xeq.c     **** 
6217:src/xeq.c     **** void cmdconverged(unsigned int arg, enum rarg cmd) {
 28068              		.loc 1 6217 52 is_stmt 1 view -0
 28069              		.cfi_startproc
 28070              		@ args = 0, pretend = 0, frame = 216
 28071              		@ frame_needed = 0, uses_anonymous_args = 0
6218:src/xeq.c     **** 	const decNumber *tolerance;
 28072              		.loc 1 6218 2 view .LVU7385
6219:src/xeq.c     **** 	unsigned int tol = arg & 3;
 28073              		.loc 1 6219 2 view .LVU7386
6220:src/xeq.c     **** 	const unsigned int mode = (arg >> 2) & 3;
6221:src/xeq.c     **** 	const int specials = arg & 0x10;
6222:src/xeq.c     **** 	const int complex = mode == 2;
6223:src/xeq.c     **** 	const int absolute = mode == 1;
6224:src/xeq.c     **** 	decNumber t, x, y, z, a, b;
6225:src/xeq.c     **** 	int res;
6226:src/xeq.c     **** 
6227:src/xeq.c     **** 	if (is_intmode()) {
 28074              		.loc 1 6227 6 is_stmt 0 view .LVU7387
 28075 0000 374B     		ldr	r3, .L2039
6217:src/xeq.c     **** 	const decNumber *tolerance;
 28076              		.loc 1 6217 52 view .LVU7388
 28077 0002 70B5     		push	{r4, r5, r6, lr}
 28078              		.cfi_def_cfa_offset 16
 28079              		.cfi_offset 4, -16
 28080              		.cfi_offset 5, -12
 28081              		.cfi_offset 6, -8
 28082              		.cfi_offset 14, -4
 28083              		.loc 1 6227 6 view .LVU7389
 28084 0004 1A68     		ldr	r2, [r3]
 28085 0006 92F8E817 		ldrb	r1, [r2, #2024]	@ zero_extendqisi2
 28086              	.LVL2184:
6220:src/xeq.c     **** 	const unsigned int mode = (arg >> 2) & 3;
 28087              		.loc 1 6220 2 is_stmt 1 view .LVU7390
ARM GAS  /tmp/ccqED0AM.s 			page 721


6221:src/xeq.c     **** 	const int complex = mode == 2;
 28088              		.loc 1 6221 2 view .LVU7391
6222:src/xeq.c     **** 	const int absolute = mode == 1;
 28089              		.loc 1 6222 2 view .LVU7392
6223:src/xeq.c     **** 	decNumber t, x, y, z, a, b;
 28090              		.loc 1 6223 2 view .LVU7393
6224:src/xeq.c     **** 	int res;
 28091              		.loc 1 6224 2 view .LVU7394
6225:src/xeq.c     **** 
 28092              		.loc 1 6225 2 view .LVU7395
 28093              		.loc 1 6227 2 view .LVU7396
 28094              		.loc 1 6227 5 is_stmt 0 view .LVU7397
 28095 000a CB07     		lsls	r3, r1, #31
6217:src/xeq.c     **** 	const decNumber *tolerance;
 28096              		.loc 1 6217 52 view .LVU7398
 28097 000c B8B0     		sub	sp, sp, #224
 28098              		.cfi_def_cfa_offset 240
 28099              		.loc 1 6227 5 view .LVU7399
 28100 000e 35D4     		bmi	.L2035
 28101 0010 00F00303 		and	r3, r0, #3
 28102              	.LVL2185:
6228:src/xeq.c     **** 		do_tst(regY_idx, TST_EQ);
6229:src/xeq.c     **** 		return;
6230:src/xeq.c     **** 	}
6231:src/xeq.c     **** 
6232:src/xeq.c     **** 	if (tol == 3) {
 28103              		.loc 1 6232 5 view .LVU7400
 28104 0014 032B     		cmp	r3, #3
 28105 0016 0446     		mov	r4, r0
 28106 0018 00F01005 		and	r5, r0, #16
 28107              	.LVL2186:
 28108              		.loc 1 6232 2 is_stmt 1 view .LVU7401
 28109              		.loc 1 6232 5 is_stmt 0 view .LVU7402
 28110 001c 24D0     		beq	.L2027
 28111 001e 314A     		ldr	r2, .L2039+4
 28112 0020 52F82360 		ldr	r6, [r2, r3, lsl #2]
 28113              	.LVL2187:
 28114              	.L2028:
6233:src/xeq.c     **** 		if (is_dblmode())
6234:src/xeq.c     **** 			tol = (! XromFlags.xIN || XromFlags.mode_double) ? 2 : 1;
6235:src/xeq.c     **** 		else
6236:src/xeq.c     **** 			tol = 0;
6237:src/xeq.c     **** 	}
6238:src/xeq.c     **** 	tolerance = convergence_tolerances[tol];
 28115              		.loc 1 6238 2 is_stmt 1 view .LVU7403
6239:src/xeq.c     **** 
6240:src/xeq.c     **** 	getXYZT(&x, &y, &z, &t);
 28116              		.loc 1 6240 2 view .LVU7404
 28117              	.LBB3648:
 28118              	.LBI3648:
 879:src/xeq.c     **** 	getXYZ(x, y, z);
 28119              		.loc 1 879 6 view .LVU7405
 28120              	.LBB3649:
 880:src/xeq.c     **** 	getT(t);
 28121              		.loc 1 880 2 view .LVU7406
 28122 0024 1DAA     		add	r2, sp, #116
 28123              	.LVL2188:
ARM GAS  /tmp/ccqED0AM.s 			page 722


 880:src/xeq.c     **** 	getT(t);
 28124              		.loc 1 880 2 is_stmt 0 view .LVU7407
 28125 0026 14A9     		add	r1, sp, #80
 28126              	.LVL2189:
 880:src/xeq.c     **** 	getT(t);
 28127              		.loc 1 880 2 view .LVU7408
 28128 0028 0BA8     		add	r0, sp, #44
 28129              	.LVL2190:
 880:src/xeq.c     **** 	getT(t);
 28130              		.loc 1 880 2 view .LVU7409
 28131 002a FFF7FEFF 		bl	getXYZ
 28132              	.LVL2191:
 881:src/xeq.c     **** }
 28133              		.loc 1 881 2 is_stmt 1 view .LVU7410
 28134              	.LBB3650:
 28135              	.LBI3650:
 850:src/xeq.c     **** 	getRegister(t, regT_idx);
 28136              		.loc 1 850 13 view .LVU7411
 28137              	.LBB3651:
 851:src/xeq.c     **** }
 28138              		.loc 1 851 2 view .LVU7412
 28139 002e 02A8     		add	r0, sp, #8
 28140              	.LVL2192:
 851:src/xeq.c     **** }
 28141              		.loc 1 851 2 is_stmt 0 view .LVU7413
 28142 0030 6721     		movs	r1, #103
 28143 0032 FFF7FEFF 		bl	getRegister
 28144              	.LVL2193:
 851:src/xeq.c     **** }
 28145              		.loc 1 851 2 view .LVU7414
 28146              	.LBE3651:
 28147              	.LBE3650:
 28148              	.LBE3649:
 28149              	.LBE3648:
6241:src/xeq.c     **** 	if (decNumberIsSpecial(&x) || decNumberIsSpecial(&y))
 28150              		.loc 1 6241 2 is_stmt 1 view .LVU7415
 28151              		.loc 1 6241 29 is_stmt 0 view .LVU7416
 28152 0036 9DF83430 		ldrb	r3, [sp, #52]	@ zero_extendqisi2
 28153 003a 9DF85820 		ldrb	r2, [sp, #88]	@ zero_extendqisi2
 28154 003e 1343     		orrs	r3, r3, r2
 28155 0040 13F0700F 		tst	r3, #112
 28156 0044 0BD1     		bne	.L2029
6220:src/xeq.c     **** 	const int specials = arg & 0x10;
 28157              		.loc 1 6220 21 view .LVU7417
 28158 0046 C4F38104 		ubfx	r4, r4, #2, #2
 28159              	.LVL2194:
6242:src/xeq.c     **** 		res = specials;
6243:src/xeq.c     **** 	else if (complex) {
 28160              		.loc 1 6243 7 is_stmt 1 view .LVU7418
 28161              		.loc 1 6243 10 is_stmt 0 view .LVU7419
 28162 004a 022C     		cmp	r4, #2
 28163 004c 26D0     		beq	.L2036
6244:src/xeq.c     **** 		if (decNumberIsSpecial(&z) || decNumberIsSpecial(&t))
6245:src/xeq.c     **** 			res = specials;
6246:src/xeq.c     **** 		else {
6247:src/xeq.c     **** 			cmplxSubtract(&a, &b, &x, &y, &z, &t);
6248:src/xeq.c     **** 			cmplxR(&x, &a, &b);
ARM GAS  /tmp/ccqED0AM.s 			page 723


6249:src/xeq.c     **** 			res = dn_lt(&x, tolerance);
6250:src/xeq.c     **** 		}
6251:src/xeq.c     **** 	} else {
6252:src/xeq.c     **** 		if (absolute)
 28164              		.loc 1 6252 3 is_stmt 1 view .LVU7420
 28165              		.loc 1 6252 6 is_stmt 0 view .LVU7421
 28166 004e 012C     		cmp	r4, #1
6253:src/xeq.c     **** 			res = absolute_error(&x, &y, tolerance);
 28167              		.loc 1 6253 10 view .LVU7422
 28168 0050 3246     		mov	r2, r6
 28169 0052 14A9     		add	r1, sp, #80
 28170 0054 0BA8     		add	r0, sp, #44
6252:src/xeq.c     **** 			res = absolute_error(&x, &y, tolerance);
 28171              		.loc 1 6252 6 view .LVU7423
 28172 0056 3ED0     		beq	.L2037
6254:src/xeq.c     **** 		else
6255:src/xeq.c     **** 			res = relative_error(&x, &y, tolerance);
 28173              		.loc 1 6255 4 is_stmt 1 view .LVU7424
 28174              		.loc 1 6255 10 is_stmt 0 view .LVU7425
 28175 0058 FFF7FEFF 		bl	relative_error
 28176              	.LVL2195:
 28177 005c 0546     		mov	r5, r0
 28178              	.LVL2196:
 28179              	.L2029:
6256:src/xeq.c     **** 	}
6257:src/xeq.c     **** 	fin_tst(res);
 28180              		.loc 1 6257 2 is_stmt 1 discriminator 1 view .LVU7426
 28181 005e 2846     		mov	r0, r5
 28182 0060 FFF7FEFF 		bl	fin_tst
 28183              	.LVL2197:
6258:src/xeq.c     **** }
 28184              		.loc 1 6258 1 is_stmt 0 discriminator 1 view .LVU7427
 28185 0064 38B0     		add	sp, sp, #224
 28186              		.cfi_remember_state
 28187              		.cfi_def_cfa_offset 16
 28188              		@ sp needed
 28189 0066 70BD     		pop	{r4, r5, r6, pc}
 28190              	.LVL2198:
 28191              	.L2027:
 28192              		.cfi_restore_state
6233:src/xeq.c     **** 			tol = (! XromFlags.xIN || XromFlags.mode_double) ? 2 : 1;
 28193              		.loc 1 6233 3 is_stmt 1 view .LVU7428
 28194              	.LBB3652:
 28195              	.LBI3652:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 28196              		.loc 1 1118 5 view .LVU7429
 28197              	.LBB3653:
1119:src/xeq.c     **** }
 28198              		.loc 1 1119 2 view .LVU7430
1119:src/xeq.c     **** }
 28199              		.loc 1 1119 24 is_stmt 0 view .LVU7431
 28200 0068 B2F8E827 		ldrh	r2, [r2, #2024]
 28201 006c 44F20103 		movw	r3, #16385
 28202              	.LVL2199:
1119:src/xeq.c     **** }
 28203              		.loc 1 1119 24 view .LVU7432
 28204              	.LBE3653:
ARM GAS  /tmp/ccqED0AM.s 			page 724


 28205              	.LBE3652:
6233:src/xeq.c     **** 			tol = (! XromFlags.xIN || XromFlags.mode_double) ? 2 : 1;
 28206              		.loc 1 6233 6 view .LVU7433
 28207 0070 1340     		ands	r3, r3, r2
 28208 0072 B3F5804F 		cmp	r3, #16384
 28209 0076 07D0     		beq	.L2038
 28210 0078 1B4E     		ldr	r6, .L2039+8
 28211 007a D3E7     		b	.L2028
 28212              	.LVL2200:
 28213              	.L2035:
6228:src/xeq.c     **** 		return;
 28214              		.loc 1 6228 3 is_stmt 1 view .LVU7434
 28215 007c 0021     		movs	r1, #0
 28216 007e 6520     		movs	r0, #101
 28217              	.LVL2201:
6228:src/xeq.c     **** 		return;
 28218              		.loc 1 6228 3 is_stmt 0 view .LVU7435
 28219 0080 FFF7FEFF 		bl	do_tst
 28220              	.LVL2202:
6229:src/xeq.c     **** 	}
 28221              		.loc 1 6229 3 is_stmt 1 view .LVU7436
 28222              		.loc 1 6258 1 is_stmt 0 view .LVU7437
 28223 0084 38B0     		add	sp, sp, #224
 28224              		.cfi_remember_state
 28225              		.cfi_def_cfa_offset 16
 28226              		@ sp needed
 28227 0086 70BD     		pop	{r4, r5, r6, pc}
 28228              	.LVL2203:
 28229              	.L2038:
 28230              		.cfi_restore_state
6234:src/xeq.c     **** 		else
 28231              		.loc 1 6234 4 is_stmt 1 view .LVU7438
6234:src/xeq.c     **** 		else
 28232              		.loc 1 6234 27 is_stmt 0 view .LVU7439
 28233 0088 184B     		ldr	r3, .L2039+12
6234:src/xeq.c     **** 		else
 28234              		.loc 1 6234 57 view .LVU7440
 28235 008a 194E     		ldr	r6, .L2039+16
6234:src/xeq.c     **** 		else
 28236              		.loc 1 6234 27 view .LVU7441
 28237 008c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
6234:src/xeq.c     **** 		else
 28238              		.loc 1 6234 57 view .LVU7442
 28239 008e 194A     		ldr	r2, .L2039+20
 28240 0090 03F08803 		and	r3, r3, #136
 28241 0094 802B     		cmp	r3, #128
 28242 0096 08BF     		it	eq
 28243 0098 1646     		moveq	r6, r2
 28244 009a C3E7     		b	.L2028
 28245              	.LVL2204:
 28246              	.L2036:
6244:src/xeq.c     **** 			res = specials;
 28247              		.loc 1 6244 3 is_stmt 1 view .LVU7443
6244:src/xeq.c     **** 			res = specials;
 28248              		.loc 1 6244 30 is_stmt 0 view .LVU7444
 28249 009c 9DF87C30 		ldrb	r3, [sp, #124]	@ zero_extendqisi2
 28250 00a0 9DF81020 		ldrb	r2, [sp, #16]	@ zero_extendqisi2
ARM GAS  /tmp/ccqED0AM.s 			page 725


 28251 00a4 1343     		orrs	r3, r3, r2
 28252 00a6 13F0700F 		tst	r3, #112
 28253 00aa D8D1     		bne	.L2029
6247:src/xeq.c     **** 			cmplxR(&x, &a, &b);
 28254              		.loc 1 6247 4 is_stmt 1 view .LVU7445
 28255 00ac 02AB     		add	r3, sp, #8
 28256 00ae 0193     		str	r3, [sp, #4]
 28257 00b0 1DAB     		add	r3, sp, #116
 28258 00b2 0093     		str	r3, [sp]
 28259 00b4 2FA9     		add	r1, sp, #188
 28260 00b6 14AB     		add	r3, sp, #80
 28261 00b8 26A8     		add	r0, sp, #152
 28262 00ba 0BAA     		add	r2, sp, #44
 28263 00bc FFF7FEFF 		bl	cmplxSubtract
 28264              	.LVL2205:
6248:src/xeq.c     **** 			res = dn_lt(&x, tolerance);
 28265              		.loc 1 6248 4 view .LVU7446
 28266 00c0 2FAA     		add	r2, sp, #188
 28267 00c2 26A9     		add	r1, sp, #152
 28268 00c4 0BA8     		add	r0, sp, #44
 28269 00c6 FFF7FEFF 		bl	cmplxR
 28270              	.LVL2206:
6249:src/xeq.c     **** 		}
 28271              		.loc 1 6249 4 view .LVU7447
6249:src/xeq.c     **** 		}
 28272              		.loc 1 6249 10 is_stmt 0 view .LVU7448
 28273 00ca 3146     		mov	r1, r6
 28274 00cc 0BA8     		add	r0, sp, #44
 28275 00ce FFF7FEFF 		bl	dn_lt
 28276              	.LVL2207:
 28277 00d2 0546     		mov	r5, r0
 28278              	.LVL2208:
6249:src/xeq.c     **** 		}
 28279              		.loc 1 6249 10 view .LVU7449
 28280 00d4 C3E7     		b	.L2029
 28281              	.LVL2209:
 28282              	.L2037:
6253:src/xeq.c     **** 		else
 28283              		.loc 1 6253 4 is_stmt 1 view .LVU7450
6253:src/xeq.c     **** 		else
 28284              		.loc 1 6253 10 is_stmt 0 view .LVU7451
 28285 00d6 FFF7FEFF 		bl	absolute_error
 28286              	.LVL2210:
 28287 00da 0546     		mov	r5, r0
 28288              	.LVL2211:
6253:src/xeq.c     **** 		else
 28289              		.loc 1 6253 10 view .LVU7452
 28290 00dc BFE7     		b	.L2029
 28291              	.L2040:
 28292 00de 00BF     		.align	2
 28293              	.L2039:
 28294 00e0 00000000 		.word	main_ram
 28295 00e4 00000000 		.word	.LANCHOR7
 28296 00e8 00000000 		.word	const_1e_14
 28297 00ec 00000000 		.word	XromParams
 28298 00f0 00000000 		.word	const_1e_32
 28299 00f4 00000000 		.word	const_1e_24
ARM GAS  /tmp/ccqED0AM.s 			page 726


 28300              		.cfi_endproc
 28301              	.LFE268:
 28303              		.section	.text.cmdshuffle,"ax",%progbits
 28304              		.align	1
 28305              		.p2align 2,,3
 28306              		.global	cmdshuffle
 28307              		.syntax unified
 28308              		.thumb
 28309              		.thumb_func
 28310              		.fpu fpv4-sp-d16
 28312              	cmdshuffle:
 28313              	.LVL2212:
 28314              	.LFB269:
6259:src/xeq.c     **** 
6260:src/xeq.c     **** void cmdshuffle(unsigned int arg, enum rarg cmd) {
 28315              		.loc 1 6260 50 is_stmt 1 view -0
 28316              		.cfi_startproc
 28317              		@ args = 0, pretend = 0, frame = 64
 28318              		@ frame_needed = 0, uses_anonymous_args = 0
6261:src/xeq.c     **** 	REGISTER xyzt[4];
 28319              		.loc 1 6261 2 view .LVU7454
6262:src/xeq.c     **** 	int i;
 28320              		.loc 1 6262 2 view .LVU7455
6263:src/xeq.c     **** 
6264:src/xeq.c     **** 	set_lift();
 28321              		.loc 1 6264 2 view .LVU7456
 28322              	.LBB3654:
 28323              	.LBI3654:
 767:src/xeq.c     ****     State2.state_lift = 1;
 28324              		.loc 1 767 6 view .LVU7457
 28325              	.LBB3655:
 768:src/xeq.c     **** }
 28326              		.loc 1 768 5 view .LVU7458
 28327              	.LBE3655:
 28328              	.LBE3654:
6260:src/xeq.c     **** 	REGISTER xyzt[4];
 28329              		.loc 1 6260 50 is_stmt 0 view .LVU7459
 28330 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 28331              		.cfi_def_cfa_offset 24
 28332              		.cfi_offset 4, -24
 28333              		.cfi_offset 5, -20
 28334              		.cfi_offset 6, -16
 28335              		.cfi_offset 7, -12
 28336              		.cfi_offset 8, -8
 28337              		.cfi_offset 14, -4
 28338              	.LBB3660:
 28339              	.LBB3656:
 768:src/xeq.c     **** }
 28340              		.loc 1 768 23 view .LVU7460
 28341 0004 1F4A     		ldr	r2, .L2051
 28342 0006 204E     		ldr	r6, .L2051+4
 28343 0008 D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 28344              	.LBE3656:
 28345              	.LBE3660:
6260:src/xeq.c     **** 	REGISTER xyzt[4];
 28346              		.loc 1 6260 50 view .LVU7461
 28347 000a 90B0     		sub	sp, sp, #64
ARM GAS  /tmp/ccqED0AM.s 			page 727


 28348              		.cfi_def_cfa_offset 88
 28349              	.LBB3661:
 28350              	.LBB3657:
 768:src/xeq.c     **** }
 28351              		.loc 1 768 23 view .LVU7462
 28352 000c 43F04003 		orr	r3, r3, #64
 28353              	.LBE3657:
 28354              	.LBE3661:
6260:src/xeq.c     **** 	REGISTER xyzt[4];
 28355              		.loc 1 6260 50 view .LVU7463
 28356 0010 0546     		mov	r5, r0
 28357              	.LBB3662:
 28358              	.LBB3658:
 768:src/xeq.c     **** }
 28359              		.loc 1 768 23 view .LVU7464
 28360 0012 D375     		strb	r3, [r2, #23]
 28361              	.LBE3658:
 28362              	.LBE3662:
6265:src/xeq.c     **** 	for (i=0; i<4; i++)
 28363              		.loc 1 6265 2 is_stmt 1 view .LVU7465
 28364              	.LVL2213:
 28365              		.loc 1 6265 12 view .LVU7466
 28366 0014 6F46     		mov	r7, sp
 28367              	.LBB3663:
 28368              	.LBB3659:
 768:src/xeq.c     **** }
 28369              		.loc 1 768 23 is_stmt 0 view .LVU7467
 28370 0016 6424     		movs	r4, #100
 28371              	.LBE3659:
 28372              	.LBE3663:
 28373              	.LBB3664:
 28374              	.LBB3665:
 28375              	.LBB3666:
 28376              	.LBB3667:
1119:src/xeq.c     **** }
 28377              		.loc 1 1119 24 view .LVU7468
 28378 0018 44F20108 		movw	r8, #16385
 28379              	.LVL2214:
 28380              	.L2043:
1119:src/xeq.c     **** }
 28381              		.loc 1 1119 24 view .LVU7469
 28382              	.LBE3667:
 28383              	.LBE3666:
 28384              	.LBE3665:
 28385              	.LBE3664:
6266:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 28386              		.loc 1 6266 3 is_stmt 1 discriminator 3 view .LVU7470
 28387              	.LBB3674:
 28388              	.LBI3674:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 28389              		.loc 1 718 11 discriminator 3 view .LVU7471
 28390              	.LBB3675:
 719:src/xeq.c     **** }
 28391              		.loc 1 719 2 discriminator 3 view .LVU7472
 719:src/xeq.c     **** }
 28392              		.loc 1 719 9 is_stmt 0 discriminator 3 view .LVU7473
 28393 001c 2046     		mov	r0, r4
ARM GAS  /tmp/ccqED0AM.s 			page 728


 28394 001e FFF7FEFF 		bl	get_reg_n
 28395              	.LVL2215:
 719:src/xeq.c     **** }
 28396              		.loc 1 719 9 discriminator 3 view .LVU7474
 28397              	.LBE3675:
 28398              	.LBE3674:
 28399              	.LBB3677:
 28400              	.LBB3672:
 28401              	.LBB3670:
 28402              	.LBB3668:
1119:src/xeq.c     **** }
 28403              		.loc 1 1119 24 discriminator 3 view .LVU7475
 28404 0022 3368     		ldr	r3, [r6]
 28405 0024 B3F8E837 		ldrh	r3, [r3, #2024]
 28406              	.LBE3668:
 28407              	.LBE3670:
 727:src/xeq.c     **** }
 28408              		.loc 1 727 2 discriminator 3 view .LVU7476
 28409 0028 08EA0303 		and	r3, r8, r3
 28410 002c B3F5804F 		cmp	r3, #16384
 28411              	.LBE3672:
 28412              	.LBE3677:
 28413              	.LBB3678:
 28414              	.LBB3676:
 719:src/xeq.c     **** }
 28415              		.loc 1 719 9 discriminator 3 view .LVU7477
 28416 0030 0146     		mov	r1, r0
 28417              	.LVL2216:
 719:src/xeq.c     **** }
 28418              		.loc 1 719 9 discriminator 3 view .LVU7478
 28419              	.LBE3676:
 28420              	.LBE3678:
 28421              	.LBB3679:
 28422              	.LBI3664:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 28423              		.loc 1 726 6 is_stmt 1 discriminator 3 view .LVU7479
 28424              	.LBB3673:
 727:src/xeq.c     **** }
 28425              		.loc 1 727 2 discriminator 3 view .LVU7480
 28426              	.LBB3671:
 28427              	.LBI3666:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 28428              		.loc 1 1118 5 discriminator 3 view .LVU7481
 28429              	.LBB3669:
1119:src/xeq.c     **** }
 28430              		.loc 1 1119 2 discriminator 3 view .LVU7482
 28431              	.LBE3669:
 28432              	.LBE3671:
 727:src/xeq.c     **** }
 28433              		.loc 1 727 2 is_stmt 0 discriminator 3 view .LVU7483
 28434 0032 0CBF     		ite	eq
 28435 0034 1022     		moveq	r2, #16
 28436 0036 0822     		movne	r2, #8
 28437 0038 3846     		mov	r0, r7
 28438              	.LVL2217:
 727:src/xeq.c     **** }
 28439              		.loc 1 727 2 discriminator 3 view .LVU7484
ARM GAS  /tmp/ccqED0AM.s 			page 729


 28440 003a 0134     		adds	r4, r4, #1
 28441              	.LVL2218:
 727:src/xeq.c     **** }
 28442              		.loc 1 727 2 discriminator 3 view .LVU7485
 28443 003c FFF7FEFF 		bl	xcopy
 28444              	.LVL2219:
 727:src/xeq.c     **** }
 28445              		.loc 1 727 2 discriminator 3 view .LVU7486
 28446              	.LBE3673:
 28447              	.LBE3679:
6265:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 28448              		.loc 1 6265 17 is_stmt 1 discriminator 3 view .LVU7487
6265:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 28449              		.loc 1 6265 12 discriminator 3 view .LVU7488
6265:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 28450              		.loc 1 6265 2 is_stmt 0 discriminator 3 view .LVU7489
 28451 0040 682C     		cmp	r4, #104
 28452 0042 07F11007 		add	r7, r7, #16
 28453 0046 E9D1     		bne	.L2043
 28454 0048 6424     		movs	r4, #100
 28455              	.LBB3680:
 28456              	.LBB3681:
 28457              	.LBB3682:
 28458              	.LBB3683:
1119:src/xeq.c     **** }
 28459              		.loc 1 1119 24 view .LVU7490
 28460 004a 44F20107 		movw	r7, #16385
 28461              	.L2045:
 28462              	.LVL2220:
1119:src/xeq.c     **** }
 28463              		.loc 1 1119 24 view .LVU7491
 28464              	.LBE3683:
 28465              	.LBE3682:
 28466              	.LBE3681:
 28467              	.LBE3680:
6267:src/xeq.c     **** 
6268:src/xeq.c     **** 	for (i=0; i<4; i++) {
6269:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 28468              		.loc 1 6269 3 is_stmt 1 view .LVU7492
 28469              	.LBB3690:
 28470              	.LBI3690:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 28471              		.loc 1 718 11 view .LVU7493
 28472              	.LBB3691:
 719:src/xeq.c     **** }
 28473              		.loc 1 719 2 view .LVU7494
 719:src/xeq.c     **** }
 28474              		.loc 1 719 9 is_stmt 0 view .LVU7495
 28475 004e 2046     		mov	r0, r4
 28476 0050 FFF7FEFF 		bl	get_reg_n
 28477              	.LVL2221:
 719:src/xeq.c     **** }
 28478              		.loc 1 719 9 view .LVU7496
 28479              	.LBE3691:
 28480              	.LBE3690:
 28481              	.LBB3692:
 28482              	.LBB3688:
ARM GAS  /tmp/ccqED0AM.s 			page 730


 28483              	.LBB3686:
 28484              	.LBB3684:
1119:src/xeq.c     **** }
 28485              		.loc 1 1119 24 view .LVU7497
 28486 0054 3368     		ldr	r3, [r6]
 28487 0056 B3F8E837 		ldrh	r3, [r3, #2024]
 28488              	.LBE3684:
 28489              	.LBE3686:
 727:src/xeq.c     **** }
 28490              		.loc 1 727 2 view .LVU7498
 28491 005a 3B40     		ands	r3, r3, r7
 28492 005c B3F5804F 		cmp	r3, #16384
 28493              	.LBE3688:
 28494              	.LBE3692:
 28495              		.loc 1 6269 36 view .LVU7499
 28496 0060 05F00301 		and	r1, r5, #3
 28497              	.LVL2222:
 28498              	.LBB3693:
 28499              	.LBI3680:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 28500              		.loc 1 726 6 is_stmt 1 view .LVU7500
 28501              	.LBB3689:
 727:src/xeq.c     **** }
 28502              		.loc 1 727 2 view .LVU7501
 28503              	.LBB3687:
 28504              	.LBI3682:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 28505              		.loc 1 1118 5 view .LVU7502
 28506              	.LBB3685:
1119:src/xeq.c     **** }
 28507              		.loc 1 1119 2 view .LVU7503
 28508              	.LBE3685:
 28509              	.LBE3687:
 727:src/xeq.c     **** }
 28510              		.loc 1 727 2 is_stmt 0 view .LVU7504
 28511 0064 0CBF     		ite	eq
 28512 0066 1022     		moveq	r2, #16
 28513 0068 0822     		movne	r2, #8
 28514 006a 0134     		adds	r4, r4, #1
 28515              	.LVL2223:
 727:src/xeq.c     **** }
 28516              		.loc 1 727 2 view .LVU7505
 28517 006c 0DEB0111 		add	r1, sp, r1, lsl #4
 28518              	.LVL2224:
 727:src/xeq.c     **** }
 28519              		.loc 1 727 2 view .LVU7506
 28520 0070 FFF7FEFF 		bl	xcopy
 28521              	.LVL2225:
 727:src/xeq.c     **** }
 28522              		.loc 1 727 2 view .LVU7507
 28523              	.LBE3689:
 28524              	.LBE3693:
6270:src/xeq.c     **** 		arg >>= 2;
 28525              		.loc 1 6270 3 is_stmt 1 view .LVU7508
6268:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 28526              		.loc 1 6268 2 is_stmt 0 view .LVU7509
 28527 0074 682C     		cmp	r4, #104
ARM GAS  /tmp/ccqED0AM.s 			page 731


 28528              		.loc 1 6270 7 view .LVU7510
 28529 0076 4FEA9505 		lsr	r5, r5, #2
 28530              	.LVL2226:
6268:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 28531              		.loc 1 6268 17 is_stmt 1 view .LVU7511
6268:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 28532              		.loc 1 6268 12 view .LVU7512
6268:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 28533              		.loc 1 6268 2 is_stmt 0 view .LVU7513
 28534 007a E8D1     		bne	.L2045
6271:src/xeq.c     **** 	}
6272:src/xeq.c     **** }
 28535              		.loc 1 6272 1 view .LVU7514
 28536 007c 10B0     		add	sp, sp, #64
 28537              		.cfi_def_cfa_offset 24
 28538              		@ sp needed
 28539 007e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 28540              	.LVL2227:
 28541              	.L2052:
 28542              		.loc 1 6272 1 view .LVU7515
 28543 0082 00BF     		.align	2
 28544              	.L2051:
 28545 0084 00000000 		.word	StateWhileOn
 28546 0088 00000000 		.word	main_ram
 28547              		.cfi_endproc
 28548              	.LFE269:
 28550              		.section	.text.cmdmode,"ax",%progbits
 28551              		.align	1
 28552              		.p2align 2,,3
 28553              		.global	cmdmode
 28554              		.syntax unified
 28555              		.thumb
 28556              		.thumb_func
 28557              		.fpu fpv4-sp-d16
 28559              	cmdmode:
 28560              	.LVL2228:
 28561              	.LFB270:
6273:src/xeq.c     **** 
6274:src/xeq.c     **** /*
6275:src/xeq.c     ****  *  Toggle UState mode bits from XROM
6276:src/xeq.c     ****  */
6277:src/xeq.c     **** void cmdmode(unsigned int arg, enum rarg cmd) {
 28562              		.loc 1 6277 47 is_stmt 1 view -0
 28563              		.cfi_startproc
 28564              		@ args = 0, pretend = 0, frame = 0
 28565              		@ frame_needed = 0, uses_anonymous_args = 0
 28566              		@ link register save eliminated.
6278:src/xeq.c     **** 	unsigned long long int bit = 1ll << arg;
 28567              		.loc 1 6278 2 view .LVU7517
6277:src/xeq.c     **** 	unsigned long long int bit = 1ll << arg;
 28568              		.loc 1 6277 47 is_stmt 0 view .LVU7518
 28569 0000 30B4     		push	{r4, r5}
 28570              		.cfi_def_cfa_offset 8
 28571              		.cfi_offset 4, -8
 28572              		.cfi_offset 5, -4
6279:src/xeq.c     **** 	unsigned long long int *mode = (unsigned long long int *) & UState;
 28573              		.loc 1 6279 62 view .LVU7519
ARM GAS  /tmp/ccqED0AM.s 			page 732


 28574 0002 134D     		ldr	r5, .L2058
6278:src/xeq.c     **** 	unsigned long long int bit = 1ll << arg;
 28575              		.loc 1 6278 35 view .LVU7520
 28576 0004 0122     		movs	r2, #1
 28577 0006 A0F12003 		sub	r3, r0, #32
 28578 000a C0F12004 		rsb	r4, r0, #32
 28579 000e 02FA03F3 		lsl	r3, r2, r3
 28580 0012 22FA04F4 		lsr	r4, r2, r4
 28581 0016 8240     		lsls	r2, r2, r0
 28582              		.loc 1 6279 62 view .LVU7521
 28583 0018 2868     		ldr	r0, [r5]
 28584              	.LVL2229:
6280:src/xeq.c     **** 
6281:src/xeq.c     **** 	if (cmd == RARG_MODE_SET)
 28585              		.loc 1 6281 5 view .LVU7522
 28586 001a 8129     		cmp	r1, #129
6282:src/xeq.c     **** 		*mode |= bit;
 28587              		.loc 1 6282 9 view .LVU7523
 28588 001c D0F8E457 		ldr	r5, [r0, #2020]
6278:src/xeq.c     **** 	unsigned long long int *mode = (unsigned long long int *) & UState;
 28589              		.loc 1 6278 35 view .LVU7524
 28590 0020 43EA0403 		orr	r3, r3, r4
 28591              	.LVL2230:
6279:src/xeq.c     **** 
 28592              		.loc 1 6279 2 is_stmt 1 view .LVU7525
6281:src/xeq.c     **** 		*mode |= bit;
 28593              		.loc 1 6281 2 view .LVU7526
 28594              		.loc 1 6282 9 is_stmt 0 view .LVU7527
 28595 0024 00F2E471 		addw	r1, r0, #2020
 28596              	.LVL2231:
6281:src/xeq.c     **** 		*mode |= bit;
 28597              		.loc 1 6281 5 view .LVU7528
 28598 0028 0AD0     		beq	.L2057
6283:src/xeq.c     **** 	else
6284:src/xeq.c     **** 		*mode &= ~bit;
 28599              		.loc 1 6284 3 is_stmt 1 view .LVU7529
 28600              		.loc 1 6284 9 is_stmt 0 view .LVU7530
 28601 002a D0F8E847 		ldr	r4, [r0, #2024]
 28602 002e 25EA0202 		bic	r2, r5, r2
 28603              	.LVL2232:
 28604              		.loc 1 6284 9 view .LVU7531
 28605 0032 24EA0303 		bic	r3, r4, r3
 28606              	.LVL2233:
 28607              		.loc 1 6284 9 view .LVU7532
 28608 0036 C0F8E427 		str	r2, [r0, #2020]
6285:src/xeq.c     **** }
 28609              		.loc 1 6285 1 view .LVU7533
 28610 003a 30BC     		pop	{r4, r5}
 28611              		.cfi_remember_state
 28612              		.cfi_restore 5
 28613              		.cfi_restore 4
 28614              		.cfi_def_cfa_offset 0
 28615 003c 4B60     		str	r3, [r1, #4]
 28616 003e 7047     		bx	lr
 28617              	.LVL2234:
 28618              	.L2057:
 28619              		.cfi_restore_state
ARM GAS  /tmp/ccqED0AM.s 			page 733


6282:src/xeq.c     **** 	else
 28620              		.loc 1 6282 3 is_stmt 1 view .LVU7534
6282:src/xeq.c     **** 	else
 28621              		.loc 1 6282 9 is_stmt 0 view .LVU7535
 28622 0040 4C68     		ldr	r4, [r1, #4]
 28623 0042 2A43     		orrs	r2, r2, r5
 28624              	.LVL2235:
6282:src/xeq.c     **** 	else
 28625              		.loc 1 6282 9 view .LVU7536
 28626 0044 2343     		orrs	r3, r3, r4
 28627              	.LVL2236:
6282:src/xeq.c     **** 	else
 28628              		.loc 1 6282 9 view .LVU7537
 28629 0046 C0F8E427 		str	r2, [r0, #2020]
 28630              		.loc 1 6285 1 view .LVU7538
 28631 004a 30BC     		pop	{r4, r5}
 28632              		.cfi_restore 5
 28633              		.cfi_restore 4
 28634              		.cfi_def_cfa_offset 0
 28635 004c 4B60     		str	r3, [r1, #4]
 28636 004e 7047     		bx	lr
 28637              	.L2059:
 28638              		.align	2
 28639              	.L2058:
 28640 0050 00000000 		.word	main_ram
 28641              		.cfi_endproc
 28642              	.LFE270:
 28644              		.section	.text.cmdlpop,"ax",%progbits
 28645              		.align	1
 28646              		.p2align 2,,3
 28647              		.global	cmdlpop
 28648              		.syntax unified
 28649              		.thumb
 28650              		.thumb_func
 28651              		.fpu fpv4-sp-d16
 28653              	cmdlpop:
 28654              	.LVL2237:
 28655              	.LFB271:
6286:src/xeq.c     **** 
6287:src/xeq.c     **** /*
6288:src/xeq.c     ****  *  Undo the effect of LOCL by popping the current local frame.
6289:src/xeq.c     ****  *  Needs to be executed from the same level that has established the frame.
6290:src/xeq.c     ****  */
6291:src/xeq.c     **** void cmdlpop(enum nilop op) {
 28656              		.loc 1 6291 29 is_stmt 1 view -0
 28657              		.cfi_startproc
 28658              		@ args = 0, pretend = 0, frame = 0
 28659              		@ frame_needed = 0, uses_anonymous_args = 0
6292:src/xeq.c     **** 	if (LocalRegs != RetStkPtr) {
 28660              		.loc 1 6292 2 view .LVU7540
6291:src/xeq.c     **** 	if (LocalRegs != RetStkPtr) {
 28661              		.loc 1 6291 29 is_stmt 0 view .LVU7541
 28662 0000 10B5     		push	{r4, lr}
 28663              		.cfi_def_cfa_offset 8
 28664              		.cfi_offset 4, -8
 28665              		.cfi_offset 14, -4
 28666              		.loc 1 6292 6 view .LVU7542
ARM GAS  /tmp/ccqED0AM.s 			page 734


 28667 0002 0C4C     		ldr	r4, .L2064
 28668 0004 2268     		ldr	r2, [r4]
 28669 0006 B2F8DE37 		ldrh	r3, [r2, #2014]
 28670              		.loc 1 6292 5 view .LVU7543
 28671 000a B2F9E227 		ldrsh	r2, [r2, #2018]
 28672 000e 43F34A13 		sbfx	r3, r3, #5, #11
 28673 0012 9342     		cmp	r3, r2
 28674 0014 05D0     		beq	.L2061
6293:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 28675              		.loc 1 6293 3 is_stmt 1 view .LVU7544
 28676              	.LVL2238:
 28677              	.LBB3698:
 28678              	.LBI3698:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28679              		.loc 1 546 5 view .LVU7545
 28680              	.LBB3699:
 547:src/xeq.c     **** 		Error = e;
 28681              		.loc 1 547 2 view .LVU7546
 547:src/xeq.c     **** 		Error = e;
 28682              		.loc 1 547 12 is_stmt 0 view .LVU7547
 28683 0016 084B     		ldr	r3, .L2064+4
 547:src/xeq.c     **** 		Error = e;
 28684              		.loc 1 547 5 view .LVU7548
 28685 0018 1A68     		ldr	r2, [r3]
 28686 001a 0AB9     		cbnz	r2, .L2060
 28687              	.LVL2239:
 28688              	.LBB3700:
 28689              	.LBI3700:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28690              		.loc 1 546 5 is_stmt 1 view .LVU7549
 28691              	.LBB3701:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 28692              		.loc 1 548 3 view .LVU7550
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 28693              		.loc 1 548 9 is_stmt 0 view .LVU7551
 28694 001c 0722     		movs	r2, #7
 28695 001e 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 28696              		.loc 1 549 3 is_stmt 1 view .LVU7552
 28697              	.LVL2240:
 28698              	.L2060:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 28699              		.loc 1 549 3 is_stmt 0 view .LVU7553
 28700              	.LBE3701:
 28701              	.LBE3700:
 28702              	.LBE3699:
 28703              	.LBE3698:
6294:src/xeq.c     **** 		return;
6295:src/xeq.c     **** 	}
6296:src/xeq.c     **** 	RetStkPtr = LocalRegs;
6297:src/xeq.c     **** 	retstk_up();
6298:src/xeq.c     **** 	--RetStkPtr;
6299:src/xeq.c     **** }
 28704              		.loc 1 6299 1 view .LVU7554
 28705 0020 10BD     		pop	{r4, pc}
 28706              	.LVL2241:
 28707              	.L2061:
ARM GAS  /tmp/ccqED0AM.s 			page 735


6296:src/xeq.c     **** 	retstk_up();
 28708              		.loc 1 6296 2 is_stmt 1 view .LVU7555
6297:src/xeq.c     **** 	--RetStkPtr;
 28709              		.loc 1 6297 2 view .LVU7556
 28710 0022 FFF7FEFF 		bl	retstk_up
 28711              	.LVL2242:
6298:src/xeq.c     **** }
 28712              		.loc 1 6298 2 view .LVU7557
6298:src/xeq.c     **** }
 28713              		.loc 1 6298 4 is_stmt 0 view .LVU7558
 28714 0026 2268     		ldr	r2, [r4]
6298:src/xeq.c     **** }
 28715              		.loc 1 6298 2 view .LVU7559
 28716 0028 B2F8E237 		ldrh	r3, [r2, #2018]
 28717 002c 013B     		subs	r3, r3, #1
 28718 002e A2F8E237 		strh	r3, [r2, #2018]	@ movhi
 28719              		.loc 1 6299 1 view .LVU7560
 28720 0032 10BD     		pop	{r4, pc}
 28721              	.L2065:
 28722              		.align	2
 28723              	.L2064:
 28724 0034 00000000 		.word	main_ram
 28725 0038 00000000 		.word	Error
 28726              		.cfi_endproc
 28727              	.LFE271:
 28729              		.section	.text.cmdregs,"ax",%progbits
 28730              		.align	1
 28731              		.p2align 2,,3
 28732              		.global	cmdregs
 28733              		.syntax unified
 28734              		.thumb
 28735              		.thumb_func
 28736              		.fpu fpv4-sp-d16
 28738              	cmdregs:
 28739              	.LVL2243:
 28740              	.LFB272:
6300:src/xeq.c     **** 
6301:src/xeq.c     **** /*
6302:src/xeq.c     ****  *  Reduce the number of global registers in favour of local data on the return stack
6303:src/xeq.c     ****  */
6304:src/xeq.c     **** void cmdregs(unsigned int arg, enum rarg op) {
 28741              		.loc 1 6304 46 is_stmt 1 view -0
 28742              		.cfi_startproc
 28743              		@ args = 0, pretend = 0, frame = 0
 28744              		@ frame_needed = 0, uses_anonymous_args = 0
6305:src/xeq.c     **** 	int distance;
 28745              		.loc 1 6305 2 view .LVU7562
6306:src/xeq.c     **** 	int length;
 28746              		.loc 1 6306 2 view .LVU7563
6307:src/xeq.c     **** 
6308:src/xeq.c     **** 	if (is_dblmode()) {
 28747              		.loc 1 6308 2 view .LVU7564
 28748              	.LBB3708:
 28749              	.LBI3708:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 28750              		.loc 1 1118 5 view .LVU7565
 28751              	.LBB3709:
ARM GAS  /tmp/ccqED0AM.s 			page 736


1119:src/xeq.c     **** }
 28752              		.loc 1 1119 2 view .LVU7566
 28753              	.LBE3709:
 28754              	.LBE3708:
6304:src/xeq.c     **** 	int distance;
 28755              		.loc 1 6304 46 is_stmt 0 view .LVU7567
 28756 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 28757              		.cfi_def_cfa_offset 24
 28758              		.cfi_offset 4, -24
 28759              		.cfi_offset 5, -20
 28760              		.cfi_offset 6, -16
 28761              		.cfi_offset 7, -12
 28762              		.cfi_offset 8, -8
 28763              		.cfi_offset 14, -4
 28764              	.LBB3711:
 28765              	.LBB3710:
1119:src/xeq.c     **** }
 28766              		.loc 1 1119 12 view .LVU7568
 28767 0004 294F     		ldr	r7, .L2082
 28768 0006 3A68     		ldr	r2, [r7]
1119:src/xeq.c     **** }
 28769              		.loc 1 1119 24 view .LVU7569
 28770 0008 B2F8E817 		ldrh	r1, [r2, #2024]
 28771              	.LVL2244:
1119:src/xeq.c     **** }
 28772              		.loc 1 1119 24 view .LVU7570
 28773 000c 44F20103 		movw	r3, #16385
 28774              	.LBE3710:
 28775              	.LBE3711:
 28776              		.loc 1 6308 5 view .LVU7571
 28777 0010 0B40     		ands	r3, r3, r1
 28778 0012 B3F5804F 		cmp	r3, #16384
6304:src/xeq.c     **** 	int distance;
 28779              		.loc 1 6304 46 view .LVU7572
 28780 0016 0446     		mov	r4, r0
 28781              		.loc 1 6308 5 view .LVU7573
 28782 0018 36D0     		beq	.L2078
6309:src/xeq.c     **** 		// DP register length 16 bytes
6310:src/xeq.c     **** 		length = (arg << 4); 
6311:src/xeq.c     **** 		// We need additional room for lettered registers
6312:src/xeq.c     **** 		arg = (arg << 1) + STACK_SIZE + EXTRA_REG;
6313:src/xeq.c     **** 	}
6314:src/xeq.c     **** 	else {
6315:src/xeq.c     **** 		if (UState.mode_double && arg < STACK_SIZE + EXTRA_REG) {
 28783              		.loc 1 6315 3 is_stmt 1 view .LVU7574
 28784              		.loc 1 6315 7 is_stmt 0 view .LVU7575
 28785 001a 92F8E937 		ldrb	r3, [r2, #2025]	@ zero_extendqisi2
 28786              		.loc 1 6315 6 view .LVU7576
 28787 001e 5B06     		lsls	r3, r3, #25
 28788 0020 29D4     		bmi	.L2079
 28789              	.L2069:
6316:src/xeq.c     **** 			// Special case: we're in int mode but came from DP
6317:src/xeq.c     **** 			// We must not release the space needed for the DP lettered registers
6318:src/xeq.c     **** 			report_err(ERR_RANGE);
6319:src/xeq.c     **** 			return;
6320:src/xeq.c     **** 		}
6321:src/xeq.c     **** 		// register length 8 bytes
ARM GAS  /tmp/ccqED0AM.s 			page 737


6322:src/xeq.c     **** 		length = (arg << 3);
 28790              		.loc 1 6322 3 is_stmt 1 view .LVU7577
 28791              		.loc 1 6322 17 is_stmt 0 view .LVU7578
 28792 0022 4FEAC408 		lsl	r8, r4, #3
 28793              	.LVL2245:
 28794              	.L2068:
6323:src/xeq.c     **** 	}
6324:src/xeq.c     **** 	distance = NumRegs - arg;
 28795              		.loc 1 6324 2 is_stmt 1 view .LVU7579
 28796              		.loc 1 6324 13 is_stmt 0 view .LVU7580
 28797 0026 92F8CF57 		ldrb	r5, [r2, #1999]	@ zero_extendqisi2
 28798              		.loc 1 6324 21 view .LVU7581
 28799 002a 2D1B     		subs	r5, r5, r4
 28800              	.LVL2246:
6325:src/xeq.c     **** 	
6326:src/xeq.c     **** 	// Move return stack, check for room
6327:src/xeq.c     **** 	if (move_retstk(distance << 2))
 28801              		.loc 1 6327 2 is_stmt 1 view .LVU7582
 28802              		.loc 1 6327 6 is_stmt 0 view .LVU7583
 28803 002c A800     		lsls	r0, r5, #2
 28804 002e FFF7FEFF 		bl	move_retstk
 28805              	.LVL2247:
 28806              		.loc 1 6327 5 view .LVU7584
 28807 0032 0646     		mov	r6, r0
 28808 0034 08B1     		cbz	r0, .L2080
 28809              	.LVL2248:
 28810              	.L2066:
6328:src/xeq.c     **** 		return;
6329:src/xeq.c     **** 	
6330:src/xeq.c     **** 	// Move register contents, including the statistics registers
6331:src/xeq.c     **** 	xcopy((unsigned short *)(Regs + TOPREALREG - arg)     - SizeStatRegs,
6332:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
6333:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
6334:src/xeq.c     **** 
6335:src/xeq.c     **** 	// Clear the left space
6336:src/xeq.c     **** 	if (distance < 0)
6337:src/xeq.c     **** 		xset(Regs + TOPREALREG + distance, 0, -distance << 3);
6338:src/xeq.c     **** 	NumRegs = arg;
6339:src/xeq.c     **** }
 28811              		.loc 1 6339 1 view .LVU7585
 28812 0036 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 28813              	.LVL2249:
 28814              	.L2080:
6331:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28815              		.loc 1 6331 2 is_stmt 1 view .LVU7586
6331:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28816              		.loc 1 6331 27 is_stmt 0 view .LVU7587
 28817 003a 3B68     		ldr	r3, [r7]
6331:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28818              		.loc 1 6331 56 view .LVU7588
 28819 003c 1C4A     		ldr	r2, .L2082+4
6332:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
 28820              		.loc 1 6332 45 view .LVU7589
 28821 003e 93F8CF17 		ldrb	r1, [r3, #1999]	@ zero_extendqisi2
6331:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28822              		.loc 1 6331 56 view .LVU7590
 28823 0042 1268     		ldr	r2, [r2]
ARM GAS  /tmp/ccqED0AM.s 			page 738


6332:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
 28824              		.loc 1 6332 45 view .LVU7591
 28825 0044 C1F16401 		rsb	r1, r1, #100
6331:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28826              		.loc 1 6331 45 view .LVU7592
 28827 0048 C4F16400 		rsb	r0, r4, #100
6331:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28828              		.loc 1 6331 27 view .LVU7593
 28829 004c 03F22C43 		addw	r3, r3, #1068
6332:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
 28830              		.loc 1 6332 56 view .LVU7594
 28831 0050 C2EB8101 		rsb	r1, r2, r1, lsl #2
6331:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28832              		.loc 1 6331 56 view .LVU7595
 28833 0054 C2EB8000 		rsb	r0, r2, r0, lsl #2
6331:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28834              		.loc 1 6331 2 view .LVU7596
 28835 0058 03EB4101 		add	r1, r3, r1, lsl #1
 28836 005c 08EB4202 		add	r2, r8, r2, lsl #1
 28837 0060 03EB4000 		add	r0, r3, r0, lsl #1
 28838 0064 FFF7FEFF 		bl	xcopy
 28839              	.LVL2250:
6336:src/xeq.c     **** 		xset(Regs + TOPREALREG + distance, 0, -distance << 3);
 28840              		.loc 1 6336 2 is_stmt 1 view .LVU7597
6336:src/xeq.c     **** 		xset(Regs + TOPREALREG + distance, 0, -distance << 3);
 28841              		.loc 1 6336 5 is_stmt 0 view .LVU7598
 28842 0068 002D     		cmp	r5, #0
 28843 006a 13DB     		blt	.L2081
 28844              	.L2073:
6338:src/xeq.c     **** }
 28845              		.loc 1 6338 2 is_stmt 1 view .LVU7599
6338:src/xeq.c     **** }
 28846              		.loc 1 6338 10 is_stmt 0 view .LVU7600
 28847 006c 3B68     		ldr	r3, [r7]
 28848 006e 83F8CF47 		strb	r4, [r3, #1999]
 28849              		.loc 1 6339 1 view .LVU7601
 28850 0072 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 28851              	.LVL2251:
 28852              	.L2079:
6315:src/xeq.c     **** 			// Special case: we're in int mode but came from DP
 28853              		.loc 1 6315 26 discriminator 1 view .LVU7602
 28854 0076 0B28     		cmp	r0, #11
 28855 0078 D3D8     		bhi	.L2069
6318:src/xeq.c     **** 			return;
 28856              		.loc 1 6318 4 is_stmt 1 view .LVU7603
 28857              	.LVL2252:
 28858              	.LBB3712:
 28859              	.LBI3712:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28860              		.loc 1 546 5 view .LVU7604
 28861              	.LBB3713:
 547:src/xeq.c     **** 		Error = e;
 28862              		.loc 1 547 2 view .LVU7605
 547:src/xeq.c     **** 		Error = e;
 28863              		.loc 1 547 12 is_stmt 0 view .LVU7606
 28864 007a 0E4B     		ldr	r3, .L2082+8
 547:src/xeq.c     **** 		Error = e;
ARM GAS  /tmp/ccqED0AM.s 			page 739


 28865              		.loc 1 547 5 view .LVU7607
 28866 007c 1A68     		ldr	r2, [r3]
 28867 007e 002A     		cmp	r2, #0
 28868 0080 D9D1     		bne	.L2066
 28869              	.LVL2253:
 28870              	.LBB3714:
 28871              	.LBI3714:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28872              		.loc 1 546 5 is_stmt 1 view .LVU7608
 28873              	.LBB3715:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 28874              		.loc 1 548 3 view .LVU7609
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 28875              		.loc 1 548 9 is_stmt 0 view .LVU7610
 28876 0082 0822     		movs	r2, #8
 28877 0084 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 28878              		.loc 1 549 3 is_stmt 1 view .LVU7611
 28879 0086 D6E7     		b	.L2066
 28880              	.LVL2254:
 28881              	.L2078:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 28882              		.loc 1 549 3 is_stmt 0 view .LVU7612
 28883              	.LBE3715:
 28884              	.LBE3714:
 28885              	.LBE3713:
 28886              	.LBE3712:
6310:src/xeq.c     **** 		// We need additional room for lettered registers
 28887              		.loc 1 6310 3 is_stmt 1 view .LVU7613
6312:src/xeq.c     **** 	}
 28888              		.loc 1 6312 14 is_stmt 0 view .LVU7614
 28889 0088 4300     		lsls	r3, r0, #1
6310:src/xeq.c     **** 		// We need additional room for lettered registers
 28890              		.loc 1 6310 17 view .LVU7615
 28891 008a 4FEA0018 		lsl	r8, r0, #4
 28892              	.LVL2255:
6312:src/xeq.c     **** 	}
 28893              		.loc 1 6312 3 is_stmt 1 view .LVU7616
6312:src/xeq.c     **** 	}
 28894              		.loc 1 6312 7 is_stmt 0 view .LVU7617
 28895 008e 03F10C04 		add	r4, r3, #12
 28896              	.LVL2256:
6312:src/xeq.c     **** 	}
 28897              		.loc 1 6312 7 view .LVU7618
 28898 0092 C8E7     		b	.L2068
 28899              	.LVL2257:
 28900              	.L2081:
6337:src/xeq.c     **** 	NumRegs = arg;
 28901              		.loc 1 6337 3 is_stmt 1 view .LVU7619
6337:src/xeq.c     **** 	NumRegs = arg;
 28902              		.loc 1 6337 8 is_stmt 0 view .LVU7620
 28903 0094 3868     		ldr	r0, [r7]
6337:src/xeq.c     **** 	NumRegs = arg;
 28904              		.loc 1 6337 41 view .LVU7621
 28905 0096 6A42     		rsbs	r2, r5, #0
6337:src/xeq.c     **** 	NumRegs = arg;
 28906              		.loc 1 6337 26 view .LVU7622
ARM GAS  /tmp/ccqED0AM.s 			page 740


 28907 0098 00EBC500 		add	r0, r0, r5, lsl #3
6337:src/xeq.c     **** 	NumRegs = arg;
 28908              		.loc 1 6337 3 view .LVU7623
 28909 009c 3146     		mov	r1, r6
 28910 009e D200     		lsls	r2, r2, #3
 28911 00a0 00F24C70 		addw	r0, r0, #1868
 28912 00a4 FFF7FEFF 		bl	xset
 28913              	.LVL2258:
 28914 00a8 E0E7     		b	.L2073
 28915              	.L2083:
 28916 00aa 00BF     		.align	2
 28917              	.L2082:
 28918 00ac 00000000 		.word	main_ram
 28919 00b0 00000000 		.word	SizeStatRegs
 28920 00b4 00000000 		.word	Error
 28921              		.cfi_endproc
 28922              	.LFE272:
 28924              		.section	.text.op_double,"ax",%progbits
 28925              		.align	1
 28926              		.p2align 2,,3
 28927              		.global	op_double
 28928              		.syntax unified
 28929              		.thumb
 28930              		.thumb_func
 28931              		.fpu fpv4-sp-d16
 28933              	op_double:
 28934              	.LVL2259:
 28935              	.LFB218:
4106:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
 28936              		.loc 1 4106 31 is_stmt 1 view -0
 28937              		.cfi_startproc
 28938              		@ args = 0, pretend = 0, frame = 40
 28939              		@ frame_needed = 0, uses_anonymous_args = 0
4107:src/xeq.c     **** 	const int intm = is_intmode();
 28940              		.loc 1 4107 2 view .LVU7625
4106:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
 28941              		.loc 1 4106 31 is_stmt 0 view .LVU7626
 28942 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 28943              		.cfi_def_cfa_offset 24
 28944              		.cfi_offset 4, -24
 28945              		.cfi_offset 5, -20
 28946              		.cfi_offset 6, -16
 28947              		.cfi_offset 7, -12
 28948              		.cfi_offset 8, -8
 28949              		.cfi_offset 14, -4
4108:src/xeq.c     **** 	int i;
 28950              		.loc 1 4108 19 view .LVU7627
 28951 0004 454E     		ldr	r6, .L2112
 28952 0006 3368     		ldr	r3, [r6]
4111:src/xeq.c     **** 		// Mode switch
 28953              		.loc 1 4111 5 view .LVU7628
 28954 0008 A0F1B504 		sub	r4, r0, #181
4111:src/xeq.c     **** 		// Mode switch
 28955              		.loc 1 4111 19 view .LVU7629
 28956 000c 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
4108:src/xeq.c     **** 	int i;
 28957              		.loc 1 4108 19 view .LVU7630
ARM GAS  /tmp/ccqED0AM.s 			page 741


 28958 0010 93F8E887 		ldrb	r8, [r3, #2024]	@ zero_extendqisi2
 28959              	.LVL2260:
4108:src/xeq.c     **** 	int i;
 28960              		.loc 1 4108 2 is_stmt 1 view .LVU7631
4111:src/xeq.c     **** 		// Mode switch
 28961              		.loc 1 4111 5 is_stmt 0 view .LVU7632
 28962 0014 B4FA84F4 		clz	r4, r4
 28963 0018 C2F38011 		ubfx	r1, r2, #6, #1
 28964 001c 6409     		lsrs	r4, r4, #5
 28965 001e 8C42     		cmp	r4, r1
4106:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
 28966              		.loc 1 4106 31 view .LVU7633
 28967 0020 8AB0     		sub	sp, sp, #40
 28968              		.cfi_def_cfa_offset 64
4108:src/xeq.c     **** 	int i;
 28969              		.loc 1 4108 12 view .LVU7634
 28970 0022 08F00108 		and	r8, r8, #1
 28971              	.LVL2261:
4109:src/xeq.c     **** 
 28972              		.loc 1 4109 2 is_stmt 1 view .LVU7635
4111:src/xeq.c     **** 		// Mode switch
 28973              		.loc 1 4111 2 view .LVU7636
4111:src/xeq.c     **** 		// Mode switch
 28974              		.loc 1 4111 5 is_stmt 0 view .LVU7637
 28975 0026 41D0     		beq	.L2085
4113:src/xeq.c     **** 			if (NumRegs < STACK_SIZE + EXTRA_REG) {
 28976              		.loc 1 4113 3 is_stmt 1 view .LVU7638
4113:src/xeq.c     **** 			if (NumRegs < STACK_SIZE + EXTRA_REG) {
 28977              		.loc 1 4113 6 is_stmt 0 view .LVU7639
 28978 0028 B528     		cmp	r0, #181
 28979 002a 4AD0     		beq	.L2110
4131:src/xeq.c     **** 				// Convert X to K to single precision
 28980              		.loc 1 4131 4 is_stmt 1 view .LVU7640
4131:src/xeq.c     **** 				// Convert X to K to single precision
 28981              		.loc 1 4131 7 is_stmt 0 view .LVU7641
 28982 002c B8F1000F 		cmp	r8, #0
 28983 0030 25D1     		bne	.L2093
 28984 0032 6F24     		movs	r4, #111
 28985 0034 01AF     		add	r7, sp, #4
 28986              	.LVL2262:
 28987              	.L2095:
4135:src/xeq.c     **** 			}
 28988              		.loc 1 4135 6 is_stmt 1 discriminator 3 view .LVU7642
4135:src/xeq.c     **** 			}
 28989              		.loc 1 4135 28 is_stmt 0 discriminator 3 view .LVU7643
 28990 0036 03F22C43 		addw	r3, r3, #1068
 28991              	.LBB3716:
 28992              	.LBB3717:
 719:src/xeq.c     **** }
 28993              		.loc 1 719 9 discriminator 3 view .LVU7644
 28994 003a 2046     		mov	r0, r4
 28995              	.LBE3717:
 28996              	.LBE3716:
4135:src/xeq.c     **** 			}
 28997              		.loc 1 4135 6 discriminator 3 view .LVU7645
 28998 003c 03EBC405 		add	r5, r3, r4, lsl #3
 28999              	.LVL2263:
ARM GAS  /tmp/ccqED0AM.s 			page 742


 29000              	.LBB3719:
 29001              	.LBI3716:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 29002              		.loc 1 718 11 is_stmt 1 discriminator 3 view .LVU7646
 29003              	.LBB3718:
 719:src/xeq.c     **** }
 29004              		.loc 1 719 2 discriminator 3 view .LVU7647
 719:src/xeq.c     **** }
 29005              		.loc 1 719 9 is_stmt 0 discriminator 3 view .LVU7648
 29006 0040 FFF7FEFF 		bl	get_reg_n
 29007              	.LVL2264:
 719:src/xeq.c     **** }
 29008              		.loc 1 719 9 discriminator 3 view .LVU7649
 29009              	.LBE3718:
 29010              	.LBE3719:
 29011              	.LBB3720:
 29012              	.LBI3720:
 648:src/xeq.c     **** 	decNumber temp;
 29013              		.loc 1 648 6 is_stmt 1 discriminator 3 view .LVU7650
 29014              	.LBB3721:
 649:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 29015              		.loc 1 649 2 discriminator 3 view .LVU7651
 650:src/xeq.c     **** }
 29016              		.loc 1 650 2 discriminator 3 view .LVU7652
 650:src/xeq.c     **** }
 29017              		.loc 1 650 24 is_stmt 0 discriminator 3 view .LVU7653
 29018 0044 3946     		mov	r1, r7
 29019 0046 FFF7FEFF 		bl	decimal128ToNumber
 29020              	.LVL2265:
 650:src/xeq.c     **** }
 29021              		.loc 1 650 24 discriminator 3 view .LVU7654
 29022 004a 013C     		subs	r4, r4, #1
 29023              	.LVL2266:
 650:src/xeq.c     **** }
 29024              		.loc 1 650 24 discriminator 3 view .LVU7655
 29025 004c 0146     		mov	r1, r0
 650:src/xeq.c     **** }
 29026              		.loc 1 650 2 discriminator 3 view .LVU7656
 29027 004e 2846     		mov	r0, r5
 29028 0050 FFF7FEFF 		bl	packed_from_number
 29029              	.LVL2267:
 650:src/xeq.c     **** }
 29030              		.loc 1 650 2 discriminator 3 view .LVU7657
 29031              	.LBE3721:
 29032              	.LBE3720:
4134:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
 29033              		.loc 1 4134 50 is_stmt 1 discriminator 3 view .LVU7658
4134:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
 29034              		.loc 1 4134 42 discriminator 3 view .LVU7659
4134:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
 29035              		.loc 1 4134 5 is_stmt 0 discriminator 3 view .LVU7660
 29036 0054 632C     		cmp	r4, #99
 29037 0056 3368     		ldr	r3, [r6]
 29038 0058 EDD1     		bne	.L2095
4137:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 29039              		.loc 1 4137 4 is_stmt 1 view .LVU7661
4137:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
ARM GAS  /tmp/ccqED0AM.s 			page 743


 29040              		.loc 1 4137 23 is_stmt 0 view .LVU7662
 29041 005a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
4138:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 29042              		.loc 1 4138 7 view .LVU7663
 29043 005e 93F8CF17 		ldrb	r1, [r3, #1999]	@ zero_extendqisi2
4137:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 29044              		.loc 1 4137 23 view .LVU7664
 29045 0062 6FF38612 		bfc	r2, #6, #1
4138:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 29046              		.loc 1 4138 7 view .LVU7665
 29047 0066 6429     		cmp	r1, #100
4137:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 29048              		.loc 1 4137 23 view .LVU7666
 29049 0068 83F8E927 		strb	r2, [r3, #2025]
4138:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 29050              		.loc 1 4138 4 is_stmt 1 view .LVU7667
4138:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 29051              		.loc 1 4138 7 is_stmt 0 view .LVU7668
 29052 006c 1AD8     		bhi	.L2098
 29053              	.LVL2268:
 29054              	.L2107:
4142:src/xeq.c     **** 	if (intm) {
 29055              		.loc 1 4142 2 is_stmt 1 view .LVU7669
4142:src/xeq.c     **** 	if (intm) {
 29056              		.loc 1 4142 14 is_stmt 0 view .LVU7670
 29057 006e 6420     		movs	r0, #100
 29058 0070 FFF7FEFF 		bl	get_reg_n
 29059              	.LVL2269:
4142:src/xeq.c     **** 	if (intm) {
 29060              		.loc 1 4142 12 view .LVU7671
 29061 0074 2A4B     		ldr	r3, .L2112+4
 29062 0076 1860     		str	r0, [r3]
4143:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 29063              		.loc 1 4143 2 is_stmt 1 view .LVU7672
 29064              	.L2084:
4147:src/xeq.c     **** 
 29065              		.loc 1 4147 1 is_stmt 0 view .LVU7673
 29066 0078 0AB0     		add	sp, sp, #40
 29067              		.cfi_remember_state
 29068              		.cfi_def_cfa_offset 24
 29069              		@ sp needed
 29070 007a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 29071              	.LVL2270:
 29072              	.L2093:
 29073              		.cfi_restore_state
4137:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 29074              		.loc 1 4137 4 is_stmt 1 view .LVU7674
4138:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 29075              		.loc 1 4138 7 is_stmt 0 view .LVU7675
 29076 007e 93F8CF17 		ldrb	r1, [r3, #1999]	@ zero_extendqisi2
4137:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 29077              		.loc 1 4137 23 view .LVU7676
 29078 0082 6FF38612 		bfc	r2, #6, #1
4138:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 29079              		.loc 1 4138 7 view .LVU7677
 29080 0086 6429     		cmp	r1, #100
4137:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
ARM GAS  /tmp/ccqED0AM.s 			page 744


 29081              		.loc 1 4137 23 view .LVU7678
 29082 0088 83F8E927 		strb	r2, [r3, #2025]
4138:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 29083              		.loc 1 4138 4 is_stmt 1 view .LVU7679
4138:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 29084              		.loc 1 4138 7 is_stmt 0 view .LVU7680
 29085 008c 0AD8     		bhi	.L2098
 29086              	.LVL2271:
 29087              	.L2106:
4142:src/xeq.c     **** 	if (intm) {
 29088              		.loc 1 4142 2 is_stmt 1 view .LVU7681
4142:src/xeq.c     **** 	if (intm) {
 29089              		.loc 1 4142 14 is_stmt 0 view .LVU7682
 29090 008e 6420     		movs	r0, #100
 29091 0090 FFF7FEFF 		bl	get_reg_n
 29092              	.LVL2272:
4142:src/xeq.c     **** 	if (intm) {
 29093              		.loc 1 4142 12 view .LVU7683
 29094 0094 224B     		ldr	r3, .L2112+4
 29095 0096 1860     		str	r0, [r3]
4143:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 29096              		.loc 1 4143 2 is_stmt 1 view .LVU7684
 29097              	.L2097:
4145:src/xeq.c     **** 	}
 29098              		.loc 1 4145 3 view .LVU7685
 29099 0098 DC20     		movs	r0, #220
 29100 009a FFF7FEFF 		bl	op_float
 29101              	.LVL2273:
4147:src/xeq.c     **** 
 29102              		.loc 1 4147 1 is_stmt 0 view .LVU7686
 29103 009e 0AB0     		add	sp, sp, #40
 29104              		.cfi_remember_state
 29105              		.cfi_def_cfa_offset 24
 29106              		@ sp needed
 29107 00a0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 29108              	.LVL2274:
 29109              	.L2098:
 29110              		.cfi_restore_state
4139:src/xeq.c     **** 		}
 29111              		.loc 1 4139 5 is_stmt 1 view .LVU7687
 29112 00a4 7D21     		movs	r1, #125
 29113 00a6 6420     		movs	r0, #100
 29114 00a8 FFF7FEFF 		bl	cmdregs
 29115              	.LVL2275:
 29116              	.L2085:
4142:src/xeq.c     **** 	if (intm) {
 29117              		.loc 1 4142 2 view .LVU7688
4142:src/xeq.c     **** 	if (intm) {
 29118              		.loc 1 4142 14 is_stmt 0 view .LVU7689
 29119 00ac 6420     		movs	r0, #100
 29120 00ae FFF7FEFF 		bl	get_reg_n
 29121              	.LVL2276:
4142:src/xeq.c     **** 	if (intm) {
 29122              		.loc 1 4142 12 view .LVU7690
 29123 00b2 1B4B     		ldr	r3, .L2112+4
 29124 00b4 1860     		str	r0, [r3]
4143:src/xeq.c     **** 		// Do the necessary conversions from integer mode
ARM GAS  /tmp/ccqED0AM.s 			page 745


 29125              		.loc 1 4143 2 is_stmt 1 view .LVU7691
4143:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 29126              		.loc 1 4143 5 is_stmt 0 view .LVU7692
 29127 00b6 B8F1000F 		cmp	r8, #0
 29128 00ba EDD1     		bne	.L2097
4147:src/xeq.c     **** 
 29129              		.loc 1 4147 1 view .LVU7693
 29130 00bc 0AB0     		add	sp, sp, #40
 29131              		.cfi_remember_state
 29132              		.cfi_def_cfa_offset 24
 29133              		@ sp needed
 29134 00be BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 29135              	.LVL2277:
 29136              	.L2110:
 29137              		.cfi_restore_state
4114:src/xeq.c     **** 				// Need space for double precision stack
 29138              		.loc 1 4114 4 is_stmt 1 view .LVU7694
4114:src/xeq.c     **** 				// Need space for double precision stack
 29139              		.loc 1 4114 7 is_stmt 0 view .LVU7695
 29140 00c2 93F8CF27 		ldrb	r2, [r3, #1999]	@ zero_extendqisi2
 29141 00c6 0B2A     		cmp	r2, #11
 29142 00c8 1ED9     		bls	.L2111
 29143              	.LVL2278:
 29144              	.L2087:
4122:src/xeq.c     **** 			if (! intm) {
 29145              		.loc 1 4122 4 is_stmt 1 view .LVU7696
4122:src/xeq.c     **** 			if (! intm) {
 29146              		.loc 1 4122 23 is_stmt 0 view .LVU7697
 29147 00ca 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 29148 00ce 42F04002 		orr	r2, r2, #64
 29149 00d2 83F8E927 		strb	r2, [r3, #2025]
4123:src/xeq.c     **** 				// Convert X to K to double precision
 29150              		.loc 1 4123 4 is_stmt 1 view .LVU7698
4123:src/xeq.c     **** 				// Convert X to K to double precision
 29151              		.loc 1 4123 7 is_stmt 0 view .LVU7699
 29152 00d6 B8F1000F 		cmp	r8, #0
 29153 00da D8D1     		bne	.L2106
 29154 00dc 6424     		movs	r4, #100
 29155 00de 01AF     		add	r7, sp, #4
 29156              	.L2091:
 29157              	.LVL2279:
4127:src/xeq.c     **** 			}
 29158              		.loc 1 4127 6 is_stmt 1 view .LVU7700
 29159              	.LBB3722:
 29160              	.LBI3722:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 29161              		.loc 1 718 11 view .LVU7701
 29162              	.LBB3723:
 719:src/xeq.c     **** }
 29163              		.loc 1 719 2 view .LVU7702
 719:src/xeq.c     **** }
 29164              		.loc 1 719 9 is_stmt 0 view .LVU7703
 29165 00e0 2046     		mov	r0, r4
 29166 00e2 FFF7FEFF 		bl	get_reg_n
 29167              	.LVL2280:
 29168              	.LBE3723:
 29169              	.LBE3722:
ARM GAS  /tmp/ccqED0AM.s 			page 746


4127:src/xeq.c     **** 			}
 29170              		.loc 1 4127 48 view .LVU7704
 29171 00e6 3368     		ldr	r3, [r6]
 29172 00e8 03F22C43 		addw	r3, r3, #1068
 29173              	.LBB3725:
 29174              	.LBB3724:
 719:src/xeq.c     **** }
 29175              		.loc 1 719 9 view .LVU7705
 29176 00ec 0546     		mov	r5, r0
 29177              	.LVL2281:
 719:src/xeq.c     **** }
 29178              		.loc 1 719 9 view .LVU7706
 29179              	.LBE3724:
 29180              	.LBE3725:
 29181              	.LBB3726:
 29182              	.LBI3726:
 654:src/xeq.c     **** 	decNumber temp;
 29183              		.loc 1 654 6 is_stmt 1 view .LVU7707
 29184              	.LBB3727:
 655:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 29185              		.loc 1 655 2 view .LVU7708
 656:src/xeq.c     **** }
 29186              		.loc 1 656 2 view .LVU7709
 656:src/xeq.c     **** }
 29187              		.loc 1 656 27 is_stmt 0 view .LVU7710
 29188 00ee 3946     		mov	r1, r7
 29189 00f0 03EBC400 		add	r0, r3, r4, lsl #3
 29190              	.LVL2282:
 656:src/xeq.c     **** }
 29191              		.loc 1 656 27 view .LVU7711
 29192 00f4 FFF7FEFF 		bl	decimal64ToNumber
 29193              	.LVL2283:
 656:src/xeq.c     **** }
 29194              		.loc 1 656 27 view .LVU7712
 29195 00f8 0134     		adds	r4, r4, #1
 29196              	.LVL2284:
 656:src/xeq.c     **** }
 29197              		.loc 1 656 27 view .LVU7713
 29198 00fa 0146     		mov	r1, r0
 656:src/xeq.c     **** }
 29199              		.loc 1 656 2 view .LVU7714
 29200 00fc 2846     		mov	r0, r5
 29201 00fe FFF7FEFF 		bl	packed128_from_number
 29202              	.LVL2285:
 656:src/xeq.c     **** }
 29203              		.loc 1 656 2 view .LVU7715
 29204              	.LBE3727:
 29205              	.LBE3726:
4126:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
 29206              		.loc 1 4126 45 is_stmt 1 view .LVU7716
4126:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
 29207              		.loc 1 4126 17 view .LVU7717
4126:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
 29208              		.loc 1 4126 5 is_stmt 0 view .LVU7718
 29209 0102 702C     		cmp	r4, #112
 29210 0104 ECD1     		bne	.L2091
 29211 0106 B2E7     		b	.L2107
ARM GAS  /tmp/ccqED0AM.s 			page 747


 29212              	.LVL2286:
 29213              	.L2111:
4116:src/xeq.c     **** 				if (Error) {
 29214              		.loc 1 4116 5 is_stmt 1 view .LVU7719
 29215 0108 7D21     		movs	r1, #125
 29216 010a 0C20     		movs	r0, #12
 29217              	.LVL2287:
4116:src/xeq.c     **** 				if (Error) {
 29218              		.loc 1 4116 5 is_stmt 0 view .LVU7720
 29219 010c FFF7FEFF 		bl	cmdregs
 29220              	.LVL2288:
4117:src/xeq.c     **** 					return;
 29221              		.loc 1 4117 5 is_stmt 1 view .LVU7721
4117:src/xeq.c     **** 					return;
 29222              		.loc 1 4117 9 is_stmt 0 view .LVU7722
 29223 0110 044B     		ldr	r3, .L2112+8
4117:src/xeq.c     **** 					return;
 29224              		.loc 1 4117 8 view .LVU7723
 29225 0112 1B68     		ldr	r3, [r3]
 29226 0114 002B     		cmp	r3, #0
 29227 0116 AFD1     		bne	.L2084
 29228 0118 3368     		ldr	r3, [r6]
 29229 011a D6E7     		b	.L2087
 29230              	.L2113:
 29231              		.align	2
 29232              	.L2112:
 29233 011c 00000000 		.word	main_ram
 29234 0120 00000000 		.word	StackBase
 29235 0124 00000000 		.word	Error
 29236              		.cfi_endproc
 29237              	.LFE218:
 29239              		.section	.text.cmdrestm,"ax",%progbits
 29240              		.align	1
 29241              		.p2align 2,,3
 29242              		.global	cmdrestm
 29243              		.syntax unified
 29244              		.thumb
 29245              		.thumb_func
 29246              		.fpu fpv4-sp-d16
 29248              	cmdrestm:
 29249              	.LVL2289:
 29250              	.LFB213:
3788:src/xeq.c     **** 	const int dbl = is_dblmode();
 29251              		.loc 1 3788 47 is_stmt 1 view -0
 29252              		.cfi_startproc
 29253              		@ args = 0, pretend = 0, frame = 0
 29254              		@ frame_needed = 0, uses_anonymous_args = 0
3789:src/xeq.c     **** 	const int intm = is_intmode();
 29255              		.loc 1 3789 2 view .LVU7725
 29256              	.LBB3728:
 29257              	.LBI3728:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 29258              		.loc 1 1118 5 view .LVU7726
 29259              	.LBB3729:
1119:src/xeq.c     **** }
 29260              		.loc 1 1119 2 view .LVU7727
 29261              	.LBE3729:
ARM GAS  /tmp/ccqED0AM.s 			page 748


 29262              	.LBE3728:
3788:src/xeq.c     **** 	const int dbl = is_dblmode();
 29263              		.loc 1 3788 47 is_stmt 0 view .LVU7728
 29264 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 29265              		.cfi_def_cfa_offset 24
 29266              		.cfi_offset 3, -24
 29267              		.cfi_offset 4, -20
 29268              		.cfi_offset 5, -16
 29269              		.cfi_offset 6, -12
 29270              		.cfi_offset 7, -8
 29271              		.cfi_offset 14, -4
 29272              	.LBB3737:
 29273              	.LBB3730:
1119:src/xeq.c     **** }
 29274              		.loc 1 1119 12 view .LVU7729
 29275 0002 254E     		ldr	r6, .L2121
 29276 0004 3568     		ldr	r5, [r6]
 29277              	.LBE3730:
 29278              	.LBE3737:
3790:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
 29279              		.loc 1 3790 19 view .LVU7730
 29280 0006 95F8E847 		ldrb	r4, [r5, #2024]	@ zero_extendqisi2
 29281              	.LBB3738:
 29282              	.LBB3731:
1119:src/xeq.c     **** }
 29283              		.loc 1 1119 24 view .LVU7731
 29284 000a B5F8E877 		ldrh	r7, [r5, #2024]
 29285              	.LVL2290:
1119:src/xeq.c     **** }
 29286              		.loc 1 1119 24 view .LVU7732
 29287              	.LBE3731:
 29288              	.LBE3738:
3790:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
 29289              		.loc 1 3790 2 is_stmt 1 view .LVU7733
3791:src/xeq.c     **** 
 29290              		.loc 1 3791 18 is_stmt 0 view .LVU7734
 29291 000e FFF7FEFF 		bl	get_reg_n
 29292              	.LVL2291:
3791:src/xeq.c     **** 
 29293              		.loc 1 3791 2 view .LVU7735
 29294 0012 0822     		movs	r2, #8
3791:src/xeq.c     **** 
 29295              		.loc 1 3791 18 view .LVU7736
 29296 0014 0146     		mov	r1, r0
3791:src/xeq.c     **** 
 29297              		.loc 1 3791 2 view .LVU7737
 29298 0016 05F2E470 		addw	r0, r5, #2020
 29299 001a FFF7FEFF 		bl	xcopy
 29300              	.LVL2292:
3798:src/xeq.c     **** 		// Switch back to decimal or integer mode
 29301              		.loc 1 3798 14 view .LVU7738
 29302 001e 3368     		ldr	r3, [r6]
 29303 0020 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
3790:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
 29304              		.loc 1 3790 19 view .LVU7739
 29305 0024 04F00104 		and	r4, r4, #1
 29306              	.LVL2293:
ARM GAS  /tmp/ccqED0AM.s 			page 749


3791:src/xeq.c     **** 
 29307              		.loc 1 3791 2 is_stmt 1 view .LVU7740
3798:src/xeq.c     **** 		// Switch back to decimal or integer mode
 29308              		.loc 1 3798 2 view .LVU7741
3798:src/xeq.c     **** 		// Switch back to decimal or integer mode
 29309              		.loc 1 3798 5 is_stmt 0 view .LVU7742
 29310 0028 02F00101 		and	r1, r2, #1
 29311 002c A142     		cmp	r1, r4
 29312 002e 08D0     		beq	.L2115
3800:src/xeq.c     **** 		if (intm)
 29313              		.loc 1 3800 3 is_stmt 1 view .LVU7743
3800:src/xeq.c     **** 		if (intm)
 29314              		.loc 1 3800 15 is_stmt 0 view .LVU7744
 29315 0030 64F30002 		bfi	r2, r4, #0, #1
 29316 0034 83F8E827 		strb	r2, [r3, #2024]
3801:src/xeq.c     **** 			op_float(OP_FLOAT_RCLM);
 29317              		.loc 1 3801 3 is_stmt 1 view .LVU7745
3801:src/xeq.c     **** 			op_float(OP_FLOAT_RCLM);
 29318              		.loc 1 3801 6 is_stmt 0 view .LVU7746
 29319 0038 4CB3     		cbz	r4, .L2116
3802:src/xeq.c     **** 		else
 29320              		.loc 1 3802 4 is_stmt 1 view .LVU7747
 29321 003a DD20     		movs	r0, #221
 29322 003c FFF7FEFF 		bl	op_float
 29323              	.LVL2294:
 29324 0040 3368     		ldr	r3, [r6]
 29325              	.L2115:
3806:src/xeq.c     **** 		// Switch back to double/single precision
 29326              		.loc 1 3806 2 view .LVU7748
3806:src/xeq.c     **** 		// Switch back to double/single precision
 29327              		.loc 1 3806 6 is_stmt 0 view .LVU7749
 29328 0042 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
3806:src/xeq.c     **** 		// Switch back to double/single precision
 29329              		.loc 1 3806 5 view .LVU7750
 29330 0046 D207     		lsls	r2, r2, #31
 29331 0048 20D4     		bmi	.L2114
 29332              	.LBB3739:
 29333              	.LBB3740:
1119:src/xeq.c     **** }
 29334              		.loc 1 1119 24 view .LVU7751
 29335 004a B3F8E827 		ldrh	r2, [r3, #2024]
 29336              	.LBE3740:
 29337              	.LBE3739:
 29338              	.LBB3743:
 29339              	.LBB3732:
 29340 004e 44F20101 		movw	r1, #16385
 29341              	.LBE3732:
 29342              	.LBE3743:
 29343              	.LBB3744:
 29344              	.LBB3741:
 29345 0052 0A40     		ands	r2, r2, r1
 29346              	.LBE3741:
 29347              	.LBE3744:
 29348              	.LBB3745:
 29349              	.LBB3733:
 29350 0054 0F40     		ands	r7, r7, r1
 29351              	.LVL2295:
ARM GAS  /tmp/ccqED0AM.s 			page 750


1119:src/xeq.c     **** }
 29352              		.loc 1 1119 24 view .LVU7752
 29353              	.LBE3733:
 29354              	.LBE3745:
3806:src/xeq.c     **** 		// Switch back to double/single precision
 29355              		.loc 1 3806 21 view .LVU7753
 29356 0056 A2F58042 		sub	r2, r2, #16384
 29357              	.LBB3746:
 29358              	.LBB3734:
1119:src/xeq.c     **** }
 29359              		.loc 1 1119 24 view .LVU7754
 29360 005a A7F58041 		sub	r1, r7, #16384
 29361              	.LBE3734:
 29362              	.LBE3746:
3806:src/xeq.c     **** 		// Switch back to double/single precision
 29363              		.loc 1 3806 21 view .LVU7755
 29364 005e B2FA82F2 		clz	r2, r2
 29365              	.LBB3747:
 29366              	.LBB3735:
1119:src/xeq.c     **** }
 29367              		.loc 1 1119 24 view .LVU7756
 29368 0062 B1FA81F1 		clz	r1, r1
 29369              	.LBE3735:
 29370              	.LBE3747:
3806:src/xeq.c     **** 		// Switch back to double/single precision
 29371              		.loc 1 3806 21 view .LVU7757
 29372 0066 5209     		lsrs	r2, r2, #5
 29373              	.LBB3748:
 29374              	.LBB3736:
1119:src/xeq.c     **** }
 29375              		.loc 1 1119 24 view .LVU7758
 29376 0068 4909     		lsrs	r1, r1, #5
 29377              	.LBE3736:
 29378              	.LBE3748:
 29379              	.LBB3749:
 29380              	.LBI3739:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 29381              		.loc 1 1118 5 is_stmt 1 view .LVU7759
 29382              	.LBB3742:
1119:src/xeq.c     **** }
 29383              		.loc 1 1119 2 view .LVU7760
 29384              	.LBE3742:
 29385              	.LBE3749:
3806:src/xeq.c     **** 		// Switch back to double/single precision
 29386              		.loc 1 3806 21 is_stmt 0 view .LVU7761
 29387 006a 8A42     		cmp	r2, r1
 29388 006c 0ED0     		beq	.L2114
3808:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
 29389              		.loc 1 3808 3 is_stmt 1 view .LVU7762
3808:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
 29390              		.loc 1 3808 22 is_stmt 0 view .LVU7763
 29391 006e 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 29392 0072 61F38612 		bfi	r2, r1, #6, #1
3809:src/xeq.c     **** 	}
 29393              		.loc 1 3809 3 view .LVU7764
 29394 0076 B7F5804F 		cmp	r7, #16384
3808:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
ARM GAS  /tmp/ccqED0AM.s 			page 751


 29395              		.loc 1 3808 22 view .LVU7765
 29396 007a 83F8E927 		strb	r2, [r3, #2025]
3809:src/xeq.c     **** 	}
 29397              		.loc 1 3809 3 is_stmt 1 view .LVU7766
3811:src/xeq.c     **** #endif
 29398              		.loc 1 3811 1 is_stmt 0 view .LVU7767
 29399 007e BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 29400              		.cfi_remember_state
 29401              		.cfi_restore 14
 29402              		.cfi_restore 7
 29403              		.cfi_restore 6
 29404              		.cfi_restore 5
 29405              		.cfi_restore 4
 29406              		.cfi_restore 3
 29407              		.cfi_def_cfa_offset 0
3809:src/xeq.c     **** 	}
 29408              		.loc 1 3809 3 view .LVU7768
 29409 0082 0CBF     		ite	eq
 29410 0084 B620     		moveq	r0, #182
 29411 0086 B520     		movne	r0, #181
 29412 0088 FFF7FEBF 		b	op_double
 29413              	.LVL2296:
 29414              	.L2114:
 29415              		.cfi_restore_state
3811:src/xeq.c     **** #endif
 29416              		.loc 1 3811 1 view .LVU7769
 29417 008c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 29418              	.LVL2297:
 29419              	.L2116:
3804:src/xeq.c     **** 	}
 29420              		.loc 1 3804 4 is_stmt 1 view .LVU7770
 29421 008e FFF7FEFF 		bl	switch_to_int
 29422              	.LVL2298:
 29423 0092 3368     		ldr	r3, [r6]
 29424 0094 D5E7     		b	.L2115
 29425              	.L2122:
 29426 0096 00BF     		.align	2
 29427              	.L2121:
 29428 0098 00000000 		.word	main_ram
 29429              		.cfi_endproc
 29430              	.LFE213:
 29432              		.section	.text.cmdxin,"ax",%progbits
 29433              		.align	1
 29434              		.p2align 2,,3
 29435              		.global	cmdxin
 29436              		.syntax unified
 29437              		.thumb
 29438              		.thumb_func
 29439              		.fpu fpv4-sp-d16
 29441              	cmdxin:
 29442              	.LVL2299:
 29443              	.LFB266:
5924:src/xeq.c     **** 
 29444              		.loc 1 5924 45 view -0
 29445              		.cfi_startproc
 29446              		@ args = 0, pretend = 0, frame = 40
 29447              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccqED0AM.s 			page 752


5926:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 29448              		.loc 1 5926 2 view .LVU7772
5936:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 29449              		.loc 1 5936 2 view .LVU7773
5924:src/xeq.c     **** 
 29450              		.loc 1 5924 45 is_stmt 0 view .LVU7774
 29451 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 29452              		.cfi_def_cfa_offset 24
 29453              		.cfi_offset 4, -24
 29454              		.cfi_offset 5, -20
 29455              		.cfi_offset 6, -16
 29456              		.cfi_offset 7, -12
 29457              		.cfi_offset 8, -8
 29458              		.cfi_offset 14, -4
5936:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 29459              		.loc 1 5936 6 view .LVU7775
 29460 0004 6B4D     		ldr	r5, .L2152
5936:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 29461              		.loc 1 5936 5 view .LVU7776
 29462 0006 95F90130 		ldrsb	r3, [r5, #1]
 29463 000a 002B     		cmp	r3, #0
5924:src/xeq.c     **** 
 29464              		.loc 1 5924 45 view .LVU7777
 29465 000c 8AB0     		sub	sp, sp, #40
 29466              		.cfi_def_cfa_offset 64
5936:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 29467              		.loc 1 5936 5 view .LVU7778
 29468 000e C0F2AF80 		blt	.L2149
5944:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 29469              		.loc 1 5944 2 is_stmt 1 view .LVU7779
 29470 0012 694E     		ldr	r6, .L2152+4
5949:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 29471              		.loc 1 5949 26 is_stmt 0 view .LVU7780
 29472 0014 694F     		ldr	r7, .L2152+8
 29473              	.LBB3765:
 29474              	.LBB3766:
 744:src/xeq.c     **** }
 29475              		.loc 1 744 15 view .LVU7781
 29476 0016 DFF8B881 		ldr	r8, .L2152+28
 29477 001a 0446     		mov	r4, r0
 29478              	.LBE3766:
 29479              	.LBE3765:
5944:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 29480              		.loc 1 5944 2 view .LVU7782
 29481 001c 4FF4E872 		mov	r2, #464
 29482 0020 0021     		movs	r1, #0
 29483              	.LVL2300:
5944:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 29484              		.loc 1 5944 2 view .LVU7783
 29485 0022 3046     		mov	r0, r6
 29486              	.LVL2301:
5944:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 29487              		.loc 1 5944 2 view .LVU7784
 29488 0024 FFF7FEFF 		bl	xset
 29489              	.LVL2302:
5945:src/xeq.c     **** 
 29490              		.loc 1 5945 2 is_stmt 1 view .LVU7785
ARM GAS  /tmp/ccqED0AM.s 			page 753


 29491 0028 1022     		movs	r2, #16
 29492 002a 0021     		movs	r1, #0
 29493 002c 2846     		mov	r0, r5
 29494 002e FFF7FEFF 		bl	xset
 29495              	.LVL2303:
5948:src/xeq.c     **** 	XromFlags.stack_depth = UState.stack_depth;
 29496              		.loc 1 5948 2 view .LVU7786
 29497              	.LBB3770:
 29498              	.LBI3765:
 743:src/xeq.c     **** 	return State2.state_lift;
 29499              		.loc 1 743 12 view .LVU7787
 29500              	.LBB3767:
 744:src/xeq.c     **** }
 29501              		.loc 1 744 2 view .LVU7788
 29502              	.LBE3767:
 29503              	.LBE3770:
5949:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 29504              		.loc 1 5949 26 is_stmt 0 view .LVU7789
 29505 0032 3A68     		ldr	r2, [r7]
5966:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 29506              		.loc 1 5966 17 view .LVU7790
 29507 0034 6249     		ldr	r1, .L2152+12
5967:src/xeq.c     **** 
 29508              		.loc 1 5967 20 view .LVU7791
 29509 0036 B2F8E2C7 		ldrh	ip, [r2, #2018]
5966:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 29510              		.loc 1 5966 17 view .LVU7792
 29511 003a 0868     		ldr	r0, [r1]
5967:src/xeq.c     **** 
 29512              		.loc 1 5967 20 view .LVU7793
 29513 003c A5F80CC0 		strh	ip, [r5, #12]	@ movhi
5969:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 29514              		.loc 1 5969 9 view .LVU7794
 29515 0040 06F5E87C 		add	ip, r6, #464
 29516 0044 C1F800C0 		str	ip, [r1]
5966:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 29517              		.loc 1 5966 17 view .LVU7795
 29518 0048 A860     		str	r0, [r5, #8]
5951:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29519              		.loc 1 5951 29 view .LVU7796
 29520 004a 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
5973:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 29521              		.loc 1 5973 12 view .LVU7797
 29522 004e B2F8DEE7 		ldrh	lr, [r2, #2014]
 29523              	.LBB3771:
 29524              	.LBB3768:
 744:src/xeq.c     **** }
 29525              		.loc 1 744 15 view .LVU7798
 29526 0052 98F81700 		ldrb	r0, [r8, #23]	@ zero_extendqisi2
 29527              	.LBE3768:
 29528              	.LBE3771:
5949:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 29529              		.loc 1 5949 32 view .LVU7799
 29530 0056 92F8EA17 		ldrb	r1, [r2, #2026]	@ zero_extendqisi2
5973:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 29531              		.loc 1 5973 12 view .LVU7800
 29532 005a 6FF0010C 		mvn	ip, #1
ARM GAS  /tmp/ccqED0AM.s 			page 754


5951:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29533              		.loc 1 5951 29 view .LVU7801
 29534 005e 03F00103 		and	r3, r3, #1
5973:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 29535              		.loc 1 5973 12 view .LVU7802
 29536 0062 6CF34F1E 		bfi	lr, ip, #5, #11
 29537              	.LBB3772:
 29538              	.LBB3769:
 744:src/xeq.c     **** }
 29539              		.loc 1 744 15 view .LVU7803
 29540 0066 C0F38010 		ubfx	r0, r0, #6, #1
 29541              	.LBE3769:
 29542              	.LBE3772:
5949:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 29543              		.loc 1 5949 2 is_stmt 1 view .LVU7804
5950:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
 29544              		.loc 1 5950 32 is_stmt 0 view .LVU7805
 29545 006a 92F8E9C7 		ldrb	ip, [r2, #2025]	@ zero_extendqisi2
5973:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 29546              		.loc 1 5973 12 view .LVU7806
 29547 006e A2F8DEE7 		strh	lr, [r2, #2014]	@ movhi
5951:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29548              		.loc 1 5951 21 view .LVU7807
 29549 0072 63F03F03 		orn	r3, r3, #63
 29550 0076 43EA4003 		orr	r3, r3, r0, lsl #1
5949:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 29551              		.loc 1 5949 32 view .LVU7808
 29552 007a C1F3C001 		ubfx	r1, r1, #3, #1
5950:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
 29553              		.loc 1 5950 2 is_stmt 1 view .LVU7809
5951:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29554              		.loc 1 5951 21 is_stmt 0 view .LVU7810
 29555 007e 43EA8103 		orr	r3, r3, r1, lsl #2
5950:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
 29556              		.loc 1 5950 32 view .LVU7811
 29557 0082 CCF3801C 		ubfx	ip, ip, #6, #1
5951:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29558              		.loc 1 5951 2 is_stmt 1 view .LVU7812
5952:src/xeq.c     **** 	XromFlags.state_lift = 1;
 29559              		.loc 1 5952 9 view .LVU7813
5951:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29560              		.loc 1 5951 21 is_stmt 0 view .LVU7814
 29561 0086 43EACC03 		orr	r3, r3, ip, lsl #3
5952:src/xeq.c     **** 	XromFlags.state_lift = 1;
 29562              		.loc 1 5952 41 view .LVU7815
 29563 008a 92F8EB17 		ldrb	r1, [r2, #2027]	@ zero_extendqisi2
5952:src/xeq.c     **** 	XromFlags.state_lift = 1;
 29564              		.loc 1 5952 33 view .LVU7816
 29565 008e A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
5985:src/xeq.c     **** 	XromIn = (arg & 0x7);
 29566              		.loc 1 5985 35 view .LVU7817
 29567 0090 C4F3C01C 		ubfx	ip, r4, #7, #1
5951:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29568              		.loc 1 5951 21 view .LVU7818
 29569 0094 43EA0C13 		orr	r3, r3, ip, lsl #4
5984:src/xeq.c     **** 	XromFlags.complex = (arg & 0x80) != 0;
 29570              		.loc 1 5984 36 view .LVU7819
ARM GAS  /tmp/ccqED0AM.s 			page 755


 29571 0098 C4F3801C 		ubfx	ip, r4, #6, #1
5951:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29572              		.loc 1 5951 21 view .LVU7820
 29573 009c 43EA4C13 		orr	r3, r3, ip, lsl #5
5952:src/xeq.c     **** 	XromFlags.state_lift = 1;
 29574              		.loc 1 5952 41 view .LVU7821
 29575 00a0 C1F30211 		ubfx	r1, r1, #4, #3
5953:src/xeq.c     **** 	XromFlags.xIN = 1;
 29576              		.loc 1 5953 2 is_stmt 1 view .LVU7822
5954:src/xeq.c     **** 
 29577              		.loc 1 5954 2 view .LVU7823
5966:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 29578              		.loc 1 5966 2 view .LVU7824
5967:src/xeq.c     **** 
 29579              		.loc 1 5967 2 view .LVU7825
5969:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 29580              		.loc 1 5969 2 view .LVU7826
5973:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 29581              		.loc 1 5973 2 view .LVU7827
5974:src/xeq.c     **** #endif
 29582              		.loc 1 5974 2 view .LVU7828
5973:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 29583              		.loc 1 5973 24 is_stmt 0 view .LVU7829
 29584 00a4 4FF6FE7C 		movw	ip, #65534
5952:src/xeq.c     **** 	XromFlags.state_lift = 1;
 29585              		.loc 1 5952 33 view .LVU7830
 29586 00a8 61F30200 		bfi	r0, r1, #0, #3
5974:src/xeq.c     **** #endif
 29587              		.loc 1 5974 17 view .LVU7831
 29588 00ac 41F2020E 		movw	lr, #4098
5986:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
 29589              		.loc 1 5986 16 view .LVU7832
 29590 00b0 04F00701 		and	r1, r4, #7
5951:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29591              		.loc 1 5951 21 view .LVU7833
 29592 00b4 6B70     		strb	r3, [r5, #1]
5987:src/xeq.c     **** #endif
 29593              		.loc 1 5987 24 view .LVU7834
 29594 00b6 C4F3C204 		ubfx	r4, r4, #3, #3
 29595              	.LVL2304:
5973:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 29596              		.loc 1 5973 24 view .LVU7835
 29597 00ba A2F8E2C7 		strh	ip, [r2, #2018]	@ movhi
5989:src/xeq.c     **** 		// Complex arguments are always in pairs
 29598              		.loc 1 5989 6 view .LVU7836
 29599 00be 5FFA83FC 		uxtb	ip, r3
5989:src/xeq.c     **** 		// Complex arguments are always in pairs
 29600              		.loc 1 5989 5 view .LVU7837
 29601 00c2 DB06     		lsls	r3, r3, #27
5974:src/xeq.c     **** #endif
 29602              		.loc 1 5974 17 view .LVU7838
 29603 00c4 A6F8CCE1 		strh	lr, [r6, #460]	@ movhi
5984:src/xeq.c     **** 	XromFlags.complex = (arg & 0x80) != 0;
 29604              		.loc 1 5984 2 is_stmt 1 view .LVU7839
5985:src/xeq.c     **** 	XromIn = (arg & 0x7);
 29605              		.loc 1 5985 2 view .LVU7840
5952:src/xeq.c     **** 	XromFlags.state_lift = 1;
ARM GAS  /tmp/ccqED0AM.s 			page 756


 29606              		.loc 1 5952 33 is_stmt 0 view .LVU7841
 29607 00c8 A870     		strb	r0, [r5, #2]
5986:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
 29608              		.loc 1 5986 2 is_stmt 1 view .LVU7842
5986:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
 29609              		.loc 1 5986 9 is_stmt 0 view .LVU7843
 29610 00ca 2971     		strb	r1, [r5, #4]
5987:src/xeq.c     **** #endif
 29611              		.loc 1 5987 2 is_stmt 1 view .LVU7844
5987:src/xeq.c     **** #endif
 29612              		.loc 1 5987 10 is_stmt 0 view .LVU7845
 29613 00cc 6C71     		strb	r4, [r5, #5]
5989:src/xeq.c     **** 		// Complex arguments are always in pairs
 29614              		.loc 1 5989 2 is_stmt 1 view .LVU7846
5989:src/xeq.c     **** 		// Complex arguments are always in pairs
 29615              		.loc 1 5989 5 is_stmt 0 view .LVU7847
 29616 00ce 03D5     		bpl	.L2127
5991:src/xeq.c     **** 		XromOut <<= 1;
 29617              		.loc 1 5991 3 is_stmt 1 view .LVU7848
5991:src/xeq.c     **** 		XromOut <<= 1;
 29618              		.loc 1 5991 10 is_stmt 0 view .LVU7849
 29619 00d0 4900     		lsls	r1, r1, #1
5992:src/xeq.c     **** 	}
 29620              		.loc 1 5992 11 view .LVU7850
 29621 00d2 6400     		lsls	r4, r4, #1
5991:src/xeq.c     **** 		XromOut <<= 1;
 29622              		.loc 1 5991 10 view .LVU7851
 29623 00d4 2971     		strb	r1, [r5, #4]
5992:src/xeq.c     **** 	}
 29624              		.loc 1 5992 3 is_stmt 1 view .LVU7852
5992:src/xeq.c     **** 	}
 29625              		.loc 1 5992 11 is_stmt 0 view .LVU7853
 29626 00d6 6C71     		strb	r4, [r5, #5]
 29627              	.L2127:
5995:src/xeq.c     **** 
 29628              		.loc 1 5995 9 is_stmt 1 view .LVU7854
5995:src/xeq.c     **** 
 29629              		.loc 1 5995 30 is_stmt 0 view .LVU7855
 29630 00d8 92F8EB37 		ldrb	r3, [r2, #2027]	@ zero_extendqisi2
6006:src/xeq.c     **** 		// Convert integers to decimal128
 29631              		.loc 1 6006 5 view .LVU7856
 29632 00dc 1CF0010F 		tst	ip, #1
5995:src/xeq.c     **** 
 29633              		.loc 1 5995 30 view .LVU7857
 29634 00e0 6FF30613 		bfc	r3, #4, #3
 29635 00e4 82F8EB37 		strb	r3, [r2, #2027]
6006:src/xeq.c     **** 		// Convert integers to decimal128
 29636              		.loc 1 6006 2 is_stmt 1 view .LVU7858
6006:src/xeq.c     **** 		// Convert integers to decimal128
 29637              		.loc 1 6006 5 is_stmt 0 view .LVU7859
 29638 00e8 52D1     		bne	.L2150
6014:src/xeq.c     **** 		// No conversion necessary
 29639              		.loc 1 6014 7 is_stmt 1 view .LVU7860
6014:src/xeq.c     **** 		// No conversion necessary
 29640              		.loc 1 6014 10 is_stmt 0 view .LVU7861
 29641 00ea 1CF0080F 		tst	ip, #8
 29642 00ee 47D1     		bne	.L2151
ARM GAS  /tmp/ccqED0AM.s 			page 757


6035:src/xeq.c     **** #endif
 29643              		.loc 1 6035 3 is_stmt 1 view .LVU7862
 29644 00f0 B520     		movs	r0, #181
 29645 00f2 FFF7FEFF 		bl	op_double
 29646              	.LVL2305:
 29647              	.L2129:
6040:src/xeq.c     **** 	UState.stack_depth = 1;
 29648              		.loc 1 6040 2 view .LVU7863
 29649              	.LBB3773:
 29650              	.LBI3773:
 767:src/xeq.c     ****     State2.state_lift = 1;
 29651              		.loc 1 767 6 view .LVU7864
 29652              	.LBB3774:
 768:src/xeq.c     **** }
 29653              		.loc 1 768 5 view .LVU7865
 768:src/xeq.c     **** }
 29654              		.loc 1 768 23 is_stmt 0 view .LVU7866
 29655 00f6 98F81730 		ldrb	r3, [r8, #23]	@ zero_extendqisi2
 29656              	.LBE3774:
 29657              	.LBE3773:
6041:src/xeq.c     **** 
 29658              		.loc 1 6041 21 view .LVU7867
 29659 00fa 3A68     		ldr	r2, [r7]
 29660              	.LBB3776:
 29661              	.LBB3775:
 768:src/xeq.c     **** }
 29662              		.loc 1 768 23 view .LVU7868
 29663 00fc 43F04003 		orr	r3, r3, #64
 29664 0100 88F81730 		strb	r3, [r8, #23]
 29665              	.LBE3775:
 29666              	.LBE3776:
6041:src/xeq.c     **** 
 29667              		.loc 1 6041 2 is_stmt 1 view .LVU7869
6041:src/xeq.c     **** 
 29668              		.loc 1 6041 21 is_stmt 0 view .LVU7870
 29669 0104 92F8EA37 		ldrb	r3, [r2, #2026]	@ zero_extendqisi2
 29670 0108 43F00803 		orr	r3, r3, #8
 29671 010c 82F8EA37 		strb	r3, [r2, #2026]
6044:src/xeq.c     **** 		decNumber x;
 29672              		.loc 1 6044 2 is_stmt 1 view .LVU7871
 29673              	.LVL2306:
6044:src/xeq.c     **** 		decNumber x;
 29674              		.loc 1 6044 14 view .LVU7872
6044:src/xeq.c     **** 		decNumber x;
 29675              		.loc 1 6044 2 is_stmt 0 view .LVU7873
 29676 0110 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 29677 0112 93B3     		cbz	r3, .L2123
6044:src/xeq.c     **** 		decNumber x;
 29678              		.loc 1 6044 9 view .LVU7874
 29679 0114 0024     		movs	r4, #0
 29680 0116 02E0     		b	.L2136
 29681              	.LVL2307:
 29682              	.L2131:
6044:src/xeq.c     **** 		decNumber x;
 29683              		.loc 1 6044 18 view .LVU7875
 29684 0118 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
6044:src/xeq.c     **** 		decNumber x;
ARM GAS  /tmp/ccqED0AM.s 			page 758


 29685              		.loc 1 6044 2 view .LVU7876
 29686 011a A342     		cmp	r3, r4
 29687 011c 2DDD     		ble	.L2123
 29688              	.LVL2308:
 29689              	.L2136:
 29690              	.LBB3777:
6045:src/xeq.c     **** 		if (decNumberIsNaN(getRegister(&x, regX_idx + i))) {
 29691              		.loc 1 6045 3 is_stmt 1 view .LVU7877
6046:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 29692              		.loc 1 6046 3 view .LVU7878
6046:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 29693              		.loc 1 6046 7 is_stmt 0 view .LVU7879
 29694 011e 04F16401 		add	r1, r4, #100
 29695 0122 01A8     		add	r0, sp, #4
 29696 0124 FFF7FEFF 		bl	getRegister
 29697              	.LVL2309:
 29698              	.LBE3777:
6044:src/xeq.c     **** 		decNumber x;
 29699              		.loc 1 6044 26 is_stmt 1 view .LVU7880
 29700              	.LBB3784:
6046:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 29701              		.loc 1 6046 6 is_stmt 0 view .LVU7881
 29702 0128 037A     		ldrb	r3, [r0, #8]	@ zero_extendqisi2
 29703 012a 13F0300F 		tst	r3, #48
 29704              	.LBE3784:
6044:src/xeq.c     **** 		decNumber x;
 29705              		.loc 1 6044 26 view .LVU7882
 29706 012e 04F10104 		add	r4, r4, #1
 29707              	.LVL2310:
6044:src/xeq.c     **** 		decNumber x;
 29708              		.loc 1 6044 14 is_stmt 1 view .LVU7883
 29709              	.LBB3785:
6046:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 29710              		.loc 1 6046 6 is_stmt 0 view .LVU7884
 29711 0132 F1D0     		beq	.L2131
6049:src/xeq.c     **** 				for (i = 0; i < XromOut; ++i)
 29712              		.loc 1 6049 4 is_stmt 1 view .LVU7885
 29713              	.LVL2311:
 29714              	.LBB3778:
 29715              	.LBI3778:
3556:src/xeq.c     **** 	unsigned short mask;
 29716              		.loc 1 3556 5 view .LVU7886
 29717              	.LBB3779:
3557:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
 29718              		.loc 1 3557 2 view .LVU7887
3558:src/xeq.c     **** 
 29719              		.loc 1 3558 2 view .LVU7888
3558:src/xeq.c     **** 
 29720              		.loc 1 3558 34 is_stmt 0 view .LVU7889
 29721 0134 0DF10201 		add	r1, sp, #2
 29722 0138 6B20     		movs	r0, #107
 29723 013a FFF7FEFF 		bl	flag_word
 29724              	.LVL2312:
3560:src/xeq.c     **** }
 29725              		.loc 1 3560 2 is_stmt 1 view .LVU7890
3560:src/xeq.c     **** }
 29726              		.loc 1 3560 24 is_stmt 0 view .LVU7891
ARM GAS  /tmp/ccqED0AM.s 			page 759


 29727 013e BDF80230 		ldrh	r3, [sp, #2]
 29728 0142 0288     		ldrh	r2, [r0]
 29729              	.LBE3779:
 29730              	.LBE3778:
6049:src/xeq.c     **** 				for (i = 0; i < XromOut; ++i)
 29731              		.loc 1 6049 7 view .LVU7892
 29732 0144 1A42     		tst	r2, r3
 29733 0146 2DD0     		beq	.L2132
 29734              	.LVL2313:
6050:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29735              		.loc 1 6050 17 is_stmt 1 view .LVU7893
6050:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29736              		.loc 1 6050 5 is_stmt 0 view .LVU7894
 29737 0148 6B79     		ldrb	r3, [r5, #5]	@ zero_extendqisi2
 29738 014a 53B1     		cbz	r3, .L2133
6051:src/xeq.c     **** 				// Early exit of routine
 29739              		.loc 1 6051 6 view .LVU7895
 29740 014c 1D4E     		ldr	r6, .L2152+16
6050:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29741              		.loc 1 6050 12 view .LVU7896
 29742 014e 0024     		movs	r4, #0
 29743              	.LVL2314:
 29744              	.L2134:
6051:src/xeq.c     **** 				// Early exit of routine
 29745              		.loc 1 6051 6 is_stmt 1 discriminator 3 view .LVU7897
 29746 0150 04F16400 		add	r0, r4, #100
 29747 0154 3146     		mov	r1, r6
 29748 0156 FFF7FEFF 		bl	setRegister
 29749              	.LVL2315:
6050:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29750              		.loc 1 6050 30 discriminator 3 view .LVU7898
6050:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29751              		.loc 1 6050 21 is_stmt 0 discriminator 3 view .LVU7899
 29752 015a 6B79     		ldrb	r3, [r5, #5]	@ zero_extendqisi2
6050:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29753              		.loc 1 6050 30 discriminator 3 view .LVU7900
 29754 015c 0134     		adds	r4, r4, #1
 29755              	.LVL2316:
6050:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29756              		.loc 1 6050 17 is_stmt 1 discriminator 3 view .LVU7901
6050:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29757              		.loc 1 6050 5 is_stmt 0 discriminator 3 view .LVU7902
 29758 015e A342     		cmp	r3, r4
 29759 0160 F6DC     		bgt	.L2134
 29760              	.LVL2317:
 29761              	.L2133:
6053:src/xeq.c     **** 			} 
 29762              		.loc 1 6053 5 is_stmt 1 view .LVU7903
 29763 0162 8421     		movs	r1, #132
 29764 0164 0020     		movs	r0, #0
 29765 0166 FFF7FEFF 		bl	cmdxout
 29766              	.LVL2318:
 29767              	.LBE3785:
6060:src/xeq.c     **** 
 29768              		.loc 1 6060 1 is_stmt 0 view .LVU7904
 29769 016a 0AB0     		add	sp, sp, #40
 29770              		.cfi_remember_state
ARM GAS  /tmp/ccqED0AM.s 			page 760


 29771              		.cfi_def_cfa_offset 24
 29772              		@ sp needed
 29773 016c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 29774              	.LVL2319:
 29775              	.L2149:
 29776              		.cfi_restore_state
5937:src/xeq.c     **** 		return;
 29777              		.loc 1 5937 3 is_stmt 1 view .LVU7905
 29778              	.LBB3786:
 29779              	.LBI3786:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29780              		.loc 1 546 5 view .LVU7906
 29781              	.LBB3787:
 547:src/xeq.c     **** 		Error = e;
 29782              		.loc 1 547 2 view .LVU7907
 547:src/xeq.c     **** 		Error = e;
 29783              		.loc 1 547 12 is_stmt 0 view .LVU7908
 29784 0170 154B     		ldr	r3, .L2152+20
 547:src/xeq.c     **** 		Error = e;
 29785              		.loc 1 547 5 view .LVU7909
 29786 0172 1A68     		ldr	r2, [r3]
 29787 0174 0AB9     		cbnz	r2, .L2123
 29788              	.LVL2320:
 29789              	.LBB3788:
 29790              	.LBI3788:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29791              		.loc 1 546 5 is_stmt 1 view .LVU7910
 29792              	.LBB3789:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 29793              		.loc 1 548 3 view .LVU7911
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 29794              		.loc 1 548 9 is_stmt 0 view .LVU7912
 29795 0176 0722     		movs	r2, #7
 29796 0178 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 29797              		.loc 1 549 3 is_stmt 1 view .LVU7913
 29798              	.LVL2321:
 29799              	.L2123:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 29800              		.loc 1 549 3 is_stmt 0 view .LVU7914
 29801              	.LBE3789:
 29802              	.LBE3788:
 29803              	.LBE3787:
 29804              	.LBE3786:
6060:src/xeq.c     **** 
 29805              		.loc 1 6060 1 view .LVU7915
 29806 017a 0AB0     		add	sp, sp, #40
 29807              		.cfi_remember_state
 29808              		.cfi_def_cfa_offset 24
 29809              		@ sp needed
 29810 017c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 29811              	.L2151:
 29812              		.cfi_restore_state
6016:src/xeq.c     **** 		StackBase = XromStack;
 29813              		.loc 1 6016 3 is_stmt 1 view .LVU7916
 29814 0180 124C     		ldr	r4, .L2152+24
 29815 0182 0D48     		ldr	r0, .L2152+4
ARM GAS  /tmp/ccqED0AM.s 			page 761


 29816 0184 2168     		ldr	r1, [r4]
 29817 0186 C022     		movs	r2, #192
 29818 0188 FFF7FEFF 		bl	xcopy
 29819              	.LVL2322:
6017:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 29820              		.loc 1 6017 3 view .LVU7917
6017:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 29821              		.loc 1 6017 13 is_stmt 0 view .LVU7918
 29822 018c 2660     		str	r6, [r4]
 29823 018e B2E7     		b	.L2129
 29824              	.L2150:
6009:src/xeq.c     **** #endif
 29825              		.loc 1 6009 3 is_stmt 1 view .LVU7919
6009:src/xeq.c     **** #endif
 29826              		.loc 1 6009 22 is_stmt 0 view .LVU7920
 29827 0190 92F8E937 		ldrb	r3, [r2, #2025]	@ zero_extendqisi2
 29828 0194 43F04003 		orr	r3, r3, #64
 29829 0198 82F8E937 		strb	r3, [r2, #2025]
6011:src/xeq.c     **** 		// Do not copy the local registers because we don't use this case anyway
 29830              		.loc 1 6011 3 is_stmt 1 view .LVU7921
 29831 019c DC20     		movs	r0, #220
 29832 019e FFF7FEFF 		bl	op_float
 29833              	.LVL2323:
 29834 01a2 A8E7     		b	.L2129
 29835              	.LVL2324:
 29836              	.L2132:
 29837              	.LBB3790:
6056:src/xeq.c     **** 			return;
 29838              		.loc 1 6056 5 view .LVU7922
 29839              	.LBB3780:
 29840              	.LBI3780:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29841              		.loc 1 546 5 view .LVU7923
 29842              	.LBB3781:
 547:src/xeq.c     **** 		Error = e;
 29843              		.loc 1 547 2 view .LVU7924
 547:src/xeq.c     **** 		Error = e;
 29844              		.loc 1 547 12 is_stmt 0 view .LVU7925
 29845 01a4 084B     		ldr	r3, .L2152+20
 547:src/xeq.c     **** 		Error = e;
 29846              		.loc 1 547 5 view .LVU7926
 29847 01a6 1A68     		ldr	r2, [r3]
 29848 01a8 002A     		cmp	r2, #0
 29849 01aa E6D1     		bne	.L2123
 29850              	.LVL2325:
 29851              	.LBB3782:
 29852              	.LBI3782:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29853              		.loc 1 546 5 is_stmt 1 view .LVU7927
 29854              	.LBB3783:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 29855              		.loc 1 548 3 view .LVU7928
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 29856              		.loc 1 548 9 is_stmt 0 view .LVU7929
 29857 01ac 0122     		movs	r2, #1
 29858 01ae 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
ARM GAS  /tmp/ccqED0AM.s 			page 762


 29859              		.loc 1 549 3 is_stmt 1 view .LVU7930
 29860              	.LVL2326:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 29861              		.loc 1 549 3 is_stmt 0 view .LVU7931
 29862              	.LBE3783:
 29863              	.LBE3782:
 29864              	.LBE3781:
 29865              	.LBE3780:
6057:src/xeq.c     **** 		}
 29866              		.loc 1 6057 4 is_stmt 1 view .LVU7932
 29867 01b0 E3E7     		b	.L2123
 29868              	.L2153:
 29869 01b2 00BF     		.align	2
 29870              	.L2152:
 29871 01b4 00000000 		.word	XromParams
 29872 01b8 00000000 		.word	XromLocal
 29873 01bc 00000000 		.word	main_ram
 29874 01c0 00000000 		.word	RetStk
 29875 01c4 00000000 		.word	const_NaN
 29876 01c8 00000000 		.word	Error
 29877 01cc 00000000 		.word	StackBase
 29878 01d0 00000000 		.word	StateWhileOn
 29879              	.LBE3790:
 29880              		.cfi_endproc
 29881              	.LFE266:
 29883              		.section	.rodata.xeq.str1.4,"aMS",%progbits,1
 29884              		.align	2
 29885              	.LC8:
 29886 0000 25303458 		.ascii	"%04X:%s\000"
 29886      3A257300 
 29887              		.section	.text.xeq,"ax",%progbits
 29888              		.align	1
 29889              		.p2align 2,,3
 29890              		.global	xeq
 29891              		.syntax unified
 29892              		.thumb
 29893              		.thumb_func
 29894              		.fpu fpv4-sp-d16
 29896              	xeq:
 29897              	.LVL2327:
 29898              	.LFB251:
5320:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 29899              		.loc 1 5320 1 view -0
 29900              		.cfi_startproc
 29901              		@ args = 0, pretend = 0, frame = 424
 29902              		@ frame_needed = 0, uses_anonymous_args = 0
5321:src/xeq.c     **** 	const unsigned short flags = UserFlags[regA_idx >> 4];
 29903              		.loc 1 5321 2 view .LVU7934
5322:src/xeq.c     **** 	const struct _ustate old = UState;
 29904              		.loc 1 5322 2 view .LVU7935
5320:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 29905              		.loc 1 5320 1 is_stmt 0 view .LVU7936
 29906 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 29907              		.cfi_def_cfa_offset 36
 29908              		.cfi_offset 4, -36
 29909              		.cfi_offset 5, -32
 29910              		.cfi_offset 6, -28
ARM GAS  /tmp/ccqED0AM.s 			page 763


 29911              		.cfi_offset 7, -24
 29912              		.cfi_offset 8, -20
 29913              		.cfi_offset 9, -16
 29914              		.cfi_offset 10, -12
 29915              		.cfi_offset 11, -8
 29916              		.cfi_offset 14, -4
5322:src/xeq.c     **** 	const struct _ustate old = UState;
 29917              		.loc 1 5322 31 view .LVU7937
 29918 0004 834F     		ldr	r7, .L2506
 29919              	.LBB4096:
 29920              	.LBB4097:
 744:src/xeq.c     **** }
 29921              		.loc 1 744 15 view .LVU7938
 29922 0006 844C     		ldr	r4, .L2506+4
 29923              	.LBE4097:
 29924              	.LBE4096:
5322:src/xeq.c     **** 	const struct _ustate old = UState;
 29925              		.loc 1 5322 31 view .LVU7939
 29926 0008 3B68     		ldr	r3, [r7]
 29927              	.LBB4102:
 29928              	.LBB4098:
 744:src/xeq.c     **** }
 29929              		.loc 1 744 15 view .LVU7940
 29930 000a E67D     		ldrb	r6, [r4, #23]	@ zero_extendqisi2
 29931              	.LBE4098:
 29932              	.LBE4102:
5323:src/xeq.c     **** 	const unsigned char lift = get_lift();
 29933              		.loc 1 5323 23 view .LVU7941
 29934 000c D3F8E817 		ldr	r1, [r3, #2024]
5322:src/xeq.c     **** 	const struct _ustate old = UState;
 29935              		.loc 1 5322 23 view .LVU7942
 29936 0010 B3F8FC27 		ldrh	r2, [r3, #2044]
5320:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 29937              		.loc 1 5320 1 view .LVU7943
 29938 0014 EDB0     		sub	sp, sp, #436
 29939              		.cfi_def_cfa_offset 472
5320:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 29940              		.loc 1 5320 1 view .LVU7944
 29941 0016 0546     		mov	r5, r0
5323:src/xeq.c     **** 	const unsigned char lift = get_lift();
 29942              		.loc 1 5323 23 view .LVU7945
 29943 0018 D3F8E407 		ldr	r0, [r3, #2020]
 29944              	.LVL2328:
5322:src/xeq.c     **** 	const struct _ustate old = UState;
 29945              		.loc 1 5322 23 view .LVU7946
 29946 001c 0292     		str	r2, [sp, #8]
 29947              	.LVL2329:
5323:src/xeq.c     **** 	const unsigned char lift = get_lift();
 29948              		.loc 1 5323 2 is_stmt 1 view .LVU7947
5325:src/xeq.c     **** 	const int old_cl = *((int *)&CommandLine);
 29949              		.loc 1 5325 23 is_stmt 0 view .LVU7948
 29950 001e B3F8E027 		ldrh	r2, [r3, #2016]
 29951 0022 0392     		str	r2, [sp, #12]
5323:src/xeq.c     **** 	const unsigned char lift = get_lift();
 29952              		.loc 1 5323 23 view .LVU7949
 29953 0024 0CAB     		add	r3, sp, #48
 29954 0026 83E80300 		stm	r3, {r0, r1}
ARM GAS  /tmp/ccqED0AM.s 			page 764


5324:src/xeq.c     **** 	const unsigned short old_pc = state_pc();
 29955              		.loc 1 5324 2 is_stmt 1 view .LVU7950
 29956              	.LBB4103:
 29957              	.LBI4096:
 743:src/xeq.c     **** 	return State2.state_lift;
 29958              		.loc 1 743 12 view .LVU7951
 29959              	.LBB4099:
 744:src/xeq.c     **** }
 29960              		.loc 1 744 2 view .LVU7952
 29961              	.LBE4099:
 29962              	.LBE4103:
5341:src/xeq.c     **** #if defined(CONSOLE)
 29963              		.loc 1 5341 2 is_stmt 0 view .LVU7953
 29964 002a 7C4B     		ldr	r3, .L2506+8
5326:src/xeq.c     **** #ifdef INFRARED
 29965              		.loc 1 5326 12 view .LVU7954
 29966 002c E269     		ldr	r2, [r4, #28]
5341:src/xeq.c     **** #if defined(CONSOLE)
 29967              		.loc 1 5341 2 view .LVU7955
 29968 002e 1968     		ldr	r1, [r3]
5326:src/xeq.c     **** #ifdef INFRARED
 29969              		.loc 1 5326 12 view .LVU7956
 29970 0030 0492     		str	r2, [sp, #16]
 29971              	.LBB4104:
 29972              	.LBB4100:
 744:src/xeq.c     **** }
 29973              		.loc 1 744 15 view .LVU7957
 29974 0032 C6F38013 		ubfx	r3, r6, #6, #1
 29975              	.LBE4100:
 29976              	.LBE4104:
5341:src/xeq.c     **** #if defined(CONSOLE)
 29977              		.loc 1 5341 2 view .LVU7958
 29978 0036 A022     		movs	r2, #160
 29979 0038 44A8     		add	r0, sp, #272
 29980              	.LBB4105:
 29981              	.LBB4101:
 744:src/xeq.c     **** }
 29982              		.loc 1 744 15 view .LVU7959
 29983 003a 0593     		str	r3, [sp, #20]
 29984              	.LVL2330:
 744:src/xeq.c     **** }
 29985              		.loc 1 744 15 view .LVU7960
 29986              	.LBE4101:
 29987              	.LBE4105:
5325:src/xeq.c     **** 	const int old_cl = *((int *)&CommandLine);
 29988              		.loc 1 5325 2 is_stmt 1 view .LVU7961
5326:src/xeq.c     **** #ifdef INFRARED
 29989              		.loc 1 5326 2 view .LVU7962
5328:src/xeq.c     **** #endif
 29990              		.loc 1 5328 2 view .LVU7963
5341:src/xeq.c     **** #if defined(CONSOLE)
 29991              		.loc 1 5341 2 view .LVU7964
 29992 003c FFF7FEFF 		bl	xcopy
 29993              	.LVL2331:
5346:src/xeq.c     **** 		char buf[16];
 29994              		.loc 1 5346 2 view .LVU7965
5346:src/xeq.c     **** 		char buf[16];
ARM GAS  /tmp/ccqED0AM.s 			page 765


 29995              		.loc 1 5346 5 is_stmt 0 view .LVU7966
 29996 0040 94F91730 		ldrsb	r3, [r4, #23]
 29997 0044 002B     		cmp	r3, #0
 29998 0046 39DB     		blt	.L2433
 29999              	.L2447:
 30000 0048 0DF1EC0A 		add	r10, sp, #236
 30001              	.L2155:
5359:src/xeq.c     **** #endif
 30002              		.loc 1 5359 2 is_stmt 1 view .LVU7967
 30003              	.LVL2332:
 30004              	.LBB4106:
 30005              	.LBI4106:
3556:src/xeq.c     **** 	unsigned short mask;
 30006              		.loc 1 3556 5 view .LVU7968
 30007              	.LBB4107:
3557:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
 30008              		.loc 1 3557 2 view .LVU7969
3558:src/xeq.c     **** 
 30009              		.loc 1 3558 2 view .LVU7970
3558:src/xeq.c     **** 
 30010              		.loc 1 3558 34 is_stmt 0 view .LVU7971
 30011 004c 5146     		mov	r1, r10
 30012 004e 6720     		movs	r0, #103
 30013 0050 FFF7FEFF 		bl	flag_word
 30014              	.LVL2333:
3560:src/xeq.c     **** }
 30015              		.loc 1 3560 2 is_stmt 1 view .LVU7972
3560:src/xeq.c     **** }
 30016              		.loc 1 3560 24 is_stmt 0 view .LVU7973
 30017 0054 BDF8EC30 		ldrh	r3, [sp, #236]
 30018 0058 0688     		ldrh	r6, [r0]
 30019              	.LVL2334:
3560:src/xeq.c     **** }
 30020              		.loc 1 3560 24 view .LVU7974
 30021              	.LBE4107:
 30022              	.LBE4106:
5359:src/xeq.c     **** #endif
 30023              		.loc 1 5359 67 view .LVU7975
 30024 005a 1E40     		ands	r6, r6, r3
 30025 005c 09D0     		beq	.L2158
 30026              	.LBB4108:
 30027              	.LBI4108:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 30028              		.loc 1 185 5 is_stmt 1 view .LVU7976
 30029              	.LBB4109:
 186:src/xeq.c     **** }
 30030              		.loc 1 186 2 view .LVU7977
 186:src/xeq.c     **** }
 30031              		.loc 1 186 9 is_stmt 0 view .LVU7978
 30032 005e 3B68     		ldr	r3, [r7]
 30033 0060 B3F8E037 		ldrh	r3, [r3, #2016]
 30034              	.LBE4109:
 30035              	.LBE4108:
5359:src/xeq.c     **** #endif
 30036              		.loc 1 5359 34 view .LVU7979
 30037 0064 9B0B     		lsrs	r3, r3, #14
 30038 0066 032B     		cmp	r3, #3
ARM GAS  /tmp/ccqED0AM.s 			page 766


 30039 0068 00F0C680 		beq	.L2473
 30040              	.L2159:
5359:src/xeq.c     **** #endif
 30041              		.loc 1 5359 67 discriminator 5 view .LVU7980
 30042 006c A67D     		ldrb	r6, [r4, #22]	@ zero_extendqisi2
 30043 006e C6F38016 		ubfx	r6, r6, #6, #1
 30044              	.L2158:
 30045              	.LVL2335:
5361:src/xeq.c     **** 	print_trace( op, 0 );
 30046              		.loc 1 5361 2 is_stmt 1 discriminator 10 view .LVU7981
5361:src/xeq.c     **** 	print_trace( op, 0 );
 30047              		.loc 1 5361 10 is_stmt 0 discriminator 10 view .LVU7982
 30048 0072 DFF8CC81 		ldr	r8, .L2506+44
5362:src/xeq.c     **** #endif
 30049              		.loc 1 5362 2 discriminator 10 view .LVU7983
 30050 0076 0021     		movs	r1, #0
 30051 0078 2846     		mov	r0, r5
5361:src/xeq.c     **** 	print_trace( op, 0 );
 30052              		.loc 1 5361 10 discriminator 10 view .LVU7984
 30053 007a C8F80060 		str	r6, [r8]
5362:src/xeq.c     **** #endif
 30054              		.loc 1 5362 2 is_stmt 1 discriminator 10 view .LVU7985
 30055 007e FFF7FEFF 		bl	print_trace
 30056              	.LVL2336:
5364:src/xeq.c     **** 	State2.wascomplex = 0;
 30057              		.loc 1 5364 2 discriminator 10 view .LVU7986
5365:src/xeq.c     **** 	if (isDBL(op))
 30058              		.loc 1 5365 20 is_stmt 0 discriminator 10 view .LVU7987
 30059 0082 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
5364:src/xeq.c     **** 	State2.wascomplex = 0;
 30060              		.loc 1 5364 7 discriminator 10 view .LVU7988
 30061 0084 6649     		ldr	r1, .L2506+12
 30062 0086 0023     		movs	r3, #0
5365:src/xeq.c     **** 	if (isDBL(op))
 30063              		.loc 1 5365 20 discriminator 10 view .LVU7989
 30064 0088 63F38712 		bfi	r2, r3, #6, #2
 30065 008c 2275     		strb	r2, [r4, #20]
5366:src/xeq.c     **** 		multi(op);
 30066              		.loc 1 5366 6 discriminator 10 view .LVU7990
 30067 008e 05F47042 		and	r2, r5, #61440
5366:src/xeq.c     **** 		multi(op);
 30068              		.loc 1 5366 5 discriminator 10 view .LVU7991
 30069 0092 B2F5704F 		cmp	r2, #61440
5364:src/xeq.c     **** 	State2.wascomplex = 0;
 30070              		.loc 1 5364 7 discriminator 10 view .LVU7992
 30071 0096 0B60     		str	r3, [r1]
5365:src/xeq.c     **** 	if (isDBL(op))
 30072              		.loc 1 5365 2 is_stmt 1 discriminator 10 view .LVU7993
5366:src/xeq.c     **** 		multi(op);
 30073              		.loc 1 5366 2 discriminator 10 view .LVU7994
5366:src/xeq.c     **** 		multi(op);
 30074              		.loc 1 5366 5 is_stmt 0 discriminator 10 view .LVU7995
 30075 0098 6CD0     		beq	.L2474
5368:src/xeq.c     **** 		rargs(op);
 30076              		.loc 1 5368 7 is_stmt 1 view .LVU7996
5368:src/xeq.c     **** 		rargs(op);
 30077              		.loc 1 5368 10 is_stmt 0 view .LVU7997
ARM GAS  /tmp/ccqED0AM.s 			page 767


 30078 009a 4ABB     		cbnz	r2, .L2475
5371:src/xeq.c     **** 		switch (opKIND(op)) {
 30079              		.loc 1 5371 3 is_stmt 1 view .LVU7998
5371:src/xeq.c     **** 		switch (opKIND(op)) {
 30080              		.loc 1 5371 13 is_stmt 0 view .LVU7999
 30081 009c 614A     		ldr	r2, .L2506+16
 30082 009e C5F30723 		ubfx	r3, r5, #8, #8
5371:src/xeq.c     **** 		switch (opKIND(op)) {
 30083              		.loc 1 5371 15 view .LVU8000
 30084 00a2 1580     		strh	r5, [r2]	@ movhi
5372:src/xeq.c     **** 		case KIND_SPEC:	specials(op);	break;
 30085              		.loc 1 5372 3 is_stmt 1 view .LVU8001
 30086 00a4 062B     		cmp	r3, #6
 30087 00a6 00F2DF80 		bhi	.L2194
 30088 00aa DFE813F0 		tbh	[pc, r3, lsl #1]
 30089              	.L2196:
 30090 00ae C401     		.2byte	(.L2202-.L2196)/2
 30091 00b0 C102     		.2byte	(.L2201-.L2196)/2
 30092 00b2 8B02     		.2byte	(.L2200-.L2196)/2
 30093 00b4 D100     		.2byte	(.L2199-.L2196)/2
 30094 00b6 F701     		.2byte	(.L2198-.L2196)/2
 30095 00b8 5102     		.2byte	(.L2197-.L2196)/2
 30096 00ba 8E01     		.2byte	(.L2195-.L2196)/2
 30097              	.LVL2337:
 30098              		.p2align 1
 30099              	.L2433:
5346:src/xeq.c     **** 		char buf[16];
 30100              		.loc 1 5346 22 is_stmt 0 discriminator 1 view .LVU8002
 30101 00bc 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
5346:src/xeq.c     **** 		char buf[16];
 30102              		.loc 1 5346 19 discriminator 1 view .LVU8003
 30103 00be 9B07     		lsls	r3, r3, #30
 30104 00c0 C2D4     		bmi	.L2447
 30105              	.LBB4110:
5347:src/xeq.c     **** 		if (Running)
 30106              		.loc 1 5347 3 is_stmt 1 view .LVU8004
5348:src/xeq.c     **** 			print_step(op);
 30107              		.loc 1 5348 3 view .LVU8005
5348:src/xeq.c     **** 			print_step(op);
 30108              		.loc 1 5348 7 is_stmt 0 view .LVU8006
 30109 00c2 DFF88091 		ldr	r9, .L2506+48
5348:src/xeq.c     **** 			print_step(op);
 30110              		.loc 1 5348 6 view .LVU8007
 30111 00c6 D9F80030 		ldr	r3, [r9]
 30112 00ca 002B     		cmp	r3, #0
 30113 00cc 40F09B80 		bne	.L2476
5351:src/xeq.c     **** 		DispMsg = TraceBuffer;
 30114              		.loc 1 5351 4 is_stmt 1 view .LVU8008
 30115 00d0 0DF1EC0A 		add	r10, sp, #236
 30116 00d4 5146     		mov	r1, r10
 30117 00d6 2846     		mov	r0, r5
 30118 00d8 FFF7FEFF 		bl	prt
 30119              	.LVL2338:
 30120 00dc 5249     		ldr	r1, .L2506+20
 30121 00de 0346     		mov	r3, r0
 30122 00e0 2A46     		mov	r2, r5
 30123 00e2 5248     		ldr	r0, .L2506+24
ARM GAS  /tmp/ccqED0AM.s 			page 768


 30124 00e4 FFF7FEFF 		bl	sprintf
 30125              	.LVL2339:
 30126              	.L2157:
5352:src/xeq.c     **** 	}
 30127              		.loc 1 5352 3 view .LVU8009
5352:src/xeq.c     **** 	}
 30128              		.loc 1 5352 11 is_stmt 0 view .LVU8010
 30129 00e8 514B     		ldr	r3, .L2506+28
 30130 00ea 504A     		ldr	r2, .L2506+24
 30131 00ec 1A60     		str	r2, [r3]
 30132 00ee ADE7     		b	.L2155
 30133              	.LVL2340:
 30134              	.L2475:
5352:src/xeq.c     **** 	}
 30135              		.loc 1 5352 11 view .LVU8011
 30136              	.LBE4110:
5369:src/xeq.c     **** 	else {
 30137              		.loc 1 5369 3 is_stmt 1 view .LVU8012
 30138              	.LBB4111:
 30139              	.LBI4111:
5188:src/xeq.c     **** 	unsigned int arg = op & RARG_MASK;
 30140              		.loc 1 5188 13 view .LVU8013
 30141              	.LBB4112:
5189:src/xeq.c     **** 	const unsigned int cmd = RARG_CMD(op);
 30142              		.loc 1 5189 2 view .LVU8014
5190:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
 30143              		.loc 1 5190 2 view .LVU8015
5190:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
 30144              		.loc 1 5190 27 is_stmt 0 view .LVU8016
 30145 00f0 4FEA1529 		lsr	r9, r5, #8
5192:src/xeq.c     **** 
 30146              		.loc 1 5192 33 view .LVU8017
 30147 00f4 DFF850B1 		ldr	fp, .L2506+52
5194:src/xeq.c     **** 
 30148              		.loc 1 5194 12 view .LVU8018
 30149 00f8 4A49     		ldr	r1, .L2506+16
 30150              	.LBB4113:
 30151              	.LBB4114:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30152              		.loc 1 1229 5 view .LVU8019
 30153 00fa 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
 30154              	.LBE4114:
 30155              	.LBE4113:
5190:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
 30156              		.loc 1 5190 27 view .LVU8020
 30157 00fc A9F12009 		sub	r9, r9, #32
 30158 0100 5FFA89F9 		uxtb	r9, r9
 30159              	.LVL2341:
5191:src/xeq.c     **** 	unsigned int lim = argcmds[cmd].lim;
 30160              		.loc 1 5191 2 is_stmt 1 view .LVU8021
5192:src/xeq.c     **** 
 30161              		.loc 1 5192 2 view .LVU8022
5192:src/xeq.c     **** 
 30162              		.loc 1 5192 33 is_stmt 0 view .LVU8023
 30163 0104 0BEB0913 		add	r3, fp, r9, lsl #4
5194:src/xeq.c     **** 
 30164              		.loc 1 5194 14 view .LVU8024
ARM GAS  /tmp/ccqED0AM.s 			page 769


 30165 0108 A1F80090 		strh	r9, [r1]	@ movhi
5192:src/xeq.c     **** 
 30166              		.loc 1 5192 33 view .LVU8025
 30167 010c 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 30168 010e 0693     		str	r3, [sp, #24]
 30169              	.LVL2342:
5194:src/xeq.c     **** 
 30170              		.loc 1 5194 2 is_stmt 1 view .LVU8026
5196:src/xeq.c     **** 
 30171              		.loc 1 5196 2 view .LVU8027
 30172              	.LBB4118:
 30173              	.LBI4113:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 30174              		.loc 1 1226 6 view .LVU8028
 30175              	.LBB4115:
1227:src/xeq.c     **** 
 30176              		.loc 1 1227 2 view .LVU8029
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30177              		.loc 1 1229 2 view .LVU8030
 30178              	.LBE4115:
 30179              	.LBE4118:
5192:src/xeq.c     **** 
 30180              		.loc 1 5192 33 is_stmt 0 view .LVU8031
 30181 0110 4FEA0913 		lsl	r3, r9, #4
 30182              	.LBB4119:
 30183              	.LBB4116:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30184              		.loc 1 1229 5 view .LVU8032
 30185 0114 002A     		cmp	r2, #0
 30186 0116 40F05381 		bne	.L2477
 30187              	.L2171:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30188              		.loc 1 1229 5 view .LVU8033
 30189              	.LBE4116:
 30190              	.LBE4119:
5198:src/xeq.c     **** 		illegal(op);
 30191              		.loc 1 5198 2 is_stmt 1 view .LVU8034
5198:src/xeq.c     **** 		illegal(op);
 30192              		.loc 1 5198 5 is_stmt 0 view .LVU8035
 30193 011a B9F1960F 		cmp	r9, #150
 30194 011e 00F2A380 		bhi	.L2194
5202:src/xeq.c     **** 		set_lift();
 30195              		.loc 1 5202 2 is_stmt 1 view .LVU8036
5202:src/xeq.c     **** 		set_lift();
 30196              		.loc 1 5202 6 is_stmt 0 view .LVU8037
 30197 0122 5BF80320 		ldr	r2, [fp, r3]
 30198 0126 0792     		str	r2, [sp, #28]
 30199 0128 0BEB0301 		add	r1, fp, r3
5202:src/xeq.c     **** 		set_lift();
 30200              		.loc 1 5202 5 view .LVU8038
 30201 012c 002A     		cmp	r2, #0
 30202 012e 4AD0     		beq	.L2450
5207:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
 30203              		.loc 1 5207 5 view .LVU8039
 30204 0130 15F0800F 		tst	r5, #128
5189:src/xeq.c     **** 	const unsigned int cmd = RARG_CMD(op);
 30205              		.loc 1 5189 15 view .LVU8040
ARM GAS  /tmp/ccqED0AM.s 			page 770


 30206 0134 05F07F02 		and	r2, r5, #127
5207:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
 30207              		.loc 1 5207 2 is_stmt 1 view .LVU8041
5207:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
 30208              		.loc 1 5207 5 is_stmt 0 view .LVU8042
 30209 0138 00F0E282 		beq	.L2175
5208:src/xeq.c     **** 			// Get the argument by reading a register
 30210              		.loc 1 5208 3 is_stmt 1 view .LVU8043
5208:src/xeq.c     **** 			// Get the argument by reading a register
 30211              		.loc 1 5208 19 is_stmt 0 view .LVU8044
 30212 013c 4979     		ldrb	r1, [r1, #5]	@ zero_extendqisi2
 30213 013e 0A91     		str	r1, [sp, #40]
5208:src/xeq.c     **** 			// Get the argument by reading a register
 30214              		.loc 1 5208 6 view .LVU8045
 30215 0140 C907     		lsls	r1, r1, #31
 30216 0142 40F17483 		bpl	.L2176
 30217              	.LBB4120:
5210:src/xeq.c     **** 			unsigned long long int regval;
 30218              		.loc 1 5210 4 is_stmt 1 view .LVU8046
5211:src/xeq.c     **** 
 30219              		.loc 1 5211 4 view .LVU8047
5213:src/xeq.c     **** 				// Invalid register specified for indirect access
 30220              		.loc 1 5213 4 view .LVU8048
5213:src/xeq.c     **** 				// Invalid register specified for indirect access
 30221              		.loc 1 5213 14 is_stmt 0 view .LVU8049
 30222 0146 1146     		mov	r1, r2
 30223 0148 0A20     		movs	r0, #10
 30224 014a 0B93     		str	r3, [sp, #44]
 30225 014c 0892     		str	r2, [sp, #32]
 30226 014e FFF7FEFF 		bl	get_reg_limit
 30227              	.LVL2343:
5213:src/xeq.c     **** 				// Invalid register specified for indirect access
 30228              		.loc 1 5213 7 view .LVU8050
 30229 0152 089A     		ldr	r2, [sp, #32]
 30230 0154 0B9B     		ldr	r3, [sp, #44]
 30231 0156 8242     		cmp	r2, r0
 30232 0158 40F2BD82 		bls	.L2177
5215:src/xeq.c     **** 				return;
 30233              		.loc 1 5215 5 is_stmt 1 view .LVU8051
 30234              	.LVL2344:
 30235              	.LBB4121:
 30236              	.LBI4121:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30237              		.loc 1 546 5 view .LVU8052
 30238              	.LBB4122:
 547:src/xeq.c     **** 		Error = e;
 30239              		.loc 1 547 2 view .LVU8053
 547:src/xeq.c     **** 		Error = e;
 30240              		.loc 1 547 12 is_stmt 0 view .LVU8054
 30241 015c DFF8ECB0 		ldr	fp, .L2506+56
 30242 0160 DBF80030 		ldr	r3, [fp]
 547:src/xeq.c     **** 		Error = e;
 30243              		.loc 1 547 5 view .LVU8055
 30244 0164 13B9     		cbnz	r3, .L2179
 30245              	.LVL2345:
 30246              	.LBB4123:
 30247              	.LBI4123:
ARM GAS  /tmp/ccqED0AM.s 			page 771


 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30248              		.loc 1 546 5 is_stmt 1 view .LVU8056
 30249              	.LBB4124:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 30250              		.loc 1 548 3 view .LVU8057
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 30251              		.loc 1 548 9 is_stmt 0 view .LVU8058
 30252 0166 0823     		movs	r3, #8
 30253 0168 CBF80030 		str	r3, [fp]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 30254              		.loc 1 549 3 is_stmt 1 view .LVU8059
 30255              	.LVL2346:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 30256              		.loc 1 549 3 is_stmt 0 view .LVU8060
 30257              	.LBE4124:
 30258              	.LBE4123:
 30259              	.LBE4122:
 30260              	.LBE4121:
5216:src/xeq.c     **** 			}
 30261              		.loc 1 5216 5 is_stmt 1 view .LVU8061
5216:src/xeq.c     **** 			}
 30262              		.loc 1 5216 5 is_stmt 0 view .LVU8062
 30263              	.LBE4120:
 30264              	.LBE4112:
 30265              	.LBE4111:
5380:src/xeq.c     **** 		}
 30266              		.loc 1 5380 12 is_stmt 1 view .LVU8063
5390:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 30267              		.loc 1 5390 2 view .LVU8064
 30268              	.L2179:
5390:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 30269              		.loc 1 5390 2 is_stmt 0 view .LVU8065
 30270 016c DFF8D490 		ldr	r9, .L2506+48
 30271 0170 1846     		mov	r0, r3
 30272 0172 85E0     		b	.L2304
 30273              	.LVL2347:
 30274              	.L2474:
5367:src/xeq.c     **** 	else if (isRARG(op))
 30275              		.loc 1 5367 3 is_stmt 1 view .LVU8066
 30276              	.LBB4153:
 30277              	.LBI4153:
5284:src/xeq.c     **** 	const int cmd = opDBL(op);
 30278              		.loc 1 5284 13 view .LVU8067
 30279              	.LBB4154:
5285:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
 30280              		.loc 1 5285 2 view .LVU8068
5286:src/xeq.c     **** 
 30281              		.loc 1 5286 12 is_stmt 0 view .LVU8069
 30282 0174 2B4A     		ldr	r2, .L2506+16
 30283              	.LBB4155:
 30284              	.LBB4156:
 30285              	.LBB4157:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30286              		.loc 1 1229 5 view .LVU8070
 30287 0176 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 30288              	.LBE4157:
 30289              	.LBE4156:
ARM GAS  /tmp/ccqED0AM.s 			page 772


 30290              	.LBE4155:
5285:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
 30291              		.loc 1 5285 12 view .LVU8071
 30292 0178 C5F30329 		ubfx	r9, r5, #8, #4
 30293              	.LVL2348:
5286:src/xeq.c     **** 
 30294              		.loc 1 5286 2 is_stmt 1 view .LVU8072
5286:src/xeq.c     **** 
 30295              		.loc 1 5286 14 is_stmt 0 view .LVU8073
 30296 017c A2F80090 		strh	r9, [r2]	@ movhi
5288:src/xeq.c     **** 
 30297              		.loc 1 5288 2 is_stmt 1 view .LVU8074
 30298              	.LBB4166:
 30299              	.LBI4155:
1332:src/xeq.c     **** 	process_cmdline();
 30300              		.loc 1 1332 6 view .LVU8075
 30301              	.LBE4166:
 30302              	.LBE4154:
 30303              	.LBE4153:
1333:src/xeq.c     **** 	set_lift();
 30304              		.loc 1 1333 2 view .LVU8076
 30305              	.LBB4190:
 30306              	.LBB4185:
 30307              	.LBB4167:
 30308              	.LBB4160:
 30309              	.LBI4156:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 30310              		.loc 1 1226 6 view .LVU8077
 30311              	.LBB4158:
1227:src/xeq.c     **** 
 30312              		.loc 1 1227 2 view .LVU8078
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30313              		.loc 1 1229 2 view .LVU8079
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30314              		.loc 1 1229 5 is_stmt 0 view .LVU8080
 30315 0180 002B     		cmp	r3, #0
 30316 0182 40F09A82 		bne	.L2478
 30317              	.L2161:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30318              		.loc 1 1229 5 view .LVU8081
 30319              	.LBE4158:
 30320              	.LBE4160:
 30321              	.LBE4167:
 30322              	.LBE4185:
 30323              	.LBE4190:
1334:src/xeq.c     **** }
 30324              		.loc 1 1334 2 is_stmt 1 view .LVU8082
 30325              	.LBB4191:
 30326              	.LBB4186:
 30327              	.LBB4168:
 30328              	.LBB4161:
 30329              	.LBI4161:
 767:src/xeq.c     ****     State2.state_lift = 1;
 30330              		.loc 1 767 6 view .LVU8083
 30331              	.LBB4162:
 768:src/xeq.c     **** }
 30332              		.loc 1 768 5 view .LVU8084
ARM GAS  /tmp/ccqED0AM.s 			page 773


 768:src/xeq.c     **** }
 30333              		.loc 1 768 23 is_stmt 0 view .LVU8085
 30334 0186 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 30335              	.LBE4162:
 30336              	.LBE4161:
 30337              	.LBE4168:
5290:src/xeq.c     **** 		illegal(op);
 30338              		.loc 1 5290 5 view .LVU8086
 30339 0188 B9F10B0F 		cmp	r9, #11
 30340              	.LBB4169:
 30341              	.LBB4164:
 30342              	.LBB4163:
 768:src/xeq.c     **** }
 30343              		.loc 1 768 23 view .LVU8087
 30344 018c 43F04003 		orr	r3, r3, #64
 30345 0190 E375     		strb	r3, [r4, #23]
 30346              	.LBE4163:
 30347              	.LBE4164:
 30348              	.LBE4169:
5290:src/xeq.c     **** 		illegal(op);
 30349              		.loc 1 5290 2 is_stmt 1 view .LVU8088
5290:src/xeq.c     **** 		illegal(op);
 30350              		.loc 1 5290 5 is_stmt 0 view .LVU8089
 30351 0192 00F38882 		bgt	.L2479
5294:src/xeq.c     **** 		return;
 30352              		.loc 1 5294 2 is_stmt 1 view .LVU8090
5294:src/xeq.c     **** 		return;
 30353              		.loc 1 5294 6 is_stmt 0 view .LVU8091
 30354 0196 274A     		ldr	r2, .L2506+32
 30355 0198 4FEA0913 		lsl	r3, r9, #4
 30356 019c D358     		ldr	r3, [r2, r3]
5294:src/xeq.c     **** 		return;
 30357              		.loc 1 5294 5 view .LVU8092
 30358 019e 002B     		cmp	r3, #0
 30359 01a0 00F0DC82 		beq	.L2165
 30360              	.LBB4170:
5297:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
 30361              		.loc 1 5297 3 is_stmt 1 view .LVU8093
 30362              	.LVL2349:
5298:src/xeq.c     **** 			XromUserPc = findmultilbl(op, FIND_OP_ERROR);
 30363              		.loc 1 5298 3 view .LVU8094
 30364              	.LBB4171:
 30365              	.LBI4171:
4501:src/xeq.c     **** {
 30366              		.loc 1 4501 24 view .LVU8095
 30367              	.LBB4172:
4503:src/xeq.c     **** 	if (xp < xrom)
 30368              		.loc 1 4503 2 view .LVU8096
4504:src/xeq.c     **** 		return NULL;
 30369              		.loc 1 4504 5 is_stmt 0 view .LVU8097
 30370 01a4 244A     		ldr	r2, .L2506+36
4503:src/xeq.c     **** 	if (xp < xrom)
 30371              		.loc 1 4503 59 view .LVU8098
 30372 01a6 23F00101 		bic	r1, r3, #1
 30373              	.LVL2350:
4504:src/xeq.c     **** 		return NULL;
 30374              		.loc 1 4504 2 is_stmt 1 view .LVU8099
ARM GAS  /tmp/ccqED0AM.s 			page 774


4504:src/xeq.c     **** 		return NULL;
 30375              		.loc 1 4504 5 is_stmt 0 view .LVU8100
 30376 01aa 9142     		cmp	r1, r2
 30377 01ac 08D3     		bcc	.L2166
4508:src/xeq.c     **** 		return NULL;
 30378              		.loc 1 4508 2 is_stmt 1 view .LVU8101
4508:src/xeq.c     **** 		return NULL;
 30379              		.loc 1 4508 17 is_stmt 0 view .LVU8102
 30380 01ae 2348     		ldr	r0, .L2506+40
 30381 01b0 0088     		ldrh	r0, [r0]
 30382 01b2 02EB4002 		add	r2, r2, r0, lsl #1
4508:src/xeq.c     **** 		return NULL;
 30383              		.loc 1 4508 5 view .LVU8103
 30384 01b6 9142     		cmp	r1, r2
 30385 01b8 02D2     		bcs	.L2166
 30386              	.LVL2351:
4508:src/xeq.c     **** 		return NULL;
 30387              		.loc 1 4508 5 view .LVU8104
 30388              	.LBE4172:
 30389              	.LBE4171:
5298:src/xeq.c     **** 			XromUserPc = findmultilbl(op, FIND_OP_ERROR);
 30390              		.loc 1 5298 6 view .LVU8105
 30391 01ba 0029     		cmp	r1, #0
 30392 01bc 40F0B083 		bne	.L2480
 30393              	.L2166:
5308:src/xeq.c     **** 			set_lift();
 30394              		.loc 1 5308 4 is_stmt 1 view .LVU8106
 30395 01c0 4946     		mov	r1, r9
 30396 01c2 2846     		mov	r0, r5
 30397 01c4 9847     		blx	r3
 30398              	.LVL2352:
5309:src/xeq.c     **** 		}
 30399              		.loc 1 5309 4 view .LVU8107
 30400              	.LBB4173:
 30401              	.LBI4173:
 767:src/xeq.c     ****     State2.state_lift = 1;
 30402              		.loc 1 767 6 view .LVU8108
 30403              	.LBB4174:
 768:src/xeq.c     **** }
 30404              		.loc 1 768 5 view .LVU8109
 30405              	.L2450:
 768:src/xeq.c     **** }
 30406              		.loc 1 768 5 is_stmt 0 view .LVU8110
 30407              	.LBE4174:
 30408              	.LBE4173:
 30409              	.LBE4170:
 30410              	.LBE4186:
 30411              	.LBE4191:
 30412              	.LBB4192:
 30413              	.LBB4193:
4006:src/xeq.c     **** 		} else {
 30414              		.loc 1 4006 4 is_stmt 1 view .LVU8111
 30415              	.LBB4194:
 30416              	.LBI4194:
 767:src/xeq.c     ****     State2.state_lift = 1;
 30417              		.loc 1 767 6 view .LVU8112
 30418              	.LBB4195:
ARM GAS  /tmp/ccqED0AM.s 			page 775


 768:src/xeq.c     **** }
 30419              		.loc 1 768 5 view .LVU8113
 768:src/xeq.c     **** }
 30420              		.loc 1 768 23 is_stmt 0 view .LVU8114
 30421 01c6 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 30422 01c8 DFF880B0 		ldr	fp, .L2506+56
 30423 01cc 43F04003 		orr	r3, r3, #64
 30424 01d0 E375     		strb	r3, [r4, #23]
 30425 01d2 DBF80030 		ldr	r3, [fp]
 30426              	.LVL2353:
 30427              	.L2168:
 768:src/xeq.c     **** }
 30428              		.loc 1 768 23 view .LVU8115
 30429              	.LBE4195:
 30430              	.LBE4194:
 30431              	.LBE4193:
 30432              	.LBE4192:
5380:src/xeq.c     **** 		}
 30433              		.loc 1 5380 12 is_stmt 1 discriminator 1 view .LVU8116
5390:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 30434              		.loc 1 5390 2 discriminator 1 view .LVU8117
5390:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 30435              		.loc 1 5390 5 is_stmt 0 discriminator 1 view .LVU8118
 30436 01d6 002B     		cmp	r3, #0
 30437 01d8 C8D1     		bne	.L2179
 30438              	.L2290:
5459:src/xeq.c     **** #ifdef INFRARED
 30439              		.loc 1 5459 2 is_stmt 1 view .LVU8119
 30440              	.LBB4265:
 30441              	.LBI4265:
4455:src/xeq.c     **** 	// extern int IntMaxWindow;
 30442              		.loc 1 4455 6 view .LVU8120
 30443              	.LBB4266:
4458:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 30444              		.loc 1 4458 2 view .LVU8121
4458:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 30445              		.loc 1 4458 16 is_stmt 0 view .LVU8122
 30446 01da 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 30447              	.LBE4266:
 30448              	.LBE4265:
5461:src/xeq.c     **** 	print_trace( op, 1 );
 30449              		.loc 1 5461 10 view .LVU8123
 30450 01dc C8F80060 		str	r6, [r8]
 30451              	.LBB4269:
 30452              	.LBB4267:
4458:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 30453              		.loc 1 4458 16 view .LVU8124
 30454 01e0 6FF3C503 		bfc	r3, #3, #3
4459:src/xeq.c     **** }
 30455              		.loc 1 4459 15 view .LVU8125
 30456 01e4 0022     		movs	r2, #0
 30457              	.LBE4267:
 30458              	.LBE4269:
5462:src/xeq.c     **** #endif
 30459              		.loc 1 5462 2 view .LVU8126
 30460 01e6 2846     		mov	r0, r5
 30461 01e8 0121     		movs	r1, #1
ARM GAS  /tmp/ccqED0AM.s 			page 776


 30462              	.LBB4270:
 30463              	.LBB4268:
4458:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 30464              		.loc 1 4458 16 view .LVU8127
 30465 01ea 2375     		strb	r3, [r4, #20]
4459:src/xeq.c     **** }
 30466              		.loc 1 4459 2 is_stmt 1 view .LVU8128
4459:src/xeq.c     **** }
 30467              		.loc 1 4459 15 is_stmt 0 view .LVU8129
 30468 01ec 6274     		strb	r2, [r4, #17]
 30469              	.LBE4268:
 30470              	.LBE4270:
5461:src/xeq.c     **** 	print_trace( op, 1 );
 30471              		.loc 1 5461 2 is_stmt 1 view .LVU8130
5462:src/xeq.c     **** #endif
 30472              		.loc 1 5462 2 view .LVU8131
 30473 01ee FFF7FEFF 		bl	print_trace
 30474              	.LVL2354:
5464:src/xeq.c     **** 
 30475              		.loc 1 5464 1 is_stmt 0 view .LVU8132
 30476 01f2 6DB0     		add	sp, sp, #436
 30477              		.cfi_remember_state
 30478              		.cfi_def_cfa_offset 36
 30479              		@ sp needed
 30480 01f4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 30481              	.LVL2355:
 30482              	.L2473:
 30483              		.cfi_restore_state
5359:src/xeq.c     **** #endif
 30484              		.loc 1 5359 50 discriminator 4 view .LVU8133
 30485 01f8 94F91730 		ldrsb	r3, [r4, #23]
 30486 01fc 002B     		cmp	r3, #0
 30487 01fe FFF635AF 		blt	.L2159
5359:src/xeq.c     **** #endif
 30488              		.loc 1 5359 67 view .LVU8134
 30489 0202 0026     		movs	r6, #0
 30490 0204 35E7     		b	.L2158
 30491              	.LVL2356:
 30492              	.L2476:
 30493              	.LBB4271:
5349:src/xeq.c     **** 		else
 30494              		.loc 1 5349 4 is_stmt 1 view .LVU8135
 30495 0206 2846     		mov	r0, r5
 30496 0208 FFF7FEFF 		bl	print_step
 30497              	.LVL2357:
 30498 020c 0DF1EC0A 		add	r10, sp, #236
 30499 0210 6AE7     		b	.L2157
 30500              	.L2507:
 30501 0212 00BF     		.align	2
 30502              	.L2506:
 30503 0214 00000000 		.word	main_ram
 30504 0218 00000000 		.word	StateWhileOn
 30505 021c 00000000 		.word	StackBase
 30506 0220 00000000 		.word	Busy
 30507 0224 00000000 		.word	XeqOpCode
 30508 0228 00000000 		.word	.LC8
 30509 022c 00000000 		.word	TraceBuffer
ARM GAS  /tmp/ccqED0AM.s 			page 777


 30510 0230 00000000 		.word	DispMsg
 30511 0234 00000000 		.word	multicmds
 30512 0238 00000000 		.word	xrom
 30513 023c 00000000 		.word	xrom_size
 30514 0240 00000000 		.word	Tracing
 30515 0244 00000000 		.word	Running
 30516 0248 00000000 		.word	argcmds
 30517 024c 00000000 		.word	Error
 30518              	.LVL2358:
 30519              	.L2199:
5349:src/xeq.c     **** 		else
 30520              		.loc 1 5349 4 is_stmt 0 view .LVU8136
 30521              	.LBE4271:
5376:src/xeq.c     **** 		case KIND_TRI:	triadic(op);	break;
 30522              		.loc 1 5376 18 is_stmt 1 view .LVU8137
 30523              	.LBB4272:
 30524              	.LBI4272:
4743:src/xeq.c     **** 
 30525              		.loc 1 4743 13 view .LVU8138
 30526              	.LBB4273:
4745:src/xeq.c     **** 	process_cmdline_set_lift();
 30527              		.loc 1 4745 2 view .LVU8139
4746:src/xeq.c     **** 
 30528              		.loc 1 4746 2 view .LVU8140
 30529              	.LBB4274:
 30530              	.LBI4274:
1332:src/xeq.c     **** 	process_cmdline();
 30531              		.loc 1 1332 6 view .LVU8141
 30532              	.LBE4274:
 30533              	.LBE4273:
 30534              	.LBE4272:
1333:src/xeq.c     **** 	set_lift();
 30535              		.loc 1 1333 2 view .LVU8142
 30536              	.LBB4319:
 30537              	.LBB4312:
 30538              	.LBB4283:
 30539              	.LBB4275:
 30540              	.LBI4275:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 30541              		.loc 1 1226 6 view .LVU8143
 30542              	.LBB4276:
1227:src/xeq.c     **** 
 30543              		.loc 1 1227 2 view .LVU8144
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30544              		.loc 1 1229 2 view .LVU8145
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30545              		.loc 1 1229 5 is_stmt 0 view .LVU8146
 30546 0250 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 30547 0252 0BB1     		cbz	r3, .L2264
 30548 0254 FFF7FEFF 		bl	process_cmdline.part.0
 30549              	.LVL2359:
 30550              	.L2264:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30551              		.loc 1 1229 5 view .LVU8147
 30552              	.LBE4276:
 30553              	.LBE4275:
 30554              	.LBE4283:
ARM GAS  /tmp/ccqED0AM.s 			page 778


 30555              	.LBE4312:
 30556              	.LBE4319:
1334:src/xeq.c     **** }
 30557              		.loc 1 1334 2 is_stmt 1 view .LVU8148
 30558              	.LBB4320:
 30559              	.LBB4313:
 30560              	.LBB4284:
 30561              	.LBB4277:
 30562              	.LBI4277:
 767:src/xeq.c     ****     State2.state_lift = 1;
 30563              		.loc 1 767 6 view .LVU8149
 30564              	.LBB4278:
 768:src/xeq.c     **** }
 30565              		.loc 1 768 5 view .LVU8150
 768:src/xeq.c     **** }
 30566              		.loc 1 768 23 is_stmt 0 view .LVU8151
 30567 0258 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 30568              	.LBE4278:
 30569              	.LBE4277:
 30570              	.LBE4284:
4748:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 30571              		.loc 1 4748 4 view .LVU8152
 30572 025a EAB2     		uxtb	r2, r5
 30573              	.LBB4285:
 30574              	.LBB4281:
 30575              	.LBB4279:
 768:src/xeq.c     **** }
 30576              		.loc 1 768 23 view .LVU8153
 30577 025c 43F04003 		orr	r3, r3, #64
 30578              	.LBE4279:
 30579              	.LBE4281:
 30580              	.LBE4285:
4749:src/xeq.c     **** 		if (is_intmode()) {
 30581              		.loc 1 4749 5 view .LVU8154
 30582 0260 302A     		cmp	r2, #48
 30583              	.LBB4286:
 30584              	.LBB4282:
 30585              	.LBB4280:
 768:src/xeq.c     **** }
 30586              		.loc 1 768 23 view .LVU8155
 30587 0262 E375     		strb	r3, [r4, #23]
 30588              	.LBE4280:
 30589              	.LBE4282:
 30590              	.LBE4286:
4748:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 30591              		.loc 1 4748 2 is_stmt 1 view .LVU8156
 30592              	.LVL2360:
4749:src/xeq.c     **** 		if (is_intmode()) {
 30593              		.loc 1 4749 2 view .LVU8157
4749:src/xeq.c     **** 		if (is_intmode()) {
 30594              		.loc 1 4749 5 is_stmt 0 view .LVU8158
 30595 0264 40F21483 		bls	.L2481
 30596              	.LVL2361:
 30597              	.L2194:
4749:src/xeq.c     **** 		if (is_intmode()) {
 30598              		.loc 1 4749 5 view .LVU8159
 30599              	.LBE4313:
ARM GAS  /tmp/ccqED0AM.s 			page 779


 30600              	.LBE4320:
5380:src/xeq.c     **** 		}
 30601              		.loc 1 5380 12 is_stmt 1 view .LVU8160
5380:src/xeq.c     **** 		}
 30602              		.loc 1 5380 12 view .LVU8161
 30603              	.LBB4321:
 30604              	.LBI4321:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30605              		.loc 1 546 5 view .LVU8162
 30606              	.LBB4322:
 547:src/xeq.c     **** 		Error = e;
 30607              		.loc 1 547 2 view .LVU8163
 547:src/xeq.c     **** 		Error = e;
 30608              		.loc 1 547 12 is_stmt 0 view .LVU8164
 30609 0268 DFF8D0B2 		ldr	fp, .L2508+16
 30610 026c DBF80000 		ldr	r0, [fp]
 547:src/xeq.c     **** 		Error = e;
 30611              		.loc 1 547 5 view .LVU8165
 30612 0270 0028     		cmp	r0, #0
 30613 0272 40F05C82 		bne	.L2444
 30614 0276 DFF8C892 		ldr	r9, .L2508+20
 30615              	.LVL2362:
 30616              	.L2173:
 547:src/xeq.c     **** 		Error = e;
 30617              		.loc 1 547 5 view .LVU8166
 30618              	.LBE4322:
 30619              	.LBE4321:
 30620              	.LBB4323:
 30621              	.LBB4187:
 30622              	.LBB4177:
 30623              	.LBB4178:
 30624              	.LBB4179:
 30625              	.LBI4179:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30626              		.loc 1 546 5 is_stmt 1 view .LVU8167
 30627              	.LBB4180:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 30628              		.loc 1 548 3 view .LVU8168
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 30629              		.loc 1 548 9 is_stmt 0 view .LVU8169
 30630 027a 0320     		movs	r0, #3
 30631 027c CBF80000 		str	r0, [fp]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 30632              		.loc 1 549 3 is_stmt 1 view .LVU8170
 30633              	.LVL2363:
 30634              	.L2304:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 30635              		.loc 1 549 3 is_stmt 0 view .LVU8171
 30636              	.LBE4180:
 30637              	.LBE4179:
 30638              	.LBE4178:
 30639              	.LBE4177:
 30640              	.LBE4187:
 30641              	.LBE4323:
5392:src/xeq.c     **** 		// Repair stack and state
 30642              		.loc 1 5392 3 is_stmt 1 view .LVU8172
 30643 0280 FFF7FEFF 		bl	error_message
ARM GAS  /tmp/ccqED0AM.s 			page 780


 30644              	.LVL2364:
5395:src/xeq.c     **** 		UserFlags[regA_idx >> 4] = flags;
 30645              		.loc 1 5395 3 view .LVU8173
 30646 0284 A94B     		ldr	r3, .L2508
 30647 0286 44A9     		add	r1, sp, #272
 30648 0288 1868     		ldr	r0, [r3]
 30649 028a A022     		movs	r2, #160
 30650 028c FFF7FEFF 		bl	xcopy
 30651              	.LVL2365:
5396:src/xeq.c     **** 		UState = old;
 30652              		.loc 1 5396 3 view .LVU8174
5397:src/xeq.c     **** 		State2.state_lift = lift;
 30653              		.loc 1 5397 10 is_stmt 0 view .LVU8175
 30654 0290 0CAA     		add	r2, sp, #48
 30655 0292 92E80300 		ldm	r2, {r0, r1}
5396:src/xeq.c     **** 		UState = old;
 30656              		.loc 1 5396 3 view .LVU8176
 30657 0296 3B68     		ldr	r3, [r7]
5396:src/xeq.c     **** 		UState = old;
 30658              		.loc 1 5396 28 view .LVU8177
 30659 0298 029A     		ldr	r2, [sp, #8]
 30660 029a A3F8FC27 		strh	r2, [r3, #2044]	@ movhi
5397:src/xeq.c     **** 		State2.state_lift = lift;
 30661              		.loc 1 5397 3 is_stmt 1 view .LVU8178
5397:src/xeq.c     **** 		State2.state_lift = lift;
 30662              		.loc 1 5397 10 is_stmt 0 view .LVU8179
 30663 029e 03F2E47C 		addw	ip, r3, #2020
 30664 02a2 8CE80300 		stm	ip, {r0, r1}
5398:src/xeq.c     **** 		raw_set_pc(old_pc);
 30665              		.loc 1 5398 3 is_stmt 1 view .LVU8180
5398:src/xeq.c     **** 		raw_set_pc(old_pc);
 30666              		.loc 1 5398 21 is_stmt 0 view .LVU8181
 30667 02a6 0599     		ldr	r1, [sp, #20]
 30668 02a8 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 30669 02aa 61F38612 		bfi	r2, r1, #6, #1
 30670 02ae E275     		strb	r2, [r4, #23]
5399:src/xeq.c     **** 		*((int *)&CommandLine) = old_cl;
 30671              		.loc 1 5399 3 is_stmt 1 view .LVU8182
 30672              	.LVL2366:
 30673              	.LBB4324:
 30674              	.LBI4324:
 282:src/xeq.c     **** 	State.pc = pc;
 30675              		.loc 1 282 13 view .LVU8183
 30676              	.LBB4325:
 283:src/xeq.c     **** 	update_program_bounds(0);
 30677              		.loc 1 283 2 view .LVU8184
 283:src/xeq.c     **** 	update_program_bounds(0);
 30678              		.loc 1 283 11 is_stmt 0 view .LVU8185
 30679 02b0 039A     		ldr	r2, [sp, #12]
 30680 02b2 A3F8E027 		strh	r2, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 30681              		.loc 1 284 2 is_stmt 1 view .LVU8186
 30682 02b6 0020     		movs	r0, #0
 30683 02b8 FFF7FEFF 		bl	update_program_bounds
 30684              	.LVL2367:
 284:src/xeq.c     **** }
 30685              		.loc 1 284 2 is_stmt 0 view .LVU8187
ARM GAS  /tmp/ccqED0AM.s 			page 781


 30686              	.LBE4325:
 30687              	.LBE4324:
5400:src/xeq.c     **** 		process_cmdline_set_lift();
 30688              		.loc 1 5400 3 is_stmt 1 view .LVU8188
5400:src/xeq.c     **** 		process_cmdline_set_lift();
 30689              		.loc 1 5400 26 is_stmt 0 view .LVU8189
 30690 02bc 049B     		ldr	r3, [sp, #16]
 30691 02be E361     		str	r3, [r4, #28]
5401:src/xeq.c     **** 		// process_cmdline_set_lift() may set an error code if there was something
 30692              		.loc 1 5401 3 is_stmt 1 view .LVU8190
 30693              	.LBB4326:
 30694              	.LBI4326:
1332:src/xeq.c     **** 	process_cmdline();
 30695              		.loc 1 1332 6 view .LVU8191
 30696              	.LBE4326:
1333:src/xeq.c     **** 	set_lift();
 30697              		.loc 1 1333 2 view .LVU8192
 30698              	.LBB4337:
 30699              	.LBB4327:
 30700              	.LBI4327:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 30701              		.loc 1 1226 6 view .LVU8193
 30702              	.LBB4328:
1227:src/xeq.c     **** 
 30703              		.loc 1 1227 2 view .LVU8194
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30704              		.loc 1 1229 2 view .LVU8195
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30705              		.loc 1 1229 5 is_stmt 0 view .LVU8196
 30706 02c0 13F0FF0F 		tst	r3, #255
 30707 02c4 40F04F82 		bne	.L2482
 30708              	.L2291:
 30709              	.LBE4328:
 30710              	.LBE4327:
 30711              	.LBE4337:
1334:src/xeq.c     **** }
 30712              		.loc 1 1334 2 is_stmt 1 view .LVU8197
 30713              	.LBB4338:
 30714              	.LBB4330:
 30715              	.LBI4330:
 767:src/xeq.c     ****     State2.state_lift = 1;
 30716              		.loc 1 767 6 view .LVU8198
 30717              	.LBB4331:
 768:src/xeq.c     **** }
 30718              		.loc 1 768 5 view .LVU8199
 30719              	.LBE4331:
 30720              	.LBE4330:
 30721              	.LBE4338:
5405:src/xeq.c     **** #ifndef REALBUILD
 30722              		.loc 1 5405 15 is_stmt 0 view .LVU8200
 30723 02c8 994A     		ldr	r2, .L2508+4
 30724              	.LBB4339:
 30725              	.LBB4334:
 30726              	.LBB4332:
 768:src/xeq.c     **** }
 30727              		.loc 1 768 23 view .LVU8201
 30728 02ca E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
ARM GAS  /tmp/ccqED0AM.s 			page 782


 30729              	.LBE4332:
 30730              	.LBE4334:
 30731              	.LBE4339:
5405:src/xeq.c     **** #ifndef REALBUILD
 30732              		.loc 1 5405 15 view .LVU8202
 30733 02cc 1168     		ldr	r1, [r2]
 30734 02ce D9F80020 		ldr	r2, [r9]
 30735              	.LBB4340:
 30736              	.LBB4335:
 30737              	.LBB4333:
 768:src/xeq.c     **** }
 30738              		.loc 1 768 23 view .LVU8203
 30739 02d2 43F04003 		orr	r3, r3, #64
 30740 02d6 E375     		strb	r3, [r4, #23]
 30741              	.LBE4333:
 30742              	.LBE4335:
 30743              	.LBE4340:
5404:src/xeq.c     **** 		if (Running || XromRunning) {
 30744              		.loc 1 5404 3 is_stmt 1 view .LVU8204
5404:src/xeq.c     **** 		if (Running || XromRunning) {
 30745              		.loc 1 5404 9 is_stmt 0 view .LVU8205
 30746 02d8 0020     		movs	r0, #0
5405:src/xeq.c     **** #ifndef REALBUILD
 30747              		.loc 1 5405 15 view .LVU8206
 30748 02da 52EA0103 		orrs	r3, r2, r1
5404:src/xeq.c     **** 		if (Running || XromRunning) {
 30749              		.loc 1 5404 9 view .LVU8207
 30750 02de CBF80000 		str	r0, [fp]
5405:src/xeq.c     **** #ifndef REALBUILD
 30751              		.loc 1 5405 3 is_stmt 1 view .LVU8208
5405:src/xeq.c     **** #ifndef REALBUILD
 30752              		.loc 1 5405 15 is_stmt 0 view .LVU8209
 30753 02e2 3FF47AAF 		beq	.L2290
5407:src/xeq.c     **** 				// Special handling for debug environment
 30754              		.loc 1 5407 4 is_stmt 1 view .LVU8210
5407:src/xeq.c     **** 				// Special handling for debug environment
 30755              		.loc 1 5407 7 is_stmt 0 view .LVU8211
 30756 02e6 94F91730 		ldrsb	r3, [r4, #23]
 30757 02ea 8342     		cmp	r3, r0
 30758 02ec C0F23E82 		blt	.L2483
 30759              	.LBB4341:
5429:src/xeq.c     **** 				if (XromFlags.xIN) {
 30760              		.loc 1 5429 5 is_stmt 1 view .LVU8212
5430:src/xeq.c     **** 					// Restore state to before xIN
 30761              		.loc 1 5430 9 is_stmt 0 view .LVU8213
 30762 02f0 DFF850C2 		ldr	ip, .L2508+24
5429:src/xeq.c     **** 				if (XromFlags.xIN) {
 30763              		.loc 1 5429 29 view .LVU8214
 30764 02f4 3968     		ldr	r1, [r7]
5430:src/xeq.c     **** 					// Restore state to before xIN
 30765              		.loc 1 5430 8 view .LVU8215
 30766 02f6 9CF90120 		ldrsb	r2, [ip, #1]
5429:src/xeq.c     **** 				if (XromFlags.xIN) {
 30767              		.loc 1 5429 24 view .LVU8216
 30768 02fa B1F8E037 		ldrh	r3, [r1, #2016]
 30769              	.LVL2368:
5430:src/xeq.c     **** 					// Restore state to before xIN
ARM GAS  /tmp/ccqED0AM.s 			page 783


 30770              		.loc 1 5430 5 is_stmt 1 view .LVU8217
5430:src/xeq.c     **** 					// Restore state to before xIN
 30771              		.loc 1 5430 8 is_stmt 0 view .LVU8218
 30772 02fe 002A     		cmp	r2, #0
 30773 0300 26DA     		bge	.L2299
5432:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 30774              		.loc 1 5432 6 is_stmt 1 view .LVU8219
5432:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 30775              		.loc 1 5432 20 is_stmt 0 view .LVU8220
 30776 0302 9CF801E0 		ldrb	lr, [ip, #1]	@ zero_extendqisi2
5434:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 30777              		.loc 1 5434 18 view .LVU8221
 30778 0306 DFF840A2 		ldr	r10, .L2508+28
5432:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 30779              		.loc 1 5432 20 view .LVU8222
 30780 030a 60F3C71E 		bfi	lr, r0, #7, #1
5434:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 30781              		.loc 1 5434 18 view .LVU8223
 30782 030e CEF3C000 		ubfx	r0, lr, #3, #1
 30783 0312 0EF00102 		and	r2, lr, #1
 30784 0316 42EA8032 		orr	r2, r2, r0, lsl #14
 30785 031a CEF38000 		ubfx	r0, lr, #2, #1
 30786 031e 42EAC042 		orr	r2, r2, r0, lsl #19
 30787 0322 D1F8E807 		ldr	r0, [r1, #2024]
5432:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 30788              		.loc 1 5432 20 view .LVU8224
 30789 0326 8CF801E0 		strb	lr, [ip, #1]
5433:src/xeq.c     **** 					UState.intm = XromFlags.mode_int;
 30790              		.loc 1 5433 6 is_stmt 1 view .LVU8225
5434:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 30791              		.loc 1 5434 6 view .LVU8226
5435:src/xeq.c     **** 					// Restore the global return stack
 30792              		.loc 1 5435 6 view .LVU8227
5434:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 30793              		.loc 1 5434 18 is_stmt 0 view .LVU8228
 30794 032a 20F40420 		bic	r0, r0, #540672
 30795 032e 02EA0A02 		and	r2, r2, r10
5437:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 30796              		.loc 1 5437 13 view .LVU8229
 30797 0332 DFF818E2 		ldr	lr, .L2508+32
 30798 0336 DCF808A0 		ldr	r10, [ip, #8]
5438:src/xeq.c     **** 				}
 30799              		.loc 1 5438 16 view .LVU8230
 30800 033a BCF80CC0 		ldrh	ip, [ip, #12]
5437:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 30801              		.loc 1 5437 13 view .LVU8231
 30802 033e CEF800A0 		str	r10, [lr]
5434:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 30803              		.loc 1 5434 18 view .LVU8232
 30804 0342 20F00100 		bic	r0, r0, #1
 30805 0346 0243     		orrs	r2, r2, r0
 30806 0348 C1F8E827 		str	r2, [r1, #2024]
5437:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 30807              		.loc 1 5437 6 is_stmt 1 view .LVU8233
5438:src/xeq.c     **** 				}
 30808              		.loc 1 5438 6 view .LVU8234
5438:src/xeq.c     **** 				}
ARM GAS  /tmp/ccqED0AM.s 			page 784


 30809              		.loc 1 5438 16 is_stmt 0 view .LVU8235
 30810 034c A1F8E2C7 		strh	ip, [r1, #2018]	@ movhi
 30811              	.L2299:
5440:src/xeq.c     **** 					// Leave XROM
 30812              		.loc 1 5440 11 is_stmt 1 view .LVU8236
 30813 0350 9A0B     		lsrs	r2, r3, #14
 30814 0352 032A     		cmp	r2, #3
 30815 0354 1DD1     		bne	.L2303
5444:src/xeq.c     **** 					}
 30816              		.loc 1 5444 10 is_stmt 0 view .LVU8237
 30817 0356 DFF8F4B1 		ldr	fp, .L2508+32
5444:src/xeq.c     **** 					}
 30818              		.loc 1 5444 18 view .LVU8238
 30819 035a 6FF0004A 		mvn	r10, #-2147483648
 30820 035e 04E0     		b	.L2302
 30821              	.L2300:
5447:src/xeq.c     **** 				}
 30822              		.loc 1 5447 7 is_stmt 1 view .LVU8239
 30823 0360 0133     		adds	r3, r3, #1
 30824              	.LVL2369:
5447:src/xeq.c     **** 				}
 30825              		.loc 1 5447 7 is_stmt 0 view .LVU8240
 30826 0362 9BB2     		uxth	r3, r3
 30827              	.LVL2370:
5440:src/xeq.c     **** 					// Leave XROM
 30828              		.loc 1 5440 11 is_stmt 1 view .LVU8241
 30829 0364 9A0B     		lsrs	r2, r3, #14
 30830 0366 032A     		cmp	r2, #3
 30831 0368 13D1     		bne	.L2303
 30832              	.L2302:
5442:src/xeq.c     **** 						retstk_up();
 30833              		.loc 1 5442 6 view .LVU8242
5442:src/xeq.c     **** 						retstk_up();
 30834              		.loc 1 5442 9 is_stmt 0 view .LVU8243
 30835 036a B1F9E227 		ldrsh	r2, [r1, #2018]
 30836 036e 002A     		cmp	r2, #0
 30837 0370 F6D0     		beq	.L2300
5443:src/xeq.c     **** 						pc = RetStk[RetStkPtr - 1];
 30838              		.loc 1 5443 7 is_stmt 1 view .LVU8244
 30839 0372 FFF7FEFF 		bl	retstk_up
 30840              	.LVL2371:
5444:src/xeq.c     **** 					}
 30841              		.loc 1 5444 7 view .LVU8245
5444:src/xeq.c     **** 					}
 30842              		.loc 1 5444 19 is_stmt 0 view .LVU8246
 30843 0376 3968     		ldr	r1, [r7]
5444:src/xeq.c     **** 					}
 30844              		.loc 1 5444 10 view .LVU8247
 30845 0378 DBF80030 		ldr	r3, [fp]
5444:src/xeq.c     **** 					}
 30846              		.loc 1 5444 19 view .LVU8248
 30847 037c B1F9E227 		ldrsh	r2, [r1, #2018]
5444:src/xeq.c     **** 					}
 30848              		.loc 1 5444 18 view .LVU8249
 30849 0380 02EB0A00 		add	r0, r2, r10
5444:src/xeq.c     **** 					}
 30850              		.loc 1 5444 10 view .LVU8250
ARM GAS  /tmp/ccqED0AM.s 			page 785


 30851 0384 33F81030 		ldrh	r3, [r3, r0, lsl #1]
 30852              	.LVL2372:
5446:src/xeq.c     **** 						++pc; // compensate for decpc below
 30853              		.loc 1 5446 6 is_stmt 1 view .LVU8251
5446:src/xeq.c     **** 						++pc; // compensate for decpc below
 30854              		.loc 1 5446 9 is_stmt 0 view .LVU8252
 30855 0388 002A     		cmp	r2, #0
 30856 038a E9D0     		beq	.L2300
5440:src/xeq.c     **** 					// Leave XROM
 30857              		.loc 1 5440 11 is_stmt 1 view .LVU8253
 30858 038c 9A0B     		lsrs	r2, r3, #14
 30859 038e 032A     		cmp	r2, #3
 30860 0390 EBD0     		beq	.L2302
 30861              	.L2303:
5449:src/xeq.c     **** #ifndef REALBUILD
 30862              		.loc 1 5449 5 view .LVU8254
 30863              	.LVL2373:
 30864              	.LBB4342:
 30865              	.LBI4342:
 282:src/xeq.c     **** 	State.pc = pc;
 30866              		.loc 1 282 13 view .LVU8255
 30867              	.LBB4343:
 283:src/xeq.c     **** 	update_program_bounds(0);
 30868              		.loc 1 283 2 view .LVU8256
 283:src/xeq.c     **** 	update_program_bounds(0);
 30869              		.loc 1 283 11 is_stmt 0 view .LVU8257
 30870 0392 A1F8E037 		strh	r3, [r1, #2016]	@ movhi
 284:src/xeq.c     **** }
 30871              		.loc 1 284 2 is_stmt 1 view .LVU8258
 30872 0396 0020     		movs	r0, #0
 30873 0398 FFF7FEFF 		bl	update_program_bounds
 30874              	.LVL2374:
 30875              	.L2294:
 284:src/xeq.c     **** }
 30876              		.loc 1 284 2 is_stmt 0 view .LVU8259
 30877              	.LBE4343:
 30878              	.LBE4342:
 30879              	.LBE4341:
5453:src/xeq.c     **** 			xeq_init_contexts();	// Repair any pointers clobberd by xIN
 30880              		.loc 1 5453 4 is_stmt 1 view .LVU8260
 30881 039c FFF7FEFF 		bl	decpc
 30882              	.LVL2375:
5454:src/xeq.c     **** 
 30883              		.loc 1 5454 4 view .LVU8261
 30884 03a0 FFF7FEFF 		bl	xeq_init_contexts
 30885              	.LVL2376:
5456:src/xeq.c     **** 		}
 30886              		.loc 1 5456 4 view .LVU8262
 30887              	.LBB4344:
 30888              	.LBI4344:
5818:src/xeq.c     **** 	set_running_off_sst();
 30889              		.loc 1 5818 6 view .LVU8263
 30890              	.LBB4345:
5819:src/xeq.c     **** 	State.entryp = 0;
 30891              		.loc 1 5819 2 view .LVU8264
 30892              	.LBB4346:
 30893              	.LBI4346:
ARM GAS  /tmp/ccqED0AM.s 			page 786


5810:src/xeq.c     **** 	Running = 0;
 30894              		.loc 1 5810 6 view .LVU8265
 30895              	.LBB4347:
5811:src/xeq.c     **** }
 30896              		.loc 1 5811 2 view .LVU8266
 30897              	.LBE4347:
 30898              	.LBE4346:
5820:src/xeq.c     **** 	dot( RCL_annun, 0);
 30899              		.loc 1 5820 15 is_stmt 0 view .LVU8267
 30900 03a4 3B68     		ldr	r3, [r7]
 30901              	.LBB4349:
 30902              	.LBB4348:
5811:src/xeq.c     **** }
 30903              		.loc 1 5811 10 view .LVU8268
 30904 03a6 0021     		movs	r1, #0
 30905 03a8 C9F80010 		str	r1, [r9]
 30906              	.LBE4348:
 30907              	.LBE4349:
5820:src/xeq.c     **** 	dot( RCL_annun, 0);
 30908              		.loc 1 5820 2 is_stmt 1 view .LVU8269
5820:src/xeq.c     **** 	dot( RCL_annun, 0);
 30909              		.loc 1 5820 15 is_stmt 0 view .LVU8270
 30910 03ac 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 30911 03b0 61F30412 		bfi	r2, r1, #4, #1
 30912 03b4 83F8DD27 		strb	r2, [r3, #2013]
5821:src/xeq.c     **** }
 30913              		.loc 1 5821 2 is_stmt 1 view .LVU8271
 30914 03b8 8A20     		movs	r0, #138
 30915 03ba FFF7FEFF 		bl	dot
 30916              	.LVL2377:
5822:src/xeq.c     **** 
 30917              		.loc 1 5822 1 is_stmt 0 view .LVU8272
 30918 03be 0CE7     		b	.L2290
 30919              	.LVL2378:
 30920              	.L2477:
5822:src/xeq.c     **** 
 30921              		.loc 1 5822 1 view .LVU8273
 30922 03c0 0793     		str	r3, [sp, #28]
 30923              	.LBE4345:
 30924              	.LBE4344:
 30925              	.LBB4350:
 30926              	.LBB4149:
 30927              	.LBB4125:
 30928              	.LBB4117:
 30929 03c2 FFF7FEFF 		bl	process_cmdline.part.0
 30930              	.LVL2379:
 30931 03c6 079B     		ldr	r3, [sp, #28]
 30932 03c8 A7E6     		b	.L2171
 30933              	.LVL2380:
 30934              	.L2195:
5822:src/xeq.c     **** 
 30935              		.loc 1 5822 1 view .LVU8274
 30936              	.LBE4117:
 30937              	.LBE4125:
 30938              	.LBE4149:
 30939              	.LBE4350:
5379:src/xeq.c     **** 		default:	illegal(op);
ARM GAS  /tmp/ccqED0AM.s 			page 787


 30940              		.loc 1 5379 19 is_stmt 1 view .LVU8275
 30941              	.LBB4351:
 30942              	.LBI4351:
4786:src/xeq.c     **** 	decNumber x1, y1, x2, y2, xr, yr;
 30943              		.loc 1 4786 13 view .LVU8276
 30944              	.LBB4352:
4787:src/xeq.c     **** 	unsigned int f;
 30945              		.loc 1 4787 2 view .LVU8277
4788:src/xeq.c     **** 
 30946              		.loc 1 4788 2 view .LVU8278
4790:src/xeq.c     **** 
 30947              		.loc 1 4790 2 view .LVU8279
 30948              	.LBB4353:
 30949              	.LBI4353:
1332:src/xeq.c     **** 	process_cmdline();
 30950              		.loc 1 1332 6 view .LVU8280
 30951              	.LBE4353:
 30952              	.LBE4352:
 30953              	.LBE4351:
1333:src/xeq.c     **** 	set_lift();
 30954              		.loc 1 1333 2 view .LVU8281
 30955              	.LBB4394:
 30956              	.LBB4387:
 30957              	.LBB4364:
 30958              	.LBB4354:
 30959              	.LBI4354:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 30960              		.loc 1 1226 6 view .LVU8282
 30961              	.LBB4355:
1227:src/xeq.c     **** 
 30962              		.loc 1 1227 2 view .LVU8283
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30963              		.loc 1 1229 2 view .LVU8284
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30964              		.loc 1 1229 5 is_stmt 0 view .LVU8285
 30965 03ca 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 30966 03cc 002B     		cmp	r3, #0
 30967 03ce 40F0D182 		bne	.L2484
 30968              	.L2285:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30969              		.loc 1 1229 5 view .LVU8286
 30970              	.LBE4355:
 30971              	.LBE4354:
 30972              	.LBE4364:
 30973              	.LBE4387:
 30974              	.LBE4394:
1334:src/xeq.c     **** }
 30975              		.loc 1 1334 2 is_stmt 1 view .LVU8287
 30976              	.LBB4395:
 30977              	.LBB4388:
 30978              	.LBB4365:
 30979              	.LBB4357:
 30980              	.LBI4357:
 767:src/xeq.c     ****     State2.state_lift = 1;
 30981              		.loc 1 767 6 view .LVU8288
 30982              	.LBB4358:
 768:src/xeq.c     **** }
ARM GAS  /tmp/ccqED0AM.s 			page 788


 30983              		.loc 1 768 5 view .LVU8289
 768:src/xeq.c     **** }
 30984              		.loc 1 768 23 is_stmt 0 view .LVU8290
 30985 03d2 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 30986              	.LBE4358:
 30987              	.LBE4357:
 30988              	.LBE4365:
4792:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 30989              		.loc 1 4792 4 view .LVU8291
 30990 03d4 EBB2     		uxtb	r3, r5
 30991              	.LBB4366:
 30992              	.LBB4361:
 30993              	.LBB4359:
 768:src/xeq.c     **** }
 30994              		.loc 1 768 23 view .LVU8292
 30995 03d6 42F04002 		orr	r2, r2, #64
 30996              	.LBE4359:
 30997              	.LBE4361:
 30998              	.LBE4366:
4793:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
 30999              		.loc 1 4793 5 view .LVU8293
 31000 03da 302B     		cmp	r3, #48
 31001              	.LBB4367:
 31002              	.LBB4362:
 31003              	.LBB4360:
 768:src/xeq.c     **** }
 31004              		.loc 1 768 23 view .LVU8294
 31005 03dc E275     		strb	r2, [r4, #23]
 31006              	.LBE4360:
 31007              	.LBE4362:
 31008              	.LBE4367:
4792:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 31009              		.loc 1 4792 2 is_stmt 1 view .LVU8295
 31010              	.LVL2381:
4793:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
 31011              		.loc 1 4793 2 view .LVU8296
4793:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
 31012              		.loc 1 4793 5 is_stmt 0 view .LVU8297
 31013 03de 00F26F81 		bhi	.L2286
4794:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 31014              		.loc 1 4794 3 is_stmt 1 view .LVU8298
4794:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 31015              		.loc 1 4794 9 is_stmt 0 view .LVU8299
 31016 03e2 544A     		ldr	r2, .L2508+8
 31017 03e4 03EB4303 		add	r3, r3, r3, lsl #1
 31018              	.LVL2382:
4794:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 31019              		.loc 1 4794 9 view .LVU8300
 31020 03e8 02EBC303 		add	r3, r2, r3, lsl #3
 31021 03ec D3F80490 		ldr	r9, [r3, #4]
4794:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 31022              		.loc 1 4794 6 view .LVU8301
 31023 03f0 B9F1000F 		cmp	r9, #0
 31024 03f4 00F0D983 		beq	.L2287
 31025              	.LBB4368:
4795:src/xeq.c     **** 			if (dispatch_xrom(fp))
 31026              		.loc 1 4795 4 is_stmt 1 view .LVU8302
ARM GAS  /tmp/ccqED0AM.s 			page 789


 31027              	.LVL2383:
4796:src/xeq.c     **** 				return;
 31028              		.loc 1 4796 4 view .LVU8303
4796:src/xeq.c     **** 				return;
 31029              		.loc 1 4796 8 is_stmt 0 view .LVU8304
 31030 03f8 4846     		mov	r0, r9
 31031 03fa FFF7FEFF 		bl	dispatch_xrom
 31032              	.LVL2384:
4796:src/xeq.c     **** 				return;
 31033              		.loc 1 4796 7 view .LVU8305
 31034 03fe 0028     		cmp	r0, #0
 31035 0400 40F0AC81 		bne	.L2165
4799:src/xeq.c     **** 
 31036              		.loc 1 4799 5 is_stmt 1 view .LVU8306
 31037              	.LVL2385:
 31038              	.LBB4369:
 31039              	.LBI4369:
 879:src/xeq.c     **** 	getXYZ(x, y, z);
 31040              		.loc 1 879 6 view .LVU8307
 31041              	.LBB4370:
 880:src/xeq.c     **** 	getT(t);
 31042              		.loc 1 880 2 view .LVU8308
 31043 0404 17AB     		add	r3, sp, #92
 31044              	.LVL2386:
 880:src/xeq.c     **** 	getT(t);
 31045              		.loc 1 880 2 is_stmt 0 view .LVU8309
 31046 0406 0DF1380B 		add	fp, sp, #56
 31047              	.LVL2387:
 880:src/xeq.c     **** 	getT(t);
 31048              		.loc 1 880 2 view .LVU8310
 31049 040a 20AA     		add	r2, sp, #128
 31050              	.LVL2388:
 880:src/xeq.c     **** 	getT(t);
 31051              		.loc 1 880 2 view .LVU8311
 31052 040c 1946     		mov	r1, r3
 31053 040e 5846     		mov	r0, fp
 31054 0410 FFF7FEFF 		bl	getXYZ
 31055              	.LVL2389:
 881:src/xeq.c     **** }
 31056              		.loc 1 881 2 is_stmt 1 view .LVU8312
 31057              	.LBB4371:
 31058              	.LBI4371:
 850:src/xeq.c     **** 	getRegister(t, regT_idx);
 31059              		.loc 1 850 13 view .LVU8313
 31060              	.LBB4372:
 851:src/xeq.c     **** }
 31061              		.loc 1 851 2 view .LVU8314
 31062 0414 29A8     		add	r0, sp, #164
 31063              	.LVL2390:
 851:src/xeq.c     **** }
 31064              		.loc 1 851 2 is_stmt 0 view .LVU8315
 31065 0416 6721     		movs	r1, #103
 31066 0418 FFF7FEFF 		bl	getRegister
 31067              	.LVL2391:
 851:src/xeq.c     **** }
 31068              		.loc 1 851 2 view .LVU8316
 31069              	.LBE4372:
ARM GAS  /tmp/ccqED0AM.s 			page 790


 31070              	.LBE4371:
 31071              	.LBE4370:
 31072              	.LBE4369:
4801:src/xeq.c     **** 
 31073              		.loc 1 4801 5 is_stmt 1 view .LVU8317
 31074 041c 17AB     		add	r3, sp, #92
 31075 041e 20AA     		add	r2, sp, #128
 31076 0420 32A8     		add	r0, sp, #200
 31077 0422 5146     		mov	r1, r10
 31078 0424 CDE900B3 		strd	fp, r3, [sp]
 31079 0428 29AB     		add	r3, sp, #164
 31080 042a C847     		blx	r9
 31081              	.LVL2392:
4803:src/xeq.c     **** 				lower2();
 31082              		.loc 1 4803 5 view .LVU8318
 31083 042c FFF7FEFF 		bl	setlastXY
 31084              	.LVL2393:
4804:src/xeq.c     **** 				setXY(&xr, &yr);
 31085              		.loc 1 4804 5 view .LVU8319
 31086 0430 FFF7FEFF 		bl	lower2
 31087              	.LVL2394:
 31088 0434 B8E0     		b	.L2452
 31089              	.LVL2395:
 31090              	.L2202:
4804:src/xeq.c     **** 				setXY(&xr, &yr);
 31091              		.loc 1 4804 5 is_stmt 0 view .LVU8320
 31092              	.LBE4368:
 31093              	.LBE4388:
 31094              	.LBE4395:
5373:src/xeq.c     **** 		case KIND_NIL:	niladic(op);	break;
 31095              		.loc 1 5373 19 is_stmt 1 view .LVU8321
 31096              	.LBB4396:
 31097              	.LBI4192:
3920:src/xeq.c     **** 	int opm = argKIND(op);
 31098              		.loc 1 3920 13 view .LVU8322
 31099              	.LBB4258:
3921:src/xeq.c     **** 
 31100              		.loc 1 3921 2 view .LVU8323
3921:src/xeq.c     **** 
 31101              		.loc 1 3921 6 is_stmt 0 view .LVU8324
 31102 0436 5FFA85F9 		uxtb	r9, r5
 31103              	.LVL2396:
3923:src/xeq.c     **** 	case OP_0:	case OP_1:	case OP_2:
 31104              		.loc 1 3923 2 is_stmt 1 view .LVU8325
 31105 043a B9F12A0F 		cmp	r9, #42
 31106 043e 3FF613AF 		bhi	.L2194
 31107 0442 DFE819F0 		tbh	[pc, r9, lsl #1]
 31108              	.L2205:
 31109 0446 1503     		.2byte	(.L2216-.L2205)/2
 31110 0448 0603     		.2byte	(.L2215-.L2205)/2
 31111 044a 7D03     		.2byte	(.L2214-.L2205)/2
 31112 044c 6A03     		.2byte	(.L2213-.L2205)/2
 31113 044e 3703     		.2byte	(.L2212-.L2205)/2
 31114 0450 8E02     		.2byte	(.L2211-.L2205)/2
 31115 0452 8E02     		.2byte	(.L2211-.L2205)/2
 31116 0454 8E02     		.2byte	(.L2211-.L2205)/2
 31117 0456 8E02     		.2byte	(.L2211-.L2205)/2
ARM GAS  /tmp/ccqED0AM.s 			page 791


 31118 0458 8E02     		.2byte	(.L2211-.L2205)/2
 31119 045a 8E02     		.2byte	(.L2211-.L2205)/2
 31120 045c 8E02     		.2byte	(.L2211-.L2205)/2
 31121 045e 8E02     		.2byte	(.L2211-.L2205)/2
 31122 0460 8E02     		.2byte	(.L2211-.L2205)/2
 31123 0462 8E02     		.2byte	(.L2211-.L2205)/2
 31124 0464 8E02     		.2byte	(.L2211-.L2205)/2
 31125 0466 8E02     		.2byte	(.L2211-.L2205)/2
 31126 0468 8E02     		.2byte	(.L2211-.L2205)/2
 31127 046a 8E02     		.2byte	(.L2211-.L2205)/2
 31128 046c 8E02     		.2byte	(.L2211-.L2205)/2
 31129 046e 8E02     		.2byte	(.L2211-.L2205)/2
 31130 0470 CB02     		.2byte	(.L2210-.L2205)/2
 31131 0472 CB02     		.2byte	(.L2210-.L2205)/2
 31132 0474 B202     		.2byte	(.L2209-.L2205)/2
 31133 0476 B202     		.2byte	(.L2209-.L2205)/2
 31134 0478 B202     		.2byte	(.L2209-.L2205)/2
 31135 047a B202     		.2byte	(.L2209-.L2205)/2
 31136 047c B202     		.2byte	(.L2209-.L2205)/2
 31137 047e B202     		.2byte	(.L2209-.L2205)/2
 31138 0480 B202     		.2byte	(.L2209-.L2205)/2
 31139 0482 A602     		.2byte	(.L2208-.L2205)/2
 31140 0484 A602     		.2byte	(.L2208-.L2205)/2
 31141 0486 A602     		.2byte	(.L2208-.L2205)/2
 31142 0488 A602     		.2byte	(.L2208-.L2205)/2
 31143 048a A602     		.2byte	(.L2208-.L2205)/2
 31144 048c A602     		.2byte	(.L2208-.L2205)/2
 31145 048e A602     		.2byte	(.L2208-.L2205)/2
 31146 0490 BE02     		.2byte	(.L2207-.L2205)/2
 31147 0492 BE02     		.2byte	(.L2207-.L2205)/2
 31148 0494 F902     		.2byte	(.L2206-.L2205)/2
 31149 0496 F902     		.2byte	(.L2206-.L2205)/2
 31150 0498 EC02     		.2byte	(.L2204-.L2205)/2
 31151 049a EC02     		.2byte	(.L2204-.L2205)/2
 31152              	.LVL2397:
 31153              		.p2align 1
 31154              	.L2198:
3923:src/xeq.c     **** 	case OP_0:	case OP_1:	case OP_2:
 31155              		.loc 1 3923 2 is_stmt 0 view .LVU8326
 31156              	.LBE4258:
 31157              	.LBE4396:
5377:src/xeq.c     **** 		case KIND_CMON:	monadic_cmplex(op);	break;
 31158              		.loc 1 5377 18 is_stmt 1 view .LVU8327
 31159              	.LBB4397:
 31160              	.LBI4397:
4818:src/xeq.c     **** 	unsigned int f;
 31161              		.loc 1 4818 13 view .LVU8328
 31162              	.LBB4398:
4819:src/xeq.c     **** 	process_cmdline_set_lift();
 31163              		.loc 1 4819 2 view .LVU8329
4820:src/xeq.c     **** 
 31164              		.loc 1 4820 2 view .LVU8330
 31165              	.LBB4399:
 31166              	.LBI4399:
1332:src/xeq.c     **** 	process_cmdline();
 31167              		.loc 1 1332 6 view .LVU8331
 31168              	.LBE4399:
ARM GAS  /tmp/ccqED0AM.s 			page 792


 31169              	.LBE4398:
 31170              	.LBE4397:
1333:src/xeq.c     **** 	set_lift();
 31171              		.loc 1 1333 2 view .LVU8332
 31172              	.LBB4444:
 31173              	.LBB4437:
 31174              	.LBB4410:
 31175              	.LBB4400:
 31176              	.LBI4400:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 31177              		.loc 1 1226 6 view .LVU8333
 31178              	.LBB4401:
1227:src/xeq.c     **** 
 31179              		.loc 1 1227 2 view .LVU8334
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31180              		.loc 1 1229 2 view .LVU8335
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31181              		.loc 1 1229 5 is_stmt 0 view .LVU8336
 31182 049c 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 31183 049e 002B     		cmp	r3, #0
 31184 04a0 40F07482 		bne	.L2485
 31185              	.L2272:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31186              		.loc 1 1229 5 view .LVU8337
 31187              	.LBE4401:
 31188              	.LBE4400:
 31189              	.LBE4410:
 31190              	.LBE4437:
 31191              	.LBE4444:
1334:src/xeq.c     **** }
 31192              		.loc 1 1334 2 is_stmt 1 view .LVU8338
 31193              	.LBB4445:
 31194              	.LBB4438:
 31195              	.LBB4411:
 31196              	.LBB4403:
 31197              	.LBI4403:
 767:src/xeq.c     ****     State2.state_lift = 1;
 31198              		.loc 1 767 6 view .LVU8339
 31199              	.LBB4404:
 768:src/xeq.c     **** }
 31200              		.loc 1 768 5 view .LVU8340
 768:src/xeq.c     **** }
 31201              		.loc 1 768 23 is_stmt 0 view .LVU8341
 31202 04a4 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 31203              	.LBE4404:
 31204              	.LBE4403:
 31205              	.LBE4411:
4822:src/xeq.c     **** 	if (f < NUM_TRIADIC) {
 31206              		.loc 1 4822 4 view .LVU8342
 31207 04a6 EAB2     		uxtb	r2, r5
 31208              	.LBB4412:
 31209              	.LBB4407:
 31210              	.LBB4405:
 768:src/xeq.c     **** }
 31211              		.loc 1 768 23 view .LVU8343
 31212 04a8 43F04003 		orr	r3, r3, #64
 31213              	.LBE4405:
ARM GAS  /tmp/ccqED0AM.s 			page 793


 31214              	.LBE4407:
 31215              	.LBE4412:
4823:src/xeq.c     **** 		if (is_intmode()) {
 31216              		.loc 1 4823 5 view .LVU8344
 31217 04ac 0B2A     		cmp	r2, #11
 31218              	.LBB4413:
 31219              	.LBB4408:
 31220              	.LBB4406:
 768:src/xeq.c     **** }
 31221              		.loc 1 768 23 view .LVU8345
 31222 04ae E375     		strb	r3, [r4, #23]
 31223              	.LBE4406:
 31224              	.LBE4408:
 31225              	.LBE4413:
4822:src/xeq.c     **** 	if (f < NUM_TRIADIC) {
 31226              		.loc 1 4822 2 is_stmt 1 view .LVU8346
 31227              	.LVL2398:
4823:src/xeq.c     **** 		if (is_intmode()) {
 31228              		.loc 1 4823 2 view .LVU8347
4823:src/xeq.c     **** 		if (is_intmode()) {
 31229              		.loc 1 4823 5 is_stmt 0 view .LVU8348
 31230 04b0 3FF6DAAE 		bhi	.L2194
4824:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
 31231              		.loc 1 4824 3 is_stmt 1 view .LVU8349
4824:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
 31232              		.loc 1 4824 7 is_stmt 0 view .LVU8350
 31233 04b4 3B68     		ldr	r3, [r7]
 31234 04b6 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4824:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
 31235              		.loc 1 4824 6 view .LVU8351
 31236 04ba D907     		lsls	r1, r3, #31
 31237 04bc 40F1C783 		bpl	.L2274
4825:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 31238              		.loc 1 4825 4 is_stmt 1 view .LVU8352
4825:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 31239              		.loc 1 4825 10 is_stmt 0 view .LVU8353
 31240 04c0 1D4B     		ldr	r3, .L2508+12
 31241 04c2 02EB8202 		add	r2, r2, r2, lsl #2
 31242              	.LVL2399:
4825:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 31243              		.loc 1 4825 10 view .LVU8354
 31244 04c6 03EB8202 		add	r2, r3, r2, lsl #2
 31245 04ca D2F80490 		ldr	r9, [r2, #4]
4825:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 31246              		.loc 1 4825 7 view .LVU8355
 31247 04ce B9F1000F 		cmp	r9, #0
 31248 04d2 00F05C83 		beq	.L2277
 31249              	.LBB4414:
4826:src/xeq.c     **** 				if (dispatch_xrom(fp))
 31250              		.loc 1 4826 5 is_stmt 1 view .LVU8356
 31251              	.LVL2400:
4827:src/xeq.c     **** 					return;
 31252              		.loc 1 4827 5 view .LVU8357
4827:src/xeq.c     **** 					return;
 31253              		.loc 1 4827 9 is_stmt 0 view .LVU8358
 31254 04d6 4846     		mov	r0, r9
 31255 04d8 FFF7FEFF 		bl	dispatch_xrom
ARM GAS  /tmp/ccqED0AM.s 			page 794


 31256              	.LVL2401:
4827:src/xeq.c     **** 					return;
 31257              		.loc 1 4827 8 view .LVU8359
 31258 04dc 0028     		cmp	r0, #0
 31259 04de 40F03D81 		bne	.L2165
 31260              	.LBB4415:
4830:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
 31261              		.loc 1 4830 6 is_stmt 1 view .LVU8360
 31262              	.LBB4416:
 31263              	.LBI4416:
1442:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 31264              		.loc 1 1442 15 view .LVU8361
 31265              	.LBB4417:
1443:src/xeq.c     **** }
 31266              		.loc 1 1443 2 view .LVU8362
1443:src/xeq.c     **** }
 31267              		.loc 1 1443 9 is_stmt 0 view .LVU8363
 31268 04e2 6420     		movs	r0, #100
 31269 04e4 FFF7FEFF 		bl	get_reg_n_int
 31270              	.LVL2402:
 31271 04e8 8246     		mov	r10, r0
 31272              	.LBE4417:
 31273              	.LBE4416:
4831:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 31274              		.loc 1 4831 24 view .LVU8364
 31275 04ea 6520     		movs	r0, #101
 31276              	.LBB4419:
 31277              	.LBB4418:
1443:src/xeq.c     **** }
 31278              		.loc 1 1443 9 view .LVU8365
 31279 04ec 8B46     		mov	fp, r1
 31280              	.LVL2403:
1443:src/xeq.c     **** }
 31281              		.loc 1 1443 9 view .LVU8366
 31282              	.LBE4418:
 31283              	.LBE4419:
4831:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 31284              		.loc 1 4831 6 is_stmt 1 view .LVU8367
4831:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 31285              		.loc 1 4831 24 is_stmt 0 view .LVU8368
 31286 04ee FFF7FEFF 		bl	get_reg_n_int
 31287              	.LVL2404:
4831:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 31288              		.loc 1 4831 24 view .LVU8369
 31289 04f2 0790     		str	r0, [sp, #28]
4832:src/xeq.c     **** 					x = fp(z, y, x);
 31290              		.loc 1 4832 24 view .LVU8370
 31291 04f4 6620     		movs	r0, #102
4831:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 31292              		.loc 1 4831 24 view .LVU8371
 31293 04f6 0691     		str	r1, [sp, #24]
 31294              	.LVL2405:
4832:src/xeq.c     **** 					x = fp(z, y, x);
 31295              		.loc 1 4832 6 is_stmt 1 view .LVU8372
4832:src/xeq.c     **** 					x = fp(z, y, x);
 31296              		.loc 1 4832 24 is_stmt 0 view .LVU8373
 31297 04f8 FFF7FEFF 		bl	get_reg_n_int
ARM GAS  /tmp/ccqED0AM.s 			page 795


 31298              	.LVL2406:
4833:src/xeq.c     **** 					setlastX();
 31299              		.loc 1 4833 6 is_stmt 1 view .LVU8374
4833:src/xeq.c     **** 					setlastX();
 31300              		.loc 1 4833 10 is_stmt 0 view .LVU8375
 31301 04fc CDE900AB 		strd	r10, fp, [sp]
 31302 0500 DDE90632 		ldrd	r3, r2, [sp, #24]
 31303 0504 C847     		blx	r9
 31304              	.LVL2407:
4833:src/xeq.c     **** 					setlastX();
 31305              		.loc 1 4833 10 view .LVU8376
 31306 0506 8146     		mov	r9, r0
 31307              	.LVL2408:
4833:src/xeq.c     **** 					setlastX();
 31308              		.loc 1 4833 10 view .LVU8377
 31309 0508 8A46     		mov	r10, r1
 31310              	.LVL2409:
4834:src/xeq.c     **** 					lower();
 31311              		.loc 1 4834 6 is_stmt 1 view .LVU8378
 31312              	.LBB4420:
 31313              	.LBI4420:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 31314              		.loc 1 792 6 view .LVU8379
 31315              	.LBB4421:
 793:src/xeq.c     **** }
 31316              		.loc 1 793 2 view .LVU8380
 31317 050a 6C20     		movs	r0, #108
 31318              	.LVL2410:
 793:src/xeq.c     **** }
 31319              		.loc 1 793 2 is_stmt 0 view .LVU8381
 31320 050c 6421     		movs	r1, #100
 31321              	.LVL2411:
 793:src/xeq.c     **** }
 31322              		.loc 1 793 2 view .LVU8382
 31323 050e DFF82CB0 		ldr	fp, .L2508+16
 31324 0512 FFF7FEFF 		bl	copyreg_n
 31325              	.LVL2412:
 31326              	.LBE4421:
 31327              	.LBE4420:
4835:src/xeq.c     **** 					lower();
 31328              		.loc 1 4835 6 is_stmt 1 view .LVU8383
 31329 0516 FFF7FEFF 		bl	lower
 31330              	.LVL2413:
 31331              	.L2453:
4836:src/xeq.c     **** 					setX_int(x);
 31332              		.loc 1 4836 6 view .LVU8384
 31333 051a FFF7FEFF 		bl	lower
 31334              	.LVL2414:
4837:src/xeq.c     **** 				}
 31335              		.loc 1 4837 6 view .LVU8385
 31336 051e 4846     		mov	r0, r9
 31337 0520 5146     		mov	r1, r10
 31338 0522 FFF7FEFF 		bl	setX_int
 31339              	.LVL2415:
 31340 0526 DBF80030 		ldr	r3, [fp]
 31341              	.LBE4415:
 31342              	.LBE4414:
ARM GAS  /tmp/ccqED0AM.s 			page 796


 31343 052a 54E6     		b	.L2168
 31344              	.L2509:
 31345              		.align	2
 31346              	.L2508:
 31347 052c 00000000 		.word	StackBase
 31348 0530 00000000 		.word	XromRunning
 31349 0534 00000000 		.word	dyfuncs
 31350 0538 00000000 		.word	trifuncs
 31351 053c 00000000 		.word	Error
 31352 0540 00000000 		.word	Running
 31353 0544 00000000 		.word	XromParams
 31354 0548 01400800 		.word	540673
 31355 054c 00000000 		.word	RetStk
 31356              	.L2197:
 31357              	.LBE4438:
 31358              	.LBE4445:
5378:src/xeq.c     **** 		case KIND_CDYA:	dyadic_cmplex(op);	break;
 31359              		.loc 1 5378 19 view .LVU8386
 31360              	.LVL2416:
 31361              	.LBB4446:
 31362              	.LBI4446:
4709:src/xeq.c     **** 	decNumber x, y, rx, ry;
 31363              		.loc 1 4709 13 view .LVU8387
 31364              	.LBB4447:
4710:src/xeq.c     **** 	unsigned int f;
 31365              		.loc 1 4710 2 view .LVU8388
4711:src/xeq.c     **** 
 31366              		.loc 1 4711 2 view .LVU8389
4713:src/xeq.c     **** 
 31367              		.loc 1 4713 2 view .LVU8390
 31368              	.LBB4448:
 31369              	.LBI4448:
1332:src/xeq.c     **** 	process_cmdline();
 31370              		.loc 1 1332 6 view .LVU8391
 31371              	.LBE4448:
 31372              	.LBE4447:
 31373              	.LBE4446:
1333:src/xeq.c     **** 	set_lift();
 31374              		.loc 1 1333 2 view .LVU8392
 31375              	.LBB4479:
 31376              	.LBB4474:
 31377              	.LBB4459:
 31378              	.LBB4449:
 31379              	.LBI4449:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 31380              		.loc 1 1226 6 view .LVU8393
 31381              	.LBB4450:
1227:src/xeq.c     **** 
 31382              		.loc 1 1227 2 view .LVU8394
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31383              		.loc 1 1229 2 view .LVU8395
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31384              		.loc 1 1229 5 is_stmt 0 view .LVU8396
 31385 0550 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 31386 0552 002B     		cmp	r3, #0
 31387 0554 40F01782 		bne	.L2486
 31388              	.L2280:
ARM GAS  /tmp/ccqED0AM.s 			page 797


1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31389              		.loc 1 1229 5 view .LVU8397
 31390              	.LBE4450:
 31391              	.LBE4449:
 31392              	.LBE4459:
 31393              	.LBE4474:
 31394              	.LBE4479:
1334:src/xeq.c     **** }
 31395              		.loc 1 1334 2 is_stmt 1 view .LVU8398
 31396              	.LBB4480:
 31397              	.LBB4475:
 31398              	.LBB4460:
 31399              	.LBB4452:
 31400              	.LBI4452:
 767:src/xeq.c     ****     State2.state_lift = 1;
 31401              		.loc 1 767 6 view .LVU8399
 31402              	.LBB4453:
 768:src/xeq.c     **** }
 31403              		.loc 1 768 5 view .LVU8400
 768:src/xeq.c     **** }
 31404              		.loc 1 768 23 is_stmt 0 view .LVU8401
 31405 0558 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 31406              	.LBE4453:
 31407              	.LBE4452:
 31408              	.LBE4460:
4715:src/xeq.c     **** 
 31409              		.loc 1 4715 4 view .LVU8402
 31410 055a EBB2     		uxtb	r3, r5
 31411              	.LBB4461:
 31412              	.LBB4456:
 31413              	.LBB4454:
 768:src/xeq.c     **** }
 31414              		.loc 1 768 23 view .LVU8403
 31415 055c 42F04002 		orr	r2, r2, #64
 31416              	.LBE4454:
 31417              	.LBE4456:
 31418              	.LBE4461:
4717:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
 31419              		.loc 1 4717 5 view .LVU8404
 31420 0560 9B2B     		cmp	r3, #155
 31421              	.LBB4462:
 31422              	.LBB4457:
 31423              	.LBB4455:
 768:src/xeq.c     **** }
 31424              		.loc 1 768 23 view .LVU8405
 31425 0562 E275     		strb	r2, [r4, #23]
 31426              	.LBE4455:
 31427              	.LBE4457:
 31428              	.LBE4462:
4715:src/xeq.c     **** 
 31429              		.loc 1 4715 2 is_stmt 1 view .LVU8406
 31430              	.LVL2417:
4717:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
 31431              		.loc 1 4717 2 view .LVU8407
4717:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
 31432              		.loc 1 4717 5 is_stmt 0 view .LVU8408
 31433 0564 00F2AC80 		bhi	.L2286
ARM GAS  /tmp/ccqED0AM.s 			page 798


4718:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 31434              		.loc 1 4718 3 is_stmt 1 view .LVU8409
4718:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 31435              		.loc 1 4718 9 is_stmt 0 view .LVU8410
 31436 0568 BF4A     		ldr	r2, .L2510
 31437 056a 03EB4303 		add	r3, r3, r3, lsl #1
 31438              	.LVL2418:
4718:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 31439              		.loc 1 4718 9 view .LVU8411
 31440 056e 02EBC303 		add	r3, r2, r3, lsl #3
 31441 0572 D3F80490 		ldr	r9, [r3, #4]
4718:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 31442              		.loc 1 4718 6 view .LVU8412
 31443 0576 B9F1000F 		cmp	r9, #0
 31444 057a 00F01683 		beq	.L2287
 31445              	.LBB4463:
4719:src/xeq.c     **** 			if (dispatch_xrom(fp))
 31446              		.loc 1 4719 4 is_stmt 1 view .LVU8413
 31447              	.LVL2419:
4720:src/xeq.c     **** 				return;
 31448              		.loc 1 4720 4 view .LVU8414
4720:src/xeq.c     **** 				return;
 31449              		.loc 1 4720 8 is_stmt 0 view .LVU8415
 31450 057e 4846     		mov	r0, r9
 31451 0580 FFF7FEFF 		bl	dispatch_xrom
 31452              	.LVL2420:
4720:src/xeq.c     **** 				return;
 31453              		.loc 1 4720 7 view .LVU8416
 31454 0584 0028     		cmp	r0, #0
 31455 0586 40F0E980 		bne	.L2165
4723:src/xeq.c     **** 				fp(&rx, &ry, &x, &y);
 31456              		.loc 1 4723 5 is_stmt 1 view .LVU8417
 31457              	.LVL2421:
 31458              	.LBB4464:
 31459              	.LBI4464:
 854:src/xeq.c     **** 	getX(x);
 31460              		.loc 1 854 6 view .LVU8418
 31461              	.LBE4464:
 31462              	.LBE4463:
 31463              	.LBE4475:
 31464              	.LBE4480:
 855:src/xeq.c     **** 	getY(y);
 31465              		.loc 1 855 2 view .LVU8419
 31466              	.LBB4481:
 31467              	.LBB4476:
 31468              	.LBB4471:
 31469              	.LBB4469:
 31470              	.LBB4465:
 31471              	.LBI4465:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 31472              		.loc 1 824 12 view .LVU8420
 31473              	.LBB4466:
 825:src/xeq.c     **** }
 31474              		.loc 1 825 2 view .LVU8421
 825:src/xeq.c     **** }
 31475              		.loc 1 825 9 is_stmt 0 view .LVU8422
 31476 058a 6421     		movs	r1, #100
ARM GAS  /tmp/ccqED0AM.s 			page 799


 31477 058c 20A8     		add	r0, sp, #128
 31478              	.LVL2422:
 825:src/xeq.c     **** }
 31479              		.loc 1 825 9 view .LVU8423
 31480 058e FFF7FEFF 		bl	getRegister
 31481              	.LVL2423:
 825:src/xeq.c     **** }
 31482              		.loc 1 825 9 view .LVU8424
 31483              	.LBE4466:
 31484              	.LBE4465:
 31485              	.LBE4469:
 31486              	.LBE4471:
 31487              	.LBE4476:
 31488              	.LBE4481:
 856:src/xeq.c     **** }
 31489              		.loc 1 856 2 is_stmt 1 view .LVU8425
 31490              	.LBB4482:
 31491              	.LBB4477:
 31492              	.LBB4472:
 31493              	.LBB4470:
 31494              	.LBB4467:
 31495              	.LBI4467:
 832:src/xeq.c     **** 	getRegister(y, regY_idx);
 31496              		.loc 1 832 6 view .LVU8426
 31497              	.LBB4468:
 833:src/xeq.c     **** }
 31498              		.loc 1 833 2 view .LVU8427
 31499 0592 6521     		movs	r1, #101
 31500 0594 29A8     		add	r0, sp, #164
 31501              	.LVL2424:
 833:src/xeq.c     **** }
 31502              		.loc 1 833 2 is_stmt 0 view .LVU8428
 31503 0596 FFF7FEFF 		bl	getRegister
 31504              	.LVL2425:
 833:src/xeq.c     **** }
 31505              		.loc 1 833 2 view .LVU8429
 31506              	.LBE4468:
 31507              	.LBE4467:
 31508              	.LBE4470:
4724:src/xeq.c     **** 				setlastXY();
 31509              		.loc 1 4724 5 is_stmt 1 view .LVU8430
 31510 059a 29AB     		add	r3, sp, #164
 31511 059c 20AA     		add	r2, sp, #128
 31512 059e 32A8     		add	r0, sp, #200
 31513 05a0 5146     		mov	r1, r10
 31514 05a2 C847     		blx	r9
 31515              	.LVL2426:
4725:src/xeq.c     **** 				setXY(&rx, &ry);
 31516              		.loc 1 4725 5 view .LVU8431
 31517 05a4 FFF7FEFF 		bl	setlastXY
 31518              	.LVL2427:
4726:src/xeq.c     **** 				set_was_complex();
 31519              		.loc 1 4726 5 view .LVU8432
 31520              	.L2452:
4726:src/xeq.c     **** 				set_was_complex();
 31521              		.loc 1 4726 5 is_stmt 0 view .LVU8433
 31522              	.LBE4472:
ARM GAS  /tmp/ccqED0AM.s 			page 800


 31523              	.LBE4477:
 31524              	.LBE4482:
 31525              	.LBB4483:
 31526              	.LBB4389:
 31527              	.LBB4375:
4805:src/xeq.c     **** 				set_was_complex();
 31528              		.loc 1 4805 5 is_stmt 1 view .LVU8434
 31529 05a8 5146     		mov	r1, r10
 31530 05aa 32A8     		add	r0, sp, #200
 31531 05ac FFF7FEFF 		bl	setXY
 31532              	.LVL2428:
4806:src/xeq.c     **** 			}
 31533              		.loc 1 4806 5 view .LVU8435
 31534              	.LBB4373:
 31535              	.LBI4373:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 31536              		.loc 1 539 13 view .LVU8436
 31537              	.LBB4374:
 540:src/xeq.c     **** }
 31538              		.loc 1 540 2 view .LVU8437
 540:src/xeq.c     **** }
 31539              		.loc 1 540 20 is_stmt 0 view .LVU8438
 31540 05b0 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 31541 05b2 DFF8D0B2 		ldr	fp, .L2510+28
 31542 05b6 0122     		movs	r2, #1
 31543 05b8 62F38713 		bfi	r3, r2, #6, #2
 31544 05bc 2375     		strb	r3, [r4, #20]
 31545 05be DBF80030 		ldr	r3, [fp]
 541:src/xeq.c     **** 
 31546              		.loc 1 541 1 view .LVU8439
 31547 05c2 08E6     		b	.L2168
 31548              	.L2200:
 31549              	.LBE4374:
 31550              	.LBE4373:
 31551              	.LBE4375:
 31552              	.LBE4389:
 31553              	.LBE4483:
5375:src/xeq.c     **** 		case KIND_DYA:	dyadic(op);	break;
 31554              		.loc 1 5375 18 is_stmt 1 view .LVU8440
 31555              	.LVL2429:
 31556              	.LBB4484:
 31557              	.LBI4484:
4669:src/xeq.c     **** {
 31558              		.loc 1 4669 13 view .LVU8441
 31559              	.LBB4485:
4671:src/xeq.c     **** 	process_cmdline_set_lift();
 31560              		.loc 1 4671 2 view .LVU8442
4672:src/xeq.c     **** 
 31561              		.loc 1 4672 2 view .LVU8443
 31562              	.LBB4486:
 31563              	.LBI4486:
1332:src/xeq.c     **** 	process_cmdline();
 31564              		.loc 1 1332 6 view .LVU8444
 31565              	.LBE4486:
 31566              	.LBE4485:
 31567              	.LBE4484:
1333:src/xeq.c     **** 	set_lift();
ARM GAS  /tmp/ccqED0AM.s 			page 801


 31568              		.loc 1 1333 2 view .LVU8445
 31569              	.LBB4523:
 31570              	.LBB4518:
 31571              	.LBB4497:
 31572              	.LBB4487:
 31573              	.LBI4487:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 31574              		.loc 1 1226 6 view .LVU8446
 31575              	.LBB4488:
1227:src/xeq.c     **** 
 31576              		.loc 1 1227 2 view .LVU8447
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31577              		.loc 1 1229 2 view .LVU8448
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31578              		.loc 1 1229 5 is_stmt 0 view .LVU8449
 31579 05c4 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 31580 05c6 002B     		cmp	r3, #0
 31581 05c8 40F0DA81 		bne	.L2487
 31582              	.L2256:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31583              		.loc 1 1229 5 view .LVU8450
 31584              	.LBE4488:
 31585              	.LBE4487:
 31586              	.LBE4497:
 31587              	.LBE4518:
 31588              	.LBE4523:
1334:src/xeq.c     **** }
 31589              		.loc 1 1334 2 is_stmt 1 view .LVU8451
 31590              	.LBB4524:
 31591              	.LBB4519:
 31592              	.LBB4498:
 31593              	.LBB4490:
 31594              	.LBI4490:
 767:src/xeq.c     ****     State2.state_lift = 1;
 31595              		.loc 1 767 6 view .LVU8452
 31596              	.LBB4491:
 768:src/xeq.c     **** }
 31597              		.loc 1 768 5 view .LVU8453
 768:src/xeq.c     **** }
 31598              		.loc 1 768 23 is_stmt 0 view .LVU8454
 31599 05cc E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 31600              	.LBE4491:
 31601              	.LBE4490:
 31602              	.LBE4498:
4674:src/xeq.c     **** 	if (f < NUM_MONADIC) {
 31603              		.loc 1 4674 4 view .LVU8455
 31604 05ce EAB2     		uxtb	r2, r5
 31605              	.LBB4499:
 31606              	.LBB4494:
 31607              	.LBB4492:
 768:src/xeq.c     **** }
 31608              		.loc 1 768 23 view .LVU8456
 31609 05d0 43F04003 		orr	r3, r3, #64
 31610              	.LBE4492:
 31611              	.LBE4494:
 31612              	.LBE4499:
4675:src/xeq.c     **** 		if (is_intmode()) {
ARM GAS  /tmp/ccqED0AM.s 			page 802


 31613              		.loc 1 4675 5 view .LVU8457
 31614 05d4 9B2A     		cmp	r2, #155
 31615              	.LBB4500:
 31616              	.LBB4495:
 31617              	.LBB4493:
 768:src/xeq.c     **** }
 31618              		.loc 1 768 23 view .LVU8458
 31619 05d6 E375     		strb	r3, [r4, #23]
 31620              	.LBE4493:
 31621              	.LBE4495:
 31622              	.LBE4500:
4674:src/xeq.c     **** 	if (f < NUM_MONADIC) {
 31623              		.loc 1 4674 2 is_stmt 1 view .LVU8459
 31624              	.LVL2430:
4675:src/xeq.c     **** 		if (is_intmode()) {
 31625              		.loc 1 4675 2 view .LVU8460
4675:src/xeq.c     **** 		if (is_intmode()) {
 31626              		.loc 1 4675 5 is_stmt 0 view .LVU8461
 31627 05d8 3FF646AE 		bhi	.L2194
4676:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
 31628              		.loc 1 4676 3 is_stmt 1 view .LVU8462
4676:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
 31629              		.loc 1 4676 7 is_stmt 0 view .LVU8463
 31630 05dc 3B68     		ldr	r3, [r7]
 31631 05de 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4676:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
 31632              		.loc 1 4676 6 view .LVU8464
 31633 05e2 DB07     		lsls	r3, r3, #31
 31634 05e4 40F16B83 		bpl	.L2258
4677:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 31635              		.loc 1 4677 4 is_stmt 1 view .LVU8465
4677:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 31636              		.loc 1 4677 10 is_stmt 0 view .LVU8466
 31637 05e8 9F4B     		ldr	r3, .L2510
 31638 05ea 02EB4202 		add	r2, r2, r2, lsl #1
 31639              	.LVL2431:
4677:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 31640              		.loc 1 4677 10 view .LVU8467
 31641 05ee 03EBC202 		add	r2, r3, r2, lsl #3
 31642 05f2 D2F80890 		ldr	r9, [r2, #8]
4677:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 31643              		.loc 1 4677 7 view .LVU8468
 31644 05f6 B9F1000F 		cmp	r9, #0
 31645 05fa 00F0C882 		beq	.L2277
 31646              	.LBB4501:
4678:src/xeq.c     **** 				if (dispatch_xrom(fp))
 31647              		.loc 1 4678 5 is_stmt 1 view .LVU8469
 31648              	.LVL2432:
4679:src/xeq.c     **** 					return;
 31649              		.loc 1 4679 5 view .LVU8470
4679:src/xeq.c     **** 					return;
 31650              		.loc 1 4679 9 is_stmt 0 view .LVU8471
 31651 05fe 4846     		mov	r0, r9
 31652 0600 FFF7FEFF 		bl	dispatch_xrom
 31653              	.LVL2433:
4679:src/xeq.c     **** 					return;
 31654              		.loc 1 4679 8 view .LVU8472
ARM GAS  /tmp/ccqED0AM.s 			page 803


 31655 0604 0028     		cmp	r0, #0
 31656 0606 40F0A980 		bne	.L2165
 31657              	.LBB4502:
4682:src/xeq.c     **** 					x = fp(x);
 31658              		.loc 1 4682 6 is_stmt 1 view .LVU8473
 31659              	.LBB4503:
 31660              	.LBI4503:
1442:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 31661              		.loc 1 1442 15 view .LVU8474
 31662              	.LBB4504:
1443:src/xeq.c     **** }
 31663              		.loc 1 1443 2 view .LVU8475
1443:src/xeq.c     **** }
 31664              		.loc 1 1443 9 is_stmt 0 view .LVU8476
 31665 060a 6420     		movs	r0, #100
 31666 060c FFF7FEFF 		bl	get_reg_n_int
 31667              	.LVL2434:
1443:src/xeq.c     **** }
 31668              		.loc 1 1443 9 view .LVU8477
 31669              	.LBE4504:
 31670              	.LBE4503:
4683:src/xeq.c     **** 					setlastX();
 31671              		.loc 1 4683 6 is_stmt 1 view .LVU8478
4683:src/xeq.c     **** 					setlastX();
 31672              		.loc 1 4683 10 is_stmt 0 view .LVU8479
 31673 0610 C847     		blx	r9
 31674              	.LVL2435:
4683:src/xeq.c     **** 					setlastX();
 31675              		.loc 1 4683 10 view .LVU8480
 31676 0612 DFF870B2 		ldr	fp, .L2510+28
 31677 0616 8246     		mov	r10, r0
 31678 0618 8946     		mov	r9, r1
 31679              	.LVL2436:
4684:src/xeq.c     **** 					setX_int(x);
 31680              		.loc 1 4684 6 is_stmt 1 view .LVU8481
 31681              	.LBB4505:
 31682              	.LBI4505:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 31683              		.loc 1 792 6 view .LVU8482
 31684              	.LBB4506:
 793:src/xeq.c     **** }
 31685              		.loc 1 793 2 view .LVU8483
 31686 061a 6C20     		movs	r0, #108
 31687              	.LVL2437:
 793:src/xeq.c     **** }
 31688              		.loc 1 793 2 is_stmt 0 view .LVU8484
 31689 061c 6421     		movs	r1, #100
 31690              	.LVL2438:
 793:src/xeq.c     **** }
 31691              		.loc 1 793 2 view .LVU8485
 31692 061e FFF7FEFF 		bl	copyreg_n
 31693              	.LVL2439:
 31694              	.LBE4506:
 31695              	.LBE4505:
4685:src/xeq.c     **** 				}
 31696              		.loc 1 4685 6 is_stmt 1 view .LVU8486
 31697 0622 5046     		mov	r0, r10
ARM GAS  /tmp/ccqED0AM.s 			page 804


 31698 0624 4946     		mov	r1, r9
 31699 0626 FFF7FEFF 		bl	setX_int
 31700              	.LVL2440:
 31701 062a DBF80030 		ldr	r3, [fp]
 31702              	.LBE4502:
 31703              	.LBE4501:
 31704 062e D2E5     		b	.L2168
 31705              	.LVL2441:
 31706              	.L2201:
4685:src/xeq.c     **** 				}
 31707              		.loc 1 4685 6 is_stmt 0 view .LVU8487
 31708              	.LBE4519:
 31709              	.LBE4524:
5374:src/xeq.c     **** 		case KIND_MON:	monadic(op);	break;
 31710              		.loc 1 5374 18 is_stmt 1 view .LVU8488
 31711              	.LBB4525:
 31712              	.LBI4525:
4628:src/xeq.c     **** 	const unsigned int idx = argKIND(op);
 31713              		.loc 1 4628 13 view .LVU8489
 31714              	.LBB4526:
4629:src/xeq.c     **** 
 31715              		.loc 1 4629 2 view .LVU8490
 31716              	.LBB4527:
 31717              	.LBB4528:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31718              		.loc 1 1229 5 is_stmt 0 view .LVU8491
 31719 0630 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 31720              	.LBE4528:
 31721              	.LBE4527:
4629:src/xeq.c     **** 
 31722              		.loc 1 4629 21 view .LVU8492
 31723 0632 5FFA85F9 		uxtb	r9, r5
 31724              	.LVL2442:
4631:src/xeq.c     **** 	if (idx < NUM_NILADIC) {
 31725              		.loc 1 4631 2 is_stmt 1 view .LVU8493
 31726              	.LBB4531:
 31727              	.LBI4527:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 31728              		.loc 1 1226 6 view .LVU8494
 31729              	.LBB4529:
1227:src/xeq.c     **** 
 31730              		.loc 1 1227 2 view .LVU8495
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31731              		.loc 1 1229 2 view .LVU8496
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31732              		.loc 1 1229 5 is_stmt 0 view .LVU8497
 31733 0636 002B     		cmp	r3, #0
 31734 0638 40F09F81 		bne	.L2488
 31735              	.L2242:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31736              		.loc 1 1229 5 view .LVU8498
 31737              	.LBE4529:
 31738              	.LBE4531:
4632:src/xeq.c     **** 		if (is_intmode() && NILADIC_NOTINT(niladics[idx]))
 31739              		.loc 1 4632 2 is_stmt 1 view .LVU8499
4632:src/xeq.c     **** 		if (is_intmode() && NILADIC_NOTINT(niladics[idx]))
 31740              		.loc 1 4632 5 is_stmt 0 view .LVU8500
ARM GAS  /tmp/ccqED0AM.s 			page 805


 31741 063c B9F1DA0F 		cmp	r9, #218
 31742 0640 00F2F880 		bhi	.L2243
4633:src/xeq.c     **** 			bad_mode_error();
 31743              		.loc 1 4633 3 is_stmt 1 view .LVU8501
4633:src/xeq.c     **** 			bad_mode_error();
 31744              		.loc 1 4633 7 is_stmt 0 view .LVU8502
 31745 0644 3B68     		ldr	r3, [r7]
 31746 0646 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
4633:src/xeq.c     **** 			bad_mode_error();
 31747              		.loc 1 4633 6 view .LVU8503
 31748 064a 12F0010F 		tst	r2, #1
4633:src/xeq.c     **** 			bad_mode_error();
 31749              		.loc 1 4633 23 view .LVU8504
 31750 064e 874A     		ldr	r2, .L2510+4
4633:src/xeq.c     **** 			bad_mode_error();
 31751              		.loc 1 4633 6 view .LVU8505
 31752 0650 40F02183 		bne	.L2439
 31753 0654 4FEA091A 		lsl	r10, r9, #4
 31754              	.L2244:
4635:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
 31755              		.loc 1 4635 8 is_stmt 1 view .LVU8506
4635:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
 31756              		.loc 1 4635 14 is_stmt 0 view .LVU8507
 31757 0658 52F80AB0 		ldr	fp, [r2, r10]
 31758 065c 9244     		add	r10, r10, r2
4635:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
 31759              		.loc 1 4635 11 view .LVU8508
 31760 065e BBF1000F 		cmp	fp, #0
 31761 0662 00F05C83 		beq	.L2489
 31762              	.LBB4532:
4636:src/xeq.c     **** 			if (dispatch_xrom(fp))
 31763              		.loc 1 4636 4 is_stmt 1 view .LVU8509
 31764              	.LVL2443:
4637:src/xeq.c     **** 				return;
 31765              		.loc 1 4637 4 view .LVU8510
4637:src/xeq.c     **** 				return;
 31766              		.loc 1 4637 8 is_stmt 0 view .LVU8511
 31767 0666 5846     		mov	r0, fp
 31768 0668 FFF7FEFF 		bl	dispatch_xrom
 31769              	.LVL2444:
4637:src/xeq.c     **** 				return;
 31770              		.loc 1 4637 7 view .LVU8512
 31771 066c 0028     		cmp	r0, #0
 31772 066e 75D1     		bne	.L2165
4640:src/xeq.c     **** 				case 2:	lift_if_enabled();
 31773              		.loc 1 4640 5 is_stmt 1 view .LVU8513
 31774 0670 9AF80430 		ldrb	r3, [r10, #4]	@ zero_extendqisi2
 31775 0674 03F00303 		and	r3, r3, #3
 31776 0678 012B     		cmp	r3, #1
 31777 067a 00F06783 		beq	.L2247
 31778 067e 022B     		cmp	r3, #2
 31779 0680 03D1     		bne	.L2248
4641:src/xeq.c     **** 				case 1:	lift_if_enabled();
 31780              		.loc 1 4641 13 view .LVU8514
 31781              	.LBB4533:
 31782              	.LBI4533:
 747:src/xeq.c     **** 	if (get_lift())
ARM GAS  /tmp/ccqED0AM.s 			page 806


 31783              		.loc 1 747 6 view .LVU8515
 31784              	.LBB4534:
 748:src/xeq.c     **** 		lift();
 31785              		.loc 1 748 2 view .LVU8516
 31786              	.LBB4535:
 31787              	.LBI4535:
 743:src/xeq.c     **** 	return State2.state_lift;
 31788              		.loc 1 743 12 view .LVU8517
 31789              	.LBB4536:
 744:src/xeq.c     **** }
 31790              		.loc 1 744 2 view .LVU8518
 744:src/xeq.c     **** }
 31791              		.loc 1 744 15 is_stmt 0 view .LVU8519
 31792 0682 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 31793              	.LBE4536:
 31794              	.LBE4535:
 748:src/xeq.c     **** 		lift();
 31795              		.loc 1 748 5 view .LVU8520
 31796 0684 5806     		lsls	r0, r3, #25
 31797 0686 00F15F83 		bmi	.L2490
 31798              	.L2248:
 31799              	.LBE4534:
 31800              	.LBE4533:
4644:src/xeq.c     **** 					break;
 31801              		.loc 1 4644 6 is_stmt 1 view .LVU8521
 31802 068a 4846     		mov	r0, r9
 31803 068c D847     		blx	fp
 31804              	.LVL2445:
4645:src/xeq.c     **** 				}
 31805              		.loc 1 4645 6 view .LVU8522
 31806 068e DFF8F4B1 		ldr	fp, .L2510+28
 31807              	.LVL2446:
4645:src/xeq.c     **** 				}
 31808              		.loc 1 4645 6 is_stmt 0 view .LVU8523
 31809 0692 3B68     		ldr	r3, [r7]
 31810              	.LVL2447:
 31811              	.L2245:
4645:src/xeq.c     **** 				}
 31812              		.loc 1 4645 6 view .LVU8524
 31813              	.LBE4532:
4650:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 31814              		.loc 1 4650 3 is_stmt 1 view .LVU8525
4652:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
 31815              		.loc 1 4652 2 view .LVU8526
4652:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
 31816              		.loc 1 4652 6 is_stmt 0 view .LVU8527
 31817 0694 93F8AD27 		ldrb	r2, [r3, #1965]	@ zero_extendqisi2
4652:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
 31818              		.loc 1 4652 5 view .LVU8528
 31819 0698 9207     		lsls	r2, r2, #30
 31820 069a 40F13783 		bpl	.L2252
4652:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
 31821              		.loc 1 4652 24 view .LVU8529
 31822 069e B9F13F0F 		cmp	r9, #63
 31823 06a2 5DD0     		beq	.L2451
 31824 06a4 D9E0     		b	.L2456
 31825              	.LVL2448:
ARM GAS  /tmp/ccqED0AM.s 			page 807


 31826              	.L2479:
4652:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
 31827              		.loc 1 4652 24 view .LVU8530
 31828              	.LBE4526:
 31829              	.LBE4525:
 31830              	.LBB4563:
 31831              	.LBB4188:
5291:src/xeq.c     **** 		return;
 31832              		.loc 1 5291 3 is_stmt 1 view .LVU8531
5291:src/xeq.c     **** 		return;
 31833              		.loc 1 5291 3 view .LVU8532
 31834              	.LBB4182:
 31835              	.LBI4177:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31836              		.loc 1 546 5 view .LVU8533
 31837              	.LBB4181:
 547:src/xeq.c     **** 		Error = e;
 31838              		.loc 1 547 2 view .LVU8534
 547:src/xeq.c     **** 		Error = e;
 31839              		.loc 1 547 12 is_stmt 0 view .LVU8535
 31840 06a6 DFF8DCB1 		ldr	fp, .L2510+28
 31841 06aa DFF8DC91 		ldr	r9, .L2510+32
 31842              	.LVL2449:
 547:src/xeq.c     **** 		Error = e;
 31843              		.loc 1 547 12 view .LVU8536
 31844 06ae DBF80000 		ldr	r0, [fp]
 547:src/xeq.c     **** 		Error = e;
 31845              		.loc 1 547 5 view .LVU8537
 31846 06b2 0028     		cmp	r0, #0
 31847 06b4 7FF4E4AD 		bne	.L2304
 31848 06b8 DFE5     		b	.L2173
 31849              	.LVL2450:
 31850              	.L2478:
 547:src/xeq.c     **** 		Error = e;
 31851              		.loc 1 547 5 view .LVU8538
 31852              	.LBE4181:
 31853              	.LBE4182:
 31854              	.LBB4183:
 31855              	.LBB4165:
 31856              	.LBB4159:
 31857 06ba FFF7FEFF 		bl	process_cmdline.part.0
 31858              	.LVL2451:
 31859 06be 62E5     		b	.L2161
 31860              	.LVL2452:
 31861              	.L2286:
 547:src/xeq.c     **** 		Error = e;
 31862              		.loc 1 547 5 view .LVU8539
 31863              	.LBE4159:
 31864              	.LBE4165:
 31865              	.LBE4183:
 31866              	.LBE4188:
 31867              	.LBE4563:
 31868              	.LBB4564:
 31869              	.LBB4390:
4811:src/xeq.c     **** }
 31870              		.loc 1 4811 3 is_stmt 1 view .LVU8540
4811:src/xeq.c     **** }
ARM GAS  /tmp/ccqED0AM.s 			page 808


 31871              		.loc 1 4811 3 view .LVU8541
 31872              	.LBB4376:
 31873              	.LBI4376:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31874              		.loc 1 546 5 view .LVU8542
 31875              	.LBB4377:
 547:src/xeq.c     **** 		Error = e;
 31876              		.loc 1 547 2 view .LVU8543
 547:src/xeq.c     **** 		Error = e;
 31877              		.loc 1 547 12 is_stmt 0 view .LVU8544
 31878 06c0 DFF8C0B1 		ldr	fp, .L2510+28
 31879 06c4 DBF80030 		ldr	r3, [fp]
 547:src/xeq.c     **** 		Error = e;
 31880              		.loc 1 547 5 view .LVU8545
 31881 06c8 002B     		cmp	r3, #0
 31882 06ca 7FF44FAD 		bne	.L2179
 31883              	.LVL2453:
 31884              	.LBB4378:
 31885              	.LBI4378:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31886              		.loc 1 546 5 is_stmt 1 view .LVU8546
 31887              	.LBB4379:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 31888              		.loc 1 548 3 view .LVU8547
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 31889              		.loc 1 548 9 is_stmt 0 view .LVU8548
 31890 06ce 0323     		movs	r3, #3
 31891 06d0 CBF80030 		str	r3, [fp]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 31892              		.loc 1 549 3 is_stmt 1 view .LVU8549
 31893              	.LVL2454:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 31894              		.loc 1 549 3 is_stmt 0 view .LVU8550
 31895              	.LBE4379:
 31896              	.LBE4378:
 31897              	.LBE4377:
 31898              	.LBE4376:
4811:src/xeq.c     **** }
 31899              		.loc 1 4811 3 is_stmt 1 view .LVU8551
 31900              	.LBE4390:
 31901              	.LBE4564:
5380:src/xeq.c     **** 		}
 31902              		.loc 1 5380 12 view .LVU8552
5390:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 31903              		.loc 1 5390 2 view .LVU8553
 31904 06d4 4AE5     		b	.L2179
 31905              	.LVL2455:
 31906              	.L2177:
 31907              	.LBB4565:
 31908              	.LBB4150:
 31909              	.LBB4126:
5218:src/xeq.c     **** 			if ((regval >> 32) != 0)
 31910              		.loc 1 5218 4 view .LVU8554
5218:src/xeq.c     **** 			if ((regval >> 32) != 0)
 31911              		.loc 1 5218 13 is_stmt 0 view .LVU8555
 31912 06d6 1046     		mov	r0, r2
 31913 06d8 5146     		mov	r1, r10
ARM GAS  /tmp/ccqED0AM.s 			page 809


 31914 06da 0B93     		str	r3, [sp, #44]
 31915 06dc FFF7FEFF 		bl	get_reg_n_int_sgn
 31916              	.LVL2456:
5219:src/xeq.c     **** 				goto range;
 31917              		.loc 1 5219 16 view .LVU8556
 31918 06e0 0023     		movs	r3, #0
 31919 06e2 0891     		str	r1, [sp, #32]
 31920 06e4 0993     		str	r3, [sp, #36]
 31921              	.LVL2457:
5219:src/xeq.c     **** 				goto range;
 31922              		.loc 1 5219 4 is_stmt 1 view .LVU8557
5219:src/xeq.c     **** 				goto range;
 31923              		.loc 1 5219 7 is_stmt 0 view .LVU8558
 31924 06e6 DDE90823 		ldrd	r2, [sp, #32]
 31925 06ea 1343     		orrs	r3, r2, r3
 31926 06ec 18D1     		bne	.L2181
5221:src/xeq.c     **** 			if (argcmds[cmd].local && sgn) {
 31927              		.loc 1 5221 4 is_stmt 1 view .LVU8559
5222:src/xeq.c     **** 				// negative arguments address local registers or flags
 31928              		.loc 1 5222 7 is_stmt 0 view .LVU8560
 31929 06ee 0A9B     		ldr	r3, [sp, #40]
 31930 06f0 13F0080F 		tst	r3, #8
5221:src/xeq.c     **** 			if (argcmds[cmd].local && sgn) {
 31931              		.loc 1 5221 8 view .LVU8561
 31932 06f4 0246     		mov	r2, r0
 31933              	.LVL2458:
5222:src/xeq.c     **** 				// negative arguments address local registers or flags
 31934              		.loc 1 5222 4 is_stmt 1 view .LVU8562
5222:src/xeq.c     **** 				// negative arguments address local registers or flags
 31935              		.loc 1 5222 7 is_stmt 0 view .LVU8563
 31936 06f6 0B9B     		ldr	r3, [sp, #44]
 31937 06f8 02D0     		beq	.L2175
5222:src/xeq.c     **** 				// negative arguments address local registers or flags
 31938              		.loc 1 5222 27 view .LVU8564
 31939 06fa 3B99     		ldr	r1, [sp, #236]
 31940              	.LVL2459:
5222:src/xeq.c     **** 				// negative arguments address local registers or flags
 31941              		.loc 1 5222 27 view .LVU8565
 31942 06fc 01B1     		cbz	r1, .L2175
5224:src/xeq.c     **** 			}
 31943              		.loc 1 5224 5 is_stmt 1 view .LVU8566
5224:src/xeq.c     **** 			}
 31944              		.loc 1 5224 9 is_stmt 0 view .LVU8567
 31945 06fe 7032     		adds	r2, r2, #112
 31946              	.LVL2460:
 31947              	.L2175:
5224:src/xeq.c     **** 			}
 31948              		.loc 1 5224 9 view .LVU8568
 31949              	.LBE4126:
5232:src/xeq.c     **** 		// Range checking for registers against variable boundary
 31950              		.loc 1 5232 2 is_stmt 1 view .LVU8569
5232:src/xeq.c     **** 		// Range checking for registers against variable boundary
 31951              		.loc 1 5232 18 is_stmt 0 view .LVU8570
 31952 0700 0BEB0301 		add	r1, fp, r3
 31953 0704 4979     		ldrb	r1, [r1, #5]	@ zero_extendqisi2
5232:src/xeq.c     **** 		// Range checking for registers against variable boundary
 31954              		.loc 1 5232 5 view .LVU8571
ARM GAS  /tmp/ccqED0AM.s 			page 810


 31955 0706 11F0020F 		tst	r1, #2
 31956 070a 58D0     		beq	.L2183
5234:src/xeq.c     **** 	}
 31957              		.loc 1 5234 9 view .LVU8572
 31958 070c 1146     		mov	r1, r2
 31959 070e 4846     		mov	r0, r9
 31960 0710 0A93     		str	r3, [sp, #40]
5234:src/xeq.c     **** 	}
 31961              		.loc 1 5234 3 is_stmt 1 view .LVU8573
5234:src/xeq.c     **** 	}
 31962              		.loc 1 5234 9 is_stmt 0 view .LVU8574
 31963 0712 0692     		str	r2, [sp, #24]
 31964              	.LVL2461:
5234:src/xeq.c     **** 	}
 31965              		.loc 1 5234 9 view .LVU8575
 31966 0714 FFF7FEFF 		bl	get_reg_limit
 31967              	.LVL2462:
5234:src/xeq.c     **** 	}
 31968              		.loc 1 5234 9 view .LVU8576
 31969 0718 069A     		ldr	r2, [sp, #24]
 31970 071a 0A9B     		ldr	r3, [sp, #40]
 31971              	.LVL2463:
 31972              	.L2184:
5242:src/xeq.c     **** 		// Argument is too large
 31973              		.loc 1 5242 2 is_stmt 1 view .LVU8577
5242:src/xeq.c     **** 		// Argument is too large
 31974              		.loc 1 5242 5 is_stmt 0 view .LVU8578
 31975 071c 8242     		cmp	r2, r0
 31976 071e 09D9     		bls	.L2186
 31977              	.LVL2464:
 31978              	.L2181:
5244:src/xeq.c     **** 	}
 31979              		.loc 1 5244 9 is_stmt 1 view .LVU8579
 31980              	.LBB4127:
 31981              	.LBI4127:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31982              		.loc 1 546 5 view .LVU8580
 31983              	.LBB4128:
 547:src/xeq.c     **** 		Error = e;
 31984              		.loc 1 547 2 view .LVU8581
 547:src/xeq.c     **** 		Error = e;
 31985              		.loc 1 547 12 is_stmt 0 view .LVU8582
 31986 0720 DFF860B1 		ldr	fp, .L2510+28
 31987 0724 DBF80000 		ldr	r0, [fp]
 547:src/xeq.c     **** 		Error = e;
 31988              		.loc 1 547 5 view .LVU8583
 31989 0728 0028     		cmp	r0, #0
 31990 072a 00F0DC80 		beq	.L2187
 31991              	.LVL2465:
 31992              	.L2444:
 547:src/xeq.c     **** 		Error = e;
 31993              		.loc 1 547 5 view .LVU8584
 31994 072e DFF85891 		ldr	r9, .L2510+32
 31995 0732 A5E5     		b	.L2304
 31996              	.LVL2466:
 31997              	.L2186:
 547:src/xeq.c     **** 		Error = e;
ARM GAS  /tmp/ccqED0AM.s 			page 811


 31998              		.loc 1 547 5 view .LVU8585
 31999              	.LBE4128:
 32000              	.LBE4127:
5246:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 32001              		.loc 1 5246 7 is_stmt 1 view .LVU8586
5246:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 32002              		.loc 1 5246 23 is_stmt 0 view .LVU8587
 32003 0734 9B44     		add	fp, fp, r3
 32004 0736 9BF80530 		ldrb	r3, [fp, #5]	@ zero_extendqisi2
5246:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 32005              		.loc 1 5246 10 view .LVU8588
 32006 073a DB06     		lsls	r3, r3, #27
 32007 073c 00F1D980 		bmi	.L2491
 32008              	.LVL2467:
 32009              	.L2188:
 32010              	.LBB4132:
5252:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
 32011              		.loc 1 5252 3 is_stmt 1 view .LVU8589
5253:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
 32012              		.loc 1 5253 3 view .LVU8590
 32013              	.LBB4133:
 32014              	.LBI4133:
4501:src/xeq.c     **** {
 32015              		.loc 1 4501 24 view .LVU8591
 32016              	.LBB4134:
4503:src/xeq.c     **** 	if (xp < xrom)
 32017              		.loc 1 4503 2 view .LVU8592
4503:src/xeq.c     **** 	if (xp < xrom)
 32018              		.loc 1 4503 59 is_stmt 0 view .LVU8593
 32019 0740 0799     		ldr	r1, [sp, #28]
4504:src/xeq.c     **** 		return NULL;
 32020              		.loc 1 4504 5 view .LVU8594
 32021 0742 4B4B     		ldr	r3, .L2510+8
4503:src/xeq.c     **** 	if (xp < xrom)
 32022              		.loc 1 4503 59 view .LVU8595
 32023 0744 21F00101 		bic	r1, r1, #1
 32024              	.LVL2468:
4504:src/xeq.c     **** 		return NULL;
 32025              		.loc 1 4504 2 is_stmt 1 view .LVU8596
4504:src/xeq.c     **** 		return NULL;
 32026              		.loc 1 4504 5 is_stmt 0 view .LVU8597
 32027 0748 9942     		cmp	r1, r3
 32028 074a 46D2     		bcs	.L2492
 32029              	.LVL2469:
 32030              	.L2190:
4504:src/xeq.c     **** 		return NULL;
 32031              		.loc 1 4504 5 view .LVU8598
 32032              	.LBE4134:
 32033              	.LBE4133:
5275:src/xeq.c     **** 		}
 32034              		.loc 1 5275 4 is_stmt 1 view .LVU8599
 32035 074c 079B     		ldr	r3, [sp, #28]
 32036 074e 1046     		mov	r0, r2
 32037 0750 4946     		mov	r1, r9
 32038 0752 9847     		blx	r3
 32039              	.LVL2470:
5277:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
ARM GAS  /tmp/ccqED0AM.s 			page 812


 32040              		.loc 1 5277 3 view .LVU8600
5277:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 32041              		.loc 1 5277 6 is_stmt 0 view .LVU8601
 32042 0754 B9F1840F 		cmp	r9, #132
 32043 0758 7FF435AD 		bne	.L2450
 32044              	.LVL2471:
 32045              	.L2165:
5277:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 32046              		.loc 1 5277 6 view .LVU8602
 32047 075c DFF824B1 		ldr	fp, .L2510+28
 32048              	.L2451:
 32049 0760 DBF80030 		ldr	r3, [fp]
 32050 0764 37E5     		b	.L2168
 32051              	.LVL2472:
 32052              	.L2482:
5277:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 32053              		.loc 1 5277 6 view .LVU8603
 32054              	.LBE4132:
 32055              	.LBE4150:
 32056              	.LBE4565:
 32057              	.LBB4566:
 32058              	.LBB4336:
 32059              	.LBB4329:
 32060 0766 FFF7FEFF 		bl	process_cmdline.part.0
 32061              	.LVL2473:
 32062 076a ADE5     		b	.L2291
 32063              	.L2483:
 32064              	.LBE4329:
 32065              	.LBE4336:
 32066              	.LBE4566:
5409:src/xeq.c     **** 					// Restore the global return stack
 32067              		.loc 1 5409 5 is_stmt 1 view .LVU8604
5409:src/xeq.c     **** 					// Restore the global return stack
 32068              		.loc 1 5409 9 is_stmt 0 view .LVU8605
 32069 076c 414B     		ldr	r3, .L2510+12
5409:src/xeq.c     **** 					// Restore the global return stack
 32070              		.loc 1 5409 8 view .LVU8606
 32071 076e 93F90120 		ldrsb	r2, [r3, #1]
5409:src/xeq.c     **** 					// Restore the global return stack
 32072              		.loc 1 5409 9 view .LVU8607
 32073 0772 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
5409:src/xeq.c     **** 					// Restore the global return stack
 32074              		.loc 1 5409 8 view .LVU8608
 32075 0774 8242     		cmp	r2, r0
 32076 0776 BFF611AE 		bge	.L2294
5411:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 32077              		.loc 1 5411 6 is_stmt 1 view .LVU8609
5412:src/xeq.c     **** 					// Restore private stack to normal stack
 32078              		.loc 1 5412 6 is_stmt 0 view .LVU8610
 32079 077a 3A68     		ldr	r2, [r7]
5411:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 32080              		.loc 1 5411 13 view .LVU8611
 32081 077c DFF80CE1 		ldr	lr, .L2510+36
5412:src/xeq.c     **** 					// Restore private stack to normal stack
 32082              		.loc 1 5412 6 view .LVU8612
 32083 0780 0292     		str	r2, [sp, #8]
5411:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
ARM GAS  /tmp/ccqED0AM.s 			page 813


 32084              		.loc 1 5411 13 view .LVU8613
 32085 0782 9A68     		ldr	r2, [r3, #8]
 32086 0784 CEF80020 		str	r2, [lr]
5412:src/xeq.c     **** 					// Restore private stack to normal stack
 32087              		.loc 1 5412 6 is_stmt 1 view .LVU8614
5412:src/xeq.c     **** 					// Restore private stack to normal stack
 32088              		.loc 1 5412 16 is_stmt 0 view .LVU8615
 32089 0788 029A     		ldr	r2, [sp, #8]
 32090 078a B3F80CC0 		ldrh	ip, [r3, #12]
 32091 078e A2F8E2C7 		strh	ip, [r2, #2018]	@ movhi
5414:src/xeq.c     **** 						// Need space for double precision stack
 32092              		.loc 1 5414 6 is_stmt 1 view .LVU8616
5414:src/xeq.c     **** 						// Need space for double precision stack
 32093              		.loc 1 5414 9 is_stmt 0 view .LVU8617
 32094 0792 11F0080A 		ands	r10, r1, #8
 32095 0796 00F01482 		beq	.L2295
5418:src/xeq.c     **** 					if (Error == ERR_NONE) {
 32096              		.loc 1 5418 6 is_stmt 1 view .LVU8618
5418:src/xeq.c     **** 					if (Error == ERR_NONE) {
 32097              		.loc 1 5418 20 is_stmt 0 view .LVU8619
 32098 079a 60F3C711 		bfi	r1, r0, #7, #1
 32099 079e 5970     		strb	r1, [r3, #1]
5419:src/xeq.c     **** 						UState.mode_double = 1;
 32100              		.loc 1 5419 6 is_stmt 1 view .LVU8620
 32101              	.L2296:
5420:src/xeq.c     **** 						xcopy(get_reg_n(regX_idx), XromStack, sizeof(XromStack));
 32102              		.loc 1 5420 7 view .LVU8621
5420:src/xeq.c     **** 						xcopy(get_reg_n(regX_idx), XromStack, sizeof(XromStack));
 32103              		.loc 1 5420 26 is_stmt 0 view .LVU8622
 32104 07a0 3A68     		ldr	r2, [r7]
 32105 07a2 92F8E937 		ldrb	r3, [r2, #2025]	@ zero_extendqisi2
 32106 07a6 43F04003 		orr	r3, r3, #64
 32107 07aa 82F8E937 		strb	r3, [r2, #2025]
5421:src/xeq.c     **** 					}
 32108              		.loc 1 5421 7 is_stmt 1 view .LVU8623
5421:src/xeq.c     **** 					}
 32109              		.loc 1 5421 13 is_stmt 0 view .LVU8624
 32110 07ae 6420     		movs	r0, #100
 32111 07b0 FFF7FEFF 		bl	get_reg_n
 32112              	.LVL2474:
5421:src/xeq.c     **** 					}
 32113              		.loc 1 5421 7 view .LVU8625
 32114 07b4 3049     		ldr	r1, .L2510+16
 32115 07b6 C022     		movs	r2, #192
 32116 07b8 FFF7FEFF 		bl	xcopy
 32117              	.LVL2475:
 32118 07bc EEE5     		b	.L2294
 32119              	.LVL2476:
 32120              	.L2183:
 32121              	.LBB4567:
 32122              	.LBB4151:
5236:src/xeq.c     **** 		if (LocalRegs == 0)
 32123              		.loc 1 5236 7 is_stmt 1 view .LVU8626
5236:src/xeq.c     **** 		if (LocalRegs == 0)
 32124              		.loc 1 5236 10 is_stmt 0 view .LVU8627
 32125 07be 4906     		lsls	r1, r1, #25
 32126 07c0 40F1AC80 		bpl	.L2493
ARM GAS  /tmp/ccqED0AM.s 			page 814


5237:src/xeq.c     **** 			lim = NUMFLG - 1;
 32127              		.loc 1 5237 3 is_stmt 1 view .LVU8628
5237:src/xeq.c     **** 			lim = NUMFLG - 1;
 32128              		.loc 1 5237 17 is_stmt 0 view .LVU8629
 32129 07c4 3968     		ldr	r1, [r7]
 32130 07c6 B1F8DE17 		ldrh	r1, [r1, #2014]
 32131 07ca 21F01F01 		bic	r1, r1, #31
5237:src/xeq.c     **** 			lim = NUMFLG - 1;
 32132              		.loc 1 5237 6 view .LVU8630
 32133 07ce 89B2     		uxth	r1, r1
5240:src/xeq.c     **** 	}
 32134              		.loc 1 5240 8 view .LVU8631
 32135 07d0 0029     		cmp	r1, #0
 32136 07d2 0CBF     		ite	eq
 32137 07d4 6F20     		moveq	r0, #111
 32138 07d6 7F20     		movne	r0, #127
 32139 07d8 A0E7     		b	.L2184
 32140              	.LVL2477:
 32141              	.L2492:
 32142              	.LBB4143:
 32143              	.LBB4136:
 32144              	.LBB4135:
4508:src/xeq.c     **** 		return NULL;
 32145              		.loc 1 4508 2 is_stmt 1 view .LVU8632
4508:src/xeq.c     **** 		return NULL;
 32146              		.loc 1 4508 17 is_stmt 0 view .LVU8633
 32147 07da 2848     		ldr	r0, .L2510+20
 32148 07dc 0088     		ldrh	r0, [r0]
 32149 07de 03EB4003 		add	r3, r3, r0, lsl #1
4508:src/xeq.c     **** 		return NULL;
 32150              		.loc 1 4508 5 view .LVU8634
 32151 07e2 9942     		cmp	r1, r3
 32152 07e4 B2D2     		bcs	.L2190
 32153              	.LVL2478:
4508:src/xeq.c     **** 		return NULL;
 32154              		.loc 1 4508 5 view .LVU8635
 32155              	.LBE4135:
 32156              	.LBE4136:
5253:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
 32157              		.loc 1 5253 6 view .LVU8636
 32158 07e6 0029     		cmp	r1, #0
 32159 07e8 B0D0     		beq	.L2190
5265:src/xeq.c     **** 			if (XromUserPc == 0)
 32160              		.loc 1 5265 4 is_stmt 1 view .LVU8637
 32161              	.LVL2479:
 32162              	.LBB4137:
 32163              	.LBI4137:
2214:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 32164              		.loc 1 2214 14 view .LVU8638
 32165              	.LBB4138:
2215:src/xeq.c     **** }
 32166              		.loc 1 2215 2 view .LVU8639
 32167              	.LBE4138:
 32168              	.LBE4137:
5265:src/xeq.c     **** 			if (XromUserPc == 0)
 32169              		.loc 1 5265 33 is_stmt 0 view .LVU8640
 32170 07ea 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccqED0AM.s 			page 815


 32171              	.LBB4140:
 32172              	.LBB4139:
2215:src/xeq.c     **** }
 32173              		.loc 1 2215 9 view .LVU8641
 32174 07ec 42F4C441 		orr	r1, r2, #25088
 32175 07f0 B3F8E007 		ldrh	r0, [r3, #2016]
 32176 07f4 0322     		movs	r2, #3
 32177              	.LVL2480:
2215:src/xeq.c     **** }
 32178              		.loc 1 2215 9 view .LVU8642
 32179 07f6 FFF7FEFF 		bl	find_opcode_from
 32180              	.LVL2481:
2215:src/xeq.c     **** }
 32181              		.loc 1 2215 9 view .LVU8643
 32182              	.LBE4139:
 32183              	.LBE4140:
5265:src/xeq.c     **** 			if (XromUserPc == 0)
 32184              		.loc 1 5265 15 view .LVU8644
 32185 07fa 214B     		ldr	r3, .L2510+24
 32186              	.LVL2482:
5265:src/xeq.c     **** 			if (XromUserPc == 0)
 32187              		.loc 1 5265 15 view .LVU8645
 32188 07fc 1860     		str	r0, [r3]
5266:src/xeq.c     **** 				return;
 32189              		.loc 1 5266 4 is_stmt 1 view .LVU8646
5266:src/xeq.c     **** 				return;
 32190              		.loc 1 5266 7 is_stmt 0 view .LVU8647
 32191 07fe 0028     		cmp	r0, #0
 32192 0800 ACD0     		beq	.L2165
5268:src/xeq.c     **** 				clrretstk();
 32193              		.loc 1 5268 4 is_stmt 1 view .LVU8648
5268:src/xeq.c     **** 				clrretstk();
 32194              		.loc 1 5268 8 is_stmt 0 view .LVU8649
 32195 0802 DFF88490 		ldr	r9, .L2510+32
 32196              	.LVL2483:
5268:src/xeq.c     **** 				clrretstk();
 32197              		.loc 1 5268 7 view .LVU8650
 32198 0806 D9F80030 		ldr	r3, [r9]
 32199 080a 43B9     		cbnz	r3, .L2192
5269:src/xeq.c     **** #endif
 32200              		.loc 1 5269 5 is_stmt 1 view .LVU8651
 32201              	.LBB4141:
 32202              	.LBI4141:
1606:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 32203              		.loc 1 1606 6 view .LVU8652
 32204              	.LBB4142:
1607:src/xeq.c     **** }
 32205              		.loc 1 1607 2 view .LVU8653
1607:src/xeq.c     **** }
 32206              		.loc 1 1607 14 is_stmt 0 view .LVU8654
 32207 080c 3A68     		ldr	r2, [r7]
1607:src/xeq.c     **** }
 32208              		.loc 1 1607 24 view .LVU8655
 32209 080e B2F8DE17 		ldrh	r1, [r2, #2014]
1607:src/xeq.c     **** }
 32210              		.loc 1 1607 12 view .LVU8656
 32211 0812 A2F8E237 		strh	r3, [r2, #2018]	@ movhi
ARM GAS  /tmp/ccqED0AM.s 			page 816


1607:src/xeq.c     **** }
 32212              		.loc 1 1607 24 view .LVU8657
 32213 0816 63F34F11 		bfi	r1, r3, #5, #11
 32214 081a A2F8DE17 		strh	r1, [r2, #2014]	@ movhi
 32215              	.LVL2484:
 32216              	.L2192:
1607:src/xeq.c     **** }
 32217              		.loc 1 1607 24 view .LVU8658
 32218              	.LBE4142:
 32219              	.LBE4141:
5271:src/xeq.c     **** 			return;
 32220              		.loc 1 5271 4 is_stmt 1 view .LVU8659
 32221 081e DFF864B0 		ldr	fp, .L2510+28
 32222 0822 0798     		ldr	r0, [sp, #28]
 32223 0824 FFF7FEFF 		bl	dispatch_xrom
 32224              	.LVL2485:
5272:src/xeq.c     **** 		}
 32225              		.loc 1 5272 4 view .LVU8660
 32226 0828 DBF80030 		ldr	r3, [fp]
 32227 082c D3E4     		b	.L2168
 32228              	.LVL2486:
 32229              	.L2176:
5272:src/xeq.c     **** 		}
 32230              		.loc 1 5272 4 is_stmt 0 view .LVU8661
 32231              	.LBE4143:
5229:src/xeq.c     **** 		}
 32232              		.loc 1 5229 4 is_stmt 1 view .LVU8662
5229:src/xeq.c     **** 		}
 32233              		.loc 1 5229 8 is_stmt 0 view .LVU8663
 32234 082e 42F08002 		orr	r2, r2, #128
 32235              	.LVL2487:
5229:src/xeq.c     **** 		}
 32236              		.loc 1 5229 8 view .LVU8664
 32237 0832 65E7     		b	.L2175
 32238              	.LVL2488:
 32239              	.L2243:
5229:src/xeq.c     **** 		}
 32240              		.loc 1 5229 8 view .LVU8665
 32241              	.LBE4151:
 32242              	.LBE4567:
 32243              	.LBB4568:
 32244              	.LBB4557:
4650:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 32245              		.loc 1 4650 3 is_stmt 1 view .LVU8666
4650:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 32246              		.loc 1 4650 3 view .LVU8667
 32247              	.LBB4543:
 32248              	.LBI4543:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32249              		.loc 1 546 5 view .LVU8668
 32250              	.LBB4544:
 547:src/xeq.c     **** 		Error = e;
 32251              		.loc 1 547 2 view .LVU8669
 547:src/xeq.c     **** 		Error = e;
 32252              		.loc 1 547 12 is_stmt 0 view .LVU8670
 32253 0834 DFF84CB0 		ldr	fp, .L2510+28
 547:src/xeq.c     **** 		Error = e;
ARM GAS  /tmp/ccqED0AM.s 			page 817


 32254              		.loc 1 547 5 view .LVU8671
 32255 0838 DBF80030 		ldr	r3, [fp]
 32256 083c 13B9     		cbnz	r3, .L2251
 32257              	.LVL2489:
 32258              	.LBB4545:
 32259              	.LBI4545:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32260              		.loc 1 546 5 is_stmt 1 view .LVU8672
 32261              	.LBB4546:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 32262              		.loc 1 548 3 view .LVU8673
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 32263              		.loc 1 548 9 is_stmt 0 view .LVU8674
 32264 083e 0323     		movs	r3, #3
 32265 0840 CBF80030 		str	r3, [fp]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 32266              		.loc 1 549 3 is_stmt 1 view .LVU8675
 32267              	.LVL2490:
 32268              	.L2251:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 32269              		.loc 1 549 3 is_stmt 0 view .LVU8676
 32270              	.LBE4546:
 32271              	.LBE4545:
 32272              	.LBE4544:
 32273              	.LBE4543:
4650:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 32274              		.loc 1 4650 3 is_stmt 1 view .LVU8677
4652:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
 32275              		.loc 1 4652 2 view .LVU8678
4652:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
 32276              		.loc 1 4652 6 is_stmt 0 view .LVU8679
 32277 0844 3B68     		ldr	r3, [r7]
 32278 0846 93F8AD27 		ldrb	r2, [r3, #1965]	@ zero_extendqisi2
4652:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
 32279              		.loc 1 4652 5 view .LVU8680
 32280 084a 9207     		lsls	r2, r2, #30
 32281 084c 05D4     		bmi	.L2456
 32282              	.L2305:
4655:src/xeq.c     **** 	  set_lift(); // don't turn on lift after CENTER (complex enter) in C_LOCK mode
 32283              		.loc 1 4655 60 view .LVU8681
 32284 084e 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
4655:src/xeq.c     **** 	  set_lift(); // don't turn on lift after CENTER (complex enter) in C_LOCK mode
 32285              		.loc 1 4655 56 view .LVU8682
 32286 0852 03F04103 		and	r3, r3, #65
 32287 0856 412B     		cmp	r3, #65
 32288 0858 82D1     		bne	.L2451
 32289              	.L2456:
4656:src/xeq.c     **** 	}
 32290              		.loc 1 4656 4 is_stmt 1 view .LVU8683
 32291              	.LBB4547:
 32292              	.LBI4547:
 767:src/xeq.c     ****     State2.state_lift = 1;
 32293              		.loc 1 767 6 view .LVU8684
 32294              	.LBB4548:
 768:src/xeq.c     **** }
 32295              		.loc 1 768 5 view .LVU8685
 768:src/xeq.c     **** }
ARM GAS  /tmp/ccqED0AM.s 			page 818


 32296              		.loc 1 768 23 is_stmt 0 view .LVU8686
 32297 085a E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 32298 085c DBF80030 		ldr	r3, [fp]
 32299 0860 42F04002 		orr	r2, r2, #64
 32300 0864 E275     		strb	r2, [r4, #23]
 769:src/xeq.c     **** 
 32301              		.loc 1 769 1 view .LVU8687
 32302 0866 B6E4     		b	.L2168
 32303              	.L2511:
 32304              		.align	2
 32305              	.L2510:
 32306 0868 00000000 		.word	monfuncs
 32307 086c 00000000 		.word	niladics
 32308 0870 00000000 		.word	xrom
 32309 0874 00000000 		.word	XromParams
 32310 0878 00000000 		.word	XromLocal
 32311 087c 00000000 		.word	xrom_size
 32312 0880 00000000 		.word	XromUserPc
 32313 0884 00000000 		.word	Error
 32314 0888 00000000 		.word	Running
 32315 088c 00000000 		.word	RetStk
 32316              	.LVL2491:
 32317              	.L2481:
 769:src/xeq.c     **** 
 32318              		.loc 1 769 1 view .LVU8688
 32319              	.LBE4548:
 32320              	.LBE4547:
 32321              	.LBE4557:
 32322              	.LBE4568:
 32323              	.LBB4569:
 32324              	.LBB4314:
4750:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
 32325              		.loc 1 4750 3 is_stmt 1 view .LVU8689
4750:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
 32326              		.loc 1 4750 7 is_stmt 0 view .LVU8690
 32327 0890 3B68     		ldr	r3, [r7]
 32328 0892 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4750:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
 32329              		.loc 1 4750 6 view .LVU8691
 32330 0896 D807     		lsls	r0, r3, #31
 32331 0898 40F1AC81 		bpl	.L2266
4751:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 32332              		.loc 1 4751 4 is_stmt 1 view .LVU8692
4751:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 32333              		.loc 1 4751 10 is_stmt 0 view .LVU8693
 32334 089c CE4B     		ldr	r3, .L2512
 32335 089e 02EB4202 		add	r2, r2, r2, lsl #1
 32336              	.LVL2492:
4751:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 32337              		.loc 1 4751 10 view .LVU8694
 32338 08a2 03EBC202 		add	r2, r3, r2, lsl #3
 32339 08a6 D2F80890 		ldr	r9, [r2, #8]
4751:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 32340              		.loc 1 4751 7 view .LVU8695
 32341 08aa B9F1000F 		cmp	r9, #0
 32342 08ae 00F06E81 		beq	.L2277
 32343              	.LBB4287:
ARM GAS  /tmp/ccqED0AM.s 			page 819


4752:src/xeq.c     **** 				if (dispatch_xrom(fp))
 32344              		.loc 1 4752 5 is_stmt 1 view .LVU8696
 32345              	.LVL2493:
4753:src/xeq.c     **** 					return;
 32346              		.loc 1 4753 5 view .LVU8697
4753:src/xeq.c     **** 					return;
 32347              		.loc 1 4753 9 is_stmt 0 view .LVU8698
 32348 08b2 4846     		mov	r0, r9
 32349 08b4 FFF7FEFF 		bl	dispatch_xrom
 32350              	.LVL2494:
4753:src/xeq.c     **** 					return;
 32351              		.loc 1 4753 8 view .LVU8699
 32352 08b8 0028     		cmp	r0, #0
 32353 08ba 7FF44FAF 		bne	.L2165
 32354              	.LBB4288:
4756:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
 32355              		.loc 1 4756 6 is_stmt 1 view .LVU8700
 32356              	.LBB4289:
 32357              	.LBI4289:
1442:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 32358              		.loc 1 1442 15 view .LVU8701
 32359              	.LBB4290:
1443:src/xeq.c     **** }
 32360              		.loc 1 1443 2 view .LVU8702
1443:src/xeq.c     **** }
 32361              		.loc 1 1443 9 is_stmt 0 view .LVU8703
 32362 08be 6420     		movs	r0, #100
 32363 08c0 FFF7FEFF 		bl	get_reg_n_int
 32364              	.LVL2495:
 32365 08c4 0790     		str	r0, [sp, #28]
 32366              	.LBE4290:
 32367              	.LBE4289:
4757:src/xeq.c     **** 					x = fp(y, x);
 32368              		.loc 1 4757 24 view .LVU8704
 32369 08c6 6520     		movs	r0, #101
 32370              	.LBB4292:
 32371              	.LBB4291:
1443:src/xeq.c     **** }
 32372              		.loc 1 1443 9 view .LVU8705
 32373 08c8 0691     		str	r1, [sp, #24]
 32374              	.LVL2496:
1443:src/xeq.c     **** }
 32375              		.loc 1 1443 9 view .LVU8706
 32376              	.LBE4291:
 32377              	.LBE4292:
4757:src/xeq.c     **** 					x = fp(y, x);
 32378              		.loc 1 4757 6 is_stmt 1 view .LVU8707
4757:src/xeq.c     **** 					x = fp(y, x);
 32379              		.loc 1 4757 24 is_stmt 0 view .LVU8708
 32380 08ca FFF7FEFF 		bl	get_reg_n_int
 32381              	.LVL2497:
4758:src/xeq.c     **** 					setlastX();
 32382              		.loc 1 4758 6 is_stmt 1 view .LVU8709
4758:src/xeq.c     **** 					setlastX();
 32383              		.loc 1 4758 10 is_stmt 0 view .LVU8710
 32384 08ce DDE90632 		ldrd	r3, r2, [sp, #24]
 32385 08d2 C847     		blx	r9
ARM GAS  /tmp/ccqED0AM.s 			page 820


 32386              	.LVL2498:
4758:src/xeq.c     **** 					setlastX();
 32387              		.loc 1 4758 10 view .LVU8711
 32388 08d4 8146     		mov	r9, r0
 32389              	.LVL2499:
4758:src/xeq.c     **** 					setlastX();
 32390              		.loc 1 4758 10 view .LVU8712
 32391 08d6 8A46     		mov	r10, r1
 32392              	.LVL2500:
4759:src/xeq.c     **** 					lower();
 32393              		.loc 1 4759 6 is_stmt 1 view .LVU8713
 32394              	.LBB4293:
 32395              	.LBI4293:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 32396              		.loc 1 792 6 view .LVU8714
 32397              	.LBB4294:
 793:src/xeq.c     **** }
 32398              		.loc 1 793 2 view .LVU8715
 32399 08d8 6C20     		movs	r0, #108
 32400              	.LVL2501:
 793:src/xeq.c     **** }
 32401              		.loc 1 793 2 is_stmt 0 view .LVU8716
 32402 08da 6421     		movs	r1, #100
 32403              	.LVL2502:
 793:src/xeq.c     **** }
 32404              		.loc 1 793 2 view .LVU8717
 32405 08dc DFF808B3 		ldr	fp, .L2512+16
 32406 08e0 FFF7FEFF 		bl	copyreg_n
 32407              	.LVL2503:
 32408              	.LBE4294:
 32409              	.LBE4293:
4760:src/xeq.c     **** 					setX_int(x);
 32410              		.loc 1 4760 6 is_stmt 1 view .LVU8718
 32411 08e4 19E6     		b	.L2453
 32412              	.LVL2504:
 32413              	.L2187:
4760:src/xeq.c     **** 					setX_int(x);
 32414              		.loc 1 4760 6 is_stmt 0 view .LVU8719
 32415              	.LBE4288:
 32416              	.LBE4287:
 32417              	.LBE4314:
 32418              	.LBE4569:
 32419              	.LBB4570:
 32420              	.LBB4152:
 32421              	.LBB4144:
 32422              	.LBB4131:
 32423              	.LBB4129:
 32424              	.LBI4129:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32425              		.loc 1 546 5 is_stmt 1 view .LVU8720
 32426              	.LBB4130:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 32427              		.loc 1 548 3 view .LVU8721
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 32428              		.loc 1 548 9 is_stmt 0 view .LVU8722
 32429 08e6 0820     		movs	r0, #8
 32430 08e8 DFF80093 		ldr	r9, .L2512+20
ARM GAS  /tmp/ccqED0AM.s 			page 821


 32431              	.LVL2505:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 32432              		.loc 1 548 9 view .LVU8723
 32433 08ec CBF80000 		str	r0, [fp]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 32434              		.loc 1 549 3 is_stmt 1 view .LVU8724
 32435 08f0 C6E4     		b	.L2304
 32436              	.LVL2506:
 32437              	.L2491:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 32438              		.loc 1 549 3 is_stmt 0 view .LVU8725
 32439              	.LBE4130:
 32440              	.LBE4129:
 32441              	.LBE4131:
 32442              	.LBE4144:
5246:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 32443              		.loc 1 5246 30 view .LVU8726
 32444 08f2 A2F16303 		sub	r3, r2, #99
 32445 08f6 0C2B     		cmp	r3, #12
 32446 08f8 3FF622AF 		bhi	.L2188
5246:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 32447              		.loc 1 5246 69 view .LVU8727
 32448 08fc D007     		lsls	r0, r2, #31
 32449              	.LVL2507:
5246:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 32450              		.loc 1 5246 69 view .LVU8728
 32451 08fe 7FF51FAF 		bpl	.L2188
5248:src/xeq.c     **** 	}
 32452              		.loc 1 5248 3 is_stmt 1 view .LVU8729
 32453              	.LVL2508:
 32454              	.LBB4145:
 32455              	.LBI4145:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32456              		.loc 1 546 5 view .LVU8730
 32457              	.LBB4146:
 547:src/xeq.c     **** 		Error = e;
 32458              		.loc 1 547 2 view .LVU8731
 547:src/xeq.c     **** 		Error = e;
 32459              		.loc 1 547 12 is_stmt 0 view .LVU8732
 32460 0902 DFF8E4B2 		ldr	fp, .L2512+16
 32461 0906 DBF80000 		ldr	r0, [fp]
 547:src/xeq.c     **** 		Error = e;
 32462              		.loc 1 547 5 view .LVU8733
 32463 090a 0028     		cmp	r0, #0
 32464 090c 7FF40FAF 		bne	.L2444
 32465              	.LVL2509:
 32466              	.LBB4147:
 32467              	.LBI4147:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32468              		.loc 1 546 5 is_stmt 1 view .LVU8734
 32469              	.LBB4148:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 32470              		.loc 1 548 3 view .LVU8735
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 32471              		.loc 1 548 9 is_stmt 0 view .LVU8736
 32472 0910 0720     		movs	r0, #7
 32473 0912 DFF8D892 		ldr	r9, .L2512+20
ARM GAS  /tmp/ccqED0AM.s 			page 822


 32474              	.LVL2510:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 32475              		.loc 1 548 9 view .LVU8737
 32476 0916 CBF80000 		str	r0, [fp]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 32477              		.loc 1 549 3 is_stmt 1 view .LVU8738
 32478 091a B1E4     		b	.L2304
 32479              	.LVL2511:
 32480              	.L2493:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 32481              		.loc 1 549 3 is_stmt 0 view .LVU8739
 32482              	.LBE4148:
 32483              	.LBE4147:
 32484              	.LBE4146:
 32485              	.LBE4145:
5192:src/xeq.c     **** 
 32486              		.loc 1 5192 15 view .LVU8740
 32487 091c 0698     		ldr	r0, [sp, #24]
 32488 091e FDE6     		b	.L2184
 32489              	.LVL2512:
 32490              	.L2480:
5192:src/xeq.c     **** 
 32491              		.loc 1 5192 15 view .LVU8741
 32492              	.LBE4152:
 32493              	.LBE4570:
 32494              	.LBB4571:
 32495              	.LBB4189:
 32496              	.LBB4184:
5299:src/xeq.c     **** 			if (XromUserPc != 0) {
 32497              		.loc 1 5299 4 is_stmt 1 view .LVU8742
5299:src/xeq.c     **** 			if (XromUserPc != 0) {
 32498              		.loc 1 5299 17 is_stmt 0 view .LVU8743
 32499 0920 0121     		movs	r1, #1
 32500 0922 2846     		mov	r0, r5
 32501 0924 0693     		str	r3, [sp, #24]
 32502 0926 FFF7FEFF 		bl	findmultilbl
 32503              	.LVL2513:
5299:src/xeq.c     **** 			if (XromUserPc != 0) {
 32504              		.loc 1 5299 15 view .LVU8744
 32505 092a AC4A     		ldr	r2, .L2512+4
5300:src/xeq.c     **** 				if (! Running)
 32506              		.loc 1 5300 7 view .LVU8745
 32507 092c 069B     		ldr	r3, [sp, #24]
5299:src/xeq.c     **** 			if (XromUserPc != 0) {
 32508              		.loc 1 5299 15 view .LVU8746
 32509 092e 1060     		str	r0, [r2]
5300:src/xeq.c     **** 				if (! Running)
 32510              		.loc 1 5300 4 is_stmt 1 view .LVU8747
5300:src/xeq.c     **** 				if (! Running)
 32511              		.loc 1 5300 7 is_stmt 0 view .LVU8748
 32512 0930 0028     		cmp	r0, #0
 32513 0932 3FF413AF 		beq	.L2165
 32514              	.LVL2514:
5301:src/xeq.c     **** 					clrretstk();
 32515              		.loc 1 5301 5 is_stmt 1 view .LVU8749
5301:src/xeq.c     **** 					clrretstk();
 32516              		.loc 1 5301 9 is_stmt 0 view .LVU8750
ARM GAS  /tmp/ccqED0AM.s 			page 823


 32517 0936 DFF8B492 		ldr	r9, .L2512+20
 32518              	.LVL2515:
5301:src/xeq.c     **** 					clrretstk();
 32519              		.loc 1 5301 8 view .LVU8751
 32520 093a D9F80020 		ldr	r2, [r9]
 32521 093e 42B9     		cbnz	r2, .L2169
5302:src/xeq.c     **** 				dispatch_xrom(fp);
 32522              		.loc 1 5302 6 is_stmt 1 view .LVU8752
 32523              	.LBB4175:
 32524              	.LBI4175:
1606:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 32525              		.loc 1 1606 6 view .LVU8753
 32526              	.LBB4176:
1607:src/xeq.c     **** }
 32527              		.loc 1 1607 2 view .LVU8754
1607:src/xeq.c     **** }
 32528              		.loc 1 1607 14 is_stmt 0 view .LVU8755
 32529 0940 3968     		ldr	r1, [r7]
1607:src/xeq.c     **** }
 32530              		.loc 1 1607 24 view .LVU8756
 32531 0942 B1F8DE07 		ldrh	r0, [r1, #2014]
1607:src/xeq.c     **** }
 32532              		.loc 1 1607 12 view .LVU8757
 32533 0946 A1F8E227 		strh	r2, [r1, #2018]	@ movhi
1607:src/xeq.c     **** }
 32534              		.loc 1 1607 24 view .LVU8758
 32535 094a 62F34F10 		bfi	r0, r2, #5, #11
 32536 094e A1F8DE07 		strh	r0, [r1, #2014]	@ movhi
 32537              	.LVL2516:
 32538              	.L2169:
1607:src/xeq.c     **** }
 32539              		.loc 1 1607 24 view .LVU8759
 32540              	.LBE4176:
 32541              	.LBE4175:
5303:src/xeq.c     **** 			}
 32542              		.loc 1 5303 5 is_stmt 1 view .LVU8760
 32543 0952 DFF894B2 		ldr	fp, .L2512+16
 32544 0956 1846     		mov	r0, r3
 32545 0958 FFF7FEFF 		bl	dispatch_xrom
 32546              	.LVL2517:
 32547 095c DBF80030 		ldr	r3, [fp]
 32548 0960 39E4     		b	.L2168
 32549              	.LVL2518:
 32550              	.L2211:
5303:src/xeq.c     **** 			}
 32551              		.loc 1 5303 5 is_stmt 0 view .LVU8761
 32552              	.LBE4184:
 32553              	.LBE4189:
 32554              	.LBE4571:
 32555              	.LBB4572:
 32556              	.LBB4259:
3930:src/xeq.c     **** 		break;
 32557              		.loc 1 3930 3 is_stmt 1 view .LVU8762
 32558 0962 DFF884B2 		ldr	fp, .L2512+16
 32559 0966 A9F10500 		sub	r0, r9, #5
 32560 096a FFF7FEFF 		bl	digit
 32561              	.LVL2519:
ARM GAS  /tmp/ccqED0AM.s 			page 824


3931:src/xeq.c     **** 
 32562              		.loc 1 3931 3 view .LVU8763
 32563 096e DBF80030 		ldr	r3, [fp]
 32564 0972 30E4     		b	.L2168
 32565              	.LVL2520:
 32566              	.L2484:
3931:src/xeq.c     **** 
 32567              		.loc 1 3931 3 is_stmt 0 view .LVU8764
 32568              	.LBE4259:
 32569              	.LBE4572:
 32570              	.LBB4573:
 32571              	.LBB4391:
 32572              	.LBB4380:
 32573              	.LBB4363:
 32574              	.LBB4356:
 32575 0974 FFF7FEFF 		bl	process_cmdline.part.0
 32576              	.LVL2521:
 32577 0978 2BE5     		b	.L2285
 32578              	.LVL2522:
 32579              	.L2488:
3931:src/xeq.c     **** 
 32580              		.loc 1 3931 3 view .LVU8765
 32581              	.LBE4356:
 32582              	.LBE4363:
 32583              	.LBE4380:
 32584              	.LBE4391:
 32585              	.LBE4573:
 32586              	.LBB4574:
 32587              	.LBB4558:
 32588              	.LBB4549:
 32589              	.LBB4530:
 32590 097a FFF7FEFF 		bl	process_cmdline.part.0
 32591              	.LVL2523:
 32592 097e 5DE6     		b	.L2242
 32593              	.LVL2524:
 32594              	.L2487:
3931:src/xeq.c     **** 
 32595              		.loc 1 3931 3 view .LVU8766
 32596              	.LBE4530:
 32597              	.LBE4549:
 32598              	.LBE4558:
 32599              	.LBE4574:
 32600              	.LBB4575:
 32601              	.LBB4520:
 32602              	.LBB4507:
 32603              	.LBB4496:
 32604              	.LBB4489:
 32605 0980 FFF7FEFF 		bl	process_cmdline.part.0
 32606              	.LVL2525:
 32607 0984 22E6     		b	.L2256
 32608              	.LVL2526:
 32609              	.L2486:
3931:src/xeq.c     **** 
 32610              		.loc 1 3931 3 view .LVU8767
 32611              	.LBE4489:
 32612              	.LBE4496:
 32613              	.LBE4507:
ARM GAS  /tmp/ccqED0AM.s 			page 825


 32614              	.LBE4520:
 32615              	.LBE4575:
 32616              	.LBB4576:
 32617              	.LBB4478:
 32618              	.LBB4473:
 32619              	.LBB4458:
 32620              	.LBB4451:
 32621 0986 FFF7FEFF 		bl	process_cmdline.part.0
 32622              	.LVL2527:
 32623 098a E5E5     		b	.L2280
 32624              	.LVL2528:
 32625              	.L2485:
3931:src/xeq.c     **** 
 32626              		.loc 1 3931 3 view .LVU8768
 32627              	.LBE4451:
 32628              	.LBE4458:
 32629              	.LBE4473:
 32630              	.LBE4478:
 32631              	.LBE4576:
 32632              	.LBB4577:
 32633              	.LBB4439:
 32634              	.LBB4422:
 32635              	.LBB4409:
 32636              	.LBB4402:
 32637 098c FFF7FEFF 		bl	process_cmdline.part.0
 32638              	.LVL2529:
 32639 0990 88E5     		b	.L2272
 32640              	.LVL2530:
 32641              	.L2208:
3931:src/xeq.c     **** 
 32642              		.loc 1 3931 3 view .LVU8769
 32643              	.LBE4402:
 32644              	.LBE4409:
 32645              	.LBE4422:
 32646              	.LBE4439:
 32647              	.LBE4577:
 32648              	.LBB4578:
 32649              	.LBB4260:
4085:src/xeq.c     **** 		break;
 32650              		.loc 1 4085 3 is_stmt 1 view .LVU8770
 32651 0992 DFF854B2 		ldr	fp, .L2512+16
4085:src/xeq.c     **** 		break;
 32652              		.loc 1 4085 53 is_stmt 0 view .LVU8771
 32653 0996 A5F11E01 		sub	r1, r5, #30
4085:src/xeq.c     **** 		break;
 32654              		.loc 1 4085 3 view .LVU8772
 32655 099a C9B2     		uxtb	r1, r1
 32656 099c 40F61C00 		movw	r0, #2076
 32657 09a0 FFF7FEFF 		bl	do_tst
 32658              	.LVL2531:
4086:src/xeq.c     **** 	case OP_Zeq1:	case OP_Zne1:
 32659              		.loc 1 4086 3 is_stmt 1 view .LVU8773
 32660 09a4 DBF80030 		ldr	r3, [fp]
 32661 09a8 15E4     		b	.L2168
 32662              	.L2209:
4076:src/xeq.c     **** 		break;
 32663              		.loc 1 4076 3 view .LVU8774
ARM GAS  /tmp/ccqED0AM.s 			page 826


 32664 09aa DFF83CB2 		ldr	fp, .L2512+16
4076:src/xeq.c     **** 		break;
 32665              		.loc 1 4076 54 is_stmt 0 view .LVU8775
 32666 09ae A5F11701 		sub	r1, r5, #23
4076:src/xeq.c     **** 		break;
 32667              		.loc 1 4076 3 view .LVU8776
 32668 09b2 C9B2     		uxtb	r1, r1
 32669 09b4 40F61B00 		movw	r0, #2075
 32670 09b8 FFF7FEFF 		bl	do_tst
 32671              	.LVL2532:
4077:src/xeq.c     **** 	case OP_Zeq0: case OP_Zne0:
 32672              		.loc 1 4077 3 is_stmt 1 view .LVU8777
 32673 09bc DBF80030 		ldr	r3, [fp]
 32674 09c0 09E4     		b	.L2168
 32675              	.L2207:
4079:src/xeq.c     **** 		break;
 32676              		.loc 1 4079 3 view .LVU8778
 32677 09c2 8749     		ldr	r1, .L2512+8
 32678 09c4 DFF820B2 		ldr	fp, .L2512+16
4079:src/xeq.c     **** 		break;
 32679              		.loc 1 4079 49 is_stmt 0 view .LVU8779
 32680 09c8 A5F12502 		sub	r2, r5, #37
4079:src/xeq.c     **** 		break;
 32681              		.loc 1 4079 3 view .LVU8780
 32682 09cc 0846     		mov	r0, r1
 32683 09ce D2B2     		uxtb	r2, r2
 32684 09d0 FFF7FEFF 		bl	do_ztst
 32685              	.LVL2533:
4080:src/xeq.c     **** 
 32686              		.loc 1 4080 3 is_stmt 1 view .LVU8781
 32687 09d4 DBF80030 		ldr	r3, [fp]
 32688 09d8 FFF7FDBB 		b	.L2168
 32689              	.L2210:
4058:src/xeq.c     **** 			bad_mode_error();
 32690              		.loc 1 4058 3 view .LVU8782
4058:src/xeq.c     **** 			bad_mode_error();
 32691              		.loc 1 4058 7 is_stmt 0 view .LVU8783
 32692 09dc 3B68     		ldr	r3, [r7]
 32693 09de 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4058:src/xeq.c     **** 			bad_mode_error();
 32694              		.loc 1 4058 6 view .LVU8784
 32695 09e2 DB07     		lsls	r3, r3, #31
 32696 09e4 00F1D380 		bmi	.L2277
4062:src/xeq.c     **** 		clr_lift();
 32697              		.loc 1 4062 3 is_stmt 1 view .LVU8785
 32698              	.LBB4196:
 32699              	.LBI4196:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 32700              		.loc 1 1226 6 view .LVU8786
 32701              	.LBB4197:
1227:src/xeq.c     **** 
 32702              		.loc 1 1227 2 view .LVU8787
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 32703              		.loc 1 1229 2 view .LVU8788
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 32704              		.loc 1 1229 5 is_stmt 0 view .LVU8789
 32705 09e8 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
ARM GAS  /tmp/ccqED0AM.s 			page 827


 32706 09ea 002B     		cmp	r3, #0
 32707 09ec 40F00B82 		bne	.L2494
 32708              	.L2239:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 32709              		.loc 1 1229 5 view .LVU8790
 32710              	.LBE4197:
 32711              	.LBE4196:
4063:src/xeq.c     **** 		setlastX();
 32712              		.loc 1 4063 3 is_stmt 1 view .LVU8791
 32713              	.LBB4199:
 32714              	.LBI4199:
 771:src/xeq.c     ****     State2.state_lift = 0;
 32715              		.loc 1 771 13 view .LVU8792
 32716              	.LBB4200:
 772:src/xeq.c     **** }
 32717              		.loc 1 772 5 view .LVU8793
 772:src/xeq.c     **** }
 32718              		.loc 1 772 23 is_stmt 0 view .LVU8794
 32719 09f0 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 32720              	.LBE4200:
 32721              	.LBE4199:
 32722              	.LBB4203:
 32723              	.LBB4204:
 793:src/xeq.c     **** }
 32724              		.loc 1 793 2 view .LVU8795
 32725 09f2 6421     		movs	r1, #100
 32726              	.LBE4204:
 32727              	.LBE4203:
 32728              	.LBB4207:
 32729              	.LBB4201:
 772:src/xeq.c     **** }
 32730              		.loc 1 772 23 view .LVU8796
 32731 09f4 6FF38613 		bfc	r3, #6, #1
 32732              	.LBE4201:
 32733              	.LBE4207:
 32734              	.LBB4208:
 32735              	.LBB4205:
 793:src/xeq.c     **** }
 32736              		.loc 1 793 2 view .LVU8797
 32737 09f8 6C20     		movs	r0, #108
 32738              	.LBE4205:
 32739              	.LBE4208:
 32740              	.LBB4209:
 32741              	.LBB4202:
 772:src/xeq.c     **** }
 32742              		.loc 1 772 23 view .LVU8798
 32743 09fa E375     		strb	r3, [r4, #23]
 32744              	.LBE4202:
 32745              	.LBE4209:
4064:src/xeq.c     **** 		if (opm == OP_SIGMAPLUS)
 32746              		.loc 1 4064 3 is_stmt 1 view .LVU8799
 32747              	.LBB4210:
 32748              	.LBI4203:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 32749              		.loc 1 792 6 view .LVU8800
 32750              	.LBB4206:
 793:src/xeq.c     **** }
ARM GAS  /tmp/ccqED0AM.s 			page 828


 32751              		.loc 1 793 2 view .LVU8801
 32752 09fc FFF7FEFF 		bl	copyreg_n
 32753              	.LVL2534:
 32754              	.LBE4206:
 32755              	.LBE4210:
4065:src/xeq.c     **** 			sigma_plus();
 32756              		.loc 1 4065 3 view .LVU8802
4065:src/xeq.c     **** 			sigma_plus();
 32757              		.loc 1 4065 6 is_stmt 0 view .LVU8803
 32758 0a00 B9F1150F 		cmp	r9, #21
 32759 0a04 00F0F581 		beq	.L2495
4068:src/xeq.c     **** 		sigma_val(OP_sigmaN);
 32760              		.loc 1 4068 4 is_stmt 1 view .LVU8804
 32761 0a08 FFF7FEFF 		bl	sigma_minus
 32762              	.LVL2535:
 32763              	.L2241:
4069:src/xeq.c     **** 		break;
 32764              		.loc 1 4069 3 view .LVU8805
 32765 0a0c DFF8D8B1 		ldr	fp, .L2512+16
 32766 0a10 1D20     		movs	r0, #29
 32767 0a12 FFF7FEFF 		bl	sigma_val
 32768              	.LVL2536:
4070:src/xeq.c     **** 
 32769              		.loc 1 4070 3 view .LVU8806
 32770 0a16 DBF80030 		ldr	r3, [fp]
 32771 0a1a FFF7DCBB 		b	.L2168
 32772              	.L2204:
4091:src/xeq.c     **** 		break;
 32773              		.loc 1 4091 3 view .LVU8807
 32774 0a1e DFF8C8B1 		ldr	fp, .L2512+16
 32775 0a22 7049     		ldr	r1, .L2512+12
 32776 0a24 6E48     		ldr	r0, .L2512+8
4091:src/xeq.c     **** 		break;
 32777              		.loc 1 4091 49 is_stmt 0 view .LVU8808
 32778 0a26 A5F12902 		sub	r2, r5, #41
4091:src/xeq.c     **** 		break;
 32779              		.loc 1 4091 3 view .LVU8809
 32780 0a2a D2B2     		uxtb	r2, r2
 32781 0a2c FFF7FEFF 		bl	do_ztst
 32782              	.LVL2537:
4092:src/xeq.c     **** 
 32783              		.loc 1 4092 3 is_stmt 1 view .LVU8810
 32784 0a30 DBF80030 		ldr	r3, [fp]
 32785 0a34 FFF7CFBB 		b	.L2168
 32786              	.L2206:
4088:src/xeq.c     **** 		break;
 32787              		.loc 1 4088 3 view .LVU8811
 32788 0a38 DFF8ACB1 		ldr	fp, .L2512+16
 32789 0a3c 6849     		ldr	r1, .L2512+8
 32790 0a3e 6948     		ldr	r0, .L2512+12
4088:src/xeq.c     **** 		break;
 32791              		.loc 1 4088 49 is_stmt 0 view .LVU8812
 32792 0a40 A5F12702 		sub	r2, r5, #39
4088:src/xeq.c     **** 		break;
 32793              		.loc 1 4088 3 view .LVU8813
 32794 0a44 D2B2     		uxtb	r2, r2
 32795 0a46 FFF7FEFF 		bl	do_ztst
ARM GAS  /tmp/ccqED0AM.s 			page 829


 32796              	.LVL2538:
4089:src/xeq.c     **** 	case OP_Zeqi:	case OP_Znei:
 32797              		.loc 1 4089 3 is_stmt 1 view .LVU8814
 32798 0a4a DBF80030 		ldr	r3, [fp]
 32799 0a4e FFF7C2BB 		b	.L2168
 32800              	.L2215:
4018:src/xeq.c     **** 			illegal(op);
 32801              		.loc 1 4018 3 view .LVU8815
4018:src/xeq.c     **** 			illegal(op);
 32802              		.loc 1 4018 7 is_stmt 0 view .LVU8816
 32803 0a52 DFF89891 		ldr	r9, .L2512+20
 32804              	.LVL2539:
4018:src/xeq.c     **** 			illegal(op);
 32805              		.loc 1 4018 6 view .LVU8817
 32806 0a56 D9F80030 		ldr	r3, [r9]
 32807 0a5a 002B     		cmp	r3, #0
 32808 0a5c 00F07D81 		beq	.L2227
4019:src/xeq.c     **** 		else if (CmdLineLength) {
 32809              		.loc 1 4019 4 is_stmt 1 view .LVU8818
4019:src/xeq.c     **** 		else if (CmdLineLength) {
 32810              		.loc 1 4019 4 view .LVU8819
 32811              	.LVL2540:
 32812              	.LBB4211:
 32813              	.LBI4211:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32814              		.loc 1 546 5 view .LVU8820
 32815              	.LBB4212:
 547:src/xeq.c     **** 		Error = e;
 32816              		.loc 1 547 2 view .LVU8821
 547:src/xeq.c     **** 		Error = e;
 32817              		.loc 1 547 12 is_stmt 0 view .LVU8822
 32818 0a60 DFF884B1 		ldr	fp, .L2512+16
 32819 0a64 DBF80000 		ldr	r0, [fp]
 547:src/xeq.c     **** 		Error = e;
 32820              		.loc 1 547 5 view .LVU8823
 32821 0a68 0028     		cmp	r0, #0
 32822 0a6a 3FF406AC 		beq	.L2173
 32823 0a6e 07E4     		b	.L2304
 32824              	.LVL2541:
 32825              	.L2216:
 547:src/xeq.c     **** 		Error = e;
 32826              		.loc 1 547 5 view .LVU8824
 32827              	.LBE4212:
 32828              	.LBE4211:
4037:src/xeq.c     **** 		    if ( CmdLineLength && !(XromRunning || Running) ) { 
 32829              		.loc 1 4037 5 is_stmt 1 view .LVU8825
4037:src/xeq.c     **** 		    if ( CmdLineLength && !(XromRunning || Running) ) { 
 32830              		.loc 1 4037 9 is_stmt 0 view .LVU8826
 32831 0a70 3B68     		ldr	r3, [r7]
 32832 0a72 93F8AD37 		ldrb	r3, [r3, #1965]	@ zero_extendqisi2
4037:src/xeq.c     **** 		    if ( CmdLineLength && !(XromRunning || Running) ) { 
 32833              		.loc 1 4037 8 view .LVU8827
 32834 0a76 13F0020F 		tst	r3, #2
4038:src/xeq.c     **** 		      //exclude stack lift if there is something in the input line AND if NOT running code i.e. X
 32835              		.loc 1 4038 10 view .LVU8828
 32836 0a7a 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
4037:src/xeq.c     **** 		    if ( CmdLineLength && !(XromRunning || Running) ) { 
ARM GAS  /tmp/ccqED0AM.s 			page 830


 32837              		.loc 1 4037 8 view .LVU8829
 32838 0a7c 00F08B81 		beq	.L2232
4038:src/xeq.c     **** 		      //exclude stack lift if there is something in the input line AND if NOT running code i.e. X
 32839              		.loc 1 4038 7 is_stmt 1 view .LVU8830
4038:src/xeq.c     **** 		      //exclude stack lift if there is something in the input line AND if NOT running code i.e. X
 32840              		.loc 1 4038 10 is_stmt 0 view .LVU8831
 32841 0a80 002B     		cmp	r3, #0
 32842 0a82 40F0A981 		bne	.L2437
 32843 0a86 DFF86491 		ldr	r9, .L2512+20
 32844              	.LVL2542:
4038:src/xeq.c     **** 		      //exclude stack lift if there is something in the input line AND if NOT running code i.e. X
 32845              		.loc 1 4038 10 view .LVU8832
 32846 0a8a DFF864A1 		ldr	r10, .L2512+24
 32847              	.L2233:
4043:src/xeq.c     **** 		      if ( (XromRunning || Running) ) {//JMTEST Explicitly including standard functionality if co
 32848              		.loc 1 4043 9 is_stmt 1 view .LVU8833
 32849 0a8e FFF7FEFF 		bl	lift
 32850              	.LVL2543:
4044:src/xeq.c     **** 			clr_lift();
 32851              		.loc 1 4044 9 view .LVU8834
4044:src/xeq.c     **** 			clr_lift();
 32852              		.loc 1 4044 27 is_stmt 0 view .LVU8835
 32853 0a92 DAF80020 		ldr	r2, [r10]
 32854 0a96 D9F80030 		ldr	r3, [r9]
 32855 0a9a 1343     		orrs	r3, r2, r3
 32856 0a9c 3FF45EAE 		beq	.L2165
 32857              	.L2454:
4052:src/xeq.c     **** 		  }
 32858              		.loc 1 4052 7 is_stmt 1 view .LVU8836
 32859              	.LBB4213:
 32860              	.LBI4213:
 771:src/xeq.c     ****     State2.state_lift = 0;
 32861              		.loc 1 771 13 view .LVU8837
 32862              	.LBB4214:
 772:src/xeq.c     **** }
 32863              		.loc 1 772 5 view .LVU8838
 772:src/xeq.c     **** }
 32864              		.loc 1 772 23 is_stmt 0 view .LVU8839
 32865 0aa0 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 32866 0aa2 DFF844B1 		ldr	fp, .L2512+16
 32867 0aa6 6FF38613 		bfc	r3, #6, #1
 32868 0aaa E375     		strb	r3, [r4, #23]
 32869 0aac DBF80030 		ldr	r3, [fp]
 773:src/xeq.c     **** 
 32870              		.loc 1 773 1 view .LVU8840
 32871 0ab0 FFF791BB 		b	.L2168
 32872              	.LVL2544:
 32873              	.L2212:
 773:src/xeq.c     **** 
 32874              		.loc 1 773 1 view .LVU8841
 32875              	.LBE4214:
 32876              	.LBE4213:
3934:src/xeq.c     **** 			break;
 32877              		.loc 1 3934 3 is_stmt 1 view .LVU8842
3934:src/xeq.c     **** 			break;
 32878              		.loc 1 3934 7 is_stmt 0 view .LVU8843
 32879 0ab4 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccqED0AM.s 			page 831


 32880 0ab6 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3934:src/xeq.c     **** 			break;
 32881              		.loc 1 3934 6 view .LVU8844
 32882 0aba D907     		lsls	r1, r3, #31
 32883 0abc 3FF54EAE 		bmi	.L2165
3937:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32884              		.loc 1 3937 3 is_stmt 1 view .LVU8845
3937:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32885              		.loc 1 3937 7 is_stmt 0 view .LVU8846
 32886 0ac0 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
3937:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32887              		.loc 1 3937 6 view .LVU8847
 32888 0ac2 012B     		cmp	r3, #1
 32889 0ac4 3FF64AAE 		bhi	.L2165
3937:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32890              		.loc 1 3937 22 view .LVU8848
 32891 0ac8 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
 32892 0aca 002A     		cmp	r2, #0
 32893 0acc 7FF446AE 		bne	.L2165
3937:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32894              		.loc 1 3937 54 view .LVU8849
 32895 0ad0 002B     		cmp	r3, #0
3937:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32896              		.loc 1 3937 40 view .LVU8850
 32897 0ad2 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
3937:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32898              		.loc 1 3937 54 view .LVU8851
 32899 0ad4 0CBF     		ite	eq
 32900 0ad6 0C22     		moveq	r2, #12
 32901 0ad8 0D22     		movne	r2, #13
3937:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32902              		.loc 1 3937 37 view .LVU8852
 32903 0ada 9A42     		cmp	r2, r3
 32904 0adc FFF63EAE 		blt	.L2165
3938:src/xeq.c     **** #else
 32905              		.loc 1 3938 4 is_stmt 1 view .LVU8853
3938:src/xeq.c     **** #else
 32906              		.loc 1 3938 7 is_stmt 0 view .LVU8854
 32907 0ae0 002B     		cmp	r3, #0
 32908 0ae2 00F0E381 		beq	.L2219
3938:src/xeq.c     **** #else
 32909              		.loc 1 3938 37 view .LVU8855
 32910 0ae6 2344     		add	r3, r3, r4
3938:src/xeq.c     **** #else
 32911              		.loc 1 3938 27 view .LVU8856
 32912 0ae8 DB7F     		ldrb	r3, [r3, #31]	@ zero_extendqisi2
 32913 0aea 2D2B     		cmp	r3, #45
 32914 0aec 00F0DE81 		beq	.L2219
 32915              	.L2220:
3949:src/xeq.c     **** 			append_cmdline('.');
 32916              		.loc 1 3949 4 is_stmt 1 view .LVU8857
 32917              	.LBB4215:
 32918              	.LBB4216:
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32919              		.loc 1 2646 10 is_stmt 0 view .LVU8858
 32920 0af0 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 32921              	.LBE4216:
ARM GAS  /tmp/ccqED0AM.s 			page 832


 32922              	.LBE4215:
3949:src/xeq.c     **** 			append_cmdline('.');
 32923              		.loc 1 3949 14 view .LVU8859
 32924 0af2 A17F     		ldrb	r1, [r4, #30]	@ zero_extendqisi2
 32925 0af4 DFF8F0B0 		ldr	fp, .L2512+16
 32926              	.LBB4220:
 32927              	.LBB4217:
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32928              		.loc 1 2646 23 view .LVU8860
 32929 0af8 5A1C     		adds	r2, r3, #1
 32930 0afa D2B2     		uxtb	r2, r2
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32931              		.loc 1 2646 27 view .LVU8861
 32932 0afc 2344     		add	r3, r3, r4
2647:src/xeq.c     **** }
 32933              		.loc 1 2647 25 view .LVU8862
 32934 0afe A018     		adds	r0, r4, r2
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32935              		.loc 1 2646 23 view .LVU8863
 32936 0b00 2277     		strb	r2, [r4, #28]
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32937              		.loc 1 2646 27 view .LVU8864
 32938 0b02 2E22     		movs	r2, #46
 32939 0b04 83F82020 		strb	r2, [r3, #32]
 32940              	.LBE4217:
 32941              	.LBE4220:
3949:src/xeq.c     **** 			append_cmdline('.');
 32942              		.loc 1 3949 14 view .LVU8865
 32943 0b08 0131     		adds	r1, r1, #1
 32944              	.LBB4221:
 32945              	.LBB4218:
2647:src/xeq.c     **** }
 32946              		.loc 1 2647 25 view .LVU8866
 32947 0b0a 0023     		movs	r3, #0
 32948 0b0c 80F82030 		strb	r3, [r0, #32]
 32949              	.LBE4218:
 32950              	.LBE4221:
3949:src/xeq.c     **** 			append_cmdline('.');
 32951              		.loc 1 3949 14 view .LVU8867
 32952 0b10 A177     		strb	r1, [r4, #30]
3950:src/xeq.c     **** 		}
 32953              		.loc 1 3950 4 is_stmt 1 view .LVU8868
 32954              	.LVL2545:
 32955              	.LBB4222:
 32956              	.LBI4215:
2645:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 32957              		.loc 1 2645 13 view .LVU8869
 32958              	.LBB4219:
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32959              		.loc 1 2646 2 view .LVU8870
2647:src/xeq.c     **** }
 32960              		.loc 1 2647 2 view .LVU8871
 32961 0b12 DBF80030 		ldr	r3, [fp]
2648:src/xeq.c     **** 
 32962              		.loc 1 2648 1 is_stmt 0 view .LVU8872
 32963 0b16 FFF75EBB 		b	.L2168
 32964              	.LVL2546:
ARM GAS  /tmp/ccqED0AM.s 			page 833


 32965              	.L2213:
2648:src/xeq.c     **** 
 32966              		.loc 1 2648 1 view .LVU8873
 32967              	.LBE4219:
 32968              	.LBE4222:
4002:src/xeq.c     **** 			cmdlinechs();
 32969              		.loc 1 4002 3 is_stmt 1 view .LVU8874
4002:src/xeq.c     **** 			cmdlinechs();
 32970              		.loc 1 4002 7 is_stmt 0 view .LVU8875
 32971 0b1a 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
4002:src/xeq.c     **** 			cmdlinechs();
 32972              		.loc 1 4002 6 view .LVU8876
 32973 0b1c 002A     		cmp	r2, #0
 32974 0b1e 40F04C81 		bne	.L2496
4004:src/xeq.c     **** 			setX_int(intChs(getX_int()));
 32975              		.loc 1 4004 8 is_stmt 1 view .LVU8877
4004:src/xeq.c     **** 			setX_int(intChs(getX_int()));
 32976              		.loc 1 4004 12 is_stmt 0 view .LVU8878
 32977 0b22 3B68     		ldr	r3, [r7]
 32978 0b24 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4004:src/xeq.c     **** 			setX_int(intChs(getX_int()));
 32979              		.loc 1 4004 11 view .LVU8879
 32980 0b28 DA07     		lsls	r2, r3, #31
 32981 0b2a 40F13881 		bpl	.L2226
4005:src/xeq.c     **** 			set_lift();
 32982              		.loc 1 4005 4 is_stmt 1 view .LVU8880
 32983              	.LBB4223:
 32984              	.LBI4223:
1442:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 32985              		.loc 1 1442 15 view .LVU8881
 32986              	.LBB4224:
1443:src/xeq.c     **** }
 32987              		.loc 1 1443 2 view .LVU8882
1443:src/xeq.c     **** }
 32988              		.loc 1 1443 9 is_stmt 0 view .LVU8883
 32989 0b2e 6420     		movs	r0, #100
 32990 0b30 FFF7FEFF 		bl	get_reg_n_int
 32991              	.LVL2547:
 32992              	.LBE4224:
 32993              	.LBE4223:
4005:src/xeq.c     **** 			set_lift();
 32994              		.loc 1 4005 4 view .LVU8884
 32995 0b34 FFF7FEFF 		bl	intChs
 32996              	.LVL2548:
 32997 0b38 FFF7FEFF 		bl	setX_int
 32998              	.LVL2549:
 32999 0b3c FFF743BB 		b	.L2450
 33000              	.L2214:
3955:src/xeq.c     **** 			break;
 33001              		.loc 1 3955 3 is_stmt 1 view .LVU8885
 33002              	.LBB4225:
3963:src/xeq.c     **** #endif
 33003              		.loc 1 3963 4 view .LVU8886
 33004              	.LVL2550:
3966:src/xeq.c     **** 				if (eex_pi) {
 33005              		.loc 1 3966 4 view .LVU8887
3966:src/xeq.c     **** 				if (eex_pi) {
ARM GAS  /tmp/ccqED0AM.s 			page 834


 33006              		.loc 1 3966 7 is_stmt 0 view .LVU8888
 33007 0b40 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 33008 0b42 022B     		cmp	r3, #2
 33009 0b44 3FF40AAE 		beq	.L2165
3981:src/xeq.c     **** 				break;
 33010              		.loc 1 3981 4 is_stmt 1 view .LVU8889
 33011              	.LBE4225:
3955:src/xeq.c     **** 			break;
 33012              		.loc 1 3955 7 is_stmt 0 view .LVU8890
 33013 0b48 3B68     		ldr	r3, [r7]
 33014              	.LBB4228:
3981:src/xeq.c     **** 				break;
 33015              		.loc 1 3981 7 view .LVU8891
 33016 0b4a 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
 33017              	.LBE4228:
3955:src/xeq.c     **** 			break;
 33018              		.loc 1 3955 7 view .LVU8892
 33019 0b4c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 33020 0b50 03F00103 		and	r3, r3, #1
 33021              	.LBB4229:
3981:src/xeq.c     **** 				break;
 33022              		.loc 1 3981 7 view .LVU8893
 33023 0b54 1343     		orrs	r3, r3, r2
 33024 0b56 7FF401AE 		bne	.L2165
3981:src/xeq.c     **** 				break;
 33025              		.loc 1 3981 22 view .LVU8894
 33026 0b5a 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
3981:src/xeq.c     **** 				break;
 33027              		.loc 1 3981 19 view .LVU8895
 33028 0b5c 122B     		cmp	r3, #18
 33029 0b5e 3FF6FDAD 		bhi	.L2165
3983:src/xeq.c     **** 				// empty command line: enter pi
 33030              		.loc 1 3983 4 is_stmt 1 view .LVU8896
3994:src/xeq.c     **** 				digit(1);
 33031              		.loc 1 3994 4 view .LVU8897
3994:src/xeq.c     **** 				digit(1);
 33032              		.loc 1 3994 7 is_stmt 0 view .LVU8898
 33033 0b62 002B     		cmp	r3, #0
 33034 0b64 00F0A681 		beq	.L2497
 33035              	.L2221:
3996:src/xeq.c     **** 			append_cmdline('E');
 33036              		.loc 1 3996 4 is_stmt 1 view .LVU8899
3996:src/xeq.c     **** 			append_cmdline('E');
 33037              		.loc 1 3996 17 is_stmt 0 view .LVU8900
 33038 0b68 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
3996:src/xeq.c     **** 			append_cmdline('E');
 33039              		.loc 1 3996 15 view .LVU8901
 33040 0b6a 6377     		strb	r3, [r4, #29]
3997:src/xeq.c     **** 		}
 33041              		.loc 1 3997 4 is_stmt 1 view .LVU8902
 33042              	.LVL2551:
 33043              	.LBB4226:
 33044              	.LBI4226:
2645:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 33045              		.loc 1 2645 13 view .LVU8903
 33046              	.LBB4227:
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
ARM GAS  /tmp/ccqED0AM.s 			page 835


 33047              		.loc 1 2646 2 view .LVU8904
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 33048              		.loc 1 2646 23 is_stmt 0 view .LVU8905
 33049 0b6c 5A1C     		adds	r2, r3, #1
 33050 0b6e D2B2     		uxtb	r2, r2
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 33051              		.loc 1 2646 27 view .LVU8906
 33052 0b70 2344     		add	r3, r3, r4
2647:src/xeq.c     **** }
 33053              		.loc 1 2647 25 view .LVU8907
 33054 0b72 A118     		adds	r1, r4, r2
 33055 0b74 DFF870B0 		ldr	fp, .L2512+16
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 33056              		.loc 1 2646 23 view .LVU8908
 33057 0b78 2277     		strb	r2, [r4, #28]
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 33058              		.loc 1 2646 27 view .LVU8909
 33059 0b7a 4522     		movs	r2, #69
 33060 0b7c 83F82020 		strb	r2, [r3, #32]
2647:src/xeq.c     **** }
 33061              		.loc 1 2647 2 is_stmt 1 view .LVU8910
2647:src/xeq.c     **** }
 33062              		.loc 1 2647 25 is_stmt 0 view .LVU8911
 33063 0b80 0023     		movs	r3, #0
 33064 0b82 81F82030 		strb	r3, [r1, #32]
 33065 0b86 DBF80030 		ldr	r3, [fp]
2648:src/xeq.c     **** 
 33066              		.loc 1 2648 1 view .LVU8912
 33067 0b8a FFF724BB 		b	.L2168
 33068              	.LVL2552:
 33069              	.L2277:
2648:src/xeq.c     **** 
 33070              		.loc 1 2648 1 view .LVU8913
 33071              	.LBE4227:
 33072              	.LBE4226:
 33073              	.LBE4229:
 33074              	.LBE4260:
 33075              	.LBE4578:
 33076              	.LBB4579:
 33077              	.LBB4440:
4857:src/xeq.c     **** 		}
 33078              		.loc 1 4857 5 is_stmt 1 view .LVU8914
 33079              	.LBB4423:
 33080              	.LBI4423:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 33081              		.loc 1 575 6 view .LVU8915
 33082              	.LBE4423:
 33083              	.LBE4440:
 33084              	.LBE4579:
 576:src/xeq.c     **** }
 33085              		.loc 1 576 2 view .LVU8916
 33086              	.LBB4580:
 33087              	.LBB4441:
 33088              	.LBB4426:
 33089              	.LBB4424:
 33090              	.LBI4424:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
ARM GAS  /tmp/ccqED0AM.s 			page 836


 33091              		.loc 1 546 5 view .LVU8917
 33092              	.LBB4425:
 547:src/xeq.c     **** 		Error = e;
 33093              		.loc 1 547 2 view .LVU8918
 547:src/xeq.c     **** 		Error = e;
 33094              		.loc 1 547 12 is_stmt 0 view .LVU8919
 33095 0b8e DFF858B0 		ldr	fp, .L2512+16
 33096 0b92 DBF80000 		ldr	r0, [fp]
 547:src/xeq.c     **** 		Error = e;
 33097              		.loc 1 547 5 view .LVU8920
 33098 0b96 0028     		cmp	r0, #0
 33099 0b98 7FF4C9AD 		bne	.L2444
 33100              	.LVL2553:
 547:src/xeq.c     **** 		Error = e;
 33101              		.loc 1 547 5 view .LVU8921
 33102              	.LBE4425:
 33103              	.LBE4424:
 33104              	.LBE4426:
 33105              	.LBE4441:
 33106              	.LBE4580:
 33107              	.LBB4581:
 33108              	.LBB4261:
 33109              	.LBB4230:
 33110              	.LBB4231:
 33111              	.LBB4232:
 33112              	.LBB4233:
 33113              	.LBI4233:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 33114              		.loc 1 546 5 is_stmt 1 view .LVU8922
 33115              	.LBB4234:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 33116              		.loc 1 548 3 view .LVU8923
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 33117              		.loc 1 548 9 is_stmt 0 view .LVU8924
 33118 0b9c 0D20     		movs	r0, #13
 33119 0b9e DFF84C90 		ldr	r9, .L2512+20
 33120 0ba2 CBF80000 		str	r0, [fp]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 33121              		.loc 1 549 3 is_stmt 1 view .LVU8925
 33122 0ba6 FFF76BBB 		b	.L2304
 33123              	.LVL2554:
 33124              	.L2287:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 33125              		.loc 1 549 3 is_stmt 0 view .LVU8926
 33126              	.LBE4234:
 33127              	.LBE4233:
 33128              	.LBE4232:
 33129              	.LBE4231:
 33130              	.LBE4230:
 33131              	.LBE4261:
 33132              	.LBE4581:
 33133              	.LBB4582:
 33134              	.LBB4392:
4809:src/xeq.c     **** 	} else
 33135              		.loc 1 4809 4 is_stmt 1 view .LVU8927
 33136              	.LBB4381:
 33137              	.LBI4381:
ARM GAS  /tmp/ccqED0AM.s 			page 837


 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 33138              		.loc 1 575 6 view .LVU8928
 33139              	.LBE4381:
 33140              	.LBE4392:
 33141              	.LBE4582:
 576:src/xeq.c     **** }
 33142              		.loc 1 576 2 view .LVU8929
 33143              	.LBB4583:
 33144              	.LBB4393:
 33145              	.LBB4386:
 33146              	.LBB4382:
 33147              	.LBI4382:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 33148              		.loc 1 546 5 view .LVU8930
 33149              	.LBB4383:
 547:src/xeq.c     **** 		Error = e;
 33150              		.loc 1 547 2 view .LVU8931
 547:src/xeq.c     **** 		Error = e;
 33151              		.loc 1 547 12 is_stmt 0 view .LVU8932
 33152 0baa DFF83CB0 		ldr	fp, .L2512+16
 33153 0bae DBF80030 		ldr	r3, [fp]
 547:src/xeq.c     **** 		Error = e;
 33154              		.loc 1 547 5 view .LVU8933
 33155 0bb2 002B     		cmp	r3, #0
 33156 0bb4 7FF4DAAA 		bne	.L2179
 33157              	.LVL2555:
 33158              	.LBB4384:
 33159              	.LBI4384:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 33160              		.loc 1 546 5 is_stmt 1 view .LVU8934
 33161              	.LBB4385:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 33162              		.loc 1 548 3 view .LVU8935
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 33163              		.loc 1 548 9 is_stmt 0 view .LVU8936
 33164 0bb8 0D23     		movs	r3, #13
 33165 0bba CBF80030 		str	r3, [fp]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 33166              		.loc 1 549 3 is_stmt 1 view .LVU8937
 33167              	.LVL2556:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 33168              		.loc 1 549 3 is_stmt 0 view .LVU8938
 33169              	.LBE4385:
 33170              	.LBE4384:
 33171              	.LBE4383:
 33172              	.LBE4382:
 33173              	.LBE4386:
4811:src/xeq.c     **** }
 33174              		.loc 1 4811 3 is_stmt 1 view .LVU8939
 33175              	.LBE4393:
 33176              	.LBE4583:
5380:src/xeq.c     **** 		}
 33177              		.loc 1 5380 12 view .LVU8940
5390:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 33178              		.loc 1 5390 2 view .LVU8941
 33179 0bbe FFF7D5BA 		b	.L2179
 33180              	.LVL2557:
ARM GAS  /tmp/ccqED0AM.s 			page 838


 33181              	.L2295:
5414:src/xeq.c     **** 						// Need space for double precision stack
 33182              		.loc 1 5414 34 is_stmt 0 discriminator 1 view .LVU8942
 33183 0bc2 029A     		ldr	r2, [sp, #8]
 33184 0bc4 92F8CF27 		ldrb	r2, [r2, #1999]	@ zero_extendqisi2
 33185 0bc8 0B2A     		cmp	r2, #11
 33186 0bca 40F2AB80 		bls	.L2297
5418:src/xeq.c     **** 					if (Error == ERR_NONE) {
 33187              		.loc 1 5418 6 is_stmt 1 view .LVU8943
5418:src/xeq.c     **** 					if (Error == ERR_NONE) {
 33188              		.loc 1 5418 20 is_stmt 0 view .LVU8944
 33189 0bce 6AF3C711 		bfi	r1, r10, #7, #1
 33190 0bd2 5970     		strb	r1, [r3, #1]
5419:src/xeq.c     **** 						UState.mode_double = 1;
 33191              		.loc 1 5419 6 is_stmt 1 view .LVU8945
 33192 0bd4 E4E5     		b	.L2296
 33193              	.L2513:
 33194 0bd6 00BF     		.align	2
 33195              	.L2512:
 33196 0bd8 00000000 		.word	dyfuncs
 33197 0bdc 00000000 		.word	XromUserPc
 33198 0be0 00000000 		.word	const_0
 33199 0be4 00000000 		.word	const_1
 33200 0be8 00000000 		.word	Error
 33201 0bec 00000000 		.word	Running
 33202 0bf0 00000000 		.word	XromRunning
 33203              	.LVL2558:
 33204              	.L2266:
 33205              	.LBB4584:
 33206              	.LBB4315:
4766:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 33207              		.loc 1 4766 4 view .LVU8946
4766:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 33208              		.loc 1 4766 10 is_stmt 0 view .LVU8947
 33209 0bf4 B14B     		ldr	r3, .L2514
 33210 0bf6 02EB4202 		add	r2, r2, r2, lsl #1
 33211              	.LVL2559:
4766:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 33212              		.loc 1 4766 10 view .LVU8948
 33213 0bfa 53F83290 		ldr	r9, [r3, r2, lsl #3]
4766:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 33214              		.loc 1 4766 7 view .LVU8949
 33215 0bfe B9F1000F 		cmp	r9, #0
 33216 0c02 C4D0     		beq	.L2277
 33217              	.LBB4295:
4767:src/xeq.c     **** 				if (dispatch_xrom(fp))
 33218              		.loc 1 4767 5 is_stmt 1 view .LVU8950
 33219              	.LVL2560:
4768:src/xeq.c     **** 					return;
 33220              		.loc 1 4768 5 view .LVU8951
4768:src/xeq.c     **** 					return;
 33221              		.loc 1 4768 9 is_stmt 0 view .LVU8952
 33222 0c04 4846     		mov	r0, r9
 33223 0c06 FFF7FEFF 		bl	dispatch_xrom
 33224              	.LVL2561:
4768:src/xeq.c     **** 					return;
 33225              		.loc 1 4768 8 view .LVU8953
ARM GAS  /tmp/ccqED0AM.s 			page 839


 33226 0c0a 0028     		cmp	r0, #0
 33227 0c0c 7FF4A6AD 		bne	.L2165
 33228              	.LBB4296:
4771:src/xeq.c     **** 					getXY(&x, &y);
 33229              		.loc 1 4771 6 is_stmt 1 view .LVU8954
4772:src/xeq.c     **** 					if (NULL == fp(&r, &y, &x))
 33230              		.loc 1 4772 6 view .LVU8955
 33231              	.LVL2562:
 33232              	.LBB4297:
 33233              	.LBI4297:
 854:src/xeq.c     **** 	getX(x);
 33234              		.loc 1 854 6 view .LVU8956
 33235              	.LBE4297:
 33236              	.LBE4296:
 33237              	.LBE4295:
 33238              	.LBE4315:
 33239              	.LBE4584:
 855:src/xeq.c     **** 	getY(y);
 33240              		.loc 1 855 2 view .LVU8957
 33241              	.LBB4585:
 33242              	.LBB4316:
 33243              	.LBB4309:
 33244              	.LBB4306:
 33245              	.LBB4302:
 33246              	.LBB4298:
 33247              	.LBI4298:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 33248              		.loc 1 824 12 view .LVU8958
 33249              	.LBB4299:
 825:src/xeq.c     **** }
 33250              		.loc 1 825 2 view .LVU8959
 825:src/xeq.c     **** }
 33251              		.loc 1 825 9 is_stmt 0 view .LVU8960
 33252 0c10 6421     		movs	r1, #100
 33253 0c12 29A8     		add	r0, sp, #164
 33254              	.LVL2563:
 825:src/xeq.c     **** }
 33255              		.loc 1 825 9 view .LVU8961
 33256 0c14 FFF7FEFF 		bl	getRegister
 33257              	.LVL2564:
 825:src/xeq.c     **** }
 33258              		.loc 1 825 9 view .LVU8962
 33259              	.LBE4299:
 33260              	.LBE4298:
 33261              	.LBE4302:
 33262              	.LBE4306:
 33263              	.LBE4309:
 33264              	.LBE4316:
 33265              	.LBE4585:
 856:src/xeq.c     **** }
 33266              		.loc 1 856 2 is_stmt 1 view .LVU8963
 33267              	.LBB4586:
 33268              	.LBB4317:
 33269              	.LBB4310:
 33270              	.LBB4307:
 33271              	.LBB4303:
 33272              	.LBB4300:
ARM GAS  /tmp/ccqED0AM.s 			page 840


 33273              	.LBI4300:
 832:src/xeq.c     **** 	getRegister(y, regY_idx);
 33274              		.loc 1 832 6 view .LVU8964
 33275              	.LBB4301:
 833:src/xeq.c     **** }
 33276              		.loc 1 833 2 view .LVU8965
 33277 0c18 6521     		movs	r1, #101
 33278 0c1a 32A8     		add	r0, sp, #200
 33279              	.LVL2565:
 833:src/xeq.c     **** }
 33280              		.loc 1 833 2 is_stmt 0 view .LVU8966
 33281 0c1c FFF7FEFF 		bl	getRegister
 33282              	.LVL2566:
 833:src/xeq.c     **** }
 33283              		.loc 1 833 2 view .LVU8967
 33284              	.LBE4301:
 33285              	.LBE4300:
 33286              	.LBE4303:
4773:src/xeq.c     **** 						set_NaN(&r);
 33287              		.loc 1 4773 6 is_stmt 1 view .LVU8968
4773:src/xeq.c     **** 						set_NaN(&r);
 33288              		.loc 1 4773 18 is_stmt 0 view .LVU8969
 33289 0c20 29AA     		add	r2, sp, #164
 33290 0c22 32A9     		add	r1, sp, #200
 33291 0c24 5046     		mov	r0, r10
 33292 0c26 C847     		blx	r9
 33293              	.LVL2567:
4773:src/xeq.c     **** 						set_NaN(&r);
 33294              		.loc 1 4773 9 view .LVU8970
 33295 0c28 0028     		cmp	r0, #0
 33296 0c2a 00F00F81 		beq	.L2498
 33297              	.L2271:
4775:src/xeq.c     **** 					lower();
 33298              		.loc 1 4775 6 is_stmt 1 view .LVU8971
 33299              	.LBB4304:
 33300              	.LBI4304:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 33301              		.loc 1 792 6 view .LVU8972
 33302              	.LBB4305:
 793:src/xeq.c     **** }
 33303              		.loc 1 793 2 view .LVU8973
 33304 0c2e 6421     		movs	r1, #100
 33305 0c30 6C20     		movs	r0, #108
 33306 0c32 DFF8A0B2 		ldr	fp, .L2514+24
 33307 0c36 FFF7FEFF 		bl	copyreg_n
 33308              	.LVL2568:
 33309              	.LBE4305:
 33310              	.LBE4304:
4776:src/xeq.c     **** 					setX(&r);
 33311              		.loc 1 4776 6 view .LVU8974
 33312              	.L2455:
4776:src/xeq.c     **** 					setX(&r);
 33313              		.loc 1 4776 6 is_stmt 0 view .LVU8975
 33314              	.LBE4307:
 33315              	.LBE4310:
 33316              	.LBE4317:
 33317              	.LBE4586:
ARM GAS  /tmp/ccqED0AM.s 			page 841


 33318              	.LBB4587:
 33319              	.LBB4442:
 33320              	.LBB4427:
 33321              	.LBB4428:
4853:src/xeq.c     **** 					setX(&r);
 33322              		.loc 1 4853 6 is_stmt 1 view .LVU8976
 33323 0c3a FFF7FEFF 		bl	lower
 33324              	.LVL2569:
4854:src/xeq.c     **** 				}
 33325              		.loc 1 4854 6 view .LVU8977
 33326              	.LBB4429:
 33327              	.LBI4429:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 33328              		.loc 1 828 6 view .LVU8978
 33329              	.LBB4430:
 829:src/xeq.c     **** }
 33330              		.loc 1 829 2 view .LVU8979
 33331 0c3e 5146     		mov	r1, r10
 33332 0c40 6420     		movs	r0, #100
 33333 0c42 FFF7FEFF 		bl	setRegister
 33334              	.LVL2570:
 829:src/xeq.c     **** }
 33335              		.loc 1 829 2 is_stmt 0 view .LVU8980
 33336 0c46 DBF80030 		ldr	r3, [fp]
 33337              	.LBE4430:
 33338              	.LBE4429:
 33339              	.LBE4428:
 33340              	.LBE4427:
 33341 0c4a FFF7C4BA 		b	.L2168
 33342              	.LVL2571:
 33343              	.L2274:
4842:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 33344              		.loc 1 4842 4 is_stmt 1 view .LVU8981
4842:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 33345              		.loc 1 4842 10 is_stmt 0 view .LVU8982
 33346 0c4e 9C4B     		ldr	r3, .L2514+4
 33347 0c50 02EB8202 		add	r2, r2, r2, lsl #2
 33348              	.LVL2572:
4842:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 33349              		.loc 1 4842 10 view .LVU8983
 33350 0c54 53F82290 		ldr	r9, [r3, r2, lsl #2]
4842:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 33351              		.loc 1 4842 7 view .LVU8984
 33352 0c58 B9F1000F 		cmp	r9, #0
 33353 0c5c 97D0     		beq	.L2277
 33354              	.LBB4435:
4843:src/xeq.c     **** 				if (dispatch_xrom(fp))
 33355              		.loc 1 4843 5 is_stmt 1 view .LVU8985
 33356              	.LVL2573:
4844:src/xeq.c     **** 					return;
 33357              		.loc 1 4844 5 view .LVU8986
4844:src/xeq.c     **** 					return;
 33358              		.loc 1 4844 9 is_stmt 0 view .LVU8987
 33359 0c5e 4846     		mov	r0, r9
 33360 0c60 FFF7FEFF 		bl	dispatch_xrom
 33361              	.LVL2574:
4844:src/xeq.c     **** 					return;
ARM GAS  /tmp/ccqED0AM.s 			page 842


 33362              		.loc 1 4844 8 view .LVU8988
 33363 0c64 0028     		cmp	r0, #0
 33364 0c66 7FF479AD 		bne	.L2165
 33365              	.LBB4433:
4847:src/xeq.c     **** 					getXYZ(&x, &y, &z);
 33366              		.loc 1 4847 6 is_stmt 1 view .LVU8989
4848:src/xeq.c     **** 					if (NULL == fp(&r, &z, &y, &x))
 33367              		.loc 1 4848 6 view .LVU8990
 33368 0c6a 32AA     		add	r2, sp, #200
 33369 0c6c 29A9     		add	r1, sp, #164
 33370 0c6e 20A8     		add	r0, sp, #128
 33371 0c70 FFF7FEFF 		bl	getXYZ
 33372              	.LVL2575:
4849:src/xeq.c     **** 						set_NaN(&r);
 33373              		.loc 1 4849 6 view .LVU8991
4849:src/xeq.c     **** 						set_NaN(&r);
 33374              		.loc 1 4849 18 is_stmt 0 view .LVU8992
 33375 0c74 20AB     		add	r3, sp, #128
 33376 0c76 29AA     		add	r2, sp, #164
 33377 0c78 32A9     		add	r1, sp, #200
 33378 0c7a 5046     		mov	r0, r10
 33379 0c7c C847     		blx	r9
 33380              	.LVL2576:
4849:src/xeq.c     **** 						set_NaN(&r);
 33381              		.loc 1 4849 9 view .LVU8993
 33382 0c7e 0028     		cmp	r0, #0
 33383 0c80 00F0BA80 		beq	.L2499
 33384              	.L2279:
4851:src/xeq.c     **** 					lower();
 33385              		.loc 1 4851 6 is_stmt 1 view .LVU8994
 33386              	.LBB4431:
 33387              	.LBI4431:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 33388              		.loc 1 792 6 view .LVU8995
 33389              	.LBB4432:
 793:src/xeq.c     **** }
 33390              		.loc 1 793 2 view .LVU8996
 33391 0c84 6421     		movs	r1, #100
 33392 0c86 6C20     		movs	r0, #108
 33393 0c88 DFF848B2 		ldr	fp, .L2514+24
 33394 0c8c FFF7FEFF 		bl	copyreg_n
 33395              	.LVL2577:
 33396              	.LBE4432:
 33397              	.LBE4431:
4852:src/xeq.c     **** 					lower();
 33398              		.loc 1 4852 6 view .LVU8997
 33399 0c90 FFF7FEFF 		bl	lower
 33400              	.LVL2578:
 33401 0c94 D1E7     		b	.L2455
 33402              	.LVL2579:
 33403              	.L2439:
4852:src/xeq.c     **** 					lower();
 33404              		.loc 1 4852 6 is_stmt 0 view .LVU8998
 33405              	.LBE4433:
 33406              	.LBE4435:
 33407              	.LBE4442:
 33408              	.LBE4587:
ARM GAS  /tmp/ccqED0AM.s 			page 843


 33409              	.LBB4588:
 33410              	.LBB4559:
4633:src/xeq.c     **** 			bad_mode_error();
 33411              		.loc 1 4633 23 view .LVU8999
 33412 0c96 02EB0911 		add	r1, r2, r9, lsl #4
 33413 0c9a 4FEA091A 		lsl	r10, r9, #4
4633:src/xeq.c     **** 			bad_mode_error();
 33414              		.loc 1 4633 20 view .LVU9000
 33415 0c9e 91F90410 		ldrsb	r1, [r1, #4]
 33416 0ca2 0029     		cmp	r1, #0
 33417 0ca4 BFF6D8AC 		bge	.L2244
4634:src/xeq.c     **** 		else if (! isNULL(niladics[idx].niladicf)) {
 33418              		.loc 1 4634 4 is_stmt 1 view .LVU9001
 33419              	.LBB4550:
 33420              	.LBI4550:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 33421              		.loc 1 575 6 view .LVU9002
 33422              	.LBE4550:
 33423              	.LBE4559:
 33424              	.LBE4588:
 576:src/xeq.c     **** }
 33425              		.loc 1 576 2 view .LVU9003
 33426              	.LVL2580:
 33427              	.LBB4589:
 33428              	.LBB4560:
 33429              	.LBB4555:
 33430              	.LBB4551:
 33431              	.LBI4551:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 33432              		.loc 1 546 5 view .LVU9004
 33433              	.LBB4552:
 547:src/xeq.c     **** 		Error = e;
 33434              		.loc 1 547 2 view .LVU9005
 547:src/xeq.c     **** 		Error = e;
 33435              		.loc 1 547 12 is_stmt 0 view .LVU9006
 33436 0ca8 DFF828B2 		ldr	fp, .L2514+24
 547:src/xeq.c     **** 		Error = e;
 33437              		.loc 1 547 5 view .LVU9007
 33438 0cac DBF80020 		ldr	r2, [fp]
 33439 0cb0 002A     		cmp	r2, #0
 33440 0cb2 7FF4EFAC 		bne	.L2245
 33441              	.LVL2581:
 33442              	.LBB4553:
 33443              	.LBI4553:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 33444              		.loc 1 546 5 is_stmt 1 view .LVU9008
 33445              	.LBB4554:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 33446              		.loc 1 548 3 view .LVU9009
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 33447              		.loc 1 548 9 is_stmt 0 view .LVU9010
 33448 0cb6 0D22     		movs	r2, #13
 33449 0cb8 CBF80020 		str	r2, [fp]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 33450              		.loc 1 549 3 is_stmt 1 view .LVU9011
 33451 0cbc EAE4     		b	.L2245
 33452              	.LVL2582:
ARM GAS  /tmp/ccqED0AM.s 			page 844


 33453              	.L2258:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 33454              		.loc 1 549 3 is_stmt 0 view .LVU9012
 33455              	.LBE4554:
 33456              	.LBE4553:
 33457              	.LBE4552:
 33458              	.LBE4551:
 33459              	.LBE4555:
 33460              	.LBE4560:
 33461              	.LBE4589:
 33462              	.LBB4590:
 33463              	.LBB4521:
4690:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 33464              		.loc 1 4690 4 is_stmt 1 view .LVU9013
4690:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 33465              		.loc 1 4690 10 is_stmt 0 view .LVU9014
 33466 0cbe 814B     		ldr	r3, .L2514+8
 33467 0cc0 02EB4202 		add	r2, r2, r2, lsl #1
 33468              	.LVL2583:
4690:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 33469              		.loc 1 4690 10 view .LVU9015
 33470 0cc4 53F83290 		ldr	r9, [r3, r2, lsl #3]
4690:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 33471              		.loc 1 4690 7 view .LVU9016
 33472 0cc8 B9F1000F 		cmp	r9, #0
 33473 0ccc 3FF45FAF 		beq	.L2277
 33474              	.LBB4508:
4691:src/xeq.c     **** 				if (dispatch_xrom(fp))
 33475              		.loc 1 4691 5 is_stmt 1 view .LVU9017
 33476              	.LVL2584:
4692:src/xeq.c     **** 					return;
 33477              		.loc 1 4692 5 view .LVU9018
4692:src/xeq.c     **** 					return;
 33478              		.loc 1 4692 9 is_stmt 0 view .LVU9019
 33479 0cd0 4846     		mov	r0, r9
 33480 0cd2 FFF7FEFF 		bl	dispatch_xrom
 33481              	.LVL2585:
4692:src/xeq.c     **** 					return;
 33482              		.loc 1 4692 8 view .LVU9020
 33483 0cd6 0028     		cmp	r0, #0
 33484 0cd8 7FF440AD 		bne	.L2165
 33485              	.LBB4509:
4695:src/xeq.c     **** 					getX(&x);
 33486              		.loc 1 4695 6 is_stmt 1 view .LVU9021
4696:src/xeq.c     **** 					if (NULL == fp(&r, &x))
 33487              		.loc 1 4696 6 view .LVU9022
 33488              	.LVL2586:
 33489              	.LBB4510:
 33490              	.LBI4510:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 33491              		.loc 1 824 12 view .LVU9023
 33492              	.LBB4511:
 825:src/xeq.c     **** }
 33493              		.loc 1 825 2 view .LVU9024
 825:src/xeq.c     **** }
 33494              		.loc 1 825 9 is_stmt 0 view .LVU9025
 33495 0cdc 6421     		movs	r1, #100
ARM GAS  /tmp/ccqED0AM.s 			page 845


 33496 0cde 32A8     		add	r0, sp, #200
 33497              	.LVL2587:
 825:src/xeq.c     **** }
 33498              		.loc 1 825 9 view .LVU9026
 33499 0ce0 FFF7FEFF 		bl	getRegister
 33500              	.LVL2588:
 825:src/xeq.c     **** }
 33501              		.loc 1 825 9 view .LVU9027
 33502              	.LBE4511:
 33503              	.LBE4510:
4697:src/xeq.c     **** 						set_NaN(&r);
 33504              		.loc 1 4697 6 is_stmt 1 view .LVU9028
4697:src/xeq.c     **** 						set_NaN(&r);
 33505              		.loc 1 4697 18 is_stmt 0 view .LVU9029
 33506 0ce4 32A9     		add	r1, sp, #200
 33507 0ce6 5046     		mov	r0, r10
 33508 0ce8 C847     		blx	r9
 33509              	.LVL2589:
4697:src/xeq.c     **** 						set_NaN(&r);
 33510              		.loc 1 4697 9 view .LVU9030
 33511 0cea 0028     		cmp	r0, #0
 33512 0cec 00F0B280 		beq	.L2500
 33513              	.L2263:
4699:src/xeq.c     **** 					setX(&r);
 33514              		.loc 1 4699 6 is_stmt 1 view .LVU9031
 33515              	.LBB4512:
 33516              	.LBI4512:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 33517              		.loc 1 792 6 view .LVU9032
 33518              	.LBB4513:
 793:src/xeq.c     **** }
 33519              		.loc 1 793 2 view .LVU9033
 33520 0cf0 6421     		movs	r1, #100
 33521 0cf2 6C20     		movs	r0, #108
 33522 0cf4 DFF8DCB1 		ldr	fp, .L2514+24
 33523 0cf8 FFF7FEFF 		bl	copyreg_n
 33524              	.LVL2590:
 33525              	.LBE4513:
 33526              	.LBE4512:
4700:src/xeq.c     **** 				}
 33527              		.loc 1 4700 6 view .LVU9034
 33528              	.LBB4514:
 33529              	.LBI4514:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 33530              		.loc 1 828 6 view .LVU9035
 33531              	.LBB4515:
 829:src/xeq.c     **** }
 33532              		.loc 1 829 2 view .LVU9036
 33533 0cfc 5146     		mov	r1, r10
 33534 0cfe 6420     		movs	r0, #100
 33535 0d00 FFF7FEFF 		bl	setRegister
 33536              	.LVL2591:
 829:src/xeq.c     **** }
 33537              		.loc 1 829 2 is_stmt 0 view .LVU9037
 33538 0d04 DBF80030 		ldr	r3, [fp]
 33539              	.LBE4515:
 33540              	.LBE4514:
ARM GAS  /tmp/ccqED0AM.s 			page 846


 33541              	.LBE4509:
 33542              	.LBE4508:
 33543 0d08 FFF765BA 		b	.L2168
 33544              	.LVL2592:
 33545              	.L2252:
 829:src/xeq.c     **** }
 33546              		.loc 1 829 2 view .LVU9038
 33547              	.LBE4521:
 33548              	.LBE4590:
 33549              	.LBB4591:
 33550              	.LBB4561:
4655:src/xeq.c     **** 	  set_lift(); // don't turn on lift after CENTER (complex enter) in C_LOCK mode
 33551              		.loc 1 4655 7 is_stmt 1 view .LVU9039
4655:src/xeq.c     **** 	  set_lift(); // don't turn on lift after CENTER (complex enter) in C_LOCK mode
 33552              		.loc 1 4655 10 is_stmt 0 view .LVU9040
 33553 0d0c B9F13F0F 		cmp	r9, #63
 33554 0d10 3FF426AD 		beq	.L2451
4655:src/xeq.c     **** 	  set_lift(); // don't turn on lift after CENTER (complex enter) in C_LOCK mode
 33555              		.loc 1 4655 29 view .LVU9041
 33556 0d14 B9F10B0F 		cmp	r9, #11
 33557 0d18 3FF422AD 		beq	.L2451
 33558 0d1c 97E5     		b	.L2305
 33559              	.L2489:
4655:src/xeq.c     **** 	  set_lift(); // don't turn on lift after CENTER (complex enter) in C_LOCK mode
 33560              		.loc 1 4655 29 view .LVU9042
 33561 0d1e DFF8B4B1 		ldr	fp, .L2514+24
 33562 0d22 B7E4     		b	.L2245
 33563              	.LVL2593:
 33564              	.L2297:
4655:src/xeq.c     **** 	  set_lift(); // don't turn on lift after CENTER (complex enter) in C_LOCK mode
 33565              		.loc 1 4655 29 view .LVU9043
 33566              	.LBE4561:
 33567              	.LBE4591:
5416:src/xeq.c     **** 					}
 33568              		.loc 1 5416 7 is_stmt 1 view .LVU9044
 33569 0d24 7D21     		movs	r1, #125
 33570 0d26 0C20     		movs	r0, #12
 33571 0d28 FFF7FEFF 		bl	cmdregs
 33572              	.LVL2594:
5418:src/xeq.c     **** 					if (Error == ERR_NONE) {
 33573              		.loc 1 5418 20 is_stmt 0 view .LVU9045
 33574 0d2c 664B     		ldr	r3, .L2514+12
 33575 0d2e DBF80010 		ldr	r1, [fp]
5418:src/xeq.c     **** 					if (Error == ERR_NONE) {
 33576              		.loc 1 5418 6 is_stmt 1 view .LVU9046
5418:src/xeq.c     **** 					if (Error == ERR_NONE) {
 33577              		.loc 1 5418 20 is_stmt 0 view .LVU9047
 33578 0d32 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 33579 0d34 6AF3C712 		bfi	r2, r10, #7, #1
 33580 0d38 5A70     		strb	r2, [r3, #1]
5419:src/xeq.c     **** 						UState.mode_double = 1;
 33581              		.loc 1 5419 6 is_stmt 1 view .LVU9048
5419:src/xeq.c     **** 						UState.mode_double = 1;
 33582              		.loc 1 5419 9 is_stmt 0 view .LVU9049
 33583 0d3a 0029     		cmp	r1, #0
 33584 0d3c 3FF430AD 		beq	.L2296
5424:src/xeq.c     **** 				}
ARM GAS  /tmp/ccqED0AM.s 			page 847


 33585              		.loc 1 5424 7 is_stmt 1 view .LVU9050
5424:src/xeq.c     **** 				}
 33586              		.loc 1 5424 13 is_stmt 0 view .LVU9051
 33587 0d40 CBF800A0 		str	r10, [fp]
 33588 0d44 FFF72ABB 		b	.L2294
 33589              	.LVL2595:
 33590              	.L2490:
 33591              	.LBB4592:
 33592              	.LBB4562:
 33593              	.LBB4556:
 33594              	.LBB4538:
 33595              	.LBB4537:
 749:src/xeq.c     **** }
 33596              		.loc 1 749 3 is_stmt 1 view .LVU9052
 33597 0d48 FFF7FEFF 		bl	lift
 33598              	.LVL2596:
 33599              	.L2247:
 33600              	.LBE4537:
 33601              	.LBE4538:
4642:src/xeq.c     **** 				default:
 33602              		.loc 1 4642 13 view .LVU9053
 33603              	.LBB4539:
 33604              	.LBI4539:
 747:src/xeq.c     **** 	if (get_lift())
 33605              		.loc 1 747 6 view .LVU9054
 33606              	.LBB4540:
 748:src/xeq.c     **** 		lift();
 33607              		.loc 1 748 2 view .LVU9055
 33608              	.LBB4541:
 33609              	.LBI4541:
 743:src/xeq.c     **** 	return State2.state_lift;
 33610              		.loc 1 743 12 view .LVU9056
 33611              	.LBB4542:
 744:src/xeq.c     **** }
 33612              		.loc 1 744 2 view .LVU9057
 744:src/xeq.c     **** }
 33613              		.loc 1 744 15 is_stmt 0 view .LVU9058
 33614 0d4c E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 33615              	.LBE4542:
 33616              	.LBE4541:
 748:src/xeq.c     **** 		lift();
 33617              		.loc 1 748 5 view .LVU9059
 33618 0d4e 5906     		lsls	r1, r3, #25
 33619 0d50 7FF59BAC 		bpl	.L2248
 749:src/xeq.c     **** }
 33620              		.loc 1 749 3 is_stmt 1 view .LVU9060
 33621 0d54 FFF7FEFF 		bl	lift
 33622              	.LVL2597:
 33623 0d58 97E4     		b	.L2248
 33624              	.LVL2598:
 33625              	.L2227:
 749:src/xeq.c     **** }
 33626              		.loc 1 749 3 is_stmt 0 view .LVU9061
 33627              	.LBE4540:
 33628              	.LBE4539:
 33629              	.LBE4556:
 33630              	.LBE4562:
ARM GAS  /tmp/ccqED0AM.s 			page 848


 33631              	.LBE4592:
 33632              	.LBB4593:
 33633              	.LBB4262:
4020:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 33634              		.loc 1 4020 8 is_stmt 1 view .LVU9062
4020:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 33635              		.loc 1 4020 12 is_stmt 0 view .LVU9063
 33636 0d5a 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
4020:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 33637              		.loc 1 4020 11 view .LVU9064
 33638 0d5c 002B     		cmp	r3, #0
 33639 0d5e 6CD0     		beq	.L2228
4022:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 33640              		.loc 1 4022 4 is_stmt 1 view .LVU9065
4022:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 33641              		.loc 1 4022 7 is_stmt 0 view .LVU9066
 33642 0d60 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
4022:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 33643              		.loc 1 4022 48 view .LVU9067
 33644 0d62 013B     		subs	r3, r3, #1
4022:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 33645              		.loc 1 4022 7 view .LVU9068
 33646 0d64 22B1     		cbz	r2, .L2229
4022:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 33647              		.loc 1 4022 34 view .LVU9069
 33648 0d66 E218     		adds	r2, r4, r3
4022:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 33649              		.loc 1 4022 24 view .LVU9070
 33650 0d68 92F82010 		ldrb	r1, [r2, #32]	@ zero_extendqisi2
 33651 0d6c 4429     		cmp	r1, #68
 33652 0d6e 7DD0     		beq	.L2501
 33653              	.L2229:
4027:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
 33654              		.loc 1 4027 4 is_stmt 1 view .LVU9071
4027:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
 33655              		.loc 1 4027 17 is_stmt 0 view .LVU9072
 33656 0d70 DBB2     		uxtb	r3, r3
4028:src/xeq.c     **** 				CmdLineEex = 0;
 33657              		.loc 1 4028 15 view .LVU9073
 33658 0d72 E218     		adds	r2, r4, r3
4027:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
 33659              		.loc 1 4027 17 view .LVU9074
 33660 0d74 2377     		strb	r3, [r4, #28]
4028:src/xeq.c     **** 				CmdLineEex = 0;
 33661              		.loc 1 4028 4 is_stmt 1 view .LVU9075
4028:src/xeq.c     **** 				CmdLineEex = 0;
 33662              		.loc 1 4028 15 is_stmt 0 view .LVU9076
 33663 0d76 92F82030 		ldrb	r3, [r2, #32]	@ zero_extendqisi2
4028:src/xeq.c     **** 				CmdLineEex = 0;
 33664              		.loc 1 4028 7 view .LVU9077
 33665 0d7a 452B     		cmp	r3, #69
 33666 0d7c 6ED0     		beq	.L2502
4030:src/xeq.c     **** 				CmdLineDot--;
 33667              		.loc 1 4030 9 is_stmt 1 view .LVU9078
4030:src/xeq.c     **** 				CmdLineDot--;
 33668              		.loc 1 4030 12 is_stmt 0 view .LVU9079
 33669 0d7e 2E2B     		cmp	r3, #46
ARM GAS  /tmp/ccqED0AM.s 			page 849


 33670 0d80 7FF4ECAC 		bne	.L2165
4031:src/xeq.c     **** 		} else
 33671              		.loc 1 4031 5 is_stmt 1 view .LVU9080
4031:src/xeq.c     **** 		} else
 33672              		.loc 1 4031 15 is_stmt 0 view .LVU9081
 33673 0d84 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 33674 0d86 DFF84CB1 		ldr	fp, .L2514+24
 33675 0d8a 013B     		subs	r3, r3, #1
 33676 0d8c A377     		strb	r3, [r4, #30]
 33677 0d8e DBF80030 		ldr	r3, [fp]
 33678 0d92 FFF720BA 		b	.L2168
 33679              	.LVL2599:
 33680              	.L2232:
4050:src/xeq.c     **** 		    lift();
 33681              		.loc 1 4050 7 is_stmt 1 view .LVU9082
 33682              	.LBB4235:
 33683              	.LBI4235:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 33684              		.loc 1 1226 6 view .LVU9083
 33685              	.LBB4236:
1227:src/xeq.c     **** 
 33686              		.loc 1 1227 2 view .LVU9084
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 33687              		.loc 1 1229 2 view .LVU9085
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 33688              		.loc 1 1229 5 is_stmt 0 view .LVU9086
 33689 0d96 9BBB     		cbnz	r3, .L2503
 33690              	.L2236:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 33691              		.loc 1 1229 5 view .LVU9087
 33692              	.LBE4236:
 33693              	.LBE4235:
4051:src/xeq.c     **** 		    clr_lift();
 33694              		.loc 1 4051 7 is_stmt 1 view .LVU9088
 33695 0d98 FFF7FEFF 		bl	lift
 33696              	.LVL2600:
 33697 0d9c 80E6     		b	.L2454
 33698              	.L2226:
 33699              	.LBB4238:
4008:src/xeq.c     **** 
 33700              		.loc 1 4008 4 view .LVU9089
4010:src/xeq.c     **** 			dn_minus(&r, &x);
 33701              		.loc 1 4010 4 view .LVU9090
 33702              	.LVL2601:
 33703              	.LBB4239:
 33704              	.LBI4239:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 33705              		.loc 1 824 12 view .LVU9091
 33706              	.LBB4240:
 825:src/xeq.c     **** }
 33707              		.loc 1 825 2 view .LVU9092
 825:src/xeq.c     **** }
 33708              		.loc 1 825 9 is_stmt 0 view .LVU9093
 33709 0d9e 32A8     		add	r0, sp, #200
 33710              	.LVL2602:
 825:src/xeq.c     **** }
 33711              		.loc 1 825 9 view .LVU9094
ARM GAS  /tmp/ccqED0AM.s 			page 850


 33712 0da0 6421     		movs	r1, #100
 33713 0da2 FFF7FEFF 		bl	getRegister
 33714              	.LVL2603:
 825:src/xeq.c     **** }
 33715              		.loc 1 825 9 view .LVU9095
 33716              	.LBE4240:
 33717              	.LBE4239:
4011:src/xeq.c     **** 			setX(&r);
 33718              		.loc 1 4011 4 is_stmt 1 view .LVU9096
 33719 0da6 32A9     		add	r1, sp, #200
 33720 0da8 5046     		mov	r0, r10
 33721 0daa FFF7FEFF 		bl	dn_minus
 33722              	.LVL2604:
4012:src/xeq.c     **** 			set_lift();
 33723              		.loc 1 4012 4 view .LVU9097
 33724              	.LBB4241:
 33725              	.LBI4241:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 33726              		.loc 1 828 6 view .LVU9098
 33727              	.LBB4242:
 829:src/xeq.c     **** }
 33728              		.loc 1 829 2 view .LVU9099
 33729 0dae 5146     		mov	r1, r10
 33730 0db0 6420     		movs	r0, #100
 33731 0db2 FFF7FEFF 		bl	setRegister
 33732              	.LVL2605:
 829:src/xeq.c     **** }
 33733              		.loc 1 829 2 is_stmt 0 view .LVU9100
 33734              	.LBE4242:
 33735              	.LBE4241:
4013:src/xeq.c     **** 		}
 33736              		.loc 1 4013 4 is_stmt 1 view .LVU9101
 33737              	.LBB4243:
 33738              	.LBI4243:
 767:src/xeq.c     ****     State2.state_lift = 1;
 33739              		.loc 1 767 6 view .LVU9102
 33740              	.LBB4244:
 768:src/xeq.c     **** }
 33741              		.loc 1 768 5 view .LVU9103
 33742 0db6 FFF706BA 		b	.L2450
 33743              	.L2496:
 33744              	.LBE4244:
 33745              	.LBE4243:
 33746              	.LBE4238:
4003:src/xeq.c     **** 		else if (is_intmode()) {
 33747              		.loc 1 4003 4 view .LVU9104
 33748              	.LBB4245:
 33749              	.LBI4245:
3245:src/xeq.c     **** 	if (CmdLineEex) {
 33750              		.loc 1 3245 13 view .LVU9105
 33751              	.LBB4246:
3246:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 33752              		.loc 1 3246 2 view .LVU9106
3246:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 33753              		.loc 1 3246 6 is_stmt 0 view .LVU9107
 33754 0dba 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
3246:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
ARM GAS  /tmp/ccqED0AM.s 			page 851


 33755              		.loc 1 3246 5 view .LVU9108
 33756 0dbc 33B3     		cbz	r3, .L2223
3250:src/xeq.c     **** 			Cmdline[CmdLineEex] ^= 1;
 33757              		.loc 1 3250 3 is_stmt 1 view .LVU9109
3251:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
 33758              		.loc 1 3251 4 view .LVU9110
3251:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
 33759              		.loc 1 3251 24 is_stmt 0 view .LVU9111
 33760 0dbe 2344     		add	r3, r3, r4
 33761 0dc0 DFF810B1 		ldr	fp, .L2514+24
 33762 0dc4 93F82020 		ldrb	r2, [r3, #32]	@ zero_extendqisi2
 33763 0dc8 82F00102 		eor	r2, r2, #1
 33764 0dcc 83F82020 		strb	r2, [r3, #32]
 33765 0dd0 DBF80030 		ldr	r3, [fp]
 33766 0dd4 FFF7FFB9 		b	.L2168
 33767              	.L2437:
 33768              	.LBE4246:
 33769              	.LBE4245:
4038:src/xeq.c     **** 		      //exclude stack lift if there is something in the input line AND if NOT running code i.e. X
 33770              		.loc 1 4038 31 view .LVU9112
 33771 0dd8 DFF8FCA0 		ldr	r10, .L2514+28
4038:src/xeq.c     **** 		      //exclude stack lift if there is something in the input line AND if NOT running code i.e. X
 33772              		.loc 1 4038 43 view .LVU9113
 33773 0ddc DFF8FC90 		ldr	r9, .L2514+32
 33774              	.LVL2606:
4038:src/xeq.c     **** 		      //exclude stack lift if there is something in the input line AND if NOT running code i.e. X
 33775              		.loc 1 4038 29 view .LVU9114
 33776 0de0 DAF80020 		ldr	r2, [r10]
 33777 0de4 D9F80030 		ldr	r3, [r9]
 33778 0de8 1343     		orrs	r3, r2, r3
 33779 0dea 57D0     		beq	.L2504
4042:src/xeq.c     **** 		      lift();
 33780              		.loc 1 4042 9 is_stmt 1 view .LVU9115
 33781              	.LBB4249:
 33782              	.LBI4249:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 33783              		.loc 1 1226 6 view .LVU9116
 33784              	.LBB4250:
1227:src/xeq.c     **** 
 33785              		.loc 1 1227 2 view .LVU9117
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 33786              		.loc 1 1229 2 view .LVU9118
 33787 0dec FFF7FEFF 		bl	process_cmdline.part.0
 33788              	.LVL2607:
 33789 0df0 4DE6     		b	.L2233
 33790              	.LVL2608:
 33791              	.L2495:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 33792              		.loc 1 1229 2 is_stmt 0 view .LVU9119
 33793              	.LBE4250:
 33794              	.LBE4249:
4066:src/xeq.c     **** 		else
 33795              		.loc 1 4066 4 is_stmt 1 view .LVU9120
 33796 0df2 FFF7FEFF 		bl	sigma_plus
 33797              	.LVL2609:
 33798 0df6 09E6     		b	.L2241
 33799              	.LVL2610:
ARM GAS  /tmp/ccqED0AM.s 			page 852


 33800              	.L2499:
4066:src/xeq.c     **** 		else
 33801              		.loc 1 4066 4 is_stmt 0 view .LVU9121
 33802              	.LBE4262:
 33803              	.LBE4593:
 33804              	.LBB4594:
 33805              	.LBB4443:
 33806              	.LBB4436:
 33807              	.LBB4434:
4850:src/xeq.c     **** 					setlastX();
 33808              		.loc 1 4850 7 is_stmt 1 view .LVU9122
 33809 0df8 5046     		mov	r0, r10
 33810 0dfa FFF7FEFF 		bl	set_NaN
 33811              	.LVL2611:
 33812 0dfe 41E7     		b	.L2279
 33813              	.LVL2612:
 33814              	.L2503:
4850:src/xeq.c     **** 					setlastX();
 33815              		.loc 1 4850 7 is_stmt 0 view .LVU9123
 33816              	.LBE4434:
 33817              	.LBE4436:
 33818              	.LBE4443:
 33819              	.LBE4594:
 33820              	.LBB4595:
 33821              	.LBB4263:
 33822              	.LBB4251:
 33823              	.LBB4237:
 33824 0e00 FFF7FEFF 		bl	process_cmdline.part.0
 33825              	.LVL2613:
 33826 0e04 C8E7     		b	.L2236
 33827              	.L2494:
 33828              	.LBE4237:
 33829              	.LBE4251:
 33830              	.LBB4252:
 33831              	.LBB4198:
 33832 0e06 FFF7FEFF 		bl	process_cmdline.part.0
 33833              	.LVL2614:
 33834 0e0a F1E5     		b	.L2239
 33835              	.L2223:
 33836              	.LBE4198:
 33837              	.LBE4252:
 33838              	.LBB4253:
 33839              	.LBB4247:
3277:src/xeq.c     **** 			if (CmdLineLength > 1)
 33840              		.loc 1 3277 3 is_stmt 1 view .LVU9124
3277:src/xeq.c     **** 			if (CmdLineLength > 1)
 33841              		.loc 1 3277 6 is_stmt 0 view .LVU9125
 33842 0e0c 94F82030 		ldrb	r3, [r4, #32]	@ zero_extendqisi2
 33843 0e10 2D2B     		cmp	r3, #45
 33844 0e12 34D0     		beq	.L2505
3281:src/xeq.c     **** 			xcopy(Cmdline+1, Cmdline, CmdLineLength);
 33845              		.loc 1 3281 10 is_stmt 1 view .LVU9126
3281:src/xeq.c     **** 			xcopy(Cmdline+1, Cmdline, CmdLineLength);
 33846              		.loc 1 3281 13 is_stmt 0 view .LVU9127
 33847 0e14 122A     		cmp	r2, #18
 33848 0e16 3FF6A1AC 		bhi	.L2165
3282:src/xeq.c     **** 			Cmdline[0] = '-';
ARM GAS  /tmp/ccqED0AM.s 			page 853


 33849              		.loc 1 3282 4 is_stmt 1 view .LVU9128
 33850 0e1a 2C49     		ldr	r1, .L2514+16
 33851 0e1c DFF8B4B0 		ldr	fp, .L2514+24
 33852 0e20 481C     		adds	r0, r1, #1
 33853 0e22 FFF7FEFF 		bl	xcopy
 33854              	.LVL2615:
3283:src/xeq.c     **** 			CmdLineLength++;
 33855              		.loc 1 3283 4 view .LVU9129
3284:src/xeq.c     **** 		}
 33856              		.loc 1 3284 17 is_stmt 0 view .LVU9130
 33857 0e26 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
 33858 0e28 DBF80030 		ldr	r3, [fp]
 33859 0e2c 0132     		adds	r2, r2, #1
3283:src/xeq.c     **** 			CmdLineLength++;
 33860              		.loc 1 3283 15 view .LVU9131
 33861 0e2e 2D21     		movs	r1, #45
3284:src/xeq.c     **** 		}
 33862              		.loc 1 3284 17 view .LVU9132
 33863 0e30 2277     		strb	r2, [r4, #28]
3283:src/xeq.c     **** 			CmdLineLength++;
 33864              		.loc 1 3283 15 view .LVU9133
 33865 0e32 84F82010 		strb	r1, [r4, #32]
3284:src/xeq.c     **** 		}
 33866              		.loc 1 3284 4 is_stmt 1 view .LVU9134
 33867 0e36 FFF7CEB9 		b	.L2168
 33868              	.LVL2616:
 33869              	.L2228:
3284:src/xeq.c     **** 		}
 33870              		.loc 1 3284 4 is_stmt 0 view .LVU9135
 33871              	.LBE4247:
 33872              	.LBE4253:
4033:src/xeq.c     **** 		break;
 33873              		.loc 1 4033 4 is_stmt 1 view .LVU9136
 33874 0e3a DFF898B0 		ldr	fp, .L2514+24
 33875 0e3e 3F20     		movs	r0, #63
 33876 0e40 FFF7FEFF 		bl	clrx
 33877              	.LVL2617:
 33878 0e44 DBF80030 		ldr	r3, [fp]
 33879 0e48 FFF7C5B9 		b	.L2168
 33880              	.LVL2618:
 33881              	.L2498:
4033:src/xeq.c     **** 		break;
 33882              		.loc 1 4033 4 is_stmt 0 view .LVU9137
 33883              	.LBE4263:
 33884              	.LBE4595:
 33885              	.LBB4596:
 33886              	.LBB4318:
 33887              	.LBB4311:
 33888              	.LBB4308:
4774:src/xeq.c     **** 					setlastX();
 33889              		.loc 1 4774 7 is_stmt 1 view .LVU9138
 33890 0e4c 5046     		mov	r0, r10
 33891 0e4e FFF7FEFF 		bl	set_NaN
 33892              	.LVL2619:
 33893 0e52 ECE6     		b	.L2271
 33894              	.LVL2620:
 33895              	.L2500:
ARM GAS  /tmp/ccqED0AM.s 			page 854


4774:src/xeq.c     **** 					setlastX();
 33896              		.loc 1 4774 7 is_stmt 0 view .LVU9139
 33897              	.LBE4308:
 33898              	.LBE4311:
 33899              	.LBE4318:
 33900              	.LBE4596:
 33901              	.LBB4597:
 33902              	.LBB4522:
 33903              	.LBB4517:
 33904              	.LBB4516:
4698:src/xeq.c     **** 					setlastX();
 33905              		.loc 1 4698 7 is_stmt 1 view .LVU9140
 33906 0e54 5046     		mov	r0, r10
 33907 0e56 FFF7FEFF 		bl	set_NaN
 33908              	.LVL2621:
 33909 0e5a 49E7     		b	.L2263
 33910              	.LVL2622:
 33911              	.L2502:
4698:src/xeq.c     **** 					setlastX();
 33912              		.loc 1 4698 7 is_stmt 0 view .LVU9141
 33913              	.LBE4516:
 33914              	.LBE4517:
 33915              	.LBE4522:
 33916              	.LBE4597:
 33917              	.LBB4598:
 33918              	.LBB4264:
4029:src/xeq.c     **** 			else if (Cmdline[CmdLineLength] == '.')
 33919              		.loc 1 4029 5 is_stmt 1 view .LVU9142
 33920 0e5c DFF874B0 		ldr	fp, .L2514+24
4029:src/xeq.c     **** 			else if (Cmdline[CmdLineLength] == '.')
 33921              		.loc 1 4029 16 is_stmt 0 view .LVU9143
 33922 0e60 0022     		movs	r2, #0
 33923 0e62 DBF80030 		ldr	r3, [fp]
 33924 0e66 6277     		strb	r2, [r4, #29]
 33925 0e68 FFF7B5B9 		b	.L2168
 33926              	.L2501:
4023:src/xeq.c     **** 				break;
 33927              		.loc 1 4023 5 is_stmt 1 view .LVU9144
 33928 0e6c DFF864B0 		ldr	fp, .L2514+24
4023:src/xeq.c     **** 				break;
 33929              		.loc 1 4023 30 is_stmt 0 view .LVU9145
 33930 0e70 4521     		movs	r1, #69
 33931 0e72 DBF80030 		ldr	r3, [fp]
 33932 0e76 82F82010 		strb	r1, [r2, #32]
4024:src/xeq.c     **** 			}
 33933              		.loc 1 4024 5 is_stmt 1 view .LVU9146
 33934 0e7a FFF7ACB9 		b	.L2168
 33935              	.LVL2623:
 33936              	.L2505:
 33937              	.LBB4254:
 33938              	.LBB4248:
3278:src/xeq.c     **** 				xcopy(Cmdline, Cmdline+1, CmdLineLength);
 33939              		.loc 1 3278 4 view .LVU9147
3278:src/xeq.c     **** 				xcopy(Cmdline, Cmdline+1, CmdLineLength);
 33940              		.loc 1 3278 7 is_stmt 0 view .LVU9148
 33941 0e7e 012A     		cmp	r2, #1
 33942 0e80 03D9     		bls	.L2225
ARM GAS  /tmp/ccqED0AM.s 			page 855


3279:src/xeq.c     **** 			CmdLineLength--;
 33943              		.loc 1 3279 5 is_stmt 1 view .LVU9149
 33944 0e82 1349     		ldr	r1, .L2514+20
 33945 0e84 481E     		subs	r0, r1, #1
 33946 0e86 FFF7FEFF 		bl	xcopy
 33947              	.LVL2624:
 33948              	.L2225:
3280:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
 33949              		.loc 1 3280 4 view .LVU9150
3280:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
 33950              		.loc 1 3280 17 is_stmt 0 view .LVU9151
 33951 0e8a 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 33952 0e8c DFF844B0 		ldr	fp, .L2514+24
 33953 0e90 013B     		subs	r3, r3, #1
 33954 0e92 2377     		strb	r3, [r4, #28]
 33955 0e94 DBF80030 		ldr	r3, [fp]
 33956 0e98 FFF79DB9 		b	.L2168
 33957              	.LVL2625:
 33958              	.L2504:
3280:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
 33959              		.loc 1 3280 17 view .LVU9152
 33960              	.LBE4248:
 33961              	.LBE4254:
4040:src/xeq.c     **** 		    } else {                       //JM
 33962              		.loc 1 4040 9 is_stmt 1 view .LVU9153
 33963              	.LBB4255:
 33964              	.LBI4255:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 33965              		.loc 1 1226 6 view .LVU9154
 33966              	.LBB4256:
1227:src/xeq.c     **** 
 33967              		.loc 1 1227 2 view .LVU9155
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 33968              		.loc 1 1229 2 view .LVU9156
 33969 0e9c DFF834B0 		ldr	fp, .L2514+24
 33970 0ea0 FFF7FEFF 		bl	process_cmdline.part.0
 33971              	.LVL2626:
 33972 0ea4 DBF80030 		ldr	r3, [fp]
 33973 0ea8 FFF795B9 		b	.L2168
 33974              	.LVL2627:
 33975              	.L2219:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 33976              		.loc 1 1229 2 is_stmt 0 view .LVU9157
 33977              	.LBE4256:
 33978              	.LBE4255:
3948:src/xeq.c     **** 			CmdLineDot++;
 33979              		.loc 1 3948 5 is_stmt 1 view .LVU9158
 33980 0eac 0020     		movs	r0, #0
 33981 0eae FFF7FEFF 		bl	digit
 33982              	.LVL2628:
 33983 0eb2 1DE6     		b	.L2220
 33984              	.LVL2629:
 33985              	.L2497:
 33986              	.LBB4257:
3995:src/xeq.c     **** 			CmdLineEex = CmdLineLength;
 33987              		.loc 1 3995 5 view .LVU9159
 33988 0eb4 0120     		movs	r0, #1
ARM GAS  /tmp/ccqED0AM.s 			page 856


 33989 0eb6 FFF7FEFF 		bl	digit
 33990              	.LVL2630:
 33991 0eba 55E6     		b	.L2221
 33992              	.L2515:
 33993              		.align	2
 33994              	.L2514:
 33995 0ebc 00000000 		.word	dyfuncs
 33996 0ec0 00000000 		.word	trifuncs
 33997 0ec4 00000000 		.word	monfuncs
 33998 0ec8 00000000 		.word	XromParams
 33999 0ecc 20000000 		.word	StateWhileOn+32
 34000 0ed0 21000000 		.word	StateWhileOn+33
 34001 0ed4 00000000 		.word	Error
 34002 0ed8 00000000 		.word	XromRunning
 34003 0edc 00000000 		.word	Running
 34004              	.LBE4257:
 34005              	.LBE4264:
 34006              	.LBE4598:
 34007              		.cfi_endproc
 34008              	.LFE251:
 34010              		.section	.text.xeq_single,"ax",%progbits
 34011              		.align	1
 34012              		.p2align 2,,3
 34013              		.syntax unified
 34014              		.thumb
 34015              		.thumb_func
 34016              		.fpu fpv4-sp-d16
 34018              	xeq_single:
 34019              	.LFB252:
5468:src/xeq.c     **** 	const opcode op = getprog(state_pc());
 34020              		.loc 1 5468 30 view -0
 34021              		.cfi_startproc
 34022              		@ args = 0, pretend = 0, frame = 0
 34023              		@ frame_needed = 0, uses_anonymous_args = 0
5469:src/xeq.c     **** 
 34024              		.loc 1 5469 2 view .LVU9161
5469:src/xeq.c     **** 
 34025              		.loc 1 5469 28 is_stmt 0 view .LVU9162
 34026 0000 074B     		ldr	r3, .L2518
 34027 0002 1B68     		ldr	r3, [r3]
5468:src/xeq.c     **** 	const opcode op = getprog(state_pc());
 34028              		.loc 1 5468 30 view .LVU9163
 34029 0004 10B5     		push	{r4, lr}
 34030              		.cfi_def_cfa_offset 8
 34031              		.cfi_offset 4, -8
 34032              		.cfi_offset 14, -4
5469:src/xeq.c     **** 
 34033              		.loc 1 5469 20 view .LVU9164
 34034 0006 B3F8E007 		ldrh	r0, [r3, #2016]
 34035 000a FFF7FEFF 		bl	getprog
 34036              	.LVL2631:
 34037 000e 0446     		mov	r4, r0
 34038              	.LVL2632:
5471:src/xeq.c     **** 	xeq(op);
 34039              		.loc 1 5471 2 is_stmt 1 view .LVU9165
 34040 0010 FFF7FEFF 		bl	incpc
 34041              	.LVL2633:
ARM GAS  /tmp/ccqED0AM.s 			page 857


5472:src/xeq.c     **** }
 34042              		.loc 1 5472 2 view .LVU9166
 34043 0014 2046     		mov	r0, r4
5473:src/xeq.c     **** 
 34044              		.loc 1 5473 1 is_stmt 0 view .LVU9167
 34045 0016 BDE81040 		pop	{r4, lr}
 34046              		.cfi_restore 14
 34047              		.cfi_restore 4
 34048              		.cfi_def_cfa_offset 0
 34049              	.LVL2634:
5472:src/xeq.c     **** }
 34050              		.loc 1 5472 2 view .LVU9168
 34051 001a FFF7FEBF 		b	xeq
 34052              	.LVL2635:
 34053              	.L2519:
5472:src/xeq.c     **** }
 34054              		.loc 1 5472 2 view .LVU9169
 34055 001e 00BF     		.align	2
 34056              	.L2518:
 34057 0020 00000000 		.word	main_ram
 34058              		.cfi_endproc
 34059              	.LFE252:
 34061              		.section	.text.xeq_xrom2,"ax",%progbits
 34062              		.align	1
 34063              		.p2align 2,,3
 34064              		.syntax unified
 34065              		.thumb
 34066              		.thumb_func
 34067              		.fpu fpv4-sp-d16
 34069              	xeq_xrom2:
 34070              	.LFB253:
5480:src/xeq.c     **** #endif
 34071              		.loc 1 5480 29 is_stmt 1 view -0
 34072              		.cfi_startproc
 34073              		@ args = 0, pretend = 0, frame = 0
 34074              		@ frame_needed = 0, uses_anonymous_args = 0
5482:src/xeq.c     **** 	/* Now if we've stepped into the XROM area, keep going until
 34075              		.loc 1 5482 2 view .LVU9171
 34076              	.LVL2636:
5486:src/xeq.c     **** 		XromRunning = 1;
 34077              		.loc 1 5486 4 view .LVU9172
5486:src/xeq.c     **** 		XromRunning = 1;
 34078              		.loc 1 5486 10 view .LVU9173
5480:src/xeq.c     **** #endif
 34079              		.loc 1 5480 29 is_stmt 0 view .LVU9174
 34080 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 34081              		.cfi_def_cfa_offset 32
 34082              		.cfi_offset 4, -32
 34083              		.cfi_offset 5, -28
 34084              		.cfi_offset 6, -24
 34085              		.cfi_offset 7, -20
 34086              		.cfi_offset 8, -16
 34087              		.cfi_offset 9, -12
 34088              		.cfi_offset 10, -8
 34089              		.cfi_offset 14, -4
5486:src/xeq.c     **** 		XromRunning = 1;
 34090              		.loc 1 5486 11 view .LVU9175
ARM GAS  /tmp/ccqED0AM.s 			page 858


 34091 0004 1A4D     		ldr	r5, .L2532
 34092 0006 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5486:src/xeq.c     **** 		XromRunning = 1;
 34093              		.loc 1 5486 10 view .LVU9176
 34094 0008 53BB     		cbnz	r3, .L2520
 34095 000a DFF87080 		ldr	r8, .L2532+12
5487:src/xeq.c     **** 		xeq_single();
 34096              		.loc 1 5487 15 view .LVU9177
 34097 000e 194F     		ldr	r7, .L2532+4
 34098              	.LBB4605:
 34099              	.LBB4606:
4481:src/xeq.c     **** 		Busy = 1;
 34100              		.loc 1 4481 6 view .LVU9178
 34101 0010 DFF86CA0 		ldr	r10, .L2532+16
4481:src/xeq.c     **** 		Busy = 1;
 34102              		.loc 1 4481 15 view .LVU9179
 34103 0014 DFF86C90 		ldr	r9, .L2532+20
 34104 0018 03F0FF04 		and	r4, r3, #255
 34105              	.LVL2637:
 34106              	.L2521:
4481:src/xeq.c     **** 		Busy = 1;
 34107              		.loc 1 4481 15 view .LVU9180
 34108              	.LBE4606:
 34109              	.LBE4605:
5487:src/xeq.c     **** 		xeq_single();
 34110              		.loc 1 5487 3 is_stmt 1 view .LVU9181
 34111              	.LBB4613:
 34112              	.LBI4613:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 34113              		.loc 1 185 5 view .LVU9182
 34114              	.LBB4614:
 186:src/xeq.c     **** }
 34115              		.loc 1 186 2 view .LVU9183
 186:src/xeq.c     **** }
 34116              		.loc 1 186 9 is_stmt 0 view .LVU9184
 34117 001c D8F80020 		ldr	r2, [r8]
 34118 0020 B2F8E037 		ldrh	r3, [r2, #2016]
 34119              	.LBE4614:
 34120              	.LBE4613:
5486:src/xeq.c     **** 		XromRunning = 1;
 34121              		.loc 1 5486 18 view .LVU9185
 34122 0024 9B0B     		lsrs	r3, r3, #14
5487:src/xeq.c     **** 		xeq_single();
 34123              		.loc 1 5487 15 view .LVU9186
 34124 0026 0126     		movs	r6, #1
5486:src/xeq.c     **** 		XromRunning = 1;
 34125              		.loc 1 5486 18 view .LVU9187
 34126 0028 032B     		cmp	r3, #3
5490:src/xeq.c     **** 			busy();
 34127              		.loc 1 5490 6 view .LVU9188
 34128 002a 3444     		add	r4, r4, r6
 34129              	.LVL2638:
5486:src/xeq.c     **** 		XromRunning = 1;
 34130              		.loc 1 5486 18 view .LVU9189
 34131 002c 18D1     		bne	.L2520
5486:src/xeq.c     **** 		XromRunning = 1;
 34132              		.loc 1 5486 31 discriminator 2 view .LVU9190
ARM GAS  /tmp/ccqED0AM.s 			page 859


 34133 002e B2F9E237 		ldrsh	r3, [r2, #2018]
 34134 0032 ABB1     		cbz	r3, .L2520
5487:src/xeq.c     **** 		xeq_single();
 34135              		.loc 1 5487 15 view .LVU9191
 34136 0034 3E60     		str	r6, [r7]
5488:src/xeq.c     **** 		XromRunning = 0;
 34137              		.loc 1 5488 3 is_stmt 1 view .LVU9192
 34138 0036 FFF7FEFF 		bl	xeq_single
 34139              	.LVL2639:
5489:src/xeq.c     **** 		if ((++count & 31) == 0)
 34140              		.loc 1 5489 3 view .LVU9193
 34141              	.LBB4615:
 34142              	.LBB4609:
4481:src/xeq.c     **** 		Busy = 1;
 34143              		.loc 1 4481 12 is_stmt 0 view .LVU9194
 34144 003a D9F80030 		ldr	r3, [r9]
 34145 003e DAF80010 		ldr	r1, [r10]
 34146 0042 1943     		orrs	r1, r1, r3
 34147              	.LBE4609:
 34148              	.LBE4615:
5490:src/xeq.c     **** 			busy();
 34149              		.loc 1 5490 16 view .LVU9195
 34150 0044 04F01F03 		and	r3, r4, #31
5489:src/xeq.c     **** 		if ((++count & 31) == 0)
 34151              		.loc 1 5489 15 view .LVU9196
 34152 0048 0022     		movs	r2, #0
 34153              	.LBB4616:
 34154              	.LBB4610:
4481:src/xeq.c     **** 		Busy = 1;
 34155              		.loc 1 4481 12 view .LVU9197
 34156 004a 1943     		orrs	r1, r1, r3
 34157              	.LBE4610:
 34158              	.LBE4616:
5489:src/xeq.c     **** 		if ((++count & 31) == 0)
 34159              		.loc 1 5489 15 view .LVU9198
 34160 004c 3A60     		str	r2, [r7]
5490:src/xeq.c     **** 			busy();
 34161              		.loc 1 5490 3 is_stmt 1 view .LVU9199
 34162              	.LVL2640:
5491:src/xeq.c     **** 		  if (Pause)
 34163              		.loc 1 5491 4 view .LVU9200
 34164              	.LBB4617:
 34165              	.LBI4605:
4466:src/xeq.c     **** {
 34166              		.loc 1 4466 6 view .LVU9201
 34167              	.LBB4611:
4471:src/xeq.c     **** 
 34168              		.loc 1 4471 12 view .LVU9202
4476:src/xeq.c     **** 
 34169              		.loc 1 4476 17 view .LVU9203
4481:src/xeq.c     **** 		Busy = 1;
 34170              		.loc 1 4481 2 view .LVU9204
4481:src/xeq.c     **** 		Busy = 1;
 34171              		.loc 1 4481 12 is_stmt 0 view .LVU9205
 34172 004e 09D0     		beq	.L2531
 34173              	.L2522:
 34174              	.LBE4611:
ARM GAS  /tmp/ccqED0AM.s 			page 860


 34175              	.LBE4617:
5492:src/xeq.c     **** 			// Special case: WHO has a PSE built in.
 34176              		.loc 1 5492 5 is_stmt 1 view .LVU9206
5495:src/xeq.c     **** 		
 34177              		.loc 1 5495 4 view .LVU9207
5486:src/xeq.c     **** 		XromRunning = 1;
 34178              		.loc 1 5486 10 view .LVU9208
5492:src/xeq.c     **** 			// Special case: WHO has a PSE built in.
 34179              		.loc 1 5492 9 is_stmt 0 view .LVU9209
 34180 0050 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
5486:src/xeq.c     **** 		XromRunning = 1;
 34181              		.loc 1 5486 11 view .LVU9210
 34182 0052 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5492:src/xeq.c     **** 			// Special case: WHO has a PSE built in.
 34183              		.loc 1 5492 8 view .LVU9211
 34184 0054 12B1     		cbz	r2, .L2523
5495:src/xeq.c     **** 		
 34185              		.loc 1 5495 12 view .LVU9212
 34186 0056 0122     		movs	r2, #1
 34187 0058 C9F80020 		str	r2, [r9]
 34188              	.L2523:
5486:src/xeq.c     **** 		XromRunning = 1;
 34189              		.loc 1 5486 10 view .LVU9213
 34190 005c 002B     		cmp	r3, #0
 34191 005e DDD0     		beq	.L2521
 34192              	.LVL2641:
 34193              	.L2520:
5498:src/xeq.c     **** 
 34194              		.loc 1 5498 1 view .LVU9214
 34195 0060 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 34196              	.LVL2642:
 34197              	.L2531:
 34198              	.LBB4618:
 34199              	.LBB4612:
 34200              	.LBB4607:
 34201              	.LBI4607:
4466:src/xeq.c     **** {
 34202              		.loc 1 4466 6 is_stmt 1 view .LVU9215
 34203              	.LBB4608:
4482:src/xeq.c     **** 		message("Wait...", NULL);
 34204              		.loc 1 4482 3 view .LVU9216
4483:src/xeq.c     **** 	}
 34205              		.loc 1 4483 3 is_stmt 0 view .LVU9217
 34206 0064 0448     		ldr	r0, .L2532+8
4482:src/xeq.c     **** 		message("Wait...", NULL);
 34207              		.loc 1 4482 8 view .LVU9218
 34208 0066 CAF80060 		str	r6, [r10]
4483:src/xeq.c     **** 	}
 34209              		.loc 1 4483 3 is_stmt 1 view .LVU9219
 34210 006a FFF7FEFF 		bl	message
 34211              	.LVL2643:
4485:src/xeq.c     **** 
 34212              		.loc 1 4485 1 is_stmt 0 view .LVU9220
 34213 006e EFE7     		b	.L2522
 34214              	.L2533:
 34215              		.align	2
 34216              	.L2532:
ARM GAS  /tmp/ccqED0AM.s 			page 861


 34217 0070 00000000 		.word	Pause
 34218 0074 00000000 		.word	XromRunning
 34219 0078 00000000 		.word	.LC7
 34220 007c 00000000 		.word	main_ram
 34221 0080 00000000 		.word	Busy
 34222 0084 00000000 		.word	Running
 34223              	.LBE4608:
 34224              	.LBE4607:
 34225              	.LBE4612:
 34226              	.LBE4618:
 34227              		.cfi_endproc
 34228              	.LFE253:
 34230              		.section	.text.xeq_xrom,"ax",%progbits
 34231              		.align	1
 34232              		.p2align 2,,3
 34233              		.global	xeq_xrom
 34234              		.syntax unified
 34235              		.thumb
 34236              		.thumb_func
 34237              		.fpu fpv4-sp-d16
 34239              	xeq_xrom:
 34240              	.LFB254:
5501:src/xeq.c     **** 	// We split the routine in two parts for debugging only
 34241              		.loc 1 5501 21 is_stmt 1 view -0
 34242              		.cfi_startproc
 34243              		@ args = 0, pretend = 0, frame = 0
 34244              		@ frame_needed = 0, uses_anonymous_args = 0
 34245              		@ link register save eliminated.
5503:src/xeq.c     **** 		xeq_xrom2();
 34246              		.loc 1 5503 2 view .LVU9222
5503:src/xeq.c     **** 		xeq_xrom2();
 34247              		.loc 1 5503 6 is_stmt 0 view .LVU9223
 34248 0000 034B     		ldr	r3, .L2537
5503:src/xeq.c     **** 		xeq_xrom2();
 34249              		.loc 1 5503 5 view .LVU9224
 34250 0002 93F91730 		ldrsb	r3, [r3, #23]
 34251 0006 002B     		cmp	r3, #0
 34252 0008 00DA     		bge	.L2536
5505:src/xeq.c     **** #endif
 34253              		.loc 1 5505 1 view .LVU9225
 34254 000a 7047     		bx	lr
 34255              	.L2536:
5504:src/xeq.c     **** }
 34256              		.loc 1 5504 3 is_stmt 1 view .LVU9226
 34257 000c FFF7FEBF 		b	xeq_xrom2
 34258              	.LVL2644:
 34259              	.L2538:
 34260              		.align	2
 34261              	.L2537:
 34262 0010 00000000 		.word	StateWhileOn
 34263              		.cfi_endproc
 34264              	.LFE254:
 34266              		.section	.text.dispatch_xrom,"ax",%progbits
 34267              		.align	1
 34268              		.p2align 2,,3
 34269              		.syntax unified
 34270              		.thumb
ARM GAS  /tmp/ccqED0AM.s 			page 862


 34271              		.thumb_func
 34272              		.fpu fpv4-sp-d16
 34274              	dispatch_xrom:
 34275              	.LVL2645:
 34276              	.LFB238:
4518:src/xeq.c     **** 	const s_opcode *xp = check_for_xrom_address(fp);
 34277              		.loc 1 4518 1 view -0
 34278              		.cfi_startproc
 34279              		@ args = 0, pretend = 0, frame = 0
 34280              		@ frame_needed = 0, uses_anonymous_args = 0
4519:src/xeq.c     **** 	if (xp == NULL)
 34281              		.loc 1 4519 2 view .LVU9228
 34282              	.LBB4619:
 34283              	.LBI4619:
4501:src/xeq.c     **** {
 34284              		.loc 1 4501 24 view .LVU9229
 34285              	.LBB4620:
4503:src/xeq.c     **** 	if (xp < xrom)
 34286              		.loc 1 4503 2 view .LVU9230
4504:src/xeq.c     **** 		return NULL;
 34287              		.loc 1 4504 5 is_stmt 0 view .LVU9231
 34288 0000 1749     		ldr	r1, .L2550
4503:src/xeq.c     **** 	if (xp < xrom)
 34289              		.loc 1 4503 59 view .LVU9232
 34290 0002 20F00100 		bic	r0, r0, #1
 34291              	.LVL2646:
4504:src/xeq.c     **** 		return NULL;
 34292              		.loc 1 4504 2 is_stmt 1 view .LVU9233
4504:src/xeq.c     **** 		return NULL;
 34293              		.loc 1 4504 5 is_stmt 0 view .LVU9234
 34294 0006 8842     		cmp	r0, r1
 34295 0008 24D3     		bcc	.L2542
4508:src/xeq.c     **** 		return NULL;
 34296              		.loc 1 4508 2 is_stmt 1 view .LVU9235
4508:src/xeq.c     **** 		return NULL;
 34297              		.loc 1 4508 17 is_stmt 0 view .LVU9236
 34298 000a 164B     		ldr	r3, .L2550+4
 34299 000c 1B88     		ldrh	r3, [r3]
 34300 000e 01EB4303 		add	r3, r1, r3, lsl #1
4508:src/xeq.c     **** 		return NULL;
 34301              		.loc 1 4508 5 view .LVU9237
 34302 0012 9842     		cmp	r0, r3
 34303 0014 1ED2     		bcs	.L2542
 34304              	.LVL2647:
4508:src/xeq.c     **** 		return NULL;
 34305              		.loc 1 4508 5 view .LVU9238
 34306              	.LBE4620:
 34307              	.LBE4619:
4520:src/xeq.c     **** 		return 0;
 34308              		.loc 1 4520 2 is_stmt 1 view .LVU9239
4520:src/xeq.c     **** 		return 0;
 34309              		.loc 1 4520 5 is_stmt 0 view .LVU9240
 34310 0016 E0B1     		cbz	r0, .L2546
4523:src/xeq.c     **** 	XromRunning = 1;
 34311              		.loc 1 4523 2 is_stmt 1 view .LVU9241
4523:src/xeq.c     **** 	XromRunning = 1;
 34312              		.loc 1 4523 18 is_stmt 0 view .LVU9242
ARM GAS  /tmp/ccqED0AM.s 			page 863


 34313 0018 134B     		ldr	r3, .L2550+8
 34314 001a 1A68     		ldr	r2, [r3]
4525:src/xeq.c     **** 	xeq_xrom();
 34315              		.loc 1 4525 9 view .LVU9243
 34316 001c 401A     		subs	r0, r0, r1
 34317              	.LVL2648:
4523:src/xeq.c     **** 	XromRunning = 1;
 34318              		.loc 1 4523 18 view .LVU9244
 34319 001e B2F8DE37 		ldrh	r3, [r2, #2014]
4525:src/xeq.c     **** 	xeq_xrom();
 34320              		.loc 1 4525 2 view .LVU9245
 34321 0022 B2F8E027 		ldrh	r2, [r2, #2016]
4525:src/xeq.c     **** 	xeq_xrom();
 34322              		.loc 1 4525 9 view .LVU9246
 34323 0026 4010     		asrs	r0, r0, #1
 34324              	.LVL2649:
4518:src/xeq.c     **** 	const s_opcode *xp = check_for_xrom_address(fp);
 34325              		.loc 1 4518 1 view .LVU9247
 34326 0028 70B5     		push	{r4, r5, r6, lr}
 34327              		.cfi_def_cfa_offset 16
 34328              		.cfi_offset 4, -16
 34329              		.cfi_offset 5, -12
 34330              		.cfi_offset 6, -8
 34331              		.cfi_offset 14, -4
4525:src/xeq.c     **** 	xeq_xrom();
 34332              		.loc 1 4525 9 view .LVU9248
 34333 002a 0130     		adds	r0, r0, #1
4524:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
 34334              		.loc 1 4524 14 view .LVU9249
 34335 002c 0124     		movs	r4, #1
4523:src/xeq.c     **** 	XromRunning = 1;
 34336              		.loc 1 4523 16 view .LVU9250
 34337 002e 0F4E     		ldr	r6, .L2550+12
4524:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
 34338              		.loc 1 4524 14 view .LVU9251
 34339 0030 0F4D     		ldr	r5, .L2550+16
4523:src/xeq.c     **** 	XromRunning = 1;
 34340              		.loc 1 4523 18 view .LVU9252
 34341 0032 43F34A13 		sbfx	r3, r3, #5, #11
4525:src/xeq.c     **** 	xeq_xrom();
 34342              		.loc 1 4525 2 view .LVU9253
 34343 0036 40F44040 		orr	r0, r0, #49152
 34344 003a 2146     		mov	r1, r4
4523:src/xeq.c     **** 	XromRunning = 1;
 34345              		.loc 1 4523 18 view .LVU9254
 34346 003c 3360     		str	r3, [r6]
4524:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
 34347              		.loc 1 4524 2 is_stmt 1 view .LVU9255
4524:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
 34348              		.loc 1 4524 14 is_stmt 0 view .LVU9256
 34349 003e 2C60     		str	r4, [r5]
4525:src/xeq.c     **** 	xeq_xrom();
 34350              		.loc 1 4525 2 is_stmt 1 view .LVU9257
 34351 0040 FFF7FEFF 		bl	gsbgto
 34352              	.LVL2650:
4526:src/xeq.c     **** 	//	print_debug(999,0);
 34353              		.loc 1 4526 2 view .LVU9258
ARM GAS  /tmp/ccqED0AM.s 			page 864


 34354              	.LBB4621:
 34355              	.LBI4621:
5501:src/xeq.c     **** 	// We split the routine in two parts for debugging only
 34356              		.loc 1 5501 6 view .LVU9259
 34357              	.LBB4622:
5503:src/xeq.c     **** 		xeq_xrom2();
 34358              		.loc 1 5503 2 view .LVU9260
5503:src/xeq.c     **** 		xeq_xrom2();
 34359              		.loc 1 5503 6 is_stmt 0 view .LVU9261
 34360 0044 0B4B     		ldr	r3, .L2550+20
5503:src/xeq.c     **** 		xeq_xrom2();
 34361              		.loc 1 5503 5 view .LVU9262
 34362 0046 93F91730 		ldrsb	r3, [r3, #23]
 34363 004a 002B     		cmp	r3, #0
 34364 004c 04DA     		bge	.L2549
 34365              	.LBE4622:
 34366              	.LBE4621:
4528:src/xeq.c     **** }
 34367              		.loc 1 4528 9 view .LVU9263
 34368 004e 2046     		mov	r0, r4
 34369              	.LVL2651:
4529:src/xeq.c     **** 
 34370              		.loc 1 4529 1 view .LVU9264
 34371 0050 70BD     		pop	{r4, r5, r6, pc}
 34372              	.LVL2652:
 34373              	.L2546:
 34374              		.cfi_def_cfa_offset 0
 34375              		.cfi_restore 4
 34376              		.cfi_restore 5
 34377              		.cfi_restore 6
 34378              		.cfi_restore 14
4529:src/xeq.c     **** 
 34379              		.loc 1 4529 1 view .LVU9265
 34380 0052 7047     		bx	lr
 34381              	.LVL2653:
 34382              	.L2542:
4521:src/xeq.c     **** 	// set_lift();
 34383              		.loc 1 4521 10 view .LVU9266
 34384 0054 0020     		movs	r0, #0
 34385              	.LVL2654:
4521:src/xeq.c     **** 	// set_lift();
 34386              		.loc 1 4521 10 view .LVU9267
 34387 0056 7047     		bx	lr
 34388              	.LVL2655:
 34389              	.L2549:
 34390              		.cfi_def_cfa_offset 16
 34391              		.cfi_offset 4, -16
 34392              		.cfi_offset 5, -12
 34393              		.cfi_offset 6, -8
 34394              		.cfi_offset 14, -4
 34395              	.LBB4624:
 34396              	.LBB4623:
5504:src/xeq.c     **** }
 34397              		.loc 1 5504 3 is_stmt 1 view .LVU9268
 34398 0058 FFF7FEFF 		bl	xeq_xrom2
 34399              	.LVL2656:
 34400              	.LBE4623:
ARM GAS  /tmp/ccqED0AM.s 			page 865


 34401              	.LBE4624:
4528:src/xeq.c     **** }
 34402              		.loc 1 4528 9 is_stmt 0 view .LVU9269
 34403 005c 2046     		mov	r0, r4
4529:src/xeq.c     **** 
 34404              		.loc 1 4529 1 view .LVU9270
 34405 005e 70BD     		pop	{r4, r5, r6, pc}
 34406              	.L2551:
 34407              		.align	2
 34408              	.L2550:
 34409 0060 00000000 		.word	xrom
 34410 0064 00000000 		.word	xrom_size
 34411 0068 00000000 		.word	main_ram
 34412 006c 00000000 		.word	UserLocalRegs
 34413 0070 00000000 		.word	XromRunning
 34414 0074 00000000 		.word	StateWhileOn
 34415              		.cfi_endproc
 34416              	.LFE238:
 34418              		.section	.text.op_rs,"ax",%progbits
 34419              		.align	1
 34420              		.p2align 2,,3
 34421              		.global	op_rs
 34422              		.syntax unified
 34423              		.thumb
 34424              		.thumb_func
 34425              		.fpu fpv4-sp-d16
 34427              	op_rs:
 34428              	.LVL2657:
 34429              	.LFB257:
5601:src/xeq.c     **** #ifndef REALBUILD
 34430              		.loc 1 5601 27 is_stmt 1 view -0
 34431              		.cfi_startproc
 34432              		@ args = 0, pretend = 0, frame = 0
 34433              		@ frame_needed = 0, uses_anonymous_args = 0
5605:src/xeq.c     **** 		if (State2.trace && (Running || XromRunning)) {
 34434              		.loc 1 5605 2 view .LVU9272
 34435              	.LBB4625:
 34436              	.LBI4625:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 34437              		.loc 1 185 5 view .LVU9273
 34438              	.LBB4626:
 186:src/xeq.c     **** }
 34439              		.loc 1 186 2 view .LVU9274
 34440              	.LBE4626:
 34441              	.LBE4625:
5601:src/xeq.c     **** #ifndef REALBUILD
 34442              		.loc 1 5601 27 is_stmt 0 view .LVU9275
 34443 0000 10B5     		push	{r4, lr}
 34444              		.cfi_def_cfa_offset 8
 34445              		.cfi_offset 4, -8
 34446              		.cfi_offset 14, -4
 34447              	.LBB4628:
 34448              	.LBB4627:
 186:src/xeq.c     **** }
 34449              		.loc 1 186 9 view .LVU9276
 34450 0002 1D4C     		ldr	r4, .L2562
 34451 0004 2268     		ldr	r2, [r4]
ARM GAS  /tmp/ccqED0AM.s 			page 866


 34452 0006 B2F8E037 		ldrh	r3, [r2, #2016]
 34453              	.LBE4627:
 34454              	.LBE4628:
5605:src/xeq.c     **** 		if (State2.trace && (Running || XromRunning)) {
 34455              		.loc 1 5605 5 view .LVU9277
 34456 000a 9B0B     		lsrs	r3, r3, #14
 34457 000c 032B     		cmp	r3, #3
 34458 000e 20D0     		beq	.L2561
5615:src/xeq.c     **** 		set_running_off();
 34459              		.loc 1 5615 2 is_stmt 1 view .LVU9278
5615:src/xeq.c     **** 		set_running_off();
 34460              		.loc 1 5615 6 is_stmt 0 view .LVU9279
 34461 0010 1A4B     		ldr	r3, .L2562+4
5615:src/xeq.c     **** 		set_running_off();
 34462              		.loc 1 5615 5 view .LVU9280
 34463 0012 1968     		ldr	r1, [r3]
 34464 0014 61B1     		cbz	r1, .L2556
5616:src/xeq.c     **** 	else {
 34465              		.loc 1 5616 3 is_stmt 1 view .LVU9281
 34466              	.LBB4629:
 34467              	.LBI4629:
5818:src/xeq.c     **** 	set_running_off_sst();
 34468              		.loc 1 5818 6 view .LVU9282
 34469              	.LBB4630:
5819:src/xeq.c     **** 	State.entryp = 0;
 34470              		.loc 1 5819 2 view .LVU9283
 34471              	.LBB4631:
 34472              	.LBI4631:
5810:src/xeq.c     **** 	Running = 0;
 34473              		.loc 1 5810 6 view .LVU9284
 34474              	.LBB4632:
5811:src/xeq.c     **** }
 34475              		.loc 1 5811 2 view .LVU9285
5811:src/xeq.c     **** }
 34476              		.loc 1 5811 10 is_stmt 0 view .LVU9286
 34477 0016 0021     		movs	r1, #0
 34478 0018 1960     		str	r1, [r3]
 34479              	.LBE4632:
 34480              	.LBE4631:
5820:src/xeq.c     **** 	dot( RCL_annun, 0);
 34481              		.loc 1 5820 2 is_stmt 1 view .LVU9287
5820:src/xeq.c     **** 	dot( RCL_annun, 0);
 34482              		.loc 1 5820 15 is_stmt 0 view .LVU9288
 34483 001a 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
 34484 001e 61F30413 		bfi	r3, r1, #4, #1
 34485 0022 82F8DD37 		strb	r3, [r2, #2013]
5821:src/xeq.c     **** }
 34486              		.loc 1 5821 2 is_stmt 1 view .LVU9289
 34487              	.LBE4630:
 34488              	.LBE4629:
5622:src/xeq.c     **** 
 34489              		.loc 1 5622 1 is_stmt 0 view .LVU9290
 34490 0026 BDE81040 		pop	{r4, lr}
 34491              		.cfi_remember_state
 34492              		.cfi_restore 14
 34493              		.cfi_restore 4
 34494              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccqED0AM.s 			page 867


 34495              	.LBB4634:
 34496              	.LBB4633:
5821:src/xeq.c     **** }
 34497              		.loc 1 5821 2 view .LVU9291
 34498 002a 8A20     		movs	r0, #138
 34499              	.LVL2658:
5821:src/xeq.c     **** }
 34500              		.loc 1 5821 2 view .LVU9292
 34501 002c FFF7FEBF 		b	dot
 34502              	.LVL2659:
 34503              	.L2556:
 34504              		.cfi_restore_state
5821:src/xeq.c     **** }
 34505              		.loc 1 5821 2 view .LVU9293
 34506              	.LBE4633:
 34507              	.LBE4634:
5618:src/xeq.c     **** 		if (RetStkPtr == 0)
 34508              		.loc 1 5618 3 is_stmt 1 view .LVU9294
 34509 0030 FFF7FEFF 		bl	set_running_on
 34510              	.LVL2660:
5619:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
 34511              		.loc 1 5619 3 view .LVU9295
5619:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
 34512              		.loc 1 5619 7 is_stmt 0 view .LVU9296
 34513 0034 2368     		ldr	r3, [r4]
5619:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
 34514              		.loc 1 5619 6 view .LVU9297
 34515 0036 B3F9E227 		ldrsh	r2, [r3, #2018]
 34516 003a 4AB9     		cbnz	r2, .L2552
5620:src/xeq.c     **** 	}
 34517              		.loc 1 5620 4 is_stmt 1 view .LVU9298
5620:src/xeq.c     **** 	}
 34518              		.loc 1 5620 10 is_stmt 0 view .LVU9299
 34519 003c 104A     		ldr	r2, .L2562+8
5620:src/xeq.c     **** 	}
 34520              		.loc 1 5620 26 view .LVU9300
 34521 003e B3F8E017 		ldrh	r1, [r3, #2016]
5620:src/xeq.c     **** 	}
 34522              		.loc 1 5620 10 view .LVU9301
 34523 0042 1268     		ldr	r2, [r2]
5620:src/xeq.c     **** 	}
 34524              		.loc 1 5620 24 view .LVU9302
 34525 0044 4FF6FF70 		movw	r0, #65535
 34526 0048 A3F8E207 		strh	r0, [r3, #2018]	@ movhi
 34527 004c 22F8021C 		strh	r1, [r2, #-2]	@ movhi
 34528              	.L2552:
5622:src/xeq.c     **** 
 34529              		.loc 1 5622 1 view .LVU9303
 34530 0050 10BD     		pop	{r4, pc}
 34531              	.LVL2661:
 34532              	.L2561:
5606:src/xeq.c     **** 			Running = XromRunning = 0;
 34533              		.loc 1 5606 3 is_stmt 1 view .LVU9304
5606:src/xeq.c     **** 			Running = XromRunning = 0;
 34534              		.loc 1 5606 7 is_stmt 0 view .LVU9305
 34535 0052 0C4B     		ldr	r3, .L2562+12
5606:src/xeq.c     **** 			Running = XromRunning = 0;
ARM GAS  /tmp/ccqED0AM.s 			page 868


 34536              		.loc 1 5606 6 view .LVU9306
 34537 0054 93F91730 		ldrsb	r3, [r3, #23]
 34538 0058 002B     		cmp	r3, #0
 34539 005a 09DA     		bge	.L2554
5606:src/xeq.c     **** 			Running = XromRunning = 0;
 34540              		.loc 1 5606 24 discriminator 1 view .LVU9307
 34541 005c 074B     		ldr	r3, .L2562+4
5606:src/xeq.c     **** 			Running = XromRunning = 0;
 34542              		.loc 1 5606 32 discriminator 1 view .LVU9308
 34543 005e 0A4A     		ldr	r2, .L2562+16
 34544 0060 1868     		ldr	r0, [r3]
 34545              	.LVL2662:
5606:src/xeq.c     **** 			Running = XromRunning = 0;
 34546              		.loc 1 5606 32 discriminator 1 view .LVU9309
 34547 0062 1168     		ldr	r1, [r2]
 34548 0064 0143     		orrs	r1, r0, r1
 34549 0066 03D0     		beq	.L2554
5607:src/xeq.c     **** 		}
 34550              		.loc 1 5607 4 is_stmt 1 view .LVU9310
5607:src/xeq.c     **** 		}
 34551              		.loc 1 5607 26 is_stmt 0 view .LVU9311
 34552 0068 0021     		movs	r1, #0
 34553 006a 1160     		str	r1, [r2]
5607:src/xeq.c     **** 		}
 34554              		.loc 1 5607 12 view .LVU9312
 34555 006c 1960     		str	r1, [r3]
5622:src/xeq.c     **** 
 34556              		.loc 1 5622 1 view .LVU9313
 34557 006e 10BD     		pop	{r4, pc}
 34558              	.L2554:
5610:src/xeq.c     **** 		}
 34559              		.loc 1 5610 4 is_stmt 1 view .LVU9314
5622:src/xeq.c     **** 
 34560              		.loc 1 5622 1 is_stmt 0 view .LVU9315
 34561 0070 BDE81040 		pop	{r4, lr}
 34562              		.cfi_restore 14
 34563              		.cfi_restore 4
 34564              		.cfi_def_cfa_offset 0
5610:src/xeq.c     **** 		}
 34565              		.loc 1 5610 4 view .LVU9316
 34566 0074 FFF7FEBF 		b	xeq_xrom2
 34567              	.LVL2663:
 34568              	.L2563:
 34569              		.align	2
 34570              	.L2562:
 34571 0078 00000000 		.word	main_ram
 34572 007c 00000000 		.word	Running
 34573 0080 00000000 		.word	RetStk
 34574 0084 00000000 		.word	StateWhileOn
 34575 0088 00000000 		.word	XromRunning
 34576              		.cfi_endproc
 34577              	.LFE257:
 34579              		.section	.text.xeqprog,"ax",%progbits
 34580              		.align	1
 34581              		.p2align 2,,3
 34582              		.global	xeqprog
 34583              		.syntax unified
ARM GAS  /tmp/ccqED0AM.s 			page 869


 34584              		.thumb
 34585              		.thumb_func
 34586              		.fpu fpv4-sp-d16
 34588              	xeqprog:
 34589              	.LFB255:
5517:src/xeq.c     ****    int state = 0;
 34590              		.loc 1 5517 2 is_stmt 1 view -0
 34591              		.cfi_startproc
 34592              		@ args = 0, pretend = 0, frame = 0
 34593              		@ frame_needed = 0, uses_anonymous_args = 0
5518:src/xeq.c     ****    if (Running || Pause) {
 34594              		.loc 1 5518 4 view .LVU9318
 34595              	.LVL2664:
5519:src/xeq.c     **** 
 34596              		.loc 1 5519 4 view .LVU9319
5517:src/xeq.c     ****    int state = 0;
 34597              		.loc 1 5517 2 is_stmt 0 view .LVU9320
 34598 0000 38B5     		push	{r3, r4, r5, lr}
 34599              		.cfi_def_cfa_offset 16
 34600              		.cfi_offset 3, -16
 34601              		.cfi_offset 4, -12
 34602              		.cfi_offset 5, -8
 34603              		.cfi_offset 14, -4
5519:src/xeq.c     **** 
 34604              		.loc 1 5519 8 view .LVU9321
 34605 0002 194C     		ldr	r4, .L2589
 34606 0004 194D     		ldr	r5, .L2589+4
5519:src/xeq.c     **** 
 34607              		.loc 1 5519 7 view .LVU9322
 34608 0006 2368     		ldr	r3, [r4]
 34609 0008 0BB9     		cbnz	r3, .L2565
5519:src/xeq.c     **** 
 34610              		.loc 1 5519 16 discriminator 1 view .LVU9323
 34611 000a 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 34612 000c 9BB1     		cbz	r3, .L2570
 34613              	.L2565:
5525:src/xeq.c     **** #endif
 34614              		.loc 1 5525 6 is_stmt 1 view .LVU9324
 34615              	.LVL2665:
5528:src/xeq.c     ****      lcd_refresh();
 34616              		.loc 1 5528 6 view .LVU9325
 34617 000e 0121     		movs	r1, #1
 34618 0010 8A20     		movs	r0, #138
 34619 0012 FFF7FEFF 		bl	dot
 34620              	.LVL2666:
5529:src/xeq.c     ****      
 34621              		.loc 1 5529 6 view .LVU9326
 34622 0016 164B     		ldr	r3, .L2589+8
 34623 0018 9847     		blx	r3
 34624              	.LVL2667:
5531:src/xeq.c     ****        xeq_single();
 34625              		.loc 1 5531 6 view .LVU9327
5531:src/xeq.c     ****        xeq_single();
 34626              		.loc 1 5531 12 is_stmt 0 view .LVU9328
 34627 001a 06E0     		b	.L2567
 34628              	.L2587:
5531:src/xeq.c     ****        xeq_single();
ARM GAS  /tmp/ccqED0AM.s 			page 870


 34629              		.loc 1 5531 21 discriminator 1 view .LVU9329
 34630 001c 2368     		ldr	r3, [r4]
 34631 001e 53B1     		cbz	r3, .L2570
5532:src/xeq.c     ****        //       if (is_key_pressed() || (Ticker != last_ticker)) // flashes but empty loop 1/3 the 
 34632              		.loc 1 5532 8 view .LVU9330
 34633 0020 FFF7FEFF 		bl	xeq_single
 34634              	.LVL2668:
5534:src/xeq.c     **** 	 {
 34635              		.loc 1 5534 8 is_stmt 1 view .LVU9331
5534:src/xeq.c     **** 	 {
 34636              		.loc 1 5534 12 is_stmt 0 view .LVU9332
 34637 0024 FFF7FEFF 		bl	is_key_pressed
 34638              	.LVL2669:
5534:src/xeq.c     **** 	 {
 34639              		.loc 1 5534 11 view .LVU9333
 34640 0028 10B9     		cbnz	r0, .L2568
 34641              	.L2567:
5532:src/xeq.c     ****        //       if (is_key_pressed() || (Ticker != last_ticker)) // flashes but empty loop 1/3 the 
 34642              		.loc 1 5532 8 is_stmt 1 view .LVU9334
5531:src/xeq.c     ****        xeq_single();
 34643              		.loc 1 5531 12 view .LVU9335
5531:src/xeq.c     ****        xeq_single();
 34644              		.loc 1 5531 13 is_stmt 0 view .LVU9336
 34645 002a 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5531:src/xeq.c     ****        xeq_single();
 34646              		.loc 1 5531 12 view .LVU9337
 34647 002c 002B     		cmp	r3, #0
 34648 002e F5D0     		beq	.L2587
 34649              	.L2568:
5543:src/xeq.c     ****      // Program has terminated
 34650              		.loc 1 5543 4 is_stmt 1 view .LVU9338
5543:src/xeq.c     ****      // Program has terminated
 34651              		.loc 1 5543 7 is_stmt 0 view .LVU9339
 34652 0030 2368     		ldr	r3, [r4]
 34653 0032 03B1     		cbz	r3, .L2570
 34654              	.LVL2670:
 34655              	.L2564:
5559:src/xeq.c     **** 
 34656              		.loc 1 5559 2 view .LVU9340
 34657 0034 38BD     		pop	{r3, r4, r5, pc}
 34658              	.L2570:
5543:src/xeq.c     ****      // Program has terminated
 34659              		.loc 1 5543 4 is_stmt 1 view .LVU9341
5543:src/xeq.c     ****      // Program has terminated
 34660              		.loc 1 5543 21 is_stmt 0 view .LVU9342
 34661 0036 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5543:src/xeq.c     ****      // Program has terminated
 34662              		.loc 1 5543 18 view .LVU9343
 34663 0038 002B     		cmp	r3, #0
 34664 003a FBD1     		bne	.L2564
5545:src/xeq.c     ****      ShowRPN = 1; // display() may turn it off again
 34665              		.loc 1 5545 6 is_stmt 1 view .LVU9344
 34666 003c 8A20     		movs	r0, #138
5546:src/xeq.c     ****      lcd_refresh(); // put here to turn off the RCL annunciator
 34667              		.loc 1 5546 14 is_stmt 0 view .LVU9345
 34668 003e 0D4C     		ldr	r4, .L2589+12
5547:src/xeq.c     ****      display(); // turns off RPN if it was freeeeze and returns doing little
ARM GAS  /tmp/ccqED0AM.s 			page 871


 34669              		.loc 1 5547 6 view .LVU9346
 34670 0040 0B4D     		ldr	r5, .L2589+8
5545:src/xeq.c     ****      ShowRPN = 1; // display() may turn it off again
 34671              		.loc 1 5545 6 view .LVU9347
 34672 0042 FFF7FEFF 		bl	clr_dot
 34673              	.LVL2671:
5546:src/xeq.c     ****      lcd_refresh(); // put here to turn off the RCL annunciator
 34674              		.loc 1 5546 6 is_stmt 1 view .LVU9348
5546:src/xeq.c     ****      lcd_refresh(); // put here to turn off the RCL annunciator
 34675              		.loc 1 5546 14 is_stmt 0 view .LVU9349
 34676 0046 0123     		movs	r3, #1
 34677 0048 2360     		str	r3, [r4]
5547:src/xeq.c     ****      display(); // turns off RPN if it was freeeeze and returns doing little
 34678              		.loc 1 5547 6 is_stmt 1 view .LVU9350
 34679 004a A847     		blx	r5
 34680              	.LVL2672:
5548:src/xeq.c     ****      
 34681              		.loc 1 5548 6 view .LVU9351
 34682 004c FFF7FEFF 		bl	display
 34683              	.LVL2673:
5550:src/xeq.c     ****        set_dot(RPN);
 34684              		.loc 1 5550 6 view .LVU9352
5550:src/xeq.c     ****        set_dot(RPN);
 34685              		.loc 1 5550 9 is_stmt 0 view .LVU9353
 34686 0050 2368     		ldr	r3, [r4]
 34687 0052 1BB9     		cbnz	r3, .L2588
 34688              	.L2572:
5556:src/xeq.c     **** #endif
 34689              		.loc 1 5556 6 is_stmt 1 view .LVU9354
5556:src/xeq.c     **** #endif
 34690              		.loc 1 5556 18 is_stmt 0 view .LVU9355
 34691 0054 084B     		ldr	r3, .L2589+16
 34692 0056 0122     		movs	r2, #1
 34693 0058 1A60     		str	r2, [r3]
5559:src/xeq.c     **** 
 34694              		.loc 1 5559 2 view .LVU9356
 34695 005a 38BD     		pop	{r3, r4, r5, pc}
 34696              	.L2588:
5551:src/xeq.c     ****        lcd_refresh(); // RPN
 34697              		.loc 1 5551 8 is_stmt 1 view .LVU9357
 34698 005c 8D20     		movs	r0, #141
 34699 005e FFF7FEFF 		bl	set_dot
 34700              	.LVL2674:
5552:src/xeq.c     ****      }
 34701              		.loc 1 5552 8 view .LVU9358
 34702 0062 A847     		blx	r5
 34703              	.LVL2675:
 34704 0064 F6E7     		b	.L2572
 34705              	.L2590:
 34706 0066 00BF     		.align	2
 34707              	.L2589:
 34708 0068 00000000 		.word	Running
 34709 006c 00000000 		.word	Pause
 34710 0070 31020008 		.word	134218289
 34711 0074 00000000 		.word	ShowRPN
 34712 0078 00000000 		.word	JustStopped
 34713              		.cfi_endproc
ARM GAS  /tmp/ccqED0AM.s 			page 872


 34714              	.LFE255:
 34716              		.section	.text.xeq_sst_bst,"ax",%progbits
 34717              		.align	1
 34718              		.p2align 2,,3
 34719              		.global	xeq_sst_bst
 34720              		.syntax unified
 34721              		.thumb
 34722              		.thumb_func
 34723              		.fpu fpv4-sp-d16
 34725              	xeq_sst_bst:
 34726              	.LVL2676:
 34727              	.LFB256:
5564:src/xeq.c     **** 	opcode op;
 34728              		.loc 1 5564 1 view -0
 34729              		.cfi_startproc
 34730              		@ args = 0, pretend = 0, frame = 0
 34731              		@ frame_needed = 0, uses_anonymous_args = 0
5565:src/xeq.c     **** 
 34732              		.loc 1 5565 2 view .LVU9360
5567:src/xeq.c     **** 	if (kind == -1)
 34733              		.loc 1 5567 2 view .LVU9361
 34734              	.LBB4635:
 34735              	.LBI4635:
4455:src/xeq.c     **** 	// extern int IntMaxWindow;
 34736              		.loc 1 4455 6 view .LVU9362
 34737              	.LBB4636:
4458:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 34738              		.loc 1 4458 2 view .LVU9363
 34739              	.LBE4636:
 34740              	.LBE4635:
5564:src/xeq.c     **** 	opcode op;
 34741              		.loc 1 5564 1 is_stmt 0 view .LVU9364
 34742 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 34743              		.cfi_def_cfa_offset 24
 34744              		.cfi_offset 4, -24
 34745              		.cfi_offset 5, -20
 34746              		.cfi_offset 6, -16
 34747              		.cfi_offset 7, -12
 34748              		.cfi_offset 8, -8
 34749              		.cfi_offset 14, -4
 34750              	.LBB4639:
 34751              	.LBB4637:
4458:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 34752              		.loc 1 4458 16 view .LVU9365
 34753 0004 254C     		ldr	r4, .L2604
 34754 0006 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
4459:src/xeq.c     **** }
 34755              		.loc 1 4459 15 view .LVU9366
 34756 0008 0026     		movs	r6, #0
4458:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 34757              		.loc 1 4458 16 view .LVU9367
 34758 000a 6FF3C503 		bfc	r3, #3, #3
 34759              	.LBE4637:
 34760              	.LBE4639:
5568:src/xeq.c     **** 		decpc();
 34761              		.loc 1 5568 5 view .LVU9368
 34762 000e 411C     		adds	r1, r0, #1
ARM GAS  /tmp/ccqED0AM.s 			page 873


 34763              	.LBB4640:
 34764              	.LBB4638:
4458:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 34765              		.loc 1 4458 16 view .LVU9369
 34766 0010 2375     		strb	r3, [r4, #20]
4459:src/xeq.c     **** }
 34767              		.loc 1 4459 2 is_stmt 1 view .LVU9370
4459:src/xeq.c     **** }
 34768              		.loc 1 4459 15 is_stmt 0 view .LVU9371
 34769 0012 6674     		strb	r6, [r4, #17]
 34770              	.LBE4638:
 34771              	.LBE4640:
5568:src/xeq.c     **** 		decpc();
 34772              		.loc 1 5568 2 is_stmt 1 view .LVU9372
5568:src/xeq.c     **** 		decpc();
 34773              		.loc 1 5568 5 is_stmt 0 view .LVU9373
 34774 0014 30D0     		beq	.L2600
5571:src/xeq.c     **** 		// Display the step
 34775              		.loc 1 5571 2 is_stmt 1 view .LVU9374
5571:src/xeq.c     **** 		// Display the step
 34776              		.loc 1 5571 6 is_stmt 0 view .LVU9375
 34777 0016 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
5571:src/xeq.c     **** 		// Display the step
 34778              		.loc 1 5571 5 view .LVU9376
 34779 0018 5B06     		lsls	r3, r3, #25
 34780 001a 0546     		mov	r5, r0
 34781 001c 08D4     		bmi	.L2601
5590:src/xeq.c     **** 		// Key down in program mode
 34782              		.loc 1 5590 7 is_stmt 1 view .LVU9377
5590:src/xeq.c     **** 		// Key down in program mode
 34783              		.loc 1 5590 10 is_stmt 0 view .LVU9378
 34784 001e 08B1     		cbz	r0, .L2602
 34785              	.LVL2677:
 34786              	.L2591:
5595:src/xeq.c     **** 
 34787              		.loc 1 5595 1 view .LVU9379
 34788 0020 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 34789              	.LVL2678:
 34790              	.L2602:
5592:src/xeq.c     **** 		OpCode = 0;
 34791              		.loc 1 5592 3 is_stmt 1 view .LVU9380
 34792 0024 FFF7FEFF 		bl	incpc
 34793              	.LVL2679:
5593:src/xeq.c     **** 	}
 34794              		.loc 1 5593 3 view .LVU9381
5593:src/xeq.c     **** 	}
 34795              		.loc 1 5593 10 is_stmt 0 view .LVU9382
 34796 0028 1D4B     		ldr	r3, .L2604+4
 34797 002a 1D60     		str	r5, [r3]
5595:src/xeq.c     **** 
 34798              		.loc 1 5595 1 view .LVU9383
 34799 002c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 34800              	.LVL2680:
 34801              	.L2601:
5573:src/xeq.c     **** 		print_step(op);
 34802              		.loc 1 5573 3 is_stmt 1 view .LVU9384
5573:src/xeq.c     **** 		print_step(op);
ARM GAS  /tmp/ccqED0AM.s 			page 874


 34803              		.loc 1 5573 16 is_stmt 0 view .LVU9385
 34804 0030 1C4B     		ldr	r3, .L2604+8
 34805 0032 1B68     		ldr	r3, [r3]
5573:src/xeq.c     **** 		print_step(op);
 34806              		.loc 1 5573 8 view .LVU9386
 34807 0034 B3F8E007 		ldrh	r0, [r3, #2016]
 34808              	.LVL2681:
5573:src/xeq.c     **** 		print_step(op);
 34809              		.loc 1 5573 8 view .LVU9387
 34810 0038 FFF7FEFF 		bl	getprog
 34811              	.LVL2682:
 34812 003c 0746     		mov	r7, r0
 34813              	.LVL2683:
5574:src/xeq.c     **** 		if (kind == 1) {
 34814              		.loc 1 5574 3 is_stmt 1 view .LVU9388
 34815 003e FFF7FEFF 		bl	print_step
 34816              	.LVL2684:
5575:src/xeq.c     **** 			// Execute the step on key up
 34817              		.loc 1 5575 3 view .LVU9389
5575:src/xeq.c     **** 			// Execute the step on key up
 34818              		.loc 1 5575 6 is_stmt 0 view .LVU9390
 34819 0042 012D     		cmp	r5, #1
 34820 0044 ECD1     		bne	.L2591
5578:src/xeq.c     **** #endif
 34821              		.loc 1 5578 4 is_stmt 1 view .LVU9391
5578:src/xeq.c     **** #endif
 34822              		.loc 1 5578 15 is_stmt 0 view .LVU9392
 34823 0046 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
 34824              	.LBB4641:
 34825              	.LBB4642:
5815:src/xeq.c     **** }
 34826              		.loc 1 5815 10 view .LVU9393
 34827 0048 DFF85C80 		ldr	r8, .L2604+12
 34828              	.LBE4642:
 34829              	.LBE4641:
5578:src/xeq.c     **** #endif
 34830              		.loc 1 5578 15 view .LVU9394
 34831 004c 43F00203 		orr	r3, r3, #2
 34832 0050 2376     		strb	r3, [r4, #24]
5580:src/xeq.c     **** 			incpc();
 34833              		.loc 1 5580 4 is_stmt 1 view .LVU9395
 34834              	.LBB4644:
 34835              	.LBI4641:
5814:src/xeq.c     **** 	Running = 1;
 34836              		.loc 1 5814 6 view .LVU9396
 34837              	.LBB4643:
5815:src/xeq.c     **** }
 34838              		.loc 1 5815 2 view .LVU9397
5815:src/xeq.c     **** }
 34839              		.loc 1 5815 10 is_stmt 0 view .LVU9398
 34840 0052 C8F80050 		str	r5, [r8]
 34841              	.LBE4643:
 34842              	.LBE4644:
5581:src/xeq.c     **** 			xeq(op);
 34843              		.loc 1 5581 4 is_stmt 1 view .LVU9399
 34844 0056 FFF7FEFF 		bl	incpc
 34845              	.LVL2685:
ARM GAS  /tmp/ccqED0AM.s 			page 875


5582:src/xeq.c     **** #ifndef REALBUILD
 34846              		.loc 1 5582 4 view .LVU9400
 34847 005a 3846     		mov	r0, r7
 34848 005c FFF7FEFF 		bl	xeq
 34849              	.LVL2686:
5584:src/xeq.c     **** #endif
 34850              		.loc 1 5584 4 view .LVU9401
5584:src/xeq.c     **** #endif
 34851              		.loc 1 5584 15 is_stmt 0 view .LVU9402
 34852 0060 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
 34853              	.LBB4645:
 34854              	.LBB4646:
5503:src/xeq.c     **** 		xeq_xrom2();
 34855              		.loc 1 5503 5 view .LVU9403
 34856 0062 94F91720 		ldrsb	r2, [r4, #23]
 34857              	.LBE4646:
 34858              	.LBE4645:
5584:src/xeq.c     **** #endif
 34859              		.loc 1 5584 15 view .LVU9404
 34860 0066 66F34103 		bfi	r3, r6, #1, #1
 34861              	.LBB4650:
 34862              	.LBB4647:
5503:src/xeq.c     **** 		xeq_xrom2();
 34863              		.loc 1 5503 5 view .LVU9405
 34864 006a 002A     		cmp	r2, #0
 34865              	.LBE4647:
 34866              	.LBE4650:
5584:src/xeq.c     **** #endif
 34867              		.loc 1 5584 15 view .LVU9406
 34868 006c 2376     		strb	r3, [r4, #24]
5586:src/xeq.c     **** 			set_running_off_sst();
 34869              		.loc 1 5586 4 is_stmt 1 view .LVU9407
 34870              	.LBB4651:
 34871              	.LBI4645:
5501:src/xeq.c     **** 	// We split the routine in two parts for debugging only
 34872              		.loc 1 5501 6 view .LVU9408
 34873              	.LBB4648:
5503:src/xeq.c     **** 		xeq_xrom2();
 34874              		.loc 1 5503 2 view .LVU9409
5503:src/xeq.c     **** 		xeq_xrom2();
 34875              		.loc 1 5503 5 is_stmt 0 view .LVU9410
 34876 006e 12DA     		bge	.L2603
 34877              	.L2598:
 34878              	.LBE4648:
 34879              	.LBE4651:
5587:src/xeq.c     **** 		}
 34880              		.loc 1 5587 4 is_stmt 1 view .LVU9411
 34881              	.LBB4652:
 34882              	.LBI4652:
5810:src/xeq.c     **** 	Running = 0;
 34883              		.loc 1 5810 6 view .LVU9412
 34884              	.LBB4653:
5811:src/xeq.c     **** }
 34885              		.loc 1 5811 2 view .LVU9413
5811:src/xeq.c     **** }
 34886              		.loc 1 5811 10 is_stmt 0 view .LVU9414
 34887 0070 0023     		movs	r3, #0
ARM GAS  /tmp/ccqED0AM.s 			page 876


 34888 0072 C8F80030 		str	r3, [r8]
5812:src/xeq.c     **** 
 34889              		.loc 1 5812 1 view .LVU9415
 34890 0076 D3E7     		b	.L2591
 34891              	.LVL2687:
 34892              	.L2600:
5812:src/xeq.c     **** 
 34893              		.loc 1 5812 1 view .LVU9416
 34894              	.LBE4653:
 34895              	.LBE4652:
5569:src/xeq.c     **** 
 34896              		.loc 1 5569 3 is_stmt 1 view .LVU9417
 34897 0078 FFF7FEFF 		bl	decpc
 34898              	.LVL2688:
5571:src/xeq.c     **** 		// Display the step
 34899              		.loc 1 5571 2 view .LVU9418
5571:src/xeq.c     **** 		// Display the step
 34900              		.loc 1 5571 6 is_stmt 0 view .LVU9419
 34901 007c A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
5571:src/xeq.c     **** 		// Display the step
 34902              		.loc 1 5571 5 view .LVU9420
 34903 007e 5A06     		lsls	r2, r3, #25
 34904 0080 CED5     		bpl	.L2591
5573:src/xeq.c     **** 		print_step(op);
 34905              		.loc 1 5573 3 is_stmt 1 view .LVU9421
5573:src/xeq.c     **** 		print_step(op);
 34906              		.loc 1 5573 16 is_stmt 0 view .LVU9422
 34907 0082 084B     		ldr	r3, .L2604+8
 34908 0084 1B68     		ldr	r3, [r3]
5573:src/xeq.c     **** 		print_step(op);
 34909              		.loc 1 5573 8 view .LVU9423
 34910 0086 B3F8E007 		ldrh	r0, [r3, #2016]
 34911 008a FFF7FEFF 		bl	getprog
 34912              	.LVL2689:
5574:src/xeq.c     **** 		if (kind == 1) {
 34913              		.loc 1 5574 3 is_stmt 1 view .LVU9424
5595:src/xeq.c     **** 
 34914              		.loc 1 5595 1 is_stmt 0 view .LVU9425
 34915 008e BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 34916              		.cfi_remember_state
 34917              		.cfi_restore 14
 34918              		.cfi_restore 8
 34919              		.cfi_restore 7
 34920              		.cfi_restore 6
 34921              		.cfi_restore 5
 34922              		.cfi_restore 4
 34923              		.cfi_def_cfa_offset 0
5574:src/xeq.c     **** 		if (kind == 1) {
 34924              		.loc 1 5574 3 view .LVU9426
 34925 0092 FFF7FEBF 		b	print_step
 34926              	.LVL2690:
 34927              	.L2603:
 34928              		.cfi_restore_state
 34929              	.LBB4654:
 34930              	.LBB4649:
5504:src/xeq.c     **** }
 34931              		.loc 1 5504 3 is_stmt 1 view .LVU9427
ARM GAS  /tmp/ccqED0AM.s 			page 877


 34932 0096 FFF7FEFF 		bl	xeq_xrom2
 34933              	.LVL2691:
 34934 009a E9E7     		b	.L2598
 34935              	.L2605:
 34936              		.align	2
 34937              	.L2604:
 34938 009c 00000000 		.word	StateWhileOn
 34939 00a0 00000000 		.word	OpCode
 34940 00a4 00000000 		.word	main_ram
 34941 00a8 00000000 		.word	Running
 34942              	.LBE4649:
 34943              	.LBE4654:
 34944              		.cfi_endproc
 34945              	.LFE256:
 34947              		.section	.text.init_34s,"ax",%progbits
 34948              		.align	1
 34949              		.p2align 2,,3
 34950              		.global	init_34s
 34951              		.syntax unified
 34952              		.thumb
 34953              		.thumb_func
 34954              		.fpu fpv4-sp-d16
 34956              	init_34s:
 34957              	.LFB273:
6340:src/xeq.c     **** 
6341:src/xeq.c     **** 
6342:src/xeq.c     **** /*
6343:src/xeq.c     ****  *  Debugging output for the console version
6344:src/xeq.c     ****  */
6345:src/xeq.c     **** #if defined(DEBUG) && defined(CONSOLE) && !defined(WP34STEST)
6346:src/xeq.c     **** extern unsigned char remap_chars(unsigned char ch);
6347:src/xeq.c     **** 
6348:src/xeq.c     **** static int compare(s_opcode a1, s_opcode a2, int cata) {
6349:src/xeq.c     **** 	char b1[16], b2[16];
6350:src/xeq.c     **** 	const unsigned char *s1, *s2;
6351:src/xeq.c     **** 	int i;
6352:src/xeq.c     **** 
6353:src/xeq.c     **** 	xset(b1, 0, sizeof(b1));
6354:src/xeq.c     **** 	xset(b2, 0, sizeof(b2));
6355:src/xeq.c     **** 	s1 = (unsigned char *)catcmd(a1, b1);
6356:src/xeq.c     **** 	s2 = (unsigned char *)catcmd(a2, b2);
6357:src/xeq.c     **** 	if (*s1 == COMPLEX_PREFIX) s1++;
6358:src/xeq.c     **** 	if (*s2 == COMPLEX_PREFIX) s2++;
6359:src/xeq.c     **** 
6360:src/xeq.c     **** 	for (i=0;;i++) {
6361:src/xeq.c     **** 		unsigned char c1 = *s1++;
6362:src/xeq.c     **** 		unsigned char c2 = *s2++;
6363:src/xeq.c     **** 		c1 = remap_chars(c1);
6364:src/xeq.c     **** 		c2 = remap_chars(c2);
6365:src/xeq.c     **** 
6366:src/xeq.c     **** 		if (c1 != c2) {
6367:src/xeq.c     **** 			if (c1 > c2) {
6368:src/xeq.c     **** 				return 1;
6369:src/xeq.c     **** 			}
6370:src/xeq.c     **** 			return 0;
6371:src/xeq.c     **** 		} else if (c1 == '\0')
6372:src/xeq.c     **** 			break;
ARM GAS  /tmp/ccqED0AM.s 			page 878


6373:src/xeq.c     **** 	}
6374:src/xeq.c     **** 	return 0;
6375:src/xeq.c     **** }
6376:src/xeq.c     **** 
6377:src/xeq.c     **** static void check_cat(const enum catalogues cata, const char *name) {
6378:src/xeq.c     **** 	int i;
6379:src/xeq.c     **** 	char b1[16], b2[16];
6380:src/xeq.c     **** 	const int oldcata = State2.catalogue;
6381:src/xeq.c     **** 	int n;
6382:src/xeq.c     **** 
6383:src/xeq.c     **** 	State2.catalogue = cata;
6384:src/xeq.c     **** 	n = current_catalogue_max();
6385:src/xeq.c     **** 	for (i=1; i<n; i++) {
6386:src/xeq.c     **** 		opcode cold = current_catalogue(i-1);
6387:src/xeq.c     **** 		opcode c = current_catalogue(i);
6388:src/xeq.c     **** 		if (compare(cold, c, cata))
6389:src/xeq.c     **** 			error("catalogue %s row %04x / %04x  %d / %d: %04o / %04o (%s / %s)", name, cold, c, i-1, i,
6390:src/xeq.c     **** 					0xff & cold, 0xff & c,
6391:src/xeq.c     **** 					catcmd(cold, b1), catcmd(c, b2));
6392:src/xeq.c     **** 	}
6393:src/xeq.c     **** 	State2.catalogue = oldcata;
6394:src/xeq.c     **** }
6395:src/xeq.c     **** 
6396:src/xeq.c     **** static void check_const_cat(void) {
6397:src/xeq.c     **** 	int i;
6398:src/xeq.c     **** 	char b1[16], b2[16];
6399:src/xeq.c     **** 	char p1[64], p2[64];
6400:src/xeq.c     **** 
6401:src/xeq.c     **** 	for (i=1; i<NUM_CONSTS_CAT; i++) {
6402:src/xeq.c     **** 		if (compare(CONST(i-1), CONST(i), 0)) {
6403:src/xeq.c     **** 			prettify(catcmd(CONST(i-1), b1), p1, 0);
6404:src/xeq.c     **** 			prettify(catcmd(CONST(i), b2), p2, 0);
6405:src/xeq.c     **** 			error("constants row %d / %d: %s / %s", i, i+1, p1, p2);
6406:src/xeq.c     **** 		}
6407:src/xeq.c     **** 	}
6408:src/xeq.c     **** }
6409:src/xeq.c     **** 
6410:src/xeq.c     **** static void bad_table(const char *t, int row, const char *n, int nlen) {
6411:src/xeq.c     **** 	char buf[64], name[20];
6412:src/xeq.c     **** 	int i;
6413:src/xeq.c     **** 
6414:src/xeq.c     **** 	for (i=0; i<nlen; i++)
6415:src/xeq.c     **** 		name[i] = n[i];
6416:src/xeq.c     **** 	name[nlen] = '\0';
6417:src/xeq.c     **** 	prettify(name, buf, 0);
6418:src/xeq.c     **** 	error("%s table row %d: %6s", t, row, buf);
6419:src/xeq.c     **** }
6420:src/xeq.c     **** 
6421:src/xeq.c     **** #endif
6422:src/xeq.c     **** 
6423:src/xeq.c     **** /* Main initialisation routine that sets things up for us.
6424:src/xeq.c     ****  * Returns a nonzero result if it has cleared ram.
6425:src/xeq.c     ****  */
6426:src/xeq.c     **** int init_34s(void)
6427:src/xeq.c     **** {
 34958              		.loc 1 6427 1 view -0
 34959              		.cfi_startproc
ARM GAS  /tmp/ccqED0AM.s 			page 879


 34960              		@ args = 0, pretend = 0, frame = 0
 34961              		@ frame_needed = 0, uses_anonymous_args = 0
6428:src/xeq.c     **** 	const int cleared = checksum_all();
 34962              		.loc 1 6428 2 view .LVU9429
6427:src/xeq.c     **** 	const int cleared = checksum_all();
 34963              		.loc 1 6427 1 is_stmt 0 view .LVU9430
 34964 0000 10B5     		push	{r4, lr}
 34965              		.cfi_def_cfa_offset 8
 34966              		.cfi_offset 4, -8
 34967              		.cfi_offset 14, -4
 34968              		.loc 1 6428 22 view .LVU9431
 34969 0002 FFF7FEFF 		bl	checksum_ram
 34970              	.LVL2692:
6429:src/xeq.c     **** 	if (cleared) {
 34971              		.loc 1 6429 2 is_stmt 1 view .LVU9432
 34972              		.loc 1 6429 5 is_stmt 0 view .LVU9433
 34973 0006 0446     		mov	r4, r0
 34974 0008 80B9     		cbnz	r0, .L2612
 34975              	.LVL2693:
 34976              	.L2607:
6430:src/xeq.c     **** 		reset();
6431:src/xeq.c     **** 	}
6432:src/xeq.c     **** 	init_state();
 34977              		.loc 1 6432 2 is_stmt 1 view .LVU9434
 34978 000a FFF7FEFF 		bl	init_state
 34979              	.LVL2694:
6433:src/xeq.c     **** 	xeq_init_contexts();
 34980              		.loc 1 6433 2 view .LVU9435
 34981 000e FFF7FEFF 		bl	xeq_init_contexts
 34982              	.LVL2695:
6434:src/xeq.c     **** 	ShowRPN = 1;
 34983              		.loc 1 6434 2 view .LVU9436
 34984              		.loc 1 6434 10 is_stmt 0 view .LVU9437
 34985 0012 084B     		ldr	r3, .L2613
 34986 0014 0122     		movs	r2, #1
6435:src/xeq.c     **** 	set_dot(RPN);
 34987              		.loc 1 6435 2 view .LVU9438
 34988 0016 8D20     		movs	r0, #141
6434:src/xeq.c     **** 	ShowRPN = 1;
 34989              		.loc 1 6434 10 view .LVU9439
 34990 0018 1A60     		str	r2, [r3]
 34991              		.loc 1 6435 2 is_stmt 1 view .LVU9440
 34992 001a FFF7FEFF 		bl	set_dot
 34993              	.LVL2696:
6436:src/xeq.c     **** 
6437:src/xeq.c     **** #ifdef INCLUDE_STOPWATCH
6438:src/xeq.c     **** 	StopWatchRunning = 0;
 34994              		.loc 1 6438 2 view .LVU9441
 34995              		.loc 1 6438 19 is_stmt 0 view .LVU9442
 34996 001e 064B     		ldr	r3, .L2613+4
 34997 0020 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 34998 0022 6FF30002 		bfc	r2, #0, #1
6439:src/xeq.c     **** #endif
6440:src/xeq.c     **** #if defined(CONSOLE) && !defined(WP34STEST) && defined(DEBUG)
6441:src/xeq.c     **** 	{
6442:src/xeq.c     **** 		int i;
6443:src/xeq.c     **** 	/* Sanity check the function table indices.
ARM GAS  /tmp/ccqED0AM.s 			page 880


6444:src/xeq.c     **** 	 * These indicies must correspond exactly with the enum definition.
6445:src/xeq.c     **** 	 * This code validates that this is true and prints error messages
6446:src/xeq.c     **** 	 * if it isn't.
6447:src/xeq.c     **** 	 */
6448:src/xeq.c     **** 	for (i=0; i<NUM_MONADIC; i++)
6449:src/xeq.c     **** 		if (monfuncs[i].n != i)
6450:src/xeq.c     **** 			bad_table("monadic function", i, monfuncs[i].fname, NAME_LEN);
6451:src/xeq.c     **** 	for (i=0; i<NUM_DYADIC; i++)
6452:src/xeq.c     **** 		if (dyfuncs[i].n != i)
6453:src/xeq.c     **** 			bad_table("dyadic function", i, dyfuncs[i].fname, NAME_LEN);
6454:src/xeq.c     **** 	for (i=0; i<NUM_TRIADIC; i++)
6455:src/xeq.c     **** 		if (trifuncs[i].n != i)
6456:src/xeq.c     **** 			bad_table("triadic function", i, trifuncs[i].fname, NAME_LEN);
6457:src/xeq.c     **** 	for (i=0; i<NUM_NILADIC; i++)
6458:src/xeq.c     **** 		if (niladics[i].n != i)
6459:src/xeq.c     **** 			bad_table("niladic function", i, niladics[i].nname, NAME_LEN);
6460:src/xeq.c     **** 	for (i=0; i<NUM_RARG; i++)
6461:src/xeq.c     **** 		if (argcmds[i].n != i)
6462:src/xeq.c     **** 			bad_table("argument command", i, argcmds[i].cmd, NAME_LEN);
6463:src/xeq.c     **** 	for (i=0; i<NUM_MULTI; i++)
6464:src/xeq.c     **** 		if (multicmds[i].n != i)
6465:src/xeq.c     **** 			bad_table("multi command", i, multicmds[i].cmd, NAME_LEN);
6466:src/xeq.c     **** 	check_const_cat();
6467:src/xeq.c     **** 	check_cat(CATALOGUE_COMPLEX, "complex");
6468:src/xeq.c     **** 	check_cat(CATALOGUE_STATS, "statistics");
6469:src/xeq.c     **** 	check_cat(CATALOGUE_SUMS, "summations");
6470:src/xeq.c     **** 	check_cat(CATALOGUE_PROB, "probability");
6471:src/xeq.c     **** 	check_cat(CATALOGUE_PROG, "programme");
6472:src/xeq.c     **** 	check_cat(CATALOGUE_MODE, "mode");
6473:src/xeq.c     **** 	check_cat(CATALOGUE_TEST, "tests");
6474:src/xeq.c     **** 	check_cat(CATALOGUE_INT, "int");
6475:src/xeq.c     **** 	check_cat(CATALOGUE_MATRIX, "matrix");
6476:src/xeq.c     **** 	/*
6477:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA, "alpha");
6478:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_LETTERS, "alpha special upper case letters");
6479:src/xeq.c     **** 	// check_cat(CATALOGUE_ALPHA_LETTERS_LOWER, "alpha special lower letters");
6480:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_SUBSCRIPTS, "alpha subscripts");
6481:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_SYMBOLS, "alpha symbols");
6482:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_COMPARES, "alpha compares");
6483:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_ARROWS, "alpha arrows");
6484:src/xeq.c     **** 	*/
6485:src/xeq.c     **** 	check_cat(CATALOGUE_CONV, "conversion");
6486:src/xeq.c     **** 	check_cat(CATALOGUE_NORMAL, "float");
6487:src/xeq.c     **** #ifdef INCLUDE_INTERNAL_CATALOGUE
6488:src/xeq.c     **** 	check_cat(CATALOGUE_INTERNAL, "internal");
6489:src/xeq.c     **** #endif
6490:src/xeq.c     ****         if (sizeof(unsigned long long int) != sizeof(UState))
6491:src/xeq.c     ****             error("sizeof register (%u) != sizeof user state (%u)\n", sizeof(unsigned long long int
6492:src/xeq.c     **** 	}
6493:src/xeq.c     **** #endif
6494:src/xeq.c     **** 	return cleared;
6495:src/xeq.c     **** }
 34999              		.loc 1 6495 1 view .LVU9443
 35000 0026 2046     		mov	r0, r4
6438:src/xeq.c     **** #endif
 35001              		.loc 1 6438 19 view .LVU9444
 35002 0028 1A70     		strb	r2, [r3]
ARM GAS  /tmp/ccqED0AM.s 			page 881


6494:src/xeq.c     **** }
 35003              		.loc 1 6494 2 is_stmt 1 view .LVU9445
 35004              		.loc 1 6495 1 is_stmt 0 view .LVU9446
 35005 002a 10BD     		pop	{r4, pc}
 35006              	.LVL2697:
 35007              	.L2612:
6430:src/xeq.c     **** 	}
 35008              		.loc 1 6430 3 is_stmt 1 view .LVU9447
 35009 002c FFF7FEFF 		bl	reset
 35010              	.LVL2698:
6430:src/xeq.c     **** 	}
 35011              		.loc 1 6430 3 is_stmt 0 view .LVU9448
 35012 0030 EBE7     		b	.L2607
 35013              	.L2614:
 35014 0032 00BF     		.align	2
 35015              	.L2613:
 35016 0034 00000000 		.word	ShowRPN
 35017 0038 00000000 		.word	StopWatchStatus
 35018              		.cfi_endproc
 35019              	.LFE273:
 35021              		.section	.rodata.paste_raw_x.str1.4,"aMS",%progbits,1
 35022              		.align	2
 35023              	.LC9:
 35024 0000 0D0A0920 		.ascii	"\015\012\011 :;\000"
 35024      3A3B00
 35025              		.section	.text.paste_raw_x,"ax",%progbits
 35026              		.align	1
 35027              		.p2align 2,,3
 35028              		.global	paste_raw_x
 35029              		.syntax unified
 35030              		.thumb
 35031              		.thumb_func
 35032              		.fpu fpv4-sp-d16
 35034              	paste_raw_x:
 35035              	.LVL2699:
 35036              	.LFB274:
6496:src/xeq.c     **** 
6497:src/xeq.c     **** #ifndef REALBUILD
6498:src/xeq.c     **** 
6499:src/xeq.c     **** #include "string.h"
6500:src/xeq.c     **** 
6501:src/xeq.c     **** void paste_raw_x(const char *in)
6502:src/xeq.c     **** {
 35037              		.loc 1 6502 1 is_stmt 1 view -0
 35038              		.cfi_startproc
 35039              		@ args = 0, pretend = 0, frame = 40
 35040              		@ frame_needed = 0, uses_anonymous_args = 0
6503:src/xeq.c     **** 	char *buffer = strdup( in );
 35041              		.loc 1 6503 2 view .LVU9450
6502:src/xeq.c     **** 	char *buffer = strdup( in );
 35042              		.loc 1 6502 1 is_stmt 0 view .LVU9451
 35043 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 35044              		.cfi_def_cfa_offset 32
 35045              		.cfi_offset 4, -32
 35046              		.cfi_offset 5, -28
 35047              		.cfi_offset 6, -24
 35048              		.cfi_offset 7, -20
ARM GAS  /tmp/ccqED0AM.s 			page 882


 35049              		.cfi_offset 8, -16
 35050              		.cfi_offset 9, -12
 35051              		.cfi_offset 10, -8
 35052              		.cfi_offset 14, -4
 35053 0004 8AB0     		sub	sp, sp, #40
 35054              		.cfi_def_cfa_offset 72
 35055              		.loc 1 6503 17 view .LVU9452
 35056 0006 FFF7FEFF 		bl	strdup
 35057              	.LVL2700:
6504:src/xeq.c     **** 
6505:src/xeq.c     **** 	if ( buffer ) {
 35058              		.loc 1 6505 2 is_stmt 1 view .LVU9453
 35059              		.loc 1 6505 5 is_stmt 0 view .LVU9454
 35060 000a 0028     		cmp	r0, #0
 35061 000c 5CD0     		beq	.L2616
 35062              	.LBB4655:
6506:src/xeq.c     **** 		static const char *delim = "\r\n\t :;";
 35063              		.loc 1 6506 3 is_stmt 1 view .LVU9455
6507:src/xeq.c     **** 		char *p = strtok( buffer, delim );
 35064              		.loc 1 6507 3 view .LVU9456
 35065              	.LBB4656:
 35066              	.LBB4657:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35067              		.loc 1 1229 6 is_stmt 0 view .LVU9457
 35068 000e 394D     		ldr	r5, .L2651
 35069              	.LBE4657:
 35070              	.LBE4656:
 35071              		.loc 1 6507 13 view .LVU9458
 35072 0010 3949     		ldr	r1, .L2651+4
 35073 0012 8146     		mov	r9, r0
 35074 0014 FFF7FEFF 		bl	strtok
 35075              	.LVL2701:
 35076              	.LBB4661:
 35077              	.LBB4658:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35078              		.loc 1 1229 5 view .LVU9459
 35079 0018 2B7F     		ldrb	r3, [r5, #28]	@ zero_extendqisi2
 35080              	.LBE4658:
 35081              	.LBE4661:
 35082              		.loc 1 6507 13 view .LVU9460
 35083 001a 0446     		mov	r4, r0
 35084              	.LVL2702:
6508:src/xeq.c     **** 		process_cmdline();
 35085              		.loc 1 6508 3 is_stmt 1 view .LVU9461
 35086              	.LBB4662:
 35087              	.LBI4656:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 35088              		.loc 1 1226 6 view .LVU9462
 35089              	.LBB4659:
1227:src/xeq.c     **** 
 35090              		.loc 1 1227 2 view .LVU9463
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35091              		.loc 1 1229 2 view .LVU9464
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35092              		.loc 1 1229 5 is_stmt 0 view .LVU9465
 35093 001c 002B     		cmp	r3, #0
 35094 001e 5ED1     		bne	.L2647
ARM GAS  /tmp/ccqED0AM.s 			page 883


 35095              	.LVL2703:
 35096              	.L2617:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35097              		.loc 1 1229 5 view .LVU9466
 35098              	.LBE4659:
 35099              	.LBE4662:
6509:src/xeq.c     **** 		while ( p ) {
 35100              		.loc 1 6509 9 is_stmt 1 view .LVU9467
 35101 0020 002C     		cmp	r4, #0
 35102 0022 4ED0     		beq	.L2625
 35103 0024 354E     		ldr	r6, .L2651+8
 35104              	.LBB4663:
 35105              	.LBB4664:
6510:src/xeq.c     **** 			char *pp = strchr( p, ',' );
6511:src/xeq.c     **** 			if ( pp ) {
6512:src/xeq.c     **** 				*pp = '.';
6513:src/xeq.c     **** 			}
6514:src/xeq.c     **** 			if (is_intmode()) {
6515:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
6516:src/xeq.c     **** 				lift_if_enabled();
6517:src/xeq.c     **** 				set_lift();
6518:src/xeq.c     **** 				setX_int(build_value(strtoull(p + sgn, NULL, int_base()), sgn));
6519:src/xeq.c     **** 			} else {
6520:src/xeq.c     **** 				decNumber x;
6521:src/xeq.c     **** 				decNumberFromString(&x, p, &Ctx);
 35106              		.loc 1 6521 5 is_stmt 0 view .LVU9468
 35107 0026 DFF8DC80 		ldr	r8, .L2651+16
 35108              	.LBE4664:
6522:src/xeq.c     **** 				if (! check_special(&x)) {	/* This correctly deals with infinities and NaN based on flag D */
6523:src/xeq.c     **** 					lift_if_enabled();
6524:src/xeq.c     **** 					set_lift();
6525:src/xeq.c     **** 					setX(&x);
6526:src/xeq.c     **** 				}
6527:src/xeq.c     **** 				else {
6528:src/xeq.c     **** 					error_message(Error);
6529:src/xeq.c     **** 					Error = 0;
6530:src/xeq.c     **** 					break;
6531:src/xeq.c     **** 				}
6532:src/xeq.c     **** 			}
6533:src/xeq.c     **** 			p = strtok( NULL, delim );
 35109              		.loc 1 6533 8 view .LVU9469
 35110 002a 334F     		ldr	r7, .L2651+4
 35111 002c 21E0     		b	.L2626
 35112              	.LVL2704:
 35113              	.L2649:
 35114              	.LBB4683:
6515:src/xeq.c     **** 				lift_if_enabled();
 35115              		.loc 1 6515 5 is_stmt 1 view .LVU9470
6515:src/xeq.c     **** 				lift_if_enabled();
 35116              		.loc 1 6515 31 is_stmt 0 view .LVU9471
 35117 002e 94F800A0 		ldrb	r10, [r4]	@ zero_extendqisi2
 35118              	.LBB4684:
 35119              	.LBB4685:
 35120              	.LBB4686:
 35121              	.LBB4687:
 744:src/xeq.c     **** }
 35122              		.loc 1 744 15 view .LVU9472
ARM GAS  /tmp/ccqED0AM.s 			page 884


 35123 0032 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 35124              	.LBE4687:
 35125              	.LBE4686:
 35126              	.LBE4685:
 35127              	.LBE4684:
6515:src/xeq.c     **** 				lift_if_enabled();
 35128              		.loc 1 6515 31 view .LVU9473
 35129 0034 AAF12D0A 		sub	r10, r10, #45
 35130 0038 BAFA8AFA 		clz	r10, r10
 35131              	.LBB4693:
 35132              	.LBB4690:
 748:src/xeq.c     **** 		lift();
 35133              		.loc 1 748 5 view .LVU9474
 35134 003c 5A06     		lsls	r2, r3, #25
 35135              	.LBE4690:
 35136              	.LBE4693:
6515:src/xeq.c     **** 				lift_if_enabled();
 35137              		.loc 1 6515 31 view .LVU9475
 35138 003e 4FEA5A1A 		lsr	r10, r10, #5
 35139              	.LVL2705:
6516:src/xeq.c     **** 				set_lift();
 35140              		.loc 1 6516 5 is_stmt 1 view .LVU9476
 35141              	.LBB4694:
 35142              	.LBI4684:
 747:src/xeq.c     **** 	if (get_lift())
 35143              		.loc 1 747 6 view .LVU9477
 35144              	.LBB4691:
 748:src/xeq.c     **** 		lift();
 35145              		.loc 1 748 2 view .LVU9478
 35146              	.LBB4689:
 35147              	.LBI4686:
 743:src/xeq.c     **** 	return State2.state_lift;
 35148              		.loc 1 743 12 view .LVU9479
 35149              	.LBB4688:
 744:src/xeq.c     **** }
 35150              		.loc 1 744 2 view .LVU9480
 35151              	.LBE4688:
 35152              	.LBE4689:
 748:src/xeq.c     **** 		lift();
 35153              		.loc 1 748 5 is_stmt 0 view .LVU9481
 35154 0042 46D4     		bmi	.L2648
 35155              	.LVL2706:
 35156              	.L2621:
 748:src/xeq.c     **** 		lift();
 35157              		.loc 1 748 5 view .LVU9482
 35158              	.LBE4691:
 35159              	.LBE4694:
6517:src/xeq.c     **** 				setX_int(build_value(strtoull(p + sgn, NULL, int_base()), sgn));
 35160              		.loc 1 6517 5 is_stmt 1 view .LVU9483
 35161              	.LBB4695:
 35162              	.LBI4695:
 767:src/xeq.c     ****     State2.state_lift = 1;
 35163              		.loc 1 767 6 view .LVU9484
 35164              	.LBB4696:
 768:src/xeq.c     **** }
 35165              		.loc 1 768 5 view .LVU9485
 768:src/xeq.c     **** }
ARM GAS  /tmp/ccqED0AM.s 			page 885


 35166              		.loc 1 768 23 is_stmt 0 view .LVU9486
 35167 0044 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 35168 0046 43F04003 		orr	r3, r3, #64
 35169 004a EB75     		strb	r3, [r5, #23]
 35170              	.LBE4696:
 35171              	.LBE4695:
6518:src/xeq.c     **** 			} else {
 35172              		.loc 1 6518 5 is_stmt 1 view .LVU9487
6518:src/xeq.c     **** 			} else {
 35173              		.loc 1 6518 50 is_stmt 0 view .LVU9488
 35174 004c FFF7FEFF 		bl	int_base
 35175              	.LVL2707:
6518:src/xeq.c     **** 			} else {
 35176              		.loc 1 6518 37 view .LVU9489
 35177 0050 5444     		add	r4, r4, r10
 35178              	.LVL2708:
6518:src/xeq.c     **** 			} else {
 35179              		.loc 1 6518 50 view .LVU9490
 35180 0052 0246     		mov	r2, r0
6518:src/xeq.c     **** 			} else {
 35181              		.loc 1 6518 5 view .LVU9491
 35182 0054 0021     		movs	r1, #0
 35183 0056 2046     		mov	r0, r4
 35184 0058 FFF7FEFF 		bl	strtoull
 35185              	.LVL2709:
 35186 005c 5246     		mov	r2, r10
 35187 005e FFF7FEFF 		bl	build_value
 35188              	.LVL2710:
 35189 0062 FFF7FEFF 		bl	setX_int
 35190              	.LVL2711:
 35191              	.LBE4683:
 35192              		.loc 1 6533 4 is_stmt 1 view .LVU9492
 35193              		.loc 1 6533 8 is_stmt 0 view .LVU9493
 35194 0066 3946     		mov	r1, r7
 35195 0068 0020     		movs	r0, #0
 35196 006a FFF7FEFF 		bl	strtok
 35197              	.LVL2712:
 35198              		.loc 1 6533 8 view .LVU9494
 35199              	.LBE4663:
6509:src/xeq.c     **** 			char *pp = strchr( p, ',' );
 35200              		.loc 1 6509 9 is_stmt 1 view .LVU9495
 35201 006e 0446     		mov	r4, r0
 35202 0070 38B3     		cbz	r0, .L2625
 35203              	.LVL2713:
 35204              	.L2626:
 35205              	.LBB4702:
6510:src/xeq.c     **** 			if ( pp ) {
 35206              		.loc 1 6510 4 view .LVU9496
6510:src/xeq.c     **** 			if ( pp ) {
 35207              		.loc 1 6510 15 is_stmt 0 view .LVU9497
 35208 0072 2C21     		movs	r1, #44
 35209 0074 2046     		mov	r0, r4
 35210 0076 FFF7FEFF 		bl	strchr
 35211              	.LVL2714:
6511:src/xeq.c     **** 				*pp = '.';
 35212              		.loc 1 6511 4 is_stmt 1 view .LVU9498
6511:src/xeq.c     **** 				*pp = '.';
ARM GAS  /tmp/ccqED0AM.s 			page 886


 35213              		.loc 1 6511 7 is_stmt 0 view .LVU9499
 35214 007a 08B1     		cbz	r0, .L2619
6512:src/xeq.c     **** 			}
 35215              		.loc 1 6512 5 is_stmt 1 view .LVU9500
6512:src/xeq.c     **** 			}
 35216              		.loc 1 6512 9 is_stmt 0 view .LVU9501
 35217 007c 2E23     		movs	r3, #46
 35218 007e 0370     		strb	r3, [r0]
 35219              	.L2619:
6514:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
 35220              		.loc 1 6514 4 is_stmt 1 view .LVU9502
6514:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
 35221              		.loc 1 6514 8 is_stmt 0 view .LVU9503
 35222 0080 3368     		ldr	r3, [r6]
 35223 0082 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
6514:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
 35224              		.loc 1 6514 7 view .LVU9504
 35225 0086 13F0010A 		ands	r10, r3, #1
 35226 008a D0D1     		bne	.L2649
 35227              	.LBB4698:
6520:src/xeq.c     **** 				decNumberFromString(&x, p, &Ctx);
 35228              		.loc 1 6520 5 is_stmt 1 view .LVU9505
6521:src/xeq.c     **** 				if (! check_special(&x)) {	/* This correctly deals with infinities and NaN based on flag D */
 35229              		.loc 1 6521 5 view .LVU9506
 35230 008c 2146     		mov	r1, r4
 35231 008e 01A8     		add	r0, sp, #4
 35232              	.LVL2715:
6521:src/xeq.c     **** 				if (! check_special(&x)) {	/* This correctly deals with infinities and NaN based on flag D */
 35233              		.loc 1 6521 5 is_stmt 0 view .LVU9507
 35234 0090 4246     		mov	r2, r8
 35235 0092 FFF7FEFF 		bl	decNumberFromString
 35236              	.LVL2716:
6522:src/xeq.c     **** 					lift_if_enabled();
 35237              		.loc 1 6522 5 is_stmt 1 view .LVU9508
6522:src/xeq.c     **** 					lift_if_enabled();
 35238              		.loc 1 6522 11 is_stmt 0 view .LVU9509
 35239 0096 01A8     		add	r0, sp, #4
 35240 0098 FFF7FEFF 		bl	check_special
 35241              	.LVL2717:
6522:src/xeq.c     **** 					lift_if_enabled();
 35242              		.loc 1 6522 8 view .LVU9510
 35243 009c 10BB     		cbnz	r0, .L2623
6523:src/xeq.c     **** 					set_lift();
 35244              		.loc 1 6523 6 is_stmt 1 view .LVU9511
 35245              	.LBB4665:
 35246              	.LBI4665:
 747:src/xeq.c     **** 	if (get_lift())
 35247              		.loc 1 747 6 view .LVU9512
 35248              	.LBB4666:
 748:src/xeq.c     **** 		lift();
 35249              		.loc 1 748 2 view .LVU9513
 35250              	.LBB4667:
 35251              	.LBI4667:
 743:src/xeq.c     **** 	return State2.state_lift;
 35252              		.loc 1 743 12 view .LVU9514
 35253              	.LBB4668:
 744:src/xeq.c     **** }
ARM GAS  /tmp/ccqED0AM.s 			page 887


 35254              		.loc 1 744 2 view .LVU9515
 744:src/xeq.c     **** }
 35255              		.loc 1 744 15 is_stmt 0 view .LVU9516
 35256 009e EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 35257              	.LBE4668:
 35258              	.LBE4667:
 748:src/xeq.c     **** 		lift();
 35259              		.loc 1 748 5 view .LVU9517
 35260 00a0 5B06     		lsls	r3, r3, #25
 35261 00a2 19D4     		bmi	.L2650
 35262              	.L2624:
 35263              	.LBE4666:
 35264              	.LBE4665:
6524:src/xeq.c     **** 					setX(&x);
 35265              		.loc 1 6524 6 is_stmt 1 view .LVU9518
 35266              	.LBB4670:
 35267              	.LBI4670:
 767:src/xeq.c     ****     State2.state_lift = 1;
 35268              		.loc 1 767 6 view .LVU9519
 35269              	.LBB4671:
 768:src/xeq.c     **** }
 35270              		.loc 1 768 5 view .LVU9520
 768:src/xeq.c     **** }
 35271              		.loc 1 768 23 is_stmt 0 view .LVU9521
 35272 00a4 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 35273              	.LBE4671:
 35274              	.LBE4670:
 35275              	.LBB4674:
 35276              	.LBB4675:
 829:src/xeq.c     **** }
 35277              		.loc 1 829 2 view .LVU9522
 35278 00a6 01A9     		add	r1, sp, #4
 35279              	.LBE4675:
 35280              	.LBE4674:
 35281              	.LBB4678:
 35282              	.LBB4672:
 768:src/xeq.c     **** }
 35283              		.loc 1 768 23 view .LVU9523
 35284 00a8 43F04003 		orr	r3, r3, #64
 35285              	.LBE4672:
 35286              	.LBE4678:
 35287              	.LBB4679:
 35288              	.LBB4676:
 829:src/xeq.c     **** }
 35289              		.loc 1 829 2 view .LVU9524
 35290 00ac 6420     		movs	r0, #100
 35291              	.LBE4676:
 35292              	.LBE4679:
 35293              	.LBB4680:
 35294              	.LBB4673:
 768:src/xeq.c     **** }
 35295              		.loc 1 768 23 view .LVU9525
 35296 00ae EB75     		strb	r3, [r5, #23]
 35297              	.LBE4673:
 35298              	.LBE4680:
6525:src/xeq.c     **** 				}
 35299              		.loc 1 6525 6 is_stmt 1 view .LVU9526
ARM GAS  /tmp/ccqED0AM.s 			page 888


 35300              	.LVL2718:
 35301              	.LBB4681:
 35302              	.LBI4674:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 35303              		.loc 1 828 6 view .LVU9527
 35304              	.LBB4677:
 829:src/xeq.c     **** }
 35305              		.loc 1 829 2 view .LVU9528
 35306 00b0 FFF7FEFF 		bl	setRegister
 35307              	.LVL2719:
 829:src/xeq.c     **** }
 35308              		.loc 1 829 2 is_stmt 0 view .LVU9529
 35309              	.LBE4677:
 35310              	.LBE4681:
 35311              	.LBE4698:
 35312              		.loc 1 6533 4 is_stmt 1 view .LVU9530
 35313              		.loc 1 6533 8 is_stmt 0 view .LVU9531
 35314 00b4 3946     		mov	r1, r7
 35315 00b6 0020     		movs	r0, #0
 35316 00b8 FFF7FEFF 		bl	strtok
 35317              	.LVL2720:
 35318              		.loc 1 6533 8 view .LVU9532
 35319              	.LBE4702:
6509:src/xeq.c     **** 			char *pp = strchr( p, ',' );
 35320              		.loc 1 6509 9 is_stmt 1 view .LVU9533
 35321 00bc 0446     		mov	r4, r0
 35322 00be 0028     		cmp	r0, #0
 35323 00c0 D7D1     		bne	.L2626
 35324              	.LVL2721:
 35325              	.L2625:
6534:src/xeq.c     **** 		}
6535:src/xeq.c     **** 		free( buffer );
 35326              		.loc 1 6535 3 view .LVU9534
 35327 00c2 4846     		mov	r0, r9
 35328 00c4 FFF7FEFF 		bl	free
 35329              	.LVL2722:
 35330              	.L2616:
 35331              		.loc 1 6535 3 is_stmt 0 view .LVU9535
 35332              	.LBE4655:
6536:src/xeq.c     **** 	}
6537:src/xeq.c     **** 	display();
 35333              		.loc 1 6537 2 is_stmt 1 view .LVU9536
 35334 00c8 FFF7FEFF 		bl	display
 35335              	.LVL2723:
6538:src/xeq.c     **** }
 35336              		.loc 1 6538 1 is_stmt 0 view .LVU9537
 35337 00cc 0AB0     		add	sp, sp, #40
 35338              		.cfi_remember_state
 35339              		.cfi_def_cfa_offset 32
 35340              		@ sp needed
 35341 00ce BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 35342              	.LVL2724:
 35343              	.L2648:
 35344              		.cfi_restore_state
 35345              	.LBB4706:
 35346              	.LBB4703:
 35347              	.LBB4699:
ARM GAS  /tmp/ccqED0AM.s 			page 889


 35348              	.LBB4697:
 35349              	.LBB4692:
 749:src/xeq.c     **** }
 35350              		.loc 1 749 3 is_stmt 1 view .LVU9538
 35351 00d2 FFF7FEFF 		bl	lift
 35352              	.LVL2725:
 749:src/xeq.c     **** }
 35353              		.loc 1 749 3 is_stmt 0 view .LVU9539
 35354 00d6 B5E7     		b	.L2621
 35355              	.LVL2726:
 35356              	.L2650:
 749:src/xeq.c     **** }
 35357              		.loc 1 749 3 view .LVU9540
 35358              	.LBE4692:
 35359              	.LBE4697:
 35360              	.LBE4699:
 35361              	.LBB4700:
 35362              	.LBB4682:
 35363              	.LBB4669:
 749:src/xeq.c     **** }
 35364              		.loc 1 749 3 is_stmt 1 view .LVU9541
 35365 00d8 FFF7FEFF 		bl	lift
 35366              	.LVL2727:
 35367 00dc E2E7     		b	.L2624
 35368              	.LVL2728:
 35369              	.L2647:
 749:src/xeq.c     **** }
 35370              		.loc 1 749 3 is_stmt 0 view .LVU9542
 35371              	.LBE4669:
 35372              	.LBE4682:
 35373              	.LBE4700:
 35374              	.LBE4703:
 35375              	.LBB4704:
 35376              	.LBB4660:
 35377 00de FFF7FEFF 		bl	process_cmdline.part.0
 35378              	.LVL2729:
 749:src/xeq.c     **** }
 35379              		.loc 1 749 3 view .LVU9543
 35380 00e2 9DE7     		b	.L2617
 35381              	.L2623:
 749:src/xeq.c     **** }
 35382              		.loc 1 749 3 view .LVU9544
 35383              	.LBE4660:
 35384              	.LBE4704:
 35385              	.LBB4705:
 35386              	.LBB4701:
6528:src/xeq.c     **** 					Error = 0;
 35387              		.loc 1 6528 6 is_stmt 1 view .LVU9545
 35388 00e4 064C     		ldr	r4, .L2651+12
 35389              	.LVL2730:
6528:src/xeq.c     **** 					Error = 0;
 35390              		.loc 1 6528 6 is_stmt 0 view .LVU9546
 35391 00e6 2068     		ldr	r0, [r4]
 35392 00e8 FFF7FEFF 		bl	error_message
 35393              	.LVL2731:
6529:src/xeq.c     **** 					break;
 35394              		.loc 1 6529 6 is_stmt 1 view .LVU9547
ARM GAS  /tmp/ccqED0AM.s 			page 890


6529:src/xeq.c     **** 					break;
 35395              		.loc 1 6529 12 is_stmt 0 view .LVU9548
 35396 00ec C4F800A0 		str	r10, [r4]
6530:src/xeq.c     **** 				}
 35397              		.loc 1 6530 6 is_stmt 1 view .LVU9549
 35398 00f0 E7E7     		b	.L2625
 35399              	.L2652:
 35400 00f2 00BF     		.align	2
 35401              	.L2651:
 35402 00f4 00000000 		.word	StateWhileOn
 35403 00f8 00000000 		.word	.LC9
 35404 00fc 00000000 		.word	main_ram
 35405 0100 00000000 		.word	Error
 35406 0104 00000000 		.word	Ctx
 35407              	.LBE4701:
 35408              	.LBE4705:
 35409              	.LBE4706:
 35410              		.cfi_endproc
 35411              	.LFE274:
 35413              		.global	__aeabi_uldivmod
 35414              		.section	.rodata.fill_buffer_from_raw_x.str1.4,"aMS",%progbits,1
 35415              		.align	2
 35416              	.LC10:
 35417 0000 30313233 		.ascii	"0123456789ABCDEF\000"
 35417      34353637 
 35417      38394142 
 35417      43444546 
 35417      00
 35418              		.section	.text.fill_buffer_from_raw_x,"ax",%progbits
 35419              		.align	1
 35420              		.p2align 2,,3
 35421              		.global	fill_buffer_from_raw_x
 35422              		.syntax unified
 35423              		.thumb
 35424              		.thumb_func
 35425              		.fpu fpv4-sp-d16
 35427              	fill_buffer_from_raw_x:
 35428              	.LVL2732:
 35429              	.LFB275:
6539:src/xeq.c     **** 
6540:src/xeq.c     **** char* fill_buffer_from_raw_x(char *buffer)
6541:src/xeq.c     **** {
 35430              		.loc 1 6541 1 view -0
 35431              		.cfi_startproc
 35432              		@ args = 0, pretend = 0, frame = 40
 35433              		@ frame_needed = 0, uses_anonymous_args = 0
6542:src/xeq.c     **** 	process_cmdline();
 35434              		.loc 1 6542 2 view .LVU9551
 35435              	.LBB4707:
 35436              	.LBI4707:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 35437              		.loc 1 1226 6 view .LVU9552
 35438              	.LBB4708:
1227:src/xeq.c     **** 
 35439              		.loc 1 1227 2 view .LVU9553
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35440              		.loc 1 1229 2 view .LVU9554
ARM GAS  /tmp/ccqED0AM.s 			page 891


 35441              	.LBE4708:
 35442              	.LBE4707:
6541:src/xeq.c     **** 	process_cmdline();
 35443              		.loc 1 6541 1 is_stmt 0 view .LVU9555
 35444 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 35445              		.cfi_def_cfa_offset 36
 35446              		.cfi_offset 4, -36
 35447              		.cfi_offset 5, -32
 35448              		.cfi_offset 6, -28
 35449              		.cfi_offset 7, -24
 35450              		.cfi_offset 8, -20
 35451              		.cfi_offset 9, -16
 35452              		.cfi_offset 10, -12
 35453              		.cfi_offset 11, -8
 35454              		.cfi_offset 14, -4
 35455              	.LBB4712:
 35456              	.LBB4709:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35457              		.loc 1 1229 6 view .LVU9556
 35458 0004 2F4B     		ldr	r3, .L2677
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35459              		.loc 1 1229 5 view .LVU9557
 35460 0006 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 35461              	.LBE4709:
 35462              	.LBE4712:
6541:src/xeq.c     **** 	process_cmdline();
 35463              		.loc 1 6541 1 view .LVU9558
 35464 0008 8BB0     		sub	sp, sp, #44
 35465              		.cfi_def_cfa_offset 80
6541:src/xeq.c     **** 	process_cmdline();
 35466              		.loc 1 6541 1 view .LVU9559
 35467 000a 0446     		mov	r4, r0
 35468              	.LBB4713:
 35469              	.LBB4710:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35470              		.loc 1 1229 5 view .LVU9560
 35471 000c 002B     		cmp	r3, #0
 35472 000e 55D1     		bne	.L2674
 35473              	.LVL2733:
 35474              	.L2654:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35475              		.loc 1 1229 5 view .LVU9561
 35476              	.LBE4710:
 35477              	.LBE4713:
6543:src/xeq.c     **** 	if (is_intmode()) {
 35478              		.loc 1 6543 2 is_stmt 1 view .LVU9562
 35479              		.loc 1 6543 6 is_stmt 0 view .LVU9563
 35480 0010 2D4D     		ldr	r5, .L2677+4
 35481 0012 2B68     		ldr	r3, [r5]
 35482 0014 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 35483              		.loc 1 6543 5 view .LVU9564
 35484 0018 DA07     		lsls	r2, r3, #31
 35485 001a 2CD5     		bpl	.L2655
 35486              	.LBB4714:
6544:src/xeq.c     **** 		int sgn;
 35487              		.loc 1 6544 3 is_stmt 1 view .LVU9565
6545:src/xeq.c     **** 		unsigned long long int x = extract_value(get_reg_n_int(regX_idx), &sgn);
ARM GAS  /tmp/ccqED0AM.s 			page 892


 35488              		.loc 1 6545 3 view .LVU9566
 35489              		.loc 1 6545 30 is_stmt 0 view .LVU9567
 35490 001c 6420     		movs	r0, #100
 35491 001e FFF7FEFF 		bl	get_reg_n_int
 35492              	.LVL2734:
 35493 0022 01AA     		add	r2, sp, #4
 35494 0024 FFF7FEFF 		bl	extract_value
 35495              	.LVL2735:
 35496 0028 0646     		mov	r6, r0
 35497 002a 0F46     		mov	r7, r1
 35498              	.LVL2736:
6546:src/xeq.c     **** 		const int base = int_base();
 35499              		.loc 1 6546 3 is_stmt 1 view .LVU9568
 35500              		.loc 1 6546 20 is_stmt 0 view .LVU9569
 35501 002c FFF7FEFF 		bl	int_base
 35502              	.LVL2737:
6547:src/xeq.c     **** 		char *p = buffer + (sizeof(buffer)-1);
6548:src/xeq.c     **** 
6549:src/xeq.c     **** 		*p-- = '\0';
 35503              		.loc 1 6549 8 view .LVU9570
 35504 0030 0023     		movs	r3, #0
 35505              	.LVL2738:
6547:src/xeq.c     **** 		char *p = buffer + (sizeof(buffer)-1);
 35506              		.loc 1 6547 3 is_stmt 1 view .LVU9571
 35507              		.loc 1 6549 3 view .LVU9572
 35508              		.loc 1 6549 8 is_stmt 0 view .LVU9573
 35509 0032 E370     		strb	r3, [r4, #3]
6550:src/xeq.c     **** 		if (x == 0)
 35510              		.loc 1 6550 3 is_stmt 1 view .LVU9574
 35511              		.loc 1 6550 6 is_stmt 0 view .LVU9575
 35512 0034 56EA0703 		orrs	r3, r6, r7
 35513 0038 35D0     		beq	.L2675
 35514 003a 244D     		ldr	r5, .L2677+8
6549:src/xeq.c     **** 		if (x == 0)
 35515              		.loc 1 6549 5 view .LVU9576
 35516 003c 0234     		adds	r4, r4, #2
 35517              	.LVL2739:
6549:src/xeq.c     **** 		if (x == 0)
 35518              		.loc 1 6549 5 view .LVU9577
 35519 003e 8046     		mov	r8, r0
 35520 0040 4FEAE079 		asr	r9, r0, #31
 35521              	.LVL2740:
 35522              	.L2658:
 35523              	.LBB4715:
6551:src/xeq.c     **** 			*p-- = '0'; 
6552:src/xeq.c     **** 		else {
6553:src/xeq.c     **** 			while (x != 0) {
6554:src/xeq.c     **** 				const int n = x % base;
 35524              		.loc 1 6554 5 is_stmt 1 view .LVU9578
 35525 0044 3046     		mov	r0, r6
 35526 0046 3946     		mov	r1, r7
 35527 0048 4246     		mov	r2, r8
 35528 004a 4B46     		mov	r3, r9
 35529 004c FFF7FEFF 		bl	__aeabi_uldivmod
 35530              	.LVL2741:
6555:src/xeq.c     **** 				x /= base;
 35531              		.loc 1 6555 5 view .LVU9579
ARM GAS  /tmp/ccqED0AM.s 			page 893


 35532 0050 BB46     		mov	fp, r7
 35533 0052 B246     		mov	r10, r6
 35534              	.LBE4715:
6553:src/xeq.c     **** 				const int n = x % base;
 35535              		.loc 1 6553 10 is_stmt 0 view .LVU9580
 35536 0054 CB45     		cmp	fp, r9
 35537              	.LBB4716:
6556:src/xeq.c     **** 				*p-- = n["0123456789ABCDEF"];
 35538              		.loc 1 6556 10 view .LVU9581
 35539 0056 AB5C     		ldrb	r3, [r5, r2]	@ zero_extendqisi2
 35540 0058 04F80139 		strb	r3, [r4], #-1
 35541              	.LVL2742:
 35542              		.loc 1 6556 10 view .LVU9582
 35543              	.LBE4716:
6553:src/xeq.c     **** 				const int n = x % base;
 35544              		.loc 1 6553 10 view .LVU9583
 35545 005c 08BF     		it	eq
 35546 005e C245     		cmpeq	r10, r8
 35547              	.LBB4717:
6555:src/xeq.c     **** 				x /= base;
 35548              		.loc 1 6555 7 view .LVU9584
 35549 0060 0646     		mov	r6, r0
 35550              	.LVL2743:
6555:src/xeq.c     **** 				x /= base;
 35551              		.loc 1 6555 7 view .LVU9585
 35552 0062 0F46     		mov	r7, r1
 35553              	.LVL2744:
 35554              		.loc 1 6556 5 is_stmt 1 view .LVU9586
 35555              		.loc 1 6556 5 is_stmt 0 view .LVU9587
 35556              	.LBE4717:
6553:src/xeq.c     **** 				const int n = x % base;
 35557              		.loc 1 6553 10 is_stmt 1 view .LVU9588
 35558 0064 EED2     		bcs	.L2658
6557:src/xeq.c     **** 			}
6558:src/xeq.c     **** 		}
6559:src/xeq.c     **** 		if (sgn)
 35559              		.loc 1 6559 3 view .LVU9589
 35560              		.loc 1 6559 6 is_stmt 0 view .LVU9590
 35561 0066 019B     		ldr	r3, [sp, #4]
 35562 0068 1BB3     		cbz	r3, .L2659
 35563              	.LVL2745:
 35564              	.L2676:
6560:src/xeq.c     **** 			*p = '-';
 35565              		.loc 1 6560 4 is_stmt 1 view .LVU9591
 35566              		.loc 1 6560 7 is_stmt 0 view .LVU9592
 35567 006a 2D23     		movs	r3, #45
 35568 006c 2370     		strb	r3, [r4]
 35569              	.LVL2746:
 35570              	.L2653:
 35571              		.loc 1 6560 7 view .LVU9593
 35572              	.LBE4714:
6561:src/xeq.c     **** 		else
6562:src/xeq.c     **** 			p++;
6563:src/xeq.c     **** 		return p;
6564:src/xeq.c     **** 	} else {
6565:src/xeq.c     **** 		decNumber x;
6566:src/xeq.c     **** 		decNumberToString(getX(&x), buffer);
ARM GAS  /tmp/ccqED0AM.s 			page 894


6567:src/xeq.c     **** 		if (UState.fraccomma) {
6568:src/xeq.c     **** 			char *p = strchr(buffer, '.');
6569:src/xeq.c     **** 			if (p != NULL)
6570:src/xeq.c     **** 				*p = ',';
6571:src/xeq.c     **** 		}
6572:src/xeq.c     **** 
6573:src/xeq.c     **** 		return buffer;
6574:src/xeq.c     **** 	}
6575:src/xeq.c     **** }
 35573              		.loc 1 6575 1 view .LVU9594
 35574 006e 2046     		mov	r0, r4
 35575 0070 0BB0     		add	sp, sp, #44
 35576              		.cfi_remember_state
 35577              		.cfi_def_cfa_offset 36
 35578              		@ sp needed
 35579 0072 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 35580              	.LVL2747:
 35581              	.L2655:
 35582              		.cfi_restore_state
 35583              	.LBB4718:
6565:src/xeq.c     **** 		decNumberToString(getX(&x), buffer);
 35584              		.loc 1 6565 3 is_stmt 1 view .LVU9595
6566:src/xeq.c     **** 		if (UState.fraccomma) {
 35585              		.loc 1 6566 3 view .LVU9596
 35586              	.LBB4719:
 35587              	.LBI4719:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 35588              		.loc 1 824 12 view .LVU9597
 35589              	.LBB4720:
 825:src/xeq.c     **** }
 35590              		.loc 1 825 2 view .LVU9598
 825:src/xeq.c     **** }
 35591              		.loc 1 825 9 is_stmt 0 view .LVU9599
 35592 0076 6421     		movs	r1, #100
 35593 0078 01A8     		add	r0, sp, #4
 35594              	.LVL2748:
 825:src/xeq.c     **** }
 35595              		.loc 1 825 9 view .LVU9600
 35596 007a FFF7FEFF 		bl	getRegister
 35597              	.LVL2749:
 825:src/xeq.c     **** }
 35598              		.loc 1 825 9 view .LVU9601
 35599              	.LBE4720:
 35600              	.LBE4719:
6566:src/xeq.c     **** 		if (UState.fraccomma) {
 35601              		.loc 1 6566 3 view .LVU9602
 35602 007e 2146     		mov	r1, r4
 35603 0080 FFF7FEFF 		bl	decNumberToString
 35604              	.LVL2750:
6567:src/xeq.c     **** 			char *p = strchr(buffer, '.');
 35605              		.loc 1 6567 3 is_stmt 1 view .LVU9603
6567:src/xeq.c     **** 			char *p = strchr(buffer, '.');
 35606              		.loc 1 6567 7 is_stmt 0 view .LVU9604
 35607 0084 2B68     		ldr	r3, [r5]
 35608 0086 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
6567:src/xeq.c     **** 			char *p = strchr(buffer, '.');
 35609              		.loc 1 6567 6 view .LVU9605
ARM GAS  /tmp/ccqED0AM.s 			page 895


 35610 008a 9B06     		lsls	r3, r3, #26
 35611 008c EFD5     		bpl	.L2653
 35612              	.LBB4721:
6568:src/xeq.c     **** 			if (p != NULL)
 35613              		.loc 1 6568 4 is_stmt 1 view .LVU9606
6568:src/xeq.c     **** 			if (p != NULL)
 35614              		.loc 1 6568 14 is_stmt 0 view .LVU9607
 35615 008e 2E21     		movs	r1, #46
 35616 0090 2046     		mov	r0, r4
 35617 0092 FFF7FEFF 		bl	strchr
 35618              	.LVL2751:
6569:src/xeq.c     **** 				*p = ',';
 35619              		.loc 1 6569 4 is_stmt 1 view .LVU9608
6569:src/xeq.c     **** 				*p = ',';
 35620              		.loc 1 6569 7 is_stmt 0 view .LVU9609
 35621 0096 0028     		cmp	r0, #0
 35622 0098 E9D0     		beq	.L2653
6570:src/xeq.c     **** 		}
 35623              		.loc 1 6570 5 is_stmt 1 view .LVU9610
6570:src/xeq.c     **** 		}
 35624              		.loc 1 6570 8 is_stmt 0 view .LVU9611
 35625 009a 2C23     		movs	r3, #44
 35626 009c 0370     		strb	r3, [r0]
 35627              	.LBE4721:
6573:src/xeq.c     **** 	}
 35628              		.loc 1 6573 3 is_stmt 1 view .LVU9612
 35629              	.LBE4718:
 35630              		.loc 1 6575 1 is_stmt 0 view .LVU9613
 35631 009e 2046     		mov	r0, r4
 35632              	.LVL2752:
 35633              		.loc 1 6575 1 view .LVU9614
 35634 00a0 0BB0     		add	sp, sp, #44
 35635              		.cfi_remember_state
 35636              		.cfi_def_cfa_offset 36
 35637              		@ sp needed
 35638 00a2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 35639              	.LVL2753:
 35640              	.L2675:
 35641              		.cfi_restore_state
 35642              	.LBB4722:
6551:src/xeq.c     **** 		else {
 35643              		.loc 1 6551 4 is_stmt 1 view .LVU9615
6551:src/xeq.c     **** 		else {
 35644              		.loc 1 6551 9 is_stmt 0 view .LVU9616
 35645 00a6 3023     		movs	r3, #48
 35646 00a8 A370     		strb	r3, [r4, #2]
6559:src/xeq.c     **** 			*p = '-';
 35647              		.loc 1 6559 6 view .LVU9617
 35648 00aa 019B     		ldr	r3, [sp, #4]
6551:src/xeq.c     **** 		else {
 35649              		.loc 1 6551 6 view .LVU9618
 35650 00ac 0134     		adds	r4, r4, #1
 35651              	.LVL2754:
6559:src/xeq.c     **** 			*p = '-';
 35652              		.loc 1 6559 3 is_stmt 1 view .LVU9619
6559:src/xeq.c     **** 			*p = '-';
 35653              		.loc 1 6559 6 is_stmt 0 view .LVU9620
ARM GAS  /tmp/ccqED0AM.s 			page 896


 35654 00ae 002B     		cmp	r3, #0
 35655 00b0 DBD1     		bne	.L2676
 35656              	.LVL2755:
 35657              	.L2659:
6562:src/xeq.c     **** 		return p;
 35658              		.loc 1 6562 4 is_stmt 1 view .LVU9621
6562:src/xeq.c     **** 		return p;
 35659              		.loc 1 6562 5 is_stmt 0 view .LVU9622
 35660 00b2 0134     		adds	r4, r4, #1
 35661              	.LVL2756:
6563:src/xeq.c     **** 	} else {
 35662              		.loc 1 6563 3 is_stmt 1 view .LVU9623
 35663              	.LBE4722:
 35664              		.loc 1 6575 1 is_stmt 0 view .LVU9624
 35665 00b4 2046     		mov	r0, r4
 35666 00b6 0BB0     		add	sp, sp, #44
 35667              		.cfi_remember_state
 35668              		.cfi_def_cfa_offset 36
 35669              		@ sp needed
 35670 00b8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 35671              	.LVL2757:
 35672              	.L2674:
 35673              		.cfi_restore_state
 35674              	.LBB4723:
 35675              	.LBB4711:
 35676              		.loc 1 6575 1 view .LVU9625
 35677 00bc FFF7FEFF 		bl	process_cmdline.part.0
 35678              	.LVL2758:
 35679              		.loc 1 6575 1 view .LVU9626
 35680 00c0 A6E7     		b	.L2654
 35681              	.L2678:
 35682 00c2 00BF     		.align	2
 35683              	.L2677:
 35684 00c4 00000000 		.word	StateWhileOn
 35685 00c8 00000000 		.word	main_ram
 35686 00cc 00000000 		.word	.LC10
 35687              	.LBE4711:
 35688              	.LBE4723:
 35689              		.cfi_endproc
 35690              	.LFE275:
 35692              		.comm	RectPolConv,4,4
 35693              		.comm	Tracing,4,4
 35694              		.comm	StackBase,4,4
 35695              		.comm	RetStk,4,4
 35696              		.comm	ProgFree,4,4
 35697              		.comm	RetStkSize,4,4
 35698              		.comm	TraceBuffer,25,4
 35699              		.comm	Ctx,24,4
 35700              		.comm	UserLocalRegs,4,4
 35701              		.comm	XromUserPc,4,4
 35702              		.comm	ShowRegister,4,4
 35703              		.comm	XeqOpCode,2,2
 35704              		.comm	PcWrapped,4,4
 35705              		.comm	Error,4,4
 35706              		.comm	Busy,4,4
 35707              		.comm	Pause,1,1
 35708              		.comm	JustStopped,4,4
ARM GAS  /tmp/ccqED0AM.s 			page 897


 35709              		.comm	XromRunning,4,4
 35710              		.comm	Running,4,4
 35711              		.global	xrom_targets
 35712              		.section	.rodata
 35713              		.align	2
 35714              		.set	.LANCHOR5,. + 0
 35715              	.LC1:
 35716 0000 0C0C0C0C 		.ascii	"\014\014\014\014\014\014\014\014\014\013\013\013\014"
 35716      0C0C0C0C 
 35716      0C0B0B0B 
 35716      0C
 35717 000d 0C0A0A0C 		.ascii	"\014\012\012\014\014\014\007\010\011\014\014\014\004"
 35717      0C0C0708 
 35717      090C0C0C 
 35717      04
 35718 001a 05060C0C 		.ascii	"\005\006\014\014\014\001\002\003\014\014\014\000\012"
 35718      0C010203 
 35718      0C0C0C00 
 35718      0A
 35719 0027 0C0C     		.ascii	"\014\014"
 35720              		.section	.bss.result.11733,"aw",%nobits
 35721              		.align	2
 35722              		.set	.LANCHOR2,. + 0
 35725              	result.11733:
 35726 0000 00000000 		.space	16
 35726      00000000 
 35726      00000000 
 35726      00000000 
 35727              		.section	.data.RegionTab,"aw"
 35728              		.align	2
 35729              		.set	.LANCHOR0,. + 0
 35732              	RegionTab:
 35733 0000 00000000 		.word	0
 35734 0004 00000000 		.word	0
 35735 0008 00000000 		.word	0
 35736 000c 00000000 		.word	xrom
 35737              		.section	.rodata.StackRegMask,"a"
 35738              		.align	2
 35739              		.set	.LANCHOR3,. + 0
 35742              	StackRegMask:
 35743 0000 0F01     		.short	271
 35744 0002 FF01     		.short	511
 35745              		.section	.rodata.convergence_tolerances,"a"
 35746              		.align	2
 35747              		.set	.LANCHOR7,. + 0
 35750              	convergence_tolerances:
 35751 0000 00000000 		.word	const_1e_14
 35752 0004 00000000 		.word	const_1e_24
 35753 0008 00000000 		.word	const_1e_32
 35754              		.section	.rodata.modes.11426,"a"
 35755              		.align	2
 35756              		.set	.LANCHOR1,. + 0
 35759              	modes.11426:
 35760 0000 03020401 		.ascii	"\003\002\004\001\005\000\006"
 35760      050006
 35761              		.section	.rodata.modes.11943,"a"
 35762              		.align	2
ARM GAS  /tmp/ccqED0AM.s 			page 898


 35763              		.set	.LANCHOR4,. + 0
 35766              	modes.11943:
 35767 0000 02010081 		.ascii	"\002\001\000\201"
 35768              		.section	.rodata.xrom_targets,"a"
 35769              		.align	2
 35770              		.set	.LANCHOR6,. + 0
 35773              	xrom_targets:
 35774 0000 9107     		.short	1937
 35775 0002 B70B     		.short	2999
 35776 0004 4602     		.short	582
 35777 0006 4402     		.short	580
 35778 0008 420A     		.short	2626
 35779 000a 340A     		.short	2612
 35780 000c 100C     		.short	3088
 35781 000e 9C05     		.short	1436
 35782 0010 3B0A     		.short	2619
 35783 0012 5A06     		.short	1626
 35784 0014 6F06     		.short	1647
 35785 0016 6B06     		.short	1643
 35786 0018 6406     		.short	1636
 35787 001a 390A     		.short	2617
 35788 001c 7206     		.short	1650
 35789 001e 7506     		.short	1653
 35790 0020 7706     		.short	1655
 35791 0022 5D06     		.short	1629
 35792 0024 5707     		.short	1879
 35793 0026 4F08     		.short	2127
 35794 0028 EB05     		.short	1515
 35795 002a 0405     		.short	1284
 35796 002c 2907     		.short	1833
 35797 002e 8205     		.short	1410
 35798 0030 9A05     		.short	1434
 35799 0032 EC05     		.short	1516
 35800              		.text
 35801              	.Letext0:
 35802              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 35803              		.file 3 "dmcp/dmcp.h"
 35804              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 35805              		.file 5 "/usr/include/newlib/sys/_types.h"
 35806              		.file 6 "/usr/include/newlib/sys/reent.h"
 35807              		.file 7 "/usr/include/newlib/sys/lock.h"
 35808              		.file 8 "/usr/include/newlib/stdlib.h"
 35809              		.file 9 "src/decNumber/decContext.h"
 35810              		.file 10 "src/decNumber/decNumber.h"
 35811              		.file 11 "src/decNumber/decimal64.h"
 35812              		.file 12 "src/decNumber/decimal128.h"
 35813              		.file 13 "src/xeq.h"
 35814              		.file 14 "src/data.h"
 35815              		.file 15 "src/keys.h"
 35816              		.file 16 "src/menu.h"
 35817              		.file 17 "src/storage.h"
 35818              		.file 18 "src/stats.h"
 35819              		.file 19 "src/display.h"
 35820              		.file 20 "src/consts.h"
 35821              		.file 21 "src/xrom.h"
 35822              		.file 22 "src/stopwatch.h"
 35823              		.file 23 "src/printer.h"
ARM GAS  /tmp/ccqED0AM.s 			page 899


 35824              		.file 24 "src/pretty.h"
 35825              		.file 25 "src/xrom_targets.c"
 35826              		.file 26 "src/int.h"
 35827              		.file 27 "/usr/include/newlib/string.h"
 35828              		.file 28 "src/lcd.h"
 35829              		.file 29 "src/decn.h"
 35830              		.file 30 "src/complex.h"
 35831              		.file 31 "/usr/include/newlib/stdio.h"
 35832              		.file 32 "src/alpha.h"
ARM GAS  /tmp/ccqED0AM.s 			page 900


DEFINED SYMBOLS
                            *ABS*:0000000000000000 xeq.c
     /tmp/ccqED0AM.s:18     .text.find_section_bounds:0000000000000000 $t
     /tmp/ccqED0AM.s:26     .text.find_section_bounds:0000000000000000 find_section_bounds
     /tmp/ccqED0AM.s:164    .text.find_section_bounds:0000000000000068 $d
     /tmp/ccqED0AM.s:172    .text.reg_address:0000000000000000 $t
     /tmp/ccqED0AM.s:179    .text.reg_address:0000000000000000 reg_address
     /tmp/ccqED0AM.s:293    .text.reg_address:0000000000000058 $d
     /tmp/ccqED0AM.s:300    .text.retstk_up:0000000000000000 $t
     /tmp/ccqED0AM.s:307    .text.retstk_up:0000000000000000 retstk_up
     /tmp/ccqED0AM.s:450    .text.retstk_up:0000000000000078 $d
                            *COM*:0000000000000004 RetStk
     /tmp/ccqED0AM.s:457    .text.flag_word:0000000000000000 $t
     /tmp/ccqED0AM.s:464    .text.flag_word:0000000000000000 flag_word
     /tmp/ccqED0AM.s:584    .text.flag_word:0000000000000074 $d
     /tmp/ccqED0AM.s:591    .text.set_zero:0000000000000000 $t
     /tmp/ccqED0AM.s:598    .text.set_zero:0000000000000000 set_zero
     /tmp/ccqED0AM.s:637    .text.set_zero:0000000000000020 $d
     /tmp/ccqED0AM.s:644    .text.intResult:0000000000000000 $t
     /tmp/ccqED0AM.s:651    .text.intResult:0000000000000000 intResult
     /tmp/ccqED0AM.s:851    .text.intResult:00000000000000a4 $d
                            *COM*:0000000000000004 Error
     /tmp/ccqED0AM.s:857    .text.check_stack_overlap:0000000000000000 $t
     /tmp/ccqED0AM.s:864    .text.check_stack_overlap:0000000000000000 check_stack_overlap
     /tmp/ccqED0AM.s:1078   .text.check_stack_overlap:0000000000000068 $d
     /tmp/ccqED0AM.s:1085   .text.is_xrom:0000000000000000 $t
     /tmp/ccqED0AM.s:1093   .text.is_xrom:0000000000000000 is_xrom
     /tmp/ccqED0AM.s:1114   .text.is_xrom:0000000000000018 $d
     /tmp/ccqED0AM.s:1119   .text.move_retstk:0000000000000000 $t
     /tmp/ccqED0AM.s:1127   .text.move_retstk:0000000000000000 move_retstk
     /tmp/ccqED0AM.s:1310   .text.move_retstk:000000000000006c $d
                            *COM*:0000000000000004 RetStkSize
     /tmp/ccqED0AM.s:1319   .text.local_levels:0000000000000000 $t
     /tmp/ccqED0AM.s:1327   .text.local_levels:0000000000000000 local_levels
     /tmp/ccqED0AM.s:1357   .text.local_levels:0000000000000024 $d
     /tmp/ccqED0AM.s:1363   .text.local_regs_rarg:0000000000000000 $t
     /tmp/ccqED0AM.s:1371   .text.local_regs_rarg:0000000000000000 local_regs_rarg
     /tmp/ccqED0AM.s:1473   .text.local_regs_rarg:0000000000000060 $d
     /tmp/ccqED0AM.s:1479   .text.get_reg_limit:0000000000000000 $t
     /tmp/ccqED0AM.s:1486   .text.get_reg_limit:0000000000000000 get_reg_limit
     /tmp/ccqED0AM.s:1724   .text.get_reg_limit:00000000000000b0 $d
     /tmp/ccqED0AM.s:1733   .text.local_regs:0000000000000000 $t
     /tmp/ccqED0AM.s:1741   .text.local_regs:0000000000000000 local_regs
     /tmp/ccqED0AM.s:1840   .text.local_regs:000000000000003c $d
     /tmp/ccqED0AM.s:1850   .text.global_regs_rarg:0000000000000000 $t
     /tmp/ccqED0AM.s:1858   .text.global_regs_rarg:0000000000000000 global_regs_rarg
     /tmp/ccqED0AM.s:1931   .text.global_regs_rarg:000000000000003c $d
     /tmp/ccqED0AM.s:1936   .text.global_regs:0000000000000000 $t
     /tmp/ccqED0AM.s:1944   .text.global_regs:0000000000000000 global_regs
     /tmp/ccqED0AM.s:2002   .text.global_regs:0000000000000020 $d
     /tmp/ccqED0AM.s:2007   .text.version:0000000000000000 $t
     /tmp/ccqED0AM.s:2015   .text.version:0000000000000000 version
     /tmp/ccqED0AM.s:2046   .text.version:0000000000000018 $d
     /tmp/ccqED0AM.s:2051   .text.cmd_off:0000000000000000 $t
     /tmp/ccqED0AM.s:2059   .text.cmd_off:0000000000000000 cmd_off
     /tmp/ccqED0AM.s:2075   .text.init_RegionTab:0000000000000000 $t
     /tmp/ccqED0AM.s:2083   .text.init_RegionTab:0000000000000000 init_RegionTab
ARM GAS  /tmp/ccqED0AM.s 			page 901


     /tmp/ccqED0AM.s:2121   .text.init_RegionTab:000000000000001c $d
     /tmp/ccqED0AM.s:2129   .text.sizeLIB:0000000000000000 $t
     /tmp/ccqED0AM.s:2137   .text.sizeLIB:0000000000000000 sizeLIB
     /tmp/ccqED0AM.s:2171   .text.sizeLIB:0000000000000018 $d
     /tmp/ccqED0AM.s:2177   .text.getprog:0000000000000000 $t
     /tmp/ccqED0AM.s:2185   .text.getprog:0000000000000000 getprog
     /tmp/ccqED0AM.s:2289   .text.getprog:0000000000000048 $d
     /tmp/ccqED0AM.s:2297   .text.get_current_prog:0000000000000000 $t
     /tmp/ccqED0AM.s:2305   .text.get_current_prog:0000000000000000 get_current_prog
     /tmp/ccqED0AM.s:2337   .text.get_current_prog:0000000000000020 $d
     /tmp/ccqED0AM.s:2343   .text.do_inc:0000000000000000 $t
     /tmp/ccqED0AM.s:2351   .text.do_inc:0000000000000000 do_inc
     /tmp/ccqED0AM.s:2431   .text.do_inc:0000000000000044 $d
                            *COM*:0000000000000004 PcWrapped
     /tmp/ccqED0AM.s:2436   .text.user_pc.part.0:0000000000000000 $t
     /tmp/ccqED0AM.s:2443   .text.user_pc.part.0:0000000000000000 user_pc.part.0
     /tmp/ccqED0AM.s:2513   .text.user_pc.part.0:0000000000000034 $d
     /tmp/ccqED0AM.s:2518   .rodata.print_step.str1.4:0000000000000000 $d
     /tmp/ccqED0AM.s:2522   .text.print_step:0000000000000000 $t
     /tmp/ccqED0AM.s:2529   .text.print_step:0000000000000000 print_step
     /tmp/ccqED0AM.s:2698   .text.print_step:0000000000000098 $d
                            *COM*:0000000000000019 TraceBuffer
     /tmp/ccqED0AM.s:2709   .text.do_dec:0000000000000000 $t
     /tmp/ccqED0AM.s:2717   .text.do_dec:0000000000000000 do_dec
     /tmp/ccqED0AM.s:2799   .text.do_dec:0000000000000048 $d
     /tmp/ccqED0AM.s:2804   .text.update_program_bounds:0000000000000000 $t
     /tmp/ccqED0AM.s:2812   .text.update_program_bounds:0000000000000000 update_program_bounds
     /tmp/ccqED0AM.s:2965   .text.update_program_bounds:000000000000008c $d
     /tmp/ccqED0AM.s:2972   .text.set_pc:0000000000000000 $t
     /tmp/ccqED0AM.s:2980   .text.set_pc:0000000000000000 set_pc
     /tmp/ccqED0AM.s:3214   .text.set_pc:00000000000000a4 $d
     /tmp/ccqED0AM.s:3223   .text.incpc:0000000000000000 $t
     /tmp/ccqED0AM.s:3231   .text.incpc:0000000000000000 incpc
     /tmp/ccqED0AM.s:3285   .text.incpc:0000000000000024 $d
     /tmp/ccqED0AM.s:3291   .text.decpc:0000000000000000 $t
     /tmp/ccqED0AM.s:3299   .text.decpc:0000000000000000 decpc
     /tmp/ccqED0AM.s:3354   .text.decpc:0000000000000024 $d
     /tmp/ccqED0AM.s:3361   .text.do_rtn:0000000000000000 $t
     /tmp/ccqED0AM.s:3368   .text.do_rtn:0000000000000000 do_rtn
     /tmp/ccqED0AM.s:3548   .text.do_rtn:0000000000000094 $d
                            *COM*:0000000000000004 Running
     /tmp/ccqED0AM.s:3557   .text.user_pc:0000000000000000 $t
     /tmp/ccqED0AM.s:3565   .text.user_pc:0000000000000000 user_pc
     /tmp/ccqED0AM.s:3597   .text.find_user_pc:0000000000000000 $t
     /tmp/ccqED0AM.s:3605   .text.find_user_pc:0000000000000000 find_user_pc
     /tmp/ccqED0AM.s:3713   .text.find_user_pc:000000000000004c $d
     /tmp/ccqED0AM.s:3719   .text.report_err:0000000000000000 $t
     /tmp/ccqED0AM.s:3727   .text.report_err:0000000000000000 report_err
     /tmp/ccqED0AM.s:3786   .text.report_err:000000000000001c $d
     /tmp/ccqED0AM.s:3791   .text.report_warn:0000000000000000 $t
     /tmp/ccqED0AM.s:3799   .text.report_warn:0000000000000000 report_warn
     /tmp/ccqED0AM.s:3919   .text.report_warn:0000000000000048 $d
     /tmp/ccqED0AM.s:3928   .text.bad_mode_error:0000000000000000 $t
     /tmp/ccqED0AM.s:3936   .text.bad_mode_error:0000000000000000 bad_mode_error
     /tmp/ccqED0AM.s:3977   .text.bad_mode_error:000000000000000c $d
     /tmp/ccqED0AM.s:3982   .text.cmderr:0000000000000000 $t
     /tmp/ccqED0AM.s:3990   .text.cmderr:0000000000000000 cmderr
ARM GAS  /tmp/ccqED0AM.s 			page 902


     /tmp/ccqED0AM.s:4047   .text.cmderr:0000000000000010 $d
     /tmp/ccqED0AM.s:4056   .text.cmdmsg:0000000000000000 $t
     /tmp/ccqED0AM.s:4064   .text.cmdmsg:0000000000000000 cmdmsg
     /tmp/ccqED0AM.s:4080   .text.rarg_roundingmode:0000000000000000 $t
     /tmp/ccqED0AM.s:4088   .text.rarg_roundingmode:0000000000000000 rarg_roundingmode
     /tmp/ccqED0AM.s:4110   .text.rarg_roundingmode:0000000000000014 $d
     /tmp/ccqED0AM.s:4115   .text.packed_from_number:0000000000000000 $t
     /tmp/ccqED0AM.s:4123   .text.packed_from_number:0000000000000000 packed_from_number
     /tmp/ccqED0AM.s:4190   .text.packed_from_number:0000000000000034 $d
     /tmp/ccqED0AM.s:4196   .text.packed128_from_number:0000000000000000 $t
     /tmp/ccqED0AM.s:4204   .text.packed128_from_number:0000000000000000 packed128_from_number
     /tmp/ccqED0AM.s:4271   .text.packed128_from_number:0000000000000034 $d
     /tmp/ccqED0AM.s:4277   .text.check_special:0000000000000000 $t
     /tmp/ccqED0AM.s:4284   .text.check_special:0000000000000000 check_special
     /tmp/ccqED0AM.s:4511   .text.check_special:00000000000000a0 $d
     /tmp/ccqED0AM.s:4517   .text.packed_from_packed128:0000000000000000 $t
     /tmp/ccqED0AM.s:4525   .text.packed_from_packed128:0000000000000000 packed_from_packed128
     /tmp/ccqED0AM.s:4568   .text.packed128_from_packed:0000000000000000 $t
     /tmp/ccqED0AM.s:4576   .text.packed128_from_packed:0000000000000000 packed128_from_packed
     /tmp/ccqED0AM.s:4619   .text.stack_size:0000000000000000 $t
     /tmp/ccqED0AM.s:4627   .text.stack_size:0000000000000000 stack_size
     /tmp/ccqED0AM.s:4678   .text.stack_size:0000000000000030 $d
     /tmp/ccqED0AM.s:4684   .text.copyreg:0000000000000000 $t
     /tmp/ccqED0AM.s:4692   .text.copyreg:0000000000000000 copyreg
     /tmp/ccqED0AM.s:4725   .text.copyreg:000000000000001c $d
     /tmp/ccqED0AM.s:4730   .text.set_lift:0000000000000000 $t
     /tmp/ccqED0AM.s:4738   .text.set_lift:0000000000000000 set_lift
     /tmp/ccqED0AM.s:4756   .text.set_lift:000000000000000c $d
     /tmp/ccqED0AM.s:4761   .text.entry_rpn_on_off:0000000000000000 $t
     /tmp/ccqED0AM.s:4769   .text.entry_rpn_on_off:0000000000000000 entry_rpn_on_off
     /tmp/ccqED0AM.s:4806   .text.entry_rpn_on_off:0000000000000030 $d
     /tmp/ccqED0AM.s:4811   .text.is_dblmode:0000000000000000 $t
     /tmp/ccqED0AM.s:4819   .text.is_dblmode:0000000000000000 is_dblmode
     /tmp/ccqED0AM.s:4841   .text.is_dblmode:000000000000001c $d
     /tmp/ccqED0AM.s:4846   .text.is_usrdblmode:0000000000000000 $t
     /tmp/ccqED0AM.s:4854   .text.is_usrdblmode:0000000000000000 is_usrdblmode
     /tmp/ccqED0AM.s:4896   .text.is_usrdblmode:000000000000002c $d
     /tmp/ccqED0AM.s:4902   .text.s_to_i:0000000000000000 $t
     /tmp/ccqED0AM.s:4910   .text.s_to_i:0000000000000000 s_to_i
     /tmp/ccqED0AM.s:5058   .text.digit:0000000000000000 $t
     /tmp/ccqED0AM.s:5065   .text.digit:0000000000000000 digit
     /tmp/ccqED0AM.s:5610   .text.digit:0000000000000184 $d
     /tmp/ccqED0AM.s:5617   .text.s_to_ull:0000000000000000 $t
     /tmp/ccqED0AM.s:5625   .text.s_to_ull:0000000000000000 s_to_ull
     /tmp/ccqED0AM.s:5719   .text.get_cmdline:0000000000000000 $t
     /tmp/ccqED0AM.s:5727   .text.get_cmdline:0000000000000000 get_cmdline
     /tmp/ccqED0AM.s:5755   .text.get_cmdline:0000000000000014 $d
     /tmp/ccqED0AM.s:5760   .text.is_bad_cmdline:0000000000000000 $t
     /tmp/ccqED0AM.s:5768   .text.is_bad_cmdline:0000000000000000 is_bad_cmdline
     /tmp/ccqED0AM.s:5783   .text.get_flash_reg_n:0000000000000000 $t
     /tmp/ccqED0AM.s:5791   .text.get_flash_reg_n:0000000000000000 get_flash_reg_n
     /tmp/ccqED0AM.s:5818   .text.get_flash_reg_n:000000000000001c $d
     /tmp/ccqED0AM.s:5823   .text.get_const:0000000000000000 $t
     /tmp/ccqED0AM.s:5831   .text.get_const:0000000000000000 get_const
     /tmp/ccqED0AM.s:5979   .text.get_const:0000000000000074 $d
     /tmp/ccqED0AM.s:5987   .text.get_reg_n:0000000000000000 $t
     /tmp/ccqED0AM.s:5995   .text.get_reg_n:0000000000000000 get_reg_n
ARM GAS  /tmp/ccqED0AM.s 			page 903


     /tmp/ccqED0AM.s:6219   .text.get_reg_n:00000000000000b0 $d
     /tmp/ccqED0AM.s:6226   .text.get_stack:0000000000000000 $t
     /tmp/ccqED0AM.s:6234   .text.get_stack:0000000000000000 get_stack
     /tmp/ccqED0AM.s:6254   .text.lift:0000000000000000 $t
     /tmp/ccqED0AM.s:6262   .text.lift:0000000000000000 lift
     /tmp/ccqED0AM.s:6441   .text.lift:0000000000000064 $d
     /tmp/ccqED0AM.s:6449   .text.lift_if_enabled:0000000000000000 $t
     /tmp/ccqED0AM.s:6457   .text.lift_if_enabled:0000000000000000 lift_if_enabled
     /tmp/ccqED0AM.s:6487   .text.lift_if_enabled:0000000000000010 $d
     /tmp/ccqED0AM.s:6492   .text.lift2_if_enabled:0000000000000000 $t
     /tmp/ccqED0AM.s:6499   .text.lift2_if_enabled:0000000000000000 lift2_if_enabled
     /tmp/ccqED0AM.s:6610   .text.lift2_if_enabled:0000000000000040 $d
     /tmp/ccqED0AM.s:6619   .text.lower:0000000000000000 $t
     /tmp/ccqED0AM.s:6626   .text.lower:0000000000000000 lower
     /tmp/ccqED0AM.s:6808   .text.lower:000000000000006c $d
     /tmp/ccqED0AM.s:6816   .text.get_stack_top:0000000000000000 $t
     /tmp/ccqED0AM.s:6823   .text.get_stack_top:0000000000000000 get_stack_top
     /tmp/ccqED0AM.s:6908   .text.get_stack_top:0000000000000034 $d
     /tmp/ccqED0AM.s:6916   .text.roll_down:0000000000000000 $t
     /tmp/ccqED0AM.s:6924   .text.roll_down:0000000000000000 roll_down
     /tmp/ccqED0AM.s:7042   .text.roll_down:000000000000004c $d
                            *COM*:0000000000000004 StackBase
     /tmp/ccqED0AM.s:7048   .text.cpx_roll_down:0000000000000000 $t
     /tmp/ccqED0AM.s:7056   .text.cpx_roll_down:0000000000000000 cpx_roll_down
     /tmp/ccqED0AM.s:7116   .text.cpx_roll_down:000000000000002c $d
     /tmp/ccqED0AM.s:7122   .text.roll_up:0000000000000000 $t
     /tmp/ccqED0AM.s:7130   .text.roll_up:0000000000000000 roll_up
     /tmp/ccqED0AM.s:7257   .text.roll_up:000000000000004c $d
     /tmp/ccqED0AM.s:7263   .text.cpx_roll_up:0000000000000000 $t
     /tmp/ccqED0AM.s:7271   .text.cpx_roll_up:0000000000000000 cpx_roll_up
     /tmp/ccqED0AM.s:7331   .text.cpx_roll_up:000000000000002c $d
     /tmp/ccqED0AM.s:7337   .text.fill:0000000000000000 $t
     /tmp/ccqED0AM.s:7345   .text.fill:0000000000000000 fill
     /tmp/ccqED0AM.s:7500   .text.fill:0000000000000064 $d
     /tmp/ccqED0AM.s:7509   .text.lower2:0000000000000000 $t
     /tmp/ccqED0AM.s:7516   .text.lower2:0000000000000000 lower2
     /tmp/ccqED0AM.s:7698   .text.lower2:000000000000006c $d
     /tmp/ccqED0AM.s:7706   .text.drop:0000000000000000 $t
     /tmp/ccqED0AM.s:7714   .text.drop:0000000000000000 drop
     /tmp/ccqED0AM.s:7757   .text.drop:000000000000001c $d
     /tmp/ccqED0AM.s:7762   .text.copyreg_n:0000000000000000 $t
     /tmp/ccqED0AM.s:7770   .text.copyreg_n:0000000000000000 copyreg_n
     /tmp/ccqED0AM.s:7854   .text.copyreg_n:0000000000000038 $d
     /tmp/ccqED0AM.s:7861   .text.setlastX:0000000000000000 $t
     /tmp/ccqED0AM.s:7869   .text.setlastX:0000000000000000 setlastX
     /tmp/ccqED0AM.s:7885   .text.setlastXY:0000000000000000 $t
     /tmp/ccqED0AM.s:7892   .text.setlastXY:0000000000000000 setlastXY
     /tmp/ccqED0AM.s:7935   .text.getRegister:0000000000000000 $t
     /tmp/ccqED0AM.s:7943   .text.getRegister:0000000000000000 getRegister
     /tmp/ccqED0AM.s:8005   .text.getRegister:0000000000000030 $d
     /tmp/ccqED0AM.s:8010   .text.getX:0000000000000000 $t
     /tmp/ccqED0AM.s:8018   .text.getX:0000000000000000 getX
     /tmp/ccqED0AM.s:8036   .text.getY:0000000000000000 $t
     /tmp/ccqED0AM.s:8044   .text.getY:0000000000000000 getY
     /tmp/ccqED0AM.s:8061   .text.getXY:0000000000000000 $t
     /tmp/ccqED0AM.s:8069   .text.getXY:0000000000000000 getXY
     /tmp/ccqED0AM.s:8130   .text.getXYZ:0000000000000000 $t
ARM GAS  /tmp/ccqED0AM.s 			page 904


     /tmp/ccqED0AM.s:8138   .text.getXYZ:0000000000000000 getXYZ
     /tmp/ccqED0AM.s:8231   .text.getYZ:0000000000000000 $t
     /tmp/ccqED0AM.s:8239   .text.getYZ:0000000000000000 getYZ
     /tmp/ccqED0AM.s:8300   .text.getXYZT:0000000000000000 $t
     /tmp/ccqED0AM.s:8308   .text.getXYZT:0000000000000000 getXYZT
     /tmp/ccqED0AM.s:8354   .text.storcl_op:0000000000000000 $t
     /tmp/ccqED0AM.s:8361   .text.storcl_op:0000000000000000 storcl_op
     /tmp/ccqED0AM.s:8435   .text.storcl_op:000000000000002c $d
     /tmp/ccqED0AM.s:8442   .text.storcl_op:0000000000000032 $t
     /tmp/ccqED0AM.s:8554   .text.storcl_cop:0000000000000000 $t
     /tmp/ccqED0AM.s:8561   .text.storcl_cop:0000000000000000 storcl_cop
     /tmp/ccqED0AM.s:8671   .text.storcl_cop:0000000000000040 $d
     /tmp/ccqED0AM.s:8676   .text.storcl_cop:0000000000000044 $t
     /tmp/ccqED0AM.s:8789   .text.cpx_enter:0000000000000000 $t
     /tmp/ccqED0AM.s:8797   .text.cpx_enter:0000000000000000 cpx_enter
     /tmp/ccqED0AM.s:8893   .text.cpx_enter:0000000000000048 $d
     /tmp/ccqED0AM.s:8899   .text.cpx_fill:0000000000000000 $t
     /tmp/ccqED0AM.s:8907   .text.cpx_fill:0000000000000000 cpx_fill
     /tmp/ccqED0AM.s:9108   .text.cpx_fill:0000000000000084 $d
     /tmp/ccqED0AM.s:9118   .text.setRegister:0000000000000000 $t
     /tmp/ccqED0AM.s:9126   .text.setRegister:0000000000000000 setRegister
     /tmp/ccqED0AM.s:9221   .text.setRegister:000000000000004c $d
                            *COM*:0000000000000018 Ctx
     /tmp/ccqED0AM.s:9227   .text.setX:0000000000000000 $t
     /tmp/ccqED0AM.s:9235   .text.setX:0000000000000000 setX
     /tmp/ccqED0AM.s:9257   .text.rarg_round:0000000000000000 $t
     /tmp/ccqED0AM.s:9265   .text.rarg_round:0000000000000000 rarg_round
     /tmp/ccqED0AM.s:9446   .text.rarg_round:0000000000000064 $d
     /tmp/ccqED0AM.s:9453   .text.setY:0000000000000000 $t
     /tmp/ccqED0AM.s:9461   .text.setY:0000000000000000 setY
     /tmp/ccqED0AM.s:9483   .text.setXY:0000000000000000 $t
     /tmp/ccqED0AM.s:9491   .text.setXY:0000000000000000 setXY
     /tmp/ccqED0AM.s:9553   .text.setXY:0000000000000028 $d
     /tmp/ccqED0AM.s:9558   .text.convert_regK:0000000000000000 $t
     /tmp/ccqED0AM.s:9566   .text.convert_regK:0000000000000000 convert_regK
     /tmp/ccqED0AM.s:9742   .text.convert_regK:00000000000000ac $d
     /tmp/ccqED0AM.s:9752   .text.cpx_nop:0000000000000000 $t
     /tmp/ccqED0AM.s:9760   .text.cpx_nop:0000000000000000 cpx_nop
     /tmp/ccqED0AM.s:9785   .text.cpx_nop:0000000000000016 $d
     /tmp/ccqED0AM.s:9797   .text.cpx_nop:0000000000000022 $t
     /tmp/ccqED0AM.s:10081  .text.cpx_nop:0000000000000164 $d
     /tmp/ccqED0AM.s:10088  .text.get_reg_n_int:0000000000000000 $t
     /tmp/ccqED0AM.s:10096  .text.get_reg_n_int:0000000000000000 get_reg_n_int
     /tmp/ccqED0AM.s:10133  .text.storcl_intop:0000000000000000 $t
     /tmp/ccqED0AM.s:10140  .text.storcl_intop:0000000000000000 storcl_intop
     /tmp/ccqED0AM.s:10232  .text.storcl_intop:0000000000000038 $d
     /tmp/ccqED0AM.s:10238  .text.storcl_intop:000000000000003e $t
     /tmp/ccqED0AM.s:10340  .text.incdec:0000000000000000 $t
     /tmp/ccqED0AM.s:10347  .text.incdec:0000000000000000 incdec
     /tmp/ccqED0AM.s:10528  .text.incdec:0000000000000094 $d
     /tmp/ccqED0AM.s:10535  .text.set_reg_n_int:0000000000000000 $t
     /tmp/ccqED0AM.s:10543  .text.set_reg_n_int:0000000000000000 set_reg_n_int
     /tmp/ccqED0AM.s:10576  .text.get_reg_n_int_sgn:0000000000000000 $t
     /tmp/ccqED0AM.s:10584  .text.get_reg_n_int_sgn:0000000000000000 get_reg_n_int_sgn
     /tmp/ccqED0AM.s:10664  .text.get_reg_n_int_sgn:0000000000000034 $d
     /tmp/ccqED0AM.s:10669  .text.get_keycode_from_reg:0000000000000000 $t
     /tmp/ccqED0AM.s:10676  .text.get_keycode_from_reg:0000000000000000 get_keycode_from_reg
ARM GAS  /tmp/ccqED0AM.s 			page 905


     /tmp/ccqED0AM.s:10756  .text.get_keycode_from_reg:000000000000002c $d
     /tmp/ccqED0AM.s:10761  .text.getX_int:0000000000000000 $t
     /tmp/ccqED0AM.s:10769  .text.getX_int:0000000000000000 getX_int
     /tmp/ccqED0AM.s:10785  .text.getX_int_sgn:0000000000000000 $t
     /tmp/ccqED0AM.s:10793  .text.getX_int_sgn:0000000000000000 getX_int_sgn
     /tmp/ccqED0AM.s:10815  .text.set_reg_n_int_sgn:0000000000000000 $t
     /tmp/ccqED0AM.s:10823  .text.set_reg_n_int_sgn:0000000000000000 set_reg_n_int_sgn
     /tmp/ccqED0AM.s:10949  .text.set_reg_n_int_sgn:0000000000000060 $d
     /tmp/ccqED0AM.s:10955  .text.op_roundingmode:0000000000000000 $t
     /tmp/ccqED0AM.s:10963  .text.op_roundingmode:0000000000000000 op_roundingmode
     /tmp/ccqED0AM.s:11027  .text.op_roundingmode:0000000000000024 $d
     /tmp/ccqED0AM.s:11032  .text.register_from_int:0000000000000000 $t
     /tmp/ccqED0AM.s:11039  .text.register_from_int:0000000000000000 register_from_int
     /tmp/ccqED0AM.s:11136  .text.register_from_int:000000000000005c $d
     /tmp/ccqED0AM.s:11142  .text.int_from_register:0000000000000000 $t
     /tmp/ccqED0AM.s:11149  .text.int_from_register:0000000000000000 int_from_register
     /tmp/ccqED0AM.s:11220  .text.int_from_register:0000000000000044 $d
     /tmp/ccqED0AM.s:11225  .text.switch_to_int:0000000000000000 $t
     /tmp/ccqED0AM.s:11232  .text.switch_to_int:0000000000000000 switch_to_int
     /tmp/ccqED0AM.s:11383  .text.switch_to_int:0000000000000078 $d
     /tmp/ccqED0AM.s:11391  .text.process_cmdline.part.0:0000000000000000 $t
     /tmp/ccqED0AM.s:11398  .text.process_cmdline.part.0:0000000000000000 process_cmdline.part.0
     /tmp/ccqED0AM.s:11985  .text.process_cmdline.part.0:000000000000023c $d
                            *COM*:0000000000000004 XromRunning
     /tmp/ccqED0AM.s:11996  .text.process_cmdline:0000000000000000 $t
     /tmp/ccqED0AM.s:12004  .text.process_cmdline:0000000000000000 process_cmdline
     /tmp/ccqED0AM.s:12026  .text.process_cmdline:000000000000000c $d
     /tmp/ccqED0AM.s:12031  .text.cpx_pi:0000000000000000 $t
     /tmp/ccqED0AM.s:12039  .text.cpx_pi:0000000000000000 cpx_pi
     /tmp/ccqED0AM.s:12277  .text.cpx_pi:00000000000000bc $d
     /tmp/ccqED0AM.s:12285  .text.process_cmdline_set_lift:0000000000000000 $t
     /tmp/ccqED0AM.s:12293  .text.process_cmdline_set_lift:0000000000000000 process_cmdline_set_lift
     /tmp/ccqED0AM.s:12359  .text.process_cmdline_set_lift:0000000000000020 $d
     /tmp/ccqED0AM.s:12364  .text.setX_int:0000000000000000 $t
     /tmp/ccqED0AM.s:12372  .text.setX_int:0000000000000000 setX_int
     /tmp/ccqED0AM.s:12423  .text.do_rcl:0000000000000000 $t
     /tmp/ccqED0AM.s:12430  .text.do_rcl:0000000000000000 do_rcl
     /tmp/ccqED0AM.s:12768  .text.do_rcl:00000000000000cc $d
     /tmp/ccqED0AM.s:12779  .text.setX_int_sgn:0000000000000000 $t
     /tmp/ccqED0AM.s:12787  .text.setX_int_sgn:0000000000000000 setX_int_sgn
     /tmp/ccqED0AM.s:12821  .text.zero_regs:0000000000000000 $t
     /tmp/ccqED0AM.s:12829  .text.zero_regs:0000000000000000 zero_regs
     /tmp/ccqED0AM.s:12867  .text.zero_regs:0000000000000024 $d
     /tmp/ccqED0AM.s:12872  .text.move_regs:0000000000000000 $t
     /tmp/ccqED0AM.s:12880  .text.move_regs:0000000000000000 move_regs
     /tmp/ccqED0AM.s:12933  .text.move_regs:0000000000000024 $d
     /tmp/ccqED0AM.s:12938  .text.zero_X:0000000000000000 $t
     /tmp/ccqED0AM.s:12946  .text.zero_X:0000000000000000 zero_X
     /tmp/ccqED0AM.s:12961  .text.zero_X:0000000000000008 $d
     /tmp/ccqED0AM.s:12966  .text.zero_Y:0000000000000000 $t
     /tmp/ccqED0AM.s:12974  .text.zero_Y:0000000000000000 zero_Y
     /tmp/ccqED0AM.s:13002  .text.clrx:0000000000000000 $t
     /tmp/ccqED0AM.s:13010  .text.clrx:0000000000000000 clrx
     /tmp/ccqED0AM.s:13126  .text.clrx:000000000000006c $d
     /tmp/ccqED0AM.s:13133  .text.clrstk:0000000000000000 $t
     /tmp/ccqED0AM.s:13141  .text.clrstk:0000000000000000 clrstk
     /tmp/ccqED0AM.s:13266  .text.clrstk:000000000000005c $d
ARM GAS  /tmp/ccqED0AM.s 			page 906


     /tmp/ccqED0AM.s:13276  .text.clrreg:0000000000000000 $t
     /tmp/ccqED0AM.s:13284  .text.clrreg:0000000000000000 clrreg
     /tmp/ccqED0AM.s:13789  .text.clrreg:0000000000000120 $d
     /tmp/ccqED0AM.s:13799  .text.clrretstk:0000000000000000 $t
     /tmp/ccqED0AM.s:13807  .text.clrretstk:0000000000000000 clrretstk
     /tmp/ccqED0AM.s:13832  .text.clrretstk:0000000000000018 $d
     /tmp/ccqED0AM.s:13837  .text.clrretstk_pc:0000000000000000 $t
     /tmp/ccqED0AM.s:13845  .text.clrretstk_pc:0000000000000000 clrretstk_pc
     /tmp/ccqED0AM.s:13932  .text.clrretstk_pc:0000000000000028 $d
     /tmp/ccqED0AM.s:13937  .text.cmdconst:0000000000000000 $t
     /tmp/ccqED0AM.s:13945  .text.cmdconst:0000000000000000 cmdconst
     /tmp/ccqED0AM.s:14240  .text.cmdconst:00000000000000c4 $d
     /tmp/ccqED0AM.s:14250  .text.cmdsto:0000000000000000 $t
     /tmp/ccqED0AM.s:14258  .text.cmdsto:0000000000000000 cmdsto
     /tmp/ccqED0AM.s:14448  .text.cmdsto:0000000000000078 $d
     /tmp/ccqED0AM.s:14454  .text.cmdrcl:0000000000000000 $t
     /tmp/ccqED0AM.s:14462  .text.cmdrcl:0000000000000000 cmdrcl
     /tmp/ccqED0AM.s:14478  .text.cmdcsto:0000000000000000 $t
     /tmp/ccqED0AM.s:14486  .text.cmdcsto:0000000000000000 cmdcsto
     /tmp/ccqED0AM.s:14763  .text.cmdcsto:00000000000000c0 $d
     /tmp/ccqED0AM.s:14771  .text.cmdcrcl:0000000000000000 $t
     /tmp/ccqED0AM.s:14779  .text.cmdcrcl:0000000000000000 cmdcrcl
     /tmp/ccqED0AM.s:15151  .text.cmdcrcl:00000000000000f8 $d
     /tmp/ccqED0AM.s:15161  .text.cmdircl:0000000000000000 $t
     /tmp/ccqED0AM.s:15169  .text.cmdircl:0000000000000000 cmdircl
     /tmp/ccqED0AM.s:15213  .text.cmdircl:000000000000001c $d
     /tmp/ccqED0AM.s:15218  .text.cmdrrcl:0000000000000000 $t
     /tmp/ccqED0AM.s:15226  .text.cmdrrcl:0000000000000000 cmdrrcl
     /tmp/ccqED0AM.s:15384  .text.cmdrrcl:0000000000000080 $d
     /tmp/ccqED0AM.s:15394  .text.swap_reg:0000000000000000 $t
     /tmp/ccqED0AM.s:15402  .text.swap_reg:0000000000000000 swap_reg
     /tmp/ccqED0AM.s:15543  .text.swap_reg:0000000000000060 $d
     /tmp/ccqED0AM.s:15548  .text.cmdswap:0000000000000000 $t
     /tmp/ccqED0AM.s:15556  .text.cmdswap:0000000000000000 cmdswap
     /tmp/ccqED0AM.s:15703  .text.cmdswap:0000000000000094 $d
     /tmp/ccqED0AM.s:15709  .text.cmdview:0000000000000000 $t
     /tmp/ccqED0AM.s:15717  .text.cmdview:0000000000000000 cmdview
     /tmp/ccqED0AM.s:15801  .text.cmdview:0000000000000050 $d
                            *COM*:0000000000000004 ShowRegister
     /tmp/ccqED0AM.s:15808  .text.get_stack_size:0000000000000000 $t
     /tmp/ccqED0AM.s:15816  .text.get_stack_size:0000000000000000 get_stack_size
     /tmp/ccqED0AM.s:15914  .text.get_stack_size:0000000000000040 $d
     /tmp/ccqED0AM.s:15922  .text.get_word_size:0000000000000000 $t
     /tmp/ccqED0AM.s:15930  .text.get_word_size:0000000000000000 get_word_size
     /tmp/ccqED0AM.s:15973  .text.get_sign_mode:0000000000000000 $t
     /tmp/ccqED0AM.s:15981  .text.get_sign_mode:0000000000000000 get_sign_mode
     /tmp/ccqED0AM.s:16037  .text.get_sign_mode:0000000000000024 $d
     /tmp/ccqED0AM.s:16042  .text.get_base:0000000000000000 $t
     /tmp/ccqED0AM.s:16050  .text.get_base:0000000000000000 get_base
     /tmp/ccqED0AM.s:16093  .text.DM42_Ticker:0000000000000000 $t
     /tmp/ccqED0AM.s:16101  .text.DM42_Ticker:0000000000000000 DM42_Ticker
     /tmp/ccqED0AM.s:16131  .text.DM42_Ticker:0000000000000014 $d
     /tmp/ccqED0AM.s:16136  .text.op_ticks:0000000000000000 $t
     /tmp/ccqED0AM.s:16144  .text.op_ticks:0000000000000000 op_ticks
     /tmp/ccqED0AM.s:16221  .text.op_ticks:0000000000000024 $d
     /tmp/ccqED0AM.s:16226  .text.op_voltage:0000000000000000 $t
     /tmp/ccqED0AM.s:16234  .text.op_voltage:0000000000000000 op_voltage
ARM GAS  /tmp/ccqED0AM.s 			page 907


     /tmp/ccqED0AM.s:16337  .text.op_voltage:0000000000000058 $d
     /tmp/ccqED0AM.s:16344  .text.free_mem:0000000000000000 $t
     /tmp/ccqED0AM.s:16352  .text.free_mem:0000000000000000 free_mem
     /tmp/ccqED0AM.s:16376  .text.free_mem:0000000000000010 $d
     /tmp/ccqED0AM.s:16382  .text.free_flash:0000000000000000 $t
     /tmp/ccqED0AM.s:16390  .text.free_flash:0000000000000000 free_flash
     /tmp/ccqED0AM.s:16409  .text.free_flash:0000000000000010 $d
     /tmp/ccqED0AM.s:16414  .text.get_mem:0000000000000000 $t
     /tmp/ccqED0AM.s:16422  .text.get_mem:0000000000000000 get_mem
     /tmp/ccqED0AM.s:16676  .text.get_mem:00000000000000a0 $d
     /tmp/ccqED0AM.s:16684  .text.cmdputkey:0000000000000000 $t
     /tmp/ccqED0AM.s:16692  .text.cmdputkey:0000000000000000 cmdputkey
     /tmp/ccqED0AM.s:16774  .text.cmdputkey:0000000000000034 $d
     /tmp/ccqED0AM.s:16780  .text.cmdkeytype:0000000000000000 $t
     /tmp/ccqED0AM.s:16788  .text.cmdkeytype:0000000000000000 cmdkeytype
     /tmp/ccqED0AM.s:16922  .text.cmdkeytype:0000000000000048 $d
     /tmp/ccqED0AM.s:16931  .text.cmdstostk:0000000000000000 $t
     /tmp/ccqED0AM.s:16939  .text.cmdstostk:0000000000000000 cmdstostk
     /tmp/ccqED0AM.s:16989  .text.cmdrclstk:0000000000000000 $t
     /tmp/ccqED0AM.s:16997  .text.cmdrclstk:0000000000000000 cmdrclstk
     /tmp/ccqED0AM.s:17050  .text.find_opcode_from:0000000000000000 $t
     /tmp/ccqED0AM.s:17058  .text.find_opcode_from:0000000000000000 find_opcode_from
     /tmp/ccqED0AM.s:17230  .text.find_opcode_from:000000000000006c $d
     /tmp/ccqED0AM.s:17235  .text.find_label_from:0000000000000000 $t
     /tmp/ccqED0AM.s:17243  .text.find_label_from:0000000000000000 find_label_from
     /tmp/ccqED0AM.s:17263  .text.op_rtn:0000000000000000 $t
     /tmp/ccqED0AM.s:17271  .text.op_rtn:0000000000000000 op_rtn
     /tmp/ccqED0AM.s:17305  .text.op_rtn:0000000000000020 $d
     /tmp/ccqED0AM.s:17311  .text.op_popusr:0000000000000000 $t
     /tmp/ccqED0AM.s:17319  .text.op_popusr:0000000000000000 op_popusr
     /tmp/ccqED0AM.s:17405  .text.op_popusr:000000000000005c $d
                            *COM*:0000000000000004 UserLocalRegs
                            *COM*:0000000000000004 XromUserPc
     /tmp/ccqED0AM.s:17413  .text.findmultilbl:0000000000000000 $t
     /tmp/ccqED0AM.s:17421  .text.findmultilbl:0000000000000000 findmultilbl
     /tmp/ccqED0AM.s:17534  .text.findmultilbl:0000000000000048 $d
     /tmp/ccqED0AM.s:17539  .text.multiumenu:0000000000000000 $t
     /tmp/ccqED0AM.s:17547  .text.multiumenu:0000000000000000 multiumenu
     /tmp/ccqED0AM.s:17584  .text.get_dispmode_digs:0000000000000000 $t
     /tmp/ccqED0AM.s:17592  .text.get_dispmode_digs:0000000000000000 get_dispmode_digs
     /tmp/ccqED0AM.s:17654  .text.get_dispmode_digs:000000000000002c $d
     /tmp/ccqED0AM.s:17659  .text.set_dispmode_digs:0000000000000000 $t
     /tmp/ccqED0AM.s:17667  .text.set_dispmode_digs:0000000000000000 set_dispmode_digs
     /tmp/ccqED0AM.s:17725  .text.set_dispmode_digs:0000000000000038 $d
     /tmp/ccqED0AM.s:17730  .text.convC2F:0000000000000000 $t
     /tmp/ccqED0AM.s:17738  .text.convC2F:0000000000000000 convC2F
     /tmp/ccqED0AM.s:17780  .text.convC2F:000000000000001c $d
     /tmp/ccqED0AM.s:17786  .text.convF2C:0000000000000000 $t
     /tmp/ccqED0AM.s:17794  .text.convF2C:0000000000000000 convF2C
     /tmp/ccqED0AM.s:17836  .text.convF2C:000000000000001c $d
     /tmp/ccqED0AM.s:17842  .text.convDB2AR:0000000000000000 $t
     /tmp/ccqED0AM.s:17850  .text.convDB2AR:0000000000000000 convDB2AR
     /tmp/ccqED0AM.s:17892  .text.convDB2AR:000000000000001c $d
     /tmp/ccqED0AM.s:17897  .text.convAR2DB:0000000000000000 $t
     /tmp/ccqED0AM.s:17905  .text.convAR2DB:0000000000000000 convAR2DB
     /tmp/ccqED0AM.s:17946  .text.convAR2DB:000000000000001c $d
     /tmp/ccqED0AM.s:17951  .text.convDB2PR:0000000000000000 $t
ARM GAS  /tmp/ccqED0AM.s 			page 908


     /tmp/ccqED0AM.s:17959  .text.convDB2PR:0000000000000000 convDB2PR
     /tmp/ccqED0AM.s:18000  .text.convPR2DB:0000000000000000 $t
     /tmp/ccqED0AM.s:18008  .text.convPR2DB:0000000000000000 convPR2DB
     /tmp/ccqED0AM.s:18049  .text.do_conv:0000000000000000 $t
     /tmp/ccqED0AM.s:18057  .text.do_conv:0000000000000000 do_conv
     /tmp/ccqED0AM.s:18149  .text.do_conv:0000000000000040 $d
     /tmp/ccqED0AM.s:18154  .text.cmdconv:0000000000000000 $t
     /tmp/ccqED0AM.s:18162  .text.cmdconv:0000000000000000 cmdconv
     /tmp/ccqED0AM.s:18250  .text.cmdconv:000000000000003c $d
     /tmp/ccqED0AM.s:18255  .rodata.fin_tst.str1.4:0000000000000000 $d
     /tmp/ccqED0AM.s:18262  .text.fin_tst:0000000000000000 $t
     /tmp/ccqED0AM.s:18270  .text.fin_tst:0000000000000000 fin_tst
     /tmp/ccqED0AM.s:18367  .text.fin_tst:0000000000000050 $d
                            *COM*:0000000000000004 Tracing
     /tmp/ccqED0AM.s:18377  .text.check_mode:0000000000000000 $t
     /tmp/ccqED0AM.s:18385  .text.check_mode:0000000000000000 check_mode
     /tmp/ccqED0AM.s:18420  .text.check_mode:0000000000000024 $d
     /tmp/ccqED0AM.s:18425  .text.check_dblmode:0000000000000000 $t
     /tmp/ccqED0AM.s:18433  .text.check_dblmode:0000000000000000 check_dblmode
     /tmp/ccqED0AM.s:18466  .text.check_dblmode:000000000000001c $d
     /tmp/ccqED0AM.s:18471  .text.op_query_xtal:0000000000000000 $t
     /tmp/ccqED0AM.s:18479  .text.op_query_xtal:0000000000000000 op_query_xtal
     /tmp/ccqED0AM.s:18497  .text.isTop:0000000000000000 $t
     /tmp/ccqED0AM.s:18505  .text.isTop:0000000000000000 isTop
     /tmp/ccqED0AM.s:18571  .text.isTop:000000000000003c $d
     /tmp/ccqED0AM.s:18580  .text.cmdlblp:0000000000000000 $t
     /tmp/ccqED0AM.s:18588  .text.cmdlblp:0000000000000000 cmdlblp
     /tmp/ccqED0AM.s:18640  .text.cmdlblp:0000000000000024 $d
     /tmp/ccqED0AM.s:18645  .text.cmdmultilblp:0000000000000000 $t
     /tmp/ccqED0AM.s:18653  .text.cmdmultilblp:0000000000000000 cmdmultilblp
     /tmp/ccqED0AM.s:18688  .text.cmdkeyp:0000000000000000 $t
     /tmp/ccqED0AM.s:18696  .text.cmdkeyp:0000000000000000 cmdkeyp
     /tmp/ccqED0AM.s:18791  .text.cmdkeyp:0000000000000044 $d
     /tmp/ccqED0AM.s:18796  .text.do_tst:0000000000000000 $t
     /tmp/ccqED0AM.s:18803  .text.do_tst:0000000000000000 do_tst
     /tmp/ccqED0AM.s:18969  .text.do_tst:0000000000000064 $d
     /tmp/ccqED0AM.s:19257  .text.do_tst:0000000000000168 $d
     /tmp/ccqED0AM.s:19264  .text.do_ztst:0000000000000000 $t
     /tmp/ccqED0AM.s:19271  .text.do_ztst:0000000000000000 do_ztst
     /tmp/ccqED0AM.s:19526  .text.do_ztst:00000000000000a0 $d
     /tmp/ccqED0AM.s:19533  .text.op_query_print:0000000000000000 $t
     /tmp/ccqED0AM.s:19541  .text.op_query_print:0000000000000000 op_query_print
     /tmp/ccqED0AM.s:19553  .text.check_zero:0000000000000000 $t
     /tmp/ccqED0AM.s:19561  .text.check_zero:0000000000000000 check_zero
     /tmp/ccqED0AM.s:19705  .text.check_zero:000000000000006c $d
     /tmp/ccqED0AM.s:19710  .text.cmdtest:0000000000000000 $t
     /tmp/ccqED0AM.s:19718  .text.cmdtest:0000000000000000 cmdtest
     /tmp/ccqED0AM.s:19739  .text.cmdztest:0000000000000000 $t
     /tmp/ccqED0AM.s:19747  .text.cmdztest:0000000000000000 cmdztest
     /tmp/ccqED0AM.s:19800  .text.cmdlincdec:0000000000000000 $t
     /tmp/ccqED0AM.s:19808  .text.cmdlincdec:0000000000000000 cmdlincdec
     /tmp/ccqED0AM.s:19829  .text.cmdloopz:0000000000000000 $t
     /tmp/ccqED0AM.s:19837  .text.cmdloopz:0000000000000000 cmdloopz
     /tmp/ccqED0AM.s:19870  .text.cmdloop:0000000000000000 $t
     /tmp/ccqED0AM.s:19878  .text.cmdloop:0000000000000000 cmdloop
     /tmp/ccqED0AM.s:20367  .text.cmdloop:00000000000001f4 $d
     /tmp/ccqED0AM.s:20373  .text.op_shift_digit:0000000000000000 $t
ARM GAS  /tmp/ccqED0AM.s 			page 909


     /tmp/ccqED0AM.s:20381  .text.op_shift_digit:0000000000000000 op_shift_digit
     /tmp/ccqED0AM.s:20545  .text.op_shift_digit:0000000000000060 $d
     /tmp/ccqED0AM.s:20551  .text.get_user_flag:0000000000000000 $t
     /tmp/ccqED0AM.s:20559  .text.get_user_flag:0000000000000000 get_user_flag
     /tmp/ccqED0AM.s:20597  .text.cmdflag:0000000000000000 $t
     /tmp/ccqED0AM.s:20605  .text.cmdflag:0000000000000000 cmdflag
     /tmp/ccqED0AM.s:20650  .text.cmdflag:0000000000000028 $d
     /tmp/ccqED0AM.s:20807  .text.put_user_flag:0000000000000000 $t
     /tmp/ccqED0AM.s:20815  .text.put_user_flag:0000000000000000 put_user_flag
     /tmp/ccqED0AM.s:20844  .text.clrflags:0000000000000000 $t
     /tmp/ccqED0AM.s:20852  .text.clrflags:0000000000000000 clrflags
     /tmp/ccqED0AM.s:20899  .text.clrflags:000000000000002c $d
     /tmp/ccqED0AM.s:20904  .text.intws:0000000000000000 $t
     /tmp/ccqED0AM.s:20912  .text.intws:0000000000000000 intws
     /tmp/ccqED0AM.s:21135  .text.intws:00000000000000e4 $d
     /tmp/ccqED0AM.s:21144  .text.get_maxdenom:0000000000000000 $t
     /tmp/ccqED0AM.s:21152  .text.get_maxdenom:0000000000000000 get_maxdenom
     /tmp/ccqED0AM.s:21180  .text.get_maxdenom:000000000000001c $d
     /tmp/ccqED0AM.s:21185  .rodata.op_2frac.str1.4:0000000000000000 $d
     /tmp/ccqED0AM.s:21195  .text.op_2frac:0000000000000000 $t
     /tmp/ccqED0AM.s:21203  .text.op_2frac:0000000000000000 op_2frac
     /tmp/ccqED0AM.s:21341  .text.op_2frac:0000000000000088 $d
     /tmp/ccqED0AM.s:21351  .text.op_fracdenom:0000000000000000 $t
     /tmp/ccqED0AM.s:21359  .text.op_fracdenom:0000000000000000 op_fracdenom
     /tmp/ccqED0AM.s:21514  .text.op_fracdenom:0000000000000080 $d
     /tmp/ccqED0AM.s:21519  .text.op_float:0000000000000000 $t
     /tmp/ccqED0AM.s:21527  .text.op_float:0000000000000000 op_float
     /tmp/ccqED0AM.s:21722  .text.op_float:00000000000000c4 $d
     /tmp/ccqED0AM.s:21733  .text.cmddisp:0000000000000000 $t
     /tmp/ccqED0AM.s:21741  .text.cmddisp:0000000000000000 cmddisp
     /tmp/ccqED0AM.s:21818  .text.cmddisp:0000000000000036 $d
     /tmp/ccqED0AM.s:22006  .text.cmddisp:00000000000000bc $d
     /tmp/ccqED0AM.s:22012  .text.set_int_base:0000000000000000 $t
     /tmp/ccqED0AM.s:22020  .text.set_int_base:0000000000000000 set_int_base
     /tmp/ccqED0AM.s:22127  .text.set_int_base:000000000000004c $d
     /tmp/ccqED0AM.s:22134  .text.op_fract:0000000000000000 $t
     /tmp/ccqED0AM.s:22142  .text.op_fract:0000000000000000 op_fract
     /tmp/ccqED0AM.s:22201  .text.op_fract:0000000000000040 $d
     /tmp/ccqED0AM.s:22206  .text.cmdsavem:0000000000000000 $t
     /tmp/ccqED0AM.s:22214  .text.cmdsavem:0000000000000000 cmdsavem
     /tmp/ccqED0AM.s:22248  .text.cmdsavem:0000000000000018 $d
     /tmp/ccqED0AM.s:22253  .text.set_entry:0000000000000000 $t
     /tmp/ccqED0AM.s:22261  .text.set_entry:0000000000000000 set_entry
     /tmp/ccqED0AM.s:22299  .text.set_entry:0000000000000020 $d
     /tmp/ccqED0AM.s:22306  .text.get_trig_mode:0000000000000000 $t
     /tmp/ccqED0AM.s:22314  .text.get_trig_mode:0000000000000000 get_trig_mode
     /tmp/ccqED0AM.s:22349  .text.get_trig_mode:0000000000000024 $d
     /tmp/ccqED0AM.s:22356  .text.cmdpause:0000000000000000 $t
     /tmp/ccqED0AM.s:22364  .text.cmdpause:0000000000000000 cmdpause
     /tmp/ccqED0AM.s:22404  .text.cmdpause:000000000000001c $d
                            *COM*:0000000000000001 Pause
     /tmp/ccqED0AM.s:22410  .text.op_setspeed:0000000000000000 $t
     /tmp/ccqED0AM.s:22418  .text.op_setspeed:0000000000000000 op_setspeed
     /tmp/ccqED0AM.s:22447  .text.op_setspeed:000000000000001c $d
     /tmp/ccqED0AM.s:22452  .text.op_prompt:0000000000000000 $t
     /tmp/ccqED0AM.s:22460  .text.op_prompt:0000000000000000 op_prompt
     /tmp/ccqED0AM.s:22532  .text.op_prompt:0000000000000028 $d
ARM GAS  /tmp/ccqED0AM.s 			page 910


     /tmp/ccqED0AM.s:22538  .text.XisInt:0000000000000000 $t
     /tmp/ccqED0AM.s:22546  .text.XisInt:0000000000000000 XisInt
     /tmp/ccqED0AM.s:22658  .text.XisInt:000000000000005c $d
     /tmp/ccqED0AM.s:22663  .text.XisEvenOrOdd:0000000000000000 $t
     /tmp/ccqED0AM.s:22671  .text.XisEvenOrOdd:0000000000000000 XisEvenOrOdd
     /tmp/ccqED0AM.s:22785  .text.XisEvenOrOdd:0000000000000060 $d
     /tmp/ccqED0AM.s:22790  .text.XisPrime:0000000000000000 $t
     /tmp/ccqED0AM.s:22798  .text.XisPrime:0000000000000000 XisPrime
     /tmp/ccqED0AM.s:22958  .text.XisPrime:000000000000007c $d
     /tmp/ccqED0AM.s:22964  .text.isInfinite:0000000000000000 $t
     /tmp/ccqED0AM.s:22972  .text.isInfinite:0000000000000000 isInfinite
     /tmp/ccqED0AM.s:23024  .text.isInfinite:000000000000002c $d
     /tmp/ccqED0AM.s:23029  .text.isNan:0000000000000000 $t
     /tmp/ccqED0AM.s:23037  .text.isNan:0000000000000000 isNan
     /tmp/ccqED0AM.s:23104  .text.isNan:000000000000003c $d
     /tmp/ccqED0AM.s:23109  .text.isSpecial:0000000000000000 $t
     /tmp/ccqED0AM.s:23117  .text.isSpecial:0000000000000000 isSpecial
     /tmp/ccqED0AM.s:23184  .text.isSpecial:000000000000003c $d
     /tmp/ccqED0AM.s:23189  .text.op_entryp:0000000000000000 $t
     /tmp/ccqED0AM.s:23197  .text.op_entryp:0000000000000000 op_entryp
     /tmp/ccqED0AM.s:23218  .text.op_entryp:0000000000000010 $d
     /tmp/ccqED0AM.s:23223  .text.reg_decode:0000000000000000 $t
     /tmp/ccqED0AM.s:23231  .text.reg_decode:0000000000000000 reg_decode
     /tmp/ccqED0AM.s:24037  .text.reg_decode:0000000000000220 $d
     /tmp/ccqED0AM.s:24051  .text.op_regcopy:0000000000000000 $t
     /tmp/ccqED0AM.s:24059  .text.op_regcopy:0000000000000000 op_regcopy
     /tmp/ccqED0AM.s:24162  .text.op_regcopy:0000000000000048 $d
     /tmp/ccqED0AM.s:24167  .text.op_regswap:0000000000000000 $t
     /tmp/ccqED0AM.s:24175  .text.op_regswap:0000000000000000 op_regswap
     /tmp/ccqED0AM.s:24309  .text.op_regswap:000000000000006c $d
     /tmp/ccqED0AM.s:24314  .text.op_regclr:0000000000000000 $t
     /tmp/ccqED0AM.s:24322  .text.op_regclr:0000000000000000 op_regclr
     /tmp/ccqED0AM.s:24403  .text.op_regclr:0000000000000044 $d
     /tmp/ccqED0AM.s:24408  .text.op_regsort:0000000000000000 $t
     /tmp/ccqED0AM.s:24416  .text.op_regsort:0000000000000000 op_regsort
     /tmp/ccqED0AM.s:24700  .text.reset_volatile_state:0000000000000000 $t
     /tmp/ccqED0AM.s:24708  .text.reset_volatile_state:0000000000000000 reset_volatile_state
     /tmp/ccqED0AM.s:24732  .text.reset_volatile_state:0000000000000010 $d
     /tmp/ccqED0AM.s:24737  .rodata.busy.str1.4:0000000000000000 $d
     /tmp/ccqED0AM.s:24741  .text.busy:0000000000000000 $t
     /tmp/ccqED0AM.s:24749  .text.busy:0000000000000000 busy
     /tmp/ccqED0AM.s:24788  .text.busy:0000000000000018 $d
                            *COM*:0000000000000004 Busy
     /tmp/ccqED0AM.s:24797  .text.intMonadic:0000000000000000 $t
     /tmp/ccqED0AM.s:24805  .text.intMonadic:0000000000000000 intMonadic
     /tmp/ccqED0AM.s:25034  .text.intMonadic:0000000000000084 $d
                            *COM*:0000000000000002 XeqOpCode
     /tmp/ccqED0AM.s:25044  .text.intDyadic:0000000000000000 $t
     /tmp/ccqED0AM.s:25052  .text.intDyadic:0000000000000000 intDyadic
     /tmp/ccqED0AM.s:25336  .text.intDyadic:00000000000000c0 $d
     /tmp/ccqED0AM.s:25346  .text.xeq_init_contexts:0000000000000000 $t
     /tmp/ccqED0AM.s:25354  .text.xeq_init_contexts:0000000000000000 xeq_init_contexts
     /tmp/ccqED0AM.s:25473  .text.xeq_init_contexts:0000000000000078 $d
                            *COM*:0000000000000004 ProgFree
     /tmp/ccqED0AM.s:25486  .text.not_running:0000000000000000 $t
     /tmp/ccqED0AM.s:25494  .text.not_running:0000000000000000 not_running
     /tmp/ccqED0AM.s:25549  .text.not_running:000000000000001c $d
ARM GAS  /tmp/ccqED0AM.s 			page 911


     /tmp/ccqED0AM.s:25555  .text.set_running_off_sst:0000000000000000 $t
     /tmp/ccqED0AM.s:25563  .text.set_running_off_sst:0000000000000000 set_running_off_sst
     /tmp/ccqED0AM.s:25580  .text.set_running_off_sst:0000000000000008 $d
     /tmp/ccqED0AM.s:25585  .text.set_running_on_sst:0000000000000000 $t
     /tmp/ccqED0AM.s:25593  .text.set_running_on_sst:0000000000000000 set_running_on_sst
     /tmp/ccqED0AM.s:25610  .text.set_running_on_sst:0000000000000008 $d
     /tmp/ccqED0AM.s:25615  .text.set_running_off:0000000000000000 $t
     /tmp/ccqED0AM.s:25623  .text.set_running_off:0000000000000000 set_running_off
     /tmp/ccqED0AM.s:25667  .text.set_running_off:000000000000001c $d
     /tmp/ccqED0AM.s:25673  .text.set_running_on:0000000000000000 $t
     /tmp/ccqED0AM.s:25681  .text.set_running_on:0000000000000000 set_running_on
     /tmp/ccqED0AM.s:25780  .text.set_running_on:0000000000000034 $d
     /tmp/ccqED0AM.s:25788  .text.gsbgto:0000000000000000 $t
     /tmp/ccqED0AM.s:25795  .text.gsbgto:0000000000000000 gsbgto
     /tmp/ccqED0AM.s:25982  .text.gsbgto:0000000000000094 $d
     /tmp/ccqED0AM.s:25993  .text.cmdgtocommon:0000000000000000 $t
     /tmp/ccqED0AM.s:26001  .text.cmdgtocommon:0000000000000000 cmdgtocommon
     /tmp/ccqED0AM.s:26087  .text.cmdgtocommon:000000000000002c $d
     /tmp/ccqED0AM.s:26093  .text.cmdgto:0000000000000000 $t
     /tmp/ccqED0AM.s:26101  .text.cmdgto:0000000000000000 cmdgto
     /tmp/ccqED0AM.s:26182  .text.cmdgto:000000000000003c $d
     /tmp/ccqED0AM.s:26190  .text.branchtoalpha:0000000000000000 $t
     /tmp/ccqED0AM.s:26197  .text.branchtoalpha:0000000000000000 branchtoalpha
     /tmp/ccqED0AM.s:26254  .text.cmdalphagto:0000000000000000 $t
     /tmp/ccqED0AM.s:26262  .text.cmdalphagto:0000000000000000 cmdalphagto
     /tmp/ccqED0AM.s:26314  .text.op_gtoalpha:0000000000000000 $t
     /tmp/ccqED0AM.s:26322  .text.op_gtoalpha:0000000000000000 op_gtoalpha
     /tmp/ccqED0AM.s:26386  .text.op_gtoalpha:0000000000000030 $d
     /tmp/ccqED0AM.s:26391  .text.cmdskip:0000000000000000 $t
     /tmp/ccqED0AM.s:26399  .text.cmdskip:0000000000000000 cmdskip
     /tmp/ccqED0AM.s:26582  .text.cmdskip:0000000000000078 $d
     /tmp/ccqED0AM.s:26590  .text.cmdback:0000000000000000 $t
     /tmp/ccqED0AM.s:26598  .text.cmdback:0000000000000000 cmdback
     /tmp/ccqED0AM.s:26751  .text.cmdback:0000000000000064 $d
     /tmp/ccqED0AM.s:26759  .text.usergsb_common:0000000000000000 $t
     /tmp/ccqED0AM.s:26766  .text.usergsb_common:0000000000000000 usergsb_common
     /tmp/ccqED0AM.s:26882  .text.usergsb_common:0000000000000088 $d
     /tmp/ccqED0AM.s:26891  .text.do_usergsb:0000000000000000 $t
     /tmp/ccqED0AM.s:26899  .text.do_usergsb:0000000000000000 do_usergsb
     /tmp/ccqED0AM.s:26932  .text.do_usergsb:0000000000000014 $d
     /tmp/ccqED0AM.s:26937  .text.cmdmultigto:0000000000000000 $t
     /tmp/ccqED0AM.s:26945  .text.cmdmultigto:0000000000000000 cmdmultigto
     /tmp/ccqED0AM.s:27049  .text.cmdmultigto:000000000000004c $d
     /tmp/ccqED0AM.s:27055  .text.store_a_to_d:0000000000000000 $t
     /tmp/ccqED0AM.s:27063  .text.store_a_to_d:0000000000000000 store_a_to_d
     /tmp/ccqED0AM.s:27111  .text.store_a_to_d:0000000000000020 $d
     /tmp/ccqED0AM.s:27116  .text.cmdlocr:0000000000000000 $t
     /tmp/ccqED0AM.s:27124  .text.cmdlocr:0000000000000000 cmdlocr
     /tmp/ccqED0AM.s:27501  .text.cmdlocr:0000000000000180 $d
     /tmp/ccqED0AM.s:27509  .text.cmdxout:0000000000000000 $t
     /tmp/ccqED0AM.s:27517  .text.cmdxout:0000000000000000 cmdxout
     /tmp/ccqED0AM.s:28042  .text.cmdxout:00000000000001ec $d
     /tmp/ccqED0AM.s:28057  .text.cmdconverged:0000000000000000 $t
     /tmp/ccqED0AM.s:28065  .text.cmdconverged:0000000000000000 cmdconverged
     /tmp/ccqED0AM.s:28294  .text.cmdconverged:00000000000000e0 $d
     /tmp/ccqED0AM.s:28304  .text.cmdshuffle:0000000000000000 $t
     /tmp/ccqED0AM.s:28312  .text.cmdshuffle:0000000000000000 cmdshuffle
ARM GAS  /tmp/ccqED0AM.s 			page 912


     /tmp/ccqED0AM.s:28545  .text.cmdshuffle:0000000000000084 $d
     /tmp/ccqED0AM.s:28551  .text.cmdmode:0000000000000000 $t
     /tmp/ccqED0AM.s:28559  .text.cmdmode:0000000000000000 cmdmode
     /tmp/ccqED0AM.s:28640  .text.cmdmode:0000000000000050 $d
     /tmp/ccqED0AM.s:28645  .text.cmdlpop:0000000000000000 $t
     /tmp/ccqED0AM.s:28653  .text.cmdlpop:0000000000000000 cmdlpop
     /tmp/ccqED0AM.s:28724  .text.cmdlpop:0000000000000034 $d
     /tmp/ccqED0AM.s:28730  .text.cmdregs:0000000000000000 $t
     /tmp/ccqED0AM.s:28738  .text.cmdregs:0000000000000000 cmdregs
     /tmp/ccqED0AM.s:28918  .text.cmdregs:00000000000000ac $d
     /tmp/ccqED0AM.s:28925  .text.op_double:0000000000000000 $t
     /tmp/ccqED0AM.s:28933  .text.op_double:0000000000000000 op_double
     /tmp/ccqED0AM.s:29233  .text.op_double:000000000000011c $d
     /tmp/ccqED0AM.s:29240  .text.cmdrestm:0000000000000000 $t
     /tmp/ccqED0AM.s:29248  .text.cmdrestm:0000000000000000 cmdrestm
     /tmp/ccqED0AM.s:29428  .text.cmdrestm:0000000000000098 $d
     /tmp/ccqED0AM.s:29433  .text.cmdxin:0000000000000000 $t
     /tmp/ccqED0AM.s:29441  .text.cmdxin:0000000000000000 cmdxin
     /tmp/ccqED0AM.s:29871  .text.cmdxin:00000000000001b4 $d
     /tmp/ccqED0AM.s:29884  .rodata.xeq.str1.4:0000000000000000 $d
     /tmp/ccqED0AM.s:29888  .text.xeq:0000000000000000 $t
     /tmp/ccqED0AM.s:29896  .text.xeq:0000000000000000 xeq
     /tmp/ccqED0AM.s:30090  .text.xeq:00000000000000ae $d
     /tmp/ccqED0AM.s:30098  .text.xeq:00000000000000bc $t
     /tmp/ccqED0AM.s:30503  .text.xeq:0000000000000214 $d
     /tmp/ccqED0AM.s:30546  .text.xeq:0000000000000250 $t
     /tmp/ccqED0AM.s:34274  .text.dispatch_xrom:0000000000000000 dispatch_xrom
     /tmp/ccqED0AM.s:31109  .text.xeq:0000000000000446 $d
     /tmp/ccqED0AM.s:31153  .text.xeq:000000000000049c $t
     /tmp/ccqED0AM.s:31347  .text.xeq:000000000000052c $d
     /tmp/ccqED0AM.s:31385  .text.xeq:0000000000000550 $t
     /tmp/ccqED0AM.s:32306  .text.xeq:0000000000000868 $d
     /tmp/ccqED0AM.s:32327  .text.xeq:0000000000000890 $t
     /tmp/ccqED0AM.s:33196  .text.xeq:0000000000000bd8 $d
     /tmp/ccqED0AM.s:33209  .text.xeq:0000000000000bf4 $t
     /tmp/ccqED0AM.s:33995  .text.xeq:0000000000000ebc $d
     /tmp/ccqED0AM.s:34011  .text.xeq_single:0000000000000000 $t
     /tmp/ccqED0AM.s:34018  .text.xeq_single:0000000000000000 xeq_single
     /tmp/ccqED0AM.s:34057  .text.xeq_single:0000000000000020 $d
     /tmp/ccqED0AM.s:34062  .text.xeq_xrom2:0000000000000000 $t
     /tmp/ccqED0AM.s:34069  .text.xeq_xrom2:0000000000000000 xeq_xrom2
     /tmp/ccqED0AM.s:34217  .text.xeq_xrom2:0000000000000070 $d
     /tmp/ccqED0AM.s:34231  .text.xeq_xrom:0000000000000000 $t
     /tmp/ccqED0AM.s:34239  .text.xeq_xrom:0000000000000000 xeq_xrom
     /tmp/ccqED0AM.s:34262  .text.xeq_xrom:0000000000000010 $d
     /tmp/ccqED0AM.s:34267  .text.dispatch_xrom:0000000000000000 $t
     /tmp/ccqED0AM.s:34409  .text.dispatch_xrom:0000000000000060 $d
     /tmp/ccqED0AM.s:34419  .text.op_rs:0000000000000000 $t
     /tmp/ccqED0AM.s:34427  .text.op_rs:0000000000000000 op_rs
     /tmp/ccqED0AM.s:34571  .text.op_rs:0000000000000078 $d
     /tmp/ccqED0AM.s:34580  .text.xeqprog:0000000000000000 $t
     /tmp/ccqED0AM.s:34588  .text.xeqprog:0000000000000000 xeqprog
     /tmp/ccqED0AM.s:34708  .text.xeqprog:0000000000000068 $d
                            *COM*:0000000000000004 JustStopped
     /tmp/ccqED0AM.s:34717  .text.xeq_sst_bst:0000000000000000 $t
     /tmp/ccqED0AM.s:34725  .text.xeq_sst_bst:0000000000000000 xeq_sst_bst
     /tmp/ccqED0AM.s:34938  .text.xeq_sst_bst:000000000000009c $d
ARM GAS  /tmp/ccqED0AM.s 			page 913


     /tmp/ccqED0AM.s:34948  .text.init_34s:0000000000000000 $t
     /tmp/ccqED0AM.s:34956  .text.init_34s:0000000000000000 init_34s
     /tmp/ccqED0AM.s:35016  .text.init_34s:0000000000000034 $d
     /tmp/ccqED0AM.s:35022  .rodata.paste_raw_x.str1.4:0000000000000000 $d
     /tmp/ccqED0AM.s:35026  .text.paste_raw_x:0000000000000000 $t
     /tmp/ccqED0AM.s:35034  .text.paste_raw_x:0000000000000000 paste_raw_x
     /tmp/ccqED0AM.s:35402  .text.paste_raw_x:00000000000000f4 $d
     /tmp/ccqED0AM.s:35415  .rodata.fill_buffer_from_raw_x.str1.4:0000000000000000 $d
     /tmp/ccqED0AM.s:35419  .text.fill_buffer_from_raw_x:0000000000000000 $t
     /tmp/ccqED0AM.s:35427  .text.fill_buffer_from_raw_x:0000000000000000 fill_buffer_from_raw_x
     /tmp/ccqED0AM.s:35684  .text.fill_buffer_from_raw_x:00000000000000c4 $d
                            *COM*:0000000000000004 RectPolConv
     /tmp/ccqED0AM.s:35773  .rodata.xrom_targets:0000000000000000 xrom_targets
     /tmp/ccqED0AM.s:35713  .rodata:0000000000000000 $d
     /tmp/ccqED0AM.s:35721  .bss.result.11733:0000000000000000 $d
     /tmp/ccqED0AM.s:35725  .bss.result.11733:0000000000000000 result.11733
     /tmp/ccqED0AM.s:35728  .data.RegionTab:0000000000000000 $d
     /tmp/ccqED0AM.s:35732  .data.RegionTab:0000000000000000 RegionTab
     /tmp/ccqED0AM.s:35738  .rodata.StackRegMask:0000000000000000 $d
     /tmp/ccqED0AM.s:35742  .rodata.StackRegMask:0000000000000000 StackRegMask
     /tmp/ccqED0AM.s:35746  .rodata.convergence_tolerances:0000000000000000 $d
     /tmp/ccqED0AM.s:35750  .rodata.convergence_tolerances:0000000000000000 convergence_tolerances
     /tmp/ccqED0AM.s:35755  .rodata.modes.11426:0000000000000000 $d
     /tmp/ccqED0AM.s:35759  .rodata.modes.11426:0000000000000000 modes.11426
     /tmp/ccqED0AM.s:35762  .rodata.modes.11943:0000000000000000 $d
     /tmp/ccqED0AM.s:35766  .rodata.modes.11943:0000000000000000 modes.11943
     /tmp/ccqED0AM.s:35769  .rodata.xrom_targets:0000000000000000 $d
     /tmp/ccqED0AM.s:18976  .text.do_tst:000000000000006b $d
     /tmp/ccqED0AM.s:18976  .text.do_tst:000000000000006c $t
     /tmp/ccqED0AM.s:20661  .text.cmdflag:0000000000000033 $d
     /tmp/ccqED0AM.s:20661  .text.cmdflag:0000000000000034 $t
     /tmp/ccqED0AM.s:21821  .text.cmddisp:0000000000000039 $d
     /tmp/ccqED0AM.s:21821  .text.cmddisp:000000000000003a $t

UNDEFINED SYMBOLS
StateWhileOn
main_ram
xrom_size
XromParams
XromLocal
xset
decNumberRoundDigits
decNumberTrunc
dn_eq
set_carry
dn_to_ull
dn_abs
check_overflow
set_overflow
build_value
dn_lt
const_2pow64
xcopy
argcmds
display
shutdown
library_ram
ARM GAS  /tmp/ccqED0AM.s 			page 914


backup_ram
scopy
num_arg_0
prt
scopy_char
DispMsg
dot
error_message
JustDisplayed
ShowRPN
decContextDefault
decimal64FromNumber
decimal128FromNumber
decimal64ToNumber
decimal128ToNumber
int_base
cnsts
cnsts_d128
cnsts_d64
dn_max
dn_add
dn_subtract
dn_multiply
dn_divide
dn_min
cmplxDivide
cmplxAdd
cmplxSubtract
cmplxMultiply
decNumberNormalize
decNumberRoundDecimals
const_360
const_2PI
const_400
reset_shift
dn_minus
set_menu
display_current_menu
finish_cpx_entry
set_default_menu
intMax
intAdd
intSubtract
intMultiply
intDivide
intMin
extract_value
dn_dec
dn_eq0
dn_inc
row_column_to_keycode
ullint_to_dn
find_char
decNumberFromString
decNumberCopy
decNumberZero
stack_begin
ARM GAS  /tmp/ccqED0AM.s 			page 915


const_PI
word_size
int_mode
dn_mulpow10
put_key
build_user_menu_from_program
const_9on5
const_32
decNumberPow10
const_0_05
dn_log10
const_20
cnsts_conv
print_justified
keycode_to_row_column
dn_compare
decNumberRnd
dn_mul100
dn_le0
dn_lt0
dn_1
finish_display
mask_value
int_to_dn
decNumber2Fraction
GoFast
alpha_view_common
is_int
is_even
isPrime
dn_to_int
message
monfuncs
xrom
dyfuncs
SizeStatRegs
alpha_rcl_s
XromA2D
relative_error
cmplxR
absolute_error
const_1e_14
const_1e_32
const_1e_24
const_NaN
print_trace
sprintf
multicmds
trifuncs
niladics
sigma_minus
sigma_val
intChs
const_0
const_1
sigma_plus
set_NaN
ARM GAS  /tmp/ccqED0AM.s 			page 916


is_key_pressed
clr_dot
set_dot
OpCode
checksum_ram
init_state
reset
StopWatchStatus
strdup
strtok
strtoull
strchr
free
__aeabi_uldivmod
decNumberToString

ARM GAS  /tmp/ccK8IvWa.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"xeq.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.find_section_bounds,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	find_section_bounds:
  27              	.LVL0:
  28              	.LFB18:
  29              		.file 1 "src/xeq.c"
   1:src/xeq.c     **** /* This file is part of 34S.
   2:src/xeq.c     ****  * 
   3:src/xeq.c     ****  * 34S is free software: you can redistribute it and/or modify
   4:src/xeq.c     ****  * it under the terms of the GNU General Public License as published by
   5:src/xeq.c     ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/xeq.c     ****  * (at your option) any later version.
   7:src/xeq.c     ****  * 
   8:src/xeq.c     ****  * 34S is distributed in the hope that it will be useful,
   9:src/xeq.c     ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/xeq.c     ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/xeq.c     ****  * GNU General Public License for more details.
  12:src/xeq.c     ****  * 
  13:src/xeq.c     ****  * You should have received a copy of the GNU General Public License
  14:src/xeq.c     ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/xeq.c     ****  */
  16:src/xeq.c     **** 
  17:src/xeq.c     **** #ifndef REALBUILD
  18:src/xeq.c     **** 
  19:src/xeq.c     **** #if defined(WIN32) && !defined(QTGUI) && !defined(IOS) && !defined(__GNUC__) && !defined(DM42)
  20:src/xeq.c     **** 
  21:src/xeq.c     **** #include <stdlib.h>  // sleep
  22:src/xeq.c     **** #include "win32.h"
  23:src/xeq.c     **** #define sleep _sleep
  24:src/xeq.c     **** #define strtoull _strtoui64
  25:src/xeq.c     **** 
  26:src/xeq.c     **** #else
  27:src/xeq.c     **** #ifdef DM42
  28:src/xeq.c     **** #include "dmcp.h"
  29:src/xeq.c     **** #else
ARM GAS  /tmp/ccK8IvWa.s 			page 2


  30:src/xeq.c     **** #include <unistd.h>
  31:src/xeq.c     **** #include <sys/time.h>
  32:src/xeq.c     **** extern unsigned long long strtoull(const char *, char **, int);
  33:src/xeq.c     **** #endif
  34:src/xeq.c     **** 
  35:src/xeq.c     **** #endif
  36:src/xeq.c     **** 
  37:src/xeq.c     **** #include <stdio.h>   // (s)printf
  38:src/xeq.c     **** #include <string.h>
  39:src/xeq.c     **** #include <stdlib.h>
  40:src/xeq.c     **** 
  41:src/xeq.c     **** #endif // REALBUILD
  42:src/xeq.c     **** 
  43:src/xeq.c     **** #ifdef IOS
  44:src/xeq.c     **** #include <stdarg.h>
  45:src/xeq.c     **** #endif
  46:src/xeq.c     **** 
  47:src/xeq.c     **** #if __GNUC__ >= 4 && __GNUC_MINOR__ >= 6
  48:src/xeq.c     **** #define GNUC_POP_ERROR
  49:src/xeq.c     **** #pragma GCC diagnostic push
  50:src/xeq.c     **** #pragma GCC diagnostic ignored "-Warray-bounds"
  51:src/xeq.c     **** #endif
  52:src/xeq.c     **** 
  53:src/xeq.c     **** #define XEQ_INTERNAL 1
  54:src/xeq.c     **** #define DM42SAFE
  55:src/xeq.c     **** #include "xeq.h"
  56:src/xeq.c     **** #include "storage.h"
  57:src/xeq.c     **** #include "decn.h"
  58:src/xeq.c     **** #include "complex.h"
  59:src/xeq.c     **** #include "stats.h"
  60:src/xeq.c     **** #include "display.h"
  61:src/xeq.c     **** #include "consts.h"
  62:src/xeq.c     **** #include "int.h"
  63:src/xeq.c     **** #include "date.h"
  64:src/xeq.c     **** #include "lcd.h"
  65:src/xeq.c     **** #include "xrom.h"
  66:src/xeq.c     **** #include "alpha.h"
  67:src/xeq.c     **** #ifdef INCLUDE_STOPWATCH
  68:src/xeq.c     **** #include "stopwatch.h"
  69:src/xeq.c     **** #endif
  70:src/xeq.c     **** #ifndef DM42
  71:src/xeq.c     **** #include "printer.h"
  72:src/xeq.c     **** #endif
  73:src/xeq.c     **** #undef DM42SAFE
  74:src/xeq.c     **** 
  75:src/xeq.c     **** #include "pretty.h"
  76:src/xeq.c     **** 
  77:src/xeq.c     **** 
  78:src/xeq.c     **** #include "xrom_targets.c"	// Generated by PP
  79:src/xeq.c     **** 
  80:src/xeq.c     **** /* Define the number of program Ticks that must elapse between flashing the
  81:src/xeq.c     ****  * RCL annunciator.
  82:src/xeq.c     ****  */
  83:src/xeq.c     **** #define TICKS_PER_FLASH	(5)
  84:src/xeq.c     **** 
  85:src/xeq.c     **** /*
  86:src/xeq.c     ****  *  A program is running
ARM GAS  /tmp/ccK8IvWa.s 			page 3


  87:src/xeq.c     ****  */
  88:src/xeq.c     **** FLAG Running;
  89:src/xeq.c     **** FLAG XromRunning;
  90:src/xeq.c     **** 
  91:src/xeq.c     **** #ifndef CONSOLE
  92:src/xeq.c     **** /*
  93:src/xeq.c     ****  *  A program has just stopped
  94:src/xeq.c     ****  */
  95:src/xeq.c     **** FLAG JustStopped;
  96:src/xeq.c     **** #endif
  97:src/xeq.c     **** 
  98:src/xeq.c     **** /*
  99:src/xeq.c     ****  *  Count down counter for a programmed pause
 100:src/xeq.c     ****  */
 101:src/xeq.c     **** volatile unsigned char Pause;
 102:src/xeq.c     **** 
 103:src/xeq.c     **** /*
 104:src/xeq.c     ****  *  Some long running function has called busy();
 105:src/xeq.c     ****  */
 106:src/xeq.c     **** FLAG Busy;
 107:src/xeq.c     **** 
 108:src/xeq.c     **** /*
 109:src/xeq.c     ****  *  Error code
 110:src/xeq.c     ****  */
 111:src/xeq.c     **** SMALL_INT Error;
 112:src/xeq.c     **** 
 113:src/xeq.c     **** /*
 114:src/xeq.c     ****  *  Indication of PC wrap around
 115:src/xeq.c     ****  */
 116:src/xeq.c     **** FLAG PcWrapped;
 117:src/xeq.c     **** 
 118:src/xeq.c     **** /*
 119:src/xeq.c     ****  *  Currently executed function
 120:src/xeq.c     ****  */
 121:src/xeq.c     **** s_opcode XeqOpCode;
 122:src/xeq.c     **** 
 123:src/xeq.c     **** /*
 124:src/xeq.c     ****  *  Temporary display (not X)
 125:src/xeq.c     ****  */
 126:src/xeq.c     **** SMALL_INT ShowRegister;
 127:src/xeq.c     **** 
 128:src/xeq.c     **** /*
 129:src/xeq.c     ****  *  User code being called from XROM
 130:src/xeq.c     ****  */
 131:src/xeq.c     **** SMALL_INT XromUserPc;
 132:src/xeq.c     **** SMALL_INT UserLocalRegs;
 133:src/xeq.c     **** 
 134:src/xeq.c     **** /* We need various different math contexts.
 135:src/xeq.c     ****  * More efficient to define these globally and reuse them as needed.
 136:src/xeq.c     ****  */
 137:src/xeq.c     **** decContext Ctx;
 138:src/xeq.c     **** 
 139:src/xeq.c     **** /*
 140:src/xeq.c     ****  * A buffer for instruction display
 141:src/xeq.c     ****  */
 142:src/xeq.c     **** char TraceBuffer[25];
 143:src/xeq.c     **** 
ARM GAS  /tmp/ccK8IvWa.s 			page 4


 144:src/xeq.c     **** /*
 145:src/xeq.c     ****  *  Total Size of the return stack
 146:src/xeq.c     ****  */
 147:src/xeq.c     **** SMALL_INT RetStkSize;
 148:src/xeq.c     **** 
 149:src/xeq.c     **** /*
 150:src/xeq.c     ****  *  Number of remaining program steps
 151:src/xeq.c     ****  */
 152:src/xeq.c     **** SMALL_INT ProgFree;
 153:src/xeq.c     **** 
 154:src/xeq.c     **** /*
 155:src/xeq.c     ****  * The actual top of the return stack
 156:src/xeq.c     ****  */
 157:src/xeq.c     **** unsigned short *RetStk;
 158:src/xeq.c     **** 
 159:src/xeq.c     **** /*
 160:src/xeq.c     ****  *  The location of the RPN stack
 161:src/xeq.c     ****  */
 162:src/xeq.c     **** REGISTER *StackBase;
 163:src/xeq.c     **** 
 164:src/xeq.c     **** #ifdef INFRARED
 165:src/xeq.c     **** /*
 166:src/xeq.c     ****  *  Is tracing active?
 167:src/xeq.c     ****  */
 168:src/xeq.c     **** FLAG Tracing;
 169:src/xeq.c     **** #endif
 170:src/xeq.c     **** 
 171:src/xeq.c     **** /*
 172:src/xeq.c     **** *	Indicates that a coordinate converstion has just happened
 173:src/xeq.c     **** */
 174:src/xeq.c     **** #ifdef RP_PREFIX
 175:src/xeq.c     **** SMALL_INT RectPolConv; // 1 - R->P just done; 2 - P->R just done
 176:src/xeq.c     **** #endif
 177:src/xeq.c     **** 
 178:src/xeq.c     **** /*
 179:src/xeq.c     ****  *  Check if the current PC is in XROM
 180:src/xeq.c     ****  */
 181:src/xeq.c     **** int is_xrom(void) {
 182:src/xeq.c     **** 	return isXROM(state_pc());
 183:src/xeq.c     **** }
 184:src/xeq.c     **** 
 185:src/xeq.c     **** /*
 186:src/xeq.c     ****  *  Shift the return stack.
 187:src/xeq.c     ****  *  The distance is in levels.
 188:src/xeq.c     ****  *  If argument is negative, return stack will shrink.
 189:src/xeq.c     ****  *  Returns 1 if unsuccessful (error is set)
 190:src/xeq.c     ****  */
 191:src/xeq.c     **** int move_retstk(int distance)
 192:src/xeq.c     **** {
 193:src/xeq.c     **** #ifndef REALBUILD
 194:src/xeq.c     **** 	// Sanity check
 195:src/xeq.c     **** 	if (XromFlags.xIN) {
 196:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 197:src/xeq.c     **** 		return 1;
 198:src/xeq.c     **** 	}
 199:src/xeq.c     **** #endif
 200:src/xeq.c     **** 	if (RetStkSize + RetStkPtr + distance < 0) {
ARM GAS  /tmp/ccK8IvWa.s 			page 5


 201:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 202:src/xeq.c     **** 		return 1;
 203:src/xeq.c     **** 	}
 204:src/xeq.c     **** 	xcopy(RetStk + RetStkPtr + distance, RetStk + RetStkPtr, (-RetStkPtr) << 1);
 205:src/xeq.c     **** 	RetStk += distance;
 206:src/xeq.c     **** 	RetStkSize += distance;
 207:src/xeq.c     **** 	return 0;
 208:src/xeq.c     **** }
 209:src/xeq.c     **** 
 210:src/xeq.c     **** /*
 211:src/xeq.c     ****  *  How many stack levels with local data have we?
 212:src/xeq.c     ****  */
 213:src/xeq.c     **** int local_levels(void) {
 214:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 215:src/xeq.c     **** }
 216:src/xeq.c     **** 
 217:src/xeq.c     **** /*
 218:src/xeq.c     ****  *  How many local registers have we?
 219:src/xeq.c     ****  *  The result depends on the RARG operation to allow for "alien" RCL commands
 220:src/xeq.c     ****  */
 221:src/xeq.c     **** int local_regs_rarg(enum rarg op) {
 222:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 224:src/xeq.c     **** }
 225:src/xeq.c     **** 
 226:src/xeq.c     **** /*
 227:src/xeq.c     ****  *  How many local registers have we?
 228:src/xeq.c     ****  */
 229:src/xeq.c     **** int local_regs(void) {
 230:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 231:src/xeq.c     **** }
 232:src/xeq.c     **** 
 233:src/xeq.c     **** /*
 234:src/xeq.c     ****  *  How many global registers have we?
 235:src/xeq.c     ****  *  The result depends on the RARG operation to allow for "alien" RCL commands
 236:src/xeq.c     ****  */
 237:src/xeq.c     **** unsigned int global_regs_rarg(enum rarg op) {
 238:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 241:src/xeq.c     **** 	}
 242:src/xeq.c     **** 	else
 243:src/xeq.c     **** 		return NumRegs;
 244:src/xeq.c     **** }
 245:src/xeq.c     **** 
 246:src/xeq.c     **** /*
 247:src/xeq.c     ****  *  How many global registers have we?
 248:src/xeq.c     ****  */
 249:src/xeq.c     **** unsigned int global_regs(void) {
 250:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 251:src/xeq.c     **** }
 252:src/xeq.c     **** 
 253:src/xeq.c     **** 
 254:src/xeq.c     **** #if defined(CONSOLE) && !defined(DM42)
 255:src/xeq.c     **** // Console screen only
 256:src/xeq.c     **** unsigned int get_local_flags(void) {
 257:src/xeq.c     **** 	if (LocalRegs == 0)
ARM GAS  /tmp/ccK8IvWa.s 			page 6


 258:src/xeq.c     **** 		return 0;
 259:src/xeq.c     **** 	return RetStk[LocalRegs + 1];
 260:src/xeq.c     **** }
 261:src/xeq.c     **** #endif
 262:src/xeq.c     **** 
 263:src/xeq.c     **** void version(enum nilop op) {
 264:src/xeq.c     **** 	State2.version = 1;
 265:src/xeq.c     **** 	if (!State2.runmode)
 266:src/xeq.c     **** 		display();
 267:src/xeq.c     **** }
 268:src/xeq.c     **** 
 269:src/xeq.c     **** void cmd_off(enum nilop op) {
 270:src/xeq.c     **** 	shutdown();
 271:src/xeq.c     **** }
 272:src/xeq.c     **** 
 273:src/xeq.c     **** #ifndef state_pc
 274:src/xeq.c     **** unsigned int state_pc(void) {
 275:src/xeq.c     **** 	return State.pc;	
 276:src/xeq.c     **** }
 277:src/xeq.c     **** #endif
 278:src/xeq.c     **** static void raw_set_pc(unsigned int pc) {
 279:src/xeq.c     **** 	State.pc = pc;
 280:src/xeq.c     **** 	update_program_bounds(0);
 281:src/xeq.c     **** }
 282:src/xeq.c     **** 
 283:src/xeq.c     **** /*
 284:src/xeq.c     ****  *  Where do the program regions start?
 285:src/xeq.c     ****  */
 286:src/xeq.c     **** static const s_opcode *const RegionTab[] = {
 287:src/xeq.c     **** 	Prog,
 288:src/xeq.c     **** 	UserFlash.prog,
 289:src/xeq.c     **** 	BackupFlash._prog,
 290:src/xeq.c     **** 	xrom
 291:src/xeq.c     **** };
 292:src/xeq.c     **** 
 293:src/xeq.c     **** /*
 294:src/xeq.c     ****  *  Size of a program segment
 295:src/xeq.c     ****  */
 296:src/xeq.c     **** int sizeLIB(int region) {
 297:src/xeq.c     **** 	if (region == REGION_XROM)
 298:src/xeq.c     **** 		return xrom_size;
 299:src/xeq.c     **** 	else
 300:src/xeq.c     **** 		return (int)RegionTab[region][-1];
 301:src/xeq.c     **** }
 302:src/xeq.c     **** 
 303:src/xeq.c     **** 
 304:src/xeq.c     **** /*
 305:src/xeq.c     ****  *  Get an opcode, check for double length codes
 306:src/xeq.c     ****  */
 307:src/xeq.c     **** static opcode get_opcode( const s_opcode *loc )
 308:src/xeq.c     **** {
 309:src/xeq.c     **** 	opcode r = *loc;
 310:src/xeq.c     **** 	if ( isDBL(r) ) {
 311:src/xeq.c     **** 		r |= loc[1] << 16;
 312:src/xeq.c     **** 	}
 313:src/xeq.c     **** 	return r;
 314:src/xeq.c     **** }
ARM GAS  /tmp/ccK8IvWa.s 			page 7


 315:src/xeq.c     **** 
 316:src/xeq.c     **** 
 317:src/xeq.c     **** /* 
 318:src/xeq.c     ****  * Return the program memory location specified.
 319:src/xeq.c     ****  */
 320:src/xeq.c     **** opcode getprog(unsigned int pc) {
 321:src/xeq.c     **** 
 322:src/xeq.c     **** 	const int region = nLIB(pc);
 323:src/xeq.c     **** 	int offset = offsetLIB(pc);
 324:src/xeq.c     **** 
 325:src/xeq.c     **** 	if (offset < 0 || offset >= sizeLIB(region))
 326:src/xeq.c     **** 		return OP_NIL | OP_END;
 327:src/xeq.c     **** 	return get_opcode(RegionTab[region] + offset);
 328:src/xeq.c     **** }
 329:src/xeq.c     **** 
 330:src/xeq.c     **** 
 331:src/xeq.c     **** /* 
 332:src/xeq.c     ****  * Return the physical start-address of the current program
 333:src/xeq.c     ****  */
 334:src/xeq.c     **** const s_opcode *get_current_prog(void) {
 335:src/xeq.c     **** 
 336:src/xeq.c     **** 	const int region = nLIB(ProgBegin);
 337:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 338:src/xeq.c     **** }
 339:src/xeq.c     **** 
 340:src/xeq.c     **** 
 341:src/xeq.c     **** /*
 342:src/xeq.c     ****  *  Set PC with sanity check
 343:src/xeq.c     ****  */
 344:src/xeq.c     **** void set_pc(unsigned int pc) {
 345:src/xeq.c     **** 	if (isRAM(pc)) {
 346:src/xeq.c     **** 		if (pc > ProgSize)
 347:src/xeq.c     **** 			pc = ProgSize;
 348:src/xeq.c     **** 		if (pc > 1 && isDBL(Prog_1[pc - 1]))
 349:src/xeq.c     **** 			pc--;
 350:src/xeq.c     **** 	} else if (!isXROM(pc)) {
 351:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 352:src/xeq.c     **** 		if (pc > n - 1)
 353:src/xeq.c     **** 			pc = n - 1;
 354:src/xeq.c     **** 		if (pc > startLIB(pc) && isDBL(getprog(pc - 1)))
 355:src/xeq.c     **** 			--pc;
 356:src/xeq.c     **** 	}
 357:src/xeq.c     **** 	raw_set_pc(pc);
 358:src/xeq.c     **** }
 359:src/xeq.c     **** 
 360:src/xeq.c     **** 
 361:src/xeq.c     **** 
 362:src/xeq.c     **** /* Locate the beginning and end of a section from a PC that points anywhere within
 363:src/xeq.c     ****  */
 364:src/xeq.c     **** static unsigned short int find_section_bounds(const unsigned int pc, const int endp, unsigned short
  30              		.loc 1 364 119 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 365:src/xeq.c     **** 	unsigned short int top, bottom;
  35              		.loc 1 365 2 view .LVU1
ARM GAS  /tmp/ccK8IvWa.s 			page 8


 366:src/xeq.c     **** 
 367:src/xeq.c     **** 	if (endp && State2.runmode) { 
  36              		.loc 1 367 2 view .LVU2
  37              		.loc 1 367 5 is_stmt 0 view .LVU3
  38 0000 69B1     		cbz	r1, .L2
  39              		.loc 1 367 11 discriminator 1 view .LVU4
  40 0002 184B     		ldr	r3, .L14
  41 0004 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
  42 0006 5B06     		lsls	r3, r3, #25
  43 0008 09D5     		bpl	.L2
 368:src/xeq.c     **** 		// Use the current program as bounds
 369:src/xeq.c     **** 		top = ProgBegin;
  44              		.loc 1 369 3 is_stmt 1 view .LVU5
  45              	.LVL1:
 370:src/xeq.c     **** 		bottom = ProgEnd;
  46              		.loc 1 370 3 view .LVU6
  47              		.loc 1 370 10 is_stmt 0 view .LVU7
  48 000a 1749     		ldr	r1, .L14+4
  49              	.LVL2:
  50              		.loc 1 370 10 view .LVU8
  51 000c B1F8EC37 		ldrh	r3, [r1, #2028]
  52 0010 B1F8EE07 		ldrh	r0, [r1, #2030]
  53              	.LVL3:
 371:src/xeq.c     **** 		if (top == 0)
  54              		.loc 1 371 3 is_stmt 1 view .LVU9
  55 0014 012B     		cmp	r3, #1
  56 0016 38BF     		it	cc
  57 0018 0123     		movcc	r3, #1
  58              	.LVL4:
 372:src/xeq.c     **** 			top = 1;
 373:src/xeq.c     **** 	}
 374:src/xeq.c     **** 	else if (isXROM(pc)) {
 375:src/xeq.c     **** 		top = addrXROM(1);
 376:src/xeq.c     **** 		bottom = addrXROM(xrom_size);
 377:src/xeq.c     **** 	} 
 378:src/xeq.c     **** 	else if (isLIB(pc)) {
 379:src/xeq.c     **** 		top = startLIB(pc);
 380:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
 381:src/xeq.c     **** 	}
 382:src/xeq.c     **** 	else {
 383:src/xeq.c     **** 		top = State2.runmode;  // step 001 if not entering a program
 384:src/xeq.c     **** 		bottom = ProgSize;
 385:src/xeq.c     **** 	}
 386:src/xeq.c     **** 	*p_top = top;
  59              		.loc 1 386 2 view .LVU10
  60              		.loc 1 386 9 is_stmt 0 view .LVU11
  61 001a 1380     		strh	r3, [r2]	@ movhi
 387:src/xeq.c     **** 	return bottom;
  62              		.loc 1 387 2 is_stmt 1 view .LVU12
 388:src/xeq.c     **** }
  63              		.loc 1 388 1 is_stmt 0 view .LVU13
  64 001c 7047     		bx	lr
  65              	.LVL5:
  66              	.L2:
 374:src/xeq.c     **** 		top = addrXROM(1);
  67              		.loc 1 374 7 is_stmt 1 view .LVU14
 374:src/xeq.c     **** 		top = addrXROM(1);
ARM GAS  /tmp/ccK8IvWa.s 			page 9


  68              		.loc 1 374 11 is_stmt 0 view .LVU15
  69 001e 830B     		lsrs	r3, r0, #14
 374:src/xeq.c     **** 		top = addrXROM(1);
  70              		.loc 1 374 10 view .LVU16
  71 0020 032B     		cmp	r3, #3
  72 0022 0FD0     		beq	.L13
 378:src/xeq.c     **** 		top = startLIB(pc);
  73              		.loc 1 378 7 is_stmt 1 view .LVU17
 378:src/xeq.c     **** 		top = startLIB(pc);
  74              		.loc 1 378 10 is_stmt 0 view .LVU18
  75 0024 10F4404F 		tst	r0, #49152
  76 0028 14D0     		beq	.L5
 379:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
  77              		.loc 1 379 3 is_stmt 1 view .LVU19
  78              	.LBB1303:
  79              	.LBB1304:
 300:src/xeq.c     **** }
  80              		.loc 1 300 24 is_stmt 0 view .LVU20
  81 002a 1049     		ldr	r1, .L14+8
  82              	.LVL6:
 300:src/xeq.c     **** }
  83              		.loc 1 300 32 view .LVU21
  84 002c 51F82330 		ldr	r3, [r1, r3, lsl #2]
  85              	.LBE1304:
  86              	.LBE1303:
 380:src/xeq.c     **** 	}
  87              		.loc 1 380 10 view .LVU22
  88 0030 33F8021C 		ldrh	r1, [r3, #-2]
 379:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
  89              		.loc 1 379 9 view .LVU23
  90 0034 00F44043 		and	r3, r0, #49152
 380:src/xeq.c     **** 	}
  91              		.loc 1 380 10 view .LVU24
  92 0038 5818     		adds	r0, r3, r1
  93              	.LVL7:
 379:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
  94              		.loc 1 379 7 view .LVU25
  95 003a 0133     		adds	r3, r3, #1
  96 003c 9BB2     		uxth	r3, r3
  97              	.LVL8:
 380:src/xeq.c     **** 	}
  98              		.loc 1 380 3 is_stmt 1 view .LVU26
  99              	.LBB1306:
 100              	.LBI1303:
 296:src/xeq.c     **** 	if (region == REGION_XROM)
 101              		.loc 1 296 5 view .LVU27
 102              	.LBB1305:
 297:src/xeq.c     **** 		return xrom_size;
 103              		.loc 1 297 2 view .LVU28
 300:src/xeq.c     **** }
 104              		.loc 1 300 3 view .LVU29
 300:src/xeq.c     **** }
 105              		.loc 1 300 3 is_stmt 0 view .LVU30
 106              	.LBE1305:
 107              	.LBE1306:
 380:src/xeq.c     **** 	}
 108              		.loc 1 380 10 view .LVU31
ARM GAS  /tmp/ccK8IvWa.s 			page 10


 109 003e 80B2     		uxth	r0, r0
 110              	.LVL9:
 386:src/xeq.c     **** 	return bottom;
 111              		.loc 1 386 2 is_stmt 1 view .LVU32
 386:src/xeq.c     **** 	return bottom;
 112              		.loc 1 386 9 is_stmt 0 view .LVU33
 113 0040 1380     		strh	r3, [r2]	@ movhi
 387:src/xeq.c     **** }
 114              		.loc 1 387 2 is_stmt 1 view .LVU34
 115              		.loc 1 388 1 is_stmt 0 view .LVU35
 116 0042 7047     		bx	lr
 117              	.LVL10:
 118              	.L13:
 375:src/xeq.c     **** 		bottom = addrXROM(xrom_size);
 119              		.loc 1 375 3 is_stmt 1 view .LVU36
 376:src/xeq.c     **** 	} 
 120              		.loc 1 376 3 view .LVU37
 376:src/xeq.c     **** 	} 
 121              		.loc 1 376 10 is_stmt 0 view .LVU38
 122 0044 0A4B     		ldr	r3, .L14+12
 123 0046 1888     		ldrh	r0, [r3]
 124              	.LVL11:
 375:src/xeq.c     **** 		bottom = addrXROM(xrom_size);
 125              		.loc 1 375 7 view .LVU39
 126 0048 4CF20103 		movw	r3, #49153
 376:src/xeq.c     **** 	} 
 127              		.loc 1 376 10 view .LVU40
 128 004c 40F44040 		orr	r0, r0, #49152
 129              	.LVL12:
 386:src/xeq.c     **** 	return bottom;
 130              		.loc 1 386 2 is_stmt 1 view .LVU41
 386:src/xeq.c     **** 	return bottom;
 131              		.loc 1 386 9 is_stmt 0 view .LVU42
 132 0050 1380     		strh	r3, [r2]	@ movhi
 387:src/xeq.c     **** }
 133              		.loc 1 387 2 is_stmt 1 view .LVU43
 134              		.loc 1 388 1 is_stmt 0 view .LVU44
 135 0052 7047     		bx	lr
 136              	.LVL13:
 137              	.L5:
 383:src/xeq.c     **** 		bottom = ProgSize;
 138              		.loc 1 383 3 is_stmt 1 view .LVU45
 383:src/xeq.c     **** 		bottom = ProgSize;
 139              		.loc 1 383 15 is_stmt 0 view .LVU46
 140 0054 034B     		ldr	r3, .L14
 384:src/xeq.c     **** 	}
 141              		.loc 1 384 10 view .LVU47
 142 0056 0449     		ldr	r1, .L14+4
 143              	.LVL14:
 383:src/xeq.c     **** 		bottom = ProgSize;
 144              		.loc 1 383 15 view .LVU48
 145 0058 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 384:src/xeq.c     **** 	}
 146              		.loc 1 384 10 view .LVU49
 147 005a 4888     		ldrh	r0, [r1, #2]
 148              	.LVL15:
 383:src/xeq.c     **** 		bottom = ProgSize;
ARM GAS  /tmp/ccK8IvWa.s 			page 11


 149              		.loc 1 383 7 view .LVU50
 150 005c C3F38013 		ubfx	r3, r3, #6, #1
 151              	.LVL16:
 384:src/xeq.c     **** 	}
 152              		.loc 1 384 3 is_stmt 1 view .LVU51
 386:src/xeq.c     **** 	return bottom;
 153              		.loc 1 386 2 view .LVU52
 386:src/xeq.c     **** 	return bottom;
 154              		.loc 1 386 9 is_stmt 0 view .LVU53
 155 0060 1380     		strh	r3, [r2]	@ movhi
 387:src/xeq.c     **** }
 156              		.loc 1 387 2 is_stmt 1 view .LVU54
 157              		.loc 1 388 1 is_stmt 0 view .LVU55
 158 0062 7047     		bx	lr
 159              	.L15:
 160              		.align	2
 161              	.L14:
 162 0064 00000000 		.word	StateWhileOn
 163 0068 00000000 		.word	PersistentRam
 164 006c 00000000 		.word	.LANCHOR0
 165 0070 00000000 		.word	xrom_size
 166              		.cfi_endproc
 167              	.LFE18:
 169              		.section	.text.reg_address,"ax",%progbits
 170              		.align	1
 171              		.p2align 2,,3
 172              		.syntax unified
 173              		.thumb
 174              		.thumb_func
 175              		.fpu fpv4-sp-d16
 177              	reg_address:
 178              	.LVL17:
 179              	.LFB85:
 389:src/xeq.c     **** 
 390:src/xeq.c     **** 
 391:src/xeq.c     **** /* Increment the passed PC.  Account for wrap around but nothing else.
 392:src/xeq.c     ****  * Return the updated PC.
 393:src/xeq.c     ****  * Set PcWrapped on wrap around
 394:src/xeq.c     ****  */
 395:src/xeq.c     **** unsigned int do_inc(const unsigned int pc, int endp) {
 396:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 397:src/xeq.c     **** 	unsigned short int top = 0;
 398:src/xeq.c     **** 	unsigned short int bottom = 0;
 399:src/xeq.c     **** 
 400:src/xeq.c     **** 	PcWrapped = 0;
 401:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 402:src/xeq.c     **** 
 403:src/xeq.c     **** 	if (npc > bottom) {
 404:src/xeq.c     **** 		PcWrapped = 1;
 405:src/xeq.c     **** 		return top;
 406:src/xeq.c     **** 	}
 407:src/xeq.c     **** 	return npc;
 408:src/xeq.c     **** }
 409:src/xeq.c     **** 
 410:src/xeq.c     **** /* Decrement the passed PC.  Account for wrap around but nothing else.
 411:src/xeq.c     ****  * Return the updated PC.
 412:src/xeq.c     ****  * Set PcWrapped on wrap around
ARM GAS  /tmp/ccK8IvWa.s 			page 12


 413:src/xeq.c     ****  */
 414:src/xeq.c     **** unsigned int do_dec(unsigned int pc, int endp) {
 415:src/xeq.c     **** 	unsigned short int top = 0;
 416:src/xeq.c     **** 	unsigned short int bottom = 0;
 417:src/xeq.c     **** 
 418:src/xeq.c     **** 	PcWrapped = 0;
 419:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 420:src/xeq.c     **** 
 421:src/xeq.c     **** 	if (pc <= top) {
 422:src/xeq.c     **** 		PcWrapped = 1;
 423:src/xeq.c     **** 		pc = bottom;
 424:src/xeq.c     **** 	}
 425:src/xeq.c     **** 	else
 426:src/xeq.c     **** 		--pc;
 427:src/xeq.c     **** 	if (pc > top && isDBL(getprog(pc - 1)))
 428:src/xeq.c     **** 		--pc;
 429:src/xeq.c     **** 	return pc;
 430:src/xeq.c     **** }
 431:src/xeq.c     **** 
 432:src/xeq.c     **** /* Increment the PC keeping account of wrapping around and stopping
 433:src/xeq.c     ****  * programs on such.  Return non-zero if we wrapped.
 434:src/xeq.c     ****  */
 435:src/xeq.c     **** int incpc(void) {
 436:src/xeq.c     **** 	raw_set_pc(do_inc(state_pc(), 1));
 437:src/xeq.c     **** 	return PcWrapped;
 438:src/xeq.c     **** }
 439:src/xeq.c     **** 
 440:src/xeq.c     **** void decpc(void) {
 441:src/xeq.c     **** 	raw_set_pc(do_dec(state_pc(), 1));
 442:src/xeq.c     **** }
 443:src/xeq.c     **** 
 444:src/xeq.c     **** /*
 445:src/xeq.c     ****  * Update the pointers to the current program delimited by END statements
 446:src/xeq.c     ****  */
 447:src/xeq.c     **** void update_program_bounds(const int force) {
 448:src/xeq.c     **** 	unsigned int pc = state_pc();
 449:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 450:src/xeq.c     **** 		State.pc = pc = 1;
 451:src/xeq.c     **** 	if (! force && pc >= ProgBegin && pc <= ProgEnd)
 452:src/xeq.c     **** 		return;
 453:src/xeq.c     **** 	for (PcWrapped = 0; !PcWrapped; pc = do_inc(pc, 0)) {
 454:src/xeq.c     **** 		ProgEnd = pc;
 455:src/xeq.c     **** 		if (getprog(pc) == (OP_NIL | OP_END)) {
 456:src/xeq.c     **** 			break;
 457:src/xeq.c     **** 		}
 458:src/xeq.c     **** 	}
 459:src/xeq.c     **** 	for (pc = state_pc();;) {
 460:src/xeq.c     **** 		const unsigned int opc = pc;
 461:src/xeq.c     **** 		pc = do_dec(opc, 0);
 462:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 463:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 464:src/xeq.c     **** 			break;
 465:src/xeq.c     **** 		}
 466:src/xeq.c     **** 	}
 467:src/xeq.c     **** }
 468:src/xeq.c     **** 
 469:src/xeq.c     **** /* Determine where in program space the PC really is
ARM GAS  /tmp/ccK8IvWa.s 			page 13


 470:src/xeq.c     ****  */
 471:src/xeq.c     **** unsigned int user_pc(unsigned int pc) {
 472:src/xeq.c     **** 	unsigned int n = 1;
 473:src/xeq.c     **** 	unsigned int base;
 474:src/xeq.c     **** 
 475:src/xeq.c     **** #ifndef REALBUILD
 476:src/xeq.c     **** 	if (pc == 0 || isXROM(pc))
 477:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 478:src/xeq.c     **** #else
 479:src/xeq.c     **** 	if (pc == 0)
 480:src/xeq.c     **** 		return 0;
 481:src/xeq.c     **** #endif
 482:src/xeq.c     **** 	base = startLIB(pc);
 483:src/xeq.c     **** 	while (base < pc) {
 484:src/xeq.c     **** 		base = do_inc(base, 0);
 485:src/xeq.c     **** 		if (PcWrapped)
 486:src/xeq.c     **** 			return n;
 487:src/xeq.c     **** 		++n;
 488:src/xeq.c     **** 	}
 489:src/xeq.c     **** 	return n;
 490:src/xeq.c     **** }
 491:src/xeq.c     **** 
 492:src/xeq.c     **** /* Given a target user PC, figure out the real matching PC
 493:src/xeq.c     ****  */
 494:src/xeq.c     **** unsigned int find_user_pc(unsigned int target) {
 495:src/xeq.c     **** 	unsigned int upc = state_pc();
 496:src/xeq.c     **** 	const int libp = isLIB(upc);
 497:src/xeq.c     **** 	unsigned int base = libp ? startLIB(upc) : 0;
 498:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 499:src/xeq.c     **** #ifndef REALBUILD
 500:src/xeq.c     **** 	if (isXROM(upc))
 501:src/xeq.c     **** 		return addrXROM(target);
 502:src/xeq.c     **** #endif
 503:src/xeq.c     **** 	while (n++ < target) {
 504:src/xeq.c     **** 		const unsigned int oldbase = base;
 505:src/xeq.c     **** 		base = do_inc(oldbase, 0);
 506:src/xeq.c     **** 		if (PcWrapped)
 507:src/xeq.c     **** 			return oldbase;
 508:src/xeq.c     **** 	}
 509:src/xeq.c     **** 	return base;
 510:src/xeq.c     **** }
 511:src/xeq.c     **** 
 512:src/xeq.c     **** 
 513:src/xeq.c     **** /* Set a flag to indicate that a complex operation has taken place
 514:src/xeq.c     ****  * The flag disappears with the next command executed.
 515:src/xeq.c     ****  */
 516:src/xeq.c     **** static void set_was_complex(void) {
 517:src/xeq.c     **** 	State2.wascomplex = 1;
 518:src/xeq.c     **** }
 519:src/xeq.c     **** 
 520:src/xeq.c     **** 
 521:src/xeq.c     **** /* Produce an error and stop
 522:src/xeq.c     ****  */
 523:src/xeq.c     **** int report_err(const unsigned int e) {
 524:src/xeq.c     **** 	if (Error == ERR_NONE) {
 525:src/xeq.c     **** 		Error = e;
 526:src/xeq.c     **** 		if (e == ERR_NONE) {
ARM GAS  /tmp/ccK8IvWa.s 			page 14


 527:src/xeq.c     **** 			error_message(e); // "Running Program"
 528:src/xeq.c     **** 			return 0;
 529:src/xeq.c     **** 		}
 530:src/xeq.c     **** 	}
 531:src/xeq.c     **** 	return 1;
 532:src/xeq.c     **** }
 533:src/xeq.c     **** 
 534:src/xeq.c     **** 
 535:src/xeq.c     **** /* Display a warning
 536:src/xeq.c     ****  */
 537:src/xeq.c     **** int report_warn(const unsigned int e) {
 538:src/xeq.c     **** 	if (Running) {
 539:src/xeq.c     **** 		return report_err(e);
 540:src/xeq.c     **** 	}
 541:src/xeq.c     **** 	error_message(e);
 542:src/xeq.c     **** #ifndef CONSOLE
 543:src/xeq.c     **** 	State2.disp_freeze = 0;
 544:src/xeq.c     **** 	JustDisplayed = 1;
 545:src/xeq.c     **** 	ShowRPN = 1;
 546:src/xeq.c     **** #endif
 547:src/xeq.c     **** 	return e != ERR_NONE;
 548:src/xeq.c     **** }
 549:src/xeq.c     **** 
 550:src/xeq.c     **** 
 551:src/xeq.c     **** /* Doing something in the wrong mode */
 552:src/xeq.c     **** void bad_mode_error(void) {
 553:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 554:src/xeq.c     **** }
 555:src/xeq.c     **** 
 556:src/xeq.c     **** 
 557:src/xeq.c     **** /* User command to produce an error */
 558:src/xeq.c     **** void cmderr(unsigned int arg, enum rarg op) {
 559:src/xeq.c     **** 	report_err(arg);
 560:src/xeq.c     **** }
 561:src/xeq.c     **** 
 562:src/xeq.c     **** 
 563:src/xeq.c     **** /* User command to display a warning */
 564:src/xeq.c     **** void cmdmsg(unsigned int arg, enum rarg op) {
 565:src/xeq.c     **** 	error_message(arg);
 566:src/xeq.c     **** }
 567:src/xeq.c     **** 
 568:src/xeq.c     **** 
 569:src/xeq.c     **** #if defined(DEBUG) && defined(CONSOLE) && !defined(DM42)
 570:src/xeq.c     **** #include <stdlib.h>
 571:src/xeq.c     **** static void error(const char *fmt, ...) {
 572:src/xeq.c     **** 	va_list ap;
 573:src/xeq.c     **** 	va_start(ap, fmt);
 574:src/xeq.c     **** 	vprintf(fmt, ap);
 575:src/xeq.c     **** 	va_end(ap);
 576:src/xeq.c     **** 	putchar('\n');
 577:src/xeq.c     **** 	exit(1);
 578:src/xeq.c     **** }
 579:src/xeq.c     **** 
 580:src/xeq.c     **** #define illegal(op)	do { report_err(ERR_PROG_BAD); printf("illegal opcode 0x%08x\n", op); } while (
 581:src/xeq.c     **** #else
 582:src/xeq.c     **** #define illegal(op)	do { report_err(ERR_PROG_BAD); } while (0)
 583:src/xeq.c     **** #endif
ARM GAS  /tmp/ccK8IvWa.s 			page 15


 584:src/xeq.c     **** 
 585:src/xeq.c     **** /* Real rounding mode access routine
 586:src/xeq.c     ****  */
 587:src/xeq.c     **** static enum rounding get_rounding_mode() {
 588:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 589:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 590:src/xeq.c     **** 		DEC_ROUND_UP, DEC_ROUND_DOWN,
 591:src/xeq.c     **** 		DEC_ROUND_CEILING, DEC_ROUND_FLOOR
 592:src/xeq.c     **** 	};
 593:src/xeq.c     **** 	return (enum rounding) modes[UState.rounding_mode];
 594:src/xeq.c     **** }
 595:src/xeq.c     **** 
 596:src/xeq.c     **** void op_roundingmode(enum nilop op) {
 597:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 598:src/xeq.c     **** }
 599:src/xeq.c     **** 
 600:src/xeq.c     **** void rarg_roundingmode(unsigned int arg, enum rarg op) {
 601:src/xeq.c     **** 	UState.rounding_mode = arg;
 602:src/xeq.c     **** }
 603:src/xeq.c     **** 
 604:src/xeq.c     **** 
 605:src/xeq.c     **** /* Pack a number into our DPD register format
 606:src/xeq.c     ****  */
 607:src/xeq.c     **** 
 608:src/xeq.c     **** void packed_from_number(decimal64 *r, const decNumber *x) {
 609:src/xeq.c     **** 	decContext ctx64;
 610:src/xeq.c     **** 
 611:src/xeq.c     **** 	decContextDefault(&ctx64, DEC_INIT_DECIMAL64);
 612:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 613:src/xeq.c     **** 	decimal64FromNumber(r, x, &ctx64);
 614:src/xeq.c     **** }
 615:src/xeq.c     **** 
 616:src/xeq.c     **** void packed128_from_number(decimal128 *r, const decNumber *x) {
 617:src/xeq.c     **** 	decContext ctx128;
 618:src/xeq.c     **** 
 619:src/xeq.c     **** 	decContextDefault(&ctx128, DEC_INIT_DECIMAL128);
 620:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 621:src/xeq.c     **** 	decimal128FromNumber(r, x, &ctx128);
 622:src/xeq.c     **** }
 623:src/xeq.c     **** 
 624:src/xeq.c     **** // Repack a decimal128 to decimal64
 625:src/xeq.c     **** void packed_from_packed128(decimal64 *r, const decimal128 *s) {
 626:src/xeq.c     **** 	decNumber temp;
 627:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 628:src/xeq.c     **** }
 629:src/xeq.c     **** 
 630:src/xeq.c     **** // Repack a decimal64 to decimal128
 631:src/xeq.c     **** void packed128_from_packed(decimal128 *r, const decimal64 *s) {
 632:src/xeq.c     **** 	decNumber temp;
 633:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 634:src/xeq.c     **** }
 635:src/xeq.c     **** 
 636:src/xeq.c     **** /*
 637:src/xeq.c     ****  *  User command to round to a specific number of digits
 638:src/xeq.c     ****  */
 639:src/xeq.c     **** void rarg_round(unsigned int arg, enum rarg op) {
 640:src/xeq.c     **** 	decNumber res, x;
ARM GAS  /tmp/ccK8IvWa.s 			page 16


 641:src/xeq.c     **** 	const enum rounding rm = get_rounding_mode();
 642:src/xeq.c     **** 
 643:src/xeq.c     **** 	if (is_intmode()) {
 644:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 645:src/xeq.c     **** 		return;
 646:src/xeq.c     **** 	}
 647:src/xeq.c     **** 
 648:src/xeq.c     **** 	setlastX();
 649:src/xeq.c     **** 	getX(&x);
 650:src/xeq.c     **** 	if (op == RARG_ROUND)
 651:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 652:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 653:src/xeq.c     **** 		decNumberRoundDecimals(&res, &x, arg, rm);
 654:src/xeq.c     **** 	setX(&res);
 655:src/xeq.c     **** }
 656:src/xeq.c     **** 
 657:src/xeq.c     **** /* Check if a value is bogus and error out if so.
 658:src/xeq.c     ****  * A value is bogus if it is infinite, NaN *and* flag D is not set.
 659:src/xeq.c     ****  * If flag D is set, these values are allowed through just fine.
 660:src/xeq.c     ****  */
 661:src/xeq.c     **** static int check_special(const decNumber *x) {
 662:src/xeq.c     **** 	decNumber y;
 663:src/xeq.c     **** 	decimal64 z;
 664:src/xeq.c     **** 	decimal128 d;
 665:src/xeq.c     **** 	if (is_dblmode()) {
 666:src/xeq.c     **** 		packed128_from_number(&d, x);
 667:src/xeq.c     **** 		decimal128ToNumber(&d, &y);
 668:src/xeq.c     **** 	}
 669:src/xeq.c     **** 	else 
 670:src/xeq.c     **** 	{
 671:src/xeq.c     **** 		packed_from_number(&z, x);
 672:src/xeq.c     **** 		decimal64ToNumber(&z, &y);
 673:src/xeq.c     **** 	}
 674:src/xeq.c     **** 	if (decNumberIsSpecial(&y)) {
 675:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 676:src/xeq.c     **** 			if (decNumberIsNaN(&y))
 677:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 678:src/xeq.c     **** 			else if (decNumberIsNegative(&y))
 679:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 680:src/xeq.c     **** 			else
 681:src/xeq.c     **** 				report_err(ERR_INFINITY);
 682:src/xeq.c     **** 			return 1;
 683:src/xeq.c     **** 		}
 684:src/xeq.c     **** 	}
 685:src/xeq.c     **** 	return 0;
 686:src/xeq.c     **** }
 687:src/xeq.c     **** 
 688:src/xeq.c     **** 
 689:src/xeq.c     **** int stack_size(void) {
 690:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 691:src/xeq.c     **** 		return 4;
 692:src/xeq.c     **** 	return 8;
 693:src/xeq.c     **** }
 694:src/xeq.c     **** 
 695:src/xeq.c     **** REGISTER *get_stack(int pos) {
 696:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 697:src/xeq.c     **** }
ARM GAS  /tmp/ccK8IvWa.s 			page 17


 698:src/xeq.c     **** 
 699:src/xeq.c     **** static REGISTER *get_stack_top(void) {
 700:src/xeq.c     **** 	return get_stack(stack_size()-1);
 701:src/xeq.c     **** }
 702:src/xeq.c     **** 
 703:src/xeq.c     **** void copyreg(REGISTER *d, const REGISTER *s) {
 704:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 705:src/xeq.c     **** }
 706:src/xeq.c     **** 
 707:src/xeq.c     **** void copyreg_n(int d, int s) {
 708:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 709:src/xeq.c     **** }
 710:src/xeq.c     **** 
 711:src/xeq.c     **** /* Lift the stack one level.
 712:src/xeq.c     ****  */
 713:src/xeq.c     **** void lift(void) {
 714:src/xeq.c     **** 	const int n = stack_size();
 715:src/xeq.c     **** 	int i;
 716:src/xeq.c     **** 	for (i=n-1; i>0; i--)
 717:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 718:src/xeq.c     **** }
 719:src/xeq.c     **** 
 720:src/xeq.c     **** static int get_lift(void) {
 721:src/xeq.c     **** 	return State2.state_lift;
 722:src/xeq.c     **** }
 723:src/xeq.c     **** 
 724:src/xeq.c     **** void lift_if_enabled(void) {
 725:src/xeq.c     **** 	if (get_lift())
 726:src/xeq.c     **** 		lift();
 727:src/xeq.c     **** }
 728:src/xeq.c     **** 
 729:src/xeq.c     **** static void lift2_if_enabled(void) {
 730:src/xeq.c     **** 	lift_if_enabled();
 731:src/xeq.c     **** 	lift();
 732:src/xeq.c     **** }
 733:src/xeq.c     **** 
 734:src/xeq.c     **** void set_lift(void) {
 735:src/xeq.c     ****     State2.state_lift = 1;
 736:src/xeq.c     **** }
 737:src/xeq.c     **** 
 738:src/xeq.c     **** static void clr_lift(void) {
 739:src/xeq.c     ****     State2.state_lift = 0;
 740:src/xeq.c     **** }
 741:src/xeq.c     **** 
 742:src/xeq.c     **** static void lower(void) {
 743:src/xeq.c     **** 	const int n = stack_size();
 744:src/xeq.c     **** 	int i;
 745:src/xeq.c     **** 
 746:src/xeq.c     **** 	for (i=1; i<n; i++)
 747:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 748:src/xeq.c     **** }
 749:src/xeq.c     **** 
 750:src/xeq.c     **** static void lower2(void) {
 751:src/xeq.c     **** 	const int n = stack_size();
 752:src/xeq.c     **** 	int i;
 753:src/xeq.c     **** 
 754:src/xeq.c     **** 	for (i=2; i<n; i++)
ARM GAS  /tmp/ccK8IvWa.s 			page 18


 755:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 756:src/xeq.c     **** }
 757:src/xeq.c     **** 
 758:src/xeq.c     **** 
 759:src/xeq.c     **** void setlastX(void) {
 760:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 761:src/xeq.c     **** }
 762:src/xeq.c     **** 
 763:src/xeq.c     **** static void setlastXY(void) {
 764:src/xeq.c     **** 	setlastX();
 765:src/xeq.c     **** 	copyreg_n(regI_idx, regY_idx);
 766:src/xeq.c     **** }
 767:src/xeq.c     **** 
 768:src/xeq.c     **** 
 769:src/xeq.c     **** decNumber *getRegister(decNumber *r, int index) {
 770:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 771:src/xeq.c     **** 	if (is_dblmode())
 772:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 773:src/xeq.c     **** 	else
 774:src/xeq.c     **** 		decimal64ToNumber(&(reg->s), r);
 775:src/xeq.c     **** 	return r;
 776:src/xeq.c     **** }
 777:src/xeq.c     **** 
 778:src/xeq.c     **** void setRegister(int index, const decNumber *x) {
 779:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 780:src/xeq.c     **** 	decNumber dn;
 781:src/xeq.c     **** 
 782:src/xeq.c     **** 	if (! check_special(x)) {	/* This correctly deals with infinities and NaN based on flag D */
 783:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 784:src/xeq.c     **** 		if (is_dblmode())
 785:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 786:src/xeq.c     **** 		else
 787:src/xeq.c     **** 			packed_from_number(&(reg->s), &dn);
 788:src/xeq.c     **** 	}
 789:src/xeq.c     **** }
 790:src/xeq.c     **** 
 791:src/xeq.c     **** decNumber *getX(decNumber *x) {
 792:src/xeq.c     **** 	return getRegister(x, regX_idx);
 793:src/xeq.c     **** }
 794:src/xeq.c     **** 
 795:src/xeq.c     **** void setX(const decNumber *x) {
 796:src/xeq.c     **** 	setRegister(regX_idx, x);
 797:src/xeq.c     **** }
 798:src/xeq.c     **** 
 799:src/xeq.c     **** void getY(decNumber *y) {
 800:src/xeq.c     **** 	getRegister(y, regY_idx);
 801:src/xeq.c     **** }
 802:src/xeq.c     **** 
 803:src/xeq.c     **** void setY(const decNumber *y) {
 804:src/xeq.c     **** 	setRegister(regY_idx, y);
 805:src/xeq.c     **** }
 806:src/xeq.c     **** 
 807:src/xeq.c     **** static void getZ(decNumber *z) {
 808:src/xeq.c     **** 	getRegister(z, regZ_idx);
 809:src/xeq.c     **** }
 810:src/xeq.c     **** 
 811:src/xeq.c     **** #if 0
ARM GAS  /tmp/ccK8IvWa.s 			page 19


 812:src/xeq.c     **** static void setZ(const decNumber *z) {
 813:src/xeq.c     **** 	setRegister(regZ_idx, z);
 814:src/xeq.c     **** }
 815:src/xeq.c     **** #endif
 816:src/xeq.c     **** 
 817:src/xeq.c     **** static void getT(decNumber *t) {
 818:src/xeq.c     **** 	getRegister(t, regT_idx);
 819:src/xeq.c     **** }
 820:src/xeq.c     **** 
 821:src/xeq.c     **** void getXY(decNumber *x, decNumber *y) {
 822:src/xeq.c     **** 	getX(x);
 823:src/xeq.c     **** 	getY(y);
 824:src/xeq.c     **** }
 825:src/xeq.c     **** 
 826:src/xeq.c     **** void setXY(const decNumber *x, const decNumber *y) {
 827:src/xeq.c     **** 	setX(x);
 828:src/xeq.c     **** 	setY(y);
 829:src/xeq.c     **** }
 830:src/xeq.c     **** 
 831:src/xeq.c     **** void getXYZ(decNumber *x, decNumber *y, decNumber *z) {
 832:src/xeq.c     **** 	getXY(x, y);
 833:src/xeq.c     **** 	getZ(z);
 834:src/xeq.c     **** }
 835:src/xeq.c     **** 
 836:src/xeq.c     **** #if 0
 837:src/xeq.c     **** void setXYZ(const decNumber *x, const decNumber *y, const decNumber *z) {
 838:src/xeq.c     **** 	setXY(x, y);
 839:src/xeq.c     **** 	setZ(z);
 840:src/xeq.c     **** }
 841:src/xeq.c     **** #endif
 842:src/xeq.c     **** 
 843:src/xeq.c     **** void getXYZT(decNumber *x, decNumber *y, decNumber *z, decNumber *t) {
 844:src/xeq.c     **** 	getXYZ(x, y, z);
 845:src/xeq.c     **** 	getT(t);
 846:src/xeq.c     **** }
 847:src/xeq.c     **** 
 848:src/xeq.c     **** void getYZ(decNumber *y, decNumber *z) {
 849:src/xeq.c     **** 	getY(y);
 850:src/xeq.c     **** 	getZ(z);
 851:src/xeq.c     **** }
 852:src/xeq.c     **** 
 853:src/xeq.c     **** void roll_down(enum nilop op) {
 854:src/xeq.c     **** 	REGISTER r;
 855:src/xeq.c     **** 	copyreg(&r, StackBase);
 856:src/xeq.c     **** 	lower();
 857:src/xeq.c     **** 	copyreg(get_stack_top(), &r);
 858:src/xeq.c     **** }
 859:src/xeq.c     **** 
 860:src/xeq.c     **** void roll_up(enum nilop op) {
 861:src/xeq.c     **** 	REGISTER r;
 862:src/xeq.c     **** 	copyreg(&r, get_stack_top());
 863:src/xeq.c     **** 	lift();
 864:src/xeq.c     **** 	copyreg(StackBase, &r);
 865:src/xeq.c     **** }
 866:src/xeq.c     **** 
 867:src/xeq.c     **** void cpx_roll_down(enum nilop op) {
 868:src/xeq.c     **** 	roll_down(OP_RDOWN);
ARM GAS  /tmp/ccK8IvWa.s 			page 20


 869:src/xeq.c     **** 	roll_down(OP_RDOWN);
 870:src/xeq.c     **** 	set_was_complex();
 871:src/xeq.c     **** }
 872:src/xeq.c     **** 
 873:src/xeq.c     **** void cpx_roll_up(enum nilop op) {
 874:src/xeq.c     **** 	roll_up(OP_RUP);
 875:src/xeq.c     **** 	roll_up(OP_RUP);
 876:src/xeq.c     **** 	set_was_complex();
 877:src/xeq.c     **** }
 878:src/xeq.c     **** 
 879:src/xeq.c     **** void cpx_enter(enum nilop op) {
 880:src/xeq.c     **** 	lift();
 881:src/xeq.c     **** 	lift();
 882:src/xeq.c     **** 	copyreg(get_reg_n(regY_idx), get_reg_n(regT_idx));
 883:src/xeq.c     **** 	set_was_complex();
 884:src/xeq.c     **** }
 885:src/xeq.c     **** 
 886:src/xeq.c     **** void cpx_fill(enum nilop op) {
 887:src/xeq.c     **** 	const int n = stack_size();
 888:src/xeq.c     **** 	const REGISTER *y = get_reg_n(regY_idx);
 889:src/xeq.c     **** 	int i;
 890:src/xeq.c     **** 
 891:src/xeq.c     **** 	for (i=2; i<n; i++)
 892:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 893:src/xeq.c     **** 	set_was_complex();
 894:src/xeq.c     **** }
 895:src/xeq.c     **** 
 896:src/xeq.c     **** void fill(enum nilop op) {
 897:src/xeq.c     **** 	const int n = stack_size();
 898:src/xeq.c     **** 	int i;
 899:src/xeq.c     **** 
 900:src/xeq.c     **** 	for (i=1; i<n; i++)
 901:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 902:src/xeq.c     **** }
 903:src/xeq.c     **** 
 904:src/xeq.c     **** void drop(enum nilop op) {
 905:src/xeq.c     **** 	if (op == OP_DROPXY) {
 906:src/xeq.c     **** 		lower2();
 907:src/xeq.c     **** 		set_was_complex();
 908:src/xeq.c     **** 	} else
 909:src/xeq.c     **** 		lower();
 910:src/xeq.c     **** }
 911:src/xeq.c     **** 
 912:src/xeq.c     **** #ifndef is_intmode
 913:src/xeq.c     **** int is_intmode(void) {
 914:src/xeq.c     **** 	return UState.intm;
 915:src/xeq.c     **** }
 916:src/xeq.c     **** #endif
 917:src/xeq.c     **** 
 918:src/xeq.c     **** int is_dblmode(void) {
 919:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 920:src/xeq.c     **** }
 921:src/xeq.c     **** 
 922:src/xeq.c     **** int is_usrdblmode(void) {
 923:src/xeq.c     **** 	if (XromFlags.xIN)
 924:src/xeq.c     **** 		return XromFlags.mode_double;
 925:src/xeq.c     **** 	return is_dblmode();
ARM GAS  /tmp/ccK8IvWa.s 			page 21


 926:src/xeq.c     **** }
 927:src/xeq.c     **** 
 928:src/xeq.c     **** /* Convert a possibly signed string to an integer
 929:src/xeq.c     ****  */
 930:src/xeq.c     **** int s_to_i(const char *s) {
 931:src/xeq.c     **** 	int x = 0;
 932:src/xeq.c     **** 	int neg;
 933:src/xeq.c     **** 
 934:src/xeq.c     **** 	if (*s == '-') {
 935:src/xeq.c     **** 		s++;
 936:src/xeq.c     **** 		neg = 1;
 937:src/xeq.c     **** 	} else {
 938:src/xeq.c     **** 		if (*s == '+')
 939:src/xeq.c     **** 			s++;
 940:src/xeq.c     **** 		neg = 0;
 941:src/xeq.c     **** 	}
 942:src/xeq.c     **** 
 943:src/xeq.c     **** 	for (;;) {
 944:src/xeq.c     **** 		const char c = *s++;
 945:src/xeq.c     **** 
 946:src/xeq.c     **** 		if (c < '0' || c > '9')
 947:src/xeq.c     **** 			break;
 948:src/xeq.c     **** 		x = 10 * x + (c - '0');
 949:src/xeq.c     **** 	}
 950:src/xeq.c     **** 	if (neg)
 951:src/xeq.c     **** 		return -x;
 952:src/xeq.c     **** 	return x;
 953:src/xeq.c     **** }
 954:src/xeq.c     **** 
 955:src/xeq.c     **** /* Convert a string in the given base to an unsigned integer
 956:src/xeq.c     ****  */
 957:src/xeq.c     **** unsigned long long int s_to_ull(const char *s, unsigned int base) {
 958:src/xeq.c     **** 	unsigned long long int x = 0;
 959:src/xeq.c     **** 
 960:src/xeq.c     **** 	for (;;) {
 961:src/xeq.c     **** 		unsigned int n;
 962:src/xeq.c     **** 		const char c = *s++;
 963:src/xeq.c     **** 
 964:src/xeq.c     **** 		if (c >= '0' && c <= '9')
 965:src/xeq.c     **** 			n = c - '0';
 966:src/xeq.c     **** 		else if (c >= 'A' && c <= 'F')
 967:src/xeq.c     **** 			n = c - 'A' + 10;
 968:src/xeq.c     **** 		else
 969:src/xeq.c     **** 			break;
 970:src/xeq.c     **** 		if (n >= base)
 971:src/xeq.c     **** 			break;
 972:src/xeq.c     **** 		x = x * base + n;
 973:src/xeq.c     **** 	}
 974:src/xeq.c     **** 	return x;
 975:src/xeq.c     **** }
 976:src/xeq.c     **** 
 977:src/xeq.c     **** const char *get_cmdline(void) {
 978:src/xeq.c     **** 	if (CmdLineLength) {
 979:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
 980:src/xeq.c     **** 		return Cmdline;
 981:src/xeq.c     **** 	}
 982:src/xeq.c     **** 	return NULL;
ARM GAS  /tmp/ccK8IvWa.s 			page 22


 983:src/xeq.c     **** }
 984:src/xeq.c     **** 
 985:src/xeq.c     **** #if 0
 986:src/xeq.c     **** static int fract_convert_number(decNumber *x, const char *s) {
 987:src/xeq.c     **** 	if (*s == '\0') {
 988:src/xeq.c     **** 		report_err(ERR_DOMAIN);
 989:src/xeq.c     **** 		return 1;
 990:src/xeq.c     **** 	}
 991:src/xeq.c     **** 	decNumberFromString(x, s, &Ctx);
 992:src/xeq.c     **** 	return check_special(x);
 993:src/xeq.c     **** }
 994:src/xeq.c     **** #endif
 995:src/xeq.c     **** 
 996:src/xeq.c     **** /* Return 1 if the command line contains an error and also set an appropriate
 997:src/xeq.c     ****  * error message.
 998:src/xeq.c     ****  */
 999:src/xeq.c     **** int is_bad_cmdline(void)
1000:src/xeq.c     **** {
1001:src/xeq.c     **** #ifndef IGNORE_INVALID_FRACTIONS
1002:src/xeq.c     **** 	if (CmdLineDot == 2) {
1003:src/xeq.c     **** 		char *p;
1004:src/xeq.c     **** 
1005:src/xeq.c     **** 		// Check if there's a non-zero digit after the last decimal mark
1006:src/xeq.c     **** 		p = Cmdline + CmdLineLength;
1007:src/xeq.c     **** 		for (;;) {
1008:src/xeq.c     **** 			p--;
1009:src/xeq.c     **** 			if (*p >= '1' && *p <= '9')
1010:src/xeq.c     **** 				return 0;
1011:src/xeq.c     **** 			if (*p == '.')
1012:src/xeq.c     **** 				break;
1013:src/xeq.c     **** 		}
1014:src/xeq.c     **** 
1015:src/xeq.c     **** 		reset_shift();
1016:src/xeq.c     **** 		error_message(ERR_DOMAIN);
1017:src/xeq.c     **** 		State2.invalid_disp = 1;
1018:src/xeq.c     **** 		return 1;
1019:src/xeq.c     **** 	}
1020:src/xeq.c     **** #endif
1021:src/xeq.c     **** 	return 0;
1022:src/xeq.c     **** }
1023:src/xeq.c     **** 
1024:src/xeq.c     **** /* Process the command line if any
1025:src/xeq.c     ****  */
1026:src/xeq.c     **** void process_cmdline(void) {
1027:src/xeq.c     **** 	decNumber a, b, x, t;
1028:src/xeq.c     **** 
1029:src/xeq.c     **** 	if (CmdLineLength) {
1030:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
1031:src/xeq.c     **** 		const unsigned int cmdlinedot = CmdLineDot;
1032:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
1033:src/xeq.c     **** 		char cmdline[CMDLINELEN + 2];
1034:src/xeq.c     **** #else
1035:src/xeq.c     **** 		char cmdline[CMDLINELEN + 1];
1036:src/xeq.c     **** #endif
1037:src/xeq.c     **** 
1038:src/xeq.c     **** 		xcopy(cmdline, Cmdline, CMDLINELEN + 1);
1039:src/xeq.c     **** 
ARM GAS  /tmp/ccK8IvWa.s 			page 23


1040:src/xeq.c     **** 		cmdline[CmdLineLength] = '\0';
1041:src/xeq.c     **** 		if (!is_intmode()) {
1042:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
1043:src/xeq.c     **** 			if (cmdline[CmdLineLength-1] == 'E' || cmdline[CmdLineLength-1] == 'D')
1044:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
1045:src/xeq.c     **** 			else if (cmdline[CmdLineEex] == 'D') {
1046:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
1047:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
1048:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
1049:src/xeq.c     **** 			}
1050:src/xeq.c     **** #else
1051:src/xeq.c     **** 			if (cmdline[CmdLineLength-1] == 'E')
1052:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
1053:src/xeq.c     **** 			else if (CmdLineLength > 1 && cmdline[CmdLineLength-2] == 'E' && cmdline[CmdLineLength-1] == '-'
1054:src/xeq.c     **** 				cmdline[CmdLineLength-2] = '\0';
1055:src/xeq.c     **** #endif
1056:src/xeq.c     **** 			if (0
1057:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
1058:src/xeq.c     **** 			    || CmdLineEex
1059:src/xeq.c     **** #endif
1060:src/xeq.c     **** #if FRACTION_MODE_INPUT & 4
1061:src/xeq.c     **** 			    || cmdlinedot == 1
1062:src/xeq.c     **** #endif
1063:src/xeq.c     **** 			   )
1064:src/xeq.c     **** 				UState.fract = 0;
1065:src/xeq.c     **** 		}
1066:src/xeq.c     **** 		CmdLineLength = 0;
1067:src/xeq.c     **** 		lift_if_enabled();
1068:src/xeq.c     **** 		set_lift();
1069:src/xeq.c     **** 		CmdLineDot = 0;
1070:src/xeq.c     **** 		CmdLineEex = 0;
1071:src/xeq.c     **** 		if (is_intmode()) {
1072:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
1073:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
1074:src/xeq.c     **** 			setX_int_sgn(x, sgn);
1075:src/xeq.c     **** 		} else if (cmdlinedot == 2) {
1076:src/xeq.c     **** 			char *d0, *d1, *d2;
1077:src/xeq.c     **** 			int neg;
1078:src/xeq.c     **** 
1079:src/xeq.c     **** 			if (bad_cmdline)
1080:src/xeq.c     **** 				return;
1081:src/xeq.c     **** #if !(FRACTION_MODE_INPUT & 8)
1082:src/xeq.c     **** 			UState.fract = 1;
1083:src/xeq.c     **** #endif
1084:src/xeq.c     **** 			if (cmdline[0] == '-') {
1085:src/xeq.c     **** 				neg = 1;
1086:src/xeq.c     **** 				d0 = cmdline+1;
1087:src/xeq.c     **** 			} else {
1088:src/xeq.c     **** 				neg = 0;
1089:src/xeq.c     **** 				d0 = cmdline;
1090:src/xeq.c     **** 			}
1091:src/xeq.c     **** 			d1 = find_char(d0, '.');
1092:src/xeq.c     **** 			*d1++ = '\0';
1093:src/xeq.c     **** 			d2 = find_char(d1, '.');
1094:src/xeq.c     **** 			*d2++ = '\0';
1095:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
1096:src/xeq.c     **** 			decNumberFromString(&x, d0, &Ctx);
ARM GAS  /tmp/ccK8IvWa.s 			page 24


1097:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1098:src/xeq.c     **** 			if (d2 == d1+1) { // ND change starts here; if dots are adjacent...
1099:src/xeq.c     **** 				decNumberCopy(&a, &x); // put x (integer part) into a (numerator) ...
1100:src/xeq.c     **** 				decNumberZero(&x); // and zero x
1101:src/xeq.c     **** #if FRACTION_MODE_INPUT & 32
1102:src/xeq.c     **** 				UState.improperfrac = 1;
1103:src/xeq.c     **** #endif
1104:src/xeq.c     **** 			}
1105:src/xeq.c     **** 			else
1106:src/xeq.c     **** #endif
1107:src/xeq.c     **** 			{
1108:src/xeq.c     **** 				decNumberFromString(&a, d1, &Ctx);
1109:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 16) && defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1110:src/xeq.c     **** 				UState.improperfrac = 0;
1111:src/xeq.c     **** #endif
1112:src/xeq.c     **** 			}
1113:src/xeq.c     **** 			dn_divide(&t, &a, &b);
1114:src/xeq.c     **** #ifdef IGNORE_INVALID_FRACTIONS
1115:src/xeq.c     **** 			if (!decNumberIsSpecial(&t))
1116:src/xeq.c     **** #endif
1117:src/xeq.c     **** 				dn_add(&x, &x, &t);
1118:src/xeq.c     **** 			if (neg)
1119:src/xeq.c     **** 				dn_minus(&x, &x);
1120:src/xeq.c     **** 			setX(&x);
1121:src/xeq.c     **** 		} else {
1122:src/xeq.c     **** 			decNumberFromString(&x, cmdline, &Ctx);
1123:src/xeq.c     **** 			setX(&x);
1124:src/xeq.c     **** 		}
1125:src/xeq.c     **** 		set_entry();
1126:src/xeq.c     **** #ifndef DM42
1127:src/xeq.c     **** 		print_trace( TRACE_DATA_ENTRY, 1 );
1128:src/xeq.c     **** #endif
1129:src/xeq.c     **** 	}
1130:src/xeq.c     **** }
1131:src/xeq.c     **** 
1132:src/xeq.c     **** void process_cmdline_set_lift(void) {
1133:src/xeq.c     **** 	process_cmdline();
1134:src/xeq.c     **** 	set_lift();
1135:src/xeq.c     **** }
1136:src/xeq.c     **** 
1137:src/xeq.c     **** 
1138:src/xeq.c     **** /*
1139:src/xeq.c     ****  *  Return a pointer to a numbered register.
1140:src/xeq.c     ****  *  If locals are enabled and a non existent local register
1141:src/xeq.c     ****  *  is accessed, the respective global register is returned.
1142:src/xeq.c     ****  *  Error checking must be done outside this routine.
1143:src/xeq.c     ****  *  We force the beginning of the local registers on an even stack position.
1144:src/xeq.c     ****  *  This ensures 32 bit alignment of the decima64 object.
1145:src/xeq.c     ****  */
1146:src/xeq.c     **** /*
1147:src/xeq.c     ****  *  If working in double precision, register numbers must be remapped
1148:src/xeq.c     ****  */
1149:src/xeq.c     **** static decimal64 *reg_address(int n, decimal64 *const regs, decimal64 *const named_regs) {
 180              		.loc 1 1149 90 is_stmt 1 view -0
 181              		.cfi_startproc
 182              		@ args = 0, pretend = 0, frame = 0
 183              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccK8IvWa.s 			page 25


 184              		@ link register save eliminated.
1150:src/xeq.c     **** 	const int dbl = is_dblmode();
 185              		.loc 1 1150 2 view .LVU57
 186              	.LBB1307:
 187              	.LBI1307:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 188              		.loc 1 918 5 view .LVU58
 189              	.LBB1308:
 919:src/xeq.c     **** }
 190              		.loc 1 919 2 view .LVU59
 919:src/xeq.c     **** }
 191              		.loc 1 919 24 is_stmt 0 view .LVU60
 192 0000 154B     		ldr	r3, .L25
 193              	.LBE1308:
 194              	.LBE1307:
1149:src/xeq.c     **** 	const int dbl = is_dblmode();
 195              		.loc 1 1149 90 view .LVU61
 196 0002 10B4     		push	{r4}
 197              		.cfi_def_cfa_offset 4
 198              		.cfi_offset 4, -4
 199              	.LBB1311:
 200              	.LBB1309:
 919:src/xeq.c     **** }
 201              		.loc 1 919 24 view .LVU62
 202 0004 B3F8E847 		ldrh	r4, [r3, #2024]
 203              	.LBE1309:
 204              	.LBE1311:
1151:src/xeq.c     **** 
1152:src/xeq.c     **** 	if (n < regX_idx)
 205              		.loc 1 1152 5 view .LVU63
 206 0008 6328     		cmp	r0, #99
 207              	.LBB1312:
 208              	.LBB1310:
 919:src/xeq.c     **** }
 209              		.loc 1 919 24 view .LVU64
 210 000a 44F20103 		movw	r3, #16385
 211 000e 03EA0403 		and	r3, r3, r4
 212              	.LVL18:
 919:src/xeq.c     **** }
 213              		.loc 1 919 24 view .LVU65
 214              	.LBE1310:
 215              	.LBE1312:
 216              		.loc 1 1152 2 is_stmt 1 view .LVU66
 217              		.loc 1 1152 5 is_stmt 0 view .LVU67
 218 0012 10DD     		ble	.L23
1153:src/xeq.c     **** 		return regs + n + (dbl ? n : 0);
1154:src/xeq.c     **** 
1155:src/xeq.c     **** 	n -= regX_idx;
 219              		.loc 1 1155 2 is_stmt 1 view .LVU68
1156:src/xeq.c     **** 	// Lettered register
1157:src/xeq.c     **** 	if (XromFlags.xIN)
 220              		.loc 1 1157 6 is_stmt 0 view .LVU69
 221 0014 1149     		ldr	r1, .L25+4
 222              	.LVL19:
 223              		.loc 1 1157 5 view .LVU70
 224 0016 91F90140 		ldrsb	r4, [r1, #1]
 225 001a 002C     		cmp	r4, #0
ARM GAS  /tmp/ccK8IvWa.s 			page 26


1155:src/xeq.c     **** 	// Lettered register
 226              		.loc 1 1155 4 view .LVU71
 227 001c A0F16401 		sub	r1, r0, #100
 228              	.LVL20:
 229              		.loc 1 1157 2 is_stmt 1 view .LVU72
 230              		.loc 1 1157 5 is_stmt 0 view .LVU73
 231 0020 13DB     		blt	.L24
1158:src/xeq.c     **** 		return (decimal64 *) (XromStack + n);
1159:src/xeq.c     **** 	if (dbl)
 232              		.loc 1 1159 2 is_stmt 1 view .LVU74
 233              		.loc 1 1159 5 is_stmt 0 view .LVU75
 234 0022 B3F5804F 		cmp	r3, #16384
1160:src/xeq.c     **** 		n = (n << 1) - STACK_SIZE - EXTRA_REG;
 235              		.loc 1 1160 3 is_stmt 1 view .LVU76
 236              		.loc 1 1160 10 is_stmt 0 view .LVU77
 237 0026 04BF     		itt	eq
 238 0028 4900     		lsleq	r1, r1, #1
 239              	.LVL21:
 240              		.loc 1 1160 5 view .LVU78
 241 002a 0C39     		subeq	r1, r1, #12
 242              	.LVL22:
1161:src/xeq.c     **** 	return named_regs + n;
 243              		.loc 1 1161 2 is_stmt 1 view .LVU79
 244              		.loc 1 1161 20 is_stmt 0 view .LVU80
 245 002c 02EBC100 		add	r0, r2, r1, lsl #3
1162:src/xeq.c     **** }
 246              		.loc 1 1162 1 view .LVU81
 247 0030 5DF8044B 		ldr	r4, [sp], #4
 248              		.cfi_remember_state
 249              		.cfi_restore 4
 250              		.cfi_def_cfa_offset 0
 251 0034 7047     		bx	lr
 252              	.LVL23:
 253              	.L23:
 254              		.cfi_restore_state
1153:src/xeq.c     **** 
 255              		.loc 1 1153 3 is_stmt 1 view .LVU82
1153:src/xeq.c     **** 
 256              		.loc 1 1153 19 is_stmt 0 view .LVU83
 257 0036 B3F5804F 		cmp	r3, #16384
1153:src/xeq.c     **** 
 258              		.loc 1 1153 15 view .LVU84
 259 003a 4FEAC002 		lsl	r2, r0, #3
 260              	.LVL24:
1153:src/xeq.c     **** 
 261              		.loc 1 1153 15 view .LVU85
 262 003e 08BF     		it	eq
 263 0040 0201     		lsleq	r2, r0, #4
1153:src/xeq.c     **** 
 264              		.loc 1 1153 19 view .LVU86
 265 0042 8818     		adds	r0, r1, r2
 266              	.LVL25:
 267              		.loc 1 1162 1 view .LVU87
 268 0044 5DF8044B 		ldr	r4, [sp], #4
 269              		.cfi_remember_state
 270              		.cfi_restore 4
 271              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccK8IvWa.s 			page 27


 272 0048 7047     		bx	lr
 273              	.LVL26:
 274              	.L24:
 275              		.cfi_restore_state
1158:src/xeq.c     **** 	if (dbl)
 276              		.loc 1 1158 3 is_stmt 1 view .LVU88
1158:src/xeq.c     **** 	if (dbl)
 277              		.loc 1 1158 10 is_stmt 0 view .LVU89
 278 004a 0548     		ldr	r0, .L25+8
 279              		.loc 1 1162 1 view .LVU90
 280 004c 5DF8044B 		ldr	r4, [sp], #4
 281              		.cfi_restore 4
 282              		.cfi_def_cfa_offset 0
1158:src/xeq.c     **** 	if (dbl)
 283              		.loc 1 1158 10 view .LVU91
 284 0050 00EB0110 		add	r0, r0, r1, lsl #4
 285              		.loc 1 1162 1 view .LVU92
 286 0054 7047     		bx	lr
 287              	.L26:
 288 0056 00BF     		.align	2
 289              	.L25:
 290 0058 00000000 		.word	PersistentRam
 291 005c 00000000 		.word	XromParams
 292 0060 00000000 		.word	XromLocal
 293              		.cfi_endproc
 294              	.LFE85:
 296              		.section	.text.retstk_up,"ax",%progbits
 297              		.align	1
 298              		.p2align 2,,3
 299              		.syntax unified
 300              		.thumb
 301              		.thumb_func
 302              		.fpu fpv4-sp-d16
 304              	retstk_up:
 305              	.LFB145:
1163:src/xeq.c     **** 
1164:src/xeq.c     **** REGISTER *get_reg_n(int n) {
1165:src/xeq.c     **** 	const int dbl = is_dblmode();
1166:src/xeq.c     **** 
1167:src/xeq.c     **** 	if (n >= CONST_REG_BASE) {
1168:src/xeq.c     **** 		n -= CONST_REG_BASE;
1169:src/xeq.c     **** 		return get_const(n, dbl);
1170:src/xeq.c     **** 	}
1171:src/xeq.c     **** 	if (n >= FLASH_REG_BASE)
1172:src/xeq.c     **** 		return get_flash_reg_n(n - FLASH_REG_BASE);
1173:src/xeq.c     **** 
1174:src/xeq.c     **** 	if (n >= LOCAL_REG_BASE && local_regs() > 0) {
1175:src/xeq.c     **** 		// local register on the return stack
1176:src/xeq.c     **** 		n -= LOCAL_REG_BASE;
1177:src/xeq.c     **** 		if (dbl)
1178:src/xeq.c     **** 			n <<= 1;
1179:src/xeq.c     **** 		return (REGISTER *) ((decimal64 *) (RetStk + (short)((LocalRegs + 2) & 0xfffe)) + n);
1180:src/xeq.c     **** 	}
1181:src/xeq.c     **** 	return (REGISTER *) reg_address(n, Regs + TOPREALREG - NumRegs, Regs + regX_idx);
1182:src/xeq.c     **** }
1183:src/xeq.c     **** 
1184:src/xeq.c     **** 
ARM GAS  /tmp/ccK8IvWa.s 			page 28


1185:src/xeq.c     **** REGISTER *get_flash_reg_n(int n) {
1186:src/xeq.c     **** 	return (REGISTER *) reg_address(n, BackupFlash._regs + TOPREALREG - BackupFlash._numregs,
1187:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
1188:src/xeq.c     **** }
1189:src/xeq.c     **** 
1190:src/xeq.c     **** 
1191:src/xeq.c     **** /*
1192:src/xeq.c     ****  *  Get a constatnt by index and mode
1193:src/xeq.c     ****  *  In case of a conversion, a private copy is returned
1194:src/xeq.c     ****  */
1195:src/xeq.c     **** REGISTER *get_const(int index, int dbl)
1196:src/xeq.c     **** {
1197:src/xeq.c     **** 	static REGISTER result;
1198:src/xeq.c     **** 	const int i = cnsts[index].index;
1199:src/xeq.c     **** 	if (dbl) {
1200:src/xeq.c     **** 		if (i <= 1 || i >= 128)
1201:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
1202:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
1203:src/xeq.c     **** 	}
1204:src/xeq.c     **** 	else {
1205:src/xeq.c     **** 		if (i < 128)
1206:src/xeq.c     **** 			return (REGISTER *) (cnsts_d64 + i);
1207:src/xeq.c     **** 		packed_from_packed128(&(result.s), cnsts_d128 - 128 + i);
1208:src/xeq.c     **** 	}
1209:src/xeq.c     **** 	return &result;
1210:src/xeq.c     **** }
1211:src/xeq.c     **** 
1212:src/xeq.c     **** 
1213:src/xeq.c     **** /*  Some conversion routines to take decimals and produce integers
1214:src/xeq.c     ****  *  This is for opaque storage, no conversion takes place.
1215:src/xeq.c     ****  */
1216:src/xeq.c     **** long long int get_reg_n_int(int index) {
1217:src/xeq.c     **** 	long long int ll;
1218:src/xeq.c     **** 	xcopy(&ll, get_reg_n(index), sizeof(ll));
1219:src/xeq.c     **** 	return ll;
1220:src/xeq.c     **** }
1221:src/xeq.c     **** 
1222:src/xeq.c     **** void set_reg_n_int(int index, long long int ll) {
1223:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
1224:src/xeq.c     **** }
1225:src/xeq.c     **** 
1226:src/xeq.c     **** /* Get an integer from a register
1227:src/xeq.c     ****  */
1228:src/xeq.c     **** unsigned long long int get_reg_n_int_sgn(int index, int *sgn) {
1229:src/xeq.c     **** 	if (is_intmode()) {
1230:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
1231:src/xeq.c     **** 	} else {
1232:src/xeq.c     **** 		decNumber n;
1233:src/xeq.c     **** 
1234:src/xeq.c     **** 		getRegister(&n, index);
1235:src/xeq.c     **** 		return dn_to_ull(&n, sgn);
1236:src/xeq.c     **** 	}
1237:src/xeq.c     **** }
1238:src/xeq.c     **** 
1239:src/xeq.c     **** 
1240:src/xeq.c     **** /* Get an integer from X
1241:src/xeq.c     ****  */
ARM GAS  /tmp/ccK8IvWa.s 			page 29


1242:src/xeq.c     **** long long int getX_int(void) {
1243:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
1244:src/xeq.c     **** }
1245:src/xeq.c     **** 
1246:src/xeq.c     **** unsigned long long int getX_int_sgn(int *sgn) {
1247:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
1248:src/xeq.c     **** }
1249:src/xeq.c     **** 
1250:src/xeq.c     **** /*
1251:src/xeq.c     ****  *  Forced conversion from real to intger
1252:src/xeq.c     ****  *  Leaves integer mode active on return!
1253:src/xeq.c     ****  */
1254:src/xeq.c     **** static void int_from_register(int out, int in) {
1255:src/xeq.c     **** 	int sgn;
1256:src/xeq.c     **** 	unsigned long long int val;
1257:src/xeq.c     **** 	
1258:src/xeq.c     **** 	UState.intm = 0;	// Force real mode access
1259:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
1260:src/xeq.c     **** 
1261:src/xeq.c     **** 	UState.intm = 1;	// Force integer access
1262:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
1263:src/xeq.c     **** }
1264:src/xeq.c     **** 
1265:src/xeq.c     **** /* Put an integer into a register
1266:src/xeq.c     ****  */
1267:src/xeq.c     **** void set_reg_n_int_sgn(int index, unsigned long long int val, int sgn) {
1268:src/xeq.c     **** 	if (is_intmode()) {
1269:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
1270:src/xeq.c     **** 	} else {
1271:src/xeq.c     **** 		decNumber t;
1272:src/xeq.c     **** 
1273:src/xeq.c     **** 		ullint_to_dn(&t, val);
1274:src/xeq.c     **** 		if (sgn)
1275:src/xeq.c     **** 			dn_minus(&t, &t);
1276:src/xeq.c     **** 		setRegister(index, &t);
1277:src/xeq.c     **** 	}
1278:src/xeq.c     **** }
1279:src/xeq.c     **** 
1280:src/xeq.c     **** /* 
1281:src/xeq.c     ****  *  Forced conversion from integer to register format.
1282:src/xeq.c     ****  *  Leaves integer mode off after conversion.
1283:src/xeq.c     ****  *  Destination may be in XROM register space
1284:src/xeq.c     ****  */
1285:src/xeq.c     **** static void register_from_int(int out, int in, int called_from_xin) {
1286:src/xeq.c     **** 	int sgn;
1287:src/xeq.c     **** 	unsigned long long int val;
1288:src/xeq.c     **** 	const int xin = XromFlags.xIN;
1289:src/xeq.c     **** 	
1290:src/xeq.c     **** 	if (called_from_xin)
1291:src/xeq.c     **** 		XromFlags.xIN = 0;
1292:src/xeq.c     **** 	UState.intm = 1;
1293:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
1294:src/xeq.c     **** 
1295:src/xeq.c     **** 	XromFlags.xIN = xin;
1296:src/xeq.c     **** 	UState.intm = 0;
1297:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
1298:src/xeq.c     **** }
ARM GAS  /tmp/ccK8IvWa.s 			page 30


1299:src/xeq.c     **** 
1300:src/xeq.c     **** 
1301:src/xeq.c     **** /* Put an integer into X
1302:src/xeq.c     ****  * Integer registers are always single precision!
1303:src/xeq.c     ****  */
1304:src/xeq.c     **** void setX_int(long long int val) {
1305:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
1306:src/xeq.c     **** }
1307:src/xeq.c     **** 
1308:src/xeq.c     **** 
1309:src/xeq.c     **** void setX_int_sgn(unsigned long long int val, int sgn) {
1310:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
1311:src/xeq.c     **** }
1312:src/xeq.c     **** 
1313:src/xeq.c     **** 
1314:src/xeq.c     **** 
1315:src/xeq.c     **** /*
1316:src/xeq.c     ****  *  Set the register value explicitely
1317:src/xeq.c     ****  */
1318:src/xeq.c     **** void zero_regs(REGISTER *dest, int n) {
1319:src/xeq.c     **** #if 0
1320:src/xeq.c     **** 	if (is_intmode())
1321:src/xeq.c     **** 		xset(dest, 0, n << 3);
1322:src/xeq.c     **** 	else {
1323:src/xeq.c     **** 		REGISTER *const zero = get_reg_n(CONST_REG_BASE + OP_ZERO);
1324:src/xeq.c     **** 		const int reg_size = is_dblmode() ? sizeof(decimal128) : sizeof(decimal64);
1325:src/xeq.c     **** 		char *d = (char *) dest;
1326:src/xeq.c     **** 		int i;
1327:src/xeq.c     **** 		for (i = 0; i < n; ++i, d += reg_size)
1328:src/xeq.c     **** 			copyreg((REGISTER *) d, zero);
1329:src/xeq.c     **** 	}
1330:src/xeq.c     **** #else
1331:src/xeq.c     **** 	// This works for all modes
1332:src/xeq.c     **** 	// no it doesn't -- it leaves varying values of zero around
1333:src/xeq.c     **** 	xset(dest, 0, n << (3 + is_dblmode()));
1334:src/xeq.c     **** #endif
1335:src/xeq.c     **** }
1336:src/xeq.c     **** 
1337:src/xeq.c     **** void move_regs(REGISTER *dest, REGISTER *src, int n) {
1338:src/xeq.c     **** 	if (is_dblmode())
1339:src/xeq.c     **** 		n <<= 1;
1340:src/xeq.c     **** 	xcopy(dest, src, n << 3);
1341:src/xeq.c     **** }
1342:src/xeq.c     **** 
1343:src/xeq.c     **** 
1344:src/xeq.c     **** /* Zero a register
1345:src/xeq.c     ****  */
1346:src/xeq.c     **** static void set_zero(REGISTER *x) {
1347:src/xeq.c     **** 	zero_regs(x, 1);
1348:src/xeq.c     **** }
1349:src/xeq.c     **** 
1350:src/xeq.c     **** void zero_X(void) {
1351:src/xeq.c     **** 	set_zero(StackBase);
1352:src/xeq.c     **** }
1353:src/xeq.c     **** 
1354:src/xeq.c     **** void zero_Y(void) {
1355:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
ARM GAS  /tmp/ccK8IvWa.s 			page 31


1356:src/xeq.c     **** }
1357:src/xeq.c     **** 
1358:src/xeq.c     **** void clrx(enum nilop op) {
1359:src/xeq.c     **** 	zero_X();
1360:src/xeq.c     **** 	clr_lift();
1361:src/xeq.c     **** }
1362:src/xeq.c     **** 
1363:src/xeq.c     **** /* Zero out the stack
1364:src/xeq.c     ****  */
1365:src/xeq.c     **** void clrstk(enum nilop op) {
1366:src/xeq.c     **** 	zero_regs(StackBase, stack_size());
1367:src/xeq.c     **** 	set_lift();
1368:src/xeq.c     **** }
1369:src/xeq.c     **** 
1370:src/xeq.c     **** 
1371:src/xeq.c     **** /* Zero out all registers excluding the stack and lastx
1372:src/xeq.c     ****  */	
1373:src/xeq.c     **** void clrreg(enum nilop op) {
1374:src/xeq.c     **** 	const int local = local_regs();
1375:src/xeq.c     **** 	process_cmdline_set_lift();
1376:src/xeq.c     **** 
1377:src/xeq.c     **** 	// erase register memory
1378:src/xeq.c     **** 	zero_regs(get_reg_n(0), global_regs());
1379:src/xeq.c     **** 
1380:src/xeq.c     **** 	// Clear A, B, C & D if they aren't part of the stack
1381:src/xeq.c     **** 	if (stack_size() != 8)
1382:src/xeq.c     **** 		zero_regs(get_reg_n(regA_idx), 4);
1383:src/xeq.c     **** 
1384:src/xeq.c     **** 	// Clear J & K but not I and L since they are last X.
1385:src/xeq.c     **** 	zero_regs(get_reg_n(regJ_idx), 2);
1386:src/xeq.c     **** 
1387:src/xeq.c     **** 	// erase local registers but keep them allocated
1388:src/xeq.c     **** 	if (local)
1389:src/xeq.c     **** 		zero_regs(get_reg_n(LOCAL_REG_BASE), local);
1390:src/xeq.c     **** }
1391:src/xeq.c     **** 
1392:src/xeq.c     **** 
1393:src/xeq.c     **** /* Clear the subroutine return stack
1394:src/xeq.c     ****  */
1395:src/xeq.c     **** void clrretstk(void) {
1396:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
1397:src/xeq.c     **** }
1398:src/xeq.c     **** 
1399:src/xeq.c     **** void clrretstk_pc(void) {
1400:src/xeq.c     **** 	clrretstk();
1401:src/xeq.c     **** 	raw_set_pc(0);
1402:src/xeq.c     **** 	update_program_bounds(1);
1403:src/xeq.c     **** }
1404:src/xeq.c     **** 
1405:src/xeq.c     **** 
1406:src/xeq.c     **** /*
1407:src/xeq.c     ****  *  Command to allow access to constants and small integers
1408:src/xeq.c     ****  */
1409:src/xeq.c     **** void cmdconst(unsigned int arg, enum rarg op) {
1410:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
1411:src/xeq.c     **** 	if (op == RARG_INTNUM_CMPLX || op == RARG_CONST_CMPLX || op == RARG_IND_CONST_CMPLX) {
1412:src/xeq.c     **** #else
ARM GAS  /tmp/ccK8IvWa.s 			page 32


1413:src/xeq.c     **** 	if (op == RARG_INTNUM_CMPLX || op == RARG_CONST_CMPLX) {
1414:src/xeq.c     **** #endif
1415:src/xeq.c     **** 		lift2_if_enabled();
1416:src/xeq.c     **** 		zero_Y();
1417:src/xeq.c     **** 		set_was_complex();
1418:src/xeq.c     **** 	} else
1419:src/xeq.c     **** 		lift_if_enabled();
1420:src/xeq.c     **** 
1421:src/xeq.c     **** 	if (op == RARG_INTNUM || op == RARG_INTNUM_CMPLX)
1422:src/xeq.c     **** 		setX_int_sgn(arg, 0);
1423:src/xeq.c     **** 	else if (is_intmode())
1424:src/xeq.c     **** 		bad_mode_error();
1425:src/xeq.c     **** 	else 
1426:src/xeq.c     **** 		copyreg(StackBase, get_const(arg, is_dblmode()));
1427:src/xeq.c     **** }
1428:src/xeq.c     **** 
1429:src/xeq.c     **** 
1430:src/xeq.c     **** /* Store/recall code here.
1431:src/xeq.c     ****  * These two are pretty much the same so we define some utility routines first.
1432:src/xeq.c     ****  */
1433:src/xeq.c     **** 
1434:src/xeq.c     **** /* Do a basic STO/RCL arithmetic operation.
1435:src/xeq.c     ****  */
1436:src/xeq.c     **** static int storcl_op(unsigned short opr, int index, decNumber *r, int rev) {
1437:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
1438:src/xeq.c     **** 
1439:src/xeq.c     **** 	getX(x);
1440:src/xeq.c     **** 	getRegister(y, index);
1441:src/xeq.c     **** 	if (rev) {
1442:src/xeq.c     **** 		x = y;
1443:src/xeq.c     **** 		y = &a;
1444:src/xeq.c     **** 	}
1445:src/xeq.c     **** 
1446:src/xeq.c     **** 	switch (opr) {
1447:src/xeq.c     **** 	case 1:
1448:src/xeq.c     **** 		dn_add(r, y, x);
1449:src/xeq.c     **** 		break;
1450:src/xeq.c     **** 	case 2:
1451:src/xeq.c     **** 		dn_subtract(r, y, x);
1452:src/xeq.c     **** 		break;
1453:src/xeq.c     **** 	case 3:
1454:src/xeq.c     **** 		dn_multiply(r, y, x);
1455:src/xeq.c     **** 		break;
1456:src/xeq.c     **** 	case 4:
1457:src/xeq.c     **** 		dn_divide(r, y, x);
1458:src/xeq.c     **** 		break;
1459:src/xeq.c     **** 	case 5:
1460:src/xeq.c     **** 		dn_min(r, y, x);
1461:src/xeq.c     **** 		break;
1462:src/xeq.c     **** 	case 6:
1463:src/xeq.c     **** 		dn_max(r, y, x);
1464:src/xeq.c     **** 		break;
1465:src/xeq.c     **** 	default:
1466:src/xeq.c     **** 		return 1;
1467:src/xeq.c     **** 	}
1468:src/xeq.c     **** 	return 0;
1469:src/xeq.c     **** }
ARM GAS  /tmp/ccK8IvWa.s 			page 33


1470:src/xeq.c     **** 
1471:src/xeq.c     **** static int storcl_intop(unsigned short opr, int index, long long int *r, int rev) {
1472:src/xeq.c     **** 	long long int x, y;
1473:src/xeq.c     **** 
1474:src/xeq.c     **** 	x = getX_int();
1475:src/xeq.c     **** 	y = get_reg_n_int(index);
1476:src/xeq.c     **** 
1477:src/xeq.c     **** 	if (rev) {
1478:src/xeq.c     **** 		const long long int t = x;
1479:src/xeq.c     **** 		x = y;
1480:src/xeq.c     **** 		y = t;
1481:src/xeq.c     **** 	}
1482:src/xeq.c     **** 
1483:src/xeq.c     **** 	switch (opr) {
1484:src/xeq.c     **** 	case 1:
1485:src/xeq.c     **** 		*r = intAdd(y, x);
1486:src/xeq.c     **** 		break;
1487:src/xeq.c     **** 	case 2:
1488:src/xeq.c     **** 		*r = intSubtract(y, x);
1489:src/xeq.c     **** 		break;
1490:src/xeq.c     **** 	case 3:
1491:src/xeq.c     **** 		*r = intMultiply(y, x);
1492:src/xeq.c     **** 		break;
1493:src/xeq.c     **** 	case 4:
1494:src/xeq.c     **** 		*r = intDivide(y, x);
1495:src/xeq.c     **** 		break;
1496:src/xeq.c     **** 	case 5:
1497:src/xeq.c     **** 		*r = intMin(y, x);
1498:src/xeq.c     **** 		break;
1499:src/xeq.c     **** 	case 6:
1500:src/xeq.c     **** 		*r = intMax(y, x);
1501:src/xeq.c     **** 		break;
1502:src/xeq.c     **** 	default:
1503:src/xeq.c     **** 		return 1;
1504:src/xeq.c     **** 	}
1505:src/xeq.c     **** 	return 0;
1506:src/xeq.c     **** }
1507:src/xeq.c     **** 
1508:src/xeq.c     **** /* We've got a STO operation to do.
1509:src/xeq.c     ****  */
1510:src/xeq.c     **** void cmdsto(unsigned int arg, enum rarg op) {
1511:src/xeq.c     **** 	if (op == RARG_STO) {
1512:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
1513:src/xeq.c     **** 	} else {
1514:src/xeq.c     **** 		if (is_intmode()) {
1515:src/xeq.c     **** 			long long int r;
1516:src/xeq.c     **** 
1517:src/xeq.c     **** 			if (storcl_intop(op - RARG_STO, arg, &r, 0))
1518:src/xeq.c     **** 				illegal(op);
1519:src/xeq.c     **** 			set_reg_n_int(arg, r);
1520:src/xeq.c     **** 		} else {
1521:src/xeq.c     **** 			decNumber r;
1522:src/xeq.c     **** 
1523:src/xeq.c     **** 			if (storcl_op(op - RARG_STO, arg, &r, 0))
1524:src/xeq.c     **** 				illegal(op);
1525:src/xeq.c     **** 			setRegister(arg, &r);
1526:src/xeq.c     **** 		}
ARM GAS  /tmp/ccK8IvWa.s 			page 34


1527:src/xeq.c     **** 	}
1528:src/xeq.c     **** }
1529:src/xeq.c     **** 
1530:src/xeq.c     **** /* We've got a RCL operation to do.
1531:src/xeq.c     ****  */
1532:src/xeq.c     **** static void do_rcl(int index, enum rarg op) {
1533:src/xeq.c     **** 	if (op == RARG_RCL) {
1534:src/xeq.c     **** 		REGISTER temp;
1535:src/xeq.c     **** 		copyreg(&temp, get_reg_n(index));
1536:src/xeq.c     **** 		lift_if_enabled();
1537:src/xeq.c     **** 		copyreg(StackBase, &temp);
1538:src/xeq.c     **** 	} else {
1539:src/xeq.c     **** 		if (is_intmode()) {
1540:src/xeq.c     **** 			long long int r;
1541:src/xeq.c     **** 
1542:src/xeq.c     **** 			if (storcl_intop(op - RARG_RCL, index, &r, 1))
1543:src/xeq.c     **** 				illegal(op);
1544:src/xeq.c     **** 			setlastX();
1545:src/xeq.c     **** 			setX_int(r);
1546:src/xeq.c     **** 		} else {
1547:src/xeq.c     **** 			decNumber r;
1548:src/xeq.c     **** 
1549:src/xeq.c     **** 			if (storcl_op(op - RARG_RCL, index, &r, 1))
1550:src/xeq.c     **** 				illegal(op);
1551:src/xeq.c     **** 			setlastX();
1552:src/xeq.c     **** 			setX(&r);
1553:src/xeq.c     **** 		}
1554:src/xeq.c     **** 	}
1555:src/xeq.c     **** }
1556:src/xeq.c     **** 
1557:src/xeq.c     **** void cmdrcl(unsigned int arg, enum rarg op) {
1558:src/xeq.c     **** 	do_rcl(arg, op);
1559:src/xeq.c     **** }
1560:src/xeq.c     **** 
1561:src/xeq.c     **** #ifdef INCLUDE_FLASH_RECALL
1562:src/xeq.c     **** void cmdflashrcl(unsigned int arg, enum rarg op) {
1563:src/xeq.c     **** 	do_rcl(FLASH_REG_BASE + arg, op - RARG_FLRCL + RARG_RCL);
1564:src/xeq.c     **** }
1565:src/xeq.c     **** #endif
1566:src/xeq.c     **** 
1567:src/xeq.c     **** /* And the complex equivalents for the above.
1568:src/xeq.c     ****  * We pair registers arg & arg+1 to provide a complex number
1569:src/xeq.c     ****  */
1570:src/xeq.c     **** static int storcl_cop(unsigned short opr, int index, decNumber *r1, decNumber *r2, int rev) {
1571:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
1572:src/xeq.c     **** 
1573:src/xeq.c     **** 	getXY(x + 0, x + 1);
1574:src/xeq.c     **** 	getRegister(y + 0, index);
1575:src/xeq.c     **** 	getRegister(y + 1, index + 1);
1576:src/xeq.c     **** 
1577:src/xeq.c     **** 	if (rev) {
1578:src/xeq.c     **** 		x = y;
1579:src/xeq.c     **** 		y = a;
1580:src/xeq.c     **** 	}
1581:src/xeq.c     **** 
1582:src/xeq.c     **** 	switch (opr) {
1583:src/xeq.c     **** 	case 1:
ARM GAS  /tmp/ccK8IvWa.s 			page 35


1584:src/xeq.c     **** 		cmplxAdd(r1, r2, y + 0, y + 1, x + 0, x + 1);
1585:src/xeq.c     **** 		break;
1586:src/xeq.c     **** 	case 2:
1587:src/xeq.c     **** 		cmplxSubtract(r1, r2, y + 0, y + 1, x + 0, x + 1);
1588:src/xeq.c     **** 		break;
1589:src/xeq.c     **** 	case 3:
1590:src/xeq.c     **** 		cmplxMultiply(r1, r2, y + 0, y + 1, x + 0, x + 1);
1591:src/xeq.c     **** 		break;
1592:src/xeq.c     **** 	case 4:
1593:src/xeq.c     **** 		cmplxDivide(r1, r2, y + 0, y + 1, x + 0, x + 1);
1594:src/xeq.c     **** 		break;
1595:src/xeq.c     **** 	default:
1596:src/xeq.c     **** 		return 1;
1597:src/xeq.c     **** 	}
1598:src/xeq.c     **** 	return 0;
1599:src/xeq.c     **** }
1600:src/xeq.c     **** 
1601:src/xeq.c     **** 
1602:src/xeq.c     **** void cmdcsto(unsigned int arg, enum rarg op) {
1603:src/xeq.c     **** 	decNumber r1, r2;
1604:src/xeq.c     **** 	REGISTER *t1, *t2;
1605:src/xeq.c     **** 
1606:src/xeq.c     **** 	t1 = get_reg_n(arg);
1607:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
1608:src/xeq.c     **** 
1609:src/xeq.c     **** 	if (op == RARG_CSTO) {
1610:src/xeq.c     **** 		copyreg(t1, StackBase);
1611:src/xeq.c     **** 		copyreg(t2, get_reg_n(regY_idx));
1612:src/xeq.c     **** 	} else {
1613:src/xeq.c     **** 		if (is_intmode())
1614:src/xeq.c     **** 			bad_mode_error();
1615:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CSTO, arg, &r1, &r2, 0))
1616:src/xeq.c     **** 			illegal(op);
1617:src/xeq.c     **** 		else {
1618:src/xeq.c     **** 			setRegister(arg, &r1);
1619:src/xeq.c     **** 			setRegister(arg + 1, &r2);
1620:src/xeq.c     **** 		}
1621:src/xeq.c     **** 	}
1622:src/xeq.c     **** 	set_was_complex();
1623:src/xeq.c     **** }
1624:src/xeq.c     **** 
1625:src/xeq.c     **** static void do_crcl(int index, enum rarg op) {
1626:src/xeq.c     **** 	decNumber r1, r2;
1627:src/xeq.c     **** 
1628:src/xeq.c     **** 	if (op == RARG_CRCL) {
1629:src/xeq.c     **** 		REGISTER x, y;
1630:src/xeq.c     **** 		copyreg(&x, get_reg_n(index));
1631:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
1632:src/xeq.c     **** 		lift2_if_enabled();
1633:src/xeq.c     **** 		copyreg(StackBase, &x);
1634:src/xeq.c     **** 		copyreg(get_reg_n(regY_idx), &y);
1635:src/xeq.c     **** 	} else {
1636:src/xeq.c     **** 		if (is_intmode())
1637:src/xeq.c     **** 			bad_mode_error();
1638:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CRCL, index, &r1, &r2, 1))
1639:src/xeq.c     **** 			illegal(op);
1640:src/xeq.c     **** 		else {
ARM GAS  /tmp/ccK8IvWa.s 			page 36


1641:src/xeq.c     **** 			setlastXY();
1642:src/xeq.c     **** 			setXY(&r1, &r2);
1643:src/xeq.c     **** 		}
1644:src/xeq.c     **** 	}
1645:src/xeq.c     **** 	set_was_complex();
1646:src/xeq.c     **** }
1647:src/xeq.c     **** 
1648:src/xeq.c     **** void cmdcrcl(unsigned int arg, enum rarg op) {
1649:src/xeq.c     **** 	do_crcl(arg, op);
1650:src/xeq.c     **** }
1651:src/xeq.c     **** 
1652:src/xeq.c     **** #ifdef INCLUDE_FLASH_RECALL
1653:src/xeq.c     **** void cmdflashcrcl(unsigned int arg, enum rarg op) {
1654:src/xeq.c     **** 	do_crcl(FLASH_REG_BASE + arg, op - RARG_FLCRCL + RARG_CRCL);
1655:src/xeq.c     **** }
1656:src/xeq.c     **** #endif
1657:src/xeq.c     **** 
1658:src/xeq.c     **** /*
1659:src/xeq.c     ****  *  "Alien" RCL commands to convert registers originally stored in a different format
1660:src/xeq.c     ****  */
1661:src/xeq.c     **** // RCL of an integer value
1662:src/xeq.c     **** void cmdircl(unsigned int arg, enum rarg op) {
1663:src/xeq.c     **** 	if (is_intmode())
1664:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
1665:src/xeq.c     **** 	else
1666:src/xeq.c     **** 		register_from_int(regX_idx, arg, 0);
1667:src/xeq.c     **** }
1668:src/xeq.c     **** 
1669:src/xeq.c     **** // RCL of a single or double precision real value
1670:src/xeq.c     **** void cmdrrcl(unsigned int arg, enum rarg op) {
1671:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
1672:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
1673:src/xeq.c     **** 
1674:src/xeq.c     **** 	if (rcl_dbl && arg >= regX_idx && arg <= regK_idx) {
1675:src/xeq.c     **** 		// dRCL is not valid for lettered registers
1676:src/xeq.c     **** 		report_err(ERR_RANGE);
1677:src/xeq.c     **** 		return;
1678:src/xeq.c     **** 	}
1679:src/xeq.c     **** 
1680:src/xeq.c     **** 	UState.mode_double = rcl_dbl; // Force reading in requested format
1681:src/xeq.c     **** 	if (is_intmode()) {
1682:src/xeq.c     **** 		int_from_register(regX_idx, arg);
1683:src/xeq.c     **** 		UState.mode_double = was_dbl;
1684:src/xeq.c     **** 	}
1685:src/xeq.c     **** 	else {
1686:src/xeq.c     **** 		decNumber x;
1687:src/xeq.c     **** 		getRegister(&x, arg);
1688:src/xeq.c     **** 
1689:src/xeq.c     **** 		UState.mode_double = was_dbl; // Force access in original mode
1690:src/xeq.c     **** 		setX(&x);
1691:src/xeq.c     **** 	}
1692:src/xeq.c     **** }
1693:src/xeq.c     **** 
1694:src/xeq.c     **** 
1695:src/xeq.c     **** /* SWAP x with the specified register
1696:src/xeq.c     ****  */
1697:src/xeq.c     **** void swap_reg(REGISTER *a, REGISTER *b) {
ARM GAS  /tmp/ccK8IvWa.s 			page 37


1698:src/xeq.c     **** 	REGISTER t;
1699:src/xeq.c     **** 
1700:src/xeq.c     **** 	copyreg(&t, a);
1701:src/xeq.c     **** 	copyreg(a, b);
1702:src/xeq.c     **** 	copyreg(b, &t);
1703:src/xeq.c     **** }
1704:src/xeq.c     **** 
1705:src/xeq.c     **** void cmdswap(unsigned int arg, enum rarg op) {
1706:src/xeq.c     **** 	int idx;
1707:src/xeq.c     **** 
1708:src/xeq.c     **** 	if (op == RARG_CSWAPX)
1709:src/xeq.c     **** 		idx = regX_idx;
1710:src/xeq.c     **** 	else if (op == RARG_CSWAPZ)
1711:src/xeq.c     **** 		idx = regZ_idx;
1712:src/xeq.c     **** 	else
1713:src/xeq.c     **** 		idx = regX_idx + (int)(op - RARG_SWAPX);
1714:src/xeq.c     **** 
1715:src/xeq.c     **** 	swap_reg(get_reg_n(idx), get_reg_n(arg));
1716:src/xeq.c     **** 
1717:src/xeq.c     **** 	if (op >= RARG_CSWAPX) {
1718:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
1719:src/xeq.c     **** 		set_was_complex();
1720:src/xeq.c     **** 	}
1721:src/xeq.c     **** }
1722:src/xeq.c     **** 
1723:src/xeq.c     **** 
1724:src/xeq.c     **** /* View a specified register
1725:src/xeq.c     ****  */
1726:src/xeq.c     **** void cmdview(unsigned int arg, enum rarg op) {
1727:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
1728:src/xeq.c     **** 
1729:src/xeq.c     **** 	State2.wascomplex = cmplx;
1730:src/xeq.c     **** 	ShowRegister = arg;
1731:src/xeq.c     **** 	State2.disp_freeze = 0;
1732:src/xeq.c     **** 	display();
1733:src/xeq.c     **** 	State2.disp_freeze = cmplx || Running || arg != regX_idx;
1734:src/xeq.c     **** }
1735:src/xeq.c     **** 
1736:src/xeq.c     **** 
1737:src/xeq.c     **** /* Get the stack size */
1738:src/xeq.c     **** void get_stack_size(enum nilop op) {
1739:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
1740:src/xeq.c     **** }
1741:src/xeq.c     **** 
1742:src/xeq.c     **** void get_word_size(enum nilop op) {
1743:src/xeq.c     **** 	setX_int_sgn((int)word_size(), 0);
1744:src/xeq.c     **** }
1745:src/xeq.c     **** 
1746:src/xeq.c     **** void get_sign_mode(enum nilop op) {
1747:src/xeq.c     **** 	static const unsigned char modes[4] = {
1748:src/xeq.c     **** 		0x02,		// 2's complement
1749:src/xeq.c     **** 		0x01,		// 1's complement
1750:src/xeq.c     **** 		0x00,		// unsigned
1751:src/xeq.c     **** 		0x81		// sign and mantissa
1752:src/xeq.c     **** 	};
1753:src/xeq.c     **** 	const unsigned char v = modes[(int)int_mode()];
1754:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
ARM GAS  /tmp/ccK8IvWa.s 			page 38


1755:src/xeq.c     **** }
1756:src/xeq.c     **** 
1757:src/xeq.c     **** void get_base(enum nilop op) {
1758:src/xeq.c     **** 	setX_int_sgn((int)int_base(), 0);
1759:src/xeq.c     **** }
1760:src/xeq.c     **** 
1761:src/xeq.c     **** #ifdef DM42
1762:src/xeq.c     ****  int DM42_Ticker () {
1763:src/xeq.c     ****     int f, t;
1764:src/xeq.c     ****     t = get_rtc_ticks();
1765:src/xeq.c     ****     f = ((t & 0xff)*10)>>8; // tenths of a second;
1766:src/xeq.c     ****     return f;
1767:src/xeq.c     ****  }
1768:src/xeq.c     **** #endif
1769:src/xeq.c     **** /* Get the current ticker value */
1770:src/xeq.c     **** void op_ticks(enum nilop op) {
1771:src/xeq.c     **** #if !defined(CONSOLE) && !defined(DM42)
1772:src/xeq.c     ****     setX_int_sgn(Ticker, 0);
1773:src/xeq.c     **** #elif defined(DM42)
1774:src/xeq.c     ****     setX_int_sgn(DM42_Ticker(),0);
1775:src/xeq.c     **** #else 
1776:src/xeq.c     ****     struct timeval tv;
1777:src/xeq.c     ****     long long int t;
1778:src/xeq.c     ****     gettimeofday(&tv, NULL);
1779:src/xeq.c     ****     t = tv.tv_sec * 10 + tv.tv_usec / 100000;
1780:src/xeq.c     ****     setX_int_sgn(t, 0);
1781:src/xeq.c     **** #endif
1782:src/xeq.c     **** }
1783:src/xeq.c     **** 
1784:src/xeq.c     **** /* Display the battery voltage */
1785:src/xeq.c     **** void op_voltage(enum nilop op) {
1786:src/xeq.c     **** 	decNumber t, u;
1787:src/xeq.c     **** #ifdef REALBUILD
1788:src/xeq.c     **** 	unsigned long long int v = 19 + Voltage;
1789:src/xeq.c     **** #elif defined(DM42)
1790:src/xeq.c     **** 	int v = get_vbat();
1791:src/xeq.c     **** 	v = v / 100;
1792:src/xeq.c     **** #else
1793:src/xeq.c     **** 	unsigned long long int v = 32;
1794:src/xeq.c     **** #endif
1795:src/xeq.c     **** 
1796:src/xeq.c     **** 	if (is_intmode()) {
1797:src/xeq.c     **** 		setX_int_sgn(v, 0);
1798:src/xeq.c     **** 	} else {
1799:src/xeq.c     **** 		ullint_to_dn(&t, v);
1800:src/xeq.c     **** 		dn_mulpow10(&u, &t, -1);
1801:src/xeq.c     **** 		setX(&u);
1802:src/xeq.c     **** 	}
1803:src/xeq.c     **** }
1804:src/xeq.c     **** 
1805:src/xeq.c     **** /*
1806:src/xeq.c     ****  *  Commands to determine free memory
1807:src/xeq.c     ****  */
1808:src/xeq.c     **** int free_mem(void) {
1809:src/xeq.c     **** 	return RetStkSize + RetStkPtr;
1810:src/xeq.c     **** }
1811:src/xeq.c     **** 
ARM GAS  /tmp/ccK8IvWa.s 			page 39


1812:src/xeq.c     **** int free_flash(void) {
1813:src/xeq.c     **** 	return NUMPROG_FLASH_MAX - UserFlash.size;
1814:src/xeq.c     **** }
1815:src/xeq.c     **** 
1816:src/xeq.c     **** void get_mem(enum nilop op) {
1817:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
1818:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
1819:src/xeq.c     **** 		 op == OP_FLASHQ ? free_flash() :
1820:src/xeq.c     **** 		 global_regs(),
1821:src/xeq.c     **** 		 0);
1822:src/xeq.c     **** }
1823:src/xeq.c     **** 
1824:src/xeq.c     **** 
1825:src/xeq.c     **** /* Check if a keystroke is pending in the buffer, if so return it to the specified
1826:src/xeq.c     ****  * register, if not skip the next step.
1827:src/xeq.c     ****  */
1828:src/xeq.c     **** void cmdkeyp(unsigned int arg, enum rarg op) {
1829:src/xeq.c     **** 	int cond = LastKey == 0;
1830:src/xeq.c     **** 	if (!cond) {
1831:src/xeq.c     **** 		int k = LastKey - 1;
1832:src/xeq.c     **** 		LastKey = 0;
1833:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
1834:src/xeq.c     **** 	}
1835:src/xeq.c     **** 	fin_tst(cond);
1836:src/xeq.c     **** }
1837:src/xeq.c     **** 
1838:src/xeq.c     **** /*
1839:src/xeq.c     ****  *  Get a key code from a register and translate it from row/colum to internal
1840:src/xeq.c     ****  *  Check for valid arguments
1841:src/xeq.c     ****  */
1842:src/xeq.c     **** static int get_keycode_from_reg(unsigned int n)
1843:src/xeq.c     **** {
1844:src/xeq.c     **** 	int sgn;
1845:src/xeq.c     **** 	const int c = row_column_to_keycode((int) get_reg_n_int_sgn((int) n, &sgn));
1846:src/xeq.c     **** 	if ( c < 0 )
1847:src/xeq.c     **** 		report_err(ERR_RANGE);
1848:src/xeq.c     **** 	return c;
1849:src/xeq.c     **** }
1850:src/xeq.c     **** 
1851:src/xeq.c     **** /*
1852:src/xeq.c     ****  *  Take a row/column key code and feed it to the keyboard buffer
1853:src/xeq.c     ****  *  This stops program execution first to make sure, the key is not
1854:src/xeq.c     ****  *  read in by KEY? again.
1855:src/xeq.c     ****  */
1856:src/xeq.c     **** void cmdputkey(unsigned int arg, enum rarg op)
1857:src/xeq.c     **** {
1858:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
1859:src/xeq.c     **** 
1860:src/xeq.c     **** 	if (c >= 0) {
1861:src/xeq.c     **** 		set_running_off();
1862:src/xeq.c     **** 		put_key(c);
1863:src/xeq.c     **** 	}
1864:src/xeq.c     **** }
1865:src/xeq.c     **** 
1866:src/xeq.c     **** /*
1867:src/xeq.c     ****  *  Return the type of the keycode in register n
1868:src/xeq.c     ****  *  returns 0-9 for digits, 10 for ., +/-, EEX, 11 for f,g,h, 12 for all other keys.
ARM GAS  /tmp/ccK8IvWa.s 			page 40


1869:src/xeq.c     ****  *  Invalid codes produce an error.
1870:src/xeq.c     ****  */
1871:src/xeq.c     **** void cmdkeytype(unsigned int arg, enum rarg op)
1872:src/xeq.c     **** {
1873:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
1874:src/xeq.c     **** 	if ( c >= 0 ) {
1875:src/xeq.c     **** 		const char types[] = {
1876:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
1877:src/xeq.c     **** 			12, 12, 12, 11, 11, 11,
1878:src/xeq.c     **** 			12, 12, 10, 10, 12, 12,
1879:src/xeq.c     **** 			12,  7,  8,  9, 12, 12,
1880:src/xeq.c     **** 			12,  4,  5,  6, 12, 12,
1881:src/xeq.c     **** 			12,  1,  2,  3, 12, 12,
1882:src/xeq.c     **** 			12,  0, 10, 12, 12 };
1883:src/xeq.c     **** 		lift_if_enabled();
1884:src/xeq.c     **** 		setX_int_sgn(types[c], 0);
1885:src/xeq.c     **** 	}
1886:src/xeq.c     **** }
1887:src/xeq.c     **** 
1888:src/xeq.c     **** 
1889:src/xeq.c     **** /* Check which operating mode we're in -- integer or real -- they both
1890:src/xeq.c     ****  * vector through this routine.
1891:src/xeq.c     ****  */
1892:src/xeq.c     **** void check_mode(enum nilop op) {
1893:src/xeq.c     **** 	const int intmode = is_intmode() ? 1 : 0;
1894:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
1895:src/xeq.c     **** 
1896:src/xeq.c     **** 	fin_tst(intmode == desired);
1897:src/xeq.c     **** }
1898:src/xeq.c     **** 
1899:src/xeq.c     **** 
1900:src/xeq.c     **** /* Check if DBLON is active
1901:src/xeq.c     ****  */
1902:src/xeq.c     **** void check_dblmode(enum nilop op) {
1903:src/xeq.c     **** 	fin_tst(is_dblmode());
1904:src/xeq.c     **** }
1905:src/xeq.c     **** 
1906:src/xeq.c     **** void op_query_xtal(enum nilop op) {
1907:src/xeq.c     **** 	fin_tst(Xtal);
1908:src/xeq.c     **** }
1909:src/xeq.c     **** 
1910:src/xeq.c     **** void op_query_print(enum nilop op) {
1911:src/xeq.c     **** #ifdef INFRARED
1912:src/xeq.c     **** 	fin_tst(1);
1913:src/xeq.c     **** #else
1914:src/xeq.c     **** 	fin_tst(0);
1915:src/xeq.c     **** #endif
1916:src/xeq.c     **** }
1917:src/xeq.c     **** 
1918:src/xeq.c     **** /* Save and restore the entire stack to sequential registers */
1919:src/xeq.c     **** static int check_stack_overlap(unsigned int arg) {
1920:src/xeq.c     **** 	const int n = stack_size();
1921:src/xeq.c     **** 
1922:src/xeq.c     **** 	if (arg + n <= global_regs() || arg >= NUMREG) {
1923:src/xeq.c     **** 		return n;
1924:src/xeq.c     **** 	}
1925:src/xeq.c     **** 	report_err(ERR_STK_CLASH);
ARM GAS  /tmp/ccK8IvWa.s 			page 41


1926:src/xeq.c     **** 	return 0;
1927:src/xeq.c     **** }
1928:src/xeq.c     **** 
1929:src/xeq.c     **** void cmdstostk(unsigned int arg, enum rarg op) {
1930:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
1931:src/xeq.c     **** 
1932:src/xeq.c     **** 	for (i=0; i<n; i++)
1933:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
1934:src/xeq.c     **** }
1935:src/xeq.c     **** 
1936:src/xeq.c     **** void cmdrclstk(unsigned int arg, enum rarg op) {
1937:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
1938:src/xeq.c     **** 
1939:src/xeq.c     **** 	for (i=0; i<n; i++)
1940:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
1941:src/xeq.c     **** }
1942:src/xeq.c     **** 
1943:src/xeq.c     **** 
1944:src/xeq.c     **** /*
1945:src/xeq.c     ****  *  Move up the return stack, skipping any local variables
1946:src/xeq.c     ****  */
1947:src/xeq.c     **** static void retstk_up(void)
1948:src/xeq.c     **** {
 306              		.loc 1 1948 1 is_stmt 1 view -0
 307              		.cfi_startproc
 308              		@ args = 0, pretend = 0, frame = 0
 309              		@ frame_needed = 0, uses_anonymous_args = 0
 310              		@ link register save eliminated.
1949:src/xeq.c     **** 	if (RetStkPtr < 0) {
 311              		.loc 1 1949 2 view .LVU94
1948:src/xeq.c     **** 	if (RetStkPtr < 0) {
 312              		.loc 1 1948 1 is_stmt 0 view .LVU95
 313 0000 70B4     		push	{r4, r5, r6}
 314              		.cfi_def_cfa_offset 12
 315              		.cfi_offset 4, -12
 316              		.cfi_offset 5, -8
 317              		.cfi_offset 6, -4
 318              		.loc 1 1949 6 view .LVU96
 319 0002 1A4C     		ldr	r4, .L39
 320 0004 B4F9E227 		ldrsh	r2, [r4, #2018]
 321              		.loc 1 1949 5 view .LVU97
 322 0008 002A     		cmp	r2, #0
 323 000a 01DB     		blt	.L37
 324              	.L27:
1950:src/xeq.c     **** 		int sp = RetStkPtr++;
1951:src/xeq.c     **** 		unsigned int s = RetStk[sp++];
1952:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
1953:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
1954:src/xeq.c     **** 			RetStkPtr = sp;
1955:src/xeq.c     **** 			// Re-adjust the LocalRegs pointer
1956:src/xeq.c     **** 			LocalRegs = 0;
1957:src/xeq.c     **** 			while (sp < 0) {
1958:src/xeq.c     **** 				s = RetStk[sp];
1959:src/xeq.c     **** 				if (isLOCAL(s)) {
1960:src/xeq.c     **** 					LocalRegs = sp;
1961:src/xeq.c     **** 					break;
1962:src/xeq.c     **** 				}
ARM GAS  /tmp/ccK8IvWa.s 			page 42


1963:src/xeq.c     **** 				++sp;
1964:src/xeq.c     **** 				if (isHIDDEN(s))
1965:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
1966:src/xeq.c     **** 			}
1967:src/xeq.c     **** 		}
1968:src/xeq.c     **** 	}
1969:src/xeq.c     **** }
 325              		.loc 1 1969 1 view .LVU98
 326 000c 70BC     		pop	{r4, r5, r6}
 327              		.cfi_remember_state
 328              		.cfi_restore 6
 329              		.cfi_restore 5
 330              		.cfi_restore 4
 331              		.cfi_def_cfa_offset 0
 332 000e 7047     		bx	lr
 333              	.L37:
 334              		.cfi_restore_state
 335              	.LBB1313:
1950:src/xeq.c     **** 		int sp = RetStkPtr++;
 336              		.loc 1 1950 3 is_stmt 1 view .LVU99
1951:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 337              		.loc 1 1951 26 is_stmt 0 view .LVU100
 338 0010 174B     		ldr	r3, .L39+4
1950:src/xeq.c     **** 		int sp = RetStkPtr++;
 339              		.loc 1 1950 21 view .LVU101
 340 0012 511C     		adds	r1, r2, #1
1951:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 341              		.loc 1 1951 26 view .LVU102
 342 0014 1D68     		ldr	r5, [r3]
1950:src/xeq.c     **** 		int sp = RetStkPtr++;
 343              		.loc 1 1950 21 view .LVU103
 344 0016 A4F8E217 		strh	r1, [r4, #2018]	@ movhi
 345              	.LVL27:
1951:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 346              		.loc 1 1951 3 is_stmt 1 view .LVU104
1951:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 347              		.loc 1 1951 26 is_stmt 0 view .LVU105
 348 001a 35F81230 		ldrh	r3, [r5, r2, lsl #1]
 349              	.LVL28:
1952:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
 350              		.loc 1 1952 3 is_stmt 1 view .LVU106
1952:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
 351              		.loc 1 1952 7 is_stmt 0 view .LVU107
 352 001e 1A0B     		lsrs	r2, r3, #12
 353              	.LVL29:
1952:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
 354              		.loc 1 1952 6 view .LVU108
 355 0020 22F00202 		bic	r2, r2, #2
 356 0024 012A     		cmp	r2, #1
 357 0026 F1D1     		bne	.L27
1953:src/xeq.c     **** 			RetStkPtr = sp;
 358              		.loc 1 1953 4 is_stmt 1 view .LVU109
1953:src/xeq.c     **** 			RetStkPtr = sp;
 359              		.loc 1 1953 10 is_stmt 0 view .LVU110
 360 0028 C3F30B03 		ubfx	r3, r3, #0, #12
 361              	.LVL30:
1953:src/xeq.c     **** 			RetStkPtr = sp;
ARM GAS  /tmp/ccK8IvWa.s 			page 43


 362              		.loc 1 1953 7 view .LVU111
 363 002c 0B44     		add	r3, r3, r1
 364              	.LVL31:
1954:src/xeq.c     **** 			// Re-adjust the LocalRegs pointer
 365              		.loc 1 1954 4 is_stmt 1 view .LVU112
1956:src/xeq.c     **** 			while (sp < 0) {
 366              		.loc 1 1956 14 is_stmt 0 view .LVU113
 367 002e 0022     		movs	r2, #0
1954:src/xeq.c     **** 			// Re-adjust the LocalRegs pointer
 368              		.loc 1 1954 14 view .LVU114
 369 0030 A4F8E237 		strh	r3, [r4, #2018]	@ movhi
 370              	.LVL32:
1956:src/xeq.c     **** 			while (sp < 0) {
 371              		.loc 1 1956 4 is_stmt 1 view .LVU115
1956:src/xeq.c     **** 			while (sp < 0) {
 372              		.loc 1 1956 14 is_stmt 0 view .LVU116
 373 0034 A4F8DE27 		strh	r2, [r4, #2014]	@ movhi
1957:src/xeq.c     **** 				s = RetStk[sp];
 374              		.loc 1 1957 4 is_stmt 1 view .LVU117
 375 0038 6FF00046 		mvn	r6, #-2147483648
 376              	.L31:
1957:src/xeq.c     **** 				s = RetStk[sp];
 377              		.loc 1 1957 4 is_stmt 0 view .LVU118
 378 003c 9919     		adds	r1, r3, r6
 379 003e 05EB4101 		add	r1, r5, r1, lsl #1
 380 0042 03E0     		b	.L33
 381              	.LVL33:
 382              	.L32:
1964:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
 383              		.loc 1 1964 8 view .LVU119
 384 0044 032A     		cmp	r2, #3
1963:src/xeq.c     **** 				if (isHIDDEN(s))
 385              		.loc 1 1963 5 view .LVU120
 386 0046 03F10103 		add	r3, r3, #1
 387              	.LVL34:
1964:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
 388              		.loc 1 1964 5 is_stmt 1 view .LVU121
1964:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
 389              		.loc 1 1964 8 is_stmt 0 view .LVU122
 390 004a 0AD0     		beq	.L38
 391              	.LVL35:
 392              	.L33:
1958:src/xeq.c     **** 				if (isLOCAL(s)) {
 393              		.loc 1 1958 5 is_stmt 1 view .LVU123
1963:src/xeq.c     **** 				if (isHIDDEN(s))
 394              		.loc 1 1963 5 view .LVU124
1957:src/xeq.c     **** 				s = RetStk[sp];
 395              		.loc 1 1957 10 view .LVU125
 396 004c 002B     		cmp	r3, #0
 397 004e DDDA     		bge	.L27
1958:src/xeq.c     **** 				if (isLOCAL(s)) {
 398              		.loc 1 1958 15 is_stmt 0 view .LVU126
 399 0050 31F8020F 		ldrh	r0, [r1, #2]!
 400              	.LVL36:
1959:src/xeq.c     **** 					LocalRegs = sp;
 401              		.loc 1 1959 5 is_stmt 1 view .LVU127
1959:src/xeq.c     **** 					LocalRegs = sp;
ARM GAS  /tmp/ccK8IvWa.s 			page 44


 402              		.loc 1 1959 9 is_stmt 0 view .LVU128
 403 0054 020B     		lsrs	r2, r0, #12
1959:src/xeq.c     **** 					LocalRegs = sp;
 404              		.loc 1 1959 8 view .LVU129
 405 0056 012A     		cmp	r2, #1
 406 0058 F4D1     		bne	.L32
1960:src/xeq.c     **** 					break;
 407              		.loc 1 1960 6 is_stmt 1 view .LVU130
1960:src/xeq.c     **** 					break;
 408              		.loc 1 1960 16 is_stmt 0 view .LVU131
 409 005a A4F8DE37 		strh	r3, [r4, #2014]	@ movhi
1961:src/xeq.c     **** 				}
 410              		.loc 1 1961 6 is_stmt 1 view .LVU132
 411              	.LBE1313:
 412              		.loc 1 1969 1 is_stmt 0 view .LVU133
 413 005e 70BC     		pop	{r4, r5, r6}
 414              		.cfi_remember_state
 415              		.cfi_restore 6
 416              		.cfi_restore 5
 417              		.cfi_restore 4
 418              		.cfi_def_cfa_offset 0
 419 0060 7047     		bx	lr
 420              	.L38:
 421              		.cfi_restore_state
 422              	.LBB1314:
1965:src/xeq.c     **** 			}
 423              		.loc 1 1965 6 is_stmt 1 view .LVU134
1965:src/xeq.c     **** 			}
 424              		.loc 1 1965 12 is_stmt 0 view .LVU135
 425 0062 C0F30B00 		ubfx	r0, r0, #0, #12
 426              	.LVL37:
1965:src/xeq.c     **** 			}
 427              		.loc 1 1965 9 view .LVU136
 428 0066 0344     		add	r3, r3, r0
 429              	.LVL38:
1965:src/xeq.c     **** 			}
 430              		.loc 1 1965 9 view .LVU137
 431 0068 E8E7     		b	.L31
 432              	.L40:
 433 006a 00BF     		.align	2
 434              	.L39:
 435 006c 00000000 		.word	PersistentRam
 436 0070 00000000 		.word	RetStk
 437              	.LBE1314:
 438              		.cfi_endproc
 439              	.LFE145:
 441              		.section	.text.flag_word,"ax",%progbits
 442              		.align	1
 443              		.p2align 2,,3
 444              		.syntax unified
 445              		.thumb
 446              		.thumb_func
 447              		.fpu fpv4-sp-d16
 449              	flag_word:
 450              	.LVL39:
 451              	.LFB190:
1970:src/xeq.c     **** 
ARM GAS  /tmp/ccK8IvWa.s 			page 45


1971:src/xeq.c     **** 
1972:src/xeq.c     **** /* Search from the given position for the specified numeric label.
1973:src/xeq.c     ****  */
1974:src/xeq.c     **** unsigned int find_opcode_from(unsigned int pc, const opcode l, const int flags) {
1975:src/xeq.c     **** 	unsigned short int top;
1976:src/xeq.c     **** 	int count;
1977:src/xeq.c     **** 	const int endp = flags & FIND_OP_ENDS;
1978:src/xeq.c     **** 	const int errp = flags & FIND_OP_ERROR;
1979:src/xeq.c     **** 
1980:src/xeq.c     **** 	count = 1 + find_section_bounds(pc, endp, &top);
1981:src/xeq.c     **** 	count -= top;
1982:src/xeq.c     **** 	while (count--) {
1983:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
1984:src/xeq.c     **** 		// If we don't find the label, we may search a little too far if many double word
1985:src/xeq.c     **** 		// instructions are in the code, but this doesn't do any harm.
1986:src/xeq.c     **** 		if (getprog(pc) == l)
1987:src/xeq.c     **** 			return pc;
1988:src/xeq.c     **** 		pc = do_inc(pc, endp);
1989:src/xeq.c     **** 	}
1990:src/xeq.c     **** 	if (errp)
1991:src/xeq.c     **** 		report_err(ERR_NO_LBL);
1992:src/xeq.c     **** 	return 0;
1993:src/xeq.c     **** }
1994:src/xeq.c     **** 
1995:src/xeq.c     **** 
1996:src/xeq.c     **** unsigned int find_label_from(unsigned int pc, unsigned int arg, int flags) {
1997:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
1998:src/xeq.c     **** }
1999:src/xeq.c     **** 
2000:src/xeq.c     **** 
2001:src/xeq.c     **** 
2002:src/xeq.c     **** /* Handle a GTO/GSB instruction
2003:src/xeq.c     ****  */
2004:src/xeq.c     **** static void gsbgto(unsigned int pc, int gsb, unsigned int oldpc) {
2005:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
2006:src/xeq.c     **** 	raw_set_pc(pc);
2007:src/xeq.c     **** 	if (gsb) {
2008:src/xeq.c     **** 		if (!Running && !XromRunning) {
2009:src/xeq.c     **** 			// XEQ or hot key from keyboard
2010:src/xeq.c     **** 			clrretstk();
2011:src/xeq.c     **** 			set_running_on();
2012:src/xeq.c     **** 			if (! isXROM(pc) && ProgBegin != old_begin)
2013:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
2014:src/xeq.c     **** 				oldpc = pc;
2015:src/xeq.c     **** 		}
2016:src/xeq.c     **** 		if (-RetStkPtr >= (XromFlags.xIN ? XROM_RET_STACK_SIZE : RetStkSize)) {
2017:src/xeq.c     **** 			// Stack is full
2018:src/xeq.c     **** 			report_err(ERR_RAM_FULL);
2019:src/xeq.c     **** 			// clrretstk();
2020:src/xeq.c     **** 		}
2021:src/xeq.c     **** 		else {
2022:src/xeq.c     **** 			// Push PC on return stack
2023:src/xeq.c     **** 			RetStk[--RetStkPtr] = oldpc;
2024:src/xeq.c     **** 		}
2025:src/xeq.c     **** 	}
2026:src/xeq.c     **** }
2027:src/xeq.c     **** 
ARM GAS  /tmp/ccK8IvWa.s 			page 46


2028:src/xeq.c     **** // Handle a RTN
2029:src/xeq.c     **** static void do_rtn(int plus1) {
2030:src/xeq.c     **** 	unsigned short pc;
2031:src/xeq.c     **** 
2032:src/xeq.c     **** 	if (RetStkPtr >= 0) {
2033:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
2034:src/xeq.c     **** 		clrretstk();
2035:src/xeq.c     **** 		raw_set_pc(ProgBegin);
2036:src/xeq.c     **** 	}
2037:src/xeq.c     **** 	else {
2038:src/xeq.c     **** 		// Normal RTN within program
2039:src/xeq.c     **** 		// Pop any LOCALS off the stack, increment sp
2040:src/xeq.c     **** 		retstk_up();
2041:src/xeq.c     **** 		pc = RetStk[RetStkPtr - 1];
2042:src/xeq.c     **** 		raw_set_pc(pc);
2043:src/xeq.c     **** 		// If RTN+1 inc PC unless a POPUSR command or the program end would be skipped
2044:src/xeq.c     **** 		if (plus1 && getprog(pc) != (OP_NIL | OP_POPUSR))
2045:src/xeq.c     **** 			if (incpc())
2046:src/xeq.c     **** 				decpc();
2047:src/xeq.c     **** 	}
2048:src/xeq.c     **** 	if (RetStkPtr == 0) {
2049:src/xeq.c     **** 		// RTN with empty stack stops
2050:src/xeq.c     **** 		set_running_off();
2051:src/xeq.c     **** 	}
2052:src/xeq.c     **** }
2053:src/xeq.c     **** 
2054:src/xeq.c     **** // RTN and RTN+1
2055:src/xeq.c     **** void op_rtn(enum nilop op) {
2056:src/xeq.c     **** 	if (! Running && ! XromRunning) {
2057:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
2058:src/xeq.c     **** 		clrretstk_pc();
2059:src/xeq.c     **** 	}
2060:src/xeq.c     **** 	else
2061:src/xeq.c     **** 		do_rtn(op == OP_RTNp1 ? 1 : 0);
2062:src/xeq.c     **** }
2063:src/xeq.c     **** 
2064:src/xeq.c     **** 
2065:src/xeq.c     **** // Called by XEQ, GTO and CAT browser
2066:src/xeq.c     **** void cmdgtocommon(int gsb, unsigned int pc) {
2067:src/xeq.c     **** 	if (pc == 0)
2068:src/xeq.c     **** 		set_running_off();
2069:src/xeq.c     **** 	else
2070:src/xeq.c     **** 		gsbgto(pc, gsb, state_pc());
2071:src/xeq.c     **** }
2072:src/xeq.c     **** 
2073:src/xeq.c     **** 
2074:src/xeq.c     **** // Common part of XEQUSR and XEQ'...' from XROM
2075:src/xeq.c     **** // Command pushes 4 values on stack, needs to be followed by POPUSR
2076:src/xeq.c     **** static void usergsb_common(unsigned short int target) {
2077:src/xeq.c     **** 	const unsigned int pc = state_pc();
2078:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
2079:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
2080:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
2081:src/xeq.c     **** 	gsbgto(target, 1, pc);		     // Push return address, transfer control
2082:src/xeq.c     **** 
2083:src/xeq.c     **** 	XromUserPc = 0;			     // Hide information irrelevant to user code
2084:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
ARM GAS  /tmp/ccK8IvWa.s 			page 47


2085:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
2086:src/xeq.c     **** 	if (! Running)
2087:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
2088:src/xeq.c     **** 	watchdog();			     // Just for safety. Shouldn't be needed.
2089:src/xeq.c     **** }
2090:src/xeq.c     **** 
2091:src/xeq.c     **** 
2092:src/xeq.c     **** // XEQUSR
2093:src/xeq.c     **** // Command fills the stack and calls the user's code.
2094:src/xeq.c     **** // Needs to be followed by POPUSR
2095:src/xeq.c     **** void do_usergsb(enum nilop op) {
2096:src/xeq.c     **** 	usergsb_common(XromUserPc);
2097:src/xeq.c     ****         fill(OP_FILL);
2098:src/xeq.c     **** }
2099:src/xeq.c     **** 
2100:src/xeq.c     **** 
2101:src/xeq.c     **** // POPUSR
2102:src/xeq.c     **** void op_popusr(enum nilop op) {
2103:src/xeq.c     **** 	UserLocalRegs = RetStk[RetStkPtr++]; // Previous local registers
2104:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
2105:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
2106:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
2107:src/xeq.c     **** }
2108:src/xeq.c     **** 
2109:src/xeq.c     **** /* Tests if the user program is at the top level */
2110:src/xeq.c     **** void isTop(enum nilop op) {
2111:src/xeq.c     **** 	int top = 0;
2112:src/xeq.c     **** 
2113:src/xeq.c     **** 	if (Running) {
2114:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
2115:src/xeq.c     **** 	}
2116:src/xeq.c     **** 	fin_tst(top);
2117:src/xeq.c     **** }
2118:src/xeq.c     **** 
2119:src/xeq.c     **** 
2120:src/xeq.c     **** // LBL?
2121:src/xeq.c     **** void cmdlblp(unsigned int arg, enum rarg op) {
2122:src/xeq.c     **** 	fin_tst(find_label_from(state_pc(), arg, FIND_OP_ENDS) != 0);
2123:src/xeq.c     **** }
2124:src/xeq.c     **** 
2125:src/xeq.c     **** 
2126:src/xeq.c     **** void cmdgto(unsigned int arg, enum rarg op) {
2127:src/xeq.c     **** 	unsigned int lbl;
2128:src/xeq.c     **** 	if (is_xrom())
2129:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
2130:src/xeq.c     **** 	else
2131:src/xeq.c     **** 		lbl = find_label_from(state_pc(), arg, FIND_OP_ERROR | FIND_OP_ENDS);
2132:src/xeq.c     **** 	cmdgtocommon(op != RARG_GTO, lbl);
2133:src/xeq.c     **** }
2134:src/xeq.c     **** 
2135:src/xeq.c     **** unsigned int findmultilbl(const opcode o, int flags) {
2136:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
2137:src/xeq.c     **** 	unsigned int lbl;
2138:src/xeq.c     **** 
2139:src/xeq.c     **** 	lbl = find_opcode_from(0, dest, 0);					// RAM
2140:src/xeq.c     **** 	if (lbl == 0)
2141:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_LIBRARY), dest, 0);	// Library
ARM GAS  /tmp/ccK8IvWa.s 			page 48


2142:src/xeq.c     **** 	if (lbl == 0)
2143:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_BACKUP), dest, 0);	// Backup
2144:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
2145:src/xeq.c     **** 		report_err(ERR_NO_LBL);
2146:src/xeq.c     **** 	return lbl;
2147:src/xeq.c     **** }
2148:src/xeq.c     **** 
2149:src/xeq.c     **** // LBL?'...'
2150:src/xeq.c     **** void cmdmultilblp(const opcode o, enum multiops mopr) {
2151:src/xeq.c     **** 	fin_tst(findmultilbl(o, 0) != 0);
2152:src/xeq.c     **** }
2153:src/xeq.c     **** 
2154:src/xeq.c     **** void cmdmultigto(const opcode o, enum multiops mopr) {
2155:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
2156:src/xeq.c     **** 		// In XROM the command behaves differently!
2157:src/xeq.c     **** 		unsigned short int target = findmultilbl(o, 0);
2158:src/xeq.c     **** 		if (target != 0)
2159:src/xeq.c     **** 			usergsb_common(target); 
2160:src/xeq.c     **** 		else
2161:src/xeq.c     **** 			incpc();
2162:src/xeq.c     **** 	}
2163:src/xeq.c     **** 	else {
2164:src/xeq.c     **** 		cmdgtocommon(mopr != DBL_GTO, findmultilbl(o, FIND_OP_ERROR));
2165:src/xeq.c     **** 	}
2166:src/xeq.c     **** }
2167:src/xeq.c     **** 
2168:src/xeq.c     **** static void branchtoalpha(int is_gsb, char buf[]) {
2169:src/xeq.c     **** 	unsigned int op;
2170:src/xeq.c     **** 
2171:src/xeq.c     **** 	op = OP_DBL + (DBL_LBL << DBL_SHIFT);
2172:src/xeq.c     **** 	op |= buf[0] & 0xff;
2173:src/xeq.c     **** 	op |= (buf[1] & 0xff) << 16;
2174:src/xeq.c     **** 	op |= (buf[2] & 0xff) << 24;
2175:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
2176:src/xeq.c     **** }
2177:src/xeq.c     **** 
2178:src/xeq.c     **** void cmdalphagto(unsigned int arg, enum rarg op) {
2179:src/xeq.c     **** 	char buf[14];
2180:src/xeq.c     **** 
2181:src/xeq.c     **** 	xset(buf, '\0', sizeof(buf));
2182:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
2183:src/xeq.c     **** }
2184:src/xeq.c     **** 
2185:src/xeq.c     **** static void do_branchalpha(int is_gsb) {
2186:src/xeq.c     **** 	char buf[4];
2187:src/xeq.c     **** 
2188:src/xeq.c     **** 	xcopy(buf, Alpha, 3);
2189:src/xeq.c     **** 	buf[3] = '\0';
2190:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
2191:src/xeq.c     **** }
2192:src/xeq.c     **** 
2193:src/xeq.c     **** void op_gtoalpha(enum nilop op) {
2194:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
2195:src/xeq.c     **** }
2196:src/xeq.c     **** 
2197:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
2198:src/xeq.c     **** int get_dispmode_digs(int *pdigs)
ARM GAS  /tmp/ccK8IvWa.s 			page 49


2199:src/xeq.c     **** {
2200:src/xeq.c     **** 	int dispmode = UState.dispmode;
2201:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
2202:src/xeq.c     **** 
2203:src/xeq.c     **** 	if (dispdigs >= 12) {
2204:src/xeq.c     **** 		dispdigs -= 12;
2205:src/xeq.c     **** 		dispmode += 4;
2206:src/xeq.c     **** 		if (dispmode >= 6) {
2207:src/xeq.c     **** 			dispmode -= 2;
2208:src/xeq.c     **** 			dispdigs += 4;
2209:src/xeq.c     **** 		}
2210:src/xeq.c     **** 	}
2211:src/xeq.c     **** 	*pdigs = dispdigs;
2212:src/xeq.c     **** 	return dispmode;
2213:src/xeq.c     **** }
2214:src/xeq.c     **** 
2215:src/xeq.c     **** void set_dispmode_digs(int dispmode, int dispdigs)
2216:src/xeq.c     **** {
2217:src/xeq.c     **** 	if (dispmode >= 4) {
2218:src/xeq.c     **** 		dispmode -= 4;
2219:src/xeq.c     **** 		dispdigs += 12;
2220:src/xeq.c     **** 		if (dispdigs >= 16) {
2221:src/xeq.c     **** 			dispdigs -= 4;
2222:src/xeq.c     **** 			dispmode += 2;
2223:src/xeq.c     **** 		}
2224:src/xeq.c     **** 	}
2225:src/xeq.c     **** 	UState.dispmode = dispmode;
2226:src/xeq.c     **** 	UState.dispdigs = dispdigs;
2227:src/xeq.c     **** }
2228:src/xeq.c     **** #endif
2229:src/xeq.c     **** 
2230:src/xeq.c     **** void cmddisp(unsigned int arg, enum rarg op) {
2231:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
2232:src/xeq.c     **** 	int dispdigs;
2233:src/xeq.c     **** 	int dispmode = get_dispmode_digs(&dispdigs);
2234:src/xeq.c     **** 
2235:src/xeq.c     **** 	if (op != RARG_DISP)
2236:src/xeq.c     **** 		dispmode = (op - RARG_STD) + MODE_STD;
2237:src/xeq.c     **** 	else if ((dispmode == MODE_SIG || dispmode == MODE_SIG0) && arg >= 8) {
2238:src/xeq.c     **** 		report_err(ERR_RANGE);
2239:src/xeq.c     **** 		return;
2240:src/xeq.c     **** 	}
2241:src/xeq.c     **** 	set_dispmode_digs(dispmode, arg);
2242:src/xeq.c     **** #else
2243:src/xeq.c     **** 	UState.dispdigs = arg;
2244:src/xeq.c     **** 	if (op != RARG_DISP)
2245:src/xeq.c     **** 		UState.dispmode = (op - RARG_STD) + MODE_STD;
2246:src/xeq.c     **** #endif
2247:src/xeq.c     **** 	op_float(OP_FLOAT);
2248:src/xeq.c     **** }
2249:src/xeq.c     **** 
2250:src/xeq.c     **** 
2251:src/xeq.c     **** /* Metric / Imperial conversion code */
2252:src/xeq.c     **** decNumber *convC2F(decNumber *r, const decNumber *x) {
2253:src/xeq.c     **** 	decNumber s;
2254:src/xeq.c     **** 
2255:src/xeq.c     **** 	dn_multiply(&s, x, &const_9on5);
ARM GAS  /tmp/ccK8IvWa.s 			page 50


2256:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
2257:src/xeq.c     **** }
2258:src/xeq.c     **** 
2259:src/xeq.c     **** decNumber *convF2C(decNumber *r, const decNumber *x) {
2260:src/xeq.c     **** 	decNumber s;
2261:src/xeq.c     **** 
2262:src/xeq.c     **** 	dn_subtract(&s, x, &const_32);
2263:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
2264:src/xeq.c     **** }
2265:src/xeq.c     **** 
2266:src/xeq.c     **** decNumber *convDB2AR(decNumber *r, const decNumber *x) {
2267:src/xeq.c     **** 	decNumber t;
2268:src/xeq.c     **** 	dn_multiply(&t, x, &const_0_05);
2269:src/xeq.c     **** 	return decNumberPow10(r, &t);
2270:src/xeq.c     **** }
2271:src/xeq.c     **** 
2272:src/xeq.c     **** decNumber *convAR2DB(decNumber *r, const decNumber *x) {
2273:src/xeq.c     **** 	decNumber t;
2274:src/xeq.c     **** 	dn_log10(&t, x);
2275:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
2276:src/xeq.c     **** }
2277:src/xeq.c     **** 
2278:src/xeq.c     **** decNumber *convDB2PR(decNumber *r, const decNumber *x) {
2279:src/xeq.c     **** 	decNumber t;
2280:src/xeq.c     **** 	dn_mulpow10(&t, x, -1);
2281:src/xeq.c     **** 	return decNumberPow10(r, &t);
2282:src/xeq.c     **** }
2283:src/xeq.c     **** 
2284:src/xeq.c     **** decNumber *convPR2DB(decNumber *r, const decNumber *x) {
2285:src/xeq.c     **** 	decNumber t;
2286:src/xeq.c     **** 	dn_log10(&t, x);
2287:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
2288:src/xeq.c     **** }
2289:src/xeq.c     **** 
2290:src/xeq.c     **** /* Scale conversions */
2291:src/xeq.c     **** void do_conv(decNumber *r, unsigned int arg, const decNumber *x) {
2292:src/xeq.c     **** 	decNumber m;
2293:src/xeq.c     **** 	const unsigned int conv = arg / 2;
2294:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
2295:src/xeq.c     **** 
2296:src/xeq.c     **** 	if (conv > NUM_CONSTS_CONV) {
2297:src/xeq.c     **** 		decNumberCopy(r, x);
2298:src/xeq.c     **** 		return;
2299:src/xeq.c     **** 	}
2300:src/xeq.c     **** 
2301:src/xeq.c     **** 	decimal64ToNumber(&CONSTANT_CONV(conv), &m);
2302:src/xeq.c     **** 
2303:src/xeq.c     **** 	if (dirn == 0)		// metric to imperial
2304:src/xeq.c     **** 		dn_divide(r, x, &m);
2305:src/xeq.c     **** 	else			// imperial to metric
2306:src/xeq.c     **** 		dn_multiply(r, x, &m);
2307:src/xeq.c     **** }
2308:src/xeq.c     **** 
2309:src/xeq.c     **** void cmdconv(unsigned int arg, enum rarg op) {
2310:src/xeq.c     **** 	decNumber x, r;
2311:src/xeq.c     **** 
2312:src/xeq.c     **** 	if (is_intmode())
ARM GAS  /tmp/ccK8IvWa.s 			page 51


2313:src/xeq.c     **** 		return;
2314:src/xeq.c     **** 
2315:src/xeq.c     **** 	getX(&x);
2316:src/xeq.c     **** 	do_conv(&r, arg, &x);
2317:src/xeq.c     **** 	setlastX();
2318:src/xeq.c     **** 	setX(&r);
2319:src/xeq.c     **** }
2320:src/xeq.c     **** 
2321:src/xeq.c     **** /*  Finish up a test -- if the value is non-zero, the test passes.
2322:src/xeq.c     ****  *  If it is zero, the test fails.
2323:src/xeq.c     ****  */
2324:src/xeq.c     **** void fin_tst(const int a) {
2325:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
2326:src/xeq.c     **** 	if (Running || XromRunning) {
2327:src/xeq.c     **** 		if (! a && incpc())
2328:src/xeq.c     **** 			decpc();
2329:src/xeq.c     **** 	}
2330:src/xeq.c     **** 	else
2331:src/xeq.c     **** 		DispMsg = msg;
2332:src/xeq.c     **** #ifdef INFRARED
2333:src/xeq.c     **** 	if (Tracing) {
2334:src/xeq.c     **** 		print_justified( msg );
2335:src/xeq.c     **** 		Tracing = 0;
2336:src/xeq.c     **** 	}
2337:src/xeq.c     **** #endif
2338:src/xeq.c     **** }
2339:src/xeq.c     **** 
2340:src/xeq.c     **** 
2341:src/xeq.c     **** /* Skip a number of instructions forwards */
2342:src/xeq.c     **** void cmdskip(unsigned int arg, enum rarg op) {
2343:src/xeq.c     **** 	const unsigned int origpc = state_pc();
2344:src/xeq.c     **** 	unsigned int pc;
2345:src/xeq.c     **** 
2346:src/xeq.c     **** 	if (op == RARG_CASE) {
2347:src/xeq.c     **** 		int sgn;
2348:src/xeq.c     **** 		arg = (int) get_reg_n_int_sgn((int) arg, &sgn);
2349:src/xeq.c     **** 		if (sgn || arg >= 100) {
2350:src/xeq.c     **** 			report_err(ERR_RANGE);
2351:src/xeq.c     **** 			return;
2352:src/xeq.c     **** 		}
2353:src/xeq.c     **** 	}
2354:src/xeq.c     **** 
2355:src/xeq.c     **** 	if (isXROM(origpc))
2356:src/xeq.c     **** 		pc = origpc + arg;
2357:src/xeq.c     **** 	else {
2358:src/xeq.c     **** 		while (arg-- && !incpc());
2359:src/xeq.c     **** 		if (PcWrapped) {
2360:src/xeq.c     **** 			report_err(ERR_RANGE);
2361:src/xeq.c     **** 		}
2362:src/xeq.c     **** 		pc = state_pc();
2363:src/xeq.c     **** 	}
2364:src/xeq.c     **** 	gsbgto(pc, op == RARG_BSF, origpc);
2365:src/xeq.c     **** }
2366:src/xeq.c     **** 
2367:src/xeq.c     **** /* Skip backwards */
2368:src/xeq.c     **** void cmdback(unsigned int arg, enum rarg op) {
2369:src/xeq.c     **** 	const unsigned int origpc = state_pc();
ARM GAS  /tmp/ccK8IvWa.s 			page 52


2370:src/xeq.c     **** 	unsigned int pc = origpc;
2371:src/xeq.c     **** 
2372:src/xeq.c     **** 	if (isXROM(origpc))
2373:src/xeq.c     **** 		pc -= arg + 1;
2374:src/xeq.c     ****         else if (arg) {
2375:src/xeq.c     **** 		if ( Running ) {
2376:src/xeq.c     **** 			// Handles the case properly that we are on last step
2377:src/xeq.c     **** 			pc = do_dec(pc, 1);
2378:src/xeq.c     **** 		}
2379:src/xeq.c     **** 		do {
2380:src/xeq.c     **** 			pc = do_dec(pc, 1);
2381:src/xeq.c     **** 		} while (--arg && !PcWrapped);
2382:src/xeq.c     **** 		if (PcWrapped) {
2383:src/xeq.c     **** 			report_err(ERR_RANGE);
2384:src/xeq.c     **** 			return;
2385:src/xeq.c     **** 		}
2386:src/xeq.c     **** 	}
2387:src/xeq.c     **** 	gsbgto(pc, op == RARG_BSB, origpc);
2388:src/xeq.c     **** }
2389:src/xeq.c     **** 
2390:src/xeq.c     **** 
2391:src/xeq.c     **** /* Append a character to the command line
2392:src/xeq.c     ****  */
2393:src/xeq.c     **** static void append_cmdline(char c) {
2394:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
2395:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
2396:src/xeq.c     **** }
2397:src/xeq.c     **** 
2398:src/xeq.c     **** /* Make sure exponent stays within allowed limits.
2399:src/xeq.c     ****  * was_digit_entered: 0: sign was changed
2400:src/xeq.c     ****  *                    1: new digit was entered
2401:src/xeq.c     ****  */
2402:src/xeq.c     **** static void exponent_adjusted(int was_digit_entered)
2403:src/xeq.c     **** {
2404:src/xeq.c     **** 	const int dbl = is_dblmode();
2405:src/xeq.c     **** 	int i;
2406:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DC == -1
2407:src/xeq.c     **** 	const int neg_type_dc = get_reg_n_int_sgn(0, &i);
2408:src/xeq.c     **** #else
2409:src/xeq.c     **** 	const int neg_type_dc = SP_NEG_EXP_ENTRY_TYPE_DC;
2410:src/xeq.c     **** #endif
2411:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_LIMIT_DC == -1
2412:src/xeq.c     **** 	const int neg_lim_dc = get_reg_n_int_sgn(1, &i);
2413:src/xeq.c     **** #else
2414:src/xeq.c     **** 	const int neg_lim_dc = SP_NEG_EXP_ENTRY_LIMIT_DC;
2415:src/xeq.c     **** #endif
2416:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DS == -1
2417:src/xeq.c     **** 	const int neg_type_ds = get_reg_n_int_sgn(2, &i);
2418:src/xeq.c     **** #else
2419:src/xeq.c     **** 	const int neg_type_ds = SP_NEG_EXP_ENTRY_TYPE_DS;
2420:src/xeq.c     **** #endif
2421:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_LIMIT_DS == -1
2422:src/xeq.c     **** 	const int neg_lim_ds = get_reg_n_int_sgn(3, &i);
2423:src/xeq.c     **** #else
2424:src/xeq.c     **** 	const int neg_lim_ds = SP_NEG_EXP_ENTRY_LIMIT_DS;
2425:src/xeq.c     **** #endif
2426:src/xeq.c     **** #if SP_POS_EXP_ENTRY_TYPE_DC == -1
ARM GAS  /tmp/ccK8IvWa.s 			page 53


2427:src/xeq.c     **** 	const int pos_type_dc = get_reg_n_int_sgn(4, &i);
2428:src/xeq.c     **** #else
2429:src/xeq.c     **** 	const int pos_type_dc = SP_POS_EXP_ENTRY_TYPE_DC;
2430:src/xeq.c     **** #endif
2431:src/xeq.c     **** #if SP_POS_EXP_ENTRY_LIMIT_DC == -1
2432:src/xeq.c     **** 	const int pos_lim_dc = get_reg_n_int_sgn(5, &i);
2433:src/xeq.c     **** #else
2434:src/xeq.c     **** 	const int pos_lim_dc = SP_POS_EXP_ENTRY_LIMIT_DC;
2435:src/xeq.c     **** #endif
2436:src/xeq.c     **** #if SP_POS_EXP_ENTRY_TYPE_DS == -1
2437:src/xeq.c     **** 	const int pos_type_ds = get_reg_n_int_sgn(6, &i);
2438:src/xeq.c     **** #else
2439:src/xeq.c     **** 	const int pos_type_ds = SP_POS_EXP_ENTRY_TYPE_DS;
2440:src/xeq.c     **** #endif
2441:src/xeq.c     **** #if SP_POS_EXP_ENTRY_LIMIT_DS == -1
2442:src/xeq.c     **** 	const int pos_lim_ds = get_reg_n_int_sgn(7, &i);
2443:src/xeq.c     **** #else
2444:src/xeq.c     **** 	const int pos_lim_ds = SP_POS_EXP_ENTRY_LIMIT_DS;
2445:src/xeq.c     **** #endif
2446:src/xeq.c     **** #if SP_EXP_ENTRY_CHS_DC == -1
2447:src/xeq.c     **** 	const int exp_chs_dc = get_reg_n_int_sgn(8, &i);
2448:src/xeq.c     **** #else
2449:src/xeq.c     **** 	const int exp_chs_dc = SP_EXP_ENTRY_CHS_DC;
2450:src/xeq.c     **** #endif
2451:src/xeq.c     **** #if SP_EXP_ENTRY_CHS_DS == -1
2452:src/xeq.c     **** 	const int exp_chs_ds = get_reg_n_int_sgn(9, &i);
2453:src/xeq.c     **** #else
2454:src/xeq.c     **** 	const int exp_chs_ds = SP_EXP_ENTRY_CHS_DS;
2455:src/xeq.c     **** #endif
2456:src/xeq.c     **** 	const int dp_neg_type_dc = DP_NEG_EXP_ENTRY_TYPE_DC;
2457:src/xeq.c     **** 	const int dp_neg_lim_dc = DP_NEG_EXP_ENTRY_LIMIT_DC;
2458:src/xeq.c     **** 	const int dp_neg_type_ds = DP_NEG_EXP_ENTRY_TYPE_DS;
2459:src/xeq.c     **** 	const int dp_neg_lim_ds = DP_NEG_EXP_ENTRY_LIMIT_DS;
2460:src/xeq.c     **** 	const int dp_pos_type_dc = DP_POS_EXP_ENTRY_TYPE_DC;
2461:src/xeq.c     **** 	const int dp_pos_lim_dc = DP_POS_EXP_ENTRY_LIMIT_DC;
2462:src/xeq.c     **** 	const int dp_pos_type_ds = DP_POS_EXP_ENTRY_TYPE_DS;
2463:src/xeq.c     **** 	const int dp_pos_lim_ds = DP_POS_EXP_ENTRY_LIMIT_DS;
2464:src/xeq.c     **** 	const int dp_exp_chs_dc = DP_EXP_ENTRY_CHS_DC;
2465:src/xeq.c     **** 	const int dp_exp_chs_ds = DP_EXP_ENTRY_CHS_DS;
2466:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2467:src/xeq.c     **** 	const int large_exp_entry = 1;
2468:src/xeq.c     **** 	char *p = &Cmdline[CmdLineEex];
2469:src/xeq.c     **** #else
2470:src/xeq.c     **** 	const int large_exp_entry = 0;
2471:src/xeq.c     **** 	char *p = &Cmdline[CmdLineEex + 1];
2472:src/xeq.c     **** #endif
2473:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DC == -1 || SP_NEG_EXP_ENTRY_TYPE_DC != SP_NEG_EXP_ENTRY_TYPE_DS \
2474:src/xeq.c     ****     || SP_NEG_EXP_ENTRY_LIMIT_DC == -1 || SP_NEG_EXP_ENTRY_LIMIT_DC != SP_NEG_EXP_ENTRY_LIMIT_DS \
2475:src/xeq.c     ****     || SP_POS_EXP_ENTRY_TYPE_DC == -1 || SP_POS_EXP_ENTRY_TYPE_DC != SP_POS_EXP_ENTRY_TYPE_DS \
2476:src/xeq.c     ****     || SP_POS_EXP_ENTRY_LIMIT_DC == -1 || SP_POS_EXP_ENTRY_LIMIT_DC != SP_POS_EXP_ENTRY_LIMIT_DS \
2477:src/xeq.c     ****     || SP_EXP_ENTRY_CHS_DC == -1 || SP_EXP_ENTRY_CHS_DC != SP_EXP_ENTRY_CHS_DS \
2478:src/xeq.c     ****     || SP_EXP_ENTRY_ZERO_DC == -1 || SP_EXP_ENTRY_ZERO_DC != SP_EXP_ENTRY_ZERO_DS \
2479:src/xeq.c     ****     || ((DP_NEG_EXP_ENTRY_TYPE_DC != DP_NEG_EXP_ENTRY_TYPE_DS \
2480:src/xeq.c     ****          || DP_NEG_EXP_ENTRY_LIMIT_DC != DP_NEG_EXP_ENTRY_LIMIT_DS \
2481:src/xeq.c     ****          || DP_POS_EXP_ENTRY_TYPE_DC != DP_POS_EXP_ENTRY_TYPE_DS \
2482:src/xeq.c     ****          || DP_POS_EXP_ENTRY_LIMIT_DC != DP_POS_EXP_ENTRY_LIMIT_DS \
2483:src/xeq.c     ****          || DP_EXP_ENTRY_CHS_DC != DP_EXP_ENTRY_CHS_DS \
ARM GAS  /tmp/ccK8IvWa.s 			page 54


2484:src/xeq.c     ****          || DP_EXP_ENTRY_ZERO_DC != DP_EXP_ENTRY_ZERO_DS) && defined(LARGE_EXPONENT_ENTRY))
2485:src/xeq.c     **** 	const int flag_D = get_user_flag(NAN_FLAG);
2486:src/xeq.c     **** #else
2487:src/xeq.c     **** 	const int flag_D = 0;
2488:src/xeq.c     **** #endif
2489:src/xeq.c     **** #ifndef SHIFT_EXPONENT
2490:src/xeq.c     **** 	int negative;
2491:src/xeq.c     **** #endif
2492:src/xeq.c     **** 	int emax;
2493:src/xeq.c     **** 
2494:src/xeq.c     **** 	/* Figure out the range limit for the exponent */
2495:src/xeq.c     **** 	if (!large_exp_entry && dbl) {
2496:src/xeq.c     **** 		emax = 999;
2497:src/xeq.c     **** 	}
2498:src/xeq.c     **** 	else {
2499:src/xeq.c     **** 		int emax_plus, emax_minus;
2500:src/xeq.c     **** 		int dot = 0, first_nonzero = -1, last_nonzero = 0;
2501:src/xeq.c     **** 
2502:src/xeq.c     **** 		if ((neg_type_dc >= 1 && neg_type_dc <= 9)
2503:src/xeq.c     **** 		    || (neg_type_ds >= 1 && neg_type_ds <= 9)
2504:src/xeq.c     **** 		    || (pos_type_dc >= 1 && pos_type_dc <= 3)
2505:src/xeq.c     **** 		    || (pos_type_ds >= 1 && pos_type_ds <= 3)
2506:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2507:src/xeq.c     **** 		    || (dp_neg_type_dc >= 1 && dp_neg_type_dc <= 9)
2508:src/xeq.c     **** 		    || (dp_neg_type_ds >= 1 && dp_neg_type_ds <= 9)
2509:src/xeq.c     **** 		    || (dp_pos_type_dc >= 1 && dp_pos_type_dc <= 3)
2510:src/xeq.c     **** 		    || (dp_pos_type_ds >= 1 && dp_pos_type_ds <= 3)
2511:src/xeq.c     **** #endif
2512:src/xeq.c     **** 		   ) {
2513:src/xeq.c     **** 			// Exponent limits have to be calculated at run-time
2514:src/xeq.c     **** 
2515:src/xeq.c     **** 			for (i = 0; i < CmdLineLength; ++i) {
2516:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2517:src/xeq.c     **** 				if (Cmdline[i] == 'E' || Cmdline[i] == 'D')
2518:src/xeq.c     **** #else
2519:src/xeq.c     **** 				if (Cmdline[i] == 'E')
2520:src/xeq.c     **** #endif
2521:src/xeq.c     **** 					break;
2522:src/xeq.c     **** 				else if (Cmdline[i] == '.')
2523:src/xeq.c     **** 					dot = i;
2524:src/xeq.c     **** 				else if (Cmdline[i] != '0') {
2525:src/xeq.c     **** 					last_nonzero = i - (dot != 0);
2526:src/xeq.c     **** 					if (first_nonzero < 0)
2527:src/xeq.c     **** 						first_nonzero = i - (dot != 0);
2528:src/xeq.c     **** 				}
2529:src/xeq.c     **** 			}
2530:src/xeq.c     **** 			if (first_nonzero < 0) { // Mantissa is zero.
2531:src/xeq.c     **** #if SP_EXP_ENTRY_ZERO_DC == -1
2532:src/xeq.c     **** 				const int zero_dc = (get_user_flag(1) << 1) | get_user_flag(0);
2533:src/xeq.c     **** #else
2534:src/xeq.c     **** 				const int zero_dc = SP_EXP_ENTRY_ZERO_DC;
2535:src/xeq.c     **** #endif
2536:src/xeq.c     **** #if SP_EXP_ENTRY_ZERO_DS == -1
2537:src/xeq.c     **** 				const int zero_ds = (get_user_flag(3) << 1) | get_user_flag(2);
2538:src/xeq.c     **** #else
2539:src/xeq.c     **** 				const int zero_ds = SP_EXP_ENTRY_ZERO_DS;
2540:src/xeq.c     **** #endif
ARM GAS  /tmp/ccK8IvWa.s 			page 55


2541:src/xeq.c     **** 				const int dp_zero_dc = DP_EXP_ENTRY_ZERO_DC;
2542:src/xeq.c     **** 				const int dp_zero_ds = DP_EXP_ENTRY_ZERO_DS;
2543:src/xeq.c     **** 
2544:src/xeq.c     **** 				if (large_exp_entry && dbl) {
2545:src/xeq.c     **** 					if ((dp_zero_dc == 1 && dp_zero_ds == 1)
2546:src/xeq.c     **** 					    || (dp_zero_dc == 1 && !flag_D)
2547:src/xeq.c     **** 					    || (dp_zero_ds == 1 && flag_D)) {
2548:src/xeq.c     **** 						// Double precision: Allow any exponent
2549:src/xeq.c     **** 						// within configured limits if any.
2550:src/xeq.c     **** 						emax_plus = emax_minus = 9999;
2551:src/xeq.c     **** 						goto check_limits;
2552:src/xeq.c     **** 					}
2553:src/xeq.c     **** 					else if ((dp_zero_dc == 2 && dp_zero_ds == 2)
2554:src/xeq.c     **** 					         || (dp_zero_dc == 2 && !flag_D)
2555:src/xeq.c     **** 					         || (dp_zero_ds == 2 && flag_D)) {
2556:src/xeq.c     **** 						// Double precision: Allow any exponent
2557:src/xeq.c     **** 						// even outside of configured limits.
2558:src/xeq.c     **** 						emax = 9999;
2559:src/xeq.c     **** 						goto do_not_check_limits;
2560:src/xeq.c     **** 					}
2561:src/xeq.c     **** 					goto zero_has_one_significant_digit;
2562:src/xeq.c     **** 				}
2563:src/xeq.c     **** 				if ((zero_dc == 1 && zero_ds == 1)
2564:src/xeq.c     **** 				    || (zero_dc == 1 && !flag_D)
2565:src/xeq.c     **** 				    || (zero_ds == 1 && flag_D)) {
2566:src/xeq.c     **** 					// Allow any exponent within configured limits if any.
2567:src/xeq.c     **** 					emax_plus = emax_minus = 999;
2568:src/xeq.c     **** 					goto check_limits;
2569:src/xeq.c     **** 				}
2570:src/xeq.c     **** 				else if ((zero_dc == 2 && zero_ds == 2)
2571:src/xeq.c     **** 				         || (zero_dc == 2 && !flag_D)
2572:src/xeq.c     **** 				         || (zero_ds == 2 && flag_D)) {
2573:src/xeq.c     **** 					// Allow any exponent even outside of configured limits.
2574:src/xeq.c     **** 					emax = 999;
2575:src/xeq.c     **** 					goto do_not_check_limits;
2576:src/xeq.c     **** 				}
2577:src/xeq.c     **** 				else {
2578:src/xeq.c     **** zero_has_one_significant_digit:
2579:src/xeq.c     **** 					// Treat zero as if it had one significant digit.
2580:src/xeq.c     **** 					first_nonzero = 0;
2581:src/xeq.c     **** 					dot = 1;
2582:src/xeq.c     **** 				}
2583:src/xeq.c     **** 			}
2584:src/xeq.c     **** 			else if (dot == 0)
2585:src/xeq.c     **** 				dot = i;
2586:src/xeq.c     **** 		}
2587:src/xeq.c     **** 
2588:src/xeq.c     **** 		if (large_exp_entry && dbl) {
2589:src/xeq.c     **** 			// Double precision mode
2590:src/xeq.c     **** 			if (flag_D && dp_neg_type_dc != dp_neg_type_ds) {
2591:src/xeq.c     **** 				if (dp_neg_type_ds >= 1 && dp_neg_type_ds <= 3) {
2592:src/xeq.c     **** 					// Don't allow denormal numbers
2593:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin - 1 + dot - first_nonzero;
2594:src/xeq.c     **** 				}
2595:src/xeq.c     **** 				else if (dp_neg_type_ds >= 4 && dp_neg_type_ds <= 6) {
2596:src/xeq.c     **** 					// No entered digit can be lost in denormal numbers
2597:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 - (last_nonzero - dot);
ARM GAS  /tmp/ccK8IvWa.s 			page 56


2598:src/xeq.c     **** 				}
2599:src/xeq.c     **** 				else if (dp_neg_type_ds >= 7 && dp_neg_type_ds <= 9) {
2600:src/xeq.c     **** 					// At least one digit preserved in denormal numbers
2601:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 + dot - first_nonzero;
2602:src/xeq.c     **** 				}
2603:src/xeq.c     **** 				else {
2604:src/xeq.c     **** 					// Fixed limit
2605:src/xeq.c     **** 					emax_minus = dp_neg_lim_ds;
2606:src/xeq.c     **** 				}
2607:src/xeq.c     **** 			}
2608:src/xeq.c     **** 			else {
2609:src/xeq.c     **** 				if (dp_neg_type_dc >= 1 && dp_neg_type_dc <= 3) {
2610:src/xeq.c     **** 					// Don't allow denormal numbers
2611:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin - 1 + dot - first_nonzero;
2612:src/xeq.c     **** 				}
2613:src/xeq.c     **** 				else if (dp_neg_type_dc >= 4 && dp_neg_type_dc <= 6) {
2614:src/xeq.c     **** 					// No entered digit can be lost in denormal numbers
2615:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 - (last_nonzero - dot);
2616:src/xeq.c     **** 				}
2617:src/xeq.c     **** 				else if (dp_neg_type_dc >= 7 && dp_neg_type_dc <= 9) {
2618:src/xeq.c     **** 					// At least one digit preserved in denormal numbers
2619:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 + dot - first_nonzero;
2620:src/xeq.c     **** 				}
2621:src/xeq.c     **** 				else {
2622:src/xeq.c     **** 					// Fixed limit
2623:src/xeq.c     **** 					emax_minus = dp_neg_lim_dc;
2624:src/xeq.c     **** 				}
2625:src/xeq.c     **** 			}
2626:src/xeq.c     **** 
2627:src/xeq.c     **** 			if (flag_D && dp_pos_type_dc != dp_pos_type_ds) {
2628:src/xeq.c     **** 				if (dp_pos_type_ds >= 1 && dp_pos_type_ds <= 3)
2629:src/xeq.c     **** 					// Don't allow numbers that overflow to infinity
2630:src/xeq.c     **** 					emax_plus = DECIMAL128_Emax + 1 - (dot - first_nonzero);
2631:src/xeq.c     **** 				else
2632:src/xeq.c     **** 					// Fixed limit
2633:src/xeq.c     **** 					emax_plus = dp_pos_lim_ds;
2634:src/xeq.c     **** 			}
2635:src/xeq.c     **** 			else {
2636:src/xeq.c     **** 				if (dp_pos_type_dc >= 1 && dp_pos_type_dc <= 3)
2637:src/xeq.c     **** 					// Don't allow numbers that overflow to infinity
2638:src/xeq.c     **** 					emax_plus = DECIMAL128_Emax + 1 - (dot - first_nonzero);
2639:src/xeq.c     **** 				else
2640:src/xeq.c     **** 					// Fixed limit
2641:src/xeq.c     **** 					emax_plus = dp_pos_lim_dc;
2642:src/xeq.c     **** 			}
2643:src/xeq.c     **** 
2644:src/xeq.c     **** 			goto check_limits;
2645:src/xeq.c     **** 		}
2646:src/xeq.c     **** 
2647:src/xeq.c     **** 		if (flag_D && neg_type_dc != neg_type_ds) {
2648:src/xeq.c     **** 			if (neg_type_ds >= 1 && neg_type_ds <= 3) {
2649:src/xeq.c     **** 				// Don't allow denormal numbers
2650:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin - 1 + dot - first_nonzero;
2651:src/xeq.c     **** 			}
2652:src/xeq.c     **** 			else if (neg_type_ds >= 4 && neg_type_ds <= 6) {
2653:src/xeq.c     **** 				// No entered digit can be lost in denormal numbers
2654:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 - (last_nonzero - dot);
ARM GAS  /tmp/ccK8IvWa.s 			page 57


2655:src/xeq.c     **** 			}
2656:src/xeq.c     **** 			else if (neg_type_ds >= 7 && neg_type_ds <= 9) {
2657:src/xeq.c     **** 				// At least one digit preserved in denormal numbers
2658:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 + dot - first_nonzero;
2659:src/xeq.c     **** 			}
2660:src/xeq.c     **** 			else {
2661:src/xeq.c     **** 				// Fixed limit
2662:src/xeq.c     **** 				emax_minus = neg_lim_ds;
2663:src/xeq.c     **** 			}
2664:src/xeq.c     **** 		}
2665:src/xeq.c     **** 		else {
2666:src/xeq.c     **** 			if (neg_type_dc >= 1 && neg_type_dc <= 3) {
2667:src/xeq.c     **** 				// Don't allow denormal numbers
2668:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin - 1 + dot - first_nonzero;
2669:src/xeq.c     **** 			}
2670:src/xeq.c     **** 			else if (neg_type_dc >= 4 && neg_type_dc <= 6) {
2671:src/xeq.c     **** 				// No entered digit can be lost in denormal numbers
2672:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 - (last_nonzero - dot);
2673:src/xeq.c     **** 			}
2674:src/xeq.c     **** 			else if (neg_type_dc >= 7 && neg_type_dc <= 9) {
2675:src/xeq.c     **** 				// At least one digit preserved in denormal numbers
2676:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 + dot - first_nonzero;
2677:src/xeq.c     **** 			}
2678:src/xeq.c     **** 			else {
2679:src/xeq.c     **** 				// Fixed limit
2680:src/xeq.c     **** 				emax_minus = neg_lim_dc;
2681:src/xeq.c     **** 			}
2682:src/xeq.c     **** 		}
2683:src/xeq.c     **** 
2684:src/xeq.c     **** 		if (flag_D && pos_type_dc != pos_type_ds) {
2685:src/xeq.c     **** 			if (pos_type_ds >= 1 && pos_type_ds <= 3)
2686:src/xeq.c     **** 				// Don't allow numbers that overflow to infinity
2687:src/xeq.c     **** 				emax_plus = DECIMAL64_Emax + 1 - (dot - first_nonzero);
2688:src/xeq.c     **** 			else
2689:src/xeq.c     **** 				// Fixed limit
2690:src/xeq.c     **** 				emax_plus = pos_lim_ds;
2691:src/xeq.c     **** 		}
2692:src/xeq.c     **** 		else {
2693:src/xeq.c     **** 			if (pos_type_dc >= 1 && pos_type_dc <= 3)
2694:src/xeq.c     **** 				// Don't allow numbers that overflow to infinity
2695:src/xeq.c     **** 				emax_plus = DECIMAL64_Emax + 1 - (dot - first_nonzero);
2696:src/xeq.c     **** 			else
2697:src/xeq.c     **** 				// Fixed limit
2698:src/xeq.c     **** 				emax_plus = pos_lim_dc;
2699:src/xeq.c     **** 		}
2700:src/xeq.c     **** 
2701:src/xeq.c     **** check_limits:
2702:src/xeq.c     **** 		if (large_exp_entry && dbl && flag_D
2703:src/xeq.c     **** 		    && (dp_neg_type_dc != dp_neg_type_ds || dp_neg_lim_dc != dp_neg_lim_ds)
2704:src/xeq.c     **** 		    && (dp_neg_type_ds != neg_type_ds || dp_neg_lim_ds != neg_lim_ds)) {
2705:src/xeq.c     **** 			if (dp_neg_type_ds >= 1 && dp_neg_type_ds <= 9) {
2706:src/xeq.c     **** 				if (dp_neg_type_ds % 3 == 2) { // low limit
2707:src/xeq.c     **** 					if (emax_minus > dp_neg_lim_ds)
2708:src/xeq.c     **** 						emax_minus = dp_neg_lim_ds;
2709:src/xeq.c     **** 				}
2710:src/xeq.c     **** 				else if (dp_neg_type_ds % 3 == 0) { // high limit
2711:src/xeq.c     **** 					if (emax_minus < dp_neg_lim_ds)
ARM GAS  /tmp/ccK8IvWa.s 			page 58


2712:src/xeq.c     **** 						emax_minus = dp_neg_lim_ds;
2713:src/xeq.c     **** 				}
2714:src/xeq.c     **** 			}
2715:src/xeq.c     **** 			if (dp_neg_lim_ds < 0 && emax_minus < 0)
2716:src/xeq.c     **** 				emax_minus = 0;
2717:src/xeq.c     **** 		}
2718:src/xeq.c     **** 		else if (large_exp_entry && dbl
2719:src/xeq.c     **** 		         && (!flag_D || (dp_neg_type_dc == dp_neg_type_ds
2720:src/xeq.c     **** 		                         && dp_neg_lim_dc == dp_neg_lim_ds))
2721:src/xeq.c     **** 		         && (dp_neg_type_dc != neg_type_dc || dp_neg_lim_dc != neg_lim_dc)) {
2722:src/xeq.c     **** 			if (dp_neg_type_dc >= 1 && dp_neg_type_dc <= 9) {
2723:src/xeq.c     **** 				if (dp_neg_type_dc % 3 == 2) { // low limit
2724:src/xeq.c     **** 					if (emax_minus > dp_neg_lim_dc)
2725:src/xeq.c     **** 						emax_minus = dp_neg_lim_dc;
2726:src/xeq.c     **** 				}
2727:src/xeq.c     **** 				else if (dp_neg_type_dc % 3 == 0) { // high limit
2728:src/xeq.c     **** 					if (emax_minus < dp_neg_lim_dc)
2729:src/xeq.c     **** 						emax_minus = dp_neg_lim_dc;
2730:src/xeq.c     **** 				}
2731:src/xeq.c     **** 			}
2732:src/xeq.c     **** 			if (dp_neg_lim_dc < 0 && emax_minus < 0)
2733:src/xeq.c     **** 				emax_minus = 0;
2734:src/xeq.c     **** 		}
2735:src/xeq.c     **** 		else if (flag_D && (neg_type_dc != neg_type_ds || neg_lim_dc != neg_lim_ds)) {
2736:src/xeq.c     **** 			if (neg_type_ds >= 1 && neg_type_ds <= 9) {
2737:src/xeq.c     **** 				if (neg_type_ds % 3 == 2) { // low limit
2738:src/xeq.c     **** 					if (emax_minus > neg_lim_ds)
2739:src/xeq.c     **** 						emax_minus = neg_lim_ds;
2740:src/xeq.c     **** 				}
2741:src/xeq.c     **** 				else if (neg_type_ds % 3 == 0) { // high limit
2742:src/xeq.c     **** 					if (emax_minus < neg_lim_ds)
2743:src/xeq.c     **** 						emax_minus = neg_lim_ds;
2744:src/xeq.c     **** 				}
2745:src/xeq.c     **** 			}
2746:src/xeq.c     **** 			if (neg_lim_ds < 0 && emax_minus < 0)
2747:src/xeq.c     **** 				emax_minus = 0;
2748:src/xeq.c     **** 		}
2749:src/xeq.c     **** 		else {
2750:src/xeq.c     **** 			if (neg_type_dc >= 1 && neg_type_dc <= 9) {
2751:src/xeq.c     **** 				if (neg_type_dc % 3 == 2) { // low limit
2752:src/xeq.c     **** 					if (emax_minus > neg_lim_dc)
2753:src/xeq.c     **** 						emax_minus = neg_lim_dc;
2754:src/xeq.c     **** 				}
2755:src/xeq.c     **** 				else if (neg_type_dc % 3 == 0) { // high limit
2756:src/xeq.c     **** 					if (emax_minus < neg_lim_dc)
2757:src/xeq.c     **** 						emax_minus = neg_lim_dc;
2758:src/xeq.c     **** 				}
2759:src/xeq.c     **** 			}
2760:src/xeq.c     **** 			if (neg_lim_dc < 0 && emax_minus < 0)
2761:src/xeq.c     **** 				emax_minus = 0;
2762:src/xeq.c     **** 		}
2763:src/xeq.c     **** 
2764:src/xeq.c     **** 		if (large_exp_entry && dbl && flag_D
2765:src/xeq.c     **** 		    && (dp_pos_type_dc != dp_pos_type_ds || dp_pos_lim_dc != dp_pos_lim_ds)
2766:src/xeq.c     **** 		    && (dp_pos_type_ds != pos_type_ds || dp_pos_lim_ds != pos_lim_ds)) {
2767:src/xeq.c     **** 			if (dp_pos_type_ds == 2) { // low limit
2768:src/xeq.c     **** 				if (emax_plus < dp_pos_lim_ds)
ARM GAS  /tmp/ccK8IvWa.s 			page 59


2769:src/xeq.c     **** 					emax_plus = dp_pos_lim_ds;
2770:src/xeq.c     **** 			}
2771:src/xeq.c     **** 			else if (dp_pos_type_ds == 3) { // high limit
2772:src/xeq.c     **** 				if (emax_plus > dp_pos_lim_ds)
2773:src/xeq.c     **** 					emax_plus = dp_pos_lim_ds;
2774:src/xeq.c     **** 			}
2775:src/xeq.c     **** 			if (dp_pos_lim_ds < 0 && emax_plus < 0)
2776:src/xeq.c     **** 				emax_plus = 0;
2777:src/xeq.c     **** 		}
2778:src/xeq.c     **** 		else if (large_exp_entry && dbl
2779:src/xeq.c     **** 		         && (!flag_D || (dp_pos_type_dc == dp_pos_type_ds
2780:src/xeq.c     **** 		                         && dp_pos_lim_dc == dp_pos_lim_ds))
2781:src/xeq.c     **** 		         && (dp_pos_type_dc != pos_type_dc || dp_pos_lim_dc != pos_lim_dc)) {
2782:src/xeq.c     **** 			if (dp_pos_type_dc == 2) { // low limit
2783:src/xeq.c     **** 				if (emax_plus < dp_pos_lim_dc)
2784:src/xeq.c     **** 					emax_plus = dp_pos_lim_dc;
2785:src/xeq.c     **** 			}
2786:src/xeq.c     **** 			else if (dp_pos_type_dc == 3) { // high limit
2787:src/xeq.c     **** 				if (emax_plus > dp_pos_lim_dc)
2788:src/xeq.c     **** 					emax_plus = dp_pos_lim_dc;
2789:src/xeq.c     **** 			}
2790:src/xeq.c     **** 			if (dp_pos_lim_dc < 0 && emax_plus < 0)
2791:src/xeq.c     **** 				emax_plus = 0;
2792:src/xeq.c     **** 		}
2793:src/xeq.c     **** 		else if (flag_D && (pos_type_dc != pos_type_ds || pos_lim_dc != pos_lim_ds)) {
2794:src/xeq.c     **** 			if (pos_type_ds == 2) { // low limit
2795:src/xeq.c     **** 				if (emax_plus < pos_lim_ds)
2796:src/xeq.c     **** 					emax_plus = pos_lim_ds;
2797:src/xeq.c     **** 			}
2798:src/xeq.c     **** 			else if (pos_type_ds == 3) { // high limit
2799:src/xeq.c     **** 				if (emax_plus > pos_lim_ds)
2800:src/xeq.c     **** 					emax_plus = pos_lim_ds;
2801:src/xeq.c     **** 			}
2802:src/xeq.c     **** 			if (pos_lim_ds < 0 && emax_plus < 0)
2803:src/xeq.c     **** 				emax_plus = 0;
2804:src/xeq.c     **** 		}
2805:src/xeq.c     **** 		else {
2806:src/xeq.c     **** 			if (pos_type_dc == 2) { // low limit
2807:src/xeq.c     **** 				if (emax_plus < pos_lim_dc)
2808:src/xeq.c     **** 					emax_plus = pos_lim_dc;
2809:src/xeq.c     **** 			}
2810:src/xeq.c     **** 			else if (pos_type_dc == 3) { // high limit
2811:src/xeq.c     **** 				if (emax_plus > pos_lim_dc)
2812:src/xeq.c     **** 					emax_plus = pos_lim_dc;
2813:src/xeq.c     **** 			}
2814:src/xeq.c     **** 			if (pos_lim_dc < 0 && emax_plus < 0)
2815:src/xeq.c     **** 				emax_plus = 0;
2816:src/xeq.c     **** 		}
2817:src/xeq.c     **** 
2818:src/xeq.c     **** 		if (large_exp_entry && dbl && flag_D
2819:src/xeq.c     **** 		    && (dp_exp_chs_dc != dp_exp_chs_ds)
2820:src/xeq.c     **** 		    && (dp_exp_chs_ds != exp_chs_ds)) {
2821:src/xeq.c     **** 			if (dp_exp_chs_ds == 0) {
2822:src/xeq.c     **** 				// Limit exponents so sign change is always legal
2823:src/xeq.c     **** 				if (emax_minus < emax_plus)
2824:src/xeq.c     **** 					emax = emax_minus;
2825:src/xeq.c     **** 				else
ARM GAS  /tmp/ccK8IvWa.s 			page 60


2826:src/xeq.c     **** 					emax = emax_plus;
2827:src/xeq.c     **** 			}
2828:src/xeq.c     **** 			else if (dp_exp_chs_ds == 3) {
2829:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
2830:src/xeq.c     **** 				if (emax_minus > emax_plus)
2831:src/xeq.c     **** 					emax = emax_minus;
2832:src/xeq.c     **** 				else
2833:src/xeq.c     **** 					emax = emax_plus;
2834:src/xeq.c     **** 			}
2835:src/xeq.c     **** 			else {
2836:src/xeq.c     **** 				if (dp_exp_chs_ds == 2 && !was_digit_entered)
2837:src/xeq.c     **** 					return;
2838:src/xeq.c     **** 				if (*p == 'D')
2839:src/xeq.c     **** 					emax = emax_minus;
2840:src/xeq.c     **** 				else
2841:src/xeq.c     **** 					emax = emax_plus;
2842:src/xeq.c     **** 			}
2843:src/xeq.c     **** 		}
2844:src/xeq.c     **** 		else if (large_exp_entry && dbl
2845:src/xeq.c     **** 		         && (!flag_D || dp_exp_chs_dc == dp_exp_chs_ds)
2846:src/xeq.c     **** 		         && (dp_exp_chs_dc != exp_chs_dc)) {
2847:src/xeq.c     **** 			if (dp_exp_chs_dc == 0) {
2848:src/xeq.c     **** 				// Limit exponents so sign change is always legal
2849:src/xeq.c     **** 				if (emax_minus < emax_plus)
2850:src/xeq.c     **** 					emax = emax_minus;
2851:src/xeq.c     **** 				else
2852:src/xeq.c     **** 					emax = emax_plus;
2853:src/xeq.c     **** 			}
2854:src/xeq.c     **** 			else if (dp_exp_chs_dc == 3) {
2855:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
2856:src/xeq.c     **** 				if (emax_minus > emax_plus)
2857:src/xeq.c     **** 					emax = emax_minus;
2858:src/xeq.c     **** 				else
2859:src/xeq.c     **** 					emax = emax_plus;
2860:src/xeq.c     **** 			}
2861:src/xeq.c     **** 			else {
2862:src/xeq.c     **** 				if (dp_exp_chs_dc == 2 && !was_digit_entered)
2863:src/xeq.c     **** 					return;
2864:src/xeq.c     **** 				if (*p == 'D')
2865:src/xeq.c     **** 					emax = emax_minus;
2866:src/xeq.c     **** 				else
2867:src/xeq.c     **** 					emax = emax_plus;
2868:src/xeq.c     **** 			}
2869:src/xeq.c     **** 		}
2870:src/xeq.c     **** 		else if (flag_D && exp_chs_dc != exp_chs_ds) {
2871:src/xeq.c     **** 			if (exp_chs_ds == 0) {
2872:src/xeq.c     **** 				// Limit exponents so sign change is always legal
2873:src/xeq.c     **** 				if (emax_minus < emax_plus)
2874:src/xeq.c     **** 					emax = emax_minus;
2875:src/xeq.c     **** 				else
2876:src/xeq.c     **** 					emax = emax_plus;
2877:src/xeq.c     **** 			}
2878:src/xeq.c     **** 			else if (exp_chs_ds == 3) {
2879:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
2880:src/xeq.c     **** 				if (emax_minus > emax_plus)
2881:src/xeq.c     **** 					emax = emax_minus;
2882:src/xeq.c     **** 				else
ARM GAS  /tmp/ccK8IvWa.s 			page 61


2883:src/xeq.c     **** 					emax = emax_plus;
2884:src/xeq.c     **** 			}
2885:src/xeq.c     **** 			else {
2886:src/xeq.c     **** 				if (exp_chs_ds == 2 && !was_digit_entered)
2887:src/xeq.c     **** 					return;
2888:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2889:src/xeq.c     **** 				if (*p == 'D')
2890:src/xeq.c     **** #else
2891:src/xeq.c     **** 				if (*p == '-')
2892:src/xeq.c     **** #endif
2893:src/xeq.c     **** 					emax = emax_minus;
2894:src/xeq.c     **** 				else
2895:src/xeq.c     **** 					emax = emax_plus;
2896:src/xeq.c     **** 			}
2897:src/xeq.c     **** 		}
2898:src/xeq.c     **** 		else {
2899:src/xeq.c     **** 			if (exp_chs_dc == 0) {
2900:src/xeq.c     **** 				// Limit exponents so sign change is always legal
2901:src/xeq.c     **** 				if (emax_minus < emax_plus)
2902:src/xeq.c     **** 					emax = emax_minus;
2903:src/xeq.c     **** 				else
2904:src/xeq.c     **** 					emax = emax_plus;
2905:src/xeq.c     **** 			}
2906:src/xeq.c     **** 			else if (exp_chs_dc == 3) {
2907:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
2908:src/xeq.c     **** 				if (emax_minus > emax_plus)
2909:src/xeq.c     **** 					emax = emax_minus;
2910:src/xeq.c     **** 				else
2911:src/xeq.c     **** 					emax = emax_plus;
2912:src/xeq.c     **** 			}
2913:src/xeq.c     **** 			else {
2914:src/xeq.c     **** 				if (exp_chs_dc == 2 && !was_digit_entered)
2915:src/xeq.c     **** 					return;
2916:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2917:src/xeq.c     **** 				if (*p == 'D')
2918:src/xeq.c     **** #else
2919:src/xeq.c     **** 				if (*p == '-')
2920:src/xeq.c     **** #endif
2921:src/xeq.c     **** 					emax = emax_minus;
2922:src/xeq.c     **** 				else
2923:src/xeq.c     **** 					emax = emax_plus;
2924:src/xeq.c     **** 			}
2925:src/xeq.c     **** 		}
2926:src/xeq.c     **** 	}
2927:src/xeq.c     **** 
2928:src/xeq.c     **** do_not_check_limits:
2929:src/xeq.c     **** #ifdef SHIFT_EXPONENT
2930:src/xeq.c     **** #  ifdef LARGE_EXPONENT_ENTRY
2931:src/xeq.c     **** 	p++;
2932:src/xeq.c     **** #  else
2933:src/xeq.c     **** 	if (*p == '-')
2934:src/xeq.c     **** 		p++;
2935:src/xeq.c     **** #  endif
2936:src/xeq.c     **** 	/* Check if the current exponent exceeds the range.
2937:src/xeq.c     **** 	 * If so, shift it back until it doesn't.
2938:src/xeq.c     **** 	 * Also remove leading zeros.
2939:src/xeq.c     **** 	 */
ARM GAS  /tmp/ccK8IvWa.s 			page 62


2940:src/xeq.c     **** 	while (s_to_i(p) > emax || *p == '0') {
2941:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
2942:src/xeq.c     **** 			p[i] = p[i + 1];
2943:src/xeq.c     **** 		CmdLineLength--;
2944:src/xeq.c     **** 	}
2945:src/xeq.c     **** #else
2946:src/xeq.c     **** #  ifdef LARGE_EXPONENT_ENTRY
2947:src/xeq.c     **** 	negative = (*p == 'D');
2948:src/xeq.c     **** 	p++;
2949:src/xeq.c     **** #  else
2950:src/xeq.c     **** 	if (*p == '-') {
2951:src/xeq.c     **** 		p++;
2952:src/xeq.c     **** 		negative = 1;
2953:src/xeq.c     **** 	}
2954:src/xeq.c     **** 	else negative = 0;
2955:src/xeq.c     **** #  endif
2956:src/xeq.c     **** 	// Display a warning if the exponent is out of range.
2957:src/xeq.c     **** 	if ((i = s_to_i(p)) > emax) {
2958:src/xeq.c     **** 		if (was_digit_entered) {
2959:src/xeq.c     **** 			CmdLineLength--;
2960:src/xeq.c     **** 			if (large_exp_entry && dbl ? i > 9999 : i > 999) {
2961:src/xeq.c     **** 				report_warn(ERR_TOO_LONG);
2962:src/xeq.c     **** 				return;
2963:src/xeq.c     **** 			}
2964:src/xeq.c     **** 		}
2965:src/xeq.c     **** #  ifdef LARGE_EXPONENT_ENTRY
2966:src/xeq.c     **** 		else if (('D' | 1) == 'E')
2967:src/xeq.c     **** 			Cmdline[CmdLineEex] ^= 1;
2968:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
2969:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'D';
2970:src/xeq.c     **** 		else
2971:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'E';
2972:src/xeq.c     **** #  else
2973:src/xeq.c     **** 		else if (negative) {
2974:src/xeq.c     **** 			scopy(p - 1, p);
2975:src/xeq.c     **** 			CmdLineLength--;
2976:src/xeq.c     **** 		}
2977:src/xeq.c     **** 		else {
2978:src/xeq.c     **** 			xcopy(p + 1, p, CMDLINELEN - 1 - CmdLineEex);
2979:src/xeq.c     **** 			*p = '-';
2980:src/xeq.c     **** 			CmdLineLength++;
2981:src/xeq.c     **** 		}
2982:src/xeq.c     **** #  endif
2983:src/xeq.c     **** 		if (negative)
2984:src/xeq.c     **** 			report_warn(ERR_TOO_SMALL);
2985:src/xeq.c     **** 		else
2986:src/xeq.c     **** 			report_warn(ERR_TOO_BIG);
2987:src/xeq.c     **** 	}
2988:src/xeq.c     **** #endif
2989:src/xeq.c     **** }
2990:src/xeq.c     **** 
2991:src/xeq.c     **** /* We've encountered a CHS while entering the command line.
2992:src/xeq.c     ****  */
2993:src/xeq.c     **** static void cmdlinechs(void) {
2994:src/xeq.c     **** 	if (CmdLineEex) {
2995:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2996:src/xeq.c     **** 		// 'D' instead of 'E' indicates a negative exponent.
ARM GAS  /tmp/ccK8IvWa.s 			page 63


2997:src/xeq.c     **** 		// Four-digit exponents wouldn't fit into Cmdline if we used 'E-'.
2998:src/xeq.c     **** 		if (('D' | 1) == 'E')
2999:src/xeq.c     **** 			Cmdline[CmdLineEex] ^= 1;
3000:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
3001:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'D';
3002:src/xeq.c     **** 		else
3003:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'E';
3004:src/xeq.c     **** #else
3005:src/xeq.c     **** 		const unsigned int pos = CmdLineEex + 1;
3006:src/xeq.c     **** 		if (CmdLineLength <= pos) {
3007:src/xeq.c     **** 			if (CmdLineLength < CMDLINELEN)
3008:src/xeq.c     **** 				append_cmdline('-');
3009:src/xeq.c     **** 		} else if (Cmdline[pos] == '-') {
3010:src/xeq.c     **** 			if (CmdLineLength != pos)
3011:src/xeq.c     **** 				xcopy(Cmdline + pos, Cmdline + pos + 1, CmdLineLength-pos);
3012:src/xeq.c     **** 			CmdLineLength--;
3013:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
3014:src/xeq.c     **** 			xcopy(Cmdline+pos+1, Cmdline+pos, CmdLineLength-pos);
3015:src/xeq.c     **** 			Cmdline[pos] = '-';
3016:src/xeq.c     **** 			CmdLineLength++;
3017:src/xeq.c     **** 		}
3018:src/xeq.c     **** #endif
3019:src/xeq.c     **** #if SP_EXP_ENTRY_CHS_DC == -1 || SP_EXP_ENTRY_CHS_DC == 1 \
3020:src/xeq.c     ****     || SP_EXP_ENTRY_CHS_DS == -1 || SP_EXP_ENTRY_CHS_DS == 1 \
3021:src/xeq.c     ****     || ((DP_EXP_ENTRY_CHS_DC == 1 || DP_EXP_ENTRY_CHS_DS == 1) && defined(LARGE_EXPONENT_ENTRY))
3022:src/xeq.c     **** 		exponent_adjusted(0);
3023:src/xeq.c     **** #endif
3024:src/xeq.c     **** 	} else {
3025:src/xeq.c     **** 		if (Cmdline[0] == '-') {
3026:src/xeq.c     **** 			if (CmdLineLength > 1)
3027:src/xeq.c     **** 				xcopy(Cmdline, Cmdline+1, CmdLineLength);
3028:src/xeq.c     **** 			CmdLineLength--;
3029:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
3030:src/xeq.c     **** 			xcopy(Cmdline+1, Cmdline, CmdLineLength);
3031:src/xeq.c     **** 			Cmdline[0] = '-';
3032:src/xeq.c     **** 			CmdLineLength++;
3033:src/xeq.c     **** 		}
3034:src/xeq.c     **** 	}
3035:src/xeq.c     **** }
3036:src/xeq.c     **** 
3037:src/xeq.c     **** /* Execute a tests command
3038:src/xeq.c     ****  */
3039:src/xeq.c     **** static void do_tst(int cmp, const enum tst_op op) {
3040:src/xeq.c     **** 	int a = 0;
3041:src/xeq.c     **** 	int iszero, isneg;
3042:src/xeq.c     **** 
3043:src/xeq.c     **** 	process_cmdline_set_lift();
3044:src/xeq.c     **** 
3045:src/xeq.c     **** 	if (is_intmode()) {
3046:src/xeq.c     **** 		unsigned long long int xv, yv;
3047:src/xeq.c     **** 		int xs, ys;
3048:src/xeq.c     **** 
3049:src/xeq.c     **** 		xv = extract_value(getX_int(), &xs);
3050:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
3051:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
3052:src/xeq.c     **** 			ys = 0;
3053:src/xeq.c     **** 		} else
ARM GAS  /tmp/ccK8IvWa.s 			page 64


3054:src/xeq.c     **** 			yv = extract_value(get_reg_n_int(cmp), &ys);
3055:src/xeq.c     **** 
3056:src/xeq.c     **** 		if (xv == 0 && yv == 0)
3057:src/xeq.c     **** 			iszero = 1;
3058:src/xeq.c     **** 		else
3059:src/xeq.c     **** 			iszero = (xv == yv) && (xs == ys);
3060:src/xeq.c     **** 
3061:src/xeq.c     **** 		if (xs == ys) {		// same sign
3062:src/xeq.c     **** 			if (xs)		// both negative
3063:src/xeq.c     **** 				isneg = xv > yv;
3064:src/xeq.c     **** 			else		// both positive
3065:src/xeq.c     **** 				isneg = xv < yv;
3066:src/xeq.c     **** 		} else
3067:src/xeq.c     **** 			isneg = xs;	// opposite signs
3068:src/xeq.c     **** 	} else {
3069:src/xeq.c     **** 		decNumber t, x, r;
3070:src/xeq.c     **** 
3071:src/xeq.c     **** 		getX(&x);
3072:src/xeq.c     **** 		if (decNumberIsNaN(&x))
3073:src/xeq.c     **** 			goto flse;
3074:src/xeq.c     **** 
3075:src/xeq.c     **** 		getRegister(&t, cmp);
3076:src/xeq.c     **** 		if (decNumberIsNaN(&t))
3077:src/xeq.c     **** 			goto flse;
3078:src/xeq.c     **** 
3079:src/xeq.c     **** 		if (op == TST_APX) {
3080:src/xeq.c     **** 			decNumberRnd(&x, &x);
3081:src/xeq.c     **** 			if (cmp < CONST_REG_BASE)
3082:src/xeq.c     **** 				decNumberRnd(&t, &t);
3083:src/xeq.c     **** 		}
3084:src/xeq.c     **** 		dn_compare(&r, &x, &t);
3085:src/xeq.c     **** 		iszero = dn_eq0(&r);
3086:src/xeq.c     **** 		isneg = decNumberIsNegative(&r);
3087:src/xeq.c     **** 	}
3088:src/xeq.c     **** 
3089:src/xeq.c     **** 	switch (op) {
3090:src/xeq.c     **** 	case TST_APX:
3091:src/xeq.c     **** 	case TST_EQ:	a = iszero;		break;
3092:src/xeq.c     **** 	case TST_NE:	a = !iszero;		break;
3093:src/xeq.c     **** 	case TST_LT:	a = isneg && !iszero;	break;
3094:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
3095:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
3096:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
3097:src/xeq.c     **** 	default:	a = 0;			break;
3098:src/xeq.c     **** 	}
3099:src/xeq.c     **** 
3100:src/xeq.c     **** flse:	fin_tst(a);
3101:src/xeq.c     **** }
3102:src/xeq.c     **** 
3103:src/xeq.c     **** void check_zero(enum nilop op) {
3104:src/xeq.c     **** 	int neg;
3105:src/xeq.c     **** 	int zero;
3106:src/xeq.c     **** 
3107:src/xeq.c     **** 	if (is_intmode()) {
3108:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
3109:src/xeq.c     **** 		zero = (xv == 0);
3110:src/xeq.c     **** 	} else {
ARM GAS  /tmp/ccK8IvWa.s 			page 65


3111:src/xeq.c     **** 		decNumber x;
3112:src/xeq.c     **** 		getX(&x);
3113:src/xeq.c     **** 		neg = decNumberIsNegative(&x);
3114:src/xeq.c     **** 		zero = dn_eq0(&x);
3115:src/xeq.c     **** 	}
3116:src/xeq.c     **** 	if (op == OP_Xeq_pos0)
3117:src/xeq.c     **** 		fin_tst(zero && !neg);
3118:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
3119:src/xeq.c     **** 		fin_tst(zero && neg);
3120:src/xeq.c     **** }
3121:src/xeq.c     **** 
3122:src/xeq.c     **** void cmdtest(unsigned int arg, enum rarg op) {
3123:src/xeq.c     **** 	do_tst(arg, (enum tst_op)(op - RARG_TEST_EQ));
3124:src/xeq.c     **** }
3125:src/xeq.c     **** 
3126:src/xeq.c     **** static void do_ztst(const decNumber *re, const decNumber *im, enum tst_op op) {
3127:src/xeq.c     **** 	decNumber x, y;
3128:src/xeq.c     **** 
3129:src/xeq.c     **** 	process_cmdline_set_lift();
3130:src/xeq.c     **** 	if (is_intmode()) {
3131:src/xeq.c     **** 		bad_mode_error();
3132:src/xeq.c     **** 		return;
3133:src/xeq.c     **** 	}
3134:src/xeq.c     **** 	getXY(&x, &y);
3135:src/xeq.c     **** 	if (decNumberIsNaN(&x) || decNumberIsNaN(&y) || decNumberIsNaN(re) || decNumberIsNaN(im)) {
3136:src/xeq.c     **** 		fin_tst(0);
3137:src/xeq.c     **** 		return;
3138:src/xeq.c     **** 	}
3139:src/xeq.c     **** 	fin_tst((op == TST_EQ) == (dn_eq(&x, re) && dn_eq(&y, im)));
3140:src/xeq.c     **** }
3141:src/xeq.c     **** 
3142:src/xeq.c     **** void cmdztest(unsigned int arg, enum rarg op) {
3143:src/xeq.c     **** 	decNumber re, im;
3144:src/xeq.c     **** 	getRegister(&re, arg);
3145:src/xeq.c     **** 	getRegister(&im, arg + 1);
3146:src/xeq.c     **** 	do_ztst(&re, &im, (enum tst_op)(op - RARG_TEST_ZEQ));
3147:src/xeq.c     **** }
3148:src/xeq.c     **** 
3149:src/xeq.c     **** static int incdec(unsigned int arg, int inc) {
3150:src/xeq.c     **** 	if (is_intmode()) {
3151:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
3152:src/xeq.c     **** 		int xs;
3153:src/xeq.c     **** 		unsigned long long int xv;
3154:src/xeq.c     **** 
3155:src/xeq.c     **** 		if (inc)
3156:src/xeq.c     **** 			x = intAdd(x, 1LL);
3157:src/xeq.c     **** 		else
3158:src/xeq.c     **** 			x = intSubtract(x, 1LL);
3159:src/xeq.c     **** 		set_reg_n_int(arg, x);
3160:src/xeq.c     **** 
3161:src/xeq.c     **** 		xv = extract_value(x, &xs);
3162:src/xeq.c     **** 		return xv != 0;
3163:src/xeq.c     **** 	} else {
3164:src/xeq.c     **** 		decNumber x, y;
3165:src/xeq.c     **** 
3166:src/xeq.c     **** 		getRegister(&x, arg);
3167:src/xeq.c     **** 		if (inc)
ARM GAS  /tmp/ccK8IvWa.s 			page 66


3168:src/xeq.c     **** 			dn_inc(&x);
3169:src/xeq.c     **** 		else
3170:src/xeq.c     **** 			dn_dec(&x);
3171:src/xeq.c     **** 		setRegister(arg, &x);
3172:src/xeq.c     **** 		decNumberTrunc(&y, &x);
3173:src/xeq.c     **** 		return ! dn_eq0(&y);
3174:src/xeq.c     **** 	}
3175:src/xeq.c     **** }
3176:src/xeq.c     **** 
3177:src/xeq.c     **** void cmdlincdec(unsigned int arg, enum rarg op) {
3178:src/xeq.c     **** 	incdec(arg, op == RARG_INC);
3179:src/xeq.c     **** }
3180:src/xeq.c     **** 
3181:src/xeq.c     **** void cmdloopz(unsigned int arg, enum rarg op) {
3182:src/xeq.c     **** 	fin_tst(incdec(arg, op == RARG_ISZ));
3183:src/xeq.c     **** }
3184:src/xeq.c     **** 
3185:src/xeq.c     **** void cmdloop(unsigned int arg, enum rarg op) {
3186:src/xeq.c     **** 	if (is_intmode()) {
3187:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
3188:src/xeq.c     **** 		int xs;
3189:src/xeq.c     **** 		unsigned long long int xv;
3190:src/xeq.c     **** 
3191:src/xeq.c     **** 		if (op == RARG_ISG || op == RARG_ISE)
3192:src/xeq.c     **** 			x = intAdd(x, 1LL);
3193:src/xeq.c     **** 		else
3194:src/xeq.c     **** 			x = intSubtract(x, 1LL);
3195:src/xeq.c     **** 		set_reg_n_int(arg, x);
3196:src/xeq.c     **** 
3197:src/xeq.c     **** 		xv = extract_value(x, &xs);
3198:src/xeq.c     **** 		if (op == RARG_ISG)
3199:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
3200:src/xeq.c     **** 		else if (op == RARG_DSE)
3201:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
3202:src/xeq.c     **** 		else if (op == RARG_ISE)
3203:src/xeq.c     **** 			fin_tst(! (xs == 0 || xv == 0));	// >= 0
3204:src/xeq.c     **** 		else // if (op == RARG_DSL)
3205:src/xeq.c     **** 			fin_tst(! (xs != 0 && xv > 0));		// < 0
3206:src/xeq.c     **** 		return;
3207:src/xeq.c     **** 	} else {
3208:src/xeq.c     **** 		decNumber x, i, f, n, u;
3209:src/xeq.c     **** 
3210:src/xeq.c     **** 		getRegister(&x, arg);
3211:src/xeq.c     **** 
3212:src/xeq.c     **** 		// Break the number into the important bits
3213:src/xeq.c     **** 		// nnnnn.fffii
3214:src/xeq.c     **** 		dn_abs(&f, &x);
3215:src/xeq.c     **** 		decNumberTrunc(&n, &f);			// n = nnnnn
3216:src/xeq.c     **** 		dn_subtract(&u, &f, &n);		// u = .fffii
3217:src/xeq.c     **** 		if (decNumberIsNegative(&x))
3218:src/xeq.c     **** 			dn_minus(&n, &n);
3219:src/xeq.c     **** 		dn_mulpow10(&i, &u, 3);			// i = fff.ii
3220:src/xeq.c     **** 		decNumberTrunc(&f, &i);			// f = fff
3221:src/xeq.c     **** 		dn_subtract(&i, &i, &f);		// i = .ii
3222:src/xeq.c     **** 		dn_mul100(&x, &i);
3223:src/xeq.c     **** 		decNumberTrunc(&i, &x);			// i = ii
3224:src/xeq.c     **** 		if (dn_eq0(&i))
ARM GAS  /tmp/ccK8IvWa.s 			page 67


3225:src/xeq.c     **** 			dn_1(&i);
3226:src/xeq.c     **** 
3227:src/xeq.c     **** 		if (op == RARG_ISG || op == RARG_ISE) {
3228:src/xeq.c     **** 			dn_add(&n, &n, &i);
3229:src/xeq.c     **** 			dn_compare(&x, &f, &n);
3230:src/xeq.c     **** 			if (op == RARG_ISE)
3231:src/xeq.c     **** 				fin_tst(dn_gt0(&x));
3232:src/xeq.c     **** 			else
3233:src/xeq.c     **** 				fin_tst(dn_ge0(&x));
3234:src/xeq.c     **** 		} else {
3235:src/xeq.c     **** 			dn_subtract(&n, &n, &i);
3236:src/xeq.c     **** 			dn_compare(&x, &f, &n);
3237:src/xeq.c     **** 			if (op == RARG_DSL)
3238:src/xeq.c     **** 				fin_tst(dn_le0(&x));
3239:src/xeq.c     **** 			else
3240:src/xeq.c     **** 				fin_tst(dn_lt0(&x));
3241:src/xeq.c     **** 		}
3242:src/xeq.c     **** 
3243:src/xeq.c     **** 		// Finally rebuild the result
3244:src/xeq.c     **** 		if (decNumberIsNegative(&n)) {
3245:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
3246:src/xeq.c     **** 		} else
3247:src/xeq.c     **** 			dn_add(&x, &n, &u);
3248:src/xeq.c     **** 		setRegister(arg, &x);
3249:src/xeq.c     **** 	}
3250:src/xeq.c     **** }
3251:src/xeq.c     **** 
3252:src/xeq.c     **** 
3253:src/xeq.c     **** /* Shift a real number by 10 to the specified power
3254:src/xeq.c     ****  */
3255:src/xeq.c     **** void op_shift_digit(unsigned int n, enum rarg op) {
3256:src/xeq.c     **** 	decNumber x;
3257:src/xeq.c     **** 	int adjust = n;
3258:src/xeq.c     **** 
3259:src/xeq.c     **** 	if (is_intmode()) {
3260:src/xeq.c     **** 		bad_mode_error();
3261:src/xeq.c     **** 		return;
3262:src/xeq.c     **** 	}
3263:src/xeq.c     **** 	getX(&x);
3264:src/xeq.c     **** 	setlastX();
3265:src/xeq.c     **** 	if (decNumberIsSpecial(&x) || dn_eq0(&x))
3266:src/xeq.c     **** 		return;
3267:src/xeq.c     **** 	if (op == RARG_SRD)
3268:src/xeq.c     **** 		adjust = -adjust;
3269:src/xeq.c     **** 	x.exponent += adjust;
3270:src/xeq.c     **** 	setX(&x);
3271:src/xeq.c     **** }
3272:src/xeq.c     **** 
3273:src/xeq.c     **** 
3274:src/xeq.c     **** /* Return a pointer to the byte with the indicated flag in it.
3275:src/xeq.c     ****  * also return a byte with the relevant bit mask set up.
3276:src/xeq.c     ****  * Also, handle local flags.
3277:src/xeq.c     ****  */
3278:src/xeq.c     **** static unsigned short int *flag_word(int n, unsigned short int *mask) {
 452              		.loc 1 3278 71 is_stmt 1 view -0
 453              		.cfi_startproc
 454              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccK8IvWa.s 			page 68


 455              		@ frame_needed = 0, uses_anonymous_args = 0
 456              		@ link register save eliminated.
3279:src/xeq.c     **** 	unsigned short int *p;
 457              		.loc 1 3279 2 view .LVU139
3280:src/xeq.c     **** 
3281:src/xeq.c     **** 	if (n >= LOCAL_FLAG_BASE) {
 458              		.loc 1 3281 2 view .LVU140
 459              		.loc 1 3281 5 is_stmt 0 view .LVU141
 460 0000 6F28     		cmp	r0, #111
3278:src/xeq.c     **** 	unsigned short int *p;
 461              		.loc 1 3278 71 view .LVU142
 462 0002 10B4     		push	{r4}
 463              		.cfi_def_cfa_offset 4
 464              		.cfi_offset 4, -4
 465              		.loc 1 3281 5 view .LVU143
 466 0004 28DD     		ble	.L47
3282:src/xeq.c     **** 		n -= LOCAL_FLAG_BASE;
 467              		.loc 1 3282 3 is_stmt 1 view .LVU144
 468              		.loc 1 3282 5 is_stmt 0 view .LVU145
 469 0006 7038     		subs	r0, r0, #112
 470              	.LVL40:
3283:src/xeq.c     **** 		if (n > XROM_SYSTEM_FLAG_BASE && XromFlags.xIN) {
 471              		.loc 1 3283 3 is_stmt 1 view .LVU146
 472              		.loc 1 3283 6 is_stmt 0 view .LVU147
 473 0008 0828     		cmp	r0, #8
 474 000a 04DD     		ble	.L43
 475              		.loc 1 3283 33 discriminator 1 view .LVU148
 476 000c 154B     		ldr	r3, .L54
 477 000e 93F90120 		ldrsb	r2, [r3, #1]
 478 0012 002A     		cmp	r2, #0
 479 0014 14DB     		blt	.L42
 480              	.L43:
3284:src/xeq.c     **** 			// XROM special
3285:src/xeq.c     **** 			p = &XromFlagWord;
3286:src/xeq.c     **** 		}
3287:src/xeq.c     **** 		else if (LocalRegs & 1) {
 481              		.loc 1 3287 8 is_stmt 1 view .LVU149
 482              		.loc 1 3287 12 is_stmt 0 view .LVU150
 483 0016 144B     		ldr	r3, .L54+4
 484 0018 B3F9DE27 		ldrsh	r2, [r3, #2014]
3288:src/xeq.c     **** 			// Odd frame: flags are at end of frame
3289:src/xeq.c     **** 			p = RetStk + LocalRegs + local_levels() - 1;
 485              		.loc 1 3289 44 view .LVU151
 486 001c 134B     		ldr	r3, .L54+8
3287:src/xeq.c     **** 			// Odd frame: flags are at end of frame
 487              		.loc 1 3287 11 view .LVU152
 488 001e D407     		lsls	r4, r2, #31
 489              		.loc 1 3289 44 view .LVU153
 490 0020 1B68     		ldr	r3, [r3]
3287:src/xeq.c     **** 			// Odd frame: flags are at end of frame
 491              		.loc 1 3287 11 view .LVU154
 492 0022 1BD5     		bpl	.L44
 493              		.loc 1 3289 4 is_stmt 1 view .LVU155
 494              	.LBB1315:
 495              	.LBI1315:
 213:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 496              		.loc 1 213 5 view .LVU156
ARM GAS  /tmp/ccK8IvWa.s 			page 69


 497              	.LBB1316:
 214:src/xeq.c     **** }
 498              		.loc 1 214 2 view .LVU157
 214:src/xeq.c     **** }
 499              		.loc 1 214 57 is_stmt 0 view .LVU158
 500 0024 002A     		cmp	r2, #0
 501 0026 B8BF     		it	lt
 502 0028 33F81240 		ldrhlt	r4, [r3, r2, lsl #1]
 503              	.LBE1316:
 504              	.LBE1315:
 505              		.loc 1 3289 44 view .LVU159
 506 002c 02F10042 		add	r2, r2, #-2147483648
 507 0030 B4BF     		ite	lt
 508 0032 C4F30B04 		ubfxlt	r4, r4, #0, #12
 509              	.LBB1318:
 510              	.LBB1317:
 511 0036 0024     		movge	r4, #0
 512              	.LBE1317:
 513              	.LBE1318:
 514 0038 013A     		subs	r2, r2, #1
 515 003a 2244     		add	r2, r2, r4
 516              		.loc 1 3289 6 view .LVU160
 517 003c 03EB4203 		add	r3, r3, r2, lsl #1
 518              	.LVL41:
 519              	.L42:
3290:src/xeq.c     **** 		}
3291:src/xeq.c     **** 		else {
3292:src/xeq.c     **** 			// Even frame: Flags are at beginning of frame
3293:src/xeq.c     **** 			p = RetStk + LocalRegs + 1;
3294:src/xeq.c     **** 		}
3295:src/xeq.c     **** 	}
3296:src/xeq.c     **** 	else
3297:src/xeq.c     **** 		p = UserFlags;
3298:src/xeq.c     **** 
3299:src/xeq.c     **** 	if (mask != NULL)
 520              		.loc 1 3299 2 is_stmt 1 view .LVU161
 521              		.loc 1 3299 5 is_stmt 0 view .LVU162
 522 0040 21B1     		cbz	r1, .L46
3300:src/xeq.c     **** 		*mask = 1 << (n & 15);
 523              		.loc 1 3300 3 is_stmt 1 view .LVU163
 524              		.loc 1 3300 19 is_stmt 0 view .LVU164
 525 0042 00F00F04 		and	r4, r0, #15
 526              		.loc 1 3300 13 view .LVU165
 527 0046 0122     		movs	r2, #1
 528 0048 A240     		lsls	r2, r2, r4
 529              		.loc 1 3300 9 view .LVU166
 530 004a 0A80     		strh	r2, [r1]	@ movhi
 531              	.L46:
3301:src/xeq.c     **** 	return p + (n >> 4);
 532              		.loc 1 3301 2 is_stmt 1 view .LVU167
 533              		.loc 1 3301 16 is_stmt 0 view .LVU168
 534 004c 0011     		asrs	r0, r0, #4
 535              	.LVL42:
3302:src/xeq.c     **** }
 536              		.loc 1 3302 1 view .LVU169
 537 004e 03EB4000 		add	r0, r3, r0, lsl #1
 538 0052 5DF8044B 		ldr	r4, [sp], #4
ARM GAS  /tmp/ccK8IvWa.s 			page 70


 539              		.cfi_remember_state
 540              		.cfi_restore 4
 541              		.cfi_def_cfa_offset 0
 542 0056 7047     		bx	lr
 543              	.LVL43:
 544              	.L47:
 545              		.cfi_restore_state
3297:src/xeq.c     **** 
 546              		.loc 1 3297 5 view .LVU170
 547 0058 054B     		ldr	r3, .L54+12
 548 005a F1E7     		b	.L42
 549              	.L44:
3293:src/xeq.c     **** 		}
 550              		.loc 1 3293 4 is_stmt 1 view .LVU171
3293:src/xeq.c     **** 		}
 551              		.loc 1 3293 27 is_stmt 0 view .LVU172
 552 005c 0132     		adds	r2, r2, #1
3293:src/xeq.c     **** 		}
 553              		.loc 1 3293 6 view .LVU173
 554 005e 03EB4203 		add	r3, r3, r2, lsl #1
 555              	.LVL44:
3293:src/xeq.c     **** 		}
 556              		.loc 1 3293 6 view .LVU174
 557 0062 EDE7     		b	.L42
 558              	.L55:
 559              		.align	2
 560              	.L54:
 561 0064 00000000 		.word	XromParams
 562 0068 00000000 		.word	PersistentRam
 563 006c 00000000 		.word	RetStk
 564 0070 F0070000 		.word	PersistentRam+2032
 565              		.cfi_endproc
 566              	.LFE190:
 568              		.section	.text.intResult,"ax",%progbits
 569              		.align	1
 570              		.p2align 2,,3
 571              		.syntax unified
 572              		.thumb
 573              		.thumb_func
 574              		.fpu fpv4-sp-d16
 576              	intResult:
 577              	.LVL45:
 578              	.LFB231:
3303:src/xeq.c     **** 
3304:src/xeq.c     **** int get_user_flag(int n) {
3305:src/xeq.c     **** 	unsigned short mask;
3306:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
3307:src/xeq.c     **** 
3308:src/xeq.c     **** 	return (*f & mask)? 1 : 0;
3309:src/xeq.c     **** }
3310:src/xeq.c     **** 
3311:src/xeq.c     **** void put_user_flag(int n, int f) {
3312:src/xeq.c     **** 	if (f)	set_user_flag(n);
3313:src/xeq.c     **** 	else	clr_user_flag(n);
3314:src/xeq.c     **** }
3315:src/xeq.c     **** 
3316:src/xeq.c     **** #ifndef set_user_flag
ARM GAS  /tmp/ccK8IvWa.s 			page 71


3317:src/xeq.c     **** void set_user_flag(int n) {
3318:src/xeq.c     **** 	unsigned short mask;
3319:src/xeq.c     **** 	unsigned short *const f = flag_word(n, &mask);
3320:src/xeq.c     **** 
3321:src/xeq.c     **** 	*f |= mask;
3322:src/xeq.c     **** }
3323:src/xeq.c     **** 
3324:src/xeq.c     **** void clr_user_flag(int n) {
3325:src/xeq.c     **** 	unsigned short mask;
3326:src/xeq.c     **** 	unsigned short *const f = flag_word(n, &mask);
3327:src/xeq.c     **** 
3328:src/xeq.c     **** 	*f &= ~mask;
3329:src/xeq.c     **** }
3330:src/xeq.c     **** #endif
3331:src/xeq.c     **** 
3332:src/xeq.c     **** void cmdflag(unsigned int arg, enum rarg op) {
3333:src/xeq.c     **** 	unsigned short mask;
3334:src/xeq.c     **** 	unsigned short *const f = flag_word(arg, &mask);
3335:src/xeq.c     **** 	int flg = *f & mask;
3336:src/xeq.c     **** 
3337:src/xeq.c     **** 	switch (op) {
3338:src/xeq.c     **** 	case RARG_SF:	flg = 1;			   break;
3339:src/xeq.c     **** 	case RARG_CF:	flg = 0;			   break;
3340:src/xeq.c     **** 	case RARG_FF:	flg = flg? 0 : 1;		   break;
3341:src/xeq.c     **** 
3342:src/xeq.c     **** 	case RARG_FS:	fin_tst(flg);			   return;
3343:src/xeq.c     **** 	case RARG_FC:	fin_tst(! flg);			   return;
3344:src/xeq.c     **** 
3345:src/xeq.c     **** 	case RARG_FSC:	fin_tst(flg); flg = 0;		   break;
3346:src/xeq.c     **** 	case RARG_FSS:	fin_tst(flg); flg = 1;		   break;
3347:src/xeq.c     **** 	case RARG_FSF:	fin_tst(flg); flg = flg ? 0 : 1;   break;
3348:src/xeq.c     **** 
3349:src/xeq.c     **** 	case RARG_FCC:	fin_tst(! flg);	flg = 0;	   break;
3350:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
3351:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
3352:src/xeq.c     **** 
3353:src/xeq.c     **** 	default:
3354:src/xeq.c     **** 		return;
3355:src/xeq.c     **** 	}
3356:src/xeq.c     **** 
3357:src/xeq.c     **** 	// And write the value back
3358:src/xeq.c     **** 	if (flg)
3359:src/xeq.c     **** 		*f |= mask;
3360:src/xeq.c     **** 	else
3361:src/xeq.c     **** 		*f &= ~mask;
3362:src/xeq.c     **** 
3363:src/xeq.c     **** 	if ( arg == A_FLAG ) {
3364:src/xeq.c     **** 		dot( BIG_EQ, flg );
3365:src/xeq.c     **** 		finish_display();
3366:src/xeq.c     **** 	}
3367:src/xeq.c     **** }
3368:src/xeq.c     **** 
3369:src/xeq.c     **** /* Reset all flags to off/false
3370:src/xeq.c     ****  */
3371:src/xeq.c     **** void clrflags(enum nilop op) {
3372:src/xeq.c     **** 	xset(UserFlags, 0, sizeof(UserFlags));
3373:src/xeq.c     **** 	if (LocalRegs < 0) {
ARM GAS  /tmp/ccK8IvWa.s 			page 72


3374:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
3375:src/xeq.c     **** 	}
3376:src/xeq.c     **** }
3377:src/xeq.c     **** 
3378:src/xeq.c     **** 
3379:src/xeq.c     **** /* Integer word size
3380:src/xeq.c     ****  */
3381:src/xeq.c     **** void intws(unsigned int arg, enum rarg op) {
3382:src/xeq.c     **** 	if (is_intmode()) {
3383:src/xeq.c     **** 		int i, ss = stack_size();
3384:src/xeq.c     **** 		unsigned int oldlen = UState.int_len;
3385:src/xeq.c     **** 		long long int v;
3386:src/xeq.c     **** 
3387:src/xeq.c     **** 		for (i=0; i<ss; i++) {
3388:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
3389:src/xeq.c     **** 			UState.int_len = arg;
3390:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, mask_value(v));
3391:src/xeq.c     **** 			UState.int_len = oldlen;
3392:src/xeq.c     **** 		}
3393:src/xeq.c     **** 		v = mask_value(get_reg_n_int(regL_idx));
3394:src/xeq.c     **** 		UState.int_len = arg;
3395:src/xeq.c     **** 		set_reg_n_int(regL_idx, mask_value(v));
3396:src/xeq.c     **** 	} else
3397:src/xeq.c     **** 	    UState.int_len = arg;
3398:src/xeq.c     **** }
3399:src/xeq.c     **** 
3400:src/xeq.c     **** 
3401:src/xeq.c     **** /* Convert from a real to a fraction
3402:src/xeq.c     ****  */
3403:src/xeq.c     **** 
3404:src/xeq.c     **** void get_maxdenom(decNumber *d) {
3405:src/xeq.c     **** 	const unsigned int dm = UState.denom_max;
3406:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
3407:src/xeq.c     **** }
3408:src/xeq.c     **** 
3409:src/xeq.c     **** void op_2frac(enum nilop op) {
3410:src/xeq.c     **** 	decNumber z, n, d, t;
3411:src/xeq.c     **** 
3412:src/xeq.c     **** 	if (UState.intm) {
3413:src/xeq.c     **** 		setX_int(1);
3414:src/xeq.c     **** 		return;
3415:src/xeq.c     **** 	}
3416:src/xeq.c     **** 
3417:src/xeq.c     **** 	getY(&z);			// Stack has been lifted already
3418:src/xeq.c     **** 	decNumber2Fraction(&n, &d, &z);
3419:src/xeq.c     **** 	setXY(&d, &n);			// Set numerator and denominator
3420:src/xeq.c     **** 	if (State2.runmode) {
3421:src/xeq.c     **** 		dn_divide(&t, &n, &d);
3422:src/xeq.c     **** 		dn_compare(&n, &t, &z);
3423:src/xeq.c     **** 		if (dn_eq0(&n))
3424:src/xeq.c     **** 			DispMsg = "y/x =";
3425:src/xeq.c     **** 		else if (decNumberIsNegative(&n))
3426:src/xeq.c     **** #ifdef INCLUDE_FONT_ESCAPE
3427:src/xeq.c     **** 			DispMsg = "y/x \007\344<";
3428:src/xeq.c     **** 		else
3429:src/xeq.c     **** 			DispMsg = "y/x \007\344>";
3430:src/xeq.c     **** #else
ARM GAS  /tmp/ccK8IvWa.s 			page 73


3431:src/xeq.c     **** 			DispMsg = "y/x <";
3432:src/xeq.c     **** 		else
3433:src/xeq.c     **** 			DispMsg = "y/x >";
3434:src/xeq.c     **** #endif
3435:src/xeq.c     **** 	}
3436:src/xeq.c     **** }
3437:src/xeq.c     **** 
3438:src/xeq.c     **** void op_fracdenom(enum nilop op) {
3439:src/xeq.c     **** 	int s;
3440:src/xeq.c     **** 	unsigned long long int i;
3441:src/xeq.c     **** 
3442:src/xeq.c     **** 	i = getX_int_sgn(&s);
3443:src/xeq.c     **** 	if (i > 9999)
3444:src/xeq.c     **** 		UState.denom_max = 0;
3445:src/xeq.c     **** 	else if (i != 1)
3446:src/xeq.c     **** 		UState.denom_max = (unsigned int) i;
3447:src/xeq.c     **** 	else {
3448:src/xeq.c     **** 		setlastX();
3449:src/xeq.c     **** 		setX_int_sgn(UState.denom_max, 0);
3450:src/xeq.c     **** 	}
3451:src/xeq.c     **** }
3452:src/xeq.c     **** 
3453:src/xeq.c     **** 
3454:src/xeq.c     **** /*  Switching from an integer mode to real mode
3455:src/xeq.c     ****  *  We convert the stack and LastX 
3456:src/xeq.c     ****  */
3457:src/xeq.c     **** static const unsigned short int StackRegMask[] = { 0x10f, 0x1ff };
3458:src/xeq.c     **** 
3459:src/xeq.c     **** void op_float(enum nilop op) {
3460:src/xeq.c     **** 
3461:src/xeq.c     **** 	if (is_intmode()) {
3462:src/xeq.c     **** 		int i;
3463:src/xeq.c     **** 		int mask = StackRegMask[UState.stack_depth];
3464:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
3465:src/xeq.c     **** 			if (mask & 1) {
3466:src/xeq.c     **** 				// register belongs to stack
3467:src/xeq.c     **** 				register_from_int(i, i, op == OP_FLOAT_XIN);
3468:src/xeq.c     **** 			}
3469:src/xeq.c     **** 			else if (is_dblmode()) {
3470:src/xeq.c     **** 				// expand the other registers which have been left
3471:src/xeq.c     **** 				// in decimal64 format by the integer mode switch
3472:src/xeq.c     **** 				packed128_from_packed(&(get_reg_n(i)->d), Regs + i);
3473:src/xeq.c     **** 			}
3474:src/xeq.c     **** 		}
3475:src/xeq.c     **** 	}
3476:src/xeq.c     **** 	if (op != OP_FLOAT_XIN && op != OP_FLOAT_RCLM) {
3477:src/xeq.c     **** 		UState.fract = 0;
3478:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
3479:src/xeq.c     **** 	}
3480:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
3481:src/xeq.c     **** }
3482:src/xeq.c     **** 
3483:src/xeq.c     **** /*  Switch to integer mode.
3484:src/xeq.c     ****  *  We convert the stack and LastX
3485:src/xeq.c     ****  */
3486:src/xeq.c     **** static void switch_to_int(void) {
3487:src/xeq.c     **** 	int i;
ARM GAS  /tmp/ccK8IvWa.s 			page 74


3488:src/xeq.c     **** 	int mask = StackRegMask[UState.stack_depth];
3489:src/xeq.c     **** 	const int dbl = is_dblmode();
3490:src/xeq.c     **** 
3491:src/xeq.c     **** 	for (i = regK_idx; i >= regX_idx; --i, mask <<= 1) {
3492:src/xeq.c     **** 		if (mask & 0x800) {
3493:src/xeq.c     **** 			// register belongs to stack
3494:src/xeq.c     **** 			int_from_register(i, i);
3495:src/xeq.c     **** 		}
3496:src/xeq.c     **** 		else if (dbl) {
3497:src/xeq.c     **** 			// compress the other registers to save them while integer mode is active
3498:src/xeq.c     **** 			packed_from_packed128(Regs + i, &(get_reg_n(i)->d));
3499:src/xeq.c     **** 		}
3500:src/xeq.c     **** 	}
3501:src/xeq.c     **** }
3502:src/xeq.c     **** 
3503:src/xeq.c     **** static void set_base(unsigned int b) {
3504:src/xeq.c     **** 	UState.int_base = b - 1;
3505:src/xeq.c     **** 	if (!is_intmode())
3506:src/xeq.c     **** 		switch_to_int();
3507:src/xeq.c     **** }
3508:src/xeq.c     **** 
3509:src/xeq.c     **** void set_int_base(unsigned int arg, enum rarg op) {
3510:src/xeq.c     **** 	if (arg < 2) {
3511:src/xeq.c     **** 		if (arg == 0)
3512:src/xeq.c     **** 			op_float(OP_FLOAT);
3513:src/xeq.c     **** 		else
3514:src/xeq.c     **** 			op_fract(OP_FRACT);
3515:src/xeq.c     **** 	} else
3516:src/xeq.c     **** 		set_base(arg);
3517:src/xeq.c     **** }
3518:src/xeq.c     **** 
3519:src/xeq.c     **** 
3520:src/xeq.c     **** void op_fract(enum nilop op) {
3521:src/xeq.c     **** 	op_float(OP_FLOAT);
3522:src/xeq.c     **** 	UState.fract = 1;
3523:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
3524:src/xeq.c     **** 		UState.improperfrac = 1;
3525:src/xeq.c     **** 	else if (op == OP_FRACPROPER)
3526:src/xeq.c     **** 		UState.improperfrac = 0;
3527:src/xeq.c     **** }
3528:src/xeq.c     **** 
3529:src/xeq.c     **** #ifdef INCLUDE_USER_MODE
3530:src/xeq.c     **** /* Save and restore user state.
3531:src/xeq.c     ****  */
3532:src/xeq.c     **** void cmdsavem(unsigned int arg, enum rarg op) {
3533:src/xeq.c     **** 	xcopy( get_reg_n(arg), &UState, sizeof(unsigned long long int) );
3534:src/xeq.c     **** }
3535:src/xeq.c     **** 
3536:src/xeq.c     **** void cmdrestm(unsigned int arg, enum rarg op) {
3537:src/xeq.c     **** 	const int dbl = is_dblmode();
3538:src/xeq.c     **** 	const int intm = is_intmode();
3539:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
3540:src/xeq.c     **** 
3541:src/xeq.c     **** 	// Fix things
3542:src/xeq.c     **** 	if ( UState.contrast == 0 )
3543:src/xeq.c     **** 		UState.contrast = 6;
3544:src/xeq.c     **** 
ARM GAS  /tmp/ccK8IvWa.s 			page 75


3545:src/xeq.c     **** 	if (intm != is_intmode()) {
3546:src/xeq.c     **** 		// Switch back to decimal or integer mode
3547:src/xeq.c     **** 		UState.intm = intm;
3548:src/xeq.c     **** 		if (intm)
3549:src/xeq.c     **** 			op_float(OP_FLOAT_RCLM);
3550:src/xeq.c     **** 		else
3551:src/xeq.c     **** 			switch_to_int();
3552:src/xeq.c     **** 	}
3553:src/xeq.c     **** 	if (! is_intmode() && dbl != is_dblmode()) {
3554:src/xeq.c     **** 		// Switch back to double/single precision
3555:src/xeq.c     **** 		UState.mode_double = dbl;
3556:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
3557:src/xeq.c     **** 	}
3558:src/xeq.c     **** }
3559:src/xeq.c     **** #endif
3560:src/xeq.c     **** 
3561:src/xeq.c     **** /* Process a single digit.
3562:src/xeq.c     ****  */
3563:src/xeq.c     **** #if 0 // unused
3564:src/xeq.c     **** static int is_digit(const char c) {
3565:src/xeq.c     **** 	if (c >= '0' && c <= '9')
3566:src/xeq.c     **** 		return 1;
3567:src/xeq.c     **** 	return 0;
3568:src/xeq.c     **** }
3569:src/xeq.c     **** 
3570:src/xeq.c     **** static int is_xdigit(const char c) {
3571:src/xeq.c     **** 	if (is_digit(c) || (c >= 'A' && c <= 'F'))
3572:src/xeq.c     **** 		return 1;
3573:src/xeq.c     **** 	return 0;
3574:src/xeq.c     **** }
3575:src/xeq.c     **** #endif
3576:src/xeq.c     **** 
3577:src/xeq.c     **** static void digit(unsigned int c) {
3578:src/xeq.c     **** 	const int intm = is_intmode();
3579:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
3580:src/xeq.c     **** 
3581:src/xeq.c     **** 	if (Cmdline[0] == '-')
3582:src/xeq.c     **** 		lim++;
3583:src/xeq.c     **** 	if (intm) {
3584:src/xeq.c     **** 		if (c >= int_base()) {
3585:src/xeq.c     **** 			report_warn(ERR_DIGIT);
3586:src/xeq.c     **** 			return;
3587:src/xeq.c     **** 		}
3588:src/xeq.c     **** 	} else {
3589:src/xeq.c     **** 		if (c >= 10) {
3590:src/xeq.c     **** 			report_warn(ERR_DIGIT);
3591:src/xeq.c     **** 			return;
3592:src/xeq.c     **** 		}
3593:src/xeq.c     **** 
3594:src/xeq.c     **** 		if (CmdLineEex) {
3595:src/xeq.c     **** 			lim = CMDLINELEN;
3596:src/xeq.c     **** #ifdef SHIFT_EXPONENT
3597:src/xeq.c     **** 			if (CmdLineLength >= lim) {
3598:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
3599:src/xeq.c     **** 
3600:src/xeq.c     **** 				if (*p == '-')
3601:src/xeq.c     **** 					p++;
ARM GAS  /tmp/ccK8IvWa.s 			page 76


3602:src/xeq.c     **** 				while (p < &Cmdline[CMDLINELEN]) {
3603:src/xeq.c     **** 					p[0] = p[1];
3604:src/xeq.c     **** 					p++;
3605:src/xeq.c     **** 				}
3606:src/xeq.c     **** 				CmdLineLength--;
3607:src/xeq.c     **** 			}
3608:src/xeq.c     **** #endif
3609:src/xeq.c     **** 		}
3610:src/xeq.c     **** 		else {
3611:src/xeq.c     **** 			lim += CmdLineDot;
3612:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
3613:src/xeq.c     **** 			if (CmdLineDot >= 2) {
3614:src/xeq.c     **** #  ifdef FRACTION_ENTRY_OVERFLOW_LEFT
3615:src/xeq.c     **** 				// Make space for the minus sign
3616:src/xeq.c     **** 				lim = CMDLINELEN - (Cmdline[0] != '-');
3617:src/xeq.c     **** #  elif defined(INCLUDE_DOUBLEDOT_FRACTIONS)
3618:src/xeq.c     **** 				lim += 1 + (find_char(Cmdline, '.')[1] == '.');
3619:src/xeq.c     **** #  else
3620:src/xeq.c     **** 				lim++;
3621:src/xeq.c     **** #  endif
3622:src/xeq.c     **** 			}
3623:src/xeq.c     **** #endif
3624:src/xeq.c     **** 		}
3625:src/xeq.c     **** 	}
3626:src/xeq.c     **** 	if (CmdLineLength >= lim
3627:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
3628:src/xeq.c     **** 		report_warn(ERR_TOO_LONG);
3629:src/xeq.c     **** 		return;
3630:src/xeq.c     **** 	}
3631:src/xeq.c     **** 
3632:src/xeq.c     **** 	if (c >= 10)
3633:src/xeq.c     **** 		append_cmdline(c - 10 + 'A');
3634:src/xeq.c     **** 	else {
3635:src/xeq.c     **** 		// Leading zeros in the exponent aren't visible to the user,
3636:src/xeq.c     **** 		// and they're removed automatically if digits are shifted,
3637:src/xeq.c     **** 		// so it's more consistent if they can't be entered, either.
3638:src/xeq.c     **** 		if (c == 0 && CmdLineEex) {
3639:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
3640:src/xeq.c     **** 				return;
3641:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3642:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'D')
3643:src/xeq.c     **** 				return;
3644:src/xeq.c     **** #else
3645:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == '-')
3646:src/xeq.c     **** 				return;
3647:src/xeq.c     **** #endif
3648:src/xeq.c     **** 		}
3649:src/xeq.c     **** 
3650:src/xeq.c     **** 		append_cmdline(c + '0');
3651:src/xeq.c     **** 
3652:src/xeq.c     **** 		if (CmdLineEex)
3653:src/xeq.c     **** 			exponent_adjusted(1);
3654:src/xeq.c     **** 	}
3655:src/xeq.c     **** }
3656:src/xeq.c     **** 
3657:src/xeq.c     **** 
3658:src/xeq.c     **** void set_entry() {
ARM GAS  /tmp/ccK8IvWa.s 			page 77


3659:src/xeq.c     **** 	if (!Running && !XromRunning)
3660:src/xeq.c     **** 		State.entryp = 1;
3661:src/xeq.c     **** }
3662:src/xeq.c     **** 
3663:src/xeq.c     **** 
3664:src/xeq.c     **** /* Decode and process the specials.  These are niladic functions and
3665:src/xeq.c     ****  * commands with non-standard stack operation.
3666:src/xeq.c     ****  */
3667:src/xeq.c     **** static void specials(const opcode op) {
3668:src/xeq.c     **** 	int opm = argKIND(op);
3669:src/xeq.c     **** 
3670:src/xeq.c     **** 	switch (opm) {
3671:src/xeq.c     **** 	case OP_0:	case OP_1:	case OP_2:
3672:src/xeq.c     **** 	case OP_3:	case OP_4:	case OP_5:
3673:src/xeq.c     **** 	case OP_6:	case OP_7:	case OP_8:
3674:src/xeq.c     **** 	case OP_9:	case OP_A:	case OP_B:
3675:src/xeq.c     **** 	case OP_C:	case OP_D:	case OP_E:
3676:src/xeq.c     **** 	case OP_F:
3677:src/xeq.c     **** 		digit(opm - OP_0);
3678:src/xeq.c     **** 		break;
3679:src/xeq.c     **** 
3680:src/xeq.c     **** 	case OP_DOT:
3681:src/xeq.c     **** 		if (is_intmode())
3682:src/xeq.c     **** 			break;
3683:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
3684:src/xeq.c     **** 		if (CmdLineDot < 2 && !CmdLineEex && CmdLineLength < 13 + CmdLineDot) {
3685:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
3686:src/xeq.c     **** #else
3687:src/xeq.c     **** #  if defined(PRETTY_FRACTION_ENTRY)
3688:src/xeq.c     **** 		if (CmdLineDot < 2 && !CmdLineEex && CmdLineLength < 12 + 2*CmdLineDot) {
3689:src/xeq.c     **** #  else
3690:src/xeq.c     **** 		if (CmdLineDot < 2 && !CmdLineEex && CmdLineLength < 12 + CmdLineDot) {
3691:src/xeq.c     **** #  endif
3692:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '.'
3693:src/xeq.c     ****                             || Cmdline[CmdLineLength-1] == '-')
3694:src/xeq.c     **** #endif
3695:src/xeq.c     **** 				digit(0);
3696:src/xeq.c     **** 			CmdLineDot++;
3697:src/xeq.c     **** 			append_cmdline('.');
3698:src/xeq.c     **** 		}
3699:src/xeq.c     **** 		break;
3700:src/xeq.c     **** 
3701:src/xeq.c     **** 	case OP_EEX:
3702:src/xeq.c     **** 		if (is_intmode())
3703:src/xeq.c     **** 			break;
3704:src/xeq.c     **** 		else {
3705:src/xeq.c     **** #if INCLUDE_EEX_PI == 2
3706:src/xeq.c     **** 			const int eex_pi = 1;
3707:src/xeq.c     **** #elif INCLUDE_EEX_PI == 1
3708:src/xeq.c     **** 			const int eex_pi = get_user_flag(regL_idx);
3709:src/xeq.c     **** #else
3710:src/xeq.c     **** 			const int eex_pi = 0;
3711:src/xeq.c     **** #endif
3712:src/xeq.c     **** 
3713:src/xeq.c     **** 			if (CmdLineDot == 2) {
3714:src/xeq.c     **** 				if (eex_pi) {
3715:src/xeq.c     **** 					// fraction entered (two dots); execute ENTER and enter pi
ARM GAS  /tmp/ccK8IvWa.s 			page 78


3716:src/xeq.c     **** 					if (is_bad_cmdline()) {
3717:src/xeq.c     **** 						if (Running || XromRunning)
3718:src/xeq.c     **** 							report_err(ERR_DOMAIN);
3719:src/xeq.c     **** 						break;
3720:src/xeq.c     **** 					}
3721:src/xeq.c     **** 					process_cmdline();
3722:src/xeq.c     **** 					lift();
3723:src/xeq.c     **** 					copyreg(StackBase, get_const(OP_PI, is_dblmode()));
3724:src/xeq.c     **** 					set_lift();
3725:src/xeq.c     **** 				}
3726:src/xeq.c     **** 				break;
3727:src/xeq.c     **** 			}
3728:src/xeq.c     **** 			if (CmdLineEex || CmdLineLength >= CMDLINELEN)
3729:src/xeq.c     **** 				break;
3730:src/xeq.c     **** 			if (eex_pi && CmdLineLength == 0) {
3731:src/xeq.c     **** 				// empty command line: enter pi
3732:src/xeq.c     **** 				lift_if_enabled();
3733:src/xeq.c     **** 				copyreg(StackBase, get_const(OP_PI, is_dblmode()));
3734:src/xeq.c     **** 				set_lift();
3735:src/xeq.c     **** 				break;
3736:src/xeq.c     **** 			}
3737:src/xeq.c     **** #if !(FRACTION_MODE_INPUT & 1)
3738:src/xeq.c     **** 			if (UState.fract)
3739:src/xeq.c     **** 				break;
3740:src/xeq.c     **** #endif
3741:src/xeq.c     **** 			if (CmdLineLength == 0)
3742:src/xeq.c     **** 				digit(1);
3743:src/xeq.c     **** 			CmdLineEex = CmdLineLength;
3744:src/xeq.c     **** 			append_cmdline('E');
3745:src/xeq.c     **** 		}
3746:src/xeq.c     **** 		break;
3747:src/xeq.c     **** 
3748:src/xeq.c     **** 	case OP_CHS:
3749:src/xeq.c     **** 		if (CmdLineLength)
3750:src/xeq.c     **** 			cmdlinechs();
3751:src/xeq.c     **** 		else if (is_intmode()) {
3752:src/xeq.c     **** 			setX_int(intChs(getX_int()));
3753:src/xeq.c     **** 			set_lift();
3754:src/xeq.c     **** 		} else {
3755:src/xeq.c     **** 			decNumber x, r;
3756:src/xeq.c     **** 
3757:src/xeq.c     **** 			getX(&x);
3758:src/xeq.c     **** 			dn_minus(&r, &x);
3759:src/xeq.c     **** 			setX(&r);
3760:src/xeq.c     **** 			set_lift();
3761:src/xeq.c     **** 		}
3762:src/xeq.c     **** 		break;
3763:src/xeq.c     **** 
3764:src/xeq.c     **** 	case OP_CLX:
3765:src/xeq.c     **** 		if (Running)
3766:src/xeq.c     **** 			illegal(op);
3767:src/xeq.c     **** 		else if (CmdLineLength) {
3768:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3769:src/xeq.c     **** 			if (CmdLineEex != 0 && Cmdline[CmdLineLength-1] == 'D') {
3770:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
3771:src/xeq.c     **** 				break;
3772:src/xeq.c     **** 			}
ARM GAS  /tmp/ccK8IvWa.s 			page 79


3773:src/xeq.c     **** #endif
3774:src/xeq.c     **** 			CmdLineLength--;
3775:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
3776:src/xeq.c     **** 				CmdLineEex = 0;
3777:src/xeq.c     **** 			else if (Cmdline[CmdLineLength] == '.')
3778:src/xeq.c     **** 				CmdLineDot--;
3779:src/xeq.c     **** 		} else
3780:src/xeq.c     **** 			clrx(OP_rCLX);
3781:src/xeq.c     **** 		break;
3782:src/xeq.c     **** 
3783:src/xeq.c     **** 	case OP_ENTER:
3784:src/xeq.c     **** 		process_cmdline();
3785:src/xeq.c     **** 		lift();
3786:src/xeq.c     **** 		clr_lift();
3787:src/xeq.c     **** 		break;
3788:src/xeq.c     **** 
3789:src/xeq.c     **** 	case OP_SIGMAPLUS:
3790:src/xeq.c     **** 	case OP_SIGMAMINUS:
3791:src/xeq.c     **** 		if (is_intmode()) {
3792:src/xeq.c     **** 			bad_mode_error();
3793:src/xeq.c     **** 			break;
3794:src/xeq.c     **** 		}
3795:src/xeq.c     **** 		process_cmdline();
3796:src/xeq.c     **** 		clr_lift();
3797:src/xeq.c     **** 		setlastX();
3798:src/xeq.c     **** 		if (opm == OP_SIGMAPLUS)
3799:src/xeq.c     **** 			sigma_plus();
3800:src/xeq.c     **** 		else
3801:src/xeq.c     **** 			sigma_minus();
3802:src/xeq.c     **** 		sigma_val(OP_sigmaN);
3803:src/xeq.c     **** 		break;
3804:src/xeq.c     **** 
3805:src/xeq.c     **** 	// Conditional tests vs registers....
3806:src/xeq.c     **** 	case OP_Xeq0:	case OP_Xlt0:	case OP_Xgt0:
3807:src/xeq.c     **** 	case OP_Xne0:	case OP_Xle0:	case OP_Xge0:
3808:src/xeq.c     **** 	case OP_Xapx0:
3809:src/xeq.c     **** 		do_tst(CONST_REG_BASE + OP_ZERO, (enum tst_op)(opm - OP_Xeq0));
3810:src/xeq.c     **** 		break;
3811:src/xeq.c     **** 	case OP_Zeq0: case OP_Zne0:
3812:src/xeq.c     **** 		do_ztst(&const_0, &const_0, (enum tst_op)(opm - OP_Zeq0));
3813:src/xeq.c     **** 		break;
3814:src/xeq.c     **** 
3815:src/xeq.c     **** 	case OP_Xeq1:	case OP_Xlt1:	case OP_Xgt1:
3816:src/xeq.c     **** 	case OP_Xne1:	case OP_Xle1:	case OP_Xge1:
3817:src/xeq.c     **** 	case OP_Xapx1:
3818:src/xeq.c     **** 		do_tst(CONST_REG_BASE + OP_ONE, (enum tst_op)(opm - OP_Xeq1));
3819:src/xeq.c     **** 		break;
3820:src/xeq.c     **** 	case OP_Zeq1:	case OP_Zne1:
3821:src/xeq.c     **** 		do_ztst(&const_1, &const_0, (enum tst_op)(opm - OP_Zeq1));
3822:src/xeq.c     **** 		break;
3823:src/xeq.c     **** 	case OP_Zeqi:	case OP_Znei:
3824:src/xeq.c     **** 		do_ztst(&const_0, &const_1, (enum tst_op)(opm - OP_Zeqi));
3825:src/xeq.c     **** 		break;
3826:src/xeq.c     **** 
3827:src/xeq.c     **** 	default:
3828:src/xeq.c     **** 		illegal(op);
3829:src/xeq.c     **** 	}
ARM GAS  /tmp/ccK8IvWa.s 			page 80


3830:src/xeq.c     **** }
3831:src/xeq.c     **** 
3832:src/xeq.c     **** enum trig_modes get_trig_mode(void) {
3833:src/xeq.c     **** 	if (State2.cmplx || XromFlags.xIN)
3834:src/xeq.c     **** 		return TRIG_RAD;
3835:src/xeq.c     **** 	//if (State2.hyp)	return TRIG_RAD;
3836:src/xeq.c     **** 	return (enum trig_modes) UState.trigmode;
3837:src/xeq.c     **** }
3838:src/xeq.c     **** 
3839:src/xeq.c     **** void op_double(enum nilop op) {
3840:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
3841:src/xeq.c     **** 	const int intm = is_intmode();
3842:src/xeq.c     **** 	int i;
3843:src/xeq.c     **** 
3844:src/xeq.c     **** 	if (dbl != UState.mode_double) {
3845:src/xeq.c     **** 		// Mode switch
3846:src/xeq.c     **** 		if (dbl) {
3847:src/xeq.c     **** 			if (NumRegs < STACK_SIZE + EXTRA_REG) {
3848:src/xeq.c     **** 				// Need space for double precision stack
3849:src/xeq.c     **** 				cmdregs(STACK_SIZE + EXTRA_REG, RARG_REGS);
3850:src/xeq.c     **** 				if (Error) {
3851:src/xeq.c     **** 					return;
3852:src/xeq.c     **** 				}
3853:src/xeq.c     **** 			}
3854:src/xeq.c     **** 
3855:src/xeq.c     **** 			UState.mode_double = 1;
3856:src/xeq.c     **** 			if (! intm) {
3857:src/xeq.c     **** 				// Convert X to K to double precision
3858:src/xeq.c     **** 				// Avoid this in integer mode
3859:src/xeq.c     **** 				for (i = 0; i < STACK_SIZE + EXTRA_REG; ++i)
3860:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
3861:src/xeq.c     **** 			}
3862:src/xeq.c     **** 		}
3863:src/xeq.c     **** 		else {
3864:src/xeq.c     **** 			if (! intm) {
3865:src/xeq.c     **** 				// Convert X to K to single precision
3866:src/xeq.c     **** 				// Avoid this in integer mode
3867:src/xeq.c     **** 				for (i = STACK_SIZE + EXTRA_REG - 1; i >= 0; --i)
3868:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
3869:src/xeq.c     **** 			}
3870:src/xeq.c     **** 			UState.mode_double = 0;
3871:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
3872:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
3873:src/xeq.c     **** 		}
3874:src/xeq.c     **** 	}
3875:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
3876:src/xeq.c     **** 	if (intm) {
3877:src/xeq.c     **** 		// Do the necessary conversions from integer mode
3878:src/xeq.c     **** 		op_float(OP_FLOAT_XIN);
3879:src/xeq.c     **** 	}
3880:src/xeq.c     **** }
3881:src/xeq.c     **** 
3882:src/xeq.c     **** void cmdpause(unsigned int arg, enum rarg op) {
3883:src/xeq.c     **** 	display();
3884:src/xeq.c     **** #ifndef CONSOLE
3885:src/xeq.c     **** 	// decremented in the low level heartbeat
3886:src/xeq.c     **** 	Pause = arg;
ARM GAS  /tmp/ccK8IvWa.s 			page 81


3887:src/xeq.c     **** 	GoFast = (arg == 0);
3888:src/xeq.c     **** #elif (defined) DM42
3889:src/xeq.c     **** 	start_pause(arg);
3890:src/xeq.c     **** #else	
3891:src/xeq.c     **** #if defined(WIN32) && !defined(__GNUC__)
3892:src/xeq.c     **** #pragma warning(disable:4996)
3893:src/xeq.c     **** 	sleep(arg/10);
3894:src/xeq.c     **** #else
3895:src/xeq.c     **** 	usleep(arg * 100000);
3896:src/xeq.c     **** #endif
3897:src/xeq.c     **** #endif
3898:src/xeq.c     **** }
3899:src/xeq.c     **** 
3900:src/xeq.c     **** 
3901:src/xeq.c     **** 
3902:src/xeq.c     **** void op_setspeed(enum nilop op) {
3903:src/xeq.c     **** 	UState.slow_speed = (op == OP_SLOW) ? 1 : 0;
3904:src/xeq.c     **** 	update_speed(1);
3905:src/xeq.c     **** }
3906:src/xeq.c     **** 
3907:src/xeq.c     **** 
3908:src/xeq.c     **** void op_prompt(enum nilop op) {
3909:src/xeq.c     **** 	set_running_off();
3910:src/xeq.c     **** 	alpha_view_common(regX_idx);
3911:src/xeq.c     **** }
3912:src/xeq.c     **** 
3913:src/xeq.c     **** /* Test if a number is an integer or fractional */
3914:src/xeq.c     **** /* Special numbers are neither */
3915:src/xeq.c     **** void XisInt(enum nilop op) {
3916:src/xeq.c     **** 	decNumber x;
3917:src/xeq.c     **** 	int result, op_int = (op == OP_XisINT);
3918:src/xeq.c     **** 	if ( is_intmode() )
3919:src/xeq.c     **** 		result = op_int;
3920:src/xeq.c     **** 	else if (decNumberIsSpecial(getX(&x)))
3921:src/xeq.c     **** 		result = 0;
3922:src/xeq.c     **** 	else
3923:src/xeq.c     **** 	        result = (is_int(&x) == op_int);
3924:src/xeq.c     **** 	fin_tst(result);
3925:src/xeq.c     **** }
3926:src/xeq.c     **** 
3927:src/xeq.c     **** /* Test if a number is an even or odd integer */
3928:src/xeq.c     **** /* fractional or special values are neither even nor odd */
3929:src/xeq.c     **** void XisEvenOrOdd(enum nilop op) {
3930:src/xeq.c     **** 	decNumber x;
3931:src/xeq.c     **** 	int odd = (op == OP_XisODD);
3932:src/xeq.c     **** 
3933:src/xeq.c     **** 	if (is_intmode()) {
3934:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
3935:src/xeq.c     **** 	} else {
3936:src/xeq.c     **** 		fin_tst(is_even(getX(&x)) == !odd);
3937:src/xeq.c     **** 	}
3938:src/xeq.c     **** }
3939:src/xeq.c     **** 
3940:src/xeq.c     **** 
3941:src/xeq.c     **** /* Test if a number is prime */
3942:src/xeq.c     **** void XisPrime(enum nilop op) {
3943:src/xeq.c     **** 	unsigned long long int i;
ARM GAS  /tmp/ccK8IvWa.s 			page 82


3944:src/xeq.c     **** 	int sgn;
3945:src/xeq.c     **** 
3946:src/xeq.c     **** 	i = getX_int_sgn(&sgn);
3947:src/xeq.c     **** 	if (!is_intmode()) {
3948:src/xeq.c     **** 		decNumber x;
3949:src/xeq.c     **** 
3950:src/xeq.c     **** 		getX(&x);
3951:src/xeq.c     **** 		if (decNumberIsSpecial(&x))
3952:src/xeq.c     **** 			sgn = 1; // not prime
3953:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
3954:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
3955:src/xeq.c     **** 			i = 0xFFFFFFFFFFFFFFFFull;
3956:src/xeq.c     **** 	}
3957:src/xeq.c     **** 	fin_tst(sgn == 0 && isPrime(i));
3958:src/xeq.c     **** }
3959:src/xeq.c     **** 
3960:src/xeq.c     **** /* Test is a number is infinite.
3961:src/xeq.c     ****  */
3962:src/xeq.c     **** void isInfinite(enum nilop op) {
3963:src/xeq.c     **** 	decNumber x;
3964:src/xeq.c     **** 
3965:src/xeq.c     **** 	getX(&x);
3966:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsInfinite(&x));
3967:src/xeq.c     **** }
3968:src/xeq.c     **** 
3969:src/xeq.c     **** /* Test for NaN.
3970:src/xeq.c     ****  * this could be done by testing x != x, but having a special command
3971:src/xeq.c     ****  * for it reads easier.
3972:src/xeq.c     ****  */
3973:src/xeq.c     **** void isNan(enum nilop op) {
3974:src/xeq.c     **** 	decNumber x;
3975:src/xeq.c     **** 
3976:src/xeq.c     **** 	getX(&x);
3977:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsNaN(&x));
3978:src/xeq.c     **** }
3979:src/xeq.c     **** 
3980:src/xeq.c     **** void isSpecial(enum nilop op) {
3981:src/xeq.c     **** 	decNumber x;
3982:src/xeq.c     **** 
3983:src/xeq.c     **** 	getX(&x);
3984:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsSpecial(&x));
3985:src/xeq.c     **** }
3986:src/xeq.c     **** 
3987:src/xeq.c     **** void op_entryp(enum nilop op) {
3988:src/xeq.c     **** 	fin_tst(State.entryp);
3989:src/xeq.c     **** }
3990:src/xeq.c     **** 
3991:src/xeq.c     **** /* Bulk register operations */
3992:src/xeq.c     **** int reg_decode(int *s, int *n, int *d, int flash) {
3993:src/xeq.c     **** 	decNumber x, y;
3994:src/xeq.c     **** 	int rsrc, num, rdest, q, mx_src, mx_dest;
3995:src/xeq.c     **** 
3996:src/xeq.c     **** 	if (is_intmode()) {
3997:src/xeq.c     **** 		bad_mode_error();
3998:src/xeq.c     **** 		return 1;
3999:src/xeq.c     **** 	}
4000:src/xeq.c     **** 	getX(&x);			// sss.nnddd~
ARM GAS  /tmp/ccK8IvWa.s 			page 83


4001:src/xeq.c     **** 	dn_mulpow10(&y, &x, 2 + 3);	// sssnnddd.~
4002:src/xeq.c     **** 	decNumberTrunc(&x, &y);		// sssnnddd.0
4003:src/xeq.c     **** 	rsrc = dn_to_int(&x);		// sssnnddd
4004:src/xeq.c     **** 
4005:src/xeq.c     **** 	if (rsrc < 0) {
4006:src/xeq.c     **** 		if (!flash)
4007:src/xeq.c     **** 			goto range_error;
4008:src/xeq.c     **** 		rsrc = -rsrc;
4009:src/xeq.c     **** 	}
4010:src/xeq.c     **** 	else
4011:src/xeq.c     **** 		flash = 0;
4012:src/xeq.c     **** 
4013:src/xeq.c     **** 	rdest = rsrc % 1000;		// ddd
4014:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
4015:src/xeq.c     **** 	num = rsrc % 100;		// nn
4016:src/xeq.c     **** 	rsrc /= 100;			// sss
4017:src/xeq.c     **** 
4018:src/xeq.c     **** 	mx_src = flash ? BackupFlash._numregs
4019:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
4020:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
4021:src/xeq.c     **** 	       : global_regs();
4022:src/xeq.c     **** 	if (rsrc >= mx_src)
4023:src/xeq.c     **** 		goto range_error;
4024:src/xeq.c     **** 
4025:src/xeq.c     **** 	if (d != NULL) {
4026:src/xeq.c     **** 		mx_dest = rdest >= LOCAL_REG_BASE ? local_regs() : global_regs();
4027:src/xeq.c     **** 
4028:src/xeq.c     **** 		if (num == 0) {
4029:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
4030:src/xeq.c     **** 			if (flash || (rsrc >= LOCAL_REG_BASE) != (rdest >= LOCAL_REG_BASE))
4031:src/xeq.c     **** 				// source & destination in different memory areas
4032:src/xeq.c     **** 				num = mx_dest < mx_src ? mx_dest : mx_src;
4033:src/xeq.c     **** 			else {
4034:src/xeq.c     **** 				if (rsrc > rdest) {
4035:src/xeq.c     **** 					num = mx_src - rsrc;
4036:src/xeq.c     **** 					q = rsrc - rdest;
4037:src/xeq.c     **** 				}
4038:src/xeq.c     **** 				else {
4039:src/xeq.c     **** 					num = mx_dest - rdest;
4040:src/xeq.c     **** 					q = rdest - rsrc;
4041:src/xeq.c     **** 				}
4042:src/xeq.c     **** 				if (num > q)
4043:src/xeq.c     **** 					num = q;
4044:src/xeq.c     **** 			}
4045:src/xeq.c     **** 		}
4046:src/xeq.c     **** 		if (rdest >= LOCAL_REG_BASE)
4047:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
4048:src/xeq.c     **** 		if (rdest + num > mx_dest)
4049:src/xeq.c     **** 			goto range_error;
4050:src/xeq.c     **** 		// Set pointer
4051:src/xeq.c     **** 		*d = rdest;
4052:src/xeq.c     **** 	}
4053:src/xeq.c     **** 	else {
4054:src/xeq.c     **** 		if (num == 0) {
4055:src/xeq.c     **** 			num = mx_src - rsrc;
4056:src/xeq.c     **** 		}
4057:src/xeq.c     **** 	}
ARM GAS  /tmp/ccK8IvWa.s 			page 84


4058:src/xeq.c     **** 	if (rsrc + num > mx_src)
4059:src/xeq.c     **** 		goto range_error;
4060:src/xeq.c     **** 
4061:src/xeq.c     **** 	// Now point to the correct source register
4062:src/xeq.c     **** 	*s = flash ? FLASH_REG_BASE + rsrc : rsrc;
4063:src/xeq.c     **** 	*n = num;
4064:src/xeq.c     **** 
4065:src/xeq.c     **** 	return 0;
4066:src/xeq.c     **** 
4067:src/xeq.c     **** range_error:
4068:src/xeq.c     **** 	report_err(ERR_RANGE);
4069:src/xeq.c     **** 	return 1;
4070:src/xeq.c     **** }
4071:src/xeq.c     **** 
4072:src/xeq.c     **** void op_regcopy(enum nilop op) {
4073:src/xeq.c     **** 	int s, n, d;
4074:src/xeq.c     **** 
4075:src/xeq.c     **** 	if (reg_decode(&s, &n, &d, 1))
4076:src/xeq.c     **** 		return;
4077:src/xeq.c     **** 	move_regs(get_reg_n(d), get_reg_n(s), n);
4078:src/xeq.c     **** }
4079:src/xeq.c     **** 
4080:src/xeq.c     **** void op_regswap(enum nilop op) {
4081:src/xeq.c     **** 	int s, n, d, i;
4082:src/xeq.c     **** 
4083:src/xeq.c     **** 	if (reg_decode(&s, &n, &d, 0) || s == d)
4084:src/xeq.c     **** 		return;
4085:src/xeq.c     **** 	else {
4086:src/xeq.c     **** 		if ((s > d && d + n > s) || (d > s && s + n > d))
4087:src/xeq.c     **** 			report_err(ERR_RANGE);
4088:src/xeq.c     **** 		else {
4089:src/xeq.c     **** 			for (i = 0; i < n; i++)
4090:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
4091:src/xeq.c     **** 		}
4092:src/xeq.c     **** 	}
4093:src/xeq.c     **** }
4094:src/xeq.c     **** 
4095:src/xeq.c     **** void op_regclr(enum nilop op) {
4096:src/xeq.c     **** 	int s, n;
4097:src/xeq.c     **** 
4098:src/xeq.c     **** 	if (reg_decode(&s, &n, NULL, 0))
4099:src/xeq.c     **** 		return;
4100:src/xeq.c     **** 	zero_regs(get_reg_n(s), n);
4101:src/xeq.c     **** }
4102:src/xeq.c     **** 
4103:src/xeq.c     **** void op_regsort(enum nilop op) {
4104:src/xeq.c     **** 	int s, n;
4105:src/xeq.c     **** 	decNumber pivot, a;
4106:src/xeq.c     **** 	int beg[10], end[10], i;
4107:src/xeq.c     **** 
4108:src/xeq.c     **** 	if (reg_decode(&s, &n, NULL, 0) || n == 1)
4109:src/xeq.c     **** 		return;
4110:src/xeq.c     **** 
4111:src/xeq.c     **** 	/* Non-recursive quicksort */
4112:src/xeq.c     **** 	beg[0] = 0;
4113:src/xeq.c     **** 	end[0] = n;
4114:src/xeq.c     **** 	i = 0;
ARM GAS  /tmp/ccK8IvWa.s 			page 85


4115:src/xeq.c     **** 	while (i>=0) {
4116:src/xeq.c     **** 		int L = beg[i];
4117:src/xeq.c     **** 		int R = end[i] - 1;
4118:src/xeq.c     **** 		if (L<R) {
4119:src/xeq.c     **** 			const int pvt = s + L;
4120:src/xeq.c     **** 			getRegister(&pivot, pvt);
4121:src/xeq.c     **** 			while (L<R) {
4122:src/xeq.c     **** 				while (L<R) {
4123:src/xeq.c     **** 					getRegister(&a, s + R);
4124:src/xeq.c     **** 					if (dn_lt(&a, &pivot))
4125:src/xeq.c     **** 						break;
4126:src/xeq.c     **** 					R--;
4127:src/xeq.c     **** 				}
4128:src/xeq.c     **** 				if (L<R)
4129:src/xeq.c     **** 					copyreg_n(s + L++, s + R);
4130:src/xeq.c     **** 				while (L<R) {
4131:src/xeq.c     **** 					getRegister(&a, s + L);
4132:src/xeq.c     **** 					if (dn_gt(&a, &pivot))
4133:src/xeq.c     **** 						break;
4134:src/xeq.c     **** 					L++;
4135:src/xeq.c     **** 				}
4136:src/xeq.c     **** 				if (L<R)
4137:src/xeq.c     **** 					copyreg_n(s + R--, s + L);
4138:src/xeq.c     **** 			}
4139:src/xeq.c     **** 			setRegister(s + L, &pivot);
4140:src/xeq.c     **** 			if (L - beg[i] < end[i] - (L+1)) {
4141:src/xeq.c     **** 				beg[i+1] = beg[i];
4142:src/xeq.c     **** 				end[i+1] = L;
4143:src/xeq.c     **** 				beg[i] = L+1;
4144:src/xeq.c     **** 			} else {
4145:src/xeq.c     **** 				beg[i+1] = L+1;
4146:src/xeq.c     **** 				end[i+1] = end[i];
4147:src/xeq.c     **** 				end[i] = L;
4148:src/xeq.c     **** 			}
4149:src/xeq.c     **** 			i++;
4150:src/xeq.c     **** 		} else
4151:src/xeq.c     **** 			i--;
4152:src/xeq.c     **** 	}
4153:src/xeq.c     **** }
4154:src/xeq.c     **** 
4155:src/xeq.c     **** 
4156:src/xeq.c     **** 
4157:src/xeq.c     **** /* Print a single program step nicely.
4158:src/xeq.c     ****  */
4159:src/xeq.c     **** static void print_step(const opcode op) {
4160:src/xeq.c     **** 	char buf[16];
4161:src/xeq.c     **** 	const unsigned int pc = state_pc();
4162:src/xeq.c     **** 	char *p = TraceBuffer;
4163:src/xeq.c     **** 
4164:src/xeq.c     **** 	if (isXROM(pc)) {
4165:src/xeq.c     **** 		*p++ = 'x';
4166:src/xeq.c     **** 	} else if (isLIB(pc)) {
4167:src/xeq.c     **** 		p = num_arg_0(p, nLIB(pc), 1);
4168:src/xeq.c     **** 		*p++ = ' ';
4169:src/xeq.c     **** 	}
4170:src/xeq.c     **** 	if (pc == 0)
4171:src/xeq.c     **** 		scopy(p, "000:");
ARM GAS  /tmp/ccK8IvWa.s 			page 86


4172:src/xeq.c     **** 	else {
4173:src/xeq.c     **** 		p = num_arg_0(p, user_pc(pc), 3);
4174:src/xeq.c     **** 		*p++ = ':';
4175:src/xeq.c     **** 		scopy_char(p, prt(op, buf), '\0');
4176:src/xeq.c     **** 		if (*p == '?')
4177:src/xeq.c     **** 			*p = '\0';
4178:src/xeq.c     **** 	}
4179:src/xeq.c     **** 	State2.disp_small = 1;
4180:src/xeq.c     **** 	DispMsg = TraceBuffer;
4181:src/xeq.c     **** }
4182:src/xeq.c     **** 
4183:src/xeq.c     **** 
4184:src/xeq.c     **** /* When stuff gets done, there are some bits of state that need
4185:src/xeq.c     ****  * to be reset -- SHOW, ->base change the display mode until something
4186:src/xeq.c     ****  * happens.  This should be called on that something.
4187:src/xeq.c     ****  */
4188:src/xeq.c     **** void reset_volatile_state(void) {
4189:src/xeq.c     **** 	// extern int IntMaxWindow;
4190:src/xeq.c     **** 	// IntMaxWindow = 0;
4191:src/xeq.c     **** 	State2.window = 0;
4192:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
4193:src/xeq.c     **** }
4194:src/xeq.c     **** 
4195:src/xeq.c     **** 
4196:src/xeq.c     **** /*
4197:src/xeq.c     ****  *  Called by any long running function
4198:src/xeq.c     ****  */
4199:src/xeq.c     **** void busy(void)
4200:src/xeq.c     **** {
4201:src/xeq.c     **** 	/*
4202:src/xeq.c     **** 	 *  Serve the hardware watch dog
4203:src/xeq.c     **** 	 */
4204:src/xeq.c     **** 	watchdog();
4205:src/xeq.c     **** 
4206:src/xeq.c     **** 	/*
4207:src/xeq.c     **** 	 *  Increase the speed
4208:src/xeq.c     **** 	 */
4209:src/xeq.c     **** 	update_speed(1);
4210:src/xeq.c     **** 
4211:src/xeq.c     **** 	/*
4212:src/xeq.c     **** 	 *  Indicate busy state to the user
4213:src/xeq.c     **** 	 */
4214:src/xeq.c     **** 	if (!Busy && !Running) {
4215:src/xeq.c     **** 		Busy = 1;
4216:src/xeq.c     **** 		message("Wait...", NULL);
4217:src/xeq.c     **** 	}
4218:src/xeq.c     **** }
4219:src/xeq.c     **** 
4220:src/xeq.c     **** /***************************************************************************
4221:src/xeq.c     ****  * Function dispatchers.
4222:src/xeq.c     ****  */
4223:src/xeq.c     **** 
4224:src/xeq.c     **** /*
4225:src/xeq.c     ****  *  Check for a call into XROM space.
4226:src/xeq.c     ****  *  Fix the pointer alignment on the go.
4227:src/xeq.c     ****  */
4228:src/xeq.c     **** #ifdef REALBUILD
ARM GAS  /tmp/ccK8IvWa.s 			page 87


4229:src/xeq.c     **** typedef unsigned long uintptr_t;
4230:src/xeq.c     **** #else
4231:src/xeq.c     **** #include <stdint.h>
4232:src/xeq.c     **** #endif
4233:src/xeq.c     **** 
4234:src/xeq.c     **** static const s_opcode *check_for_xrom_address(void *fp)
4235:src/xeq.c     **** {
4236:src/xeq.c     **** 	const s_opcode *xp = (const s_opcode *) ((uintptr_t ) fp & ~1);
4237:src/xeq.c     **** 	if (xp < xrom)
4238:src/xeq.c     **** 		return NULL;
4239:src/xeq.c     **** #ifndef REALBUILD
4240:src/xeq.c     **** 	// On the device, XROM is at the end so this is not needed
4241:src/xeq.c     **** 	if (xp >= xrom + xrom_size)
4242:src/xeq.c     **** 		return NULL;
4243:src/xeq.c     **** #endif
4244:src/xeq.c     **** 	return xp;
4245:src/xeq.c     **** }
4246:src/xeq.c     **** 
4247:src/xeq.c     **** /*
4248:src/xeq.c     ****  *  Check for a call into XROM space and dispatch it.
4249:src/xeq.c     ****  */
4250:src/xeq.c     **** static int dispatch_xrom(void *fp)
4251:src/xeq.c     **** {
4252:src/xeq.c     **** 	const s_opcode *xp = check_for_xrom_address(fp);
4253:src/xeq.c     **** 	if (xp == NULL)
4254:src/xeq.c     **** 		return 0;
4255:src/xeq.c     **** 	// set_lift();
4256:src/xeq.c     **** 	UserLocalRegs = LocalRegs;
4257:src/xeq.c     **** 	XromRunning = 1;
4258:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
4259:src/xeq.c     **** 	xeq_xrom();
4260:src/xeq.c     **** 	return 1;
4261:src/xeq.c     **** }
4262:src/xeq.c     **** 
4263:src/xeq.c     **** /*
4264:src/xeq.c     ****  *  Return an integer result from a decimal value, setting flags properly
4265:src/xeq.c     ****  */
4266:src/xeq.c     **** static long long int intResult(decNumber *r) {
 579              		.loc 1 4266 46 is_stmt 1 view -0
 580              		.cfi_startproc
 581              		@ args = 0, pretend = 0, frame = 80
 582              		@ frame_needed = 0, uses_anonymous_args = 0
4267:src/xeq.c     **** 	unsigned long long int i;
 583              		.loc 1 4267 2 view .LVU176
4268:src/xeq.c     **** 	int s;
 584              		.loc 1 4268 2 view .LVU177
4269:src/xeq.c     **** 	decNumber ri, t;
 585              		.loc 1 4269 2 view .LVU178
4270:src/xeq.c     **** 
4271:src/xeq.c     **** 	decNumberRoundDigits(&t, r, 25, DEC_ROUND_HALF_EVEN);
 586              		.loc 1 4271 2 view .LVU179
4266:src/xeq.c     **** 	unsigned long long int i;
 587              		.loc 1 4266 46 is_stmt 0 view .LVU180
 588 0000 30B5     		push	{r4, r5, lr}
 589              		.cfi_def_cfa_offset 12
 590              		.cfi_offset 4, -12
 591              		.cfi_offset 5, -8
ARM GAS  /tmp/ccK8IvWa.s 			page 88


 592              		.cfi_offset 14, -4
 593 0002 95B0     		sub	sp, sp, #84
 594              		.cfi_def_cfa_offset 96
 595              		.loc 1 4271 2 view .LVU181
 596 0004 0323     		movs	r3, #3
 597 0006 1922     		movs	r2, #25
4266:src/xeq.c     **** 	unsigned long long int i;
 598              		.loc 1 4266 46 view .LVU182
 599 0008 0146     		mov	r1, r0
 600              		.loc 1 4271 2 view .LVU183
 601 000a 0BA8     		add	r0, sp, #44
 602              	.LVL46:
 603              		.loc 1 4271 2 view .LVU184
 604 000c FFF7FEFF 		bl	decNumberRoundDigits
 605              	.LVL47:
4272:src/xeq.c     **** 	decNumberTrunc(&ri, &t);
 606              		.loc 1 4272 2 is_stmt 1 view .LVU185
 607 0010 0BA9     		add	r1, sp, #44
 608 0012 02A8     		add	r0, sp, #8
 609 0014 FFF7FEFF 		bl	decNumberTrunc
 610              	.LVL48:
4273:src/xeq.c     **** 	set_carry(dn_eq(&ri, &t) ? 0 : 1);
 611              		.loc 1 4273 2 view .LVU186
 612              		.loc 1 4273 12 is_stmt 0 view .LVU187
 613 0018 0BA9     		add	r1, sp, #44
 614 001a 02A8     		add	r0, sp, #8
 615 001c FFF7FEFF 		bl	dn_eq
 616              	.LVL49:
 617              		.loc 1 4273 2 view .LVU188
 618 0020 B0FA80F0 		clz	r0, r0
 619 0024 4009     		lsrs	r0, r0, #5
 620 0026 FFF7FEFF 		bl	set_carry
 621              	.LVL50:
4274:src/xeq.c     **** 
4275:src/xeq.c     **** 	if (decNumberIsNaN(&t)) {
 622              		.loc 1 4275 2 is_stmt 1 view .LVU189
 623              		.loc 1 4275 6 is_stmt 0 view .LVU190
 624 002a 9DF83430 		ldrb	r3, [sp, #52]	@ zero_extendqisi2
 625              		.loc 1 4275 5 view .LVU191
 626 002e 13F0300F 		tst	r3, #48
 627 0032 22D1     		bne	.L64
4276:src/xeq.c     **** 		report_err(ERR_DOMAIN);
4277:src/xeq.c     **** 		return 0;
4278:src/xeq.c     **** 	}
4279:src/xeq.c     **** 	if (decNumberIsSpecial(&t)) {
 628              		.loc 1 4279 2 is_stmt 1 view .LVU192
 629              		.loc 1 4279 5 is_stmt 0 view .LVU193
 630 0034 13F0700F 		tst	r3, #112
 631 0038 18D1     		bne	.L65
4280:src/xeq.c     **** 		set_overflow(1);
4281:src/xeq.c     **** 		return 0;
4282:src/xeq.c     **** 	}
4283:src/xeq.c     **** 	i = dn_to_ull(&ri, &s);
 632              		.loc 1 4283 2 is_stmt 1 view .LVU194
 633              		.loc 1 4283 6 is_stmt 0 view .LVU195
 634 003a 02A8     		add	r0, sp, #8
 635 003c 01A9     		add	r1, sp, #4
ARM GAS  /tmp/ccK8IvWa.s 			page 89


 636 003e FFF7FEFF 		bl	dn_to_ull
 637              	.LVL51:
 638 0042 0C46     		mov	r4, r1
4284:src/xeq.c     **** 	dn_abs(&t, &t);
 639              		.loc 1 4284 2 view .LVU196
 640 0044 0BA9     		add	r1, sp, #44
4283:src/xeq.c     **** 	dn_abs(&t, &t);
 641              		.loc 1 4283 6 view .LVU197
 642 0046 0546     		mov	r5, r0
 643              	.LVL52:
 644              		.loc 1 4284 2 is_stmt 1 view .LVU198
 645 0048 0846     		mov	r0, r1
 646              	.LVL53:
 647              		.loc 1 4284 2 is_stmt 0 view .LVU199
 648 004a FFF7FEFF 		bl	dn_abs
 649              	.LVL54:
4285:src/xeq.c     **** 	set_overflow(check_overflow(i) || dn_ge(&t, &const_2pow64));
 650              		.loc 1 4285 2 is_stmt 1 view .LVU200
 651              		.loc 1 4285 15 is_stmt 0 view .LVU201
 652 004e 2846     		mov	r0, r5
 653 0050 2146     		mov	r1, r4
 654 0052 FFF7FEFF 		bl	check_overflow
 655              	.LVL55:
 656              		.loc 1 4285 2 view .LVU202
 657 0056 E8B1     		cbz	r0, .L66
 658 0058 0120     		movs	r0, #1
 659              	.L60:
 660              		.loc 1 4285 2 discriminator 6 view .LVU203
 661 005a FFF7FEFF 		bl	set_overflow
 662              	.LVL56:
4286:src/xeq.c     **** 	return build_value(i, s);
 663              		.loc 1 4286 2 is_stmt 1 discriminator 6 view .LVU204
 664              		.loc 1 4286 9 is_stmt 0 discriminator 6 view .LVU205
 665 005e 019A     		ldr	r2, [sp, #4]
 666 0060 2846     		mov	r0, r5
 667 0062 2146     		mov	r1, r4
 668 0064 FFF7FEFF 		bl	build_value
 669              	.LVL57:
4287:src/xeq.c     **** }
 670              		.loc 1 4287 1 discriminator 6 view .LVU206
 671 0068 15B0     		add	sp, sp, #84
 672              		.cfi_remember_state
 673              		.cfi_def_cfa_offset 12
 674              		@ sp needed
 675 006a 30BD     		pop	{r4, r5, pc}
 676              	.LVL58:
 677              	.L65:
 678              		.cfi_restore_state
4280:src/xeq.c     **** 		return 0;
 679              		.loc 1 4280 3 is_stmt 1 view .LVU207
 680 006c 0120     		movs	r0, #1
 681 006e FFF7FEFF 		bl	set_overflow
 682              	.LVL59:
4281:src/xeq.c     **** 	}
 683              		.loc 1 4281 3 view .LVU208
4281:src/xeq.c     **** 	}
 684              		.loc 1 4281 10 is_stmt 0 view .LVU209
ARM GAS  /tmp/ccK8IvWa.s 			page 90


 685 0072 0020     		movs	r0, #0
 686 0074 0146     		mov	r1, r0
 687              		.loc 1 4287 1 view .LVU210
 688 0076 15B0     		add	sp, sp, #84
 689              		.cfi_remember_state
 690              		.cfi_def_cfa_offset 12
 691              		@ sp needed
 692 0078 30BD     		pop	{r4, r5, pc}
 693              	.L64:
 694              		.cfi_restore_state
4276:src/xeq.c     **** 		return 0;
 695              		.loc 1 4276 3 is_stmt 1 view .LVU211
 696              	.LVL60:
 697              	.LBB1323:
 698              	.LBI1323:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 699              		.loc 1 523 5 view .LVU212
 700              	.LBB1324:
 524:src/xeq.c     **** 		Error = e;
 701              		.loc 1 524 2 view .LVU213
 524:src/xeq.c     **** 		Error = e;
 702              		.loc 1 524 12 is_stmt 0 view .LVU214
 703 007a 0A4B     		ldr	r3, .L67
 524:src/xeq.c     **** 		Error = e;
 704              		.loc 1 524 5 view .LVU215
 705 007c 1A68     		ldr	r2, [r3]
 706 007e 2AB9     		cbnz	r2, .L61
 707              	.LVL61:
 708              	.LBB1325:
 709              	.LBI1325:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 710              		.loc 1 523 5 is_stmt 1 view .LVU216
 711              	.LBB1326:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 712              		.loc 1 525 3 view .LVU217
 713              	.LBE1326:
 714              	.LBE1325:
 715              	.LBE1324:
 716              	.LBE1323:
4277:src/xeq.c     **** 	}
 717              		.loc 1 4277 10 is_stmt 0 view .LVU218
 718 0080 0020     		movs	r0, #0
 719              	.LBB1333:
 720              	.LBB1331:
 721              	.LBB1329:
 722              	.LBB1327:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 723              		.loc 1 525 9 view .LVU219
 724 0082 0122     		movs	r2, #1
 725              	.LBE1327:
 726              	.LBE1329:
 727              	.LBE1331:
 728              	.LBE1333:
4277:src/xeq.c     **** 	}
 729              		.loc 1 4277 10 view .LVU220
 730 0084 0146     		mov	r1, r0
 731              	.LBB1334:
ARM GAS  /tmp/ccK8IvWa.s 			page 91


 732              	.LBB1332:
 733              	.LBB1330:
 734              	.LBB1328:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 735              		.loc 1 525 9 view .LVU221
 736 0086 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 737              		.loc 1 526 3 is_stmt 1 view .LVU222
 738              	.LBE1328:
 739              	.LBE1330:
 740              	.LBE1332:
 741              	.LBE1334:
 742              		.loc 1 4287 1 is_stmt 0 view .LVU223
 743 0088 15B0     		add	sp, sp, #84
 744              		.cfi_remember_state
 745              		.cfi_def_cfa_offset 12
 746              		@ sp needed
 747 008a 30BD     		pop	{r4, r5, pc}
 748              	.LVL62:
 749              	.L61:
 750              		.cfi_restore_state
4277:src/xeq.c     **** 	}
 751              		.loc 1 4277 10 view .LVU224
 752 008c 0020     		movs	r0, #0
 753 008e 0146     		mov	r1, r0
 754              	.LVL63:
 755              		.loc 1 4287 1 view .LVU225
 756 0090 15B0     		add	sp, sp, #84
 757              		.cfi_remember_state
 758              		.cfi_def_cfa_offset 12
 759              		@ sp needed
 760 0092 30BD     		pop	{r4, r5, pc}
 761              	.LVL64:
 762              	.L66:
 763              		.cfi_restore_state
4285:src/xeq.c     **** 	return build_value(i, s);
 764              		.loc 1 4285 36 discriminator 2 view .LVU226
 765 0094 0449     		ldr	r1, .L67+4
 766 0096 0BA8     		add	r0, sp, #44
 767 0098 FFF7FEFF 		bl	dn_lt
 768              	.LVL65:
4285:src/xeq.c     **** 	return build_value(i, s);
 769              		.loc 1 4285 2 discriminator 2 view .LVU227
 770 009c B0FA80F0 		clz	r0, r0
 771 00a0 4009     		lsrs	r0, r0, #5
 772 00a2 DAE7     		b	.L60
 773              	.L68:
 774              		.align	2
 775              	.L67:
 776 00a4 00000000 		.word	Error
 777 00a8 00000000 		.word	const_2pow64
 778              		.cfi_endproc
 779              	.LFE231:
 781              		.section	.text.global_regs.part.0,"ax",%progbits
 782              		.align	1
 783              		.p2align 2,,3
 784              		.syntax unified
ARM GAS  /tmp/ccK8IvWa.s 			page 92


 785              		.thumb
 786              		.thumb_func
 787              		.fpu fpv4-sp-d16
 789              	global_regs.part.0:
 790              	.LFB278:
 249:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 791              		.loc 1 249 14 is_stmt 1 view -0
 792              		.cfi_startproc
 793              		@ args = 0, pretend = 0, frame = 0
 794              		@ frame_needed = 0, uses_anonymous_args = 0
 795              		@ link register save eliminated.
 796              	.LVL66:
 797              	.LBB1344:
 798              	.LBB1345:
 799              	.LBI1345:
 237:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 800              		.loc 1 237 14 view .LVU229
 801              	.LBB1346:
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 802              		.loc 1 239 3 view .LVU230
 240:src/xeq.c     **** 	}
 803              		.loc 1 240 3 view .LVU231
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 804              		.loc 1 239 24 is_stmt 0 view .LVU232
 805 0000 024B     		ldr	r3, .L70
 806 0002 93F8CF07 		ldrb	r0, [r3, #1999]	@ zero_extendqisi2
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 807              		.loc 1 239 13 view .LVU233
 808 0006 0C38     		subs	r0, r0, #12
 809              	.LBE1346:
 810              	.LBE1345:
 811              	.LBE1344:
 251:src/xeq.c     **** 
 812              		.loc 1 251 1 view .LVU234
 813 0008 4010     		asrs	r0, r0, #1
 814 000a 7047     		bx	lr
 815              	.L71:
 816              		.align	2
 817              	.L70:
 818 000c 00000000 		.word	PersistentRam
 819              		.cfi_endproc
 820              	.LFE278:
 822              		.section	.text.check_stack_overlap,"ax",%progbits
 823              		.align	1
 824              		.p2align 2,,3
 825              		.syntax unified
 826              		.thumb
 827              		.thumb_func
 828              		.fpu fpv4-sp-d16
 830              	check_stack_overlap:
 831              	.LVL67:
 832              	.LFB142:
1919:src/xeq.c     **** 	const int n = stack_size();
 833              		.loc 1 1919 50 is_stmt 1 view -0
 834              		.cfi_startproc
 835              		@ args = 0, pretend = 0, frame = 0
 836              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccK8IvWa.s 			page 93


1920:src/xeq.c     **** 
 837              		.loc 1 1920 2 view .LVU236
 838              	.LBB1373:
 839              	.LBI1373:
 689:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 840              		.loc 1 689 5 view .LVU237
 841              	.LBB1374:
 690:src/xeq.c     **** 		return 4;
 842              		.loc 1 690 2 view .LVU238
 843              	.LBE1374:
 844              	.LBE1373:
1919:src/xeq.c     **** 	const int n = stack_size();
 845              		.loc 1 1919 50 is_stmt 0 view .LVU239
 846 0000 38B5     		push	{r3, r4, r5, lr}
 847              		.cfi_def_cfa_offset 16
 848              		.cfi_offset 3, -16
 849              		.cfi_offset 4, -12
 850              		.cfi_offset 5, -8
 851              		.cfi_offset 14, -4
 852              	.LBB1380:
 853              	.LBB1377:
 690:src/xeq.c     **** 		return 4;
 854              		.loc 1 690 6 view .LVU240
 855 0002 194C     		ldr	r4, .L84
 856 0004 94F8EA37 		ldrb	r3, [r4, #2026]	@ zero_extendqisi2
 690:src/xeq.c     **** 		return 4;
 857              		.loc 1 690 5 view .LVU241
 858 0008 1B07     		lsls	r3, r3, #28
 859              	.LBE1377:
 860              	.LBE1380:
1919:src/xeq.c     **** 	const int n = stack_size();
 861              		.loc 1 1919 50 view .LVU242
 862 000a 0146     		mov	r1, r0
 863              	.LBB1381:
 864              	.LBB1378:
 690:src/xeq.c     **** 		return 4;
 865              		.loc 1 690 5 view .LVU243
 866 000c 22D5     		bpl	.L77
 867              	.LBB1375:
 868              	.LBI1375:
 181:src/xeq.c     **** 	return isXROM(state_pc());
 869              		.loc 1 181 5 is_stmt 1 view .LVU244
 870              	.LBB1376:
 182:src/xeq.c     **** }
 871              		.loc 1 182 2 view .LVU245
 182:src/xeq.c     **** }
 872              		.loc 1 182 9 is_stmt 0 view .LVU246
 873 000e B4F8E037 		ldrh	r3, [r4, #2016]
 874              	.LBE1376:
 875              	.LBE1375:
 690:src/xeq.c     **** 		return 4;
 876              		.loc 1 690 27 view .LVU247
 877 0012 9B0B     		lsrs	r3, r3, #14
 878 0014 032B     		cmp	r3, #3
 879 0016 18D0     		beq	.L82
 880              	.L79:
 881 0018 0823     		movs	r3, #8
ARM GAS  /tmp/ccK8IvWa.s 			page 94


 692:src/xeq.c     **** }
 882              		.loc 1 692 9 view .LVU248
 883 001a 1D46     		mov	r5, r3
 884              	.L73:
 885              	.LVL68:
 692:src/xeq.c     **** }
 886              		.loc 1 692 9 view .LVU249
 887              	.LBE1378:
 888              	.LBE1381:
1922:src/xeq.c     **** 		return n;
 889              		.loc 1 1922 2 is_stmt 1 view .LVU250
 890              	.LBB1382:
 891              	.LBB1383:
 892              	.LBB1384:
 893              	.LBB1385:
 894              	.LBB1386:
 895              	.LBB1387:
 919:src/xeq.c     **** }
 896              		.loc 1 919 24 is_stmt 0 view .LVU251
 897 001c B4F8E827 		ldrh	r2, [r4, #2024]
 898 0020 44F20100 		movw	r0, #16385
 899              	.LVL69:
 919:src/xeq.c     **** }
 900              		.loc 1 919 24 view .LVU252
 901              	.LBE1387:
 902              	.LBE1386:
 238:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 903              		.loc 1 238 5 view .LVU253
 904 0024 1040     		ands	r0, r0, r2
 905 0026 B0F5804F 		cmp	r0, #16384
 906              	.LBE1385:
 907              	.LBE1384:
 908              	.LBE1383:
 909              	.LBE1382:
1922:src/xeq.c     **** 		return n;
 910              		.loc 1 1922 10 view .LVU254
 911 002a 01EB0302 		add	r2, r1, r3
 912              	.LBB1394:
 913              	.LBI1382:
 249:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 914              		.loc 1 249 14 is_stmt 1 view .LVU255
 915              	.LBB1392:
 250:src/xeq.c     **** }
 916              		.loc 1 250 2 view .LVU256
 917              	.LVL70:
 918              	.LBB1391:
 919              	.LBI1384:
 237:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 920              		.loc 1 237 14 view .LVU257
 921              	.LBB1390:
 238:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 922              		.loc 1 238 2 view .LVU258
 923              	.LBB1389:
 924              	.LBI1386:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 925              		.loc 1 918 5 view .LVU259
 926              	.LBB1388:
ARM GAS  /tmp/ccK8IvWa.s 			page 95


 919:src/xeq.c     **** }
 927              		.loc 1 919 2 view .LVU260
 928              	.LBE1388:
 929              	.LBE1389:
 238:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 930              		.loc 1 238 5 is_stmt 0 view .LVU261
 931 002e 17D0     		beq	.L83
 243:src/xeq.c     **** }
 932              		.loc 1 243 3 is_stmt 1 view .LVU262
 243:src/xeq.c     **** }
 933              		.loc 1 243 10 is_stmt 0 view .LVU263
 934 0030 94F8CF07 		ldrb	r0, [r4, #1999]	@ zero_extendqisi2
 935              	.L75:
 936              	.LVL71:
 243:src/xeq.c     **** }
 937              		.loc 1 243 10 view .LVU264
 938              	.LBE1390:
 939              	.LBE1391:
 940              	.LBE1392:
 941              	.LBE1394:
1922:src/xeq.c     **** 		return n;
 942              		.loc 1 1922 5 view .LVU265
 943 0034 8242     		cmp	r2, r0
 944 0036 06D9     		bls	.L72
1922:src/xeq.c     **** 		return n;
 945              		.loc 1 1922 31 discriminator 1 view .LVU266
 946 0038 6F29     		cmp	r1, #111
 947 003a 04D8     		bhi	.L72
 948              	.LBB1395:
 949              	.LBI1395:
1919:src/xeq.c     **** 	const int n = stack_size();
 950              		.loc 1 1919 12 is_stmt 1 view .LVU267
 951              	.LVL72:
 952              	.LBB1396:
1925:src/xeq.c     **** 	return 0;
 953              		.loc 1 1925 2 view .LVU268
 954              	.LBB1397:
 955              	.LBI1397:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 956              		.loc 1 523 5 view .LVU269
 957              	.LBB1398:
 524:src/xeq.c     **** 		Error = e;
 958              		.loc 1 524 2 view .LVU270
 524:src/xeq.c     **** 		Error = e;
 959              		.loc 1 524 12 is_stmt 0 view .LVU271
 960 003c 0B4B     		ldr	r3, .L84+4
 961 003e 1D68     		ldr	r5, [r3]
 962              	.LVL73:
 524:src/xeq.c     **** 		Error = e;
 963              		.loc 1 524 5 view .LVU272
 964 0040 5DB9     		cbnz	r5, .L80
 965              	.LVL74:
 966              	.LBB1399:
 967              	.LBI1399:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 968              		.loc 1 523 5 is_stmt 1 view .LVU273
 969              	.LBB1400:
ARM GAS  /tmp/ccK8IvWa.s 			page 96


 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 970              		.loc 1 525 3 view .LVU274
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 971              		.loc 1 525 9 is_stmt 0 view .LVU275
 972 0042 0C22     		movs	r2, #12
 973 0044 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 974              		.loc 1 526 3 is_stmt 1 view .LVU276
 975              	.LVL75:
 976              	.L72:
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 977              		.loc 1 526 3 is_stmt 0 view .LVU277
 978              	.LBE1400:
 979              	.LBE1399:
 980              	.LBE1398:
 981              	.LBE1397:
 982              	.LBE1396:
 983              	.LBE1395:
1927:src/xeq.c     **** 
 984              		.loc 1 1927 1 view .LVU278
 985 0046 2846     		mov	r0, r5
 986 0048 38BD     		pop	{r3, r4, r5, pc}
 987              	.LVL76:
 988              	.L82:
 989              	.LBB1404:
 990              	.LBB1379:
 690:src/xeq.c     **** 		return 4;
 991              		.loc 1 690 44 view .LVU279
 992 004a 094B     		ldr	r3, .L84+8
 690:src/xeq.c     **** 		return 4;
 993              		.loc 1 690 41 view .LVU280
 994 004c 93F90130 		ldrsb	r3, [r3, #1]
 995 0050 002B     		cmp	r3, #0
 996 0052 E1DB     		blt	.L79
 997              	.L77:
 998 0054 0423     		movs	r3, #4
 691:src/xeq.c     **** 	return 8;
 999              		.loc 1 691 10 view .LVU281
 1000 0056 1D46     		mov	r5, r3
 1001 0058 E0E7     		b	.L73
 1002              	.LVL77:
 1003              	.L80:
 691:src/xeq.c     **** 	return 8;
 1004              		.loc 1 691 10 view .LVU282
 1005              	.LBE1379:
 1006              	.LBE1404:
 1007              	.LBB1405:
 1008              	.LBB1403:
 1009              	.LBB1402:
 1010              	.LBB1401:
 1011 005a 0025     		movs	r5, #0
 1012              	.LVL78:
 691:src/xeq.c     **** 	return 8;
 1013              		.loc 1 691 10 view .LVU283
 1014              	.LBE1401:
 1015              	.LBE1402:
 1016              	.LBE1403:
ARM GAS  /tmp/ccK8IvWa.s 			page 97


 1017              	.LBE1405:
1927:src/xeq.c     **** 
 1018              		.loc 1 1927 1 view .LVU284
 1019 005c 2846     		mov	r0, r5
 1020 005e 38BD     		pop	{r3, r4, r5, pc}
 1021              	.LVL79:
 1022              	.L83:
 1023              	.LBB1406:
 1024              	.LBB1393:
1927:src/xeq.c     **** 
 1025              		.loc 1 1927 1 view .LVU285
 1026 0060 FFF7FEFF 		bl	global_regs.part.0
 1027              	.LVL80:
 1028 0064 E6E7     		b	.L75
 1029              	.L85:
 1030 0066 00BF     		.align	2
 1031              	.L84:
 1032 0068 00000000 		.word	PersistentRam
 1033 006c 00000000 		.word	Error
 1034 0070 00000000 		.word	XromParams
 1035              	.LBE1393:
 1036              	.LBE1406:
 1037              		.cfi_endproc
 1038              	.LFE142:
 1040              		.section	.text.is_xrom,"ax",%progbits
 1041              		.align	1
 1042              		.p2align 2,,3
 1043              		.global	is_xrom
 1044              		.syntax unified
 1045              		.thumb
 1046              		.thumb_func
 1047              		.fpu fpv4-sp-d16
 1049              	is_xrom:
 1050              	.LFB3:
 181:src/xeq.c     **** 	return isXROM(state_pc());
 1051              		.loc 1 181 19 is_stmt 1 view -0
 1052              		.cfi_startproc
 1053              		@ args = 0, pretend = 0, frame = 0
 1054              		@ frame_needed = 0, uses_anonymous_args = 0
 1055              		@ link register save eliminated.
 182:src/xeq.c     **** }
 1056              		.loc 1 182 2 view .LVU287
 182:src/xeq.c     **** }
 1057              		.loc 1 182 9 is_stmt 0 view .LVU288
 1058 0000 044B     		ldr	r3, .L87
 1059 0002 B3F8E007 		ldrh	r0, [r3, #2016]
 1060 0006 800B     		lsrs	r0, r0, #14
 183:src/xeq.c     **** 
 1061              		.loc 1 183 1 view .LVU289
 1062 0008 A0F10300 		sub	r0, #3
 1063 000c B0FA80F0 		clz	r0, r0
 1064 0010 4009     		lsrs	r0, r0, #5
 1065 0012 7047     		bx	lr
 1066              	.L88:
 1067              		.align	2
 1068              	.L87:
 1069 0014 00000000 		.word	PersistentRam
ARM GAS  /tmp/ccK8IvWa.s 			page 98


 1070              		.cfi_endproc
 1071              	.LFE3:
 1073              		.section	.text.move_retstk,"ax",%progbits
 1074              		.align	1
 1075              		.p2align 2,,3
 1076              		.global	move_retstk
 1077              		.syntax unified
 1078              		.thumb
 1079              		.thumb_func
 1080              		.fpu fpv4-sp-d16
 1082              	move_retstk:
 1083              	.LVL81:
 1084              	.LFB4:
 192:src/xeq.c     **** #ifndef REALBUILD
 1085              		.loc 1 192 1 is_stmt 1 view -0
 1086              		.cfi_startproc
 1087              		@ args = 0, pretend = 0, frame = 0
 1088              		@ frame_needed = 0, uses_anonymous_args = 0
 195:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 1089              		.loc 1 195 2 view .LVU291
 195:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 1090              		.loc 1 195 6 is_stmt 0 view .LVU292
 1091 0000 1A4B     		ldr	r3, .L100
 195:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 1092              		.loc 1 195 5 view .LVU293
 1093 0002 93F90130 		ldrsb	r3, [r3, #1]
 1094 0006 002B     		cmp	r3, #0
 1095 0008 24DB     		blt	.L98
 200:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1096              		.loc 1 200 2 is_stmt 1 view .LVU294
 192:src/xeq.c     **** #ifndef REALBUILD
 1097              		.loc 1 192 1 is_stmt 0 view .LVU295
 1098 000a 70B5     		push	{r4, r5, r6, lr}
 1099              		.cfi_def_cfa_offset 16
 1100              		.cfi_offset 4, -16
 1101              		.cfi_offset 5, -12
 1102              		.cfi_offset 6, -8
 1103              		.cfi_offset 14, -4
 200:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1104              		.loc 1 200 19 view .LVU296
 1105 000c 184B     		ldr	r3, .L100+4
 200:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1106              		.loc 1 200 17 view .LVU297
 1107 000e 194D     		ldr	r5, .L100+8
 200:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1108              		.loc 1 200 19 view .LVU298
 1109 0010 B3F9E217 		ldrsh	r1, [r3, #2018]
 200:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1110              		.loc 1 200 17 view .LVU299
 1111 0014 2B68     		ldr	r3, [r5]
 1112 0016 0B44     		add	r3, r3, r1
 200:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1113              		.loc 1 200 5 view .LVU300
 1114 0018 C342     		cmn	r3, r0
 1115 001a 0446     		mov	r4, r0
 1116 001c 13D4     		bmi	.L99
 204:src/xeq.c     **** 	RetStk += distance;
ARM GAS  /tmp/ccK8IvWa.s 			page 99


 1117              		.loc 1 204 2 is_stmt 1 view .LVU301
 1118 001e 164E     		ldr	r6, .L100+12
 1119 0020 3368     		ldr	r3, [r6]
 204:src/xeq.c     **** 	RetStk += distance;
 1120              		.loc 1 204 27 is_stmt 0 view .LVU302
 1121 0022 0818     		adds	r0, r1, r0
 1122              	.LVL82:
 204:src/xeq.c     **** 	RetStk += distance;
 1123              		.loc 1 204 60 view .LVU303
 1124 0024 4A42     		rsbs	r2, r1, #0
 204:src/xeq.c     **** 	RetStk += distance;
 1125              		.loc 1 204 2 view .LVU304
 1126 0026 03EB4000 		add	r0, r3, r0, lsl #1
 1127 002a 03EB4101 		add	r1, r3, r1, lsl #1
 1128 002e 5200     		lsls	r2, r2, #1
 1129 0030 FFF7FEFF 		bl	xcopy
 1130              	.LVL83:
 205:src/xeq.c     **** 	RetStkSize += distance;
 1131              		.loc 1 205 2 is_stmt 1 view .LVU305
 205:src/xeq.c     **** 	RetStkSize += distance;
 1132              		.loc 1 205 9 is_stmt 0 view .LVU306
 1133 0034 3368     		ldr	r3, [r6]
 206:src/xeq.c     **** 	return 0;
 1134              		.loc 1 206 13 view .LVU307
 1135 0036 2868     		ldr	r0, [r5]
 205:src/xeq.c     **** 	RetStkSize += distance;
 1136              		.loc 1 205 9 view .LVU308
 1137 0038 03EB4403 		add	r3, r3, r4, lsl #1
 206:src/xeq.c     **** 	return 0;
 1138              		.loc 1 206 13 view .LVU309
 1139 003c 2044     		add	r0, r0, r4
 1140 003e 2860     		str	r0, [r5]
 205:src/xeq.c     **** 	RetStkSize += distance;
 1141              		.loc 1 205 9 view .LVU310
 1142 0040 3360     		str	r3, [r6]
 206:src/xeq.c     **** 	return 0;
 1143              		.loc 1 206 2 is_stmt 1 view .LVU311
 207:src/xeq.c     **** }
 1144              		.loc 1 207 2 view .LVU312
 207:src/xeq.c     **** }
 1145              		.loc 1 207 9 is_stmt 0 view .LVU313
 1146 0042 0020     		movs	r0, #0
 208:src/xeq.c     **** 
 1147              		.loc 1 208 1 view .LVU314
 1148 0044 70BD     		pop	{r4, r5, r6, pc}
 1149              	.LVL84:
 1150              	.L99:
 201:src/xeq.c     **** 		return 1;
 1151              		.loc 1 201 3 is_stmt 1 view .LVU315
 1152              	.LBB1419:
 1153              	.LBI1419:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1154              		.loc 1 523 5 view .LVU316
 1155              	.LBB1420:
 524:src/xeq.c     **** 		Error = e;
 1156              		.loc 1 524 2 view .LVU317
 524:src/xeq.c     **** 		Error = e;
ARM GAS  /tmp/ccK8IvWa.s 			page 100


 1157              		.loc 1 524 12 is_stmt 0 view .LVU318
 1158 0046 0D4B     		ldr	r3, .L100+16
 524:src/xeq.c     **** 		Error = e;
 1159              		.loc 1 524 5 view .LVU319
 1160 0048 1A68     		ldr	r2, [r3]
 1161 004a 52B9     		cbnz	r2, .L94
 1162              	.LVL85:
 1163              	.LBB1421:
 1164              	.LBI1421:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1165              		.loc 1 523 5 is_stmt 1 view .LVU320
 1166              	.LBB1422:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 1167              		.loc 1 525 3 view .LVU321
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 1168              		.loc 1 525 9 is_stmt 0 view .LVU322
 1169 004c 0B22     		movs	r2, #11
 1170 004e 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 1171              		.loc 1 526 3 is_stmt 1 view .LVU323
 1172              	.LBE1422:
 1173              	.LBE1421:
 1174              	.LBE1420:
 1175              	.LBE1419:
 202:src/xeq.c     **** 	}
 1176              		.loc 1 202 10 is_stmt 0 view .LVU324
 1177 0050 0120     		movs	r0, #1
 1178              	.LVL86:
 208:src/xeq.c     **** 
 1179              		.loc 1 208 1 view .LVU325
 1180 0052 70BD     		pop	{r4, r5, r6, pc}
 1181              	.LVL87:
 1182              	.L98:
 1183              		.cfi_def_cfa_offset 0
 1184              		.cfi_restore 4
 1185              		.cfi_restore 5
 1186              		.cfi_restore 6
 1187              		.cfi_restore 14
 1188              	.LBB1424:
 1189              	.LBI1424:
 191:src/xeq.c     **** {
 1190              		.loc 1 191 5 is_stmt 1 view .LVU326
 191:src/xeq.c     **** {
 1191              		.loc 1 191 5 is_stmt 0 view .LVU327
 1192              	.LBE1424:
 196:src/xeq.c     **** 		return 1;
 1193              		.loc 1 196 3 is_stmt 1 view .LVU328
 1194              	.LBB1431:
 1195              	.LBB1425:
 1196              	.LBI1425:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1197              		.loc 1 523 5 view .LVU329
 1198              	.LBB1426:
 524:src/xeq.c     **** 		Error = e;
 1199              		.loc 1 524 2 view .LVU330
 524:src/xeq.c     **** 		Error = e;
 1200              		.loc 1 524 12 is_stmt 0 view .LVU331
ARM GAS  /tmp/ccK8IvWa.s 			page 101


 1201 0054 094B     		ldr	r3, .L100+16
 524:src/xeq.c     **** 		Error = e;
 1202              		.loc 1 524 5 view .LVU332
 1203 0056 1A68     		ldr	r2, [r3]
 1204 0058 2AB9     		cbnz	r2, .L93
 1205              	.LVL88:
 1206              	.LBB1427:
 1207              	.LBI1427:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1208              		.loc 1 523 5 is_stmt 1 view .LVU333
 1209              	.LBB1428:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 1210              		.loc 1 525 3 view .LVU334
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 1211              		.loc 1 525 9 is_stmt 0 view .LVU335
 1212 005a 0722     		movs	r2, #7
 1213 005c 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 1214              		.loc 1 526 3 is_stmt 1 view .LVU336
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 1215              		.loc 1 525 9 is_stmt 0 view .LVU337
 1216 005e 0120     		movs	r0, #1
 1217              	.LVL89:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 1218              		.loc 1 525 9 view .LVU338
 1219 0060 7047     		bx	lr
 1220              	.LVL90:
 1221              	.L94:
 1222              		.cfi_def_cfa_offset 16
 1223              		.cfi_offset 4, -16
 1224              		.cfi_offset 5, -12
 1225              		.cfi_offset 6, -8
 1226              		.cfi_offset 14, -4
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 1227              		.loc 1 525 9 view .LVU339
 1228              	.LBE1428:
 1229              	.LBE1427:
 1230              	.LBE1426:
 1231              	.LBE1425:
 1232              	.LBE1431:
 1233              	.LBB1432:
 1234              	.LBB1423:
 1235 0062 0120     		movs	r0, #1
 1236              	.LVL91:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 1237              		.loc 1 525 9 view .LVU340
 1238              	.LBE1423:
 1239              	.LBE1432:
 208:src/xeq.c     **** 
 1240              		.loc 1 208 1 view .LVU341
 1241 0064 70BD     		pop	{r4, r5, r6, pc}
 1242              	.LVL92:
 1243              	.L93:
 1244              		.cfi_def_cfa_offset 0
 1245              		.cfi_restore 4
 1246              		.cfi_restore 5
 1247              		.cfi_restore 6
ARM GAS  /tmp/ccK8IvWa.s 			page 102


 1248              		.cfi_restore 14
 1249              	.LBB1433:
 1250              	.LBB1430:
 1251              	.LBB1429:
 208:src/xeq.c     **** 
 1252              		.loc 1 208 1 view .LVU342
 1253 0066 0120     		movs	r0, #1
 1254              	.LVL93:
 208:src/xeq.c     **** 
 1255              		.loc 1 208 1 view .LVU343
 1256              	.LBE1429:
 1257              	.LBE1430:
 1258              	.LBE1433:
 1259 0068 7047     		bx	lr
 1260              	.L101:
 1261 006a 00BF     		.align	2
 1262              	.L100:
 1263 006c 00000000 		.word	XromParams
 1264 0070 00000000 		.word	PersistentRam
 1265 0074 00000000 		.word	RetStkSize
 1266 0078 00000000 		.word	RetStk
 1267 007c 00000000 		.word	Error
 1268              		.cfi_endproc
 1269              	.LFE4:
 1271              		.section	.text.local_levels,"ax",%progbits
 1272              		.align	1
 1273              		.p2align 2,,3
 1274              		.global	local_levels
 1275              		.syntax unified
 1276              		.thumb
 1277              		.thumb_func
 1278              		.fpu fpv4-sp-d16
 1280              	local_levels:
 1281              	.LFB5:
 213:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1282              		.loc 1 213 24 is_stmt 1 view -0
 1283              		.cfi_startproc
 1284              		@ args = 0, pretend = 0, frame = 0
 1285              		@ frame_needed = 0, uses_anonymous_args = 0
 1286              		@ link register save eliminated.
 214:src/xeq.c     **** }
 1287              		.loc 1 214 2 view .LVU345
 214:src/xeq.c     **** }
 1288              		.loc 1 214 9 is_stmt 0 view .LVU346
 1289 0000 064B     		ldr	r3, .L106
 1290 0002 B3F9DE37 		ldrsh	r3, [r3, #2014]
 214:src/xeq.c     **** }
 1291              		.loc 1 214 57 view .LVU347
 1292 0006 002B     		cmp	r3, #0
 1293 0008 01DB     		blt	.L105
 1294 000a 0020     		movs	r0, #0
 215:src/xeq.c     **** 
 1295              		.loc 1 215 1 view .LVU348
 1296 000c 7047     		bx	lr
 1297              	.L105:
 214:src/xeq.c     **** }
 1298              		.loc 1 214 25 discriminator 1 view .LVU349
ARM GAS  /tmp/ccK8IvWa.s 			page 103


 1299 000e 044A     		ldr	r2, .L106+4
 1300 0010 1268     		ldr	r2, [r2]
 214:src/xeq.c     **** }
 1301              		.loc 1 214 57 discriminator 1 view .LVU350
 1302 0012 32F81300 		ldrh	r0, [r2, r3, lsl #1]
 1303 0016 C0F30B00 		ubfx	r0, r0, #0, #12
 1304 001a 7047     		bx	lr
 1305              	.L107:
 1306              		.align	2
 1307              	.L106:
 1308 001c 00000000 		.word	PersistentRam
 1309 0020 00000000 		.word	RetStk
 1310              		.cfi_endproc
 1311              	.LFE5:
 1313              		.section	.text.local_regs_rarg,"ax",%progbits
 1314              		.align	1
 1315              		.p2align 2,,3
 1316              		.global	local_regs_rarg
 1317              		.syntax unified
 1318              		.thumb
 1319              		.thumb_func
 1320              		.fpu fpv4-sp-d16
 1322              	local_regs_rarg:
 1323              	.LVL94:
 1324              	.LFB6:
 221:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 1325              		.loc 1 221 35 is_stmt 1 view -0
 1326              		.cfi_startproc
 1327              		@ args = 0, pretend = 0, frame = 0
 1328              		@ frame_needed = 0, uses_anonymous_args = 0
 1329              		@ link register save eliminated.
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1330              		.loc 1 222 2 view .LVU352
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1331              		.loc 1 222 53 is_stmt 0 view .LVU353
 1332 0000 A0F17E03 		sub	r3, r0, #126
 1333 0004 012B     		cmp	r3, #1
 1334 0006 22D9     		bls	.L111
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1335              		.loc 1 222 53 discriminator 1 view .LVU354
 1336 0008 8028     		cmp	r0, #128
 1337 000a 124B     		ldr	r3, .L115
 1338 000c 10D0     		beq	.L112
 1339              	.LBB1434:
 1340              	.LBI1434:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1341              		.loc 1 918 5 is_stmt 1 view .LVU355
 1342              	.LBB1435:
 919:src/xeq.c     **** }
 1343              		.loc 1 919 2 view .LVU356
 919:src/xeq.c     **** }
 1344              		.loc 1 919 24 is_stmt 0 view .LVU357
 1345 000e B3F8E827 		ldrh	r2, [r3, #2024]
 1346 0012 44F20100 		movw	r0, #16385
 1347              	.LVL95:
 919:src/xeq.c     **** }
 1348              		.loc 1 919 24 view .LVU358
ARM GAS  /tmp/ccK8IvWa.s 			page 104


 1349              	.LBE1435:
 1350              	.LBE1434:
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1351              		.loc 1 222 73 view .LVU359
 1352 0016 1040     		ands	r0, r0, r2
 1353 0018 A0F58040 		sub	r0, r0, #16384
 1354 001c B0FA80F0 		clz	r0, r0
 1355 0020 4009     		lsrs	r0, r0, #5
 1356 0022 0230     		adds	r0, r0, #2
 1357              	.L109:
 223:src/xeq.c     **** }
 1358              		.loc 1 223 2 is_stmt 1 discriminator 8 view .LVU360
 1359              	.LBB1436:
 1360              	.LBI1436:
 213:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1361              		.loc 1 213 5 discriminator 8 view .LVU361
 1362              	.LBB1437:
 214:src/xeq.c     **** }
 1363              		.loc 1 214 2 discriminator 8 view .LVU362
 214:src/xeq.c     **** }
 1364              		.loc 1 214 9 is_stmt 0 discriminator 8 view .LVU363
 1365 0024 B3F9DE37 		ldrsh	r3, [r3, #2014]
 214:src/xeq.c     **** }
 1366              		.loc 1 214 57 discriminator 8 view .LVU364
 1367 0028 002B     		cmp	r3, #0
 1368 002a 07DB     		blt	.L114
 1369              	.L113:
 1370 002c 0020     		movs	r0, #0
 1371              	.LBE1437:
 1372              	.LBE1436:
 224:src/xeq.c     **** 
 1373              		.loc 1 224 1 view .LVU365
 1374 002e 7047     		bx	lr
 1375              	.LVL96:
 1376              	.L112:
 1377              	.LBB1440:
 1378              	.LBB1438:
 214:src/xeq.c     **** }
 1379              		.loc 1 214 9 view .LVU366
 1380 0030 B3F9DE37 		ldrsh	r3, [r3, #2014]
 214:src/xeq.c     **** }
 1381              		.loc 1 214 57 view .LVU367
 1382 0034 002B     		cmp	r3, #0
 1383              	.LBE1438:
 1384              	.LBE1440:
 1385 0036 4FF00300 		mov	r0, #3
 1386              	.LVL97:
 223:src/xeq.c     **** }
 1387              		.loc 1 223 2 is_stmt 1 view .LVU368
 1388              	.LBB1441:
 213:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1389              		.loc 1 213 5 view .LVU369
 1390              	.LBB1439:
 214:src/xeq.c     **** }
 1391              		.loc 1 214 2 view .LVU370
 214:src/xeq.c     **** }
 1392              		.loc 1 214 57 is_stmt 0 view .LVU371
ARM GAS  /tmp/ccK8IvWa.s 			page 105


 1393 003a F7DA     		bge	.L113
 1394              	.L114:
 214:src/xeq.c     **** }
 1395              		.loc 1 214 25 view .LVU372
 1396 003c 064A     		ldr	r2, .L115+4
 1397 003e 1268     		ldr	r2, [r2]
 214:src/xeq.c     **** }
 1398              		.loc 1 214 57 view .LVU373
 1399 0040 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1400 0044 C3F30B03 		ubfx	r3, r3, #0, #12
 1401 0048 43FA00F0 		asr	r0, r3, r0
 1402 004c 7047     		bx	lr
 1403              	.LVL98:
 1404              	.L111:
 214:src/xeq.c     **** }
 1405              		.loc 1 214 57 view .LVU374
 1406 004e 014B     		ldr	r3, .L115
 1407              	.LBE1439:
 1408              	.LBE1441:
 1409 0050 0220     		movs	r0, #2
 1410              	.LVL99:
 214:src/xeq.c     **** }
 1411              		.loc 1 214 57 view .LVU375
 1412 0052 E7E7     		b	.L109
 1413              	.L116:
 1414              		.align	2
 1415              	.L115:
 1416 0054 00000000 		.word	PersistentRam
 1417 0058 00000000 		.word	RetStk
 1418              		.cfi_endproc
 1419              	.LFE6:
 1421              		.section	.text.get_reg_limit,"ax",%progbits
 1422              		.align	1
 1423              		.p2align 2,,3
 1424              		.syntax unified
 1425              		.thumb
 1426              		.thumb_func
 1427              		.fpu fpv4-sp-d16
 1429              	get_reg_limit:
 1430              	.LVL100:
 1431              	.LFB240:
4288:src/xeq.c     **** 
4289:src/xeq.c     **** 
4290:src/xeq.c     **** #ifndef UNIVERSAL_DISPATCH
4291:src/xeq.c     **** 
4292:src/xeq.c     **** 
4293:src/xeq.c     **** /*
4294:src/xeq.c     ****  *  Call a monadic function by reusing the decimal code for integer mode
4295:src/xeq.c     ****  */
4296:src/xeq.c     **** long long int intMonadic(long long int x) {
4297:src/xeq.c     **** 	int s;
4298:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &s);
4299:src/xeq.c     **** 	decNumber rx, r;
4300:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
4301:src/xeq.c     **** 
4302:src/xeq.c     **** 	if (isNULL(monfuncs[f].mondreal))
4303:src/xeq.c     **** 		bad_mode_error();
ARM GAS  /tmp/ccK8IvWa.s 			page 106


4304:src/xeq.c     **** 	else {
4305:src/xeq.c     **** 		FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
4306:src/xeq.c     **** #ifndef REALBUILD
4307:src/xeq.c     **** 		if (check_for_xrom_address(fp) != NULL)
4308:src/xeq.c     **** 			bad_mode_error();
4309:src/xeq.c     **** 		else 
4310:src/xeq.c     **** #endif
4311:src/xeq.c     **** 		{
4312:src/xeq.c     **** 			ullint_to_dn(&rx, vx);
4313:src/xeq.c     **** 			if (s)
4314:src/xeq.c     **** 				dn_minus(&rx, &rx);
4315:src/xeq.c     **** 			if (NULL == fp(&r, &rx))
4316:src/xeq.c     **** 				report_err(ERR_DOMAIN);
4317:src/xeq.c     **** 			else
4318:src/xeq.c     **** 				return intResult(&r);
4319:src/xeq.c     **** 		}
4320:src/xeq.c     **** 	}
4321:src/xeq.c     **** 	return 0;
4322:src/xeq.c     **** }
4323:src/xeq.c     **** 
4324:src/xeq.c     **** /*
4325:src/xeq.c     ****  *  Call a dyadic function by reusing the decimal code for integer mode
4326:src/xeq.c     ****  */
4327:src/xeq.c     **** long long int intDyadic(long long int y, long long int x) {
4328:src/xeq.c     **** 	int sx, sy;
4329:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &sx);
4330:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
4331:src/xeq.c     **** 	decNumber rx, ry, r;
4332:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
4333:src/xeq.c     **** 
4334:src/xeq.c     **** 	if (isNULL(dyfuncs[f].dydreal))
4335:src/xeq.c     **** 		bad_mode_error();
4336:src/xeq.c     **** 	else {
4337:src/xeq.c     **** 		FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
4338:src/xeq.c     **** 
4339:src/xeq.c     **** #ifndef REALBUILD
4340:src/xeq.c     **** 		if (check_for_xrom_address(fp) != NULL)
4341:src/xeq.c     **** 			bad_mode_error();
4342:src/xeq.c     **** 		else 
4343:src/xeq.c     **** #endif
4344:src/xeq.c     **** 		{
4345:src/xeq.c     **** 			ullint_to_dn(&rx, vx);	if (sx) dn_minus(&rx, &rx);
4346:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
4347:src/xeq.c     **** 
4348:src/xeq.c     **** 			if (NULL == fp(&r, &ry, &rx))
4349:src/xeq.c     **** 				report_err(ERR_DOMAIN);
4350:src/xeq.c     **** 			else
4351:src/xeq.c     **** 				return intResult(&r);
4352:src/xeq.c     **** 		}
4353:src/xeq.c     **** 	}
4354:src/xeq.c     **** 	return 0;
4355:src/xeq.c     **** }
4356:src/xeq.c     **** 
4357:src/xeq.c     **** 
4358:src/xeq.c     **** /* Dispatch routine for niladic functions.
4359:src/xeq.c     ****  */
4360:src/xeq.c     **** static void niladic(const opcode op) {
ARM GAS  /tmp/ccK8IvWa.s 			page 107


4361:src/xeq.c     **** 	const unsigned int idx = argKIND(op);
4362:src/xeq.c     **** 
4363:src/xeq.c     **** 	process_cmdline();
4364:src/xeq.c     **** 	if (idx < NUM_NILADIC) {
4365:src/xeq.c     **** 		if (is_intmode() && NILADIC_NOTINT(niladics[idx]))
4366:src/xeq.c     **** 			bad_mode_error();
4367:src/xeq.c     **** 		else if (! isNULL(niladics[idx].niladicf)) {
4368:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
4369:src/xeq.c     **** 			if (dispatch_xrom(fp))
4370:src/xeq.c     **** 				return;
4371:src/xeq.c     **** 			else {
4372:src/xeq.c     **** 				switch (NILADIC_NUMRESULTS(niladics[idx])) {
4373:src/xeq.c     **** 				case 2:	lift_if_enabled();
4374:src/xeq.c     **** 				case 1:	lift_if_enabled();
4375:src/xeq.c     **** 				default:
4376:src/xeq.c     **** 					fp((enum nilop)idx);
4377:src/xeq.c     **** 					break;
4378:src/xeq.c     **** 				}
4379:src/xeq.c     **** 			}
4380:src/xeq.c     **** 		}
4381:src/xeq.c     **** 	} else
4382:src/xeq.c     **** 		illegal(op);
4383:src/xeq.c     **** 	if (idx != OP_rCLX)
4384:src/xeq.c     **** 		set_lift();
4385:src/xeq.c     **** }
4386:src/xeq.c     **** 
4387:src/xeq.c     **** 
4388:src/xeq.c     **** /* Dispatch routine for monadic operations.
4389:src/xeq.c     ****  * Since these functions take an argument from the X register, save it in
4390:src/xeq.c     ****  * lastx and then replace it with their result, we can factor out the common
4391:src/xeq.c     ****  * stack manipulatin code.
4392:src/xeq.c     ****  */
4393:src/xeq.c     **** static void monadic(const opcode op)
4394:src/xeq.c     **** {
4395:src/xeq.c     **** 	unsigned int f;
4396:src/xeq.c     **** 	process_cmdline_set_lift();
4397:src/xeq.c     **** 
4398:src/xeq.c     **** 	f = argKIND(op);
4399:src/xeq.c     **** 	if (f < NUM_MONADIC) {
4400:src/xeq.c     **** 		if (is_intmode()) {
4401:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
4402:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
4403:src/xeq.c     **** 				if (dispatch_xrom(fp))
4404:src/xeq.c     **** 					return;
4405:src/xeq.c     **** 				else {
4406:src/xeq.c     **** 					long long int x = getX_int();
4407:src/xeq.c     **** 					x = fp(x);
4408:src/xeq.c     **** 					setlastX();
4409:src/xeq.c     **** 					setX_int(x);
4410:src/xeq.c     **** 				}
4411:src/xeq.c     **** 			} else
4412:src/xeq.c     **** 				bad_mode_error();
4413:src/xeq.c     **** 		} else {
4414:src/xeq.c     **** 			if (! isNULL(monfuncs[f].mondreal)) {
4415:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
4416:src/xeq.c     **** 				if (dispatch_xrom(fp))
4417:src/xeq.c     **** 					return;
ARM GAS  /tmp/ccK8IvWa.s 			page 108


4418:src/xeq.c     **** 				else {
4419:src/xeq.c     **** 					decNumber x, r;
4420:src/xeq.c     **** 					getX(&x);
4421:src/xeq.c     **** 					if (NULL == fp(&r, &x))
4422:src/xeq.c     **** 						set_NaN(&r);
4423:src/xeq.c     **** 					setlastX();
4424:src/xeq.c     **** 					setX(&r);
4425:src/xeq.c     **** 				}
4426:src/xeq.c     **** 			} else
4427:src/xeq.c     **** 				bad_mode_error();
4428:src/xeq.c     **** 		}
4429:src/xeq.c     **** 	} else
4430:src/xeq.c     **** 		illegal(op);
4431:src/xeq.c     **** }
4432:src/xeq.c     **** 
4433:src/xeq.c     **** static void monadic_cmplex(const opcode op) {
4434:src/xeq.c     **** 	decNumber x, y, rx, ry;
4435:src/xeq.c     **** 	unsigned int f;
4436:src/xeq.c     **** 
4437:src/xeq.c     **** 	process_cmdline_set_lift();
4438:src/xeq.c     **** 
4439:src/xeq.c     **** 	f = argKIND(op);
4440:src/xeq.c     **** 
4441:src/xeq.c     **** 	if (f < NUM_MONADIC) {
4442:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
4443:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
4444:src/xeq.c     **** 			if (dispatch_xrom(fp))
4445:src/xeq.c     **** 				return;
4446:src/xeq.c     **** 			else {
4447:src/xeq.c     **** 				getXY(&x, &y);
4448:src/xeq.c     **** 				fp(&rx, &ry, &x, &y);
4449:src/xeq.c     **** 				setlastXY();
4450:src/xeq.c     **** 				setXY(&rx, &ry);
4451:src/xeq.c     **** 				set_was_complex();
4452:src/xeq.c     **** 			}
4453:src/xeq.c     **** 		} else
4454:src/xeq.c     **** 			bad_mode_error();
4455:src/xeq.c     **** 	} else
4456:src/xeq.c     **** 		illegal(op);
4457:src/xeq.c     **** }
4458:src/xeq.c     **** 
4459:src/xeq.c     **** /***************************************************************************
4460:src/xeq.c     ****  * Dyadic function handling.
4461:src/xeq.c     ****  */
4462:src/xeq.c     **** 
4463:src/xeq.c     **** /* Dispatch routine for dyadic operations.
4464:src/xeq.c     ****  * Again, these functions have a common argument decode and record and
4465:src/xeq.c     ****  * common stack manipulation.
4466:src/xeq.c     ****  */
4467:src/xeq.c     **** static void dyadic(const opcode op) {
4468:src/xeq.c     **** 
4469:src/xeq.c     **** 	unsigned int f;
4470:src/xeq.c     **** 	process_cmdline_set_lift();
4471:src/xeq.c     **** 
4472:src/xeq.c     **** 	f = argKIND(op);
4473:src/xeq.c     **** 	if (f < NUM_DYADIC) {
4474:src/xeq.c     **** 		if (is_intmode()) {
ARM GAS  /tmp/ccK8IvWa.s 			page 109


4475:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
4476:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
4477:src/xeq.c     **** 				if (dispatch_xrom(fp))
4478:src/xeq.c     **** 					return;
4479:src/xeq.c     **** 				else {
4480:src/xeq.c     **** 					long long int x = getX_int();
4481:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
4482:src/xeq.c     **** 					x = fp(y, x);
4483:src/xeq.c     **** 					setlastX();
4484:src/xeq.c     **** 					lower();
4485:src/xeq.c     **** 					setX_int(x);
4486:src/xeq.c     **** 				}
4487:src/xeq.c     **** 			} else
4488:src/xeq.c     **** 				bad_mode_error();
4489:src/xeq.c     **** 		} else {
4490:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydreal)) {
4491:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
4492:src/xeq.c     **** 				if (dispatch_xrom(fp))
4493:src/xeq.c     **** 					return;
4494:src/xeq.c     **** 				else {
4495:src/xeq.c     **** 					decNumber x, y, r;
4496:src/xeq.c     **** 					getXY(&x, &y);
4497:src/xeq.c     **** 					if (NULL == fp(&r, &y, &x))
4498:src/xeq.c     **** 						set_NaN(&r);
4499:src/xeq.c     **** 					setlastX();
4500:src/xeq.c     **** 					lower();
4501:src/xeq.c     **** 					setX(&r);
4502:src/xeq.c     **** 				}
4503:src/xeq.c     **** 			} else
4504:src/xeq.c     **** 				bad_mode_error();
4505:src/xeq.c     **** 		}
4506:src/xeq.c     **** 	} else
4507:src/xeq.c     **** 		illegal(op);
4508:src/xeq.c     **** }
4509:src/xeq.c     **** 
4510:src/xeq.c     **** static void dyadic_cmplex(const opcode op) {
4511:src/xeq.c     **** 	decNumber x1, y1, x2, y2, xr, yr;
4512:src/xeq.c     **** 	unsigned int f;
4513:src/xeq.c     **** 
4514:src/xeq.c     **** 	process_cmdline_set_lift();
4515:src/xeq.c     **** 
4516:src/xeq.c     **** 	f = argKIND(op);
4517:src/xeq.c     **** 	if (f < NUM_DYADIC) {
4518:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
4519:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
4520:src/xeq.c     **** 			if (dispatch_xrom(fp))
4521:src/xeq.c     **** 				return;
4522:src/xeq.c     **** 			else {
4523:src/xeq.c     **** 				getXYZT(&x1, &y1, &x2, &y2);
4524:src/xeq.c     **** 
4525:src/xeq.c     **** 				fp(&xr, &yr, &x2, &y2, &x1, &y1);
4526:src/xeq.c     **** 
4527:src/xeq.c     **** 				setlastXY();
4528:src/xeq.c     **** 				lower2();
4529:src/xeq.c     **** 				setXY(&xr, &yr);
4530:src/xeq.c     **** 				set_was_complex();
4531:src/xeq.c     **** 			}
ARM GAS  /tmp/ccK8IvWa.s 			page 110


4532:src/xeq.c     **** 		} else
4533:src/xeq.c     **** 			bad_mode_error();
4534:src/xeq.c     **** 	} else
4535:src/xeq.c     **** 		illegal(op);
4536:src/xeq.c     **** }
4537:src/xeq.c     **** 
4538:src/xeq.c     **** /* Dispatch routine for triadic operations.
4539:src/xeq.c     ****  * Again, these functions have a common argument decode and record and
4540:src/xeq.c     ****  * common stack manipulation.
4541:src/xeq.c     ****  */
4542:src/xeq.c     **** static void triadic(const opcode op) {
4543:src/xeq.c     **** 	unsigned int f;
4544:src/xeq.c     **** 	process_cmdline_set_lift();
4545:src/xeq.c     **** 
4546:src/xeq.c     **** 	f = argKIND(op);
4547:src/xeq.c     **** 	if (f < NUM_TRIADIC) {
4548:src/xeq.c     **** 		if (is_intmode()) {
4549:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
4550:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
4551:src/xeq.c     **** 				if (dispatch_xrom(fp))
4552:src/xeq.c     **** 					return;
4553:src/xeq.c     **** 				else {
4554:src/xeq.c     **** 					long long int x = getX_int();
4555:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
4556:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
4557:src/xeq.c     **** 					x = fp(z, y, x);
4558:src/xeq.c     **** 					setlastX();
4559:src/xeq.c     **** 					lower();
4560:src/xeq.c     **** 					lower();
4561:src/xeq.c     **** 					setX_int(x);
4562:src/xeq.c     **** 				}
4563:src/xeq.c     **** 			} else
4564:src/xeq.c     **** 				bad_mode_error();
4565:src/xeq.c     **** 		} else {
4566:src/xeq.c     **** 			if (! isNULL(trifuncs[f].trireal)) {
4567:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
4568:src/xeq.c     **** 				if (dispatch_xrom(fp))
4569:src/xeq.c     **** 					return;
4570:src/xeq.c     **** 				else {
4571:src/xeq.c     **** 					decNumber x, y, z, r;
4572:src/xeq.c     **** 					getXYZ(&x, &y, &z);
4573:src/xeq.c     **** 					if (NULL == fp(&r, &z, &y, &x))
4574:src/xeq.c     **** 						set_NaN(&r);
4575:src/xeq.c     **** 					setlastX();
4576:src/xeq.c     **** 					lower();
4577:src/xeq.c     **** 					lower();
4578:src/xeq.c     **** 					setX(&r);
4579:src/xeq.c     **** 				}
4580:src/xeq.c     **** 			} else
4581:src/xeq.c     **** 				bad_mode_error();
4582:src/xeq.c     **** 		}
4583:src/xeq.c     **** 	} else
4584:src/xeq.c     **** 		illegal(op);
4585:src/xeq.c     **** }
4586:src/xeq.c     **** 
4587:src/xeq.c     **** 
4588:src/xeq.c     **** #else // UNIVERSAL_DISPATCH
ARM GAS  /tmp/ccK8IvWa.s 			page 111


4589:src/xeq.c     **** 
4590:src/xeq.c     **** 
4591:src/xeq.c     **** /*
4592:src/xeq.c     ****  *  Call functions by reusing the decimal code for integer mode
4593:src/xeq.c     ****  */
4594:src/xeq.c     **** static long long int universal_dispatch_int(long long int y, long long int x, unsigned int dyadic)
4595:src/xeq.c     **** {
4596:src/xeq.c     **** 	int sx, sy;
4597:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &sx);
4598:src/xeq.c     **** 	unsigned long long int vy;
4599:src/xeq.c     **** 	decNumber rx, ry, r;
4600:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
4601:src/xeq.c     **** 	void (*function_pointer)(void);
4602:src/xeq.c     **** 
4603:src/xeq.c     **** #ifdef SHORT_POINTERS
4604:src/xeq.c     **** 	unsigned short compact_pointer;
4605:src/xeq.c     **** #  define COMPACT_POINTER_TYPE unsigned short
4606:src/xeq.c     **** #else
4607:src/xeq.c     **** 	void (*compact_pointer)(void);
4608:src/xeq.c     **** #  define COMPACT_POINTER_TYPE void (*)(void)
4609:src/xeq.c     **** #endif
4610:src/xeq.c     **** 
4611:src/xeq.c     **** 	if (dyadic) {
4612:src/xeq.c     **** 		vy = extract_value(y, &sy);
4613:src/xeq.c     **** 		compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydreal;
4614:src/xeq.c     **** 	}
4615:src/xeq.c     **** 	else {
4616:src/xeq.c     **** 		compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].mondreal;
4617:src/xeq.c     **** 	}
4618:src/xeq.c     **** 	if (isNULL(compact_pointer)) {
4619:src/xeq.c     **** 		bad_mode_error();
4620:src/xeq.c     **** 	}
4621:src/xeq.c     **** 	else {
4622:src/xeq.c     **** 		function_pointer = (void (*)(void))EXPAND_ADDRESS(compact_pointer);
4623:src/xeq.c     **** #ifndef REALBUILD
4624:src/xeq.c     **** 		if (check_for_xrom_address(function_pointer) != NULL) {
4625:src/xeq.c     **** 			bad_mode_error();
4626:src/xeq.c     **** 		}
4627:src/xeq.c     **** 		else
4628:src/xeq.c     **** #endif
4629:src/xeq.c     **** 		{
4630:src/xeq.c     **** 			void *result;
4631:src/xeq.c     **** 
4632:src/xeq.c     **** 			ullint_to_dn(&rx, vx);		if (sx) dn_minus(&rx, &rx);
4633:src/xeq.c     **** 			if (dyadic) {
4634:src/xeq.c     **** 				ullint_to_dn(&ry, vy);		if (sy) dn_minus(&ry, &ry);
4635:src/xeq.c     **** 				result = ((FP_DYADIC_REAL)function_pointer)(&r, &ry, &rx);
4636:src/xeq.c     **** 			}
4637:src/xeq.c     **** 			else {
4638:src/xeq.c     **** 				result = ((FP_MONADIC_REAL)function_pointer)(&r, &rx);
4639:src/xeq.c     **** 			}
4640:src/xeq.c     **** 			if (NULL == result) {
4641:src/xeq.c     **** 				report_err(ERR_DOMAIN);
4642:src/xeq.c     **** 			}
4643:src/xeq.c     **** 			else {
4644:src/xeq.c     **** 				return intResult(&r);
4645:src/xeq.c     **** 			}
ARM GAS  /tmp/ccK8IvWa.s 			page 112


4646:src/xeq.c     **** 		}
4647:src/xeq.c     **** 	}
4648:src/xeq.c     **** 	return 0;
4649:src/xeq.c     **** #undef COMPACT_POINTER_TYPE
4650:src/xeq.c     **** }
4651:src/xeq.c     **** 
4652:src/xeq.c     **** 
4653:src/xeq.c     **** long long int intMonadic(long long int x)
4654:src/xeq.c     **** {
4655:src/xeq.c     **** 	return universal_dispatch_int(0, x, 0);
4656:src/xeq.c     **** }
4657:src/xeq.c     **** 
4658:src/xeq.c     **** long long int intDyadic(long long int y, long long int x)
4659:src/xeq.c     **** {
4660:src/xeq.c     **** 	return universal_dispatch_int(y, x, 1);
4661:src/xeq.c     **** }
4662:src/xeq.c     **** 
4663:src/xeq.c     **** 
4664:src/xeq.c     **** /*
4665:src/xeq.c     ****  *  Universal dispatch function for niladic, monadic, dyadic and triadic functions, both real and c
4666:src/xeq.c     ****  */
4667:src/xeq.c     **** static void universal_dispatch(const opcode op, const unsigned int operands, const unsigned int com
4668:src/xeq.c     **** {
4669:src/xeq.c     **** 	const int intmode = is_intmode();
4670:src/xeq.c     **** 	volatile long long int ix; // declared volatile to avoid bogus warning about variable possibly bei
4671:src/xeq.c     **** 	const unsigned int f = argKIND(op);
4672:src/xeq.c     **** 	void (*function_pointer)(void);
4673:src/xeq.c     **** 
4674:src/xeq.c     **** #ifdef SHORT_POINTERS
4675:src/xeq.c     **** 	unsigned short compact_pointer;
4676:src/xeq.c     **** #  define COMPACT_POINTER_TYPE unsigned short
4677:src/xeq.c     **** #else
4678:src/xeq.c     **** 	void (*compact_pointer)(void);
4679:src/xeq.c     **** #  define COMPACT_POINTER_TYPE void (*)(void)
4680:src/xeq.c     **** #endif
4681:src/xeq.c     **** 
4682:src/xeq.c     **** 	process_cmdline();
4683:src/xeq.c     **** 	if (operands != 0) {
4684:src/xeq.c     **** 		set_lift();
4685:src/xeq.c     **** 	}
4686:src/xeq.c     **** 	switch (operands) {
4687:src/xeq.c     **** 	default:
4688:src/xeq.c     **** 	case 0:
4689:src/xeq.c     **** 		if (f >= NUM_NILADIC) {
4690:src/xeq.c     **** illegal:
4691:src/xeq.c     **** 			illegal(op);
4692:src/xeq.c     **** 			goto finish_niladic;
4693:src/xeq.c     **** 		}
4694:src/xeq.c     **** 		if (intmode && NILADIC_NOTINT(niladics[f])) {
4695:src/xeq.c     **** 			goto bad_mode;
4696:src/xeq.c     **** 		}
4697:src/xeq.c     **** 		compact_pointer = (COMPACT_POINTER_TYPE)niladics[f].niladicf;
4698:src/xeq.c     **** 		break;
4699:src/xeq.c     **** 
4700:src/xeq.c     **** 	case 1:
4701:src/xeq.c     **** 		if (f >= NUM_MONADIC)
4702:src/xeq.c     **** 			goto illegal;
ARM GAS  /tmp/ccK8IvWa.s 			page 113


4703:src/xeq.c     **** 		if (intmode)
4704:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].monint;
4705:src/xeq.c     **** 		else if (complex)
4706:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].mondcmplx;
4707:src/xeq.c     **** 		else
4708:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].mondreal;
4709:src/xeq.c     **** 		break;
4710:src/xeq.c     **** 
4711:src/xeq.c     **** 	case 2:
4712:src/xeq.c     **** 		if (f >= NUM_DYADIC)
4713:src/xeq.c     **** 			goto illegal;
4714:src/xeq.c     **** 		if (intmode)
4715:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydint;
4716:src/xeq.c     **** 		else if (complex)
4717:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydcmplx;
4718:src/xeq.c     **** 		else
4719:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydreal;
4720:src/xeq.c     **** 		break;
4721:src/xeq.c     **** 
4722:src/xeq.c     **** 	case 3:
4723:src/xeq.c     **** 		if (f >= NUM_TRIADIC)
4724:src/xeq.c     **** 			goto illegal;
4725:src/xeq.c     **** 		if (intmode)
4726:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)trifuncs[f].triint;
4727:src/xeq.c     **** 		else
4728:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)trifuncs[f].trireal;
4729:src/xeq.c     **** 		break;
4730:src/xeq.c     **** 	}
4731:src/xeq.c     **** 	if (isNULL(compact_pointer)) {
4732:src/xeq.c     **** 		if (operands != 0) {
4733:src/xeq.c     **** 			// The original niladic() function doesn't invoke
4734:src/xeq.c     **** 			// bad_mode_error() if the function pointer is null.
4735:src/xeq.c     **** 			// TODO:  Verify that this behavior is really needed.
4736:src/xeq.c     **** bad_mode:
4737:src/xeq.c     **** 			bad_mode_error();
4738:src/xeq.c     **** 		}
4739:src/xeq.c     **** 		goto finish_niladic;
4740:src/xeq.c     **** 	}
4741:src/xeq.c     **** 	function_pointer = (void (*)(void))EXPAND_ADDRESS(compact_pointer);
4742:src/xeq.c     **** 	if (dispatch_xrom(function_pointer)) {
4743:src/xeq.c     **** 		return;
4744:src/xeq.c     **** 	}
4745:src/xeq.c     **** 	if (operands == 0) {
4746:src/xeq.c     **** 		switch (NILADIC_NUMRESULTS(niladics[f])) {
4747:src/xeq.c     **** 		case 2:		lift_if_enabled(); // fall through
4748:src/xeq.c     **** 		case 1:		lift_if_enabled(); break;
4749:src/xeq.c     **** 		}
4750:src/xeq.c     **** 		((FP_NILADIC)function_pointer)((enum nilop)f);
4751:src/xeq.c     **** finish_niladic:
4752:src/xeq.c     **** 		// If an error occurred, we end up here even if a non-niladic function was called.
4753:src/xeq.c     **** 		// set_lift() is always called for non-niladic functions so calling it again does no harm.
4754:src/xeq.c     **** 		if (f != OP_rCLX) {
4755:src/xeq.c     **** 			set_lift();
4756:src/xeq.c     **** 		}
4757:src/xeq.c     **** 	}
4758:src/xeq.c     **** 	else if (intmode) {
4759:src/xeq.c     **** 		long long int iy;
ARM GAS  /tmp/ccK8IvWa.s 			page 114


4760:src/xeq.c     **** 		long long int iz;
4761:src/xeq.c     **** 
4762:src/xeq.c     **** 		ix = getX_int();
4763:src/xeq.c     **** 		iy = get_reg_n_int(regY_idx);
4764:src/xeq.c     **** 		switch (operands) {
4765:src/xeq.c     **** 		default:
4766:src/xeq.c     **** 		case 1:
4767:src/xeq.c     **** 			ix = ((FP_MONADIC_INT)function_pointer)(ix);
4768:src/xeq.c     **** 			break;
4769:src/xeq.c     **** 
4770:src/xeq.c     **** 		case 2:
4771:src/xeq.c     **** 			ix = ((FP_DYADIC_INT)function_pointer)(iy, ix);
4772:src/xeq.c     **** 			break;
4773:src/xeq.c     **** 
4774:src/xeq.c     **** 		case 3:
4775:src/xeq.c     **** 			iz = get_reg_n_int(regZ_idx);
4776:src/xeq.c     **** 			ix = ((FP_TRIADIC_INT)function_pointer)(iz, iy, ix);
4777:src/xeq.c     **** 			break;
4778:src/xeq.c     **** 		}
4779:src/xeq.c     **** 		goto finish_x;
4780:src/xeq.c     **** 	}
4781:src/xeq.c     **** 	else {
4782:src/xeq.c     **** 		decNumber x, y, z, t, r1;
4783:src/xeq.c     **** 
4784:src/xeq.c     **** 		if (operands + complex <= 2) {
4785:src/xeq.c     **** 			getXY(&x, &y);
4786:src/xeq.c     **** 		}
4787:src/xeq.c     **** 		else {
4788:src/xeq.c     **** 			getXYZT(&x, &y, &z, &t);
4789:src/xeq.c     **** 		}
4790:src/xeq.c     **** 
4791:src/xeq.c     **** 		if (complex) {
4792:src/xeq.c     **** 			decNumber r2;
4793:src/xeq.c     **** 
4794:src/xeq.c     **** 			if (operands == 1) {
4795:src/xeq.c     **** 				((FP_MONADIC_CMPLX)function_pointer)(&r1, &r2, &x, &y);
4796:src/xeq.c     **** 			}
4797:src/xeq.c     **** 			else {
4798:src/xeq.c     **** 				((FP_DYADIC_CMPLX)function_pointer)(&r1, &r2, &z, &t, &x, &y);
4799:src/xeq.c     **** 			}
4800:src/xeq.c     **** 			setlastXY();
4801:src/xeq.c     **** 			if (operands != 1) {
4802:src/xeq.c     **** 				lower2();
4803:src/xeq.c     **** 			}
4804:src/xeq.c     **** 			setXY(&r1, &r2);
4805:src/xeq.c     **** 			set_was_complex();
4806:src/xeq.c     **** 		}
4807:src/xeq.c     **** 		else { // real
4808:src/xeq.c     **** 			void *result;
4809:src/xeq.c     **** 
4810:src/xeq.c     **** 			switch (operands) {
4811:src/xeq.c     **** 			default:
4812:src/xeq.c     **** 			case 1:
4813:src/xeq.c     **** 				result = ((FP_MONADIC_REAL)function_pointer)(&r1, &x);
4814:src/xeq.c     **** 				break;
4815:src/xeq.c     **** 
4816:src/xeq.c     **** 			case 2:
ARM GAS  /tmp/ccK8IvWa.s 			page 115


4817:src/xeq.c     **** 				result = ((FP_DYADIC_REAL)function_pointer)(&r1, &y, &x);
4818:src/xeq.c     **** 				break;
4819:src/xeq.c     **** 
4820:src/xeq.c     **** 			case 3:
4821:src/xeq.c     **** 				result = ((FP_TRIADIC_REAL)function_pointer)(&r1, &z, &y, &x);
4822:src/xeq.c     **** 				break;
4823:src/xeq.c     **** 			}
4824:src/xeq.c     **** 			if (NULL == result) {
4825:src/xeq.c     **** 				set_NaN(&r1);
4826:src/xeq.c     **** 			}
4827:src/xeq.c     **** finish_x:
4828:src/xeq.c     **** 			setlastX();
4829:src/xeq.c     **** 			switch (operands) {
4830:src/xeq.c     **** 			case 3:		lower(); // fall through
4831:src/xeq.c     **** 			case 2:		lower(); break;
4832:src/xeq.c     **** 			}
4833:src/xeq.c     **** 			if (!intmode) {
4834:src/xeq.c     **** 				setX(&r1);
4835:src/xeq.c     **** 			}
4836:src/xeq.c     **** 			else {
4837:src/xeq.c     **** 				setX_int(ix);
4838:src/xeq.c     **** 			}
4839:src/xeq.c     **** 		}
4840:src/xeq.c     **** 	}
4841:src/xeq.c     **** #undef COMPACT_POINTER_TYPE
4842:src/xeq.c     **** }
4843:src/xeq.c     **** 
4844:src/xeq.c     **** 
4845:src/xeq.c     **** static void niladic(const opcode op)
4846:src/xeq.c     **** {
4847:src/xeq.c     **** 	universal_dispatch(op, 0, 0);
4848:src/xeq.c     **** }
4849:src/xeq.c     **** 
4850:src/xeq.c     **** static void monadic(const opcode op)
4851:src/xeq.c     **** {
4852:src/xeq.c     **** 	universal_dispatch(op, 1, 0);
4853:src/xeq.c     **** }
4854:src/xeq.c     **** 
4855:src/xeq.c     **** static void monadic_cmplex(const opcode op)
4856:src/xeq.c     **** {
4857:src/xeq.c     **** 	universal_dispatch(op, 1, 1);
4858:src/xeq.c     **** }
4859:src/xeq.c     **** 
4860:src/xeq.c     **** static void dyadic(const opcode op)
4861:src/xeq.c     **** {
4862:src/xeq.c     **** 	universal_dispatch(op, 2, 0);
4863:src/xeq.c     **** }
4864:src/xeq.c     **** 
4865:src/xeq.c     **** static void dyadic_cmplex(const opcode op)
4866:src/xeq.c     **** {
4867:src/xeq.c     **** 	universal_dispatch(op, 2, 1);
4868:src/xeq.c     **** }
4869:src/xeq.c     **** 
4870:src/xeq.c     **** static void triadic(const opcode op)
4871:src/xeq.c     **** {
4872:src/xeq.c     **** 	universal_dispatch(op, 3, 0);
4873:src/xeq.c     **** }
ARM GAS  /tmp/ccK8IvWa.s 			page 116


4874:src/xeq.c     **** 
4875:src/xeq.c     **** 
4876:src/xeq.c     **** #endif // UNIVERSAL_DISPATCH
4877:src/xeq.c     **** 
4878:src/xeq.c     **** 
4879:src/xeq.c     **** /*
4880:src/xeq.c     ****  *  Helper to check the maximum allowed register number, 
4881:src/xeq.c     ****  *  depending on command flags and current allocation.
4882:src/xeq.c     ****  *  This needs to be seperate because its called twice for indirect arguments
4883:src/xeq.c     ****  */
4884:src/xeq.c     **** static unsigned int get_reg_limit(unsigned int cmd, unsigned int arg)
4885:src/xeq.c     **** {
 1432              		.loc 1 4885 1 is_stmt 1 view -0
 1433              		.cfi_startproc
 1434              		@ args = 0, pretend = 0, frame = 0
 1435              		@ frame_needed = 0, uses_anonymous_args = 0
4886:src/xeq.c     **** 	unsigned int lim = LOCAL_REG_BASE;
 1436              		.loc 1 4886 2 view .LVU377
4887:src/xeq.c     **** 
4888:src/xeq.c     **** 	if (arg < TOPREALREG) {
 1437              		.loc 1 4888 2 view .LVU378
 1438              		.loc 1 4888 5 is_stmt 0 view .LVU379
 1439 0000 6329     		cmp	r1, #99
4885:src/xeq.c     **** 	unsigned int lim = LOCAL_REG_BASE;
 1440              		.loc 1 4885 1 view .LVU380
 1441 0002 38B5     		push	{r3, r4, r5, lr}
 1442              		.cfi_def_cfa_offset 16
 1443              		.cfi_offset 3, -16
 1444              		.cfi_offset 4, -12
 1445              		.cfi_offset 5, -8
 1446              		.cfi_offset 14, -4
4885:src/xeq.c     **** 	unsigned int lim = LOCAL_REG_BASE;
 1447              		.loc 1 4885 1 view .LVU381
 1448 0004 0446     		mov	r4, r0
 1449              		.loc 1 4888 5 view .LVU382
 1450 0006 15D8     		bhi	.L118
4889:src/xeq.c     **** 		// Range checking for registers against variable boundary
4890:src/xeq.c     **** 		lim = global_regs_rarg((enum rarg) cmd) - 1;
 1451              		.loc 1 4890 3 is_stmt 1 view .LVU383
 1452              	.LVL101:
 1453              	.LBB1455:
 1454              	.LBI1455:
 237:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 1455              		.loc 1 237 14 view .LVU384
 1456              	.LBB1456:
 238:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1457              		.loc 1 238 2 view .LVU385
 1458              	.LBB1457:
 1459              	.LBI1457:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1460              		.loc 1 918 5 view .LVU386
 1461              	.LBB1458:
 919:src/xeq.c     **** }
 1462              		.loc 1 919 2 view .LVU387
 919:src/xeq.c     **** }
 1463              		.loc 1 919 24 is_stmt 0 view .LVU388
 1464 0008 284A     		ldr	r2, .L138
ARM GAS  /tmp/ccK8IvWa.s 			page 117


 1465 000a B2F8E817 		ldrh	r1, [r2, #2024]
 1466              	.LVL102:
 919:src/xeq.c     **** }
 1467              		.loc 1 919 24 view .LVU389
 1468 000e 44F20103 		movw	r3, #16385
 1469              	.LBE1458:
 1470              	.LBE1457:
 238:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1471              		.loc 1 238 5 view .LVU390
 1472 0012 0B40     		ands	r3, r3, r1
 1473 0014 B3F5804F 		cmp	r3, #16384
 1474 0018 2DD0     		beq	.L119
 238:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1475              		.loc 1 238 19 view .LVU391
 1476 001a 8028     		cmp	r0, #128
 1477 001c 38D0     		beq	.L135
 243:src/xeq.c     **** }
 1478              		.loc 1 243 3 is_stmt 1 view .LVU392
 243:src/xeq.c     **** }
 1479              		.loc 1 243 10 is_stmt 0 view .LVU393
 1480 001e 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1481              	.LVL103:
 1482              	.L123:
 243:src/xeq.c     **** }
 1483              		.loc 1 243 10 view .LVU394
 1484 0022 2349     		ldr	r1, .L138+4
 1485              	.LBE1456:
 1486              	.LBE1455:
 1487              		.loc 1 4890 7 view .LVU395
 1488 0024 0138     		subs	r0, r0, #1
 1489              	.LVL104:
 1490              		.loc 1 4890 7 view .LVU396
 1491 0026 2501     		lsls	r5, r4, #4
 1492              	.LVL105:
 1493              	.L124:
4891:src/xeq.c     **** 	}
4892:src/xeq.c     **** 	else if (argcmds[cmd].local) {
4893:src/xeq.c     **** 		// Range checking for local registers
4894:src/xeq.c     **** 		lim = NUMREG - 1 + local_regs_rarg((enum rarg) cmd);
4895:src/xeq.c     **** 	}
4896:src/xeq.c     **** 	if (argcmds[cmd].cmplx) {
 1494              		.loc 1 4896 2 is_stmt 1 view .LVU397
 1495              		.loc 1 4896 18 is_stmt 0 view .LVU398
 1496 0028 2944     		add	r1, r1, r5
 1497 002a 4B79     		ldrb	r3, [r1, #5]	@ zero_extendqisi2
 1498              		.loc 1 4896 5 view .LVU399
 1499 002c D906     		lsls	r1, r3, #27
 1500 002e 10D5     		bpl	.L125
 1501              	.L136:
4897:src/xeq.c     **** 		// one short of the last avialable register for complex access
4898:src/xeq.c     **** 		--lim;
 1502              		.loc 1 4898 3 is_stmt 1 view .LVU400
 1503 0030 0138     		subs	r0, r0, #1
 1504              	.LVL106:
 1505              	.L117:
4899:src/xeq.c     **** 	}
4900:src/xeq.c     **** 	else if (cmd == RARG_STOSTK || cmd == RARG_RCLSTK) {
ARM GAS  /tmp/ccK8IvWa.s 			page 118


4901:src/xeq.c     **** 		// avoid stack clash error in these commands
4902:src/xeq.c     **** 		lim -= stack_size() - 1;
4903:src/xeq.c     **** 	}
4904:src/xeq.c     **** 	return lim;
4905:src/xeq.c     **** }
 1506              		.loc 1 4905 1 is_stmt 0 view .LVU401
 1507 0032 38BD     		pop	{r3, r4, r5, pc}
 1508              	.LVL107:
 1509              	.L118:
4892:src/xeq.c     **** 		// Range checking for local registers
 1510              		.loc 1 4892 7 is_stmt 1 view .LVU402
4892:src/xeq.c     **** 		// Range checking for local registers
 1511              		.loc 1 4892 23 is_stmt 0 view .LVU403
 1512 0034 1E49     		ldr	r1, .L138+4
 1513              	.LVL108:
4892:src/xeq.c     **** 		// Range checking for local registers
 1514              		.loc 1 4892 23 view .LVU404
 1515 0036 01EB0013 		add	r3, r1, r0, lsl #4
 1516 003a 0501     		lsls	r5, r0, #4
 1517 003c 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
4892:src/xeq.c     **** 		// Range checking for local registers
 1518              		.loc 1 4892 10 view .LVU405
 1519 003e 1807     		lsls	r0, r3, #28
 1520              	.LVL109:
4892:src/xeq.c     **** 		// Range checking for local registers
 1521              		.loc 1 4892 10 view .LVU406
 1522 0040 17D5     		bpl	.L129
4894:src/xeq.c     **** 	}
 1523              		.loc 1 4894 3 is_stmt 1 view .LVU407
4894:src/xeq.c     **** 	}
 1524              		.loc 1 4894 22 is_stmt 0 view .LVU408
 1525 0042 E0B2     		uxtb	r0, r4
 1526 0044 FFF7FEFF 		bl	local_regs_rarg
 1527              	.LVL110:
4896:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1528              		.loc 1 4896 18 view .LVU409
 1529 0048 2944     		add	r1, r1, r5
4894:src/xeq.c     **** 	}
 1530              		.loc 1 4894 20 view .LVU410
 1531 004a 6F30     		adds	r0, r0, #111
 1532              	.LVL111:
4896:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1533              		.loc 1 4896 2 is_stmt 1 view .LVU411
4896:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1534              		.loc 1 4896 18 is_stmt 0 view .LVU412
 1535 004c 4B79     		ldrb	r3, [r1, #5]	@ zero_extendqisi2
4896:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1536              		.loc 1 4896 5 view .LVU413
 1537 004e D906     		lsls	r1, r3, #27
 1538 0050 EED4     		bmi	.L136
 1539              	.L125:
4900:src/xeq.c     **** 		// avoid stack clash error in these commands
 1540              		.loc 1 4900 7 is_stmt 1 view .LVU414
4900:src/xeq.c     **** 		// avoid stack clash error in these commands
 1541              		.loc 1 4900 30 is_stmt 0 view .LVU415
 1542 0052 223C     		subs	r4, r4, #34
 1543              	.LVL112:
ARM GAS  /tmp/ccK8IvWa.s 			page 119


4900:src/xeq.c     **** 		// avoid stack clash error in these commands
 1544              		.loc 1 4900 10 view .LVU416
 1545 0054 012C     		cmp	r4, #1
 1546 0056 ECD8     		bhi	.L117
4902:src/xeq.c     **** 	}
 1547              		.loc 1 4902 3 is_stmt 1 view .LVU417
 1548              	.LBB1465:
 1549              	.LBI1465:
 689:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 1550              		.loc 1 689 5 view .LVU418
 1551              	.LBB1466:
 690:src/xeq.c     **** 		return 4;
 1552              		.loc 1 690 2 view .LVU419
 690:src/xeq.c     **** 		return 4;
 1553              		.loc 1 690 6 is_stmt 0 view .LVU420
 1554 0058 144B     		ldr	r3, .L138
 1555 005a 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 690:src/xeq.c     **** 		return 4;
 1556              		.loc 1 690 5 view .LVU421
 1557 005e 1207     		lsls	r2, r2, #28
 1558 0060 14D5     		bpl	.L130
 1559              	.LBB1467:
 1560              	.LBI1467:
 181:src/xeq.c     **** 	return isXROM(state_pc());
 1561              		.loc 1 181 5 is_stmt 1 view .LVU422
 1562              	.LBB1468:
 182:src/xeq.c     **** }
 1563              		.loc 1 182 2 view .LVU423
 182:src/xeq.c     **** }
 1564              		.loc 1 182 9 is_stmt 0 view .LVU424
 1565 0062 B3F8E037 		ldrh	r3, [r3, #2016]
 1566              	.LBE1468:
 1567              	.LBE1467:
 690:src/xeq.c     **** 		return 4;
 1568              		.loc 1 690 27 view .LVU425
 1569 0066 9B0B     		lsrs	r3, r3, #14
 1570 0068 032B     		cmp	r3, #3
 1571 006a 16D0     		beq	.L137
 1572 006c 0723     		movs	r3, #7
 1573              	.L127:
 1574              	.LBE1466:
 1575              	.LBE1465:
4902:src/xeq.c     **** 	}
 1576              		.loc 1 4902 7 view .LVU426
 1577 006e C01A     		subs	r0, r0, r3
 1578              	.LVL113:
4904:src/xeq.c     **** }
 1579              		.loc 1 4904 2 is_stmt 1 view .LVU427
 1580              		.loc 1 4905 1 is_stmt 0 view .LVU428
 1581 0070 38BD     		pop	{r3, r4, r5, pc}
 1582              	.LVL114:
 1583              	.L129:
4886:src/xeq.c     **** 
 1584              		.loc 1 4886 15 view .LVU429
 1585 0072 7020     		movs	r0, #112
 1586 0074 D8E7     		b	.L124
 1587              	.LVL115:
ARM GAS  /tmp/ccK8IvWa.s 			page 120


 1588              	.L119:
 1589              	.LBB1471:
 1590              	.LBB1463:
 1591              	.LBB1459:
 1592              	.LBI1459:
 237:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 1593              		.loc 1 237 14 is_stmt 1 view .LVU430
 1594              	.LBB1460:
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1595              		.loc 1 239 3 view .LVU431
 240:src/xeq.c     **** 	}
 1596              		.loc 1 240 26 is_stmt 0 view .LVU432
 1597 0076 A4F17E03 		sub	r3, r4, #126
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1598              		.loc 1 239 24 view .LVU433
 1599 007a 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1600              	.LVL116:
 240:src/xeq.c     **** 	}
 1601              		.loc 1 240 56 view .LVU434
 1602 007e DBB2     		uxtb	r3, r3
 1603 0080 012B     		cmp	r3, #1
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1604              		.loc 1 239 13 view .LVU435
 1605 0082 A0F10C00 		sub	r0, r0, #12
 1606              	.LVL117:
 240:src/xeq.c     **** 	}
 1607              		.loc 1 240 3 is_stmt 1 view .LVU436
 240:src/xeq.c     **** 	}
 1608              		.loc 1 240 56 is_stmt 0 view .LVU437
 1609 0086 CCD9     		bls	.L123
 240:src/xeq.c     **** 	}
 1610              		.loc 1 240 67 view .LVU438
 1611 0088 4010     		asrs	r0, r0, #1
 1612              	.LVL118:
 240:src/xeq.c     **** 	}
 1613              		.loc 1 240 67 view .LVU439
 1614 008a CAE7     		b	.L123
 1615              	.LVL119:
 1616              	.L130:
 240:src/xeq.c     **** 	}
 1617              		.loc 1 240 67 view .LVU440
 1618              	.LBE1460:
 1619              	.LBE1459:
 1620              	.LBE1463:
 1621              	.LBE1471:
 1622              	.LBB1472:
 1623              	.LBB1469:
 1624 008c 0323     		movs	r3, #3
 1625 008e EEE7     		b	.L127
 1626              	.LVL120:
 1627              	.L135:
 240:src/xeq.c     **** 	}
 1628              		.loc 1 240 67 view .LVU441
 1629              	.LBE1469:
 1630              	.LBE1472:
 1631              	.LBB1473:
 1632              	.LBB1464:
ARM GAS  /tmp/ccK8IvWa.s 			page 121


 1633              	.LBB1462:
 237:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 1634              		.loc 1 237 14 is_stmt 1 view .LVU442
 1635              	.LBB1461:
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1636              		.loc 1 239 3 view .LVU443
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1637              		.loc 1 239 24 is_stmt 0 view .LVU444
 1638 0090 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1639              	.LVL121:
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1640              		.loc 1 239 13 view .LVU445
 1641 0094 0C38     		subs	r0, r0, #12
 1642              	.LVL122:
 240:src/xeq.c     **** 	}
 1643              		.loc 1 240 3 is_stmt 1 view .LVU446
 240:src/xeq.c     **** 	}
 1644              		.loc 1 240 67 is_stmt 0 view .LVU447
 1645 0096 4010     		asrs	r0, r0, #1
 1646              	.LVL123:
 240:src/xeq.c     **** 	}
 1647              		.loc 1 240 67 view .LVU448
 1648 0098 C3E7     		b	.L123
 1649              	.LVL124:
 1650              	.L137:
 240:src/xeq.c     **** 	}
 1651              		.loc 1 240 67 view .LVU449
 1652              	.LBE1461:
 1653              	.LBE1462:
 1654              	.LBE1464:
 1655              	.LBE1473:
 1656              	.LBB1474:
 1657              	.LBB1470:
 690:src/xeq.c     **** 		return 4;
 1658              		.loc 1 690 44 view .LVU450
 1659 009a 064B     		ldr	r3, .L138+8
 690:src/xeq.c     **** 		return 4;
 1660              		.loc 1 690 41 view .LVU451
 1661 009c 93F90130 		ldrsb	r3, [r3, #1]
 1662 00a0 002B     		cmp	r3, #0
 1663 00a2 B4BF     		ite	lt
 1664 00a4 0723     		movlt	r3, #7
 1665 00a6 0323     		movge	r3, #3
 1666 00a8 E1E7     		b	.L127
 1667              	.L139:
 1668 00aa 00BF     		.align	2
 1669              	.L138:
 1670 00ac 00000000 		.word	PersistentRam
 1671 00b0 00000000 		.word	argcmds
 1672 00b4 00000000 		.word	XromParams
 1673              	.LBE1470:
 1674              	.LBE1474:
 1675              		.cfi_endproc
 1676              	.LFE240:
 1678              		.section	.text.local_regs,"ax",%progbits
 1679              		.align	1
 1680              		.p2align 2,,3
ARM GAS  /tmp/ccK8IvWa.s 			page 122


 1681              		.global	local_regs
 1682              		.syntax unified
 1683              		.thumb
 1684              		.thumb_func
 1685              		.fpu fpv4-sp-d16
 1687              	local_regs:
 1688              	.LFB7:
 229:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 1689              		.loc 1 229 22 is_stmt 1 view -0
 1690              		.cfi_startproc
 1691              		@ args = 0, pretend = 0, frame = 0
 1692              		@ frame_needed = 0, uses_anonymous_args = 0
 1693              		@ link register save eliminated.
 230:src/xeq.c     **** }
 1694              		.loc 1 230 2 view .LVU453
 1695              	.LVL125:
 1696              	.LBB1475:
 1697              	.LBI1475:
 221:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 1698              		.loc 1 221 5 view .LVU454
 1699              	.LBB1476:
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1700              		.loc 1 222 2 view .LVU455
 1701              	.LBB1477:
 1702              	.LBI1477:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1703              		.loc 1 918 5 view .LVU456
 1704              	.LBB1478:
 919:src/xeq.c     **** }
 1705              		.loc 1 919 2 view .LVU457
 919:src/xeq.c     **** }
 1706              		.loc 1 919 2 is_stmt 0 view .LVU458
 1707              	.LBE1478:
 1708              	.LBE1477:
 223:src/xeq.c     **** }
 1709              		.loc 1 223 2 is_stmt 1 view .LVU459
 1710              	.LBB1481:
 1711              	.LBI1481:
 213:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1712              		.loc 1 213 5 view .LVU460
 1713              	.LBB1482:
 214:src/xeq.c     **** }
 1714              		.loc 1 214 2 view .LVU461
 214:src/xeq.c     **** }
 1715              		.loc 1 214 9 is_stmt 0 view .LVU462
 1716 0000 0C4B     		ldr	r3, .L144
 1717 0002 B3F9DE27 		ldrsh	r2, [r3, #2014]
 214:src/xeq.c     **** }
 1718              		.loc 1 214 57 view .LVU463
 1719 0006 002A     		cmp	r2, #0
 1720 0008 01DB     		blt	.L143
 1721 000a 0020     		movs	r0, #0
 1722              	.LVL126:
 214:src/xeq.c     **** }
 1723              		.loc 1 214 57 view .LVU464
 1724              	.LBE1482:
 1725              	.LBE1481:
ARM GAS  /tmp/ccK8IvWa.s 			page 123


 1726              	.LBE1476:
 1727              	.LBE1475:
 231:src/xeq.c     **** 
 1728              		.loc 1 231 1 view .LVU465
 1729 000c 7047     		bx	lr
 1730              	.LVL127:
 1731              	.L143:
 1732              	.LBB1494:
 1733              	.LBB1493:
 1734              	.LBB1487:
 1735              	.LBB1479:
 919:src/xeq.c     **** }
 1736              		.loc 1 919 24 view .LVU466
 1737 000e B3F8E807 		ldrh	r0, [r3, #2024]
 1738              	.LBE1479:
 1739              	.LBE1487:
 1740              	.LBB1488:
 1741              	.LBB1483:
 214:src/xeq.c     **** }
 1742              		.loc 1 214 25 view .LVU467
 1743 0012 0949     		ldr	r1, .L144+4
 1744              	.LBE1483:
 1745              	.LBE1488:
 1746              	.LBB1489:
 1747              	.LBB1480:
 919:src/xeq.c     **** }
 1748              		.loc 1 919 24 view .LVU468
 1749 0014 44F20103 		movw	r3, #16385
 1750              	.LBE1480:
 1751              	.LBE1489:
 1752              	.LBB1490:
 1753              	.LBB1484:
 214:src/xeq.c     **** }
 1754              		.loc 1 214 25 view .LVU469
 1755 0018 0968     		ldr	r1, [r1]
 1756              	.LBE1484:
 1757              	.LBE1490:
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1758              		.loc 1 222 73 view .LVU470
 1759 001a 0340     		ands	r3, r3, r0
 1760 001c A3F58043 		sub	r3, r3, #16384
 1761              	.LBB1491:
 1762              	.LBB1485:
 214:src/xeq.c     **** }
 1763              		.loc 1 214 57 view .LVU471
 1764 0020 31F81200 		ldrh	r0, [r1, r2, lsl #1]
 1765              	.LBE1485:
 1766              	.LBE1491:
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1767              		.loc 1 222 73 view .LVU472
 1768 0024 B3FA83F3 		clz	r3, r3
 1769 0028 5B09     		lsrs	r3, r3, #5
 1770 002a 0233     		adds	r3, r3, #2
 1771              	.LBB1492:
 1772              	.LBB1486:
 214:src/xeq.c     **** }
 1773              		.loc 1 214 57 view .LVU473
ARM GAS  /tmp/ccK8IvWa.s 			page 124


 1774 002c C0F30B00 		ubfx	r0, r0, #0, #12
 1775 0030 1841     		asrs	r0, r0, r3
 1776 0032 7047     		bx	lr
 1777              	.L145:
 1778              		.align	2
 1779              	.L144:
 1780 0034 00000000 		.word	PersistentRam
 1781 0038 00000000 		.word	RetStk
 1782              	.LBE1486:
 1783              	.LBE1492:
 1784              	.LBE1493:
 1785              	.LBE1494:
 1786              		.cfi_endproc
 1787              	.LFE7:
 1789              		.section	.text.global_regs_rarg,"ax",%progbits
 1790              		.align	1
 1791              		.p2align 2,,3
 1792              		.global	global_regs_rarg
 1793              		.syntax unified
 1794              		.thumb
 1795              		.thumb_func
 1796              		.fpu fpv4-sp-d16
 1798              	global_regs_rarg:
 1799              	.LVL128:
 1800              	.LFB8:
 237:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 1801              		.loc 1 237 45 is_stmt 1 view -0
 1802              		.cfi_startproc
 1803              		@ args = 0, pretend = 0, frame = 0
 1804              		@ frame_needed = 0, uses_anonymous_args = 0
 1805              		@ link register save eliminated.
 238:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1806              		.loc 1 238 2 view .LVU475
 1807              	.LBB1502:
 1808              	.LBI1502:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1809              		.loc 1 918 5 view .LVU476
 1810              	.LBB1503:
 919:src/xeq.c     **** }
 1811              		.loc 1 919 2 view .LVU477
 919:src/xeq.c     **** }
 1812              		.loc 1 919 24 is_stmt 0 view .LVU478
 1813 0000 0D4A     		ldr	r2, .L155
 1814 0002 B2F8E817 		ldrh	r1, [r2, #2024]
 1815 0006 44F20103 		movw	r3, #16385
 1816              	.LBE1503:
 1817              	.LBE1502:
 238:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1818              		.loc 1 238 5 view .LVU479
 1819 000a 0B40     		ands	r3, r3, r1
 1820 000c B3F5804F 		cmp	r3, #16384
 1821 0010 09D0     		beq	.L147
 238:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1822              		.loc 1 238 19 discriminator 1 view .LVU480
 1823 0012 8028     		cmp	r0, #128
 1824 0014 02D0     		beq	.L154
 243:src/xeq.c     **** }
ARM GAS  /tmp/ccK8IvWa.s 			page 125


 1825              		.loc 1 243 3 is_stmt 1 view .LVU481
 243:src/xeq.c     **** }
 1826              		.loc 1 243 10 is_stmt 0 view .LVU482
 1827 0016 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1828              	.LVL129:
 243:src/xeq.c     **** }
 1829              		.loc 1 243 10 view .LVU483
 1830 001a 7047     		bx	lr
 1831              	.LVL130:
 1832              	.L154:
 1833              	.LBB1504:
 1834              	.LBI1504:
 237:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 1835              		.loc 1 237 14 is_stmt 1 view .LVU484
 1836              	.LBB1505:
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1837              		.loc 1 239 3 view .LVU485
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1838              		.loc 1 239 24 is_stmt 0 view .LVU486
 1839 001c 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1840              	.LVL131:
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1841              		.loc 1 239 13 view .LVU487
 1842 0020 0C38     		subs	r0, r0, #12
 1843              	.LVL132:
 240:src/xeq.c     **** 	}
 1844              		.loc 1 240 3 is_stmt 1 view .LVU488
 1845              	.L152:
 240:src/xeq.c     **** 	}
 1846              		.loc 1 240 67 is_stmt 0 view .LVU489
 1847 0022 4010     		asrs	r0, r0, #1
 1848              	.LVL133:
 240:src/xeq.c     **** 	}
 1849              		.loc 1 240 67 view .LVU490
 1850 0024 7047     		bx	lr
 1851              	.LVL134:
 1852              	.L147:
 240:src/xeq.c     **** 	}
 1853              		.loc 1 240 67 view .LVU491
 1854              	.LBE1505:
 237:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 1855              		.loc 1 237 14 is_stmt 1 view .LVU492
 1856              	.LBB1506:
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1857              		.loc 1 239 3 view .LVU493
 240:src/xeq.c     **** 	}
 1858              		.loc 1 240 56 is_stmt 0 view .LVU494
 1859 0026 A0F17E03 		sub	r3, r0, #126
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1860              		.loc 1 239 24 view .LVU495
 1861 002a 92F8CF27 		ldrb	r2, [r2, #1999]	@ zero_extendqisi2
 240:src/xeq.c     **** 	}
 1862              		.loc 1 240 56 view .LVU496
 1863 002e 012B     		cmp	r3, #1
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1864              		.loc 1 239 13 view .LVU497
 1865 0030 A2F10C00 		sub	r0, r2, #12
ARM GAS  /tmp/ccK8IvWa.s 			page 126


 1866              	.LVL135:
 240:src/xeq.c     **** 	}
 1867              		.loc 1 240 3 is_stmt 1 view .LVU498
 240:src/xeq.c     **** 	}
 1868              		.loc 1 240 56 is_stmt 0 view .LVU499
 1869 0034 F5D8     		bhi	.L152
 1870              	.LBE1506:
 1871              	.LBE1504:
 244:src/xeq.c     **** 
 1872              		.loc 1 244 1 view .LVU500
 1873 0036 7047     		bx	lr
 1874              	.L156:
 1875              		.align	2
 1876              	.L155:
 1877 0038 00000000 		.word	PersistentRam
 1878              		.cfi_endproc
 1879              	.LFE8:
 1881              		.section	.text.global_regs,"ax",%progbits
 1882              		.align	1
 1883              		.p2align 2,,3
 1884              		.global	global_regs
 1885              		.syntax unified
 1886              		.thumb
 1887              		.thumb_func
 1888              		.fpu fpv4-sp-d16
 1890              	global_regs:
 1891              	.LFB9:
 249:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 1892              		.loc 1 249 32 is_stmt 1 view -0
 1893              		.cfi_startproc
 1894              		@ args = 0, pretend = 0, frame = 0
 1895              		@ frame_needed = 0, uses_anonymous_args = 0
 1896              		@ link register save eliminated.
 250:src/xeq.c     **** }
 1897              		.loc 1 250 2 view .LVU502
 1898              	.LVL136:
 1899              	.LBB1507:
 1900              	.LBI1507:
 237:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 1901              		.loc 1 237 14 view .LVU503
 1902              	.LBB1508:
 238:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1903              		.loc 1 238 2 view .LVU504
 1904              	.LBB1509:
 1905              	.LBI1509:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1906              		.loc 1 918 5 view .LVU505
 1907              	.LBB1510:
 919:src/xeq.c     **** }
 1908              		.loc 1 919 2 view .LVU506
 919:src/xeq.c     **** }
 1909              		.loc 1 919 24 is_stmt 0 view .LVU507
 1910 0000 064A     		ldr	r2, .L160
 1911 0002 B2F8E817 		ldrh	r1, [r2, #2024]
 1912 0006 44F20103 		movw	r3, #16385
 1913              	.LBE1510:
 1914              	.LBE1509:
ARM GAS  /tmp/ccK8IvWa.s 			page 127


 238:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1915              		.loc 1 238 5 view .LVU508
 1916 000a 0B40     		ands	r3, r3, r1
 1917 000c B3F5804F 		cmp	r3, #16384
 1918 0010 02D0     		beq	.L159
 243:src/xeq.c     **** }
 1919              		.loc 1 243 3 is_stmt 1 view .LVU509
 1920              	.LVL137:
 243:src/xeq.c     **** }
 1921              		.loc 1 243 3 is_stmt 0 view .LVU510
 1922              	.LBE1508:
 1923              	.LBE1507:
 251:src/xeq.c     **** 
 1924              		.loc 1 251 1 view .LVU511
 1925 0012 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1926 0016 7047     		bx	lr
 1927              	.LVL138:
 1928              	.L159:
 251:src/xeq.c     **** 
 1929              		.loc 1 251 1 view .LVU512
 1930 0018 FFF7FEBF 		b	global_regs.part.0
 1931              	.LVL139:
 1932              	.L161:
 1933              		.align	2
 1934              	.L160:
 1935 001c 00000000 		.word	PersistentRam
 1936              		.cfi_endproc
 1937              	.LFE9:
 1939              		.section	.text.version,"ax",%progbits
 1940              		.align	1
 1941              		.p2align 2,,3
 1942              		.global	version
 1943              		.syntax unified
 1944              		.thumb
 1945              		.thumb_func
 1946              		.fpu fpv4-sp-d16
 1948              	version:
 1949              	.LVL140:
 1950              	.LFB10:
 263:src/xeq.c     **** 	State2.version = 1;
 1951              		.loc 1 263 29 is_stmt 1 view -0
 1952              		.cfi_startproc
 1953              		@ args = 0, pretend = 0, frame = 0
 1954              		@ frame_needed = 0, uses_anonymous_args = 0
 1955              		@ link register save eliminated.
 264:src/xeq.c     **** 	if (!State2.runmode)
 1956              		.loc 1 264 2 view .LVU514
 264:src/xeq.c     **** 	if (!State2.runmode)
 1957              		.loc 1 264 17 is_stmt 0 view .LVU515
 1958 0000 054B     		ldr	r3, .L165
 1959 0002 5A7D     		ldrb	r2, [r3, #21]	@ zero_extendqisi2
 265:src/xeq.c     **** 		display();
 1960              		.loc 1 265 6 view .LVU516
 1961 0004 997D     		ldrb	r1, [r3, #22]	@ zero_extendqisi2
 264:src/xeq.c     **** 	if (!State2.runmode)
 1962              		.loc 1 264 17 view .LVU517
 1963 0006 42F01002 		orr	r2, r2, #16
ARM GAS  /tmp/ccK8IvWa.s 			page 128


 1964 000a 5A75     		strb	r2, [r3, #21]
 265:src/xeq.c     **** 		display();
 1965              		.loc 1 265 2 is_stmt 1 view .LVU518
 265:src/xeq.c     **** 		display();
 1966              		.loc 1 265 5 is_stmt 0 view .LVU519
 1967 000c 4B06     		lsls	r3, r1, #25
 1968 000e 00D5     		bpl	.L164
 267:src/xeq.c     **** 
 1969              		.loc 1 267 1 view .LVU520
 1970 0010 7047     		bx	lr
 1971              	.L164:
 266:src/xeq.c     **** }
 1972              		.loc 1 266 3 is_stmt 1 view .LVU521
 1973 0012 FFF7FEBF 		b	display
 1974              	.LVL141:
 1975              	.L166:
 266:src/xeq.c     **** }
 1976              		.loc 1 266 3 is_stmt 0 view .LVU522
 1977 0016 00BF     		.align	2
 1978              	.L165:
 1979 0018 00000000 		.word	StateWhileOn
 1980              		.cfi_endproc
 1981              	.LFE10:
 1983              		.section	.text.cmd_off,"ax",%progbits
 1984              		.align	1
 1985              		.p2align 2,,3
 1986              		.global	cmd_off
 1987              		.syntax unified
 1988              		.thumb
 1989              		.thumb_func
 1990              		.fpu fpv4-sp-d16
 1992              	cmd_off:
 1993              	.LVL142:
 1994              	.LFB11:
 269:src/xeq.c     **** 	shutdown();
 1995              		.loc 1 269 29 is_stmt 1 view -0
 1996              		.cfi_startproc
 1997              		@ args = 0, pretend = 0, frame = 0
 1998              		@ frame_needed = 0, uses_anonymous_args = 0
 1999              		@ link register save eliminated.
 270:src/xeq.c     **** }
 2000              		.loc 1 270 2 view .LVU524
 2001 0000 FFF7FEBF 		b	shutdown
 2002              	.LVL143:
 270:src/xeq.c     **** }
 2003              		.loc 1 270 2 is_stmt 0 view .LVU525
 2004              		.cfi_endproc
 2005              	.LFE11:
 2007              		.section	.text.sizeLIB,"ax",%progbits
 2008              		.align	1
 2009              		.p2align 2,,3
 2010              		.global	sizeLIB
 2011              		.syntax unified
 2012              		.thumb
 2013              		.thumb_func
 2014              		.fpu fpv4-sp-d16
 2016              	sizeLIB:
ARM GAS  /tmp/ccK8IvWa.s 			page 129


 2017              	.LVL144:
 2018              	.LFB13:
 296:src/xeq.c     **** 	if (region == REGION_XROM)
 2019              		.loc 1 296 25 is_stmt 1 view -0
 2020              		.cfi_startproc
 2021              		@ args = 0, pretend = 0, frame = 0
 2022              		@ frame_needed = 0, uses_anonymous_args = 0
 2023              		@ link register save eliminated.
 297:src/xeq.c     **** 		return xrom_size;
 2024              		.loc 1 297 2 view .LVU527
 297:src/xeq.c     **** 		return xrom_size;
 2025              		.loc 1 297 5 is_stmt 0 view .LVU528
 2026 0000 0328     		cmp	r0, #3
 2027 0002 05D0     		beq	.L171
 300:src/xeq.c     **** }
 2028              		.loc 1 300 3 is_stmt 1 view .LVU529
 300:src/xeq.c     **** }
 2029              		.loc 1 300 24 is_stmt 0 view .LVU530
 2030 0004 044B     		ldr	r3, .L172
 300:src/xeq.c     **** }
 2031              		.loc 1 300 32 view .LVU531
 2032 0006 53F82030 		ldr	r3, [r3, r0, lsl #2]
 300:src/xeq.c     **** }
 2033              		.loc 1 300 10 view .LVU532
 2034 000a 33F8020C 		ldrh	r0, [r3, #-2]
 2035              	.LVL145:
 301:src/xeq.c     **** 
 2036              		.loc 1 301 1 view .LVU533
 2037 000e 7047     		bx	lr
 2038              	.LVL146:
 2039              	.L171:
 298:src/xeq.c     **** 	else
 2040              		.loc 1 298 3 is_stmt 1 view .LVU534
 298:src/xeq.c     **** 	else
 2041              		.loc 1 298 10 is_stmt 0 view .LVU535
 2042 0010 024B     		ldr	r3, .L172+4
 2043 0012 1888     		ldrh	r0, [r3]
 2044              	.LVL147:
 298:src/xeq.c     **** 	else
 2045              		.loc 1 298 10 view .LVU536
 2046 0014 7047     		bx	lr
 2047              	.L173:
 2048 0016 00BF     		.align	2
 2049              	.L172:
 2050 0018 00000000 		.word	.LANCHOR0
 2051 001c 00000000 		.word	xrom_size
 2052              		.cfi_endproc
 2053              	.LFE13:
 2055              		.section	.text.getprog,"ax",%progbits
 2056              		.align	1
 2057              		.p2align 2,,3
 2058              		.global	getprog
 2059              		.syntax unified
 2060              		.thumb
 2061              		.thumb_func
 2062              		.fpu fpv4-sp-d16
 2064              	getprog:
ARM GAS  /tmp/ccK8IvWa.s 			page 130


 2065              	.LVL148:
 2066              	.LFB15:
 320:src/xeq.c     **** 
 2067              		.loc 1 320 33 is_stmt 1 view -0
 2068              		.cfi_startproc
 2069              		@ args = 0, pretend = 0, frame = 0
 2070              		@ frame_needed = 0, uses_anonymous_args = 0
 2071              		@ link register save eliminated.
 322:src/xeq.c     **** 	int offset = offsetLIB(pc);
 2072              		.loc 1 322 2 view .LVU538
 323:src/xeq.c     **** 
 2073              		.loc 1 323 15 is_stmt 0 view .LVU539
 2074 0000 C0F30D02 		ubfx	r2, r0, #0, #14
 2075 0004 531E     		subs	r3, r2, #1
 322:src/xeq.c     **** 	int offset = offsetLIB(pc);
 2076              		.loc 1 322 21 view .LVU540
 2077 0006 800B     		lsrs	r0, r0, #14
 2078              	.LVL149:
 323:src/xeq.c     **** 
 2079              		.loc 1 323 2 is_stmt 1 view .LVU541
 325:src/xeq.c     **** 		return OP_NIL | OP_END;
 2080              		.loc 1 325 2 view .LVU542
 325:src/xeq.c     **** 		return OP_NIL | OP_END;
 2081              		.loc 1 325 5 is_stmt 0 view .LVU543
 2082 0008 BAB1     		cbz	r2, .L180
 2083              	.LVL150:
 2084              	.LBB1511:
 2085              	.LBI1511:
 296:src/xeq.c     **** 	if (region == REGION_XROM)
 2086              		.loc 1 296 5 is_stmt 1 view .LVU544
 2087              	.LBB1512:
 297:src/xeq.c     **** 		return xrom_size;
 2088              		.loc 1 297 2 view .LVU545
 297:src/xeq.c     **** 		return xrom_size;
 2089              		.loc 1 297 5 is_stmt 0 view .LVU546
 2090 000a 0328     		cmp	r0, #3
 2091 000c 18D0     		beq	.L181
 300:src/xeq.c     **** }
 2092              		.loc 1 300 3 is_stmt 1 view .LVU547
 300:src/xeq.c     **** }
 2093              		.loc 1 300 24 is_stmt 0 view .LVU548
 2094 000e 0E4A     		ldr	r2, .L183
 300:src/xeq.c     **** }
 2095              		.loc 1 300 32 view .LVU549
 2096 0010 52F82020 		ldr	r2, [r2, r0, lsl #2]
 300:src/xeq.c     **** }
 2097              		.loc 1 300 10 view .LVU550
 2098 0014 32F8022C 		ldrh	r2, [r2, #-2]
 2099              	.L177:
 2100              	.LVL151:
 300:src/xeq.c     **** }
 2101              		.loc 1 300 10 view .LVU551
 2102              	.LBE1512:
 2103              	.LBE1511:
 325:src/xeq.c     **** 		return OP_NIL | OP_END;
 2104              		.loc 1 325 17 view .LVU552
 2105 0018 9342     		cmp	r3, r2
ARM GAS  /tmp/ccK8IvWa.s 			page 131


 2106 001a 0EDA     		bge	.L180
 327:src/xeq.c     **** }
 2107              		.loc 1 327 2 is_stmt 1 view .LVU553
 327:src/xeq.c     **** }
 2108              		.loc 1 327 29 is_stmt 0 view .LVU554
 2109 001c 0A4A     		ldr	r2, .L183
 327:src/xeq.c     **** }
 2110              		.loc 1 327 9 view .LVU555
 2111 001e 52F82020 		ldr	r2, [r2, r0, lsl #2]
 2112              	.LBB1514:
 2113              	.LBB1515:
 309:src/xeq.c     **** 	if ( isDBL(r) ) {
 2114              		.loc 1 309 13 view .LVU556
 2115 0022 32F81300 		ldrh	r0, [r2, r3, lsl #1]
 2116              	.LVL152:
 310:src/xeq.c     **** 		r |= loc[1] << 16;
 2117              		.loc 1 310 5 view .LVU557
 2118 0026 00F47041 		and	r1, r0, #61440
 2119 002a B1F5704F 		cmp	r1, #61440
 2120              	.LBE1515:
 2121              	.LBE1514:
 327:src/xeq.c     **** }
 2122              		.loc 1 327 9 view .LVU558
 2123 002e 02EB4303 		add	r3, r2, r3, lsl #1
 2124              	.LVL153:
 2125              	.LBB1518:
 2126              	.LBI1514:
 307:src/xeq.c     **** {
 2127              		.loc 1 307 15 is_stmt 1 view .LVU559
 2128              	.LBB1516:
 309:src/xeq.c     **** 	if ( isDBL(r) ) {
 2129              		.loc 1 309 2 view .LVU560
 310:src/xeq.c     **** 		r |= loc[1] << 16;
 2130              		.loc 1 310 2 view .LVU561
 310:src/xeq.c     **** 		r |= loc[1] << 16;
 2131              		.loc 1 310 5 is_stmt 0 view .LVU562
 2132 0032 00D0     		beq	.L182
 2133              	.LBE1516:
 2134              	.LBE1518:
 328:src/xeq.c     **** 
 2135              		.loc 1 328 1 view .LVU563
 2136 0034 7047     		bx	lr
 2137              	.L182:
 2138              	.LBB1519:
 2139              	.LBB1517:
 311:src/xeq.c     **** 	}
 2140              		.loc 1 311 3 is_stmt 1 view .LVU564
 311:src/xeq.c     **** 	}
 2141              		.loc 1 311 5 is_stmt 0 view .LVU565
 2142 0036 1868     		ldr	r0, [r3]	@ unaligned
 2143              	.LVL154:
 311:src/xeq.c     **** 	}
 2144              		.loc 1 311 5 view .LVU566
 2145 0038 7047     		bx	lr
 2146              	.LVL155:
 2147              	.L180:
 311:src/xeq.c     **** 	}
ARM GAS  /tmp/ccK8IvWa.s 			page 132


 2148              		.loc 1 311 5 view .LVU567
 2149              	.LBE1517:
 2150              	.LBE1519:
 326:src/xeq.c     **** 	return get_opcode(RegionTab[region] + offset);
 2151              		.loc 1 326 10 view .LVU568
 2152 003a 4FF49D70 		mov	r0, #314
 2153              	.LVL156:
 328:src/xeq.c     **** 
 2154              		.loc 1 328 1 view .LVU569
 2155 003e 7047     		bx	lr
 2156              	.LVL157:
 2157              	.L181:
 2158              	.LBB1520:
 2159              	.LBB1513:
 298:src/xeq.c     **** 	else
 2160              		.loc 1 298 3 is_stmt 1 view .LVU570
 298:src/xeq.c     **** 	else
 2161              		.loc 1 298 10 is_stmt 0 view .LVU571
 2162 0040 024A     		ldr	r2, .L183+4
 2163 0042 1288     		ldrh	r2, [r2]
 2164 0044 E8E7     		b	.L177
 2165              	.L184:
 2166 0046 00BF     		.align	2
 2167              	.L183:
 2168 0048 00000000 		.word	.LANCHOR0
 2169 004c 00000000 		.word	xrom_size
 2170              	.LBE1513:
 2171              	.LBE1520:
 2172              		.cfi_endproc
 2173              	.LFE15:
 2175              		.section	.text.get_current_prog,"ax",%progbits
 2176              		.align	1
 2177              		.p2align 2,,3
 2178              		.global	get_current_prog
 2179              		.syntax unified
 2180              		.thumb
 2181              		.thumb_func
 2182              		.fpu fpv4-sp-d16
 2184              	get_current_prog:
 2185              	.LFB16:
 334:src/xeq.c     **** 
 2186              		.loc 1 334 40 is_stmt 1 view -0
 2187              		.cfi_startproc
 2188              		@ args = 0, pretend = 0, frame = 0
 2189              		@ frame_needed = 0, uses_anonymous_args = 0
 2190              		@ link register save eliminated.
 336:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2191              		.loc 1 336 2 view .LVU573
 336:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2192              		.loc 1 336 21 is_stmt 0 view .LVU574
 2193 0000 074B     		ldr	r3, .L186
 337:src/xeq.c     **** }
 2194              		.loc 1 337 18 view .LVU575
 2195 0002 084A     		ldr	r2, .L186+4
 336:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2196              		.loc 1 336 21 view .LVU576
 2197 0004 B3F8EC37 		ldrh	r3, [r3, #2028]
ARM GAS  /tmp/ccK8IvWa.s 			page 133


 2198              	.LVL158:
 337:src/xeq.c     **** }
 2199              		.loc 1 337 2 is_stmt 1 view .LVU577
 336:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2200              		.loc 1 336 12 is_stmt 0 view .LVU578
 2201 0008 990B     		lsrs	r1, r3, #14
 337:src/xeq.c     **** }
 2202              		.loc 1 337 27 view .LVU579
 2203 000a C3F30D03 		ubfx	r3, r3, #0, #14
 2204              	.LVL159:
 337:src/xeq.c     **** }
 2205              		.loc 1 337 27 view .LVU580
 2206 000e 52F82100 		ldr	r0, [r2, r1, lsl #2]
 2207 0012 03F10043 		add	r3, r3, #-2147483648
 2208 0016 013B     		subs	r3, r3, #1
 338:src/xeq.c     **** 
 2209              		.loc 1 338 1 view .LVU581
 2210 0018 00EB4300 		add	r0, r0, r3, lsl #1
 2211 001c 7047     		bx	lr
 2212              	.L187:
 2213 001e 00BF     		.align	2
 2214              	.L186:
 2215 0020 00000000 		.word	PersistentRam
 2216 0024 00000000 		.word	.LANCHOR0
 2217              		.cfi_endproc
 2218              	.LFE16:
 2220              		.section	.text.do_inc,"ax",%progbits
 2221              		.align	1
 2222              		.p2align 2,,3
 2223              		.global	do_inc
 2224              		.syntax unified
 2225              		.thumb
 2226              		.thumb_func
 2227              		.fpu fpv4-sp-d16
 2229              	do_inc:
 2230              	.LVL160:
 2231              	.LFB19:
 395:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 2232              		.loc 1 395 54 is_stmt 1 view -0
 2233              		.cfi_startproc
 2234              		@ args = 0, pretend = 0, frame = 16
 2235              		@ frame_needed = 0, uses_anonymous_args = 0
 396:src/xeq.c     **** 	unsigned short int top = 0;
 2236              		.loc 1 396 2 view .LVU583
 395:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 2237              		.loc 1 395 54 is_stmt 0 view .LVU584
 2238 0000 70B5     		push	{r4, r5, r6, lr}
 2239              		.cfi_def_cfa_offset 16
 2240              		.cfi_offset 4, -16
 2241              		.cfi_offset 5, -12
 2242              		.cfi_offset 6, -8
 2243              		.cfi_offset 14, -4
 2244 0002 84B0     		sub	sp, sp, #16
 2245              		.cfi_def_cfa_offset 32
 395:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 2246              		.loc 1 395 54 view .LVU585
 2247 0004 0546     		mov	r5, r0
ARM GAS  /tmp/ccK8IvWa.s 			page 134


 2248 0006 0191     		str	r1, [sp, #4]
 396:src/xeq.c     **** 	unsigned short int top = 0;
 2249              		.loc 1 396 42 view .LVU586
 2250 0008 FFF7FEFF 		bl	getprog
 2251              	.LVL161:
 400:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2252              		.loc 1 400 12 view .LVU587
 2253 000c 0D4E     		ldr	r6, .L192
 401:src/xeq.c     **** 
 2254              		.loc 1 401 11 view .LVU588
 2255 000e 0199     		ldr	r1, [sp, #4]
 396:src/xeq.c     **** 	unsigned short int top = 0;
 2256              		.loc 1 396 42 view .LVU589
 2257 0010 00F47040 		and	r0, r0, #61440
 396:src/xeq.c     **** 	unsigned short int top = 0;
 2258              		.loc 1 396 27 view .LVU590
 2259 0014 6C1C     		adds	r4, r5, #1
 397:src/xeq.c     **** 	unsigned short int bottom = 0;
 2260              		.loc 1 397 21 view .LVU591
 2261 0016 0023     		movs	r3, #0
 396:src/xeq.c     **** 	unsigned short int top = 0;
 2262              		.loc 1 396 27 view .LVU592
 2263 0018 B0F5704F 		cmp	r0, #61440
 2264 001c 08BF     		it	eq
 2265 001e 0134     		addeq	r4, r4, #1
 401:src/xeq.c     **** 
 2266              		.loc 1 401 11 view .LVU593
 2267 0020 0DF10E02 		add	r2, sp, #14
 2268 0024 2846     		mov	r0, r5
 400:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2269              		.loc 1 400 12 view .LVU594
 2270 0026 3360     		str	r3, [r6]
 397:src/xeq.c     **** 	unsigned short int bottom = 0;
 2271              		.loc 1 397 21 view .LVU595
 2272 0028 ADF80E30 		strh	r3, [sp, #14]	@ movhi
 401:src/xeq.c     **** 
 2273              		.loc 1 401 11 view .LVU596
 2274 002c FFF7FEFF 		bl	find_section_bounds
 2275              	.LVL162:
 396:src/xeq.c     **** 	unsigned short int top = 0;
 2276              		.loc 1 396 27 view .LVU597
 2277 0030 A4B2     		uxth	r4, r4
 2278              	.LVL163:
 397:src/xeq.c     **** 	unsigned short int bottom = 0;
 2279              		.loc 1 397 2 is_stmt 1 view .LVU598
 398:src/xeq.c     **** 
 2280              		.loc 1 398 2 view .LVU599
 400:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2281              		.loc 1 400 2 view .LVU600
 401:src/xeq.c     **** 
 2282              		.loc 1 401 2 view .LVU601
 403:src/xeq.c     **** 		PcWrapped = 1;
 2283              		.loc 1 403 2 view .LVU602
 403:src/xeq.c     **** 		PcWrapped = 1;
 2284              		.loc 1 403 5 is_stmt 0 view .LVU603
 2285 0032 8442     		cmp	r4, r0
 404:src/xeq.c     **** 		return top;
ARM GAS  /tmp/ccK8IvWa.s 			page 135


 2286              		.loc 1 404 3 is_stmt 1 view .LVU604
 405:src/xeq.c     **** 	}
 2287              		.loc 1 405 10 is_stmt 0 view .LVU605
 2288 0034 85BF     		ittet	hi
 2289 0036 BDF80E00 		ldrhhi	r0, [sp, #14]
 2290              	.LVL164:
 404:src/xeq.c     **** 		return top;
 2291              		.loc 1 404 13 view .LVU606
 2292 003a 0123     		movhi	r3, #1
 407:src/xeq.c     **** }
 2293              		.loc 1 407 9 view .LVU607
 2294 003c 2046     		movls	r0, r4
 404:src/xeq.c     **** 		return top;
 2295              		.loc 1 404 13 view .LVU608
 2296 003e 3360     		strhi	r3, [r6]
 405:src/xeq.c     **** 	}
 2297              		.loc 1 405 3 is_stmt 1 view .LVU609
 407:src/xeq.c     **** }
 2298              		.loc 1 407 2 view .LVU610
 408:src/xeq.c     **** 
 2299              		.loc 1 408 1 is_stmt 0 view .LVU611
 2300 0040 04B0     		add	sp, sp, #16
 2301              		.cfi_def_cfa_offset 16
 2302              		@ sp needed
 2303 0042 70BD     		pop	{r4, r5, r6, pc}
 2304              	.LVL165:
 2305              	.L193:
 408:src/xeq.c     **** 
 2306              		.loc 1 408 1 view .LVU612
 2307              		.align	2
 2308              	.L192:
 2309 0044 00000000 		.word	PcWrapped
 2310              		.cfi_endproc
 2311              	.LFE19:
 2313              		.section	.text.user_pc.part.0,"ax",%progbits
 2314              		.align	1
 2315              		.p2align 2,,3
 2316              		.syntax unified
 2317              		.thumb
 2318              		.thumb_func
 2319              		.fpu fpv4-sp-d16
 2321              	user_pc.part.0:
 2322              	.LVL166:
 2323              	.LFB273:
 471:src/xeq.c     **** 	unsigned int n = 1;
 2324              		.loc 1 471 14 is_stmt 1 view -0
 2325              		.cfi_startproc
 2326              		@ args = 0, pretend = 0, frame = 0
 2327              		@ frame_needed = 0, uses_anonymous_args = 0
 482:src/xeq.c     **** 	while (base < pc) {
 2328              		.loc 1 482 2 view .LVU614
 482:src/xeq.c     **** 	while (base < pc) {
 2329              		.loc 1 482 9 is_stmt 0 view .LVU615
 2330 0000 20F47F53 		bic	r3, r0, #16320
 2331 0004 23F03F03 		bic	r3, r3, #63
 471:src/xeq.c     **** 	unsigned int n = 1;
 2332              		.loc 1 471 14 view .LVU616
ARM GAS  /tmp/ccK8IvWa.s 			page 136


 2333 0008 70B5     		push	{r4, r5, r6, lr}
 2334              		.cfi_def_cfa_offset 16
 2335              		.cfi_offset 4, -16
 2336              		.cfi_offset 5, -12
 2337              		.cfi_offset 6, -8
 2338              		.cfi_offset 14, -4
 471:src/xeq.c     **** 	unsigned int n = 1;
 2339              		.loc 1 471 14 view .LVU617
 2340 000a 0546     		mov	r5, r0
 482:src/xeq.c     **** 	while (base < pc) {
 2341              		.loc 1 482 7 view .LVU618
 2342 000c 581C     		adds	r0, r3, #1
 2343              	.LVL167:
 483:src/xeq.c     **** 		base = do_inc(base, 0);
 2344              		.loc 1 483 2 is_stmt 1 view .LVU619
 483:src/xeq.c     **** 		base = do_inc(base, 0);
 2345              		.loc 1 483 8 view .LVU620
 2346 000e 8542     		cmp	r5, r0
 2347 0010 0ED9     		bls	.L197
 2348 0012 084E     		ldr	r6, .L201
 472:src/xeq.c     **** 	unsigned int base;
 2349              		.loc 1 472 15 is_stmt 0 view .LVU621
 2350 0014 0124     		movs	r4, #1
 2351 0016 03E0     		b	.L196
 2352              	.LVL168:
 2353              	.L200:
 483:src/xeq.c     **** 		base = do_inc(base, 0);
 2354              		.loc 1 483 8 view .LVU622
 2355 0018 8542     		cmp	r5, r0
 487:src/xeq.c     **** 	}
 2356              		.loc 1 487 3 view .LVU623
 2357 001a 04F10104 		add	r4, r4, #1
 2358              	.LVL169:
 483:src/xeq.c     **** 		base = do_inc(base, 0);
 2359              		.loc 1 483 8 is_stmt 1 view .LVU624
 2360 001e 05D9     		bls	.L194
 2361              	.LVL170:
 2362              	.L196:
 484:src/xeq.c     **** 		if (PcWrapped)
 2363              		.loc 1 484 3 view .LVU625
 484:src/xeq.c     **** 		if (PcWrapped)
 2364              		.loc 1 484 10 is_stmt 0 view .LVU626
 2365 0020 0021     		movs	r1, #0
 2366 0022 FFF7FEFF 		bl	do_inc
 2367              	.LVL171:
 487:src/xeq.c     **** 	}
 2368              		.loc 1 487 3 is_stmt 1 view .LVU627
 485:src/xeq.c     **** 			return n;
 2369              		.loc 1 485 6 is_stmt 0 view .LVU628
 2370 0026 3368     		ldr	r3, [r6]
 2371              	.LVL172:
 485:src/xeq.c     **** 			return n;
 2372              		.loc 1 485 3 is_stmt 1 view .LVU629
 485:src/xeq.c     **** 			return n;
 2373              		.loc 1 485 6 is_stmt 0 view .LVU630
 2374 0028 002B     		cmp	r3, #0
 2375 002a F5D0     		beq	.L200
ARM GAS  /tmp/ccK8IvWa.s 			page 137


 2376              	.LVL173:
 2377              	.L194:
 490:src/xeq.c     **** 
 2378              		.loc 1 490 1 view .LVU631
 2379 002c 2046     		mov	r0, r4
 2380              	.LVL174:
 490:src/xeq.c     **** 
 2381              		.loc 1 490 1 view .LVU632
 2382 002e 70BD     		pop	{r4, r5, r6, pc}
 2383              	.LVL175:
 2384              	.L197:
 472:src/xeq.c     **** 	unsigned int base;
 2385              		.loc 1 472 15 view .LVU633
 2386 0030 0124     		movs	r4, #1
 2387 0032 FBE7     		b	.L194
 2388              	.L202:
 2389              		.align	2
 2390              	.L201:
 2391 0034 00000000 		.word	PcWrapped
 2392              		.cfi_endproc
 2393              	.LFE273:
 2395              		.section	.rodata.print_step.str1.4,"aMS",%progbits,1
 2396              		.align	2
 2397              	.LC0:
 2398 0000 3030303A 		.ascii	"000:\000"
 2398      00
 2399              		.section	.text.print_step,"ax",%progbits
 2400              		.align	1
 2401              		.p2align 2,,3
 2402              		.syntax unified
 2403              		.thumb
 2404              		.thumb_func
 2405              		.fpu fpv4-sp-d16
 2407              	print_step:
 2408              	.LVL176:
 2409              	.LFB226:
4159:src/xeq.c     **** 	char buf[16];
 2410              		.loc 1 4159 41 is_stmt 1 view -0
 2411              		.cfi_startproc
 2412              		@ args = 0, pretend = 0, frame = 16
 2413              		@ frame_needed = 0, uses_anonymous_args = 0
4160:src/xeq.c     **** 	const unsigned int pc = state_pc();
 2414              		.loc 1 4160 2 view .LVU635
4161:src/xeq.c     **** 	char *p = TraceBuffer;
 2415              		.loc 1 4161 2 view .LVU636
4161:src/xeq.c     **** 	char *p = TraceBuffer;
 2416              		.loc 1 4161 26 is_stmt 0 view .LVU637
 2417 0000 254B     		ldr	r3, .L217
4159:src/xeq.c     **** 	char buf[16];
 2418              		.loc 1 4159 41 view .LVU638
 2419 0002 F0B5     		push	{r4, r5, r6, r7, lr}
 2420              		.cfi_def_cfa_offset 20
 2421              		.cfi_offset 4, -20
 2422              		.cfi_offset 5, -16
 2423              		.cfi_offset 6, -12
 2424              		.cfi_offset 7, -8
 2425              		.cfi_offset 14, -4
ARM GAS  /tmp/ccK8IvWa.s 			page 138


4161:src/xeq.c     **** 	char *p = TraceBuffer;
 2426              		.loc 1 4161 26 view .LVU639
 2427 0004 B3F8E047 		ldrh	r4, [r3, #2016]
 2428              	.LVL177:
4162:src/xeq.c     **** 
 2429              		.loc 1 4162 2 is_stmt 1 view .LVU640
4164:src/xeq.c     **** 		*p++ = 'x';
 2430              		.loc 1 4164 2 view .LVU641
4164:src/xeq.c     **** 		*p++ = 'x';
 2431              		.loc 1 4164 6 is_stmt 0 view .LVU642
 2432 0008 A10B     		lsrs	r1, r4, #14
4164:src/xeq.c     **** 		*p++ = 'x';
 2433              		.loc 1 4164 5 view .LVU643
 2434 000a 0329     		cmp	r1, #3
4159:src/xeq.c     **** 	char buf[16];
 2435              		.loc 1 4159 41 view .LVU644
 2436 000c 85B0     		sub	sp, sp, #20
 2437              		.cfi_def_cfa_offset 40
4159:src/xeq.c     **** 	char buf[16];
 2438              		.loc 1 4159 41 view .LVU645
 2439 000e 0546     		mov	r5, r0
4164:src/xeq.c     **** 		*p++ = 'x';
 2440              		.loc 1 4164 5 view .LVU646
 2441 0010 39D0     		beq	.L214
4166:src/xeq.c     **** 		p = num_arg_0(p, nLIB(pc), 1);
 2442              		.loc 1 4166 9 is_stmt 1 view .LVU647
4166:src/xeq.c     **** 		p = num_arg_0(p, nLIB(pc), 1);
 2443              		.loc 1 4166 12 is_stmt 0 view .LVU648
 2444 0012 14F4404F 		tst	r4, #49152
 2445 0016 0FD1     		bne	.L215
4162:src/xeq.c     **** 
 2446              		.loc 1 4162 8 view .LVU649
 2447 0018 204E     		ldr	r6, .L217+4
 2448 001a 3746     		mov	r7, r6
 2449              	.LVL178:
4170:src/xeq.c     **** 		scopy(p, "000:");
 2450              		.loc 1 4170 2 is_stmt 1 view .LVU650
4170:src/xeq.c     **** 		scopy(p, "000:");
 2451              		.loc 1 4170 5 is_stmt 0 view .LVU651
 2452 001c BCB9     		cbnz	r4, .L216
 2453              	.LVL179:
 2454              	.L208:
4171:src/xeq.c     **** 	else {
 2455              		.loc 1 4171 3 is_stmt 1 view .LVU652
 2456 001e 2049     		ldr	r1, .L217+8
 2457 0020 3846     		mov	r0, r7
 2458 0022 FFF7FEFF 		bl	scopy
 2459              	.LVL180:
 2460              	.L207:
4179:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2461              		.loc 1 4179 2 view .LVU653
4179:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2462              		.loc 1 4179 20 is_stmt 0 view .LVU654
 2463 0026 1F4A     		ldr	r2, .L217+12
4180:src/xeq.c     **** }
 2464              		.loc 1 4180 10 view .LVU655
 2465 0028 1F49     		ldr	r1, .L217+16
ARM GAS  /tmp/ccK8IvWa.s 			page 139


4179:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2466              		.loc 1 4179 20 view .LVU656
 2467 002a 937D     		ldrb	r3, [r2, #22]	@ zero_extendqisi2
4180:src/xeq.c     **** }
 2468              		.loc 1 4180 10 view .LVU657
 2469 002c 0E60     		str	r6, [r1]
4179:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2470              		.loc 1 4179 20 view .LVU658
 2471 002e 43F08003 		orr	r3, r3, #128
 2472 0032 9375     		strb	r3, [r2, #22]
4180:src/xeq.c     **** }
 2473              		.loc 1 4180 2 is_stmt 1 view .LVU659
4181:src/xeq.c     **** 
 2474              		.loc 1 4181 1 is_stmt 0 view .LVU660
 2475 0034 05B0     		add	sp, sp, #20
 2476              		.cfi_remember_state
 2477              		.cfi_def_cfa_offset 20
 2478              		@ sp needed
 2479 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 2480              	.LVL181:
 2481              	.L215:
 2482              		.cfi_restore_state
4167:src/xeq.c     **** 		*p++ = ' ';
 2483              		.loc 1 4167 3 is_stmt 1 view .LVU661
4167:src/xeq.c     **** 		*p++ = ' ';
 2484              		.loc 1 4167 7 is_stmt 0 view .LVU662
 2485 0038 1848     		ldr	r0, .L217+4
 2486              	.LVL182:
4167:src/xeq.c     **** 		*p++ = ' ';
 2487              		.loc 1 4167 7 view .LVU663
 2488 003a 0122     		movs	r2, #1
 2489 003c 0646     		mov	r6, r0
 2490 003e FFF7FEFF 		bl	num_arg_0
 2491              	.LVL183:
4168:src/xeq.c     **** 	}
 2492              		.loc 1 4168 3 is_stmt 1 view .LVU664
4168:src/xeq.c     **** 	}
 2493              		.loc 1 4168 5 is_stmt 0 view .LVU665
 2494 0042 0746     		mov	r7, r0
 2495              	.LVL184:
4168:src/xeq.c     **** 	}
 2496              		.loc 1 4168 8 view .LVU666
 2497 0044 2023     		movs	r3, #32
 2498 0046 07F8013B 		strb	r3, [r7], #1
 2499              	.LVL185:
4170:src/xeq.c     **** 		scopy(p, "000:");
 2500              		.loc 1 4170 2 is_stmt 1 view .LVU667
4170:src/xeq.c     **** 		scopy(p, "000:");
 2501              		.loc 1 4170 5 is_stmt 0 view .LVU668
 2502 004a 002C     		cmp	r4, #0
 2503 004c E7D0     		beq	.L208
 2504              	.L216:
 2505              	.LVL186:
 2506              	.LBB1521:
 2507              	.LBB1522:
4170:src/xeq.c     **** 		scopy(p, "000:");
 2508              		.loc 1 4170 5 view .LVU669
ARM GAS  /tmp/ccK8IvWa.s 			page 140


 2509 004e 2046     		mov	r0, r4
 2510 0050 FFF7FEFF 		bl	user_pc.part.0
 2511              	.LVL187:
 2512 0054 0146     		mov	r1, r0
 2513              	.L205:
4170:src/xeq.c     **** 		scopy(p, "000:");
 2514              		.loc 1 4170 5 view .LVU670
 2515              	.LBE1522:
 2516              	.LBE1521:
4173:src/xeq.c     **** 		*p++ = ':';
 2517              		.loc 1 4173 7 view .LVU671
 2518 0056 0322     		movs	r2, #3
 2519 0058 3846     		mov	r0, r7
 2520 005a FFF7FEFF 		bl	num_arg_0
 2521              	.LVL188:
4174:src/xeq.c     **** 		scopy_char(p, prt(op, buf), '\0');
 2522              		.loc 1 4174 8 view .LVU672
 2523 005e 0746     		mov	r7, r0
 2524 0060 3A23     		movs	r3, #58
 2525 0062 07F8013B 		strb	r3, [r7], #1
4173:src/xeq.c     **** 		*p++ = ':';
 2526              		.loc 1 4173 7 view .LVU673
 2527 0066 0446     		mov	r4, r0
 2528              	.LVL189:
4174:src/xeq.c     **** 		scopy_char(p, prt(op, buf), '\0');
 2529              		.loc 1 4174 3 is_stmt 1 view .LVU674
4175:src/xeq.c     **** 		if (*p == '?')
 2530              		.loc 1 4175 3 view .LVU675
 2531 0068 6946     		mov	r1, sp
 2532 006a 2846     		mov	r0, r5
 2533 006c FFF7FEFF 		bl	prt
 2534              	.LVL190:
 2535 0070 0022     		movs	r2, #0
 2536 0072 0146     		mov	r1, r0
 2537 0074 3846     		mov	r0, r7
 2538 0076 FFF7FEFF 		bl	scopy_char
 2539              	.LVL191:
4176:src/xeq.c     **** 			*p = '\0';
 2540              		.loc 1 4176 3 view .LVU676
4176:src/xeq.c     **** 			*p = '\0';
 2541              		.loc 1 4176 6 is_stmt 0 view .LVU677
 2542 007a 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 2543 007c 3F2B     		cmp	r3, #63
4177:src/xeq.c     **** 	}
 2544              		.loc 1 4177 4 is_stmt 1 view .LVU678
4177:src/xeq.c     **** 	}
 2545              		.loc 1 4177 7 is_stmt 0 view .LVU679
 2546 007e 04BF     		itt	eq
 2547 0080 0023     		moveq	r3, #0
 2548 0082 6370     		strbeq	r3, [r4, #1]
 2549 0084 CFE7     		b	.L207
 2550              	.LVL192:
 2551              	.L214:
4165:src/xeq.c     **** 	} else if (isLIB(pc)) {
 2552              		.loc 1 4165 3 is_stmt 1 view .LVU680
4165:src/xeq.c     **** 	} else if (isLIB(pc)) {
 2553              		.loc 1 4165 8 is_stmt 0 view .LVU681
ARM GAS  /tmp/ccK8IvWa.s 			page 141


 2554 0086 054E     		ldr	r6, .L217+4
 2555 0088 3746     		mov	r7, r6
 2556 008a 7823     		movs	r3, #120
 2557 008c 07F8013B 		strb	r3, [r7], #1
4170:src/xeq.c     **** 		scopy(p, "000:");
 2558              		.loc 1 4170 2 is_stmt 1 view .LVU682
4173:src/xeq.c     **** 		*p++ = ':';
 2559              		.loc 1 4173 3 view .LVU683
 2560              	.LBB1524:
 2561              	.LBI1521:
 471:src/xeq.c     **** 	unsigned int n = 1;
 2562              		.loc 1 471 14 view .LVU684
 2563              	.LBB1523:
 472:src/xeq.c     **** 	unsigned int base;
 2564              		.loc 1 472 2 view .LVU685
 2565              	.LVL193:
 473:src/xeq.c     **** 
 2566              		.loc 1 473 2 view .LVU686
 476:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 2567              		.loc 1 476 2 view .LVU687
 477:src/xeq.c     **** #else
 2568              		.loc 1 477 3 view .LVU688
 477:src/xeq.c     **** #else
 2569              		.loc 1 477 24 is_stmt 0 view .LVU689
 2570 0090 C4F30D01 		ubfx	r1, r4, #0, #14
 2571 0094 DFE7     		b	.L205
 2572              	.L218:
 2573 0096 00BF     		.align	2
 2574              	.L217:
 2575 0098 00000000 		.word	PersistentRam
 2576 009c 00000000 		.word	TraceBuffer
 2577 00a0 00000000 		.word	.LC0
 2578 00a4 00000000 		.word	StateWhileOn
 2579 00a8 00000000 		.word	DispMsg
 2580              	.LBE1523:
 2581              	.LBE1524:
 2582              		.cfi_endproc
 2583              	.LFE226:
 2585              		.section	.text.do_dec,"ax",%progbits
 2586              		.align	1
 2587              		.p2align 2,,3
 2588              		.global	do_dec
 2589              		.syntax unified
 2590              		.thumb
 2591              		.thumb_func
 2592              		.fpu fpv4-sp-d16
 2594              	do_dec:
 2595              	.LVL194:
 2596              	.LFB20:
 414:src/xeq.c     **** 	unsigned short int top = 0;
 2597              		.loc 1 414 48 is_stmt 1 view -0
 2598              		.cfi_startproc
 2599              		@ args = 0, pretend = 0, frame = 8
 2600              		@ frame_needed = 0, uses_anonymous_args = 0
 415:src/xeq.c     **** 	unsigned short int bottom = 0;
 2601              		.loc 1 415 2 view .LVU691
 414:src/xeq.c     **** 	unsigned short int top = 0;
ARM GAS  /tmp/ccK8IvWa.s 			page 142


 2602              		.loc 1 414 48 is_stmt 0 view .LVU692
 2603 0000 70B5     		push	{r4, r5, r6, lr}
 2604              		.cfi_def_cfa_offset 16
 2605              		.cfi_offset 4, -16
 2606              		.cfi_offset 5, -12
 2607              		.cfi_offset 6, -8
 2608              		.cfi_offset 14, -4
 418:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2609              		.loc 1 418 12 view .LVU693
 2610 0002 114E     		ldr	r6, .L224
 414:src/xeq.c     **** 	unsigned short int top = 0;
 2611              		.loc 1 414 48 view .LVU694
 2612 0004 82B0     		sub	sp, sp, #8
 2613              		.cfi_def_cfa_offset 24
 415:src/xeq.c     **** 	unsigned short int bottom = 0;
 2614              		.loc 1 415 21 view .LVU695
 2615 0006 0023     		movs	r3, #0
 419:src/xeq.c     **** 
 2616              		.loc 1 419 11 view .LVU696
 2617 0008 0DF10602 		add	r2, sp, #6
 414:src/xeq.c     **** 	unsigned short int top = 0;
 2618              		.loc 1 414 48 view .LVU697
 2619 000c 0546     		mov	r5, r0
 418:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2620              		.loc 1 418 12 view .LVU698
 2621 000e 3360     		str	r3, [r6]
 415:src/xeq.c     **** 	unsigned short int bottom = 0;
 2622              		.loc 1 415 21 view .LVU699
 2623 0010 ADF80630 		strh	r3, [sp, #6]	@ movhi
 416:src/xeq.c     **** 
 2624              		.loc 1 416 2 is_stmt 1 view .LVU700
 2625              	.LVL195:
 418:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2626              		.loc 1 418 2 view .LVU701
 419:src/xeq.c     **** 
 2627              		.loc 1 419 2 view .LVU702
 419:src/xeq.c     **** 
 2628              		.loc 1 419 11 is_stmt 0 view .LVU703
 2629 0014 FFF7FEFF 		bl	find_section_bounds
 2630              	.LVL196:
 421:src/xeq.c     **** 		PcWrapped = 1;
 2631              		.loc 1 421 9 view .LVU704
 2632 0018 BDF80630 		ldrh	r3, [sp, #6]
 2633              	.LVL197:
 421:src/xeq.c     **** 		PcWrapped = 1;
 2634              		.loc 1 421 2 is_stmt 1 view .LVU705
 421:src/xeq.c     **** 		PcWrapped = 1;
 2635              		.loc 1 421 5 is_stmt 0 view .LVU706
 2636 001c AB42     		cmp	r3, r5
 422:src/xeq.c     **** 		pc = bottom;
 2637              		.loc 1 422 13 view .LVU707
 2638 001e 25BF     		ittet	cs
 2639 0020 0122     		movcs	r2, #1
 2640 0022 0446     		movcs	r4, r0
 422:src/xeq.c     **** 		pc = bottom;
 2641              		.loc 1 422 3 is_stmt 1 view .LVU708
 426:src/xeq.c     **** 	if (pc > top && isDBL(getprog(pc - 1)))
ARM GAS  /tmp/ccK8IvWa.s 			page 143


 2642              		.loc 1 426 3 is_stmt 0 view .LVU709
 2643 0024 05F1FF34 		addcc	r4, r5, #-1
 422:src/xeq.c     **** 		pc = bottom;
 2644              		.loc 1 422 13 view .LVU710
 2645 0028 3260     		strcs	r2, [r6]
 423:src/xeq.c     **** 	}
 2646              		.loc 1 423 3 is_stmt 1 view .LVU711
 2647              	.LVL198:
 426:src/xeq.c     **** 	if (pc > top && isDBL(getprog(pc - 1)))
 2648              		.loc 1 426 3 view .LVU712
 427:src/xeq.c     **** 		--pc;
 2649              		.loc 1 427 2 view .LVU713
 427:src/xeq.c     **** 		--pc;
 2650              		.loc 1 427 5 is_stmt 0 view .LVU714
 2651 002a A342     		cmp	r3, r4
 2652 002c 09D2     		bcs	.L219
 427:src/xeq.c     **** 		--pc;
 2653              		.loc 1 427 18 discriminator 1 view .LVU715
 2654 002e 651E     		subs	r5, r4, #1
 2655 0030 2846     		mov	r0, r5
 2656              	.LVL199:
 427:src/xeq.c     **** 		--pc;
 2657              		.loc 1 427 18 discriminator 1 view .LVU716
 2658 0032 FFF7FEFF 		bl	getprog
 2659              	.LVL200:
 2660 0036 00F47040 		and	r0, r0, #61440
 428:src/xeq.c     **** 	return pc;
 2661              		.loc 1 428 3 discriminator 1 view .LVU717
 2662 003a B0F5704F 		cmp	r0, #61440
 2663 003e 08BF     		it	eq
 2664 0040 2C46     		moveq	r4, r5
 2665              	.LVL201:
 2666              	.L219:
 430:src/xeq.c     **** 
 2667              		.loc 1 430 1 view .LVU718
 2668 0042 2046     		mov	r0, r4
 2669 0044 02B0     		add	sp, sp, #8
 2670              		.cfi_def_cfa_offset 16
 2671              		@ sp needed
 2672 0046 70BD     		pop	{r4, r5, r6, pc}
 2673              	.L225:
 2674              		.align	2
 2675              	.L224:
 2676 0048 00000000 		.word	PcWrapped
 2677              		.cfi_endproc
 2678              	.LFE20:
 2680              		.section	.text.update_program_bounds,"ax",%progbits
 2681              		.align	1
 2682              		.p2align 2,,3
 2683              		.global	update_program_bounds
 2684              		.syntax unified
 2685              		.thumb
 2686              		.thumb_func
 2687              		.fpu fpv4-sp-d16
 2689              	update_program_bounds:
 2690              	.LVL202:
 2691              	.LFB23:
ARM GAS  /tmp/ccK8IvWa.s 			page 144


 447:src/xeq.c     **** 	unsigned int pc = state_pc();
 2692              		.loc 1 447 45 is_stmt 1 view -0
 2693              		.cfi_startproc
 2694              		@ args = 0, pretend = 0, frame = 0
 2695              		@ frame_needed = 0, uses_anonymous_args = 0
 448:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 2696              		.loc 1 448 2 view .LVU720
 447:src/xeq.c     **** 	unsigned int pc = state_pc();
 2697              		.loc 1 447 45 is_stmt 0 view .LVU721
 2698 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2699              		.cfi_def_cfa_offset 24
 2700              		.cfi_offset 3, -24
 2701              		.cfi_offset 4, -20
 2702              		.cfi_offset 5, -16
 2703              		.cfi_offset 6, -12
 2704              		.cfi_offset 7, -8
 2705              		.cfi_offset 14, -4
 448:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 2706              		.loc 1 448 20 view .LVU722
 2707 0002 204E     		ldr	r6, .L248
 448:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 2708              		.loc 1 448 15 view .LVU723
 2709 0004 B6F8E047 		ldrh	r4, [r6, #2016]
 2710              	.LVL203:
 449:src/xeq.c     **** 		State.pc = pc = 1;
 2711              		.loc 1 449 2 is_stmt 1 view .LVU724
 449:src/xeq.c     **** 		State.pc = pc = 1;
 2712              		.loc 1 449 5 is_stmt 0 view .LVU725
 2713 0008 34B9     		cbnz	r4, .L227
 449:src/xeq.c     **** 		State.pc = pc = 1;
 2714              		.loc 1 449 14 discriminator 1 view .LVU726
 2715 000a 1F4B     		ldr	r3, .L248+4
 2716 000c 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 2717 000e 5B06     		lsls	r3, r3, #25
 450:src/xeq.c     **** 	if (! force && pc >= ProgBegin && pc <= ProgEnd)
 2718              		.loc 1 450 3 is_stmt 1 discriminator 1 view .LVU727
 2719              	.LVL204:
 450:src/xeq.c     **** 	if (! force && pc >= ProgBegin && pc <= ProgEnd)
 2720              		.loc 1 450 12 is_stmt 0 discriminator 1 view .LVU728
 2721 0010 44BF     		itt	mi
 2722 0012 0124     		movmi	r4, #1
 2723 0014 A6F8E047 		strhmi	r4, [r6, #2016]	@ movhi
 2724              	.LVL205:
 2725              	.L227:
 451:src/xeq.c     **** 		return;
 2726              		.loc 1 451 2 is_stmt 1 view .LVU729
 451:src/xeq.c     **** 		return;
 2727              		.loc 1 451 5 is_stmt 0 view .LVU730
 2728 0018 18B9     		cbnz	r0, .L228
 451:src/xeq.c     **** 		return;
 2729              		.loc 1 451 23 discriminator 1 view .LVU731
 2730 001a B6F8EC37 		ldrh	r3, [r6, #2028]
 451:src/xeq.c     **** 		return;
 2731              		.loc 1 451 14 discriminator 1 view .LVU732
 2732 001e A342     		cmp	r3, r4
 2733 0020 2BD9     		bls	.L245
 2734              	.L228:
ARM GAS  /tmp/ccK8IvWa.s 			page 145


 453:src/xeq.c     **** 		ProgEnd = pc;
 2735              		.loc 1 453 2 is_stmt 1 view .LVU733
 453:src/xeq.c     **** 		ProgEnd = pc;
 2736              		.loc 1 453 17 is_stmt 0 view .LVU734
 2737 0022 1A4D     		ldr	r5, .L248+8
 2738 0024 0023     		movs	r3, #0
 2739 0026 2B60     		str	r3, [r5]
 453:src/xeq.c     **** 		ProgEnd = pc;
 2740              		.loc 1 453 22 is_stmt 1 view .LVU735
 2741 0028 04E0     		b	.L231
 2742              	.LVL206:
 2743              	.L246:
 453:src/xeq.c     **** 		ProgEnd = pc;
 2744              		.loc 1 453 39 is_stmt 0 discriminator 2 view .LVU736
 2745 002a FFF7FEFF 		bl	do_inc
 2746              	.LVL207:
 453:src/xeq.c     **** 		ProgEnd = pc;
 2747              		.loc 1 453 2 discriminator 2 view .LVU737
 2748 002e 2B68     		ldr	r3, [r5]
 453:src/xeq.c     **** 		ProgEnd = pc;
 2749              		.loc 1 453 39 discriminator 2 view .LVU738
 2750 0030 0446     		mov	r4, r0
 2751              	.LVL208:
 453:src/xeq.c     **** 		ProgEnd = pc;
 2752              		.loc 1 453 22 is_stmt 1 discriminator 2 view .LVU739
 453:src/xeq.c     **** 		ProgEnd = pc;
 2753              		.loc 1 453 2 is_stmt 0 discriminator 2 view .LVU740
 2754 0032 5BB9     		cbnz	r3, .L230
 2755              	.LVL209:
 2756              	.L231:
 454:src/xeq.c     **** 		if (getprog(pc) == (OP_NIL | OP_END)) {
 2757              		.loc 1 454 3 is_stmt 1 view .LVU741
 455:src/xeq.c     **** 			break;
 2758              		.loc 1 455 7 is_stmt 0 view .LVU742
 2759 0034 2046     		mov	r0, r4
 454:src/xeq.c     **** 		if (getprog(pc) == (OP_NIL | OP_END)) {
 2760              		.loc 1 454 11 view .LVU743
 2761 0036 A6F8EE47 		strh	r4, [r6, #2030]	@ movhi
 455:src/xeq.c     **** 			break;
 2762              		.loc 1 455 3 is_stmt 1 view .LVU744
 455:src/xeq.c     **** 			break;
 2763              		.loc 1 455 7 is_stmt 0 view .LVU745
 2764 003a FFF7FEFF 		bl	getprog
 2765              	.LVL210:
 453:src/xeq.c     **** 		ProgEnd = pc;
 2766              		.loc 1 453 34 is_stmt 1 view .LVU746
 455:src/xeq.c     **** 			break;
 2767              		.loc 1 455 7 is_stmt 0 view .LVU747
 2768 003e 0346     		mov	r3, r0
 455:src/xeq.c     **** 			break;
 2769              		.loc 1 455 6 view .LVU748
 2770 0040 B3F59D7F 		cmp	r3, #314
 453:src/xeq.c     **** 		ProgEnd = pc;
 2771              		.loc 1 453 39 view .LVU749
 2772 0044 4FF00001 		mov	r1, #0
 2773 0048 2046     		mov	r0, r4
 455:src/xeq.c     **** 			break;
ARM GAS  /tmp/ccK8IvWa.s 			page 146


 2774              		.loc 1 455 6 view .LVU750
 2775 004a EED1     		bne	.L246
 2776              	.LVL211:
 2777              	.L230:
 459:src/xeq.c     **** 		const unsigned int opc = pc;
 2778              		.loc 1 459 2 is_stmt 1 view .LVU751
 459:src/xeq.c     **** 		const unsigned int opc = pc;
 2779              		.loc 1 459 10 is_stmt 0 view .LVU752
 2780 004c B6F8E047 		ldrh	r4, [r6, #2016]
 2781              	.LVL212:
 459:src/xeq.c     **** 		const unsigned int opc = pc;
 2782              		.loc 1 459 10 view .LVU753
 2783 0050 04E0     		b	.L233
 2784              	.LVL213:
 2785              	.L247:
 2786              	.LBB1525:
 462:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2787              		.loc 1 462 20 discriminator 1 view .LVU754
 2788 0052 FFF7FEFF 		bl	getprog
 2789              	.LVL214:
 462:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2790              		.loc 1 462 17 discriminator 1 view .LVU755
 2791 0056 B0F59D7F 		cmp	r0, #314
 2792 005a 08D0     		beq	.L232
 2793              	.LVL215:
 2794              	.L233:
 460:src/xeq.c     **** 		pc = do_dec(opc, 0);
 2795              		.loc 1 460 3 is_stmt 1 view .LVU756
 461:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 2796              		.loc 1 461 3 view .LVU757
 461:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 2797              		.loc 1 461 8 is_stmt 0 view .LVU758
 2798 005c 2046     		mov	r0, r4
 2799 005e 0021     		movs	r1, #0
 2800 0060 FFF7FEFF 		bl	do_dec
 2801              	.LVL216:
 462:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2802              		.loc 1 462 6 view .LVU759
 2803 0064 2B68     		ldr	r3, [r5]
 2804 0066 2746     		mov	r7, r4
 461:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 2805              		.loc 1 461 8 view .LVU760
 2806 0068 0446     		mov	r4, r0
 2807              	.LVL217:
 462:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2808              		.loc 1 462 3 is_stmt 1 view .LVU761
 462:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2809              		.loc 1 462 6 is_stmt 0 view .LVU762
 2810 006a 002B     		cmp	r3, #0
 2811 006c F1D0     		beq	.L247
 2812              	.LVL218:
 2813              	.L232:
 463:src/xeq.c     **** 			break;
 2814              		.loc 1 463 4 is_stmt 1 view .LVU763
 463:src/xeq.c     **** 			break;
 2815              		.loc 1 463 14 is_stmt 0 view .LVU764
 2816 006e 012F     		cmp	r7, #1
ARM GAS  /tmp/ccK8IvWa.s 			page 147


 2817 0070 38BF     		it	cc
 2818 0072 0127     		movcc	r7, #1
 2819              	.LVL219:
 463:src/xeq.c     **** 			break;
 2820              		.loc 1 463 14 view .LVU765
 2821 0074 A6F8EC77 		strh	r7, [r6, #2028]	@ movhi
 464:src/xeq.c     **** 		}
 2822              		.loc 1 464 4 is_stmt 1 view .LVU766
 2823              	.LBE1525:
 467:src/xeq.c     **** 
 2824              		.loc 1 467 1 is_stmt 0 view .LVU767
 2825 0078 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2826              	.LVL220:
 2827              	.L245:
 451:src/xeq.c     **** 		return;
 2828              		.loc 1 451 42 discriminator 2 view .LVU768
 2829 007a B6F8EE37 		ldrh	r3, [r6, #2030]
 451:src/xeq.c     **** 		return;
 2830              		.loc 1 451 33 discriminator 2 view .LVU769
 2831 007e A342     		cmp	r3, r4
 2832 0080 CFD3     		bcc	.L228
 467:src/xeq.c     **** 
 2833              		.loc 1 467 1 view .LVU770
 2834 0082 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2835              	.LVL221:
 2836              	.L249:
 467:src/xeq.c     **** 
 2837              		.loc 1 467 1 view .LVU771
 2838              		.align	2
 2839              	.L248:
 2840 0084 00000000 		.word	PersistentRam
 2841 0088 00000000 		.word	StateWhileOn
 2842 008c 00000000 		.word	PcWrapped
 2843              		.cfi_endproc
 2844              	.LFE23:
 2846              		.section	.text.set_pc,"ax",%progbits
 2847              		.align	1
 2848              		.p2align 2,,3
 2849              		.global	set_pc
 2850              		.syntax unified
 2851              		.thumb
 2852              		.thumb_func
 2853              		.fpu fpv4-sp-d16
 2855              	set_pc:
 2856              	.LVL222:
 2857              	.LFB17:
 344:src/xeq.c     **** 	if (isRAM(pc)) {
 2858              		.loc 1 344 30 is_stmt 1 view -0
 2859              		.cfi_startproc
 2860              		@ args = 0, pretend = 0, frame = 0
 2861              		@ frame_needed = 0, uses_anonymous_args = 0
 345:src/xeq.c     **** 		if (pc > ProgSize)
 2862              		.loc 1 345 2 view .LVU773
 345:src/xeq.c     **** 		if (pc > ProgSize)
 2863              		.loc 1 345 5 is_stmt 0 view .LVU774
 2864 0000 10F4704F 		tst	r0, #61440
 344:src/xeq.c     **** 	if (isRAM(pc)) {
ARM GAS  /tmp/ccK8IvWa.s 			page 148


 2865              		.loc 1 344 30 view .LVU775
 2866 0004 38B5     		push	{r3, r4, r5, lr}
 2867              		.cfi_def_cfa_offset 16
 2868              		.cfi_offset 3, -16
 2869              		.cfi_offset 4, -12
 2870              		.cfi_offset 5, -8
 2871              		.cfi_offset 14, -4
 344:src/xeq.c     **** 	if (isRAM(pc)) {
 2872              		.loc 1 344 30 view .LVU776
 2873 0006 0446     		mov	r4, r0
 345:src/xeq.c     **** 		if (pc > ProgSize)
 2874              		.loc 1 345 5 view .LVU777
 2875 0008 14D1     		bne	.L251
 346:src/xeq.c     **** 			pc = ProgSize;
 2876              		.loc 1 346 3 is_stmt 1 view .LVU778
 346:src/xeq.c     **** 			pc = ProgSize;
 2877              		.loc 1 346 12 is_stmt 0 view .LVU779
 2878 000a 254B     		ldr	r3, .L262
 2879 000c 5A88     		ldrh	r2, [r3, #2]
 2880 000e 9042     		cmp	r0, r2
 2881 0010 28BF     		it	cs
 2882 0012 1446     		movcs	r4, r2
 2883              	.LVL223:
 348:src/xeq.c     **** 			pc--;
 2884              		.loc 1 348 3 is_stmt 1 view .LVU780
 348:src/xeq.c     **** 			pc--;
 2885              		.loc 1 348 6 is_stmt 0 view .LVU781
 2886 0014 012C     		cmp	r4, #1
 2887 0016 06D9     		bls	.L252
 348:src/xeq.c     **** 			pc--;
 2888              		.loc 1 348 14 discriminator 1 view .LVU782
 2889 0018 33F81420 		ldrh	r2, [r3, r4, lsl #1]
 2890 001c 02F47042 		and	r2, r2, #61440
 2891 0020 B2F5704F 		cmp	r2, #61440
 2892 0024 33D0     		beq	.L261
 2893              	.L252:
 357:src/xeq.c     **** }
 2894              		.loc 1 357 2 is_stmt 1 view .LVU783
 2895              	.LVL224:
 2896              	.LBB1526:
 2897              	.LBI1526:
 278:src/xeq.c     **** 	State.pc = pc;
 2898              		.loc 1 278 13 view .LVU784
 2899              	.LBB1527:
 279:src/xeq.c     **** 	update_program_bounds(0);
 2900              		.loc 1 279 2 view .LVU785
 279:src/xeq.c     **** 	update_program_bounds(0);
 2901              		.loc 1 279 11 is_stmt 0 view .LVU786
 2902 0026 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 280:src/xeq.c     **** }
 2903              		.loc 1 280 2 is_stmt 1 view .LVU787
 2904 002a 0020     		movs	r0, #0
 2905              	.LBE1527:
 2906              	.LBE1526:
 358:src/xeq.c     **** 
 2907              		.loc 1 358 1 is_stmt 0 view .LVU788
 2908 002c BDE83840 		pop	{r3, r4, r5, lr}
ARM GAS  /tmp/ccK8IvWa.s 			page 149


 2909              		.cfi_remember_state
 2910              		.cfi_restore 14
 2911              		.cfi_restore 5
 2912              		.cfi_restore 4
 2913              		.cfi_restore 3
 2914              		.cfi_def_cfa_offset 0
 2915              	.LVL225:
 2916              	.LBB1535:
 2917              	.LBB1528:
 280:src/xeq.c     **** }
 2918              		.loc 1 280 2 view .LVU789
 2919 0030 FFF7FEBF 		b	update_program_bounds
 2920              	.LVL226:
 2921              	.L251:
 2922              		.cfi_restore_state
 280:src/xeq.c     **** }
 2923              		.loc 1 280 2 view .LVU790
 2924              	.LBE1528:
 2925              	.LBE1535:
 350:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 2926              		.loc 1 350 9 is_stmt 1 view .LVU791
 350:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 2927              		.loc 1 350 14 is_stmt 0 view .LVU792
 2928 0034 820B     		lsrs	r2, r0, #14
 350:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 2929              		.loc 1 350 12 view .LVU793
 2930 0036 032A     		cmp	r2, #3
 2931 0038 21D0     		beq	.L260
 2932              	.LBB1536:
 351:src/xeq.c     **** 		if (pc > n - 1)
 2933              		.loc 1 351 3 is_stmt 1 view .LVU794
 2934              	.LVL227:
 2935              	.LBB1537:
 2936              	.LBI1537:
 296:src/xeq.c     **** 	if (region == REGION_XROM)
 2937              		.loc 1 296 5 view .LVU795
 2938              	.LBB1538:
 297:src/xeq.c     **** 		return xrom_size;
 2939              		.loc 1 297 2 view .LVU796
 300:src/xeq.c     **** }
 2940              		.loc 1 300 3 view .LVU797
 300:src/xeq.c     **** }
 2941              		.loc 1 300 24 is_stmt 0 view .LVU798
 2942 003a 1A49     		ldr	r1, .L262+4
 2943              	.LBE1538:
 2944              	.LBE1537:
 351:src/xeq.c     **** 		if (pc > n - 1)
 2945              		.loc 1 351 26 view .LVU799
 2946 003c 1A4B     		ldr	r3, .L262+8
 2947              	.LBB1540:
 2948              	.LBB1539:
 300:src/xeq.c     **** }
 2949              		.loc 1 300 32 view .LVU800
 2950 003e 51F82220 		ldr	r2, [r1, r2, lsl #2]
 2951              	.LBE1539:
 2952              	.LBE1540:
 351:src/xeq.c     **** 		if (pc > n - 1)
ARM GAS  /tmp/ccK8IvWa.s 			page 150


 2953              		.loc 1 351 39 view .LVU801
 2954 0042 32F8022C 		ldrh	r2, [r2, #-2]
 351:src/xeq.c     **** 		if (pc > n - 1)
 2955              		.loc 1 351 26 view .LVU802
 2956 0046 00EA0301 		and	r1, r0, r3
 351:src/xeq.c     **** 		if (pc > n - 1)
 2957              		.loc 1 351 39 view .LVU803
 2958 004a 0A44     		add	r2, r2, r1
 2959              	.LVL228:
 352:src/xeq.c     **** 			pc = n - 1;
 2960              		.loc 1 352 3 is_stmt 1 view .LVU804
 2961 004c 9042     		cmp	r0, r2
 2962 004e 28BF     		it	cs
 2963 0050 1446     		movcs	r4, r2
 2964              	.LVL229:
 354:src/xeq.c     **** 			--pc;
 2965              		.loc 1 354 3 view .LVU805
 354:src/xeq.c     **** 			--pc;
 2966              		.loc 1 354 12 is_stmt 0 view .LVU806
 2967 0052 2340     		ands	r3, r3, r4
 2968 0054 0133     		adds	r3, r3, #1
 354:src/xeq.c     **** 			--pc;
 2969              		.loc 1 354 6 view .LVU807
 2970 0056 A342     		cmp	r3, r4
 2971 0058 11D2     		bcs	.L260
 354:src/xeq.c     **** 			--pc;
 2972              		.loc 1 354 28 discriminator 1 view .LVU808
 2973 005a 651E     		subs	r5, r4, #1
 2974 005c 2846     		mov	r0, r5
 2975 005e FFF7FEFF 		bl	getprog
 2976              	.LVL230:
 355:src/xeq.c     **** 	}
 2977              		.loc 1 355 4 discriminator 1 view .LVU809
 2978 0062 0F4B     		ldr	r3, .L262
 354:src/xeq.c     **** 			--pc;
 2979              		.loc 1 354 28 discriminator 1 view .LVU810
 2980 0064 00F47040 		and	r0, r0, #61440
 355:src/xeq.c     **** 	}
 2981              		.loc 1 355 4 discriminator 1 view .LVU811
 2982 0068 B0F5704F 		cmp	r0, #61440
 2983 006c 08BF     		it	eq
 2984 006e 2C46     		moveq	r4, r5
 2985              	.LVL231:
 355:src/xeq.c     **** 	}
 2986              		.loc 1 355 4 discriminator 1 view .LVU812
 2987              	.LBE1536:
 357:src/xeq.c     **** }
 2988              		.loc 1 357 2 is_stmt 1 discriminator 1 view .LVU813
 2989              	.LBB1541:
 278:src/xeq.c     **** 	State.pc = pc;
 2990              		.loc 1 278 13 discriminator 1 view .LVU814
 2991              	.LBB1529:
 279:src/xeq.c     **** 	update_program_bounds(0);
 2992              		.loc 1 279 2 discriminator 1 view .LVU815
 279:src/xeq.c     **** 	update_program_bounds(0);
 2993              		.loc 1 279 11 is_stmt 0 discriminator 1 view .LVU816
 2994 0070 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
ARM GAS  /tmp/ccK8IvWa.s 			page 151


 280:src/xeq.c     **** }
 2995              		.loc 1 280 2 is_stmt 1 discriminator 1 view .LVU817
 2996 0074 0020     		movs	r0, #0
 2997              	.LBE1529:
 2998              	.LBE1541:
 358:src/xeq.c     **** 
 2999              		.loc 1 358 1 is_stmt 0 discriminator 1 view .LVU818
 3000 0076 BDE83840 		pop	{r3, r4, r5, lr}
 3001              		.cfi_remember_state
 3002              		.cfi_restore 14
 3003              		.cfi_restore 5
 3004              		.cfi_restore 4
 3005              		.cfi_restore 3
 3006              		.cfi_def_cfa_offset 0
 3007              	.LVL232:
 3008              	.LBB1542:
 3009              	.LBB1530:
 280:src/xeq.c     **** }
 3010              		.loc 1 280 2 discriminator 1 view .LVU819
 3011 007a FFF7FEBF 		b	update_program_bounds
 3012              	.LVL233:
 3013              	.L260:
 3014              		.cfi_restore_state
 280:src/xeq.c     **** }
 3015              		.loc 1 280 2 discriminator 1 view .LVU820
 3016 007e 084B     		ldr	r3, .L262
 280:src/xeq.c     **** }
 3017              		.loc 1 280 2 discriminator 1 view .LVU821
 3018              	.LBE1530:
 3019              	.LBE1542:
 357:src/xeq.c     **** }
 3020              		.loc 1 357 2 is_stmt 1 view .LVU822
 3021              	.LVL234:
 3022              	.LBB1543:
 278:src/xeq.c     **** 	State.pc = pc;
 3023              		.loc 1 278 13 view .LVU823
 3024              	.LBB1531:
 279:src/xeq.c     **** 	update_program_bounds(0);
 3025              		.loc 1 279 2 view .LVU824
 280:src/xeq.c     **** }
 3026              		.loc 1 280 2 is_stmt 0 view .LVU825
 3027 0080 0020     		movs	r0, #0
 279:src/xeq.c     **** 	update_program_bounds(0);
 3028              		.loc 1 279 11 view .LVU826
 3029 0082 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 280:src/xeq.c     **** }
 3030              		.loc 1 280 2 is_stmt 1 view .LVU827
 3031              	.LBE1531:
 3032              	.LBE1543:
 358:src/xeq.c     **** 
 3033              		.loc 1 358 1 is_stmt 0 view .LVU828
 3034 0086 BDE83840 		pop	{r3, r4, r5, lr}
 3035              		.cfi_remember_state
 3036              		.cfi_restore 14
 3037              		.cfi_restore 5
 3038              		.cfi_restore 4
 3039              		.cfi_restore 3
ARM GAS  /tmp/ccK8IvWa.s 			page 152


 3040              		.cfi_def_cfa_offset 0
 3041              	.LVL235:
 3042              	.LBB1544:
 3043              	.LBB1532:
 280:src/xeq.c     **** }
 3044              		.loc 1 280 2 view .LVU829
 3045 008a FFF7FEBF 		b	update_program_bounds
 3046              	.LVL236:
 3047              	.L261:
 3048              		.cfi_restore_state
 280:src/xeq.c     **** }
 3049              		.loc 1 280 2 view .LVU830
 3050              	.LBE1532:
 3051              	.LBE1544:
 349:src/xeq.c     **** 	} else if (!isXROM(pc)) {
 3052              		.loc 1 349 4 is_stmt 1 view .LVU831
 349:src/xeq.c     **** 	} else if (!isXROM(pc)) {
 3053              		.loc 1 349 6 is_stmt 0 view .LVU832
 3054 008e 013C     		subs	r4, r4, #1
 3055              	.LVL237:
 357:src/xeq.c     **** }
 3056              		.loc 1 357 2 is_stmt 1 view .LVU833
 3057              	.LBB1545:
 278:src/xeq.c     **** 	State.pc = pc;
 3058              		.loc 1 278 13 view .LVU834
 3059              	.LBB1533:
 279:src/xeq.c     **** 	update_program_bounds(0);
 3060              		.loc 1 279 2 view .LVU835
 279:src/xeq.c     **** 	update_program_bounds(0);
 3061              		.loc 1 279 11 is_stmt 0 view .LVU836
 3062 0090 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 280:src/xeq.c     **** }
 3063              		.loc 1 280 2 is_stmt 1 view .LVU837
 3064 0094 0020     		movs	r0, #0
 3065              	.LBE1533:
 3066              	.LBE1545:
 358:src/xeq.c     **** 
 3067              		.loc 1 358 1 is_stmt 0 view .LVU838
 3068 0096 BDE83840 		pop	{r3, r4, r5, lr}
 3069              		.cfi_restore 14
 3070              		.cfi_restore 5
 3071              		.cfi_restore 4
 3072              		.cfi_restore 3
 3073              		.cfi_def_cfa_offset 0
 3074              	.LVL238:
 3075              	.LBB1546:
 3076              	.LBB1534:
 280:src/xeq.c     **** }
 3077              		.loc 1 280 2 view .LVU839
 3078 009a FFF7FEBF 		b	update_program_bounds
 3079              	.LVL239:
 3080              	.L263:
 280:src/xeq.c     **** }
 3081              		.loc 1 280 2 view .LVU840
 3082 009e 00BF     		.align	2
 3083              	.L262:
 3084 00a0 00000000 		.word	PersistentRam
ARM GAS  /tmp/ccK8IvWa.s 			page 153


 3085 00a4 00000000 		.word	.LANCHOR0
 3086 00a8 00C0FFFF 		.word	-16384
 3087              	.LBE1534:
 3088              	.LBE1546:
 3089              		.cfi_endproc
 3090              	.LFE17:
 3092              		.section	.text.incpc,"ax",%progbits
 3093              		.align	1
 3094              		.p2align 2,,3
 3095              		.global	incpc
 3096              		.syntax unified
 3097              		.thumb
 3098              		.thumb_func
 3099              		.fpu fpv4-sp-d16
 3101              	incpc:
 3102              	.LFB21:
 435:src/xeq.c     **** 	raw_set_pc(do_inc(state_pc(), 1));
 3103              		.loc 1 435 17 is_stmt 1 view -0
 3104              		.cfi_startproc
 3105              		@ args = 0, pretend = 0, frame = 0
 3106              		@ frame_needed = 0, uses_anonymous_args = 0
 436:src/xeq.c     **** 	return PcWrapped;
 3107              		.loc 1 436 2 view .LVU842
 435:src/xeq.c     **** 	raw_set_pc(do_inc(state_pc(), 1));
 3108              		.loc 1 435 17 is_stmt 0 view .LVU843
 3109 0000 10B5     		push	{r4, lr}
 3110              		.cfi_def_cfa_offset 8
 3111              		.cfi_offset 4, -8
 3112              		.cfi_offset 14, -4
 436:src/xeq.c     **** 	return PcWrapped;
 3113              		.loc 1 436 20 view .LVU844
 3114 0002 074C     		ldr	r4, .L266
 436:src/xeq.c     **** 	return PcWrapped;
 3115              		.loc 1 436 2 view .LVU845
 3116 0004 0121     		movs	r1, #1
 3117 0006 B4F8E007 		ldrh	r0, [r4, #2016]
 3118 000a FFF7FEFF 		bl	do_inc
 3119              	.LVL240:
 3120 000e 0346     		mov	r3, r0
 3121              	.LVL241:
 3122              	.LBB1547:
 3123              	.LBI1547:
 278:src/xeq.c     **** 	State.pc = pc;
 3124              		.loc 1 278 13 is_stmt 1 view .LVU846
 3125              	.LBB1548:
 279:src/xeq.c     **** 	update_program_bounds(0);
 3126              		.loc 1 279 2 view .LVU847
 280:src/xeq.c     **** }
 3127              		.loc 1 280 2 is_stmt 0 view .LVU848
 3128 0010 0020     		movs	r0, #0
 3129              	.LVL242:
 279:src/xeq.c     **** 	update_program_bounds(0);
 3130              		.loc 1 279 11 view .LVU849
 3131 0012 A4F8E037 		strh	r3, [r4, #2016]	@ movhi
 280:src/xeq.c     **** }
 3132              		.loc 1 280 2 is_stmt 1 view .LVU850
 3133 0016 FFF7FEFF 		bl	update_program_bounds
ARM GAS  /tmp/ccK8IvWa.s 			page 154


 3134              	.LVL243:
 280:src/xeq.c     **** }
 3135              		.loc 1 280 2 is_stmt 0 view .LVU851
 3136              	.LBE1548:
 3137              	.LBE1547:
 437:src/xeq.c     **** }
 3138              		.loc 1 437 2 is_stmt 1 view .LVU852
 437:src/xeq.c     **** }
 3139              		.loc 1 437 9 is_stmt 0 view .LVU853
 3140 001a 024B     		ldr	r3, .L266+4
 438:src/xeq.c     **** 
 3141              		.loc 1 438 1 view .LVU854
 3142 001c 1868     		ldr	r0, [r3]
 3143 001e 10BD     		pop	{r4, pc}
 3144              	.L267:
 3145              		.align	2
 3146              	.L266:
 3147 0020 00000000 		.word	PersistentRam
 3148 0024 00000000 		.word	PcWrapped
 3149              		.cfi_endproc
 3150              	.LFE21:
 3152              		.section	.text.decpc,"ax",%progbits
 3153              		.align	1
 3154              		.p2align 2,,3
 3155              		.global	decpc
 3156              		.syntax unified
 3157              		.thumb
 3158              		.thumb_func
 3159              		.fpu fpv4-sp-d16
 3161              	decpc:
 3162              	.LFB22:
 440:src/xeq.c     **** 	raw_set_pc(do_dec(state_pc(), 1));
 3163              		.loc 1 440 18 is_stmt 1 view -0
 3164              		.cfi_startproc
 3165              		@ args = 0, pretend = 0, frame = 0
 3166              		@ frame_needed = 0, uses_anonymous_args = 0
 441:src/xeq.c     **** }
 3167              		.loc 1 441 2 view .LVU856
 440:src/xeq.c     **** 	raw_set_pc(do_dec(state_pc(), 1));
 3168              		.loc 1 440 18 is_stmt 0 view .LVU857
 3169 0000 10B5     		push	{r4, lr}
 3170              		.cfi_def_cfa_offset 8
 3171              		.cfi_offset 4, -8
 3172              		.cfi_offset 14, -4
 441:src/xeq.c     **** }
 3173              		.loc 1 441 20 view .LVU858
 3174 0002 074C     		ldr	r4, .L270
 441:src/xeq.c     **** }
 3175              		.loc 1 441 2 view .LVU859
 3176 0004 0121     		movs	r1, #1
 3177 0006 B4F8E007 		ldrh	r0, [r4, #2016]
 3178 000a FFF7FEFF 		bl	do_dec
 3179              	.LVL244:
 3180 000e 0346     		mov	r3, r0
 3181              	.LVL245:
 3182              	.LBB1549:
 3183              	.LBI1549:
ARM GAS  /tmp/ccK8IvWa.s 			page 155


 278:src/xeq.c     **** 	State.pc = pc;
 3184              		.loc 1 278 13 is_stmt 1 view .LVU860
 3185              	.LBB1550:
 279:src/xeq.c     **** 	update_program_bounds(0);
 3186              		.loc 1 279 2 view .LVU861
 279:src/xeq.c     **** 	update_program_bounds(0);
 3187              		.loc 1 279 11 is_stmt 0 view .LVU862
 3188 0010 A4F8E037 		strh	r3, [r4, #2016]	@ movhi
 280:src/xeq.c     **** }
 3189              		.loc 1 280 2 is_stmt 1 view .LVU863
 3190 0014 0020     		movs	r0, #0
 3191              	.LVL246:
 280:src/xeq.c     **** }
 3192              		.loc 1 280 2 is_stmt 0 view .LVU864
 3193              	.LBE1550:
 3194              	.LBE1549:
 442:src/xeq.c     **** 
 3195              		.loc 1 442 1 view .LVU865
 3196 0016 BDE81040 		pop	{r4, lr}
 3197              		.cfi_restore 14
 3198              		.cfi_restore 4
 3199              		.cfi_def_cfa_offset 0
 3200              	.LBB1552:
 3201              	.LBB1551:
 280:src/xeq.c     **** }
 3202              		.loc 1 280 2 view .LVU866
 3203 001a FFF7FEBF 		b	update_program_bounds
 3204              	.LVL247:
 3205              	.L271:
 280:src/xeq.c     **** }
 3206              		.loc 1 280 2 view .LVU867
 3207 001e 00BF     		.align	2
 3208              	.L270:
 3209 0020 00000000 		.word	PersistentRam
 3210              	.LBE1551:
 3211              	.LBE1552:
 3212              		.cfi_endproc
 3213              	.LFE22:
 3215              		.section	.text.fin_tst.part.0,"ax",%progbits
 3216              		.align	1
 3217              		.p2align 2,,3
 3218              		.syntax unified
 3219              		.thumb
 3220              		.thumb_func
 3221              		.fpu fpv4-sp-d16
 3223              	fin_tst.part.0:
 3224              	.LFB285:
2324:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 3225              		.loc 1 2324 6 is_stmt 1 view -0
 3226              		.cfi_startproc
 3227              		@ args = 0, pretend = 0, frame = 0
 3228              		@ frame_needed = 0, uses_anonymous_args = 0
 3229              	.LVL248:
2324:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 3230              		.loc 1 2324 6 is_stmt 0 view .LVU869
 3231 0000 08B5     		push	{r3, lr}
 3232              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccK8IvWa.s 			page 156


 3233              		.cfi_offset 3, -8
 3234              		.cfi_offset 14, -4
2327:src/xeq.c     **** 			decpc();
 3235              		.loc 1 2327 14 view .LVU870
 3236 0002 FFF7FEFF 		bl	incpc
 3237              	.LVL249:
2327:src/xeq.c     **** 			decpc();
 3238              		.loc 1 2327 11 view .LVU871
 3239 0006 00B9     		cbnz	r0, .L275
2338:src/xeq.c     **** 
 3240              		.loc 1 2338 1 view .LVU872
 3241 0008 08BD     		pop	{r3, pc}
 3242              	.L275:
2328:src/xeq.c     **** 	}
 3243              		.loc 1 2328 4 is_stmt 1 view .LVU873
2338:src/xeq.c     **** 
 3244              		.loc 1 2338 1 is_stmt 0 view .LVU874
 3245 000a BDE80840 		pop	{r3, lr}
 3246              		.cfi_restore 14
 3247              		.cfi_restore 3
 3248              		.cfi_def_cfa_offset 0
2328:src/xeq.c     **** 	}
 3249              		.loc 1 2328 4 view .LVU875
 3250 000e FFF7FEBF 		b	decpc
 3251              	.LVL250:
 3252              		.cfi_endproc
 3253              	.LFE285:
 3255 0012 00BF     		.section	.text.do_rtn,"ax",%progbits
 3256              		.align	1
 3257              		.p2align 2,,3
 3258              		.syntax unified
 3259              		.thumb
 3260              		.thumb_func
 3261              		.fpu fpv4-sp-d16
 3263              	do_rtn:
 3264              	.LVL251:
 3265              	.LFB149:
2029:src/xeq.c     **** 	unsigned short pc;
 3266              		.loc 1 2029 31 is_stmt 1 view -0
 3267              		.cfi_startproc
 3268              		@ args = 0, pretend = 0, frame = 0
 3269              		@ frame_needed = 0, uses_anonymous_args = 0
2030:src/xeq.c     **** 
 3270              		.loc 1 2030 2 view .LVU877
2032:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
 3271              		.loc 1 2032 2 view .LVU878
2029:src/xeq.c     **** 	unsigned short pc;
 3272              		.loc 1 2029 31 is_stmt 0 view .LVU879
 3273 0000 70B5     		push	{r4, r5, r6, lr}
 3274              		.cfi_def_cfa_offset 16
 3275              		.cfi_offset 4, -16
 3276              		.cfi_offset 5, -12
 3277              		.cfi_offset 6, -8
 3278              		.cfi_offset 14, -4
2032:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
 3279              		.loc 1 2032 6 view .LVU880
 3280 0002 204C     		ldr	r4, .L290
ARM GAS  /tmp/ccK8IvWa.s 			page 157


2032:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
 3281              		.loc 1 2032 5 view .LVU881
 3282 0004 B4F9E237 		ldrsh	r3, [r4, #2018]
 3283 0008 002B     		cmp	r3, #0
 3284 000a 0EDB     		blt	.L277
2034:src/xeq.c     **** 		raw_set_pc(ProgBegin);
 3285              		.loc 1 2034 3 is_stmt 1 view .LVU882
 3286              	.LBB1571:
 3287              	.LBI1571:
1395:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 3288              		.loc 1 1395 6 view .LVU883
 3289              	.LBB1572:
1396:src/xeq.c     **** }
 3290              		.loc 1 1396 2 view .LVU884
1396:src/xeq.c     **** }
 3291              		.loc 1 1396 24 is_stmt 0 view .LVU885
 3292 000c 0020     		movs	r0, #0
 3293              	.LVL252:
1396:src/xeq.c     **** }
 3294              		.loc 1 1396 24 view .LVU886
 3295              	.LBE1572:
 3296              	.LBE1571:
 3297              	.LBB1574:
 3298              	.LBB1575:
 279:src/xeq.c     **** 	update_program_bounds(0);
 3299              		.loc 1 279 11 view .LVU887
 3300 000e B4F8EC37 		ldrh	r3, [r4, #2028]
 3301              	.LBE1575:
 3302              	.LBE1574:
 3303              	.LBB1577:
 3304              	.LBB1573:
1396:src/xeq.c     **** }
 3305              		.loc 1 1396 24 view .LVU888
 3306 0012 A4F8DE07 		strh	r0, [r4, #2014]	@ movhi
1396:src/xeq.c     **** }
 3307              		.loc 1 1396 12 view .LVU889
 3308 0016 A4F8E207 		strh	r0, [r4, #2018]	@ movhi
 3309              	.LBE1573:
 3310              	.LBE1577:
2035:src/xeq.c     **** 	}
 3311              		.loc 1 2035 3 is_stmt 1 view .LVU890
 3312              	.LVL253:
 3313              	.LBB1578:
 3314              	.LBI1574:
 278:src/xeq.c     **** 	State.pc = pc;
 3315              		.loc 1 278 13 view .LVU891
 3316              	.LBB1576:
 279:src/xeq.c     **** 	update_program_bounds(0);
 3317              		.loc 1 279 2 view .LVU892
 279:src/xeq.c     **** 	update_program_bounds(0);
 3318              		.loc 1 279 11 is_stmt 0 view .LVU893
 3319 001a A4F8E037 		strh	r3, [r4, #2016]	@ movhi
 280:src/xeq.c     **** }
 3320              		.loc 1 280 2 is_stmt 1 view .LVU894
 3321 001e FFF7FEFF 		bl	update_program_bounds
 3322              	.LVL254:
 3323              	.L278:
ARM GAS  /tmp/ccK8IvWa.s 			page 158


 280:src/xeq.c     **** }
 3324              		.loc 1 280 2 is_stmt 0 view .LVU895
 3325              	.LBE1576:
 3326              	.LBE1578:
2048:src/xeq.c     **** 		// RTN with empty stack stops
 3327              		.loc 1 2048 2 is_stmt 1 view .LVU896
2048:src/xeq.c     **** 		// RTN with empty stack stops
 3328              		.loc 1 2048 5 is_stmt 0 view .LVU897
 3329 0022 B4F9E217 		ldrsh	r1, [r4, #2018]
 3330 0026 01B3     		cbz	r1, .L289
2052:src/xeq.c     **** 
 3331              		.loc 1 2052 1 view .LVU898
 3332 0028 70BD     		pop	{r4, r5, r6, pc}
 3333              	.LVL255:
 3334              	.L277:
2040:src/xeq.c     **** 		pc = RetStk[RetStkPtr - 1];
 3335              		.loc 1 2040 3 is_stmt 1 view .LVU899
 3336 002a 0546     		mov	r5, r0
 3337 002c FFF7FEFF 		bl	retstk_up
 3338              	.LVL256:
2041:src/xeq.c     **** 		raw_set_pc(pc);
 3339              		.loc 1 2041 3 view .LVU900
2041:src/xeq.c     **** 		raw_set_pc(pc);
 3340              		.loc 1 2041 14 is_stmt 0 view .LVU901
 3341 0030 B4F9E237 		ldrsh	r3, [r4, #2018]
2041:src/xeq.c     **** 		raw_set_pc(pc);
 3342              		.loc 1 2041 6 view .LVU902
 3343 0034 144A     		ldr	r2, .L290+4
2041:src/xeq.c     **** 		raw_set_pc(pc);
 3344              		.loc 1 2041 14 view .LVU903
 3345 0036 03F10043 		add	r3, r3, #-2147483648
2041:src/xeq.c     **** 		raw_set_pc(pc);
 3346              		.loc 1 2041 6 view .LVU904
 3347 003a 1268     		ldr	r2, [r2]
2041:src/xeq.c     **** 		raw_set_pc(pc);
 3348              		.loc 1 2041 14 view .LVU905
 3349 003c 013B     		subs	r3, r3, #1
 3350              	.LBB1579:
 3351              	.LBB1580:
 280:src/xeq.c     **** }
 3352              		.loc 1 280 2 view .LVU906
 3353 003e 0020     		movs	r0, #0
 3354              	.LBE1580:
 3355              	.LBE1579:
2041:src/xeq.c     **** 		raw_set_pc(pc);
 3356              		.loc 1 2041 6 view .LVU907
 3357 0040 32F81360 		ldrh	r6, [r2, r3, lsl #1]
 3358              	.LVL257:
2042:src/xeq.c     **** 		// If RTN+1 inc PC unless a POPUSR command or the program end would be skipped
 3359              		.loc 1 2042 3 is_stmt 1 view .LVU908
 3360              	.LBB1582:
 3361              	.LBI1579:
 278:src/xeq.c     **** 	State.pc = pc;
 3362              		.loc 1 278 13 view .LVU909
 3363              	.LBB1581:
 279:src/xeq.c     **** 	update_program_bounds(0);
 3364              		.loc 1 279 2 view .LVU910
ARM GAS  /tmp/ccK8IvWa.s 			page 159


 279:src/xeq.c     **** 	update_program_bounds(0);
 3365              		.loc 1 279 11 is_stmt 0 view .LVU911
 3366 0044 A4F8E067 		strh	r6, [r4, #2016]	@ movhi
 280:src/xeq.c     **** }
 3367              		.loc 1 280 2 is_stmt 1 view .LVU912
 3368 0048 FFF7FEFF 		bl	update_program_bounds
 3369              	.LVL258:
 280:src/xeq.c     **** }
 3370              		.loc 1 280 2 is_stmt 0 view .LVU913
 3371              	.LBE1581:
 3372              	.LBE1582:
2044:src/xeq.c     **** 			if (incpc())
 3373              		.loc 1 2044 3 is_stmt 1 view .LVU914
2044:src/xeq.c     **** 			if (incpc())
 3374              		.loc 1 2044 6 is_stmt 0 view .LVU915
 3375 004c 002D     		cmp	r5, #0
 3376 004e E8D0     		beq	.L278
2044:src/xeq.c     **** 			if (incpc())
 3377              		.loc 1 2044 16 discriminator 1 view .LVU916
 3378 0050 3046     		mov	r0, r6
 3379 0052 FFF7FEFF 		bl	getprog
 3380              	.LVL259:
2044:src/xeq.c     **** 			if (incpc())
 3381              		.loc 1 2044 13 discriminator 1 view .LVU917
 3382 0056 B0F5C17F 		cmp	r0, #386
 3383 005a E2D0     		beq	.L278
2045:src/xeq.c     **** 				decpc();
 3384              		.loc 1 2045 4 is_stmt 1 view .LVU918
2045:src/xeq.c     **** 				decpc();
 3385              		.loc 1 2045 8 is_stmt 0 view .LVU919
 3386 005c FFF7FEFF 		bl	incpc
 3387              	.LVL260:
2045:src/xeq.c     **** 				decpc();
 3388              		.loc 1 2045 7 view .LVU920
 3389 0060 0028     		cmp	r0, #0
 3390 0062 DED0     		beq	.L278
2046:src/xeq.c     **** 	}
 3391              		.loc 1 2046 5 is_stmt 1 view .LVU921
 3392 0064 FFF7FEFF 		bl	decpc
 3393              	.LVL261:
 3394 0068 DBE7     		b	.L278
 3395              	.LVL262:
 3396              	.L289:
 3397              	.LBB1583:
 3398              	.LBI1583:
2029:src/xeq.c     **** 	unsigned short pc;
 3399              		.loc 1 2029 13 view .LVU922
 3400              	.LBB1584:
2050:src/xeq.c     **** 	}
 3401              		.loc 1 2050 3 view .LVU923
 3402              	.LBB1585:
 3403              	.LBI1585:
4906:src/xeq.c     **** 
4907:src/xeq.c     **** 
4908:src/xeq.c     **** /* Handle a command that takes an argument.  The argument is encoded
4909:src/xeq.c     ****  * in the low order bits of the opcode.  We also have to take
4910:src/xeq.c     ****  * account of the indirection flag and various limits.
ARM GAS  /tmp/ccK8IvWa.s 			page 160


4911:src/xeq.c     ****  */
4912:src/xeq.c     **** static void rargs(const opcode op) {
4913:src/xeq.c     **** 	unsigned int arg = op & RARG_MASK;
4914:src/xeq.c     **** 	const unsigned int cmd = RARG_CMD(op);
4915:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
4916:src/xeq.c     **** 	unsigned int lim = argcmds[cmd].lim;
4917:src/xeq.c     **** 
4918:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
4919:src/xeq.c     **** 
4920:src/xeq.c     **** 	process_cmdline();
4921:src/xeq.c     **** 
4922:src/xeq.c     **** 	if (cmd >= NUM_RARG) {
4923:src/xeq.c     **** 		illegal(op);
4924:src/xeq.c     **** 		return;
4925:src/xeq.c     **** 	}
4926:src/xeq.c     **** 	if (isNULL(argcmds[cmd].f)) {
4927:src/xeq.c     **** 		set_lift();
4928:src/xeq.c     **** 		return;
4929:src/xeq.c     **** 	}
4930:src/xeq.c     **** 
4931:src/xeq.c     **** 	if (ind) {
4932:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
4933:src/xeq.c     **** 			// Get the argument by reading a register
4934:src/xeq.c     **** 			int sgn;
4935:src/xeq.c     **** 			unsigned long long int regval;
4936:src/xeq.c     **** 
4937:src/xeq.c     **** 			if (arg > get_reg_limit(RARG_RCL, arg)) {
4938:src/xeq.c     **** 				// Invalid register specified for indirect access
4939:src/xeq.c     **** 				report_err(ERR_RANGE);
4940:src/xeq.c     **** 				return;
4941:src/xeq.c     **** 			}
4942:src/xeq.c     **** 			regval = get_reg_n_int_sgn(arg, &sgn);
4943:src/xeq.c     **** 			if ((regval >> 32) != 0)
4944:src/xeq.c     **** 				goto range;
4945:src/xeq.c     **** 			arg = (unsigned int) regval;
4946:src/xeq.c     **** 			if (argcmds[cmd].local && sgn) {
4947:src/xeq.c     **** 				// negative arguments address local registers or flags
4948:src/xeq.c     **** 				arg = LOCAL_REG_BASE + arg;
4949:src/xeq.c     **** 			}
4950:src/xeq.c     **** 		} 
4951:src/xeq.c     **** 		else {
4952:src/xeq.c     **** 			// put the top bit back in
4953:src/xeq.c     **** 			arg |= RARG_IND;
4954:src/xeq.c     **** 		}
4955:src/xeq.c     **** 	}
4956:src/xeq.c     **** 	if (argcmds[cmd].reg) {
4957:src/xeq.c     **** 		// Range checking for registers against variable boundary
4958:src/xeq.c     **** 		lim = get_reg_limit(cmd, arg);
4959:src/xeq.c     **** 	}
4960:src/xeq.c     **** 	else if (argcmds[cmd].flag) {
4961:src/xeq.c     **** 		if (LocalRegs == 0)
4962:src/xeq.c     **** 			lim = NUMFLG - 1;
4963:src/xeq.c     **** 		else 
4964:src/xeq.c     **** 			lim = LOCAL_FLAG_BASE + MAX_LOCAL_DIRECT - 1;
4965:src/xeq.c     **** 	}
4966:src/xeq.c     **** 	if (arg > lim) {
4967:src/xeq.c     **** 		// Argument is too large
ARM GAS  /tmp/ccK8IvWa.s 			page 161


4968:src/xeq.c     **** range:		report_err(ERR_RANGE);
4969:src/xeq.c     **** 	}
4970:src/xeq.c     **** 	else if (argcmds[cmd].cmplx && arg >= TOPREALREG-1 && arg < NUMREG && (arg & 1)) {
4971:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
4972:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
4973:src/xeq.c     **** 	}
4974:src/xeq.c     **** 	else {
4975:src/xeq.c     **** 		// Dispatch the command
4976:src/xeq.c     **** 		FP_RARG fp = (FP_RARG) EXPAND_ADDRESS(argcmds[cmd].f);
4977:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
4978:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
4979:src/xeq.c     **** 			if (argcmds[cmd].label) {
4980:src/xeq.c     **** 				XromUserPc = find_label_from(state_pc(), arg, 0);
4981:src/xeq.c     **** 				if (XromUserPc == 0)
4982:src/xeq.c     **** 					return;
4983:src/xeq.c     **** 				if (! Running)
4984:src/xeq.c     **** 					clrretstk();
4985:src/xeq.c     **** 			}
4986:src/xeq.c     **** 			else
4987:src/xeq.c     **** 				XromArg = (unsigned char) arg;
4988:src/xeq.c     **** #else
4989:src/xeq.c     **** 			XromUserPc = find_label_from(state_pc(), arg, FIND_OP_ERROR | FIND_OP_ENDS);
4990:src/xeq.c     **** 			if (XromUserPc == 0)
4991:src/xeq.c     **** 				return;
4992:src/xeq.c     **** 			if (! Running)
4993:src/xeq.c     **** 				clrretstk();
4994:src/xeq.c     **** #endif
4995:src/xeq.c     **** 			dispatch_xrom(fp);
4996:src/xeq.c     **** 			return;
4997:src/xeq.c     **** 		}
4998:src/xeq.c     **** 		else {
4999:src/xeq.c     **** 			fp(arg, (enum rarg)cmd);
5000:src/xeq.c     **** 		}
5001:src/xeq.c     **** 		if (cmd != RARG_XROM_OUT) {
5002:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
5003:src/xeq.c     **** 			set_lift();
5004:src/xeq.c     **** 		}
5005:src/xeq.c     **** 	}
5006:src/xeq.c     **** }
5007:src/xeq.c     **** 
5008:src/xeq.c     **** static void multi(const opcode op) {
5009:src/xeq.c     **** 	const int cmd = opDBL(op);
5010:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
5011:src/xeq.c     **** 
5012:src/xeq.c     **** 	process_cmdline_set_lift();
5013:src/xeq.c     **** 
5014:src/xeq.c     **** 	if (cmd >= NUM_MULTI) {
5015:src/xeq.c     **** 		illegal(op);
5016:src/xeq.c     **** 		return;
5017:src/xeq.c     **** 	}
5018:src/xeq.c     **** 	if (isNULL(multicmds[cmd].f))	// LBL does nothing
5019:src/xeq.c     **** 		return;
5020:src/xeq.c     **** 	else {
5021:src/xeq.c     **** 		FP_MULTI fp = (FP_MULTI) EXPAND_ADDRESS(multicmds[cmd].f);
5022:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
5023:src/xeq.c     **** 			XromUserPc = findmultilbl(op, FIND_OP_ERROR);
5024:src/xeq.c     **** 			if (XromUserPc != 0) {
ARM GAS  /tmp/ccK8IvWa.s 			page 162


5025:src/xeq.c     **** 				if (! Running)
5026:src/xeq.c     **** 					clrretstk();
5027:src/xeq.c     **** 				dispatch_xrom(fp);
5028:src/xeq.c     **** 			}
5029:src/xeq.c     **** 			return;
5030:src/xeq.c     **** 		}
5031:src/xeq.c     **** 		else {
5032:src/xeq.c     **** 			fp(op, (enum multiops)cmd);
5033:src/xeq.c     **** 			set_lift();
5034:src/xeq.c     **** 		}
5035:src/xeq.c     **** 	}
5036:src/xeq.c     **** }
5037:src/xeq.c     **** 
5038:src/xeq.c     **** 
5039:src/xeq.c     **** 
5040:src/xeq.c     **** /* Main dispatch routine that decodes the top level of the opcode and
5041:src/xeq.c     ****  * goes to the appropriate lower level dispatch routine.
5042:src/xeq.c     ****  */
5043:src/xeq.c     **** void xeq(opcode op) 
5044:src/xeq.c     **** {
5045:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
5046:src/xeq.c     **** 	const unsigned short flags = UserFlags[regA_idx >> 4];
5047:src/xeq.c     **** 	const struct _ustate old = UState;
5048:src/xeq.c     **** 	const unsigned char lift = get_lift();
5049:src/xeq.c     **** 	const unsigned short old_pc = state_pc();
5050:src/xeq.c     **** 	const int old_cl = *((int *)&CommandLine);
5051:src/xeq.c     **** #ifdef INFRARED
5052:src/xeq.c     **** 	int tracing;
5053:src/xeq.c     **** #endif
5054:src/xeq.c     **** 
5055:src/xeq.c     **** #ifndef IGNORE_INVALID_FRACTIONS
5056:src/xeq.c     **** 	if (op == (OP_NIL | OP_rCLX) || op == (OP_NIL | OP_CLSTK)) {
5057:src/xeq.c     **** 		// Make sure that if the command line isn't empty, it contains
5058:src/xeq.c     **** 		// valid input so no error message will be generated.
5059:src/xeq.c     **** 		CmdLineDot = 0;
5060:src/xeq.c     **** 		Cmdline[0] = '0';
5061:src/xeq.c     **** 		Cmdline[1] = '\0';
5062:src/xeq.c     **** 	}
5063:src/xeq.c     **** #endif
5064:src/xeq.c     **** 
5065:src/xeq.c     **** 	xcopy(save, StackBase, sizeof(save));
5066:src/xeq.c     **** #if defined(CONSOLE) && !defined(DM42)
5067:src/xeq.c     **** 	instruction_count++;
5068:src/xeq.c     **** #endif
5069:src/xeq.c     **** #ifndef REALBUILD
5070:src/xeq.c     **** 	if (State2.trace && ! State2.sst) {
5071:src/xeq.c     **** 		char buf[16];
5072:src/xeq.c     **** 		if (Running)
5073:src/xeq.c     **** 			print_step(op);
5074:src/xeq.c     **** 		else
5075:src/xeq.c     **** 			sprintf(TraceBuffer, "%04X:%s", op, prt(op, buf));
5076:src/xeq.c     **** 		DispMsg = TraceBuffer;
5077:src/xeq.c     **** 	}
5078:src/xeq.c     **** #endif
5079:src/xeq.c     **** #ifdef INFRARED
5080:src/xeq.c     **** #ifdef REALBUILD
5081:src/xeq.c     **** 	tracing = get_user_flag(T_FLAG) && ! is_xrom() && State2.runmode;
ARM GAS  /tmp/ccK8IvWa.s 			page 163


5082:src/xeq.c     **** #else
5083:src/xeq.c     **** 	tracing = get_user_flag(T_FLAG) && (! is_xrom() || State2.trace) && State2.runmode;
5084:src/xeq.c     **** #endif
5085:src/xeq.c     **** 	Tracing = tracing;
5086:src/xeq.c     **** 	print_trace( op, 0 );
5087:src/xeq.c     **** #endif
5088:src/xeq.c     **** 	Busy = 0;
5089:src/xeq.c     **** 	State2.wascomplex = 0;
5090:src/xeq.c     **** 	if (isDBL(op))
5091:src/xeq.c     **** 		multi(op);
5092:src/xeq.c     **** 	else if (isRARG(op))
5093:src/xeq.c     **** 		rargs(op);
5094:src/xeq.c     **** 	else {
5095:src/xeq.c     **** 		XeqOpCode = (s_opcode) op;
5096:src/xeq.c     **** 		switch (opKIND(op)) {
5097:src/xeq.c     **** 		case KIND_SPEC:	specials(op);	break;
5098:src/xeq.c     **** 		case KIND_NIL:	niladic(op);	break;
5099:src/xeq.c     **** 		case KIND_MON:	monadic(op);	break;
5100:src/xeq.c     **** 		case KIND_DYA:	dyadic(op);	break;
5101:src/xeq.c     **** 		case KIND_TRI:	triadic(op);	break;
5102:src/xeq.c     **** 		case KIND_CMON:	monadic_cmplex(op);	break;
5103:src/xeq.c     **** 		case KIND_CDYA:	dyadic_cmplex(op);	break;
5104:src/xeq.c     **** 		default:	illegal(op);
5105:src/xeq.c     **** 		}
5106:src/xeq.c     **** 	}
5107:src/xeq.c     **** #if INTERRUPT_XROM_TICKS > 0
5108:src/xeq.c     **** 	if (OnKeyTicks >= INTERRUPT_XROM_TICKS) {
5109:src/xeq.c     **** 		report_err(ERR_INTERRUPTED);
5110:src/xeq.c     **** 		while (get_key() >= 0) { } // Empty keyboard buffer
5111:src/xeq.c     **** 	}
5112:src/xeq.c     **** #endif
5113:src/xeq.c     **** 
5114:src/xeq.c     **** 	if (Error != ERR_NONE) {
5115:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
5116:src/xeq.c     **** 		error_message( Error );
5117:src/xeq.c     **** 		// Repair stack and state
5118:src/xeq.c     **** 		// Clear return stack
5119:src/xeq.c     **** 		xcopy(StackBase, save, sizeof(save));
5120:src/xeq.c     **** 		UserFlags[regA_idx >> 4] = flags;
5121:src/xeq.c     **** 		UState = old;
5122:src/xeq.c     **** 		State2.state_lift = lift;
5123:src/xeq.c     **** 		raw_set_pc(old_pc);
5124:src/xeq.c     **** 		*((int *)&CommandLine) = old_cl;
5125:src/xeq.c     **** 		process_cmdline_set_lift();
5126:src/xeq.c     **** 		// process_cmdline_set_lift() may set an error code if there was something
5127:src/xeq.c     **** 		// wrong with the command line, e.g. it had a partially entered fraction
5128:src/xeq.c     **** 		Error = ERR_NONE;
5129:src/xeq.c     **** 		if (Running || XromRunning) {
5130:src/xeq.c     **** #ifndef REALBUILD
5131:src/xeq.c     **** 			if (State2.trace ) {
5132:src/xeq.c     **** 				// Special handling for debug environment
5133:src/xeq.c     **** 				if (XromFlags.xIN) {
5134:src/xeq.c     **** 					// Restore the global return stack
5135:src/xeq.c     **** 					RetStk = XromUserRetStk;
5136:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
5137:src/xeq.c     **** 					// Restore private stack to normal stack
5138:src/xeq.c     **** 					if (! XromFlags.mode_double && NumRegs < STACK_SIZE + EXTRA_REG) {
ARM GAS  /tmp/ccK8IvWa.s 			page 164


5139:src/xeq.c     **** 						// Need space for double precision stack
5140:src/xeq.c     **** 						cmdregs(STACK_SIZE + EXTRA_REG, RARG_REGS);
5141:src/xeq.c     **** 					}
5142:src/xeq.c     **** 					XromFlags.xIN = 0;		// Clear flag before get_reg_n!
5143:src/xeq.c     **** 					if (Error == ERR_NONE) {
5144:src/xeq.c     **** 						UState.mode_double = 1;
5145:src/xeq.c     **** 						xcopy(get_reg_n(regX_idx), XromStack, sizeof(XromStack));
5146:src/xeq.c     **** 					}
5147:src/xeq.c     **** 					else
5148:src/xeq.c     **** 						Error = ERR_NONE;	// Not enough RAM, can't restore
5149:src/xeq.c     **** 				}
5150:src/xeq.c     **** 			}
5151:src/xeq.c     **** 			else {
5152:src/xeq.c     **** #endif
5153:src/xeq.c     **** 				unsigned short int pc = state_pc();
5154:src/xeq.c     **** 				if (XromFlags.xIN) {
5155:src/xeq.c     **** 					// Restore state to before xIN
5156:src/xeq.c     **** 					XromFlags.xIN = 0;
5157:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
5158:src/xeq.c     **** 					UState.intm = XromFlags.mode_int;
5159:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
5160:src/xeq.c     **** 					// Restore the global return stack
5161:src/xeq.c     **** 					RetStk = XromUserRetStk;
5162:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
5163:src/xeq.c     **** 				}
5164:src/xeq.c     **** 				while (isXROM(pc)) {
5165:src/xeq.c     **** 					// Leave XROM
5166:src/xeq.c     **** 					if (RetStkPtr != 0) {
5167:src/xeq.c     **** 						retstk_up();
5168:src/xeq.c     **** 						pc = RetStk[RetStkPtr - 1];
5169:src/xeq.c     **** 					}
5170:src/xeq.c     **** 					if (RetStkPtr == 0)
5171:src/xeq.c     **** 						++pc; // compensate for decpc below
5172:src/xeq.c     **** 				}
5173:src/xeq.c     **** 				raw_set_pc(pc);
5174:src/xeq.c     **** #ifndef REALBUILD
5175:src/xeq.c     **** 			}
5176:src/xeq.c     **** #endif
5177:src/xeq.c     **** 			decpc();		// Back to error instruction
5178:src/xeq.c     **** 			xeq_init_contexts();	// Repair any pointers clobberd by xIN
5179:src/xeq.c     **** 
5180:src/xeq.c     **** 			set_running_off();
5181:src/xeq.c     **** 		}
5182:src/xeq.c     **** 	} 
5183:src/xeq.c     **** 	reset_volatile_state();
5184:src/xeq.c     **** #ifdef INFRARED
5185:src/xeq.c     **** 	Tracing = tracing;
5186:src/xeq.c     **** 	print_trace( op, 1 );
5187:src/xeq.c     **** #endif
5188:src/xeq.c     **** }
5189:src/xeq.c     **** 
5190:src/xeq.c     **** /* Execute a single step and return.
5191:src/xeq.c     ****  */
5192:src/xeq.c     **** static void xeq_single(void) {
5193:src/xeq.c     **** 	const opcode op = getprog(state_pc());
5194:src/xeq.c     **** 
5195:src/xeq.c     **** 	incpc();
ARM GAS  /tmp/ccK8IvWa.s 			page 165


5196:src/xeq.c     **** 	xeq(op);
5197:src/xeq.c     **** }
5198:src/xeq.c     **** 
5199:src/xeq.c     **** /* Continue execution trough xrom code
5200:src/xeq.c     ****  */
5201:src/xeq.c     **** #ifdef REALBUILD
5202:src/xeq.c     **** void xeq_xrom(void) {
5203:src/xeq.c     **** #else
5204:src/xeq.c     **** static void xeq_xrom2(void) {
5205:src/xeq.c     **** #endif
5206:src/xeq.c     **** 	int count = 0;
5207:src/xeq.c     **** 	/* Now if we've stepped into the XROM area, keep going until
5208:src/xeq.c     **** 	 * we break free.
5209:src/xeq.c     **** 	 */
5210:src/xeq.c     **** #ifdef DM42
5211:src/xeq.c     **** 	while ( !PAUSED && is_xrom() && RetStkPtr != 0) {
5212:src/xeq.c     **** #else
5213:src/xeq.c     **** 	  while (!Pause && is_xrom() && RetStkPtr != 0) {
5214:src/xeq.c     **** #endif
5215:src/xeq.c     **** 		XromRunning = 1;
5216:src/xeq.c     **** 		xeq_single();
5217:src/xeq.c     **** 		XromRunning = 0;
5218:src/xeq.c     **** 		if ((++count & 31) == 0)
5219:src/xeq.c     **** 			busy();
5220:src/xeq.c     **** #ifdef DM42
5221:src/xeq.c     **** 		if (PAUSED) {
5222:src/xeq.c     **** #else
5223:src/xeq.c     **** 		  if (Pause)
5224:src/xeq.c     **** #endif		  
5225:src/xeq.c     **** 			// Special case: WHO has a PSE built in.
5226:src/xeq.c     **** 			// Switch to Running mode to force continued execution.
5227:src/xeq.c     **** 			Running = 1;
5228:src/xeq.c     **** 		}
5229:src/xeq.c     **** 	}
5230:src/xeq.c     **** }
5231:src/xeq.c     **** 
5232:src/xeq.c     **** #ifndef REALBUILD
5233:src/xeq.c     **** void xeq_xrom(void) {
5234:src/xeq.c     **** 	// We split the routine in two parts for debugging only
5235:src/xeq.c     **** 	if (! State2.trace)
5236:src/xeq.c     **** 		xeq_xrom2();
5237:src/xeq.c     **** }
5238:src/xeq.c     **** #endif
5239:src/xeq.c     **** 
5240:src/xeq.c     **** 	/* Check to see if we're running a program and if so execute it
5241:src/xeq.c     ****  * for a while.
5242:src/xeq.c     ****  *
5243:src/xeq.c     ****  */
5244:src/xeq.c     **** 
5245:src/xeq.c     **** /*
5246:src/xeq.c     **** //#define PAUSED (start_pause(-1) == 0) (definition in xeq.h)
5247:src/xeq.c     **** 'Pause' is true if Pause is non-zero, i.e., if the pause is still running.
5248:src/xeq.c     **** PAUSED is true if the timer is not expired.
5249:src/xeq.c     **** */
5250:src/xeq.c     **** void xeqprog(void) 
5251:src/xeq.c     **** {
5252:src/xeq.c     **** 	int state = 0;
ARM GAS  /tmp/ccK8IvWa.s 			page 166


5253:src/xeq.c     **** #ifdef DM42
5254:src/xeq.c     **** 	if ( Running || PAUSED ) {
5255:src/xeq.c     **** #else
5256:src/xeq.c     **** 	if (Running || Pause) {
5257:src/xeq.c     **** #endif
5258:src/xeq.c     **** #ifndef CONSOLE
5259:src/xeq.c     **** #ifdef DM42
5260:src/xeq.c     **** 	  long long last_ticker = DM42_Ticker();
5261:src/xeq.c     **** #else
5262:src/xeq.c     **** 		long long last_ticker = Ticker;
5263:src/xeq.c     **** #endif
5264:src/xeq.c     **** 		state = ((int) last_ticker % (2*TICKS_PER_FLASH) < TICKS_PER_FLASH);
5265:src/xeq.c     **** #else
5266:src/xeq.c     **** 		state = 1;
5267:src/xeq.c     **** #endif
5268:src/xeq.c     **** 		dot(RCL_annun, state);
5269:src/xeq.c     **** 		finish_display();
5270:src/xeq.c     **** #ifdef DM42
5271:src/xeq.c     **** 		while (! PAUSED && Running) {
5272:src/xeq.c     **** #else		  
5273:src/xeq.c     **** 		while (! Pause && Running) {
5274:src/xeq.c     **** #endif
5275:src/xeq.c     **** 		  xeq_single();
5276:src/xeq.c     **** 			if (is_key_pressed()) {
5277:src/xeq.c     **** 				// Key press or heart beat
5278:src/xeq.c     **** 				// xeq_xrom(); // Already done by dispatch_xrom()
5279:src/xeq.c     **** 				break;
5280:src/xeq.c     **** 			}
5281:src/xeq.c     **** 		}
5282:src/xeq.c     **** 	}
5283:src/xeq.c     **** #ifdef DM42
5284:src/xeq.c     **** 	if (! Running && ! PAUSED ) {
5285:src/xeq.c     **** #else
5286:src/xeq.c     **** 	if (! Running && ! Pause) {	  
5287:src/xeq.c     **** #endif
5288:src/xeq.c     **** 	  // Program has terminated
5289:src/xeq.c     **** 		clr_dot(RCL_annun);
5290:src/xeq.c     **** 		ShowRPN = 1;	// display() may turn it off again
5291:src/xeq.c     **** 		display();
5292:src/xeq.c     **** 		if (ShowRPN) {
5293:src/xeq.c     **** 			set_dot(RPN);
5294:src/xeq.c     **** 			finish_display();
5295:src/xeq.c     **** 		}
5296:src/xeq.c     **** #ifndef CONSOLE
5297:src/xeq.c     **** 		// Avoid accidental restart with R/S or APD after program ends
5298:src/xeq.c     ****      		JustStopped = 1;
5299:src/xeq.c     **** #endif
5300:src/xeq.c     **** 	}
5301:src/xeq.c     **** }
5302:src/xeq.c     **** 
5303:src/xeq.c     **** /* Single step and back step routine
5304:src/xeq.c     ****  */
5305:src/xeq.c     **** void xeq_sst_bst(int kind) 
5306:src/xeq.c     **** {
5307:src/xeq.c     **** 	opcode op;
5308:src/xeq.c     **** 
5309:src/xeq.c     **** 	reset_volatile_state();
ARM GAS  /tmp/ccK8IvWa.s 			page 167


5310:src/xeq.c     **** 	if (kind == -1)
5311:src/xeq.c     **** 		decpc();
5312:src/xeq.c     **** 
5313:src/xeq.c     **** 	if (State2.runmode) {
5314:src/xeq.c     **** 		// Display the step
5315:src/xeq.c     **** 		op = getprog(state_pc());
5316:src/xeq.c     **** 		print_step(op);
5317:src/xeq.c     **** 		if (kind == 1) {
5318:src/xeq.c     **** 			// Execute the step on key up
5319:src/xeq.c     **** #ifndef REALBUILD
5320:src/xeq.c     **** 			State2.sst = 1;
5321:src/xeq.c     **** #endif
5322:src/xeq.c     **** 			set_running_on_sst();
5323:src/xeq.c     **** 			incpc();
5324:src/xeq.c     **** 			xeq(op);
5325:src/xeq.c     **** #ifndef REALBUILD
5326:src/xeq.c     **** 			State2.sst = 0;
5327:src/xeq.c     **** #endif
5328:src/xeq.c     **** 			xeq_xrom();  // necessary for code called from XROM
5329:src/xeq.c     **** 			set_running_off_sst();
5330:src/xeq.c     **** 		}
5331:src/xeq.c     **** 	}
5332:src/xeq.c     **** 	else if (kind == 0) {
5333:src/xeq.c     **** 		// Key down in program mode
5334:src/xeq.c     **** 		incpc();
5335:src/xeq.c     **** 		OpCode = 0;
5336:src/xeq.c     **** 	}
5337:src/xeq.c     **** }
5338:src/xeq.c     **** 
5339:src/xeq.c     **** 
5340:src/xeq.c     **** /*
5341:src/xeq.c     ****  *  User command to start or stop execution
5342:src/xeq.c     ****  */
5343:src/xeq.c     **** void op_rs(enum nilop op) {
5344:src/xeq.c     **** #ifndef REALBUILD
5345:src/xeq.c     **** 	// This is for debugging purposes only
5346:src/xeq.c     **** 	// STOP does not appear in XROM normally
5347:src/xeq.c     **** 	if (is_xrom()) {
5348:src/xeq.c     **** 		if (State2.trace && (Running || XromRunning)) {
5349:src/xeq.c     **** 			Running = XromRunning = 0;
5350:src/xeq.c     **** 		}
5351:src/xeq.c     **** 		else {
5352:src/xeq.c     **** 			xeq_xrom2();
5353:src/xeq.c     **** 		}
5354:src/xeq.c     **** 		return;
5355:src/xeq.c     **** 	}
5356:src/xeq.c     **** #endif
5357:src/xeq.c     **** 	if (Running)
5358:src/xeq.c     **** 		set_running_off();
5359:src/xeq.c     **** 	else {
5360:src/xeq.c     **** 		set_running_on();
5361:src/xeq.c     **** 		if (RetStkPtr == 0)
5362:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
5363:src/xeq.c     **** 	}
5364:src/xeq.c     **** }
5365:src/xeq.c     **** 
5366:src/xeq.c     **** 
ARM GAS  /tmp/ccK8IvWa.s 			page 168


5367:src/xeq.c     **** /* 
5368:src/xeq.c     ****  *  The following needs to be done each time before any user input is processed.
5369:src/xeq.c     ****  *  On the hardware, RAM is volatile and these pointers and structures need valid values!
5370:src/xeq.c     ****  */
5371:src/xeq.c     **** void xeq_init_contexts(void) {
5372:src/xeq.c     **** 	/*
5373:src/xeq.c     **** 	 *  Compute the sizes of the various memory portions
5374:src/xeq.c     **** 	 */
5375:src/xeq.c     **** 	short int s;
5376:src/xeq.c     **** 	SizeStatRegs = State.have_stats ? sizeof(STAT_DATA) >> 1 : 0;	// in 16 bit words!
5377:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
5378:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
5379:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
5380:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
5381:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
5382:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
5383:src/xeq.c     **** 
5384:src/xeq.c     **** 	/*
5385:src/xeq.c     **** 	 *  Initialise our standard contexts.
5386:src/xeq.c     **** 	 *  We bump the digits for internal calculations.
5387:src/xeq.c     **** 	 */
5388:src/xeq.c     **** 	decContextDefault(&Ctx, DEC_INIT_BASE);
5389:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
5390:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
5391:src/xeq.c     **** 	Ctx.emin=-DEC_MAX_MATH;
5392:src/xeq.c     **** 	Ctx.round = DEC_ROUND_HALF_EVEN;
5393:src/xeq.c     **** }
5394:src/xeq.c     **** 
5395:src/xeq.c     **** 
5396:src/xeq.c     **** 
5397:src/xeq.c     **** #ifdef INCLUDE_PLOTTING
5398:src/xeq.c     **** /*
5399:src/xeq.c     ****  *  Plotting commands
5400:src/xeq.c     ****  *
5401:src/xeq.c     ****  *  The plot buffer is a range of registers that is treated as pixel data
5402:src/xeq.c     ****  *  The first byte contains the length of the buffer in columns (bytes)
5403:src/xeq.c     ****  */
5404:src/xeq.c     **** 
5405:src/xeq.c     **** /*
5406:src/xeq.c     ****  *  Check register range and return a pointer to the plot data.
5407:src/xeq.c     ****  */
5408:src/xeq.c     **** unsigned char *plot_check_range( int arg, int width, int height )
5409:src/xeq.c     **** {
5410:src/xeq.c     **** 	unsigned char *p = (unsigned char *) get_reg_n( arg );
5411:src/xeq.c     **** 	int n = is_dblmode() ? 16 : 8;
5412:src/xeq.c     **** 	int lim = arg < TOPREALREG ? global_regs() : local_regs() + LOCAL_REG_BASE;
5413:src/xeq.c     **** 	int bytes;
5414:src/xeq.c     **** 
5415:src/xeq.c     **** 	if ( width == 0 ) {
5416:src/xeq.c     **** 		width = (int) *p;
5417:src/xeq.c     **** 		height = (int) p[ 1 ];
5418:src/xeq.c     **** 	}
5419:src/xeq.c     **** 
5420:src/xeq.c     **** 	/*
5421:src/xeq.c     **** 	 *  Compute total number of bytes
5422:src/xeq.c     **** 	 */
5423:src/xeq.c     **** 	bytes = 2 + width * height;
ARM GAS  /tmp/ccK8IvWa.s 			page 169


5424:src/xeq.c     **** 
5425:src/xeq.c     **** 	/*
5426:src/xeq.c     **** 	 *  Check if we have enough room
5427:src/xeq.c     **** 	 */
5428:src/xeq.c     **** 	if ( width > PAPER_WIDTH || arg + ( bytes + n - 1 ) / n > lim ) {
5429:src/xeq.c     **** 		report_err( ERR_RANGE );
5430:src/xeq.c     **** 		return (unsigned char *) NULL;
5431:src/xeq.c     **** 	}
5432:src/xeq.c     **** 	return p;
5433:src/xeq.c     **** }
5434:src/xeq.c     **** 
5435:src/xeq.c     **** /*
5436:src/xeq.c     ****  * Set up for graphical object display.
5437:src/xeq.c     ****  */
5438:src/xeq.c     **** void cmdplotdisplay( unsigned int arg, enum rarg op )
5439:src/xeq.c     **** {
5440:src/xeq.c     **** 	if (plot_check_range(arg, 0, 0) != NULL) {
5441:src/xeq.c     **** 		DispPlot = arg + 1;
5442:src/xeq.c     **** 		frozen_display();
5443:src/xeq.c     **** 	}
5444:src/xeq.c     **** }
5445:src/xeq.c     **** 
5446:src/xeq.c     **** /*
5447:src/xeq.c     ****  *  Initialize a block of registers to act as a buffer for plotting
5448:src/xeq.c     ****  *  X contains the maximum width (<= 0 is default: 166)
5449:src/xeq.c     ****  */
5450:src/xeq.c     **** void cmdplotinit( unsigned int arg, enum rarg op )
5451:src/xeq.c     **** {
5452:src/xeq.c     **** 	int sgnx, sgny;
5453:src/xeq.c     **** 	int width = (int) getX_int_sgn( &sgnx );
5454:src/xeq.c     **** 	int height = (int) get_reg_n_int_sgn( regY_idx, &sgny ); 
5455:src/xeq.c     **** 	unsigned char *p;
5456:src/xeq.c     **** 	
5457:src/xeq.c     **** 	if ( sgnx || width == 0 ) {
5458:src/xeq.c     **** 		width = PAPER_WIDTH;
5459:src/xeq.c     **** 	}
5460:src/xeq.c     **** 	if ( sgny || height == 0 ) {
5461:src/xeq.c     **** 		height = 1;
5462:src/xeq.c     **** 	}
5463:src/xeq.c     **** 	else {
5464:src/xeq.c     **** 		/*
5465:src/xeq.c     **** 		 *  Make height count the byte rows
5466:src/xeq.c     **** 		 */
5467:src/xeq.c     **** 		height = ( height + 7 ) >> 3;
5468:src/xeq.c     **** 	}
5469:src/xeq.c     **** 
5470:src/xeq.c     **** 	p = plot_check_range( arg, width, height );
5471:src/xeq.c     **** 	if ( p != NULL ) {
5472:src/xeq.c     **** 		*p++ = (unsigned char) width;
5473:src/xeq.c     **** 		*p++ = (unsigned char) height;
5474:src/xeq.c     **** 		xset( p, 0, width * height );
5475:src/xeq.c     **** 	}
5476:src/xeq.c     **** }
5477:src/xeq.c     **** 
5478:src/xeq.c     **** /*
5479:src/xeq.c     ****  *  Return the width and height of the plotting block
5480:src/xeq.c     ****  */
ARM GAS  /tmp/ccK8IvWa.s 			page 170


5481:src/xeq.c     **** void cmdplotdim( unsigned int arg, enum rarg op )
5482:src/xeq.c     **** {
5483:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
5484:src/xeq.c     **** 	if ( p != NULL ) {
5485:src/xeq.c     **** 		lift2_if_enabled();
5486:src/xeq.c     **** 		setX_int_sgn( p[ 0 ], 0 ); // width
5487:src/xeq.c     **** 		set_reg_n_int_sgn( regY_idx, p[ 1 ] << 3, 0 ); // height
5488:src/xeq.c     **** 	}
5489:src/xeq.c     **** }
5490:src/xeq.c     **** 
5491:src/xeq.c     **** /*
5492:src/xeq.c     ****  *  All pixel related commands
5493:src/xeq.c     ****  *  X is the horizontal position 0..width
5494:src/xeq.c     ****  *  Y is the vertical position 0..7
5495:src/xeq.c     ****  */
5496:src/xeq.c     **** void cmdplotpixel( unsigned int arg, enum rarg op )
5497:src/xeq.c     **** {
5498:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
5499:src/xeq.c     **** 	if ( p != NULL ) {
5500:src/xeq.c     **** 		/*
5501:src/xeq.c     **** 		 *  Get row from Y
5502:src/xeq.c     **** 		 */
5503:src/xeq.c     **** 		int sgn;
5504:src/xeq.c     **** 		unsigned int row = (unsigned int) get_reg_n_int_sgn( regY_idx, &sgn );
5505:src/xeq.c     **** 		int pix = 0;
5506:src/xeq.c     **** 		if ( sgn == 0 && ( row >> 3 ) < (unsigned int) p[ 1 ] ) {
5507:src/xeq.c     **** 			/*
5508:src/xeq.c     **** 			 *  Row is OK, get column from X
5509:src/xeq.c     **** 			 */
5510:src/xeq.c     **** 			unsigned int width = (unsigned int) *p;
5511:src/xeq.c     **** 			unsigned int column = (unsigned int) getX_int_sgn( &sgn );
5512:src/xeq.c     **** 			if ( sgn == 0 && column < width ) {
5513:src/xeq.c     **** 				/*
5514:src/xeq.c     **** 				 *  Modify the bit in the correct byte
5515:src/xeq.c     **** 				 */
5516:src/xeq.c     **** 				pix = 1 << ( row & 7 );
5517:src/xeq.c     **** 				p += 2 + width * ( row >> 3 ) + column;
5518:src/xeq.c     **** 
5519:src/xeq.c     **** 				if ( op == RARG_PLOT_SETPIX ) {
5520:src/xeq.c     **** 					*p |= pix;
5521:src/xeq.c     **** 				}
5522:src/xeq.c     **** 				else if ( op == RARG_PLOT_CLRPIX ) {
5523:src/xeq.c     **** 					*p &= ~pix;
5524:src/xeq.c     **** 				}
5525:src/xeq.c     **** 				else if ( op == RARG_PLOT_FLIPPIX ) {
5526:src/xeq.c     **** 					*p ^= pix;
5527:src/xeq.c     **** 				}
5528:src/xeq.c     **** 			}
5529:src/xeq.c     **** 		}
5530:src/xeq.c     **** 		if ( op == RARG_PLOT_ISSET ) {
5531:src/xeq.c     **** 			fin_tst( *p & pix );
5532:src/xeq.c     **** 		}
5533:src/xeq.c     **** 	}
5534:src/xeq.c     **** }
5535:src/xeq.c     **** #endif
5536:src/xeq.c     **** 
5537:src/xeq.c     **** 
ARM GAS  /tmp/ccK8IvWa.s 			page 171


5538:src/xeq.c     **** /*
5539:src/xeq.c     ****  *  We don't allow some commands from a running program
5540:src/xeq.c     ****  */
5541:src/xeq.c     **** int not_running(void) {
5542:src/xeq.c     **** 	if ( Running ) {
5543:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
5544:src/xeq.c     **** 		return 0;
5545:src/xeq.c     **** 	}
5546:src/xeq.c     **** 	return 1;
5547:src/xeq.c     **** }
5548:src/xeq.c     **** 
5549:src/xeq.c     **** /*
5550:src/xeq.c     ****  *  Handle the Running Flag
5551:src/xeq.c     ****  */
5552:src/xeq.c     **** void set_running_off_sst() {
5553:src/xeq.c     **** 	Running = 0;
5554:src/xeq.c     **** }
5555:src/xeq.c     **** 
5556:src/xeq.c     **** void set_running_on_sst() {
5557:src/xeq.c     **** 	Running = 1;
5558:src/xeq.c     **** }
5559:src/xeq.c     **** 
5560:src/xeq.c     **** void set_running_off() {
 3404              		.loc 1 5560 6 view .LVU924
 3405              	.LBB1586:
5561:src/xeq.c     **** 	set_running_off_sst();
 3406              		.loc 1 5561 2 view .LVU925
 3407              	.LBB1587:
 3408              	.LBI1587:
5552:src/xeq.c     **** 	Running = 0;
 3409              		.loc 1 5552 6 view .LVU926
 3410              	.LBB1588:
5553:src/xeq.c     **** }
 3411              		.loc 1 5553 2 view .LVU927
 3412              	.LBE1588:
 3413              	.LBE1587:
5562:src/xeq.c     **** 	State.entryp = 0;
 3414              		.loc 1 5562 15 is_stmt 0 view .LVU928
 3415 006a 94F8DD37 		ldrb	r3, [r4, #2013]	@ zero_extendqisi2
 3416              	.LBB1591:
 3417              	.LBB1589:
5553:src/xeq.c     **** }
 3418              		.loc 1 5553 10 view .LVU929
 3419 006e 074A     		ldr	r2, .L290+8
 3420              	.LBE1589:
 3421              	.LBE1591:
 3422              		.loc 1 5562 15 view .LVU930
 3423 0070 61F30413 		bfi	r3, r1, #4, #1
 3424 0074 84F8DD37 		strb	r3, [r4, #2013]
5563:src/xeq.c     **** 	dot( RCL_annun, 0);
 3425              		.loc 1 5563 2 view .LVU931
 3426 0078 8A20     		movs	r0, #138
 3427              	.LBE1586:
 3428              	.LBE1585:
 3429              	.LBE1584:
 3430              	.LBE1583:
2052:src/xeq.c     **** 
ARM GAS  /tmp/ccK8IvWa.s 			page 172


 3431              		.loc 1 2052 1 view .LVU932
 3432 007a BDE87040 		pop	{r4, r5, r6, lr}
 3433              		.cfi_restore 14
 3434              		.cfi_restore 6
 3435              		.cfi_restore 5
 3436              		.cfi_restore 4
 3437              		.cfi_def_cfa_offset 0
 3438              	.LBB1596:
 3439              	.LBB1595:
 3440              	.LBB1594:
 3441              	.LBB1593:
 3442              	.LBB1592:
 3443              	.LBB1590:
5553:src/xeq.c     **** }
 3444              		.loc 1 5553 10 view .LVU933
 3445 007e 1160     		str	r1, [r2]
 3446              	.LBE1590:
 3447              	.LBE1592:
5562:src/xeq.c     **** 	dot( RCL_annun, 0);
 3448              		.loc 1 5562 2 is_stmt 1 view .LVU934
 3449              		.loc 1 5563 2 view .LVU935
 3450 0080 FFF7FEBF 		b	dot
 3451              	.LVL263:
 3452              	.L291:
 3453              		.align	2
 3454              	.L290:
 3455 0084 00000000 		.word	PersistentRam
 3456 0088 00000000 		.word	RetStk
 3457 008c 00000000 		.word	Running
 3458              	.LBE1593:
 3459              	.LBE1594:
 3460              	.LBE1595:
 3461              	.LBE1596:
 3462              		.cfi_endproc
 3463              	.LFE149:
 3465              		.section	.text.user_pc,"ax",%progbits
 3466              		.align	1
 3467              		.p2align 2,,3
 3468              		.global	user_pc
 3469              		.syntax unified
 3470              		.thumb
 3471              		.thumb_func
 3472              		.fpu fpv4-sp-d16
 3474              	user_pc:
 3475              	.LVL264:
 3476              	.LFB24:
 471:src/xeq.c     **** 	unsigned int n = 1;
 3477              		.loc 1 471 39 view -0
 3478              		.cfi_startproc
 3479              		@ args = 0, pretend = 0, frame = 0
 3480              		@ frame_needed = 0, uses_anonymous_args = 0
 3481              		@ link register save eliminated.
 472:src/xeq.c     **** 	unsigned int base;
 3482              		.loc 1 472 2 view .LVU937
 473:src/xeq.c     **** 
 3483              		.loc 1 473 2 view .LVU938
 476:src/xeq.c     **** 		return offsetLIB(pc) + 1;
ARM GAS  /tmp/ccK8IvWa.s 			page 173


 3484              		.loc 1 476 2 view .LVU939
 476:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3485              		.loc 1 476 5 is_stmt 0 view .LVU940
 3486 0000 0346     		mov	r3, r0
 3487 0002 20B1     		cbz	r0, .L293
 476:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3488              		.loc 1 476 17 discriminator 1 view .LVU941
 3489 0004 820B     		lsrs	r2, r0, #14
 476:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3490              		.loc 1 476 14 discriminator 1 view .LVU942
 3491 0006 032A     		cmp	r2, #3
 3492 0008 01D0     		beq	.L293
 3493 000a FFF7FEBF 		b	user_pc.part.0
 3494              	.LVL265:
 3495              	.L293:
 477:src/xeq.c     **** #else
 3496              		.loc 1 477 3 is_stmt 1 view .LVU943
 477:src/xeq.c     **** #else
 3497              		.loc 1 477 24 is_stmt 0 view .LVU944
 3498 000e C3F30D00 		ubfx	r0, r3, #0, #14
 3499              	.LVL266:
 490:src/xeq.c     **** 
 3500              		.loc 1 490 1 view .LVU945
 3501 0012 7047     		bx	lr
 3502              		.cfi_endproc
 3503              	.LFE24:
 3505              		.section	.text.find_user_pc,"ax",%progbits
 3506              		.align	1
 3507              		.p2align 2,,3
 3508              		.global	find_user_pc
 3509              		.syntax unified
 3510              		.thumb
 3511              		.thumb_func
 3512              		.fpu fpv4-sp-d16
 3514              	find_user_pc:
 3515              	.LVL267:
 3516              	.LFB25:
 494:src/xeq.c     **** 	unsigned int upc = state_pc();
 3517              		.loc 1 494 48 is_stmt 1 view -0
 3518              		.cfi_startproc
 3519              		@ args = 0, pretend = 0, frame = 0
 3520              		@ frame_needed = 0, uses_anonymous_args = 0
 495:src/xeq.c     **** 	const int libp = isLIB(upc);
 3521              		.loc 1 495 2 view .LVU947
 494:src/xeq.c     **** 	unsigned int upc = state_pc();
 3522              		.loc 1 494 48 is_stmt 0 view .LVU948
 3523 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3524              		.cfi_def_cfa_offset 24
 3525              		.cfi_offset 3, -24
 3526              		.cfi_offset 4, -20
 3527              		.cfi_offset 5, -16
 3528              		.cfi_offset 6, -12
 3529              		.cfi_offset 7, -8
 3530              		.cfi_offset 14, -4
 495:src/xeq.c     **** 	const int libp = isLIB(upc);
 3531              		.loc 1 495 21 view .LVU949
 3532 0002 124B     		ldr	r3, .L309
ARM GAS  /tmp/ccK8IvWa.s 			page 174


 3533 0004 B3F8E037 		ldrh	r3, [r3, #2016]
 3534              	.LVL268:
 496:src/xeq.c     **** 	unsigned int base = libp ? startLIB(upc) : 0;
 3535              		.loc 1 496 2 is_stmt 1 view .LVU950
 497:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 3536              		.loc 1 497 2 view .LVU951
 497:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 3537              		.loc 1 497 43 is_stmt 0 view .LVU952
 3538 0008 13F44044 		ands	r4, r3, #49152
 3539              	.LVL269:
 497:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 3540              		.loc 1 497 43 view .LVU953
 3541 000c 1ABF     		itte	ne
 3542 000e 03F44045 		andne	r5, r3, #49152
 3543 0012 0135     		addne	r5, r5, #1
 3544 0014 2546     		moveq	r5, r4
 3545              	.LVL270:
 498:src/xeq.c     **** #ifndef REALBUILD
 3546              		.loc 1 498 2 is_stmt 1 view .LVU954
 500:src/xeq.c     **** 		return addrXROM(target);
 3547              		.loc 1 500 6 is_stmt 0 view .LVU955
 3548 0016 9B0B     		lsrs	r3, r3, #14
 3549              	.LVL271:
 498:src/xeq.c     **** #ifndef REALBUILD
 3550              		.loc 1 498 28 view .LVU956
 3551 0018 003C     		subs	r4, r4, #0
 498:src/xeq.c     **** #ifndef REALBUILD
 3552              		.loc 1 498 28 view .LVU957
 3553 001a 18BF     		it	ne
 3554 001c 0124     		movne	r4, #1
 3555              	.LVL272:
 500:src/xeq.c     **** 		return addrXROM(target);
 3556              		.loc 1 500 2 is_stmt 1 view .LVU958
 500:src/xeq.c     **** 		return addrXROM(target);
 3557              		.loc 1 500 5 is_stmt 0 view .LVU959
 3558 001e 032B     		cmp	r3, #3
 494:src/xeq.c     **** 	unsigned int upc = state_pc();
 3559              		.loc 1 494 48 view .LVU960
 3560 0020 0646     		mov	r6, r0
 500:src/xeq.c     **** 		return addrXROM(target);
 3561              		.loc 1 500 5 view .LVU961
 3562 0022 0ED0     		beq	.L307
 3563              	.LBB1597:
 506:src/xeq.c     **** 			return oldbase;
 3564              		.loc 1 506 7 view .LVU962
 3565 0024 0A4F     		ldr	r7, .L309+4
 3566 0026 05E0     		b	.L302
 3567              	.LVL273:
 3568              	.L304:
 505:src/xeq.c     **** 		if (PcWrapped)
 3569              		.loc 1 505 10 view .LVU963
 3570 0028 FFF7FEFF 		bl	do_inc
 3571              	.LVL274:
 506:src/xeq.c     **** 			return oldbase;
 3572              		.loc 1 506 6 view .LVU964
 3573 002c 3B68     		ldr	r3, [r7]
 3574              	.LVL275:
ARM GAS  /tmp/ccK8IvWa.s 			page 175


 506:src/xeq.c     **** 			return oldbase;
 3575              		.loc 1 506 3 is_stmt 1 view .LVU965
 3576 002e 0134     		adds	r4, r4, #1
 3577              	.LVL276:
 506:src/xeq.c     **** 			return oldbase;
 3578              		.loc 1 506 6 is_stmt 0 view .LVU966
 3579 0030 2BB9     		cbnz	r3, .L300
 505:src/xeq.c     **** 		if (PcWrapped)
 3580              		.loc 1 505 10 view .LVU967
 3581 0032 0546     		mov	r5, r0
 3582              	.LVL277:
 3583              	.L302:
 504:src/xeq.c     **** 		base = do_inc(oldbase, 0);
 3584              		.loc 1 504 3 is_stmt 1 view .LVU968
 505:src/xeq.c     **** 		if (PcWrapped)
 3585              		.loc 1 505 3 view .LVU969
 505:src/xeq.c     **** 		if (PcWrapped)
 3586              		.loc 1 505 3 is_stmt 0 view .LVU970
 3587              	.LBE1597:
 503:src/xeq.c     **** 		const unsigned int oldbase = base;
 3588              		.loc 1 503 8 is_stmt 1 view .LVU971
 503:src/xeq.c     **** 		const unsigned int oldbase = base;
 3589              		.loc 1 503 8 is_stmt 0 view .LVU972
 3590 0034 A642     		cmp	r6, r4
 3591              	.LBB1598:
 505:src/xeq.c     **** 		if (PcWrapped)
 3592              		.loc 1 505 10 view .LVU973
 3593 0036 2846     		mov	r0, r5
 3594 0038 4FF00001 		mov	r1, #0
 3595              	.LBE1598:
 503:src/xeq.c     **** 		const unsigned int oldbase = base;
 3596              		.loc 1 503 8 view .LVU974
 3597 003c F4D8     		bhi	.L304
 3598              	.LVL278:
 3599              	.L300:
 510:src/xeq.c     **** 
 3600              		.loc 1 510 1 view .LVU975
 3601 003e 2846     		mov	r0, r5
 3602              	.LVL279:
 510:src/xeq.c     **** 
 3603              		.loc 1 510 1 view .LVU976
 3604 0040 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3605              	.LVL280:
 3606              	.L307:
 501:src/xeq.c     **** #endif
 3607              		.loc 1 501 3 is_stmt 1 view .LVU977
 501:src/xeq.c     **** #endif
 3608              		.loc 1 501 10 is_stmt 0 view .LVU978
 3609 0042 40F44045 		orr	r5, r0, #49152
 3610              	.LVL281:
 510:src/xeq.c     **** 
 3611              		.loc 1 510 1 view .LVU979
 3612 0046 2846     		mov	r0, r5
 3613              	.LVL282:
 510:src/xeq.c     **** 
 3614              		.loc 1 510 1 view .LVU980
 3615 0048 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
ARM GAS  /tmp/ccK8IvWa.s 			page 176


 3616              	.LVL283:
 3617              	.L310:
 510:src/xeq.c     **** 
 3618              		.loc 1 510 1 view .LVU981
 3619 004a 00BF     		.align	2
 3620              	.L309:
 3621 004c 00000000 		.word	PersistentRam
 3622 0050 00000000 		.word	PcWrapped
 3623              		.cfi_endproc
 3624              	.LFE25:
 3626              		.section	.text.report_err,"ax",%progbits
 3627              		.align	1
 3628              		.p2align 2,,3
 3629              		.global	report_err
 3630              		.syntax unified
 3631              		.thumb
 3632              		.thumb_func
 3633              		.fpu fpv4-sp-d16
 3635              	report_err:
 3636              	.LVL284:
 3637              	.LFB27:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3638              		.loc 1 523 38 is_stmt 1 view -0
 3639              		.cfi_startproc
 3640              		@ args = 0, pretend = 0, frame = 0
 3641              		@ frame_needed = 0, uses_anonymous_args = 0
 524:src/xeq.c     **** 		Error = e;
 3642              		.loc 1 524 2 view .LVU983
 524:src/xeq.c     **** 		Error = e;
 3643              		.loc 1 524 12 is_stmt 0 view .LVU984
 3644 0000 064A     		ldr	r2, .L317
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3645              		.loc 1 523 38 view .LVU985
 3646 0002 10B5     		push	{r4, lr}
 3647              		.cfi_def_cfa_offset 8
 3648              		.cfi_offset 4, -8
 3649              		.cfi_offset 14, -4
 524:src/xeq.c     **** 		Error = e;
 3650              		.loc 1 524 12 view .LVU986
 3651 0004 1468     		ldr	r4, [r2]
 524:src/xeq.c     **** 		Error = e;
 3652              		.loc 1 524 5 view .LVU987
 3653 0006 0CB9     		cbnz	r4, .L314
 3654              	.LVL285:
 3655              	.LBB1601:
 3656              	.LBI1601:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3657              		.loc 1 523 5 is_stmt 1 view .LVU988
 3658              	.LBB1602:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 3659              		.loc 1 525 3 view .LVU989
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 3660              		.loc 1 525 9 is_stmt 0 view .LVU990
 3661 0008 1060     		str	r0, [r2]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 3662              		.loc 1 526 3 is_stmt 1 view .LVU991
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
ARM GAS  /tmp/ccK8IvWa.s 			page 177


 3663              		.loc 1 526 6 is_stmt 0 view .LVU992
 3664 000a 10B1     		cbz	r0, .L316
 3665              	.LVL286:
 3666              	.L314:
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 3667              		.loc 1 526 6 view .LVU993
 3668              	.LBE1602:
 3669              	.LBE1601:
 531:src/xeq.c     **** }
 3670              		.loc 1 531 9 view .LVU994
 3671 000c 0124     		movs	r4, #1
 532:src/xeq.c     **** 
 3672              		.loc 1 532 1 view .LVU995
 3673 000e 2046     		mov	r0, r4
 3674              	.LVL287:
 532:src/xeq.c     **** 
 3675              		.loc 1 532 1 view .LVU996
 3676 0010 10BD     		pop	{r4, pc}
 3677              	.LVL288:
 3678              	.L316:
 3679              	.LBB1604:
 3680              	.LBB1603:
 527:src/xeq.c     **** 			return 0;
 3681              		.loc 1 527 4 is_stmt 1 view .LVU997
 3682 0012 FFF7FEFF 		bl	error_message
 3683              	.LVL289:
 528:src/xeq.c     **** 		}
 3684              		.loc 1 528 4 view .LVU998
 528:src/xeq.c     **** 		}
 3685              		.loc 1 528 4 is_stmt 0 view .LVU999
 3686              	.LBE1603:
 3687              	.LBE1604:
 532:src/xeq.c     **** 
 3688              		.loc 1 532 1 view .LVU1000
 3689 0016 2046     		mov	r0, r4
 3690 0018 10BD     		pop	{r4, pc}
 3691              	.L318:
 3692 001a 00BF     		.align	2
 3693              	.L317:
 3694 001c 00000000 		.word	Error
 3695              		.cfi_endproc
 3696              	.LFE27:
 3698              		.section	.text.report_warn,"ax",%progbits
 3699              		.align	1
 3700              		.p2align 2,,3
 3701              		.global	report_warn
 3702              		.syntax unified
 3703              		.thumb
 3704              		.thumb_func
 3705              		.fpu fpv4-sp-d16
 3707              	report_warn:
 3708              	.LVL290:
 3709              	.LFB28:
 537:src/xeq.c     **** 	if (Running) {
 3710              		.loc 1 537 39 is_stmt 1 view -0
 3711              		.cfi_startproc
 3712              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccK8IvWa.s 			page 178


 3713              		@ frame_needed = 0, uses_anonymous_args = 0
 538:src/xeq.c     **** 		return report_err(e);
 3714              		.loc 1 538 2 view .LVU1002
 538:src/xeq.c     **** 		return report_err(e);
 3715              		.loc 1 538 6 is_stmt 0 view .LVU1003
 3716 0000 114B     		ldr	r3, .L325
 537:src/xeq.c     **** 	if (Running) {
 3717              		.loc 1 537 39 view .LVU1004
 3718 0002 70B5     		push	{r4, r5, r6, lr}
 3719              		.cfi_def_cfa_offset 16
 3720              		.cfi_offset 4, -16
 3721              		.cfi_offset 5, -12
 3722              		.cfi_offset 6, -8
 3723              		.cfi_offset 14, -4
 538:src/xeq.c     **** 		return report_err(e);
 3724              		.loc 1 538 5 view .LVU1005
 3725 0004 1D68     		ldr	r5, [r3]
 537:src/xeq.c     **** 	if (Running) {
 3726              		.loc 1 537 39 view .LVU1006
 3727 0006 0446     		mov	r4, r0
 538:src/xeq.c     **** 		return report_err(e);
 3728              		.loc 1 538 5 view .LVU1007
 3729 0008 5DB1     		cbz	r5, .L320
 539:src/xeq.c     **** 	}
 3730              		.loc 1 539 3 is_stmt 1 view .LVU1008
 3731              	.LVL291:
 3732              	.LBB1613:
 3733              	.LBI1613:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3734              		.loc 1 523 5 view .LVU1009
 3735              	.LBB1614:
 524:src/xeq.c     **** 		Error = e;
 3736              		.loc 1 524 2 view .LVU1010
 524:src/xeq.c     **** 		Error = e;
 3737              		.loc 1 524 12 is_stmt 0 view .LVU1011
 3738 000a 104B     		ldr	r3, .L325+4
 3739 000c 1D68     		ldr	r5, [r3]
 524:src/xeq.c     **** 		Error = e;
 3740              		.loc 1 524 5 view .LVU1012
 3741 000e 15B1     		cbz	r5, .L321
 3742              	.L323:
 531:src/xeq.c     **** }
 3743              		.loc 1 531 9 view .LVU1013
 3744 0010 0125     		movs	r5, #1
 3745              	.LVL292:
 3746              	.L319:
 531:src/xeq.c     **** }
 3747              		.loc 1 531 9 view .LVU1014
 3748              	.LBE1614:
 3749              	.LBE1613:
 548:src/xeq.c     **** 
 3750              		.loc 1 548 1 view .LVU1015
 3751 0012 2846     		mov	r0, r5
 3752 0014 70BD     		pop	{r4, r5, r6, pc}
 3753              	.LVL293:
 3754              	.L321:
 3755              	.LBB1618:
ARM GAS  /tmp/ccK8IvWa.s 			page 179


 3756              	.LBB1617:
 3757              	.LBB1615:
 3758              	.LBI1615:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3759              		.loc 1 523 5 is_stmt 1 view .LVU1016
 3760              	.LBB1616:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 3761              		.loc 1 525 3 view .LVU1017
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 3762              		.loc 1 525 9 is_stmt 0 view .LVU1018
 3763 0016 1860     		str	r0, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 3764              		.loc 1 526 3 is_stmt 1 view .LVU1019
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 3765              		.loc 1 526 6 is_stmt 0 view .LVU1020
 3766 0018 0028     		cmp	r0, #0
 3767 001a F9D1     		bne	.L323
 527:src/xeq.c     **** 			return 0;
 3768              		.loc 1 527 4 is_stmt 1 view .LVU1021
 3769 001c FFF7FEFF 		bl	error_message
 3770              	.LVL294:
 528:src/xeq.c     **** 		}
 3771              		.loc 1 528 4 view .LVU1022
 528:src/xeq.c     **** 		}
 3772              		.loc 1 528 11 is_stmt 0 view .LVU1023
 3773 0020 F7E7     		b	.L319
 3774              	.LVL295:
 3775              	.L320:
 528:src/xeq.c     **** 		}
 3776              		.loc 1 528 11 view .LVU1024
 3777              	.LBE1616:
 3778              	.LBE1615:
 3779              	.LBE1617:
 3780              	.LBE1618:
 3781              	.LBB1619:
 3782              	.LBI1619:
 537:src/xeq.c     **** 	if (Running) {
 3783              		.loc 1 537 5 is_stmt 1 view .LVU1025
 3784              	.LBB1620:
 541:src/xeq.c     **** #ifndef CONSOLE
 3785              		.loc 1 541 2 view .LVU1026
 3786 0022 FFF7FEFF 		bl	error_message
 3787              	.LVL296:
 543:src/xeq.c     **** 	JustDisplayed = 1;
 3788              		.loc 1 543 2 view .LVU1027
 543:src/xeq.c     **** 	JustDisplayed = 1;
 3789              		.loc 1 543 21 is_stmt 0 view .LVU1028
 3790 0026 0A4A     		ldr	r2, .L325+8
 544:src/xeq.c     **** 	ShowRPN = 1;
 3791              		.loc 1 544 16 view .LVU1029
 3792 0028 0A4E     		ldr	r6, .L325+12
 543:src/xeq.c     **** 	JustDisplayed = 1;
 3793              		.loc 1 543 21 view .LVU1030
 3794 002a D17D     		ldrb	r1, [r2, #23]	@ zero_extendqisi2
 545:src/xeq.c     **** #endif
 3795              		.loc 1 545 10 view .LVU1031
 3796 002c 0A48     		ldr	r0, .L325+16
ARM GAS  /tmp/ccK8IvWa.s 			page 180


 543:src/xeq.c     **** 	JustDisplayed = 1;
 3797              		.loc 1 543 21 view .LVU1032
 3798 002e 65F30411 		bfi	r1, r5, #4, #1
 547:src/xeq.c     **** }
 3799              		.loc 1 547 11 view .LVU1033
 3800 0032 251E     		subs	r5, r4, #0
 544:src/xeq.c     **** 	ShowRPN = 1;
 3801              		.loc 1 544 16 view .LVU1034
 3802 0034 4FF00103 		mov	r3, #1
 543:src/xeq.c     **** 	JustDisplayed = 1;
 3803              		.loc 1 543 21 view .LVU1035
 3804 0038 D175     		strb	r1, [r2, #23]
 544:src/xeq.c     **** 	ShowRPN = 1;
 3805              		.loc 1 544 2 is_stmt 1 view .LVU1036
 547:src/xeq.c     **** }
 3806              		.loc 1 547 11 is_stmt 0 view .LVU1037
 3807 003a 18BF     		it	ne
 3808 003c 0125     		movne	r5, #1
 545:src/xeq.c     **** #endif
 3809              		.loc 1 545 10 view .LVU1038
 3810 003e 0360     		str	r3, [r0]
 544:src/xeq.c     **** 	ShowRPN = 1;
 3811              		.loc 1 544 16 view .LVU1039
 3812 0040 3360     		str	r3, [r6]
 545:src/xeq.c     **** #endif
 3813              		.loc 1 545 2 is_stmt 1 view .LVU1040
 547:src/xeq.c     **** }
 3814              		.loc 1 547 2 view .LVU1041
 3815              	.LVL297:
 547:src/xeq.c     **** }
 3816              		.loc 1 547 2 is_stmt 0 view .LVU1042
 3817              	.LBE1620:
 3818              	.LBE1619:
 548:src/xeq.c     **** 
 3819              		.loc 1 548 1 view .LVU1043
 3820 0042 2846     		mov	r0, r5
 3821 0044 70BD     		pop	{r4, r5, r6, pc}
 3822              	.LVL298:
 3823              	.L326:
 548:src/xeq.c     **** 
 3824              		.loc 1 548 1 view .LVU1044
 3825 0046 00BF     		.align	2
 3826              	.L325:
 3827 0048 00000000 		.word	Running
 3828 004c 00000000 		.word	Error
 3829 0050 00000000 		.word	StateWhileOn
 3830 0054 00000000 		.word	JustDisplayed
 3831 0058 00000000 		.word	ShowRPN
 3832              		.cfi_endproc
 3833              	.LFE28:
 3835              		.section	.text.bad_mode_error,"ax",%progbits
 3836              		.align	1
 3837              		.p2align 2,,3
 3838              		.global	bad_mode_error
 3839              		.syntax unified
 3840              		.thumb
 3841              		.thumb_func
ARM GAS  /tmp/ccK8IvWa.s 			page 181


 3842              		.fpu fpv4-sp-d16
 3844              	bad_mode_error:
 3845              	.LFB29:
 552:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 3846              		.loc 1 552 27 is_stmt 1 view -0
 3847              		.cfi_startproc
 3848              		@ args = 0, pretend = 0, frame = 0
 3849              		@ frame_needed = 0, uses_anonymous_args = 0
 3850              		@ link register save eliminated.
 553:src/xeq.c     **** }
 3851              		.loc 1 553 2 view .LVU1046
 3852              	.LVL299:
 3853              	.LBB1625:
 3854              	.LBI1625:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3855              		.loc 1 523 5 view .LVU1047
 3856              	.LBB1626:
 524:src/xeq.c     **** 		Error = e;
 3857              		.loc 1 524 2 view .LVU1048
 524:src/xeq.c     **** 		Error = e;
 3858              		.loc 1 524 12 is_stmt 0 view .LVU1049
 3859 0000 024B     		ldr	r3, .L329
 524:src/xeq.c     **** 		Error = e;
 3860              		.loc 1 524 5 view .LVU1050
 3861 0002 1A68     		ldr	r2, [r3]
 3862 0004 0AB9     		cbnz	r2, .L327
 3863              	.LVL300:
 3864              	.LBB1627:
 3865              	.LBI1627:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3866              		.loc 1 523 5 is_stmt 1 view .LVU1051
 3867              	.LBB1628:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 3868              		.loc 1 525 3 view .LVU1052
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 3869              		.loc 1 525 9 is_stmt 0 view .LVU1053
 3870 0006 0D22     		movs	r2, #13
 3871 0008 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 3872              		.loc 1 526 3 is_stmt 1 view .LVU1054
 3873              	.LVL301:
 3874              	.L327:
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 3875              		.loc 1 526 3 is_stmt 0 view .LVU1055
 3876              	.LBE1628:
 3877              	.LBE1627:
 3878              	.LBE1626:
 3879              	.LBE1625:
 554:src/xeq.c     **** 
 3880              		.loc 1 554 1 view .LVU1056
 3881 000a 7047     		bx	lr
 3882              	.L330:
 3883              		.align	2
 3884              	.L329:
 3885 000c 00000000 		.word	Error
 3886              		.cfi_endproc
 3887              	.LFE29:
ARM GAS  /tmp/ccK8IvWa.s 			page 182


 3889              		.section	.text.cmderr,"ax",%progbits
 3890              		.align	1
 3891              		.p2align 2,,3
 3892              		.global	cmderr
 3893              		.syntax unified
 3894              		.thumb
 3895              		.thumb_func
 3896              		.fpu fpv4-sp-d16
 3898              	cmderr:
 3899              	.LVL302:
 3900              	.LFB30:
 558:src/xeq.c     **** 	report_err(arg);
 3901              		.loc 1 558 45 is_stmt 1 view -0
 3902              		.cfi_startproc
 3903              		@ args = 0, pretend = 0, frame = 0
 3904              		@ frame_needed = 0, uses_anonymous_args = 0
 3905              		@ link register save eliminated.
 559:src/xeq.c     **** }
 3906              		.loc 1 559 2 view .LVU1058
 3907              	.LBB1633:
 3908              	.LBB1634:
 524:src/xeq.c     **** 		Error = e;
 3909              		.loc 1 524 12 is_stmt 0 view .LVU1059
 3910 0000 034A     		ldr	r2, .L336
 524:src/xeq.c     **** 		Error = e;
 3911              		.loc 1 524 5 view .LVU1060
 3912 0002 1168     		ldr	r1, [r2]
 3913              	.LVL303:
 524:src/xeq.c     **** 		Error = e;
 3914              		.loc 1 524 5 view .LVU1061
 3915              	.LBE1634:
 3916              	.LBI1633:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3917              		.loc 1 523 5 is_stmt 1 view .LVU1062
 3918              	.LBB1639:
 524:src/xeq.c     **** 		Error = e;
 3919              		.loc 1 524 2 view .LVU1063
 524:src/xeq.c     **** 		Error = e;
 3920              		.loc 1 524 5 is_stmt 0 view .LVU1064
 3921 0004 09B9     		cbnz	r1, .L331
 3922              	.LVL304:
 3923              	.LBB1635:
 3924              	.LBI1635:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3925              		.loc 1 523 5 is_stmt 1 view .LVU1065
 3926              	.LBB1636:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 3927              		.loc 1 525 3 view .LVU1066
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 3928              		.loc 1 525 9 is_stmt 0 view .LVU1067
 3929 0006 1060     		str	r0, [r2]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 3930              		.loc 1 526 3 is_stmt 1 view .LVU1068
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 3931              		.loc 1 526 6 is_stmt 0 view .LVU1069
 3932 0008 00B1     		cbz	r0, .L335
 3933              	.LVL305:
ARM GAS  /tmp/ccK8IvWa.s 			page 183


 3934              	.L331:
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 3935              		.loc 1 526 6 view .LVU1070
 3936              	.LBE1636:
 3937              	.LBE1635:
 3938              	.LBE1639:
 3939              	.LBE1633:
 560:src/xeq.c     **** 
 3940              		.loc 1 560 1 view .LVU1071
 3941 000a 7047     		bx	lr
 3942              	.LVL306:
 3943              	.L335:
 3944              	.LBB1641:
 3945              	.LBB1640:
 3946              	.LBB1638:
 3947              	.LBB1637:
 527:src/xeq.c     **** 			return 0;
 3948              		.loc 1 527 4 is_stmt 1 view .LVU1072
 3949 000c FFF7FEBF 		b	error_message
 3950              	.LVL307:
 3951              	.L337:
 527:src/xeq.c     **** 			return 0;
 3952              		.loc 1 527 4 is_stmt 0 view .LVU1073
 3953              		.align	2
 3954              	.L336:
 3955 0010 00000000 		.word	Error
 3956              	.LBE1637:
 3957              	.LBE1638:
 3958              	.LBE1640:
 3959              	.LBE1641:
 3960              		.cfi_endproc
 3961              	.LFE30:
 3963              		.section	.text.cmdmsg,"ax",%progbits
 3964              		.align	1
 3965              		.p2align 2,,3
 3966              		.global	cmdmsg
 3967              		.syntax unified
 3968              		.thumb
 3969              		.thumb_func
 3970              		.fpu fpv4-sp-d16
 3972              	cmdmsg:
 3973              	.LVL308:
 3974              	.LFB31:
 564:src/xeq.c     **** 	error_message(arg);
 3975              		.loc 1 564 45 is_stmt 1 view -0
 3976              		.cfi_startproc
 3977              		@ args = 0, pretend = 0, frame = 0
 3978              		@ frame_needed = 0, uses_anonymous_args = 0
 3979              		@ link register save eliminated.
 565:src/xeq.c     **** }
 3980              		.loc 1 565 2 view .LVU1075
 3981 0000 FFF7FEBF 		b	error_message
 3982              	.LVL309:
 565:src/xeq.c     **** }
 3983              		.loc 1 565 2 is_stmt 0 view .LVU1076
 3984              		.cfi_endproc
 3985              	.LFE31:
ARM GAS  /tmp/ccK8IvWa.s 			page 184


 3987              		.section	.text.rarg_roundingmode,"ax",%progbits
 3988              		.align	1
 3989              		.p2align 2,,3
 3990              		.global	rarg_roundingmode
 3991              		.syntax unified
 3992              		.thumb
 3993              		.thumb_func
 3994              		.fpu fpv4-sp-d16
 3996              	rarg_roundingmode:
 3997              	.LVL310:
 3998              	.LFB34:
 600:src/xeq.c     **** 	UState.rounding_mode = arg;
 3999              		.loc 1 600 56 is_stmt 1 view -0
 4000              		.cfi_startproc
 4001              		@ args = 0, pretend = 0, frame = 0
 4002              		@ frame_needed = 0, uses_anonymous_args = 0
 4003              		@ link register save eliminated.
 601:src/xeq.c     **** }
 4004              		.loc 1 601 2 view .LVU1078
 601:src/xeq.c     **** }
 4005              		.loc 1 601 23 is_stmt 0 view .LVU1079
 4006 0000 034B     		ldr	r3, .L340
 4007 0002 93F8EB27 		ldrb	r2, [r3, #2027]	@ zero_extendqisi2
 4008 0006 60F30612 		bfi	r2, r0, #4, #3
 4009              	.LVL311:
 601:src/xeq.c     **** }
 4010              		.loc 1 601 23 view .LVU1080
 4011 000a 83F8EB27 		strb	r2, [r3, #2027]
 602:src/xeq.c     **** 
 4012              		.loc 1 602 1 view .LVU1081
 4013 000e 7047     		bx	lr
 4014              	.L341:
 4015              		.align	2
 4016              	.L340:
 4017 0010 00000000 		.word	PersistentRam
 4018              		.cfi_endproc
 4019              	.LFE34:
 4021              		.section	.text.packed_from_number,"ax",%progbits
 4022              		.align	1
 4023              		.p2align 2,,3
 4024              		.global	packed_from_number
 4025              		.syntax unified
 4026              		.thumb
 4027              		.thumb_func
 4028              		.fpu fpv4-sp-d16
 4030              	packed_from_number:
 4031              	.LVL312:
 4032              	.LFB35:
 608:src/xeq.c     **** 	decContext ctx64;
 4033              		.loc 1 608 59 is_stmt 1 view -0
 4034              		.cfi_startproc
 4035              		@ args = 0, pretend = 0, frame = 24
 4036              		@ frame_needed = 0, uses_anonymous_args = 0
 609:src/xeq.c     **** 
 4037              		.loc 1 609 2 view .LVU1083
 611:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4038              		.loc 1 611 2 view .LVU1084
ARM GAS  /tmp/ccK8IvWa.s 			page 185


 608:src/xeq.c     **** 	decContext ctx64;
 4039              		.loc 1 608 59 is_stmt 0 view .LVU1085
 4040 0000 70B5     		push	{r4, r5, r6, lr}
 4041              		.cfi_def_cfa_offset 16
 4042              		.cfi_offset 4, -16
 4043              		.cfi_offset 5, -12
 4044              		.cfi_offset 6, -8
 4045              		.cfi_offset 14, -4
 4046 0002 86B0     		sub	sp, sp, #24
 4047              		.cfi_def_cfa_offset 40
 608:src/xeq.c     **** 	decContext ctx64;
 4048              		.loc 1 608 59 view .LVU1086
 4049 0004 0446     		mov	r4, r0
 4050 0006 0D46     		mov	r5, r1
 611:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4051              		.loc 1 611 2 view .LVU1087
 4052 0008 6846     		mov	r0, sp
 4053              	.LVL313:
 611:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4054              		.loc 1 611 2 view .LVU1088
 4055 000a 4021     		movs	r1, #64
 4056              	.LVL314:
 611:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4057              		.loc 1 611 2 view .LVU1089
 4058 000c FFF7FEFF 		bl	decContextDefault
 4059              	.LVL315:
 612:src/xeq.c     **** 	decimal64FromNumber(r, x, &ctx64);
 4060              		.loc 1 612 2 is_stmt 1 view .LVU1090
 4061              	.LBB1642:
 4062              	.LBI1642:
 587:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 4063              		.loc 1 587 22 view .LVU1091
 4064              	.LBB1643:
 588:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 4065              		.loc 1 588 2 view .LVU1092
 593:src/xeq.c     **** }
 4066              		.loc 1 593 2 view .LVU1093
 593:src/xeq.c     **** }
 4067              		.loc 1 593 37 is_stmt 0 view .LVU1094
 4068 0010 074B     		ldr	r3, .L344
 593:src/xeq.c     **** }
 4069              		.loc 1 593 9 view .LVU1095
 4070 0012 084E     		ldr	r6, .L344+4
 593:src/xeq.c     **** }
 4071              		.loc 1 593 37 view .LVU1096
 4072 0014 93F8EB37 		ldrb	r3, [r3, #2027]	@ zero_extendqisi2
 4073 0018 C3F30213 		ubfx	r3, r3, #4, #3
 4074              	.LBE1643:
 4075              	.LBE1642:
 613:src/xeq.c     **** }
 4076              		.loc 1 613 2 view .LVU1097
 4077 001c 2946     		mov	r1, r5
 612:src/xeq.c     **** 	decimal64FromNumber(r, x, &ctx64);
 4078              		.loc 1 612 14 view .LVU1098
 4079 001e F35C     		ldrb	r3, [r6, r3]	@ zero_extendqisi2
 4080 0020 8DF80C30 		strb	r3, [sp, #12]
 613:src/xeq.c     **** }
ARM GAS  /tmp/ccK8IvWa.s 			page 186


 4081              		.loc 1 613 2 is_stmt 1 view .LVU1099
 4082 0024 2046     		mov	r0, r4
 4083 0026 6A46     		mov	r2, sp
 4084 0028 FFF7FEFF 		bl	decimal64FromNumber
 4085              	.LVL316:
 614:src/xeq.c     **** 
 4086              		.loc 1 614 1 is_stmt 0 view .LVU1100
 4087 002c 06B0     		add	sp, sp, #24
 4088              		.cfi_def_cfa_offset 16
 4089              		@ sp needed
 4090 002e 70BD     		pop	{r4, r5, r6, pc}
 4091              	.LVL317:
 4092              	.L345:
 614:src/xeq.c     **** 
 4093              		.loc 1 614 1 view .LVU1101
 4094              		.align	2
 4095              	.L344:
 4096 0030 00000000 		.word	PersistentRam
 4097 0034 00000000 		.word	.LANCHOR1
 4098              		.cfi_endproc
 4099              	.LFE35:
 4101              		.section	.text.packed128_from_number,"ax",%progbits
 4102              		.align	1
 4103              		.p2align 2,,3
 4104              		.global	packed128_from_number
 4105              		.syntax unified
 4106              		.thumb
 4107              		.thumb_func
 4108              		.fpu fpv4-sp-d16
 4110              	packed128_from_number:
 4111              	.LVL318:
 4112              	.LFB36:
 616:src/xeq.c     **** 	decContext ctx128;
 4113              		.loc 1 616 63 is_stmt 1 view -0
 4114              		.cfi_startproc
 4115              		@ args = 0, pretend = 0, frame = 24
 4116              		@ frame_needed = 0, uses_anonymous_args = 0
 617:src/xeq.c     **** 
 4117              		.loc 1 617 2 view .LVU1103
 619:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4118              		.loc 1 619 2 view .LVU1104
 616:src/xeq.c     **** 	decContext ctx128;
 4119              		.loc 1 616 63 is_stmt 0 view .LVU1105
 4120 0000 70B5     		push	{r4, r5, r6, lr}
 4121              		.cfi_def_cfa_offset 16
 4122              		.cfi_offset 4, -16
 4123              		.cfi_offset 5, -12
 4124              		.cfi_offset 6, -8
 4125              		.cfi_offset 14, -4
 4126 0002 86B0     		sub	sp, sp, #24
 4127              		.cfi_def_cfa_offset 40
 616:src/xeq.c     **** 	decContext ctx128;
 4128              		.loc 1 616 63 view .LVU1106
 4129 0004 0446     		mov	r4, r0
 4130 0006 0D46     		mov	r5, r1
 619:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4131              		.loc 1 619 2 view .LVU1107
ARM GAS  /tmp/ccK8IvWa.s 			page 187


 4132 0008 6846     		mov	r0, sp
 4133              	.LVL319:
 619:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4134              		.loc 1 619 2 view .LVU1108
 4135 000a 8021     		movs	r1, #128
 4136              	.LVL320:
 619:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4137              		.loc 1 619 2 view .LVU1109
 4138 000c FFF7FEFF 		bl	decContextDefault
 4139              	.LVL321:
 620:src/xeq.c     **** 	decimal128FromNumber(r, x, &ctx128);
 4140              		.loc 1 620 2 is_stmt 1 view .LVU1110
 4141              	.LBB1644:
 4142              	.LBI1644:
 587:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 4143              		.loc 1 587 22 view .LVU1111
 4144              	.LBB1645:
 588:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 4145              		.loc 1 588 2 view .LVU1112
 593:src/xeq.c     **** }
 4146              		.loc 1 593 2 view .LVU1113
 593:src/xeq.c     **** }
 4147              		.loc 1 593 37 is_stmt 0 view .LVU1114
 4148 0010 074B     		ldr	r3, .L348
 593:src/xeq.c     **** }
 4149              		.loc 1 593 9 view .LVU1115
 4150 0012 084E     		ldr	r6, .L348+4
 593:src/xeq.c     **** }
 4151              		.loc 1 593 37 view .LVU1116
 4152 0014 93F8EB37 		ldrb	r3, [r3, #2027]	@ zero_extendqisi2
 4153 0018 C3F30213 		ubfx	r3, r3, #4, #3
 4154              	.LBE1645:
 4155              	.LBE1644:
 621:src/xeq.c     **** }
 4156              		.loc 1 621 2 view .LVU1117
 4157 001c 2946     		mov	r1, r5
 620:src/xeq.c     **** 	decimal128FromNumber(r, x, &ctx128);
 4158              		.loc 1 620 15 view .LVU1118
 4159 001e F35C     		ldrb	r3, [r6, r3]	@ zero_extendqisi2
 4160 0020 8DF80C30 		strb	r3, [sp, #12]
 621:src/xeq.c     **** }
 4161              		.loc 1 621 2 is_stmt 1 view .LVU1119
 4162 0024 2046     		mov	r0, r4
 4163 0026 6A46     		mov	r2, sp
 4164 0028 FFF7FEFF 		bl	decimal128FromNumber
 4165              	.LVL322:
 622:src/xeq.c     **** 
 4166              		.loc 1 622 1 is_stmt 0 view .LVU1120
 4167 002c 06B0     		add	sp, sp, #24
 4168              		.cfi_def_cfa_offset 16
 4169              		@ sp needed
 4170 002e 70BD     		pop	{r4, r5, r6, pc}
 4171              	.LVL323:
 4172              	.L349:
 622:src/xeq.c     **** 
 4173              		.loc 1 622 1 view .LVU1121
 4174              		.align	2
ARM GAS  /tmp/ccK8IvWa.s 			page 188


 4175              	.L348:
 4176 0030 00000000 		.word	PersistentRam
 4177 0034 00000000 		.word	.LANCHOR1
 4178              		.cfi_endproc
 4179              	.LFE36:
 4181              		.section	.text.check_special,"ax",%progbits
 4182              		.align	1
 4183              		.p2align 2,,3
 4184              		.syntax unified
 4185              		.thumb
 4186              		.thumb_func
 4187              		.fpu fpv4-sp-d16
 4189              	check_special:
 4190              	.LVL324:
 4191              	.LFB40:
 661:src/xeq.c     **** 	decNumber y;
 4192              		.loc 1 661 46 is_stmt 1 view -0
 4193              		.cfi_startproc
 4194              		@ args = 0, pretend = 0, frame = 64
 4195              		@ frame_needed = 0, uses_anonymous_args = 0
 662:src/xeq.c     **** 	decimal64 z;
 4196              		.loc 1 662 2 view .LVU1123
 663:src/xeq.c     **** 	decimal128 d;
 4197              		.loc 1 663 2 view .LVU1124
 664:src/xeq.c     **** 	if (is_dblmode()) {
 4198              		.loc 1 664 2 view .LVU1125
 665:src/xeq.c     **** 		packed128_from_number(&d, x);
 4199              		.loc 1 665 2 view .LVU1126
 4200              	.LBB1662:
 4201              	.LBI1662:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4202              		.loc 1 918 5 view .LVU1127
 4203              	.LBB1663:
 919:src/xeq.c     **** }
 4204              		.loc 1 919 2 view .LVU1128
 919:src/xeq.c     **** }
 4205              		.loc 1 919 24 is_stmt 0 view .LVU1129
 4206 0000 274B     		ldr	r3, .L364
 4207              	.LBE1663:
 4208              	.LBE1662:
 661:src/xeq.c     **** 	decNumber y;
 4209              		.loc 1 661 46 view .LVU1130
 4210 0002 00B5     		push	{lr}
 4211              		.cfi_def_cfa_offset 4
 4212              		.cfi_offset 14, -4
 4213              	.LBB1665:
 4214              	.LBB1664:
 919:src/xeq.c     **** }
 4215              		.loc 1 919 24 view .LVU1131
 4216 0004 B3F8E827 		ldrh	r2, [r3, #2024]
 4217 0008 44F20103 		movw	r3, #16385
 4218              	.LBE1664:
 4219              	.LBE1665:
 665:src/xeq.c     **** 		packed128_from_number(&d, x);
 4220              		.loc 1 665 5 view .LVU1132
 4221 000c 1340     		ands	r3, r3, r2
 4222 000e B3F5804F 		cmp	r3, #16384
ARM GAS  /tmp/ccK8IvWa.s 			page 189


 661:src/xeq.c     **** 	decNumber y;
 4223              		.loc 1 661 46 view .LVU1133
 4224 0012 91B0     		sub	sp, sp, #68
 4225              		.cfi_def_cfa_offset 72
 661:src/xeq.c     **** 	decNumber y;
 4226              		.loc 1 661 46 view .LVU1134
 4227 0014 0146     		mov	r1, r0
 665:src/xeq.c     **** 		packed128_from_number(&d, x);
 4228              		.loc 1 665 5 view .LVU1135
 4229 0016 0FD0     		beq	.L362
 671:src/xeq.c     **** 		decimal64ToNumber(&z, &y);
 4230              		.loc 1 671 3 is_stmt 1 view .LVU1136
 4231 0018 01A8     		add	r0, sp, #4
 4232              	.LVL325:
 671:src/xeq.c     **** 		decimal64ToNumber(&z, &y);
 4233              		.loc 1 671 3 is_stmt 0 view .LVU1137
 4234 001a FFF7FEFF 		bl	packed_from_number
 4235              	.LVL326:
 672:src/xeq.c     **** 	}
 4236              		.loc 1 672 3 is_stmt 1 view .LVU1138
 4237 001e 01A8     		add	r0, sp, #4
 4238 0020 07A9     		add	r1, sp, #28
 4239 0022 FFF7FEFF 		bl	decimal64ToNumber
 4240              	.LVL327:
 674:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4241              		.loc 1 674 2 view .LVU1139
 674:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4242              		.loc 1 674 5 is_stmt 0 view .LVU1140
 4243 0026 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 4244 002a 13F0700F 		tst	r3, #112
 4245 002e 0FD1     		bne	.L353
 4246              	.L355:
 685:src/xeq.c     **** }
 4247              		.loc 1 685 9 view .LVU1141
 4248 0030 0020     		movs	r0, #0
 4249              	.L350:
 686:src/xeq.c     **** 
 4250              		.loc 1 686 1 view .LVU1142
 4251 0032 11B0     		add	sp, sp, #68
 4252              		.cfi_remember_state
 4253              		.cfi_def_cfa_offset 4
 4254              		@ sp needed
 4255 0034 5DF804FB 		ldr	pc, [sp], #4
 4256              	.LVL328:
 4257              	.L362:
 4258              		.cfi_restore_state
 666:src/xeq.c     **** 		decimal128ToNumber(&d, &y);
 4259              		.loc 1 666 3 is_stmt 1 view .LVU1143
 4260 0038 03A8     		add	r0, sp, #12
 4261              	.LVL329:
 666:src/xeq.c     **** 		decimal128ToNumber(&d, &y);
 4262              		.loc 1 666 3 is_stmt 0 view .LVU1144
 4263 003a FFF7FEFF 		bl	packed128_from_number
 4264              	.LVL330:
 667:src/xeq.c     **** 	}
 4265              		.loc 1 667 3 is_stmt 1 view .LVU1145
 4266 003e 03A8     		add	r0, sp, #12
ARM GAS  /tmp/ccK8IvWa.s 			page 190


 4267 0040 07A9     		add	r1, sp, #28
 4268 0042 FFF7FEFF 		bl	decimal128ToNumber
 4269              	.LVL331:
 674:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4270              		.loc 1 674 2 view .LVU1146
 674:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4271              		.loc 1 674 5 is_stmt 0 view .LVU1147
 4272 0046 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 4273 004a 13F0700F 		tst	r3, #112
 4274 004e EFD0     		beq	.L355
 4275              	.L353:
 675:src/xeq.c     **** 			if (decNumberIsNaN(&y))
 4276              		.loc 1 675 3 is_stmt 1 view .LVU1148
 4277              	.LVL332:
 4278              	.LBB1666:
 4279              	.LBI1666:
3304:src/xeq.c     **** 	unsigned short mask;
 4280              		.loc 1 3304 5 view .LVU1149
 4281              	.LBB1667:
3305:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
 4282              		.loc 1 3305 2 view .LVU1150
3306:src/xeq.c     **** 
 4283              		.loc 1 3306 2 view .LVU1151
3306:src/xeq.c     **** 
 4284              		.loc 1 3306 34 is_stmt 0 view .LVU1152
 4285 0050 0DF10201 		add	r1, sp, #2
 4286 0054 6B20     		movs	r0, #107
 4287 0056 FFF7FEFF 		bl	flag_word
 4288              	.LVL333:
3308:src/xeq.c     **** }
 4289              		.loc 1 3308 2 is_stmt 1 view .LVU1153
3308:src/xeq.c     **** }
 4290              		.loc 1 3308 24 is_stmt 0 view .LVU1154
 4291 005a BDF80230 		ldrh	r3, [sp, #2]
 4292 005e 0288     		ldrh	r2, [r0]
 4293              	.LBE1667:
 4294              	.LBE1666:
 675:src/xeq.c     **** 			if (decNumberIsNaN(&y))
 4295              		.loc 1 675 6 view .LVU1155
 4296 0060 1A42     		tst	r2, r3
 4297 0062 E5D1     		bne	.L355
 676:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 4298              		.loc 1 676 4 is_stmt 1 view .LVU1156
 676:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 4299              		.loc 1 676 8 is_stmt 0 view .LVU1157
 4300 0064 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 676:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 4301              		.loc 1 676 7 view .LVU1158
 4302 0068 13F0300F 		tst	r3, #48
 4303 006c 06D0     		beq	.L356
 677:src/xeq.c     **** 			else if (decNumberIsNegative(&y))
 4304              		.loc 1 677 5 is_stmt 1 view .LVU1159
 4305              	.LVL334:
 4306              	.LBB1668:
 4307              	.LBI1668:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4308              		.loc 1 523 5 view .LVU1160
ARM GAS  /tmp/ccK8IvWa.s 			page 191


 4309              	.LBB1669:
 524:src/xeq.c     **** 		Error = e;
 4310              		.loc 1 524 2 view .LVU1161
 524:src/xeq.c     **** 		Error = e;
 4311              		.loc 1 524 12 is_stmt 0 view .LVU1162
 4312 006e 0D4B     		ldr	r3, .L364+4
 524:src/xeq.c     **** 		Error = e;
 4313              		.loc 1 524 5 view .LVU1163
 4314 0070 1A68     		ldr	r2, [r3]
 4315              	.LBB1670:
 4316              	.LBB1671:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 4317              		.loc 1 525 9 view .LVU1164
 4318 0072 0120     		movs	r0, #1
 4319              	.LBE1671:
 4320              	.LBE1670:
 524:src/xeq.c     **** 		Error = e;
 4321              		.loc 1 524 5 view .LVU1165
 4322 0074 002A     		cmp	r2, #0
 4323 0076 DCD1     		bne	.L350
 4324              	.LVL335:
 4325              	.LBB1673:
 4326              	.LBI1670:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4327              		.loc 1 523 5 is_stmt 1 view .LVU1166
 4328              	.LBB1672:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 4329              		.loc 1 525 3 view .LVU1167
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 4330              		.loc 1 525 9 is_stmt 0 view .LVU1168
 4331 0078 1860     		str	r0, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 4332              		.loc 1 526 3 is_stmt 1 view .LVU1169
 4333 007a DAE7     		b	.L350
 4334              	.LVL336:
 4335              	.L356:
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 4336              		.loc 1 526 3 is_stmt 0 view .LVU1170
 4337              	.LBE1672:
 4338              	.LBE1673:
 4339              	.LBE1669:
 4340              	.LBE1668:
 678:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 4341              		.loc 1 678 9 is_stmt 1 view .LVU1171
 678:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 4342              		.loc 1 678 12 is_stmt 0 view .LVU1172
 4343 007c 13F0800F 		tst	r3, #128
 4344              	.LBB1674:
 4345              	.LBB1675:
 524:src/xeq.c     **** 		Error = e;
 4346              		.loc 1 524 12 view .LVU1173
 4347 0080 084B     		ldr	r3, .L364+4
 524:src/xeq.c     **** 		Error = e;
 4348              		.loc 1 524 5 view .LVU1174
 4349 0082 1A68     		ldr	r2, [r3]
 4350              	.LBE1675:
 4351              	.LBE1674:
ARM GAS  /tmp/ccK8IvWa.s 			page 192


 678:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 4352              		.loc 1 678 12 view .LVU1175
 4353 0084 04D1     		bne	.L363
 681:src/xeq.c     **** 			return 1;
 4354              		.loc 1 681 5 is_stmt 1 view .LVU1176
 4355              	.LVL337:
 4356              	.LBB1679:
 4357              	.LBI1679:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4358              		.loc 1 523 5 view .LVU1177
 4359              	.LBB1680:
 524:src/xeq.c     **** 		Error = e;
 4360              		.loc 1 524 2 view .LVU1178
 524:src/xeq.c     **** 		Error = e;
 4361              		.loc 1 524 5 is_stmt 0 view .LVU1179
 4362 0086 42B9     		cbnz	r2, .L360
 4363              	.LVL338:
 4364              	.LBB1681:
 4365              	.LBI1681:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4366              		.loc 1 523 5 is_stmt 1 view .LVU1180
 4367              	.LBB1682:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 4368              		.loc 1 525 3 view .LVU1181
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 4369              		.loc 1 525 9 is_stmt 0 view .LVU1182
 4370 0088 0422     		movs	r2, #4
 4371 008a 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 4372              		.loc 1 526 3 is_stmt 1 view .LVU1183
 4373              	.LBE1682:
 4374              	.LBE1681:
 4375              	.LBE1680:
 4376              	.LBE1679:
 682:src/xeq.c     **** 		}
 4377              		.loc 1 682 11 is_stmt 0 view .LVU1184
 4378 008c 0120     		movs	r0, #1
 4379 008e D0E7     		b	.L350
 4380              	.LVL339:
 4381              	.L363:
 679:src/xeq.c     **** 			else
 4382              		.loc 1 679 5 is_stmt 1 view .LVU1185
 4383              	.LBB1683:
 4384              	.LBI1674:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4385              		.loc 1 523 5 view .LVU1186
 4386              	.LBB1678:
 524:src/xeq.c     **** 		Error = e;
 4387              		.loc 1 524 2 view .LVU1187
 524:src/xeq.c     **** 		Error = e;
 4388              		.loc 1 524 5 is_stmt 0 view .LVU1188
 4389 0090 1AB9     		cbnz	r2, .L360
 4390              	.LVL340:
 4391              	.LBB1676:
 4392              	.LBI1676:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4393              		.loc 1 523 5 is_stmt 1 view .LVU1189
ARM GAS  /tmp/ccK8IvWa.s 			page 193


 4394              	.LBB1677:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 4395              		.loc 1 525 3 view .LVU1190
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 4396              		.loc 1 525 9 is_stmt 0 view .LVU1191
 4397 0092 0522     		movs	r2, #5
 4398 0094 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 4399              		.loc 1 526 3 is_stmt 1 view .LVU1192
 4400              	.LBE1677:
 4401              	.LBE1676:
 4402              	.LBE1678:
 4403              	.LBE1683:
 682:src/xeq.c     **** 		}
 4404              		.loc 1 682 11 is_stmt 0 view .LVU1193
 4405 0096 0120     		movs	r0, #1
 4406 0098 CBE7     		b	.L350
 4407              	.LVL341:
 4408              	.L360:
 682:src/xeq.c     **** 		}
 4409              		.loc 1 682 11 view .LVU1194
 4410 009a 0120     		movs	r0, #1
 4411 009c C9E7     		b	.L350
 4412              	.L365:
 4413 009e 00BF     		.align	2
 4414              	.L364:
 4415 00a0 00000000 		.word	PersistentRam
 4416 00a4 00000000 		.word	Error
 4417              		.cfi_endproc
 4418              	.LFE40:
 4420              		.section	.text.packed_from_packed128,"ax",%progbits
 4421              		.align	1
 4422              		.p2align 2,,3
 4423              		.global	packed_from_packed128
 4424              		.syntax unified
 4425              		.thumb
 4426              		.thumb_func
 4427              		.fpu fpv4-sp-d16
 4429              	packed_from_packed128:
 4430              	.LVL342:
 4431              	.LFB37:
 625:src/xeq.c     **** 	decNumber temp;
 4432              		.loc 1 625 63 is_stmt 1 view -0
 4433              		.cfi_startproc
 4434              		@ args = 0, pretend = 0, frame = 40
 4435              		@ frame_needed = 0, uses_anonymous_args = 0
 626:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 4436              		.loc 1 626 2 view .LVU1196
 627:src/xeq.c     **** }
 4437              		.loc 1 627 2 view .LVU1197
 625:src/xeq.c     **** 	decNumber temp;
 4438              		.loc 1 625 63 is_stmt 0 view .LVU1198
 4439 0000 10B5     		push	{r4, lr}
 4440              		.cfi_def_cfa_offset 8
 4441              		.cfi_offset 4, -8
 4442              		.cfi_offset 14, -4
 4443 0002 8AB0     		sub	sp, sp, #40
ARM GAS  /tmp/ccK8IvWa.s 			page 194


 4444              		.cfi_def_cfa_offset 48
 625:src/xeq.c     **** 	decNumber temp;
 4445              		.loc 1 625 63 view .LVU1199
 4446 0004 0446     		mov	r4, r0
 627:src/xeq.c     **** }
 4447              		.loc 1 627 24 view .LVU1200
 4448 0006 0846     		mov	r0, r1
 4449              	.LVL343:
 627:src/xeq.c     **** }
 4450              		.loc 1 627 24 view .LVU1201
 4451 0008 01A9     		add	r1, sp, #4
 4452              	.LVL344:
 627:src/xeq.c     **** }
 4453              		.loc 1 627 24 view .LVU1202
 4454 000a FFF7FEFF 		bl	decimal128ToNumber
 4455              	.LVL345:
 627:src/xeq.c     **** }
 4456              		.loc 1 627 24 view .LVU1203
 4457 000e 0146     		mov	r1, r0
 627:src/xeq.c     **** }
 4458              		.loc 1 627 2 view .LVU1204
 4459 0010 2046     		mov	r0, r4
 4460 0012 FFF7FEFF 		bl	packed_from_number
 4461              	.LVL346:
 628:src/xeq.c     **** 
 4462              		.loc 1 628 1 view .LVU1205
 4463 0016 0AB0     		add	sp, sp, #40
 4464              		.cfi_def_cfa_offset 8
 4465              		@ sp needed
 4466 0018 10BD     		pop	{r4, pc}
 628:src/xeq.c     **** 
 4467              		.loc 1 628 1 view .LVU1206
 4468              		.cfi_endproc
 4469              	.LFE37:
 4471 001a 00BF     		.section	.text.packed128_from_packed,"ax",%progbits
 4472              		.align	1
 4473              		.p2align 2,,3
 4474              		.global	packed128_from_packed
 4475              		.syntax unified
 4476              		.thumb
 4477              		.thumb_func
 4478              		.fpu fpv4-sp-d16
 4480              	packed128_from_packed:
 4481              	.LVL347:
 4482              	.LFB38:
 631:src/xeq.c     **** 	decNumber temp;
 4483              		.loc 1 631 63 is_stmt 1 view -0
 4484              		.cfi_startproc
 4485              		@ args = 0, pretend = 0, frame = 40
 4486              		@ frame_needed = 0, uses_anonymous_args = 0
 632:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 4487              		.loc 1 632 2 view .LVU1208
 633:src/xeq.c     **** }
 4488              		.loc 1 633 2 view .LVU1209
 631:src/xeq.c     **** 	decNumber temp;
 4489              		.loc 1 631 63 is_stmt 0 view .LVU1210
 4490 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/ccK8IvWa.s 			page 195


 4491              		.cfi_def_cfa_offset 8
 4492              		.cfi_offset 4, -8
 4493              		.cfi_offset 14, -4
 4494 0002 8AB0     		sub	sp, sp, #40
 4495              		.cfi_def_cfa_offset 48
 631:src/xeq.c     **** 	decNumber temp;
 4496              		.loc 1 631 63 view .LVU1211
 4497 0004 0446     		mov	r4, r0
 633:src/xeq.c     **** }
 4498              		.loc 1 633 27 view .LVU1212
 4499 0006 0846     		mov	r0, r1
 4500              	.LVL348:
 633:src/xeq.c     **** }
 4501              		.loc 1 633 27 view .LVU1213
 4502 0008 01A9     		add	r1, sp, #4
 4503              	.LVL349:
 633:src/xeq.c     **** }
 4504              		.loc 1 633 27 view .LVU1214
 4505 000a FFF7FEFF 		bl	decimal64ToNumber
 4506              	.LVL350:
 633:src/xeq.c     **** }
 4507              		.loc 1 633 27 view .LVU1215
 4508 000e 0146     		mov	r1, r0
 633:src/xeq.c     **** }
 4509              		.loc 1 633 2 view .LVU1216
 4510 0010 2046     		mov	r0, r4
 4511 0012 FFF7FEFF 		bl	packed128_from_number
 4512              	.LVL351:
 634:src/xeq.c     **** 
 4513              		.loc 1 634 1 view .LVU1217
 4514 0016 0AB0     		add	sp, sp, #40
 4515              		.cfi_def_cfa_offset 8
 4516              		@ sp needed
 4517 0018 10BD     		pop	{r4, pc}
 634:src/xeq.c     **** 
 4518              		.loc 1 634 1 view .LVU1218
 4519              		.cfi_endproc
 4520              	.LFE38:
 4522 001a 00BF     		.section	.text.stack_size,"ax",%progbits
 4523              		.align	1
 4524              		.p2align 2,,3
 4525              		.global	stack_size
 4526              		.syntax unified
 4527              		.thumb
 4528              		.thumb_func
 4529              		.fpu fpv4-sp-d16
 4531              	stack_size:
 4532              	.LFB41:
 689:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 4533              		.loc 1 689 22 is_stmt 1 view -0
 4534              		.cfi_startproc
 4535              		@ args = 0, pretend = 0, frame = 0
 4536              		@ frame_needed = 0, uses_anonymous_args = 0
 4537              		@ link register save eliminated.
 690:src/xeq.c     **** 		return 4;
 4538              		.loc 1 690 2 view .LVU1220
 690:src/xeq.c     **** 		return 4;
ARM GAS  /tmp/ccK8IvWa.s 			page 196


 4539              		.loc 1 690 6 is_stmt 0 view .LVU1221
 4540 0000 0A4B     		ldr	r3, .L376
 4541 0002 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 690:src/xeq.c     **** 		return 4;
 4542              		.loc 1 690 5 view .LVU1222
 4543 0006 1207     		lsls	r2, r2, #28
 4544 0008 0ED5     		bpl	.L372
 4545              	.LBB1684:
 4546              	.LBI1684:
 181:src/xeq.c     **** 	return isXROM(state_pc());
 4547              		.loc 1 181 5 is_stmt 1 view .LVU1223
 4548              	.LBB1685:
 182:src/xeq.c     **** }
 4549              		.loc 1 182 2 view .LVU1224
 182:src/xeq.c     **** }
 4550              		.loc 1 182 9 is_stmt 0 view .LVU1225
 4551 000a B3F8E037 		ldrh	r3, [r3, #2016]
 4552              	.LBE1685:
 4553              	.LBE1684:
 690:src/xeq.c     **** 		return 4;
 4554              		.loc 1 690 27 view .LVU1226
 4555 000e 9B0B     		lsrs	r3, r3, #14
 4556 0010 032B     		cmp	r3, #3
 4557 0012 01D0     		beq	.L375
 692:src/xeq.c     **** }
 4558              		.loc 1 692 9 view .LVU1227
 4559 0014 0820     		movs	r0, #8
 693:src/xeq.c     **** 
 4560              		.loc 1 693 1 view .LVU1228
 4561 0016 7047     		bx	lr
 4562              	.L375:
 690:src/xeq.c     **** 		return 4;
 4563              		.loc 1 690 44 discriminator 2 view .LVU1229
 4564 0018 054B     		ldr	r3, .L376+4
 690:src/xeq.c     **** 		return 4;
 4565              		.loc 1 690 41 discriminator 2 view .LVU1230
 4566 001a 93F90130 		ldrsb	r3, [r3, #1]
 4567 001e 002B     		cmp	r3, #0
 691:src/xeq.c     **** 	return 8;
 4568              		.loc 1 691 10 discriminator 2 view .LVU1231
 4569 0020 B4BF     		ite	lt
 4570 0022 0820     		movlt	r0, #8
 4571 0024 0420     		movge	r0, #4
 4572 0026 7047     		bx	lr
 4573              	.L372:
 691:src/xeq.c     **** 	return 8;
 4574              		.loc 1 691 10 view .LVU1232
 4575 0028 0420     		movs	r0, #4
 4576 002a 7047     		bx	lr
 4577              	.L377:
 4578              		.align	2
 4579              	.L376:
 4580 002c 00000000 		.word	PersistentRam
 4581 0030 00000000 		.word	XromParams
 4582              		.cfi_endproc
 4583              	.LFE41:
 4585              		.section	.text.copyreg,"ax",%progbits
ARM GAS  /tmp/ccK8IvWa.s 			page 197


 4586              		.align	1
 4587              		.p2align 2,,3
 4588              		.global	copyreg
 4589              		.syntax unified
 4590              		.thumb
 4591              		.thumb_func
 4592              		.fpu fpv4-sp-d16
 4594              	copyreg:
 4595              	.LVL352:
 4596              	.LFB44:
 703:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 4597              		.loc 1 703 46 is_stmt 1 view -0
 4598              		.cfi_startproc
 4599              		@ args = 0, pretend = 0, frame = 0
 4600              		@ frame_needed = 0, uses_anonymous_args = 0
 4601              		@ link register save eliminated.
 704:src/xeq.c     **** }
 4602              		.loc 1 704 2 view .LVU1234
 4603              	.LBB1686:
 4604              	.LBI1686:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4605              		.loc 1 918 5 view .LVU1235
 4606              	.LBB1687:
 919:src/xeq.c     **** }
 4607              		.loc 1 919 2 view .LVU1236
 919:src/xeq.c     **** }
 4608              		.loc 1 919 24 is_stmt 0 view .LVU1237
 4609 0000 064B     		ldr	r3, .L381
 4610 0002 B3F8E827 		ldrh	r2, [r3, #2024]
 4611 0006 44F20103 		movw	r3, #16385
 4612              	.LBE1687:
 4613              	.LBE1686:
 704:src/xeq.c     **** }
 4614              		.loc 1 704 2 view .LVU1238
 4615 000a 1340     		ands	r3, r3, r2
 4616 000c B3F5804F 		cmp	r3, #16384
 4617 0010 0CBF     		ite	eq
 4618 0012 1022     		moveq	r2, #16
 4619 0014 0822     		movne	r2, #8
 4620 0016 FFF7FEBF 		b	xcopy
 4621              	.LVL353:
 4622              	.L382:
 704:src/xeq.c     **** }
 4623              		.loc 1 704 2 view .LVU1239
 4624 001a 00BF     		.align	2
 4625              	.L381:
 4626 001c 00000000 		.word	PersistentRam
 4627              		.cfi_endproc
 4628              	.LFE44:
 4630              		.section	.text.set_lift,"ax",%progbits
 4631              		.align	1
 4632              		.p2align 2,,3
 4633              		.global	set_lift
 4634              		.syntax unified
 4635              		.thumb
 4636              		.thumb_func
 4637              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccK8IvWa.s 			page 198


 4639              	set_lift:
 4640              	.LFB50:
 734:src/xeq.c     ****     State2.state_lift = 1;
 4641              		.loc 1 734 21 is_stmt 1 view -0
 4642              		.cfi_startproc
 4643              		@ args = 0, pretend = 0, frame = 0
 4644              		@ frame_needed = 0, uses_anonymous_args = 0
 4645              		@ link register save eliminated.
 735:src/xeq.c     **** }
 4646              		.loc 1 735 5 view .LVU1241
 735:src/xeq.c     **** }
 4647              		.loc 1 735 23 is_stmt 0 view .LVU1242
 4648 0000 024A     		ldr	r2, .L384
 4649 0002 D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 4650 0004 43F04003 		orr	r3, r3, #64
 4651 0008 D375     		strb	r3, [r2, #23]
 736:src/xeq.c     **** 
 4652              		.loc 1 736 1 view .LVU1243
 4653 000a 7047     		bx	lr
 4654              	.L385:
 4655              		.align	2
 4656              	.L384:
 4657 000c 00000000 		.word	StateWhileOn
 4658              		.cfi_endproc
 4659              	.LFE50:
 4661              		.section	.text.is_dblmode,"ax",%progbits
 4662              		.align	1
 4663              		.p2align 2,,3
 4664              		.global	is_dblmode
 4665              		.syntax unified
 4666              		.thumb
 4667              		.thumb_func
 4668              		.fpu fpv4-sp-d16
 4670              	is_dblmode:
 4671              	.LFB77:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4672              		.loc 1 918 22 is_stmt 1 view -0
 4673              		.cfi_startproc
 4674              		@ args = 0, pretend = 0, frame = 0
 4675              		@ frame_needed = 0, uses_anonymous_args = 0
 4676              		@ link register save eliminated.
 919:src/xeq.c     **** }
 4677              		.loc 1 919 2 view .LVU1245
 919:src/xeq.c     **** }
 4678              		.loc 1 919 24 is_stmt 0 view .LVU1246
 4679 0000 054B     		ldr	r3, .L387
 4680 0002 B3F8E837 		ldrh	r3, [r3, #2024]
 4681 0006 44F20100 		movw	r0, #16385
 4682 000a 1840     		ands	r0, r0, r3
 920:src/xeq.c     **** 
 4683              		.loc 1 920 1 view .LVU1247
 4684 000c A0F58040 		sub	r0, r0, #16384
 4685 0010 B0FA80F0 		clz	r0, r0
 4686 0014 4009     		lsrs	r0, r0, #5
 4687 0016 7047     		bx	lr
 4688              	.L388:
 4689              		.align	2
ARM GAS  /tmp/ccK8IvWa.s 			page 199


 4690              	.L387:
 4691 0018 00000000 		.word	PersistentRam
 4692              		.cfi_endproc
 4693              	.LFE77:
 4695              		.section	.text.is_usrdblmode,"ax",%progbits
 4696              		.align	1
 4697              		.p2align 2,,3
 4698              		.global	is_usrdblmode
 4699              		.syntax unified
 4700              		.thumb
 4701              		.thumb_func
 4702              		.fpu fpv4-sp-d16
 4704              	is_usrdblmode:
 4705              	.LFB78:
 922:src/xeq.c     **** 	if (XromFlags.xIN)
 4706              		.loc 1 922 25 is_stmt 1 view -0
 4707              		.cfi_startproc
 4708              		@ args = 0, pretend = 0, frame = 0
 4709              		@ frame_needed = 0, uses_anonymous_args = 0
 4710              		@ link register save eliminated.
 923:src/xeq.c     **** 		return XromFlags.mode_double;
 4711              		.loc 1 923 2 view .LVU1249
 923:src/xeq.c     **** 		return XromFlags.mode_double;
 4712              		.loc 1 923 6 is_stmt 0 view .LVU1250
 4713 0000 0A4B     		ldr	r3, .L393
 923:src/xeq.c     **** 		return XromFlags.mode_double;
 4714              		.loc 1 923 5 view .LVU1251
 4715 0002 93F90120 		ldrsb	r2, [r3, #1]
 4716 0006 002A     		cmp	r2, #0
 4717 0008 0BDB     		blt	.L392
 925:src/xeq.c     **** }
 4718              		.loc 1 925 2 is_stmt 1 view .LVU1252
 4719              	.LBB1688:
 4720              	.LBI1688:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4721              		.loc 1 918 5 view .LVU1253
 4722              	.LBB1689:
 919:src/xeq.c     **** }
 4723              		.loc 1 919 2 view .LVU1254
 919:src/xeq.c     **** }
 4724              		.loc 1 919 24 is_stmt 0 view .LVU1255
 4725 000a 094B     		ldr	r3, .L393+4
 4726 000c B3F8E837 		ldrh	r3, [r3, #2024]
 4727 0010 44F20100 		movw	r0, #16385
 4728 0014 1840     		ands	r0, r0, r3
 4729 0016 A0F58040 		sub	r0, r0, #16384
 4730 001a B0FA80F0 		clz	r0, r0
 4731 001e 4009     		lsrs	r0, r0, #5
 4732              	.LBE1689:
 4733              	.LBE1688:
 926:src/xeq.c     **** 
 4734              		.loc 1 926 1 view .LVU1256
 4735 0020 7047     		bx	lr
 4736              	.L392:
 924:src/xeq.c     **** 	return is_dblmode();
 4737              		.loc 1 924 3 is_stmt 1 view .LVU1257
 924:src/xeq.c     **** 	return is_dblmode();
ARM GAS  /tmp/ccK8IvWa.s 			page 200


 4738              		.loc 1 924 19 is_stmt 0 view .LVU1258
 4739 0022 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 4740 0024 C0F3C000 		ubfx	r0, r0, #3, #1
 4741 0028 7047     		bx	lr
 4742              	.L394:
 4743 002a 00BF     		.align	2
 4744              	.L393:
 4745 002c 00000000 		.word	XromParams
 4746 0030 00000000 		.word	PersistentRam
 4747              		.cfi_endproc
 4748              	.LFE78:
 4750              		.section	.text.s_to_i,"ax",%progbits
 4751              		.align	1
 4752              		.p2align 2,,3
 4753              		.global	s_to_i
 4754              		.syntax unified
 4755              		.thumb
 4756              		.thumb_func
 4757              		.fpu fpv4-sp-d16
 4759              	s_to_i:
 4760              	.LVL354:
 4761              	.LFB79:
 930:src/xeq.c     **** 	int x = 0;
 4762              		.loc 1 930 27 is_stmt 1 view -0
 4763              		.cfi_startproc
 4764              		@ args = 0, pretend = 0, frame = 0
 4765              		@ frame_needed = 0, uses_anonymous_args = 0
 4766              		@ link register save eliminated.
 931:src/xeq.c     **** 	int neg;
 4767              		.loc 1 931 2 view .LVU1260
 932:src/xeq.c     **** 
 4768              		.loc 1 932 2 view .LVU1261
 934:src/xeq.c     **** 		s++;
 4769              		.loc 1 934 2 view .LVU1262
 930:src/xeq.c     **** 	int x = 0;
 4770              		.loc 1 930 27 is_stmt 0 view .LVU1263
 4771 0000 10B4     		push	{r4}
 4772              		.cfi_def_cfa_offset 4
 4773              		.cfi_offset 4, -4
 934:src/xeq.c     **** 		s++;
 4774              		.loc 1 934 6 view .LVU1264
 4775 0002 0178     		ldrb	r1, [r0]	@ zero_extendqisi2
 934:src/xeq.c     **** 		s++;
 4776              		.loc 1 934 5 view .LVU1265
 4777 0004 2D29     		cmp	r1, #45
 4778 0006 26D0     		beq	.L411
 938:src/xeq.c     **** 			s++;
 4779              		.loc 1 938 3 is_stmt 1 view .LVU1266
 938:src/xeq.c     **** 			s++;
 4780              		.loc 1 938 6 is_stmt 0 view .LVU1267
 4781 0008 2B29     		cmp	r1, #43
 4782 000a 18D0     		beq	.L399
 4783              	.LVL355:
 943:src/xeq.c     **** 		const char c = *s++;
 4784              		.loc 1 943 2 is_stmt 1 view .LVU1268
 4785              	.LBB1690:
 944:src/xeq.c     **** 
ARM GAS  /tmp/ccK8IvWa.s 			page 201


 4786              		.loc 1 944 3 view .LVU1269
 946:src/xeq.c     **** 			break;
 4787              		.loc 1 946 15 is_stmt 0 view .LVU1270
 4788 000c A1F13003 		sub	r3, r1, #48
 946:src/xeq.c     **** 			break;
 4789              		.loc 1 946 6 view .LVU1271
 4790 0010 D9B2     		uxtb	r1, r3
 4791 0012 0929     		cmp	r1, #9
 944:src/xeq.c     **** 
 4792              		.loc 1 944 20 view .LVU1272
 4793 0014 00F10102 		add	r2, r0, #1
 4794              	.LVL356:
 946:src/xeq.c     **** 			break;
 4795              		.loc 1 946 3 is_stmt 1 view .LVU1273
 946:src/xeq.c     **** 			break;
 4796              		.loc 1 946 6 is_stmt 0 view .LVU1274
 4797 0018 19D8     		bhi	.L404
 4798              	.LVL357:
 4799              	.L410:
 946:src/xeq.c     **** 			break;
 4800              		.loc 1 946 6 view .LVU1275
 4801              	.LBE1690:
 940:src/xeq.c     **** 	}
 4802              		.loc 1 940 7 view .LVU1276
 4803 001a 0024     		movs	r4, #0
 4804              	.LVL358:
 4805              	.L398:
 940:src/xeq.c     **** 	}
 4806              		.loc 1 940 7 view .LVU1277
 4807 001c 0020     		movs	r0, #0
 4808              	.LVL359:
 4809              	.L401:
 4810              	.LBB1691:
 948:src/xeq.c     **** 	}
 4811              		.loc 1 948 3 is_stmt 1 view .LVU1278
 944:src/xeq.c     **** 
 4812              		.loc 1 944 14 is_stmt 0 view .LVU1279
 4813 001e 12F8011B 		ldrb	r1, [r2], #1	@ zero_extendqisi2
 4814              	.LVL360:
 948:src/xeq.c     **** 	}
 4815              		.loc 1 948 10 view .LVU1280
 4816 0022 00EB8000 		add	r0, r0, r0, lsl #2
 4817              	.LVL361:
 948:src/xeq.c     **** 	}
 4818              		.loc 1 948 5 view .LVU1281
 4819 0026 03EB4000 		add	r0, r3, r0, lsl #1
 4820              	.LVL362:
 948:src/xeq.c     **** 	}
 4821              		.loc 1 948 5 view .LVU1282
 4822              	.LBE1691:
 943:src/xeq.c     **** 		const char c = *s++;
 4823              		.loc 1 943 8 is_stmt 1 view .LVU1283
 943:src/xeq.c     **** 		const char c = *s++;
 4824              		.loc 1 943 2 view .LVU1284
 4825              	.LBB1692:
 944:src/xeq.c     **** 
 4826              		.loc 1 944 3 view .LVU1285
ARM GAS  /tmp/ccK8IvWa.s 			page 202


 946:src/xeq.c     **** 			break;
 4827              		.loc 1 946 3 view .LVU1286
 946:src/xeq.c     **** 			break;
 4828              		.loc 1 946 15 is_stmt 0 view .LVU1287
 4829 002a A1F13003 		sub	r3, r1, #48
 946:src/xeq.c     **** 			break;
 4830              		.loc 1 946 6 view .LVU1288
 4831 002e D9B2     		uxtb	r1, r3
 4832 0030 0929     		cmp	r1, #9
 4833 0032 F4D9     		bls	.L401
 4834              	.LBE1692:
 950:src/xeq.c     **** 		return -x;
 4835              		.loc 1 950 2 is_stmt 1 view .LVU1289
 950:src/xeq.c     **** 		return -x;
 4836              		.loc 1 950 5 is_stmt 0 view .LVU1290
 4837 0034 04B1     		cbz	r4, .L395
 4838 0036 4042     		rsbs	r0, r0, #0
 4839              	.LVL363:
 4840              	.L395:
 953:src/xeq.c     **** 
 4841              		.loc 1 953 1 view .LVU1291
 4842 0038 5DF8044B 		ldr	r4, [sp], #4
 4843              		.cfi_remember_state
 4844              		.cfi_restore 4
 4845              		.cfi_def_cfa_offset 0
 4846 003c 7047     		bx	lr
 4847              	.LVL364:
 4848              	.L399:
 4849              		.cfi_restore_state
 939:src/xeq.c     **** 		neg = 0;
 4850              		.loc 1 939 4 is_stmt 1 view .LVU1292
 943:src/xeq.c     **** 		const char c = *s++;
 4851              		.loc 1 943 2 view .LVU1293
 4852              	.LBB1693:
 944:src/xeq.c     **** 
 4853              		.loc 1 944 3 view .LVU1294
 944:src/xeq.c     **** 
 4854              		.loc 1 944 14 is_stmt 0 view .LVU1295
 4855 003e 4178     		ldrb	r1, [r0, #1]	@ zero_extendqisi2
 946:src/xeq.c     **** 			break;
 4856              		.loc 1 946 15 view .LVU1296
 4857 0040 A1F13003 		sub	r3, r1, #48
 946:src/xeq.c     **** 			break;
 4858              		.loc 1 946 6 view .LVU1297
 4859 0044 D9B2     		uxtb	r1, r3
 4860 0046 0929     		cmp	r1, #9
 944:src/xeq.c     **** 
 4861              		.loc 1 944 20 view .LVU1298
 4862 0048 00F10202 		add	r2, r0, #2
 4863              	.LVL365:
 946:src/xeq.c     **** 			break;
 4864              		.loc 1 946 3 is_stmt 1 view .LVU1299
 946:src/xeq.c     **** 			break;
 4865              		.loc 1 946 6 is_stmt 0 view .LVU1300
 4866 004c E5D9     		bls	.L410
 4867              	.LVL366:
 4868              	.L404:
ARM GAS  /tmp/ccK8IvWa.s 			page 203


 946:src/xeq.c     **** 			break;
 4869              		.loc 1 946 6 view .LVU1301
 4870 004e 0020     		movs	r0, #0
 4871              	.LBE1693:
 953:src/xeq.c     **** 
 4872              		.loc 1 953 1 view .LVU1302
 4873 0050 5DF8044B 		ldr	r4, [sp], #4
 4874              		.cfi_remember_state
 4875              		.cfi_restore 4
 4876              		.cfi_def_cfa_offset 0
 4877 0054 7047     		bx	lr
 4878              	.LVL367:
 4879              	.L411:
 4880              		.cfi_restore_state
 935:src/xeq.c     **** 		neg = 1;
 4881              		.loc 1 935 3 is_stmt 1 view .LVU1303
 936:src/xeq.c     **** 	} else {
 4882              		.loc 1 936 3 view .LVU1304
 943:src/xeq.c     **** 		const char c = *s++;
 4883              		.loc 1 943 2 view .LVU1305
 4884              	.LBB1694:
 944:src/xeq.c     **** 
 4885              		.loc 1 944 3 view .LVU1306
 944:src/xeq.c     **** 
 4886              		.loc 1 944 14 is_stmt 0 view .LVU1307
 4887 0056 4178     		ldrb	r1, [r0, #1]	@ zero_extendqisi2
 946:src/xeq.c     **** 			break;
 4888              		.loc 1 946 15 view .LVU1308
 4889 0058 A1F13003 		sub	r3, r1, #48
 946:src/xeq.c     **** 			break;
 4890              		.loc 1 946 6 view .LVU1309
 4891 005c D9B2     		uxtb	r1, r3
 4892 005e 0929     		cmp	r1, #9
 944:src/xeq.c     **** 
 4893              		.loc 1 944 20 view .LVU1310
 4894 0060 00F10202 		add	r2, r0, #2
 4895              	.LVL368:
 946:src/xeq.c     **** 			break;
 4896              		.loc 1 946 3 is_stmt 1 view .LVU1311
 946:src/xeq.c     **** 			break;
 4897              		.loc 1 946 6 is_stmt 0 view .LVU1312
 4898 0064 F3D8     		bhi	.L404
 4899              	.LBE1694:
 936:src/xeq.c     **** 	} else {
 4900              		.loc 1 936 7 view .LVU1313
 4901 0066 0124     		movs	r4, #1
 4902 0068 D8E7     		b	.L398
 4903              		.cfi_endproc
 4904              	.LFE79:
 4906 006a 00BF     		.section	.text.digit,"ax",%progbits
 4907              		.align	1
 4908              		.p2align 2,,3
 4909              		.syntax unified
 4910              		.thumb
 4911              		.thumb_func
 4912              		.fpu fpv4-sp-d16
 4914              	digit:
ARM GAS  /tmp/ccK8IvWa.s 			page 204


 4915              	.LVL369:
 4916              	.LFB206:
3577:src/xeq.c     **** 	const int intm = is_intmode();
 4917              		.loc 1 3577 35 is_stmt 1 view -0
 4918              		.cfi_startproc
 4919              		@ args = 0, pretend = 0, frame = 0
 4920              		@ frame_needed = 0, uses_anonymous_args = 0
3578:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 4921              		.loc 1 3578 2 view .LVU1315
3577:src/xeq.c     **** 	const int intm = is_intmode();
 4922              		.loc 1 3577 35 is_stmt 0 view .LVU1316
 4923 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4924              		.cfi_def_cfa_offset 24
 4925              		.cfi_offset 3, -24
 4926              		.cfi_offset 4, -20
 4927              		.cfi_offset 5, -16
 4928              		.cfi_offset 6, -12
 4929              		.cfi_offset 7, -8
 4930              		.cfi_offset 14, -4
3581:src/xeq.c     **** 		lim++;
 4931              		.loc 1 3581 13 view .LVU1317
 4932 0002 614C     		ldr	r4, .L465
3578:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 4933              		.loc 1 3578 19 view .LVU1318
 4934 0004 614E     		ldr	r6, .L465+4
3581:src/xeq.c     **** 		lim++;
 4935              		.loc 1 3581 13 view .LVU1319
 4936 0006 94F82020 		ldrb	r2, [r4, #32]	@ zero_extendqisi2
3578:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 4937              		.loc 1 3578 19 view .LVU1320
 4938 000a 96F8E837 		ldrb	r3, [r6, #2024]	@ zero_extendqisi2
 4939              	.LVL370:
3579:src/xeq.c     **** 
 4940              		.loc 1 3579 2 is_stmt 1 view .LVU1321
3581:src/xeq.c     **** 		lim++;
 4941              		.loc 1 3581 2 view .LVU1322
3582:src/xeq.c     **** 	if (intm) {
 4942              		.loc 1 3582 6 is_stmt 0 view .LVU1323
 4943 000e 2D2A     		cmp	r2, #45
 4944 0010 14BF     		ite	ne
 4945 0012 0C27     		movne	r7, #12
 4946 0014 0D27     		moveq	r7, #13
 4947              	.LVL371:
3583:src/xeq.c     **** 		if (c >= int_base()) {
 4948              		.loc 1 3583 2 is_stmt 1 view .LVU1324
3583:src/xeq.c     **** 		if (c >= int_base()) {
 4949              		.loc 1 3583 5 is_stmt 0 view .LVU1325
 4950 0016 DB07     		lsls	r3, r3, #31
 4951              	.LVL372:
3577:src/xeq.c     **** 	const int intm = is_intmode();
 4952              		.loc 1 3577 35 view .LVU1326
 4953 0018 0546     		mov	r5, r0
3583:src/xeq.c     **** 		if (c >= int_base()) {
 4954              		.loc 1 3583 5 view .LVU1327
 4955 001a 72D4     		bmi	.L461
3589:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 4956              		.loc 1 3589 3 is_stmt 1 view .LVU1328
ARM GAS  /tmp/ccK8IvWa.s 			page 205


3589:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 4957              		.loc 1 3589 6 is_stmt 0 view .LVU1329
 4958 001c 0928     		cmp	r0, #9
 4959 001e 00F28580 		bhi	.L416
3594:src/xeq.c     **** 			lim = CMDLINELEN;
 4960              		.loc 1 3594 3 is_stmt 1 view .LVU1330
3594:src/xeq.c     **** 			lim = CMDLINELEN;
 4961              		.loc 1 3594 7 is_stmt 0 view .LVU1331
 4962 0022 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
3594:src/xeq.c     **** 			lim = CMDLINELEN;
 4963              		.loc 1 3594 6 view .LVU1332
 4964 0024 002B     		cmp	r3, #0
 4965 0026 5ED0     		beq	.L417
3595:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 4966              		.loc 1 3595 4 is_stmt 1 view .LVU1333
 4967              	.LVL373:
3597:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
 4968              		.loc 1 3597 4 view .LVU1334
3597:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
 4969              		.loc 1 3597 8 is_stmt 0 view .LVU1335
 4970 0028 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
3597:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
 4971              		.loc 1 3597 7 view .LVU1336
 4972 002a 122A     		cmp	r2, #18
 4973 002c 40F29280 		bls	.L442
 4974              	.LBB1705:
3598:src/xeq.c     **** 
 4975              		.loc 1 3598 5 is_stmt 1 view .LVU1337
3600:src/xeq.c     **** 					p++;
 4976              		.loc 1 3600 9 is_stmt 0 view .LVU1338
 4977 0030 E118     		adds	r1, r4, r3
3598:src/xeq.c     **** 
 4978              		.loc 1 3598 11 view .LVU1339
 4979 0032 2133     		adds	r3, r3, #33
3600:src/xeq.c     **** 					p++;
 4980              		.loc 1 3600 8 view .LVU1340
 4981 0034 91F82110 		ldrb	r1, [r1, #33]	@ zero_extendqisi2
3598:src/xeq.c     **** 
 4982              		.loc 1 3598 11 view .LVU1341
 4983 0038 2344     		add	r3, r3, r4
 4984              	.LVL374:
3600:src/xeq.c     **** 					p++;
 4985              		.loc 1 3600 5 is_stmt 1 view .LVU1342
3600:src/xeq.c     **** 					p++;
 4986              		.loc 1 3600 8 is_stmt 0 view .LVU1343
 4987 003a 2D29     		cmp	r1, #45
3601:src/xeq.c     **** 				while (p < &Cmdline[CMDLINELEN]) {
 4988              		.loc 1 3601 6 is_stmt 1 view .LVU1344
3602:src/xeq.c     **** 					p[0] = p[1];
 4989              		.loc 1 3602 11 is_stmt 0 view .LVU1345
 4990 003c 5449     		ldr	r1, .L465+8
3601:src/xeq.c     **** 				while (p < &Cmdline[CMDLINELEN]) {
 4991              		.loc 1 3601 7 view .LVU1346
 4992 003e 08BF     		it	eq
 4993 0040 0133     		addeq	r3, r3, #1
 4994              	.LVL375:
3602:src/xeq.c     **** 					p[0] = p[1];
ARM GAS  /tmp/ccK8IvWa.s 			page 206


 4995              		.loc 1 3602 11 is_stmt 1 view .LVU1347
 4996 0042 8B42     		cmp	r3, r1
 4997 0044 05D2     		bcs	.L420
 4998              	.L421:
3603:src/xeq.c     **** 					p++;
 4999              		.loc 1 3603 6 view .LVU1348
3603:src/xeq.c     **** 					p++;
 5000              		.loc 1 3603 11 is_stmt 0 view .LVU1349
 5001 0046 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 5002 0048 03F8012B 		strb	r2, [r3], #1
 5003              	.LVL376:
3604:src/xeq.c     **** 				}
 5004              		.loc 1 3604 6 is_stmt 1 view .LVU1350
3602:src/xeq.c     **** 					p[0] = p[1];
 5005              		.loc 1 3602 11 view .LVU1351
 5006 004c 8B42     		cmp	r3, r1
 5007 004e FAD1     		bne	.L421
 5008 0050 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
 5009              	.L420:
3606:src/xeq.c     **** 			}
 5010              		.loc 1 3606 5 view .LVU1352
3606:src/xeq.c     **** 			}
 5011              		.loc 1 3606 18 is_stmt 0 view .LVU1353
 5012 0052 013A     		subs	r2, r2, #1
 5013 0054 D2B2     		uxtb	r2, r2
 5014              	.LBE1705:
3595:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5015              		.loc 1 3595 8 view .LVU1354
 5016 0056 1323     		movs	r3, #19
 5017              	.LVL377:
3626:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5018              		.loc 1 3626 2 is_stmt 1 view .LVU1355
3626:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5019              		.loc 1 3626 5 is_stmt 0 view .LVU1356
 5020 0058 9342     		cmp	r3, r2
 5021              	.LBB1706:
3606:src/xeq.c     **** 			}
 5022              		.loc 1 3606 18 view .LVU1357
 5023 005a 2277     		strb	r2, [r4, #28]
 5024              	.LBE1706:
3626:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5025              		.loc 1 3626 5 view .LVU1358
 5026 005c 4CDD     		ble	.L439
 5027              	.LVL378:
 5028              	.L425:
3638:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5029              		.loc 1 3638 3 is_stmt 1 view .LVU1359
3638:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5030              		.loc 1 3638 6 is_stmt 0 view .LVU1360
 5031 005e 002D     		cmp	r5, #0
 5032 0060 69D1     		bne	.L427
3638:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5033              		.loc 1 3638 17 discriminator 1 view .LVU1361
 5034 0062 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
3638:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5035              		.loc 1 3638 14 discriminator 1 view .LVU1362
 5036 0064 002B     		cmp	r3, #0
ARM GAS  /tmp/ccK8IvWa.s 			page 207


 5037 0066 7AD0     		beq	.L428
3639:src/xeq.c     **** 				return;
 5038              		.loc 1 3639 4 is_stmt 1 view .LVU1363
3639:src/xeq.c     **** 				return;
 5039              		.loc 1 3639 15 is_stmt 0 view .LVU1364
 5040 0068 A018     		adds	r0, r4, r2
 5041 006a C17F     		ldrb	r1, [r0, #31]	@ zero_extendqisi2
3639:src/xeq.c     **** 				return;
 5042              		.loc 1 3639 7 view .LVU1365
 5043 006c 4529     		cmp	r1, #69
 5044 006e 5CD0     		beq	.L412
3645:src/xeq.c     **** 				return;
 5045              		.loc 1 3645 4 is_stmt 1 view .LVU1366
3645:src/xeq.c     **** 				return;
 5046              		.loc 1 3645 7 is_stmt 0 view .LVU1367
 5047 0070 2D29     		cmp	r1, #45
 5048 0072 5AD0     		beq	.L412
3650:src/xeq.c     **** 
 5049              		.loc 1 3650 3 is_stmt 1 view .LVU1368
 5050              	.LVL379:
 5051              	.LBB1707:
 5052              	.LBI1707:
2393:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5053              		.loc 1 2393 13 view .LVU1369
 5054              	.LBB1708:
2394:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5055              		.loc 1 2394 2 view .LVU1370
2394:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5056              		.loc 1 2394 23 is_stmt 0 view .LVU1371
 5057 0074 0132     		adds	r2, r2, #1
 5058 0076 D2B2     		uxtb	r2, r2
2395:src/xeq.c     **** }
 5059              		.loc 1 2395 25 view .LVU1372
 5060 0078 A118     		adds	r1, r4, r2
2394:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5061              		.loc 1 2394 27 view .LVU1373
 5062 007a 3027     		movs	r7, #48
 5063 007c 80F82070 		strb	r7, [r0, #32]
2395:src/xeq.c     **** }
 5064              		.loc 1 2395 2 is_stmt 1 view .LVU1374
2394:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5065              		.loc 1 2394 23 is_stmt 0 view .LVU1375
 5066 0080 2277     		strb	r2, [r4, #28]
2395:src/xeq.c     **** }
 5067              		.loc 1 2395 25 view .LVU1376
 5068 0082 81F82050 		strb	r5, [r1, #32]
 5069              	.LVL380:
2395:src/xeq.c     **** }
 5070              		.loc 1 2395 25 view .LVU1377
 5071              	.LBE1708:
 5072              	.LBE1707:
3652:src/xeq.c     **** 			exponent_adjusted(1);
 5073              		.loc 1 3652 3 is_stmt 1 view .LVU1378
 5074              	.L440:
3653:src/xeq.c     **** 	}
 5075              		.loc 1 3653 4 view .LVU1379
 5076              	.LBB1713:
ARM GAS  /tmp/ccK8IvWa.s 			page 208


 5077              	.LBI1713:
2402:src/xeq.c     **** {
 5078              		.loc 1 2402 13 view .LVU1380
 5079              	.LBB1714:
2404:src/xeq.c     **** 	int i;
 5080              		.loc 1 2404 2 view .LVU1381
 5081              	.LBB1715:
 5082              	.LBI1715:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 5083              		.loc 1 918 5 view .LVU1382
 5084              	.LBB1716:
 919:src/xeq.c     **** }
 5085              		.loc 1 919 2 view .LVU1383
 919:src/xeq.c     **** }
 5086              		.loc 1 919 2 is_stmt 0 view .LVU1384
 5087              	.LBE1716:
 5088              	.LBE1715:
2405:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DC == -1
 5089              		.loc 1 2405 2 is_stmt 1 view .LVU1385
2409:src/xeq.c     **** #endif
 5090              		.loc 1 2409 2 view .LVU1386
2414:src/xeq.c     **** #endif
 5091              		.loc 1 2414 2 view .LVU1387
2419:src/xeq.c     **** #endif
 5092              		.loc 1 2419 2 view .LVU1388
2424:src/xeq.c     **** #endif
 5093              		.loc 1 2424 2 view .LVU1389
2429:src/xeq.c     **** #endif
 5094              		.loc 1 2429 2 view .LVU1390
2434:src/xeq.c     **** #endif
 5095              		.loc 1 2434 2 view .LVU1391
2439:src/xeq.c     **** #endif
 5096              		.loc 1 2439 2 view .LVU1392
2444:src/xeq.c     **** #endif
 5097              		.loc 1 2444 2 view .LVU1393
2449:src/xeq.c     **** #endif
 5098              		.loc 1 2449 2 view .LVU1394
2454:src/xeq.c     **** #endif
 5099              		.loc 1 2454 2 view .LVU1395
2456:src/xeq.c     **** 	const int dp_neg_lim_dc = DP_NEG_EXP_ENTRY_LIMIT_DC;
 5100              		.loc 1 2456 2 view .LVU1396
2457:src/xeq.c     **** 	const int dp_neg_type_ds = DP_NEG_EXP_ENTRY_TYPE_DS;
 5101              		.loc 1 2457 2 view .LVU1397
2458:src/xeq.c     **** 	const int dp_neg_lim_ds = DP_NEG_EXP_ENTRY_LIMIT_DS;
 5102              		.loc 1 2458 2 view .LVU1398
2459:src/xeq.c     **** 	const int dp_pos_type_dc = DP_POS_EXP_ENTRY_TYPE_DC;
 5103              		.loc 1 2459 2 view .LVU1399
2460:src/xeq.c     **** 	const int dp_pos_lim_dc = DP_POS_EXP_ENTRY_LIMIT_DC;
 5104              		.loc 1 2460 2 view .LVU1400
2461:src/xeq.c     **** 	const int dp_pos_type_ds = DP_POS_EXP_ENTRY_TYPE_DS;
 5105              		.loc 1 2461 2 view .LVU1401
2462:src/xeq.c     **** 	const int dp_pos_lim_ds = DP_POS_EXP_ENTRY_LIMIT_DS;
 5106              		.loc 1 2462 2 view .LVU1402
2463:src/xeq.c     **** 	const int dp_exp_chs_dc = DP_EXP_ENTRY_CHS_DC;
 5107              		.loc 1 2463 2 view .LVU1403
2464:src/xeq.c     **** 	const int dp_exp_chs_ds = DP_EXP_ENTRY_CHS_DS;
 5108              		.loc 1 2464 2 view .LVU1404
ARM GAS  /tmp/ccK8IvWa.s 			page 209


2465:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 5109              		.loc 1 2465 2 view .LVU1405
2470:src/xeq.c     **** 	char *p = &Cmdline[CmdLineEex + 1];
 5110              		.loc 1 2470 2 view .LVU1406
2471:src/xeq.c     **** #endif
 5111              		.loc 1 2471 2 view .LVU1407
 5112              	.LBB1719:
 5113              	.LBB1717:
 919:src/xeq.c     **** }
 5114              		.loc 1 919 24 is_stmt 0 view .LVU1408
 5115 0086 B6F8E817 		ldrh	r1, [r6, #2024]
 5116              	.LBE1717:
 5117              	.LBE1719:
2471:src/xeq.c     **** #endif
 5118              		.loc 1 2471 8 view .LVU1409
 5119 008a 03F12105 		add	r5, r3, #33
 5120              	.LBB1720:
 5121              	.LBB1718:
 919:src/xeq.c     **** }
 5122              		.loc 1 919 24 view .LVU1410
 5123 008e 44F20102 		movw	r2, #16385
 5124              	.LBE1718:
 5125              	.LBE1720:
2471:src/xeq.c     **** #endif
 5126              		.loc 1 2471 32 view .LVU1411
 5127 0092 0133     		adds	r3, r3, #1
2495:src/xeq.c     **** 		emax = 999;
 5128              		.loc 1 2495 5 view .LVU1412
 5129 0094 0A40     		ands	r2, r2, r1
2933:src/xeq.c     **** 		p++;
 5130              		.loc 1 2933 6 view .LVU1413
 5131 0096 2344     		add	r3, r3, r4
2495:src/xeq.c     **** 		emax = 999;
 5132              		.loc 1 2495 5 view .LVU1414
 5133 0098 B2F5804F 		cmp	r2, #16384
2933:src/xeq.c     **** 		p++;
 5134              		.loc 1 2933 5 view .LVU1415
 5135 009c 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
2471:src/xeq.c     **** #endif
 5136              		.loc 1 2471 8 view .LVU1416
 5137 00a0 2544     		add	r5, r5, r4
 5138              	.LVL381:
2487:src/xeq.c     **** #endif
 5139              		.loc 1 2487 2 is_stmt 1 view .LVU1417
2492:src/xeq.c     **** 
 5140              		.loc 1 2492 2 view .LVU1418
2495:src/xeq.c     **** 		emax = 999;
 5141              		.loc 1 2495 2 view .LVU1419
2495:src/xeq.c     **** 		emax = 999;
 5142              		.loc 1 2495 5 is_stmt 0 view .LVU1420
 5143 00a2 6BD0     		beq	.L431
 5144              	.LBB1721:
2499:src/xeq.c     **** 		int dot = 0, first_nonzero = -1, last_nonzero = 0;
 5145              		.loc 1 2499 3 is_stmt 1 view .LVU1421
2500:src/xeq.c     **** 
 5146              		.loc 1 2500 3 view .LVU1422
 5147              	.LVL382:
ARM GAS  /tmp/ccK8IvWa.s 			page 210


2502:src/xeq.c     **** 		    || (neg_type_ds >= 1 && neg_type_ds <= 9)
 5148              		.loc 1 2502 3 view .LVU1423
2588:src/xeq.c     **** 			// Double precision mode
 5149              		.loc 1 2588 3 view .LVU1424
2647:src/xeq.c     **** 			if (neg_type_ds >= 1 && neg_type_ds <= 3) {
 5150              		.loc 1 2647 3 view .LVU1425
2666:src/xeq.c     **** 				// Don't allow denormal numbers
 5151              		.loc 1 2666 4 view .LVU1426
2670:src/xeq.c     **** 				// No entered digit can be lost in denormal numbers
 5152              		.loc 1 2670 9 view .LVU1427
2674:src/xeq.c     **** 				// At least one digit preserved in denormal numbers
 5153              		.loc 1 2674 9 view .LVU1428
2680:src/xeq.c     **** 			}
 5154              		.loc 1 2680 5 view .LVU1429
2684:src/xeq.c     **** 			if (pos_type_ds >= 1 && pos_type_ds <= 3)
 5155              		.loc 1 2684 3 view .LVU1430
2693:src/xeq.c     **** 				// Don't allow numbers that overflow to infinity
 5156              		.loc 1 2693 4 view .LVU1431
2698:src/xeq.c     **** 		}
 5157              		.loc 1 2698 5 view .LVU1432
 5158              	.LDL1:
2702:src/xeq.c     **** 		    && (dp_neg_type_dc != dp_neg_type_ds || dp_neg_lim_dc != dp_neg_lim_ds)
 5159              		.loc 1 2702 3 view .LVU1433
2718:src/xeq.c     **** 		         && (!flag_D || (dp_neg_type_dc == dp_neg_type_ds
 5160              		.loc 1 2718 8 view .LVU1434
2735:src/xeq.c     **** 			if (neg_type_ds >= 1 && neg_type_ds <= 9) {
 5161              		.loc 1 2735 8 view .LVU1435
2750:src/xeq.c     **** 				if (neg_type_dc % 3 == 2) { // low limit
 5162              		.loc 1 2750 4 view .LVU1436
2760:src/xeq.c     **** 				emax_minus = 0;
 5163              		.loc 1 2760 4 view .LVU1437
2764:src/xeq.c     **** 		    && (dp_pos_type_dc != dp_pos_type_ds || dp_pos_lim_dc != dp_pos_lim_ds)
 5164              		.loc 1 2764 3 view .LVU1438
2778:src/xeq.c     **** 		         && (!flag_D || (dp_pos_type_dc == dp_pos_type_ds
 5165              		.loc 1 2778 8 view .LVU1439
2793:src/xeq.c     **** 			if (pos_type_ds == 2) { // low limit
 5166              		.loc 1 2793 8 view .LVU1440
2806:src/xeq.c     **** 				if (emax_plus < pos_lim_dc)
 5167              		.loc 1 2806 4 view .LVU1441
2810:src/xeq.c     **** 				if (emax_plus > pos_lim_dc)
 5168              		.loc 1 2810 9 view .LVU1442
2814:src/xeq.c     **** 				emax_plus = 0;
 5169              		.loc 1 2814 4 view .LVU1443
2818:src/xeq.c     **** 		    && (dp_exp_chs_dc != dp_exp_chs_ds)
 5170              		.loc 1 2818 3 view .LVU1444
2844:src/xeq.c     **** 		         && (!flag_D || dp_exp_chs_dc == dp_exp_chs_ds)
 5171              		.loc 1 2844 8 view .LVU1445
2870:src/xeq.c     **** 			if (exp_chs_ds == 0) {
 5172              		.loc 1 2870 8 view .LVU1446
2899:src/xeq.c     **** 				// Limit exponents so sign change is always legal
 5173              		.loc 1 2899 4 view .LVU1447
2906:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
 5174              		.loc 1 2906 9 view .LVU1448
2914:src/xeq.c     **** 					return;
 5175              		.loc 1 2914 5 view .LVU1449
2919:src/xeq.c     **** #endif
 5176              		.loc 1 2919 5 view .LVU1450
ARM GAS  /tmp/ccK8IvWa.s 			page 211


2919:src/xeq.c     **** #endif
 5177              		.loc 1 2919 8 is_stmt 0 view .LVU1451
 5178 00a4 2D2B     		cmp	r3, #45
 5179 00a6 65D0     		beq	.L443
2923:src/xeq.c     **** 			}
 5180              		.loc 1 2923 11 view .LVU1452
 5181 00a8 4FF4C076 		mov	r6, #384
 5182              	.LVL383:
 5183              	.L435:
2923:src/xeq.c     **** 			}
 5184              		.loc 1 2923 11 view .LVU1453
 5185              	.LBE1721:
2940:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5186              		.loc 1 2940 8 is_stmt 1 view .LVU1454
2940:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5187              		.loc 1 2940 9 is_stmt 0 view .LVU1455
 5188 00ac 2846     		mov	r0, r5
 5189 00ae FFF7FEFF 		bl	s_to_i
 5190              	.LVL384:
2940:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5191              		.loc 1 2940 8 view .LVU1456
 5192 00b2 B042     		cmp	r0, r6
2941:src/xeq.c     **** 			p[i] = p[i + 1];
 5193              		.loc 1 2941 3 view .LVU1457
 5194 00b4 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
2940:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5195              		.loc 1 2940 8 view .LVU1458
 5196 00b6 10DC     		bgt	.L436
 5197              	.L462:
2940:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5198              		.loc 1 2940 26 view .LVU1459
 5199 00b8 302B     		cmp	r3, #48
 5200 00ba 36D1     		bne	.L412
 5201              	.L446:
2941:src/xeq.c     **** 			p[i] = p[i + 1];
 5202              		.loc 1 2941 3 view .LVU1460
 5203 00bc 2B46     		mov	r3, r5
 5204              	.L434:
2942:src/xeq.c     **** 		CmdLineLength--;
 5205              		.loc 1 2942 4 is_stmt 1 view .LVU1461
2942:src/xeq.c     **** 		CmdLineLength--;
 5206              		.loc 1 2942 9 is_stmt 0 view .LVU1462
 5207 00be 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 5208 00c0 1A70     		strb	r2, [r3]
2941:src/xeq.c     **** 			p[i] = p[i + 1];
 5209              		.loc 1 2941 29 is_stmt 1 view .LVU1463
2941:src/xeq.c     **** 			p[i] = p[i + 1];
 5210              		.loc 1 2941 15 view .LVU1464
2941:src/xeq.c     **** 			p[i] = p[i + 1];
 5211              		.loc 1 2941 3 is_stmt 0 view .LVU1465
 5212 00c2 0133     		adds	r3, r3, #1
 5213 00c4 002A     		cmp	r2, #0
 5214 00c6 FAD1     		bne	.L434
2943:src/xeq.c     **** 	}
 5215              		.loc 1 2943 3 is_stmt 1 view .LVU1466
2943:src/xeq.c     **** 	}
 5216              		.loc 1 2943 16 is_stmt 0 view .LVU1467
ARM GAS  /tmp/ccK8IvWa.s 			page 212


 5217 00c8 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 5218 00ca 013B     		subs	r3, r3, #1
 5219 00cc 2377     		strb	r3, [r4, #28]
 5220              	.L463:
2940:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5221              		.loc 1 2940 8 is_stmt 1 view .LVU1468
2940:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5222              		.loc 1 2940 9 is_stmt 0 view .LVU1469
 5223 00ce 2846     		mov	r0, r5
 5224 00d0 FFF7FEFF 		bl	s_to_i
 5225              	.LVL385:
2940:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5226              		.loc 1 2940 8 view .LVU1470
 5227 00d4 B042     		cmp	r0, r6
2941:src/xeq.c     **** 			p[i] = p[i + 1];
 5228              		.loc 1 2941 3 view .LVU1471
 5229 00d6 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
2940:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5230              		.loc 1 2940 8 view .LVU1472
 5231 00d8 EEDD     		ble	.L462
 5232              	.L436:
 5233              	.LVL386:
2941:src/xeq.c     **** 			p[i] = p[i + 1];
 5234              		.loc 1 2941 15 is_stmt 1 view .LVU1473
2941:src/xeq.c     **** 			p[i] = p[i + 1];
 5235              		.loc 1 2941 3 is_stmt 0 view .LVU1474
 5236 00da 002B     		cmp	r3, #0
 5237 00dc EED1     		bne	.L446
2943:src/xeq.c     **** 	}
 5238              		.loc 1 2943 3 is_stmt 1 view .LVU1475
2943:src/xeq.c     **** 	}
 5239              		.loc 1 2943 16 is_stmt 0 view .LVU1476
 5240 00de 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 5241 00e0 013B     		subs	r3, r3, #1
 5242 00e2 2377     		strb	r3, [r4, #28]
 5243 00e4 F3E7     		b	.L463
 5244              	.LVL387:
 5245              	.L417:
2943:src/xeq.c     **** 	}
 5246              		.loc 1 2943 16 view .LVU1477
 5247              	.LBE1714:
 5248              	.LBE1713:
3611:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5249              		.loc 1 3611 4 is_stmt 1 view .LVU1478
3611:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5250              		.loc 1 3611 11 is_stmt 0 view .LVU1479
 5251 00e6 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 5252              	.LVL388:
3613:src/xeq.c     **** #  ifdef FRACTION_ENTRY_OVERFLOW_LEFT
 5253              		.loc 1 3613 4 is_stmt 1 view .LVU1480
3613:src/xeq.c     **** #  ifdef FRACTION_ENTRY_OVERFLOW_LEFT
 5254              		.loc 1 3613 7 is_stmt 0 view .LVU1481
 5255 00e8 012B     		cmp	r3, #1
 5256 00ea 35D9     		bls	.L464
3616:src/xeq.c     **** #  elif defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 5257              		.loc 1 3616 5 is_stmt 1 view .LVU1482
3616:src/xeq.c     **** #  elif defined(INCLUDE_DOUBLEDOT_FRACTIONS)
ARM GAS  /tmp/ccK8IvWa.s 			page 213


 5258              		.loc 1 3616 22 is_stmt 0 view .LVU1483
 5259 00ec 2D2A     		cmp	r2, #45
 5260 00ee 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
 5261 00f0 30D0     		beq	.L442
 5262 00f2 1223     		movs	r3, #18
 5263              	.LVL389:
 5264              	.L418:
3626:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5265              		.loc 1 3626 2 is_stmt 1 view .LVU1484
3626:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5266              		.loc 1 3626 5 is_stmt 0 view .LVU1485
 5267 00f4 9342     		cmp	r3, r2
 5268 00f6 B2DC     		bgt	.L425
 5269              	.LVL390:
 5270              	.L439:
3628:src/xeq.c     **** 		return;
 5271              		.loc 1 3628 3 is_stmt 1 view .LVU1486
3655:src/xeq.c     **** 
 5272              		.loc 1 3655 1 is_stmt 0 view .LVU1487
 5273 00f8 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 5274              		.cfi_remember_state
 5275              		.cfi_restore 14
 5276              		.cfi_restore 7
 5277              		.cfi_restore 6
 5278              		.cfi_restore 5
 5279              		.cfi_restore 4
 5280              		.cfi_restore 3
 5281              		.cfi_def_cfa_offset 0
 5282              	.LVL391:
3628:src/xeq.c     **** 		return;
 5283              		.loc 1 3628 3 view .LVU1488
 5284 00fc 0A20     		movs	r0, #10
 5285 00fe FFF7FEBF 		b	report_warn
 5286              	.LVL392:
 5287              	.L461:
 5288              		.cfi_restore_state
3584:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5289              		.loc 1 3584 3 is_stmt 1 view .LVU1489
3584:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5290              		.loc 1 3584 12 is_stmt 0 view .LVU1490
 5291 0102 FFF7FEFF 		bl	int_base
 5292              	.LVL393:
3584:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5293              		.loc 1 3584 6 view .LVU1491
 5294 0106 A842     		cmp	r0, r5
 5295 0108 10D9     		bls	.L416
3626:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5296              		.loc 1 3626 2 is_stmt 1 view .LVU1492
3626:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5297              		.loc 1 3626 6 is_stmt 0 view .LVU1493
 5298 010a 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
3626:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5299              		.loc 1 3626 5 view .LVU1494
 5300 010c BA42     		cmp	r2, r7
 5301 010e F3DA     		bge	.L439
3632:src/xeq.c     **** 		append_cmdline(c - 10 + 'A');
 5302              		.loc 1 3632 2 is_stmt 1 view .LVU1495
ARM GAS  /tmp/ccK8IvWa.s 			page 214


3632:src/xeq.c     **** 		append_cmdline(c - 10 + 'A');
 5303              		.loc 1 3632 5 is_stmt 0 view .LVU1496
 5304 0110 092D     		cmp	r5, #9
 5305 0112 A4D9     		bls	.L425
3633:src/xeq.c     **** 	else {
 5306              		.loc 1 3633 3 is_stmt 1 view .LVU1497
 5307              	.LVL394:
 5308              	.LBB1724:
 5309              	.LBI1724:
2393:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5310              		.loc 1 2393 13 view .LVU1498
 5311              	.LBB1725:
2394:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5312              		.loc 1 2394 2 view .LVU1499
2394:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5313              		.loc 1 2394 23 is_stmt 0 view .LVU1500
 5314 0114 531C     		adds	r3, r2, #1
 5315 0116 DBB2     		uxtb	r3, r3
2394:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5316              		.loc 1 2394 27 view .LVU1501
 5317 0118 2244     		add	r2, r2, r4
2395:src/xeq.c     **** }
 5318              		.loc 1 2395 25 view .LVU1502
 5319 011a E118     		adds	r1, r4, r3
 5320              	.LBE1725:
 5321              	.LBE1724:
3633:src/xeq.c     **** 	else {
 5322              		.loc 1 3633 3 view .LVU1503
 5323 011c 3735     		adds	r5, r5, #55
 5324              	.LVL395:
 5325              	.LBB1727:
 5326              	.LBB1726:
2395:src/xeq.c     **** }
 5327              		.loc 1 2395 25 view .LVU1504
 5328 011e 0026     		movs	r6, #0
2394:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5329              		.loc 1 2394 27 view .LVU1505
 5330 0120 82F82050 		strb	r5, [r2, #32]
2395:src/xeq.c     **** }
 5331              		.loc 1 2395 2 is_stmt 1 view .LVU1506
2394:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5332              		.loc 1 2394 23 is_stmt 0 view .LVU1507
 5333 0124 2377     		strb	r3, [r4, #28]
2395:src/xeq.c     **** }
 5334              		.loc 1 2395 25 view .LVU1508
 5335 0126 81F82060 		strb	r6, [r1, #32]
 5336              	.LVL396:
 5337              	.L412:
2395:src/xeq.c     **** }
 5338              		.loc 1 2395 25 view .LVU1509
 5339              	.LBE1726:
 5340              	.LBE1727:
3655:src/xeq.c     **** 
 5341              		.loc 1 3655 1 view .LVU1510
 5342 012a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5343              	.LVL397:
 5344              	.L416:
ARM GAS  /tmp/ccK8IvWa.s 			page 215


3585:src/xeq.c     **** 			return;
 5345              		.loc 1 3585 4 is_stmt 1 view .LVU1511
3655:src/xeq.c     **** 
 5346              		.loc 1 3655 1 is_stmt 0 view .LVU1512
 5347 012c BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 5348              		.cfi_remember_state
 5349              		.cfi_restore 14
 5350              		.cfi_restore 7
 5351              		.cfi_restore 6
 5352              		.cfi_restore 5
 5353              		.cfi_restore 4
 5354              		.cfi_restore 3
 5355              		.cfi_def_cfa_offset 0
 5356              	.LVL398:
3585:src/xeq.c     **** 			return;
 5357              		.loc 1 3585 4 view .LVU1513
 5358 0130 0920     		movs	r0, #9
 5359 0132 FFF7FEBF 		b	report_warn
 5360              	.LVL399:
 5361              	.L427:
 5362              		.cfi_restore_state
3650:src/xeq.c     **** 
 5363              		.loc 1 3650 3 is_stmt 1 view .LVU1514
 5364              	.LBB1728:
2393:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5365              		.loc 1 2393 13 view .LVU1515
 5366              	.LBB1709:
2394:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5367              		.loc 1 2394 2 view .LVU1516
2394:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5368              		.loc 1 2394 23 is_stmt 0 view .LVU1517
 5369 0136 511C     		adds	r1, r2, #1
 5370 0138 C9B2     		uxtb	r1, r1
2394:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5371              		.loc 1 2394 27 view .LVU1518
 5372 013a 2244     		add	r2, r2, r4
2395:src/xeq.c     **** }
 5373              		.loc 1 2395 25 view .LVU1519
 5374 013c 6718     		adds	r7, r4, r1
 5375              	.LBE1709:
 5376              	.LBE1728:
3650:src/xeq.c     **** 
 5377              		.loc 1 3650 3 view .LVU1520
 5378 013e 3035     		adds	r5, r5, #48
 5379              	.LVL400:
3652:src/xeq.c     **** 			exponent_adjusted(1);
 5380              		.loc 1 3652 7 view .LVU1521
 5381 0140 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
 5382              	.LBB1729:
 5383              	.LBB1710:
2394:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5384              		.loc 1 2394 27 view .LVU1522
 5385 0142 82F82050 		strb	r5, [r2, #32]
2395:src/xeq.c     **** }
 5386              		.loc 1 2395 2 is_stmt 1 view .LVU1523
2395:src/xeq.c     **** }
 5387              		.loc 1 2395 25 is_stmt 0 view .LVU1524
ARM GAS  /tmp/ccK8IvWa.s 			page 216


 5388 0146 0022     		movs	r2, #0
2394:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5389              		.loc 1 2394 23 view .LVU1525
 5390 0148 2177     		strb	r1, [r4, #28]
2395:src/xeq.c     **** }
 5391              		.loc 1 2395 25 view .LVU1526
 5392 014a 87F82020 		strb	r2, [r7, #32]
2395:src/xeq.c     **** }
 5393              		.loc 1 2395 25 view .LVU1527
 5394              	.LBE1710:
 5395              	.LBE1729:
3652:src/xeq.c     **** 			exponent_adjusted(1);
 5396              		.loc 1 3652 3 is_stmt 1 view .LVU1528
3652:src/xeq.c     **** 			exponent_adjusted(1);
 5397              		.loc 1 3652 6 is_stmt 0 view .LVU1529
 5398 014e 002B     		cmp	r3, #0
 5399 0150 99D1     		bne	.L440
3655:src/xeq.c     **** 
 5400              		.loc 1 3655 1 view .LVU1530
 5401 0152 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5402              	.LVL401:
 5403              	.L442:
3595:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5404              		.loc 1 3595 8 view .LVU1531
 5405 0154 1323     		movs	r3, #19
 5406 0156 CDE7     		b	.L418
 5407              	.LVL402:
 5408              	.L464:
3595:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5409              		.loc 1 3595 8 view .LVU1532
 5410 0158 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
3611:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5411              		.loc 1 3611 8 view .LVU1533
 5412 015a 3B44     		add	r3, r3, r7
 5413              	.LVL403:
3611:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5414              		.loc 1 3611 8 view .LVU1534
 5415 015c CAE7     		b	.L418
 5416              	.LVL404:
 5417              	.L428:
3650:src/xeq.c     **** 
 5418              		.loc 1 3650 3 is_stmt 1 view .LVU1535
 5419              	.LBB1730:
2393:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5420              		.loc 1 2393 13 view .LVU1536
 5421              	.LBB1711:
2394:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5422              		.loc 1 2394 2 view .LVU1537
2394:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5423              		.loc 1 2394 23 is_stmt 0 view .LVU1538
 5424 015e 531C     		adds	r3, r2, #1
 5425 0160 DBB2     		uxtb	r3, r3
2395:src/xeq.c     **** }
 5426              		.loc 1 2395 25 view .LVU1539
 5427 0162 E118     		adds	r1, r4, r3
2394:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5428              		.loc 1 2394 27 view .LVU1540
ARM GAS  /tmp/ccK8IvWa.s 			page 217


 5429 0164 2244     		add	r2, r2, r4
 5430 0166 3020     		movs	r0, #48
 5431 0168 82F82000 		strb	r0, [r2, #32]
2395:src/xeq.c     **** }
 5432              		.loc 1 2395 2 is_stmt 1 view .LVU1541
2395:src/xeq.c     **** }
 5433              		.loc 1 2395 25 is_stmt 0 view .LVU1542
 5434 016c 81F82050 		strb	r5, [r1, #32]
 5435              	.LVL405:
2395:src/xeq.c     **** }
 5436              		.loc 1 2395 25 view .LVU1543
 5437              	.LBE1711:
 5438              	.LBE1730:
3652:src/xeq.c     **** 			exponent_adjusted(1);
 5439              		.loc 1 3652 3 is_stmt 1 view .LVU1544
 5440              	.LBB1731:
 5441              	.LBB1712:
2394:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5442              		.loc 1 2394 23 is_stmt 0 view .LVU1545
 5443 0170 2377     		strb	r3, [r4, #28]
 5444              	.LBE1712:
 5445              	.LBE1731:
3655:src/xeq.c     **** 
 5446              		.loc 1 3655 1 view .LVU1546
 5447 0172 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5448              	.LVL406:
 5449              	.L443:
 5450              	.LBB1732:
 5451              	.LBB1723:
 5452              	.LBB1722:
2921:src/xeq.c     **** 				else
 5453              		.loc 1 2921 11 view .LVU1547
 5454 0174 40F27F16 		movw	r6, #383
 5455              	.LVL407:
 5456              	.L432:
2921:src/xeq.c     **** 				else
 5457              		.loc 1 2921 11 view .LVU1548
 5458              	.LBE1722:
2934:src/xeq.c     **** #  endif
 5459              		.loc 1 2934 3 is_stmt 1 view .LVU1549
2934:src/xeq.c     **** #  endif
 5460              		.loc 1 2934 4 is_stmt 0 view .LVU1550
 5461 0178 0135     		adds	r5, r5, #1
 5462              	.LVL408:
2934:src/xeq.c     **** #  endif
 5463              		.loc 1 2934 4 view .LVU1551
 5464 017a 97E7     		b	.L435
 5465              	.LVL409:
 5466              	.L431:
2933:src/xeq.c     **** 		p++;
 5467              		.loc 1 2933 2 is_stmt 1 view .LVU1552
2933:src/xeq.c     **** 		p++;
 5468              		.loc 1 2933 5 is_stmt 0 view .LVU1553
 5469 017c 2D2B     		cmp	r3, #45
2496:src/xeq.c     **** 	}
 5470              		.loc 1 2496 8 view .LVU1554
 5471 017e 40F2E736 		movw	r6, #999
ARM GAS  /tmp/ccK8IvWa.s 			page 218


2933:src/xeq.c     **** 		p++;
 5472              		.loc 1 2933 5 view .LVU1555
 5473 0182 93D1     		bne	.L435
 5474 0184 F8E7     		b	.L432
 5475              	.L466:
 5476 0186 00BF     		.align	2
 5477              	.L465:
 5478 0188 00000000 		.word	StateWhileOn
 5479 018c 00000000 		.word	PersistentRam
 5480 0190 33000000 		.word	StateWhileOn+51
 5481              	.LBE1723:
 5482              	.LBE1732:
 5483              		.cfi_endproc
 5484              	.LFE206:
 5486              		.section	.text.s_to_ull,"ax",%progbits
 5487              		.align	1
 5488              		.p2align 2,,3
 5489              		.global	s_to_ull
 5490              		.syntax unified
 5491              		.thumb
 5492              		.thumb_func
 5493              		.fpu fpv4-sp-d16
 5495              	s_to_ull:
 5496              	.LVL410:
 5497              	.LFB80:
 957:src/xeq.c     **** 	unsigned long long int x = 0;
 5498              		.loc 1 957 67 is_stmt 1 view -0
 5499              		.cfi_startproc
 5500              		@ args = 0, pretend = 0, frame = 0
 5501              		@ frame_needed = 0, uses_anonymous_args = 0
 5502              		@ link register save eliminated.
 958:src/xeq.c     **** 
 5503              		.loc 1 958 2 view .LVU1557
 957:src/xeq.c     **** 	unsigned long long int x = 0;
 5504              		.loc 1 957 67 is_stmt 0 view .LVU1558
 5505 0000 F0B4     		push	{r4, r5, r6, r7}
 5506              		.cfi_def_cfa_offset 16
 5507              		.cfi_offset 4, -16
 5508              		.cfi_offset 5, -12
 5509              		.cfi_offset 6, -8
 5510              		.cfi_offset 7, -4
 958:src/xeq.c     **** 
 5511              		.loc 1 958 25 view .LVU1559
 5512 0002 0026     		movs	r6, #0
 5513 0004 0027     		movs	r7, #0
 5514 0006 02E0     		b	.L471
 5515              	.LVL411:
 5516              	.L473:
 5517              	.LBB1733:
 972:src/xeq.c     **** 	}
 5518              		.loc 1 972 5 view .LVU1560
 5519 0008 E618     		adds	r6, r4, r3
 5520              	.LVL412:
 972:src/xeq.c     **** 	}
 5521              		.loc 1 972 5 view .LVU1561
 5522 000a 45F10007 		adc	r7, r5, #0
 5523              	.LVL413:
ARM GAS  /tmp/ccK8IvWa.s 			page 219


 972:src/xeq.c     **** 	}
 5524              		.loc 1 972 5 view .LVU1562
 5525              	.LBE1733:
 960:src/xeq.c     **** 		unsigned int n;
 5526              		.loc 1 960 8 is_stmt 1 view .LVU1563
 5527              	.L471:
 960:src/xeq.c     **** 		unsigned int n;
 5528              		.loc 1 960 2 view .LVU1564
 5529              	.LBB1734:
 961:src/xeq.c     **** 		const char c = *s++;
 5530              		.loc 1 961 3 view .LVU1565
 962:src/xeq.c     **** 
 5531              		.loc 1 962 3 view .LVU1566
 965:src/xeq.c     **** 		else if (c >= 'A' && c <= 'F')
 5532              		.loc 1 965 4 view .LVU1567
 966:src/xeq.c     **** 			n = c - 'A' + 10;
 5533              		.loc 1 966 8 view .LVU1568
 967:src/xeq.c     **** 		else
 5534              		.loc 1 967 4 view .LVU1569
 962:src/xeq.c     **** 
 5535              		.loc 1 962 14 is_stmt 0 view .LVU1570
 5536 000e 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 5537              	.LVL414:
 964:src/xeq.c     **** 			n = c - '0';
 5538              		.loc 1 964 3 is_stmt 1 view .LVU1571
 964:src/xeq.c     **** 			n = c - '0';
 5539              		.loc 1 964 16 is_stmt 0 view .LVU1572
 5540 0012 A2F13003 		sub	r3, r2, #48
 964:src/xeq.c     **** 			n = c - '0';
 5541              		.loc 1 964 6 view .LVU1573
 5542 0016 DCB2     		uxtb	r4, r3
 5543 0018 092C     		cmp	r4, #9
 966:src/xeq.c     **** 			n = c - 'A' + 10;
 5544              		.loc 1 966 11 view .LVU1574
 5545 001a A2F14105 		sub	r5, r2, #65
 964:src/xeq.c     **** 			n = c - '0';
 5546              		.loc 1 964 6 view .LVU1575
 5547 001e 03D9     		bls	.L469
 966:src/xeq.c     **** 			n = c - 'A' + 10;
 5548              		.loc 1 966 11 view .LVU1576
 5549 0020 052D     		cmp	r5, #5
 5550 0022 07D8     		bhi	.L467
 967:src/xeq.c     **** 		else
 5551              		.loc 1 967 16 view .LVU1577
 5552 0024 A2F13703 		sub	r3, r2, #55
 5553              	.LVL415:
 5554              	.L469:
 970:src/xeq.c     **** 			break;
 5555              		.loc 1 970 3 is_stmt 1 view .LVU1578
 972:src/xeq.c     **** 	}
 5556              		.loc 1 972 3 view .LVU1579
 972:src/xeq.c     **** 	}
 5557              		.loc 1 972 9 is_stmt 0 view .LVU1580
 5558 0028 A1FB0645 		umull	r4, r5, r1, r6
 970:src/xeq.c     **** 			break;
 5559              		.loc 1 970 6 view .LVU1581
 5560 002c 8B42     		cmp	r3, r1
ARM GAS  /tmp/ccK8IvWa.s 			page 220


 972:src/xeq.c     **** 	}
 5561              		.loc 1 972 9 view .LVU1582
 5562 002e 01FB0755 		mla	r5, r1, r7, r5
 970:src/xeq.c     **** 			break;
 5563              		.loc 1 970 6 view .LVU1583
 5564 0032 E9D3     		bcc	.L473
 5565              	.LVL416:
 5566              	.L467:
 970:src/xeq.c     **** 			break;
 5567              		.loc 1 970 6 view .LVU1584
 5568              	.LBE1734:
 975:src/xeq.c     **** 
 5569              		.loc 1 975 1 view .LVU1585
 5570 0034 3046     		mov	r0, r6
 5571              	.LVL417:
 975:src/xeq.c     **** 
 5572              		.loc 1 975 1 view .LVU1586
 5573 0036 3946     		mov	r1, r7
 5574              	.LVL418:
 975:src/xeq.c     **** 
 5575              		.loc 1 975 1 view .LVU1587
 5576 0038 F0BC     		pop	{r4, r5, r6, r7}
 5577              		.cfi_restore 7
 5578              		.cfi_restore 6
 5579              		.cfi_restore 5
 5580              		.cfi_restore 4
 5581              		.cfi_def_cfa_offset 0
 5582              	.LVL419:
 975:src/xeq.c     **** 
 5583              		.loc 1 975 1 view .LVU1588
 5584 003a 7047     		bx	lr
 5585              		.cfi_endproc
 5586              	.LFE80:
 5588              		.section	.text.get_cmdline,"ax",%progbits
 5589              		.align	1
 5590              		.p2align 2,,3
 5591              		.global	get_cmdline
 5592              		.syntax unified
 5593              		.thumb
 5594              		.thumb_func
 5595              		.fpu fpv4-sp-d16
 5597              	get_cmdline:
 5598              	.LFB81:
 977:src/xeq.c     **** 	if (CmdLineLength) {
 5599              		.loc 1 977 31 is_stmt 1 view -0
 5600              		.cfi_startproc
 5601              		@ args = 0, pretend = 0, frame = 0
 5602              		@ frame_needed = 0, uses_anonymous_args = 0
 5603              		@ link register save eliminated.
 978:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
 5604              		.loc 1 978 2 view .LVU1590
 978:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
 5605              		.loc 1 978 6 is_stmt 0 view .LVU1591
 5606 0000 044B     		ldr	r3, .L477
 5607 0002 187F     		ldrb	r0, [r3, #28]	@ zero_extendqisi2
 978:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
 5608              		.loc 1 978 5 view .LVU1592
ARM GAS  /tmp/ccK8IvWa.s 			page 221


 5609 0004 28B1     		cbz	r0, .L474
 979:src/xeq.c     **** 		return Cmdline;
 5610              		.loc 1 979 3 is_stmt 1 view .LVU1593
 979:src/xeq.c     **** 		return Cmdline;
 5611              		.loc 1 979 26 is_stmt 0 view .LVU1594
 5612 0006 1A18     		adds	r2, r3, r0
 5613 0008 0021     		movs	r1, #0
 980:src/xeq.c     **** 	}
 5614              		.loc 1 980 10 view .LVU1595
 5615 000a 03F12000 		add	r0, r3, #32
 979:src/xeq.c     **** 		return Cmdline;
 5616              		.loc 1 979 26 view .LVU1596
 5617 000e 82F82010 		strb	r1, [r2, #32]
 980:src/xeq.c     **** 	}
 5618              		.loc 1 980 3 is_stmt 1 view .LVU1597
 5619              	.L474:
 983:src/xeq.c     **** 
 5620              		.loc 1 983 1 is_stmt 0 view .LVU1598
 5621 0012 7047     		bx	lr
 5622              	.L478:
 5623              		.align	2
 5624              	.L477:
 5625 0014 00000000 		.word	StateWhileOn
 5626              		.cfi_endproc
 5627              	.LFE81:
 5629              		.section	.text.is_bad_cmdline,"ax",%progbits
 5630              		.align	1
 5631              		.p2align 2,,3
 5632              		.global	is_bad_cmdline
 5633              		.syntax unified
 5634              		.thumb
 5635              		.thumb_func
 5636              		.fpu fpv4-sp-d16
 5638              	is_bad_cmdline:
 5639              	.LFB82:
1000:src/xeq.c     **** #ifndef IGNORE_INVALID_FRACTIONS
 5640              		.loc 1 1000 1 is_stmt 1 view -0
 5641              		.cfi_startproc
 5642              		@ args = 0, pretend = 0, frame = 0
 5643              		@ frame_needed = 0, uses_anonymous_args = 0
1002:src/xeq.c     **** 		char *p;
 5644              		.loc 1 1002 2 view .LVU1600
1000:src/xeq.c     **** #ifndef IGNORE_INVALID_FRACTIONS
 5645              		.loc 1 1000 1 is_stmt 0 view .LVU1601
 5646 0000 10B5     		push	{r4, lr}
 5647              		.cfi_def_cfa_offset 8
 5648              		.cfi_offset 4, -8
 5649              		.cfi_offset 14, -4
1002:src/xeq.c     **** 		char *p;
 5650              		.loc 1 1002 6 view .LVU1602
 5651 0002 0E4C     		ldr	r4, .L487
1002:src/xeq.c     **** 		char *p;
 5652              		.loc 1 1002 5 view .LVU1603
 5653 0004 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 5654 0006 022B     		cmp	r3, #2
 5655 0008 01D0     		beq	.L486
 5656              	.L483:
ARM GAS  /tmp/ccK8IvWa.s 			page 222


1021:src/xeq.c     **** }
 5657              		.loc 1 1021 9 view .LVU1604
 5658 000a 0020     		movs	r0, #0
1022:src/xeq.c     **** 
 5659              		.loc 1 1022 1 view .LVU1605
 5660 000c 10BD     		pop	{r4, pc}
 5661              	.L486:
 5662              	.LBB1739:
1003:src/xeq.c     **** 
 5663              		.loc 1 1003 3 is_stmt 1 view .LVU1606
1006:src/xeq.c     **** 		for (;;) {
 5664              		.loc 1 1006 3 view .LVU1607
1006:src/xeq.c     **** 		for (;;) {
 5665              		.loc 1 1006 17 is_stmt 0 view .LVU1608
 5666 000e 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
1006:src/xeq.c     **** 		for (;;) {
 5667              		.loc 1 1006 5 view .LVU1609
 5668 0010 04F12003 		add	r3, r4, #32
 5669 0014 1A44     		add	r2, r2, r3
 5670              	.LVL420:
 5671              	.L481:
1007:src/xeq.c     **** 			p--;
 5672              		.loc 1 1007 3 is_stmt 1 view .LVU1610
1008:src/xeq.c     **** 			if (*p >= '1' && *p <= '9')
 5673              		.loc 1 1008 4 view .LVU1611
1009:src/xeq.c     **** 				return 0;
 5674              		.loc 1 1009 4 view .LVU1612
1011:src/xeq.c     **** 				break;
 5675              		.loc 1 1011 4 view .LVU1613
1009:src/xeq.c     **** 				return 0;
 5676              		.loc 1 1009 8 is_stmt 0 view .LVU1614
 5677 0016 12F8013D 		ldrb	r3, [r2, #-1]!	@ zero_extendqisi2
 5678              	.LVL421:
1009:src/xeq.c     **** 				return 0;
 5679              		.loc 1 1009 7 view .LVU1615
 5680 001a A3F13101 		sub	r1, r3, #49
 5681 001e 0829     		cmp	r1, #8
 5682 0020 F3D9     		bls	.L483
1011:src/xeq.c     **** 				break;
 5683              		.loc 1 1011 7 view .LVU1616
 5684 0022 2E2B     		cmp	r3, #46
 5685 0024 F7D1     		bne	.L481
 5686              	.LBE1739:
 5687              	.LBB1740:
 5688              	.LBI1740:
 999:src/xeq.c     **** {
 5689              		.loc 1 999 5 is_stmt 1 view .LVU1617
 5690              	.LBB1741:
1015:src/xeq.c     **** 		error_message(ERR_DOMAIN);
 5691              		.loc 1 1015 3 view .LVU1618
 5692 0026 FFF7FEFF 		bl	reset_shift
 5693              	.LVL422:
1016:src/xeq.c     **** 		State2.invalid_disp = 1;
 5694              		.loc 1 1016 3 view .LVU1619
 5695 002a 0120     		movs	r0, #1
 5696 002c FFF7FEFF 		bl	error_message
 5697              	.LVL423:
ARM GAS  /tmp/ccK8IvWa.s 			page 223


1017:src/xeq.c     **** 		return 1;
 5698              		.loc 1 1017 3 view .LVU1620
1017:src/xeq.c     **** 		return 1;
 5699              		.loc 1 1017 23 is_stmt 0 view .LVU1621
 5700 0030 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 5701 0032 43F00203 		orr	r3, r3, #2
 5702 0036 E375     		strb	r3, [r4, #23]
1018:src/xeq.c     **** 	}
 5703              		.loc 1 1018 3 is_stmt 1 view .LVU1622
1017:src/xeq.c     **** 		return 1;
 5704              		.loc 1 1017 23 is_stmt 0 view .LVU1623
 5705 0038 0120     		movs	r0, #1
 5706              	.LBE1741:
 5707              	.LBE1740:
1022:src/xeq.c     **** 
 5708              		.loc 1 1022 1 view .LVU1624
 5709 003a 10BD     		pop	{r4, pc}
 5710              	.L488:
 5711              		.align	2
 5712              	.L487:
 5713 003c 00000000 		.word	StateWhileOn
 5714              		.cfi_endproc
 5715              	.LFE82:
 5717              		.section	.text.get_flash_reg_n,"ax",%progbits
 5718              		.align	1
 5719              		.p2align 2,,3
 5720              		.global	get_flash_reg_n
 5721              		.syntax unified
 5722              		.thumb
 5723              		.thumb_func
 5724              		.fpu fpv4-sp-d16
 5726              	get_flash_reg_n:
 5727              	.LVL424:
 5728              	.LFB87:
1185:src/xeq.c     **** 	return (REGISTER *) reg_address(n, BackupFlash._regs + TOPREALREG - BackupFlash._numregs,
 5729              		.loc 1 1185 34 is_stmt 1 view -0
 5730              		.cfi_startproc
 5731              		@ args = 0, pretend = 0, frame = 0
 5732              		@ frame_needed = 0, uses_anonymous_args = 0
 5733              		@ link register save eliminated.
1186:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5734              		.loc 1 1186 2 view .LVU1626
1186:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5735              		.loc 1 1186 22 is_stmt 0 view .LVU1627
 5736 0000 054A     		ldr	r2, .L490
1186:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5737              		.loc 1 1186 68 view .LVU1628
 5738 0002 92F87F30 		ldrb	r3, [r2, #127]	@ zero_extendqisi2
1186:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5739              		.loc 1 1186 22 view .LVU1629
 5740 0006 A2F54871 		sub	r1, r2, #800
1186:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5741              		.loc 1 1186 68 view .LVU1630
 5742 000a C3F16403 		rsb	r3, r3, #100
1186:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5743              		.loc 1 1186 22 view .LVU1631
 5744 000e 01EBC301 		add	r1, r1, r3, lsl #3
ARM GAS  /tmp/ccK8IvWa.s 			page 224


 5745 0012 FFF7FEBF 		b	reg_address
 5746              	.LVL425:
 5747              	.L491:
1186:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5748              		.loc 1 1186 22 view .LVU1632
 5749 0016 00BF     		.align	2
 5750              	.L490:
 5751 0018 50070000 		.word	BackupFlash+1872
 5752              		.cfi_endproc
 5753              	.LFE87:
 5755              		.section	.text.get_const,"ax",%progbits
 5756              		.align	1
 5757              		.p2align 2,,3
 5758              		.global	get_const
 5759              		.syntax unified
 5760              		.thumb
 5761              		.thumb_func
 5762              		.fpu fpv4-sp-d16
 5764              	get_const:
 5765              	.LVL426:
 5766              	.LFB88:
1196:src/xeq.c     **** 	static REGISTER result;
 5767              		.loc 1 1196 1 is_stmt 1 view -0
 5768              		.cfi_startproc
 5769              		@ args = 0, pretend = 0, frame = 40
 5770              		@ frame_needed = 0, uses_anonymous_args = 0
1197:src/xeq.c     **** 	const int i = cnsts[index].index;
 5771              		.loc 1 1197 2 view .LVU1634
1198:src/xeq.c     **** 	if (dbl) {
 5772              		.loc 1 1198 2 view .LVU1635
1196:src/xeq.c     **** 	static REGISTER result;
 5773              		.loc 1 1196 1 is_stmt 0 view .LVU1636
 5774 0000 00B5     		push	{lr}
 5775              		.cfi_def_cfa_offset 4
 5776              		.cfi_offset 14, -4
1198:src/xeq.c     **** 	if (dbl) {
 5777              		.loc 1 1198 28 view .LVU1637
 5778 0002 1C4B     		ldr	r3, .L498
 5779 0004 00EB4000 		add	r0, r0, r0, lsl #1
 5780              	.LVL427:
1196:src/xeq.c     **** 	static REGISTER result;
 5781              		.loc 1 1196 1 view .LVU1638
 5782 0008 8BB0     		sub	sp, sp, #44
 5783              		.cfi_def_cfa_offset 48
1198:src/xeq.c     **** 	if (dbl) {
 5784              		.loc 1 1198 28 view .LVU1639
 5785 000a 13F82030 		ldrb	r3, [r3, r0, lsl #2]	@ zero_extendqisi2
 5786              	.LVL428:
1199:src/xeq.c     **** 		if (i <= 1 || i >= 128)
 5787              		.loc 1 1199 2 is_stmt 1 view .LVU1640
1199:src/xeq.c     **** 		if (i <= 1 || i >= 128)
 5788              		.loc 1 1199 5 is_stmt 0 view .LVU1641
 5789 000e 51B1     		cbz	r1, .L493
1200:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
 5790              		.loc 1 1200 3 is_stmt 1 view .LVU1642
1200:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
 5791              		.loc 1 1200 14 is_stmt 0 view .LVU1643
ARM GAS  /tmp/ccK8IvWa.s 			page 225


 5792 0010 9A1E     		subs	r2, r3, #2
1200:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
 5793              		.loc 1 1200 6 view .LVU1644
 5794 0012 7D2A     		cmp	r2, #125
 5795 0014 0FD9     		bls	.L494
1201:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5796              		.loc 1 1201 4 is_stmt 1 view .LVU1645
1201:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5797              		.loc 1 1201 11 is_stmt 0 view .LVU1646
 5798 0016 184A     		ldr	r2, .L498+4
1201:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5799              		.loc 1 1201 36 view .LVU1647
 5800 0018 03F07F00 		and	r0, r3, #127
1201:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5801              		.loc 1 1201 11 view .LVU1648
 5802 001c 02EB0010 		add	r0, r2, r0, lsl #4
1210:src/xeq.c     **** 
 5803              		.loc 1 1210 1 view .LVU1649
 5804 0020 0BB0     		add	sp, sp, #44
 5805              		.cfi_remember_state
 5806              		.cfi_def_cfa_offset 4
 5807              		@ sp needed
 5808 0022 5DF804FB 		ldr	pc, [sp], #4
 5809              	.L493:
 5810              		.cfi_restore_state
1205:src/xeq.c     **** 			return (REGISTER *) (cnsts_d64 + i);
 5811              		.loc 1 1205 3 is_stmt 1 view .LVU1650
1205:src/xeq.c     **** 			return (REGISTER *) (cnsts_d64 + i);
 5812              		.loc 1 1205 6 is_stmt 0 view .LVU1651
 5813 0026 1A06     		lsls	r2, r3, #24
 5814 0028 13D4     		bmi	.L496
1206:src/xeq.c     **** 		packed_from_packed128(&(result.s), cnsts_d128 - 128 + i);
 5815              		.loc 1 1206 4 is_stmt 1 view .LVU1652
1206:src/xeq.c     **** 		packed_from_packed128(&(result.s), cnsts_d128 - 128 + i);
 5816              		.loc 1 1206 11 is_stmt 0 view .LVU1653
 5817 002a 1448     		ldr	r0, .L498+8
 5818 002c 00EBC300 		add	r0, r0, r3, lsl #3
1210:src/xeq.c     **** 
 5819              		.loc 1 1210 1 view .LVU1654
 5820 0030 0BB0     		add	sp, sp, #44
 5821              		.cfi_remember_state
 5822              		.cfi_def_cfa_offset 4
 5823              		@ sp needed
 5824 0032 5DF804FB 		ldr	pc, [sp], #4
 5825              	.L494:
 5826              		.cfi_restore_state
1202:src/xeq.c     **** 	}
 5827              		.loc 1 1202 3 is_stmt 1 view .LVU1655
 5828              	.LVL429:
 5829              	.LBB1742:
 5830              	.LBI1742:
 631:src/xeq.c     **** 	decNumber temp;
 5831              		.loc 1 631 6 view .LVU1656
 5832              	.LBB1743:
 632:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 5833              		.loc 1 632 2 view .LVU1657
 633:src/xeq.c     **** }
ARM GAS  /tmp/ccK8IvWa.s 			page 226


 5834              		.loc 1 633 2 view .LVU1658
 5835              	.LBE1743:
 5836              	.LBE1742:
1202:src/xeq.c     **** 	}
 5837              		.loc 1 1202 3 is_stmt 0 view .LVU1659
 5838 0036 1148     		ldr	r0, .L498+8
 5839              	.LBB1745:
 5840              	.LBB1744:
 633:src/xeq.c     **** }
 5841              		.loc 1 633 27 view .LVU1660
 5842 0038 01A9     		add	r1, sp, #4
 5843              	.LVL430:
 633:src/xeq.c     **** }
 5844              		.loc 1 633 27 view .LVU1661
 5845 003a 00EBC300 		add	r0, r0, r3, lsl #3
 5846 003e FFF7FEFF 		bl	decimal64ToNumber
 5847              	.LVL431:
 633:src/xeq.c     **** }
 5848              		.loc 1 633 27 view .LVU1662
 5849 0042 0146     		mov	r1, r0
 633:src/xeq.c     **** }
 5850              		.loc 1 633 2 view .LVU1663
 5851 0044 0E48     		ldr	r0, .L498+12
 5852 0046 FFF7FEFF 		bl	packed128_from_number
 5853              	.LVL432:
 5854              	.LBE1744:
 5855              	.LBE1745:
1209:src/xeq.c     **** }
 5856              		.loc 1 1209 9 view .LVU1664
 5857 004a 0D48     		ldr	r0, .L498+12
1210:src/xeq.c     **** 
 5858              		.loc 1 1210 1 view .LVU1665
 5859 004c 0BB0     		add	sp, sp, #44
 5860              		.cfi_remember_state
 5861              		.cfi_def_cfa_offset 4
 5862              		@ sp needed
 5863 004e 5DF804FB 		ldr	pc, [sp], #4
 5864              	.LVL433:
 5865              	.L496:
 5866              		.cfi_restore_state
1207:src/xeq.c     **** 	}
 5867              		.loc 1 1207 3 is_stmt 1 view .LVU1666
 5868              	.LBB1746:
 5869              	.LBI1746:
 625:src/xeq.c     **** 	decNumber temp;
 5870              		.loc 1 625 6 view .LVU1667
 5871              	.LBB1747:
 626:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 5872              		.loc 1 626 2 view .LVU1668
 627:src/xeq.c     **** }
 5873              		.loc 1 627 2 view .LVU1669
 5874              	.LBE1747:
 5875              	.LBE1746:
1207:src/xeq.c     **** 	}
 5876              		.loc 1 1207 3 is_stmt 0 view .LVU1670
 5877 0052 0948     		ldr	r0, .L498+4
1207:src/xeq.c     **** 	}
ARM GAS  /tmp/ccK8IvWa.s 			page 227


 5878              		.loc 1 1207 55 view .LVU1671
 5879 0054 03F18053 		add	r3, r3, #268435456
 5880              	.LVL434:
1207:src/xeq.c     **** 	}
 5881              		.loc 1 1207 55 view .LVU1672
 5882 0058 803B     		subs	r3, r3, #128
 5883              	.LVL435:
 5884              	.LBB1749:
 5885              	.LBB1748:
 627:src/xeq.c     **** }
 5886              		.loc 1 627 24 view .LVU1673
 5887 005a 00EB0310 		add	r0, r0, r3, lsl #4
 5888 005e 01A9     		add	r1, sp, #4
 5889              	.LVL436:
 627:src/xeq.c     **** }
 5890              		.loc 1 627 24 view .LVU1674
 5891 0060 FFF7FEFF 		bl	decimal128ToNumber
 5892              	.LVL437:
 627:src/xeq.c     **** }
 5893              		.loc 1 627 24 view .LVU1675
 5894 0064 0146     		mov	r1, r0
 627:src/xeq.c     **** }
 5895              		.loc 1 627 2 view .LVU1676
 5896 0066 0648     		ldr	r0, .L498+12
 5897 0068 FFF7FEFF 		bl	packed_from_number
 5898              	.LVL438:
 5899              	.LBE1748:
 5900              	.LBE1749:
1209:src/xeq.c     **** }
 5901              		.loc 1 1209 9 view .LVU1677
 5902 006c 0448     		ldr	r0, .L498+12
 5903              	.LVL439:
1210:src/xeq.c     **** 
 5904              		.loc 1 1210 1 view .LVU1678
 5905 006e 0BB0     		add	sp, sp, #44
 5906              		.cfi_def_cfa_offset 4
 5907              		@ sp needed
 5908 0070 5DF804FB 		ldr	pc, [sp], #4
 5909              	.L499:
 5910              		.align	2
 5911              	.L498:
 5912 0074 00000000 		.word	cnsts
 5913 0078 00000000 		.word	cnsts_d128
 5914 007c 00000000 		.word	cnsts_d64
 5915 0080 00000000 		.word	.LANCHOR2
 5916              		.cfi_endproc
 5917              	.LFE88:
 5919              		.section	.text.get_reg_n,"ax",%progbits
 5920              		.align	1
 5921              		.p2align 2,,3
 5922              		.global	get_reg_n
 5923              		.syntax unified
 5924              		.thumb
 5925              		.thumb_func
 5926              		.fpu fpv4-sp-d16
 5928              	get_reg_n:
 5929              	.LVL440:
ARM GAS  /tmp/ccK8IvWa.s 			page 228


 5930              	.LFB86:
1164:src/xeq.c     **** 	const int dbl = is_dblmode();
 5931              		.loc 1 1164 28 is_stmt 1 view -0
 5932              		.cfi_startproc
 5933              		@ args = 0, pretend = 0, frame = 0
 5934              		@ frame_needed = 0, uses_anonymous_args = 0
 5935              		@ link register save eliminated.
1165:src/xeq.c     **** 
 5936              		.loc 1 1165 2 view .LVU1680
 5937              	.LBB1750:
 5938              	.LBI1750:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 5939              		.loc 1 918 5 view .LVU1681
 5940              	.LBB1751:
 919:src/xeq.c     **** }
 5941              		.loc 1 919 2 view .LVU1682
 919:src/xeq.c     **** }
 5942              		.loc 1 919 24 is_stmt 0 view .LVU1683
 5943 0000 284A     		ldr	r2, .L515
 5944 0002 B2F8E817 		ldrh	r1, [r2, #2024]
 5945 0006 44F20103 		movw	r3, #16385
 5946 000a 0B40     		ands	r3, r3, r1
 5947 000c A3F58041 		sub	r1, r3, #16384
 5948 0010 B1FA81F1 		clz	r1, r1
 5949              	.LBE1751:
 5950              	.LBE1750:
1167:src/xeq.c     **** 		n -= CONST_REG_BASE;
 5951              		.loc 1 1167 5 view .LVU1684
 5952 0014 B0F5FA6F 		cmp	r0, #2000
 5953              	.LBB1753:
 5954              	.LBB1752:
 919:src/xeq.c     **** }
 5955              		.loc 1 919 24 view .LVU1685
 5956 0018 4FEA5111 		lsr	r1, r1, #5
 5957              	.LVL441:
 919:src/xeq.c     **** }
 5958              		.loc 1 919 24 view .LVU1686
 5959              	.LBE1752:
 5960              	.LBE1753:
1167:src/xeq.c     **** 		n -= CONST_REG_BASE;
 5961              		.loc 1 1167 2 is_stmt 1 view .LVU1687
1167:src/xeq.c     **** 		n -= CONST_REG_BASE;
 5962              		.loc 1 1167 5 is_stmt 0 view .LVU1688
 5963 001c 24DA     		bge	.L512
1171:src/xeq.c     **** 		return get_flash_reg_n(n - FLASH_REG_BASE);
 5964              		.loc 1 1171 2 is_stmt 1 view .LVU1689
1171:src/xeq.c     **** 		return get_flash_reg_n(n - FLASH_REG_BASE);
 5965              		.loc 1 1171 5 is_stmt 0 view .LVU1690
 5966 001e B0F57A7F 		cmp	r0, #1000
 5967 0022 12DA     		bge	.L513
1174:src/xeq.c     **** 		// local register on the return stack
 5968              		.loc 1 1174 2 is_stmt 1 view .LVU1691
1174:src/xeq.c     **** 		// local register on the return stack
 5969              		.loc 1 1174 5 is_stmt 0 view .LVU1692
 5970 0024 6F28     		cmp	r0, #111
1164:src/xeq.c     **** 	const int dbl = is_dblmode();
 5971              		.loc 1 1164 28 view .LVU1693
ARM GAS  /tmp/ccK8IvWa.s 			page 229


 5972 0026 70B4     		push	{r4, r5, r6}
 5973              		.cfi_def_cfa_offset 12
 5974              		.cfi_offset 4, -12
 5975              		.cfi_offset 5, -8
 5976              		.cfi_offset 6, -4
1174:src/xeq.c     **** 		// local register on the return stack
 5977              		.loc 1 1174 5 view .LVU1694
 5978 0028 03DD     		ble	.L503
 5979              	.LBB1754:
 5980              	.LBI1754:
 229:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 5981              		.loc 1 229 5 is_stmt 1 view .LVU1695
 5982              	.LBE1754:
 230:src/xeq.c     **** }
 5983              		.loc 1 230 2 view .LVU1696
 5984              	.LVL442:
 5985              	.LBB1767:
 5986              	.LBB1755:
 5987              	.LBI1755:
 221:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 5988              		.loc 1 221 5 view .LVU1697
 5989              	.LBB1756:
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 5990              		.loc 1 222 2 view .LVU1698
 5991              	.LBE1756:
 5992              	.LBE1755:
 5993              	.LBE1767:
 919:src/xeq.c     **** }
 5994              		.loc 1 919 2 view .LVU1699
 5995              	.LBB1768:
 5996              	.LBB1765:
 5997              	.LBB1763:
 223:src/xeq.c     **** }
 5998              		.loc 1 223 2 view .LVU1700
 5999              	.LBB1757:
 6000              	.LBI1757:
 213:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 6001              		.loc 1 213 5 view .LVU1701
 6002              	.LBB1758:
 214:src/xeq.c     **** }
 6003              		.loc 1 214 2 view .LVU1702
 214:src/xeq.c     **** }
 6004              		.loc 1 214 9 is_stmt 0 view .LVU1703
 6005 002a B2F9DE47 		ldrsh	r4, [r2, #2014]
 214:src/xeq.c     **** }
 6006              		.loc 1 214 57 view .LVU1704
 6007 002e 002C     		cmp	r4, #0
 6008 0030 1EDB     		blt	.L514
 6009              	.LVL443:
 6010              	.L503:
 214:src/xeq.c     **** }
 6011              		.loc 1 214 57 view .LVU1705
 6012              	.LBE1758:
 6013              	.LBE1757:
 6014              	.LBE1763:
 6015              	.LBE1765:
 6016              	.LBE1768:
ARM GAS  /tmp/ccK8IvWa.s 			page 230


1181:src/xeq.c     **** }
 6017              		.loc 1 1181 2 is_stmt 1 view .LVU1706
1181:src/xeq.c     **** }
 6018              		.loc 1 1181 55 is_stmt 0 view .LVU1707
 6019 0032 92F8CF17 		ldrb	r1, [r2, #1999]	@ zero_extendqisi2
1181:src/xeq.c     **** }
 6020              		.loc 1 1181 22 view .LVU1708
 6021 0036 1C4A     		ldr	r2, .L515+4
1181:src/xeq.c     **** }
 6022              		.loc 1 1181 55 view .LVU1709
 6023 0038 C1F16401 		rsb	r1, r1, #100
1181:src/xeq.c     **** }
 6024              		.loc 1 1181 22 view .LVU1710
 6025 003c 02EBC101 		add	r1, r2, r1, lsl #3
1182:src/xeq.c     **** 
 6026              		.loc 1 1182 1 view .LVU1711
 6027 0040 70BC     		pop	{r4, r5, r6}
 6028              		.cfi_restore 6
 6029              		.cfi_restore 5
 6030              		.cfi_restore 4
 6031              		.cfi_def_cfa_offset 0
1181:src/xeq.c     **** }
 6032              		.loc 1 1181 22 view .LVU1712
 6033 0042 02F54872 		add	r2, r2, #800
 6034 0046 FFF7FEBF 		b	reg_address
 6035              	.LVL444:
 6036              	.L513:
1172:src/xeq.c     **** 
 6037              		.loc 1 1172 3 is_stmt 1 view .LVU1713
 6038              	.LBB1769:
 6039              	.LBI1769:
1185:src/xeq.c     **** 	return (REGISTER *) reg_address(n, BackupFlash._regs + TOPREALREG - BackupFlash._numregs,
 6040              		.loc 1 1185 11 view .LVU1714
 6041              	.LBB1770:
1186:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6042              		.loc 1 1186 2 view .LVU1715
1186:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6043              		.loc 1 1186 81 is_stmt 0 view .LVU1716
 6044 004a 184A     		ldr	r2, .L515+8
1186:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6045              		.loc 1 1186 68 view .LVU1717
 6046 004c 92F8CF37 		ldrb	r3, [r2, #1999]	@ zero_extendqisi2
1186:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6047              		.loc 1 1186 22 view .LVU1718
 6048 0050 02F58661 		add	r1, r2, #1072
 6049              	.LVL445:
1186:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6050              		.loc 1 1186 68 view .LVU1719
 6051 0054 C3F16403 		rsb	r3, r3, #100
1186:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6052              		.loc 1 1186 22 view .LVU1720
 6053 0058 A0F57A70 		sub	r0, r0, #1000
 6054              	.LVL446:
1186:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6055              		.loc 1 1186 22 view .LVU1721
 6056 005c 01EBC301 		add	r1, r1, r3, lsl #3
 6057 0060 02F5EA62 		add	r2, r2, #1872
ARM GAS  /tmp/ccK8IvWa.s 			page 231


 6058 0064 FFF7FEBF 		b	reg_address
 6059              	.LVL447:
 6060              	.L512:
1186:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6061              		.loc 1 1186 22 view .LVU1722
 6062              	.LBE1770:
 6063              	.LBE1769:
1168:src/xeq.c     **** 		return get_const(n, dbl);
 6064              		.loc 1 1168 3 is_stmt 1 view .LVU1723
1169:src/xeq.c     **** 	}
 6065              		.loc 1 1169 3 view .LVU1724
1169:src/xeq.c     **** 	}
 6066              		.loc 1 1169 10 is_stmt 0 view .LVU1725
 6067 0068 A0F5FA60 		sub	r0, r0, #2000
 6068              	.LVL448:
1169:src/xeq.c     **** 	}
 6069              		.loc 1 1169 10 view .LVU1726
 6070 006c FFF7FEBF 		b	get_const
 6071              	.LVL449:
 6072              	.L514:
 6073              		.cfi_def_cfa_offset 12
 6074              		.cfi_offset 4, -12
 6075              		.cfi_offset 5, -8
 6076              		.cfi_offset 6, -4
 6077              	.LBB1771:
 6078              	.LBB1766:
 6079              	.LBB1764:
 6080              	.LBB1761:
 6081              	.LBB1759:
 214:src/xeq.c     **** }
 6082              		.loc 1 214 25 view .LVU1727
 6083 0070 0F4D     		ldr	r5, .L515+12
 6084 0072 2D68     		ldr	r5, [r5]
 6085              	.LVL450:
 214:src/xeq.c     **** }
 6086              		.loc 1 214 57 view .LVU1728
 6087 0074 35F81460 		ldrh	r6, [r5, r4, lsl #1]
 6088              	.LBE1759:
 6089              	.LBE1761:
 223:src/xeq.c     **** }
 6090              		.loc 1 223 30 view .LVU1729
 6091 0078 0231     		adds	r1, r1, #2
 6092              	.LVL451:
 6093              	.LBB1762:
 6094              	.LBB1760:
 214:src/xeq.c     **** }
 6095              		.loc 1 214 57 view .LVU1730
 6096 007a C6F30B06 		ubfx	r6, r6, #0, #12
 6097              	.LBE1760:
 6098              	.LBE1762:
 6099              	.LBE1764:
 6100              	.LBE1766:
 6101              	.LBE1771:
1174:src/xeq.c     **** 		// local register on the return stack
 6102              		.loc 1 1174 26 view .LVU1731
 6103 007e 56FA01F1 		asrs	r1, r6, r1
 6104              	.LVL452:
ARM GAS  /tmp/ccK8IvWa.s 			page 232


1174:src/xeq.c     **** 		// local register on the return stack
 6105              		.loc 1 1174 26 view .LVU1732
 6106 0082 D6D0     		beq	.L503
1176:src/xeq.c     **** 		if (dbl)
 6107              		.loc 1 1176 3 is_stmt 1 view .LVU1733
1176:src/xeq.c     **** 		if (dbl)
 6108              		.loc 1 1176 5 is_stmt 0 view .LVU1734
 6109 0084 7038     		subs	r0, r0, #112
 6110              	.LVL453:
1177:src/xeq.c     **** 			n <<= 1;
 6111              		.loc 1 1177 3 is_stmt 1 view .LVU1735
1177:src/xeq.c     **** 			n <<= 1;
 6112              		.loc 1 1177 6 is_stmt 0 view .LVU1736
 6113 0086 B3F5804F 		cmp	r3, #16384
1178:src/xeq.c     **** 		return (REGISTER *) ((decimal64 *) (RetStk + (short)((LocalRegs + 2) & 0xfffe)) + n);
 6114              		.loc 1 1178 4 is_stmt 1 view .LVU1737
1178:src/xeq.c     **** 		return (REGISTER *) ((decimal64 *) (RetStk + (short)((LocalRegs + 2) & 0xfffe)) + n);
 6115              		.loc 1 1178 6 is_stmt 0 view .LVU1738
 6116 008a 08BF     		it	eq
 6117 008c 4000     		lsleq	r0, r0, #1
 6118              	.LVL454:
1179:src/xeq.c     **** 	}
 6119              		.loc 1 1179 3 is_stmt 1 view .LVU1739
1179:src/xeq.c     **** 	}
 6120              		.loc 1 1179 67 is_stmt 0 view .LVU1740
 6121 008e 0234     		adds	r4, r4, #2
1179:src/xeq.c     **** 	}
 6122              		.loc 1 1179 48 view .LVU1741
 6123 0090 24F00104 		bic	r4, r4, #1
1179:src/xeq.c     **** 	}
 6124              		.loc 1 1179 83 view .LVU1742
 6125 0094 C000     		lsls	r0, r0, #3
 6126              	.LVL455:
1179:src/xeq.c     **** 	}
 6127              		.loc 1 1179 10 view .LVU1743
 6128 0096 0223     		movs	r3, #2
 6129              	.LVL456:
1179:src/xeq.c     **** 	}
 6130              		.loc 1 1179 10 view .LVU1744
 6131 0098 14FB0300 		smlabb	r0, r4, r3, r0
 6132 009c 2844     		add	r0, r0, r5
1182:src/xeq.c     **** 
 6133              		.loc 1 1182 1 view .LVU1745
 6134 009e 70BC     		pop	{r4, r5, r6}
 6135              		.cfi_restore 6
 6136              		.cfi_restore 5
 6137              		.cfi_restore 4
 6138              		.cfi_def_cfa_offset 0
 6139 00a0 7047     		bx	lr
 6140              	.L516:
 6141 00a2 00BF     		.align	2
 6142              	.L515:
 6143 00a4 00000000 		.word	PersistentRam
 6144 00a8 30040000 		.word	PersistentRam+1072
 6145 00ac 00000000 		.word	BackupFlash
 6146 00b0 00000000 		.word	RetStk
 6147              		.cfi_endproc
ARM GAS  /tmp/ccK8IvWa.s 			page 233


 6148              	.LFE86:
 6150              		.section	.text.get_stack,"ax",%progbits
 6151              		.align	1
 6152              		.p2align 2,,3
 6153              		.global	get_stack
 6154              		.syntax unified
 6155              		.thumb
 6156              		.thumb_func
 6157              		.fpu fpv4-sp-d16
 6159              	get_stack:
 6160              	.LVL457:
 6161              	.LFB42:
 695:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6162              		.loc 1 695 30 is_stmt 1 view -0
 6163              		.cfi_startproc
 6164              		@ args = 0, pretend = 0, frame = 0
 6165              		@ frame_needed = 0, uses_anonymous_args = 0
 6166              		@ link register save eliminated.
 696:src/xeq.c     **** }
 6167              		.loc 1 696 2 view .LVU1747
 696:src/xeq.c     **** }
 6168              		.loc 1 696 9 is_stmt 0 view .LVU1748
 6169 0000 6430     		adds	r0, r0, #100
 6170              	.LVL458:
 696:src/xeq.c     **** }
 6171              		.loc 1 696 9 view .LVU1749
 6172 0002 FFF7FEBF 		b	get_reg_n
 6173              	.LVL459:
 696:src/xeq.c     **** }
 6174              		.loc 1 696 9 view .LVU1750
 6175              		.cfi_endproc
 6176              	.LFE42:
 6178 0006 00BF     		.section	.text.lift,"ax",%progbits
 6179              		.align	1
 6180              		.p2align 2,,3
 6181              		.global	lift
 6182              		.syntax unified
 6183              		.thumb
 6184              		.thumb_func
 6185              		.fpu fpv4-sp-d16
 6187              	lift:
 6188              	.LFB46:
 713:src/xeq.c     **** 	const int n = stack_size();
 6189              		.loc 1 713 17 is_stmt 1 view -0
 6190              		.cfi_startproc
 6191              		@ args = 0, pretend = 0, frame = 0
 6192              		@ frame_needed = 0, uses_anonymous_args = 0
 714:src/xeq.c     **** 	int i;
 6193              		.loc 1 714 2 view .LVU1752
 6194              	.LBB1772:
 6195              	.LBI1772:
 689:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 6196              		.loc 1 689 5 view .LVU1753
 6197              	.LBB1773:
 690:src/xeq.c     **** 		return 4;
 6198              		.loc 1 690 2 view .LVU1754
 6199              	.LBE1773:
ARM GAS  /tmp/ccK8IvWa.s 			page 234


 6200              	.LBE1772:
 713:src/xeq.c     **** 	const int n = stack_size();
 6201              		.loc 1 713 17 is_stmt 0 view .LVU1755
 6202 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 6203              		.cfi_def_cfa_offset 24
 6204              		.cfi_offset 3, -24
 6205              		.cfi_offset 4, -20
 6206              		.cfi_offset 5, -16
 6207              		.cfi_offset 6, -12
 6208              		.cfi_offset 7, -8
 6209              		.cfi_offset 14, -4
 6210              	.LBB1778:
 6211              	.LBB1776:
 690:src/xeq.c     **** 		return 4;
 6212              		.loc 1 690 6 view .LVU1756
 6213 0002 174E     		ldr	r6, .L529
 6214 0004 96F8EA37 		ldrb	r3, [r6, #2026]	@ zero_extendqisi2
 690:src/xeq.c     **** 		return 4;
 6215              		.loc 1 690 5 view .LVU1757
 6216 0008 1B07     		lsls	r3, r3, #28
 6217 000a 27D5     		bpl	.L522
 6218              	.LBB1774:
 6219              	.LBI1774:
 181:src/xeq.c     **** 	return isXROM(state_pc());
 6220              		.loc 1 181 5 is_stmt 1 view .LVU1758
 6221              	.LBB1775:
 182:src/xeq.c     **** }
 6222              		.loc 1 182 2 view .LVU1759
 182:src/xeq.c     **** }
 6223              		.loc 1 182 9 is_stmt 0 view .LVU1760
 6224 000c B6F8E037 		ldrh	r3, [r6, #2016]
 6225              	.LBE1775:
 6226              	.LBE1774:
 690:src/xeq.c     **** 		return 4;
 6227              		.loc 1 690 27 view .LVU1761
 6228 0010 9B0B     		lsrs	r3, r3, #14
 6229 0012 032B     		cmp	r3, #3
 6230 0014 1AD0     		beq	.L528
 6231 0016 0724     		movs	r4, #7
 6232              	.L519:
 6233              	.LBE1776:
 6234              	.LBE1778:
 715:src/xeq.c     **** 	for (i=n-1; i>0; i--)
 6235              		.loc 1 715 2 is_stmt 1 view .LVU1762
 716:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6236              		.loc 1 716 2 view .LVU1763
 716:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6237              		.loc 1 716 14 view .LVU1764
 6238 0018 6434     		adds	r4, r4, #100
 6239              	.LBB1779:
 6240              	.LBB1780:
 6241              	.LBB1781:
 6242              	.LBB1782:
 919:src/xeq.c     **** }
 6243              		.loc 1 919 24 is_stmt 0 view .LVU1765
 6244 001a 44F20107 		movw	r7, #16385
 6245              	.L521:
ARM GAS  /tmp/ccK8IvWa.s 			page 235


 6246              	.LVL460:
 919:src/xeq.c     **** }
 6247              		.loc 1 919 24 view .LVU1766
 6248              	.LBE1782:
 6249              	.LBE1781:
 6250              	.LBE1780:
 6251              	.LBE1779:
 717:src/xeq.c     **** }
 6252              		.loc 1 717 3 is_stmt 1 view .LVU1767
 6253              	.LBB1789:
 6254              	.LBI1789:
 695:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6255              		.loc 1 695 11 view .LVU1768
 6256              	.LBB1790:
 696:src/xeq.c     **** }
 6257              		.loc 1 696 2 view .LVU1769
 696:src/xeq.c     **** }
 6258              		.loc 1 696 9 is_stmt 0 view .LVU1770
 6259 001e 2046     		mov	r0, r4
 6260 0020 FFF7FEFF 		bl	get_reg_n
 6261              	.LVL461:
 6262              	.LBE1790:
 6263              	.LBE1789:
 6264              	.LBB1792:
 6265              	.LBB1793:
 6266 0024 013C     		subs	r4, r4, #1
 6267              	.LVL462:
 696:src/xeq.c     **** }
 6268              		.loc 1 696 9 view .LVU1771
 6269              	.LBE1793:
 6270              	.LBE1792:
 6271              	.LBB1797:
 6272              	.LBB1791:
 6273 0026 0546     		mov	r5, r0
 6274              	.LBE1791:
 6275              	.LBE1797:
 6276              	.LBB1798:
 6277              	.LBB1794:
 6278 0028 2046     		mov	r0, r4
 6279              	.LVL463:
 696:src/xeq.c     **** }
 6280              		.loc 1 696 9 view .LVU1772
 6281              	.LBE1794:
 6282              	.LBI1792:
 695:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6283              		.loc 1 695 11 is_stmt 1 view .LVU1773
 6284              	.LBB1795:
 696:src/xeq.c     **** }
 6285              		.loc 1 696 2 view .LVU1774
 696:src/xeq.c     **** }
 6286              		.loc 1 696 9 is_stmt 0 view .LVU1775
 6287 002a FFF7FEFF 		bl	get_reg_n
 6288              	.LVL464:
 696:src/xeq.c     **** }
 6289              		.loc 1 696 9 view .LVU1776
 6290              	.LBE1795:
 6291              	.LBE1798:
ARM GAS  /tmp/ccK8IvWa.s 			page 236


 6292              	.LBB1799:
 6293              	.LBB1787:
 6294              	.LBB1785:
 6295              	.LBB1783:
 919:src/xeq.c     **** }
 6296              		.loc 1 919 24 view .LVU1777
 6297 002e B6F8E837 		ldrh	r3, [r6, #2024]
 6298              	.LBE1783:
 6299              	.LBE1785:
 704:src/xeq.c     **** }
 6300              		.loc 1 704 2 view .LVU1778
 6301 0032 3B40     		ands	r3, r3, r7
 6302 0034 B3F5804F 		cmp	r3, #16384
 6303              	.LBE1787:
 6304              	.LBE1799:
 6305              	.LBB1800:
 6306              	.LBB1796:
 696:src/xeq.c     **** }
 6307              		.loc 1 696 9 view .LVU1779
 6308 0038 0146     		mov	r1, r0
 6309              	.LVL465:
 696:src/xeq.c     **** }
 6310              		.loc 1 696 9 view .LVU1780
 6311              	.LBE1796:
 6312              	.LBE1800:
 6313              	.LBB1801:
 6314              	.LBI1779:
 703:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6315              		.loc 1 703 6 is_stmt 1 view .LVU1781
 6316              	.LBB1788:
 704:src/xeq.c     **** }
 6317              		.loc 1 704 2 view .LVU1782
 6318              	.LBB1786:
 6319              	.LBI1781:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6320              		.loc 1 918 5 view .LVU1783
 6321              	.LBB1784:
 919:src/xeq.c     **** }
 6322              		.loc 1 919 2 view .LVU1784
 6323              	.LBE1784:
 6324              	.LBE1786:
 704:src/xeq.c     **** }
 6325              		.loc 1 704 2 is_stmt 0 view .LVU1785
 6326 003a 0CBF     		ite	eq
 6327 003c 1022     		moveq	r2, #16
 6328 003e 0822     		movne	r2, #8
 6329 0040 2846     		mov	r0, r5
 6330              	.LVL466:
 704:src/xeq.c     **** }
 6331              		.loc 1 704 2 view .LVU1786
 6332 0042 FFF7FEFF 		bl	xcopy
 6333              	.LVL467:
 704:src/xeq.c     **** }
 6334              		.loc 1 704 2 view .LVU1787
 6335              	.LBE1788:
 6336              	.LBE1801:
 716:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
ARM GAS  /tmp/ccK8IvWa.s 			page 237


 6337              		.loc 1 716 19 is_stmt 1 view .LVU1788
 716:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6338              		.loc 1 716 14 view .LVU1789
 716:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6339              		.loc 1 716 2 is_stmt 0 view .LVU1790
 6340 0046 642C     		cmp	r4, #100
 6341 0048 E9D1     		bne	.L521
 718:src/xeq.c     **** 
 6342              		.loc 1 718 1 view .LVU1791
 6343 004a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 6344              	.LVL468:
 6345              	.L528:
 6346              	.LBB1802:
 6347              	.LBB1777:
 690:src/xeq.c     **** 		return 4;
 6348              		.loc 1 690 44 view .LVU1792
 6349 004c 054B     		ldr	r3, .L529+4
 690:src/xeq.c     **** 		return 4;
 6350              		.loc 1 690 41 view .LVU1793
 6351 004e 93F90130 		ldrsb	r3, [r3, #1]
 6352 0052 002B     		cmp	r3, #0
 6353 0054 B4BF     		ite	lt
 6354 0056 0724     		movlt	r4, #7
 6355 0058 0324     		movge	r4, #3
 6356 005a DDE7     		b	.L519
 6357              	.L522:
 6358 005c 0324     		movs	r4, #3
 6359 005e DBE7     		b	.L519
 6360              	.L530:
 6361              		.align	2
 6362              	.L529:
 6363 0060 00000000 		.word	PersistentRam
 6364 0064 00000000 		.word	XromParams
 6365              	.LBE1777:
 6366              	.LBE1802:
 6367              		.cfi_endproc
 6368              	.LFE46:
 6370              		.section	.text.lift_if_enabled,"ax",%progbits
 6371              		.align	1
 6372              		.p2align 2,,3
 6373              		.global	lift_if_enabled
 6374              		.syntax unified
 6375              		.thumb
 6376              		.thumb_func
 6377              		.fpu fpv4-sp-d16
 6379              	lift_if_enabled:
 6380              	.LFB48:
 724:src/xeq.c     **** 	if (get_lift())
 6381              		.loc 1 724 28 is_stmt 1 view -0
 6382              		.cfi_startproc
 6383              		@ args = 0, pretend = 0, frame = 0
 6384              		@ frame_needed = 0, uses_anonymous_args = 0
 6385              		@ link register save eliminated.
 725:src/xeq.c     **** 		lift();
 6386              		.loc 1 725 2 view .LVU1795
 6387              	.LBB1803:
 6388              	.LBI1803:
ARM GAS  /tmp/ccK8IvWa.s 			page 238


 720:src/xeq.c     **** 	return State2.state_lift;
 6389              		.loc 1 720 12 view .LVU1796
 6390              	.LBB1804:
 721:src/xeq.c     **** }
 6391              		.loc 1 721 2 view .LVU1797
 721:src/xeq.c     **** }
 6392              		.loc 1 721 15 is_stmt 0 view .LVU1798
 6393 0000 034B     		ldr	r3, .L534
 6394 0002 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 6395              	.LBE1804:
 6396              	.LBE1803:
 725:src/xeq.c     **** 		lift();
 6397              		.loc 1 725 5 view .LVU1799
 6398 0004 5B06     		lsls	r3, r3, #25
 6399 0006 00D4     		bmi	.L533
 727:src/xeq.c     **** 
 6400              		.loc 1 727 1 view .LVU1800
 6401 0008 7047     		bx	lr
 6402              	.L533:
 726:src/xeq.c     **** }
 6403              		.loc 1 726 3 is_stmt 1 view .LVU1801
 6404 000a FFF7FEBF 		b	lift
 6405              	.LVL469:
 6406              	.L535:
 6407 000e 00BF     		.align	2
 6408              	.L534:
 6409 0010 00000000 		.word	StateWhileOn
 6410              		.cfi_endproc
 6411              	.LFE48:
 6413              		.section	.text.lower,"ax",%progbits
 6414              		.align	1
 6415              		.p2align 2,,3
 6416              		.syntax unified
 6417              		.thumb
 6418              		.thumb_func
 6419              		.fpu fpv4-sp-d16
 6421              	lower:
 6422              	.LFB52:
 742:src/xeq.c     **** 	const int n = stack_size();
 6423              		.loc 1 742 25 view -0
 6424              		.cfi_startproc
 6425              		@ args = 0, pretend = 0, frame = 0
 6426              		@ frame_needed = 0, uses_anonymous_args = 0
 743:src/xeq.c     **** 	int i;
 6427              		.loc 1 743 2 view .LVU1803
 6428              	.LBB1805:
 6429              	.LBI1805:
 689:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 6430              		.loc 1 689 5 view .LVU1804
 6431              	.LBB1806:
 690:src/xeq.c     **** 		return 4;
 6432              		.loc 1 690 2 view .LVU1805
 6433              	.LBE1806:
 6434              	.LBE1805:
 742:src/xeq.c     **** 	const int n = stack_size();
 6435              		.loc 1 742 25 is_stmt 0 view .LVU1806
 6436 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
ARM GAS  /tmp/ccK8IvWa.s 			page 239


 6437              		.cfi_def_cfa_offset 24
 6438              		.cfi_offset 4, -24
 6439              		.cfi_offset 5, -20
 6440              		.cfi_offset 6, -16
 6441              		.cfi_offset 7, -12
 6442              		.cfi_offset 8, -8
 6443              		.cfi_offset 14, -4
 6444              	.LBB1812:
 6445              	.LBB1809:
 690:src/xeq.c     **** 		return 4;
 6446              		.loc 1 690 6 view .LVU1807
 6447 0004 184F     		ldr	r7, .L547
 6448 0006 97F8EA37 		ldrb	r3, [r7, #2026]	@ zero_extendqisi2
 690:src/xeq.c     **** 		return 4;
 6449              		.loc 1 690 5 view .LVU1808
 6450 000a 1B07     		lsls	r3, r3, #28
 6451 000c 2AD5     		bpl	.L540
 6452              	.LBB1807:
 6453              	.LBI1807:
 181:src/xeq.c     **** 	return isXROM(state_pc());
 6454              		.loc 1 181 5 is_stmt 1 view .LVU1809
 6455              	.LBB1808:
 182:src/xeq.c     **** }
 6456              		.loc 1 182 2 view .LVU1810
 182:src/xeq.c     **** }
 6457              		.loc 1 182 9 is_stmt 0 view .LVU1811
 6458 000e B7F8E037 		ldrh	r3, [r7, #2016]
 6459              	.LBE1808:
 6460              	.LBE1807:
 690:src/xeq.c     **** 		return 4;
 6461              		.loc 1 690 27 view .LVU1812
 6462 0012 9B0B     		lsrs	r3, r3, #14
 6463 0014 032B     		cmp	r3, #3
 6464 0016 1DD0     		beq	.L546
 692:src/xeq.c     **** }
 6465              		.loc 1 692 9 view .LVU1813
 6466 0018 0826     		movs	r6, #8
 6467              	.L537:
 6468              	.LVL470:
 692:src/xeq.c     **** }
 6469              		.loc 1 692 9 view .LVU1814
 6470              	.LBE1809:
 6471              	.LBE1812:
 744:src/xeq.c     **** 
 6472              		.loc 1 744 2 is_stmt 1 view .LVU1815
 746:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6473              		.loc 1 746 2 view .LVU1816
 746:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6474              		.loc 1 746 12 view .LVU1817
 6475 001a 6336     		adds	r6, r6, #99
 6476              	.LVL471:
 6477              	.LBB1813:
 6478              	.LBB1810:
 691:src/xeq.c     **** 	return 8;
 6479              		.loc 1 691 10 is_stmt 0 view .LVU1818
 6480 001c 6424     		movs	r4, #100
 6481              	.LBE1810:
ARM GAS  /tmp/ccK8IvWa.s 			page 240


 6482              	.LBE1813:
 6483              	.LBB1814:
 6484              	.LBB1815:
 6485              	.LBB1816:
 6486              	.LBB1817:
 919:src/xeq.c     **** }
 6487              		.loc 1 919 24 view .LVU1819
 6488 001e 44F20108 		movw	r8, #16385
 6489              	.LVL472:
 6490              	.L539:
 919:src/xeq.c     **** }
 6491              		.loc 1 919 24 view .LVU1820
 6492              	.LBE1817:
 6493              	.LBE1816:
 6494              	.LBE1815:
 6495              	.LBE1814:
 747:src/xeq.c     **** }
 6496              		.loc 1 747 3 is_stmt 1 discriminator 3 view .LVU1821
 6497              	.LBB1824:
 6498              	.LBI1824:
 695:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6499              		.loc 1 695 11 discriminator 3 view .LVU1822
 6500              	.LBB1825:
 696:src/xeq.c     **** }
 6501              		.loc 1 696 2 discriminator 3 view .LVU1823
 696:src/xeq.c     **** }
 6502              		.loc 1 696 9 is_stmt 0 discriminator 3 view .LVU1824
 6503 0022 2046     		mov	r0, r4
 6504 0024 FFF7FEFF 		bl	get_reg_n
 6505              	.LVL473:
 6506 0028 0134     		adds	r4, r4, #1
 6507              	.LVL474:
 696:src/xeq.c     **** }
 6508              		.loc 1 696 9 discriminator 3 view .LVU1825
 6509 002a 0546     		mov	r5, r0
 6510              	.LBE1825:
 6511              	.LBE1824:
 6512              	.LBB1826:
 6513              	.LBB1827:
 6514 002c 2046     		mov	r0, r4
 6515              	.LVL475:
 696:src/xeq.c     **** }
 6516              		.loc 1 696 9 discriminator 3 view .LVU1826
 6517              	.LBE1827:
 6518              	.LBI1826:
 695:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6519              		.loc 1 695 11 is_stmt 1 discriminator 3 view .LVU1827
 6520              	.LBB1828:
 696:src/xeq.c     **** }
 6521              		.loc 1 696 2 discriminator 3 view .LVU1828
 696:src/xeq.c     **** }
 6522              		.loc 1 696 9 is_stmt 0 discriminator 3 view .LVU1829
 6523 002e FFF7FEFF 		bl	get_reg_n
 6524              	.LVL476:
 696:src/xeq.c     **** }
 6525              		.loc 1 696 9 discriminator 3 view .LVU1830
 6526              	.LBE1828:
ARM GAS  /tmp/ccK8IvWa.s 			page 241


 6527              	.LBE1826:
 6528              	.LBB1830:
 6529              	.LBB1822:
 6530              	.LBB1820:
 6531              	.LBB1818:
 919:src/xeq.c     **** }
 6532              		.loc 1 919 24 discriminator 3 view .LVU1831
 6533 0032 B7F8E837 		ldrh	r3, [r7, #2024]
 6534              	.LBE1818:
 6535              	.LBE1820:
 704:src/xeq.c     **** }
 6536              		.loc 1 704 2 discriminator 3 view .LVU1832
 6537 0036 08EA0303 		and	r3, r8, r3
 6538 003a B3F5804F 		cmp	r3, #16384
 6539              	.LBE1822:
 6540              	.LBE1830:
 6541              	.LBB1831:
 6542              	.LBB1829:
 696:src/xeq.c     **** }
 6543              		.loc 1 696 9 discriminator 3 view .LVU1833
 6544 003e 0146     		mov	r1, r0
 6545              	.LVL477:
 696:src/xeq.c     **** }
 6546              		.loc 1 696 9 discriminator 3 view .LVU1834
 6547              	.LBE1829:
 6548              	.LBE1831:
 6549              	.LBB1832:
 6550              	.LBI1814:
 703:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6551              		.loc 1 703 6 is_stmt 1 discriminator 3 view .LVU1835
 6552              	.LBB1823:
 704:src/xeq.c     **** }
 6553              		.loc 1 704 2 discriminator 3 view .LVU1836
 6554              	.LBB1821:
 6555              	.LBI1816:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6556              		.loc 1 918 5 discriminator 3 view .LVU1837
 6557              	.LBB1819:
 919:src/xeq.c     **** }
 6558              		.loc 1 919 2 discriminator 3 view .LVU1838
 6559              	.LBE1819:
 6560              	.LBE1821:
 704:src/xeq.c     **** }
 6561              		.loc 1 704 2 is_stmt 0 discriminator 3 view .LVU1839
 6562 0040 0CBF     		ite	eq
 6563 0042 1022     		moveq	r2, #16
 6564 0044 0822     		movne	r2, #8
 6565 0046 2846     		mov	r0, r5
 6566              	.LVL478:
 704:src/xeq.c     **** }
 6567              		.loc 1 704 2 discriminator 3 view .LVU1840
 6568 0048 FFF7FEFF 		bl	xcopy
 6569              	.LVL479:
 704:src/xeq.c     **** }
 6570              		.loc 1 704 2 discriminator 3 view .LVU1841
 6571              	.LBE1823:
 6572              	.LBE1832:
ARM GAS  /tmp/ccK8IvWa.s 			page 242


 746:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6573              		.loc 1 746 17 is_stmt 1 discriminator 3 view .LVU1842
 746:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6574              		.loc 1 746 12 discriminator 3 view .LVU1843
 746:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6575              		.loc 1 746 2 is_stmt 0 discriminator 3 view .LVU1844
 6576 004c B442     		cmp	r4, r6
 6577 004e E8D1     		bne	.L539
 748:src/xeq.c     **** 
 6578              		.loc 1 748 1 view .LVU1845
 6579 0050 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 6580              	.LVL480:
 6581              	.L546:
 6582              	.LBB1833:
 6583              	.LBB1811:
 690:src/xeq.c     **** 		return 4;
 6584              		.loc 1 690 44 view .LVU1846
 6585 0054 054B     		ldr	r3, .L547+4
 690:src/xeq.c     **** 		return 4;
 6586              		.loc 1 690 41 view .LVU1847
 6587 0056 93F90130 		ldrsb	r3, [r3, #1]
 691:src/xeq.c     **** 	return 8;
 6588              		.loc 1 691 10 view .LVU1848
 6589 005a 002B     		cmp	r3, #0
 6590 005c B4BF     		ite	lt
 6591 005e 0826     		movlt	r6, #8
 6592 0060 0426     		movge	r6, #4
 6593 0062 DAE7     		b	.L537
 6594              	.L540:
 6595 0064 0426     		movs	r6, #4
 6596 0066 D8E7     		b	.L537
 6597              	.L548:
 6598              		.align	2
 6599              	.L547:
 6600 0068 00000000 		.word	PersistentRam
 6601 006c 00000000 		.word	XromParams
 6602              	.LBE1811:
 6603              	.LBE1833:
 6604              		.cfi_endproc
 6605              	.LFE52:
 6607              		.section	.text.get_stack_top,"ax",%progbits
 6608              		.align	1
 6609              		.p2align 2,,3
 6610              		.syntax unified
 6611              		.thumb
 6612              		.thumb_func
 6613              		.fpu fpv4-sp-d16
 6615              	get_stack_top:
 6616              	.LFB43:
 699:src/xeq.c     **** 	return get_stack(stack_size()-1);
 6617              		.loc 1 699 38 is_stmt 1 view -0
 6618              		.cfi_startproc
 6619              		@ args = 0, pretend = 0, frame = 0
 6620              		@ frame_needed = 0, uses_anonymous_args = 0
 6621              		@ link register save eliminated.
 700:src/xeq.c     **** }
 6622              		.loc 1 700 2 view .LVU1850
ARM GAS  /tmp/ccK8IvWa.s 			page 243


 6623              	.LBB1834:
 6624              	.LBI1834:
 689:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 6625              		.loc 1 689 5 view .LVU1851
 6626              	.LBB1835:
 690:src/xeq.c     **** 		return 4;
 6627              		.loc 1 690 2 view .LVU1852
 690:src/xeq.c     **** 		return 4;
 6628              		.loc 1 690 6 is_stmt 0 view .LVU1853
 6629 0000 0C4B     		ldr	r3, .L555
 6630 0002 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 690:src/xeq.c     **** 		return 4;
 6631              		.loc 1 690 5 view .LVU1854
 6632 0006 1207     		lsls	r2, r2, #28
 6633 0008 10D5     		bpl	.L551
 6634              	.LBB1836:
 6635              	.LBI1836:
 181:src/xeq.c     **** 	return isXROM(state_pc());
 6636              		.loc 1 181 5 is_stmt 1 view .LVU1855
 6637              	.LBB1837:
 182:src/xeq.c     **** }
 6638              		.loc 1 182 2 view .LVU1856
 182:src/xeq.c     **** }
 6639              		.loc 1 182 9 is_stmt 0 view .LVU1857
 6640 000a B3F8E037 		ldrh	r3, [r3, #2016]
 6641              	.LBE1837:
 6642              	.LBE1836:
 690:src/xeq.c     **** 		return 4;
 6643              		.loc 1 690 27 view .LVU1858
 6644 000e 9B0B     		lsrs	r3, r3, #14
 6645 0010 032B     		cmp	r3, #3
 6646 0012 02D0     		beq	.L554
 6647 0014 6B20     		movs	r0, #107
 6648              	.LBE1835:
 6649              	.LBE1834:
 6650              	.LBB1840:
 6651              	.LBI1840:
 695:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6652              		.loc 1 695 11 is_stmt 1 view .LVU1859
 6653              	.LBB1841:
 696:src/xeq.c     **** }
 6654              		.loc 1 696 2 view .LVU1860
 696:src/xeq.c     **** }
 6655              		.loc 1 696 9 is_stmt 0 view .LVU1861
 6656 0016 FFF7FEBF 		b	get_reg_n
 6657              	.LVL481:
 6658              	.L554:
 6659              	.LBE1841:
 6660              	.LBE1840:
 6661              	.LBB1844:
 6662              	.LBB1838:
 690:src/xeq.c     **** 		return 4;
 6663              		.loc 1 690 44 view .LVU1862
 6664 001a 074B     		ldr	r3, .L555+4
 690:src/xeq.c     **** 		return 4;
 6665              		.loc 1 690 41 view .LVU1863
 6666 001c 93F90130 		ldrsb	r3, [r3, #1]
ARM GAS  /tmp/ccK8IvWa.s 			page 244


 6667 0020 002B     		cmp	r3, #0
 6668 0022 B4BF     		ite	lt
 6669 0024 6B20     		movlt	r0, #107
 6670 0026 6720     		movge	r0, #103
 6671              	.LBE1838:
 6672              	.LBE1844:
 6673              	.LBB1845:
 695:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6674              		.loc 1 695 11 is_stmt 1 view .LVU1864
 6675              	.LBB1842:
 696:src/xeq.c     **** }
 6676              		.loc 1 696 2 view .LVU1865
 696:src/xeq.c     **** }
 6677              		.loc 1 696 9 is_stmt 0 view .LVU1866
 6678 0028 FFF7FEBF 		b	get_reg_n
 6679              	.LVL482:
 6680              	.L551:
 6681              	.LBE1842:
 6682              	.LBE1845:
 6683              	.LBB1846:
 6684              	.LBB1839:
 6685 002c 6720     		movs	r0, #103
 6686              	.LBE1839:
 6687              	.LBE1846:
 6688              	.LBB1847:
 695:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6689              		.loc 1 695 11 is_stmt 1 view .LVU1867
 6690              	.LBB1843:
 696:src/xeq.c     **** }
 6691              		.loc 1 696 2 view .LVU1868
 696:src/xeq.c     **** }
 6692              		.loc 1 696 9 is_stmt 0 view .LVU1869
 6693 002e FFF7FEBF 		b	get_reg_n
 6694              	.LVL483:
 6695              	.L556:
 6696 0032 00BF     		.align	2
 6697              	.L555:
 6698 0034 00000000 		.word	PersistentRam
 6699 0038 00000000 		.word	XromParams
 6700              	.LBE1843:
 6701              	.LBE1847:
 6702              		.cfi_endproc
 6703              	.LFE43:
 6705              		.section	.text.roll_down,"ax",%progbits
 6706              		.align	1
 6707              		.p2align 2,,3
 6708              		.global	roll_down
 6709              		.syntax unified
 6710              		.thumb
 6711              		.thumb_func
 6712              		.fpu fpv4-sp-d16
 6714              	roll_down:
 6715              	.LVL484:
 6716              	.LFB69:
 853:src/xeq.c     **** 	REGISTER r;
 6717              		.loc 1 853 31 is_stmt 1 view -0
 6718              		.cfi_startproc
ARM GAS  /tmp/ccK8IvWa.s 			page 245


 6719              		@ args = 0, pretend = 0, frame = 16
 6720              		@ frame_needed = 0, uses_anonymous_args = 0
 854:src/xeq.c     **** 	copyreg(&r, StackBase);
 6721              		.loc 1 854 2 view .LVU1871
 855:src/xeq.c     **** 	lower();
 6722              		.loc 1 855 2 view .LVU1872
 853:src/xeq.c     **** 	REGISTER r;
 6723              		.loc 1 853 31 is_stmt 0 view .LVU1873
 6724 0000 30B5     		push	{r4, r5, lr}
 6725              		.cfi_def_cfa_offset 12
 6726              		.cfi_offset 4, -12
 6727              		.cfi_offset 5, -8
 6728              		.cfi_offset 14, -4
 6729              	.LBB1848:
 6730              	.LBB1849:
 6731              	.LBB1850:
 6732              	.LBB1851:
 919:src/xeq.c     **** }
 6733              		.loc 1 919 24 view .LVU1874
 6734 0002 114D     		ldr	r5, .L563
 6735              	.LBE1851:
 6736              	.LBE1850:
 6737              	.LBE1849:
 6738              	.LBE1848:
 855:src/xeq.c     **** 	lower();
 6739              		.loc 1 855 2 view .LVU1875
 6740 0004 114A     		ldr	r2, .L563+4
 6741              	.LBB1860:
 6742              	.LBB1858:
 6743              	.LBB1855:
 6744              	.LBB1852:
 919:src/xeq.c     **** }
 6745              		.loc 1 919 24 view .LVU1876
 6746 0006 B5F8E837 		ldrh	r3, [r5, #2024]
 6747              	.LBE1852:
 6748              	.LBE1855:
 704:src/xeq.c     **** }
 6749              		.loc 1 704 2 view .LVU1877
 6750 000a 1168     		ldr	r1, [r2]
 6751              	.LBB1856:
 6752              	.LBB1853:
 919:src/xeq.c     **** }
 6753              		.loc 1 919 24 view .LVU1878
 6754 000c 44F20104 		movw	r4, #16385
 6755              	.LBE1853:
 6756              	.LBE1856:
 704:src/xeq.c     **** }
 6757              		.loc 1 704 2 view .LVU1879
 6758 0010 2340     		ands	r3, r3, r4
 6759              	.LBE1858:
 6760              	.LBE1860:
 853:src/xeq.c     **** 	REGISTER r;
 6761              		.loc 1 853 31 view .LVU1880
 6762 0012 85B0     		sub	sp, sp, #20
 6763              		.cfi_def_cfa_offset 32
 6764              	.LVL485:
 6765              	.LBB1861:
ARM GAS  /tmp/ccK8IvWa.s 			page 246


 6766              	.LBI1848:
 703:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6767              		.loc 1 703 6 is_stmt 1 view .LVU1881
 6768              	.LBB1859:
 704:src/xeq.c     **** }
 6769              		.loc 1 704 2 view .LVU1882
 6770              	.LBB1857:
 6771              	.LBI1850:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6772              		.loc 1 918 5 view .LVU1883
 6773              	.LBB1854:
 919:src/xeq.c     **** }
 6774              		.loc 1 919 2 view .LVU1884
 6775              	.LBE1854:
 6776              	.LBE1857:
 704:src/xeq.c     **** }
 6777              		.loc 1 704 2 is_stmt 0 view .LVU1885
 6778 0014 B3F5804F 		cmp	r3, #16384
 6779 0018 0CBF     		ite	eq
 6780 001a 1022     		moveq	r2, #16
 6781 001c 0822     		movne	r2, #8
 6782 001e 6846     		mov	r0, sp
 6783              	.LVL486:
 704:src/xeq.c     **** }
 6784              		.loc 1 704 2 view .LVU1886
 6785 0020 FFF7FEFF 		bl	xcopy
 6786              	.LVL487:
 704:src/xeq.c     **** }
 6787              		.loc 1 704 2 view .LVU1887
 6788              	.LBE1859:
 6789              	.LBE1861:
 856:src/xeq.c     **** 	copyreg(get_stack_top(), &r);
 6790              		.loc 1 856 2 is_stmt 1 view .LVU1888
 6791 0024 FFF7FEFF 		bl	lower
 6792              	.LVL488:
 857:src/xeq.c     **** }
 6793              		.loc 1 857 2 view .LVU1889
 6794 0028 FFF7FEFF 		bl	get_stack_top
 6795              	.LVL489:
 6796              	.LBB1862:
 6797              	.LBI1862:
 703:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6798              		.loc 1 703 6 view .LVU1890
 6799              	.LBB1863:
 704:src/xeq.c     **** }
 6800              		.loc 1 704 2 view .LVU1891
 6801              	.LBB1864:
 6802              	.LBI1864:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6803              		.loc 1 918 5 view .LVU1892
 6804              	.LBB1865:
 919:src/xeq.c     **** }
 6805              		.loc 1 919 2 view .LVU1893
 919:src/xeq.c     **** }
 6806              		.loc 1 919 24 is_stmt 0 view .LVU1894
 6807 002c B5F8E837 		ldrh	r3, [r5, #2024]
 6808              	.LBE1865:
ARM GAS  /tmp/ccK8IvWa.s 			page 247


 6809              	.LBE1864:
 704:src/xeq.c     **** }
 6810              		.loc 1 704 2 view .LVU1895
 6811 0030 1C40     		ands	r4, r4, r3
 6812 0032 B4F5804F 		cmp	r4, #16384
 6813 0036 6946     		mov	r1, sp
 6814 0038 0CBF     		ite	eq
 6815 003a 1022     		moveq	r2, #16
 6816 003c 0822     		movne	r2, #8
 6817 003e FFF7FEFF 		bl	xcopy
 6818              	.LVL490:
 704:src/xeq.c     **** }
 6819              		.loc 1 704 2 view .LVU1896
 6820              	.LBE1863:
 6821              	.LBE1862:
 858:src/xeq.c     **** 
 6822              		.loc 1 858 1 view .LVU1897
 6823 0042 05B0     		add	sp, sp, #20
 6824              		.cfi_def_cfa_offset 12
 6825              		@ sp needed
 6826 0044 30BD     		pop	{r4, r5, pc}
 6827              	.L564:
 6828 0046 00BF     		.align	2
 6829              	.L563:
 6830 0048 00000000 		.word	PersistentRam
 6831 004c 00000000 		.word	StackBase
 6832              		.cfi_endproc
 6833              	.LFE69:
 6835              		.section	.text.cpx_roll_down,"ax",%progbits
 6836              		.align	1
 6837              		.p2align 2,,3
 6838              		.global	cpx_roll_down
 6839              		.syntax unified
 6840              		.thumb
 6841              		.thumb_func
 6842              		.fpu fpv4-sp-d16
 6844              	cpx_roll_down:
 6845              	.LVL491:
 6846              	.LFB71:
 867:src/xeq.c     **** 	roll_down(OP_RDOWN);
 6847              		.loc 1 867 35 is_stmt 1 view -0
 6848              		.cfi_startproc
 6849              		@ args = 0, pretend = 0, frame = 0
 6850              		@ frame_needed = 0, uses_anonymous_args = 0
 868:src/xeq.c     **** 	roll_down(OP_RDOWN);
 6851              		.loc 1 868 2 view .LVU1899
 867:src/xeq.c     **** 	roll_down(OP_RDOWN);
 6852              		.loc 1 867 35 is_stmt 0 view .LVU1900
 6853 0000 08B5     		push	{r3, lr}
 6854              		.cfi_def_cfa_offset 8
 6855              		.cfi_offset 3, -8
 6856              		.cfi_offset 14, -4
 868:src/xeq.c     **** 	roll_down(OP_RDOWN);
 6857              		.loc 1 868 2 view .LVU1901
 6858 0002 0720     		movs	r0, #7
 6859              	.LVL492:
 868:src/xeq.c     **** 	roll_down(OP_RDOWN);
ARM GAS  /tmp/ccK8IvWa.s 			page 248


 6860              		.loc 1 868 2 view .LVU1902
 6861 0004 FFF7FEFF 		bl	roll_down
 6862              	.LVL493:
 869:src/xeq.c     **** 	set_was_complex();
 6863              		.loc 1 869 2 is_stmt 1 view .LVU1903
 6864 0008 0720     		movs	r0, #7
 6865 000a FFF7FEFF 		bl	roll_down
 6866              	.LVL494:
 870:src/xeq.c     **** }
 6867              		.loc 1 870 2 view .LVU1904
 6868              	.LBB1866:
 6869              	.LBI1866:
 516:src/xeq.c     **** 	State2.wascomplex = 1;
 6870              		.loc 1 516 13 view .LVU1905
 6871              	.LBB1867:
 517:src/xeq.c     **** }
 6872              		.loc 1 517 2 view .LVU1906
 517:src/xeq.c     **** }
 6873              		.loc 1 517 20 is_stmt 0 view .LVU1907
 6874 000e 034B     		ldr	r3, .L567
 6875 0010 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 6876 0012 0121     		movs	r1, #1
 6877 0014 61F38712 		bfi	r2, r1, #6, #2
 6878 0018 1A75     		strb	r2, [r3, #20]
 6879              	.LBE1867:
 6880              	.LBE1866:
 871:src/xeq.c     **** 
 6881              		.loc 1 871 1 view .LVU1908
 6882 001a 08BD     		pop	{r3, pc}
 6883              	.L568:
 6884              		.align	2
 6885              	.L567:
 6886 001c 00000000 		.word	StateWhileOn
 6887              		.cfi_endproc
 6888              	.LFE71:
 6890              		.section	.text.roll_up,"ax",%progbits
 6891              		.align	1
 6892              		.p2align 2,,3
 6893              		.global	roll_up
 6894              		.syntax unified
 6895              		.thumb
 6896              		.thumb_func
 6897              		.fpu fpv4-sp-d16
 6899              	roll_up:
 6900              	.LVL495:
 6901              	.LFB70:
 860:src/xeq.c     **** 	REGISTER r;
 6902              		.loc 1 860 29 is_stmt 1 view -0
 6903              		.cfi_startproc
 6904              		@ args = 0, pretend = 0, frame = 16
 6905              		@ frame_needed = 0, uses_anonymous_args = 0
 861:src/xeq.c     **** 	copyreg(&r, get_stack_top());
 6906              		.loc 1 861 2 view .LVU1910
 862:src/xeq.c     **** 	lift();
 6907              		.loc 1 862 2 view .LVU1911
 860:src/xeq.c     **** 	REGISTER r;
 6908              		.loc 1 860 29 is_stmt 0 view .LVU1912
ARM GAS  /tmp/ccK8IvWa.s 			page 249


 6909 0000 30B5     		push	{r4, r5, lr}
 6910              		.cfi_def_cfa_offset 12
 6911              		.cfi_offset 4, -12
 6912              		.cfi_offset 5, -8
 6913              		.cfi_offset 14, -4
 6914              	.LBB1868:
 6915              	.LBB1869:
 6916              	.LBB1870:
 6917              	.LBB1871:
 919:src/xeq.c     **** }
 6918              		.loc 1 919 24 view .LVU1913
 6919 0002 114D     		ldr	r5, .L575
 6920              	.LBE1871:
 6921              	.LBE1870:
 6922              	.LBE1869:
 6923              	.LBE1868:
 860:src/xeq.c     **** 	REGISTER r;
 6924              		.loc 1 860 29 view .LVU1914
 6925 0004 85B0     		sub	sp, sp, #20
 6926              		.cfi_def_cfa_offset 32
 862:src/xeq.c     **** 	lift();
 6927              		.loc 1 862 14 view .LVU1915
 6928 0006 FFF7FEFF 		bl	get_stack_top
 6929              	.LVL496:
 6930              	.LBB1878:
 6931              	.LBB1876:
 6932              	.LBB1874:
 6933              	.LBB1872:
 919:src/xeq.c     **** }
 6934              		.loc 1 919 24 view .LVU1916
 6935 000a B5F8E837 		ldrh	r3, [r5, #2024]
 6936 000e 44F20104 		movw	r4, #16385
 6937              	.LBE1872:
 6938              	.LBE1874:
 704:src/xeq.c     **** }
 6939              		.loc 1 704 2 view .LVU1917
 6940 0012 2340     		ands	r3, r3, r4
 6941 0014 B3F5804F 		cmp	r3, #16384
 6942              	.LBE1876:
 6943              	.LBE1878:
 862:src/xeq.c     **** 	lift();
 6944              		.loc 1 862 14 view .LVU1918
 6945 0018 0146     		mov	r1, r0
 6946              	.LVL497:
 6947              	.LBB1879:
 6948              	.LBI1868:
 703:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6949              		.loc 1 703 6 is_stmt 1 view .LVU1919
 6950              	.LBB1877:
 704:src/xeq.c     **** }
 6951              		.loc 1 704 2 view .LVU1920
 6952              	.LBB1875:
 6953              	.LBI1870:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6954              		.loc 1 918 5 view .LVU1921
 6955              	.LBB1873:
 919:src/xeq.c     **** }
ARM GAS  /tmp/ccK8IvWa.s 			page 250


 6956              		.loc 1 919 2 view .LVU1922
 6957              	.LBE1873:
 6958              	.LBE1875:
 704:src/xeq.c     **** }
 6959              		.loc 1 704 2 is_stmt 0 view .LVU1923
 6960 001a 0CBF     		ite	eq
 6961 001c 1022     		moveq	r2, #16
 6962 001e 0822     		movne	r2, #8
 6963 0020 6846     		mov	r0, sp
 6964              	.LVL498:
 704:src/xeq.c     **** }
 6965              		.loc 1 704 2 view .LVU1924
 6966 0022 FFF7FEFF 		bl	xcopy
 6967              	.LVL499:
 704:src/xeq.c     **** }
 6968              		.loc 1 704 2 view .LVU1925
 6969              	.LBE1877:
 6970              	.LBE1879:
 863:src/xeq.c     **** 	copyreg(StackBase, &r);
 6971              		.loc 1 863 2 is_stmt 1 view .LVU1926
 6972 0026 FFF7FEFF 		bl	lift
 6973              	.LVL500:
 864:src/xeq.c     **** }
 6974              		.loc 1 864 2 view .LVU1927
 6975              	.LBB1880:
 6976              	.LBB1881:
 6977              	.LBB1882:
 6978              	.LBB1883:
 919:src/xeq.c     **** }
 6979              		.loc 1 919 24 is_stmt 0 view .LVU1928
 6980 002a B5F8E827 		ldrh	r2, [r5, #2024]
 6981              	.LBE1883:
 6982              	.LBE1882:
 6983              	.LBE1881:
 6984              	.LBE1880:
 864:src/xeq.c     **** }
 6985              		.loc 1 864 2 view .LVU1929
 6986 002e 074B     		ldr	r3, .L575+4
 6987              	.LVL501:
 6988              	.LBB1887:
 6989              	.LBI1880:
 703:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6990              		.loc 1 703 6 is_stmt 1 view .LVU1930
 6991              	.LBB1886:
 704:src/xeq.c     **** }
 6992              		.loc 1 704 2 view .LVU1931
 6993              	.LBB1885:
 6994              	.LBI1882:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6995              		.loc 1 918 5 view .LVU1932
 6996              	.LBB1884:
 919:src/xeq.c     **** }
 6997              		.loc 1 919 2 view .LVU1933
 6998              	.LBE1884:
 6999              	.LBE1885:
 704:src/xeq.c     **** }
 7000              		.loc 1 704 2 is_stmt 0 view .LVU1934
ARM GAS  /tmp/ccK8IvWa.s 			page 251


 7001 0030 1440     		ands	r4, r4, r2
 7002 0032 B4F5804F 		cmp	r4, #16384
 7003 0036 1868     		ldr	r0, [r3]
 7004 0038 6946     		mov	r1, sp
 7005 003a 0CBF     		ite	eq
 7006 003c 1022     		moveq	r2, #16
 7007 003e 0822     		movne	r2, #8
 7008 0040 FFF7FEFF 		bl	xcopy
 7009              	.LVL502:
 704:src/xeq.c     **** }
 7010              		.loc 1 704 2 view .LVU1935
 7011              	.LBE1886:
 7012              	.LBE1887:
 865:src/xeq.c     **** 
 7013              		.loc 1 865 1 view .LVU1936
 7014 0044 05B0     		add	sp, sp, #20
 7015              		.cfi_def_cfa_offset 12
 7016              		@ sp needed
 7017 0046 30BD     		pop	{r4, r5, pc}
 7018              	.L576:
 7019              		.align	2
 7020              	.L575:
 7021 0048 00000000 		.word	PersistentRam
 7022 004c 00000000 		.word	StackBase
 7023              		.cfi_endproc
 7024              	.LFE70:
 7026              		.section	.text.cpx_roll_up,"ax",%progbits
 7027              		.align	1
 7028              		.p2align 2,,3
 7029              		.global	cpx_roll_up
 7030              		.syntax unified
 7031              		.thumb
 7032              		.thumb_func
 7033              		.fpu fpv4-sp-d16
 7035              	cpx_roll_up:
 7036              	.LVL503:
 7037              	.LFB72:
 873:src/xeq.c     **** 	roll_up(OP_RUP);
 7038              		.loc 1 873 33 is_stmt 1 view -0
 7039              		.cfi_startproc
 7040              		@ args = 0, pretend = 0, frame = 0
 7041              		@ frame_needed = 0, uses_anonymous_args = 0
 874:src/xeq.c     **** 	roll_up(OP_RUP);
 7042              		.loc 1 874 2 view .LVU1938
 873:src/xeq.c     **** 	roll_up(OP_RUP);
 7043              		.loc 1 873 33 is_stmt 0 view .LVU1939
 7044 0000 08B5     		push	{r3, lr}
 7045              		.cfi_def_cfa_offset 8
 7046              		.cfi_offset 3, -8
 7047              		.cfi_offset 14, -4
 874:src/xeq.c     **** 	roll_up(OP_RUP);
 7048              		.loc 1 874 2 view .LVU1940
 7049 0002 0820     		movs	r0, #8
 7050              	.LVL504:
 874:src/xeq.c     **** 	roll_up(OP_RUP);
 7051              		.loc 1 874 2 view .LVU1941
 7052 0004 FFF7FEFF 		bl	roll_up
ARM GAS  /tmp/ccK8IvWa.s 			page 252


 7053              	.LVL505:
 875:src/xeq.c     **** 	set_was_complex();
 7054              		.loc 1 875 2 is_stmt 1 view .LVU1942
 7055 0008 0820     		movs	r0, #8
 7056 000a FFF7FEFF 		bl	roll_up
 7057              	.LVL506:
 876:src/xeq.c     **** }
 7058              		.loc 1 876 2 view .LVU1943
 7059              	.LBB1888:
 7060              	.LBI1888:
 516:src/xeq.c     **** 	State2.wascomplex = 1;
 7061              		.loc 1 516 13 view .LVU1944
 7062              	.LBB1889:
 517:src/xeq.c     **** }
 7063              		.loc 1 517 2 view .LVU1945
 517:src/xeq.c     **** }
 7064              		.loc 1 517 20 is_stmt 0 view .LVU1946
 7065 000e 034B     		ldr	r3, .L579
 7066 0010 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 7067 0012 0121     		movs	r1, #1
 7068 0014 61F38712 		bfi	r2, r1, #6, #2
 7069 0018 1A75     		strb	r2, [r3, #20]
 7070              	.LBE1889:
 7071              	.LBE1888:
 877:src/xeq.c     **** 
 7072              		.loc 1 877 1 view .LVU1947
 7073 001a 08BD     		pop	{r3, pc}
 7074              	.L580:
 7075              		.align	2
 7076              	.L579:
 7077 001c 00000000 		.word	StateWhileOn
 7078              		.cfi_endproc
 7079              	.LFE72:
 7081              		.section	.text.fill,"ax",%progbits
 7082              		.align	1
 7083              		.p2align 2,,3
 7084              		.global	fill
 7085              		.syntax unified
 7086              		.thumb
 7087              		.thumb_func
 7088              		.fpu fpv4-sp-d16
 7090              	fill:
 7091              	.LVL507:
 7092              	.LFB75:
 896:src/xeq.c     **** 	const int n = stack_size();
 7093              		.loc 1 896 26 is_stmt 1 view -0
 7094              		.cfi_startproc
 7095              		@ args = 0, pretend = 0, frame = 0
 7096              		@ frame_needed = 0, uses_anonymous_args = 0
 897:src/xeq.c     **** 	int i;
 7097              		.loc 1 897 2 view .LVU1949
 7098              	.LBB1890:
 7099              	.LBI1890:
 689:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 7100              		.loc 1 689 5 view .LVU1950
 7101              	.LBB1891:
 690:src/xeq.c     **** 		return 4;
ARM GAS  /tmp/ccK8IvWa.s 			page 253


 7102              		.loc 1 690 2 view .LVU1951
 7103              	.LBE1891:
 7104              	.LBE1890:
 896:src/xeq.c     **** 	const int n = stack_size();
 7105              		.loc 1 896 26 is_stmt 0 view .LVU1952
 7106 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 7107              		.cfi_def_cfa_offset 24
 7108              		.cfi_offset 4, -24
 7109              		.cfi_offset 5, -20
 7110              		.cfi_offset 6, -16
 7111              		.cfi_offset 7, -12
 7112              		.cfi_offset 8, -8
 7113              		.cfi_offset 14, -4
 7114              	.LBB1897:
 7115              	.LBB1894:
 690:src/xeq.c     **** 		return 4;
 7116              		.loc 1 690 6 view .LVU1953
 7117 0004 174E     		ldr	r6, .L592
 7118 0006 96F8EA37 		ldrb	r3, [r6, #2026]	@ zero_extendqisi2
 690:src/xeq.c     **** 		return 4;
 7119              		.loc 1 690 5 view .LVU1954
 7120 000a 1B07     		lsls	r3, r3, #28
 7121 000c 27D5     		bpl	.L585
 7122              	.LBB1892:
 7123              	.LBI1892:
 181:src/xeq.c     **** 	return isXROM(state_pc());
 7124              		.loc 1 181 5 is_stmt 1 view .LVU1955
 7125              	.LBB1893:
 182:src/xeq.c     **** }
 7126              		.loc 1 182 2 view .LVU1956
 182:src/xeq.c     **** }
 7127              		.loc 1 182 9 is_stmt 0 view .LVU1957
 7128 000e B6F8E037 		ldrh	r3, [r6, #2016]
 7129              	.LBE1893:
 7130              	.LBE1892:
 690:src/xeq.c     **** 		return 4;
 7131              		.loc 1 690 27 view .LVU1958
 7132 0012 9B0B     		lsrs	r3, r3, #14
 7133 0014 032B     		cmp	r3, #3
 7134 0016 1AD0     		beq	.L591
 692:src/xeq.c     **** }
 7135              		.loc 1 692 9 view .LVU1959
 7136 0018 0825     		movs	r5, #8
 7137              	.L582:
 7138              	.LVL508:
 692:src/xeq.c     **** }
 7139              		.loc 1 692 9 view .LVU1960
 7140              	.LBE1894:
 7141              	.LBE1897:
 898:src/xeq.c     **** 
 7142              		.loc 1 898 2 is_stmt 1 view .LVU1961
 900:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7143              		.loc 1 900 2 view .LVU1962
 900:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7144              		.loc 1 900 12 view .LVU1963
 7145 001a DFF85080 		ldr	r8, .L592+8
 7146 001e 6435     		adds	r5, r5, #100
ARM GAS  /tmp/ccK8IvWa.s 			page 254


 7147              	.LVL509:
 7148              	.LBB1898:
 7149              	.LBB1895:
 691:src/xeq.c     **** 	return 8;
 7150              		.loc 1 691 10 is_stmt 0 view .LVU1964
 7151 0020 6524     		movs	r4, #101
 7152              	.LBE1895:
 7153              	.LBE1898:
 7154              	.LBB1899:
 7155              	.LBB1900:
 7156              	.LBB1901:
 7157              	.LBB1902:
 919:src/xeq.c     **** }
 7158              		.loc 1 919 24 view .LVU1965
 7159 0022 44F20107 		movw	r7, #16385
 7160              	.LVL510:
 7161              	.L584:
 919:src/xeq.c     **** }
 7162              		.loc 1 919 24 view .LVU1966
 7163              	.LBE1902:
 7164              	.LBE1901:
 7165              	.LBE1900:
 7166              	.LBE1899:
 901:src/xeq.c     **** }
 7167              		.loc 1 901 3 is_stmt 1 view .LVU1967
 7168              	.LBB1906:
 7169              	.LBI1906:
 695:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 7170              		.loc 1 695 11 view .LVU1968
 7171              	.LBB1907:
 696:src/xeq.c     **** }
 7172              		.loc 1 696 2 view .LVU1969
 696:src/xeq.c     **** }
 7173              		.loc 1 696 9 is_stmt 0 view .LVU1970
 7174 0026 2046     		mov	r0, r4
 7175 0028 FFF7FEFF 		bl	get_reg_n
 7176              	.LVL511:
 696:src/xeq.c     **** }
 7177              		.loc 1 696 9 view .LVU1971
 7178              	.LBE1907:
 7179              	.LBE1906:
 7180              	.LBB1908:
 7181              	.LBI1899:
 703:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7182              		.loc 1 703 6 is_stmt 1 view .LVU1972
 7183              	.LBB1905:
 704:src/xeq.c     **** }
 7184              		.loc 1 704 2 view .LVU1973
 7185              	.LBB1904:
 7186              	.LBI1901:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7187              		.loc 1 918 5 view .LVU1974
 7188              	.LBB1903:
 919:src/xeq.c     **** }
 7189              		.loc 1 919 2 view .LVU1975
 919:src/xeq.c     **** }
 7190              		.loc 1 919 24 is_stmt 0 view .LVU1976
ARM GAS  /tmp/ccK8IvWa.s 			page 255


 7191 002c B6F8E837 		ldrh	r3, [r6, #2024]
 7192              	.LBE1903:
 7193              	.LBE1904:
 704:src/xeq.c     **** }
 7194              		.loc 1 704 2 view .LVU1977
 7195 0030 D8F80010 		ldr	r1, [r8]
 7196 0034 3B40     		ands	r3, r3, r7
 7197 0036 B3F5804F 		cmp	r3, #16384
 7198 003a 0CBF     		ite	eq
 7199 003c 1022     		moveq	r2, #16
 7200 003e 0822     		movne	r2, #8
 7201 0040 0134     		adds	r4, r4, #1
 7202              	.LVL512:
 704:src/xeq.c     **** }
 7203              		.loc 1 704 2 view .LVU1978
 7204 0042 FFF7FEFF 		bl	xcopy
 7205              	.LVL513:
 704:src/xeq.c     **** }
 7206              		.loc 1 704 2 view .LVU1979
 7207              	.LBE1905:
 7208              	.LBE1908:
 900:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7209              		.loc 1 900 17 is_stmt 1 view .LVU1980
 900:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7210              		.loc 1 900 12 view .LVU1981
 900:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7211              		.loc 1 900 2 is_stmt 0 view .LVU1982
 7212 0046 AC42     		cmp	r4, r5
 7213 0048 EDD1     		bne	.L584
 902:src/xeq.c     **** 
 7214              		.loc 1 902 1 view .LVU1983
 7215 004a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 7216              	.LVL514:
 7217              	.L591:
 7218              	.LBB1909:
 7219              	.LBB1896:
 690:src/xeq.c     **** 		return 4;
 7220              		.loc 1 690 44 view .LVU1984
 7221 004e 064B     		ldr	r3, .L592+4
 690:src/xeq.c     **** 		return 4;
 7222              		.loc 1 690 41 view .LVU1985
 7223 0050 93F90130 		ldrsb	r3, [r3, #1]
 691:src/xeq.c     **** 	return 8;
 7224              		.loc 1 691 10 view .LVU1986
 7225 0054 002B     		cmp	r3, #0
 7226 0056 B4BF     		ite	lt
 7227 0058 0825     		movlt	r5, #8
 7228 005a 0425     		movge	r5, #4
 7229 005c DDE7     		b	.L582
 7230              	.L585:
 7231 005e 0425     		movs	r5, #4
 7232 0060 DBE7     		b	.L582
 7233              	.L593:
 7234 0062 00BF     		.align	2
 7235              	.L592:
 7236 0064 00000000 		.word	PersistentRam
 7237 0068 00000000 		.word	XromParams
ARM GAS  /tmp/ccK8IvWa.s 			page 256


 7238 006c 00000000 		.word	StackBase
 7239              	.LBE1896:
 7240              	.LBE1909:
 7241              		.cfi_endproc
 7242              	.LFE75:
 7244              		.section	.text.lower2,"ax",%progbits
 7245              		.align	1
 7246              		.p2align 2,,3
 7247              		.syntax unified
 7248              		.thumb
 7249              		.thumb_func
 7250              		.fpu fpv4-sp-d16
 7252              	lower2:
 7253              	.LFB53:
 750:src/xeq.c     **** 	const int n = stack_size();
 7254              		.loc 1 750 26 is_stmt 1 view -0
 7255              		.cfi_startproc
 7256              		@ args = 0, pretend = 0, frame = 0
 7257              		@ frame_needed = 0, uses_anonymous_args = 0
 751:src/xeq.c     **** 	int i;
 7258              		.loc 1 751 2 view .LVU1988
 7259              	.LBB1910:
 7260              	.LBI1910:
 689:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 7261              		.loc 1 689 5 view .LVU1989
 7262              	.LBB1911:
 690:src/xeq.c     **** 		return 4;
 7263              		.loc 1 690 2 view .LVU1990
 7264              	.LBE1911:
 7265              	.LBE1910:
 750:src/xeq.c     **** 	const int n = stack_size();
 7266              		.loc 1 750 26 is_stmt 0 view .LVU1991
 7267 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 7268              		.cfi_def_cfa_offset 24
 7269              		.cfi_offset 4, -24
 7270              		.cfi_offset 5, -20
 7271              		.cfi_offset 6, -16
 7272              		.cfi_offset 7, -12
 7273              		.cfi_offset 8, -8
 7274              		.cfi_offset 14, -4
 7275              	.LBB1917:
 7276              	.LBB1914:
 690:src/xeq.c     **** 		return 4;
 7277              		.loc 1 690 6 view .LVU1992
 7278 0004 184F     		ldr	r7, .L605
 7279 0006 97F8EA37 		ldrb	r3, [r7, #2026]	@ zero_extendqisi2
 690:src/xeq.c     **** 		return 4;
 7280              		.loc 1 690 5 view .LVU1993
 7281 000a 1B07     		lsls	r3, r3, #28
 7282 000c 2AD5     		bpl	.L598
 7283              	.LBB1912:
 7284              	.LBI1912:
 181:src/xeq.c     **** 	return isXROM(state_pc());
 7285              		.loc 1 181 5 is_stmt 1 view .LVU1994
 7286              	.LBB1913:
 182:src/xeq.c     **** }
 7287              		.loc 1 182 2 view .LVU1995
ARM GAS  /tmp/ccK8IvWa.s 			page 257


 182:src/xeq.c     **** }
 7288              		.loc 1 182 9 is_stmt 0 view .LVU1996
 7289 000e B7F8E037 		ldrh	r3, [r7, #2016]
 7290              	.LBE1913:
 7291              	.LBE1912:
 690:src/xeq.c     **** 		return 4;
 7292              		.loc 1 690 27 view .LVU1997
 7293 0012 9B0B     		lsrs	r3, r3, #14
 7294 0014 032B     		cmp	r3, #3
 7295 0016 1DD0     		beq	.L604
 692:src/xeq.c     **** }
 7296              		.loc 1 692 9 view .LVU1998
 7297 0018 0826     		movs	r6, #8
 7298              	.L595:
 7299              	.LVL515:
 692:src/xeq.c     **** }
 7300              		.loc 1 692 9 view .LVU1999
 7301              	.LBE1914:
 7302              	.LBE1917:
 752:src/xeq.c     **** 
 7303              		.loc 1 752 2 is_stmt 1 view .LVU2000
 754:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7304              		.loc 1 754 2 view .LVU2001
 754:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7305              		.loc 1 754 12 view .LVU2002
 7306 001a 6236     		adds	r6, r6, #98
 7307              	.LVL516:
 7308              	.LBB1918:
 7309              	.LBB1915:
 691:src/xeq.c     **** 	return 8;
 7310              		.loc 1 691 10 is_stmt 0 view .LVU2003
 7311 001c 6424     		movs	r4, #100
 7312              	.LBE1915:
 7313              	.LBE1918:
 7314              	.LBB1919:
 7315              	.LBB1920:
 7316              	.LBB1921:
 7317              	.LBB1922:
 919:src/xeq.c     **** }
 7318              		.loc 1 919 24 view .LVU2004
 7319 001e 44F20108 		movw	r8, #16385
 7320              	.LVL517:
 7321              	.L597:
 919:src/xeq.c     **** }
 7322              		.loc 1 919 24 view .LVU2005
 7323              	.LBE1922:
 7324              	.LBE1921:
 7325              	.LBE1920:
 7326              	.LBE1919:
 755:src/xeq.c     **** }
 7327              		.loc 1 755 3 is_stmt 1 discriminator 3 view .LVU2006
 7328              	.LBB1929:
 7329              	.LBI1929:
 695:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 7330              		.loc 1 695 11 discriminator 3 view .LVU2007
 7331              	.LBB1930:
 696:src/xeq.c     **** }
ARM GAS  /tmp/ccK8IvWa.s 			page 258


 7332              		.loc 1 696 2 discriminator 3 view .LVU2008
 696:src/xeq.c     **** }
 7333              		.loc 1 696 9 is_stmt 0 discriminator 3 view .LVU2009
 7334 0022 2046     		mov	r0, r4
 7335 0024 FFF7FEFF 		bl	get_reg_n
 7336              	.LVL518:
 7337 0028 0546     		mov	r5, r0
 7338              	.LBE1930:
 7339              	.LBE1929:
 7340              	.LBB1931:
 7341              	.LBB1932:
 7342 002a A01C     		adds	r0, r4, #2
 7343              	.LVL519:
 696:src/xeq.c     **** }
 7344              		.loc 1 696 9 discriminator 3 view .LVU2010
 7345              	.LBE1932:
 7346              	.LBI1931:
 695:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 7347              		.loc 1 695 11 is_stmt 1 discriminator 3 view .LVU2011
 7348              	.LBB1933:
 696:src/xeq.c     **** }
 7349              		.loc 1 696 2 discriminator 3 view .LVU2012
 696:src/xeq.c     **** }
 7350              		.loc 1 696 9 is_stmt 0 discriminator 3 view .LVU2013
 7351 002c FFF7FEFF 		bl	get_reg_n
 7352              	.LVL520:
 696:src/xeq.c     **** }
 7353              		.loc 1 696 9 discriminator 3 view .LVU2014
 7354              	.LBE1933:
 7355              	.LBE1931:
 7356              	.LBB1935:
 7357              	.LBB1927:
 7358              	.LBB1925:
 7359              	.LBB1923:
 919:src/xeq.c     **** }
 7360              		.loc 1 919 24 discriminator 3 view .LVU2015
 7361 0030 B7F8E837 		ldrh	r3, [r7, #2024]
 7362              	.LBE1923:
 7363              	.LBE1925:
 704:src/xeq.c     **** }
 7364              		.loc 1 704 2 discriminator 3 view .LVU2016
 7365 0034 08EA0303 		and	r3, r8, r3
 7366 0038 B3F5804F 		cmp	r3, #16384
 7367              	.LBE1927:
 7368              	.LBE1935:
 7369              	.LBB1936:
 7370              	.LBB1934:
 696:src/xeq.c     **** }
 7371              		.loc 1 696 9 discriminator 3 view .LVU2017
 7372 003c 0146     		mov	r1, r0
 7373              	.LVL521:
 696:src/xeq.c     **** }
 7374              		.loc 1 696 9 discriminator 3 view .LVU2018
 7375              	.LBE1934:
 7376              	.LBE1936:
 7377              	.LBB1937:
 7378              	.LBI1919:
ARM GAS  /tmp/ccK8IvWa.s 			page 259


 703:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7379              		.loc 1 703 6 is_stmt 1 discriminator 3 view .LVU2019
 7380              	.LBB1928:
 704:src/xeq.c     **** }
 7381              		.loc 1 704 2 discriminator 3 view .LVU2020
 7382              	.LBB1926:
 7383              	.LBI1921:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7384              		.loc 1 918 5 discriminator 3 view .LVU2021
 7385              	.LBB1924:
 919:src/xeq.c     **** }
 7386              		.loc 1 919 2 discriminator 3 view .LVU2022
 7387              	.LBE1924:
 7388              	.LBE1926:
 704:src/xeq.c     **** }
 7389              		.loc 1 704 2 is_stmt 0 discriminator 3 view .LVU2023
 7390 003e 0CBF     		ite	eq
 7391 0040 1022     		moveq	r2, #16
 7392 0042 0822     		movne	r2, #8
 7393 0044 2846     		mov	r0, r5
 7394              	.LVL522:
 704:src/xeq.c     **** }
 7395              		.loc 1 704 2 discriminator 3 view .LVU2024
 7396 0046 0134     		adds	r4, r4, #1
 7397              	.LVL523:
 704:src/xeq.c     **** }
 7398              		.loc 1 704 2 discriminator 3 view .LVU2025
 7399 0048 FFF7FEFF 		bl	xcopy
 7400              	.LVL524:
 704:src/xeq.c     **** }
 7401              		.loc 1 704 2 discriminator 3 view .LVU2026
 7402              	.LBE1928:
 7403              	.LBE1937:
 754:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7404              		.loc 1 754 17 is_stmt 1 discriminator 3 view .LVU2027
 754:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7405              		.loc 1 754 12 discriminator 3 view .LVU2028
 754:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7406              		.loc 1 754 2 is_stmt 0 discriminator 3 view .LVU2029
 7407 004c B442     		cmp	r4, r6
 7408 004e E8D1     		bne	.L597
 756:src/xeq.c     **** 
 7409              		.loc 1 756 1 view .LVU2030
 7410 0050 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 7411              	.LVL525:
 7412              	.L604:
 7413              	.LBB1938:
 7414              	.LBB1916:
 690:src/xeq.c     **** 		return 4;
 7415              		.loc 1 690 44 view .LVU2031
 7416 0054 054B     		ldr	r3, .L605+4
 690:src/xeq.c     **** 		return 4;
 7417              		.loc 1 690 41 view .LVU2032
 7418 0056 93F90130 		ldrsb	r3, [r3, #1]
 691:src/xeq.c     **** 	return 8;
 7419              		.loc 1 691 10 view .LVU2033
 7420 005a 002B     		cmp	r3, #0
ARM GAS  /tmp/ccK8IvWa.s 			page 260


 7421 005c B4BF     		ite	lt
 7422 005e 0826     		movlt	r6, #8
 7423 0060 0426     		movge	r6, #4
 7424 0062 DAE7     		b	.L595
 7425              	.L598:
 7426 0064 0426     		movs	r6, #4
 7427 0066 D8E7     		b	.L595
 7428              	.L606:
 7429              		.align	2
 7430              	.L605:
 7431 0068 00000000 		.word	PersistentRam
 7432 006c 00000000 		.word	XromParams
 7433              	.LBE1916:
 7434              	.LBE1938:
 7435              		.cfi_endproc
 7436              	.LFE53:
 7438              		.section	.text.drop,"ax",%progbits
 7439              		.align	1
 7440              		.p2align 2,,3
 7441              		.global	drop
 7442              		.syntax unified
 7443              		.thumb
 7444              		.thumb_func
 7445              		.fpu fpv4-sp-d16
 7447              	drop:
 7448              	.LVL526:
 7449              	.LFB76:
 904:src/xeq.c     **** 	if (op == OP_DROPXY) {
 7450              		.loc 1 904 26 is_stmt 1 view -0
 7451              		.cfi_startproc
 7452              		@ args = 0, pretend = 0, frame = 0
 7453              		@ frame_needed = 0, uses_anonymous_args = 0
 905:src/xeq.c     **** 		lower2();
 7454              		.loc 1 905 2 view .LVU2035
 905:src/xeq.c     **** 		lower2();
 7455              		.loc 1 905 5 is_stmt 0 view .LVU2036
 7456 0000 0F28     		cmp	r0, #15
 7457 0002 01D0     		beq	.L614
 909:src/xeq.c     **** }
 7458              		.loc 1 909 3 is_stmt 1 view .LVU2037
 7459 0004 FFF7FEBF 		b	lower
 7460              	.LVL527:
 7461              	.L614:
 906:src/xeq.c     **** 		set_was_complex();
 7462              		.loc 1 906 3 view .LVU2038
 904:src/xeq.c     **** 	if (op == OP_DROPXY) {
 7463              		.loc 1 904 26 is_stmt 0 view .LVU2039
 7464 0008 08B5     		push	{r3, lr}
 7465              		.cfi_def_cfa_offset 8
 7466              		.cfi_offset 3, -8
 7467              		.cfi_offset 14, -4
 906:src/xeq.c     **** 		set_was_complex();
 7468              		.loc 1 906 3 view .LVU2040
 7469 000a FFF7FEFF 		bl	lower2
 7470              	.LVL528:
 907:src/xeq.c     **** 	} else
 7471              		.loc 1 907 3 is_stmt 1 view .LVU2041
ARM GAS  /tmp/ccK8IvWa.s 			page 261


 7472              	.LBB1939:
 7473              	.LBI1939:
 516:src/xeq.c     **** 	State2.wascomplex = 1;
 7474              		.loc 1 516 13 view .LVU2042
 7475              	.LBB1940:
 517:src/xeq.c     **** }
 7476              		.loc 1 517 2 view .LVU2043
 517:src/xeq.c     **** }
 7477              		.loc 1 517 20 is_stmt 0 view .LVU2044
 7478 000e 034B     		ldr	r3, .L615
 7479 0010 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 7480 0012 0121     		movs	r1, #1
 7481 0014 61F38712 		bfi	r2, r1, #6, #2
 7482 0018 1A75     		strb	r2, [r3, #20]
 7483              	.LBE1940:
 7484              	.LBE1939:
 910:src/xeq.c     **** 
 7485              		.loc 1 910 1 view .LVU2045
 7486 001a 08BD     		pop	{r3, pc}
 7487              	.L616:
 7488              		.align	2
 7489              	.L615:
 7490 001c 00000000 		.word	StateWhileOn
 7491              		.cfi_endproc
 7492              	.LFE76:
 7494              		.section	.text.copyreg_n,"ax",%progbits
 7495              		.align	1
 7496              		.p2align 2,,3
 7497              		.global	copyreg_n
 7498              		.syntax unified
 7499              		.thumb
 7500              		.thumb_func
 7501              		.fpu fpv4-sp-d16
 7503              	copyreg_n:
 7504              	.LVL529:
 7505              	.LFB45:
 707:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 7506              		.loc 1 707 30 is_stmt 1 view -0
 7507              		.cfi_startproc
 7508              		@ args = 0, pretend = 0, frame = 0
 7509              		@ frame_needed = 0, uses_anonymous_args = 0
 708:src/xeq.c     **** }
 7510              		.loc 1 708 2 view .LVU2047
 707:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 7511              		.loc 1 707 30 is_stmt 0 view .LVU2048
 7512 0000 38B5     		push	{r3, r4, r5, lr}
 7513              		.cfi_def_cfa_offset 16
 7514              		.cfi_offset 3, -16
 7515              		.cfi_offset 4, -12
 7516              		.cfi_offset 5, -8
 7517              		.cfi_offset 14, -4
 707:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 7518              		.loc 1 707 30 view .LVU2049
 7519 0002 0D46     		mov	r5, r1
 708:src/xeq.c     **** }
 7520              		.loc 1 708 2 view .LVU2050
 7521 0004 FFF7FEFF 		bl	get_reg_n
ARM GAS  /tmp/ccK8IvWa.s 			page 262


 7522              	.LVL530:
 708:src/xeq.c     **** }
 7523              		.loc 1 708 2 view .LVU2051
 7524 0008 0446     		mov	r4, r0
 708:src/xeq.c     **** }
 7525              		.loc 1 708 24 view .LVU2052
 7526 000a 2846     		mov	r0, r5
 7527 000c FFF7FEFF 		bl	get_reg_n
 7528              	.LVL531:
 7529              	.LBB1941:
 7530              	.LBB1942:
 7531              	.LBB1943:
 7532              	.LBB1944:
 919:src/xeq.c     **** }
 7533              		.loc 1 919 24 view .LVU2053
 7534 0010 084B     		ldr	r3, .L621
 7535 0012 B3F8E827 		ldrh	r2, [r3, #2024]
 7536 0016 44F20103 		movw	r3, #16385
 7537              	.LBE1944:
 7538              	.LBE1943:
 704:src/xeq.c     **** }
 7539              		.loc 1 704 2 view .LVU2054
 7540 001a 1340     		ands	r3, r3, r2
 7541 001c B3F5804F 		cmp	r3, #16384
 7542              	.LBE1942:
 7543              	.LBE1941:
 708:src/xeq.c     **** }
 7544              		.loc 1 708 24 view .LVU2055
 7545 0020 0146     		mov	r1, r0
 7546              	.LVL532:
 7547              	.LBB1949:
 7548              	.LBI1941:
 703:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7549              		.loc 1 703 6 is_stmt 1 view .LVU2056
 7550              	.LBB1947:
 704:src/xeq.c     **** }
 7551              		.loc 1 704 2 view .LVU2057
 7552              	.LBB1946:
 7553              	.LBI1943:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7554              		.loc 1 918 5 view .LVU2058
 7555              	.LBB1945:
 919:src/xeq.c     **** }
 7556              		.loc 1 919 2 view .LVU2059
 7557              	.LBE1945:
 7558              	.LBE1946:
 704:src/xeq.c     **** }
 7559              		.loc 1 704 2 is_stmt 0 view .LVU2060
 7560 0022 08BF     		it	eq
 7561 0024 1022     		moveq	r2, #16
 7562 0026 2046     		mov	r0, r4
 7563              	.LVL533:
 704:src/xeq.c     **** }
 7564              		.loc 1 704 2 view .LVU2061
 7565 0028 18BF     		it	ne
 7566 002a 0822     		movne	r2, #8
 7567              	.LBE1947:
ARM GAS  /tmp/ccK8IvWa.s 			page 263


 7568              	.LBE1949:
 709:src/xeq.c     **** 
 7569              		.loc 1 709 1 view .LVU2062
 7570 002c BDE83840 		pop	{r3, r4, r5, lr}
 7571              		.cfi_restore 14
 7572              		.cfi_restore 5
 7573              		.cfi_restore 4
 7574              		.cfi_restore 3
 7575              		.cfi_def_cfa_offset 0
 7576              	.LVL534:
 7577              	.LBB1950:
 7578              	.LBB1948:
 704:src/xeq.c     **** }
 7579              		.loc 1 704 2 view .LVU2063
 7580 0030 FFF7FEBF 		b	xcopy
 7581              	.LVL535:
 7582              	.L622:
 704:src/xeq.c     **** }
 7583              		.loc 1 704 2 view .LVU2064
 7584              		.align	2
 7585              	.L621:
 7586 0034 00000000 		.word	PersistentRam
 7587              	.LBE1948:
 7588              	.LBE1950:
 7589              		.cfi_endproc
 7590              	.LFE45:
 7592              		.section	.text.setlastX,"ax",%progbits
 7593              		.align	1
 7594              		.p2align 2,,3
 7595              		.global	setlastX
 7596              		.syntax unified
 7597              		.thumb
 7598              		.thumb_func
 7599              		.fpu fpv4-sp-d16
 7601              	setlastX:
 7602              	.LFB54:
 759:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 7603              		.loc 1 759 21 is_stmt 1 view -0
 7604              		.cfi_startproc
 7605              		@ args = 0, pretend = 0, frame = 0
 7606              		@ frame_needed = 0, uses_anonymous_args = 0
 7607              		@ link register save eliminated.
 760:src/xeq.c     **** }
 7608              		.loc 1 760 2 view .LVU2066
 7609 0000 6421     		movs	r1, #100
 7610 0002 6C20     		movs	r0, #108
 7611 0004 FFF7FEBF 		b	copyreg_n
 7612              	.LVL536:
 7613              		.cfi_endproc
 7614              	.LFE54:
 7616              		.section	.text.setlastXY,"ax",%progbits
 7617              		.align	1
 7618              		.p2align 2,,3
 7619              		.syntax unified
 7620              		.thumb
 7621              		.thumb_func
 7622              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccK8IvWa.s 			page 264


 7624              	setlastXY:
 7625              	.LFB55:
 763:src/xeq.c     **** 	setlastX();
 7626              		.loc 1 763 29 view -0
 7627              		.cfi_startproc
 7628              		@ args = 0, pretend = 0, frame = 0
 7629              		@ frame_needed = 0, uses_anonymous_args = 0
 764:src/xeq.c     **** 	copyreg_n(regI_idx, regY_idx);
 7630              		.loc 1 764 2 view .LVU2068
 7631              	.LBB1951:
 7632              	.LBI1951:
 759:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 7633              		.loc 1 759 6 view .LVU2069
 7634              	.LBB1952:
 760:src/xeq.c     **** }
 7635              		.loc 1 760 2 view .LVU2070
 7636              	.LBE1952:
 7637              	.LBE1951:
 763:src/xeq.c     **** 	setlastX();
 7638              		.loc 1 763 29 is_stmt 0 view .LVU2071
 7639 0000 08B5     		push	{r3, lr}
 7640              		.cfi_def_cfa_offset 8
 7641              		.cfi_offset 3, -8
 7642              		.cfi_offset 14, -4
 7643              	.LBB1954:
 7644              	.LBB1953:
 760:src/xeq.c     **** }
 7645              		.loc 1 760 2 view .LVU2072
 7646 0002 6421     		movs	r1, #100
 7647 0004 6C20     		movs	r0, #108
 7648 0006 FFF7FEFF 		bl	copyreg_n
 7649              	.LVL537:
 7650              	.LBE1953:
 7651              	.LBE1954:
 765:src/xeq.c     **** }
 7652              		.loc 1 765 2 is_stmt 1 view .LVU2073
 766:src/xeq.c     **** 
 7653              		.loc 1 766 1 is_stmt 0 view .LVU2074
 7654 000a BDE80840 		pop	{r3, lr}
 7655              		.cfi_restore 14
 7656              		.cfi_restore 3
 7657              		.cfi_def_cfa_offset 0
 765:src/xeq.c     **** }
 7658              		.loc 1 765 2 view .LVU2075
 7659 000e 6521     		movs	r1, #101
 7660 0010 6D20     		movs	r0, #109
 7661 0012 FFF7FEBF 		b	copyreg_n
 7662              	.LVL538:
 7663              		.cfi_endproc
 7664              	.LFE55:
 7666 0016 00BF     		.section	.text.getRegister,"ax",%progbits
 7667              		.align	1
 7668              		.p2align 2,,3
 7669              		.global	getRegister
 7670              		.syntax unified
 7671              		.thumb
 7672              		.thumb_func
ARM GAS  /tmp/ccK8IvWa.s 			page 265


 7673              		.fpu fpv4-sp-d16
 7675              	getRegister:
 7676              	.LVL539:
 7677              	.LFB56:
 769:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 7678              		.loc 1 769 49 is_stmt 1 view -0
 7679              		.cfi_startproc
 7680              		@ args = 0, pretend = 0, frame = 0
 7681              		@ frame_needed = 0, uses_anonymous_args = 0
 770:src/xeq.c     **** 	if (is_dblmode())
 7682              		.loc 1 770 2 view .LVU2077
 769:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 7683              		.loc 1 769 49 is_stmt 0 view .LVU2078
 7684 0000 10B5     		push	{r4, lr}
 7685              		.cfi_def_cfa_offset 8
 7686              		.cfi_offset 4, -8
 7687              		.cfi_offset 14, -4
 769:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 7688              		.loc 1 769 49 view .LVU2079
 7689 0002 0446     		mov	r4, r0
 770:src/xeq.c     **** 	if (is_dblmode())
 7690              		.loc 1 770 30 view .LVU2080
 7691 0004 0846     		mov	r0, r1
 7692              	.LVL540:
 770:src/xeq.c     **** 	if (is_dblmode())
 7693              		.loc 1 770 30 view .LVU2081
 7694 0006 FFF7FEFF 		bl	get_reg_n
 7695              	.LVL541:
 771:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 7696              		.loc 1 771 2 is_stmt 1 view .LVU2082
 7697              	.LBB1955:
 7698              	.LBI1955:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7699              		.loc 1 918 5 view .LVU2083
 7700              	.LBB1956:
 919:src/xeq.c     **** }
 7701              		.loc 1 919 2 view .LVU2084
 919:src/xeq.c     **** }
 7702              		.loc 1 919 24 is_stmt 0 view .LVU2085
 7703 000a 094B     		ldr	r3, .L631
 7704 000c B3F8E827 		ldrh	r2, [r3, #2024]
 7705 0010 44F20103 		movw	r3, #16385
 7706              	.LBE1956:
 7707              	.LBE1955:
 771:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 7708              		.loc 1 771 5 view .LVU2086
 7709 0014 1340     		ands	r3, r3, r2
 7710 0016 B3F5804F 		cmp	r3, #16384
 772:src/xeq.c     **** 	else
 7711              		.loc 1 772 3 view .LVU2087
 7712 001a 2146     		mov	r1, r4
 771:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 7713              		.loc 1 771 5 view .LVU2088
 7714 001c 03D0     		beq	.L630
 774:src/xeq.c     **** 	return r;
 7715              		.loc 1 774 3 is_stmt 1 view .LVU2089
 7716 001e FFF7FEFF 		bl	decimal64ToNumber
ARM GAS  /tmp/ccK8IvWa.s 			page 266


 7717              	.LVL542:
 775:src/xeq.c     **** }
 7718              		.loc 1 775 2 view .LVU2090
 776:src/xeq.c     **** 
 7719              		.loc 1 776 1 is_stmt 0 view .LVU2091
 7720 0022 2046     		mov	r0, r4
 7721 0024 10BD     		pop	{r4, pc}
 7722              	.LVL543:
 7723              	.L630:
 772:src/xeq.c     **** 	else
 7724              		.loc 1 772 3 is_stmt 1 view .LVU2092
 7725 0026 FFF7FEFF 		bl	decimal128ToNumber
 7726              	.LVL544:
 775:src/xeq.c     **** }
 7727              		.loc 1 775 2 view .LVU2093
 776:src/xeq.c     **** 
 7728              		.loc 1 776 1 is_stmt 0 view .LVU2094
 7729 002a 2046     		mov	r0, r4
 7730 002c 10BD     		pop	{r4, pc}
 7731              	.LVL545:
 7732              	.L632:
 776:src/xeq.c     **** 
 7733              		.loc 1 776 1 view .LVU2095
 7734 002e 00BF     		.align	2
 7735              	.L631:
 7736 0030 00000000 		.word	PersistentRam
 7737              		.cfi_endproc
 7738              	.LFE56:
 7740              		.section	.text.getX,"ax",%progbits
 7741              		.align	1
 7742              		.p2align 2,,3
 7743              		.global	getX
 7744              		.syntax unified
 7745              		.thumb
 7746              		.thumb_func
 7747              		.fpu fpv4-sp-d16
 7749              	getX:
 7750              	.LVL546:
 7751              	.LFB58:
 791:src/xeq.c     **** 	return getRegister(x, regX_idx);
 7752              		.loc 1 791 31 is_stmt 1 view -0
 7753              		.cfi_startproc
 7754              		@ args = 0, pretend = 0, frame = 0
 7755              		@ frame_needed = 0, uses_anonymous_args = 0
 7756              		@ link register save eliminated.
 792:src/xeq.c     **** }
 7757              		.loc 1 792 2 view .LVU2097
 792:src/xeq.c     **** }
 7758              		.loc 1 792 9 is_stmt 0 view .LVU2098
 7759 0000 6421     		movs	r1, #100
 7760 0002 FFF7FEBF 		b	getRegister
 7761              	.LVL547:
 792:src/xeq.c     **** }
 7762              		.loc 1 792 9 view .LVU2099
 7763              		.cfi_endproc
 7764              	.LFE58:
 7766 0006 00BF     		.section	.text.getY,"ax",%progbits
ARM GAS  /tmp/ccK8IvWa.s 			page 267


 7767              		.align	1
 7768              		.p2align 2,,3
 7769              		.global	getY
 7770              		.syntax unified
 7771              		.thumb
 7772              		.thumb_func
 7773              		.fpu fpv4-sp-d16
 7775              	getY:
 7776              	.LVL548:
 7777              	.LFB60:
 799:src/xeq.c     **** 	getRegister(y, regY_idx);
 7778              		.loc 1 799 25 is_stmt 1 view -0
 7779              		.cfi_startproc
 7780              		@ args = 0, pretend = 0, frame = 0
 7781              		@ frame_needed = 0, uses_anonymous_args = 0
 7782              		@ link register save eliminated.
 800:src/xeq.c     **** }
 7783              		.loc 1 800 2 view .LVU2101
 7784 0000 6521     		movs	r1, #101
 7785 0002 FFF7FEBF 		b	getRegister
 7786              	.LVL549:
 800:src/xeq.c     **** }
 7787              		.loc 1 800 2 is_stmt 0 view .LVU2102
 7788              		.cfi_endproc
 7789              	.LFE60:
 7791 0006 00BF     		.section	.text.getXY,"ax",%progbits
 7792              		.align	1
 7793              		.p2align 2,,3
 7794              		.global	getXY
 7795              		.syntax unified
 7796              		.thumb
 7797              		.thumb_func
 7798              		.fpu fpv4-sp-d16
 7800              	getXY:
 7801              	.LVL550:
 7802              	.LFB64:
 821:src/xeq.c     **** 	getX(x);
 7803              		.loc 1 821 40 is_stmt 1 view -0
 7804              		.cfi_startproc
 7805              		@ args = 0, pretend = 0, frame = 0
 7806              		@ frame_needed = 0, uses_anonymous_args = 0
 822:src/xeq.c     **** 	getY(y);
 7807              		.loc 1 822 2 view .LVU2104
 7808              	.LBB1957:
 7809              	.LBI1957:
 791:src/xeq.c     **** 	return getRegister(x, regX_idx);
 7810              		.loc 1 791 12 view .LVU2105
 7811              	.LBB1958:
 792:src/xeq.c     **** }
 7812              		.loc 1 792 2 view .LVU2106
 7813              	.LBE1958:
 7814              	.LBE1957:
 821:src/xeq.c     **** 	getX(x);
 7815              		.loc 1 821 40 is_stmt 0 view .LVU2107
 7816 0000 10B5     		push	{r4, lr}
 7817              		.cfi_def_cfa_offset 8
 7818              		.cfi_offset 4, -8
ARM GAS  /tmp/ccK8IvWa.s 			page 268


 7819              		.cfi_offset 14, -4
 821:src/xeq.c     **** 	getX(x);
 7820              		.loc 1 821 40 view .LVU2108
 7821 0002 0C46     		mov	r4, r1
 7822              	.LBB1960:
 7823              	.LBB1959:
 792:src/xeq.c     **** }
 7824              		.loc 1 792 9 view .LVU2109
 7825 0004 6421     		movs	r1, #100
 7826              	.LVL551:
 792:src/xeq.c     **** }
 7827              		.loc 1 792 9 view .LVU2110
 7828 0006 FFF7FEFF 		bl	getRegister
 7829              	.LVL552:
 792:src/xeq.c     **** }
 7830              		.loc 1 792 9 view .LVU2111
 7831              	.LBE1959:
 7832              	.LBE1960:
 823:src/xeq.c     **** }
 7833              		.loc 1 823 2 is_stmt 1 view .LVU2112
 7834              	.LBB1961:
 7835              	.LBI1961:
 799:src/xeq.c     **** 	getRegister(y, regY_idx);
 7836              		.loc 1 799 6 view .LVU2113
 7837              	.LBB1962:
 800:src/xeq.c     **** }
 7838              		.loc 1 800 2 view .LVU2114
 7839 000a 2046     		mov	r0, r4
 7840 000c 6521     		movs	r1, #101
 7841              	.LBE1962:
 7842              	.LBE1961:
 824:src/xeq.c     **** 
 7843              		.loc 1 824 1 is_stmt 0 view .LVU2115
 7844 000e BDE81040 		pop	{r4, lr}
 7845              		.cfi_restore 14
 7846              		.cfi_restore 4
 7847              		.cfi_def_cfa_offset 0
 7848              	.LVL553:
 7849              	.LBB1964:
 7850              	.LBB1963:
 800:src/xeq.c     **** }
 7851              		.loc 1 800 2 view .LVU2116
 7852 0012 FFF7FEBF 		b	getRegister
 7853              	.LVL554:
 800:src/xeq.c     **** }
 7854              		.loc 1 800 2 view .LVU2117
 7855              	.LBE1963:
 7856              	.LBE1964:
 7857              		.cfi_endproc
 7858              	.LFE64:
 7860 0016 00BF     		.section	.text.getXYZ,"ax",%progbits
 7861              		.align	1
 7862              		.p2align 2,,3
 7863              		.global	getXYZ
 7864              		.syntax unified
 7865              		.thumb
 7866              		.thumb_func
ARM GAS  /tmp/ccK8IvWa.s 			page 269


 7867              		.fpu fpv4-sp-d16
 7869              	getXYZ:
 7870              	.LVL555:
 7871              	.LFB66:
 831:src/xeq.c     **** 	getXY(x, y);
 7872              		.loc 1 831 55 is_stmt 1 view -0
 7873              		.cfi_startproc
 7874              		@ args = 0, pretend = 0, frame = 0
 7875              		@ frame_needed = 0, uses_anonymous_args = 0
 832:src/xeq.c     **** 	getZ(z);
 7876              		.loc 1 832 2 view .LVU2119
 831:src/xeq.c     **** 	getXY(x, y);
 7877              		.loc 1 831 55 is_stmt 0 view .LVU2120
 7878 0000 38B5     		push	{r3, r4, r5, lr}
 7879              		.cfi_def_cfa_offset 16
 7880              		.cfi_offset 3, -16
 7881              		.cfi_offset 4, -12
 7882              		.cfi_offset 5, -8
 7883              		.cfi_offset 14, -4
 831:src/xeq.c     **** 	getXY(x, y);
 7884              		.loc 1 831 55 view .LVU2121
 7885 0002 0D46     		mov	r5, r1
 7886              	.LVL556:
 7887              	.LBB1965:
 7888              	.LBI1965:
 821:src/xeq.c     **** 	getX(x);
 7889              		.loc 1 821 6 is_stmt 1 view .LVU2122
 7890              	.LBE1965:
 822:src/xeq.c     **** 	getY(y);
 7891              		.loc 1 822 2 view .LVU2123
 7892              	.LBB1972:
 7893              	.LBB1966:
 7894              	.LBI1966:
 791:src/xeq.c     **** 	return getRegister(x, regX_idx);
 7895              		.loc 1 791 12 view .LVU2124
 7896              	.LBB1967:
 792:src/xeq.c     **** }
 7897              		.loc 1 792 2 view .LVU2125
 792:src/xeq.c     **** }
 7898              		.loc 1 792 9 is_stmt 0 view .LVU2126
 7899 0004 6421     		movs	r1, #100
 7900              	.LVL557:
 792:src/xeq.c     **** }
 7901              		.loc 1 792 9 view .LVU2127
 7902              	.LBE1967:
 7903              	.LBE1966:
 7904              	.LBE1972:
 831:src/xeq.c     **** 	getXY(x, y);
 7905              		.loc 1 831 55 view .LVU2128
 7906 0006 1446     		mov	r4, r2
 7907              	.LBB1973:
 7908              	.LBB1969:
 7909              	.LBB1968:
 792:src/xeq.c     **** }
 7910              		.loc 1 792 9 view .LVU2129
 7911 0008 FFF7FEFF 		bl	getRegister
 7912              	.LVL558:
ARM GAS  /tmp/ccK8IvWa.s 			page 270


 792:src/xeq.c     **** }
 7913              		.loc 1 792 9 view .LVU2130
 7914              	.LBE1968:
 7915              	.LBE1969:
 7916              	.LBE1973:
 823:src/xeq.c     **** }
 7917              		.loc 1 823 2 is_stmt 1 view .LVU2131
 7918              	.LBB1974:
 7919              	.LBB1970:
 7920              	.LBI1970:
 799:src/xeq.c     **** 	getRegister(y, regY_idx);
 7921              		.loc 1 799 6 view .LVU2132
 7922              	.LBB1971:
 800:src/xeq.c     **** }
 7923              		.loc 1 800 2 view .LVU2133
 7924 000c 2846     		mov	r0, r5
 7925 000e 6521     		movs	r1, #101
 7926 0010 FFF7FEFF 		bl	getRegister
 7927              	.LVL559:
 800:src/xeq.c     **** }
 7928              		.loc 1 800 2 is_stmt 0 view .LVU2134
 7929              	.LBE1971:
 7930              	.LBE1970:
 7931              	.LBE1974:
 833:src/xeq.c     **** }
 7932              		.loc 1 833 2 is_stmt 1 view .LVU2135
 7933              	.LBB1975:
 7934              	.LBI1975:
 807:src/xeq.c     **** 	getRegister(z, regZ_idx);
 7935              		.loc 1 807 13 view .LVU2136
 7936              	.LBB1976:
 808:src/xeq.c     **** }
 7937              		.loc 1 808 2 view .LVU2137
 7938 0014 2046     		mov	r0, r4
 7939 0016 6621     		movs	r1, #102
 7940              	.LBE1976:
 7941              	.LBE1975:
 834:src/xeq.c     **** 
 7942              		.loc 1 834 1 is_stmt 0 view .LVU2138
 7943 0018 BDE83840 		pop	{r3, r4, r5, lr}
 7944              		.cfi_restore 14
 7945              		.cfi_restore 5
 7946              		.cfi_restore 4
 7947              		.cfi_restore 3
 7948              		.cfi_def_cfa_offset 0
 7949              	.LVL560:
 7950              	.LBB1978:
 7951              	.LBB1977:
 808:src/xeq.c     **** }
 7952              		.loc 1 808 2 view .LVU2139
 7953 001c FFF7FEBF 		b	getRegister
 7954              	.LVL561:
 808:src/xeq.c     **** }
 7955              		.loc 1 808 2 view .LVU2140
 7956              	.LBE1977:
 7957              	.LBE1978:
 7958              		.cfi_endproc
ARM GAS  /tmp/ccK8IvWa.s 			page 271


 7959              	.LFE66:
 7961              		.section	.text.getYZ,"ax",%progbits
 7962              		.align	1
 7963              		.p2align 2,,3
 7964              		.global	getYZ
 7965              		.syntax unified
 7966              		.thumb
 7967              		.thumb_func
 7968              		.fpu fpv4-sp-d16
 7970              	getYZ:
 7971              	.LVL562:
 7972              	.LFB68:
 848:src/xeq.c     **** 	getY(y);
 7973              		.loc 1 848 40 is_stmt 1 view -0
 7974              		.cfi_startproc
 7975              		@ args = 0, pretend = 0, frame = 0
 7976              		@ frame_needed = 0, uses_anonymous_args = 0
 849:src/xeq.c     **** 	getZ(z);
 7977              		.loc 1 849 2 view .LVU2142
 7978              	.LBB1979:
 7979              	.LBI1979:
 799:src/xeq.c     **** 	getRegister(y, regY_idx);
 7980              		.loc 1 799 6 view .LVU2143
 7981              	.LBB1980:
 800:src/xeq.c     **** }
 7982              		.loc 1 800 2 view .LVU2144
 7983              	.LBE1980:
 7984              	.LBE1979:
 848:src/xeq.c     **** 	getY(y);
 7985              		.loc 1 848 40 is_stmt 0 view .LVU2145
 7986 0000 10B5     		push	{r4, lr}
 7987              		.cfi_def_cfa_offset 8
 7988              		.cfi_offset 4, -8
 7989              		.cfi_offset 14, -4
 848:src/xeq.c     **** 	getY(y);
 7990              		.loc 1 848 40 view .LVU2146
 7991 0002 0C46     		mov	r4, r1
 7992              	.LBB1982:
 7993              	.LBB1981:
 800:src/xeq.c     **** }
 7994              		.loc 1 800 2 view .LVU2147
 7995 0004 6521     		movs	r1, #101
 7996              	.LVL563:
 800:src/xeq.c     **** }
 7997              		.loc 1 800 2 view .LVU2148
 7998 0006 FFF7FEFF 		bl	getRegister
 7999              	.LVL564:
 800:src/xeq.c     **** }
 8000              		.loc 1 800 2 view .LVU2149
 8001              	.LBE1981:
 8002              	.LBE1982:
 850:src/xeq.c     **** }
 8003              		.loc 1 850 2 is_stmt 1 view .LVU2150
 8004              	.LBB1983:
 8005              	.LBI1983:
 807:src/xeq.c     **** 	getRegister(z, regZ_idx);
 8006              		.loc 1 807 13 view .LVU2151
ARM GAS  /tmp/ccK8IvWa.s 			page 272


 8007              	.LBB1984:
 808:src/xeq.c     **** }
 8008              		.loc 1 808 2 view .LVU2152
 8009 000a 2046     		mov	r0, r4
 8010 000c 6621     		movs	r1, #102
 8011              	.LBE1984:
 8012              	.LBE1983:
 851:src/xeq.c     **** 
 8013              		.loc 1 851 1 is_stmt 0 view .LVU2153
 8014 000e BDE81040 		pop	{r4, lr}
 8015              		.cfi_restore 14
 8016              		.cfi_restore 4
 8017              		.cfi_def_cfa_offset 0
 8018              	.LVL565:
 8019              	.LBB1986:
 8020              	.LBB1985:
 808:src/xeq.c     **** }
 8021              		.loc 1 808 2 view .LVU2154
 8022 0012 FFF7FEBF 		b	getRegister
 8023              	.LVL566:
 808:src/xeq.c     **** }
 8024              		.loc 1 808 2 view .LVU2155
 8025              	.LBE1985:
 8026              	.LBE1986:
 8027              		.cfi_endproc
 8028              	.LFE68:
 8030 0016 00BF     		.section	.text.getXYZT,"ax",%progbits
 8031              		.align	1
 8032              		.p2align 2,,3
 8033              		.global	getXYZT
 8034              		.syntax unified
 8035              		.thumb
 8036              		.thumb_func
 8037              		.fpu fpv4-sp-d16
 8039              	getXYZT:
 8040              	.LVL567:
 8041              	.LFB67:
 843:src/xeq.c     **** 	getXYZ(x, y, z);
 8042              		.loc 1 843 70 is_stmt 1 view -0
 8043              		.cfi_startproc
 8044              		@ args = 0, pretend = 0, frame = 0
 8045              		@ frame_needed = 0, uses_anonymous_args = 0
 844:src/xeq.c     **** 	getT(t);
 8046              		.loc 1 844 2 view .LVU2157
 843:src/xeq.c     **** 	getXYZ(x, y, z);
 8047              		.loc 1 843 70 is_stmt 0 view .LVU2158
 8048 0000 10B5     		push	{r4, lr}
 8049              		.cfi_def_cfa_offset 8
 8050              		.cfi_offset 4, -8
 8051              		.cfi_offset 14, -4
 843:src/xeq.c     **** 	getXYZ(x, y, z);
 8052              		.loc 1 843 70 view .LVU2159
 8053 0002 1C46     		mov	r4, r3
 844:src/xeq.c     **** 	getT(t);
 8054              		.loc 1 844 2 view .LVU2160
 8055 0004 FFF7FEFF 		bl	getXYZ
 8056              	.LVL568:
ARM GAS  /tmp/ccK8IvWa.s 			page 273


 845:src/xeq.c     **** }
 8057              		.loc 1 845 2 is_stmt 1 view .LVU2161
 8058              	.LBB1987:
 8059              	.LBI1987:
 817:src/xeq.c     **** 	getRegister(t, regT_idx);
 8060              		.loc 1 817 13 view .LVU2162
 8061              	.LBB1988:
 818:src/xeq.c     **** }
 8062              		.loc 1 818 2 view .LVU2163
 8063 0008 2046     		mov	r0, r4
 8064 000a 6721     		movs	r1, #103
 8065              	.LBE1988:
 8066              	.LBE1987:
 846:src/xeq.c     **** 
 8067              		.loc 1 846 1 is_stmt 0 view .LVU2164
 8068 000c BDE81040 		pop	{r4, lr}
 8069              		.cfi_restore 14
 8070              		.cfi_restore 4
 8071              		.cfi_def_cfa_offset 0
 8072              	.LVL569:
 8073              	.LBB1990:
 8074              	.LBB1989:
 818:src/xeq.c     **** }
 8075              		.loc 1 818 2 view .LVU2165
 8076 0010 FFF7FEBF 		b	getRegister
 8077              	.LVL570:
 818:src/xeq.c     **** }
 8078              		.loc 1 818 2 view .LVU2166
 8079              	.LBE1989:
 8080              	.LBE1990:
 8081              		.cfi_endproc
 8082              	.LFE67:
 8084              		.section	.text.storcl_op,"ax",%progbits
 8085              		.align	1
 8086              		.p2align 2,,3
 8087              		.syntax unified
 8088              		.thumb
 8089              		.thumb_func
 8090              		.fpu fpv4-sp-d16
 8092              	storcl_op:
 8093              	.LVL571:
 8094              	.LFB110:
1436:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8095              		.loc 1 1436 76 is_stmt 1 view -0
 8096              		.cfi_startproc
 8097              		@ args = 0, pretend = 0, frame = 72
 8098              		@ frame_needed = 0, uses_anonymous_args = 0
1437:src/xeq.c     **** 
 8099              		.loc 1 1437 2 view .LVU2168
1436:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8100              		.loc 1 1436 76 is_stmt 0 view .LVU2169
 8101 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 8102              		.cfi_def_cfa_offset 20
 8103              		.cfi_offset 4, -20
 8104              		.cfi_offset 5, -16
 8105              		.cfi_offset 6, -12
 8106              		.cfi_offset 7, -8
ARM GAS  /tmp/ccK8IvWa.s 			page 274


 8107              		.cfi_offset 14, -4
 8108 0002 93B0     		sub	sp, sp, #76
 8109              		.cfi_def_cfa_offset 96
 8110              	.LVL572:
1439:src/xeq.c     **** 	getRegister(y, index);
 8111              		.loc 1 1439 2 is_stmt 1 view .LVU2170
 8112              	.LBB1991:
 8113              	.LBI1991:
 791:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8114              		.loc 1 791 12 view .LVU2171
 8115              	.LBB1992:
 792:src/xeq.c     **** }
 8116              		.loc 1 792 2 view .LVU2172
 8117              	.LBE1992:
 8118              	.LBE1991:
1436:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8119              		.loc 1 1436 76 is_stmt 0 view .LVU2173
 8120 0004 0E46     		mov	r6, r1
 8121 0006 0446     		mov	r4, r0
 8122              	.LBB1995:
 8123              	.LBB1993:
 792:src/xeq.c     **** }
 8124              		.loc 1 792 9 view .LVU2174
 8125 0008 6421     		movs	r1, #100
 8126              	.LVL573:
 792:src/xeq.c     **** }
 8127              		.loc 1 792 9 view .LVU2175
 8128 000a 6846     		mov	r0, sp
 8129              	.LVL574:
 792:src/xeq.c     **** }
 8130              		.loc 1 792 9 view .LVU2176
 8131              	.LBE1993:
 8132              	.LBE1995:
1436:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8133              		.loc 1 1436 76 view .LVU2177
 8134 000c 1D46     		mov	r5, r3
 8135 000e 1746     		mov	r7, r2
 8136              	.LBB1996:
 8137              	.LBB1994:
 792:src/xeq.c     **** }
 8138              		.loc 1 792 9 view .LVU2178
 8139 0010 FFF7FEFF 		bl	getRegister
 8140              	.LVL575:
 792:src/xeq.c     **** }
 8141              		.loc 1 792 9 view .LVU2179
 8142              	.LBE1994:
 8143              	.LBE1996:
1440:src/xeq.c     **** 	if (rev) {
 8144              		.loc 1 1440 2 is_stmt 1 view .LVU2180
 8145 0014 3146     		mov	r1, r6
 8146 0016 09A8     		add	r0, sp, #36
 8147              	.LVL576:
1440:src/xeq.c     **** 	if (rev) {
 8148              		.loc 1 1440 2 is_stmt 0 view .LVU2181
 8149 0018 FFF7FEFF 		bl	getRegister
 8150              	.LVL577:
1441:src/xeq.c     **** 		x = y;
ARM GAS  /tmp/ccK8IvWa.s 			page 275


 8151              		.loc 1 1441 2 is_stmt 1 view .LVU2182
1441:src/xeq.c     **** 		x = y;
 8152              		.loc 1 1441 5 is_stmt 0 view .LVU2183
 8153 001c 4DB1     		cbz	r5, .L653
1443:src/xeq.c     **** 	}
 8154              		.loc 1 1443 5 view .LVU2184
 8155 001e 6946     		mov	r1, sp
1442:src/xeq.c     **** 		y = &a;
 8156              		.loc 1 1442 5 view .LVU2185
 8157 0020 09AA     		add	r2, sp, #36
 8158              	.LVL578:
 8159              	.L644:
1446:src/xeq.c     **** 	case 1:
 8160              		.loc 1 1446 2 is_stmt 1 view .LVU2186
 8161 0022 601E     		subs	r0, r4, #1
 8162 0024 0528     		cmp	r0, #5
 8163 0026 2BD8     		bhi	.L654
 8164 0028 DFE800F0 		tbb	[pc, r0]
 8165              	.L647:
 8166 002c 0C       		.byte	(.L652-.L647)/2
 8167 002d 12       		.byte	(.L651-.L647)/2
 8168 002e 18       		.byte	(.L650-.L647)/2
 8169 002f 1E       		.byte	(.L649-.L647)/2
 8170 0030 24       		.byte	(.L648-.L647)/2
 8171 0031 06       		.byte	(.L646-.L647)/2
 8172              	.LVL579:
 8173              		.p2align 1
 8174              	.L653:
1437:src/xeq.c     **** 
 8175              		.loc 1 1437 28 is_stmt 0 view .LVU2187
 8176 0032 09A9     		add	r1, sp, #36
 8177              	.LVL580:
1437:src/xeq.c     **** 
 8178              		.loc 1 1437 19 view .LVU2188
 8179 0034 6A46     		mov	r2, sp
 8180 0036 F4E7     		b	.L644
 8181              	.LVL581:
 8182              	.L646:
1463:src/xeq.c     **** 		break;
 8183              		.loc 1 1463 3 is_stmt 1 view .LVU2189
 8184 0038 3846     		mov	r0, r7
 8185 003a FFF7FEFF 		bl	dn_max
 8186              	.LVL582:
1464:src/xeq.c     **** 	default:
 8187              		.loc 1 1464 3 view .LVU2190
1468:src/xeq.c     **** }
 8188              		.loc 1 1468 9 is_stmt 0 view .LVU2191
 8189 003e 0020     		movs	r0, #0
 8190              	.L643:
1469:src/xeq.c     **** 
 8191              		.loc 1 1469 1 view .LVU2192
 8192 0040 13B0     		add	sp, sp, #76
 8193              		.cfi_remember_state
 8194              		.cfi_def_cfa_offset 20
 8195              		@ sp needed
 8196 0042 F0BD     		pop	{r4, r5, r6, r7, pc}
 8197              	.LVL583:
ARM GAS  /tmp/ccK8IvWa.s 			page 276


 8198              	.L652:
 8199              		.cfi_restore_state
1448:src/xeq.c     **** 		break;
 8200              		.loc 1 1448 3 is_stmt 1 view .LVU2193
 8201 0044 3846     		mov	r0, r7
 8202 0046 FFF7FEFF 		bl	dn_add
 8203              	.LVL584:
1449:src/xeq.c     **** 	case 2:
 8204              		.loc 1 1449 3 view .LVU2194
1468:src/xeq.c     **** }
 8205              		.loc 1 1468 9 is_stmt 0 view .LVU2195
 8206 004a 0020     		movs	r0, #0
1469:src/xeq.c     **** 
 8207              		.loc 1 1469 1 view .LVU2196
 8208 004c 13B0     		add	sp, sp, #76
 8209              		.cfi_remember_state
 8210              		.cfi_def_cfa_offset 20
 8211              		@ sp needed
 8212 004e F0BD     		pop	{r4, r5, r6, r7, pc}
 8213              	.LVL585:
 8214              	.L651:
 8215              		.cfi_restore_state
1451:src/xeq.c     **** 		break;
 8216              		.loc 1 1451 3 is_stmt 1 view .LVU2197
 8217 0050 3846     		mov	r0, r7
 8218 0052 FFF7FEFF 		bl	dn_subtract
 8219              	.LVL586:
1452:src/xeq.c     **** 	case 3:
 8220              		.loc 1 1452 3 view .LVU2198
1468:src/xeq.c     **** }
 8221              		.loc 1 1468 9 is_stmt 0 view .LVU2199
 8222 0056 0020     		movs	r0, #0
1469:src/xeq.c     **** 
 8223              		.loc 1 1469 1 view .LVU2200
 8224 0058 13B0     		add	sp, sp, #76
 8225              		.cfi_remember_state
 8226              		.cfi_def_cfa_offset 20
 8227              		@ sp needed
 8228 005a F0BD     		pop	{r4, r5, r6, r7, pc}
 8229              	.LVL587:
 8230              	.L650:
 8231              		.cfi_restore_state
1454:src/xeq.c     **** 		break;
 8232              		.loc 1 1454 3 is_stmt 1 view .LVU2201
 8233 005c 3846     		mov	r0, r7
 8234 005e FFF7FEFF 		bl	dn_multiply
 8235              	.LVL588:
1455:src/xeq.c     **** 	case 4:
 8236              		.loc 1 1455 3 view .LVU2202
1468:src/xeq.c     **** }
 8237              		.loc 1 1468 9 is_stmt 0 view .LVU2203
 8238 0062 0020     		movs	r0, #0
1469:src/xeq.c     **** 
 8239              		.loc 1 1469 1 view .LVU2204
 8240 0064 13B0     		add	sp, sp, #76
 8241              		.cfi_remember_state
 8242              		.cfi_def_cfa_offset 20
ARM GAS  /tmp/ccK8IvWa.s 			page 277


 8243              		@ sp needed
 8244 0066 F0BD     		pop	{r4, r5, r6, r7, pc}
 8245              	.LVL589:
 8246              	.L649:
 8247              		.cfi_restore_state
1457:src/xeq.c     **** 		break;
 8248              		.loc 1 1457 3 is_stmt 1 view .LVU2205
 8249 0068 3846     		mov	r0, r7
 8250 006a FFF7FEFF 		bl	dn_divide
 8251              	.LVL590:
1458:src/xeq.c     **** 	case 5:
 8252              		.loc 1 1458 3 view .LVU2206
1468:src/xeq.c     **** }
 8253              		.loc 1 1468 9 is_stmt 0 view .LVU2207
 8254 006e 0020     		movs	r0, #0
1469:src/xeq.c     **** 
 8255              		.loc 1 1469 1 view .LVU2208
 8256 0070 13B0     		add	sp, sp, #76
 8257              		.cfi_remember_state
 8258              		.cfi_def_cfa_offset 20
 8259              		@ sp needed
 8260 0072 F0BD     		pop	{r4, r5, r6, r7, pc}
 8261              	.LVL591:
 8262              	.L648:
 8263              		.cfi_restore_state
1460:src/xeq.c     **** 		break;
 8264              		.loc 1 1460 3 is_stmt 1 view .LVU2209
 8265 0074 3846     		mov	r0, r7
 8266 0076 FFF7FEFF 		bl	dn_min
 8267              	.LVL592:
1461:src/xeq.c     **** 	case 6:
 8268              		.loc 1 1461 3 view .LVU2210
1468:src/xeq.c     **** }
 8269              		.loc 1 1468 9 is_stmt 0 view .LVU2211
 8270 007a 0020     		movs	r0, #0
1469:src/xeq.c     **** 
 8271              		.loc 1 1469 1 view .LVU2212
 8272 007c 13B0     		add	sp, sp, #76
 8273              		.cfi_def_cfa_offset 20
 8274              		@ sp needed
 8275 007e F0BD     		pop	{r4, r5, r6, r7, pc}
 8276              	.LVL593:
 8277              	.L654:
1468:src/xeq.c     **** }
 8278              		.loc 1 1468 9 view .LVU2213
 8279 0080 0120     		movs	r0, #1
 8280 0082 DDE7     		b	.L643
 8281              		.cfi_endproc
 8282              	.LFE110:
 8284              		.section	.text.storcl_cop,"ax",%progbits
 8285              		.align	1
 8286              		.p2align 2,,3
 8287              		.syntax unified
 8288              		.thumb
 8289              		.thumb_func
 8290              		.fpu fpv4-sp-d16
 8292              	storcl_cop:
ARM GAS  /tmp/ccK8IvWa.s 			page 278


 8293              	.LVL594:
 8294              	.LFB115:
1570:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8295              		.loc 1 1570 93 is_stmt 1 view -0
 8296              		.cfi_startproc
 8297              		@ args = 4, pretend = 0, frame = 144
 8298              		@ frame_needed = 0, uses_anonymous_args = 0
1571:src/xeq.c     **** 
 8299              		.loc 1 1571 2 view .LVU2215
1570:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8300              		.loc 1 1570 93 is_stmt 0 view .LVU2216
 8301 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 8302              		.cfi_def_cfa_offset 24
 8303              		.cfi_offset 4, -24
 8304              		.cfi_offset 5, -20
 8305              		.cfi_offset 6, -16
 8306              		.cfi_offset 7, -12
 8307              		.cfi_offset 8, -8
 8308              		.cfi_offset 14, -4
 8309 0004 A6B0     		sub	sp, sp, #152
 8310              		.cfi_def_cfa_offset 176
 8311              	.LVL595:
1573:src/xeq.c     **** 	getRegister(y + 0, index);
 8312              		.loc 1 1573 2 is_stmt 1 view .LVU2217
 8313              	.LBB1997:
 8314              	.LBI1997:
 821:src/xeq.c     **** 	getX(x);
 8315              		.loc 1 821 6 view .LVU2218
 8316              	.LBE1997:
 822:src/xeq.c     **** 	getY(y);
 8317              		.loc 1 822 2 view .LVU2219
 8318              	.LBB2006:
 8319              	.LBB1998:
 8320              	.LBI1998:
 791:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8321              		.loc 1 791 12 view .LVU2220
 8322              	.LBB1999:
 792:src/xeq.c     **** }
 8323              		.loc 1 792 2 view .LVU2221
 8324              	.LBE1999:
 8325              	.LBE1998:
 8326              	.LBE2006:
1570:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8327              		.loc 1 1570 93 is_stmt 0 view .LVU2222
 8328 0006 0D46     		mov	r5, r1
 8329 0008 0446     		mov	r4, r0
 8330              	.LBB2007:
 8331              	.LBB2002:
 8332              	.LBB2000:
 792:src/xeq.c     **** }
 8333              		.loc 1 792 9 view .LVU2223
 8334 000a 6421     		movs	r1, #100
 8335              	.LVL596:
 792:src/xeq.c     **** }
 8336              		.loc 1 792 9 view .LVU2224
 8337 000c 02A8     		add	r0, sp, #8
 8338              	.LVL597:
ARM GAS  /tmp/ccK8IvWa.s 			page 279


 792:src/xeq.c     **** }
 8339              		.loc 1 792 9 view .LVU2225
 8340              	.LBE2000:
 8341              	.LBE2002:
 8342              	.LBE2007:
1570:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8343              		.loc 1 1570 93 view .LVU2226
 8344 000e 9046     		mov	r8, r2
 8345 0010 1E46     		mov	r6, r3
 8346 0012 2C9F     		ldr	r7, [sp, #176]
 8347              	.LBB2008:
 8348              	.LBB2003:
 8349              	.LBB2001:
 792:src/xeq.c     **** }
 8350              		.loc 1 792 9 view .LVU2227
 8351 0014 FFF7FEFF 		bl	getRegister
 8352              	.LVL598:
 792:src/xeq.c     **** }
 8353              		.loc 1 792 9 view .LVU2228
 8354              	.LBE2001:
 8355              	.LBE2003:
 8356              	.LBE2008:
 823:src/xeq.c     **** }
 8357              		.loc 1 823 2 is_stmt 1 view .LVU2229
 8358              	.LBB2009:
 8359              	.LBB2004:
 8360              	.LBI2004:
 799:src/xeq.c     **** 	getRegister(y, regY_idx);
 8361              		.loc 1 799 6 view .LVU2230
 8362              	.LBB2005:
 800:src/xeq.c     **** }
 8363              		.loc 1 800 2 view .LVU2231
 8364 0018 6521     		movs	r1, #101
 8365 001a 0BA8     		add	r0, sp, #44
 8366              	.LVL599:
 800:src/xeq.c     **** }
 8367              		.loc 1 800 2 is_stmt 0 view .LVU2232
 8368 001c FFF7FEFF 		bl	getRegister
 8369              	.LVL600:
 800:src/xeq.c     **** }
 8370              		.loc 1 800 2 view .LVU2233
 8371              	.LBE2005:
 8372              	.LBE2004:
 8373              	.LBE2009:
1574:src/xeq.c     **** 	getRegister(y + 1, index + 1);
 8374              		.loc 1 1574 2 is_stmt 1 view .LVU2234
 8375 0020 2946     		mov	r1, r5
 8376 0022 14A8     		add	r0, sp, #80
 8377              	.LVL601:
1574:src/xeq.c     **** 	getRegister(y + 1, index + 1);
 8378              		.loc 1 1574 2 is_stmt 0 view .LVU2235
 8379 0024 FFF7FEFF 		bl	getRegister
 8380              	.LVL602:
1575:src/xeq.c     **** 
 8381              		.loc 1 1575 2 is_stmt 1 view .LVU2236
 8382 0028 691C     		adds	r1, r5, #1
 8383 002a 1DA8     		add	r0, sp, #116
ARM GAS  /tmp/ccK8IvWa.s 			page 280


 8384 002c FFF7FEFF 		bl	getRegister
 8385              	.LVL603:
1577:src/xeq.c     **** 		x = y;
 8386              		.loc 1 1577 2 view .LVU2237
1577:src/xeq.c     **** 		x = y;
 8387              		.loc 1 1577 5 is_stmt 0 view .LVU2238
 8388 0030 47B1     		cbz	r7, .L664
1579:src/xeq.c     **** 	}
 8389              		.loc 1 1579 5 view .LVU2239
 8390 0032 02AA     		add	r2, sp, #8
 8391              	.LVL604:
1578:src/xeq.c     **** 		y = a;
 8392              		.loc 1 1578 5 view .LVU2240
 8393 0034 14A9     		add	r1, sp, #80
 8394              	.LVL605:
 8395              	.L657:
1582:src/xeq.c     **** 	case 1:
 8396              		.loc 1 1582 2 is_stmt 1 view .LVU2241
 8397 0036 601E     		subs	r0, r4, #1
 8398 0038 0328     		cmp	r0, #3
 8399 003a 3ED8     		bhi	.L665
 8400 003c DFE800F0 		tbb	[pc, r0]
 8401              	.L660:
 8402 0040 13       		.byte	(.L663-.L660)/2
 8403 0041 21       		.byte	(.L662-.L660)/2
 8404 0042 2F       		.byte	(.L661-.L660)/2
 8405 0043 05       		.byte	(.L659-.L660)/2
 8406              	.LVL606:
 8407              		.p2align 1
 8408              	.L664:
1571:src/xeq.c     **** 
 8409              		.loc 1 1571 33 is_stmt 0 view .LVU2242
 8410 0044 14AA     		add	r2, sp, #80
 8411              	.LVL607:
1571:src/xeq.c     **** 
 8412              		.loc 1 1571 25 view .LVU2243
 8413 0046 02A9     		add	r1, sp, #8
 8414              	.LVL608:
1571:src/xeq.c     **** 
 8415              		.loc 1 1571 25 view .LVU2244
 8416 0048 F5E7     		b	.L657
 8417              	.L659:
1593:src/xeq.c     **** 		break;
 8418              		.loc 1 1593 3 is_stmt 1 view .LVU2245
1593:src/xeq.c     **** 		break;
 8419              		.loc 1 1593 46 is_stmt 0 view .LVU2246
 8420 004a 01F12403 		add	r3, r1, #36
1593:src/xeq.c     **** 		break;
 8421              		.loc 1 1593 3 view .LVU2247
 8422 004e CDE90013 		strd	r1, r3, [sp]
 8423 0052 4046     		mov	r0, r8
 8424 0054 3146     		mov	r1, r6
 8425              	.LVL609:
1593:src/xeq.c     **** 		break;
 8426              		.loc 1 1593 3 view .LVU2248
 8427 0056 02F12403 		add	r3, r2, #36
 8428 005a FFF7FEFF 		bl	cmplxDivide
ARM GAS  /tmp/ccK8IvWa.s 			page 281


 8429              	.LVL610:
1594:src/xeq.c     **** 	default:
 8430              		.loc 1 1594 3 is_stmt 1 view .LVU2249
1598:src/xeq.c     **** }
 8431              		.loc 1 1598 9 is_stmt 0 view .LVU2250
 8432 005e 0020     		movs	r0, #0
 8433              	.L656:
1599:src/xeq.c     **** 
 8434              		.loc 1 1599 1 view .LVU2251
 8435 0060 26B0     		add	sp, sp, #152
 8436              		.cfi_remember_state
 8437              		.cfi_def_cfa_offset 24
 8438              		@ sp needed
 8439 0062 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8440              	.LVL611:
 8441              	.L663:
 8442              		.cfi_restore_state
1584:src/xeq.c     **** 		break;
 8443              		.loc 1 1584 3 is_stmt 1 view .LVU2252
1584:src/xeq.c     **** 		break;
 8444              		.loc 1 1584 43 is_stmt 0 view .LVU2253
 8445 0066 01F12403 		add	r3, r1, #36
1584:src/xeq.c     **** 		break;
 8446              		.loc 1 1584 3 view .LVU2254
 8447 006a CDE90013 		strd	r1, r3, [sp]
 8448 006e 4046     		mov	r0, r8
 8449 0070 3146     		mov	r1, r6
 8450              	.LVL612:
1584:src/xeq.c     **** 		break;
 8451              		.loc 1 1584 3 view .LVU2255
 8452 0072 02F12403 		add	r3, r2, #36
 8453 0076 FFF7FEFF 		bl	cmplxAdd
 8454              	.LVL613:
1585:src/xeq.c     **** 	case 2:
 8455              		.loc 1 1585 3 is_stmt 1 view .LVU2256
1598:src/xeq.c     **** }
 8456              		.loc 1 1598 9 is_stmt 0 view .LVU2257
 8457 007a 0020     		movs	r0, #0
1599:src/xeq.c     **** 
 8458              		.loc 1 1599 1 view .LVU2258
 8459 007c 26B0     		add	sp, sp, #152
 8460              		.cfi_remember_state
 8461              		.cfi_def_cfa_offset 24
 8462              		@ sp needed
 8463 007e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8464              	.LVL614:
 8465              	.L662:
 8466              		.cfi_restore_state
1587:src/xeq.c     **** 		break;
 8467              		.loc 1 1587 3 is_stmt 1 view .LVU2259
1587:src/xeq.c     **** 		break;
 8468              		.loc 1 1587 48 is_stmt 0 view .LVU2260
 8469 0082 01F12403 		add	r3, r1, #36
1587:src/xeq.c     **** 		break;
 8470              		.loc 1 1587 3 view .LVU2261
 8471 0086 CDE90013 		strd	r1, r3, [sp]
 8472 008a 4046     		mov	r0, r8
ARM GAS  /tmp/ccK8IvWa.s 			page 282


 8473 008c 3146     		mov	r1, r6
 8474              	.LVL615:
1587:src/xeq.c     **** 		break;
 8475              		.loc 1 1587 3 view .LVU2262
 8476 008e 02F12403 		add	r3, r2, #36
 8477 0092 FFF7FEFF 		bl	cmplxSubtract
 8478              	.LVL616:
1588:src/xeq.c     **** 	case 3:
 8479              		.loc 1 1588 3 is_stmt 1 view .LVU2263
1598:src/xeq.c     **** }
 8480              		.loc 1 1598 9 is_stmt 0 view .LVU2264
 8481 0096 0020     		movs	r0, #0
1599:src/xeq.c     **** 
 8482              		.loc 1 1599 1 view .LVU2265
 8483 0098 26B0     		add	sp, sp, #152
 8484              		.cfi_remember_state
 8485              		.cfi_def_cfa_offset 24
 8486              		@ sp needed
 8487 009a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8488              	.LVL617:
 8489              	.L661:
 8490              		.cfi_restore_state
1590:src/xeq.c     **** 		break;
 8491              		.loc 1 1590 3 is_stmt 1 view .LVU2266
1590:src/xeq.c     **** 		break;
 8492              		.loc 1 1590 48 is_stmt 0 view .LVU2267
 8493 009e 01F12403 		add	r3, r1, #36
1590:src/xeq.c     **** 		break;
 8494              		.loc 1 1590 3 view .LVU2268
 8495 00a2 CDE90013 		strd	r1, r3, [sp]
 8496 00a6 4046     		mov	r0, r8
 8497 00a8 3146     		mov	r1, r6
 8498              	.LVL618:
1590:src/xeq.c     **** 		break;
 8499              		.loc 1 1590 3 view .LVU2269
 8500 00aa 02F12403 		add	r3, r2, #36
 8501 00ae FFF7FEFF 		bl	cmplxMultiply
 8502              	.LVL619:
1591:src/xeq.c     **** 	case 4:
 8503              		.loc 1 1591 3 is_stmt 1 view .LVU2270
1598:src/xeq.c     **** }
 8504              		.loc 1 1598 9 is_stmt 0 view .LVU2271
 8505 00b2 0020     		movs	r0, #0
1599:src/xeq.c     **** 
 8506              		.loc 1 1599 1 view .LVU2272
 8507 00b4 26B0     		add	sp, sp, #152
 8508              		.cfi_def_cfa_offset 24
 8509              		@ sp needed
 8510 00b6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8511              	.LVL620:
 8512              	.L665:
1598:src/xeq.c     **** }
 8513              		.loc 1 1598 9 view .LVU2273
 8514 00ba 0120     		movs	r0, #1
 8515 00bc D0E7     		b	.L656
 8516              		.cfi_endproc
 8517              	.LFE115:
ARM GAS  /tmp/ccK8IvWa.s 			page 283


 8519 00be 00BF     		.section	.text.cpx_enter,"ax",%progbits
 8520              		.align	1
 8521              		.p2align 2,,3
 8522              		.global	cpx_enter
 8523              		.syntax unified
 8524              		.thumb
 8525              		.thumb_func
 8526              		.fpu fpv4-sp-d16
 8528              	cpx_enter:
 8529              	.LVL621:
 8530              	.LFB73:
 879:src/xeq.c     **** 	lift();
 8531              		.loc 1 879 31 is_stmt 1 view -0
 8532              		.cfi_startproc
 8533              		@ args = 0, pretend = 0, frame = 0
 8534              		@ frame_needed = 0, uses_anonymous_args = 0
 880:src/xeq.c     **** 	lift();
 8535              		.loc 1 880 2 view .LVU2275
 879:src/xeq.c     **** 	lift();
 8536              		.loc 1 879 31 is_stmt 0 view .LVU2276
 8537 0000 10B5     		push	{r4, lr}
 8538              		.cfi_def_cfa_offset 8
 8539              		.cfi_offset 4, -8
 8540              		.cfi_offset 14, -4
 880:src/xeq.c     **** 	lift();
 8541              		.loc 1 880 2 view .LVU2277
 8542 0002 FFF7FEFF 		bl	lift
 8543              	.LVL622:
 881:src/xeq.c     **** 	copyreg(get_reg_n(regY_idx), get_reg_n(regT_idx));
 8544              		.loc 1 881 2 is_stmt 1 view .LVU2278
 8545 0006 FFF7FEFF 		bl	lift
 8546              	.LVL623:
 882:src/xeq.c     **** 	set_was_complex();
 8547              		.loc 1 882 2 view .LVU2279
 8548 000a 6520     		movs	r0, #101
 8549 000c FFF7FEFF 		bl	get_reg_n
 8550              	.LVL624:
 8551 0010 0446     		mov	r4, r0
 882:src/xeq.c     **** 	set_was_complex();
 8552              		.loc 1 882 31 is_stmt 0 view .LVU2280
 8553 0012 6720     		movs	r0, #103
 8554 0014 FFF7FEFF 		bl	get_reg_n
 8555              	.LVL625:
 8556              	.LBB2010:
 8557              	.LBB2011:
 8558              	.LBB2012:
 8559              	.LBB2013:
 919:src/xeq.c     **** }
 8560              		.loc 1 919 24 view .LVU2281
 8561 0018 0A4B     		ldr	r3, .L671
 8562 001a B3F8E827 		ldrh	r2, [r3, #2024]
 8563 001e 44F20103 		movw	r3, #16385
 8564              	.LBE2013:
 8565              	.LBE2012:
 704:src/xeq.c     **** }
 8566              		.loc 1 704 2 view .LVU2282
 8567 0022 1340     		ands	r3, r3, r2
ARM GAS  /tmp/ccK8IvWa.s 			page 284


 8568 0024 B3F5804F 		cmp	r3, #16384
 8569              	.LBE2011:
 8570              	.LBE2010:
 882:src/xeq.c     **** 	set_was_complex();
 8571              		.loc 1 882 31 view .LVU2283
 8572 0028 0146     		mov	r1, r0
 8573              	.LVL626:
 8574              	.LBB2017:
 8575              	.LBI2010:
 703:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 8576              		.loc 1 703 6 is_stmt 1 view .LVU2284
 8577              	.LBB2016:
 704:src/xeq.c     **** }
 8578              		.loc 1 704 2 view .LVU2285
 8579              	.LBB2015:
 8580              	.LBI2012:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 8581              		.loc 1 918 5 view .LVU2286
 8582              	.LBB2014:
 919:src/xeq.c     **** }
 8583              		.loc 1 919 2 view .LVU2287
 8584              	.LBE2014:
 8585              	.LBE2015:
 704:src/xeq.c     **** }
 8586              		.loc 1 704 2 is_stmt 0 view .LVU2288
 8587 002a 0CBF     		ite	eq
 8588 002c 1022     		moveq	r2, #16
 8589 002e 0822     		movne	r2, #8
 8590 0030 2046     		mov	r0, r4
 8591              	.LVL627:
 704:src/xeq.c     **** }
 8592              		.loc 1 704 2 view .LVU2289
 8593 0032 FFF7FEFF 		bl	xcopy
 8594              	.LVL628:
 704:src/xeq.c     **** }
 8595              		.loc 1 704 2 view .LVU2290
 8596              	.LBE2016:
 8597              	.LBE2017:
 883:src/xeq.c     **** }
 8598              		.loc 1 883 2 is_stmt 1 view .LVU2291
 8599              	.LBB2018:
 8600              	.LBI2018:
 516:src/xeq.c     **** 	State2.wascomplex = 1;
 8601              		.loc 1 516 13 view .LVU2292
 8602              	.LBB2019:
 517:src/xeq.c     **** }
 8603              		.loc 1 517 2 view .LVU2293
 517:src/xeq.c     **** }
 8604              		.loc 1 517 20 is_stmt 0 view .LVU2294
 8605 0036 044B     		ldr	r3, .L671+4
 8606 0038 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 8607 003a 0121     		movs	r1, #1
 8608 003c 61F38712 		bfi	r2, r1, #6, #2
 8609 0040 1A75     		strb	r2, [r3, #20]
 8610              	.LBE2019:
 8611              	.LBE2018:
 884:src/xeq.c     **** 
ARM GAS  /tmp/ccK8IvWa.s 			page 285


 8612              		.loc 1 884 1 view .LVU2295
 8613 0042 10BD     		pop	{r4, pc}
 8614              	.L672:
 8615              		.align	2
 8616              	.L671:
 8617 0044 00000000 		.word	PersistentRam
 8618 0048 00000000 		.word	StateWhileOn
 8619              		.cfi_endproc
 8620              	.LFE73:
 8622              		.section	.text.cpx_fill,"ax",%progbits
 8623              		.align	1
 8624              		.p2align 2,,3
 8625              		.global	cpx_fill
 8626              		.syntax unified
 8627              		.thumb
 8628              		.thumb_func
 8629              		.fpu fpv4-sp-d16
 8631              	cpx_fill:
 8632              	.LVL629:
 8633              	.LFB74:
 886:src/xeq.c     **** 	const int n = stack_size();
 8634              		.loc 1 886 30 is_stmt 1 view -0
 8635              		.cfi_startproc
 8636              		@ args = 0, pretend = 0, frame = 0
 8637              		@ frame_needed = 0, uses_anonymous_args = 0
 887:src/xeq.c     **** 	const REGISTER *y = get_reg_n(regY_idx);
 8638              		.loc 1 887 2 view .LVU2297
 8639              	.LBB2020:
 8640              	.LBI2020:
 689:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 8641              		.loc 1 689 5 view .LVU2298
 8642              	.LBB2021:
 690:src/xeq.c     **** 		return 4;
 8643              		.loc 1 690 2 view .LVU2299
 8644              	.LBE2021:
 8645              	.LBE2020:
 886:src/xeq.c     **** 	const int n = stack_size();
 8646              		.loc 1 886 30 is_stmt 0 view .LVU2300
 8647 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 8648              		.cfi_def_cfa_offset 32
 8649              		.cfi_offset 3, -32
 8650              		.cfi_offset 4, -28
 8651              		.cfi_offset 5, -24
 8652              		.cfi_offset 6, -20
 8653              		.cfi_offset 7, -16
 8654              		.cfi_offset 8, -12
 8655              		.cfi_offset 9, -8
 8656              		.cfi_offset 14, -4
 8657              	.LBB2026:
 8658              	.LBB2024:
 690:src/xeq.c     **** 		return 4;
 8659              		.loc 1 690 6 view .LVU2301
 8660 0004 1E4D     		ldr	r5, .L686
 8661 0006 95F8EA37 		ldrb	r3, [r5, #2026]	@ zero_extendqisi2
 690:src/xeq.c     **** 		return 4;
 8662              		.loc 1 690 5 view .LVU2302
 8663 000a 1A07     		lsls	r2, r3, #28
ARM GAS  /tmp/ccK8IvWa.s 			page 286


 8664 000c 36D5     		bpl	.L678
 8665              	.LBB2022:
 8666              	.LBI2022:
 181:src/xeq.c     **** 	return isXROM(state_pc());
 8667              		.loc 1 181 5 is_stmt 1 view .LVU2303
 8668              	.LBB2023:
 182:src/xeq.c     **** }
 8669              		.loc 1 182 2 view .LVU2304
 182:src/xeq.c     **** }
 8670              		.loc 1 182 9 is_stmt 0 view .LVU2305
 8671 000e B5F8E037 		ldrh	r3, [r5, #2016]
 8672              	.LBE2023:
 8673              	.LBE2022:
 690:src/xeq.c     **** 		return 4;
 8674              		.loc 1 690 27 view .LVU2306
 8675 0012 9B0B     		lsrs	r3, r3, #14
 8676 0014 032B     		cmp	r3, #3
 8677 0016 29D0     		beq	.L685
 692:src/xeq.c     **** }
 8678              		.loc 1 692 9 view .LVU2307
 8679 0018 0827     		movs	r7, #8
 8680              	.L674:
 8681              	.LVL630:
 692:src/xeq.c     **** }
 8682              		.loc 1 692 9 view .LVU2308
 8683              	.LBE2024:
 8684              	.LBE2026:
 888:src/xeq.c     **** 	int i;
 8685              		.loc 1 888 2 is_stmt 1 view .LVU2309
 888:src/xeq.c     **** 	int i;
 8686              		.loc 1 888 22 is_stmt 0 view .LVU2310
 8687 001a 6520     		movs	r0, #101
 8688              	.LVL631:
 888:src/xeq.c     **** 	int i;
 8689              		.loc 1 888 22 view .LVU2311
 8690 001c FFF7FEFF 		bl	get_reg_n
 8691              	.LVL632:
 892:src/xeq.c     **** 	set_was_complex();
 8692              		.loc 1 892 3 view .LVU2312
 8693 0020 DFF86890 		ldr	r9, .L686+12
 888:src/xeq.c     **** 	int i;
 8694              		.loc 1 888 22 view .LVU2313
 8695 0024 8046     		mov	r8, r0
 8696              	.LVL633:
 889:src/xeq.c     **** 
 8697              		.loc 1 889 2 is_stmt 1 view .LVU2314
 891:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8698              		.loc 1 891 2 view .LVU2315
 891:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8699              		.loc 1 891 12 view .LVU2316
 891:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8700              		.loc 1 891 8 is_stmt 0 view .LVU2317
 8701 0026 0224     		movs	r4, #2
 8702              	.LBB2027:
 8703              	.LBB2028:
 8704              	.LBB2029:
 8705              	.LBB2030:
ARM GAS  /tmp/ccK8IvWa.s 			page 287


 919:src/xeq.c     **** }
 8706              		.loc 1 919 24 view .LVU2318
 8707 0028 44F20106 		movw	r6, #16385
 8708              	.LVL634:
 8709              	.L677:
 919:src/xeq.c     **** }
 8710              		.loc 1 919 24 view .LVU2319
 8711              	.LBE2030:
 8712              	.LBE2029:
 8713              	.LBE2028:
 8714              	.LBE2027:
 892:src/xeq.c     **** 	set_was_complex();
 8715              		.loc 1 892 3 is_stmt 1 view .LVU2320
 8716              	.LBB2039:
 8717              	.LBI2039:
 695:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 8718              		.loc 1 695 11 view .LVU2321
 8719              	.LBB2040:
 696:src/xeq.c     **** }
 8720              		.loc 1 696 2 view .LVU2322
 696:src/xeq.c     **** }
 8721              		.loc 1 696 9 is_stmt 0 view .LVU2323
 8722 002c 04F16400 		add	r0, r4, #100
 8723 0030 FFF7FEFF 		bl	get_reg_n
 8724              	.LVL635:
 696:src/xeq.c     **** }
 8725              		.loc 1 696 9 view .LVU2324
 8726              	.LBE2040:
 8727              	.LBE2039:
 892:src/xeq.c     **** 	set_was_complex();
 8728              		.loc 1 892 3 view .LVU2325
 8729 0034 E307     		lsls	r3, r4, #31
 8730              	.LBB2041:
 8731              	.LBB2035:
 8732              	.LBB2033:
 8733              	.LBB2031:
 919:src/xeq.c     **** }
 8734              		.loc 1 919 24 view .LVU2326
 8735 0036 B5F8E837 		ldrh	r3, [r5, #2024]
 8736              	.LBE2031:
 8737              	.LBE2033:
 8738              	.LBE2035:
 8739              	.LBE2041:
 892:src/xeq.c     **** 	set_was_complex();
 8740              		.loc 1 892 3 view .LVU2327
 8741 003a 58BF     		it	pl
 8742 003c D9F80010 		ldrpl	r1, [r9]
 8743              	.LBB2042:
 8744              	.LBB2036:
 704:src/xeq.c     **** }
 8745              		.loc 1 704 2 view .LVU2328
 8746 0040 03EA0603 		and	r3, r3, r6
 8747              	.LBE2036:
 8748              	.LBE2042:
 892:src/xeq.c     **** 	set_was_complex();
 8749              		.loc 1 892 3 view .LVU2329
 8750 0044 48BF     		it	mi
ARM GAS  /tmp/ccK8IvWa.s 			page 288


 8751 0046 4146     		movmi	r1, r8
 8752              	.LVL636:
 8753              	.LBB2043:
 8754              	.LBI2027:
 703:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 8755              		.loc 1 703 6 is_stmt 1 view .LVU2330
 8756              	.LBB2037:
 704:src/xeq.c     **** }
 8757              		.loc 1 704 2 view .LVU2331
 8758              	.LBB2034:
 8759              	.LBI2029:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 8760              		.loc 1 918 5 view .LVU2332
 8761              	.LBB2032:
 919:src/xeq.c     **** }
 8762              		.loc 1 919 2 view .LVU2333
 8763              	.LBE2032:
 8764              	.LBE2034:
 704:src/xeq.c     **** }
 8765              		.loc 1 704 2 is_stmt 0 view .LVU2334
 8766 0048 B3F5804F 		cmp	r3, #16384
 8767 004c 0CBF     		ite	eq
 8768 004e 1022     		moveq	r2, #16
 8769 0050 0822     		movne	r2, #8
 8770              	.LBE2037:
 8771              	.LBE2043:
 891:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8772              		.loc 1 891 18 view .LVU2335
 8773 0052 0134     		adds	r4, r4, #1
 8774              	.LVL637:
 8775              	.LBB2044:
 8776              	.LBB2038:
 704:src/xeq.c     **** }
 8777              		.loc 1 704 2 view .LVU2336
 8778 0054 FFF7FEFF 		bl	xcopy
 8779              	.LVL638:
 704:src/xeq.c     **** }
 8780              		.loc 1 704 2 view .LVU2337
 8781              	.LBE2038:
 8782              	.LBE2044:
 891:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8783              		.loc 1 891 17 is_stmt 1 view .LVU2338
 891:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8784              		.loc 1 891 12 view .LVU2339
 891:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8785              		.loc 1 891 2 is_stmt 0 view .LVU2340
 8786 0058 BC42     		cmp	r4, r7
 8787 005a E7D1     		bne	.L677
 893:src/xeq.c     **** }
 8788              		.loc 1 893 2 is_stmt 1 view .LVU2341
 8789              	.LBB2045:
 8790              	.LBI2045:
 516:src/xeq.c     **** 	State2.wascomplex = 1;
 8791              		.loc 1 516 13 view .LVU2342
 8792              	.LBB2046:
 517:src/xeq.c     **** }
 8793              		.loc 1 517 2 view .LVU2343
ARM GAS  /tmp/ccK8IvWa.s 			page 289


 517:src/xeq.c     **** }
 8794              		.loc 1 517 20 is_stmt 0 view .LVU2344
 8795 005c 094B     		ldr	r3, .L686+4
 8796 005e 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 8797 0060 0121     		movs	r1, #1
 8798 0062 61F38712 		bfi	r2, r1, #6, #2
 8799 0066 1A75     		strb	r2, [r3, #20]
 8800              	.LBE2046:
 8801              	.LBE2045:
 894:src/xeq.c     **** 
 8802              		.loc 1 894 1 view .LVU2345
 8803 0068 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 8804              	.LVL639:
 8805              	.L685:
 8806              	.LBB2047:
 8807              	.LBB2025:
 690:src/xeq.c     **** 		return 4;
 8808              		.loc 1 690 44 view .LVU2346
 8809 006c 064B     		ldr	r3, .L686+8
 690:src/xeq.c     **** 		return 4;
 8810              		.loc 1 690 41 view .LVU2347
 8811 006e 93F90130 		ldrsb	r3, [r3, #1]
 691:src/xeq.c     **** 	return 8;
 8812              		.loc 1 691 10 view .LVU2348
 8813 0072 002B     		cmp	r3, #0
 8814 0074 B4BF     		ite	lt
 8815 0076 0827     		movlt	r7, #8
 8816 0078 0427     		movge	r7, #4
 8817 007a CEE7     		b	.L674
 8818              	.L678:
 8819 007c 0427     		movs	r7, #4
 8820 007e CCE7     		b	.L674
 8821              	.L687:
 8822              		.align	2
 8823              	.L686:
 8824 0080 00000000 		.word	PersistentRam
 8825 0084 00000000 		.word	StateWhileOn
 8826 0088 00000000 		.word	XromParams
 8827 008c 00000000 		.word	StackBase
 8828              	.LBE2025:
 8829              	.LBE2047:
 8830              		.cfi_endproc
 8831              	.LFE74:
 8833              		.section	.text.setRegister,"ax",%progbits
 8834              		.align	1
 8835              		.p2align 2,,3
 8836              		.global	setRegister
 8837              		.syntax unified
 8838              		.thumb
 8839              		.thumb_func
 8840              		.fpu fpv4-sp-d16
 8842              	setRegister:
 8843              	.LVL640:
 8844              	.LFB57:
 778:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 8845              		.loc 1 778 49 is_stmt 1 view -0
 8846              		.cfi_startproc
ARM GAS  /tmp/ccK8IvWa.s 			page 290


 8847              		@ args = 0, pretend = 0, frame = 40
 8848              		@ frame_needed = 0, uses_anonymous_args = 0
 779:src/xeq.c     **** 	decNumber dn;
 8849              		.loc 1 779 2 view .LVU2350
 778:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 8850              		.loc 1 778 49 is_stmt 0 view .LVU2351
 8851 0000 30B5     		push	{r4, r5, lr}
 8852              		.cfi_def_cfa_offset 12
 8853              		.cfi_offset 4, -12
 8854              		.cfi_offset 5, -8
 8855              		.cfi_offset 14, -4
 8856 0002 8BB0     		sub	sp, sp, #44
 8857              		.cfi_def_cfa_offset 56
 778:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 8858              		.loc 1 778 49 view .LVU2352
 8859 0004 0C46     		mov	r4, r1
 779:src/xeq.c     **** 	decNumber dn;
 8860              		.loc 1 779 24 view .LVU2353
 8861 0006 FFF7FEFF 		bl	get_reg_n
 8862              	.LVL641:
 779:src/xeq.c     **** 	decNumber dn;
 8863              		.loc 1 779 24 view .LVU2354
 8864 000a 0546     		mov	r5, r0
 782:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 8865              		.loc 1 782 8 view .LVU2355
 8866 000c 2046     		mov	r0, r4
 8867              	.LVL642:
 780:src/xeq.c     **** 
 8868              		.loc 1 780 2 is_stmt 1 view .LVU2356
 782:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 8869              		.loc 1 782 2 view .LVU2357
 782:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 8870              		.loc 1 782 8 is_stmt 0 view .LVU2358
 8871 000e FFF7FEFF 		bl	check_special
 8872              	.LVL643:
 782:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 8873              		.loc 1 782 5 view .LVU2359
 8874 0012 08B1     		cbz	r0, .L692
 789:src/xeq.c     **** 
 8875              		.loc 1 789 1 view .LVU2360
 8876 0014 0BB0     		add	sp, sp, #44
 8877              		.cfi_remember_state
 8878              		.cfi_def_cfa_offset 12
 8879              		@ sp needed
 8880 0016 30BD     		pop	{r4, r5, pc}
 8881              	.LVL644:
 8882              	.L692:
 8883              		.cfi_restore_state
 783:src/xeq.c     **** 		if (is_dblmode())
 8884              		.loc 1 783 3 is_stmt 1 view .LVU2361
 8885 0018 0B4A     		ldr	r2, .L694
 8886 001a 2146     		mov	r1, r4
 8887 001c 01A8     		add	r0, sp, #4
 8888 001e FFF7FEFF 		bl	decNumberNormalize
 8889              	.LVL645:
 784:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 8890              		.loc 1 784 3 view .LVU2362
ARM GAS  /tmp/ccK8IvWa.s 			page 291


 8891              	.LBB2048:
 8892              	.LBI2048:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 8893              		.loc 1 918 5 view .LVU2363
 8894              	.LBB2049:
 919:src/xeq.c     **** }
 8895              		.loc 1 919 2 view .LVU2364
 919:src/xeq.c     **** }
 8896              		.loc 1 919 24 is_stmt 0 view .LVU2365
 8897 0022 0A4B     		ldr	r3, .L694+4
 8898 0024 B3F8E827 		ldrh	r2, [r3, #2024]
 8899 0028 44F20103 		movw	r3, #16385
 8900              	.LBE2049:
 8901              	.LBE2048:
 784:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 8902              		.loc 1 784 6 view .LVU2366
 8903 002c 1340     		ands	r3, r3, r2
 8904 002e B3F5804F 		cmp	r3, #16384
 785:src/xeq.c     **** 		else
 8905              		.loc 1 785 4 view .LVU2367
 8906 0032 01A9     		add	r1, sp, #4
 8907 0034 2846     		mov	r0, r5
 784:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 8908              		.loc 1 784 6 view .LVU2368
 8909 0036 03D0     		beq	.L693
 8910              	.LVL646:
 787:src/xeq.c     **** 	}
 8911              		.loc 1 787 4 is_stmt 1 view .LVU2369
 8912 0038 FFF7FEFF 		bl	packed_from_number
 8913              	.LVL647:
 789:src/xeq.c     **** 
 8914              		.loc 1 789 1 is_stmt 0 view .LVU2370
 8915 003c 0BB0     		add	sp, sp, #44
 8916              		.cfi_remember_state
 8917              		.cfi_def_cfa_offset 12
 8918              		@ sp needed
 8919 003e 30BD     		pop	{r4, r5, pc}
 8920              	.LVL648:
 8921              	.L693:
 8922              		.cfi_restore_state
 785:src/xeq.c     **** 		else
 8923              		.loc 1 785 4 is_stmt 1 view .LVU2371
 8924 0040 FFF7FEFF 		bl	packed128_from_number
 8925              	.LVL649:
 789:src/xeq.c     **** 
 8926              		.loc 1 789 1 is_stmt 0 view .LVU2372
 8927 0044 0BB0     		add	sp, sp, #44
 8928              		.cfi_def_cfa_offset 12
 8929              		@ sp needed
 8930 0046 30BD     		pop	{r4, r5, pc}
 8931              	.LVL650:
 8932              	.L695:
 789:src/xeq.c     **** 
 8933              		.loc 1 789 1 view .LVU2373
 8934              		.align	2
 8935              	.L694:
 8936 0048 00000000 		.word	Ctx
ARM GAS  /tmp/ccK8IvWa.s 			page 292


 8937 004c 00000000 		.word	PersistentRam
 8938              		.cfi_endproc
 8939              	.LFE57:
 8941              		.section	.text.setX,"ax",%progbits
 8942              		.align	1
 8943              		.p2align 2,,3
 8944              		.global	setX
 8945              		.syntax unified
 8946              		.thumb
 8947              		.thumb_func
 8948              		.fpu fpv4-sp-d16
 8950              	setX:
 8951              	.LVL651:
 8952              	.LFB59:
 795:src/xeq.c     **** 	setRegister(regX_idx, x);
 8953              		.loc 1 795 31 is_stmt 1 view -0
 8954              		.cfi_startproc
 8955              		@ args = 0, pretend = 0, frame = 0
 8956              		@ frame_needed = 0, uses_anonymous_args = 0
 8957              		@ link register save eliminated.
 796:src/xeq.c     **** }
 8958              		.loc 1 796 2 view .LVU2375
 795:src/xeq.c     **** 	setRegister(regX_idx, x);
 8959              		.loc 1 795 31 is_stmt 0 view .LVU2376
 8960 0000 0146     		mov	r1, r0
 796:src/xeq.c     **** }
 8961              		.loc 1 796 2 view .LVU2377
 8962 0002 6420     		movs	r0, #100
 8963              	.LVL652:
 796:src/xeq.c     **** }
 8964              		.loc 1 796 2 view .LVU2378
 8965 0004 FFF7FEBF 		b	setRegister
 8966              	.LVL653:
 796:src/xeq.c     **** }
 8967              		.loc 1 796 2 view .LVU2379
 8968              		.cfi_endproc
 8969              	.LFE59:
 8971              		.section	.text.rarg_round,"ax",%progbits
 8972              		.align	1
 8973              		.p2align 2,,3
 8974              		.global	rarg_round
 8975              		.syntax unified
 8976              		.thumb
 8977              		.thumb_func
 8978              		.fpu fpv4-sp-d16
 8980              	rarg_round:
 8981              	.LVL654:
 8982              	.LFB39:
 639:src/xeq.c     **** 	decNumber res, x;
 8983              		.loc 1 639 49 is_stmt 1 view -0
 8984              		.cfi_startproc
 8985              		@ args = 0, pretend = 0, frame = 80
 8986              		@ frame_needed = 0, uses_anonymous_args = 0
 640:src/xeq.c     **** 	const enum rounding rm = get_rounding_mode();
 8987              		.loc 1 640 2 view .LVU2381
 641:src/xeq.c     **** 
 8988              		.loc 1 641 2 view .LVU2382
ARM GAS  /tmp/ccK8IvWa.s 			page 293


 8989              	.LBB2062:
 8990              	.LBI2062:
 587:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 8991              		.loc 1 587 22 view .LVU2383
 8992              	.LBB2063:
 588:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 8993              		.loc 1 588 2 view .LVU2384
 593:src/xeq.c     **** }
 8994              		.loc 1 593 2 view .LVU2385
 593:src/xeq.c     **** }
 8995              		.loc 1 593 2 is_stmt 0 view .LVU2386
 8996              	.LBE2063:
 8997              	.LBE2062:
 643:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 8998              		.loc 1 643 2 is_stmt 1 view .LVU2387
 639:src/xeq.c     **** 	decNumber res, x;
 8999              		.loc 1 639 49 is_stmt 0 view .LVU2388
 9000 0000 70B5     		push	{r4, r5, r6, lr}
 9001              		.cfi_def_cfa_offset 16
 9002              		.cfi_offset 4, -16
 9003              		.cfi_offset 5, -12
 9004              		.cfi_offset 6, -8
 9005              		.cfi_offset 14, -4
 643:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9006              		.loc 1 643 6 view .LVU2389
 9007 0002 184B     		ldr	r3, .L705
 9008 0004 93F8E857 		ldrb	r5, [r3, #2024]	@ zero_extendqisi2
 643:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9009              		.loc 1 643 5 view .LVU2390
 9010 0008 EA07     		lsls	r2, r5, #31
 639:src/xeq.c     **** 	decNumber res, x;
 9011              		.loc 1 639 49 view .LVU2391
 9012 000a 94B0     		sub	sp, sp, #80
 9013              		.cfi_def_cfa_offset 96
 643:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9014              		.loc 1 643 5 view .LVU2392
 9015 000c 06D5     		bpl	.L698
 644:src/xeq.c     **** 		return;
 9016              		.loc 1 644 3 is_stmt 1 view .LVU2393
 9017              	.LVL655:
 9018              	.LBB2065:
 9019              	.LBI2065:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 9020              		.loc 1 523 5 view .LVU2394
 9021              	.LBB2066:
 524:src/xeq.c     **** 		Error = e;
 9022              		.loc 1 524 2 view .LVU2395
 524:src/xeq.c     **** 		Error = e;
 9023              		.loc 1 524 12 is_stmt 0 view .LVU2396
 9024 000e 164B     		ldr	r3, .L705+4
 524:src/xeq.c     **** 		Error = e;
 9025              		.loc 1 524 5 view .LVU2397
 9026 0010 1A68     		ldr	r2, [r3]
 9027 0012 0AB9     		cbnz	r2, .L697
 9028              	.LVL656:
 9029              	.LBB2067:
 9030              	.LBI2067:
ARM GAS  /tmp/ccK8IvWa.s 			page 294


 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 9031              		.loc 1 523 5 is_stmt 1 view .LVU2398
 9032              	.LBB2068:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 9033              		.loc 1 525 3 view .LVU2399
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 9034              		.loc 1 525 9 is_stmt 0 view .LVU2400
 9035 0014 0D22     		movs	r2, #13
 9036 0016 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 9037              		.loc 1 526 3 is_stmt 1 view .LVU2401
 9038              	.LVL657:
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 9039              		.loc 1 526 3 is_stmt 0 view .LVU2402
 9040              	.LBE2068:
 9041              	.LBE2067:
 9042              	.LBE2066:
 9043              	.LBE2065:
 645:src/xeq.c     **** 	}
 9044              		.loc 1 645 3 is_stmt 1 view .LVU2403
 9045              	.L697:
 655:src/xeq.c     **** 
 9046              		.loc 1 655 1 is_stmt 0 view .LVU2404
 9047 0018 14B0     		add	sp, sp, #80
 9048              		.cfi_remember_state
 9049              		.cfi_def_cfa_offset 16
 9050              		@ sp needed
 9051 001a 70BD     		pop	{r4, r5, r6, pc}
 9052              	.L698:
 9053              		.cfi_restore_state
 9054              	.LBB2069:
 9055              	.LBB2064:
 593:src/xeq.c     **** }
 9056              		.loc 1 593 37 view .LVU2405
 9057 001c 93F8EB37 		ldrb	r3, [r3, #2027]	@ zero_extendqisi2
 593:src/xeq.c     **** }
 9058              		.loc 1 593 9 view .LVU2406
 9059 0020 124A     		ldr	r2, .L705+8
 593:src/xeq.c     **** }
 9060              		.loc 1 593 37 view .LVU2407
 9061 0022 C3F30213 		ubfx	r3, r3, #4, #3
 9062 0026 0C46     		mov	r4, r1
 593:src/xeq.c     **** }
 9063              		.loc 1 593 9 view .LVU2408
 9064 0028 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9065 002a 0193     		str	r3, [sp, #4]
 9066              	.LBE2064:
 9067              	.LBE2069:
 648:src/xeq.c     **** 	getX(&x);
 9068              		.loc 1 648 2 is_stmt 1 view .LVU2409
 9069              	.LBB2070:
 9070              	.LBI2070:
 759:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 9071              		.loc 1 759 6 view .LVU2410
 9072              	.LBB2071:
 760:src/xeq.c     **** }
 9073              		.loc 1 760 2 view .LVU2411
ARM GAS  /tmp/ccK8IvWa.s 			page 295


 9074 002c 0646     		mov	r6, r0
 9075 002e 6421     		movs	r1, #100
 9076              	.LVL658:
 760:src/xeq.c     **** }
 9077              		.loc 1 760 2 is_stmt 0 view .LVU2412
 9078 0030 6C20     		movs	r0, #108
 9079              	.LVL659:
 760:src/xeq.c     **** }
 9080              		.loc 1 760 2 view .LVU2413
 9081 0032 FFF7FEFF 		bl	copyreg_n
 9082              	.LVL660:
 760:src/xeq.c     **** }
 9083              		.loc 1 760 2 view .LVU2414
 9084              	.LBE2071:
 9085              	.LBE2070:
 649:src/xeq.c     **** 	if (op == RARG_ROUND)
 9086              		.loc 1 649 2 is_stmt 1 view .LVU2415
 9087              	.LBB2072:
 9088              	.LBI2072:
 791:src/xeq.c     **** 	return getRegister(x, regX_idx);
 9089              		.loc 1 791 12 view .LVU2416
 9090              	.LBB2073:
 792:src/xeq.c     **** }
 9091              		.loc 1 792 2 view .LVU2417
 792:src/xeq.c     **** }
 9092              		.loc 1 792 9 is_stmt 0 view .LVU2418
 9093 0036 6421     		movs	r1, #100
 9094 0038 0BA8     		add	r0, sp, #44
 9095              	.LVL661:
 792:src/xeq.c     **** }
 9096              		.loc 1 792 9 view .LVU2419
 9097 003a FFF7FEFF 		bl	getRegister
 9098              	.LVL662:
 792:src/xeq.c     **** }
 9099              		.loc 1 792 9 view .LVU2420
 9100              	.LBE2073:
 9101              	.LBE2072:
 650:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9102              		.loc 1 650 2 is_stmt 1 view .LVU2421
 650:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9103              		.loc 1 650 5 is_stmt 0 view .LVU2422
 9104 003e 752C     		cmp	r4, #117
 651:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9105              		.loc 1 651 3 view .LVU2423
 9106 0040 02AC     		add	r4, sp, #8
 650:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9107              		.loc 1 650 5 view .LVU2424
 9108 0042 019B     		ldr	r3, [sp, #4]
 651:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9109              		.loc 1 651 3 view .LVU2425
 9110 0044 3246     		mov	r2, r6
 9111 0046 0BA9     		add	r1, sp, #44
 9112 0048 2046     		mov	r0, r4
 650:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9113              		.loc 1 650 5 view .LVU2426
 9114 004a 07D0     		beq	.L704
 9115              	.LVL663:
ARM GAS  /tmp/ccK8IvWa.s 			page 296


 653:src/xeq.c     **** 	setX(&res);
 9116              		.loc 1 653 3 is_stmt 1 view .LVU2427
 9117 004c FFF7FEFF 		bl	decNumberRoundDecimals
 9118              	.LVL664:
 9119              	.L702:
 654:src/xeq.c     **** }
 9120              		.loc 1 654 2 view .LVU2428
 9121              	.LBB2074:
 9122              	.LBI2074:
 795:src/xeq.c     **** 	setRegister(regX_idx, x);
 9123              		.loc 1 795 6 view .LVU2429
 9124              	.LBB2075:
 796:src/xeq.c     **** }
 9125              		.loc 1 796 2 view .LVU2430
 9126 0050 2146     		mov	r1, r4
 9127 0052 6420     		movs	r0, #100
 9128 0054 FFF7FEFF 		bl	setRegister
 9129              	.LVL665:
 796:src/xeq.c     **** }
 9130              		.loc 1 796 2 is_stmt 0 view .LVU2431
 9131              	.LBE2075:
 9132              	.LBE2074:
 655:src/xeq.c     **** 
 9133              		.loc 1 655 1 view .LVU2432
 9134 0058 14B0     		add	sp, sp, #80
 9135              		.cfi_remember_state
 9136              		.cfi_def_cfa_offset 16
 9137              		@ sp needed
 9138 005a 70BD     		pop	{r4, r5, r6, pc}
 9139              	.LVL666:
 9140              	.L704:
 9141              		.cfi_restore_state
 651:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9142              		.loc 1 651 3 is_stmt 1 view .LVU2433
 9143 005c FFF7FEFF 		bl	decNumberRoundDigits
 9144              	.LVL667:
 651:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9145              		.loc 1 651 3 is_stmt 0 view .LVU2434
 9146 0060 F6E7     		b	.L702
 9147              	.L706:
 9148 0062 00BF     		.align	2
 9149              	.L705:
 9150 0064 00000000 		.word	PersistentRam
 9151 0068 00000000 		.word	Error
 9152 006c 00000000 		.word	.LANCHOR1
 9153              		.cfi_endproc
 9154              	.LFE39:
 9156              		.section	.text.setY,"ax",%progbits
 9157              		.align	1
 9158              		.p2align 2,,3
 9159              		.global	setY
 9160              		.syntax unified
 9161              		.thumb
 9162              		.thumb_func
 9163              		.fpu fpv4-sp-d16
 9165              	setY:
 9166              	.LVL668:
ARM GAS  /tmp/ccK8IvWa.s 			page 297


 9167              	.LFB61:
 803:src/xeq.c     **** 	setRegister(regY_idx, y);
 9168              		.loc 1 803 31 is_stmt 1 view -0
 9169              		.cfi_startproc
 9170              		@ args = 0, pretend = 0, frame = 0
 9171              		@ frame_needed = 0, uses_anonymous_args = 0
 9172              		@ link register save eliminated.
 804:src/xeq.c     **** }
 9173              		.loc 1 804 2 view .LVU2436
 803:src/xeq.c     **** 	setRegister(regY_idx, y);
 9174              		.loc 1 803 31 is_stmt 0 view .LVU2437
 9175 0000 0146     		mov	r1, r0
 804:src/xeq.c     **** }
 9176              		.loc 1 804 2 view .LVU2438
 9177 0002 6520     		movs	r0, #101
 9178              	.LVL669:
 804:src/xeq.c     **** }
 9179              		.loc 1 804 2 view .LVU2439
 9180 0004 FFF7FEBF 		b	setRegister
 9181              	.LVL670:
 804:src/xeq.c     **** }
 9182              		.loc 1 804 2 view .LVU2440
 9183              		.cfi_endproc
 9184              	.LFE61:
 9186              		.section	.text.setXY,"ax",%progbits
 9187              		.align	1
 9188              		.p2align 2,,3
 9189              		.global	setXY
 9190              		.syntax unified
 9191              		.thumb
 9192              		.thumb_func
 9193              		.fpu fpv4-sp-d16
 9195              	setXY:
 9196              	.LVL671:
 9197              	.LFB65:
 826:src/xeq.c     **** 	setX(x);
 9198              		.loc 1 826 52 is_stmt 1 view -0
 9199              		.cfi_startproc
 9200              		@ args = 0, pretend = 0, frame = 0
 9201              		@ frame_needed = 0, uses_anonymous_args = 0
 827:src/xeq.c     **** 	setY(y);
 9202              		.loc 1 827 2 view .LVU2442
 9203              	.LBB2076:
 9204              	.LBI2076:
 795:src/xeq.c     **** 	setRegister(regX_idx, x);
 9205              		.loc 1 795 6 view .LVU2443
 9206              	.LBB2077:
 796:src/xeq.c     **** }
 9207              		.loc 1 796 2 view .LVU2444
 9208              	.LBE2077:
 9209              	.LBE2076:
 826:src/xeq.c     **** 	setX(x);
 9210              		.loc 1 826 52 is_stmt 0 view .LVU2445
 9211 0000 10B5     		push	{r4, lr}
 9212              		.cfi_def_cfa_offset 8
 9213              		.cfi_offset 4, -8
 9214              		.cfi_offset 14, -4
ARM GAS  /tmp/ccK8IvWa.s 			page 298


 826:src/xeq.c     **** 	setX(x);
 9215              		.loc 1 826 52 view .LVU2446
 9216 0002 0C46     		mov	r4, r1
 9217              	.LBB2079:
 9218              	.LBB2078:
 796:src/xeq.c     **** }
 9219              		.loc 1 796 2 view .LVU2447
 9220 0004 0146     		mov	r1, r0
 9221              	.LVL672:
 796:src/xeq.c     **** }
 9222              		.loc 1 796 2 view .LVU2448
 9223 0006 6420     		movs	r0, #100
 9224              	.LVL673:
 796:src/xeq.c     **** }
 9225              		.loc 1 796 2 view .LVU2449
 9226 0008 FFF7FEFF 		bl	setRegister
 9227              	.LVL674:
 796:src/xeq.c     **** }
 9228              		.loc 1 796 2 view .LVU2450
 9229              	.LBE2078:
 9230              	.LBE2079:
 828:src/xeq.c     **** }
 9231              		.loc 1 828 2 is_stmt 1 view .LVU2451
 9232              	.LBB2080:
 9233              	.LBI2080:
 803:src/xeq.c     **** 	setRegister(regY_idx, y);
 9234              		.loc 1 803 6 view .LVU2452
 9235              	.LBB2081:
 804:src/xeq.c     **** }
 9236              		.loc 1 804 2 view .LVU2453
 9237 000c 2146     		mov	r1, r4
 9238 000e 6520     		movs	r0, #101
 9239              	.LBE2081:
 9240              	.LBE2080:
 829:src/xeq.c     **** 
 9241              		.loc 1 829 1 is_stmt 0 view .LVU2454
 9242 0010 BDE81040 		pop	{r4, lr}
 9243              		.cfi_restore 14
 9244              		.cfi_restore 4
 9245              		.cfi_def_cfa_offset 0
 9246              	.LVL675:
 9247              	.LBB2083:
 9248              	.LBB2082:
 804:src/xeq.c     **** }
 9249              		.loc 1 804 2 view .LVU2455
 9250 0014 FFF7FEBF 		b	setRegister
 9251              	.LVL676:
 804:src/xeq.c     **** }
 9252              		.loc 1 804 2 view .LVU2456
 9253              	.LBE2082:
 9254              	.LBE2083:
 9255              		.cfi_endproc
 9256              	.LFE65:
 9258              		.section	.text.get_reg_n_int,"ax",%progbits
 9259              		.align	1
 9260              		.p2align 2,,3
 9261              		.global	get_reg_n_int
ARM GAS  /tmp/ccK8IvWa.s 			page 299


 9262              		.syntax unified
 9263              		.thumb
 9264              		.thumb_func
 9265              		.fpu fpv4-sp-d16
 9267              	get_reg_n_int:
 9268              	.LVL677:
 9269              	.LFB89:
1216:src/xeq.c     **** 	long long int ll;
 9270              		.loc 1 1216 40 is_stmt 1 view -0
 9271              		.cfi_startproc
 9272              		@ args = 0, pretend = 0, frame = 8
 9273              		@ frame_needed = 0, uses_anonymous_args = 0
1217:src/xeq.c     **** 	xcopy(&ll, get_reg_n(index), sizeof(ll));
 9274              		.loc 1 1217 2 view .LVU2458
1218:src/xeq.c     **** 	return ll;
 9275              		.loc 1 1218 2 view .LVU2459
1216:src/xeq.c     **** 	long long int ll;
 9276              		.loc 1 1216 40 is_stmt 0 view .LVU2460
 9277 0000 00B5     		push	{lr}
 9278              		.cfi_def_cfa_offset 4
 9279              		.cfi_offset 14, -4
 9280 0002 83B0     		sub	sp, sp, #12
 9281              		.cfi_def_cfa_offset 16
1218:src/xeq.c     **** 	return ll;
 9282              		.loc 1 1218 13 view .LVU2461
 9283 0004 FFF7FEFF 		bl	get_reg_n
 9284              	.LVL678:
1218:src/xeq.c     **** 	return ll;
 9285              		.loc 1 1218 2 view .LVU2462
 9286 0008 0822     		movs	r2, #8
1218:src/xeq.c     **** 	return ll;
 9287              		.loc 1 1218 13 view .LVU2463
 9288 000a 0146     		mov	r1, r0
1218:src/xeq.c     **** 	return ll;
 9289              		.loc 1 1218 2 view .LVU2464
 9290 000c 6846     		mov	r0, sp
 9291 000e FFF7FEFF 		bl	xcopy
 9292              	.LVL679:
1219:src/xeq.c     **** }
 9293              		.loc 1 1219 2 is_stmt 1 view .LVU2465
1220:src/xeq.c     **** 
 9294              		.loc 1 1220 1 is_stmt 0 view .LVU2466
 9295 0012 DDE90001 		ldrd	r0, [sp]
 9296 0016 03B0     		add	sp, sp, #12
 9297              		.cfi_def_cfa_offset 4
 9298              		@ sp needed
 9299 0018 5DF804FB 		ldr	pc, [sp], #4
 9300              		.cfi_endproc
 9301              	.LFE89:
 9303              		.section	.text.storcl_intop,"ax",%progbits
 9304              		.align	1
 9305              		.p2align 2,,3
 9306              		.syntax unified
 9307              		.thumb
 9308              		.thumb_func
 9309              		.fpu fpv4-sp-d16
 9311              	storcl_intop:
ARM GAS  /tmp/ccK8IvWa.s 			page 300


 9312              	.LVL680:
 9313              	.LFB111:
1471:src/xeq.c     **** 	long long int x, y;
 9314              		.loc 1 1471 83 is_stmt 1 view -0
 9315              		.cfi_startproc
 9316              		@ args = 0, pretend = 0, frame = 0
 9317              		@ frame_needed = 0, uses_anonymous_args = 0
1472:src/xeq.c     **** 
 9318              		.loc 1 1472 2 view .LVU2468
1474:src/xeq.c     **** 	y = get_reg_n_int(index);
 9319              		.loc 1 1474 2 view .LVU2469
 9320              	.LBB2084:
 9321              	.LBI2084:
1242:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 9322              		.loc 1 1242 15 view .LVU2470
 9323              	.LBB2085:
1243:src/xeq.c     **** }
 9324              		.loc 1 1243 2 view .LVU2471
 9325              	.LBE2085:
 9326              	.LBE2084:
1471:src/xeq.c     **** 	long long int x, y;
 9327              		.loc 1 1471 83 is_stmt 0 view .LVU2472
 9328 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 9329              		.cfi_def_cfa_offset 32
 9330              		.cfi_offset 3, -32
 9331              		.cfi_offset 4, -28
 9332              		.cfi_offset 5, -24
 9333              		.cfi_offset 6, -20
 9334              		.cfi_offset 7, -16
 9335              		.cfi_offset 8, -12
 9336              		.cfi_offset 9, -8
 9337              		.cfi_offset 14, -4
1471:src/xeq.c     **** 	long long int x, y;
 9338              		.loc 1 1471 83 view .LVU2473
 9339 0004 0446     		mov	r4, r0
 9340              	.LBB2089:
 9341              	.LBB2086:
1243:src/xeq.c     **** }
 9342              		.loc 1 1243 9 view .LVU2474
 9343 0006 6420     		movs	r0, #100
 9344              	.LVL681:
1243:src/xeq.c     **** }
 9345              		.loc 1 1243 9 view .LVU2475
 9346              	.LBE2086:
 9347              	.LBE2089:
1471:src/xeq.c     **** 	long long int x, y;
 9348              		.loc 1 1471 83 view .LVU2476
 9349 0008 8946     		mov	r9, r1
 9350 000a 9846     		mov	r8, r3
 9351 000c 1646     		mov	r6, r2
 9352              	.LBB2090:
 9353              	.LBB2087:
1243:src/xeq.c     **** }
 9354              		.loc 1 1243 9 view .LVU2477
 9355 000e FFF7FEFF 		bl	get_reg_n_int
 9356              	.LVL682:
1243:src/xeq.c     **** }
ARM GAS  /tmp/ccK8IvWa.s 			page 301


 9357              		.loc 1 1243 9 view .LVU2478
 9358 0012 0746     		mov	r7, r0
 9359              	.LBE2087:
 9360              	.LBE2090:
1475:src/xeq.c     **** 
 9361              		.loc 1 1475 6 view .LVU2479
 9362 0014 4846     		mov	r0, r9
 9363              	.LBB2091:
 9364              	.LBB2088:
1243:src/xeq.c     **** }
 9365              		.loc 1 1243 9 view .LVU2480
 9366 0016 0D46     		mov	r5, r1
 9367              	.LVL683:
1243:src/xeq.c     **** }
 9368              		.loc 1 1243 9 view .LVU2481
 9369              	.LBE2088:
 9370              	.LBE2091:
1475:src/xeq.c     **** 
 9371              		.loc 1 1475 2 is_stmt 1 view .LVU2482
1475:src/xeq.c     **** 
 9372              		.loc 1 1475 6 is_stmt 0 view .LVU2483
 9373 0018 FFF7FEFF 		bl	get_reg_n_int
 9374              	.LVL684:
1477:src/xeq.c     **** 		const long long int t = x;
 9375              		.loc 1 1477 2 is_stmt 1 view .LVU2484
1477:src/xeq.c     **** 		const long long int t = x;
 9376              		.loc 1 1477 5 is_stmt 0 view .LVU2485
 9377 001c B8F1000F 		cmp	r8, #0
 9378 0020 05D0     		beq	.L713
 9379 0022 3A46     		mov	r2, r7
 9380 0024 2B46     		mov	r3, r5
 9381              	.LBB2092:
1479:src/xeq.c     **** 		y = t;
 9382              		.loc 1 1479 5 view .LVU2486
 9383 0026 0746     		mov	r7, r0
 9384              	.LVL685:
1479:src/xeq.c     **** 		y = t;
 9385              		.loc 1 1479 5 view .LVU2487
 9386 0028 0D46     		mov	r5, r1
 9387              	.LVL686:
1480:src/xeq.c     **** 	}
 9388              		.loc 1 1480 5 view .LVU2488
 9389 002a 1046     		mov	r0, r2
 9390              	.LVL687:
1480:src/xeq.c     **** 	}
 9391              		.loc 1 1480 5 view .LVU2489
 9392 002c 1946     		mov	r1, r3
 9393              	.LVL688:
 9394              	.L713:
1480:src/xeq.c     **** 	}
 9395              		.loc 1 1480 5 view .LVU2490
 9396              	.LBE2092:
1483:src/xeq.c     **** 	case 1:
 9397              		.loc 1 1483 2 is_stmt 1 view .LVU2491
 9398 002e 013C     		subs	r4, r4, #1
 9399 0030 052C     		cmp	r4, #5
 9400 0032 3AD8     		bhi	.L722
ARM GAS  /tmp/ccK8IvWa.s 			page 302


 9401 0034 DFE804F0 		tbb	[pc, r4]
 9402              	.L716:
 9403 0038 0C       		.byte	(.L721-.L716)/2
 9404 0039 15       		.byte	(.L720-.L716)/2
 9405 003a 1E       		.byte	(.L719-.L716)/2
 9406 003b 27       		.byte	(.L718-.L716)/2
 9407 003c 30       		.byte	(.L717-.L716)/2
 9408 003d 03       		.byte	(.L715-.L716)/2
 9409              		.p2align 1
 9410              	.L715:
1500:src/xeq.c     **** 		break;
 9411              		.loc 1 1500 3 view .LVU2492
1500:src/xeq.c     **** 		break;
 9412              		.loc 1 1500 8 is_stmt 0 view .LVU2493
 9413 003e 3A46     		mov	r2, r7
 9414 0040 2B46     		mov	r3, r5
 9415 0042 FFF7FEFF 		bl	intMax
 9416              	.LVL689:
1500:src/xeq.c     **** 		break;
 9417              		.loc 1 1500 6 view .LVU2494
 9418 0046 C6E90001 		strd	r0, [r6]
1501:src/xeq.c     **** 	default:
 9419              		.loc 1 1501 3 is_stmt 1 view .LVU2495
1505:src/xeq.c     **** }
 9420              		.loc 1 1505 9 is_stmt 0 view .LVU2496
 9421 004a 0020     		movs	r0, #0
 9422              	.L712:
1506:src/xeq.c     **** 
 9423              		.loc 1 1506 1 view .LVU2497
 9424 004c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 9425              	.LVL690:
 9426              	.L721:
1485:src/xeq.c     **** 		break;
 9427              		.loc 1 1485 3 is_stmt 1 view .LVU2498
1485:src/xeq.c     **** 		break;
 9428              		.loc 1 1485 8 is_stmt 0 view .LVU2499
 9429 0050 3A46     		mov	r2, r7
 9430 0052 2B46     		mov	r3, r5
 9431 0054 FFF7FEFF 		bl	intAdd
 9432              	.LVL691:
1485:src/xeq.c     **** 		break;
 9433              		.loc 1 1485 6 view .LVU2500
 9434 0058 C6E90001 		strd	r0, [r6]
1486:src/xeq.c     **** 	case 2:
 9435              		.loc 1 1486 3 is_stmt 1 view .LVU2501
1505:src/xeq.c     **** }
 9436              		.loc 1 1505 9 is_stmt 0 view .LVU2502
 9437 005c 0020     		movs	r0, #0
1506:src/xeq.c     **** 
 9438              		.loc 1 1506 1 view .LVU2503
 9439 005e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 9440              	.LVL692:
 9441              	.L720:
1488:src/xeq.c     **** 		break;
 9442              		.loc 1 1488 3 is_stmt 1 view .LVU2504
1488:src/xeq.c     **** 		break;
 9443              		.loc 1 1488 8 is_stmt 0 view .LVU2505
ARM GAS  /tmp/ccK8IvWa.s 			page 303


 9444 0062 3A46     		mov	r2, r7
 9445 0064 2B46     		mov	r3, r5
 9446 0066 FFF7FEFF 		bl	intSubtract
 9447              	.LVL693:
1488:src/xeq.c     **** 		break;
 9448              		.loc 1 1488 6 view .LVU2506
 9449 006a C6E90001 		strd	r0, [r6]
1489:src/xeq.c     **** 	case 3:
 9450              		.loc 1 1489 3 is_stmt 1 view .LVU2507
1505:src/xeq.c     **** }
 9451              		.loc 1 1505 9 is_stmt 0 view .LVU2508
 9452 006e 0020     		movs	r0, #0
1506:src/xeq.c     **** 
 9453              		.loc 1 1506 1 view .LVU2509
 9454 0070 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 9455              	.LVL694:
 9456              	.L719:
1491:src/xeq.c     **** 		break;
 9457              		.loc 1 1491 3 is_stmt 1 view .LVU2510
1491:src/xeq.c     **** 		break;
 9458              		.loc 1 1491 8 is_stmt 0 view .LVU2511
 9459 0074 3A46     		mov	r2, r7
 9460 0076 2B46     		mov	r3, r5
 9461 0078 FFF7FEFF 		bl	intMultiply
 9462              	.LVL695:
1491:src/xeq.c     **** 		break;
 9463              		.loc 1 1491 6 view .LVU2512
 9464 007c C6E90001 		strd	r0, [r6]
1492:src/xeq.c     **** 	case 4:
 9465              		.loc 1 1492 3 is_stmt 1 view .LVU2513
1505:src/xeq.c     **** }
 9466              		.loc 1 1505 9 is_stmt 0 view .LVU2514
 9467 0080 0020     		movs	r0, #0
1506:src/xeq.c     **** 
 9468              		.loc 1 1506 1 view .LVU2515
 9469 0082 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 9470              	.LVL696:
 9471              	.L718:
1494:src/xeq.c     **** 		break;
 9472              		.loc 1 1494 3 is_stmt 1 view .LVU2516
1494:src/xeq.c     **** 		break;
 9473              		.loc 1 1494 8 is_stmt 0 view .LVU2517
 9474 0086 3A46     		mov	r2, r7
 9475 0088 2B46     		mov	r3, r5
 9476 008a FFF7FEFF 		bl	intDivide
 9477              	.LVL697:
1494:src/xeq.c     **** 		break;
 9478              		.loc 1 1494 6 view .LVU2518
 9479 008e C6E90001 		strd	r0, [r6]
1495:src/xeq.c     **** 	case 5:
 9480              		.loc 1 1495 3 is_stmt 1 view .LVU2519
1505:src/xeq.c     **** }
 9481              		.loc 1 1505 9 is_stmt 0 view .LVU2520
 9482 0092 0020     		movs	r0, #0
1506:src/xeq.c     **** 
 9483              		.loc 1 1506 1 view .LVU2521
 9484 0094 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
ARM GAS  /tmp/ccK8IvWa.s 			page 304


 9485              	.LVL698:
 9486              	.L717:
1497:src/xeq.c     **** 		break;
 9487              		.loc 1 1497 3 is_stmt 1 view .LVU2522
1497:src/xeq.c     **** 		break;
 9488              		.loc 1 1497 8 is_stmt 0 view .LVU2523
 9489 0098 3A46     		mov	r2, r7
 9490 009a 2B46     		mov	r3, r5
 9491 009c FFF7FEFF 		bl	intMin
 9492              	.LVL699:
1497:src/xeq.c     **** 		break;
 9493              		.loc 1 1497 6 view .LVU2524
 9494 00a0 C6E90001 		strd	r0, [r6]
1498:src/xeq.c     **** 	case 6:
 9495              		.loc 1 1498 3 is_stmt 1 view .LVU2525
1505:src/xeq.c     **** }
 9496              		.loc 1 1505 9 is_stmt 0 view .LVU2526
 9497 00a4 0020     		movs	r0, #0
1506:src/xeq.c     **** 
 9498              		.loc 1 1506 1 view .LVU2527
 9499 00a6 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 9500              	.LVL700:
 9501              	.L722:
1505:src/xeq.c     **** }
 9502              		.loc 1 1505 9 view .LVU2528
 9503 00aa 0120     		movs	r0, #1
 9504              	.LVL701:
1505:src/xeq.c     **** }
 9505              		.loc 1 1505 9 view .LVU2529
 9506 00ac CEE7     		b	.L712
 9507              		.cfi_endproc
 9508              	.LFE111:
 9510 00ae 00BF     		.section	.text.incdec,"ax",%progbits
 9511              		.align	1
 9512              		.p2align 2,,3
 9513              		.syntax unified
 9514              		.thumb
 9515              		.thumb_func
 9516              		.fpu fpv4-sp-d16
 9518              	incdec:
 9519              	.LVL702:
 9520              	.LFB185:
3149:src/xeq.c     **** 	if (is_intmode()) {
 9521              		.loc 1 3149 46 is_stmt 1 view -0
 9522              		.cfi_startproc
 9523              		@ args = 0, pretend = 0, frame = 80
 9524              		@ frame_needed = 0, uses_anonymous_args = 0
3150:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 9525              		.loc 1 3150 2 view .LVU2531
3149:src/xeq.c     **** 	if (is_intmode()) {
 9526              		.loc 1 3149 46 is_stmt 0 view .LVU2532
 9527 0000 70B5     		push	{r4, r5, r6, lr}
 9528              		.cfi_def_cfa_offset 16
 9529              		.cfi_offset 4, -16
 9530              		.cfi_offset 5, -12
 9531              		.cfi_offset 6, -8
 9532              		.cfi_offset 14, -4
ARM GAS  /tmp/ccK8IvWa.s 			page 305


3150:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 9533              		.loc 1 3150 6 view .LVU2533
 9534 0002 234B     		ldr	r3, .L737
 9535 0004 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3150:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 9536              		.loc 1 3150 5 view .LVU2534
 9537 0008 DB07     		lsls	r3, r3, #31
3149:src/xeq.c     **** 	if (is_intmode()) {
 9538              		.loc 1 3149 46 view .LVU2535
 9539 000a 94B0     		sub	sp, sp, #80
 9540              		.cfi_def_cfa_offset 96
3149:src/xeq.c     **** 	if (is_intmode()) {
 9541              		.loc 1 3149 46 view .LVU2536
 9542 000c 0D46     		mov	r5, r1
 9543 000e 0446     		mov	r4, r0
3150:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 9544              		.loc 1 3150 5 view .LVU2537
 9545 0010 1ED5     		bpl	.L728
 9546              	.LVL703:
 9547              	.LBB2100:
 9548              	.LBI2100:
3149:src/xeq.c     **** 	if (is_intmode()) {
 9549              		.loc 1 3149 12 is_stmt 1 view .LVU2538
 9550              	.LBB2101:
3151:src/xeq.c     **** 		int xs;
 9551              		.loc 1 3151 3 view .LVU2539
3151:src/xeq.c     **** 		int xs;
 9552              		.loc 1 3151 21 is_stmt 0 view .LVU2540
 9553 0012 FFF7FEFF 		bl	get_reg_n_int
 9554              	.LVL704:
3152:src/xeq.c     **** 		unsigned long long int xv;
 9555              		.loc 1 3152 3 is_stmt 1 view .LVU2541
3153:src/xeq.c     **** 
 9556              		.loc 1 3153 3 view .LVU2542
3155:src/xeq.c     **** 			x = intAdd(x, 1LL);
 9557              		.loc 1 3155 3 view .LVU2543
3156:src/xeq.c     **** 		else
 9558              		.loc 1 3156 8 is_stmt 0 view .LVU2544
 9559 0016 0122     		movs	r2, #1
 9560 0018 0023     		movs	r3, #0
3155:src/xeq.c     **** 			x = intAdd(x, 1LL);
 9561              		.loc 1 3155 6 view .LVU2545
 9562 001a 002D     		cmp	r5, #0
 9563 001c 33D1     		bne	.L735
3158:src/xeq.c     **** 		set_reg_n_int(arg, x);
 9564              		.loc 1 3158 4 is_stmt 1 view .LVU2546
3158:src/xeq.c     **** 		set_reg_n_int(arg, x);
 9565              		.loc 1 3158 8 is_stmt 0 view .LVU2547
 9566 001e FFF7FEFF 		bl	intSubtract
 9567              	.LVL705:
3158:src/xeq.c     **** 		set_reg_n_int(arg, x);
 9568              		.loc 1 3158 8 view .LVU2548
 9569 0022 0646     		mov	r6, r0
 9570 0024 0D46     		mov	r5, r1
 9571              	.LVL706:
 9572              	.L730:
3159:src/xeq.c     **** 
ARM GAS  /tmp/ccK8IvWa.s 			page 306


 9573              		.loc 1 3159 3 is_stmt 1 view .LVU2549
 9574              	.LBB2102:
 9575              	.LBB2103:
1223:src/xeq.c     **** }
 9576              		.loc 1 1223 8 is_stmt 0 view .LVU2550
 9577 0026 2046     		mov	r0, r4
 9578 0028 CDE90A65 		strd	r6, r5, [sp, #40]
 9579              	.LVL707:
1223:src/xeq.c     **** }
 9580              		.loc 1 1223 8 view .LVU2551
 9581              	.LBE2103:
 9582              	.LBI2102:
1222:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 9583              		.loc 1 1222 6 is_stmt 1 view .LVU2552
 9584              	.LBB2104:
1223:src/xeq.c     **** }
 9585              		.loc 1 1223 2 view .LVU2553
1223:src/xeq.c     **** }
 9586              		.loc 1 1223 8 is_stmt 0 view .LVU2554
 9587 002c FFF7FEFF 		bl	get_reg_n
 9588              	.LVL708:
1223:src/xeq.c     **** }
 9589              		.loc 1 1223 2 view .LVU2555
 9590 0030 0AA9     		add	r1, sp, #40
 9591 0032 0822     		movs	r2, #8
 9592 0034 FFF7FEFF 		bl	xcopy
 9593              	.LVL709:
1223:src/xeq.c     **** }
 9594              		.loc 1 1223 2 view .LVU2556
 9595              	.LBE2104:
 9596              	.LBE2102:
3161:src/xeq.c     **** 		return xv != 0;
 9597              		.loc 1 3161 3 is_stmt 1 view .LVU2557
3161:src/xeq.c     **** 		return xv != 0;
 9598              		.loc 1 3161 8 is_stmt 0 view .LVU2558
 9599 0038 0AAA     		add	r2, sp, #40
 9600 003a 3046     		mov	r0, r6
 9601 003c 2946     		mov	r1, r5
 9602 003e FFF7FEFF 		bl	extract_value
 9603              	.LVL710:
3162:src/xeq.c     **** 	} else {
 9604              		.loc 1 3162 3 is_stmt 1 view .LVU2559
3162:src/xeq.c     **** 	} else {
 9605              		.loc 1 3162 13 is_stmt 0 view .LVU2560
 9606 0042 50EA0103 		orrs	r3, r0, r1
 9607 0046 14BF     		ite	ne
 9608 0048 0120     		movne	r0, #1
 9609              	.LVL711:
3162:src/xeq.c     **** 	} else {
 9610              		.loc 1 3162 13 view .LVU2561
 9611 004a 0020     		moveq	r0, #0
 9612              	.LVL712:
3162:src/xeq.c     **** 	} else {
 9613              		.loc 1 3162 13 view .LVU2562
 9614              	.LBE2101:
 9615              	.LBE2100:
3175:src/xeq.c     **** 
ARM GAS  /tmp/ccK8IvWa.s 			page 307


 9616              		.loc 1 3175 1 view .LVU2563
 9617 004c 14B0     		add	sp, sp, #80
 9618              		.cfi_remember_state
 9619              		.cfi_def_cfa_offset 16
 9620              		@ sp needed
 9621 004e 70BD     		pop	{r4, r5, r6, pc}
 9622              	.LVL713:
 9623              	.L728:
 9624              		.cfi_restore_state
 9625              	.LBB2106:
3164:src/xeq.c     **** 
 9626              		.loc 1 3164 3 is_stmt 1 view .LVU2564
3166:src/xeq.c     **** 		if (inc)
 9627              		.loc 1 3166 3 view .LVU2565
 9628 0050 01A8     		add	r0, sp, #4
 9629              	.LVL714:
3166:src/xeq.c     **** 		if (inc)
 9630              		.loc 1 3166 3 is_stmt 0 view .LVU2566
 9631 0052 2146     		mov	r1, r4
 9632              	.LVL715:
3166:src/xeq.c     **** 		if (inc)
 9633              		.loc 1 3166 3 view .LVU2567
 9634 0054 FFF7FEFF 		bl	getRegister
 9635              	.LVL716:
3167:src/xeq.c     **** 			dn_inc(&x);
 9636              		.loc 1 3167 3 is_stmt 1 view .LVU2568
3168:src/xeq.c     **** 		else
 9637              		.loc 1 3168 4 is_stmt 0 view .LVU2569
 9638 0058 01A8     		add	r0, sp, #4
3167:src/xeq.c     **** 			dn_inc(&x);
 9639              		.loc 1 3167 6 view .LVU2570
 9640 005a 8DB9     		cbnz	r5, .L736
3170:src/xeq.c     **** 		setRegister(arg, &x);
 9641              		.loc 1 3170 4 is_stmt 1 view .LVU2571
 9642 005c FFF7FEFF 		bl	dn_dec
 9643              	.LVL717:
 9644              	.L733:
3171:src/xeq.c     **** 		decNumberTrunc(&y, &x);
 9645              		.loc 1 3171 3 view .LVU2572
 9646 0060 2046     		mov	r0, r4
 9647 0062 01A9     		add	r1, sp, #4
 9648 0064 FFF7FEFF 		bl	setRegister
 9649              	.LVL718:
3172:src/xeq.c     **** 		return ! dn_eq0(&y);
 9650              		.loc 1 3172 3 view .LVU2573
 9651 0068 01A9     		add	r1, sp, #4
 9652 006a 0AA8     		add	r0, sp, #40
 9653 006c FFF7FEFF 		bl	decNumberTrunc
 9654              	.LVL719:
3173:src/xeq.c     **** 	}
 9655              		.loc 1 3173 3 view .LVU2574
3173:src/xeq.c     **** 	}
 9656              		.loc 1 3173 12 is_stmt 0 view .LVU2575
 9657 0070 0AA8     		add	r0, sp, #40
 9658 0072 FFF7FEFF 		bl	dn_eq0
 9659              	.LVL720:
3173:src/xeq.c     **** 	}
ARM GAS  /tmp/ccK8IvWa.s 			page 308


 9660              		.loc 1 3173 10 view .LVU2576
 9661 0076 B0FA80F0 		clz	r0, r0
 9662 007a 4009     		lsrs	r0, r0, #5
 9663              	.LBE2106:
3175:src/xeq.c     **** 
 9664              		.loc 1 3175 1 view .LVU2577
 9665 007c 14B0     		add	sp, sp, #80
 9666              		.cfi_remember_state
 9667              		.cfi_def_cfa_offset 16
 9668              		@ sp needed
 9669 007e 70BD     		pop	{r4, r5, r6, pc}
 9670              	.LVL721:
 9671              	.L736:
 9672              		.cfi_restore_state
 9673              	.LBB2107:
3168:src/xeq.c     **** 		else
 9674              		.loc 1 3168 4 is_stmt 1 view .LVU2578
 9675 0080 FFF7FEFF 		bl	dn_inc
 9676              	.LVL722:
 9677 0084 ECE7     		b	.L733
 9678              	.LVL723:
 9679              	.L735:
3168:src/xeq.c     **** 		else
 9680              		.loc 1 3168 4 is_stmt 0 view .LVU2579
 9681              	.LBE2107:
 9682              	.LBB2108:
 9683              	.LBB2105:
3156:src/xeq.c     **** 		else
 9684              		.loc 1 3156 4 is_stmt 1 view .LVU2580
3156:src/xeq.c     **** 		else
 9685              		.loc 1 3156 8 is_stmt 0 view .LVU2581
 9686 0086 FFF7FEFF 		bl	intAdd
 9687              	.LVL724:
3156:src/xeq.c     **** 		else
 9688              		.loc 1 3156 8 view .LVU2582
 9689 008a 0646     		mov	r6, r0
 9690 008c 0D46     		mov	r5, r1
 9691              	.LVL725:
3156:src/xeq.c     **** 		else
 9692              		.loc 1 3156 8 view .LVU2583
 9693 008e CAE7     		b	.L730
 9694              	.L738:
 9695              		.align	2
 9696              	.L737:
 9697 0090 00000000 		.word	PersistentRam
 9698              	.LBE2105:
 9699              	.LBE2108:
 9700              		.cfi_endproc
 9701              	.LFE185:
 9703              		.section	.text.set_reg_n_int,"ax",%progbits
 9704              		.align	1
 9705              		.p2align 2,,3
 9706              		.global	set_reg_n_int
 9707              		.syntax unified
 9708              		.thumb
 9709              		.thumb_func
 9710              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccK8IvWa.s 			page 309


 9712              	set_reg_n_int:
 9713              	.LVL726:
 9714              	.LFB90:
1222:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 9715              		.loc 1 1222 49 is_stmt 1 view -0
 9716              		.cfi_startproc
 9717              		@ args = 0, pretend = 0, frame = 8
 9718              		@ frame_needed = 0, uses_anonymous_args = 0
1223:src/xeq.c     **** }
 9719              		.loc 1 1223 2 view .LVU2585
1222:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 9720              		.loc 1 1222 49 is_stmt 0 view .LVU2586
 9721 0000 00B5     		push	{lr}
 9722              		.cfi_def_cfa_offset 4
 9723              		.cfi_offset 14, -4
 9724 0002 83B0     		sub	sp, sp, #12
 9725              		.cfi_def_cfa_offset 16
1222:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 9726              		.loc 1 1222 49 view .LVU2587
 9727 0004 CDE90023 		strd	r2, [sp]
1223:src/xeq.c     **** }
 9728              		.loc 1 1223 8 view .LVU2588
 9729 0008 FFF7FEFF 		bl	get_reg_n
 9730              	.LVL727:
1223:src/xeq.c     **** }
 9731              		.loc 1 1223 2 view .LVU2589
 9732 000c 0822     		movs	r2, #8
 9733 000e 6946     		mov	r1, sp
 9734 0010 FFF7FEFF 		bl	xcopy
 9735              	.LVL728:
1224:src/xeq.c     **** 
 9736              		.loc 1 1224 1 view .LVU2590
 9737 0014 03B0     		add	sp, sp, #12
 9738              		.cfi_def_cfa_offset 4
 9739              		@ sp needed
 9740 0016 5DF804FB 		ldr	pc, [sp], #4
 9741              		.cfi_endproc
 9742              	.LFE90:
 9744 001a 00BF     		.section	.text.get_reg_n_int_sgn,"ax",%progbits
 9745              		.align	1
 9746              		.p2align 2,,3
 9747              		.global	get_reg_n_int_sgn
 9748              		.syntax unified
 9749              		.thumb
 9750              		.thumb_func
 9751              		.fpu fpv4-sp-d16
 9753              	get_reg_n_int_sgn:
 9754              	.LVL729:
 9755              	.LFB91:
1228:src/xeq.c     **** 	if (is_intmode()) {
 9756              		.loc 1 1228 63 is_stmt 1 view -0
 9757              		.cfi_startproc
 9758              		@ args = 0, pretend = 0, frame = 40
 9759              		@ frame_needed = 0, uses_anonymous_args = 0
1229:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 9760              		.loc 1 1229 2 view .LVU2592
1228:src/xeq.c     **** 	if (is_intmode()) {
ARM GAS  /tmp/ccK8IvWa.s 			page 310


 9761              		.loc 1 1228 63 is_stmt 0 view .LVU2593
 9762 0000 10B5     		push	{r4, lr}
 9763              		.cfi_def_cfa_offset 8
 9764              		.cfi_offset 4, -8
 9765              		.cfi_offset 14, -4
1229:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 9766              		.loc 1 1229 6 view .LVU2594
 9767 0002 0C4B     		ldr	r3, .L745
 9768 0004 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1229:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 9769              		.loc 1 1229 5 view .LVU2595
 9770 0008 DB07     		lsls	r3, r3, #31
1228:src/xeq.c     **** 	if (is_intmode()) {
 9771              		.loc 1 1228 63 view .LVU2596
 9772 000a 8AB0     		sub	sp, sp, #40
 9773              		.cfi_def_cfa_offset 48
1228:src/xeq.c     **** 	if (is_intmode()) {
 9774              		.loc 1 1228 63 view .LVU2597
 9775 000c 0C46     		mov	r4, r1
1229:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 9776              		.loc 1 1229 5 view .LVU2598
 9777 000e 06D5     		bpl	.L742
 9778              	.LVL730:
 9779              	.LBB2113:
 9780              	.LBI2113:
1228:src/xeq.c     **** 	if (is_intmode()) {
 9781              		.loc 1 1228 24 is_stmt 1 view .LVU2599
 9782              	.LBB2114:
1230:src/xeq.c     **** 	} else {
 9783              		.loc 1 1230 3 view .LVU2600
1230:src/xeq.c     **** 	} else {
 9784              		.loc 1 1230 10 is_stmt 0 view .LVU2601
 9785 0010 FFF7FEFF 		bl	get_reg_n_int
 9786              	.LVL731:
1230:src/xeq.c     **** 	} else {
 9787              		.loc 1 1230 10 view .LVU2602
 9788 0014 2246     		mov	r2, r4
 9789 0016 FFF7FEFF 		bl	extract_value
 9790              	.LVL732:
1230:src/xeq.c     **** 	} else {
 9791              		.loc 1 1230 10 view .LVU2603
 9792              	.LBE2114:
 9793              	.LBE2113:
1237:src/xeq.c     **** 
 9794              		.loc 1 1237 1 view .LVU2604
 9795 001a 0AB0     		add	sp, sp, #40
 9796              		.cfi_remember_state
 9797              		.cfi_def_cfa_offset 8
 9798              		@ sp needed
 9799 001c 10BD     		pop	{r4, pc}
 9800              	.LVL733:
 9801              	.L742:
 9802              		.cfi_restore_state
1237:src/xeq.c     **** 
 9803              		.loc 1 1237 1 view .LVU2605
 9804 001e 0146     		mov	r1, r0
 9805              	.LVL734:
ARM GAS  /tmp/ccK8IvWa.s 			page 311


 9806              	.LBB2115:
1232:src/xeq.c     **** 
 9807              		.loc 1 1232 3 is_stmt 1 view .LVU2606
1234:src/xeq.c     **** 		return dn_to_ull(&n, sgn);
 9808              		.loc 1 1234 3 view .LVU2607
 9809 0020 01A8     		add	r0, sp, #4
 9810              	.LVL735:
1234:src/xeq.c     **** 		return dn_to_ull(&n, sgn);
 9811              		.loc 1 1234 3 is_stmt 0 view .LVU2608
 9812 0022 FFF7FEFF 		bl	getRegister
 9813              	.LVL736:
1235:src/xeq.c     **** 	}
 9814              		.loc 1 1235 3 is_stmt 1 view .LVU2609
1235:src/xeq.c     **** 	}
 9815              		.loc 1 1235 10 is_stmt 0 view .LVU2610
 9816 0026 2146     		mov	r1, r4
 9817 0028 01A8     		add	r0, sp, #4
 9818 002a FFF7FEFF 		bl	dn_to_ull
 9819              	.LVL737:
 9820              	.LBE2115:
1237:src/xeq.c     **** 
 9821              		.loc 1 1237 1 view .LVU2611
 9822 002e 0AB0     		add	sp, sp, #40
 9823              		.cfi_def_cfa_offset 8
 9824              		@ sp needed
 9825 0030 10BD     		pop	{r4, pc}
 9826              	.LVL738:
 9827              	.L746:
1237:src/xeq.c     **** 
 9828              		.loc 1 1237 1 view .LVU2612
 9829 0032 00BF     		.align	2
 9830              	.L745:
 9831 0034 00000000 		.word	PersistentRam
 9832              		.cfi_endproc
 9833              	.LFE91:
 9835              		.section	.text.get_keycode_from_reg,"ax",%progbits
 9836              		.align	1
 9837              		.p2align 2,,3
 9838              		.syntax unified
 9839              		.thumb
 9840              		.thumb_func
 9841              		.fpu fpv4-sp-d16
 9843              	get_keycode_from_reg:
 9844              	.LVL739:
 9845              	.LFB135:
1843:src/xeq.c     **** 	int sgn;
 9846              		.loc 1 1843 1 is_stmt 1 view -0
 9847              		.cfi_startproc
 9848              		@ args = 0, pretend = 0, frame = 8
 9849              		@ frame_needed = 0, uses_anonymous_args = 0
1844:src/xeq.c     **** 	const int c = row_column_to_keycode((int) get_reg_n_int_sgn((int) n, &sgn));
 9850              		.loc 1 1844 2 view .LVU2614
1845:src/xeq.c     **** 	if ( c < 0 )
 9851              		.loc 1 1845 2 view .LVU2615
1843:src/xeq.c     **** 	int sgn;
 9852              		.loc 1 1843 1 is_stmt 0 view .LVU2616
 9853 0000 00B5     		push	{lr}
ARM GAS  /tmp/ccK8IvWa.s 			page 312


 9854              		.cfi_def_cfa_offset 4
 9855              		.cfi_offset 14, -4
 9856 0002 83B0     		sub	sp, sp, #12
 9857              		.cfi_def_cfa_offset 16
1845:src/xeq.c     **** 	if ( c < 0 )
 9858              		.loc 1 1845 44 view .LVU2617
 9859 0004 01A9     		add	r1, sp, #4
 9860 0006 FFF7FEFF 		bl	get_reg_n_int_sgn
 9861              	.LVL740:
1845:src/xeq.c     **** 	if ( c < 0 )
 9862              		.loc 1 1845 16 view .LVU2618
 9863 000a FFF7FEFF 		bl	row_column_to_keycode
 9864              	.LVL741:
1846:src/xeq.c     **** 		report_err(ERR_RANGE);
 9865              		.loc 1 1846 2 is_stmt 1 view .LVU2619
1846:src/xeq.c     **** 		report_err(ERR_RANGE);
 9866              		.loc 1 1846 5 is_stmt 0 view .LVU2620
 9867 000e 0028     		cmp	r0, #0
1846:src/xeq.c     **** 		report_err(ERR_RANGE);
 9868              		.loc 1 1846 5 view .LVU2621
 9869 0010 02DB     		blt	.L750
 9870              	.L747:
1849:src/xeq.c     **** 
 9871              		.loc 1 1849 1 view .LVU2622
 9872 0012 03B0     		add	sp, sp, #12
 9873              		.cfi_remember_state
 9874              		.cfi_def_cfa_offset 4
 9875              		@ sp needed
 9876 0014 5DF804FB 		ldr	pc, [sp], #4
 9877              	.L750:
 9878              		.cfi_restore_state
 9879              	.LBB2122:
 9880              	.LBI2122:
1842:src/xeq.c     **** {
 9881              		.loc 1 1842 12 is_stmt 1 view .LVU2623
 9882              	.LVL742:
 9883              	.LBB2123:
1847:src/xeq.c     **** 	return c;
 9884              		.loc 1 1847 3 view .LVU2624
 9885              	.LBB2124:
 9886              	.LBI2124:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 9887              		.loc 1 523 5 view .LVU2625
 9888              	.LBB2125:
 524:src/xeq.c     **** 		Error = e;
 9889              		.loc 1 524 2 view .LVU2626
 524:src/xeq.c     **** 		Error = e;
 9890              		.loc 1 524 12 is_stmt 0 view .LVU2627
 9891 0018 044B     		ldr	r3, .L751
 524:src/xeq.c     **** 		Error = e;
 9892              		.loc 1 524 5 view .LVU2628
 9893 001a 1A68     		ldr	r2, [r3]
 9894 001c 002A     		cmp	r2, #0
 9895 001e F8D1     		bne	.L747
 9896              	.LVL743:
 9897              	.LBB2126:
 9898              	.LBI2126:
ARM GAS  /tmp/ccK8IvWa.s 			page 313


 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 9899              		.loc 1 523 5 is_stmt 1 view .LVU2629
 9900              	.LBB2127:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 9901              		.loc 1 525 3 view .LVU2630
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 9902              		.loc 1 525 9 is_stmt 0 view .LVU2631
 9903 0020 0822     		movs	r2, #8
 9904 0022 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 9905              		.loc 1 526 3 is_stmt 1 view .LVU2632
 9906              	.LVL744:
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 9907              		.loc 1 526 3 is_stmt 0 view .LVU2633
 9908              	.LBE2127:
 9909              	.LBE2126:
 9910              	.LBE2125:
 9911              	.LBE2124:
 9912              	.LBE2123:
 9913              	.LBE2122:
1848:src/xeq.c     **** }
 9914              		.loc 1 1848 2 is_stmt 1 view .LVU2634
1849:src/xeq.c     **** 
 9915              		.loc 1 1849 1 is_stmt 0 view .LVU2635
 9916 0024 03B0     		add	sp, sp, #12
 9917              		.cfi_def_cfa_offset 4
 9918              		@ sp needed
 9919 0026 5DF804FB 		ldr	pc, [sp], #4
 9920              	.L752:
 9921 002a 00BF     		.align	2
 9922              	.L751:
 9923 002c 00000000 		.word	Error
 9924              		.cfi_endproc
 9925              	.LFE135:
 9927              		.section	.text.getX_int,"ax",%progbits
 9928              		.align	1
 9929              		.p2align 2,,3
 9930              		.global	getX_int
 9931              		.syntax unified
 9932              		.thumb
 9933              		.thumb_func
 9934              		.fpu fpv4-sp-d16
 9936              	getX_int:
 9937              	.LFB92:
1242:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 9938              		.loc 1 1242 30 is_stmt 1 view -0
 9939              		.cfi_startproc
 9940              		@ args = 0, pretend = 0, frame = 0
 9941              		@ frame_needed = 0, uses_anonymous_args = 0
 9942              		@ link register save eliminated.
1243:src/xeq.c     **** }
 9943              		.loc 1 1243 2 view .LVU2637
1243:src/xeq.c     **** }
 9944              		.loc 1 1243 9 is_stmt 0 view .LVU2638
 9945 0000 6420     		movs	r0, #100
 9946 0002 FFF7FEBF 		b	get_reg_n_int
 9947              	.LVL745:
ARM GAS  /tmp/ccK8IvWa.s 			page 314


 9948              		.cfi_endproc
 9949              	.LFE92:
 9951 0006 00BF     		.section	.text.getX_int_sgn,"ax",%progbits
 9952              		.align	1
 9953              		.p2align 2,,3
 9954              		.global	getX_int_sgn
 9955              		.syntax unified
 9956              		.thumb
 9957              		.thumb_func
 9958              		.fpu fpv4-sp-d16
 9960              	getX_int_sgn:
 9961              	.LVL746:
 9962              	.LFB93:
1246:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 9963              		.loc 1 1246 47 is_stmt 1 view -0
 9964              		.cfi_startproc
 9965              		@ args = 0, pretend = 0, frame = 0
 9966              		@ frame_needed = 0, uses_anonymous_args = 0
 9967              		@ link register save eliminated.
1247:src/xeq.c     **** }
 9968              		.loc 1 1247 2 view .LVU2640
1246:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 9969              		.loc 1 1246 47 is_stmt 0 view .LVU2641
 9970 0000 0146     		mov	r1, r0
1247:src/xeq.c     **** }
 9971              		.loc 1 1247 9 view .LVU2642
 9972 0002 6420     		movs	r0, #100
 9973              	.LVL747:
1247:src/xeq.c     **** }
 9974              		.loc 1 1247 9 view .LVU2643
 9975 0004 FFF7FEBF 		b	get_reg_n_int_sgn
 9976              	.LVL748:
1247:src/xeq.c     **** }
 9977              		.loc 1 1247 9 view .LVU2644
 9978              		.cfi_endproc
 9979              	.LFE93:
 9981              		.section	.text.set_reg_n_int_sgn,"ax",%progbits
 9982              		.align	1
 9983              		.p2align 2,,3
 9984              		.global	set_reg_n_int_sgn
 9985              		.syntax unified
 9986              		.thumb
 9987              		.thumb_func
 9988              		.fpu fpv4-sp-d16
 9990              	set_reg_n_int_sgn:
 9991              	.LVL749:
 9992              	.LFB95:
1267:src/xeq.c     **** 	if (is_intmode()) {
 9993              		.loc 1 1267 72 is_stmt 1 view -0
 9994              		.cfi_startproc
 9995              		@ args = 4, pretend = 0, frame = 40
 9996              		@ frame_needed = 0, uses_anonymous_args = 0
1268:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 9997              		.loc 1 1268 2 view .LVU2646
1267:src/xeq.c     **** 	if (is_intmode()) {
 9998              		.loc 1 1267 72 is_stmt 0 view .LVU2647
 9999 0000 30B5     		push	{r4, r5, lr}
ARM GAS  /tmp/ccK8IvWa.s 			page 315


 10000              		.cfi_def_cfa_offset 12
 10001              		.cfi_offset 4, -12
 10002              		.cfi_offset 5, -8
 10003              		.cfi_offset 14, -4
1268:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10004              		.loc 1 1268 6 view .LVU2648
 10005 0002 1649     		ldr	r1, .L765
 10006 0004 91F8E857 		ldrb	r5, [r1, #2024]	@ zero_extendqisi2
1268:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10007              		.loc 1 1268 5 view .LVU2649
 10008 0008 E907     		lsls	r1, r5, #31
1267:src/xeq.c     **** 	if (is_intmode()) {
 10009              		.loc 1 1267 72 view .LVU2650
 10010 000a 8BB0     		sub	sp, sp, #44
 10011              		.cfi_def_cfa_offset 56
1267:src/xeq.c     **** 	if (is_intmode()) {
 10012              		.loc 1 1267 72 view .LVU2651
 10013 000c 0446     		mov	r4, r0
1268:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10014              		.loc 1 1268 5 view .LVU2652
 10015 000e 11D5     		bpl	.L756
 10016              	.LVL750:
1268:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10017              		.loc 1 1268 5 view .LVU2653
 10018 0010 1046     		mov	r0, r2
 10019              	.LVL751:
1268:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10020              		.loc 1 1268 5 view .LVU2654
 10021 0012 1946     		mov	r1, r3
 10022              	.LVL752:
 10023              	.LBB2134:
 10024              	.LBI2134:
1267:src/xeq.c     **** 	if (is_intmode()) {
 10025              		.loc 1 1267 6 is_stmt 1 view .LVU2655
 10026              	.LBB2135:
1269:src/xeq.c     **** 	} else {
 10027              		.loc 1 1269 3 view .LVU2656
 10028 0014 0E9A     		ldr	r2, [sp, #56]
 10029              	.LVL753:
1269:src/xeq.c     **** 	} else {
 10030              		.loc 1 1269 3 is_stmt 0 view .LVU2657
 10031 0016 FFF7FEFF 		bl	build_value
 10032              	.LVL754:
1269:src/xeq.c     **** 	} else {
 10033              		.loc 1 1269 3 view .LVU2658
 10034 001a 0B46     		mov	r3, r1
 10035 001c 0246     		mov	r2, r0
 10036              	.LBB2136:
 10037              	.LBB2137:
1223:src/xeq.c     **** }
 10038              		.loc 1 1223 8 view .LVU2659
 10039 001e 2046     		mov	r0, r4
 10040 0020 CDE90023 		strd	r2, [sp]
 10041              	.LVL755:
1223:src/xeq.c     **** }
 10042              		.loc 1 1223 8 view .LVU2660
 10043              	.LBE2137:
ARM GAS  /tmp/ccK8IvWa.s 			page 316


 10044              	.LBI2136:
1222:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 10045              		.loc 1 1222 6 is_stmt 1 view .LVU2661
 10046              	.LBB2138:
1223:src/xeq.c     **** }
 10047              		.loc 1 1223 2 view .LVU2662
1223:src/xeq.c     **** }
 10048              		.loc 1 1223 8 is_stmt 0 view .LVU2663
 10049 0024 FFF7FEFF 		bl	get_reg_n
 10050              	.LVL756:
1223:src/xeq.c     **** }
 10051              		.loc 1 1223 2 view .LVU2664
 10052 0028 0822     		movs	r2, #8
 10053 002a 6946     		mov	r1, sp
 10054 002c FFF7FEFF 		bl	xcopy
 10055              	.LVL757:
1223:src/xeq.c     **** }
 10056              		.loc 1 1223 2 view .LVU2665
 10057              	.LBE2138:
 10058              	.LBE2136:
 10059              	.LBE2135:
 10060              	.LBE2134:
1278:src/xeq.c     **** 
 10061              		.loc 1 1278 1 view .LVU2666
 10062 0030 0BB0     		add	sp, sp, #44
 10063              		.cfi_remember_state
 10064              		.cfi_def_cfa_offset 12
 10065              		@ sp needed
 10066 0032 30BD     		pop	{r4, r5, pc}
 10067              	.LVL758:
 10068              	.L756:
 10069              		.cfi_restore_state
 10070              	.LBB2139:
1271:src/xeq.c     **** 
 10071              		.loc 1 1271 3 is_stmt 1 view .LVU2667
1273:src/xeq.c     **** 		if (sgn)
 10072              		.loc 1 1273 3 view .LVU2668
 10073 0034 6846     		mov	r0, sp
 10074              	.LVL759:
1273:src/xeq.c     **** 		if (sgn)
 10075              		.loc 1 1273 3 is_stmt 0 view .LVU2669
 10076 0036 FFF7FEFF 		bl	ullint_to_dn
 10077              	.LVL760:
1274:src/xeq.c     **** 			dn_minus(&t, &t);
 10078              		.loc 1 1274 3 is_stmt 1 view .LVU2670
1274:src/xeq.c     **** 			dn_minus(&t, &t);
 10079              		.loc 1 1274 6 is_stmt 0 view .LVU2671
 10080 003a 0E9B     		ldr	r3, [sp, #56]
 10081 003c 2BB9     		cbnz	r3, .L763
1276:src/xeq.c     **** 	}
 10082              		.loc 1 1276 3 is_stmt 1 view .LVU2672
 10083 003e 6946     		mov	r1, sp
 10084 0040 2046     		mov	r0, r4
 10085 0042 FFF7FEFF 		bl	setRegister
 10086              	.LVL761:
 10087              	.L764:
1276:src/xeq.c     **** 	}
ARM GAS  /tmp/ccK8IvWa.s 			page 317


 10088              		.loc 1 1276 3 is_stmt 0 view .LVU2673
 10089              	.LBE2139:
1278:src/xeq.c     **** 
 10090              		.loc 1 1278 1 view .LVU2674
 10091 0046 0BB0     		add	sp, sp, #44
 10092              		.cfi_remember_state
 10093              		.cfi_def_cfa_offset 12
 10094              		@ sp needed
 10095 0048 30BD     		pop	{r4, r5, pc}
 10096              	.LVL762:
 10097              	.L763:
 10098              		.cfi_restore_state
 10099              	.LBB2140:
1275:src/xeq.c     **** 		setRegister(index, &t);
 10100              		.loc 1 1275 4 is_stmt 1 view .LVU2675
 10101 004a 6946     		mov	r1, sp
 10102 004c 6846     		mov	r0, sp
 10103 004e FFF7FEFF 		bl	dn_minus
 10104              	.LVL763:
1276:src/xeq.c     **** 	}
 10105              		.loc 1 1276 3 view .LVU2676
 10106 0052 6946     		mov	r1, sp
 10107 0054 2046     		mov	r0, r4
 10108 0056 FFF7FEFF 		bl	setRegister
 10109              	.LVL764:
 10110 005a F4E7     		b	.L764
 10111              	.L766:
 10112              		.align	2
 10113              	.L765:
 10114 005c 00000000 		.word	PersistentRam
 10115              	.LBE2140:
 10116              		.cfi_endproc
 10117              	.LFE95:
 10119              		.section	.text.op_roundingmode,"ax",%progbits
 10120              		.align	1
 10121              		.p2align 2,,3
 10122              		.global	op_roundingmode
 10123              		.syntax unified
 10124              		.thumb
 10125              		.thumb_func
 10126              		.fpu fpv4-sp-d16
 10128              	op_roundingmode:
 10129              	.LVL765:
 10130              	.LFB33:
 596:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 10131              		.loc 1 596 37 view -0
 10132              		.cfi_startproc
 10133              		@ args = 0, pretend = 0, frame = 0
 10134              		@ frame_needed = 0, uses_anonymous_args = 0
 597:src/xeq.c     **** }
 10135              		.loc 1 597 2 view .LVU2678
 10136              	.LBB2141:
 10137              	.LBI2141:
1309:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 10138              		.loc 1 1309 6 view .LVU2679
 10139              	.LBB2142:
1310:src/xeq.c     **** }
ARM GAS  /tmp/ccK8IvWa.s 			page 318


 10140              		.loc 1 1310 2 view .LVU2680
 10141              	.LBE2142:
 10142              	.LBE2141:
 596:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 10143              		.loc 1 596 37 is_stmt 0 view .LVU2681
 10144 0000 00B5     		push	{lr}
 10145              		.cfi_def_cfa_offset 4
 10146              		.cfi_offset 14, -4
 597:src/xeq.c     **** }
 10147              		.loc 1 597 21 view .LVU2682
 10148 0002 084B     		ldr	r3, .L769
 10149 0004 93F8EB27 		ldrb	r2, [r3, #2027]	@ zero_extendqisi2
 596:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 10150              		.loc 1 596 37 view .LVU2683
 10151 0008 83B0     		sub	sp, sp, #12
 10152              		.cfi_def_cfa_offset 16
 10153              	.LBB2145:
 10154              	.LBB2143:
1310:src/xeq.c     **** }
 10155              		.loc 1 1310 2 view .LVU2684
 10156 000a 0021     		movs	r1, #0
 10157              	.LBE2143:
 10158              	.LBE2145:
 597:src/xeq.c     **** }
 10159              		.loc 1 597 21 view .LVU2685
 10160 000c C2F30212 		ubfx	r2, r2, #4, #3
 10161              	.LBB2146:
 10162              	.LBB2144:
1310:src/xeq.c     **** }
 10163              		.loc 1 1310 2 view .LVU2686
 10164 0010 D2B2     		uxtb	r2, r2
 10165 0012 0023     		movs	r3, #0
 10166 0014 0091     		str	r1, [sp]
 10167 0016 6420     		movs	r0, #100
 10168              	.LVL766:
1310:src/xeq.c     **** }
 10169              		.loc 1 1310 2 view .LVU2687
 10170 0018 FFF7FEFF 		bl	set_reg_n_int_sgn
 10171              	.LVL767:
1310:src/xeq.c     **** }
 10172              		.loc 1 1310 2 view .LVU2688
 10173              	.LBE2144:
 10174              	.LBE2146:
 598:src/xeq.c     **** 
 10175              		.loc 1 598 1 view .LVU2689
 10176 001c 03B0     		add	sp, sp, #12
 10177              		.cfi_def_cfa_offset 4
 10178              		@ sp needed
 10179 001e 5DF804FB 		ldr	pc, [sp], #4
 10180              	.L770:
 10181 0022 00BF     		.align	2
 10182              	.L769:
 10183 0024 00000000 		.word	PersistentRam
 10184              		.cfi_endproc
 10185              	.LFE33:
 10187              		.section	.text.register_from_int,"ax",%progbits
 10188              		.align	1
ARM GAS  /tmp/ccK8IvWa.s 			page 319


 10189              		.p2align 2,,3
 10190              		.syntax unified
 10191              		.thumb
 10192              		.thumb_func
 10193              		.fpu fpv4-sp-d16
 10195              	register_from_int:
 10196              	.LVL768:
 10197              	.LFB96:
1285:src/xeq.c     **** 	int sgn;
 10198              		.loc 1 1285 69 is_stmt 1 view -0
 10199              		.cfi_startproc
 10200              		@ args = 0, pretend = 0, frame = 8
 10201              		@ frame_needed = 0, uses_anonymous_args = 0
1286:src/xeq.c     **** 	unsigned long long int val;
 10202              		.loc 1 1286 2 view .LVU2691
1287:src/xeq.c     **** 	const int xin = XromFlags.xIN;
 10203              		.loc 1 1287 2 view .LVU2692
1288:src/xeq.c     **** 	
 10204              		.loc 1 1288 2 view .LVU2693
1285:src/xeq.c     **** 	int sgn;
 10205              		.loc 1 1285 69 is_stmt 0 view .LVU2694
 10206 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 10207              		.cfi_def_cfa_offset 20
 10208              		.cfi_offset 4, -20
 10209              		.cfi_offset 5, -16
 10210              		.cfi_offset 6, -12
 10211              		.cfi_offset 7, -8
 10212              		.cfi_offset 14, -4
1288:src/xeq.c     **** 	
 10213              		.loc 1 1288 27 view .LVU2695
 10214 0002 134D     		ldr	r5, .L777
 10215 0004 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
1285:src/xeq.c     **** 	int sgn;
 10216              		.loc 1 1285 69 view .LVU2696
 10217 0006 0646     		mov	r6, r0
 10218 0008 85B0     		sub	sp, sp, #20
 10219              		.cfi_def_cfa_offset 40
1285:src/xeq.c     **** 	int sgn;
 10220              		.loc 1 1285 69 view .LVU2697
 10221 000a 0846     		mov	r0, r1
 10222              	.LVL769:
1288:src/xeq.c     **** 	
 10223              		.loc 1 1288 27 view .LVU2698
 10224 000c DF09     		lsrs	r7, r3, #7
 10225              	.LVL770:
1290:src/xeq.c     **** 		XromFlags.xIN = 0;
 10226              		.loc 1 1290 2 is_stmt 1 view .LVU2699
1290:src/xeq.c     **** 		XromFlags.xIN = 0;
 10227              		.loc 1 1290 5 is_stmt 0 view .LVU2700
 10228 000e 12B1     		cbz	r2, .L772
1291:src/xeq.c     **** 	UState.intm = 1;
 10229              		.loc 1 1291 3 is_stmt 1 view .LVU2701
1291:src/xeq.c     **** 	UState.intm = 1;
 10230              		.loc 1 1291 17 is_stmt 0 view .LVU2702
 10231 0010 6FF3C713 		bfc	r3, #7, #1
 10232              	.LVL771:
1291:src/xeq.c     **** 	UState.intm = 1;
ARM GAS  /tmp/ccK8IvWa.s 			page 320


 10233              		.loc 1 1291 17 view .LVU2703
 10234 0014 6B70     		strb	r3, [r5, #1]
 10235              	.LVL772:
 10236              	.L772:
1292:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 10237              		.loc 1 1292 2 is_stmt 1 view .LVU2704
1292:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 10238              		.loc 1 1292 14 is_stmt 0 view .LVU2705
 10239 0016 0F4C     		ldr	r4, .L777+4
 10240 0018 94F8E837 		ldrb	r3, [r4, #2024]	@ zero_extendqisi2
1293:src/xeq.c     **** 
 10241              		.loc 1 1293 8 view .LVU2706
 10242 001c 03A9     		add	r1, sp, #12
 10243              	.LVL773:
1292:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 10244              		.loc 1 1292 14 view .LVU2707
 10245 001e 43F00103 		orr	r3, r3, #1
 10246 0022 84F8E837 		strb	r3, [r4, #2024]
1293:src/xeq.c     **** 
 10247              		.loc 1 1293 2 is_stmt 1 view .LVU2708
1293:src/xeq.c     **** 
 10248              		.loc 1 1293 8 is_stmt 0 view .LVU2709
 10249 0026 FFF7FEFF 		bl	get_reg_n_int_sgn
 10250              	.LVL774:
1296:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 10251              		.loc 1 1296 14 view .LVU2710
 10252 002a 94F8E8C7 		ldrb	ip, [r4, #2024]	@ zero_extendqisi2
1293:src/xeq.c     **** 
 10253              		.loc 1 1293 8 view .LVU2711
 10254 002e 0B46     		mov	r3, r1
1295:src/xeq.c     **** 	UState.intm = 0;
 10255              		.loc 1 1295 16 view .LVU2712
 10256 0030 6978     		ldrb	r1, [r5, #1]	@ zero_extendqisi2
1293:src/xeq.c     **** 
 10257              		.loc 1 1293 8 view .LVU2713
 10258 0032 0246     		mov	r2, r0
 10259              	.LVL775:
1295:src/xeq.c     **** 	UState.intm = 0;
 10260              		.loc 1 1295 2 is_stmt 1 view .LVU2714
1297:src/xeq.c     **** }
 10261              		.loc 1 1297 2 is_stmt 0 view .LVU2715
 10262 0034 0398     		ldr	r0, [sp, #12]
 10263 0036 0090     		str	r0, [sp]
1296:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 10264              		.loc 1 1296 14 view .LVU2716
 10265 0038 6FF3000C 		bfc	ip, #0, #1
1295:src/xeq.c     **** 	UState.intm = 0;
 10266              		.loc 1 1295 16 view .LVU2717
 10267 003c 67F3C711 		bfi	r1, r7, #7, #1
1297:src/xeq.c     **** }
 10268              		.loc 1 1297 2 view .LVU2718
 10269 0040 3046     		mov	r0, r6
1296:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 10270              		.loc 1 1296 14 view .LVU2719
 10271 0042 84F8E8C7 		strb	ip, [r4, #2024]
1295:src/xeq.c     **** 	UState.intm = 0;
 10272              		.loc 1 1295 16 view .LVU2720
ARM GAS  /tmp/ccK8IvWa.s 			page 321


 10273 0046 6970     		strb	r1, [r5, #1]
1296:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 10274              		.loc 1 1296 2 is_stmt 1 view .LVU2721
1297:src/xeq.c     **** }
 10275              		.loc 1 1297 2 view .LVU2722
 10276 0048 FFF7FEFF 		bl	set_reg_n_int_sgn
 10277              	.LVL776:
1298:src/xeq.c     **** 
 10278              		.loc 1 1298 1 is_stmt 0 view .LVU2723
 10279 004c 05B0     		add	sp, sp, #20
 10280              		.cfi_def_cfa_offset 20
 10281              		@ sp needed
 10282 004e F0BD     		pop	{r4, r5, r6, r7, pc}
 10283              	.LVL777:
 10284              	.L778:
1298:src/xeq.c     **** 
 10285              		.loc 1 1298 1 view .LVU2724
 10286              		.align	2
 10287              	.L777:
 10288 0050 00000000 		.word	XromParams
 10289 0054 00000000 		.word	PersistentRam
 10290              		.cfi_endproc
 10291              	.LFE96:
 10293              		.section	.text.int_from_register,"ax",%progbits
 10294              		.align	1
 10295              		.p2align 2,,3
 10296              		.syntax unified
 10297              		.thumb
 10298              		.thumb_func
 10299              		.fpu fpv4-sp-d16
 10301              	int_from_register:
 10302              	.LVL778:
 10303              	.LFB94:
1254:src/xeq.c     **** 	int sgn;
 10304              		.loc 1 1254 48 is_stmt 1 view -0
 10305              		.cfi_startproc
 10306              		@ args = 0, pretend = 0, frame = 8
 10307              		@ frame_needed = 0, uses_anonymous_args = 0
1255:src/xeq.c     **** 	unsigned long long int val;
 10308              		.loc 1 1255 2 view .LVU2726
1256:src/xeq.c     **** 	
 10309              		.loc 1 1256 2 view .LVU2727
1258:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 10310              		.loc 1 1258 2 view .LVU2728
1254:src/xeq.c     **** 	int sgn;
 10311              		.loc 1 1254 48 is_stmt 0 view .LVU2729
 10312 0000 30B5     		push	{r4, r5, lr}
 10313              		.cfi_def_cfa_offset 12
 10314              		.cfi_offset 4, -12
 10315              		.cfi_offset 5, -8
 10316              		.cfi_offset 14, -4
1258:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 10317              		.loc 1 1258 14 view .LVU2730
 10318 0002 0E4C     		ldr	r4, .L781
 10319 0004 94F8E837 		ldrb	r3, [r4, #2024]	@ zero_extendqisi2
1254:src/xeq.c     **** 	int sgn;
 10320              		.loc 1 1254 48 view .LVU2731
ARM GAS  /tmp/ccK8IvWa.s 			page 322


 10321 0008 85B0     		sub	sp, sp, #20
 10322              		.cfi_def_cfa_offset 32
1254:src/xeq.c     **** 	int sgn;
 10323              		.loc 1 1254 48 view .LVU2732
 10324 000a 0546     		mov	r5, r0
1258:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 10325              		.loc 1 1258 14 view .LVU2733
 10326 000c 6FF30003 		bfc	r3, #0, #1
1259:src/xeq.c     **** 
 10327              		.loc 1 1259 8 view .LVU2734
 10328 0010 0846     		mov	r0, r1
 10329              	.LVL779:
1259:src/xeq.c     **** 
 10330              		.loc 1 1259 8 view .LVU2735
 10331 0012 03A9     		add	r1, sp, #12
 10332              	.LVL780:
1258:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 10333              		.loc 1 1258 14 view .LVU2736
 10334 0014 84F8E837 		strb	r3, [r4, #2024]
1259:src/xeq.c     **** 
 10335              		.loc 1 1259 2 is_stmt 1 view .LVU2737
1259:src/xeq.c     **** 
 10336              		.loc 1 1259 8 is_stmt 0 view .LVU2738
 10337 0018 FFF7FEFF 		bl	get_reg_n_int_sgn
 10338              	.LVL781:
1259:src/xeq.c     **** 
 10339              		.loc 1 1259 8 view .LVU2739
 10340 001c 0B46     		mov	r3, r1
1261:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 10341              		.loc 1 1261 14 view .LVU2740
 10342 001e 94F8E817 		ldrb	r1, [r4, #2024]	@ zero_extendqisi2
1259:src/xeq.c     **** 
 10343              		.loc 1 1259 8 view .LVU2741
 10344 0022 0246     		mov	r2, r0
 10345              	.LVL782:
1261:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 10346              		.loc 1 1261 2 is_stmt 1 view .LVU2742
1262:src/xeq.c     **** }
 10347              		.loc 1 1262 2 is_stmt 0 view .LVU2743
 10348 0024 0398     		ldr	r0, [sp, #12]
 10349 0026 0090     		str	r0, [sp]
1261:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 10350              		.loc 1 1261 14 view .LVU2744
 10351 0028 41F00101 		orr	r1, r1, #1
1262:src/xeq.c     **** }
 10352              		.loc 1 1262 2 view .LVU2745
 10353 002c 2846     		mov	r0, r5
1261:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 10354              		.loc 1 1261 14 view .LVU2746
 10355 002e 84F8E817 		strb	r1, [r4, #2024]
1262:src/xeq.c     **** }
 10356              		.loc 1 1262 2 is_stmt 1 view .LVU2747
 10357 0032 FFF7FEFF 		bl	set_reg_n_int_sgn
 10358              	.LVL783:
1263:src/xeq.c     **** 
 10359              		.loc 1 1263 1 is_stmt 0 view .LVU2748
 10360 0036 05B0     		add	sp, sp, #20
ARM GAS  /tmp/ccK8IvWa.s 			page 323


 10361              		.cfi_def_cfa_offset 12
 10362              		@ sp needed
 10363 0038 30BD     		pop	{r4, r5, pc}
 10364              	.LVL784:
 10365              	.L782:
1263:src/xeq.c     **** 
 10366              		.loc 1 1263 1 view .LVU2749
 10367 003a 00BF     		.align	2
 10368              	.L781:
 10369 003c 00000000 		.word	PersistentRam
 10370              		.cfi_endproc
 10371              	.LFE94:
 10373              		.section	.text.switch_to_int,"ax",%progbits
 10374              		.align	1
 10375              		.p2align 2,,3
 10376              		.syntax unified
 10377              		.thumb
 10378              		.thumb_func
 10379              		.fpu fpv4-sp-d16
 10381              	switch_to_int:
 10382              	.LFB200:
3486:src/xeq.c     **** 	int i;
 10383              		.loc 1 3486 33 is_stmt 1 view -0
 10384              		.cfi_startproc
 10385              		@ args = 0, pretend = 0, frame = 40
 10386              		@ frame_needed = 0, uses_anonymous_args = 0
3487:src/xeq.c     **** 	int mask = StackRegMask[UState.stack_depth];
 10387              		.loc 1 3487 2 view .LVU2751
3488:src/xeq.c     **** 	const int dbl = is_dblmode();
 10388              		.loc 1 3488 2 view .LVU2752
3486:src/xeq.c     **** 	int i;
 10389              		.loc 1 3486 33 is_stmt 0 view .LVU2753
 10390 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 10391              		.cfi_def_cfa_offset 20
 10392              		.cfi_offset 4, -20
 10393              		.cfi_offset 5, -16
 10394              		.cfi_offset 6, -12
 10395              		.cfi_offset 7, -8
 10396              		.cfi_offset 14, -4
3488:src/xeq.c     **** 	const int dbl = is_dblmode();
 10397              		.loc 1 3488 32 view .LVU2754
 10398 0002 194F     		ldr	r7, .L791
3488:src/xeq.c     **** 	const int dbl = is_dblmode();
 10399              		.loc 1 3488 25 view .LVU2755
 10400 0004 1948     		ldr	r0, .L791+4
3488:src/xeq.c     **** 	const int dbl = is_dblmode();
 10401              		.loc 1 3488 32 view .LVU2756
 10402 0006 97F8EA27 		ldrb	r2, [r7, #2026]	@ zero_extendqisi2
 10403              	.LBB2147:
 10404              	.LBB2148:
 919:src/xeq.c     **** }
 10405              		.loc 1 919 24 view .LVU2757
 10406 000a B7F8E817 		ldrh	r1, [r7, #2024]
 10407              	.LBE2148:
 10408              	.LBE2147:
3488:src/xeq.c     **** 	const int dbl = is_dblmode();
 10409              		.loc 1 3488 32 view .LVU2758
ARM GAS  /tmp/ccK8IvWa.s 			page 324


 10410 000e C2F3C002 		ubfx	r2, r2, #3, #1
 10411              	.LBB2152:
 10412              	.LBB2149:
 919:src/xeq.c     **** }
 10413              		.loc 1 919 24 view .LVU2759
 10414 0012 44F20106 		movw	r6, #16385
 10415              	.LBE2149:
 10416              	.LBE2152:
3488:src/xeq.c     **** 	const int dbl = is_dblmode();
 10417              		.loc 1 3488 6 view .LVU2760
 10418 0016 30F81250 		ldrh	r5, [r0, r2, lsl #1]
 10419              	.LVL785:
3489:src/xeq.c     **** 
 10420              		.loc 1 3489 2 is_stmt 1 view .LVU2761
 10421              	.LBB2153:
 10422              	.LBI2147:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 10423              		.loc 1 918 5 view .LVU2762
 10424              	.LBB2150:
 919:src/xeq.c     **** }
 10425              		.loc 1 919 2 view .LVU2763
 10426              	.LBE2150:
 10427              	.LBE2153:
3486:src/xeq.c     **** 	int i;
 10428              		.loc 1 3486 33 is_stmt 0 view .LVU2764
 10429 001a 8BB0     		sub	sp, sp, #44
 10430              		.cfi_def_cfa_offset 64
 10431              	.LBB2154:
 10432              	.LBB2155:
 627:src/xeq.c     **** }
 10433              		.loc 1 627 2 view .LVU2765
 10434 001c 07F58667 		add	r7, r7, #1072
 10435              	.LBE2155:
 10436              	.LBE2154:
 10437              	.LBB2157:
 10438              	.LBB2151:
 919:src/xeq.c     **** }
 10439              		.loc 1 919 24 view .LVU2766
 10440 0020 0E40     		ands	r6, r6, r1
 10441              	.LVL786:
 919:src/xeq.c     **** }
 10442              		.loc 1 919 24 view .LVU2767
 10443              	.LBE2151:
 10444              	.LBE2157:
3491:src/xeq.c     **** 		if (mask & 0x800) {
 10445              		.loc 1 3491 2 is_stmt 1 view .LVU2768
3491:src/xeq.c     **** 		if (mask & 0x800) {
 10446              		.loc 1 3491 21 view .LVU2769
3491:src/xeq.c     **** 		if (mask & 0x800) {
 10447              		.loc 1 3491 9 is_stmt 0 view .LVU2770
 10448 0022 6F24     		movs	r4, #111
 10449 0024 07E0     		b	.L786
 10450              	.LVL787:
 10451              	.L784:
3496:src/xeq.c     **** 			// compress the other registers to save them while integer mode is active
 10452              		.loc 1 3496 11 view .LVU2771
 10453 0026 B6F5804F 		cmp	r6, #16384
ARM GAS  /tmp/ccK8IvWa.s 			page 325


 10454 002a 11D0     		beq	.L789
 10455              	.L785:
3491:src/xeq.c     **** 		if (mask & 0x800) {
 10456              		.loc 1 3491 36 is_stmt 1 discriminator 2 view .LVU2772
 10457 002c 013C     		subs	r4, r4, #1
 10458              	.LVL788:
3491:src/xeq.c     **** 		if (mask & 0x800) {
 10459              		.loc 1 3491 2 is_stmt 0 discriminator 2 view .LVU2773
 10460 002e 632C     		cmp	r4, #99
3491:src/xeq.c     **** 		if (mask & 0x800) {
 10461              		.loc 1 3491 46 discriminator 2 view .LVU2774
 10462 0030 4FEA4505 		lsl	r5, r5, #1
 10463              	.LVL789:
3491:src/xeq.c     **** 		if (mask & 0x800) {
 10464              		.loc 1 3491 21 is_stmt 1 discriminator 2 view .LVU2775
3491:src/xeq.c     **** 		if (mask & 0x800) {
 10465              		.loc 1 3491 2 is_stmt 0 discriminator 2 view .LVU2776
 10466 0034 0AD0     		beq	.L790
 10467              	.LVL790:
 10468              	.L786:
3492:src/xeq.c     **** 			// register belongs to stack
 10469              		.loc 1 3492 3 is_stmt 1 view .LVU2777
3496:src/xeq.c     **** 			// compress the other registers to save them while integer mode is active
 10470              		.loc 1 3496 8 view .LVU2778
3492:src/xeq.c     **** 			// register belongs to stack
 10471              		.loc 1 3492 6 is_stmt 0 view .LVU2779
 10472 0036 2B05     		lsls	r3, r5, #20
 10473 0038 F5D5     		bpl	.L784
3494:src/xeq.c     **** 		}
 10474              		.loc 1 3494 4 is_stmt 1 view .LVU2780
 10475 003a 2146     		mov	r1, r4
 10476 003c 2046     		mov	r0, r4
3491:src/xeq.c     **** 		if (mask & 0x800) {
 10477              		.loc 1 3491 36 is_stmt 0 view .LVU2781
 10478 003e 013C     		subs	r4, r4, #1
 10479              	.LVL791:
3494:src/xeq.c     **** 		}
 10480              		.loc 1 3494 4 view .LVU2782
 10481 0040 FFF7FEFF 		bl	int_from_register
 10482              	.LVL792:
3491:src/xeq.c     **** 		if (mask & 0x800) {
 10483              		.loc 1 3491 36 is_stmt 1 view .LVU2783
3491:src/xeq.c     **** 		if (mask & 0x800) {
 10484              		.loc 1 3491 2 is_stmt 0 view .LVU2784
 10485 0044 632C     		cmp	r4, #99
3491:src/xeq.c     **** 		if (mask & 0x800) {
 10486              		.loc 1 3491 46 view .LVU2785
 10487 0046 4FEA4505 		lsl	r5, r5, #1
 10488              	.LVL793:
3491:src/xeq.c     **** 		if (mask & 0x800) {
 10489              		.loc 1 3491 21 is_stmt 1 view .LVU2786
3491:src/xeq.c     **** 		if (mask & 0x800) {
 10490              		.loc 1 3491 2 is_stmt 0 view .LVU2787
 10491 004a F4D1     		bne	.L786
 10492              	.L790:
3501:src/xeq.c     **** 
 10493              		.loc 1 3501 1 view .LVU2788
ARM GAS  /tmp/ccK8IvWa.s 			page 326


 10494 004c 0BB0     		add	sp, sp, #44
 10495              		.cfi_remember_state
 10496              		.cfi_def_cfa_offset 20
 10497              		@ sp needed
 10498 004e F0BD     		pop	{r4, r5, r6, r7, pc}
 10499              	.LVL794:
 10500              	.L789:
 10501              		.cfi_restore_state
3498:src/xeq.c     **** 		}
 10502              		.loc 1 3498 4 is_stmt 1 view .LVU2789
3498:src/xeq.c     **** 		}
 10503              		.loc 1 3498 38 is_stmt 0 view .LVU2790
 10504 0050 2046     		mov	r0, r4
 10505 0052 FFF7FEFF 		bl	get_reg_n
 10506              	.LVL795:
 10507              	.LBB2158:
 10508              	.LBI2154:
 625:src/xeq.c     **** 	decNumber temp;
 10509              		.loc 1 625 6 is_stmt 1 view .LVU2791
 10510              	.LBB2156:
 626:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 10511              		.loc 1 626 2 view .LVU2792
 627:src/xeq.c     **** }
 10512              		.loc 1 627 2 view .LVU2793
 627:src/xeq.c     **** }
 10513              		.loc 1 627 24 is_stmt 0 view .LVU2794
 10514 0056 01A9     		add	r1, sp, #4
 10515 0058 FFF7FEFF 		bl	decimal128ToNumber
 10516              	.LVL796:
 627:src/xeq.c     **** }
 10517              		.loc 1 627 24 view .LVU2795
 10518 005c 0146     		mov	r1, r0
 627:src/xeq.c     **** }
 10519              		.loc 1 627 2 view .LVU2796
 10520 005e 07EBC400 		add	r0, r7, r4, lsl #3
 10521 0062 FFF7FEFF 		bl	packed_from_number
 10522              	.LVL797:
 628:src/xeq.c     **** 
 10523              		.loc 1 628 1 view .LVU2797
 10524 0066 E1E7     		b	.L785
 10525              	.L792:
 10526              		.align	2
 10527              	.L791:
 10528 0068 00000000 		.word	PersistentRam
 10529 006c 00000000 		.word	.LANCHOR3
 10530              	.LBE2156:
 10531              	.LBE2158:
 10532              		.cfi_endproc
 10533              	.LFE200:
 10535              		.section	.text.process_cmdline,"ax",%progbits
 10536              		.align	1
 10537              		.p2align 2,,3
 10538              		.global	process_cmdline
 10539              		.syntax unified
 10540              		.thumb
 10541              		.thumb_func
 10542              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccK8IvWa.s 			page 327


 10544              	process_cmdline:
 10545              	.LFB83:
1026:src/xeq.c     **** 	decNumber a, b, x, t;
 10546              		.loc 1 1026 28 is_stmt 1 view -0
 10547              		.cfi_startproc
 10548              		@ args = 0, pretend = 0, frame = 168
 10549              		@ frame_needed = 0, uses_anonymous_args = 0
1027:src/xeq.c     **** 
 10550              		.loc 1 1027 2 view .LVU2799
1029:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 10551              		.loc 1 1029 2 view .LVU2800
1026:src/xeq.c     **** 	decNumber a, b, x, t;
 10552              		.loc 1 1026 28 is_stmt 0 view .LVU2801
 10553 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 10554              		.cfi_def_cfa_offset 28
 10555              		.cfi_offset 4, -28
 10556              		.cfi_offset 5, -24
 10557              		.cfi_offset 6, -20
 10558              		.cfi_offset 7, -16
 10559              		.cfi_offset 8, -12
 10560              		.cfi_offset 9, -8
 10561              		.cfi_offset 14, -4
1029:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 10562              		.loc 1 1029 6 view .LVU2802
 10563 0004 864C     		ldr	r4, .L833
1029:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 10564              		.loc 1 1029 5 view .LVU2803
 10565 0006 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
1026:src/xeq.c     **** 	decNumber a, b, x, t;
 10566              		.loc 1 1026 28 view .LVU2804
 10567 0008 ADB0     		sub	sp, sp, #180
 10568              		.cfi_def_cfa_offset 208
1029:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 10569              		.loc 1 1029 5 view .LVU2805
 10570 000a 13B9     		cbnz	r3, .L826
 10571              	.L793:
1130:src/xeq.c     **** 
 10572              		.loc 1 1130 1 view .LVU2806
 10573 000c 2DB0     		add	sp, sp, #180
 10574              		.cfi_remember_state
 10575              		.cfi_def_cfa_offset 28
 10576              		@ sp needed
 10577 000e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 10578              	.L826:
 10579              		.cfi_restore_state
 10580              	.LBB2181:
1030:src/xeq.c     **** 		const unsigned int cmdlinedot = CmdLineDot;
 10581              		.loc 1 1030 3 is_stmt 1 view .LVU2807
1030:src/xeq.c     **** 		const unsigned int cmdlinedot = CmdLineDot;
 10582              		.loc 1 1030 27 is_stmt 0 view .LVU2808
 10583 0012 FFF7FEFF 		bl	is_bad_cmdline
 10584              	.LVL798:
1041:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 10585              		.loc 1 1041 7 view .LVU2809
 10586 0016 834E     		ldr	r6, .L833+4
1031:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 10587              		.loc 1 1031 35 view .LVU2810
ARM GAS  /tmp/ccK8IvWa.s 			page 328


 10588 0018 A77F     		ldrb	r7, [r4, #30]	@ zero_extendqisi2
1038:src/xeq.c     **** 
 10589              		.loc 1 1038 3 view .LVU2811
 10590 001a 1422     		movs	r2, #20
 10591 001c 04F12001 		add	r1, r4, #32
1030:src/xeq.c     **** 		const unsigned int cmdlinedot = CmdLineDot;
 10592              		.loc 1 1030 27 view .LVU2812
 10593 0020 0546     		mov	r5, r0
 10594              	.LVL799:
1031:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 10595              		.loc 1 1031 3 is_stmt 1 view .LVU2813
1035:src/xeq.c     **** #endif
 10596              		.loc 1 1035 3 view .LVU2814
1038:src/xeq.c     **** 
 10597              		.loc 1 1038 3 view .LVU2815
 10598 0022 03A8     		add	r0, sp, #12
 10599              	.LVL800:
1038:src/xeq.c     **** 
 10600              		.loc 1 1038 3 is_stmt 0 view .LVU2816
 10601 0024 FFF7FEFF 		bl	xcopy
 10602              	.LVL801:
1040:src/xeq.c     **** 		if (!is_intmode()) {
 10603              		.loc 1 1040 3 is_stmt 1 view .LVU2817
1040:src/xeq.c     **** 		if (!is_intmode()) {
 10604              		.loc 1 1040 11 is_stmt 0 view .LVU2818
 10605 0028 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
1041:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 10606              		.loc 1 1041 7 view .LVU2819
 10607 002a 96F8E837 		ldrb	r3, [r6, #2024]	@ zero_extendqisi2
1040:src/xeq.c     **** 		if (!is_intmode()) {
 10608              		.loc 1 1040 26 view .LVU2820
 10609 002e 2CA9     		add	r1, sp, #176
 10610 0030 8818     		adds	r0, r1, r2
1041:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 10611              		.loc 1 1041 6 view .LVU2821
 10612 0032 13F00103 		ands	r3, r3, #1
1040:src/xeq.c     **** 		if (!is_intmode()) {
 10613              		.loc 1 1040 26 view .LVU2822
 10614 0036 4FF00001 		mov	r1, #0
 10615 003a 00F8A41C 		strb	r1, [r0, #-164]
1041:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 10616              		.loc 1 1041 3 is_stmt 1 view .LVU2823
1041:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 10617              		.loc 1 1041 6 is_stmt 0 view .LVU2824
 10618 003e 45D0     		beq	.L827
1066:src/xeq.c     **** 		lift_if_enabled();
 10619              		.loc 1 1066 3 is_stmt 1 view .LVU2825
 10620              	.LBB2182:
 10621              	.LBB2183:
 10622              	.LBB2184:
 10623              	.LBB2185:
 721:src/xeq.c     **** }
 10624              		.loc 1 721 15 is_stmt 0 view .LVU2826
 10625 0040 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 10626              	.LBE2185:
 10627              	.LBE2184:
 10628              	.LBE2183:
ARM GAS  /tmp/ccK8IvWa.s 			page 329


 10629              	.LBE2182:
1066:src/xeq.c     **** 		lift_if_enabled();
 10630              		.loc 1 1066 17 view .LVU2827
 10631 0042 2177     		strb	r1, [r4, #28]
1067:src/xeq.c     **** 		set_lift();
 10632              		.loc 1 1067 3 is_stmt 1 view .LVU2828
 10633              	.LBB2201:
 10634              	.LBI2182:
 724:src/xeq.c     **** 	if (get_lift())
 10635              		.loc 1 724 6 view .LVU2829
 10636              	.LBB2196:
 725:src/xeq.c     **** 		lift();
 10637              		.loc 1 725 2 view .LVU2830
 10638              	.LBB2191:
 10639              	.LBI2184:
 720:src/xeq.c     **** 	return State2.state_lift;
 10640              		.loc 1 720 12 view .LVU2831
 10641              	.LBB2186:
 721:src/xeq.c     **** }
 10642              		.loc 1 721 2 view .LVU2832
 10643              	.LBE2186:
 10644              	.LBE2191:
 725:src/xeq.c     **** 		lift();
 10645              		.loc 1 725 5 is_stmt 0 view .LVU2833
 10646 0044 5906     		lsls	r1, r3, #25
 10647              	.LBB2192:
 10648              	.LBB2187:
 721:src/xeq.c     **** }
 10649              		.loc 1 721 15 view .LVU2834
 10650 0046 C3F38012 		ubfx	r2, r3, #6, #1
 10651              	.LBE2187:
 10652              	.LBE2192:
 725:src/xeq.c     **** 		lift();
 10653              		.loc 1 725 5 view .LVU2835
 10654 004a 00F19780 		bmi	.L811
 10655              	.LBE2196:
 10656              	.LBE2201:
1068:src/xeq.c     **** 		CmdLineDot = 0;
 10657              		.loc 1 1068 3 is_stmt 1 view .LVU2836
 10658              	.LBB2202:
 10659              	.LBI2202:
 734:src/xeq.c     ****     State2.state_lift = 1;
 10660              		.loc 1 734 6 view .LVU2837
 10661              	.LBB2203:
 735:src/xeq.c     **** }
 10662              		.loc 1 735 5 view .LVU2838
 735:src/xeq.c     **** }
 10663              		.loc 1 735 23 is_stmt 0 view .LVU2839
 10664 004e 43F04003 		orr	r3, r3, #64
 10665 0052 E375     		strb	r3, [r4, #23]
 10666              	.LBE2203:
 10667              	.LBE2202:
1069:src/xeq.c     **** 		CmdLineEex = 0;
 10668              		.loc 1 1069 3 is_stmt 1 view .LVU2840
1069:src/xeq.c     **** 		CmdLineEex = 0;
 10669              		.loc 1 1069 14 is_stmt 0 view .LVU2841
 10670 0054 A277     		strb	r2, [r4, #30]
ARM GAS  /tmp/ccK8IvWa.s 			page 330


1070:src/xeq.c     **** 		if (is_intmode()) {
 10671              		.loc 1 1070 3 is_stmt 1 view .LVU2842
1070:src/xeq.c     **** 		if (is_intmode()) {
 10672              		.loc 1 1070 14 is_stmt 0 view .LVU2843
 10673 0056 6277     		strb	r2, [r4, #29]
1071:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 10674              		.loc 1 1071 3 is_stmt 1 view .LVU2844
 10675              	.L813:
 10676              	.LBB2207:
1072:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
 10677              		.loc 1 1072 4 view .LVU2845
1072:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
 10678              		.loc 1 1072 41 is_stmt 0 view .LVU2846
 10679 0058 9DF80C70 		ldrb	r7, [sp, #12]	@ zero_extendqisi2
 10680              	.LVL802:
1072:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
 10681              		.loc 1 1072 41 view .LVU2847
 10682 005c A7F12D07 		sub	r7, #45
 10683 0060 B7FA87F7 		clz	r7, r7
1073:src/xeq.c     **** 			setX_int_sgn(x, sgn);
 10684              		.loc 1 1073 31 view .LVU2848
 10685 0064 FFF7FEFF 		bl	int_base
 10686              	.LVL803:
1072:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
 10687              		.loc 1 1072 41 view .LVU2849
 10688 0068 7F09     		lsrs	r7, r7, #5
 10689              	.LVL804:
1073:src/xeq.c     **** 			setX_int_sgn(x, sgn);
 10690              		.loc 1 1073 4 is_stmt 1 view .LVU2850
1073:src/xeq.c     **** 			setX_int_sgn(x, sgn);
 10691              		.loc 1 1073 31 is_stmt 0 view .LVU2851
 10692 006a 03AB     		add	r3, sp, #12
 10693 006c DA19     		adds	r2, r3, r7
 10694              	.LVL805:
 10695              	.LBB2208:
 10696              	.LBI2208:
 957:src/xeq.c     **** 	unsigned long long int x = 0;
 10697              		.loc 1 957 24 is_stmt 1 view .LVU2852
 10698              	.LBB2209:
 958:src/xeq.c     **** 
 10699              		.loc 1 958 2 view .LVU2853
 958:src/xeq.c     **** 
 10700              		.loc 1 958 25 is_stmt 0 view .LVU2854
 10701 006e 4FF00008 		mov	r8, #0
 10702 0072 4FF00009 		mov	r9, #0
 10703 0076 03E0     		b	.L802
 10704              	.LVL806:
 10705              	.L828:
 10706              	.LBB2210:
 972:src/xeq.c     **** 	}
 10707              		.loc 1 972 5 view .LVU2855
 10708 0078 14EB0308 		adds	r8, r4, r3
 10709              	.LVL807:
 972:src/xeq.c     **** 	}
 10710              		.loc 1 972 5 view .LVU2856
 10711 007c 45F10009 		adc	r9, r5, #0
 10712              	.LVL808:
ARM GAS  /tmp/ccK8IvWa.s 			page 331


 972:src/xeq.c     **** 	}
 10713              		.loc 1 972 5 view .LVU2857
 10714              	.LBE2210:
 960:src/xeq.c     **** 		unsigned int n;
 10715              		.loc 1 960 8 is_stmt 1 view .LVU2858
 10716              	.L802:
 960:src/xeq.c     **** 		unsigned int n;
 10717              		.loc 1 960 2 view .LVU2859
 10718              	.LBB2211:
 961:src/xeq.c     **** 		const char c = *s++;
 10719              		.loc 1 961 3 view .LVU2860
 962:src/xeq.c     **** 
 10720              		.loc 1 962 3 view .LVU2861
 965:src/xeq.c     **** 		else if (c >= 'A' && c <= 'F')
 10721              		.loc 1 965 4 view .LVU2862
 966:src/xeq.c     **** 			n = c - 'A' + 10;
 10722              		.loc 1 966 8 view .LVU2863
 967:src/xeq.c     **** 		else
 10723              		.loc 1 967 4 view .LVU2864
 962:src/xeq.c     **** 
 10724              		.loc 1 962 14 is_stmt 0 view .LVU2865
 10725 0080 12F8011B 		ldrb	r1, [r2], #1	@ zero_extendqisi2
 10726              	.LVL809:
 964:src/xeq.c     **** 			n = c - '0';
 10727              		.loc 1 964 3 is_stmt 1 view .LVU2866
 964:src/xeq.c     **** 			n = c - '0';
 10728              		.loc 1 964 16 is_stmt 0 view .LVU2867
 10729 0084 A1F13003 		sub	r3, r1, #48
 964:src/xeq.c     **** 			n = c - '0';
 10730              		.loc 1 964 6 view .LVU2868
 10731 0088 DCB2     		uxtb	r4, r3
 10732 008a 092C     		cmp	r4, #9
 966:src/xeq.c     **** 			n = c - 'A' + 10;
 10733              		.loc 1 966 11 view .LVU2869
 10734 008c A1F14105 		sub	r5, r1, #65
 964:src/xeq.c     **** 			n = c - '0';
 10735              		.loc 1 964 6 view .LVU2870
 10736 0090 03D9     		bls	.L800
 966:src/xeq.c     **** 			n = c - 'A' + 10;
 10737              		.loc 1 966 11 view .LVU2871
 10738 0092 052D     		cmp	r5, #5
 10739 0094 07D8     		bhi	.L801
 967:src/xeq.c     **** 		else
 10740              		.loc 1 967 16 view .LVU2872
 10741 0096 A1F13703 		sub	r3, r1, #55
 10742              	.LVL810:
 10743              	.L800:
 970:src/xeq.c     **** 			break;
 10744              		.loc 1 970 3 is_stmt 1 view .LVU2873
 972:src/xeq.c     **** 	}
 10745              		.loc 1 972 3 view .LVU2874
 972:src/xeq.c     **** 	}
 10746              		.loc 1 972 9 is_stmt 0 view .LVU2875
 10747 009a A0FB0845 		umull	r4, r5, r0, r8
 970:src/xeq.c     **** 			break;
 10748              		.loc 1 970 6 view .LVU2876
 10749 009e 9842     		cmp	r0, r3
ARM GAS  /tmp/ccK8IvWa.s 			page 332


 972:src/xeq.c     **** 	}
 10750              		.loc 1 972 9 view .LVU2877
 10751 00a0 00FB0955 		mla	r5, r0, r9, r5
 970:src/xeq.c     **** 			break;
 10752              		.loc 1 970 6 view .LVU2878
 10753 00a4 E8D8     		bhi	.L828
 10754              	.LVL811:
 10755              	.L801:
 970:src/xeq.c     **** 			break;
 10756              		.loc 1 970 6 view .LVU2879
 10757              	.LBE2211:
 974:src/xeq.c     **** }
 10758              		.loc 1 974 2 is_stmt 1 view .LVU2880
 974:src/xeq.c     **** }
 10759              		.loc 1 974 2 is_stmt 0 view .LVU2881
 10760              	.LBE2209:
 10761              	.LBE2208:
1074:src/xeq.c     **** 		} else if (cmdlinedot == 2) {
 10762              		.loc 1 1074 4 is_stmt 1 view .LVU2882
 10763              	.LBB2212:
 10764              	.LBI2212:
1309:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 10765              		.loc 1 1309 6 view .LVU2883
 10766              	.LBB2213:
1310:src/xeq.c     **** }
 10767              		.loc 1 1310 2 view .LVU2884
 10768 00a6 0097     		str	r7, [sp]
 10769 00a8 4246     		mov	r2, r8
 10770 00aa 4B46     		mov	r3, r9
 10771 00ac 6420     		movs	r0, #100
 10772 00ae FFF7FEFF 		bl	set_reg_n_int_sgn
 10773              	.LVL812:
 10774              	.L803:
1310:src/xeq.c     **** }
 10775              		.loc 1 1310 2 is_stmt 0 view .LVU2885
 10776              	.LBE2213:
 10777              	.LBE2212:
 10778              	.LBE2207:
1125:src/xeq.c     **** #ifndef DM42
 10779              		.loc 1 1125 3 is_stmt 1 view .LVU2886
 10780              	.LBB2214:
 10781              	.LBI2214:
3658:src/xeq.c     **** 	if (!Running && !XromRunning)
 10782              		.loc 1 3658 6 view .LVU2887
 10783              	.LBB2215:
3659:src/xeq.c     **** 		State.entryp = 1;
 10784              		.loc 1 3659 2 view .LVU2888
 10785              	.LBB2216:
 10786              	.LBI2216:
3658:src/xeq.c     **** 	if (!Running && !XromRunning)
 10787              		.loc 1 3658 6 view .LVU2889
 10788              	.LBE2216:
3659:src/xeq.c     **** 		State.entryp = 1;
 10789              		.loc 1 3659 6 is_stmt 0 view .LVU2890
 10790 00b2 5D4A     		ldr	r2, .L833+8
 10791              	.LBB2218:
 10792              	.LBB2217:
ARM GAS  /tmp/ccK8IvWa.s 			page 333


3659:src/xeq.c     **** 		State.entryp = 1;
 10793              		.loc 1 3659 18 view .LVU2891
 10794 00b4 5D4B     		ldr	r3, .L833+12
3659:src/xeq.c     **** 		State.entryp = 1;
 10795              		.loc 1 3659 15 view .LVU2892
 10796 00b6 1268     		ldr	r2, [r2]
 10797 00b8 1B68     		ldr	r3, [r3]
 10798 00ba 1343     		orrs	r3, r2, r3
 10799 00bc A6D1     		bne	.L793
3660:src/xeq.c     **** }
 10800              		.loc 1 3660 3 is_stmt 1 view .LVU2893
3660:src/xeq.c     **** }
 10801              		.loc 1 3660 16 is_stmt 0 view .LVU2894
 10802 00be 96F8DD37 		ldrb	r3, [r6, #2013]	@ zero_extendqisi2
 10803 00c2 43F01003 		orr	r3, r3, #16
 10804 00c6 86F8DD37 		strb	r3, [r6, #2013]
 10805 00ca 9FE7     		b	.L793
 10806              	.LVL813:
 10807              	.L827:
3660:src/xeq.c     **** }
 10808              		.loc 1 3660 16 view .LVU2895
 10809              	.LBE2217:
 10810              	.LBE2218:
 10811              	.LBE2215:
 10812              	.LBE2214:
1051:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 10813              		.loc 1 1051 4 is_stmt 1 view .LVU2896
1051:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 10814              		.loc 1 1051 15 is_stmt 0 view .LVU2897
 10815 00cc 2CA8     		add	r0, sp, #176
1051:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 10816              		.loc 1 1051 29 view .LVU2898
 10817 00ce 511E     		subs	r1, r2, #1
1051:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 10818              		.loc 1 1051 15 view .LVU2899
 10819 00d0 0144     		add	r1, r1, r0
 10820 00d2 11F8A40C 		ldrb	r0, [r1, #-164]	@ zero_extendqisi2
1051:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 10821              		.loc 1 1051 7 view .LVU2900
 10822 00d6 4528     		cmp	r0, #69
 10823 00d8 6AD0     		beq	.L829
1053:src/xeq.c     **** 				cmdline[CmdLineLength-2] = '\0';
 10824              		.loc 1 1053 9 is_stmt 1 view .LVU2901
1053:src/xeq.c     **** 				cmdline[CmdLineLength-2] = '\0';
 10825              		.loc 1 1053 12 is_stmt 0 view .LVU2902
 10826 00da 012A     		cmp	r2, #1
 10827 00dc 07D9     		bls	.L797
1053:src/xeq.c     **** 				cmdline[CmdLineLength-2] = '\0';
 10828              		.loc 1 1053 41 discriminator 1 view .LVU2903
 10829 00de 2CA9     		add	r1, sp, #176
1053:src/xeq.c     **** 				cmdline[CmdLineLength-2] = '\0';
 10830              		.loc 1 1053 55 discriminator 1 view .LVU2904
 10831 00e0 023A     		subs	r2, r2, #2
1053:src/xeq.c     **** 				cmdline[CmdLineLength-2] = '\0';
 10832              		.loc 1 1053 41 discriminator 1 view .LVU2905
 10833 00e2 0A44     		add	r2, r2, r1
1053:src/xeq.c     **** 				cmdline[CmdLineLength-2] = '\0';
ARM GAS  /tmp/ccK8IvWa.s 			page 334


 10834              		.loc 1 1053 31 discriminator 1 view .LVU2906
 10835 00e4 12F8A41C 		ldrb	r1, [r2, #-164]	@ zero_extendqisi2
 10836 00e8 4529     		cmp	r1, #69
 10837 00ea 00F09280 		beq	.L830
 10838              	.L797:
1066:src/xeq.c     **** 		lift_if_enabled();
 10839              		.loc 1 1066 3 is_stmt 1 view .LVU2907
 10840              	.LBB2219:
 10841              	.LBB2197:
 10842              	.LBB2193:
 10843              	.LBB2188:
 721:src/xeq.c     **** }
 10844              		.loc 1 721 15 is_stmt 0 view .LVU2908
 10845 00ee E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 10846              	.LBE2188:
 10847              	.LBE2193:
 10848              	.LBE2197:
 10849              	.LBE2219:
1066:src/xeq.c     **** 		lift_if_enabled();
 10850              		.loc 1 1066 17 view .LVU2909
 10851 00f0 0021     		movs	r1, #0
 10852              	.LBB2220:
 10853              	.LBB2198:
 725:src/xeq.c     **** 		lift();
 10854              		.loc 1 725 5 view .LVU2910
 10855 00f2 5806     		lsls	r0, r3, #25
 10856              	.LBB2194:
 10857              	.LBB2189:
 721:src/xeq.c     **** }
 10858              		.loc 1 721 15 view .LVU2911
 10859 00f4 C3F38012 		ubfx	r2, r3, #6, #1
 10860              	.LBE2189:
 10861              	.LBE2194:
 10862              	.LBE2198:
 10863              	.LBE2220:
1066:src/xeq.c     **** 		lift_if_enabled();
 10864              		.loc 1 1066 17 view .LVU2912
 10865 00f8 2177     		strb	r1, [r4, #28]
1067:src/xeq.c     **** 		set_lift();
 10866              		.loc 1 1067 3 is_stmt 1 view .LVU2913
 10867              	.LBB2221:
 724:src/xeq.c     **** 	if (get_lift())
 10868              		.loc 1 724 6 view .LVU2914
 10869              	.LBB2199:
 725:src/xeq.c     **** 		lift();
 10870              		.loc 1 725 2 view .LVU2915
 10871              	.LBB2195:
 720:src/xeq.c     **** 	return State2.state_lift;
 10872              		.loc 1 720 12 view .LVU2916
 10873              	.LBB2190:
 721:src/xeq.c     **** }
 10874              		.loc 1 721 2 view .LVU2917
 10875              	.LBE2190:
 10876              	.LBE2195:
 725:src/xeq.c     **** 		lift();
 10877              		.loc 1 725 5 is_stmt 0 view .LVU2918
 10878 00fa 3FD4     		bmi	.L811
ARM GAS  /tmp/ccK8IvWa.s 			page 335


 10879              	.LBE2199:
 10880              	.LBE2221:
1068:src/xeq.c     **** 		CmdLineDot = 0;
 10881              		.loc 1 1068 3 is_stmt 1 view .LVU2919
 10882              	.LBB2222:
 734:src/xeq.c     ****     State2.state_lift = 1;
 10883              		.loc 1 734 6 view .LVU2920
 10884              	.LBB2204:
 735:src/xeq.c     **** }
 10885              		.loc 1 735 5 view .LVU2921
 735:src/xeq.c     **** }
 10886              		.loc 1 735 23 is_stmt 0 view .LVU2922
 10887 00fc 43F04003 		orr	r3, r3, #64
 10888              	.LBE2204:
 10889              	.LBE2222:
1075:src/xeq.c     **** 			char *d0, *d1, *d2;
 10890              		.loc 1 1075 13 view .LVU2923
 10891 0100 022F     		cmp	r7, #2
 10892              	.LBB2223:
 10893              	.LBB2205:
 735:src/xeq.c     **** }
 10894              		.loc 1 735 23 view .LVU2924
 10895 0102 E375     		strb	r3, [r4, #23]
 10896              	.LBE2205:
 10897              	.LBE2223:
1069:src/xeq.c     **** 		CmdLineEex = 0;
 10898              		.loc 1 1069 3 is_stmt 1 view .LVU2925
1069:src/xeq.c     **** 		CmdLineEex = 0;
 10899              		.loc 1 1069 14 is_stmt 0 view .LVU2926
 10900 0104 A277     		strb	r2, [r4, #30]
1070:src/xeq.c     **** 		if (is_intmode()) {
 10901              		.loc 1 1070 3 is_stmt 1 view .LVU2927
1070:src/xeq.c     **** 		if (is_intmode()) {
 10902              		.loc 1 1070 14 is_stmt 0 view .LVU2928
 10903 0106 6277     		strb	r2, [r4, #29]
1071:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 10904              		.loc 1 1071 3 is_stmt 1 view .LVU2929
1075:src/xeq.c     **** 			char *d0, *d1, *d2;
 10905              		.loc 1 1075 10 view .LVU2930
1075:src/xeq.c     **** 			char *d0, *d1, *d2;
 10906              		.loc 1 1075 13 is_stmt 0 view .LVU2931
 10907 0108 48D1     		bne	.L804
 10908              	.L832:
 10909              	.LBB2224:
1076:src/xeq.c     **** 			int neg;
 10910              		.loc 1 1076 4 is_stmt 1 view .LVU2932
1077:src/xeq.c     **** 
 10911              		.loc 1 1077 4 view .LVU2933
1079:src/xeq.c     **** 				return;
 10912              		.loc 1 1079 4 view .LVU2934
1079:src/xeq.c     **** 				return;
 10913              		.loc 1 1079 7 is_stmt 0 view .LVU2935
 10914 010a 002D     		cmp	r5, #0
 10915 010c 7FF47EAF 		bne	.L793
1082:src/xeq.c     **** #endif
 10916              		.loc 1 1082 4 is_stmt 1 view .LVU2936
1082:src/xeq.c     **** #endif
ARM GAS  /tmp/ccK8IvWa.s 			page 336


 10917              		.loc 1 1082 17 is_stmt 0 view .LVU2937
 10918 0110 96F8E637 		ldrb	r3, [r6, #2022]	@ zero_extendqisi2
1084:src/xeq.c     **** 				neg = 1;
 10919              		.loc 1 1084 7 view .LVU2938
 10920 0114 9DF80C20 		ldrb	r2, [sp, #12]	@ zero_extendqisi2
1082:src/xeq.c     **** #endif
 10921              		.loc 1 1082 17 view .LVU2939
 10922 0118 43F02003 		orr	r3, r3, #32
1084:src/xeq.c     **** 				neg = 1;
 10923              		.loc 1 1084 7 view .LVU2940
 10924 011c 2D2A     		cmp	r2, #45
1082:src/xeq.c     **** #endif
 10925              		.loc 1 1082 17 view .LVU2941
 10926 011e 86F8E637 		strb	r3, [r6, #2022]
1084:src/xeq.c     **** 				neg = 1;
 10927              		.loc 1 1084 4 is_stmt 1 view .LVU2942
1084:src/xeq.c     **** 				neg = 1;
 10928              		.loc 1 1084 7 is_stmt 0 view .LVU2943
 10929 0122 48D0     		beq	.L831
1088:src/xeq.c     **** 				d0 = cmdline;
 10930              		.loc 1 1088 5 is_stmt 1 view .LVU2944
 10931              	.LVL814:
1089:src/xeq.c     **** 			}
 10932              		.loc 1 1089 5 view .LVU2945
1091:src/xeq.c     **** 			*d1++ = '\0';
 10933              		.loc 1 1091 4 view .LVU2946
1091:src/xeq.c     **** 			*d1++ = '\0';
 10934              		.loc 1 1091 9 is_stmt 0 view .LVU2947
 10935 0124 2E21     		movs	r1, #46
 10936 0126 03A8     		add	r0, sp, #12
 10937              	.LVL815:
1091:src/xeq.c     **** 			*d1++ = '\0';
 10938              		.loc 1 1091 9 view .LVU2948
 10939 0128 FFF7FEFF 		bl	find_char
 10940              	.LVL816:
1092:src/xeq.c     **** 			d2 = find_char(d1, '.');
 10941              		.loc 1 1092 4 is_stmt 1 view .LVU2949
1092:src/xeq.c     **** 			d2 = find_char(d1, '.');
 10942              		.loc 1 1092 7 is_stmt 0 view .LVU2950
 10943 012c 0746     		mov	r7, r0
 10944              	.LVL817:
1093:src/xeq.c     **** 			*d2++ = '\0';
 10945              		.loc 1 1093 9 view .LVU2951
 10946 012e 2E21     		movs	r1, #46
1092:src/xeq.c     **** 			d2 = find_char(d1, '.');
 10947              		.loc 1 1092 10 view .LVU2952
 10948 0130 07F8015B 		strb	r5, [r7], #1
 10949              	.LVL818:
1093:src/xeq.c     **** 			*d2++ = '\0';
 10950              		.loc 1 1093 4 is_stmt 1 view .LVU2953
1093:src/xeq.c     **** 			*d2++ = '\0';
 10951              		.loc 1 1093 9 is_stmt 0 view .LVU2954
 10952 0134 3846     		mov	r0, r7
 10953 0136 FFF7FEFF 		bl	find_char
 10954              	.LVL819:
1094:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
 10955              		.loc 1 1094 4 is_stmt 1 view .LVU2955
ARM GAS  /tmp/ccK8IvWa.s 			page 337


1094:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
 10956              		.loc 1 1094 10 is_stmt 0 view .LVU2956
 10957 013a 0146     		mov	r1, r0
1096:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 10958              		.loc 1 1096 4 view .LVU2957
 10959 013c 1AAC     		add	r4, sp, #104
1094:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
 10960              		.loc 1 1094 10 view .LVU2958
 10961 013e 01F8015B 		strb	r5, [r1], #1
 10962              	.LVL820:
1095:src/xeq.c     **** 			decNumberFromString(&x, d0, &Ctx);
 10963              		.loc 1 1095 4 is_stmt 1 view .LVU2959
 10964 0142 3B4A     		ldr	r2, .L833+16
 10965 0144 11A8     		add	r0, sp, #68
 10966 0146 FFF7FEFF 		bl	decNumberFromString
 10967              	.LVL821:
1096:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 10968              		.loc 1 1096 4 view .LVU2960
 10969 014a 394A     		ldr	r2, .L833+16
 10970 014c 03A9     		add	r1, sp, #12
 10971              	.LVL822:
1096:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 10972              		.loc 1 1096 4 is_stmt 0 view .LVU2961
 10973 014e 2046     		mov	r0, r4
 10974 0150 FFF7FEFF 		bl	decNumberFromString
 10975              	.LVL823:
1108:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 16) && defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 10976              		.loc 1 1108 5 is_stmt 1 view .LVU2962
 10977 0154 364A     		ldr	r2, .L833+16
 10978 0156 3946     		mov	r1, r7
 10979 0158 08A8     		add	r0, sp, #32
 10980 015a FFF7FEFF 		bl	decNumberFromString
 10981              	.LVL824:
1113:src/xeq.c     **** #ifdef IGNORE_INVALID_FRACTIONS
 10982              		.loc 1 1113 4 view .LVU2963
 10983 015e 11AA     		add	r2, sp, #68
 10984 0160 08A9     		add	r1, sp, #32
 10985 0162 23A8     		add	r0, sp, #140
 10986 0164 FFF7FEFF 		bl	dn_divide
 10987              	.LVL825:
1117:src/xeq.c     **** 			if (neg)
 10988              		.loc 1 1117 5 view .LVU2964
 10989 0168 23AA     		add	r2, sp, #140
 10990 016a 2146     		mov	r1, r4
 10991 016c 2046     		mov	r0, r4
 10992 016e FFF7FEFF 		bl	dn_add
 10993              	.LVL826:
1118:src/xeq.c     **** 				dn_minus(&x, &x);
 10994              		.loc 1 1118 4 view .LVU2965
 10995              	.L810:
1120:src/xeq.c     **** 		} else {
 10996              		.loc 1 1120 4 view .LVU2966
 10997              	.LBB2225:
 10998              	.LBI2225:
 795:src/xeq.c     **** 	setRegister(regX_idx, x);
 10999              		.loc 1 795 6 view .LVU2967
 11000              	.LBB2226:
ARM GAS  /tmp/ccK8IvWa.s 			page 338


 796:src/xeq.c     **** }
 11001              		.loc 1 796 2 view .LVU2968
 11002 0172 2146     		mov	r1, r4
 11003 0174 6420     		movs	r0, #100
 11004 0176 FFF7FEFF 		bl	setRegister
 11005              	.LVL827:
 797:src/xeq.c     **** 
 11006              		.loc 1 797 1 is_stmt 0 view .LVU2969
 11007 017a 9AE7     		b	.L803
 11008              	.LVL828:
 11009              	.L811:
 797:src/xeq.c     **** 
 11010              		.loc 1 797 1 view .LVU2970
 11011              	.LBE2226:
 11012              	.LBE2225:
 11013              	.LBE2224:
 11014              	.LBB2227:
 11015              	.LBB2200:
 726:src/xeq.c     **** }
 11016              		.loc 1 726 3 is_stmt 1 view .LVU2971
 11017 017c FFF7FEFF 		bl	lift
 11018              	.LVL829:
 11019              	.LBE2200:
 11020              	.LBE2227:
1068:src/xeq.c     **** 		CmdLineDot = 0;
 11021              		.loc 1 1068 3 view .LVU2972
 11022              	.LBB2228:
 734:src/xeq.c     ****     State2.state_lift = 1;
 11023              		.loc 1 734 6 view .LVU2973
 11024              	.LBB2206:
 735:src/xeq.c     **** }
 11025              		.loc 1 735 5 view .LVU2974
 735:src/xeq.c     **** }
 11026              		.loc 1 735 23 is_stmt 0 view .LVU2975
 11027 0180 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11028 0182 96F8E827 		ldrb	r2, [r6, #2024]	@ zero_extendqisi2
 11029 0186 43F04003 		orr	r3, r3, #64
 11030 018a E375     		strb	r3, [r4, #23]
 11031              	.LBE2206:
 11032              	.LBE2228:
1069:src/xeq.c     **** 		CmdLineEex = 0;
 11033              		.loc 1 1069 3 is_stmt 1 view .LVU2976
1069:src/xeq.c     **** 		CmdLineEex = 0;
 11034              		.loc 1 1069 14 is_stmt 0 view .LVU2977
 11035 018c 0023     		movs	r3, #0
 11036 018e A377     		strb	r3, [r4, #30]
1070:src/xeq.c     **** 		if (is_intmode()) {
 11037              		.loc 1 1070 3 is_stmt 1 view .LVU2978
1070:src/xeq.c     **** 		if (is_intmode()) {
 11038              		.loc 1 1070 14 is_stmt 0 view .LVU2979
 11039 0190 6377     		strb	r3, [r4, #29]
1071:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11040              		.loc 1 1071 3 is_stmt 1 view .LVU2980
1071:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11041              		.loc 1 1071 6 is_stmt 0 view .LVU2981
 11042 0192 D407     		lsls	r4, r2, #31
 11043 0194 3FF560AF 		bmi	.L813
ARM GAS  /tmp/ccK8IvWa.s 			page 339


1075:src/xeq.c     **** 			char *d0, *d1, *d2;
 11044              		.loc 1 1075 10 is_stmt 1 view .LVU2982
1075:src/xeq.c     **** 			char *d0, *d1, *d2;
 11045              		.loc 1 1075 13 is_stmt 0 view .LVU2983
 11046 0198 022F     		cmp	r7, #2
 11047 019a B6D0     		beq	.L832
 11048              	.L804:
1122:src/xeq.c     **** 			setX(&x);
 11049              		.loc 1 1122 4 is_stmt 1 view .LVU2984
 11050 019c 03A9     		add	r1, sp, #12
 11051 019e 244A     		ldr	r2, .L833+16
 11052 01a0 1AA8     		add	r0, sp, #104
 11053 01a2 FFF7FEFF 		bl	decNumberFromString
 11054              	.LVL830:
1123:src/xeq.c     **** 		}
 11055              		.loc 1 1123 4 view .LVU2985
 11056              	.LBB2229:
 11057              	.LBI2229:
 795:src/xeq.c     **** 	setRegister(regX_idx, x);
 11058              		.loc 1 795 6 view .LVU2986
 11059              	.LBB2230:
 796:src/xeq.c     **** }
 11060              		.loc 1 796 2 view .LVU2987
 11061 01a6 1AA9     		add	r1, sp, #104
 11062              	.LVL831:
 796:src/xeq.c     **** }
 11063              		.loc 1 796 2 is_stmt 0 view .LVU2988
 11064 01a8 6420     		movs	r0, #100
 11065 01aa FFF7FEFF 		bl	setRegister
 11066              	.LVL832:
 797:src/xeq.c     **** 
 11067              		.loc 1 797 1 view .LVU2989
 11068 01ae 80E7     		b	.L803
 11069              	.LVL833:
 11070              	.L829:
 797:src/xeq.c     **** 
 11071              		.loc 1 797 1 view .LVU2990
 11072              	.LBE2230:
 11073              	.LBE2229:
1052:src/xeq.c     **** 			else if (CmdLineLength > 1 && cmdline[CmdLineLength-2] == 'E' && cmdline[CmdLineLength-1] == '-'
 11074              		.loc 1 1052 5 is_stmt 1 view .LVU2991
1052:src/xeq.c     **** 			else if (CmdLineLength > 1 && cmdline[CmdLineLength-2] == 'E' && cmdline[CmdLineLength-1] == '-'
 11075              		.loc 1 1052 30 is_stmt 0 view .LVU2992
 11076 01b0 01F8A43C 		strb	r3, [r1, #-164]
 11077 01b4 9BE7     		b	.L797
 11078              	.L831:
 11079              	.LVL834:
 11080              	.LBB2231:
1091:src/xeq.c     **** 			*d1++ = '\0';
 11081              		.loc 1 1091 4 is_stmt 1 view .LVU2993
1091:src/xeq.c     **** 			*d1++ = '\0';
 11082              		.loc 1 1091 9 is_stmt 0 view .LVU2994
 11083 01b6 0DF10D00 		add	r0, sp, #13
 11084              	.LVL835:
1091:src/xeq.c     **** 			*d1++ = '\0';
 11085              		.loc 1 1091 9 view .LVU2995
 11086 01ba 2E21     		movs	r1, #46
ARM GAS  /tmp/ccK8IvWa.s 			page 340


 11087 01bc FFF7FEFF 		bl	find_char
 11088              	.LVL836:
1092:src/xeq.c     **** 			d2 = find_char(d1, '.');
 11089              		.loc 1 1092 4 is_stmt 1 view .LVU2996
1092:src/xeq.c     **** 			d2 = find_char(d1, '.');
 11090              		.loc 1 1092 7 is_stmt 0 view .LVU2997
 11091 01c0 0746     		mov	r7, r0
 11092              	.LVL837:
1093:src/xeq.c     **** 			*d2++ = '\0';
 11093              		.loc 1 1093 9 view .LVU2998
 11094 01c2 2E21     		movs	r1, #46
1092:src/xeq.c     **** 			d2 = find_char(d1, '.');
 11095              		.loc 1 1092 10 view .LVU2999
 11096 01c4 07F8015B 		strb	r5, [r7], #1
 11097              	.LVL838:
1093:src/xeq.c     **** 			*d2++ = '\0';
 11098              		.loc 1 1093 4 is_stmt 1 view .LVU3000
1093:src/xeq.c     **** 			*d2++ = '\0';
 11099              		.loc 1 1093 9 is_stmt 0 view .LVU3001
 11100 01c8 3846     		mov	r0, r7
 11101 01ca FFF7FEFF 		bl	find_char
 11102              	.LVL839:
1094:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
 11103              		.loc 1 1094 4 is_stmt 1 view .LVU3002
1094:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
 11104              		.loc 1 1094 10 is_stmt 0 view .LVU3003
 11105 01ce 0146     		mov	r1, r0
1096:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 11106              		.loc 1 1096 4 view .LVU3004
 11107 01d0 1AAC     		add	r4, sp, #104
1094:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
 11108              		.loc 1 1094 10 view .LVU3005
 11109 01d2 01F8015B 		strb	r5, [r1], #1
 11110              	.LVL840:
1095:src/xeq.c     **** 			decNumberFromString(&x, d0, &Ctx);
 11111              		.loc 1 1095 4 is_stmt 1 view .LVU3006
 11112 01d6 164A     		ldr	r2, .L833+16
 11113 01d8 11A8     		add	r0, sp, #68
 11114 01da FFF7FEFF 		bl	decNumberFromString
 11115              	.LVL841:
1096:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 11116              		.loc 1 1096 4 view .LVU3007
 11117 01de 0DF10D01 		add	r1, sp, #13
 11118              	.LVL842:
1096:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 11119              		.loc 1 1096 4 is_stmt 0 view .LVU3008
 11120 01e2 134A     		ldr	r2, .L833+16
 11121 01e4 2046     		mov	r0, r4
 11122 01e6 FFF7FEFF 		bl	decNumberFromString
 11123              	.LVL843:
1108:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 16) && defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 11124              		.loc 1 1108 5 is_stmt 1 view .LVU3009
 11125 01ea 3946     		mov	r1, r7
 11126 01ec 104A     		ldr	r2, .L833+16
 11127 01ee 08A8     		add	r0, sp, #32
 11128 01f0 FFF7FEFF 		bl	decNumberFromString
 11129              	.LVL844:
ARM GAS  /tmp/ccK8IvWa.s 			page 341


1113:src/xeq.c     **** #ifdef IGNORE_INVALID_FRACTIONS
 11130              		.loc 1 1113 4 view .LVU3010
 11131 01f4 11AA     		add	r2, sp, #68
 11132 01f6 08A9     		add	r1, sp, #32
 11133 01f8 23A8     		add	r0, sp, #140
 11134 01fa FFF7FEFF 		bl	dn_divide
 11135              	.LVL845:
1117:src/xeq.c     **** 			if (neg)
 11136              		.loc 1 1117 5 view .LVU3011
 11137 01fe 2146     		mov	r1, r4
 11138 0200 23AA     		add	r2, sp, #140
 11139 0202 2046     		mov	r0, r4
 11140 0204 FFF7FEFF 		bl	dn_add
 11141              	.LVL846:
1118:src/xeq.c     **** 				dn_minus(&x, &x);
 11142              		.loc 1 1118 4 view .LVU3012
1119:src/xeq.c     **** 			setX(&x);
 11143              		.loc 1 1119 5 view .LVU3013
 11144 0208 2146     		mov	r1, r4
 11145 020a 2046     		mov	r0, r4
 11146 020c FFF7FEFF 		bl	dn_minus
 11147              	.LVL847:
 11148 0210 AFE7     		b	.L810
 11149              	.LVL848:
 11150              	.L830:
1119:src/xeq.c     **** 			setX(&x);
 11151              		.loc 1 1119 5 is_stmt 0 view .LVU3014
 11152              	.LBE2231:
1053:src/xeq.c     **** 				cmdline[CmdLineLength-2] = '\0';
 11153              		.loc 1 1053 66 discriminator 2 view .LVU3015
 11154 0212 2D28     		cmp	r0, #45
 11155 0214 7FF46BAF 		bne	.L797
1054:src/xeq.c     **** #endif
 11156              		.loc 1 1054 5 is_stmt 1 view .LVU3016
1054:src/xeq.c     **** #endif
 11157              		.loc 1 1054 30 is_stmt 0 view .LVU3017
 11158 0218 02F8A43C 		strb	r3, [r2, #-164]
 11159 021c 67E7     		b	.L797
 11160              	.L834:
 11161 021e 00BF     		.align	2
 11162              	.L833:
 11163 0220 00000000 		.word	StateWhileOn
 11164 0224 00000000 		.word	PersistentRam
 11165 0228 00000000 		.word	Running
 11166 022c 00000000 		.word	XromRunning
 11167 0230 00000000 		.word	Ctx
 11168              	.LBE2181:
 11169              		.cfi_endproc
 11170              	.LFE83:
 11172              		.section	.text.process_cmdline_set_lift,"ax",%progbits
 11173              		.align	1
 11174              		.p2align 2,,3
 11175              		.global	process_cmdline_set_lift
 11176              		.syntax unified
 11177              		.thumb
 11178              		.thumb_func
 11179              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccK8IvWa.s 			page 342


 11181              	process_cmdline_set_lift:
 11182              	.LFB84:
1132:src/xeq.c     **** 	process_cmdline();
 11183              		.loc 1 1132 37 is_stmt 1 view -0
 11184              		.cfi_startproc
 11185              		@ args = 0, pretend = 0, frame = 0
 11186              		@ frame_needed = 0, uses_anonymous_args = 0
1133:src/xeq.c     **** 	set_lift();
 11187              		.loc 1 1133 2 view .LVU3019
1132:src/xeq.c     **** 	process_cmdline();
 11188              		.loc 1 1132 37 is_stmt 0 view .LVU3020
 11189 0000 08B5     		push	{r3, lr}
 11190              		.cfi_def_cfa_offset 8
 11191              		.cfi_offset 3, -8
 11192              		.cfi_offset 14, -4
1133:src/xeq.c     **** 	set_lift();
 11193              		.loc 1 1133 2 view .LVU3021
 11194 0002 FFF7FEFF 		bl	process_cmdline
 11195              	.LVL849:
1134:src/xeq.c     **** }
 11196              		.loc 1 1134 2 is_stmt 1 view .LVU3022
 11197              	.LBB2232:
 11198              	.LBI2232:
 734:src/xeq.c     ****     State2.state_lift = 1;
 11199              		.loc 1 734 6 view .LVU3023
 11200              	.LBB2233:
 735:src/xeq.c     **** }
 11201              		.loc 1 735 5 view .LVU3024
 735:src/xeq.c     **** }
 11202              		.loc 1 735 23 is_stmt 0 view .LVU3025
 11203 0006 034A     		ldr	r2, .L837
 11204 0008 D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 11205 000a 43F04003 		orr	r3, r3, #64
 11206 000e D375     		strb	r3, [r2, #23]
 11207              	.LBE2233:
 11208              	.LBE2232:
1135:src/xeq.c     **** 
 11209              		.loc 1 1135 1 view .LVU3026
 11210 0010 08BD     		pop	{r3, pc}
 11211              	.L838:
 11212 0012 00BF     		.align	2
 11213              	.L837:
 11214 0014 00000000 		.word	StateWhileOn
 11215              		.cfi_endproc
 11216              	.LFE84:
 11218              		.section	.text.setX_int,"ax",%progbits
 11219              		.align	1
 11220              		.p2align 2,,3
 11221              		.global	setX_int
 11222              		.syntax unified
 11223              		.thumb
 11224              		.thumb_func
 11225              		.fpu fpv4-sp-d16
 11227              	setX_int:
 11228              	.LVL850:
 11229              	.LFB97:
1304:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
ARM GAS  /tmp/ccK8IvWa.s 			page 343


 11230              		.loc 1 1304 34 is_stmt 1 view -0
 11231              		.cfi_startproc
 11232              		@ args = 0, pretend = 0, frame = 8
 11233              		@ frame_needed = 0, uses_anonymous_args = 0
1305:src/xeq.c     **** }
 11234              		.loc 1 1305 2 view .LVU3028
1304:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
 11235              		.loc 1 1304 34 is_stmt 0 view .LVU3029
 11236 0000 00B5     		push	{lr}
 11237              		.cfi_def_cfa_offset 4
 11238              		.cfi_offset 14, -4
 11239 0002 0B46     		mov	r3, r1
 11240 0004 83B0     		sub	sp, sp, #12
 11241              		.cfi_def_cfa_offset 16
1304:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
 11242              		.loc 1 1304 34 view .LVU3030
 11243 0006 0246     		mov	r2, r0
 11244              	.LBB2234:
 11245              	.LBB2235:
1223:src/xeq.c     **** }
 11246              		.loc 1 1223 8 view .LVU3031
 11247 0008 6420     		movs	r0, #100
 11248              	.LVL851:
1223:src/xeq.c     **** }
 11249              		.loc 1 1223 8 view .LVU3032
 11250 000a CDE90023 		strd	r2, [sp]
 11251              	.LVL852:
1223:src/xeq.c     **** }
 11252              		.loc 1 1223 8 view .LVU3033
 11253              	.LBE2235:
 11254              	.LBI2234:
1222:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 11255              		.loc 1 1222 6 is_stmt 1 view .LVU3034
 11256              	.LBB2236:
1223:src/xeq.c     **** }
 11257              		.loc 1 1223 2 view .LVU3035
1223:src/xeq.c     **** }
 11258              		.loc 1 1223 8 is_stmt 0 view .LVU3036
 11259 000e FFF7FEFF 		bl	get_reg_n
 11260              	.LVL853:
1223:src/xeq.c     **** }
 11261              		.loc 1 1223 2 view .LVU3037
 11262 0012 0822     		movs	r2, #8
 11263 0014 6946     		mov	r1, sp
 11264 0016 FFF7FEFF 		bl	xcopy
 11265              	.LVL854:
1223:src/xeq.c     **** }
 11266              		.loc 1 1223 2 view .LVU3038
 11267              	.LBE2236:
 11268              	.LBE2234:
1306:src/xeq.c     **** 
 11269              		.loc 1 1306 1 view .LVU3039
 11270 001a 03B0     		add	sp, sp, #12
 11271              		.cfi_def_cfa_offset 4
 11272              		@ sp needed
 11273 001c 5DF804FB 		ldr	pc, [sp], #4
 11274              		.cfi_endproc
ARM GAS  /tmp/ccK8IvWa.s 			page 344


 11275              	.LFE97:
 11277              		.section	.text.do_rcl,"ax",%progbits
 11278              		.align	1
 11279              		.p2align 2,,3
 11280              		.syntax unified
 11281              		.thumb
 11282              		.thumb_func
 11283              		.fpu fpv4-sp-d16
 11285              	do_rcl:
 11286              	.LVL855:
 11287              	.LFB113:
1532:src/xeq.c     **** 	if (op == RARG_RCL) {
 11288              		.loc 1 1532 45 is_stmt 1 view -0
 11289              		.cfi_startproc
 11290              		@ args = 0, pretend = 0, frame = 40
 11291              		@ frame_needed = 0, uses_anonymous_args = 0
1533:src/xeq.c     **** 		REGISTER temp;
 11292              		.loc 1 1533 2 view .LVU3041
1532:src/xeq.c     **** 	if (op == RARG_RCL) {
 11293              		.loc 1 1532 45 is_stmt 0 view .LVU3042
 11294 0000 30B5     		push	{r4, r5, lr}
 11295              		.cfi_def_cfa_offset 12
 11296              		.cfi_offset 4, -12
 11297              		.cfi_offset 5, -8
 11298              		.cfi_offset 14, -4
1533:src/xeq.c     **** 		REGISTER temp;
 11299              		.loc 1 1533 5 view .LVU3043
 11300 0002 0A29     		cmp	r1, #10
1532:src/xeq.c     **** 	if (op == RARG_RCL) {
 11301              		.loc 1 1532 45 view .LVU3044
 11302 0004 8BB0     		sub	sp, sp, #44
 11303              		.cfi_def_cfa_offset 56
1532:src/xeq.c     **** 	if (op == RARG_RCL) {
 11304              		.loc 1 1532 45 view .LVU3045
 11305 0006 0B46     		mov	r3, r1
1533:src/xeq.c     **** 		REGISTER temp;
 11306              		.loc 1 1533 5 view .LVU3046
 11307 0008 32D0     		beq	.L862
1539:src/xeq.c     **** 			long long int r;
 11308              		.loc 1 1539 3 is_stmt 1 view .LVU3047
1539:src/xeq.c     **** 			long long int r;
 11309              		.loc 1 1539 7 is_stmt 0 view .LVU3048
 11310 000a 2E4A     		ldr	r2, .L864
 11311 000c 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
1539:src/xeq.c     **** 			long long int r;
 11312              		.loc 1 1539 6 view .LVU3049
 11313 0010 D207     		lsls	r2, r2, #31
 11314 0012 0146     		mov	r1, r0
 11315              	.LVL856:
 11316              	.LBB2266:
1542:src/xeq.c     **** 				illegal(op);
 11317              		.loc 1 1542 8 view .LVU3050
 11318 0014 A3F10A03 		sub	r3, r3, #10
 11319              	.LBE2266:
1539:src/xeq.c     **** 			long long int r;
 11320              		.loc 1 1539 6 view .LVU3051
 11321 0018 14D5     		bpl	.L847
ARM GAS  /tmp/ccK8IvWa.s 			page 345


 11322              	.LBB2273:
1540:src/xeq.c     **** 
 11323              		.loc 1 1540 4 is_stmt 1 view .LVU3052
1542:src/xeq.c     **** 				illegal(op);
 11324              		.loc 1 1542 4 view .LVU3053
1542:src/xeq.c     **** 				illegal(op);
 11325              		.loc 1 1542 8 is_stmt 0 view .LVU3054
 11326 001a 98B2     		uxth	r0, r3
 11327              	.LVL857:
1542:src/xeq.c     **** 				illegal(op);
 11328              		.loc 1 1542 8 view .LVU3055
 11329 001c 6A46     		mov	r2, sp
 11330 001e 0123     		movs	r3, #1
 11331 0020 FFF7FEFF 		bl	storcl_intop
 11332              	.LVL858:
1542:src/xeq.c     **** 				illegal(op);
 11333              		.loc 1 1542 7 view .LVU3056
 11334 0024 20B1     		cbz	r0, .L848
1543:src/xeq.c     **** 			setlastX();
 11335              		.loc 1 1543 5 is_stmt 1 view .LVU3057
1543:src/xeq.c     **** 			setlastX();
 11336              		.loc 1 1543 5 view .LVU3058
 11337              	.LVL859:
 11338              	.LBB2267:
 11339              	.LBI2267:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 11340              		.loc 1 523 5 view .LVU3059
 11341              	.LBB2268:
 524:src/xeq.c     **** 		Error = e;
 11342              		.loc 1 524 2 view .LVU3060
 524:src/xeq.c     **** 		Error = e;
 11343              		.loc 1 524 12 is_stmt 0 view .LVU3061
 11344 0026 284B     		ldr	r3, .L864+4
 524:src/xeq.c     **** 		Error = e;
 11345              		.loc 1 524 5 view .LVU3062
 11346 0028 1A68     		ldr	r2, [r3]
 11347 002a 0AB9     		cbnz	r2, .L848
 11348              	.LVL860:
 11349              	.LBB2269:
 11350              	.LBI2269:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 11351              		.loc 1 523 5 is_stmt 1 view .LVU3063
 11352              	.LBB2270:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 11353              		.loc 1 525 3 view .LVU3064
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 11354              		.loc 1 525 9 is_stmt 0 view .LVU3065
 11355 002c 0322     		movs	r2, #3
 11356 002e 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 11357              		.loc 1 526 3 is_stmt 1 view .LVU3066
 11358              	.LVL861:
 11359              	.L848:
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 11360              		.loc 1 526 3 is_stmt 0 view .LVU3067
 11361              	.LBE2270:
 11362              	.LBE2269:
ARM GAS  /tmp/ccK8IvWa.s 			page 346


 11363              	.LBE2268:
 11364              	.LBE2267:
1543:src/xeq.c     **** 			setlastX();
 11365              		.loc 1 1543 5 is_stmt 1 discriminator 1 view .LVU3068
1544:src/xeq.c     **** 			setX_int(r);
 11366              		.loc 1 1544 4 discriminator 1 view .LVU3069
 11367              	.LBB2271:
 11368              	.LBI2271:
 759:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 11369              		.loc 1 759 6 discriminator 1 view .LVU3070
 11370              	.LBB2272:
 760:src/xeq.c     **** }
 11371              		.loc 1 760 2 discriminator 1 view .LVU3071
 11372 0030 6421     		movs	r1, #100
 11373 0032 6C20     		movs	r0, #108
 11374 0034 FFF7FEFF 		bl	copyreg_n
 11375              	.LVL862:
 11376              	.LBE2272:
 11377              	.LBE2271:
1545:src/xeq.c     **** 		} else {
 11378              		.loc 1 1545 4 discriminator 1 view .LVU3072
 11379 0038 DDE90001 		ldrd	r0, [sp]
 11380 003c FFF7FEFF 		bl	setX_int
 11381              	.LVL863:
 11382              	.LBE2273:
1555:src/xeq.c     **** 
 11383              		.loc 1 1555 1 is_stmt 0 discriminator 1 view .LVU3073
 11384 0040 0BB0     		add	sp, sp, #44
 11385              		.cfi_remember_state
 11386              		.cfi_def_cfa_offset 12
 11387              		@ sp needed
 11388 0042 30BD     		pop	{r4, r5, pc}
 11389              	.LVL864:
 11390              	.L847:
 11391              		.cfi_restore_state
 11392              	.LBB2274:
1547:src/xeq.c     **** 
 11393              		.loc 1 1547 4 is_stmt 1 view .LVU3074
1549:src/xeq.c     **** 				illegal(op);
 11394              		.loc 1 1549 4 view .LVU3075
1549:src/xeq.c     **** 				illegal(op);
 11395              		.loc 1 1549 8 is_stmt 0 view .LVU3076
 11396 0044 6C46     		mov	r4, sp
 11397 0046 98B2     		uxth	r0, r3
 11398              	.LVL865:
1549:src/xeq.c     **** 				illegal(op);
 11399              		.loc 1 1549 8 view .LVU3077
 11400 0048 2246     		mov	r2, r4
 11401 004a 0123     		movs	r3, #1
 11402 004c FFF7FEFF 		bl	storcl_op
 11403              	.LVL866:
1549:src/xeq.c     **** 				illegal(op);
 11404              		.loc 1 1549 7 view .LVU3078
 11405 0050 20B1     		cbz	r0, .L849
1550:src/xeq.c     **** 			setlastX();
 11406              		.loc 1 1550 5 is_stmt 1 view .LVU3079
1550:src/xeq.c     **** 			setlastX();
ARM GAS  /tmp/ccK8IvWa.s 			page 347


 11407              		.loc 1 1550 5 view .LVU3080
 11408              	.LVL867:
 11409              	.LBB2275:
 11410              	.LBI2275:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 11411              		.loc 1 523 5 view .LVU3081
 11412              	.LBB2276:
 524:src/xeq.c     **** 		Error = e;
 11413              		.loc 1 524 2 view .LVU3082
 524:src/xeq.c     **** 		Error = e;
 11414              		.loc 1 524 12 is_stmt 0 view .LVU3083
 11415 0052 1D4B     		ldr	r3, .L864+4
 524:src/xeq.c     **** 		Error = e;
 11416              		.loc 1 524 5 view .LVU3084
 11417 0054 1A68     		ldr	r2, [r3]
 11418 0056 0AB9     		cbnz	r2, .L849
 11419              	.LVL868:
 11420              	.LBB2277:
 11421              	.LBI2277:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 11422              		.loc 1 523 5 is_stmt 1 view .LVU3085
 11423              	.LBB2278:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 11424              		.loc 1 525 3 view .LVU3086
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 11425              		.loc 1 525 9 is_stmt 0 view .LVU3087
 11426 0058 0322     		movs	r2, #3
 11427 005a 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 11428              		.loc 1 526 3 is_stmt 1 view .LVU3088
 11429              	.LVL869:
 11430              	.L849:
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 11431              		.loc 1 526 3 is_stmt 0 view .LVU3089
 11432              	.LBE2278:
 11433              	.LBE2277:
 11434              	.LBE2276:
 11435              	.LBE2275:
1550:src/xeq.c     **** 			setlastX();
 11436              		.loc 1 1550 5 is_stmt 1 discriminator 1 view .LVU3090
1551:src/xeq.c     **** 			setX(&r);
 11437              		.loc 1 1551 4 discriminator 1 view .LVU3091
 11438              	.LBB2279:
 11439              	.LBI2279:
 759:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 11440              		.loc 1 759 6 discriminator 1 view .LVU3092
 11441              	.LBB2280:
 760:src/xeq.c     **** }
 11442              		.loc 1 760 2 discriminator 1 view .LVU3093
 11443 005c 6421     		movs	r1, #100
 11444 005e 6C20     		movs	r0, #108
 11445 0060 FFF7FEFF 		bl	copyreg_n
 11446              	.LVL870:
 11447              	.LBE2280:
 11448              	.LBE2279:
1552:src/xeq.c     **** 		}
 11449              		.loc 1 1552 4 discriminator 1 view .LVU3094
ARM GAS  /tmp/ccK8IvWa.s 			page 348


 11450              	.LBB2281:
 11451              	.LBI2281:
 795:src/xeq.c     **** 	setRegister(regX_idx, x);
 11452              		.loc 1 795 6 discriminator 1 view .LVU3095
 11453              	.LBB2282:
 796:src/xeq.c     **** }
 11454              		.loc 1 796 2 discriminator 1 view .LVU3096
 11455 0064 2146     		mov	r1, r4
 11456 0066 6420     		movs	r0, #100
 11457 0068 FFF7FEFF 		bl	setRegister
 11458              	.LVL871:
 796:src/xeq.c     **** }
 11459              		.loc 1 796 2 is_stmt 0 discriminator 1 view .LVU3097
 11460              	.LBE2282:
 11461              	.LBE2281:
 11462              	.LBE2274:
1555:src/xeq.c     **** 
 11463              		.loc 1 1555 1 discriminator 1 view .LVU3098
 11464 006c 0BB0     		add	sp, sp, #44
 11465              		.cfi_remember_state
 11466              		.cfi_def_cfa_offset 12
 11467              		@ sp needed
 11468 006e 30BD     		pop	{r4, r5, pc}
 11469              	.LVL872:
 11470              	.L862:
 11471              		.cfi_restore_state
 11472              	.LBB2283:
1534:src/xeq.c     **** 		copyreg(&temp, get_reg_n(index));
 11473              		.loc 1 1534 3 is_stmt 1 view .LVU3099
1535:src/xeq.c     **** 		lift_if_enabled();
 11474              		.loc 1 1535 3 view .LVU3100
 11475              	.LBB2284:
 11476              	.LBB2285:
 11477              	.LBB2286:
 11478              	.LBB2287:
 919:src/xeq.c     **** }
 11479              		.loc 1 919 24 is_stmt 0 view .LVU3101
 11480 0070 144D     		ldr	r5, .L864
 11481              	.LBE2287:
 11482              	.LBE2286:
 11483              	.LBE2285:
 11484              	.LBE2284:
1535:src/xeq.c     **** 		lift_if_enabled();
 11485              		.loc 1 1535 18 view .LVU3102
 11486 0072 FFF7FEFF 		bl	get_reg_n
 11487              	.LVL873:
 11488              	.LBB2294:
 11489              	.LBB2292:
 11490              	.LBB2290:
 11491              	.LBB2288:
 919:src/xeq.c     **** }
 11492              		.loc 1 919 24 view .LVU3103
 11493 0076 B5F8E827 		ldrh	r2, [r5, #2024]
 11494 007a 44F20103 		movw	r3, #16385
 11495              	.LBE2288:
 11496              	.LBE2290:
 704:src/xeq.c     **** }
ARM GAS  /tmp/ccK8IvWa.s 			page 349


 11497              		.loc 1 704 2 view .LVU3104
 11498 007e 1340     		ands	r3, r3, r2
 11499 0080 B3F5804F 		cmp	r3, #16384
 11500 0084 6C46     		mov	r4, sp
 11501              	.LBE2292:
 11502              	.LBE2294:
1535:src/xeq.c     **** 		lift_if_enabled();
 11503              		.loc 1 1535 18 view .LVU3105
 11504 0086 0146     		mov	r1, r0
 11505              	.LVL874:
 11506              	.LBB2295:
 11507              	.LBI2284:
 703:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 11508              		.loc 1 703 6 is_stmt 1 view .LVU3106
 11509              	.LBB2293:
 704:src/xeq.c     **** }
 11510              		.loc 1 704 2 view .LVU3107
 11511              	.LBB2291:
 11512              	.LBI2286:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 11513              		.loc 1 918 5 view .LVU3108
 11514              	.LBB2289:
 919:src/xeq.c     **** }
 11515              		.loc 1 919 2 view .LVU3109
 11516              	.LBE2289:
 11517              	.LBE2291:
 704:src/xeq.c     **** }
 11518              		.loc 1 704 2 is_stmt 0 view .LVU3110
 11519 0088 0CBF     		ite	eq
 11520 008a 1022     		moveq	r2, #16
 11521 008c 0822     		movne	r2, #8
 11522 008e 2046     		mov	r0, r4
 11523              	.LVL875:
 704:src/xeq.c     **** }
 11524              		.loc 1 704 2 view .LVU3111
 11525 0090 FFF7FEFF 		bl	xcopy
 11526              	.LVL876:
 704:src/xeq.c     **** }
 11527              		.loc 1 704 2 view .LVU3112
 11528              	.LBE2293:
 11529              	.LBE2295:
1536:src/xeq.c     **** 		copyreg(StackBase, &temp);
 11530              		.loc 1 1536 3 is_stmt 1 view .LVU3113
 11531              	.LBB2296:
 11532              	.LBI2296:
 724:src/xeq.c     **** 	if (get_lift())
 11533              		.loc 1 724 6 view .LVU3114
 11534              	.LBB2297:
 725:src/xeq.c     **** 		lift();
 11535              		.loc 1 725 2 view .LVU3115
 11536              	.LBB2298:
 11537              	.LBI2298:
 720:src/xeq.c     **** 	return State2.state_lift;
 11538              		.loc 1 720 12 view .LVU3116
 11539              	.LBB2299:
 721:src/xeq.c     **** }
 11540              		.loc 1 721 2 view .LVU3117
ARM GAS  /tmp/ccK8IvWa.s 			page 350


 721:src/xeq.c     **** }
 11541              		.loc 1 721 15 is_stmt 0 view .LVU3118
 11542 0094 0D4B     		ldr	r3, .L864+8
 11543 0096 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 11544              	.LBE2299:
 11545              	.LBE2298:
 725:src/xeq.c     **** 		lift();
 11546              		.loc 1 725 5 view .LVU3119
 11547 0098 5906     		lsls	r1, r3, #25
 11548 009a 10D4     		bmi	.L863
 11549              	.L844:
 11550              	.LBE2297:
 11551              	.LBE2296:
1537:src/xeq.c     **** 	} else {
 11552              		.loc 1 1537 3 is_stmt 1 view .LVU3120
 11553              	.LBB2301:
 11554              	.LBB2302:
 11555              	.LBB2303:
 11556              	.LBB2304:
 919:src/xeq.c     **** }
 11557              		.loc 1 919 24 is_stmt 0 view .LVU3121
 11558 009c B5F8E827 		ldrh	r2, [r5, #2024]
 11559              	.LBE2304:
 11560              	.LBE2303:
 11561              	.LBE2302:
 11562              	.LBE2301:
1537:src/xeq.c     **** 	} else {
 11563              		.loc 1 1537 3 view .LVU3122
 11564 00a0 0B48     		ldr	r0, .L864+12
 11565              	.LVL877:
 11566              	.LBB2308:
 11567              	.LBI2301:
 703:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 11568              		.loc 1 703 6 is_stmt 1 view .LVU3123
 11569              	.LBB2307:
 704:src/xeq.c     **** }
 11570              		.loc 1 704 2 view .LVU3124
 11571              	.LBB2306:
 11572              	.LBI2303:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 11573              		.loc 1 918 5 view .LVU3125
 11574              	.LBB2305:
 919:src/xeq.c     **** }
 11575              		.loc 1 919 2 view .LVU3126
 919:src/xeq.c     **** }
 11576              		.loc 1 919 24 is_stmt 0 view .LVU3127
 11577 00a2 44F20103 		movw	r3, #16385
 11578              	.LBE2305:
 11579              	.LBE2306:
 704:src/xeq.c     **** }
 11580              		.loc 1 704 2 view .LVU3128
 11581 00a6 1340     		ands	r3, r3, r2
 11582 00a8 B3F5804F 		cmp	r3, #16384
 11583 00ac 2146     		mov	r1, r4
 11584 00ae 0CBF     		ite	eq
 11585 00b0 1022     		moveq	r2, #16
 11586 00b2 0822     		movne	r2, #8
ARM GAS  /tmp/ccK8IvWa.s 			page 351


 11587 00b4 0068     		ldr	r0, [r0]
 11588              	.LVL878:
 704:src/xeq.c     **** }
 11589              		.loc 1 704 2 view .LVU3129
 11590 00b6 FFF7FEFF 		bl	xcopy
 11591              	.LVL879:
 704:src/xeq.c     **** }
 11592              		.loc 1 704 2 view .LVU3130
 11593              	.LBE2307:
 11594              	.LBE2308:
 11595              	.LBE2283:
1555:src/xeq.c     **** 
 11596              		.loc 1 1555 1 view .LVU3131
 11597 00ba 0BB0     		add	sp, sp, #44
 11598              		.cfi_remember_state
 11599              		.cfi_def_cfa_offset 12
 11600              		@ sp needed
 11601 00bc 30BD     		pop	{r4, r5, pc}
 11602              	.L863:
 11603              		.cfi_restore_state
 11604              	.LBB2310:
 11605              	.LBB2309:
 11606              	.LBB2300:
 726:src/xeq.c     **** }
 11607              		.loc 1 726 3 is_stmt 1 view .LVU3132
 11608 00be FFF7FEFF 		bl	lift
 11609              	.LVL880:
 11610 00c2 EBE7     		b	.L844
 11611              	.L865:
 11612              		.align	2
 11613              	.L864:
 11614 00c4 00000000 		.word	PersistentRam
 11615 00c8 00000000 		.word	Error
 11616 00cc 00000000 		.word	StateWhileOn
 11617 00d0 00000000 		.word	StackBase
 11618              	.LBE2300:
 11619              	.LBE2309:
 11620              	.LBE2310:
 11621              		.cfi_endproc
 11622              	.LFE113:
 11624              		.section	.text.setX_int_sgn,"ax",%progbits
 11625              		.align	1
 11626              		.p2align 2,,3
 11627              		.global	setX_int_sgn
 11628              		.syntax unified
 11629              		.thumb
 11630              		.thumb_func
 11631              		.fpu fpv4-sp-d16
 11633              	setX_int_sgn:
 11634              	.LVL881:
 11635              	.LFB98:
1309:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 11636              		.loc 1 1309 56 view -0
 11637              		.cfi_startproc
 11638              		@ args = 0, pretend = 0, frame = 0
 11639              		@ frame_needed = 0, uses_anonymous_args = 0
1310:src/xeq.c     **** }
ARM GAS  /tmp/ccK8IvWa.s 			page 352


 11640              		.loc 1 1310 2 view .LVU3134
1309:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 11641              		.loc 1 1309 56 is_stmt 0 view .LVU3135
 11642 0000 00B5     		push	{lr}
 11643              		.cfi_def_cfa_offset 4
 11644              		.cfi_offset 14, -4
 11645 0002 83B0     		sub	sp, sp, #12
 11646              		.cfi_def_cfa_offset 16
1310:src/xeq.c     **** }
 11647              		.loc 1 1310 2 view .LVU3136
 11648 0004 0B46     		mov	r3, r1
 11649 0006 0092     		str	r2, [sp]
 11650 0008 0246     		mov	r2, r0
 11651              	.LVL882:
1310:src/xeq.c     **** }
 11652              		.loc 1 1310 2 view .LVU3137
 11653 000a 6420     		movs	r0, #100
 11654              	.LVL883:
1310:src/xeq.c     **** }
 11655              		.loc 1 1310 2 view .LVU3138
 11656 000c FFF7FEFF 		bl	set_reg_n_int_sgn
 11657              	.LVL884:
1311:src/xeq.c     **** 
 11658              		.loc 1 1311 1 view .LVU3139
 11659 0010 03B0     		add	sp, sp, #12
 11660              		.cfi_def_cfa_offset 4
 11661              		@ sp needed
 11662 0012 5DF804FB 		ldr	pc, [sp], #4
 11663              		.cfi_endproc
 11664              	.LFE98:
 11666 0016 00BF     		.section	.text.zero_regs,"ax",%progbits
 11667              		.align	1
 11668              		.p2align 2,,3
 11669              		.global	zero_regs
 11670              		.syntax unified
 11671              		.thumb
 11672              		.thumb_func
 11673              		.fpu fpv4-sp-d16
 11675              	zero_regs:
 11676              	.LVL885:
 11677              	.LFB99:
1318:src/xeq.c     **** #if 0
 11678              		.loc 1 1318 39 is_stmt 1 view -0
 11679              		.cfi_startproc
 11680              		@ args = 0, pretend = 0, frame = 0
 11681              		@ frame_needed = 0, uses_anonymous_args = 0
 11682              		@ link register save eliminated.
1333:src/xeq.c     **** #endif
 11683              		.loc 1 1333 2 view .LVU3141
 11684              	.LBB2311:
 11685              	.LBI2311:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 11686              		.loc 1 918 5 view .LVU3142
 11687              	.LBB2312:
 919:src/xeq.c     **** }
 11688              		.loc 1 919 2 view .LVU3143
 919:src/xeq.c     **** }
ARM GAS  /tmp/ccK8IvWa.s 			page 353


 11689              		.loc 1 919 24 is_stmt 0 view .LVU3144
 11690 0000 084B     		ldr	r3, .L869
 11691 0002 B3F8E827 		ldrh	r2, [r3, #2024]
 11692 0006 44F20103 		movw	r3, #16385
 11693 000a 1340     		ands	r3, r3, r2
 11694 000c A3F58043 		sub	r3, r3, #16384
 11695 0010 B3FA83F3 		clz	r3, r3
 11696 0014 5B09     		lsrs	r3, r3, #5
 11697              	.LBE2312:
 11698              	.LBE2311:
1333:src/xeq.c     **** #endif
 11699              		.loc 1 1333 24 view .LVU3145
 11700 0016 0333     		adds	r3, r3, #3
1333:src/xeq.c     **** #endif
 11701              		.loc 1 1333 2 view .LVU3146
 11702 0018 01FA03F2 		lsl	r2, r1, r3
 11703 001c 0021     		movs	r1, #0
 11704              	.LVL886:
1333:src/xeq.c     **** #endif
 11705              		.loc 1 1333 2 view .LVU3147
 11706 001e FFF7FEBF 		b	xset
 11707              	.LVL887:
 11708              	.L870:
1333:src/xeq.c     **** #endif
 11709              		.loc 1 1333 2 view .LVU3148
 11710 0022 00BF     		.align	2
 11711              	.L869:
 11712 0024 00000000 		.word	PersistentRam
 11713              		.cfi_endproc
 11714              	.LFE99:
 11716              		.section	.text.move_regs,"ax",%progbits
 11717              		.align	1
 11718              		.p2align 2,,3
 11719              		.global	move_regs
 11720              		.syntax unified
 11721              		.thumb
 11722              		.thumb_func
 11723              		.fpu fpv4-sp-d16
 11725              	move_regs:
 11726              	.LVL888:
 11727              	.LFB100:
1337:src/xeq.c     **** 	if (is_dblmode())
 11728              		.loc 1 1337 54 is_stmt 1 view -0
 11729              		.cfi_startproc
 11730              		@ args = 0, pretend = 0, frame = 0
 11731              		@ frame_needed = 0, uses_anonymous_args = 0
 11732              		@ link register save eliminated.
1338:src/xeq.c     **** 		n <<= 1;
 11733              		.loc 1 1338 2 view .LVU3150
 11734              	.LBB2313:
 11735              	.LBI2313:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 11736              		.loc 1 918 5 view .LVU3151
 11737              	.LBB2314:
 919:src/xeq.c     **** }
 11738              		.loc 1 919 2 view .LVU3152
 919:src/xeq.c     **** }
ARM GAS  /tmp/ccK8IvWa.s 			page 354


 11739              		.loc 1 919 24 is_stmt 0 view .LVU3153
 11740 0000 074B     		ldr	r3, .L874
 11741              	.LBE2314:
 11742              	.LBE2313:
1337:src/xeq.c     **** 	if (is_dblmode())
 11743              		.loc 1 1337 54 view .LVU3154
 11744 0002 10B4     		push	{r4}
 11745              		.cfi_def_cfa_offset 4
 11746              		.cfi_offset 4, -4
 11747              	.LBB2316:
 11748              	.LBB2315:
 919:src/xeq.c     **** }
 11749              		.loc 1 919 24 view .LVU3155
 11750 0004 B3F8E847 		ldrh	r4, [r3, #2024]
 11751 0008 44F20103 		movw	r3, #16385
 11752              	.LBE2315:
 11753              	.LBE2316:
1338:src/xeq.c     **** 		n <<= 1;
 11754              		.loc 1 1338 5 view .LVU3156
 11755 000c 2340     		ands	r3, r3, r4
 11756 000e B3F5804F 		cmp	r3, #16384
1339:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 11757              		.loc 1 1339 3 is_stmt 1 view .LVU3157
1339:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 11758              		.loc 1 1339 5 is_stmt 0 view .LVU3158
 11759 0012 08BF     		it	eq
 11760 0014 5200     		lsleq	r2, r2, #1
 11761              	.LVL889:
1340:src/xeq.c     **** }
 11762              		.loc 1 1340 2 is_stmt 1 view .LVU3159
1341:src/xeq.c     **** 
 11763              		.loc 1 1341 1 is_stmt 0 view .LVU3160
 11764 0016 5DF8044B 		ldr	r4, [sp], #4
 11765              		.cfi_restore 4
 11766              		.cfi_def_cfa_offset 0
1340:src/xeq.c     **** }
 11767              		.loc 1 1340 2 view .LVU3161
 11768 001a D200     		lsls	r2, r2, #3
 11769              	.LVL890:
1340:src/xeq.c     **** }
 11770              		.loc 1 1340 2 view .LVU3162
 11771 001c FFF7FEBF 		b	xcopy
 11772              	.LVL891:
 11773              	.L875:
1340:src/xeq.c     **** }
 11774              		.loc 1 1340 2 view .LVU3163
 11775              		.align	2
 11776              	.L874:
 11777 0020 00000000 		.word	PersistentRam
 11778              		.cfi_endproc
 11779              	.LFE100:
 11781              		.section	.text.zero_X,"ax",%progbits
 11782              		.align	1
 11783              		.p2align 2,,3
 11784              		.global	zero_X
 11785              		.syntax unified
 11786              		.thumb
ARM GAS  /tmp/ccK8IvWa.s 			page 355


 11787              		.thumb_func
 11788              		.fpu fpv4-sp-d16
 11790              	zero_X:
 11791              	.LFB102:
1350:src/xeq.c     **** 	set_zero(StackBase);
 11792              		.loc 1 1350 19 is_stmt 1 view -0
 11793              		.cfi_startproc
 11794              		@ args = 0, pretend = 0, frame = 0
 11795              		@ frame_needed = 0, uses_anonymous_args = 0
 11796              		@ link register save eliminated.
1351:src/xeq.c     **** }
 11797              		.loc 1 1351 2 view .LVU3165
 11798              	.LVL892:
 11799              	.LBB2317:
 11800              	.LBI2317:
1346:src/xeq.c     **** 	zero_regs(x, 1);
 11801              		.loc 1 1346 13 view .LVU3166
 11802              	.LBE2317:
1347:src/xeq.c     **** }
 11803              		.loc 1 1347 2 view .LVU3167
 11804              	.LBB2328:
 11805              	.LBB2318:
 11806              	.LBI2318:
1318:src/xeq.c     **** #if 0
 11807              		.loc 1 1318 6 view .LVU3168
 11808              	.LBB2319:
1333:src/xeq.c     **** #endif
 11809              		.loc 1 1333 2 view .LVU3169
 11810              	.LBB2320:
 11811              	.LBI2320:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 11812              		.loc 1 918 5 view .LVU3170
 11813              	.LBB2321:
 919:src/xeq.c     **** }
 11814              		.loc 1 919 2 view .LVU3171
 919:src/xeq.c     **** }
 11815              		.loc 1 919 24 is_stmt 0 view .LVU3172
 11816 0000 074B     		ldr	r3, .L877
 11817              	.LBE2321:
 11818              	.LBE2320:
 11819              	.LBE2319:
 11820              	.LBE2318:
 11821              	.LBE2328:
1351:src/xeq.c     **** }
 11822              		.loc 1 1351 2 view .LVU3173
 11823 0002 084A     		ldr	r2, .L877+4
 11824              	.LBB2329:
 11825              	.LBB2327:
 11826              	.LBB2326:
 11827              	.LBB2324:
 11828              	.LBB2322:
 919:src/xeq.c     **** }
 11829              		.loc 1 919 24 view .LVU3174
 11830 0004 B3F8E837 		ldrh	r3, [r3, #2024]
 11831              	.LBE2322:
 11832              	.LBE2324:
1333:src/xeq.c     **** #endif
ARM GAS  /tmp/ccK8IvWa.s 			page 356


 11833              		.loc 1 1333 2 view .LVU3175
 11834 0008 1068     		ldr	r0, [r2]
 11835              	.LBB2325:
 11836              	.LBB2323:
 919:src/xeq.c     **** }
 11837              		.loc 1 919 24 view .LVU3176
 11838 000a 44F20102 		movw	r2, #16385
 11839              	.LVL893:
 919:src/xeq.c     **** }
 11840              		.loc 1 919 24 view .LVU3177
 11841 000e 1A40     		ands	r2, r2, r3
 11842              	.LBE2323:
 11843              	.LBE2325:
1333:src/xeq.c     **** #endif
 11844              		.loc 1 1333 2 view .LVU3178
 11845 0010 B2F5804F 		cmp	r2, #16384
 11846 0014 0CBF     		ite	eq
 11847 0016 1022     		moveq	r2, #16
 11848 0018 0822     		movne	r2, #8
 11849 001a 0021     		movs	r1, #0
 11850 001c FFF7FEBF 		b	xset
 11851              	.LVL894:
 11852              	.L878:
1333:src/xeq.c     **** #endif
 11853              		.loc 1 1333 2 view .LVU3179
 11854              		.align	2
 11855              	.L877:
 11856 0020 00000000 		.word	PersistentRam
 11857 0024 00000000 		.word	StackBase
 11858              	.LBE2326:
 11859              	.LBE2327:
 11860              	.LBE2329:
 11861              		.cfi_endproc
 11862              	.LFE102:
 11864              		.section	.text.zero_Y,"ax",%progbits
 11865              		.align	1
 11866              		.p2align 2,,3
 11867              		.global	zero_Y
 11868              		.syntax unified
 11869              		.thumb
 11870              		.thumb_func
 11871              		.fpu fpv4-sp-d16
 11873              	zero_Y:
 11874              	.LFB103:
1354:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 11875              		.loc 1 1354 19 is_stmt 1 view -0
 11876              		.cfi_startproc
 11877              		@ args = 0, pretend = 0, frame = 0
 11878              		@ frame_needed = 0, uses_anonymous_args = 0
1355:src/xeq.c     **** }
 11879              		.loc 1 1355 2 view .LVU3181
1354:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 11880              		.loc 1 1354 19 is_stmt 0 view .LVU3182
 11881 0000 08B5     		push	{r3, lr}
 11882              		.cfi_def_cfa_offset 8
 11883              		.cfi_offset 3, -8
 11884              		.cfi_offset 14, -4
ARM GAS  /tmp/ccK8IvWa.s 			page 357


1355:src/xeq.c     **** }
 11885              		.loc 1 1355 2 view .LVU3183
 11886 0002 6520     		movs	r0, #101
 11887 0004 FFF7FEFF 		bl	get_reg_n
 11888              	.LVL895:
 11889              	.LBB2330:
 11890              	.LBI2330:
1346:src/xeq.c     **** 	zero_regs(x, 1);
 11891              		.loc 1 1346 13 is_stmt 1 view .LVU3184
 11892              	.LBE2330:
1347:src/xeq.c     **** }
 11893              		.loc 1 1347 2 view .LVU3185
 11894              	.LBB2337:
 11895              	.LBB2331:
 11896              	.LBI2331:
1318:src/xeq.c     **** #if 0
 11897              		.loc 1 1318 6 view .LVU3186
 11898              	.LBB2332:
1333:src/xeq.c     **** #endif
 11899              		.loc 1 1333 2 view .LVU3187
 11900              	.LBB2333:
 11901              	.LBI2333:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 11902              		.loc 1 918 5 view .LVU3188
 11903              	.LBB2334:
 919:src/xeq.c     **** }
 11904              		.loc 1 919 2 view .LVU3189
 919:src/xeq.c     **** }
 11905              		.loc 1 919 24 is_stmt 0 view .LVU3190
 11906 0008 074B     		ldr	r3, .L881
 11907 000a B3F8E837 		ldrh	r3, [r3, #2024]
 11908 000e 44F20102 		movw	r2, #16385
 11909 0012 1A40     		ands	r2, r2, r3
 11910              	.LBE2334:
 11911              	.LBE2333:
1333:src/xeq.c     **** #endif
 11912              		.loc 1 1333 2 view .LVU3191
 11913 0014 B2F5804F 		cmp	r2, #16384
 11914 0018 0CBF     		ite	eq
 11915 001a 1022     		moveq	r2, #16
 11916 001c 0822     		movne	r2, #8
 11917              	.LBE2332:
 11918              	.LBE2331:
 11919              	.LBE2337:
1356:src/xeq.c     **** 
 11920              		.loc 1 1356 1 view .LVU3192
 11921 001e BDE80840 		pop	{r3, lr}
 11922              		.cfi_restore 14
 11923              		.cfi_restore 3
 11924              		.cfi_def_cfa_offset 0
 11925              	.LBB2338:
 11926              	.LBB2336:
 11927              	.LBB2335:
1333:src/xeq.c     **** #endif
 11928              		.loc 1 1333 2 view .LVU3193
 11929 0022 0021     		movs	r1, #0
 11930 0024 FFF7FEBF 		b	xset
ARM GAS  /tmp/ccK8IvWa.s 			page 358


 11931              	.LVL896:
 11932              	.L882:
1333:src/xeq.c     **** #endif
 11933              		.loc 1 1333 2 view .LVU3194
 11934              		.align	2
 11935              	.L881:
 11936 0028 00000000 		.word	PersistentRam
 11937              	.LBE2335:
 11938              	.LBE2336:
 11939              	.LBE2338:
 11940              		.cfi_endproc
 11941              	.LFE103:
 11943              		.section	.text.clrx,"ax",%progbits
 11944              		.align	1
 11945              		.p2align 2,,3
 11946              		.global	clrx
 11947              		.syntax unified
 11948              		.thumb
 11949              		.thumb_func
 11950              		.fpu fpv4-sp-d16
 11952              	clrx:
 11953              	.LVL897:
 11954              	.LFB104:
1358:src/xeq.c     **** 	zero_X();
 11955              		.loc 1 1358 26 is_stmt 1 view -0
 11956              		.cfi_startproc
 11957              		@ args = 0, pretend = 0, frame = 0
 11958              		@ frame_needed = 0, uses_anonymous_args = 0
1359:src/xeq.c     **** 	clr_lift();
 11959              		.loc 1 1359 2 view .LVU3196
1358:src/xeq.c     **** 	zero_X();
 11960              		.loc 1 1358 26 is_stmt 0 view .LVU3197
 11961 0000 08B5     		push	{r3, lr}
 11962              		.cfi_def_cfa_offset 8
 11963              		.cfi_offset 3, -8
 11964              		.cfi_offset 14, -4
1359:src/xeq.c     **** 	clr_lift();
 11965              		.loc 1 1359 2 view .LVU3198
 11966 0002 FFF7FEFF 		bl	zero_X
 11967              	.LVL898:
1360:src/xeq.c     **** }
 11968              		.loc 1 1360 2 is_stmt 1 view .LVU3199
 11969              	.LBB2339:
 11970              	.LBI2339:
 738:src/xeq.c     ****     State2.state_lift = 0;
 11971              		.loc 1 738 13 view .LVU3200
 11972              	.LBB2340:
 739:src/xeq.c     **** }
 11973              		.loc 1 739 5 view .LVU3201
 739:src/xeq.c     **** }
 11974              		.loc 1 739 23 is_stmt 0 view .LVU3202
 11975 0006 034B     		ldr	r3, .L885
 11976 0008 DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 11977 000a 6FF38612 		bfc	r2, #6, #1
 11978 000e DA75     		strb	r2, [r3, #23]
 11979              	.LBE2340:
 11980              	.LBE2339:
ARM GAS  /tmp/ccK8IvWa.s 			page 359


1361:src/xeq.c     **** 
 11981              		.loc 1 1361 1 view .LVU3203
 11982 0010 08BD     		pop	{r3, pc}
 11983              	.L886:
 11984 0012 00BF     		.align	2
 11985              	.L885:
 11986 0014 00000000 		.word	StateWhileOn
 11987              		.cfi_endproc
 11988              	.LFE104:
 11990              		.section	.text.clrstk,"ax",%progbits
 11991              		.align	1
 11992              		.p2align 2,,3
 11993              		.global	clrstk
 11994              		.syntax unified
 11995              		.thumb
 11996              		.thumb_func
 11997              		.fpu fpv4-sp-d16
 11999              	clrstk:
 12000              	.LVL899:
 12001              	.LFB105:
1365:src/xeq.c     **** 	zero_regs(StackBase, stack_size());
 12002              		.loc 1 1365 28 is_stmt 1 view -0
 12003              		.cfi_startproc
 12004              		@ args = 0, pretend = 0, frame = 0
 12005              		@ frame_needed = 0, uses_anonymous_args = 0
1366:src/xeq.c     **** 	set_lift();
 12006              		.loc 1 1366 2 view .LVU3205
1365:src/xeq.c     **** 	zero_regs(StackBase, stack_size());
 12007              		.loc 1 1365 28 is_stmt 0 view .LVU3206
 12008 0000 08B5     		push	{r3, lr}
 12009              		.cfi_def_cfa_offset 8
 12010              		.cfi_offset 3, -8
 12011              		.cfi_offset 14, -4
 12012              	.LBB2341:
 12013              	.LBB2342:
 690:src/xeq.c     **** 		return 4;
 12014              		.loc 1 690 6 view .LVU3207
 12015 0002 164B     		ldr	r3, .L894
 12016              	.LBE2342:
 12017              	.LBE2341:
1366:src/xeq.c     **** 	set_lift();
 12018              		.loc 1 1366 2 view .LVU3208
 12019 0004 1649     		ldr	r1, .L894+4
 12020              	.LBB2348:
 12021              	.LBB2345:
 690:src/xeq.c     **** 		return 4;
 12022              		.loc 1 690 6 view .LVU3209
 12023 0006 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 12024              	.LBE2345:
 12025              	.LBE2348:
1366:src/xeq.c     **** 	set_lift();
 12026              		.loc 1 1366 2 view .LVU3210
 12027 000a 0868     		ldr	r0, [r1]
 12028              	.LVL900:
 12029              	.LBB2349:
 12030              	.LBI2341:
 689:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
ARM GAS  /tmp/ccK8IvWa.s 			page 360


 12031              		.loc 1 689 5 is_stmt 1 view .LVU3211
 12032              	.LBB2346:
 690:src/xeq.c     **** 		return 4;
 12033              		.loc 1 690 2 view .LVU3212
 690:src/xeq.c     **** 		return 4;
 12034              		.loc 1 690 5 is_stmt 0 view .LVU3213
 12035 000c 1207     		lsls	r2, r2, #28
 12036 000e 22D5     		bpl	.L889
 12037              	.LBB2343:
 12038              	.LBI2343:
 181:src/xeq.c     **** 	return isXROM(state_pc());
 12039              		.loc 1 181 5 is_stmt 1 view .LVU3214
 12040              	.LBB2344:
 182:src/xeq.c     **** }
 12041              		.loc 1 182 2 view .LVU3215
 182:src/xeq.c     **** }
 12042              		.loc 1 182 9 is_stmt 0 view .LVU3216
 12043 0010 B3F8E027 		ldrh	r2, [r3, #2016]
 12044              	.LBE2344:
 12045              	.LBE2343:
 690:src/xeq.c     **** 		return 4;
 12046              		.loc 1 690 27 view .LVU3217
 12047 0014 920B     		lsrs	r2, r2, #14
 12048 0016 032A     		cmp	r2, #3
 12049 0018 15D0     		beq	.L893
 692:src/xeq.c     **** }
 12050              		.loc 1 692 9 view .LVU3218
 12051 001a 0822     		movs	r2, #8
 12052              	.L888:
 12053              	.LVL901:
 692:src/xeq.c     **** }
 12054              		.loc 1 692 9 view .LVU3219
 12055              	.LBE2346:
 12056              	.LBE2349:
 12057              	.LBB2350:
 12058              	.LBI2350:
1318:src/xeq.c     **** #if 0
 12059              		.loc 1 1318 6 is_stmt 1 view .LVU3220
 12060              	.LBB2351:
1333:src/xeq.c     **** #endif
 12061              		.loc 1 1333 2 view .LVU3221
 12062              	.LBB2352:
 12063              	.LBI2352:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12064              		.loc 1 918 5 view .LVU3222
 12065              	.LBB2353:
 919:src/xeq.c     **** }
 12066              		.loc 1 919 2 view .LVU3223
 919:src/xeq.c     **** }
 12067              		.loc 1 919 24 is_stmt 0 view .LVU3224
 12068 001c B3F8E817 		ldrh	r1, [r3, #2024]
 12069 0020 44F20103 		movw	r3, #16385
 12070 0024 0B40     		ands	r3, r3, r1
 12071 0026 A3F58043 		sub	r3, r3, #16384
 12072 002a B3FA83F3 		clz	r3, r3
 12073 002e 5B09     		lsrs	r3, r3, #5
 12074              	.LBE2353:
ARM GAS  /tmp/ccK8IvWa.s 			page 361


 12075              	.LBE2352:
1333:src/xeq.c     **** #endif
 12076              		.loc 1 1333 24 view .LVU3225
 12077 0030 0333     		adds	r3, r3, #3
1333:src/xeq.c     **** #endif
 12078              		.loc 1 1333 2 view .LVU3226
 12079 0032 9A40     		lsls	r2, r2, r3
 12080              	.LVL902:
1333:src/xeq.c     **** #endif
 12081              		.loc 1 1333 2 view .LVU3227
 12082 0034 0021     		movs	r1, #0
 12083 0036 FFF7FEFF 		bl	xset
 12084              	.LVL903:
1333:src/xeq.c     **** #endif
 12085              		.loc 1 1333 2 view .LVU3228
 12086              	.LBE2351:
 12087              	.LBE2350:
1367:src/xeq.c     **** }
 12088              		.loc 1 1367 2 is_stmt 1 view .LVU3229
 12089              	.LBB2354:
 12090              	.LBI2354:
 734:src/xeq.c     ****     State2.state_lift = 1;
 12091              		.loc 1 734 6 view .LVU3230
 12092              	.LBB2355:
 735:src/xeq.c     **** }
 12093              		.loc 1 735 5 view .LVU3231
 735:src/xeq.c     **** }
 12094              		.loc 1 735 23 is_stmt 0 view .LVU3232
 12095 003a 0A4A     		ldr	r2, .L894+8
 12096 003c D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 12097 003e 43F04003 		orr	r3, r3, #64
 12098 0042 D375     		strb	r3, [r2, #23]
 12099              	.LBE2355:
 12100              	.LBE2354:
1368:src/xeq.c     **** 
 12101              		.loc 1 1368 1 view .LVU3233
 12102 0044 08BD     		pop	{r3, pc}
 12103              	.L893:
 12104              	.LBB2356:
 12105              	.LBB2347:
 690:src/xeq.c     **** 		return 4;
 12106              		.loc 1 690 44 view .LVU3234
 12107 0046 084A     		ldr	r2, .L894+12
 690:src/xeq.c     **** 		return 4;
 12108              		.loc 1 690 41 view .LVU3235
 12109 0048 92F90120 		ldrsb	r2, [r2, #1]
 12110 004c 002A     		cmp	r2, #0
 691:src/xeq.c     **** 	return 8;
 12111              		.loc 1 691 10 view .LVU3236
 12112 004e B4BF     		ite	lt
 12113 0050 0822     		movlt	r2, #8
 12114 0052 0422     		movge	r2, #4
 12115 0054 E2E7     		b	.L888
 12116              	.L889:
 12117 0056 0422     		movs	r2, #4
 12118 0058 E0E7     		b	.L888
 12119              	.L895:
ARM GAS  /tmp/ccK8IvWa.s 			page 362


 12120 005a 00BF     		.align	2
 12121              	.L894:
 12122 005c 00000000 		.word	PersistentRam
 12123 0060 00000000 		.word	StackBase
 12124 0064 00000000 		.word	StateWhileOn
 12125 0068 00000000 		.word	XromParams
 12126              	.LBE2347:
 12127              	.LBE2356:
 12128              		.cfi_endproc
 12129              	.LFE105:
 12131              		.section	.text.clrreg,"ax",%progbits
 12132              		.align	1
 12133              		.p2align 2,,3
 12134              		.global	clrreg
 12135              		.syntax unified
 12136              		.thumb
 12137              		.thumb_func
 12138              		.fpu fpv4-sp-d16
 12140              	clrreg:
 12141              	.LVL904:
 12142              	.LFB106:
1373:src/xeq.c     **** 	const int local = local_regs();
 12143              		.loc 1 1373 28 is_stmt 1 view -0
 12144              		.cfi_startproc
 12145              		@ args = 0, pretend = 0, frame = 0
 12146              		@ frame_needed = 0, uses_anonymous_args = 0
1374:src/xeq.c     **** 	process_cmdline_set_lift();
 12147              		.loc 1 1374 2 view .LVU3238
 12148              	.LBB2357:
 12149              	.LBI2357:
 229:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 12150              		.loc 1 229 5 view .LVU3239
 12151              	.LBE2357:
 230:src/xeq.c     **** }
 12152              		.loc 1 230 2 view .LVU3240
 12153              	.LBB2382:
 12154              	.LBB2358:
 12155              	.LBI2358:
 221:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 12156              		.loc 1 221 5 view .LVU3241
 12157              	.LBB2359:
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 12158              		.loc 1 222 2 view .LVU3242
 12159              	.LBB2360:
 12160              	.LBI2360:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12161              		.loc 1 918 5 view .LVU3243
 12162              	.LBB2361:
 919:src/xeq.c     **** }
 12163              		.loc 1 919 2 view .LVU3244
 919:src/xeq.c     **** }
 12164              		.loc 1 919 2 is_stmt 0 view .LVU3245
 12165              	.LBE2361:
 12166              	.LBE2360:
 223:src/xeq.c     **** }
 12167              		.loc 1 223 2 is_stmt 1 view .LVU3246
 12168              	.LBB2364:
ARM GAS  /tmp/ccK8IvWa.s 			page 363


 12169              	.LBI2364:
 213:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 12170              		.loc 1 213 5 view .LVU3247
 12171              	.LBB2365:
 214:src/xeq.c     **** }
 12172              		.loc 1 214 2 view .LVU3248
 12173              	.LBE2365:
 12174              	.LBE2364:
 12175              	.LBE2359:
 12176              	.LBE2358:
 12177              	.LBE2382:
1373:src/xeq.c     **** 	const int local = local_regs();
 12178              		.loc 1 1373 28 is_stmt 0 view .LVU3249
 12179 0000 70B5     		push	{r4, r5, r6, lr}
 12180              		.cfi_def_cfa_offset 16
 12181              		.cfi_offset 4, -16
 12182              		.cfi_offset 5, -12
 12183              		.cfi_offset 6, -8
 12184              		.cfi_offset 14, -4
 12185              	.LBB2383:
 12186              	.LBB2380:
 12187              	.LBB2378:
 12188              	.LBB2371:
 12189              	.LBB2366:
 214:src/xeq.c     **** }
 12190              		.loc 1 214 9 view .LVU3250
 12191 0002 404C     		ldr	r4, .L912
 12192 0004 B4F9DE27 		ldrsh	r2, [r4, #2014]
 214:src/xeq.c     **** }
 12193              		.loc 1 214 57 view .LVU3251
 12194 0008 002A     		cmp	r2, #0
 12195 000a 52DB     		blt	.L908
 12196 000c 0026     		movs	r6, #0
 12197              	.LVL905:
 12198              	.L897:
 214:src/xeq.c     **** }
 12199              		.loc 1 214 57 view .LVU3252
 12200              	.LBE2366:
 12201              	.LBE2371:
 12202              	.LBE2378:
 12203              	.LBE2380:
 12204              	.LBE2383:
1375:src/xeq.c     **** 
 12205              		.loc 1 1375 2 is_stmt 1 view .LVU3253
 12206              	.LBB2384:
 12207              	.LBI2384:
1132:src/xeq.c     **** 	process_cmdline();
 12208              		.loc 1 1132 6 view .LVU3254
 12209              	.LBB2385:
1133:src/xeq.c     **** 	set_lift();
 12210              		.loc 1 1133 2 view .LVU3255
 12211 000e FFF7FEFF 		bl	process_cmdline
 12212              	.LVL906:
1134:src/xeq.c     **** }
 12213              		.loc 1 1134 2 view .LVU3256
 12214              	.LBB2386:
 12215              	.LBI2386:
ARM GAS  /tmp/ccK8IvWa.s 			page 364


 734:src/xeq.c     ****     State2.state_lift = 1;
 12216              		.loc 1 734 6 view .LVU3257
 12217              	.LBB2387:
 735:src/xeq.c     **** }
 12218              		.loc 1 735 5 view .LVU3258
 735:src/xeq.c     **** }
 12219              		.loc 1 735 23 is_stmt 0 view .LVU3259
 12220 0012 3D4A     		ldr	r2, .L912+4
 12221 0014 D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 12222 0016 43F04003 		orr	r3, r3, #64
 12223 001a D375     		strb	r3, [r2, #23]
 12224              	.LBE2387:
 12225              	.LBE2386:
 12226              	.LBE2385:
 12227              	.LBE2384:
1378:src/xeq.c     **** 
 12228              		.loc 1 1378 2 is_stmt 1 view .LVU3260
 12229 001c 0020     		movs	r0, #0
 12230 001e FFF7FEFF 		bl	get_reg_n
 12231              	.LVL907:
 12232              	.LBB2388:
 12233              	.LBB2389:
 12234              	.LBB2390:
 12235              	.LBB2391:
 12236              	.LBB2392:
 12237              	.LBB2393:
 919:src/xeq.c     **** }
 12238              		.loc 1 919 24 is_stmt 0 view .LVU3261
 12239 0022 B4F8E827 		ldrh	r2, [r4, #2024]
 12240 0026 44F20101 		movw	r1, #16385
 12241 002a 1140     		ands	r1, r1, r2
 12242              	.LBE2393:
 12243              	.LBE2392:
 238:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 12244              		.loc 1 238 5 view .LVU3262
 12245 002c B1F5804F 		cmp	r1, #16384
 12246              	.LBE2391:
 12247              	.LBE2390:
 12248              	.LBE2389:
 12249              	.LBE2388:
1378:src/xeq.c     **** 
 12250              		.loc 1 1378 2 view .LVU3263
 12251 0030 0546     		mov	r5, r0
 12252              	.LBB2400:
 12253              	.LBI2388:
 249:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 12254              		.loc 1 249 14 is_stmt 1 view .LVU3264
 12255              	.LBB2398:
 250:src/xeq.c     **** }
 12256              		.loc 1 250 2 view .LVU3265
 12257              	.LVL908:
 12258              	.LBB2397:
 12259              	.LBI2390:
 237:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 12260              		.loc 1 237 14 view .LVU3266
 12261              	.LBB2396:
 238:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
ARM GAS  /tmp/ccK8IvWa.s 			page 365


 12262              		.loc 1 238 2 view .LVU3267
 12263              	.LBB2395:
 12264              	.LBI2392:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12265              		.loc 1 918 5 view .LVU3268
 12266              	.LBB2394:
 919:src/xeq.c     **** }
 12267              		.loc 1 919 2 view .LVU3269
 12268              	.LBE2394:
 12269              	.LBE2395:
 238:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 12270              		.loc 1 238 5 is_stmt 0 view .LVU3270
 12271 0032 64D0     		beq	.L909
 243:src/xeq.c     **** }
 12272              		.loc 1 243 3 is_stmt 1 view .LVU3271
 243:src/xeq.c     **** }
 12273              		.loc 1 243 10 is_stmt 0 view .LVU3272
 12274 0034 94F8CF07 		ldrb	r0, [r4, #1999]	@ zero_extendqisi2
 12275              	.L899:
 12276              	.LVL909:
 243:src/xeq.c     **** }
 12277              		.loc 1 243 10 view .LVU3273
 12278              	.LBE2396:
 12279              	.LBE2397:
 12280              	.LBE2398:
 12281              	.LBE2400:
 12282              	.LBB2401:
 12283              	.LBI2401:
1318:src/xeq.c     **** #if 0
 12284              		.loc 1 1318 6 is_stmt 1 view .LVU3274
 12285              	.LBB2402:
1333:src/xeq.c     **** #endif
 12286              		.loc 1 1333 2 view .LVU3275
 12287              	.LBB2403:
 12288              	.LBI2403:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12289              		.loc 1 918 5 view .LVU3276
 12290              	.LBB2404:
 919:src/xeq.c     **** }
 12291              		.loc 1 919 2 view .LVU3277
 919:src/xeq.c     **** }
 12292              		.loc 1 919 24 is_stmt 0 view .LVU3278
 12293 0038 A1F58041 		sub	r1, r1, #16384
 12294 003c B1FA81F1 		clz	r1, r1
 12295 0040 4909     		lsrs	r1, r1, #5
 12296              	.LBE2404:
 12297              	.LBE2403:
1333:src/xeq.c     **** #endif
 12298              		.loc 1 1333 24 view .LVU3279
 12299 0042 0331     		adds	r1, r1, #3
1333:src/xeq.c     **** #endif
 12300              		.loc 1 1333 2 view .LVU3280
 12301 0044 00FA01F2 		lsl	r2, r0, r1
 12302 0048 2846     		mov	r0, r5
 12303              	.LVL910:
1333:src/xeq.c     **** #endif
 12304              		.loc 1 1333 2 view .LVU3281
ARM GAS  /tmp/ccK8IvWa.s 			page 366


 12305 004a 0021     		movs	r1, #0
 12306 004c FFF7FEFF 		bl	xset
 12307              	.LVL911:
1333:src/xeq.c     **** #endif
 12308              		.loc 1 1333 2 view .LVU3282
 12309              	.LBE2402:
 12310              	.LBE2401:
1381:src/xeq.c     **** 		zero_regs(get_reg_n(regA_idx), 4);
 12311              		.loc 1 1381 2 is_stmt 1 view .LVU3283
 12312              	.LBB2405:
 12313              	.LBI2405:
 689:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 12314              		.loc 1 689 5 view .LVU3284
 12315              	.LBB2406:
 690:src/xeq.c     **** 		return 4;
 12316              		.loc 1 690 2 view .LVU3285
 690:src/xeq.c     **** 		return 4;
 12317              		.loc 1 690 6 is_stmt 0 view .LVU3286
 12318 0050 94F8EA37 		ldrb	r3, [r4, #2026]	@ zero_extendqisi2
 690:src/xeq.c     **** 		return 4;
 12319              		.loc 1 690 5 view .LVU3287
 12320 0054 1B07     		lsls	r3, r3, #28
 12321 0056 1BD5     		bpl	.L900
 12322              	.LBB2407:
 12323              	.LBI2407:
 181:src/xeq.c     **** 	return isXROM(state_pc());
 12324              		.loc 1 181 5 is_stmt 1 view .LVU3288
 12325              	.LBB2408:
 182:src/xeq.c     **** }
 12326              		.loc 1 182 2 view .LVU3289
 182:src/xeq.c     **** }
 12327              		.loc 1 182 9 is_stmt 0 view .LVU3290
 12328 0058 B4F8E037 		ldrh	r3, [r4, #2016]
 12329              	.LBE2408:
 12330              	.LBE2407:
 690:src/xeq.c     **** 		return 4;
 12331              		.loc 1 690 27 view .LVU3291
 12332 005c 9B0B     		lsrs	r3, r3, #14
 12333 005e 032B     		cmp	r3, #3
 12334 0060 11D0     		beq	.L910
 12335              	.L901:
 12336              	.LBE2406:
 12337              	.LBE2405:
1385:src/xeq.c     **** 
 12338              		.loc 1 1385 2 is_stmt 1 view .LVU3292
 12339 0062 6E20     		movs	r0, #110
 12340 0064 FFF7FEFF 		bl	get_reg_n
 12341              	.LVL912:
 12342              	.LBB2410:
 12343              	.LBI2410:
1318:src/xeq.c     **** #if 0
 12344              		.loc 1 1318 6 view .LVU3293
 12345              	.LBB2411:
1333:src/xeq.c     **** #endif
 12346              		.loc 1 1333 2 view .LVU3294
 12347              	.LBB2412:
 12348              	.LBI2412:
ARM GAS  /tmp/ccK8IvWa.s 			page 367


 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12349              		.loc 1 918 5 view .LVU3295
 12350              	.LBB2413:
 919:src/xeq.c     **** }
 12351              		.loc 1 919 2 view .LVU3296
 919:src/xeq.c     **** }
 12352              		.loc 1 919 24 is_stmt 0 view .LVU3297
 12353 0068 B4F8E827 		ldrh	r2, [r4, #2024]
 12354 006c 44F20105 		movw	r5, #16385
 12355 0070 2A40     		ands	r2, r2, r5
 12356              	.LBE2413:
 12357              	.LBE2412:
1333:src/xeq.c     **** #endif
 12358              		.loc 1 1333 2 view .LVU3298
 12359 0072 B2F5804F 		cmp	r2, #16384
 12360 0076 0CBF     		ite	eq
 12361 0078 2022     		moveq	r2, #32
 12362 007a 1022     		movne	r2, #16
 12363 007c 0021     		movs	r1, #0
 12364 007e FFF7FEFF 		bl	xset
 12365              	.LVL913:
1333:src/xeq.c     **** #endif
 12366              		.loc 1 1333 2 view .LVU3299
 12367              	.LBE2411:
 12368              	.LBE2410:
1388:src/xeq.c     **** 		zero_regs(get_reg_n(LOCAL_REG_BASE), local);
 12369              		.loc 1 1388 2 is_stmt 1 view .LVU3300
1388:src/xeq.c     **** 		zero_regs(get_reg_n(LOCAL_REG_BASE), local);
 12370              		.loc 1 1388 5 is_stmt 0 view .LVU3301
 12371 0082 4EBB     		cbnz	r6, .L911
1390:src/xeq.c     **** 
 12372              		.loc 1 1390 1 view .LVU3302
 12373 0084 70BD     		pop	{r4, r5, r6, pc}
 12374              	.L910:
 12375              	.LBB2414:
 12376              	.LBB2409:
 690:src/xeq.c     **** 		return 4;
 12377              		.loc 1 690 44 view .LVU3303
 12378 0086 214B     		ldr	r3, .L912+8
 690:src/xeq.c     **** 		return 4;
 12379              		.loc 1 690 41 view .LVU3304
 12380 0088 93F90130 		ldrsb	r3, [r3, #1]
 12381 008c 002B     		cmp	r3, #0
 12382 008e E8DB     		blt	.L901
 12383              	.L900:
 691:src/xeq.c     **** 	return 8;
 12384              		.loc 1 691 3 is_stmt 1 view .LVU3305
 12385              	.LBE2409:
 12386              	.LBE2414:
1382:src/xeq.c     **** 
 12387              		.loc 1 1382 3 view .LVU3306
 12388 0090 6820     		movs	r0, #104
 12389 0092 FFF7FEFF 		bl	get_reg_n
 12390              	.LVL914:
 12391              	.LBB2415:
 12392              	.LBI2415:
1318:src/xeq.c     **** #if 0
ARM GAS  /tmp/ccK8IvWa.s 			page 368


 12393              		.loc 1 1318 6 view .LVU3307
 12394              	.LBB2416:
1333:src/xeq.c     **** #endif
 12395              		.loc 1 1333 2 view .LVU3308
 12396              	.LBB2417:
 12397              	.LBI2417:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12398              		.loc 1 918 5 view .LVU3309
 12399              	.LBB2418:
 919:src/xeq.c     **** }
 12400              		.loc 1 919 2 view .LVU3310
 919:src/xeq.c     **** }
 12401              		.loc 1 919 24 is_stmt 0 view .LVU3311
 12402 0096 B4F8E837 		ldrh	r3, [r4, #2024]
 12403 009a 44F20102 		movw	r2, #16385
 12404 009e 1A40     		ands	r2, r2, r3
 12405              	.LBE2418:
 12406              	.LBE2417:
1333:src/xeq.c     **** #endif
 12407              		.loc 1 1333 2 view .LVU3312
 12408 00a0 B2F5804F 		cmp	r2, #16384
 12409 00a4 0CBF     		ite	eq
 12410 00a6 4022     		moveq	r2, #64
 12411 00a8 2022     		movne	r2, #32
 12412 00aa 0021     		movs	r1, #0
 12413 00ac FFF7FEFF 		bl	xset
 12414              	.LVL915:
1335:src/xeq.c     **** 
 12415              		.loc 1 1335 1 view .LVU3313
 12416 00b0 D7E7     		b	.L901
 12417              	.LVL916:
 12418              	.L908:
1335:src/xeq.c     **** 
 12419              		.loc 1 1335 1 view .LVU3314
 12420              	.LBE2416:
 12421              	.LBE2415:
 12422              	.LBB2419:
 12423              	.LBB2381:
 12424              	.LBB2379:
 12425              	.LBB2372:
 12426              	.LBB2367:
 214:src/xeq.c     **** }
 12427              		.loc 1 214 25 view .LVU3315
 12428 00b2 174B     		ldr	r3, .L912+12
 12429              	.LBE2367:
 12430              	.LBE2372:
 12431              	.LBB2373:
 12432              	.LBB2362:
 919:src/xeq.c     **** }
 12433              		.loc 1 919 24 view .LVU3316
 12434 00b4 B4F8E817 		ldrh	r1, [r4, #2024]
 12435              	.LBE2362:
 12436              	.LBE2373:
 12437              	.LBB2374:
 12438              	.LBB2368:
 214:src/xeq.c     **** }
 12439              		.loc 1 214 25 view .LVU3317
ARM GAS  /tmp/ccK8IvWa.s 			page 369


 12440 00b8 1868     		ldr	r0, [r3]
 12441              	.LVL917:
 214:src/xeq.c     **** }
 12442              		.loc 1 214 25 view .LVU3318
 12443              	.LBE2368:
 12444              	.LBE2374:
 12445              	.LBB2375:
 12446              	.LBB2363:
 919:src/xeq.c     **** }
 12447              		.loc 1 919 24 view .LVU3319
 12448 00ba 44F20103 		movw	r3, #16385
 12449              	.LBE2363:
 12450              	.LBE2375:
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 12451              		.loc 1 222 73 view .LVU3320
 12452 00be 0B40     		ands	r3, r3, r1
 12453 00c0 A3F58043 		sub	r3, r3, #16384
 12454              	.LBB2376:
 12455              	.LBB2369:
 214:src/xeq.c     **** }
 12456              		.loc 1 214 57 view .LVU3321
 12457 00c4 30F81260 		ldrh	r6, [r0, r2, lsl #1]
 12458              	.LBE2369:
 12459              	.LBE2376:
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 12460              		.loc 1 222 73 view .LVU3322
 12461 00c8 B3FA83F3 		clz	r3, r3
 12462 00cc 5B09     		lsrs	r3, r3, #5
 12463              	.LBB2377:
 12464              	.LBB2370:
 214:src/xeq.c     **** }
 12465              		.loc 1 214 57 view .LVU3323
 12466 00ce C6F30B06 		ubfx	r6, r6, #0, #12
 12467 00d2 0233     		adds	r3, r3, #2
 12468 00d4 1E41     		asrs	r6, r6, r3
 12469 00d6 9AE7     		b	.L897
 12470              	.LVL918:
 12471              	.L911:
 214:src/xeq.c     **** }
 12472              		.loc 1 214 57 view .LVU3324
 12473              	.LBE2370:
 12474              	.LBE2377:
 12475              	.LBE2379:
 12476              	.LBE2381:
 12477              	.LBE2419:
1389:src/xeq.c     **** }
 12478              		.loc 1 1389 3 is_stmt 1 view .LVU3325
 12479 00d8 7020     		movs	r0, #112
 12480 00da FFF7FEFF 		bl	get_reg_n
 12481              	.LVL919:
 12482              	.LBB2420:
 12483              	.LBI2420:
1318:src/xeq.c     **** #if 0
 12484              		.loc 1 1318 6 view .LVU3326
 12485              	.LBB2421:
1333:src/xeq.c     **** #endif
 12486              		.loc 1 1333 2 view .LVU3327
ARM GAS  /tmp/ccK8IvWa.s 			page 370


 12487              	.LBB2422:
 12488              	.LBI2422:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12489              		.loc 1 918 5 view .LVU3328
 12490              	.LBB2423:
 919:src/xeq.c     **** }
 12491              		.loc 1 919 2 view .LVU3329
 919:src/xeq.c     **** }
 12492              		.loc 1 919 24 is_stmt 0 view .LVU3330
 12493 00de B4F8E827 		ldrh	r2, [r4, #2024]
 12494 00e2 2A40     		ands	r2, r2, r5
 12495 00e4 A2F58042 		sub	r2, r2, #16384
 12496 00e8 B2FA82F2 		clz	r2, r2
 12497 00ec 5209     		lsrs	r2, r2, #5
 12498              	.LBE2423:
 12499              	.LBE2422:
1333:src/xeq.c     **** #endif
 12500              		.loc 1 1333 24 view .LVU3331
 12501 00ee 0332     		adds	r2, r2, #3
1333:src/xeq.c     **** #endif
 12502              		.loc 1 1333 2 view .LVU3332
 12503 00f0 06FA02F2 		lsl	r2, r6, r2
 12504 00f4 0021     		movs	r1, #0
 12505              	.LBE2421:
 12506              	.LBE2420:
1390:src/xeq.c     **** 
 12507              		.loc 1 1390 1 view .LVU3333
 12508 00f6 BDE87040 		pop	{r4, r5, r6, lr}
 12509              		.cfi_remember_state
 12510              		.cfi_restore 14
 12511              		.cfi_restore 6
 12512              		.cfi_restore 5
 12513              		.cfi_restore 4
 12514              		.cfi_def_cfa_offset 0
 12515              	.LBB2425:
 12516              	.LBB2424:
1333:src/xeq.c     **** #endif
 12517              		.loc 1 1333 2 view .LVU3334
 12518 00fa FFF7FEBF 		b	xset
 12519              	.LVL920:
 12520              	.L909:
 12521              		.cfi_restore_state
1333:src/xeq.c     **** #endif
 12522              		.loc 1 1333 2 view .LVU3335
 12523              	.LBE2424:
 12524              	.LBE2425:
 12525              	.LBB2426:
 12526              	.LBB2399:
 12527 00fe FFF7FEFF 		bl	global_regs.part.0
 12528              	.LVL921:
 12529 0102 99E7     		b	.L899
 12530              	.L913:
 12531              		.align	2
 12532              	.L912:
 12533 0104 00000000 		.word	PersistentRam
 12534 0108 00000000 		.word	StateWhileOn
 12535 010c 00000000 		.word	XromParams
ARM GAS  /tmp/ccK8IvWa.s 			page 371


 12536 0110 00000000 		.word	RetStk
 12537              	.LBE2399:
 12538              	.LBE2426:
 12539              		.cfi_endproc
 12540              	.LFE106:
 12542              		.section	.text.clrretstk,"ax",%progbits
 12543              		.align	1
 12544              		.p2align 2,,3
 12545              		.global	clrretstk
 12546              		.syntax unified
 12547              		.thumb
 12548              		.thumb_func
 12549              		.fpu fpv4-sp-d16
 12551              	clrretstk:
 12552              	.LFB107:
1395:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 12553              		.loc 1 1395 22 is_stmt 1 view -0
 12554              		.cfi_startproc
 12555              		@ args = 0, pretend = 0, frame = 0
 12556              		@ frame_needed = 0, uses_anonymous_args = 0
 12557              		@ link register save eliminated.
1396:src/xeq.c     **** }
 12558              		.loc 1 1396 2 view .LVU3337
1396:src/xeq.c     **** }
 12559              		.loc 1 1396 24 is_stmt 0 view .LVU3338
 12560 0000 034B     		ldr	r3, .L915
 12561 0002 0022     		movs	r2, #0
 12562 0004 A3F8DE27 		strh	r2, [r3, #2014]	@ movhi
1396:src/xeq.c     **** }
 12563              		.loc 1 1396 12 view .LVU3339
 12564 0008 A3F8E227 		strh	r2, [r3, #2018]	@ movhi
1397:src/xeq.c     **** 
 12565              		.loc 1 1397 1 view .LVU3340
 12566 000c 7047     		bx	lr
 12567              	.L916:
 12568 000e 00BF     		.align	2
 12569              	.L915:
 12570 0010 00000000 		.word	PersistentRam
 12571              		.cfi_endproc
 12572              	.LFE107:
 12574              		.section	.text.clrretstk_pc,"ax",%progbits
 12575              		.align	1
 12576              		.p2align 2,,3
 12577              		.global	clrretstk_pc
 12578              		.syntax unified
 12579              		.thumb
 12580              		.thumb_func
 12581              		.fpu fpv4-sp-d16
 12583              	clrretstk_pc:
 12584              	.LFB108:
1399:src/xeq.c     **** 	clrretstk();
 12585              		.loc 1 1399 25 is_stmt 1 view -0
 12586              		.cfi_startproc
 12587              		@ args = 0, pretend = 0, frame = 0
 12588              		@ frame_needed = 0, uses_anonymous_args = 0
1400:src/xeq.c     **** 	raw_set_pc(0);
 12589              		.loc 1 1400 2 view .LVU3342
ARM GAS  /tmp/ccK8IvWa.s 			page 372


 12590              	.LBB2427:
 12591              	.LBI2427:
1395:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 12592              		.loc 1 1395 6 view .LVU3343
 12593              	.LBB2428:
1396:src/xeq.c     **** }
 12594              		.loc 1 1396 2 view .LVU3344
 12595              	.LBE2428:
 12596              	.LBE2427:
1401:src/xeq.c     **** 	update_program_bounds(1);
 12597              		.loc 1 1401 2 view .LVU3345
 12598              	.LVL922:
 12599              	.LBB2431:
 12600              	.LBI2431:
 278:src/xeq.c     **** 	State.pc = pc;
 12601              		.loc 1 278 13 view .LVU3346
 12602              	.LBB2432:
 279:src/xeq.c     **** 	update_program_bounds(0);
 12603              		.loc 1 279 2 view .LVU3347
 12604              	.LBE2432:
 12605              	.LBE2431:
1399:src/xeq.c     **** 	clrretstk();
 12606              		.loc 1 1399 25 is_stmt 0 view .LVU3348
 12607 0000 08B5     		push	{r3, lr}
 12608              		.cfi_def_cfa_offset 8
 12609              		.cfi_offset 3, -8
 12610              		.cfi_offset 14, -4
 12611              	.LBB2435:
 12612              	.LBB2429:
1396:src/xeq.c     **** }
 12613              		.loc 1 1396 24 view .LVU3349
 12614 0002 064B     		ldr	r3, .L919
 12615 0004 0020     		movs	r0, #0
 12616              	.LBE2429:
 12617              	.LBE2435:
 12618              	.LBB2436:
 12619              	.LBB2433:
 279:src/xeq.c     **** 	update_program_bounds(0);
 12620              		.loc 1 279 11 view .LVU3350
 12621 0006 C3F8E007 		str	r0, [r3, #2016]
 280:src/xeq.c     **** }
 12622              		.loc 1 280 2 is_stmt 1 view .LVU3351
 12623              	.LBE2433:
 12624              	.LBE2436:
 12625              	.LBB2437:
 12626              	.LBB2430:
1396:src/xeq.c     **** }
 12627              		.loc 1 1396 24 is_stmt 0 view .LVU3352
 12628 000a A3F8DE07 		strh	r0, [r3, #2014]	@ movhi
 12629              	.LBE2430:
 12630              	.LBE2437:
 12631              	.LBB2438:
 12632              	.LBB2434:
 280:src/xeq.c     **** }
 12633              		.loc 1 280 2 view .LVU3353
 12634 000e FFF7FEFF 		bl	update_program_bounds
 12635              	.LVL923:
ARM GAS  /tmp/ccK8IvWa.s 			page 373


 280:src/xeq.c     **** }
 12636              		.loc 1 280 2 view .LVU3354
 12637              	.LBE2434:
 12638              	.LBE2438:
1402:src/xeq.c     **** }
 12639              		.loc 1 1402 2 is_stmt 1 view .LVU3355
1403:src/xeq.c     **** 
 12640              		.loc 1 1403 1 is_stmt 0 view .LVU3356
 12641 0012 BDE80840 		pop	{r3, lr}
 12642              		.cfi_restore 14
 12643              		.cfi_restore 3
 12644              		.cfi_def_cfa_offset 0
1402:src/xeq.c     **** }
 12645              		.loc 1 1402 2 view .LVU3357
 12646 0016 0120     		movs	r0, #1
 12647 0018 FFF7FEBF 		b	update_program_bounds
 12648              	.LVL924:
 12649              	.L920:
 12650              		.align	2
 12651              	.L919:
 12652 001c 00000000 		.word	PersistentRam
 12653              		.cfi_endproc
 12654              	.LFE108:
 12656              		.section	.text.cmdconst,"ax",%progbits
 12657              		.align	1
 12658              		.p2align 2,,3
 12659              		.global	cmdconst
 12660              		.syntax unified
 12661              		.thumb
 12662              		.thumb_func
 12663              		.fpu fpv4-sp-d16
 12665              	cmdconst:
 12666              	.LVL925:
 12667              	.LFB109:
1409:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 12668              		.loc 1 1409 47 is_stmt 1 view -0
 12669              		.cfi_startproc
 12670              		@ args = 0, pretend = 0, frame = 0
 12671              		@ frame_needed = 0, uses_anonymous_args = 0
1411:src/xeq.c     **** #else
 12672              		.loc 1 1411 2 view .LVU3359
1409:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 12673              		.loc 1 1409 47 is_stmt 0 view .LVU3360
 12674 0000 70B5     		push	{r4, r5, r6, lr}
 12675              		.cfi_def_cfa_offset 16
 12676              		.cfi_offset 4, -16
 12677              		.cfi_offset 5, -12
 12678              		.cfi_offset 6, -8
 12679              		.cfi_offset 14, -4
1411:src/xeq.c     **** #else
 12680              		.loc 1 1411 5 view .LVU3361
 12681 0002 01F0FD03 		and	r3, r1, #253
 12682 0006 882B     		cmp	r3, #136
1409:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 12683              		.loc 1 1409 47 view .LVU3362
 12684 0008 82B0     		sub	sp, sp, #8
 12685              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccK8IvWa.s 			page 374


1409:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 12686              		.loc 1 1409 47 view .LVU3363
 12687 000a 0C46     		mov	r4, r1
 12688 000c 0646     		mov	r6, r0
1411:src/xeq.c     **** #else
 12689              		.loc 1 1411 5 view .LVU3364
 12690 000e 08D0     		beq	.L922
1411:src/xeq.c     **** #else
 12691              		.loc 1 1411 30 discriminator 1 view .LVU3365
 12692 0010 0129     		cmp	r1, #1
 12693 0012 06D0     		beq	.L922
1419:src/xeq.c     **** 
 12694              		.loc 1 1419 3 is_stmt 1 view .LVU3366
 12695              	.LBB2464:
 12696              	.LBI2464:
 724:src/xeq.c     **** 	if (get_lift())
 12697              		.loc 1 724 6 view .LVU3367
 12698              	.LBB2465:
 725:src/xeq.c     **** 		lift();
 12699              		.loc 1 725 2 view .LVU3368
 12700              	.LBB2466:
 12701              	.LBI2466:
 720:src/xeq.c     **** 	return State2.state_lift;
 12702              		.loc 1 720 12 view .LVU3369
 12703              	.LBB2467:
 721:src/xeq.c     **** }
 12704              		.loc 1 721 2 view .LVU3370
 721:src/xeq.c     **** }
 12705              		.loc 1 721 15 is_stmt 0 view .LVU3371
 12706 0014 264B     		ldr	r3, .L943
 12707 0016 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 12708              	.LBE2467:
 12709              	.LBE2466:
 725:src/xeq.c     **** 		lift();
 12710              		.loc 1 725 5 view .LVU3372
 12711 0018 5A06     		lsls	r2, r3, #25
 12712 001a 0FD5     		bpl	.L925
 726:src/xeq.c     **** }
 12713              		.loc 1 726 3 is_stmt 1 view .LVU3373
 12714 001c FFF7FEFF 		bl	lift
 12715              	.LVL926:
 726:src/xeq.c     **** }
 12716              		.loc 1 726 3 is_stmt 0 view .LVU3374
 12717 0020 0CE0     		b	.L925
 12718              	.LVL927:
 12719              	.L922:
 726:src/xeq.c     **** }
 12720              		.loc 1 726 3 view .LVU3375
 12721              	.LBE2465:
 12722              	.LBE2464:
1415:src/xeq.c     **** 		zero_Y();
 12723              		.loc 1 1415 3 is_stmt 1 view .LVU3376
 12724              	.LBB2468:
 12725              	.LBI2468:
 729:src/xeq.c     **** 	lift_if_enabled();
 12726              		.loc 1 729 13 view .LVU3377
 12727              	.LBB2469:
ARM GAS  /tmp/ccK8IvWa.s 			page 375


 730:src/xeq.c     **** 	lift();
 12728              		.loc 1 730 2 view .LVU3378
 12729              	.LBB2470:
 12730              	.LBI2470:
 724:src/xeq.c     **** 	if (get_lift())
 12731              		.loc 1 724 6 view .LVU3379
 12732              	.LBB2471:
 725:src/xeq.c     **** 		lift();
 12733              		.loc 1 725 2 view .LVU3380
 12734              	.LBB2472:
 12735              	.LBI2472:
 720:src/xeq.c     **** 	return State2.state_lift;
 12736              		.loc 1 720 12 view .LVU3381
 12737              	.LBB2473:
 721:src/xeq.c     **** }
 12738              		.loc 1 721 2 view .LVU3382
 721:src/xeq.c     **** }
 12739              		.loc 1 721 15 is_stmt 0 view .LVU3383
 12740 0022 234D     		ldr	r5, .L943
 12741 0024 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 12742              	.LBE2473:
 12743              	.LBE2472:
 725:src/xeq.c     **** 		lift();
 12744              		.loc 1 725 5 view .LVU3384
 12745 0026 5906     		lsls	r1, r3, #25
 12746              	.LVL928:
 725:src/xeq.c     **** 		lift();
 12747              		.loc 1 725 5 view .LVU3385
 12748 0028 37D4     		bmi	.L941
 12749              	.LVL929:
 12750              	.L924:
 725:src/xeq.c     **** 		lift();
 12751              		.loc 1 725 5 view .LVU3386
 12752              	.LBE2471:
 12753              	.LBE2470:
 731:src/xeq.c     **** }
 12754              		.loc 1 731 2 is_stmt 1 view .LVU3387
 12755 002a FFF7FEFF 		bl	lift
 12756              	.LVL930:
 12757              	.LBE2469:
 12758              	.LBE2468:
1416:src/xeq.c     **** 		set_was_complex();
 12759              		.loc 1 1416 3 view .LVU3388
 12760 002e FFF7FEFF 		bl	zero_Y
 12761              	.LVL931:
1417:src/xeq.c     **** 	} else
 12762              		.loc 1 1417 3 view .LVU3389
 12763              	.LBB2477:
 12764              	.LBI2477:
 516:src/xeq.c     **** 	State2.wascomplex = 1;
 12765              		.loc 1 516 13 view .LVU3390
 12766              	.LBB2478:
 517:src/xeq.c     **** }
 12767              		.loc 1 517 2 view .LVU3391
 517:src/xeq.c     **** }
 12768              		.loc 1 517 20 is_stmt 0 view .LVU3392
 12769 0032 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
ARM GAS  /tmp/ccK8IvWa.s 			page 376


 12770 0034 0122     		movs	r2, #1
 12771 0036 62F38713 		bfi	r3, r2, #6, #2
 12772 003a 2B75     		strb	r3, [r5, #20]
 12773              	.L925:
 12774              	.LBE2478:
 12775              	.LBE2477:
1421:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 12776              		.loc 1 1421 2 is_stmt 1 view .LVU3393
1421:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 12777              		.loc 1 1421 24 is_stmt 0 view .LVU3394
 12778 003c 7934     		adds	r4, r4, #121
1421:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 12779              		.loc 1 1421 5 view .LVU3395
 12780 003e E4B2     		uxtb	r4, r4
 12781 0040 012C     		cmp	r4, #1
 12782 0042 2DD9     		bls	.L942
1423:src/xeq.c     **** 		bad_mode_error();
 12783              		.loc 1 1423 7 is_stmt 1 view .LVU3396
1423:src/xeq.c     **** 		bad_mode_error();
 12784              		.loc 1 1423 11 is_stmt 0 view .LVU3397
 12785 0044 1B4C     		ldr	r4, .L943+4
 12786 0046 94F8E837 		ldrb	r3, [r4, #2024]	@ zero_extendqisi2
1423:src/xeq.c     **** 		bad_mode_error();
 12787              		.loc 1 1423 10 view .LVU3398
 12788 004a DB07     		lsls	r3, r3, #31
 12789 004c 06D5     		bpl	.L928
1424:src/xeq.c     **** 	else 
 12790              		.loc 1 1424 3 is_stmt 1 view .LVU3399
 12791              	.LBB2479:
 12792              	.LBI2479:
 552:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 12793              		.loc 1 552 6 view .LVU3400
 12794              	.LBE2479:
 553:src/xeq.c     **** }
 12795              		.loc 1 553 2 view .LVU3401
 12796              	.LVL932:
 12797              	.LBB2484:
 12798              	.LBB2480:
 12799              	.LBI2480:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 12800              		.loc 1 523 5 view .LVU3402
 12801              	.LBB2481:
 524:src/xeq.c     **** 		Error = e;
 12802              		.loc 1 524 2 view .LVU3403
 524:src/xeq.c     **** 		Error = e;
 12803              		.loc 1 524 12 is_stmt 0 view .LVU3404
 12804 004e 1A4B     		ldr	r3, .L943+8
 524:src/xeq.c     **** 		Error = e;
 12805              		.loc 1 524 5 view .LVU3405
 12806 0050 1A68     		ldr	r2, [r3]
 12807 0052 0AB9     		cbnz	r2, .L921
 12808              	.LVL933:
 12809              	.LBB2482:
 12810              	.LBI2482:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 12811              		.loc 1 523 5 is_stmt 1 view .LVU3406
 12812              	.LBB2483:
ARM GAS  /tmp/ccK8IvWa.s 			page 377


 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 12813              		.loc 1 525 3 view .LVU3407
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 12814              		.loc 1 525 9 is_stmt 0 view .LVU3408
 12815 0054 0D22     		movs	r2, #13
 12816 0056 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 12817              		.loc 1 526 3 is_stmt 1 view .LVU3409
 12818              	.LVL934:
 12819              	.L921:
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 12820              		.loc 1 526 3 is_stmt 0 view .LVU3410
 12821              	.LBE2483:
 12822              	.LBE2482:
 12823              	.LBE2481:
 12824              	.LBE2480:
 12825              	.LBE2484:
1427:src/xeq.c     **** 
 12826              		.loc 1 1427 1 view .LVU3411
 12827 0058 02B0     		add	sp, sp, #8
 12828              		.cfi_remember_state
 12829              		.cfi_def_cfa_offset 16
 12830              		@ sp needed
 12831 005a 70BD     		pop	{r4, r5, r6, pc}
 12832              	.LVL935:
 12833              	.L928:
 12834              		.cfi_restore_state
1426:src/xeq.c     **** }
 12835              		.loc 1 1426 3 is_stmt 1 view .LVU3412
 12836              	.LBB2485:
 12837              	.LBB2486:
 919:src/xeq.c     **** }
 12838              		.loc 1 919 24 is_stmt 0 view .LVU3413
 12839 005c B4F8E817 		ldrh	r1, [r4, #2024]
 12840              	.LBE2486:
 12841              	.LBE2485:
1426:src/xeq.c     **** }
 12842              		.loc 1 1426 3 view .LVU3414
 12843 0060 164B     		ldr	r3, .L943+12
 12844              	.LBB2489:
 12845              	.LBB2487:
 919:src/xeq.c     **** }
 12846              		.loc 1 919 24 view .LVU3415
 12847 0062 44F20105 		movw	r5, #16385
 12848 0066 2940     		ands	r1, r1, r5
 12849              	.LBE2487:
 12850              	.LBE2489:
1426:src/xeq.c     **** }
 12851              		.loc 1 1426 22 view .LVU3416
 12852 0068 A1F58041 		sub	r1, r1, #16384
 12853 006c B1FA81F1 		clz	r1, r1
 12854 0070 3046     		mov	r0, r6
 12855 0072 4909     		lsrs	r1, r1, #5
1426:src/xeq.c     **** }
 12856              		.loc 1 1426 3 view .LVU3417
 12857 0074 1E68     		ldr	r6, [r3]
 12858              	.LVL936:
ARM GAS  /tmp/ccK8IvWa.s 			page 378


 12859              	.LBB2490:
 12860              	.LBI2485:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12861              		.loc 1 918 5 is_stmt 1 view .LVU3418
 12862              	.LBB2488:
 919:src/xeq.c     **** }
 12863              		.loc 1 919 2 view .LVU3419
 12864              	.LBE2488:
 12865              	.LBE2490:
1426:src/xeq.c     **** }
 12866              		.loc 1 1426 22 is_stmt 0 view .LVU3420
 12867 0076 FFF7FEFF 		bl	get_const
 12868              	.LVL937:
 12869              	.LBB2491:
 12870              	.LBB2492:
 12871              	.LBB2493:
 12872              	.LBB2494:
 919:src/xeq.c     **** }
 12873              		.loc 1 919 24 view .LVU3421
 12874 007a B4F8E837 		ldrh	r3, [r4, #2024]
 12875              	.LBE2494:
 12876              	.LBE2493:
 704:src/xeq.c     **** }
 12877              		.loc 1 704 2 view .LVU3422
 12878 007e 1D40     		ands	r5, r5, r3
 12879 0080 B5F5804F 		cmp	r5, #16384
 12880              	.LBE2492:
 12881              	.LBE2491:
1426:src/xeq.c     **** }
 12882              		.loc 1 1426 22 view .LVU3423
 12883 0084 0146     		mov	r1, r0
 12884              	.LVL938:
 12885              	.LBB2499:
 12886              	.LBI2491:
 703:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 12887              		.loc 1 703 6 is_stmt 1 view .LVU3424
 12888              	.LBB2497:
 704:src/xeq.c     **** }
 12889              		.loc 1 704 2 view .LVU3425
 12890              	.LBB2496:
 12891              	.LBI2493:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12892              		.loc 1 918 5 view .LVU3426
 12893              	.LBB2495:
 919:src/xeq.c     **** }
 12894              		.loc 1 919 2 view .LVU3427
 12895              	.LBE2495:
 12896              	.LBE2496:
 704:src/xeq.c     **** }
 12897              		.loc 1 704 2 is_stmt 0 view .LVU3428
 12898 0086 08BF     		it	eq
 12899 0088 1022     		moveq	r2, #16
 12900 008a 3046     		mov	r0, r6
 12901              	.LVL939:
 704:src/xeq.c     **** }
 12902              		.loc 1 704 2 view .LVU3429
 12903 008c 18BF     		it	ne
ARM GAS  /tmp/ccK8IvWa.s 			page 379


 12904 008e 0822     		movne	r2, #8
 12905              	.LBE2497:
 12906              	.LBE2499:
1427:src/xeq.c     **** 
 12907              		.loc 1 1427 1 view .LVU3430
 12908 0090 02B0     		add	sp, sp, #8
 12909              		.cfi_remember_state
 12910              		.cfi_def_cfa_offset 16
 12911              		@ sp needed
 12912 0092 BDE87040 		pop	{r4, r5, r6, lr}
 12913              		.cfi_restore 14
 12914              		.cfi_restore 6
 12915              		.cfi_restore 5
 12916              		.cfi_restore 4
 12917              		.cfi_def_cfa_offset 0
 12918              	.LVL940:
 12919              	.LBB2500:
 12920              	.LBB2498:
 704:src/xeq.c     **** }
 12921              		.loc 1 704 2 view .LVU3431
 12922 0096 FFF7FEBF 		b	xcopy
 12923              	.LVL941:
 12924              	.L941:
 12925              		.cfi_restore_state
 704:src/xeq.c     **** }
 12926              		.loc 1 704 2 view .LVU3432
 12927              	.LBE2498:
 12928              	.LBE2500:
 12929              	.LBB2501:
 12930              	.LBB2476:
 12931              	.LBB2475:
 12932              	.LBB2474:
 726:src/xeq.c     **** }
 12933              		.loc 1 726 3 is_stmt 1 view .LVU3433
 12934 009a FFF7FEFF 		bl	lift
 12935              	.LVL942:
 726:src/xeq.c     **** }
 12936              		.loc 1 726 3 is_stmt 0 view .LVU3434
 12937 009e C4E7     		b	.L924
 12938              	.L942:
 12939              	.LBE2474:
 12940              	.LBE2475:
 12941              	.LBE2476:
 12942              	.LBE2501:
1422:src/xeq.c     **** 	else if (is_intmode())
 12943              		.loc 1 1422 3 is_stmt 1 view .LVU3435
 12944              	.LVL943:
 12945              	.LBB2502:
 12946              	.LBI2502:
1309:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 12947              		.loc 1 1309 6 view .LVU3436
 12948              	.LBB2503:
1310:src/xeq.c     **** }
 12949              		.loc 1 1310 2 view .LVU3437
 12950              	.LBE2503:
 12951              	.LBE2502:
1422:src/xeq.c     **** 	else if (is_intmode())
ARM GAS  /tmp/ccK8IvWa.s 			page 380


 12952              		.loc 1 1422 3 is_stmt 0 view .LVU3438
 12953 00a0 0023     		movs	r3, #0
 12954              	.LBB2505:
 12955              	.LBB2504:
1310:src/xeq.c     **** }
 12956              		.loc 1 1310 2 view .LVU3439
 12957 00a2 3246     		mov	r2, r6
 12958 00a4 0093     		str	r3, [sp]
 12959 00a6 6420     		movs	r0, #100
 12960 00a8 FFF7FEFF 		bl	set_reg_n_int_sgn
 12961              	.LVL944:
 12962              	.LBE2504:
 12963              	.LBE2505:
1427:src/xeq.c     **** 
 12964              		.loc 1 1427 1 view .LVU3440
 12965 00ac 02B0     		add	sp, sp, #8
 12966              		.cfi_def_cfa_offset 16
 12967              		@ sp needed
 12968 00ae 70BD     		pop	{r4, r5, r6, pc}
 12969              	.LVL945:
 12970              	.L944:
1427:src/xeq.c     **** 
 12971              		.loc 1 1427 1 view .LVU3441
 12972              		.align	2
 12973              	.L943:
 12974 00b0 00000000 		.word	StateWhileOn
 12975 00b4 00000000 		.word	PersistentRam
 12976 00b8 00000000 		.word	Error
 12977 00bc 00000000 		.word	StackBase
 12978              		.cfi_endproc
 12979              	.LFE109:
 12981              		.section	.text.cmdsto,"ax",%progbits
 12982              		.align	1
 12983              		.p2align 2,,3
 12984              		.global	cmdsto
 12985              		.syntax unified
 12986              		.thumb
 12987              		.thumb_func
 12988              		.fpu fpv4-sp-d16
 12990              	cmdsto:
 12991              	.LVL946:
 12992              	.LFB112:
1510:src/xeq.c     **** 	if (op == RARG_STO) {
 12993              		.loc 1 1510 45 is_stmt 1 view -0
 12994              		.cfi_startproc
 12995              		@ args = 0, pretend = 0, frame = 48
 12996              		@ frame_needed = 0, uses_anonymous_args = 0
1511:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
 12997              		.loc 1 1511 2 view .LVU3443
1510:src/xeq.c     **** 	if (op == RARG_STO) {
 12998              		.loc 1 1510 45 is_stmt 0 view .LVU3444
 12999 0000 10B5     		push	{r4, lr}
 13000              		.cfi_def_cfa_offset 8
 13001              		.cfi_offset 4, -8
 13002              		.cfi_offset 14, -4
1511:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
 13003              		.loc 1 1511 5 view .LVU3445
ARM GAS  /tmp/ccK8IvWa.s 			page 381


 13004 0002 0329     		cmp	r1, #3
1510:src/xeq.c     **** 	if (op == RARG_STO) {
 13005              		.loc 1 1510 45 view .LVU3446
 13006 0004 8CB0     		sub	sp, sp, #48
 13007              		.cfi_def_cfa_offset 56
1511:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
 13008              		.loc 1 1511 5 view .LVU3447
 13009 0006 31D0     		beq	.L958
1514:src/xeq.c     **** 			long long int r;
 13010              		.loc 1 1514 3 is_stmt 1 view .LVU3448
1514:src/xeq.c     **** 			long long int r;
 13011              		.loc 1 1514 7 is_stmt 0 view .LVU3449
 13012 0008 1B4B     		ldr	r3, .L959
 13013 000a 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 13014              	.LBB2518:
1517:src/xeq.c     **** 				illegal(op);
 13015              		.loc 1 1517 8 view .LVU3450
 13016 000e 0339     		subs	r1, r1, #3
 13017              	.LVL947:
1517:src/xeq.c     **** 				illegal(op);
 13018              		.loc 1 1517 8 view .LVU3451
 13019              	.LBE2518:
1514:src/xeq.c     **** 			long long int r;
 13020              		.loc 1 1514 6 view .LVU3452
 13021 0010 13F00103 		ands	r3, r3, #1
 13022 0014 0446     		mov	r4, r0
 13023              	.LBB2526:
1517:src/xeq.c     **** 				illegal(op);
 13024              		.loc 1 1517 8 view .LVU3453
 13025 0016 88B2     		uxth	r0, r1
 13026              	.LVL948:
1517:src/xeq.c     **** 				illegal(op);
 13027              		.loc 1 1517 8 view .LVU3454
 13028              	.LBE2526:
1514:src/xeq.c     **** 			long long int r;
 13029              		.loc 1 1514 6 view .LVU3455
 13030 0018 18D0     		beq	.L948
 13031              	.LBB2527:
1515:src/xeq.c     **** 
 13032              		.loc 1 1515 4 is_stmt 1 view .LVU3456
1517:src/xeq.c     **** 				illegal(op);
 13033              		.loc 1 1517 4 view .LVU3457
1517:src/xeq.c     **** 				illegal(op);
 13034              		.loc 1 1517 8 is_stmt 0 view .LVU3458
 13035 001a 0023     		movs	r3, #0
 13036 001c 6A46     		mov	r2, sp
 13037 001e 2146     		mov	r1, r4
 13038 0020 FFF7FEFF 		bl	storcl_intop
 13039              	.LVL949:
1517:src/xeq.c     **** 				illegal(op);
 13040              		.loc 1 1517 7 view .LVU3459
 13041 0024 20B1     		cbz	r0, .L949
1518:src/xeq.c     **** 			set_reg_n_int(arg, r);
 13042              		.loc 1 1518 5 is_stmt 1 view .LVU3460
1518:src/xeq.c     **** 			set_reg_n_int(arg, r);
 13043              		.loc 1 1518 5 view .LVU3461
 13044              	.LVL950:
ARM GAS  /tmp/ccK8IvWa.s 			page 382


 13045              	.LBB2519:
 13046              	.LBI2519:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13047              		.loc 1 523 5 view .LVU3462
 13048              	.LBB2520:
 524:src/xeq.c     **** 		Error = e;
 13049              		.loc 1 524 2 view .LVU3463
 524:src/xeq.c     **** 		Error = e;
 13050              		.loc 1 524 12 is_stmt 0 view .LVU3464
 13051 0026 154B     		ldr	r3, .L959+4
 524:src/xeq.c     **** 		Error = e;
 13052              		.loc 1 524 5 view .LVU3465
 13053 0028 1A68     		ldr	r2, [r3]
 13054 002a 0AB9     		cbnz	r2, .L949
 13055              	.LVL951:
 13056              	.LBB2521:
 13057              	.LBI2521:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13058              		.loc 1 523 5 is_stmt 1 view .LVU3466
 13059              	.LBB2522:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 13060              		.loc 1 525 3 view .LVU3467
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 13061              		.loc 1 525 9 is_stmt 0 view .LVU3468
 13062 002c 0322     		movs	r2, #3
 13063 002e 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 13064              		.loc 1 526 3 is_stmt 1 view .LVU3469
 13065              	.LVL952:
 13066              	.L949:
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 13067              		.loc 1 526 3 is_stmt 0 view .LVU3470
 13068              	.LBE2522:
 13069              	.LBE2521:
 13070              	.LBE2520:
 13071              	.LBE2519:
1518:src/xeq.c     **** 			set_reg_n_int(arg, r);
 13072              		.loc 1 1518 5 is_stmt 1 discriminator 1 view .LVU3471
1519:src/xeq.c     **** 		} else {
 13073              		.loc 1 1519 4 discriminator 1 view .LVU3472
1519:src/xeq.c     **** 		} else {
 13074              		.loc 1 1519 4 is_stmt 0 discriminator 1 view .LVU3473
 13075 0030 DDE90023 		ldrd	r2, [sp]
 13076              	.LBB2523:
 13077              	.LBB2524:
1223:src/xeq.c     **** }
 13078              		.loc 1 1223 8 discriminator 1 view .LVU3474
 13079 0034 2046     		mov	r0, r4
 13080 0036 CDE90223 		strd	r2, [sp, #8]
 13081              	.LVL953:
1223:src/xeq.c     **** }
 13082              		.loc 1 1223 8 discriminator 1 view .LVU3475
 13083              	.LBE2524:
 13084              	.LBI2523:
1222:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 13085              		.loc 1 1222 6 is_stmt 1 discriminator 1 view .LVU3476
 13086              	.LBB2525:
ARM GAS  /tmp/ccK8IvWa.s 			page 383


1223:src/xeq.c     **** }
 13087              		.loc 1 1223 2 discriminator 1 view .LVU3477
1223:src/xeq.c     **** }
 13088              		.loc 1 1223 8 is_stmt 0 discriminator 1 view .LVU3478
 13089 003a FFF7FEFF 		bl	get_reg_n
 13090              	.LVL954:
1223:src/xeq.c     **** }
 13091              		.loc 1 1223 2 discriminator 1 view .LVU3479
 13092 003e 0822     		movs	r2, #8
 13093 0040 0DEB0201 		add	r1, sp, r2
 13094 0044 FFF7FEFF 		bl	xcopy
 13095              	.LVL955:
1223:src/xeq.c     **** }
 13096              		.loc 1 1223 2 discriminator 1 view .LVU3480
 13097              	.LBE2525:
 13098              	.LBE2523:
 13099              	.LBE2527:
1528:src/xeq.c     **** 
 13100              		.loc 1 1528 1 discriminator 1 view .LVU3481
 13101 0048 0CB0     		add	sp, sp, #48
 13102              		.cfi_remember_state
 13103              		.cfi_def_cfa_offset 8
 13104              		@ sp needed
 13105 004a 10BD     		pop	{r4, pc}
 13106              	.LVL956:
 13107              	.L948:
 13108              		.cfi_restore_state
 13109              	.LBB2528:
1521:src/xeq.c     **** 
 13110              		.loc 1 1521 4 is_stmt 1 view .LVU3482
1523:src/xeq.c     **** 				illegal(op);
 13111              		.loc 1 1523 4 view .LVU3483
1523:src/xeq.c     **** 				illegal(op);
 13112              		.loc 1 1523 8 is_stmt 0 view .LVU3484
 13113 004c 02AA     		add	r2, sp, #8
 13114 004e 2146     		mov	r1, r4
 13115 0050 FFF7FEFF 		bl	storcl_op
 13116              	.LVL957:
1523:src/xeq.c     **** 				illegal(op);
 13117              		.loc 1 1523 7 view .LVU3485
 13118 0054 20B1     		cbz	r0, .L950
1524:src/xeq.c     **** 			setRegister(arg, &r);
 13119              		.loc 1 1524 5 is_stmt 1 view .LVU3486
1524:src/xeq.c     **** 			setRegister(arg, &r);
 13120              		.loc 1 1524 5 view .LVU3487
 13121              	.LVL958:
 13122              	.LBB2529:
 13123              	.LBI2529:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13124              		.loc 1 523 5 view .LVU3488
 13125              	.LBB2530:
 524:src/xeq.c     **** 		Error = e;
 13126              		.loc 1 524 2 view .LVU3489
 524:src/xeq.c     **** 		Error = e;
 13127              		.loc 1 524 12 is_stmt 0 view .LVU3490
 13128 0056 094B     		ldr	r3, .L959+4
 524:src/xeq.c     **** 		Error = e;
ARM GAS  /tmp/ccK8IvWa.s 			page 384


 13129              		.loc 1 524 5 view .LVU3491
 13130 0058 1A68     		ldr	r2, [r3]
 13131 005a 0AB9     		cbnz	r2, .L950
 13132              	.LVL959:
 13133              	.LBB2531:
 13134              	.LBI2531:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13135              		.loc 1 523 5 is_stmt 1 view .LVU3492
 13136              	.LBB2532:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 13137              		.loc 1 525 3 view .LVU3493
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 13138              		.loc 1 525 9 is_stmt 0 view .LVU3494
 13139 005c 0322     		movs	r2, #3
 13140 005e 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 13141              		.loc 1 526 3 is_stmt 1 view .LVU3495
 13142              	.LVL960:
 13143              	.L950:
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 13144              		.loc 1 526 3 is_stmt 0 view .LVU3496
 13145              	.LBE2532:
 13146              	.LBE2531:
 13147              	.LBE2530:
 13148              	.LBE2529:
1524:src/xeq.c     **** 			setRegister(arg, &r);
 13149              		.loc 1 1524 5 is_stmt 1 discriminator 1 view .LVU3497
1525:src/xeq.c     **** 		}
 13150              		.loc 1 1525 4 discriminator 1 view .LVU3498
 13151 0060 02A9     		add	r1, sp, #8
 13152 0062 2046     		mov	r0, r4
 13153 0064 FFF7FEFF 		bl	setRegister
 13154              	.LVL961:
 13155              	.LBE2528:
1528:src/xeq.c     **** 
 13156              		.loc 1 1528 1 is_stmt 0 discriminator 1 view .LVU3499
 13157 0068 0CB0     		add	sp, sp, #48
 13158              		.cfi_remember_state
 13159              		.cfi_def_cfa_offset 8
 13160              		@ sp needed
 13161 006a 10BD     		pop	{r4, pc}
 13162              	.LVL962:
 13163              	.L958:
 13164              		.cfi_restore_state
1512:src/xeq.c     **** 	} else {
 13165              		.loc 1 1512 3 is_stmt 1 view .LVU3500
 13166 006c 6421     		movs	r1, #100
 13167              	.LVL963:
1512:src/xeq.c     **** 	} else {
 13168              		.loc 1 1512 3 is_stmt 0 view .LVU3501
 13169 006e FFF7FEFF 		bl	copyreg_n
 13170              	.LVL964:
1528:src/xeq.c     **** 
 13171              		.loc 1 1528 1 view .LVU3502
 13172 0072 0CB0     		add	sp, sp, #48
 13173              		.cfi_def_cfa_offset 8
 13174              		@ sp needed
ARM GAS  /tmp/ccK8IvWa.s 			page 385


 13175 0074 10BD     		pop	{r4, pc}
 13176              	.L960:
 13177 0076 00BF     		.align	2
 13178              	.L959:
 13179 0078 00000000 		.word	PersistentRam
 13180 007c 00000000 		.word	Error
 13181              		.cfi_endproc
 13182              	.LFE112:
 13184              		.section	.text.cmdrcl,"ax",%progbits
 13185              		.align	1
 13186              		.p2align 2,,3
 13187              		.global	cmdrcl
 13188              		.syntax unified
 13189              		.thumb
 13190              		.thumb_func
 13191              		.fpu fpv4-sp-d16
 13193              	cmdrcl:
 13194              	.LVL965:
 13195              	.LFB114:
1557:src/xeq.c     **** 	do_rcl(arg, op);
 13196              		.loc 1 1557 45 is_stmt 1 view -0
 13197              		.cfi_startproc
 13198              		@ args = 0, pretend = 0, frame = 0
 13199              		@ frame_needed = 0, uses_anonymous_args = 0
 13200              		@ link register save eliminated.
1558:src/xeq.c     **** }
 13201              		.loc 1 1558 2 view .LVU3504
 13202 0000 FFF7FEBF 		b	do_rcl
 13203              	.LVL966:
1558:src/xeq.c     **** }
 13204              		.loc 1 1558 2 is_stmt 0 view .LVU3505
 13205              		.cfi_endproc
 13206              	.LFE114:
 13208              		.section	.text.cmdcsto,"ax",%progbits
 13209              		.align	1
 13210              		.p2align 2,,3
 13211              		.global	cmdcsto
 13212              		.syntax unified
 13213              		.thumb
 13214              		.thumb_func
 13215              		.fpu fpv4-sp-d16
 13217              	cmdcsto:
 13218              	.LVL967:
 13219              	.LFB116:
1602:src/xeq.c     **** 	decNumber r1, r2;
 13220              		.loc 1 1602 46 is_stmt 1 view -0
 13221              		.cfi_startproc
 13222              		@ args = 0, pretend = 0, frame = 72
 13223              		@ frame_needed = 0, uses_anonymous_args = 0
1603:src/xeq.c     **** 	REGISTER *t1, *t2;
 13224              		.loc 1 1603 2 view .LVU3507
1604:src/xeq.c     **** 
 13225              		.loc 1 1604 2 view .LVU3508
1606:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
 13226              		.loc 1 1606 2 view .LVU3509
1602:src/xeq.c     **** 	decNumber r1, r2;
 13227              		.loc 1 1602 46 is_stmt 0 view .LVU3510
ARM GAS  /tmp/ccK8IvWa.s 			page 386


 13228 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 13229              		.cfi_def_cfa_offset 24
 13230              		.cfi_offset 4, -24
 13231              		.cfi_offset 5, -20
 13232              		.cfi_offset 6, -16
 13233              		.cfi_offset 7, -12
 13234              		.cfi_offset 8, -8
 13235              		.cfi_offset 14, -4
 13236 0004 94B0     		sub	sp, sp, #80
 13237              		.cfi_def_cfa_offset 104
1602:src/xeq.c     **** 	decNumber r1, r2;
 13238              		.loc 1 1602 46 view .LVU3511
 13239 0006 0C46     		mov	r4, r1
1607:src/xeq.c     **** 
 13240              		.loc 1 1607 21 view .LVU3512
 13241 0008 461C     		adds	r6, r0, #1
1602:src/xeq.c     **** 	decNumber r1, r2;
 13242              		.loc 1 1602 46 view .LVU3513
 13243 000a 0546     		mov	r5, r0
1606:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
 13244              		.loc 1 1606 7 view .LVU3514
 13245 000c FFF7FEFF 		bl	get_reg_n
 13246              	.LVL968:
1606:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
 13247              		.loc 1 1606 7 view .LVU3515
 13248 0010 8046     		mov	r8, r0
1607:src/xeq.c     **** 
 13249              		.loc 1 1607 7 view .LVU3516
 13250 0012 3046     		mov	r0, r6
 13251              	.LVL969:
1607:src/xeq.c     **** 
 13252              		.loc 1 1607 2 is_stmt 1 view .LVU3517
1607:src/xeq.c     **** 
 13253              		.loc 1 1607 7 is_stmt 0 view .LVU3518
 13254 0014 FFF7FEFF 		bl	get_reg_n
 13255              	.LVL970:
1609:src/xeq.c     **** 		copyreg(t1, StackBase);
 13256              		.loc 1 1609 2 is_stmt 1 view .LVU3519
1609:src/xeq.c     **** 		copyreg(t1, StackBase);
 13257              		.loc 1 1609 5 is_stmt 0 view .LVU3520
 13258 0018 152C     		cmp	r4, #21
 13259 001a 23D0     		beq	.L974
1613:src/xeq.c     **** 			bad_mode_error();
 13260              		.loc 1 1613 3 is_stmt 1 view .LVU3521
1613:src/xeq.c     **** 			bad_mode_error();
 13261              		.loc 1 1613 7 is_stmt 0 view .LVU3522
 13262 001c 274B     		ldr	r3, .L975
 13263 001e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1613:src/xeq.c     **** 			bad_mode_error();
 13264              		.loc 1 1613 6 view .LVU3523
 13265 0022 13F00103 		ands	r3, r3, #1
 13266 0026 0DD0     		beq	.L967
1614:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CSTO, arg, &r1, &r2, 0))
 13267              		.loc 1 1614 4 is_stmt 1 view .LVU3524
 13268              	.LBB2552:
 13269              	.LBI2552:
 552:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
ARM GAS  /tmp/ccK8IvWa.s 			page 387


 13270              		.loc 1 552 6 view .LVU3525
 13271              	.LBE2552:
 553:src/xeq.c     **** }
 13272              		.loc 1 553 2 view .LVU3526
 13273              	.LVL971:
 13274              	.LBB2557:
 13275              	.LBB2553:
 13276              	.LBI2553:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13277              		.loc 1 523 5 view .LVU3527
 13278              	.LBB2554:
 524:src/xeq.c     **** 		Error = e;
 13279              		.loc 1 524 2 view .LVU3528
 524:src/xeq.c     **** 		Error = e;
 13280              		.loc 1 524 12 is_stmt 0 view .LVU3529
 13281 0028 254B     		ldr	r3, .L975+4
 524:src/xeq.c     **** 		Error = e;
 13282              		.loc 1 524 5 view .LVU3530
 13283 002a 1A68     		ldr	r2, [r3]
 13284 002c 0AB9     		cbnz	r2, .L966
 13285              	.LVL972:
 13286              	.LBB2555:
 13287              	.LBI2555:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13288              		.loc 1 523 5 is_stmt 1 view .LVU3531
 13289              	.LBB2556:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 13290              		.loc 1 525 3 view .LVU3532
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 13291              		.loc 1 525 9 is_stmt 0 view .LVU3533
 13292 002e 0D22     		movs	r2, #13
 13293 0030 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 13294              		.loc 1 526 3 is_stmt 1 view .LVU3534
 13295              	.LVL973:
 13296              	.L966:
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 13297              		.loc 1 526 3 is_stmt 0 view .LVU3535
 13298              	.LBE2556:
 13299              	.LBE2555:
 13300              	.LBE2554:
 13301              	.LBE2553:
 13302              	.LBE2557:
1622:src/xeq.c     **** }
 13303              		.loc 1 1622 2 is_stmt 1 view .LVU3536
 13304              	.LBB2558:
 13305              	.LBI2558:
 516:src/xeq.c     **** 	State2.wascomplex = 1;
 13306              		.loc 1 516 13 view .LVU3537
 13307              	.LBB2559:
 517:src/xeq.c     **** }
 13308              		.loc 1 517 2 view .LVU3538
 517:src/xeq.c     **** }
 13309              		.loc 1 517 20 is_stmt 0 view .LVU3539
 13310 0032 244B     		ldr	r3, .L975+8
 13311 0034 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 13312 0036 0121     		movs	r1, #1
ARM GAS  /tmp/ccK8IvWa.s 			page 388


 13313 0038 61F38712 		bfi	r2, r1, #6, #2
 13314 003c 1A75     		strb	r2, [r3, #20]
 13315              	.LBE2559:
 13316              	.LBE2558:
1623:src/xeq.c     **** 
 13317              		.loc 1 1623 1 view .LVU3540
 13318 003e 14B0     		add	sp, sp, #80
 13319              		.cfi_remember_state
 13320              		.cfi_def_cfa_offset 24
 13321              		@ sp needed
 13322 0040 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 13323              	.LVL974:
 13324              	.L967:
 13325              		.cfi_restore_state
1615:src/xeq.c     **** 			illegal(op);
 13326              		.loc 1 1615 8 is_stmt 1 view .LVU3541
1615:src/xeq.c     **** 			illegal(op);
 13327              		.loc 1 1615 12 is_stmt 0 view .LVU3542
 13328 0044 153C     		subs	r4, r4, #21
 13329 0046 0093     		str	r3, [sp]
 13330 0048 A0B2     		uxth	r0, r4
 13331              	.LVL975:
1615:src/xeq.c     **** 			illegal(op);
 13332              		.loc 1 1615 12 view .LVU3543
 13333 004a 0BAB     		add	r3, sp, #44
 13334 004c 02AA     		add	r2, sp, #8
 13335 004e 2946     		mov	r1, r5
 13336 0050 FFF7FEFF 		bl	storcl_cop
 13337              	.LVL976:
1615:src/xeq.c     **** 			illegal(op);
 13338              		.loc 1 1615 11 view .LVU3544
 13339 0054 40B3     		cbz	r0, .L969
1616:src/xeq.c     **** 		else {
 13340              		.loc 1 1616 4 is_stmt 1 view .LVU3545
1616:src/xeq.c     **** 		else {
 13341              		.loc 1 1616 4 view .LVU3546
 13342              	.LVL977:
 13343              	.LBB2560:
 13344              	.LBI2560:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13345              		.loc 1 523 5 view .LVU3547
 13346              	.LBB2561:
 524:src/xeq.c     **** 		Error = e;
 13347              		.loc 1 524 2 view .LVU3548
 524:src/xeq.c     **** 		Error = e;
 13348              		.loc 1 524 12 is_stmt 0 view .LVU3549
 13349 0056 1A4B     		ldr	r3, .L975+4
 524:src/xeq.c     **** 		Error = e;
 13350              		.loc 1 524 5 view .LVU3550
 13351 0058 1A68     		ldr	r2, [r3]
 13352 005a 002A     		cmp	r2, #0
 13353 005c E9D1     		bne	.L966
 13354              	.LVL978:
 13355              	.LBB2562:
 13356              	.LBI2562:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13357              		.loc 1 523 5 is_stmt 1 view .LVU3551
ARM GAS  /tmp/ccK8IvWa.s 			page 389


 13358              	.LBB2563:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 13359              		.loc 1 525 3 view .LVU3552
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 13360              		.loc 1 525 9 is_stmt 0 view .LVU3553
 13361 005e 0322     		movs	r2, #3
 13362 0060 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 13363              		.loc 1 526 3 is_stmt 1 view .LVU3554
 13364 0062 E6E7     		b	.L966
 13365              	.LVL979:
 13366              	.L974:
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 13367              		.loc 1 526 3 is_stmt 0 view .LVU3555
 13368              	.LBE2563:
 13369              	.LBE2562:
 13370              	.LBE2561:
 13371              	.LBE2560:
1610:src/xeq.c     **** 		copyreg(t2, get_reg_n(regY_idx));
 13372              		.loc 1 1610 3 is_stmt 1 view .LVU3556
 13373              	.LBB2564:
 13374              	.LBB2565:
 13375              	.LBB2566:
 13376              	.LBB2567:
 919:src/xeq.c     **** }
 13377              		.loc 1 919 24 is_stmt 0 view .LVU3557
 13378 0064 154D     		ldr	r5, .L975
 13379              	.LVL980:
 919:src/xeq.c     **** }
 13380              		.loc 1 919 24 view .LVU3558
 13381              	.LBE2567:
 13382              	.LBE2566:
 13383              	.LBE2565:
 13384              	.LBE2564:
1610:src/xeq.c     **** 		copyreg(t2, get_reg_n(regY_idx));
 13385              		.loc 1 1610 3 view .LVU3559
 13386 0066 184A     		ldr	r2, .L975+12
 13387              	.LVL981:
 13388              	.LBB2573:
 13389              	.LBI2564:
 703:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 13390              		.loc 1 703 6 is_stmt 1 view .LVU3560
 13391              	.LBB2572:
 704:src/xeq.c     **** }
 13392              		.loc 1 704 2 view .LVU3561
 13393              	.LBB2570:
 13394              	.LBI2566:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13395              		.loc 1 918 5 view .LVU3562
 13396              	.LBB2568:
 919:src/xeq.c     **** }
 13397              		.loc 1 919 2 view .LVU3563
 919:src/xeq.c     **** }
 13398              		.loc 1 919 24 is_stmt 0 view .LVU3564
 13399 0068 B5F8E837 		ldrh	r3, [r5, #2024]
 13400              	.LBE2568:
 13401              	.LBE2570:
ARM GAS  /tmp/ccK8IvWa.s 			page 390


 704:src/xeq.c     **** }
 13402              		.loc 1 704 2 view .LVU3565
 13403 006c 1168     		ldr	r1, [r2]
 13404              	.LBB2571:
 13405              	.LBB2569:
 919:src/xeq.c     **** }
 13406              		.loc 1 919 24 view .LVU3566
 13407 006e 44F20104 		movw	r4, #16385
 13408              	.LBE2569:
 13409              	.LBE2571:
 704:src/xeq.c     **** }
 13410              		.loc 1 704 2 view .LVU3567
 13411 0072 2340     		ands	r3, r3, r4
 13412 0074 B3F5804F 		cmp	r3, #16384
 13413 0078 0CBF     		ite	eq
 13414 007a 1022     		moveq	r2, #16
 13415              	.LVL982:
 704:src/xeq.c     **** }
 13416              		.loc 1 704 2 view .LVU3568
 13417 007c 0822     		movne	r2, #8
 13418 007e 0746     		mov	r7, r0
 13419 0080 4046     		mov	r0, r8
 13420              	.LVL983:
 704:src/xeq.c     **** }
 13421              		.loc 1 704 2 view .LVU3569
 13422 0082 FFF7FEFF 		bl	xcopy
 13423              	.LVL984:
 704:src/xeq.c     **** }
 13424              		.loc 1 704 2 view .LVU3570
 13425              	.LBE2572:
 13426              	.LBE2573:
1611:src/xeq.c     **** 	} else {
 13427              		.loc 1 1611 3 is_stmt 1 view .LVU3571
1611:src/xeq.c     **** 	} else {
 13428              		.loc 1 1611 15 is_stmt 0 view .LVU3572
 13429 0086 6520     		movs	r0, #101
 13430 0088 FFF7FEFF 		bl	get_reg_n
 13431              	.LVL985:
 13432              	.LBB2574:
 13433              	.LBB2575:
 13434              	.LBB2576:
 13435              	.LBB2577:
 919:src/xeq.c     **** }
 13436              		.loc 1 919 24 view .LVU3573
 13437 008c B5F8E837 		ldrh	r3, [r5, #2024]
 13438              	.LBE2577:
 13439              	.LBE2576:
 704:src/xeq.c     **** }
 13440              		.loc 1 704 2 view .LVU3574
 13441 0090 1C40     		ands	r4, r4, r3
 13442 0092 B4F5804F 		cmp	r4, #16384
 13443              	.LBE2575:
 13444              	.LBE2574:
1611:src/xeq.c     **** 	} else {
 13445              		.loc 1 1611 15 view .LVU3575
 13446 0096 0146     		mov	r1, r0
 13447              	.LVL986:
ARM GAS  /tmp/ccK8IvWa.s 			page 391


 13448              	.LBB2581:
 13449              	.LBI2574:
 703:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 13450              		.loc 1 703 6 is_stmt 1 view .LVU3576
 13451              	.LBB2580:
 704:src/xeq.c     **** }
 13452              		.loc 1 704 2 view .LVU3577
 13453              	.LBB2579:
 13454              	.LBI2576:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13455              		.loc 1 918 5 view .LVU3578
 13456              	.LBB2578:
 919:src/xeq.c     **** }
 13457              		.loc 1 919 2 view .LVU3579
 13458              	.LBE2578:
 13459              	.LBE2579:
 704:src/xeq.c     **** }
 13460              		.loc 1 704 2 is_stmt 0 view .LVU3580
 13461 0098 08BF     		it	eq
 13462 009a 1022     		moveq	r2, #16
 13463 009c 3846     		mov	r0, r7
 13464              	.LVL987:
 704:src/xeq.c     **** }
 13465              		.loc 1 704 2 view .LVU3581
 13466 009e 18BF     		it	ne
 13467 00a0 0822     		movne	r2, #8
 13468 00a2 FFF7FEFF 		bl	xcopy
 13469              	.LVL988:
 705:src/xeq.c     **** 
 13470              		.loc 1 705 1 view .LVU3582
 13471 00a6 C4E7     		b	.L966
 13472              	.LVL989:
 13473              	.L969:
 705:src/xeq.c     **** 
 13474              		.loc 1 705 1 view .LVU3583
 13475              	.LBE2580:
 13476              	.LBE2581:
1618:src/xeq.c     **** 			setRegister(arg + 1, &r2);
 13477              		.loc 1 1618 4 is_stmt 1 view .LVU3584
 13478 00a8 02A9     		add	r1, sp, #8
 13479 00aa 2846     		mov	r0, r5
 13480 00ac FFF7FEFF 		bl	setRegister
 13481              	.LVL990:
1619:src/xeq.c     **** 		}
 13482              		.loc 1 1619 4 view .LVU3585
 13483 00b0 0BA9     		add	r1, sp, #44
 13484 00b2 3046     		mov	r0, r6
 13485 00b4 FFF7FEFF 		bl	setRegister
 13486              	.LVL991:
 13487 00b8 BBE7     		b	.L966
 13488              	.L976:
 13489 00ba 00BF     		.align	2
 13490              	.L975:
 13491 00bc 00000000 		.word	PersistentRam
 13492 00c0 00000000 		.word	Error
 13493 00c4 00000000 		.word	StateWhileOn
 13494 00c8 00000000 		.word	StackBase
ARM GAS  /tmp/ccK8IvWa.s 			page 392


 13495              		.cfi_endproc
 13496              	.LFE116:
 13498              		.section	.text.cmdcrcl,"ax",%progbits
 13499              		.align	1
 13500              		.p2align 2,,3
 13501              		.global	cmdcrcl
 13502              		.syntax unified
 13503              		.thumb
 13504              		.thumb_func
 13505              		.fpu fpv4-sp-d16
 13507              	cmdcrcl:
 13508              	.LVL992:
 13509              	.LFB118:
1648:src/xeq.c     **** 	do_crcl(arg, op);
 13510              		.loc 1 1648 46 view -0
 13511              		.cfi_startproc
 13512              		@ args = 0, pretend = 0, frame = 72
 13513              		@ frame_needed = 0, uses_anonymous_args = 0
1649:src/xeq.c     **** }
 13514              		.loc 1 1649 2 view .LVU3587
1648:src/xeq.c     **** 	do_crcl(arg, op);
 13515              		.loc 1 1648 46 is_stmt 0 view .LVU3588
 13516 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 13517              		.cfi_def_cfa_offset 20
 13518              		.cfi_offset 4, -20
 13519              		.cfi_offset 5, -16
 13520              		.cfi_offset 6, -12
 13521              		.cfi_offset 7, -8
 13522              		.cfi_offset 14, -4
 13523              	.LBB2624:
 13524              	.LBB2625:
1628:src/xeq.c     **** 		REGISTER x, y;
 13525              		.loc 1 1628 5 view .LVU3589
 13526 0002 1A29     		cmp	r1, #26
 13527              	.LBE2625:
 13528              	.LBE2624:
1648:src/xeq.c     **** 	do_crcl(arg, op);
 13529              		.loc 1 1648 46 view .LVU3590
 13530 0004 95B0     		sub	sp, sp, #84
 13531              		.cfi_def_cfa_offset 104
1648:src/xeq.c     **** 	do_crcl(arg, op);
 13532              		.loc 1 1648 46 view .LVU3591
 13533 0006 0446     		mov	r4, r0
 13534              	.LVL993:
 13535              	.LBB2700:
 13536              	.LBI2624:
1625:src/xeq.c     **** 	decNumber r1, r2;
 13537              		.loc 1 1625 13 is_stmt 1 view .LVU3592
 13538              	.LBB2697:
1626:src/xeq.c     **** 
 13539              		.loc 1 1626 2 view .LVU3593
1628:src/xeq.c     **** 		REGISTER x, y;
 13540              		.loc 1 1628 2 view .LVU3594
1628:src/xeq.c     **** 		REGISTER x, y;
 13541              		.loc 1 1628 5 is_stmt 0 view .LVU3595
 13542 0008 26D0     		beq	.L1000
1636:src/xeq.c     **** 			bad_mode_error();
ARM GAS  /tmp/ccK8IvWa.s 			page 393


 13543              		.loc 1 1636 3 is_stmt 1 view .LVU3596
1636:src/xeq.c     **** 			bad_mode_error();
 13544              		.loc 1 1636 7 is_stmt 0 view .LVU3597
 13545 000a 3C4B     		ldr	r3, .L1002
 13546 000c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1636:src/xeq.c     **** 			bad_mode_error();
 13547              		.loc 1 1636 6 view .LVU3598
 13548 0010 DB07     		lsls	r3, r3, #31
 13549 0012 0ED5     		bpl	.L985
1637:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CRCL, index, &r1, &r2, 1))
 13550              		.loc 1 1637 4 is_stmt 1 view .LVU3599
 13551              	.LBB2626:
 13552              	.LBI2626:
 552:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 13553              		.loc 1 552 6 view .LVU3600
 13554              	.LBE2626:
 13555              	.LBE2697:
 13556              	.LBE2700:
 553:src/xeq.c     **** }
 13557              		.loc 1 553 2 view .LVU3601
 13558              	.LVL994:
 13559              	.LBB2701:
 13560              	.LBB2698:
 13561              	.LBB2633:
 13562              	.LBB2627:
 13563              	.LBI2627:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13564              		.loc 1 523 5 view .LVU3602
 13565              	.LBB2628:
 524:src/xeq.c     **** 		Error = e;
 13566              		.loc 1 524 2 view .LVU3603
 524:src/xeq.c     **** 		Error = e;
 13567              		.loc 1 524 12 is_stmt 0 view .LVU3604
 13568 0014 3A4B     		ldr	r3, .L1002+4
 524:src/xeq.c     **** 		Error = e;
 13569              		.loc 1 524 5 view .LVU3605
 13570 0016 1A68     		ldr	r2, [r3]
 13571 0018 3AB1     		cbz	r2, .L986
 13572              	.LVL995:
 13573              	.L999:
 524:src/xeq.c     **** 		Error = e;
 13574              		.loc 1 524 5 view .LVU3606
 13575 001a 3A4D     		ldr	r5, .L1002+8
 13576              	.LVL996:
 13577              	.L984:
 524:src/xeq.c     **** 		Error = e;
 13578              		.loc 1 524 5 view .LVU3607
 13579              	.LBE2628:
 13580              	.LBE2627:
 13581              	.LBE2633:
1645:src/xeq.c     **** }
 13582              		.loc 1 1645 2 is_stmt 1 view .LVU3608
 13583              	.LBB2634:
 13584              	.LBI2634:
 516:src/xeq.c     **** 	State2.wascomplex = 1;
 13585              		.loc 1 516 13 view .LVU3609
 13586              	.LBB2635:
ARM GAS  /tmp/ccK8IvWa.s 			page 394


 517:src/xeq.c     **** }
 13587              		.loc 1 517 2 view .LVU3610
 517:src/xeq.c     **** }
 13588              		.loc 1 517 20 is_stmt 0 view .LVU3611
 13589 001c 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 13590 001e 0122     		movs	r2, #1
 13591 0020 62F38713 		bfi	r3, r2, #6, #2
 13592 0024 2B75     		strb	r3, [r5, #20]
 13593              	.LVL997:
 517:src/xeq.c     **** }
 13594              		.loc 1 517 20 view .LVU3612
 13595              	.LBE2635:
 13596              	.LBE2634:
 13597              	.LBE2698:
 13598              	.LBE2701:
1650:src/xeq.c     **** 
 13599              		.loc 1 1650 1 view .LVU3613
 13600 0026 15B0     		add	sp, sp, #84
 13601              		.cfi_remember_state
 13602              		.cfi_def_cfa_offset 20
 13603              		@ sp needed
 13604 0028 F0BD     		pop	{r4, r5, r6, r7, pc}
 13605              	.LVL998:
 13606              	.L986:
 13607              		.cfi_restore_state
 13608              	.LBB2702:
 13609              	.LBB2699:
 13610              	.LBB2636:
 13611              	.LBB2632:
 13612              	.LBB2631:
 13613              	.LBB2629:
 13614              	.LBI2629:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13615              		.loc 1 523 5 is_stmt 1 view .LVU3614
 13616              	.LBB2630:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 13617              		.loc 1 525 3 view .LVU3615
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 13618              		.loc 1 525 9 is_stmt 0 view .LVU3616
 13619 002a 0D22     		movs	r2, #13
 13620 002c 354D     		ldr	r5, .L1002+8
 13621 002e 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 13622              		.loc 1 526 3 is_stmt 1 view .LVU3617
 13623 0030 F4E7     		b	.L984
 13624              	.LVL999:
 13625              	.L985:
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 13626              		.loc 1 526 3 is_stmt 0 view .LVU3618
 13627              	.LBE2630:
 13628              	.LBE2629:
 13629              	.LBE2631:
 13630              	.LBE2632:
 13631              	.LBE2636:
1638:src/xeq.c     **** 			illegal(op);
 13632              		.loc 1 1638 8 is_stmt 1 view .LVU3619
1638:src/xeq.c     **** 			illegal(op);
ARM GAS  /tmp/ccK8IvWa.s 			page 395


 13633              		.loc 1 1638 12 is_stmt 0 view .LVU3620
 13634 0032 1A39     		subs	r1, r1, #26
 13635              	.LVL1000:
1638:src/xeq.c     **** 			illegal(op);
 13636              		.loc 1 1638 12 view .LVU3621
 13637 0034 0125     		movs	r5, #1
 13638 0036 88B2     		uxth	r0, r1
 13639              	.LVL1001:
1638:src/xeq.c     **** 			illegal(op);
 13640              		.loc 1 1638 12 view .LVU3622
 13641 0038 0BAB     		add	r3, sp, #44
 13642 003a 2146     		mov	r1, r4
 13643 003c 02AA     		add	r2, sp, #8
 13644 003e 0095     		str	r5, [sp]
 13645 0040 FFF7FEFF 		bl	storcl_cop
 13646              	.LVL1002:
1638:src/xeq.c     **** 			illegal(op);
 13647              		.loc 1 1638 11 view .LVU3623
 13648 0044 0028     		cmp	r0, #0
 13649 0046 4BD0     		beq	.L987
1639:src/xeq.c     **** 		else {
 13650              		.loc 1 1639 4 is_stmt 1 view .LVU3624
1639:src/xeq.c     **** 		else {
 13651              		.loc 1 1639 4 view .LVU3625
 13652              	.LVL1003:
 13653              	.LBB2637:
 13654              	.LBI2637:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13655              		.loc 1 523 5 view .LVU3626
 13656              	.LBB2638:
 524:src/xeq.c     **** 		Error = e;
 13657              		.loc 1 524 2 view .LVU3627
 524:src/xeq.c     **** 		Error = e;
 13658              		.loc 1 524 12 is_stmt 0 view .LVU3628
 13659 0048 2D4B     		ldr	r3, .L1002+4
 524:src/xeq.c     **** 		Error = e;
 13660              		.loc 1 524 5 view .LVU3629
 13661 004a 1A68     		ldr	r2, [r3]
 13662 004c 002A     		cmp	r2, #0
 13663 004e E4D1     		bne	.L999
 13664              	.LVL1004:
 13665              	.LBB2639:
 13666              	.LBI2639:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13667              		.loc 1 523 5 is_stmt 1 view .LVU3630
 13668              	.LBB2640:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 13669              		.loc 1 525 3 view .LVU3631
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 13670              		.loc 1 525 9 is_stmt 0 view .LVU3632
 13671 0050 0322     		movs	r2, #3
 13672 0052 2C4D     		ldr	r5, .L1002+8
 13673 0054 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 13674              		.loc 1 526 3 is_stmt 1 view .LVU3633
 13675 0056 E1E7     		b	.L984
 13676              	.LVL1005:
ARM GAS  /tmp/ccK8IvWa.s 			page 396


 13677              	.L1000:
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 13678              		.loc 1 526 3 is_stmt 0 view .LVU3634
 13679              	.LBE2640:
 13680              	.LBE2639:
 13681              	.LBE2638:
 13682              	.LBE2637:
 13683              	.LBB2641:
1629:src/xeq.c     **** 		copyreg(&x, get_reg_n(index));
 13684              		.loc 1 1629 3 is_stmt 1 view .LVU3635
1630:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
 13685              		.loc 1 1630 3 view .LVU3636
 13686              	.LBB2642:
 13687              	.LBB2643:
 13688              	.LBB2644:
 13689              	.LBB2645:
 919:src/xeq.c     **** }
 13690              		.loc 1 919 24 is_stmt 0 view .LVU3637
 13691 0058 284E     		ldr	r6, .L1002
 13692              	.LBE2645:
 13693              	.LBE2644:
 13694              	.LBE2643:
 13695              	.LBE2642:
 13696              	.LBB2652:
 13697              	.LBB2653:
 13698              	.LBB2654:
 13699              	.LBB2655:
 13700              	.LBB2656:
 13701              	.LBB2657:
 721:src/xeq.c     **** }
 13702              		.loc 1 721 15 view .LVU3638
 13703 005a 2A4D     		ldr	r5, .L1002+8
 13704              	.LBE2657:
 13705              	.LBE2656:
 13706              	.LBE2655:
 13707              	.LBE2654:
 13708              	.LBE2653:
 13709              	.LBE2652:
1630:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
 13710              		.loc 1 1630 15 view .LVU3639
 13711 005c FFF7FEFF 		bl	get_reg_n
 13712              	.LVL1006:
 13713              	.LBB2666:
 13714              	.LBB2650:
 13715              	.LBB2648:
 13716              	.LBB2646:
 919:src/xeq.c     **** }
 13717              		.loc 1 919 24 view .LVU3640
 13718 0060 B6F8E837 		ldrh	r3, [r6, #2024]
 13719 0064 44F20107 		movw	r7, #16385
 13720              	.LBE2646:
 13721              	.LBE2648:
 704:src/xeq.c     **** }
 13722              		.loc 1 704 2 view .LVU3641
 13723 0068 3B40     		ands	r3, r3, r7
 13724 006a B3F5804F 		cmp	r3, #16384
 13725 006e 0CBF     		ite	eq
ARM GAS  /tmp/ccK8IvWa.s 			page 397


 13726 0070 1022     		moveq	r2, #16
 13727 0072 0822     		movne	r2, #8
 13728              	.LBE2650:
 13729              	.LBE2666:
1630:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
 13730              		.loc 1 1630 15 view .LVU3642
 13731 0074 0146     		mov	r1, r0
 13732              	.LVL1007:
 13733              	.LBB2667:
 13734              	.LBI2642:
 703:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 13735              		.loc 1 703 6 is_stmt 1 view .LVU3643
 13736              	.LBB2651:
 704:src/xeq.c     **** }
 13737              		.loc 1 704 2 view .LVU3644
 13738              	.LBB2649:
 13739              	.LBI2644:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13740              		.loc 1 918 5 view .LVU3645
 13741              	.LBB2647:
 919:src/xeq.c     **** }
 13742              		.loc 1 919 2 view .LVU3646
 13743              	.LBE2647:
 13744              	.LBE2649:
 704:src/xeq.c     **** }
 13745              		.loc 1 704 2 is_stmt 0 view .LVU3647
 13746 0076 02A8     		add	r0, sp, #8
 13747              	.LVL1008:
 704:src/xeq.c     **** }
 13748              		.loc 1 704 2 view .LVU3648
 13749 0078 FFF7FEFF 		bl	xcopy
 13750              	.LVL1009:
 704:src/xeq.c     **** }
 13751              		.loc 1 704 2 view .LVU3649
 13752              	.LBE2651:
 13753              	.LBE2667:
1631:src/xeq.c     **** 		lift2_if_enabled();
 13754              		.loc 1 1631 3 is_stmt 1 view .LVU3650
1631:src/xeq.c     **** 		lift2_if_enabled();
 13755              		.loc 1 1631 15 is_stmt 0 view .LVU3651
 13756 007c 601C     		adds	r0, r4, #1
 13757 007e FFF7FEFF 		bl	get_reg_n
 13758              	.LVL1010:
 13759              	.LBB2668:
 13760              	.LBB2669:
 13761              	.LBB2670:
 13762              	.LBB2671:
 919:src/xeq.c     **** }
 13763              		.loc 1 919 24 view .LVU3652
 13764 0082 B6F8E837 		ldrh	r3, [r6, #2024]
 13765              	.LBE2671:
 13766              	.LBE2670:
 704:src/xeq.c     **** }
 13767              		.loc 1 704 2 view .LVU3653
 13768 0086 1F40     		ands	r7, r7, r3
 13769 0088 B7F5804F 		cmp	r7, #16384
 13770              	.LBE2669:
ARM GAS  /tmp/ccK8IvWa.s 			page 398


 13771              	.LBE2668:
1631:src/xeq.c     **** 		lift2_if_enabled();
 13772              		.loc 1 1631 15 view .LVU3654
 13773 008c 0146     		mov	r1, r0
 13774              	.LVL1011:
 13775              	.LBB2675:
 13776              	.LBI2668:
 703:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 13777              		.loc 1 703 6 is_stmt 1 view .LVU3655
 13778              	.LBB2674:
 704:src/xeq.c     **** }
 13779              		.loc 1 704 2 view .LVU3656
 13780              	.LBB2673:
 13781              	.LBI2670:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13782              		.loc 1 918 5 view .LVU3657
 13783              	.LBB2672:
 919:src/xeq.c     **** }
 13784              		.loc 1 919 2 view .LVU3658
 13785              	.LBE2672:
 13786              	.LBE2673:
 704:src/xeq.c     **** }
 13787              		.loc 1 704 2 is_stmt 0 view .LVU3659
 13788 008e 0CBF     		ite	eq
 13789 0090 1022     		moveq	r2, #16
 13790 0092 0822     		movne	r2, #8
 13791 0094 0BA8     		add	r0, sp, #44
 13792              	.LVL1012:
 704:src/xeq.c     **** }
 13793              		.loc 1 704 2 view .LVU3660
 13794 0096 FFF7FEFF 		bl	xcopy
 13795              	.LVL1013:
 704:src/xeq.c     **** }
 13796              		.loc 1 704 2 view .LVU3661
 13797              	.LBE2674:
 13798              	.LBE2675:
1632:src/xeq.c     **** 		copyreg(StackBase, &x);
 13799              		.loc 1 1632 3 is_stmt 1 view .LVU3662
 13800              	.LBB2676:
 13801              	.LBI2652:
 729:src/xeq.c     **** 	lift_if_enabled();
 13802              		.loc 1 729 13 view .LVU3663
 13803              	.LBB2664:
 730:src/xeq.c     **** 	lift();
 13804              		.loc 1 730 2 view .LVU3664
 13805              	.LBB2662:
 13806              	.LBI2654:
 724:src/xeq.c     **** 	if (get_lift())
 13807              		.loc 1 724 6 view .LVU3665
 13808              	.LBB2660:
 725:src/xeq.c     **** 		lift();
 13809              		.loc 1 725 2 view .LVU3666
 13810              	.LBB2659:
 13811              	.LBI2656:
 720:src/xeq.c     **** 	return State2.state_lift;
 13812              		.loc 1 720 12 view .LVU3667
 13813              	.LBB2658:
ARM GAS  /tmp/ccK8IvWa.s 			page 399


 721:src/xeq.c     **** }
 13814              		.loc 1 721 2 view .LVU3668
 721:src/xeq.c     **** }
 13815              		.loc 1 721 15 is_stmt 0 view .LVU3669
 13816 009a EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 13817              	.LBE2658:
 13818              	.LBE2659:
 725:src/xeq.c     **** 		lift();
 13819              		.loc 1 725 5 view .LVU3670
 13820 009c 5A06     		lsls	r2, r3, #25
 13821 009e 2AD4     		bmi	.L1001
 13822              	.L981:
 13823              	.LBE2660:
 13824              	.LBE2662:
 731:src/xeq.c     **** }
 13825              		.loc 1 731 2 is_stmt 1 view .LVU3671
 13826 00a0 FFF7FEFF 		bl	lift
 13827              	.LVL1014:
 13828              	.LBE2664:
 13829              	.LBE2676:
1633:src/xeq.c     **** 		copyreg(get_reg_n(regY_idx), &y);
 13830              		.loc 1 1633 3 view .LVU3672
 13831              	.LBB2677:
 13832              	.LBB2678:
 13833              	.LBB2679:
 13834              	.LBB2680:
 919:src/xeq.c     **** }
 13835              		.loc 1 919 24 is_stmt 0 view .LVU3673
 13836 00a4 B6F8E837 		ldrh	r3, [r6, #2024]
 13837              	.LBE2680:
 13838              	.LBE2679:
 13839              	.LBE2678:
 13840              	.LBE2677:
1633:src/xeq.c     **** 		copyreg(get_reg_n(regY_idx), &y);
 13841              		.loc 1 1633 3 view .LVU3674
 13842 00a8 1748     		ldr	r0, .L1002+12
 13843              	.LVL1015:
 13844              	.LBB2684:
 13845              	.LBI2677:
 703:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 13846              		.loc 1 703 6 is_stmt 1 view .LVU3675
 13847              	.LBB2683:
 704:src/xeq.c     **** }
 13848              		.loc 1 704 2 view .LVU3676
 13849              	.LBB2682:
 13850              	.LBI2679:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13851              		.loc 1 918 5 view .LVU3677
 13852              	.LBB2681:
 919:src/xeq.c     **** }
 13853              		.loc 1 919 2 view .LVU3678
 919:src/xeq.c     **** }
 13854              		.loc 1 919 24 is_stmt 0 view .LVU3679
 13855 00aa 44F20104 		movw	r4, #16385
 13856              	.LVL1016:
 919:src/xeq.c     **** }
 13857              		.loc 1 919 24 view .LVU3680
ARM GAS  /tmp/ccK8IvWa.s 			page 400


 13858              	.LBE2681:
 13859              	.LBE2682:
 704:src/xeq.c     **** }
 13860              		.loc 1 704 2 view .LVU3681
 13861 00ae 2340     		ands	r3, r3, r4
 13862 00b0 B3F5804F 		cmp	r3, #16384
 13863 00b4 0CBF     		ite	eq
 13864 00b6 1022     		moveq	r2, #16
 13865 00b8 0822     		movne	r2, #8
 13866 00ba 02A9     		add	r1, sp, #8
 13867              	.LVL1017:
 704:src/xeq.c     **** }
 13868              		.loc 1 704 2 view .LVU3682
 13869 00bc 0068     		ldr	r0, [r0]
 13870              	.LVL1018:
 704:src/xeq.c     **** }
 13871              		.loc 1 704 2 view .LVU3683
 13872 00be FFF7FEFF 		bl	xcopy
 13873              	.LVL1019:
 704:src/xeq.c     **** }
 13874              		.loc 1 704 2 view .LVU3684
 13875              	.LBE2683:
 13876              	.LBE2684:
1634:src/xeq.c     **** 	} else {
 13877              		.loc 1 1634 3 is_stmt 1 view .LVU3685
 13878 00c2 6520     		movs	r0, #101
 13879 00c4 FFF7FEFF 		bl	get_reg_n
 13880              	.LVL1020:
 13881              	.LBB2685:
 13882              	.LBI2685:
 703:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 13883              		.loc 1 703 6 view .LVU3686
 13884              	.LBB2686:
 704:src/xeq.c     **** }
 13885              		.loc 1 704 2 view .LVU3687
 13886              	.LBB2687:
 13887              	.LBI2687:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13888              		.loc 1 918 5 view .LVU3688
 13889              	.LBB2688:
 919:src/xeq.c     **** }
 13890              		.loc 1 919 2 view .LVU3689
 919:src/xeq.c     **** }
 13891              		.loc 1 919 24 is_stmt 0 view .LVU3690
 13892 00c8 B6F8E837 		ldrh	r3, [r6, #2024]
 13893              	.LBE2688:
 13894              	.LBE2687:
 704:src/xeq.c     **** }
 13895              		.loc 1 704 2 view .LVU3691
 13896 00cc 1C40     		ands	r4, r4, r3
 13897 00ce B4F5804F 		cmp	r4, #16384
 13898 00d2 0BA9     		add	r1, sp, #44
 13899              	.LVL1021:
 704:src/xeq.c     **** }
 13900              		.loc 1 704 2 view .LVU3692
 13901 00d4 0CBF     		ite	eq
 13902 00d6 1022     		moveq	r2, #16
ARM GAS  /tmp/ccK8IvWa.s 			page 401


 13903 00d8 0822     		movne	r2, #8
 13904 00da FFF7FEFF 		bl	xcopy
 13905              	.LVL1022:
 704:src/xeq.c     **** }
 13906              		.loc 1 704 2 view .LVU3693
 13907              	.LBE2686:
 13908              	.LBE2685:
 13909              	.LBE2641:
 13910 00de 9DE7     		b	.L984
 13911              	.LVL1023:
 13912              	.L987:
1641:src/xeq.c     **** 			setXY(&r1, &r2);
 13913              		.loc 1 1641 4 is_stmt 1 view .LVU3694
 13914 00e0 FFF7FEFF 		bl	setlastXY
 13915              	.LVL1024:
1642:src/xeq.c     **** 		}
 13916              		.loc 1 1642 4 view .LVU3695
 13917              	.LBB2690:
 13918              	.LBI2690:
 826:src/xeq.c     **** 	setX(x);
 13919              		.loc 1 826 6 view .LVU3696
 13920              	.LBB2691:
 827:src/xeq.c     **** 	setY(y);
 13921              		.loc 1 827 2 view .LVU3697
 13922              	.LBB2692:
 13923              	.LBI2692:
 795:src/xeq.c     **** 	setRegister(regX_idx, x);
 13924              		.loc 1 795 6 view .LVU3698
 13925              	.LBB2693:
 796:src/xeq.c     **** }
 13926              		.loc 1 796 2 view .LVU3699
 13927 00e4 02A9     		add	r1, sp, #8
 13928              	.LVL1025:
 796:src/xeq.c     **** }
 13929              		.loc 1 796 2 is_stmt 0 view .LVU3700
 13930 00e6 6420     		movs	r0, #100
 13931 00e8 FFF7FEFF 		bl	setRegister
 13932              	.LVL1026:
 796:src/xeq.c     **** }
 13933              		.loc 1 796 2 view .LVU3701
 13934              	.LBE2693:
 13935              	.LBE2692:
 828:src/xeq.c     **** }
 13936              		.loc 1 828 2 is_stmt 1 view .LVU3702
 13937              	.LBB2694:
 13938              	.LBI2694:
 803:src/xeq.c     **** 	setRegister(regY_idx, y);
 13939              		.loc 1 803 6 view .LVU3703
 13940              	.LBB2695:
 804:src/xeq.c     **** }
 13941              		.loc 1 804 2 view .LVU3704
 13942 00ec 0BA9     		add	r1, sp, #44
 13943              	.LVL1027:
 804:src/xeq.c     **** }
 13944              		.loc 1 804 2 is_stmt 0 view .LVU3705
 13945 00ee 6520     		movs	r0, #101
 13946 00f0 FFF7FEFF 		bl	setRegister
ARM GAS  /tmp/ccK8IvWa.s 			page 402


 13947              	.LVL1028:
 804:src/xeq.c     **** }
 13948              		.loc 1 804 2 view .LVU3706
 13949 00f4 91E7     		b	.L999
 13950              	.LVL1029:
 13951              	.L1001:
 804:src/xeq.c     **** }
 13952              		.loc 1 804 2 view .LVU3707
 13953              	.LBE2695:
 13954              	.LBE2694:
 13955              	.LBE2691:
 13956              	.LBE2690:
 13957              	.LBB2696:
 13958              	.LBB2689:
 13959              	.LBB2665:
 13960              	.LBB2663:
 13961              	.LBB2661:
 726:src/xeq.c     **** }
 13962              		.loc 1 726 3 is_stmt 1 view .LVU3708
 13963 00f6 FFF7FEFF 		bl	lift
 13964              	.LVL1030:
 13965 00fa D1E7     		b	.L981
 13966              	.L1003:
 13967              		.align	2
 13968              	.L1002:
 13969 00fc 00000000 		.word	PersistentRam
 13970 0100 00000000 		.word	Error
 13971 0104 00000000 		.word	StateWhileOn
 13972 0108 00000000 		.word	StackBase
 13973              	.LBE2661:
 13974              	.LBE2663:
 13975              	.LBE2665:
 13976              	.LBE2689:
 13977              	.LBE2696:
 13978              	.LBE2699:
 13979              	.LBE2702:
 13980              		.cfi_endproc
 13981              	.LFE118:
 13983              		.section	.text.cmdircl,"ax",%progbits
 13984              		.align	1
 13985              		.p2align 2,,3
 13986              		.global	cmdircl
 13987              		.syntax unified
 13988              		.thumb
 13989              		.thumb_func
 13990              		.fpu fpv4-sp-d16
 13992              	cmdircl:
 13993              	.LVL1031:
 13994              	.LFB119:
1662:src/xeq.c     **** 	if (is_intmode())
 13995              		.loc 1 1662 46 view -0
 13996              		.cfi_startproc
 13997              		@ args = 0, pretend = 0, frame = 0
 13998              		@ frame_needed = 0, uses_anonymous_args = 0
 13999              		@ link register save eliminated.
1663:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 14000              		.loc 1 1663 2 view .LVU3710
ARM GAS  /tmp/ccK8IvWa.s 			page 403


1663:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 14001              		.loc 1 1663 6 is_stmt 0 view .LVU3711
 14002 0000 064B     		ldr	r3, .L1006
 14003 0002 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
1663:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 14004              		.loc 1 1663 5 view .LVU3712
 14005 0006 12F00102 		ands	r2, r2, #1
1662:src/xeq.c     **** 	if (is_intmode())
 14006              		.loc 1 1662 46 view .LVU3713
 14007 000a 0146     		mov	r1, r0
 14008              	.LVL1032:
1663:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 14009              		.loc 1 1663 5 view .LVU3714
 14010 000c 02D0     		beq	.L1005
1664:src/xeq.c     **** 	else
 14011              		.loc 1 1664 3 is_stmt 1 view .LVU3715
 14012              	.LVL1033:
 14013              	.LBB2703:
 14014              	.LBI2703:
1557:src/xeq.c     **** 	do_rcl(arg, op);
 14015              		.loc 1 1557 6 view .LVU3716
 14016              	.LBB2704:
1558:src/xeq.c     **** }
 14017              		.loc 1 1558 2 view .LVU3717
 14018 000e 0A21     		movs	r1, #10
 14019 0010 FFF7FEBF 		b	do_rcl
 14020              	.LVL1034:
 14021              	.L1005:
1558:src/xeq.c     **** }
 14022              		.loc 1 1558 2 is_stmt 0 view .LVU3718
 14023              	.LBE2704:
 14024              	.LBE2703:
1666:src/xeq.c     **** }
 14025              		.loc 1 1666 3 is_stmt 1 view .LVU3719
 14026 0014 6420     		movs	r0, #100
 14027              	.LVL1035:
1666:src/xeq.c     **** }
 14028              		.loc 1 1666 3 is_stmt 0 view .LVU3720
 14029 0016 FFF7FEBF 		b	register_from_int
 14030              	.LVL1036:
 14031              	.L1007:
1666:src/xeq.c     **** }
 14032              		.loc 1 1666 3 view .LVU3721
 14033 001a 00BF     		.align	2
 14034              	.L1006:
 14035 001c 00000000 		.word	PersistentRam
 14036              		.cfi_endproc
 14037              	.LFE119:
 14039              		.section	.text.cmdrrcl,"ax",%progbits
 14040              		.align	1
 14041              		.p2align 2,,3
 14042              		.global	cmdrrcl
 14043              		.syntax unified
 14044              		.thumb
 14045              		.thumb_func
 14046              		.fpu fpv4-sp-d16
 14048              	cmdrrcl:
ARM GAS  /tmp/ccK8IvWa.s 			page 404


 14049              	.LVL1037:
 14050              	.LFB120:
1670:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
 14051              		.loc 1 1670 46 is_stmt 1 view -0
 14052              		.cfi_startproc
 14053              		@ args = 0, pretend = 0, frame = 40
 14054              		@ frame_needed = 0, uses_anonymous_args = 0
1671:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 14055              		.loc 1 1671 2 view .LVU3723
1670:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
 14056              		.loc 1 1670 46 is_stmt 0 view .LVU3724
 14057 0000 30B5     		push	{r4, r5, lr}
 14058              		.cfi_def_cfa_offset 12
 14059              		.cfi_offset 4, -12
 14060              		.cfi_offset 5, -8
 14061              		.cfi_offset 14, -4
1671:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 14062              		.loc 1 1671 28 view .LVU3725
 14063 0002 1E4C     		ldr	r4, .L1015
 14064 0004 94F8E937 		ldrb	r3, [r4, #2025]	@ zero_extendqisi2
1672:src/xeq.c     **** 
 14065              		.loc 1 1672 26 view .LVU3726
 14066 0008 8029     		cmp	r1, #128
1670:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
 14067              		.loc 1 1670 46 view .LVU3727
 14068 000a 8BB0     		sub	sp, sp, #44
 14069              		.cfi_def_cfa_offset 56
1672:src/xeq.c     **** 
 14070              		.loc 1 1672 26 view .LVU3728
 14071 000c 0CBF     		ite	eq
 14072 000e 0122     		moveq	r2, #1
 14073 0010 0022     		movne	r2, #0
1671:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 14074              		.loc 1 1671 28 view .LVU3729
 14075 0012 C3F38015 		ubfx	r5, r3, #6, #1
 14076              	.LVL1038:
1672:src/xeq.c     **** 
 14077              		.loc 1 1672 2 is_stmt 1 view .LVU3730
1674:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 14078              		.loc 1 1674 2 view .LVU3731
1674:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 14079              		.loc 1 1674 5 is_stmt 0 view .LVU3732
 14080 0016 25D0     		beq	.L1013
 14081              	.LVL1039:
 14082              	.L1009:
1680:src/xeq.c     **** 	if (is_intmode()) {
 14083              		.loc 1 1680 2 is_stmt 1 view .LVU3733
1680:src/xeq.c     **** 	if (is_intmode()) {
 14084              		.loc 1 1680 21 is_stmt 0 view .LVU3734
 14085 0018 94F8E937 		ldrb	r3, [r4, #2025]	@ zero_extendqisi2
1681:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 14086              		.loc 1 1681 6 view .LVU3735
 14087 001c 94F8E817 		ldrb	r1, [r4, #2024]	@ zero_extendqisi2
 14088              	.LVL1040:
1680:src/xeq.c     **** 	if (is_intmode()) {
 14089              		.loc 1 1680 21 view .LVU3736
 14090 0020 62F38613 		bfi	r3, r2, #6, #1
ARM GAS  /tmp/ccK8IvWa.s 			page 405


1681:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 14091              		.loc 1 1681 5 view .LVU3737
 14092 0024 11F0010F 		tst	r1, #1
1680:src/xeq.c     **** 	if (is_intmode()) {
 14093              		.loc 1 1680 21 view .LVU3738
 14094 0028 84F8E937 		strb	r3, [r4, #2025]
 14095              	.LVL1041:
1681:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 14096              		.loc 1 1681 2 is_stmt 1 view .LVU3739
1682:src/xeq.c     **** 		UState.mode_double = was_dbl;
 14097              		.loc 1 1682 3 is_stmt 0 view .LVU3740
 14098 002c 0146     		mov	r1, r0
1681:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 14099              		.loc 1 1681 5 view .LVU3741
 14100 002e 0ED1     		bne	.L1014
 14101              	.LBB2712:
1686:src/xeq.c     **** 		getRegister(&x, arg);
 14102              		.loc 1 1686 3 is_stmt 1 view .LVU3742
1687:src/xeq.c     **** 
 14103              		.loc 1 1687 3 view .LVU3743
 14104 0030 01A8     		add	r0, sp, #4
 14105              	.LVL1042:
1687:src/xeq.c     **** 
 14106              		.loc 1 1687 3 is_stmt 0 view .LVU3744
 14107 0032 FFF7FEFF 		bl	getRegister
 14108              	.LVL1043:
1689:src/xeq.c     **** 		setX(&x);
 14109              		.loc 1 1689 3 is_stmt 1 view .LVU3745
1689:src/xeq.c     **** 		setX(&x);
 14110              		.loc 1 1689 22 is_stmt 0 view .LVU3746
 14111 0036 94F8E937 		ldrb	r3, [r4, #2025]	@ zero_extendqisi2
 14112              	.LBB2713:
 14113              	.LBB2714:
 796:src/xeq.c     **** }
 14114              		.loc 1 796 2 view .LVU3747
 14115 003a 01A9     		add	r1, sp, #4
 14116              	.LBE2714:
 14117              	.LBE2713:
1689:src/xeq.c     **** 		setX(&x);
 14118              		.loc 1 1689 22 view .LVU3748
 14119 003c 65F38613 		bfi	r3, r5, #6, #1
 14120              	.LBB2717:
 14121              	.LBB2715:
 796:src/xeq.c     **** }
 14122              		.loc 1 796 2 view .LVU3749
 14123 0040 6420     		movs	r0, #100
 14124              	.LBE2715:
 14125              	.LBE2717:
1689:src/xeq.c     **** 		setX(&x);
 14126              		.loc 1 1689 22 view .LVU3750
 14127 0042 84F8E937 		strb	r3, [r4, #2025]
1690:src/xeq.c     **** 	}
 14128              		.loc 1 1690 3 is_stmt 1 view .LVU3751
 14129              	.LVL1044:
 14130              	.LBB2718:
 14131              	.LBI2713:
 795:src/xeq.c     **** 	setRegister(regX_idx, x);
ARM GAS  /tmp/ccK8IvWa.s 			page 406


 14132              		.loc 1 795 6 view .LVU3752
 14133              	.LBB2716:
 796:src/xeq.c     **** }
 14134              		.loc 1 796 2 view .LVU3753
 14135 0046 FFF7FEFF 		bl	setRegister
 14136              	.LVL1045:
 14137              	.L1008:
 796:src/xeq.c     **** }
 14138              		.loc 1 796 2 is_stmt 0 view .LVU3754
 14139              	.LBE2716:
 14140              	.LBE2718:
 14141              	.LBE2712:
1692:src/xeq.c     **** 
 14142              		.loc 1 1692 1 view .LVU3755
 14143 004a 0BB0     		add	sp, sp, #44
 14144              		.cfi_remember_state
 14145              		.cfi_def_cfa_offset 12
 14146              		@ sp needed
 14147 004c 30BD     		pop	{r4, r5, pc}
 14148              	.LVL1046:
 14149              	.L1014:
 14150              		.cfi_restore_state
1682:src/xeq.c     **** 		UState.mode_double = was_dbl;
 14151              		.loc 1 1682 3 is_stmt 1 view .LVU3756
 14152 004e 6420     		movs	r0, #100
 14153              	.LVL1047:
1682:src/xeq.c     **** 		UState.mode_double = was_dbl;
 14154              		.loc 1 1682 3 is_stmt 0 view .LVU3757
 14155 0050 FFF7FEFF 		bl	int_from_register
 14156              	.LVL1048:
1683:src/xeq.c     **** 	}
 14157              		.loc 1 1683 3 is_stmt 1 view .LVU3758
1683:src/xeq.c     **** 	}
 14158              		.loc 1 1683 22 is_stmt 0 view .LVU3759
 14159 0054 94F8E937 		ldrb	r3, [r4, #2025]	@ zero_extendqisi2
 14160 0058 65F38613 		bfi	r3, r5, #6, #1
 14161 005c 84F8E937 		strb	r3, [r4, #2025]
1692:src/xeq.c     **** 
 14162              		.loc 1 1692 1 view .LVU3760
 14163 0060 0BB0     		add	sp, sp, #44
 14164              		.cfi_remember_state
 14165              		.cfi_def_cfa_offset 12
 14166              		@ sp needed
 14167 0062 30BD     		pop	{r4, r5, pc}
 14168              	.LVL1049:
 14169              	.L1013:
 14170              		.cfi_restore_state
1674:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 14171              		.loc 1 1674 14 discriminator 1 view .LVU3761
 14172 0064 A0F16403 		sub	r3, r0, #100
 14173              	.LVL1050:
1674:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 14174              		.loc 1 1674 14 discriminator 1 view .LVU3762
 14175 0068 0B2B     		cmp	r3, #11
 14176 006a D5D8     		bhi	.L1009
1676:src/xeq.c     **** 		return;
 14177              		.loc 1 1676 3 is_stmt 1 view .LVU3763
ARM GAS  /tmp/ccK8IvWa.s 			page 407


 14178              	.LVL1051:
 14179              	.LBB2719:
 14180              	.LBI2719:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14181              		.loc 1 523 5 view .LVU3764
 14182              	.LBB2720:
 524:src/xeq.c     **** 		Error = e;
 14183              		.loc 1 524 2 view .LVU3765
 524:src/xeq.c     **** 		Error = e;
 14184              		.loc 1 524 12 is_stmt 0 view .LVU3766
 14185 006c 044B     		ldr	r3, .L1015+4
 524:src/xeq.c     **** 		Error = e;
 14186              		.loc 1 524 5 view .LVU3767
 14187 006e 1A68     		ldr	r2, [r3]
 14188              	.LVL1052:
 524:src/xeq.c     **** 		Error = e;
 14189              		.loc 1 524 5 view .LVU3768
 14190 0070 002A     		cmp	r2, #0
 14191 0072 EAD1     		bne	.L1008
 14192              	.LVL1053:
 14193              	.LBB2721:
 14194              	.LBI2721:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14195              		.loc 1 523 5 is_stmt 1 view .LVU3769
 14196              	.LBB2722:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 14197              		.loc 1 525 3 view .LVU3770
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 14198              		.loc 1 525 9 is_stmt 0 view .LVU3771
 14199 0074 0822     		movs	r2, #8
 14200 0076 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 14201              		.loc 1 526 3 is_stmt 1 view .LVU3772
 14202 0078 E7E7     		b	.L1008
 14203              	.L1016:
 14204 007a 00BF     		.align	2
 14205              	.L1015:
 14206 007c 00000000 		.word	PersistentRam
 14207 0080 00000000 		.word	Error
 14208              	.LBE2722:
 14209              	.LBE2721:
 14210              	.LBE2720:
 14211              	.LBE2719:
 14212              		.cfi_endproc
 14213              	.LFE120:
 14215              		.section	.text.swap_reg,"ax",%progbits
 14216              		.align	1
 14217              		.p2align 2,,3
 14218              		.global	swap_reg
 14219              		.syntax unified
 14220              		.thumb
 14221              		.thumb_func
 14222              		.fpu fpv4-sp-d16
 14224              	swap_reg:
 14225              	.LVL1054:
 14226              	.LFB121:
1697:src/xeq.c     **** 	REGISTER t;
ARM GAS  /tmp/ccK8IvWa.s 			page 408


 14227              		.loc 1 1697 41 view -0
 14228              		.cfi_startproc
 14229              		@ args = 0, pretend = 0, frame = 16
 14230              		@ frame_needed = 0, uses_anonymous_args = 0
1698:src/xeq.c     **** 
 14231              		.loc 1 1698 2 view .LVU3774
1700:src/xeq.c     **** 	copyreg(a, b);
 14232              		.loc 1 1700 2 view .LVU3775
1697:src/xeq.c     **** 	REGISTER t;
 14233              		.loc 1 1697 41 is_stmt 0 view .LVU3776
 14234 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 14235              		.cfi_def_cfa_offset 20
 14236              		.cfi_offset 4, -20
 14237              		.cfi_offset 5, -16
 14238              		.cfi_offset 6, -12
 14239              		.cfi_offset 7, -8
 14240              		.cfi_offset 14, -4
 14241              	.LBB2723:
 14242              	.LBB2724:
 14243              	.LBB2725:
 14244              	.LBB2726:
 919:src/xeq.c     **** }
 14245              		.loc 1 919 24 view .LVU3777
 14246 0002 164F     		ldr	r7, .L1025
 14247 0004 B7F8E837 		ldrh	r3, [r7, #2024]
 14248 0008 44F20104 		movw	r4, #16385
 14249              	.LBE2726:
 14250              	.LBE2725:
 704:src/xeq.c     **** }
 14251              		.loc 1 704 2 view .LVU3778
 14252 000c 2340     		ands	r3, r3, r4
 14253              	.LBE2724:
 14254              	.LBE2723:
1697:src/xeq.c     **** 	REGISTER t;
 14255              		.loc 1 1697 41 view .LVU3779
 14256 000e 85B0     		sub	sp, sp, #20
 14257              		.cfi_def_cfa_offset 40
 14258              	.LVL1055:
 14259              	.LBB2731:
 14260              	.LBB2729:
 704:src/xeq.c     **** }
 14261              		.loc 1 704 2 view .LVU3780
 14262 0010 B3F5804F 		cmp	r3, #16384
 14263 0014 0CBF     		ite	eq
 14264 0016 1022     		moveq	r2, #16
 14265 0018 0822     		movne	r2, #8
 14266              	.LBE2729:
 14267              	.LBE2731:
1697:src/xeq.c     **** 	REGISTER t;
 14268              		.loc 1 1697 41 view .LVU3781
 14269 001a 0D46     		mov	r5, r1
 14270 001c 0646     		mov	r6, r0
 14271              	.LVL1056:
 14272              	.LBB2732:
 14273              	.LBI2723:
 703:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14274              		.loc 1 703 6 is_stmt 1 view .LVU3782
ARM GAS  /tmp/ccK8IvWa.s 			page 409


 14275              	.LBB2730:
 704:src/xeq.c     **** }
 14276              		.loc 1 704 2 view .LVU3783
 14277              	.LBB2728:
 14278              	.LBI2725:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14279              		.loc 1 918 5 view .LVU3784
 14280              	.LBB2727:
 919:src/xeq.c     **** }
 14281              		.loc 1 919 2 view .LVU3785
 14282              	.LBE2727:
 14283              	.LBE2728:
 704:src/xeq.c     **** }
 14284              		.loc 1 704 2 is_stmt 0 view .LVU3786
 14285 001e 0146     		mov	r1, r0
 14286              	.LVL1057:
 704:src/xeq.c     **** }
 14287              		.loc 1 704 2 view .LVU3787
 14288 0020 6846     		mov	r0, sp
 14289              	.LVL1058:
 704:src/xeq.c     **** }
 14290              		.loc 1 704 2 view .LVU3788
 14291 0022 FFF7FEFF 		bl	xcopy
 14292              	.LVL1059:
 704:src/xeq.c     **** }
 14293              		.loc 1 704 2 view .LVU3789
 14294              	.LBE2730:
 14295              	.LBE2732:
1701:src/xeq.c     **** 	copyreg(b, &t);
 14296              		.loc 1 1701 2 is_stmt 1 view .LVU3790
 14297              	.LBB2733:
 14298              	.LBI2733:
 703:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14299              		.loc 1 703 6 view .LVU3791
 14300              	.LBB2734:
 704:src/xeq.c     **** }
 14301              		.loc 1 704 2 view .LVU3792
 14302              	.LBB2735:
 14303              	.LBI2735:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14304              		.loc 1 918 5 view .LVU3793
 14305              	.LBB2736:
 919:src/xeq.c     **** }
 14306              		.loc 1 919 2 view .LVU3794
 919:src/xeq.c     **** }
 14307              		.loc 1 919 24 is_stmt 0 view .LVU3795
 14308 0026 B7F8E837 		ldrh	r3, [r7, #2024]
 14309              	.LBE2736:
 14310              	.LBE2735:
 704:src/xeq.c     **** }
 14311              		.loc 1 704 2 view .LVU3796
 14312 002a 2340     		ands	r3, r3, r4
 14313 002c B3F5804F 		cmp	r3, #16384
 14314 0030 0CBF     		ite	eq
 14315 0032 1022     		moveq	r2, #16
 14316 0034 0822     		movne	r2, #8
 14317 0036 2946     		mov	r1, r5
ARM GAS  /tmp/ccK8IvWa.s 			page 410


 14318 0038 3046     		mov	r0, r6
 14319 003a FFF7FEFF 		bl	xcopy
 14320              	.LVL1060:
 704:src/xeq.c     **** }
 14321              		.loc 1 704 2 view .LVU3797
 14322              	.LBE2734:
 14323              	.LBE2733:
1702:src/xeq.c     **** }
 14324              		.loc 1 1702 2 is_stmt 1 view .LVU3798
 14325              	.LBB2737:
 14326              	.LBI2737:
 703:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14327              		.loc 1 703 6 view .LVU3799
 14328              	.LBB2738:
 704:src/xeq.c     **** }
 14329              		.loc 1 704 2 view .LVU3800
 14330              	.LBB2739:
 14331              	.LBI2739:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14332              		.loc 1 918 5 view .LVU3801
 14333              	.LBB2740:
 919:src/xeq.c     **** }
 14334              		.loc 1 919 2 view .LVU3802
 919:src/xeq.c     **** }
 14335              		.loc 1 919 24 is_stmt 0 view .LVU3803
 14336 003e B7F8E837 		ldrh	r3, [r7, #2024]
 14337              	.LBE2740:
 14338              	.LBE2739:
 704:src/xeq.c     **** }
 14339              		.loc 1 704 2 view .LVU3804
 14340 0042 1C40     		ands	r4, r4, r3
 14341 0044 B4F5804F 		cmp	r4, #16384
 14342 0048 2846     		mov	r0, r5
 14343 004a 6946     		mov	r1, sp
 14344 004c 0CBF     		ite	eq
 14345 004e 1022     		moveq	r2, #16
 14346 0050 0822     		movne	r2, #8
 14347 0052 FFF7FEFF 		bl	xcopy
 14348              	.LVL1061:
 704:src/xeq.c     **** }
 14349              		.loc 1 704 2 view .LVU3805
 14350              	.LBE2738:
 14351              	.LBE2737:
1703:src/xeq.c     **** 
 14352              		.loc 1 1703 1 view .LVU3806
 14353 0056 05B0     		add	sp, sp, #20
 14354              		.cfi_def_cfa_offset 20
 14355              		@ sp needed
 14356 0058 F0BD     		pop	{r4, r5, r6, r7, pc}
 14357              	.LVL1062:
 14358              	.L1026:
1703:src/xeq.c     **** 
 14359              		.loc 1 1703 1 view .LVU3807
 14360 005a 00BF     		.align	2
 14361              	.L1025:
 14362 005c 00000000 		.word	PersistentRam
 14363              		.cfi_endproc
ARM GAS  /tmp/ccK8IvWa.s 			page 411


 14364              	.LFE121:
 14366              		.section	.text.cmdswap,"ax",%progbits
 14367              		.align	1
 14368              		.p2align 2,,3
 14369              		.global	cmdswap
 14370              		.syntax unified
 14371              		.thumb
 14372              		.thumb_func
 14373              		.fpu fpv4-sp-d16
 14375              	cmdswap:
 14376              	.LVL1063:
 14377              	.LFB122:
1705:src/xeq.c     **** 	int idx;
 14378              		.loc 1 1705 46 is_stmt 1 view -0
 14379              		.cfi_startproc
 14380              		@ args = 0, pretend = 0, frame = 0
 14381              		@ frame_needed = 0, uses_anonymous_args = 0
1706:src/xeq.c     **** 
 14382              		.loc 1 1706 2 view .LVU3809
1708:src/xeq.c     **** 		idx = regX_idx;
 14383              		.loc 1 1708 2 view .LVU3810
1708:src/xeq.c     **** 		idx = regX_idx;
 14384              		.loc 1 1708 5 is_stmt 0 view .LVU3811
 14385 0000 1F29     		cmp	r1, #31
1705:src/xeq.c     **** 	int idx;
 14386              		.loc 1 1705 46 view .LVU3812
 14387 0002 70B5     		push	{r4, r5, r6, lr}
 14388              		.cfi_def_cfa_offset 16
 14389              		.cfi_offset 4, -16
 14390              		.cfi_offset 5, -12
 14391              		.cfi_offset 6, -8
 14392              		.cfi_offset 14, -4
1705:src/xeq.c     **** 	int idx;
 14393              		.loc 1 1705 46 view .LVU3813
 14394 0004 0546     		mov	r5, r0
1708:src/xeq.c     **** 		idx = regX_idx;
 14395              		.loc 1 1708 5 view .LVU3814
 14396 0006 11D0     		beq	.L1028
1710:src/xeq.c     **** 		idx = regZ_idx;
 14397              		.loc 1 1710 10 view .LVU3815
 14398 0008 2029     		cmp	r1, #32
 14399 000a 0C46     		mov	r4, r1
1710:src/xeq.c     **** 		idx = regZ_idx;
 14400              		.loc 1 1710 7 is_stmt 1 view .LVU3816
1710:src/xeq.c     **** 		idx = regZ_idx;
 14401              		.loc 1 1710 10 is_stmt 0 view .LVU3817
 14402 000c 2BD0     		beq	.L1029
1713:src/xeq.c     **** 
 14403              		.loc 1 1713 3 is_stmt 1 view .LVU3818
 14404              	.LVL1064:
1715:src/xeq.c     **** 
 14405              		.loc 1 1715 2 view .LVU3819
 14406 000e 01F15300 		add	r0, r1, #83
 14407              	.LVL1065:
1715:src/xeq.c     **** 
 14408              		.loc 1 1715 2 is_stmt 0 view .LVU3820
 14409 0012 FFF7FEFF 		bl	get_reg_n
ARM GAS  /tmp/ccK8IvWa.s 			page 412


 14410              	.LVL1066:
1715:src/xeq.c     **** 
 14411              		.loc 1 1715 2 view .LVU3821
 14412 0016 0646     		mov	r6, r0
 14413 0018 2846     		mov	r0, r5
 14414 001a FFF7FEFF 		bl	get_reg_n
 14415              	.LVL1067:
 14416 001e 0146     		mov	r1, r0
 14417 0020 3046     		mov	r0, r6
 14418 0022 FFF7FEFF 		bl	swap_reg
 14419              	.LVL1068:
1717:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 14420              		.loc 1 1717 2 is_stmt 1 view .LVU3822
1717:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 14421              		.loc 1 1717 5 is_stmt 0 view .LVU3823
 14422 0026 1E2C     		cmp	r4, #30
 14423 0028 2AD8     		bhi	.L1033
1721:src/xeq.c     **** 
 14424              		.loc 1 1721 1 view .LVU3824
 14425 002a 70BD     		pop	{r4, r5, r6, pc}
 14426              	.LVL1069:
 14427              	.L1028:
1715:src/xeq.c     **** 
 14428              		.loc 1 1715 2 is_stmt 1 view .LVU3825
 14429 002c 6420     		movs	r0, #100
 14430              	.LVL1070:
1715:src/xeq.c     **** 
 14431              		.loc 1 1715 2 is_stmt 0 view .LVU3826
 14432 002e FFF7FEFF 		bl	get_reg_n
 14433              	.LVL1071:
1715:src/xeq.c     **** 
 14434              		.loc 1 1715 2 view .LVU3827
 14435 0032 0446     		mov	r4, r0
 14436 0034 2846     		mov	r0, r5
 14437 0036 FFF7FEFF 		bl	get_reg_n
 14438              	.LVL1072:
 14439 003a 0146     		mov	r1, r0
 14440 003c 2046     		mov	r0, r4
 14441 003e FFF7FEFF 		bl	swap_reg
 14442              	.LVL1073:
1717:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 14443              		.loc 1 1717 2 is_stmt 1 view .LVU3828
1715:src/xeq.c     **** 
 14444              		.loc 1 1715 2 is_stmt 0 view .LVU3829
 14445 0042 6520     		movs	r0, #101
 14446              	.LVL1074:
 14447              	.L1031:
1718:src/xeq.c     **** 		set_was_complex();
 14448              		.loc 1 1718 3 is_stmt 1 view .LVU3830
 14449 0044 FFF7FEFF 		bl	get_reg_n
 14450              	.LVL1075:
 14451 0048 0446     		mov	r4, r0
 14452 004a 681C     		adds	r0, r5, #1
 14453 004c FFF7FEFF 		bl	get_reg_n
 14454              	.LVL1076:
 14455 0050 0146     		mov	r1, r0
 14456 0052 2046     		mov	r0, r4
ARM GAS  /tmp/ccK8IvWa.s 			page 413


 14457 0054 FFF7FEFF 		bl	swap_reg
 14458              	.LVL1077:
1719:src/xeq.c     **** 	}
 14459              		.loc 1 1719 3 view .LVU3831
 14460              	.LBB2741:
 14461              	.LBI2741:
 516:src/xeq.c     **** 	State2.wascomplex = 1;
 14462              		.loc 1 516 13 view .LVU3832
 14463              	.LBB2742:
 517:src/xeq.c     **** }
 14464              		.loc 1 517 2 view .LVU3833
 517:src/xeq.c     **** }
 14465              		.loc 1 517 20 is_stmt 0 view .LVU3834
 14466 0058 0B4B     		ldr	r3, .L1034
 14467 005a 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 14468 005c 0121     		movs	r1, #1
 14469 005e 61F38712 		bfi	r2, r1, #6, #2
 14470 0062 1A75     		strb	r2, [r3, #20]
 14471              	.LBE2742:
 14472              	.LBE2741:
1721:src/xeq.c     **** 
 14473              		.loc 1 1721 1 view .LVU3835
 14474 0064 70BD     		pop	{r4, r5, r6, pc}
 14475              	.LVL1078:
 14476              	.L1029:
1715:src/xeq.c     **** 
 14477              		.loc 1 1715 2 is_stmt 1 view .LVU3836
 14478 0066 6620     		movs	r0, #102
 14479              	.LVL1079:
1715:src/xeq.c     **** 
 14480              		.loc 1 1715 2 is_stmt 0 view .LVU3837
 14481 0068 FFF7FEFF 		bl	get_reg_n
 14482              	.LVL1080:
1715:src/xeq.c     **** 
 14483              		.loc 1 1715 2 view .LVU3838
 14484 006c 0446     		mov	r4, r0
 14485 006e 2846     		mov	r0, r5
 14486 0070 FFF7FEFF 		bl	get_reg_n
 14487              	.LVL1081:
 14488 0074 0146     		mov	r1, r0
 14489 0076 2046     		mov	r0, r4
 14490 0078 FFF7FEFF 		bl	swap_reg
 14491              	.LVL1082:
1717:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 14492              		.loc 1 1717 2 is_stmt 1 view .LVU3839
1715:src/xeq.c     **** 
 14493              		.loc 1 1715 2 is_stmt 0 view .LVU3840
 14494 007c 6720     		movs	r0, #103
 14495 007e E1E7     		b	.L1031
 14496              	.LVL1083:
 14497              	.L1033:
1715:src/xeq.c     **** 
 14498              		.loc 1 1715 2 view .LVU3841
 14499 0080 04F15400 		add	r0, r4, #84
 14500 0084 DEE7     		b	.L1031
 14501              	.L1035:
 14502 0086 00BF     		.align	2
ARM GAS  /tmp/ccK8IvWa.s 			page 414


 14503              	.L1034:
 14504 0088 00000000 		.word	StateWhileOn
 14505              		.cfi_endproc
 14506              	.LFE122:
 14508              		.section	.text.cmdview,"ax",%progbits
 14509              		.align	1
 14510              		.p2align 2,,3
 14511              		.global	cmdview
 14512              		.syntax unified
 14513              		.thumb
 14514              		.thumb_func
 14515              		.fpu fpv4-sp-d16
 14517              	cmdview:
 14518              	.LVL1084:
 14519              	.LFB123:
1726:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 14520              		.loc 1 1726 46 is_stmt 1 view -0
 14521              		.cfi_startproc
 14522              		@ args = 0, pretend = 0, frame = 0
 14523              		@ frame_needed = 0, uses_anonymous_args = 0
1727:src/xeq.c     **** 
 14524              		.loc 1 1727 2 view .LVU3843
1726:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 14525              		.loc 1 1726 46 is_stmt 0 view .LVU3844
 14526 0000 70B5     		push	{r4, r5, r6, lr}
 14527              		.cfi_def_cfa_offset 16
 14528              		.cfi_offset 4, -16
 14529              		.cfi_offset 5, -12
 14530              		.cfi_offset 6, -8
 14531              		.cfi_offset 14, -4
1729:src/xeq.c     **** 	ShowRegister = arg;
 14532              		.loc 1 1729 20 view .LVU3845
 14533 0002 134D     		ldr	r5, .L1042
1730:src/xeq.c     **** 	State2.disp_freeze = 0;
 14534              		.loc 1 1730 15 view .LVU3846
 14535 0004 134A     		ldr	r2, .L1042+4
1729:src/xeq.c     **** 	ShowRegister = arg;
 14536              		.loc 1 1729 20 view .LVU3847
 14537 0006 6B69     		ldr	r3, [r5, #20]
1730:src/xeq.c     **** 	State2.disp_freeze = 0;
 14538              		.loc 1 1730 15 view .LVU3848
 14539 0008 1060     		str	r0, [r2]
1726:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 14540              		.loc 1 1726 46 view .LVU3849
 14541 000a 0E46     		mov	r6, r1
 14542              	.LVL1085:
1729:src/xeq.c     **** 	ShowRegister = arg;
 14543              		.loc 1 1729 2 is_stmt 1 view .LVU3850
1730:src/xeq.c     **** 	State2.disp_freeze = 0;
 14544              		.loc 1 1730 2 view .LVU3851
1731:src/xeq.c     **** 	display();
 14545              		.loc 1 1731 2 view .LVU3852
1727:src/xeq.c     **** 
 14546              		.loc 1 1727 41 is_stmt 0 view .LVU3853
 14547 000c A1F19B01 		sub	r1, #155
 14548              	.LVL1086:
1729:src/xeq.c     **** 	ShowRegister = arg;
ARM GAS  /tmp/ccK8IvWa.s 			page 415


 14549              		.loc 1 1729 20 view .LVU3854
 14550 0010 23F08053 		bic	r3, r3, #268435456
1727:src/xeq.c     **** 
 14551              		.loc 1 1727 41 view .LVU3855
 14552 0014 B1FA81F1 		clz	r1, r1
 14553 0018 4909     		lsrs	r1, r1, #5
1729:src/xeq.c     **** 	ShowRegister = arg;
 14554              		.loc 1 1729 20 view .LVU3856
 14555 001a 23F0C003 		bic	r3, r3, #192
 14556 001e 43EA8113 		orr	r3, r3, r1, lsl #6
1726:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 14557              		.loc 1 1726 46 view .LVU3857
 14558 0022 0446     		mov	r4, r0
1729:src/xeq.c     **** 	ShowRegister = arg;
 14559              		.loc 1 1729 20 view .LVU3858
 14560 0024 6B61     		str	r3, [r5, #20]
1732:src/xeq.c     **** 	State2.disp_freeze = cmplx || Running || arg != regX_idx;
 14561              		.loc 1 1732 2 is_stmt 1 view .LVU3859
 14562 0026 FFF7FEFF 		bl	display
 14563              	.LVL1087:
1733:src/xeq.c     **** }
 14564              		.loc 1 1733 2 view .LVU3860
1733:src/xeq.c     **** }
 14565              		.loc 1 1733 40 is_stmt 0 view .LVU3861
 14566 002a 9B2E     		cmp	r6, #155
 14567 002c 02D0     		beq	.L1039
1733:src/xeq.c     **** }
 14568              		.loc 1 1733 29 discriminator 2 view .LVU3862
 14569 002e 0A4B     		ldr	r3, .L1042+8
 14570 0030 1B68     		ldr	r3, [r3]
 14571 0032 2BB1     		cbz	r3, .L1041
 14572              	.L1039:
1733:src/xeq.c     **** }
 14573              		.loc 1 1733 21 view .LVU3863
 14574 0034 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 14575 0036 0124     		movs	r4, #1
 14576              	.LVL1088:
1733:src/xeq.c     **** }
 14577              		.loc 1 1733 21 view .LVU3864
 14578 0038 64F30413 		bfi	r3, r4, #4, #1
 14579 003c EB75     		strb	r3, [r5, #23]
1734:src/xeq.c     **** 
 14580              		.loc 1 1734 1 view .LVU3865
 14581 003e 70BD     		pop	{r4, r5, r6, pc}
 14582              	.LVL1089:
 14583              	.L1041:
1733:src/xeq.c     **** }
 14584              		.loc 1 1733 21 discriminator 4 view .LVU3866
 14585 0040 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
1733:src/xeq.c     **** }
 14586              		.loc 1 1733 40 discriminator 4 view .LVU3867
 14587 0042 643C     		subs	r4, r4, #100
 14588              	.LVL1090:
1733:src/xeq.c     **** }
 14589              		.loc 1 1733 40 discriminator 4 view .LVU3868
 14590 0044 18BF     		it	ne
 14591 0046 0124     		movne	r4, #1
ARM GAS  /tmp/ccK8IvWa.s 			page 416


 14592              	.LVL1091:
1733:src/xeq.c     **** }
 14593              		.loc 1 1733 21 discriminator 4 view .LVU3869
 14594 0048 64F30413 		bfi	r3, r4, #4, #1
 14595 004c EB75     		strb	r3, [r5, #23]
1734:src/xeq.c     **** 
 14596              		.loc 1 1734 1 discriminator 4 view .LVU3870
 14597 004e 70BD     		pop	{r4, r5, r6, pc}
 14598              	.L1043:
 14599              		.align	2
 14600              	.L1042:
 14601 0050 00000000 		.word	StateWhileOn
 14602 0054 00000000 		.word	ShowRegister
 14603 0058 00000000 		.word	Running
 14604              		.cfi_endproc
 14605              	.LFE123:
 14607              		.section	.text.get_stack_size,"ax",%progbits
 14608              		.align	1
 14609              		.p2align 2,,3
 14610              		.global	get_stack_size
 14611              		.syntax unified
 14612              		.thumb
 14613              		.thumb_func
 14614              		.fpu fpv4-sp-d16
 14616              	get_stack_size:
 14617              	.LVL1092:
 14618              	.LFB124:
1738:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
 14619              		.loc 1 1738 36 is_stmt 1 view -0
 14620              		.cfi_startproc
 14621              		@ args = 0, pretend = 0, frame = 0
 14622              		@ frame_needed = 0, uses_anonymous_args = 0
1739:src/xeq.c     **** }
 14623              		.loc 1 1739 2 view .LVU3872
 14624              	.LBB2743:
 14625              	.LBI2743:
 689:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 14626              		.loc 1 689 5 view .LVU3873
 14627              	.LBB2744:
 690:src/xeq.c     **** 		return 4;
 14628              		.loc 1 690 2 view .LVU3874
 14629              	.LBE2744:
 14630              	.LBE2743:
1738:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
 14631              		.loc 1 1738 36 is_stmt 0 view .LVU3875
 14632 0000 00B5     		push	{lr}
 14633              		.cfi_def_cfa_offset 4
 14634              		.cfi_offset 14, -4
 14635              	.LBB2750:
 14636              	.LBB2747:
 690:src/xeq.c     **** 		return 4;
 14637              		.loc 1 690 6 view .LVU3876
 14638 0002 0E4B     		ldr	r3, .L1051
 14639 0004 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 690:src/xeq.c     **** 		return 4;
 14640              		.loc 1 690 5 view .LVU3877
 14641 0008 1207     		lsls	r2, r2, #28
ARM GAS  /tmp/ccK8IvWa.s 			page 417


 14642              	.LBE2747:
 14643              	.LBE2750:
1738:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
 14644              		.loc 1 1738 36 view .LVU3878
 14645 000a 83B0     		sub	sp, sp, #12
 14646              		.cfi_def_cfa_offset 16
 14647              	.LBB2751:
 14648              	.LBB2748:
 690:src/xeq.c     **** 		return 4;
 14649              		.loc 1 690 5 view .LVU3879
 14650 000c 13D5     		bpl	.L1046
 14651              	.LBB2745:
 14652              	.LBI2745:
 181:src/xeq.c     **** 	return isXROM(state_pc());
 14653              		.loc 1 181 5 is_stmt 1 view .LVU3880
 14654              	.LBB2746:
 182:src/xeq.c     **** }
 14655              		.loc 1 182 2 view .LVU3881
 182:src/xeq.c     **** }
 14656              		.loc 1 182 9 is_stmt 0 view .LVU3882
 14657 000e B3F8E037 		ldrh	r3, [r3, #2016]
 14658              	.LBE2746:
 14659              	.LBE2745:
 690:src/xeq.c     **** 		return 4;
 14660              		.loc 1 690 27 view .LVU3883
 14661 0012 9B0B     		lsrs	r3, r3, #14
 14662 0014 032B     		cmp	r3, #3
 14663 0016 09D0     		beq	.L1050
 14664              	.L1048:
 14665 0018 0822     		movs	r2, #8
 14666 001a 0023     		movs	r3, #0
 14667              	.L1045:
 14668              	.LVL1093:
 690:src/xeq.c     **** 		return 4;
 14669              		.loc 1 690 27 view .LVU3884
 14670              	.LBE2748:
 14671              	.LBE2751:
 14672              	.LBB2752:
 14673              	.LBI2752:
1309:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 14674              		.loc 1 1309 6 is_stmt 1 view .LVU3885
 14675              	.LBB2753:
1310:src/xeq.c     **** }
 14676              		.loc 1 1310 2 view .LVU3886
 14677 001c 0021     		movs	r1, #0
 14678 001e 0091     		str	r1, [sp]
 14679 0020 6420     		movs	r0, #100
 14680              	.LVL1094:
1310:src/xeq.c     **** }
 14681              		.loc 1 1310 2 is_stmt 0 view .LVU3887
 14682 0022 FFF7FEFF 		bl	set_reg_n_int_sgn
 14683              	.LVL1095:
1310:src/xeq.c     **** }
 14684              		.loc 1 1310 2 view .LVU3888
 14685              	.LBE2753:
 14686              	.LBE2752:
1740:src/xeq.c     **** 
ARM GAS  /tmp/ccK8IvWa.s 			page 418


 14687              		.loc 1 1740 1 view .LVU3889
 14688 0026 03B0     		add	sp, sp, #12
 14689              		.cfi_remember_state
 14690              		.cfi_def_cfa_offset 4
 14691              		@ sp needed
 14692 0028 5DF804FB 		ldr	pc, [sp], #4
 14693              	.LVL1096:
 14694              	.L1050:
 14695              		.cfi_restore_state
 14696              	.LBB2754:
 14697              	.LBB2749:
 690:src/xeq.c     **** 		return 4;
 14698              		.loc 1 690 44 view .LVU3890
 14699 002c 044B     		ldr	r3, .L1051+4
 690:src/xeq.c     **** 		return 4;
 14700              		.loc 1 690 41 view .LVU3891
 14701 002e 93F90130 		ldrsb	r3, [r3, #1]
 14702 0032 002B     		cmp	r3, #0
 14703 0034 F0DB     		blt	.L1048
 14704              	.L1046:
 14705 0036 0422     		movs	r2, #4
 14706 0038 0023     		movs	r3, #0
 14707 003a EFE7     		b	.L1045
 14708              	.L1052:
 14709              		.align	2
 14710              	.L1051:
 14711 003c 00000000 		.word	PersistentRam
 14712 0040 00000000 		.word	XromParams
 14713              	.LBE2749:
 14714              	.LBE2754:
 14715              		.cfi_endproc
 14716              	.LFE124:
 14718              		.section	.text.get_word_size,"ax",%progbits
 14719              		.align	1
 14720              		.p2align 2,,3
 14721              		.global	get_word_size
 14722              		.syntax unified
 14723              		.thumb
 14724              		.thumb_func
 14725              		.fpu fpv4-sp-d16
 14727              	get_word_size:
 14728              	.LVL1097:
 14729              	.LFB125:
1742:src/xeq.c     **** 	setX_int_sgn((int)word_size(), 0);
 14730              		.loc 1 1742 35 is_stmt 1 view -0
 14731              		.cfi_startproc
 14732              		@ args = 0, pretend = 0, frame = 0
 14733              		@ frame_needed = 0, uses_anonymous_args = 0
1743:src/xeq.c     **** }
 14734              		.loc 1 1743 2 view .LVU3893
1742:src/xeq.c     **** 	setX_int_sgn((int)word_size(), 0);
 14735              		.loc 1 1742 35 is_stmt 0 view .LVU3894
 14736 0000 00B5     		push	{lr}
 14737              		.cfi_def_cfa_offset 4
 14738              		.cfi_offset 14, -4
 14739 0002 83B0     		sub	sp, sp, #12
 14740              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccK8IvWa.s 			page 419


1743:src/xeq.c     **** }
 14741              		.loc 1 1743 20 view .LVU3895
 14742 0004 FFF7FEFF 		bl	word_size
 14743              	.LVL1098:
 14744              	.LBB2755:
 14745              	.LBI2755:
1309:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 14746              		.loc 1 1309 6 is_stmt 1 view .LVU3896
 14747              	.LBB2756:
1310:src/xeq.c     **** }
 14748              		.loc 1 1310 2 view .LVU3897
 14749 0008 0021     		movs	r1, #0
 14750 000a 0246     		mov	r2, r0
 14751 000c C317     		asrs	r3, r0, #31
 14752 000e 0091     		str	r1, [sp]
 14753 0010 6420     		movs	r0, #100
 14754              	.LVL1099:
1310:src/xeq.c     **** }
 14755              		.loc 1 1310 2 is_stmt 0 view .LVU3898
 14756 0012 FFF7FEFF 		bl	set_reg_n_int_sgn
 14757              	.LVL1100:
1310:src/xeq.c     **** }
 14758              		.loc 1 1310 2 view .LVU3899
 14759              	.LBE2756:
 14760              	.LBE2755:
1744:src/xeq.c     **** 
 14761              		.loc 1 1744 1 view .LVU3900
 14762 0016 03B0     		add	sp, sp, #12
 14763              		.cfi_def_cfa_offset 4
 14764              		@ sp needed
 14765 0018 5DF804FB 		ldr	pc, [sp], #4
 14766              		.cfi_endproc
 14767              	.LFE125:
 14769              		.section	.text.get_sign_mode,"ax",%progbits
 14770              		.align	1
 14771              		.p2align 2,,3
 14772              		.global	get_sign_mode
 14773              		.syntax unified
 14774              		.thumb
 14775              		.thumb_func
 14776              		.fpu fpv4-sp-d16
 14778              	get_sign_mode:
 14779              	.LVL1101:
 14780              	.LFB126:
1746:src/xeq.c     **** 	static const unsigned char modes[4] = {
 14781              		.loc 1 1746 35 is_stmt 1 view -0
 14782              		.cfi_startproc
 14783              		@ args = 0, pretend = 0, frame = 0
 14784              		@ frame_needed = 0, uses_anonymous_args = 0
1747:src/xeq.c     **** 		0x02,		// 2's complement
 14785              		.loc 1 1747 2 view .LVU3902
1753:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
 14786              		.loc 1 1753 2 view .LVU3903
1746:src/xeq.c     **** 	static const unsigned char modes[4] = {
 14787              		.loc 1 1746 35 is_stmt 0 view .LVU3904
 14788 0000 00B5     		push	{lr}
 14789              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccK8IvWa.s 			page 420


 14790              		.cfi_offset 14, -4
 14791 0002 83B0     		sub	sp, sp, #12
 14792              		.cfi_def_cfa_offset 16
1753:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
 14793              		.loc 1 1753 37 view .LVU3905
 14794 0004 FFF7FEFF 		bl	int_mode
 14795              	.LVL1102:
1753:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
 14796              		.loc 1 1753 22 view .LVU3906
 14797 0008 064B     		ldr	r3, .L1057
 14798 000a 1B5C     		ldrb	r3, [r3, r0]	@ zero_extendqisi2
 14799              	.LVL1103:
1754:src/xeq.c     **** }
 14800              		.loc 1 1754 2 is_stmt 1 view .LVU3907
 14801              	.LBB2757:
 14802              	.LBI2757:
1309:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 14803              		.loc 1 1309 6 view .LVU3908
 14804              	.LBB2758:
1310:src/xeq.c     **** }
 14805              		.loc 1 1310 2 view .LVU3909
 14806              	.LBE2758:
 14807              	.LBE2757:
1754:src/xeq.c     **** }
 14808              		.loc 1 1754 2 is_stmt 0 view .LVU3910
 14809 000c 03F00302 		and	r2, r3, #3
 14810 0010 03F08003 		and	r3, r3, #128
 14811              	.LVL1104:
1754:src/xeq.c     **** }
 14812              		.loc 1 1754 2 view .LVU3911
 14813 0014 0093     		str	r3, [sp]
 14814              	.LBB2760:
 14815              	.LBB2759:
1310:src/xeq.c     **** }
 14816              		.loc 1 1310 2 view .LVU3912
 14817 0016 6420     		movs	r0, #100
 14818              	.LVL1105:
1310:src/xeq.c     **** }
 14819              		.loc 1 1310 2 view .LVU3913
 14820 0018 0023     		movs	r3, #0
 14821 001a FFF7FEFF 		bl	set_reg_n_int_sgn
 14822              	.LVL1106:
1310:src/xeq.c     **** }
 14823              		.loc 1 1310 2 view .LVU3914
 14824              	.LBE2759:
 14825              	.LBE2760:
1755:src/xeq.c     **** 
 14826              		.loc 1 1755 1 view .LVU3915
 14827 001e 03B0     		add	sp, sp, #12
 14828              		.cfi_def_cfa_offset 4
 14829              		@ sp needed
 14830 0020 5DF804FB 		ldr	pc, [sp], #4
 14831              	.L1058:
 14832              		.align	2
 14833              	.L1057:
 14834 0024 00000000 		.word	.LANCHOR4
 14835              		.cfi_endproc
ARM GAS  /tmp/ccK8IvWa.s 			page 421


 14836              	.LFE126:
 14838              		.section	.text.get_base,"ax",%progbits
 14839              		.align	1
 14840              		.p2align 2,,3
 14841              		.global	get_base
 14842              		.syntax unified
 14843              		.thumb
 14844              		.thumb_func
 14845              		.fpu fpv4-sp-d16
 14847              	get_base:
 14848              	.LVL1107:
 14849              	.LFB127:
1757:src/xeq.c     **** 	setX_int_sgn((int)int_base(), 0);
 14850              		.loc 1 1757 30 is_stmt 1 view -0
 14851              		.cfi_startproc
 14852              		@ args = 0, pretend = 0, frame = 0
 14853              		@ frame_needed = 0, uses_anonymous_args = 0
1758:src/xeq.c     **** }
 14854              		.loc 1 1758 2 view .LVU3917
1757:src/xeq.c     **** 	setX_int_sgn((int)int_base(), 0);
 14855              		.loc 1 1757 30 is_stmt 0 view .LVU3918
 14856 0000 00B5     		push	{lr}
 14857              		.cfi_def_cfa_offset 4
 14858              		.cfi_offset 14, -4
 14859 0002 83B0     		sub	sp, sp, #12
 14860              		.cfi_def_cfa_offset 16
1758:src/xeq.c     **** }
 14861              		.loc 1 1758 20 view .LVU3919
 14862 0004 FFF7FEFF 		bl	int_base
 14863              	.LVL1108:
 14864              	.LBB2761:
 14865              	.LBI2761:
1309:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 14866              		.loc 1 1309 6 is_stmt 1 view .LVU3920
 14867              	.LBB2762:
1310:src/xeq.c     **** }
 14868              		.loc 1 1310 2 view .LVU3921
 14869 0008 0021     		movs	r1, #0
 14870 000a 0246     		mov	r2, r0
 14871 000c C317     		asrs	r3, r0, #31
 14872 000e 0091     		str	r1, [sp]
 14873 0010 6420     		movs	r0, #100
 14874              	.LVL1109:
1310:src/xeq.c     **** }
 14875              		.loc 1 1310 2 is_stmt 0 view .LVU3922
 14876 0012 FFF7FEFF 		bl	set_reg_n_int_sgn
 14877              	.LVL1110:
1310:src/xeq.c     **** }
 14878              		.loc 1 1310 2 view .LVU3923
 14879              	.LBE2762:
 14880              	.LBE2761:
1759:src/xeq.c     **** 
 14881              		.loc 1 1759 1 view .LVU3924
 14882 0016 03B0     		add	sp, sp, #12
 14883              		.cfi_def_cfa_offset 4
 14884              		@ sp needed
 14885 0018 5DF804FB 		ldr	pc, [sp], #4
ARM GAS  /tmp/ccK8IvWa.s 			page 422


 14886              		.cfi_endproc
 14887              	.LFE127:
 14889              		.section	.text.DM42_Ticker,"ax",%progbits
 14890              		.align	1
 14891              		.p2align 2,,3
 14892              		.global	DM42_Ticker
 14893              		.syntax unified
 14894              		.thumb
 14895              		.thumb_func
 14896              		.fpu fpv4-sp-d16
 14898              	DM42_Ticker:
 14899              	.LFB128:
1762:src/xeq.c     ****     int f, t;
 14900              		.loc 1 1762 21 is_stmt 1 view -0
 14901              		.cfi_startproc
 14902              		@ args = 0, pretend = 0, frame = 0
 14903              		@ frame_needed = 0, uses_anonymous_args = 0
1763:src/xeq.c     ****     t = get_rtc_ticks();
 14904              		.loc 1 1763 5 view .LVU3926
1764:src/xeq.c     ****     f = ((t & 0xff)*10)>>8; // tenths of a second;
 14905              		.loc 1 1764 5 view .LVU3927
1762:src/xeq.c     ****     int f, t;
 14906              		.loc 1 1762 21 is_stmt 0 view .LVU3928
 14907 0000 08B5     		push	{r3, lr}
 14908              		.cfi_def_cfa_offset 8
 14909              		.cfi_offset 3, -8
 14910              		.cfi_offset 14, -4
1764:src/xeq.c     ****     f = ((t & 0xff)*10)>>8; // tenths of a second;
 14911              		.loc 1 1764 9 view .LVU3929
 14912 0002 034B     		ldr	r3, .L1063
 14913 0004 9847     		blx	r3
 14914              	.LVL1111:
1765:src/xeq.c     ****     return f;
 14915              		.loc 1 1765 5 is_stmt 1 view .LVU3930
1766:src/xeq.c     ****  }
 14916              		.loc 1 1766 5 view .LVU3931
1765:src/xeq.c     ****     return f;
 14917              		.loc 1 1765 13 is_stmt 0 view .LVU3932
 14918 0006 C0B2     		uxtb	r0, r0
 14919              	.LVL1112:
1765:src/xeq.c     ****     return f;
 14920              		.loc 1 1765 20 view .LVU3933
 14921 0008 00EB8000 		add	r0, r0, r0, lsl #2
1767:src/xeq.c     **** #endif
 14922              		.loc 1 1767 2 view .LVU3934
 14923 000c C009     		lsrs	r0, r0, #7
 14924 000e 08BD     		pop	{r3, pc}
 14925              	.L1064:
 14926              		.align	2
 14927              	.L1063:
 14928 0010 B9040008 		.word	134218937
 14929              		.cfi_endproc
 14930              	.LFE128:
 14932              		.section	.text.op_ticks,"ax",%progbits
 14933              		.align	1
 14934              		.p2align 2,,3
 14935              		.global	op_ticks
ARM GAS  /tmp/ccK8IvWa.s 			page 423


 14936              		.syntax unified
 14937              		.thumb
 14938              		.thumb_func
 14939              		.fpu fpv4-sp-d16
 14941              	op_ticks:
 14942              	.LVL1113:
 14943              	.LFB129:
1770:src/xeq.c     **** #if !defined(CONSOLE) && !defined(DM42)
 14944              		.loc 1 1770 30 is_stmt 1 view -0
 14945              		.cfi_startproc
 14946              		@ args = 0, pretend = 0, frame = 0
 14947              		@ frame_needed = 0, uses_anonymous_args = 0
1774:src/xeq.c     **** #else 
 14948              		.loc 1 1774 5 view .LVU3936
 14949              	.LBB2763:
 14950              	.LBI2763:
1762:src/xeq.c     ****     int f, t;
 14951              		.loc 1 1762 6 view .LVU3937
 14952              	.LBB2764:
1763:src/xeq.c     ****     t = get_rtc_ticks();
 14953              		.loc 1 1763 5 view .LVU3938
1764:src/xeq.c     ****     f = ((t & 0xff)*10)>>8; // tenths of a second;
 14954              		.loc 1 1764 5 view .LVU3939
 14955              	.LBE2764:
 14956              	.LBE2763:
1770:src/xeq.c     **** #if !defined(CONSOLE) && !defined(DM42)
 14957              		.loc 1 1770 30 is_stmt 0 view .LVU3940
 14958 0000 00B5     		push	{lr}
 14959              		.cfi_def_cfa_offset 4
 14960              		.cfi_offset 14, -4
 14961              	.LBB2768:
 14962              	.LBB2765:
1764:src/xeq.c     ****     f = ((t & 0xff)*10)>>8; // tenths of a second;
 14963              		.loc 1 1764 9 view .LVU3941
 14964 0002 084B     		ldr	r3, .L1067
 14965              	.LBE2765:
 14966              	.LBE2768:
1770:src/xeq.c     **** #if !defined(CONSOLE) && !defined(DM42)
 14967              		.loc 1 1770 30 view .LVU3942
 14968 0004 83B0     		sub	sp, sp, #12
 14969              		.cfi_def_cfa_offset 16
 14970              	.LBB2769:
 14971              	.LBB2766:
1764:src/xeq.c     ****     f = ((t & 0xff)*10)>>8; // tenths of a second;
 14972              		.loc 1 1764 9 view .LVU3943
 14973 0006 9847     		blx	r3
 14974              	.LVL1114:
1765:src/xeq.c     ****     return f;
 14975              		.loc 1 1765 5 is_stmt 1 view .LVU3944
1766:src/xeq.c     ****  }
 14976              		.loc 1 1766 5 view .LVU3945
1766:src/xeq.c     ****  }
 14977              		.loc 1 1766 5 is_stmt 0 view .LVU3946
 14978              	.LBE2766:
 14979              	.LBE2769:
 14980              	.LBB2770:
 14981              	.LBI2770:
ARM GAS  /tmp/ccK8IvWa.s 			page 424


1309:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 14982              		.loc 1 1309 6 is_stmt 1 view .LVU3947
 14983              	.LBB2771:
1310:src/xeq.c     **** }
 14984              		.loc 1 1310 2 view .LVU3948
 14985              	.LBE2771:
 14986              	.LBE2770:
 14987              	.LBB2773:
 14988              	.LBB2767:
1765:src/xeq.c     ****     return f;
 14989              		.loc 1 1765 13 is_stmt 0 view .LVU3949
 14990 0008 C0B2     		uxtb	r0, r0
 14991              	.LVL1115:
1765:src/xeq.c     ****     return f;
 14992              		.loc 1 1765 20 view .LVU3950
 14993 000a 00EB8000 		add	r0, r0, r0, lsl #2
1765:src/xeq.c     ****     return f;
 14994              		.loc 1 1765 7 view .LVU3951
 14995 000e C209     		lsrs	r2, r0, #7
 14996              	.LBE2767:
 14997              	.LBE2773:
 14998              	.LBB2774:
 14999              	.LBB2772:
1310:src/xeq.c     **** }
 15000              		.loc 1 1310 2 view .LVU3952
 15001 0010 0021     		movs	r1, #0
 15002 0012 D317     		asrs	r3, r2, #31
 15003 0014 0091     		str	r1, [sp]
 15004 0016 6420     		movs	r0, #100
 15005 0018 FFF7FEFF 		bl	set_reg_n_int_sgn
 15006              	.LVL1116:
1310:src/xeq.c     **** }
 15007              		.loc 1 1310 2 view .LVU3953
 15008              	.LBE2772:
 15009              	.LBE2774:
1782:src/xeq.c     **** 
 15010              		.loc 1 1782 1 view .LVU3954
 15011 001c 03B0     		add	sp, sp, #12
 15012              		.cfi_def_cfa_offset 4
 15013              		@ sp needed
 15014 001e 5DF804FB 		ldr	pc, [sp], #4
 15015              	.L1068:
 15016 0022 00BF     		.align	2
 15017              	.L1067:
 15018 0024 B9040008 		.word	134218937
 15019              		.cfi_endproc
 15020              	.LFE129:
 15022              		.section	.text.op_voltage,"ax",%progbits
 15023              		.align	1
 15024              		.p2align 2,,3
 15025              		.global	op_voltage
 15026              		.syntax unified
 15027              		.thumb
 15028              		.thumb_func
 15029              		.fpu fpv4-sp-d16
 15031              	op_voltage:
 15032              	.LVL1117:
ARM GAS  /tmp/ccK8IvWa.s 			page 425


 15033              	.LFB130:
1785:src/xeq.c     **** 	decNumber t, u;
 15034              		.loc 1 1785 32 is_stmt 1 view -0
 15035              		.cfi_startproc
 15036              		@ args = 0, pretend = 0, frame = 72
 15037              		@ frame_needed = 0, uses_anonymous_args = 0
1786:src/xeq.c     **** #ifdef REALBUILD
 15038              		.loc 1 1786 2 view .LVU3956
1790:src/xeq.c     **** 	v = v / 100;
 15039              		.loc 1 1790 2 view .LVU3957
1785:src/xeq.c     **** 	decNumber t, u;
 15040              		.loc 1 1785 32 is_stmt 0 view .LVU3958
 15041 0000 00B5     		push	{lr}
 15042              		.cfi_def_cfa_offset 4
 15043              		.cfi_offset 14, -4
1790:src/xeq.c     **** 	v = v / 100;
 15044              		.loc 1 1790 10 view .LVU3959
 15045 0002 144B     		ldr	r3, .L1073
1785:src/xeq.c     **** 	decNumber t, u;
 15046              		.loc 1 1785 32 view .LVU3960
 15047 0004 95B0     		sub	sp, sp, #84
 15048              		.cfi_def_cfa_offset 88
1790:src/xeq.c     **** 	v = v / 100;
 15049              		.loc 1 1790 10 view .LVU3961
 15050 0006 9847     		blx	r3
 15051              	.LVL1118:
1796:src/xeq.c     **** 		setX_int_sgn(v, 0);
 15052              		.loc 1 1796 6 view .LVU3962
 15053 0008 134B     		ldr	r3, .L1073+4
1791:src/xeq.c     **** #else
 15054              		.loc 1 1791 4 view .LVU3963
 15055 000a 144A     		ldr	r2, .L1073+8
1796:src/xeq.c     **** 		setX_int_sgn(v, 0);
 15056              		.loc 1 1796 6 view .LVU3964
 15057 000c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 15058              	.LVL1119:
1791:src/xeq.c     **** #else
 15059              		.loc 1 1791 2 is_stmt 1 view .LVU3965
1791:src/xeq.c     **** #else
 15060              		.loc 1 1791 4 is_stmt 0 view .LVU3966
 15061 0010 82FB0012 		smull	r1, r2, r2, r0
1796:src/xeq.c     **** 		setX_int_sgn(v, 0);
 15062              		.loc 1 1796 5 view .LVU3967
 15063 0014 DB07     		lsls	r3, r3, #31
1791:src/xeq.c     **** #else
 15064              		.loc 1 1791 4 view .LVU3968
 15065 0016 4FEAE070 		asr	r0, r0, #31
 15066              	.LVL1120:
1791:src/xeq.c     **** #else
 15067              		.loc 1 1791 4 view .LVU3969
 15068 001a C0EB6212 		rsb	r2, r0, r2, asr #5
 15069              	.LVL1121:
1796:src/xeq.c     **** 		setX_int_sgn(v, 0);
 15070              		.loc 1 1796 2 is_stmt 1 view .LVU3970
1796:src/xeq.c     **** 		setX_int_sgn(v, 0);
 15071              		.loc 1 1796 5 is_stmt 0 view .LVU3971
 15072 001e 08D5     		bpl	.L1070
ARM GAS  /tmp/ccK8IvWa.s 			page 426


1797:src/xeq.c     **** 	} else {
 15073              		.loc 1 1797 3 is_stmt 1 view .LVU3972
 15074              	.LVL1122:
 15075              	.LBB2775:
 15076              	.LBI2775:
1309:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 15077              		.loc 1 1309 6 view .LVU3973
 15078              	.LBB2776:
1310:src/xeq.c     **** }
 15079              		.loc 1 1310 2 view .LVU3974
 15080 0020 0023     		movs	r3, #0
 15081 0022 0093     		str	r3, [sp]
 15082 0024 6420     		movs	r0, #100
 15083 0026 D317     		asrs	r3, r2, #31
 15084 0028 FFF7FEFF 		bl	set_reg_n_int_sgn
 15085              	.LVL1123:
1310:src/xeq.c     **** }
 15086              		.loc 1 1310 2 is_stmt 0 view .LVU3975
 15087              	.LBE2776:
 15088              	.LBE2775:
1803:src/xeq.c     **** 
 15089              		.loc 1 1803 1 view .LVU3976
 15090 002c 15B0     		add	sp, sp, #84
 15091              		.cfi_remember_state
 15092              		.cfi_def_cfa_offset 4
 15093              		@ sp needed
 15094 002e 5DF804FB 		ldr	pc, [sp], #4
 15095              	.LVL1124:
 15096              	.L1070:
 15097              		.cfi_restore_state
1799:src/xeq.c     **** 		dn_mulpow10(&u, &t, -1);
 15098              		.loc 1 1799 3 is_stmt 1 view .LVU3977
 15099 0032 D317     		asrs	r3, r2, #31
 15100 0034 02A8     		add	r0, sp, #8
 15101 0036 FFF7FEFF 		bl	ullint_to_dn
 15102              	.LVL1125:
1800:src/xeq.c     **** 		setX(&u);
 15103              		.loc 1 1800 3 view .LVU3978
 15104 003a 02A9     		add	r1, sp, #8
 15105 003c 4FF0FF32 		mov	r2, #-1
 15106 0040 0BA8     		add	r0, sp, #44
 15107 0042 FFF7FEFF 		bl	dn_mulpow10
 15108              	.LVL1126:
1801:src/xeq.c     **** 	}
 15109              		.loc 1 1801 3 view .LVU3979
 15110              	.LBB2777:
 15111              	.LBI2777:
 795:src/xeq.c     **** 	setRegister(regX_idx, x);
 15112              		.loc 1 795 6 view .LVU3980
 15113              	.LBB2778:
 796:src/xeq.c     **** }
 15114              		.loc 1 796 2 view .LVU3981
 15115 0046 0BA9     		add	r1, sp, #44
 15116              	.LVL1127:
 796:src/xeq.c     **** }
 15117              		.loc 1 796 2 is_stmt 0 view .LVU3982
 15118 0048 6420     		movs	r0, #100
ARM GAS  /tmp/ccK8IvWa.s 			page 427


 15119 004a FFF7FEFF 		bl	setRegister
 15120              	.LVL1128:
 796:src/xeq.c     **** }
 15121              		.loc 1 796 2 view .LVU3983
 15122              	.LBE2778:
 15123              	.LBE2777:
1803:src/xeq.c     **** 
 15124              		.loc 1 1803 1 view .LVU3984
 15125 004e 15B0     		add	sp, sp, #84
 15126              		.cfi_def_cfa_offset 4
 15127              		@ sp needed
 15128 0050 5DF804FB 		ldr	pc, [sp], #4
 15129              	.L1074:
 15130              		.align	2
 15131              	.L1073:
 15132 0054 F1020008 		.word	134218481
 15133 0058 00000000 		.word	PersistentRam
 15134 005c 1F85EB51 		.word	1374389535
 15135              		.cfi_endproc
 15136              	.LFE130:
 15138              		.section	.text.free_mem,"ax",%progbits
 15139              		.align	1
 15140              		.p2align 2,,3
 15141              		.global	free_mem
 15142              		.syntax unified
 15143              		.thumb
 15144              		.thumb_func
 15145              		.fpu fpv4-sp-d16
 15147              	free_mem:
 15148              	.LFB131:
1808:src/xeq.c     **** 	return RetStkSize + RetStkPtr;
 15149              		.loc 1 1808 20 is_stmt 1 view -0
 15150              		.cfi_startproc
 15151              		@ args = 0, pretend = 0, frame = 0
 15152              		@ frame_needed = 0, uses_anonymous_args = 0
 15153              		@ link register save eliminated.
1809:src/xeq.c     **** }
 15154              		.loc 1 1809 2 view .LVU3986
1809:src/xeq.c     **** }
 15155              		.loc 1 1809 22 is_stmt 0 view .LVU3987
 15156 0000 034A     		ldr	r2, .L1076
1809:src/xeq.c     **** }
 15157              		.loc 1 1809 20 view .LVU3988
 15158 0002 044B     		ldr	r3, .L1076+4
1809:src/xeq.c     **** }
 15159              		.loc 1 1809 22 view .LVU3989
 15160 0004 B2F9E207 		ldrsh	r0, [r2, #2018]
1809:src/xeq.c     **** }
 15161              		.loc 1 1809 20 view .LVU3990
 15162 0008 1B68     		ldr	r3, [r3]
1810:src/xeq.c     **** 
 15163              		.loc 1 1810 1 view .LVU3991
 15164 000a 1844     		add	r0, r0, r3
 15165 000c 7047     		bx	lr
 15166              	.L1077:
 15167 000e 00BF     		.align	2
 15168              	.L1076:
ARM GAS  /tmp/ccK8IvWa.s 			page 428


 15169 0010 00000000 		.word	PersistentRam
 15170 0014 00000000 		.word	RetStkSize
 15171              		.cfi_endproc
 15172              	.LFE131:
 15174              		.section	.text.free_flash,"ax",%progbits
 15175              		.align	1
 15176              		.p2align 2,,3
 15177              		.global	free_flash
 15178              		.syntax unified
 15179              		.thumb
 15180              		.thumb_func
 15181              		.fpu fpv4-sp-d16
 15183              	free_flash:
 15184              	.LFB132:
1812:src/xeq.c     **** 	return NUMPROG_FLASH_MAX - UserFlash.size;
 15185              		.loc 1 1812 22 is_stmt 1 view -0
 15186              		.cfi_startproc
 15187              		@ args = 0, pretend = 0, frame = 0
 15188              		@ frame_needed = 0, uses_anonymous_args = 0
 15189              		@ link register save eliminated.
1813:src/xeq.c     **** }
 15190              		.loc 1 1813 2 view .LVU3993
1813:src/xeq.c     **** }
 15191              		.loc 1 1813 38 is_stmt 0 view .LVU3994
 15192 0000 024B     		ldr	r3, .L1079
 15193 0002 5888     		ldrh	r0, [r3, #2]
1814:src/xeq.c     **** 
 15194              		.loc 1 1814 1 view .LVU3995
 15195 0004 C0F5FF50 		rsb	r0, r0, #8160
 15196 0008 1E30     		adds	r0, r0, #30
 15197 000a 7047     		bx	lr
 15198              	.L1080:
 15199              		.align	2
 15200              	.L1079:
 15201 000c 00000000 		.word	UserFlash
 15202              		.cfi_endproc
 15203              	.LFE132:
 15205              		.section	.text.get_mem,"ax",%progbits
 15206              		.align	1
 15207              		.p2align 2,,3
 15208              		.global	get_mem
 15209              		.syntax unified
 15210              		.thumb
 15211              		.thumb_func
 15212              		.fpu fpv4-sp-d16
 15214              	get_mem:
 15215              	.LVL1129:
 15216              	.LFB133:
1816:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
 15217              		.loc 1 1816 29 is_stmt 1 view -0
 15218              		.cfi_startproc
 15219              		@ args = 0, pretend = 0, frame = 0
 15220              		@ frame_needed = 0, uses_anonymous_args = 0
1817:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 15221              		.loc 1 1817 2 view .LVU3997
1816:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
 15222              		.loc 1 1816 29 is_stmt 0 view .LVU3998
ARM GAS  /tmp/ccK8IvWa.s 			page 429


 15223 0000 00B5     		push	{lr}
 15224              		.cfi_def_cfa_offset 4
 15225              		.cfi_offset 14, -4
1817:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 15226              		.loc 1 1817 2 view .LVU3999
 15227 0002 A928     		cmp	r0, #169
1816:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
 15228              		.loc 1 1816 29 view .LVU4000
 15229 0004 83B0     		sub	sp, sp, #12
 15230              		.cfi_def_cfa_offset 16
1817:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 15231              		.loc 1 1817 2 view .LVU4001
 15232 0006 1FD0     		beq	.L1090
1817:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 15233              		.loc 1 1817 2 discriminator 2 view .LVU4002
 15234 0008 AA28     		cmp	r0, #170
 15235 000a 15D0     		beq	.L1091
1817:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 15236              		.loc 1 1817 2 discriminator 5 view .LVU4003
 15237 000c AC28     		cmp	r0, #172
 15238 000e 37D0     		beq	.L1092
 15239              	.LBB2779:
 15240              	.LBI2779:
 249:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 15241              		.loc 1 249 14 is_stmt 1 view .LVU4004
 15242              	.LBB2780:
 250:src/xeq.c     **** }
 15243              		.loc 1 250 2 view .LVU4005
 15244              	.LVL1130:
 15245              	.LBB2781:
 15246              	.LBI2781:
 237:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 15247              		.loc 1 237 14 view .LVU4006
 15248              	.LBB2782:
 238:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 15249              		.loc 1 238 2 view .LVU4007
 15250              	.LBB2783:
 15251              	.LBI2783:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15252              		.loc 1 918 5 view .LVU4008
 15253              	.LBB2784:
 919:src/xeq.c     **** }
 15254              		.loc 1 919 2 view .LVU4009
 919:src/xeq.c     **** }
 15255              		.loc 1 919 24 is_stmt 0 view .LVU4010
 15256 0010 214A     		ldr	r2, .L1095
 15257 0012 B2F8E817 		ldrh	r1, [r2, #2024]
 15258 0016 44F20103 		movw	r3, #16385
 15259              	.LBE2784:
 15260              	.LBE2783:
 238:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 15261              		.loc 1 238 5 view .LVU4011
 15262 001a 0B40     		ands	r3, r3, r1
 15263 001c B3F5804F 		cmp	r3, #16384
 15264 0020 35D0     		beq	.L1093
 243:src/xeq.c     **** }
 15265              		.loc 1 243 3 is_stmt 1 view .LVU4012
ARM GAS  /tmp/ccK8IvWa.s 			page 430


 15266 0022 92F8CF27 		ldrb	r2, [r2, #1999]	@ zero_extendqisi2
 15267 0026 0023     		movs	r3, #0
 15268              	.LVL1131:
 15269              	.L1083:
 243:src/xeq.c     **** }
 15270              		.loc 1 243 3 is_stmt 0 view .LVU4013
 15271              	.LBE2782:
 15272              	.LBE2781:
 15273              	.LBE2780:
 15274              	.LBE2779:
 15275              	.LBB2786:
 15276              	.LBI2786:
1309:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 15277              		.loc 1 1309 6 is_stmt 1 discriminator 10 view .LVU4014
 15278              	.LBB2787:
1310:src/xeq.c     **** }
 15279              		.loc 1 1310 2 discriminator 10 view .LVU4015
 15280 0028 0021     		movs	r1, #0
 15281 002a 0091     		str	r1, [sp]
 15282 002c 6420     		movs	r0, #100
 15283 002e FFF7FEFF 		bl	set_reg_n_int_sgn
 15284              	.LVL1132:
1310:src/xeq.c     **** }
 15285              		.loc 1 1310 2 is_stmt 0 discriminator 10 view .LVU4016
 15286              	.LBE2787:
 15287              	.LBE2786:
1822:src/xeq.c     **** 
 15288              		.loc 1 1822 1 discriminator 10 view .LVU4017
 15289 0032 03B0     		add	sp, sp, #12
 15290              		.cfi_remember_state
 15291              		.cfi_def_cfa_offset 4
 15292              		@ sp needed
 15293 0034 5DF804FB 		ldr	pc, [sp], #4
 15294              	.LVL1133:
 15295              	.L1091:
 15296              		.cfi_restore_state
 15297              	.LBB2788:
 15298              	.LBI2788:
 229:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 15299              		.loc 1 229 5 is_stmt 1 view .LVU4018
 15300              	.LBE2788:
 230:src/xeq.c     **** }
 15301              		.loc 1 230 2 view .LVU4019
 15302              	.LBB2809:
 15303              	.LBB2789:
 15304              	.LBI2789:
 221:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 15305              		.loc 1 221 5 view .LVU4020
 15306              	.LBB2790:
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 15307              		.loc 1 222 2 view .LVU4021
 15308              	.LBB2791:
 15309              	.LBI2791:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15310              		.loc 1 918 5 view .LVU4022
 15311              	.LBB2792:
 919:src/xeq.c     **** }
ARM GAS  /tmp/ccK8IvWa.s 			page 431


 15312              		.loc 1 919 2 view .LVU4023
 919:src/xeq.c     **** }
 15313              		.loc 1 919 2 is_stmt 0 view .LVU4024
 15314              	.LBE2792:
 15315              	.LBE2791:
 223:src/xeq.c     **** }
 15316              		.loc 1 223 2 is_stmt 1 view .LVU4025
 15317              	.LBB2795:
 15318              	.LBI2795:
 213:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 15319              		.loc 1 213 5 view .LVU4026
 15320              	.LBB2796:
 214:src/xeq.c     **** }
 15321              		.loc 1 214 2 view .LVU4027
 214:src/xeq.c     **** }
 15322              		.loc 1 214 9 is_stmt 0 view .LVU4028
 15323 0038 174A     		ldr	r2, .L1095
 15324 003a B2F9DE37 		ldrsh	r3, [r2, #2014]
 214:src/xeq.c     **** }
 15325              		.loc 1 214 57 view .LVU4029
 15326 003e 002B     		cmp	r3, #0
 15327 0040 0ADB     		blt	.L1094
 15328 0042 0022     		movs	r2, #0
 15329 0044 0023     		movs	r3, #0
 15330              	.LVL1134:
 214:src/xeq.c     **** }
 15331              		.loc 1 214 57 view .LVU4030
 15332 0046 EFE7     		b	.L1083
 15333              	.LVL1135:
 15334              	.L1090:
 214:src/xeq.c     **** }
 15335              		.loc 1 214 57 view .LVU4031
 15336              	.LBE2796:
 15337              	.LBE2795:
 15338              	.LBE2790:
 15339              	.LBE2789:
 15340              	.LBE2809:
 15341              	.LBB2810:
 15342              	.LBI2810:
1808:src/xeq.c     **** 	return RetStkSize + RetStkPtr;
 15343              		.loc 1 1808 5 is_stmt 1 view .LVU4032
 15344              	.LBB2811:
1809:src/xeq.c     **** }
 15345              		.loc 1 1809 2 view .LVU4033
1809:src/xeq.c     **** }
 15346              		.loc 1 1809 20 is_stmt 0 view .LVU4034
 15347 0048 144B     		ldr	r3, .L1095+4
1809:src/xeq.c     **** }
 15348              		.loc 1 1809 22 view .LVU4035
 15349 004a 134A     		ldr	r2, .L1095
1809:src/xeq.c     **** }
 15350              		.loc 1 1809 20 view .LVU4036
 15351 004c 1868     		ldr	r0, [r3]
 15352              	.LVL1136:
1809:src/xeq.c     **** }
 15353              		.loc 1 1809 22 view .LVU4037
 15354 004e B2F9E227 		ldrsh	r2, [r2, #2018]
ARM GAS  /tmp/ccK8IvWa.s 			page 432


 15355 0052 0023     		movs	r3, #0
1809:src/xeq.c     **** }
 15356              		.loc 1 1809 20 view .LVU4038
 15357 0054 0244     		add	r2, r2, r0
 15358              	.LBE2811:
 15359              	.LBE2810:
 15360 0056 E7E7     		b	.L1083
 15361              	.LVL1137:
 15362              	.L1094:
 15363              	.LBB2812:
 15364              	.LBB2808:
 15365              	.LBB2807:
 15366              	.LBB2801:
 15367              	.LBB2797:
 214:src/xeq.c     **** }
 15368              		.loc 1 214 25 view .LVU4039
 15369 0058 1148     		ldr	r0, .L1095+8
 15370              	.LVL1138:
 214:src/xeq.c     **** }
 15371              		.loc 1 214 25 view .LVU4040
 15372              	.LBE2797:
 15373              	.LBE2801:
 15374              	.LBB2802:
 15375              	.LBB2793:
 919:src/xeq.c     **** }
 15376              		.loc 1 919 24 view .LVU4041
 15377 005a B2F8E817 		ldrh	r1, [r2, #2024]
 15378              	.LBE2793:
 15379              	.LBE2802:
 15380              	.LBB2803:
 15381              	.LBB2798:
 214:src/xeq.c     **** }
 15382              		.loc 1 214 25 view .LVU4042
 15383 005e 0268     		ldr	r2, [r0]
 15384              	.LBE2798:
 15385              	.LBE2803:
 15386              	.LBB2804:
 15387              	.LBB2794:
 919:src/xeq.c     **** }
 15388              		.loc 1 919 24 view .LVU4043
 15389 0060 44F20100 		movw	r0, #16385
 15390              	.LBE2794:
 15391              	.LBE2804:
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 15392              		.loc 1 222 73 view .LVU4044
 15393 0064 0840     		ands	r0, r0, r1
 15394 0066 A0F58040 		sub	r0, r0, #16384
 15395              	.LBB2805:
 15396              	.LBB2799:
 214:src/xeq.c     **** }
 15397              		.loc 1 214 57 view .LVU4045
 15398 006a 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 15399              	.LBE2799:
 15400              	.LBE2805:
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 15401              		.loc 1 222 73 view .LVU4046
 15402 006e B0FA80F0 		clz	r0, r0
ARM GAS  /tmp/ccK8IvWa.s 			page 433


 15403 0072 4009     		lsrs	r0, r0, #5
 15404 0074 0230     		adds	r0, r0, #2
 15405              	.LBB2806:
 15406              	.LBB2800:
 214:src/xeq.c     **** }
 15407              		.loc 1 214 57 view .LVU4047
 15408 0076 C2F30B02 		ubfx	r2, r2, #0, #12
 15409 007a 0241     		asrs	r2, r2, r0
 15410 007c D317     		asrs	r3, r2, #31
 15411 007e D3E7     		b	.L1083
 15412              	.LVL1139:
 15413              	.L1092:
 214:src/xeq.c     **** }
 15414              		.loc 1 214 57 view .LVU4048
 15415              	.LBE2800:
 15416              	.LBE2806:
 15417              	.LBE2807:
 15418              	.LBE2808:
 15419              	.LBE2812:
 15420              	.LBB2813:
 15421              	.LBI2813:
1812:src/xeq.c     **** 	return NUMPROG_FLASH_MAX - UserFlash.size;
 15422              		.loc 1 1812 5 is_stmt 1 view .LVU4049
 15423              	.LBB2814:
1813:src/xeq.c     **** }
 15424              		.loc 1 1813 2 view .LVU4050
1813:src/xeq.c     **** }
 15425              		.loc 1 1813 38 is_stmt 0 view .LVU4051
 15426 0080 084B     		ldr	r3, .L1095+12
 15427 0082 5A88     		ldrh	r2, [r3, #2]
1813:src/xeq.c     **** }
 15428              		.loc 1 1813 27 view .LVU4052
 15429 0084 C2F5FF52 		rsb	r2, r2, #8160
 15430 0088 1E32     		adds	r2, r2, #30
 15431 008a 0023     		movs	r3, #0
 15432              	.LBE2814:
 15433              	.LBE2813:
 15434 008c CCE7     		b	.L1083
 15435              	.LVL1140:
 15436              	.L1093:
 15437              	.LBB2815:
 15438              	.LBB2785:
1813:src/xeq.c     **** }
 15439              		.loc 1 1813 27 view .LVU4053
 15440 008e FFF7FEFF 		bl	global_regs.part.0
 15441              	.LVL1141:
1813:src/xeq.c     **** }
 15442              		.loc 1 1813 27 view .LVU4054
 15443 0092 0023     		movs	r3, #0
 15444 0094 0246     		mov	r2, r0
 15445 0096 C7E7     		b	.L1083
 15446              	.L1096:
 15447              		.align	2
 15448              	.L1095:
 15449 0098 00000000 		.word	PersistentRam
 15450 009c 00000000 		.word	RetStkSize
 15451 00a0 00000000 		.word	RetStk
ARM GAS  /tmp/ccK8IvWa.s 			page 434


 15452 00a4 00000000 		.word	UserFlash
 15453              	.LBE2785:
 15454              	.LBE2815:
 15455              		.cfi_endproc
 15456              	.LFE133:
 15458              		.section	.text.cmdputkey,"ax",%progbits
 15459              		.align	1
 15460              		.p2align 2,,3
 15461              		.global	cmdputkey
 15462              		.syntax unified
 15463              		.thumb
 15464              		.thumb_func
 15465              		.fpu fpv4-sp-d16
 15467              	cmdputkey:
 15468              	.LVL1142:
 15469              	.LFB136:
1857:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 15470              		.loc 1 1857 1 is_stmt 1 view -0
 15471              		.cfi_startproc
 15472              		@ args = 0, pretend = 0, frame = 0
 15473              		@ frame_needed = 0, uses_anonymous_args = 0
1858:src/xeq.c     **** 
 15474              		.loc 1 1858 2 view .LVU4056
1857:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 15475              		.loc 1 1857 1 is_stmt 0 view .LVU4057
 15476 0000 38B5     		push	{r3, r4, r5, lr}
 15477              		.cfi_def_cfa_offset 16
 15478              		.cfi_offset 3, -16
 15479              		.cfi_offset 4, -12
 15480              		.cfi_offset 5, -8
 15481              		.cfi_offset 14, -4
1858:src/xeq.c     **** 
 15482              		.loc 1 1858 16 view .LVU4058
 15483 0002 FFF7FEFF 		bl	get_keycode_from_reg
 15484              	.LVL1143:
1860:src/xeq.c     **** 		set_running_off();
 15485              		.loc 1 1860 2 is_stmt 1 view .LVU4059
1860:src/xeq.c     **** 		set_running_off();
 15486              		.loc 1 1860 5 is_stmt 0 view .LVU4060
 15487 0006 041E     		subs	r4, r0, #0
 15488 0008 00DA     		bge	.L1100
1864:src/xeq.c     **** 
 15489              		.loc 1 1864 1 view .LVU4061
 15490 000a 38BD     		pop	{r3, r4, r5, pc}
 15491              	.L1100:
1861:src/xeq.c     **** 		put_key(c);
 15492              		.loc 1 1861 3 is_stmt 1 view .LVU4062
 15493              	.LBB2816:
 15494              	.LBI2816:
5560:src/xeq.c     **** 	set_running_off_sst();
 15495              		.loc 1 5560 6 view .LVU4063
 15496              	.LBB2817:
5561:src/xeq.c     **** 	State.entryp = 0;
 15497              		.loc 1 5561 2 view .LVU4064
 15498              	.LBB2818:
 15499              	.LBI2818:
5552:src/xeq.c     **** 	Running = 0;
ARM GAS  /tmp/ccK8IvWa.s 			page 435


 15500              		.loc 1 5552 6 view .LVU4065
 15501              	.LBB2819:
5553:src/xeq.c     **** }
 15502              		.loc 1 5553 2 view .LVU4066
 15503              	.LBE2819:
 15504              	.LBE2818:
5562:src/xeq.c     **** 	dot( RCL_annun, 0);
 15505              		.loc 1 5562 15 is_stmt 0 view .LVU4067
 15506 000c 084B     		ldr	r3, .L1101
 15507              	.LBB2823:
 15508              	.LBB2820:
5553:src/xeq.c     **** }
 15509              		.loc 1 5553 10 view .LVU4068
 15510 000e 094D     		ldr	r5, .L1101+4
 15511              	.LBE2820:
 15512              	.LBE2823:
5562:src/xeq.c     **** 	dot( RCL_annun, 0);
 15513              		.loc 1 5562 15 view .LVU4069
 15514 0010 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 15515              	.LBB2824:
 15516              	.LBB2821:
5553:src/xeq.c     **** }
 15517              		.loc 1 5553 10 view .LVU4070
 15518 0014 0021     		movs	r1, #0
 15519              	.LBE2821:
 15520              	.LBE2824:
5562:src/xeq.c     **** 	dot( RCL_annun, 0);
 15521              		.loc 1 5562 15 view .LVU4071
 15522 0016 61F30412 		bfi	r2, r1, #4, #1
 15523 001a 83F8DD27 		strb	r2, [r3, #2013]
 15524              		.loc 1 5563 2 view .LVU4072
 15525 001e 8A20     		movs	r0, #138
 15526              	.LVL1144:
 15527              	.LBB2825:
 15528              	.LBB2822:
5553:src/xeq.c     **** }
 15529              		.loc 1 5553 10 view .LVU4073
 15530 0020 2960     		str	r1, [r5]
 15531              	.LBE2822:
 15532              	.LBE2825:
5562:src/xeq.c     **** 	dot( RCL_annun, 0);
 15533              		.loc 1 5562 2 is_stmt 1 view .LVU4074
 15534              		.loc 1 5563 2 view .LVU4075
 15535 0022 FFF7FEFF 		bl	dot
 15536              	.LVL1145:
 15537              	.LBE2817:
 15538              	.LBE2816:
1862:src/xeq.c     **** 	}
 15539              		.loc 1 1862 3 view .LVU4076
 15540 0026 2046     		mov	r0, r4
1864:src/xeq.c     **** 
 15541              		.loc 1 1864 1 is_stmt 0 view .LVU4077
 15542 0028 BDE83840 		pop	{r3, r4, r5, lr}
 15543              		.cfi_restore 14
 15544              		.cfi_restore 5
 15545              		.cfi_restore 4
 15546              		.cfi_restore 3
ARM GAS  /tmp/ccK8IvWa.s 			page 436


 15547              		.cfi_def_cfa_offset 0
 15548              	.LVL1146:
1862:src/xeq.c     **** 	}
 15549              		.loc 1 1862 3 view .LVU4078
 15550 002c FFF7FEBF 		b	put_key
 15551              	.LVL1147:
 15552              	.L1102:
1862:src/xeq.c     **** 	}
 15553              		.loc 1 1862 3 view .LVU4079
 15554              		.align	2
 15555              	.L1101:
 15556 0030 00000000 		.word	PersistentRam
 15557 0034 00000000 		.word	Running
 15558              		.cfi_endproc
 15559              	.LFE136:
 15561              		.section	.text.cmdkeytype,"ax",%progbits
 15562              		.align	1
 15563              		.p2align 2,,3
 15564              		.global	cmdkeytype
 15565              		.syntax unified
 15566              		.thumb
 15567              		.thumb_func
 15568              		.fpu fpv4-sp-d16
 15570              	cmdkeytype:
 15571              	.LVL1148:
 15572              	.LFB137:
1872:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 15573              		.loc 1 1872 1 is_stmt 1 view -0
 15574              		.cfi_startproc
 15575              		@ args = 0, pretend = 0, frame = 48
 15576              		@ frame_needed = 0, uses_anonymous_args = 0
1873:src/xeq.c     **** 	if ( c >= 0 ) {
 15577              		.loc 1 1873 2 view .LVU4081
1872:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 15578              		.loc 1 1872 1 is_stmt 0 view .LVU4082
 15579 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 15580              		.cfi_def_cfa_offset 20
 15581              		.cfi_offset 4, -20
 15582              		.cfi_offset 5, -16
 15583              		.cfi_offset 6, -12
 15584              		.cfi_offset 7, -8
 15585              		.cfi_offset 14, -4
 15586 0002 8FB0     		sub	sp, sp, #60
 15587              		.cfi_def_cfa_offset 80
1873:src/xeq.c     **** 	if ( c >= 0 ) {
 15588              		.loc 1 1873 16 view .LVU4083
 15589 0004 FFF7FEFF 		bl	get_keycode_from_reg
 15590              	.LVL1149:
1874:src/xeq.c     **** 		const char types[] = {
 15591              		.loc 1 1874 2 is_stmt 1 view .LVU4084
1874:src/xeq.c     **** 		const char types[] = {
 15592              		.loc 1 1874 5 is_stmt 0 view .LVU4085
 15593 0008 061E     		subs	r6, r0, #0
 15594 000a 17DB     		blt	.L1103
 15595              	.LBB2826:
1875:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 15596              		.loc 1 1875 3 is_stmt 1 view .LVU4086
ARM GAS  /tmp/ccK8IvWa.s 			page 437


1875:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 15597              		.loc 1 1875 14 is_stmt 0 view .LVU4087
 15598 000c 0E4D     		ldr	r5, .L1111
 15599              	.LBB2827:
 15600              	.LBB2828:
 15601              	.LBB2829:
 15602              	.LBB2830:
 721:src/xeq.c     **** }
 15603              		.loc 1 721 15 view .LVU4088
 15604 000e 0F4F     		ldr	r7, .L1111+4
 15605              	.LBE2830:
 15606              	.LBE2829:
 15607              	.LBE2828:
 15608              	.LBE2827:
1875:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 15609              		.loc 1 1875 14 view .LVU4089
 15610 0010 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 15611              	.LVL1150:
1875:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 15612              		.loc 1 1875 14 view .LVU4090
 15613 0012 03AC     		add	r4, sp, #12
 15614 0014 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 15615 0016 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 15616 0018 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 15617 001a 95E80700 		ldm	r5, {r0, r1, r2}
 15618              	.LBB2839:
 15619              	.LBB2835:
 15620              	.LBB2833:
 15621              	.LBB2831:
 721:src/xeq.c     **** }
 15622              		.loc 1 721 15 view .LVU4091
 15623 001e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 15624              	.LBE2831:
 15625              	.LBE2833:
 15626              	.LBE2835:
 15627              	.LBE2839:
1875:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 15628              		.loc 1 1875 14 view .LVU4092
 15629 0020 03C4     		stmia	r4!, {r0, r1}
 15630              	.LBB2840:
 15631              	.LBB2836:
 725:src/xeq.c     **** 		lift();
 15632              		.loc 1 725 5 view .LVU4093
 15633 0022 5B06     		lsls	r3, r3, #25
 15634              	.LBE2836:
 15635              	.LBE2840:
1875:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 15636              		.loc 1 1875 14 view .LVU4094
 15637 0024 2270     		strb	r2, [r4]
1883:src/xeq.c     **** 		setX_int_sgn(types[c], 0);
 15638              		.loc 1 1883 3 is_stmt 1 view .LVU4095
 15639              	.LBB2841:
 15640              	.LBI2827:
 724:src/xeq.c     **** 	if (get_lift())
 15641              		.loc 1 724 6 view .LVU4096
 15642              	.LBB2837:
 725:src/xeq.c     **** 		lift();
ARM GAS  /tmp/ccK8IvWa.s 			page 438


 15643              		.loc 1 725 2 view .LVU4097
 15644              	.LBB2834:
 15645              	.LBI2829:
 720:src/xeq.c     **** 	return State2.state_lift;
 15646              		.loc 1 720 12 view .LVU4098
 15647              	.LBB2832:
 721:src/xeq.c     **** }
 15648              		.loc 1 721 2 view .LVU4099
 15649              	.LBE2832:
 15650              	.LBE2834:
 725:src/xeq.c     **** 		lift();
 15651              		.loc 1 725 5 is_stmt 0 view .LVU4100
 15652 0026 0BD4     		bmi	.L1110
 15653              	.L1105:
 15654              	.LBE2837:
 15655              	.LBE2841:
1884:src/xeq.c     **** 	}
 15656              		.loc 1 1884 3 is_stmt 1 view .LVU4101
 15657              	.LVL1151:
 15658              	.LBB2842:
 15659              	.LBI2842:
1309:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 15660              		.loc 1 1309 6 view .LVU4102
 15661              	.LBB2843:
1310:src/xeq.c     **** }
 15662              		.loc 1 1310 2 view .LVU4103
 15663              	.LBE2843:
 15664              	.LBE2842:
1884:src/xeq.c     **** 	}
 15665              		.loc 1 1884 21 is_stmt 0 view .LVU4104
 15666 0028 0EAB     		add	r3, sp, #56
 15667 002a 9819     		adds	r0, r3, r6
 15668              	.LBB2845:
 15669              	.LBB2844:
1310:src/xeq.c     **** }
 15670              		.loc 1 1310 2 view .LVU4105
 15671 002c 0021     		movs	r1, #0
 15672 002e 10F82C2C 		ldrb	r2, [r0, #-44]	@ zero_extendqisi2
 15673 0032 0091     		str	r1, [sp]
 15674              	.LVL1152:
1310:src/xeq.c     **** }
 15675              		.loc 1 1310 2 view .LVU4106
 15676 0034 0023     		movs	r3, #0
 15677 0036 6420     		movs	r0, #100
 15678 0038 FFF7FEFF 		bl	set_reg_n_int_sgn
 15679              	.LVL1153:
 15680              	.L1103:
1310:src/xeq.c     **** }
 15681              		.loc 1 1310 2 view .LVU4107
 15682              	.LBE2844:
 15683              	.LBE2845:
 15684              	.LBE2826:
1886:src/xeq.c     **** 
 15685              		.loc 1 1886 1 view .LVU4108
 15686 003c 0FB0     		add	sp, sp, #60
 15687              		.cfi_remember_state
 15688              		.cfi_def_cfa_offset 20
ARM GAS  /tmp/ccK8IvWa.s 			page 439


 15689              		@ sp needed
 15690 003e F0BD     		pop	{r4, r5, r6, r7, pc}
 15691              	.LVL1154:
 15692              	.L1110:
 15693              		.cfi_restore_state
 15694              	.LBB2847:
 15695              	.LBB2846:
 15696              	.LBB2838:
 726:src/xeq.c     **** }
 15697              		.loc 1 726 3 is_stmt 1 view .LVU4109
 15698 0040 FFF7FEFF 		bl	lift
 15699              	.LVL1155:
 15700 0044 F0E7     		b	.L1105
 15701              	.L1112:
 15702 0046 00BF     		.align	2
 15703              	.L1111:
 15704 0048 00000000 		.word	.LANCHOR5
 15705 004c 00000000 		.word	StateWhileOn
 15706              	.LBE2838:
 15707              	.LBE2846:
 15708              	.LBE2847:
 15709              		.cfi_endproc
 15710              	.LFE137:
 15712              		.section	.rodata.op_query_xtal.str1.4,"aMS",%progbits,1
 15713              		.align	2
 15714              	.LC2:
 15715 0000 74727565 		.ascii	"true\000"
 15715      00
 15716              		.section	.text.op_query_xtal,"ax",%progbits
 15717              		.align	1
 15718              		.p2align 2,,3
 15719              		.global	op_query_xtal
 15720              		.syntax unified
 15721              		.thumb
 15722              		.thumb_func
 15723              		.fpu fpv4-sp-d16
 15725              	op_query_xtal:
 15726              	.LVL1156:
 15727              	.LFB140:
1906:src/xeq.c     **** 	fin_tst(Xtal);
 15728              		.loc 1 1906 35 view -0
 15729              		.cfi_startproc
 15730              		@ args = 0, pretend = 0, frame = 0
 15731              		@ frame_needed = 0, uses_anonymous_args = 0
 15732              		@ link register save eliminated.
1907:src/xeq.c     **** }
 15733              		.loc 1 1907 2 view .LVU4111
 15734              	.LBB2848:
 15735              	.LBI2848:
2324:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 15736              		.loc 1 2324 6 view .LVU4112
 15737              	.LBB2849:
2325:src/xeq.c     **** 	if (Running || XromRunning) {
 15738              		.loc 1 2325 2 view .LVU4113
2326:src/xeq.c     **** 		if (! a && incpc())
 15739              		.loc 1 2326 2 view .LVU4114
2326:src/xeq.c     **** 		if (! a && incpc())
ARM GAS  /tmp/ccK8IvWa.s 			page 440


 15740              		.loc 1 2326 6 is_stmt 0 view .LVU4115
 15741 0000 044A     		ldr	r2, .L1115
2326:src/xeq.c     **** 		if (! a && incpc())
 15742              		.loc 1 2326 14 view .LVU4116
 15743 0002 054B     		ldr	r3, .L1115+4
 15744 0004 1268     		ldr	r2, [r2]
 15745 0006 1B68     		ldr	r3, [r3]
 15746 0008 1343     		orrs	r3, r2, r3
 15747 000a 02D1     		bne	.L1113
2331:src/xeq.c     **** #ifdef INFRARED
 15748              		.loc 1 2331 3 is_stmt 1 view .LVU4117
2331:src/xeq.c     **** #ifdef INFRARED
 15749              		.loc 1 2331 11 is_stmt 0 view .LVU4118
 15750 000c 034B     		ldr	r3, .L1115+8
 15751 000e 044A     		ldr	r2, .L1115+12
 15752 0010 1A60     		str	r2, [r3]
 15753              	.LVL1157:
 15754              	.L1113:
2331:src/xeq.c     **** #ifdef INFRARED
 15755              		.loc 1 2331 11 view .LVU4119
 15756              	.LBE2849:
 15757              	.LBE2848:
1908:src/xeq.c     **** 
 15758              		.loc 1 1908 1 view .LVU4120
 15759 0012 7047     		bx	lr
 15760              	.L1116:
 15761              		.align	2
 15762              	.L1115:
 15763 0014 00000000 		.word	Running
 15764 0018 00000000 		.word	XromRunning
 15765 001c 00000000 		.word	DispMsg
 15766 0020 00000000 		.word	.LC2
 15767              		.cfi_endproc
 15768              	.LFE140:
 15770              		.section	.rodata.op_query_print.str1.4,"aMS",%progbits,1
 15771              		.align	2
 15772              	.LC3:
 15773 0000 66616C73 		.ascii	"false\000"
 15773      6500
 15774              		.section	.text.op_query_print,"ax",%progbits
 15775              		.align	1
 15776              		.p2align 2,,3
 15777              		.global	op_query_print
 15778              		.syntax unified
 15779              		.thumb
 15780              		.thumb_func
 15781              		.fpu fpv4-sp-d16
 15783              	op_query_print:
 15784              	.LVL1158:
 15785              	.LFB141:
1910:src/xeq.c     **** #ifdef INFRARED
 15786              		.loc 1 1910 36 is_stmt 1 view -0
 15787              		.cfi_startproc
 15788              		@ args = 0, pretend = 0, frame = 0
 15789              		@ frame_needed = 0, uses_anonymous_args = 0
 15790              		@ link register save eliminated.
1914:src/xeq.c     **** #endif
ARM GAS  /tmp/ccK8IvWa.s 			page 441


 15791              		.loc 1 1914 2 view .LVU4122
 15792              	.LBB2850:
 15793              	.LBI2850:
2324:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 15794              		.loc 1 2324 6 view .LVU4123
 15795              	.LBB2851:
2325:src/xeq.c     **** 	if (Running || XromRunning) {
 15796              		.loc 1 2325 2 view .LVU4124
2326:src/xeq.c     **** 		if (! a && incpc())
 15797              		.loc 1 2326 2 view .LVU4125
2326:src/xeq.c     **** 		if (! a && incpc())
 15798              		.loc 1 2326 6 is_stmt 0 view .LVU4126
 15799 0000 054A     		ldr	r2, .L1120
2326:src/xeq.c     **** 		if (! a && incpc())
 15800              		.loc 1 2326 14 view .LVU4127
 15801 0002 064B     		ldr	r3, .L1120+4
 15802 0004 1268     		ldr	r2, [r2]
 15803 0006 1B68     		ldr	r3, [r3]
 15804 0008 1343     		orrs	r3, r2, r3
 15805 000a 03D1     		bne	.L1119
2331:src/xeq.c     **** #ifdef INFRARED
 15806              		.loc 1 2331 3 is_stmt 1 view .LVU4128
2331:src/xeq.c     **** #ifdef INFRARED
 15807              		.loc 1 2331 11 is_stmt 0 view .LVU4129
 15808 000c 044B     		ldr	r3, .L1120+8
 15809 000e 054A     		ldr	r2, .L1120+12
 15810 0010 1A60     		str	r2, [r3]
 15811              	.LVL1159:
2331:src/xeq.c     **** #ifdef INFRARED
 15812              		.loc 1 2331 11 view .LVU4130
 15813              	.LBE2851:
 15814              	.LBE2850:
1916:src/xeq.c     **** 
 15815              		.loc 1 1916 1 view .LVU4131
 15816 0012 7047     		bx	lr
 15817              	.LVL1160:
 15818              	.L1119:
 15819              	.LBB2853:
 15820              	.LBB2852:
2327:src/xeq.c     **** 			decpc();
 15821              		.loc 1 2327 3 is_stmt 1 view .LVU4132
 15822 0014 FFF7FEBF 		b	fin_tst.part.0
 15823              	.LVL1161:
 15824              	.L1121:
2327:src/xeq.c     **** 			decpc();
 15825              		.loc 1 2327 3 is_stmt 0 view .LVU4133
 15826              		.align	2
 15827              	.L1120:
 15828 0018 00000000 		.word	Running
 15829 001c 00000000 		.word	XromRunning
 15830 0020 00000000 		.word	DispMsg
 15831 0024 00000000 		.word	.LC3
 15832              	.LBE2852:
 15833              	.LBE2853:
 15834              		.cfi_endproc
 15835              	.LFE141:
 15837              		.section	.text.cmdstostk,"ax",%progbits
ARM GAS  /tmp/ccK8IvWa.s 			page 442


 15838              		.align	1
 15839              		.p2align 2,,3
 15840              		.global	cmdstostk
 15841              		.syntax unified
 15842              		.thumb
 15843              		.thumb_func
 15844              		.fpu fpv4-sp-d16
 15846              	cmdstostk:
 15847              	.LVL1162:
 15848              	.LFB143:
1929:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 15849              		.loc 1 1929 48 is_stmt 1 view -0
 15850              		.cfi_startproc
 15851              		@ args = 0, pretend = 0, frame = 0
 15852              		@ frame_needed = 0, uses_anonymous_args = 0
1930:src/xeq.c     **** 
 15853              		.loc 1 1930 2 view .LVU4135
1929:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 15854              		.loc 1 1929 48 is_stmt 0 view .LVU4136
 15855 0000 70B5     		push	{r4, r5, r6, lr}
 15856              		.cfi_def_cfa_offset 16
 15857              		.cfi_offset 4, -16
 15858              		.cfi_offset 5, -12
 15859              		.cfi_offset 6, -8
 15860              		.cfi_offset 14, -4
1929:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 15861              		.loc 1 1929 48 view .LVU4137
 15862 0002 0546     		mov	r5, r0
1930:src/xeq.c     **** 
 15863              		.loc 1 1930 13 view .LVU4138
 15864 0004 FFF7FEFF 		bl	check_stack_overlap
 15865              	.LVL1163:
1932:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 15866              		.loc 1 1932 2 is_stmt 1 view .LVU4139
1932:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 15867              		.loc 1 1932 12 view .LVU4140
1932:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 15868              		.loc 1 1932 2 is_stmt 0 view .LVU4141
 15869 0008 031E     		subs	r3, r0, #0
 15870 000a 0ADD     		ble	.L1122
 15871 000c 2C46     		mov	r4, r5
 15872 000e C4F16406 		rsb	r6, r4, #100
 15873 0012 1D44     		add	r5, r5, r3
 15874              	.LVL1164:
 15875              	.L1124:
1933:src/xeq.c     **** }
 15876              		.loc 1 1933 3 is_stmt 1 discriminator 3 view .LVU4142
 15877 0014 3119     		adds	r1, r6, r4
 15878 0016 2046     		mov	r0, r4
 15879 0018 0134     		adds	r4, r4, #1
 15880              	.LVL1165:
1933:src/xeq.c     **** }
 15881              		.loc 1 1933 3 is_stmt 0 discriminator 3 view .LVU4143
 15882 001a FFF7FEFF 		bl	copyreg_n
 15883              	.LVL1166:
1932:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 15884              		.loc 1 1932 17 is_stmt 1 discriminator 3 view .LVU4144
ARM GAS  /tmp/ccK8IvWa.s 			page 443


1932:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 15885              		.loc 1 1932 12 discriminator 3 view .LVU4145
1932:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 15886              		.loc 1 1932 2 is_stmt 0 discriminator 3 view .LVU4146
 15887 001e AC42     		cmp	r4, r5
 15888 0020 F8D1     		bne	.L1124
 15889              	.L1122:
1934:src/xeq.c     **** 
 15890              		.loc 1 1934 1 view .LVU4147
 15891 0022 70BD     		pop	{r4, r5, r6, pc}
 15892              		.cfi_endproc
 15893              	.LFE143:
 15895              		.section	.text.cmdrclstk,"ax",%progbits
 15896              		.align	1
 15897              		.p2align 2,,3
 15898              		.global	cmdrclstk
 15899              		.syntax unified
 15900              		.thumb
 15901              		.thumb_func
 15902              		.fpu fpv4-sp-d16
 15904              	cmdrclstk:
 15905              	.LVL1167:
 15906              	.LFB144:
1936:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 15907              		.loc 1 1936 48 is_stmt 1 view -0
 15908              		.cfi_startproc
 15909              		@ args = 0, pretend = 0, frame = 0
 15910              		@ frame_needed = 0, uses_anonymous_args = 0
1937:src/xeq.c     **** 
 15911              		.loc 1 1937 2 view .LVU4149
1936:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 15912              		.loc 1 1936 48 is_stmt 0 view .LVU4150
 15913 0000 70B5     		push	{r4, r5, r6, lr}
 15914              		.cfi_def_cfa_offset 16
 15915              		.cfi_offset 4, -16
 15916              		.cfi_offset 5, -12
 15917              		.cfi_offset 6, -8
 15918              		.cfi_offset 14, -4
1936:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 15919              		.loc 1 1936 48 view .LVU4151
 15920 0002 0646     		mov	r6, r0
1937:src/xeq.c     **** 
 15921              		.loc 1 1937 13 view .LVU4152
 15922 0004 FFF7FEFF 		bl	check_stack_overlap
 15923              	.LVL1168:
1939:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 15924              		.loc 1 1939 2 is_stmt 1 view .LVU4153
1939:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 15925              		.loc 1 1939 12 view .LVU4154
1939:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 15926              		.loc 1 1939 2 is_stmt 0 view .LVU4155
 15927 0008 051E     		subs	r5, r0, #0
 15928 000a 09DD     		ble	.L1127
 15929 000c 6435     		adds	r5, r5, #100
 15930 000e 643E     		subs	r6, r6, #100
 15931              	.LVL1169:
1939:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
ARM GAS  /tmp/ccK8IvWa.s 			page 444


 15932              		.loc 1 1939 2 view .LVU4156
 15933 0010 6424     		movs	r4, #100
 15934              	.LVL1170:
 15935              	.L1129:
1940:src/xeq.c     **** }
 15936              		.loc 1 1940 3 is_stmt 1 discriminator 3 view .LVU4157
 15937 0012 3119     		adds	r1, r6, r4
 15938 0014 2046     		mov	r0, r4
 15939 0016 0134     		adds	r4, r4, #1
 15940              	.LVL1171:
1940:src/xeq.c     **** }
 15941              		.loc 1 1940 3 is_stmt 0 discriminator 3 view .LVU4158
 15942 0018 FFF7FEFF 		bl	copyreg_n
 15943              	.LVL1172:
1939:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 15944              		.loc 1 1939 17 is_stmt 1 discriminator 3 view .LVU4159
1939:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 15945              		.loc 1 1939 12 discriminator 3 view .LVU4160
1939:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 15946              		.loc 1 1939 2 is_stmt 0 discriminator 3 view .LVU4161
 15947 001c AC42     		cmp	r4, r5
 15948 001e F8D1     		bne	.L1129
 15949              	.LVL1173:
 15950              	.L1127:
1941:src/xeq.c     **** 
 15951              		.loc 1 1941 1 view .LVU4162
 15952 0020 70BD     		pop	{r4, r5, r6, pc}
 15953              		.cfi_endproc
 15954              	.LFE144:
 15956 0022 00BF     		.section	.text.find_opcode_from,"ax",%progbits
 15957              		.align	1
 15958              		.p2align 2,,3
 15959              		.global	find_opcode_from
 15960              		.syntax unified
 15961              		.thumb
 15962              		.thumb_func
 15963              		.fpu fpv4-sp-d16
 15965              	find_opcode_from:
 15966              	.LVL1174:
 15967              	.LFB146:
1974:src/xeq.c     **** 	unsigned short int top;
 15968              		.loc 1 1974 81 is_stmt 1 view -0
 15969              		.cfi_startproc
 15970              		@ args = 0, pretend = 0, frame = 8
 15971              		@ frame_needed = 0, uses_anonymous_args = 0
1974:src/xeq.c     **** 	unsigned short int top;
 15972              		.loc 1 1974 81 is_stmt 0 view .LVU4164
 15973 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 15974              		.cfi_def_cfa_offset 24
 15975              		.cfi_offset 4, -24
 15976              		.cfi_offset 5, -20
 15977              		.cfi_offset 6, -16
 15978              		.cfi_offset 7, -12
 15979              		.cfi_offset 8, -8
 15980              		.cfi_offset 14, -4
1977:src/xeq.c     **** 	const int errp = flags & FIND_OP_ERROR;
 15981              		.loc 1 1977 12 view .LVU4165
ARM GAS  /tmp/ccK8IvWa.s 			page 445


 15982 0004 02F00207 		and	r7, r2, #2
1974:src/xeq.c     **** 	unsigned short int top;
 15983              		.loc 1 1974 81 view .LVU4166
 15984 0008 82B0     		sub	sp, sp, #8
 15985              		.cfi_def_cfa_offset 32
1974:src/xeq.c     **** 	unsigned short int top;
 15986              		.loc 1 1974 81 view .LVU4167
 15987 000a 9046     		mov	r8, r2
 15988 000c 0E46     		mov	r6, r1
1980:src/xeq.c     **** 	count -= top;
 15989              		.loc 1 1980 14 view .LVU4168
 15990 000e 0DF10602 		add	r2, sp, #6
 15991              	.LVL1175:
1980:src/xeq.c     **** 	count -= top;
 15992              		.loc 1 1980 14 view .LVU4169
 15993 0012 3946     		mov	r1, r7
 15994              	.LVL1176:
1974:src/xeq.c     **** 	unsigned short int top;
 15995              		.loc 1 1974 81 view .LVU4170
 15996 0014 0446     		mov	r4, r0
1975:src/xeq.c     **** 	int count;
 15997              		.loc 1 1975 2 is_stmt 1 view .LVU4171
1976:src/xeq.c     **** 	const int endp = flags & FIND_OP_ENDS;
 15998              		.loc 1 1976 2 view .LVU4172
1977:src/xeq.c     **** 	const int errp = flags & FIND_OP_ERROR;
 15999              		.loc 1 1977 2 view .LVU4173
 16000              	.LVL1177:
1978:src/xeq.c     **** 
 16001              		.loc 1 1978 2 view .LVU4174
1980:src/xeq.c     **** 	count -= top;
 16002              		.loc 1 1980 2 view .LVU4175
1980:src/xeq.c     **** 	count -= top;
 16003              		.loc 1 1980 14 is_stmt 0 view .LVU4176
 16004 0016 FFF7FEFF 		bl	find_section_bounds
 16005              	.LVL1178:
1981:src/xeq.c     **** 	while (count--) {
 16006              		.loc 1 1981 8 view .LVU4177
 16007 001a BDF80650 		ldrh	r5, [sp, #6]
1980:src/xeq.c     **** 	count -= top;
 16008              		.loc 1 1980 8 view .LVU4178
 16009 001e 0130     		adds	r0, r0, #1
 16010              	.LVL1179:
1981:src/xeq.c     **** 	while (count--) {
 16011              		.loc 1 1981 2 is_stmt 1 view .LVU4179
1982:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 16012              		.loc 1 1982 2 view .LVU4180
1982:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 16013              		.loc 1 1982 8 view .LVU4181
1982:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 16014              		.loc 1 1982 8 is_stmt 0 view .LVU4182
 16015 0020 451B     		subs	r5, r0, r5
 16016              	.LVL1180:
1982:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 16017              		.loc 1 1982 8 view .LVU4183
 16018 0022 05D1     		bne	.L1135
 16019 0024 10E0     		b	.L1133
 16020              	.LVL1181:
ARM GAS  /tmp/ccK8IvWa.s 			page 446


 16021              	.L1143:
1988:src/xeq.c     **** 	}
 16022              		.loc 1 1988 8 view .LVU4184
 16023 0026 FFF7FEFF 		bl	do_inc
 16024              	.LVL1182:
1982:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 16025              		.loc 1 1982 8 view .LVU4185
 16026 002a 013D     		subs	r5, r5, #1
 16027              	.LVL1183:
1988:src/xeq.c     **** 	}
 16028              		.loc 1 1988 8 view .LVU4186
 16029 002c 0446     		mov	r4, r0
 16030              	.LVL1184:
1982:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 16031              		.loc 1 1982 8 is_stmt 1 view .LVU4187
1982:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 16032              		.loc 1 1982 8 is_stmt 0 view .LVU4188
 16033 002e 0BD0     		beq	.L1133
 16034              	.LVL1185:
 16035              	.L1135:
1986:src/xeq.c     **** 			return pc;
 16036              		.loc 1 1986 3 is_stmt 1 view .LVU4189
1986:src/xeq.c     **** 			return pc;
 16037              		.loc 1 1986 7 is_stmt 0 view .LVU4190
 16038 0030 2046     		mov	r0, r4
 16039 0032 FFF7FEFF 		bl	getprog
 16040              	.LVL1186:
1988:src/xeq.c     **** 	}
 16041              		.loc 1 1988 3 is_stmt 1 view .LVU4191
1986:src/xeq.c     **** 			return pc;
 16042              		.loc 1 1986 7 is_stmt 0 view .LVU4192
 16043 0036 0346     		mov	r3, r0
1986:src/xeq.c     **** 			return pc;
 16044              		.loc 1 1986 6 view .LVU4193
 16045 0038 B342     		cmp	r3, r6
1988:src/xeq.c     **** 	}
 16046              		.loc 1 1988 8 view .LVU4194
 16047 003a 3946     		mov	r1, r7
 16048 003c 2046     		mov	r0, r4
1986:src/xeq.c     **** 			return pc;
 16049              		.loc 1 1986 6 view .LVU4195
 16050 003e F2D1     		bne	.L1143
 16051              	.LVL1187:
 16052              	.L1132:
1993:src/xeq.c     **** 
 16053              		.loc 1 1993 1 view .LVU4196
 16054 0040 2046     		mov	r0, r4
 16055 0042 02B0     		add	sp, sp, #8
 16056              		.cfi_remember_state
 16057              		.cfi_def_cfa_offset 24
 16058              		@ sp needed
 16059 0044 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 16060              	.LVL1188:
 16061              	.L1133:
 16062              		.cfi_restore_state
1990:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 16063              		.loc 1 1990 2 is_stmt 1 view .LVU4197
ARM GAS  /tmp/ccK8IvWa.s 			page 447


1990:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 16064              		.loc 1 1990 5 is_stmt 0 view .LVU4198
 16065 0048 18F00104 		ands	r4, r8, #1
 16066 004c F8D0     		beq	.L1132
 16067              	.LBB2860:
 16068              	.LBI2860:
1974:src/xeq.c     **** 	unsigned short int top;
 16069              		.loc 1 1974 14 is_stmt 1 view .LVU4199
 16070              	.LVL1189:
 16071              	.LBB2861:
1991:src/xeq.c     **** 	return 0;
 16072              		.loc 1 1991 3 view .LVU4200
 16073              	.LBB2862:
 16074              	.LBI2862:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 16075              		.loc 1 523 5 view .LVU4201
 16076              	.LBB2863:
 524:src/xeq.c     **** 		Error = e;
 16077              		.loc 1 524 2 view .LVU4202
 524:src/xeq.c     **** 		Error = e;
 16078              		.loc 1 524 12 is_stmt 0 view .LVU4203
 16079 004e 074B     		ldr	r3, .L1144
 524:src/xeq.c     **** 		Error = e;
 16080              		.loc 1 524 5 view .LVU4204
 16081 0050 1C68     		ldr	r4, [r3]
 16082 0052 2CB9     		cbnz	r4, .L1137
 16083              	.LVL1190:
 16084              	.LBB2864:
 16085              	.LBI2864:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 16086              		.loc 1 523 5 is_stmt 1 view .LVU4205
 16087              	.LBB2865:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 16088              		.loc 1 525 3 view .LVU4206
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 16089              		.loc 1 525 9 is_stmt 0 view .LVU4207
 16090 0054 0622     		movs	r2, #6
 16091              	.LBE2865:
 16092              	.LBE2864:
 16093              	.LBE2863:
 16094              	.LBE2862:
 16095              	.LBE2861:
 16096              	.LBE2860:
1993:src/xeq.c     **** 
 16097              		.loc 1 1993 1 view .LVU4208
 16098 0056 2046     		mov	r0, r4
 16099              	.LBB2871:
 16100              	.LBB2870:
 16101              	.LBB2869:
 16102              	.LBB2868:
 16103              	.LBB2867:
 16104              	.LBB2866:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 16105              		.loc 1 525 9 view .LVU4209
 16106 0058 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 16107              		.loc 1 526 3 is_stmt 1 view .LVU4210
ARM GAS  /tmp/ccK8IvWa.s 			page 448


 16108              	.LBE2866:
 16109              	.LBE2867:
 16110              	.LBE2868:
 16111              	.LBE2869:
 16112              	.LBE2870:
 16113              	.LBE2871:
1993:src/xeq.c     **** 
 16114              		.loc 1 1993 1 is_stmt 0 view .LVU4211
 16115 005a 02B0     		add	sp, sp, #8
 16116              		.cfi_remember_state
 16117              		.cfi_def_cfa_offset 24
 16118              		@ sp needed
 16119 005c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 16120              	.LVL1191:
 16121              	.L1137:
 16122              		.cfi_restore_state
1992:src/xeq.c     **** }
 16123              		.loc 1 1992 9 view .LVU4212
 16124 0060 0024     		movs	r4, #0
 16125              	.LVL1192:
1993:src/xeq.c     **** 
 16126              		.loc 1 1993 1 view .LVU4213
 16127 0062 2046     		mov	r0, r4
 16128 0064 02B0     		add	sp, sp, #8
 16129              		.cfi_def_cfa_offset 24
 16130              		@ sp needed
 16131 0066 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 16132              	.LVL1193:
 16133              	.L1145:
1993:src/xeq.c     **** 
 16134              		.loc 1 1993 1 view .LVU4214
 16135 006a 00BF     		.align	2
 16136              	.L1144:
 16137 006c 00000000 		.word	Error
 16138              		.cfi_endproc
 16139              	.LFE146:
 16141              		.section	.text.find_label_from,"ax",%progbits
 16142              		.align	1
 16143              		.p2align 2,,3
 16144              		.global	find_label_from
 16145              		.syntax unified
 16146              		.thumb
 16147              		.thumb_func
 16148              		.fpu fpv4-sp-d16
 16150              	find_label_from:
 16151              	.LVL1194:
 16152              	.LFB147:
1996:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 16153              		.loc 1 1996 76 is_stmt 1 view -0
 16154              		.cfi_startproc
 16155              		@ args = 0, pretend = 0, frame = 0
 16156              		@ frame_needed = 0, uses_anonymous_args = 0
 16157              		@ link register save eliminated.
1997:src/xeq.c     **** }
 16158              		.loc 1 1997 2 view .LVU4216
1997:src/xeq.c     **** }
 16159              		.loc 1 1997 9 is_stmt 0 view .LVU4217
ARM GAS  /tmp/ccK8IvWa.s 			page 449


 16160 0000 41F4C441 		orr	r1, r1, #25088
 16161              	.LVL1195:
1997:src/xeq.c     **** }
 16162              		.loc 1 1997 9 view .LVU4218
 16163 0004 FFF7FEBF 		b	find_opcode_from
 16164              	.LVL1196:
1997:src/xeq.c     **** }
 16165              		.loc 1 1997 9 view .LVU4219
 16166              		.cfi_endproc
 16167              	.LFE147:
 16169              		.section	.text.op_rtn,"ax",%progbits
 16170              		.align	1
 16171              		.p2align 2,,3
 16172              		.global	op_rtn
 16173              		.syntax unified
 16174              		.thumb
 16175              		.thumb_func
 16176              		.fpu fpv4-sp-d16
 16178              	op_rtn:
 16179              	.LVL1197:
 16180              	.LFB150:
2055:src/xeq.c     **** 	if (! Running && ! XromRunning) {
 16181              		.loc 1 2055 28 is_stmt 1 view -0
 16182              		.cfi_startproc
 16183              		@ args = 0, pretend = 0, frame = 0
 16184              		@ frame_needed = 0, uses_anonymous_args = 0
 16185              		@ link register save eliminated.
2056:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 16186              		.loc 1 2056 2 view .LVU4221
2056:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 16187              		.loc 1 2056 6 is_stmt 0 view .LVU4222
 16188 0000 074A     		ldr	r2, .L1150
2056:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 16189              		.loc 1 2056 19 view .LVU4223
 16190 0002 084B     		ldr	r3, .L1150+4
2056:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 16191              		.loc 1 2056 16 view .LVU4224
 16192 0004 1268     		ldr	r2, [r2]
 16193 0006 1B68     		ldr	r3, [r3]
 16194 0008 1343     		orrs	r3, r2, r3
 16195 000a 06D0     		beq	.L1149
2061:src/xeq.c     **** }
 16196              		.loc 1 2061 3 is_stmt 1 view .LVU4225
 16197 000c A0F13900 		sub	r0, #57
 16198              	.LVL1198:
2061:src/xeq.c     **** }
 16199              		.loc 1 2061 3 is_stmt 0 view .LVU4226
 16200 0010 B0FA80F0 		clz	r0, r0
 16201 0014 4009     		lsrs	r0, r0, #5
 16202 0016 FFF7FEBF 		b	do_rtn
 16203              	.LVL1199:
 16204              	.L1149:
2058:src/xeq.c     **** 	}
 16205              		.loc 1 2058 3 is_stmt 1 view .LVU4227
 16206 001a FFF7FEBF 		b	clrretstk_pc
 16207              	.LVL1200:
 16208              	.L1151:
ARM GAS  /tmp/ccK8IvWa.s 			page 450


2058:src/xeq.c     **** 	}
 16209              		.loc 1 2058 3 is_stmt 0 view .LVU4228
 16210 001e 00BF     		.align	2
 16211              	.L1150:
 16212 0020 00000000 		.word	Running
 16213 0024 00000000 		.word	XromRunning
 16214              		.cfi_endproc
 16215              	.LFE150:
 16217              		.section	.text.op_popusr,"ax",%progbits
 16218              		.align	1
 16219              		.p2align 2,,3
 16220              		.global	op_popusr
 16221              		.syntax unified
 16222              		.thumb
 16223              		.thumb_func
 16224              		.fpu fpv4-sp-d16
 16226              	op_popusr:
 16227              	.LVL1201:
 16228              	.LFB154:
2102:src/xeq.c     **** 	UserLocalRegs = RetStk[RetStkPtr++]; // Previous local registers
 16229              		.loc 1 2102 31 is_stmt 1 view -0
 16230              		.cfi_startproc
 16231              		@ args = 0, pretend = 0, frame = 0
 16232              		@ frame_needed = 0, uses_anonymous_args = 0
 16233              		@ link register save eliminated.
2103:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16234              		.loc 1 2103 2 view .LVU4230
2103:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16235              		.loc 1 2103 25 is_stmt 0 view .LVU4231
 16236 0000 124A     		ldr	r2, .L1154
2103:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16237              		.loc 1 2103 24 view .LVU4232
 16238 0002 134B     		ldr	r3, .L1154+4
2102:src/xeq.c     **** 	UserLocalRegs = RetStk[RetStkPtr++]; // Previous local registers
 16239              		.loc 1 2102 31 view .LVU4233
 16240 0004 70B4     		push	{r4, r5, r6}
 16241              		.cfi_def_cfa_offset 12
 16242              		.cfi_offset 4, -12
 16243              		.cfi_offset 5, -8
 16244              		.cfi_offset 6, -4
2103:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16245              		.loc 1 2103 25 view .LVU4234
 16246 0006 B2F9E257 		ldrsh	r5, [r2, #2018]
2103:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16247              		.loc 1 2103 24 view .LVU4235
 16248 000a 1B68     		ldr	r3, [r3]
2105:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 16249              		.loc 1 2105 13 view .LVU4236
 16250 000c 114E     		ldr	r6, .L1154+8
2103:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16251              		.loc 1 2103 34 view .LVU4237
 16252 000e A9B2     		uxth	r1, r5
 16253 0010 4C1C     		adds	r4, r1, #1
 16254 0012 24B2     		sxth	r4, r4
2104:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 16255              		.loc 1 2104 34 view .LVU4238
 16256 0014 881C     		adds	r0, r1, #2
ARM GAS  /tmp/ccK8IvWa.s 			page 451


 16257              	.LVL1202:
2103:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16258              		.loc 1 2103 34 view .LVU4239
 16259 0016 A2F8E247 		strh	r4, [r2, #2018]	@ movhi
2104:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 16260              		.loc 1 2104 34 view .LVU4240
 16261 001a 00B2     		sxth	r0, r0
2103:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16262              		.loc 1 2103 24 view .LVU4241
 16263 001c 33F81550 		ldrh	r5, [r3, r5, lsl #1]
2104:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 16264              		.loc 1 2104 34 view .LVU4242
 16265 0020 A2F8E207 		strh	r0, [r2, #2018]	@ movhi
2104:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 16266              		.loc 1 2104 24 view .LVU4243
 16267 0024 33F91440 		ldrsh	r4, [r3, r4, lsl #1]
2104:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 16268              		.loc 1 2104 12 view .LVU4244
 16269 0028 A2F8DE47 		strh	r4, [r2, #2014]	@ movhi
2105:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 16270              		.loc 1 2105 34 view .LVU4245
 16271 002c 0331     		adds	r1, r1, #3
 16272 002e A2F8E217 		strh	r1, [r2, #2018]	@ movhi
2106:src/xeq.c     **** }
 16273              		.loc 1 2106 20 view .LVU4246
 16274 0032 33F81420 		ldrh	r2, [r3, r4, lsl #1]
2103:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16275              		.loc 1 2103 16 view .LVU4247
 16276 0036 0849     		ldr	r1, .L1154+12
2105:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 16277              		.loc 1 2105 24 view .LVU4248
 16278 0038 33F81000 		ldrh	r0, [r3, r0, lsl #1]
 16279 003c 3060     		str	r0, [r6]
2106:src/xeq.c     **** }
 16280              		.loc 1 2106 20 view .LVU4249
 16281 003e 22F40052 		bic	r2, r2, #8192
2103:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16282              		.loc 1 2103 24 view .LVU4250
 16283 0042 0D60     		str	r5, [r1]
2104:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 16284              		.loc 1 2104 2 is_stmt 1 view .LVU4251
2105:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 16285              		.loc 1 2105 2 view .LVU4252
2106:src/xeq.c     **** }
 16286              		.loc 1 2106 2 view .LVU4253
2106:src/xeq.c     **** }
 16287              		.loc 1 2106 20 is_stmt 0 view .LVU4254
 16288 0044 23F81420 		strh	r2, [r3, r4, lsl #1]	@ movhi
2107:src/xeq.c     **** 
 16289              		.loc 1 2107 1 view .LVU4255
 16290 0048 70BC     		pop	{r4, r5, r6}
 16291              		.cfi_restore 6
 16292              		.cfi_restore 5
 16293              		.cfi_restore 4
 16294              		.cfi_def_cfa_offset 0
 16295 004a 7047     		bx	lr
 16296              	.L1155:
ARM GAS  /tmp/ccK8IvWa.s 			page 452


 16297              		.align	2
 16298              	.L1154:
 16299 004c 00000000 		.word	PersistentRam
 16300 0050 00000000 		.word	RetStk
 16301 0054 00000000 		.word	XromUserPc
 16302 0058 00000000 		.word	UserLocalRegs
 16303              		.cfi_endproc
 16304              	.LFE154:
 16306              		.section	.text.findmultilbl,"ax",%progbits
 16307              		.align	1
 16308              		.p2align 2,,3
 16309              		.global	findmultilbl
 16310              		.syntax unified
 16311              		.thumb
 16312              		.thumb_func
 16313              		.fpu fpv4-sp-d16
 16315              	findmultilbl:
 16316              	.LVL1203:
 16317              	.LFB158:
2135:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 16318              		.loc 1 2135 54 is_stmt 1 view -0
 16319              		.cfi_startproc
 16320              		@ args = 0, pretend = 0, frame = 0
 16321              		@ frame_needed = 0, uses_anonymous_args = 0
2136:src/xeq.c     **** 	unsigned int lbl;
 16322              		.loc 1 2136 2 view .LVU4257
2135:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 16323              		.loc 1 2135 54 is_stmt 0 view .LVU4258
 16324 0000 38B5     		push	{r3, r4, r5, lr}
 16325              		.cfi_def_cfa_offset 16
 16326              		.cfi_offset 3, -16
 16327              		.cfi_offset 4, -12
 16328              		.cfi_offset 5, -8
 16329              		.cfi_offset 14, -4
2139:src/xeq.c     **** 	if (lbl == 0)
 16330              		.loc 1 2139 8 view .LVU4259
 16331 0002 0022     		movs	r2, #0
2136:src/xeq.c     **** 	unsigned int lbl;
 16332              		.loc 1 2136 15 view .LVU4260
 16333 0004 20F47064 		bic	r4, r0, #3840
 16334              	.LVL1204:
2137:src/xeq.c     **** 
 16335              		.loc 1 2137 2 is_stmt 1 view .LVU4261
2139:src/xeq.c     **** 	if (lbl == 0)
 16336              		.loc 1 2139 2 view .LVU4262
2135:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 16337              		.loc 1 2135 54 is_stmt 0 view .LVU4263
 16338 0008 0D46     		mov	r5, r1
2139:src/xeq.c     **** 	if (lbl == 0)
 16339              		.loc 1 2139 8 view .LVU4264
 16340 000a 1046     		mov	r0, r2
 16341              	.LVL1205:
2139:src/xeq.c     **** 	if (lbl == 0)
 16342              		.loc 1 2139 8 view .LVU4265
 16343 000c 2146     		mov	r1, r4
 16344              	.LVL1206:
2139:src/xeq.c     **** 	if (lbl == 0)
ARM GAS  /tmp/ccK8IvWa.s 			page 453


 16345              		.loc 1 2139 8 view .LVU4266
 16346 000e FFF7FEFF 		bl	find_opcode_from
 16347              	.LVL1207:
2140:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_LIBRARY), dest, 0);	// Library
 16348              		.loc 1 2140 2 is_stmt 1 view .LVU4267
2140:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_LIBRARY), dest, 0);	// Library
 16349              		.loc 1 2140 5 is_stmt 0 view .LVU4268
 16350 0012 00B1     		cbz	r0, .L1162
 16351              	.L1156:
2147:src/xeq.c     **** 
 16352              		.loc 1 2147 1 view .LVU4269
 16353 0014 38BD     		pop	{r3, r4, r5, pc}
 16354              	.LVL1208:
 16355              	.L1162:
2141:src/xeq.c     **** 	if (lbl == 0)
 16356              		.loc 1 2141 3 is_stmt 1 view .LVU4270
2141:src/xeq.c     **** 	if (lbl == 0)
 16357              		.loc 1 2141 9 is_stmt 0 view .LVU4271
 16358 0016 0246     		mov	r2, r0
 16359 0018 2146     		mov	r1, r4
 16360 001a 4FF48040 		mov	r0, #16384
 16361              	.LVL1209:
2141:src/xeq.c     **** 	if (lbl == 0)
 16362              		.loc 1 2141 9 view .LVU4272
 16363 001e FFF7FEFF 		bl	find_opcode_from
 16364              	.LVL1210:
2142:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_BACKUP), dest, 0);	// Backup
 16365              		.loc 1 2142 2 is_stmt 1 view .LVU4273
2142:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_BACKUP), dest, 0);	// Backup
 16366              		.loc 1 2142 5 is_stmt 0 view .LVU4274
 16367 0022 0028     		cmp	r0, #0
 16368 0024 F6D1     		bne	.L1156
2143:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
 16369              		.loc 1 2143 3 is_stmt 1 view .LVU4275
2143:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
 16370              		.loc 1 2143 9 is_stmt 0 view .LVU4276
 16371 0026 0246     		mov	r2, r0
 16372 0028 2146     		mov	r1, r4
 16373 002a 4FF40040 		mov	r0, #32768
 16374              	.LVL1211:
2143:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
 16375              		.loc 1 2143 9 view .LVU4277
 16376 002e FFF7FEFF 		bl	find_opcode_from
 16377              	.LVL1212:
2144:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 16378              		.loc 1 2144 2 is_stmt 1 view .LVU4278
2144:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 16379              		.loc 1 2144 5 is_stmt 0 view .LVU4279
 16380 0032 0028     		cmp	r0, #0
 16381 0034 EED1     		bne	.L1156
2144:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 16382              		.loc 1 2144 15 discriminator 1 view .LVU4280
 16383 0036 EB07     		lsls	r3, r5, #31
 16384 0038 ECD5     		bpl	.L1156
 16385              	.LBB2878:
 16386              	.LBI2878:
2135:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
ARM GAS  /tmp/ccK8IvWa.s 			page 454


 16387              		.loc 1 2135 14 is_stmt 1 view .LVU4281
 16388              	.LVL1213:
 16389              	.LBB2879:
2145:src/xeq.c     **** 	return lbl;
 16390              		.loc 1 2145 3 view .LVU4282
 16391              	.LBB2880:
 16392              	.LBI2880:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 16393              		.loc 1 523 5 view .LVU4283
 16394              	.LBB2881:
 524:src/xeq.c     **** 		Error = e;
 16395              		.loc 1 524 2 view .LVU4284
 524:src/xeq.c     **** 		Error = e;
 16396              		.loc 1 524 12 is_stmt 0 view .LVU4285
 16397 003a 034B     		ldr	r3, .L1163
 524:src/xeq.c     **** 		Error = e;
 16398              		.loc 1 524 5 view .LVU4286
 16399 003c 1A68     		ldr	r2, [r3]
 16400 003e 002A     		cmp	r2, #0
 16401 0040 E8D1     		bne	.L1156
 16402              	.LVL1214:
 16403              	.LBB2882:
 16404              	.LBI2882:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 16405              		.loc 1 523 5 is_stmt 1 view .LVU4287
 16406              	.LBB2883:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 16407              		.loc 1 525 3 view .LVU4288
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 16408              		.loc 1 525 9 is_stmt 0 view .LVU4289
 16409 0042 0622     		movs	r2, #6
 16410 0044 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 16411              		.loc 1 526 3 is_stmt 1 view .LVU4290
 16412              	.LVL1215:
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 16413              		.loc 1 526 3 is_stmt 0 view .LVU4291
 16414              	.LBE2883:
 16415              	.LBE2882:
 16416              	.LBE2881:
 16417              	.LBE2880:
 16418              	.LBE2879:
 16419              	.LBE2878:
2146:src/xeq.c     **** }
 16420              		.loc 1 2146 2 is_stmt 1 view .LVU4292
2147:src/xeq.c     **** 
 16421              		.loc 1 2147 1 is_stmt 0 view .LVU4293
 16422 0046 38BD     		pop	{r3, r4, r5, pc}
 16423              	.LVL1216:
 16424              	.L1164:
2147:src/xeq.c     **** 
 16425              		.loc 1 2147 1 view .LVU4294
 16426              		.align	2
 16427              	.L1163:
 16428 0048 00000000 		.word	Error
 16429              		.cfi_endproc
 16430              	.LFE158:
ARM GAS  /tmp/ccK8IvWa.s 			page 455


 16432              		.section	.text.convC2F,"ax",%progbits
 16433              		.align	1
 16434              		.p2align 2,,3
 16435              		.global	convC2F
 16436              		.syntax unified
 16437              		.thumb
 16438              		.thumb_func
 16439              		.fpu fpv4-sp-d16
 16441              	convC2F:
 16442              	.LVL1217:
 16443              	.LFB166:
2252:src/xeq.c     **** 	decNumber s;
 16444              		.loc 1 2252 54 is_stmt 1 view -0
 16445              		.cfi_startproc
 16446              		@ args = 0, pretend = 0, frame = 40
 16447              		@ frame_needed = 0, uses_anonymous_args = 0
2253:src/xeq.c     **** 
 16448              		.loc 1 2253 2 view .LVU4296
2255:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
 16449              		.loc 1 2255 2 view .LVU4297
2252:src/xeq.c     **** 	decNumber s;
 16450              		.loc 1 2252 54 is_stmt 0 view .LVU4298
 16451 0000 10B5     		push	{r4, lr}
 16452              		.cfi_def_cfa_offset 8
 16453              		.cfi_offset 4, -8
 16454              		.cfi_offset 14, -4
 16455 0002 8AB0     		sub	sp, sp, #40
 16456              		.cfi_def_cfa_offset 48
2252:src/xeq.c     **** 	decNumber s;
 16457              		.loc 1 2252 54 view .LVU4299
 16458 0004 0446     		mov	r4, r0
2255:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
 16459              		.loc 1 2255 2 view .LVU4300
 16460 0006 054A     		ldr	r2, .L1167
 16461 0008 01A8     		add	r0, sp, #4
 16462              	.LVL1218:
2255:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
 16463              		.loc 1 2255 2 view .LVU4301
 16464 000a FFF7FEFF 		bl	dn_multiply
 16465              	.LVL1219:
2256:src/xeq.c     **** }
 16466              		.loc 1 2256 2 is_stmt 1 view .LVU4302
2256:src/xeq.c     **** }
 16467              		.loc 1 2256 9 is_stmt 0 view .LVU4303
 16468 000e 044A     		ldr	r2, .L1167+4
 16469 0010 2046     		mov	r0, r4
 16470 0012 01A9     		add	r1, sp, #4
 16471 0014 FFF7FEFF 		bl	dn_add
 16472              	.LVL1220:
2257:src/xeq.c     **** 
 16473              		.loc 1 2257 1 view .LVU4304
 16474 0018 0AB0     		add	sp, sp, #40
 16475              		.cfi_def_cfa_offset 8
 16476              		@ sp needed
 16477 001a 10BD     		pop	{r4, pc}
 16478              	.LVL1221:
 16479              	.L1168:
ARM GAS  /tmp/ccK8IvWa.s 			page 456


2257:src/xeq.c     **** 
 16480              		.loc 1 2257 1 view .LVU4305
 16481              		.align	2
 16482              	.L1167:
 16483 001c 00000000 		.word	const_9on5
 16484 0020 00000000 		.word	const_32
 16485              		.cfi_endproc
 16486              	.LFE166:
 16488              		.section	.text.convF2C,"ax",%progbits
 16489              		.align	1
 16490              		.p2align 2,,3
 16491              		.global	convF2C
 16492              		.syntax unified
 16493              		.thumb
 16494              		.thumb_func
 16495              		.fpu fpv4-sp-d16
 16497              	convF2C:
 16498              	.LVL1222:
 16499              	.LFB167:
2259:src/xeq.c     **** 	decNumber s;
 16500              		.loc 1 2259 54 is_stmt 1 view -0
 16501              		.cfi_startproc
 16502              		@ args = 0, pretend = 0, frame = 40
 16503              		@ frame_needed = 0, uses_anonymous_args = 0
2260:src/xeq.c     **** 
 16504              		.loc 1 2260 2 view .LVU4307
2262:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
 16505              		.loc 1 2262 2 view .LVU4308
2259:src/xeq.c     **** 	decNumber s;
 16506              		.loc 1 2259 54 is_stmt 0 view .LVU4309
 16507 0000 10B5     		push	{r4, lr}
 16508              		.cfi_def_cfa_offset 8
 16509              		.cfi_offset 4, -8
 16510              		.cfi_offset 14, -4
 16511 0002 8AB0     		sub	sp, sp, #40
 16512              		.cfi_def_cfa_offset 48
2259:src/xeq.c     **** 	decNumber s;
 16513              		.loc 1 2259 54 view .LVU4310
 16514 0004 0446     		mov	r4, r0
2262:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
 16515              		.loc 1 2262 2 view .LVU4311
 16516 0006 054A     		ldr	r2, .L1171
 16517 0008 01A8     		add	r0, sp, #4
 16518              	.LVL1223:
2262:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
 16519              		.loc 1 2262 2 view .LVU4312
 16520 000a FFF7FEFF 		bl	dn_subtract
 16521              	.LVL1224:
2263:src/xeq.c     **** }
 16522              		.loc 1 2263 2 is_stmt 1 view .LVU4313
2263:src/xeq.c     **** }
 16523              		.loc 1 2263 9 is_stmt 0 view .LVU4314
 16524 000e 044A     		ldr	r2, .L1171+4
 16525 0010 2046     		mov	r0, r4
 16526 0012 01A9     		add	r1, sp, #4
 16527 0014 FFF7FEFF 		bl	dn_divide
 16528              	.LVL1225:
ARM GAS  /tmp/ccK8IvWa.s 			page 457


2264:src/xeq.c     **** 
 16529              		.loc 1 2264 1 view .LVU4315
 16530 0018 0AB0     		add	sp, sp, #40
 16531              		.cfi_def_cfa_offset 8
 16532              		@ sp needed
 16533 001a 10BD     		pop	{r4, pc}
 16534              	.LVL1226:
 16535              	.L1172:
2264:src/xeq.c     **** 
 16536              		.loc 1 2264 1 view .LVU4316
 16537              		.align	2
 16538              	.L1171:
 16539 001c 00000000 		.word	const_32
 16540 0020 00000000 		.word	const_9on5
 16541              		.cfi_endproc
 16542              	.LFE167:
 16544              		.section	.text.convDB2AR,"ax",%progbits
 16545              		.align	1
 16546              		.p2align 2,,3
 16547              		.global	convDB2AR
 16548              		.syntax unified
 16549              		.thumb
 16550              		.thumb_func
 16551              		.fpu fpv4-sp-d16
 16553              	convDB2AR:
 16554              	.LVL1227:
 16555              	.LFB168:
2266:src/xeq.c     **** 	decNumber t;
 16556              		.loc 1 2266 56 is_stmt 1 view -0
 16557              		.cfi_startproc
 16558              		@ args = 0, pretend = 0, frame = 40
 16559              		@ frame_needed = 0, uses_anonymous_args = 0
2267:src/xeq.c     **** 	dn_multiply(&t, x, &const_0_05);
 16560              		.loc 1 2267 2 view .LVU4318
2268:src/xeq.c     **** 	return decNumberPow10(r, &t);
 16561              		.loc 1 2268 2 view .LVU4319
2266:src/xeq.c     **** 	decNumber t;
 16562              		.loc 1 2266 56 is_stmt 0 view .LVU4320
 16563 0000 10B5     		push	{r4, lr}
 16564              		.cfi_def_cfa_offset 8
 16565              		.cfi_offset 4, -8
 16566              		.cfi_offset 14, -4
 16567 0002 8AB0     		sub	sp, sp, #40
 16568              		.cfi_def_cfa_offset 48
2268:src/xeq.c     **** 	return decNumberPow10(r, &t);
 16569              		.loc 1 2268 2 view .LVU4321
 16570 0004 054A     		ldr	r2, .L1175
2266:src/xeq.c     **** 	decNumber t;
 16571              		.loc 1 2266 56 view .LVU4322
 16572 0006 0446     		mov	r4, r0
2268:src/xeq.c     **** 	return decNumberPow10(r, &t);
 16573              		.loc 1 2268 2 view .LVU4323
 16574 0008 01A8     		add	r0, sp, #4
 16575              	.LVL1228:
2268:src/xeq.c     **** 	return decNumberPow10(r, &t);
 16576              		.loc 1 2268 2 view .LVU4324
 16577 000a FFF7FEFF 		bl	dn_multiply
ARM GAS  /tmp/ccK8IvWa.s 			page 458


 16578              	.LVL1229:
2269:src/xeq.c     **** }
 16579              		.loc 1 2269 2 is_stmt 1 view .LVU4325
2269:src/xeq.c     **** }
 16580              		.loc 1 2269 9 is_stmt 0 view .LVU4326
 16581 000e 01A9     		add	r1, sp, #4
 16582 0010 2046     		mov	r0, r4
 16583 0012 FFF7FEFF 		bl	decNumberPow10
 16584              	.LVL1230:
2270:src/xeq.c     **** 
 16585              		.loc 1 2270 1 view .LVU4327
 16586 0016 0AB0     		add	sp, sp, #40
 16587              		.cfi_def_cfa_offset 8
 16588              		@ sp needed
 16589 0018 10BD     		pop	{r4, pc}
 16590              	.LVL1231:
 16591              	.L1176:
2270:src/xeq.c     **** 
 16592              		.loc 1 2270 1 view .LVU4328
 16593 001a 00BF     		.align	2
 16594              	.L1175:
 16595 001c 00000000 		.word	const_0_05
 16596              		.cfi_endproc
 16597              	.LFE168:
 16599              		.section	.text.convAR2DB,"ax",%progbits
 16600              		.align	1
 16601              		.p2align 2,,3
 16602              		.global	convAR2DB
 16603              		.syntax unified
 16604              		.thumb
 16605              		.thumb_func
 16606              		.fpu fpv4-sp-d16
 16608              	convAR2DB:
 16609              	.LVL1232:
 16610              	.LFB169:
2272:src/xeq.c     **** 	decNumber t;
 16611              		.loc 1 2272 56 is_stmt 1 view -0
 16612              		.cfi_startproc
 16613              		@ args = 0, pretend = 0, frame = 40
 16614              		@ frame_needed = 0, uses_anonymous_args = 0
2273:src/xeq.c     **** 	dn_log10(&t, x);
 16615              		.loc 1 2273 2 view .LVU4330
2274:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
 16616              		.loc 1 2274 2 view .LVU4331
2272:src/xeq.c     **** 	decNumber t;
 16617              		.loc 1 2272 56 is_stmt 0 view .LVU4332
 16618 0000 10B5     		push	{r4, lr}
 16619              		.cfi_def_cfa_offset 8
 16620              		.cfi_offset 4, -8
 16621              		.cfi_offset 14, -4
 16622 0002 8AB0     		sub	sp, sp, #40
 16623              		.cfi_def_cfa_offset 48
2272:src/xeq.c     **** 	decNumber t;
 16624              		.loc 1 2272 56 view .LVU4333
 16625 0004 0446     		mov	r4, r0
2274:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
 16626              		.loc 1 2274 2 view .LVU4334
ARM GAS  /tmp/ccK8IvWa.s 			page 459


 16627 0006 01A8     		add	r0, sp, #4
 16628              	.LVL1233:
2274:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
 16629              		.loc 1 2274 2 view .LVU4335
 16630 0008 FFF7FEFF 		bl	dn_log10
 16631              	.LVL1234:
2275:src/xeq.c     **** }
 16632              		.loc 1 2275 2 is_stmt 1 view .LVU4336
2275:src/xeq.c     **** }
 16633              		.loc 1 2275 9 is_stmt 0 view .LVU4337
 16634 000c 034A     		ldr	r2, .L1179
 16635 000e 2046     		mov	r0, r4
 16636 0010 01A9     		add	r1, sp, #4
 16637 0012 FFF7FEFF 		bl	dn_multiply
 16638              	.LVL1235:
2276:src/xeq.c     **** 
 16639              		.loc 1 2276 1 view .LVU4338
 16640 0016 0AB0     		add	sp, sp, #40
 16641              		.cfi_def_cfa_offset 8
 16642              		@ sp needed
 16643 0018 10BD     		pop	{r4, pc}
 16644              	.LVL1236:
 16645              	.L1180:
2276:src/xeq.c     **** 
 16646              		.loc 1 2276 1 view .LVU4339
 16647 001a 00BF     		.align	2
 16648              	.L1179:
 16649 001c 00000000 		.word	const_20
 16650              		.cfi_endproc
 16651              	.LFE169:
 16653              		.section	.text.convDB2PR,"ax",%progbits
 16654              		.align	1
 16655              		.p2align 2,,3
 16656              		.global	convDB2PR
 16657              		.syntax unified
 16658              		.thumb
 16659              		.thumb_func
 16660              		.fpu fpv4-sp-d16
 16662              	convDB2PR:
 16663              	.LVL1237:
 16664              	.LFB170:
2278:src/xeq.c     **** 	decNumber t;
 16665              		.loc 1 2278 56 is_stmt 1 view -0
 16666              		.cfi_startproc
 16667              		@ args = 0, pretend = 0, frame = 40
 16668              		@ frame_needed = 0, uses_anonymous_args = 0
2279:src/xeq.c     **** 	dn_mulpow10(&t, x, -1);
 16669              		.loc 1 2279 2 view .LVU4341
2280:src/xeq.c     **** 	return decNumberPow10(r, &t);
 16670              		.loc 1 2280 2 view .LVU4342
2278:src/xeq.c     **** 	decNumber t;
 16671              		.loc 1 2278 56 is_stmt 0 view .LVU4343
 16672 0000 10B5     		push	{r4, lr}
 16673              		.cfi_def_cfa_offset 8
 16674              		.cfi_offset 4, -8
 16675              		.cfi_offset 14, -4
 16676 0002 8AB0     		sub	sp, sp, #40
ARM GAS  /tmp/ccK8IvWa.s 			page 460


 16677              		.cfi_def_cfa_offset 48
2278:src/xeq.c     **** 	decNumber t;
 16678              		.loc 1 2278 56 view .LVU4344
 16679 0004 0446     		mov	r4, r0
2280:src/xeq.c     **** 	return decNumberPow10(r, &t);
 16680              		.loc 1 2280 2 view .LVU4345
 16681 0006 4FF0FF32 		mov	r2, #-1
 16682 000a 01A8     		add	r0, sp, #4
 16683              	.LVL1238:
2280:src/xeq.c     **** 	return decNumberPow10(r, &t);
 16684              		.loc 1 2280 2 view .LVU4346
 16685 000c FFF7FEFF 		bl	dn_mulpow10
 16686              	.LVL1239:
2281:src/xeq.c     **** }
 16687              		.loc 1 2281 2 is_stmt 1 view .LVU4347
2281:src/xeq.c     **** }
 16688              		.loc 1 2281 9 is_stmt 0 view .LVU4348
 16689 0010 01A9     		add	r1, sp, #4
 16690 0012 2046     		mov	r0, r4
 16691 0014 FFF7FEFF 		bl	decNumberPow10
 16692              	.LVL1240:
2282:src/xeq.c     **** 
 16693              		.loc 1 2282 1 view .LVU4349
 16694 0018 0AB0     		add	sp, sp, #40
 16695              		.cfi_def_cfa_offset 8
 16696              		@ sp needed
 16697 001a 10BD     		pop	{r4, pc}
2282:src/xeq.c     **** 
 16698              		.loc 1 2282 1 view .LVU4350
 16699              		.cfi_endproc
 16700              	.LFE170:
 16702              		.section	.text.convPR2DB,"ax",%progbits
 16703              		.align	1
 16704              		.p2align 2,,3
 16705              		.global	convPR2DB
 16706              		.syntax unified
 16707              		.thumb
 16708              		.thumb_func
 16709              		.fpu fpv4-sp-d16
 16711              	convPR2DB:
 16712              	.LVL1241:
 16713              	.LFB171:
2284:src/xeq.c     **** 	decNumber t;
 16714              		.loc 1 2284 56 is_stmt 1 view -0
 16715              		.cfi_startproc
 16716              		@ args = 0, pretend = 0, frame = 40
 16717              		@ frame_needed = 0, uses_anonymous_args = 0
2285:src/xeq.c     **** 	dn_log10(&t, x);
 16718              		.loc 1 2285 2 view .LVU4352
2286:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
 16719              		.loc 1 2286 2 view .LVU4353
2284:src/xeq.c     **** 	decNumber t;
 16720              		.loc 1 2284 56 is_stmt 0 view .LVU4354
 16721 0000 10B5     		push	{r4, lr}
 16722              		.cfi_def_cfa_offset 8
 16723              		.cfi_offset 4, -8
 16724              		.cfi_offset 14, -4
ARM GAS  /tmp/ccK8IvWa.s 			page 461


 16725 0002 8AB0     		sub	sp, sp, #40
 16726              		.cfi_def_cfa_offset 48
2284:src/xeq.c     **** 	decNumber t;
 16727              		.loc 1 2284 56 view .LVU4355
 16728 0004 0446     		mov	r4, r0
2286:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
 16729              		.loc 1 2286 2 view .LVU4356
 16730 0006 01A8     		add	r0, sp, #4
 16731              	.LVL1242:
2286:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
 16732              		.loc 1 2286 2 view .LVU4357
 16733 0008 FFF7FEFF 		bl	dn_log10
 16734              	.LVL1243:
2287:src/xeq.c     **** }
 16735              		.loc 1 2287 2 is_stmt 1 view .LVU4358
2287:src/xeq.c     **** }
 16736              		.loc 1 2287 9 is_stmt 0 view .LVU4359
 16737 000c 2046     		mov	r0, r4
 16738 000e 01A9     		add	r1, sp, #4
 16739 0010 0122     		movs	r2, #1
 16740 0012 FFF7FEFF 		bl	dn_mulpow10
 16741              	.LVL1244:
2288:src/xeq.c     **** 
 16742              		.loc 1 2288 1 view .LVU4360
 16743 0016 0AB0     		add	sp, sp, #40
 16744              		.cfi_def_cfa_offset 8
 16745              		@ sp needed
 16746 0018 10BD     		pop	{r4, pc}
2288:src/xeq.c     **** 
 16747              		.loc 1 2288 1 view .LVU4361
 16748              		.cfi_endproc
 16749              	.LFE171:
 16751 001a 00BF     		.section	.text.do_conv,"ax",%progbits
 16752              		.align	1
 16753              		.p2align 2,,3
 16754              		.global	do_conv
 16755              		.syntax unified
 16756              		.thumb
 16757              		.thumb_func
 16758              		.fpu fpv4-sp-d16
 16760              	do_conv:
 16761              	.LVL1245:
 16762              	.LFB172:
2291:src/xeq.c     **** 	decNumber m;
 16763              		.loc 1 2291 66 is_stmt 1 view -0
 16764              		.cfi_startproc
 16765              		@ args = 0, pretend = 0, frame = 40
 16766              		@ frame_needed = 0, uses_anonymous_args = 0
2292:src/xeq.c     **** 	const unsigned int conv = arg / 2;
 16767              		.loc 1 2292 2 view .LVU4363
2293:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
 16768              		.loc 1 2293 2 view .LVU4364
2294:src/xeq.c     **** 
 16769              		.loc 1 2294 2 view .LVU4365
2296:src/xeq.c     **** 		decNumberCopy(r, x);
 16770              		.loc 1 2296 2 view .LVU4366
2291:src/xeq.c     **** 	decNumber m;
ARM GAS  /tmp/ccK8IvWa.s 			page 462


 16771              		.loc 1 2291 66 is_stmt 0 view .LVU4367
 16772 0000 70B5     		push	{r4, r5, r6, lr}
 16773              		.cfi_def_cfa_offset 16
 16774              		.cfi_offset 4, -16
 16775              		.cfi_offset 5, -12
 16776              		.cfi_offset 6, -8
 16777              		.cfi_offset 14, -4
2296:src/xeq.c     **** 		decNumberCopy(r, x);
 16778              		.loc 1 2296 5 view .LVU4368
 16779 0002 4D29     		cmp	r1, #77
2291:src/xeq.c     **** 	decNumber m;
 16780              		.loc 1 2291 66 view .LVU4369
 16781 0004 8AB0     		sub	sp, sp, #40
 16782              		.cfi_def_cfa_offset 56
2291:src/xeq.c     **** 	decNumber m;
 16783              		.loc 1 2291 66 view .LVU4370
 16784 0006 1546     		mov	r5, r2
2296:src/xeq.c     **** 		decNumberCopy(r, x);
 16785              		.loc 1 2296 5 view .LVU4371
 16786 0008 15D8     		bhi	.L1191
2301:src/xeq.c     **** 
 16787              		.loc 1 2301 2 is_stmt 1 view .LVU4372
 16788 000a 0D4B     		ldr	r3, .L1193
 16789 000c 0646     		mov	r6, r0
2293:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
 16790              		.loc 1 2293 21 is_stmt 0 view .LVU4373
 16791 000e 4808     		lsrs	r0, r1, #1
 16792              	.LVL1246:
2293:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
 16793              		.loc 1 2293 21 view .LVU4374
 16794 0010 0C46     		mov	r4, r1
2301:src/xeq.c     **** 
 16795              		.loc 1 2301 2 view .LVU4375
 16796 0012 03EB0010 		add	r0, r3, r0, lsl #4
 16797 0016 01A9     		add	r1, sp, #4
 16798              	.LVL1247:
2301:src/xeq.c     **** 
 16799              		.loc 1 2301 2 view .LVU4376
 16800 0018 FFF7FEFF 		bl	decimal64ToNumber
 16801              	.LVL1248:
2303:src/xeq.c     **** 		dn_divide(r, x, &m);
 16802              		.loc 1 2303 2 is_stmt 1 view .LVU4377
2303:src/xeq.c     **** 		dn_divide(r, x, &m);
 16803              		.loc 1 2303 5 is_stmt 0 view .LVU4378
 16804 001c E307     		lsls	r3, r4, #31
2304:src/xeq.c     **** 	else			// imperial to metric
 16805              		.loc 1 2304 3 view .LVU4379
 16806 001e 01AA     		add	r2, sp, #4
 16807 0020 2946     		mov	r1, r5
 16808 0022 3046     		mov	r0, r6
2303:src/xeq.c     **** 		dn_divide(r, x, &m);
 16809              		.loc 1 2303 5 view .LVU4380
 16810 0024 03D5     		bpl	.L1192
2306:src/xeq.c     **** }
 16811              		.loc 1 2306 3 is_stmt 1 view .LVU4381
 16812 0026 FFF7FEFF 		bl	dn_multiply
 16813              	.LVL1249:
ARM GAS  /tmp/ccK8IvWa.s 			page 463


2307:src/xeq.c     **** 
 16814              		.loc 1 2307 1 is_stmt 0 view .LVU4382
 16815 002a 0AB0     		add	sp, sp, #40
 16816              		.cfi_remember_state
 16817              		.cfi_def_cfa_offset 16
 16818              		@ sp needed
 16819 002c 70BD     		pop	{r4, r5, r6, pc}
 16820              	.LVL1250:
 16821              	.L1192:
 16822              		.cfi_restore_state
2304:src/xeq.c     **** 	else			// imperial to metric
 16823              		.loc 1 2304 3 is_stmt 1 view .LVU4383
 16824 002e FFF7FEFF 		bl	dn_divide
 16825              	.LVL1251:
2307:src/xeq.c     **** 
 16826              		.loc 1 2307 1 is_stmt 0 view .LVU4384
 16827 0032 0AB0     		add	sp, sp, #40
 16828              		.cfi_remember_state
 16829              		.cfi_def_cfa_offset 16
 16830              		@ sp needed
 16831 0034 70BD     		pop	{r4, r5, r6, pc}
 16832              	.LVL1252:
 16833              	.L1191:
 16834              		.cfi_restore_state
2297:src/xeq.c     **** 		return;
 16835              		.loc 1 2297 3 is_stmt 1 view .LVU4385
 16836 0036 1146     		mov	r1, r2
 16837              	.LVL1253:
2297:src/xeq.c     **** 		return;
 16838              		.loc 1 2297 3 is_stmt 0 view .LVU4386
 16839 0038 FFF7FEFF 		bl	decNumberCopy
 16840              	.LVL1254:
2298:src/xeq.c     **** 	}
 16841              		.loc 1 2298 3 is_stmt 1 view .LVU4387
2307:src/xeq.c     **** 
 16842              		.loc 1 2307 1 is_stmt 0 view .LVU4388
 16843 003c 0AB0     		add	sp, sp, #40
 16844              		.cfi_def_cfa_offset 16
 16845              		@ sp needed
 16846 003e 70BD     		pop	{r4, r5, r6, pc}
 16847              	.LVL1255:
 16848              	.L1194:
2307:src/xeq.c     **** 
 16849              		.loc 1 2307 1 view .LVU4389
 16850              		.align	2
 16851              	.L1193:
 16852 0040 00000000 		.word	cnsts_conv
 16853              		.cfi_endproc
 16854              	.LFE172:
 16856              		.section	.text.cmdconv,"ax",%progbits
 16857              		.align	1
 16858              		.p2align 2,,3
 16859              		.global	cmdconv
 16860              		.syntax unified
 16861              		.thumb
 16862              		.thumb_func
 16863              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccK8IvWa.s 			page 464


 16865              	cmdconv:
 16866              	.LVL1256:
 16867              	.LFB173:
2309:src/xeq.c     **** 	decNumber x, r;
 16868              		.loc 1 2309 46 is_stmt 1 view -0
 16869              		.cfi_startproc
 16870              		@ args = 0, pretend = 0, frame = 72
 16871              		@ frame_needed = 0, uses_anonymous_args = 0
2310:src/xeq.c     **** 
 16872              		.loc 1 2310 2 view .LVU4391
2312:src/xeq.c     **** 		return;
 16873              		.loc 1 2312 2 view .LVU4392
2312:src/xeq.c     **** 		return;
 16874              		.loc 1 2312 6 is_stmt 0 view .LVU4393
 16875 0000 0D4B     		ldr	r3, .L1203
 16876 0002 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
2312:src/xeq.c     **** 		return;
 16877              		.loc 1 2312 5 view .LVU4394
 16878 0006 DB07     		lsls	r3, r3, #31
 16879 0008 00D5     		bpl	.L1202
 16880 000a 7047     		bx	lr
 16881              	.L1202:
2309:src/xeq.c     **** 	decNumber x, r;
 16882              		.loc 1 2309 46 view .LVU4395
 16883 000c 10B5     		push	{r4, lr}
 16884              		.cfi_def_cfa_offset 8
 16885              		.cfi_offset 4, -8
 16886              		.cfi_offset 14, -4
 16887 000e 92B0     		sub	sp, sp, #72
 16888              		.cfi_def_cfa_offset 80
 16889 0010 0446     		mov	r4, r0
2315:src/xeq.c     **** 	do_conv(&r, arg, &x);
 16890              		.loc 1 2315 2 is_stmt 1 view .LVU4396
 16891              	.LVL1257:
 16892              	.LBB2884:
 16893              	.LBI2884:
 791:src/xeq.c     **** 	return getRegister(x, regX_idx);
 16894              		.loc 1 791 12 view .LVU4397
 16895              	.LBB2885:
 792:src/xeq.c     **** }
 16896              		.loc 1 792 2 view .LVU4398
 792:src/xeq.c     **** }
 16897              		.loc 1 792 9 is_stmt 0 view .LVU4399
 16898 0012 6421     		movs	r1, #100
 16899              	.LVL1258:
 792:src/xeq.c     **** }
 16900              		.loc 1 792 9 view .LVU4400
 16901 0014 6846     		mov	r0, sp
 16902              	.LVL1259:
 792:src/xeq.c     **** }
 16903              		.loc 1 792 9 view .LVU4401
 16904 0016 FFF7FEFF 		bl	getRegister
 16905              	.LVL1260:
 792:src/xeq.c     **** }
 16906              		.loc 1 792 9 view .LVU4402
 16907              	.LBE2885:
 16908              	.LBE2884:
ARM GAS  /tmp/ccK8IvWa.s 			page 465


2316:src/xeq.c     **** 	setlastX();
 16909              		.loc 1 2316 2 is_stmt 1 view .LVU4403
 16910 001a 6A46     		mov	r2, sp
 16911 001c 2146     		mov	r1, r4
 16912 001e 09A8     		add	r0, sp, #36
 16913 0020 FFF7FEFF 		bl	do_conv
 16914              	.LVL1261:
2317:src/xeq.c     **** 	setX(&r);
 16915              		.loc 1 2317 2 view .LVU4404
 16916              	.LBB2886:
 16917              	.LBI2886:
 759:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 16918              		.loc 1 759 6 view .LVU4405
 16919              	.LBB2887:
 760:src/xeq.c     **** }
 16920              		.loc 1 760 2 view .LVU4406
 16921 0024 6421     		movs	r1, #100
 16922 0026 6C20     		movs	r0, #108
 16923 0028 FFF7FEFF 		bl	copyreg_n
 16924              	.LVL1262:
 16925              	.LBE2887:
 16926              	.LBE2886:
2318:src/xeq.c     **** }
 16927              		.loc 1 2318 2 view .LVU4407
 16928              	.LBB2888:
 16929              	.LBI2888:
 795:src/xeq.c     **** 	setRegister(regX_idx, x);
 16930              		.loc 1 795 6 view .LVU4408
 16931              	.LBB2889:
 796:src/xeq.c     **** }
 16932              		.loc 1 796 2 view .LVU4409
 16933 002c 09A9     		add	r1, sp, #36
 16934              	.LVL1263:
 796:src/xeq.c     **** }
 16935              		.loc 1 796 2 is_stmt 0 view .LVU4410
 16936 002e 6420     		movs	r0, #100
 16937 0030 FFF7FEFF 		bl	setRegister
 16938              	.LVL1264:
 796:src/xeq.c     **** }
 16939              		.loc 1 796 2 view .LVU4411
 16940              	.LBE2889:
 16941              	.LBE2888:
2319:src/xeq.c     **** 
 16942              		.loc 1 2319 1 view .LVU4412
 16943 0034 12B0     		add	sp, sp, #72
 16944              		.cfi_def_cfa_offset 8
 16945              		@ sp needed
 16946 0036 10BD     		pop	{r4, pc}
 16947              	.LVL1265:
 16948              	.L1204:
2319:src/xeq.c     **** 
 16949              		.loc 1 2319 1 view .LVU4413
 16950              		.align	2
 16951              	.L1203:
 16952 0038 00000000 		.word	PersistentRam
 16953              		.cfi_endproc
 16954              	.LFE173:
ARM GAS  /tmp/ccK8IvWa.s 			page 466


 16956              		.section	.text.fin_tst,"ax",%progbits
 16957              		.align	1
 16958              		.p2align 2,,3
 16959              		.global	fin_tst
 16960              		.syntax unified
 16961              		.thumb
 16962              		.thumb_func
 16963              		.fpu fpv4-sp-d16
 16965              	fin_tst:
 16966              	.LVL1266:
 16967              	.LFB174:
2324:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 16968              		.loc 1 2324 27 is_stmt 1 view -0
 16969              		.cfi_startproc
 16970              		@ args = 0, pretend = 0, frame = 0
 16971              		@ frame_needed = 0, uses_anonymous_args = 0
 16972              		@ link register save eliminated.
2325:src/xeq.c     **** 	if (Running || XromRunning) {
 16973              		.loc 1 2325 2 view .LVU4415
2325:src/xeq.c     **** 	if (Running || XromRunning) {
 16974              		.loc 1 2325 31 is_stmt 0 view .LVU4416
 16975 0000 30B1     		cbz	r0, .L1212
 16976              	.LVL1267:
2326:src/xeq.c     **** 		if (! a && incpc())
 16977              		.loc 1 2326 2 is_stmt 1 view .LVU4417
2326:src/xeq.c     **** 		if (! a && incpc())
 16978              		.loc 1 2326 14 is_stmt 0 view .LVU4418
 16979 0002 0A4A     		ldr	r2, .L1214
2326:src/xeq.c     **** 		if (! a && incpc())
 16980              		.loc 1 2326 6 view .LVU4419
 16981 0004 0A4B     		ldr	r3, .L1214+4
2326:src/xeq.c     **** 		if (! a && incpc())
 16982              		.loc 1 2326 14 view .LVU4420
 16983 0006 1268     		ldr	r2, [r2]
 16984 0008 1B68     		ldr	r3, [r3]
 16985 000a 1343     		orrs	r3, r2, r3
 16986 000c 0CD0     		beq	.L1213
2338:src/xeq.c     **** 
 16987              		.loc 1 2338 1 view .LVU4421
 16988 000e 7047     		bx	lr
 16989              	.LVL1268:
 16990              	.L1212:
2326:src/xeq.c     **** 		if (! a && incpc())
 16991              		.loc 1 2326 2 is_stmt 1 view .LVU4422
2326:src/xeq.c     **** 		if (! a && incpc())
 16992              		.loc 1 2326 14 is_stmt 0 view .LVU4423
 16993 0010 064A     		ldr	r2, .L1214
2326:src/xeq.c     **** 		if (! a && incpc())
 16994              		.loc 1 2326 6 view .LVU4424
 16995 0012 074B     		ldr	r3, .L1214+4
2326:src/xeq.c     **** 		if (! a && incpc())
 16996              		.loc 1 2326 14 view .LVU4425
 16997 0014 1268     		ldr	r2, [r2]
 16998 0016 1B68     		ldr	r3, [r3]
 16999 0018 1343     		orrs	r3, r2, r3
 17000 001a 03D1     		bne	.L1208
2325:src/xeq.c     **** 	if (Running || XromRunning) {
ARM GAS  /tmp/ccK8IvWa.s 			page 467


 17001              		.loc 1 2325 31 view .LVU4426
 17002 001c 054B     		ldr	r3, .L1214+8
 17003              	.LVL1269:
 17004              	.L1209:
2331:src/xeq.c     **** #ifdef INFRARED
 17005              		.loc 1 2331 3 is_stmt 1 view .LVU4427
2331:src/xeq.c     **** #ifdef INFRARED
 17006              		.loc 1 2331 11 is_stmt 0 view .LVU4428
 17007 001e 064A     		ldr	r2, .L1214+12
 17008 0020 1360     		str	r3, [r2]
2338:src/xeq.c     **** 
 17009              		.loc 1 2338 1 view .LVU4429
 17010 0022 7047     		bx	lr
 17011              	.LVL1270:
 17012              	.L1208:
2338:src/xeq.c     **** 
 17013              		.loc 1 2338 1 view .LVU4430
 17014 0024 FFF7FEBF 		b	fin_tst.part.0
 17015              	.LVL1271:
 17016              	.L1213:
2325:src/xeq.c     **** 	if (Running || XromRunning) {
 17017              		.loc 1 2325 31 view .LVU4431
 17018 0028 044B     		ldr	r3, .L1214+16
 17019 002a F8E7     		b	.L1209
 17020              	.L1215:
 17021              		.align	2
 17022              	.L1214:
 17023 002c 00000000 		.word	XromRunning
 17024 0030 00000000 		.word	Running
 17025 0034 00000000 		.word	.LC3
 17026 0038 00000000 		.word	DispMsg
 17027 003c 00000000 		.word	.LC2
 17028              		.cfi_endproc
 17029              	.LFE174:
 17031              		.section	.text.check_mode,"ax",%progbits
 17032              		.align	1
 17033              		.p2align 2,,3
 17034              		.global	check_mode
 17035              		.syntax unified
 17036              		.thumb
 17037              		.thumb_func
 17038              		.fpu fpv4-sp-d16
 17040              	check_mode:
 17041              	.LVL1272:
 17042              	.LFB138:
1892:src/xeq.c     **** 	const int intmode = is_intmode() ? 1 : 0;
 17043              		.loc 1 1892 32 is_stmt 1 view -0
 17044              		.cfi_startproc
 17045              		@ args = 0, pretend = 0, frame = 0
 17046              		@ frame_needed = 0, uses_anonymous_args = 0
 17047              		@ link register save eliminated.
1893:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
 17048              		.loc 1 1893 2 view .LVU4433
1894:src/xeq.c     **** 
 17049              		.loc 1 1894 2 view .LVU4434
1893:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
 17050              		.loc 1 1893 35 is_stmt 0 view .LVU4435
ARM GAS  /tmp/ccK8IvWa.s 			page 468


 17051 0000 074B     		ldr	r3, .L1217
1896:src/xeq.c     **** }
 17052              		.loc 1 1896 2 view .LVU4436
 17053 0002 A0F19F00 		sub	r0, #159
 17054              	.LVL1273:
1896:src/xeq.c     **** }
 17055              		.loc 1 1896 2 view .LVU4437
 17056 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1896:src/xeq.c     **** }
 17057              		.loc 1 1896 2 is_stmt 1 view .LVU4438
 17058 000a B0FA80F0 		clz	r0, r0
 17059 000e 4009     		lsrs	r0, r0, #5
 17060 0010 03F00103 		and	r3, r3, #1
 17061 0014 C01A     		subs	r0, r0, r3
 17062 0016 B0FA80F0 		clz	r0, r0
 17063 001a 4009     		lsrs	r0, r0, #5
 17064 001c FFF7FEBF 		b	fin_tst
 17065              	.LVL1274:
 17066              	.L1218:
1896:src/xeq.c     **** }
 17067              		.loc 1 1896 2 is_stmt 0 view .LVU4439
 17068              		.align	2
 17069              	.L1217:
 17070 0020 00000000 		.word	PersistentRam
 17071              		.cfi_endproc
 17072              	.LFE138:
 17074              		.section	.text.check_dblmode,"ax",%progbits
 17075              		.align	1
 17076              		.p2align 2,,3
 17077              		.global	check_dblmode
 17078              		.syntax unified
 17079              		.thumb
 17080              		.thumb_func
 17081              		.fpu fpv4-sp-d16
 17083              	check_dblmode:
 17084              	.LVL1275:
 17085              	.LFB139:
1902:src/xeq.c     **** 	fin_tst(is_dblmode());
 17086              		.loc 1 1902 35 is_stmt 1 view -0
 17087              		.cfi_startproc
 17088              		@ args = 0, pretend = 0, frame = 0
 17089              		@ frame_needed = 0, uses_anonymous_args = 0
 17090              		@ link register save eliminated.
1903:src/xeq.c     **** }
 17091              		.loc 1 1903 2 view .LVU4441
 17092              	.LBB2890:
 17093              	.LBI2890:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 17094              		.loc 1 918 5 view .LVU4442
 17095              	.LBB2891:
 919:src/xeq.c     **** }
 17096              		.loc 1 919 2 view .LVU4443
 919:src/xeq.c     **** }
 17097              		.loc 1 919 24 is_stmt 0 view .LVU4444
 17098 0000 064B     		ldr	r3, .L1220
 17099 0002 B3F8E837 		ldrh	r3, [r3, #2024]
 17100 0006 44F20100 		movw	r0, #16385
ARM GAS  /tmp/ccK8IvWa.s 			page 469


 17101              	.LVL1276:
 919:src/xeq.c     **** }
 17102              		.loc 1 919 24 view .LVU4445
 17103 000a 1840     		ands	r0, r0, r3
 17104              	.LBE2891:
 17105              	.LBE2890:
1903:src/xeq.c     **** }
 17106              		.loc 1 1903 2 view .LVU4446
 17107 000c A0F58040 		sub	r0, r0, #16384
 17108 0010 B0FA80F0 		clz	r0, r0
 17109 0014 4009     		lsrs	r0, r0, #5
 17110 0016 FFF7FEBF 		b	fin_tst
 17111              	.LVL1277:
 17112              	.L1221:
 17113 001a 00BF     		.align	2
 17114              	.L1220:
 17115 001c 00000000 		.word	PersistentRam
 17116              		.cfi_endproc
 17117              	.LFE139:
 17119              		.section	.text.isTop,"ax",%progbits
 17120              		.align	1
 17121              		.p2align 2,,3
 17122              		.global	isTop
 17123              		.syntax unified
 17124              		.thumb
 17125              		.thumb_func
 17126              		.fpu fpv4-sp-d16
 17128              	isTop:
 17129              	.LVL1278:
 17130              	.LFB155:
2110:src/xeq.c     **** 	int top = 0;
 17131              		.loc 1 2110 27 is_stmt 1 view -0
 17132              		.cfi_startproc
 17133              		@ args = 0, pretend = 0, frame = 0
 17134              		@ frame_needed = 0, uses_anonymous_args = 0
 17135              		@ link register save eliminated.
2111:src/xeq.c     **** 
 17136              		.loc 1 2111 2 view .LVU4448
2113:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
 17137              		.loc 1 2113 2 view .LVU4449
2113:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
 17138              		.loc 1 2113 6 is_stmt 0 view .LVU4450
 17139 0000 0C4B     		ldr	r3, .L1230
 17140 0002 1868     		ldr	r0, [r3]
 17141              	.LVL1279:
2113:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
 17142              		.loc 1 2113 5 view .LVU4451
 17143 0004 60B1     		cbz	r0, .L1223
2114:src/xeq.c     **** 	}
 17144              		.loc 1 2114 3 is_stmt 1 view .LVU4452
2114:src/xeq.c     **** 	}
 17145              		.loc 1 2114 9 is_stmt 0 view .LVU4453
 17146 0006 0C4B     		ldr	r3, .L1230+4
 17147              	.LBB2892:
 17148              	.LBB2893:
 214:src/xeq.c     **** }
 17149              		.loc 1 214 9 view .LVU4454
ARM GAS  /tmp/ccK8IvWa.s 			page 470


 17150 0008 B3F9DE27 		ldrsh	r2, [r3, #2014]
 17151              	.LBE2893:
 17152              	.LBE2892:
2114:src/xeq.c     **** 	}
 17153              		.loc 1 2114 9 view .LVU4455
 17154 000c B3F9E207 		ldrsh	r0, [r3, #2018]
 17155              	.LBB2896:
 17156              	.LBI2892:
 213:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 17157              		.loc 1 213 5 is_stmt 1 view .LVU4456
 17158              	.LBB2894:
 214:src/xeq.c     **** }
 17159              		.loc 1 214 2 view .LVU4457
 214:src/xeq.c     **** }
 17160              		.loc 1 214 57 is_stmt 0 view .LVU4458
 17161 0010 002A     		cmp	r2, #0
 17162 0012 07DB     		blt	.L1229
 17163 0014 4FF0FF33 		mov	r3, #-1
 17164              	.L1224:
 17165              	.LBE2894:
 17166              	.LBE2896:
2114:src/xeq.c     **** 	}
 17167              		.loc 1 2114 19 view .LVU4459
 17168 0018 9842     		cmp	r0, r3
 17169 001a B4BF     		ite	lt
 17170 001c 0020     		movlt	r0, #0
 17171 001e 0120     		movge	r0, #1
 17172              	.LVL1280:
 17173              	.L1223:
2116:src/xeq.c     **** }
 17174              		.loc 1 2116 2 is_stmt 1 view .LVU4460
 17175 0020 FFF7FEBF 		b	fin_tst
 17176              	.LVL1281:
 17177              	.L1229:
 17178              	.LBB2897:
 17179              	.LBB2895:
 214:src/xeq.c     **** }
 17180              		.loc 1 214 25 is_stmt 0 view .LVU4461
 17181 0024 054B     		ldr	r3, .L1230+8
 17182 0026 1B68     		ldr	r3, [r3]
 214:src/xeq.c     **** }
 17183              		.loc 1 214 57 view .LVU4462
 17184 0028 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 17185 002c C3F30B03 		ubfx	r3, r3, #0, #12
 17186 0030 DB43     		mvns	r3, r3
 17187 0032 F1E7     		b	.L1224
 17188              	.L1231:
 17189              		.align	2
 17190              	.L1230:
 17191 0034 00000000 		.word	Running
 17192 0038 00000000 		.word	PersistentRam
 17193 003c 00000000 		.word	RetStk
 17194              	.LBE2895:
 17195              	.LBE2897:
 17196              		.cfi_endproc
 17197              	.LFE155:
 17199              		.section	.text.cmdlblp,"ax",%progbits
ARM GAS  /tmp/ccK8IvWa.s 			page 471


 17200              		.align	1
 17201              		.p2align 2,,3
 17202              		.global	cmdlblp
 17203              		.syntax unified
 17204              		.thumb
 17205              		.thumb_func
 17206              		.fpu fpv4-sp-d16
 17208              	cmdlblp:
 17209              	.LVL1282:
 17210              	.LFB156:
2121:src/xeq.c     **** 	fin_tst(find_label_from(state_pc(), arg, FIND_OP_ENDS) != 0);
 17211              		.loc 1 2121 46 is_stmt 1 view -0
 17212              		.cfi_startproc
 17213              		@ args = 0, pretend = 0, frame = 0
 17214              		@ frame_needed = 0, uses_anonymous_args = 0
2122:src/xeq.c     **** }
 17215              		.loc 1 2122 2 view .LVU4464
2121:src/xeq.c     **** 	fin_tst(find_label_from(state_pc(), arg, FIND_OP_ENDS) != 0);
 17216              		.loc 1 2121 46 is_stmt 0 view .LVU4465
 17217 0000 08B5     		push	{r3, lr}
 17218              		.cfi_def_cfa_offset 8
 17219              		.cfi_offset 3, -8
 17220              		.cfi_offset 14, -4
2122:src/xeq.c     **** }
 17221              		.loc 1 2122 26 view .LVU4466
 17222 0002 074B     		ldr	r3, .L1234
 17223              	.LVL1283:
 17224              	.LBB2898:
 17225              	.LBI2898:
1996:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 17226              		.loc 1 1996 14 is_stmt 1 view .LVU4467
 17227              	.LBB2899:
1997:src/xeq.c     **** }
 17228              		.loc 1 1997 2 view .LVU4468
1997:src/xeq.c     **** }
 17229              		.loc 1 1997 9 is_stmt 0 view .LVU4469
 17230 0004 40F4C441 		orr	r1, r0, #25088
 17231              	.LVL1284:
1997:src/xeq.c     **** }
 17232              		.loc 1 1997 9 view .LVU4470
 17233 0008 0222     		movs	r2, #2
 17234 000a B3F8E007 		ldrh	r0, [r3, #2016]
 17235              	.LVL1285:
1997:src/xeq.c     **** }
 17236              		.loc 1 1997 9 view .LVU4471
 17237 000e FFF7FEFF 		bl	find_opcode_from
 17238              	.LVL1286:
1997:src/xeq.c     **** }
 17239              		.loc 1 1997 9 view .LVU4472
 17240              	.LBE2899:
 17241              	.LBE2898:
2122:src/xeq.c     **** }
 17242              		.loc 1 2122 2 view .LVU4473
 17243 0012 0038     		subs	r0, r0, #0
2123:src/xeq.c     **** 
 17244              		.loc 1 2123 1 view .LVU4474
 17245 0014 BDE80840 		pop	{r3, lr}
ARM GAS  /tmp/ccK8IvWa.s 			page 472


 17246              		.cfi_restore 14
 17247              		.cfi_restore 3
 17248              		.cfi_def_cfa_offset 0
2122:src/xeq.c     **** }
 17249              		.loc 1 2122 2 view .LVU4475
 17250 0018 18BF     		it	ne
 17251 001a 0120     		movne	r0, #1
 17252 001c FFF7FEBF 		b	fin_tst
 17253              	.LVL1287:
 17254              	.L1235:
 17255              		.align	2
 17256              	.L1234:
 17257 0020 00000000 		.word	PersistentRam
 17258              		.cfi_endproc
 17259              	.LFE156:
 17261              		.section	.text.cmdmultilblp,"ax",%progbits
 17262              		.align	1
 17263              		.p2align 2,,3
 17264              		.global	cmdmultilblp
 17265              		.syntax unified
 17266              		.thumb
 17267              		.thumb_func
 17268              		.fpu fpv4-sp-d16
 17270              	cmdmultilblp:
 17271              	.LVL1288:
 17272              	.LFB159:
2150:src/xeq.c     **** 	fin_tst(findmultilbl(o, 0) != 0);
 17273              		.loc 1 2150 55 is_stmt 1 view -0
 17274              		.cfi_startproc
 17275              		@ args = 0, pretend = 0, frame = 0
 17276              		@ frame_needed = 0, uses_anonymous_args = 0
2151:src/xeq.c     **** }
 17277              		.loc 1 2151 2 view .LVU4477
2150:src/xeq.c     **** 	fin_tst(findmultilbl(o, 0) != 0);
 17278              		.loc 1 2150 55 is_stmt 0 view .LVU4478
 17279 0000 08B5     		push	{r3, lr}
 17280              		.cfi_def_cfa_offset 8
 17281              		.cfi_offset 3, -8
 17282              		.cfi_offset 14, -4
2151:src/xeq.c     **** }
 17283              		.loc 1 2151 10 view .LVU4479
 17284 0002 0021     		movs	r1, #0
 17285              	.LVL1289:
2151:src/xeq.c     **** }
 17286              		.loc 1 2151 10 view .LVU4480
 17287 0004 FFF7FEFF 		bl	findmultilbl
 17288              	.LVL1290:
2151:src/xeq.c     **** }
 17289              		.loc 1 2151 2 view .LVU4481
 17290 0008 0038     		subs	r0, r0, #0
2152:src/xeq.c     **** 
 17291              		.loc 1 2152 1 view .LVU4482
 17292 000a BDE80840 		pop	{r3, lr}
 17293              		.cfi_restore 14
 17294              		.cfi_restore 3
 17295              		.cfi_def_cfa_offset 0
2151:src/xeq.c     **** }
ARM GAS  /tmp/ccK8IvWa.s 			page 473


 17296              		.loc 1 2151 2 view .LVU4483
 17297 000e 18BF     		it	ne
 17298 0010 0120     		movne	r0, #1
 17299 0012 FFF7FEBF 		b	fin_tst
 17300              	.LVL1291:
 17301              		.cfi_endproc
 17302              	.LFE159:
 17304 0016 00BF     		.section	.text.cmdkeyp,"ax",%progbits
 17305              		.align	1
 17306              		.p2align 2,,3
 17307              		.global	cmdkeyp
 17308              		.syntax unified
 17309              		.thumb
 17310              		.thumb_func
 17311              		.fpu fpv4-sp-d16
 17313              	cmdkeyp:
 17314              	.LVL1292:
 17315              	.LFB134:
1828:src/xeq.c     **** 	int cond = LastKey == 0;
 17316              		.loc 1 1828 46 is_stmt 1 view -0
 17317              		.cfi_startproc
 17318              		@ args = 0, pretend = 0, frame = 0
 17319              		@ frame_needed = 0, uses_anonymous_args = 0
1829:src/xeq.c     **** 	if (!cond) {
 17320              		.loc 1 1829 2 view .LVU4485
1828:src/xeq.c     **** 	int cond = LastKey == 0;
 17321              		.loc 1 1828 46 is_stmt 0 view .LVU4486
 17322 0000 70B5     		push	{r4, r5, r6, lr}
 17323              		.cfi_def_cfa_offset 16
 17324              		.cfi_offset 4, -16
 17325              		.cfi_offset 5, -12
 17326              		.cfi_offset 6, -8
 17327              		.cfi_offset 14, -4
1829:src/xeq.c     **** 	if (!cond) {
 17328              		.loc 1 1829 13 view .LVU4487
 17329 0002 104B     		ldr	r3, .L1245
 17330 0004 93F91320 		ldrsb	r2, [r3, #19]
1829:src/xeq.c     **** 	if (!cond) {
 17331              		.loc 1 1829 21 view .LVU4488
 17332 0008 002A     		cmp	r2, #0
1828:src/xeq.c     **** 	int cond = LastKey == 0;
 17333              		.loc 1 1828 46 view .LVU4489
 17334 000a 82B0     		sub	sp, sp, #8
 17335              		.cfi_def_cfa_offset 24
1829:src/xeq.c     **** 	if (!cond) {
 17336              		.loc 1 1829 21 view .LVU4490
 17337 000c 0CBF     		ite	eq
 17338 000e 0125     		moveq	r5, #1
 17339 0010 0025     		movne	r5, #0
 17340              	.LVL1293:
1830:src/xeq.c     **** 		int k = LastKey - 1;
 17341              		.loc 1 1830 2 is_stmt 1 view .LVU4491
1830:src/xeq.c     **** 		int k = LastKey - 1;
 17342              		.loc 1 1830 5 is_stmt 0 view .LVU4492
 17343 0012 05D1     		bne	.L1244
1835:src/xeq.c     **** }
 17344              		.loc 1 1835 2 is_stmt 1 view .LVU4493
ARM GAS  /tmp/ccK8IvWa.s 			page 474


 17345 0014 2846     		mov	r0, r5
 17346              	.LVL1294:
1836:src/xeq.c     **** 
 17347              		.loc 1 1836 1 is_stmt 0 view .LVU4494
 17348 0016 02B0     		add	sp, sp, #8
 17349              		.cfi_remember_state
 17350              		.cfi_def_cfa_offset 16
 17351              		@ sp needed
 17352 0018 BDE87040 		pop	{r4, r5, r6, lr}
 17353              		.cfi_restore 14
 17354              		.cfi_restore 6
 17355              		.cfi_restore 5
 17356              		.cfi_restore 4
 17357              		.cfi_def_cfa_offset 0
 17358              	.LVL1295:
1835:src/xeq.c     **** }
 17359              		.loc 1 1835 2 view .LVU4495
 17360 001c FFF7FEBF 		b	fin_tst
 17361              	.LVL1296:
 17362              	.L1244:
 17363              		.cfi_restore_state
 17364              	.LBB2900:
1831:src/xeq.c     **** 		LastKey = 0;
 17365              		.loc 1 1831 3 is_stmt 1 view .LVU4496
1832:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
 17366              		.loc 1 1832 3 view .LVU4497
 17367 0020 0446     		mov	r4, r0
1832:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
 17368              		.loc 1 1832 11 is_stmt 0 view .LVU4498
 17369 0022 0026     		movs	r6, #0
1833:src/xeq.c     **** 	}
 17370              		.loc 1 1833 26 view .LVU4499
 17371 0024 501E     		subs	r0, r2, #1
 17372              	.LVL1297:
1832:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
 17373              		.loc 1 1832 11 view .LVU4500
 17374 0026 DE74     		strb	r6, [r3, #19]
1833:src/xeq.c     **** 	}
 17375              		.loc 1 1833 3 is_stmt 1 view .LVU4501
1833:src/xeq.c     **** 	}
 17376              		.loc 1 1833 26 is_stmt 0 view .LVU4502
 17377 0028 FFF7FEFF 		bl	keycode_to_row_column
 17378              	.LVL1298:
1833:src/xeq.c     **** 	}
 17379              		.loc 1 1833 26 view .LVU4503
 17380 002c 0246     		mov	r2, r0
1833:src/xeq.c     **** 	}
 17381              		.loc 1 1833 3 view .LVU4504
 17382 002e 0096     		str	r6, [sp]
 17383 0030 2046     		mov	r0, r4
 17384 0032 D317     		asrs	r3, r2, #31
 17385 0034 FFF7FEFF 		bl	set_reg_n_int_sgn
 17386              	.LVL1299:
 17387              	.LBE2900:
1835:src/xeq.c     **** }
 17388              		.loc 1 1835 2 is_stmt 1 view .LVU4505
 17389 0038 2846     		mov	r0, r5
ARM GAS  /tmp/ccK8IvWa.s 			page 475


1836:src/xeq.c     **** 
 17390              		.loc 1 1836 1 is_stmt 0 view .LVU4506
 17391 003a 02B0     		add	sp, sp, #8
 17392              		.cfi_def_cfa_offset 16
 17393              		@ sp needed
 17394 003c BDE87040 		pop	{r4, r5, r6, lr}
 17395              		.cfi_restore 14
 17396              		.cfi_restore 6
 17397              		.cfi_restore 5
 17398              		.cfi_restore 4
 17399              		.cfi_def_cfa_offset 0
 17400              	.LVL1300:
1835:src/xeq.c     **** }
 17401              		.loc 1 1835 2 view .LVU4507
 17402 0040 FFF7FEBF 		b	fin_tst
 17403              	.LVL1301:
 17404              	.L1246:
1835:src/xeq.c     **** }
 17405              		.loc 1 1835 2 view .LVU4508
 17406              		.align	2
 17407              	.L1245:
 17408 0044 00000000 		.word	StateWhileOn
 17409              		.cfi_endproc
 17410              	.LFE134:
 17412              		.section	.text.do_tst,"ax",%progbits
 17413              		.align	1
 17414              		.p2align 2,,3
 17415              		.syntax unified
 17416              		.thumb
 17417              		.thumb_func
 17418              		.fpu fpv4-sp-d16
 17420              	do_tst:
 17421              	.LVL1302:
 17422              	.LFB180:
3039:src/xeq.c     **** 	int a = 0;
 17423              		.loc 1 3039 51 is_stmt 1 view -0
 17424              		.cfi_startproc
 17425              		@ args = 0, pretend = 0, frame = 112
 17426              		@ frame_needed = 0, uses_anonymous_args = 0
3040:src/xeq.c     **** 	int iszero, isneg;
 17427              		.loc 1 3040 2 view .LVU4510
3041:src/xeq.c     **** 
 17428              		.loc 1 3041 2 view .LVU4511
3043:src/xeq.c     **** 
 17429              		.loc 1 3043 2 view .LVU4512
 17430              	.LBB2901:
 17431              	.LBI2901:
1132:src/xeq.c     **** 	process_cmdline();
 17432              		.loc 1 1132 6 view .LVU4513
 17433              	.LBB2902:
1133:src/xeq.c     **** 	set_lift();
 17434              		.loc 1 1133 2 view .LVU4514
 17435              	.LBE2902:
 17436              	.LBE2901:
3039:src/xeq.c     **** 	int a = 0;
 17437              		.loc 1 3039 51 is_stmt 0 view .LVU4515
 17438 0000 2DE9D043 		push	{r4, r6, r7, r8, r9, lr}
ARM GAS  /tmp/ccK8IvWa.s 			page 476


 17439              		.cfi_def_cfa_offset 24
 17440              		.cfi_offset 4, -24
 17441              		.cfi_offset 6, -20
 17442              		.cfi_offset 7, -16
 17443              		.cfi_offset 8, -12
 17444              		.cfi_offset 9, -8
 17445              		.cfi_offset 14, -4
 17446 0004 9CB0     		sub	sp, sp, #112
 17447              		.cfi_def_cfa_offset 136
3039:src/xeq.c     **** 	int a = 0;
 17448              		.loc 1 3039 51 view .LVU4516
 17449 0006 0C46     		mov	r4, r1
 17450 0008 8046     		mov	r8, r0
 17451              	.LBB2912:
 17452              	.LBB2909:
1133:src/xeq.c     **** 	set_lift();
 17453              		.loc 1 1133 2 view .LVU4517
 17454 000a FFF7FEFF 		bl	process_cmdline
 17455              	.LVL1303:
1134:src/xeq.c     **** }
 17456              		.loc 1 1134 2 is_stmt 1 view .LVU4518
 17457              	.LBB2903:
 17458              	.LBI2903:
 734:src/xeq.c     ****     State2.state_lift = 1;
 17459              		.loc 1 734 6 view .LVU4519
 17460              	.LBB2904:
 735:src/xeq.c     **** }
 17461              		.loc 1 735 5 view .LVU4520
 735:src/xeq.c     **** }
 17462              		.loc 1 735 23 is_stmt 0 view .LVU4521
 17463 000e 544A     		ldr	r2, .L1277
 17464              	.LBE2904:
 17465              	.LBE2903:
 17466              	.LBE2909:
 17467              	.LBE2912:
3045:src/xeq.c     **** 		unsigned long long int xv, yv;
 17468              		.loc 1 3045 6 view .LVU4522
 17469 0010 5449     		ldr	r1, .L1277+4
 17470              	.LBB2913:
 17471              	.LBB2910:
 17472              	.LBB2907:
 17473              	.LBB2905:
 735:src/xeq.c     **** }
 17474              		.loc 1 735 23 view .LVU4523
 17475 0012 D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 17476              	.LBE2905:
 17477              	.LBE2907:
 17478              	.LBE2910:
 17479              	.LBE2913:
3045:src/xeq.c     **** 		unsigned long long int xv, yv;
 17480              		.loc 1 3045 6 view .LVU4524
 17481 0014 91F8E817 		ldrb	r1, [r1, #2024]	@ zero_extendqisi2
 17482              	.LBB2914:
 17483              	.LBB2911:
 17484              	.LBB2908:
 17485              	.LBB2906:
 735:src/xeq.c     **** }
ARM GAS  /tmp/ccK8IvWa.s 			page 477


 17486              		.loc 1 735 23 view .LVU4525
 17487 0018 43F04003 		orr	r3, r3, #64
 17488 001c D375     		strb	r3, [r2, #23]
 17489              	.LBE2906:
 17490              	.LBE2908:
 17491              	.LBE2911:
 17492              	.LBE2914:
3045:src/xeq.c     **** 		unsigned long long int xv, yv;
 17493              		.loc 1 3045 2 is_stmt 1 view .LVU4526
3045:src/xeq.c     **** 		unsigned long long int xv, yv;
 17494              		.loc 1 3045 5 is_stmt 0 view .LVU4527
 17495 001e CB07     		lsls	r3, r1, #31
 17496 0020 2CD5     		bpl	.L1248
 17497              	.LBB2915:
3046:src/xeq.c     **** 		int xs, ys;
 17498              		.loc 1 3046 3 is_stmt 1 view .LVU4528
3047:src/xeq.c     **** 
 17499              		.loc 1 3047 3 view .LVU4529
3049:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
 17500              		.loc 1 3049 3 view .LVU4530
 17501              	.LBB2916:
 17502              	.LBI2916:
1242:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 17503              		.loc 1 1242 15 view .LVU4531
 17504              	.LBB2917:
1243:src/xeq.c     **** }
 17505              		.loc 1 1243 2 view .LVU4532
1243:src/xeq.c     **** }
 17506              		.loc 1 1243 9 is_stmt 0 view .LVU4533
 17507 0022 6420     		movs	r0, #100
 17508 0024 FFF7FEFF 		bl	get_reg_n_int
 17509              	.LVL1304:
 17510              	.LBE2917:
 17511              	.LBE2916:
3049:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
 17512              		.loc 1 3049 8 view .LVU4534
 17513 0028 0AAA     		add	r2, sp, #40
 17514 002a FFF7FEFF 		bl	extract_value
 17515              	.LVL1305:
3050:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
 17516              		.loc 1 3050 6 view .LVU4535
 17517 002e B8F5FA6F 		cmp	r8, #2000
3049:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
 17518              		.loc 1 3049 8 view .LVU4536
 17519 0032 0646     		mov	r6, r0
 17520 0034 0F46     		mov	r7, r1
 17521              	.LVL1306:
3050:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
 17522              		.loc 1 3050 3 is_stmt 1 view .LVU4537
3050:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
 17523              		.loc 1 3050 6 is_stmt 0 view .LVU4538
 17524 0036 51DB     		blt	.L1249
3051:src/xeq.c     **** 			ys = 0;
 17525              		.loc 1 3051 4 is_stmt 1 view .LVU4539
3051:src/xeq.c     **** 			ys = 0;
 17526              		.loc 1 3051 30 is_stmt 0 view .LVU4540
 17527 0038 A8F61B08 		subw	r8, r8, #2075
ARM GAS  /tmp/ccK8IvWa.s 			page 478


 17528              	.LVL1307:
3051:src/xeq.c     **** 			ys = 0;
 17529              		.loc 1 3051 7 view .LVU4541
 17530 003c 4FEAE879 		asr	r9, r8, #31
 17531              	.LVL1308:
3052:src/xeq.c     **** 		} else
 17532              		.loc 1 3052 4 is_stmt 1 view .LVU4542
 17533 0040 0022     		movs	r2, #0
 17534              	.LVL1309:
 17535              	.L1250:
3056:src/xeq.c     **** 			iszero = 1;
 17536              		.loc 1 3056 3 view .LVU4543
3056:src/xeq.c     **** 			iszero = 1;
 17537              		.loc 1 3056 6 is_stmt 0 view .LVU4544
 17538 0042 56EA0703 		orrs	r3, r6, r7
 17539 0046 40D1     		bne	.L1251
3056:src/xeq.c     **** 			iszero = 1;
 17540              		.loc 1 3056 15 discriminator 1 view .LVU4545
 17541 0048 58EA0903 		orrs	r3, r8, r9
 17542 004c 50D0     		beq	.L1252
 17543              	.L1254:
 17544 004e 0A9B     		ldr	r3, [sp, #40]
3061:src/xeq.c     **** 			if (xs)		// both negative
 17545              		.loc 1 3061 6 view .LVU4546
 17546 0050 9A42     		cmp	r2, r3
3059:src/xeq.c     **** 
 17547              		.loc 1 3059 24 view .LVU4547
 17548 0052 4FF00000 		mov	r0, #0
 17549              	.LVL1310:
3061:src/xeq.c     **** 			if (xs)		// both negative
 17550              		.loc 1 3061 3 is_stmt 1 view .LVU4548
3061:src/xeq.c     **** 			if (xs)		// both negative
 17551              		.loc 1 3061 6 is_stmt 0 view .LVU4549
 17552 0056 50D0     		beq	.L1255
 17553              	.LVL1311:
 17554              	.L1258:
3061:src/xeq.c     **** 			if (xs)		// both negative
 17555              		.loc 1 3061 6 view .LVU4550
 17556              	.LBE2915:
3089:src/xeq.c     **** 	case TST_APX:
 17557              		.loc 1 3089 2 is_stmt 1 view .LVU4551
 17558 0058 062C     		cmp	r4, #6
 17559 005a 30D8     		bhi	.L1264
 17560 005c DFE804F0 		tbb	[pc, r4]
 17561              	.L1266:
 17562 0060 09       		.byte	(.L1263-.L1266)/2
 17563 0061 55       		.byte	(.L1275-.L1266)/2
 17564 0062 09       		.byte	(.L1263-.L1266)/2
 17565 0063 2E       		.byte	(.L1269-.L1266)/2
 17566 0064 64       		.byte	(.L1268-.L1266)/2
 17567 0065 69       		.byte	(.L1267-.L1266)/2
 17568 0066 04       		.byte	(.L1265-.L1266)/2
 17569 0067 00       		.p2align 1
 17570              	.L1265:
3096:src/xeq.c     **** 	default:	a = 0;			break;
 17571              		.loc 1 3096 15 view .LVU4552
3096:src/xeq.c     **** 	default:	a = 0;			break;
ARM GAS  /tmp/ccK8IvWa.s 			page 479


 17572              		.loc 1 3096 26 is_stmt 0 view .LVU4553
 17573 0068 002B     		cmp	r3, #0
 17574 006a 67D0     		beq	.L1273
3096:src/xeq.c     **** 	default:	a = 0;			break;
 17575              		.loc 1 3096 26 discriminator 2 view .LVU4554
 17576 006c 0038     		subs	r0, r0, #0
3096:src/xeq.c     **** 	default:	a = 0;			break;
 17577              		.loc 1 3096 26 discriminator 2 view .LVU4555
 17578 006e 18BF     		it	ne
 17579 0070 0120     		movne	r0, #1
 17580              	.LVL1312:
 17581              	.L1263:
3100:src/xeq.c     **** }
 17582              		.loc 1 3100 7 is_stmt 1 view .LVU4556
 17583 0072 FFF7FEFF 		bl	fin_tst
 17584              	.LVL1313:
3101:src/xeq.c     **** 
 17585              		.loc 1 3101 1 is_stmt 0 view .LVU4557
 17586 0076 1CB0     		add	sp, sp, #112
 17587              		.cfi_remember_state
 17588              		.cfi_def_cfa_offset 24
 17589              		@ sp needed
 17590 0078 BDE8D083 		pop	{r4, r6, r7, r8, r9, pc}
 17591              	.LVL1314:
 17592              	.L1248:
 17593              		.cfi_restore_state
 17594              	.LBB2918:
3069:src/xeq.c     **** 
 17595              		.loc 1 3069 3 is_stmt 1 view .LVU4558
3071:src/xeq.c     **** 		if (decNumberIsNaN(&x))
 17596              		.loc 1 3071 3 view .LVU4559
 17597              	.LBB2919:
 17598              	.LBI2919:
 791:src/xeq.c     **** 	return getRegister(x, regX_idx);
 17599              		.loc 1 791 12 view .LVU4560
 17600              	.LBB2920:
 792:src/xeq.c     **** }
 17601              		.loc 1 792 2 view .LVU4561
 792:src/xeq.c     **** }
 17602              		.loc 1 792 9 is_stmt 0 view .LVU4562
 17603 007c 0AA8     		add	r0, sp, #40
 17604              	.LVL1315:
 792:src/xeq.c     **** }
 17605              		.loc 1 792 9 view .LVU4563
 17606 007e 6421     		movs	r1, #100
 17607 0080 FFF7FEFF 		bl	getRegister
 17608              	.LVL1316:
 792:src/xeq.c     **** }
 17609              		.loc 1 792 9 view .LVU4564
 17610              	.LBE2920:
 17611              	.LBE2919:
3072:src/xeq.c     **** 			goto flse;
 17612              		.loc 1 3072 3 is_stmt 1 view .LVU4565
3072:src/xeq.c     **** 			goto flse;
 17613              		.loc 1 3072 6 is_stmt 0 view .LVU4566
 17614 0084 9DF83030 		ldrb	r3, [sp, #48]	@ zero_extendqisi2
 17615 0088 13F0300F 		tst	r3, #48
ARM GAS  /tmp/ccK8IvWa.s 			page 480


 17616 008c 17D1     		bne	.L1264
3075:src/xeq.c     **** 		if (decNumberIsNaN(&t))
 17617              		.loc 1 3075 3 is_stmt 1 view .LVU4567
 17618 008e 01A8     		add	r0, sp, #4
 17619 0090 4146     		mov	r1, r8
 17620 0092 FFF7FEFF 		bl	getRegister
 17621              	.LVL1317:
3076:src/xeq.c     **** 			goto flse;
 17622              		.loc 1 3076 3 view .LVU4568
3076:src/xeq.c     **** 			goto flse;
 17623              		.loc 1 3076 6 is_stmt 0 view .LVU4569
 17624 0096 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 17625 009a 13F0300F 		tst	r3, #48
 17626 009e 0ED1     		bne	.L1264
3079:src/xeq.c     **** 			decNumberRnd(&x, &x);
 17627              		.loc 1 3079 3 is_stmt 1 view .LVU4570
3079:src/xeq.c     **** 			decNumberRnd(&x, &x);
 17628              		.loc 1 3079 6 is_stmt 0 view .LVU4571
 17629 00a0 022C     		cmp	r4, #2
 17630 00a2 50D0     		beq	.L1276
 17631              	.L1261:
3084:src/xeq.c     **** 		iszero = dn_eq0(&r);
 17632              		.loc 1 3084 3 is_stmt 1 view .LVU4572
 17633 00a4 01AA     		add	r2, sp, #4
 17634 00a6 0AA9     		add	r1, sp, #40
 17635 00a8 13A8     		add	r0, sp, #76
 17636 00aa FFF7FEFF 		bl	dn_compare
 17637              	.LVL1318:
3085:src/xeq.c     **** 		isneg = decNumberIsNegative(&r);
 17638              		.loc 1 3085 3 view .LVU4573
3085:src/xeq.c     **** 		isneg = decNumberIsNegative(&r);
 17639              		.loc 1 3085 12 is_stmt 0 view .LVU4574
 17640 00ae 13A8     		add	r0, sp, #76
 17641 00b0 FFF7FEFF 		bl	dn_eq0
 17642              	.LVL1319:
3086:src/xeq.c     **** 	}
 17643              		.loc 1 3086 11 view .LVU4575
 17644 00b4 9DF95430 		ldrsb	r3, [sp, #84]
 17645              	.LVL1320:
3086:src/xeq.c     **** 	}
 17646              		.loc 1 3086 3 is_stmt 1 view .LVU4576
3086:src/xeq.c     **** 	}
 17647              		.loc 1 3086 11 is_stmt 0 view .LVU4577
 17648 00b8 DB0F     		lsrs	r3, r3, #31
 17649              	.LVL1321:
3086:src/xeq.c     **** 	}
 17650              		.loc 1 3086 11 view .LVU4578
 17651 00ba CDE7     		b	.L1258
 17652              	.LVL1322:
 17653              	.L1269:
3086:src/xeq.c     **** 	}
 17654              		.loc 1 3086 11 view .LVU4579
 17655              	.LBE2918:
3093:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 17656              		.loc 1 3093 15 is_stmt 1 view .LVU4580
3093:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 17657              		.loc 1 3093 25 is_stmt 0 view .LVU4581
ARM GAS  /tmp/ccK8IvWa.s 			page 481


 17658 00bc 2BBB     		cbnz	r3, .L1275
 17659              	.LVL1323:
 17660              	.L1264:
3093:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 17661              		.loc 1 3093 25 view .LVU4582
 17662 00be 0020     		movs	r0, #0
 17663              	.LVL1324:
3100:src/xeq.c     **** }
 17664              		.loc 1 3100 7 is_stmt 1 view .LVU4583
 17665 00c0 FFF7FEFF 		bl	fin_tst
 17666              	.LVL1325:
3101:src/xeq.c     **** 
 17667              		.loc 1 3101 1 is_stmt 0 view .LVU4584
 17668 00c4 1CB0     		add	sp, sp, #112
 17669              		.cfi_remember_state
 17670              		.cfi_def_cfa_offset 24
 17671              		@ sp needed
 17672 00c6 BDE8D083 		pop	{r4, r6, r7, r8, r9, pc}
 17673              	.LVL1326:
 17674              	.L1251:
 17675              		.cfi_restore_state
 17676              	.LBB2921:
3059:src/xeq.c     **** 
 17677              		.loc 1 3059 4 is_stmt 1 view .LVU4585
3059:src/xeq.c     **** 
 17678              		.loc 1 3059 24 is_stmt 0 view .LVU4586
 17679 00ca B945     		cmp	r9, r7
 17680 00cc 08BF     		it	eq
 17681 00ce B045     		cmpeq	r8, r6
 17682 00d0 BDD1     		bne	.L1254
3059:src/xeq.c     **** 
 17683              		.loc 1 3059 31 discriminator 1 view .LVU4587
 17684 00d2 0A9B     		ldr	r3, [sp, #40]
3059:src/xeq.c     **** 
 17685              		.loc 1 3059 24 discriminator 1 view .LVU4588
 17686 00d4 9342     		cmp	r3, r2
 17687 00d6 33D0     		beq	.L1271
3059:src/xeq.c     **** 
 17688              		.loc 1 3059 24 view .LVU4589
 17689 00d8 0020     		movs	r0, #0
 17690 00da BDE7     		b	.L1258
 17691              	.LVL1327:
 17692              	.L1249:
3054:src/xeq.c     **** 
 17693              		.loc 1 3054 4 is_stmt 1 view .LVU4590
3054:src/xeq.c     **** 
 17694              		.loc 1 3054 9 is_stmt 0 view .LVU4591
 17695 00dc 4046     		mov	r0, r8
 17696 00de FFF7FEFF 		bl	get_reg_n_int
 17697              	.LVL1328:
 17698 00e2 13AA     		add	r2, sp, #76
 17699 00e4 FFF7FEFF 		bl	extract_value
 17700              	.LVL1329:
 17701 00e8 139A     		ldr	r2, [sp, #76]
 17702 00ea 8046     		mov	r8, r0
 17703              	.LVL1330:
3054:src/xeq.c     **** 
ARM GAS  /tmp/ccK8IvWa.s 			page 482


 17704              		.loc 1 3054 9 view .LVU4592
 17705 00ec 8946     		mov	r9, r1
 17706              	.LVL1331:
3054:src/xeq.c     **** 
 17707              		.loc 1 3054 9 view .LVU4593
 17708 00ee A8E7     		b	.L1250
 17709              	.L1252:
3054:src/xeq.c     **** 
 17710              		.loc 1 3054 9 view .LVU4594
 17711 00f0 0A9B     		ldr	r3, [sp, #40]
3061:src/xeq.c     **** 			if (xs)		// both negative
 17712              		.loc 1 3061 6 view .LVU4595
 17713 00f2 9A42     		cmp	r2, r3
3057:src/xeq.c     **** 		else
 17714              		.loc 1 3057 11 view .LVU4596
 17715 00f4 4FF00100 		mov	r0, #1
 17716              	.LVL1332:
3061:src/xeq.c     **** 			if (xs)		// both negative
 17717              		.loc 1 3061 3 is_stmt 1 view .LVU4597
3061:src/xeq.c     **** 			if (xs)		// both negative
 17718              		.loc 1 3061 6 is_stmt 0 view .LVU4598
 17719 00f8 AED1     		bne	.L1258
 17720              	.LVL1333:
 17721              	.L1255:
3062:src/xeq.c     **** 				isneg = xv > yv;
 17722              		.loc 1 3062 4 is_stmt 1 view .LVU4599
3062:src/xeq.c     **** 				isneg = xv > yv;
 17723              		.loc 1 3062 7 is_stmt 0 view .LVU4600
 17724 00fa 73B1     		cbz	r3, .L1257
3063:src/xeq.c     **** 			else		// both positive
 17725              		.loc 1 3063 5 is_stmt 1 view .LVU4601
3063:src/xeq.c     **** 			else		// both positive
 17726              		.loc 1 3063 16 is_stmt 0 view .LVU4602
 17727 00fc B945     		cmp	r9, r7
 17728 00fe 08BF     		it	eq
 17729 0100 B045     		cmpeq	r8, r6
 17730 0102 34BF     		ite	cc
 17731 0104 0123     		movcc	r3, #1
 17732 0106 0023     		movcs	r3, #0
 17733              	.LVL1334:
3063:src/xeq.c     **** 			else		// both positive
 17734              		.loc 1 3063 16 view .LVU4603
 17735 0108 A6E7     		b	.L1258
 17736              	.LVL1335:
 17737              	.L1275:
3063:src/xeq.c     **** 			else		// both positive
 17738              		.loc 1 3063 16 view .LVU4604
 17739              	.LBE2921:
3093:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 17740              		.loc 1 3093 25 discriminator 1 view .LVU4605
 17741 010a B0FA80F0 		clz	r0, r0
 17742              	.LVL1336:
3093:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 17743              		.loc 1 3093 25 discriminator 1 view .LVU4606
 17744 010e 4009     		lsrs	r0, r0, #5
 17745              	.LVL1337:
3100:src/xeq.c     **** }
ARM GAS  /tmp/ccK8IvWa.s 			page 483


 17746              		.loc 1 3100 7 is_stmt 1 discriminator 1 view .LVU4607
 17747 0110 FFF7FEFF 		bl	fin_tst
 17748              	.LVL1338:
3101:src/xeq.c     **** 
 17749              		.loc 1 3101 1 is_stmt 0 discriminator 1 view .LVU4608
 17750 0114 1CB0     		add	sp, sp, #112
 17751              		.cfi_remember_state
 17752              		.cfi_def_cfa_offset 24
 17753              		@ sp needed
 17754 0116 BDE8D083 		pop	{r4, r6, r7, r8, r9, pc}
 17755              	.LVL1339:
 17756              	.L1257:
 17757              		.cfi_restore_state
 17758              	.LBB2922:
3065:src/xeq.c     **** 		} else
 17759              		.loc 1 3065 5 is_stmt 1 view .LVU4609
3065:src/xeq.c     **** 		} else
 17760              		.loc 1 3065 16 is_stmt 0 view .LVU4610
 17761 011a 4F45     		cmp	r7, r9
 17762 011c 08BF     		it	eq
 17763 011e 4645     		cmpeq	r6, r8
 17764 0120 34BF     		ite	cc
 17765 0122 0123     		movcc	r3, #1
 17766 0124 0023     		movcs	r3, #0
 17767              	.LVL1340:
3065:src/xeq.c     **** 		} else
 17768              		.loc 1 3065 16 view .LVU4611
 17769 0126 97E7     		b	.L1258
 17770              	.LVL1341:
 17771              	.L1268:
3065:src/xeq.c     **** 		} else
 17772              		.loc 1 3065 16 view .LVU4612
 17773              	.LBE2922:
3094:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 17774              		.loc 1 3094 15 is_stmt 1 discriminator 2 view .LVU4613
3094:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 17775              		.loc 1 3094 25 is_stmt 0 discriminator 2 view .LVU4614
 17776 0128 0343     		orrs	r3, r0, r3
 17777              	.LVL1342:
3094:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 17778              		.loc 1 3094 25 discriminator 2 view .LVU4615
 17779 012a 14BF     		ite	ne
 17780 012c 0120     		movne	r0, #1
 17781              	.LVL1343:
3094:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 17782              		.loc 1 3094 25 discriminator 2 view .LVU4616
 17783 012e 0020     		moveq	r0, #0
 17784 0130 9FE7     		b	.L1263
 17785              	.LVL1344:
 17786              	.L1267:
3095:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 17787              		.loc 1 3095 15 is_stmt 1 discriminator 1 view .LVU4617
3095:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 17788              		.loc 1 3095 26 is_stmt 0 discriminator 1 view .LVU4618
 17789 0132 0343     		orrs	r3, r0, r3
 17790              	.LVL1345:
3095:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
ARM GAS  /tmp/ccK8IvWa.s 			page 484


 17791              		.loc 1 3095 26 discriminator 1 view .LVU4619
 17792 0134 0CBF     		ite	eq
 17793 0136 0120     		moveq	r0, #1
 17794              	.LVL1346:
3095:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 17795              		.loc 1 3095 26 discriminator 1 view .LVU4620
 17796 0138 0020     		movne	r0, #0
 17797 013a 9AE7     		b	.L1263
 17798              	.LVL1347:
 17799              	.L1273:
3096:src/xeq.c     **** 	default:	a = 0;			break;
 17800              		.loc 1 3096 26 view .LVU4621
 17801 013c 0120     		movs	r0, #1
 17802              	.LVL1348:
3096:src/xeq.c     **** 	default:	a = 0;			break;
 17803              		.loc 1 3096 26 view .LVU4622
 17804 013e 98E7     		b	.L1263
 17805              	.LVL1349:
 17806              	.L1271:
 17807              	.LBB2923:
3096:src/xeq.c     **** 	default:	a = 0;			break;
 17808              		.loc 1 3096 26 view .LVU4623
 17809 0140 1346     		mov	r3, r2
3059:src/xeq.c     **** 
 17810              		.loc 1 3059 24 view .LVU4624
 17811 0142 0120     		movs	r0, #1
 17812 0144 D9E7     		b	.L1255
 17813              	.LVL1350:
 17814              	.L1276:
3059:src/xeq.c     **** 
 17815              		.loc 1 3059 24 view .LVU4625
 17816              	.LBE2923:
 17817              	.LBB2924:
3080:src/xeq.c     **** 			if (cmp < CONST_REG_BASE)
 17818              		.loc 1 3080 4 is_stmt 1 view .LVU4626
 17819 0146 0AA9     		add	r1, sp, #40
 17820 0148 0846     		mov	r0, r1
 17821 014a FFF7FEFF 		bl	decNumberRnd
 17822              	.LVL1351:
3081:src/xeq.c     **** 				decNumberRnd(&t, &t);
 17823              		.loc 1 3081 4 view .LVU4627
3081:src/xeq.c     **** 				decNumberRnd(&t, &t);
 17824              		.loc 1 3081 7 is_stmt 0 view .LVU4628
 17825 014e B8F5FA6F 		cmp	r8, #2000
 17826 0152 A7DA     		bge	.L1261
3082:src/xeq.c     **** 		}
 17827              		.loc 1 3082 5 is_stmt 1 view .LVU4629
 17828 0154 01A9     		add	r1, sp, #4
 17829 0156 0846     		mov	r0, r1
 17830 0158 FFF7FEFF 		bl	decNumberRnd
 17831              	.LVL1352:
 17832 015c A2E7     		b	.L1261
 17833              	.L1278:
 17834 015e 00BF     		.align	2
 17835              	.L1277:
 17836 0160 00000000 		.word	StateWhileOn
 17837 0164 00000000 		.word	PersistentRam
ARM GAS  /tmp/ccK8IvWa.s 			page 485


 17838              	.LBE2924:
 17839              		.cfi_endproc
 17840              	.LFE180:
 17842              		.section	.text.do_ztst,"ax",%progbits
 17843              		.align	1
 17844              		.p2align 2,,3
 17845              		.syntax unified
 17846              		.thumb
 17847              		.thumb_func
 17848              		.fpu fpv4-sp-d16
 17850              	do_ztst:
 17851              	.LVL1353:
 17852              	.LFB183:
3126:src/xeq.c     **** 	decNumber x, y;
 17853              		.loc 1 3126 79 view -0
 17854              		.cfi_startproc
 17855              		@ args = 0, pretend = 0, frame = 72
 17856              		@ frame_needed = 0, uses_anonymous_args = 0
3127:src/xeq.c     **** 
 17857              		.loc 1 3127 2 view .LVU4631
3129:src/xeq.c     **** 	if (is_intmode()) {
 17858              		.loc 1 3129 2 view .LVU4632
 17859              	.LBB2941:
 17860              	.LBI2941:
1132:src/xeq.c     **** 	process_cmdline();
 17861              		.loc 1 1132 6 view .LVU4633
 17862              	.LBB2942:
1133:src/xeq.c     **** 	set_lift();
 17863              		.loc 1 1133 2 view .LVU4634
 17864              	.LBE2942:
 17865              	.LBE2941:
3126:src/xeq.c     **** 	decNumber x, y;
 17866              		.loc 1 3126 79 is_stmt 0 view .LVU4635
 17867 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 17868              		.cfi_def_cfa_offset 24
 17869              		.cfi_offset 4, -24
 17870              		.cfi_offset 5, -20
 17871              		.cfi_offset 6, -16
 17872              		.cfi_offset 7, -12
 17873              		.cfi_offset 8, -8
 17874              		.cfi_offset 14, -4
 17875              	.LBB2952:
 17876              	.LBB2949:
 17877              	.LBB2943:
 17878              	.LBB2944:
 735:src/xeq.c     **** }
 17879              		.loc 1 735 23 view .LVU4636
 17880 0004 2B4D     		ldr	r5, .L1293
 17881              	.LBE2944:
 17882              	.LBE2943:
 17883              	.LBE2949:
 17884              	.LBE2952:
3130:src/xeq.c     **** 		bad_mode_error();
 17885              		.loc 1 3130 6 view .LVU4637
 17886 0006 2C4E     		ldr	r6, .L1293+4
3126:src/xeq.c     **** 	decNumber x, y;
 17887              		.loc 1 3126 79 view .LVU4638
ARM GAS  /tmp/ccK8IvWa.s 			page 486


 17888 0008 92B0     		sub	sp, sp, #72
 17889              		.cfi_def_cfa_offset 96
3126:src/xeq.c     **** 	decNumber x, y;
 17890              		.loc 1 3126 79 view .LVU4639
 17891 000a 0446     		mov	r4, r0
 17892 000c 0F46     		mov	r7, r1
 17893 000e 9046     		mov	r8, r2
 17894              	.LBB2953:
 17895              	.LBB2950:
1133:src/xeq.c     **** 	set_lift();
 17896              		.loc 1 1133 2 view .LVU4640
 17897 0010 FFF7FEFF 		bl	process_cmdline
 17898              	.LVL1354:
1134:src/xeq.c     **** }
 17899              		.loc 1 1134 2 is_stmt 1 view .LVU4641
 17900              	.LBB2947:
 17901              	.LBI2943:
 734:src/xeq.c     ****     State2.state_lift = 1;
 17902              		.loc 1 734 6 view .LVU4642
 17903              	.LBB2945:
 735:src/xeq.c     **** }
 17904              		.loc 1 735 5 view .LVU4643
 735:src/xeq.c     **** }
 17905              		.loc 1 735 23 is_stmt 0 view .LVU4644
 17906 0014 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 17907              	.LBE2945:
 17908              	.LBE2947:
 17909              	.LBE2950:
 17910              	.LBE2953:
3130:src/xeq.c     **** 		bad_mode_error();
 17911              		.loc 1 3130 6 view .LVU4645
 17912 0016 96F8E867 		ldrb	r6, [r6, #2024]	@ zero_extendqisi2
 17913              	.LBB2954:
 17914              	.LBB2951:
 17915              	.LBB2948:
 17916              	.LBB2946:
 735:src/xeq.c     **** }
 17917              		.loc 1 735 23 view .LVU4646
 17918 001a 43F04003 		orr	r3, r3, #64
 17919 001e EB75     		strb	r3, [r5, #23]
 17920              	.LBE2946:
 17921              	.LBE2948:
 17922              	.LBE2951:
 17923              	.LBE2954:
3130:src/xeq.c     **** 		bad_mode_error();
 17924              		.loc 1 3130 2 is_stmt 1 view .LVU4647
3130:src/xeq.c     **** 		bad_mode_error();
 17925              		.loc 1 3130 5 is_stmt 0 view .LVU4648
 17926 0020 F307     		lsls	r3, r6, #31
 17927 0022 07D5     		bpl	.L1280
3131:src/xeq.c     **** 		return;
 17928              		.loc 1 3131 3 is_stmt 1 view .LVU4649
 17929              	.LBB2955:
 17930              	.LBI2955:
 552:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 17931              		.loc 1 552 6 view .LVU4650
 17932              	.LBE2955:
ARM GAS  /tmp/ccK8IvWa.s 			page 487


 553:src/xeq.c     **** }
 17933              		.loc 1 553 2 view .LVU4651
 17934              	.LVL1355:
 17935              	.LBB2960:
 17936              	.LBB2956:
 17937              	.LBI2956:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 17938              		.loc 1 523 5 view .LVU4652
 17939              	.LBB2957:
 524:src/xeq.c     **** 		Error = e;
 17940              		.loc 1 524 2 view .LVU4653
 524:src/xeq.c     **** 		Error = e;
 17941              		.loc 1 524 12 is_stmt 0 view .LVU4654
 17942 0024 254B     		ldr	r3, .L1293+8
 524:src/xeq.c     **** 		Error = e;
 17943              		.loc 1 524 5 view .LVU4655
 17944 0026 1A68     		ldr	r2, [r3]
 17945 0028 0AB9     		cbnz	r2, .L1279
 17946              	.LVL1356:
 17947              	.LBB2958:
 17948              	.LBI2958:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 17949              		.loc 1 523 5 is_stmt 1 view .LVU4656
 17950              	.LBB2959:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 17951              		.loc 1 525 3 view .LVU4657
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 17952              		.loc 1 525 9 is_stmt 0 view .LVU4658
 17953 002a 0D22     		movs	r2, #13
 17954 002c 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 17955              		.loc 1 526 3 is_stmt 1 view .LVU4659
 17956              	.LVL1357:
 17957              	.L1279:
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 17958              		.loc 1 526 3 is_stmt 0 view .LVU4660
 17959              	.LBE2959:
 17960              	.LBE2958:
 17961              	.LBE2957:
 17962              	.LBE2956:
 17963              	.LBE2960:
3140:src/xeq.c     **** 
 17964              		.loc 1 3140 1 view .LVU4661
 17965 002e 12B0     		add	sp, sp, #72
 17966              		.cfi_remember_state
 17967              		.cfi_def_cfa_offset 24
 17968              		@ sp needed
 17969 0030 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 17970              	.LVL1358:
 17971              	.L1280:
 17972              		.cfi_restore_state
3134:src/xeq.c     **** 	if (decNumberIsNaN(&x) || decNumberIsNaN(&y) || decNumberIsNaN(re) || decNumberIsNaN(im)) {
 17973              		.loc 1 3134 2 is_stmt 1 view .LVU4662
 17974              	.LBB2961:
 17975              	.LBI2961:
 821:src/xeq.c     **** 	getX(x);
 17976              		.loc 1 821 6 view .LVU4663
ARM GAS  /tmp/ccK8IvWa.s 			page 488


 17977              	.LBE2961:
 822:src/xeq.c     **** 	getY(y);
 17978              		.loc 1 822 2 view .LVU4664
 17979              	.LBB2966:
 17980              	.LBB2962:
 17981              	.LBI2962:
 791:src/xeq.c     **** 	return getRegister(x, regX_idx);
 17982              		.loc 1 791 12 view .LVU4665
 17983              	.LBB2963:
 792:src/xeq.c     **** }
 17984              		.loc 1 792 2 view .LVU4666
 792:src/xeq.c     **** }
 17985              		.loc 1 792 9 is_stmt 0 view .LVU4667
 17986 0034 6421     		movs	r1, #100
 17987 0036 6846     		mov	r0, sp
 17988 0038 FFF7FEFF 		bl	getRegister
 17989              	.LVL1359:
 792:src/xeq.c     **** }
 17990              		.loc 1 792 9 view .LVU4668
 17991              	.LBE2963:
 17992              	.LBE2962:
 17993              	.LBE2966:
 823:src/xeq.c     **** }
 17994              		.loc 1 823 2 is_stmt 1 view .LVU4669
 17995              	.LBB2967:
 17996              	.LBB2964:
 17997              	.LBI2964:
 799:src/xeq.c     **** 	getRegister(y, regY_idx);
 17998              		.loc 1 799 6 view .LVU4670
 17999              	.LBB2965:
 800:src/xeq.c     **** }
 18000              		.loc 1 800 2 view .LVU4671
 18001 003c 09A8     		add	r0, sp, #36
 18002              	.LVL1360:
 800:src/xeq.c     **** }
 18003              		.loc 1 800 2 is_stmt 0 view .LVU4672
 18004 003e 6521     		movs	r1, #101
 18005 0040 FFF7FEFF 		bl	getRegister
 18006              	.LVL1361:
 800:src/xeq.c     **** }
 18007              		.loc 1 800 2 view .LVU4673
 18008              	.LBE2965:
 18009              	.LBE2964:
 18010              	.LBE2967:
3135:src/xeq.c     **** 		fin_tst(0);
 18011              		.loc 1 3135 2 is_stmt 1 view .LVU4674
3135:src/xeq.c     **** 		fin_tst(0);
 18012              		.loc 1 3135 25 is_stmt 0 view .LVU4675
 18013 0044 9DF80830 		ldrb	r3, [sp, #8]	@ zero_extendqisi2
 18014 0048 9DF82C20 		ldrb	r2, [sp, #44]	@ zero_extendqisi2
 18015 004c 1343     		orrs	r3, r3, r2
 18016 004e 13F0300F 		tst	r3, #48
 18017 0052 15D1     		bne	.L1282
3135:src/xeq.c     **** 		fin_tst(0);
 18018              		.loc 1 3135 47 discriminator 2 view .LVU4676
 18019 0054 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 18020 0056 13F0300F 		tst	r3, #48
ARM GAS  /tmp/ccK8IvWa.s 			page 489


 18021 005a 11D1     		bne	.L1282
3135:src/xeq.c     **** 		fin_tst(0);
 18022              		.loc 1 3135 69 discriminator 3 view .LVU4677
 18023 005c 3B7A     		ldrb	r3, [r7, #8]	@ zero_extendqisi2
 18024 005e 13F0300F 		tst	r3, #48
 18025 0062 0DD1     		bne	.L1282
3139:src/xeq.c     **** }
 18026              		.loc 1 3139 2 is_stmt 1 view .LVU4678
3139:src/xeq.c     **** }
 18027              		.loc 1 3139 29 is_stmt 0 view .LVU4679
 18028 0064 2146     		mov	r1, r4
 18029 0066 6846     		mov	r0, sp
 18030 0068 FFF7FEFF 		bl	dn_eq
 18031              	.LVL1362:
3139:src/xeq.c     **** }
 18032              		.loc 1 3139 25 view .LVU4680
 18033 006c B8F10008 		subs	r8, r8, #0
 18034 0070 18BF     		it	ne
 18035 0072 4FF00108 		movne	r8, #1
3139:src/xeq.c     **** }
 18036              		.loc 1 3139 43 view .LVU4681
 18037 0076 A0B9     		cbnz	r0, .L1291
 18038              	.L1285:
3139:src/xeq.c     **** }
 18039              		.loc 1 3139 2 discriminator 6 view .LVU4682
 18040 0078 4046     		mov	r0, r8
 18041 007a FFF7FEFF 		bl	fin_tst
 18042              	.LVL1363:
 18043 007e D6E7     		b	.L1279
 18044              	.L1282:
3136:src/xeq.c     **** 		return;
 18045              		.loc 1 3136 3 is_stmt 1 view .LVU4683
 18046              	.LVL1364:
 18047              	.LBB2968:
 18048              	.LBI2968:
2324:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 18049              		.loc 1 2324 6 view .LVU4684
 18050              	.LBB2969:
2325:src/xeq.c     **** 	if (Running || XromRunning) {
 18051              		.loc 1 2325 2 view .LVU4685
2326:src/xeq.c     **** 		if (! a && incpc())
 18052              		.loc 1 2326 2 view .LVU4686
2326:src/xeq.c     **** 		if (! a && incpc())
 18053              		.loc 1 2326 6 is_stmt 0 view .LVU4687
 18054 0080 0F4A     		ldr	r2, .L1293+12
2326:src/xeq.c     **** 		if (! a && incpc())
 18055              		.loc 1 2326 14 view .LVU4688
 18056 0082 104B     		ldr	r3, .L1293+16
 18057 0084 1268     		ldr	r2, [r2]
 18058 0086 1B68     		ldr	r3, [r3]
 18059 0088 1343     		orrs	r3, r2, r3
 18060 008a 05D1     		bne	.L1292
2331:src/xeq.c     **** #ifdef INFRARED
 18061              		.loc 1 2331 3 is_stmt 1 view .LVU4689
2331:src/xeq.c     **** #ifdef INFRARED
 18062              		.loc 1 2331 11 is_stmt 0 view .LVU4690
 18063 008c 0E4B     		ldr	r3, .L1293+20
ARM GAS  /tmp/ccK8IvWa.s 			page 490


 18064 008e 0F4A     		ldr	r2, .L1293+24
 18065 0090 1A60     		str	r2, [r3]
 18066              	.LBE2969:
 18067              	.LBE2968:
3140:src/xeq.c     **** 
 18068              		.loc 1 3140 1 view .LVU4691
 18069 0092 12B0     		add	sp, sp, #72
 18070              		.cfi_remember_state
 18071              		.cfi_def_cfa_offset 24
 18072              		@ sp needed
 18073 0094 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 18074              	.LVL1365:
 18075              	.L1292:
 18076              		.cfi_restore_state
 18077              	.LBB2971:
 18078              	.LBB2970:
2327:src/xeq.c     **** 			decpc();
 18079              		.loc 1 2327 3 is_stmt 1 view .LVU4692
 18080 0098 FFF7FEFF 		bl	fin_tst.part.0
 18081              	.LVL1366:
 18082              	.LBE2970:
 18083              	.LBE2971:
3140:src/xeq.c     **** 
 18084              		.loc 1 3140 1 is_stmt 0 view .LVU4693
 18085 009c 12B0     		add	sp, sp, #72
 18086              		.cfi_remember_state
 18087              		.cfi_def_cfa_offset 24
 18088              		@ sp needed
 18089 009e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 18090              	.LVL1367:
 18091              	.L1291:
 18092              		.cfi_restore_state
3139:src/xeq.c     **** }
 18093              		.loc 1 3139 46 discriminator 1 view .LVU4694
 18094 00a2 3946     		mov	r1, r7
 18095 00a4 09A8     		add	r0, sp, #36
 18096 00a6 FFF7FEFF 		bl	dn_eq
 18097              	.LVL1368:
 18098 00aa 0028     		cmp	r0, #0
 18099 00ac 18BF     		it	ne
 18100 00ae 88F00108 		eorne	r8, r8, #1
 18101 00b2 E1E7     		b	.L1285
 18102              	.L1294:
 18103              		.align	2
 18104              	.L1293:
 18105 00b4 00000000 		.word	StateWhileOn
 18106 00b8 00000000 		.word	PersistentRam
 18107 00bc 00000000 		.word	Error
 18108 00c0 00000000 		.word	Running
 18109 00c4 00000000 		.word	XromRunning
 18110 00c8 00000000 		.word	DispMsg
 18111 00cc 00000000 		.word	.LC3
 18112              		.cfi_endproc
 18113              	.LFE183:
 18115              		.section	.text.check_zero,"ax",%progbits
 18116              		.align	1
 18117              		.p2align 2,,3
ARM GAS  /tmp/ccK8IvWa.s 			page 491


 18118              		.global	check_zero
 18119              		.syntax unified
 18120              		.thumb
 18121              		.thumb_func
 18122              		.fpu fpv4-sp-d16
 18124              	check_zero:
 18125              	.LVL1369:
 18126              	.LFB181:
3103:src/xeq.c     **** 	int neg;
 18127              		.loc 1 3103 32 is_stmt 1 view -0
 18128              		.cfi_startproc
 18129              		@ args = 0, pretend = 0, frame = 40
 18130              		@ frame_needed = 0, uses_anonymous_args = 0
3104:src/xeq.c     **** 	int zero;
 18131              		.loc 1 3104 2 view .LVU4696
3105:src/xeq.c     **** 
 18132              		.loc 1 3105 2 view .LVU4697
3107:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 18133              		.loc 1 3107 2 view .LVU4698
3103:src/xeq.c     **** 	int neg;
 18134              		.loc 1 3103 32 is_stmt 0 view .LVU4699
 18135 0000 10B5     		push	{r4, lr}
 18136              		.cfi_def_cfa_offset 8
 18137              		.cfi_offset 4, -8
 18138              		.cfi_offset 14, -4
3107:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 18139              		.loc 1 3107 6 view .LVU4700
 18140 0002 1A4B     		ldr	r3, .L1310
 18141 0004 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3107:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 18142              		.loc 1 3107 5 view .LVU4701
 18143 0008 DB07     		lsls	r3, r3, #31
3103:src/xeq.c     **** 	int neg;
 18144              		.loc 1 3103 32 view .LVU4702
 18145 000a 8AB0     		sub	sp, sp, #40
 18146              		.cfi_def_cfa_offset 48
3103:src/xeq.c     **** 	int neg;
 18147              		.loc 1 3103 32 view .LVU4703
 18148 000c 0446     		mov	r4, r0
3107:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 18149              		.loc 1 3107 5 view .LVU4704
 18150 000e 15D5     		bpl	.L1296
 18151              	.LBB2972:
3108:src/xeq.c     **** 		zero = (xv == 0);
 18152              		.loc 1 3108 3 is_stmt 1 view .LVU4705
 18153              	.LBB2973:
 18154              	.LBI2973:
1242:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 18155              		.loc 1 1242 15 view .LVU4706
 18156              	.LBB2974:
1243:src/xeq.c     **** }
 18157              		.loc 1 1243 2 view .LVU4707
1243:src/xeq.c     **** }
 18158              		.loc 1 1243 9 is_stmt 0 view .LVU4708
 18159 0010 6420     		movs	r0, #100
 18160              	.LVL1370:
1243:src/xeq.c     **** }
ARM GAS  /tmp/ccK8IvWa.s 			page 492


 18161              		.loc 1 1243 9 view .LVU4709
 18162 0012 FFF7FEFF 		bl	get_reg_n_int
 18163              	.LVL1371:
 18164              	.LBE2974:
 18165              	.LBE2973:
3108:src/xeq.c     **** 		zero = (xv == 0);
 18166              		.loc 1 3108 37 view .LVU4710
 18167 0016 6A46     		mov	r2, sp
 18168 0018 FFF7FEFF 		bl	extract_value
 18169              	.LVL1372:
3109:src/xeq.c     **** 	} else {
 18170              		.loc 1 3109 3 is_stmt 1 view .LVU4711
3109:src/xeq.c     **** 	} else {
 18171              		.loc 1 3109 14 is_stmt 0 view .LVU4712
 18172 001c 50EA0103 		orrs	r3, r0, r1
 18173 0020 0CBF     		ite	eq
 18174 0022 0120     		moveq	r0, #1
 18175              	.LVL1373:
3109:src/xeq.c     **** 	} else {
 18176              		.loc 1 3109 14 view .LVU4713
 18177 0024 0020     		movne	r0, #0
 18178              	.LVL1374:
3109:src/xeq.c     **** 	} else {
 18179              		.loc 1 3109 14 view .LVU4714
 18180              	.LBE2972:
3116:src/xeq.c     **** 		fin_tst(zero && !neg);
 18181              		.loc 1 3116 2 is_stmt 1 view .LVU4715
3116:src/xeq.c     **** 		fin_tst(zero && !neg);
 18182              		.loc 1 3116 5 is_stmt 0 view .LVU4716
 18183 0026 A12C     		cmp	r4, #161
 18184 0028 15D0     		beq	.L1309
 18185              	.L1298:
3119:src/xeq.c     **** }
 18186              		.loc 1 3119 3 is_stmt 1 view .LVU4717
 18187 002a 18B1     		cbz	r0, .L1301
3119:src/xeq.c     **** }
 18188              		.loc 1 3119 3 is_stmt 0 discriminator 1 view .LVU4718
 18189 002c 0098     		ldr	r0, [sp]
 18190              	.LVL1375:
3119:src/xeq.c     **** }
 18191              		.loc 1 3119 3 discriminator 1 view .LVU4719
 18192 002e 0038     		subs	r0, r0, #0
 18193 0030 18BF     		it	ne
 18194 0032 0120     		movne	r0, #1
 18195              	.L1301:
3119:src/xeq.c     **** }
 18196              		.loc 1 3119 3 discriminator 6 view .LVU4720
 18197 0034 FFF7FEFF 		bl	fin_tst
 18198              	.LVL1376:
3120:src/xeq.c     **** 
 18199              		.loc 1 3120 1 discriminator 6 view .LVU4721
 18200 0038 0AB0     		add	sp, sp, #40
 18201              		.cfi_remember_state
 18202              		.cfi_def_cfa_offset 8
 18203              		@ sp needed
 18204 003a 10BD     		pop	{r4, pc}
 18205              	.LVL1377:
ARM GAS  /tmp/ccK8IvWa.s 			page 493


 18206              	.L1296:
 18207              		.cfi_restore_state
 18208              	.LBB2975:
3111:src/xeq.c     **** 		getX(&x);
 18209              		.loc 1 3111 3 is_stmt 1 view .LVU4722
3112:src/xeq.c     **** 		neg = decNumberIsNegative(&x);
 18210              		.loc 1 3112 3 view .LVU4723
 18211              	.LBB2976:
 18212              	.LBI2976:
 791:src/xeq.c     **** 	return getRegister(x, regX_idx);
 18213              		.loc 1 791 12 view .LVU4724
 18214              	.LBB2977:
 792:src/xeq.c     **** }
 18215              		.loc 1 792 2 view .LVU4725
 792:src/xeq.c     **** }
 18216              		.loc 1 792 9 is_stmt 0 view .LVU4726
 18217 003c 6421     		movs	r1, #100
 18218 003e 01A8     		add	r0, sp, #4
 18219              	.LVL1378:
 792:src/xeq.c     **** }
 18220              		.loc 1 792 9 view .LVU4727
 18221 0040 FFF7FEFF 		bl	getRegister
 18222              	.LVL1379:
 792:src/xeq.c     **** }
 18223              		.loc 1 792 9 view .LVU4728
 18224              	.LBE2977:
 18225              	.LBE2976:
3113:src/xeq.c     **** 		zero = dn_eq0(&x);
 18226              		.loc 1 3113 3 is_stmt 1 view .LVU4729
3113:src/xeq.c     **** 		zero = dn_eq0(&x);
 18227              		.loc 1 3113 9 is_stmt 0 view .LVU4730
 18228 0044 9DF90C30 		ldrsb	r3, [sp, #12]
3114:src/xeq.c     **** 	}
 18229              		.loc 1 3114 10 view .LVU4731
 18230 0048 01A8     		add	r0, sp, #4
3113:src/xeq.c     **** 		zero = dn_eq0(&x);
 18231              		.loc 1 3113 9 view .LVU4732
 18232 004a DB0F     		lsrs	r3, r3, #31
3113:src/xeq.c     **** 		zero = dn_eq0(&x);
 18233              		.loc 1 3113 7 view .LVU4733
 18234 004c 0093     		str	r3, [sp]
3114:src/xeq.c     **** 	}
 18235              		.loc 1 3114 3 is_stmt 1 view .LVU4734
3114:src/xeq.c     **** 	}
 18236              		.loc 1 3114 10 is_stmt 0 view .LVU4735
 18237 004e FFF7FEFF 		bl	dn_eq0
 18238              	.LVL1380:
3114:src/xeq.c     **** 	}
 18239              		.loc 1 3114 10 view .LVU4736
 18240              	.LBE2975:
3116:src/xeq.c     **** 		fin_tst(zero && !neg);
 18241              		.loc 1 3116 2 is_stmt 1 view .LVU4737
3116:src/xeq.c     **** 		fin_tst(zero && !neg);
 18242              		.loc 1 3116 5 is_stmt 0 view .LVU4738
 18243 0052 A12C     		cmp	r4, #161
 18244 0054 E9D1     		bne	.L1298
 18245              	.L1309:
ARM GAS  /tmp/ccK8IvWa.s 			page 494


3117:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
 18246              		.loc 1 3117 3 is_stmt 1 view .LVU4739
 18247 0056 0028     		cmp	r0, #0
 18248 0058 ECD0     		beq	.L1301
3117:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
 18249              		.loc 1 3117 3 is_stmt 0 discriminator 1 view .LVU4740
 18250 005a 0098     		ldr	r0, [sp]
 18251              	.LVL1381:
3117:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
 18252              		.loc 1 3117 3 discriminator 1 view .LVU4741
 18253 005c B0FA80F0 		clz	r0, r0
 18254 0060 4009     		lsrs	r0, r0, #5
3119:src/xeq.c     **** }
 18255              		.loc 1 3119 3 discriminator 1 view .LVU4742
 18256 0062 FFF7FEFF 		bl	fin_tst
 18257              	.LVL1382:
3120:src/xeq.c     **** 
 18258              		.loc 1 3120 1 discriminator 1 view .LVU4743
 18259 0066 0AB0     		add	sp, sp, #40
 18260              		.cfi_def_cfa_offset 8
 18261              		@ sp needed
 18262 0068 10BD     		pop	{r4, pc}
 18263              	.L1311:
 18264 006a 00BF     		.align	2
 18265              	.L1310:
 18266 006c 00000000 		.word	PersistentRam
 18267              		.cfi_endproc
 18268              	.LFE181:
 18270              		.section	.text.cmdtest,"ax",%progbits
 18271              		.align	1
 18272              		.p2align 2,,3
 18273              		.global	cmdtest
 18274              		.syntax unified
 18275              		.thumb
 18276              		.thumb_func
 18277              		.fpu fpv4-sp-d16
 18279              	cmdtest:
 18280              	.LVL1383:
 18281              	.LFB182:
3122:src/xeq.c     **** 	do_tst(arg, (enum tst_op)(op - RARG_TEST_EQ));
 18282              		.loc 1 3122 46 is_stmt 1 view -0
 18283              		.cfi_startproc
 18284              		@ args = 0, pretend = 0, frame = 0
 18285              		@ frame_needed = 0, uses_anonymous_args = 0
 18286              		@ link register save eliminated.
3123:src/xeq.c     **** }
 18287              		.loc 1 3123 2 view .LVU4745
3123:src/xeq.c     **** }
 18288              		.loc 1 3123 31 is_stmt 0 view .LVU4746
 18289 0000 2D39     		subs	r1, r1, #45
 18290              	.LVL1384:
3123:src/xeq.c     **** }
 18291              		.loc 1 3123 2 view .LVU4747
 18292 0002 C9B2     		uxtb	r1, r1
 18293 0004 FFF7FEBF 		b	do_tst
 18294              	.LVL1385:
3123:src/xeq.c     **** }
ARM GAS  /tmp/ccK8IvWa.s 			page 495


 18295              		.loc 1 3123 2 view .LVU4748
 18296              		.cfi_endproc
 18297              	.LFE182:
 18299              		.section	.text.cmdztest,"ax",%progbits
 18300              		.align	1
 18301              		.p2align 2,,3
 18302              		.global	cmdztest
 18303              		.syntax unified
 18304              		.thumb
 18305              		.thumb_func
 18306              		.fpu fpv4-sp-d16
 18308              	cmdztest:
 18309              	.LVL1386:
 18310              	.LFB184:
3142:src/xeq.c     **** 	decNumber re, im;
 18311              		.loc 1 3142 47 is_stmt 1 view -0
 18312              		.cfi_startproc
 18313              		@ args = 0, pretend = 0, frame = 72
 18314              		@ frame_needed = 0, uses_anonymous_args = 0
3143:src/xeq.c     **** 	getRegister(&re, arg);
 18315              		.loc 1 3143 2 view .LVU4750
3144:src/xeq.c     **** 	getRegister(&im, arg + 1);
 18316              		.loc 1 3144 2 view .LVU4751
3142:src/xeq.c     **** 	decNumber re, im;
 18317              		.loc 1 3142 47 is_stmt 0 view .LVU4752
 18318 0000 30B5     		push	{r4, r5, lr}
 18319              		.cfi_def_cfa_offset 12
 18320              		.cfi_offset 4, -12
 18321              		.cfi_offset 5, -8
 18322              		.cfi_offset 14, -4
 18323 0002 0546     		mov	r5, r0
 18324 0004 93B0     		sub	sp, sp, #76
 18325              		.cfi_def_cfa_offset 88
3142:src/xeq.c     **** 	decNumber re, im;
 18326              		.loc 1 3142 47 view .LVU4753
 18327 0006 0C46     		mov	r4, r1
3144:src/xeq.c     **** 	getRegister(&im, arg + 1);
 18328              		.loc 1 3144 2 view .LVU4754
 18329 0008 6846     		mov	r0, sp
 18330              	.LVL1387:
3144:src/xeq.c     **** 	getRegister(&im, arg + 1);
 18331              		.loc 1 3144 2 view .LVU4755
 18332 000a 2946     		mov	r1, r5
 18333              	.LVL1388:
3144:src/xeq.c     **** 	getRegister(&im, arg + 1);
 18334              		.loc 1 3144 2 view .LVU4756
 18335 000c FFF7FEFF 		bl	getRegister
 18336              	.LVL1389:
3145:src/xeq.c     **** 	do_ztst(&re, &im, (enum tst_op)(op - RARG_TEST_ZEQ));
 18337              		.loc 1 3145 2 is_stmt 1 view .LVU4757
 18338 0010 691C     		adds	r1, r5, #1
 18339 0012 09A8     		add	r0, sp, #36
 18340 0014 FFF7FEFF 		bl	getRegister
 18341              	.LVL1390:
3146:src/xeq.c     **** }
 18342              		.loc 1 3146 2 view .LVU4758
3146:src/xeq.c     **** }
ARM GAS  /tmp/ccK8IvWa.s 			page 496


 18343              		.loc 1 3146 37 is_stmt 0 view .LVU4759
 18344 0018 A4F13402 		sub	r2, r4, #52
3146:src/xeq.c     **** }
 18345              		.loc 1 3146 2 view .LVU4760
 18346 001c D2B2     		uxtb	r2, r2
 18347 001e 09A9     		add	r1, sp, #36
 18348 0020 6846     		mov	r0, sp
 18349 0022 FFF7FEFF 		bl	do_ztst
 18350              	.LVL1391:
3147:src/xeq.c     **** 
 18351              		.loc 1 3147 1 view .LVU4761
 18352 0026 13B0     		add	sp, sp, #76
 18353              		.cfi_def_cfa_offset 12
 18354              		@ sp needed
 18355 0028 30BD     		pop	{r4, r5, pc}
3147:src/xeq.c     **** 
 18356              		.loc 1 3147 1 view .LVU4762
 18357              		.cfi_endproc
 18358              	.LFE184:
 18360 002a 00BF     		.section	.text.cmdlincdec,"ax",%progbits
 18361              		.align	1
 18362              		.p2align 2,,3
 18363              		.global	cmdlincdec
 18364              		.syntax unified
 18365              		.thumb
 18366              		.thumb_func
 18367              		.fpu fpv4-sp-d16
 18369              	cmdlincdec:
 18370              	.LVL1392:
 18371              	.LFB186:
3177:src/xeq.c     **** 	incdec(arg, op == RARG_INC);
 18372              		.loc 1 3177 49 is_stmt 1 view -0
 18373              		.cfi_startproc
 18374              		@ args = 0, pretend = 0, frame = 0
 18375              		@ frame_needed = 0, uses_anonymous_args = 0
 18376              		@ link register save eliminated.
3178:src/xeq.c     **** }
 18377              		.loc 1 3178 2 view .LVU4764
 18378 0000 A1F14101 		sub	r1, #65
 18379              	.LVL1393:
3178:src/xeq.c     **** }
 18380              		.loc 1 3178 2 is_stmt 0 view .LVU4765
 18381 0004 B1FA81F1 		clz	r1, r1
 18382 0008 4909     		lsrs	r1, r1, #5
 18383 000a FFF7FEBF 		b	incdec
 18384              	.LVL1394:
3178:src/xeq.c     **** }
 18385              		.loc 1 3178 2 view .LVU4766
 18386              		.cfi_endproc
 18387              	.LFE186:
 18389 000e 00BF     		.section	.text.cmdloopz,"ax",%progbits
 18390              		.align	1
 18391              		.p2align 2,,3
 18392              		.global	cmdloopz
 18393              		.syntax unified
 18394              		.thumb
 18395              		.thumb_func
ARM GAS  /tmp/ccK8IvWa.s 			page 497


 18396              		.fpu fpv4-sp-d16
 18398              	cmdloopz:
 18399              	.LVL1395:
 18400              	.LFB187:
3181:src/xeq.c     **** 	fin_tst(incdec(arg, op == RARG_ISZ));
 18401              		.loc 1 3181 47 is_stmt 1 view -0
 18402              		.cfi_startproc
 18403              		@ args = 0, pretend = 0, frame = 0
 18404              		@ frame_needed = 0, uses_anonymous_args = 0
3182:src/xeq.c     **** }
 18405              		.loc 1 3182 2 view .LVU4768
3181:src/xeq.c     **** 	fin_tst(incdec(arg, op == RARG_ISZ));
 18406              		.loc 1 3181 47 is_stmt 0 view .LVU4769
 18407 0000 08B5     		push	{r3, lr}
 18408              		.cfi_def_cfa_offset 8
 18409              		.cfi_offset 3, -8
 18410              		.cfi_offset 14, -4
3182:src/xeq.c     **** }
 18411              		.loc 1 3182 2 view .LVU4770
 18412 0002 A1F13F01 		sub	r1, #63
 18413              	.LVL1396:
3182:src/xeq.c     **** }
 18414              		.loc 1 3182 2 view .LVU4771
 18415 0006 B1FA81F1 		clz	r1, r1
 18416 000a 4909     		lsrs	r1, r1, #5
 18417 000c FFF7FEFF 		bl	incdec
 18418              	.LVL1397:
3183:src/xeq.c     **** 
 18419              		.loc 1 3183 1 view .LVU4772
 18420 0010 BDE80840 		pop	{r3, lr}
 18421              		.cfi_restore 14
 18422              		.cfi_restore 3
 18423              		.cfi_def_cfa_offset 0
3182:src/xeq.c     **** }
 18424              		.loc 1 3182 2 view .LVU4773
 18425 0014 FFF7FEBF 		b	fin_tst
 18426              	.LVL1398:
 18427              		.cfi_endproc
 18428              	.LFE187:
 18430              		.section	.text.cmdloop,"ax",%progbits
 18431              		.align	1
 18432              		.p2align 2,,3
 18433              		.global	cmdloop
 18434              		.syntax unified
 18435              		.thumb
 18436              		.thumb_func
 18437              		.fpu fpv4-sp-d16
 18439              	cmdloop:
 18440              	.LVL1399:
 18441              	.LFB188:
3185:src/xeq.c     **** 	if (is_intmode()) {
 18442              		.loc 1 3185 46 is_stmt 1 view -0
 18443              		.cfi_startproc
 18444              		@ args = 0, pretend = 0, frame = 184
 18445              		@ frame_needed = 0, uses_anonymous_args = 0
3186:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 18446              		.loc 1 3186 2 view .LVU4775
ARM GAS  /tmp/ccK8IvWa.s 			page 498


3185:src/xeq.c     **** 	if (is_intmode()) {
 18447              		.loc 1 3185 46 is_stmt 0 view .LVU4776
 18448 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 18449              		.cfi_def_cfa_offset 20
 18450              		.cfi_offset 4, -20
 18451              		.cfi_offset 5, -16
 18452              		.cfi_offset 6, -12
 18453              		.cfi_offset 7, -8
 18454              		.cfi_offset 14, -4
3186:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 18455              		.loc 1 3186 6 view .LVU4777
 18456 0002 7B4B     		ldr	r3, .L1358
 18457 0004 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3186:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 18458              		.loc 1 3186 5 view .LVU4778
 18459 0008 DB07     		lsls	r3, r3, #31
3185:src/xeq.c     **** 	if (is_intmode()) {
 18460              		.loc 1 3185 46 view .LVU4779
 18461 000a AFB0     		sub	sp, sp, #188
 18462              		.cfi_def_cfa_offset 208
3185:src/xeq.c     **** 	if (is_intmode()) {
 18463              		.loc 1 3185 46 view .LVU4780
 18464 000c 0C46     		mov	r4, r1
 18465 000e 0546     		mov	r5, r0
3186:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 18466              		.loc 1 3186 5 view .LVU4781
 18467 0010 7BD4     		bmi	.L1350
 18468              	.LBB2978:
3208:src/xeq.c     **** 
 18469              		.loc 1 3208 3 is_stmt 1 view .LVU4782
3210:src/xeq.c     **** 
 18470              		.loc 1 3210 3 view .LVU4783
 18471 0012 2946     		mov	r1, r5
 18472              	.LVL1400:
3210:src/xeq.c     **** 
 18473              		.loc 1 3210 3 is_stmt 0 view .LVU4784
 18474 0014 6846     		mov	r0, sp
 18475              	.LVL1401:
3210:src/xeq.c     **** 
 18476              		.loc 1 3210 3 view .LVU4785
 18477 0016 FFF7FEFF 		bl	getRegister
 18478              	.LVL1402:
3214:src/xeq.c     **** 		decNumberTrunc(&n, &f);			// n = nnnnn
 18479              		.loc 1 3214 3 is_stmt 1 view .LVU4786
 18480 001a 6946     		mov	r1, sp
 18481 001c 12A8     		add	r0, sp, #72
 18482 001e FFF7FEFF 		bl	dn_abs
 18483              	.LVL1403:
3215:src/xeq.c     **** 		dn_subtract(&u, &f, &n);		// u = .fffii
 18484              		.loc 1 3215 3 view .LVU4787
 18485 0022 12A9     		add	r1, sp, #72
 18486 0024 1BA8     		add	r0, sp, #108
 18487 0026 FFF7FEFF 		bl	decNumberTrunc
 18488              	.LVL1404:
3216:src/xeq.c     **** 		if (decNumberIsNegative(&x))
 18489              		.loc 1 3216 3 view .LVU4788
 18490 002a 1BAA     		add	r2, sp, #108
ARM GAS  /tmp/ccK8IvWa.s 			page 499


 18491 002c 12A9     		add	r1, sp, #72
 18492 002e 24A8     		add	r0, sp, #144
 18493 0030 FFF7FEFF 		bl	dn_subtract
 18494              	.LVL1405:
3217:src/xeq.c     **** 			dn_minus(&n, &n);
 18495              		.loc 1 3217 3 view .LVU4789
3217:src/xeq.c     **** 			dn_minus(&n, &n);
 18496              		.loc 1 3217 6 is_stmt 0 view .LVU4790
 18497 0034 9DF90830 		ldrsb	r3, [sp, #8]
 18498 0038 002B     		cmp	r3, #0
 18499 003a C0F29080 		blt	.L1351
 18500              	.L1328:
3219:src/xeq.c     **** 		decNumberTrunc(&f, &i);			// f = fff
 18501              		.loc 1 3219 3 is_stmt 1 view .LVU4791
 18502 003e 0322     		movs	r2, #3
 18503 0040 24A9     		add	r1, sp, #144
 18504 0042 09A8     		add	r0, sp, #36
 18505 0044 FFF7FEFF 		bl	dn_mulpow10
 18506              	.LVL1406:
3220:src/xeq.c     **** 		dn_subtract(&i, &i, &f);		// i = .ii
 18507              		.loc 1 3220 3 view .LVU4792
 18508 0048 09A9     		add	r1, sp, #36
 18509 004a 12A8     		add	r0, sp, #72
 18510 004c FFF7FEFF 		bl	decNumberTrunc
 18511              	.LVL1407:
3221:src/xeq.c     **** 		dn_mul100(&x, &i);
 18512              		.loc 1 3221 3 view .LVU4793
 18513 0050 09A9     		add	r1, sp, #36
 18514 0052 12AA     		add	r2, sp, #72
 18515 0054 0846     		mov	r0, r1
 18516 0056 FFF7FEFF 		bl	dn_subtract
 18517              	.LVL1408:
3222:src/xeq.c     **** 		decNumberTrunc(&i, &x);			// i = ii
 18518              		.loc 1 3222 3 view .LVU4794
 18519 005a 09A9     		add	r1, sp, #36
 18520 005c 6846     		mov	r0, sp
 18521 005e FFF7FEFF 		bl	dn_mul100
 18522              	.LVL1409:
3223:src/xeq.c     **** 		if (dn_eq0(&i))
 18523              		.loc 1 3223 3 view .LVU4795
 18524 0062 6946     		mov	r1, sp
 18525 0064 09A8     		add	r0, sp, #36
 18526 0066 FFF7FEFF 		bl	decNumberTrunc
 18527              	.LVL1410:
3224:src/xeq.c     **** 			dn_1(&i);
 18528              		.loc 1 3224 3 view .LVU4796
3224:src/xeq.c     **** 			dn_1(&i);
 18529              		.loc 1 3224 7 is_stmt 0 view .LVU4797
 18530 006a 09A8     		add	r0, sp, #36
 18531 006c FFF7FEFF 		bl	dn_eq0
 18532              	.LVL1411:
3224:src/xeq.c     **** 			dn_1(&i);
 18533              		.loc 1 3224 6 view .LVU4798
 18534 0070 98BB     		cbnz	r0, .L1352
3227:src/xeq.c     **** 			dn_add(&n, &n, &i);
 18535              		.loc 1 3227 3 is_stmt 1 view .LVU4799
3228:src/xeq.c     **** 			dn_compare(&x, &f, &n);
ARM GAS  /tmp/ccK8IvWa.s 			page 500


 18536              		.loc 1 3228 4 is_stmt 0 view .LVU4800
 18537 0072 1BA9     		add	r1, sp, #108
3227:src/xeq.c     **** 			dn_add(&n, &n, &i);
 18538              		.loc 1 3227 6 view .LVU4801
 18539 0074 3B2C     		cmp	r4, #59
3228:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 18540              		.loc 1 3228 4 view .LVU4802
 18541 0076 09AA     		add	r2, sp, #36
 18542 0078 0846     		mov	r0, r1
3227:src/xeq.c     **** 			dn_add(&n, &n, &i);
 18543              		.loc 1 3227 6 view .LVU4803
 18544 007a 36D0     		beq	.L1330
 18545              	.L1355:
3227:src/xeq.c     **** 			dn_add(&n, &n, &i);
 18546              		.loc 1 3227 22 discriminator 1 view .LVU4804
 18547 007c 3D2C     		cmp	r4, #61
 18548 007e 1DD1     		bne	.L1331
3228:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 18549              		.loc 1 3228 4 is_stmt 1 view .LVU4805
 18550 0080 FFF7FEFF 		bl	dn_add
 18551              	.LVL1412:
3229:src/xeq.c     **** 			if (op == RARG_ISE)
 18552              		.loc 1 3229 4 view .LVU4806
 18553 0084 1BAA     		add	r2, sp, #108
 18554 0086 12A9     		add	r1, sp, #72
 18555 0088 6846     		mov	r0, sp
 18556 008a FFF7FEFF 		bl	dn_compare
 18557              	.LVL1413:
3230:src/xeq.c     **** 				fin_tst(dn_gt0(&x));
 18558              		.loc 1 3230 4 view .LVU4807
3231:src/xeq.c     **** 			else
 18559              		.loc 1 3231 5 view .LVU4808
3231:src/xeq.c     **** 			else
 18560              		.loc 1 3231 13 is_stmt 0 view .LVU4809
 18561 008e 6846     		mov	r0, sp
 18562 0090 FFF7FEFF 		bl	dn_le0
 18563              	.LVL1414:
3231:src/xeq.c     **** 			else
 18564              		.loc 1 3231 5 view .LVU4810
 18565 0094 B0FA80F0 		clz	r0, r0
 18566 0098 4009     		lsrs	r0, r0, #5
 18567 009a FFF7FEFF 		bl	fin_tst
 18568              	.LVL1415:
 18569              	.L1332:
3244:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
 18570              		.loc 1 3244 3 is_stmt 1 view .LVU4811
3244:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
 18571              		.loc 1 3244 6 is_stmt 0 view .LVU4812
 18572 009e 9DF97430 		ldrsb	r3, [sp, #116]
 18573 00a2 002B     		cmp	r3, #0
3245:src/xeq.c     **** 		} else
 18574              		.loc 1 3245 4 view .LVU4813
 18575 00a4 24AA     		add	r2, sp, #144
 18576 00a6 1BA9     		add	r1, sp, #108
 18577 00a8 6846     		mov	r0, sp
3244:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
 18578              		.loc 1 3244 6 view .LVU4814
ARM GAS  /tmp/ccK8IvWa.s 			page 501


 18579 00aa 55DB     		blt	.L1353
3247:src/xeq.c     **** 		setRegister(arg, &x);
 18580              		.loc 1 3247 4 is_stmt 1 view .LVU4815
 18581 00ac FFF7FEFF 		bl	dn_add
 18582              	.LVL1416:
 18583              	.L1335:
3248:src/xeq.c     **** 	}
 18584              		.loc 1 3248 3 discriminator 2 view .LVU4816
 18585 00b0 6946     		mov	r1, sp
 18586 00b2 2846     		mov	r0, r5
 18587 00b4 FFF7FEFF 		bl	setRegister
 18588              	.LVL1417:
 18589              	.L1318:
3248:src/xeq.c     **** 	}
 18590              		.loc 1 3248 3 is_stmt 0 discriminator 2 view .LVU4817
 18591              	.LBE2978:
3250:src/xeq.c     **** 
 18592              		.loc 1 3250 1 view .LVU4818
 18593 00b8 2FB0     		add	sp, sp, #188
 18594              		.cfi_remember_state
 18595              		.cfi_def_cfa_offset 20
 18596              		@ sp needed
 18597 00ba F0BD     		pop	{r4, r5, r6, r7, pc}
 18598              	.LVL1418:
 18599              	.L1331:
 18600              		.cfi_restore_state
 18601              	.LBB2979:
3235:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 18602              		.loc 1 3235 4 is_stmt 1 view .LVU4819
 18603 00bc FFF7FEFF 		bl	dn_subtract
 18604              	.LVL1419:
3236:src/xeq.c     **** 			if (op == RARG_DSL)
 18605              		.loc 1 3236 4 view .LVU4820
 18606 00c0 1BAA     		add	r2, sp, #108
 18607 00c2 12A9     		add	r1, sp, #72
 18608 00c4 6846     		mov	r0, sp
 18609 00c6 FFF7FEFF 		bl	dn_compare
 18610              	.LVL1420:
3237:src/xeq.c     **** 				fin_tst(dn_le0(&x));
 18611              		.loc 1 3237 4 view .LVU4821
3237:src/xeq.c     **** 				fin_tst(dn_le0(&x));
 18612              		.loc 1 3237 7 is_stmt 0 view .LVU4822
 18613 00ca 3C2C     		cmp	r4, #60
3238:src/xeq.c     **** 			else
 18614              		.loc 1 3238 5 view .LVU4823
 18615 00cc 6846     		mov	r0, sp
3237:src/xeq.c     **** 				fin_tst(dn_le0(&x));
 18616              		.loc 1 3237 7 view .LVU4824
 18617 00ce 6AD0     		beq	.L1354
3240:src/xeq.c     **** 		}
 18618              		.loc 1 3240 5 is_stmt 1 view .LVU4825
 18619 00d0 FFF7FEFF 		bl	dn_lt0
 18620              	.LVL1421:
 18621 00d4 FFF7FEFF 		bl	fin_tst
 18622              	.LVL1422:
 18623 00d8 E1E7     		b	.L1332
 18624              	.L1352:
ARM GAS  /tmp/ccK8IvWa.s 			page 502


3225:src/xeq.c     **** 
 18625              		.loc 1 3225 4 view .LVU4826
 18626 00da 09A8     		add	r0, sp, #36
 18627 00dc FFF7FEFF 		bl	dn_1
 18628              	.LVL1423:
3227:src/xeq.c     **** 			dn_add(&n, &n, &i);
 18629              		.loc 1 3227 3 view .LVU4827
3228:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 18630              		.loc 1 3228 4 is_stmt 0 view .LVU4828
 18631 00e0 1BA9     		add	r1, sp, #108
3227:src/xeq.c     **** 			dn_add(&n, &n, &i);
 18632              		.loc 1 3227 6 view .LVU4829
 18633 00e2 3B2C     		cmp	r4, #59
3228:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 18634              		.loc 1 3228 4 view .LVU4830
 18635 00e4 09AA     		add	r2, sp, #36
 18636 00e6 0846     		mov	r0, r1
3227:src/xeq.c     **** 			dn_add(&n, &n, &i);
 18637              		.loc 1 3227 6 view .LVU4831
 18638 00e8 C8D1     		bne	.L1355
 18639              	.L1330:
3228:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 18640              		.loc 1 3228 4 is_stmt 1 view .LVU4832
 18641 00ea FFF7FEFF 		bl	dn_add
 18642              	.LVL1424:
3229:src/xeq.c     **** 			if (op == RARG_ISE)
 18643              		.loc 1 3229 4 view .LVU4833
 18644 00ee 1BAA     		add	r2, sp, #108
 18645 00f0 12A9     		add	r1, sp, #72
 18646 00f2 6846     		mov	r0, sp
 18647 00f4 FFF7FEFF 		bl	dn_compare
 18648              	.LVL1425:
3230:src/xeq.c     **** 				fin_tst(dn_gt0(&x));
 18649              		.loc 1 3230 4 view .LVU4834
3233:src/xeq.c     **** 		} else {
 18650              		.loc 1 3233 5 view .LVU4835
3233:src/xeq.c     **** 		} else {
 18651              		.loc 1 3233 13 is_stmt 0 view .LVU4836
 18652 00f8 6846     		mov	r0, sp
 18653 00fa FFF7FEFF 		bl	dn_lt0
 18654              	.LVL1426:
3233:src/xeq.c     **** 		} else {
 18655              		.loc 1 3233 5 view .LVU4837
 18656 00fe B0FA80F0 		clz	r0, r0
 18657 0102 4009     		lsrs	r0, r0, #5
 18658 0104 FFF7FEFF 		bl	fin_tst
 18659              	.LVL1427:
 18660 0108 C9E7     		b	.L1332
 18661              	.LVL1428:
 18662              	.L1350:
3233:src/xeq.c     **** 		} else {
 18663              		.loc 1 3233 5 view .LVU4838
 18664              	.LBE2979:
 18665              	.LBB2980:
3187:src/xeq.c     **** 		int xs;
 18666              		.loc 1 3187 3 is_stmt 1 view .LVU4839
3187:src/xeq.c     **** 		int xs;
ARM GAS  /tmp/ccK8IvWa.s 			page 503


 18667              		.loc 1 3187 21 is_stmt 0 view .LVU4840
 18668 010a FFF7FEFF 		bl	get_reg_n_int
 18669              	.LVL1429:
3188:src/xeq.c     **** 		unsigned long long int xv;
 18670              		.loc 1 3188 3 is_stmt 1 view .LVU4841
3189:src/xeq.c     **** 
 18671              		.loc 1 3189 3 view .LVU4842
3191:src/xeq.c     **** 			x = intAdd(x, 1LL);
 18672              		.loc 1 3191 3 view .LVU4843
3191:src/xeq.c     **** 			x = intAdd(x, 1LL);
 18673              		.loc 1 3191 6 is_stmt 0 view .LVU4844
 18674 010e 3B2C     		cmp	r4, #59
3192:src/xeq.c     **** 		else
 18675              		.loc 1 3192 8 view .LVU4845
 18676 0110 4FF00102 		mov	r2, #1
 18677 0114 4FF00003 		mov	r3, #0
3191:src/xeq.c     **** 			x = intAdd(x, 1LL);
 18678              		.loc 1 3191 6 view .LVU4846
 18679 0118 4AD0     		beq	.L1320
3191:src/xeq.c     **** 			x = intAdd(x, 1LL);
 18680              		.loc 1 3191 22 discriminator 1 view .LVU4847
 18681 011a 3D2C     		cmp	r4, #61
 18682 011c 24D1     		bne	.L1356
3192:src/xeq.c     **** 		else
 18683              		.loc 1 3192 4 is_stmt 1 view .LVU4848
3192:src/xeq.c     **** 		else
 18684              		.loc 1 3192 8 is_stmt 0 view .LVU4849
 18685 011e FFF7FEFF 		bl	intAdd
 18686              	.LVL1430:
3192:src/xeq.c     **** 		else
 18687              		.loc 1 3192 8 view .LVU4850
 18688 0122 0646     		mov	r6, r0
 18689              	.LBB2981:
 18690              	.LBB2982:
1223:src/xeq.c     **** }
 18691              		.loc 1 1223 8 view .LVU4851
 18692 0124 2846     		mov	r0, r5
 18693              	.LBE2982:
 18694              	.LBE2981:
3192:src/xeq.c     **** 		else
 18695              		.loc 1 3192 8 view .LVU4852
 18696 0126 0C46     		mov	r4, r1
 18697              	.LVL1431:
3195:src/xeq.c     **** 
 18698              		.loc 1 3195 3 is_stmt 1 view .LVU4853
3195:src/xeq.c     **** 
 18699              		.loc 1 3195 3 is_stmt 0 view .LVU4854
 18700 0128 CDE92461 		strd	r6, r1, [sp, #144]
 18701              	.LVL1432:
 18702              	.LBB2988:
 18703              	.LBI2981:
1222:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 18704              		.loc 1 1222 6 is_stmt 1 view .LVU4855
 18705              	.LBB2983:
1223:src/xeq.c     **** }
 18706              		.loc 1 1223 2 view .LVU4856
1223:src/xeq.c     **** }
ARM GAS  /tmp/ccK8IvWa.s 			page 504


 18707              		.loc 1 1223 8 is_stmt 0 view .LVU4857
 18708 012c FFF7FEFF 		bl	get_reg_n
 18709              	.LVL1433:
1223:src/xeq.c     **** }
 18710              		.loc 1 1223 2 view .LVU4858
 18711 0130 24A9     		add	r1, sp, #144
 18712 0132 0822     		movs	r2, #8
 18713 0134 FFF7FEFF 		bl	xcopy
 18714              	.LVL1434:
1223:src/xeq.c     **** }
 18715              		.loc 1 1223 2 view .LVU4859
 18716              	.LBE2983:
 18717              	.LBE2988:
3197:src/xeq.c     **** 		if (op == RARG_ISG)
 18718              		.loc 1 3197 3 is_stmt 1 view .LVU4860
3197:src/xeq.c     **** 		if (op == RARG_ISG)
 18719              		.loc 1 3197 8 is_stmt 0 view .LVU4861
 18720 0138 24AA     		add	r2, sp, #144
 18721 013a 3046     		mov	r0, r6
 18722 013c 2146     		mov	r1, r4
 18723 013e FFF7FEFF 		bl	extract_value
 18724              	.LVL1435:
3203:src/xeq.c     **** 		else // if (op == RARG_DSL)
 18725              		.loc 1 3203 18 view .LVU4862
 18726 0142 249B     		ldr	r3, [sp, #144]
 18727              	.LVL1436:
3198:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
 18728              		.loc 1 3198 3 is_stmt 1 view .LVU4863
3200:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 18729              		.loc 1 3200 8 view .LVU4864
3202:src/xeq.c     **** 			fin_tst(! (xs == 0 || xv == 0));	// >= 0
 18730              		.loc 1 3202 8 view .LVU4865
3203:src/xeq.c     **** 		else // if (op == RARG_DSL)
 18731              		.loc 1 3203 4 view .LVU4866
 18732 0144 23B1     		cbz	r3, .L1339
3203:src/xeq.c     **** 		else // if (op == RARG_DSL)
 18733              		.loc 1 3203 4 is_stmt 0 discriminator 1 view .LVU4867
 18734 0146 50EA0103 		orrs	r3, r0, r1
 18735 014a 14BF     		ite	ne
 18736 014c 0123     		movne	r3, #1
 18737 014e 0023     		moveq	r3, #0
 18738              	.L1339:
3203:src/xeq.c     **** 		else // if (op == RARG_DSL)
 18739              		.loc 1 3203 4 discriminator 6 view .LVU4868
 18740 0150 1846     		mov	r0, r3
 18741              	.LVL1437:
3203:src/xeq.c     **** 		else // if (op == RARG_DSL)
 18742              		.loc 1 3203 4 discriminator 6 view .LVU4869
 18743 0152 FFF7FEFF 		bl	fin_tst
 18744              	.LVL1438:
 18745 0156 AFE7     		b	.L1318
 18746              	.L1353:
3203:src/xeq.c     **** 		else // if (op == RARG_DSL)
 18747              		.loc 1 3203 4 discriminator 6 view .LVU4870
 18748              	.LBE2980:
 18749              	.LBB2993:
3245:src/xeq.c     **** 		} else
ARM GAS  /tmp/ccK8IvWa.s 			page 505


 18750              		.loc 1 3245 4 is_stmt 1 view .LVU4871
 18751 0158 FFF7FEFF 		bl	dn_subtract
 18752              	.LVL1439:
 18753 015c A8E7     		b	.L1335
 18754              	.L1351:
3218:src/xeq.c     **** 		dn_mulpow10(&i, &u, 3);			// i = fff.ii
 18755              		.loc 1 3218 4 view .LVU4872
 18756 015e 1BA9     		add	r1, sp, #108
 18757 0160 0846     		mov	r0, r1
 18758 0162 FFF7FEFF 		bl	dn_minus
 18759              	.LVL1440:
 18760 0166 6AE7     		b	.L1328
 18761              	.LVL1441:
 18762              	.L1356:
3218:src/xeq.c     **** 		dn_mulpow10(&i, &u, 3);			// i = fff.ii
 18763              		.loc 1 3218 4 is_stmt 0 view .LVU4873
 18764              	.LBE2993:
 18765              	.LBB2994:
3194:src/xeq.c     **** 		set_reg_n_int(arg, x);
 18766              		.loc 1 3194 4 is_stmt 1 view .LVU4874
3194:src/xeq.c     **** 		set_reg_n_int(arg, x);
 18767              		.loc 1 3194 8 is_stmt 0 view .LVU4875
 18768 0168 FFF7FEFF 		bl	intSubtract
 18769              	.LVL1442:
3194:src/xeq.c     **** 		set_reg_n_int(arg, x);
 18770              		.loc 1 3194 8 view .LVU4876
 18771 016c 0746     		mov	r7, r0
 18772              	.LBB2989:
 18773              	.LBB2984:
1223:src/xeq.c     **** }
 18774              		.loc 1 1223 8 view .LVU4877
 18775 016e 2846     		mov	r0, r5
 18776              	.LBE2984:
 18777              	.LBE2989:
3194:src/xeq.c     **** 		set_reg_n_int(arg, x);
 18778              		.loc 1 3194 8 view .LVU4878
 18779 0170 0E46     		mov	r6, r1
 18780              	.LVL1443:
3195:src/xeq.c     **** 
 18781              		.loc 1 3195 3 is_stmt 1 view .LVU4879
3195:src/xeq.c     **** 
 18782              		.loc 1 3195 3 is_stmt 0 view .LVU4880
 18783 0172 CDE92471 		strd	r7, r1, [sp, #144]
 18784              	.LVL1444:
 18785              	.LBB2990:
1222:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 18786              		.loc 1 1222 6 is_stmt 1 view .LVU4881
 18787              	.LBB2985:
1223:src/xeq.c     **** }
 18788              		.loc 1 1223 2 view .LVU4882
1223:src/xeq.c     **** }
 18789              		.loc 1 1223 8 is_stmt 0 view .LVU4883
 18790 0176 FFF7FEFF 		bl	get_reg_n
 18791              	.LVL1445:
1223:src/xeq.c     **** }
 18792              		.loc 1 1223 2 view .LVU4884
 18793 017a 24A9     		add	r1, sp, #144
ARM GAS  /tmp/ccK8IvWa.s 			page 506


 18794 017c 0822     		movs	r2, #8
 18795 017e FFF7FEFF 		bl	xcopy
 18796              	.LVL1446:
1223:src/xeq.c     **** }
 18797              		.loc 1 1223 2 view .LVU4885
 18798              	.LBE2985:
 18799              	.LBE2990:
3197:src/xeq.c     **** 		if (op == RARG_ISG)
 18800              		.loc 1 3197 3 is_stmt 1 view .LVU4886
3197:src/xeq.c     **** 		if (op == RARG_ISG)
 18801              		.loc 1 3197 8 is_stmt 0 view .LVU4887
 18802 0182 24AA     		add	r2, sp, #144
 18803 0184 3846     		mov	r0, r7
 18804 0186 3146     		mov	r1, r6
 18805 0188 FFF7FEFF 		bl	extract_value
 18806              	.LVL1447:
3198:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
 18807              		.loc 1 3198 3 is_stmt 1 view .LVU4888
3200:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 18808              		.loc 1 3200 8 view .LVU4889
3200:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 18809              		.loc 1 3200 11 is_stmt 0 view .LVU4890
 18810 018c 3A2C     		cmp	r4, #58
3201:src/xeq.c     **** 		else if (op == RARG_ISE)
 18811              		.loc 1 3201 4 view .LVU4891
 18812 018e 249B     		ldr	r3, [sp, #144]
3200:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 18813              		.loc 1 3200 11 view .LVU4892
 18814 0190 25D0     		beq	.L1357
3205:src/xeq.c     **** 		return;
 18815              		.loc 1 3205 4 is_stmt 1 view .LVU4893
 18816 0192 13B3     		cbz	r3, .L1341
 18817              	.LVL1448:
 18818              	.L1349:
3205:src/xeq.c     **** 		return;
 18819              		.loc 1 3205 4 is_stmt 0 discriminator 2 view .LVU4894
 18820 0194 50EA0103 		orrs	r3, r0, r1
 18821 0198 0CBF     		ite	eq
 18822 019a 0120     		moveq	r0, #1
 18823 019c 0020     		movne	r0, #0
 18824              	.L1326:
3205:src/xeq.c     **** 		return;
 18825              		.loc 1 3205 4 discriminator 6 view .LVU4895
 18826 019e FFF7FEFF 		bl	fin_tst
 18827              	.LVL1449:
3206:src/xeq.c     **** 	} else {
 18828              		.loc 1 3206 3 is_stmt 1 discriminator 6 view .LVU4896
 18829              	.LBE2994:
3250:src/xeq.c     **** 
 18830              		.loc 1 3250 1 is_stmt 0 discriminator 6 view .LVU4897
 18831 01a2 2FB0     		add	sp, sp, #188
 18832              		.cfi_remember_state
 18833              		.cfi_def_cfa_offset 20
 18834              		@ sp needed
 18835 01a4 F0BD     		pop	{r4, r5, r6, r7, pc}
 18836              	.LVL1450:
 18837              	.L1354:
ARM GAS  /tmp/ccK8IvWa.s 			page 507


 18838              		.cfi_restore_state
 18839              	.LBB2995:
3238:src/xeq.c     **** 			else
 18840              		.loc 1 3238 5 is_stmt 1 view .LVU4898
 18841 01a6 FFF7FEFF 		bl	dn_le0
 18842              	.LVL1451:
 18843 01aa FFF7FEFF 		bl	fin_tst
 18844              	.LVL1452:
 18845 01ae 76E7     		b	.L1332
 18846              	.LVL1453:
 18847              	.L1320:
3238:src/xeq.c     **** 			else
 18848              		.loc 1 3238 5 is_stmt 0 view .LVU4899
 18849              	.LBE2995:
 18850              	.LBB2996:
3192:src/xeq.c     **** 		else
 18851              		.loc 1 3192 4 is_stmt 1 view .LVU4900
3192:src/xeq.c     **** 		else
 18852              		.loc 1 3192 8 is_stmt 0 view .LVU4901
 18853 01b0 FFF7FEFF 		bl	intAdd
 18854              	.LVL1454:
3192:src/xeq.c     **** 		else
 18855              		.loc 1 3192 8 view .LVU4902
 18856 01b4 0646     		mov	r6, r0
 18857              	.LBB2991:
 18858              	.LBB2986:
1223:src/xeq.c     **** }
 18859              		.loc 1 1223 8 view .LVU4903
 18860 01b6 2846     		mov	r0, r5
 18861              	.LBE2986:
 18862              	.LBE2991:
3192:src/xeq.c     **** 		else
 18863              		.loc 1 3192 8 view .LVU4904
 18864 01b8 0C46     		mov	r4, r1
 18865              	.LVL1455:
3195:src/xeq.c     **** 
 18866              		.loc 1 3195 3 is_stmt 1 view .LVU4905
3195:src/xeq.c     **** 
 18867              		.loc 1 3195 3 is_stmt 0 view .LVU4906
 18868 01ba CDE92461 		strd	r6, r1, [sp, #144]
 18869              	.LVL1456:
 18870              	.LBB2992:
1222:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 18871              		.loc 1 1222 6 is_stmt 1 view .LVU4907
 18872              	.LBB2987:
1223:src/xeq.c     **** }
 18873              		.loc 1 1223 2 view .LVU4908
1223:src/xeq.c     **** }
 18874              		.loc 1 1223 8 is_stmt 0 view .LVU4909
 18875 01be FFF7FEFF 		bl	get_reg_n
 18876              	.LVL1457:
1223:src/xeq.c     **** }
 18877              		.loc 1 1223 2 view .LVU4910
 18878 01c2 24A9     		add	r1, sp, #144
 18879 01c4 0822     		movs	r2, #8
 18880 01c6 FFF7FEFF 		bl	xcopy
 18881              	.LVL1458:
ARM GAS  /tmp/ccK8IvWa.s 			page 508


1223:src/xeq.c     **** }
 18882              		.loc 1 1223 2 view .LVU4911
 18883              	.LBE2987:
 18884              	.LBE2992:
3197:src/xeq.c     **** 		if (op == RARG_ISG)
 18885              		.loc 1 3197 3 is_stmt 1 view .LVU4912
3197:src/xeq.c     **** 		if (op == RARG_ISG)
 18886              		.loc 1 3197 8 is_stmt 0 view .LVU4913
 18887 01ca 24AA     		add	r2, sp, #144
 18888 01cc 3046     		mov	r0, r6
 18889 01ce 2146     		mov	r1, r4
 18890 01d0 FFF7FEFF 		bl	extract_value
 18891              	.LVL1459:
3199:src/xeq.c     **** 		else if (op == RARG_DSE)
 18892              		.loc 1 3199 4 view .LVU4914
 18893 01d4 249B     		ldr	r3, [sp, #144]
 18894              	.LVL1460:
3198:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
 18895              		.loc 1 3198 3 is_stmt 1 view .LVU4915
3199:src/xeq.c     **** 		else if (op == RARG_DSE)
 18896              		.loc 1 3199 4 view .LVU4916
 18897 01d6 002B     		cmp	r3, #0
 18898 01d8 DCD0     		beq	.L1349
 18899              	.LVL1461:
 18900              	.L1341:
3205:src/xeq.c     **** 		return;
 18901              		.loc 1 3205 4 is_stmt 0 view .LVU4917
 18902 01da 0120     		movs	r0, #1
 18903 01dc DFE7     		b	.L1326
 18904              	.LVL1462:
 18905              	.L1357:
3201:src/xeq.c     **** 		else if (op == RARG_ISE)
 18906              		.loc 1 3201 4 is_stmt 1 view .LVU4918
 18907 01de 2BB9     		cbnz	r3, .L1340
3201:src/xeq.c     **** 		else if (op == RARG_ISE)
 18908              		.loc 1 3201 4 is_stmt 0 discriminator 1 view .LVU4919
 18909 01e0 50EA0103 		orrs	r3, r0, r1
 18910 01e4 14BF     		ite	ne
 18911 01e6 0120     		movne	r0, #1
 18912              	.LVL1463:
3201:src/xeq.c     **** 		else if (op == RARG_ISE)
 18913              		.loc 1 3201 4 discriminator 1 view .LVU4920
 18914 01e8 0020     		moveq	r0, #0
 18915 01ea D8E7     		b	.L1326
 18916              	.LVL1464:
 18917              	.L1340:
3201:src/xeq.c     **** 		else if (op == RARG_ISE)
 18918              		.loc 1 3201 4 view .LVU4921
 18919 01ec 0020     		movs	r0, #0
 18920              	.LVL1465:
3201:src/xeq.c     **** 		else if (op == RARG_ISE)
 18921              		.loc 1 3201 4 view .LVU4922
 18922 01ee D6E7     		b	.L1326
 18923              	.L1359:
 18924              		.align	2
 18925              	.L1358:
 18926 01f0 00000000 		.word	PersistentRam
ARM GAS  /tmp/ccK8IvWa.s 			page 509


 18927              	.LBE2996:
 18928              		.cfi_endproc
 18929              	.LFE188:
 18931              		.section	.text.op_shift_digit,"ax",%progbits
 18932              		.align	1
 18933              		.p2align 2,,3
 18934              		.global	op_shift_digit
 18935              		.syntax unified
 18936              		.thumb
 18937              		.thumb_func
 18938              		.fpu fpv4-sp-d16
 18940              	op_shift_digit:
 18941              	.LVL1466:
 18942              	.LFB189:
3255:src/xeq.c     **** 	decNumber x;
 18943              		.loc 1 3255 51 is_stmt 1 view -0
 18944              		.cfi_startproc
 18945              		@ args = 0, pretend = 0, frame = 40
 18946              		@ frame_needed = 0, uses_anonymous_args = 0
3256:src/xeq.c     **** 	int adjust = n;
 18947              		.loc 1 3256 2 view .LVU4924
3257:src/xeq.c     **** 
 18948              		.loc 1 3257 2 view .LVU4925
3259:src/xeq.c     **** 		bad_mode_error();
 18949              		.loc 1 3259 6 is_stmt 0 view .LVU4926
 18950 0000 164B     		ldr	r3, .L1369
 18951 0002 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 18952              	.LVL1467:
3259:src/xeq.c     **** 		bad_mode_error();
 18953              		.loc 1 3259 2 is_stmt 1 view .LVU4927
3259:src/xeq.c     **** 		bad_mode_error();
 18954              		.loc 1 3259 5 is_stmt 0 view .LVU4928
 18955 0006 DB07     		lsls	r3, r3, #31
 18956 0008 06D5     		bpl	.L1361
3260:src/xeq.c     **** 		return;
 18957              		.loc 1 3260 3 is_stmt 1 view .LVU4929
 18958              	.LBB3008:
 18959              	.LBI3008:
 552:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 18960              		.loc 1 552 6 view .LVU4930
 18961              	.LBE3008:
 553:src/xeq.c     **** }
 18962              		.loc 1 553 2 view .LVU4931
 18963              	.LVL1468:
 18964              	.LBB3013:
 18965              	.LBB3009:
 18966              	.LBI3009:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 18967              		.loc 1 523 5 view .LVU4932
 18968              	.LBB3010:
 524:src/xeq.c     **** 		Error = e;
 18969              		.loc 1 524 2 view .LVU4933
 524:src/xeq.c     **** 		Error = e;
 18970              		.loc 1 524 12 is_stmt 0 view .LVU4934
 18971 000a 154B     		ldr	r3, .L1369+4
 524:src/xeq.c     **** 		Error = e;
 18972              		.loc 1 524 5 view .LVU4935
ARM GAS  /tmp/ccK8IvWa.s 			page 510


 18973 000c 1A68     		ldr	r2, [r3]
 18974 000e 12B9     		cbnz	r2, .L1367
 18975              	.LVL1469:
 18976              	.LBB3011:
 18977              	.LBI3011:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 18978              		.loc 1 523 5 is_stmt 1 view .LVU4936
 18979              	.LBB3012:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 18980              		.loc 1 525 3 view .LVU4937
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 18981              		.loc 1 525 9 is_stmt 0 view .LVU4938
 18982 0010 0D22     		movs	r2, #13
 18983 0012 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 18984              		.loc 1 526 3 is_stmt 1 view .LVU4939
 18985 0014 7047     		bx	lr
 18986              	.LVL1470:
 18987              	.L1367:
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 18988              		.loc 1 526 3 is_stmt 0 view .LVU4940
 18989 0016 7047     		bx	lr
 18990              	.LVL1471:
 18991              	.L1361:
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 18992              		.loc 1 526 3 view .LVU4941
 18993              	.LBE3012:
 18994              	.LBE3011:
 18995              	.LBE3010:
 18996              	.LBE3009:
 18997              	.LBE3013:
3263:src/xeq.c     **** 	setlastX();
 18998              		.loc 1 3263 2 is_stmt 1 view .LVU4942
3255:src/xeq.c     **** 	decNumber x;
 18999              		.loc 1 3255 51 is_stmt 0 view .LVU4943
 19000 0018 30B5     		push	{r4, r5, lr}
 19001              		.cfi_def_cfa_offset 12
 19002              		.cfi_offset 4, -12
 19003              		.cfi_offset 5, -8
 19004              		.cfi_offset 14, -4
 19005 001a 8BB0     		sub	sp, sp, #44
 19006              		.cfi_def_cfa_offset 56
 19007              	.LVL1472:
 19008              	.LBB3014:
 19009              	.LBI3014:
 791:src/xeq.c     **** 	return getRegister(x, regX_idx);
 19010              		.loc 1 791 12 is_stmt 1 view .LVU4944
 19011              	.LBB3015:
 792:src/xeq.c     **** }
 19012              		.loc 1 792 2 view .LVU4945
 19013 001c 0446     		mov	r4, r0
 19014 001e 0D46     		mov	r5, r1
 792:src/xeq.c     **** }
 19015              		.loc 1 792 9 is_stmt 0 view .LVU4946
 19016 0020 01A8     		add	r0, sp, #4
 19017              	.LVL1473:
 792:src/xeq.c     **** }
ARM GAS  /tmp/ccK8IvWa.s 			page 511


 19018              		.loc 1 792 9 view .LVU4947
 19019 0022 6421     		movs	r1, #100
 19020              	.LVL1474:
 792:src/xeq.c     **** }
 19021              		.loc 1 792 9 view .LVU4948
 19022 0024 FFF7FEFF 		bl	getRegister
 19023              	.LVL1475:
 792:src/xeq.c     **** }
 19024              		.loc 1 792 9 view .LVU4949
 19025              	.LBE3015:
 19026              	.LBE3014:
3264:src/xeq.c     **** 	if (decNumberIsSpecial(&x) || dn_eq0(&x))
 19027              		.loc 1 3264 2 is_stmt 1 view .LVU4950
 19028              	.LBB3016:
 19029              	.LBI3016:
 759:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 19030              		.loc 1 759 6 view .LVU4951
 19031              	.LBB3017:
 760:src/xeq.c     **** }
 19032              		.loc 1 760 2 view .LVU4952
 19033 0028 6421     		movs	r1, #100
 19034 002a 6C20     		movs	r0, #108
 19035 002c FFF7FEFF 		bl	copyreg_n
 19036              	.LVL1476:
 19037              	.LBE3017:
 19038              	.LBE3016:
3265:src/xeq.c     **** 		return;
 19039              		.loc 1 3265 2 view .LVU4953
3265:src/xeq.c     **** 		return;
 19040              		.loc 1 3265 5 is_stmt 0 view .LVU4954
 19041 0030 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 19042 0034 13F0700F 		tst	r3, #112
 19043 0038 0ED1     		bne	.L1360
3265:src/xeq.c     **** 		return;
 19044              		.loc 1 3265 32 discriminator 1 view .LVU4955
 19045 003a 01A8     		add	r0, sp, #4
 19046 003c FFF7FEFF 		bl	dn_eq0
 19047              	.LVL1477:
3265:src/xeq.c     **** 		return;
 19048              		.loc 1 3265 29 discriminator 1 view .LVU4956
 19049 0040 50B9     		cbnz	r0, .L1360
3267:src/xeq.c     **** 		adjust = -adjust;
 19050              		.loc 1 3267 5 view .LVU4957
 19051 0042 722D     		cmp	r5, #114
3257:src/xeq.c     **** 
 19052              		.loc 1 3257 6 view .LVU4958
 19053 0044 2046     		mov	r0, r4
3267:src/xeq.c     **** 		adjust = -adjust;
 19054              		.loc 1 3267 2 is_stmt 1 view .LVU4959
3268:src/xeq.c     **** 	x.exponent += adjust;
 19055              		.loc 1 3268 3 view .LVU4960
3268:src/xeq.c     **** 	x.exponent += adjust;
 19056              		.loc 1 3268 10 is_stmt 0 view .LVU4961
 19057 0046 08BF     		it	eq
 19058 0048 6042     		rsbeq	r0, r4, #0
 19059              	.LVL1478:
3269:src/xeq.c     **** 	setX(&x);
ARM GAS  /tmp/ccK8IvWa.s 			page 512


 19060              		.loc 1 3269 2 is_stmt 1 view .LVU4962
3269:src/xeq.c     **** 	setX(&x);
 19061              		.loc 1 3269 13 is_stmt 0 view .LVU4963
 19062 004a 029C     		ldr	r4, [sp, #8]
 19063              	.LVL1479:
 19064              	.LBB3018:
 19065              	.LBB3019:
 796:src/xeq.c     **** }
 19066              		.loc 1 796 2 view .LVU4964
 19067 004c 01A9     		add	r1, sp, #4
 19068              	.LBE3019:
 19069              	.LBE3018:
3269:src/xeq.c     **** 	setX(&x);
 19070              		.loc 1 3269 13 view .LVU4965
 19071 004e 0444     		add	r4, r4, r0
 19072              	.LBB3022:
 19073              	.LBB3020:
 796:src/xeq.c     **** }
 19074              		.loc 1 796 2 view .LVU4966
 19075 0050 6420     		movs	r0, #100
 19076              	.LVL1480:
 796:src/xeq.c     **** }
 19077              		.loc 1 796 2 view .LVU4967
 19078              	.LBE3020:
 19079              	.LBE3022:
3269:src/xeq.c     **** 	setX(&x);
 19080              		.loc 1 3269 13 view .LVU4968
 19081 0052 0294     		str	r4, [sp, #8]
3270:src/xeq.c     **** }
 19082              		.loc 1 3270 2 is_stmt 1 view .LVU4969
 19083              	.LVL1481:
 19084              	.LBB3023:
 19085              	.LBI3018:
 795:src/xeq.c     **** 	setRegister(regX_idx, x);
 19086              		.loc 1 795 6 view .LVU4970
 19087              	.LBB3021:
 796:src/xeq.c     **** }
 19088              		.loc 1 796 2 view .LVU4971
 19089 0054 FFF7FEFF 		bl	setRegister
 19090              	.LVL1482:
 19091              	.L1360:
 796:src/xeq.c     **** }
 19092              		.loc 1 796 2 is_stmt 0 view .LVU4972
 19093              	.LBE3021:
 19094              	.LBE3023:
3271:src/xeq.c     **** 
 19095              		.loc 1 3271 1 view .LVU4973
 19096 0058 0BB0     		add	sp, sp, #44
 19097              		.cfi_def_cfa_offset 12
 19098              		@ sp needed
 19099 005a 30BD     		pop	{r4, r5, pc}
 19100              	.L1370:
 19101              		.align	2
 19102              	.L1369:
 19103 005c 00000000 		.word	PersistentRam
 19104 0060 00000000 		.word	Error
 19105              		.cfi_endproc
ARM GAS  /tmp/ccK8IvWa.s 			page 513


 19106              	.LFE189:
 19108              		.section	.text.get_user_flag,"ax",%progbits
 19109              		.align	1
 19110              		.p2align 2,,3
 19111              		.global	get_user_flag
 19112              		.syntax unified
 19113              		.thumb
 19114              		.thumb_func
 19115              		.fpu fpv4-sp-d16
 19117              	get_user_flag:
 19118              	.LVL1483:
 19119              	.LFB191:
3304:src/xeq.c     **** 	unsigned short mask;
 19120              		.loc 1 3304 26 is_stmt 1 view -0
 19121              		.cfi_startproc
 19122              		@ args = 0, pretend = 0, frame = 8
 19123              		@ frame_needed = 0, uses_anonymous_args = 0
3305:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
 19124              		.loc 1 3305 2 view .LVU4975
3306:src/xeq.c     **** 
 19125              		.loc 1 3306 2 view .LVU4976
3304:src/xeq.c     **** 	unsigned short mask;
 19126              		.loc 1 3304 26 is_stmt 0 view .LVU4977
 19127 0000 00B5     		push	{lr}
 19128              		.cfi_def_cfa_offset 4
 19129              		.cfi_offset 14, -4
 19130 0002 83B0     		sub	sp, sp, #12
 19131              		.cfi_def_cfa_offset 16
3306:src/xeq.c     **** 
 19132              		.loc 1 3306 34 view .LVU4978
 19133 0004 0DF10601 		add	r1, sp, #6
 19134 0008 FFF7FEFF 		bl	flag_word
 19135              	.LVL1484:
3308:src/xeq.c     **** }
 19136              		.loc 1 3308 2 is_stmt 1 view .LVU4979
3308:src/xeq.c     **** }
 19137              		.loc 1 3308 24 is_stmt 0 view .LVU4980
 19138 000c BDF80630 		ldrh	r3, [sp, #6]
 19139 0010 0288     		ldrh	r2, [r0]
 19140 0012 1A42     		tst	r2, r3
3309:src/xeq.c     **** 
 19141              		.loc 1 3309 1 view .LVU4981
 19142 0014 14BF     		ite	ne
 19143 0016 0120     		movne	r0, #1
 19144              	.LVL1485:
3309:src/xeq.c     **** 
 19145              		.loc 1 3309 1 view .LVU4982
 19146 0018 0020     		moveq	r0, #0
 19147 001a 03B0     		add	sp, sp, #12
 19148              		.cfi_def_cfa_offset 4
 19149              		@ sp needed
 19150 001c 5DF804FB 		ldr	pc, [sp], #4
 19151              		.cfi_endproc
 19152              	.LFE191:
 19154              		.section	.text.cmdflag,"ax",%progbits
 19155              		.align	1
 19156              		.p2align 2,,3
ARM GAS  /tmp/ccK8IvWa.s 			page 514


 19157              		.global	cmdflag
 19158              		.syntax unified
 19159              		.thumb
 19160              		.thumb_func
 19161              		.fpu fpv4-sp-d16
 19163              	cmdflag:
 19164              	.LVL1486:
 19165              	.LFB193:
3332:src/xeq.c     **** 	unsigned short mask;
 19166              		.loc 1 3332 46 is_stmt 1 view -0
 19167              		.cfi_startproc
 19168              		@ args = 0, pretend = 0, frame = 8
 19169              		@ frame_needed = 0, uses_anonymous_args = 0
3333:src/xeq.c     **** 	unsigned short *const f = flag_word(arg, &mask);
 19170              		.loc 1 3333 2 view .LVU4984
3334:src/xeq.c     **** 	int flg = *f & mask;
 19171              		.loc 1 3334 2 view .LVU4985
3332:src/xeq.c     **** 	unsigned short mask;
 19172              		.loc 1 3332 46 is_stmt 0 view .LVU4986
 19173 0000 70B5     		push	{r4, r5, r6, lr}
 19174              		.cfi_def_cfa_offset 16
 19175              		.cfi_offset 4, -16
 19176              		.cfi_offset 5, -12
 19177              		.cfi_offset 6, -8
 19178              		.cfi_offset 14, -4
 19179 0002 82B0     		sub	sp, sp, #8
 19180              		.cfi_def_cfa_offset 24
3332:src/xeq.c     **** 	unsigned short mask;
 19181              		.loc 1 3332 46 view .LVU4987
 19182 0004 0C46     		mov	r4, r1
3334:src/xeq.c     **** 	int flg = *f & mask;
 19183              		.loc 1 3334 28 view .LVU4988
 19184 0006 0DF10601 		add	r1, sp, #6
 19185              	.LVL1487:
3332:src/xeq.c     **** 	unsigned short mask;
 19186              		.loc 1 3332 46 view .LVU4989
 19187 000a 0646     		mov	r6, r0
3334:src/xeq.c     **** 	int flg = *f & mask;
 19188              		.loc 1 3334 28 view .LVU4990
 19189 000c FFF7FEFF 		bl	flag_word
 19190              	.LVL1488:
3335:src/xeq.c     **** 
 19191              		.loc 1 3335 15 view .LVU4991
 19192 0010 BDF80620 		ldrh	r2, [sp, #6]
3335:src/xeq.c     **** 
 19193              		.loc 1 3335 12 view .LVU4992
 19194 0014 0388     		ldrh	r3, [r0]
 19195 0016 A4F15101 		sub	r1, r4, #81
3334:src/xeq.c     **** 	int flg = *f & mask;
 19196              		.loc 1 3334 28 view .LVU4993
 19197 001a 0546     		mov	r5, r0
 19198              	.LVL1489:
3335:src/xeq.c     **** 
 19199              		.loc 1 3335 2 is_stmt 1 view .LVU4994
3335:src/xeq.c     **** 
 19200              		.loc 1 3335 6 is_stmt 0 view .LVU4995
 19201 001c 03EA0200 		and	r0, r3, r2
ARM GAS  /tmp/ccK8IvWa.s 			page 515


 19202              	.LVL1490:
3337:src/xeq.c     **** 	case RARG_SF:	flg = 1;			   break;
 19203              		.loc 1 3337 2 is_stmt 1 view .LVU4996
 19204 0020 0A29     		cmp	r1, #10
 19205 0022 1AD8     		bhi	.L1373
 19206 0024 DFE801F0 		tbb	[pc, r1]
 19207              	.L1376:
 19208 0028 23       		.byte	(.L1386-.L1376)/2
 19209 0029 0E       		.byte	(.L1385-.L1376)/2
 19210 002a 46       		.byte	(.L1384-.L1376)/2
 19211 002b 29       		.byte	(.L1397-.L1376)/2
 19212 002c 26       		.byte	(.L1382-.L1376)/2
 19213 002d 09       		.byte	(.L1396-.L1376)/2
 19214 002e 1E       		.byte	(.L1395-.L1376)/2
 19215 002f 2D       		.byte	(.L1379-.L1376)/2
 19216 0030 06       		.byte	(.L1378-.L1376)/2
 19217 0031 1B       		.byte	(.L1377-.L1376)/2
 19218 0032 3A       		.byte	(.L1375-.L1376)/2
 19219 0033 00       		.p2align 1
 19220              	.L1378:
3349:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 19221              		.loc 1 3349 17 view .LVU4997
 19222 0034 B0FA80F0 		clz	r0, r0
 19223              	.LVL1491:
3349:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 19224              		.loc 1 3349 17 is_stmt 0 view .LVU4998
 19225 0038 4009     		lsrs	r0, r0, #5
 19226              	.L1396:
3349:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 19227              		.loc 1 3349 17 view .LVU4999
 19228 003a FFF7FEFF 		bl	fin_tst
 19229              	.LVL1492:
3349:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 19230              		.loc 1 3349 33 is_stmt 1 view .LVU5000
3349:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 19231              		.loc 1 3349 45 view .LVU5001
3358:src/xeq.c     **** 		*f |= mask;
 19232              		.loc 1 3358 2 view .LVU5002
 19233 003e 2B88     		ldrh	r3, [r5]
 19234 0040 BDF80620 		ldrh	r2, [sp, #6]
 19235              	.LVL1493:
 19236              	.L1385:
3361:src/xeq.c     **** 
 19237              		.loc 1 3361 3 view .LVU5003
3361:src/xeq.c     **** 
 19238              		.loc 1 3361 6 is_stmt 0 view .LVU5004
 19239 0044 23EA0203 		bic	r3, r3, r2
 19240 0048 0021     		movs	r1, #0
 19241              	.L1388:
3363:src/xeq.c     **** 		dot( BIG_EQ, flg );
 19242              		.loc 1 3363 5 view .LVU5005
 19243 004a 682E     		cmp	r6, #104
 19244 004c 2B80     		strh	r3, [r5]	@ movhi
3363:src/xeq.c     **** 		dot( BIG_EQ, flg );
 19245              		.loc 1 3363 2 is_stmt 1 view .LVU5006
3363:src/xeq.c     **** 		dot( BIG_EQ, flg );
 19246              		.loc 1 3363 5 is_stmt 0 view .LVU5007
ARM GAS  /tmp/ccK8IvWa.s 			page 516


 19247 004e 04D1     		bne	.L1373
3364:src/xeq.c     **** 		finish_display();
 19248              		.loc 1 3364 3 is_stmt 1 view .LVU5008
 19249 0050 8320     		movs	r0, #131
 19250 0052 FFF7FEFF 		bl	dot
 19251              	.LVL1494:
3365:src/xeq.c     **** 	}
 19252              		.loc 1 3365 3 view .LVU5009
 19253 0056 FFF7FEFF 		bl	finish_display
 19254              	.LVL1495:
 19255              	.L1373:
3367:src/xeq.c     **** 
 19256              		.loc 1 3367 1 is_stmt 0 view .LVU5010
 19257 005a 02B0     		add	sp, sp, #8
 19258              		.cfi_remember_state
 19259              		.cfi_def_cfa_offset 16
 19260              		@ sp needed
 19261 005c 70BD     		pop	{r4, r5, r6, pc}
 19262              	.LVL1496:
 19263              	.L1377:
 19264              		.cfi_restore_state
3350:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 19265              		.loc 1 3350 17 is_stmt 1 view .LVU5011
 19266 005e B0FA80F0 		clz	r0, r0
 19267              	.LVL1497:
3350:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 19268              		.loc 1 3350 17 is_stmt 0 view .LVU5012
 19269 0062 4009     		lsrs	r0, r0, #5
 19270              	.L1395:
3350:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 19271              		.loc 1 3350 17 view .LVU5013
 19272 0064 FFF7FEFF 		bl	fin_tst
 19273              	.LVL1498:
3350:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 19274              		.loc 1 3350 33 is_stmt 1 view .LVU5014
3350:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 19275              		.loc 1 3350 45 view .LVU5015
3358:src/xeq.c     **** 		*f |= mask;
 19276              		.loc 1 3358 2 view .LVU5016
 19277 0068 2B88     		ldrh	r3, [r5]
 19278 006a BDF80620 		ldrh	r2, [sp, #6]
 19279              	.LVL1499:
 19280              	.L1386:
3359:src/xeq.c     **** 	else
 19281              		.loc 1 3359 3 view .LVU5017
3359:src/xeq.c     **** 	else
 19282              		.loc 1 3359 6 is_stmt 0 view .LVU5018
 19283 006e 1343     		orrs	r3, r3, r2
 19284 0070 0121     		movs	r1, #1
 19285 0072 EAE7     		b	.L1388
 19286              	.LVL1500:
 19287              	.L1382:
3343:src/xeq.c     **** 
 19288              		.loc 1 3343 16 is_stmt 1 view .LVU5019
 19289 0074 B0FA80F0 		clz	r0, r0
 19290              	.LVL1501:
3343:src/xeq.c     **** 
ARM GAS  /tmp/ccK8IvWa.s 			page 517


 19291              		.loc 1 3343 16 is_stmt 0 view .LVU5020
 19292 0078 4009     		lsrs	r0, r0, #5
 19293              	.L1397:
3343:src/xeq.c     **** 
 19294              		.loc 1 3343 16 view .LVU5021
 19295 007a FFF7FEFF 		bl	fin_tst
 19296              	.LVL1502:
3343:src/xeq.c     **** 
 19297              		.loc 1 3343 37 is_stmt 1 view .LVU5022
3367:src/xeq.c     **** 
 19298              		.loc 1 3367 1 is_stmt 0 view .LVU5023
 19299 007e 02B0     		add	sp, sp, #8
 19300              		.cfi_remember_state
 19301              		.cfi_def_cfa_offset 16
 19302              		@ sp needed
 19303 0080 70BD     		pop	{r4, r5, r6, pc}
 19304              	.LVL1503:
 19305              	.L1379:
 19306              		.cfi_restore_state
3347:src/xeq.c     **** 
 19307              		.loc 1 3347 17 is_stmt 1 view .LVU5024
3347:src/xeq.c     **** 
 19308              		.loc 1 3347 45 is_stmt 0 view .LVU5025
 19309 0082 B0FA80F4 		clz	r4, r0
 19310 0086 6409     		lsrs	r4, r4, #5
3347:src/xeq.c     **** 
 19311              		.loc 1 3347 17 view .LVU5026
 19312 0088 FFF7FEFF 		bl	fin_tst
 19313              	.LVL1504:
3347:src/xeq.c     **** 
 19314              		.loc 1 3347 31 is_stmt 1 view .LVU5027
3347:src/xeq.c     **** 
 19315              		.loc 1 3347 52 view .LVU5028
3358:src/xeq.c     **** 		*f |= mask;
 19316              		.loc 1 3358 2 view .LVU5029
 19317 008c 2B88     		ldrh	r3, [r5]
 19318 008e BDF80620 		ldrh	r2, [sp, #6]
3358:src/xeq.c     **** 		*f |= mask;
 19319              		.loc 1 3358 5 is_stmt 0 view .LVU5030
 19320 0092 002C     		cmp	r4, #0
 19321 0094 D6D0     		beq	.L1385
 19322              	.L1398:
 19323              	.LVL1505:
3359:src/xeq.c     **** 	else
 19324              		.loc 1 3359 3 is_stmt 1 view .LVU5031
3359:src/xeq.c     **** 	else
 19325              		.loc 1 3359 6 is_stmt 0 view .LVU5032
 19326 0096 1343     		orrs	r3, r3, r2
 19327 0098 0121     		movs	r1, #1
 19328 009a D6E7     		b	.L1388
 19329              	.LVL1506:
 19330              	.L1375:
3351:src/xeq.c     **** 
 19331              		.loc 1 3351 17 is_stmt 1 view .LVU5033
 19332 009c B0FA80F4 		clz	r4, r0
 19333 00a0 6409     		lsrs	r4, r4, #5
 19334 00a2 2046     		mov	r0, r4
ARM GAS  /tmp/ccK8IvWa.s 			page 518


 19335              	.LVL1507:
3351:src/xeq.c     **** 
 19336              		.loc 1 3351 17 is_stmt 0 view .LVU5034
 19337 00a4 FFF7FEFF 		bl	fin_tst
 19338              	.LVL1508:
3351:src/xeq.c     **** 
 19339              		.loc 1 3351 33 is_stmt 1 view .LVU5035
3351:src/xeq.c     **** 
 19340              		.loc 1 3351 52 view .LVU5036
 19341 00a8 2B88     		ldrh	r3, [r5]
 19342 00aa BDF80620 		ldrh	r2, [sp, #6]
3358:src/xeq.c     **** 		*f |= mask;
 19343              		.loc 1 3358 2 view .LVU5037
3358:src/xeq.c     **** 		*f |= mask;
 19344              		.loc 1 3358 5 is_stmt 0 view .LVU5038
 19345 00ae 002C     		cmp	r4, #0
 19346 00b0 C8D0     		beq	.L1385
 19347 00b2 F0E7     		b	.L1398
 19348              	.LVL1509:
 19349              	.L1384:
3340:src/xeq.c     **** 
 19350              		.loc 1 3340 16 is_stmt 1 view .LVU5039
3340:src/xeq.c     **** 
 19351              		.loc 1 3340 29 is_stmt 0 view .LVU5040
 19352 00b4 B0FA80F4 		clz	r4, r0
 19353 00b8 6409     		lsrs	r4, r4, #5
 19354              	.LVL1510:
3340:src/xeq.c     **** 
 19355              		.loc 1 3340 38 is_stmt 1 view .LVU5041
3358:src/xeq.c     **** 		*f |= mask;
 19356              		.loc 1 3358 2 view .LVU5042
3358:src/xeq.c     **** 		*f |= mask;
 19357              		.loc 1 3358 5 is_stmt 0 view .LVU5043
 19358 00ba 002C     		cmp	r4, #0
 19359 00bc C2D0     		beq	.L1385
 19360 00be EAE7     		b	.L1398
 19361              		.cfi_endproc
 19362              	.LFE193:
 19364              		.section	.text.put_user_flag,"ax",%progbits
 19365              		.align	1
 19366              		.p2align 2,,3
 19367              		.global	put_user_flag
 19368              		.syntax unified
 19369              		.thumb
 19370              		.thumb_func
 19371              		.fpu fpv4-sp-d16
 19373              	put_user_flag:
 19374              	.LVL1511:
 19375              	.LFB192:
3311:src/xeq.c     **** 	if (f)	set_user_flag(n);
 19376              		.loc 1 3311 34 is_stmt 1 view -0
 19377              		.cfi_startproc
 19378              		@ args = 0, pretend = 0, frame = 0
 19379              		@ frame_needed = 0, uses_anonymous_args = 0
 19380              		@ link register save eliminated.
3312:src/xeq.c     **** 	else	clr_user_flag(n);
 19381              		.loc 1 3312 2 view .LVU5045
ARM GAS  /tmp/ccK8IvWa.s 			page 519


3312:src/xeq.c     **** 	else	clr_user_flag(n);
 19382              		.loc 1 3312 5 is_stmt 0 view .LVU5046
 19383 0000 11B1     		cbz	r1, .L1400
3312:src/xeq.c     **** 	else	clr_user_flag(n);
 19384              		.loc 1 3312 9 is_stmt 1 discriminator 1 view .LVU5047
 19385 0002 5121     		movs	r1, #81
 19386              	.LVL1512:
3312:src/xeq.c     **** 	else	clr_user_flag(n);
 19387              		.loc 1 3312 9 is_stmt 0 discriminator 1 view .LVU5048
 19388 0004 FFF7FEBF 		b	cmdflag
 19389              	.LVL1513:
 19390              	.L1400:
3313:src/xeq.c     **** }
 19391              		.loc 1 3313 7 is_stmt 1 view .LVU5049
 19392 0008 5221     		movs	r1, #82
 19393              	.LVL1514:
3313:src/xeq.c     **** }
 19394              		.loc 1 3313 7 is_stmt 0 view .LVU5050
 19395 000a FFF7FEBF 		b	cmdflag
 19396              	.LVL1515:
3313:src/xeq.c     **** }
 19397              		.loc 1 3313 7 view .LVU5051
 19398              		.cfi_endproc
 19399              	.LFE192:
 19401 000e 00BF     		.section	.text.clrflags,"ax",%progbits
 19402              		.align	1
 19403              		.p2align 2,,3
 19404              		.global	clrflags
 19405              		.syntax unified
 19406              		.thumb
 19407              		.thumb_func
 19408              		.fpu fpv4-sp-d16
 19410              	clrflags:
 19411              	.LVL1516:
 19412              	.LFB194:
3371:src/xeq.c     **** 	xset(UserFlags, 0, sizeof(UserFlags));
 19413              		.loc 1 3371 30 is_stmt 1 view -0
 19414              		.cfi_startproc
 19415              		@ args = 0, pretend = 0, frame = 0
 19416              		@ frame_needed = 0, uses_anonymous_args = 0
3372:src/xeq.c     **** 	if (LocalRegs < 0) {
 19417              		.loc 1 3372 2 view .LVU5053
3371:src/xeq.c     **** 	xset(UserFlags, 0, sizeof(UserFlags));
 19418              		.loc 1 3371 30 is_stmt 0 view .LVU5054
 19419 0000 08B5     		push	{r3, lr}
 19420              		.cfi_def_cfa_offset 8
 19421              		.cfi_offset 3, -8
 19422              		.cfi_offset 14, -4
3372:src/xeq.c     **** 	if (LocalRegs < 0) {
 19423              		.loc 1 3372 2 view .LVU5055
 19424 0002 0948     		ldr	r0, .L1405
 19425              	.LVL1517:
3372:src/xeq.c     **** 	if (LocalRegs < 0) {
 19426              		.loc 1 3372 2 view .LVU5056
 19427 0004 0E22     		movs	r2, #14
 19428 0006 0021     		movs	r1, #0
 19429 0008 FFF7FEFF 		bl	xset
ARM GAS  /tmp/ccK8IvWa.s 			page 520


 19430              	.LVL1518:
3373:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
 19431              		.loc 1 3373 2 is_stmt 1 view .LVU5057
3373:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
 19432              		.loc 1 3373 6 is_stmt 0 view .LVU5058
 19433 000c 074B     		ldr	r3, .L1405+4
3373:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
 19434              		.loc 1 3373 5 view .LVU5059
 19435 000e B3F9DE37 		ldrsh	r3, [r3, #2014]
 19436 0012 002B     		cmp	r3, #0
 19437 0014 00DB     		blt	.L1404
3376:src/xeq.c     **** 
 19438              		.loc 1 3376 1 view .LVU5060
 19439 0016 08BD     		pop	{r3, pc}
 19440              	.L1404:
3374:src/xeq.c     **** 	}
 19441              		.loc 1 3374 3 is_stmt 1 view .LVU5061
3374:src/xeq.c     **** 	}
 19442              		.loc 1 3374 5 is_stmt 0 view .LVU5062
 19443 0018 0021     		movs	r1, #0
 19444 001a 7020     		movs	r0, #112
 19445 001c FFF7FEFF 		bl	flag_word
 19446              	.LVL1519:
3374:src/xeq.c     **** 	}
 19447              		.loc 1 3374 37 view .LVU5063
 19448 0020 0023     		movs	r3, #0
 19449 0022 0380     		strh	r3, [r0]	@ movhi
3376:src/xeq.c     **** 
 19450              		.loc 1 3376 1 view .LVU5064
 19451 0024 08BD     		pop	{r3, pc}
 19452              	.L1406:
 19453 0026 00BF     		.align	2
 19454              	.L1405:
 19455 0028 F0070000 		.word	PersistentRam+2032
 19456 002c 00000000 		.word	PersistentRam
 19457              		.cfi_endproc
 19458              	.LFE194:
 19460              		.section	.text.intws,"ax",%progbits
 19461              		.align	1
 19462              		.p2align 2,,3
 19463              		.global	intws
 19464              		.syntax unified
 19465              		.thumb
 19466              		.thumb_func
 19467              		.fpu fpv4-sp-d16
 19469              	intws:
 19470              	.LVL1520:
 19471              	.LFB195:
3381:src/xeq.c     **** 	if (is_intmode()) {
 19472              		.loc 1 3381 44 is_stmt 1 view -0
 19473              		.cfi_startproc
 19474              		@ args = 0, pretend = 0, frame = 8
 19475              		@ frame_needed = 0, uses_anonymous_args = 0
3382:src/xeq.c     **** 		int i, ss = stack_size();
 19476              		.loc 1 3382 2 view .LVU5066
3381:src/xeq.c     **** 	if (is_intmode()) {
 19477              		.loc 1 3381 44 is_stmt 0 view .LVU5067
ARM GAS  /tmp/ccK8IvWa.s 			page 521


 19478 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 19479              		.cfi_def_cfa_offset 24
 19480              		.cfi_offset 4, -24
 19481              		.cfi_offset 5, -20
 19482              		.cfi_offset 6, -16
 19483              		.cfi_offset 7, -12
 19484              		.cfi_offset 8, -8
 19485              		.cfi_offset 14, -4
3382:src/xeq.c     **** 		int i, ss = stack_size();
 19486              		.loc 1 3382 6 view .LVU5068
 19487 0004 354C     		ldr	r4, .L1418
 19488 0006 94F8E837 		ldrb	r3, [r4, #2024]	@ zero_extendqisi2
3382:src/xeq.c     **** 		int i, ss = stack_size();
 19489              		.loc 1 3382 5 view .LVU5069
 19490 000a DA07     		lsls	r2, r3, #31
3381:src/xeq.c     **** 	if (is_intmode()) {
 19491              		.loc 1 3381 44 view .LVU5070
 19492 000c 82B0     		sub	sp, sp, #8
 19493              		.cfi_def_cfa_offset 32
3382:src/xeq.c     **** 		int i, ss = stack_size();
 19494              		.loc 1 3382 5 view .LVU5071
 19495 000e 4FD5     		bpl	.L1408
 19496              	.LBB3024:
3383:src/xeq.c     **** 		unsigned int oldlen = UState.int_len;
 19497              		.loc 1 3383 3 is_stmt 1 view .LVU5072
 19498              	.LBB3025:
 19499              	.LBI3025:
 689:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 19500              		.loc 1 689 5 view .LVU5073
 19501              	.LBB3026:
 690:src/xeq.c     **** 		return 4;
 19502              		.loc 1 690 2 view .LVU5074
 690:src/xeq.c     **** 		return 4;
 19503              		.loc 1 690 6 is_stmt 0 view .LVU5075
 19504 0010 94F8EA37 		ldrb	r3, [r4, #2026]	@ zero_extendqisi2
 690:src/xeq.c     **** 		return 4;
 19505              		.loc 1 690 5 view .LVU5076
 19506 0014 1B07     		lsls	r3, r3, #28
 19507 0016 54D5     		bpl	.L1412
 19508              	.LBB3027:
 19509              	.LBI3027:
 181:src/xeq.c     **** 	return isXROM(state_pc());
 19510              		.loc 1 181 5 is_stmt 1 view .LVU5077
 19511              	.LBB3028:
 182:src/xeq.c     **** }
 19512              		.loc 1 182 2 view .LVU5078
 182:src/xeq.c     **** }
 19513              		.loc 1 182 9 is_stmt 0 view .LVU5079
 19514 0018 B4F8E037 		ldrh	r3, [r4, #2016]
 19515              	.LBE3028:
 19516              	.LBE3027:
 690:src/xeq.c     **** 		return 4;
 19517              		.loc 1 690 27 view .LVU5080
 19518 001c 9B0B     		lsrs	r3, r3, #14
 19519 001e 032B     		cmp	r3, #3
 19520 0020 52D0     		beq	.L1417
 692:src/xeq.c     **** }
ARM GAS  /tmp/ccK8IvWa.s 			page 522


 19521              		.loc 1 692 9 view .LVU5081
 19522 0022 4FF00808 		mov	r8, #8
 19523              	.L1409:
 19524              	.LVL1521:
 692:src/xeq.c     **** }
 19525              		.loc 1 692 9 view .LVU5082
 19526              	.LBE3026:
 19527              	.LBE3025:
3384:src/xeq.c     **** 		long long int v;
 19528              		.loc 1 3384 3 is_stmt 1 view .LVU5083
3384:src/xeq.c     **** 		long long int v;
 19529              		.loc 1 3384 31 is_stmt 0 view .LVU5084
 19530 0026 94F8E977 		ldrb	r7, [r4, #2025]	@ zero_extendqisi2
 19531 002a 00F03F06 		and	r6, r0, #63
 19532 002e 08F16408 		add	r8, r8, #100
 19533              	.LVL1522:
3384:src/xeq.c     **** 		long long int v;
 19534              		.loc 1 3384 31 view .LVU5085
 19535 0032 07F03F07 		and	r7, r7, #63
 19536              	.LVL1523:
3385:src/xeq.c     **** 
 19537              		.loc 1 3385 3 is_stmt 1 view .LVU5086
3387:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 19538              		.loc 1 3387 3 view .LVU5087
3387:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 19539              		.loc 1 3387 13 view .LVU5088
3384:src/xeq.c     **** 		long long int v;
 19540              		.loc 1 3384 31 is_stmt 0 view .LVU5089
 19541 0036 6425     		movs	r5, #100
 19542              	.LVL1524:
 19543              	.L1410:
3388:src/xeq.c     **** 			UState.int_len = arg;
 19544              		.loc 1 3388 4 is_stmt 1 discriminator 3 view .LVU5090
3388:src/xeq.c     **** 			UState.int_len = arg;
 19545              		.loc 1 3388 8 is_stmt 0 discriminator 3 view .LVU5091
 19546 0038 2846     		mov	r0, r5
 19547 003a FFF7FEFF 		bl	get_reg_n_int
 19548              	.LVL1525:
 19549 003e FFF7FEFF 		bl	mask_value
 19550              	.LVL1526:
3389:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, mask_value(v));
 19551              		.loc 1 3389 4 is_stmt 1 discriminator 3 view .LVU5092
3389:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, mask_value(v));
 19552              		.loc 1 3389 19 is_stmt 0 discriminator 3 view .LVU5093
 19553 0042 94F8E937 		ldrb	r3, [r4, #2025]	@ zero_extendqisi2
 19554 0046 66F30503 		bfi	r3, r6, #0, #6
 19555 004a 84F8E937 		strb	r3, [r4, #2025]
3390:src/xeq.c     **** 			UState.int_len = oldlen;
 19556              		.loc 1 3390 4 is_stmt 1 discriminator 3 view .LVU5094
 19557 004e FFF7FEFF 		bl	mask_value
 19558              	.LVL1527:
3390:src/xeq.c     **** 			UState.int_len = oldlen;
 19559              		.loc 1 3390 4 is_stmt 0 discriminator 3 view .LVU5095
 19560 0052 0B46     		mov	r3, r1
 19561 0054 0246     		mov	r2, r0
 19562              	.LBB3030:
 19563              	.LBB3031:
ARM GAS  /tmp/ccK8IvWa.s 			page 523


1223:src/xeq.c     **** }
 19564              		.loc 1 1223 8 discriminator 3 view .LVU5096
 19565 0056 2846     		mov	r0, r5
 19566 0058 CDE90023 		strd	r2, [sp]
 19567              	.LVL1528:
1223:src/xeq.c     **** }
 19568              		.loc 1 1223 8 discriminator 3 view .LVU5097
 19569              	.LBE3031:
 19570              	.LBI3030:
1222:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 19571              		.loc 1 1222 6 is_stmt 1 discriminator 3 view .LVU5098
 19572              	.LBB3032:
1223:src/xeq.c     **** }
 19573              		.loc 1 1223 2 discriminator 3 view .LVU5099
1223:src/xeq.c     **** }
 19574              		.loc 1 1223 8 is_stmt 0 discriminator 3 view .LVU5100
 19575 005c FFF7FEFF 		bl	get_reg_n
 19576              	.LVL1529:
1223:src/xeq.c     **** }
 19577              		.loc 1 1223 2 discriminator 3 view .LVU5101
 19578 0060 0822     		movs	r2, #8
 19579 0062 6946     		mov	r1, sp
 19580 0064 FFF7FEFF 		bl	xcopy
 19581              	.LVL1530:
1223:src/xeq.c     **** }
 19582              		.loc 1 1223 2 discriminator 3 view .LVU5102
 19583              	.LBE3032:
 19584              	.LBE3030:
3391:src/xeq.c     **** 		}
 19585              		.loc 1 3391 4 is_stmt 1 discriminator 3 view .LVU5103
3391:src/xeq.c     **** 		}
 19586              		.loc 1 3391 19 is_stmt 0 discriminator 3 view .LVU5104
 19587 0068 94F8E937 		ldrb	r3, [r4, #2025]	@ zero_extendqisi2
 19588 006c 0135     		adds	r5, r5, #1
 19589              	.LVL1531:
3391:src/xeq.c     **** 		}
 19590              		.loc 1 3391 19 discriminator 3 view .LVU5105
 19591 006e 67F30503 		bfi	r3, r7, #0, #6
3387:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 19592              		.loc 1 3387 3 discriminator 3 view .LVU5106
 19593 0072 4545     		cmp	r5, r8
3391:src/xeq.c     **** 		}
 19594              		.loc 1 3391 19 discriminator 3 view .LVU5107
 19595 0074 84F8E937 		strb	r3, [r4, #2025]
3387:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 19596              		.loc 1 3387 19 is_stmt 1 discriminator 3 view .LVU5108
 19597              	.LVL1532:
3387:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 19598              		.loc 1 3387 13 discriminator 3 view .LVU5109
3387:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 19599              		.loc 1 3387 3 is_stmt 0 discriminator 3 view .LVU5110
 19600 0078 DED1     		bne	.L1410
3393:src/xeq.c     **** 		UState.int_len = arg;
 19601              		.loc 1 3393 3 is_stmt 1 view .LVU5111
3393:src/xeq.c     **** 		UState.int_len = arg;
 19602              		.loc 1 3393 7 is_stmt 0 view .LVU5112
 19603 007a 6C20     		movs	r0, #108
ARM GAS  /tmp/ccK8IvWa.s 			page 524


 19604 007c FFF7FEFF 		bl	get_reg_n_int
 19605              	.LVL1533:
 19606 0080 FFF7FEFF 		bl	mask_value
 19607              	.LVL1534:
3394:src/xeq.c     **** 		set_reg_n_int(regL_idx, mask_value(v));
 19608              		.loc 1 3394 3 is_stmt 1 view .LVU5113
3394:src/xeq.c     **** 		set_reg_n_int(regL_idx, mask_value(v));
 19609              		.loc 1 3394 18 is_stmt 0 view .LVU5114
 19610 0084 94F8E937 		ldrb	r3, [r4, #2025]	@ zero_extendqisi2
 19611 0088 66F30503 		bfi	r3, r6, #0, #6
 19612 008c 84F8E937 		strb	r3, [r4, #2025]
3395:src/xeq.c     **** 	} else
 19613              		.loc 1 3395 3 is_stmt 1 view .LVU5115
 19614 0090 FFF7FEFF 		bl	mask_value
 19615              	.LVL1535:
3395:src/xeq.c     **** 	} else
 19616              		.loc 1 3395 3 is_stmt 0 view .LVU5116
 19617 0094 0B46     		mov	r3, r1
 19618 0096 0246     		mov	r2, r0
 19619              	.LBB3033:
 19620              	.LBB3034:
1223:src/xeq.c     **** }
 19621              		.loc 1 1223 8 view .LVU5117
 19622 0098 6C20     		movs	r0, #108
 19623 009a CDE90023 		strd	r2, [sp]
 19624              	.LVL1536:
1223:src/xeq.c     **** }
 19625              		.loc 1 1223 8 view .LVU5118
 19626              	.LBE3034:
 19627              	.LBI3033:
1222:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 19628              		.loc 1 1222 6 is_stmt 1 view .LVU5119
 19629              	.LBB3035:
1223:src/xeq.c     **** }
 19630              		.loc 1 1223 2 view .LVU5120
1223:src/xeq.c     **** }
 19631              		.loc 1 1223 8 is_stmt 0 view .LVU5121
 19632 009e FFF7FEFF 		bl	get_reg_n
 19633              	.LVL1537:
1223:src/xeq.c     **** }
 19634              		.loc 1 1223 2 view .LVU5122
 19635 00a2 6946     		mov	r1, sp
 19636 00a4 0822     		movs	r2, #8
 19637 00a6 FFF7FEFF 		bl	xcopy
 19638              	.LVL1538:
1223:src/xeq.c     **** }
 19639              		.loc 1 1223 2 view .LVU5123
 19640              	.LBE3035:
 19641              	.LBE3033:
 19642              	.LBE3024:
3398:src/xeq.c     **** 
 19643              		.loc 1 3398 1 view .LVU5124
 19644 00aa 02B0     		add	sp, sp, #8
 19645              		.cfi_remember_state
 19646              		.cfi_def_cfa_offset 24
 19647              		@ sp needed
 19648 00ac BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
ARM GAS  /tmp/ccK8IvWa.s 			page 525


 19649              	.LVL1539:
 19650              	.L1408:
 19651              		.cfi_restore_state
3397:src/xeq.c     **** }
 19652              		.loc 1 3397 6 is_stmt 1 view .LVU5125
3397:src/xeq.c     **** }
 19653              		.loc 1 3397 21 is_stmt 0 view .LVU5126
 19654 00b0 94F8E937 		ldrb	r3, [r4, #2025]	@ zero_extendqisi2
 19655 00b4 60F30503 		bfi	r3, r0, #0, #6
 19656              	.LVL1540:
3397:src/xeq.c     **** }
 19657              		.loc 1 3397 21 view .LVU5127
 19658 00b8 84F8E937 		strb	r3, [r4, #2025]
3398:src/xeq.c     **** 
 19659              		.loc 1 3398 1 view .LVU5128
 19660 00bc 02B0     		add	sp, sp, #8
 19661              		.cfi_remember_state
 19662              		.cfi_def_cfa_offset 24
 19663              		@ sp needed
 19664 00be BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 19665              	.LVL1541:
 19666              	.L1412:
 19667              		.cfi_restore_state
 19668              	.LBB3037:
 19669              	.LBB3036:
 19670              	.LBB3029:
 691:src/xeq.c     **** 	return 8;
 19671              		.loc 1 691 10 view .LVU5129
 19672 00c2 4FF00408 		mov	r8, #4
 19673 00c6 AEE7     		b	.L1409
 19674              	.L1417:
 690:src/xeq.c     **** 		return 4;
 19675              		.loc 1 690 44 view .LVU5130
 19676 00c8 054B     		ldr	r3, .L1418+4
 690:src/xeq.c     **** 		return 4;
 19677              		.loc 1 690 41 view .LVU5131
 19678 00ca 93F90130 		ldrsb	r3, [r3, #1]
 691:src/xeq.c     **** 	return 8;
 19679              		.loc 1 691 10 view .LVU5132
 19680 00ce 002B     		cmp	r3, #0
 19681 00d0 B4BF     		ite	lt
 19682 00d2 4FF00808 		movlt	r8, #8
 19683 00d6 4FF00408 		movge	r8, #4
 19684 00da A4E7     		b	.L1409
 19685              	.L1419:
 19686              		.align	2
 19687              	.L1418:
 19688 00dc 00000000 		.word	PersistentRam
 19689 00e0 00000000 		.word	XromParams
 19690              	.LBE3029:
 19691              	.LBE3036:
 19692              	.LBE3037:
 19693              		.cfi_endproc
 19694              	.LFE195:
 19696              		.section	.text.get_maxdenom,"ax",%progbits
 19697              		.align	1
 19698              		.p2align 2,,3
ARM GAS  /tmp/ccK8IvWa.s 			page 526


 19699              		.global	get_maxdenom
 19700              		.syntax unified
 19701              		.thumb
 19702              		.thumb_func
 19703              		.fpu fpv4-sp-d16
 19705              	get_maxdenom:
 19706              	.LVL1542:
 19707              	.LFB196:
3404:src/xeq.c     **** 	const unsigned int dm = UState.denom_max;
 19708              		.loc 1 3404 33 is_stmt 1 view -0
 19709              		.cfi_startproc
 19710              		@ args = 0, pretend = 0, frame = 0
 19711              		@ frame_needed = 0, uses_anonymous_args = 0
 19712              		@ link register save eliminated.
3405:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
 19713              		.loc 1 3405 2 view .LVU5134
3405:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
 19714              		.loc 1 3405 32 is_stmt 0 view .LVU5135
 19715 0000 054B     		ldr	r3, .L1422
 19716 0002 D3F8E417 		ldr	r1, [r3, #2020]
3406:src/xeq.c     **** }
 19717              		.loc 1 3406 2 view .LVU5136
 19718 0006 42F20F73 		movw	r3, #9999
3405:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
 19719              		.loc 1 3405 32 view .LVU5137
 19720 000a C1F38D11 		ubfx	r1, r1, #6, #14
 19721              	.LVL1543:
3406:src/xeq.c     **** }
 19722              		.loc 1 3406 2 is_stmt 1 view .LVU5138
 19723 000e 0029     		cmp	r1, #0
 19724 0010 08BF     		it	eq
 19725 0012 1946     		moveq	r1, r3
 19726 0014 FFF7FEBF 		b	int_to_dn
 19727              	.LVL1544:
 19728              	.L1423:
3406:src/xeq.c     **** }
 19729              		.loc 1 3406 2 is_stmt 0 view .LVU5139
 19730              		.align	2
 19731              	.L1422:
 19732 0018 00000000 		.word	PersistentRam
 19733              		.cfi_endproc
 19734              	.LFE196:
 19736              		.section	.rodata.op_2frac.str1.4,"aMS",%progbits,1
 19737              		.align	2
 19738              	.LC4:
 19739 0000 792F7820 		.ascii	"y/x =\000"
 19739      3D00
 19740 0006 0000     		.align	2
 19741              	.LC5:
 19742 0008 792F7820 		.ascii	"y/x \007\344<\000"
 19742      07E43C00 
 19743              		.align	2
 19744              	.LC6:
 19745 0010 792F7820 		.ascii	"y/x \007\344>\000"
 19745      07E43E00 
 19746              		.section	.text.op_2frac,"ax",%progbits
 19747              		.align	1
ARM GAS  /tmp/ccK8IvWa.s 			page 527


 19748              		.p2align 2,,3
 19749              		.global	op_2frac
 19750              		.syntax unified
 19751              		.thumb
 19752              		.thumb_func
 19753              		.fpu fpv4-sp-d16
 19755              	op_2frac:
 19756              	.LVL1545:
 19757              	.LFB197:
3409:src/xeq.c     **** 	decNumber z, n, d, t;
 19758              		.loc 1 3409 30 is_stmt 1 view -0
 19759              		.cfi_startproc
 19760              		@ args = 0, pretend = 0, frame = 144
 19761              		@ frame_needed = 0, uses_anonymous_args = 0
3410:src/xeq.c     **** 
 19762              		.loc 1 3410 2 view .LVU5141
3412:src/xeq.c     **** 		setX_int(1);
 19763              		.loc 1 3412 2 view .LVU5142
3409:src/xeq.c     **** 	decNumber z, n, d, t;
 19764              		.loc 1 3409 30 is_stmt 0 view .LVU5143
 19765 0000 00B5     		push	{lr}
 19766              		.cfi_def_cfa_offset 4
 19767              		.cfi_offset 14, -4
3412:src/xeq.c     **** 		setX_int(1);
 19768              		.loc 1 3412 6 view .LVU5144
 19769 0002 224B     		ldr	r3, .L1436
 19770 0004 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3412:src/xeq.c     **** 		setX_int(1);
 19771              		.loc 1 3412 5 view .LVU5145
 19772 0008 DA07     		lsls	r2, r3, #31
3409:src/xeq.c     **** 	decNumber z, n, d, t;
 19773              		.loc 1 3409 30 view .LVU5146
 19774 000a A5B0     		sub	sp, sp, #148
 19775              		.cfi_def_cfa_offset 152
3412:src/xeq.c     **** 		setX_int(1);
 19776              		.loc 1 3412 5 view .LVU5147
 19777 000c 2BD4     		bmi	.L1434
3417:src/xeq.c     **** 	decNumber2Fraction(&n, &d, &z);
 19778              		.loc 1 3417 2 is_stmt 1 view .LVU5148
 19779              	.LVL1546:
 19780              	.LBB3038:
 19781              	.LBI3038:
 799:src/xeq.c     **** 	getRegister(y, regY_idx);
 19782              		.loc 1 799 6 view .LVU5149
 19783              	.LBB3039:
 800:src/xeq.c     **** }
 19784              		.loc 1 800 2 view .LVU5150
 19785 000e 6521     		movs	r1, #101
 19786 0010 6846     		mov	r0, sp
 19787              	.LVL1547:
 800:src/xeq.c     **** }
 19788              		.loc 1 800 2 is_stmt 0 view .LVU5151
 19789 0012 FFF7FEFF 		bl	getRegister
 19790              	.LVL1548:
 800:src/xeq.c     **** }
 19791              		.loc 1 800 2 view .LVU5152
 19792              	.LBE3039:
ARM GAS  /tmp/ccK8IvWa.s 			page 528


 19793              	.LBE3038:
3418:src/xeq.c     **** 	setXY(&d, &n);			// Set numerator and denominator
 19794              		.loc 1 3418 2 is_stmt 1 view .LVU5153
 19795 0016 6A46     		mov	r2, sp
 19796 0018 12A9     		add	r1, sp, #72
 19797 001a 09A8     		add	r0, sp, #36
 19798 001c FFF7FEFF 		bl	decNumber2Fraction
 19799              	.LVL1549:
3419:src/xeq.c     **** 	if (State2.runmode) {
 19800              		.loc 1 3419 2 view .LVU5154
 19801              	.LBB3040:
 19802              	.LBI3040:
 826:src/xeq.c     **** 	setX(x);
 19803              		.loc 1 826 6 view .LVU5155
 19804              	.LBE3040:
 827:src/xeq.c     **** 	setY(y);
 19805              		.loc 1 827 2 view .LVU5156
 19806              	.LBB3045:
 19807              	.LBB3041:
 19808              	.LBI3041:
 795:src/xeq.c     **** 	setRegister(regX_idx, x);
 19809              		.loc 1 795 6 view .LVU5157
 19810              	.LBB3042:
 796:src/xeq.c     **** }
 19811              		.loc 1 796 2 view .LVU5158
 19812 0020 12A9     		add	r1, sp, #72
 19813              	.LVL1550:
 796:src/xeq.c     **** }
 19814              		.loc 1 796 2 is_stmt 0 view .LVU5159
 19815 0022 6420     		movs	r0, #100
 19816 0024 FFF7FEFF 		bl	setRegister
 19817              	.LVL1551:
 796:src/xeq.c     **** }
 19818              		.loc 1 796 2 view .LVU5160
 19819              	.LBE3042:
 19820              	.LBE3041:
 19821              	.LBE3045:
 828:src/xeq.c     **** }
 19822              		.loc 1 828 2 is_stmt 1 view .LVU5161
 19823              	.LBB3046:
 19824              	.LBB3043:
 19825              	.LBI3043:
 803:src/xeq.c     **** 	setRegister(regY_idx, y);
 19826              		.loc 1 803 6 view .LVU5162
 19827              	.LBB3044:
 804:src/xeq.c     **** }
 19828              		.loc 1 804 2 view .LVU5163
 19829 0028 09A9     		add	r1, sp, #36
 19830              	.LVL1552:
 804:src/xeq.c     **** }
 19831              		.loc 1 804 2 is_stmt 0 view .LVU5164
 19832 002a 6520     		movs	r0, #101
 19833 002c FFF7FEFF 		bl	setRegister
 19834              	.LVL1553:
 804:src/xeq.c     **** }
 19835              		.loc 1 804 2 view .LVU5165
 19836              	.LBE3044:
ARM GAS  /tmp/ccK8IvWa.s 			page 529


 19837              	.LBE3043:
 19838              	.LBE3046:
3420:src/xeq.c     **** 		dn_divide(&t, &n, &d);
 19839              		.loc 1 3420 2 is_stmt 1 view .LVU5166
3420:src/xeq.c     **** 		dn_divide(&t, &n, &d);
 19840              		.loc 1 3420 6 is_stmt 0 view .LVU5167
 19841 0030 174B     		ldr	r3, .L1436+4
 19842 0032 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
3420:src/xeq.c     **** 		dn_divide(&t, &n, &d);
 19843              		.loc 1 3420 5 view .LVU5168
 19844 0034 5B06     		lsls	r3, r3, #25
 19845 0036 02D4     		bmi	.L1435
3436:src/xeq.c     **** 
 19846              		.loc 1 3436 1 view .LVU5169
 19847 0038 25B0     		add	sp, sp, #148
 19848              		.cfi_remember_state
 19849              		.cfi_def_cfa_offset 4
 19850              		@ sp needed
 19851 003a 5DF804FB 		ldr	pc, [sp], #4
 19852              	.L1435:
 19853              		.cfi_restore_state
3421:src/xeq.c     **** 		dn_compare(&n, &t, &z);
 19854              		.loc 1 3421 3 is_stmt 1 view .LVU5170
 19855 003e 12AA     		add	r2, sp, #72
 19856 0040 09A9     		add	r1, sp, #36
 19857 0042 1BA8     		add	r0, sp, #108
 19858 0044 FFF7FEFF 		bl	dn_divide
 19859              	.LVL1554:
3422:src/xeq.c     **** 		if (dn_eq0(&n))
 19860              		.loc 1 3422 3 view .LVU5171
 19861 0048 6A46     		mov	r2, sp
 19862 004a 1BA9     		add	r1, sp, #108
 19863 004c 09A8     		add	r0, sp, #36
 19864 004e FFF7FEFF 		bl	dn_compare
 19865              	.LVL1555:
3423:src/xeq.c     **** 			DispMsg = "y/x =";
 19866              		.loc 1 3423 3 view .LVU5172
3423:src/xeq.c     **** 			DispMsg = "y/x =";
 19867              		.loc 1 3423 7 is_stmt 0 view .LVU5173
 19868 0052 09A8     		add	r0, sp, #36
 19869 0054 FFF7FEFF 		bl	dn_eq0
 19870              	.LVL1556:
3423:src/xeq.c     **** 			DispMsg = "y/x =";
 19871              		.loc 1 3423 6 view .LVU5174
 19872 0058 60B1     		cbz	r0, .L1428
3424:src/xeq.c     **** 		else if (decNumberIsNegative(&n))
 19873              		.loc 1 3424 4 is_stmt 1 view .LVU5175
3424:src/xeq.c     **** 		else if (decNumberIsNegative(&n))
 19874              		.loc 1 3424 12 is_stmt 0 view .LVU5176
 19875 005a 0E4B     		ldr	r3, .L1436+8
 19876 005c 0E4A     		ldr	r2, .L1436+12
 19877 005e 1A60     		str	r2, [r3]
3436:src/xeq.c     **** 
 19878              		.loc 1 3436 1 view .LVU5177
 19879 0060 25B0     		add	sp, sp, #148
 19880              		.cfi_remember_state
 19881              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccK8IvWa.s 			page 530


 19882              		@ sp needed
 19883 0062 5DF804FB 		ldr	pc, [sp], #4
 19884              	.LVL1557:
 19885              	.L1434:
 19886              		.cfi_restore_state
3413:src/xeq.c     **** 		return;
 19887              		.loc 1 3413 3 is_stmt 1 view .LVU5178
 19888 0066 0120     		movs	r0, #1
 19889              	.LVL1558:
3413:src/xeq.c     **** 		return;
 19890              		.loc 1 3413 3 is_stmt 0 view .LVU5179
 19891 0068 0021     		movs	r1, #0
 19892 006a FFF7FEFF 		bl	setX_int
 19893              	.LVL1559:
3414:src/xeq.c     **** 	}
 19894              		.loc 1 3414 3 is_stmt 1 view .LVU5180
3436:src/xeq.c     **** 
 19895              		.loc 1 3436 1 is_stmt 0 view .LVU5181
 19896 006e 25B0     		add	sp, sp, #148
 19897              		.cfi_remember_state
 19898              		.cfi_def_cfa_offset 4
 19899              		@ sp needed
 19900 0070 5DF804FB 		ldr	pc, [sp], #4
 19901              	.L1428:
 19902              		.cfi_restore_state
3425:src/xeq.c     **** #ifdef INCLUDE_FONT_ESCAPE
 19903              		.loc 1 3425 8 is_stmt 1 view .LVU5182
3425:src/xeq.c     **** #ifdef INCLUDE_FONT_ESCAPE
 19904              		.loc 1 3425 11 is_stmt 0 view .LVU5183
 19905 0074 9DF92C30 		ldrsb	r3, [sp, #44]
 19906 0078 002B     		cmp	r3, #0
3427:src/xeq.c     **** 		else
 19907              		.loc 1 3427 12 view .LVU5184
 19908 007a B8BF     		it	lt
 19909 007c 074A     		ldrlt	r2, .L1436+16
 19910 007e 054B     		ldr	r3, .L1436+8
3427:src/xeq.c     **** 		else
 19911              		.loc 1 3427 4 is_stmt 1 view .LVU5185
3429:src/xeq.c     **** #else
 19912              		.loc 1 3429 4 view .LVU5186
3429:src/xeq.c     **** #else
 19913              		.loc 1 3429 12 is_stmt 0 view .LVU5187
 19914 0080 A8BF     		it	ge
 19915 0082 074A     		ldrge	r2, .L1436+20
 19916 0084 1A60     		str	r2, [r3]
3436:src/xeq.c     **** 
 19917              		.loc 1 3436 1 view .LVU5188
 19918 0086 25B0     		add	sp, sp, #148
 19919              		.cfi_def_cfa_offset 4
 19920              		@ sp needed
 19921 0088 5DF804FB 		ldr	pc, [sp], #4
 19922              	.L1437:
 19923              		.align	2
 19924              	.L1436:
 19925 008c 00000000 		.word	PersistentRam
 19926 0090 00000000 		.word	StateWhileOn
 19927 0094 00000000 		.word	DispMsg
ARM GAS  /tmp/ccK8IvWa.s 			page 531


 19928 0098 00000000 		.word	.LC4
 19929 009c 08000000 		.word	.LC5
 19930 00a0 10000000 		.word	.LC6
 19931              		.cfi_endproc
 19932              	.LFE197:
 19934              		.section	.text.op_fracdenom,"ax",%progbits
 19935              		.align	1
 19936              		.p2align 2,,3
 19937              		.global	op_fracdenom
 19938              		.syntax unified
 19939              		.thumb
 19940              		.thumb_func
 19941              		.fpu fpv4-sp-d16
 19943              	op_fracdenom:
 19944              	.LVL1560:
 19945              	.LFB198:
3438:src/xeq.c     **** 	int s;
 19946              		.loc 1 3438 34 is_stmt 1 view -0
 19947              		.cfi_startproc
 19948              		@ args = 0, pretend = 0, frame = 8
 19949              		@ frame_needed = 0, uses_anonymous_args = 0
3439:src/xeq.c     **** 	unsigned long long int i;
 19950              		.loc 1 3439 2 view .LVU5190
3440:src/xeq.c     **** 
 19951              		.loc 1 3440 2 view .LVU5191
3442:src/xeq.c     **** 	if (i > 9999)
 19952              		.loc 1 3442 2 view .LVU5192
3438:src/xeq.c     **** 	int s;
 19953              		.loc 1 3438 34 is_stmt 0 view .LVU5193
 19954 0000 2DE90048 		push	{fp, lr}
 19955              		.cfi_def_cfa_offset 8
 19956              		.cfi_offset 11, -8
 19957              		.cfi_offset 14, -4
 19958 0004 84B0     		sub	sp, sp, #16
 19959              		.cfi_def_cfa_offset 24
 19960              	.LVL1561:
 19961              	.LBB3047:
 19962              	.LBI3047:
1246:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 19963              		.loc 1 1246 24 is_stmt 1 view .LVU5194
 19964              	.LBB3048:
1247:src/xeq.c     **** }
 19965              		.loc 1 1247 2 view .LVU5195
1247:src/xeq.c     **** }
 19966              		.loc 1 1247 9 is_stmt 0 view .LVU5196
 19967 0006 03A9     		add	r1, sp, #12
 19968              	.LVL1562:
1247:src/xeq.c     **** }
 19969              		.loc 1 1247 9 view .LVU5197
 19970 0008 6420     		movs	r0, #100
 19971              	.LVL1563:
1247:src/xeq.c     **** }
 19972              		.loc 1 1247 9 view .LVU5198
 19973 000a FFF7FEFF 		bl	get_reg_n_int_sgn
 19974              	.LVL1564:
1247:src/xeq.c     **** }
 19975              		.loc 1 1247 9 view .LVU5199
ARM GAS  /tmp/ccK8IvWa.s 			page 532


 19976 000e 8C46     		mov	ip, r1
 19977              	.LVL1565:
1247:src/xeq.c     **** }
 19978              		.loc 1 1247 9 view .LVU5200
 19979              	.LBE3048:
 19980              	.LBE3047:
3443:src/xeq.c     **** 		UState.denom_max = 0;
 19981              		.loc 1 3443 5 view .LVU5201
 19982 0010 0021     		movs	r1, #0
 19983              	.LBB3050:
 19984              	.LBB3049:
1247:src/xeq.c     **** }
 19985              		.loc 1 1247 9 view .LVU5202
 19986 0012 8346     		mov	fp, r0
 19987              	.LVL1566:
1247:src/xeq.c     **** }
 19988              		.loc 1 1247 9 view .LVU5203
 19989              	.LBE3049:
 19990              	.LBE3050:
3443:src/xeq.c     **** 		UState.denom_max = 0;
 19991              		.loc 1 3443 2 is_stmt 1 view .LVU5204
3443:src/xeq.c     **** 		UState.denom_max = 0;
 19992              		.loc 1 3443 5 is_stmt 0 view .LVU5205
 19993 0014 6145     		cmp	r1, ip
 19994 0016 42F20F70 		movw	r0, #9999
 19995 001a 08BF     		it	eq
 19996 001c 5845     		cmpeq	r0, fp
 19997 001e 09D2     		bcs	.L1439
3444:src/xeq.c     **** 	else if (i != 1)
 19998              		.loc 1 3444 3 is_stmt 1 view .LVU5206
3444:src/xeq.c     **** 	else if (i != 1)
 19999              		.loc 1 3444 20 is_stmt 0 view .LVU5207
 20000 0020 164B     		ldr	r3, .L1443
 20001 0022 D3F8E427 		ldr	r2, [r3, #2020]
 20002 0026 6FF39312 		bfc	r2, #6, #14
 20003 002a C3F8E427 		str	r2, [r3, #2020]
3451:src/xeq.c     **** 
 20004              		.loc 1 3451 1 view .LVU5208
 20005 002e 04B0     		add	sp, sp, #16
 20006              		.cfi_remember_state
 20007              		.cfi_def_cfa_offset 8
 20008              		@ sp needed
 20009 0030 BDE80088 		pop	{fp, pc}
 20010              	.LVL1567:
 20011              	.L1439:
 20012              		.cfi_restore_state
3445:src/xeq.c     **** 		UState.denom_max = (unsigned int) i;
 20013              		.loc 1 3445 7 is_stmt 1 view .LVU5209
3445:src/xeq.c     **** 		UState.denom_max = (unsigned int) i;
 20014              		.loc 1 3445 10 is_stmt 0 view .LVU5210
 20015 0034 BCF1000F 		cmp	ip, #0
 20016 0038 08BF     		it	eq
 20017 003a BBF1010F 		cmpeq	fp, #1
 20018 003e 09D0     		beq	.L1441
3446:src/xeq.c     **** 	else {
 20019              		.loc 1 3446 3 is_stmt 1 view .LVU5211
3446:src/xeq.c     **** 	else {
ARM GAS  /tmp/ccK8IvWa.s 			page 533


 20020              		.loc 1 3446 20 is_stmt 0 view .LVU5212
 20021 0040 0E4B     		ldr	r3, .L1443
 20022 0042 D3F8E417 		ldr	r1, [r3, #2020]
 20023 0046 6BF39311 		bfi	r1, fp, #6, #14
 20024 004a C3F8E417 		str	r1, [r3, #2020]
3451:src/xeq.c     **** 
 20025              		.loc 1 3451 1 view .LVU5213
 20026 004e 04B0     		add	sp, sp, #16
 20027              		.cfi_remember_state
 20028              		.cfi_def_cfa_offset 8
 20029              		@ sp needed
 20030 0050 BDE80088 		pop	{fp, pc}
 20031              	.LVL1568:
 20032              	.L1441:
 20033              		.cfi_restore_state
3448:src/xeq.c     **** 		setX_int_sgn(UState.denom_max, 0);
 20034              		.loc 1 3448 3 is_stmt 1 view .LVU5214
 20035              	.LBB3051:
 20036              	.LBI3051:
 759:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 20037              		.loc 1 759 6 view .LVU5215
 20038              	.LBB3052:
 760:src/xeq.c     **** }
 20039              		.loc 1 760 2 view .LVU5216
 20040 0054 6421     		movs	r1, #100
 20041 0056 6C20     		movs	r0, #108
 20042 0058 FFF7FEFF 		bl	copyreg_n
 20043              	.LVL1569:
 20044              	.LBE3052:
 20045              	.LBE3051:
3449:src/xeq.c     **** 	}
 20046              		.loc 1 3449 3 view .LVU5217
 20047              	.LBB3053:
 20048              	.LBI3053:
1309:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 20049              		.loc 1 1309 6 view .LVU5218
 20050              	.LBB3054:
1310:src/xeq.c     **** }
 20051              		.loc 1 1310 2 view .LVU5219
 20052              	.LBE3054:
 20053              	.LBE3053:
3449:src/xeq.c     **** 	}
 20054              		.loc 1 3449 22 is_stmt 0 view .LVU5220
 20055 005c 074B     		ldr	r3, .L1443
 20056 005e D3F8E427 		ldr	r2, [r3, #2020]
 20057              	.LBB3057:
 20058              	.LBB3055:
1310:src/xeq.c     **** }
 20059              		.loc 1 1310 2 view .LVU5221
 20060 0062 0021     		movs	r1, #0
 20061              	.LBE3055:
 20062              	.LBE3057:
3449:src/xeq.c     **** 	}
 20063              		.loc 1 3449 22 view .LVU5222
 20064 0064 C2F38D12 		ubfx	r2, r2, #6, #14
 20065              	.LBB3058:
 20066              	.LBB3056:
ARM GAS  /tmp/ccK8IvWa.s 			page 534


1310:src/xeq.c     **** }
 20067              		.loc 1 1310 2 view .LVU5223
 20068 0068 92B2     		uxth	r2, r2
 20069 006a 0023     		movs	r3, #0
 20070 006c 0091     		str	r1, [sp]
 20071 006e 6420     		movs	r0, #100
 20072 0070 FFF7FEFF 		bl	set_reg_n_int_sgn
 20073              	.LVL1570:
1310:src/xeq.c     **** }
 20074              		.loc 1 1310 2 view .LVU5224
 20075              	.LBE3056:
 20076              	.LBE3058:
3451:src/xeq.c     **** 
 20077              		.loc 1 3451 1 view .LVU5225
 20078 0074 04B0     		add	sp, sp, #16
 20079              		.cfi_def_cfa_offset 8
 20080              		@ sp needed
 20081 0076 BDE80088 		pop	{fp, pc}
 20082              	.LVL1571:
 20083              	.L1444:
3451:src/xeq.c     **** 
 20084              		.loc 1 3451 1 view .LVU5226
 20085 007a 00BF     		.align	2
 20086              	.L1443:
 20087 007c 00000000 		.word	PersistentRam
 20088              		.cfi_endproc
 20089              	.LFE198:
 20091              		.section	.text.op_float,"ax",%progbits
 20092              		.align	1
 20093              		.p2align 2,,3
 20094              		.global	op_float
 20095              		.syntax unified
 20096              		.thumb
 20097              		.thumb_func
 20098              		.fpu fpv4-sp-d16
 20100              	op_float:
 20101              	.LVL1572:
 20102              	.LFB199:
3459:src/xeq.c     **** 
 20103              		.loc 1 3459 30 is_stmt 1 view -0
 20104              		.cfi_startproc
 20105              		@ args = 0, pretend = 0, frame = 40
 20106              		@ frame_needed = 0, uses_anonymous_args = 0
3461:src/xeq.c     **** 		int i;
 20107              		.loc 1 3461 2 view .LVU5228
3459:src/xeq.c     **** 
 20108              		.loc 1 3459 30 is_stmt 0 view .LVU5229
 20109 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 20110              		.cfi_def_cfa_offset 32
 20111              		.cfi_offset 4, -32
 20112              		.cfi_offset 5, -28
 20113              		.cfi_offset 6, -24
 20114              		.cfi_offset 7, -20
 20115              		.cfi_offset 8, -16
 20116              		.cfi_offset 9, -12
 20117              		.cfi_offset 10, -8
 20118              		.cfi_offset 14, -4
ARM GAS  /tmp/ccK8IvWa.s 			page 535


3461:src/xeq.c     **** 		int i;
 20119              		.loc 1 3461 6 view .LVU5230
 20120 0004 2D4E     		ldr	r6, .L1457
 20121 0006 96F8E837 		ldrb	r3, [r6, #2024]	@ zero_extendqisi2
3461:src/xeq.c     **** 		int i;
 20122              		.loc 1 3461 5 view .LVU5231
 20123 000a DA07     		lsls	r2, r3, #31
3459:src/xeq.c     **** 
 20124              		.loc 1 3459 30 view .LVU5232
 20125 000c 8AB0     		sub	sp, sp, #40
 20126              		.cfi_def_cfa_offset 72
3459:src/xeq.c     **** 
 20127              		.loc 1 3459 30 view .LVU5233
 20128 000e 0746     		mov	r7, r0
3461:src/xeq.c     **** 		int i;
 20129              		.loc 1 3461 5 view .LVU5234
 20130 0010 28D5     		bpl	.L1446
 20131              	.LBB3059:
3462:src/xeq.c     **** 		int mask = StackRegMask[UState.stack_depth];
 20132              		.loc 1 3462 3 is_stmt 1 view .LVU5235
3463:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 20133              		.loc 1 3463 3 view .LVU5236
3463:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 20134              		.loc 1 3463 33 is_stmt 0 view .LVU5237
 20135 0012 96F8EA37 		ldrb	r3, [r6, #2026]	@ zero_extendqisi2
3463:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 20136              		.loc 1 3463 26 view .LVU5238
 20137 0016 2A4A     		ldr	r2, .L1457+4
3463:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 20138              		.loc 1 3463 33 view .LVU5239
 20139 0018 C3F3C003 		ubfx	r3, r3, #3, #1
3464:src/xeq.c     **** 			if (mask & 1) {
 20140              		.loc 1 3464 10 view .LVU5240
 20141 001c 6424     		movs	r4, #100
3463:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 20142              		.loc 1 3463 7 view .LVU5241
 20143 001e 32F81350 		ldrh	r5, [r2, r3, lsl #1]
 20144              	.LVL1573:
3464:src/xeq.c     **** 			if (mask & 1) {
 20145              		.loc 1 3464 3 is_stmt 1 view .LVU5242
3464:src/xeq.c     **** 			if (mask & 1) {
 20146              		.loc 1 3464 22 view .LVU5243
 20147              	.LBB3060:
 20148              	.LBB3061:
 919:src/xeq.c     **** }
 20149              		.loc 1 919 24 is_stmt 0 view .LVU5244
 20150 0022 44F20108 		movw	r8, #16385
 20151              	.LBE3061:
 20152              	.LBE3060:
 20153              	.LBB3064:
 20154              	.LBB3065:
 633:src/xeq.c     **** }
 20155              		.loc 1 633 27 view .LVU5245
 20156 0026 06F58669 		add	r9, r6, #1072
 20157 002a 0BE0     		b	.L1449
 20158              	.LVL1574:
 20159              	.L1447:
ARM GAS  /tmp/ccK8IvWa.s 			page 536


 633:src/xeq.c     **** }
 20160              		.loc 1 633 27 view .LVU5246
 20161              	.LBE3065:
 20162              	.LBE3064:
 20163              	.LBB3068:
 20164              	.LBB3062:
 919:src/xeq.c     **** }
 20165              		.loc 1 919 24 view .LVU5247
 20166 002c B6F8E837 		ldrh	r3, [r6, #2024]
 20167              	.LBE3062:
 20168              	.LBE3068:
3469:src/xeq.c     **** 				// expand the other registers which have been left
 20169              		.loc 1 3469 12 view .LVU5248
 20170 0030 08EA0303 		and	r3, r8, r3
 20171 0034 B3F5804F 		cmp	r3, #16384
 20172 0038 31D0     		beq	.L1456
 20173              	.L1448:
3464:src/xeq.c     **** 			if (mask & 1) {
 20174              		.loc 1 3464 37 is_stmt 1 discriminator 2 view .LVU5249
 20175 003a 0134     		adds	r4, r4, #1
 20176              	.LVL1575:
3464:src/xeq.c     **** 			if (mask & 1) {
 20177              		.loc 1 3464 3 is_stmt 0 discriminator 2 view .LVU5250
 20178 003c 702C     		cmp	r4, #112
3464:src/xeq.c     **** 			if (mask & 1) {
 20179              		.loc 1 3464 47 discriminator 2 view .LVU5251
 20180 003e 4FEA6505 		asr	r5, r5, #1
 20181              	.LVL1576:
3464:src/xeq.c     **** 			if (mask & 1) {
 20182              		.loc 1 3464 22 is_stmt 1 discriminator 2 view .LVU5252
3464:src/xeq.c     **** 			if (mask & 1) {
 20183              		.loc 1 3464 3 is_stmt 0 discriminator 2 view .LVU5253
 20184 0042 0FD0     		beq	.L1446
 20185              	.LVL1577:
 20186              	.L1449:
3465:src/xeq.c     **** 				// register belongs to stack
 20187              		.loc 1 3465 4 is_stmt 1 view .LVU5254
3469:src/xeq.c     **** 				// expand the other registers which have been left
 20188              		.loc 1 3469 9 view .LVU5255
 20189              	.LBB3069:
 20190              	.LBI3060:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 20191              		.loc 1 918 5 view .LVU5256
 20192              	.LBB3063:
 919:src/xeq.c     **** }
 20193              		.loc 1 919 2 view .LVU5257
 20194              	.LBE3063:
 20195              	.LBE3069:
3465:src/xeq.c     **** 				// register belongs to stack
 20196              		.loc 1 3465 7 is_stmt 0 view .LVU5258
 20197 0044 EB07     		lsls	r3, r5, #31
 20198 0046 F1D5     		bpl	.L1447
3467:src/xeq.c     **** 			}
 20199              		.loc 1 3467 5 is_stmt 1 view .LVU5259
 20200 0048 A7F1C602 		sub	r2, r7, #198
 20201 004c B2FA82F2 		clz	r2, r2
 20202 0050 2146     		mov	r1, r4
ARM GAS  /tmp/ccK8IvWa.s 			page 537


 20203 0052 2046     		mov	r0, r4
 20204 0054 5209     		lsrs	r2, r2, #5
3464:src/xeq.c     **** 			if (mask & 1) {
 20205              		.loc 1 3464 37 is_stmt 0 view .LVU5260
 20206 0056 0134     		adds	r4, r4, #1
 20207              	.LVL1578:
3467:src/xeq.c     **** 			}
 20208              		.loc 1 3467 5 view .LVU5261
 20209 0058 FFF7FEFF 		bl	register_from_int
 20210              	.LVL1579:
3464:src/xeq.c     **** 			if (mask & 1) {
 20211              		.loc 1 3464 37 is_stmt 1 view .LVU5262
3464:src/xeq.c     **** 			if (mask & 1) {
 20212              		.loc 1 3464 3 is_stmt 0 view .LVU5263
 20213 005c 702C     		cmp	r4, #112
3464:src/xeq.c     **** 			if (mask & 1) {
 20214              		.loc 1 3464 47 view .LVU5264
 20215 005e 4FEA6505 		asr	r5, r5, #1
 20216              	.LVL1580:
3464:src/xeq.c     **** 			if (mask & 1) {
 20217              		.loc 1 3464 22 is_stmt 1 view .LVU5265
3464:src/xeq.c     **** 			if (mask & 1) {
 20218              		.loc 1 3464 3 is_stmt 0 view .LVU5266
 20219 0062 EFD1     		bne	.L1449
 20220              	.LVL1581:
 20221              	.L1446:
3464:src/xeq.c     **** 			if (mask & 1) {
 20222              		.loc 1 3464 3 view .LVU5267
 20223              	.LBE3059:
3476:src/xeq.c     **** 		UState.fract = 0;
 20224              		.loc 1 3476 2 is_stmt 1 view .LVU5268
3476:src/xeq.c     **** 		UState.fract = 0;
 20225              		.loc 1 3476 25 is_stmt 0 view .LVU5269
 20226 0064 07F13A03 		add	r3, r7, #58
3476:src/xeq.c     **** 		UState.fract = 0;
 20227              		.loc 1 3476 5 view .LVU5270
 20228 0068 DBB2     		uxtb	r3, r3
 20229 006a 012B     		cmp	r3, #1
 20230 006c 0FD9     		bls	.L1450
3477:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
 20231              		.loc 1 3477 3 is_stmt 1 view .LVU5271
3478:src/xeq.c     **** 	}
 20232              		.loc 1 3478 14 is_stmt 0 view .LVU5272
 20233 006e 154A     		ldr	r2, .L1457+8
3477:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
 20234              		.loc 1 3477 16 view .LVU5273
 20235 0070 96F8E637 		ldrb	r3, [r6, #2022]	@ zero_extendqisi2
3478:src/xeq.c     **** 	}
 20236              		.loc 1 3478 14 view .LVU5274
 20237 0074 D17D     		ldrb	r1, [r2, #23]	@ zero_extendqisi2
3478:src/xeq.c     **** 	}
 20238              		.loc 1 3478 35 view .LVU5275
 20239 0076 A7F15C07 		sub	r7, #92
 20240 007a B7FA87F7 		clz	r7, r7
 20241 007e 7F09     		lsrs	r7, r7, #5
3478:src/xeq.c     **** 	}
 20242              		.loc 1 3478 14 view .LVU5276
ARM GAS  /tmp/ccK8IvWa.s 			page 538


 20243 0080 67F30001 		bfi	r1, r7, #0, #1
3477:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
 20244              		.loc 1 3477 16 view .LVU5277
 20245 0084 6FF34513 		bfc	r3, #5, #1
3478:src/xeq.c     **** 	}
 20246              		.loc 1 3478 14 view .LVU5278
 20247 0088 D175     		strb	r1, [r2, #23]
3477:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
 20248              		.loc 1 3477 16 view .LVU5279
 20249 008a 86F8E637 		strb	r3, [r6, #2022]
3478:src/xeq.c     **** 	}
 20250              		.loc 1 3478 3 is_stmt 1 view .LVU5280
 20251              	.L1450:
3480:src/xeq.c     **** }
 20252              		.loc 1 3480 2 view .LVU5281
3480:src/xeq.c     **** }
 20253              		.loc 1 3480 14 is_stmt 0 view .LVU5282
 20254 008e 6420     		movs	r0, #100
 20255 0090 FFF7FEFF 		bl	get_reg_n
 20256              	.LVL1582:
3480:src/xeq.c     **** }
 20257              		.loc 1 3480 12 view .LVU5283
 20258 0094 0C4B     		ldr	r3, .L1457+12
 20259 0096 1860     		str	r0, [r3]
3481:src/xeq.c     **** 
 20260              		.loc 1 3481 1 view .LVU5284
 20261 0098 0AB0     		add	sp, sp, #40
 20262              		.cfi_remember_state
 20263              		.cfi_def_cfa_offset 32
 20264              		@ sp needed
 20265 009a BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 20266              	.LVL1583:
 20267              	.L1456:
 20268              		.cfi_restore_state
 20269              	.LBB3072:
3472:src/xeq.c     **** 			}
 20270              		.loc 1 3472 5 is_stmt 1 view .LVU5285
3472:src/xeq.c     **** 			}
 20271              		.loc 1 3472 29 is_stmt 0 view .LVU5286
 20272 009e 2046     		mov	r0, r4
 20273 00a0 FFF7FEFF 		bl	get_reg_n
 20274              	.LVL1584:
 20275              	.LBB3070:
 20276              	.LBB3066:
 633:src/xeq.c     **** }
 20277              		.loc 1 633 27 view .LVU5287
 20278 00a4 01A9     		add	r1, sp, #4
 20279              	.LBE3066:
 20280              	.LBE3070:
3472:src/xeq.c     **** 			}
 20281              		.loc 1 3472 29 view .LVU5288
 20282 00a6 8246     		mov	r10, r0
 20283              	.LVL1585:
 20284              	.LBB3071:
 20285              	.LBI3064:
 631:src/xeq.c     **** 	decNumber temp;
 20286              		.loc 1 631 6 is_stmt 1 view .LVU5289
ARM GAS  /tmp/ccK8IvWa.s 			page 539


 20287              	.LBB3067:
 632:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 20288              		.loc 1 632 2 view .LVU5290
 633:src/xeq.c     **** }
 20289              		.loc 1 633 2 view .LVU5291
 633:src/xeq.c     **** }
 20290              		.loc 1 633 27 is_stmt 0 view .LVU5292
 20291 00a8 09EBC400 		add	r0, r9, r4, lsl #3
 20292              	.LVL1586:
 633:src/xeq.c     **** }
 20293              		.loc 1 633 27 view .LVU5293
 20294 00ac FFF7FEFF 		bl	decimal64ToNumber
 20295              	.LVL1587:
 20296 00b0 0146     		mov	r1, r0
 633:src/xeq.c     **** }
 20297              		.loc 1 633 2 view .LVU5294
 20298 00b2 5046     		mov	r0, r10
 20299 00b4 FFF7FEFF 		bl	packed128_from_number
 20300              	.LVL1588:
 634:src/xeq.c     **** 
 20301              		.loc 1 634 1 view .LVU5295
 20302 00b8 BFE7     		b	.L1448
 20303              	.L1458:
 20304 00ba 00BF     		.align	2
 20305              	.L1457:
 20306 00bc 00000000 		.word	PersistentRam
 20307 00c0 00000000 		.word	.LANCHOR3
 20308 00c4 00000000 		.word	StateWhileOn
 20309 00c8 00000000 		.word	StackBase
 20310              	.LBE3067:
 20311              	.LBE3071:
 20312              	.LBE3072:
 20313              		.cfi_endproc
 20314              	.LFE199:
 20316              		.section	.text.cmddisp,"ax",%progbits
 20317              		.align	1
 20318              		.p2align 2,,3
 20319              		.global	cmddisp
 20320              		.syntax unified
 20321              		.thumb
 20322              		.thumb_func
 20323              		.fpu fpv4-sp-d16
 20325              	cmddisp:
 20326              	.LVL1589:
 20327              	.LFB165:
2230:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
 20328              		.loc 1 2230 46 is_stmt 1 view -0
 20329              		.cfi_startproc
 20330              		@ args = 0, pretend = 0, frame = 0
 20331              		@ frame_needed = 0, uses_anonymous_args = 0
 20332              		@ link register save eliminated.
2243:src/xeq.c     **** 	if (op != RARG_DISP)
 20333              		.loc 1 2243 2 view .LVU5297
2243:src/xeq.c     **** 	if (op != RARG_DISP)
 20334              		.loc 1 2243 18 is_stmt 0 view .LVU5298
 20335 0000 094B     		ldr	r3, .L1464
 20336 0002 93F8E727 		ldrb	r2, [r3, #2023]	@ zero_extendqisi2
ARM GAS  /tmp/ccK8IvWa.s 			page 540


2244:src/xeq.c     **** 		UState.dispmode = (op - RARG_STD) + MODE_STD;
 20337              		.loc 1 2244 5 view .LVU5299
 20338 0006 5029     		cmp	r1, #80
2243:src/xeq.c     **** 	if (op != RARG_DISP)
 20339              		.loc 1 2243 18 view .LVU5300
 20340 0008 60F30302 		bfi	r2, r0, #0, #4
 20341              	.LVL1590:
2243:src/xeq.c     **** 	if (op != RARG_DISP)
 20342              		.loc 1 2243 18 view .LVU5301
 20343 000c 83F8E727 		strb	r2, [r3, #2023]
2244:src/xeq.c     **** 		UState.dispmode = (op - RARG_STD) + MODE_STD;
 20344              		.loc 1 2244 2 is_stmt 1 view .LVU5302
2244:src/xeq.c     **** 		UState.dispmode = (op - RARG_STD) + MODE_STD;
 20345              		.loc 1 2244 5 is_stmt 0 view .LVU5303
 20346 0010 06D0     		beq	.L1460
2245:src/xeq.c     **** #endif
 20347              		.loc 1 2245 3 is_stmt 1 view .LVU5304
2245:src/xeq.c     **** #endif
 20348              		.loc 1 2245 19 is_stmt 0 view .LVU5305
 20349 0012 93F8E627 		ldrb	r2, [r3, #2022]	@ zero_extendqisi2
2245:src/xeq.c     **** #endif
 20350              		.loc 1 2245 37 view .LVU5306
 20351 0016 4C39     		subs	r1, r1, #76
 20352              	.LVL1591:
2245:src/xeq.c     **** #endif
 20353              		.loc 1 2245 19 view .LVU5307
 20354 0018 61F38712 		bfi	r2, r1, #6, #2
 20355 001c 83F8E627 		strb	r2, [r3, #2022]
 20356              	.L1460:
2247:src/xeq.c     **** }
 20357              		.loc 1 2247 2 is_stmt 1 view .LVU5308
 20358 0020 5B20     		movs	r0, #91
 20359 0022 FFF7FEBF 		b	op_float
 20360              	.LVL1592:
 20361              	.L1465:
 20362 0026 00BF     		.align	2
 20363              	.L1464:
 20364 0028 00000000 		.word	PersistentRam
 20365              		.cfi_endproc
 20366              	.LFE165:
 20368              		.section	.text.set_int_base,"ax",%progbits
 20369              		.align	1
 20370              		.p2align 2,,3
 20371              		.global	set_int_base
 20372              		.syntax unified
 20373              		.thumb
 20374              		.thumb_func
 20375              		.fpu fpv4-sp-d16
 20377              	set_int_base:
 20378              	.LVL1593:
 20379              	.LFB202:
3509:src/xeq.c     **** 	if (arg < 2) {
 20380              		.loc 1 3509 51 view -0
 20381              		.cfi_startproc
 20382              		@ args = 0, pretend = 0, frame = 0
 20383              		@ frame_needed = 0, uses_anonymous_args = 0
3510:src/xeq.c     **** 		if (arg == 0)
ARM GAS  /tmp/ccK8IvWa.s 			page 541


 20384              		.loc 1 3510 2 view .LVU5310
3510:src/xeq.c     **** 		if (arg == 0)
 20385              		.loc 1 3510 5 is_stmt 0 view .LVU5311
 20386 0000 0128     		cmp	r0, #1
3509:src/xeq.c     **** 	if (arg < 2) {
 20387              		.loc 1 3509 51 view .LVU5312
 20388 0002 08B5     		push	{r3, lr}
 20389              		.cfi_def_cfa_offset 8
 20390              		.cfi_offset 3, -8
 20391              		.cfi_offset 14, -4
3510:src/xeq.c     **** 		if (arg == 0)
 20392              		.loc 1 3510 5 view .LVU5313
 20393 0004 0AD9     		bls	.L1471
3516:src/xeq.c     **** }
 20394              		.loc 1 3516 3 is_stmt 1 view .LVU5314
 20395              	.LVL1594:
 20396              	.LBB3073:
 20397              	.LBI3073:
3503:src/xeq.c     **** 	UState.int_base = b - 1;
 20398              		.loc 1 3503 13 view .LVU5315
 20399              	.LBB3074:
3504:src/xeq.c     **** 	if (!is_intmode())
 20400              		.loc 1 3504 2 view .LVU5316
3504:src/xeq.c     **** 	if (!is_intmode())
 20401              		.loc 1 3504 18 is_stmt 0 view .LVU5317
 20402 0006 104A     		ldr	r2, .L1473
 20403 0008 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
3504:src/xeq.c     **** 	if (!is_intmode())
 20404              		.loc 1 3504 22 view .LVU5318
 20405 000c 0138     		subs	r0, r0, #1
 20406              	.LVL1595:
3504:src/xeq.c     **** 	if (!is_intmode())
 20407              		.loc 1 3504 18 view .LVU5319
 20408 000e 60F30713 		bfi	r3, r0, #4, #4
 20409 0012 82F8E837 		strb	r3, [r2, #2024]
3505:src/xeq.c     **** 		switch_to_int();
 20410              		.loc 1 3505 2 is_stmt 1 view .LVU5320
3505:src/xeq.c     **** 		switch_to_int();
 20411              		.loc 1 3505 5 is_stmt 0 view .LVU5321
 20412 0016 DB07     		lsls	r3, r3, #31
 20413 0018 11D5     		bpl	.L1472
 20414              	.LBE3074:
 20415              	.LBE3073:
3517:src/xeq.c     **** 
 20416              		.loc 1 3517 1 view .LVU5322
 20417 001a 08BD     		pop	{r3, pc}
 20418              	.LVL1596:
 20419              	.L1471:
3511:src/xeq.c     **** 			op_float(OP_FLOAT);
 20420              		.loc 1 3511 3 is_stmt 1 view .LVU5323
3511:src/xeq.c     **** 			op_float(OP_FLOAT);
 20421              		.loc 1 3511 6 is_stmt 0 view .LVU5324
 20422 001c 20B9     		cbnz	r0, .L1468
3512:src/xeq.c     **** 		else
 20423              		.loc 1 3512 4 is_stmt 1 view .LVU5325
3517:src/xeq.c     **** 
 20424              		.loc 1 3517 1 is_stmt 0 view .LVU5326
ARM GAS  /tmp/ccK8IvWa.s 			page 542


 20425 001e BDE80840 		pop	{r3, lr}
 20426              		.cfi_remember_state
 20427              		.cfi_restore 14
 20428              		.cfi_restore 3
 20429              		.cfi_def_cfa_offset 0
3512:src/xeq.c     **** 		else
 20430              		.loc 1 3512 4 view .LVU5327
 20431 0022 5B20     		movs	r0, #91
 20432              	.LVL1597:
3512:src/xeq.c     **** 		else
 20433              		.loc 1 3512 4 view .LVU5328
 20434 0024 FFF7FEBF 		b	op_float
 20435              	.LVL1598:
 20436              	.L1468:
 20437              		.cfi_restore_state
3514:src/xeq.c     **** 	} else
 20438              		.loc 1 3514 4 is_stmt 1 view .LVU5329
 20439              	.LBB3077:
 20440              	.LBI3077:
3520:src/xeq.c     **** 	op_float(OP_FLOAT);
 20441              		.loc 1 3520 6 view .LVU5330
 20442              	.LBB3078:
3521:src/xeq.c     **** 	UState.fract = 1;
 20443              		.loc 1 3521 2 view .LVU5331
 20444 0028 5B20     		movs	r0, #91
 20445              	.LVL1599:
3521:src/xeq.c     **** 	UState.fract = 1;
 20446              		.loc 1 3521 2 is_stmt 0 view .LVU5332
 20447 002a FFF7FEFF 		bl	op_float
 20448              	.LVL1600:
3522:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 20449              		.loc 1 3522 2 is_stmt 1 view .LVU5333
3522:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 20450              		.loc 1 3522 15 is_stmt 0 view .LVU5334
 20451 002e 064A     		ldr	r2, .L1473
 20452 0030 92F8E637 		ldrb	r3, [r2, #2022]	@ zero_extendqisi2
 20453 0034 43F02003 		orr	r3, r3, #32
 20454 0038 82F8E637 		strb	r3, [r2, #2022]
3523:src/xeq.c     **** 		UState.improperfrac = 1;
 20455              		.loc 1 3523 2 is_stmt 1 view .LVU5335
3525:src/xeq.c     **** 		UState.improperfrac = 0;
 20456              		.loc 1 3525 7 view .LVU5336
 20457              	.LBE3078:
 20458              	.LBE3077:
3517:src/xeq.c     **** 
 20459              		.loc 1 3517 1 is_stmt 0 view .LVU5337
 20460 003c 08BD     		pop	{r3, pc}
 20461              	.LVL1601:
 20462              	.L1472:
 20463              	.LBB3079:
 20464              	.LBB3075:
3506:src/xeq.c     **** }
 20465              		.loc 1 3506 3 is_stmt 1 view .LVU5338
 20466              	.LBE3075:
 20467              	.LBE3079:
3517:src/xeq.c     **** 
 20468              		.loc 1 3517 1 is_stmt 0 view .LVU5339
ARM GAS  /tmp/ccK8IvWa.s 			page 543


 20469 003e BDE80840 		pop	{r3, lr}
 20470              		.cfi_restore 14
 20471              		.cfi_restore 3
 20472              		.cfi_def_cfa_offset 0
 20473              	.LBB3080:
 20474              	.LBB3076:
3506:src/xeq.c     **** }
 20475              		.loc 1 3506 3 view .LVU5340
 20476 0042 FFF7FEBF 		b	switch_to_int
 20477              	.LVL1602:
 20478              	.L1474:
3506:src/xeq.c     **** }
 20479              		.loc 1 3506 3 view .LVU5341
 20480 0046 00BF     		.align	2
 20481              	.L1473:
 20482 0048 00000000 		.word	PersistentRam
 20483              	.LBE3076:
 20484              	.LBE3080:
 20485              		.cfi_endproc
 20486              	.LFE202:
 20488              		.section	.text.op_fract,"ax",%progbits
 20489              		.align	1
 20490              		.p2align 2,,3
 20491              		.global	op_fract
 20492              		.syntax unified
 20493              		.thumb
 20494              		.thumb_func
 20495              		.fpu fpv4-sp-d16
 20497              	op_fract:
 20498              	.LVL1603:
 20499              	.LFB203:
3520:src/xeq.c     **** 	op_float(OP_FLOAT);
 20500              		.loc 1 3520 30 is_stmt 1 view -0
 20501              		.cfi_startproc
 20502              		@ args = 0, pretend = 0, frame = 0
 20503              		@ frame_needed = 0, uses_anonymous_args = 0
3521:src/xeq.c     **** 	UState.fract = 1;
 20504              		.loc 1 3521 2 view .LVU5343
3520:src/xeq.c     **** 	op_float(OP_FLOAT);
 20505              		.loc 1 3520 30 is_stmt 0 view .LVU5344
 20506 0000 10B5     		push	{r4, lr}
 20507              		.cfi_def_cfa_offset 8
 20508              		.cfi_offset 4, -8
 20509              		.cfi_offset 14, -4
3520:src/xeq.c     **** 	op_float(OP_FLOAT);
 20510              		.loc 1 3520 30 view .LVU5345
 20511 0002 0446     		mov	r4, r0
3521:src/xeq.c     **** 	UState.fract = 1;
 20512              		.loc 1 3521 2 view .LVU5346
 20513 0004 5B20     		movs	r0, #91
 20514              	.LVL1604:
3521:src/xeq.c     **** 	UState.fract = 1;
 20515              		.loc 1 3521 2 view .LVU5347
 20516 0006 FFF7FEFF 		bl	op_float
 20517              	.LVL1605:
3522:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 20518              		.loc 1 3522 2 is_stmt 1 view .LVU5348
ARM GAS  /tmp/ccK8IvWa.s 			page 544


3522:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 20519              		.loc 1 3522 15 is_stmt 0 view .LVU5349
 20520 000a 0C4B     		ldr	r3, .L1481
 20521 000c 93F8E627 		ldrb	r2, [r3, #2022]	@ zero_extendqisi2
3523:src/xeq.c     **** 		UState.improperfrac = 1;
 20522              		.loc 1 3523 5 view .LVU5350
 20523 0010 4D2C     		cmp	r4, #77
3522:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 20524              		.loc 1 3522 15 view .LVU5351
 20525 0012 42F02002 		orr	r2, r2, #32
 20526 0016 83F8E627 		strb	r2, [r3, #2022]
3523:src/xeq.c     **** 		UState.improperfrac = 1;
 20527              		.loc 1 3523 2 is_stmt 1 view .LVU5352
3523:src/xeq.c     **** 		UState.improperfrac = 1;
 20528              		.loc 1 3523 5 is_stmt 0 view .LVU5353
 20529 001a 09D0     		beq	.L1479
3525:src/xeq.c     **** 		UState.improperfrac = 0;
 20530              		.loc 1 3525 7 is_stmt 1 view .LVU5354
3525:src/xeq.c     **** 		UState.improperfrac = 0;
 20531              		.loc 1 3525 10 is_stmt 0 view .LVU5355
 20532 001c 4E2C     		cmp	r4, #78
 20533 001e 00D0     		beq	.L1480
3527:src/xeq.c     **** 
 20534              		.loc 1 3527 1 view .LVU5356
 20535 0020 10BD     		pop	{r4, pc}
 20536              	.L1480:
3526:src/xeq.c     **** }
 20537              		.loc 1 3526 3 is_stmt 1 view .LVU5357
3526:src/xeq.c     **** }
 20538              		.loc 1 3526 23 is_stmt 0 view .LVU5358
 20539 0022 93F8E627 		ldrb	r2, [r3, #2022]	@ zero_extendqisi2
 20540 0026 6FF30412 		bfc	r2, #4, #1
 20541 002a 83F8E627 		strb	r2, [r3, #2022]
3527:src/xeq.c     **** 
 20542              		.loc 1 3527 1 view .LVU5359
 20543 002e 10BD     		pop	{r4, pc}
 20544              	.L1479:
3524:src/xeq.c     **** 	else if (op == OP_FRACPROPER)
 20545              		.loc 1 3524 3 is_stmt 1 view .LVU5360
3524:src/xeq.c     **** 	else if (op == OP_FRACPROPER)
 20546              		.loc 1 3524 23 is_stmt 0 view .LVU5361
 20547 0030 D2B2     		uxtb	r2, r2
 20548 0032 42F01002 		orr	r2, r2, #16
 20549 0036 83F8E627 		strb	r2, [r3, #2022]
3527:src/xeq.c     **** 
 20550              		.loc 1 3527 1 view .LVU5362
 20551 003a 10BD     		pop	{r4, pc}
 20552              	.L1482:
 20553              		.align	2
 20554              	.L1481:
 20555 003c 00000000 		.word	PersistentRam
 20556              		.cfi_endproc
 20557              	.LFE203:
 20559              		.section	.text.cmdsavem,"ax",%progbits
 20560              		.align	1
 20561              		.p2align 2,,3
 20562              		.global	cmdsavem
ARM GAS  /tmp/ccK8IvWa.s 			page 545


 20563              		.syntax unified
 20564              		.thumb
 20565              		.thumb_func
 20566              		.fpu fpv4-sp-d16
 20568              	cmdsavem:
 20569              	.LVL1606:
 20570              	.LFB204:
3532:src/xeq.c     **** 	xcopy( get_reg_n(arg), &UState, sizeof(unsigned long long int) );
 20571              		.loc 1 3532 47 is_stmt 1 view -0
 20572              		.cfi_startproc
 20573              		@ args = 0, pretend = 0, frame = 0
 20574              		@ frame_needed = 0, uses_anonymous_args = 0
3533:src/xeq.c     **** }
 20575              		.loc 1 3533 2 view .LVU5364
3532:src/xeq.c     **** 	xcopy( get_reg_n(arg), &UState, sizeof(unsigned long long int) );
 20576              		.loc 1 3532 47 is_stmt 0 view .LVU5365
 20577 0000 08B5     		push	{r3, lr}
 20578              		.cfi_def_cfa_offset 8
 20579              		.cfi_offset 3, -8
 20580              		.cfi_offset 14, -4
3533:src/xeq.c     **** }
 20581              		.loc 1 3533 9 view .LVU5366
 20582 0002 FFF7FEFF 		bl	get_reg_n
 20583              	.LVL1607:
3534:src/xeq.c     **** 
 20584              		.loc 1 3534 1 view .LVU5367
 20585 0006 BDE80840 		pop	{r3, lr}
 20586              		.cfi_restore 14
 20587              		.cfi_restore 3
 20588              		.cfi_def_cfa_offset 0
3533:src/xeq.c     **** }
 20589              		.loc 1 3533 2 view .LVU5368
 20590 000a 0249     		ldr	r1, .L1485
 20591 000c 0822     		movs	r2, #8
 20592 000e FFF7FEBF 		b	xcopy
 20593              	.LVL1608:
 20594              	.L1486:
 20595 0012 00BF     		.align	2
 20596              	.L1485:
 20597 0014 E4070000 		.word	PersistentRam+2020
 20598              		.cfi_endproc
 20599              	.LFE204:
 20601              		.section	.text.set_entry,"ax",%progbits
 20602              		.align	1
 20603              		.p2align 2,,3
 20604              		.global	set_entry
 20605              		.syntax unified
 20606              		.thumb
 20607              		.thumb_func
 20608              		.fpu fpv4-sp-d16
 20610              	set_entry:
 20611              	.LFB207:
3658:src/xeq.c     **** 	if (!Running && !XromRunning)
 20612              		.loc 1 3658 18 is_stmt 1 view -0
 20613              		.cfi_startproc
 20614              		@ args = 0, pretend = 0, frame = 0
 20615              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccK8IvWa.s 			page 546


 20616              		@ link register save eliminated.
3659:src/xeq.c     **** 		State.entryp = 1;
 20617              		.loc 1 3659 2 view .LVU5370
 20618              	.LBB3083:
 20619              	.LBI3083:
3658:src/xeq.c     **** 	if (!Running && !XromRunning)
 20620              		.loc 1 3658 6 view .LVU5371
 20621              	.LBE3083:
3659:src/xeq.c     **** 		State.entryp = 1;
 20622              		.loc 1 3659 6 is_stmt 0 view .LVU5372
 20623 0000 064A     		ldr	r2, .L1489
 20624              	.LBB3085:
 20625              	.LBB3084:
3659:src/xeq.c     **** 		State.entryp = 1;
 20626              		.loc 1 3659 18 view .LVU5373
 20627 0002 074B     		ldr	r3, .L1489+4
3659:src/xeq.c     **** 		State.entryp = 1;
 20628              		.loc 1 3659 15 view .LVU5374
 20629 0004 1268     		ldr	r2, [r2]
 20630 0006 1B68     		ldr	r3, [r3]
 20631 0008 1343     		orrs	r3, r2, r3
 20632 000a 06D1     		bne	.L1487
3660:src/xeq.c     **** }
 20633              		.loc 1 3660 3 is_stmt 1 view .LVU5375
3660:src/xeq.c     **** }
 20634              		.loc 1 3660 16 is_stmt 0 view .LVU5376
 20635 000c 054A     		ldr	r2, .L1489+8
 20636 000e 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
 20637 0012 43F01003 		orr	r3, r3, #16
 20638 0016 82F8DD37 		strb	r3, [r2, #2013]
 20639              	.L1487:
 20640              	.LBE3084:
 20641              	.LBE3085:
3661:src/xeq.c     **** 
 20642              		.loc 1 3661 1 view .LVU5377
 20643 001a 7047     		bx	lr
 20644              	.L1490:
 20645              		.align	2
 20646              	.L1489:
 20647 001c 00000000 		.word	Running
 20648 0020 00000000 		.word	XromRunning
 20649 0024 00000000 		.word	PersistentRam
 20650              		.cfi_endproc
 20651              	.LFE207:
 20653              		.section	.text.get_trig_mode,"ax",%progbits
 20654              		.align	1
 20655              		.p2align 2,,3
 20656              		.global	get_trig_mode
 20657              		.syntax unified
 20658              		.thumb
 20659              		.thumb_func
 20660              		.fpu fpv4-sp-d16
 20662              	get_trig_mode:
 20663              	.LFB209:
3832:src/xeq.c     **** 	if (State2.cmplx || XromFlags.xIN)
 20664              		.loc 1 3832 37 is_stmt 1 view -0
 20665              		.cfi_startproc
ARM GAS  /tmp/ccK8IvWa.s 			page 547


 20666              		@ args = 0, pretend = 0, frame = 0
 20667              		@ frame_needed = 0, uses_anonymous_args = 0
 20668              		@ link register save eliminated.
3833:src/xeq.c     **** 		return TRIG_RAD;
 20669              		.loc 1 3833 2 view .LVU5379
3833:src/xeq.c     **** 		return TRIG_RAD;
 20670              		.loc 1 3833 6 is_stmt 0 view .LVU5380
 20671 0000 074B     		ldr	r3, .L1495
 20672 0002 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
3833:src/xeq.c     **** 		return TRIG_RAD;
 20673              		.loc 1 3833 5 view .LVU5381
 20674 0004 9B07     		lsls	r3, r3, #30
 20675 0006 09D4     		bmi	.L1494
3833:src/xeq.c     **** 		return TRIG_RAD;
 20676              		.loc 1 3833 19 discriminator 1 view .LVU5382
 20677 0008 064B     		ldr	r3, .L1495+4
 20678 000a 93F90130 		ldrsb	r3, [r3, #1]
 20679 000e 002B     		cmp	r3, #0
 20680 0010 04DB     		blt	.L1494
3836:src/xeq.c     **** }
 20681              		.loc 1 3836 2 is_stmt 1 view .LVU5383
3836:src/xeq.c     **** }
 20682              		.loc 1 3836 33 is_stmt 0 view .LVU5384
 20683 0012 054B     		ldr	r3, .L1495+8
 20684 0014 93F8EA07 		ldrb	r0, [r3, #2026]	@ zero_extendqisi2
3836:src/xeq.c     **** }
 20685              		.loc 1 3836 9 view .LVU5385
 20686 0018 8009     		lsrs	r0, r0, #6
 20687 001a 7047     		bx	lr
 20688              	.L1494:
3834:src/xeq.c     **** 	//if (State2.hyp)	return TRIG_RAD;
 20689              		.loc 1 3834 10 view .LVU5386
 20690 001c 0120     		movs	r0, #1
3837:src/xeq.c     **** 
 20691              		.loc 1 3837 1 view .LVU5387
 20692 001e 7047     		bx	lr
 20693              	.L1496:
 20694              		.align	2
 20695              	.L1495:
 20696 0020 00000000 		.word	StateWhileOn
 20697 0024 00000000 		.word	XromParams
 20698 0028 00000000 		.word	PersistentRam
 20699              		.cfi_endproc
 20700              	.LFE209:
 20702              		.section	.text.cmdpause,"ax",%progbits
 20703              		.align	1
 20704              		.p2align 2,,3
 20705              		.global	cmdpause
 20706              		.syntax unified
 20707              		.thumb
 20708              		.thumb_func
 20709              		.fpu fpv4-sp-d16
 20711              	cmdpause:
 20712              	.LVL1609:
 20713              	.LFB211:
3882:src/xeq.c     **** 	display();
 20714              		.loc 1 3882 47 is_stmt 1 view -0
ARM GAS  /tmp/ccK8IvWa.s 			page 548


 20715              		.cfi_startproc
 20716              		@ args = 0, pretend = 0, frame = 0
 20717              		@ frame_needed = 0, uses_anonymous_args = 0
3883:src/xeq.c     **** #ifndef CONSOLE
 20718              		.loc 1 3883 2 view .LVU5389
3882:src/xeq.c     **** 	display();
 20719              		.loc 1 3882 47 is_stmt 0 view .LVU5390
 20720 0000 10B5     		push	{r4, lr}
 20721              		.cfi_def_cfa_offset 8
 20722              		.cfi_offset 4, -8
 20723              		.cfi_offset 14, -4
3882:src/xeq.c     **** 	display();
 20724              		.loc 1 3882 47 view .LVU5391
 20725 0002 0446     		mov	r4, r0
3883:src/xeq.c     **** #ifndef CONSOLE
 20726              		.loc 1 3883 2 view .LVU5392
 20727 0004 FFF7FEFF 		bl	display
 20728              	.LVL1610:
3886:src/xeq.c     **** 	GoFast = (arg == 0);
 20729              		.loc 1 3886 2 is_stmt 1 view .LVU5393
3886:src/xeq.c     **** 	GoFast = (arg == 0);
 20730              		.loc 1 3886 8 is_stmt 0 view .LVU5394
 20731 0008 044A     		ldr	r2, .L1499
3887:src/xeq.c     **** #elif (defined) DM42
 20732              		.loc 1 3887 9 view .LVU5395
 20733 000a 0549     		ldr	r1, .L1499+4
3887:src/xeq.c     **** #elif (defined) DM42
 20734              		.loc 1 3887 16 view .LVU5396
 20735 000c B4FA84F3 		clz	r3, r4
3886:src/xeq.c     **** 	GoFast = (arg == 0);
 20736              		.loc 1 3886 8 view .LVU5397
 20737 0010 E4B2     		uxtb	r4, r4
 20738              	.LVL1611:
3887:src/xeq.c     **** #elif (defined) DM42
 20739              		.loc 1 3887 16 view .LVU5398
 20740 0012 5B09     		lsrs	r3, r3, #5
3886:src/xeq.c     **** 	GoFast = (arg == 0);
 20741              		.loc 1 3886 8 view .LVU5399
 20742 0014 1470     		strb	r4, [r2]
3887:src/xeq.c     **** #elif (defined) DM42
 20743              		.loc 1 3887 2 is_stmt 1 view .LVU5400
3887:src/xeq.c     **** #elif (defined) DM42
 20744              		.loc 1 3887 9 is_stmt 0 view .LVU5401
 20745 0016 0B60     		str	r3, [r1]
3898:src/xeq.c     **** 
 20746              		.loc 1 3898 1 view .LVU5402
 20747 0018 10BD     		pop	{r4, pc}
 20748              	.L1500:
 20749 001a 00BF     		.align	2
 20750              	.L1499:
 20751 001c 00000000 		.word	Pause
 20752 0020 00000000 		.word	GoFast
 20753              		.cfi_endproc
 20754              	.LFE211:
 20756              		.section	.text.op_setspeed,"ax",%progbits
 20757              		.align	1
 20758              		.p2align 2,,3
ARM GAS  /tmp/ccK8IvWa.s 			page 549


 20759              		.global	op_setspeed
 20760              		.syntax unified
 20761              		.thumb
 20762              		.thumb_func
 20763              		.fpu fpv4-sp-d16
 20765              	op_setspeed:
 20766              	.LVL1612:
 20767              	.LFB212:
3902:src/xeq.c     **** 	UState.slow_speed = (op == OP_SLOW) ? 1 : 0;
 20768              		.loc 1 3902 33 is_stmt 1 view -0
 20769              		.cfi_startproc
 20770              		@ args = 0, pretend = 0, frame = 0
 20771              		@ frame_needed = 0, uses_anonymous_args = 0
 20772              		@ link register save eliminated.
3903:src/xeq.c     **** 	update_speed(1);
 20773              		.loc 1 3903 2 view .LVU5404
3903:src/xeq.c     **** 	update_speed(1);
 20774              		.loc 1 3903 20 is_stmt 0 view .LVU5405
 20775 0000 064B     		ldr	r3, .L1502
3903:src/xeq.c     **** 	update_speed(1);
 20776              		.loc 1 3903 42 view .LVU5406
 20777 0002 A0F19A00 		sub	r0, #154
 20778              	.LVL1613:
3903:src/xeq.c     **** 	update_speed(1);
 20779              		.loc 1 3903 20 view .LVU5407
 20780 0006 93F8EB27 		ldrb	r2, [r3, #2027]	@ zero_extendqisi2
3903:src/xeq.c     **** 	update_speed(1);
 20781              		.loc 1 3903 42 view .LVU5408
 20782 000a B0FA80F0 		clz	r0, r0
 20783 000e 4009     		lsrs	r0, r0, #5
3903:src/xeq.c     **** 	update_speed(1);
 20784              		.loc 1 3903 20 view .LVU5409
 20785 0010 60F3C302 		bfi	r2, r0, #3, #1
 20786 0014 83F8EB27 		strb	r2, [r3, #2027]
3904:src/xeq.c     **** }
 20787              		.loc 1 3904 17 is_stmt 1 view .LVU5410
3905:src/xeq.c     **** 
 20788              		.loc 1 3905 1 is_stmt 0 view .LVU5411
 20789 0018 7047     		bx	lr
 20790              	.L1503:
 20791 001a 00BF     		.align	2
 20792              	.L1502:
 20793 001c 00000000 		.word	PersistentRam
 20794              		.cfi_endproc
 20795              	.LFE212:
 20797              		.section	.text.op_prompt,"ax",%progbits
 20798              		.align	1
 20799              		.p2align 2,,3
 20800              		.global	op_prompt
 20801              		.syntax unified
 20802              		.thumb
 20803              		.thumb_func
 20804              		.fpu fpv4-sp-d16
 20806              	op_prompt:
 20807              	.LVL1614:
 20808              	.LFB213:
3908:src/xeq.c     **** 	set_running_off();
ARM GAS  /tmp/ccK8IvWa.s 			page 550


 20809              		.loc 1 3908 31 is_stmt 1 view -0
 20810              		.cfi_startproc
 20811              		@ args = 0, pretend = 0, frame = 0
 20812              		@ frame_needed = 0, uses_anonymous_args = 0
3909:src/xeq.c     **** 	alpha_view_common(regX_idx);
 20813              		.loc 1 3909 2 view .LVU5413
 20814              	.LBB3086:
 20815              	.LBI3086:
5560:src/xeq.c     **** 	set_running_off_sst();
 20816              		.loc 1 5560 6 view .LVU5414
 20817              	.LBB3087:
5561:src/xeq.c     **** 	State.entryp = 0;
 20818              		.loc 1 5561 2 view .LVU5415
 20819              	.LBB3088:
 20820              	.LBI3088:
5552:src/xeq.c     **** 	Running = 0;
 20821              		.loc 1 5552 6 view .LVU5416
 20822              	.LBB3089:
5553:src/xeq.c     **** }
 20823              		.loc 1 5553 2 view .LVU5417
 20824              	.LBE3089:
 20825              	.LBE3088:
 20826              	.LBE3087:
 20827              	.LBE3086:
3908:src/xeq.c     **** 	set_running_off();
 20828              		.loc 1 3908 31 is_stmt 0 view .LVU5418
 20829 0000 10B5     		push	{r4, lr}
 20830              		.cfi_def_cfa_offset 8
 20831              		.cfi_offset 4, -8
 20832              		.cfi_offset 14, -4
 20833              	.LBB3097:
 20834              	.LBB3096:
5562:src/xeq.c     **** 	dot( RCL_annun, 0);
 20835              		.loc 1 5562 15 view .LVU5419
 20836 0002 094B     		ldr	r3, .L1506
 20837              	.LBB3093:
 20838              	.LBB3090:
5553:src/xeq.c     **** }
 20839              		.loc 1 5553 10 view .LVU5420
 20840 0004 094C     		ldr	r4, .L1506+4
 20841              	.LBE3090:
 20842              	.LBE3093:
5562:src/xeq.c     **** 	dot( RCL_annun, 0);
 20843              		.loc 1 5562 15 view .LVU5421
 20844 0006 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 20845              	.LBB3094:
 20846              	.LBB3091:
5553:src/xeq.c     **** }
 20847              		.loc 1 5553 10 view .LVU5422
 20848 000a 0021     		movs	r1, #0
 20849              	.LBE3091:
 20850              	.LBE3094:
5562:src/xeq.c     **** 	dot( RCL_annun, 0);
 20851              		.loc 1 5562 15 view .LVU5423
 20852 000c 61F30412 		bfi	r2, r1, #4, #1
 20853              		.loc 1 5563 2 view .LVU5424
 20854 0010 8A20     		movs	r0, #138
ARM GAS  /tmp/ccK8IvWa.s 			page 551


 20855              	.LVL1615:
5562:src/xeq.c     **** 	dot( RCL_annun, 0);
 20856              		.loc 1 5562 15 view .LVU5425
 20857 0012 83F8DD27 		strb	r2, [r3, #2013]
 20858              	.LBB3095:
 20859              	.LBB3092:
5553:src/xeq.c     **** }
 20860              		.loc 1 5553 10 view .LVU5426
 20861 0016 2160     		str	r1, [r4]
 20862              	.LBE3092:
 20863              	.LBE3095:
5562:src/xeq.c     **** 	dot( RCL_annun, 0);
 20864              		.loc 1 5562 2 is_stmt 1 view .LVU5427
 20865              		.loc 1 5563 2 view .LVU5428
 20866 0018 FFF7FEFF 		bl	dot
 20867              	.LVL1616:
 20868              	.LBE3096:
 20869              	.LBE3097:
3910:src/xeq.c     **** }
 20870              		.loc 1 3910 2 view .LVU5429
3911:src/xeq.c     **** 
 20871              		.loc 1 3911 1 is_stmt 0 view .LVU5430
 20872 001c BDE81040 		pop	{r4, lr}
 20873              		.cfi_restore 14
 20874              		.cfi_restore 4
 20875              		.cfi_def_cfa_offset 0
3910:src/xeq.c     **** }
 20876              		.loc 1 3910 2 view .LVU5431
 20877 0020 6420     		movs	r0, #100
 20878 0022 FFF7FEBF 		b	alpha_view_common
 20879              	.LVL1617:
 20880              	.L1507:
 20881 0026 00BF     		.align	2
 20882              	.L1506:
 20883 0028 00000000 		.word	PersistentRam
 20884 002c 00000000 		.word	Running
 20885              		.cfi_endproc
 20886              	.LFE213:
 20888              		.section	.text.XisInt,"ax",%progbits
 20889              		.align	1
 20890              		.p2align 2,,3
 20891              		.global	XisInt
 20892              		.syntax unified
 20893              		.thumb
 20894              		.thumb_func
 20895              		.fpu fpv4-sp-d16
 20897              	XisInt:
 20898              	.LVL1618:
 20899              	.LFB214:
3915:src/xeq.c     **** 	decNumber x;
 20900              		.loc 1 3915 28 is_stmt 1 view -0
 20901              		.cfi_startproc
 20902              		@ args = 0, pretend = 0, frame = 40
 20903              		@ frame_needed = 0, uses_anonymous_args = 0
3916:src/xeq.c     **** 	int result, op_int = (op == OP_XisINT);
 20904              		.loc 1 3916 2 view .LVU5433
3917:src/xeq.c     **** 	if ( is_intmode() )
ARM GAS  /tmp/ccK8IvWa.s 			page 552


 20905              		.loc 1 3917 2 view .LVU5434
3915:src/xeq.c     **** 	decNumber x;
 20906              		.loc 1 3915 28 is_stmt 0 view .LVU5435
 20907 0000 30B5     		push	{r4, r5, lr}
 20908              		.cfi_def_cfa_offset 12
 20909              		.cfi_offset 4, -12
 20910              		.cfi_offset 5, -8
 20911              		.cfi_offset 14, -4
3918:src/xeq.c     **** 		result = op_int;
 20912              		.loc 1 3918 7 view .LVU5436
 20913 0002 164B     		ldr	r3, .L1514
 20914 0004 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3917:src/xeq.c     **** 	if ( is_intmode() )
 20915              		.loc 1 3917 27 view .LVU5437
 20916 0008 A0F18704 		sub	r4, r0, #135
 20917 000c B4FA84F4 		clz	r4, r4
3918:src/xeq.c     **** 		result = op_int;
 20918              		.loc 1 3918 5 view .LVU5438
 20919 0010 13F00105 		ands	r5, r3, #1
3915:src/xeq.c     **** 	decNumber x;
 20920              		.loc 1 3915 28 view .LVU5439
 20921 0014 8BB0     		sub	sp, sp, #44
 20922              		.cfi_def_cfa_offset 56
3917:src/xeq.c     **** 	if ( is_intmode() )
 20923              		.loc 1 3917 27 view .LVU5440
 20924 0016 4FEA5414 		lsr	r4, r4, #5
 20925              	.LVL1619:
3918:src/xeq.c     **** 		result = op_int;
 20926              		.loc 1 3918 2 is_stmt 1 view .LVU5441
3918:src/xeq.c     **** 		result = op_int;
 20927              		.loc 1 3918 5 is_stmt 0 view .LVU5442
 20928 001a 04D0     		beq	.L1512
 20929              	.LVL1620:
3924:src/xeq.c     **** }
 20930              		.loc 1 3924 2 is_stmt 1 view .LVU5443
 20931 001c 2046     		mov	r0, r4
 20932              	.LVL1621:
3924:src/xeq.c     **** }
 20933              		.loc 1 3924 2 is_stmt 0 view .LVU5444
 20934 001e FFF7FEFF 		bl	fin_tst
 20935              	.LVL1622:
3925:src/xeq.c     **** 
 20936              		.loc 1 3925 1 view .LVU5445
 20937 0022 0BB0     		add	sp, sp, #44
 20938              		.cfi_remember_state
 20939              		.cfi_def_cfa_offset 12
 20940              		@ sp needed
 20941 0024 30BD     		pop	{r4, r5, pc}
 20942              	.LVL1623:
 20943              	.L1512:
 20944              		.cfi_restore_state
3920:src/xeq.c     **** 		result = 0;
 20945              		.loc 1 3920 7 is_stmt 1 view .LVU5446
 20946              	.LBB3098:
 20947              	.LBI3098:
 791:src/xeq.c     **** 	return getRegister(x, regX_idx);
 20948              		.loc 1 791 12 view .LVU5447
ARM GAS  /tmp/ccK8IvWa.s 			page 553


 20949              	.LBB3099:
 792:src/xeq.c     **** }
 20950              		.loc 1 792 2 view .LVU5448
 792:src/xeq.c     **** }
 20951              		.loc 1 792 9 is_stmt 0 view .LVU5449
 20952 0026 01A8     		add	r0, sp, #4
 20953              	.LVL1624:
 792:src/xeq.c     **** }
 20954              		.loc 1 792 9 view .LVU5450
 20955 0028 6421     		movs	r1, #100
 20956 002a FFF7FEFF 		bl	getRegister
 20957              	.LVL1625:
 792:src/xeq.c     **** }
 20958              		.loc 1 792 9 view .LVU5451
 20959              	.LBE3099:
 20960              	.LBE3098:
3920:src/xeq.c     **** 		result = 0;
 20961              		.loc 1 3920 10 view .LVU5452
 20962 002e 037A     		ldrb	r3, [r0, #8]	@ zero_extendqisi2
 20963 0030 13F0700F 		tst	r3, #112
 20964 0034 05D0     		beq	.L1513
3921:src/xeq.c     **** 	else
 20965              		.loc 1 3921 10 view .LVU5453
 20966 0036 2C46     		mov	r4, r5
 20967              	.LVL1626:
3924:src/xeq.c     **** }
 20968              		.loc 1 3924 2 is_stmt 1 view .LVU5454
 20969 0038 2046     		mov	r0, r4
 20970 003a FFF7FEFF 		bl	fin_tst
 20971              	.LVL1627:
3925:src/xeq.c     **** 
 20972              		.loc 1 3925 1 is_stmt 0 view .LVU5455
 20973 003e 0BB0     		add	sp, sp, #44
 20974              		.cfi_remember_state
 20975              		.cfi_def_cfa_offset 12
 20976              		@ sp needed
 20977 0040 30BD     		pop	{r4, r5, pc}
 20978              	.LVL1628:
 20979              	.L1513:
 20980              		.cfi_restore_state
3923:src/xeq.c     **** 	fin_tst(result);
 20981              		.loc 1 3923 10 is_stmt 1 view .LVU5456
3923:src/xeq.c     **** 	fin_tst(result);
 20982              		.loc 1 3923 20 is_stmt 0 view .LVU5457
 20983 0042 01A8     		add	r0, sp, #4
 20984 0044 FFF7FEFF 		bl	is_int
 20985              	.LVL1629:
3923:src/xeq.c     **** 	fin_tst(result);
 20986              		.loc 1 3923 31 view .LVU5458
 20987 0048 041B     		subs	r4, r0, r4
 20988              	.LVL1630:
3923:src/xeq.c     **** 	fin_tst(result);
 20989              		.loc 1 3923 31 view .LVU5459
 20990 004a B4FA84F4 		clz	r4, r4
 20991 004e 6409     		lsrs	r4, r4, #5
 20992              	.LVL1631:
3924:src/xeq.c     **** }
ARM GAS  /tmp/ccK8IvWa.s 			page 554


 20993              		.loc 1 3924 2 is_stmt 1 view .LVU5460
 20994 0050 2046     		mov	r0, r4
 20995 0052 FFF7FEFF 		bl	fin_tst
 20996              	.LVL1632:
3925:src/xeq.c     **** 
 20997              		.loc 1 3925 1 is_stmt 0 view .LVU5461
 20998 0056 0BB0     		add	sp, sp, #44
 20999              		.cfi_def_cfa_offset 12
 21000              		@ sp needed
 21001 0058 30BD     		pop	{r4, r5, pc}
 21002              	.LVL1633:
 21003              	.L1515:
3925:src/xeq.c     **** 
 21004              		.loc 1 3925 1 view .LVU5462
 21005 005a 00BF     		.align	2
 21006              	.L1514:
 21007 005c 00000000 		.word	PersistentRam
 21008              		.cfi_endproc
 21009              	.LFE214:
 21011              		.section	.text.XisEvenOrOdd,"ax",%progbits
 21012              		.align	1
 21013              		.p2align 2,,3
 21014              		.global	XisEvenOrOdd
 21015              		.syntax unified
 21016              		.thumb
 21017              		.thumb_func
 21018              		.fpu fpv4-sp-d16
 21020              	XisEvenOrOdd:
 21021              	.LVL1634:
 21022              	.LFB215:
3929:src/xeq.c     **** 	decNumber x;
 21023              		.loc 1 3929 34 is_stmt 1 view -0
 21024              		.cfi_startproc
 21025              		@ args = 0, pretend = 0, frame = 40
 21026              		@ frame_needed = 0, uses_anonymous_args = 0
3930:src/xeq.c     **** 	int odd = (op == OP_XisODD);
 21027              		.loc 1 3930 2 view .LVU5464
3931:src/xeq.c     **** 
 21028              		.loc 1 3931 2 view .LVU5465
3929:src/xeq.c     **** 	decNumber x;
 21029              		.loc 1 3929 34 is_stmt 0 view .LVU5466
 21030 0000 30B5     		push	{r4, r5, lr}
 21031              		.cfi_def_cfa_offset 12
 21032              		.cfi_offset 4, -12
 21033              		.cfi_offset 5, -8
 21034              		.cfi_offset 14, -4
3933:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 21035              		.loc 1 3933 6 view .LVU5467
 21036 0002 174B     		ldr	r3, .L1520
 21037 0004 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3933:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 21038              		.loc 1 3933 5 view .LVU5468
 21039 0008 DB07     		lsls	r3, r3, #31
3929:src/xeq.c     **** 	decNumber x;
 21040              		.loc 1 3929 34 view .LVU5469
 21041 000a 8BB0     		sub	sp, sp, #44
 21042              		.cfi_def_cfa_offset 56
ARM GAS  /tmp/ccK8IvWa.s 			page 555


3929:src/xeq.c     **** 	decNumber x;
 21043              		.loc 1 3929 34 view .LVU5470
 21044 000c 0446     		mov	r4, r0
 21045              	.LVL1635:
3933:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 21046              		.loc 1 3933 2 is_stmt 1 view .LVU5471
3933:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 21047              		.loc 1 3933 5 is_stmt 0 view .LVU5472
 21048 000e 15D5     		bpl	.L1517
3934:src/xeq.c     **** 	} else {
 21049              		.loc 1 3934 3 is_stmt 1 view .LVU5473
 21050              	.LBB3100:
 21051              	.LBI3100:
1242:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 21052              		.loc 1 1242 15 view .LVU5474
 21053              	.LBB3101:
1243:src/xeq.c     **** }
 21054              		.loc 1 1243 2 view .LVU5475
1243:src/xeq.c     **** }
 21055              		.loc 1 1243 9 is_stmt 0 view .LVU5476
 21056 0010 6420     		movs	r0, #100
 21057              	.LVL1636:
1243:src/xeq.c     **** }
 21058              		.loc 1 1243 9 view .LVU5477
 21059 0012 FFF7FEFF 		bl	get_reg_n_int
 21060              	.LVL1637:
 21061              	.LBE3101:
 21062              	.LBE3100:
3931:src/xeq.c     **** 
 21063              		.loc 1 3931 16 view .LVU5478
 21064 0016 A4F18A04 		sub	r4, #138
 21065              	.LVL1638:
3934:src/xeq.c     **** 	} else {
 21066              		.loc 1 3934 23 view .LVU5479
 21067 001a 0023     		movs	r3, #0
3931:src/xeq.c     **** 
 21068              		.loc 1 3931 16 view .LVU5480
 21069 001c 0025     		movs	r5, #0
 21070 001e B4FA84F4 		clz	r4, r4
3934:src/xeq.c     **** 	} else {
 21071              		.loc 1 3934 23 view .LVU5481
 21072 0022 00F00102 		and	r2, r0, #1
3934:src/xeq.c     **** 	} else {
 21073              		.loc 1 3934 3 view .LVU5482
 21074 0026 AB42     		cmp	r3, r5
3931:src/xeq.c     **** 
 21075              		.loc 1 3931 16 view .LVU5483
 21076 0028 4FEA5414 		lsr	r4, r4, #5
3934:src/xeq.c     **** 	} else {
 21077              		.loc 1 3934 3 view .LVU5484
 21078 002c 06BF     		itte	eq
 21079 002e A242     		cmpeq	r2, r4
 21080 0030 0120     		moveq	r0, #1
 21081 0032 1846     		movne	r0, r3
 21082 0034 FFF7FEFF 		bl	fin_tst
 21083              	.LVL1639:
3938:src/xeq.c     **** 
ARM GAS  /tmp/ccK8IvWa.s 			page 556


 21084              		.loc 1 3938 1 view .LVU5485
 21085 0038 0BB0     		add	sp, sp, #44
 21086              		.cfi_remember_state
 21087              		.cfi_def_cfa_offset 12
 21088              		@ sp needed
 21089 003a 30BD     		pop	{r4, r5, pc}
 21090              	.LVL1640:
 21091              	.L1517:
 21092              		.cfi_restore_state
3936:src/xeq.c     **** 	}
 21093              		.loc 1 3936 3 is_stmt 1 view .LVU5486
 21094              	.LBB3102:
 21095              	.LBI3102:
 791:src/xeq.c     **** 	return getRegister(x, regX_idx);
 21096              		.loc 1 791 12 view .LVU5487
 21097              	.LBB3103:
 792:src/xeq.c     **** }
 21098              		.loc 1 792 2 view .LVU5488
 792:src/xeq.c     **** }
 21099              		.loc 1 792 9 is_stmt 0 view .LVU5489
 21100 003c 6421     		movs	r1, #100
 21101 003e 01A8     		add	r0, sp, #4
 21102              	.LVL1641:
 792:src/xeq.c     **** }
 21103              		.loc 1 792 9 view .LVU5490
 21104 0040 FFF7FEFF 		bl	getRegister
 21105              	.LVL1642:
 792:src/xeq.c     **** }
 21106              		.loc 1 792 9 view .LVU5491
 21107              	.LBE3103:
 21108              	.LBE3102:
3936:src/xeq.c     **** 	}
 21109              		.loc 1 3936 11 view .LVU5492
 21110 0044 FFF7FEFF 		bl	is_even
 21111              	.LVL1643:
3936:src/xeq.c     **** 	}
 21112              		.loc 1 3936 32 view .LVU5493
 21113 0048 8A3C     		subs	r4, r4, #138
 21114              	.LVL1644:
3936:src/xeq.c     **** 	}
 21115              		.loc 1 3936 32 view .LVU5494
 21116 004a 18BF     		it	ne
 21117 004c 0124     		movne	r4, #1
3936:src/xeq.c     **** 	}
 21118              		.loc 1 3936 3 view .LVU5495
 21119 004e 201A     		subs	r0, r4, r0
 21120 0050 B0FA80F0 		clz	r0, r0
 21121 0054 4009     		lsrs	r0, r0, #5
 21122 0056 FFF7FEFF 		bl	fin_tst
 21123              	.LVL1645:
3938:src/xeq.c     **** 
 21124              		.loc 1 3938 1 view .LVU5496
 21125 005a 0BB0     		add	sp, sp, #44
 21126              		.cfi_def_cfa_offset 12
 21127              		@ sp needed
 21128 005c 30BD     		pop	{r4, r5, pc}
 21129              	.L1521:
ARM GAS  /tmp/ccK8IvWa.s 			page 557


 21130 005e 00BF     		.align	2
 21131              	.L1520:
 21132 0060 00000000 		.word	PersistentRam
 21133              		.cfi_endproc
 21134              	.LFE215:
 21136              		.section	.text.XisPrime,"ax",%progbits
 21137              		.align	1
 21138              		.p2align 2,,3
 21139              		.global	XisPrime
 21140              		.syntax unified
 21141              		.thumb
 21142              		.thumb_func
 21143              		.fpu fpv4-sp-d16
 21145              	XisPrime:
 21146              	.LVL1646:
 21147              	.LFB216:
3942:src/xeq.c     **** 	unsigned long long int i;
 21148              		.loc 1 3942 30 is_stmt 1 view -0
 21149              		.cfi_startproc
 21150              		@ args = 0, pretend = 0, frame = 40
 21151              		@ frame_needed = 0, uses_anonymous_args = 0
3943:src/xeq.c     **** 	int sgn;
 21152              		.loc 1 3943 2 view .LVU5498
3944:src/xeq.c     **** 
 21153              		.loc 1 3944 2 view .LVU5499
3946:src/xeq.c     **** 	if (!is_intmode()) {
 21154              		.loc 1 3946 2 view .LVU5500
3942:src/xeq.c     **** 	unsigned long long int i;
 21155              		.loc 1 3942 30 is_stmt 0 view .LVU5501
 21156 0000 70B5     		push	{r4, r5, r6, lr}
 21157              		.cfi_def_cfa_offset 16
 21158              		.cfi_offset 4, -16
 21159              		.cfi_offset 5, -12
 21160              		.cfi_offset 6, -8
 21161              		.cfi_offset 14, -4
 21162 0002 8AB0     		sub	sp, sp, #40
 21163              		.cfi_def_cfa_offset 56
 21164              	.LVL1647:
 21165              	.LBB3104:
 21166              	.LBI3104:
1246:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 21167              		.loc 1 1246 24 is_stmt 1 view .LVU5502
 21168              	.LBB3105:
1247:src/xeq.c     **** }
 21169              		.loc 1 1247 2 view .LVU5503
1247:src/xeq.c     **** }
 21170              		.loc 1 1247 9 is_stmt 0 view .LVU5504
 21171 0004 6946     		mov	r1, sp
 21172 0006 6420     		movs	r0, #100
 21173              	.LVL1648:
1247:src/xeq.c     **** }
 21174              		.loc 1 1247 9 view .LVU5505
 21175 0008 FFF7FEFF 		bl	get_reg_n_int_sgn
 21176              	.LVL1649:
 21177              	.LBE3105:
 21178              	.LBE3104:
3947:src/xeq.c     **** 		decNumber x;
ARM GAS  /tmp/ccK8IvWa.s 			page 558


 21179              		.loc 1 3947 6 view .LVU5506
 21180 000c 1B4B     		ldr	r3, .L1532
 21181 000e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3947:src/xeq.c     **** 		decNumber x;
 21182              		.loc 1 3947 5 view .LVU5507
 21183 0012 13F00104 		ands	r4, r3, #1
 21184              	.LBB3107:
 21185              	.LBB3106:
1247:src/xeq.c     **** }
 21186              		.loc 1 1247 9 view .LVU5508
 21187 0016 0646     		mov	r6, r0
 21188 0018 0D46     		mov	r5, r1
 21189              	.LVL1650:
1247:src/xeq.c     **** }
 21190              		.loc 1 1247 9 view .LVU5509
 21191              	.LBE3106:
 21192              	.LBE3107:
3947:src/xeq.c     **** 		decNumber x;
 21193              		.loc 1 3947 2 is_stmt 1 view .LVU5510
3947:src/xeq.c     **** 		decNumber x;
 21194              		.loc 1 3947 5 is_stmt 0 view .LVU5511
 21195 001a 11D0     		beq	.L1523
 21196 001c 009B     		ldr	r3, [sp]
 21197              	.LVL1651:
 21198              	.L1524:
3957:src/xeq.c     **** }
 21199              		.loc 1 3957 2 is_stmt 1 view .LVU5512
 21200 001e 23B1     		cbz	r3, .L1531
 21201              	.L1529:
3957:src/xeq.c     **** }
 21202              		.loc 1 3957 2 is_stmt 0 view .LVU5513
 21203 0020 0020     		movs	r0, #0
 21204 0022 FFF7FEFF 		bl	fin_tst
 21205              	.LVL1652:
3958:src/xeq.c     **** 
 21206              		.loc 1 3958 1 view .LVU5514
 21207 0026 0AB0     		add	sp, sp, #40
 21208              		.cfi_remember_state
 21209              		.cfi_def_cfa_offset 16
 21210              		@ sp needed
 21211 0028 70BD     		pop	{r4, r5, r6, pc}
 21212              	.L1531:
 21213              		.cfi_restore_state
3957:src/xeq.c     **** }
 21214              		.loc 1 3957 22 discriminator 1 view .LVU5515
 21215 002a 2946     		mov	r1, r5
 21216 002c 3046     		mov	r0, r6
 21217 002e FFF7FEFF 		bl	isPrime
 21218              	.LVL1653:
3957:src/xeq.c     **** }
 21219              		.loc 1 3957 2 discriminator 1 view .LVU5516
 21220 0032 0038     		subs	r0, r0, #0
 21221 0034 18BF     		it	ne
 21222 0036 0120     		movne	r0, #1
 21223 0038 FFF7FEFF 		bl	fin_tst
 21224              	.LVL1654:
3958:src/xeq.c     **** 
ARM GAS  /tmp/ccK8IvWa.s 			page 559


 21225              		.loc 1 3958 1 discriminator 1 view .LVU5517
 21226 003c 0AB0     		add	sp, sp, #40
 21227              		.cfi_remember_state
 21228              		.cfi_def_cfa_offset 16
 21229              		@ sp needed
 21230 003e 70BD     		pop	{r4, r5, r6, pc}
 21231              	.LVL1655:
 21232              	.L1523:
 21233              		.cfi_restore_state
 21234              	.LBB3108:
3948:src/xeq.c     **** 
 21235              		.loc 1 3948 3 is_stmt 1 view .LVU5518
3950:src/xeq.c     **** 		if (decNumberIsSpecial(&x))
 21236              		.loc 1 3950 3 view .LVU5519
 21237              	.LBB3109:
 21238              	.LBI3109:
 791:src/xeq.c     **** 	return getRegister(x, regX_idx);
 21239              		.loc 1 791 12 view .LVU5520
 21240              	.LBB3110:
 792:src/xeq.c     **** }
 21241              		.loc 1 792 2 view .LVU5521
 792:src/xeq.c     **** }
 21242              		.loc 1 792 9 is_stmt 0 view .LVU5522
 21243 0040 01A8     		add	r0, sp, #4
 21244              	.LVL1656:
 792:src/xeq.c     **** }
 21245              		.loc 1 792 9 view .LVU5523
 21246 0042 6421     		movs	r1, #100
 21247 0044 FFF7FEFF 		bl	getRegister
 21248              	.LVL1657:
 792:src/xeq.c     **** }
 21249              		.loc 1 792 9 view .LVU5524
 21250              	.LBE3110:
 21251              	.LBE3109:
3951:src/xeq.c     **** 			sgn = 1; // not prime
 21252              		.loc 1 3951 3 is_stmt 1 view .LVU5525
3951:src/xeq.c     **** 			sgn = 1; // not prime
 21253              		.loc 1 3951 6 is_stmt 0 view .LVU5526
 21254 0048 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 21255 004c 13F0700F 		tst	r3, #112
 21256 0050 06D0     		beq	.L1525
3952:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 21257              		.loc 1 3952 4 is_stmt 1 view .LVU5527
3952:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 21258              		.loc 1 3952 8 is_stmt 0 view .LVU5528
 21259 0052 0123     		movs	r3, #1
 21260              	.LBE3108:
3957:src/xeq.c     **** }
 21261              		.loc 1 3957 2 view .LVU5529
 21262 0054 2046     		mov	r0, r4
 21263              	.LBB3111:
3952:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 21264              		.loc 1 3952 8 view .LVU5530
 21265 0056 0093     		str	r3, [sp]
3952:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 21266              		.loc 1 3952 8 view .LVU5531
 21267              	.LBE3111:
ARM GAS  /tmp/ccK8IvWa.s 			page 560


3957:src/xeq.c     **** }
 21268              		.loc 1 3957 2 is_stmt 1 view .LVU5532
 21269 0058 FFF7FEFF 		bl	fin_tst
 21270              	.LVL1658:
3958:src/xeq.c     **** 
 21271              		.loc 1 3958 1 is_stmt 0 view .LVU5533
 21272 005c 0AB0     		add	sp, sp, #40
 21273              		.cfi_remember_state
 21274              		.cfi_def_cfa_offset 16
 21275              		@ sp needed
 21276 005e 70BD     		pop	{r4, r5, r6, pc}
 21277              	.L1525:
 21278              		.cfi_restore_state
 21279              	.LBB3112:
3953:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
 21280              		.loc 1 3953 8 is_stmt 1 view .LVU5534
3953:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
 21281              		.loc 1 3953 12 is_stmt 0 view .LVU5535
 21282 0060 0749     		ldr	r1, .L1532+4
 21283 0062 01A8     		add	r0, sp, #4
 21284 0064 FFF7FEFF 		bl	dn_lt
 21285              	.LVL1659:
 21286 0068 009B     		ldr	r3, [sp]
3953:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
 21287              		.loc 1 3953 11 view .LVU5536
 21288 006a 0028     		cmp	r0, #0
 21289 006c D7D1     		bne	.L1524
3955:src/xeq.c     **** 	}
 21290              		.loc 1 3955 4 is_stmt 1 view .LVU5537
 21291              	.LVL1660:
3955:src/xeq.c     **** 	}
 21292              		.loc 1 3955 6 is_stmt 0 view .LVU5538
 21293 006e 4FF0FF36 		mov	r6, #-1
 21294 0072 3546     		mov	r5, r6
3955:src/xeq.c     **** 	}
 21295              		.loc 1 3955 6 view .LVU5539
 21296              	.LBE3112:
3957:src/xeq.c     **** }
 21297              		.loc 1 3957 2 is_stmt 1 view .LVU5540
 21298 0074 002B     		cmp	r3, #0
 21299 0076 D3D1     		bne	.L1529
 21300 0078 D7E7     		b	.L1531
 21301              	.L1533:
 21302 007a 00BF     		.align	2
 21303              	.L1532:
 21304 007c 00000000 		.word	PersistentRam
 21305 0080 00000000 		.word	const_2pow64
 21306              		.cfi_endproc
 21307              	.LFE216:
 21309              		.section	.text.isInfinite,"ax",%progbits
 21310              		.align	1
 21311              		.p2align 2,,3
 21312              		.global	isInfinite
 21313              		.syntax unified
 21314              		.thumb
 21315              		.thumb_func
 21316              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccK8IvWa.s 			page 561


 21318              	isInfinite:
 21319              	.LVL1661:
 21320              	.LFB217:
3962:src/xeq.c     **** 	decNumber x;
 21321              		.loc 1 3962 32 view -0
 21322              		.cfi_startproc
 21323              		@ args = 0, pretend = 0, frame = 40
 21324              		@ frame_needed = 0, uses_anonymous_args = 0
3963:src/xeq.c     **** 
 21325              		.loc 1 3963 2 view .LVU5542
3965:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsInfinite(&x));
 21326              		.loc 1 3965 2 view .LVU5543
3962:src/xeq.c     **** 	decNumber x;
 21327              		.loc 1 3962 32 is_stmt 0 view .LVU5544
 21328 0000 00B5     		push	{lr}
 21329              		.cfi_def_cfa_offset 4
 21330              		.cfi_offset 14, -4
 21331 0002 8BB0     		sub	sp, sp, #44
 21332              		.cfi_def_cfa_offset 48
 21333              	.LVL1662:
 21334              	.LBB3113:
 21335              	.LBI3113:
 791:src/xeq.c     **** 	return getRegister(x, regX_idx);
 21336              		.loc 1 791 12 is_stmt 1 view .LVU5545
 21337              	.LBB3114:
 792:src/xeq.c     **** }
 21338              		.loc 1 792 2 view .LVU5546
 792:src/xeq.c     **** }
 21339              		.loc 1 792 9 is_stmt 0 view .LVU5547
 21340 0004 6421     		movs	r1, #100
 21341 0006 01A8     		add	r0, sp, #4
 21342              	.LVL1663:
 792:src/xeq.c     **** }
 21343              		.loc 1 792 9 view .LVU5548
 21344 0008 FFF7FEFF 		bl	getRegister
 21345              	.LVL1664:
 792:src/xeq.c     **** }
 21346              		.loc 1 792 9 view .LVU5549
 21347              	.LBE3114:
 21348              	.LBE3113:
3966:src/xeq.c     **** }
 21349              		.loc 1 3966 2 is_stmt 1 view .LVU5550
3966:src/xeq.c     **** }
 21350              		.loc 1 3966 10 is_stmt 0 view .LVU5551
 21351 000c 074B     		ldr	r3, .L1538
 21352 000e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3966:src/xeq.c     **** }
 21353              		.loc 1 3966 2 view .LVU5552
 21354 0012 DB07     		lsls	r3, r3, #31
 21355 0014 56BF     		itet	pl
 21356 0016 9DF80C00 		ldrbpl	r0, [sp, #12]	@ zero_extendqisi2
 21357 001a 0020     		movmi	r0, #0
 21358 001c C0F38010 		ubfxpl	r0, r0, #6, #1
 21359 0020 FFF7FEFF 		bl	fin_tst
 21360              	.LVL1665:
3967:src/xeq.c     **** 
 21361              		.loc 1 3967 1 view .LVU5553
ARM GAS  /tmp/ccK8IvWa.s 			page 562


 21362 0024 0BB0     		add	sp, sp, #44
 21363              		.cfi_def_cfa_offset 4
 21364              		@ sp needed
 21365 0026 5DF804FB 		ldr	pc, [sp], #4
 21366              	.L1539:
 21367 002a 00BF     		.align	2
 21368              	.L1538:
 21369 002c 00000000 		.word	PersistentRam
 21370              		.cfi_endproc
 21371              	.LFE217:
 21373              		.section	.text.isNan,"ax",%progbits
 21374              		.align	1
 21375              		.p2align 2,,3
 21376              		.global	isNan
 21377              		.syntax unified
 21378              		.thumb
 21379              		.thumb_func
 21380              		.fpu fpv4-sp-d16
 21382              	isNan:
 21383              	.LVL1666:
 21384              	.LFB218:
3973:src/xeq.c     **** 	decNumber x;
 21385              		.loc 1 3973 27 is_stmt 1 view -0
 21386              		.cfi_startproc
 21387              		@ args = 0, pretend = 0, frame = 40
 21388              		@ frame_needed = 0, uses_anonymous_args = 0
3974:src/xeq.c     **** 
 21389              		.loc 1 3974 2 view .LVU5555
3976:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsNaN(&x));
 21390              		.loc 1 3976 2 view .LVU5556
3973:src/xeq.c     **** 	decNumber x;
 21391              		.loc 1 3973 27 is_stmt 0 view .LVU5557
 21392 0000 00B5     		push	{lr}
 21393              		.cfi_def_cfa_offset 4
 21394              		.cfi_offset 14, -4
 21395 0002 8BB0     		sub	sp, sp, #44
 21396              		.cfi_def_cfa_offset 48
 21397              	.LVL1667:
 21398              	.LBB3115:
 21399              	.LBI3115:
 791:src/xeq.c     **** 	return getRegister(x, regX_idx);
 21400              		.loc 1 791 12 is_stmt 1 view .LVU5558
 21401              	.LBB3116:
 792:src/xeq.c     **** }
 21402              		.loc 1 792 2 view .LVU5559
 792:src/xeq.c     **** }
 21403              		.loc 1 792 9 is_stmt 0 view .LVU5560
 21404 0004 6421     		movs	r1, #100
 21405 0006 01A8     		add	r0, sp, #4
 21406              	.LVL1668:
 792:src/xeq.c     **** }
 21407              		.loc 1 792 9 view .LVU5561
 21408 0008 FFF7FEFF 		bl	getRegister
 21409              	.LVL1669:
 792:src/xeq.c     **** }
 21410              		.loc 1 792 9 view .LVU5562
 21411              	.LBE3116:
ARM GAS  /tmp/ccK8IvWa.s 			page 563


 21412              	.LBE3115:
3977:src/xeq.c     **** }
 21413              		.loc 1 3977 2 is_stmt 1 view .LVU5563
3977:src/xeq.c     **** }
 21414              		.loc 1 3977 10 is_stmt 0 view .LVU5564
 21415 000c 0B4B     		ldr	r3, .L1544
 21416 000e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3977:src/xeq.c     **** }
 21417              		.loc 1 3977 2 view .LVU5565
 21418 0012 DB07     		lsls	r3, r3, #31
 21419 0014 0BD4     		bmi	.L1542
3977:src/xeq.c     **** }
 21420              		.loc 1 3977 2 discriminator 1 view .LVU5566
 21421 0016 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 21422 001a 13F0300F 		tst	r3, #48
 21423 001e 14BF     		ite	ne
 21424 0020 0120     		movne	r0, #1
 21425 0022 0020     		moveq	r0, #0
 21426 0024 FFF7FEFF 		bl	fin_tst
 21427              	.LVL1670:
3978:src/xeq.c     **** 
 21428              		.loc 1 3978 1 discriminator 1 view .LVU5567
 21429 0028 0BB0     		add	sp, sp, #44
 21430              		.cfi_remember_state
 21431              		.cfi_def_cfa_offset 4
 21432              		@ sp needed
 21433 002a 5DF804FB 		ldr	pc, [sp], #4
 21434              	.L1542:
 21435              		.cfi_restore_state
3977:src/xeq.c     **** }
 21436              		.loc 1 3977 2 view .LVU5568
 21437 002e 0020     		movs	r0, #0
 21438 0030 FFF7FEFF 		bl	fin_tst
 21439              	.LVL1671:
3978:src/xeq.c     **** 
 21440              		.loc 1 3978 1 view .LVU5569
 21441 0034 0BB0     		add	sp, sp, #44
 21442              		.cfi_def_cfa_offset 4
 21443              		@ sp needed
 21444 0036 5DF804FB 		ldr	pc, [sp], #4
 21445              	.L1545:
 21446 003a 00BF     		.align	2
 21447              	.L1544:
 21448 003c 00000000 		.word	PersistentRam
 21449              		.cfi_endproc
 21450              	.LFE218:
 21452              		.section	.text.isSpecial,"ax",%progbits
 21453              		.align	1
 21454              		.p2align 2,,3
 21455              		.global	isSpecial
 21456              		.syntax unified
 21457              		.thumb
 21458              		.thumb_func
 21459              		.fpu fpv4-sp-d16
 21461              	isSpecial:
 21462              	.LVL1672:
 21463              	.LFB219:
ARM GAS  /tmp/ccK8IvWa.s 			page 564


3980:src/xeq.c     **** 	decNumber x;
 21464              		.loc 1 3980 31 is_stmt 1 view -0
 21465              		.cfi_startproc
 21466              		@ args = 0, pretend = 0, frame = 40
 21467              		@ frame_needed = 0, uses_anonymous_args = 0
3981:src/xeq.c     **** 
 21468              		.loc 1 3981 2 view .LVU5571
3983:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsSpecial(&x));
 21469              		.loc 1 3983 2 view .LVU5572
3980:src/xeq.c     **** 	decNumber x;
 21470              		.loc 1 3980 31 is_stmt 0 view .LVU5573
 21471 0000 00B5     		push	{lr}
 21472              		.cfi_def_cfa_offset 4
 21473              		.cfi_offset 14, -4
 21474 0002 8BB0     		sub	sp, sp, #44
 21475              		.cfi_def_cfa_offset 48
 21476              	.LVL1673:
 21477              	.LBB3117:
 21478              	.LBI3117:
 791:src/xeq.c     **** 	return getRegister(x, regX_idx);
 21479              		.loc 1 791 12 is_stmt 1 view .LVU5574
 21480              	.LBB3118:
 792:src/xeq.c     **** }
 21481              		.loc 1 792 2 view .LVU5575
 792:src/xeq.c     **** }
 21482              		.loc 1 792 9 is_stmt 0 view .LVU5576
 21483 0004 6421     		movs	r1, #100
 21484 0006 01A8     		add	r0, sp, #4
 21485              	.LVL1674:
 792:src/xeq.c     **** }
 21486              		.loc 1 792 9 view .LVU5577
 21487 0008 FFF7FEFF 		bl	getRegister
 21488              	.LVL1675:
 792:src/xeq.c     **** }
 21489              		.loc 1 792 9 view .LVU5578
 21490              	.LBE3118:
 21491              	.LBE3117:
3984:src/xeq.c     **** }
 21492              		.loc 1 3984 2 is_stmt 1 view .LVU5579
3984:src/xeq.c     **** }
 21493              		.loc 1 3984 10 is_stmt 0 view .LVU5580
 21494 000c 0B4B     		ldr	r3, .L1550
 21495 000e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3984:src/xeq.c     **** }
 21496              		.loc 1 3984 2 view .LVU5581
 21497 0012 DB07     		lsls	r3, r3, #31
 21498 0014 0BD4     		bmi	.L1548
3984:src/xeq.c     **** }
 21499              		.loc 1 3984 2 discriminator 1 view .LVU5582
 21500 0016 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 21501 001a 13F0700F 		tst	r3, #112
 21502 001e 14BF     		ite	ne
 21503 0020 0120     		movne	r0, #1
 21504 0022 0020     		moveq	r0, #0
 21505 0024 FFF7FEFF 		bl	fin_tst
 21506              	.LVL1676:
3985:src/xeq.c     **** 
ARM GAS  /tmp/ccK8IvWa.s 			page 565


 21507              		.loc 1 3985 1 discriminator 1 view .LVU5583
 21508 0028 0BB0     		add	sp, sp, #44
 21509              		.cfi_remember_state
 21510              		.cfi_def_cfa_offset 4
 21511              		@ sp needed
 21512 002a 5DF804FB 		ldr	pc, [sp], #4
 21513              	.L1548:
 21514              		.cfi_restore_state
3984:src/xeq.c     **** }
 21515              		.loc 1 3984 2 view .LVU5584
 21516 002e 0020     		movs	r0, #0
 21517 0030 FFF7FEFF 		bl	fin_tst
 21518              	.LVL1677:
3985:src/xeq.c     **** 
 21519              		.loc 1 3985 1 view .LVU5585
 21520 0034 0BB0     		add	sp, sp, #44
 21521              		.cfi_def_cfa_offset 4
 21522              		@ sp needed
 21523 0036 5DF804FB 		ldr	pc, [sp], #4
 21524              	.L1551:
 21525 003a 00BF     		.align	2
 21526              	.L1550:
 21527 003c 00000000 		.word	PersistentRam
 21528              		.cfi_endproc
 21529              	.LFE219:
 21531              		.section	.text.op_entryp,"ax",%progbits
 21532              		.align	1
 21533              		.p2align 2,,3
 21534              		.global	op_entryp
 21535              		.syntax unified
 21536              		.thumb
 21537              		.thumb_func
 21538              		.fpu fpv4-sp-d16
 21540              	op_entryp:
 21541              	.LVL1678:
 21542              	.LFB220:
3987:src/xeq.c     **** 	fin_tst(State.entryp);
 21543              		.loc 1 3987 31 is_stmt 1 view -0
 21544              		.cfi_startproc
 21545              		@ args = 0, pretend = 0, frame = 0
 21546              		@ frame_needed = 0, uses_anonymous_args = 0
 21547              		@ link register save eliminated.
3988:src/xeq.c     **** }
 21548              		.loc 1 3988 2 view .LVU5587
3988:src/xeq.c     **** }
 21549              		.loc 1 3988 15 is_stmt 0 view .LVU5588
 21550 0000 034B     		ldr	r3, .L1553
 21551 0002 93F8DD07 		ldrb	r0, [r3, #2013]	@ zero_extendqisi2
 21552              	.LVL1679:
3988:src/xeq.c     **** }
 21553              		.loc 1 3988 2 view .LVU5589
 21554 0006 C0F30010 		ubfx	r0, r0, #4, #1
 21555 000a FFF7FEBF 		b	fin_tst
 21556              	.LVL1680:
 21557              	.L1554:
 21558 000e 00BF     		.align	2
 21559              	.L1553:
ARM GAS  /tmp/ccK8IvWa.s 			page 566


 21560 0010 00000000 		.word	PersistentRam
 21561              		.cfi_endproc
 21562              	.LFE220:
 21564              		.section	.text.reg_decode,"ax",%progbits
 21565              		.align	1
 21566              		.p2align 2,,3
 21567              		.global	reg_decode
 21568              		.syntax unified
 21569              		.thumb
 21570              		.thumb_func
 21571              		.fpu fpv4-sp-d16
 21573              	reg_decode:
 21574              	.LVL1681:
 21575              	.LFB221:
3992:src/xeq.c     **** 	decNumber x, y;
 21576              		.loc 1 3992 51 is_stmt 1 view -0
 21577              		.cfi_startproc
 21578              		@ args = 0, pretend = 0, frame = 72
 21579              		@ frame_needed = 0, uses_anonymous_args = 0
3993:src/xeq.c     **** 	int rsrc, num, rdest, q, mx_src, mx_dest;
 21580              		.loc 1 3993 2 view .LVU5591
3994:src/xeq.c     **** 
 21581              		.loc 1 3994 2 view .LVU5592
3996:src/xeq.c     **** 		bad_mode_error();
 21582              		.loc 1 3996 2 view .LVU5593
3992:src/xeq.c     **** 	decNumber x, y;
 21583              		.loc 1 3992 51 is_stmt 0 view .LVU5594
 21584 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 21585              		.cfi_def_cfa_offset 36
 21586              		.cfi_offset 4, -36
 21587              		.cfi_offset 5, -32
 21588              		.cfi_offset 6, -28
 21589              		.cfi_offset 7, -24
 21590              		.cfi_offset 8, -20
 21591              		.cfi_offset 9, -16
 21592              		.cfi_offset 10, -12
 21593              		.cfi_offset 11, -8
 21594              		.cfi_offset 14, -4
3996:src/xeq.c     **** 		bad_mode_error();
 21595              		.loc 1 3996 6 view .LVU5595
 21596 0004 DFF824A2 		ldr	r10, .L1609+28
 21597 0008 9AF8E847 		ldrb	r4, [r10, #2024]	@ zero_extendqisi2
3996:src/xeq.c     **** 		bad_mode_error();
 21598              		.loc 1 3996 5 view .LVU5596
 21599 000c 14F0010B 		ands	fp, r4, #1
3992:src/xeq.c     **** 	decNumber x, y;
 21600              		.loc 1 3992 51 view .LVU5597
 21601 0010 93B0     		sub	sp, sp, #76
 21602              		.cfi_def_cfa_offset 112
3996:src/xeq.c     **** 		bad_mode_error();
 21603              		.loc 1 3996 5 view .LVU5598
 21604 0012 0CD0     		beq	.L1556
3997:src/xeq.c     **** 		return 1;
 21605              		.loc 1 3997 3 is_stmt 1 view .LVU5599
 21606              	.LBB3161:
 21607              	.LBI3161:
 552:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
ARM GAS  /tmp/ccK8IvWa.s 			page 567


 21608              		.loc 1 552 6 view .LVU5600
 21609              	.LBE3161:
 553:src/xeq.c     **** }
 21610              		.loc 1 553 2 view .LVU5601
 21611              	.LVL1682:
 21612              	.LBB3172:
 21613              	.LBB3162:
 21614              	.LBI3162:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 21615              		.loc 1 523 5 view .LVU5602
 21616              	.LBB3163:
 524:src/xeq.c     **** 		Error = e;
 21617              		.loc 1 524 2 view .LVU5603
 524:src/xeq.c     **** 		Error = e;
 21618              		.loc 1 524 12 is_stmt 0 view .LVU5604
 21619 0014 7E4B     		ldr	r3, .L1609
 21620              	.LVL1683:
 524:src/xeq.c     **** 		Error = e;
 21621              		.loc 1 524 5 view .LVU5605
 21622 0016 1A68     		ldr	r2, [r3]
 21623              	.LVL1684:
 524:src/xeq.c     **** 		Error = e;
 21624              		.loc 1 524 5 view .LVU5606
 21625 0018 1AB1     		cbz	r2, .L1600
 21626              	.LVL1685:
 21627              	.L1584:
 524:src/xeq.c     **** 		Error = e;
 21628              		.loc 1 524 5 view .LVU5607
 21629              	.LBE3163:
 21630              	.LBE3162:
 21631              	.LBE3172:
3998:src/xeq.c     **** 	}
 21632              		.loc 1 3998 10 view .LVU5608
 21633 001a 0120     		movs	r0, #1
4070:src/xeq.c     **** 
 21634              		.loc 1 4070 1 view .LVU5609
 21635 001c 13B0     		add	sp, sp, #76
 21636              		.cfi_remember_state
 21637              		.cfi_def_cfa_offset 36
 21638              		@ sp needed
 21639 001e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 21640              	.LVL1686:
 21641              	.L1600:
 21642              		.cfi_restore_state
 21643              	.LBB3173:
 21644              	.LBB3170:
 21645              	.LBB3168:
 21646              	.LBB3164:
 21647              	.LBI3164:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 21648              		.loc 1 523 5 is_stmt 1 view .LVU5610
 21649              	.LBB3165:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 21650              		.loc 1 525 3 view .LVU5611
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 21651              		.loc 1 525 9 is_stmt 0 view .LVU5612
 21652 0022 0D22     		movs	r2, #13
ARM GAS  /tmp/ccK8IvWa.s 			page 568


 21653              	.LBE3165:
 21654              	.LBE3164:
 21655              	.LBE3168:
 21656              	.LBE3170:
 21657              	.LBE3173:
3998:src/xeq.c     **** 	}
 21658              		.loc 1 3998 10 view .LVU5613
 21659 0024 0120     		movs	r0, #1
 21660              	.LVL1687:
 21661              	.LBB3174:
 21662              	.LBB3171:
 21663              	.LBB3169:
 21664              	.LBB3167:
 21665              	.LBB3166:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 21666              		.loc 1 525 9 view .LVU5614
 21667 0026 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 21668              		.loc 1 526 3 is_stmt 1 view .LVU5615
 21669              	.LBE3166:
 21670              	.LBE3167:
 21671              	.LBE3169:
 21672              	.LBE3171:
 21673              	.LBE3174:
4070:src/xeq.c     **** 
 21674              		.loc 1 4070 1 is_stmt 0 view .LVU5616
 21675 0028 13B0     		add	sp, sp, #76
 21676              		.cfi_remember_state
 21677              		.cfi_def_cfa_offset 36
 21678              		@ sp needed
 21679 002a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 21680              	.LVL1688:
 21681              	.L1556:
 21682              		.cfi_restore_state
4070:src/xeq.c     **** 
 21683              		.loc 1 4070 1 view .LVU5617
 21684 002e 8146     		mov	r9, r0
 21685              	.LVL1689:
4070:src/xeq.c     **** 
 21686              		.loc 1 4070 1 view .LVU5618
 21687 0030 8846     		mov	r8, r1
 21688              	.LVL1690:
 21689              	.LBB3175:
 21690              	.LBB3176:
 21691              	.LBB3177:
 21692              	.LBB3178:
 792:src/xeq.c     **** }
 21693              		.loc 1 792 9 view .LVU5619
 21694 0032 6846     		mov	r0, sp
 21695              	.LVL1691:
 792:src/xeq.c     **** }
 21696              		.loc 1 792 9 view .LVU5620
 21697 0034 6421     		movs	r1, #100
 21698              	.LVL1692:
 792:src/xeq.c     **** }
 21699              		.loc 1 792 9 view .LVU5621
 21700 0036 1E46     		mov	r6, r3
ARM GAS  /tmp/ccK8IvWa.s 			page 569


 21701 0038 1746     		mov	r7, r2
 21702              	.LVL1693:
 792:src/xeq.c     **** }
 21703              		.loc 1 792 9 view .LVU5622
 21704              	.LBE3178:
 21705              	.LBE3177:
 21706              	.LBE3176:
 21707              	.LBI3175:
3992:src/xeq.c     **** 	decNumber x, y;
 21708              		.loc 1 3992 5 is_stmt 1 view .LVU5623
 21709              	.LBB3260:
4000:src/xeq.c     **** 	dn_mulpow10(&y, &x, 2 + 3);	// sssnnddd.~
 21710              		.loc 1 4000 2 view .LVU5624
 21711              	.LBB3180:
 21712              	.LBI3177:
 791:src/xeq.c     **** 	return getRegister(x, regX_idx);
 21713              		.loc 1 791 12 view .LVU5625
 21714              	.LBB3179:
 792:src/xeq.c     **** }
 21715              		.loc 1 792 2 view .LVU5626
 792:src/xeq.c     **** }
 21716              		.loc 1 792 9 is_stmt 0 view .LVU5627
 21717 003a FFF7FEFF 		bl	getRegister
 21718              	.LVL1694:
 792:src/xeq.c     **** }
 21719              		.loc 1 792 9 view .LVU5628
 21720              	.LBE3179:
 21721              	.LBE3180:
4001:src/xeq.c     **** 	decNumberTrunc(&x, &y);		// sssnnddd.0
 21722              		.loc 1 4001 2 is_stmt 1 view .LVU5629
 21723 003e 0522     		movs	r2, #5
 21724 0040 6946     		mov	r1, sp
 21725 0042 09A8     		add	r0, sp, #36
 21726 0044 FFF7FEFF 		bl	dn_mulpow10
 21727              	.LVL1695:
4002:src/xeq.c     **** 	rsrc = dn_to_int(&x);		// sssnnddd
 21728              		.loc 1 4002 2 view .LVU5630
 21729 0048 09A9     		add	r1, sp, #36
 21730 004a 6846     		mov	r0, sp
 21731 004c FFF7FEFF 		bl	decNumberTrunc
 21732              	.LVL1696:
4003:src/xeq.c     **** 
 21733              		.loc 1 4003 2 view .LVU5631
4003:src/xeq.c     **** 
 21734              		.loc 1 4003 9 is_stmt 0 view .LVU5632
 21735 0050 6846     		mov	r0, sp
 21736 0052 FFF7FEFF 		bl	dn_to_int
 21737              	.LVL1697:
4005:src/xeq.c     **** 		if (!flash)
 21738              		.loc 1 4005 2 is_stmt 1 view .LVU5633
4005:src/xeq.c     **** 		if (!flash)
 21739              		.loc 1 4005 5 is_stmt 0 view .LVU5634
 21740 0056 041E     		subs	r4, r0, #0
 21741 0058 2ADB     		blt	.L1558
 21742              	.LVL1698:
4013:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 21743              		.loc 1 4013 2 is_stmt 1 view .LVU5635
ARM GAS  /tmp/ccK8IvWa.s 			page 570


4013:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 21744              		.loc 1 4013 8 is_stmt 0 view .LVU5636
 21745 005a 6E4B     		ldr	r3, .L1609+4
4015:src/xeq.c     **** 	rsrc /= 100;			// sss
 21746              		.loc 1 4015 6 view .LVU5637
 21747 005c 6E4A     		ldr	r2, .L1609+8
4019:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 21748              		.loc 1 4019 9 view .LVU5638
 21749 005e 6F4E     		ldr	r6, .L1609+12
 21750              	.LVL1699:
4013:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 21751              		.loc 1 4013 8 view .LVU5639
 21752 0060 83FB0413 		smull	r1, r3, r3, r4
 21753 0064 E517     		asrs	r5, r4, #31
4014:src/xeq.c     **** 	num = rsrc % 100;		// nn
 21754              		.loc 1 4014 7 view .LVU5640
 21755 0066 C5EBA310 		rsb	r0, r5, r3, asr #6
 21756              	.LVL1700:
4015:src/xeq.c     **** 	rsrc /= 100;			// sss
 21757              		.loc 1 4015 6 view .LVU5641
 21758 006a A2FB0012 		umull	r1, r2, r2, r0
4013:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 21759              		.loc 1 4013 8 view .LVU5642
 21760 006e 4FF47A73 		mov	r3, #1000
4015:src/xeq.c     **** 	rsrc /= 100;			// sss
 21761              		.loc 1 4015 6 view .LVU5643
 21762 0072 5109     		lsrs	r1, r2, #5
4013:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 21763              		.loc 1 4013 8 view .LVU5644
 21764 0074 03FB1045 		mls	r5, r3, r0, r4
 21765              	.LVL1701:
4014:src/xeq.c     **** 	num = rsrc % 100;		// nn
 21766              		.loc 1 4014 2 is_stmt 1 view .LVU5645
4015:src/xeq.c     **** 	rsrc /= 100;			// sss
 21767              		.loc 1 4015 2 view .LVU5646
4019:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 21768              		.loc 1 4019 9 is_stmt 0 view .LVU5647
 21769 0078 B442     		cmp	r4, r6
4015:src/xeq.c     **** 	rsrc /= 100;			// sss
 21770              		.loc 1 4015 6 view .LVU5648
 21771 007a 4FF06403 		mov	r3, #100
4016:src/xeq.c     **** 
 21772              		.loc 1 4016 7 view .LVU5649
 21773 007e 0A46     		mov	r2, r1
4015:src/xeq.c     **** 	rsrc /= 100;			// sss
 21774              		.loc 1 4015 6 view .LVU5650
 21775 0080 03FB1101 		mls	r1, r3, r1, r0
 21776              	.LVL1702:
4016:src/xeq.c     **** 
 21777              		.loc 1 4016 2 is_stmt 1 view .LVU5651
4018:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 21778              		.loc 1 4018 2 view .LVU5652
4019:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 21779              		.loc 1 4019 9 is_stmt 0 view .LVU5653
 21780 0084 49DB     		blt	.L1601
 21781              	.LBB3181:
 21782              	.LBI3181:
ARM GAS  /tmp/ccK8IvWa.s 			page 571


 229:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 21783              		.loc 1 229 5 is_stmt 1 view .LVU5654
 21784              	.LBE3181:
 21785              	.LBE3260:
 21786              	.LBE3175:
 230:src/xeq.c     **** }
 21787              		.loc 1 230 2 view .LVU5655
 21788              	.LVL1703:
 21789              	.LBB3265:
 21790              	.LBB3261:
 21791              	.LBB3202:
 21792              	.LBB3182:
 21793              	.LBI3182:
 221:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 21794              		.loc 1 221 5 view .LVU5656
 21795              	.LBB3183:
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 21796              		.loc 1 222 2 view .LVU5657
 21797              	.LBB3184:
 21798              	.LBI3184:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 21799              		.loc 1 918 5 view .LVU5658
 21800              	.LBB3185:
 919:src/xeq.c     **** }
 21801              		.loc 1 919 2 view .LVU5659
 919:src/xeq.c     **** }
 21802              		.loc 1 919 2 is_stmt 0 view .LVU5660
 21803              	.LBE3185:
 21804              	.LBE3184:
 223:src/xeq.c     **** }
 21805              		.loc 1 223 2 is_stmt 1 view .LVU5661
 21806              	.LBB3188:
 21807              	.LBI3188:
 213:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 21808              		.loc 1 213 5 view .LVU5662
 21809              	.LBB3189:
 214:src/xeq.c     **** }
 21810              		.loc 1 214 2 view .LVU5663
 214:src/xeq.c     **** }
 21811              		.loc 1 214 9 is_stmt 0 view .LVU5664
 21812 0086 BAF9DE07 		ldrsh	r0, [r10, #2014]
 214:src/xeq.c     **** }
 21813              		.loc 1 214 57 view .LVU5665
 21814 008a 0028     		cmp	r0, #0
 21815 008c C0F28B80 		blt	.L1602
 21816 0090 4FF0700B 		mov	fp, #112
 21817              	.LVL1704:
 21818              	.L1565:
 214:src/xeq.c     **** }
 21819              		.loc 1 214 57 view .LVU5666
 21820              	.LBE3189:
 21821              	.LBE3188:
 21822              	.LBE3183:
 21823              	.LBE3182:
 21824              	.LBE3202:
4022:src/xeq.c     **** 		goto range_error;
 21825              		.loc 1 4022 5 view .LVU5667
ARM GAS  /tmp/ccK8IvWa.s 			page 572


 21826 0094 9345     		cmp	fp, r2
 21827 0096 4FF00006 		mov	r6, #0
 21828              	.LVL1705:
4022:src/xeq.c     **** 		goto range_error;
 21829              		.loc 1 4022 2 is_stmt 1 view .LVU5668
4022:src/xeq.c     **** 		goto range_error;
 21830              		.loc 1 4022 5 is_stmt 0 view .LVU5669
 21831 009a 22DC     		bgt	.L1603
 21832              	.LVL1706:
 21833              	.L1561:
 21834              	.LDL2:
4068:src/xeq.c     **** 	return 1;
 21835              		.loc 1 4068 2 is_stmt 1 view .LVU5670
 21836              	.LBB3203:
 21837              	.LBI3203:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 21838              		.loc 1 523 5 view .LVU5671
 21839              	.LBB3204:
 524:src/xeq.c     **** 		Error = e;
 21840              		.loc 1 524 2 view .LVU5672
 524:src/xeq.c     **** 		Error = e;
 21841              		.loc 1 524 12 is_stmt 0 view .LVU5673
 21842 009c 5C4B     		ldr	r3, .L1609
 524:src/xeq.c     **** 		Error = e;
 21843              		.loc 1 524 5 view .LVU5674
 21844 009e 1A68     		ldr	r2, [r3]
 21845 00a0 002A     		cmp	r2, #0
 21846 00a2 BAD1     		bne	.L1584
 21847              	.LVL1707:
 21848              	.LBB3205:
 21849              	.LBI3205:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 21850              		.loc 1 523 5 is_stmt 1 view .LVU5675
 21851              	.LBB3206:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 21852              		.loc 1 525 3 view .LVU5676
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 21853              		.loc 1 525 9 is_stmt 0 view .LVU5677
 21854 00a4 0822     		movs	r2, #8
 21855              	.LBE3206:
 21856              	.LBE3205:
 21857              	.LBE3204:
 21858              	.LBE3203:
4069:src/xeq.c     **** }
 21859              		.loc 1 4069 9 view .LVU5678
 21860 00a6 0120     		movs	r0, #1
 21861              	.LBB3210:
 21862              	.LBB3209:
 21863              	.LBB3208:
 21864              	.LBB3207:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 21865              		.loc 1 525 9 view .LVU5679
 21866 00a8 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 21867              		.loc 1 526 3 is_stmt 1 view .LVU5680
 21868              	.LBE3207:
 21869              	.LBE3208:
ARM GAS  /tmp/ccK8IvWa.s 			page 573


 21870              	.LBE3209:
 21871              	.LBE3210:
 21872              	.LBE3261:
 21873              	.LBE3265:
4070:src/xeq.c     **** 
 21874              		.loc 1 4070 1 is_stmt 0 view .LVU5681
 21875 00aa 13B0     		add	sp, sp, #76
 21876              		.cfi_remember_state
 21877              		.cfi_def_cfa_offset 36
 21878              		@ sp needed
 21879 00ac BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 21880              	.LVL1708:
 21881              	.L1558:
 21882              		.cfi_restore_state
 21883              	.LBB3266:
 21884              	.LBB3262:
4006:src/xeq.c     **** 			goto range_error;
 21885              		.loc 1 4006 3 is_stmt 1 view .LVU5682
4006:src/xeq.c     **** 			goto range_error;
 21886              		.loc 1 4006 6 is_stmt 0 view .LVU5683
 21887 00b0 002E     		cmp	r6, #0
 21888 00b2 F3D0     		beq	.L1561
4008:src/xeq.c     **** 	}
 21889              		.loc 1 4008 3 is_stmt 1 view .LVU5684
4013:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 21890              		.loc 1 4013 8 is_stmt 0 view .LVU5685
 21891 00b4 574D     		ldr	r5, .L1609+4
4015:src/xeq.c     **** 	rsrc /= 100;			// sss
 21892              		.loc 1 4015 6 view .LVU5686
 21893 00b6 584A     		ldr	r2, .L1609+8
4018:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 21894              		.loc 1 4018 30 view .LVU5687
 21895 00b8 594B     		ldr	r3, .L1609+16
4008:src/xeq.c     **** 	}
 21896              		.loc 1 4008 8 view .LVU5688
 21897 00ba 6442     		rsbs	r4, r4, #0
 21898              	.LVL1709:
4013:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 21899              		.loc 1 4013 2 is_stmt 1 view .LVU5689
4013:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 21900              		.loc 1 4013 8 is_stmt 0 view .LVU5690
 21901 00bc A5FB0415 		umull	r1, r5, r5, r4
4014:src/xeq.c     **** 	num = rsrc % 100;		// nn
 21902              		.loc 1 4014 7 view .LVU5691
 21903 00c0 A809     		lsrs	r0, r5, #6
4015:src/xeq.c     **** 	rsrc /= 100;			// sss
 21904              		.loc 1 4015 6 view .LVU5692
 21905 00c2 A2FB0012 		umull	r1, r2, r2, r0
4013:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 21906              		.loc 1 4013 8 view .LVU5693
 21907 00c6 4FF47A7C 		mov	ip, #1000
4015:src/xeq.c     **** 	rsrc /= 100;			// sss
 21908              		.loc 1 4015 6 view .LVU5694
 21909 00ca 5109     		lsrs	r1, r2, #5
4013:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 21910              		.loc 1 4013 8 view .LVU5695
 21911 00cc 0CFB1045 		mls	r5, ip, r0, r4
ARM GAS  /tmp/ccK8IvWa.s 			page 574


 21912              	.LVL1710:
4014:src/xeq.c     **** 	num = rsrc % 100;		// nn
 21913              		.loc 1 4014 2 is_stmt 1 view .LVU5696
4015:src/xeq.c     **** 	rsrc /= 100;			// sss
 21914              		.loc 1 4015 2 view .LVU5697
4019:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 21915              		.loc 1 4019 9 is_stmt 0 view .LVU5698
 21916 00d0 93F8CFB7 		ldrb	fp, [r3, #1999]	@ zero_extendqisi2
4015:src/xeq.c     **** 	rsrc /= 100;			// sss
 21917              		.loc 1 4015 6 view .LVU5699
 21918 00d4 4FF0640C 		mov	ip, #100
4016:src/xeq.c     **** 
 21919              		.loc 1 4016 7 view .LVU5700
 21920 00d8 0A46     		mov	r2, r1
4015:src/xeq.c     **** 	rsrc /= 100;			// sss
 21921              		.loc 1 4015 6 view .LVU5701
 21922 00da 0CFB1101 		mls	r1, ip, r1, r0
 21923              	.LVL1711:
4016:src/xeq.c     **** 
 21924              		.loc 1 4016 2 is_stmt 1 view .LVU5702
4018:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 21925              		.loc 1 4018 2 view .LVU5703
 21926              	.L1562:
4022:src/xeq.c     **** 		goto range_error;
 21927              		.loc 1 4022 2 view .LVU5704
4022:src/xeq.c     **** 		goto range_error;
 21928              		.loc 1 4022 5 is_stmt 0 view .LVU5705
 21929 00de 9345     		cmp	fp, r2
 21930 00e0 DCDD     		ble	.L1561
 21931              	.L1603:
4025:src/xeq.c     **** 		mx_dest = rdest >= LOCAL_REG_BASE ? local_regs() : global_regs();
 21932              		.loc 1 4025 2 is_stmt 1 view .LVU5706
4025:src/xeq.c     **** 		mx_dest = rdest >= LOCAL_REG_BASE ? local_regs() : global_regs();
 21933              		.loc 1 4025 5 is_stmt 0 view .LVU5707
 21934 00e2 47B3     		cbz	r7, .L1566
4026:src/xeq.c     **** 
 21935              		.loc 1 4026 3 is_stmt 1 view .LVU5708
4026:src/xeq.c     **** 
 21936              		.loc 1 4026 52 is_stmt 0 view .LVU5709
 21937 00e4 6F2D     		cmp	r5, #111
 21938 00e6 2ADD     		ble	.L1567
 21939              	.LBB3211:
 21940              	.LBI3211:
 229:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 21941              		.loc 1 229 5 is_stmt 1 view .LVU5710
 21942              	.LBE3211:
 21943              	.LBE3262:
 21944              	.LBE3266:
 230:src/xeq.c     **** }
 21945              		.loc 1 230 2 view .LVU5711
 21946              	.LVL1712:
 21947              	.LBB3267:
 21948              	.LBB3263:
 21949              	.LBB3236:
 21950              	.LBB3212:
 21951              	.LBI3212:
 221:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
ARM GAS  /tmp/ccK8IvWa.s 			page 575


 21952              		.loc 1 221 5 view .LVU5712
 21953              	.LBB3213:
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 21954              		.loc 1 222 2 view .LVU5713
 21955              	.LBB3214:
 21956              	.LBI3214:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 21957              		.loc 1 918 5 view .LVU5714
 21958              	.LBB3215:
 919:src/xeq.c     **** }
 21959              		.loc 1 919 2 view .LVU5715
 919:src/xeq.c     **** }
 21960              		.loc 1 919 2 is_stmt 0 view .LVU5716
 21961              	.LBE3215:
 21962              	.LBE3214:
 223:src/xeq.c     **** }
 21963              		.loc 1 223 2 is_stmt 1 view .LVU5717
 21964              	.LBB3218:
 21965              	.LBI3218:
 213:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 21966              		.loc 1 213 5 view .LVU5718
 21967              	.LBB3219:
 214:src/xeq.c     **** }
 21968              		.loc 1 214 2 view .LVU5719
 214:src/xeq.c     **** }
 21969              		.loc 1 214 9 is_stmt 0 view .LVU5720
 21970 00e8 BAF9DE07 		ldrsh	r0, [r10, #2014]
 214:src/xeq.c     **** }
 21971              		.loc 1 214 57 view .LVU5721
 21972 00ec 0028     		cmp	r0, #0
 21973 00ee 71DB     		blt	.L1604
 21974              	.LVL1713:
 214:src/xeq.c     **** }
 21975              		.loc 1 214 57 view .LVU5722
 21976              	.LBE3219:
 21977              	.LBE3218:
 21978              	.LBE3213:
 21979              	.LBE3212:
 21980              	.LBE3236:
4028:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 21981              		.loc 1 4028 3 is_stmt 1 view .LVU5723
 21982              	.LBB3237:
 21983              	.LBB3234:
 21984              	.LBB3232:
 21985              	.LBB3225:
 21986              	.LBB3220:
 21987 00f0 0020     		movs	r0, #0
 21988              	.LBE3220:
 21989              	.LBE3225:
 21990              	.LBE3232:
 21991              	.LBE3234:
 21992              	.LBE3237:
4028:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 21993              		.loc 1 4028 6 is_stmt 0 view .LVU5724
 21994 00f2 81B3     		cbz	r1, .L1569
 21995              	.LVL1714:
 21996              	.L1570:
ARM GAS  /tmp/ccK8IvWa.s 			page 576


4047:src/xeq.c     **** 		if (rdest + num > mx_dest)
 21997              		.loc 1 4047 4 is_stmt 1 view .LVU5725
4047:src/xeq.c     **** 		if (rdest + num > mx_dest)
 21998              		.loc 1 4047 12 is_stmt 0 view .LVU5726
 21999 00f4 7030     		adds	r0, r0, #112
 22000              	.LVL1715:
 22001              	.L1573:
4048:src/xeq.c     **** 			goto range_error;
 22002              		.loc 1 4048 3 is_stmt 1 view .LVU5727
4048:src/xeq.c     **** 			goto range_error;
 22003              		.loc 1 4048 13 is_stmt 0 view .LVU5728
 22004 00f6 6B18     		adds	r3, r5, r1
4048:src/xeq.c     **** 			goto range_error;
 22005              		.loc 1 4048 6 view .LVU5729
 22006 00f8 8342     		cmp	r3, r0
 22007 00fa CFDC     		bgt	.L1561
4051:src/xeq.c     **** 	}
 22008              		.loc 1 4051 3 is_stmt 1 view .LVU5730
4051:src/xeq.c     **** 	}
 22009              		.loc 1 4051 6 is_stmt 0 view .LVU5731
 22010 00fc 3D60     		str	r5, [r7]
 22011 00fe 5318     		adds	r3, r2, r1
 22012              	.LVL1716:
 22013              	.L1579:
4058:src/xeq.c     **** 		goto range_error;
 22014              		.loc 1 4058 2 is_stmt 1 view .LVU5732
4058:src/xeq.c     **** 		goto range_error;
 22015              		.loc 1 4058 5 is_stmt 0 view .LVU5733
 22016 0100 9B45     		cmp	fp, r3
 22017 0102 CBDB     		blt	.L1561
 22018              	.L1581:
4062:src/xeq.c     **** 	*n = num;
 22019              		.loc 1 4062 2 is_stmt 1 view .LVU5734
4062:src/xeq.c     **** 	*n = num;
 22020              		.loc 1 4062 37 is_stmt 0 view .LVU5735
 22021 0104 0EB1     		cbz	r6, .L1582
4062:src/xeq.c     **** 	*n = num;
 22022              		.loc 1 4062 37 view .LVU5736
 22023 0106 02F57A72 		add	r2, r2, #1000
 22024              	.LVL1717:
 22025              	.L1582:
4065:src/xeq.c     **** 
 22026              		.loc 1 4065 9 view .LVU5737
 22027 010a 0020     		movs	r0, #0
4062:src/xeq.c     **** 	*n = num;
 22028              		.loc 1 4062 5 view .LVU5738
 22029 010c C9F80020 		str	r2, [r9]
4063:src/xeq.c     **** 
 22030              		.loc 1 4063 2 is_stmt 1 view .LVU5739
4063:src/xeq.c     **** 
 22031              		.loc 1 4063 5 is_stmt 0 view .LVU5740
 22032 0110 C8F80010 		str	r1, [r8]
4065:src/xeq.c     **** 
 22033              		.loc 1 4065 2 is_stmt 1 view .LVU5741
 22034              	.LBE3263:
 22035              	.LBE3267:
4070:src/xeq.c     **** 
ARM GAS  /tmp/ccK8IvWa.s 			page 577


 22036              		.loc 1 4070 1 is_stmt 0 view .LVU5742
 22037 0114 13B0     		add	sp, sp, #76
 22038              		.cfi_remember_state
 22039              		.cfi_def_cfa_offset 36
 22040              		@ sp needed
 22041 0116 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 22042              	.LVL1718:
 22043              	.L1601:
 22044              		.cfi_restore_state
 22045              	.LBB3268:
 22046              	.LBB3264:
4019:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 22047              		.loc 1 4019 9 view .LVU5743
 22048 011a 424B     		ldr	r3, .L1609+20
 22049 011c 9C42     		cmp	r4, r3
 22050 011e 22DA     		bge	.L1586
 22051              	.LBB3238:
 22052              	.LBI3238:
 249:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 22053              		.loc 1 249 14 is_stmt 1 view .LVU5744
 22054              	.LBB3239:
 250:src/xeq.c     **** }
 22055              		.loc 1 250 2 view .LVU5745
 22056              	.LVL1719:
 22057              	.LBB3240:
 22058              	.LBI3240:
 237:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 22059              		.loc 1 237 14 view .LVU5746
 22060              	.LBB3241:
 238:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 22061              		.loc 1 238 2 view .LVU5747
 22062              	.LBB3242:
 22063              	.LBI3242:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 22064              		.loc 1 918 5 view .LVU5748
 22065              	.LBB3243:
 919:src/xeq.c     **** }
 22066              		.loc 1 919 2 view .LVU5749
 919:src/xeq.c     **** }
 22067              		.loc 1 919 24 is_stmt 0 view .LVU5750
 22068 0120 BAF8E807 		ldrh	r0, [r10, #2024]
 22069 0124 44F20103 		movw	r3, #16385
 22070              	.LBE3243:
 22071              	.LBE3242:
 238:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 22072              		.loc 1 238 5 view .LVU5751
 22073 0128 0340     		ands	r3, r3, r0
 22074 012a B3F5804F 		cmp	r3, #16384
 22075 012e 36D0     		beq	.L1605
 243:src/xeq.c     **** }
 22076              		.loc 1 243 3 is_stmt 1 view .LVU5752
 243:src/xeq.c     **** }
 22077              		.loc 1 243 10 is_stmt 0 view .LVU5753
 22078 0130 9AF8CFB7 		ldrb	fp, [r10, #1999]	@ zero_extendqisi2
 22079 0134 AEE7     		b	.L1565
 22080              	.LVL1720:
 22081              	.L1566:
ARM GAS  /tmp/ccK8IvWa.s 			page 578


 243:src/xeq.c     **** }
 22082              		.loc 1 243 10 view .LVU5754
 22083              	.LBE3241:
 22084              	.LBE3240:
 22085              	.LBE3239:
 22086              	.LBE3238:
4054:src/xeq.c     **** 			num = mx_src - rsrc;
 22087              		.loc 1 4054 3 is_stmt 1 view .LVU5755
4054:src/xeq.c     **** 			num = mx_src - rsrc;
 22088              		.loc 1 4054 6 is_stmt 0 view .LVU5756
 22089 0136 81BB     		cbnz	r1, .L1606
4055:src/xeq.c     **** 		}
 22090              		.loc 1 4055 4 is_stmt 1 view .LVU5757
4055:src/xeq.c     **** 		}
 22091              		.loc 1 4055 8 is_stmt 0 view .LVU5758
 22092 0138 ABEB0201 		sub	r1, fp, r2
 22093              	.LVL1721:
4058:src/xeq.c     **** 		goto range_error;
 22094              		.loc 1 4058 2 is_stmt 1 view .LVU5759
 22095 013c E2E7     		b	.L1581
 22096              	.L1567:
 22097              	.LBB3245:
 22098              	.LBI3245:
 249:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 22099              		.loc 1 249 14 view .LVU5760
 22100              	.LBB3246:
 250:src/xeq.c     **** }
 22101              		.loc 1 250 2 view .LVU5761
 22102              	.LVL1722:
 22103              	.LBB3247:
 22104              	.LBI3247:
 237:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 22105              		.loc 1 237 14 view .LVU5762
 22106              	.LBB3248:
 238:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 22107              		.loc 1 238 2 view .LVU5763
 22108              	.LBB3249:
 22109              	.LBI3249:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 22110              		.loc 1 918 5 view .LVU5764
 22111              	.LBB3250:
 919:src/xeq.c     **** }
 22112              		.loc 1 919 2 view .LVU5765
 919:src/xeq.c     **** }
 22113              		.loc 1 919 24 is_stmt 0 view .LVU5766
 22114 013e BAF8E807 		ldrh	r0, [r10, #2024]
 22115 0142 44F20103 		movw	r3, #16385
 22116              	.LBE3250:
 22117              	.LBE3249:
 238:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 22118              		.loc 1 238 5 view .LVU5767
 22119 0146 0340     		ands	r3, r3, r0
 22120 0148 B3F5804F 		cmp	r3, #16384
 22121 014c 59D0     		beq	.L1607
 243:src/xeq.c     **** }
 22122              		.loc 1 243 3 is_stmt 1 view .LVU5768
 22123              	.LVL1723:
ARM GAS  /tmp/ccK8IvWa.s 			page 579


 243:src/xeq.c     **** }
 22124              		.loc 1 243 3 is_stmt 0 view .LVU5769
 22125              	.LBE3248:
 22126              	.LBE3247:
 22127              	.LBE3246:
 22128              	.LBE3245:
4028:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 22129              		.loc 1 4028 3 is_stmt 1 view .LVU5770
 22130              	.LBB3255:
 22131              	.LBB3253:
 22132              	.LBB3252:
 22133              	.LBB3251:
 243:src/xeq.c     **** }
 22134              		.loc 1 243 10 is_stmt 0 view .LVU5771
 22135 014e 9AF8CF07 		ldrb	r0, [r10, #1999]	@ zero_extendqisi2
 22136              	.LVL1724:
 243:src/xeq.c     **** }
 22137              		.loc 1 243 10 view .LVU5772
 22138              	.LBE3251:
 22139              	.LBE3252:
 22140              	.LBE3253:
 22141              	.LBE3255:
4028:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 22142              		.loc 1 4028 6 view .LVU5773
 22143 0152 0029     		cmp	r1, #0
 22144 0154 CFD1     		bne	.L1573
 22145              	.LVL1725:
 22146              	.L1569:
4030:src/xeq.c     **** 				// source & destination in different memory areas
 22147              		.loc 1 4030 4 is_stmt 1 view .LVU5774
4030:src/xeq.c     **** 				// source & destination in different memory areas
 22148              		.loc 1 4030 7 is_stmt 0 view .LVU5775
 22149 0156 56B1     		cbz	r6, .L1608
 22150              	.L1574:
4032:src/xeq.c     **** 			else {
 22151              		.loc 1 4032 5 is_stmt 1 view .LVU5776
4032:src/xeq.c     **** 			else {
 22152              		.loc 1 4032 9 is_stmt 0 view .LVU5777
 22153 0158 8345     		cmp	fp, r0
 22154 015a 5946     		mov	r1, fp
 22155              	.LVL1726:
4032:src/xeq.c     **** 			else {
 22156              		.loc 1 4032 9 view .LVU5778
 22157 015c A8BF     		it	ge
 22158 015e 0146     		movge	r1, r0
 22159              	.LVL1727:
 22160              	.L1576:
4046:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
 22161              		.loc 1 4046 3 is_stmt 1 view .LVU5779
4046:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
 22162              		.loc 1 4046 6 is_stmt 0 view .LVU5780
 22163 0160 6F2D     		cmp	r5, #111
 22164 0162 C8DD     		ble	.L1573
 22165 0164 C6E7     		b	.L1570
 22166              	.LVL1728:
 22167              	.L1586:
4046:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
ARM GAS  /tmp/ccK8IvWa.s 			page 580


 22168              		.loc 1 4046 6 view .LVU5781
 22169 0166 5E46     		mov	r6, fp
4019:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 22170              		.loc 1 4019 9 view .LVU5782
 22171 0168 4FF0700B 		mov	fp, #112
 22172 016c B7E7     		b	.L1562
 22173              	.LVL1729:
 22174              	.L1608:
4030:src/xeq.c     **** 				// source & destination in different memory areas
 22175              		.loc 1 4030 42 view .LVU5783
 22176 016e 2B4B     		ldr	r3, .L1609+12
4030:src/xeq.c     **** 				// source & destination in different memory areas
 22177              		.loc 1 4030 14 view .LVU5784
 22178 0170 9C42     		cmp	r4, r3
 22179 0172 B4BF     		ite	lt
 22180 0174 0024     		movlt	r4, #0
 22181 0176 0124     		movge	r4, #1
 22182 0178 6F2D     		cmp	r5, #111
 22183 017a D4BF     		ite	le
 22184 017c 0023     		movle	r3, #0
 22185 017e 0123     		movgt	r3, #1
 22186 0180 9C42     		cmp	r4, r3
 22187 0182 E9D1     		bne	.L1574
4034:src/xeq.c     **** 					num = mx_src - rsrc;
 22188              		.loc 1 4034 5 is_stmt 1 view .LVU5785
4034:src/xeq.c     **** 					num = mx_src - rsrc;
 22189              		.loc 1 4034 8 is_stmt 0 view .LVU5786
 22190 0184 9542     		cmp	r5, r2
4035:src/xeq.c     **** 					q = rsrc - rdest;
 22191              		.loc 1 4035 6 is_stmt 1 view .LVU5787
4039:src/xeq.c     **** 					q = rdest - rsrc;
 22192              		.loc 1 4039 10 is_stmt 0 view .LVU5788
 22193 0186 A7BF     		ittee	ge
 22194 0188 431B     		subge	r3, r0, r5
4040:src/xeq.c     **** 				}
 22195              		.loc 1 4040 8 view .LVU5789
 22196 018a A91A     		subge	r1, r5, r2
 22197              	.LVL1730:
4035:src/xeq.c     **** 					q = rsrc - rdest;
 22198              		.loc 1 4035 10 view .LVU5790
 22199 018c ABEB0203 		sublt	r3, fp, r2
4036:src/xeq.c     **** 				}
 22200              		.loc 1 4036 6 is_stmt 1 view .LVU5791
4036:src/xeq.c     **** 				}
 22201              		.loc 1 4036 8 is_stmt 0 view .LVU5792
 22202 0190 511B     		sublt	r1, r2, r5
4039:src/xeq.c     **** 					q = rdest - rsrc;
 22203              		.loc 1 4039 6 is_stmt 1 view .LVU5793
 22204              	.LVL1731:
4040:src/xeq.c     **** 				}
 22205              		.loc 1 4040 6 view .LVU5794
4042:src/xeq.c     **** 					num = q;
 22206              		.loc 1 4042 5 view .LVU5795
 22207 0192 9942     		cmp	r1, r3
 22208 0194 A8BF     		it	ge
 22209 0196 1946     		movge	r1, r3
 22210              	.LVL1732:
ARM GAS  /tmp/ccK8IvWa.s 			page 581


4042:src/xeq.c     **** 					num = q;
 22211              		.loc 1 4042 5 is_stmt 0 view .LVU5796
 22212 0198 E2E7     		b	.L1576
 22213              	.LVL1733:
 22214              	.L1606:
4042:src/xeq.c     **** 					num = q;
 22215              		.loc 1 4042 5 view .LVU5797
 22216 019a 8B18     		adds	r3, r1, r2
 22217 019c B0E7     		b	.L1579
 22218              	.LVL1734:
 22219              	.L1605:
 22220              	.LBB3256:
 22221              	.LBB3244:
4042:src/xeq.c     **** 					num = q;
 22222              		.loc 1 4042 5 view .LVU5798
 22223 019e FFF7FEFF 		bl	global_regs.part.0
 22224              	.LVL1735:
 22225 01a2 8346     		mov	fp, r0
 22226 01a4 76E7     		b	.L1565
 22227              	.LVL1736:
 22228              	.L1602:
4042:src/xeq.c     **** 					num = q;
 22229              		.loc 1 4042 5 view .LVU5799
 22230              	.LBE3244:
 22231              	.LBE3256:
 22232              	.LBB3257:
 22233              	.LBB3201:
 22234              	.LBB3200:
 22235              	.LBB3194:
 22236              	.LBB3190:
 214:src/xeq.c     **** }
 22237              		.loc 1 214 25 view .LVU5800
 22238 01a6 204B     		ldr	r3, .L1609+24
 22239              	.LBE3190:
 22240              	.LBE3194:
 22241              	.LBB3195:
 22242              	.LBB3186:
 919:src/xeq.c     **** }
 22243              		.loc 1 919 24 view .LVU5801
 22244 01a8 BAF8E867 		ldrh	r6, [r10, #2024]
 22245              	.LBE3186:
 22246              	.LBE3195:
 22247              	.LBB3196:
 22248              	.LBB3191:
 214:src/xeq.c     **** }
 22249              		.loc 1 214 25 view .LVU5802
 22250 01ac D3F800C0 		ldr	ip, [r3]
 22251              	.LBE3191:
 22252              	.LBE3196:
 22253              	.LBB3197:
 22254              	.LBB3187:
 919:src/xeq.c     **** }
 22255              		.loc 1 919 24 view .LVU5803
 22256 01b0 44F20103 		movw	r3, #16385
 22257              	.LBE3187:
 22258              	.LBE3197:
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
ARM GAS  /tmp/ccK8IvWa.s 			page 582


 22259              		.loc 1 222 73 view .LVU5804
 22260 01b4 3340     		ands	r3, r3, r6
 22261 01b6 A3F58043 		sub	r3, r3, #16384
 22262              	.LBB3198:
 22263              	.LBB3192:
 214:src/xeq.c     **** }
 22264              		.loc 1 214 57 view .LVU5805
 22265 01ba 3CF810B0 		ldrh	fp, [ip, r0, lsl #1]
 22266              	.LBE3192:
 22267              	.LBE3198:
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 22268              		.loc 1 222 73 view .LVU5806
 22269 01be B3FA83F3 		clz	r3, r3
 22270 01c2 5B09     		lsrs	r3, r3, #5
 22271              	.LBB3199:
 22272              	.LBB3193:
 214:src/xeq.c     **** }
 22273              		.loc 1 214 57 view .LVU5807
 22274 01c4 CBF30B0B 		ubfx	fp, fp, #0, #12
 22275 01c8 0233     		adds	r3, r3, #2
 22276 01ca 4BFA03FB 		asr	fp, fp, r3
 22277 01ce 0BF1700B 		add	fp, fp, #112
 22278 01d2 5FE7     		b	.L1565
 22279              	.LVL1737:
 22280              	.L1604:
 214:src/xeq.c     **** }
 22281              		.loc 1 214 57 view .LVU5808
 22282              	.LBE3193:
 22283              	.LBE3199:
 22284              	.LBE3200:
 22285              	.LBE3201:
 22286              	.LBE3257:
 22287              	.LBB3258:
 22288              	.LBB3235:
 22289              	.LBB3233:
 22290              	.LBB3226:
 22291              	.LBB3221:
 214:src/xeq.c     **** }
 22292              		.loc 1 214 25 view .LVU5809
 22293 01d4 144B     		ldr	r3, .L1609+24
 22294              	.LBE3221:
 22295              	.LBE3226:
 22296              	.LBB3227:
 22297              	.LBB3216:
 919:src/xeq.c     **** }
 22298              		.loc 1 919 24 view .LVU5810
 22299 01d6 BAF8E8E7 		ldrh	lr, [r10, #2024]
 22300              	.LBE3216:
 22301              	.LBE3227:
 22302              	.LBB3228:
 22303              	.LBB3222:
 214:src/xeq.c     **** }
 22304              		.loc 1 214 25 view .LVU5811
 22305 01da D3F800C0 		ldr	ip, [r3]
 22306              	.LBE3222:
 22307              	.LBE3228:
 22308              	.LBB3229:
ARM GAS  /tmp/ccK8IvWa.s 			page 583


 22309              	.LBB3217:
 919:src/xeq.c     **** }
 22310              		.loc 1 919 24 view .LVU5812
 22311 01de 44F20103 		movw	r3, #16385
 22312              	.LBE3217:
 22313              	.LBE3229:
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 22314              		.loc 1 222 73 view .LVU5813
 22315 01e2 03EA0E03 		and	r3, r3, lr
 22316 01e6 A3F58043 		sub	r3, r3, #16384
 22317              	.LBB3230:
 22318              	.LBB3223:
 214:src/xeq.c     **** }
 22319              		.loc 1 214 57 view .LVU5814
 22320 01ea 3CF81000 		ldrh	r0, [ip, r0, lsl #1]
 22321              	.LBE3223:
 22322              	.LBE3230:
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 22323              		.loc 1 222 73 view .LVU5815
 22324 01ee B3FA83F3 		clz	r3, r3
 22325 01f2 5B09     		lsrs	r3, r3, #5
 22326 01f4 0233     		adds	r3, r3, #2
 22327              	.LBB3231:
 22328              	.LBB3224:
 214:src/xeq.c     **** }
 22329              		.loc 1 214 57 view .LVU5816
 22330 01f6 C0F30B00 		ubfx	r0, r0, #0, #12
 22331 01fa 1841     		asrs	r0, r0, r3
 22332              	.LVL1738:
 214:src/xeq.c     **** }
 22333              		.loc 1 214 57 view .LVU5817
 22334              	.LBE3224:
 22335              	.LBE3231:
 22336              	.LBE3233:
 22337              	.LBE3235:
 22338              	.LBE3258:
4028:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 22339              		.loc 1 4028 3 is_stmt 1 view .LVU5818
4028:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 22340              		.loc 1 4028 6 is_stmt 0 view .LVU5819
 22341 01fc 0029     		cmp	r1, #0
 22342 01fe AAD0     		beq	.L1569
 22343 0200 78E7     		b	.L1570
 22344              	.LVL1739:
 22345              	.L1607:
 22346              	.LBB3259:
 22347              	.LBB3254:
4028:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 22348              		.loc 1 4028 6 view .LVU5820
 22349 0202 FFF7FEFF 		bl	global_regs.part.0
 22350              	.LVL1740:
4028:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 22351              		.loc 1 4028 6 view .LVU5821
 22352              	.LBE3254:
 22353              	.LBE3259:
4028:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 22354              		.loc 1 4028 3 is_stmt 1 view .LVU5822
ARM GAS  /tmp/ccK8IvWa.s 			page 584


4028:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 22355              		.loc 1 4028 6 is_stmt 0 view .LVU5823
 22356 0206 0029     		cmp	r1, #0
 22357 0208 7FF475AF 		bne	.L1573
 22358 020c A3E7     		b	.L1569
 22359              	.L1610:
 22360 020e 00BF     		.align	2
 22361              	.L1609:
 22362 0210 00000000 		.word	Error
 22363 0214 D34D6210 		.word	274877907
 22364 0218 1F85EB51 		.word	1374389535
 22365 021c 00E6AA00 		.word	11200000
 22366 0220 00000000 		.word	BackupFlash
 22367 0224 80969800 		.word	10000000
 22368 0228 00000000 		.word	RetStk
 22369 022c 00000000 		.word	PersistentRam
 22370              	.LBE3264:
 22371              	.LBE3268:
 22372              		.cfi_endproc
 22373              	.LFE221:
 22375              		.section	.text.op_regcopy,"ax",%progbits
 22376              		.align	1
 22377              		.p2align 2,,3
 22378              		.global	op_regcopy
 22379              		.syntax unified
 22380              		.thumb
 22381              		.thumb_func
 22382              		.fpu fpv4-sp-d16
 22384              	op_regcopy:
 22385              	.LVL1741:
 22386              	.LFB222:
4072:src/xeq.c     **** 	int s, n, d;
 22387              		.loc 1 4072 32 is_stmt 1 view -0
 22388              		.cfi_startproc
 22389              		@ args = 0, pretend = 0, frame = 16
 22390              		@ frame_needed = 0, uses_anonymous_args = 0
4073:src/xeq.c     **** 
 22391              		.loc 1 4073 2 view .LVU5825
4075:src/xeq.c     **** 		return;
 22392              		.loc 1 4075 2 view .LVU5826
4072:src/xeq.c     **** 	int s, n, d;
 22393              		.loc 1 4072 32 is_stmt 0 view .LVU5827
 22394 0000 10B5     		push	{r4, lr}
 22395              		.cfi_def_cfa_offset 8
 22396              		.cfi_offset 4, -8
 22397              		.cfi_offset 14, -4
 22398 0002 84B0     		sub	sp, sp, #16
 22399              		.cfi_def_cfa_offset 24
4075:src/xeq.c     **** 		return;
 22400              		.loc 1 4075 6 view .LVU5828
 22401 0004 0123     		movs	r3, #1
 22402 0006 03AA     		add	r2, sp, #12
 22403 0008 02A9     		add	r1, sp, #8
 22404 000a 01A8     		add	r0, sp, #4
 22405              	.LVL1742:
4075:src/xeq.c     **** 		return;
 22406              		.loc 1 4075 6 view .LVU5829
ARM GAS  /tmp/ccK8IvWa.s 			page 585


 22407 000c FFF7FEFF 		bl	reg_decode
 22408              	.LVL1743:
4075:src/xeq.c     **** 		return;
 22409              		.loc 1 4075 5 view .LVU5830
 22410 0010 B0B9     		cbnz	r0, .L1611
4077:src/xeq.c     **** }
 22411              		.loc 1 4077 2 is_stmt 1 view .LVU5831
 22412 0012 0398     		ldr	r0, [sp, #12]
 22413 0014 FFF7FEFF 		bl	get_reg_n
 22414              	.LVL1744:
 22415 0018 0446     		mov	r4, r0
 22416 001a 0198     		ldr	r0, [sp, #4]
 22417 001c FFF7FEFF 		bl	get_reg_n
 22418              	.LVL1745:
 22419              	.LBB3269:
 22420              	.LBB3270:
 22421              	.LBB3271:
 22422              	.LBB3272:
 919:src/xeq.c     **** }
 22423              		.loc 1 919 24 is_stmt 0 view .LVU5832
 22424 0020 084B     		ldr	r3, .L1616
 22425              	.LBE3272:
 22426              	.LBE3271:
 22427              	.LBE3270:
 22428              	.LBE3269:
4077:src/xeq.c     **** }
 22429              		.loc 1 4077 2 view .LVU5833
 22430 0022 029A     		ldr	r2, [sp, #8]
 22431              	.LVL1746:
 22432              	.LBB3279:
 22433              	.LBB3277:
 22434              	.LBB3275:
 22435              	.LBB3273:
 919:src/xeq.c     **** }
 22436              		.loc 1 919 24 view .LVU5834
 22437 0024 B3F8E817 		ldrh	r1, [r3, #2024]
 22438 0028 44F20103 		movw	r3, #16385
 22439              	.LBE3273:
 22440              	.LBE3275:
1338:src/xeq.c     **** 		n <<= 1;
 22441              		.loc 1 1338 5 view .LVU5835
 22442 002c 0B40     		ands	r3, r3, r1
 22443 002e B3F5804F 		cmp	r3, #16384
1339:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 22444              		.loc 1 1339 5 view .LVU5836
 22445 0032 08BF     		it	eq
 22446 0034 5200     		lsleq	r2, r2, #1
 22447              	.LBE3277:
 22448              	.LBE3279:
4077:src/xeq.c     **** }
 22449              		.loc 1 4077 2 view .LVU5837
 22450 0036 0146     		mov	r1, r0
 22451              	.LVL1747:
 22452              	.LBB3280:
 22453              	.LBI3269:
1337:src/xeq.c     **** 	if (is_dblmode())
 22454              		.loc 1 1337 6 is_stmt 1 view .LVU5838
ARM GAS  /tmp/ccK8IvWa.s 			page 586


 22455              	.LBB3278:
1338:src/xeq.c     **** 		n <<= 1;
 22456              		.loc 1 1338 2 view .LVU5839
 22457              	.LBB3276:
 22458              	.LBI3271:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 22459              		.loc 1 918 5 view .LVU5840
 22460              	.LBB3274:
 919:src/xeq.c     **** }
 22461              		.loc 1 919 2 view .LVU5841
 22462              	.LBE3274:
 22463              	.LBE3276:
1339:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 22464              		.loc 1 1339 3 view .LVU5842
1340:src/xeq.c     **** }
 22465              		.loc 1 1340 2 view .LVU5843
 22466 0038 D200     		lsls	r2, r2, #3
 22467              	.LVL1748:
1340:src/xeq.c     **** }
 22468              		.loc 1 1340 2 is_stmt 0 view .LVU5844
 22469 003a 2046     		mov	r0, r4
 22470              	.LVL1749:
1340:src/xeq.c     **** }
 22471              		.loc 1 1340 2 view .LVU5845
 22472 003c FFF7FEFF 		bl	xcopy
 22473              	.LVL1750:
 22474              	.L1611:
1340:src/xeq.c     **** }
 22475              		.loc 1 1340 2 view .LVU5846
 22476              	.LBE3278:
 22477              	.LBE3280:
4078:src/xeq.c     **** 
 22478              		.loc 1 4078 1 view .LVU5847
 22479 0040 04B0     		add	sp, sp, #16
 22480              		.cfi_def_cfa_offset 8
 22481              		@ sp needed
 22482 0042 10BD     		pop	{r4, pc}
 22483              	.L1617:
 22484              		.align	2
 22485              	.L1616:
 22486 0044 00000000 		.word	PersistentRam
 22487              		.cfi_endproc
 22488              	.LFE222:
 22490              		.section	.text.op_regswap,"ax",%progbits
 22491              		.align	1
 22492              		.p2align 2,,3
 22493              		.global	op_regswap
 22494              		.syntax unified
 22495              		.thumb
 22496              		.thumb_func
 22497              		.fpu fpv4-sp-d16
 22499              	op_regswap:
 22500              	.LVL1751:
 22501              	.LFB223:
4080:src/xeq.c     **** 	int s, n, d, i;
 22502              		.loc 1 4080 32 is_stmt 1 view -0
 22503              		.cfi_startproc
ARM GAS  /tmp/ccK8IvWa.s 			page 587


 22504              		@ args = 0, pretend = 0, frame = 16
 22505              		@ frame_needed = 0, uses_anonymous_args = 0
4081:src/xeq.c     **** 
 22506              		.loc 1 4081 2 view .LVU5849
4083:src/xeq.c     **** 		return;
 22507              		.loc 1 4083 2 view .LVU5850
4080:src/xeq.c     **** 	int s, n, d, i;
 22508              		.loc 1 4080 32 is_stmt 0 view .LVU5851
 22509 0000 30B5     		push	{r4, r5, lr}
 22510              		.cfi_def_cfa_offset 12
 22511              		.cfi_offset 4, -12
 22512              		.cfi_offset 5, -8
 22513              		.cfi_offset 14, -4
 22514 0002 85B0     		sub	sp, sp, #20
 22515              		.cfi_def_cfa_offset 32
4083:src/xeq.c     **** 		return;
 22516              		.loc 1 4083 6 view .LVU5852
 22517 0004 0023     		movs	r3, #0
 22518 0006 03AA     		add	r2, sp, #12
 22519 0008 02A9     		add	r1, sp, #8
 22520 000a 01A8     		add	r0, sp, #4
 22521              	.LVL1752:
4083:src/xeq.c     **** 		return;
 22522              		.loc 1 4083 6 view .LVU5853
 22523 000c FFF7FEFF 		bl	reg_decode
 22524              	.LVL1753:
4083:src/xeq.c     **** 		return;
 22525              		.loc 1 4083 5 view .LVU5854
 22526 0010 E8B9     		cbnz	r0, .L1618
4083:src/xeq.c     **** 		return;
 22527              		.loc 1 4083 37 discriminator 1 view .LVU5855
 22528 0012 039B     		ldr	r3, [sp, #12]
 22529 0014 0446     		mov	r4, r0
 22530 0016 0198     		ldr	r0, [sp, #4]
4083:src/xeq.c     **** 		return;
 22531              		.loc 1 4083 32 discriminator 1 view .LVU5856
 22532 0018 9842     		cmp	r0, r3
 22533 001a 18D0     		beq	.L1618
4086:src/xeq.c     **** 			report_err(ERR_RANGE);
 22534              		.loc 1 4086 3 is_stmt 1 view .LVU5857
4086:src/xeq.c     **** 			report_err(ERR_RANGE);
 22535              		.loc 1 4086 19 is_stmt 0 view .LVU5858
 22536 001c 029A     		ldr	r2, [sp, #8]
4086:src/xeq.c     **** 			report_err(ERR_RANGE);
 22537              		.loc 1 4086 6 view .LVU5859
 22538 001e 18DD     		ble	.L1623
4086:src/xeq.c     **** 			report_err(ERR_RANGE);
 22539              		.loc 1 4086 19 discriminator 1 view .LVU5860
 22540 0020 1344     		add	r3, r3, r2
4086:src/xeq.c     **** 			report_err(ERR_RANGE);
 22541              		.loc 1 4086 14 discriminator 1 view .LVU5861
 22542 0022 9842     		cmp	r0, r3
 22543 0024 19DB     		blt	.L1624
 22544              	.L1625:
 22545              	.LVL1754:
4089:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 22546              		.loc 1 4089 16 is_stmt 1 discriminator 1 view .LVU5862
ARM GAS  /tmp/ccK8IvWa.s 			page 588


4089:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 22547              		.loc 1 4089 4 is_stmt 0 discriminator 1 view .LVU5863
 22548 0026 002A     		cmp	r2, #0
 22549 0028 01DC     		bgt	.L1627
 22550 002a 10E0     		b	.L1618
 22551              	.LVL1755:
 22552              	.L1630:
4089:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 22553              		.loc 1 4089 4 discriminator 1 view .LVU5864
 22554 002c 0198     		ldr	r0, [sp, #4]
 22555              	.LVL1756:
 22556              	.L1627:
4090:src/xeq.c     **** 		}
 22557              		.loc 1 4090 5 is_stmt 1 discriminator 3 view .LVU5865
 22558 002e 2044     		add	r0, r0, r4
 22559 0030 FFF7FEFF 		bl	get_reg_n
 22560              	.LVL1757:
 22561 0034 039B     		ldr	r3, [sp, #12]
 22562 0036 0546     		mov	r5, r0
 22563 0038 E018     		adds	r0, r4, r3
 22564 003a FFF7FEFF 		bl	get_reg_n
 22565              	.LVL1758:
 22566 003e 0146     		mov	r1, r0
 22567 0040 2846     		mov	r0, r5
 22568 0042 FFF7FEFF 		bl	swap_reg
 22569              	.LVL1759:
4089:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 22570              		.loc 1 4089 23 discriminator 3 view .LVU5866
4089:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 22571              		.loc 1 4089 4 is_stmt 0 discriminator 3 view .LVU5867
 22572 0046 029B     		ldr	r3, [sp, #8]
4089:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 22573              		.loc 1 4089 24 discriminator 3 view .LVU5868
 22574 0048 0134     		adds	r4, r4, #1
 22575              	.LVL1760:
4089:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 22576              		.loc 1 4089 16 is_stmt 1 discriminator 3 view .LVU5869
4089:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 22577              		.loc 1 4089 4 is_stmt 0 discriminator 3 view .LVU5870
 22578 004a A342     		cmp	r3, r4
 22579 004c EEDC     		bgt	.L1630
 22580              	.LVL1761:
 22581              	.L1618:
4093:src/xeq.c     **** 
 22582              		.loc 1 4093 1 view .LVU5871
 22583 004e 05B0     		add	sp, sp, #20
 22584              		.cfi_remember_state
 22585              		.cfi_def_cfa_offset 12
 22586              		@ sp needed
 22587 0050 30BD     		pop	{r4, r5, pc}
 22588              	.L1623:
 22589              		.cfi_restore_state
4086:src/xeq.c     **** 			report_err(ERR_RANGE);
 22590              		.loc 1 4086 28 discriminator 3 view .LVU5872
 22591 0052 E8DA     		bge	.L1625
4086:src/xeq.c     **** 			report_err(ERR_RANGE);
 22592              		.loc 1 4086 43 discriminator 4 view .LVU5873
ARM GAS  /tmp/ccK8IvWa.s 			page 589


 22593 0054 8118     		adds	r1, r0, r2
4086:src/xeq.c     **** 			report_err(ERR_RANGE);
 22594              		.loc 1 4086 38 discriminator 4 view .LVU5874
 22595 0056 8B42     		cmp	r3, r1
 22596 0058 E5DA     		bge	.L1625
 22597              	.L1624:
4087:src/xeq.c     **** 		else {
 22598              		.loc 1 4087 4 is_stmt 1 view .LVU5875
 22599              	.LVL1762:
 22600              	.LBB3285:
 22601              	.LBI3285:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 22602              		.loc 1 523 5 view .LVU5876
 22603              	.LBB3286:
 524:src/xeq.c     **** 		Error = e;
 22604              		.loc 1 524 2 view .LVU5877
 524:src/xeq.c     **** 		Error = e;
 22605              		.loc 1 524 12 is_stmt 0 view .LVU5878
 22606 005a 044B     		ldr	r3, .L1631
 524:src/xeq.c     **** 		Error = e;
 22607              		.loc 1 524 5 view .LVU5879
 22608 005c 1A68     		ldr	r2, [r3]
 22609 005e 002A     		cmp	r2, #0
 22610 0060 F5D1     		bne	.L1618
 22611              	.LVL1763:
 22612              	.LBB3287:
 22613              	.LBI3287:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 22614              		.loc 1 523 5 is_stmt 1 view .LVU5880
 22615              	.LBB3288:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 22616              		.loc 1 525 3 view .LVU5881
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 22617              		.loc 1 525 9 is_stmt 0 view .LVU5882
 22618 0062 0822     		movs	r2, #8
 22619 0064 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 22620              		.loc 1 526 3 is_stmt 1 view .LVU5883
 22621              	.LBE3288:
 22622              	.LBE3287:
 22623              	.LBE3286:
 22624              	.LBE3285:
4093:src/xeq.c     **** 
 22625              		.loc 1 4093 1 is_stmt 0 view .LVU5884
 22626 0066 05B0     		add	sp, sp, #20
 22627              		.cfi_def_cfa_offset 12
 22628              		@ sp needed
 22629 0068 30BD     		pop	{r4, r5, pc}
 22630              	.L1632:
 22631 006a 00BF     		.align	2
 22632              	.L1631:
 22633 006c 00000000 		.word	Error
 22634              		.cfi_endproc
 22635              	.LFE223:
 22637              		.section	.text.op_regclr,"ax",%progbits
 22638              		.align	1
 22639              		.p2align 2,,3
ARM GAS  /tmp/ccK8IvWa.s 			page 590


 22640              		.global	op_regclr
 22641              		.syntax unified
 22642              		.thumb
 22643              		.thumb_func
 22644              		.fpu fpv4-sp-d16
 22646              	op_regclr:
 22647              	.LVL1764:
 22648              	.LFB224:
4095:src/xeq.c     **** 	int s, n;
 22649              		.loc 1 4095 31 is_stmt 1 view -0
 22650              		.cfi_startproc
 22651              		@ args = 0, pretend = 0, frame = 8
 22652              		@ frame_needed = 0, uses_anonymous_args = 0
4096:src/xeq.c     **** 
 22653              		.loc 1 4096 2 view .LVU5886
4098:src/xeq.c     **** 		return;
 22654              		.loc 1 4098 2 view .LVU5887
4095:src/xeq.c     **** 	int s, n;
 22655              		.loc 1 4095 31 is_stmt 0 view .LVU5888
 22656 0000 10B5     		push	{r4, lr}
 22657              		.cfi_def_cfa_offset 8
 22658              		.cfi_offset 4, -8
 22659              		.cfi_offset 14, -4
4098:src/xeq.c     **** 		return;
 22660              		.loc 1 4098 6 view .LVU5889
 22661 0002 0023     		movs	r3, #0
4095:src/xeq.c     **** 	int s, n;
 22662              		.loc 1 4095 31 view .LVU5890
 22663 0004 82B0     		sub	sp, sp, #8
 22664              		.cfi_def_cfa_offset 16
4098:src/xeq.c     **** 		return;
 22665              		.loc 1 4098 6 view .LVU5891
 22666 0006 1A46     		mov	r2, r3
 22667 0008 01A9     		add	r1, sp, #4
 22668 000a 6846     		mov	r0, sp
 22669              	.LVL1765:
4098:src/xeq.c     **** 		return;
 22670              		.loc 1 4098 6 view .LVU5892
 22671 000c FFF7FEFF 		bl	reg_decode
 22672              	.LVL1766:
4098:src/xeq.c     **** 		return;
 22673              		.loc 1 4098 5 view .LVU5893
 22674 0010 A0B9     		cbnz	r0, .L1633
4100:src/xeq.c     **** }
 22675              		.loc 1 4100 2 is_stmt 1 view .LVU5894
 22676 0012 0446     		mov	r4, r0
 22677 0014 0098     		ldr	r0, [sp]
 22678 0016 FFF7FEFF 		bl	get_reg_n
 22679              	.LVL1767:
 22680              	.LBB3289:
 22681              	.LBI3289:
1318:src/xeq.c     **** #if 0
 22682              		.loc 1 1318 6 view .LVU5895
 22683              	.LBB3290:
1333:src/xeq.c     **** #endif
 22684              		.loc 1 1333 2 view .LVU5896
 22685              	.LBB3291:
ARM GAS  /tmp/ccK8IvWa.s 			page 591


 22686              	.LBI3291:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 22687              		.loc 1 918 5 view .LVU5897
 22688              	.LBB3292:
 919:src/xeq.c     **** }
 22689              		.loc 1 919 2 view .LVU5898
 919:src/xeq.c     **** }
 22690              		.loc 1 919 24 is_stmt 0 view .LVU5899
 22691 001a 094B     		ldr	r3, .L1637
 22692              	.LBE3292:
 22693              	.LBE3291:
1333:src/xeq.c     **** #endif
 22694              		.loc 1 1333 2 view .LVU5900
 22695 001c 019A     		ldr	r2, [sp, #4]
 22696              	.LBB3294:
 22697              	.LBB3293:
 919:src/xeq.c     **** }
 22698              		.loc 1 919 24 view .LVU5901
 22699 001e B3F8E817 		ldrh	r1, [r3, #2024]
 22700 0022 44F20103 		movw	r3, #16385
 22701 0026 0B40     		ands	r3, r3, r1
 22702 0028 A3F58043 		sub	r3, r3, #16384
 22703 002c B3FA83F3 		clz	r3, r3
 22704 0030 5B09     		lsrs	r3, r3, #5
 22705              	.LBE3293:
 22706              	.LBE3294:
1333:src/xeq.c     **** #endif
 22707              		.loc 1 1333 24 view .LVU5902
 22708 0032 0333     		adds	r3, r3, #3
1333:src/xeq.c     **** #endif
 22709              		.loc 1 1333 2 view .LVU5903
 22710 0034 2146     		mov	r1, r4
 22711 0036 9A40     		lsls	r2, r2, r3
 22712 0038 FFF7FEFF 		bl	xset
 22713              	.LVL1768:
 22714              	.L1633:
1333:src/xeq.c     **** #endif
 22715              		.loc 1 1333 2 view .LVU5904
 22716              	.LBE3290:
 22717              	.LBE3289:
4101:src/xeq.c     **** 
 22718              		.loc 1 4101 1 view .LVU5905
 22719 003c 02B0     		add	sp, sp, #8
 22720              		.cfi_def_cfa_offset 8
 22721              		@ sp needed
 22722 003e 10BD     		pop	{r4, pc}
 22723              	.L1638:
 22724              		.align	2
 22725              	.L1637:
 22726 0040 00000000 		.word	PersistentRam
 22727              		.cfi_endproc
 22728              	.LFE224:
 22730              		.section	.text.op_regsort,"ax",%progbits
 22731              		.align	1
 22732              		.p2align 2,,3
 22733              		.global	op_regsort
 22734              		.syntax unified
ARM GAS  /tmp/ccK8IvWa.s 			page 592


 22735              		.thumb
 22736              		.thumb_func
 22737              		.fpu fpv4-sp-d16
 22739              	op_regsort:
 22740              	.LVL1769:
 22741              	.LFB225:
4103:src/xeq.c     **** 	int s, n;
 22742              		.loc 1 4103 32 is_stmt 1 view -0
 22743              		.cfi_startproc
 22744              		@ args = 0, pretend = 0, frame = 160
 22745              		@ frame_needed = 0, uses_anonymous_args = 0
4104:src/xeq.c     **** 	decNumber pivot, a;
 22746              		.loc 1 4104 2 view .LVU5907
4105:src/xeq.c     **** 	int beg[10], end[10], i;
 22747              		.loc 1 4105 2 view .LVU5908
4106:src/xeq.c     **** 
 22748              		.loc 1 4106 2 view .LVU5909
4108:src/xeq.c     **** 		return;
 22749              		.loc 1 4108 2 view .LVU5910
4103:src/xeq.c     **** 	int s, n;
 22750              		.loc 1 4103 32 is_stmt 0 view .LVU5911
 22751 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 22752              		.cfi_def_cfa_offset 28
 22753              		.cfi_offset 4, -28
 22754              		.cfi_offset 5, -24
 22755              		.cfi_offset 6, -20
 22756              		.cfi_offset 7, -16
 22757              		.cfi_offset 8, -12
 22758              		.cfi_offset 9, -8
 22759              		.cfi_offset 14, -4
4108:src/xeq.c     **** 		return;
 22760              		.loc 1 4108 6 view .LVU5912
 22761 0004 0023     		movs	r3, #0
4103:src/xeq.c     **** 	int s, n;
 22762              		.loc 1 4103 32 view .LVU5913
 22763 0006 A9B0     		sub	sp, sp, #164
 22764              		.cfi_def_cfa_offset 192
4108:src/xeq.c     **** 		return;
 22765              		.loc 1 4108 6 view .LVU5914
 22766 0008 1A46     		mov	r2, r3
 22767 000a 01A9     		add	r1, sp, #4
 22768 000c 6846     		mov	r0, sp
 22769              	.LVL1770:
4108:src/xeq.c     **** 		return;
 22770              		.loc 1 4108 6 view .LVU5915
 22771 000e FFF7FEFF 		bl	reg_decode
 22772              	.LVL1771:
4108:src/xeq.c     **** 		return;
 22773              		.loc 1 4108 5 view .LVU5916
 22774 0012 20B9     		cbnz	r0, .L1639
4108:src/xeq.c     **** 		return;
 22775              		.loc 1 4108 39 discriminator 1 view .LVU5917
 22776 0014 DDF80480 		ldr	r8, [sp, #4]
4108:src/xeq.c     **** 		return;
 22777              		.loc 1 4108 34 discriminator 1 view .LVU5918
 22778 0018 B8F1010F 		cmp	r8, #1
 22779 001c 02D1     		bne	.L1663
ARM GAS  /tmp/ccK8IvWa.s 			page 593


 22780              	.L1639:
4153:src/xeq.c     **** 
 22781              		.loc 1 4153 1 view .LVU5919
 22782 001e 29B0     		add	sp, sp, #164
 22783              		.cfi_remember_state
 22784              		.cfi_def_cfa_offset 28
 22785              		@ sp needed
 22786 0020 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 22787              	.L1663:
 22788              		.cfi_restore_state
 22789 0024 0646     		mov	r6, r0
4112:src/xeq.c     **** 	end[0] = n;
 22790              		.loc 1 4112 2 is_stmt 1 view .LVU5920
4112:src/xeq.c     **** 	end[0] = n;
 22791              		.loc 1 4112 9 is_stmt 0 view .LVU5921
 22792 0026 1490     		str	r0, [sp, #80]
4113:src/xeq.c     **** 	i = 0;
 22793              		.loc 1 4113 2 is_stmt 1 view .LVU5922
4113:src/xeq.c     **** 	i = 0;
 22794              		.loc 1 4113 9 is_stmt 0 view .LVU5923
 22795 0028 CDF87880 		str	r8, [sp, #120]
4114:src/xeq.c     **** 	while (i>=0) {
 22796              		.loc 1 4114 2 is_stmt 1 view .LVU5924
 22797              	.LVL1772:
4115:src/xeq.c     **** 		int L = beg[i];
 22798              		.loc 1 4115 2 view .LVU5925
4115:src/xeq.c     **** 		int L = beg[i];
 22799              		.loc 1 4115 8 view .LVU5926
4114:src/xeq.c     **** 	while (i>=0) {
 22800              		.loc 1 4114 4 is_stmt 0 view .LVU5927
 22801 002c 0746     		mov	r7, r0
 22802              	.LVL1773:
 22803              	.L1653:
 22804              	.LBB3295:
4116:src/xeq.c     **** 		int R = end[i] - 1;
 22805              		.loc 1 4116 3 is_stmt 1 view .LVU5928
4117:src/xeq.c     **** 		if (L<R) {
 22806              		.loc 1 4117 3 view .LVU5929
4117:src/xeq.c     **** 		if (L<R) {
 22807              		.loc 1 4117 7 is_stmt 0 view .LVU5930
 22808 002e 08F1FF34 		add	r4, r8, #-1
 22809              	.LVL1774:
4118:src/xeq.c     **** 			const int pvt = s + L;
 22810              		.loc 1 4118 3 is_stmt 1 view .LVU5931
4118:src/xeq.c     **** 			const int pvt = s + L;
 22811              		.loc 1 4118 6 is_stmt 0 view .LVU5932
 22812 0032 B442     		cmp	r4, r6
 22813 0034 0CDC     		bgt	.L1664
 22814              	.LVL1775:
 22815              	.L1642:
4151:src/xeq.c     **** 	}
 22816              		.loc 1 4151 4 is_stmt 1 view .LVU5933
 22817              	.LBE3295:
4115:src/xeq.c     **** 		int L = beg[i];
 22818              		.loc 1 4115 8 is_stmt 0 view .LVU5934
 22819 0036 013F     		subs	r7, r7, #1
 22820              	.LVL1776:
ARM GAS  /tmp/ccK8IvWa.s 			page 594


4115:src/xeq.c     **** 		int L = beg[i];
 22821              		.loc 1 4115 8 view .LVU5935
 22822 0038 F1D3     		bcc	.L1639
 22823 003a 28AB     		add	r3, sp, #160
 22824 003c 03EB8703 		add	r3, r3, r7, lsl #2
 22825 0040 53F8288C 		ldr	r8, [r3, #-40]
 22826 0044 53F8506C 		ldr	r6, [r3, #-80]
 22827              	.LVL1777:
 22828              	.LBB3298:
4116:src/xeq.c     **** 		int R = end[i] - 1;
 22829              		.loc 1 4116 3 is_stmt 1 view .LVU5936
4117:src/xeq.c     **** 		if (L<R) {
 22830              		.loc 1 4117 3 view .LVU5937
4117:src/xeq.c     **** 		if (L<R) {
 22831              		.loc 1 4117 7 is_stmt 0 view .LVU5938
 22832 0048 08F1FF34 		add	r4, r8, #-1
 22833              	.LVL1778:
4118:src/xeq.c     **** 			const int pvt = s + L;
 22834              		.loc 1 4118 3 is_stmt 1 view .LVU5939
4118:src/xeq.c     **** 			const int pvt = s + L;
 22835              		.loc 1 4118 6 is_stmt 0 view .LVU5940
 22836 004c B442     		cmp	r4, r6
 22837 004e F2DD     		ble	.L1642
 22838              	.LVL1779:
 22839              	.L1664:
 22840              	.LBB3296:
4119:src/xeq.c     **** 			getRegister(&pivot, pvt);
 22841              		.loc 1 4119 4 is_stmt 1 view .LVU5941
4120:src/xeq.c     **** 			while (L<R) {
 22842              		.loc 1 4120 4 view .LVU5942
4119:src/xeq.c     **** 			getRegister(&pivot, pvt);
 22843              		.loc 1 4119 14 is_stmt 0 view .LVU5943
 22844 0050 0099     		ldr	r1, [sp]
4120:src/xeq.c     **** 			while (L<R) {
 22845              		.loc 1 4120 4 view .LVU5944
 22846 0052 02A8     		add	r0, sp, #8
 22847 0054 3144     		add	r1, r1, r6
 22848              	.LVL1780:
4120:src/xeq.c     **** 			while (L<R) {
 22849              		.loc 1 4120 4 view .LVU5945
 22850 0056 FFF7FEFF 		bl	getRegister
 22851              	.LVL1781:
4121:src/xeq.c     **** 				while (L<R) {
 22852              		.loc 1 4121 4 is_stmt 1 view .LVU5946
4121:src/xeq.c     **** 				while (L<R) {
 22853              		.loc 1 4121 10 view .LVU5947
4120:src/xeq.c     **** 			while (L<R) {
 22854              		.loc 1 4120 4 is_stmt 0 view .LVU5948
 22855 005a B146     		mov	r9, r6
 22856              	.L1645:
4123:src/xeq.c     **** 					if (dn_lt(&a, &pivot))
 22857              		.loc 1 4123 6 is_stmt 1 view .LVU5949
 22858 005c 0099     		ldr	r1, [sp]
 22859 005e 0BA8     		add	r0, sp, #44
 22860 0060 2144     		add	r1, r1, r4
 22861 0062 FFF7FEFF 		bl	getRegister
 22862              	.LVL1782:
ARM GAS  /tmp/ccK8IvWa.s 			page 595


4124:src/xeq.c     **** 						break;
 22863              		.loc 1 4124 6 view .LVU5950
4124:src/xeq.c     **** 						break;
 22864              		.loc 1 4124 10 is_stmt 0 view .LVU5951
 22865 0066 02A9     		add	r1, sp, #8
 22866 0068 0BA8     		add	r0, sp, #44
 22867 006a FFF7FEFF 		bl	dn_lt
 22868              	.LVL1783:
4126:src/xeq.c     **** 				}
 22869              		.loc 1 4126 6 is_stmt 1 view .LVU5952
4124:src/xeq.c     **** 						break;
 22870              		.loc 1 4124 9 is_stmt 0 view .LVU5953
 22871 006e 00BB     		cbnz	r0, .L1644
4126:src/xeq.c     **** 				}
 22872              		.loc 1 4126 7 view .LVU5954
 22873 0070 013C     		subs	r4, r4, #1
 22874              	.LVL1784:
4122:src/xeq.c     **** 					getRegister(&a, s + R);
 22875              		.loc 1 4122 11 is_stmt 1 view .LVU5955
 22876 0072 4C45     		cmp	r4, r9
 22877 0074 F2DC     		bgt	.L1645
 22878              	.L1646:
 22879              	.LVL1785:
4130:src/xeq.c     **** 					getRegister(&a, s + L);
 22880              		.loc 1 4130 11 is_stmt 0 view .LVU5956
 22881 0076 4D46     		mov	r5, r9
 22882              	.LVL1786:
4121:src/xeq.c     **** 				while (L<R) {
 22883              		.loc 1 4121 10 is_stmt 1 view .LVU5957
 22884              	.L1654:
4139:src/xeq.c     **** 			if (L - beg[i] < end[i] - (L+1)) {
 22885              		.loc 1 4139 4 view .LVU5958
 22886 0078 0098     		ldr	r0, [sp]
 22887 007a 02A9     		add	r1, sp, #8
 22888 007c 2844     		add	r0, r0, r5
 22889 007e FFF7FEFF 		bl	setRegister
 22890              	.LVL1787:
4140:src/xeq.c     **** 				beg[i+1] = beg[i];
 22891              		.loc 1 4140 4 view .LVU5959
4140:src/xeq.c     **** 				beg[i+1] = beg[i];
 22892              		.loc 1 4140 32 is_stmt 0 view .LVU5960
 22893 0082 6B1C     		adds	r3, r5, #1
4140:src/xeq.c     **** 				beg[i+1] = beg[i];
 22894              		.loc 1 4140 28 view .LVU5961
 22895 0084 A8EB0302 		sub	r2, r8, r3
4140:src/xeq.c     **** 				beg[i+1] = beg[i];
 22896              		.loc 1 4140 10 view .LVU5962
 22897 0088 A91B     		subs	r1, r5, r6
4140:src/xeq.c     **** 				beg[i+1] = beg[i];
 22898              		.loc 1 4140 7 view .LVU5963
 22899 008a 9142     		cmp	r1, r2
4141:src/xeq.c     **** 				end[i+1] = L;
 22900              		.loc 1 4141 10 view .LVU5964
 22901 008c 07F10101 		add	r1, r7, #1
4143:src/xeq.c     **** 			} else {
 22902              		.loc 1 4143 12 view .LVU5965
 22903 0090 28AA     		add	r2, sp, #160
ARM GAS  /tmp/ccK8IvWa.s 			page 596


 22904 0092 02EB8700 		add	r0, r2, r7, lsl #2
4141:src/xeq.c     **** 				end[i+1] = L;
 22905              		.loc 1 4141 14 view .LVU5966
 22906 0096 02EB8102 		add	r2, r2, r1, lsl #2
 22907 009a 0F46     		mov	r7, r1
 22908              	.LVL1788:
4140:src/xeq.c     **** 				beg[i+1] = beg[i];
 22909              		.loc 1 4140 7 view .LVU5967
 22910 009c 2DDA     		bge	.L1650
4141:src/xeq.c     **** 				end[i+1] = L;
 22911              		.loc 1 4141 5 is_stmt 1 view .LVU5968
4141:src/xeq.c     **** 				end[i+1] = L;
 22912              		.loc 1 4141 14 is_stmt 0 view .LVU5969
 22913 009e 42F8506C 		str	r6, [r2, #-80]
4142:src/xeq.c     **** 				beg[i] = L+1;
 22914              		.loc 1 4142 5 is_stmt 1 view .LVU5970
4143:src/xeq.c     **** 			} else {
 22915              		.loc 1 4143 12 is_stmt 0 view .LVU5971
 22916 00a2 40F8503C 		str	r3, [r0, #-80]
 22917 00a6 52F8506C 		ldr	r6, [r2, #-80]
4142:src/xeq.c     **** 				beg[i] = L+1;
 22918              		.loc 1 4142 14 view .LVU5972
 22919 00aa 42F8285C 		str	r5, [r2, #-40]
4143:src/xeq.c     **** 			} else {
 22920              		.loc 1 4143 5 is_stmt 1 view .LVU5973
 22921 00ae A846     		mov	r8, r5
 22922 00b0 BDE7     		b	.L1653
 22923              	.LVL1789:
 22924              	.L1644:
4128:src/xeq.c     **** 					copyreg_n(s + L++, s + R);
 22925              		.loc 1 4128 5 view .LVU5974
4128:src/xeq.c     **** 					copyreg_n(s + L++, s + R);
 22926              		.loc 1 4128 8 is_stmt 0 view .LVU5975
 22927 00b2 A145     		cmp	r9, r4
 22928 00b4 DFDA     		bge	.L1646
4129:src/xeq.c     **** 				while (L<R) {
 22929              		.loc 1 4129 6 is_stmt 1 view .LVU5976
 22930 00b6 0098     		ldr	r0, [sp]
4129:src/xeq.c     **** 				while (L<R) {
 22931              		.loc 1 4129 21 is_stmt 0 view .LVU5977
 22932 00b8 09F10105 		add	r5, r9, #1
 22933              	.LVL1790:
4129:src/xeq.c     **** 				while (L<R) {
 22934              		.loc 1 4129 6 view .LVU5978
 22935 00bc 0119     		adds	r1, r0, r4
 22936 00be 4844     		add	r0, r0, r9
 22937 00c0 FFF7FEFF 		bl	copyreg_n
 22938              	.LVL1791:
4130:src/xeq.c     **** 					getRegister(&a, s + L);
 22939              		.loc 1 4130 11 is_stmt 1 view .LVU5979
 22940 00c4 A542     		cmp	r5, r4
 22941 00c6 03DB     		blt	.L1648
 22942 00c8 21E0     		b	.L1655
 22943              	.L1665:
4134:src/xeq.c     **** 				}
 22944              		.loc 1 4134 7 is_stmt 0 view .LVU5980
 22945 00ca 0135     		adds	r5, r5, #1
ARM GAS  /tmp/ccK8IvWa.s 			page 597


 22946              	.LVL1792:
4130:src/xeq.c     **** 					getRegister(&a, s + L);
 22947              		.loc 1 4130 11 is_stmt 1 view .LVU5981
 22948 00cc A542     		cmp	r5, r4
 22949 00ce D3D0     		beq	.L1654
 22950              	.L1648:
4131:src/xeq.c     **** 					if (dn_gt(&a, &pivot))
 22951              		.loc 1 4131 6 view .LVU5982
 22952 00d0 0099     		ldr	r1, [sp]
 22953 00d2 0BA8     		add	r0, sp, #44
 22954 00d4 2944     		add	r1, r1, r5
 22955 00d6 FFF7FEFF 		bl	getRegister
 22956              	.LVL1793:
4132:src/xeq.c     **** 						break;
 22957              		.loc 1 4132 6 view .LVU5983
4132:src/xeq.c     **** 						break;
 22958              		.loc 1 4132 10 is_stmt 0 view .LVU5984
 22959 00da 0BA9     		add	r1, sp, #44
 22960 00dc 02A8     		add	r0, sp, #8
 22961 00de FFF7FEFF 		bl	dn_lt
 22962              	.LVL1794:
4134:src/xeq.c     **** 				}
 22963              		.loc 1 4134 6 is_stmt 1 view .LVU5985
4132:src/xeq.c     **** 						break;
 22964              		.loc 1 4132 9 is_stmt 0 view .LVU5986
 22965 00e2 0028     		cmp	r0, #0
 22966 00e4 F1D0     		beq	.L1665
4136:src/xeq.c     **** 					copyreg_n(s + R--, s + L);
 22967              		.loc 1 4136 5 is_stmt 1 view .LVU5987
4137:src/xeq.c     **** 			}
 22968              		.loc 1 4137 6 view .LVU5988
 22969 00e6 0098     		ldr	r0, [sp]
 22970 00e8 4119     		adds	r1, r0, r5
 22971 00ea 2044     		add	r0, r0, r4
4137:src/xeq.c     **** 			}
 22972              		.loc 1 4137 21 is_stmt 0 view .LVU5989
 22973 00ec 013C     		subs	r4, r4, #1
 22974              	.LVL1795:
4137:src/xeq.c     **** 			}
 22975              		.loc 1 4137 6 view .LVU5990
 22976 00ee FFF7FEFF 		bl	copyreg_n
 22977              	.LVL1796:
4121:src/xeq.c     **** 				while (L<R) {
 22978              		.loc 1 4121 10 is_stmt 1 view .LVU5991
 22979 00f2 A542     		cmp	r5, r4
 22980 00f4 C0DA     		bge	.L1654
 22981 00f6 A946     		mov	r9, r5
4122:src/xeq.c     **** 					getRegister(&a, s + R);
 22982              		.loc 1 4122 11 view .LVU5992
 22983 00f8 B0E7     		b	.L1645
 22984              	.LVL1797:
 22985              	.L1650:
4145:src/xeq.c     **** 				end[i+1] = end[i];
 22986              		.loc 1 4145 5 view .LVU5993
4146:src/xeq.c     **** 				end[i] = L;
 22987              		.loc 1 4146 14 is_stmt 0 view .LVU5994
 22988 00fa 42F8288C 		str	r8, [r2, #-40]
ARM GAS  /tmp/ccK8IvWa.s 			page 598


4147:src/xeq.c     **** 			}
 22989              		.loc 1 4147 12 view .LVU5995
 22990 00fe 40F8285C 		str	r5, [r0, #-40]
 22991 0102 52F8288C 		ldr	r8, [r2, #-40]
4145:src/xeq.c     **** 				end[i+1] = end[i];
 22992              		.loc 1 4145 14 view .LVU5996
 22993 0106 42F8503C 		str	r3, [r2, #-80]
4146:src/xeq.c     **** 				end[i] = L;
 22994              		.loc 1 4146 5 is_stmt 1 view .LVU5997
4147:src/xeq.c     **** 			}
 22995              		.loc 1 4147 5 view .LVU5998
4149:src/xeq.c     **** 		} else
 22996              		.loc 1 4149 4 view .LVU5999
 22997              	.LVL1798:
4149:src/xeq.c     **** 		} else
 22998              		.loc 1 4149 4 is_stmt 0 view .LVU6000
 22999              	.LBE3296:
 23000              	.LBE3298:
4115:src/xeq.c     **** 		int L = beg[i];
 23001              		.loc 1 4115 8 is_stmt 1 view .LVU6001
 23002              	.LBB3299:
 23003              	.LBB3297:
4147:src/xeq.c     **** 			}
 23004              		.loc 1 4147 12 is_stmt 0 view .LVU6002
 23005 010a 1E46     		mov	r6, r3
 23006 010c 8FE7     		b	.L1653
 23007              	.LVL1799:
 23008              	.L1655:
4130:src/xeq.c     **** 					getRegister(&a, s + L);
 23009              		.loc 1 4130 11 view .LVU6003
 23010 010e A946     		mov	r9, r5
 23011              	.LVL1800:
4130:src/xeq.c     **** 					getRegister(&a, s + L);
 23012              		.loc 1 4130 11 view .LVU6004
 23013 0110 4D46     		mov	r5, r9
 23014              	.LVL1801:
4121:src/xeq.c     **** 				while (L<R) {
 23015              		.loc 1 4121 10 is_stmt 1 view .LVU6005
 23016 0112 B1E7     		b	.L1654
 23017              	.LBE3297:
 23018              	.LBE3299:
 23019              		.cfi_endproc
 23020              	.LFE225:
 23022              		.section	.text.reset_volatile_state,"ax",%progbits
 23023              		.align	1
 23024              		.p2align 2,,3
 23025              		.global	reset_volatile_state
 23026              		.syntax unified
 23027              		.thumb
 23028              		.thumb_func
 23029              		.fpu fpv4-sp-d16
 23031              	reset_volatile_state:
 23032              	.LFB227:
4188:src/xeq.c     **** 	// extern int IntMaxWindow;
 23033              		.loc 1 4188 33 view -0
 23034              		.cfi_startproc
 23035              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccK8IvWa.s 			page 599


 23036              		@ frame_needed = 0, uses_anonymous_args = 0
 23037              		@ link register save eliminated.
4191:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 23038              		.loc 1 4191 2 view .LVU6007
4191:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 23039              		.loc 1 4191 16 is_stmt 0 view .LVU6008
 23040 0000 034B     		ldr	r3, .L1667
 23041 0002 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
4192:src/xeq.c     **** }
 23042              		.loc 1 4192 15 view .LVU6009
 23043 0004 0021     		movs	r1, #0
4191:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 23044              		.loc 1 4191 16 view .LVU6010
 23045 0006 6FF3C502 		bfc	r2, #3, #3
 23046 000a 1A75     		strb	r2, [r3, #20]
4192:src/xeq.c     **** }
 23047              		.loc 1 4192 2 is_stmt 1 view .LVU6011
4192:src/xeq.c     **** }
 23048              		.loc 1 4192 15 is_stmt 0 view .LVU6012
 23049 000c 5974     		strb	r1, [r3, #17]
4193:src/xeq.c     **** 
 23050              		.loc 1 4193 1 view .LVU6013
 23051 000e 7047     		bx	lr
 23052              	.L1668:
 23053              		.align	2
 23054              	.L1667:
 23055 0010 00000000 		.word	StateWhileOn
 23056              		.cfi_endproc
 23057              	.LFE227:
 23059              		.section	.rodata.busy.str1.4,"aMS",%progbits,1
 23060              		.align	2
 23061              	.LC7:
 23062 0000 57616974 		.ascii	"Wait...\000"
 23062      2E2E2E00 
 23063              		.section	.text.busy,"ax",%progbits
 23064              		.align	1
 23065              		.p2align 2,,3
 23066              		.global	busy
 23067              		.syntax unified
 23068              		.thumb
 23069              		.thumb_func
 23070              		.fpu fpv4-sp-d16
 23072              	busy:
 23073              	.LFB228:
4200:src/xeq.c     **** 	/*
 23074              		.loc 1 4200 1 is_stmt 1 view -0
 23075              		.cfi_startproc
 23076              		@ args = 0, pretend = 0, frame = 0
 23077              		@ frame_needed = 0, uses_anonymous_args = 0
 23078              		@ link register save eliminated.
4204:src/xeq.c     **** 
 23079              		.loc 1 4204 12 view .LVU6015
4209:src/xeq.c     **** 
 23080              		.loc 1 4209 17 view .LVU6016
4214:src/xeq.c     **** 		Busy = 1;
 23081              		.loc 1 4214 2 view .LVU6017
4214:src/xeq.c     **** 		Busy = 1;
ARM GAS  /tmp/ccK8IvWa.s 			page 600


 23082              		.loc 1 4214 6 is_stmt 0 view .LVU6018
 23083 0000 054A     		ldr	r2, .L1672
4214:src/xeq.c     **** 		Busy = 1;
 23084              		.loc 1 4214 15 view .LVU6019
 23085 0002 064B     		ldr	r3, .L1672+4
4214:src/xeq.c     **** 		Busy = 1;
 23086              		.loc 1 4214 12 view .LVU6020
 23087 0004 1168     		ldr	r1, [r2]
 23088 0006 1B68     		ldr	r3, [r3]
 23089 0008 1943     		orrs	r1, r1, r3
 23090 000a 00D0     		beq	.L1671
4218:src/xeq.c     **** 
 23091              		.loc 1 4218 1 view .LVU6021
 23092 000c 7047     		bx	lr
 23093              	.L1671:
 23094              	.LBB3302:
 23095              	.LBI3302:
4199:src/xeq.c     **** {
 23096              		.loc 1 4199 6 is_stmt 1 view .LVU6022
 23097              	.LBB3303:
4215:src/xeq.c     **** 		message("Wait...", NULL);
 23098              		.loc 1 4215 3 view .LVU6023
4215:src/xeq.c     **** 		message("Wait...", NULL);
 23099              		.loc 1 4215 8 is_stmt 0 view .LVU6024
 23100 000e 0123     		movs	r3, #1
4216:src/xeq.c     **** 	}
 23101              		.loc 1 4216 3 view .LVU6025
 23102 0010 0348     		ldr	r0, .L1672+8
4215:src/xeq.c     **** 		message("Wait...", NULL);
 23103              		.loc 1 4215 8 view .LVU6026
 23104 0012 1360     		str	r3, [r2]
4216:src/xeq.c     **** 	}
 23105              		.loc 1 4216 3 is_stmt 1 view .LVU6027
 23106 0014 FFF7FEBF 		b	message
 23107              	.LVL1802:
 23108              	.L1673:
 23109              		.align	2
 23110              	.L1672:
 23111 0018 00000000 		.word	Busy
 23112 001c 00000000 		.word	Running
 23113 0020 00000000 		.word	.LC7
 23114              	.LBE3303:
 23115              	.LBE3302:
 23116              		.cfi_endproc
 23117              	.LFE228:
 23119              		.section	.text.intMonadic,"ax",%progbits
 23120              		.align	1
 23121              		.p2align 2,,3
 23122              		.global	intMonadic
 23123              		.syntax unified
 23124              		.thumb
 23125              		.thumb_func
 23126              		.fpu fpv4-sp-d16
 23128              	intMonadic:
 23129              	.LVL1803:
 23130              	.LFB232:
4296:src/xeq.c     **** 	int s;
ARM GAS  /tmp/ccK8IvWa.s 			page 601


 23131              		.loc 1 4296 43 view -0
 23132              		.cfi_startproc
 23133              		@ args = 0, pretend = 0, frame = 80
 23134              		@ frame_needed = 0, uses_anonymous_args = 0
4297:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &s);
 23135              		.loc 1 4297 2 view .LVU6029
4298:src/xeq.c     **** 	decNumber rx, r;
 23136              		.loc 1 4298 2 view .LVU6030
4296:src/xeq.c     **** 	int s;
 23137              		.loc 1 4296 43 is_stmt 0 view .LVU6031
 23138 0000 30B5     		push	{r4, r5, lr}
 23139              		.cfi_def_cfa_offset 12
 23140              		.cfi_offset 4, -12
 23141              		.cfi_offset 5, -8
 23142              		.cfi_offset 14, -4
 23143 0002 95B0     		sub	sp, sp, #84
 23144              		.cfi_def_cfa_offset 96
4298:src/xeq.c     **** 	decNumber rx, r;
 23145              		.loc 1 4298 30 view .LVU6032
 23146 0004 01AA     		add	r2, sp, #4
 23147 0006 FFF7FEFF 		bl	extract_value
 23148              	.LVL1804:
4300:src/xeq.c     **** 
 23149              		.loc 1 4300 19 view .LVU6033
 23150 000a 1E4A     		ldr	r2, .L1689
4302:src/xeq.c     **** 		bad_mode_error();
 23151              		.loc 1 4302 6 view .LVU6034
 23152 000c 1E4B     		ldr	r3, .L1689+4
4300:src/xeq.c     **** 
 23153              		.loc 1 4300 15 view .LVU6035
 23154 000e 1478     		ldrb	r4, [r2]	@ zero_extendqisi2
4302:src/xeq.c     **** 		bad_mode_error();
 23155              		.loc 1 4302 6 view .LVU6036
 23156 0010 04EB4404 		add	r4, r4, r4, lsl #1
 23157 0014 53F83440 		ldr	r4, [r3, r4, lsl #3]
 23158              	.LVL1805:
4299:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
 23159              		.loc 1 4299 2 is_stmt 1 view .LVU6037
4300:src/xeq.c     **** 
 23160              		.loc 1 4300 2 view .LVU6038
4302:src/xeq.c     **** 		bad_mode_error();
 23161              		.loc 1 4302 2 view .LVU6039
4302:src/xeq.c     **** 		bad_mode_error();
 23162              		.loc 1 4302 5 is_stmt 0 view .LVU6040
 23163 0018 5CB1     		cbz	r4, .L1679
 23164              	.LBB3321:
4305:src/xeq.c     **** #ifndef REALBUILD
 23165              		.loc 1 4305 3 is_stmt 1 view .LVU6041
 23166              	.LVL1806:
4307:src/xeq.c     **** 			bad_mode_error();
 23167              		.loc 1 4307 3 view .LVU6042
 23168              	.LBB3322:
 23169              	.LBI3322:
4234:src/xeq.c     **** {
 23170              		.loc 1 4234 24 view .LVU6043
 23171              	.LBB3323:
4236:src/xeq.c     **** 	if (xp < xrom)
ARM GAS  /tmp/ccK8IvWa.s 			page 602


 23172              		.loc 1 4236 2 view .LVU6044
4237:src/xeq.c     **** 		return NULL;
 23173              		.loc 1 4237 5 is_stmt 0 view .LVU6045
 23174 001a 1C4B     		ldr	r3, .L1689+8
4236:src/xeq.c     **** 	if (xp < xrom)
 23175              		.loc 1 4236 59 view .LVU6046
 23176 001c 24F00102 		bic	r2, r4, #1
 23177              	.LVL1807:
4237:src/xeq.c     **** 		return NULL;
 23178              		.loc 1 4237 2 is_stmt 1 view .LVU6047
4237:src/xeq.c     **** 		return NULL;
 23179              		.loc 1 4237 5 is_stmt 0 view .LVU6048
 23180 0020 9A42     		cmp	r2, r3
 23181 0022 10D3     		bcc	.L1678
4241:src/xeq.c     **** 		return NULL;
 23182              		.loc 1 4241 2 is_stmt 1 view .LVU6049
4241:src/xeq.c     **** 		return NULL;
 23183              		.loc 1 4241 17 is_stmt 0 view .LVU6050
 23184 0024 1A4D     		ldr	r5, .L1689+12
 23185 0026 2D88     		ldrh	r5, [r5]
 23186 0028 03EB4503 		add	r3, r3, r5, lsl #1
4241:src/xeq.c     **** 		return NULL;
 23187              		.loc 1 4241 5 view .LVU6051
 23188 002c 9A42     		cmp	r2, r3
 23189 002e 0AD2     		bcs	.L1678
 23190              	.LVL1808:
4241:src/xeq.c     **** 		return NULL;
 23191              		.loc 1 4241 5 view .LVU6052
 23192              	.LBE3323:
 23193              	.LBE3322:
4307:src/xeq.c     **** 			bad_mode_error();
 23194              		.loc 1 4307 6 view .LVU6053
 23195 0030 4AB1     		cbz	r2, .L1678
 23196              	.LVL1809:
 23197              	.L1679:
4307:src/xeq.c     **** 			bad_mode_error();
 23198              		.loc 1 4307 6 view .LVU6054
 23199              	.LBE3321:
4303:src/xeq.c     **** 	else {
 23200              		.loc 1 4303 3 is_stmt 1 view .LVU6055
 23201              	.LBB3332:
 23202              	.LBI3332:
 552:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 23203              		.loc 1 552 6 view .LVU6056
 23204              	.LBE3332:
 553:src/xeq.c     **** }
 23205              		.loc 1 553 2 view .LVU6057
 23206              	.LBB3341:
 23207              	.LBB3333:
 23208              	.LBI3333:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23209              		.loc 1 523 5 view .LVU6058
 23210              	.LBB3334:
 524:src/xeq.c     **** 		Error = e;
 23211              		.loc 1 524 2 view .LVU6059
 524:src/xeq.c     **** 		Error = e;
 23212              		.loc 1 524 12 is_stmt 0 view .LVU6060
ARM GAS  /tmp/ccK8IvWa.s 			page 603


 23213 0032 184B     		ldr	r3, .L1689+16
 524:src/xeq.c     **** 		Error = e;
 23214              		.loc 1 524 5 view .LVU6061
 23215 0034 1A68     		ldr	r2, [r3]
 23216 0036 1AB1     		cbz	r2, .L1676
 23217              	.LVL1810:
 23218              	.L1687:
 23219              	.LBB3335:
 23220              	.LBB3336:
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 23221              		.loc 1 526 3 is_stmt 1 view .LVU6062
 23222              	.LBE3336:
 23223              	.LBE3335:
 23224              	.LBE3334:
 23225              	.LBE3333:
 23226              	.LBE3341:
4321:src/xeq.c     **** }
 23227              		.loc 1 4321 9 is_stmt 0 view .LVU6063
 23228 0038 0020     		movs	r0, #0
 23229 003a 0146     		mov	r1, r0
4322:src/xeq.c     **** 
 23230              		.loc 1 4322 1 view .LVU6064
 23231 003c 15B0     		add	sp, sp, #84
 23232              		.cfi_remember_state
 23233              		.cfi_def_cfa_offset 12
 23234              		@ sp needed
 23235 003e 30BD     		pop	{r4, r5, pc}
 23236              	.LVL1811:
 23237              	.L1676:
 23238              		.cfi_restore_state
 23239              	.LBB3342:
 23240              	.LBB3340:
 23241              	.LBB3339:
 23242              	.LBB3338:
 23243              	.LBI3335:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23244              		.loc 1 523 5 is_stmt 1 view .LVU6065
 23245              	.LBB3337:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 23246              		.loc 1 525 3 view .LVU6066
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 23247              		.loc 1 525 9 is_stmt 0 view .LVU6067
 23248 0040 0D22     		movs	r2, #13
 23249 0042 1A60     		str	r2, [r3]
 23250 0044 F8E7     		b	.L1687
 23251              	.LVL1812:
 23252              	.L1678:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 23253              		.loc 1 525 9 view .LVU6068
 23254              	.LBE3337:
 23255              	.LBE3338:
 23256              	.LBE3339:
 23257              	.LBE3340:
 23258              	.LBE3342:
 23259              	.LBB3343:
4312:src/xeq.c     **** 			if (s)
 23260              		.loc 1 4312 4 is_stmt 1 view .LVU6069
ARM GAS  /tmp/ccK8IvWa.s 			page 604


 23261 0046 0246     		mov	r2, r0
 23262 0048 0B46     		mov	r3, r1
 23263 004a 02A8     		add	r0, sp, #8
 23264              	.LVL1813:
4312:src/xeq.c     **** 			if (s)
 23265              		.loc 1 4312 4 is_stmt 0 view .LVU6070
 23266 004c FFF7FEFF 		bl	ullint_to_dn
 23267              	.LVL1814:
4313:src/xeq.c     **** 				dn_minus(&rx, &rx);
 23268              		.loc 1 4313 4 is_stmt 1 view .LVU6071
4313:src/xeq.c     **** 				dn_minus(&rx, &rx);
 23269              		.loc 1 4313 7 is_stmt 0 view .LVU6072
 23270 0050 019B     		ldr	r3, [sp, #4]
 23271 0052 8BB9     		cbnz	r3, .L1688
 23272              	.L1680:
4315:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 23273              		.loc 1 4315 4 is_stmt 1 view .LVU6073
4315:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 23274              		.loc 1 4315 16 is_stmt 0 view .LVU6074
 23275 0054 02A9     		add	r1, sp, #8
 23276 0056 0BA8     		add	r0, sp, #44
 23277 0058 A047     		blx	r4
 23278              	.LVL1815:
4315:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 23279              		.loc 1 4315 7 view .LVU6075
 23280 005a 40B9     		cbnz	r0, .L1681
4316:src/xeq.c     **** 			else
 23281              		.loc 1 4316 5 is_stmt 1 view .LVU6076
 23282              	.LVL1816:
 23283              	.LBB3324:
 23284              	.LBI3324:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23285              		.loc 1 523 5 view .LVU6077
 23286              	.LBB3325:
 524:src/xeq.c     **** 		Error = e;
 23287              		.loc 1 524 2 view .LVU6078
 524:src/xeq.c     **** 		Error = e;
 23288              		.loc 1 524 12 is_stmt 0 view .LVU6079
 23289 005c 0D4B     		ldr	r3, .L1689+16
 524:src/xeq.c     **** 		Error = e;
 23290              		.loc 1 524 5 view .LVU6080
 23291 005e 1A68     		ldr	r2, [r3]
 23292 0060 002A     		cmp	r2, #0
 23293 0062 E9D1     		bne	.L1687
 23294              	.LVL1817:
 23295              	.LBB3326:
 23296              	.LBI3326:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23297              		.loc 1 523 5 is_stmt 1 view .LVU6081
 23298              	.LBB3327:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 23299              		.loc 1 525 3 view .LVU6082
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 23300              		.loc 1 525 9 is_stmt 0 view .LVU6083
 23301 0064 0122     		movs	r2, #1
 23302              	.LBE3327:
 23303              	.LBE3326:
ARM GAS  /tmp/ccK8IvWa.s 			page 605


 23304              	.LBE3325:
 23305              	.LBE3324:
 23306              	.LBE3343:
4321:src/xeq.c     **** }
 23307              		.loc 1 4321 9 view .LVU6084
 23308 0066 0146     		mov	r1, r0
 23309              	.LBB3344:
 23310              	.LBB3331:
 23311              	.LBB3330:
 23312              	.LBB3329:
 23313              	.LBB3328:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 23314              		.loc 1 525 9 view .LVU6085
 23315 0068 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 23316              		.loc 1 526 3 is_stmt 1 view .LVU6086
 23317              	.LBE3328:
 23318              	.LBE3329:
 23319              	.LBE3330:
 23320              	.LBE3331:
 23321              	.LBE3344:
4322:src/xeq.c     **** 
 23322              		.loc 1 4322 1 is_stmt 0 view .LVU6087
 23323 006a 15B0     		add	sp, sp, #84
 23324              		.cfi_remember_state
 23325              		.cfi_def_cfa_offset 12
 23326              		@ sp needed
 23327 006c 30BD     		pop	{r4, r5, pc}
 23328              	.LVL1818:
 23329              	.L1681:
 23330              		.cfi_restore_state
 23331              	.LBB3345:
4318:src/xeq.c     **** 		}
 23332              		.loc 1 4318 5 is_stmt 1 view .LVU6088
4318:src/xeq.c     **** 		}
 23333              		.loc 1 4318 12 is_stmt 0 view .LVU6089
 23334 006e 0BA8     		add	r0, sp, #44
 23335 0070 FFF7FEFF 		bl	intResult
 23336              	.LVL1819:
 23337              	.LBE3345:
4322:src/xeq.c     **** 
 23338              		.loc 1 4322 1 view .LVU6090
 23339 0074 15B0     		add	sp, sp, #84
 23340              		.cfi_remember_state
 23341              		.cfi_def_cfa_offset 12
 23342              		@ sp needed
 23343 0076 30BD     		pop	{r4, r5, pc}
 23344              	.LVL1820:
 23345              	.L1688:
 23346              		.cfi_restore_state
 23347              	.LBB3346:
4314:src/xeq.c     **** 			if (NULL == fp(&r, &rx))
 23348              		.loc 1 4314 5 is_stmt 1 view .LVU6091
 23349 0078 02A9     		add	r1, sp, #8
 23350 007a 0846     		mov	r0, r1
 23351 007c FFF7FEFF 		bl	dn_minus
 23352              	.LVL1821:
ARM GAS  /tmp/ccK8IvWa.s 			page 606


 23353 0080 E8E7     		b	.L1680
 23354              	.L1690:
 23355 0082 00BF     		.align	2
 23356              	.L1689:
 23357 0084 00000000 		.word	XeqOpCode
 23358 0088 00000000 		.word	monfuncs
 23359 008c 00000000 		.word	xrom
 23360 0090 00000000 		.word	xrom_size
 23361 0094 00000000 		.word	Error
 23362              	.LBE3346:
 23363              		.cfi_endproc
 23364              	.LFE232:
 23366              		.section	.text.intDyadic,"ax",%progbits
 23367              		.align	1
 23368              		.p2align 2,,3
 23369              		.global	intDyadic
 23370              		.syntax unified
 23371              		.thumb
 23372              		.thumb_func
 23373              		.fpu fpv4-sp-d16
 23375              	intDyadic:
 23376              	.LVL1822:
 23377              	.LFB233:
4327:src/xeq.c     **** 	int sx, sy;
 23378              		.loc 1 4327 59 view -0
 23379              		.cfi_startproc
 23380              		@ args = 0, pretend = 0, frame = 120
 23381              		@ frame_needed = 0, uses_anonymous_args = 0
4328:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &sx);
 23382              		.loc 1 4328 2 view .LVU6093
4329:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 23383              		.loc 1 4329 2 view .LVU6094
4327:src/xeq.c     **** 	int sx, sy;
 23384              		.loc 1 4327 59 is_stmt 0 view .LVU6095
 23385 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 23386              		.cfi_def_cfa_offset 24
 23387              		.cfi_offset 4, -24
 23388              		.cfi_offset 5, -20
 23389              		.cfi_offset 6, -16
 23390              		.cfi_offset 7, -12
 23391              		.cfi_offset 8, -8
 23392              		.cfi_offset 14, -4
 23393 0004 9EB0     		sub	sp, sp, #120
 23394              		.cfi_def_cfa_offset 144
4327:src/xeq.c     **** 	int sx, sy;
 23395              		.loc 1 4327 59 view .LVU6096
 23396 0006 0546     		mov	r5, r0
 23397 0008 0C46     		mov	r4, r1
4329:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 23398              		.loc 1 4329 30 view .LVU6097
 23399 000a 1046     		mov	r0, r2
 23400              	.LVL1823:
4329:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 23401              		.loc 1 4329 30 view .LVU6098
 23402 000c 1946     		mov	r1, r3
 23403 000e 01AA     		add	r2, sp, #4
 23404              	.LVL1824:
ARM GAS  /tmp/ccK8IvWa.s 			page 607


4329:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 23405              		.loc 1 4329 30 view .LVU6099
 23406 0010 FFF7FEFF 		bl	extract_value
 23407              	.LVL1825:
4330:src/xeq.c     **** 	decNumber rx, ry, r;
 23408              		.loc 1 4330 30 view .LVU6100
 23409 0014 02AA     		add	r2, sp, #8
4329:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 23410              		.loc 1 4329 30 view .LVU6101
 23411 0016 0B46     		mov	r3, r1
 23412 0018 0646     		mov	r6, r0
4330:src/xeq.c     **** 	decNumber rx, ry, r;
 23413              		.loc 1 4330 30 view .LVU6102
 23414 001a 2146     		mov	r1, r4
 23415 001c 2846     		mov	r0, r5
4329:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 23416              		.loc 1 4329 30 view .LVU6103
 23417 001e 1D46     		mov	r5, r3
 23418              	.LVL1826:
4330:src/xeq.c     **** 	decNumber rx, ry, r;
 23419              		.loc 1 4330 2 is_stmt 1 view .LVU6104
4330:src/xeq.c     **** 	decNumber rx, ry, r;
 23420              		.loc 1 4330 30 is_stmt 0 view .LVU6105
 23421 0020 FFF7FEFF 		bl	extract_value
 23422              	.LVL1827:
4332:src/xeq.c     **** 
 23423              		.loc 1 4332 19 view .LVU6106
 23424 0024 264A     		ldr	r2, .L1711
4334:src/xeq.c     **** 		bad_mode_error();
 23425              		.loc 1 4334 6 view .LVU6107
 23426 0026 274B     		ldr	r3, .L1711+4
4332:src/xeq.c     **** 
 23427              		.loc 1 4332 15 view .LVU6108
 23428 0028 1478     		ldrb	r4, [r2]	@ zero_extendqisi2
4334:src/xeq.c     **** 		bad_mode_error();
 23429              		.loc 1 4334 6 view .LVU6109
 23430 002a 04EB4404 		add	r4, r4, r4, lsl #1
 23431 002e 53F83440 		ldr	r4, [r3, r4, lsl #3]
 23432              	.LVL1828:
4331:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
 23433              		.loc 1 4331 2 is_stmt 1 view .LVU6110
4332:src/xeq.c     **** 
 23434              		.loc 1 4332 2 view .LVU6111
4334:src/xeq.c     **** 		bad_mode_error();
 23435              		.loc 1 4334 2 view .LVU6112
4334:src/xeq.c     **** 		bad_mode_error();
 23436              		.loc 1 4334 5 is_stmt 0 view .LVU6113
 23437 0032 6CB1     		cbz	r4, .L1696
 23438              	.LBB3364:
 23439              	.LBB3365:
 23440              	.LBB3366:
4237:src/xeq.c     **** 		return NULL;
 23441              		.loc 1 4237 5 view .LVU6114
 23442 0034 244B     		ldr	r3, .L1711+8
4236:src/xeq.c     **** 	if (xp < xrom)
 23443              		.loc 1 4236 59 view .LVU6115
 23444 0036 24F00102 		bic	r2, r4, #1
ARM GAS  /tmp/ccK8IvWa.s 			page 608


 23445              	.LVL1829:
4237:src/xeq.c     **** 		return NULL;
 23446              		.loc 1 4237 5 view .LVU6116
 23447 003a 9A42     		cmp	r2, r3
 23448 003c 0746     		mov	r7, r0
 23449 003e 8846     		mov	r8, r1
 23450              	.LBE3366:
 23451              	.LBE3365:
4337:src/xeq.c     **** 
 23452              		.loc 1 4337 3 is_stmt 1 view .LVU6117
 23453              	.LVL1830:
4340:src/xeq.c     **** 			bad_mode_error();
 23454              		.loc 1 4340 3 view .LVU6118
 23455              	.LBB3368:
 23456              	.LBI3365:
4234:src/xeq.c     **** {
 23457              		.loc 1 4234 24 view .LVU6119
 23458              	.LBB3367:
4236:src/xeq.c     **** 	if (xp < xrom)
 23459              		.loc 1 4236 2 view .LVU6120
4237:src/xeq.c     **** 		return NULL;
 23460              		.loc 1 4237 2 view .LVU6121
4237:src/xeq.c     **** 		return NULL;
 23461              		.loc 1 4237 5 is_stmt 0 view .LVU6122
 23462 0040 11D3     		bcc	.L1695
4241:src/xeq.c     **** 		return NULL;
 23463              		.loc 1 4241 2 is_stmt 1 view .LVU6123
4241:src/xeq.c     **** 		return NULL;
 23464              		.loc 1 4241 17 is_stmt 0 view .LVU6124
 23465 0042 2249     		ldr	r1, .L1711+12
 23466              	.LVL1831:
4241:src/xeq.c     **** 		return NULL;
 23467              		.loc 1 4241 17 view .LVU6125
 23468 0044 0988     		ldrh	r1, [r1]
 23469 0046 03EB4103 		add	r3, r3, r1, lsl #1
4241:src/xeq.c     **** 		return NULL;
 23470              		.loc 1 4241 5 view .LVU6126
 23471 004a 9A42     		cmp	r2, r3
 23472 004c 0BD2     		bcs	.L1695
 23473              	.LVL1832:
4241:src/xeq.c     **** 		return NULL;
 23474              		.loc 1 4241 5 view .LVU6127
 23475              	.LBE3367:
 23476              	.LBE3368:
4340:src/xeq.c     **** 			bad_mode_error();
 23477              		.loc 1 4340 6 view .LVU6128
 23478 004e 52B1     		cbz	r2, .L1695
 23479              	.LVL1833:
 23480              	.L1696:
4340:src/xeq.c     **** 			bad_mode_error();
 23481              		.loc 1 4340 6 view .LVU6129
 23482              	.LBE3364:
4335:src/xeq.c     **** 	else {
 23483              		.loc 1 4335 3 is_stmt 1 view .LVU6130
 23484              	.LBB3377:
 23485              	.LBI3377:
 552:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
ARM GAS  /tmp/ccK8IvWa.s 			page 609


 23486              		.loc 1 552 6 view .LVU6131
 23487              	.LBE3377:
 553:src/xeq.c     **** }
 23488              		.loc 1 553 2 view .LVU6132
 23489              	.LBB3386:
 23490              	.LBB3378:
 23491              	.LBI3378:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23492              		.loc 1 523 5 view .LVU6133
 23493              	.LBB3379:
 524:src/xeq.c     **** 		Error = e;
 23494              		.loc 1 524 2 view .LVU6134
 524:src/xeq.c     **** 		Error = e;
 23495              		.loc 1 524 12 is_stmt 0 view .LVU6135
 23496 0050 1F4B     		ldr	r3, .L1711+16
 524:src/xeq.c     **** 		Error = e;
 23497              		.loc 1 524 5 view .LVU6136
 23498 0052 1A68     		ldr	r2, [r3]
 23499 0054 22B1     		cbz	r2, .L1693
 23500              	.LVL1834:
 23501              	.L1708:
 23502              	.LBB3380:
 23503              	.LBB3381:
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 23504              		.loc 1 526 3 is_stmt 1 view .LVU6137
 23505              	.LBE3381:
 23506              	.LBE3380:
 23507              	.LBE3379:
 23508              	.LBE3378:
 23509              	.LBE3386:
4354:src/xeq.c     **** }
 23510              		.loc 1 4354 9 is_stmt 0 view .LVU6138
 23511 0056 0020     		movs	r0, #0
 23512 0058 0146     		mov	r1, r0
4355:src/xeq.c     **** 
 23513              		.loc 1 4355 1 view .LVU6139
 23514 005a 1EB0     		add	sp, sp, #120
 23515              		.cfi_remember_state
 23516              		.cfi_def_cfa_offset 24
 23517              		@ sp needed
 23518 005c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 23519              	.LVL1835:
 23520              	.L1693:
 23521              		.cfi_restore_state
 23522              	.LBB3387:
 23523              	.LBB3385:
 23524              	.LBB3384:
 23525              	.LBB3383:
 23526              	.LBI3380:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23527              		.loc 1 523 5 is_stmt 1 view .LVU6140
 23528              	.LBB3382:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 23529              		.loc 1 525 3 view .LVU6141
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 23530              		.loc 1 525 9 is_stmt 0 view .LVU6142
 23531 0060 0D22     		movs	r2, #13
ARM GAS  /tmp/ccK8IvWa.s 			page 610


 23532 0062 1A60     		str	r2, [r3]
 23533 0064 F7E7     		b	.L1708
 23534              	.LVL1836:
 23535              	.L1695:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 23536              		.loc 1 525 9 view .LVU6143
 23537              	.LBE3382:
 23538              	.LBE3383:
 23539              	.LBE3384:
 23540              	.LBE3385:
 23541              	.LBE3387:
 23542              	.LBB3388:
4345:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 23543              		.loc 1 4345 4 is_stmt 1 view .LVU6144
 23544 0066 2B46     		mov	r3, r5
 23545 0068 3246     		mov	r2, r6
 23546 006a 03A8     		add	r0, sp, #12
 23547              	.LVL1837:
4345:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 23548              		.loc 1 4345 4 is_stmt 0 view .LVU6145
 23549 006c FFF7FEFF 		bl	ullint_to_dn
 23550              	.LVL1838:
4345:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 23551              		.loc 1 4345 27 is_stmt 1 view .LVU6146
4345:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 23552              		.loc 1 4345 30 is_stmt 0 view .LVU6147
 23553 0070 019B     		ldr	r3, [sp, #4]
 23554 0072 03BB     		cbnz	r3, .L1709
 23555              	.L1697:
4346:src/xeq.c     **** 
 23556              		.loc 1 4346 4 is_stmt 1 view .LVU6148
 23557 0074 4346     		mov	r3, r8
 23558 0076 3A46     		mov	r2, r7
 23559 0078 0CA8     		add	r0, sp, #48
 23560 007a FFF7FEFF 		bl	ullint_to_dn
 23561              	.LVL1839:
4346:src/xeq.c     **** 
 23562              		.loc 1 4346 27 view .LVU6149
4346:src/xeq.c     **** 
 23563              		.loc 1 4346 30 is_stmt 0 view .LVU6150
 23564 007e 029B     		ldr	r3, [sp, #8]
 23565 0080 A3B9     		cbnz	r3, .L1710
 23566              	.L1698:
4348:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 23567              		.loc 1 4348 4 is_stmt 1 view .LVU6151
4348:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 23568              		.loc 1 4348 16 is_stmt 0 view .LVU6152
 23569 0082 03AA     		add	r2, sp, #12
 23570 0084 0CA9     		add	r1, sp, #48
 23571 0086 15A8     		add	r0, sp, #84
 23572 0088 A047     		blx	r4
 23573              	.LVL1840:
4348:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 23574              		.loc 1 4348 7 view .LVU6153
 23575 008a 48B9     		cbnz	r0, .L1699
4349:src/xeq.c     **** 			else
 23576              		.loc 1 4349 5 is_stmt 1 view .LVU6154
ARM GAS  /tmp/ccK8IvWa.s 			page 611


 23577              	.LVL1841:
 23578              	.LBB3369:
 23579              	.LBI3369:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23580              		.loc 1 523 5 view .LVU6155
 23581              	.LBB3370:
 524:src/xeq.c     **** 		Error = e;
 23582              		.loc 1 524 2 view .LVU6156
 524:src/xeq.c     **** 		Error = e;
 23583              		.loc 1 524 12 is_stmt 0 view .LVU6157
 23584 008c 104B     		ldr	r3, .L1711+16
 524:src/xeq.c     **** 		Error = e;
 23585              		.loc 1 524 5 view .LVU6158
 23586 008e 1A68     		ldr	r2, [r3]
 23587 0090 002A     		cmp	r2, #0
 23588 0092 E0D1     		bne	.L1708
 23589              	.LVL1842:
 23590              	.LBB3371:
 23591              	.LBI3371:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23592              		.loc 1 523 5 is_stmt 1 view .LVU6159
 23593              	.LBB3372:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 23594              		.loc 1 525 3 view .LVU6160
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 23595              		.loc 1 525 9 is_stmt 0 view .LVU6161
 23596 0094 0122     		movs	r2, #1
 23597              	.LBE3372:
 23598              	.LBE3371:
 23599              	.LBE3370:
 23600              	.LBE3369:
 23601              	.LBE3388:
4354:src/xeq.c     **** }
 23602              		.loc 1 4354 9 view .LVU6162
 23603 0096 0146     		mov	r1, r0
 23604              	.LBB3389:
 23605              	.LBB3376:
 23606              	.LBB3375:
 23607              	.LBB3374:
 23608              	.LBB3373:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 23609              		.loc 1 525 9 view .LVU6163
 23610 0098 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 23611              		.loc 1 526 3 is_stmt 1 view .LVU6164
 23612              	.LBE3373:
 23613              	.LBE3374:
 23614              	.LBE3375:
 23615              	.LBE3376:
 23616              	.LBE3389:
4355:src/xeq.c     **** 
 23617              		.loc 1 4355 1 is_stmt 0 view .LVU6165
 23618 009a 1EB0     		add	sp, sp, #120
 23619              		.cfi_remember_state
 23620              		.cfi_def_cfa_offset 24
 23621              		@ sp needed
 23622 009c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
ARM GAS  /tmp/ccK8IvWa.s 			page 612


 23623              	.LVL1843:
 23624              	.L1699:
 23625              		.cfi_restore_state
 23626              	.LBB3390:
4351:src/xeq.c     **** 		}
 23627              		.loc 1 4351 5 is_stmt 1 view .LVU6166
4351:src/xeq.c     **** 		}
 23628              		.loc 1 4351 12 is_stmt 0 view .LVU6167
 23629 00a0 15A8     		add	r0, sp, #84
 23630 00a2 FFF7FEFF 		bl	intResult
 23631              	.LVL1844:
 23632              	.LBE3390:
4355:src/xeq.c     **** 
 23633              		.loc 1 4355 1 view .LVU6168
 23634 00a6 1EB0     		add	sp, sp, #120
 23635              		.cfi_remember_state
 23636              		.cfi_def_cfa_offset 24
 23637              		@ sp needed
 23638 00a8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 23639              	.LVL1845:
 23640              	.L1710:
 23641              		.cfi_restore_state
 23642              	.LBB3391:
4346:src/xeq.c     **** 
 23643              		.loc 1 4346 35 is_stmt 1 discriminator 1 view .LVU6169
 23644 00ac 0CA9     		add	r1, sp, #48
 23645 00ae 0846     		mov	r0, r1
 23646 00b0 FFF7FEFF 		bl	dn_minus
 23647              	.LVL1846:
 23648 00b4 E5E7     		b	.L1698
 23649              	.L1709:
4345:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 23650              		.loc 1 4345 35 discriminator 1 view .LVU6170
 23651 00b6 03A9     		add	r1, sp, #12
 23652 00b8 0846     		mov	r0, r1
 23653 00ba FFF7FEFF 		bl	dn_minus
 23654              	.LVL1847:
 23655 00be D9E7     		b	.L1697
 23656              	.L1712:
 23657              		.align	2
 23658              	.L1711:
 23659 00c0 00000000 		.word	XeqOpCode
 23660 00c4 00000000 		.word	dyfuncs
 23661 00c8 00000000 		.word	xrom
 23662 00cc 00000000 		.word	xrom_size
 23663 00d0 00000000 		.word	Error
 23664              	.LBE3391:
 23665              		.cfi_endproc
 23666              	.LFE233:
 23668              		.section	.text.xeq_init_contexts,"ax",%progbits
 23669              		.align	1
 23670              		.p2align 2,,3
 23671              		.global	xeq_init_contexts
 23672              		.syntax unified
 23673              		.thumb
 23674              		.thumb_func
 23675              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccK8IvWa.s 			page 613


 23677              	xeq_init_contexts:
 23678              	.LFB250:
5371:src/xeq.c     **** 	/*
 23679              		.loc 1 5371 30 view -0
 23680              		.cfi_startproc
 23681              		@ args = 0, pretend = 0, frame = 0
 23682              		@ frame_needed = 0, uses_anonymous_args = 0
5375:src/xeq.c     **** 	SizeStatRegs = State.have_stats ? sizeof(STAT_DATA) >> 1 : 0;	// in 16 bit words!
 23683              		.loc 1 5375 2 view .LVU6172
5376:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 23684              		.loc 1 5376 2 view .LVU6173
5371:src/xeq.c     **** 	/*
 23685              		.loc 1 5371 30 is_stmt 0 view .LVU6174
 23686 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 23687              		.cfi_def_cfa_offset 24
 23688              		.cfi_offset 3, -24
 23689              		.cfi_offset 4, -20
 23690              		.cfi_offset 5, -16
 23691              		.cfi_offset 6, -12
 23692              		.cfi_offset 7, -8
 23693              		.cfi_offset 14, -4
5376:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 23694              		.loc 1 5376 34 view .LVU6175
 23695 0002 1C49     		ldr	r1, .L1718
5378:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 23696              		.loc 1 5378 22 view .LVU6176
 23697 0004 1C4D     		ldr	r5, .L1718+4
5376:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 23698              		.loc 1 5376 34 view .LVU6177
 23699 0006 91F8DD37 		ldrb	r3, [r1, #2013]	@ zero_extendqisi2
5377:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 23700              		.loc 1 5377 21 view .LVU6178
 23701 000a 91F8CF47 		ldrb	r4, [r1, #1999]	@ zero_extendqisi2
5379:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 23702              		.loc 1 5379 36 view .LVU6179
 23703 000e 4888     		ldrh	r0, [r1, #2]
5381:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 23704              		.loc 1 5381 34 view .LVU6180
 23705 0010 B1F9E277 		ldrsh	r7, [r1, #2018]
5376:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 23706              		.loc 1 5376 59 view .LVU6181
 23707 0014 13F02003 		ands	r3, r3, #32
 23708 0018 18BF     		it	ne
 23709 001a 4623     		movne	r3, #70
5377:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 23710              		.loc 1 5377 19 view .LVU6182
 23711 001c C4F16404 		rsb	r4, r4, #100
5376:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 23712              		.loc 1 5376 59 view .LVU6183
 23713 0020 1E46     		mov	r6, r3
5377:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 23714              		.loc 1 5377 36 view .LVU6184
 23715 0022 C3EB8403 		rsb	r3, r3, r4, lsl #2
5380:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
 23716              		.loc 1 5380 31 view .LVU6185
 23717 0026 03F50472 		add	r2, r3, #528
 23718 002a 92B2     		uxth	r2, r2
ARM GAS  /tmp/ccK8IvWa.s 			page 614


5380:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
 23719              		.loc 1 5380 10 view .LVU6186
 23720 002c 0A80     		strh	r2, [r1]	@ movhi
5381:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 23721              		.loc 1 5381 11 view .LVU6187
 23722 002e 134C     		ldr	r4, .L1718+8
5379:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 23723              		.loc 1 5379 13 view .LVU6188
 23724 0030 1349     		ldr	r1, .L1718+12
5378:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 23725              		.loc 1 5378 22 view .LVU6189
 23726 0032 03F21623 		addw	r3, r3, #534
5381:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 23727              		.loc 1 5381 21 view .LVU6190
 23728 0036 121A     		subs	r2, r2, r0
5381:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 23729              		.loc 1 5381 32 view .LVU6191
 23730 0038 3A44     		add	r2, r2, r7
5379:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 23731              		.loc 1 5379 34 view .LVU6192
 23732 003a 181A     		subs	r0, r3, r0
5379:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 23733              		.loc 1 5379 13 view .LVU6193
 23734 003c 0860     		str	r0, [r1]
5381:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 23735              		.loc 1 5381 11 view .LVU6194
 23736 003e 2260     		str	r2, [r4]
5376:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 23737              		.loc 1 5376 15 view .LVU6195
 23738 0040 1049     		ldr	r1, .L1718+16
5378:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 23739              		.loc 1 5378 9 view .LVU6196
 23740 0042 114A     		ldr	r2, .L1718+20
5376:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 23741              		.loc 1 5376 15 view .LVU6197
 23742 0044 0E60     		str	r6, [r1]
5377:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 23743              		.loc 1 5377 2 is_stmt 1 view .LVU6198
 23744              	.LVL1848:
5378:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 23745              		.loc 1 5378 2 view .LVU6199
5378:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 23746              		.loc 1 5378 22 is_stmt 0 view .LVU6200
 23747 0046 05EB4303 		add	r3, r5, r3, lsl #1
 23748              	.LVL1849:
5382:src/xeq.c     **** 
 23749              		.loc 1 5382 14 view .LVU6201
 23750 004a 6420     		movs	r0, #100
5378:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 23751              		.loc 1 5378 9 view .LVU6202
 23752 004c 1360     		str	r3, [r2]
5379:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 23753              		.loc 1 5379 2 is_stmt 1 view .LVU6203
5380:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
 23754              		.loc 1 5380 2 view .LVU6204
5381:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 23755              		.loc 1 5381 2 view .LVU6205
ARM GAS  /tmp/ccK8IvWa.s 			page 615


5382:src/xeq.c     **** 
 23756              		.loc 1 5382 2 view .LVU6206
5382:src/xeq.c     **** 
 23757              		.loc 1 5382 14 is_stmt 0 view .LVU6207
 23758 004e FFF7FEFF 		bl	get_reg_n
 23759              	.LVL1850:
5388:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
 23760              		.loc 1 5388 2 view .LVU6208
 23761 0052 0E4C     		ldr	r4, .L1718+24
5382:src/xeq.c     **** 
 23762              		.loc 1 5382 12 view .LVU6209
 23763 0054 0E4B     		ldr	r3, .L1718+28
5382:src/xeq.c     **** 
 23764              		.loc 1 5382 14 view .LVU6210
 23765 0056 0246     		mov	r2, r0
5388:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
 23766              		.loc 1 5388 2 view .LVU6211
 23767 0058 0021     		movs	r1, #0
 23768 005a 2046     		mov	r0, r4
5382:src/xeq.c     **** 
 23769              		.loc 1 5382 12 view .LVU6212
 23770 005c 1A60     		str	r2, [r3]
5388:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
 23771              		.loc 1 5388 2 is_stmt 1 view .LVU6213
 23772 005e FFF7FEFF 		bl	decContextDefault
 23773              	.LVL1851:
5389:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
 23774              		.loc 1 5389 2 view .LVU6214
5389:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
 23775              		.loc 1 5389 13 is_stmt 0 view .LVU6215
 23776 0062 2723     		movs	r3, #39
5390:src/xeq.c     **** 	Ctx.emin=-DEC_MAX_MATH;
 23777              		.loc 1 5390 10 view .LVU6216
 23778 0064 0B49     		ldr	r1, .L1718+32
5391:src/xeq.c     **** 	Ctx.round = DEC_ROUND_HALF_EVEN;
 23779              		.loc 1 5391 10 view .LVU6217
 23780 0066 0C4A     		ldr	r2, .L1718+36
5389:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
 23781              		.loc 1 5389 13 view .LVU6218
 23782 0068 2360     		str	r3, [r4]
5390:src/xeq.c     **** 	Ctx.emin=-DEC_MAX_MATH;
 23783              		.loc 1 5390 2 is_stmt 1 view .LVU6219
5392:src/xeq.c     **** }
 23784              		.loc 1 5392 12 is_stmt 0 view .LVU6220
 23785 006a 0323     		movs	r3, #3
 23786 006c 2373     		strb	r3, [r4, #12]
5391:src/xeq.c     **** 	Ctx.round = DEC_ROUND_HALF_EVEN;
 23787              		.loc 1 5391 10 view .LVU6221
 23788 006e C4E90112 		strd	r1, r2, [r4, #4]
5392:src/xeq.c     **** }
 23789              		.loc 1 5392 2 is_stmt 1 view .LVU6222
5393:src/xeq.c     **** 
 23790              		.loc 1 5393 1 is_stmt 0 view .LVU6223
 23791 0072 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 23792              	.L1719:
 23793              		.align	2
 23794              	.L1718:
ARM GAS  /tmp/ccK8IvWa.s 			page 616


 23795 0074 00000000 		.word	PersistentRam
 23796 0078 04000000 		.word	PersistentRam+4
 23797 007c 00000000 		.word	ProgFree
 23798 0080 00000000 		.word	RetStkSize
 23799 0084 00000000 		.word	SizeStatRegs
 23800 0088 00000000 		.word	RetStk
 23801 008c 00000000 		.word	Ctx
 23802 0090 00000000 		.word	StackBase
 23803 0094 3F420F00 		.word	999999
 23804 0098 C1BDF0FF 		.word	-999999
 23805              		.cfi_endproc
 23806              	.LFE250:
 23808              		.section	.text.plot_check_range,"ax",%progbits
 23809              		.align	1
 23810              		.p2align 2,,3
 23811              		.global	plot_check_range
 23812              		.syntax unified
 23813              		.thumb
 23814              		.thumb_func
 23815              		.fpu fpv4-sp-d16
 23817              	plot_check_range:
 23818              	.LVL1852:
 23819              	.LFB251:
5409:src/xeq.c     **** 	unsigned char *p = (unsigned char *) get_reg_n( arg );
 23820              		.loc 1 5409 1 is_stmt 1 view -0
 23821              		.cfi_startproc
 23822              		@ args = 0, pretend = 0, frame = 0
 23823              		@ frame_needed = 0, uses_anonymous_args = 0
5410:src/xeq.c     **** 	int n = is_dblmode() ? 16 : 8;
 23824              		.loc 1 5410 2 view .LVU6225
5409:src/xeq.c     **** 	unsigned char *p = (unsigned char *) get_reg_n( arg );
 23825              		.loc 1 5409 1 is_stmt 0 view .LVU6226
 23826 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 23827              		.cfi_def_cfa_offset 24
 23828              		.cfi_offset 3, -24
 23829              		.cfi_offset 4, -20
 23830              		.cfi_offset 5, -16
 23831              		.cfi_offset 6, -12
 23832              		.cfi_offset 7, -8
 23833              		.cfi_offset 14, -4
 23834              	.LBB3407:
 23835              	.LBB3408:
 919:src/xeq.c     **** }
 23836              		.loc 1 919 24 view .LVU6227
 23837 0002 264F     		ldr	r7, .L1739
 23838              	.LBE3408:
 23839              	.LBE3407:
5409:src/xeq.c     **** 	unsigned char *p = (unsigned char *) get_reg_n( arg );
 23840              		.loc 1 5409 1 view .LVU6228
 23841 0004 1446     		mov	r4, r2
 23842 0006 0D46     		mov	r5, r1
 23843 0008 0646     		mov	r6, r0
5410:src/xeq.c     **** 	int n = is_dblmode() ? 16 : 8;
 23844              		.loc 1 5410 39 view .LVU6229
 23845 000a FFF7FEFF 		bl	get_reg_n
 23846              	.LVL1853:
 23847              	.LBB3411:
ARM GAS  /tmp/ccK8IvWa.s 			page 617


 23848              	.LBB3409:
 919:src/xeq.c     **** }
 23849              		.loc 1 919 24 view .LVU6230
 23850 000e B7F8E827 		ldrh	r2, [r7, #2024]
 23851 0012 44F20103 		movw	r3, #16385
 23852              	.LBE3409:
 23853              	.LBE3411:
5411:src/xeq.c     **** 	int lim = arg < TOPREALREG ? global_regs() : local_regs() + LOCAL_REG_BASE;
 23854              		.loc 1 5411 28 view .LVU6231
 23855 0016 1340     		ands	r3, r3, r2
 23856 0018 B3F5804F 		cmp	r3, #16384
5410:src/xeq.c     **** 	int n = is_dblmode() ? 16 : 8;
 23857              		.loc 1 5410 39 view .LVU6232
 23858 001c 0246     		mov	r2, r0
 23859              	.LVL1854:
5411:src/xeq.c     **** 	int lim = arg < TOPREALREG ? global_regs() : local_regs() + LOCAL_REG_BASE;
 23860              		.loc 1 5411 2 is_stmt 1 view .LVU6233
 23861              	.LBB3412:
 23862              	.LBI3407:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 23863              		.loc 1 918 5 view .LVU6234
 23864              	.LBB3410:
 919:src/xeq.c     **** }
 23865              		.loc 1 919 2 view .LVU6235
 23866              	.LBE3410:
 23867              	.LBE3412:
5411:src/xeq.c     **** 	int lim = arg < TOPREALREG ? global_regs() : local_regs() + LOCAL_REG_BASE;
 23868              		.loc 1 5411 28 is_stmt 0 view .LVU6236
 23869 001e 1FD0     		beq	.L1736
 23870              	.LVL1855:
5412:src/xeq.c     **** 	int bytes;
 23871              		.loc 1 5412 2 is_stmt 1 view .LVU6237
5412:src/xeq.c     **** 	int bytes;
 23872              		.loc 1 5412 45 is_stmt 0 view .LVU6238
 23873 0020 632E     		cmp	r6, #99
 23874 0022 19DD     		ble	.L1729
 23875 0024 4FF0020C 		mov	ip, #2
5411:src/xeq.c     **** 	int lim = arg < TOPREALREG ? global_regs() : local_regs() + LOCAL_REG_BASE;
 23876              		.loc 1 5411 28 view .LVU6239
 23877 0028 0821     		movs	r1, #8
 23878              	.LVL1856:
 23879              	.L1730:
 23880              	.LBB3413:
 23881              	.LBB3414:
 23882              	.LBB3415:
 223:src/xeq.c     **** }
 23883              		.loc 1 223 2 is_stmt 1 view .LVU6240
 23884              	.LBB3416:
 23885              	.LBI3416:
 213:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 23886              		.loc 1 213 5 view .LVU6241
 23887              	.LBB3417:
 214:src/xeq.c     **** }
 23888              		.loc 1 214 2 view .LVU6242
 214:src/xeq.c     **** }
 23889              		.loc 1 214 9 is_stmt 0 view .LVU6243
 23890 002a B7F9DE37 		ldrsh	r3, [r7, #2014]
ARM GAS  /tmp/ccK8IvWa.s 			page 618


 214:src/xeq.c     **** }
 23891              		.loc 1 214 57 view .LVU6244
 23892 002e 002B     		cmp	r3, #0
 23893 0030 23DB     		blt	.L1737
 23894 0032 7020     		movs	r0, #112
 23895              	.LVL1857:
 23896              	.L1724:
 214:src/xeq.c     **** }
 23897              		.loc 1 214 57 view .LVU6245
 23898              	.LBE3417:
 23899              	.LBE3416:
 23900              	.LBE3415:
 23901              	.LBE3414:
 23902              	.LBE3413:
5413:src/xeq.c     **** 
 23903              		.loc 1 5413 2 is_stmt 1 discriminator 4 view .LVU6246
5415:src/xeq.c     **** 		width = (int) *p;
 23904              		.loc 1 5415 2 discriminator 4 view .LVU6247
5415:src/xeq.c     **** 		width = (int) *p;
 23905              		.loc 1 5415 5 is_stmt 0 discriminator 4 view .LVU6248
 23906 0034 0DB9     		cbnz	r5, .L1726
5416:src/xeq.c     **** 		height = (int) p[ 1 ];
 23907              		.loc 1 5416 3 is_stmt 1 view .LVU6249
5416:src/xeq.c     **** 		height = (int) p[ 1 ];
 23908              		.loc 1 5416 9 is_stmt 0 view .LVU6250
 23909 0036 1578     		ldrb	r5, [r2]	@ zero_extendqisi2
 23910              	.LVL1858:
5417:src/xeq.c     **** 	}
 23911              		.loc 1 5417 3 is_stmt 1 view .LVU6251
5417:src/xeq.c     **** 	}
 23912              		.loc 1 5417 10 is_stmt 0 view .LVU6252
 23913 0038 5478     		ldrb	r4, [r2, #1]	@ zero_extendqisi2
 23914              	.LVL1859:
 23915              	.L1726:
5423:src/xeq.c     **** 
 23916              		.loc 1 5423 2 is_stmt 1 view .LVU6253
5423:src/xeq.c     **** 
 23917              		.loc 1 5423 20 is_stmt 0 view .LVU6254
 23918 003a 04FB05F4 		mul	r4, r4, r5
 23919              	.LVL1860:
5428:src/xeq.c     **** 		report_err( ERR_RANGE );
 23920              		.loc 1 5428 5 view .LVU6255
 23921 003e A62D     		cmp	r5, #166
5423:src/xeq.c     **** 
 23922              		.loc 1 5423 8 view .LVU6256
 23923 0040 04F10204 		add	r4, r4, #2
 23924              	.LVL1861:
5428:src/xeq.c     **** 		report_err( ERR_RANGE );
 23925              		.loc 1 5428 2 is_stmt 1 view .LVU6257
5428:src/xeq.c     **** 		report_err( ERR_RANGE );
 23926              		.loc 1 5428 5 is_stmt 0 view .LVU6258
 23927 0044 12DC     		bgt	.L1727
5428:src/xeq.c     **** 		report_err( ERR_RANGE );
 23928              		.loc 1 5428 44 discriminator 1 view .LVU6259
 23929 0046 6318     		adds	r3, r4, r1
5428:src/xeq.c     **** 		report_err( ERR_RANGE );
 23930              		.loc 1 5428 48 discriminator 1 view .LVU6260
ARM GAS  /tmp/ccK8IvWa.s 			page 619


 23931 0048 013B     		subs	r3, r3, #1
5428:src/xeq.c     **** 		report_err( ERR_RANGE );
 23932              		.loc 1 5428 54 discriminator 1 view .LVU6261
 23933 004a 93FBF1F3 		sdiv	r3, r3, r1
5428:src/xeq.c     **** 		report_err( ERR_RANGE );
 23934              		.loc 1 5428 34 discriminator 1 view .LVU6262
 23935 004e 9C19     		adds	r4, r3, r6
 23936              	.LVL1862:
5428:src/xeq.c     **** 		report_err( ERR_RANGE );
 23937              		.loc 1 5428 27 discriminator 1 view .LVU6263
 23938 0050 8442     		cmp	r4, r0
 23939 0052 0BDC     		bgt	.L1727
5433:src/xeq.c     **** 
 23940              		.loc 1 5433 1 view .LVU6264
 23941 0054 1046     		mov	r0, r2
 23942              	.LVL1863:
5433:src/xeq.c     **** 
 23943              		.loc 1 5433 1 view .LVU6265
 23944 0056 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 23945              	.LVL1864:
 23946              	.L1729:
 23947              	.LBB3422:
 23948              	.LBB3423:
 23949              	.LBB3424:
 23950              	.LBB3425:
 243:src/xeq.c     **** }
 23951              		.loc 1 243 3 is_stmt 1 view .LVU6266
 243:src/xeq.c     **** }
 23952              		.loc 1 243 10 is_stmt 0 view .LVU6267
 23953 0058 97F8CF07 		ldrb	r0, [r7, #1999]	@ zero_extendqisi2
 23954              	.LVL1865:
 243:src/xeq.c     **** }
 23955              		.loc 1 243 10 view .LVU6268
 23956 005c 0821     		movs	r1, #8
 23957              	.LVL1866:
 243:src/xeq.c     **** }
 23958              		.loc 1 243 10 view .LVU6269
 23959 005e E9E7     		b	.L1724
 23960              	.LVL1867:
 23961              	.L1736:
 243:src/xeq.c     **** }
 23962              		.loc 1 243 10 view .LVU6270
 23963              	.LBE3425:
 23964              	.LBE3424:
 23965              	.LBE3423:
 23966              	.LBE3422:
5412:src/xeq.c     **** 	int bytes;
 23967              		.loc 1 5412 2 is_stmt 1 view .LVU6271
5412:src/xeq.c     **** 	int bytes;
 23968              		.loc 1 5412 45 is_stmt 0 view .LVU6272
 23969 0060 632E     		cmp	r6, #99
 23970 0062 14DC     		bgt	.L1738
 23971              	.LBB3430:
 23972              	.LBI3422:
 249:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 23973              		.loc 1 249 14 is_stmt 1 view .LVU6273
 23974              	.LBB3428:
ARM GAS  /tmp/ccK8IvWa.s 			page 620


 250:src/xeq.c     **** }
 23975              		.loc 1 250 2 view .LVU6274
 23976              	.LVL1868:
 23977              	.LBB3427:
 23978              	.LBI3424:
 237:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 23979              		.loc 1 237 14 view .LVU6275
 23980              	.LBB3426:
 238:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 23981              		.loc 1 238 2 view .LVU6276
 23982              	.LBE3426:
 23983              	.LBE3427:
 23984              	.LBE3428:
 23985              	.LBE3430:
 919:src/xeq.c     **** }
 23986              		.loc 1 919 2 view .LVU6277
 23987              	.LBB3431:
 23988              	.LBB3429:
 919:src/xeq.c     **** }
 23989              		.loc 1 919 2 is_stmt 0 view .LVU6278
 23990 0064 FFF7FEFF 		bl	global_regs.part.0
 23991              	.LVL1869:
 919:src/xeq.c     **** }
 23992              		.loc 1 919 2 view .LVU6279
 23993              	.LBE3429:
 23994              	.LBE3431:
5411:src/xeq.c     **** 	int lim = arg < TOPREALREG ? global_regs() : local_regs() + LOCAL_REG_BASE;
 23995              		.loc 1 5411 28 view .LVU6280
 23996 0068 1021     		movs	r1, #16
 23997 006a E3E7     		b	.L1724
 23998              	.LVL1870:
 23999              	.L1727:
5429:src/xeq.c     **** 		return (unsigned char *) NULL;
 24000              		.loc 1 5429 3 is_stmt 1 view .LVU6281
 24001              	.LBB3432:
 24002              	.LBI3432:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24003              		.loc 1 523 5 view .LVU6282
 24004              	.LBB3433:
 524:src/xeq.c     **** 		Error = e;
 24005              		.loc 1 524 2 view .LVU6283
 524:src/xeq.c     **** 		Error = e;
 24006              		.loc 1 524 12 is_stmt 0 view .LVU6284
 24007 006c 0C4B     		ldr	r3, .L1739+4
 524:src/xeq.c     **** 		Error = e;
 24008              		.loc 1 524 5 view .LVU6285
 24009 006e 1A68     		ldr	r2, [r3]
 24010              	.LVL1871:
 524:src/xeq.c     **** 		Error = e;
 24011              		.loc 1 524 5 view .LVU6286
 24012 0070 8AB9     		cbnz	r2, .L1733
 24013              	.LVL1872:
 24014              	.LBB3434:
 24015              	.LBI3434:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24016              		.loc 1 523 5 is_stmt 1 view .LVU6287
 24017              	.LBB3435:
ARM GAS  /tmp/ccK8IvWa.s 			page 621


 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 24018              		.loc 1 525 3 view .LVU6288
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 24019              		.loc 1 525 9 is_stmt 0 view .LVU6289
 24020 0072 0821     		movs	r1, #8
 24021 0074 1960     		str	r1, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 24022              		.loc 1 526 3 is_stmt 1 view .LVU6290
 24023              	.LBE3435:
 24024              	.LBE3434:
 24025              	.LBE3433:
 24026              	.LBE3432:
5433:src/xeq.c     **** 
 24027              		.loc 1 5433 1 is_stmt 0 view .LVU6291
 24028 0076 1046     		mov	r0, r2
 24029              	.LVL1873:
5433:src/xeq.c     **** 
 24030              		.loc 1 5433 1 view .LVU6292
 24031 0078 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 24032              	.LVL1874:
 24033              	.L1737:
 24034              	.LBB3436:
 24035              	.LBB3421:
 24036              	.LBB3420:
 24037              	.LBB3419:
 24038              	.LBB3418:
 214:src/xeq.c     **** }
 24039              		.loc 1 214 25 view .LVU6293
 24040 007a 0A48     		ldr	r0, .L1739+8
 24041              	.LVL1875:
 214:src/xeq.c     **** }
 24042              		.loc 1 214 25 view .LVU6294
 24043 007c 0068     		ldr	r0, [r0]
 214:src/xeq.c     **** }
 24044              		.loc 1 214 57 view .LVU6295
 24045 007e 30F81300 		ldrh	r0, [r0, r3, lsl #1]
 24046 0082 C0F30B00 		ubfx	r0, r0, #0, #12
 24047 0086 40FA0CF0 		asr	r0, r0, ip
 24048 008a 7030     		adds	r0, r0, #112
 24049 008c D2E7     		b	.L1724
 24050              	.LVL1876:
 24051              	.L1738:
 214:src/xeq.c     **** }
 24052              		.loc 1 214 57 view .LVU6296
 24053              	.LBE3418:
 24054              	.LBE3419:
 24055              	.LBE3420:
 24056              	.LBE3421:
 24057              	.LBE3436:
5412:src/xeq.c     **** 	int bytes;
 24058              		.loc 1 5412 45 view .LVU6297
 24059 008e 4FF0030C 		mov	ip, #3
5411:src/xeq.c     **** 	int lim = arg < TOPREALREG ? global_regs() : local_regs() + LOCAL_REG_BASE;
 24060              		.loc 1 5411 28 view .LVU6298
 24061 0092 1021     		movs	r1, #16
 24062 0094 C9E7     		b	.L1730
 24063              	.LVL1877:
ARM GAS  /tmp/ccK8IvWa.s 			page 622


 24064              	.L1733:
5430:src/xeq.c     **** 	}
 24065              		.loc 1 5430 10 view .LVU6299
 24066 0096 0022     		movs	r2, #0
 24067              	.LVL1878:
5433:src/xeq.c     **** 
 24068              		.loc 1 5433 1 view .LVU6300
 24069 0098 1046     		mov	r0, r2
 24070              	.LVL1879:
5433:src/xeq.c     **** 
 24071              		.loc 1 5433 1 view .LVU6301
 24072 009a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 24073              	.LVL1880:
 24074              	.L1740:
5433:src/xeq.c     **** 
 24075              		.loc 1 5433 1 view .LVU6302
 24076              		.align	2
 24077              	.L1739:
 24078 009c 00000000 		.word	PersistentRam
 24079 00a0 00000000 		.word	Error
 24080 00a4 00000000 		.word	RetStk
 24081              		.cfi_endproc
 24082              	.LFE251:
 24084              		.section	.text.cmdplotdisplay,"ax",%progbits
 24085              		.align	1
 24086              		.p2align 2,,3
 24087              		.global	cmdplotdisplay
 24088              		.syntax unified
 24089              		.thumb
 24090              		.thumb_func
 24091              		.fpu fpv4-sp-d16
 24093              	cmdplotdisplay:
 24094              	.LVL1881:
 24095              	.LFB252:
5439:src/xeq.c     **** 	if (plot_check_range(arg, 0, 0) != NULL) {
 24096              		.loc 1 5439 1 is_stmt 1 view -0
 24097              		.cfi_startproc
 24098              		@ args = 0, pretend = 0, frame = 0
 24099              		@ frame_needed = 0, uses_anonymous_args = 0
5440:src/xeq.c     **** 		DispPlot = arg + 1;
 24100              		.loc 1 5440 2 view .LVU6304
5440:src/xeq.c     **** 		DispPlot = arg + 1;
 24101              		.loc 1 5440 6 is_stmt 0 view .LVU6305
 24102 0000 0022     		movs	r2, #0
5439:src/xeq.c     **** 	if (plot_check_range(arg, 0, 0) != NULL) {
 24103              		.loc 1 5439 1 view .LVU6306
 24104 0002 10B5     		push	{r4, lr}
 24105              		.cfi_def_cfa_offset 8
 24106              		.cfi_offset 4, -8
 24107              		.cfi_offset 14, -4
5440:src/xeq.c     **** 		DispPlot = arg + 1;
 24108              		.loc 1 5440 6 view .LVU6307
 24109 0004 1146     		mov	r1, r2
 24110              	.LVL1882:
5439:src/xeq.c     **** 	if (plot_check_range(arg, 0, 0) != NULL) {
 24111              		.loc 1 5439 1 view .LVU6308
 24112 0006 0446     		mov	r4, r0
ARM GAS  /tmp/ccK8IvWa.s 			page 623


5440:src/xeq.c     **** 		DispPlot = arg + 1;
 24113              		.loc 1 5440 6 view .LVU6309
 24114 0008 FFF7FEFF 		bl	plot_check_range
 24115              	.LVL1883:
5440:src/xeq.c     **** 		DispPlot = arg + 1;
 24116              		.loc 1 5440 5 view .LVU6310
 24117 000c 30B1     		cbz	r0, .L1741
5441:src/xeq.c     **** 		frozen_display();
 24118              		.loc 1 5441 3 is_stmt 1 view .LVU6311
5441:src/xeq.c     **** 		frozen_display();
 24119              		.loc 1 5441 12 is_stmt 0 view .LVU6312
 24120 000e 044B     		ldr	r3, .L1744
5441:src/xeq.c     **** 		frozen_display();
 24121              		.loc 1 5441 18 view .LVU6313
 24122 0010 601C     		adds	r0, r4, #1
5444:src/xeq.c     **** 
 24123              		.loc 1 5444 1 view .LVU6314
 24124 0012 BDE81040 		pop	{r4, lr}
 24125              		.cfi_remember_state
 24126              		.cfi_restore 14
 24127              		.cfi_restore 4
 24128              		.cfi_def_cfa_offset 0
 24129              	.LVL1884:
5441:src/xeq.c     **** 		frozen_display();
 24130              		.loc 1 5441 12 view .LVU6315
 24131 0016 1880     		strh	r0, [r3]	@ movhi
5442:src/xeq.c     **** 	}
 24132              		.loc 1 5442 3 is_stmt 1 view .LVU6316
 24133 0018 FFF7FEBF 		b	frozen_display
 24134              	.LVL1885:
 24135              	.L1741:
 24136              		.cfi_restore_state
5444:src/xeq.c     **** 
 24137              		.loc 1 5444 1 is_stmt 0 view .LVU6317
 24138 001c 10BD     		pop	{r4, pc}
 24139              	.LVL1886:
 24140              	.L1745:
5444:src/xeq.c     **** 
 24141              		.loc 1 5444 1 view .LVU6318
 24142 001e 00BF     		.align	2
 24143              	.L1744:
 24144 0020 00000000 		.word	DispPlot
 24145              		.cfi_endproc
 24146              	.LFE252:
 24148              		.section	.text.cmdplotinit,"ax",%progbits
 24149              		.align	1
 24150              		.p2align 2,,3
 24151              		.global	cmdplotinit
 24152              		.syntax unified
 24153              		.thumb
 24154              		.thumb_func
 24155              		.fpu fpv4-sp-d16
 24157              	cmdplotinit:
 24158              	.LVL1887:
 24159              	.LFB253:
5451:src/xeq.c     **** 	int sgnx, sgny;
 24160              		.loc 1 5451 1 is_stmt 1 view -0
ARM GAS  /tmp/ccK8IvWa.s 			page 624


 24161              		.cfi_startproc
 24162              		@ args = 0, pretend = 0, frame = 8
 24163              		@ frame_needed = 0, uses_anonymous_args = 0
5452:src/xeq.c     **** 	int width = (int) getX_int_sgn( &sgnx );
 24164              		.loc 1 5452 2 view .LVU6320
5453:src/xeq.c     **** 	int height = (int) get_reg_n_int_sgn( regY_idx, &sgny ); 
 24165              		.loc 1 5453 2 view .LVU6321
5451:src/xeq.c     **** 	int sgnx, sgny;
 24166              		.loc 1 5451 1 is_stmt 0 view .LVU6322
 24167 0000 70B5     		push	{r4, r5, r6, lr}
 24168              		.cfi_def_cfa_offset 16
 24169              		.cfi_offset 4, -16
 24170              		.cfi_offset 5, -12
 24171              		.cfi_offset 6, -8
 24172              		.cfi_offset 14, -4
 24173 0002 82B0     		sub	sp, sp, #8
 24174              		.cfi_def_cfa_offset 24
 24175              	.LVL1888:
 24176              	.LBB3437:
 24177              	.LBI3437:
1246:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 24178              		.loc 1 1246 24 is_stmt 1 view .LVU6323
 24179              	.LBB3438:
1247:src/xeq.c     **** }
 24180              		.loc 1 1247 2 view .LVU6324
 24181              	.LBE3438:
 24182              	.LBE3437:
5451:src/xeq.c     **** 	int sgnx, sgny;
 24183              		.loc 1 5451 1 is_stmt 0 view .LVU6325
 24184 0004 0646     		mov	r6, r0
 24185              	.LBB3441:
 24186              	.LBB3439:
1247:src/xeq.c     **** }
 24187              		.loc 1 1247 9 view .LVU6326
 24188 0006 6946     		mov	r1, sp
 24189              	.LVL1889:
1247:src/xeq.c     **** }
 24190              		.loc 1 1247 9 view .LVU6327
 24191 0008 6420     		movs	r0, #100
 24192              	.LVL1890:
1247:src/xeq.c     **** }
 24193              		.loc 1 1247 9 view .LVU6328
 24194 000a FFF7FEFF 		bl	get_reg_n_int_sgn
 24195              	.LVL1891:
 24196              	.LBE3439:
 24197              	.LBE3441:
5454:src/xeq.c     **** 	unsigned char *p;
 24198              		.loc 1 5454 21 view .LVU6329
 24199 000e 01A9     		add	r1, sp, #4
 24200              	.LBB3442:
 24201              	.LBB3440:
1247:src/xeq.c     **** }
 24202              		.loc 1 1247 9 view .LVU6330
 24203 0010 0546     		mov	r5, r0
 24204              	.LBE3440:
 24205              	.LBE3442:
5454:src/xeq.c     **** 	unsigned char *p;
ARM GAS  /tmp/ccK8IvWa.s 			page 625


 24206              		.loc 1 5454 21 view .LVU6331
 24207 0012 6520     		movs	r0, #101
 24208              	.LVL1892:
5454:src/xeq.c     **** 	unsigned char *p;
 24209              		.loc 1 5454 2 is_stmt 1 view .LVU6332
5454:src/xeq.c     **** 	unsigned char *p;
 24210              		.loc 1 5454 21 is_stmt 0 view .LVU6333
 24211 0014 FFF7FEFF 		bl	get_reg_n_int_sgn
 24212              	.LVL1893:
5457:src/xeq.c     **** 		width = PAPER_WIDTH;
 24213              		.loc 1 5457 5 view .LVU6334
 24214 0018 009B     		ldr	r3, [sp]
 24215              	.LVL1894:
5455:src/xeq.c     **** 	
 24216              		.loc 1 5455 2 is_stmt 1 view .LVU6335
5457:src/xeq.c     **** 		width = PAPER_WIDTH;
 24217              		.loc 1 5457 2 view .LVU6336
5457:src/xeq.c     **** 		width = PAPER_WIDTH;
 24218              		.loc 1 5457 5 is_stmt 0 view .LVU6337
 24219 001a B3B9     		cbnz	r3, .L1750
5458:src/xeq.c     **** 	}
 24220              		.loc 1 5458 9 discriminator 1 view .LVU6338
 24221 001c 002D     		cmp	r5, #0
 24222 001e 08BF     		it	eq
 24223 0020 A625     		moveq	r5, #166
 24224              	.LVL1895:
 24225              	.L1747:
5460:src/xeq.c     **** 		height = 1;
 24226              		.loc 1 5460 2 is_stmt 1 view .LVU6339
5460:src/xeq.c     **** 		height = 1;
 24227              		.loc 1 5460 5 is_stmt 0 view .LVU6340
 24228 0022 019B     		ldr	r3, [sp, #4]
 24229 0024 03B9     		cbnz	r3, .L1752
5460:src/xeq.c     **** 		height = 1;
 24230              		.loc 1 5460 12 discriminator 1 view .LVU6341
 24231 0026 90B9     		cbnz	r0, .L1757
 24232              	.L1752:
5461:src/xeq.c     **** 	}
 24233              		.loc 1 5461 10 view .LVU6342
 24234 0028 0124     		movs	r4, #1
 24235              	.LVL1896:
 24236              	.L1748:
5470:src/xeq.c     **** 	if ( p != NULL ) {
 24237              		.loc 1 5470 2 is_stmt 1 view .LVU6343
5470:src/xeq.c     **** 	if ( p != NULL ) {
 24238              		.loc 1 5470 6 is_stmt 0 view .LVU6344
 24239 002a 3046     		mov	r0, r6
 24240 002c 2246     		mov	r2, r4
 24241 002e 2946     		mov	r1, r5
 24242 0030 FFF7FEFF 		bl	plot_check_range
 24243              	.LVL1897:
5471:src/xeq.c     **** 		*p++ = (unsigned char) width;
 24244              		.loc 1 5471 2 is_stmt 1 view .LVU6345
5471:src/xeq.c     **** 		*p++ = (unsigned char) width;
 24245              		.loc 1 5471 5 is_stmt 0 view .LVU6346
 24246 0034 38B1     		cbz	r0, .L1746
5472:src/xeq.c     **** 		*p++ = (unsigned char) height;
ARM GAS  /tmp/ccK8IvWa.s 			page 626


 24247              		.loc 1 5472 3 is_stmt 1 view .LVU6347
 24248              	.LVL1898:
5472:src/xeq.c     **** 		*p++ = (unsigned char) height;
 24249              		.loc 1 5472 10 is_stmt 0 view .LVU6348
 24250 0036 0570     		strb	r5, [r0]
5473:src/xeq.c     **** 		xset( p, 0, width * height );
 24251              		.loc 1 5473 3 is_stmt 1 view .LVU6349
 24252              	.LVL1899:
5473:src/xeq.c     **** 		xset( p, 0, width * height );
 24253              		.loc 1 5473 10 is_stmt 0 view .LVU6350
 24254 0038 4470     		strb	r4, [r0, #1]
5474:src/xeq.c     **** 	}
 24255              		.loc 1 5474 3 is_stmt 1 view .LVU6351
 24256 003a 04FB05F2 		mul	r2, r4, r5
 24257 003e 0230     		adds	r0, r0, #2
 24258              	.LVL1900:
5474:src/xeq.c     **** 	}
 24259              		.loc 1 5474 3 is_stmt 0 view .LVU6352
 24260 0040 0021     		movs	r1, #0
 24261 0042 FFF7FEFF 		bl	xset
 24262              	.LVL1901:
 24263              	.L1746:
5476:src/xeq.c     **** 
 24264              		.loc 1 5476 1 view .LVU6353
 24265 0046 02B0     		add	sp, sp, #8
 24266              		.cfi_remember_state
 24267              		.cfi_def_cfa_offset 16
 24268              		@ sp needed
 24269 0048 70BD     		pop	{r4, r5, r6, pc}
 24270              	.LVL1902:
 24271              	.L1750:
 24272              		.cfi_restore_state
5458:src/xeq.c     **** 	}
 24273              		.loc 1 5458 9 view .LVU6354
 24274 004a A625     		movs	r5, #166
 24275              	.LVL1903:
5458:src/xeq.c     **** 	}
 24276              		.loc 1 5458 9 view .LVU6355
 24277 004c E9E7     		b	.L1747
 24278              	.LVL1904:
 24279              	.L1757:
5467:src/xeq.c     **** 	}
 24280              		.loc 1 5467 3 is_stmt 1 view .LVU6356
5467:src/xeq.c     **** 	}
 24281              		.loc 1 5467 21 is_stmt 0 view .LVU6357
 24282 004e C41D     		adds	r4, r0, #7
5467:src/xeq.c     **** 	}
 24283              		.loc 1 5467 10 view .LVU6358
 24284 0050 E410     		asrs	r4, r4, #3
 24285              	.LVL1905:
5467:src/xeq.c     **** 	}
 24286              		.loc 1 5467 10 view .LVU6359
 24287 0052 EAE7     		b	.L1748
 24288              		.cfi_endproc
 24289              	.LFE253:
 24291              		.section	.text.cmdplotdim,"ax",%progbits
 24292              		.align	1
ARM GAS  /tmp/ccK8IvWa.s 			page 627


 24293              		.p2align 2,,3
 24294              		.global	cmdplotdim
 24295              		.syntax unified
 24296              		.thumb
 24297              		.thumb_func
 24298              		.fpu fpv4-sp-d16
 24300              	cmdplotdim:
 24301              	.LVL1906:
 24302              	.LFB254:
5482:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
 24303              		.loc 1 5482 1 is_stmt 1 view -0
 24304              		.cfi_startproc
 24305              		@ args = 0, pretend = 0, frame = 0
 24306              		@ frame_needed = 0, uses_anonymous_args = 0
5483:src/xeq.c     **** 	if ( p != NULL ) {
 24307              		.loc 1 5483 2 view .LVU6361
5482:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
 24308              		.loc 1 5482 1 is_stmt 0 view .LVU6362
 24309 0000 30B5     		push	{r4, r5, lr}
 24310              		.cfi_def_cfa_offset 12
 24311              		.cfi_offset 4, -12
 24312              		.cfi_offset 5, -8
 24313              		.cfi_offset 14, -4
5483:src/xeq.c     **** 	if ( p != NULL ) {
 24314              		.loc 1 5483 21 view .LVU6363
 24315 0002 0022     		movs	r2, #0
5482:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
 24316              		.loc 1 5482 1 view .LVU6364
 24317 0004 83B0     		sub	sp, sp, #12
 24318              		.cfi_def_cfa_offset 24
5483:src/xeq.c     **** 	if ( p != NULL ) {
 24319              		.loc 1 5483 21 view .LVU6365
 24320 0006 1146     		mov	r1, r2
 24321              	.LVL1907:
5483:src/xeq.c     **** 	if ( p != NULL ) {
 24322              		.loc 1 5483 21 view .LVU6366
 24323 0008 FFF7FEFF 		bl	plot_check_range
 24324              	.LVL1908:
5484:src/xeq.c     **** 		lift2_if_enabled();
 24325              		.loc 1 5484 2 is_stmt 1 view .LVU6367
5484:src/xeq.c     **** 		lift2_if_enabled();
 24326              		.loc 1 5484 5 is_stmt 0 view .LVU6368
 24327 000c A0B1     		cbz	r0, .L1758
5485:src/xeq.c     **** 		setX_int_sgn( p[ 0 ], 0 ); // width
 24328              		.loc 1 5485 3 is_stmt 1 view .LVU6369
 24329              	.LBB3443:
 24330              	.LBI3443:
 729:src/xeq.c     **** 	lift_if_enabled();
 24331              		.loc 1 729 13 view .LVU6370
 24332              	.LBB3444:
 730:src/xeq.c     **** 	lift();
 24333              		.loc 1 730 2 view .LVU6371
 24334              	.LBB3445:
 24335              	.LBI3445:
 724:src/xeq.c     **** 	if (get_lift())
 24336              		.loc 1 724 6 view .LVU6372
 24337              	.LBB3446:
ARM GAS  /tmp/ccK8IvWa.s 			page 628


 725:src/xeq.c     **** 		lift();
 24338              		.loc 1 725 2 view .LVU6373
 24339              	.LBB3447:
 24340              	.LBI3447:
 720:src/xeq.c     **** 	return State2.state_lift;
 24341              		.loc 1 720 12 view .LVU6374
 24342              	.LBB3448:
 721:src/xeq.c     **** }
 24343              		.loc 1 721 2 view .LVU6375
 721:src/xeq.c     **** }
 24344              		.loc 1 721 15 is_stmt 0 view .LVU6376
 24345 000e 0D4B     		ldr	r3, .L1769
 24346 0010 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 24347              	.LBE3448:
 24348              	.LBE3447:
 725:src/xeq.c     **** 		lift();
 24349              		.loc 1 725 5 view .LVU6377
 24350 0012 5B06     		lsls	r3, r3, #25
 24351 0014 0446     		mov	r4, r0
 24352 0016 11D4     		bmi	.L1768
 24353              	.LVL1909:
 24354              	.L1760:
 725:src/xeq.c     **** 		lift();
 24355              		.loc 1 725 5 view .LVU6378
 24356              	.LBE3446:
 24357              	.LBE3445:
 731:src/xeq.c     **** }
 24358              		.loc 1 731 2 is_stmt 1 view .LVU6379
 24359              	.LBE3444:
 24360              	.LBE3443:
 24361              	.LBB3453:
 24362              	.LBB3454:
1310:src/xeq.c     **** }
 24363              		.loc 1 1310 2 is_stmt 0 view .LVU6380
 24364 0018 0025     		movs	r5, #0
 24365              	.LBE3454:
 24366              	.LBE3453:
 24367              	.LBB3458:
 24368              	.LBB3451:
 731:src/xeq.c     **** }
 24369              		.loc 1 731 2 view .LVU6381
 24370 001a FFF7FEFF 		bl	lift
 24371              	.LVL1910:
 24372              	.LBE3451:
 24373              	.LBE3458:
5486:src/xeq.c     **** 		set_reg_n_int_sgn( regY_idx, p[ 1 ] << 3, 0 ); // height
 24374              		.loc 1 5486 3 is_stmt 1 view .LVU6382
 24375              	.LBB3459:
 24376              	.LBI3453:
1309:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 24377              		.loc 1 1309 6 view .LVU6383
 24378              	.LBB3455:
1310:src/xeq.c     **** }
 24379              		.loc 1 1310 2 view .LVU6384
 24380              	.LBE3455:
 24381              	.LBE3459:
5486:src/xeq.c     **** 		set_reg_n_int_sgn( regY_idx, p[ 1 ] << 3, 0 ); // height
ARM GAS  /tmp/ccK8IvWa.s 			page 629


 24382              		.loc 1 5486 3 is_stmt 0 view .LVU6385
 24383 001e 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
 24384              	.LBB3460:
 24385              	.LBB3456:
1310:src/xeq.c     **** }
 24386              		.loc 1 1310 2 view .LVU6386
 24387 0020 0095     		str	r5, [sp]
 24388              	.LVL1911:
1310:src/xeq.c     **** }
 24389              		.loc 1 1310 2 view .LVU6387
 24390              	.LBE3456:
 24391              	.LBE3460:
5486:src/xeq.c     **** 		set_reg_n_int_sgn( regY_idx, p[ 1 ] << 3, 0 ); // height
 24392              		.loc 1 5486 3 view .LVU6388
 24393 0022 0023     		movs	r3, #0
 24394              	.LBB3461:
 24395              	.LBB3457:
1310:src/xeq.c     **** }
 24396              		.loc 1 1310 2 view .LVU6389
 24397 0024 6420     		movs	r0, #100
 24398 0026 FFF7FEFF 		bl	set_reg_n_int_sgn
 24399              	.LVL1912:
1310:src/xeq.c     **** }
 24400              		.loc 1 1310 2 view .LVU6390
 24401              	.LBE3457:
 24402              	.LBE3461:
5487:src/xeq.c     **** 	}
 24403              		.loc 1 5487 3 is_stmt 1 view .LVU6391
5487:src/xeq.c     **** 	}
 24404              		.loc 1 5487 33 is_stmt 0 view .LVU6392
 24405 002a 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
5487:src/xeq.c     **** 	}
 24406              		.loc 1 5487 3 view .LVU6393
 24407 002c 0095     		str	r5, [sp]
5487:src/xeq.c     **** 	}
 24408              		.loc 1 5487 39 view .LVU6394
 24409 002e D200     		lsls	r2, r2, #3
5487:src/xeq.c     **** 	}
 24410              		.loc 1 5487 3 view .LVU6395
 24411 0030 D317     		asrs	r3, r2, #31
 24412 0032 6520     		movs	r0, #101
 24413 0034 FFF7FEFF 		bl	set_reg_n_int_sgn
 24414              	.LVL1913:
 24415              	.L1758:
5489:src/xeq.c     **** 
 24416              		.loc 1 5489 1 view .LVU6396
 24417 0038 03B0     		add	sp, sp, #12
 24418              		.cfi_remember_state
 24419              		.cfi_def_cfa_offset 12
 24420              		@ sp needed
 24421 003a 30BD     		pop	{r4, r5, pc}
 24422              	.LVL1914:
 24423              	.L1768:
 24424              		.cfi_restore_state
 24425              	.LBB3462:
 24426              	.LBB3452:
 24427              	.LBB3450:
ARM GAS  /tmp/ccK8IvWa.s 			page 630


 24428              	.LBB3449:
 726:src/xeq.c     **** }
 24429              		.loc 1 726 3 is_stmt 1 view .LVU6397
 24430 003c FFF7FEFF 		bl	lift
 24431              	.LVL1915:
 726:src/xeq.c     **** }
 24432              		.loc 1 726 3 is_stmt 0 view .LVU6398
 24433 0040 EAE7     		b	.L1760
 24434              	.L1770:
 24435 0042 00BF     		.align	2
 24436              	.L1769:
 24437 0044 00000000 		.word	StateWhileOn
 24438              	.LBE3449:
 24439              	.LBE3450:
 24440              	.LBE3452:
 24441              	.LBE3462:
 24442              		.cfi_endproc
 24443              	.LFE254:
 24445              		.section	.text.cmdplotpixel,"ax",%progbits
 24446              		.align	1
 24447              		.p2align 2,,3
 24448              		.global	cmdplotpixel
 24449              		.syntax unified
 24450              		.thumb
 24451              		.thumb_func
 24452              		.fpu fpv4-sp-d16
 24454              	cmdplotpixel:
 24455              	.LVL1916:
 24456              	.LFB255:
5497:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
 24457              		.loc 1 5497 1 is_stmt 1 view -0
 24458              		.cfi_startproc
 24459              		@ args = 0, pretend = 0, frame = 8
 24460              		@ frame_needed = 0, uses_anonymous_args = 0
5498:src/xeq.c     **** 	if ( p != NULL ) {
 24461              		.loc 1 5498 2 view .LVU6400
5497:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
 24462              		.loc 1 5497 1 is_stmt 0 view .LVU6401
 24463 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 24464              		.cfi_def_cfa_offset 28
 24465              		.cfi_offset 4, -28
 24466              		.cfi_offset 5, -24
 24467              		.cfi_offset 6, -20
 24468              		.cfi_offset 7, -16
 24469              		.cfi_offset 8, -12
 24470              		.cfi_offset 9, -8
 24471              		.cfi_offset 14, -4
5498:src/xeq.c     **** 	if ( p != NULL ) {
 24472              		.loc 1 5498 21 view .LVU6402
 24473 0004 0022     		movs	r2, #0
5497:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
 24474              		.loc 1 5497 1 view .LVU6403
 24475 0006 83B0     		sub	sp, sp, #12
 24476              		.cfi_def_cfa_offset 40
5497:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
 24477              		.loc 1 5497 1 view .LVU6404
 24478 0008 0E46     		mov	r6, r1
ARM GAS  /tmp/ccK8IvWa.s 			page 631


5498:src/xeq.c     **** 	if ( p != NULL ) {
 24479              		.loc 1 5498 21 view .LVU6405
 24480 000a 1146     		mov	r1, r2
 24481              	.LVL1917:
5498:src/xeq.c     **** 	if ( p != NULL ) {
 24482              		.loc 1 5498 21 view .LVU6406
 24483 000c FFF7FEFF 		bl	plot_check_range
 24484              	.LVL1918:
5499:src/xeq.c     **** 		/*
 24485              		.loc 1 5499 2 is_stmt 1 view .LVU6407
5499:src/xeq.c     **** 		/*
 24486              		.loc 1 5499 5 is_stmt 0 view .LVU6408
 24487 0010 50B1     		cbz	r0, .L1771
 24488              	.LBB3463:
5503:src/xeq.c     **** 		unsigned int row = (unsigned int) get_reg_n_int_sgn( regY_idx, &sgn );
 24489              		.loc 1 5503 3 is_stmt 1 view .LVU6409
5504:src/xeq.c     **** 		int pix = 0;
 24490              		.loc 1 5504 3 view .LVU6410
 24491 0012 0446     		mov	r4, r0
5504:src/xeq.c     **** 		int pix = 0;
 24492              		.loc 1 5504 37 is_stmt 0 view .LVU6411
 24493 0014 01A9     		add	r1, sp, #4
 24494 0016 6520     		movs	r0, #101
 24495              	.LVL1919:
5504:src/xeq.c     **** 		int pix = 0;
 24496              		.loc 1 5504 37 view .LVU6412
 24497 0018 FFF7FEFF 		bl	get_reg_n_int_sgn
 24498              	.LVL1920:
5506:src/xeq.c     **** 			/*
 24499              		.loc 1 5506 12 view .LVU6413
 24500 001c 019F     		ldr	r7, [sp, #4]
5504:src/xeq.c     **** 		int pix = 0;
 24501              		.loc 1 5504 37 view .LVU6414
 24502 001e 0546     		mov	r5, r0
 24503              	.LVL1921:
5505:src/xeq.c     **** 		if ( sgn == 0 && ( row >> 3 ) < (unsigned int) p[ 1 ] ) {
 24504              		.loc 1 5505 3 is_stmt 1 view .LVU6415
5506:src/xeq.c     **** 			/*
 24505              		.loc 1 5506 3 view .LVU6416
5506:src/xeq.c     **** 			/*
 24506              		.loc 1 5506 6 is_stmt 0 view .LVU6417
 24507 0020 2FB1     		cbz	r7, .L1784
5505:src/xeq.c     **** 		if ( sgn == 0 && ( row >> 3 ) < (unsigned int) p[ 1 ] ) {
 24508              		.loc 1 5505 7 view .LVU6418
 24509 0022 0027     		movs	r7, #0
 24510              	.LVL1922:
 24511              	.L1773:
5530:src/xeq.c     **** 			fin_tst( *p & pix );
 24512              		.loc 1 5530 3 is_stmt 1 view .LVU6419
5530:src/xeq.c     **** 			fin_tst( *p & pix );
 24513              		.loc 1 5530 6 is_stmt 0 view .LVU6420
 24514 0024 972E     		cmp	r6, #151
 24515 0026 27D0     		beq	.L1785
 24516              	.L1771:
5530:src/xeq.c     **** 			fin_tst( *p & pix );
 24517              		.loc 1 5530 6 view .LVU6421
 24518              	.LBE3463:
ARM GAS  /tmp/ccK8IvWa.s 			page 632


5534:src/xeq.c     **** #endif
 24519              		.loc 1 5534 1 view .LVU6422
 24520 0028 03B0     		add	sp, sp, #12
 24521              		.cfi_remember_state
 24522              		.cfi_def_cfa_offset 28
 24523              		@ sp needed
 24524 002a BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 24525              	.LVL1923:
 24526              	.L1784:
 24527              		.cfi_restore_state
 24528              	.LBB3471:
5506:src/xeq.c     **** 			/*
 24529              		.loc 1 5506 35 discriminator 1 view .LVU6423
 24530 002e 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
5506:src/xeq.c     **** 			/*
 24531              		.loc 1 5506 17 discriminator 1 view .LVU6424
 24532 0030 B3EBD00F 		cmp	r3, r0, lsr #3
5506:src/xeq.c     **** 			/*
 24533              		.loc 1 5506 26 discriminator 1 view .LVU6425
 24534 0034 4FEAD008 		lsr	r8, r0, #3
5506:src/xeq.c     **** 			/*
 24535              		.loc 1 5506 17 discriminator 1 view .LVU6426
 24536 0038 F4D9     		bls	.L1773
 24537              	.LBB3464:
5510:src/xeq.c     **** 			unsigned int column = (unsigned int) getX_int_sgn( &sgn );
 24538              		.loc 1 5510 4 is_stmt 1 view .LVU6427
 24539              	.LBB3465:
 24540              	.LBB3466:
1247:src/xeq.c     **** }
 24541              		.loc 1 1247 9 is_stmt 0 view .LVU6428
 24542 003a 01A9     		add	r1, sp, #4
 24543 003c 6420     		movs	r0, #100
 24544              	.LVL1924:
1247:src/xeq.c     **** }
 24545              		.loc 1 1247 9 view .LVU6429
 24546              	.LBE3466:
 24547              	.LBE3465:
5510:src/xeq.c     **** 			unsigned int column = (unsigned int) getX_int_sgn( &sgn );
 24548              		.loc 1 5510 40 view .LVU6430
 24549 003e 94F80090 		ldrb	r9, [r4]	@ zero_extendqisi2
 24550              	.LVL1925:
5511:src/xeq.c     **** 			if ( sgn == 0 && column < width ) {
 24551              		.loc 1 5511 4 is_stmt 1 view .LVU6431
 24552              	.LBB3468:
 24553              	.LBI3465:
1246:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 24554              		.loc 1 1246 24 view .LVU6432
 24555              	.LBB3467:
1247:src/xeq.c     **** }
 24556              		.loc 1 1247 2 view .LVU6433
1247:src/xeq.c     **** }
 24557              		.loc 1 1247 9 is_stmt 0 view .LVU6434
 24558 0042 FFF7FEFF 		bl	get_reg_n_int_sgn
 24559              	.LVL1926:
1247:src/xeq.c     **** }
 24560              		.loc 1 1247 9 view .LVU6435
 24561              	.LBE3467:
ARM GAS  /tmp/ccK8IvWa.s 			page 633


 24562              	.LBE3468:
5512:src/xeq.c     **** 				/*
 24563              		.loc 1 5512 13 view .LVU6436
 24564 0046 019B     		ldr	r3, [sp, #4]
 24565              	.LVL1927:
5512:src/xeq.c     **** 				/*
 24566              		.loc 1 5512 4 is_stmt 1 view .LVU6437
5512:src/xeq.c     **** 				/*
 24567              		.loc 1 5512 7 is_stmt 0 view .LVU6438
 24568 0048 002B     		cmp	r3, #0
 24569 004a EBD1     		bne	.L1773
5512:src/xeq.c     **** 				/*
 24570              		.loc 1 5512 18 discriminator 1 view .LVU6439
 24571 004c 8145     		cmp	r9, r0
 24572 004e E9D9     		bls	.L1773
5516:src/xeq.c     **** 				p += 2 + width * ( row >> 3 ) + column;
 24573              		.loc 1 5516 5 is_stmt 1 view .LVU6440
5517:src/xeq.c     **** 
 24574              		.loc 1 5517 35 is_stmt 0 view .LVU6441
 24575 0050 09FB0808 		mla	r8, r9, r8, r0
 24576 0054 08F10208 		add	r8, r8, #2
5516:src/xeq.c     **** 				p += 2 + width * ( row >> 3 ) + column;
 24577              		.loc 1 5516 22 view .LVU6442
 24578 0058 05F00705 		and	r5, r5, #7
 24579              	.LVL1928:
5516:src/xeq.c     **** 				p += 2 + width * ( row >> 3 ) + column;
 24580              		.loc 1 5516 9 view .LVU6443
 24581 005c 0127     		movs	r7, #1
5519:src/xeq.c     **** 					*p |= pix;
 24582              		.loc 1 5519 8 view .LVU6444
 24583 005e 942E     		cmp	r6, #148
5517:src/xeq.c     **** 
 24584              		.loc 1 5517 7 view .LVU6445
 24585 0060 4444     		add	r4, r4, r8
 24586              	.LVL1929:
5516:src/xeq.c     **** 				p += 2 + width * ( row >> 3 ) + column;
 24587              		.loc 1 5516 9 view .LVU6446
 24588 0062 07FA05F7 		lsl	r7, r7, r5
 24589              	.LVL1930:
5517:src/xeq.c     **** 
 24590              		.loc 1 5517 5 is_stmt 1 view .LVU6447
5519:src/xeq.c     **** 					*p |= pix;
 24591              		.loc 1 5519 5 view .LVU6448
5519:src/xeq.c     **** 					*p |= pix;
 24592              		.loc 1 5519 8 is_stmt 0 view .LVU6449
 24593 0066 0ED0     		beq	.L1786
5522:src/xeq.c     **** 					*p &= ~pix;
 24594              		.loc 1 5522 10 is_stmt 1 view .LVU6450
5522:src/xeq.c     **** 					*p &= ~pix;
 24595              		.loc 1 5522 13 is_stmt 0 view .LVU6451
 24596 0068 952E     		cmp	r6, #149
 24597 006a 10D0     		beq	.L1787
5525:src/xeq.c     **** 					*p ^= pix;
 24598              		.loc 1 5525 10 is_stmt 1 view .LVU6452
5525:src/xeq.c     **** 					*p ^= pix;
 24599              		.loc 1 5525 13 is_stmt 0 view .LVU6453
 24600 006c 962E     		cmp	r6, #150
ARM GAS  /tmp/ccK8IvWa.s 			page 634


 24601 006e D9D1     		bne	.L1773
5526:src/xeq.c     **** 				}
 24602              		.loc 1 5526 6 is_stmt 1 view .LVU6454
5526:src/xeq.c     **** 				}
 24603              		.loc 1 5526 9 is_stmt 0 view .LVU6455
 24604 0070 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 24605 0072 5F40     		eors	r7, r7, r3
 24606              	.LVL1931:
5526:src/xeq.c     **** 				}
 24607              		.loc 1 5526 9 view .LVU6456
 24608 0074 2770     		strb	r7, [r4]
 24609 0076 D7E7     		b	.L1771
 24610              	.LVL1932:
 24611              	.L1785:
5526:src/xeq.c     **** 				}
 24612              		.loc 1 5526 9 view .LVU6457
 24613              	.LBE3464:
5531:src/xeq.c     **** 		}
 24614              		.loc 1 5531 4 is_stmt 1 view .LVU6458
5531:src/xeq.c     **** 		}
 24615              		.loc 1 5531 13 is_stmt 0 view .LVU6459
 24616 0078 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
5531:src/xeq.c     **** 		}
 24617              		.loc 1 5531 4 view .LVU6460
 24618 007a 3840     		ands	r0, r0, r7
 24619 007c FFF7FEFF 		bl	fin_tst
 24620              	.LVL1933:
 24621              	.LBE3471:
5534:src/xeq.c     **** #endif
 24622              		.loc 1 5534 1 view .LVU6461
 24623 0080 03B0     		add	sp, sp, #12
 24624              		.cfi_remember_state
 24625              		.cfi_def_cfa_offset 28
 24626              		@ sp needed
 24627 0082 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 24628              	.LVL1934:
 24629              	.L1786:
 24630              		.cfi_restore_state
 24631              	.LBB3472:
 24632              	.LBB3469:
5520:src/xeq.c     **** 				}
 24633              		.loc 1 5520 6 is_stmt 1 view .LVU6462
5520:src/xeq.c     **** 				}
 24634              		.loc 1 5520 9 is_stmt 0 view .LVU6463
 24635 0086 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 24636 0088 1F43     		orrs	r7, r7, r3
 24637              	.LVL1935:
5520:src/xeq.c     **** 				}
 24638              		.loc 1 5520 9 view .LVU6464
 24639 008a 2770     		strb	r7, [r4]
5520:src/xeq.c     **** 				}
 24640              		.loc 1 5520 9 view .LVU6465
 24641              	.LBE3469:
5530:src/xeq.c     **** 			fin_tst( *p & pix );
 24642              		.loc 1 5530 3 is_stmt 1 view .LVU6466
 24643 008c CCE7     		b	.L1771
 24644              	.LVL1936:
ARM GAS  /tmp/ccK8IvWa.s 			page 635


 24645              	.L1787:
 24646              	.LBB3470:
5523:src/xeq.c     **** 				}
 24647              		.loc 1 5523 6 view .LVU6467
5523:src/xeq.c     **** 				}
 24648              		.loc 1 5523 9 is_stmt 0 view .LVU6468
 24649 008e 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 24650 0090 23EA0707 		bic	r7, r3, r7
 24651              	.LVL1937:
5523:src/xeq.c     **** 				}
 24652              		.loc 1 5523 9 view .LVU6469
 24653 0094 2770     		strb	r7, [r4]
 24654 0096 C7E7     		b	.L1771
 24655              	.LBE3470:
 24656              	.LBE3472:
 24657              		.cfi_endproc
 24658              	.LFE255:
 24660              		.section	.text.not_running,"ax",%progbits
 24661              		.align	1
 24662              		.p2align 2,,3
 24663              		.global	not_running
 24664              		.syntax unified
 24665              		.thumb
 24666              		.thumb_func
 24667              		.fpu fpv4-sp-d16
 24669              	not_running:
 24670              	.LFB256:
5541:src/xeq.c     **** 	if ( Running ) {
 24671              		.loc 1 5541 23 is_stmt 1 view -0
 24672              		.cfi_startproc
 24673              		@ args = 0, pretend = 0, frame = 0
 24674              		@ frame_needed = 0, uses_anonymous_args = 0
 24675              		@ link register save eliminated.
5542:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 24676              		.loc 1 5542 2 view .LVU6471
5542:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 24677              		.loc 1 5542 7 is_stmt 0 view .LVU6472
 24678 0000 064B     		ldr	r3, .L1793
5542:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 24679              		.loc 1 5542 5 view .LVU6473
 24680 0002 1B68     		ldr	r3, [r3]
 24681 0004 0BB9     		cbnz	r3, .L1792
5546:src/xeq.c     **** }
 24682              		.loc 1 5546 9 view .LVU6474
 24683 0006 0120     		movs	r0, #1
 24684 0008 7047     		bx	lr
 24685              	.L1792:
5543:src/xeq.c     **** 		return 0;
 24686              		.loc 1 5543 3 is_stmt 1 view .LVU6475
 24687              	.LVL1938:
 24688              	.LBB3477:
 24689              	.LBI3477:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24690              		.loc 1 523 5 view .LVU6476
 24691              	.LBB3478:
 524:src/xeq.c     **** 		Error = e;
 24692              		.loc 1 524 2 view .LVU6477
ARM GAS  /tmp/ccK8IvWa.s 			page 636


 524:src/xeq.c     **** 		Error = e;
 24693              		.loc 1 524 12 is_stmt 0 view .LVU6478
 24694 000a 054B     		ldr	r3, .L1793+4
 24695 000c 1868     		ldr	r0, [r3]
 524:src/xeq.c     **** 		Error = e;
 24696              		.loc 1 524 5 view .LVU6479
 24697 000e 10B9     		cbnz	r0, .L1791
 24698              	.LVL1939:
 24699              	.LBB3479:
 24700              	.LBI3479:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24701              		.loc 1 523 5 is_stmt 1 view .LVU6480
 24702              	.LBB3480:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 24703              		.loc 1 525 3 view .LVU6481
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 24704              		.loc 1 525 9 is_stmt 0 view .LVU6482
 24705 0010 0722     		movs	r2, #7
 24706 0012 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 24707              		.loc 1 526 3 is_stmt 1 view .LVU6483
 24708 0014 7047     		bx	lr
 24709              	.LVL1940:
 24710              	.L1791:
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 24711              		.loc 1 526 3 is_stmt 0 view .LVU6484
 24712              	.LBE3480:
 24713              	.LBE3479:
 24714              	.LBE3478:
 24715              	.LBE3477:
5544:src/xeq.c     **** 	}
 24716              		.loc 1 5544 10 view .LVU6485
 24717 0016 0020     		movs	r0, #0
 24718              	.LVL1941:
5547:src/xeq.c     **** 
 24719              		.loc 1 5547 1 view .LVU6486
 24720 0018 7047     		bx	lr
 24721              	.L1794:
 24722 001a 00BF     		.align	2
 24723              	.L1793:
 24724 001c 00000000 		.word	Running
 24725 0020 00000000 		.word	Error
 24726              		.cfi_endproc
 24727              	.LFE256:
 24729              		.section	.text.set_running_off_sst,"ax",%progbits
 24730              		.align	1
 24731              		.p2align 2,,3
 24732              		.global	set_running_off_sst
 24733              		.syntax unified
 24734              		.thumb
 24735              		.thumb_func
 24736              		.fpu fpv4-sp-d16
 24738              	set_running_off_sst:
 24739              	.LFB257:
5552:src/xeq.c     **** 	Running = 0;
 24740              		.loc 1 5552 28 is_stmt 1 view -0
 24741              		.cfi_startproc
ARM GAS  /tmp/ccK8IvWa.s 			page 637


 24742              		@ args = 0, pretend = 0, frame = 0
 24743              		@ frame_needed = 0, uses_anonymous_args = 0
 24744              		@ link register save eliminated.
5553:src/xeq.c     **** }
 24745              		.loc 1 5553 2 view .LVU6488
5553:src/xeq.c     **** }
 24746              		.loc 1 5553 10 is_stmt 0 view .LVU6489
 24747 0000 014B     		ldr	r3, .L1796
 24748 0002 0022     		movs	r2, #0
 24749 0004 1A60     		str	r2, [r3]
5554:src/xeq.c     **** 
 24750              		.loc 1 5554 1 view .LVU6490
 24751 0006 7047     		bx	lr
 24752              	.L1797:
 24753              		.align	2
 24754              	.L1796:
 24755 0008 00000000 		.word	Running
 24756              		.cfi_endproc
 24757              	.LFE257:
 24759              		.section	.text.set_running_on_sst,"ax",%progbits
 24760              		.align	1
 24761              		.p2align 2,,3
 24762              		.global	set_running_on_sst
 24763              		.syntax unified
 24764              		.thumb
 24765              		.thumb_func
 24766              		.fpu fpv4-sp-d16
 24768              	set_running_on_sst:
 24769              	.LFB258:
5556:src/xeq.c     **** 	Running = 1;
 24770              		.loc 1 5556 27 is_stmt 1 view -0
 24771              		.cfi_startproc
 24772              		@ args = 0, pretend = 0, frame = 0
 24773              		@ frame_needed = 0, uses_anonymous_args = 0
 24774              		@ link register save eliminated.
5557:src/xeq.c     **** }
 24775              		.loc 1 5557 2 view .LVU6492
5557:src/xeq.c     **** }
 24776              		.loc 1 5557 10 is_stmt 0 view .LVU6493
 24777 0000 014B     		ldr	r3, .L1799
 24778 0002 0122     		movs	r2, #1
 24779 0004 1A60     		str	r2, [r3]
5558:src/xeq.c     **** 
 24780              		.loc 1 5558 1 view .LVU6494
 24781 0006 7047     		bx	lr
 24782              	.L1800:
 24783              		.align	2
 24784              	.L1799:
 24785 0008 00000000 		.word	Running
 24786              		.cfi_endproc
 24787              	.LFE258:
 24789              		.section	.text.set_running_off,"ax",%progbits
 24790              		.align	1
 24791              		.p2align 2,,3
 24792              		.global	set_running_off
 24793              		.syntax unified
 24794              		.thumb
ARM GAS  /tmp/ccK8IvWa.s 			page 638


 24795              		.thumb_func
 24796              		.fpu fpv4-sp-d16
 24798              	set_running_off:
 24799              	.LFB259:
5560:src/xeq.c     **** 	set_running_off_sst();
 24800              		.loc 1 5560 24 is_stmt 1 view -0
 24801              		.cfi_startproc
 24802              		@ args = 0, pretend = 0, frame = 0
 24803              		@ frame_needed = 0, uses_anonymous_args = 0
 24804              		@ link register save eliminated.
5561:src/xeq.c     **** 	State.entryp = 0;
 24805              		.loc 1 5561 2 view .LVU6496
 24806              	.LBB3481:
 24807              	.LBI3481:
5552:src/xeq.c     **** 	Running = 0;
 24808              		.loc 1 5552 6 view .LVU6497
 24809              	.LBB3482:
5553:src/xeq.c     **** }
 24810              		.loc 1 5553 2 view .LVU6498
 24811              	.LBE3482:
 24812              	.LBE3481:
5560:src/xeq.c     **** 	set_running_off_sst();
 24813              		.loc 1 5560 24 is_stmt 0 view .LVU6499
 24814 0000 10B4     		push	{r4}
 24815              		.cfi_def_cfa_offset 4
 24816              		.cfi_offset 4, -4
5562:src/xeq.c     **** 	dot( RCL_annun, 0);
 24817              		.loc 1 5562 15 view .LVU6500
 24818 0002 074B     		ldr	r3, .L1803
 24819              	.LBB3486:
 24820              	.LBB3483:
5553:src/xeq.c     **** }
 24821              		.loc 1 5553 10 view .LVU6501
 24822 0004 074C     		ldr	r4, .L1803+4
 24823              	.LBE3483:
 24824              	.LBE3486:
5562:src/xeq.c     **** 	dot( RCL_annun, 0);
 24825              		.loc 1 5562 15 view .LVU6502
 24826 0006 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 24827              	.LBB3487:
 24828              	.LBB3484:
5553:src/xeq.c     **** }
 24829              		.loc 1 5553 10 view .LVU6503
 24830 000a 0021     		movs	r1, #0
 24831              	.LBE3484:
 24832              	.LBE3487:
5562:src/xeq.c     **** 	dot( RCL_annun, 0);
 24833              		.loc 1 5562 15 view .LVU6504
 24834 000c 61F30412 		bfi	r2, r1, #4, #1
 24835 0010 83F8DD27 		strb	r2, [r3, #2013]
 24836              		.loc 1 5563 2 view .LVU6505
 24837 0014 8A20     		movs	r0, #138
 24838              	.LBB3488:
 24839              	.LBB3485:
5553:src/xeq.c     **** }
 24840              		.loc 1 5553 10 view .LVU6506
 24841 0016 2160     		str	r1, [r4]
ARM GAS  /tmp/ccK8IvWa.s 			page 639


 24842              	.LBE3485:
 24843              	.LBE3488:
5562:src/xeq.c     **** 	dot( RCL_annun, 0);
 24844              		.loc 1 5562 2 is_stmt 1 view .LVU6507
 24845              		.loc 1 5563 2 view .LVU6508
5564:src/xeq.c     **** }
 24846              		.loc 1 5564 1 is_stmt 0 view .LVU6509
 24847 0018 5DF8044B 		ldr	r4, [sp], #4
 24848              		.cfi_restore 4
 24849              		.cfi_def_cfa_offset 0
5563:src/xeq.c     **** }
 24850              		.loc 1 5563 2 view .LVU6510
 24851 001c FFF7FEBF 		b	dot
 24852              	.LVL1942:
 24853              	.L1804:
 24854              		.align	2
 24855              	.L1803:
 24856 0020 00000000 		.word	PersistentRam
 24857 0024 00000000 		.word	Running
 24858              		.cfi_endproc
 24859              	.LFE259:
 24861              		.section	.text.set_running_on,"ax",%progbits
 24862              		.align	1
 24863              		.p2align 2,,3
 24864              		.global	set_running_on
 24865              		.syntax unified
 24866              		.thumb
 24867              		.thumb_func
 24868              		.fpu fpv4-sp-d16
 24870              	set_running_on:
 24871              	.LFB260:
5565:src/xeq.c     **** 
5566:src/xeq.c     **** void set_running_on() {
 24872              		.loc 1 5566 23 is_stmt 1 view -0
 24873              		.cfi_startproc
 24874              		@ args = 0, pretend = 0, frame = 0
 24875              		@ frame_needed = 0, uses_anonymous_args = 0
5567:src/xeq.c     **** 	update_speed(0);
 24876              		.loc 1 5567 17 view .LVU6512
5568:src/xeq.c     **** 	GoFast = 1;
 24877              		.loc 1 5568 2 view .LVU6513
5566:src/xeq.c     **** 	update_speed(0);
 24878              		.loc 1 5566 23 is_stmt 0 view .LVU6514
 24879 0000 38B5     		push	{r3, r4, r5, lr}
 24880              		.cfi_def_cfa_offset 16
 24881              		.cfi_offset 3, -16
 24882              		.cfi_offset 4, -12
 24883              		.cfi_offset 5, -8
 24884              		.cfi_offset 14, -4
 24885              	.LBB3489:
 24886              	.LBB3490:
 182:src/xeq.c     **** }
 24887              		.loc 1 182 9 view .LVU6515
 24888 0002 0C4B     		ldr	r3, .L1811
 24889              	.LBE3490:
 24890              	.LBE3489:
 24891              		.loc 1 5568 9 view .LVU6516
ARM GAS  /tmp/ccK8IvWa.s 			page 640


 24892 0004 0C4D     		ldr	r5, .L1811+4
 24893              	.LBB3493:
 24894              	.LBB3491:
 182:src/xeq.c     **** }
 24895              		.loc 1 182 9 view .LVU6517
 24896 0006 B3F8E037 		ldrh	r3, [r3, #2016]
 24897              	.LBE3491:
 24898              	.LBE3493:
 24899              	.LBB3494:
 24900              	.LBB3495:
5557:src/xeq.c     **** }
 24901              		.loc 1 5557 10 view .LVU6518
 24902 000a 0C4C     		ldr	r4, .L1811+8
 24903              	.LBE3495:
 24904              	.LBE3494:
5569:src/xeq.c     **** 	set_running_on_sst();
5570:src/xeq.c     **** 	LastKey = 0;
 24905              		.loc 1 5570 10 view .LVU6519
 24906 000c 0C49     		ldr	r1, .L1811+12
5571:src/xeq.c     **** 	if (!is_xrom())
 24907              		.loc 1 5571 5 view .LVU6520
 24908 000e 9B0B     		lsrs	r3, r3, #14
5568:src/xeq.c     **** 	set_running_on_sst();
 24909              		.loc 1 5568 9 view .LVU6521
 24910 0010 0122     		movs	r2, #1
5570:src/xeq.c     **** 	if (!is_xrom())
 24911              		.loc 1 5570 10 view .LVU6522
 24912 0012 0020     		movs	r0, #0
 24913              		.loc 1 5571 5 view .LVU6523
 24914 0014 032B     		cmp	r3, #3
5568:src/xeq.c     **** 	set_running_on_sst();
 24915              		.loc 1 5568 9 view .LVU6524
 24916 0016 2A60     		str	r2, [r5]
5569:src/xeq.c     **** 	LastKey = 0;
 24917              		.loc 1 5569 2 is_stmt 1 view .LVU6525
 24918              	.LBB3497:
 24919              	.LBI3494:
5556:src/xeq.c     **** 	Running = 1;
 24920              		.loc 1 5556 6 view .LVU6526
 24921              	.LBB3496:
5557:src/xeq.c     **** }
 24922              		.loc 1 5557 2 view .LVU6527
5557:src/xeq.c     **** }
 24923              		.loc 1 5557 10 is_stmt 0 view .LVU6528
 24924 0018 2260     		str	r2, [r4]
 24925              	.LBE3496:
 24926              	.LBE3497:
5570:src/xeq.c     **** 	if (!is_xrom())
 24927              		.loc 1 5570 2 is_stmt 1 view .LVU6529
5570:src/xeq.c     **** 	if (!is_xrom())
 24928              		.loc 1 5570 10 is_stmt 0 view .LVU6530
 24929 001a C874     		strb	r0, [r1, #19]
 24930              		.loc 1 5571 2 is_stmt 1 view .LVU6531
 24931              	.LBB3498:
 24932              	.LBI3489:
 181:src/xeq.c     **** 	return isXROM(state_pc());
 24933              		.loc 1 181 5 view .LVU6532
ARM GAS  /tmp/ccK8IvWa.s 			page 641


 24934              	.LBB3492:
 182:src/xeq.c     **** }
 24935              		.loc 1 182 2 view .LVU6533
 24936              	.LBE3492:
 24937              	.LBE3498:
 24938              		.loc 1 5571 5 is_stmt 0 view .LVU6534
 24939 001c 01D0     		beq	.L1806
5572:src/xeq.c     **** 		error_message(ERR_NONE);
 24940              		.loc 1 5572 3 is_stmt 1 view .LVU6535
 24941 001e FFF7FEFF 		bl	error_message
 24942              	.LVL1943:
 24943              	.L1806:
5573:src/xeq.c     **** 	dot(BEG, 0);
 24944              		.loc 1 5573 2 view .LVU6536
 24945 0022 0021     		movs	r1, #0
 24946 0024 8820     		movs	r0, #136
 24947 0026 FFF7FEFF 		bl	dot
 24948              	.LVL1944:
5574:src/xeq.c     **** 	finish_display();
 24949              		.loc 1 5574 2 view .LVU6537
5575:src/xeq.c     **** }
 24950              		.loc 1 5575 1 is_stmt 0 view .LVU6538
 24951 002a BDE83840 		pop	{r3, r4, r5, lr}
 24952              		.cfi_restore 14
 24953              		.cfi_restore 5
 24954              		.cfi_restore 4
 24955              		.cfi_restore 3
 24956              		.cfi_def_cfa_offset 0
5574:src/xeq.c     **** 	finish_display();
 24957              		.loc 1 5574 2 view .LVU6539
 24958 002e FFF7FEBF 		b	finish_display
 24959              	.LVL1945:
 24960              	.L1812:
 24961 0032 00BF     		.align	2
 24962              	.L1811:
 24963 0034 00000000 		.word	PersistentRam
 24964 0038 00000000 		.word	GoFast
 24965 003c 00000000 		.word	Running
 24966 0040 00000000 		.word	StateWhileOn
 24967              		.cfi_endproc
 24968              	.LFE260:
 24970              		.section	.text.gsbgto,"ax",%progbits
 24971              		.align	1
 24972              		.p2align 2,,3
 24973              		.syntax unified
 24974              		.thumb
 24975              		.thumb_func
 24976              		.fpu fpv4-sp-d16
 24978              	gsbgto:
 24979              	.LVL1946:
 24980              	.LFB148:
2004:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 24981              		.loc 1 2004 66 is_stmt 1 view -0
 24982              		.cfi_startproc
 24983              		@ args = 0, pretend = 0, frame = 0
 24984              		@ frame_needed = 0, uses_anonymous_args = 0
2004:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
ARM GAS  /tmp/ccK8IvWa.s 			page 642


 24985              		.loc 1 2004 66 is_stmt 0 view .LVU6541
 24986 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 24987              		.cfi_def_cfa_offset 24
 24988              		.cfi_offset 4, -24
 24989              		.cfi_offset 5, -20
 24990              		.cfi_offset 6, -16
 24991              		.cfi_offset 7, -12
 24992              		.cfi_offset 8, -8
 24993              		.cfi_offset 14, -4
2005:src/xeq.c     **** 	raw_set_pc(pc);
 24994              		.loc 1 2005 27 view .LVU6542
 24995 0004 204E     		ldr	r6, .L1828
2004:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 24996              		.loc 1 2004 66 view .LVU6543
 24997 0006 0446     		mov	r4, r0
 24998 0008 0D46     		mov	r5, r1
2005:src/xeq.c     **** 	raw_set_pc(pc);
 24999              		.loc 1 2005 2 is_stmt 1 view .LVU6544
 25000              	.LBB3513:
 25001              	.LBB3514:
 280:src/xeq.c     **** }
 25002              		.loc 1 280 2 is_stmt 0 view .LVU6545
 25003 000a 0020     		movs	r0, #0
 25004              	.LVL1947:
 280:src/xeq.c     **** }
 25005              		.loc 1 280 2 view .LVU6546
 25006              	.LBE3514:
 25007              	.LBE3513:
2005:src/xeq.c     **** 	raw_set_pc(pc);
 25008              		.loc 1 2005 27 view .LVU6547
 25009 000c B6F8EC87 		ldrh	r8, [r6, #2028]
 25010              	.LVL1948:
2006:src/xeq.c     **** 	if (gsb) {
 25011              		.loc 1 2006 2 is_stmt 1 view .LVU6548
 25012              	.LBB3517:
 25013              	.LBI3513:
 278:src/xeq.c     **** 	State.pc = pc;
 25014              		.loc 1 278 13 view .LVU6549
 25015              	.LBB3515:
 279:src/xeq.c     **** 	update_program_bounds(0);
 25016              		.loc 1 279 2 view .LVU6550
 280:src/xeq.c     **** }
 25017              		.loc 1 280 2 view .LVU6551
 279:src/xeq.c     **** 	update_program_bounds(0);
 25018              		.loc 1 279 11 is_stmt 0 view .LVU6552
 25019 0010 A6F8E047 		strh	r4, [r6, #2016]	@ movhi
 25020              	.LBE3515:
 25021              	.LBE3517:
2004:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 25022              		.loc 1 2004 66 view .LVU6553
 25023 0014 1746     		mov	r7, r2
 25024              	.LBB3518:
 25025              	.LBB3516:
 280:src/xeq.c     **** }
 25026              		.loc 1 280 2 view .LVU6554
 25027 0016 FFF7FEFF 		bl	update_program_bounds
 25028              	.LVL1949:
ARM GAS  /tmp/ccK8IvWa.s 			page 643


 280:src/xeq.c     **** }
 25029              		.loc 1 280 2 view .LVU6555
 25030              	.LBE3516:
 25031              	.LBE3518:
2007:src/xeq.c     **** 		if (!Running && !XromRunning) {
 25032              		.loc 1 2007 2 is_stmt 1 view .LVU6556
2007:src/xeq.c     **** 		if (!Running && !XromRunning) {
 25033              		.loc 1 2007 5 is_stmt 0 view .LVU6557
 25034 001a CDB1     		cbz	r5, .L1813
2008:src/xeq.c     **** 			// XEQ or hot key from keyboard
 25035              		.loc 1 2008 3 is_stmt 1 view .LVU6558
2008:src/xeq.c     **** 			// XEQ or hot key from keyboard
 25036              		.loc 1 2008 7 is_stmt 0 view .LVU6559
 25037 001c 1B4B     		ldr	r3, .L1828+4
2008:src/xeq.c     **** 			// XEQ or hot key from keyboard
 25038              		.loc 1 2008 19 view .LVU6560
 25039 001e 1C4A     		ldr	r2, .L1828+8
2008:src/xeq.c     **** 			// XEQ or hot key from keyboard
 25040              		.loc 1 2008 16 view .LVU6561
 25041 0020 1B68     		ldr	r3, [r3]
 25042 0022 1268     		ldr	r2, [r2]
 25043 0024 1343     		orrs	r3, r3, r2
 25044 0026 1FD0     		beq	.L1827
 25045              	.LVL1950:
 25046              	.L1817:
2016:src/xeq.c     **** 			// Stack is full
 25047              		.loc 1 2016 3 is_stmt 1 view .LVU6562
2016:src/xeq.c     **** 			// Stack is full
 25048              		.loc 1 2016 36 is_stmt 0 view .LVU6563
 25049 0028 1A4A     		ldr	r2, .L1828+12
2016:src/xeq.c     **** 			// Stack is full
 25050              		.loc 1 2016 8 view .LVU6564
 25051 002a B6F9E237 		ldrsh	r3, [r6, #2018]
2016:src/xeq.c     **** 			// Stack is full
 25052              		.loc 1 2016 58 view .LVU6565
 25053 002e 92F90120 		ldrsb	r2, [r2, #1]
 25054 0032 002A     		cmp	r2, #0
 25055 0034 A4BF     		itt	ge
 25056 0036 184A     		ldrge	r2, .L1828+16
 25057 0038 1268     		ldrge	r2, [r2]
2016:src/xeq.c     **** 			// Stack is full
 25058              		.loc 1 2016 7 view .LVU6566
 25059 003a C3F10001 		rsb	r1, r3, #0
2016:src/xeq.c     **** 			// Stack is full
 25060              		.loc 1 2016 58 view .LVU6567
 25061 003e B8BF     		it	lt
 25062 0040 8822     		movlt	r2, #136
2016:src/xeq.c     **** 			// Stack is full
 25063              		.loc 1 2016 6 view .LVU6568
 25064 0042 9142     		cmp	r1, r2
 25065 0044 06DB     		blt	.L1820
 25066              	.LBB3519:
 25067              	.LBI3519:
2004:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 25068              		.loc 1 2004 13 is_stmt 1 view .LVU6569
 25069              	.LVL1951:
 25070              	.LBB3520:
ARM GAS  /tmp/ccK8IvWa.s 			page 644


2018:src/xeq.c     **** 			// clrretstk();
 25071              		.loc 1 2018 4 view .LVU6570
 25072              	.LBB3521:
 25073              	.LBI3521:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25074              		.loc 1 523 5 view .LVU6571
 25075              	.LBB3522:
 524:src/xeq.c     **** 		Error = e;
 25076              		.loc 1 524 2 view .LVU6572
 524:src/xeq.c     **** 		Error = e;
 25077              		.loc 1 524 12 is_stmt 0 view .LVU6573
 25078 0046 154B     		ldr	r3, .L1828+20
 524:src/xeq.c     **** 		Error = e;
 25079              		.loc 1 524 5 view .LVU6574
 25080 0048 1A68     		ldr	r2, [r3]
 25081 004a 0AB9     		cbnz	r2, .L1813
 25082              	.LVL1952:
 25083              	.LBB3523:
 25084              	.LBI3523:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25085              		.loc 1 523 5 is_stmt 1 view .LVU6575
 25086              	.LBB3524:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 25087              		.loc 1 525 3 view .LVU6576
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 25088              		.loc 1 525 9 is_stmt 0 view .LVU6577
 25089 004c 0B22     		movs	r2, #11
 25090 004e 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 25091              		.loc 1 526 3 is_stmt 1 view .LVU6578
 25092              	.LVL1953:
 25093              	.L1813:
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 25094              		.loc 1 526 3 is_stmt 0 view .LVU6579
 25095              	.LBE3524:
 25096              	.LBE3523:
 25097              	.LBE3522:
 25098              	.LBE3521:
 25099              	.LBE3520:
 25100              	.LBE3519:
2026:src/xeq.c     **** 
 25101              		.loc 1 2026 1 view .LVU6580
 25102 0050 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25103              	.LVL1954:
 25104              	.L1820:
2023:src/xeq.c     **** 		}
 25105              		.loc 1 2023 4 is_stmt 1 view .LVU6581
2023:src/xeq.c     **** 		}
 25106              		.loc 1 2023 10 is_stmt 0 view .LVU6582
 25107 0054 124A     		ldr	r2, .L1828+24
2023:src/xeq.c     **** 		}
 25108              		.loc 1 2023 11 view .LVU6583
 25109 0056 013B     		subs	r3, r3, #1
 25110 0058 1BB2     		sxth	r3, r3
2023:src/xeq.c     **** 		}
 25111              		.loc 1 2023 10 view .LVU6584
 25112 005a 1268     		ldr	r2, [r2]
ARM GAS  /tmp/ccK8IvWa.s 			page 645


2023:src/xeq.c     **** 		}
 25113              		.loc 1 2023 24 view .LVU6585
 25114 005c A6F8E237 		strh	r3, [r6, #2018]	@ movhi
 25115 0060 22F81370 		strh	r7, [r2, r3, lsl #1]	@ movhi
2026:src/xeq.c     **** 
 25116              		.loc 1 2026 1 view .LVU6586
 25117 0064 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25118              	.LVL1955:
 25119              	.L1827:
2010:src/xeq.c     **** 			set_running_on();
 25120              		.loc 1 2010 4 is_stmt 1 view .LVU6587
 25121              	.LBB3525:
 25122              	.LBI3525:
1395:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 25123              		.loc 1 1395 6 view .LVU6588
 25124              	.LBB3526:
1396:src/xeq.c     **** }
 25125              		.loc 1 1396 2 view .LVU6589
1396:src/xeq.c     **** }
 25126              		.loc 1 1396 24 is_stmt 0 view .LVU6590
 25127 0068 A6F8DE37 		strh	r3, [r6, #2014]	@ movhi
1396:src/xeq.c     **** }
 25128              		.loc 1 1396 12 view .LVU6591
 25129 006c A6F8E237 		strh	r3, [r6, #2018]	@ movhi
 25130              	.LBE3526:
 25131              	.LBE3525:
2011:src/xeq.c     **** 			if (! isXROM(pc) && ProgBegin != old_begin)
 25132              		.loc 1 2011 4 is_stmt 1 view .LVU6592
 25133 0070 FFF7FEFF 		bl	set_running_on
 25134              	.LVL1956:
2012:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25135              		.loc 1 2012 4 view .LVU6593
2012:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25136              		.loc 1 2012 10 is_stmt 0 view .LVU6594
 25137 0074 A30B     		lsrs	r3, r4, #14
2012:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25138              		.loc 1 2012 7 view .LVU6595
 25139 0076 032B     		cmp	r3, #3
 25140 0078 D6D0     		beq	.L1817
2012:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25141              		.loc 1 2012 21 discriminator 1 view .LVU6596
 25142 007a B6F8EC37 		ldrh	r3, [r6, #2028]
 25143 007e 4345     		cmp	r3, r8
 25144 0080 18BF     		it	ne
 25145 0082 2746     		movne	r7, r4
 25146              	.LVL1957:
2012:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25147              		.loc 1 2012 21 discriminator 1 view .LVU6597
 25148 0084 D0E7     		b	.L1817
 25149              	.L1829:
 25150 0086 00BF     		.align	2
 25151              	.L1828:
 25152 0088 00000000 		.word	PersistentRam
 25153 008c 00000000 		.word	Running
 25154 0090 00000000 		.word	XromRunning
 25155 0094 00000000 		.word	XromParams
 25156 0098 00000000 		.word	RetStkSize
ARM GAS  /tmp/ccK8IvWa.s 			page 646


 25157 009c 00000000 		.word	Error
 25158 00a0 00000000 		.word	RetStk
 25159              		.cfi_endproc
 25160              	.LFE148:
 25162              		.section	.text.cmdgtocommon,"ax",%progbits
 25163              		.align	1
 25164              		.p2align 2,,3
 25165              		.global	cmdgtocommon
 25166              		.syntax unified
 25167              		.thumb
 25168              		.thumb_func
 25169              		.fpu fpv4-sp-d16
 25171              	cmdgtocommon:
 25172              	.LVL1958:
 25173              	.LFB151:
2066:src/xeq.c     **** 	if (pc == 0)
 25174              		.loc 1 2066 45 is_stmt 1 view -0
 25175              		.cfi_startproc
 25176              		@ args = 0, pretend = 0, frame = 0
 25177              		@ frame_needed = 0, uses_anonymous_args = 0
 25178              		@ link register save eliminated.
2067:src/xeq.c     **** 		set_running_off();
 25179              		.loc 1 2067 2 view .LVU6599
2067:src/xeq.c     **** 		set_running_off();
 25180              		.loc 1 2067 5 is_stmt 0 view .LVU6600
 25181 0000 0B46     		mov	r3, r1
 25182 0002 71B9     		cbnz	r1, .L1831
 25183              	.LBB3539:
 25184              	.LBI3539:
2029:src/xeq.c     **** 	unsigned short pc;
 25185              		.loc 1 2029 13 is_stmt 1 view .LVU6601
 25186              	.LVL1959:
 25187              	.LBB3540:
2050:src/xeq.c     **** 	}
 25188              		.loc 1 2050 3 view .LVU6602
 25189              	.LBB3541:
 25190              	.LBI3541:
5560:src/xeq.c     **** 	set_running_off_sst();
 25191              		.loc 1 5560 6 view .LVU6603
 25192              	.LBB3542:
5561:src/xeq.c     **** 	State.entryp = 0;
 25193              		.loc 1 5561 2 view .LVU6604
 25194              	.LBB3543:
 25195              	.LBI3543:
5552:src/xeq.c     **** 	Running = 0;
 25196              		.loc 1 5552 6 view .LVU6605
 25197              	.LBB3544:
5553:src/xeq.c     **** }
 25198              		.loc 1 5553 2 view .LVU6606
 25199              	.LBE3544:
 25200              	.LBE3543:
 25201              	.LBE3542:
 25202              	.LBE3541:
 25203              	.LBE3540:
 25204              	.LBE3539:
2066:src/xeq.c     **** 	if (pc == 0)
 25205              		.loc 1 2066 45 is_stmt 0 view .LVU6607
ARM GAS  /tmp/ccK8IvWa.s 			page 647


 25206 0004 10B4     		push	{r4}
 25207              		.cfi_def_cfa_offset 4
 25208              		.cfi_offset 4, -4
 25209              	.LBB3555:
 25210              	.LBB3553:
 25211              	.LBB3551:
 25212              	.LBB3549:
5562:src/xeq.c     **** 	dot( RCL_annun, 0);
 25213              		.loc 1 5562 15 view .LVU6608
 25214 0006 0A4A     		ldr	r2, .L1835
 25215              	.LBB3547:
 25216              	.LBB3545:
5553:src/xeq.c     **** }
 25217              		.loc 1 5553 10 view .LVU6609
 25218 0008 0A48     		ldr	r0, .L1835+4
 25219              	.LVL1960:
5553:src/xeq.c     **** }
 25220              		.loc 1 5553 10 view .LVU6610
 25221              	.LBE3545:
 25222              	.LBE3547:
5562:src/xeq.c     **** 	dot( RCL_annun, 0);
 25223              		.loc 1 5562 15 view .LVU6611
 25224 000a 92F8DD47 		ldrb	r4, [r2, #2013]	@ zero_extendqisi2
 25225              	.LBB3548:
 25226              	.LBB3546:
5553:src/xeq.c     **** }
 25227              		.loc 1 5553 10 view .LVU6612
 25228 000e 0160     		str	r1, [r0]
 25229              	.LBE3546:
 25230              	.LBE3548:
5562:src/xeq.c     **** 	dot( RCL_annun, 0);
 25231              		.loc 1 5562 2 is_stmt 1 view .LVU6613
5562:src/xeq.c     **** 	dot( RCL_annun, 0);
 25232              		.loc 1 5562 15 is_stmt 0 view .LVU6614
 25233 0010 61F30414 		bfi	r4, r1, #4, #1
 25234              	.LVL1961:
5562:src/xeq.c     **** 	dot( RCL_annun, 0);
 25235              		.loc 1 5562 15 view .LVU6615
 25236 0014 82F8DD47 		strb	r4, [r2, #2013]
5563:src/xeq.c     **** }
 25237              		.loc 1 5563 2 is_stmt 1 view .LVU6616
 25238              	.LBE3549:
 25239              	.LBE3551:
 25240              	.LBE3553:
 25241              	.LBE3555:
2071:src/xeq.c     **** 
 25242              		.loc 1 2071 1 is_stmt 0 view .LVU6617
 25243 0018 5DF8044B 		ldr	r4, [sp], #4
 25244              		.cfi_restore 4
 25245              		.cfi_def_cfa_offset 0
 25246              	.LBB3556:
 25247              	.LBB3554:
 25248              	.LBB3552:
 25249              	.LBB3550:
5563:src/xeq.c     **** }
 25250              		.loc 1 5563 2 view .LVU6618
 25251 001c 8A20     		movs	r0, #138
ARM GAS  /tmp/ccK8IvWa.s 			page 648


 25252 001e FFF7FEBF 		b	dot
 25253              	.LVL1962:
 25254              	.L1831:
5563:src/xeq.c     **** }
 25255              		.loc 1 5563 2 view .LVU6619
 25256              	.LBE3550:
 25257              	.LBE3552:
 25258              	.LBE3554:
 25259              	.LBE3556:
2070:src/xeq.c     **** }
 25260              		.loc 1 2070 3 is_stmt 1 view .LVU6620
2070:src/xeq.c     **** }
 25261              		.loc 1 2070 19 is_stmt 0 view .LVU6621
 25262 0022 034A     		ldr	r2, .L1835
2070:src/xeq.c     **** }
 25263              		.loc 1 2070 3 view .LVU6622
 25264 0024 0146     		mov	r1, r0
 25265              	.LVL1963:
2070:src/xeq.c     **** }
 25266              		.loc 1 2070 3 view .LVU6623
 25267 0026 B2F8E027 		ldrh	r2, [r2, #2016]
 25268 002a 1846     		mov	r0, r3
 25269              	.LVL1964:
2070:src/xeq.c     **** }
 25270              		.loc 1 2070 3 view .LVU6624
 25271 002c FFF7FEBF 		b	gsbgto
 25272              	.LVL1965:
 25273              	.L1836:
2070:src/xeq.c     **** }
 25274              		.loc 1 2070 3 view .LVU6625
 25275              		.align	2
 25276              	.L1835:
 25277 0030 00000000 		.word	PersistentRam
 25278 0034 00000000 		.word	Running
 25279              		.cfi_endproc
 25280              	.LFE151:
 25282              		.section	.text.cmdgto,"ax",%progbits
 25283              		.align	1
 25284              		.p2align 2,,3
 25285              		.global	cmdgto
 25286              		.syntax unified
 25287              		.thumb
 25288              		.thumb_func
 25289              		.fpu fpv4-sp-d16
 25291              	cmdgto:
 25292              	.LVL1966:
 25293              	.LFB157:
2126:src/xeq.c     **** 	unsigned int lbl;
 25294              		.loc 1 2126 45 is_stmt 1 view -0
 25295              		.cfi_startproc
 25296              		@ args = 0, pretend = 0, frame = 0
 25297              		@ frame_needed = 0, uses_anonymous_args = 0
2127:src/xeq.c     **** 	if (is_xrom())
 25298              		.loc 1 2127 2 view .LVU6627
2128:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
 25299              		.loc 1 2128 2 view .LVU6628
 25300              	.LBB3557:
ARM GAS  /tmp/ccK8IvWa.s 			page 649


 25301              	.LBI3557:
 181:src/xeq.c     **** 	return isXROM(state_pc());
 25302              		.loc 1 181 5 view .LVU6629
 25303              	.LBB3558:
 182:src/xeq.c     **** }
 25304              		.loc 1 182 2 view .LVU6630
 182:src/xeq.c     **** }
 25305              		.loc 1 182 9 is_stmt 0 view .LVU6631
 25306 0000 0E4B     		ldr	r3, .L1841
 25307 0002 B3F8E037 		ldrh	r3, [r3, #2016]
 25308              	.LBE3558:
 25309              	.LBE3557:
2128:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
 25310              		.loc 1 2128 5 view .LVU6632
 25311 0006 9A0B     		lsrs	r2, r3, #14
 25312 0008 032A     		cmp	r2, #3
2126:src/xeq.c     **** 	unsigned int lbl;
 25313              		.loc 1 2126 45 view .LVU6633
 25314 000a 10B5     		push	{r4, lr}
 25315              		.cfi_def_cfa_offset 8
 25316              		.cfi_offset 4, -8
 25317              		.cfi_offset 14, -4
2126:src/xeq.c     **** 	unsigned int lbl;
 25318              		.loc 1 2126 45 view .LVU6634
 25319 000c 0C46     		mov	r4, r1
2128:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
 25320              		.loc 1 2128 5 view .LVU6635
 25321 000e 0CD1     		bne	.L1838
2129:src/xeq.c     **** 	else
 25322              		.loc 1 2129 3 is_stmt 1 view .LVU6636
2129:src/xeq.c     **** 	else
 25323              		.loc 1 2129 9 is_stmt 0 view .LVU6637
 25324 0010 0B4B     		ldr	r3, .L1841+4
2129:src/xeq.c     **** 	else
 25325              		.loc 1 2129 37 view .LVU6638
 25326 0012 33F81010 		ldrh	r1, [r3, r0, lsl #1]
 25327              	.LVL1967:
2129:src/xeq.c     **** 	else
 25328              		.loc 1 2129 7 view .LVU6639
 25329 0016 41F44041 		orr	r1, r1, #49152
 25330              	.LVL1968:
 25331              	.L1839:
2132:src/xeq.c     **** }
 25332              		.loc 1 2132 2 is_stmt 1 view .LVU6640
 25333 001a B4F14500 		subs	r0, r4, #69
 25334 001e 18BF     		it	ne
 25335 0020 0120     		movne	r0, #1
2133:src/xeq.c     **** 
 25336              		.loc 1 2133 1 is_stmt 0 view .LVU6641
 25337 0022 BDE81040 		pop	{r4, lr}
 25338              		.cfi_remember_state
 25339              		.cfi_restore 14
 25340              		.cfi_restore 4
 25341              		.cfi_def_cfa_offset 0
2132:src/xeq.c     **** }
 25342              		.loc 1 2132 2 view .LVU6642
 25343 0026 FFF7FEBF 		b	cmdgtocommon
ARM GAS  /tmp/ccK8IvWa.s 			page 650


 25344              	.LVL1969:
 25345              	.L1838:
 25346              		.cfi_restore_state
2131:src/xeq.c     **** 	cmdgtocommon(op != RARG_GTO, lbl);
 25347              		.loc 1 2131 3 is_stmt 1 view .LVU6643
 25348              	.LBB3559:
 25349              	.LBI3559:
1996:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 25350              		.loc 1 1996 14 view .LVU6644
 25351              	.LBB3560:
1997:src/xeq.c     **** }
 25352              		.loc 1 1997 2 view .LVU6645
1997:src/xeq.c     **** }
 25353              		.loc 1 1997 9 is_stmt 0 view .LVU6646
 25354 002a 40F4C441 		orr	r1, r0, #25088
 25355              	.LVL1970:
1997:src/xeq.c     **** }
 25356              		.loc 1 1997 9 view .LVU6647
 25357 002e 0322     		movs	r2, #3
 25358 0030 1846     		mov	r0, r3
 25359              	.LVL1971:
1997:src/xeq.c     **** }
 25360              		.loc 1 1997 9 view .LVU6648
 25361 0032 FFF7FEFF 		bl	find_opcode_from
 25362              	.LVL1972:
1997:src/xeq.c     **** }
 25363              		.loc 1 1997 9 view .LVU6649
 25364 0036 0146     		mov	r1, r0
 25365              	.LVL1973:
1997:src/xeq.c     **** }
 25366              		.loc 1 1997 9 view .LVU6650
 25367 0038 EFE7     		b	.L1839
 25368              	.L1842:
 25369 003a 00BF     		.align	2
 25370              	.L1841:
 25371 003c 00000000 		.word	PersistentRam
 25372 0040 00000000 		.word	.LANCHOR6
 25373              	.LBE3560:
 25374              	.LBE3559:
 25375              		.cfi_endproc
 25376              	.LFE157:
 25378              		.section	.text.branchtoalpha,"ax",%progbits
 25379              		.align	1
 25380              		.p2align 2,,3
 25381              		.syntax unified
 25382              		.thumb
 25383              		.thumb_func
 25384              		.fpu fpv4-sp-d16
 25386              	branchtoalpha:
 25387              	.LVL1974:
 25388              	.LFB161:
2168:src/xeq.c     **** 	unsigned int op;
 25389              		.loc 1 2168 51 is_stmt 1 view -0
 25390              		.cfi_startproc
 25391              		@ args = 0, pretend = 0, frame = 0
 25392              		@ frame_needed = 0, uses_anonymous_args = 0
2169:src/xeq.c     **** 
ARM GAS  /tmp/ccK8IvWa.s 			page 651


 25393              		.loc 1 2169 2 view .LVU6652
2171:src/xeq.c     **** 	op |= buf[0] & 0xff;
 25394              		.loc 1 2171 2 view .LVU6653
2172:src/xeq.c     **** 	op |= (buf[1] & 0xff) << 16;
 25395              		.loc 1 2172 2 view .LVU6654
2173:src/xeq.c     **** 	op |= (buf[2] & 0xff) << 24;
 25396              		.loc 1 2173 2 view .LVU6655
2174:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 25397              		.loc 1 2174 2 view .LVU6656
2175:src/xeq.c     **** }
 25398              		.loc 1 2175 2 view .LVU6657
2168:src/xeq.c     **** 	unsigned int op;
 25399              		.loc 1 2168 51 is_stmt 0 view .LVU6658
 25400 0000 10B5     		push	{r4, lr}
 25401              		.cfi_def_cfa_offset 8
 25402              		.cfi_offset 4, -8
 25403              		.cfi_offset 14, -4
2174:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 25404              		.loc 1 2174 16 view .LVU6659
 25405 0002 8B78     		ldrb	r3, [r1, #2]	@ zero_extendqisi2
2173:src/xeq.c     **** 	op |= (buf[2] & 0xff) << 24;
 25406              		.loc 1 2173 16 view .LVU6660
 25407 0004 4C78     		ldrb	r4, [r1, #1]	@ zero_extendqisi2
2172:src/xeq.c     **** 	op |= (buf[1] & 0xff) << 16;
 25408              		.loc 1 2172 15 view .LVU6661
 25409 0006 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
2174:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 25410              		.loc 1 2174 24 view .LVU6662
 25411 0008 1B06     		lsls	r3, r3, #24
2174:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 25412              		.loc 1 2174 5 view .LVU6663
 25413 000a 43EA0443 		orr	r3, r3, r4, lsl #16
 25414 000e 1343     		orrs	r3, r3, r2
2168:src/xeq.c     **** 	unsigned int op;
 25415              		.loc 1 2168 51 view .LVU6664
 25416 0010 0446     		mov	r4, r0
2175:src/xeq.c     **** }
 25417              		.loc 1 2175 2 view .LVU6665
 25418 0012 0121     		movs	r1, #1
 25419              	.LVL1975:
2175:src/xeq.c     **** }
 25420              		.loc 1 2175 2 view .LVU6666
 25421 0014 43F47040 		orr	r0, r3, #61440
 25422              	.LVL1976:
2175:src/xeq.c     **** }
 25423              		.loc 1 2175 2 view .LVU6667
 25424 0018 FFF7FEFF 		bl	findmultilbl
 25425              	.LVL1977:
2175:src/xeq.c     **** }
 25426              		.loc 1 2175 2 view .LVU6668
 25427 001c 0146     		mov	r1, r0
 25428 001e 2046     		mov	r0, r4
2176:src/xeq.c     **** 
 25429              		.loc 1 2176 1 view .LVU6669
 25430 0020 BDE81040 		pop	{r4, lr}
 25431              		.cfi_restore 14
 25432              		.cfi_restore 4
ARM GAS  /tmp/ccK8IvWa.s 			page 652


 25433              		.cfi_def_cfa_offset 0
 25434              	.LVL1978:
2175:src/xeq.c     **** }
 25435              		.loc 1 2175 2 view .LVU6670
 25436 0024 FFF7FEBF 		b	cmdgtocommon
 25437              	.LVL1979:
2175:src/xeq.c     **** }
 25438              		.loc 1 2175 2 view .LVU6671
 25439              		.cfi_endproc
 25440              	.LFE161:
 25442              		.section	.text.cmdalphagto,"ax",%progbits
 25443              		.align	1
 25444              		.p2align 2,,3
 25445              		.global	cmdalphagto
 25446              		.syntax unified
 25447              		.thumb
 25448              		.thumb_func
 25449              		.fpu fpv4-sp-d16
 25451              	cmdalphagto:
 25452              	.LVL1980:
 25453              	.LFB162:
2178:src/xeq.c     **** 	char buf[14];
 25454              		.loc 1 2178 50 is_stmt 1 view -0
 25455              		.cfi_startproc
 25456              		@ args = 0, pretend = 0, frame = 16
 25457              		@ frame_needed = 0, uses_anonymous_args = 0
2179:src/xeq.c     **** 
 25458              		.loc 1 2179 2 view .LVU6673
2181:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 25459              		.loc 1 2181 2 view .LVU6674
2178:src/xeq.c     **** 	char buf[14];
 25460              		.loc 1 2178 50 is_stmt 0 view .LVU6675
 25461 0000 30B5     		push	{r4, r5, lr}
 25462              		.cfi_def_cfa_offset 12
 25463              		.cfi_offset 4, -12
 25464              		.cfi_offset 5, -8
 25465              		.cfi_offset 14, -4
 25466 0002 85B0     		sub	sp, sp, #20
 25467              		.cfi_def_cfa_offset 32
2181:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 25468              		.loc 1 2181 2 view .LVU6676
 25469 0004 0E22     		movs	r2, #14
2178:src/xeq.c     **** 	char buf[14];
 25470              		.loc 1 2178 50 view .LVU6677
 25471 0006 0546     		mov	r5, r0
 25472 0008 0C46     		mov	r4, r1
2181:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 25473              		.loc 1 2181 2 view .LVU6678
 25474 000a 6846     		mov	r0, sp
 25475              	.LVL1981:
2181:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 25476              		.loc 1 2181 2 view .LVU6679
 25477 000c 0021     		movs	r1, #0
 25478              	.LVL1982:
2181:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 25479              		.loc 1 2181 2 view .LVU6680
 25480 000e FFF7FEFF 		bl	xset
ARM GAS  /tmp/ccK8IvWa.s 			page 653


 25481              	.LVL1983:
2182:src/xeq.c     **** }
 25482              		.loc 1 2182 2 is_stmt 1 view .LVU6681
 25483 0012 6946     		mov	r1, sp
 25484 0014 2846     		mov	r0, r5
 25485 0016 FFF7FEFF 		bl	alpha_rcl_s
 25486              	.LVL1984:
 25487 001a 0146     		mov	r1, r0
 25488 001c B4F17000 		subs	r0, r4, #112
 25489 0020 18BF     		it	ne
 25490 0022 0120     		movne	r0, #1
 25491 0024 FFF7FEFF 		bl	branchtoalpha
 25492              	.LVL1985:
2183:src/xeq.c     **** 
 25493              		.loc 1 2183 1 is_stmt 0 view .LVU6682
 25494 0028 05B0     		add	sp, sp, #20
 25495              		.cfi_def_cfa_offset 12
 25496              		@ sp needed
 25497 002a 30BD     		pop	{r4, r5, pc}
2183:src/xeq.c     **** 
 25498              		.loc 1 2183 1 view .LVU6683
 25499              		.cfi_endproc
 25500              	.LFE162:
 25502              		.section	.text.op_gtoalpha,"ax",%progbits
 25503              		.align	1
 25504              		.p2align 2,,3
 25505              		.global	op_gtoalpha
 25506              		.syntax unified
 25507              		.thumb
 25508              		.thumb_func
 25509              		.fpu fpv4-sp-d16
 25511              	op_gtoalpha:
 25512              	.LVL1986:
 25513              	.LFB164:
2193:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 25514              		.loc 1 2193 33 is_stmt 1 view -0
 25515              		.cfi_startproc
 25516              		@ args = 0, pretend = 0, frame = 8
 25517              		@ frame_needed = 0, uses_anonymous_args = 0
2194:src/xeq.c     **** }
 25518              		.loc 1 2194 2 view .LVU6685
2193:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 25519              		.loc 1 2193 33 is_stmt 0 view .LVU6686
 25520 0000 10B5     		push	{r4, lr}
 25521              		.cfi_def_cfa_offset 8
 25522              		.cfi_offset 4, -8
 25523              		.cfi_offset 14, -4
 25524 0002 82B0     		sub	sp, sp, #8
 25525              		.cfi_def_cfa_offset 16
2193:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 25526              		.loc 1 2193 33 view .LVU6687
 25527 0004 0446     		mov	r4, r0
 25528              	.LVL1987:
 25529              	.LBB3563:
 25530              	.LBI3563:
2185:src/xeq.c     **** 	char buf[4];
 25531              		.loc 1 2185 13 is_stmt 1 view .LVU6688
ARM GAS  /tmp/ccK8IvWa.s 			page 654


 25532              	.LBB3564:
2186:src/xeq.c     **** 
 25533              		.loc 1 2186 2 view .LVU6689
2188:src/xeq.c     **** 	buf[3] = '\0';
 25534              		.loc 1 2188 2 view .LVU6690
 25535 0006 0322     		movs	r2, #3
 25536 0008 0849     		ldr	r1, .L1849
 25537 000a 01A8     		add	r0, sp, #4
 25538              	.LVL1988:
2188:src/xeq.c     **** 	buf[3] = '\0';
 25539              		.loc 1 2188 2 is_stmt 0 view .LVU6691
 25540 000c FFF7FEFF 		bl	xcopy
 25541              	.LVL1989:
2189:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
 25542              		.loc 1 2189 2 is_stmt 1 view .LVU6692
2190:src/xeq.c     **** }
 25543              		.loc 1 2190 2 is_stmt 0 view .LVU6693
 25544 0010 B4F19800 		subs	r0, r4, #152
2189:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
 25545              		.loc 1 2189 9 view .LVU6694
 25546 0014 4FF00003 		mov	r3, #0
2190:src/xeq.c     **** }
 25547              		.loc 1 2190 2 view .LVU6695
 25548 0018 18BF     		it	ne
 25549 001a 0120     		movne	r0, #1
 25550 001c 01A9     		add	r1, sp, #4
2189:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
 25551              		.loc 1 2189 9 view .LVU6696
 25552 001e 8DF80730 		strb	r3, [sp, #7]
2190:src/xeq.c     **** }
 25553              		.loc 1 2190 2 is_stmt 1 view .LVU6697
 25554 0022 FFF7FEFF 		bl	branchtoalpha
 25555              	.LVL1990:
2190:src/xeq.c     **** }
 25556              		.loc 1 2190 2 is_stmt 0 view .LVU6698
 25557              	.LBE3564:
 25558              	.LBE3563:
2195:src/xeq.c     **** 
 25559              		.loc 1 2195 1 view .LVU6699
 25560 0026 02B0     		add	sp, sp, #8
 25561              		.cfi_def_cfa_offset 8
 25562              		@ sp needed
 25563 0028 10BD     		pop	{r4, pc}
 25564              	.L1850:
 25565 002a 00BF     		.align	2
 25566              	.L1849:
 25567 002c B0070000 		.word	PersistentRam+1968
 25568              		.cfi_endproc
 25569              	.LFE164:
 25571              		.section	.text.cmdskip,"ax",%progbits
 25572              		.align	1
 25573              		.p2align 2,,3
 25574              		.global	cmdskip
 25575              		.syntax unified
 25576              		.thumb
 25577              		.thumb_func
 25578              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccK8IvWa.s 			page 655


 25580              	cmdskip:
 25581              	.LVL1991:
 25582              	.LFB175:
2342:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 25583              		.loc 1 2342 46 is_stmt 1 view -0
 25584              		.cfi_startproc
 25585              		@ args = 0, pretend = 0, frame = 8
 25586              		@ frame_needed = 0, uses_anonymous_args = 0
2343:src/xeq.c     **** 	unsigned int pc;
 25587              		.loc 1 2343 2 view .LVU6701
2342:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 25588              		.loc 1 2342 46 is_stmt 0 view .LVU6702
 25589 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 25590              		.cfi_def_cfa_offset 20
 25591              		.cfi_offset 4, -20
 25592              		.cfi_offset 5, -16
 25593              		.cfi_offset 6, -12
 25594              		.cfi_offset 7, -8
 25595              		.cfi_offset 14, -4
2343:src/xeq.c     **** 	unsigned int pc;
 25596              		.loc 1 2343 30 view .LVU6703
 25597 0002 1C4F     		ldr	r7, .L1875
2346:src/xeq.c     **** 		int sgn;
 25598              		.loc 1 2346 5 view .LVU6704
 25599 0004 9A29     		cmp	r1, #154
2343:src/xeq.c     **** 	unsigned int pc;
 25600              		.loc 1 2343 21 view .LVU6705
 25601 0006 B7F8E067 		ldrh	r6, [r7, #2016]
 25602              	.LVL1992:
2344:src/xeq.c     **** 
 25603              		.loc 1 2344 2 is_stmt 1 view .LVU6706
2346:src/xeq.c     **** 		int sgn;
 25604              		.loc 1 2346 2 view .LVU6707
2342:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 25605              		.loc 1 2342 46 is_stmt 0 view .LVU6708
 25606 000a 83B0     		sub	sp, sp, #12
 25607              		.cfi_def_cfa_offset 32
2342:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 25608              		.loc 1 2342 46 view .LVU6709
 25609 000c 0D46     		mov	r5, r1
2346:src/xeq.c     **** 		int sgn;
 25610              		.loc 1 2346 5 view .LVU6710
 25611 000e 21D0     		beq	.L1872
 25612 0010 0446     		mov	r4, r0
 25613              	.LVL1993:
 25614              	.L1852:
2355:src/xeq.c     **** 		pc = origpc + arg;
 25615              		.loc 1 2355 2 is_stmt 1 view .LVU6711
2355:src/xeq.c     **** 		pc = origpc + arg;
 25616              		.loc 1 2355 6 is_stmt 0 view .LVU6712
 25617 0012 B30B     		lsrs	r3, r6, #14
2355:src/xeq.c     **** 		pc = origpc + arg;
 25618              		.loc 1 2355 5 view .LVU6713
 25619 0014 032B     		cmp	r3, #3
 25620 0016 14D0     		beq	.L1873
 25621              	.LVL1994:
 25622              	.L1857:
ARM GAS  /tmp/ccK8IvWa.s 			page 656


2358:src/xeq.c     **** 		if (PcWrapped) {
 25623              		.loc 1 2358 28 is_stmt 1 discriminator 2 view .LVU6714
2358:src/xeq.c     **** 		if (PcWrapped) {
 25624              		.loc 1 2358 9 discriminator 2 view .LVU6715
2358:src/xeq.c     **** 		if (PcWrapped) {
 25625              		.loc 1 2358 9 is_stmt 0 discriminator 2 view .LVU6716
 25626 0018 24B1     		cbz	r4, .L1859
2358:src/xeq.c     **** 		if (PcWrapped) {
 25627              		.loc 1 2358 20 discriminator 1 view .LVU6717
 25628 001a FFF7FEFF 		bl	incpc
 25629              	.LVL1995:
 25630 001e 013C     		subs	r4, r4, #1
 25631              	.LVL1996:
2358:src/xeq.c     **** 		if (PcWrapped) {
 25632              		.loc 1 2358 16 discriminator 1 view .LVU6718
 25633 0020 0028     		cmp	r0, #0
 25634 0022 F9D0     		beq	.L1857
 25635              	.LVL1997:
 25636              	.L1859:
2359:src/xeq.c     **** 			report_err(ERR_RANGE);
 25637              		.loc 1 2359 3 is_stmt 1 view .LVU6719
2359:src/xeq.c     **** 			report_err(ERR_RANGE);
 25638              		.loc 1 2359 7 is_stmt 0 view .LVU6720
 25639 0024 144B     		ldr	r3, .L1875+4
2359:src/xeq.c     **** 			report_err(ERR_RANGE);
 25640              		.loc 1 2359 6 view .LVU6721
 25641 0026 1B68     		ldr	r3, [r3]
 25642 0028 6BB9     		cbnz	r3, .L1874
 25643              	.L1860:
2362:src/xeq.c     **** 	}
 25644              		.loc 1 2362 3 is_stmt 1 view .LVU6722
2362:src/xeq.c     **** 	}
 25645              		.loc 1 2362 6 is_stmt 0 view .LVU6723
 25646 002a B7F8E007 		ldrh	r0, [r7, #2016]
 25647              	.LVL1998:
 25648              	.L1858:
2364:src/xeq.c     **** }
 25649              		.loc 1 2364 2 is_stmt 1 view .LVU6724
 25650 002e A5F13801 		sub	r1, r5, #56
 25651 0032 B1FA81F1 		clz	r1, r1
 25652 0036 3246     		mov	r2, r6
 25653 0038 4909     		lsrs	r1, r1, #5
 25654 003a FFF7FEFF 		bl	gsbgto
 25655              	.LVL1999:
 25656              	.L1851:
2365:src/xeq.c     **** 
 25657              		.loc 1 2365 1 is_stmt 0 view .LVU6725
 25658 003e 03B0     		add	sp, sp, #12
 25659              		.cfi_remember_state
 25660              		.cfi_def_cfa_offset 20
 25661              		@ sp needed
 25662 0040 F0BD     		pop	{r4, r5, r6, r7, pc}
 25663              	.LVL2000:
 25664              	.L1873:
 25665              		.cfi_restore_state
2356:src/xeq.c     **** 	else {
 25666              		.loc 1 2356 3 is_stmt 1 view .LVU6726
ARM GAS  /tmp/ccK8IvWa.s 			page 657


2356:src/xeq.c     **** 	else {
 25667              		.loc 1 2356 6 is_stmt 0 view .LVU6727
 25668 0042 A019     		adds	r0, r4, r6
 25669              	.LVL2001:
2356:src/xeq.c     **** 	else {
 25670              		.loc 1 2356 6 view .LVU6728
 25671 0044 F3E7     		b	.L1858
 25672              	.LVL2002:
 25673              	.L1874:
2360:src/xeq.c     **** 		}
 25674              		.loc 1 2360 4 is_stmt 1 view .LVU6729
 25675              	.LBB3574:
 25676              	.LBI3574:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25677              		.loc 1 523 5 view .LVU6730
 25678              	.LBB3575:
 524:src/xeq.c     **** 		Error = e;
 25679              		.loc 1 524 2 view .LVU6731
 524:src/xeq.c     **** 		Error = e;
 25680              		.loc 1 524 12 is_stmt 0 view .LVU6732
 25681 0046 0D4B     		ldr	r3, .L1875+8
 524:src/xeq.c     **** 		Error = e;
 25682              		.loc 1 524 5 view .LVU6733
 25683 0048 1A68     		ldr	r2, [r3]
 25684 004a 002A     		cmp	r2, #0
 25685 004c EDD1     		bne	.L1860
 25686              	.LVL2003:
 25687              	.LBB3576:
 25688              	.LBI3576:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25689              		.loc 1 523 5 is_stmt 1 view .LVU6734
 25690              	.LBB3577:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 25691              		.loc 1 525 3 view .LVU6735
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 25692              		.loc 1 525 9 is_stmt 0 view .LVU6736
 25693 004e 0822     		movs	r2, #8
 25694 0050 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 25695              		.loc 1 526 3 is_stmt 1 view .LVU6737
 25696 0052 EAE7     		b	.L1860
 25697              	.LVL2004:
 25698              	.L1872:
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 25699              		.loc 1 526 3 is_stmt 0 view .LVU6738
 25700              	.LBE3577:
 25701              	.LBE3576:
 25702              	.LBE3575:
 25703              	.LBE3574:
 25704              	.LBB3578:
2347:src/xeq.c     **** 		arg = (int) get_reg_n_int_sgn((int) arg, &sgn);
 25705              		.loc 1 2347 3 is_stmt 1 view .LVU6739
2348:src/xeq.c     **** 		if (sgn || arg >= 100) {
 25706              		.loc 1 2348 3 view .LVU6740
2348:src/xeq.c     **** 		if (sgn || arg >= 100) {
 25707              		.loc 1 2348 15 is_stmt 0 view .LVU6741
 25708 0054 01A9     		add	r1, sp, #4
ARM GAS  /tmp/ccK8IvWa.s 			page 658


 25709              	.LVL2005:
2348:src/xeq.c     **** 		if (sgn || arg >= 100) {
 25710              		.loc 1 2348 15 view .LVU6742
 25711 0056 FFF7FEFF 		bl	get_reg_n_int_sgn
 25712              	.LVL2006:
2349:src/xeq.c     **** 			report_err(ERR_RANGE);
 25713              		.loc 1 2349 6 view .LVU6743
 25714 005a 019B     		ldr	r3, [sp, #4]
 25715              	.LVL2007:
2349:src/xeq.c     **** 			report_err(ERR_RANGE);
 25716              		.loc 1 2349 3 is_stmt 1 view .LVU6744
2349:src/xeq.c     **** 			report_err(ERR_RANGE);
 25717              		.loc 1 2349 6 is_stmt 0 view .LVU6745
 25718 005c 13B9     		cbnz	r3, .L1853
2349:src/xeq.c     **** 			report_err(ERR_RANGE);
 25719              		.loc 1 2349 11 discriminator 1 view .LVU6746
 25720 005e 6328     		cmp	r0, #99
2348:src/xeq.c     **** 		if (sgn || arg >= 100) {
 25721              		.loc 1 2348 7 discriminator 1 view .LVU6747
 25722 0060 0446     		mov	r4, r0
2349:src/xeq.c     **** 			report_err(ERR_RANGE);
 25723              		.loc 1 2349 11 discriminator 1 view .LVU6748
 25724 0062 D6D9     		bls	.L1852
 25725              	.L1853:
2350:src/xeq.c     **** 			return;
 25726              		.loc 1 2350 4 is_stmt 1 view .LVU6749
 25727              	.LVL2008:
 25728              	.LBB3579:
 25729              	.LBI3579:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25730              		.loc 1 523 5 view .LVU6750
 25731              	.LBB3580:
 524:src/xeq.c     **** 		Error = e;
 25732              		.loc 1 524 2 view .LVU6751
 524:src/xeq.c     **** 		Error = e;
 25733              		.loc 1 524 12 is_stmt 0 view .LVU6752
 25734 0064 054B     		ldr	r3, .L1875+8
 524:src/xeq.c     **** 		Error = e;
 25735              		.loc 1 524 5 view .LVU6753
 25736 0066 1A68     		ldr	r2, [r3]
 25737 0068 002A     		cmp	r2, #0
 25738 006a E8D1     		bne	.L1851
 25739              	.LVL2009:
 25740              	.LBB3581:
 25741              	.LBI3581:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25742              		.loc 1 523 5 is_stmt 1 view .LVU6754
 25743              	.LBB3582:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 25744              		.loc 1 525 3 view .LVU6755
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 25745              		.loc 1 525 9 is_stmt 0 view .LVU6756
 25746 006c 0822     		movs	r2, #8
 25747 006e 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 25748              		.loc 1 526 3 is_stmt 1 view .LVU6757
 25749              	.LVL2010:
ARM GAS  /tmp/ccK8IvWa.s 			page 659


 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 25750              		.loc 1 526 3 is_stmt 0 view .LVU6758
 25751              	.LBE3582:
 25752              	.LBE3581:
 25753              	.LBE3580:
 25754              	.LBE3579:
2351:src/xeq.c     **** 		}
 25755              		.loc 1 2351 4 is_stmt 1 view .LVU6759
 25756 0070 E5E7     		b	.L1851
 25757              	.L1876:
 25758 0072 00BF     		.align	2
 25759              	.L1875:
 25760 0074 00000000 		.word	PersistentRam
 25761 0078 00000000 		.word	PcWrapped
 25762 007c 00000000 		.word	Error
 25763              	.LBE3578:
 25764              		.cfi_endproc
 25765              	.LFE175:
 25767              		.section	.text.cmdback,"ax",%progbits
 25768              		.align	1
 25769              		.p2align 2,,3
 25770              		.global	cmdback
 25771              		.syntax unified
 25772              		.thumb
 25773              		.thumb_func
 25774              		.fpu fpv4-sp-d16
 25776              	cmdback:
 25777              	.LVL2011:
 25778              	.LFB176:
2368:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 25779              		.loc 1 2368 46 view -0
 25780              		.cfi_startproc
 25781              		@ args = 0, pretend = 0, frame = 0
 25782              		@ frame_needed = 0, uses_anonymous_args = 0
2369:src/xeq.c     **** 	unsigned int pc = origpc;
 25783              		.loc 1 2369 2 view .LVU6761
2368:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 25784              		.loc 1 2368 46 is_stmt 0 view .LVU6762
 25785 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 25786              		.cfi_def_cfa_offset 24
 25787              		.cfi_offset 3, -24
 25788              		.cfi_offset 4, -20
 25789              		.cfi_offset 5, -16
 25790              		.cfi_offset 6, -12
 25791              		.cfi_offset 7, -8
 25792              		.cfi_offset 14, -4
2369:src/xeq.c     **** 	unsigned int pc = origpc;
 25793              		.loc 1 2369 30 view .LVU6763
 25794 0002 184B     		ldr	r3, .L1896
2369:src/xeq.c     **** 	unsigned int pc = origpc;
 25795              		.loc 1 2369 21 view .LVU6764
 25796 0004 B3F8E067 		ldrh	r6, [r3, #2016]
 25797              	.LVL2012:
2370:src/xeq.c     **** 
 25798              		.loc 1 2370 2 is_stmt 1 view .LVU6765
2372:src/xeq.c     **** 		pc -= arg + 1;
 25799              		.loc 1 2372 2 view .LVU6766
ARM GAS  /tmp/ccK8IvWa.s 			page 660


2372:src/xeq.c     **** 		pc -= arg + 1;
 25800              		.loc 1 2372 6 is_stmt 0 view .LVU6767
 25801 0008 B30B     		lsrs	r3, r6, #14
2372:src/xeq.c     **** 		pc -= arg + 1;
 25802              		.loc 1 2372 5 view .LVU6768
 25803 000a 032B     		cmp	r3, #3
2368:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 25804              		.loc 1 2368 46 view .LVU6769
 25805 000c 0446     		mov	r4, r0
 25806 000e 0D46     		mov	r5, r1
2372:src/xeq.c     **** 		pc -= arg + 1;
 25807              		.loc 1 2372 5 view .LVU6770
 25808 0010 1FD0     		beq	.L1893
2374:src/xeq.c     **** 		if ( Running ) {
 25809              		.loc 1 2374 14 is_stmt 1 view .LVU6771
2374:src/xeq.c     **** 		if ( Running ) {
 25810              		.loc 1 2374 17 is_stmt 0 view .LVU6772
 25811 0012 98B1     		cbz	r0, .L1885
2375:src/xeq.c     **** 			// Handles the case properly that we are on last step
 25812              		.loc 1 2375 3 is_stmt 1 view .LVU6773
2375:src/xeq.c     **** 			// Handles the case properly that we are on last step
 25813              		.loc 1 2375 8 is_stmt 0 view .LVU6774
 25814 0014 144B     		ldr	r3, .L1896+4
2375:src/xeq.c     **** 			// Handles the case properly that we are on last step
 25815              		.loc 1 2375 6 view .LVU6775
 25816 0016 1B68     		ldr	r3, [r3]
 25817 0018 F3B9     		cbnz	r3, .L1894
 25818 001a 3046     		mov	r0, r6
 25819              	.LVL2013:
 25820              	.L1880:
2375:src/xeq.c     **** 			// Handles the case properly that we are on last step
 25821              		.loc 1 2375 6 view .LVU6776
 25822 001c 134F     		ldr	r7, .L1896+8
 25823 001e 00E0     		b	.L1882
 25824              	.L1895:
2381:src/xeq.c     **** 		if (PcWrapped) {
 25825              		.loc 1 2381 18 discriminator 1 view .LVU6777
 25826 0020 33B9     		cbnz	r3, .L1883
 25827              	.L1882:
2379:src/xeq.c     **** 			pc = do_dec(pc, 1);
 25828              		.loc 1 2379 3 is_stmt 1 discriminator 2 view .LVU6778
2380:src/xeq.c     **** 		} while (--arg && !PcWrapped);
 25829              		.loc 1 2380 4 discriminator 2 view .LVU6779
2380:src/xeq.c     **** 		} while (--arg && !PcWrapped);
 25830              		.loc 1 2380 9 is_stmt 0 discriminator 2 view .LVU6780
 25831 0022 0121     		movs	r1, #1
 25832 0024 FFF7FEFF 		bl	do_dec
 25833              	.LVL2014:
2381:src/xeq.c     **** 		if (PcWrapped) {
 25834              		.loc 1 2381 11 is_stmt 1 discriminator 2 view .LVU6781
2381:src/xeq.c     **** 		if (PcWrapped) {
 25835              		.loc 1 2381 3 is_stmt 0 discriminator 2 view .LVU6782
 25836 0028 013C     		subs	r4, r4, #1
 25837              	.LVL2015:
2381:src/xeq.c     **** 		if (PcWrapped) {
 25838              		.loc 1 2381 18 discriminator 2 view .LVU6783
 25839 002a 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccK8IvWa.s 			page 661


2381:src/xeq.c     **** 		if (PcWrapped) {
 25840              		.loc 1 2381 3 discriminator 2 view .LVU6784
 25841 002c F8D1     		bne	.L1895
2382:src/xeq.c     **** 			report_err(ERR_RANGE);
 25842              		.loc 1 2382 3 is_stmt 1 view .LVU6785
2382:src/xeq.c     **** 			report_err(ERR_RANGE);
 25843              		.loc 1 2382 6 is_stmt 0 view .LVU6786
 25844 002e 33B1     		cbz	r3, .L1879
 25845              	.L1883:
2383:src/xeq.c     **** 			return;
 25846              		.loc 1 2383 4 is_stmt 1 view .LVU6787
 25847              	.LVL2016:
 25848              	.LBB3587:
 25849              	.LBI3587:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25850              		.loc 1 523 5 view .LVU6788
 25851              	.LBB3588:
 524:src/xeq.c     **** 		Error = e;
 25852              		.loc 1 524 2 view .LVU6789
 524:src/xeq.c     **** 		Error = e;
 25853              		.loc 1 524 12 is_stmt 0 view .LVU6790
 25854 0030 0F4B     		ldr	r3, .L1896+12
 524:src/xeq.c     **** 		Error = e;
 25855              		.loc 1 524 5 view .LVU6791
 25856 0032 1A68     		ldr	r2, [r3]
 25857 0034 0AB9     		cbnz	r2, .L1877
 25858              	.LVL2017:
 25859              	.LBB3589:
 25860              	.LBI3589:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25861              		.loc 1 523 5 is_stmt 1 view .LVU6792
 25862              	.LBB3590:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 25863              		.loc 1 525 3 view .LVU6793
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 25864              		.loc 1 525 9 is_stmt 0 view .LVU6794
 25865 0036 0822     		movs	r2, #8
 25866 0038 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 25867              		.loc 1 526 3 is_stmt 1 view .LVU6795
 25868              	.LVL2018:
 25869              	.L1877:
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 25870              		.loc 1 526 3 is_stmt 0 view .LVU6796
 25871              	.LBE3590:
 25872              	.LBE3589:
 25873              	.LBE3588:
 25874              	.LBE3587:
2388:src/xeq.c     **** 
 25875              		.loc 1 2388 1 view .LVU6797
 25876 003a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 25877              	.LVL2019:
 25878              	.L1885:
2388:src/xeq.c     **** 
 25879              		.loc 1 2388 1 view .LVU6798
 25880 003c 3046     		mov	r0, r6
 25881              	.LVL2020:
ARM GAS  /tmp/ccK8IvWa.s 			page 662


 25882              	.L1879:
2387:src/xeq.c     **** }
 25883              		.loc 1 2387 2 is_stmt 1 view .LVU6799
 25884 003e A5F13901 		sub	r1, r5, #57
 25885 0042 B1FA81F1 		clz	r1, r1
 25886 0046 3246     		mov	r2, r6
 25887 0048 4909     		lsrs	r1, r1, #5
2388:src/xeq.c     **** 
 25888              		.loc 1 2388 1 is_stmt 0 view .LVU6800
 25889 004a BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 25890              		.cfi_remember_state
 25891              		.cfi_restore 14
 25892              		.cfi_restore 7
 25893              		.cfi_restore 6
 25894              		.cfi_restore 5
 25895              		.cfi_restore 4
 25896              		.cfi_restore 3
 25897              		.cfi_def_cfa_offset 0
 25898              	.LVL2021:
2387:src/xeq.c     **** }
 25899              		.loc 1 2387 2 view .LVU6801
 25900 004e FFF7FEBF 		b	gsbgto
 25901              	.LVL2022:
 25902              	.L1893:
 25903              		.cfi_restore_state
2373:src/xeq.c     ****         else if (arg) {
 25904              		.loc 1 2373 3 is_stmt 1 view .LVU6802
2373:src/xeq.c     ****         else if (arg) {
 25905              		.loc 1 2373 6 is_stmt 0 view .LVU6803
 25906 0052 731E     		subs	r3, r6, #1
 25907 0054 181A     		subs	r0, r3, r0
 25908              	.LVL2023:
2373:src/xeq.c     ****         else if (arg) {
 25909              		.loc 1 2373 6 view .LVU6804
 25910 0056 F2E7     		b	.L1879
 25911              	.LVL2024:
 25912              	.L1894:
2377:src/xeq.c     **** 		}
 25913              		.loc 1 2377 4 is_stmt 1 view .LVU6805
2377:src/xeq.c     **** 		}
 25914              		.loc 1 2377 9 is_stmt 0 view .LVU6806
 25915 0058 0121     		movs	r1, #1
 25916              	.LVL2025:
2377:src/xeq.c     **** 		}
 25917              		.loc 1 2377 9 view .LVU6807
 25918 005a 3046     		mov	r0, r6
 25919              	.LVL2026:
2377:src/xeq.c     **** 		}
 25920              		.loc 1 2377 9 view .LVU6808
 25921 005c FFF7FEFF 		bl	do_dec
 25922              	.LVL2027:
2377:src/xeq.c     **** 		}
 25923              		.loc 1 2377 9 view .LVU6809
 25924 0060 DCE7     		b	.L1880
 25925              	.L1897:
 25926 0062 00BF     		.align	2
 25927              	.L1896:
ARM GAS  /tmp/ccK8IvWa.s 			page 663


 25928 0064 00000000 		.word	PersistentRam
 25929 0068 00000000 		.word	Running
 25930 006c 00000000 		.word	PcWrapped
 25931 0070 00000000 		.word	Error
 25932              		.cfi_endproc
 25933              	.LFE176:
 25935              		.section	.text.usergsb_common,"ax",%progbits
 25936              		.align	1
 25937              		.p2align 2,,3
 25938              		.syntax unified
 25939              		.thumb
 25940              		.thumb_func
 25941              		.fpu fpv4-sp-d16
 25943              	usergsb_common:
 25944              	.LVL2028:
 25945              	.LFB152:
2076:src/xeq.c     **** 	const unsigned int pc = state_pc();
 25946              		.loc 1 2076 55 is_stmt 1 view -0
 25947              		.cfi_startproc
 25948              		@ args = 0, pretend = 0, frame = 0
 25949              		@ frame_needed = 0, uses_anonymous_args = 0
2077:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 25950              		.loc 1 2077 2 view .LVU6811
2076:src/xeq.c     **** 	const unsigned int pc = state_pc();
 25951              		.loc 1 2076 55 is_stmt 0 view .LVU6812
 25952 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 25953              		.cfi_def_cfa_offset 24
 25954              		.cfi_offset 4, -24
 25955              		.cfi_offset 5, -20
 25956              		.cfi_offset 6, -16
 25957              		.cfi_offset 7, -12
 25958              		.cfi_offset 8, -8
 25959              		.cfi_offset 14, -4
2077:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 25960              		.loc 1 2077 26 view .LVU6813
 25961 0004 1A4C     		ldr	r4, .L1902
2078:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 25962              		.loc 1 2078 2 view .LVU6814
 25963 0006 1B4F     		ldr	r7, .L1902+4
2077:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 25964              		.loc 1 2077 21 view .LVU6815
 25965 0008 B4F8E057 		ldrh	r5, [r4, #2016]
 25966              	.LVL2029:
2078:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 25967              		.loc 1 2078 2 is_stmt 1 view .LVU6816
 25968 000c 3A68     		ldr	r2, [r7]
2080:src/xeq.c     **** 	gsbgto(target, 1, pc);		     // Push return address, transfer control
 25969              		.loc 1 2080 2 is_stmt 0 view .LVU6817
 25970 000e DFF87080 		ldr	r8, .L1902+16
2076:src/xeq.c     **** 	const unsigned int pc = state_pc();
 25971              		.loc 1 2076 55 view .LVU6818
 25972 0012 0646     		mov	r6, r0
2078:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 25973              		.loc 1 2078 2 view .LVU6819
 25974 0014 0121     		movs	r1, #1
 25975 0016 2846     		mov	r0, r5
 25976              	.LVL2030:
ARM GAS  /tmp/ccK8IvWa.s 			page 664


2078:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 25977              		.loc 1 2078 2 view .LVU6820
 25978 0018 FFF7FEFF 		bl	gsbgto
 25979              	.LVL2031:
2079:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
 25980              		.loc 1 2079 2 is_stmt 1 view .LVU6821
 25981 001c 2846     		mov	r0, r5
 25982 001e B4F9DE27 		ldrsh	r2, [r4, #2014]
 25983 0022 0121     		movs	r1, #1
 25984 0024 FFF7FEFF 		bl	gsbgto
 25985              	.LVL2032:
2080:src/xeq.c     **** 	gsbgto(target, 1, pc);		     // Push return address, transfer control
 25986              		.loc 1 2080 2 view .LVU6822
 25987 0028 2846     		mov	r0, r5
 25988 002a D8F80020 		ldr	r2, [r8]
 25989 002e 0121     		movs	r1, #1
 25990 0030 FFF7FEFF 		bl	gsbgto
 25991              	.LVL2033:
2081:src/xeq.c     **** 
 25992              		.loc 1 2081 2 view .LVU6823
 25993 0034 2A46     		mov	r2, r5
 25994 0036 3046     		mov	r0, r6
 25995 0038 0121     		movs	r1, #1
 25996 003a FFF7FEFF 		bl	gsbgto
 25997              	.LVL2034:
2083:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
 25998              		.loc 1 2083 2 view .LVU6824
2084:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 25999              		.loc 1 2084 20 is_stmt 0 view .LVU6825
 26000 003e 0E4B     		ldr	r3, .L1902+8
 26001 0040 B4F9DE17 		ldrsh	r1, [r4, #2014]
 26002 0044 1A68     		ldr	r2, [r3]
2086:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
 26003              		.loc 1 2086 6 view .LVU6826
 26004 0046 0D48     		ldr	r0, .L1902+12
2084:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26005              		.loc 1 2084 20 view .LVU6827
 26006 0048 32F81130 		ldrh	r3, [r2, r1, lsl #1]
2086:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
 26007              		.loc 1 2086 5 view .LVU6828
 26008 004c 0068     		ldr	r0, [r0]
2085:src/xeq.c     **** 	if (! Running)
 26009              		.loc 1 2085 12 view .LVU6829
 26010 004e D8F80050 		ldr	r5, [r8]
 26011              	.LVL2035:
2083:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
 26012              		.loc 1 2083 13 view .LVU6830
 26013 0052 0026     		movs	r6, #0
2084:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26014              		.loc 1 2084 20 view .LVU6831
 26015 0054 43F40053 		orr	r3, r3, #8192
2083:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
 26016              		.loc 1 2083 13 view .LVU6832
 26017 0058 3E60     		str	r6, [r7]
2084:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26018              		.loc 1 2084 2 is_stmt 1 view .LVU6833
2084:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
ARM GAS  /tmp/ccK8IvWa.s 			page 665


 26019              		.loc 1 2084 20 is_stmt 0 view .LVU6834
 26020 005a 22F81130 		strh	r3, [r2, r1, lsl #1]	@ movhi
2085:src/xeq.c     **** 	if (! Running)
 26021              		.loc 1 2085 2 is_stmt 1 view .LVU6835
2085:src/xeq.c     **** 	if (! Running)
 26022              		.loc 1 2085 12 is_stmt 0 view .LVU6836
 26023 005e A4F8DE57 		strh	r5, [r4, #2014]	@ movhi
2086:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
 26024              		.loc 1 2086 2 is_stmt 1 view .LVU6837
2086:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
 26025              		.loc 1 2086 5 is_stmt 0 view .LVU6838
 26026 0062 08B1     		cbz	r0, .L1901
2089:src/xeq.c     **** 
 26027              		.loc 1 2089 1 view .LVU6839
 26028 0064 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 26029              	.L1901:
2087:src/xeq.c     **** 	watchdog();			     // Just for safety. Shouldn't be needed.
 26030              		.loc 1 2087 3 is_stmt 1 view .LVU6840
2089:src/xeq.c     **** 
 26031              		.loc 1 2089 1 is_stmt 0 view .LVU6841
 26032 0068 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 26033              		.cfi_restore 14
 26034              		.cfi_restore 8
 26035              		.cfi_restore 7
 26036              		.cfi_restore 6
 26037              		.cfi_restore 5
 26038              		.cfi_restore 4
 26039              		.cfi_def_cfa_offset 0
2087:src/xeq.c     **** 	watchdog();			     // Just for safety. Shouldn't be needed.
 26040              		.loc 1 2087 3 view .LVU6842
 26041 006c FFF7FEBF 		b	set_running_on
 26042              	.LVL2036:
 26043              	.L1903:
 26044              		.align	2
 26045              	.L1902:
 26046 0070 00000000 		.word	PersistentRam
 26047 0074 00000000 		.word	XromUserPc
 26048 0078 00000000 		.word	RetStk
 26049 007c 00000000 		.word	Running
 26050 0080 00000000 		.word	UserLocalRegs
 26051              		.cfi_endproc
 26052              	.LFE152:
 26054              		.section	.text.do_usergsb,"ax",%progbits
 26055              		.align	1
 26056              		.p2align 2,,3
 26057              		.global	do_usergsb
 26058              		.syntax unified
 26059              		.thumb
 26060              		.thumb_func
 26061              		.fpu fpv4-sp-d16
 26063              	do_usergsb:
 26064              	.LVL2037:
 26065              	.LFB153:
2095:src/xeq.c     **** 	usergsb_common(XromUserPc);
 26066              		.loc 1 2095 32 is_stmt 1 view -0
 26067              		.cfi_startproc
 26068              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccK8IvWa.s 			page 666


 26069              		@ frame_needed = 0, uses_anonymous_args = 0
2096:src/xeq.c     ****         fill(OP_FILL);
 26070              		.loc 1 2096 2 view .LVU6844
2095:src/xeq.c     **** 	usergsb_common(XromUserPc);
 26071              		.loc 1 2095 32 is_stmt 0 view .LVU6845
 26072 0000 08B5     		push	{r3, lr}
 26073              		.cfi_def_cfa_offset 8
 26074              		.cfi_offset 3, -8
 26075              		.cfi_offset 14, -4
2096:src/xeq.c     ****         fill(OP_FILL);
 26076              		.loc 1 2096 2 view .LVU6846
 26077 0002 044B     		ldr	r3, .L1906
 26078 0004 1888     		ldrh	r0, [r3]
 26079              	.LVL2038:
2096:src/xeq.c     ****         fill(OP_FILL);
 26080              		.loc 1 2096 2 view .LVU6847
 26081 0006 FFF7FEFF 		bl	usergsb_common
 26082              	.LVL2039:
2097:src/xeq.c     **** }
 26083              		.loc 1 2097 9 is_stmt 1 view .LVU6848
2098:src/xeq.c     **** 
 26084              		.loc 1 2098 1 is_stmt 0 view .LVU6849
 26085 000a BDE80840 		pop	{r3, lr}
 26086              		.cfi_restore 14
 26087              		.cfi_restore 3
 26088              		.cfi_def_cfa_offset 0
2097:src/xeq.c     **** }
 26089              		.loc 1 2097 9 view .LVU6850
 26090 000e 0C20     		movs	r0, #12
 26091 0010 FFF7FEBF 		b	fill
 26092              	.LVL2040:
 26093              	.L1907:
 26094              		.align	2
 26095              	.L1906:
 26096 0014 00000000 		.word	XromUserPc
 26097              		.cfi_endproc
 26098              	.LFE153:
 26100              		.section	.text.cmdmultigto,"ax",%progbits
 26101              		.align	1
 26102              		.p2align 2,,3
 26103              		.global	cmdmultigto
 26104              		.syntax unified
 26105              		.thumb
 26106              		.thumb_func
 26107              		.fpu fpv4-sp-d16
 26109              	cmdmultigto:
 26110              	.LVL2041:
 26111              	.LFB160:
2154:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
 26112              		.loc 1 2154 54 is_stmt 1 view -0
 26113              		.cfi_startproc
 26114              		@ args = 0, pretend = 0, frame = 0
 26115              		@ frame_needed = 0, uses_anonymous_args = 0
2155:src/xeq.c     **** 		// In XROM the command behaves differently!
 26116              		.loc 1 2155 2 view .LVU6852
2155:src/xeq.c     **** 		// In XROM the command behaves differently!
 26117              		.loc 1 2155 5 is_stmt 0 view .LVU6853
ARM GAS  /tmp/ccK8IvWa.s 			page 667


 26118 0000 0229     		cmp	r1, #2
2154:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
 26119              		.loc 1 2154 54 view .LVU6854
 26120 0002 10B5     		push	{r4, lr}
 26121              		.cfi_def_cfa_offset 8
 26122              		.cfi_offset 4, -8
 26123              		.cfi_offset 14, -4
2154:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
 26124              		.loc 1 2154 54 view .LVU6855
 26125 0004 0346     		mov	r3, r0
 26126 0006 0C46     		mov	r4, r1
2155:src/xeq.c     **** 		// In XROM the command behaves differently!
 26127              		.loc 1 2155 5 view .LVU6856
 26128 0008 05D1     		bne	.L1909
 26129              	.LBB3591:
 26130              	.LBI3591:
 181:src/xeq.c     **** 	return isXROM(state_pc());
 26131              		.loc 1 181 5 is_stmt 1 view .LVU6857
 26132              	.LBB3592:
 182:src/xeq.c     **** }
 26133              		.loc 1 182 2 view .LVU6858
 182:src/xeq.c     **** }
 26134              		.loc 1 182 9 is_stmt 0 view .LVU6859
 26135 000a 0F4A     		ldr	r2, .L1913
 26136 000c B2F8E027 		ldrh	r2, [r2, #2016]
 26137              	.LBE3592:
 26138              	.LBE3591:
2155:src/xeq.c     **** 		// In XROM the command behaves differently!
 26139              		.loc 1 2155 22 view .LVU6860
 26140 0010 920B     		lsrs	r2, r2, #14
 26141 0012 032A     		cmp	r2, #3
 26142 0014 0BD0     		beq	.L1912
 26143              	.L1909:
2164:src/xeq.c     **** 	}
 26144              		.loc 1 2164 3 is_stmt 1 view .LVU6861
 26145 0016 0121     		movs	r1, #1
 26146              	.LVL2042:
2164:src/xeq.c     **** 	}
 26147              		.loc 1 2164 3 is_stmt 0 view .LVU6862
 26148 0018 1846     		mov	r0, r3
 26149              	.LVL2043:
2164:src/xeq.c     **** 	}
 26150              		.loc 1 2164 3 view .LVU6863
 26151 001a FFF7FEFF 		bl	findmultilbl
 26152              	.LVL2044:
2164:src/xeq.c     **** 	}
 26153              		.loc 1 2164 3 view .LVU6864
 26154 001e 0146     		mov	r1, r0
 26155 0020 E01E     		subs	r0, r4, #3
 26156 0022 18BF     		it	ne
 26157 0024 0120     		movne	r0, #1
2166:src/xeq.c     **** 
 26158              		.loc 1 2166 1 view .LVU6865
 26159 0026 BDE81040 		pop	{r4, lr}
 26160              		.cfi_remember_state
 26161              		.cfi_restore 14
 26162              		.cfi_restore 4
ARM GAS  /tmp/ccK8IvWa.s 			page 668


 26163              		.cfi_def_cfa_offset 0
2164:src/xeq.c     **** 	}
 26164              		.loc 1 2164 3 view .LVU6866
 26165 002a FFF7FEBF 		b	cmdgtocommon
 26166              	.LVL2045:
 26167              	.L1912:
 26168              		.cfi_restore_state
 26169              	.LBB3593:
2157:src/xeq.c     **** 		if (target != 0)
 26170              		.loc 1 2157 3 is_stmt 1 view .LVU6867
2157:src/xeq.c     **** 		if (target != 0)
 26171              		.loc 1 2157 31 is_stmt 0 view .LVU6868
 26172 002e 0021     		movs	r1, #0
 26173              	.LVL2046:
2157:src/xeq.c     **** 		if (target != 0)
 26174              		.loc 1 2157 31 view .LVU6869
 26175 0030 FFF7FEFF 		bl	findmultilbl
 26176              	.LVL2047:
2157:src/xeq.c     **** 		if (target != 0)
 26177              		.loc 1 2157 22 view .LVU6870
 26178 0034 80B2     		uxth	r0, r0
 26179              	.LVL2048:
2158:src/xeq.c     **** 			usergsb_common(target); 
 26180              		.loc 1 2158 3 is_stmt 1 view .LVU6871
2158:src/xeq.c     **** 			usergsb_common(target); 
 26181              		.loc 1 2158 6 is_stmt 0 view .LVU6872
 26182 0036 18B1     		cbz	r0, .L1910
2159:src/xeq.c     **** 		else
 26183              		.loc 1 2159 4 is_stmt 1 view .LVU6873
 26184              	.LBE3593:
2166:src/xeq.c     **** 
 26185              		.loc 1 2166 1 is_stmt 0 view .LVU6874
 26186 0038 BDE81040 		pop	{r4, lr}
 26187              		.cfi_remember_state
 26188              		.cfi_restore 14
 26189              		.cfi_restore 4
 26190              		.cfi_def_cfa_offset 0
 26191              	.LBB3594:
2159:src/xeq.c     **** 		else
 26192              		.loc 1 2159 4 view .LVU6875
 26193 003c FFF7FEBF 		b	usergsb_common
 26194              	.LVL2049:
 26195              	.L1910:
 26196              		.cfi_restore_state
2161:src/xeq.c     **** 	}
 26197              		.loc 1 2161 4 is_stmt 1 view .LVU6876
 26198              	.LBE3594:
2166:src/xeq.c     **** 
 26199              		.loc 1 2166 1 is_stmt 0 view .LVU6877
 26200 0040 BDE81040 		pop	{r4, lr}
 26201              		.cfi_restore 14
 26202              		.cfi_restore 4
 26203              		.cfi_def_cfa_offset 0
 26204              	.LBB3595:
2161:src/xeq.c     **** 	}
 26205              		.loc 1 2161 4 view .LVU6878
 26206 0044 FFF7FEBF 		b	incpc
ARM GAS  /tmp/ccK8IvWa.s 			page 669


 26207              	.LVL2050:
 26208              	.L1914:
2161:src/xeq.c     **** 	}
 26209              		.loc 1 2161 4 view .LVU6879
 26210              		.align	2
 26211              	.L1913:
 26212 0048 00000000 		.word	PersistentRam
 26213              	.LBE3595:
 26214              		.cfi_endproc
 26215              	.LFE160:
 26217              		.section	.text.store_a_to_d,"ax",%progbits
 26218              		.align	1
 26219              		.p2align 2,,3
 26220              		.global	store_a_to_d
 26221              		.syntax unified
 26222              		.thumb
 26223              		.thumb_func
 26224              		.fpu fpv4-sp-d16
 26226              	store_a_to_d:
 26227              	.LVL2051:
 26228              	.LFB261:
5576:src/xeq.c     **** 
5577:src/xeq.c     **** /* Command to stash registers A through D into volatile RAM and to restore them
5578:src/xeq.c     ****  * again.
5579:src/xeq.c     ****  */
5580:src/xeq.c     **** void store_a_to_d(enum nilop op) {
 26229              		.loc 1 5580 34 is_stmt 1 view -0
 26230              		.cfi_startproc
 26231              		@ args = 0, pretend = 0, frame = 0
 26232              		@ frame_needed = 0, uses_anonymous_args = 0
5581:src/xeq.c     **** 	const void *src = XromA2D;
 26233              		.loc 1 5581 2 view .LVU6881
5582:src/xeq.c     **** 	void *dest = get_reg_n(regA_idx);
 26234              		.loc 1 5582 2 view .LVU6882
5580:src/xeq.c     **** 	const void *src = XromA2D;
 26235              		.loc 1 5580 34 is_stmt 0 view .LVU6883
 26236 0000 10B5     		push	{r4, lr}
 26237              		.cfi_def_cfa_offset 8
 26238              		.cfi_offset 4, -8
 26239              		.cfi_offset 14, -4
5580:src/xeq.c     **** 	const void *src = XromA2D;
 26240              		.loc 1 5580 34 view .LVU6884
 26241 0002 0446     		mov	r4, r0
 26242              		.loc 1 5582 15 view .LVU6885
 26243 0004 6820     		movs	r0, #104
 26244              	.LVL2052:
 26245              		.loc 1 5582 15 view .LVU6886
 26246 0006 FFF7FEFF 		bl	get_reg_n
 26247              	.LVL2053:
5583:src/xeq.c     **** 
5584:src/xeq.c     **** 	if (op == OP_SAVEA2D) {
 26248              		.loc 1 5584 2 is_stmt 1 view .LVU6887
 26249              		.loc 1 5584 5 is_stmt 0 view .LVU6888
 26250 000a 802C     		cmp	r4, #128
5585:src/xeq.c     **** 		src = dest;
 26251              		.loc 1 5585 7 view .LVU6889
 26252 000c 08BF     		it	eq
ARM GAS  /tmp/ccK8IvWa.s 			page 670


 26253 000e 0146     		moveq	r1, r0
5586:src/xeq.c     **** 		dest = XromA2D;
5587:src/xeq.c     **** 	}
5588:src/xeq.c     **** 	xcopy(dest, src, sizeof(REGISTER) * 4);
5589:src/xeq.c     **** }
 26254              		.loc 1 5589 1 view .LVU6890
 26255 0010 BDE81040 		pop	{r4, lr}
 26256              		.cfi_restore 14
 26257              		.cfi_restore 4
 26258              		.cfi_def_cfa_offset 0
5586:src/xeq.c     **** 		dest = XromA2D;
 26259              		.loc 1 5586 8 view .LVU6891
 26260 0014 0CBF     		ite	eq
 26261 0016 0248     		ldreq	r0, .L1919
 26262              	.LVL2054:
5581:src/xeq.c     **** 	void *dest = get_reg_n(regA_idx);
 26263              		.loc 1 5581 14 view .LVU6892
 26264 0018 0149     		ldrne	r1, .L1919
 26265              	.LVL2055:
5588:src/xeq.c     **** }
 26266              		.loc 1 5588 2 is_stmt 1 view .LVU6893
 26267 001a 4022     		movs	r2, #64
 26268 001c FFF7FEBF 		b	xcopy
 26269              	.LVL2056:
 26270              	.L1920:
5588:src/xeq.c     **** }
 26271              		.loc 1 5588 2 is_stmt 0 view .LVU6894
 26272              		.align	2
 26273              	.L1919:
 26274 0020 00000000 		.word	XromA2D
 26275              		.cfi_endproc
 26276              	.LFE261:
 26278              		.section	.text.cmdlocr,"ax",%progbits
 26279              		.align	1
 26280              		.p2align 2,,3
 26281              		.global	cmdlocr
 26282              		.syntax unified
 26283              		.thumb
 26284              		.thumb_func
 26285              		.fpu fpv4-sp-d16
 26287              	cmdlocr:
 26288              	.LVL2057:
 26289              	.LFB262:
5590:src/xeq.c     **** 
5591:src/xeq.c     **** /*
5592:src/xeq.c     ****  *  Command to support local variables.
5593:src/xeq.c     ****  *  A stack frame is constructed:
5594:src/xeq.c     ****  *	marker including size of frame,
5595:src/xeq.c     ****  *	register + flag area.
5596:src/xeq.c     ****  *  Registers must reside on even stack positions
5597:src/xeq.c     ****  *  so the flag word is either at the top or at the bottom of the frame.
5598:src/xeq.c     ****  */
5599:src/xeq.c     **** void cmdlocr(unsigned int arg, enum rarg op) {
 26290              		.loc 1 5599 46 is_stmt 1 view -0
 26291              		.cfi_startproc
 26292              		@ args = 0, pretend = 0, frame = 0
 26293              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccK8IvWa.s 			page 671


5600:src/xeq.c     **** 	short int sp = RetStkPtr;
 26294              		.loc 1 5600 2 view .LVU6896
5599:src/xeq.c     **** 	short int sp = RetStkPtr;
 26295              		.loc 1 5599 46 is_stmt 0 view .LVU6897
 26296 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 26297              		.cfi_def_cfa_offset 40
 26298              		.cfi_offset 3, -40
 26299              		.cfi_offset 4, -36
 26300              		.cfi_offset 5, -32
 26301              		.cfi_offset 6, -28
 26302              		.cfi_offset 7, -24
 26303              		.cfi_offset 8, -20
 26304              		.cfi_offset 9, -16
 26305              		.cfi_offset 10, -12
 26306              		.cfi_offset 11, -8
 26307              		.cfi_offset 14, -4
 26308              		.loc 1 5600 12 view .LVU6898
 26309 0004 544E     		ldr	r6, .L1941
 26310              	.LBB3605:
 26311              	.LBB3606:
 919:src/xeq.c     **** }
 26312              		.loc 1 919 24 view .LVU6899
 26313 0006 B6F8E827 		ldrh	r2, [r6, #2024]
 26314              	.LBE3606:
 26315              	.LBE3605:
 26316              		.loc 1 5600 12 view .LVU6900
 26317 000a B6F9E277 		ldrsh	r7, [r6, #2018]
 26318              	.LVL2058:
5601:src/xeq.c     **** 	int size = (arg << (is_dblmode() ? 3 : 2)) + 2;
 26319              		.loc 1 5601 2 is_stmt 1 view .LVU6901
 26320              	.LBB3608:
 26321              	.LBI3605:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 26322              		.loc 1 918 5 view .LVU6902
 26323              	.LBB3607:
 919:src/xeq.c     **** }
 26324              		.loc 1 919 2 view .LVU6903
 919:src/xeq.c     **** }
 26325              		.loc 1 919 24 is_stmt 0 view .LVU6904
 26326 000e 44F20103 		movw	r3, #16385
 26327              	.LBE3607:
 26328              	.LBE3608:
 26329              		.loc 1 5601 39 view .LVU6905
 26330 0012 1340     		ands	r3, r3, r2
 26331 0014 B3F5804F 		cmp	r3, #16384
 26332 0018 0CBF     		ite	eq
 26333 001a 0325     		moveq	r5, #3
 26334 001c 0225     		movne	r5, #2
 26335              		.loc 1 5601 18 view .LVU6906
 26336 001e A840     		lsls	r0, r0, r5
 26337              	.LVL2059:
 26338              		.loc 1 5601 45 view .LVU6907
 26339 0020 851C     		adds	r5, r0, #2
 26340              	.LVL2060:
5602:src/xeq.c     **** 	const unsigned short marker = LOCAL_MARKER | size;
 26341              		.loc 1 5602 2 is_stmt 1 view .LVU6908
 26342              		.loc 1 5602 45 is_stmt 0 view .LVU6909
ARM GAS  /tmp/ccK8IvWa.s 			page 672


 26343 0022 1FFA85F8 		uxth	r8, r5
 26344              	.LVL2061:
5603:src/xeq.c     **** 	int old_size = 0;
 26345              		.loc 1 5603 2 is_stmt 1 view .LVU6910
5604:src/xeq.c     **** 	short unsigned int old_flags = 0;
 26346              		.loc 1 5604 2 view .LVU6911
5605:src/xeq.c     **** 
5606:src/xeq.c     **** 	if (sp != 0 && sp == LocalRegs) {
 26347              		.loc 1 5606 2 view .LVU6912
 26348              		.loc 1 5606 5 is_stmt 0 view .LVU6913
 26349 0026 7FB9     		cbnz	r7, .L1923
 26350              	.LVL2062:
5607:src/xeq.c     **** 		// resize required
5608:src/xeq.c     **** 		old_size = local_levels();
5609:src/xeq.c     **** 		sp += old_size;
5610:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
5611:src/xeq.c     **** 	}
5612:src/xeq.c     **** 	// compute space needed
5613:src/xeq.c     **** 	sp -= size;
 26351              		.loc 1 5613 2 is_stmt 1 view .LVU6914
5614:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26352              		.loc 1 5614 10 is_stmt 0 view .LVU6915
 26353 0028 4C4B     		ldr	r3, .L1941+4
5613:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26354              		.loc 1 5613 5 view .LVU6916
 26355 002a C8F10004 		rsb	r4, r8, #0
 26356              		.loc 1 5614 5 view .LVU6917
 26357 002e 1B68     		ldr	r3, [r3]
5613:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26358              		.loc 1 5613 5 view .LVU6918
 26359 0030 24B2     		sxth	r4, r4
 26360              	.LVL2063:
 26361              		.loc 1 5614 2 is_stmt 1 view .LVU6919
 26362              		.loc 1 5614 6 is_stmt 0 view .LVU6920
 26363 0032 6242     		rsbs	r2, r4, #0
 26364              		.loc 1 5614 5 view .LVU6921
 26365 0034 9A42     		cmp	r2, r3
 26366 0036 41DC     		bgt	.L1929
 26367 0038 4FEA4409 		lsl	r9, r4, #1
 26368 003c DFF824B1 		ldr	fp, .L1941+12
 26369 0040 4FEA450A 		lsl	r10, r5, #1
 26370 0044 4B46     		mov	r3, r9
 26371 0046 13E0     		b	.L1927
 26372              	.LVL2064:
 26373              	.L1923:
5606:src/xeq.c     **** 		// resize required
 26374              		.loc 1 5606 23 discriminator 1 view .LVU6922
 26375 0048 B6F9DE47 		ldrsh	r4, [r6, #2014]
5606:src/xeq.c     **** 		// resize required
 26376              		.loc 1 5606 14 discriminator 1 view .LVU6923
 26377 004c BC42     		cmp	r4, r7
 26378 004e 27D0     		beq	.L1928
5613:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26379              		.loc 1 5613 2 is_stmt 1 view .LVU6924
 26380              		.loc 1 5614 10 is_stmt 0 view .LVU6925
 26381 0050 424B     		ldr	r3, .L1941+4
5613:src/xeq.c     **** 	if (-sp > RetStkSize) {
ARM GAS  /tmp/ccK8IvWa.s 			page 673


 26382              		.loc 1 5613 5 view .LVU6926
 26383 0052 A7EB0804 		sub	r4, r7, r8
 26384              		.loc 1 5614 5 view .LVU6927
 26385 0056 1B68     		ldr	r3, [r3]
5613:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26386              		.loc 1 5613 5 view .LVU6928
 26387 0058 24B2     		sxth	r4, r4
 26388              	.LVL2065:
 26389              		.loc 1 5614 2 is_stmt 1 view .LVU6929
 26390              		.loc 1 5614 6 is_stmt 0 view .LVU6930
 26391 005a 6242     		rsbs	r2, r4, #0
 26392              		.loc 1 5614 5 view .LVU6931
 26393 005c 9A42     		cmp	r2, r3
 26394 005e 2DDC     		bgt	.L1929
 26395 0060 4FEA4409 		lsl	r9, r4, #1
 26396 0064 DFF8FCB0 		ldr	fp, .L1941+12
 26397 0068 4FEA450A 		lsl	r10, r5, #1
 26398 006c 4B46     		mov	r3, r9
5604:src/xeq.c     **** 
 26399              		.loc 1 5604 21 view .LVU6932
 26400 006e 0027     		movs	r7, #0
 26401              	.LVL2066:
 26402              	.L1927:
5615:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
5616:src/xeq.c     **** 		return;
5617:src/xeq.c     **** 	}
5618:src/xeq.c     **** 	if ( old_size > 0 ) {
5619:src/xeq.c     **** 		// move previous contents to new destination
5620:src/xeq.c     **** 		int n;
5621:src/xeq.c     **** 		if (size > old_size) {
5622:src/xeq.c     **** 			n = old_size;
5623:src/xeq.c     **** 			size -= old_size;
5624:src/xeq.c     **** 		}
5625:src/xeq.c     **** 		else {
5626:src/xeq.c     **** 			n = size;
5627:src/xeq.c     **** 			size = 0;
5628:src/xeq.c     **** 		}
5629:src/xeq.c     **** 		xcopy(RetStk + sp, RetStk + LocalRegs, n + n);
5630:src/xeq.c     **** 	}
5631:src/xeq.c     **** 	// fill the rest with 0
5632:src/xeq.c     **** 	xset(RetStk + sp + old_size, 0, size + size);
 26403              		.loc 1 5632 2 is_stmt 1 view .LVU6933
 26404              		.loc 1 5632 19 is_stmt 0 view .LVU6934
 26405 0070 DBF80000 		ldr	r0, [fp]
 26406              		.loc 1 5632 2 view .LVU6935
 26407 0074 5246     		mov	r2, r10
 26408 0076 1844     		add	r0, r0, r3
 26409 0078 0021     		movs	r1, #0
 26410 007a FFF7FEFF 		bl	xset
 26411              	.LVL2067:
5633:src/xeq.c     **** 
5634:src/xeq.c     **** 	// set marker, pointers and flags
5635:src/xeq.c     **** 	RetStk[sp] = marker;
 26412              		.loc 1 5635 2 is_stmt 1 view .LVU6936
 26413              		.loc 1 5635 13 is_stmt 0 view .LVU6937
 26414 007e DBF80030 		ldr	r3, [fp]
5602:src/xeq.c     **** 	int old_size = 0;
ARM GAS  /tmp/ccK8IvWa.s 			page 674


 26415              		.loc 1 5602 23 view .LVU6938
 26416 0082 48F48058 		orr	r8, r8, #4096
 26417              	.LVL2068:
 26418              		.loc 1 5635 13 view .LVU6939
 26419 0086 23F80980 		strh	r8, [r3, r9]	@ movhi
5636:src/xeq.c     **** 	RetStkPtr = LocalRegs = sp;
 26420              		.loc 1 5636 2 is_stmt 1 view .LVU6940
5637:src/xeq.c     **** 	*flag_word(LOCAL_FLAG_BASE, NULL) = old_flags;
 26421              		.loc 1 5637 3 is_stmt 0 view .LVU6941
 26422 008a 0021     		movs	r1, #0
 26423 008c 7020     		movs	r0, #112
5636:src/xeq.c     **** 	RetStkPtr = LocalRegs = sp;
 26424              		.loc 1 5636 24 view .LVU6942
 26425 008e A6F8DE47 		strh	r4, [r6, #2014]	@ movhi
5636:src/xeq.c     **** 	RetStkPtr = LocalRegs = sp;
 26426              		.loc 1 5636 12 view .LVU6943
 26427 0092 A6F8E247 		strh	r4, [r6, #2018]	@ movhi
 26428              		.loc 1 5637 2 is_stmt 1 view .LVU6944
 26429              		.loc 1 5637 3 is_stmt 0 view .LVU6945
 26430 0096 FFF7FEFF 		bl	flag_word
 26431              	.LVL2069:
 26432              		.loc 1 5637 36 view .LVU6946
 26433 009a 0780     		strh	r7, [r0]	@ movhi
 26434              	.L1921:
5638:src/xeq.c     **** }
 26435              		.loc 1 5638 1 view .LVU6947
 26436 009c BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 26437              	.LVL2070:
 26438              	.L1928:
5608:src/xeq.c     **** 		sp += old_size;
 26439              		.loc 1 5608 3 is_stmt 1 view .LVU6948
 26440              	.LBB3609:
 26441              	.LBI3609:
 213:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 26442              		.loc 1 213 5 view .LVU6949
 26443              	.LBB3610:
 214:src/xeq.c     **** }
 26444              		.loc 1 214 2 view .LVU6950
 214:src/xeq.c     **** }
 26445              		.loc 1 214 57 is_stmt 0 view .LVU6951
 26446 00a0 002C     		cmp	r4, #0
 26447 00a2 13DB     		blt	.L1938
 214:src/xeq.c     **** }
 26448              		.loc 1 214 57 view .LVU6952
 26449              	.LBE3610:
 26450              	.LBE3609:
5609:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 26451              		.loc 1 5609 3 is_stmt 1 view .LVU6953
 26452              	.LVL2071:
5610:src/xeq.c     **** 	}
 26453              		.loc 1 5610 3 view .LVU6954
5610:src/xeq.c     **** 	}
 26454              		.loc 1 5610 16 is_stmt 0 view .LVU6955
 26455 00a4 0021     		movs	r1, #0
 26456              	.LVL2072:
5610:src/xeq.c     **** 	}
 26457              		.loc 1 5610 16 view .LVU6956
ARM GAS  /tmp/ccK8IvWa.s 			page 675


 26458 00a6 7020     		movs	r0, #112
 26459 00a8 FFF7FEFF 		bl	flag_word
 26460              	.LVL2073:
5614:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 26461              		.loc 1 5614 10 view .LVU6957
 26462 00ac 2B4B     		ldr	r3, .L1941+4
5613:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26463              		.loc 1 5613 5 view .LVU6958
 26464 00ae A4EB0804 		sub	r4, r4, r8
 26465              	.LVL2074:
5614:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 26466              		.loc 1 5614 5 view .LVU6959
 26467 00b2 1B68     		ldr	r3, [r3]
5613:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26468              		.loc 1 5613 5 view .LVU6960
 26469 00b4 24B2     		sxth	r4, r4
5614:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 26470              		.loc 1 5614 6 view .LVU6961
 26471 00b6 6242     		rsbs	r2, r4, #0
 26472              	.LVL2075:
5613:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26473              		.loc 1 5613 2 is_stmt 1 view .LVU6962
5614:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 26474              		.loc 1 5614 2 view .LVU6963
5614:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 26475              		.loc 1 5614 5 is_stmt 0 view .LVU6964
 26476 00b8 9A42     		cmp	r2, r3
 26477 00ba 3EDD     		ble	.L1939
 26478              	.LVL2076:
 26479              	.L1929:
5615:src/xeq.c     **** 		return;
 26480              		.loc 1 5615 3 is_stmt 1 view .LVU6965
 26481              	.LBB3612:
 26482              	.LBI3612:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26483              		.loc 1 523 5 view .LVU6966
 26484              	.LBB3613:
 524:src/xeq.c     **** 		Error = e;
 26485              		.loc 1 524 2 view .LVU6967
 524:src/xeq.c     **** 		Error = e;
 26486              		.loc 1 524 12 is_stmt 0 view .LVU6968
 26487 00bc 284B     		ldr	r3, .L1941+8
 524:src/xeq.c     **** 		Error = e;
 26488              		.loc 1 524 5 view .LVU6969
 26489 00be 1A68     		ldr	r2, [r3]
 26490 00c0 002A     		cmp	r2, #0
 26491 00c2 EBD1     		bne	.L1921
 26492              	.LVL2077:
 26493              	.LBB3614:
 26494              	.LBI3614:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26495              		.loc 1 523 5 is_stmt 1 view .LVU6970
 26496              	.LBB3615:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 26497              		.loc 1 525 3 view .LVU6971
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 26498              		.loc 1 525 9 is_stmt 0 view .LVU6972
ARM GAS  /tmp/ccK8IvWa.s 			page 676


 26499 00c4 0B22     		movs	r2, #11
 26500 00c6 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 26501              		.loc 1 526 3 is_stmt 1 view .LVU6973
 26502              	.LBE3615:
 26503              	.LBE3614:
 26504              	.LBE3613:
 26505              	.LBE3612:
 26506              		.loc 1 5638 1 is_stmt 0 view .LVU6974
 26507 00c8 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 26508              	.LVL2078:
 26509              	.L1938:
 26510              	.LBB3616:
 26511              	.LBB3611:
 214:src/xeq.c     **** }
 26512              		.loc 1 214 25 view .LVU6975
 26513 00cc DFF894B0 		ldr	fp, .L1941+12
 26514 00d0 DBF80030 		ldr	r3, [fp]
 26515 00d4 33F81490 		ldrh	r9, [r3, r4, lsl #1]
 26516 00d8 C9F30B09 		ubfx	r9, r9, #0, #12
 26517              	.LVL2079:
 214:src/xeq.c     **** }
 26518              		.loc 1 214 25 view .LVU6976
 26519              	.LBE3611:
 26520              	.LBE3616:
5609:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 26521              		.loc 1 5609 3 is_stmt 1 view .LVU6977
5609:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 26522              		.loc 1 5609 6 is_stmt 0 view .LVU6978
 26523 00dc 4C44     		add	r4, r4, r9
5610:src/xeq.c     **** 	}
 26524              		.loc 1 5610 16 view .LVU6979
 26525 00de 0021     		movs	r1, #0
 26526              	.LVL2080:
5610:src/xeq.c     **** 	}
 26527              		.loc 1 5610 16 view .LVU6980
 26528 00e0 7020     		movs	r0, #112
 26529 00e2 FFF7FEFF 		bl	flag_word
 26530              	.LVL2081:
5609:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 26531              		.loc 1 5609 6 view .LVU6981
 26532 00e6 A4B2     		uxth	r4, r4
 26533              	.LVL2082:
5610:src/xeq.c     **** 	}
 26534              		.loc 1 5610 3 is_stmt 1 view .LVU6982
5614:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 26535              		.loc 1 5614 10 is_stmt 0 view .LVU6983
 26536 00e8 1C4B     		ldr	r3, .L1941+4
5610:src/xeq.c     **** 	}
 26537              		.loc 1 5610 13 view .LVU6984
 26538 00ea 0788     		ldrh	r7, [r0]
 26539              	.LVL2083:
5613:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26540              		.loc 1 5613 2 is_stmt 1 view .LVU6985
5614:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 26541              		.loc 1 5614 5 is_stmt 0 view .LVU6986
 26542 00ec 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccK8IvWa.s 			page 677


5613:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26543              		.loc 1 5613 5 view .LVU6987
 26544 00ee A4EB0804 		sub	r4, r4, r8
 26545              	.LVL2084:
5613:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26546              		.loc 1 5613 5 view .LVU6988
 26547 00f2 24B2     		sxth	r4, r4
 26548              	.LVL2085:
5614:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 26549              		.loc 1 5614 2 is_stmt 1 view .LVU6989
5614:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 26550              		.loc 1 5614 6 is_stmt 0 view .LVU6990
 26551 00f4 6242     		rsbs	r2, r4, #0
5614:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 26552              		.loc 1 5614 5 view .LVU6991
 26553 00f6 9A42     		cmp	r2, r3
 26554 00f8 E0DC     		bgt	.L1929
5618:src/xeq.c     **** 		// move previous contents to new destination
 26555              		.loc 1 5618 2 is_stmt 1 view .LVU6992
5618:src/xeq.c     **** 		// move previous contents to new destination
 26556              		.loc 1 5618 5 is_stmt 0 view .LVU6993
 26557 00fa B9F1000F 		cmp	r9, #0
 26558 00fe 25D0     		beq	.L1940
 26559              	.LBB3617:
5620:src/xeq.c     **** 		if (size > old_size) {
 26560              		.loc 1 5620 3 is_stmt 1 view .LVU6994
5621:src/xeq.c     **** 			n = old_size;
 26561              		.loc 1 5621 3 view .LVU6995
5621:src/xeq.c     **** 			n = old_size;
 26562              		.loc 1 5621 6 is_stmt 0 view .LVU6996
 26563 0100 4D45     		cmp	r5, r9
5622:src/xeq.c     **** 			size -= old_size;
 26564              		.loc 1 5622 4 is_stmt 1 view .LVU6997
 26565              	.LVL2086:
5623:src/xeq.c     **** 		}
 26566              		.loc 1 5623 4 view .LVU6998
5623:src/xeq.c     **** 		}
 26567              		.loc 1 5623 9 is_stmt 0 view .LVU6999
 26568 0102 C8BF     		it	gt
 26569 0104 A5EB0905 		subgt	r5, r5, r9
 26570              	.LVL2087:
5629:src/xeq.c     **** 	}
 26571              		.loc 1 5629 3 view .LVU7000
 26572 0108 DBF80000 		ldr	r0, [fp]
5629:src/xeq.c     **** 	}
 26573              		.loc 1 5629 29 view .LVU7001
 26574 010c B6F9DE17 		ldrsh	r1, [r6, #2014]
 26575 0110 C4BF     		itt	gt
 26576 0112 4FEA450A 		lslgt	r10, r5, #1
 26577 0116 4D46     		movgt	r5, r9
 26578              	.LVL2088:
5629:src/xeq.c     **** 	}
 26579              		.loc 1 5629 3 is_stmt 1 view .LVU7002
 26580 0118 00EB4101 		add	r1, r0, r1, lsl #1
 26581 011c 4FEA4502 		lsl	r2, r5, #1
 26582 0120 00EB4400 		add	r0, r0, r4, lsl #1
 26583 0124 D8BF     		it	le
ARM GAS  /tmp/ccK8IvWa.s 			page 678


 26584 0126 4FF0000A 		movle	r10, #0
 26585 012a FFF7FEFF 		bl	xcopy
 26586              	.LVL2089:
 26587 012e 04EB0903 		add	r3, r4, r9
 26588 0132 5B00     		lsls	r3, r3, #1
5629:src/xeq.c     **** 	}
 26589              		.loc 1 5629 16 is_stmt 0 view .LVU7003
 26590 0134 4FEA4409 		lsl	r9, r4, #1
 26591              	.LVL2090:
5629:src/xeq.c     **** 	}
 26592              		.loc 1 5629 16 view .LVU7004
 26593 0138 9AE7     		b	.L1927
 26594              	.LVL2091:
 26595              	.L1939:
5629:src/xeq.c     **** 	}
 26596              		.loc 1 5629 16 view .LVU7005
 26597 013a 4FEA4409 		lsl	r9, r4, #1
 26598              	.LBE3617:
5610:src/xeq.c     **** 	}
 26599              		.loc 1 5610 13 view .LVU7006
 26600 013e 0788     		ldrh	r7, [r0]
 26601 0140 DFF820B0 		ldr	fp, .L1941+12
 26602 0144 4FEA450A 		lsl	r10, r5, #1
 26603 0148 4B46     		mov	r3, r9
 26604 014a 91E7     		b	.L1927
 26605              	.LVL2092:
 26606              	.L1940:
5610:src/xeq.c     **** 	}
 26607              		.loc 1 5610 13 view .LVU7007
 26608 014c 4FEA4409 		lsl	r9, r4, #1
 26609              	.LVL2093:
5610:src/xeq.c     **** 	}
 26610              		.loc 1 5610 13 view .LVU7008
 26611 0150 4FEA450A 		lsl	r10, r5, #1
5618:src/xeq.c     **** 		// move previous contents to new destination
 26612              		.loc 1 5618 5 view .LVU7009
 26613 0154 4B46     		mov	r3, r9
 26614 0156 8BE7     		b	.L1927
 26615              	.L1942:
 26616              		.align	2
 26617              	.L1941:
 26618 0158 00000000 		.word	PersistentRam
 26619 015c 00000000 		.word	RetStkSize
 26620 0160 00000000 		.word	Error
 26621 0164 00000000 		.word	RetStk
 26622              		.cfi_endproc
 26623              	.LFE262:
 26625              		.section	.text.cmdxout,"ax",%progbits
 26626              		.align	1
 26627              		.p2align 2,,3
 26628              		.global	cmdxout
 26629              		.syntax unified
 26630              		.thumb
 26631              		.thumb_func
 26632              		.fpu fpv4-sp-d16
 26634              	cmdxout:
 26635              	.LVL2094:
ARM GAS  /tmp/ccK8IvWa.s 			page 679


 26636              	.LFB264:
5639:src/xeq.c     **** 
5640:src/xeq.c     **** 
5641:src/xeq.c     **** /*
5642:src/xeq.c     ****  *  xIN: Setup an environment for XROM based math routines:
5643:src/xeq.c     ****  *
5644:src/xeq.c     ****  *  - 12 Private double precision stack & special registers X to K
5645:src/xeq.c     ****  *  - private return stack for local flags & registers
5646:src/xeq.c     ****  *  - 6 system flags
5647:src/xeq.c     ****  *
5648:src/xeq.c     ****  *  Argument:
5649:src/xeq.c     ****  *      noLocals - bit 7
5650:src/xeq.c     ****  *      out      - bits 4..5
5651:src/xeq.c     ****  *      in       - bits 2..4		
5652:src/xeq.c     ****  *      setLastX - bit 1
5653:src/xeq.c     ****  *      complex  - bit 0
5654:src/xeq.c     ****  *
5655:src/xeq.c     ****  *  Local flags:
5656:src/xeq.c     ****  *      .00 to .09 are free for general use.
5657:src/xeq.c     ****  *	.10 - stack_depth as previously set by user, don't touch it!
5658:src/xeq.c     ****  *	.11 - mode_double as previously set by user, don't touch it!
5659:src/xeq.c     ****  *      .12 - complex, from argument, can be modified.
5660:src/xeq.c     ****  *	.13 - setLastX, from argumment, can be modified.
5661:src/xeq.c     ****  *	.14 - state_lift as desired on exit, set to 1 by default, can be modified.
5662:src/xeq.c     ****  *      .15 - reserved, indicates that xIN is active, set to 1, don't touch it!
5663:src/xeq.c     ****  *
5664:src/xeq.c     ****  *  If the call is repeated only the argument values are reevaluated.
5665:src/xeq.c     ****  */
5666:src/xeq.c     **** void cmdxin(unsigned int arg, enum rarg op) {
5667:src/xeq.c     **** 
5668:src/xeq.c     **** 	int i;
5669:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5670:src/xeq.c     **** 	REGISTER *previousLocals = NULL;
5671:src/xeq.c     **** 	unsigned short previousFlags = 0;
5672:src/xeq.c     **** 	int num_locals = 0;
5673:src/xeq.c     **** #endif
5674:src/xeq.c     **** #ifndef REALBUILD
5675:src/xeq.c     **** 	/* This should never happen in a real build but it causes havoc writing
5676:src/xeq.c     **** 	 * xrom code, so trap it here.
5677:src/xeq.c     **** 	 */
5678:src/xeq.c     **** 	if (XromFlags.xIN) {
5679:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
5680:src/xeq.c     **** 		return;
5681:src/xeq.c     **** 	}
5682:src/xeq.c     **** #endif
5683:src/xeq.c     **** 
5684:src/xeq.c     **** 	// Setup the XromLocal and XromParams structures in volatile RAM
5685:src/xeq.c     **** 	// fill with 0
5686:src/xeq.c     **** 	xset(&XromLocal, 0, sizeof(XromLocal));
5687:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
5688:src/xeq.c     **** 
5689:src/xeq.c     **** 	// Flags
5690:src/xeq.c     **** 	XromFlags.state_lift_in = get_lift();
5691:src/xeq.c     **** 	XromFlags.stack_depth = UState.stack_depth;
5692:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
5693:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
5694:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
ARM GAS  /tmp/ccK8IvWa.s 			page 680


5695:src/xeq.c     **** 	XromFlags.state_lift = 1;
5696:src/xeq.c     **** 	XromFlags.xIN = 1;
5697:src/xeq.c     **** 
5698:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5699:src/xeq.c     **** 	// Save pointers to original local data
5700:src/xeq.c     **** 	if ((arg & 0x80) != 0 && LocalRegs < 0) {
5701:src/xeq.c     **** 		XromFlags.copyLocals = 1;
5702:src/xeq.c     **** 		previousFlags = *flag_word(LOCAL_FLAG_BASE, NULL);
5703:src/xeq.c     **** 		previousLocals = get_reg_n(LOCAL_REG_BASE);
5704:src/xeq.c     **** 		num_locals = local_regs();
5705:src/xeq.c     **** 	}
5706:src/xeq.c     **** #endif
5707:src/xeq.c     **** 	// Establish local return stack
5708:src/xeq.c     **** 	XromUserRetStk = RetStk;
5709:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
5710:src/xeq.c     **** 
5711:src/xeq.c     **** 	RetStk = XromRetStk;
5712:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5713:src/xeq.c     **** 	RetStkPtr = 0;			// Locals will be allocated later
5714:src/xeq.c     **** #else
5715:src/xeq.c     **** 	LocalRegs = RetStkPtr = -2;	// Allocate just the local flags
5716:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
5717:src/xeq.c     **** #endif
5718:src/xeq.c     **** 
5719:src/xeq.c     **** 	// Parse the argument into fields
5720:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5721:src/xeq.c     **** 	XromFlags.setLastX = (arg & 0x20) != 0;
5722:src/xeq.c     **** 	XromFlags.complex = (arg & 0x40) != 0;
5723:src/xeq.c     **** 	XromIn = (arg & 0x1f) % 5;
5724:src/xeq.c     **** 	XromOut = (arg & 0x1f) / 5;
5725:src/xeq.c     **** #else
5726:src/xeq.c     **** 	XromFlags.setLastX = (arg & 0x40) != 0;
5727:src/xeq.c     **** 	XromFlags.complex = (arg & 0x80) != 0;
5728:src/xeq.c     **** 	XromIn = (arg & 0x7);
5729:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
5730:src/xeq.c     **** #endif
5731:src/xeq.c     **** 	if (XromFlags.complex) {
5732:src/xeq.c     **** 		// Complex arguments are always in pairs
5733:src/xeq.c     **** 		XromIn <<= 1;
5734:src/xeq.c     **** 		XromOut <<= 1;
5735:src/xeq.c     **** 	}
5736:src/xeq.c     **** 
5737:src/xeq.c     ****         UState.rounding_mode = 0;
5738:src/xeq.c     **** 
5739:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5740:src/xeq.c     **** 	// Allocate the local frame
5741:src/xeq.c     **** 	LocalRegs = 0;
5742:src/xeq.c     **** 	UState.mode_double = 1;		// Needed to allocate enough registers
5743:src/xeq.c     **** 	cmdlocr(num_locals, RARG_LOCR);
5744:src/xeq.c     **** 	if (XromFlags.copyLocals)
5745:src/xeq.c     **** 		*flag_word(LOCAL_FLAG_BASE, NULL) = previousFlags;
5746:src/xeq.c     **** #endif
5747:src/xeq.c     **** 	// Switch to double precision mode
5748:src/xeq.c     **** 	if (XromFlags.mode_int) {
5749:src/xeq.c     **** 		// Convert integers to decimal128
5750:src/xeq.c     **** #ifndef ENABLE_COPYLOCALS
5751:src/xeq.c     **** 		UState.mode_double = 1;
ARM GAS  /tmp/ccK8IvWa.s 			page 681


5752:src/xeq.c     **** #endif
5753:src/xeq.c     **** 		op_float(OP_FLOAT_XIN);
5754:src/xeq.c     **** 		// Do not copy the local registers because we don't use this case anyway
5755:src/xeq.c     **** 	}
5756:src/xeq.c     **** 	else if (XromFlags.mode_double) {
5757:src/xeq.c     **** 		// No conversion necessary
5758:src/xeq.c     **** 		xcopy(XromStack, StackBase, sizeof(XromStack));
5759:src/xeq.c     **** 		StackBase = XromStack;
5760:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5761:src/xeq.c     **** 		if (XromFlags.copyLocals)
5762:src/xeq.c     **** 			move_regs(get_reg_n(LOCAL_REG_BASE), previousLocals, num_locals);
5763:src/xeq.c     **** #endif
5764:src/xeq.c     **** 	}
5765:src/xeq.c     **** 	else {
5766:src/xeq.c     **** 		// Convert decimal64 to decinal128
5767:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5768:src/xeq.c     **** 		UState.mode_double = 0;		// This was the original state before xIN
5769:src/xeq.c     **** 		op_double(OP_DBLON);		// Now mode_double should be set again
5770:src/xeq.c     **** 		if (XromFlags.copyLocals) {
5771:src/xeq.c     **** 			decimal64  *src  = &(previousLocals->s);
5772:src/xeq.c     **** 			decimal128 *dest = &(get_reg_n(LOCAL_REG_BASE)->d);
5773:src/xeq.c     **** 			while (num_locals--)
5774:src/xeq.c     **** 				packed128_from_packed(dest++, src++);
5775:src/xeq.c     **** 		}
5776:src/xeq.c     **** #else
5777:src/xeq.c     **** 		op_double(OP_DBLON);		// Now mode_double should be set again
5778:src/xeq.c     **** #endif
5779:src/xeq.c     **** 	}
5780:src/xeq.c     **** 
5781:src/xeq.c     **** 	// Set stack size to 8 and turn on stack_lift
5782:src/xeq.c     **** 	set_lift();
5783:src/xeq.c     **** 	UState.stack_depth = 1;
5784:src/xeq.c     **** 
5785:src/xeq.c     **** 	// check for any NaNs in input
5786:src/xeq.c     **** 	for (i = 0; i < XromIn; ++i) {
5787:src/xeq.c     **** 		decNumber x;
5788:src/xeq.c     **** 		if (decNumberIsNaN(getRegister(&x, regX_idx + i))) {
5789:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
5790:src/xeq.c     **** 			// domain error
5791:src/xeq.c     **** 			if (get_user_flag(NAN_FLAG)) {
5792:src/xeq.c     **** 				for (i = 0; i < XromOut; ++i)
5793:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
5794:src/xeq.c     **** 				// Early exit of routine
5795:src/xeq.c     **** 				cmdxout(0, RARG_XROM_OUT);
5796:src/xeq.c     **** 			} 
5797:src/xeq.c     **** 			else
5798:src/xeq.c     **** 				report_err(ERR_DOMAIN);	// this will do all the cleanup
5799:src/xeq.c     **** 			return;
5800:src/xeq.c     **** 		}
5801:src/xeq.c     **** 	}
5802:src/xeq.c     **** }
5803:src/xeq.c     **** 
5804:src/xeq.c     **** /*
5805:src/xeq.c     ****  *  xOUT: Return from an XROM routine that has previously called xIN
5806:src/xeq.c     ****  *  Argument:
5807:src/xeq.c     ****  *     bit 0 set - do a RTN+1
5808:src/xeq.c     ****  *     bit 1 set - leave I alone even with a complex result
ARM GAS  /tmp/ccK8IvWa.s 			page 682


5809:src/xeq.c     ****  */
5810:src/xeq.c     **** void cmdxout(unsigned int arg, enum rarg op) {
 26637              		.loc 1 5810 46 is_stmt 1 view -0
 26638              		.cfi_startproc
 26639              		@ args = 0, pretend = 0, frame = 56
 26640              		@ frame_needed = 0, uses_anonymous_args = 0
5811:src/xeq.c     **** 	int i, dbl, intm;
 26641              		.loc 1 5811 2 view .LVU7011
5812:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5813:src/xeq.c     **** 	unsigned short flags = *flag_word(LOCAL_FLAG_BASE, NULL);
5814:src/xeq.c     **** 	REGISTER *locals = get_reg_n(LOCAL_REG_BASE);
5815:src/xeq.c     **** 	int num_locals = local_regs();
5816:src/xeq.c     **** #endif
5817:src/xeq.c     **** #ifndef REALBUILD
5818:src/xeq.c     **** 	// shouldn't happen in final build
5819:src/xeq.c     **** 	if (! XromFlags.xIN) {
 26642              		.loc 1 5819 2 view .LVU7012
5810:src/xeq.c     **** 	int i, dbl, intm;
 26643              		.loc 1 5810 46 is_stmt 0 view .LVU7013
 26644 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 26645              		.cfi_def_cfa_offset 36
 26646              		.cfi_offset 4, -36
 26647              		.cfi_offset 5, -32
 26648              		.cfi_offset 6, -28
 26649              		.cfi_offset 7, -24
 26650              		.cfi_offset 8, -20
 26651              		.cfi_offset 9, -16
 26652              		.cfi_offset 10, -12
 26653              		.cfi_offset 11, -8
 26654              		.cfi_offset 14, -4
 26655              		.loc 1 5819 6 view .LVU7014
 26656 0004 754C     		ldr	r4, .L1989
 26657              		.loc 1 5819 5 view .LVU7015
 26658 0006 94F90130 		ldrsb	r3, [r4, #1]
 26659 000a 002B     		cmp	r3, #0
5810:src/xeq.c     **** 	int i, dbl, intm;
 26660              		.loc 1 5810 46 view .LVU7016
 26661 000c 8FB0     		sub	sp, sp, #60
 26662              		.cfi_def_cfa_offset 96
 26663              		.loc 1 5819 5 view .LVU7017
 26664 000e 07DB     		blt	.L1944
5820:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 26665              		.loc 1 5820 3 is_stmt 1 view .LVU7018
 26666              	.LVL2095:
 26667              	.LBB3641:
 26668              	.LBI3641:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26669              		.loc 1 523 5 view .LVU7019
 26670              	.LBB3642:
 524:src/xeq.c     **** 		Error = e;
 26671              		.loc 1 524 2 view .LVU7020
 524:src/xeq.c     **** 		Error = e;
 26672              		.loc 1 524 12 is_stmt 0 view .LVU7021
 26673 0010 734B     		ldr	r3, .L1989+4
 524:src/xeq.c     **** 		Error = e;
 26674              		.loc 1 524 5 view .LVU7022
 26675 0012 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/ccK8IvWa.s 			page 683


 26676 0014 0AB9     		cbnz	r2, .L1943
 26677              	.LVL2096:
 26678              	.LBB3643:
 26679              	.LBI3643:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26680              		.loc 1 523 5 is_stmt 1 view .LVU7023
 26681              	.LBB3644:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 26682              		.loc 1 525 3 view .LVU7024
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 26683              		.loc 1 525 9 is_stmt 0 view .LVU7025
 26684 0016 0722     		movs	r2, #7
 26685 0018 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 26686              		.loc 1 526 3 is_stmt 1 view .LVU7026
 26687              	.LVL2097:
 26688              	.L1943:
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 26689              		.loc 1 526 3 is_stmt 0 view .LVU7027
 26690              	.LBE3644:
 26691              	.LBE3643:
 26692              	.LBE3642:
 26693              	.LBE3641:
5821:src/xeq.c     **** 		return;
5822:src/xeq.c     **** 	}
5823:src/xeq.c     **** #endif
5824:src/xeq.c     **** 	// End special handling
5825:src/xeq.c     **** 	XromFlags.xIN = 0;
5826:src/xeq.c     **** 
5827:src/xeq.c     **** 	// Restore the global return stack
5828:src/xeq.c     **** 	RetStk = XromUserRetStk;
5829:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
5830:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
5831:src/xeq.c     **** 
5832:src/xeq.c     **** 	// RTN or RTN+1 depending on bit 0 of argument
5833:src/xeq.c     **** 	do_rtn(arg & 1);
5834:src/xeq.c     **** 
5835:src/xeq.c     **** 	// Switch back to user stack settings
5836:src/xeq.c     **** 	dbl = UState.mode_double = XromFlags.mode_double;
5837:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
5838:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
5839:src/xeq.c     **** 	UState.stack_depth = XromFlags.stack_depth;
5840:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
5841:src/xeq.c     **** 
5842:src/xeq.c     **** 	// Last X handling and complex flag
5843:src/xeq.c     **** 	if (XromFlags.setLastX) {
5844:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
5845:src/xeq.c     **** 			setlastXY();
5846:src/xeq.c     **** 		else
5847:src/xeq.c     **** 			setlastX();
5848:src/xeq.c     **** 	}
5849:src/xeq.c     **** 
5850:src/xeq.c     **** 	// Move the stack according to the in/out fields
5851:src/xeq.c     **** 	i = (int) XromOut - (int) XromIn;
5852:src/xeq.c     **** 	if (XromFlags.complex) {
5853:src/xeq.c     **** 		set_was_complex();
5854:src/xeq.c     **** 		while (i < 0) {
ARM GAS  /tmp/ccK8IvWa.s 			page 684


5855:src/xeq.c     **** 			// different stack handling in complex mode
5856:src/xeq.c     **** 			// more to consume then to push back
5857:src/xeq.c     **** 			lower2();
5858:src/xeq.c     **** 			i += 2;
5859:src/xeq.c     **** 		}
5860:src/xeq.c     **** 	}
5861:src/xeq.c     **** 	else {
5862:src/xeq.c     **** 		while (i < 0) {
5863:src/xeq.c     **** 			// more to consume then to push back
5864:src/xeq.c     **** 			lower();	
5865:src/xeq.c     **** 			++i;
5866:src/xeq.c     **** 		}
5867:src/xeq.c     **** 	}
5868:src/xeq.c     **** 	if (i > 0) {
5869:src/xeq.c     **** 		// more to push back then to consume
5870:src/xeq.c     **** 		if (! XromFlags.state_lift_in)
5871:src/xeq.c     **** 			--i;
5872:src/xeq.c     **** 		while (i > 0) {
5873:src/xeq.c     **** 			lift();
5874:src/xeq.c     **** 			--i;
5875:src/xeq.c     **** 		}
5876:src/xeq.c     **** 	}
5877:src/xeq.c     **** 	State2.state_lift = XromFlags.state_lift;
5878:src/xeq.c     **** 
5879:src/xeq.c     **** 	// Copy results
5880:src/xeq.c     **** 	i = XromOut;
5881:src/xeq.c     **** 	if (intm) {
5882:src/xeq.c     **** 		while (i--) {
5883:src/xeq.c     **** 			decNumber r;
5884:src/xeq.c     **** 			decimal128ToNumber(&(XromStack[i].d), &r);
5885:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, intResult(&r));
5886:src/xeq.c     **** 		}
5887:src/xeq.c     **** 	}
5888:src/xeq.c     **** 	else if (dbl) {
5889:src/xeq.c     **** 		move_regs(StackBase, XromStack, i);
5890:src/xeq.c     **** 	}
5891:src/xeq.c     **** 	else {
5892:src/xeq.c     **** 		while (i--)
5893:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
5894:src/xeq.c     **** 	}
5895:src/xeq.c     **** 
5896:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5897:src/xeq.c     **** 	// Copy back local data
5898:src/xeq.c     **** 	if (XromFlags.copyLocals) {
5899:src/xeq.c     **** 		i = local_regs();
5900:src/xeq.c     **** 		num_locals = i < num_locals ? i : num_locals; 
5901:src/xeq.c     **** 		*flag_word(LOCAL_FLAG_BASE, NULL) = flags;
5902:src/xeq.c     **** 		if (intm) {
5903:src/xeq.c     **** 			// not used
5904:src/xeq.c     **** 		}
5905:src/xeq.c     **** 		else if (dbl) {
5906:src/xeq.c     **** 			move_regs(get_reg_n(LOCAL_REG_BASE), locals, num_locals);
5907:src/xeq.c     **** 		}
5908:src/xeq.c     **** 		else {
5909:src/xeq.c     **** 			decimal64  *dest = &(get_reg_n(LOCAL_REG_BASE)->s);
5910:src/xeq.c     **** 			decimal128 *src  = &(locals->d);
5911:src/xeq.c     **** 			while (num_locals--)
ARM GAS  /tmp/ccK8IvWa.s 			page 685


5912:src/xeq.c     **** 				packed_from_packed128(dest++, src++);
5913:src/xeq.c     **** 		}
5914:src/xeq.c     **** 	}
5915:src/xeq.c     **** #endif
5916:src/xeq.c     **** }
 26694              		.loc 1 5916 1 view .LVU7028
 26695 001a 0FB0     		add	sp, sp, #60
 26696              		.cfi_remember_state
 26697              		.cfi_def_cfa_offset 36
 26698              		@ sp needed
 26699 001c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 26700              	.LVL2098:
 26701              	.L1944:
 26702              		.cfi_restore_state
 26703              	.LBB3645:
 26704              	.LBB3646:
5830:src/xeq.c     **** 
 26705              		.loc 1 5830 12 view .LVU7029
 26706 0020 7049     		ldr	r1, .L1989+8
 26707              	.LVL2099:
5829:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 26708              		.loc 1 5829 12 view .LVU7030
 26709 0022 714E     		ldr	r6, .L1989+12
5825:src/xeq.c     **** 
 26710              		.loc 1 5825 16 view .LVU7031
 26711 0024 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
5828:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
 26712              		.loc 1 5828 9 view .LVU7032
 26713 0026 714A     		ldr	r2, .L1989+16
5829:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 26714              		.loc 1 5829 12 view .LVU7033
 26715 0028 A789     		ldrh	r7, [r4, #12]
 26716 002a A6F8E277 		strh	r7, [r6, #2018]	@ movhi
 26717 002e 0546     		mov	r5, r0
 26718              	.LVL2100:
5829:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 26719              		.loc 1 5829 12 view .LVU7034
 26720              	.LBE3646:
 26721              	.LBI3645:
5810:src/xeq.c     **** 	int i, dbl, intm;
 26722              		.loc 1 5810 6 is_stmt 1 view .LVU7035
 26723              	.LBB3675:
5825:src/xeq.c     **** 
 26724              		.loc 1 5825 2 view .LVU7036
5830:src/xeq.c     **** 
 26725              		.loc 1 5830 12 is_stmt 0 view .LVU7037
 26726 0030 0868     		ldr	r0, [r1]
 26727              	.LVL2101:
5830:src/xeq.c     **** 
 26728              		.loc 1 5830 12 view .LVU7038
 26729 0032 A6F8DE07 		strh	r0, [r6, #2014]	@ movhi
5828:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
 26730              		.loc 1 5828 9 view .LVU7039
 26731 0036 A168     		ldr	r1, [r4, #8]
 26732 0038 1160     		str	r1, [r2]
5825:src/xeq.c     **** 
 26733              		.loc 1 5825 16 view .LVU7040
ARM GAS  /tmp/ccK8IvWa.s 			page 686


 26734 003a 6FF3C713 		bfc	r3, #7, #1
5833:src/xeq.c     **** 
 26735              		.loc 1 5833 2 view .LVU7041
 26736 003e 05F00100 		and	r0, r5, #1
5825:src/xeq.c     **** 
 26737              		.loc 1 5825 16 view .LVU7042
 26738 0042 6370     		strb	r3, [r4, #1]
5828:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
 26739              		.loc 1 5828 2 is_stmt 1 view .LVU7043
5829:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 26740              		.loc 1 5829 2 view .LVU7044
5830:src/xeq.c     **** 
 26741              		.loc 1 5830 2 view .LVU7045
5833:src/xeq.c     **** 
 26742              		.loc 1 5833 2 view .LVU7046
 26743 0044 FFF7FEFF 		bl	do_rtn
 26744              	.LVL2102:
5836:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 26745              		.loc 1 5836 2 view .LVU7047
5836:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 26746              		.loc 1 5836 38 is_stmt 0 view .LVU7048
 26747 0048 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
5838:src/xeq.c     **** 	UState.stack_depth = XromFlags.stack_depth;
 26748              		.loc 1 5838 41 view .LVU7049
 26749 004a A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
5837:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 26750              		.loc 1 5837 21 view .LVU7050
 26751 004c D6F8E827 		ldr	r2, [r6, #2024]
5840:src/xeq.c     **** 
 26752              		.loc 1 5840 12 view .LVU7051
 26753 0050 DFF8A8A1 		ldr	r10, .L1989+32
5836:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 26754              		.loc 1 5836 38 view .LVU7052
 26755 0054 C3F3C009 		ubfx	r9, r3, #3, #1
 26756              	.LVL2103:
5837:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 26757              		.loc 1 5837 2 is_stmt 1 view .LVU7053
5837:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 26758              		.loc 1 5837 32 is_stmt 0 view .LVU7054
 26759 0058 03F00108 		and	r8, r3, #1
 26760              	.LVL2104:
5838:src/xeq.c     **** 	UState.stack_depth = XromFlags.stack_depth;
 26761              		.loc 1 5838 9 is_stmt 1 view .LVU7055
5839:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 26762              		.loc 1 5839 2 view .LVU7056
5837:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 26763              		.loc 1 5837 21 is_stmt 0 view .LVU7057
 26764 005c C3F38001 		ubfx	r1, r3, #2, #1
 26765 0060 48EA8933 		orr	r3, r8, r9, lsl #14
 26766              	.LVL2105:
5837:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 26767              		.loc 1 5837 21 view .LVU7058
 26768 0064 43EAC143 		orr	r3, r3, r1, lsl #19
 26769 0068 6149     		ldr	r1, .L1989+20
 26770 006a 00F00700 		and	r0, r0, #7
 26771 006e 1140     		ands	r1, r1, r2
 26772 0070 43EA0073 		orr	r3, r3, r0, lsl #28
ARM GAS  /tmp/ccK8IvWa.s 			page 687


 26773 0074 0B43     		orrs	r3, r3, r1
5840:src/xeq.c     **** 
 26774              		.loc 1 5840 14 view .LVU7059
 26775 0076 6420     		movs	r0, #100
5837:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 26776              		.loc 1 5837 21 view .LVU7060
 26777 0078 C6F8E837 		str	r3, [r6, #2024]
5840:src/xeq.c     **** 
 26778              		.loc 1 5840 2 is_stmt 1 view .LVU7061
5840:src/xeq.c     **** 
 26779              		.loc 1 5840 14 is_stmt 0 view .LVU7062
 26780 007c FFF7FEFF 		bl	get_reg_n
 26781              	.LVL2106:
5843:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
 26782              		.loc 1 5843 6 view .LVU7063
 26783 0080 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
5840:src/xeq.c     **** 
 26784              		.loc 1 5840 12 view .LVU7064
 26785 0082 CAF80000 		str	r0, [r10]
5843:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
 26786              		.loc 1 5843 2 is_stmt 1 view .LVU7065
5843:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
 26787              		.loc 1 5843 5 is_stmt 0 view .LVU7066
 26788 0086 9706     		lsls	r7, r2, #26
 26789 0088 09D5     		bpl	.L1947
5844:src/xeq.c     **** 			setlastXY();
 26790              		.loc 1 5844 3 is_stmt 1 view .LVU7067
5844:src/xeq.c     **** 			setlastXY();
 26791              		.loc 1 5844 6 is_stmt 0 view .LVU7068
 26792 008a D006     		lsls	r0, r2, #27
 26793 008c 02D5     		bpl	.L1948
5844:src/xeq.c     **** 			setlastXY();
 26794              		.loc 1 5844 25 view .LVU7069
 26795 008e A907     		lsls	r1, r5, #30
 26796 0090 40F19E80 		bpl	.L1985
 26797              	.L1948:
5847:src/xeq.c     **** 	}
 26798              		.loc 1 5847 4 is_stmt 1 view .LVU7070
 26799              	.LBB3647:
 26800              	.LBI3647:
 759:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 26801              		.loc 1 759 6 view .LVU7071
 26802              	.LBB3648:
 760:src/xeq.c     **** }
 26803              		.loc 1 760 2 view .LVU7072
 26804 0094 6421     		movs	r1, #100
 26805 0096 6C20     		movs	r0, #108
 26806 0098 FFF7FEFF 		bl	copyreg_n
 26807              	.LVL2107:
 26808 009c 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 26809              	.L1947:
 26810              	.LBE3648:
 26811              	.LBE3647:
5851:src/xeq.c     **** 	if (XromFlags.complex) {
 26812              		.loc 1 5851 2 view .LVU7073
5851:src/xeq.c     **** 	if (XromFlags.complex) {
 26813              		.loc 1 5851 6 is_stmt 0 view .LVU7074
ARM GAS  /tmp/ccK8IvWa.s 			page 688


 26814 009e 94F805B0 		ldrb	fp, [r4, #5]	@ zero_extendqisi2
5851:src/xeq.c     **** 	if (XromFlags.complex) {
 26815              		.loc 1 5851 22 view .LVU7075
 26816 00a2 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
5852:src/xeq.c     **** 		set_was_complex();
 26817              		.loc 1 5852 5 view .LVU7076
 26818 00a4 D206     		lsls	r2, r2, #27
5851:src/xeq.c     **** 	if (XromFlags.complex) {
 26819              		.loc 1 5851 4 view .LVU7077
 26820 00a6 ABEB030B 		sub	fp, fp, r3
 26821              	.LVL2108:
5852:src/xeq.c     **** 		set_was_complex();
 26822              		.loc 1 5852 2 is_stmt 1 view .LVU7078
5852:src/xeq.c     **** 		set_was_complex();
 26823              		.loc 1 5852 5 is_stmt 0 view .LVU7079
 26824 00aa 2BD5     		bpl	.L1986
5853:src/xeq.c     **** 		while (i < 0) {
 26825              		.loc 1 5853 3 is_stmt 1 view .LVU7080
 26826              	.LBB3649:
 26827              	.LBI3649:
 516:src/xeq.c     **** 	State2.wascomplex = 1;
 26828              		.loc 1 516 13 view .LVU7081
 26829              	.LBB3650:
 517:src/xeq.c     **** }
 26830              		.loc 1 517 2 view .LVU7082
 517:src/xeq.c     **** }
 26831              		.loc 1 517 20 is_stmt 0 view .LVU7083
 26832 00ac 514F     		ldr	r7, .L1989+24
 26833 00ae 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
 26834 00b0 0121     		movs	r1, #1
 26835 00b2 61F38712 		bfi	r2, r1, #6, #2
 26836              	.LBE3650:
 26837              	.LBE3649:
5854:src/xeq.c     **** 			// different stack handling in complex mode
 26838              		.loc 1 5854 9 view .LVU7084
 26839 00b6 BBF1000F 		cmp	fp, #0
 26840              	.LBB3652:
 26841              	.LBB3651:
 517:src/xeq.c     **** }
 26842              		.loc 1 517 20 view .LVU7085
 26843 00ba 3A75     		strb	r2, [r7, #20]
 517:src/xeq.c     **** }
 26844              		.loc 1 517 20 view .LVU7086
 26845              	.LBE3651:
 26846              	.LBE3652:
5854:src/xeq.c     **** 			// different stack handling in complex mode
 26847              		.loc 1 5854 9 is_stmt 1 view .LVU7087
 26848 00bc 13DA     		bge	.L1951
 26849 00be 6FEA0B03 		mvn	r3, fp
 26850 00c2 23F00105 		bic	r5, r3, #1
 26851              	.LVL2109:
5854:src/xeq.c     **** 			// different stack handling in complex mode
 26852              		.loc 1 5854 9 is_stmt 0 view .LVU7088
 26853 00c6 0093     		str	r3, [sp]
 26854 00c8 0BF10203 		add	r3, fp, #2
 26855 00cc 0193     		str	r3, [sp, #4]
 26856 00ce 1D44     		add	r5, r5, r3
ARM GAS  /tmp/ccK8IvWa.s 			page 689


 26857              	.L1952:
5857:src/xeq.c     **** 			i += 2;
 26858              		.loc 1 5857 4 is_stmt 1 view .LVU7089
5858:src/xeq.c     **** 		}
 26859              		.loc 1 5858 6 is_stmt 0 view .LVU7090
 26860 00d0 0BF1020B 		add	fp, fp, #2
 26861              	.LVL2110:
5857:src/xeq.c     **** 			i += 2;
 26862              		.loc 1 5857 4 view .LVU7091
 26863 00d4 FFF7FEFF 		bl	lower2
 26864              	.LVL2111:
5858:src/xeq.c     **** 		}
 26865              		.loc 1 5858 4 is_stmt 1 view .LVU7092
5854:src/xeq.c     **** 			// different stack handling in complex mode
 26866              		.loc 1 5854 9 view .LVU7093
 26867 00d8 AB45     		cmp	fp, r5
 26868 00da F9D1     		bne	.L1952
 26869 00dc 009B     		ldr	r3, [sp]
 26870 00de 23F0010B 		bic	fp, r3, #1
 26871              	.LVL2112:
5854:src/xeq.c     **** 			// different stack handling in complex mode
 26872              		.loc 1 5854 9 is_stmt 0 view .LVU7094
 26873 00e2 019B     		ldr	r3, [sp, #4]
 26874 00e4 9B44     		add	fp, fp, r3
 26875              	.L1951:
 26876              	.LVL2113:
5868:src/xeq.c     **** 		// more to push back then to consume
 26877              		.loc 1 5868 2 is_stmt 1 view .LVU7095
5868:src/xeq.c     **** 		// more to push back then to consume
 26878              		.loc 1 5868 5 is_stmt 0 view .LVU7096
 26879 00e6 BBF1000F 		cmp	fp, #0
 26880 00ea 14D0     		beq	.L1953
5870:src/xeq.c     **** 			--i;
 26881              		.loc 1 5870 3 is_stmt 1 view .LVU7097
5870:src/xeq.c     **** 			--i;
 26882              		.loc 1 5870 7 is_stmt 0 view .LVU7098
 26883 00ec 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
5870:src/xeq.c     **** 			--i;
 26884              		.loc 1 5870 6 view .LVU7099
 26885 00ee 9307     		lsls	r3, r2, #30
 26886 00f0 02D4     		bmi	.L1958
5871:src/xeq.c     **** 		while (i > 0) {
 26887              		.loc 1 5871 4 is_stmt 1 view .LVU7100
 26888              	.LVL2114:
5872:src/xeq.c     **** 			lift();
 26889              		.loc 1 5872 9 view .LVU7101
 26890 00f2 BBF1010B 		subs	fp, fp, #1
 26891              	.LVL2115:
5872:src/xeq.c     **** 			lift();
 26892              		.loc 1 5872 9 is_stmt 0 view .LVU7102
 26893 00f6 0ED0     		beq	.L1953
 26894              	.L1958:
5873:src/xeq.c     **** 			--i;
 26895              		.loc 1 5873 4 is_stmt 1 view .LVU7103
 26896 00f8 FFF7FEFF 		bl	lift
 26897              	.LVL2116:
5874:src/xeq.c     **** 		}
ARM GAS  /tmp/ccK8IvWa.s 			page 690


 26898              		.loc 1 5874 4 view .LVU7104
5872:src/xeq.c     **** 			lift();
 26899              		.loc 1 5872 9 view .LVU7105
 26900 00fc BBF1010B 		subs	fp, fp, #1
 26901              	.LVL2117:
5872:src/xeq.c     **** 			lift();
 26902              		.loc 1 5872 9 is_stmt 0 view .LVU7106
 26903 0100 FAD1     		bne	.L1958
 26904 0102 08E0     		b	.L1953
 26905              	.LVL2118:
 26906              	.L1986:
5862:src/xeq.c     **** 			// more to consume then to push back
 26907              		.loc 1 5862 9 is_stmt 1 view .LVU7107
 26908 0104 BBF1000F 		cmp	fp, #0
 26909 0108 66DA     		bge	.L1987
 26910              	.L1950:
5864:src/xeq.c     **** 			++i;
 26911              		.loc 1 5864 4 view .LVU7108
 26912 010a FFF7FEFF 		bl	lower
 26913              	.LVL2119:
5865:src/xeq.c     **** 		}
 26914              		.loc 1 5865 4 view .LVU7109
5862:src/xeq.c     **** 			// more to consume then to push back
 26915              		.loc 1 5862 9 view .LVU7110
 26916 010e 1BF1010B 		adds	fp, fp, #1
 26917              	.LVL2120:
5862:src/xeq.c     **** 			// more to consume then to push back
 26918              		.loc 1 5862 9 is_stmt 0 view .LVU7111
 26919 0112 FAD1     		bne	.L1950
 26920 0114 374F     		ldr	r7, .L1989+24
 26921              	.LVL2121:
 26922              	.L1953:
5877:src/xeq.c     **** 
 26923              		.loc 1 5877 2 is_stmt 1 view .LVU7112
5877:src/xeq.c     **** 
 26924              		.loc 1 5877 31 is_stmt 0 view .LVU7113
 26925 0116 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
5877:src/xeq.c     **** 
 26926              		.loc 1 5877 20 view .LVU7114
 26927 0118 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
5880:src/xeq.c     **** 	if (intm) {
 26928              		.loc 1 5880 4 view .LVU7115
 26929 011a 6479     		ldrb	r4, [r4, #5]	@ zero_extendqisi2
5877:src/xeq.c     **** 
 26930              		.loc 1 5877 31 view .LVU7116
 26931 011c C3F38013 		ubfx	r3, r3, #6, #1
5877:src/xeq.c     **** 
 26932              		.loc 1 5877 20 view .LVU7117
 26933 0120 63F38612 		bfi	r2, r3, #6, #1
 26934 0124 FA75     		strb	r2, [r7, #23]
5880:src/xeq.c     **** 	if (intm) {
 26935              		.loc 1 5880 2 is_stmt 1 view .LVU7118
 26936              	.LVL2122:
5881:src/xeq.c     **** 		while (i--) {
 26937              		.loc 1 5881 2 view .LVU7119
5881:src/xeq.c     **** 		while (i--) {
 26938              		.loc 1 5881 5 is_stmt 0 view .LVU7120
ARM GAS  /tmp/ccK8IvWa.s 			page 691


 26939 0126 B8F1000F 		cmp	r8, #0
 26940 012a 23D0     		beq	.L1988
5882:src/xeq.c     **** 			decNumber r;
 26941              		.loc 1 5882 9 is_stmt 1 view .LVU7121
5882:src/xeq.c     **** 			decNumber r;
 26942              		.loc 1 5882 11 is_stmt 0 view .LVU7122
 26943 012c 631E     		subs	r3, r4, #1
 26944              	.LVL2123:
5882:src/xeq.c     **** 			decNumber r;
 26945              		.loc 1 5882 9 view .LVU7123
 26946 012e 002C     		cmp	r4, #0
 26947 0130 3FF473AF 		beq	.L1943
 26948 0134 304D     		ldr	r5, .L1989+28
 26949 0136 6334     		adds	r4, r4, #99
 26950 0138 05EB0315 		add	r5, r5, r3, lsl #4
 26951 013c 05AE     		add	r6, sp, #20
 26952              	.LVL2124:
 26953              	.L1960:
 26954              	.LBB3653:
5883:src/xeq.c     **** 			decimal128ToNumber(&(XromStack[i].d), &r);
 26955              		.loc 1 5883 4 is_stmt 1 view .LVU7124
5884:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, intResult(&r));
 26956              		.loc 1 5884 4 view .LVU7125
 26957 013e 3146     		mov	r1, r6
 26958 0140 2846     		mov	r0, r5
 26959 0142 FFF7FEFF 		bl	decimal128ToNumber
 26960              	.LVL2125:
5885:src/xeq.c     **** 		}
 26961              		.loc 1 5885 4 view .LVU7126
 26962 0146 3046     		mov	r0, r6
 26963 0148 FFF7FEFF 		bl	intResult
 26964              	.LVL2126:
5885:src/xeq.c     **** 		}
 26965              		.loc 1 5885 4 is_stmt 0 view .LVU7127
 26966 014c 0246     		mov	r2, r0
 26967 014e 0B46     		mov	r3, r1
 26968              	.LBB3654:
 26969              	.LBB3655:
1223:src/xeq.c     **** }
 26970              		.loc 1 1223 8 view .LVU7128
 26971 0150 2046     		mov	r0, r4
 26972 0152 CDE90223 		strd	r2, [sp, #8]
 26973              	.LVL2127:
1223:src/xeq.c     **** }
 26974              		.loc 1 1223 8 view .LVU7129
 26975              	.LBE3655:
 26976              	.LBI3654:
1222:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 26977              		.loc 1 1222 6 is_stmt 1 view .LVU7130
 26978              	.LBB3656:
1223:src/xeq.c     **** }
 26979              		.loc 1 1223 2 view .LVU7131
1223:src/xeq.c     **** }
 26980              		.loc 1 1223 8 is_stmt 0 view .LVU7132
 26981 0156 FFF7FEFF 		bl	get_reg_n
 26982              	.LVL2128:
1223:src/xeq.c     **** }
ARM GAS  /tmp/ccK8IvWa.s 			page 692


 26983              		.loc 1 1223 2 view .LVU7133
 26984 015a 0822     		movs	r2, #8
 26985 015c 013C     		subs	r4, r4, #1
 26986              	.LVL2129:
1223:src/xeq.c     **** }
 26987              		.loc 1 1223 2 view .LVU7134
 26988 015e 0DEB0201 		add	r1, sp, r2
 26989 0162 FFF7FEFF 		bl	xcopy
 26990              	.LVL2130:
1223:src/xeq.c     **** }
 26991              		.loc 1 1223 2 view .LVU7135
 26992              	.LBE3656:
 26993              	.LBE3654:
 26994              	.LBE3653:
5882:src/xeq.c     **** 			decNumber r;
 26995              		.loc 1 5882 9 is_stmt 1 view .LVU7136
 26996 0166 632C     		cmp	r4, #99
 26997 0168 A5F11005 		sub	r5, r5, #16
 26998 016c E7D1     		bne	.L1960
 26999              	.LBE3675:
 27000              	.LBE3645:
 27001              		.loc 1 5916 1 is_stmt 0 view .LVU7137
 27002 016e 0FB0     		add	sp, sp, #60
 27003              		.cfi_remember_state
 27004              		.cfi_def_cfa_offset 36
 27005              		@ sp needed
 27006 0170 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 27007              	.LVL2131:
 27008              	.L1988:
 27009              		.cfi_restore_state
 27010              	.LBB3677:
 27011              	.LBB3676:
5888:src/xeq.c     **** 		move_regs(StackBase, XromStack, i);
 27012              		.loc 1 5888 7 is_stmt 1 view .LVU7138
5888:src/xeq.c     **** 		move_regs(StackBase, XromStack, i);
 27013              		.loc 1 5888 10 is_stmt 0 view .LVU7139
 27014 0174 B9F1000F 		cmp	r9, #0
 27015 0178 1AD1     		bne	.L1961
5892:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 27016              		.loc 1 5892 9 is_stmt 1 view .LVU7140
5892:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 27017              		.loc 1 5892 11 is_stmt 0 view .LVU7141
 27018 017a 631E     		subs	r3, r4, #1
 27019              	.LVL2132:
5892:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 27020              		.loc 1 5892 9 view .LVU7142
 27021 017c 002C     		cmp	r4, #0
 27022 017e 3FF44CAF 		beq	.L1943
 27023 0182 1D4F     		ldr	r7, .L1989+28
 27024 0184 6334     		adds	r4, r4, #99
 27025 0186 07EB0317 		add	r7, r7, r3, lsl #4
 27026 018a 05AE     		add	r6, sp, #20
 27027              	.LVL2133:
 27028              	.L1964:
5893:src/xeq.c     **** 	}
 27029              		.loc 1 5893 4 is_stmt 1 view .LVU7143
 27030              	.LBB3657:
ARM GAS  /tmp/ccK8IvWa.s 			page 693


 27031              	.LBI3657:
 695:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 27032              		.loc 1 695 11 view .LVU7144
 27033              	.LBB3658:
 696:src/xeq.c     **** }
 27034              		.loc 1 696 2 view .LVU7145
 696:src/xeq.c     **** }
 27035              		.loc 1 696 9 is_stmt 0 view .LVU7146
 27036 018c 2046     		mov	r0, r4
 27037 018e FFF7FEFF 		bl	get_reg_n
 27038              	.LVL2134:
 27039              	.LBE3658:
 27040              	.LBE3657:
 27041              	.LBB3660:
 27042              	.LBB3661:
 627:src/xeq.c     **** }
 27043              		.loc 1 627 24 view .LVU7147
 27044 0192 3146     		mov	r1, r6
 27045              	.LBE3661:
 27046              	.LBE3660:
 27047              	.LBB3663:
 27048              	.LBB3659:
 696:src/xeq.c     **** }
 27049              		.loc 1 696 9 view .LVU7148
 27050 0194 0546     		mov	r5, r0
 27051              	.LVL2135:
 696:src/xeq.c     **** }
 27052              		.loc 1 696 9 view .LVU7149
 27053              	.LBE3659:
 27054              	.LBE3663:
 27055              	.LBB3664:
 27056              	.LBI3660:
 625:src/xeq.c     **** 	decNumber temp;
 27057              		.loc 1 625 6 is_stmt 1 view .LVU7150
 27058              	.LBB3662:
 626:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 27059              		.loc 1 626 2 view .LVU7151
 627:src/xeq.c     **** }
 27060              		.loc 1 627 2 view .LVU7152
 627:src/xeq.c     **** }
 27061              		.loc 1 627 24 is_stmt 0 view .LVU7153
 27062 0196 3846     		mov	r0, r7
 27063              	.LVL2136:
 627:src/xeq.c     **** }
 27064              		.loc 1 627 24 view .LVU7154
 27065 0198 FFF7FEFF 		bl	decimal128ToNumber
 27066              	.LVL2137:
 27067 019c 013C     		subs	r4, r4, #1
 27068              	.LVL2138:
 627:src/xeq.c     **** }
 27069              		.loc 1 627 24 view .LVU7155
 27070 019e 0146     		mov	r1, r0
 627:src/xeq.c     **** }
 27071              		.loc 1 627 2 view .LVU7156
 27072 01a0 2846     		mov	r0, r5
 27073 01a2 FFF7FEFF 		bl	packed_from_number
 27074              	.LVL2139:
ARM GAS  /tmp/ccK8IvWa.s 			page 694


 627:src/xeq.c     **** }
 27075              		.loc 1 627 2 view .LVU7157
 27076              	.LBE3662:
 27077              	.LBE3664:
5892:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 27078              		.loc 1 5892 9 is_stmt 1 view .LVU7158
5892:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 27079              		.loc 1 5892 9 is_stmt 0 view .LVU7159
 27080 01a6 632C     		cmp	r4, #99
 27081 01a8 A7F11007 		sub	r7, r7, #16
 27082 01ac EED1     		bne	.L1964
 27083 01ae 34E7     		b	.L1943
 27084              	.LVL2140:
 27085              	.L1961:
5889:src/xeq.c     **** 	}
 27086              		.loc 1 5889 3 is_stmt 1 view .LVU7160
 27087              	.LBB3665:
 27088              	.LBB3666:
 27089              	.LBB3667:
 27090              	.LBB3668:
 919:src/xeq.c     **** }
 27091              		.loc 1 919 24 is_stmt 0 view .LVU7161
 27092 01b0 B6F8E827 		ldrh	r2, [r6, #2024]
 27093              	.LBE3668:
 27094              	.LBE3667:
 27095              	.LBE3666:
 27096              	.LBE3665:
5889:src/xeq.c     **** 	}
 27097              		.loc 1 5889 3 view .LVU7162
 27098 01b4 DAF80000 		ldr	r0, [r10]
 27099              	.LVL2141:
 27100              	.LBB3674:
 27101              	.LBI3665:
1337:src/xeq.c     **** 	if (is_dblmode())
 27102              		.loc 1 1337 6 is_stmt 1 view .LVU7163
 27103              	.LBB3673:
1338:src/xeq.c     **** 		n <<= 1;
 27104              		.loc 1 1338 2 view .LVU7164
 27105              	.LBB3671:
 27106              	.LBI3667:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 27107              		.loc 1 918 5 view .LVU7165
 27108              	.LBB3669:
 919:src/xeq.c     **** }
 27109              		.loc 1 919 2 view .LVU7166
 27110              	.LBE3669:
 27111              	.LBE3671:
1340:src/xeq.c     **** }
 27112              		.loc 1 1340 2 is_stmt 0 view .LVU7167
 27113 01b8 0F49     		ldr	r1, .L1989+28
 27114              	.LBB3672:
 27115              	.LBB3670:
 919:src/xeq.c     **** }
 27116              		.loc 1 919 24 view .LVU7168
 27117 01ba 44F20103 		movw	r3, #16385
 27118              	.LBE3670:
 27119              	.LBE3672:
ARM GAS  /tmp/ccK8IvWa.s 			page 695


1338:src/xeq.c     **** 		n <<= 1;
 27120              		.loc 1 1338 5 view .LVU7169
 27121 01be 1340     		ands	r3, r3, r2
 27122 01c0 B3F5804F 		cmp	r3, #16384
1339:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 27123              		.loc 1 1339 3 is_stmt 1 view .LVU7170
1339:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 27124              		.loc 1 1339 5 is_stmt 0 view .LVU7171
 27125 01c4 08BF     		it	eq
 27126 01c6 6400     		lsleq	r4, r4, #1
 27127              	.LVL2142:
1340:src/xeq.c     **** }
 27128              		.loc 1 1340 2 is_stmt 1 view .LVU7172
 27129 01c8 E200     		lsls	r2, r4, #3
 27130 01ca FFF7FEFF 		bl	xcopy
 27131              	.LVL2143:
1341:src/xeq.c     **** 
 27132              		.loc 1 1341 1 is_stmt 0 view .LVU7173
 27133 01ce 24E7     		b	.L1943
 27134              	.LVL2144:
 27135              	.L1985:
1341:src/xeq.c     **** 
 27136              		.loc 1 1341 1 view .LVU7174
 27137              	.LBE3673:
 27138              	.LBE3674:
5845:src/xeq.c     **** 		else
 27139              		.loc 1 5845 4 is_stmt 1 view .LVU7175
 27140 01d0 FFF7FEFF 		bl	setlastXY
 27141              	.LVL2145:
 27142 01d4 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 27143 01d6 62E7     		b	.L1947
 27144              	.LVL2146:
 27145              	.L1987:
5845:src/xeq.c     **** 		else
 27146              		.loc 1 5845 4 is_stmt 0 view .LVU7176
 27147 01d8 064F     		ldr	r7, .L1989+24
 27148 01da 84E7     		b	.L1951
 27149              	.L1990:
 27150              		.align	2
 27151              	.L1989:
 27152 01dc 00000000 		.word	XromParams
 27153 01e0 00000000 		.word	Error
 27154 01e4 00000000 		.word	UserLocalRegs
 27155 01e8 00000000 		.word	PersistentRam
 27156 01ec 00000000 		.word	RetStk
 27157 01f0 FEBFF78F 		.word	-1879588866
 27158 01f4 00000000 		.word	StateWhileOn
 27159 01f8 00000000 		.word	XromLocal
 27160 01fc 00000000 		.word	StackBase
 27161              	.LBE3676:
 27162              	.LBE3677:
 27163              		.cfi_endproc
 27164              	.LFE264:
 27166              		.section	.text.cmdconverged,"ax",%progbits
 27167              		.align	1
 27168              		.p2align 2,,3
 27169              		.global	cmdconverged
ARM GAS  /tmp/ccK8IvWa.s 			page 696


 27170              		.syntax unified
 27171              		.thumb
 27172              		.thumb_func
 27173              		.fpu fpv4-sp-d16
 27175              	cmdconverged:
 27176              	.LVL2147:
 27177              	.LFB265:
5917:src/xeq.c     **** 
5918:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
5919:src/xeq.c     **** /*
5920:src/xeq.c     ****  *  Allow access to command argument from XROM
5921:src/xeq.c     ****  */
5922:src/xeq.c     **** void cmdxarg(unsigned int arg, enum rarg op) {
5923:src/xeq.c     **** 	set_reg_n_int_sgn(arg, XromArg, 0);
5924:src/xeq.c     **** }
5925:src/xeq.c     **** #endif
5926:src/xeq.c     **** 
5927:src/xeq.c     **** 
5928:src/xeq.c     **** /* A slightly obtuse command to check for convergence.
5929:src/xeq.c     ****  * Arguments are organised bitwise in this form:
5930:src/xeq.c     ****  *
5931:src/xeq.c     ****  *	SMMTT
5932:src/xeq.c     ****  *
5933:src/xeq.c     ****  * where:
5934:src/xeq.c     ****  *	TT is the tolerance parameter:
5935:src/xeq.c     ****  *
5936:src/xeq.c     ****  *	  	0	1e-14 tolerance
5937:src/xeq.c     ****  *	  	1	1e-24 tolerance
5938:src/xeq.c     ****  *	  	2	1e-32 tolerance
5939:src/xeq.c     ****  *	  	3	choose the best tolerance for the current modes
5940:src/xeq.c     ****  *			for user mode this means 0 for single precision and 2 for double precision
5941:src/xeq.c     ****  *
5942:src/xeq.c     ****  *	MM is the mode parameter:
5943:src/xeq.c     ****  *	  	0	compare real X & Y relatively
5944:src/xeq.c     ****  *	  	1	compare real X & Y absolutely
5945:src/xeq.c     ****  *	  	2	compare complex X/Y & Z/T for absolute difference
5946:src/xeq.c     ****  *	  	3	compare real X & Y relatively
5947:src/xeq.c     ****  *
5948:src/xeq.c     ****  *	S is the special number validation:
5949:src/xeq.c     ****  *		0	Nan & infinities are considered converged
5950:src/xeq.c     ****  *		1	NaN & infinities are not considered converged
5951:src/xeq.c     ****  *
5952:src/xeq.c     ****  * In integer mode, the arguemnt is completely ignored and an equality
5953:src/xeq.c     ****  * comparision is undertaken instead.
5954:src/xeq.c     ****  */
5955:src/xeq.c     **** static const decNumber * const convergence_tolerances[3] = {
5956:src/xeq.c     **** 	&const_1e_14, &const_1e_24, &const_1e_32
5957:src/xeq.c     **** };
5958:src/xeq.c     **** 
5959:src/xeq.c     **** void cmdconverged(unsigned int arg, enum rarg cmd) {
 27178              		.loc 1 5959 52 is_stmt 1 view -0
 27179              		.cfi_startproc
 27180              		@ args = 0, pretend = 0, frame = 216
 27181              		@ frame_needed = 0, uses_anonymous_args = 0
5960:src/xeq.c     **** 	const decNumber *tolerance;
 27182              		.loc 1 5960 2 view .LVU7178
5961:src/xeq.c     **** 	unsigned int tol = arg & 3;
ARM GAS  /tmp/ccK8IvWa.s 			page 697


 27183              		.loc 1 5961 2 view .LVU7179
5959:src/xeq.c     **** 	const decNumber *tolerance;
 27184              		.loc 1 5959 52 is_stmt 0 view .LVU7180
 27185 0000 70B5     		push	{r4, r5, r6, lr}
 27186              		.cfi_def_cfa_offset 16
 27187              		.cfi_offset 4, -16
 27188              		.cfi_offset 5, -12
 27189              		.cfi_offset 6, -8
 27190              		.cfi_offset 14, -4
5962:src/xeq.c     **** 	const unsigned int mode = (arg >> 2) & 3;
5963:src/xeq.c     **** 	const int specials = arg & 0x10;
5964:src/xeq.c     **** 	const int complex = mode == 2;
5965:src/xeq.c     **** 	const int absolute = mode == 1;
5966:src/xeq.c     **** 	decNumber t, x, y, z, a, b;
5967:src/xeq.c     **** 	int res;
5968:src/xeq.c     **** 
5969:src/xeq.c     **** 	if (is_intmode()) {
 27191              		.loc 1 5969 6 view .LVU7181
 27192 0002 364A     		ldr	r2, .L2006
 27193 0004 92F8E817 		ldrb	r1, [r2, #2024]	@ zero_extendqisi2
 27194              	.LVL2148:
5962:src/xeq.c     **** 	const unsigned int mode = (arg >> 2) & 3;
 27195              		.loc 1 5962 2 is_stmt 1 view .LVU7182
5963:src/xeq.c     **** 	const int complex = mode == 2;
 27196              		.loc 1 5963 2 view .LVU7183
5964:src/xeq.c     **** 	const int absolute = mode == 1;
 27197              		.loc 1 5964 2 view .LVU7184
5965:src/xeq.c     **** 	decNumber t, x, y, z, a, b;
 27198              		.loc 1 5965 2 view .LVU7185
5966:src/xeq.c     **** 	int res;
 27199              		.loc 1 5966 2 view .LVU7186
5967:src/xeq.c     **** 
 27200              		.loc 1 5967 2 view .LVU7187
 27201              		.loc 1 5969 2 view .LVU7188
 27202              		.loc 1 5969 5 is_stmt 0 view .LVU7189
 27203 0008 CB07     		lsls	r3, r1, #31
5959:src/xeq.c     **** 	const decNumber *tolerance;
 27204              		.loc 1 5959 52 view .LVU7190
 27205 000a B8B0     		sub	sp, sp, #224
 27206              		.cfi_def_cfa_offset 240
 27207              		.loc 1 5969 5 view .LVU7191
 27208 000c 35D4     		bmi	.L2002
 27209 000e 00F00303 		and	r3, r0, #3
 27210              	.LVL2149:
5970:src/xeq.c     **** 		do_tst(regY_idx, TST_EQ);
5971:src/xeq.c     **** 		return;
5972:src/xeq.c     **** 	}
5973:src/xeq.c     **** 
5974:src/xeq.c     **** 	if (tol == 3) {
 27211              		.loc 1 5974 5 view .LVU7192
 27212 0012 032B     		cmp	r3, #3
 27213 0014 0446     		mov	r4, r0
 27214 0016 00F01005 		and	r5, r0, #16
 27215              	.LVL2150:
 27216              		.loc 1 5974 2 is_stmt 1 view .LVU7193
 27217              		.loc 1 5974 5 is_stmt 0 view .LVU7194
 27218 001a 24D0     		beq	.L1994
ARM GAS  /tmp/ccK8IvWa.s 			page 698


 27219 001c 304A     		ldr	r2, .L2006+4
 27220 001e 52F82360 		ldr	r6, [r2, r3, lsl #2]
 27221              	.LVL2151:
 27222              	.L1995:
5975:src/xeq.c     **** 		if (is_dblmode())
5976:src/xeq.c     **** 			tol = (! XromFlags.xIN || XromFlags.mode_double) ? 2 : 1;
5977:src/xeq.c     **** 		else
5978:src/xeq.c     **** 			tol = 0;
5979:src/xeq.c     **** 	}
5980:src/xeq.c     **** 	tolerance = convergence_tolerances[tol];
 27223              		.loc 1 5980 2 is_stmt 1 view .LVU7195
5981:src/xeq.c     **** 
5982:src/xeq.c     **** 	getXYZT(&x, &y, &z, &t);
 27224              		.loc 1 5982 2 view .LVU7196
 27225              	.LBB3678:
 27226              	.LBI3678:
 843:src/xeq.c     **** 	getXYZ(x, y, z);
 27227              		.loc 1 843 6 view .LVU7197
 27228              	.LBB3679:
 844:src/xeq.c     **** 	getT(t);
 27229              		.loc 1 844 2 view .LVU7198
 27230 0022 1DAA     		add	r2, sp, #116
 27231              	.LVL2152:
 844:src/xeq.c     **** 	getT(t);
 27232              		.loc 1 844 2 is_stmt 0 view .LVU7199
 27233 0024 14A9     		add	r1, sp, #80
 27234              	.LVL2153:
 844:src/xeq.c     **** 	getT(t);
 27235              		.loc 1 844 2 view .LVU7200
 27236 0026 0BA8     		add	r0, sp, #44
 27237              	.LVL2154:
 844:src/xeq.c     **** 	getT(t);
 27238              		.loc 1 844 2 view .LVU7201
 27239 0028 FFF7FEFF 		bl	getXYZ
 27240              	.LVL2155:
 845:src/xeq.c     **** }
 27241              		.loc 1 845 2 is_stmt 1 view .LVU7202
 27242              	.LBB3680:
 27243              	.LBI3680:
 817:src/xeq.c     **** 	getRegister(t, regT_idx);
 27244              		.loc 1 817 13 view .LVU7203
 27245              	.LBB3681:
 818:src/xeq.c     **** }
 27246              		.loc 1 818 2 view .LVU7204
 27247 002c 02A8     		add	r0, sp, #8
 27248              	.LVL2156:
 818:src/xeq.c     **** }
 27249              		.loc 1 818 2 is_stmt 0 view .LVU7205
 27250 002e 6721     		movs	r1, #103
 27251 0030 FFF7FEFF 		bl	getRegister
 27252              	.LVL2157:
 818:src/xeq.c     **** }
 27253              		.loc 1 818 2 view .LVU7206
 27254              	.LBE3681:
 27255              	.LBE3680:
 27256              	.LBE3679:
 27257              	.LBE3678:
ARM GAS  /tmp/ccK8IvWa.s 			page 699


5983:src/xeq.c     **** 	if (decNumberIsSpecial(&x) || decNumberIsSpecial(&y))
 27258              		.loc 1 5983 2 is_stmt 1 view .LVU7207
 27259              		.loc 1 5983 29 is_stmt 0 view .LVU7208
 27260 0034 9DF83430 		ldrb	r3, [sp, #52]	@ zero_extendqisi2
 27261 0038 9DF85820 		ldrb	r2, [sp, #88]	@ zero_extendqisi2
 27262 003c 1343     		orrs	r3, r3, r2
 27263 003e 13F0700F 		tst	r3, #112
 27264 0042 0BD1     		bne	.L1996
5962:src/xeq.c     **** 	const int specials = arg & 0x10;
 27265              		.loc 1 5962 21 view .LVU7209
 27266 0044 C4F38104 		ubfx	r4, r4, #2, #2
 27267              	.LVL2158:
5984:src/xeq.c     **** 		res = specials;
5985:src/xeq.c     **** 	else if (complex) {
 27268              		.loc 1 5985 7 is_stmt 1 view .LVU7210
 27269              		.loc 1 5985 10 is_stmt 0 view .LVU7211
 27270 0048 022C     		cmp	r4, #2
 27271 004a 26D0     		beq	.L2003
5986:src/xeq.c     **** 		if (decNumberIsSpecial(&z) || decNumberIsSpecial(&t))
5987:src/xeq.c     **** 			res = specials;
5988:src/xeq.c     **** 		else {
5989:src/xeq.c     **** 			cmplxSubtract(&a, &b, &x, &y, &z, &t);
5990:src/xeq.c     **** 			cmplxR(&x, &a, &b);
5991:src/xeq.c     **** 			res = dn_lt(&x, tolerance);
5992:src/xeq.c     **** 		}
5993:src/xeq.c     **** 	} else {
5994:src/xeq.c     **** 		if (absolute)
 27272              		.loc 1 5994 3 is_stmt 1 view .LVU7212
 27273              		.loc 1 5994 6 is_stmt 0 view .LVU7213
 27274 004c 012C     		cmp	r4, #1
5995:src/xeq.c     **** 			res = absolute_error(&x, &y, tolerance);
 27275              		.loc 1 5995 10 view .LVU7214
 27276 004e 3246     		mov	r2, r6
 27277 0050 14A9     		add	r1, sp, #80
 27278 0052 0BA8     		add	r0, sp, #44
5994:src/xeq.c     **** 			res = absolute_error(&x, &y, tolerance);
 27279              		.loc 1 5994 6 view .LVU7215
 27280 0054 3ED0     		beq	.L2004
5996:src/xeq.c     **** 		else
5997:src/xeq.c     **** 			res = relative_error(&x, &y, tolerance);
 27281              		.loc 1 5997 4 is_stmt 1 view .LVU7216
 27282              		.loc 1 5997 10 is_stmt 0 view .LVU7217
 27283 0056 FFF7FEFF 		bl	relative_error
 27284              	.LVL2159:
 27285 005a 0546     		mov	r5, r0
 27286              	.LVL2160:
 27287              	.L1996:
5998:src/xeq.c     **** 	}
5999:src/xeq.c     **** 	fin_tst(res);
 27288              		.loc 1 5999 2 is_stmt 1 discriminator 1 view .LVU7218
 27289 005c 2846     		mov	r0, r5
 27290 005e FFF7FEFF 		bl	fin_tst
 27291              	.LVL2161:
6000:src/xeq.c     **** }
 27292              		.loc 1 6000 1 is_stmt 0 discriminator 1 view .LVU7219
 27293 0062 38B0     		add	sp, sp, #224
 27294              		.cfi_remember_state
ARM GAS  /tmp/ccK8IvWa.s 			page 700


 27295              		.cfi_def_cfa_offset 16
 27296              		@ sp needed
 27297 0064 70BD     		pop	{r4, r5, r6, pc}
 27298              	.LVL2162:
 27299              	.L1994:
 27300              		.cfi_restore_state
5975:src/xeq.c     **** 			tol = (! XromFlags.xIN || XromFlags.mode_double) ? 2 : 1;
 27301              		.loc 1 5975 3 is_stmt 1 view .LVU7220
 27302              	.LBB3682:
 27303              	.LBI3682:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 27304              		.loc 1 918 5 view .LVU7221
 27305              	.LBB3683:
 919:src/xeq.c     **** }
 27306              		.loc 1 919 2 view .LVU7222
 919:src/xeq.c     **** }
 27307              		.loc 1 919 24 is_stmt 0 view .LVU7223
 27308 0066 B2F8E827 		ldrh	r2, [r2, #2024]
 27309 006a 44F20103 		movw	r3, #16385
 27310              	.LVL2163:
 919:src/xeq.c     **** }
 27311              		.loc 1 919 24 view .LVU7224
 27312              	.LBE3683:
 27313              	.LBE3682:
5975:src/xeq.c     **** 			tol = (! XromFlags.xIN || XromFlags.mode_double) ? 2 : 1;
 27314              		.loc 1 5975 6 view .LVU7225
 27315 006e 1340     		ands	r3, r3, r2
 27316 0070 B3F5804F 		cmp	r3, #16384
 27317 0074 07D0     		beq	.L2005
 27318 0076 1B4E     		ldr	r6, .L2006+8
 27319 0078 D3E7     		b	.L1995
 27320              	.LVL2164:
 27321              	.L2002:
5970:src/xeq.c     **** 		return;
 27322              		.loc 1 5970 3 is_stmt 1 view .LVU7226
 27323 007a 0021     		movs	r1, #0
 27324 007c 6520     		movs	r0, #101
 27325              	.LVL2165:
5970:src/xeq.c     **** 		return;
 27326              		.loc 1 5970 3 is_stmt 0 view .LVU7227
 27327 007e FFF7FEFF 		bl	do_tst
 27328              	.LVL2166:
5971:src/xeq.c     **** 	}
 27329              		.loc 1 5971 3 is_stmt 1 view .LVU7228
 27330              		.loc 1 6000 1 is_stmt 0 view .LVU7229
 27331 0082 38B0     		add	sp, sp, #224
 27332              		.cfi_remember_state
 27333              		.cfi_def_cfa_offset 16
 27334              		@ sp needed
 27335 0084 70BD     		pop	{r4, r5, r6, pc}
 27336              	.LVL2167:
 27337              	.L2005:
 27338              		.cfi_restore_state
5976:src/xeq.c     **** 		else
 27339              		.loc 1 5976 4 is_stmt 1 view .LVU7230
5976:src/xeq.c     **** 		else
 27340              		.loc 1 5976 27 is_stmt 0 view .LVU7231
ARM GAS  /tmp/ccK8IvWa.s 			page 701


 27341 0086 184B     		ldr	r3, .L2006+12
5976:src/xeq.c     **** 		else
 27342              		.loc 1 5976 57 view .LVU7232
 27343 0088 184E     		ldr	r6, .L2006+16
5976:src/xeq.c     **** 		else
 27344              		.loc 1 5976 27 view .LVU7233
 27345 008a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
5976:src/xeq.c     **** 		else
 27346              		.loc 1 5976 57 view .LVU7234
 27347 008c 184A     		ldr	r2, .L2006+20
 27348 008e 03F08803 		and	r3, r3, #136
 27349 0092 802B     		cmp	r3, #128
 27350 0094 08BF     		it	eq
 27351 0096 1646     		moveq	r6, r2
 27352 0098 C3E7     		b	.L1995
 27353              	.LVL2168:
 27354              	.L2003:
5986:src/xeq.c     **** 			res = specials;
 27355              		.loc 1 5986 3 is_stmt 1 view .LVU7235
5986:src/xeq.c     **** 			res = specials;
 27356              		.loc 1 5986 30 is_stmt 0 view .LVU7236
 27357 009a 9DF87C30 		ldrb	r3, [sp, #124]	@ zero_extendqisi2
 27358 009e 9DF81020 		ldrb	r2, [sp, #16]	@ zero_extendqisi2
 27359 00a2 1343     		orrs	r3, r3, r2
 27360 00a4 13F0700F 		tst	r3, #112
 27361 00a8 D8D1     		bne	.L1996
5989:src/xeq.c     **** 			cmplxR(&x, &a, &b);
 27362              		.loc 1 5989 4 is_stmt 1 view .LVU7237
 27363 00aa 02AB     		add	r3, sp, #8
 27364 00ac 0193     		str	r3, [sp, #4]
 27365 00ae 1DAB     		add	r3, sp, #116
 27366 00b0 0093     		str	r3, [sp]
 27367 00b2 2FA9     		add	r1, sp, #188
 27368 00b4 14AB     		add	r3, sp, #80
 27369 00b6 26A8     		add	r0, sp, #152
 27370 00b8 0BAA     		add	r2, sp, #44
 27371 00ba FFF7FEFF 		bl	cmplxSubtract
 27372              	.LVL2169:
5990:src/xeq.c     **** 			res = dn_lt(&x, tolerance);
 27373              		.loc 1 5990 4 view .LVU7238
 27374 00be 2FAA     		add	r2, sp, #188
 27375 00c0 26A9     		add	r1, sp, #152
 27376 00c2 0BA8     		add	r0, sp, #44
 27377 00c4 FFF7FEFF 		bl	cmplxR
 27378              	.LVL2170:
5991:src/xeq.c     **** 		}
 27379              		.loc 1 5991 4 view .LVU7239
5991:src/xeq.c     **** 		}
 27380              		.loc 1 5991 10 is_stmt 0 view .LVU7240
 27381 00c8 3146     		mov	r1, r6
 27382 00ca 0BA8     		add	r0, sp, #44
 27383 00cc FFF7FEFF 		bl	dn_lt
 27384              	.LVL2171:
 27385 00d0 0546     		mov	r5, r0
 27386              	.LVL2172:
5991:src/xeq.c     **** 		}
 27387              		.loc 1 5991 10 view .LVU7241
ARM GAS  /tmp/ccK8IvWa.s 			page 702


 27388 00d2 C3E7     		b	.L1996
 27389              	.LVL2173:
 27390              	.L2004:
5995:src/xeq.c     **** 		else
 27391              		.loc 1 5995 4 is_stmt 1 view .LVU7242
5995:src/xeq.c     **** 		else
 27392              		.loc 1 5995 10 is_stmt 0 view .LVU7243
 27393 00d4 FFF7FEFF 		bl	absolute_error
 27394              	.LVL2174:
 27395 00d8 0546     		mov	r5, r0
 27396              	.LVL2175:
5995:src/xeq.c     **** 		else
 27397              		.loc 1 5995 10 view .LVU7244
 27398 00da BFE7     		b	.L1996
 27399              	.L2007:
 27400              		.align	2
 27401              	.L2006:
 27402 00dc 00000000 		.word	PersistentRam
 27403 00e0 00000000 		.word	.LANCHOR7
 27404 00e4 00000000 		.word	const_1e_14
 27405 00e8 00000000 		.word	XromParams
 27406 00ec 00000000 		.word	const_1e_32
 27407 00f0 00000000 		.word	const_1e_24
 27408              		.cfi_endproc
 27409              	.LFE265:
 27411              		.section	.text.cmdshuffle,"ax",%progbits
 27412              		.align	1
 27413              		.p2align 2,,3
 27414              		.global	cmdshuffle
 27415              		.syntax unified
 27416              		.thumb
 27417              		.thumb_func
 27418              		.fpu fpv4-sp-d16
 27420              	cmdshuffle:
 27421              	.LVL2176:
 27422              	.LFB266:
6001:src/xeq.c     **** 
6002:src/xeq.c     **** void cmdshuffle(unsigned int arg, enum rarg cmd) {
 27423              		.loc 1 6002 50 is_stmt 1 view -0
 27424              		.cfi_startproc
 27425              		@ args = 0, pretend = 0, frame = 64
 27426              		@ frame_needed = 0, uses_anonymous_args = 0
6003:src/xeq.c     **** 	REGISTER xyzt[4];
 27427              		.loc 1 6003 2 view .LVU7246
6004:src/xeq.c     **** 	int i;
 27428              		.loc 1 6004 2 view .LVU7247
6005:src/xeq.c     **** 
6006:src/xeq.c     **** 	set_lift();
 27429              		.loc 1 6006 2 view .LVU7248
 27430              	.LBB3684:
 27431              	.LBI3684:
 734:src/xeq.c     ****     State2.state_lift = 1;
 27432              		.loc 1 734 6 view .LVU7249
 27433              	.LBB3685:
 735:src/xeq.c     **** }
 27434              		.loc 1 735 5 view .LVU7250
 27435              	.LBE3685:
ARM GAS  /tmp/ccK8IvWa.s 			page 703


 27436              	.LBE3684:
6002:src/xeq.c     **** 	REGISTER xyzt[4];
 27437              		.loc 1 6002 50 is_stmt 0 view .LVU7251
 27438 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 27439              		.cfi_def_cfa_offset 24
 27440              		.cfi_offset 4, -24
 27441              		.cfi_offset 5, -20
 27442              		.cfi_offset 6, -16
 27443              		.cfi_offset 7, -12
 27444              		.cfi_offset 8, -8
 27445              		.cfi_offset 14, -4
 27446              	.LBB3690:
 27447              	.LBB3686:
 735:src/xeq.c     **** }
 27448              		.loc 1 735 23 view .LVU7252
 27449 0004 1E4A     		ldr	r2, .L2018
 27450 0006 1F4E     		ldr	r6, .L2018+4
 27451 0008 D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 27452              	.LBE3686:
 27453              	.LBE3690:
6002:src/xeq.c     **** 	REGISTER xyzt[4];
 27454              		.loc 1 6002 50 view .LVU7253
 27455 000a 90B0     		sub	sp, sp, #64
 27456              		.cfi_def_cfa_offset 88
 27457              	.LBB3691:
 27458              	.LBB3687:
 735:src/xeq.c     **** }
 27459              		.loc 1 735 23 view .LVU7254
 27460 000c 43F04003 		orr	r3, r3, #64
 27461              	.LBE3687:
 27462              	.LBE3691:
6002:src/xeq.c     **** 	REGISTER xyzt[4];
 27463              		.loc 1 6002 50 view .LVU7255
 27464 0010 0546     		mov	r5, r0
 27465              	.LBB3692:
 27466              	.LBB3688:
 735:src/xeq.c     **** }
 27467              		.loc 1 735 23 view .LVU7256
 27468 0012 D375     		strb	r3, [r2, #23]
 27469              	.LBE3688:
 27470              	.LBE3692:
6007:src/xeq.c     **** 	for (i=0; i<4; i++)
 27471              		.loc 1 6007 2 is_stmt 1 view .LVU7257
 27472              	.LVL2177:
 27473              		.loc 1 6007 12 view .LVU7258
 27474 0014 6F46     		mov	r7, sp
 27475              	.LBB3693:
 27476              	.LBB3689:
 735:src/xeq.c     **** }
 27477              		.loc 1 735 23 is_stmt 0 view .LVU7259
 27478 0016 6424     		movs	r4, #100
 27479              	.LBE3689:
 27480              	.LBE3693:
 27481              	.LBB3694:
 27482              	.LBB3695:
 27483              	.LBB3696:
 27484              	.LBB3697:
ARM GAS  /tmp/ccK8IvWa.s 			page 704


 919:src/xeq.c     **** }
 27485              		.loc 1 919 24 view .LVU7260
 27486 0018 44F20108 		movw	r8, #16385
 27487              	.LVL2178:
 27488              	.L2010:
 919:src/xeq.c     **** }
 27489              		.loc 1 919 24 view .LVU7261
 27490              	.LBE3697:
 27491              	.LBE3696:
 27492              	.LBE3695:
 27493              	.LBE3694:
6008:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 27494              		.loc 1 6008 3 is_stmt 1 discriminator 3 view .LVU7262
 27495              	.LBB3704:
 27496              	.LBI3704:
 695:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 27497              		.loc 1 695 11 discriminator 3 view .LVU7263
 27498              	.LBB3705:
 696:src/xeq.c     **** }
 27499              		.loc 1 696 2 discriminator 3 view .LVU7264
 696:src/xeq.c     **** }
 27500              		.loc 1 696 9 is_stmt 0 discriminator 3 view .LVU7265
 27501 001c 2046     		mov	r0, r4
 27502 001e FFF7FEFF 		bl	get_reg_n
 27503              	.LVL2179:
 696:src/xeq.c     **** }
 27504              		.loc 1 696 9 discriminator 3 view .LVU7266
 27505              	.LBE3705:
 27506              	.LBE3704:
 27507              	.LBB3707:
 27508              	.LBB3702:
 27509              	.LBB3700:
 27510              	.LBB3698:
 919:src/xeq.c     **** }
 27511              		.loc 1 919 24 discriminator 3 view .LVU7267
 27512 0022 B6F8E837 		ldrh	r3, [r6, #2024]
 27513              	.LBE3698:
 27514              	.LBE3700:
 704:src/xeq.c     **** }
 27515              		.loc 1 704 2 discriminator 3 view .LVU7268
 27516 0026 08EA0303 		and	r3, r8, r3
 27517 002a B3F5804F 		cmp	r3, #16384
 27518              	.LBE3702:
 27519              	.LBE3707:
 27520              	.LBB3708:
 27521              	.LBB3706:
 696:src/xeq.c     **** }
 27522              		.loc 1 696 9 discriminator 3 view .LVU7269
 27523 002e 0146     		mov	r1, r0
 27524              	.LVL2180:
 696:src/xeq.c     **** }
 27525              		.loc 1 696 9 discriminator 3 view .LVU7270
 27526              	.LBE3706:
 27527              	.LBE3708:
 27528              	.LBB3709:
 27529              	.LBI3694:
 703:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
ARM GAS  /tmp/ccK8IvWa.s 			page 705


 27530              		.loc 1 703 6 is_stmt 1 discriminator 3 view .LVU7271
 27531              	.LBB3703:
 704:src/xeq.c     **** }
 27532              		.loc 1 704 2 discriminator 3 view .LVU7272
 27533              	.LBB3701:
 27534              	.LBI3696:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 27535              		.loc 1 918 5 discriminator 3 view .LVU7273
 27536              	.LBB3699:
 919:src/xeq.c     **** }
 27537              		.loc 1 919 2 discriminator 3 view .LVU7274
 27538              	.LBE3699:
 27539              	.LBE3701:
 704:src/xeq.c     **** }
 27540              		.loc 1 704 2 is_stmt 0 discriminator 3 view .LVU7275
 27541 0030 0CBF     		ite	eq
 27542 0032 1022     		moveq	r2, #16
 27543 0034 0822     		movne	r2, #8
 27544 0036 3846     		mov	r0, r7
 27545              	.LVL2181:
 704:src/xeq.c     **** }
 27546              		.loc 1 704 2 discriminator 3 view .LVU7276
 27547 0038 0134     		adds	r4, r4, #1
 27548              	.LVL2182:
 704:src/xeq.c     **** }
 27549              		.loc 1 704 2 discriminator 3 view .LVU7277
 27550 003a FFF7FEFF 		bl	xcopy
 27551              	.LVL2183:
 704:src/xeq.c     **** }
 27552              		.loc 1 704 2 discriminator 3 view .LVU7278
 27553              	.LBE3703:
 27554              	.LBE3709:
6007:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 27555              		.loc 1 6007 17 is_stmt 1 discriminator 3 view .LVU7279
6007:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 27556              		.loc 1 6007 12 discriminator 3 view .LVU7280
6007:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 27557              		.loc 1 6007 2 is_stmt 0 discriminator 3 view .LVU7281
 27558 003e 682C     		cmp	r4, #104
 27559 0040 07F11007 		add	r7, r7, #16
 27560 0044 EAD1     		bne	.L2010
 27561 0046 6424     		movs	r4, #100
 27562              	.LBB3710:
 27563              	.LBB3711:
 27564              	.LBB3712:
 27565              	.LBB3713:
 919:src/xeq.c     **** }
 27566              		.loc 1 919 24 view .LVU7282
 27567 0048 44F20107 		movw	r7, #16385
 27568              	.L2012:
 27569              	.LVL2184:
 919:src/xeq.c     **** }
 27570              		.loc 1 919 24 view .LVU7283
 27571              	.LBE3713:
 27572              	.LBE3712:
 27573              	.LBE3711:
 27574              	.LBE3710:
ARM GAS  /tmp/ccK8IvWa.s 			page 706


6009:src/xeq.c     **** 
6010:src/xeq.c     **** 	for (i=0; i<4; i++) {
6011:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 27575              		.loc 1 6011 3 is_stmt 1 view .LVU7284
 27576              	.LBB3720:
 27577              	.LBI3720:
 695:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 27578              		.loc 1 695 11 view .LVU7285
 27579              	.LBB3721:
 696:src/xeq.c     **** }
 27580              		.loc 1 696 2 view .LVU7286
 696:src/xeq.c     **** }
 27581              		.loc 1 696 9 is_stmt 0 view .LVU7287
 27582 004c 2046     		mov	r0, r4
 27583 004e FFF7FEFF 		bl	get_reg_n
 27584              	.LVL2185:
 696:src/xeq.c     **** }
 27585              		.loc 1 696 9 view .LVU7288
 27586              	.LBE3721:
 27587              	.LBE3720:
 27588              	.LBB3722:
 27589              	.LBB3718:
 27590              	.LBB3716:
 27591              	.LBB3714:
 919:src/xeq.c     **** }
 27592              		.loc 1 919 24 view .LVU7289
 27593 0052 B6F8E837 		ldrh	r3, [r6, #2024]
 27594              	.LBE3714:
 27595              	.LBE3716:
 704:src/xeq.c     **** }
 27596              		.loc 1 704 2 view .LVU7290
 27597 0056 3B40     		ands	r3, r3, r7
 27598 0058 B3F5804F 		cmp	r3, #16384
 27599              	.LBE3718:
 27600              	.LBE3722:
 27601              		.loc 1 6011 36 view .LVU7291
 27602 005c 05F00301 		and	r1, r5, #3
 27603              	.LVL2186:
 27604              	.LBB3723:
 27605              	.LBI3710:
 703:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 27606              		.loc 1 703 6 is_stmt 1 view .LVU7292
 27607              	.LBB3719:
 704:src/xeq.c     **** }
 27608              		.loc 1 704 2 view .LVU7293
 27609              	.LBB3717:
 27610              	.LBI3712:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 27611              		.loc 1 918 5 view .LVU7294
 27612              	.LBB3715:
 919:src/xeq.c     **** }
 27613              		.loc 1 919 2 view .LVU7295
 27614              	.LBE3715:
 27615              	.LBE3717:
 704:src/xeq.c     **** }
 27616              		.loc 1 704 2 is_stmt 0 view .LVU7296
 27617 0060 0CBF     		ite	eq
ARM GAS  /tmp/ccK8IvWa.s 			page 707


 27618 0062 1022     		moveq	r2, #16
 27619 0064 0822     		movne	r2, #8
 27620 0066 0134     		adds	r4, r4, #1
 27621              	.LVL2187:
 704:src/xeq.c     **** }
 27622              		.loc 1 704 2 view .LVU7297
 27623 0068 0DEB0111 		add	r1, sp, r1, lsl #4
 27624              	.LVL2188:
 704:src/xeq.c     **** }
 27625              		.loc 1 704 2 view .LVU7298
 27626 006c FFF7FEFF 		bl	xcopy
 27627              	.LVL2189:
 704:src/xeq.c     **** }
 27628              		.loc 1 704 2 view .LVU7299
 27629              	.LBE3719:
 27630              	.LBE3723:
6012:src/xeq.c     **** 		arg >>= 2;
 27631              		.loc 1 6012 3 is_stmt 1 view .LVU7300
6010:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 27632              		.loc 1 6010 2 is_stmt 0 view .LVU7301
 27633 0070 682C     		cmp	r4, #104
 27634              		.loc 1 6012 7 view .LVU7302
 27635 0072 4FEA9505 		lsr	r5, r5, #2
 27636              	.LVL2190:
6010:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 27637              		.loc 1 6010 17 is_stmt 1 view .LVU7303
6010:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 27638              		.loc 1 6010 12 view .LVU7304
6010:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 27639              		.loc 1 6010 2 is_stmt 0 view .LVU7305
 27640 0076 E9D1     		bne	.L2012
6013:src/xeq.c     **** 	}
6014:src/xeq.c     **** }
 27641              		.loc 1 6014 1 view .LVU7306
 27642 0078 10B0     		add	sp, sp, #64
 27643              		.cfi_def_cfa_offset 24
 27644              		@ sp needed
 27645 007a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 27646              	.LVL2191:
 27647              	.L2019:
 27648              		.loc 1 6014 1 view .LVU7307
 27649 007e 00BF     		.align	2
 27650              	.L2018:
 27651 0080 00000000 		.word	StateWhileOn
 27652 0084 00000000 		.word	PersistentRam
 27653              		.cfi_endproc
 27654              	.LFE266:
 27656              		.section	.text.cmdmode,"ax",%progbits
 27657              		.align	1
 27658              		.p2align 2,,3
 27659              		.global	cmdmode
 27660              		.syntax unified
 27661              		.thumb
 27662              		.thumb_func
 27663              		.fpu fpv4-sp-d16
 27665              	cmdmode:
 27666              	.LVL2192:
ARM GAS  /tmp/ccK8IvWa.s 			page 708


 27667              	.LFB267:
6015:src/xeq.c     **** 
6016:src/xeq.c     **** /*
6017:src/xeq.c     ****  *  Toggle UState mode bits from XROM
6018:src/xeq.c     ****  */
6019:src/xeq.c     **** void cmdmode(unsigned int arg, enum rarg cmd) {
 27668              		.loc 1 6019 47 is_stmt 1 view -0
 27669              		.cfi_startproc
 27670              		@ args = 0, pretend = 0, frame = 0
 27671              		@ frame_needed = 0, uses_anonymous_args = 0
 27672              		@ link register save eliminated.
6020:src/xeq.c     **** 	unsigned long long int bit = 1ll << arg;
 27673              		.loc 1 6020 2 view .LVU7309
 27674              		.loc 1 6020 35 is_stmt 0 view .LVU7310
 27675 0000 0122     		movs	r2, #1
6019:src/xeq.c     **** 	unsigned long long int bit = 1ll << arg;
 27676              		.loc 1 6019 47 view .LVU7311
 27677 0002 30B4     		push	{r4, r5}
 27678              		.cfi_def_cfa_offset 8
 27679              		.cfi_offset 4, -8
 27680              		.cfi_offset 5, -4
 27681              		.loc 1 6020 35 view .LVU7312
 27682 0004 A0F12003 		sub	r3, r0, #32
 27683 0008 C0F12004 		rsb	r4, r0, #32
6021:src/xeq.c     **** 	unsigned long long int *mode = (unsigned long long int *) & UState;
6022:src/xeq.c     **** 
6023:src/xeq.c     **** 	if (cmd == RARG_MODE_SET)
 27684              		.loc 1 6023 5 view .LVU7313
 27685 000c 8129     		cmp	r1, #129
6024:src/xeq.c     **** 		*mode |= bit;
 27686              		.loc 1 6024 9 view .LVU7314
 27687 000e 1049     		ldr	r1, .L2025
 27688              	.LVL2193:
6020:src/xeq.c     **** 	unsigned long long int *mode = (unsigned long long int *) & UState;
 27689              		.loc 1 6020 35 view .LVU7315
 27690 0010 02FA03F3 		lsl	r3, r2, r3
 27691 0014 22FA04F4 		lsr	r4, r2, r4
 27692              		.loc 1 6024 9 view .LVU7316
 27693 0018 D1F8E457 		ldr	r5, [r1, #2020]
6020:src/xeq.c     **** 	unsigned long long int *mode = (unsigned long long int *) & UState;
 27694              		.loc 1 6020 35 view .LVU7317
 27695 001c 02FA00F2 		lsl	r2, r2, r0
 27696 0020 43EA0403 		orr	r3, r3, r4
 27697              	.LVL2194:
6021:src/xeq.c     **** 	unsigned long long int *mode = (unsigned long long int *) & UState;
 27698              		.loc 1 6021 2 is_stmt 1 view .LVU7318
6023:src/xeq.c     **** 		*mode |= bit;
 27699              		.loc 1 6023 2 view .LVU7319
 27700              		.loc 1 6024 9 is_stmt 0 view .LVU7320
 27701 0024 01F2E470 		addw	r0, r1, #2020
 27702              	.LVL2195:
6023:src/xeq.c     **** 		*mode |= bit;
 27703              		.loc 1 6023 5 view .LVU7321
 27704 0028 0AD0     		beq	.L2024
6025:src/xeq.c     **** 	else
6026:src/xeq.c     **** 		*mode &= ~bit;
 27705              		.loc 1 6026 3 is_stmt 1 view .LVU7322
ARM GAS  /tmp/ccK8IvWa.s 			page 709


 27706              		.loc 1 6026 9 is_stmt 0 view .LVU7323
 27707 002a D1F8E847 		ldr	r4, [r1, #2024]
 27708 002e 25EA0202 		bic	r2, r5, r2
 27709              	.LVL2196:
 27710              		.loc 1 6026 9 view .LVU7324
 27711 0032 24EA0303 		bic	r3, r4, r3
 27712              	.LVL2197:
 27713              		.loc 1 6026 9 view .LVU7325
 27714 0036 C1F8E427 		str	r2, [r1, #2020]
6027:src/xeq.c     **** }
 27715              		.loc 1 6027 1 view .LVU7326
 27716 003a 30BC     		pop	{r4, r5}
 27717              		.cfi_remember_state
 27718              		.cfi_restore 5
 27719              		.cfi_restore 4
 27720              		.cfi_def_cfa_offset 0
 27721 003c 4360     		str	r3, [r0, #4]
 27722 003e 7047     		bx	lr
 27723              	.LVL2198:
 27724              	.L2024:
 27725              		.cfi_restore_state
6024:src/xeq.c     **** 	else
 27726              		.loc 1 6024 3 is_stmt 1 view .LVU7327
6024:src/xeq.c     **** 	else
 27727              		.loc 1 6024 9 is_stmt 0 view .LVU7328
 27728 0040 4468     		ldr	r4, [r0, #4]
 27729 0042 2A43     		orrs	r2, r2, r5
 27730              	.LVL2199:
6024:src/xeq.c     **** 	else
 27731              		.loc 1 6024 9 view .LVU7329
 27732 0044 2343     		orrs	r3, r3, r4
 27733              	.LVL2200:
6024:src/xeq.c     **** 	else
 27734              		.loc 1 6024 9 view .LVU7330
 27735 0046 C1F8E427 		str	r2, [r1, #2020]
 27736              		.loc 1 6027 1 view .LVU7331
 27737 004a 30BC     		pop	{r4, r5}
 27738              		.cfi_restore 5
 27739              		.cfi_restore 4
 27740              		.cfi_def_cfa_offset 0
 27741 004c 4360     		str	r3, [r0, #4]
 27742 004e 7047     		bx	lr
 27743              	.L2026:
 27744              		.align	2
 27745              	.L2025:
 27746 0050 00000000 		.word	PersistentRam
 27747              		.cfi_endproc
 27748              	.LFE267:
 27750              		.section	.text.cmdlpop,"ax",%progbits
 27751              		.align	1
 27752              		.p2align 2,,3
 27753              		.global	cmdlpop
 27754              		.syntax unified
 27755              		.thumb
 27756              		.thumb_func
 27757              		.fpu fpv4-sp-d16
 27759              	cmdlpop:
ARM GAS  /tmp/ccK8IvWa.s 			page 710


 27760              	.LVL2201:
 27761              	.LFB268:
6028:src/xeq.c     **** 
6029:src/xeq.c     **** /*
6030:src/xeq.c     ****  *  Undo the effect of LOCL by popping the current local frame.
6031:src/xeq.c     ****  *  Needs to be executed from the same level that has established the frame.
6032:src/xeq.c     ****  */
6033:src/xeq.c     **** void cmdlpop(enum nilop op) {
 27762              		.loc 1 6033 29 is_stmt 1 view -0
 27763              		.cfi_startproc
 27764              		@ args = 0, pretend = 0, frame = 0
 27765              		@ frame_needed = 0, uses_anonymous_args = 0
6034:src/xeq.c     **** 	if (LocalRegs != RetStkPtr) {
 27766              		.loc 1 6034 2 view .LVU7333
6033:src/xeq.c     **** 	if (LocalRegs != RetStkPtr) {
 27767              		.loc 1 6033 29 is_stmt 0 view .LVU7334
 27768 0000 10B5     		push	{r4, lr}
 27769              		.cfi_def_cfa_offset 8
 27770              		.cfi_offset 4, -8
 27771              		.cfi_offset 14, -4
 27772              		.loc 1 6034 6 view .LVU7335
 27773 0002 0B4C     		ldr	r4, .L2031
 27774 0004 B4F9DE27 		ldrsh	r2, [r4, #2014]
 27775              		.loc 1 6034 5 view .LVU7336
 27776 0008 B4F9E237 		ldrsh	r3, [r4, #2018]
 27777 000c 9342     		cmp	r3, r2
 27778 000e 05D0     		beq	.L2028
6035:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 27779              		.loc 1 6035 3 is_stmt 1 view .LVU7337
 27780              	.LVL2202:
 27781              	.LBB3728:
 27782              	.LBI3728:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27783              		.loc 1 523 5 view .LVU7338
 27784              	.LBB3729:
 524:src/xeq.c     **** 		Error = e;
 27785              		.loc 1 524 2 view .LVU7339
 524:src/xeq.c     **** 		Error = e;
 27786              		.loc 1 524 12 is_stmt 0 view .LVU7340
 27787 0010 084B     		ldr	r3, .L2031+4
 524:src/xeq.c     **** 		Error = e;
 27788              		.loc 1 524 5 view .LVU7341
 27789 0012 1A68     		ldr	r2, [r3]
 27790 0014 0AB9     		cbnz	r2, .L2027
 27791              	.LVL2203:
 27792              	.LBB3730:
 27793              	.LBI3730:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27794              		.loc 1 523 5 is_stmt 1 view .LVU7342
 27795              	.LBB3731:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 27796              		.loc 1 525 3 view .LVU7343
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 27797              		.loc 1 525 9 is_stmt 0 view .LVU7344
 27798 0016 0722     		movs	r2, #7
 27799 0018 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
ARM GAS  /tmp/ccK8IvWa.s 			page 711


 27800              		.loc 1 526 3 is_stmt 1 view .LVU7345
 27801              	.LVL2204:
 27802              	.L2027:
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 27803              		.loc 1 526 3 is_stmt 0 view .LVU7346
 27804              	.LBE3731:
 27805              	.LBE3730:
 27806              	.LBE3729:
 27807              	.LBE3728:
6036:src/xeq.c     **** 		return;
6037:src/xeq.c     **** 	}
6038:src/xeq.c     **** 	RetStkPtr = LocalRegs;
6039:src/xeq.c     **** 	retstk_up();
6040:src/xeq.c     **** 	--RetStkPtr;
6041:src/xeq.c     **** }
 27808              		.loc 1 6041 1 view .LVU7347
 27809 001a 10BD     		pop	{r4, pc}
 27810              	.LVL2205:
 27811              	.L2028:
6038:src/xeq.c     **** 	retstk_up();
 27812              		.loc 1 6038 2 is_stmt 1 view .LVU7348
6038:src/xeq.c     **** 	retstk_up();
 27813              		.loc 1 6038 12 is_stmt 0 view .LVU7349
 27814 001c A4F8E237 		strh	r3, [r4, #2018]	@ movhi
6039:src/xeq.c     **** 	--RetStkPtr;
 27815              		.loc 1 6039 2 is_stmt 1 view .LVU7350
 27816 0020 FFF7FEFF 		bl	retstk_up
 27817              	.LVL2206:
6040:src/xeq.c     **** }
 27818              		.loc 1 6040 2 view .LVU7351
 27819 0024 B4F8E237 		ldrh	r3, [r4, #2018]
 27820 0028 013B     		subs	r3, r3, #1
 27821 002a A4F8E237 		strh	r3, [r4, #2018]	@ movhi
 27822              		.loc 1 6041 1 is_stmt 0 view .LVU7352
 27823 002e 10BD     		pop	{r4, pc}
 27824              	.L2032:
 27825              		.align	2
 27826              	.L2031:
 27827 0030 00000000 		.word	PersistentRam
 27828 0034 00000000 		.word	Error
 27829              		.cfi_endproc
 27830              	.LFE268:
 27832              		.section	.text.cmdregs,"ax",%progbits
 27833              		.align	1
 27834              		.p2align 2,,3
 27835              		.global	cmdregs
 27836              		.syntax unified
 27837              		.thumb
 27838              		.thumb_func
 27839              		.fpu fpv4-sp-d16
 27841              	cmdregs:
 27842              	.LVL2207:
 27843              	.LFB269:
6042:src/xeq.c     **** 
6043:src/xeq.c     **** /*
6044:src/xeq.c     ****  *  Reduce the number of global registers in favour of local data on the return stack
6045:src/xeq.c     ****  */
ARM GAS  /tmp/ccK8IvWa.s 			page 712


6046:src/xeq.c     **** void cmdregs(unsigned int arg, enum rarg op) {
 27844              		.loc 1 6046 46 is_stmt 1 view -0
 27845              		.cfi_startproc
 27846              		@ args = 0, pretend = 0, frame = 0
 27847              		@ frame_needed = 0, uses_anonymous_args = 0
6047:src/xeq.c     **** 	int distance;
 27848              		.loc 1 6047 2 view .LVU7354
6048:src/xeq.c     **** 	int length;
 27849              		.loc 1 6048 2 view .LVU7355
6049:src/xeq.c     **** 
6050:src/xeq.c     **** 	if (is_dblmode()) {
 27850              		.loc 1 6050 2 view .LVU7356
 27851              	.LBB3738:
 27852              	.LBI3738:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 27853              		.loc 1 918 5 view .LVU7357
 27854              	.LBB3739:
 919:src/xeq.c     **** }
 27855              		.loc 1 919 2 view .LVU7358
 27856              	.LBE3739:
 27857              	.LBE3738:
6046:src/xeq.c     **** 	int distance;
 27858              		.loc 1 6046 46 is_stmt 0 view .LVU7359
 27859 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 27860              		.cfi_def_cfa_offset 32
 27861              		.cfi_offset 3, -32
 27862              		.cfi_offset 4, -28
 27863              		.cfi_offset 5, -24
 27864              		.cfi_offset 6, -20
 27865              		.cfi_offset 7, -16
 27866              		.cfi_offset 8, -12
 27867              		.cfi_offset 9, -8
 27868              		.cfi_offset 14, -4
 27869              	.LBB3741:
 27870              	.LBB3740:
 919:src/xeq.c     **** }
 27871              		.loc 1 919 24 view .LVU7360
 27872 0004 274F     		ldr	r7, .L2049
 27873 0006 B7F8E827 		ldrh	r2, [r7, #2024]
 27874 000a 44F20103 		movw	r3, #16385
 27875              	.LBE3740:
 27876              	.LBE3741:
 27877              		.loc 1 6050 5 view .LVU7361
 27878 000e 1340     		ands	r3, r3, r2
 27879 0010 B3F5804F 		cmp	r3, #16384
6046:src/xeq.c     **** 	int distance;
 27880              		.loc 1 6046 46 view .LVU7362
 27881 0014 0446     		mov	r4, r0
 27882              		.loc 1 6050 5 view .LVU7363
 27883 0016 34D0     		beq	.L2045
6051:src/xeq.c     **** 		// DP register length 16 bytes
6052:src/xeq.c     **** 		length = (arg << 4); 
6053:src/xeq.c     **** 		// We need additional room for lettered registers
6054:src/xeq.c     **** 		arg = (arg << 1) + STACK_SIZE + EXTRA_REG;
6055:src/xeq.c     **** 	}
6056:src/xeq.c     **** 	else {
6057:src/xeq.c     **** 		if (UState.mode_double && arg < STACK_SIZE + EXTRA_REG) {
ARM GAS  /tmp/ccK8IvWa.s 			page 713


 27884              		.loc 1 6057 3 is_stmt 1 view .LVU7364
 27885              		.loc 1 6057 7 is_stmt 0 view .LVU7365
 27886 0018 97F8E937 		ldrb	r3, [r7, #2025]	@ zero_extendqisi2
 27887              		.loc 1 6057 6 view .LVU7366
 27888 001c 5B06     		lsls	r3, r3, #25
 27889 001e 27D4     		bmi	.L2046
 27890              	.L2036:
6058:src/xeq.c     **** 			// Special case: we're in int mode but came from DP
6059:src/xeq.c     **** 			// We must not release the space needed for the DP lettered registers
6060:src/xeq.c     **** 			report_err(ERR_RANGE);
6061:src/xeq.c     **** 			return;
6062:src/xeq.c     **** 		}
6063:src/xeq.c     **** 		// register length 8 bytes
6064:src/xeq.c     **** 		length = (arg << 3);
 27891              		.loc 1 6064 3 is_stmt 1 view .LVU7367
 27892              		.loc 1 6064 17 is_stmt 0 view .LVU7368
 27893 0020 4FEAC409 		lsl	r9, r4, #3
 27894              	.LVL2208:
 27895              	.L2035:
6065:src/xeq.c     **** 	}
6066:src/xeq.c     **** 	distance = NumRegs - arg;
 27896              		.loc 1 6066 2 is_stmt 1 view .LVU7369
 27897              		.loc 1 6066 13 is_stmt 0 view .LVU7370
 27898 0024 97F8CF57 		ldrb	r5, [r7, #1999]	@ zero_extendqisi2
 27899              		.loc 1 6066 21 view .LVU7371
 27900 0028 2D1B     		subs	r5, r5, r4
 27901              	.LVL2209:
6067:src/xeq.c     **** 	
6068:src/xeq.c     **** 	// Move return stack, check for room
6069:src/xeq.c     **** 	if (move_retstk(distance << 2))
 27902              		.loc 1 6069 2 is_stmt 1 view .LVU7372
 27903              		.loc 1 6069 6 is_stmt 0 view .LVU7373
 27904 002a A800     		lsls	r0, r5, #2
 27905 002c FFF7FEFF 		bl	move_retstk
 27906              	.LVL2210:
 27907              		.loc 1 6069 5 view .LVU7374
 27908 0030 0646     		mov	r6, r0
 27909 0032 08B1     		cbz	r0, .L2047
 27910              	.LVL2211:
 27911              	.L2033:
6070:src/xeq.c     **** 		return;
6071:src/xeq.c     **** 	
6072:src/xeq.c     **** 	// Move register contents, including the statistics registers
6073:src/xeq.c     **** 	xcopy((unsigned short *)(Regs + TOPREALREG - arg)     - SizeStatRegs,
6074:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
6075:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
6076:src/xeq.c     **** 
6077:src/xeq.c     **** 	// Clear the left space
6078:src/xeq.c     **** 	if (distance < 0)
6079:src/xeq.c     **** 		xset(Regs + TOPREALREG + distance, 0, -distance << 3);
6080:src/xeq.c     **** 	NumRegs = arg;
6081:src/xeq.c     **** }
 27912              		.loc 1 6081 1 view .LVU7375
 27913 0034 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 27914              	.LVL2212:
 27915              	.L2047:
6073:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
ARM GAS  /tmp/ccK8IvWa.s 			page 714


 27916              		.loc 1 6073 2 is_stmt 1 view .LVU7376
6073:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 27917              		.loc 1 6073 56 is_stmt 0 view .LVU7377
 27918 0038 1B4B     		ldr	r3, .L2049+4
6074:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
 27919              		.loc 1 6074 45 view .LVU7378
 27920 003a 97F8CF17 		ldrb	r1, [r7, #1999]	@ zero_extendqisi2
6073:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 27921              		.loc 1 6073 56 view .LVU7379
 27922 003e 1A68     		ldr	r2, [r3]
6073:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 27923              		.loc 1 6073 2 view .LVU7380
 27924 0040 DFF86C80 		ldr	r8, .L2049+12
6074:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
 27925              		.loc 1 6074 45 view .LVU7381
 27926 0044 C1F16401 		rsb	r1, r1, #100
6073:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 27927              		.loc 1 6073 45 view .LVU7382
 27928 0048 C4F16400 		rsb	r0, r4, #100
6074:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
 27929              		.loc 1 6074 56 view .LVU7383
 27930 004c C2EB8101 		rsb	r1, r2, r1, lsl #2
6073:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 27931              		.loc 1 6073 56 view .LVU7384
 27932 0050 C2EB8000 		rsb	r0, r2, r0, lsl #2
6073:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 27933              		.loc 1 6073 2 view .LVU7385
 27934 0054 08EB4101 		add	r1, r8, r1, lsl #1
 27935 0058 09EB4202 		add	r2, r9, r2, lsl #1
 27936 005c 08EB4000 		add	r0, r8, r0, lsl #1
 27937 0060 FFF7FEFF 		bl	xcopy
 27938              	.LVL2213:
6078:src/xeq.c     **** 		xset(Regs + TOPREALREG + distance, 0, -distance << 3);
 27939              		.loc 1 6078 2 is_stmt 1 view .LVU7386
6078:src/xeq.c     **** 		xset(Regs + TOPREALREG + distance, 0, -distance << 3);
 27940              		.loc 1 6078 5 is_stmt 0 view .LVU7387
 27941 0064 002D     		cmp	r5, #0
 27942 0066 12DB     		blt	.L2048
 27943              	.L2040:
6080:src/xeq.c     **** }
 27944              		.loc 1 6080 2 is_stmt 1 view .LVU7388
6080:src/xeq.c     **** }
 27945              		.loc 1 6080 10 is_stmt 0 view .LVU7389
 27946 0068 87F8CF47 		strb	r4, [r7, #1999]
 27947              		.loc 1 6081 1 view .LVU7390
 27948 006c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 27949              	.LVL2214:
 27950              	.L2046:
6057:src/xeq.c     **** 			// Special case: we're in int mode but came from DP
 27951              		.loc 1 6057 26 discriminator 1 view .LVU7391
 27952 0070 0B28     		cmp	r0, #11
 27953 0072 D5D8     		bhi	.L2036
6060:src/xeq.c     **** 			return;
 27954              		.loc 1 6060 4 is_stmt 1 view .LVU7392
 27955              	.LVL2215:
 27956              	.LBB3742:
 27957              	.LBI3742:
ARM GAS  /tmp/ccK8IvWa.s 			page 715


 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27958              		.loc 1 523 5 view .LVU7393
 27959              	.LBB3743:
 524:src/xeq.c     **** 		Error = e;
 27960              		.loc 1 524 2 view .LVU7394
 524:src/xeq.c     **** 		Error = e;
 27961              		.loc 1 524 12 is_stmt 0 view .LVU7395
 27962 0074 0D4B     		ldr	r3, .L2049+8
 524:src/xeq.c     **** 		Error = e;
 27963              		.loc 1 524 5 view .LVU7396
 27964 0076 1A68     		ldr	r2, [r3]
 27965 0078 002A     		cmp	r2, #0
 27966 007a DBD1     		bne	.L2033
 27967              	.LVL2216:
 27968              	.LBB3744:
 27969              	.LBI3744:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27970              		.loc 1 523 5 is_stmt 1 view .LVU7397
 27971              	.LBB3745:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 27972              		.loc 1 525 3 view .LVU7398
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 27973              		.loc 1 525 9 is_stmt 0 view .LVU7399
 27974 007c 0822     		movs	r2, #8
 27975 007e 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 27976              		.loc 1 526 3 is_stmt 1 view .LVU7400
 27977 0080 D8E7     		b	.L2033
 27978              	.LVL2217:
 27979              	.L2045:
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 27980              		.loc 1 526 3 is_stmt 0 view .LVU7401
 27981              	.LBE3745:
 27982              	.LBE3744:
 27983              	.LBE3743:
 27984              	.LBE3742:
6052:src/xeq.c     **** 		// We need additional room for lettered registers
 27985              		.loc 1 6052 3 is_stmt 1 view .LVU7402
6054:src/xeq.c     **** 	}
 27986              		.loc 1 6054 14 is_stmt 0 view .LVU7403
 27987 0082 4300     		lsls	r3, r0, #1
6052:src/xeq.c     **** 		// We need additional room for lettered registers
 27988              		.loc 1 6052 17 view .LVU7404
 27989 0084 4FEA0019 		lsl	r9, r0, #4
 27990              	.LVL2218:
6054:src/xeq.c     **** 	}
 27991              		.loc 1 6054 3 is_stmt 1 view .LVU7405
6054:src/xeq.c     **** 	}
 27992              		.loc 1 6054 7 is_stmt 0 view .LVU7406
 27993 0088 03F10C04 		add	r4, r3, #12
 27994              	.LVL2219:
6054:src/xeq.c     **** 	}
 27995              		.loc 1 6054 7 view .LVU7407
 27996 008c CAE7     		b	.L2035
 27997              	.LVL2220:
 27998              	.L2048:
6079:src/xeq.c     **** 	NumRegs = arg;
ARM GAS  /tmp/ccK8IvWa.s 			page 716


 27999              		.loc 1 6079 3 is_stmt 1 view .LVU7408
6079:src/xeq.c     **** 	NumRegs = arg;
 28000              		.loc 1 6079 41 is_stmt 0 view .LVU7409
 28001 008e 6A42     		rsbs	r2, r5, #0
6079:src/xeq.c     **** 	NumRegs = arg;
 28002              		.loc 1 6079 26 view .LVU7410
 28003 0090 05F16400 		add	r0, r5, #100
6079:src/xeq.c     **** 	NumRegs = arg;
 28004              		.loc 1 6079 3 view .LVU7411
 28005 0094 3146     		mov	r1, r6
 28006 0096 D200     		lsls	r2, r2, #3
 28007 0098 08EBC000 		add	r0, r8, r0, lsl #3
 28008 009c FFF7FEFF 		bl	xset
 28009              	.LVL2221:
 28010 00a0 E2E7     		b	.L2040
 28011              	.L2050:
 28012 00a2 00BF     		.align	2
 28013              	.L2049:
 28014 00a4 00000000 		.word	PersistentRam
 28015 00a8 00000000 		.word	SizeStatRegs
 28016 00ac 00000000 		.word	Error
 28017 00b0 30040000 		.word	PersistentRam+1072
 28018              		.cfi_endproc
 28019              	.LFE269:
 28021              		.section	.text.op_double,"ax",%progbits
 28022              		.align	1
 28023              		.p2align 2,,3
 28024              		.global	op_double
 28025              		.syntax unified
 28026              		.thumb
 28027              		.thumb_func
 28028              		.fpu fpv4-sp-d16
 28030              	op_double:
 28031              	.LVL2222:
 28032              	.LFB210:
3839:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
 28033              		.loc 1 3839 31 is_stmt 1 view -0
 28034              		.cfi_startproc
 28035              		@ args = 0, pretend = 0, frame = 40
 28036              		@ frame_needed = 0, uses_anonymous_args = 0
3840:src/xeq.c     **** 	const int intm = is_intmode();
 28037              		.loc 1 3840 2 view .LVU7413
3839:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
 28038              		.loc 1 3839 31 is_stmt 0 view .LVU7414
 28039 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 28040              		.cfi_def_cfa_offset 24
 28041              		.cfi_offset 4, -24
 28042              		.cfi_offset 5, -20
 28043              		.cfi_offset 6, -16
 28044              		.cfi_offset 7, -12
 28045              		.cfi_offset 8, -8
 28046              		.cfi_offset 14, -4
3841:src/xeq.c     **** 	int i;
 28047              		.loc 1 3841 19 view .LVU7415
 28048 0004 434E     		ldr	r6, .L2085
3844:src/xeq.c     **** 		// Mode switch
 28049              		.loc 1 3844 5 view .LVU7416
ARM GAS  /tmp/ccK8IvWa.s 			page 717


 28050 0006 A0F1B101 		sub	r1, r0, #177
3844:src/xeq.c     **** 		// Mode switch
 28051              		.loc 1 3844 19 view .LVU7417
 28052 000a 96F8E937 		ldrb	r3, [r6, #2025]	@ zero_extendqisi2
3841:src/xeq.c     **** 	int i;
 28053              		.loc 1 3841 19 view .LVU7418
 28054 000e 96F8E887 		ldrb	r8, [r6, #2024]	@ zero_extendqisi2
 28055              	.LVL2223:
3841:src/xeq.c     **** 	int i;
 28056              		.loc 1 3841 2 is_stmt 1 view .LVU7419
3844:src/xeq.c     **** 		// Mode switch
 28057              		.loc 1 3844 5 is_stmt 0 view .LVU7420
 28058 0012 B1FA81F1 		clz	r1, r1
 28059 0016 4909     		lsrs	r1, r1, #5
 28060 0018 C3F38012 		ubfx	r2, r3, #6, #1
 28061 001c 9142     		cmp	r1, r2
3839:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
 28062              		.loc 1 3839 31 view .LVU7421
 28063 001e 8AB0     		sub	sp, sp, #40
 28064              		.cfi_def_cfa_offset 64
3841:src/xeq.c     **** 	int i;
 28065              		.loc 1 3841 12 view .LVU7422
 28066 0020 08F00108 		and	r8, r8, #1
 28067              	.LVL2224:
3842:src/xeq.c     **** 
 28068              		.loc 1 3842 2 is_stmt 1 view .LVU7423
3844:src/xeq.c     **** 		// Mode switch
 28069              		.loc 1 3844 2 view .LVU7424
3844:src/xeq.c     **** 		// Mode switch
 28070              		.loc 1 3844 5 is_stmt 0 view .LVU7425
 28071 0024 40D0     		beq	.L2052
3846:src/xeq.c     **** 			if (NumRegs < STACK_SIZE + EXTRA_REG) {
 28072              		.loc 1 3846 3 is_stmt 1 view .LVU7426
3846:src/xeq.c     **** 			if (NumRegs < STACK_SIZE + EXTRA_REG) {
 28073              		.loc 1 3846 6 is_stmt 0 view .LVU7427
 28074 0026 B128     		cmp	r0, #177
 28075 0028 49D0     		beq	.L2084
3864:src/xeq.c     **** 				// Convert X to K to single precision
 28076              		.loc 1 3864 4 is_stmt 1 view .LVU7428
3864:src/xeq.c     **** 				// Convert X to K to single precision
 28077              		.loc 1 3864 7 is_stmt 0 view .LVU7429
 28078 002a B8F1000F 		cmp	r8, #0
 28079 002e 24D1     		bne	.L2061
 28080 0030 06F5F565 		add	r5, r6, #1960
 28081 0034 6F24     		movs	r4, #111
 28082 0036 01AF     		add	r7, sp, #4
 28083              	.LVL2225:
 28084              	.L2062:
3868:src/xeq.c     **** 			}
 28085              		.loc 1 3868 6 is_stmt 1 discriminator 3 view .LVU7430
 28086              	.LBB3746:
 28087              	.LBI3746:
 695:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 28088              		.loc 1 695 11 discriminator 3 view .LVU7431
 28089              	.LBB3747:
 696:src/xeq.c     **** }
 28090              		.loc 1 696 2 discriminator 3 view .LVU7432
ARM GAS  /tmp/ccK8IvWa.s 			page 718


 696:src/xeq.c     **** }
 28091              		.loc 1 696 9 is_stmt 0 discriminator 3 view .LVU7433
 28092 0038 2046     		mov	r0, r4
 28093 003a FFF7FEFF 		bl	get_reg_n
 28094              	.LVL2226:
 696:src/xeq.c     **** }
 28095              		.loc 1 696 9 discriminator 3 view .LVU7434
 28096              	.LBE3747:
 28097              	.LBE3746:
 28098              	.LBB3748:
 28099              	.LBI3748:
 625:src/xeq.c     **** 	decNumber temp;
 28100              		.loc 1 625 6 is_stmt 1 discriminator 3 view .LVU7435
 28101              	.LBB3749:
 626:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 28102              		.loc 1 626 2 discriminator 3 view .LVU7436
 627:src/xeq.c     **** }
 28103              		.loc 1 627 2 discriminator 3 view .LVU7437
 627:src/xeq.c     **** }
 28104              		.loc 1 627 24 is_stmt 0 discriminator 3 view .LVU7438
 28105 003e 3946     		mov	r1, r7
 28106 0040 FFF7FEFF 		bl	decimal128ToNumber
 28107              	.LVL2227:
 627:src/xeq.c     **** }
 28108              		.loc 1 627 24 discriminator 3 view .LVU7439
 28109 0044 013C     		subs	r4, r4, #1
 28110              	.LVL2228:
 627:src/xeq.c     **** }
 28111              		.loc 1 627 24 discriminator 3 view .LVU7440
 28112 0046 0146     		mov	r1, r0
 627:src/xeq.c     **** }
 28113              		.loc 1 627 2 discriminator 3 view .LVU7441
 28114 0048 2846     		mov	r0, r5
 28115 004a FFF7FEFF 		bl	packed_from_number
 28116              	.LVL2229:
 627:src/xeq.c     **** }
 28117              		.loc 1 627 2 discriminator 3 view .LVU7442
 28118              	.LBE3749:
 28119              	.LBE3748:
3867:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
 28120              		.loc 1 3867 50 is_stmt 1 discriminator 3 view .LVU7443
3867:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
 28121              		.loc 1 3867 42 discriminator 3 view .LVU7444
3867:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
 28122              		.loc 1 3867 5 is_stmt 0 discriminator 3 view .LVU7445
 28123 004e 632C     		cmp	r4, #99
 28124 0050 A5F10805 		sub	r5, r5, #8
 28125 0054 F0D1     		bne	.L2062
3870:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 28126              		.loc 1 3870 4 is_stmt 1 view .LVU7446
3870:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 28127              		.loc 1 3870 23 is_stmt 0 view .LVU7447
 28128 0056 96F8E937 		ldrb	r3, [r6, #2025]	@ zero_extendqisi2
3871:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28129              		.loc 1 3871 7 view .LVU7448
 28130 005a 96F8CF27 		ldrb	r2, [r6, #1999]	@ zero_extendqisi2
3870:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
ARM GAS  /tmp/ccK8IvWa.s 			page 719


 28131              		.loc 1 3870 23 view .LVU7449
 28132 005e 6FF38613 		bfc	r3, #6, #1
3871:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28133              		.loc 1 3871 7 view .LVU7450
 28134 0062 642A     		cmp	r2, #100
3870:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 28135              		.loc 1 3870 23 view .LVU7451
 28136 0064 86F8E937 		strb	r3, [r6, #2025]
3871:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28137              		.loc 1 3871 4 is_stmt 1 view .LVU7452
3871:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28138              		.loc 1 3871 7 is_stmt 0 view .LVU7453
 28139 0068 1AD8     		bhi	.L2066
 28140              	.L2081:
3875:src/xeq.c     **** 	if (intm) {
 28141              		.loc 1 3875 2 is_stmt 1 view .LVU7454
3875:src/xeq.c     **** 	if (intm) {
 28142              		.loc 1 3875 14 is_stmt 0 view .LVU7455
 28143 006a 6420     		movs	r0, #100
 28144 006c FFF7FEFF 		bl	get_reg_n
 28145              	.LVL2230:
3875:src/xeq.c     **** 	if (intm) {
 28146              		.loc 1 3875 12 view .LVU7456
 28147 0070 294B     		ldr	r3, .L2085+4
 28148 0072 1860     		str	r0, [r3]
3876:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 28149              		.loc 1 3876 2 is_stmt 1 view .LVU7457
 28150              	.L2051:
3880:src/xeq.c     **** 
 28151              		.loc 1 3880 1 is_stmt 0 view .LVU7458
 28152 0074 0AB0     		add	sp, sp, #40
 28153              		.cfi_remember_state
 28154              		.cfi_def_cfa_offset 24
 28155              		@ sp needed
 28156 0076 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 28157              	.LVL2231:
 28158              	.L2061:
 28159              		.cfi_restore_state
3870:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 28160              		.loc 1 3870 4 is_stmt 1 view .LVU7459
3871:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28161              		.loc 1 3871 7 is_stmt 0 view .LVU7460
 28162 007a 96F8CF27 		ldrb	r2, [r6, #1999]	@ zero_extendqisi2
3870:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 28163              		.loc 1 3870 23 view .LVU7461
 28164 007e 6FF38613 		bfc	r3, #6, #1
3871:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28165              		.loc 1 3871 7 view .LVU7462
 28166 0082 642A     		cmp	r2, #100
3870:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 28167              		.loc 1 3870 23 view .LVU7463
 28168 0084 86F8E937 		strb	r3, [r6, #2025]
3871:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28169              		.loc 1 3871 4 is_stmt 1 view .LVU7464
3871:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28170              		.loc 1 3871 7 is_stmt 0 view .LVU7465
 28171 0088 0AD8     		bhi	.L2066
ARM GAS  /tmp/ccK8IvWa.s 			page 720


 28172              	.LVL2232:
 28173              	.L2080:
3875:src/xeq.c     **** 	if (intm) {
 28174              		.loc 1 3875 2 is_stmt 1 view .LVU7466
3875:src/xeq.c     **** 	if (intm) {
 28175              		.loc 1 3875 14 is_stmt 0 view .LVU7467
 28176 008a 6420     		movs	r0, #100
 28177 008c FFF7FEFF 		bl	get_reg_n
 28178              	.LVL2233:
3875:src/xeq.c     **** 	if (intm) {
 28179              		.loc 1 3875 12 view .LVU7468
 28180 0090 214B     		ldr	r3, .L2085+4
 28181 0092 1860     		str	r0, [r3]
3876:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 28182              		.loc 1 3876 2 is_stmt 1 view .LVU7469
 28183              	.L2065:
3878:src/xeq.c     **** 	}
 28184              		.loc 1 3878 3 view .LVU7470
 28185 0094 C620     		movs	r0, #198
 28186 0096 FFF7FEFF 		bl	op_float
 28187              	.LVL2234:
3880:src/xeq.c     **** 
 28188              		.loc 1 3880 1 is_stmt 0 view .LVU7471
 28189 009a 0AB0     		add	sp, sp, #40
 28190              		.cfi_remember_state
 28191              		.cfi_def_cfa_offset 24
 28192              		@ sp needed
 28193 009c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 28194              	.LVL2235:
 28195              	.L2066:
 28196              		.cfi_restore_state
3872:src/xeq.c     **** 		}
 28197              		.loc 1 3872 5 is_stmt 1 view .LVU7472
 28198 00a0 7D21     		movs	r1, #125
 28199 00a2 6420     		movs	r0, #100
 28200 00a4 FFF7FEFF 		bl	cmdregs
 28201              	.LVL2236:
 28202              	.L2052:
3875:src/xeq.c     **** 	if (intm) {
 28203              		.loc 1 3875 2 view .LVU7473
3875:src/xeq.c     **** 	if (intm) {
 28204              		.loc 1 3875 14 is_stmt 0 view .LVU7474
 28205 00a8 6420     		movs	r0, #100
 28206 00aa FFF7FEFF 		bl	get_reg_n
 28207              	.LVL2237:
3875:src/xeq.c     **** 	if (intm) {
 28208              		.loc 1 3875 12 view .LVU7475
 28209 00ae 1A4B     		ldr	r3, .L2085+4
 28210 00b0 1860     		str	r0, [r3]
3876:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 28211              		.loc 1 3876 2 is_stmt 1 view .LVU7476
3876:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 28212              		.loc 1 3876 5 is_stmt 0 view .LVU7477
 28213 00b2 B8F1000F 		cmp	r8, #0
 28214 00b6 EDD1     		bne	.L2065
3880:src/xeq.c     **** 
 28215              		.loc 1 3880 1 view .LVU7478
ARM GAS  /tmp/ccK8IvWa.s 			page 721


 28216 00b8 0AB0     		add	sp, sp, #40
 28217              		.cfi_remember_state
 28218              		.cfi_def_cfa_offset 24
 28219              		@ sp needed
 28220 00ba BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 28221              	.LVL2238:
 28222              	.L2084:
 28223              		.cfi_restore_state
3847:src/xeq.c     **** 				// Need space for double precision stack
 28224              		.loc 1 3847 4 is_stmt 1 view .LVU7479
3847:src/xeq.c     **** 				// Need space for double precision stack
 28225              		.loc 1 3847 7 is_stmt 0 view .LVU7480
 28226 00be 96F8CF37 		ldrb	r3, [r6, #1999]	@ zero_extendqisi2
 28227 00c2 0B2B     		cmp	r3, #11
 28228 00c4 1DD9     		bls	.L2054
 28229              	.LVL2239:
 28230              	.L2057:
3855:src/xeq.c     **** 			if (! intm) {
 28231              		.loc 1 3855 4 is_stmt 1 view .LVU7481
3855:src/xeq.c     **** 			if (! intm) {
 28232              		.loc 1 3855 23 is_stmt 0 view .LVU7482
 28233 00c6 96F8E937 		ldrb	r3, [r6, #2025]	@ zero_extendqisi2
 28234 00ca 43F04003 		orr	r3, r3, #64
 28235 00ce 86F8E937 		strb	r3, [r6, #2025]
3856:src/xeq.c     **** 				// Convert X to K to double precision
 28236              		.loc 1 3856 4 is_stmt 1 view .LVU7483
3856:src/xeq.c     **** 				// Convert X to K to double precision
 28237              		.loc 1 3856 7 is_stmt 0 view .LVU7484
 28238 00d2 B8F1000F 		cmp	r8, #0
 28239 00d6 D8D1     		bne	.L2080
 28240 00d8 104E     		ldr	r6, .L2085+8
 28241 00da 6424     		movs	r4, #100
 28242 00dc 01AF     		add	r7, sp, #4
 28243              	.L2059:
 28244              	.LVL2240:
3860:src/xeq.c     **** 			}
 28245              		.loc 1 3860 6 is_stmt 1 view .LVU7485
 28246              	.LBB3750:
 28247              	.LBI3750:
 695:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 28248              		.loc 1 695 11 view .LVU7486
 28249              	.LBB3751:
 696:src/xeq.c     **** }
 28250              		.loc 1 696 2 view .LVU7487
 696:src/xeq.c     **** }
 28251              		.loc 1 696 9 is_stmt 0 view .LVU7488
 28252 00de 2046     		mov	r0, r4
 28253 00e0 FFF7FEFF 		bl	get_reg_n
 28254              	.LVL2241:
 28255              	.LBE3751:
 28256              	.LBE3750:
 28257              	.LBB3753:
 28258              	.LBB3754:
 633:src/xeq.c     **** }
 28259              		.loc 1 633 27 view .LVU7489
 28260 00e4 3946     		mov	r1, r7
 28261              	.LBE3754:
ARM GAS  /tmp/ccK8IvWa.s 			page 722


 28262              	.LBE3753:
 28263              	.LBB3756:
 28264              	.LBB3752:
 696:src/xeq.c     **** }
 28265              		.loc 1 696 9 view .LVU7490
 28266 00e6 0546     		mov	r5, r0
 28267              	.LVL2242:
 696:src/xeq.c     **** }
 28268              		.loc 1 696 9 view .LVU7491
 28269              	.LBE3752:
 28270              	.LBE3756:
 28271              	.LBB3757:
 28272              	.LBI3753:
 631:src/xeq.c     **** 	decNumber temp;
 28273              		.loc 1 631 6 is_stmt 1 view .LVU7492
 28274              	.LBB3755:
 632:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 28275              		.loc 1 632 2 view .LVU7493
 633:src/xeq.c     **** }
 28276              		.loc 1 633 2 view .LVU7494
 633:src/xeq.c     **** }
 28277              		.loc 1 633 27 is_stmt 0 view .LVU7495
 28278 00e8 3046     		mov	r0, r6
 28279              	.LVL2243:
 633:src/xeq.c     **** }
 28280              		.loc 1 633 27 view .LVU7496
 28281 00ea FFF7FEFF 		bl	decimal64ToNumber
 28282              	.LVL2244:
 28283 00ee 0134     		adds	r4, r4, #1
 28284              	.LVL2245:
 633:src/xeq.c     **** }
 28285              		.loc 1 633 27 view .LVU7497
 28286 00f0 0146     		mov	r1, r0
 633:src/xeq.c     **** }
 28287              		.loc 1 633 2 view .LVU7498
 28288 00f2 2846     		mov	r0, r5
 28289 00f4 FFF7FEFF 		bl	packed128_from_number
 28290              	.LVL2246:
 633:src/xeq.c     **** }
 28291              		.loc 1 633 2 view .LVU7499
 28292              	.LBE3755:
 28293              	.LBE3757:
3859:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
 28294              		.loc 1 3859 45 is_stmt 1 view .LVU7500
3859:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
 28295              		.loc 1 3859 17 view .LVU7501
3859:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
 28296              		.loc 1 3859 5 is_stmt 0 view .LVU7502
 28297 00f8 702C     		cmp	r4, #112
 28298 00fa 06F10806 		add	r6, r6, #8
 28299 00fe EED1     		bne	.L2059
 28300 0100 B3E7     		b	.L2081
 28301              	.LVL2247:
 28302              	.L2054:
3849:src/xeq.c     **** 				if (Error) {
 28303              		.loc 1 3849 5 is_stmt 1 view .LVU7503
 28304 0102 7D21     		movs	r1, #125
ARM GAS  /tmp/ccK8IvWa.s 			page 723


 28305 0104 0C20     		movs	r0, #12
 28306              	.LVL2248:
3849:src/xeq.c     **** 				if (Error) {
 28307              		.loc 1 3849 5 is_stmt 0 view .LVU7504
 28308 0106 FFF7FEFF 		bl	cmdregs
 28309              	.LVL2249:
3850:src/xeq.c     **** 					return;
 28310              		.loc 1 3850 5 is_stmt 1 view .LVU7505
3850:src/xeq.c     **** 					return;
 28311              		.loc 1 3850 9 is_stmt 0 view .LVU7506
 28312 010a 054B     		ldr	r3, .L2085+12
3850:src/xeq.c     **** 					return;
 28313              		.loc 1 3850 8 view .LVU7507
 28314 010c 1B68     		ldr	r3, [r3]
 28315 010e 002B     		cmp	r3, #0
 28316 0110 D9D0     		beq	.L2057
 28317 0112 AFE7     		b	.L2051
 28318              	.L2086:
 28319              		.align	2
 28320              	.L2085:
 28321 0114 00000000 		.word	PersistentRam
 28322 0118 00000000 		.word	StackBase
 28323 011c 50070000 		.word	PersistentRam+1872
 28324 0120 00000000 		.word	Error
 28325              		.cfi_endproc
 28326              	.LFE210:
 28328              		.section	.text.cmdrestm,"ax",%progbits
 28329              		.align	1
 28330              		.p2align 2,,3
 28331              		.global	cmdrestm
 28332              		.syntax unified
 28333              		.thumb
 28334              		.thumb_func
 28335              		.fpu fpv4-sp-d16
 28337              	cmdrestm:
 28338              	.LVL2250:
 28339              	.LFB205:
3536:src/xeq.c     **** 	const int dbl = is_dblmode();
 28340              		.loc 1 3536 47 is_stmt 1 view -0
 28341              		.cfi_startproc
 28342              		@ args = 0, pretend = 0, frame = 0
 28343              		@ frame_needed = 0, uses_anonymous_args = 0
3537:src/xeq.c     **** 	const int intm = is_intmode();
 28344              		.loc 1 3537 2 view .LVU7509
 28345              	.LBB3758:
 28346              	.LBI3758:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 28347              		.loc 1 918 5 view .LVU7510
 28348              	.LBB3759:
 919:src/xeq.c     **** }
 28349              		.loc 1 919 2 view .LVU7511
 28350              	.LBE3759:
 28351              	.LBE3758:
3536:src/xeq.c     **** 	const int dbl = is_dblmode();
 28352              		.loc 1 3536 47 is_stmt 0 view .LVU7512
 28353 0000 70B5     		push	{r4, r5, r6, lr}
 28354              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccK8IvWa.s 			page 724


 28355              		.cfi_offset 4, -16
 28356              		.cfi_offset 5, -12
 28357              		.cfi_offset 6, -8
 28358              		.cfi_offset 14, -4
 28359              	.LBB3767:
 28360              	.LBB3760:
 919:src/xeq.c     **** }
 28361              		.loc 1 919 24 view .LVU7513
 28362 0002 284C     		ldr	r4, .L2095
 28363              	.LBE3760:
 28364              	.LBE3767:
3538:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
 28365              		.loc 1 3538 19 view .LVU7514
 28366 0004 94F8E857 		ldrb	r5, [r4, #2024]	@ zero_extendqisi2
 28367              	.LBB3768:
 28368              	.LBB3761:
 919:src/xeq.c     **** }
 28369              		.loc 1 919 24 view .LVU7515
 28370 0008 B4F8E867 		ldrh	r6, [r4, #2024]
 28371              	.LVL2251:
 919:src/xeq.c     **** }
 28372              		.loc 1 919 24 view .LVU7516
 28373              	.LBE3761:
 28374              	.LBE3768:
3538:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
 28375              		.loc 1 3538 2 is_stmt 1 view .LVU7517
3539:src/xeq.c     **** 
 28376              		.loc 1 3539 18 is_stmt 0 view .LVU7518
 28377 000c FFF7FEFF 		bl	get_reg_n
 28378              	.LVL2252:
3539:src/xeq.c     **** 
 28379              		.loc 1 3539 2 view .LVU7519
 28380 0010 0822     		movs	r2, #8
3539:src/xeq.c     **** 
 28381              		.loc 1 3539 18 view .LVU7520
 28382 0012 0146     		mov	r1, r0
3539:src/xeq.c     **** 
 28383              		.loc 1 3539 2 view .LVU7521
 28384 0014 04F2E470 		addw	r0, r4, #2020
 28385 0018 FFF7FEFF 		bl	xcopy
 28386              	.LVL2253:
3542:src/xeq.c     **** 		UState.contrast = 6;
 28387              		.loc 1 3542 23 view .LVU7522
 28388 001c 94F8E437 		ldrb	r3, [r4, #2020]	@ zero_extendqisi2
3542:src/xeq.c     **** 		UState.contrast = 6;
 28389              		.loc 1 3542 5 view .LVU7523
 28390 0020 1A07     		lsls	r2, r3, #28
3538:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
 28391              		.loc 1 3538 19 view .LVU7524
 28392 0022 05F00105 		and	r5, r5, #1
 28393              	.LVL2254:
3539:src/xeq.c     **** 
 28394              		.loc 1 3539 2 is_stmt 1 view .LVU7525
3542:src/xeq.c     **** 		UState.contrast = 6;
 28395              		.loc 1 3542 2 view .LVU7526
3542:src/xeq.c     **** 		UState.contrast = 6;
 28396              		.loc 1 3542 5 is_stmt 0 view .LVU7527
ARM GAS  /tmp/ccK8IvWa.s 			page 725


 28397 0026 04D1     		bne	.L2088
3543:src/xeq.c     **** 
 28398              		.loc 1 3543 3 is_stmt 1 view .LVU7528
3543:src/xeq.c     **** 
 28399              		.loc 1 3543 19 is_stmt 0 view .LVU7529
 28400 0028 0622     		movs	r2, #6
 28401 002a 62F30303 		bfi	r3, r2, #0, #4
 28402 002e 84F8E437 		strb	r3, [r4, #2020]
 28403              	.L2088:
3545:src/xeq.c     **** 		// Switch back to decimal or integer mode
 28404              		.loc 1 3545 2 is_stmt 1 view .LVU7530
3545:src/xeq.c     **** 		// Switch back to decimal or integer mode
 28405              		.loc 1 3545 14 is_stmt 0 view .LVU7531
 28406 0032 94F8E837 		ldrb	r3, [r4, #2024]	@ zero_extendqisi2
3545:src/xeq.c     **** 		// Switch back to decimal or integer mode
 28407              		.loc 1 3545 5 view .LVU7532
 28408 0036 03F00102 		and	r2, r3, #1
 28409 003a AA42     		cmp	r2, r5
 28410 003c 07D0     		beq	.L2089
3547:src/xeq.c     **** 		if (intm)
 28411              		.loc 1 3547 3 is_stmt 1 view .LVU7533
3547:src/xeq.c     **** 		if (intm)
 28412              		.loc 1 3547 15 is_stmt 0 view .LVU7534
 28413 003e 65F30003 		bfi	r3, r5, #0, #1
 28414 0042 84F8E837 		strb	r3, [r4, #2024]
3548:src/xeq.c     **** 			op_float(OP_FLOAT_RCLM);
 28415              		.loc 1 3548 3 is_stmt 1 view .LVU7535
3548:src/xeq.c     **** 			op_float(OP_FLOAT_RCLM);
 28416              		.loc 1 3548 6 is_stmt 0 view .LVU7536
 28417 0046 4DB3     		cbz	r5, .L2090
3549:src/xeq.c     **** 		else
 28418              		.loc 1 3549 4 is_stmt 1 view .LVU7537
 28419 0048 C720     		movs	r0, #199
 28420 004a FFF7FEFF 		bl	op_float
 28421              	.LVL2255:
 28422              	.L2089:
3553:src/xeq.c     **** 		// Switch back to double/single precision
 28423              		.loc 1 3553 2 view .LVU7538
3553:src/xeq.c     **** 		// Switch back to double/single precision
 28424              		.loc 1 3553 6 is_stmt 0 view .LVU7539
 28425 004e 94F8E837 		ldrb	r3, [r4, #2024]	@ zero_extendqisi2
3553:src/xeq.c     **** 		// Switch back to double/single precision
 28426              		.loc 1 3553 5 view .LVU7540
 28427 0052 DB07     		lsls	r3, r3, #31
 28428 0054 21D4     		bmi	.L2087
 28429              	.LBB3769:
 28430              	.LBB3770:
 919:src/xeq.c     **** }
 28431              		.loc 1 919 24 view .LVU7541
 28432 0056 B4F8E837 		ldrh	r3, [r4, #2024]
 28433              	.LBE3770:
 28434              	.LBE3769:
 28435              	.LBB3773:
 28436              	.LBB3762:
 28437 005a 44F20102 		movw	r2, #16385
 28438              	.LBE3762:
 28439              	.LBE3773:
ARM GAS  /tmp/ccK8IvWa.s 			page 726


 28440              	.LBB3774:
 28441              	.LBB3771:
 28442 005e 1340     		ands	r3, r3, r2
 28443              	.LBE3771:
 28444              	.LBE3774:
 28445              	.LBB3775:
 28446              	.LBB3763:
 28447 0060 1640     		ands	r6, r6, r2
 28448              	.LVL2256:
 919:src/xeq.c     **** }
 28449              		.loc 1 919 24 view .LVU7542
 28450              	.LBE3763:
 28451              	.LBE3775:
3553:src/xeq.c     **** 		// Switch back to double/single precision
 28452              		.loc 1 3553 21 view .LVU7543
 28453 0062 A3F58043 		sub	r3, r3, #16384
 28454              	.LBB3776:
 28455              	.LBB3764:
 919:src/xeq.c     **** }
 28456              		.loc 1 919 24 view .LVU7544
 28457 0066 A6F58042 		sub	r2, r6, #16384
 28458              	.LBE3764:
 28459              	.LBE3776:
3553:src/xeq.c     **** 		// Switch back to double/single precision
 28460              		.loc 1 3553 21 view .LVU7545
 28461 006a B3FA83F3 		clz	r3, r3
 28462              	.LBB3777:
 28463              	.LBB3765:
 919:src/xeq.c     **** }
 28464              		.loc 1 919 24 view .LVU7546
 28465 006e B2FA82F2 		clz	r2, r2
 28466              	.LBE3765:
 28467              	.LBE3777:
3553:src/xeq.c     **** 		// Switch back to double/single precision
 28468              		.loc 1 3553 21 view .LVU7547
 28469 0072 5B09     		lsrs	r3, r3, #5
 28470              	.LBB3778:
 28471              	.LBB3766:
 919:src/xeq.c     **** }
 28472              		.loc 1 919 24 view .LVU7548
 28473 0074 5209     		lsrs	r2, r2, #5
 28474              	.LBE3766:
 28475              	.LBE3778:
 28476              	.LBB3779:
 28477              	.LBI3769:
 918:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 28478              		.loc 1 918 5 is_stmt 1 view .LVU7549
 28479              	.LBB3772:
 919:src/xeq.c     **** }
 28480              		.loc 1 919 2 view .LVU7550
 28481              	.LBE3772:
 28482              	.LBE3779:
3553:src/xeq.c     **** 		// Switch back to double/single precision
 28483              		.loc 1 3553 21 is_stmt 0 view .LVU7551
 28484 0076 9342     		cmp	r3, r2
 28485 0078 0FD0     		beq	.L2087
3555:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
ARM GAS  /tmp/ccK8IvWa.s 			page 727


 28486              		.loc 1 3555 3 is_stmt 1 view .LVU7552
3555:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
 28487              		.loc 1 3555 22 is_stmt 0 view .LVU7553
 28488 007a 94F8E937 		ldrb	r3, [r4, #2025]	@ zero_extendqisi2
3556:src/xeq.c     **** 	}
 28489              		.loc 1 3556 3 view .LVU7554
 28490 007e B6F5804F 		cmp	r6, #16384
3555:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
 28491              		.loc 1 3555 22 view .LVU7555
 28492 0082 62F38613 		bfi	r3, r2, #6, #1
 28493 0086 84F8E937 		strb	r3, [r4, #2025]
3556:src/xeq.c     **** 	}
 28494              		.loc 1 3556 3 is_stmt 1 view .LVU7556
 28495 008a 08BF     		it	eq
 28496 008c B220     		moveq	r0, #178
3558:src/xeq.c     **** #endif
 28497              		.loc 1 3558 1 is_stmt 0 view .LVU7557
 28498 008e BDE87040 		pop	{r4, r5, r6, lr}
 28499              		.cfi_remember_state
 28500              		.cfi_restore 14
 28501              		.cfi_restore 6
 28502              		.cfi_restore 5
 28503              		.cfi_restore 4
 28504              		.cfi_def_cfa_offset 0
3556:src/xeq.c     **** 	}
 28505              		.loc 1 3556 3 view .LVU7558
 28506 0092 18BF     		it	ne
 28507 0094 B120     		movne	r0, #177
 28508 0096 FFF7FEBF 		b	op_double
 28509              	.LVL2257:
 28510              	.L2087:
 28511              		.cfi_restore_state
3558:src/xeq.c     **** #endif
 28512              		.loc 1 3558 1 view .LVU7559
 28513 009a 70BD     		pop	{r4, r5, r6, pc}
 28514              	.LVL2258:
 28515              	.L2090:
3551:src/xeq.c     **** 	}
 28516              		.loc 1 3551 4 is_stmt 1 view .LVU7560
 28517 009c FFF7FEFF 		bl	switch_to_int
 28518              	.LVL2259:
 28519 00a0 D5E7     		b	.L2089
 28520              	.L2096:
 28521 00a2 00BF     		.align	2
 28522              	.L2095:
 28523 00a4 00000000 		.word	PersistentRam
 28524              		.cfi_endproc
 28525              	.LFE205:
 28527              		.section	.text.cmdxin,"ax",%progbits
 28528              		.align	1
 28529              		.p2align 2,,3
 28530              		.global	cmdxin
 28531              		.syntax unified
 28532              		.thumb
 28533              		.thumb_func
 28534              		.fpu fpv4-sp-d16
 28536              	cmdxin:
ARM GAS  /tmp/ccK8IvWa.s 			page 728


 28537              	.LVL2260:
 28538              	.LFB263:
5666:src/xeq.c     **** 
 28539              		.loc 1 5666 45 view -0
 28540              		.cfi_startproc
 28541              		@ args = 0, pretend = 0, frame = 40
 28542              		@ frame_needed = 0, uses_anonymous_args = 0
5668:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 28543              		.loc 1 5668 2 view .LVU7562
5678:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 28544              		.loc 1 5678 2 view .LVU7563
5666:src/xeq.c     **** 
 28545              		.loc 1 5666 45 is_stmt 0 view .LVU7564
 28546 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 28547              		.cfi_def_cfa_offset 28
 28548              		.cfi_offset 4, -28
 28549              		.cfi_offset 5, -24
 28550              		.cfi_offset 6, -20
 28551              		.cfi_offset 7, -16
 28552              		.cfi_offset 8, -12
 28553              		.cfi_offset 9, -8
 28554              		.cfi_offset 14, -4
5678:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 28555              		.loc 1 5678 6 view .LVU7565
 28556 0004 674D     		ldr	r5, .L2126
5678:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 28557              		.loc 1 5678 5 view .LVU7566
 28558 0006 95F90130 		ldrsb	r3, [r5, #1]
 28559 000a 002B     		cmp	r3, #0
5666:src/xeq.c     **** 
 28560              		.loc 1 5666 45 view .LVU7567
 28561 000c 8BB0     		sub	sp, sp, #44
 28562              		.cfi_def_cfa_offset 72
5678:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 28563              		.loc 1 5678 5 view .LVU7568
 28564 000e C0F2A880 		blt	.L2123
5686:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 28565              		.loc 1 5686 2 is_stmt 1 view .LVU7569
 28566 0012 654F     		ldr	r7, .L2126+4
5691:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 28567              		.loc 1 5691 32 is_stmt 0 view .LVU7570
 28568 0014 654C     		ldr	r4, .L2126+8
 28569              	.LBB3795:
 28570              	.LBB3796:
 721:src/xeq.c     **** }
 28571              		.loc 1 721 15 view .LVU7571
 28572 0016 DFF8A881 		ldr	r8, .L2126+28
 28573 001a 0646     		mov	r6, r0
 28574              	.LBE3796:
 28575              	.LBE3795:
5686:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 28576              		.loc 1 5686 2 view .LVU7572
 28577 001c 4FF4E872 		mov	r2, #464
 28578 0020 0021     		movs	r1, #0
 28579              	.LVL2261:
5686:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 28580              		.loc 1 5686 2 view .LVU7573
ARM GAS  /tmp/ccK8IvWa.s 			page 729


 28581 0022 3846     		mov	r0, r7
 28582              	.LVL2262:
5686:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 28583              		.loc 1 5686 2 view .LVU7574
 28584 0024 FFF7FEFF 		bl	xset
 28585              	.LVL2263:
5687:src/xeq.c     **** 
 28586              		.loc 1 5687 2 is_stmt 1 view .LVU7575
 28587 0028 1022     		movs	r2, #16
 28588 002a 0021     		movs	r1, #0
 28589 002c 2846     		mov	r0, r5
 28590 002e FFF7FEFF 		bl	xset
 28591              	.LVL2264:
5690:src/xeq.c     **** 	XromFlags.stack_depth = UState.stack_depth;
 28592              		.loc 1 5690 2 view .LVU7576
 28593              	.LBB3800:
 28594              	.LBI3795:
 720:src/xeq.c     **** 	return State2.state_lift;
 28595              		.loc 1 720 12 view .LVU7577
 28596              	.LBB3797:
 721:src/xeq.c     **** }
 28597              		.loc 1 721 2 view .LVU7578
 28598              	.LBE3797:
 28599              	.LBE3800:
5693:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 28600              		.loc 1 5693 29 is_stmt 0 view .LVU7579
 28601 0032 94F8E837 		ldrb	r3, [r4, #2024]	@ zero_extendqisi2
 28602              	.LBB3801:
 28603              	.LBB3798:
 721:src/xeq.c     **** }
 28604              		.loc 1 721 15 view .LVU7580
 28605 0036 98F817C0 		ldrb	ip, [r8, #23]	@ zero_extendqisi2
 28606              	.LBE3798:
 28607              	.LBE3801:
5691:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 28608              		.loc 1 5691 32 view .LVU7581
 28609 003a 94F8EA07 		ldrb	r0, [r4, #2026]	@ zero_extendqisi2
5692:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
 28610              		.loc 1 5692 32 view .LVU7582
 28611 003e 94F8E917 		ldrb	r1, [r4, #2025]	@ zero_extendqisi2
5694:src/xeq.c     **** 	XromFlags.state_lift = 1;
 28612              		.loc 1 5694 41 view .LVU7583
 28613 0042 94F8EB27 		ldrb	r2, [r4, #2027]	@ zero_extendqisi2
5709:src/xeq.c     **** 
 28614              		.loc 1 5709 20 view .LVU7584
 28615 0046 B4F8E297 		ldrh	r9, [r4, #2018]
 28616 004a A5F80C90 		strh	r9, [r5, #12]	@ movhi
5693:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 28617              		.loc 1 5693 29 view .LVU7585
 28618 004e 03F00103 		and	r3, r3, #1
 28619              	.LBB3802:
 28620              	.LBB3799:
 721:src/xeq.c     **** }
 28621              		.loc 1 721 15 view .LVU7586
 28622 0052 CCF3801C 		ubfx	ip, ip, #6, #1
 28623              	.LBE3799:
 28624              	.LBE3802:
ARM GAS  /tmp/ccK8IvWa.s 			page 730


5691:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 28625              		.loc 1 5691 2 is_stmt 1 view .LVU7587
5693:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 28626              		.loc 1 5693 21 is_stmt 0 view .LVU7588
 28627 0056 63F03F03 		orn	r3, r3, #63
 28628 005a 43EA4C03 		orr	r3, r3, ip, lsl #1
5691:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 28629              		.loc 1 5691 32 view .LVU7589
 28630 005e C0F3C000 		ubfx	r0, r0, #3, #1
5692:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
 28631              		.loc 1 5692 2 is_stmt 1 view .LVU7590
5693:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 28632              		.loc 1 5693 21 is_stmt 0 view .LVU7591
 28633 0062 43EA8003 		orr	r3, r3, r0, lsl #2
5692:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
 28634              		.loc 1 5692 32 view .LVU7592
 28635 0066 C1F38011 		ubfx	r1, r1, #6, #1
5693:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 28636              		.loc 1 5693 2 is_stmt 1 view .LVU7593
5694:src/xeq.c     **** 	XromFlags.state_lift = 1;
 28637              		.loc 1 5694 9 view .LVU7594
5727:src/xeq.c     **** 	XromIn = (arg & 0x7);
 28638              		.loc 1 5727 35 is_stmt 0 view .LVU7595
 28639 006a C6F3C01C 		ubfx	ip, r6, #7, #1
5693:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 28640              		.loc 1 5693 21 view .LVU7596
 28641 006e 43EAC103 		orr	r3, r3, r1, lsl #3
5694:src/xeq.c     **** 	XromFlags.state_lift = 1;
 28642              		.loc 1 5694 33 view .LVU7597
 28643 0072 A978     		ldrb	r1, [r5, #2]	@ zero_extendqisi2
5708:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 28644              		.loc 1 5708 17 view .LVU7598
 28645 0074 4E48     		ldr	r0, .L2126+12
5726:src/xeq.c     **** 	XromFlags.complex = (arg & 0x80) != 0;
 28646              		.loc 1 5726 36 view .LVU7599
 28647 0076 C6F3801E 		ubfx	lr, r6, #6, #1
5693:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 28648              		.loc 1 5693 21 view .LVU7600
 28649 007a 43EA0C13 		orr	r3, r3, ip, lsl #4
5694:src/xeq.c     **** 	XromFlags.state_lift = 1;
 28650              		.loc 1 5694 41 view .LVU7601
 28651 007e C2F30212 		ubfx	r2, r2, #4, #3
5695:src/xeq.c     **** 	XromFlags.xIN = 1;
 28652              		.loc 1 5695 2 is_stmt 1 view .LVU7602
5696:src/xeq.c     **** 
 28653              		.loc 1 5696 2 view .LVU7603
5708:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 28654              		.loc 1 5708 2 view .LVU7604
5693:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 28655              		.loc 1 5693 21 is_stmt 0 view .LVU7605
 28656 0082 43EA4E13 		orr	r3, r3, lr, lsl #5
5694:src/xeq.c     **** 	XromFlags.state_lift = 1;
 28657              		.loc 1 5694 33 view .LVU7606
 28658 0086 62F30201 		bfi	r1, r2, #0, #3
5716:src/xeq.c     **** #endif
 28659              		.loc 1 5716 17 view .LVU7607
 28660 008a 41F2020C 		movw	ip, #4098
ARM GAS  /tmp/ccK8IvWa.s 			page 731


5711:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 28661              		.loc 1 5711 9 view .LVU7608
 28662 008e 07F5E872 		add	r2, r7, #464
5708:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 28663              		.loc 1 5708 17 view .LVU7609
 28664 0092 D0F800E0 		ldr	lr, [r0]
5716:src/xeq.c     **** #endif
 28665              		.loc 1 5716 17 view .LVU7610
 28666 0096 A7F8CCC1 		strh	ip, [r7, #460]	@ movhi
5693:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 28667              		.loc 1 5693 21 view .LVU7611
 28668 009a 6B70     		strb	r3, [r5, #1]
5731:src/xeq.c     **** 		// Complex arguments are always in pairs
 28669              		.loc 1 5731 6 view .LVU7612
 28670 009c 5FFA83FC 		uxtb	ip, r3
5694:src/xeq.c     **** 	XromFlags.state_lift = 1;
 28671              		.loc 1 5694 33 view .LVU7613
 28672 00a0 A970     		strb	r1, [r5, #2]
5711:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 28673              		.loc 1 5711 9 view .LVU7614
 28674 00a2 0260     		str	r2, [r0]
5715:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 28675              		.loc 1 5715 24 view .LVU7615
 28676 00a4 4FF6FE71 		movw	r1, #65534
5728:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
 28677              		.loc 1 5728 16 view .LVU7616
 28678 00a8 06F00702 		and	r2, r6, #7
5731:src/xeq.c     **** 		// Complex arguments are always in pairs
 28679              		.loc 1 5731 5 view .LVU7617
 28680 00ac DB06     		lsls	r3, r3, #27
5729:src/xeq.c     **** #endif
 28681              		.loc 1 5729 24 view .LVU7618
 28682 00ae C6F3C206 		ubfx	r6, r6, #3, #3
 28683              	.LVL2265:
5708:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 28684              		.loc 1 5708 17 view .LVU7619
 28685 00b2 C5F808E0 		str	lr, [r5, #8]
5709:src/xeq.c     **** 
 28686              		.loc 1 5709 2 is_stmt 1 view .LVU7620
5711:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 28687              		.loc 1 5711 2 view .LVU7621
5715:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 28688              		.loc 1 5715 2 view .LVU7622
5715:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 28689              		.loc 1 5715 24 is_stmt 0 view .LVU7623
 28690 00b6 A4F8E217 		strh	r1, [r4, #2018]	@ movhi
5715:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 28691              		.loc 1 5715 12 view .LVU7624
 28692 00ba A4F8DE17 		strh	r1, [r4, #2014]	@ movhi
5716:src/xeq.c     **** #endif
 28693              		.loc 1 5716 2 is_stmt 1 view .LVU7625
5726:src/xeq.c     **** 	XromFlags.complex = (arg & 0x80) != 0;
 28694              		.loc 1 5726 2 view .LVU7626
5727:src/xeq.c     **** 	XromIn = (arg & 0x7);
 28695              		.loc 1 5727 2 view .LVU7627
5728:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
 28696              		.loc 1 5728 2 view .LVU7628
ARM GAS  /tmp/ccK8IvWa.s 			page 732


5728:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
 28697              		.loc 1 5728 9 is_stmt 0 view .LVU7629
 28698 00be 2A71     		strb	r2, [r5, #4]
5729:src/xeq.c     **** #endif
 28699              		.loc 1 5729 2 is_stmt 1 view .LVU7630
5729:src/xeq.c     **** #endif
 28700              		.loc 1 5729 10 is_stmt 0 view .LVU7631
 28701 00c0 6E71     		strb	r6, [r5, #5]
5731:src/xeq.c     **** 		// Complex arguments are always in pairs
 28702              		.loc 1 5731 2 is_stmt 1 view .LVU7632
5731:src/xeq.c     **** 		// Complex arguments are always in pairs
 28703              		.loc 1 5731 5 is_stmt 0 view .LVU7633
 28704 00c2 03D5     		bpl	.L2101
5733:src/xeq.c     **** 		XromOut <<= 1;
 28705              		.loc 1 5733 3 is_stmt 1 view .LVU7634
5733:src/xeq.c     **** 		XromOut <<= 1;
 28706              		.loc 1 5733 10 is_stmt 0 view .LVU7635
 28707 00c4 5200     		lsls	r2, r2, #1
5734:src/xeq.c     **** 	}
 28708              		.loc 1 5734 11 view .LVU7636
 28709 00c6 7600     		lsls	r6, r6, #1
5733:src/xeq.c     **** 		XromOut <<= 1;
 28710              		.loc 1 5733 10 view .LVU7637
 28711 00c8 2A71     		strb	r2, [r5, #4]
5734:src/xeq.c     **** 	}
 28712              		.loc 1 5734 3 is_stmt 1 view .LVU7638
5734:src/xeq.c     **** 	}
 28713              		.loc 1 5734 11 is_stmt 0 view .LVU7639
 28714 00ca 6E71     		strb	r6, [r5, #5]
 28715              	.L2101:
5737:src/xeq.c     **** 
 28716              		.loc 1 5737 9 is_stmt 1 view .LVU7640
5737:src/xeq.c     **** 
 28717              		.loc 1 5737 30 is_stmt 0 view .LVU7641
 28718 00cc 94F8EB37 		ldrb	r3, [r4, #2027]	@ zero_extendqisi2
5748:src/xeq.c     **** 		// Convert integers to decimal128
 28719              		.loc 1 5748 5 view .LVU7642
 28720 00d0 1CF0010F 		tst	ip, #1
5737:src/xeq.c     **** 
 28721              		.loc 1 5737 30 view .LVU7643
 28722 00d4 6FF30613 		bfc	r3, #4, #3
 28723 00d8 84F8EB37 		strb	r3, [r4, #2027]
5748:src/xeq.c     **** 		// Convert integers to decimal128
 28724              		.loc 1 5748 2 is_stmt 1 view .LVU7644
5748:src/xeq.c     **** 		// Convert integers to decimal128
 28725              		.loc 1 5748 5 is_stmt 0 view .LVU7645
 28726 00dc 51D1     		bne	.L2124
5756:src/xeq.c     **** 		// No conversion necessary
 28727              		.loc 1 5756 7 is_stmt 1 view .LVU7646
5756:src/xeq.c     **** 		// No conversion necessary
 28728              		.loc 1 5756 10 is_stmt 0 view .LVU7647
 28729 00de 1CF0080F 		tst	ip, #8
 28730 00e2 46D1     		bne	.L2125
5777:src/xeq.c     **** #endif
 28731              		.loc 1 5777 3 is_stmt 1 view .LVU7648
 28732 00e4 B120     		movs	r0, #177
 28733 00e6 FFF7FEFF 		bl	op_double
ARM GAS  /tmp/ccK8IvWa.s 			page 733


 28734              	.LVL2266:
 28735              	.L2103:
5782:src/xeq.c     **** 	UState.stack_depth = 1;
 28736              		.loc 1 5782 2 view .LVU7649
 28737              	.LBB3803:
 28738              	.LBI3803:
 734:src/xeq.c     ****     State2.state_lift = 1;
 28739              		.loc 1 734 6 view .LVU7650
 28740              	.LBB3804:
 735:src/xeq.c     **** }
 28741              		.loc 1 735 5 view .LVU7651
 735:src/xeq.c     **** }
 28742              		.loc 1 735 23 is_stmt 0 view .LVU7652
 28743 00ea 98F81720 		ldrb	r2, [r8, #23]	@ zero_extendqisi2
 28744              	.LBE3804:
 28745              	.LBE3803:
5783:src/xeq.c     **** 
 28746              		.loc 1 5783 21 view .LVU7653
 28747 00ee 94F8EA37 		ldrb	r3, [r4, #2026]	@ zero_extendqisi2
5786:src/xeq.c     **** 		decNumber x;
 28748              		.loc 1 5786 2 view .LVU7654
 28749 00f2 2979     		ldrb	r1, [r5, #4]	@ zero_extendqisi2
 28750              	.LBB3807:
 28751              	.LBB3805:
 735:src/xeq.c     **** }
 28752              		.loc 1 735 23 view .LVU7655
 28753 00f4 42F04002 		orr	r2, r2, #64
 28754              	.LBE3805:
 28755              	.LBE3807:
5783:src/xeq.c     **** 
 28756              		.loc 1 5783 21 view .LVU7656
 28757 00f8 43F00803 		orr	r3, r3, #8
 28758              	.LBB3808:
 28759              	.LBB3806:
 735:src/xeq.c     **** }
 28760              		.loc 1 735 23 view .LVU7657
 28761 00fc 88F81720 		strb	r2, [r8, #23]
 28762              	.LBE3806:
 28763              	.LBE3808:
5783:src/xeq.c     **** 
 28764              		.loc 1 5783 2 is_stmt 1 view .LVU7658
5783:src/xeq.c     **** 
 28765              		.loc 1 5783 21 is_stmt 0 view .LVU7659
 28766 0100 84F8EA37 		strb	r3, [r4, #2026]
5786:src/xeq.c     **** 		decNumber x;
 28767              		.loc 1 5786 2 is_stmt 1 view .LVU7660
 28768              	.LVL2267:
5786:src/xeq.c     **** 		decNumber x;
 28769              		.loc 1 5786 14 view .LVU7661
5786:src/xeq.c     **** 		decNumber x;
 28770              		.loc 1 5786 2 is_stmt 0 view .LVU7662
 28771 0104 91B3     		cbz	r1, .L2097
5786:src/xeq.c     **** 		decNumber x;
 28772              		.loc 1 5786 9 view .LVU7663
 28773 0106 0024     		movs	r4, #0
 28774 0108 02E0     		b	.L2110
 28775              	.LVL2268:
ARM GAS  /tmp/ccK8IvWa.s 			page 734


 28776              	.L2105:
5786:src/xeq.c     **** 		decNumber x;
 28777              		.loc 1 5786 18 view .LVU7664
 28778 010a 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
5786:src/xeq.c     **** 		decNumber x;
 28779              		.loc 1 5786 2 view .LVU7665
 28780 010c A342     		cmp	r3, r4
 28781 010e 2DDD     		ble	.L2097
 28782              	.LVL2269:
 28783              	.L2110:
 28784              	.LBB3809:
5787:src/xeq.c     **** 		if (decNumberIsNaN(getRegister(&x, regX_idx + i))) {
 28785              		.loc 1 5787 3 is_stmt 1 view .LVU7666
5788:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 28786              		.loc 1 5788 3 view .LVU7667
5788:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 28787              		.loc 1 5788 7 is_stmt 0 view .LVU7668
 28788 0110 04F16401 		add	r1, r4, #100
 28789 0114 01A8     		add	r0, sp, #4
 28790 0116 FFF7FEFF 		bl	getRegister
 28791              	.LVL2270:
 28792              	.LBE3809:
5786:src/xeq.c     **** 		decNumber x;
 28793              		.loc 1 5786 26 is_stmt 1 view .LVU7669
 28794              	.LBB3816:
5788:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 28795              		.loc 1 5788 6 is_stmt 0 view .LVU7670
 28796 011a 037A     		ldrb	r3, [r0, #8]	@ zero_extendqisi2
 28797 011c 13F0300F 		tst	r3, #48
 28798              	.LBE3816:
5786:src/xeq.c     **** 		decNumber x;
 28799              		.loc 1 5786 26 view .LVU7671
 28800 0120 04F10104 		add	r4, r4, #1
 28801              	.LVL2271:
5786:src/xeq.c     **** 		decNumber x;
 28802              		.loc 1 5786 14 is_stmt 1 view .LVU7672
 28803              	.LBB3817:
5788:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 28804              		.loc 1 5788 6 is_stmt 0 view .LVU7673
 28805 0124 F1D0     		beq	.L2105
5791:src/xeq.c     **** 				for (i = 0; i < XromOut; ++i)
 28806              		.loc 1 5791 4 is_stmt 1 view .LVU7674
 28807              	.LVL2272:
 28808              	.LBB3810:
 28809              	.LBI3810:
3304:src/xeq.c     **** 	unsigned short mask;
 28810              		.loc 1 3304 5 view .LVU7675
 28811              	.LBB3811:
3305:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
 28812              		.loc 1 3305 2 view .LVU7676
3306:src/xeq.c     **** 
 28813              		.loc 1 3306 2 view .LVU7677
3306:src/xeq.c     **** 
 28814              		.loc 1 3306 34 is_stmt 0 view .LVU7678
 28815 0126 0DF10201 		add	r1, sp, #2
 28816 012a 6B20     		movs	r0, #107
 28817 012c FFF7FEFF 		bl	flag_word
ARM GAS  /tmp/ccK8IvWa.s 			page 735


 28818              	.LVL2273:
3308:src/xeq.c     **** }
 28819              		.loc 1 3308 2 is_stmt 1 view .LVU7679
3308:src/xeq.c     **** }
 28820              		.loc 1 3308 24 is_stmt 0 view .LVU7680
 28821 0130 BDF80230 		ldrh	r3, [sp, #2]
 28822 0134 0288     		ldrh	r2, [r0]
 28823              	.LBE3811:
 28824              	.LBE3810:
5791:src/xeq.c     **** 				for (i = 0; i < XromOut; ++i)
 28825              		.loc 1 5791 7 view .LVU7681
 28826 0136 1A42     		tst	r2, r3
 28827 0138 2DD0     		beq	.L2106
 28828              	.LVL2274:
5792:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 28829              		.loc 1 5792 17 is_stmt 1 view .LVU7682
5792:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 28830              		.loc 1 5792 5 is_stmt 0 view .LVU7683
 28831 013a 6B79     		ldrb	r3, [r5, #5]	@ zero_extendqisi2
 28832 013c 53B1     		cbz	r3, .L2107
5793:src/xeq.c     **** 				// Early exit of routine
 28833              		.loc 1 5793 6 view .LVU7684
 28834 013e 1D4E     		ldr	r6, .L2126+16
5792:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 28835              		.loc 1 5792 12 view .LVU7685
 28836 0140 0024     		movs	r4, #0
 28837              	.LVL2275:
 28838              	.L2108:
5793:src/xeq.c     **** 				// Early exit of routine
 28839              		.loc 1 5793 6 is_stmt 1 discriminator 3 view .LVU7686
 28840 0142 04F16400 		add	r0, r4, #100
 28841 0146 3146     		mov	r1, r6
 28842 0148 FFF7FEFF 		bl	setRegister
 28843              	.LVL2276:
5792:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 28844              		.loc 1 5792 30 discriminator 3 view .LVU7687
5792:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 28845              		.loc 1 5792 21 is_stmt 0 discriminator 3 view .LVU7688
 28846 014c 6B79     		ldrb	r3, [r5, #5]	@ zero_extendqisi2
5792:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 28847              		.loc 1 5792 30 discriminator 3 view .LVU7689
 28848 014e 0134     		adds	r4, r4, #1
 28849              	.LVL2277:
5792:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 28850              		.loc 1 5792 17 is_stmt 1 discriminator 3 view .LVU7690
5792:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 28851              		.loc 1 5792 5 is_stmt 0 discriminator 3 view .LVU7691
 28852 0150 A342     		cmp	r3, r4
 28853 0152 F6DC     		bgt	.L2108
 28854              	.LVL2278:
 28855              	.L2107:
5795:src/xeq.c     **** 			} 
 28856              		.loc 1 5795 5 is_stmt 1 view .LVU7692
 28857 0154 8421     		movs	r1, #132
 28858 0156 0020     		movs	r0, #0
 28859 0158 FFF7FEFF 		bl	cmdxout
 28860              	.LVL2279:
ARM GAS  /tmp/ccK8IvWa.s 			page 736


 28861              	.LBE3817:
5802:src/xeq.c     **** 
 28862              		.loc 1 5802 1 is_stmt 0 view .LVU7693
 28863 015c 0BB0     		add	sp, sp, #44
 28864              		.cfi_remember_state
 28865              		.cfi_def_cfa_offset 28
 28866              		@ sp needed
 28867 015e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 28868              	.LVL2280:
 28869              	.L2123:
 28870              		.cfi_restore_state
5679:src/xeq.c     **** 		return;
 28871              		.loc 1 5679 3 is_stmt 1 view .LVU7694
 28872              	.LBB3818:
 28873              	.LBI3818:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28874              		.loc 1 523 5 view .LVU7695
 28875              	.LBB3819:
 524:src/xeq.c     **** 		Error = e;
 28876              		.loc 1 524 2 view .LVU7696
 524:src/xeq.c     **** 		Error = e;
 28877              		.loc 1 524 12 is_stmt 0 view .LVU7697
 28878 0162 154B     		ldr	r3, .L2126+20
 524:src/xeq.c     **** 		Error = e;
 28879              		.loc 1 524 5 view .LVU7698
 28880 0164 1A68     		ldr	r2, [r3]
 28881 0166 0AB9     		cbnz	r2, .L2097
 28882              	.LVL2281:
 28883              	.LBB3820:
 28884              	.LBI3820:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28885              		.loc 1 523 5 is_stmt 1 view .LVU7699
 28886              	.LBB3821:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 28887              		.loc 1 525 3 view .LVU7700
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 28888              		.loc 1 525 9 is_stmt 0 view .LVU7701
 28889 0168 0722     		movs	r2, #7
 28890 016a 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 28891              		.loc 1 526 3 is_stmt 1 view .LVU7702
 28892              	.LVL2282:
 28893              	.L2097:
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 28894              		.loc 1 526 3 is_stmt 0 view .LVU7703
 28895              	.LBE3821:
 28896              	.LBE3820:
 28897              	.LBE3819:
 28898              	.LBE3818:
5802:src/xeq.c     **** 
 28899              		.loc 1 5802 1 view .LVU7704
 28900 016c 0BB0     		add	sp, sp, #44
 28901              		.cfi_remember_state
 28902              		.cfi_def_cfa_offset 28
 28903              		@ sp needed
 28904 016e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 28905              	.L2125:
ARM GAS  /tmp/ccK8IvWa.s 			page 737


 28906              		.cfi_restore_state
5758:src/xeq.c     **** 		StackBase = XromStack;
 28907              		.loc 1 5758 3 is_stmt 1 view .LVU7705
 28908 0172 124E     		ldr	r6, .L2126+24
 28909 0174 0C48     		ldr	r0, .L2126+4
 28910 0176 3168     		ldr	r1, [r6]
 28911 0178 C022     		movs	r2, #192
 28912 017a FFF7FEFF 		bl	xcopy
 28913              	.LVL2283:
5759:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 28914              		.loc 1 5759 3 view .LVU7706
5759:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 28915              		.loc 1 5759 13 is_stmt 0 view .LVU7707
 28916 017e 3760     		str	r7, [r6]
 28917 0180 B3E7     		b	.L2103
 28918              	.L2124:
5751:src/xeq.c     **** #endif
 28919              		.loc 1 5751 3 is_stmt 1 view .LVU7708
5751:src/xeq.c     **** #endif
 28920              		.loc 1 5751 22 is_stmt 0 view .LVU7709
 28921 0182 94F8E937 		ldrb	r3, [r4, #2025]	@ zero_extendqisi2
 28922 0186 43F04003 		orr	r3, r3, #64
5753:src/xeq.c     **** 		// Do not copy the local registers because we don't use this case anyway
 28923              		.loc 1 5753 3 view .LVU7710
 28924 018a C620     		movs	r0, #198
5751:src/xeq.c     **** #endif
 28925              		.loc 1 5751 22 view .LVU7711
 28926 018c 84F8E937 		strb	r3, [r4, #2025]
5753:src/xeq.c     **** 		// Do not copy the local registers because we don't use this case anyway
 28927              		.loc 1 5753 3 is_stmt 1 view .LVU7712
 28928 0190 FFF7FEFF 		bl	op_float
 28929              	.LVL2284:
 28930 0194 A9E7     		b	.L2103
 28931              	.LVL2285:
 28932              	.L2106:
 28933              	.LBB3822:
5798:src/xeq.c     **** 			return;
 28934              		.loc 1 5798 5 view .LVU7713
 28935              	.LBB3812:
 28936              	.LBI3812:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28937              		.loc 1 523 5 view .LVU7714
 28938              	.LBB3813:
 524:src/xeq.c     **** 		Error = e;
 28939              		.loc 1 524 2 view .LVU7715
 524:src/xeq.c     **** 		Error = e;
 28940              		.loc 1 524 12 is_stmt 0 view .LVU7716
 28941 0196 084B     		ldr	r3, .L2126+20
 524:src/xeq.c     **** 		Error = e;
 28942              		.loc 1 524 5 view .LVU7717
 28943 0198 1A68     		ldr	r2, [r3]
 28944 019a 002A     		cmp	r2, #0
 28945 019c E6D1     		bne	.L2097
 28946              	.LVL2286:
 28947              	.LBB3814:
 28948              	.LBI3814:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
ARM GAS  /tmp/ccK8IvWa.s 			page 738


 28949              		.loc 1 523 5 is_stmt 1 view .LVU7718
 28950              	.LBB3815:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 28951              		.loc 1 525 3 view .LVU7719
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 28952              		.loc 1 525 9 is_stmt 0 view .LVU7720
 28953 019e 0122     		movs	r2, #1
 28954 01a0 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 28955              		.loc 1 526 3 is_stmt 1 view .LVU7721
 28956              	.LVL2287:
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 28957              		.loc 1 526 3 is_stmt 0 view .LVU7722
 28958              	.LBE3815:
 28959              	.LBE3814:
 28960              	.LBE3813:
 28961              	.LBE3812:
5799:src/xeq.c     **** 		}
 28962              		.loc 1 5799 4 is_stmt 1 view .LVU7723
 28963 01a2 E3E7     		b	.L2097
 28964              	.L2127:
 28965              		.align	2
 28966              	.L2126:
 28967 01a4 00000000 		.word	XromParams
 28968 01a8 00000000 		.word	XromLocal
 28969 01ac 00000000 		.word	PersistentRam
 28970 01b0 00000000 		.word	RetStk
 28971 01b4 00000000 		.word	const_NaN
 28972 01b8 00000000 		.word	Error
 28973 01bc 00000000 		.word	StackBase
 28974 01c0 00000000 		.word	StateWhileOn
 28975              	.LBE3822:
 28976              		.cfi_endproc
 28977              	.LFE263:
 28979              		.section	.rodata.xeq.str1.4,"aMS",%progbits,1
 28980              		.align	2
 28981              	.LC8:
 28982 0000 25303458 		.ascii	"%04X:%s\000"
 28982      3A257300 
 28983              		.section	.text.xeq,"ax",%progbits
 28984              		.align	1
 28985              		.p2align 2,,3
 28986              		.global	xeq
 28987              		.syntax unified
 28988              		.thumb
 28989              		.thumb_func
 28990              		.fpu fpv4-sp-d16
 28992              	xeq:
 28993              	.LVL2288:
 28994              	.LFB243:
5044:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 28995              		.loc 1 5044 1 view -0
 28996              		.cfi_startproc
 28997              		@ args = 0, pretend = 0, frame = 424
 28998              		@ frame_needed = 0, uses_anonymous_args = 0
5045:src/xeq.c     **** 	const unsigned short flags = UserFlags[regA_idx >> 4];
 28999              		.loc 1 5045 2 view .LVU7725
ARM GAS  /tmp/ccK8IvWa.s 			page 739


5046:src/xeq.c     **** 	const struct _ustate old = UState;
 29000              		.loc 1 5046 2 view .LVU7726
5044:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 29001              		.loc 1 5044 1 is_stmt 0 view .LVU7727
 29002 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 29003              		.cfi_def_cfa_offset 36
 29004              		.cfi_offset 4, -36
 29005              		.cfi_offset 5, -32
 29006              		.cfi_offset 6, -28
 29007              		.cfi_offset 7, -24
 29008              		.cfi_offset 8, -20
 29009              		.cfi_offset 9, -16
 29010              		.cfi_offset 10, -12
 29011              		.cfi_offset 11, -8
 29012              		.cfi_offset 14, -4
5046:src/xeq.c     **** 	const struct _ustate old = UState;
 29013              		.loc 1 5046 23 view .LVU7728
 29014 0004 8F4E     		ldr	r6, .L2405
 29015              	.LBB4118:
 29016              	.LBB4119:
 721:src/xeq.c     **** }
 29017              		.loc 1 721 15 view .LVU7729
 29018 0006 904C     		ldr	r4, .L2405+4
 29019              	.LBE4119:
 29020              	.LBE4118:
5046:src/xeq.c     **** 	const struct _ustate old = UState;
 29021              		.loc 1 5046 23 view .LVU7730
 29022 0008 B6F8FC37 		ldrh	r3, [r6, #2044]
 29023              	.LBB4124:
 29024              	.LBB4120:
 721:src/xeq.c     **** }
 29025              		.loc 1 721 15 view .LVU7731
 29026 000c E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 29027              	.LBE4120:
 29028              	.LBE4124:
5065:src/xeq.c     **** #if defined(CONSOLE) && !defined(DM42)
 29029              		.loc 1 5065 2 view .LVU7732
 29030 000e DFF868B2 		ldr	fp, .L2405+52
5047:src/xeq.c     **** 	const unsigned char lift = get_lift();
 29031              		.loc 1 5047 23 view .LVU7733
 29032 0012 06F2E478 		addw	r8, r6, #2020
5044:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 29033              		.loc 1 5044 1 view .LVU7734
 29034 0016 EDB0     		sub	sp, sp, #436
 29035              		.cfi_def_cfa_offset 472
5044:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 29036              		.loc 1 5044 1 view .LVU7735
 29037 0018 0546     		mov	r5, r0
5047:src/xeq.c     **** 	const unsigned char lift = get_lift();
 29038              		.loc 1 5047 23 view .LVU7736
 29039 001a 98E80300 		ldm	r8, {r0, r1}
 29040              	.LVL2289:
5046:src/xeq.c     **** 	const struct _ustate old = UState;
 29041              		.loc 1 5046 23 view .LVU7737
 29042 001e 0393     		str	r3, [sp, #12]
 29043              	.LVL2290:
5047:src/xeq.c     **** 	const unsigned char lift = get_lift();
ARM GAS  /tmp/ccK8IvWa.s 			page 740


 29044              		.loc 1 5047 2 is_stmt 1 view .LVU7738
5047:src/xeq.c     **** 	const unsigned char lift = get_lift();
 29045              		.loc 1 5047 23 is_stmt 0 view .LVU7739
 29046 0020 0CAF     		add	r7, sp, #48
5049:src/xeq.c     **** 	const int old_cl = *((int *)&CommandLine);
 29047              		.loc 1 5049 23 view .LVU7740
 29048 0022 B6F8E037 		ldrh	r3, [r6, #2016]
 29049 0026 0593     		str	r3, [sp, #20]
5047:src/xeq.c     **** 	const unsigned char lift = get_lift();
 29050              		.loc 1 5047 23 view .LVU7741
 29051 0028 87E80300 		stm	r7, {r0, r1}
5048:src/xeq.c     **** 	const unsigned short old_pc = state_pc();
 29052              		.loc 1 5048 2 is_stmt 1 view .LVU7742
 29053              	.LBB4125:
 29054              	.LBI4118:
 720:src/xeq.c     **** 	return State2.state_lift;
 29055              		.loc 1 720 12 view .LVU7743
 29056              	.LBB4121:
 721:src/xeq.c     **** }
 29057              		.loc 1 721 2 view .LVU7744
 29058              	.LBE4121:
 29059              	.LBE4125:
5050:src/xeq.c     **** #ifdef INFRARED
 29060              		.loc 1 5050 12 is_stmt 0 view .LVU7745
 29061 002c E369     		ldr	r3, [r4, #28]
 29062 002e 0693     		str	r3, [sp, #24]
5056:src/xeq.c     **** 		// Make sure that if the command line isn't empty, it contains
 29063              		.loc 1 5056 31 view .LVU7746
 29064 0030 6FF49F71 		mvn	r1, #318
 29065 0034 6B18     		adds	r3, r5, r1
 29066              	.LBB4126:
 29067              	.LBB4122:
 721:src/xeq.c     **** }
 29068              		.loc 1 721 15 view .LVU7747
 29069 0036 C2F38012 		ubfx	r2, r2, #6, #1
 29070              	.LBE4122:
 29071              	.LBE4126:
5065:src/xeq.c     **** #if defined(CONSOLE) && !defined(DM42)
 29072              		.loc 1 5065 2 view .LVU7748
 29073 003a 0DF5887A 		add	r10, sp, #272
5056:src/xeq.c     **** 		// Make sure that if the command line isn't empty, it contains
 29074              		.loc 1 5056 5 view .LVU7749
 29075 003e 012B     		cmp	r3, #1
5065:src/xeq.c     **** #if defined(CONSOLE) && !defined(DM42)
 29076              		.loc 1 5065 2 view .LVU7750
 29077 0040 DBF80010 		ldr	r1, [fp]
 29078              	.LBB4127:
 29079              	.LBB4123:
 721:src/xeq.c     **** }
 29080              		.loc 1 721 15 view .LVU7751
 29081 0044 0492     		str	r2, [sp, #16]
 29082              	.LVL2291:
 721:src/xeq.c     **** }
 29083              		.loc 1 721 15 view .LVU7752
 29084              	.LBE4123:
 29085              	.LBE4127:
5049:src/xeq.c     **** 	const int old_cl = *((int *)&CommandLine);
ARM GAS  /tmp/ccK8IvWa.s 			page 741


 29086              		.loc 1 5049 2 is_stmt 1 view .LVU7753
5050:src/xeq.c     **** #ifdef INFRARED
 29087              		.loc 1 5050 2 view .LVU7754
5056:src/xeq.c     **** 		// Make sure that if the command line isn't empty, it contains
 29088              		.loc 1 5056 2 view .LVU7755
5065:src/xeq.c     **** #if defined(CONSOLE) && !defined(DM42)
 29089              		.loc 1 5065 2 is_stmt 0 view .LVU7756
 29090 0046 5046     		mov	r0, r10
5056:src/xeq.c     **** 		// Make sure that if the command line isn't empty, it contains
 29091              		.loc 1 5056 5 view .LVU7757
 29092 0048 76D9     		bls	.L2384
5065:src/xeq.c     **** #if defined(CONSOLE) && !defined(DM42)
 29093              		.loc 1 5065 2 is_stmt 1 view .LVU7758
 29094 004a A022     		movs	r2, #160
 29095 004c FFF7FEFF 		bl	xcopy
 29096              	.LVL2292:
5070:src/xeq.c     **** 		char buf[16];
 29097              		.loc 1 5070 2 view .LVU7759
5070:src/xeq.c     **** 		char buf[16];
 29098              		.loc 1 5070 5 is_stmt 0 view .LVU7760
 29099 0050 94F91730 		ldrsb	r3, [r4, #23]
 29100 0054 002B     		cmp	r3, #0
 29101 0056 57DB     		blt	.L2133
 29102              	.L2134:
5088:src/xeq.c     **** 	State2.wascomplex = 0;
 29103              		.loc 1 5088 2 is_stmt 1 view .LVU7761
5089:src/xeq.c     **** 	if (isDBL(op))
 29104              		.loc 1 5089 20 is_stmt 0 view .LVU7762
 29105 0058 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
5088:src/xeq.c     **** 	State2.wascomplex = 0;
 29106              		.loc 1 5088 7 view .LVU7763
 29107 005a 7C49     		ldr	r1, .L2405+8
 29108 005c 0023     		movs	r3, #0
5089:src/xeq.c     **** 	if (isDBL(op))
 29109              		.loc 1 5089 20 view .LVU7764
 29110 005e 63F38712 		bfi	r2, r3, #6, #2
 29111 0062 2275     		strb	r2, [r4, #20]
5090:src/xeq.c     **** 		multi(op);
 29112              		.loc 1 5090 6 view .LVU7765
 29113 0064 05F47042 		and	r2, r5, #61440
5090:src/xeq.c     **** 		multi(op);
 29114              		.loc 1 5090 5 view .LVU7766
 29115 0068 B2F5704F 		cmp	r2, #61440
5088:src/xeq.c     **** 	State2.wascomplex = 0;
 29116              		.loc 1 5088 7 view .LVU7767
 29117 006c 0B60     		str	r3, [r1]
5089:src/xeq.c     **** 	if (isDBL(op))
 29118              		.loc 1 5089 2 is_stmt 1 view .LVU7768
5090:src/xeq.c     **** 		multi(op);
 29119              		.loc 1 5090 2 view .LVU7769
5090:src/xeq.c     **** 		multi(op);
 29120              		.loc 1 5090 5 is_stmt 0 view .LVU7770
 29121 006e 00F0B680 		beq	.L2385
5092:src/xeq.c     **** 		rargs(op);
 29122              		.loc 1 5092 7 is_stmt 1 view .LVU7771
5092:src/xeq.c     **** 		rargs(op);
 29123              		.loc 1 5092 10 is_stmt 0 view .LVU7772
ARM GAS  /tmp/ccK8IvWa.s 			page 742


 29124 0072 7AB9     		cbnz	r2, .L2386
5095:src/xeq.c     **** 		switch (opKIND(op)) {
 29125              		.loc 1 5095 3 is_stmt 1 view .LVU7773
5095:src/xeq.c     **** 		switch (opKIND(op)) {
 29126              		.loc 1 5095 13 is_stmt 0 view .LVU7774
 29127 0074 764A     		ldr	r2, .L2405+12
 29128 0076 C5F30723 		ubfx	r3, r5, #8, #8
5095:src/xeq.c     **** 		switch (opKIND(op)) {
 29129              		.loc 1 5095 15 view .LVU7775
 29130 007a 1580     		strh	r5, [r2]	@ movhi
5096:src/xeq.c     **** 		case KIND_SPEC:	specials(op);	break;
 29131              		.loc 1 5096 3 is_stmt 1 view .LVU7776
 29132 007c 062B     		cmp	r3, #6
 29133 007e 00F20981 		bhi	.L2169
 29134 0082 DFE813F0 		tbh	[pc, r3, lsl #1]
 29135              	.L2171:
 29136 0086 9C01     		.2byte	(.L2177-.L2171)/2
 29137 0088 6F00     		.2byte	(.L2176-.L2171)/2
 29138 008a 3902     		.2byte	(.L2175-.L2171)/2
 29139 008c FD00     		.2byte	(.L2174-.L2171)/2
 29140 008e 7B02     		.2byte	(.L2173-.L2171)/2
 29141 0090 0102     		.2byte	(.L2172-.L2171)/2
 29142 0092 CF01     		.2byte	(.L2170-.L2171)/2
 29143              		.p2align 1
 29144              	.L2386:
5093:src/xeq.c     **** 	else {
 29145              		.loc 1 5093 3 view .LVU7777
 29146              	.LVL2293:
 29147              	.LBB4128:
 29148              	.LBI4128:
4912:src/xeq.c     **** 	unsigned int arg = op & RARG_MASK;
 29149              		.loc 1 4912 13 view .LVU7778
 29150              	.LBB4129:
4913:src/xeq.c     **** 	const unsigned int cmd = RARG_CMD(op);
 29151              		.loc 1 4913 2 view .LVU7779
4914:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
 29152              		.loc 1 4914 2 view .LVU7780
4914:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
 29153              		.loc 1 4914 27 is_stmt 0 view .LVU7781
 29154 0094 4FEA1529 		lsr	r9, r5, #8
4916:src/xeq.c     **** 
 29155              		.loc 1 4916 33 view .LVU7782
 29156 0098 6E4A     		ldr	r2, .L2405+16
4918:src/xeq.c     **** 
 29157              		.loc 1 4918 12 view .LVU7783
 29158 009a 6D49     		ldr	r1, .L2405+12
4914:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
 29159              		.loc 1 4914 27 view .LVU7784
 29160 009c A9F12009 		sub	r9, r9, #32
 29161 00a0 5FFA89F9 		uxtb	r9, r9
 29162              	.LVL2294:
4915:src/xeq.c     **** 	unsigned int lim = argcmds[cmd].lim;
 29163              		.loc 1 4915 2 is_stmt 1 view .LVU7785
4916:src/xeq.c     **** 
 29164              		.loc 1 4916 2 view .LVU7786
4916:src/xeq.c     **** 
 29165              		.loc 1 4916 33 is_stmt 0 view .LVU7787
ARM GAS  /tmp/ccK8IvWa.s 			page 743


 29166 00a4 02EB0910 		add	r0, r2, r9, lsl #4
4918:src/xeq.c     **** 
 29167              		.loc 1 4918 14 view .LVU7788
 29168 00a8 A1F80090 		strh	r9, [r1]	@ movhi
4916:src/xeq.c     **** 
 29169              		.loc 1 4916 33 view .LVU7789
 29170 00ac 0379     		ldrb	r3, [r0, #4]	@ zero_extendqisi2
 29171 00ae CDE90803 		strd	r0, r3, [sp, #32]
 29172              	.LVL2295:
4918:src/xeq.c     **** 
 29173              		.loc 1 4918 2 is_stmt 1 view .LVU7790
4920:src/xeq.c     **** 
 29174              		.loc 1 4920 2 view .LVU7791
4916:src/xeq.c     **** 
 29175              		.loc 1 4916 33 is_stmt 0 view .LVU7792
 29176 00b2 4FEA0913 		lsl	r3, r9, #4
 29177 00b6 0793     		str	r3, [sp, #28]
4920:src/xeq.c     **** 
 29178              		.loc 1 4920 2 view .LVU7793
 29179 00b8 FFF7FEFF 		bl	process_cmdline
 29180              	.LVL2296:
4922:src/xeq.c     **** 		illegal(op);
 29181              		.loc 1 4922 2 is_stmt 1 view .LVU7794
4922:src/xeq.c     **** 		illegal(op);
 29182              		.loc 1 4922 5 is_stmt 0 view .LVU7795
 29183 00bc B9F19B0F 		cmp	r9, #155
 29184 00c0 0898     		ldr	r0, [sp, #32]
 29185 00c2 644A     		ldr	r2, .L2405+16
 29186 00c4 00F2E680 		bhi	.L2169
4926:src/xeq.c     **** 		set_lift();
 29187              		.loc 1 4926 2 is_stmt 1 view .LVU7796
4926:src/xeq.c     **** 		set_lift();
 29188              		.loc 1 4926 6 is_stmt 0 view .LVU7797
 29189 00c8 0799     		ldr	r1, [sp, #28]
 29190 00ca 5158     		ldr	r1, [r2, r1]
 29191 00cc 0891     		str	r1, [sp, #32]
4926:src/xeq.c     **** 		set_lift();
 29192              		.loc 1 4926 5 view .LVU7798
 29193 00ce 0029     		cmp	r1, #0
 29194 00d0 00F0AC80 		beq	.L2362
4913:src/xeq.c     **** 	const unsigned int cmd = RARG_CMD(op);
 29195              		.loc 1 4913 15 view .LVU7799
 29196 00d4 05F07F01 		and	r1, r5, #127
 29197              	.LVL2297:
4931:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
 29198              		.loc 1 4931 2 is_stmt 1 view .LVU7800
4931:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
 29199              		.loc 1 4931 5 is_stmt 0 view .LVU7801
 29200 00d8 2D06     		lsls	r5, r5, #24
 29201              	.LVL2298:
4931:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
 29202              		.loc 1 4931 5 view .LVU7802
 29203 00da 40F1D582 		bpl	.L2150
4932:src/xeq.c     **** 			// Get the argument by reading a register
 29204              		.loc 1 4932 3 is_stmt 1 view .LVU7803
4932:src/xeq.c     **** 			// Get the argument by reading a register
 29205              		.loc 1 4932 19 is_stmt 0 view .LVU7804
ARM GAS  /tmp/ccK8IvWa.s 			page 744


 29206 00de 4579     		ldrb	r5, [r0, #5]	@ zero_extendqisi2
4932:src/xeq.c     **** 			// Get the argument by reading a register
 29207              		.loc 1 4932 6 view .LVU7805
 29208 00e0 EB07     		lsls	r3, r5, #31
 29209 00e2 40F13683 		bpl	.L2151
 29210              	.LBB4130:
4934:src/xeq.c     **** 			unsigned long long int regval;
 29211              		.loc 1 4934 4 is_stmt 1 view .LVU7806
4935:src/xeq.c     **** 
 29212              		.loc 1 4935 4 view .LVU7807
4937:src/xeq.c     **** 				// Invalid register specified for indirect access
 29213              		.loc 1 4937 4 view .LVU7808
4937:src/xeq.c     **** 				// Invalid register specified for indirect access
 29214              		.loc 1 4937 14 is_stmt 0 view .LVU7809
 29215 00e6 0A20     		movs	r0, #10
 29216 00e8 0A91     		str	r1, [sp, #40]
 29217 00ea FFF7FEFF 		bl	get_reg_limit
 29218              	.LVL2299:
4937:src/xeq.c     **** 				// Invalid register specified for indirect access
 29219              		.loc 1 4937 7 view .LVU7810
 29220 00ee 0A99     		ldr	r1, [sp, #40]
 29221 00f0 8142     		cmp	r1, r0
 29222 00f2 40F2B582 		bls	.L2152
4939:src/xeq.c     **** 				return;
 29223              		.loc 1 4939 5 is_stmt 1 view .LVU7811
 29224              	.LVL2300:
 29225              	.LBB4131:
 29226              	.LBI4131:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29227              		.loc 1 523 5 view .LVU7812
 29228              	.LBB4132:
 524:src/xeq.c     **** 		Error = e;
 29229              		.loc 1 524 2 view .LVU7813
 524:src/xeq.c     **** 		Error = e;
 29230              		.loc 1 524 12 is_stmt 0 view .LVU7814
 29231 00f6 584B     		ldr	r3, .L2405+20
 29232 00f8 1A68     		ldr	r2, [r3]
 524:src/xeq.c     **** 		Error = e;
 29233              		.loc 1 524 5 view .LVU7815
 29234 00fa 0AB9     		cbnz	r2, .L2154
 29235              	.LVL2301:
 29236              	.LBB4133:
 29237              	.LBI4133:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29238              		.loc 1 523 5 is_stmt 1 view .LVU7816
 29239              	.LBB4134:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 29240              		.loc 1 525 3 view .LVU7817
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 29241              		.loc 1 525 9 is_stmt 0 view .LVU7818
 29242 00fc 0822     		movs	r2, #8
 29243 00fe 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 29244              		.loc 1 526 3 is_stmt 1 view .LVU7819
 29245              	.LVL2302:
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 29246              		.loc 1 526 3 is_stmt 0 view .LVU7820
ARM GAS  /tmp/ccK8IvWa.s 			page 745


 29247              	.LBE4134:
 29248              	.LBE4133:
 29249              	.LBE4132:
 29250              	.LBE4131:
4940:src/xeq.c     **** 			}
 29251              		.loc 1 4940 5 is_stmt 1 view .LVU7821
4940:src/xeq.c     **** 			}
 29252              		.loc 1 4940 5 is_stmt 0 view .LVU7822
 29253              	.LBE4130:
 29254              	.LBE4129:
 29255              	.LBE4128:
5104:src/xeq.c     **** 		}
 29256              		.loc 1 5104 12 is_stmt 1 view .LVU7823
5114:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 29257              		.loc 1 5114 2 view .LVU7824
 29258              	.L2154:
5114:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 29259              		.loc 1 5114 2 is_stmt 0 view .LVU7825
 29260 0100 DFF87891 		ldr	r9, .L2405+56
 29261 0104 1046     		mov	r0, r2
 29262 0106 CEE0     		b	.L2267
 29263              	.LVL2303:
 29264              	.L2133:
5070:src/xeq.c     **** 		char buf[16];
 29265              		.loc 1 5070 22 view .LVU7826
 29266 0108 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
5070:src/xeq.c     **** 		char buf[16];
 29267              		.loc 1 5070 19 view .LVU7827
 29268 010a 9B07     		lsls	r3, r3, #30
 29269 010c A4D4     		bmi	.L2134
 29270              	.LBB4157:
5071:src/xeq.c     **** 		if (Running)
 29271              		.loc 1 5071 3 is_stmt 1 view .LVU7828
5072:src/xeq.c     **** 			print_step(op);
 29272              		.loc 1 5072 3 view .LVU7829
5072:src/xeq.c     **** 			print_step(op);
 29273              		.loc 1 5072 7 is_stmt 0 view .LVU7830
 29274 010e DFF86C91 		ldr	r9, .L2405+56
5072:src/xeq.c     **** 			print_step(op);
 29275              		.loc 1 5072 6 view .LVU7831
 29276 0112 D9F80030 		ldr	r3, [r9]
 29277 0116 002B     		cmp	r3, #0
 29278 0118 40F08F80 		bne	.L2387
5075:src/xeq.c     **** 		DispMsg = TraceBuffer;
 29279              		.loc 1 5075 4 is_stmt 1 view .LVU7832
 29280 011c 3BA9     		add	r1, sp, #236
 29281 011e 2846     		mov	r0, r5
 29282 0120 FFF7FEFF 		bl	prt
 29283              	.LVL2304:
 29284 0124 4D49     		ldr	r1, .L2405+24
 29285 0126 0346     		mov	r3, r0
 29286 0128 2A46     		mov	r2, r5
 29287 012a 4D48     		ldr	r0, .L2405+28
 29288 012c FFF7FEFF 		bl	sprintf
 29289              	.LVL2305:
 29290              	.L2136:
5076:src/xeq.c     **** 	}
ARM GAS  /tmp/ccK8IvWa.s 			page 746


 29291              		.loc 1 5076 3 view .LVU7833
5076:src/xeq.c     **** 	}
 29292              		.loc 1 5076 11 is_stmt 0 view .LVU7834
 29293 0130 4C4B     		ldr	r3, .L2405+32
 29294 0132 4B4A     		ldr	r2, .L2405+28
 29295 0134 1A60     		str	r2, [r3]
 29296 0136 8FE7     		b	.L2134
 29297              	.LVL2306:
 29298              	.L2384:
5076:src/xeq.c     **** 	}
 29299              		.loc 1 5076 11 view .LVU7835
 29300              	.LBE4157:
5059:src/xeq.c     **** 		Cmdline[0] = '0';
 29301              		.loc 1 5059 3 is_stmt 1 view .LVU7836
5060:src/xeq.c     **** 		Cmdline[1] = '\0';
 29302              		.loc 1 5060 14 is_stmt 0 view .LVU7837
 29303 0138 3023     		movs	r3, #48
5059:src/xeq.c     **** 		Cmdline[0] = '0';
 29304              		.loc 1 5059 14 view .LVU7838
 29305 013a 4FF00009 		mov	r9, #0
5065:src/xeq.c     **** #if defined(CONSOLE) && !defined(DM42)
 29306              		.loc 1 5065 2 view .LVU7839
 29307 013e A022     		movs	r2, #160
5060:src/xeq.c     **** 		Cmdline[1] = '\0';
 29308              		.loc 1 5060 14 view .LVU7840
 29309 0140 2384     		strh	r3, [r4, #32]	@ movhi
5059:src/xeq.c     **** 		Cmdline[0] = '0';
 29310              		.loc 1 5059 14 view .LVU7841
 29311 0142 84F81E90 		strb	r9, [r4, #30]
 29312              	.LVL2307:
5060:src/xeq.c     **** 		Cmdline[1] = '\0';
 29313              		.loc 1 5060 3 is_stmt 1 view .LVU7842
5061:src/xeq.c     **** 	}
 29314              		.loc 1 5061 3 view .LVU7843
5065:src/xeq.c     **** #if defined(CONSOLE) && !defined(DM42)
 29315              		.loc 1 5065 2 view .LVU7844
 29316 0146 FFF7FEFF 		bl	xcopy
 29317              	.LVL2308:
5070:src/xeq.c     **** 		char buf[16];
 29318              		.loc 1 5070 2 view .LVU7845
5070:src/xeq.c     **** 		char buf[16];
 29319              		.loc 1 5070 5 is_stmt 0 view .LVU7846
 29320 014a 94F91730 		ldrsb	r3, [r4, #23]
 29321 014e 4B45     		cmp	r3, r9
 29322 0150 DADB     		blt	.L2133
5088:src/xeq.c     **** 	State2.wascomplex = 0;
 29323              		.loc 1 5088 2 is_stmt 1 view .LVU7847
5089:src/xeq.c     **** 	if (isDBL(op))
 29324              		.loc 1 5089 20 is_stmt 0 view .LVU7848
 29325 0152 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
5088:src/xeq.c     **** 	State2.wascomplex = 0;
 29326              		.loc 1 5088 7 view .LVU7849
 29327 0154 3D49     		ldr	r1, .L2405+8
5095:src/xeq.c     **** 		switch (opKIND(op)) {
 29328              		.loc 1 5095 13 view .LVU7850
 29329 0156 3E4A     		ldr	r2, .L2405+12
5088:src/xeq.c     **** 	State2.wascomplex = 0;
ARM GAS  /tmp/ccK8IvWa.s 			page 747


 29330              		.loc 1 5088 7 view .LVU7851
 29331 0158 C1F80090 		str	r9, [r1]
5089:src/xeq.c     **** 	if (isDBL(op))
 29332              		.loc 1 5089 2 is_stmt 1 view .LVU7852
5089:src/xeq.c     **** 	if (isDBL(op))
 29333              		.loc 1 5089 20 is_stmt 0 view .LVU7853
 29334 015c 69F38713 		bfi	r3, r9, #6, #2
 29335 0160 2375     		strb	r3, [r4, #20]
5090:src/xeq.c     **** 		multi(op);
 29336              		.loc 1 5090 2 is_stmt 1 view .LVU7854
5095:src/xeq.c     **** 		switch (opKIND(op)) {
 29337              		.loc 1 5095 3 view .LVU7855
5095:src/xeq.c     **** 		switch (opKIND(op)) {
 29338              		.loc 1 5095 15 is_stmt 0 view .LVU7856
 29339 0162 1580     		strh	r5, [r2]	@ movhi
5096:src/xeq.c     **** 		case KIND_SPEC:	specials(op);	break;
 29340              		.loc 1 5096 3 is_stmt 1 view .LVU7857
 29341              	.L2176:
5098:src/xeq.c     **** 		case KIND_MON:	monadic(op);	break;
 29342              		.loc 1 5098 18 view .LVU7858
 29343              	.LVL2309:
 29344              	.LBB4158:
 29345              	.LBI4158:
4360:src/xeq.c     **** 	const unsigned int idx = argKIND(op);
 29346              		.loc 1 4360 13 view .LVU7859
 29347              	.LBB4159:
4361:src/xeq.c     **** 
 29348              		.loc 1 4361 2 view .LVU7860
4361:src/xeq.c     **** 
 29349              		.loc 1 4361 21 is_stmt 0 view .LVU7861
 29350 0164 EDB2     		uxtb	r5, r5
 29351              	.LVL2310:
4363:src/xeq.c     **** 	if (idx < NUM_NILADIC) {
 29352              		.loc 1 4363 2 is_stmt 1 view .LVU7862
 29353 0166 FFF7FEFF 		bl	process_cmdline
 29354              	.LVL2311:
4364:src/xeq.c     **** 		if (is_intmode() && NILADIC_NOTINT(niladics[idx]))
 29355              		.loc 1 4364 2 view .LVU7863
4364:src/xeq.c     **** 		if (is_intmode() && NILADIC_NOTINT(niladics[idx]))
 29356              		.loc 1 4364 5 is_stmt 0 view .LVU7864
 29357 016a C42D     		cmp	r5, #196
 29358 016c 00F21C83 		bhi	.L2212
4365:src/xeq.c     **** 			bad_mode_error();
 29359              		.loc 1 4365 3 is_stmt 1 view .LVU7865
4365:src/xeq.c     **** 			bad_mode_error();
 29360              		.loc 1 4365 7 is_stmt 0 view .LVU7866
 29361 0170 96F8E837 		ldrb	r3, [r6, #2024]	@ zero_extendqisi2
4365:src/xeq.c     **** 			bad_mode_error();
 29362              		.loc 1 4365 6 view .LVU7867
 29363 0174 13F0010F 		tst	r3, #1
4365:src/xeq.c     **** 			bad_mode_error();
 29364              		.loc 1 4365 23 view .LVU7868
 29365 0178 3B4B     		ldr	r3, .L2405+36
4365:src/xeq.c     **** 			bad_mode_error();
 29366              		.loc 1 4365 6 view .LVU7869
 29367 017a 40F09F84 		bne	.L2353
 29368 017e 2A01     		lsls	r2, r5, #4
ARM GAS  /tmp/ccK8IvWa.s 			page 748


 29369              	.L2213:
4367:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
 29370              		.loc 1 4367 8 is_stmt 1 view .LVU7870
4367:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
 29371              		.loc 1 4367 14 is_stmt 0 view .LVU7871
 29372 0180 53F80290 		ldr	r9, [r3, r2]
 29373 0184 1344     		add	r3, r3, r2
 29374 0186 0793     		str	r3, [sp, #28]
4367:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
 29375              		.loc 1 4367 11 view .LVU7872
 29376 0188 B9F1000F 		cmp	r9, #0
 29377 018c 14D0     		beq	.L2217
 29378              	.LBB4160:
4368:src/xeq.c     **** 			if (dispatch_xrom(fp))
 29379              		.loc 1 4368 4 is_stmt 1 view .LVU7873
 29380              	.LVL2312:
4369:src/xeq.c     **** 				return;
 29381              		.loc 1 4369 4 view .LVU7874
4369:src/xeq.c     **** 				return;
 29382              		.loc 1 4369 8 is_stmt 0 view .LVU7875
 29383 018e 4846     		mov	r0, r9
 29384 0190 FFF7FEFF 		bl	dispatch_xrom
 29385              	.LVL2313:
4369:src/xeq.c     **** 				return;
 29386              		.loc 1 4369 7 view .LVU7876
 29387 0194 079B     		ldr	r3, [sp, #28]
 29388 0196 0028     		cmp	r0, #0
 29389 0198 40F05F82 		bne	.L2141
4372:src/xeq.c     **** 				case 2:	lift_if_enabled();
 29390              		.loc 1 4372 5 is_stmt 1 view .LVU7877
 29391 019c 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 29392 019e 03F00303 		and	r3, r3, #3
 29393 01a2 012B     		cmp	r3, #1
 29394 01a4 00F0DA84 		beq	.L2219
 29395 01a8 022B     		cmp	r3, #2
 29396 01aa 03D1     		bne	.L2220
4373:src/xeq.c     **** 				case 1:	lift_if_enabled();
 29397              		.loc 1 4373 13 view .LVU7878
 29398              	.LBB4161:
 29399              	.LBI4161:
 724:src/xeq.c     **** 	if (get_lift())
 29400              		.loc 1 724 6 view .LVU7879
 29401              	.LBB4162:
 725:src/xeq.c     **** 		lift();
 29402              		.loc 1 725 2 view .LVU7880
 29403              	.LBB4163:
 29404              	.LBI4163:
 720:src/xeq.c     **** 	return State2.state_lift;
 29405              		.loc 1 720 12 view .LVU7881
 29406              	.LBB4164:
 721:src/xeq.c     **** }
 29407              		.loc 1 721 2 view .LVU7882
 721:src/xeq.c     **** }
 29408              		.loc 1 721 15 is_stmt 0 view .LVU7883
 29409 01ac E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 29410              	.LBE4164:
 29411              	.LBE4163:
ARM GAS  /tmp/ccK8IvWa.s 			page 749


 725:src/xeq.c     **** 		lift();
 29412              		.loc 1 725 5 view .LVU7884
 29413 01ae 5B06     		lsls	r3, r3, #25
 29414 01b0 00F1D284 		bmi	.L2388
 29415              	.L2220:
 29416              	.LBE4162:
 29417              	.LBE4161:
4376:src/xeq.c     **** 					break;
 29418              		.loc 1 4376 6 is_stmt 1 view .LVU7885
 29419 01b4 2846     		mov	r0, r5
 29420 01b6 C847     		blx	r9
 29421              	.LVL2314:
4377:src/xeq.c     **** 				}
 29422              		.loc 1 4377 6 view .LVU7886
 29423              	.L2217:
4377:src/xeq.c     **** 				}
 29424              		.loc 1 4377 6 is_stmt 0 view .LVU7887
 29425              	.LBE4160:
4382:src/xeq.c     **** 	if (idx != OP_rCLX)
 29426              		.loc 1 4382 3 is_stmt 1 view .LVU7888
4383:src/xeq.c     **** 		set_lift();
 29427              		.loc 1 4383 2 view .LVU7889
 29428 01b8 274B     		ldr	r3, .L2405+20
4383:src/xeq.c     **** 		set_lift();
 29429              		.loc 1 4383 5 is_stmt 0 view .LVU7890
 29430 01ba 3F2D     		cmp	r5, #63
 29431 01bc 1A68     		ldr	r2, [r3]
 29432 01be 03D0     		beq	.L2144
 29433              	.L2223:
4384:src/xeq.c     **** }
 29434              		.loc 1 4384 3 is_stmt 1 view .LVU7891
 29435              	.LBB4171:
 29436              	.LBI4171:
 734:src/xeq.c     ****     State2.state_lift = 1;
 29437              		.loc 1 734 6 view .LVU7892
 29438              	.LBB4172:
 735:src/xeq.c     **** }
 29439              		.loc 1 735 5 view .LVU7893
 735:src/xeq.c     **** }
 29440              		.loc 1 735 23 is_stmt 0 view .LVU7894
 29441 01c0 E17D     		ldrb	r1, [r4, #23]	@ zero_extendqisi2
 29442 01c2 41F04001 		orr	r1, r1, #64
 29443 01c6 E175     		strb	r1, [r4, #23]
 29444              	.LVL2315:
 29445              	.L2144:
 735:src/xeq.c     **** }
 29446              		.loc 1 735 23 view .LVU7895
 29447              	.LBE4172:
 29448              	.LBE4171:
 29449              	.LBE4159:
 29450              	.LBE4158:
5104:src/xeq.c     **** 		}
 29451              		.loc 1 5104 12 is_stmt 1 discriminator 1 view .LVU7896
5114:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 29452              		.loc 1 5114 2 discriminator 1 view .LVU7897
5114:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 29453              		.loc 1 5114 5 is_stmt 0 discriminator 1 view .LVU7898
ARM GAS  /tmp/ccK8IvWa.s 			page 750


 29454 01c8 002A     		cmp	r2, #0
 29455 01ca 99D1     		bne	.L2154
 29456              	.LVL2316:
 29457              	.L2254:
5183:src/xeq.c     **** #ifdef INFRARED
 29458              		.loc 1 5183 2 is_stmt 1 view .LVU7899
 29459              	.LBB4210:
 29460              	.LBI4210:
4188:src/xeq.c     **** 	// extern int IntMaxWindow;
 29461              		.loc 1 4188 6 view .LVU7900
 29462              	.LBB4211:
4191:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 29463              		.loc 1 4191 2 view .LVU7901
4191:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 29464              		.loc 1 4191 16 is_stmt 0 view .LVU7902
 29465 01cc 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
4192:src/xeq.c     **** }
 29466              		.loc 1 4192 15 view .LVU7903
 29467 01ce 0022     		movs	r2, #0
4191:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 29468              		.loc 1 4191 16 view .LVU7904
 29469 01d0 6FF3C503 		bfc	r3, #3, #3
 29470 01d4 2375     		strb	r3, [r4, #20]
4192:src/xeq.c     **** }
 29471              		.loc 1 4192 2 is_stmt 1 view .LVU7905
4192:src/xeq.c     **** }
 29472              		.loc 1 4192 15 is_stmt 0 view .LVU7906
 29473 01d6 6274     		strb	r2, [r4, #17]
 29474              	.LBE4211:
 29475              	.LBE4210:
5188:src/xeq.c     **** 
 29476              		.loc 1 5188 1 view .LVU7907
 29477 01d8 6DB0     		add	sp, sp, #436
 29478              		.cfi_remember_state
 29479              		.cfi_def_cfa_offset 36
 29480              		@ sp needed
 29481 01da BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 29482              	.LVL2317:
 29483              	.L2385:
 29484              		.cfi_restore_state
5091:src/xeq.c     **** 	else if (isRARG(op))
 29485              		.loc 1 5091 3 is_stmt 1 view .LVU7908
 29486              	.LBB4212:
 29487              	.LBI4212:
5008:src/xeq.c     **** 	const int cmd = opDBL(op);
 29488              		.loc 1 5008 13 view .LVU7909
 29489              	.LBB4213:
5009:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
 29490              		.loc 1 5009 2 view .LVU7910
5010:src/xeq.c     **** 
 29491              		.loc 1 5010 12 is_stmt 0 view .LVU7911
 29492 01de 1C4B     		ldr	r3, .L2405+12
5009:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
 29493              		.loc 1 5009 12 view .LVU7912
 29494 01e0 C5F30329 		ubfx	r9, r5, #8, #4
 29495              	.LVL2318:
5010:src/xeq.c     **** 
ARM GAS  /tmp/ccK8IvWa.s 			page 751


 29496              		.loc 1 5010 2 is_stmt 1 view .LVU7913
5010:src/xeq.c     **** 
 29497              		.loc 1 5010 14 is_stmt 0 view .LVU7914
 29498 01e4 A3F80090 		strh	r9, [r3]	@ movhi
5012:src/xeq.c     **** 
 29499              		.loc 1 5012 2 is_stmt 1 view .LVU7915
 29500              	.LBB4214:
 29501              	.LBI4214:
1132:src/xeq.c     **** 	process_cmdline();
 29502              		.loc 1 1132 6 view .LVU7916
 29503              	.LBB4215:
1133:src/xeq.c     **** 	set_lift();
 29504              		.loc 1 1133 2 view .LVU7917
 29505 01e8 FFF7FEFF 		bl	process_cmdline
 29506              	.LVL2319:
1134:src/xeq.c     **** }
 29507              		.loc 1 1134 2 view .LVU7918
 29508              	.LBB4216:
 29509              	.LBI4216:
 734:src/xeq.c     ****     State2.state_lift = 1;
 29510              		.loc 1 734 6 view .LVU7919
 29511              	.LBB4217:
 735:src/xeq.c     **** }
 29512              		.loc 1 735 5 view .LVU7920
 735:src/xeq.c     **** }
 29513              		.loc 1 735 23 is_stmt 0 view .LVU7921
 29514 01ec E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 29515              	.LBE4217:
 29516              	.LBE4216:
 29517              	.LBE4215:
 29518              	.LBE4214:
5014:src/xeq.c     **** 		illegal(op);
 29519              		.loc 1 5014 5 view .LVU7922
 29520 01ee B9F10A0F 		cmp	r9, #10
 29521              	.LBB4221:
 29522              	.LBB4220:
 29523              	.LBB4219:
 29524              	.LBB4218:
 735:src/xeq.c     **** }
 29525              		.loc 1 735 23 view .LVU7923
 29526 01f2 43F04003 		orr	r3, r3, #64
 29527 01f6 E375     		strb	r3, [r4, #23]
 29528              	.LBE4218:
 29529              	.LBE4219:
 29530              	.LBE4220:
 29531              	.LBE4221:
5014:src/xeq.c     **** 		illegal(op);
 29532              		.loc 1 5014 2 is_stmt 1 view .LVU7924
5014:src/xeq.c     **** 		illegal(op);
 29533              		.loc 1 5014 5 is_stmt 0 view .LVU7925
 29534 01f8 00F30482 		bgt	.L2389
5018:src/xeq.c     **** 		return;
 29535              		.loc 1 5018 2 is_stmt 1 view .LVU7926
5018:src/xeq.c     **** 		return;
 29536              		.loc 1 5018 6 is_stmt 0 view .LVU7927
 29537 01fc 1B4A     		ldr	r2, .L2405+40
 29538 01fe 4FEA0913 		lsl	r3, r9, #4
ARM GAS  /tmp/ccK8IvWa.s 			page 752


 29539 0202 D258     		ldr	r2, [r2, r3]
5018:src/xeq.c     **** 		return;
 29540              		.loc 1 5018 5 view .LVU7928
 29541 0204 002A     		cmp	r2, #0
 29542 0206 00F02882 		beq	.L2141
 29543              	.LBB4222:
5021:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
 29544              		.loc 1 5021 3 is_stmt 1 view .LVU7929
 29545              	.LVL2320:
5022:src/xeq.c     **** 			XromUserPc = findmultilbl(op, FIND_OP_ERROR);
 29546              		.loc 1 5022 3 view .LVU7930
 29547              	.LBB4223:
 29548              	.LBI4223:
4234:src/xeq.c     **** {
 29549              		.loc 1 4234 24 view .LVU7931
 29550              	.LBB4224:
4236:src/xeq.c     **** 	if (xp < xrom)
 29551              		.loc 1 4236 2 view .LVU7932
4237:src/xeq.c     **** 		return NULL;
 29552              		.loc 1 4237 5 is_stmt 0 view .LVU7933
 29553 020a 194B     		ldr	r3, .L2405+44
4236:src/xeq.c     **** 	if (xp < xrom)
 29554              		.loc 1 4236 59 view .LVU7934
 29555 020c 22F00101 		bic	r1, r2, #1
 29556              	.LVL2321:
4237:src/xeq.c     **** 		return NULL;
 29557              		.loc 1 4237 2 is_stmt 1 view .LVU7935
4237:src/xeq.c     **** 		return NULL;
 29558              		.loc 1 4237 5 is_stmt 0 view .LVU7936
 29559 0210 9942     		cmp	r1, r3
 29560 0212 08D3     		bcc	.L2142
4241:src/xeq.c     **** 		return NULL;
 29561              		.loc 1 4241 2 is_stmt 1 view .LVU7937
4241:src/xeq.c     **** 		return NULL;
 29562              		.loc 1 4241 17 is_stmt 0 view .LVU7938
 29563 0214 1748     		ldr	r0, .L2405+48
 29564 0216 0088     		ldrh	r0, [r0]
 29565 0218 03EB4003 		add	r3, r3, r0, lsl #1
4241:src/xeq.c     **** 		return NULL;
 29566              		.loc 1 4241 5 view .LVU7939
 29567 021c 9942     		cmp	r1, r3
 29568 021e 02D2     		bcs	.L2142
 29569              	.LVL2322:
4241:src/xeq.c     **** 		return NULL;
 29570              		.loc 1 4241 5 view .LVU7940
 29571              	.LBE4224:
 29572              	.LBE4223:
5022:src/xeq.c     **** 			XromUserPc = findmultilbl(op, FIND_OP_ERROR);
 29573              		.loc 1 5022 6 view .LVU7941
 29574 0220 0029     		cmp	r1, #0
 29575 0222 40F0E182 		bne	.L2390
 29576              	.L2142:
5032:src/xeq.c     **** 			set_lift();
 29577              		.loc 1 5032 4 is_stmt 1 view .LVU7942
 29578 0226 4946     		mov	r1, r9
 29579 0228 2846     		mov	r0, r5
 29580 022a 9047     		blx	r2
ARM GAS  /tmp/ccK8IvWa.s 			page 753


 29581              	.LVL2323:
5033:src/xeq.c     **** 		}
 29582              		.loc 1 5033 4 view .LVU7943
 29583              	.LBB4225:
 29584              	.LBI4225:
 734:src/xeq.c     ****     State2.state_lift = 1;
 29585              		.loc 1 734 6 view .LVU7944
 29586              	.LBB4226:
 735:src/xeq.c     **** }
 29587              		.loc 1 735 5 view .LVU7945
 29588              	.L2362:
 735:src/xeq.c     **** }
 29589              		.loc 1 735 5 is_stmt 0 view .LVU7946
 29590              	.LBE4226:
 29591              	.LBE4225:
 29592              	.LBE4222:
 29593              	.LBE4213:
 29594              	.LBE4212:
 29595              	.LBB4239:
 29596              	.LBB4240:
 29597              	.LBB4241:
3760:src/xeq.c     **** 		}
 29598              		.loc 1 3760 4 is_stmt 1 view .LVU7947
 29599              	.LBB4242:
 29600              	.LBI4242:
 734:src/xeq.c     ****     State2.state_lift = 1;
 29601              		.loc 1 734 6 view .LVU7948
 29602              	.LBB4243:
 735:src/xeq.c     **** }
 29603              		.loc 1 735 5 view .LVU7949
 735:src/xeq.c     **** }
 29604              		.loc 1 735 23 is_stmt 0 view .LVU7950
 29605 022c E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 29606 022e 0A4B     		ldr	r3, .L2405+20
 29607 0230 42F04002 		orr	r2, r2, #64
 29608 0234 E275     		strb	r2, [r4, #23]
 29609 0236 1A68     		ldr	r2, [r3]
 29610 0238 C6E7     		b	.L2144
 29611              	.LVL2324:
 29612              	.L2387:
 735:src/xeq.c     **** }
 29613              		.loc 1 735 23 view .LVU7951
 29614              	.LBE4243:
 29615              	.LBE4242:
 29616              	.LBE4241:
 29617              	.LBE4240:
 29618              	.LBE4239:
 29619              	.LBB4310:
5073:src/xeq.c     **** 		else
 29620              		.loc 1 5073 4 is_stmt 1 view .LVU7952
 29621 023a 2846     		mov	r0, r5
 29622 023c FFF7FEFF 		bl	print_step
 29623              	.LVL2325:
 29624 0240 76E7     		b	.L2136
 29625              	.L2406:
 29626 0242 00BF     		.align	2
 29627              	.L2405:
ARM GAS  /tmp/ccK8IvWa.s 			page 754


 29628 0244 00000000 		.word	PersistentRam
 29629 0248 00000000 		.word	StateWhileOn
 29630 024c 00000000 		.word	Busy
 29631 0250 00000000 		.word	XeqOpCode
 29632 0254 00000000 		.word	argcmds
 29633 0258 00000000 		.word	Error
 29634 025c 00000000 		.word	.LC8
 29635 0260 00000000 		.word	TraceBuffer
 29636 0264 00000000 		.word	DispMsg
 29637 0268 00000000 		.word	niladics
 29638 026c 00000000 		.word	multicmds
 29639 0270 00000000 		.word	xrom
 29640 0274 00000000 		.word	xrom_size
 29641 0278 00000000 		.word	StackBase
 29642 027c 00000000 		.word	Running
 29643              	.L2174:
5073:src/xeq.c     **** 		else
 29644              		.loc 1 5073 4 is_stmt 0 view .LVU7953
 29645              	.LBE4310:
5100:src/xeq.c     **** 		case KIND_TRI:	triadic(op);	break;
 29646              		.loc 1 5100 18 is_stmt 1 view .LVU7954
 29647              	.LVL2326:
 29648              	.LBB4311:
 29649              	.LBI4311:
4467:src/xeq.c     **** 
 29650              		.loc 1 4467 13 view .LVU7955
 29651              	.LBB4312:
4469:src/xeq.c     **** 	process_cmdline_set_lift();
 29652              		.loc 1 4469 2 view .LVU7956
4470:src/xeq.c     **** 
 29653              		.loc 1 4470 2 view .LVU7957
 29654              	.LBB4313:
 29655              	.LBI4313:
1132:src/xeq.c     **** 	process_cmdline();
 29656              		.loc 1 1132 6 view .LVU7958
 29657              	.LBB4314:
1133:src/xeq.c     **** 	set_lift();
 29658              		.loc 1 1133 2 view .LVU7959
 29659 0280 FFF7FEFF 		bl	process_cmdline
 29660              	.LVL2327:
1134:src/xeq.c     **** }
 29661              		.loc 1 1134 2 view .LVU7960
 29662              	.LBB4315:
 29663              	.LBI4315:
 734:src/xeq.c     ****     State2.state_lift = 1;
 29664              		.loc 1 734 6 view .LVU7961
 29665              	.LBB4316:
 735:src/xeq.c     **** }
 29666              		.loc 1 735 5 view .LVU7962
 735:src/xeq.c     **** }
 29667              		.loc 1 735 23 is_stmt 0 view .LVU7963
 29668 0284 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 29669              	.LBE4316:
 29670              	.LBE4315:
 29671              	.LBE4314:
 29672              	.LBE4313:
4472:src/xeq.c     **** 	if (f < NUM_DYADIC) {
ARM GAS  /tmp/ccK8IvWa.s 			page 755


 29673              		.loc 1 4472 4 view .LVU7964
 29674 0286 EDB2     		uxtb	r5, r5
 29675              	.LVL2328:
 29676              	.LBB4323:
 29677              	.LBB4321:
 29678              	.LBB4319:
 29679              	.LBB4317:
 735:src/xeq.c     **** }
 29680              		.loc 1 735 23 view .LVU7965
 29681 0288 43F04003 		orr	r3, r3, #64
 29682              	.LBE4317:
 29683              	.LBE4319:
 29684              	.LBE4321:
 29685              	.LBE4323:
4473:src/xeq.c     **** 		if (is_intmode()) {
 29686              		.loc 1 4473 5 view .LVU7966
 29687 028c 2E2D     		cmp	r5, #46
 29688              	.LBB4324:
 29689              	.LBB4322:
 29690              	.LBB4320:
 29691              	.LBB4318:
 735:src/xeq.c     **** }
 29692              		.loc 1 735 23 view .LVU7967
 29693 028e E375     		strb	r3, [r4, #23]
 29694              	.LBE4318:
 29695              	.LBE4320:
 29696              	.LBE4322:
 29697              	.LBE4324:
4472:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 29698              		.loc 1 4472 2 is_stmt 1 view .LVU7968
 29699              	.LVL2329:
4473:src/xeq.c     **** 		if (is_intmode()) {
 29700              		.loc 1 4473 2 view .LVU7969
4473:src/xeq.c     **** 		if (is_intmode()) {
 29701              		.loc 1 4473 5 is_stmt 0 view .LVU7970
 29702 0290 40F26282 		bls	.L2391
 29703              	.LVL2330:
 29704              	.L2169:
4473:src/xeq.c     **** 		if (is_intmode()) {
 29705              		.loc 1 4473 5 view .LVU7971
 29706              	.LBE4312:
 29707              	.LBE4311:
5104:src/xeq.c     **** 		}
 29708              		.loc 1 5104 12 is_stmt 1 view .LVU7972
5104:src/xeq.c     **** 		}
 29709              		.loc 1 5104 12 view .LVU7973
 29710              	.LBB4358:
 29711              	.LBI4358:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29712              		.loc 1 523 5 view .LVU7974
 29713              	.LBB4359:
 524:src/xeq.c     **** 		Error = e;
 29714              		.loc 1 524 2 view .LVU7975
 524:src/xeq.c     **** 		Error = e;
 29715              		.loc 1 524 12 is_stmt 0 view .LVU7976
 29716 0294 B14B     		ldr	r3, .L2407
 29717 0296 1868     		ldr	r0, [r3]
ARM GAS  /tmp/ccK8IvWa.s 			page 756


 524:src/xeq.c     **** 		Error = e;
 29718              		.loc 1 524 5 view .LVU7977
 29719 0298 0028     		cmp	r0, #0
 29720 029a 40F0C781 		bne	.L2369
 29721 029e DFF8D892 		ldr	r9, .L2407+28
 29722              	.LVL2331:
 29723              	.L2148:
 524:src/xeq.c     **** 		Error = e;
 29724              		.loc 1 524 5 view .LVU7978
 29725              	.LBE4359:
 29726              	.LBE4358:
 29727              	.LBB4360:
 29728              	.LBB4236:
 29729              	.LBB4229:
 29730              	.LBB4230:
 29731              	.LBB4231:
 29732              	.LBI4231:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29733              		.loc 1 523 5 is_stmt 1 view .LVU7979
 29734              	.LBB4232:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 29735              		.loc 1 525 3 view .LVU7980
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 29736              		.loc 1 525 9 is_stmt 0 view .LVU7981
 29737 02a2 0320     		movs	r0, #3
 29738 02a4 1860     		str	r0, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 29739              		.loc 1 526 3 is_stmt 1 view .LVU7982
 29740              	.LVL2332:
 29741              	.L2267:
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 29742              		.loc 1 526 3 is_stmt 0 view .LVU7983
 29743              	.LBE4232:
 29744              	.LBE4231:
 29745              	.LBE4230:
 29746              	.LBE4229:
 29747              	.LBE4236:
 29748              	.LBE4360:
5116:src/xeq.c     **** 		// Repair stack and state
 29749              		.loc 1 5116 3 is_stmt 1 view .LVU7984
 29750 02a6 0793     		str	r3, [sp, #28]
 29751 02a8 FFF7FEFF 		bl	error_message
 29752              	.LVL2333:
5119:src/xeq.c     **** 		UserFlags[regA_idx >> 4] = flags;
 29753              		.loc 1 5119 3 view .LVU7985
 29754 02ac 5146     		mov	r1, r10
 29755 02ae A022     		movs	r2, #160
 29756 02b0 DBF80000 		ldr	r0, [fp]
 29757 02b4 FFF7FEFF 		bl	xcopy
 29758              	.LVL2334:
5120:src/xeq.c     **** 		UState = old;
 29759              		.loc 1 5120 3 view .LVU7986
5121:src/xeq.c     **** 		State2.state_lift = lift;
 29760              		.loc 1 5121 10 is_stmt 0 view .LVU7987
 29761 02b8 97E80300 		ldm	r7, {r0, r1}
5120:src/xeq.c     **** 		UState = old;
 29762              		.loc 1 5120 28 view .LVU7988
ARM GAS  /tmp/ccK8IvWa.s 			page 757


 29763 02bc 039B     		ldr	r3, [sp, #12]
5122:src/xeq.c     **** 		raw_set_pc(old_pc);
 29764              		.loc 1 5122 21 view .LVU7989
 29765 02be E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
5120:src/xeq.c     **** 		UState = old;
 29766              		.loc 1 5120 28 view .LVU7990
 29767 02c0 A6F8FC37 		strh	r3, [r6, #2044]	@ movhi
5121:src/xeq.c     **** 		State2.state_lift = lift;
 29768              		.loc 1 5121 3 is_stmt 1 view .LVU7991
5122:src/xeq.c     **** 		raw_set_pc(old_pc);
 29769              		.loc 1 5122 21 is_stmt 0 view .LVU7992
 29770 02c4 049B     		ldr	r3, [sp, #16]
5121:src/xeq.c     **** 		State2.state_lift = lift;
 29771              		.loc 1 5121 10 view .LVU7993
 29772 02c6 88E80300 		stm	r8, {r0, r1}
5122:src/xeq.c     **** 		raw_set_pc(old_pc);
 29773              		.loc 1 5122 3 is_stmt 1 view .LVU7994
5122:src/xeq.c     **** 		raw_set_pc(old_pc);
 29774              		.loc 1 5122 21 is_stmt 0 view .LVU7995
 29775 02ca 63F38612 		bfi	r2, r3, #6, #1
 29776              	.LBB4361:
 29777              	.LBB4362:
 280:src/xeq.c     **** }
 29778              		.loc 1 280 2 view .LVU7996
 29779 02ce 0020     		movs	r0, #0
 279:src/xeq.c     **** 	update_program_bounds(0);
 29780              		.loc 1 279 11 view .LVU7997
 29781 02d0 059B     		ldr	r3, [sp, #20]
 29782              	.LBE4362:
 29783              	.LBE4361:
5122:src/xeq.c     **** 		raw_set_pc(old_pc);
 29784              		.loc 1 5122 21 view .LVU7998
 29785 02d2 E275     		strb	r2, [r4, #23]
5123:src/xeq.c     **** 		*((int *)&CommandLine) = old_cl;
 29786              		.loc 1 5123 3 is_stmt 1 view .LVU7999
 29787              	.LVL2335:
 29788              	.LBB4364:
 29789              	.LBI4361:
 278:src/xeq.c     **** 	State.pc = pc;
 29790              		.loc 1 278 13 view .LVU8000
 29791              	.LBB4363:
 279:src/xeq.c     **** 	update_program_bounds(0);
 29792              		.loc 1 279 2 view .LVU8001
 280:src/xeq.c     **** }
 29793              		.loc 1 280 2 view .LVU8002
 279:src/xeq.c     **** 	update_program_bounds(0);
 29794              		.loc 1 279 11 is_stmt 0 view .LVU8003
 29795 02d4 A6F8E037 		strh	r3, [r6, #2016]	@ movhi
 280:src/xeq.c     **** }
 29796              		.loc 1 280 2 view .LVU8004
 29797 02d8 FFF7FEFF 		bl	update_program_bounds
 29798              	.LVL2336:
 280:src/xeq.c     **** }
 29799              		.loc 1 280 2 view .LVU8005
 29800              	.LBE4363:
 29801              	.LBE4364:
5124:src/xeq.c     **** 		process_cmdline_set_lift();
ARM GAS  /tmp/ccK8IvWa.s 			page 758


 29802              		.loc 1 5124 3 is_stmt 1 view .LVU8006
5124:src/xeq.c     **** 		process_cmdline_set_lift();
 29803              		.loc 1 5124 26 is_stmt 0 view .LVU8007
 29804 02dc 069B     		ldr	r3, [sp, #24]
 29805 02de E361     		str	r3, [r4, #28]
5125:src/xeq.c     **** 		// process_cmdline_set_lift() may set an error code if there was something
 29806              		.loc 1 5125 3 is_stmt 1 view .LVU8008
 29807              	.LBB4365:
 29808              	.LBI4365:
1132:src/xeq.c     **** 	process_cmdline();
 29809              		.loc 1 1132 6 view .LVU8009
 29810              	.LBB4366:
1133:src/xeq.c     **** 	set_lift();
 29811              		.loc 1 1133 2 view .LVU8010
 29812 02e0 FFF7FEFF 		bl	process_cmdline
 29813              	.LVL2337:
1134:src/xeq.c     **** }
 29814              		.loc 1 1134 2 view .LVU8011
 29815              	.LBB4367:
 29816              	.LBI4367:
 734:src/xeq.c     ****     State2.state_lift = 1;
 29817              		.loc 1 734 6 view .LVU8012
 29818              	.LBB4368:
 735:src/xeq.c     **** }
 29819              		.loc 1 735 5 view .LVU8013
 29820              	.LBE4368:
 29821              	.LBE4367:
 29822              	.LBE4366:
 29823              	.LBE4365:
5129:src/xeq.c     **** #ifndef REALBUILD
 29824              		.loc 1 5129 15 is_stmt 0 view .LVU8014
 29825 02e4 9E49     		ldr	r1, .L2407+4
 29826              	.LBB4375:
 29827              	.LBB4373:
 29828              	.LBB4371:
 29829              	.LBB4369:
 735:src/xeq.c     **** }
 29830              		.loc 1 735 23 view .LVU8015
 29831 02e6 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 29832              	.LBE4369:
 29833              	.LBE4371:
 29834              	.LBE4373:
 29835              	.LBE4375:
5129:src/xeq.c     **** #ifndef REALBUILD
 29836              		.loc 1 5129 15 view .LVU8016
 29837 02e8 0D68     		ldr	r5, [r1]
 29838 02ea D9F80000 		ldr	r0, [r9]
5128:src/xeq.c     **** 		if (Running || XromRunning) {
 29839              		.loc 1 5128 9 view .LVU8017
 29840 02ee 079B     		ldr	r3, [sp, #28]
 29841              	.LBB4376:
 29842              	.LBB4374:
 29843              	.LBB4372:
 29844              	.LBB4370:
 735:src/xeq.c     **** }
 29845              		.loc 1 735 23 view .LVU8018
 29846 02f0 42F04002 		orr	r2, r2, #64
ARM GAS  /tmp/ccK8IvWa.s 			page 759


 29847 02f4 E275     		strb	r2, [r4, #23]
 29848              	.LBE4370:
 29849              	.LBE4372:
 29850              	.LBE4374:
 29851              	.LBE4376:
5128:src/xeq.c     **** 		if (Running || XromRunning) {
 29852              		.loc 1 5128 3 is_stmt 1 view .LVU8019
5128:src/xeq.c     **** 		if (Running || XromRunning) {
 29853              		.loc 1 5128 9 is_stmt 0 view .LVU8020
 29854 02f6 0021     		movs	r1, #0
5129:src/xeq.c     **** #ifndef REALBUILD
 29855              		.loc 1 5129 15 view .LVU8021
 29856 02f8 50EA0502 		orrs	r2, r0, r5
5128:src/xeq.c     **** 		if (Running || XromRunning) {
 29857              		.loc 1 5128 9 view .LVU8022
 29858 02fc 1960     		str	r1, [r3]
5129:src/xeq.c     **** #ifndef REALBUILD
 29859              		.loc 1 5129 3 is_stmt 1 view .LVU8023
5129:src/xeq.c     **** #ifndef REALBUILD
 29860              		.loc 1 5129 15 is_stmt 0 view .LVU8024
 29861 02fe 3FF465AF 		beq	.L2254
5131:src/xeq.c     **** 				// Special handling for debug environment
 29862              		.loc 1 5131 4 is_stmt 1 view .LVU8025
5131:src/xeq.c     **** 				// Special handling for debug environment
 29863              		.loc 1 5131 7 is_stmt 0 view .LVU8026
 29864 0302 94F91720 		ldrsb	r2, [r4, #23]
5133:src/xeq.c     **** 					// Restore the global return stack
 29865              		.loc 1 5133 9 view .LVU8027
 29866 0306 974D     		ldr	r5, .L2407+8
5131:src/xeq.c     **** 				// Special handling for debug environment
 29867              		.loc 1 5131 7 view .LVU8028
 29868 0308 8A42     		cmp	r2, r1
 29869 030a C0F2D381 		blt	.L2392
 29870              	.LBB4377:
5153:src/xeq.c     **** 				if (XromFlags.xIN) {
 29871              		.loc 1 5153 5 is_stmt 1 view .LVU8029
5154:src/xeq.c     **** 					// Restore state to before xIN
 29872              		.loc 1 5154 8 is_stmt 0 view .LVU8030
 29873 030e 95F90120 		ldrsb	r2, [r5, #1]
5153:src/xeq.c     **** 				if (XromFlags.xIN) {
 29874              		.loc 1 5153 24 view .LVU8031
 29875 0312 B6F8E037 		ldrh	r3, [r6, #2016]
 29876              	.LVL2338:
5154:src/xeq.c     **** 					// Restore state to before xIN
 29877              		.loc 1 5154 5 is_stmt 1 view .LVU8032
5154:src/xeq.c     **** 					// Restore state to before xIN
 29878              		.loc 1 5154 8 is_stmt 0 view .LVU8033
 29879 0316 002A     		cmp	r2, #0
 29880 0318 1EDA     		bge	.L2262
5156:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 29881              		.loc 1 5156 6 is_stmt 1 view .LVU8034
5156:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 29882              		.loc 1 5156 20 is_stmt 0 view .LVU8035
 29883 031a 6F78     		ldrb	r7, [r5, #1]	@ zero_extendqisi2
5158:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 29884              		.loc 1 5158 18 view .LVU8036
 29885 031c D6F8E807 		ldr	r0, [r6, #2024]
ARM GAS  /tmp/ccK8IvWa.s 			page 760


5156:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 29886              		.loc 1 5156 20 view .LVU8037
 29887 0320 61F3C717 		bfi	r7, r1, #7, #1
5158:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 29888              		.loc 1 5158 18 view .LVU8038
 29889 0324 C7F3C001 		ubfx	r1, r7, #3, #1
 29890 0328 07F00102 		and	r2, r7, #1
 29891 032c 42EA8132 		orr	r2, r2, r1, lsl #14
 29892 0330 C7F38001 		ubfx	r1, r7, #2, #1
 29893 0334 42EAC142 		orr	r2, r2, r1, lsl #19
 29894 0338 8B49     		ldr	r1, .L2407+12
5156:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 29895              		.loc 1 5156 20 view .LVU8039
 29896 033a 6F70     		strb	r7, [r5, #1]
5157:src/xeq.c     **** 					UState.intm = XromFlags.mode_int;
 29897              		.loc 1 5157 6 is_stmt 1 view .LVU8040
5158:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 29898              		.loc 1 5158 6 view .LVU8041
5159:src/xeq.c     **** 					// Restore the global return stack
 29899              		.loc 1 5159 6 view .LVU8042
5158:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 29900              		.loc 1 5158 18 is_stmt 0 view .LVU8043
 29901 033c 20F40420 		bic	r0, r0, #540672
 29902 0340 0A40     		ands	r2, r2, r1
5161:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 29903              		.loc 1 5161 13 view .LVU8044
 29904 0342 8A4F     		ldr	r7, .L2407+16
 29905 0344 A968     		ldr	r1, [r5, #8]
5162:src/xeq.c     **** 				}
 29906              		.loc 1 5162 16 view .LVU8045
 29907 0346 AD89     		ldrh	r5, [r5, #12]
5161:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 29908              		.loc 1 5161 13 view .LVU8046
 29909 0348 3960     		str	r1, [r7]
5158:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 29910              		.loc 1 5158 18 view .LVU8047
 29911 034a 20F00100 		bic	r0, r0, #1
 29912 034e 0243     		orrs	r2, r2, r0
 29913 0350 C6F8E827 		str	r2, [r6, #2024]
5161:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 29914              		.loc 1 5161 6 is_stmt 1 view .LVU8048
5162:src/xeq.c     **** 				}
 29915              		.loc 1 5162 6 view .LVU8049
5162:src/xeq.c     **** 				}
 29916              		.loc 1 5162 16 is_stmt 0 view .LVU8050
 29917 0354 A6F8E257 		strh	r5, [r6, #2018]	@ movhi
 29918              	.L2262:
5164:src/xeq.c     **** 					// Leave XROM
 29919              		.loc 1 5164 11 is_stmt 1 view .LVU8051
 29920 0358 9A0B     		lsrs	r2, r3, #14
 29921 035a 032A     		cmp	r2, #3
 29922 035c 19D1     		bne	.L2263
5168:src/xeq.c     **** 					}
 29923              		.loc 1 5168 10 is_stmt 0 view .LVU8052
 29924 035e 834F     		ldr	r7, .L2407+16
5168:src/xeq.c     **** 					}
 29925              		.loc 1 5168 18 view .LVU8053
ARM GAS  /tmp/ccK8IvWa.s 			page 761


 29926 0360 6FF00045 		mvn	r5, #-2147483648
 29927 0364 04E0     		b	.L2266
 29928              	.L2264:
5171:src/xeq.c     **** 				}
 29929              		.loc 1 5171 7 is_stmt 1 view .LVU8054
 29930 0366 0133     		adds	r3, r3, #1
 29931              	.LVL2339:
5171:src/xeq.c     **** 				}
 29932              		.loc 1 5171 7 is_stmt 0 view .LVU8055
 29933 0368 9BB2     		uxth	r3, r3
 29934              	.LVL2340:
5164:src/xeq.c     **** 					// Leave XROM
 29935              		.loc 1 5164 11 is_stmt 1 view .LVU8056
 29936 036a 9A0B     		lsrs	r2, r3, #14
 29937 036c 032A     		cmp	r2, #3
 29938 036e 10D1     		bne	.L2263
 29939              	.L2266:
5166:src/xeq.c     **** 						retstk_up();
 29940              		.loc 1 5166 6 view .LVU8057
5166:src/xeq.c     **** 						retstk_up();
 29941              		.loc 1 5166 9 is_stmt 0 view .LVU8058
 29942 0370 B6F9E227 		ldrsh	r2, [r6, #2018]
 29943 0374 002A     		cmp	r2, #0
 29944 0376 F6D0     		beq	.L2264
5167:src/xeq.c     **** 						pc = RetStk[RetStkPtr - 1];
 29945              		.loc 1 5167 7 is_stmt 1 view .LVU8059
 29946 0378 FFF7FEFF 		bl	retstk_up
 29947              	.LVL2341:
5168:src/xeq.c     **** 					}
 29948              		.loc 1 5168 7 view .LVU8060
5168:src/xeq.c     **** 					}
 29949              		.loc 1 5168 19 is_stmt 0 view .LVU8061
 29950 037c B6F9E227 		ldrsh	r2, [r6, #2018]
5168:src/xeq.c     **** 					}
 29951              		.loc 1 5168 10 view .LVU8062
 29952 0380 3B68     		ldr	r3, [r7]
5168:src/xeq.c     **** 					}
 29953              		.loc 1 5168 18 view .LVU8063
 29954 0382 5119     		adds	r1, r2, r5
5168:src/xeq.c     **** 					}
 29955              		.loc 1 5168 10 view .LVU8064
 29956 0384 33F81130 		ldrh	r3, [r3, r1, lsl #1]
 29957              	.LVL2342:
5170:src/xeq.c     **** 						++pc; // compensate for decpc below
 29958              		.loc 1 5170 6 is_stmt 1 view .LVU8065
5170:src/xeq.c     **** 						++pc; // compensate for decpc below
 29959              		.loc 1 5170 9 is_stmt 0 view .LVU8066
 29960 0388 002A     		cmp	r2, #0
 29961 038a ECD0     		beq	.L2264
5164:src/xeq.c     **** 					// Leave XROM
 29962              		.loc 1 5164 11 is_stmt 1 view .LVU8067
 29963 038c 9A0B     		lsrs	r2, r3, #14
 29964 038e 032A     		cmp	r2, #3
 29965 0390 EED0     		beq	.L2266
 29966              	.L2263:
5173:src/xeq.c     **** #ifndef REALBUILD
 29967              		.loc 1 5173 5 view .LVU8068
ARM GAS  /tmp/ccK8IvWa.s 			page 762


 29968              	.LVL2343:
 29969              	.LBB4378:
 29970              	.LBI4378:
 278:src/xeq.c     **** 	State.pc = pc;
 29971              		.loc 1 278 13 view .LVU8069
 29972              	.LBB4379:
 279:src/xeq.c     **** 	update_program_bounds(0);
 29973              		.loc 1 279 2 view .LVU8070
 280:src/xeq.c     **** }
 29974              		.loc 1 280 2 is_stmt 0 view .LVU8071
 29975 0392 0020     		movs	r0, #0
 279:src/xeq.c     **** 	update_program_bounds(0);
 29976              		.loc 1 279 11 view .LVU8072
 29977 0394 A6F8E037 		strh	r3, [r6, #2016]	@ movhi
 280:src/xeq.c     **** }
 29978              		.loc 1 280 2 is_stmt 1 view .LVU8073
 29979 0398 FFF7FEFF 		bl	update_program_bounds
 29980              	.LVL2344:
 29981              	.L2257:
 280:src/xeq.c     **** }
 29982              		.loc 1 280 2 is_stmt 0 view .LVU8074
 29983              	.LBE4379:
 29984              	.LBE4378:
 29985              	.LBE4377:
5177:src/xeq.c     **** 			xeq_init_contexts();	// Repair any pointers clobberd by xIN
 29986              		.loc 1 5177 4 is_stmt 1 view .LVU8075
 29987 039c FFF7FEFF 		bl	decpc
 29988              	.LVL2345:
5178:src/xeq.c     **** 
 29989              		.loc 1 5178 4 view .LVU8076
 29990 03a0 FFF7FEFF 		bl	xeq_init_contexts
 29991              	.LVL2346:
5180:src/xeq.c     **** 		}
 29992              		.loc 1 5180 4 view .LVU8077
 29993              	.LBB4380:
 29994              	.LBI4380:
5560:src/xeq.c     **** 	set_running_off_sst();
 29995              		.loc 1 5560 6 view .LVU8078
 29996              	.LBB4381:
5561:src/xeq.c     **** 	State.entryp = 0;
 29997              		.loc 1 5561 2 view .LVU8079
 29998              	.LBB4382:
 29999              	.LBI4382:
5552:src/xeq.c     **** 	Running = 0;
 30000              		.loc 1 5552 6 view .LVU8080
 30001              	.LBB4383:
5553:src/xeq.c     **** }
 30002              		.loc 1 5553 2 view .LVU8081
 30003              	.LBE4383:
 30004              	.LBE4382:
5562:src/xeq.c     **** 	dot( RCL_annun, 0);
 30005              		.loc 1 5562 15 is_stmt 0 view .LVU8082
 30006 03a4 96F8DD37 		ldrb	r3, [r6, #2013]	@ zero_extendqisi2
 30007              	.LBB4386:
 30008              	.LBB4384:
5553:src/xeq.c     **** }
 30009              		.loc 1 5553 10 view .LVU8083
ARM GAS  /tmp/ccK8IvWa.s 			page 763


 30010 03a8 0021     		movs	r1, #0
 30011              	.LBE4384:
 30012              	.LBE4386:
5562:src/xeq.c     **** 	dot( RCL_annun, 0);
 30013              		.loc 1 5562 15 view .LVU8084
 30014 03aa 61F30413 		bfi	r3, r1, #4, #1
5563:src/xeq.c     **** }
 30015              		.loc 1 5563 2 view .LVU8085
 30016 03ae 8A20     		movs	r0, #138
5562:src/xeq.c     **** 	dot( RCL_annun, 0);
 30017              		.loc 1 5562 15 view .LVU8086
 30018 03b0 86F8DD37 		strb	r3, [r6, #2013]
 30019              	.LBB4387:
 30020              	.LBB4385:
5553:src/xeq.c     **** }
 30021              		.loc 1 5553 10 view .LVU8087
 30022 03b4 C9F80010 		str	r1, [r9]
 30023              	.LBE4385:
 30024              	.LBE4387:
5562:src/xeq.c     **** 	dot( RCL_annun, 0);
 30025              		.loc 1 5562 2 is_stmt 1 view .LVU8088
5563:src/xeq.c     **** }
 30026              		.loc 1 5563 2 view .LVU8089
 30027 03b8 FFF7FEFF 		bl	dot
 30028              	.LVL2347:
5564:src/xeq.c     **** 
 30029              		.loc 1 5564 1 is_stmt 0 view .LVU8090
 30030 03bc 06E7     		b	.L2254
 30031              	.LVL2348:
 30032              	.L2177:
5564:src/xeq.c     **** 
 30033              		.loc 1 5564 1 view .LVU8091
 30034              	.LBE4381:
 30035              	.LBE4380:
5097:src/xeq.c     **** 		case KIND_NIL:	niladic(op);	break;
 30036              		.loc 1 5097 19 is_stmt 1 view .LVU8092
 30037              	.LBB4388:
 30038              	.LBI4239:
3667:src/xeq.c     **** 	int opm = argKIND(op);
 30039              		.loc 1 3667 13 view .LVU8093
 30040              	.LBB4305:
3668:src/xeq.c     **** 
 30041              		.loc 1 3668 2 view .LVU8094
3668:src/xeq.c     **** 
 30042              		.loc 1 3668 6 is_stmt 0 view .LVU8095
 30043 03be 5FFA85F9 		uxtb	r9, r5
 30044              	.LVL2349:
3670:src/xeq.c     **** 	case OP_0:	case OP_1:	case OP_2:
 30045              		.loc 1 3670 2 is_stmt 1 view .LVU8096
 30046 03c2 B9F12A0F 		cmp	r9, #42
 30047 03c6 3FF665AF 		bhi	.L2169
 30048 03ca DFE819F0 		tbh	[pc, r9, lsl #1]
 30049              	.L2180:
 30050 03ce 9302     		.2byte	(.L2191-.L2180)/2
 30051 03d0 0803     		.2byte	(.L2190-.L2180)/2
 30052 03d2 DF02     		.2byte	(.L2189-.L2180)/2
 30053 03d4 CE02     		.2byte	(.L2188-.L2180)/2
ARM GAS  /tmp/ccK8IvWa.s 			page 764


 30054 03d6 9E02     		.2byte	(.L2187-.L2180)/2
 30055 03d8 2902     		.2byte	(.L2186-.L2180)/2
 30056 03da 2902     		.2byte	(.L2186-.L2180)/2
 30057 03dc 2902     		.2byte	(.L2186-.L2180)/2
 30058 03de 2902     		.2byte	(.L2186-.L2180)/2
 30059 03e0 2902     		.2byte	(.L2186-.L2180)/2
 30060 03e2 2902     		.2byte	(.L2186-.L2180)/2
 30061 03e4 2902     		.2byte	(.L2186-.L2180)/2
 30062 03e6 2902     		.2byte	(.L2186-.L2180)/2
 30063 03e8 2902     		.2byte	(.L2186-.L2180)/2
 30064 03ea 2902     		.2byte	(.L2186-.L2180)/2
 30065 03ec 2902     		.2byte	(.L2186-.L2180)/2
 30066 03ee 2902     		.2byte	(.L2186-.L2180)/2
 30067 03f0 2902     		.2byte	(.L2186-.L2180)/2
 30068 03f2 2902     		.2byte	(.L2186-.L2180)/2
 30069 03f4 2902     		.2byte	(.L2186-.L2180)/2
 30070 03f6 2902     		.2byte	(.L2186-.L2180)/2
 30071 03f8 8302     		.2byte	(.L2185-.L2180)/2
 30072 03fa 8302     		.2byte	(.L2185-.L2180)/2
 30073 03fc 3E02     		.2byte	(.L2184-.L2180)/2
 30074 03fe 3E02     		.2byte	(.L2184-.L2180)/2
 30075 0400 3E02     		.2byte	(.L2184-.L2180)/2
 30076 0402 3E02     		.2byte	(.L2184-.L2180)/2
 30077 0404 3E02     		.2byte	(.L2184-.L2180)/2
 30078 0406 3E02     		.2byte	(.L2184-.L2180)/2
 30079 0408 3E02     		.2byte	(.L2184-.L2180)/2
 30080 040a 3202     		.2byte	(.L2183-.L2180)/2
 30081 040c 3202     		.2byte	(.L2183-.L2180)/2
 30082 040e 3202     		.2byte	(.L2183-.L2180)/2
 30083 0410 3202     		.2byte	(.L2183-.L2180)/2
 30084 0412 3202     		.2byte	(.L2183-.L2180)/2
 30085 0414 3202     		.2byte	(.L2183-.L2180)/2
 30086 0416 3202     		.2byte	(.L2183-.L2180)/2
 30087 0418 7702     		.2byte	(.L2182-.L2180)/2
 30088 041a 7702     		.2byte	(.L2182-.L2180)/2
 30089 041c 6B02     		.2byte	(.L2181-.L2180)/2
 30090 041e 6B02     		.2byte	(.L2181-.L2180)/2
 30091 0420 5F02     		.2byte	(.L2179-.L2180)/2
 30092 0422 5F02     		.2byte	(.L2179-.L2180)/2
 30093              	.LVL2350:
 30094              		.p2align 1
 30095              	.L2170:
3670:src/xeq.c     **** 	case OP_0:	case OP_1:	case OP_2:
 30096              		.loc 1 3670 2 is_stmt 0 view .LVU8097
 30097              	.LBE4305:
 30098              	.LBE4388:
5103:src/xeq.c     **** 		default:	illegal(op);
 30099              		.loc 1 5103 19 is_stmt 1 view .LVU8098
 30100              	.LBB4389:
 30101              	.LBI4389:
4510:src/xeq.c     **** 	decNumber x1, y1, x2, y2, xr, yr;
 30102              		.loc 1 4510 13 view .LVU8099
 30103              	.LBB4390:
4511:src/xeq.c     **** 	unsigned int f;
 30104              		.loc 1 4511 2 view .LVU8100
4512:src/xeq.c     **** 
 30105              		.loc 1 4512 2 view .LVU8101
ARM GAS  /tmp/ccK8IvWa.s 			page 765


4514:src/xeq.c     **** 
 30106              		.loc 1 4514 2 view .LVU8102
 30107              	.LBB4391:
 30108              	.LBI4391:
1132:src/xeq.c     **** 	process_cmdline();
 30109              		.loc 1 1132 6 view .LVU8103
 30110              	.LBB4392:
1133:src/xeq.c     **** 	set_lift();
 30111              		.loc 1 1133 2 view .LVU8104
 30112 0424 FFF7FEFF 		bl	process_cmdline
 30113              	.LVL2351:
1134:src/xeq.c     **** }
 30114              		.loc 1 1134 2 view .LVU8105
 30115              	.LBB4393:
 30116              	.LBI4393:
 734:src/xeq.c     ****     State2.state_lift = 1;
 30117              		.loc 1 734 6 view .LVU8106
 30118              	.LBB4394:
 735:src/xeq.c     **** }
 30119              		.loc 1 735 5 view .LVU8107
 735:src/xeq.c     **** }
 30120              		.loc 1 735 23 is_stmt 0 view .LVU8108
 30121 0428 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 30122              	.LBE4394:
 30123              	.LBE4393:
 30124              	.LBE4392:
 30125              	.LBE4391:
4516:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 30126              		.loc 1 4516 4 view .LVU8109
 30127 042a EDB2     		uxtb	r5, r5
 30128              	.LVL2352:
 30129              	.LBB4401:
 30130              	.LBB4399:
 30131              	.LBB4397:
 30132              	.LBB4395:
 735:src/xeq.c     **** }
 30133              		.loc 1 735 23 view .LVU8110
 30134 042c 43F04003 		orr	r3, r3, #64
 30135              	.LBE4395:
 30136              	.LBE4397:
 30137              	.LBE4399:
 30138              	.LBE4401:
4517:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
 30139              		.loc 1 4517 5 view .LVU8111
 30140 0430 2E2D     		cmp	r5, #46
 30141              	.LBB4402:
 30142              	.LBB4400:
 30143              	.LBB4398:
 30144              	.LBB4396:
 735:src/xeq.c     **** }
 30145              		.loc 1 735 23 view .LVU8112
 30146 0432 E375     		strb	r3, [r4, #23]
 30147              	.LBE4396:
 30148              	.LBE4398:
 30149              	.LBE4400:
 30150              	.LBE4402:
4516:src/xeq.c     **** 	if (f < NUM_DYADIC) {
ARM GAS  /tmp/ccK8IvWa.s 			page 766


 30151              		.loc 1 4516 2 is_stmt 1 view .LVU8113
 30152              	.LVL2353:
4517:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
 30153              		.loc 1 4517 2 view .LVU8114
4517:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
 30154              		.loc 1 4517 5 is_stmt 0 view .LVU8115
 30155 0434 00F2EE80 		bhi	.L2250
4518:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 30156              		.loc 1 4518 3 is_stmt 1 view .LVU8116
4518:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 30157              		.loc 1 4518 9 is_stmt 0 view .LVU8117
 30158 0438 4D4B     		ldr	r3, .L2407+20
 30159 043a 05EB4505 		add	r5, r5, r5, lsl #1
 30160              	.LVL2354:
4518:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 30161              		.loc 1 4518 9 view .LVU8118
 30162 043e 03EBC505 		add	r5, r3, r5, lsl #3
 30163 0442 6D68     		ldr	r5, [r5, #4]
4518:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 30164              		.loc 1 4518 6 view .LVU8119
 30165 0444 002D     		cmp	r5, #0
 30166 0446 00F0D782 		beq	.L2251
 30167              	.LBB4403:
4519:src/xeq.c     **** 			if (dispatch_xrom(fp))
 30168              		.loc 1 4519 4 is_stmt 1 view .LVU8120
 30169              	.LVL2355:
4520:src/xeq.c     **** 				return;
 30170              		.loc 1 4520 4 view .LVU8121
4520:src/xeq.c     **** 				return;
 30171              		.loc 1 4520 8 is_stmt 0 view .LVU8122
 30172 044a 2846     		mov	r0, r5
 30173 044c FFF7FEFF 		bl	dispatch_xrom
 30174              	.LVL2356:
4520:src/xeq.c     **** 				return;
 30175              		.loc 1 4520 7 view .LVU8123
 30176 0450 0028     		cmp	r0, #0
 30177 0452 40F00281 		bne	.L2141
4523:src/xeq.c     **** 
 30178              		.loc 1 4523 5 is_stmt 1 view .LVU8124
 30179              	.LVL2357:
 30180              	.LBB4404:
 30181              	.LBI4404:
 843:src/xeq.c     **** 	getXYZ(x, y, z);
 30182              		.loc 1 843 6 view .LVU8125
 30183              	.LBB4405:
 844:src/xeq.c     **** 	getT(t);
 30184              		.loc 1 844 2 view .LVU8126
 30185 0456 17AB     		add	r3, sp, #92
 30186              	.LVL2358:
 844:src/xeq.c     **** 	getT(t);
 30187              		.loc 1 844 2 is_stmt 0 view .LVU8127
 30188 0458 0DF13809 		add	r9, sp, #56
 30189              	.LVL2359:
 844:src/xeq.c     **** 	getT(t);
 30190              		.loc 1 844 2 view .LVU8128
 30191 045c 20AA     		add	r2, sp, #128
 30192              	.LVL2360:
ARM GAS  /tmp/ccK8IvWa.s 			page 767


 844:src/xeq.c     **** 	getT(t);
 30193              		.loc 1 844 2 view .LVU8129
 30194 045e 1946     		mov	r1, r3
 30195 0460 4846     		mov	r0, r9
 30196 0462 FFF7FEFF 		bl	getXYZ
 30197              	.LVL2361:
 845:src/xeq.c     **** }
 30198              		.loc 1 845 2 is_stmt 1 view .LVU8130
 30199              	.LBB4406:
 30200              	.LBI4406:
 817:src/xeq.c     **** 	getRegister(t, regT_idx);
 30201              		.loc 1 817 13 view .LVU8131
 30202              	.LBB4407:
 818:src/xeq.c     **** }
 30203              		.loc 1 818 2 view .LVU8132
 30204 0466 29A8     		add	r0, sp, #164
 30205              	.LVL2362:
 818:src/xeq.c     **** }
 30206              		.loc 1 818 2 is_stmt 0 view .LVU8133
 30207 0468 6721     		movs	r1, #103
 30208 046a FFF7FEFF 		bl	getRegister
 30209              	.LVL2363:
 818:src/xeq.c     **** }
 30210              		.loc 1 818 2 view .LVU8134
 30211              	.LBE4407:
 30212              	.LBE4406:
 30213              	.LBE4405:
 30214              	.LBE4404:
4525:src/xeq.c     **** 
 30215              		.loc 1 4525 5 is_stmt 1 view .LVU8135
 30216 046e 17AB     		add	r3, sp, #92
 30217 0470 20AA     		add	r2, sp, #128
 30218 0472 3BA9     		add	r1, sp, #236
 30219 0474 32A8     		add	r0, sp, #200
 30220 0476 CDE90093 		strd	r9, r3, [sp]
 30221 047a 29AB     		add	r3, sp, #164
 30222 047c A847     		blx	r5
 30223              	.LVL2364:
4527:src/xeq.c     **** 				lower2();
 30224              		.loc 1 4527 5 view .LVU8136
 30225 047e FFF7FEFF 		bl	setlastXY
 30226              	.LVL2365:
4528:src/xeq.c     **** 				setXY(&xr, &yr);
 30227              		.loc 1 4528 5 view .LVU8137
 30228 0482 FFF7FEFF 		bl	lower2
 30229              	.LVL2366:
 30230 0486 27E0     		b	.L2363
 30231              	.LVL2367:
 30232              	.L2172:
4528:src/xeq.c     **** 				setXY(&xr, &yr);
 30233              		.loc 1 4528 5 is_stmt 0 view .LVU8138
 30234              	.LBE4403:
 30235              	.LBE4390:
 30236              	.LBE4389:
5102:src/xeq.c     **** 		case KIND_CDYA:	dyadic_cmplex(op);	break;
 30237              		.loc 1 5102 19 is_stmt 1 view .LVU8139
 30238              	.LBB4436:
ARM GAS  /tmp/ccK8IvWa.s 			page 768


 30239              	.LBI4436:
4433:src/xeq.c     **** 	decNumber x, y, rx, ry;
 30240              		.loc 1 4433 13 view .LVU8140
 30241              	.LBB4437:
4434:src/xeq.c     **** 	unsigned int f;
 30242              		.loc 1 4434 2 view .LVU8141
4435:src/xeq.c     **** 
 30243              		.loc 1 4435 2 view .LVU8142
4437:src/xeq.c     **** 
 30244              		.loc 1 4437 2 view .LVU8143
 30245              	.LBB4438:
 30246              	.LBI4438:
1132:src/xeq.c     **** 	process_cmdline();
 30247              		.loc 1 1132 6 view .LVU8144
 30248              	.LBB4439:
1133:src/xeq.c     **** 	set_lift();
 30249              		.loc 1 1133 2 view .LVU8145
 30250 0488 FFF7FEFF 		bl	process_cmdline
 30251              	.LVL2368:
1134:src/xeq.c     **** }
 30252              		.loc 1 1134 2 view .LVU8146
 30253              	.LBB4440:
 30254              	.LBI4440:
 734:src/xeq.c     ****     State2.state_lift = 1;
 30255              		.loc 1 734 6 view .LVU8147
 30256              	.LBB4441:
 735:src/xeq.c     **** }
 30257              		.loc 1 735 5 view .LVU8148
 735:src/xeq.c     **** }
 30258              		.loc 1 735 23 is_stmt 0 view .LVU8149
 30259 048c E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 30260              	.LBE4441:
 30261              	.LBE4440:
 30262              	.LBE4439:
 30263              	.LBE4438:
4439:src/xeq.c     **** 
 30264              		.loc 1 4439 4 view .LVU8150
 30265 048e EDB2     		uxtb	r5, r5
 30266              	.LVL2369:
 30267              	.LBB4448:
 30268              	.LBB4446:
 30269              	.LBB4444:
 30270              	.LBB4442:
 735:src/xeq.c     **** }
 30271              		.loc 1 735 23 view .LVU8151
 30272 0490 43F04003 		orr	r3, r3, #64
 30273              	.LBE4442:
 30274              	.LBE4444:
 30275              	.LBE4446:
 30276              	.LBE4448:
4441:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
 30277              		.loc 1 4441 5 view .LVU8152
 30278 0494 982D     		cmp	r5, #152
 30279              	.LBB4449:
 30280              	.LBB4447:
 30281              	.LBB4445:
 30282              	.LBB4443:
ARM GAS  /tmp/ccK8IvWa.s 			page 769


 735:src/xeq.c     **** }
 30283              		.loc 1 735 23 view .LVU8153
 30284 0496 E375     		strb	r3, [r4, #23]
 30285              	.LBE4443:
 30286              	.LBE4445:
 30287              	.LBE4447:
 30288              	.LBE4449:
4439:src/xeq.c     **** 
 30289              		.loc 1 4439 2 is_stmt 1 view .LVU8154
 30290              	.LVL2370:
4441:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
 30291              		.loc 1 4441 2 view .LVU8155
4441:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
 30292              		.loc 1 4441 5 is_stmt 0 view .LVU8156
 30293 0498 00F2BC80 		bhi	.L2250
4442:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 30294              		.loc 1 4442 3 is_stmt 1 view .LVU8157
4442:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 30295              		.loc 1 4442 9 is_stmt 0 view .LVU8158
 30296 049c 354B     		ldr	r3, .L2407+24
 30297 049e 05EB4505 		add	r5, r5, r5, lsl #1
 30298              	.LVL2371:
4442:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 30299              		.loc 1 4442 9 view .LVU8159
 30300 04a2 03EBC505 		add	r5, r3, r5, lsl #3
 30301 04a6 6D68     		ldr	r5, [r5, #4]
4442:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 30302              		.loc 1 4442 6 view .LVU8160
 30303 04a8 002D     		cmp	r5, #0
 30304 04aa 00F0A582 		beq	.L2251
 30305              	.LBB4450:
4443:src/xeq.c     **** 			if (dispatch_xrom(fp))
 30306              		.loc 1 4443 4 is_stmt 1 view .LVU8161
 30307              	.LVL2372:
4444:src/xeq.c     **** 				return;
 30308              		.loc 1 4444 4 view .LVU8162
4444:src/xeq.c     **** 				return;
 30309              		.loc 1 4444 8 is_stmt 0 view .LVU8163
 30310 04ae 2846     		mov	r0, r5
 30311 04b0 FFF7FEFF 		bl	dispatch_xrom
 30312              	.LVL2373:
4444:src/xeq.c     **** 				return;
 30313              		.loc 1 4444 7 view .LVU8164
 30314 04b4 0028     		cmp	r0, #0
 30315 04b6 40F0D080 		bne	.L2141
4447:src/xeq.c     **** 				fp(&rx, &ry, &x, &y);
 30316              		.loc 1 4447 5 is_stmt 1 view .LVU8165
 30317              	.LVL2374:
 30318              	.LBB4451:
 30319              	.LBI4451:
 821:src/xeq.c     **** 	getX(x);
 30320              		.loc 1 821 6 view .LVU8166
 30321              	.LBE4451:
 30322              	.LBE4450:
 30323              	.LBE4437:
 30324              	.LBE4436:
 822:src/xeq.c     **** 	getY(y);
ARM GAS  /tmp/ccK8IvWa.s 			page 770


 30325              		.loc 1 822 2 view .LVU8167
 30326              	.LBB4468:
 30327              	.LBB4465:
 30328              	.LBB4462:
 30329              	.LBB4456:
 30330              	.LBB4452:
 30331              	.LBI4452:
 791:src/xeq.c     **** 	return getRegister(x, regX_idx);
 30332              		.loc 1 791 12 view .LVU8168
 30333              	.LBB4453:
 792:src/xeq.c     **** }
 30334              		.loc 1 792 2 view .LVU8169
 792:src/xeq.c     **** }
 30335              		.loc 1 792 9 is_stmt 0 view .LVU8170
 30336 04ba 6421     		movs	r1, #100
 30337 04bc 20A8     		add	r0, sp, #128
 30338              	.LVL2375:
 792:src/xeq.c     **** }
 30339              		.loc 1 792 9 view .LVU8171
 30340 04be FFF7FEFF 		bl	getRegister
 30341              	.LVL2376:
 792:src/xeq.c     **** }
 30342              		.loc 1 792 9 view .LVU8172
 30343              	.LBE4453:
 30344              	.LBE4452:
 30345              	.LBE4456:
 30346              	.LBE4462:
 30347              	.LBE4465:
 30348              	.LBE4468:
 823:src/xeq.c     **** }
 30349              		.loc 1 823 2 is_stmt 1 view .LVU8173
 30350              	.LBB4469:
 30351              	.LBB4466:
 30352              	.LBB4463:
 30353              	.LBB4457:
 30354              	.LBB4454:
 30355              	.LBI4454:
 799:src/xeq.c     **** 	getRegister(y, regY_idx);
 30356              		.loc 1 799 6 view .LVU8174
 30357              	.LBB4455:
 800:src/xeq.c     **** }
 30358              		.loc 1 800 2 view .LVU8175
 30359 04c2 6521     		movs	r1, #101
 30360 04c4 29A8     		add	r0, sp, #164
 30361              	.LVL2377:
 800:src/xeq.c     **** }
 30362              		.loc 1 800 2 is_stmt 0 view .LVU8176
 30363 04c6 FFF7FEFF 		bl	getRegister
 30364              	.LVL2378:
 800:src/xeq.c     **** }
 30365              		.loc 1 800 2 view .LVU8177
 30366              	.LBE4455:
 30367              	.LBE4454:
 30368              	.LBE4457:
4448:src/xeq.c     **** 				setlastXY();
 30369              		.loc 1 4448 5 is_stmt 1 view .LVU8178
 30370 04ca 29AB     		add	r3, sp, #164
ARM GAS  /tmp/ccK8IvWa.s 			page 771


 30371 04cc 20AA     		add	r2, sp, #128
 30372 04ce 3BA9     		add	r1, sp, #236
 30373 04d0 32A8     		add	r0, sp, #200
 30374 04d2 A847     		blx	r5
 30375              	.LVL2379:
4449:src/xeq.c     **** 				setXY(&rx, &ry);
 30376              		.loc 1 4449 5 view .LVU8179
 30377 04d4 FFF7FEFF 		bl	setlastXY
 30378              	.LVL2380:
4450:src/xeq.c     **** 				set_was_complex();
 30379              		.loc 1 4450 5 view .LVU8180
 30380              	.LBB4458:
 30381              	.LBI4458:
 826:src/xeq.c     **** 	setX(x);
 30382              		.loc 1 826 6 view .LVU8181
 30383              	.LBE4458:
 30384              	.LBE4463:
 30385              	.LBE4466:
 30386              	.LBE4469:
 827:src/xeq.c     **** 	setY(y);
 30387              		.loc 1 827 2 view .LVU8182
 30388              	.LBB4470:
 30389              	.LBB4467:
 30390              	.LBB4464:
 30391              	.LBB4461:
 30392              	.LBB4459:
 30393              	.LBI4459:
 795:src/xeq.c     **** 	setRegister(regX_idx, x);
 30394              		.loc 1 795 6 view .LVU8183
 30395              	.LBB4460:
 796:src/xeq.c     **** }
 30396              		.loc 1 796 2 view .LVU8184
 30397              	.L2363:
 796:src/xeq.c     **** }
 30398              		.loc 1 796 2 is_stmt 0 view .LVU8185
 30399              	.LBE4460:
 30400              	.LBE4459:
 30401              	.LBE4461:
 30402              	.LBE4464:
 30403              	.LBE4467:
 30404              	.LBE4470:
 30405              	.LBB4471:
 30406              	.LBB4430:
 30407              	.LBB4417:
4529:src/xeq.c     **** 				set_was_complex();
 30408              		.loc 1 4529 5 is_stmt 1 view .LVU8186
 30409              	.LBB4408:
 30410              	.LBI4408:
 826:src/xeq.c     **** 	setX(x);
 30411              		.loc 1 826 6 view .LVU8187
 30412              	.LBE4408:
 30413              	.LBE4417:
 30414              	.LBE4430:
 30415              	.LBE4471:
 827:src/xeq.c     **** 	setY(y);
 30416              		.loc 1 827 2 view .LVU8188
 30417              	.LBB4472:
ARM GAS  /tmp/ccK8IvWa.s 			page 772


 30418              	.LBB4431:
 30419              	.LBB4418:
 30420              	.LBB4413:
 30421              	.LBB4409:
 30422              	.LBI4409:
 795:src/xeq.c     **** 	setRegister(regX_idx, x);
 30423              		.loc 1 795 6 view .LVU8189
 30424              	.LBB4410:
 796:src/xeq.c     **** }
 30425              		.loc 1 796 2 view .LVU8190
 30426 04d8 32A9     		add	r1, sp, #200
 30427              	.LVL2381:
 796:src/xeq.c     **** }
 30428              		.loc 1 796 2 is_stmt 0 view .LVU8191
 30429 04da 6420     		movs	r0, #100
 30430 04dc FFF7FEFF 		bl	setRegister
 30431              	.LVL2382:
 796:src/xeq.c     **** }
 30432              		.loc 1 796 2 view .LVU8192
 30433              	.LBE4410:
 30434              	.LBE4409:
 30435              	.LBE4413:
 30436              	.LBE4418:
 30437              	.LBE4431:
 30438              	.LBE4472:
 828:src/xeq.c     **** }
 30439              		.loc 1 828 2 is_stmt 1 view .LVU8193
 30440              	.LBB4473:
 30441              	.LBB4432:
 30442              	.LBB4419:
 30443              	.LBB4414:
 30444              	.LBB4411:
 30445              	.LBI4411:
 803:src/xeq.c     **** 	setRegister(regY_idx, y);
 30446              		.loc 1 803 6 view .LVU8194
 30447              	.LBB4412:
 804:src/xeq.c     **** }
 30448              		.loc 1 804 2 view .LVU8195
 30449 04e0 3BA9     		add	r1, sp, #236
 30450              	.LVL2383:
 804:src/xeq.c     **** }
 30451              		.loc 1 804 2 is_stmt 0 view .LVU8196
 30452 04e2 6520     		movs	r0, #101
 30453 04e4 FFF7FEFF 		bl	setRegister
 30454              	.LVL2384:
 804:src/xeq.c     **** }
 30455              		.loc 1 804 2 view .LVU8197
 30456              	.LBE4412:
 30457              	.LBE4411:
 30458              	.LBE4414:
4530:src/xeq.c     **** 			}
 30459              		.loc 1 4530 5 is_stmt 1 view .LVU8198
 30460              	.LBB4415:
 30461              	.LBI4415:
 516:src/xeq.c     **** 	State2.wascomplex = 1;
 30462              		.loc 1 516 13 view .LVU8199
 30463              	.LBB4416:
ARM GAS  /tmp/ccK8IvWa.s 			page 773


 517:src/xeq.c     **** }
 30464              		.loc 1 517 2 view .LVU8200
 517:src/xeq.c     **** }
 30465              		.loc 1 517 20 is_stmt 0 view .LVU8201
 30466 04e8 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
 30467 04ea 1C4B     		ldr	r3, .L2407
 30468 04ec 0121     		movs	r1, #1
 30469 04ee 61F38712 		bfi	r2, r1, #6, #2
 30470 04f2 2275     		strb	r2, [r4, #20]
 30471 04f4 1A68     		ldr	r2, [r3]
 518:src/xeq.c     **** 
 30472              		.loc 1 518 1 view .LVU8202
 30473 04f6 67E6     		b	.L2144
 30474              	.LVL2385:
 30475              	.L2175:
 518:src/xeq.c     **** 
 30476              		.loc 1 518 1 view .LVU8203
 30477              	.LBE4416:
 30478              	.LBE4415:
 30479              	.LBE4419:
 30480              	.LBE4432:
 30481              	.LBE4473:
5099:src/xeq.c     **** 		case KIND_DYA:	dyadic(op);	break;
 30482              		.loc 1 5099 18 is_stmt 1 view .LVU8204
 30483              	.LBB4474:
 30484              	.LBI4474:
4393:src/xeq.c     **** {
 30485              		.loc 1 4393 13 view .LVU8205
 30486              	.LBB4475:
4395:src/xeq.c     **** 	process_cmdline_set_lift();
 30487              		.loc 1 4395 2 view .LVU8206
4396:src/xeq.c     **** 
 30488              		.loc 1 4396 2 view .LVU8207
 30489              	.LBB4476:
 30490              	.LBI4476:
1132:src/xeq.c     **** 	process_cmdline();
 30491              		.loc 1 1132 6 view .LVU8208
 30492              	.LBB4477:
1133:src/xeq.c     **** 	set_lift();
 30493              		.loc 1 1133 2 view .LVU8209
 30494 04f8 FFF7FEFF 		bl	process_cmdline
 30495              	.LVL2386:
1134:src/xeq.c     **** }
 30496              		.loc 1 1134 2 view .LVU8210
 30497              	.LBB4478:
 30498              	.LBI4478:
 734:src/xeq.c     ****     State2.state_lift = 1;
 30499              		.loc 1 734 6 view .LVU8211
 30500              	.LBB4479:
 735:src/xeq.c     **** }
 30501              		.loc 1 735 5 view .LVU8212
 735:src/xeq.c     **** }
 30502              		.loc 1 735 23 is_stmt 0 view .LVU8213
 30503 04fc E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 30504              	.LBE4479:
 30505              	.LBE4478:
 30506              	.LBE4477:
ARM GAS  /tmp/ccK8IvWa.s 			page 774


 30507              	.LBE4476:
4398:src/xeq.c     **** 	if (f < NUM_MONADIC) {
 30508              		.loc 1 4398 4 view .LVU8214
 30509 04fe EDB2     		uxtb	r5, r5
 30510              	.LVL2387:
 30511              	.LBB4486:
 30512              	.LBB4484:
 30513              	.LBB4482:
 30514              	.LBB4480:
 735:src/xeq.c     **** }
 30515              		.loc 1 735 23 view .LVU8215
 30516 0500 43F04003 		orr	r3, r3, #64
 30517              	.LBE4480:
 30518              	.LBE4482:
 30519              	.LBE4484:
 30520              	.LBE4486:
4399:src/xeq.c     **** 		if (is_intmode()) {
 30521              		.loc 1 4399 5 view .LVU8216
 30522 0504 982D     		cmp	r5, #152
 30523              	.LBB4487:
 30524              	.LBB4485:
 30525              	.LBB4483:
 30526              	.LBB4481:
 735:src/xeq.c     **** }
 30527              		.loc 1 735 23 view .LVU8217
 30528 0506 E375     		strb	r3, [r4, #23]
 30529              	.LBE4481:
 30530              	.LBE4483:
 30531              	.LBE4485:
 30532              	.LBE4487:
4398:src/xeq.c     **** 	if (f < NUM_MONADIC) {
 30533              		.loc 1 4398 2 is_stmt 1 view .LVU8218
 30534              	.LVL2388:
4399:src/xeq.c     **** 		if (is_intmode()) {
 30535              		.loc 1 4399 2 view .LVU8219
4399:src/xeq.c     **** 		if (is_intmode()) {
 30536              		.loc 1 4399 5 is_stmt 0 view .LVU8220
 30537 0508 3FF6C4AE 		bhi	.L2169
4400:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
 30538              		.loc 1 4400 3 is_stmt 1 view .LVU8221
4400:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
 30539              		.loc 1 4400 7 is_stmt 0 view .LVU8222
 30540 050c 96F8E837 		ldrb	r3, [r6, #2024]	@ zero_extendqisi2
4400:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
 30541              		.loc 1 4400 6 view .LVU8223
 30542 0510 D907     		lsls	r1, r3, #31
 30543 0512 40F1B282 		bpl	.L2226
4401:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 30544              		.loc 1 4401 4 is_stmt 1 view .LVU8224
4401:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 30545              		.loc 1 4401 10 is_stmt 0 view .LVU8225
 30546 0516 174B     		ldr	r3, .L2407+24
 30547 0518 05EB4505 		add	r5, r5, r5, lsl #1
 30548              	.LVL2389:
4401:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 30549              		.loc 1 4401 10 view .LVU8226
 30550 051c 03EBC505 		add	r5, r3, r5, lsl #3
ARM GAS  /tmp/ccK8IvWa.s 			page 775


 30551 0520 AD68     		ldr	r5, [r5, #8]
4401:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 30552              		.loc 1 4401 7 view .LVU8227
 30553 0522 002D     		cmp	r5, #0
 30554 0524 00F0DC81 		beq	.L2243
 30555              	.LBB4488:
4402:src/xeq.c     **** 				if (dispatch_xrom(fp))
 30556              		.loc 1 4402 5 is_stmt 1 view .LVU8228
 30557              	.LVL2390:
4403:src/xeq.c     **** 					return;
 30558              		.loc 1 4403 5 view .LVU8229
4403:src/xeq.c     **** 					return;
 30559              		.loc 1 4403 9 is_stmt 0 view .LVU8230
 30560 0528 2846     		mov	r0, r5
 30561 052a FFF7FEFF 		bl	dispatch_xrom
 30562              	.LVL2391:
4403:src/xeq.c     **** 					return;
 30563              		.loc 1 4403 8 view .LVU8231
 30564 052e 0028     		cmp	r0, #0
 30565 0530 40F09380 		bne	.L2141
 30566              	.LBB4489:
4406:src/xeq.c     **** 					x = fp(x);
 30567              		.loc 1 4406 6 is_stmt 1 view .LVU8232
 30568              	.LBB4490:
 30569              	.LBI4490:
1242:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 30570              		.loc 1 1242 15 view .LVU8233
 30571              	.LBB4491:
1243:src/xeq.c     **** }
 30572              		.loc 1 1243 2 view .LVU8234
1243:src/xeq.c     **** }
 30573              		.loc 1 1243 9 is_stmt 0 view .LVU8235
 30574 0534 6420     		movs	r0, #100
 30575 0536 FFF7FEFF 		bl	get_reg_n_int
 30576              	.LVL2392:
1243:src/xeq.c     **** }
 30577              		.loc 1 1243 9 view .LVU8236
 30578              	.LBE4491:
 30579              	.LBE4490:
4407:src/xeq.c     **** 					setlastX();
 30580              		.loc 1 4407 6 is_stmt 1 view .LVU8237
4407:src/xeq.c     **** 					setlastX();
 30581              		.loc 1 4407 10 is_stmt 0 view .LVU8238
 30582 053a A847     		blx	r5
 30583              	.LVL2393:
4407:src/xeq.c     **** 					setlastX();
 30584              		.loc 1 4407 10 view .LVU8239
 30585 053c 074B     		ldr	r3, .L2407
 30586 053e 0793     		str	r3, [sp, #28]
 30587 0540 8146     		mov	r9, r0
 30588 0542 0D46     		mov	r5, r1
 30589              	.LVL2394:
4408:src/xeq.c     **** 					setX_int(x);
 30590              		.loc 1 4408 6 is_stmt 1 view .LVU8240
 30591              	.LBB4492:
 30592              	.LBI4492:
 759:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
ARM GAS  /tmp/ccK8IvWa.s 			page 776


 30593              		.loc 1 759 6 view .LVU8241
 30594              	.LBB4493:
 760:src/xeq.c     **** }
 30595              		.loc 1 760 2 view .LVU8242
 30596 0544 6C20     		movs	r0, #108
 30597              	.LVL2395:
 760:src/xeq.c     **** }
 30598              		.loc 1 760 2 is_stmt 0 view .LVU8243
 30599 0546 6421     		movs	r1, #100
 30600              	.LVL2396:
 760:src/xeq.c     **** }
 30601              		.loc 1 760 2 view .LVU8244
 30602 0548 FFF7FEFF 		bl	copyreg_n
 30603              	.LVL2397:
 30604              	.LBE4493:
 30605              	.LBE4492:
4409:src/xeq.c     **** 				}
 30606              		.loc 1 4409 6 is_stmt 1 view .LVU8245
 30607 054c 4846     		mov	r0, r9
 30608 054e 2946     		mov	r1, r5
 30609 0550 FFF7FEFF 		bl	setX_int
 30610              	.LVL2398:
 30611 0554 079B     		ldr	r3, [sp, #28]
 30612 0556 1A68     		ldr	r2, [r3]
 30613              	.LBE4489:
 30614              	.LBE4488:
 30615 0558 36E6     		b	.L2144
 30616              	.L2408:
 30617 055a 00BF     		.align	2
 30618              	.L2407:
 30619 055c 00000000 		.word	Error
 30620 0560 00000000 		.word	XromRunning
 30621 0564 00000000 		.word	XromParams
 30622 0568 01400800 		.word	540673
 30623 056c 00000000 		.word	RetStk
 30624 0570 00000000 		.word	dyfuncs
 30625 0574 00000000 		.word	monfuncs
 30626 0578 00000000 		.word	Running
 30627              	.LVL2399:
 30628              	.L2173:
4409:src/xeq.c     **** 				}
 30629              		.loc 1 4409 6 is_stmt 0 view .LVU8246
 30630              	.LBE4475:
 30631              	.LBE4474:
5101:src/xeq.c     **** 		case KIND_CMON:	monadic_cmplex(op);	break;
 30632              		.loc 1 5101 18 is_stmt 1 view .LVU8247
 30633              	.LBB4508:
 30634              	.LBI4508:
4542:src/xeq.c     **** 	unsigned int f;
 30635              		.loc 1 4542 13 view .LVU8248
 30636              	.LBB4509:
4543:src/xeq.c     **** 	process_cmdline_set_lift();
 30637              		.loc 1 4543 2 view .LVU8249
4544:src/xeq.c     **** 
 30638              		.loc 1 4544 2 view .LVU8250
 30639              	.LBB4510:
 30640              	.LBI4510:
ARM GAS  /tmp/ccK8IvWa.s 			page 777


1132:src/xeq.c     **** 	process_cmdline();
 30641              		.loc 1 1132 6 view .LVU8251
 30642              	.LBB4511:
1133:src/xeq.c     **** 	set_lift();
 30643              		.loc 1 1133 2 view .LVU8252
 30644 057c FFF7FEFF 		bl	process_cmdline
 30645              	.LVL2400:
1134:src/xeq.c     **** }
 30646              		.loc 1 1134 2 view .LVU8253
 30647              	.LBB4512:
 30648              	.LBI4512:
 734:src/xeq.c     ****     State2.state_lift = 1;
 30649              		.loc 1 734 6 view .LVU8254
 30650              	.LBB4513:
 735:src/xeq.c     **** }
 30651              		.loc 1 735 5 view .LVU8255
 735:src/xeq.c     **** }
 30652              		.loc 1 735 23 is_stmt 0 view .LVU8256
 30653 0580 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 30654              	.LBE4513:
 30655              	.LBE4512:
 30656              	.LBE4511:
 30657              	.LBE4510:
4546:src/xeq.c     **** 	if (f < NUM_TRIADIC) {
 30658              		.loc 1 4546 4 view .LVU8257
 30659 0582 EDB2     		uxtb	r5, r5
 30660              	.LVL2401:
 30661              	.LBB4520:
 30662              	.LBB4518:
 30663              	.LBB4516:
 30664              	.LBB4514:
 735:src/xeq.c     **** }
 30665              		.loc 1 735 23 view .LVU8258
 30666 0584 43F04003 		orr	r3, r3, #64
 30667              	.LBE4514:
 30668              	.LBE4516:
 30669              	.LBE4518:
 30670              	.LBE4520:
4547:src/xeq.c     **** 		if (is_intmode()) {
 30671              		.loc 1 4547 5 view .LVU8259
 30672 0588 0B2D     		cmp	r5, #11
 30673              	.LBB4521:
 30674              	.LBB4519:
 30675              	.LBB4517:
 30676              	.LBB4515:
 735:src/xeq.c     **** }
 30677              		.loc 1 735 23 view .LVU8260
 30678 058a E375     		strb	r3, [r4, #23]
 30679              	.LBE4515:
 30680              	.LBE4517:
 30681              	.LBE4519:
 30682              	.LBE4521:
4546:src/xeq.c     **** 	if (f < NUM_TRIADIC) {
 30683              		.loc 1 4546 2 is_stmt 1 view .LVU8261
 30684              	.LVL2402:
4547:src/xeq.c     **** 		if (is_intmode()) {
 30685              		.loc 1 4547 2 view .LVU8262
ARM GAS  /tmp/ccK8IvWa.s 			page 778


4547:src/xeq.c     **** 		if (is_intmode()) {
 30686              		.loc 1 4547 5 is_stmt 0 view .LVU8263
 30687 058c 3FF682AE 		bhi	.L2169
4548:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
 30688              		.loc 1 4548 3 is_stmt 1 view .LVU8264
4548:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
 30689              		.loc 1 4548 7 is_stmt 0 view .LVU8265
 30690 0590 96F8E837 		ldrb	r3, [r6, #2024]	@ zero_extendqisi2
4548:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
 30691              		.loc 1 4548 6 view .LVU8266
 30692 0594 DB07     		lsls	r3, r3, #31
 30693 0596 40F1A982 		bpl	.L2240
4549:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 30694              		.loc 1 4549 4 is_stmt 1 view .LVU8267
4549:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 30695              		.loc 1 4549 10 is_stmt 0 view .LVU8268
 30696 059a B24B     		ldr	r3, .L2409
 30697 059c 05EB8505 		add	r5, r5, r5, lsl #2
 30698              	.LVL2403:
4549:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 30699              		.loc 1 4549 10 view .LVU8269
 30700 05a0 03EB8505 		add	r5, r3, r5, lsl #2
 30701 05a4 6D68     		ldr	r5, [r5, #4]
4549:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 30702              		.loc 1 4549 7 view .LVU8270
 30703 05a6 002D     		cmp	r5, #0
 30704 05a8 00F09A81 		beq	.L2243
 30705              	.LBB4522:
4550:src/xeq.c     **** 				if (dispatch_xrom(fp))
 30706              		.loc 1 4550 5 is_stmt 1 view .LVU8271
 30707              	.LVL2404:
4551:src/xeq.c     **** 					return;
 30708              		.loc 1 4551 5 view .LVU8272
4551:src/xeq.c     **** 					return;
 30709              		.loc 1 4551 9 is_stmt 0 view .LVU8273
 30710 05ac 2846     		mov	r0, r5
 30711 05ae FFF7FEFF 		bl	dispatch_xrom
 30712              	.LVL2405:
4551:src/xeq.c     **** 					return;
 30713              		.loc 1 4551 8 view .LVU8274
 30714 05b2 0028     		cmp	r0, #0
 30715 05b4 51D1     		bne	.L2141
 30716              	.LBB4523:
4554:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
 30717              		.loc 1 4554 6 is_stmt 1 view .LVU8275
 30718              	.LBB4524:
 30719              	.LBI4524:
1242:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 30720              		.loc 1 1242 15 view .LVU8276
 30721              	.LBB4525:
1243:src/xeq.c     **** }
 30722              		.loc 1 1243 2 view .LVU8277
1243:src/xeq.c     **** }
 30723              		.loc 1 1243 9 is_stmt 0 view .LVU8278
 30724 05b6 6420     		movs	r0, #100
 30725 05b8 FFF7FEFF 		bl	get_reg_n_int
 30726              	.LVL2406:
ARM GAS  /tmp/ccK8IvWa.s 			page 779


 30727 05bc 8146     		mov	r9, r0
 30728              	.LVL2407:
1243:src/xeq.c     **** }
 30729              		.loc 1 1243 9 view .LVU8279
 30730              	.LBE4525:
 30731              	.LBE4524:
4555:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 30732              		.loc 1 4555 6 is_stmt 1 view .LVU8280
4555:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 30733              		.loc 1 4555 24 is_stmt 0 view .LVU8281
 30734 05be 6520     		movs	r0, #101
 30735              	.LVL2408:
 30736              	.LBB4527:
 30737              	.LBB4526:
1243:src/xeq.c     **** }
 30738              		.loc 1 1243 9 view .LVU8282
 30739 05c0 0791     		str	r1, [sp, #28]
 30740              	.LVL2409:
1243:src/xeq.c     **** }
 30741              		.loc 1 1243 9 view .LVU8283
 30742              	.LBE4526:
 30743              	.LBE4527:
4555:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 30744              		.loc 1 4555 24 view .LVU8284
 30745 05c2 FFF7FEFF 		bl	get_reg_n_int
 30746              	.LVL2410:
 30747 05c6 0990     		str	r0, [sp, #36]
4556:src/xeq.c     **** 					x = fp(z, y, x);
 30748              		.loc 1 4556 24 view .LVU8285
 30749 05c8 6620     		movs	r0, #102
4555:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 30750              		.loc 1 4555 24 view .LVU8286
 30751 05ca 0891     		str	r1, [sp, #32]
 30752              	.LVL2411:
4556:src/xeq.c     **** 					x = fp(z, y, x);
 30753              		.loc 1 4556 6 is_stmt 1 view .LVU8287
4556:src/xeq.c     **** 					x = fp(z, y, x);
 30754              		.loc 1 4556 24 is_stmt 0 view .LVU8288
 30755 05cc FFF7FEFF 		bl	get_reg_n_int
 30756              	.LVL2412:
4557:src/xeq.c     **** 					setlastX();
 30757              		.loc 1 4557 6 is_stmt 1 view .LVU8289
4557:src/xeq.c     **** 					setlastX();
 30758              		.loc 1 4557 10 is_stmt 0 view .LVU8290
 30759 05d0 079B     		ldr	r3, [sp, #28]
 30760 05d2 CDF80090 		str	r9, [sp]
 30761 05d6 0193     		str	r3, [sp, #4]
 30762 05d8 DDE90832 		ldrd	r3, r2, [sp, #32]
 30763 05dc A847     		blx	r5
 30764              	.LVL2413:
4557:src/xeq.c     **** 					setlastX();
 30765              		.loc 1 4557 10 view .LVU8291
 30766 05de A24B     		ldr	r3, .L2409+4
 30767 05e0 0793     		str	r3, [sp, #28]
 30768 05e2 0546     		mov	r5, r0
 30769              	.LVL2414:
4557:src/xeq.c     **** 					setlastX();
ARM GAS  /tmp/ccK8IvWa.s 			page 780


 30770              		.loc 1 4557 10 view .LVU8292
 30771 05e4 8946     		mov	r9, r1
 30772              	.LVL2415:
4558:src/xeq.c     **** 					lower();
 30773              		.loc 1 4558 6 is_stmt 1 view .LVU8293
 30774              	.LBB4528:
 30775              	.LBI4528:
 759:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 30776              		.loc 1 759 6 view .LVU8294
 30777              	.LBB4529:
 760:src/xeq.c     **** }
 30778              		.loc 1 760 2 view .LVU8295
 30779 05e6 6C20     		movs	r0, #108
 30780              	.LVL2416:
 760:src/xeq.c     **** }
 30781              		.loc 1 760 2 is_stmt 0 view .LVU8296
 30782 05e8 6421     		movs	r1, #100
 30783              	.LVL2417:
 760:src/xeq.c     **** }
 30784              		.loc 1 760 2 view .LVU8297
 30785 05ea FFF7FEFF 		bl	copyreg_n
 30786              	.LVL2418:
 30787              	.LBE4529:
 30788              	.LBE4528:
4559:src/xeq.c     **** 					lower();
 30789              		.loc 1 4559 6 is_stmt 1 view .LVU8298
 30790 05ee FFF7FEFF 		bl	lower
 30791              	.LVL2419:
 30792              	.L2364:
4560:src/xeq.c     **** 					setX_int(x);
 30793              		.loc 1 4560 6 view .LVU8299
 30794 05f2 FFF7FEFF 		bl	lower
 30795              	.LVL2420:
4561:src/xeq.c     **** 				}
 30796              		.loc 1 4561 6 view .LVU8300
 30797 05f6 2846     		mov	r0, r5
 30798 05f8 4946     		mov	r1, r9
 30799 05fa FFF7FEFF 		bl	setX_int
 30800              	.LVL2421:
 30801 05fe 079B     		ldr	r3, [sp, #28]
 30802 0600 1A68     		ldr	r2, [r3]
 30803              	.LBE4523:
 30804              	.LBE4522:
 30805 0602 E1E5     		b	.L2144
 30806              	.LVL2422:
 30807              	.L2389:
4561:src/xeq.c     **** 				}
 30808              		.loc 1 4561 6 is_stmt 0 view .LVU8301
 30809              	.LBE4509:
 30810              	.LBE4508:
 30811              	.LBB4549:
 30812              	.LBB4237:
5015:src/xeq.c     **** 		return;
 30813              		.loc 1 5015 3 is_stmt 1 view .LVU8302
5015:src/xeq.c     **** 		return;
 30814              		.loc 1 5015 3 view .LVU8303
 30815              	.LBB4234:
ARM GAS  /tmp/ccK8IvWa.s 			page 781


 30816              	.LBI4229:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30817              		.loc 1 523 5 view .LVU8304
 30818              	.LBB4233:
 524:src/xeq.c     **** 		Error = e;
 30819              		.loc 1 524 2 view .LVU8305
 524:src/xeq.c     **** 		Error = e;
 30820              		.loc 1 524 12 is_stmt 0 view .LVU8306
 30821 0604 984B     		ldr	r3, .L2409+4
 30822 0606 DFF88092 		ldr	r9, .L2409+36
 30823              	.LVL2423:
 524:src/xeq.c     **** 		Error = e;
 30824              		.loc 1 524 12 view .LVU8307
 30825 060a 1868     		ldr	r0, [r3]
 524:src/xeq.c     **** 		Error = e;
 30826              		.loc 1 524 5 view .LVU8308
 30827 060c 0028     		cmp	r0, #0
 30828 060e 7FF44AAE 		bne	.L2267
 30829 0612 46E6     		b	.L2148
 30830              	.LVL2424:
 30831              	.L2250:
 524:src/xeq.c     **** 		Error = e;
 30832              		.loc 1 524 5 view .LVU8309
 30833              	.LBE4233:
 30834              	.LBE4234:
 30835              	.LBE4237:
 30836              	.LBE4549:
 30837              	.LBB4550:
 30838              	.LBB4433:
4535:src/xeq.c     **** }
 30839              		.loc 1 4535 3 is_stmt 1 view .LVU8310
4535:src/xeq.c     **** }
 30840              		.loc 1 4535 3 view .LVU8311
 30841              	.LBB4420:
 30842              	.LBI4420:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30843              		.loc 1 523 5 view .LVU8312
 30844              	.LBB4421:
 524:src/xeq.c     **** 		Error = e;
 30845              		.loc 1 524 2 view .LVU8313
 524:src/xeq.c     **** 		Error = e;
 30846              		.loc 1 524 12 is_stmt 0 view .LVU8314
 30847 0614 944B     		ldr	r3, .L2409+4
 30848 0616 1A68     		ldr	r2, [r3]
 524:src/xeq.c     **** 		Error = e;
 30849              		.loc 1 524 5 view .LVU8315
 30850 0618 002A     		cmp	r2, #0
 30851 061a 7FF471AD 		bne	.L2154
 30852              	.LVL2425:
 30853              	.LBB4422:
 30854              	.LBI4422:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30855              		.loc 1 523 5 is_stmt 1 view .LVU8316
 30856              	.LBB4423:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 30857              		.loc 1 525 3 view .LVU8317
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
ARM GAS  /tmp/ccK8IvWa.s 			page 782


 30858              		.loc 1 525 9 is_stmt 0 view .LVU8318
 30859 061e 0322     		movs	r2, #3
 30860 0620 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 30861              		.loc 1 526 3 is_stmt 1 view .LVU8319
 30862              	.LVL2426:
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 30863              		.loc 1 526 3 is_stmt 0 view .LVU8320
 30864              	.LBE4423:
 30865              	.LBE4422:
 30866              	.LBE4421:
 30867              	.LBE4420:
4535:src/xeq.c     **** }
 30868              		.loc 1 4535 3 is_stmt 1 view .LVU8321
 30869              	.LBE4433:
 30870              	.LBE4550:
5104:src/xeq.c     **** 		}
 30871              		.loc 1 5104 12 view .LVU8322
5114:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 30872              		.loc 1 5114 2 view .LVU8323
 30873 0622 6DE5     		b	.L2154
 30874              	.LVL2427:
 30875              	.L2214:
 30876              	.LBB4551:
 30877              	.LBB4205:
4382:src/xeq.c     **** 	if (idx != OP_rCLX)
 30878              		.loc 1 4382 3 view .LVU8324
4383:src/xeq.c     **** 		set_lift();
 30879              		.loc 1 4383 2 view .LVU8325
4383:src/xeq.c     **** 		set_lift();
 30880              		.loc 1 4383 5 is_stmt 0 view .LVU8326
 30881 0624 3F2D     		cmp	r5, #63
 30882 0626 7FF4CBAD 		bne	.L2223
 30883              	.L2216:
 30884              	.LVL2428:
4383:src/xeq.c     **** 		set_lift();
 30885              		.loc 1 4383 5 view .LVU8327
 30886              	.LBE4205:
 30887              	.LBE4551:
5104:src/xeq.c     **** 		}
 30888              		.loc 1 5104 12 is_stmt 1 view .LVU8328
5114:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 30889              		.loc 1 5114 2 view .LVU8329
 30890 062a 1046     		mov	r0, r2
 30891              	.L2369:
5114:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 30892              		.loc 1 5114 2 is_stmt 0 view .LVU8330
 30893 062c DFF85892 		ldr	r9, .L2409+36
 30894 0630 39E6     		b	.L2267
 30895              	.LVL2429:
 30896              	.L2161:
 30897              	.LBB4552:
 30898              	.LBB4154:
4970:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 30899              		.loc 1 4970 7 is_stmt 1 view .LVU8331
4970:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 30900              		.loc 1 4970 23 is_stmt 0 view .LVU8332
ARM GAS  /tmp/ccK8IvWa.s 			page 783


 30901 0632 079B     		ldr	r3, [sp, #28]
 30902 0634 1A44     		add	r2, r2, r3
 30903 0636 5379     		ldrb	r3, [r2, #5]	@ zero_extendqisi2
4970:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 30904              		.loc 1 4970 10 view .LVU8333
 30905 0638 DB06     		lsls	r3, r3, #27
 30906 063a 00F1C380 		bmi	.L2393
 30907              	.L2163:
 30908              	.LBB4135:
4976:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
 30909              		.loc 1 4976 3 is_stmt 1 view .LVU8334
 30910              	.LVL2430:
4977:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
 30911              		.loc 1 4977 3 view .LVU8335
 30912              	.LBB4136:
 30913              	.LBI4136:
4234:src/xeq.c     **** {
 30914              		.loc 1 4234 24 view .LVU8336
 30915              	.LBB4137:
4236:src/xeq.c     **** 	if (xp < xrom)
 30916              		.loc 1 4236 2 view .LVU8337
4236:src/xeq.c     **** 	if (xp < xrom)
 30917              		.loc 1 4236 59 is_stmt 0 view .LVU8338
 30918 063e 089A     		ldr	r2, [sp, #32]
4237:src/xeq.c     **** 		return NULL;
 30919              		.loc 1 4237 5 view .LVU8339
 30920 0640 8A4B     		ldr	r3, .L2409+8
4236:src/xeq.c     **** 	if (xp < xrom)
 30921              		.loc 1 4236 59 view .LVU8340
 30922 0642 22F00102 		bic	r2, r2, #1
 30923              	.LVL2431:
4237:src/xeq.c     **** 		return NULL;
 30924              		.loc 1 4237 2 is_stmt 1 view .LVU8341
4237:src/xeq.c     **** 		return NULL;
 30925              		.loc 1 4237 5 is_stmt 0 view .LVU8342
 30926 0646 9A42     		cmp	r2, r3
 30927 0648 5FD2     		bcs	.L2394
 30928              	.LVL2432:
 30929              	.L2165:
4237:src/xeq.c     **** 		return NULL;
 30930              		.loc 1 4237 5 view .LVU8343
 30931              	.LBE4137:
 30932              	.LBE4136:
4999:src/xeq.c     **** 		}
 30933              		.loc 1 4999 4 is_stmt 1 view .LVU8344
 30934 064a 0846     		mov	r0, r1
 30935 064c 089B     		ldr	r3, [sp, #32]
 30936 064e 4946     		mov	r1, r9
 30937              	.LVL2433:
4999:src/xeq.c     **** 		}
 30938              		.loc 1 4999 4 is_stmt 0 view .LVU8345
 30939 0650 9847     		blx	r3
 30940              	.LVL2434:
5001:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 30941              		.loc 1 5001 3 is_stmt 1 view .LVU8346
5001:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 30942              		.loc 1 5001 6 is_stmt 0 view .LVU8347
ARM GAS  /tmp/ccK8IvWa.s 			page 784


 30943 0652 B9F1840F 		cmp	r9, #132
 30944 0656 7FF4E9AD 		bne	.L2362
 30945              	.LVL2435:
 30946              	.L2141:
5001:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 30947              		.loc 1 5001 6 view .LVU8348
 30948 065a 834B     		ldr	r3, .L2409+4
 30949 065c 1A68     		ldr	r2, [r3]
 30950 065e B3E5     		b	.L2144
 30951              	.LVL2436:
 30952              	.L2152:
5001:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 30953              		.loc 1 5001 6 view .LVU8349
 30954              	.LBE4135:
 30955              	.LBB4144:
4942:src/xeq.c     **** 			if ((regval >> 32) != 0)
 30956              		.loc 1 4942 4 is_stmt 1 view .LVU8350
4942:src/xeq.c     **** 			if ((regval >> 32) != 0)
 30957              		.loc 1 4942 13 is_stmt 0 view .LVU8351
 30958 0660 0846     		mov	r0, r1
 30959 0662 3BA9     		add	r1, sp, #236
 30960              	.LVL2437:
4942:src/xeq.c     **** 			if ((regval >> 32) != 0)
 30961              		.loc 1 4942 13 view .LVU8352
 30962 0664 FFF7FEFF 		bl	get_reg_n_int_sgn
 30963              	.LVL2438:
4943:src/xeq.c     **** 				goto range;
 30964              		.loc 1 4943 16 view .LVU8353
 30965 0668 0023     		movs	r3, #0
 30966 066a 0A91     		str	r1, [sp, #40]
 30967              	.LVL2439:
4943:src/xeq.c     **** 				goto range;
 30968              		.loc 1 4943 16 view .LVU8354
 30969 066c 0B93     		str	r3, [sp, #44]
 30970              	.LVL2440:
4943:src/xeq.c     **** 				goto range;
 30971              		.loc 1 4943 4 is_stmt 1 view .LVU8355
4943:src/xeq.c     **** 				goto range;
 30972              		.loc 1 4943 7 is_stmt 0 view .LVU8356
 30973 066e DDE90A23 		ldrd	r2, [sp, #40]
 30974 0672 1343     		orrs	r3, r2, r3
 30975 0674 15D1     		bne	.L2156
4945:src/xeq.c     **** 			if (argcmds[cmd].local && sgn) {
 30976              		.loc 1 4945 4 is_stmt 1 view .LVU8357
4946:src/xeq.c     **** 				// negative arguments address local registers or flags
 30977              		.loc 1 4946 7 is_stmt 0 view .LVU8358
 30978 0676 15F0080F 		tst	r5, #8
 30979 067a 7D4A     		ldr	r2, .L2409+12
4945:src/xeq.c     **** 			if (argcmds[cmd].local && sgn) {
 30980              		.loc 1 4945 8 view .LVU8359
 30981 067c 0146     		mov	r1, r0
 30982              	.LVL2441:
4946:src/xeq.c     **** 				// negative arguments address local registers or flags
 30983              		.loc 1 4946 4 is_stmt 1 view .LVU8360
4946:src/xeq.c     **** 				// negative arguments address local registers or flags
 30984              		.loc 1 4946 7 is_stmt 0 view .LVU8361
 30985 067e 03D0     		beq	.L2150
ARM GAS  /tmp/ccK8IvWa.s 			page 785


4946:src/xeq.c     **** 				// negative arguments address local registers or flags
 30986              		.loc 1 4946 27 view .LVU8362
 30987 0680 3B9B     		ldr	r3, [sp, #236]
 30988 0682 0BB1     		cbz	r3, .L2150
4948:src/xeq.c     **** 			}
 30989              		.loc 1 4948 5 is_stmt 1 view .LVU8363
4948:src/xeq.c     **** 			}
 30990              		.loc 1 4948 9 is_stmt 0 view .LVU8364
 30991 0684 00F17001 		add	r1, r0, #112
 30992              	.LVL2442:
 30993              	.L2150:
4948:src/xeq.c     **** 			}
 30994              		.loc 1 4948 9 view .LVU8365
 30995              	.LBE4144:
4956:src/xeq.c     **** 		// Range checking for registers against variable boundary
 30996              		.loc 1 4956 2 is_stmt 1 view .LVU8366
4956:src/xeq.c     **** 		// Range checking for registers against variable boundary
 30997              		.loc 1 4956 18 is_stmt 0 view .LVU8367
 30998 0688 079B     		ldr	r3, [sp, #28]
 30999 068a D318     		adds	r3, r2, r3
 31000 068c 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
4956:src/xeq.c     **** 		// Range checking for registers against variable boundary
 31001              		.loc 1 4956 5 view .LVU8368
 31002 068e 9D07     		lsls	r5, r3, #30
 31003 0690 32D5     		bpl	.L2158
4958:src/xeq.c     **** 	}
 31004              		.loc 1 4958 3 is_stmt 1 view .LVU8369
4958:src/xeq.c     **** 	}
 31005              		.loc 1 4958 9 is_stmt 0 view .LVU8370
 31006 0692 4846     		mov	r0, r9
 31007 0694 0991     		str	r1, [sp, #36]
 31008              	.LVL2443:
4958:src/xeq.c     **** 	}
 31009              		.loc 1 4958 9 view .LVU8371
 31010 0696 FFF7FEFF 		bl	get_reg_limit
 31011              	.LVL2444:
4958:src/xeq.c     **** 	}
 31012              		.loc 1 4958 9 view .LVU8372
 31013 069a 0999     		ldr	r1, [sp, #36]
 31014 069c 744A     		ldr	r2, .L2409+12
 31015              	.LVL2445:
 31016              	.L2159:
4966:src/xeq.c     **** 		// Argument is too large
 31017              		.loc 1 4966 2 is_stmt 1 view .LVU8373
4966:src/xeq.c     **** 		// Argument is too large
 31018              		.loc 1 4966 5 is_stmt 0 view .LVU8374
 31019 069e 8142     		cmp	r1, r0
 31020 06a0 C7D9     		bls	.L2161
 31021              	.LVL2446:
 31022              	.L2156:
4968:src/xeq.c     **** 	}
 31023              		.loc 1 4968 9 is_stmt 1 view .LVU8375
 31024              	.LBB4145:
 31025              	.LBI4145:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31026              		.loc 1 523 5 view .LVU8376
 31027              	.LBB4146:
ARM GAS  /tmp/ccK8IvWa.s 			page 786


 524:src/xeq.c     **** 		Error = e;
 31028              		.loc 1 524 2 view .LVU8377
 524:src/xeq.c     **** 		Error = e;
 31029              		.loc 1 524 12 is_stmt 0 view .LVU8378
 31030 06a2 714B     		ldr	r3, .L2409+4
 31031 06a4 1868     		ldr	r0, [r3]
 524:src/xeq.c     **** 		Error = e;
 31032              		.loc 1 524 5 view .LVU8379
 31033 06a6 0028     		cmp	r0, #0
 31034 06a8 C0D1     		bne	.L2369
 31035              	.LVL2447:
 31036              	.LBB4147:
 31037              	.LBI4147:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31038              		.loc 1 523 5 is_stmt 1 view .LVU8380
 31039              	.LBB4148:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 31040              		.loc 1 525 3 view .LVU8381
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 31041              		.loc 1 525 9 is_stmt 0 view .LVU8382
 31042 06aa 0820     		movs	r0, #8
 31043 06ac DFF8D891 		ldr	r9, .L2409+36
 31044              	.LVL2448:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 31045              		.loc 1 525 9 view .LVU8383
 31046 06b0 1860     		str	r0, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 31047              		.loc 1 526 3 is_stmt 1 view .LVU8384
 31048 06b2 F8E5     		b	.L2267
 31049              	.LVL2449:
 31050              	.L2392:
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 31051              		.loc 1 526 3 is_stmt 0 view .LVU8385
 31052              	.LBE4148:
 31053              	.LBE4147:
 31054              	.LBE4146:
 31055              	.LBE4145:
 31056              	.LBE4154:
 31057              	.LBE4552:
5133:src/xeq.c     **** 					// Restore the global return stack
 31058              		.loc 1 5133 5 is_stmt 1 view .LVU8386
5133:src/xeq.c     **** 					// Restore the global return stack
 31059              		.loc 1 5133 8 is_stmt 0 view .LVU8387
 31060 06b4 95F90100 		ldrsb	r0, [r5, #1]
5133:src/xeq.c     **** 					// Restore the global return stack
 31061              		.loc 1 5133 9 view .LVU8388
 31062 06b8 6A78     		ldrb	r2, [r5, #1]	@ zero_extendqisi2
5133:src/xeq.c     **** 					// Restore the global return stack
 31063              		.loc 1 5133 8 view .LVU8389
 31064 06ba 8842     		cmp	r0, r1
 31065 06bc BFF66EAE 		bge	.L2257
5135:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 31066              		.loc 1 5135 6 is_stmt 1 view .LVU8390
5135:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 31067              		.loc 1 5135 13 is_stmt 0 view .LVU8391
 31068 06c0 6C48     		ldr	r0, .L2409+16
 31069 06c2 AF68     		ldr	r7, [r5, #8]
ARM GAS  /tmp/ccK8IvWa.s 			page 787


5136:src/xeq.c     **** 					// Restore private stack to normal stack
 31070              		.loc 1 5136 16 view .LVU8392
 31071 06c4 B5F80CC0 		ldrh	ip, [r5, #12]
5135:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 31072              		.loc 1 5135 13 view .LVU8393
 31073 06c8 0760     		str	r7, [r0]
5136:src/xeq.c     **** 					// Restore private stack to normal stack
 31074              		.loc 1 5136 6 is_stmt 1 view .LVU8394
5138:src/xeq.c     **** 						// Need space for double precision stack
 31075              		.loc 1 5138 9 is_stmt 0 view .LVU8395
 31076 06ca 12F00807 		ands	r7, r2, #8
5136:src/xeq.c     **** 					// Restore private stack to normal stack
 31077              		.loc 1 5136 16 view .LVU8396
 31078 06ce A6F8E2C7 		strh	ip, [r6, #2018]	@ movhi
5138:src/xeq.c     **** 						// Need space for double precision stack
 31079              		.loc 1 5138 6 is_stmt 1 view .LVU8397
5138:src/xeq.c     **** 						// Need space for double precision stack
 31080              		.loc 1 5138 9 is_stmt 0 view .LVU8398
 31081 06d2 00F09A81 		beq	.L2258
5142:src/xeq.c     **** 					if (Error == ERR_NONE) {
 31082              		.loc 1 5142 6 is_stmt 1 view .LVU8399
5142:src/xeq.c     **** 					if (Error == ERR_NONE) {
 31083              		.loc 1 5142 20 is_stmt 0 view .LVU8400
 31084 06d6 61F3C712 		bfi	r2, r1, #7, #1
 31085 06da 6A70     		strb	r2, [r5, #1]
5143:src/xeq.c     **** 						UState.mode_double = 1;
 31086              		.loc 1 5143 6 is_stmt 1 view .LVU8401
 31087              	.LVL2450:
 31088              	.L2259:
5144:src/xeq.c     **** 						xcopy(get_reg_n(regX_idx), XromStack, sizeof(XromStack));
 31089              		.loc 1 5144 7 view .LVU8402
5144:src/xeq.c     **** 						xcopy(get_reg_n(regX_idx), XromStack, sizeof(XromStack));
 31090              		.loc 1 5144 26 is_stmt 0 view .LVU8403
 31091 06dc 96F8E937 		ldrb	r3, [r6, #2025]	@ zero_extendqisi2
5145:src/xeq.c     **** 					}
 31092              		.loc 1 5145 13 view .LVU8404
 31093 06e0 6420     		movs	r0, #100
5144:src/xeq.c     **** 						xcopy(get_reg_n(regX_idx), XromStack, sizeof(XromStack));
 31094              		.loc 1 5144 26 view .LVU8405
 31095 06e2 43F04003 		orr	r3, r3, #64
 31096 06e6 86F8E937 		strb	r3, [r6, #2025]
5145:src/xeq.c     **** 					}
 31097              		.loc 1 5145 7 is_stmt 1 view .LVU8406
5145:src/xeq.c     **** 					}
 31098              		.loc 1 5145 13 is_stmt 0 view .LVU8407
 31099 06ea FFF7FEFF 		bl	get_reg_n
 31100              	.LVL2451:
5145:src/xeq.c     **** 					}
 31101              		.loc 1 5145 7 view .LVU8408
 31102 06ee 6249     		ldr	r1, .L2409+20
 31103 06f0 C022     		movs	r2, #192
 31104 06f2 FFF7FEFF 		bl	xcopy
 31105              	.LVL2452:
 31106 06f6 51E6     		b	.L2257
 31107              	.LVL2453:
 31108              	.L2158:
 31109              	.LBB4553:
ARM GAS  /tmp/ccK8IvWa.s 			page 788


 31110              	.LBB4155:
4960:src/xeq.c     **** 		if (LocalRegs == 0)
 31111              		.loc 1 4960 7 is_stmt 1 view .LVU8409
4960:src/xeq.c     **** 		if (LocalRegs == 0)
 31112              		.loc 1 4960 10 is_stmt 0 view .LVU8410
 31113 06f8 5D06     		lsls	r5, r3, #25
 31114 06fa 61D5     		bpl	.L2395
4961:src/xeq.c     **** 			lim = NUMFLG - 1;
 31115              		.loc 1 4961 3 is_stmt 1 view .LVU8411
4961:src/xeq.c     **** 			lim = NUMFLG - 1;
 31116              		.loc 1 4961 6 is_stmt 0 view .LVU8412
 31117 06fc B6F9DE37 		ldrsh	r3, [r6, #2014]
4964:src/xeq.c     **** 	}
 31118              		.loc 1 4964 8 view .LVU8413
 31119 0700 002B     		cmp	r3, #0
 31120 0702 0CBF     		ite	eq
 31121 0704 6F20     		moveq	r0, #111
 31122 0706 7F20     		movne	r0, #127
 31123 0708 C9E7     		b	.L2159
 31124              	.LVL2454:
 31125              	.L2394:
 31126              	.LBB4149:
 31127              	.LBB4139:
 31128              	.LBB4138:
4241:src/xeq.c     **** 		return NULL;
 31129              		.loc 1 4241 2 is_stmt 1 view .LVU8414
4241:src/xeq.c     **** 		return NULL;
 31130              		.loc 1 4241 17 is_stmt 0 view .LVU8415
 31131 070a 5C48     		ldr	r0, .L2409+24
 31132              	.LVL2455:
4241:src/xeq.c     **** 		return NULL;
 31133              		.loc 1 4241 17 view .LVU8416
 31134 070c 0088     		ldrh	r0, [r0]
 31135 070e 03EB4003 		add	r3, r3, r0, lsl #1
4241:src/xeq.c     **** 		return NULL;
 31136              		.loc 1 4241 5 view .LVU8417
 31137 0712 9A42     		cmp	r2, r3
 31138 0714 99D2     		bcs	.L2165
 31139              	.LVL2456:
4241:src/xeq.c     **** 		return NULL;
 31140              		.loc 1 4241 5 view .LVU8418
 31141              	.LBE4138:
 31142              	.LBE4139:
4977:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
 31143              		.loc 1 4977 6 view .LVU8419
 31144 0716 002A     		cmp	r2, #0
 31145 0718 97D0     		beq	.L2165
4989:src/xeq.c     **** 			if (XromUserPc == 0)
 31146              		.loc 1 4989 4 is_stmt 1 view .LVU8420
 31147              	.LVL2457:
 31148              	.LBB4140:
 31149              	.LBI4140:
1996:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 31150              		.loc 1 1996 14 view .LVU8421
 31151              	.LBB4141:
1997:src/xeq.c     **** }
 31152              		.loc 1 1997 2 view .LVU8422
ARM GAS  /tmp/ccK8IvWa.s 			page 789


1997:src/xeq.c     **** }
 31153              		.loc 1 1997 9 is_stmt 0 view .LVU8423
 31154 071a B6F8E007 		ldrh	r0, [r6, #2016]
 31155 071e 41F4C441 		orr	r1, r1, #25088
 31156              	.LVL2458:
1997:src/xeq.c     **** }
 31157              		.loc 1 1997 9 view .LVU8424
 31158 0722 0322     		movs	r2, #3
 31159 0724 FFF7FEFF 		bl	find_opcode_from
 31160              	.LVL2459:
1997:src/xeq.c     **** }
 31161              		.loc 1 1997 9 view .LVU8425
 31162              	.LBE4141:
 31163              	.LBE4140:
4989:src/xeq.c     **** 			if (XromUserPc == 0)
 31164              		.loc 1 4989 15 view .LVU8426
 31165 0728 554B     		ldr	r3, .L2409+28
 31166              	.LVL2460:
4989:src/xeq.c     **** 			if (XromUserPc == 0)
 31167              		.loc 1 4989 15 view .LVU8427
 31168 072a 1860     		str	r0, [r3]
4990:src/xeq.c     **** 				return;
 31169              		.loc 1 4990 4 is_stmt 1 view .LVU8428
4990:src/xeq.c     **** 				return;
 31170              		.loc 1 4990 7 is_stmt 0 view .LVU8429
 31171 072c 0028     		cmp	r0, #0
 31172 072e 94D0     		beq	.L2141
4992:src/xeq.c     **** 				clrretstk();
 31173              		.loc 1 4992 4 is_stmt 1 view .LVU8430
4992:src/xeq.c     **** 				clrretstk();
 31174              		.loc 1 4992 8 is_stmt 0 view .LVU8431
 31175 0730 DFF85491 		ldr	r9, .L2409+36
 31176              	.LVL2461:
4992:src/xeq.c     **** 				clrretstk();
 31177              		.loc 1 4992 7 view .LVU8432
 31178 0734 D9F80030 		ldr	r3, [r9]
 31179 0738 1BB9     		cbnz	r3, .L2167
4993:src/xeq.c     **** #endif
 31180              		.loc 1 4993 5 is_stmt 1 view .LVU8433
 31181              	.LBB4142:
 31182              	.LBI4142:
1395:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 31183              		.loc 1 1395 6 view .LVU8434
 31184              	.LBB4143:
1396:src/xeq.c     **** }
 31185              		.loc 1 1396 2 view .LVU8435
1396:src/xeq.c     **** }
 31186              		.loc 1 1396 24 is_stmt 0 view .LVU8436
 31187 073a A6F8DE37 		strh	r3, [r6, #2014]	@ movhi
1396:src/xeq.c     **** }
 31188              		.loc 1 1396 12 view .LVU8437
 31189 073e A6F8E237 		strh	r3, [r6, #2018]	@ movhi
 31190              	.L2167:
 31191              	.LBE4143:
 31192              	.LBE4142:
4995:src/xeq.c     **** 			return;
 31193              		.loc 1 4995 4 is_stmt 1 view .LVU8438
ARM GAS  /tmp/ccK8IvWa.s 			page 790


 31194 0742 494B     		ldr	r3, .L2409+4
 31195 0744 0898     		ldr	r0, [sp, #32]
 31196 0746 0793     		str	r3, [sp, #28]
 31197 0748 FFF7FEFF 		bl	dispatch_xrom
 31198              	.LVL2462:
4996:src/xeq.c     **** 		}
 31199              		.loc 1 4996 4 view .LVU8439
 31200 074c 079B     		ldr	r3, [sp, #28]
 31201 074e 1A68     		ldr	r2, [r3]
 31202 0750 3AE5     		b	.L2144
 31203              	.LVL2463:
 31204              	.L2151:
4996:src/xeq.c     **** 		}
 31205              		.loc 1 4996 4 is_stmt 0 view .LVU8440
 31206              	.LBE4149:
4953:src/xeq.c     **** 		}
 31207              		.loc 1 4953 4 is_stmt 1 view .LVU8441
4953:src/xeq.c     **** 		}
 31208              		.loc 1 4953 8 is_stmt 0 view .LVU8442
 31209 0752 41F08001 		orr	r1, r1, #128
 31210              	.LVL2464:
4953:src/xeq.c     **** 		}
 31211              		.loc 1 4953 8 view .LVU8443
 31212 0756 97E7     		b	.L2150
 31213              	.LVL2465:
 31214              	.L2391:
4953:src/xeq.c     **** 		}
 31215              		.loc 1 4953 8 view .LVU8444
 31216              	.LBE4155:
 31217              	.LBE4553:
 31218              	.LBB4554:
 31219              	.LBB4353:
4474:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
 31220              		.loc 1 4474 3 is_stmt 1 view .LVU8445
4474:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
 31221              		.loc 1 4474 7 is_stmt 0 view .LVU8446
 31222 0758 96F8E837 		ldrb	r3, [r6, #2024]	@ zero_extendqisi2
4474:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
 31223              		.loc 1 4474 6 view .LVU8447
 31224 075c DA07     		lsls	r2, r3, #31
 31225 075e 40F15D81 		bpl	.L2233
4475:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 31226              		.loc 1 4475 4 is_stmt 1 view .LVU8448
4475:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 31227              		.loc 1 4475 10 is_stmt 0 view .LVU8449
 31228 0762 484B     		ldr	r3, .L2409+32
 31229 0764 05EB4505 		add	r5, r5, r5, lsl #1
 31230              	.LVL2466:
4475:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 31231              		.loc 1 4475 10 view .LVU8450
 31232 0768 03EBC505 		add	r5, r3, r5, lsl #3
 31233 076c AD68     		ldr	r5, [r5, #8]
4475:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 31234              		.loc 1 4475 7 view .LVU8451
 31235 076e 002D     		cmp	r5, #0
 31236 0770 00F0B680 		beq	.L2243
 31237              	.LBB4325:
ARM GAS  /tmp/ccK8IvWa.s 			page 791


4476:src/xeq.c     **** 				if (dispatch_xrom(fp))
 31238              		.loc 1 4476 5 is_stmt 1 view .LVU8452
 31239              	.LVL2467:
4477:src/xeq.c     **** 					return;
 31240              		.loc 1 4477 5 view .LVU8453
4477:src/xeq.c     **** 					return;
 31241              		.loc 1 4477 9 is_stmt 0 view .LVU8454
 31242 0774 2846     		mov	r0, r5
 31243 0776 FFF7FEFF 		bl	dispatch_xrom
 31244              	.LVL2468:
4477:src/xeq.c     **** 					return;
 31245              		.loc 1 4477 8 view .LVU8455
 31246 077a 0028     		cmp	r0, #0
 31247 077c 7FF46DAF 		bne	.L2141
 31248              	.LBB4326:
4480:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
 31249              		.loc 1 4480 6 is_stmt 1 view .LVU8456
 31250              	.LBB4327:
 31251              	.LBI4327:
1242:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 31252              		.loc 1 1242 15 view .LVU8457
 31253              	.LBB4328:
1243:src/xeq.c     **** }
 31254              		.loc 1 1243 2 view .LVU8458
1243:src/xeq.c     **** }
 31255              		.loc 1 1243 9 is_stmt 0 view .LVU8459
 31256 0780 6420     		movs	r0, #100
 31257 0782 FFF7FEFF 		bl	get_reg_n_int
 31258              	.LVL2469:
 31259 0786 0890     		str	r0, [sp, #32]
 31260              	.LBE4328:
 31261              	.LBE4327:
4481:src/xeq.c     **** 					x = fp(y, x);
 31262              		.loc 1 4481 24 view .LVU8460
 31263 0788 6520     		movs	r0, #101
 31264              	.LBB4330:
 31265              	.LBB4329:
1243:src/xeq.c     **** }
 31266              		.loc 1 1243 9 view .LVU8461
 31267 078a 0791     		str	r1, [sp, #28]
 31268              	.LVL2470:
1243:src/xeq.c     **** }
 31269              		.loc 1 1243 9 view .LVU8462
 31270              	.LBE4329:
 31271              	.LBE4330:
4481:src/xeq.c     **** 					x = fp(y, x);
 31272              		.loc 1 4481 6 is_stmt 1 view .LVU8463
4481:src/xeq.c     **** 					x = fp(y, x);
 31273              		.loc 1 4481 24 is_stmt 0 view .LVU8464
 31274 078c FFF7FEFF 		bl	get_reg_n_int
 31275              	.LVL2471:
4482:src/xeq.c     **** 					setlastX();
 31276              		.loc 1 4482 6 is_stmt 1 view .LVU8465
4482:src/xeq.c     **** 					setlastX();
 31277              		.loc 1 4482 10 is_stmt 0 view .LVU8466
 31278 0790 DDE90732 		ldrd	r3, r2, [sp, #28]
 31279 0794 A847     		blx	r5
ARM GAS  /tmp/ccK8IvWa.s 			page 792


 31280              	.LVL2472:
4482:src/xeq.c     **** 					setlastX();
 31281              		.loc 1 4482 10 view .LVU8467
 31282 0796 344B     		ldr	r3, .L2409+4
 31283 0798 0793     		str	r3, [sp, #28]
 31284              	.LVL2473:
4482:src/xeq.c     **** 					setlastX();
 31285              		.loc 1 4482 10 view .LVU8468
 31286 079a 0546     		mov	r5, r0
 31287              	.LVL2474:
4482:src/xeq.c     **** 					setlastX();
 31288              		.loc 1 4482 10 view .LVU8469
 31289 079c 8946     		mov	r9, r1
 31290              	.LVL2475:
4483:src/xeq.c     **** 					lower();
 31291              		.loc 1 4483 6 is_stmt 1 view .LVU8470
 31292              	.LBB4331:
 31293              	.LBI4331:
 759:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 31294              		.loc 1 759 6 view .LVU8471
 31295              	.LBB4332:
 760:src/xeq.c     **** }
 31296              		.loc 1 760 2 view .LVU8472
 31297 079e 6C20     		movs	r0, #108
 31298              	.LVL2476:
 760:src/xeq.c     **** }
 31299              		.loc 1 760 2 is_stmt 0 view .LVU8473
 31300 07a0 6421     		movs	r1, #100
 31301              	.LVL2477:
 760:src/xeq.c     **** }
 31302              		.loc 1 760 2 view .LVU8474
 31303 07a2 FFF7FEFF 		bl	copyreg_n
 31304              	.LVL2478:
 31305              	.LBE4332:
 31306              	.LBE4331:
4484:src/xeq.c     **** 					setX_int(x);
 31307              		.loc 1 4484 6 is_stmt 1 view .LVU8475
 31308 07a6 24E7     		b	.L2364
 31309              	.LVL2479:
 31310              	.L2212:
4484:src/xeq.c     **** 					setX_int(x);
 31311              		.loc 1 4484 6 is_stmt 0 view .LVU8476
 31312              	.LBE4326:
 31313              	.LBE4325:
 31314              	.LBE4353:
 31315              	.LBE4554:
 31316              	.LBB4555:
 31317              	.LBB4206:
4382:src/xeq.c     **** 	if (idx != OP_rCLX)
 31318              		.loc 1 4382 3 is_stmt 1 view .LVU8477
4382:src/xeq.c     **** 	if (idx != OP_rCLX)
 31319              		.loc 1 4382 3 view .LVU8478
 31320              	.LBB4177:
 31321              	.LBI4177:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31322              		.loc 1 523 5 view .LVU8479
 31323              	.LBB4178:
ARM GAS  /tmp/ccK8IvWa.s 			page 793


 524:src/xeq.c     **** 		Error = e;
 31324              		.loc 1 524 2 view .LVU8480
 524:src/xeq.c     **** 		Error = e;
 31325              		.loc 1 524 12 is_stmt 0 view .LVU8481
 31326 07a8 2F4B     		ldr	r3, .L2409+4
 31327 07aa 1A68     		ldr	r2, [r3]
 524:src/xeq.c     **** 		Error = e;
 31328              		.loc 1 524 5 view .LVU8482
 31329 07ac 002A     		cmp	r2, #0
 31330 07ae 7FF407AD 		bne	.L2223
 31331              	.LVL2480:
 31332              	.LBB4179:
 31333              	.LBI4179:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31334              		.loc 1 523 5 is_stmt 1 view .LVU8483
 31335              	.LBB4180:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 31336              		.loc 1 525 3 view .LVU8484
 31337              	.LBE4180:
 31338              	.LBE4179:
 31339              	.LBE4178:
 31340              	.LBE4177:
 31341              	.LBB4187:
 31342              	.LBB4173:
 735:src/xeq.c     **** }
 31343              		.loc 1 735 23 is_stmt 0 view .LVU8485
 31344 07b2 E17D     		ldrb	r1, [r4, #23]	@ zero_extendqisi2
 31345              	.LBE4173:
 31346              	.LBE4187:
 31347              	.LBB4188:
 31348              	.LBB4185:
 31349              	.LBB4183:
 31350              	.LBB4181:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 31351              		.loc 1 525 9 view .LVU8486
 31352 07b4 0322     		movs	r2, #3
 31353              	.LBE4181:
 31354              	.LBE4183:
 31355              	.LBE4185:
 31356              	.LBE4188:
 31357              	.LBB4189:
 31358              	.LBB4174:
 735:src/xeq.c     **** }
 31359              		.loc 1 735 23 view .LVU8487
 31360 07b6 41F04001 		orr	r1, r1, #64
 31361 07ba E175     		strb	r1, [r4, #23]
 31362              	.LBE4174:
 31363              	.LBE4189:
 31364              	.LBB4190:
 31365              	.LBB4186:
 31366              	.LBB4184:
 31367              	.LBB4182:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 31368              		.loc 1 525 9 view .LVU8488
 31369 07bc 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 31370              		.loc 1 526 3 is_stmt 1 view .LVU8489
ARM GAS  /tmp/ccK8IvWa.s 			page 794


 31371              	.LVL2481:
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 31372              		.loc 1 526 3 is_stmt 0 view .LVU8490
 31373              	.LBE4182:
 31374              	.LBE4184:
 31375              	.LBE4186:
 31376              	.LBE4190:
4384:src/xeq.c     **** }
 31377              		.loc 1 4384 3 is_stmt 1 view .LVU8491
 31378              	.LBB4191:
 734:src/xeq.c     ****     State2.state_lift = 1;
 31379              		.loc 1 734 6 view .LVU8492
 31380              	.LBB4175:
 735:src/xeq.c     **** }
 31381              		.loc 1 735 5 view .LVU8493
 735:src/xeq.c     **** }
 31382              		.loc 1 735 5 is_stmt 0 view .LVU8494
 31383              	.LBE4175:
 31384              	.LBE4191:
 31385              	.LBE4206:
 31386              	.LBE4555:
5104:src/xeq.c     **** 		}
 31387              		.loc 1 5104 12 is_stmt 1 view .LVU8495
5114:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 31388              		.loc 1 5114 2 view .LVU8496
 31389 07be 9FE4     		b	.L2154
 31390              	.LVL2482:
 31391              	.L2395:
 31392              	.LBB4556:
 31393              	.LBB4156:
4916:src/xeq.c     **** 
 31394              		.loc 1 4916 15 is_stmt 0 view .LVU8497
 31395 07c0 0998     		ldr	r0, [sp, #36]
 31396 07c2 6CE7     		b	.L2159
 31397              	.LVL2483:
 31398              	.L2393:
4970:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 31399              		.loc 1 4970 30 view .LVU8498
 31400 07c4 A1F16303 		sub	r3, r1, #99
 31401 07c8 0C2B     		cmp	r3, #12
 31402 07ca 3FF638AF 		bhi	.L2163
4970:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 31403              		.loc 1 4970 69 view .LVU8499
 31404 07ce CD07     		lsls	r5, r1, #31
 31405 07d0 7FF535AF 		bpl	.L2163
4972:src/xeq.c     **** 	}
 31406              		.loc 1 4972 3 is_stmt 1 view .LVU8500
 31407              	.LVL2484:
 31408              	.LBB4150:
 31409              	.LBI4150:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31410              		.loc 1 523 5 view .LVU8501
 31411              	.LBB4151:
 524:src/xeq.c     **** 		Error = e;
 31412              		.loc 1 524 2 view .LVU8502
 524:src/xeq.c     **** 		Error = e;
 31413              		.loc 1 524 12 is_stmt 0 view .LVU8503
ARM GAS  /tmp/ccK8IvWa.s 			page 795


 31414 07d4 244B     		ldr	r3, .L2409+4
 31415 07d6 1868     		ldr	r0, [r3]
 31416              	.LVL2485:
 524:src/xeq.c     **** 		Error = e;
 31417              		.loc 1 524 5 view .LVU8504
 31418 07d8 0028     		cmp	r0, #0
 31419 07da 7FF427AF 		bne	.L2369
 31420              	.LVL2486:
 31421              	.LBB4152:
 31422              	.LBI4152:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31423              		.loc 1 523 5 is_stmt 1 view .LVU8505
 31424              	.LBB4153:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 31425              		.loc 1 525 3 view .LVU8506
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 31426              		.loc 1 525 9 is_stmt 0 view .LVU8507
 31427 07de 0720     		movs	r0, #7
 31428 07e0 DFF8A490 		ldr	r9, .L2409+36
 31429              	.LVL2487:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 31430              		.loc 1 525 9 view .LVU8508
 31431 07e4 1860     		str	r0, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 31432              		.loc 1 526 3 is_stmt 1 view .LVU8509
 31433 07e6 5EE5     		b	.L2267
 31434              	.LVL2488:
 31435              	.L2390:
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 31436              		.loc 1 526 3 is_stmt 0 view .LVU8510
 31437              	.LBE4153:
 31438              	.LBE4152:
 31439              	.LBE4151:
 31440              	.LBE4150:
 31441              	.LBE4156:
 31442              	.LBE4556:
 31443              	.LBB4557:
 31444              	.LBB4238:
 31445              	.LBB4235:
5023:src/xeq.c     **** 			if (XromUserPc != 0) {
 31446              		.loc 1 5023 4 is_stmt 1 view .LVU8511
5023:src/xeq.c     **** 			if (XromUserPc != 0) {
 31447              		.loc 1 5023 17 is_stmt 0 view .LVU8512
 31448 07e8 2846     		mov	r0, r5
 31449 07ea 0121     		movs	r1, #1
 31450 07ec 0792     		str	r2, [sp, #28]
 31451 07ee FFF7FEFF 		bl	findmultilbl
 31452              	.LVL2489:
5023:src/xeq.c     **** 			if (XromUserPc != 0) {
 31453              		.loc 1 5023 15 view .LVU8513
 31454 07f2 234B     		ldr	r3, .L2409+28
5024:src/xeq.c     **** 				if (! Running)
 31455              		.loc 1 5024 7 view .LVU8514
 31456 07f4 079A     		ldr	r2, [sp, #28]
5023:src/xeq.c     **** 			if (XromUserPc != 0) {
 31457              		.loc 1 5023 15 view .LVU8515
 31458 07f6 1860     		str	r0, [r3]
ARM GAS  /tmp/ccK8IvWa.s 			page 796


5024:src/xeq.c     **** 				if (! Running)
 31459              		.loc 1 5024 4 is_stmt 1 view .LVU8516
5024:src/xeq.c     **** 				if (! Running)
 31460              		.loc 1 5024 7 is_stmt 0 view .LVU8517
 31461 07f8 0028     		cmp	r0, #0
 31462 07fa 3FF42EAF 		beq	.L2141
 31463              	.LVL2490:
5025:src/xeq.c     **** 					clrretstk();
 31464              		.loc 1 5025 5 is_stmt 1 view .LVU8518
5025:src/xeq.c     **** 					clrretstk();
 31465              		.loc 1 5025 9 is_stmt 0 view .LVU8519
 31466 07fe DFF88890 		ldr	r9, .L2409+36
 31467              	.LVL2491:
5025:src/xeq.c     **** 					clrretstk();
 31468              		.loc 1 5025 8 view .LVU8520
 31469 0802 D9F80030 		ldr	r3, [r9]
 31470 0806 1BB9     		cbnz	r3, .L2145
5026:src/xeq.c     **** 				dispatch_xrom(fp);
 31471              		.loc 1 5026 6 is_stmt 1 view .LVU8521
 31472              	.LBB4227:
 31473              	.LBI4227:
1395:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 31474              		.loc 1 1395 6 view .LVU8522
 31475              	.LBB4228:
1396:src/xeq.c     **** }
 31476              		.loc 1 1396 2 view .LVU8523
1396:src/xeq.c     **** }
 31477              		.loc 1 1396 24 is_stmt 0 view .LVU8524
 31478 0808 A6F8DE37 		strh	r3, [r6, #2014]	@ movhi
1396:src/xeq.c     **** }
 31479              		.loc 1 1396 12 view .LVU8525
 31480 080c A6F8E237 		strh	r3, [r6, #2018]	@ movhi
 31481              	.L2145:
1396:src/xeq.c     **** }
 31482              		.loc 1 1396 12 view .LVU8526
 31483              	.LBE4228:
 31484              	.LBE4227:
5027:src/xeq.c     **** 			}
 31485              		.loc 1 5027 5 is_stmt 1 view .LVU8527
 31486 0810 154B     		ldr	r3, .L2409+4
 31487 0812 0793     		str	r3, [sp, #28]
 31488              	.LVL2492:
5027:src/xeq.c     **** 			}
 31489              		.loc 1 5027 5 is_stmt 0 view .LVU8528
 31490 0814 1046     		mov	r0, r2
 31491 0816 FFF7FEFF 		bl	dispatch_xrom
 31492              	.LVL2493:
 31493 081a 079B     		ldr	r3, [sp, #28]
 31494 081c 1A68     		ldr	r2, [r3]
 31495 081e D3E4     		b	.L2144
 31496              	.LVL2494:
 31497              	.L2186:
5027:src/xeq.c     **** 			}
 31498              		.loc 1 5027 5 view .LVU8529
 31499              	.LBE4235:
 31500              	.LBE4238:
 31501              	.LBE4557:
ARM GAS  /tmp/ccK8IvWa.s 			page 797


 31502              	.LBB4558:
 31503              	.LBB4306:
3677:src/xeq.c     **** 		break;
 31504              		.loc 1 3677 3 is_stmt 1 view .LVU8530
 31505 0820 114B     		ldr	r3, .L2409+4
 31506 0822 0793     		str	r3, [sp, #28]
 31507 0824 A9F10500 		sub	r0, r9, #5
 31508 0828 FFF7FEFF 		bl	digit
 31509              	.LVL2495:
3678:src/xeq.c     **** 
 31510              		.loc 1 3678 3 view .LVU8531
 31511 082c 079B     		ldr	r3, [sp, #28]
 31512 082e 1A68     		ldr	r2, [r3]
 31513 0830 CAE4     		b	.L2144
 31514              	.L2183:
3818:src/xeq.c     **** 		break;
 31515              		.loc 1 3818 3 view .LVU8532
3818:src/xeq.c     **** 		break;
 31516              		.loc 1 3818 53 is_stmt 0 view .LVU8533
 31517 0832 A5F11E01 		sub	r1, r5, #30
 31518 0836 0C4B     		ldr	r3, .L2409+4
 31519 0838 0793     		str	r3, [sp, #28]
3818:src/xeq.c     **** 		break;
 31520              		.loc 1 3818 3 view .LVU8534
 31521 083a C9B2     		uxtb	r1, r1
 31522 083c 40F61C00 		movw	r0, #2076
 31523 0840 FFF7FEFF 		bl	do_tst
 31524              	.LVL2496:
3819:src/xeq.c     **** 	case OP_Zeq1:	case OP_Zne1:
 31525              		.loc 1 3819 3 is_stmt 1 view .LVU8535
 31526 0844 079B     		ldr	r3, [sp, #28]
 31527 0846 1A68     		ldr	r2, [r3]
 31528 0848 BEE4     		b	.L2144
 31529              	.L2184:
3809:src/xeq.c     **** 		break;
 31530              		.loc 1 3809 3 view .LVU8536
3809:src/xeq.c     **** 		break;
 31531              		.loc 1 3809 54 is_stmt 0 view .LVU8537
 31532 084a A5F11701 		sub	r1, r5, #23
 31533 084e 064B     		ldr	r3, .L2409+4
 31534 0850 0793     		str	r3, [sp, #28]
3809:src/xeq.c     **** 		break;
 31535              		.loc 1 3809 3 view .LVU8538
 31536 0852 C9B2     		uxtb	r1, r1
 31537 0854 40F61B00 		movw	r0, #2075
 31538 0858 FFF7FEFF 		bl	do_tst
 31539              	.LVL2497:
3810:src/xeq.c     **** 	case OP_Zeq0: case OP_Zne0:
 31540              		.loc 1 3810 3 is_stmt 1 view .LVU8539
 31541 085c 079B     		ldr	r3, [sp, #28]
 31542 085e 1A68     		ldr	r2, [r3]
 31543 0860 B2E4     		b	.L2144
 31544              	.L2410:
 31545 0862 00BF     		.align	2
 31546              	.L2409:
 31547 0864 00000000 		.word	trifuncs
 31548 0868 00000000 		.word	Error
ARM GAS  /tmp/ccK8IvWa.s 			page 798


 31549 086c 00000000 		.word	xrom
 31550 0870 00000000 		.word	argcmds
 31551 0874 00000000 		.word	RetStk
 31552 0878 00000000 		.word	XromLocal
 31553 087c 00000000 		.word	xrom_size
 31554 0880 00000000 		.word	XromUserPc
 31555 0884 00000000 		.word	dyfuncs
 31556 0888 00000000 		.word	Running
 31557              	.L2179:
3824:src/xeq.c     **** 		break;
 31558              		.loc 1 3824 3 view .LVU8540
3824:src/xeq.c     **** 		break;
 31559              		.loc 1 3824 49 is_stmt 0 view .LVU8541
 31560 088c A5F12902 		sub	r2, r5, #41
 31561 0890 B64B     		ldr	r3, .L2411
3824:src/xeq.c     **** 		break;
 31562              		.loc 1 3824 3 view .LVU8542
 31563 0892 B749     		ldr	r1, .L2411+4
 31564 0894 B748     		ldr	r0, .L2411+8
 31565 0896 0793     		str	r3, [sp, #28]
 31566 0898 D2B2     		uxtb	r2, r2
 31567 089a FFF7FEFF 		bl	do_ztst
 31568              	.LVL2498:
3825:src/xeq.c     **** 
 31569              		.loc 1 3825 3 is_stmt 1 view .LVU8543
 31570 089e 079B     		ldr	r3, [sp, #28]
 31571 08a0 1A68     		ldr	r2, [r3]
 31572 08a2 91E4     		b	.L2144
 31573              	.L2181:
3821:src/xeq.c     **** 		break;
 31574              		.loc 1 3821 3 view .LVU8544
3821:src/xeq.c     **** 		break;
 31575              		.loc 1 3821 49 is_stmt 0 view .LVU8545
 31576 08a4 A5F12702 		sub	r2, r5, #39
 31577 08a8 B04B     		ldr	r3, .L2411
3821:src/xeq.c     **** 		break;
 31578              		.loc 1 3821 3 view .LVU8546
 31579 08aa B249     		ldr	r1, .L2411+8
 31580 08ac B048     		ldr	r0, .L2411+4
 31581 08ae 0793     		str	r3, [sp, #28]
 31582 08b0 D2B2     		uxtb	r2, r2
 31583 08b2 FFF7FEFF 		bl	do_ztst
 31584              	.LVL2499:
3822:src/xeq.c     **** 	case OP_Zeqi:	case OP_Znei:
 31585              		.loc 1 3822 3 is_stmt 1 view .LVU8547
 31586 08b6 079B     		ldr	r3, [sp, #28]
 31587 08b8 1A68     		ldr	r2, [r3]
 31588 08ba 85E4     		b	.L2144
 31589              	.L2182:
3812:src/xeq.c     **** 		break;
 31590              		.loc 1 3812 3 view .LVU8548
 31591 08bc AD49     		ldr	r1, .L2411+8
 31592 08be AB4B     		ldr	r3, .L2411
 31593 08c0 0793     		str	r3, [sp, #28]
3812:src/xeq.c     **** 		break;
 31594              		.loc 1 3812 49 is_stmt 0 view .LVU8549
 31595 08c2 A5F12502 		sub	r2, r5, #37
ARM GAS  /tmp/ccK8IvWa.s 			page 799


3812:src/xeq.c     **** 		break;
 31596              		.loc 1 3812 3 view .LVU8550
 31597 08c6 D2B2     		uxtb	r2, r2
 31598 08c8 0846     		mov	r0, r1
 31599 08ca FFF7FEFF 		bl	do_ztst
 31600              	.LVL2500:
3813:src/xeq.c     **** 
 31601              		.loc 1 3813 3 is_stmt 1 view .LVU8551
 31602 08ce 079B     		ldr	r3, [sp, #28]
 31603 08d0 1A68     		ldr	r2, [r3]
 31604 08d2 79E4     		b	.L2144
 31605              	.L2185:
3791:src/xeq.c     **** 			bad_mode_error();
 31606              		.loc 1 3791 3 view .LVU8552
3791:src/xeq.c     **** 			bad_mode_error();
 31607              		.loc 1 3791 7 is_stmt 0 view .LVU8553
 31608 08d4 96F8E837 		ldrb	r3, [r6, #2024]	@ zero_extendqisi2
3791:src/xeq.c     **** 			bad_mode_error();
 31609              		.loc 1 3791 6 view .LVU8554
 31610 08d8 13F00105 		ands	r5, r3, #1
 31611              	.LVL2501:
3791:src/xeq.c     **** 			bad_mode_error();
 31612              		.loc 1 3791 6 view .LVU8555
 31613 08dc 00F09281 		beq	.L2208
 31614              	.LVL2502:
 31615              	.L2243:
3791:src/xeq.c     **** 			bad_mode_error();
 31616              		.loc 1 3791 6 view .LVU8556
 31617              	.LBE4306:
 31618              	.LBE4558:
 31619              	.LBB4559:
 31620              	.LBB4544:
4581:src/xeq.c     **** 		}
 31621              		.loc 1 4581 5 is_stmt 1 view .LVU8557
 31622              	.LBB4530:
 31623              	.LBI4530:
 552:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 31624              		.loc 1 552 6 view .LVU8558
 31625              	.LBE4530:
 31626              	.LBE4544:
 31627              	.LBE4559:
 553:src/xeq.c     **** }
 31628              		.loc 1 553 2 view .LVU8559
 31629              	.LBB4560:
 31630              	.LBB4545:
 31631              	.LBB4533:
 31632              	.LBB4531:
 31633              	.LBI4531:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31634              		.loc 1 523 5 view .LVU8560
 31635              	.LBB4532:
 524:src/xeq.c     **** 		Error = e;
 31636              		.loc 1 524 2 view .LVU8561
 524:src/xeq.c     **** 		Error = e;
 31637              		.loc 1 524 12 is_stmt 0 view .LVU8562
 31638 08e0 A24B     		ldr	r3, .L2411
 31639 08e2 1868     		ldr	r0, [r3]
ARM GAS  /tmp/ccK8IvWa.s 			page 800


 524:src/xeq.c     **** 		Error = e;
 31640              		.loc 1 524 5 view .LVU8563
 31641 08e4 0028     		cmp	r0, #0
 31642 08e6 7FF4A1AE 		bne	.L2369
 31643              	.LVL2503:
 524:src/xeq.c     **** 		Error = e;
 31644              		.loc 1 524 5 view .LVU8564
 31645              	.LBE4532:
 31646              	.LBE4531:
 31647              	.LBE4533:
 31648              	.LBE4545:
 31649              	.LBE4560:
 31650              	.LBB4561:
 31651              	.LBB4307:
 31652              	.LBB4248:
 31653              	.LBB4249:
 31654              	.LBB4250:
 31655              	.LBB4251:
 31656              	.LBI4251:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31657              		.loc 1 523 5 is_stmt 1 view .LVU8565
 31658              	.LBB4252:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 31659              		.loc 1 525 3 view .LVU8566
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 31660              		.loc 1 525 9 is_stmt 0 view .LVU8567
 31661 08ea 0D20     		movs	r0, #13
 31662 08ec DFF89492 		ldr	r9, .L2411+24
 31663 08f0 1860     		str	r0, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 31664              		.loc 1 526 3 is_stmt 1 view .LVU8568
 31665 08f2 D8E4     		b	.L2267
 31666              	.LVL2504:
 31667              	.L2191:
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 31668              		.loc 1 526 3 is_stmt 0 view .LVU8569
 31669              	.LBE4252:
 31670              	.LBE4251:
 31671              	.LBE4250:
 31672              	.LBE4249:
 31673              	.LBE4248:
3784:src/xeq.c     **** 		lift();
 31674              		.loc 1 3784 3 is_stmt 1 view .LVU8570
 31675 08f4 FFF7FEFF 		bl	process_cmdline
 31676              	.LVL2505:
3785:src/xeq.c     **** 		clr_lift();
 31677              		.loc 1 3785 3 view .LVU8571
 31678 08f8 FFF7FEFF 		bl	lift
 31679              	.LVL2506:
3786:src/xeq.c     **** 		break;
 31680              		.loc 1 3786 3 view .LVU8572
 31681              	.LBB4253:
 31682              	.LBI4253:
 738:src/xeq.c     ****     State2.state_lift = 0;
 31683              		.loc 1 738 13 view .LVU8573
 31684              	.LBB4254:
 739:src/xeq.c     **** }
ARM GAS  /tmp/ccK8IvWa.s 			page 801


 31685              		.loc 1 739 5 view .LVU8574
 739:src/xeq.c     **** }
 31686              		.loc 1 739 23 is_stmt 0 view .LVU8575
 31687 08fc E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 31688 08fe 9B4B     		ldr	r3, .L2411
 31689 0900 6FF38612 		bfc	r2, #6, #1
 31690 0904 E275     		strb	r2, [r4, #23]
 31691 0906 1A68     		ldr	r2, [r3]
 740:src/xeq.c     **** 
 31692              		.loc 1 740 1 view .LVU8576
 31693 0908 5EE4     		b	.L2144
 31694              	.L2187:
 31695              	.LBE4254:
 31696              	.LBE4253:
3681:src/xeq.c     **** 			break;
 31697              		.loc 1 3681 3 is_stmt 1 view .LVU8577
3681:src/xeq.c     **** 			break;
 31698              		.loc 1 3681 7 is_stmt 0 view .LVU8578
 31699 090a 96F8E837 		ldrb	r3, [r6, #2024]	@ zero_extendqisi2
3681:src/xeq.c     **** 			break;
 31700              		.loc 1 3681 6 view .LVU8579
 31701 090e D807     		lsls	r0, r3, #31
 31702 0910 3FF5A3AE 		bmi	.L2141
3688:src/xeq.c     **** #  else
 31703              		.loc 1 3688 3 is_stmt 1 view .LVU8580
3688:src/xeq.c     **** #  else
 31704              		.loc 1 3688 7 is_stmt 0 view .LVU8581
 31705 0914 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
3688:src/xeq.c     **** #  else
 31706              		.loc 1 3688 6 view .LVU8582
 31707 0916 012B     		cmp	r3, #1
 31708 0918 3FF69FAE 		bhi	.L2141
3688:src/xeq.c     **** #  else
 31709              		.loc 1 3688 22 view .LVU8583
 31710 091c 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
 31711 091e 002A     		cmp	r2, #0
 31712 0920 7FF49BAE 		bne	.L2141
3688:src/xeq.c     **** #  else
 31713              		.loc 1 3688 59 view .LVU8584
 31714 0924 002B     		cmp	r3, #0
3688:src/xeq.c     **** #  else
 31715              		.loc 1 3688 40 view .LVU8585
 31716 0926 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
3688:src/xeq.c     **** #  else
 31717              		.loc 1 3688 59 view .LVU8586
 31718 0928 0CBF     		ite	eq
 31719 092a 0C22     		moveq	r2, #12
 31720 092c 0E22     		movne	r2, #14
3688:src/xeq.c     **** #  else
 31721              		.loc 1 3688 37 view .LVU8587
 31722 092e 9342     		cmp	r3, r2
 31723 0930 BFF693AE 		bge	.L2141
3692:src/xeq.c     ****                             || Cmdline[CmdLineLength-1] == '-')
 31724              		.loc 1 3692 4 is_stmt 1 view .LVU8588
3692:src/xeq.c     ****                             || Cmdline[CmdLineLength-1] == '-')
 31725              		.loc 1 3692 7 is_stmt 0 view .LVU8589
 31726 0934 002B     		cmp	r3, #0
ARM GAS  /tmp/ccK8IvWa.s 			page 802


 31727 0936 00F0DD81 		beq	.L2194
3692:src/xeq.c     ****                             || Cmdline[CmdLineLength-1] == '-')
 31728              		.loc 1 3692 37 view .LVU8590
 31729 093a 2344     		add	r3, r3, r4
3693:src/xeq.c     **** #endif
 31730              		.loc 1 3693 29 view .LVU8591
 31731 093c DB7F     		ldrb	r3, [r3, #31]	@ zero_extendqisi2
 31732 093e 2D3B     		subs	r3, r3, #45
 31733 0940 012B     		cmp	r3, #1
 31734 0942 40F2D781 		bls	.L2194
 31735              	.L2195:
3696:src/xeq.c     **** 			append_cmdline('.');
 31736              		.loc 1 3696 4 is_stmt 1 view .LVU8592
 31737              	.LBB4255:
 31738              	.LBB4256:
2394:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 31739              		.loc 1 2394 10 is_stmt 0 view .LVU8593
 31740 0946 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 31741              	.LBE4256:
 31742              	.LBE4255:
3696:src/xeq.c     **** 			append_cmdline('.');
 31743              		.loc 1 3696 14 view .LVU8594
 31744 0948 A17F     		ldrb	r1, [r4, #30]	@ zero_extendqisi2
 31745              	.LBB4260:
 31746              	.LBB4257:
2394:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 31747              		.loc 1 2394 23 view .LVU8595
 31748 094a 5A1C     		adds	r2, r3, #1
 31749 094c D2B2     		uxtb	r2, r2
2394:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 31750              		.loc 1 2394 27 view .LVU8596
 31751 094e 2344     		add	r3, r3, r4
2395:src/xeq.c     **** }
 31752              		.loc 1 2395 25 view .LVU8597
 31753 0950 A018     		adds	r0, r4, r2
2394:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 31754              		.loc 1 2394 23 view .LVU8598
 31755 0952 2277     		strb	r2, [r4, #28]
2394:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 31756              		.loc 1 2394 27 view .LVU8599
 31757 0954 2E22     		movs	r2, #46
 31758 0956 83F82020 		strb	r2, [r3, #32]
 31759 095a 844B     		ldr	r3, .L2411
2395:src/xeq.c     **** }
 31760              		.loc 1 2395 25 view .LVU8600
 31761 095c 0022     		movs	r2, #0
 31762              	.LBE4257:
 31763              	.LBE4260:
3696:src/xeq.c     **** 			append_cmdline('.');
 31764              		.loc 1 3696 14 view .LVU8601
 31765 095e 0131     		adds	r1, r1, #1
 31766              	.LBB4261:
 31767              	.LBB4258:
2395:src/xeq.c     **** }
 31768              		.loc 1 2395 25 view .LVU8602
 31769 0960 80F82020 		strb	r2, [r0, #32]
 31770              	.LBE4258:
ARM GAS  /tmp/ccK8IvWa.s 			page 803


 31771              	.LBE4261:
3696:src/xeq.c     **** 			append_cmdline('.');
 31772              		.loc 1 3696 14 view .LVU8603
 31773 0964 A177     		strb	r1, [r4, #30]
3697:src/xeq.c     **** 		}
 31774              		.loc 1 3697 4 is_stmt 1 view .LVU8604
 31775              	.LVL2507:
 31776              	.LBB4262:
 31777              	.LBI4255:
2393:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 31778              		.loc 1 2393 13 view .LVU8605
 31779              	.LBB4259:
2394:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 31780              		.loc 1 2394 2 view .LVU8606
2395:src/xeq.c     **** }
 31781              		.loc 1 2395 2 view .LVU8607
 31782 0966 1A68     		ldr	r2, [r3]
2396:src/xeq.c     **** 
 31783              		.loc 1 2396 1 is_stmt 0 view .LVU8608
 31784 0968 2EE4     		b	.L2144
 31785              	.LVL2508:
 31786              	.L2188:
2396:src/xeq.c     **** 
 31787              		.loc 1 2396 1 view .LVU8609
 31788              	.LBE4259:
 31789              	.LBE4262:
3749:src/xeq.c     **** 			cmdlinechs();
 31790              		.loc 1 3749 3 is_stmt 1 view .LVU8610
3749:src/xeq.c     **** 			cmdlinechs();
 31791              		.loc 1 3749 7 is_stmt 0 view .LVU8611
 31792 096a 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
3749:src/xeq.c     **** 			cmdlinechs();
 31793              		.loc 1 3749 6 view .LVU8612
 31794 096c 002A     		cmp	r2, #0
 31795 096e 40F02E81 		bne	.L2396
3751:src/xeq.c     **** 			setX_int(intChs(getX_int()));
 31796              		.loc 1 3751 8 is_stmt 1 view .LVU8613
3751:src/xeq.c     **** 			setX_int(intChs(getX_int()));
 31797              		.loc 1 3751 12 is_stmt 0 view .LVU8614
 31798 0972 96F8E837 		ldrb	r3, [r6, #2024]	@ zero_extendqisi2
3751:src/xeq.c     **** 			setX_int(intChs(getX_int()));
 31799              		.loc 1 3751 11 view .LVU8615
 31800 0976 DA07     		lsls	r2, r3, #31
 31801 0978 40F11B81 		bpl	.L2203
3752:src/xeq.c     **** 			set_lift();
 31802              		.loc 1 3752 4 is_stmt 1 view .LVU8616
 31803              	.LBB4263:
 31804              	.LBI4263:
1242:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 31805              		.loc 1 1242 15 view .LVU8617
 31806              	.LBB4264:
1243:src/xeq.c     **** }
 31807              		.loc 1 1243 2 view .LVU8618
1243:src/xeq.c     **** }
 31808              		.loc 1 1243 9 is_stmt 0 view .LVU8619
 31809 097c 6420     		movs	r0, #100
 31810 097e FFF7FEFF 		bl	get_reg_n_int
ARM GAS  /tmp/ccK8IvWa.s 			page 804


 31811              	.LVL2509:
 31812              	.LBE4264:
 31813              	.LBE4263:
3752:src/xeq.c     **** 			set_lift();
 31814              		.loc 1 3752 4 view .LVU8620
 31815 0982 FFF7FEFF 		bl	intChs
 31816              	.LVL2510:
 31817 0986 FFF7FEFF 		bl	setX_int
 31818              	.LVL2511:
3753:src/xeq.c     **** 		} else {
 31819              		.loc 1 3753 4 is_stmt 1 view .LVU8621
 31820              	.LBB4265:
 31821              	.LBI4265:
 734:src/xeq.c     ****     State2.state_lift = 1;
 31822              		.loc 1 734 6 view .LVU8622
 31823              	.LBB4266:
 735:src/xeq.c     **** }
 31824              		.loc 1 735 5 view .LVU8623
 31825 098a 4FE4     		b	.L2362
 31826              	.L2189:
 31827              	.LBE4266:
 31828              	.LBE4265:
3702:src/xeq.c     **** 			break;
 31829              		.loc 1 3702 3 view .LVU8624
 31830              	.LBB4267:
3710:src/xeq.c     **** #endif
 31831              		.loc 1 3710 4 view .LVU8625
 31832              	.LVL2512:
3713:src/xeq.c     **** 				if (eex_pi) {
 31833              		.loc 1 3713 4 view .LVU8626
3713:src/xeq.c     **** 				if (eex_pi) {
 31834              		.loc 1 3713 7 is_stmt 0 view .LVU8627
 31835 098c A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 31836 098e 022B     		cmp	r3, #2
 31837 0990 3FF463AE 		beq	.L2141
3728:src/xeq.c     **** 				break;
 31838              		.loc 1 3728 4 is_stmt 1 view .LVU8628
 31839              	.LBE4267:
3702:src/xeq.c     **** 			break;
 31840              		.loc 1 3702 7 is_stmt 0 view .LVU8629
 31841 0994 96F8E837 		ldrb	r3, [r6, #2024]	@ zero_extendqisi2
 31842              	.LBB4270:
3728:src/xeq.c     **** 				break;
 31843              		.loc 1 3728 7 view .LVU8630
 31844 0998 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
 31845              	.LBE4270:
3702:src/xeq.c     **** 			break;
 31846              		.loc 1 3702 7 view .LVU8631
 31847 099a 03F00103 		and	r3, r3, #1
 31848              	.LBB4271:
3728:src/xeq.c     **** 				break;
 31849              		.loc 1 3728 7 view .LVU8632
 31850 099e 1343     		orrs	r3, r3, r2
 31851 09a0 7FF45BAE 		bne	.L2141
3728:src/xeq.c     **** 				break;
 31852              		.loc 1 3728 22 view .LVU8633
 31853 09a4 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
ARM GAS  /tmp/ccK8IvWa.s 			page 805


3728:src/xeq.c     **** 				break;
 31854              		.loc 1 3728 19 view .LVU8634
 31855 09a6 122B     		cmp	r3, #18
 31856 09a8 3FF657AE 		bhi	.L2141
3730:src/xeq.c     **** 				// empty command line: enter pi
 31857              		.loc 1 3730 4 is_stmt 1 view .LVU8635
3738:src/xeq.c     **** 				break;
 31858              		.loc 1 3738 4 view .LVU8636
3738:src/xeq.c     **** 				break;
 31859              		.loc 1 3738 8 is_stmt 0 view .LVU8637
 31860 09ac 96F8E627 		ldrb	r2, [r6, #2022]	@ zero_extendqisi2
3738:src/xeq.c     **** 				break;
 31861              		.loc 1 3738 7 view .LVU8638
 31862 09b0 9106     		lsls	r1, r2, #26
 31863 09b2 3FF552AE 		bmi	.L2141
3741:src/xeq.c     **** 				digit(1);
 31864              		.loc 1 3741 4 is_stmt 1 view .LVU8639
3741:src/xeq.c     **** 				digit(1);
 31865              		.loc 1 3741 7 is_stmt 0 view .LVU8640
 31866 09b6 002B     		cmp	r3, #0
 31867 09b8 00F0A081 		beq	.L2397
 31868              	.L2196:
3743:src/xeq.c     **** 			append_cmdline('E');
 31869              		.loc 1 3743 4 is_stmt 1 view .LVU8641
3743:src/xeq.c     **** 			append_cmdline('E');
 31870              		.loc 1 3743 17 is_stmt 0 view .LVU8642
 31871 09bc 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
3743:src/xeq.c     **** 			append_cmdline('E');
 31872              		.loc 1 3743 15 view .LVU8643
 31873 09be 6377     		strb	r3, [r4, #29]
3744:src/xeq.c     **** 		}
 31874              		.loc 1 3744 4 is_stmt 1 view .LVU8644
 31875              	.LVL2513:
 31876              	.LBB4268:
 31877              	.LBI4268:
2393:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 31878              		.loc 1 2393 13 view .LVU8645
 31879              	.LBB4269:
2394:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 31880              		.loc 1 2394 2 view .LVU8646
2394:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 31881              		.loc 1 2394 23 is_stmt 0 view .LVU8647
 31882 09c0 591C     		adds	r1, r3, #1
 31883 09c2 C9B2     		uxtb	r1, r1
2394:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 31884              		.loc 1 2394 27 view .LVU8648
 31885 09c4 E218     		adds	r2, r4, r3
2395:src/xeq.c     **** }
 31886              		.loc 1 2395 25 view .LVU8649
 31887 09c6 6018     		adds	r0, r4, r1
 31888 09c8 684B     		ldr	r3, .L2411
2394:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 31889              		.loc 1 2394 23 view .LVU8650
 31890 09ca 2177     		strb	r1, [r4, #28]
2394:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 31891              		.loc 1 2394 27 view .LVU8651
 31892 09cc 4521     		movs	r1, #69
ARM GAS  /tmp/ccK8IvWa.s 			page 806


 31893 09ce 82F82010 		strb	r1, [r2, #32]
2395:src/xeq.c     **** }
 31894              		.loc 1 2395 2 is_stmt 1 view .LVU8652
2395:src/xeq.c     **** }
 31895              		.loc 1 2395 25 is_stmt 0 view .LVU8653
 31896 09d2 0022     		movs	r2, #0
 31897 09d4 80F82020 		strb	r2, [r0, #32]
 31898 09d8 1A68     		ldr	r2, [r3]
2396:src/xeq.c     **** 
 31899              		.loc 1 2396 1 view .LVU8654
 31900 09da FFF7F5BB 		b	.L2144
 31901              	.LVL2514:
 31902              	.L2190:
2396:src/xeq.c     **** 
 31903              		.loc 1 2396 1 view .LVU8655
 31904              	.LBE4269:
 31905              	.LBE4268:
 31906              	.LBE4271:
3765:src/xeq.c     **** 			illegal(op);
 31907              		.loc 1 3765 3 is_stmt 1 view .LVU8656
3765:src/xeq.c     **** 			illegal(op);
 31908              		.loc 1 3765 7 is_stmt 0 view .LVU8657
 31909 09de DFF8A491 		ldr	r9, .L2411+24
 31910              	.LVL2515:
3765:src/xeq.c     **** 			illegal(op);
 31911              		.loc 1 3765 6 view .LVU8658
 31912 09e2 D9F80020 		ldr	r2, [r9]
 31913 09e6 002A     		cmp	r2, #0
 31914 09e8 00F0CE80 		beq	.L2204
3766:src/xeq.c     **** 		else if (CmdLineLength) {
 31915              		.loc 1 3766 4 is_stmt 1 view .LVU8659
3766:src/xeq.c     **** 		else if (CmdLineLength) {
 31916              		.loc 1 3766 4 view .LVU8660
 31917              	.LVL2516:
 31918              	.LBB4272:
 31919              	.LBI4272:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31920              		.loc 1 523 5 view .LVU8661
 31921              	.LBB4273:
 524:src/xeq.c     **** 		Error = e;
 31922              		.loc 1 524 2 view .LVU8662
 524:src/xeq.c     **** 		Error = e;
 31923              		.loc 1 524 12 is_stmt 0 view .LVU8663
 31924 09ec 5F4B     		ldr	r3, .L2411
 31925 09ee 1868     		ldr	r0, [r3]
 524:src/xeq.c     **** 		Error = e;
 31926              		.loc 1 524 5 view .LVU8664
 31927 09f0 0028     		cmp	r0, #0
 31928 09f2 3FF456AC 		beq	.L2148
 31929 09f6 56E4     		b	.L2267
 31930              	.LVL2517:
 31931              	.L2251:
 524:src/xeq.c     **** 		Error = e;
 31932              		.loc 1 524 5 view .LVU8665
 31933              	.LBE4273:
 31934              	.LBE4272:
 31935              	.LBE4307:
ARM GAS  /tmp/ccK8IvWa.s 			page 807


 31936              	.LBE4561:
 31937              	.LBB4562:
 31938              	.LBB4434:
4533:src/xeq.c     **** 	} else
 31939              		.loc 1 4533 4 is_stmt 1 view .LVU8666
 31940              	.LBB4424:
 31941              	.LBI4424:
 552:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 31942              		.loc 1 552 6 view .LVU8667
 31943              	.LBE4424:
 31944              	.LBE4434:
 31945              	.LBE4562:
 553:src/xeq.c     **** }
 31946              		.loc 1 553 2 view .LVU8668
 31947              	.LBB4563:
 31948              	.LBB4435:
 31949              	.LBB4429:
 31950              	.LBB4425:
 31951              	.LBI4425:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31952              		.loc 1 523 5 view .LVU8669
 31953              	.LBB4426:
 524:src/xeq.c     **** 		Error = e;
 31954              		.loc 1 524 2 view .LVU8670
 524:src/xeq.c     **** 		Error = e;
 31955              		.loc 1 524 12 is_stmt 0 view .LVU8671
 31956 09f8 5C4B     		ldr	r3, .L2411
 31957 09fa 1A68     		ldr	r2, [r3]
 524:src/xeq.c     **** 		Error = e;
 31958              		.loc 1 524 5 view .LVU8672
 31959 09fc 002A     		cmp	r2, #0
 31960 09fe 7FF47FAB 		bne	.L2154
 31961              	.LVL2518:
 31962              	.LBB4427:
 31963              	.LBI4427:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31964              		.loc 1 523 5 is_stmt 1 view .LVU8673
 31965              	.LBB4428:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 31966              		.loc 1 525 3 view .LVU8674
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 31967              		.loc 1 525 9 is_stmt 0 view .LVU8675
 31968 0a02 0D22     		movs	r2, #13
 31969 0a04 1A60     		str	r2, [r3]
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 31970              		.loc 1 526 3 is_stmt 1 view .LVU8676
 31971              	.LVL2519:
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 31972              		.loc 1 526 3 is_stmt 0 view .LVU8677
 31973              	.LBE4428:
 31974              	.LBE4427:
 31975              	.LBE4426:
 31976              	.LBE4425:
 31977              	.LBE4429:
4535:src/xeq.c     **** }
 31978              		.loc 1 4535 3 is_stmt 1 view .LVU8678
 31979              	.LBE4435:
ARM GAS  /tmp/ccK8IvWa.s 			page 808


 31980              	.LBE4563:
5104:src/xeq.c     **** 		}
 31981              		.loc 1 5104 12 view .LVU8679
5114:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 31982              		.loc 1 5114 2 view .LVU8680
 31983 0a06 FFF77BBB 		b	.L2154
 31984              	.L2258:
5138:src/xeq.c     **** 						// Need space for double precision stack
 31985              		.loc 1 5138 34 is_stmt 0 discriminator 1 view .LVU8681
 31986 0a0a 96F8CF17 		ldrb	r1, [r6, #1999]	@ zero_extendqisi2
 31987 0a0e 0B29     		cmp	r1, #11
 31988 0a10 40F29280 		bls	.L2260
5142:src/xeq.c     **** 					if (Error == ERR_NONE) {
 31989              		.loc 1 5142 6 is_stmt 1 view .LVU8682
5142:src/xeq.c     **** 					if (Error == ERR_NONE) {
 31990              		.loc 1 5142 20 is_stmt 0 view .LVU8683
 31991 0a14 67F3C712 		bfi	r2, r7, #7, #1
 31992 0a18 6A70     		strb	r2, [r5, #1]
5143:src/xeq.c     **** 						UState.mode_double = 1;
 31993              		.loc 1 5143 6 is_stmt 1 view .LVU8684
 31994 0a1a 5FE6     		b	.L2259
 31995              	.LVL2520:
 31996              	.L2233:
 31997              	.LBB4564:
 31998              	.LBB4354:
4490:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 31999              		.loc 1 4490 4 view .LVU8685
4490:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 32000              		.loc 1 4490 10 is_stmt 0 view .LVU8686
 32001 0a1c 564B     		ldr	r3, .L2411+12
 32002 0a1e 05EB4505 		add	r5, r5, r5, lsl #1
 32003              	.LVL2521:
4490:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 32004              		.loc 1 4490 10 view .LVU8687
 32005 0a22 53F83550 		ldr	r5, [r3, r5, lsl #3]
4490:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 32006              		.loc 1 4490 7 view .LVU8688
 32007 0a26 002D     		cmp	r5, #0
 32008 0a28 3FF45AAF 		beq	.L2243
 32009              	.LBB4333:
4491:src/xeq.c     **** 				if (dispatch_xrom(fp))
 32010              		.loc 1 4491 5 is_stmt 1 view .LVU8689
 32011              	.LVL2522:
4492:src/xeq.c     **** 					return;
 32012              		.loc 1 4492 5 view .LVU8690
4492:src/xeq.c     **** 					return;
 32013              		.loc 1 4492 9 is_stmt 0 view .LVU8691
 32014 0a2c 2846     		mov	r0, r5
 32015 0a2e FFF7FEFF 		bl	dispatch_xrom
 32016              	.LVL2523:
4492:src/xeq.c     **** 					return;
 32017              		.loc 1 4492 8 view .LVU8692
 32018 0a32 0028     		cmp	r0, #0
 32019 0a34 7FF411AE 		bne	.L2141
 32020              	.LBB4334:
4495:src/xeq.c     **** 					getXY(&x, &y);
 32021              		.loc 1 4495 6 is_stmt 1 view .LVU8693
ARM GAS  /tmp/ccK8IvWa.s 			page 809


4496:src/xeq.c     **** 					if (NULL == fp(&r, &y, &x))
 32022              		.loc 1 4496 6 view .LVU8694
 32023              	.LVL2524:
 32024              	.LBB4335:
 32025              	.LBI4335:
 821:src/xeq.c     **** 	getX(x);
 32026              		.loc 1 821 6 view .LVU8695
 32027              	.LBE4335:
 32028              	.LBE4334:
 32029              	.LBE4333:
 32030              	.LBE4354:
 32031              	.LBE4564:
 822:src/xeq.c     **** 	getY(y);
 32032              		.loc 1 822 2 view .LVU8696
 32033              	.LBB4565:
 32034              	.LBB4355:
 32035              	.LBB4350:
 32036              	.LBB4347:
 32037              	.LBB4342:
 32038              	.LBB4336:
 32039              	.LBI4336:
 791:src/xeq.c     **** 	return getRegister(x, regX_idx);
 32040              		.loc 1 791 12 view .LVU8697
 32041              	.LBB4337:
 792:src/xeq.c     **** }
 32042              		.loc 1 792 2 view .LVU8698
 792:src/xeq.c     **** }
 32043              		.loc 1 792 9 is_stmt 0 view .LVU8699
 32044 0a38 6421     		movs	r1, #100
 32045 0a3a 29A8     		add	r0, sp, #164
 32046              	.LVL2525:
 792:src/xeq.c     **** }
 32047              		.loc 1 792 9 view .LVU8700
 32048 0a3c FFF7FEFF 		bl	getRegister
 32049              	.LVL2526:
 792:src/xeq.c     **** }
 32050              		.loc 1 792 9 view .LVU8701
 32051              	.LBE4337:
 32052              	.LBE4336:
 32053              	.LBE4342:
 32054              	.LBE4347:
 32055              	.LBE4350:
 32056              	.LBE4355:
 32057              	.LBE4565:
 823:src/xeq.c     **** }
 32058              		.loc 1 823 2 is_stmt 1 view .LVU8702
 32059              	.LBB4566:
 32060              	.LBB4356:
 32061              	.LBB4351:
 32062              	.LBB4348:
 32063              	.LBB4343:
 32064              	.LBB4338:
 32065              	.LBI4338:
 799:src/xeq.c     **** 	getRegister(y, regY_idx);
 32066              		.loc 1 799 6 view .LVU8703
 32067              	.LBB4339:
 800:src/xeq.c     **** }
ARM GAS  /tmp/ccK8IvWa.s 			page 810


 32068              		.loc 1 800 2 view .LVU8704
 32069              	.LBE4339:
 32070              	.LBE4338:
 32071              	.LBE4343:
4497:src/xeq.c     **** 						set_NaN(&r);
 32072              		.loc 1 4497 18 is_stmt 0 view .LVU8705
 32073 0a40 0DF1EC09 		add	r9, sp, #236
 32074              	.LBB4344:
 32075              	.LBB4341:
 32076              	.LBB4340:
 800:src/xeq.c     **** }
 32077              		.loc 1 800 2 view .LVU8706
 32078 0a44 6521     		movs	r1, #101
 32079 0a46 32A8     		add	r0, sp, #200
 32080              	.LVL2527:
 800:src/xeq.c     **** }
 32081              		.loc 1 800 2 view .LVU8707
 32082 0a48 FFF7FEFF 		bl	getRegister
 32083              	.LVL2528:
 800:src/xeq.c     **** }
 32084              		.loc 1 800 2 view .LVU8708
 32085              	.LBE4340:
 32086              	.LBE4341:
 32087              	.LBE4344:
4497:src/xeq.c     **** 						set_NaN(&r);
 32088              		.loc 1 4497 6 is_stmt 1 view .LVU8709
4497:src/xeq.c     **** 						set_NaN(&r);
 32089              		.loc 1 4497 18 is_stmt 0 view .LVU8710
 32090 0a4c 29AA     		add	r2, sp, #164
 32091 0a4e 32A9     		add	r1, sp, #200
 32092 0a50 4846     		mov	r0, r9
 32093 0a52 A847     		blx	r5
 32094              	.LVL2529:
4497:src/xeq.c     **** 						set_NaN(&r);
 32095              		.loc 1 4497 9 view .LVU8711
 32096 0a54 0028     		cmp	r0, #0
 32097 0a56 00F0F580 		beq	.L2398
 32098              	.L2238:
4499:src/xeq.c     **** 					lower();
 32099              		.loc 1 4499 6 is_stmt 1 view .LVU8712
 32100              	.LBB4345:
 32101              	.LBI4345:
 759:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 32102              		.loc 1 759 6 view .LVU8713
 32103              	.LBB4346:
 760:src/xeq.c     **** }
 32104              		.loc 1 760 2 view .LVU8714
 32105 0a5a 444B     		ldr	r3, .L2411
 32106 0a5c 0793     		str	r3, [sp, #28]
 32107 0a5e 6421     		movs	r1, #100
 32108 0a60 6C20     		movs	r0, #108
 32109 0a62 FFF7FEFF 		bl	copyreg_n
 32110              	.LVL2530:
 32111              	.LBE4346:
 32112              	.LBE4345:
4500:src/xeq.c     **** 					setX(&r);
 32113              		.loc 1 4500 6 view .LVU8715
ARM GAS  /tmp/ccK8IvWa.s 			page 811


 32114              	.L2365:
4500:src/xeq.c     **** 					setX(&r);
 32115              		.loc 1 4500 6 is_stmt 0 view .LVU8716
 32116              	.LBE4348:
 32117              	.LBE4351:
 32118              	.LBE4356:
 32119              	.LBE4566:
 32120              	.LBB4567:
 32121              	.LBB4546:
 32122              	.LBB4534:
 32123              	.LBB4535:
4577:src/xeq.c     **** 					setX(&r);
 32124              		.loc 1 4577 6 is_stmt 1 view .LVU8717
 32125 0a66 FFF7FEFF 		bl	lower
 32126              	.LVL2531:
 32127              	.L2366:
4578:src/xeq.c     **** 				}
 32128              		.loc 1 4578 6 view .LVU8718
 32129              	.LBB4536:
 32130              	.LBI4536:
 795:src/xeq.c     **** 	setRegister(regX_idx, x);
 32131              		.loc 1 795 6 view .LVU8719
 32132              	.LBB4537:
 796:src/xeq.c     **** }
 32133              		.loc 1 796 2 view .LVU8720
 32134 0a6a 4946     		mov	r1, r9
 32135 0a6c 6420     		movs	r0, #100
 32136 0a6e FFF7FEFF 		bl	setRegister
 32137              	.LVL2532:
 796:src/xeq.c     **** }
 32138              		.loc 1 796 2 is_stmt 0 view .LVU8721
 32139 0a72 079B     		ldr	r3, [sp, #28]
 32140 0a74 1A68     		ldr	r2, [r3]
 32141              	.LBE4537:
 32142              	.LBE4536:
 32143              	.LBE4535:
 32144              	.LBE4534:
 32145 0a76 FFF7A7BB 		b	.L2144
 32146              	.LVL2533:
 32147              	.L2226:
 796:src/xeq.c     **** }
 32148              		.loc 1 796 2 view .LVU8722
 32149              	.LBE4546:
 32150              	.LBE4567:
 32151              	.LBB4568:
 32152              	.LBB4506:
4414:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 32153              		.loc 1 4414 4 is_stmt 1 view .LVU8723
4414:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 32154              		.loc 1 4414 10 is_stmt 0 view .LVU8724
 32155 0a7a 404B     		ldr	r3, .L2411+16
 32156 0a7c 05EB4505 		add	r5, r5, r5, lsl #1
 32157              	.LVL2534:
4414:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 32158              		.loc 1 4414 10 view .LVU8725
 32159 0a80 53F83550 		ldr	r5, [r3, r5, lsl #3]
4414:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
ARM GAS  /tmp/ccK8IvWa.s 			page 812


 32160              		.loc 1 4414 7 view .LVU8726
 32161 0a84 002D     		cmp	r5, #0
 32162 0a86 3FF42BAF 		beq	.L2243
 32163              	.LBB4494:
4415:src/xeq.c     **** 				if (dispatch_xrom(fp))
 32164              		.loc 1 4415 5 is_stmt 1 view .LVU8727
 32165              	.LVL2535:
4416:src/xeq.c     **** 					return;
 32166              		.loc 1 4416 5 view .LVU8728
4416:src/xeq.c     **** 					return;
 32167              		.loc 1 4416 9 is_stmt 0 view .LVU8729
 32168 0a8a 2846     		mov	r0, r5
 32169 0a8c FFF7FEFF 		bl	dispatch_xrom
 32170              	.LVL2536:
4416:src/xeq.c     **** 					return;
 32171              		.loc 1 4416 8 view .LVU8730
 32172 0a90 0028     		cmp	r0, #0
 32173 0a92 7FF4E2AD 		bne	.L2141
 32174              	.LBB4495:
4419:src/xeq.c     **** 					getX(&x);
 32175              		.loc 1 4419 6 is_stmt 1 view .LVU8731
4420:src/xeq.c     **** 					if (NULL == fp(&r, &x))
 32176              		.loc 1 4420 6 view .LVU8732
 32177              	.LVL2537:
 32178              	.LBB4496:
 32179              	.LBI4496:
 791:src/xeq.c     **** 	return getRegister(x, regX_idx);
 32180              		.loc 1 791 12 view .LVU8733
 32181              	.LBB4497:
 792:src/xeq.c     **** }
 32182              		.loc 1 792 2 view .LVU8734
 792:src/xeq.c     **** }
 32183              		.loc 1 792 9 is_stmt 0 view .LVU8735
 32184 0a96 6421     		movs	r1, #100
 32185 0a98 32A8     		add	r0, sp, #200
 32186              	.LVL2538:
 792:src/xeq.c     **** }
 32187              		.loc 1 792 9 view .LVU8736
 32188              	.LBE4497:
 32189              	.LBE4496:
4421:src/xeq.c     **** 						set_NaN(&r);
 32190              		.loc 1 4421 18 view .LVU8737
 32191 0a9a 0DF1EC09 		add	r9, sp, #236
 32192              	.LBB4499:
 32193              	.LBB4498:
 792:src/xeq.c     **** }
 32194              		.loc 1 792 9 view .LVU8738
 32195 0a9e FFF7FEFF 		bl	getRegister
 32196              	.LVL2539:
 792:src/xeq.c     **** }
 32197              		.loc 1 792 9 view .LVU8739
 32198              	.LBE4498:
 32199              	.LBE4499:
4421:src/xeq.c     **** 						set_NaN(&r);
 32200              		.loc 1 4421 6 is_stmt 1 view .LVU8740
4421:src/xeq.c     **** 						set_NaN(&r);
 32201              		.loc 1 4421 18 is_stmt 0 view .LVU8741
ARM GAS  /tmp/ccK8IvWa.s 			page 813


 32202 0aa2 32A9     		add	r1, sp, #200
 32203 0aa4 4846     		mov	r0, r9
 32204 0aa6 A847     		blx	r5
 32205              	.LVL2540:
4421:src/xeq.c     **** 						set_NaN(&r);
 32206              		.loc 1 4421 9 view .LVU8742
 32207 0aa8 0028     		cmp	r0, #0
 32208 0aaa 00F0C380 		beq	.L2399
 32209              	.L2231:
4423:src/xeq.c     **** 					setX(&r);
 32210              		.loc 1 4423 6 is_stmt 1 view .LVU8743
 32211              	.LBB4500:
 32212              	.LBI4500:
 759:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 32213              		.loc 1 759 6 view .LVU8744
 32214              	.LBB4501:
 760:src/xeq.c     **** }
 32215              		.loc 1 760 2 view .LVU8745
 32216 0aae 2F4B     		ldr	r3, .L2411
 32217 0ab0 0793     		str	r3, [sp, #28]
 32218 0ab2 6421     		movs	r1, #100
 32219 0ab4 6C20     		movs	r0, #108
 32220 0ab6 FFF7FEFF 		bl	copyreg_n
 32221              	.LVL2541:
 32222              	.LBE4501:
 32223              	.LBE4500:
4424:src/xeq.c     **** 				}
 32224              		.loc 1 4424 6 view .LVU8746
 32225              	.LBB4502:
 32226              	.LBI4502:
 795:src/xeq.c     **** 	setRegister(regX_idx, x);
 32227              		.loc 1 795 6 view .LVU8747
 32228              	.LBB4503:
 796:src/xeq.c     **** }
 32229              		.loc 1 796 2 view .LVU8748
 32230 0aba D6E7     		b	.L2366
 32231              	.LVL2542:
 32232              	.L2353:
 796:src/xeq.c     **** }
 32233              		.loc 1 796 2 is_stmt 0 view .LVU8749
 32234              	.LBE4503:
 32235              	.LBE4502:
 32236              	.LBE4495:
 32237              	.LBE4494:
 32238              	.LBE4506:
 32239              	.LBE4568:
 32240              	.LBB4569:
 32241              	.LBB4207:
4365:src/xeq.c     **** 			bad_mode_error();
 32242              		.loc 1 4365 23 view .LVU8750
 32243 0abc 03EB0511 		add	r1, r3, r5, lsl #4
 32244 0ac0 2A01     		lsls	r2, r5, #4
4365:src/xeq.c     **** 			bad_mode_error();
 32245              		.loc 1 4365 20 view .LVU8751
 32246 0ac2 91F90410 		ldrsb	r1, [r1, #4]
 32247 0ac6 0029     		cmp	r1, #0
 32248 0ac8 BFF65AAB 		bge	.L2213
ARM GAS  /tmp/ccK8IvWa.s 			page 814


4366:src/xeq.c     **** 		else if (! isNULL(niladics[idx].niladicf)) {
 32249              		.loc 1 4366 4 is_stmt 1 view .LVU8752
 32250              	.LBB4192:
 32251              	.LBI4192:
 552:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 32252              		.loc 1 552 6 view .LVU8753
 32253              	.LBE4192:
 32254              	.LBE4207:
 32255              	.LBE4569:
 553:src/xeq.c     **** }
 32256              		.loc 1 553 2 view .LVU8754
 32257              	.LVL2543:
 32258              	.LBB4570:
 32259              	.LBB4208:
 32260              	.LBB4201:
 32261              	.LBB4193:
 32262              	.LBI4193:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32263              		.loc 1 523 5 view .LVU8755
 32264              	.LBB4194:
 524:src/xeq.c     **** 		Error = e;
 32265              		.loc 1 524 2 view .LVU8756
 524:src/xeq.c     **** 		Error = e;
 32266              		.loc 1 524 12 is_stmt 0 view .LVU8757
 32267 0acc 274B     		ldr	r3, .L2411
 32268 0ace 1A68     		ldr	r2, [r3]
 524:src/xeq.c     **** 		Error = e;
 32269              		.loc 1 524 5 view .LVU8758
 32270 0ad0 002A     		cmp	r2, #0
 32271 0ad2 7FF4A7AD 		bne	.L2214
 32272              	.LVL2544:
 32273              	.LBB4195:
 32274              	.LBI4195:
 523:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32275              		.loc 1 523 5 is_stmt 1 view .LVU8759
 32276              	.LBB4196:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 32277              		.loc 1 525 3 view .LVU8760
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 32278              		.loc 1 525 9 is_stmt 0 view .LVU8761
 32279 0ad6 0D22     		movs	r2, #13
 32280              	.LBE4196:
 32281              	.LBE4195:
 32282              	.LBE4194:
 32283              	.LBE4193:
 32284              	.LBE4201:
4383:src/xeq.c     **** 		set_lift();
 32285              		.loc 1 4383 5 view .LVU8762
 32286 0ad8 3F2D     		cmp	r5, #63
 32287              	.LBB4202:
 32288              	.LBB4200:
 32289              	.LBB4199:
 32290              	.LBB4198:
 32291              	.LBB4197:
 525:src/xeq.c     **** 		if (e == ERR_NONE) {
 32292              		.loc 1 525 9 view .LVU8763
 32293 0ada 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccK8IvWa.s 			page 815


 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 32294              		.loc 1 526 3 is_stmt 1 view .LVU8764
 32295              	.LVL2545:
 526:src/xeq.c     **** 			error_message(e); // "Running Program"
 32296              		.loc 1 526 3 is_stmt 0 view .LVU8765
 32297              	.LBE4197:
 32298              	.LBE4198:
 32299              	.LBE4199:
 32300              	.LBE4200:
 32301              	.LBE4202:
4382:src/xeq.c     **** 	if (idx != OP_rCLX)
 32302              		.loc 1 4382 3 is_stmt 1 view .LVU8766
4383:src/xeq.c     **** 		set_lift();
 32303              		.loc 1 4383 2 view .LVU8767
4383:src/xeq.c     **** 		set_lift();
 32304              		.loc 1 4383 5 is_stmt 0 view .LVU8768
 32305 0adc 3FF4A5AD 		beq	.L2216
4384:src/xeq.c     **** }
 32306              		.loc 1 4384 3 is_stmt 1 view .LVU8769
 32307              	.LBB4203:
 734:src/xeq.c     ****     State2.state_lift = 1;
 32308              		.loc 1 734 6 view .LVU8770
 32309              	.LBB4176:
 735:src/xeq.c     **** }
 32310              		.loc 1 735 5 view .LVU8771
 735:src/xeq.c     **** }
 32311              		.loc 1 735 23 is_stmt 0 view .LVU8772
 32312 0ae0 E17D     		ldrb	r1, [r4, #23]	@ zero_extendqisi2
 32313 0ae2 41F04001 		orr	r1, r1, #64
 32314 0ae6 E175     		strb	r1, [r4, #23]
 32315              	.LVL2546:
 735:src/xeq.c     **** }
 32316              		.loc 1 735 23 view .LVU8773
 32317              	.LBE4176:
 32318              	.LBE4203:
 32319              	.LBE4208:
 32320              	.LBE4570:
5104:src/xeq.c     **** 		}
 32321              		.loc 1 5104 12 is_stmt 1 view .LVU8774
5114:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 32322              		.loc 1 5114 2 view .LVU8775
 32323 0ae8 FFF70ABB 		b	.L2154
 32324              	.LVL2547:
 32325              	.L2240:
 32326              	.LBB4571:
 32327              	.LBB4547:
4566:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 32328              		.loc 1 4566 4 view .LVU8776
4566:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 32329              		.loc 1 4566 10 is_stmt 0 view .LVU8777
 32330 0aec 244B     		ldr	r3, .L2411+20
 32331 0aee 05EB8505 		add	r5, r5, r5, lsl #2
 32332              	.LVL2548:
4566:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 32333              		.loc 1 4566 10 view .LVU8778
 32334 0af2 53F82550 		ldr	r5, [r3, r5, lsl #2]
4566:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
ARM GAS  /tmp/ccK8IvWa.s 			page 816


 32335              		.loc 1 4566 7 view .LVU8779
 32336 0af6 002D     		cmp	r5, #0
 32337 0af8 3FF4F2AE 		beq	.L2243
 32338              	.LBB4542:
4567:src/xeq.c     **** 				if (dispatch_xrom(fp))
 32339              		.loc 1 4567 5 is_stmt 1 view .LVU8780
 32340              	.LVL2549:
4568:src/xeq.c     **** 					return;
 32341              		.loc 1 4568 5 view .LVU8781
4568:src/xeq.c     **** 					return;
 32342              		.loc 1 4568 9 is_stmt 0 view .LVU8782
 32343 0afc 2846     		mov	r0, r5
 32344 0afe FFF7FEFF 		bl	dispatch_xrom
 32345              	.LVL2550:
4568:src/xeq.c     **** 					return;
 32346              		.loc 1 4568 8 view .LVU8783
 32347 0b02 0028     		cmp	r0, #0
 32348 0b04 7FF4A9AD 		bne	.L2141
 32349              	.LBB4540:
4571:src/xeq.c     **** 					getXYZ(&x, &y, &z);
 32350              		.loc 1 4571 6 is_stmt 1 view .LVU8784
4572:src/xeq.c     **** 					if (NULL == fp(&r, &z, &y, &x))
 32351              		.loc 1 4572 6 view .LVU8785
 32352 0b08 32AA     		add	r2, sp, #200
 32353 0b0a 29A9     		add	r1, sp, #164
 32354 0b0c 20A8     		add	r0, sp, #128
4573:src/xeq.c     **** 						set_NaN(&r);
 32355              		.loc 1 4573 18 is_stmt 0 view .LVU8786
 32356 0b0e 0DF1EC09 		add	r9, sp, #236
4572:src/xeq.c     **** 					if (NULL == fp(&r, &z, &y, &x))
 32357              		.loc 1 4572 6 view .LVU8787
 32358 0b12 FFF7FEFF 		bl	getXYZ
 32359              	.LVL2551:
4573:src/xeq.c     **** 						set_NaN(&r);
 32360              		.loc 1 4573 6 is_stmt 1 view .LVU8788
4573:src/xeq.c     **** 						set_NaN(&r);
 32361              		.loc 1 4573 18 is_stmt 0 view .LVU8789
 32362 0b16 20AB     		add	r3, sp, #128
 32363 0b18 29AA     		add	r2, sp, #164
 32364 0b1a 32A9     		add	r1, sp, #200
 32365 0b1c 4846     		mov	r0, r9
 32366 0b1e A847     		blx	r5
 32367              	.LVL2552:
4573:src/xeq.c     **** 						set_NaN(&r);
 32368              		.loc 1 4573 9 view .LVU8790
 32369 0b20 0028     		cmp	r0, #0
 32370 0b22 00F08B80 		beq	.L2400
 32371              	.L2245:
4575:src/xeq.c     **** 					lower();
 32372              		.loc 1 4575 6 is_stmt 1 view .LVU8791
 32373              	.LBB4538:
 32374              	.LBI4538:
 759:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 32375              		.loc 1 759 6 view .LVU8792
 32376              	.LBB4539:
 760:src/xeq.c     **** }
 32377              		.loc 1 760 2 view .LVU8793
ARM GAS  /tmp/ccK8IvWa.s 			page 817


 32378 0b26 114B     		ldr	r3, .L2411
 32379 0b28 0793     		str	r3, [sp, #28]
 32380 0b2a 6421     		movs	r1, #100
 32381 0b2c 6C20     		movs	r0, #108
 32382 0b2e FFF7FEFF 		bl	copyreg_n
 32383              	.LVL2553:
 32384              	.LBE4539:
 32385              	.LBE4538:
4576:src/xeq.c     **** 					lower();
 32386              		.loc 1 4576 6 view .LVU8794
 32387 0b32 FFF7FEFF 		bl	lower
 32388              	.LVL2554:
 32389 0b36 96E7     		b	.L2365
 32390              	.LVL2555:
 32391              	.L2260:
4576:src/xeq.c     **** 					lower();
 32392              		.loc 1 4576 6 is_stmt 0 view .LVU8795
 32393              	.LBE4540:
 32394              	.LBE4542:
 32395              	.LBE4547:
 32396              	.LBE4571:
5140:src/xeq.c     **** 					}
 32397              		.loc 1 5140 7 is_stmt 1 view .LVU8796
 32398 0b38 7D21     		movs	r1, #125
 32399 0b3a 0C20     		movs	r0, #12
 32400 0b3c 0393     		str	r3, [sp, #12]
 32401              	.LVL2556:
5140:src/xeq.c     **** 					}
 32402              		.loc 1 5140 7 is_stmt 0 view .LVU8797
 32403 0b3e FFF7FEFF 		bl	cmdregs
 32404              	.LVL2557:
 32405 0b42 039B     		ldr	r3, [sp, #12]
5142:src/xeq.c     **** 					if (Error == ERR_NONE) {
 32406              		.loc 1 5142 20 view .LVU8798
 32407 0b44 6A78     		ldrb	r2, [r5, #1]	@ zero_extendqisi2
 32408 0b46 1968     		ldr	r1, [r3]
5142:src/xeq.c     **** 					if (Error == ERR_NONE) {
 32409              		.loc 1 5142 6 is_stmt 1 view .LVU8799
5142:src/xeq.c     **** 					if (Error == ERR_NONE) {
 32410              		.loc 1 5142 20 is_stmt 0 view .LVU8800
 32411 0b48 67F3C712 		bfi	r2, r7, #7, #1
 32412 0b4c 6A70     		strb	r2, [r5, #1]
5143:src/xeq.c     **** 						UState.mode_double = 1;
 32413              		.loc 1 5143 6 is_stmt 1 view .LVU8801
5143:src/xeq.c     **** 						UState.mode_double = 1;
 32414              		.loc 1 5143 9 is_stmt 0 view .LVU8802
 32415 0b4e 0029     		cmp	r1, #0
 32416 0b50 3FF4C4AD 		beq	.L2259
5148:src/xeq.c     **** 				}
 32417              		.loc 1 5148 7 is_stmt 1 view .LVU8803
5148:src/xeq.c     **** 				}
 32418              		.loc 1 5148 13 is_stmt 0 view .LVU8804
 32419 0b54 1F60     		str	r7, [r3]
 32420 0b56 21E4     		b	.L2257
 32421              	.LVL2558:
 32422              	.L2388:
 32423              	.LBB4572:
ARM GAS  /tmp/ccK8IvWa.s 			page 818


 32424              	.LBB4209:
 32425              	.LBB4204:
 32426              	.LBB4166:
 32427              	.LBB4165:
 726:src/xeq.c     **** }
 32428              		.loc 1 726 3 is_stmt 1 view .LVU8805
 32429 0b58 FFF7FEFF 		bl	lift
 32430              	.LVL2559:
 32431              	.L2219:
 32432              	.LBE4165:
 32433              	.LBE4166:
4374:src/xeq.c     **** 				default:
 32434              		.loc 1 4374 13 view .LVU8806
 32435              	.LBB4167:
 32436              	.LBI4167:
 724:src/xeq.c     **** 	if (get_lift())
 32437              		.loc 1 724 6 view .LVU8807
 32438              	.LBB4168:
 725:src/xeq.c     **** 		lift();
 32439              		.loc 1 725 2 view .LVU8808
 32440              	.LBB4169:
 32441              	.LBI4169:
 720:src/xeq.c     **** 	return State2.state_lift;
 32442              		.loc 1 720 12 view .LVU8809
 32443              	.LBB4170:
 721:src/xeq.c     **** }
 32444              		.loc 1 721 2 view .LVU8810
 721:src/xeq.c     **** }
 32445              		.loc 1 721 15 is_stmt 0 view .LVU8811
 32446 0b5c E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 32447              	.LBE4170:
 32448              	.LBE4169:
 725:src/xeq.c     **** 		lift();
 32449              		.loc 1 725 5 view .LVU8812
 32450 0b5e 5806     		lsls	r0, r3, #25
 32451 0b60 7FF528AB 		bpl	.L2220
 726:src/xeq.c     **** }
 32452              		.loc 1 726 3 is_stmt 1 view .LVU8813
 32453 0b64 FFF7FEFF 		bl	lift
 32454              	.LVL2560:
 32455 0b68 FFF724BB 		b	.L2220
 32456              	.L2412:
 32457              		.align	2
 32458              	.L2411:
 32459 0b6c 00000000 		.word	Error
 32460 0b70 00000000 		.word	const_1
 32461 0b74 00000000 		.word	const_0
 32462 0b78 00000000 		.word	dyfuncs
 32463 0b7c 00000000 		.word	monfuncs
 32464 0b80 00000000 		.word	trifuncs
 32465 0b84 00000000 		.word	Running
 32466              	.LVL2561:
 32467              	.L2204:
 726:src/xeq.c     **** }
 32468              		.loc 1 726 3 is_stmt 0 view .LVU8814
 32469              	.LBE4168:
 32470              	.LBE4167:
ARM GAS  /tmp/ccK8IvWa.s 			page 819


 32471              	.LBE4204:
 32472              	.LBE4209:
 32473              	.LBE4572:
 32474              	.LBB4573:
 32475              	.LBB4308:
3767:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 32476              		.loc 1 3767 8 is_stmt 1 view .LVU8815
3767:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 32477              		.loc 1 3767 12 is_stmt 0 view .LVU8816
 32478 0b88 257F     		ldrb	r5, [r4, #28]	@ zero_extendqisi2
 32479              	.LVL2562:
3767:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 32480              		.loc 1 3767 11 view .LVU8817
 32481 0b8a 002D     		cmp	r5, #0
 32482 0b8c 5ED0     		beq	.L2205
3774:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
 32483              		.loc 1 3774 4 is_stmt 1 view .LVU8818
3774:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
 32484              		.loc 1 3774 17 is_stmt 0 view .LVU8819
 32485 0b8e 6B1E     		subs	r3, r5, #1
 32486 0b90 DBB2     		uxtb	r3, r3
3775:src/xeq.c     **** 				CmdLineEex = 0;
 32487              		.loc 1 3775 15 view .LVU8820
 32488 0b92 E118     		adds	r1, r4, r3
3774:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
 32489              		.loc 1 3774 17 view .LVU8821
 32490 0b94 2377     		strb	r3, [r4, #28]
3775:src/xeq.c     **** 				CmdLineEex = 0;
 32491              		.loc 1 3775 4 is_stmt 1 view .LVU8822
3775:src/xeq.c     **** 				CmdLineEex = 0;
 32492              		.loc 1 3775 15 is_stmt 0 view .LVU8823
 32493 0b96 91F82030 		ldrb	r3, [r1, #32]	@ zero_extendqisi2
3775:src/xeq.c     **** 				CmdLineEex = 0;
 32494              		.loc 1 3775 7 view .LVU8824
 32495 0b9a 452B     		cmp	r3, #69
 32496 0b9c 7AD0     		beq	.L2401
3777:src/xeq.c     **** 				CmdLineDot--;
 32497              		.loc 1 3777 9 is_stmt 1 view .LVU8825
3777:src/xeq.c     **** 				CmdLineDot--;
 32498              		.loc 1 3777 12 is_stmt 0 view .LVU8826
 32499 0b9e 2E2B     		cmp	r3, #46
 32500 0ba0 7FF45BAD 		bne	.L2141
3778:src/xeq.c     **** 		} else
 32501              		.loc 1 3778 5 is_stmt 1 view .LVU8827
3778:src/xeq.c     **** 		} else
 32502              		.loc 1 3778 15 is_stmt 0 view .LVU8828
 32503 0ba4 A27F     		ldrb	r2, [r4, #30]	@ zero_extendqisi2
 32504 0ba6 604B     		ldr	r3, .L2413
 32505 0ba8 013A     		subs	r2, r2, #1
 32506 0baa A277     		strb	r2, [r4, #30]
 32507 0bac 1A68     		ldr	r2, [r3]
 32508 0bae FFF70BBB 		b	.L2144
 32509              	.LVL2563:
 32510              	.L2203:
 32511              	.LBB4274:
3755:src/xeq.c     **** 
 32512              		.loc 1 3755 4 is_stmt 1 view .LVU8829
ARM GAS  /tmp/ccK8IvWa.s 			page 820


3757:src/xeq.c     **** 			dn_minus(&r, &x);
 32513              		.loc 1 3757 4 view .LVU8830
 32514              	.LBB4244:
 32515              	.LBI4244:
 791:src/xeq.c     **** 	return getRegister(x, regX_idx);
 32516              		.loc 1 791 12 view .LVU8831
 32517              	.LBB4245:
 792:src/xeq.c     **** }
 32518              		.loc 1 792 2 view .LVU8832
 792:src/xeq.c     **** }
 32519              		.loc 1 792 9 is_stmt 0 view .LVU8833
 32520 0bb2 32A8     		add	r0, sp, #200
 32521              	.LVL2564:
 792:src/xeq.c     **** }
 32522              		.loc 1 792 9 view .LVU8834
 32523 0bb4 6421     		movs	r1, #100
 32524 0bb6 FFF7FEFF 		bl	getRegister
 32525              	.LVL2565:
 792:src/xeq.c     **** }
 32526              		.loc 1 792 9 view .LVU8835
 32527              	.LBE4245:
 32528              	.LBE4244:
3758:src/xeq.c     **** 			setX(&r);
 32529              		.loc 1 3758 4 is_stmt 1 view .LVU8836
 32530 0bba 32A9     		add	r1, sp, #200
 32531 0bbc 3BA8     		add	r0, sp, #236
 32532 0bbe FFF7FEFF 		bl	dn_minus
 32533              	.LVL2566:
3759:src/xeq.c     **** 			set_lift();
 32534              		.loc 1 3759 4 view .LVU8837
 32535              	.LBB4246:
 32536              	.LBI4246:
 795:src/xeq.c     **** 	setRegister(regX_idx, x);
 32537              		.loc 1 795 6 view .LVU8838
 32538              	.LBB4247:
 796:src/xeq.c     **** }
 32539              		.loc 1 796 2 view .LVU8839
 32540 0bc2 3BA9     		add	r1, sp, #236
 32541              	.LVL2567:
 796:src/xeq.c     **** }
 32542              		.loc 1 796 2 is_stmt 0 view .LVU8840
 32543 0bc4 6420     		movs	r0, #100
 32544 0bc6 FFF7FEFF 		bl	setRegister
 32545              	.LVL2568:
 796:src/xeq.c     **** }
 32546              		.loc 1 796 2 view .LVU8841
 32547 0bca FFF72FBB 		b	.L2362
 32548              	.LVL2569:
 32549              	.L2396:
 796:src/xeq.c     **** }
 32550              		.loc 1 796 2 view .LVU8842
 32551              	.LBE4247:
 32552              	.LBE4246:
 32553              	.LBE4274:
3750:src/xeq.c     **** 		else if (is_intmode()) {
 32554              		.loc 1 3750 4 is_stmt 1 view .LVU8843
 32555              	.LBB4275:
ARM GAS  /tmp/ccK8IvWa.s 			page 821


 32556              	.LBI4275:
2993:src/xeq.c     **** 	if (CmdLineEex) {
 32557              		.loc 1 2993 13 view .LVU8844
 32558              	.LBB4276:
2994:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 32559              		.loc 1 2994 2 view .LVU8845
2994:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 32560              		.loc 1 2994 6 is_stmt 0 view .LVU8846
 32561 0bce 94F81DE0 		ldrb	lr, [r4, #29]	@ zero_extendqisi2
2994:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 32562              		.loc 1 2994 5 view .LVU8847
 32563 0bd2 BEF1000F 		cmp	lr, #0
 32564 0bd6 43D0     		beq	.L2198
 32565              	.LBB4277:
3005:src/xeq.c     **** 		if (CmdLineLength <= pos) {
 32566              		.loc 1 3005 3 is_stmt 1 view .LVU8848
3005:src/xeq.c     **** 		if (CmdLineLength <= pos) {
 32567              		.loc 1 3005 39 is_stmt 0 view .LVU8849
 32568 0bd8 0EF1010C 		add	ip, lr, #1
 32569              	.LVL2570:
3006:src/xeq.c     **** 			if (CmdLineLength < CMDLINELEN)
 32570              		.loc 1 3006 3 is_stmt 1 view .LVU8850
3006:src/xeq.c     **** 			if (CmdLineLength < CMDLINELEN)
 32571              		.loc 1 3006 6 is_stmt 0 view .LVU8851
 32572 0bdc 9445     		cmp	ip, r2
 32573 0bde 5ED3     		bcc	.L2199
3007:src/xeq.c     **** 				append_cmdline('-');
 32574              		.loc 1 3007 4 is_stmt 1 view .LVU8852
3007:src/xeq.c     **** 				append_cmdline('-');
 32575              		.loc 1 3007 7 is_stmt 0 view .LVU8853
 32576 0be0 122A     		cmp	r2, #18
 32577 0be2 3FF63AAD 		bhi	.L2141
3008:src/xeq.c     **** 		} else if (Cmdline[pos] == '-') {
 32578              		.loc 1 3008 5 is_stmt 1 view .LVU8854
 32579              	.LVL2571:
 32580              	.LBB4278:
 32581              	.LBI4278:
2393:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 32582              		.loc 1 2393 13 view .LVU8855
 32583              	.LBB4279:
2394:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32584              		.loc 1 2394 2 view .LVU8856
2394:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32585              		.loc 1 2394 23 is_stmt 0 view .LVU8857
 32586 0be6 511C     		adds	r1, r2, #1
 32587 0be8 C9B2     		uxtb	r1, r1
2394:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32588              		.loc 1 2394 27 view .LVU8858
 32589 0bea 2244     		add	r2, r2, r4
2395:src/xeq.c     **** }
 32590              		.loc 1 2395 25 view .LVU8859
 32591 0bec 6018     		adds	r0, r4, r1
 32592 0bee 4E4B     		ldr	r3, .L2413
2394:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32593              		.loc 1 2394 23 view .LVU8860
 32594 0bf0 2177     		strb	r1, [r4, #28]
2394:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
ARM GAS  /tmp/ccK8IvWa.s 			page 822


 32595              		.loc 1 2394 27 view .LVU8861
 32596 0bf2 2D21     		movs	r1, #45
 32597 0bf4 82F82010 		strb	r1, [r2, #32]
2395:src/xeq.c     **** }
 32598              		.loc 1 2395 2 is_stmt 1 view .LVU8862
2395:src/xeq.c     **** }
 32599              		.loc 1 2395 25 is_stmt 0 view .LVU8863
 32600 0bf8 0022     		movs	r2, #0
 32601 0bfa 80F82020 		strb	r2, [r0, #32]
 32602 0bfe 1A68     		ldr	r2, [r3]
2396:src/xeq.c     **** 
 32603              		.loc 1 2396 1 view .LVU8864
 32604 0c00 FFF7E2BA 		b	.L2144
 32605              	.LVL2572:
 32606              	.L2208:
2396:src/xeq.c     **** 
 32607              		.loc 1 2396 1 view .LVU8865
 32608              	.LBE4279:
 32609              	.LBE4278:
 32610              	.LBE4277:
 32611              	.LBE4276:
 32612              	.LBE4275:
3795:src/xeq.c     **** 		clr_lift();
 32613              		.loc 1 3795 3 is_stmt 1 view .LVU8866
 32614 0c04 FFF7FEFF 		bl	process_cmdline
 32615              	.LVL2573:
3796:src/xeq.c     **** 		setlastX();
 32616              		.loc 1 3796 3 view .LVU8867
 32617              	.LBB4285:
 32618              	.LBI4285:
 738:src/xeq.c     ****     State2.state_lift = 0;
 32619              		.loc 1 738 13 view .LVU8868
 32620              	.LBB4286:
 739:src/xeq.c     **** }
 32621              		.loc 1 739 5 view .LVU8869
 739:src/xeq.c     **** }
 32622              		.loc 1 739 23 is_stmt 0 view .LVU8870
 32623 0c08 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 32624              	.LBE4286:
 32625              	.LBE4285:
 32626              	.LBB4289:
 32627              	.LBB4290:
 760:src/xeq.c     **** }
 32628              		.loc 1 760 2 view .LVU8871
 32629 0c0a 6421     		movs	r1, #100
 32630              	.LBE4290:
 32631              	.LBE4289:
 32632              	.LBB4293:
 32633              	.LBB4287:
 739:src/xeq.c     **** }
 32634              		.loc 1 739 23 view .LVU8872
 32635 0c0c 65F38613 		bfi	r3, r5, #6, #1
 32636              	.LBE4287:
 32637              	.LBE4293:
 32638              	.LBB4294:
 32639              	.LBB4291:
 760:src/xeq.c     **** }
ARM GAS  /tmp/ccK8IvWa.s 			page 823


 32640              		.loc 1 760 2 view .LVU8873
 32641 0c10 6C20     		movs	r0, #108
 32642              	.LBE4291:
 32643              	.LBE4294:
 32644              	.LBB4295:
 32645              	.LBB4288:
 739:src/xeq.c     **** }
 32646              		.loc 1 739 23 view .LVU8874
 32647 0c12 E375     		strb	r3, [r4, #23]
 32648              	.LBE4288:
 32649              	.LBE4295:
3797:src/xeq.c     **** 		if (opm == OP_SIGMAPLUS)
 32650              		.loc 1 3797 3 is_stmt 1 view .LVU8875
 32651              	.LBB4296:
 32652              	.LBI4289:
 759:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 32653              		.loc 1 759 6 view .LVU8876
 32654              	.LBB4292:
 760:src/xeq.c     **** }
 32655              		.loc 1 760 2 view .LVU8877
 32656 0c14 FFF7FEFF 		bl	copyreg_n
 32657              	.LVL2574:
 32658              	.LBE4292:
 32659              	.LBE4296:
3798:src/xeq.c     **** 			sigma_plus();
 32660              		.loc 1 3798 3 view .LVU8878
3798:src/xeq.c     **** 			sigma_plus();
 32661              		.loc 1 3798 6 is_stmt 0 view .LVU8879
 32662 0c18 B9F1150F 		cmp	r9, #21
 32663 0c1c 37D0     		beq	.L2402
3801:src/xeq.c     **** 		sigma_val(OP_sigmaN);
 32664              		.loc 1 3801 4 is_stmt 1 view .LVU8880
 32665 0c1e FFF7FEFF 		bl	sigma_minus
 32666              	.LVL2575:
 32667              	.L2211:
3802:src/xeq.c     **** 		break;
 32668              		.loc 1 3802 3 view .LVU8881
 32669 0c22 414B     		ldr	r3, .L2413
 32670 0c24 0793     		str	r3, [sp, #28]
 32671 0c26 1D20     		movs	r0, #29
 32672 0c28 FFF7FEFF 		bl	sigma_val
 32673              	.LVL2576:
3803:src/xeq.c     **** 
 32674              		.loc 1 3803 3 view .LVU8882
 32675 0c2c 079B     		ldr	r3, [sp, #28]
 32676 0c2e 1A68     		ldr	r2, [r3]
 32677 0c30 FFF7CABA 		b	.L2144
 32678              	.LVL2577:
 32679              	.L2399:
3803:src/xeq.c     **** 
 32680              		.loc 1 3803 3 is_stmt 0 view .LVU8883
 32681              	.LBE4308:
 32682              	.LBE4573:
 32683              	.LBB4574:
 32684              	.LBB4507:
 32685              	.LBB4505:
 32686              	.LBB4504:
ARM GAS  /tmp/ccK8IvWa.s 			page 824


4422:src/xeq.c     **** 					setlastX();
 32687              		.loc 1 4422 7 is_stmt 1 view .LVU8884
 32688 0c34 4846     		mov	r0, r9
 32689 0c36 FFF7FEFF 		bl	set_NaN
 32690              	.LVL2578:
 32691 0c3a 38E7     		b	.L2231
 32692              	.LVL2579:
 32693              	.L2400:
4422:src/xeq.c     **** 					setlastX();
 32694              		.loc 1 4422 7 is_stmt 0 view .LVU8885
 32695              	.LBE4504:
 32696              	.LBE4505:
 32697              	.LBE4507:
 32698              	.LBE4574:
 32699              	.LBB4575:
 32700              	.LBB4548:
 32701              	.LBB4543:
 32702              	.LBB4541:
4574:src/xeq.c     **** 					setlastX();
 32703              		.loc 1 4574 7 is_stmt 1 view .LVU8886
 32704 0c3c 4846     		mov	r0, r9
 32705 0c3e FFF7FEFF 		bl	set_NaN
 32706              	.LVL2580:
 32707 0c42 70E7     		b	.L2245
 32708              	.LVL2581:
 32709              	.L2398:
4574:src/xeq.c     **** 					setlastX();
 32710              		.loc 1 4574 7 is_stmt 0 view .LVU8887
 32711              	.LBE4541:
 32712              	.LBE4543:
 32713              	.LBE4548:
 32714              	.LBE4575:
 32715              	.LBB4576:
 32716              	.LBB4357:
 32717              	.LBB4352:
 32718              	.LBB4349:
4498:src/xeq.c     **** 					setlastX();
 32719              		.loc 1 4498 7 is_stmt 1 view .LVU8888
 32720 0c44 4846     		mov	r0, r9
 32721 0c46 FFF7FEFF 		bl	set_NaN
 32722              	.LVL2582:
 32723 0c4a 06E7     		b	.L2238
 32724              	.LVL2583:
 32725              	.L2205:
4498:src/xeq.c     **** 					setlastX();
 32726              		.loc 1 4498 7 is_stmt 0 view .LVU8889
 32727              	.LBE4349:
 32728              	.LBE4352:
 32729              	.LBE4357:
 32730              	.LBE4576:
 32731              	.LBB4577:
 32732              	.LBB4309:
3780:src/xeq.c     **** 		break;
 32733              		.loc 1 3780 4 is_stmt 1 view .LVU8890
 32734              	.LBB4297:
 32735              	.LBI4297:
1358:src/xeq.c     **** 	zero_X();
ARM GAS  /tmp/ccK8IvWa.s 			page 825


 32736              		.loc 1 1358 6 view .LVU8891
 32737              	.LBB4298:
1359:src/xeq.c     **** 	clr_lift();
 32738              		.loc 1 1359 2 view .LVU8892
 32739 0c4c FFF7FEFF 		bl	zero_X
 32740              	.LVL2584:
1360:src/xeq.c     **** }
 32741              		.loc 1 1360 2 view .LVU8893
 32742              	.LBB4299:
 32743              	.LBI4299:
 738:src/xeq.c     ****     State2.state_lift = 0;
 32744              		.loc 1 738 13 view .LVU8894
 32745              	.LBB4300:
 739:src/xeq.c     **** }
 32746              		.loc 1 739 5 view .LVU8895
 739:src/xeq.c     **** }
 32747              		.loc 1 739 23 is_stmt 0 view .LVU8896
 32748 0c50 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 32749 0c52 354B     		ldr	r3, .L2413
 32750 0c54 65F38612 		bfi	r2, r5, #6, #1
 32751 0c58 E275     		strb	r2, [r4, #23]
 32752 0c5a 1A68     		ldr	r2, [r3]
 32753              	.LBE4300:
 32754              	.LBE4299:
1361:src/xeq.c     **** 
 32755              		.loc 1 1361 1 view .LVU8897
 32756 0c5c FFF7B4BA 		b	.L2144
 32757              	.LVL2585:
 32758              	.L2198:
1361:src/xeq.c     **** 
 32759              		.loc 1 1361 1 view .LVU8898
 32760              	.LBE4298:
 32761              	.LBE4297:
 32762              	.LBB4301:
 32763              	.LBB4282:
3025:src/xeq.c     **** 			if (CmdLineLength > 1)
 32764              		.loc 1 3025 3 is_stmt 1 view .LVU8899
3025:src/xeq.c     **** 			if (CmdLineLength > 1)
 32765              		.loc 1 3025 6 is_stmt 0 view .LVU8900
 32766 0c60 94F82030 		ldrb	r3, [r4, #32]	@ zero_extendqisi2
 32767 0c64 2D2B     		cmp	r3, #45
 32768 0c66 38D0     		beq	.L2403
3029:src/xeq.c     **** 			xcopy(Cmdline+1, Cmdline, CmdLineLength);
 32769              		.loc 1 3029 10 is_stmt 1 view .LVU8901
3029:src/xeq.c     **** 			xcopy(Cmdline+1, Cmdline, CmdLineLength);
 32770              		.loc 1 3029 13 is_stmt 0 view .LVU8902
 32771 0c68 122A     		cmp	r2, #18
 32772 0c6a 3FF6F6AC 		bhi	.L2141
3030:src/xeq.c     **** 			Cmdline[0] = '-';
 32773              		.loc 1 3030 4 is_stmt 1 view .LVU8903
 32774 0c6e 2F49     		ldr	r1, .L2413+4
 32775 0c70 2D4B     		ldr	r3, .L2413
 32776 0c72 0793     		str	r3, [sp, #28]
 32777 0c74 481C     		adds	r0, r1, #1
 32778 0c76 FFF7FEFF 		bl	xcopy
 32779              	.LVL2586:
3031:src/xeq.c     **** 			CmdLineLength++;
ARM GAS  /tmp/ccK8IvWa.s 			page 826


 32780              		.loc 1 3031 4 view .LVU8904
3032:src/xeq.c     **** 		}
 32781              		.loc 1 3032 17 is_stmt 0 view .LVU8905
 32782 0c7a 217F     		ldrb	r1, [r4, #28]	@ zero_extendqisi2
 32783 0c7c 079B     		ldr	r3, [sp, #28]
 32784 0c7e 0131     		adds	r1, r1, #1
3031:src/xeq.c     **** 			CmdLineLength++;
 32785              		.loc 1 3031 15 view .LVU8906
 32786 0c80 2D20     		movs	r0, #45
 32787 0c82 1A68     		ldr	r2, [r3]
3032:src/xeq.c     **** 		}
 32788              		.loc 1 3032 17 view .LVU8907
 32789 0c84 2177     		strb	r1, [r4, #28]
3031:src/xeq.c     **** 			CmdLineLength++;
 32790              		.loc 1 3031 15 view .LVU8908
 32791 0c86 84F82000 		strb	r0, [r4, #32]
3032:src/xeq.c     **** 		}
 32792              		.loc 1 3032 4 is_stmt 1 view .LVU8909
 32793 0c8a FFF79DBA 		b	.L2144
 32794              	.LVL2587:
 32795              	.L2402:
3032:src/xeq.c     **** 		}
 32796              		.loc 1 3032 4 is_stmt 0 view .LVU8910
 32797              	.LBE4282:
 32798              	.LBE4301:
3799:src/xeq.c     **** 		else
 32799              		.loc 1 3799 4 is_stmt 1 view .LVU8911
 32800 0c8e FFF7FEFF 		bl	sigma_plus
 32801              	.LVL2588:
 32802 0c92 C6E7     		b	.L2211
 32803              	.LVL2589:
 32804              	.L2401:
3776:src/xeq.c     **** 			else if (Cmdline[CmdLineLength] == '.')
 32805              		.loc 1 3776 5 view .LVU8912
 32806 0c94 244B     		ldr	r3, .L2413
3776:src/xeq.c     **** 			else if (Cmdline[CmdLineLength] == '.')
 32807              		.loc 1 3776 16 is_stmt 0 view .LVU8913
 32808 0c96 6277     		strb	r2, [r4, #29]
 32809 0c98 1A68     		ldr	r2, [r3]
 32810 0c9a FFF795BA 		b	.L2144
 32811              	.LVL2590:
 32812              	.L2199:
 32813              	.LBB4302:
 32814              	.LBB4283:
 32815              	.LBB4280:
3009:src/xeq.c     **** 			if (CmdLineLength != pos)
 32816              		.loc 1 3009 10 is_stmt 1 view .LVU8914
3009:src/xeq.c     **** 			if (CmdLineLength != pos)
 32817              		.loc 1 3009 21 is_stmt 0 view .LVU8915
 32818 0c9e 04EB0C05 		add	r5, r4, ip
 32819              	.LVL2591:
3009:src/xeq.c     **** 			if (CmdLineLength != pos)
 32820              		.loc 1 3009 13 view .LVU8916
 32821 0ca2 95F82030 		ldrb	r3, [r5, #32]	@ zero_extendqisi2
 32822 0ca6 2D2B     		cmp	r3, #45
 32823 0ca8 2CD0     		beq	.L2404
3013:src/xeq.c     **** 			xcopy(Cmdline+pos+1, Cmdline+pos, CmdLineLength-pos);
ARM GAS  /tmp/ccK8IvWa.s 			page 827


 32824              		.loc 1 3013 10 is_stmt 1 view .LVU8917
3013:src/xeq.c     **** 			xcopy(Cmdline+pos+1, Cmdline+pos, CmdLineLength-pos);
 32825              		.loc 1 3013 13 is_stmt 0 view .LVU8918
 32826 0caa 122A     		cmp	r2, #18
 32827 0cac 3FF6D5AC 		bhi	.L2141
3014:src/xeq.c     **** 			Cmdline[pos] = '-';
 32828              		.loc 1 3014 4 is_stmt 1 view .LVU8919
 32829 0cb0 1E49     		ldr	r1, .L2413+4
 32830 0cb2 1D4B     		ldr	r3, .L2413
 32831 0cb4 0793     		str	r3, [sp, #28]
3014:src/xeq.c     **** 			Cmdline[pos] = '-';
 32832              		.loc 1 3014 21 is_stmt 0 view .LVU8920
 32833 0cb6 0EF10200 		add	r0, lr, #2
3014:src/xeq.c     **** 			Cmdline[pos] = '-';
 32834              		.loc 1 3014 4 view .LVU8921
 32835 0cba A2EB0C02 		sub	r2, r2, ip
 32836 0cbe 0844     		add	r0, r0, r1
 32837 0cc0 6144     		add	r1, r1, ip
 32838 0cc2 FFF7FEFF 		bl	xcopy
 32839              	.LVL2592:
3015:src/xeq.c     **** 			CmdLineLength++;
 32840              		.loc 1 3015 4 is_stmt 1 view .LVU8922
3016:src/xeq.c     **** 		}
 32841              		.loc 1 3016 17 is_stmt 0 view .LVU8923
 32842 0cc6 217F     		ldrb	r1, [r4, #28]	@ zero_extendqisi2
 32843 0cc8 079B     		ldr	r3, [sp, #28]
 32844 0cca 0131     		adds	r1, r1, #1
3015:src/xeq.c     **** 			CmdLineLength++;
 32845              		.loc 1 3015 17 view .LVU8924
 32846 0ccc 2D20     		movs	r0, #45
 32847 0cce 1A68     		ldr	r2, [r3]
3016:src/xeq.c     **** 		}
 32848              		.loc 1 3016 17 view .LVU8925
 32849 0cd0 2177     		strb	r1, [r4, #28]
3015:src/xeq.c     **** 			CmdLineLength++;
 32850              		.loc 1 3015 17 view .LVU8926
 32851 0cd2 85F82000 		strb	r0, [r5, #32]
3016:src/xeq.c     **** 		}
 32852              		.loc 1 3016 4 is_stmt 1 view .LVU8927
 32853 0cd6 FFF777BA 		b	.L2144
 32854              	.LVL2593:
 32855              	.L2403:
3016:src/xeq.c     **** 		}
 32856              		.loc 1 3016 4 is_stmt 0 view .LVU8928
 32857              	.LBE4280:
3026:src/xeq.c     **** 				xcopy(Cmdline, Cmdline+1, CmdLineLength);
 32858              		.loc 1 3026 4 is_stmt 1 view .LVU8929
3026:src/xeq.c     **** 				xcopy(Cmdline, Cmdline+1, CmdLineLength);
 32859              		.loc 1 3026 7 is_stmt 0 view .LVU8930
 32860 0cda 012A     		cmp	r2, #1
 32861 0cdc 03D9     		bls	.L2202
3027:src/xeq.c     **** 			CmdLineLength--;
 32862              		.loc 1 3027 5 is_stmt 1 view .LVU8931
 32863 0cde 1449     		ldr	r1, .L2413+8
 32864 0ce0 481E     		subs	r0, r1, #1
 32865 0ce2 FFF7FEFF 		bl	xcopy
 32866              	.LVL2594:
ARM GAS  /tmp/ccK8IvWa.s 			page 828


 32867              	.L2202:
3028:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
 32868              		.loc 1 3028 4 view .LVU8932
3028:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
 32869              		.loc 1 3028 17 is_stmt 0 view .LVU8933
 32870 0ce6 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
 32871 0ce8 0F4B     		ldr	r3, .L2413
 32872 0cea 013A     		subs	r2, r2, #1
 32873 0cec 2277     		strb	r2, [r4, #28]
 32874 0cee 1A68     		ldr	r2, [r3]
 32875 0cf0 FFF76ABA 		b	.L2144
 32876              	.L2194:
 32877              	.LBE4283:
 32878              	.LBE4302:
3695:src/xeq.c     **** 			CmdLineDot++;
 32879              		.loc 1 3695 5 is_stmt 1 view .LVU8934
 32880 0cf4 0020     		movs	r0, #0
 32881 0cf6 FFF7FEFF 		bl	digit
 32882              	.LVL2595:
 32883 0cfa 24E6     		b	.L2195
 32884              	.LVL2596:
 32885              	.L2397:
 32886              	.LBB4303:
3742:src/xeq.c     **** 			CmdLineEex = CmdLineLength;
 32887              		.loc 1 3742 5 view .LVU8935
 32888 0cfc 0120     		movs	r0, #1
 32889 0cfe FFF7FEFF 		bl	digit
 32890              	.LVL2597:
 32891 0d02 5BE6     		b	.L2196
 32892              	.LVL2598:
 32893              	.L2404:
3742:src/xeq.c     **** 			CmdLineEex = CmdLineLength;
 32894              		.loc 1 3742 5 is_stmt 0 view .LVU8936
 32895              	.LBE4303:
 32896              	.LBB4304:
 32897              	.LBB4284:
 32898              	.LBB4281:
3010:src/xeq.c     **** 				xcopy(Cmdline + pos, Cmdline + pos + 1, CmdLineLength-pos);
 32899              		.loc 1 3010 4 is_stmt 1 view .LVU8937
3011:src/xeq.c     **** 			CmdLineLength--;
 32900              		.loc 1 3011 5 view .LVU8938
 32901 0d04 0948     		ldr	r0, .L2413+4
 32902 0d06 084B     		ldr	r3, .L2413
 32903 0d08 0793     		str	r3, [sp, #28]
3011:src/xeq.c     **** 			CmdLineLength--;
 32904              		.loc 1 3011 40 is_stmt 0 view .LVU8939
 32905 0d0a 0EF10201 		add	r1, lr, #2
3011:src/xeq.c     **** 			CmdLineLength--;
 32906              		.loc 1 3011 5 view .LVU8940
 32907 0d0e 0144     		add	r1, r1, r0
 32908 0d10 A2EB0C02 		sub	r2, r2, ip
 32909 0d14 6044     		add	r0, r0, ip
 32910 0d16 FFF7FEFF 		bl	xcopy
 32911              	.LVL2599:
3012:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
 32912              		.loc 1 3012 4 is_stmt 1 view .LVU8941
3012:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
ARM GAS  /tmp/ccK8IvWa.s 			page 829


 32913              		.loc 1 3012 17 is_stmt 0 view .LVU8942
 32914 0d1a 217F     		ldrb	r1, [r4, #28]	@ zero_extendqisi2
 32915 0d1c 079B     		ldr	r3, [sp, #28]
 32916 0d1e 0139     		subs	r1, r1, #1
 32917 0d20 1A68     		ldr	r2, [r3]
 32918 0d22 2177     		strb	r1, [r4, #28]
 32919 0d24 FFF750BA 		b	.L2144
 32920              	.L2414:
 32921              		.align	2
 32922              	.L2413:
 32923 0d28 00000000 		.word	Error
 32924 0d2c 20000000 		.word	StateWhileOn+32
 32925 0d30 21000000 		.word	StateWhileOn+33
 32926              	.LBE4281:
 32927              	.LBE4284:
 32928              	.LBE4304:
 32929              	.LBE4309:
 32930              	.LBE4577:
 32931              		.cfi_endproc
 32932              	.LFE243:
 32934              		.section	.text.xeq_single,"ax",%progbits
 32935              		.align	1
 32936              		.p2align 2,,3
 32937              		.syntax unified
 32938              		.thumb
 32939              		.thumb_func
 32940              		.fpu fpv4-sp-d16
 32942              	xeq_single:
 32943              	.LFB244:
5192:src/xeq.c     **** 	const opcode op = getprog(state_pc());
 32944              		.loc 1 5192 30 is_stmt 1 view -0
 32945              		.cfi_startproc
 32946              		@ args = 0, pretend = 0, frame = 0
 32947              		@ frame_needed = 0, uses_anonymous_args = 0
5193:src/xeq.c     **** 
 32948              		.loc 1 5193 2 view .LVU8944
5193:src/xeq.c     **** 
 32949              		.loc 1 5193 28 is_stmt 0 view .LVU8945
 32950 0000 064B     		ldr	r3, .L2417
5192:src/xeq.c     **** 	const opcode op = getprog(state_pc());
 32951              		.loc 1 5192 30 view .LVU8946
 32952 0002 10B5     		push	{r4, lr}
 32953              		.cfi_def_cfa_offset 8
 32954              		.cfi_offset 4, -8
 32955              		.cfi_offset 14, -4
5193:src/xeq.c     **** 
 32956              		.loc 1 5193 20 view .LVU8947
 32957 0004 B3F8E007 		ldrh	r0, [r3, #2016]
 32958 0008 FFF7FEFF 		bl	getprog
 32959              	.LVL2600:
 32960 000c 0446     		mov	r4, r0
 32961              	.LVL2601:
5195:src/xeq.c     **** 	xeq(op);
 32962              		.loc 1 5195 2 is_stmt 1 view .LVU8948
 32963 000e FFF7FEFF 		bl	incpc
 32964              	.LVL2602:
5196:src/xeq.c     **** }
ARM GAS  /tmp/ccK8IvWa.s 			page 830


 32965              		.loc 1 5196 2 view .LVU8949
 32966 0012 2046     		mov	r0, r4
5197:src/xeq.c     **** 
 32967              		.loc 1 5197 1 is_stmt 0 view .LVU8950
 32968 0014 BDE81040 		pop	{r4, lr}
 32969              		.cfi_restore 14
 32970              		.cfi_restore 4
 32971              		.cfi_def_cfa_offset 0
 32972              	.LVL2603:
5196:src/xeq.c     **** }
 32973              		.loc 1 5196 2 view .LVU8951
 32974 0018 FFF7FEBF 		b	xeq
 32975              	.LVL2604:
 32976              	.L2418:
5196:src/xeq.c     **** }
 32977              		.loc 1 5196 2 view .LVU8952
 32978              		.align	2
 32979              	.L2417:
 32980 001c 00000000 		.word	PersistentRam
 32981              		.cfi_endproc
 32982              	.LFE244:
 32984              		.section	.text.xeq_xrom2,"ax",%progbits
 32985              		.align	1
 32986              		.p2align 2,,3
 32987              		.syntax unified
 32988              		.thumb
 32989              		.thumb_func
 32990              		.fpu fpv4-sp-d16
 32992              	xeq_xrom2:
 32993              	.LFB245:
5204:src/xeq.c     **** #endif
 32994              		.loc 1 5204 29 is_stmt 1 view -0
 32995              		.cfi_startproc
 32996              		@ args = 0, pretend = 0, frame = 0
 32997              		@ frame_needed = 0, uses_anonymous_args = 0
5206:src/xeq.c     **** 	/* Now if we've stepped into the XROM area, keep going until
 32998              		.loc 1 5206 2 view .LVU8954
 32999              	.LVL2605:
5211:src/xeq.c     **** #else
 33000              		.loc 1 5211 2 view .LVU8955
5211:src/xeq.c     **** #else
 33001              		.loc 1 5211 8 view .LVU8956
5204:src/xeq.c     **** #endif
 33002              		.loc 1 5204 29 is_stmt 0 view .LVU8957
 33003 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 33004              		.cfi_def_cfa_offset 32
 33005              		.cfi_offset 4, -32
 33006              		.cfi_offset 5, -28
 33007              		.cfi_offset 6, -24
 33008              		.cfi_offset 7, -20
 33009              		.cfi_offset 8, -16
 33010              		.cfi_offset 9, -12
 33011              		.cfi_offset 10, -8
 33012              		.cfi_offset 14, -4
5211:src/xeq.c     **** #else
 33013              		.loc 1 5211 10 view .LVU8958
 33014 0004 1A4D     		ldr	r5, .L2431
ARM GAS  /tmp/ccK8IvWa.s 			page 831


 33015 0006 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5211:src/xeq.c     **** #else
 33016              		.loc 1 5211 8 view .LVU8959
 33017 0008 53BB     		cbnz	r3, .L2419
 33018 000a 1A4E     		ldr	r6, .L2431+4
5215:src/xeq.c     **** 		xeq_single();
 33019              		.loc 1 5215 15 view .LVU8960
 33020 000c DFF86C80 		ldr	r8, .L2431+12
 33021              	.LBB4584:
 33022              	.LBB4585:
4214:src/xeq.c     **** 		Busy = 1;
 33023              		.loc 1 4214 6 view .LVU8961
 33024 0010 DFF86CA0 		ldr	r10, .L2431+16
4214:src/xeq.c     **** 		Busy = 1;
 33025              		.loc 1 4214 15 view .LVU8962
 33026 0014 DFF86C90 		ldr	r9, .L2431+20
 33027 0018 03F0FF04 		and	r4, r3, #255
 33028              	.LVL2606:
 33029              	.L2420:
4214:src/xeq.c     **** 		Busy = 1;
 33030              		.loc 1 4214 15 view .LVU8963
 33031              	.LBE4585:
 33032              	.LBE4584:
5215:src/xeq.c     **** 		xeq_single();
 33033              		.loc 1 5215 3 is_stmt 1 view .LVU8964
 33034              	.LBB4592:
 33035              	.LBI4592:
 181:src/xeq.c     **** 	return isXROM(state_pc());
 33036              		.loc 1 181 5 view .LVU8965
 33037              	.LBB4593:
 182:src/xeq.c     **** }
 33038              		.loc 1 182 2 view .LVU8966
 182:src/xeq.c     **** }
 33039              		.loc 1 182 9 is_stmt 0 view .LVU8967
 33040 001c B6F8E037 		ldrh	r3, [r6, #2016]
 33041              	.LBE4593:
 33042              	.LBE4592:
5211:src/xeq.c     **** #else
 33043              		.loc 1 5211 18 view .LVU8968
 33044 0020 9B0B     		lsrs	r3, r3, #14
5215:src/xeq.c     **** 		xeq_single();
 33045              		.loc 1 5215 15 view .LVU8969
 33046 0022 0127     		movs	r7, #1
5211:src/xeq.c     **** #else
 33047              		.loc 1 5211 18 view .LVU8970
 33048 0024 032B     		cmp	r3, #3
5218:src/xeq.c     **** 			busy();
 33049              		.loc 1 5218 6 view .LVU8971
 33050 0026 3C44     		add	r4, r4, r7
 33051              	.LVL2607:
5211:src/xeq.c     **** #else
 33052              		.loc 1 5211 18 view .LVU8972
 33053 0028 1AD1     		bne	.L2419
5211:src/xeq.c     **** #else
 33054              		.loc 1 5211 31 discriminator 2 view .LVU8973
 33055 002a B6F9E237 		ldrsh	r3, [r6, #2018]
 33056 002e BBB1     		cbz	r3, .L2419
ARM GAS  /tmp/ccK8IvWa.s 			page 832


5215:src/xeq.c     **** 		xeq_single();
 33057              		.loc 1 5215 15 view .LVU8974
 33058 0030 C8F80070 		str	r7, [r8]
5216:src/xeq.c     **** 		XromRunning = 0;
 33059              		.loc 1 5216 3 is_stmt 1 view .LVU8975
 33060 0034 FFF7FEFF 		bl	xeq_single
 33061              	.LVL2608:
5217:src/xeq.c     **** 		if ((++count & 31) == 0)
 33062              		.loc 1 5217 3 view .LVU8976
 33063              	.LBB4594:
 33064              	.LBB4588:
4214:src/xeq.c     **** 		Busy = 1;
 33065              		.loc 1 4214 12 is_stmt 0 view .LVU8977
 33066 0038 D9F80030 		ldr	r3, [r9]
 33067 003c DAF80010 		ldr	r1, [r10]
 33068 0040 1943     		orrs	r1, r1, r3
 33069              	.LBE4588:
 33070              	.LBE4594:
5218:src/xeq.c     **** 			busy();
 33071              		.loc 1 5218 16 view .LVU8978
 33072 0042 04F01F03 		and	r3, r4, #31
5217:src/xeq.c     **** 		if ((++count & 31) == 0)
 33073              		.loc 1 5217 15 view .LVU8979
 33074 0046 0022     		movs	r2, #0
 33075              	.LBB4595:
 33076              	.LBB4589:
4214:src/xeq.c     **** 		Busy = 1;
 33077              		.loc 1 4214 12 view .LVU8980
 33078 0048 1943     		orrs	r1, r1, r3
 33079              	.LBE4589:
 33080              	.LBE4595:
5217:src/xeq.c     **** 		if ((++count & 31) == 0)
 33081              		.loc 1 5217 15 view .LVU8981
 33082 004a C8F80020 		str	r2, [r8]
5218:src/xeq.c     **** 			busy();
 33083              		.loc 1 5218 3 is_stmt 1 view .LVU8982
 33084              	.LVL2609:
5219:src/xeq.c     **** #ifdef DM42
 33085              		.loc 1 5219 4 view .LVU8983
 33086              	.LBB4596:
 33087              	.LBI4584:
4199:src/xeq.c     **** {
 33088              		.loc 1 4199 6 view .LVU8984
 33089              	.LBB4590:
4204:src/xeq.c     **** 
 33090              		.loc 1 4204 12 view .LVU8985
4209:src/xeq.c     **** 
 33091              		.loc 1 4209 17 view .LVU8986
4214:src/xeq.c     **** 		Busy = 1;
 33092              		.loc 1 4214 2 view .LVU8987
4214:src/xeq.c     **** 		Busy = 1;
 33093              		.loc 1 4214 12 is_stmt 0 view .LVU8988
 33094 004e 09D0     		beq	.L2430
 33095              	.L2421:
 33096              	.LBE4590:
 33097              	.LBE4596:
5221:src/xeq.c     **** #else
ARM GAS  /tmp/ccK8IvWa.s 			page 833


 33098              		.loc 1 5221 3 is_stmt 1 view .LVU8989
5227:src/xeq.c     **** 		}
 33099              		.loc 1 5227 4 view .LVU8990
5211:src/xeq.c     **** #else
 33100              		.loc 1 5211 8 view .LVU8991
5221:src/xeq.c     **** #else
 33101              		.loc 1 5221 7 is_stmt 0 view .LVU8992
 33102 0050 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
5211:src/xeq.c     **** #else
 33103              		.loc 1 5211 10 view .LVU8993
 33104 0052 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5221:src/xeq.c     **** #else
 33105              		.loc 1 5221 6 view .LVU8994
 33106 0054 12B1     		cbz	r2, .L2422
5227:src/xeq.c     **** 		}
 33107              		.loc 1 5227 12 view .LVU8995
 33108 0056 0122     		movs	r2, #1
 33109 0058 C9F80020 		str	r2, [r9]
 33110              	.L2422:
5211:src/xeq.c     **** #else
 33111              		.loc 1 5211 8 view .LVU8996
 33112 005c 002B     		cmp	r3, #0
 33113 005e DDD0     		beq	.L2420
 33114              	.LVL2610:
 33115              	.L2419:
5230:src/xeq.c     **** 
 33116              		.loc 1 5230 1 view .LVU8997
 33117 0060 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 33118              	.LVL2611:
 33119              	.L2430:
 33120              	.LBB4597:
 33121              	.LBB4591:
 33122              	.LBB4586:
 33123              	.LBI4586:
4199:src/xeq.c     **** {
 33124              		.loc 1 4199 6 is_stmt 1 view .LVU8998
 33125              	.LBB4587:
4215:src/xeq.c     **** 		message("Wait...", NULL);
 33126              		.loc 1 4215 3 view .LVU8999
4216:src/xeq.c     **** 	}
 33127              		.loc 1 4216 3 is_stmt 0 view .LVU9000
 33128 0064 0448     		ldr	r0, .L2431+8
4215:src/xeq.c     **** 		message("Wait...", NULL);
 33129              		.loc 1 4215 8 view .LVU9001
 33130 0066 CAF80070 		str	r7, [r10]
4216:src/xeq.c     **** 	}
 33131              		.loc 1 4216 3 is_stmt 1 view .LVU9002
 33132 006a FFF7FEFF 		bl	message
 33133              	.LVL2612:
4218:src/xeq.c     **** 
 33134              		.loc 1 4218 1 is_stmt 0 view .LVU9003
 33135 006e EFE7     		b	.L2421
 33136              	.L2432:
 33137              		.align	2
 33138              	.L2431:
 33139 0070 00000000 		.word	Pause
 33140 0074 00000000 		.word	PersistentRam
ARM GAS  /tmp/ccK8IvWa.s 			page 834


 33141 0078 00000000 		.word	.LC7
 33142 007c 00000000 		.word	XromRunning
 33143 0080 00000000 		.word	Busy
 33144 0084 00000000 		.word	Running
 33145              	.LBE4587:
 33146              	.LBE4586:
 33147              	.LBE4591:
 33148              	.LBE4597:
 33149              		.cfi_endproc
 33150              	.LFE245:
 33152              		.section	.text.xeq_xrom,"ax",%progbits
 33153              		.align	1
 33154              		.p2align 2,,3
 33155              		.global	xeq_xrom
 33156              		.syntax unified
 33157              		.thumb
 33158              		.thumb_func
 33159              		.fpu fpv4-sp-d16
 33161              	xeq_xrom:
 33162              	.LFB246:
5233:src/xeq.c     **** 	// We split the routine in two parts for debugging only
 33163              		.loc 1 5233 21 is_stmt 1 view -0
 33164              		.cfi_startproc
 33165              		@ args = 0, pretend = 0, frame = 0
 33166              		@ frame_needed = 0, uses_anonymous_args = 0
 33167              		@ link register save eliminated.
5235:src/xeq.c     **** 		xeq_xrom2();
 33168              		.loc 1 5235 2 view .LVU9005
5235:src/xeq.c     **** 		xeq_xrom2();
 33169              		.loc 1 5235 6 is_stmt 0 view .LVU9006
 33170 0000 034B     		ldr	r3, .L2436
5235:src/xeq.c     **** 		xeq_xrom2();
 33171              		.loc 1 5235 5 view .LVU9007
 33172 0002 93F91730 		ldrsb	r3, [r3, #23]
 33173 0006 002B     		cmp	r3, #0
 33174 0008 00DA     		bge	.L2435
5237:src/xeq.c     **** #endif
 33175              		.loc 1 5237 1 view .LVU9008
 33176 000a 7047     		bx	lr
 33177              	.L2435:
5236:src/xeq.c     **** }
 33178              		.loc 1 5236 3 is_stmt 1 view .LVU9009
 33179 000c FFF7FEBF 		b	xeq_xrom2
 33180              	.LVL2613:
 33181              	.L2437:
 33182              		.align	2
 33183              	.L2436:
 33184 0010 00000000 		.word	StateWhileOn
 33185              		.cfi_endproc
 33186              	.LFE246:
 33188              		.section	.text.dispatch_xrom,"ax",%progbits
 33189              		.align	1
 33190              		.p2align 2,,3
 33191              		.syntax unified
 33192              		.thumb
 33193              		.thumb_func
 33194              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccK8IvWa.s 			page 835


 33196              	dispatch_xrom:
 33197              	.LVL2614:
 33198              	.LFB230:
4251:src/xeq.c     **** 	const s_opcode *xp = check_for_xrom_address(fp);
 33199              		.loc 1 4251 1 view -0
 33200              		.cfi_startproc
 33201              		@ args = 0, pretend = 0, frame = 0
 33202              		@ frame_needed = 0, uses_anonymous_args = 0
4252:src/xeq.c     **** 	if (xp == NULL)
 33203              		.loc 1 4252 2 view .LVU9011
 33204              	.LBB4598:
 33205              	.LBI4598:
4234:src/xeq.c     **** {
 33206              		.loc 1 4234 24 view .LVU9012
 33207              	.LBB4599:
4236:src/xeq.c     **** 	if (xp < xrom)
 33208              		.loc 1 4236 2 view .LVU9013
4237:src/xeq.c     **** 		return NULL;
 33209              		.loc 1 4237 5 is_stmt 0 view .LVU9014
 33210 0000 1649     		ldr	r1, .L2449
4236:src/xeq.c     **** 	if (xp < xrom)
 33211              		.loc 1 4236 59 view .LVU9015
 33212 0002 20F00100 		bic	r0, r0, #1
 33213              	.LVL2615:
4237:src/xeq.c     **** 		return NULL;
 33214              		.loc 1 4237 2 is_stmt 1 view .LVU9016
4237:src/xeq.c     **** 		return NULL;
 33215              		.loc 1 4237 5 is_stmt 0 view .LVU9017
 33216 0006 8842     		cmp	r0, r1
 33217 0008 24D3     		bcc	.L2440
4241:src/xeq.c     **** 		return NULL;
 33218              		.loc 1 4241 2 is_stmt 1 view .LVU9018
 33219              	.LBE4599:
 33220              	.LBE4598:
4251:src/xeq.c     **** 	const s_opcode *xp = check_for_xrom_address(fp);
 33221              		.loc 1 4251 1 is_stmt 0 view .LVU9019
 33222 000a 38B5     		push	{r3, r4, r5, lr}
 33223              		.cfi_def_cfa_offset 16
 33224              		.cfi_offset 3, -16
 33225              		.cfi_offset 4, -12
 33226              		.cfi_offset 5, -8
 33227              		.cfi_offset 14, -4
 33228              	.LBB4601:
 33229              	.LBB4600:
4241:src/xeq.c     **** 		return NULL;
 33230              		.loc 1 4241 17 view .LVU9020
 33231 000c 144B     		ldr	r3, .L2449+4
 33232 000e 1B88     		ldrh	r3, [r3]
 33233 0010 01EB4303 		add	r3, r1, r3, lsl #1
4241:src/xeq.c     **** 		return NULL;
 33234              		.loc 1 4241 5 view .LVU9021
 33235 0014 9842     		cmp	r0, r3
 33236 0016 1FD2     		bcs	.L2441
 33237              	.LVL2616:
4241:src/xeq.c     **** 		return NULL;
 33238              		.loc 1 4241 5 view .LVU9022
 33239              	.LBE4600:
ARM GAS  /tmp/ccK8IvWa.s 			page 836


 33240              	.LBE4601:
4253:src/xeq.c     **** 		return 0;
 33241              		.loc 1 4253 2 is_stmt 1 view .LVU9023
4253:src/xeq.c     **** 		return 0;
 33242              		.loc 1 4253 5 is_stmt 0 view .LVU9024
 33243 0018 B8B1     		cbz	r0, .L2438
4256:src/xeq.c     **** 	XromRunning = 1;
 33244              		.loc 1 4256 2 is_stmt 1 view .LVU9025
4256:src/xeq.c     **** 	XromRunning = 1;
 33245              		.loc 1 4256 18 is_stmt 0 view .LVU9026
 33246 001a 124B     		ldr	r3, .L2449+8
4257:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
 33247              		.loc 1 4257 14 view .LVU9027
 33248 001c 124D     		ldr	r5, .L2449+12
4256:src/xeq.c     **** 	XromRunning = 1;
 33249              		.loc 1 4256 18 view .LVU9028
 33250 001e B3F9DE47 		ldrsh	r4, [r3, #2014]
4258:src/xeq.c     **** 	xeq_xrom();
 33251              		.loc 1 4258 2 view .LVU9029
 33252 0022 B3F8E027 		ldrh	r2, [r3, #2016]
4258:src/xeq.c     **** 	xeq_xrom();
 33253              		.loc 1 4258 9 view .LVU9030
 33254 0026 401A     		subs	r0, r0, r1
 33255              	.LVL2617:
4256:src/xeq.c     **** 	XromRunning = 1;
 33256              		.loc 1 4256 16 view .LVU9031
 33257 0028 1049     		ldr	r1, .L2449+16
4258:src/xeq.c     **** 	xeq_xrom();
 33258              		.loc 1 4258 9 view .LVU9032
 33259 002a 4010     		asrs	r0, r0, #1
 33260              	.LVL2618:
4256:src/xeq.c     **** 	XromRunning = 1;
 33261              		.loc 1 4256 18 view .LVU9033
 33262 002c 0C60     		str	r4, [r1]
4257:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
 33263              		.loc 1 4257 2 is_stmt 1 view .LVU9034
4258:src/xeq.c     **** 	xeq_xrom();
 33264              		.loc 1 4258 9 is_stmt 0 view .LVU9035
 33265 002e 0130     		adds	r0, r0, #1
4257:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
 33266              		.loc 1 4257 14 view .LVU9036
 33267 0030 0124     		movs	r4, #1
4258:src/xeq.c     **** 	xeq_xrom();
 33268              		.loc 1 4258 2 view .LVU9037
 33269 0032 40F44040 		orr	r0, r0, #49152
 33270 0036 2146     		mov	r1, r4
4257:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
 33271              		.loc 1 4257 14 view .LVU9038
 33272 0038 2C60     		str	r4, [r5]
4258:src/xeq.c     **** 	xeq_xrom();
 33273              		.loc 1 4258 2 is_stmt 1 view .LVU9039
 33274 003a FFF7FEFF 		bl	gsbgto
 33275              	.LVL2619:
4259:src/xeq.c     **** 	return 1;
 33276              		.loc 1 4259 2 view .LVU9040
 33277              	.LBB4602:
 33278              	.LBI4602:
ARM GAS  /tmp/ccK8IvWa.s 			page 837


5233:src/xeq.c     **** 	// We split the routine in two parts for debugging only
 33279              		.loc 1 5233 6 view .LVU9041
 33280              	.LBB4603:
5235:src/xeq.c     **** 		xeq_xrom2();
 33281              		.loc 1 5235 2 view .LVU9042
5235:src/xeq.c     **** 		xeq_xrom2();
 33282              		.loc 1 5235 6 is_stmt 0 view .LVU9043
 33283 003e 0C4B     		ldr	r3, .L2449+20
5235:src/xeq.c     **** 		xeq_xrom2();
 33284              		.loc 1 5235 5 view .LVU9044
 33285 0040 93F91730 		ldrsb	r3, [r3, #23]
 33286 0044 002B     		cmp	r3, #0
 33287 0046 01DA     		bge	.L2448
 33288              	.LBE4603:
 33289              	.LBE4602:
4260:src/xeq.c     **** }
 33290              		.loc 1 4260 9 view .LVU9045
 33291 0048 2046     		mov	r0, r4
 33292              	.LVL2620:
 33293              	.L2438:
4261:src/xeq.c     **** 
 33294              		.loc 1 4261 1 view .LVU9046
 33295 004a 38BD     		pop	{r3, r4, r5, pc}
 33296              	.LVL2621:
 33297              	.L2448:
 33298              	.LBB4605:
 33299              	.LBB4604:
5236:src/xeq.c     **** }
 33300              		.loc 1 5236 3 is_stmt 1 view .LVU9047
 33301 004c FFF7FEFF 		bl	xeq_xrom2
 33302              	.LVL2622:
 33303              	.LBE4604:
 33304              	.LBE4605:
4260:src/xeq.c     **** }
 33305              		.loc 1 4260 9 is_stmt 0 view .LVU9048
 33306 0050 2046     		mov	r0, r4
4261:src/xeq.c     **** 
 33307              		.loc 1 4261 1 view .LVU9049
 33308 0052 38BD     		pop	{r3, r4, r5, pc}
 33309              	.LVL2623:
 33310              	.L2440:
 33311              		.cfi_def_cfa_offset 0
 33312              		.cfi_restore 3
 33313              		.cfi_restore 4
 33314              		.cfi_restore 5
 33315              		.cfi_restore 14
4254:src/xeq.c     **** 	// set_lift();
 33316              		.loc 1 4254 10 view .LVU9050
 33317 0054 0020     		movs	r0, #0
 33318              	.LVL2624:
4261:src/xeq.c     **** 
 33319              		.loc 1 4261 1 view .LVU9051
 33320 0056 7047     		bx	lr
 33321              	.LVL2625:
 33322              	.L2441:
 33323              		.cfi_def_cfa_offset 16
 33324              		.cfi_offset 3, -16
ARM GAS  /tmp/ccK8IvWa.s 			page 838


 33325              		.cfi_offset 4, -12
 33326              		.cfi_offset 5, -8
 33327              		.cfi_offset 14, -4
4254:src/xeq.c     **** 	// set_lift();
 33328              		.loc 1 4254 10 view .LVU9052
 33329 0058 0020     		movs	r0, #0
 33330              	.LVL2626:
4261:src/xeq.c     **** 
 33331              		.loc 1 4261 1 view .LVU9053
 33332 005a 38BD     		pop	{r3, r4, r5, pc}
 33333              	.L2450:
 33334              		.align	2
 33335              	.L2449:
 33336 005c 00000000 		.word	xrom
 33337 0060 00000000 		.word	xrom_size
 33338 0064 00000000 		.word	PersistentRam
 33339 0068 00000000 		.word	XromRunning
 33340 006c 00000000 		.word	UserLocalRegs
 33341 0070 00000000 		.word	StateWhileOn
 33342              		.cfi_endproc
 33343              	.LFE230:
 33345              		.section	.text.op_rs,"ax",%progbits
 33346              		.align	1
 33347              		.p2align 2,,3
 33348              		.global	op_rs
 33349              		.syntax unified
 33350              		.thumb
 33351              		.thumb_func
 33352              		.fpu fpv4-sp-d16
 33354              	op_rs:
 33355              	.LVL2627:
 33356              	.LFB249:
5343:src/xeq.c     **** #ifndef REALBUILD
 33357              		.loc 1 5343 27 is_stmt 1 view -0
 33358              		.cfi_startproc
 33359              		@ args = 0, pretend = 0, frame = 0
 33360              		@ frame_needed = 0, uses_anonymous_args = 0
5347:src/xeq.c     **** 		if (State2.trace && (Running || XromRunning)) {
 33361              		.loc 1 5347 2 view .LVU9055
 33362              	.LBB4606:
 33363              	.LBI4606:
 181:src/xeq.c     **** 	return isXROM(state_pc());
 33364              		.loc 1 181 5 view .LVU9056
 33365              	.LBB4607:
 182:src/xeq.c     **** }
 33366              		.loc 1 182 2 view .LVU9057
 33367              	.LBE4607:
 33368              	.LBE4606:
5343:src/xeq.c     **** #ifndef REALBUILD
 33369              		.loc 1 5343 27 is_stmt 0 view .LVU9058
 33370 0000 10B5     		push	{r4, lr}
 33371              		.cfi_def_cfa_offset 8
 33372              		.cfi_offset 4, -8
 33373              		.cfi_offset 14, -4
 33374              	.LBB4609:
 33375              	.LBB4608:
 182:src/xeq.c     **** }
ARM GAS  /tmp/ccK8IvWa.s 			page 839


 33376              		.loc 1 182 9 view .LVU9059
 33377 0002 1C4C     		ldr	r4, .L2461
 33378 0004 B4F8E037 		ldrh	r3, [r4, #2016]
 33379              	.LBE4608:
 33380              	.LBE4609:
5347:src/xeq.c     **** 		if (State2.trace && (Running || XromRunning)) {
 33381              		.loc 1 5347 5 view .LVU9060
 33382 0008 9B0B     		lsrs	r3, r3, #14
 33383 000a 032B     		cmp	r3, #3
 33384 000c 1FD0     		beq	.L2460
5357:src/xeq.c     **** 		set_running_off();
 33385              		.loc 1 5357 2 is_stmt 1 view .LVU9061
5357:src/xeq.c     **** 		set_running_off();
 33386              		.loc 1 5357 6 is_stmt 0 view .LVU9062
 33387 000e 1A4B     		ldr	r3, .L2461+4
5357:src/xeq.c     **** 		set_running_off();
 33388              		.loc 1 5357 5 view .LVU9063
 33389 0010 1A68     		ldr	r2, [r3]
 33390 0012 62B1     		cbz	r2, .L2455
5358:src/xeq.c     **** 	else {
 33391              		.loc 1 5358 3 is_stmt 1 view .LVU9064
 33392              	.LBB4610:
 33393              	.LBI4610:
5560:src/xeq.c     **** 	set_running_off_sst();
 33394              		.loc 1 5560 6 view .LVU9065
 33395              	.LBB4611:
5561:src/xeq.c     **** 	State.entryp = 0;
 33396              		.loc 1 5561 2 view .LVU9066
 33397              	.LBB4612:
 33398              	.LBI4612:
5552:src/xeq.c     **** 	Running = 0;
 33399              		.loc 1 5552 6 view .LVU9067
 33400              	.LBB4613:
5553:src/xeq.c     **** }
 33401              		.loc 1 5553 2 view .LVU9068
 33402              	.LBE4613:
 33403              	.LBE4612:
5562:src/xeq.c     **** 	dot( RCL_annun, 0);
 33404              		.loc 1 5562 15 is_stmt 0 view .LVU9069
 33405 0014 94F8DD27 		ldrb	r2, [r4, #2013]	@ zero_extendqisi2
 33406              	.LBB4616:
 33407              	.LBB4614:
5553:src/xeq.c     **** }
 33408              		.loc 1 5553 10 view .LVU9070
 33409 0018 0021     		movs	r1, #0
 33410              	.LBE4614:
 33411              	.LBE4616:
5562:src/xeq.c     **** 	dot( RCL_annun, 0);
 33412              		.loc 1 5562 15 view .LVU9071
 33413 001a 61F30412 		bfi	r2, r1, #4, #1
 33414 001e 84F8DD27 		strb	r2, [r4, #2013]
5563:src/xeq.c     **** }
 33415              		.loc 1 5563 2 view .LVU9072
 33416 0022 8A20     		movs	r0, #138
 33417              	.LVL2628:
5563:src/xeq.c     **** }
 33418              		.loc 1 5563 2 view .LVU9073
ARM GAS  /tmp/ccK8IvWa.s 			page 840


 33419              	.LBE4611:
 33420              	.LBE4610:
5364:src/xeq.c     **** 
 33421              		.loc 1 5364 1 view .LVU9074
 33422 0024 BDE81040 		pop	{r4, lr}
 33423              		.cfi_remember_state
 33424              		.cfi_restore 14
 33425              		.cfi_restore 4
 33426              		.cfi_def_cfa_offset 0
 33427              	.LBB4619:
 33428              	.LBB4618:
 33429              	.LBB4617:
 33430              	.LBB4615:
5553:src/xeq.c     **** }
 33431              		.loc 1 5553 10 view .LVU9075
 33432 0028 1960     		str	r1, [r3]
 33433              	.LBE4615:
 33434              	.LBE4617:
5562:src/xeq.c     **** 	dot( RCL_annun, 0);
 33435              		.loc 1 5562 2 is_stmt 1 view .LVU9076
5563:src/xeq.c     **** }
 33436              		.loc 1 5563 2 view .LVU9077
 33437 002a FFF7FEBF 		b	dot
 33438              	.LVL2629:
 33439              	.L2455:
 33440              		.cfi_restore_state
5563:src/xeq.c     **** }
 33441              		.loc 1 5563 2 is_stmt 0 view .LVU9078
 33442              	.LBE4618:
 33443              	.LBE4619:
5360:src/xeq.c     **** 		if (RetStkPtr == 0)
 33444              		.loc 1 5360 3 is_stmt 1 view .LVU9079
 33445 002e FFF7FEFF 		bl	set_running_on
 33446              	.LVL2630:
5361:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
 33447              		.loc 1 5361 3 view .LVU9080
5361:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
 33448              		.loc 1 5361 6 is_stmt 0 view .LVU9081
 33449 0032 B4F9E237 		ldrsh	r3, [r4, #2018]
 33450 0036 4BB9     		cbnz	r3, .L2451
5362:src/xeq.c     **** 	}
 33451              		.loc 1 5362 4 is_stmt 1 view .LVU9082
5362:src/xeq.c     **** 	}
 33452              		.loc 1 5362 10 is_stmt 0 view .LVU9083
 33453 0038 104B     		ldr	r3, .L2461+8
5362:src/xeq.c     **** 	}
 33454              		.loc 1 5362 26 view .LVU9084
 33455 003a B4F8E027 		ldrh	r2, [r4, #2016]
5362:src/xeq.c     **** 	}
 33456              		.loc 1 5362 10 view .LVU9085
 33457 003e 1B68     		ldr	r3, [r3]
5362:src/xeq.c     **** 	}
 33458              		.loc 1 5362 24 view .LVU9086
 33459 0040 4FF6FF71 		movw	r1, #65535
 33460 0044 A4F8E217 		strh	r1, [r4, #2018]	@ movhi
 33461 0048 23F8022C 		strh	r2, [r3, #-2]	@ movhi
 33462              	.L2451:
ARM GAS  /tmp/ccK8IvWa.s 			page 841


5364:src/xeq.c     **** 
 33463              		.loc 1 5364 1 view .LVU9087
 33464 004c 10BD     		pop	{r4, pc}
 33465              	.LVL2631:
 33466              	.L2460:
5348:src/xeq.c     **** 			Running = XromRunning = 0;
 33467              		.loc 1 5348 3 is_stmt 1 view .LVU9088
5348:src/xeq.c     **** 			Running = XromRunning = 0;
 33468              		.loc 1 5348 7 is_stmt 0 view .LVU9089
 33469 004e 0C4B     		ldr	r3, .L2461+12
5348:src/xeq.c     **** 			Running = XromRunning = 0;
 33470              		.loc 1 5348 6 view .LVU9090
 33471 0050 93F91730 		ldrsb	r3, [r3, #23]
 33472 0054 002B     		cmp	r3, #0
 33473 0056 09DA     		bge	.L2453
5348:src/xeq.c     **** 			Running = XromRunning = 0;
 33474              		.loc 1 5348 24 discriminator 1 view .LVU9091
 33475 0058 074B     		ldr	r3, .L2461+4
5348:src/xeq.c     **** 			Running = XromRunning = 0;
 33476              		.loc 1 5348 32 discriminator 1 view .LVU9092
 33477 005a 0A4A     		ldr	r2, .L2461+16
 33478 005c 1868     		ldr	r0, [r3]
 33479              	.LVL2632:
5348:src/xeq.c     **** 			Running = XromRunning = 0;
 33480              		.loc 1 5348 32 discriminator 1 view .LVU9093
 33481 005e 1168     		ldr	r1, [r2]
 33482 0060 0143     		orrs	r1, r0, r1
 33483 0062 03D0     		beq	.L2453
5349:src/xeq.c     **** 		}
 33484              		.loc 1 5349 4 is_stmt 1 view .LVU9094
5349:src/xeq.c     **** 		}
 33485              		.loc 1 5349 26 is_stmt 0 view .LVU9095
 33486 0064 0021     		movs	r1, #0
 33487 0066 1160     		str	r1, [r2]
5349:src/xeq.c     **** 		}
 33488              		.loc 1 5349 12 view .LVU9096
 33489 0068 1960     		str	r1, [r3]
5364:src/xeq.c     **** 
 33490              		.loc 1 5364 1 view .LVU9097
 33491 006a 10BD     		pop	{r4, pc}
 33492              	.L2453:
5352:src/xeq.c     **** 		}
 33493              		.loc 1 5352 4 is_stmt 1 view .LVU9098
5364:src/xeq.c     **** 
 33494              		.loc 1 5364 1 is_stmt 0 view .LVU9099
 33495 006c BDE81040 		pop	{r4, lr}
 33496              		.cfi_restore 14
 33497              		.cfi_restore 4
 33498              		.cfi_def_cfa_offset 0
5352:src/xeq.c     **** 		}
 33499              		.loc 1 5352 4 view .LVU9100
 33500 0070 FFF7FEBF 		b	xeq_xrom2
 33501              	.LVL2633:
 33502              	.L2462:
 33503              		.align	2
 33504              	.L2461:
 33505 0074 00000000 		.word	PersistentRam
ARM GAS  /tmp/ccK8IvWa.s 			page 842


 33506 0078 00000000 		.word	Running
 33507 007c 00000000 		.word	RetStk
 33508 0080 00000000 		.word	StateWhileOn
 33509 0084 00000000 		.word	XromRunning
 33510              		.cfi_endproc
 33511              	.LFE249:
 33513              		.section	.text.xeqprog,"ax",%progbits
 33514              		.align	1
 33515              		.p2align 2,,3
 33516              		.global	xeqprog
 33517              		.syntax unified
 33518              		.thumb
 33519              		.thumb_func
 33520              		.fpu fpv4-sp-d16
 33522              	xeqprog:
 33523              	.LFB247:
5251:src/xeq.c     **** 	int state = 0;
 33524              		.loc 1 5251 1 is_stmt 1 view -0
 33525              		.cfi_startproc
 33526              		@ args = 0, pretend = 0, frame = 0
 33527              		@ frame_needed = 0, uses_anonymous_args = 0
5252:src/xeq.c     **** #ifdef DM42
 33528              		.loc 1 5252 2 view .LVU9102
 33529              	.LVL2634:
5254:src/xeq.c     **** #else
 33530              		.loc 1 5254 2 view .LVU9103
5251:src/xeq.c     **** 	int state = 0;
 33531              		.loc 1 5251 1 is_stmt 0 view .LVU9104
 33532 0000 38B5     		push	{r3, r4, r5, lr}
 33533              		.cfi_def_cfa_offset 16
 33534              		.cfi_offset 3, -16
 33535              		.cfi_offset 4, -12
 33536              		.cfi_offset 5, -8
 33537              		.cfi_offset 14, -4
5254:src/xeq.c     **** #else
 33538              		.loc 1 5254 7 view .LVU9105
 33539 0002 1D4C     		ldr	r4, .L2488
 33540 0004 1D4D     		ldr	r5, .L2488+4
5254:src/xeq.c     **** #else
 33541              		.loc 1 5254 5 view .LVU9106
 33542 0006 2368     		ldr	r3, [r4]
 33543 0008 0BB9     		cbnz	r3, .L2464
5254:src/xeq.c     **** #else
 33544              		.loc 1 5254 15 discriminator 1 view .LVU9107
 33545 000a 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 33546 000c E3B1     		cbz	r3, .L2469
 33547              	.L2464:
 33548              	.LBB4620:
5260:src/xeq.c     **** #else
 33549              		.loc 1 5260 4 is_stmt 1 view .LVU9108
 33550              	.LBB4621:
 33551              	.LBI4621:
1762:src/xeq.c     ****     int f, t;
 33552              		.loc 1 1762 6 view .LVU9109
 33553              	.LBB4622:
1763:src/xeq.c     ****     t = get_rtc_ticks();
 33554              		.loc 1 1763 5 view .LVU9110
ARM GAS  /tmp/ccK8IvWa.s 			page 843


1764:src/xeq.c     ****     f = ((t & 0xff)*10)>>8; // tenths of a second;
 33555              		.loc 1 1764 5 view .LVU9111
1764:src/xeq.c     ****     f = ((t & 0xff)*10)>>8; // tenths of a second;
 33556              		.loc 1 1764 9 is_stmt 0 view .LVU9112
 33557 000e 1C4B     		ldr	r3, .L2488+8
 33558 0010 9847     		blx	r3
 33559              	.LVL2635:
1765:src/xeq.c     ****     return f;
 33560              		.loc 1 1765 5 is_stmt 1 view .LVU9113
1766:src/xeq.c     ****  }
 33561              		.loc 1 1766 5 view .LVU9114
1766:src/xeq.c     ****  }
 33562              		.loc 1 1766 5 is_stmt 0 view .LVU9115
 33563              	.LBE4622:
 33564              	.LBE4621:
5264:src/xeq.c     **** #else
 33565              		.loc 1 5264 3 is_stmt 1 view .LVU9116
5268:src/xeq.c     **** 		finish_display();
 33566              		.loc 1 5268 3 view .LVU9117
 33567              	.LBB4624:
 33568              	.LBB4623:
1765:src/xeq.c     ****     return f;
 33569              		.loc 1 1765 13 is_stmt 0 view .LVU9118
 33570 0012 C1B2     		uxtb	r1, r0
1765:src/xeq.c     ****     return f;
 33571              		.loc 1 1765 20 view .LVU9119
 33572 0014 01EB8101 		add	r1, r1, r1, lsl #2
 33573              	.LBE4623:
 33574              	.LBE4624:
5268:src/xeq.c     **** 		finish_display();
 33575              		.loc 1 5268 3 view .LVU9120
 33576 0018 B1F5207F 		cmp	r1, #640
 33577 001c 2CBF     		ite	cs
 33578 001e 0021     		movcs	r1, #0
 33579 0020 0121     		movcc	r1, #1
 33580 0022 8A20     		movs	r0, #138
 33581              	.LVL2636:
5268:src/xeq.c     **** 		finish_display();
 33582              		.loc 1 5268 3 view .LVU9121
 33583 0024 FFF7FEFF 		bl	dot
 33584              	.LVL2637:
5269:src/xeq.c     **** #ifdef DM42
 33585              		.loc 1 5269 3 is_stmt 1 view .LVU9122
 33586 0028 FFF7FEFF 		bl	finish_display
 33587              	.LVL2638:
5271:src/xeq.c     **** #else		  
 33588              		.loc 1 5271 3 view .LVU9123
5271:src/xeq.c     **** #else		  
 33589              		.loc 1 5271 9 is_stmt 0 view .LVU9124
 33590 002c 06E0     		b	.L2466
 33591              	.L2486:
5271:src/xeq.c     **** #else		  
 33592              		.loc 1 5271 19 discriminator 1 view .LVU9125
 33593 002e 2368     		ldr	r3, [r4]
 33594 0030 53B1     		cbz	r3, .L2469
5275:src/xeq.c     **** 			if (is_key_pressed()) {
 33595              		.loc 1 5275 5 view .LVU9126
ARM GAS  /tmp/ccK8IvWa.s 			page 844


 33596 0032 FFF7FEFF 		bl	xeq_single
 33597              	.LVL2639:
5276:src/xeq.c     **** 				// Key press or heart beat
 33598              		.loc 1 5276 4 is_stmt 1 view .LVU9127
5276:src/xeq.c     **** 				// Key press or heart beat
 33599              		.loc 1 5276 8 is_stmt 0 view .LVU9128
 33600 0036 FFF7FEFF 		bl	is_key_pressed
 33601              	.LVL2640:
5276:src/xeq.c     **** 				// Key press or heart beat
 33602              		.loc 1 5276 7 view .LVU9129
 33603 003a 10B9     		cbnz	r0, .L2467
 33604              	.L2466:
5275:src/xeq.c     **** 			if (is_key_pressed()) {
 33605              		.loc 1 5275 5 is_stmt 1 view .LVU9130
5271:src/xeq.c     **** #else		  
 33606              		.loc 1 5271 9 view .LVU9131
5271:src/xeq.c     **** #else		  
 33607              		.loc 1 5271 10 is_stmt 0 view .LVU9132
 33608 003c 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5271:src/xeq.c     **** #else		  
 33609              		.loc 1 5271 9 view .LVU9133
 33610 003e 002B     		cmp	r3, #0
 33611 0040 F5D0     		beq	.L2486
 33612              	.L2467:
 33613              	.LBE4620:
5284:src/xeq.c     **** #else
 33614              		.loc 1 5284 2 is_stmt 1 view .LVU9134
5284:src/xeq.c     **** #else
 33615              		.loc 1 5284 5 is_stmt 0 view .LVU9135
 33616 0042 2368     		ldr	r3, [r4]
 33617 0044 03B1     		cbz	r3, .L2469
 33618              	.L2463:
5301:src/xeq.c     **** 
 33619              		.loc 1 5301 1 view .LVU9136
 33620 0046 38BD     		pop	{r3, r4, r5, pc}
 33621              	.L2469:
5284:src/xeq.c     **** #else
 33622              		.loc 1 5284 2 is_stmt 1 view .LVU9137
5284:src/xeq.c     **** #else
 33623              		.loc 1 5284 19 is_stmt 0 view .LVU9138
 33624 0048 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5284:src/xeq.c     **** #else
 33625              		.loc 1 5284 16 view .LVU9139
 33626 004a 002B     		cmp	r3, #0
 33627 004c FBD1     		bne	.L2463
5289:src/xeq.c     **** 		ShowRPN = 1;	// display() may turn it off again
 33628              		.loc 1 5289 3 is_stmt 1 view .LVU9140
5290:src/xeq.c     **** 		display();
 33629              		.loc 1 5290 11 is_stmt 0 view .LVU9141
 33630 004e 0D4C     		ldr	r4, .L2488+12
5289:src/xeq.c     **** 		ShowRPN = 1;	// display() may turn it off again
 33631              		.loc 1 5289 3 view .LVU9142
 33632 0050 8A20     		movs	r0, #138
 33633 0052 FFF7FEFF 		bl	clr_dot
 33634              	.LVL2641:
5290:src/xeq.c     **** 		display();
 33635              		.loc 1 5290 3 is_stmt 1 view .LVU9143
ARM GAS  /tmp/ccK8IvWa.s 			page 845


5290:src/xeq.c     **** 		display();
 33636              		.loc 1 5290 11 is_stmt 0 view .LVU9144
 33637 0056 0123     		movs	r3, #1
 33638 0058 2360     		str	r3, [r4]
5291:src/xeq.c     **** 		if (ShowRPN) {
 33639              		.loc 1 5291 3 is_stmt 1 view .LVU9145
 33640 005a FFF7FEFF 		bl	display
 33641              	.LVL2642:
5292:src/xeq.c     **** 			set_dot(RPN);
 33642              		.loc 1 5292 3 view .LVU9146
5292:src/xeq.c     **** 			set_dot(RPN);
 33643              		.loc 1 5292 6 is_stmt 0 view .LVU9147
 33644 005e 2368     		ldr	r3, [r4]
 33645 0060 1BB9     		cbnz	r3, .L2487
 33646              	.L2471:
5298:src/xeq.c     **** #endif
 33647              		.loc 1 5298 8 is_stmt 1 view .LVU9148
5298:src/xeq.c     **** #endif
 33648              		.loc 1 5298 20 is_stmt 0 view .LVU9149
 33649 0062 094B     		ldr	r3, .L2488+16
 33650 0064 0122     		movs	r2, #1
 33651 0066 1A60     		str	r2, [r3]
5301:src/xeq.c     **** 
 33652              		.loc 1 5301 1 view .LVU9150
 33653 0068 38BD     		pop	{r3, r4, r5, pc}
 33654              	.L2487:
5293:src/xeq.c     **** 			finish_display();
 33655              		.loc 1 5293 4 is_stmt 1 view .LVU9151
 33656 006a 8D20     		movs	r0, #141
 33657 006c FFF7FEFF 		bl	set_dot
 33658              	.LVL2643:
5294:src/xeq.c     **** 		}
 33659              		.loc 1 5294 4 view .LVU9152
 33660 0070 FFF7FEFF 		bl	finish_display
 33661              	.LVL2644:
 33662 0074 F5E7     		b	.L2471
 33663              	.L2489:
 33664 0076 00BF     		.align	2
 33665              	.L2488:
 33666 0078 00000000 		.word	Running
 33667 007c 00000000 		.word	Pause
 33668 0080 B9040008 		.word	134218937
 33669 0084 00000000 		.word	ShowRPN
 33670 0088 00000000 		.word	JustStopped
 33671              		.cfi_endproc
 33672              	.LFE247:
 33674              		.section	.text.xeq_sst_bst,"ax",%progbits
 33675              		.align	1
 33676              		.p2align 2,,3
 33677              		.global	xeq_sst_bst
 33678              		.syntax unified
 33679              		.thumb
 33680              		.thumb_func
 33681              		.fpu fpv4-sp-d16
 33683              	xeq_sst_bst:
 33684              	.LVL2645:
 33685              	.LFB248:
ARM GAS  /tmp/ccK8IvWa.s 			page 846


5306:src/xeq.c     **** 	opcode op;
 33686              		.loc 1 5306 1 view -0
 33687              		.cfi_startproc
 33688              		@ args = 0, pretend = 0, frame = 0
 33689              		@ frame_needed = 0, uses_anonymous_args = 0
5307:src/xeq.c     **** 
 33690              		.loc 1 5307 2 view .LVU9154
5309:src/xeq.c     **** 	if (kind == -1)
 33691              		.loc 1 5309 2 view .LVU9155
 33692              	.LBB4625:
 33693              	.LBI4625:
4188:src/xeq.c     **** 	// extern int IntMaxWindow;
 33694              		.loc 1 4188 6 view .LVU9156
 33695              	.LBB4626:
4191:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 33696              		.loc 1 4191 2 view .LVU9157
 33697              	.LBE4626:
 33698              	.LBE4625:
5306:src/xeq.c     **** 	opcode op;
 33699              		.loc 1 5306 1 is_stmt 0 view .LVU9158
 33700 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 33701              		.cfi_def_cfa_offset 24
 33702              		.cfi_offset 4, -24
 33703              		.cfi_offset 5, -20
 33704              		.cfi_offset 6, -16
 33705              		.cfi_offset 7, -12
 33706              		.cfi_offset 8, -8
 33707              		.cfi_offset 14, -4
 33708              	.LBB4629:
 33709              	.LBB4627:
4191:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 33710              		.loc 1 4191 16 view .LVU9159
 33711 0004 244C     		ldr	r4, .L2503
 33712 0006 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
4192:src/xeq.c     **** }
 33713              		.loc 1 4192 15 view .LVU9160
 33714 0008 0026     		movs	r6, #0
4191:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 33715              		.loc 1 4191 16 view .LVU9161
 33716 000a 6FF3C503 		bfc	r3, #3, #3
 33717              	.LBE4627:
 33718              	.LBE4629:
5310:src/xeq.c     **** 		decpc();
 33719              		.loc 1 5310 5 view .LVU9162
 33720 000e 411C     		adds	r1, r0, #1
 33721              	.LBB4630:
 33722              	.LBB4628:
4191:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 33723              		.loc 1 4191 16 view .LVU9163
 33724 0010 2375     		strb	r3, [r4, #20]
4192:src/xeq.c     **** }
 33725              		.loc 1 4192 2 is_stmt 1 view .LVU9164
4192:src/xeq.c     **** }
 33726              		.loc 1 4192 15 is_stmt 0 view .LVU9165
 33727 0012 6674     		strb	r6, [r4, #17]
 33728              	.LBE4628:
 33729              	.LBE4630:
ARM GAS  /tmp/ccK8IvWa.s 			page 847


5310:src/xeq.c     **** 		decpc();
 33730              		.loc 1 5310 2 is_stmt 1 view .LVU9166
5310:src/xeq.c     **** 		decpc();
 33731              		.loc 1 5310 5 is_stmt 0 view .LVU9167
 33732 0014 2FD0     		beq	.L2499
5313:src/xeq.c     **** 		// Display the step
 33733              		.loc 1 5313 2 is_stmt 1 view .LVU9168
5313:src/xeq.c     **** 		// Display the step
 33734              		.loc 1 5313 6 is_stmt 0 view .LVU9169
 33735 0016 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
5313:src/xeq.c     **** 		// Display the step
 33736              		.loc 1 5313 5 view .LVU9170
 33737 0018 5B06     		lsls	r3, r3, #25
 33738 001a 0546     		mov	r5, r0
 33739 001c 08D4     		bmi	.L2500
5332:src/xeq.c     **** 		// Key down in program mode
 33740              		.loc 1 5332 7 is_stmt 1 view .LVU9171
5332:src/xeq.c     **** 		// Key down in program mode
 33741              		.loc 1 5332 10 is_stmt 0 view .LVU9172
 33742 001e 08B1     		cbz	r0, .L2501
 33743              	.LVL2646:
 33744              	.L2490:
5337:src/xeq.c     **** 
 33745              		.loc 1 5337 1 view .LVU9173
 33746 0020 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 33747              	.LVL2647:
 33748              	.L2501:
5334:src/xeq.c     **** 		OpCode = 0;
 33749              		.loc 1 5334 3 is_stmt 1 view .LVU9174
 33750 0024 FFF7FEFF 		bl	incpc
 33751              	.LVL2648:
5335:src/xeq.c     **** 	}
 33752              		.loc 1 5335 3 view .LVU9175
5335:src/xeq.c     **** 	}
 33753              		.loc 1 5335 10 is_stmt 0 view .LVU9176
 33754 0028 1C4B     		ldr	r3, .L2503+4
 33755 002a 1D60     		str	r5, [r3]
5337:src/xeq.c     **** 
 33756              		.loc 1 5337 1 view .LVU9177
 33757 002c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 33758              	.LVL2649:
 33759              	.L2500:
5315:src/xeq.c     **** 		print_step(op);
 33760              		.loc 1 5315 3 is_stmt 1 view .LVU9178
5315:src/xeq.c     **** 		print_step(op);
 33761              		.loc 1 5315 16 is_stmt 0 view .LVU9179
 33762 0030 1B4B     		ldr	r3, .L2503+8
5315:src/xeq.c     **** 		print_step(op);
 33763              		.loc 1 5315 8 view .LVU9180
 33764 0032 B3F8E007 		ldrh	r0, [r3, #2016]
 33765              	.LVL2650:
5315:src/xeq.c     **** 		print_step(op);
 33766              		.loc 1 5315 8 view .LVU9181
 33767 0036 FFF7FEFF 		bl	getprog
 33768              	.LVL2651:
 33769 003a 0746     		mov	r7, r0
 33770              	.LVL2652:
ARM GAS  /tmp/ccK8IvWa.s 			page 848


5316:src/xeq.c     **** 		if (kind == 1) {
 33771              		.loc 1 5316 3 is_stmt 1 view .LVU9182
 33772 003c FFF7FEFF 		bl	print_step
 33773              	.LVL2653:
5317:src/xeq.c     **** 			// Execute the step on key up
 33774              		.loc 1 5317 3 view .LVU9183
5317:src/xeq.c     **** 			// Execute the step on key up
 33775              		.loc 1 5317 6 is_stmt 0 view .LVU9184
 33776 0040 012D     		cmp	r5, #1
 33777 0042 EDD1     		bne	.L2490
5320:src/xeq.c     **** #endif
 33778              		.loc 1 5320 4 is_stmt 1 view .LVU9185
5320:src/xeq.c     **** #endif
 33779              		.loc 1 5320 15 is_stmt 0 view .LVU9186
 33780 0044 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
 33781              	.LBB4631:
 33782              	.LBB4632:
5557:src/xeq.c     **** }
 33783              		.loc 1 5557 10 view .LVU9187
 33784 0046 DFF85C80 		ldr	r8, .L2503+12
 33785              	.LBE4632:
 33786              	.LBE4631:
5320:src/xeq.c     **** #endif
 33787              		.loc 1 5320 15 view .LVU9188
 33788 004a 43F00203 		orr	r3, r3, #2
 33789 004e 2376     		strb	r3, [r4, #24]
5322:src/xeq.c     **** 			incpc();
 33790              		.loc 1 5322 4 is_stmt 1 view .LVU9189
 33791              	.LBB4634:
 33792              	.LBI4631:
5556:src/xeq.c     **** 	Running = 1;
 33793              		.loc 1 5556 6 view .LVU9190
 33794              	.LBB4633:
5557:src/xeq.c     **** }
 33795              		.loc 1 5557 2 view .LVU9191
5557:src/xeq.c     **** }
 33796              		.loc 1 5557 10 is_stmt 0 view .LVU9192
 33797 0050 C8F80050 		str	r5, [r8]
 33798              	.LBE4633:
 33799              	.LBE4634:
5323:src/xeq.c     **** 			xeq(op);
 33800              		.loc 1 5323 4 is_stmt 1 view .LVU9193
 33801 0054 FFF7FEFF 		bl	incpc
 33802              	.LVL2654:
5324:src/xeq.c     **** #ifndef REALBUILD
 33803              		.loc 1 5324 4 view .LVU9194
 33804 0058 3846     		mov	r0, r7
 33805 005a FFF7FEFF 		bl	xeq
 33806              	.LVL2655:
5326:src/xeq.c     **** #endif
 33807              		.loc 1 5326 4 view .LVU9195
5326:src/xeq.c     **** #endif
 33808              		.loc 1 5326 15 is_stmt 0 view .LVU9196
 33809 005e 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
 33810              	.LBB4635:
 33811              	.LBB4636:
5235:src/xeq.c     **** 		xeq_xrom2();
ARM GAS  /tmp/ccK8IvWa.s 			page 849


 33812              		.loc 1 5235 5 view .LVU9197
 33813 0060 94F91720 		ldrsb	r2, [r4, #23]
 33814              	.LBE4636:
 33815              	.LBE4635:
5326:src/xeq.c     **** #endif
 33816              		.loc 1 5326 15 view .LVU9198
 33817 0064 66F34103 		bfi	r3, r6, #1, #1
 33818              	.LBB4640:
 33819              	.LBB4637:
5235:src/xeq.c     **** 		xeq_xrom2();
 33820              		.loc 1 5235 5 view .LVU9199
 33821 0068 002A     		cmp	r2, #0
 33822              	.LBE4637:
 33823              	.LBE4640:
5326:src/xeq.c     **** #endif
 33824              		.loc 1 5326 15 view .LVU9200
 33825 006a 2376     		strb	r3, [r4, #24]
5328:src/xeq.c     **** 			set_running_off_sst();
 33826              		.loc 1 5328 4 is_stmt 1 view .LVU9201
 33827              	.LBB4641:
 33828              	.LBI4635:
5233:src/xeq.c     **** 	// We split the routine in two parts for debugging only
 33829              		.loc 1 5233 6 view .LVU9202
 33830              	.LBB4638:
5235:src/xeq.c     **** 		xeq_xrom2();
 33831              		.loc 1 5235 2 view .LVU9203
5235:src/xeq.c     **** 		xeq_xrom2();
 33832              		.loc 1 5235 5 is_stmt 0 view .LVU9204
 33833 006c 11DA     		bge	.L2502
 33834              	.L2497:
 33835              	.LBE4638:
 33836              	.LBE4641:
5329:src/xeq.c     **** 		}
 33837              		.loc 1 5329 4 is_stmt 1 view .LVU9205
 33838              	.LBB4642:
 33839              	.LBI4642:
5552:src/xeq.c     **** 	Running = 0;
 33840              		.loc 1 5552 6 view .LVU9206
 33841              	.LBB4643:
5553:src/xeq.c     **** }
 33842              		.loc 1 5553 2 view .LVU9207
5553:src/xeq.c     **** }
 33843              		.loc 1 5553 10 is_stmt 0 view .LVU9208
 33844 006e 0023     		movs	r3, #0
 33845 0070 C8F80030 		str	r3, [r8]
5554:src/xeq.c     **** 
 33846              		.loc 1 5554 1 view .LVU9209
 33847 0074 D4E7     		b	.L2490
 33848              	.LVL2656:
 33849              	.L2499:
5554:src/xeq.c     **** 
 33850              		.loc 1 5554 1 view .LVU9210
 33851              	.LBE4643:
 33852              	.LBE4642:
5311:src/xeq.c     **** 
 33853              		.loc 1 5311 3 is_stmt 1 view .LVU9211
 33854 0076 FFF7FEFF 		bl	decpc
ARM GAS  /tmp/ccK8IvWa.s 			page 850


 33855              	.LVL2657:
5313:src/xeq.c     **** 		// Display the step
 33856              		.loc 1 5313 2 view .LVU9212
5313:src/xeq.c     **** 		// Display the step
 33857              		.loc 1 5313 6 is_stmt 0 view .LVU9213
 33858 007a A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
5313:src/xeq.c     **** 		// Display the step
 33859              		.loc 1 5313 5 view .LVU9214
 33860 007c 5A06     		lsls	r2, r3, #25
 33861 007e CFD5     		bpl	.L2490
5315:src/xeq.c     **** 		print_step(op);
 33862              		.loc 1 5315 3 is_stmt 1 view .LVU9215
5315:src/xeq.c     **** 		print_step(op);
 33863              		.loc 1 5315 16 is_stmt 0 view .LVU9216
 33864 0080 074B     		ldr	r3, .L2503+8
5315:src/xeq.c     **** 		print_step(op);
 33865              		.loc 1 5315 8 view .LVU9217
 33866 0082 B3F8E007 		ldrh	r0, [r3, #2016]
 33867 0086 FFF7FEFF 		bl	getprog
 33868              	.LVL2658:
5316:src/xeq.c     **** 		if (kind == 1) {
 33869              		.loc 1 5316 3 is_stmt 1 view .LVU9218
5337:src/xeq.c     **** 
 33870              		.loc 1 5337 1 is_stmt 0 view .LVU9219
 33871 008a BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 33872              		.cfi_remember_state
 33873              		.cfi_restore 14
 33874              		.cfi_restore 8
 33875              		.cfi_restore 7
 33876              		.cfi_restore 6
 33877              		.cfi_restore 5
 33878              		.cfi_restore 4
 33879              		.cfi_def_cfa_offset 0
5316:src/xeq.c     **** 		if (kind == 1) {
 33880              		.loc 1 5316 3 view .LVU9220
 33881 008e FFF7FEBF 		b	print_step
 33882              	.LVL2659:
 33883              	.L2502:
 33884              		.cfi_restore_state
 33885              	.LBB4644:
 33886              	.LBB4639:
5236:src/xeq.c     **** }
 33887              		.loc 1 5236 3 is_stmt 1 view .LVU9221
 33888 0092 FFF7FEFF 		bl	xeq_xrom2
 33889              	.LVL2660:
 33890 0096 EAE7     		b	.L2497
 33891              	.L2504:
 33892              		.align	2
 33893              	.L2503:
 33894 0098 00000000 		.word	StateWhileOn
 33895 009c 00000000 		.word	OpCode
 33896 00a0 00000000 		.word	PersistentRam
 33897 00a4 00000000 		.word	Running
 33898              	.LBE4639:
 33899              	.LBE4644:
 33900              		.cfi_endproc
 33901              	.LFE248:
ARM GAS  /tmp/ccK8IvWa.s 			page 851


 33903              		.section	.text.init_34s,"ax",%progbits
 33904              		.align	1
 33905              		.p2align 2,,3
 33906              		.global	init_34s
 33907              		.syntax unified
 33908              		.thumb
 33909              		.thumb_func
 33910              		.fpu fpv4-sp-d16
 33912              	init_34s:
 33913              	.LFB270:
6082:src/xeq.c     **** 
6083:src/xeq.c     **** 
6084:src/xeq.c     **** /*
6085:src/xeq.c     ****  *  Debugging output for the console version
6086:src/xeq.c     ****  */
6087:src/xeq.c     **** #if defined(DEBUG) && defined(CONSOLE) && !defined(WP34STEST)
6088:src/xeq.c     **** extern unsigned char remap_chars(unsigned char ch);
6089:src/xeq.c     **** 
6090:src/xeq.c     **** static int compare(s_opcode a1, s_opcode a2, int cata) {
6091:src/xeq.c     **** 	char b1[16], b2[16];
6092:src/xeq.c     **** 	const unsigned char *s1, *s2;
6093:src/xeq.c     **** 	int i;
6094:src/xeq.c     **** 
6095:src/xeq.c     **** 	xset(b1, 0, sizeof(b1));
6096:src/xeq.c     **** 	xset(b2, 0, sizeof(b2));
6097:src/xeq.c     **** 	s1 = (unsigned char *)catcmd(a1, b1);
6098:src/xeq.c     **** 	s2 = (unsigned char *)catcmd(a2, b2);
6099:src/xeq.c     **** 	if (*s1 == COMPLEX_PREFIX) s1++;
6100:src/xeq.c     **** 	if (*s2 == COMPLEX_PREFIX) s2++;
6101:src/xeq.c     **** 
6102:src/xeq.c     **** 	for (i=0;;i++) {
6103:src/xeq.c     **** 		unsigned char c1 = *s1++;
6104:src/xeq.c     **** 		unsigned char c2 = *s2++;
6105:src/xeq.c     **** 		c1 = remap_chars(c1);
6106:src/xeq.c     **** 		c2 = remap_chars(c2);
6107:src/xeq.c     **** 
6108:src/xeq.c     **** 		if (c1 != c2) {
6109:src/xeq.c     **** 			if (c1 > c2) {
6110:src/xeq.c     **** 				return 1;
6111:src/xeq.c     **** 			}
6112:src/xeq.c     **** 			return 0;
6113:src/xeq.c     **** 		} else if (c1 == '\0')
6114:src/xeq.c     **** 			break;
6115:src/xeq.c     **** 	}
6116:src/xeq.c     **** 	return 0;
6117:src/xeq.c     **** }
6118:src/xeq.c     **** 
6119:src/xeq.c     **** static void check_cat(const enum catalogues cata, const char *name) {
6120:src/xeq.c     **** 	int i;
6121:src/xeq.c     **** 	char b1[16], b2[16];
6122:src/xeq.c     **** 	const int oldcata = State2.catalogue;
6123:src/xeq.c     **** 	int n;
6124:src/xeq.c     **** 
6125:src/xeq.c     **** 	State2.catalogue = cata;
6126:src/xeq.c     **** 	n = current_catalogue_max();
6127:src/xeq.c     **** 	for (i=1; i<n; i++) {
6128:src/xeq.c     **** 		opcode cold = current_catalogue(i-1);
ARM GAS  /tmp/ccK8IvWa.s 			page 852


6129:src/xeq.c     **** 		opcode c = current_catalogue(i);
6130:src/xeq.c     **** 		if (compare(cold, c, cata))
6131:src/xeq.c     **** 			error("catalogue %s row %04x / %04x  %d / %d: %04o / %04o (%s / %s)", name, cold, c, i-1, i,
6132:src/xeq.c     **** 					0xff & cold, 0xff & c,
6133:src/xeq.c     **** 					catcmd(cold, b1), catcmd(c, b2));
6134:src/xeq.c     **** 	}
6135:src/xeq.c     **** 	State2.catalogue = oldcata;
6136:src/xeq.c     **** }
6137:src/xeq.c     **** 
6138:src/xeq.c     **** static void check_const_cat(void) {
6139:src/xeq.c     **** 	int i;
6140:src/xeq.c     **** 	char b1[16], b2[16];
6141:src/xeq.c     **** 	char p1[64], p2[64];
6142:src/xeq.c     **** 
6143:src/xeq.c     **** 	for (i=1; i<NUM_CONSTS_CAT; i++) {
6144:src/xeq.c     **** 		if (compare(CONST(i-1), CONST(i), 0)) {
6145:src/xeq.c     **** 			prettify(catcmd(CONST(i-1), b1), p1, 0);
6146:src/xeq.c     **** 			prettify(catcmd(CONST(i), b2), p2, 0);
6147:src/xeq.c     **** 			error("constants row %d / %d: %s / %s", i, i+1, p1, p2);
6148:src/xeq.c     **** 		}
6149:src/xeq.c     **** 	}
6150:src/xeq.c     **** }
6151:src/xeq.c     **** 
6152:src/xeq.c     **** static void bad_table(const char *t, int row, const char *n, int nlen) {
6153:src/xeq.c     **** 	char buf[64], name[20];
6154:src/xeq.c     **** 	int i;
6155:src/xeq.c     **** 
6156:src/xeq.c     **** 	for (i=0; i<nlen; i++)
6157:src/xeq.c     **** 		name[i] = n[i];
6158:src/xeq.c     **** 	name[nlen] = '\0';
6159:src/xeq.c     **** 	prettify(name, buf, 0);
6160:src/xeq.c     **** 	error("%s table row %d: %6s", t, row, buf);
6161:src/xeq.c     **** }
6162:src/xeq.c     **** 
6163:src/xeq.c     **** #endif
6164:src/xeq.c     **** 
6165:src/xeq.c     **** /* Main initialisation routine that sets things up for us.
6166:src/xeq.c     ****  * Returns a nonzero result if it has cleared ram.
6167:src/xeq.c     ****  */
6168:src/xeq.c     **** int init_34s(void)
6169:src/xeq.c     **** {
 33914              		.loc 1 6169 1 view -0
 33915              		.cfi_startproc
 33916              		@ args = 0, pretend = 0, frame = 0
 33917              		@ frame_needed = 0, uses_anonymous_args = 0
6170:src/xeq.c     **** 	const int cleared = checksum_all();
 33918              		.loc 1 6170 2 view .LVU9223
6169:src/xeq.c     **** 	const int cleared = checksum_all();
 33919              		.loc 1 6169 1 is_stmt 0 view .LVU9224
 33920 0000 10B5     		push	{r4, lr}
 33921              		.cfi_def_cfa_offset 8
 33922              		.cfi_offset 4, -8
 33923              		.cfi_offset 14, -4
 33924              		.loc 1 6170 22 view .LVU9225
 33925 0002 FFF7FEFF 		bl	checksum_ram
 33926              	.LVL2661:
6171:src/xeq.c     **** 	if (cleared) {
ARM GAS  /tmp/ccK8IvWa.s 			page 853


 33927              		.loc 1 6171 2 is_stmt 1 view .LVU9226
 33928              		.loc 1 6171 5 is_stmt 0 view .LVU9227
 33929 0006 0446     		mov	r4, r0
 33930 0008 58B9     		cbnz	r0, .L2511
 33931              	.LVL2662:
 33932              	.L2506:
6172:src/xeq.c     **** 		reset();
6173:src/xeq.c     **** 	}
6174:src/xeq.c     **** 	init_state();
 33933              		.loc 1 6174 2 is_stmt 1 view .LVU9228
 33934 000a FFF7FEFF 		bl	init_state
 33935              	.LVL2663:
6175:src/xeq.c     **** 	xeq_init_contexts();
 33936              		.loc 1 6175 2 view .LVU9229
 33937 000e FFF7FEFF 		bl	xeq_init_contexts
 33938              	.LVL2664:
6176:src/xeq.c     **** 	ShowRPN = 1;
 33939              		.loc 1 6176 2 view .LVU9230
 33940              		.loc 1 6176 10 is_stmt 0 view .LVU9231
 33941 0012 054B     		ldr	r3, .L2512
 33942 0014 0122     		movs	r2, #1
6177:src/xeq.c     **** 	set_dot(RPN);
 33943              		.loc 1 6177 2 view .LVU9232
 33944 0016 8D20     		movs	r0, #141
6176:src/xeq.c     **** 	ShowRPN = 1;
 33945              		.loc 1 6176 10 view .LVU9233
 33946 0018 1A60     		str	r2, [r3]
 33947              		.loc 1 6177 2 is_stmt 1 view .LVU9234
 33948 001a FFF7FEFF 		bl	set_dot
 33949              	.LVL2665:
6178:src/xeq.c     **** 
6179:src/xeq.c     **** #ifdef INCLUDE_STOPWATCH
6180:src/xeq.c     **** 	StopWatchRunning = 0;
6181:src/xeq.c     **** #endif
6182:src/xeq.c     **** #if defined(CONSOLE) && !defined(WP34STEST) && defined(DEBUG)
6183:src/xeq.c     **** 	{
6184:src/xeq.c     **** 		int i;
6185:src/xeq.c     **** 	/* Sanity check the function table indices.
6186:src/xeq.c     **** 	 * These indicies must correspond exactly with the enum definition.
6187:src/xeq.c     **** 	 * This code validates that this is true and prints error messages
6188:src/xeq.c     **** 	 * if it isn't.
6189:src/xeq.c     **** 	 */
6190:src/xeq.c     **** 	for (i=0; i<NUM_MONADIC; i++)
6191:src/xeq.c     **** 		if (monfuncs[i].n != i)
6192:src/xeq.c     **** 			bad_table("monadic function", i, monfuncs[i].fname, NAME_LEN);
6193:src/xeq.c     **** 	for (i=0; i<NUM_DYADIC; i++)
6194:src/xeq.c     **** 		if (dyfuncs[i].n != i)
6195:src/xeq.c     **** 			bad_table("dyadic function", i, dyfuncs[i].fname, NAME_LEN);
6196:src/xeq.c     **** 	for (i=0; i<NUM_TRIADIC; i++)
6197:src/xeq.c     **** 		if (trifuncs[i].n != i)
6198:src/xeq.c     **** 			bad_table("triadic function", i, trifuncs[i].fname, NAME_LEN);
6199:src/xeq.c     **** 	for (i=0; i<NUM_NILADIC; i++)
6200:src/xeq.c     **** 		if (niladics[i].n != i)
6201:src/xeq.c     **** 			bad_table("niladic function", i, niladics[i].nname, NAME_LEN);
6202:src/xeq.c     **** 	for (i=0; i<NUM_RARG; i++)
6203:src/xeq.c     **** 		if (argcmds[i].n != i)
6204:src/xeq.c     **** 			bad_table("argument command", i, argcmds[i].cmd, NAME_LEN);
ARM GAS  /tmp/ccK8IvWa.s 			page 854


6205:src/xeq.c     **** 	for (i=0; i<NUM_MULTI; i++)
6206:src/xeq.c     **** 		if (multicmds[i].n != i)
6207:src/xeq.c     **** 			bad_table("multi command", i, multicmds[i].cmd, NAME_LEN);
6208:src/xeq.c     **** 	check_const_cat();
6209:src/xeq.c     **** 	check_cat(CATALOGUE_COMPLEX, "complex");
6210:src/xeq.c     **** 	check_cat(CATALOGUE_STATS, "statistics");
6211:src/xeq.c     **** 	check_cat(CATALOGUE_SUMS, "summations");
6212:src/xeq.c     **** 	check_cat(CATALOGUE_PROB, "probability");
6213:src/xeq.c     **** 	check_cat(CATALOGUE_PROG, "programme");
6214:src/xeq.c     **** 	check_cat(CATALOGUE_MODE, "mode");
6215:src/xeq.c     **** 	check_cat(CATALOGUE_TEST, "tests");
6216:src/xeq.c     **** 	check_cat(CATALOGUE_INT, "int");
6217:src/xeq.c     **** 	check_cat(CATALOGUE_MATRIX, "matrix");
6218:src/xeq.c     **** 	/*
6219:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA, "alpha");
6220:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_LETTERS, "alpha special upper case letters");
6221:src/xeq.c     **** 	// check_cat(CATALOGUE_ALPHA_LETTERS_LOWER, "alpha special lower letters");
6222:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_SUBSCRIPTS, "alpha subscripts");
6223:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_SYMBOLS, "alpha symbols");
6224:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_COMPARES, "alpha compares");
6225:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_ARROWS, "alpha arrows");
6226:src/xeq.c     **** 	*/
6227:src/xeq.c     **** 	check_cat(CATALOGUE_CONV, "conversion");
6228:src/xeq.c     **** 	check_cat(CATALOGUE_NORMAL, "float");
6229:src/xeq.c     **** #ifdef INCLUDE_INTERNAL_CATALOGUE
6230:src/xeq.c     **** 	check_cat(CATALOGUE_INTERNAL, "internal");
6231:src/xeq.c     **** #endif
6232:src/xeq.c     ****         if (sizeof(unsigned long long int) != sizeof(UState))
6233:src/xeq.c     ****             error("sizeof register (%u) != sizeof user state (%u)\n", sizeof(unsigned long long int
6234:src/xeq.c     **** 	}
6235:src/xeq.c     **** #endif
6236:src/xeq.c     **** 	return cleared;
 33950              		.loc 1 6236 2 view .LVU9235
6237:src/xeq.c     **** }
 33951              		.loc 1 6237 1 is_stmt 0 view .LVU9236
 33952 001e 2046     		mov	r0, r4
 33953 0020 10BD     		pop	{r4, pc}
 33954              	.LVL2666:
 33955              	.L2511:
6172:src/xeq.c     **** 	}
 33956              		.loc 1 6172 3 is_stmt 1 view .LVU9237
 33957 0022 FFF7FEFF 		bl	reset
 33958              	.LVL2667:
6172:src/xeq.c     **** 	}
 33959              		.loc 1 6172 3 is_stmt 0 view .LVU9238
 33960 0026 F0E7     		b	.L2506
 33961              	.L2513:
 33962              		.align	2
 33963              	.L2512:
 33964 0028 00000000 		.word	ShowRPN
 33965              		.cfi_endproc
 33966              	.LFE270:
 33968              		.section	.rodata.paste_raw_x.str1.4,"aMS",%progbits,1
 33969              		.align	2
 33970              	.LC9:
 33971 0000 0D0A0920 		.ascii	"\015\012\011 :;\000"
 33971      3A3B00
ARM GAS  /tmp/ccK8IvWa.s 			page 855


 33972              		.section	.text.paste_raw_x,"ax",%progbits
 33973              		.align	1
 33974              		.p2align 2,,3
 33975              		.global	paste_raw_x
 33976              		.syntax unified
 33977              		.thumb
 33978              		.thumb_func
 33979              		.fpu fpv4-sp-d16
 33981              	paste_raw_x:
 33982              	.LVL2668:
 33983              	.LFB271:
6238:src/xeq.c     **** 
6239:src/xeq.c     **** #ifndef REALBUILD
6240:src/xeq.c     **** 
6241:src/xeq.c     **** #include "string.h"
6242:src/xeq.c     **** 
6243:src/xeq.c     **** void paste_raw_x(const char *in)
6244:src/xeq.c     **** {
 33984              		.loc 1 6244 1 is_stmt 1 view -0
 33985              		.cfi_startproc
 33986              		@ args = 0, pretend = 0, frame = 40
 33987              		@ frame_needed = 0, uses_anonymous_args = 0
6245:src/xeq.c     **** 	char *buffer = strdup( in );
 33988              		.loc 1 6245 2 view .LVU9240
6244:src/xeq.c     **** 	char *buffer = strdup( in );
 33989              		.loc 1 6244 1 is_stmt 0 view .LVU9241
 33990 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 33991              		.cfi_def_cfa_offset 32
 33992              		.cfi_offset 4, -32
 33993              		.cfi_offset 5, -28
 33994              		.cfi_offset 6, -24
 33995              		.cfi_offset 7, -20
 33996              		.cfi_offset 8, -16
 33997              		.cfi_offset 9, -12
 33998              		.cfi_offset 10, -8
 33999              		.cfi_offset 14, -4
 34000 0004 8AB0     		sub	sp, sp, #40
 34001              		.cfi_def_cfa_offset 72
 34002              		.loc 1 6245 17 view .LVU9242
 34003 0006 FFF7FEFF 		bl	strdup
 34004              	.LVL2669:
6246:src/xeq.c     **** 
6247:src/xeq.c     **** 	if ( buffer ) {
 34005              		.loc 1 6247 2 is_stmt 1 view .LVU9243
 34006              		.loc 1 6247 5 is_stmt 0 view .LVU9244
 34007 000a 0028     		cmp	r0, #0
 34008 000c 5AD0     		beq	.L2515
 34009              	.LBB4645:
6248:src/xeq.c     **** 		static const char *delim = "\r\n\t :;";
 34010              		.loc 1 6248 3 is_stmt 1 view .LVU9245
6249:src/xeq.c     **** 		char *p = strtok( buffer, delim );
 34011              		.loc 1 6249 3 view .LVU9246
 34012              		.loc 1 6249 13 is_stmt 0 view .LVU9247
 34013 000e 3649     		ldr	r1, .L2545
 34014 0010 8146     		mov	r9, r0
 34015 0012 FFF7FEFF 		bl	strtok
 34016              	.LVL2670:
ARM GAS  /tmp/ccK8IvWa.s 			page 856


 34017              		.loc 1 6249 13 view .LVU9248
 34018 0016 0446     		mov	r4, r0
 34019              	.LVL2671:
6250:src/xeq.c     **** 		process_cmdline();
 34020              		.loc 1 6250 3 is_stmt 1 view .LVU9249
 34021 0018 FFF7FEFF 		bl	process_cmdline
 34022              	.LVL2672:
6251:src/xeq.c     **** 		while ( p ) {
 34023              		.loc 1 6251 3 view .LVU9250
 34024              		.loc 1 6251 9 view .LVU9251
 34025 001c 002C     		cmp	r4, #0
 34026 001e 4ED0     		beq	.L2523
 34027 0020 324E     		ldr	r6, .L2545+4
 34028              	.LBB4646:
 34029              	.LBB4647:
6252:src/xeq.c     **** 			char *pp = strchr( p, ',' );
6253:src/xeq.c     **** 			if ( pp ) {
6254:src/xeq.c     **** 				*pp = '.';
6255:src/xeq.c     **** 			}
6256:src/xeq.c     **** 			if (is_intmode()) {
6257:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
6258:src/xeq.c     **** 				lift_if_enabled();
6259:src/xeq.c     **** 				set_lift();
6260:src/xeq.c     **** 				setX_int(build_value(strtoull(p + sgn, NULL, int_base()), sgn));
6261:src/xeq.c     **** 			} else {
6262:src/xeq.c     **** 				decNumber x;
6263:src/xeq.c     **** 				decNumberFromString(&x, p, &Ctx);
 34030              		.loc 1 6263 5 is_stmt 0 view .LVU9252
 34031 0022 DFF8D480 		ldr	r8, .L2545+16
 34032              	.LBB4648:
 34033              	.LBB4649:
 34034              	.LBB4650:
 34035              	.LBB4651:
 721:src/xeq.c     **** }
 34036              		.loc 1 721 15 view .LVU9253
 34037 0026 324D     		ldr	r5, .L2545+8
 34038              	.LBE4651:
 34039              	.LBE4650:
 34040              	.LBE4649:
 34041              	.LBE4648:
 34042              	.LBE4647:
6264:src/xeq.c     **** 				if (! check_special(&x)) {	/* This correctly deals with infinities and NaN based on flag D */
6265:src/xeq.c     **** 					lift_if_enabled();
6266:src/xeq.c     **** 					set_lift();
6267:src/xeq.c     **** 					setX(&x);
6268:src/xeq.c     **** 				}
6269:src/xeq.c     **** 				else {
6270:src/xeq.c     **** 					error_message(Error);
6271:src/xeq.c     **** 					Error = 0;
6272:src/xeq.c     **** 					break;
6273:src/xeq.c     **** 				}
6274:src/xeq.c     **** 			}
6275:src/xeq.c     **** 			p = strtok( NULL, delim );
 34043              		.loc 1 6275 8 view .LVU9254
 34044 0028 2F4F     		ldr	r7, .L2545
 34045 002a 21E0     		b	.L2524
 34046              	.LVL2673:
ARM GAS  /tmp/ccK8IvWa.s 			page 857


 34047              	.L2543:
 34048              	.LBB4670:
6257:src/xeq.c     **** 				lift_if_enabled();
 34049              		.loc 1 6257 5 is_stmt 1 view .LVU9255
6257:src/xeq.c     **** 				lift_if_enabled();
 34050              		.loc 1 6257 31 is_stmt 0 view .LVU9256
 34051 002c 94F800A0 		ldrb	r10, [r4]	@ zero_extendqisi2
 34052              	.LBB4671:
 34053              	.LBB4672:
 34054              	.LBB4673:
 34055              	.LBB4674:
 721:src/xeq.c     **** }
 34056              		.loc 1 721 15 view .LVU9257
 34057 0030 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 34058              	.LBE4674:
 34059              	.LBE4673:
 34060              	.LBE4672:
 34061              	.LBE4671:
6257:src/xeq.c     **** 				lift_if_enabled();
 34062              		.loc 1 6257 31 view .LVU9258
 34063 0032 AAF12D0A 		sub	r10, r10, #45
 34064 0036 BAFA8AFA 		clz	r10, r10
 34065              	.LBB4680:
 34066              	.LBB4677:
 725:src/xeq.c     **** 		lift();
 34067              		.loc 1 725 5 view .LVU9259
 34068 003a 5A06     		lsls	r2, r3, #25
 34069              	.LBE4677:
 34070              	.LBE4680:
6257:src/xeq.c     **** 				lift_if_enabled();
 34071              		.loc 1 6257 31 view .LVU9260
 34072 003c 4FEA5A1A 		lsr	r10, r10, #5
 34073              	.LVL2674:
6258:src/xeq.c     **** 				set_lift();
 34074              		.loc 1 6258 5 is_stmt 1 view .LVU9261
 34075              	.LBB4681:
 34076              	.LBI4671:
 724:src/xeq.c     **** 	if (get_lift())
 34077              		.loc 1 724 6 view .LVU9262
 34078              	.LBB4678:
 725:src/xeq.c     **** 		lift();
 34079              		.loc 1 725 2 view .LVU9263
 34080              	.LBB4676:
 34081              	.LBI4673:
 720:src/xeq.c     **** 	return State2.state_lift;
 34082              		.loc 1 720 12 view .LVU9264
 34083              	.LBB4675:
 721:src/xeq.c     **** }
 34084              		.loc 1 721 2 view .LVU9265
 34085              	.LBE4675:
 34086              	.LBE4676:
 725:src/xeq.c     **** 		lift();
 34087              		.loc 1 725 5 is_stmt 0 view .LVU9266
 34088 0040 45D4     		bmi	.L2542
 34089              	.LVL2675:
 34090              	.L2519:
 725:src/xeq.c     **** 		lift();
ARM GAS  /tmp/ccK8IvWa.s 			page 858


 34091              		.loc 1 725 5 view .LVU9267
 34092              	.LBE4678:
 34093              	.LBE4681:
6259:src/xeq.c     **** 				setX_int(build_value(strtoull(p + sgn, NULL, int_base()), sgn));
 34094              		.loc 1 6259 5 is_stmt 1 view .LVU9268
 34095              	.LBB4682:
 34096              	.LBI4682:
 734:src/xeq.c     ****     State2.state_lift = 1;
 34097              		.loc 1 734 6 view .LVU9269
 34098              	.LBB4683:
 735:src/xeq.c     **** }
 34099              		.loc 1 735 5 view .LVU9270
 735:src/xeq.c     **** }
 34100              		.loc 1 735 23 is_stmt 0 view .LVU9271
 34101 0042 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 34102 0044 43F04003 		orr	r3, r3, #64
 34103 0048 EB75     		strb	r3, [r5, #23]
 34104              	.LBE4683:
 34105              	.LBE4682:
6260:src/xeq.c     **** 			} else {
 34106              		.loc 1 6260 5 is_stmt 1 view .LVU9272
6260:src/xeq.c     **** 			} else {
 34107              		.loc 1 6260 50 is_stmt 0 view .LVU9273
 34108 004a FFF7FEFF 		bl	int_base
 34109              	.LVL2676:
6260:src/xeq.c     **** 			} else {
 34110              		.loc 1 6260 37 view .LVU9274
 34111 004e 5444     		add	r4, r4, r10
 34112              	.LVL2677:
6260:src/xeq.c     **** 			} else {
 34113              		.loc 1 6260 50 view .LVU9275
 34114 0050 0246     		mov	r2, r0
6260:src/xeq.c     **** 			} else {
 34115              		.loc 1 6260 5 view .LVU9276
 34116 0052 0021     		movs	r1, #0
 34117 0054 2046     		mov	r0, r4
 34118 0056 FFF7FEFF 		bl	strtoull
 34119              	.LVL2678:
 34120 005a 5246     		mov	r2, r10
 34121 005c FFF7FEFF 		bl	build_value
 34122              	.LVL2679:
 34123 0060 FFF7FEFF 		bl	setX_int
 34124              	.LVL2680:
 34125              	.LBE4670:
 34126              		.loc 1 6275 4 is_stmt 1 view .LVU9277
 34127              		.loc 1 6275 8 is_stmt 0 view .LVU9278
 34128 0064 3946     		mov	r1, r7
 34129 0066 0020     		movs	r0, #0
 34130 0068 FFF7FEFF 		bl	strtok
 34131              	.LVL2681:
 34132              		.loc 1 6275 8 view .LVU9279
 34133              	.LBE4646:
6251:src/xeq.c     **** 			char *pp = strchr( p, ',' );
 34134              		.loc 1 6251 9 is_stmt 1 view .LVU9280
 34135 006c 0446     		mov	r4, r0
 34136 006e 30B3     		cbz	r0, .L2523
 34137              	.LVL2682:
ARM GAS  /tmp/ccK8IvWa.s 			page 859


 34138              	.L2524:
 34139              	.LBB4688:
6252:src/xeq.c     **** 			if ( pp ) {
 34140              		.loc 1 6252 4 view .LVU9281
6252:src/xeq.c     **** 			if ( pp ) {
 34141              		.loc 1 6252 15 is_stmt 0 view .LVU9282
 34142 0070 2C21     		movs	r1, #44
 34143 0072 2046     		mov	r0, r4
 34144 0074 FFF7FEFF 		bl	strchr
 34145              	.LVL2683:
6253:src/xeq.c     **** 				*pp = '.';
 34146              		.loc 1 6253 4 is_stmt 1 view .LVU9283
6253:src/xeq.c     **** 				*pp = '.';
 34147              		.loc 1 6253 7 is_stmt 0 view .LVU9284
 34148 0078 08B1     		cbz	r0, .L2517
6254:src/xeq.c     **** 			}
 34149              		.loc 1 6254 5 is_stmt 1 view .LVU9285
6254:src/xeq.c     **** 			}
 34150              		.loc 1 6254 9 is_stmt 0 view .LVU9286
 34151 007a 2E23     		movs	r3, #46
 34152 007c 0370     		strb	r3, [r0]
 34153              	.L2517:
6256:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
 34154              		.loc 1 6256 4 is_stmt 1 view .LVU9287
6256:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
 34155              		.loc 1 6256 8 is_stmt 0 view .LVU9288
 34156 007e 96F8E837 		ldrb	r3, [r6, #2024]	@ zero_extendqisi2
6256:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
 34157              		.loc 1 6256 7 view .LVU9289
 34158 0082 13F0010A 		ands	r10, r3, #1
 34159 0086 D1D1     		bne	.L2543
 34160              	.LBB4685:
6262:src/xeq.c     **** 				decNumberFromString(&x, p, &Ctx);
 34161              		.loc 1 6262 5 is_stmt 1 view .LVU9290
6263:src/xeq.c     **** 				if (! check_special(&x)) {	/* This correctly deals with infinities and NaN based on flag D */
 34162              		.loc 1 6263 5 view .LVU9291
 34163 0088 2146     		mov	r1, r4
 34164 008a 01A8     		add	r0, sp, #4
 34165              	.LVL2684:
6263:src/xeq.c     **** 				if (! check_special(&x)) {	/* This correctly deals with infinities and NaN based on flag D */
 34166              		.loc 1 6263 5 is_stmt 0 view .LVU9292
 34167 008c 4246     		mov	r2, r8
 34168 008e FFF7FEFF 		bl	decNumberFromString
 34169              	.LVL2685:
6264:src/xeq.c     **** 					lift_if_enabled();
 34170              		.loc 1 6264 5 is_stmt 1 view .LVU9293
6264:src/xeq.c     **** 					lift_if_enabled();
 34171              		.loc 1 6264 11 is_stmt 0 view .LVU9294
 34172 0092 01A8     		add	r0, sp, #4
 34173 0094 FFF7FEFF 		bl	check_special
 34174              	.LVL2686:
6264:src/xeq.c     **** 					lift_if_enabled();
 34175              		.loc 1 6264 8 view .LVU9295
 34176 0098 F8B9     		cbnz	r0, .L2521
6265:src/xeq.c     **** 					set_lift();
 34177              		.loc 1 6265 6 is_stmt 1 view .LVU9296
 34178              	.LBB4656:
ARM GAS  /tmp/ccK8IvWa.s 			page 860


 34179              	.LBI4648:
 724:src/xeq.c     **** 	if (get_lift())
 34180              		.loc 1 724 6 view .LVU9297
 34181              	.LBB4654:
 725:src/xeq.c     **** 		lift();
 34182              		.loc 1 725 2 view .LVU9298
 34183              	.LBB4653:
 34184              	.LBI4650:
 720:src/xeq.c     **** 	return State2.state_lift;
 34185              		.loc 1 720 12 view .LVU9299
 34186              	.LBB4652:
 721:src/xeq.c     **** }
 34187              		.loc 1 721 2 view .LVU9300
 721:src/xeq.c     **** }
 34188              		.loc 1 721 15 is_stmt 0 view .LVU9301
 34189 009a EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 34190              	.LBE4652:
 34191              	.LBE4653:
 725:src/xeq.c     **** 		lift();
 34192              		.loc 1 725 5 view .LVU9302
 34193 009c 5B06     		lsls	r3, r3, #25
 34194 009e 19D4     		bmi	.L2544
 34195              	.L2522:
 34196              	.LBE4654:
 34197              	.LBE4656:
6266:src/xeq.c     **** 					setX(&x);
 34198              		.loc 1 6266 6 is_stmt 1 view .LVU9303
 34199              	.LBB4657:
 34200              	.LBI4657:
 734:src/xeq.c     ****     State2.state_lift = 1;
 34201              		.loc 1 734 6 view .LVU9304
 34202              	.LBB4658:
 735:src/xeq.c     **** }
 34203              		.loc 1 735 5 view .LVU9305
 735:src/xeq.c     **** }
 34204              		.loc 1 735 23 is_stmt 0 view .LVU9306
 34205 00a0 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 34206              	.LBE4658:
 34207              	.LBE4657:
 34208              	.LBB4661:
 34209              	.LBB4662:
 796:src/xeq.c     **** }
 34210              		.loc 1 796 2 view .LVU9307
 34211 00a2 01A9     		add	r1, sp, #4
 34212              	.LBE4662:
 34213              	.LBE4661:
 34214              	.LBB4665:
 34215              	.LBB4659:
 735:src/xeq.c     **** }
 34216              		.loc 1 735 23 view .LVU9308
 34217 00a4 43F04003 		orr	r3, r3, #64
 34218              	.LBE4659:
 34219              	.LBE4665:
 34220              	.LBB4666:
 34221              	.LBB4663:
 796:src/xeq.c     **** }
 34222              		.loc 1 796 2 view .LVU9309
ARM GAS  /tmp/ccK8IvWa.s 			page 861


 34223 00a8 6420     		movs	r0, #100
 34224              	.LBE4663:
 34225              	.LBE4666:
 34226              	.LBB4667:
 34227              	.LBB4660:
 735:src/xeq.c     **** }
 34228              		.loc 1 735 23 view .LVU9310
 34229 00aa EB75     		strb	r3, [r5, #23]
 34230              	.LBE4660:
 34231              	.LBE4667:
6267:src/xeq.c     **** 				}
 34232              		.loc 1 6267 6 is_stmt 1 view .LVU9311
 34233              	.LVL2687:
 34234              	.LBB4668:
 34235              	.LBI4661:
 795:src/xeq.c     **** 	setRegister(regX_idx, x);
 34236              		.loc 1 795 6 view .LVU9312
 34237              	.LBB4664:
 796:src/xeq.c     **** }
 34238              		.loc 1 796 2 view .LVU9313
 34239 00ac FFF7FEFF 		bl	setRegister
 34240              	.LVL2688:
 796:src/xeq.c     **** }
 34241              		.loc 1 796 2 is_stmt 0 view .LVU9314
 34242              	.LBE4664:
 34243              	.LBE4668:
 34244              	.LBE4685:
 34245              		.loc 1 6275 4 is_stmt 1 view .LVU9315
 34246              		.loc 1 6275 8 is_stmt 0 view .LVU9316
 34247 00b0 3946     		mov	r1, r7
 34248 00b2 0020     		movs	r0, #0
 34249 00b4 FFF7FEFF 		bl	strtok
 34250              	.LVL2689:
 34251              		.loc 1 6275 8 view .LVU9317
 34252              	.LBE4688:
6251:src/xeq.c     **** 			char *pp = strchr( p, ',' );
 34253              		.loc 1 6251 9 is_stmt 1 view .LVU9318
 34254 00b8 0446     		mov	r4, r0
 34255 00ba 0028     		cmp	r0, #0
 34256 00bc D8D1     		bne	.L2524
 34257              	.LVL2690:
 34258              	.L2523:
6276:src/xeq.c     **** 		}
6277:src/xeq.c     **** 		free( buffer );
 34259              		.loc 1 6277 3 view .LVU9319
 34260 00be 4846     		mov	r0, r9
 34261 00c0 FFF7FEFF 		bl	free
 34262              	.LVL2691:
 34263              	.L2515:
 34264              		.loc 1 6277 3 is_stmt 0 view .LVU9320
 34265              	.LBE4645:
6278:src/xeq.c     **** 	}
6279:src/xeq.c     **** 	display();
 34266              		.loc 1 6279 2 is_stmt 1 view .LVU9321
 34267 00c4 FFF7FEFF 		bl	display
 34268              	.LVL2692:
6280:src/xeq.c     **** }
ARM GAS  /tmp/ccK8IvWa.s 			page 862


 34269              		.loc 1 6280 1 is_stmt 0 view .LVU9322
 34270 00c8 0AB0     		add	sp, sp, #40
 34271              		.cfi_remember_state
 34272              		.cfi_def_cfa_offset 32
 34273              		@ sp needed
 34274 00ca BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 34275              	.LVL2693:
 34276              	.L2542:
 34277              		.cfi_restore_state
 34278              	.LBB4690:
 34279              	.LBB4689:
 34280              	.LBB4686:
 34281              	.LBB4684:
 34282              	.LBB4679:
 726:src/xeq.c     **** }
 34283              		.loc 1 726 3 is_stmt 1 view .LVU9323
 34284 00ce FFF7FEFF 		bl	lift
 34285              	.LVL2694:
 726:src/xeq.c     **** }
 34286              		.loc 1 726 3 is_stmt 0 view .LVU9324
 34287 00d2 B6E7     		b	.L2519
 34288              	.LVL2695:
 34289              	.L2544:
 726:src/xeq.c     **** }
 34290              		.loc 1 726 3 view .LVU9325
 34291              	.LBE4679:
 34292              	.LBE4684:
 34293              	.LBE4686:
 34294              	.LBB4687:
 34295              	.LBB4669:
 34296              	.LBB4655:
 726:src/xeq.c     **** }
 34297              		.loc 1 726 3 is_stmt 1 view .LVU9326
 34298 00d4 FFF7FEFF 		bl	lift
 34299              	.LVL2696:
 34300 00d8 E2E7     		b	.L2522
 34301              	.L2521:
 34302              	.LBE4655:
 34303              	.LBE4669:
6270:src/xeq.c     **** 					Error = 0;
 34304              		.loc 1 6270 6 view .LVU9327
 34305 00da 064C     		ldr	r4, .L2545+12
 34306              	.LVL2697:
6270:src/xeq.c     **** 					Error = 0;
 34307              		.loc 1 6270 6 is_stmt 0 view .LVU9328
 34308 00dc 2068     		ldr	r0, [r4]
 34309 00de FFF7FEFF 		bl	error_message
 34310              	.LVL2698:
6271:src/xeq.c     **** 					break;
 34311              		.loc 1 6271 6 is_stmt 1 view .LVU9329
6271:src/xeq.c     **** 					break;
 34312              		.loc 1 6271 12 is_stmt 0 view .LVU9330
 34313 00e2 C4F800A0 		str	r10, [r4]
6272:src/xeq.c     **** 				}
 34314              		.loc 1 6272 6 is_stmt 1 view .LVU9331
 34315 00e6 EAE7     		b	.L2523
 34316              	.L2546:
ARM GAS  /tmp/ccK8IvWa.s 			page 863


 34317              		.align	2
 34318              	.L2545:
 34319 00e8 00000000 		.word	.LC9
 34320 00ec 00000000 		.word	PersistentRam
 34321 00f0 00000000 		.word	StateWhileOn
 34322 00f4 00000000 		.word	Error
 34323 00f8 00000000 		.word	Ctx
 34324              	.LBE4687:
 34325              	.LBE4689:
 34326              	.LBE4690:
 34327              		.cfi_endproc
 34328              	.LFE271:
 34330              		.global	__aeabi_uldivmod
 34331              		.section	.rodata.fill_buffer_from_raw_x.str1.4,"aMS",%progbits,1
 34332              		.align	2
 34333              	.LC10:
 34334 0000 30313233 		.ascii	"0123456789ABCDEF\000"
 34334      34353637 
 34334      38394142 
 34334      43444546 
 34334      00
 34335              		.section	.text.fill_buffer_from_raw_x,"ax",%progbits
 34336              		.align	1
 34337              		.p2align 2,,3
 34338              		.global	fill_buffer_from_raw_x
 34339              		.syntax unified
 34340              		.thumb
 34341              		.thumb_func
 34342              		.fpu fpv4-sp-d16
 34344              	fill_buffer_from_raw_x:
 34345              	.LVL2699:
 34346              	.LFB272:
6281:src/xeq.c     **** 
6282:src/xeq.c     **** char* fill_buffer_from_raw_x(char *buffer)
6283:src/xeq.c     **** {
 34347              		.loc 1 6283 1 view -0
 34348              		.cfi_startproc
 34349              		@ args = 0, pretend = 0, frame = 40
 34350              		@ frame_needed = 0, uses_anonymous_args = 0
6284:src/xeq.c     **** 	process_cmdline();
 34351              		.loc 1 6284 2 view .LVU9333
6283:src/xeq.c     **** 	process_cmdline();
 34352              		.loc 1 6283 1 is_stmt 0 view .LVU9334
 34353 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 34354              		.cfi_def_cfa_offset 36
 34355              		.cfi_offset 4, -36
 34356              		.cfi_offset 5, -32
 34357              		.cfi_offset 6, -28
 34358              		.cfi_offset 7, -24
 34359              		.cfi_offset 8, -20
 34360              		.cfi_offset 9, -16
 34361              		.cfi_offset 10, -12
 34362              		.cfi_offset 11, -8
 34363              		.cfi_offset 14, -4
6285:src/xeq.c     **** 	if (is_intmode()) {
 34364              		.loc 1 6285 6 view .LVU9335
 34365 0004 2B4D     		ldr	r5, .L2566
ARM GAS  /tmp/ccK8IvWa.s 			page 864


6283:src/xeq.c     **** 	process_cmdline();
 34366              		.loc 1 6283 1 view .LVU9336
 34367 0006 8BB0     		sub	sp, sp, #44
 34368              		.cfi_def_cfa_offset 80
6283:src/xeq.c     **** 	process_cmdline();
 34369              		.loc 1 6283 1 view .LVU9337
 34370 0008 0446     		mov	r4, r0
6284:src/xeq.c     **** 	process_cmdline();
 34371              		.loc 1 6284 2 view .LVU9338
 34372 000a FFF7FEFF 		bl	process_cmdline
 34373              	.LVL2700:
 34374              		.loc 1 6285 2 is_stmt 1 view .LVU9339
 34375              		.loc 1 6285 6 is_stmt 0 view .LVU9340
 34376 000e 95F8E837 		ldrb	r3, [r5, #2024]	@ zero_extendqisi2
 34377              		.loc 1 6285 5 view .LVU9341
 34378 0012 DA07     		lsls	r2, r3, #31
 34379 0014 2CD5     		bpl	.L2548
 34380              	.LBB4691:
6286:src/xeq.c     **** 		int sgn;
 34381              		.loc 1 6286 3 is_stmt 1 view .LVU9342
6287:src/xeq.c     **** 		unsigned long long int x = extract_value(get_reg_n_int(regX_idx), &sgn);
 34382              		.loc 1 6287 3 view .LVU9343
 34383              		.loc 1 6287 30 is_stmt 0 view .LVU9344
 34384 0016 6420     		movs	r0, #100
 34385 0018 FFF7FEFF 		bl	get_reg_n_int
 34386              	.LVL2701:
 34387 001c 01AA     		add	r2, sp, #4
 34388 001e FFF7FEFF 		bl	extract_value
 34389              	.LVL2702:
 34390 0022 0646     		mov	r6, r0
 34391 0024 0F46     		mov	r7, r1
 34392              	.LVL2703:
6288:src/xeq.c     **** 		const int base = int_base();
 34393              		.loc 1 6288 3 is_stmt 1 view .LVU9345
 34394              		.loc 1 6288 20 is_stmt 0 view .LVU9346
 34395 0026 FFF7FEFF 		bl	int_base
 34396              	.LVL2704:
6289:src/xeq.c     **** 		char *p = buffer + (sizeof(buffer)-1);
6290:src/xeq.c     **** 
6291:src/xeq.c     **** 		*p-- = '\0';
 34397              		.loc 1 6291 8 view .LVU9347
 34398 002a 0023     		movs	r3, #0
 34399              	.LVL2705:
6289:src/xeq.c     **** 		char *p = buffer + (sizeof(buffer)-1);
 34400              		.loc 1 6289 3 is_stmt 1 view .LVU9348
 34401              		.loc 1 6291 3 view .LVU9349
 34402              		.loc 1 6291 8 is_stmt 0 view .LVU9350
 34403 002c E370     		strb	r3, [r4, #3]
6292:src/xeq.c     **** 		if (x == 0)
 34404              		.loc 1 6292 3 is_stmt 1 view .LVU9351
 34405              		.loc 1 6292 6 is_stmt 0 view .LVU9352
 34406 002e 56EA0703 		orrs	r3, r6, r7
 34407 0032 34D0     		beq	.L2564
 34408 0034 204D     		ldr	r5, .L2566+4
6291:src/xeq.c     **** 		if (x == 0)
 34409              		.loc 1 6291 5 view .LVU9353
 34410 0036 0234     		adds	r4, r4, #2
ARM GAS  /tmp/ccK8IvWa.s 			page 865


 34411              	.LVL2706:
6291:src/xeq.c     **** 		if (x == 0)
 34412              		.loc 1 6291 5 view .LVU9354
 34413 0038 8046     		mov	r8, r0
 34414 003a 4FEAE079 		asr	r9, r0, #31
 34415              	.LVL2707:
 34416              	.L2551:
 34417              	.LBB4692:
6293:src/xeq.c     **** 			*p-- = '0'; 
6294:src/xeq.c     **** 		else {
6295:src/xeq.c     **** 			while (x != 0) {
6296:src/xeq.c     **** 				const int n = x % base;
 34418              		.loc 1 6296 5 is_stmt 1 view .LVU9355
 34419 003e 3046     		mov	r0, r6
 34420 0040 3946     		mov	r1, r7
 34421 0042 4246     		mov	r2, r8
 34422 0044 4B46     		mov	r3, r9
 34423 0046 FFF7FEFF 		bl	__aeabi_uldivmod
 34424              	.LVL2708:
6297:src/xeq.c     **** 				x /= base;
 34425              		.loc 1 6297 5 view .LVU9356
 34426 004a BB46     		mov	fp, r7
 34427 004c B246     		mov	r10, r6
 34428              	.LBE4692:
6295:src/xeq.c     **** 				const int n = x % base;
 34429              		.loc 1 6295 10 is_stmt 0 view .LVU9357
 34430 004e CB45     		cmp	fp, r9
 34431              	.LBB4693:
6298:src/xeq.c     **** 				*p-- = n["0123456789ABCDEF"];
 34432              		.loc 1 6298 10 view .LVU9358
 34433 0050 AB5C     		ldrb	r3, [r5, r2]	@ zero_extendqisi2
 34434 0052 04F80139 		strb	r3, [r4], #-1
 34435              	.LVL2709:
 34436              		.loc 1 6298 10 view .LVU9359
 34437              	.LBE4693:
6295:src/xeq.c     **** 				const int n = x % base;
 34438              		.loc 1 6295 10 view .LVU9360
 34439 0056 08BF     		it	eq
 34440 0058 C245     		cmpeq	r10, r8
 34441              	.LBB4694:
6297:src/xeq.c     **** 				x /= base;
 34442              		.loc 1 6297 7 view .LVU9361
 34443 005a 0646     		mov	r6, r0
 34444              	.LVL2710:
6297:src/xeq.c     **** 				x /= base;
 34445              		.loc 1 6297 7 view .LVU9362
 34446 005c 0F46     		mov	r7, r1
 34447              	.LVL2711:
 34448              		.loc 1 6298 5 is_stmt 1 view .LVU9363
 34449              		.loc 1 6298 5 is_stmt 0 view .LVU9364
 34450              	.LBE4694:
6295:src/xeq.c     **** 				const int n = x % base;
 34451              		.loc 1 6295 10 is_stmt 1 view .LVU9365
 34452 005e EED2     		bcs	.L2551
6299:src/xeq.c     **** 			}
6300:src/xeq.c     **** 		}
6301:src/xeq.c     **** 		if (sgn)
ARM GAS  /tmp/ccK8IvWa.s 			page 866


 34453              		.loc 1 6301 3 view .LVU9366
 34454              		.loc 1 6301 6 is_stmt 0 view .LVU9367
 34455 0060 019B     		ldr	r3, [sp, #4]
 34456 0062 13B3     		cbz	r3, .L2552
 34457              	.LVL2712:
 34458              	.L2565:
6302:src/xeq.c     **** 			*p = '-';
 34459              		.loc 1 6302 4 is_stmt 1 view .LVU9368
 34460              		.loc 1 6302 7 is_stmt 0 view .LVU9369
 34461 0064 2D23     		movs	r3, #45
 34462 0066 2370     		strb	r3, [r4]
 34463              	.LVL2713:
 34464              	.L2547:
 34465              		.loc 1 6302 7 view .LVU9370
 34466              	.LBE4691:
6303:src/xeq.c     **** 		else
6304:src/xeq.c     **** 			p++;
6305:src/xeq.c     **** 		return p;
6306:src/xeq.c     **** 	} else {
6307:src/xeq.c     **** 		decNumber x;
6308:src/xeq.c     **** 		decNumberToString(getX(&x), buffer);
6309:src/xeq.c     **** 		if (UState.fraccomma) {
6310:src/xeq.c     **** 			char *p = strchr(buffer, '.');
6311:src/xeq.c     **** 			if (p != NULL)
6312:src/xeq.c     **** 				*p = ',';
6313:src/xeq.c     **** 		}
6314:src/xeq.c     **** 
6315:src/xeq.c     **** 		return buffer;
6316:src/xeq.c     **** 	}
6317:src/xeq.c     **** }
 34467              		.loc 1 6317 1 view .LVU9371
 34468 0068 2046     		mov	r0, r4
 34469 006a 0BB0     		add	sp, sp, #44
 34470              		.cfi_remember_state
 34471              		.cfi_def_cfa_offset 36
 34472              		@ sp needed
 34473 006c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 34474              	.LVL2714:
 34475              	.L2548:
 34476              		.cfi_restore_state
 34477              	.LBB4695:
6307:src/xeq.c     **** 		decNumberToString(getX(&x), buffer);
 34478              		.loc 1 6307 3 is_stmt 1 view .LVU9372
6308:src/xeq.c     **** 		if (UState.fraccomma) {
 34479              		.loc 1 6308 3 view .LVU9373
 34480              	.LBB4696:
 34481              	.LBI4696:
 791:src/xeq.c     **** 	return getRegister(x, regX_idx);
 34482              		.loc 1 791 12 view .LVU9374
 34483              	.LBB4697:
 792:src/xeq.c     **** }
 34484              		.loc 1 792 2 view .LVU9375
 792:src/xeq.c     **** }
 34485              		.loc 1 792 9 is_stmt 0 view .LVU9376
 34486 0070 6421     		movs	r1, #100
 34487 0072 01A8     		add	r0, sp, #4
 34488              	.LVL2715:
ARM GAS  /tmp/ccK8IvWa.s 			page 867


 792:src/xeq.c     **** }
 34489              		.loc 1 792 9 view .LVU9377
 34490 0074 FFF7FEFF 		bl	getRegister
 34491              	.LVL2716:
 792:src/xeq.c     **** }
 34492              		.loc 1 792 9 view .LVU9378
 34493              	.LBE4697:
 34494              	.LBE4696:
6308:src/xeq.c     **** 		if (UState.fraccomma) {
 34495              		.loc 1 6308 3 view .LVU9379
 34496 0078 2146     		mov	r1, r4
 34497 007a FFF7FEFF 		bl	decNumberToString
 34498              	.LVL2717:
6309:src/xeq.c     **** 			char *p = strchr(buffer, '.');
 34499              		.loc 1 6309 3 is_stmt 1 view .LVU9380
6309:src/xeq.c     **** 			char *p = strchr(buffer, '.');
 34500              		.loc 1 6309 7 is_stmt 0 view .LVU9381
 34501 007e 95F8E737 		ldrb	r3, [r5, #2023]	@ zero_extendqisi2
6309:src/xeq.c     **** 			char *p = strchr(buffer, '.');
 34502              		.loc 1 6309 6 view .LVU9382
 34503 0082 9B06     		lsls	r3, r3, #26
 34504 0084 F0D5     		bpl	.L2547
 34505              	.LBB4698:
6310:src/xeq.c     **** 			if (p != NULL)
 34506              		.loc 1 6310 4 is_stmt 1 view .LVU9383
6310:src/xeq.c     **** 			if (p != NULL)
 34507              		.loc 1 6310 14 is_stmt 0 view .LVU9384
 34508 0086 2E21     		movs	r1, #46
 34509 0088 2046     		mov	r0, r4
 34510 008a FFF7FEFF 		bl	strchr
 34511              	.LVL2718:
6311:src/xeq.c     **** 				*p = ',';
 34512              		.loc 1 6311 4 is_stmt 1 view .LVU9385
6311:src/xeq.c     **** 				*p = ',';
 34513              		.loc 1 6311 7 is_stmt 0 view .LVU9386
 34514 008e 0028     		cmp	r0, #0
 34515 0090 EAD0     		beq	.L2547
6312:src/xeq.c     **** 		}
 34516              		.loc 1 6312 5 is_stmt 1 view .LVU9387
6312:src/xeq.c     **** 		}
 34517              		.loc 1 6312 8 is_stmt 0 view .LVU9388
 34518 0092 2C23     		movs	r3, #44
 34519 0094 0370     		strb	r3, [r0]
 34520              	.LBE4698:
6315:src/xeq.c     **** 	}
 34521              		.loc 1 6315 3 is_stmt 1 view .LVU9389
 34522              	.LBE4695:
 34523              		.loc 1 6317 1 is_stmt 0 view .LVU9390
 34524 0096 2046     		mov	r0, r4
 34525              	.LVL2719:
 34526              		.loc 1 6317 1 view .LVU9391
 34527 0098 0BB0     		add	sp, sp, #44
 34528              		.cfi_remember_state
 34529              		.cfi_def_cfa_offset 36
 34530              		@ sp needed
 34531 009a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 34532              	.LVL2720:
ARM GAS  /tmp/ccK8IvWa.s 			page 868


 34533              	.L2564:
 34534              		.cfi_restore_state
 34535              	.LBB4699:
6293:src/xeq.c     **** 		else {
 34536              		.loc 1 6293 4 is_stmt 1 view .LVU9392
6293:src/xeq.c     **** 		else {
 34537              		.loc 1 6293 9 is_stmt 0 view .LVU9393
 34538 009e 3023     		movs	r3, #48
 34539 00a0 A370     		strb	r3, [r4, #2]
6301:src/xeq.c     **** 			*p = '-';
 34540              		.loc 1 6301 6 view .LVU9394
 34541 00a2 019B     		ldr	r3, [sp, #4]
6293:src/xeq.c     **** 		else {
 34542              		.loc 1 6293 6 view .LVU9395
 34543 00a4 0134     		adds	r4, r4, #1
 34544              	.LVL2721:
6301:src/xeq.c     **** 			*p = '-';
 34545              		.loc 1 6301 3 is_stmt 1 view .LVU9396
6301:src/xeq.c     **** 			*p = '-';
 34546              		.loc 1 6301 6 is_stmt 0 view .LVU9397
 34547 00a6 002B     		cmp	r3, #0
 34548 00a8 DCD1     		bne	.L2565
 34549              	.LVL2722:
 34550              	.L2552:
6304:src/xeq.c     **** 		return p;
 34551              		.loc 1 6304 4 is_stmt 1 view .LVU9398
6304:src/xeq.c     **** 		return p;
 34552              		.loc 1 6304 5 is_stmt 0 view .LVU9399
 34553 00aa 0134     		adds	r4, r4, #1
 34554              	.LVL2723:
6305:src/xeq.c     **** 	} else {
 34555              		.loc 1 6305 3 is_stmt 1 view .LVU9400
 34556              	.LBE4699:
 34557              		.loc 1 6317 1 is_stmt 0 view .LVU9401
 34558 00ac 2046     		mov	r0, r4
 34559 00ae 0BB0     		add	sp, sp, #44
 34560              		.cfi_def_cfa_offset 36
 34561              		@ sp needed
 34562 00b0 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 34563              	.LVL2724:
 34564              	.L2567:
 34565              		.loc 1 6317 1 view .LVU9402
 34566              		.align	2
 34567              	.L2566:
 34568 00b4 00000000 		.word	PersistentRam
 34569 00b8 00000000 		.word	.LC10
 34570              		.cfi_endproc
 34571              	.LFE272:
 34573              		.comm	RectPolConv,4,4
 34574              		.comm	StackBase,4,4
 34575              		.comm	RetStk,4,4
 34576              		.comm	ProgFree,4,4
 34577              		.comm	RetStkSize,4,4
 34578              		.comm	TraceBuffer,25,4
 34579              		.comm	Ctx,24,4
 34580              		.comm	UserLocalRegs,4,4
 34581              		.comm	XromUserPc,4,4
ARM GAS  /tmp/ccK8IvWa.s 			page 869


 34582              		.comm	ShowRegister,4,4
 34583              		.comm	XeqOpCode,2,2
 34584              		.comm	PcWrapped,4,4
 34585              		.comm	Error,4,4
 34586              		.comm	Busy,4,4
 34587              		.comm	Pause,1,1
 34588              		.comm	JustStopped,4,4
 34589              		.comm	XromRunning,4,4
 34590              		.comm	Running,4,4
 34591              		.global	xrom_targets
 34592              		.section	.rodata
 34593              		.align	2
 34594              		.set	.LANCHOR5,. + 0
 34595              	.LC1:
 34596 0000 0C0C0C0C 		.ascii	"\014\014\014\014\014\014\014\014\014\013\013\013\014"
 34596      0C0C0C0C 
 34596      0C0B0B0B 
 34596      0C
 34597 000d 0C0A0A0C 		.ascii	"\014\012\012\014\014\014\007\010\011\014\014\014\004"
 34597      0C0C0708 
 34597      090C0C0C 
 34597      04
 34598 001a 05060C0C 		.ascii	"\005\006\014\014\014\001\002\003\014\014\014\000\012"
 34598      0C010203 
 34598      0C0C0C00 
 34598      0A
 34599 0027 0C0C     		.ascii	"\014\014"
 34600              		.section	.bss.result.11337,"aw",%nobits
 34601              		.align	2
 34602              		.set	.LANCHOR2,. + 0
 34605              	result.11337:
 34606 0000 00000000 		.space	16
 34606      00000000 
 34606      00000000 
 34606      00000000 
 34607              		.section	.rodata.RegionTab,"a"
 34608              		.align	2
 34609              		.set	.LANCHOR0,. + 0
 34612              	RegionTab:
 34613 0000 04000000 		.word	PersistentRam+4
 34614 0004 04000000 		.word	UserFlash+4
 34615 0008 04000000 		.word	BackupFlash+4
 34616 000c 00000000 		.word	xrom
 34617              		.section	.rodata.StackRegMask,"a"
 34618              		.align	2
 34619              		.set	.LANCHOR3,. + 0
 34622              	StackRegMask:
 34623 0000 0F01     		.short	271
 34624 0002 FF01     		.short	511
 34625              		.section	.rodata.convergence_tolerances,"a"
 34626              		.align	2
 34627              		.set	.LANCHOR7,. + 0
 34630              	convergence_tolerances:
 34631 0000 00000000 		.word	const_1e_14
 34632 0004 00000000 		.word	const_1e_24
 34633 0008 00000000 		.word	const_1e_32
 34634              		.section	.rodata.modes.11077,"a"
ARM GAS  /tmp/ccK8IvWa.s 			page 870


 34635              		.align	2
 34636              		.set	.LANCHOR1,. + 0
 34639              	modes.11077:
 34640 0000 03020401 		.ascii	"\003\002\004\001\005\000\006"
 34640      050006
 34641              		.section	.rodata.modes.11547,"a"
 34642              		.align	2
 34643              		.set	.LANCHOR4,. + 0
 34646              	modes.11547:
 34647 0000 02010081 		.ascii	"\002\001\000\201"
 34648              		.section	.rodata.xrom_targets,"a"
 34649              		.align	2
 34650              		.set	.LANCHOR6,. + 0
 34653              	xrom_targets:
 34654 0000 9107     		.short	1937
 34655 0002 B70B     		.short	2999
 34656 0004 4602     		.short	582
 34657 0006 4402     		.short	580
 34658 0008 420A     		.short	2626
 34659 000a 340A     		.short	2612
 34660 000c 100C     		.short	3088
 34661 000e 9C05     		.short	1436
 34662 0010 3B0A     		.short	2619
 34663 0012 5A06     		.short	1626
 34664 0014 6F06     		.short	1647
 34665 0016 6B06     		.short	1643
 34666 0018 6406     		.short	1636
 34667 001a 390A     		.short	2617
 34668 001c 7206     		.short	1650
 34669 001e 7506     		.short	1653
 34670 0020 7706     		.short	1655
 34671 0022 5D06     		.short	1629
 34672 0024 5707     		.short	1879
 34673 0026 4F08     		.short	2127
 34674 0028 EB05     		.short	1515
 34675 002a 0405     		.short	1284
 34676 002c 2907     		.short	1833
 34677 002e 8205     		.short	1410
 34678 0030 9A05     		.short	1434
 34679 0032 EC05     		.short	1516
 34680              		.text
 34681              	.Letext0:
 34682              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 34683              		.file 3 "dmcp/dmcp.h"
 34684              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 34685              		.file 5 "/usr/include/newlib/sys/_types.h"
 34686              		.file 6 "/usr/include/newlib/sys/reent.h"
 34687              		.file 7 "/usr/include/newlib/sys/lock.h"
 34688              		.file 8 "/usr/include/newlib/stdlib.h"
 34689              		.file 9 "src/decNumber/decContext.h"
 34690              		.file 10 "src/decNumber/decNumber.h"
 34691              		.file 11 "src/decNumber/decimal64.h"
 34692              		.file 12 "src/decNumber/decimal128.h"
 34693              		.file 13 "src/xeq.h"
 34694              		.file 14 "src/data.h"
 34695              		.file 15 "src/storage.h"
 34696              		.file 16 "src/stats.h"
ARM GAS  /tmp/ccK8IvWa.s 			page 871


 34697              		.file 17 "src/display.h"
 34698              		.file 18 "src/consts.h"
 34699              		.file 19 "src/xrom.h"
 34700              		.file 20 "src/pretty.h"
 34701              		.file 21 "src/xrom_targets.c"
 34702              		.file 22 "src/int.h"
 34703              		.file 23 "/usr/include/newlib/string.h"
 34704              		.file 24 "src/lcd.h"
 34705              		.file 25 "src/decn.h"
 34706              		.file 26 "src/complex.h"
 34707              		.file 27 "/usr/include/newlib/stdio.h"
 34708              		.file 28 "src/alpha.h"
ARM GAS  /tmp/ccK8IvWa.s 			page 872


DEFINED SYMBOLS
                            *ABS*:0000000000000000 xeq.c
     /tmp/ccK8IvWa.s:18     .text.find_section_bounds:0000000000000000 $t
     /tmp/ccK8IvWa.s:26     .text.find_section_bounds:0000000000000000 find_section_bounds
     /tmp/ccK8IvWa.s:162    .text.find_section_bounds:0000000000000064 $d
     /tmp/ccK8IvWa.s:170    .text.reg_address:0000000000000000 $t
     /tmp/ccK8IvWa.s:177    .text.reg_address:0000000000000000 reg_address
     /tmp/ccK8IvWa.s:290    .text.reg_address:0000000000000058 $d
     /tmp/ccK8IvWa.s:297    .text.retstk_up:0000000000000000 $t
     /tmp/ccK8IvWa.s:304    .text.retstk_up:0000000000000000 retstk_up
     /tmp/ccK8IvWa.s:435    .text.retstk_up:000000000000006c $d
                            *COM*:0000000000000004 RetStk
     /tmp/ccK8IvWa.s:442    .text.flag_word:0000000000000000 $t
     /tmp/ccK8IvWa.s:449    .text.flag_word:0000000000000000 flag_word
     /tmp/ccK8IvWa.s:561    .text.flag_word:0000000000000064 $d
     /tmp/ccK8IvWa.s:569    .text.intResult:0000000000000000 $t
     /tmp/ccK8IvWa.s:576    .text.intResult:0000000000000000 intResult
     /tmp/ccK8IvWa.s:776    .text.intResult:00000000000000a4 $d
                            *COM*:0000000000000004 Error
     /tmp/ccK8IvWa.s:782    .text.global_regs.part.0:0000000000000000 $t
     /tmp/ccK8IvWa.s:789    .text.global_regs.part.0:0000000000000000 global_regs.part.0
     /tmp/ccK8IvWa.s:818    .text.global_regs.part.0:000000000000000c $d
     /tmp/ccK8IvWa.s:823    .text.check_stack_overlap:0000000000000000 $t
     /tmp/ccK8IvWa.s:830    .text.check_stack_overlap:0000000000000000 check_stack_overlap
     /tmp/ccK8IvWa.s:1032   .text.check_stack_overlap:0000000000000068 $d
     /tmp/ccK8IvWa.s:1041   .text.is_xrom:0000000000000000 $t
     /tmp/ccK8IvWa.s:1049   .text.is_xrom:0000000000000000 is_xrom
     /tmp/ccK8IvWa.s:1069   .text.is_xrom:0000000000000014 $d
     /tmp/ccK8IvWa.s:1074   .text.move_retstk:0000000000000000 $t
     /tmp/ccK8IvWa.s:1082   .text.move_retstk:0000000000000000 move_retstk
     /tmp/ccK8IvWa.s:1263   .text.move_retstk:000000000000006c $d
                            *COM*:0000000000000004 RetStkSize
     /tmp/ccK8IvWa.s:1272   .text.local_levels:0000000000000000 $t
     /tmp/ccK8IvWa.s:1280   .text.local_levels:0000000000000000 local_levels
     /tmp/ccK8IvWa.s:1308   .text.local_levels:000000000000001c $d
     /tmp/ccK8IvWa.s:1314   .text.local_regs_rarg:0000000000000000 $t
     /tmp/ccK8IvWa.s:1322   .text.local_regs_rarg:0000000000000000 local_regs_rarg
     /tmp/ccK8IvWa.s:1416   .text.local_regs_rarg:0000000000000054 $d
     /tmp/ccK8IvWa.s:1422   .text.get_reg_limit:0000000000000000 $t
     /tmp/ccK8IvWa.s:1429   .text.get_reg_limit:0000000000000000 get_reg_limit
     /tmp/ccK8IvWa.s:1670   .text.get_reg_limit:00000000000000ac $d
     /tmp/ccK8IvWa.s:1679   .text.local_regs:0000000000000000 $t
     /tmp/ccK8IvWa.s:1687   .text.local_regs:0000000000000000 local_regs
     /tmp/ccK8IvWa.s:1780   .text.local_regs:0000000000000034 $d
     /tmp/ccK8IvWa.s:1790   .text.global_regs_rarg:0000000000000000 $t
     /tmp/ccK8IvWa.s:1798   .text.global_regs_rarg:0000000000000000 global_regs_rarg
     /tmp/ccK8IvWa.s:1877   .text.global_regs_rarg:0000000000000038 $d
     /tmp/ccK8IvWa.s:1882   .text.global_regs:0000000000000000 $t
     /tmp/ccK8IvWa.s:1890   .text.global_regs:0000000000000000 global_regs
     /tmp/ccK8IvWa.s:1935   .text.global_regs:000000000000001c $d
     /tmp/ccK8IvWa.s:1940   .text.version:0000000000000000 $t
     /tmp/ccK8IvWa.s:1948   .text.version:0000000000000000 version
     /tmp/ccK8IvWa.s:1979   .text.version:0000000000000018 $d
     /tmp/ccK8IvWa.s:1984   .text.cmd_off:0000000000000000 $t
     /tmp/ccK8IvWa.s:1992   .text.cmd_off:0000000000000000 cmd_off
     /tmp/ccK8IvWa.s:2008   .text.sizeLIB:0000000000000000 $t
     /tmp/ccK8IvWa.s:2016   .text.sizeLIB:0000000000000000 sizeLIB
ARM GAS  /tmp/ccK8IvWa.s 			page 873


     /tmp/ccK8IvWa.s:2050   .text.sizeLIB:0000000000000018 $d
     /tmp/ccK8IvWa.s:2056   .text.getprog:0000000000000000 $t
     /tmp/ccK8IvWa.s:2064   .text.getprog:0000000000000000 getprog
     /tmp/ccK8IvWa.s:2168   .text.getprog:0000000000000048 $d
     /tmp/ccK8IvWa.s:2176   .text.get_current_prog:0000000000000000 $t
     /tmp/ccK8IvWa.s:2184   .text.get_current_prog:0000000000000000 get_current_prog
     /tmp/ccK8IvWa.s:2215   .text.get_current_prog:0000000000000020 $d
     /tmp/ccK8IvWa.s:2221   .text.do_inc:0000000000000000 $t
     /tmp/ccK8IvWa.s:2229   .text.do_inc:0000000000000000 do_inc
     /tmp/ccK8IvWa.s:2309   .text.do_inc:0000000000000044 $d
                            *COM*:0000000000000004 PcWrapped
     /tmp/ccK8IvWa.s:2314   .text.user_pc.part.0:0000000000000000 $t
     /tmp/ccK8IvWa.s:2321   .text.user_pc.part.0:0000000000000000 user_pc.part.0
     /tmp/ccK8IvWa.s:2391   .text.user_pc.part.0:0000000000000034 $d
     /tmp/ccK8IvWa.s:2396   .rodata.print_step.str1.4:0000000000000000 $d
     /tmp/ccK8IvWa.s:2400   .text.print_step:0000000000000000 $t
     /tmp/ccK8IvWa.s:2407   .text.print_step:0000000000000000 print_step
     /tmp/ccK8IvWa.s:2575   .text.print_step:0000000000000098 $d
                            *COM*:0000000000000019 TraceBuffer
     /tmp/ccK8IvWa.s:2586   .text.do_dec:0000000000000000 $t
     /tmp/ccK8IvWa.s:2594   .text.do_dec:0000000000000000 do_dec
     /tmp/ccK8IvWa.s:2676   .text.do_dec:0000000000000048 $d
     /tmp/ccK8IvWa.s:2681   .text.update_program_bounds:0000000000000000 $t
     /tmp/ccK8IvWa.s:2689   .text.update_program_bounds:0000000000000000 update_program_bounds
     /tmp/ccK8IvWa.s:2840   .text.update_program_bounds:0000000000000084 $d
     /tmp/ccK8IvWa.s:2847   .text.set_pc:0000000000000000 $t
     /tmp/ccK8IvWa.s:2855   .text.set_pc:0000000000000000 set_pc
     /tmp/ccK8IvWa.s:3084   .text.set_pc:00000000000000a0 $d
     /tmp/ccK8IvWa.s:3093   .text.incpc:0000000000000000 $t
     /tmp/ccK8IvWa.s:3101   .text.incpc:0000000000000000 incpc
     /tmp/ccK8IvWa.s:3147   .text.incpc:0000000000000020 $d
     /tmp/ccK8IvWa.s:3153   .text.decpc:0000000000000000 $t
     /tmp/ccK8IvWa.s:3161   .text.decpc:0000000000000000 decpc
     /tmp/ccK8IvWa.s:3209   .text.decpc:0000000000000020 $d
     /tmp/ccK8IvWa.s:3216   .text.fin_tst.part.0:0000000000000000 $t
     /tmp/ccK8IvWa.s:3223   .text.fin_tst.part.0:0000000000000000 fin_tst.part.0
     /tmp/ccK8IvWa.s:3256   .text.do_rtn:0000000000000000 $t
     /tmp/ccK8IvWa.s:3263   .text.do_rtn:0000000000000000 do_rtn
     /tmp/ccK8IvWa.s:3455   .text.do_rtn:0000000000000084 $d
                            *COM*:0000000000000004 Running
     /tmp/ccK8IvWa.s:3466   .text.user_pc:0000000000000000 $t
     /tmp/ccK8IvWa.s:3474   .text.user_pc:0000000000000000 user_pc
     /tmp/ccK8IvWa.s:3506   .text.find_user_pc:0000000000000000 $t
     /tmp/ccK8IvWa.s:3514   .text.find_user_pc:0000000000000000 find_user_pc
     /tmp/ccK8IvWa.s:3621   .text.find_user_pc:000000000000004c $d
     /tmp/ccK8IvWa.s:3627   .text.report_err:0000000000000000 $t
     /tmp/ccK8IvWa.s:3635   .text.report_err:0000000000000000 report_err
     /tmp/ccK8IvWa.s:3694   .text.report_err:000000000000001c $d
     /tmp/ccK8IvWa.s:3699   .text.report_warn:0000000000000000 $t
     /tmp/ccK8IvWa.s:3707   .text.report_warn:0000000000000000 report_warn
     /tmp/ccK8IvWa.s:3827   .text.report_warn:0000000000000048 $d
     /tmp/ccK8IvWa.s:3836   .text.bad_mode_error:0000000000000000 $t
     /tmp/ccK8IvWa.s:3844   .text.bad_mode_error:0000000000000000 bad_mode_error
     /tmp/ccK8IvWa.s:3885   .text.bad_mode_error:000000000000000c $d
     /tmp/ccK8IvWa.s:3890   .text.cmderr:0000000000000000 $t
     /tmp/ccK8IvWa.s:3898   .text.cmderr:0000000000000000 cmderr
     /tmp/ccK8IvWa.s:3955   .text.cmderr:0000000000000010 $d
ARM GAS  /tmp/ccK8IvWa.s 			page 874


     /tmp/ccK8IvWa.s:3964   .text.cmdmsg:0000000000000000 $t
     /tmp/ccK8IvWa.s:3972   .text.cmdmsg:0000000000000000 cmdmsg
     /tmp/ccK8IvWa.s:3988   .text.rarg_roundingmode:0000000000000000 $t
     /tmp/ccK8IvWa.s:3996   .text.rarg_roundingmode:0000000000000000 rarg_roundingmode
     /tmp/ccK8IvWa.s:4017   .text.rarg_roundingmode:0000000000000010 $d
     /tmp/ccK8IvWa.s:4022   .text.packed_from_number:0000000000000000 $t
     /tmp/ccK8IvWa.s:4030   .text.packed_from_number:0000000000000000 packed_from_number
     /tmp/ccK8IvWa.s:4096   .text.packed_from_number:0000000000000030 $d
     /tmp/ccK8IvWa.s:4102   .text.packed128_from_number:0000000000000000 $t
     /tmp/ccK8IvWa.s:4110   .text.packed128_from_number:0000000000000000 packed128_from_number
     /tmp/ccK8IvWa.s:4176   .text.packed128_from_number:0000000000000030 $d
     /tmp/ccK8IvWa.s:4182   .text.check_special:0000000000000000 $t
     /tmp/ccK8IvWa.s:4189   .text.check_special:0000000000000000 check_special
     /tmp/ccK8IvWa.s:4415   .text.check_special:00000000000000a0 $d
     /tmp/ccK8IvWa.s:4421   .text.packed_from_packed128:0000000000000000 $t
     /tmp/ccK8IvWa.s:4429   .text.packed_from_packed128:0000000000000000 packed_from_packed128
     /tmp/ccK8IvWa.s:4472   .text.packed128_from_packed:0000000000000000 $t
     /tmp/ccK8IvWa.s:4480   .text.packed128_from_packed:0000000000000000 packed128_from_packed
     /tmp/ccK8IvWa.s:4523   .text.stack_size:0000000000000000 $t
     /tmp/ccK8IvWa.s:4531   .text.stack_size:0000000000000000 stack_size
     /tmp/ccK8IvWa.s:4580   .text.stack_size:000000000000002c $d
     /tmp/ccK8IvWa.s:4586   .text.copyreg:0000000000000000 $t
     /tmp/ccK8IvWa.s:4594   .text.copyreg:0000000000000000 copyreg
     /tmp/ccK8IvWa.s:4626   .text.copyreg:000000000000001c $d
     /tmp/ccK8IvWa.s:4631   .text.set_lift:0000000000000000 $t
     /tmp/ccK8IvWa.s:4639   .text.set_lift:0000000000000000 set_lift
     /tmp/ccK8IvWa.s:4657   .text.set_lift:000000000000000c $d
     /tmp/ccK8IvWa.s:4662   .text.is_dblmode:0000000000000000 $t
     /tmp/ccK8IvWa.s:4670   .text.is_dblmode:0000000000000000 is_dblmode
     /tmp/ccK8IvWa.s:4691   .text.is_dblmode:0000000000000018 $d
     /tmp/ccK8IvWa.s:4696   .text.is_usrdblmode:0000000000000000 $t
     /tmp/ccK8IvWa.s:4704   .text.is_usrdblmode:0000000000000000 is_usrdblmode
     /tmp/ccK8IvWa.s:4745   .text.is_usrdblmode:000000000000002c $d
     /tmp/ccK8IvWa.s:4751   .text.s_to_i:0000000000000000 $t
     /tmp/ccK8IvWa.s:4759   .text.s_to_i:0000000000000000 s_to_i
     /tmp/ccK8IvWa.s:4907   .text.digit:0000000000000000 $t
     /tmp/ccK8IvWa.s:4914   .text.digit:0000000000000000 digit
     /tmp/ccK8IvWa.s:5478   .text.digit:0000000000000188 $d
     /tmp/ccK8IvWa.s:5487   .text.s_to_ull:0000000000000000 $t
     /tmp/ccK8IvWa.s:5495   .text.s_to_ull:0000000000000000 s_to_ull
     /tmp/ccK8IvWa.s:5589   .text.get_cmdline:0000000000000000 $t
     /tmp/ccK8IvWa.s:5597   .text.get_cmdline:0000000000000000 get_cmdline
     /tmp/ccK8IvWa.s:5625   .text.get_cmdline:0000000000000014 $d
     /tmp/ccK8IvWa.s:5630   .text.is_bad_cmdline:0000000000000000 $t
     /tmp/ccK8IvWa.s:5638   .text.is_bad_cmdline:0000000000000000 is_bad_cmdline
     /tmp/ccK8IvWa.s:5713   .text.is_bad_cmdline:000000000000003c $d
     /tmp/ccK8IvWa.s:5718   .text.get_flash_reg_n:0000000000000000 $t
     /tmp/ccK8IvWa.s:5726   .text.get_flash_reg_n:0000000000000000 get_flash_reg_n
     /tmp/ccK8IvWa.s:5751   .text.get_flash_reg_n:0000000000000018 $d
     /tmp/ccK8IvWa.s:5756   .text.get_const:0000000000000000 $t
     /tmp/ccK8IvWa.s:5764   .text.get_const:0000000000000000 get_const
     /tmp/ccK8IvWa.s:5912   .text.get_const:0000000000000074 $d
     /tmp/ccK8IvWa.s:5920   .text.get_reg_n:0000000000000000 $t
     /tmp/ccK8IvWa.s:5928   .text.get_reg_n:0000000000000000 get_reg_n
     /tmp/ccK8IvWa.s:6143   .text.get_reg_n:00000000000000a4 $d
     /tmp/ccK8IvWa.s:6151   .text.get_stack:0000000000000000 $t
     /tmp/ccK8IvWa.s:6159   .text.get_stack:0000000000000000 get_stack
ARM GAS  /tmp/ccK8IvWa.s 			page 875


     /tmp/ccK8IvWa.s:6179   .text.lift:0000000000000000 $t
     /tmp/ccK8IvWa.s:6187   .text.lift:0000000000000000 lift
     /tmp/ccK8IvWa.s:6363   .text.lift:0000000000000060 $d
     /tmp/ccK8IvWa.s:6371   .text.lift_if_enabled:0000000000000000 $t
     /tmp/ccK8IvWa.s:6379   .text.lift_if_enabled:0000000000000000 lift_if_enabled
     /tmp/ccK8IvWa.s:6409   .text.lift_if_enabled:0000000000000010 $d
     /tmp/ccK8IvWa.s:6414   .text.lower:0000000000000000 $t
     /tmp/ccK8IvWa.s:6421   .text.lower:0000000000000000 lower
     /tmp/ccK8IvWa.s:6600   .text.lower:0000000000000068 $d
     /tmp/ccK8IvWa.s:6608   .text.get_stack_top:0000000000000000 $t
     /tmp/ccK8IvWa.s:6615   .text.get_stack_top:0000000000000000 get_stack_top
     /tmp/ccK8IvWa.s:6698   .text.get_stack_top:0000000000000034 $d
     /tmp/ccK8IvWa.s:6706   .text.roll_down:0000000000000000 $t
     /tmp/ccK8IvWa.s:6714   .text.roll_down:0000000000000000 roll_down
     /tmp/ccK8IvWa.s:6830   .text.roll_down:0000000000000048 $d
                            *COM*:0000000000000004 StackBase
     /tmp/ccK8IvWa.s:6836   .text.cpx_roll_down:0000000000000000 $t
     /tmp/ccK8IvWa.s:6844   .text.cpx_roll_down:0000000000000000 cpx_roll_down
     /tmp/ccK8IvWa.s:6886   .text.cpx_roll_down:000000000000001c $d
     /tmp/ccK8IvWa.s:6891   .text.roll_up:0000000000000000 $t
     /tmp/ccK8IvWa.s:6899   .text.roll_up:0000000000000000 roll_up
     /tmp/ccK8IvWa.s:7021   .text.roll_up:0000000000000048 $d
     /tmp/ccK8IvWa.s:7027   .text.cpx_roll_up:0000000000000000 $t
     /tmp/ccK8IvWa.s:7035   .text.cpx_roll_up:0000000000000000 cpx_roll_up
     /tmp/ccK8IvWa.s:7077   .text.cpx_roll_up:000000000000001c $d
     /tmp/ccK8IvWa.s:7082   .text.fill:0000000000000000 $t
     /tmp/ccK8IvWa.s:7090   .text.fill:0000000000000000 fill
     /tmp/ccK8IvWa.s:7236   .text.fill:0000000000000064 $d
     /tmp/ccK8IvWa.s:7245   .text.lower2:0000000000000000 $t
     /tmp/ccK8IvWa.s:7252   .text.lower2:0000000000000000 lower2
     /tmp/ccK8IvWa.s:7431   .text.lower2:0000000000000068 $d
     /tmp/ccK8IvWa.s:7439   .text.drop:0000000000000000 $t
     /tmp/ccK8IvWa.s:7447   .text.drop:0000000000000000 drop
     /tmp/ccK8IvWa.s:7490   .text.drop:000000000000001c $d
     /tmp/ccK8IvWa.s:7495   .text.copyreg_n:0000000000000000 $t
     /tmp/ccK8IvWa.s:7503   .text.copyreg_n:0000000000000000 copyreg_n
     /tmp/ccK8IvWa.s:7586   .text.copyreg_n:0000000000000034 $d
     /tmp/ccK8IvWa.s:7593   .text.setlastX:0000000000000000 $t
     /tmp/ccK8IvWa.s:7601   .text.setlastX:0000000000000000 setlastX
     /tmp/ccK8IvWa.s:7617   .text.setlastXY:0000000000000000 $t
     /tmp/ccK8IvWa.s:7624   .text.setlastXY:0000000000000000 setlastXY
     /tmp/ccK8IvWa.s:7667   .text.getRegister:0000000000000000 $t
     /tmp/ccK8IvWa.s:7675   .text.getRegister:0000000000000000 getRegister
     /tmp/ccK8IvWa.s:7736   .text.getRegister:0000000000000030 $d
     /tmp/ccK8IvWa.s:7741   .text.getX:0000000000000000 $t
     /tmp/ccK8IvWa.s:7749   .text.getX:0000000000000000 getX
     /tmp/ccK8IvWa.s:7767   .text.getY:0000000000000000 $t
     /tmp/ccK8IvWa.s:7775   .text.getY:0000000000000000 getY
     /tmp/ccK8IvWa.s:7792   .text.getXY:0000000000000000 $t
     /tmp/ccK8IvWa.s:7800   .text.getXY:0000000000000000 getXY
     /tmp/ccK8IvWa.s:7861   .text.getXYZ:0000000000000000 $t
     /tmp/ccK8IvWa.s:7869   .text.getXYZ:0000000000000000 getXYZ
     /tmp/ccK8IvWa.s:7962   .text.getYZ:0000000000000000 $t
     /tmp/ccK8IvWa.s:7970   .text.getYZ:0000000000000000 getYZ
     /tmp/ccK8IvWa.s:8031   .text.getXYZT:0000000000000000 $t
     /tmp/ccK8IvWa.s:8039   .text.getXYZT:0000000000000000 getXYZT
     /tmp/ccK8IvWa.s:8085   .text.storcl_op:0000000000000000 $t
ARM GAS  /tmp/ccK8IvWa.s 			page 876


     /tmp/ccK8IvWa.s:8092   .text.storcl_op:0000000000000000 storcl_op
     /tmp/ccK8IvWa.s:8166   .text.storcl_op:000000000000002c $d
     /tmp/ccK8IvWa.s:8173   .text.storcl_op:0000000000000032 $t
     /tmp/ccK8IvWa.s:8285   .text.storcl_cop:0000000000000000 $t
     /tmp/ccK8IvWa.s:8292   .text.storcl_cop:0000000000000000 storcl_cop
     /tmp/ccK8IvWa.s:8402   .text.storcl_cop:0000000000000040 $d
     /tmp/ccK8IvWa.s:8407   .text.storcl_cop:0000000000000044 $t
     /tmp/ccK8IvWa.s:8520   .text.cpx_enter:0000000000000000 $t
     /tmp/ccK8IvWa.s:8528   .text.cpx_enter:0000000000000000 cpx_enter
     /tmp/ccK8IvWa.s:8617   .text.cpx_enter:0000000000000044 $d
     /tmp/ccK8IvWa.s:8623   .text.cpx_fill:0000000000000000 $t
     /tmp/ccK8IvWa.s:8631   .text.cpx_fill:0000000000000000 cpx_fill
     /tmp/ccK8IvWa.s:8824   .text.cpx_fill:0000000000000080 $d
     /tmp/ccK8IvWa.s:8834   .text.setRegister:0000000000000000 $t
     /tmp/ccK8IvWa.s:8842   .text.setRegister:0000000000000000 setRegister
     /tmp/ccK8IvWa.s:8936   .text.setRegister:0000000000000048 $d
                            *COM*:0000000000000018 Ctx
     /tmp/ccK8IvWa.s:8942   .text.setX:0000000000000000 $t
     /tmp/ccK8IvWa.s:8950   .text.setX:0000000000000000 setX
     /tmp/ccK8IvWa.s:8972   .text.rarg_round:0000000000000000 $t
     /tmp/ccK8IvWa.s:8980   .text.rarg_round:0000000000000000 rarg_round
     /tmp/ccK8IvWa.s:9150   .text.rarg_round:0000000000000064 $d
     /tmp/ccK8IvWa.s:9157   .text.setY:0000000000000000 $t
     /tmp/ccK8IvWa.s:9165   .text.setY:0000000000000000 setY
     /tmp/ccK8IvWa.s:9187   .text.setXY:0000000000000000 $t
     /tmp/ccK8IvWa.s:9195   .text.setXY:0000000000000000 setXY
     /tmp/ccK8IvWa.s:9259   .text.get_reg_n_int:0000000000000000 $t
     /tmp/ccK8IvWa.s:9267   .text.get_reg_n_int:0000000000000000 get_reg_n_int
     /tmp/ccK8IvWa.s:9304   .text.storcl_intop:0000000000000000 $t
     /tmp/ccK8IvWa.s:9311   .text.storcl_intop:0000000000000000 storcl_intop
     /tmp/ccK8IvWa.s:9403   .text.storcl_intop:0000000000000038 $d
     /tmp/ccK8IvWa.s:9409   .text.storcl_intop:000000000000003e $t
     /tmp/ccK8IvWa.s:9511   .text.incdec:0000000000000000 $t
     /tmp/ccK8IvWa.s:9518   .text.incdec:0000000000000000 incdec
     /tmp/ccK8IvWa.s:9697   .text.incdec:0000000000000090 $d
     /tmp/ccK8IvWa.s:9704   .text.set_reg_n_int:0000000000000000 $t
     /tmp/ccK8IvWa.s:9712   .text.set_reg_n_int:0000000000000000 set_reg_n_int
     /tmp/ccK8IvWa.s:9745   .text.get_reg_n_int_sgn:0000000000000000 $t
     /tmp/ccK8IvWa.s:9753   .text.get_reg_n_int_sgn:0000000000000000 get_reg_n_int_sgn
     /tmp/ccK8IvWa.s:9831   .text.get_reg_n_int_sgn:0000000000000034 $d
     /tmp/ccK8IvWa.s:9836   .text.get_keycode_from_reg:0000000000000000 $t
     /tmp/ccK8IvWa.s:9843   .text.get_keycode_from_reg:0000000000000000 get_keycode_from_reg
     /tmp/ccK8IvWa.s:9923   .text.get_keycode_from_reg:000000000000002c $d
     /tmp/ccK8IvWa.s:9928   .text.getX_int:0000000000000000 $t
     /tmp/ccK8IvWa.s:9936   .text.getX_int:0000000000000000 getX_int
     /tmp/ccK8IvWa.s:9952   .text.getX_int_sgn:0000000000000000 $t
     /tmp/ccK8IvWa.s:9960   .text.getX_int_sgn:0000000000000000 getX_int_sgn
     /tmp/ccK8IvWa.s:9982   .text.set_reg_n_int_sgn:0000000000000000 $t
     /tmp/ccK8IvWa.s:9990   .text.set_reg_n_int_sgn:0000000000000000 set_reg_n_int_sgn
     /tmp/ccK8IvWa.s:10114  .text.set_reg_n_int_sgn:000000000000005c $d
     /tmp/ccK8IvWa.s:10120  .text.op_roundingmode:0000000000000000 $t
     /tmp/ccK8IvWa.s:10128  .text.op_roundingmode:0000000000000000 op_roundingmode
     /tmp/ccK8IvWa.s:10183  .text.op_roundingmode:0000000000000024 $d
     /tmp/ccK8IvWa.s:10188  .text.register_from_int:0000000000000000 $t
     /tmp/ccK8IvWa.s:10195  .text.register_from_int:0000000000000000 register_from_int
     /tmp/ccK8IvWa.s:10288  .text.register_from_int:0000000000000050 $d
     /tmp/ccK8IvWa.s:10294  .text.int_from_register:0000000000000000 $t
ARM GAS  /tmp/ccK8IvWa.s 			page 877


     /tmp/ccK8IvWa.s:10301  .text.int_from_register:0000000000000000 int_from_register
     /tmp/ccK8IvWa.s:10369  .text.int_from_register:000000000000003c $d
     /tmp/ccK8IvWa.s:10374  .text.switch_to_int:0000000000000000 $t
     /tmp/ccK8IvWa.s:10381  .text.switch_to_int:0000000000000000 switch_to_int
     /tmp/ccK8IvWa.s:10528  .text.switch_to_int:0000000000000068 $d
     /tmp/ccK8IvWa.s:10536  .text.process_cmdline:0000000000000000 $t
     /tmp/ccK8IvWa.s:10544  .text.process_cmdline:0000000000000000 process_cmdline
     /tmp/ccK8IvWa.s:11163  .text.process_cmdline:0000000000000220 $d
                            *COM*:0000000000000004 XromRunning
     /tmp/ccK8IvWa.s:11173  .text.process_cmdline_set_lift:0000000000000000 $t
     /tmp/ccK8IvWa.s:11181  .text.process_cmdline_set_lift:0000000000000000 process_cmdline_set_lift
     /tmp/ccK8IvWa.s:11214  .text.process_cmdline_set_lift:0000000000000014 $d
     /tmp/ccK8IvWa.s:11219  .text.setX_int:0000000000000000 $t
     /tmp/ccK8IvWa.s:11227  .text.setX_int:0000000000000000 setX_int
     /tmp/ccK8IvWa.s:11278  .text.do_rcl:0000000000000000 $t
     /tmp/ccK8IvWa.s:11285  .text.do_rcl:0000000000000000 do_rcl
     /tmp/ccK8IvWa.s:11614  .text.do_rcl:00000000000000c4 $d
     /tmp/ccK8IvWa.s:11625  .text.setX_int_sgn:0000000000000000 $t
     /tmp/ccK8IvWa.s:11633  .text.setX_int_sgn:0000000000000000 setX_int_sgn
     /tmp/ccK8IvWa.s:11667  .text.zero_regs:0000000000000000 $t
     /tmp/ccK8IvWa.s:11675  .text.zero_regs:0000000000000000 zero_regs
     /tmp/ccK8IvWa.s:11712  .text.zero_regs:0000000000000024 $d
     /tmp/ccK8IvWa.s:11717  .text.move_regs:0000000000000000 $t
     /tmp/ccK8IvWa.s:11725  .text.move_regs:0000000000000000 move_regs
     /tmp/ccK8IvWa.s:11777  .text.move_regs:0000000000000020 $d
     /tmp/ccK8IvWa.s:11782  .text.zero_X:0000000000000000 $t
     /tmp/ccK8IvWa.s:11790  .text.zero_X:0000000000000000 zero_X
     /tmp/ccK8IvWa.s:11856  .text.zero_X:0000000000000020 $d
     /tmp/ccK8IvWa.s:11865  .text.zero_Y:0000000000000000 $t
     /tmp/ccK8IvWa.s:11873  .text.zero_Y:0000000000000000 zero_Y
     /tmp/ccK8IvWa.s:11936  .text.zero_Y:0000000000000028 $d
     /tmp/ccK8IvWa.s:11944  .text.clrx:0000000000000000 $t
     /tmp/ccK8IvWa.s:11952  .text.clrx:0000000000000000 clrx
     /tmp/ccK8IvWa.s:11986  .text.clrx:0000000000000014 $d
     /tmp/ccK8IvWa.s:11991  .text.clrstk:0000000000000000 $t
     /tmp/ccK8IvWa.s:11999  .text.clrstk:0000000000000000 clrstk
     /tmp/ccK8IvWa.s:12122  .text.clrstk:000000000000005c $d
     /tmp/ccK8IvWa.s:12132  .text.clrreg:0000000000000000 $t
     /tmp/ccK8IvWa.s:12140  .text.clrreg:0000000000000000 clrreg
     /tmp/ccK8IvWa.s:12533  .text.clrreg:0000000000000104 $d
     /tmp/ccK8IvWa.s:12543  .text.clrretstk:0000000000000000 $t
     /tmp/ccK8IvWa.s:12551  .text.clrretstk:0000000000000000 clrretstk
     /tmp/ccK8IvWa.s:12570  .text.clrretstk:0000000000000010 $d
     /tmp/ccK8IvWa.s:12575  .text.clrretstk_pc:0000000000000000 $t
     /tmp/ccK8IvWa.s:12583  .text.clrretstk_pc:0000000000000000 clrretstk_pc
     /tmp/ccK8IvWa.s:12652  .text.clrretstk_pc:000000000000001c $d
     /tmp/ccK8IvWa.s:12657  .text.cmdconst:0000000000000000 $t
     /tmp/ccK8IvWa.s:12665  .text.cmdconst:0000000000000000 cmdconst
     /tmp/ccK8IvWa.s:12974  .text.cmdconst:00000000000000b0 $d
     /tmp/ccK8IvWa.s:12982  .text.cmdsto:0000000000000000 $t
     /tmp/ccK8IvWa.s:12990  .text.cmdsto:0000000000000000 cmdsto
     /tmp/ccK8IvWa.s:13179  .text.cmdsto:0000000000000078 $d
     /tmp/ccK8IvWa.s:13185  .text.cmdrcl:0000000000000000 $t
     /tmp/ccK8IvWa.s:13193  .text.cmdrcl:0000000000000000 cmdrcl
     /tmp/ccK8IvWa.s:13209  .text.cmdcsto:0000000000000000 $t
     /tmp/ccK8IvWa.s:13217  .text.cmdcsto:0000000000000000 cmdcsto
     /tmp/ccK8IvWa.s:13491  .text.cmdcsto:00000000000000bc $d
ARM GAS  /tmp/ccK8IvWa.s 			page 878


     /tmp/ccK8IvWa.s:13499  .text.cmdcrcl:0000000000000000 $t
     /tmp/ccK8IvWa.s:13507  .text.cmdcrcl:0000000000000000 cmdcrcl
     /tmp/ccK8IvWa.s:13969  .text.cmdcrcl:00000000000000fc $d
     /tmp/ccK8IvWa.s:13984  .text.cmdircl:0000000000000000 $t
     /tmp/ccK8IvWa.s:13992  .text.cmdircl:0000000000000000 cmdircl
     /tmp/ccK8IvWa.s:14035  .text.cmdircl:000000000000001c $d
     /tmp/ccK8IvWa.s:14040  .text.cmdrrcl:0000000000000000 $t
     /tmp/ccK8IvWa.s:14048  .text.cmdrrcl:0000000000000000 cmdrrcl
     /tmp/ccK8IvWa.s:14206  .text.cmdrrcl:000000000000007c $d
     /tmp/ccK8IvWa.s:14216  .text.swap_reg:0000000000000000 $t
     /tmp/ccK8IvWa.s:14224  .text.swap_reg:0000000000000000 swap_reg
     /tmp/ccK8IvWa.s:14362  .text.swap_reg:000000000000005c $d
     /tmp/ccK8IvWa.s:14367  .text.cmdswap:0000000000000000 $t
     /tmp/ccK8IvWa.s:14375  .text.cmdswap:0000000000000000 cmdswap
     /tmp/ccK8IvWa.s:14504  .text.cmdswap:0000000000000088 $d
     /tmp/ccK8IvWa.s:14509  .text.cmdview:0000000000000000 $t
     /tmp/ccK8IvWa.s:14517  .text.cmdview:0000000000000000 cmdview
     /tmp/ccK8IvWa.s:14601  .text.cmdview:0000000000000050 $d
                            *COM*:0000000000000004 ShowRegister
     /tmp/ccK8IvWa.s:14608  .text.get_stack_size:0000000000000000 $t
     /tmp/ccK8IvWa.s:14616  .text.get_stack_size:0000000000000000 get_stack_size
     /tmp/ccK8IvWa.s:14711  .text.get_stack_size:000000000000003c $d
     /tmp/ccK8IvWa.s:14719  .text.get_word_size:0000000000000000 $t
     /tmp/ccK8IvWa.s:14727  .text.get_word_size:0000000000000000 get_word_size
     /tmp/ccK8IvWa.s:14770  .text.get_sign_mode:0000000000000000 $t
     /tmp/ccK8IvWa.s:14778  .text.get_sign_mode:0000000000000000 get_sign_mode
     /tmp/ccK8IvWa.s:14834  .text.get_sign_mode:0000000000000024 $d
     /tmp/ccK8IvWa.s:14839  .text.get_base:0000000000000000 $t
     /tmp/ccK8IvWa.s:14847  .text.get_base:0000000000000000 get_base
     /tmp/ccK8IvWa.s:14890  .text.DM42_Ticker:0000000000000000 $t
     /tmp/ccK8IvWa.s:14898  .text.DM42_Ticker:0000000000000000 DM42_Ticker
     /tmp/ccK8IvWa.s:14928  .text.DM42_Ticker:0000000000000010 $d
     /tmp/ccK8IvWa.s:14933  .text.op_ticks:0000000000000000 $t
     /tmp/ccK8IvWa.s:14941  .text.op_ticks:0000000000000000 op_ticks
     /tmp/ccK8IvWa.s:15018  .text.op_ticks:0000000000000024 $d
     /tmp/ccK8IvWa.s:15023  .text.op_voltage:0000000000000000 $t
     /tmp/ccK8IvWa.s:15031  .text.op_voltage:0000000000000000 op_voltage
     /tmp/ccK8IvWa.s:15132  .text.op_voltage:0000000000000054 $d
     /tmp/ccK8IvWa.s:15139  .text.free_mem:0000000000000000 $t
     /tmp/ccK8IvWa.s:15147  .text.free_mem:0000000000000000 free_mem
     /tmp/ccK8IvWa.s:15169  .text.free_mem:0000000000000010 $d
     /tmp/ccK8IvWa.s:15175  .text.free_flash:0000000000000000 $t
     /tmp/ccK8IvWa.s:15183  .text.free_flash:0000000000000000 free_flash
     /tmp/ccK8IvWa.s:15201  .text.free_flash:000000000000000c $d
     /tmp/ccK8IvWa.s:15206  .text.get_mem:0000000000000000 $t
     /tmp/ccK8IvWa.s:15214  .text.get_mem:0000000000000000 get_mem
     /tmp/ccK8IvWa.s:15449  .text.get_mem:0000000000000098 $d
     /tmp/ccK8IvWa.s:15459  .text.cmdputkey:0000000000000000 $t
     /tmp/ccK8IvWa.s:15467  .text.cmdputkey:0000000000000000 cmdputkey
     /tmp/ccK8IvWa.s:15556  .text.cmdputkey:0000000000000030 $d
     /tmp/ccK8IvWa.s:15562  .text.cmdkeytype:0000000000000000 $t
     /tmp/ccK8IvWa.s:15570  .text.cmdkeytype:0000000000000000 cmdkeytype
     /tmp/ccK8IvWa.s:15704  .text.cmdkeytype:0000000000000048 $d
     /tmp/ccK8IvWa.s:15713  .rodata.op_query_xtal.str1.4:0000000000000000 $d
     /tmp/ccK8IvWa.s:15717  .text.op_query_xtal:0000000000000000 $t
     /tmp/ccK8IvWa.s:15725  .text.op_query_xtal:0000000000000000 op_query_xtal
     /tmp/ccK8IvWa.s:15763  .text.op_query_xtal:0000000000000014 $d
ARM GAS  /tmp/ccK8IvWa.s 			page 879


     /tmp/ccK8IvWa.s:15771  .rodata.op_query_print.str1.4:0000000000000000 $d
     /tmp/ccK8IvWa.s:15775  .text.op_query_print:0000000000000000 $t
     /tmp/ccK8IvWa.s:15783  .text.op_query_print:0000000000000000 op_query_print
     /tmp/ccK8IvWa.s:15828  .text.op_query_print:0000000000000018 $d
     /tmp/ccK8IvWa.s:15838  .text.cmdstostk:0000000000000000 $t
     /tmp/ccK8IvWa.s:15846  .text.cmdstostk:0000000000000000 cmdstostk
     /tmp/ccK8IvWa.s:15896  .text.cmdrclstk:0000000000000000 $t
     /tmp/ccK8IvWa.s:15904  .text.cmdrclstk:0000000000000000 cmdrclstk
     /tmp/ccK8IvWa.s:15957  .text.find_opcode_from:0000000000000000 $t
     /tmp/ccK8IvWa.s:15965  .text.find_opcode_from:0000000000000000 find_opcode_from
     /tmp/ccK8IvWa.s:16137  .text.find_opcode_from:000000000000006c $d
     /tmp/ccK8IvWa.s:16142  .text.find_label_from:0000000000000000 $t
     /tmp/ccK8IvWa.s:16150  .text.find_label_from:0000000000000000 find_label_from
     /tmp/ccK8IvWa.s:16170  .text.op_rtn:0000000000000000 $t
     /tmp/ccK8IvWa.s:16178  .text.op_rtn:0000000000000000 op_rtn
     /tmp/ccK8IvWa.s:16212  .text.op_rtn:0000000000000020 $d
     /tmp/ccK8IvWa.s:16218  .text.op_popusr:0000000000000000 $t
     /tmp/ccK8IvWa.s:16226  .text.op_popusr:0000000000000000 op_popusr
     /tmp/ccK8IvWa.s:16299  .text.op_popusr:000000000000004c $d
                            *COM*:0000000000000004 XromUserPc
                            *COM*:0000000000000004 UserLocalRegs
     /tmp/ccK8IvWa.s:16307  .text.findmultilbl:0000000000000000 $t
     /tmp/ccK8IvWa.s:16315  .text.findmultilbl:0000000000000000 findmultilbl
     /tmp/ccK8IvWa.s:16428  .text.findmultilbl:0000000000000048 $d
     /tmp/ccK8IvWa.s:16433  .text.convC2F:0000000000000000 $t
     /tmp/ccK8IvWa.s:16441  .text.convC2F:0000000000000000 convC2F
     /tmp/ccK8IvWa.s:16483  .text.convC2F:000000000000001c $d
     /tmp/ccK8IvWa.s:16489  .text.convF2C:0000000000000000 $t
     /tmp/ccK8IvWa.s:16497  .text.convF2C:0000000000000000 convF2C
     /tmp/ccK8IvWa.s:16539  .text.convF2C:000000000000001c $d
     /tmp/ccK8IvWa.s:16545  .text.convDB2AR:0000000000000000 $t
     /tmp/ccK8IvWa.s:16553  .text.convDB2AR:0000000000000000 convDB2AR
     /tmp/ccK8IvWa.s:16595  .text.convDB2AR:000000000000001c $d
     /tmp/ccK8IvWa.s:16600  .text.convAR2DB:0000000000000000 $t
     /tmp/ccK8IvWa.s:16608  .text.convAR2DB:0000000000000000 convAR2DB
     /tmp/ccK8IvWa.s:16649  .text.convAR2DB:000000000000001c $d
     /tmp/ccK8IvWa.s:16654  .text.convDB2PR:0000000000000000 $t
     /tmp/ccK8IvWa.s:16662  .text.convDB2PR:0000000000000000 convDB2PR
     /tmp/ccK8IvWa.s:16703  .text.convPR2DB:0000000000000000 $t
     /tmp/ccK8IvWa.s:16711  .text.convPR2DB:0000000000000000 convPR2DB
     /tmp/ccK8IvWa.s:16752  .text.do_conv:0000000000000000 $t
     /tmp/ccK8IvWa.s:16760  .text.do_conv:0000000000000000 do_conv
     /tmp/ccK8IvWa.s:16852  .text.do_conv:0000000000000040 $d
     /tmp/ccK8IvWa.s:16857  .text.cmdconv:0000000000000000 $t
     /tmp/ccK8IvWa.s:16865  .text.cmdconv:0000000000000000 cmdconv
     /tmp/ccK8IvWa.s:16952  .text.cmdconv:0000000000000038 $d
     /tmp/ccK8IvWa.s:16957  .text.fin_tst:0000000000000000 $t
     /tmp/ccK8IvWa.s:16965  .text.fin_tst:0000000000000000 fin_tst
     /tmp/ccK8IvWa.s:17023  .text.fin_tst:000000000000002c $d
     /tmp/ccK8IvWa.s:17032  .text.check_mode:0000000000000000 $t
     /tmp/ccK8IvWa.s:17040  .text.check_mode:0000000000000000 check_mode
     /tmp/ccK8IvWa.s:17070  .text.check_mode:0000000000000020 $d
     /tmp/ccK8IvWa.s:17075  .text.check_dblmode:0000000000000000 $t
     /tmp/ccK8IvWa.s:17083  .text.check_dblmode:0000000000000000 check_dblmode
     /tmp/ccK8IvWa.s:17115  .text.check_dblmode:000000000000001c $d
     /tmp/ccK8IvWa.s:17120  .text.isTop:0000000000000000 $t
     /tmp/ccK8IvWa.s:17128  .text.isTop:0000000000000000 isTop
ARM GAS  /tmp/ccK8IvWa.s 			page 880


     /tmp/ccK8IvWa.s:17191  .text.isTop:0000000000000034 $d
     /tmp/ccK8IvWa.s:17200  .text.cmdlblp:0000000000000000 $t
     /tmp/ccK8IvWa.s:17208  .text.cmdlblp:0000000000000000 cmdlblp
     /tmp/ccK8IvWa.s:17257  .text.cmdlblp:0000000000000020 $d
     /tmp/ccK8IvWa.s:17262  .text.cmdmultilblp:0000000000000000 $t
     /tmp/ccK8IvWa.s:17270  .text.cmdmultilblp:0000000000000000 cmdmultilblp
     /tmp/ccK8IvWa.s:17305  .text.cmdkeyp:0000000000000000 $t
     /tmp/ccK8IvWa.s:17313  .text.cmdkeyp:0000000000000000 cmdkeyp
     /tmp/ccK8IvWa.s:17408  .text.cmdkeyp:0000000000000044 $d
     /tmp/ccK8IvWa.s:17413  .text.do_tst:0000000000000000 $t
     /tmp/ccK8IvWa.s:17420  .text.do_tst:0000000000000000 do_tst
     /tmp/ccK8IvWa.s:17562  .text.do_tst:0000000000000060 $d
     /tmp/ccK8IvWa.s:17836  .text.do_tst:0000000000000160 $d
     /tmp/ccK8IvWa.s:17843  .text.do_ztst:0000000000000000 $t
     /tmp/ccK8IvWa.s:17850  .text.do_ztst:0000000000000000 do_ztst
     /tmp/ccK8IvWa.s:18105  .text.do_ztst:00000000000000b4 $d
     /tmp/ccK8IvWa.s:18116  .text.check_zero:0000000000000000 $t
     /tmp/ccK8IvWa.s:18124  .text.check_zero:0000000000000000 check_zero
     /tmp/ccK8IvWa.s:18266  .text.check_zero:000000000000006c $d
     /tmp/ccK8IvWa.s:18271  .text.cmdtest:0000000000000000 $t
     /tmp/ccK8IvWa.s:18279  .text.cmdtest:0000000000000000 cmdtest
     /tmp/ccK8IvWa.s:18300  .text.cmdztest:0000000000000000 $t
     /tmp/ccK8IvWa.s:18308  .text.cmdztest:0000000000000000 cmdztest
     /tmp/ccK8IvWa.s:18361  .text.cmdlincdec:0000000000000000 $t
     /tmp/ccK8IvWa.s:18369  .text.cmdlincdec:0000000000000000 cmdlincdec
     /tmp/ccK8IvWa.s:18390  .text.cmdloopz:0000000000000000 $t
     /tmp/ccK8IvWa.s:18398  .text.cmdloopz:0000000000000000 cmdloopz
     /tmp/ccK8IvWa.s:18431  .text.cmdloop:0000000000000000 $t
     /tmp/ccK8IvWa.s:18439  .text.cmdloop:0000000000000000 cmdloop
     /tmp/ccK8IvWa.s:18926  .text.cmdloop:00000000000001f0 $d
     /tmp/ccK8IvWa.s:18932  .text.op_shift_digit:0000000000000000 $t
     /tmp/ccK8IvWa.s:18940  .text.op_shift_digit:0000000000000000 op_shift_digit
     /tmp/ccK8IvWa.s:19103  .text.op_shift_digit:000000000000005c $d
     /tmp/ccK8IvWa.s:19109  .text.get_user_flag:0000000000000000 $t
     /tmp/ccK8IvWa.s:19117  .text.get_user_flag:0000000000000000 get_user_flag
     /tmp/ccK8IvWa.s:19155  .text.cmdflag:0000000000000000 $t
     /tmp/ccK8IvWa.s:19163  .text.cmdflag:0000000000000000 cmdflag
     /tmp/ccK8IvWa.s:19208  .text.cmdflag:0000000000000028 $d
     /tmp/ccK8IvWa.s:19365  .text.put_user_flag:0000000000000000 $t
     /tmp/ccK8IvWa.s:19373  .text.put_user_flag:0000000000000000 put_user_flag
     /tmp/ccK8IvWa.s:19402  .text.clrflags:0000000000000000 $t
     /tmp/ccK8IvWa.s:19410  .text.clrflags:0000000000000000 clrflags
     /tmp/ccK8IvWa.s:19455  .text.clrflags:0000000000000028 $d
     /tmp/ccK8IvWa.s:19461  .text.intws:0000000000000000 $t
     /tmp/ccK8IvWa.s:19469  .text.intws:0000000000000000 intws
     /tmp/ccK8IvWa.s:19688  .text.intws:00000000000000dc $d
     /tmp/ccK8IvWa.s:19697  .text.get_maxdenom:0000000000000000 $t
     /tmp/ccK8IvWa.s:19705  .text.get_maxdenom:0000000000000000 get_maxdenom
     /tmp/ccK8IvWa.s:19732  .text.get_maxdenom:0000000000000018 $d
     /tmp/ccK8IvWa.s:19737  .rodata.op_2frac.str1.4:0000000000000000 $d
     /tmp/ccK8IvWa.s:19747  .text.op_2frac:0000000000000000 $t
     /tmp/ccK8IvWa.s:19755  .text.op_2frac:0000000000000000 op_2frac
     /tmp/ccK8IvWa.s:19925  .text.op_2frac:000000000000008c $d
     /tmp/ccK8IvWa.s:19935  .text.op_fracdenom:0000000000000000 $t
     /tmp/ccK8IvWa.s:19943  .text.op_fracdenom:0000000000000000 op_fracdenom
     /tmp/ccK8IvWa.s:20087  .text.op_fracdenom:000000000000007c $d
     /tmp/ccK8IvWa.s:20092  .text.op_float:0000000000000000 $t
ARM GAS  /tmp/ccK8IvWa.s 			page 881


     /tmp/ccK8IvWa.s:20100  .text.op_float:0000000000000000 op_float
     /tmp/ccK8IvWa.s:20306  .text.op_float:00000000000000bc $d
     /tmp/ccK8IvWa.s:20317  .text.cmddisp:0000000000000000 $t
     /tmp/ccK8IvWa.s:20325  .text.cmddisp:0000000000000000 cmddisp
     /tmp/ccK8IvWa.s:20364  .text.cmddisp:0000000000000028 $d
     /tmp/ccK8IvWa.s:20369  .text.set_int_base:0000000000000000 $t
     /tmp/ccK8IvWa.s:20377  .text.set_int_base:0000000000000000 set_int_base
     /tmp/ccK8IvWa.s:20482  .text.set_int_base:0000000000000048 $d
     /tmp/ccK8IvWa.s:20489  .text.op_fract:0000000000000000 $t
     /tmp/ccK8IvWa.s:20497  .text.op_fract:0000000000000000 op_fract
     /tmp/ccK8IvWa.s:20555  .text.op_fract:000000000000003c $d
     /tmp/ccK8IvWa.s:20560  .text.cmdsavem:0000000000000000 $t
     /tmp/ccK8IvWa.s:20568  .text.cmdsavem:0000000000000000 cmdsavem
     /tmp/ccK8IvWa.s:20597  .text.cmdsavem:0000000000000014 $d
     /tmp/ccK8IvWa.s:20602  .text.set_entry:0000000000000000 $t
     /tmp/ccK8IvWa.s:20610  .text.set_entry:0000000000000000 set_entry
     /tmp/ccK8IvWa.s:20647  .text.set_entry:000000000000001c $d
     /tmp/ccK8IvWa.s:20654  .text.get_trig_mode:0000000000000000 $t
     /tmp/ccK8IvWa.s:20662  .text.get_trig_mode:0000000000000000 get_trig_mode
     /tmp/ccK8IvWa.s:20696  .text.get_trig_mode:0000000000000020 $d
     /tmp/ccK8IvWa.s:20703  .text.cmdpause:0000000000000000 $t
     /tmp/ccK8IvWa.s:20711  .text.cmdpause:0000000000000000 cmdpause
     /tmp/ccK8IvWa.s:20751  .text.cmdpause:000000000000001c $d
                            *COM*:0000000000000001 Pause
     /tmp/ccK8IvWa.s:20757  .text.op_setspeed:0000000000000000 $t
     /tmp/ccK8IvWa.s:20765  .text.op_setspeed:0000000000000000 op_setspeed
     /tmp/ccK8IvWa.s:20793  .text.op_setspeed:000000000000001c $d
     /tmp/ccK8IvWa.s:20798  .text.op_prompt:0000000000000000 $t
     /tmp/ccK8IvWa.s:20806  .text.op_prompt:0000000000000000 op_prompt
     /tmp/ccK8IvWa.s:20883  .text.op_prompt:0000000000000028 $d
     /tmp/ccK8IvWa.s:20889  .text.XisInt:0000000000000000 $t
     /tmp/ccK8IvWa.s:20897  .text.XisInt:0000000000000000 XisInt
     /tmp/ccK8IvWa.s:21007  .text.XisInt:000000000000005c $d
     /tmp/ccK8IvWa.s:21012  .text.XisEvenOrOdd:0000000000000000 $t
     /tmp/ccK8IvWa.s:21020  .text.XisEvenOrOdd:0000000000000000 XisEvenOrOdd
     /tmp/ccK8IvWa.s:21132  .text.XisEvenOrOdd:0000000000000060 $d
     /tmp/ccK8IvWa.s:21137  .text.XisPrime:0000000000000000 $t
     /tmp/ccK8IvWa.s:21145  .text.XisPrime:0000000000000000 XisPrime
     /tmp/ccK8IvWa.s:21304  .text.XisPrime:000000000000007c $d
     /tmp/ccK8IvWa.s:21310  .text.isInfinite:0000000000000000 $t
     /tmp/ccK8IvWa.s:21318  .text.isInfinite:0000000000000000 isInfinite
     /tmp/ccK8IvWa.s:21369  .text.isInfinite:000000000000002c $d
     /tmp/ccK8IvWa.s:21374  .text.isNan:0000000000000000 $t
     /tmp/ccK8IvWa.s:21382  .text.isNan:0000000000000000 isNan
     /tmp/ccK8IvWa.s:21448  .text.isNan:000000000000003c $d
     /tmp/ccK8IvWa.s:21453  .text.isSpecial:0000000000000000 $t
     /tmp/ccK8IvWa.s:21461  .text.isSpecial:0000000000000000 isSpecial
     /tmp/ccK8IvWa.s:21527  .text.isSpecial:000000000000003c $d
     /tmp/ccK8IvWa.s:21532  .text.op_entryp:0000000000000000 $t
     /tmp/ccK8IvWa.s:21540  .text.op_entryp:0000000000000000 op_entryp
     /tmp/ccK8IvWa.s:21560  .text.op_entryp:0000000000000010 $d
     /tmp/ccK8IvWa.s:21565  .text.reg_decode:0000000000000000 $t
     /tmp/ccK8IvWa.s:21573  .text.reg_decode:0000000000000000 reg_decode
     /tmp/ccK8IvWa.s:22362  .text.reg_decode:0000000000000210 $d
     /tmp/ccK8IvWa.s:22376  .text.op_regcopy:0000000000000000 $t
     /tmp/ccK8IvWa.s:22384  .text.op_regcopy:0000000000000000 op_regcopy
     /tmp/ccK8IvWa.s:22486  .text.op_regcopy:0000000000000044 $d
ARM GAS  /tmp/ccK8IvWa.s 			page 882


     /tmp/ccK8IvWa.s:22491  .text.op_regswap:0000000000000000 $t
     /tmp/ccK8IvWa.s:22499  .text.op_regswap:0000000000000000 op_regswap
     /tmp/ccK8IvWa.s:22633  .text.op_regswap:000000000000006c $d
     /tmp/ccK8IvWa.s:22638  .text.op_regclr:0000000000000000 $t
     /tmp/ccK8IvWa.s:22646  .text.op_regclr:0000000000000000 op_regclr
     /tmp/ccK8IvWa.s:22726  .text.op_regclr:0000000000000040 $d
     /tmp/ccK8IvWa.s:22731  .text.op_regsort:0000000000000000 $t
     /tmp/ccK8IvWa.s:22739  .text.op_regsort:0000000000000000 op_regsort
     /tmp/ccK8IvWa.s:23023  .text.reset_volatile_state:0000000000000000 $t
     /tmp/ccK8IvWa.s:23031  .text.reset_volatile_state:0000000000000000 reset_volatile_state
     /tmp/ccK8IvWa.s:23055  .text.reset_volatile_state:0000000000000010 $d
     /tmp/ccK8IvWa.s:23060  .rodata.busy.str1.4:0000000000000000 $d
     /tmp/ccK8IvWa.s:23064  .text.busy:0000000000000000 $t
     /tmp/ccK8IvWa.s:23072  .text.busy:0000000000000000 busy
     /tmp/ccK8IvWa.s:23111  .text.busy:0000000000000018 $d
                            *COM*:0000000000000004 Busy
     /tmp/ccK8IvWa.s:23120  .text.intMonadic:0000000000000000 $t
     /tmp/ccK8IvWa.s:23128  .text.intMonadic:0000000000000000 intMonadic
     /tmp/ccK8IvWa.s:23357  .text.intMonadic:0000000000000084 $d
                            *COM*:0000000000000002 XeqOpCode
     /tmp/ccK8IvWa.s:23367  .text.intDyadic:0000000000000000 $t
     /tmp/ccK8IvWa.s:23375  .text.intDyadic:0000000000000000 intDyadic
     /tmp/ccK8IvWa.s:23659  .text.intDyadic:00000000000000c0 $d
     /tmp/ccK8IvWa.s:23669  .text.xeq_init_contexts:0000000000000000 $t
     /tmp/ccK8IvWa.s:23677  .text.xeq_init_contexts:0000000000000000 xeq_init_contexts
     /tmp/ccK8IvWa.s:23795  .text.xeq_init_contexts:0000000000000074 $d
                            *COM*:0000000000000004 ProgFree
     /tmp/ccK8IvWa.s:23809  .text.plot_check_range:0000000000000000 $t
     /tmp/ccK8IvWa.s:23817  .text.plot_check_range:0000000000000000 plot_check_range
     /tmp/ccK8IvWa.s:24078  .text.plot_check_range:000000000000009c $d
     /tmp/ccK8IvWa.s:24085  .text.cmdplotdisplay:0000000000000000 $t
     /tmp/ccK8IvWa.s:24093  .text.cmdplotdisplay:0000000000000000 cmdplotdisplay
     /tmp/ccK8IvWa.s:24144  .text.cmdplotdisplay:0000000000000020 $d
     /tmp/ccK8IvWa.s:24149  .text.cmdplotinit:0000000000000000 $t
     /tmp/ccK8IvWa.s:24157  .text.cmdplotinit:0000000000000000 cmdplotinit
     /tmp/ccK8IvWa.s:24292  .text.cmdplotdim:0000000000000000 $t
     /tmp/ccK8IvWa.s:24300  .text.cmdplotdim:0000000000000000 cmdplotdim
     /tmp/ccK8IvWa.s:24437  .text.cmdplotdim:0000000000000044 $d
     /tmp/ccK8IvWa.s:24446  .text.cmdplotpixel:0000000000000000 $t
     /tmp/ccK8IvWa.s:24454  .text.cmdplotpixel:0000000000000000 cmdplotpixel
     /tmp/ccK8IvWa.s:24661  .text.not_running:0000000000000000 $t
     /tmp/ccK8IvWa.s:24669  .text.not_running:0000000000000000 not_running
     /tmp/ccK8IvWa.s:24724  .text.not_running:000000000000001c $d
     /tmp/ccK8IvWa.s:24730  .text.set_running_off_sst:0000000000000000 $t
     /tmp/ccK8IvWa.s:24738  .text.set_running_off_sst:0000000000000000 set_running_off_sst
     /tmp/ccK8IvWa.s:24755  .text.set_running_off_sst:0000000000000008 $d
     /tmp/ccK8IvWa.s:24760  .text.set_running_on_sst:0000000000000000 $t
     /tmp/ccK8IvWa.s:24768  .text.set_running_on_sst:0000000000000000 set_running_on_sst
     /tmp/ccK8IvWa.s:24785  .text.set_running_on_sst:0000000000000008 $d
     /tmp/ccK8IvWa.s:24790  .text.set_running_off:0000000000000000 $t
     /tmp/ccK8IvWa.s:24798  .text.set_running_off:0000000000000000 set_running_off
     /tmp/ccK8IvWa.s:24856  .text.set_running_off:0000000000000020 $d
     /tmp/ccK8IvWa.s:24862  .text.set_running_on:0000000000000000 $t
     /tmp/ccK8IvWa.s:24870  .text.set_running_on:0000000000000000 set_running_on
     /tmp/ccK8IvWa.s:24963  .text.set_running_on:0000000000000034 $d
     /tmp/ccK8IvWa.s:24971  .text.gsbgto:0000000000000000 $t
     /tmp/ccK8IvWa.s:24978  .text.gsbgto:0000000000000000 gsbgto
ARM GAS  /tmp/ccK8IvWa.s 			page 883


     /tmp/ccK8IvWa.s:25152  .text.gsbgto:0000000000000088 $d
     /tmp/ccK8IvWa.s:25163  .text.cmdgtocommon:0000000000000000 $t
     /tmp/ccK8IvWa.s:25171  .text.cmdgtocommon:0000000000000000 cmdgtocommon
     /tmp/ccK8IvWa.s:25277  .text.cmdgtocommon:0000000000000030 $d
     /tmp/ccK8IvWa.s:25283  .text.cmdgto:0000000000000000 $t
     /tmp/ccK8IvWa.s:25291  .text.cmdgto:0000000000000000 cmdgto
     /tmp/ccK8IvWa.s:25371  .text.cmdgto:000000000000003c $d
     /tmp/ccK8IvWa.s:25379  .text.branchtoalpha:0000000000000000 $t
     /tmp/ccK8IvWa.s:25386  .text.branchtoalpha:0000000000000000 branchtoalpha
     /tmp/ccK8IvWa.s:25443  .text.cmdalphagto:0000000000000000 $t
     /tmp/ccK8IvWa.s:25451  .text.cmdalphagto:0000000000000000 cmdalphagto
     /tmp/ccK8IvWa.s:25503  .text.op_gtoalpha:0000000000000000 $t
     /tmp/ccK8IvWa.s:25511  .text.op_gtoalpha:0000000000000000 op_gtoalpha
     /tmp/ccK8IvWa.s:25567  .text.op_gtoalpha:000000000000002c $d
     /tmp/ccK8IvWa.s:25572  .text.cmdskip:0000000000000000 $t
     /tmp/ccK8IvWa.s:25580  .text.cmdskip:0000000000000000 cmdskip
     /tmp/ccK8IvWa.s:25760  .text.cmdskip:0000000000000074 $d
     /tmp/ccK8IvWa.s:25768  .text.cmdback:0000000000000000 $t
     /tmp/ccK8IvWa.s:25776  .text.cmdback:0000000000000000 cmdback
     /tmp/ccK8IvWa.s:25928  .text.cmdback:0000000000000064 $d
     /tmp/ccK8IvWa.s:25936  .text.usergsb_common:0000000000000000 $t
     /tmp/ccK8IvWa.s:25943  .text.usergsb_common:0000000000000000 usergsb_common
     /tmp/ccK8IvWa.s:26046  .text.usergsb_common:0000000000000070 $d
     /tmp/ccK8IvWa.s:26055  .text.do_usergsb:0000000000000000 $t
     /tmp/ccK8IvWa.s:26063  .text.do_usergsb:0000000000000000 do_usergsb
     /tmp/ccK8IvWa.s:26096  .text.do_usergsb:0000000000000014 $d
     /tmp/ccK8IvWa.s:26101  .text.cmdmultigto:0000000000000000 $t
     /tmp/ccK8IvWa.s:26109  .text.cmdmultigto:0000000000000000 cmdmultigto
     /tmp/ccK8IvWa.s:26212  .text.cmdmultigto:0000000000000048 $d
     /tmp/ccK8IvWa.s:26218  .text.store_a_to_d:0000000000000000 $t
     /tmp/ccK8IvWa.s:26226  .text.store_a_to_d:0000000000000000 store_a_to_d
     /tmp/ccK8IvWa.s:26274  .text.store_a_to_d:0000000000000020 $d
     /tmp/ccK8IvWa.s:26279  .text.cmdlocr:0000000000000000 $t
     /tmp/ccK8IvWa.s:26287  .text.cmdlocr:0000000000000000 cmdlocr
     /tmp/ccK8IvWa.s:26618  .text.cmdlocr:0000000000000158 $d
     /tmp/ccK8IvWa.s:26626  .text.cmdxout:0000000000000000 $t
     /tmp/ccK8IvWa.s:26634  .text.cmdxout:0000000000000000 cmdxout
     /tmp/ccK8IvWa.s:27152  .text.cmdxout:00000000000001dc $d
     /tmp/ccK8IvWa.s:27167  .text.cmdconverged:0000000000000000 $t
     /tmp/ccK8IvWa.s:27175  .text.cmdconverged:0000000000000000 cmdconverged
     /tmp/ccK8IvWa.s:27402  .text.cmdconverged:00000000000000dc $d
     /tmp/ccK8IvWa.s:27412  .text.cmdshuffle:0000000000000000 $t
     /tmp/ccK8IvWa.s:27420  .text.cmdshuffle:0000000000000000 cmdshuffle
     /tmp/ccK8IvWa.s:27651  .text.cmdshuffle:0000000000000080 $d
     /tmp/ccK8IvWa.s:27657  .text.cmdmode:0000000000000000 $t
     /tmp/ccK8IvWa.s:27665  .text.cmdmode:0000000000000000 cmdmode
     /tmp/ccK8IvWa.s:27746  .text.cmdmode:0000000000000050 $d
     /tmp/ccK8IvWa.s:27751  .text.cmdlpop:0000000000000000 $t
     /tmp/ccK8IvWa.s:27759  .text.cmdlpop:0000000000000000 cmdlpop
     /tmp/ccK8IvWa.s:27827  .text.cmdlpop:0000000000000030 $d
     /tmp/ccK8IvWa.s:27833  .text.cmdregs:0000000000000000 $t
     /tmp/ccK8IvWa.s:27841  .text.cmdregs:0000000000000000 cmdregs
     /tmp/ccK8IvWa.s:28014  .text.cmdregs:00000000000000a4 $d
     /tmp/ccK8IvWa.s:28022  .text.op_double:0000000000000000 $t
     /tmp/ccK8IvWa.s:28030  .text.op_double:0000000000000000 op_double
     /tmp/ccK8IvWa.s:28321  .text.op_double:0000000000000114 $d
     /tmp/ccK8IvWa.s:28329  .text.cmdrestm:0000000000000000 $t
ARM GAS  /tmp/ccK8IvWa.s 			page 884


     /tmp/ccK8IvWa.s:28337  .text.cmdrestm:0000000000000000 cmdrestm
     /tmp/ccK8IvWa.s:28523  .text.cmdrestm:00000000000000a4 $d
     /tmp/ccK8IvWa.s:28528  .text.cmdxin:0000000000000000 $t
     /tmp/ccK8IvWa.s:28536  .text.cmdxin:0000000000000000 cmdxin
     /tmp/ccK8IvWa.s:28967  .text.cmdxin:00000000000001a4 $d
     /tmp/ccK8IvWa.s:28980  .rodata.xeq.str1.4:0000000000000000 $d
     /tmp/ccK8IvWa.s:28984  .text.xeq:0000000000000000 $t
     /tmp/ccK8IvWa.s:28992  .text.xeq:0000000000000000 xeq
     /tmp/ccK8IvWa.s:29136  .text.xeq:0000000000000086 $d
     /tmp/ccK8IvWa.s:29143  .text.xeq:0000000000000094 $t
     /tmp/ccK8IvWa.s:33196  .text.dispatch_xrom:0000000000000000 dispatch_xrom
     /tmp/ccK8IvWa.s:29628  .text.xeq:0000000000000244 $d
     /tmp/ccK8IvWa.s:29659  .text.xeq:0000000000000280 $t
     /tmp/ccK8IvWa.s:30050  .text.xeq:00000000000003ce $d
     /tmp/ccK8IvWa.s:30094  .text.xeq:0000000000000424 $t
     /tmp/ccK8IvWa.s:30619  .text.xeq:000000000000055c $d
     /tmp/ccK8IvWa.s:30644  .text.xeq:000000000000057c $t
     /tmp/ccK8IvWa.s:31547  .text.xeq:0000000000000864 $d
     /tmp/ccK8IvWa.s:31560  .text.xeq:000000000000088c $t
     /tmp/ccK8IvWa.s:32459  .text.xeq:0000000000000b6c $d
     /tmp/ccK8IvWa.s:32478  .text.xeq:0000000000000b88 $t
     /tmp/ccK8IvWa.s:32923  .text.xeq:0000000000000d28 $d
     /tmp/ccK8IvWa.s:32935  .text.xeq_single:0000000000000000 $t
     /tmp/ccK8IvWa.s:32942  .text.xeq_single:0000000000000000 xeq_single
     /tmp/ccK8IvWa.s:32980  .text.xeq_single:000000000000001c $d
     /tmp/ccK8IvWa.s:32985  .text.xeq_xrom2:0000000000000000 $t
     /tmp/ccK8IvWa.s:32992  .text.xeq_xrom2:0000000000000000 xeq_xrom2
     /tmp/ccK8IvWa.s:33139  .text.xeq_xrom2:0000000000000070 $d
     /tmp/ccK8IvWa.s:33153  .text.xeq_xrom:0000000000000000 $t
     /tmp/ccK8IvWa.s:33161  .text.xeq_xrom:0000000000000000 xeq_xrom
     /tmp/ccK8IvWa.s:33184  .text.xeq_xrom:0000000000000010 $d
     /tmp/ccK8IvWa.s:33189  .text.dispatch_xrom:0000000000000000 $t
     /tmp/ccK8IvWa.s:33336  .text.dispatch_xrom:000000000000005c $d
     /tmp/ccK8IvWa.s:33346  .text.op_rs:0000000000000000 $t
     /tmp/ccK8IvWa.s:33354  .text.op_rs:0000000000000000 op_rs
     /tmp/ccK8IvWa.s:33505  .text.op_rs:0000000000000074 $d
     /tmp/ccK8IvWa.s:33514  .text.xeqprog:0000000000000000 $t
     /tmp/ccK8IvWa.s:33522  .text.xeqprog:0000000000000000 xeqprog
     /tmp/ccK8IvWa.s:33666  .text.xeqprog:0000000000000078 $d
                            *COM*:0000000000000004 JustStopped
     /tmp/ccK8IvWa.s:33675  .text.xeq_sst_bst:0000000000000000 $t
     /tmp/ccK8IvWa.s:33683  .text.xeq_sst_bst:0000000000000000 xeq_sst_bst
     /tmp/ccK8IvWa.s:33894  .text.xeq_sst_bst:0000000000000098 $d
     /tmp/ccK8IvWa.s:33904  .text.init_34s:0000000000000000 $t
     /tmp/ccK8IvWa.s:33912  .text.init_34s:0000000000000000 init_34s
     /tmp/ccK8IvWa.s:33964  .text.init_34s:0000000000000028 $d
     /tmp/ccK8IvWa.s:33969  .rodata.paste_raw_x.str1.4:0000000000000000 $d
     /tmp/ccK8IvWa.s:33973  .text.paste_raw_x:0000000000000000 $t
     /tmp/ccK8IvWa.s:33981  .text.paste_raw_x:0000000000000000 paste_raw_x
     /tmp/ccK8IvWa.s:34319  .text.paste_raw_x:00000000000000e8 $d
     /tmp/ccK8IvWa.s:34332  .rodata.fill_buffer_from_raw_x.str1.4:0000000000000000 $d
     /tmp/ccK8IvWa.s:34336  .text.fill_buffer_from_raw_x:0000000000000000 $t
     /tmp/ccK8IvWa.s:34344  .text.fill_buffer_from_raw_x:0000000000000000 fill_buffer_from_raw_x
     /tmp/ccK8IvWa.s:34568  .text.fill_buffer_from_raw_x:00000000000000b4 $d
                            *COM*:0000000000000004 RectPolConv
     /tmp/ccK8IvWa.s:34653  .rodata.xrom_targets:0000000000000000 xrom_targets
     /tmp/ccK8IvWa.s:34593  .rodata:0000000000000000 $d
ARM GAS  /tmp/ccK8IvWa.s 			page 885


     /tmp/ccK8IvWa.s:34601  .bss.result.11337:0000000000000000 $d
     /tmp/ccK8IvWa.s:34605  .bss.result.11337:0000000000000000 result.11337
     /tmp/ccK8IvWa.s:34608  .rodata.RegionTab:0000000000000000 $d
     /tmp/ccK8IvWa.s:34612  .rodata.RegionTab:0000000000000000 RegionTab
     /tmp/ccK8IvWa.s:34618  .rodata.StackRegMask:0000000000000000 $d
     /tmp/ccK8IvWa.s:34622  .rodata.StackRegMask:0000000000000000 StackRegMask
     /tmp/ccK8IvWa.s:34626  .rodata.convergence_tolerances:0000000000000000 $d
     /tmp/ccK8IvWa.s:34630  .rodata.convergence_tolerances:0000000000000000 convergence_tolerances
     /tmp/ccK8IvWa.s:34635  .rodata.modes.11077:0000000000000000 $d
     /tmp/ccK8IvWa.s:34639  .rodata.modes.11077:0000000000000000 modes.11077
     /tmp/ccK8IvWa.s:34642  .rodata.modes.11547:0000000000000000 $d
     /tmp/ccK8IvWa.s:34646  .rodata.modes.11547:0000000000000000 modes.11547
     /tmp/ccK8IvWa.s:34649  .rodata.xrom_targets:0000000000000000 $d
     /tmp/ccK8IvWa.s:17569  .text.do_tst:0000000000000067 $d
     /tmp/ccK8IvWa.s:17569  .text.do_tst:0000000000000068 $t
     /tmp/ccK8IvWa.s:19219  .text.cmdflag:0000000000000033 $d
     /tmp/ccK8IvWa.s:19219  .text.cmdflag:0000000000000034 $t

UNDEFINED SYMBOLS
StateWhileOn
PersistentRam
xrom_size
XromParams
XromLocal
decNumberRoundDigits
decNumberTrunc
dn_eq
set_carry
dn_to_ull
dn_abs
check_overflow
set_overflow
build_value
dn_lt
const_2pow64
xcopy
argcmds
display
shutdown
scopy
num_arg_0
prt
scopy_char
DispMsg
dot
error_message
JustDisplayed
ShowRPN
decContextDefault
decimal64FromNumber
decimal128FromNumber
decimal64ToNumber
decimal128ToNumber
int_base
reset_shift
BackupFlash
cnsts
ARM GAS  /tmp/ccK8IvWa.s 			page 886


cnsts_d128
cnsts_d64
dn_max
dn_add
dn_subtract
dn_multiply
dn_divide
dn_min
cmplxDivide
cmplxAdd
cmplxSubtract
cmplxMultiply
decNumberNormalize
decNumberRoundDecimals
intMax
intAdd
intSubtract
intMultiply
intDivide
intMin
extract_value
dn_dec
dn_eq0
dn_inc
row_column_to_keycode
ullint_to_dn
dn_minus
find_char
decNumberFromString
xset
word_size
int_mode
dn_mulpow10
UserFlash
put_key
const_9on5
const_32
decNumberPow10
const_0_05
dn_log10
const_20
decNumberCopy
cnsts_conv
keycode_to_row_column
dn_compare
decNumberRnd
dn_mul100
dn_le0
dn_lt0
dn_1
finish_display
mask_value
int_to_dn
decNumber2Fraction
GoFast
alpha_view_common
is_int
ARM GAS  /tmp/ccK8IvWa.s 			page 887


is_even
isPrime
dn_to_int
message
monfuncs
xrom
dyfuncs
SizeStatRegs
frozen_display
DispPlot
alpha_rcl_s
XromA2D
relative_error
cmplxR
absolute_error
const_1e_14
const_1e_32
const_1e_24
const_NaN
sprintf
niladics
multicmds
trifuncs
intChs
const_1
const_0
sigma_minus
sigma_val
set_NaN
sigma_plus
is_key_pressed
clr_dot
set_dot
OpCode
checksum_ram
init_state
reset
strdup
strtok
strtoull
strchr
free
__aeabi_uldivmod
decNumberToString

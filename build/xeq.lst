ARM GAS  /tmp/cc0UaEmF.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"xeq.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.find_section_bounds,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	find_section_bounds:
  27              	.LVL0:
  28              	.LFB19:
  29              		.file 1 "src/xeq.c"
   1:src/xeq.c     **** /* This file is part of 34S.
   2:src/xeq.c     ****  * 
   3:src/xeq.c     ****  * 34S is free software: you can redistribute it and/or modify
   4:src/xeq.c     ****  * it under the terms of the GNU General Public License as published by
   5:src/xeq.c     ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/xeq.c     ****  * (at your option) any later version.
   7:src/xeq.c     ****  * 
   8:src/xeq.c     ****  * 34S is distributed in the hope that it will be useful,
   9:src/xeq.c     ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/xeq.c     ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/xeq.c     ****  * GNU General Public License for more details.
  12:src/xeq.c     ****  * 
  13:src/xeq.c     ****  * You should have received a copy of the GNU General Public License
  14:src/xeq.c     ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/xeq.c     ****  */
  16:src/xeq.c     **** 
  17:src/xeq.c     **** #ifndef REALBUILD
  18:src/xeq.c     **** 
  19:src/xeq.c     **** #if defined(WIN32) && !defined(QTGUI) && !defined(IOS) && !defined(__GNUC__) && !defined(DM42)
  20:src/xeq.c     **** 
  21:src/xeq.c     **** #include <stdlib.h>  // sleep
  22:src/xeq.c     **** #include "win32.h"
  23:src/xeq.c     **** #define sleep _sleep
  24:src/xeq.c     **** #define strtoull _strtoui64
  25:src/xeq.c     **** 
  26:src/xeq.c     **** #else
  27:src/xeq.c     **** 
  28:src/xeq.c     **** #ifdef DM42
  29:src/xeq.c     **** #include "dmcp.h"
ARM GAS  /tmp/cc0UaEmF.s 			page 2


  30:src/xeq.c     **** #else
  31:src/xeq.c     **** #include <unistd.h>
  32:src/xeq.c     **** #include <sys/time.h>
  33:src/xeq.c     **** extern unsigned long long strtoull(const char *, char **, int);
  34:src/xeq.c     **** #endif
  35:src/xeq.c     **** 
  36:src/xeq.c     **** #endif
  37:src/xeq.c     **** 
  38:src/xeq.c     **** #include <stdio.h>   // (s)printf
  39:src/xeq.c     **** #include <string.h>
  40:src/xeq.c     **** #include <stdlib.h>
  41:src/xeq.c     **** 
  42:src/xeq.c     **** #endif // not REALBUILD
  43:src/xeq.c     **** 
  44:src/xeq.c     **** #ifdef IOS
  45:src/xeq.c     **** #include <stdarg.h>
  46:src/xeq.c     **** #endif
  47:src/xeq.c     **** 
  48:src/xeq.c     **** #if __GNUC__ >= 4 && __GNUC_MINOR__ >= 6
  49:src/xeq.c     **** #define GNUC_POP_ERROR
  50:src/xeq.c     **** #pragma GCC diagnostic push
  51:src/xeq.c     **** #pragma GCC diagnostic ignored "-Warray-bounds"
  52:src/xeq.c     **** #endif
  53:src/xeq.c     **** 
  54:src/xeq.c     **** #define XEQ_INTERNAL 1
  55:src/xeq.c     **** #define DM42SAFE
  56:src/xeq.c     **** #include "xeq.h"
  57:src/xeq.c     **** #include "storage.h"
  58:src/xeq.c     **** #include "decn.h"
  59:src/xeq.c     **** #include "complex.h"
  60:src/xeq.c     **** #include "stats.h"
  61:src/xeq.c     **** #include "display.h"
  62:src/xeq.c     **** #include "consts.h"
  63:src/xeq.c     **** #include "int.h"
  64:src/xeq.c     **** #include "date.h"
  65:src/xeq.c     **** #include "lcd.h"
  66:src/xeq.c     **** #include "xrom.h"
  67:src/xeq.c     **** #include "alpha.h"
  68:src/xeq.c     **** #ifdef INCLUDE_STOPWATCH
  69:src/xeq.c     **** #include "stopwatch.h"
  70:src/xeq.c     **** #endif
  71:src/xeq.c     **** #ifndef DM42
  72:src/xeq.c     **** #include "printer.h"
  73:src/xeq.c     **** #endif
  74:src/xeq.c     **** #undef DM42SAFE
  75:src/xeq.c     **** 
  76:src/xeq.c     **** #include "pretty.h"
  77:src/xeq.c     **** 
  78:src/xeq.c     **** 
  79:src/xeq.c     **** #include "xrom_targets.c"	// Generated by PP
  80:src/xeq.c     **** 
  81:src/xeq.c     **** /* Define the number of program Ticks that must elapse between flashing the
  82:src/xeq.c     ****  * RCL annunciator.
  83:src/xeq.c     ****  */
  84:src/xeq.c     **** #define TICKS_PER_FLASH	(5)
  85:src/xeq.c     **** 
  86:src/xeq.c     **** /*
ARM GAS  /tmp/cc0UaEmF.s 			page 3


  87:src/xeq.c     ****  *  A program is running
  88:src/xeq.c     ****  */
  89:src/xeq.c     **** FLAG Running;
  90:src/xeq.c     **** FLAG XromRunning;
  91:src/xeq.c     **** 
  92:src/xeq.c     **** #ifndef CONSOLE
  93:src/xeq.c     **** /*
  94:src/xeq.c     ****  *  A program has just stopped
  95:src/xeq.c     ****  */
  96:src/xeq.c     **** FLAG JustStopped;
  97:src/xeq.c     **** #endif
  98:src/xeq.c     **** 
  99:src/xeq.c     **** /*
 100:src/xeq.c     ****  *  Count down counter for a programmed pause
 101:src/xeq.c     ****  */
 102:src/xeq.c     **** volatile unsigned char Pause;
 103:src/xeq.c     **** 
 104:src/xeq.c     **** /*
 105:src/xeq.c     ****  *  Some long running function has called busy();
 106:src/xeq.c     ****  */
 107:src/xeq.c     **** FLAG Busy;
 108:src/xeq.c     **** 
 109:src/xeq.c     **** /*
 110:src/xeq.c     ****  *  Error code
 111:src/xeq.c     ****  */
 112:src/xeq.c     **** SMALL_INT Error;
 113:src/xeq.c     **** 
 114:src/xeq.c     **** /*
 115:src/xeq.c     ****  *  Indication of PC wrap around
 116:src/xeq.c     ****  */
 117:src/xeq.c     **** FLAG PcWrapped;
 118:src/xeq.c     **** 
 119:src/xeq.c     **** /*
 120:src/xeq.c     ****  *  Currently executed function
 121:src/xeq.c     ****  */
 122:src/xeq.c     **** s_opcode XeqOpCode;
 123:src/xeq.c     **** 
 124:src/xeq.c     **** /*
 125:src/xeq.c     ****  *  Temporary display (not X)
 126:src/xeq.c     ****  */
 127:src/xeq.c     **** SMALL_INT ShowRegister;
 128:src/xeq.c     **** 
 129:src/xeq.c     **** /*
 130:src/xeq.c     ****  *  User code being called from XROM
 131:src/xeq.c     ****  */
 132:src/xeq.c     **** SMALL_INT XromUserPc;
 133:src/xeq.c     **** SMALL_INT UserLocalRegs;
 134:src/xeq.c     **** 
 135:src/xeq.c     **** /* We need various different math contexts.
 136:src/xeq.c     ****  * More efficient to define these globally and reuse them as needed.
 137:src/xeq.c     ****  */
 138:src/xeq.c     **** decContext Ctx;
 139:src/xeq.c     **** 
 140:src/xeq.c     **** /*
 141:src/xeq.c     ****  * A buffer for instruction display
 142:src/xeq.c     ****  */
 143:src/xeq.c     **** char TraceBuffer[25];
ARM GAS  /tmp/cc0UaEmF.s 			page 4


 144:src/xeq.c     **** 
 145:src/xeq.c     **** /*
 146:src/xeq.c     ****  *  Total Size of the return stack
 147:src/xeq.c     ****  */
 148:src/xeq.c     **** SMALL_INT RetStkSize;
 149:src/xeq.c     **** 
 150:src/xeq.c     **** /*
 151:src/xeq.c     ****  *  Number of remaining program steps
 152:src/xeq.c     ****  */
 153:src/xeq.c     **** SMALL_INT ProgFree;
 154:src/xeq.c     **** 
 155:src/xeq.c     **** /*
 156:src/xeq.c     ****  * The actual top of the return stack
 157:src/xeq.c     ****  */
 158:src/xeq.c     **** unsigned short *RetStk;
 159:src/xeq.c     **** 
 160:src/xeq.c     **** /*
 161:src/xeq.c     ****  *  The location of the RPN stack
 162:src/xeq.c     ****  */
 163:src/xeq.c     **** REGISTER *StackBase;
 164:src/xeq.c     **** 
 165:src/xeq.c     **** #ifdef INFRARED
 166:src/xeq.c     **** /*
 167:src/xeq.c     ****  *  Is tracing active?
 168:src/xeq.c     ****  */
 169:src/xeq.c     **** FLAG Tracing;
 170:src/xeq.c     **** #endif
 171:src/xeq.c     **** 
 172:src/xeq.c     **** /*
 173:src/xeq.c     **** *	Indicates that a coordinate converstion has just happened
 174:src/xeq.c     **** */
 175:src/xeq.c     **** #ifdef RP_PREFIX
 176:src/xeq.c     **** SMALL_INT RectPolConv; // 1 - R->P just done; 2 - P->R just done
 177:src/xeq.c     **** #endif
 178:src/xeq.c     **** 
 179:src/xeq.c     **** /*
 180:src/xeq.c     ****  *  Check if the current PC is in XROM
 181:src/xeq.c     ****  */
 182:src/xeq.c     **** int is_xrom(void) {
 183:src/xeq.c     **** 	return isXROM(state_pc());
 184:src/xeq.c     **** }
 185:src/xeq.c     **** 
 186:src/xeq.c     **** /*
 187:src/xeq.c     ****  *  Shift the return stack.
 188:src/xeq.c     ****  *  The distance is in levels.
 189:src/xeq.c     ****  *  If argument is negative, return stack will shrink.
 190:src/xeq.c     ****  *  Returns 1 if unsuccessful (error is set)
 191:src/xeq.c     ****  */
 192:src/xeq.c     **** int move_retstk(int distance)
 193:src/xeq.c     **** {
 194:src/xeq.c     **** #ifndef REALBUILD
 195:src/xeq.c     **** 	// Sanity check
 196:src/xeq.c     **** 	if (XromFlags.xIN) {
 197:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 198:src/xeq.c     **** 		return 1;
 199:src/xeq.c     **** 	}
 200:src/xeq.c     **** #endif
ARM GAS  /tmp/cc0UaEmF.s 			page 5


 201:src/xeq.c     **** 	if (RetStkSize + RetStkPtr + distance < 0) {
 202:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 203:src/xeq.c     **** 		return 1;
 204:src/xeq.c     **** 	}
 205:src/xeq.c     **** 	xcopy(RetStk + RetStkPtr + distance, RetStk + RetStkPtr, (-RetStkPtr) << 1);
 206:src/xeq.c     **** 	RetStk += distance;
 207:src/xeq.c     **** 	RetStkSize += distance;
 208:src/xeq.c     **** 	return 0;
 209:src/xeq.c     **** }
 210:src/xeq.c     **** 
 211:src/xeq.c     **** /*
 212:src/xeq.c     ****  *  How many stack levels with local data have we?
 213:src/xeq.c     ****  */
 214:src/xeq.c     **** int local_levels(void) {
 215:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 216:src/xeq.c     **** }
 217:src/xeq.c     **** 
 218:src/xeq.c     **** /*
 219:src/xeq.c     ****  *  How many local registers have we?
 220:src/xeq.c     ****  *  The result depends on the RARG operation to allow for "alien" RCL commands
 221:src/xeq.c     ****  */
 222:src/xeq.c     **** int local_regs_rarg(enum rarg op) {
 223:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 224:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 225:src/xeq.c     **** }
 226:src/xeq.c     **** 
 227:src/xeq.c     **** /*
 228:src/xeq.c     ****  *  How many local registers have we?
 229:src/xeq.c     ****  */
 230:src/xeq.c     **** int local_regs(void) {
 231:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 232:src/xeq.c     **** }
 233:src/xeq.c     **** 
 234:src/xeq.c     **** /*
 235:src/xeq.c     ****  *  How many global registers have we?
 236:src/xeq.c     ****  *  The result depends on the RARG operation to allow for "alien" RCL commands
 237:src/xeq.c     ****  */
 238:src/xeq.c     **** unsigned int global_regs_rarg(enum rarg op) {
 239:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 240:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 241:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 242:src/xeq.c     **** 	}
 243:src/xeq.c     **** 	else
 244:src/xeq.c     **** 		return NumRegs;
 245:src/xeq.c     **** }
 246:src/xeq.c     **** 
 247:src/xeq.c     **** /*
 248:src/xeq.c     ****  *  How many global registers have we?
 249:src/xeq.c     ****  */
 250:src/xeq.c     **** unsigned int global_regs(void) {
 251:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 252:src/xeq.c     **** }
 253:src/xeq.c     **** 
 254:src/xeq.c     **** 
 255:src/xeq.c     **** #if defined(CONSOLE)
 256:src/xeq.c     **** // Console screen only
 257:src/xeq.c     **** unsigned int get_local_flags(void) {
ARM GAS  /tmp/cc0UaEmF.s 			page 6


 258:src/xeq.c     **** 	if (LocalRegs == 0)
 259:src/xeq.c     **** 		return 0;
 260:src/xeq.c     **** 	return RetStk[LocalRegs + 1];
 261:src/xeq.c     **** }
 262:src/xeq.c     **** #endif
 263:src/xeq.c     **** 
 264:src/xeq.c     **** void version(enum nilop op) {
 265:src/xeq.c     **** 	State2.version = 1;
 266:src/xeq.c     **** 	if (!State2.runmode)
 267:src/xeq.c     **** 		display();
 268:src/xeq.c     **** }
 269:src/xeq.c     **** 
 270:src/xeq.c     **** void cmd_off(enum nilop op) {
 271:src/xeq.c     **** 	shutdown();
 272:src/xeq.c     **** }
 273:src/xeq.c     **** 
 274:src/xeq.c     **** #ifndef state_pc
 275:src/xeq.c     **** unsigned int state_pc(void) {
 276:src/xeq.c     **** 	return State.pc;	
 277:src/xeq.c     **** }
 278:src/xeq.c     **** #endif
 279:src/xeq.c     **** static void raw_set_pc(unsigned int pc) {
 280:src/xeq.c     **** 	State.pc = pc;
 281:src/xeq.c     **** 	update_program_bounds(0);
 282:src/xeq.c     **** }
 283:src/xeq.c     **** 
 284:src/xeq.c     **** /*
 285:src/xeq.c     ****  *  Where do the program regions start?
 286:src/xeq.c     ****  */
 287:src/xeq.c     **** #ifdef DM42
 288:src/xeq.c     **** static s_opcode * RegionTab[] = {
 289:src/xeq.c     **** 	NULL,
 290:src/xeq.c     **** 	NULL,
 291:src/xeq.c     **** 	NULL,
 292:src/xeq.c     **** 	xrom
 293:src/xeq.c     **** };
 294:src/xeq.c     **** void init_RegionTab (void) {
 295:src/xeq.c     ****   RegionTab[0] = (s_opcode*) Prog;
 296:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 297:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 298:src/xeq.c     **** }
 299:src/xeq.c     **** #else
 300:src/xeq.c     **** static const s_opcode *const RegionTab[] = {
 301:src/xeq.c     **** 	Prog,
 302:src/xeq.c     **** 	UserFlash.prog,
 303:src/xeq.c     **** 	BackupFlash._prog,
 304:src/xeq.c     **** 	xrom
 305:src/xeq.c     **** };
 306:src/xeq.c     **** #endif
 307:src/xeq.c     **** /*
 308:src/xeq.c     ****  *  Size of a program segment
 309:src/xeq.c     ****  */
 310:src/xeq.c     **** int sizeLIB(int region) {
 311:src/xeq.c     **** 	if (region == REGION_XROM)
 312:src/xeq.c     **** 		return xrom_size;
 313:src/xeq.c     **** 	else
 314:src/xeq.c     **** 		return (int)RegionTab[region][-1];
ARM GAS  /tmp/cc0UaEmF.s 			page 7


 315:src/xeq.c     **** }
 316:src/xeq.c     **** 
 317:src/xeq.c     **** 
 318:src/xeq.c     **** /*
 319:src/xeq.c     ****  *  Get an opcode, check for double length codes
 320:src/xeq.c     ****  */
 321:src/xeq.c     **** static opcode get_opcode( const s_opcode *loc )
 322:src/xeq.c     **** {
 323:src/xeq.c     **** 	opcode r = *loc;
 324:src/xeq.c     **** 	if ( isDBL(r) ) {
 325:src/xeq.c     **** 		r |= loc[1] << 16;
 326:src/xeq.c     **** 	}
 327:src/xeq.c     **** 	return r;
 328:src/xeq.c     **** }
 329:src/xeq.c     **** 
 330:src/xeq.c     **** 
 331:src/xeq.c     **** /* 
 332:src/xeq.c     ****  * Return the program memory location specified.
 333:src/xeq.c     ****  */
 334:src/xeq.c     **** opcode getprog(unsigned int pc) {
 335:src/xeq.c     **** 
 336:src/xeq.c     **** 	const int region = nLIB(pc);
 337:src/xeq.c     **** 	int offset = offsetLIB(pc);
 338:src/xeq.c     **** 
 339:src/xeq.c     **** 	if (offset < 0 || offset >= sizeLIB(region))
 340:src/xeq.c     **** 		return OP_NIL | OP_END;
 341:src/xeq.c     **** 	return get_opcode(RegionTab[region] + offset);
 342:src/xeq.c     **** }
 343:src/xeq.c     **** 
 344:src/xeq.c     **** 
 345:src/xeq.c     **** /* 
 346:src/xeq.c     ****  * Return the physical start-address of the current program
 347:src/xeq.c     ****  */
 348:src/xeq.c     **** const s_opcode *get_current_prog(void) {
 349:src/xeq.c     **** 
 350:src/xeq.c     **** 	const int region = nLIB(ProgBegin);
 351:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 352:src/xeq.c     **** }
 353:src/xeq.c     **** 
 354:src/xeq.c     **** 
 355:src/xeq.c     **** /*
 356:src/xeq.c     ****  *  Set PC with sanity check
 357:src/xeq.c     ****  */
 358:src/xeq.c     **** void set_pc(unsigned int pc) {
 359:src/xeq.c     **** 	if (isRAM(pc)) {
 360:src/xeq.c     **** 		if (pc > ProgSize)
 361:src/xeq.c     **** 			pc = ProgSize;
 362:src/xeq.c     **** 		if (pc > 1 && isDBL(Prog_1[pc - 1]))
 363:src/xeq.c     **** 			pc--;
 364:src/xeq.c     **** 	} else if (!isXROM(pc)) {
 365:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 366:src/xeq.c     **** 		if (pc > n - 1)
 367:src/xeq.c     **** 			pc = n - 1;
 368:src/xeq.c     **** 		if (pc > startLIB(pc) && isDBL(getprog(pc - 1)))
 369:src/xeq.c     **** 			--pc;
 370:src/xeq.c     **** 	}
 371:src/xeq.c     **** 	raw_set_pc(pc);
ARM GAS  /tmp/cc0UaEmF.s 			page 8


 372:src/xeq.c     **** }
 373:src/xeq.c     **** 
 374:src/xeq.c     **** 
 375:src/xeq.c     **** 
 376:src/xeq.c     **** /* Locate the beginning and end of a section from a PC that points anywhere within
 377:src/xeq.c     ****  */
 378:src/xeq.c     **** static unsigned short int find_section_bounds(const unsigned int pc, const int endp, unsigned short
  30              		.loc 1 378 119 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 379:src/xeq.c     **** 	unsigned short int top, bottom;
  35              		.loc 1 379 2 view .LVU1
 380:src/xeq.c     **** 
 381:src/xeq.c     **** 	if (endp && State2.runmode) { 
  36              		.loc 1 381 2 view .LVU2
  37              		.loc 1 381 5 is_stmt 0 view .LVU3
  38 0000 71B1     		cbz	r1, .L2
  39              		.loc 1 381 11 discriminator 1 view .LVU4
  40 0002 194B     		ldr	r3, .L14
  41 0004 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
  42 0006 5B06     		lsls	r3, r3, #25
  43 0008 0AD5     		bpl	.L2
 382:src/xeq.c     **** 		// Use the current program as bounds
 383:src/xeq.c     **** 		top = ProgBegin;
  44              		.loc 1 383 3 is_stmt 1 view .LVU5
  45              		.loc 1 383 9 is_stmt 0 view .LVU6
  46 000a 184B     		ldr	r3, .L14+4
  47 000c 1968     		ldr	r1, [r3]
  48              	.LVL1:
 384:src/xeq.c     **** 		bottom = ProgEnd;
  49              		.loc 1 384 3 is_stmt 1 view .LVU7
  50 000e B1F8EC37 		ldrh	r3, [r1, #2028]
  51              		.loc 1 384 10 is_stmt 0 view .LVU8
  52 0012 B1F8EE07 		ldrh	r0, [r1, #2030]
  53              	.LVL2:
 385:src/xeq.c     **** 		if (top == 0)
  54              		.loc 1 385 3 is_stmt 1 view .LVU9
  55 0016 012B     		cmp	r3, #1
  56 0018 38BF     		it	cc
  57 001a 0123     		movcc	r3, #1
  58              	.LVL3:
 386:src/xeq.c     **** 			top = 1;
 387:src/xeq.c     **** 	}
 388:src/xeq.c     **** 	else if (isXROM(pc)) {
 389:src/xeq.c     **** 		top = addrXROM(1);
 390:src/xeq.c     **** 		bottom = addrXROM(xrom_size);
 391:src/xeq.c     **** 	} 
 392:src/xeq.c     **** 	else if (isLIB(pc)) {
 393:src/xeq.c     **** 		top = startLIB(pc);
 394:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
 395:src/xeq.c     **** 	}
 396:src/xeq.c     **** 	else {
 397:src/xeq.c     **** 		top = State2.runmode;  // step 001 if not entering a program
 398:src/xeq.c     **** 		bottom = ProgSize;
 399:src/xeq.c     **** 	}
ARM GAS  /tmp/cc0UaEmF.s 			page 9


 400:src/xeq.c     **** 	*p_top = top;
  59              		.loc 1 400 2 view .LVU10
  60              		.loc 1 400 9 is_stmt 0 view .LVU11
  61 001c 1380     		strh	r3, [r2]	@ movhi
 401:src/xeq.c     **** 	return bottom;
  62              		.loc 1 401 2 is_stmt 1 view .LVU12
 402:src/xeq.c     **** }
  63              		.loc 1 402 1 is_stmt 0 view .LVU13
  64 001e 7047     		bx	lr
  65              	.LVL4:
  66              	.L2:
 388:src/xeq.c     **** 		top = addrXROM(1);
  67              		.loc 1 388 7 is_stmt 1 view .LVU14
 388:src/xeq.c     **** 		top = addrXROM(1);
  68              		.loc 1 388 11 is_stmt 0 view .LVU15
  69 0020 830B     		lsrs	r3, r0, #14
 388:src/xeq.c     **** 		top = addrXROM(1);
  70              		.loc 1 388 10 view .LVU16
  71 0022 032B     		cmp	r3, #3
  72 0024 0FD0     		beq	.L13
 392:src/xeq.c     **** 		top = startLIB(pc);
  73              		.loc 1 392 7 is_stmt 1 view .LVU17
 392:src/xeq.c     **** 		top = startLIB(pc);
  74              		.loc 1 392 10 is_stmt 0 view .LVU18
  75 0026 10F4404F 		tst	r0, #49152
  76 002a 14D0     		beq	.L5
 393:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
  77              		.loc 1 393 3 is_stmt 1 view .LVU19
  78              	.LBB1304:
  79              	.LBB1305:
 314:src/xeq.c     **** }
  80              		.loc 1 314 24 is_stmt 0 view .LVU20
  81 002c 1049     		ldr	r1, .L14+8
  82              	.LVL5:
 314:src/xeq.c     **** }
  83              		.loc 1 314 32 view .LVU21
  84 002e 51F82330 		ldr	r3, [r1, r3, lsl #2]
  85              	.LBE1305:
  86              	.LBE1304:
 394:src/xeq.c     **** 	}
  87              		.loc 1 394 10 view .LVU22
  88 0032 33F8021C 		ldrh	r1, [r3, #-2]
 393:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
  89              		.loc 1 393 9 view .LVU23
  90 0036 00F44043 		and	r3, r0, #49152
 394:src/xeq.c     **** 	}
  91              		.loc 1 394 10 view .LVU24
  92 003a 5818     		adds	r0, r3, r1
  93              	.LVL6:
 393:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
  94              		.loc 1 393 7 view .LVU25
  95 003c 0133     		adds	r3, r3, #1
  96 003e 9BB2     		uxth	r3, r3
  97              	.LVL7:
 394:src/xeq.c     **** 	}
  98              		.loc 1 394 3 is_stmt 1 view .LVU26
  99              	.LBB1307:
ARM GAS  /tmp/cc0UaEmF.s 			page 10


 100              	.LBI1304:
 310:src/xeq.c     **** 	if (region == REGION_XROM)
 101              		.loc 1 310 5 view .LVU27
 102              	.LBB1306:
 311:src/xeq.c     **** 		return xrom_size;
 103              		.loc 1 311 2 view .LVU28
 314:src/xeq.c     **** }
 104              		.loc 1 314 3 view .LVU29
 314:src/xeq.c     **** }
 105              		.loc 1 314 3 is_stmt 0 view .LVU30
 106              	.LBE1306:
 107              	.LBE1307:
 394:src/xeq.c     **** 	}
 108              		.loc 1 394 10 view .LVU31
 109 0040 80B2     		uxth	r0, r0
 110              	.LVL8:
 400:src/xeq.c     **** 	return bottom;
 111              		.loc 1 400 2 is_stmt 1 view .LVU32
 400:src/xeq.c     **** 	return bottom;
 112              		.loc 1 400 9 is_stmt 0 view .LVU33
 113 0042 1380     		strh	r3, [r2]	@ movhi
 401:src/xeq.c     **** }
 114              		.loc 1 401 2 is_stmt 1 view .LVU34
 115              		.loc 1 402 1 is_stmt 0 view .LVU35
 116 0044 7047     		bx	lr
 117              	.LVL9:
 118              	.L13:
 389:src/xeq.c     **** 		bottom = addrXROM(xrom_size);
 119              		.loc 1 389 3 is_stmt 1 view .LVU36
 390:src/xeq.c     **** 	} 
 120              		.loc 1 390 3 view .LVU37
 390:src/xeq.c     **** 	} 
 121              		.loc 1 390 10 is_stmt 0 view .LVU38
 122 0046 0B4B     		ldr	r3, .L14+12
 123 0048 1888     		ldrh	r0, [r3]
 124              	.LVL10:
 389:src/xeq.c     **** 		bottom = addrXROM(xrom_size);
 125              		.loc 1 389 7 view .LVU39
 126 004a 4CF20103 		movw	r3, #49153
 390:src/xeq.c     **** 	} 
 127              		.loc 1 390 10 view .LVU40
 128 004e 40F44040 		orr	r0, r0, #49152
 129              	.LVL11:
 400:src/xeq.c     **** 	return bottom;
 130              		.loc 1 400 2 is_stmt 1 view .LVU41
 400:src/xeq.c     **** 	return bottom;
 131              		.loc 1 400 9 is_stmt 0 view .LVU42
 132 0052 1380     		strh	r3, [r2]	@ movhi
 401:src/xeq.c     **** }
 133              		.loc 1 401 2 is_stmt 1 view .LVU43
 134              		.loc 1 402 1 is_stmt 0 view .LVU44
 135 0054 7047     		bx	lr
 136              	.LVL12:
 137              	.L5:
 397:src/xeq.c     **** 		bottom = ProgSize;
 138              		.loc 1 397 3 is_stmt 1 view .LVU45
 397:src/xeq.c     **** 		bottom = ProgSize;
ARM GAS  /tmp/cc0UaEmF.s 			page 11


 139              		.loc 1 397 15 is_stmt 0 view .LVU46
 140 0056 044B     		ldr	r3, .L14
 398:src/xeq.c     **** 	}
 141              		.loc 1 398 10 view .LVU47
 142 0058 0449     		ldr	r1, .L14+4
 143              	.LVL13:
 397:src/xeq.c     **** 		bottom = ProgSize;
 144              		.loc 1 397 15 view .LVU48
 145 005a 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 398:src/xeq.c     **** 	}
 146              		.loc 1 398 10 view .LVU49
 147 005c 0968     		ldr	r1, [r1]
 397:src/xeq.c     **** 		bottom = ProgSize;
 148              		.loc 1 397 7 view .LVU50
 149 005e C3F38013 		ubfx	r3, r3, #6, #1
 150              	.LVL14:
 398:src/xeq.c     **** 	}
 151              		.loc 1 398 3 is_stmt 1 view .LVU51
 398:src/xeq.c     **** 	}
 152              		.loc 1 398 10 is_stmt 0 view .LVU52
 153 0062 4888     		ldrh	r0, [r1, #2]
 154              	.LVL15:
 400:src/xeq.c     **** 	return bottom;
 155              		.loc 1 400 2 is_stmt 1 view .LVU53
 400:src/xeq.c     **** 	return bottom;
 156              		.loc 1 400 9 is_stmt 0 view .LVU54
 157 0064 1380     		strh	r3, [r2]	@ movhi
 401:src/xeq.c     **** }
 158              		.loc 1 401 2 is_stmt 1 view .LVU55
 159              		.loc 1 402 1 is_stmt 0 view .LVU56
 160 0066 7047     		bx	lr
 161              	.L15:
 162              		.align	2
 163              	.L14:
 164 0068 00000000 		.word	StateWhileOn
 165 006c 00000000 		.word	main_ram
 166 0070 00000000 		.word	.LANCHOR0
 167 0074 00000000 		.word	xrom_size
 168              		.cfi_endproc
 169              	.LFE19:
 171              		.section	.text.reg_address,"ax",%progbits
 172              		.align	1
 173              		.p2align 2,,3
 174              		.syntax unified
 175              		.thumb
 176              		.thumb_func
 177              		.fpu fpv4-sp-d16
 179              	reg_address:
 180              	.LVL16:
 181              	.LFB86:
 403:src/xeq.c     **** 
 404:src/xeq.c     **** 
 405:src/xeq.c     **** /* Increment the passed PC.  Account for wrap around but nothing else.
 406:src/xeq.c     ****  * Return the updated PC.
 407:src/xeq.c     ****  * Set PcWrapped on wrap around
 408:src/xeq.c     ****  */
 409:src/xeq.c     **** unsigned int do_inc(const unsigned int pc, int endp) {
ARM GAS  /tmp/cc0UaEmF.s 			page 12


 410:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 411:src/xeq.c     **** 	unsigned short int top = 0;
 412:src/xeq.c     **** 	unsigned short int bottom = 0;
 413:src/xeq.c     **** 
 414:src/xeq.c     **** 	PcWrapped = 0;
 415:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 416:src/xeq.c     **** 
 417:src/xeq.c     **** 	if (npc > bottom) {
 418:src/xeq.c     **** 		PcWrapped = 1;
 419:src/xeq.c     **** 		return top;
 420:src/xeq.c     **** 	}
 421:src/xeq.c     **** 	return npc;
 422:src/xeq.c     **** }
 423:src/xeq.c     **** 
 424:src/xeq.c     **** /* Decrement the passed PC.  Account for wrap around but nothing else.
 425:src/xeq.c     ****  * Return the updated PC.
 426:src/xeq.c     ****  * Set PcWrapped on wrap around
 427:src/xeq.c     ****  */
 428:src/xeq.c     **** unsigned int do_dec(unsigned int pc, int endp) {
 429:src/xeq.c     **** 	unsigned short int top = 0;
 430:src/xeq.c     **** 	unsigned short int bottom = 0;
 431:src/xeq.c     **** 
 432:src/xeq.c     **** 	PcWrapped = 0;
 433:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 434:src/xeq.c     **** 
 435:src/xeq.c     **** 	if (pc <= top) {
 436:src/xeq.c     **** 		PcWrapped = 1;
 437:src/xeq.c     **** 		pc = bottom;
 438:src/xeq.c     **** 	}
 439:src/xeq.c     **** 	else
 440:src/xeq.c     **** 		--pc;
 441:src/xeq.c     **** 	if (pc > top && isDBL(getprog(pc - 1)))
 442:src/xeq.c     **** 		--pc;
 443:src/xeq.c     **** 	return pc;
 444:src/xeq.c     **** }
 445:src/xeq.c     **** 
 446:src/xeq.c     **** /* Increment the PC keeping account of wrapping around and stopping
 447:src/xeq.c     ****  * programs on such.  Return non-zero if we wrapped.
 448:src/xeq.c     ****  */
 449:src/xeq.c     **** int incpc(void) {
 450:src/xeq.c     **** 	raw_set_pc(do_inc(state_pc(), 1));
 451:src/xeq.c     **** 	return PcWrapped;
 452:src/xeq.c     **** }
 453:src/xeq.c     **** 
 454:src/xeq.c     **** void decpc(void) {
 455:src/xeq.c     **** 	raw_set_pc(do_dec(state_pc(), 1));
 456:src/xeq.c     **** }
 457:src/xeq.c     **** 
 458:src/xeq.c     **** /*
 459:src/xeq.c     ****  * Update the pointers to the current program delimited by END statements
 460:src/xeq.c     ****  */
 461:src/xeq.c     **** void update_program_bounds(const int force) {
 462:src/xeq.c     **** 	unsigned int pc = state_pc();
 463:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 464:src/xeq.c     **** 		State.pc = pc = 1;
 465:src/xeq.c     **** 	if (! force && pc >= ProgBegin && pc <= ProgEnd)
 466:src/xeq.c     **** 		return;
ARM GAS  /tmp/cc0UaEmF.s 			page 13


 467:src/xeq.c     **** 	for (PcWrapped = 0; !PcWrapped; pc = do_inc(pc, 0)) {
 468:src/xeq.c     **** 		ProgEnd = pc;
 469:src/xeq.c     **** 		if (getprog(pc) == (OP_NIL | OP_END)) {
 470:src/xeq.c     **** 			break;
 471:src/xeq.c     **** 		}
 472:src/xeq.c     **** 	}
 473:src/xeq.c     **** 	for (pc = state_pc();;) {
 474:src/xeq.c     **** 		const unsigned int opc = pc;
 475:src/xeq.c     **** 		pc = do_dec(opc, 0);
 476:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 477:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 478:src/xeq.c     **** 			break;
 479:src/xeq.c     **** 		}
 480:src/xeq.c     **** 	}
 481:src/xeq.c     **** }
 482:src/xeq.c     **** 
 483:src/xeq.c     **** /* Determine where in program space the PC really is
 484:src/xeq.c     ****  */
 485:src/xeq.c     **** unsigned int user_pc(unsigned int pc) {
 486:src/xeq.c     **** 	unsigned int n = 1;
 487:src/xeq.c     **** 	unsigned int base;
 488:src/xeq.c     **** 
 489:src/xeq.c     **** #ifndef REALBUILD
 490:src/xeq.c     **** 	if (pc == 0 || isXROM(pc))
 491:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 492:src/xeq.c     **** #else
 493:src/xeq.c     **** 	if (pc == 0)
 494:src/xeq.c     **** 		return 0;
 495:src/xeq.c     **** #endif
 496:src/xeq.c     **** 	base = startLIB(pc);
 497:src/xeq.c     **** 	while (base < pc) {
 498:src/xeq.c     **** 		base = do_inc(base, 0);
 499:src/xeq.c     **** 		if (PcWrapped)
 500:src/xeq.c     **** 			return n;
 501:src/xeq.c     **** 		++n;
 502:src/xeq.c     **** 	}
 503:src/xeq.c     **** 	return n;
 504:src/xeq.c     **** }
 505:src/xeq.c     **** 
 506:src/xeq.c     **** /* Given a target user PC, figure out the real matching PC
 507:src/xeq.c     ****  */
 508:src/xeq.c     **** unsigned int find_user_pc(unsigned int target) {
 509:src/xeq.c     **** 	unsigned int upc = state_pc();
 510:src/xeq.c     **** 	const int libp = isLIB(upc);
 511:src/xeq.c     **** 	unsigned int base = libp ? startLIB(upc) : 0;
 512:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 513:src/xeq.c     **** #ifndef REALBUILD
 514:src/xeq.c     **** 	if (isXROM(upc))
 515:src/xeq.c     **** 		return addrXROM(target);
 516:src/xeq.c     **** #endif
 517:src/xeq.c     **** 	while (n++ < target) {
 518:src/xeq.c     **** 		const unsigned int oldbase = base;
 519:src/xeq.c     **** 		base = do_inc(oldbase, 0);
 520:src/xeq.c     **** 		if (PcWrapped)
 521:src/xeq.c     **** 			return oldbase;
 522:src/xeq.c     **** 	}
 523:src/xeq.c     **** 	return base;
ARM GAS  /tmp/cc0UaEmF.s 			page 14


 524:src/xeq.c     **** }
 525:src/xeq.c     **** 
 526:src/xeq.c     **** 
 527:src/xeq.c     **** /* Set a flag to indicate that a complex operation has taken place
 528:src/xeq.c     ****  * The flag disappears with the next command executed.
 529:src/xeq.c     ****  */
 530:src/xeq.c     **** static void set_was_complex(void) {
 531:src/xeq.c     **** 	State2.wascomplex = 1;
 532:src/xeq.c     **** }
 533:src/xeq.c     **** 
 534:src/xeq.c     **** 
 535:src/xeq.c     **** /* Produce an error and stop
 536:src/xeq.c     ****  */
 537:src/xeq.c     **** int report_err(const unsigned int e) {
 538:src/xeq.c     **** 	if (Error == ERR_NONE) {
 539:src/xeq.c     **** 		Error = e;
 540:src/xeq.c     **** 		if (e == ERR_NONE) {
 541:src/xeq.c     **** 			error_message(e); // "Running Program"
 542:src/xeq.c     **** 			return 0;
 543:src/xeq.c     **** 		}
 544:src/xeq.c     **** 	}
 545:src/xeq.c     **** 	return 1;
 546:src/xeq.c     **** }
 547:src/xeq.c     **** 
 548:src/xeq.c     **** 
 549:src/xeq.c     **** /* Display a warning
 550:src/xeq.c     ****  */
 551:src/xeq.c     **** int report_warn(const unsigned int e) {
 552:src/xeq.c     **** 	if (Running) {
 553:src/xeq.c     **** 		return report_err(e);
 554:src/xeq.c     **** 	}
 555:src/xeq.c     **** 	error_message(e);
 556:src/xeq.c     **** #ifndef CONSOLE
 557:src/xeq.c     **** 	State2.disp_freeze = 0;
 558:src/xeq.c     **** 	JustDisplayed = 1;
 559:src/xeq.c     **** 	ShowRPN = 1;
 560:src/xeq.c     **** #endif
 561:src/xeq.c     **** 	return e != ERR_NONE;
 562:src/xeq.c     **** }
 563:src/xeq.c     **** 
 564:src/xeq.c     **** 
 565:src/xeq.c     **** /* Doing something in the wrong mode */
 566:src/xeq.c     **** void bad_mode_error(void) {
 567:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 568:src/xeq.c     **** }
 569:src/xeq.c     **** 
 570:src/xeq.c     **** 
 571:src/xeq.c     **** /* User command to produce an error */
 572:src/xeq.c     **** void cmderr(unsigned int arg, enum rarg op) {
 573:src/xeq.c     **** 	report_err(arg);
 574:src/xeq.c     **** }
 575:src/xeq.c     **** 
 576:src/xeq.c     **** 
 577:src/xeq.c     **** /* User command to display a warning */
 578:src/xeq.c     **** void cmdmsg(unsigned int arg, enum rarg op) {
 579:src/xeq.c     **** 	error_message(arg);
 580:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 15


 581:src/xeq.c     **** 
 582:src/xeq.c     **** 
 583:src/xeq.c     **** #if defined(DEBUG) && defined(CONSOLE)
 584:src/xeq.c     **** #include <stdlib.h>
 585:src/xeq.c     **** static void error(const char *fmt, ...) {
 586:src/xeq.c     **** 	va_list ap;
 587:src/xeq.c     **** 	va_start(ap, fmt);
 588:src/xeq.c     **** 	vprintf(fmt, ap);
 589:src/xeq.c     **** 	va_end(ap);
 590:src/xeq.c     **** 	putchar('\n');
 591:src/xeq.c     **** 	exit(1);
 592:src/xeq.c     **** }
 593:src/xeq.c     **** 
 594:src/xeq.c     **** #define illegal(op)	do { report_err(ERR_PROG_BAD); printf("illegal opcode 0x%08x\n", op); } while (
 595:src/xeq.c     **** #else
 596:src/xeq.c     **** #define illegal(op)	do { report_err(ERR_PROG_BAD); } while (0)
 597:src/xeq.c     **** #endif
 598:src/xeq.c     **** 
 599:src/xeq.c     **** /* Real rounding mode access routine
 600:src/xeq.c     ****  */
 601:src/xeq.c     **** static enum rounding get_rounding_mode() {
 602:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 603:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 604:src/xeq.c     **** 		DEC_ROUND_UP, DEC_ROUND_DOWN,
 605:src/xeq.c     **** 		DEC_ROUND_CEILING, DEC_ROUND_FLOOR
 606:src/xeq.c     **** 	};
 607:src/xeq.c     **** 	return (enum rounding) modes[UState.rounding_mode];
 608:src/xeq.c     **** }
 609:src/xeq.c     **** 
 610:src/xeq.c     **** void op_roundingmode(enum nilop op) {
 611:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 612:src/xeq.c     **** }
 613:src/xeq.c     **** 
 614:src/xeq.c     **** void rarg_roundingmode(unsigned int arg, enum rarg op) {
 615:src/xeq.c     **** 	UState.rounding_mode = arg;
 616:src/xeq.c     **** }
 617:src/xeq.c     **** 
 618:src/xeq.c     **** 
 619:src/xeq.c     **** /* Pack a number into our DPD register format
 620:src/xeq.c     ****  */
 621:src/xeq.c     **** 
 622:src/xeq.c     **** void packed_from_number(decimal64 *r, const decNumber *x) {
 623:src/xeq.c     **** 	decContext ctx64;
 624:src/xeq.c     **** 
 625:src/xeq.c     **** 	decContextDefault(&ctx64, DEC_INIT_DECIMAL64);
 626:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 627:src/xeq.c     **** 	decimal64FromNumber(r, x, &ctx64);
 628:src/xeq.c     **** }
 629:src/xeq.c     **** 
 630:src/xeq.c     **** void packed128_from_number(decimal128 *r, const decNumber *x) {
 631:src/xeq.c     **** 	decContext ctx128;
 632:src/xeq.c     **** 
 633:src/xeq.c     **** 	decContextDefault(&ctx128, DEC_INIT_DECIMAL128);
 634:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 635:src/xeq.c     **** 	decimal128FromNumber(r, x, &ctx128);
 636:src/xeq.c     **** }
 637:src/xeq.c     **** 
ARM GAS  /tmp/cc0UaEmF.s 			page 16


 638:src/xeq.c     **** // Repack a decimal128 to decimal64
 639:src/xeq.c     **** void packed_from_packed128(decimal64 *r, const decimal128 *s) {
 640:src/xeq.c     **** 	decNumber temp;
 641:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 642:src/xeq.c     **** }
 643:src/xeq.c     **** 
 644:src/xeq.c     **** // Repack a decimal64 to decimal128
 645:src/xeq.c     **** void packed128_from_packed(decimal128 *r, const decimal64 *s) {
 646:src/xeq.c     **** 	decNumber temp;
 647:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 648:src/xeq.c     **** }
 649:src/xeq.c     **** 
 650:src/xeq.c     **** /*
 651:src/xeq.c     ****  *  User command to round to a specific number of digits
 652:src/xeq.c     ****  */
 653:src/xeq.c     **** void rarg_round(unsigned int arg, enum rarg op) {
 654:src/xeq.c     **** 	decNumber res, x;
 655:src/xeq.c     **** 	const enum rounding rm = get_rounding_mode();
 656:src/xeq.c     **** 
 657:src/xeq.c     **** 	if (is_intmode()) {
 658:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 659:src/xeq.c     **** 		return;
 660:src/xeq.c     **** 	}
 661:src/xeq.c     **** 
 662:src/xeq.c     **** 	setlastX();
 663:src/xeq.c     **** 	getX(&x);
 664:src/xeq.c     **** 	if (op == RARG_ROUND)
 665:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 666:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 667:src/xeq.c     **** 		decNumberRoundDecimals(&res, &x, arg, rm);
 668:src/xeq.c     **** 	setX(&res);
 669:src/xeq.c     **** }
 670:src/xeq.c     **** 
 671:src/xeq.c     **** /* Check if a value is bogus and error out if so.
 672:src/xeq.c     ****  * A value is bogus if it is infinite, NaN *and* flag D is not set.
 673:src/xeq.c     ****  * If flag D is set, these values are allowed through just fine.
 674:src/xeq.c     ****  */
 675:src/xeq.c     **** static int check_special(const decNumber *x) {
 676:src/xeq.c     **** 	decNumber y;
 677:src/xeq.c     **** 	decimal64 z;
 678:src/xeq.c     **** 	decimal128 d;
 679:src/xeq.c     **** 	if (is_dblmode()) {
 680:src/xeq.c     **** 		packed128_from_number(&d, x);
 681:src/xeq.c     **** 		decimal128ToNumber(&d, &y);
 682:src/xeq.c     **** 	}
 683:src/xeq.c     **** 	else 
 684:src/xeq.c     **** 	{
 685:src/xeq.c     **** 		packed_from_number(&z, x);
 686:src/xeq.c     **** 		decimal64ToNumber(&z, &y);
 687:src/xeq.c     **** 	}
 688:src/xeq.c     **** 	if (decNumberIsSpecial(&y)) {
 689:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 690:src/xeq.c     **** 			if (decNumberIsNaN(&y))
 691:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 692:src/xeq.c     **** 			else if (decNumberIsNegative(&y))
 693:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 694:src/xeq.c     **** 			else
ARM GAS  /tmp/cc0UaEmF.s 			page 17


 695:src/xeq.c     **** 				report_err(ERR_INFINITY);
 696:src/xeq.c     **** 			return 1;
 697:src/xeq.c     **** 		}
 698:src/xeq.c     **** 	}
 699:src/xeq.c     **** 	return 0;
 700:src/xeq.c     **** }
 701:src/xeq.c     **** 
 702:src/xeq.c     **** 
 703:src/xeq.c     **** int stack_size(void) {
 704:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 705:src/xeq.c     **** 		return 4;
 706:src/xeq.c     **** 	return 8;
 707:src/xeq.c     **** }
 708:src/xeq.c     **** 
 709:src/xeq.c     **** REGISTER *get_stack(int pos) {
 710:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 711:src/xeq.c     **** }
 712:src/xeq.c     **** 
 713:src/xeq.c     **** static REGISTER *get_stack_top(void) {
 714:src/xeq.c     **** 	return get_stack(stack_size()-1);
 715:src/xeq.c     **** }
 716:src/xeq.c     **** 
 717:src/xeq.c     **** void copyreg(REGISTER *d, const REGISTER *s) {
 718:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 719:src/xeq.c     **** }
 720:src/xeq.c     **** 
 721:src/xeq.c     **** void copyreg_n(int d, int s) {
 722:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 723:src/xeq.c     **** }
 724:src/xeq.c     **** 
 725:src/xeq.c     **** /* Lift the stack one level.
 726:src/xeq.c     ****  */
 727:src/xeq.c     **** void lift(void) {
 728:src/xeq.c     **** 	const int n = stack_size();
 729:src/xeq.c     **** 	int i;
 730:src/xeq.c     **** 	for (i=n-1; i>0; i--)
 731:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 732:src/xeq.c     **** }
 733:src/xeq.c     **** 
 734:src/xeq.c     **** static int get_lift(void) {
 735:src/xeq.c     **** 	return State2.state_lift;
 736:src/xeq.c     **** }
 737:src/xeq.c     **** 
 738:src/xeq.c     **** void lift_if_enabled(void) {
 739:src/xeq.c     **** 	if (get_lift())
 740:src/xeq.c     **** 		lift();
 741:src/xeq.c     **** }
 742:src/xeq.c     **** 
 743:src/xeq.c     **** static void lift2_if_enabled(void) {
 744:src/xeq.c     **** 	lift_if_enabled();
 745:src/xeq.c     **** 	lift();
 746:src/xeq.c     **** }
 747:src/xeq.c     **** 
 748:src/xeq.c     **** void set_lift(void) {
 749:src/xeq.c     ****     State2.state_lift = 1;
 750:src/xeq.c     **** }
 751:src/xeq.c     **** 
ARM GAS  /tmp/cc0UaEmF.s 			page 18


 752:src/xeq.c     **** static void clr_lift(void) {
 753:src/xeq.c     ****     State2.state_lift = 0;
 754:src/xeq.c     **** }
 755:src/xeq.c     **** 
 756:src/xeq.c     **** static void lower(void) {
 757:src/xeq.c     **** 	const int n = stack_size();
 758:src/xeq.c     **** 	int i;
 759:src/xeq.c     **** 
 760:src/xeq.c     **** 	for (i=1; i<n; i++)
 761:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 762:src/xeq.c     **** }
 763:src/xeq.c     **** 
 764:src/xeq.c     **** static void lower2(void) {
 765:src/xeq.c     **** 	const int n = stack_size();
 766:src/xeq.c     **** 	int i;
 767:src/xeq.c     **** 
 768:src/xeq.c     **** 	for (i=2; i<n; i++)
 769:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 770:src/xeq.c     **** }
 771:src/xeq.c     **** 
 772:src/xeq.c     **** 
 773:src/xeq.c     **** void setlastX(void) {
 774:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 775:src/xeq.c     **** }
 776:src/xeq.c     **** 
 777:src/xeq.c     **** static void setlastXY(void) {
 778:src/xeq.c     **** 	setlastX();
 779:src/xeq.c     **** 	copyreg_n(regI_idx, regY_idx);
 780:src/xeq.c     **** }
 781:src/xeq.c     **** 
 782:src/xeq.c     **** 
 783:src/xeq.c     **** decNumber *getRegister(decNumber *r, int index) {
 784:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 785:src/xeq.c     **** 	if (is_dblmode())
 786:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 787:src/xeq.c     **** 	else
 788:src/xeq.c     **** 		decimal64ToNumber(&(reg->s), r);
 789:src/xeq.c     **** 	return r;
 790:src/xeq.c     **** }
 791:src/xeq.c     **** 
 792:src/xeq.c     **** void setRegister(int index, const decNumber *x) {
 793:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 794:src/xeq.c     **** 	decNumber dn;
 795:src/xeq.c     **** 
 796:src/xeq.c     **** 	if (! check_special(x)) {	/* This correctly deals with infinities and NaN based on flag D */
 797:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 798:src/xeq.c     **** 		if (is_dblmode())
 799:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 800:src/xeq.c     **** 		else
 801:src/xeq.c     **** 			packed_from_number(&(reg->s), &dn);
 802:src/xeq.c     **** 	}
 803:src/xeq.c     **** }
 804:src/xeq.c     **** 
 805:src/xeq.c     **** decNumber *getX(decNumber *x) {
 806:src/xeq.c     **** 	return getRegister(x, regX_idx);
 807:src/xeq.c     **** }
 808:src/xeq.c     **** 
ARM GAS  /tmp/cc0UaEmF.s 			page 19


 809:src/xeq.c     **** void setX(const decNumber *x) {
 810:src/xeq.c     **** 	setRegister(regX_idx, x);
 811:src/xeq.c     **** }
 812:src/xeq.c     **** 
 813:src/xeq.c     **** void getY(decNumber *y) {
 814:src/xeq.c     **** 	getRegister(y, regY_idx);
 815:src/xeq.c     **** }
 816:src/xeq.c     **** 
 817:src/xeq.c     **** void setY(const decNumber *y) {
 818:src/xeq.c     **** 	setRegister(regY_idx, y);
 819:src/xeq.c     **** }
 820:src/xeq.c     **** 
 821:src/xeq.c     **** static void getZ(decNumber *z) {
 822:src/xeq.c     **** 	getRegister(z, regZ_idx);
 823:src/xeq.c     **** }
 824:src/xeq.c     **** 
 825:src/xeq.c     **** #if 0
 826:src/xeq.c     **** static void setZ(const decNumber *z) {
 827:src/xeq.c     **** 	setRegister(regZ_idx, z);
 828:src/xeq.c     **** }
 829:src/xeq.c     **** #endif
 830:src/xeq.c     **** 
 831:src/xeq.c     **** static void getT(decNumber *t) {
 832:src/xeq.c     **** 	getRegister(t, regT_idx);
 833:src/xeq.c     **** }
 834:src/xeq.c     **** 
 835:src/xeq.c     **** void getXY(decNumber *x, decNumber *y) {
 836:src/xeq.c     **** 	getX(x);
 837:src/xeq.c     **** 	getY(y);
 838:src/xeq.c     **** }
 839:src/xeq.c     **** 
 840:src/xeq.c     **** void setXY(const decNumber *x, const decNumber *y) {
 841:src/xeq.c     **** 	setX(x);
 842:src/xeq.c     **** 	setY(y);
 843:src/xeq.c     **** }
 844:src/xeq.c     **** 
 845:src/xeq.c     **** void getXYZ(decNumber *x, decNumber *y, decNumber *z) {
 846:src/xeq.c     **** 	getXY(x, y);
 847:src/xeq.c     **** 	getZ(z);
 848:src/xeq.c     **** }
 849:src/xeq.c     **** 
 850:src/xeq.c     **** #if 0
 851:src/xeq.c     **** void setXYZ(const decNumber *x, const decNumber *y, const decNumber *z) {
 852:src/xeq.c     **** 	setXY(x, y);
 853:src/xeq.c     **** 	setZ(z);
 854:src/xeq.c     **** }
 855:src/xeq.c     **** #endif
 856:src/xeq.c     **** 
 857:src/xeq.c     **** void getXYZT(decNumber *x, decNumber *y, decNumber *z, decNumber *t) {
 858:src/xeq.c     **** 	getXYZ(x, y, z);
 859:src/xeq.c     **** 	getT(t);
 860:src/xeq.c     **** }
 861:src/xeq.c     **** 
 862:src/xeq.c     **** void getYZ(decNumber *y, decNumber *z) {
 863:src/xeq.c     **** 	getY(y);
 864:src/xeq.c     **** 	getZ(z);
 865:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 20


 866:src/xeq.c     **** 
 867:src/xeq.c     **** void roll_down(enum nilop op) {
 868:src/xeq.c     **** 	REGISTER r;
 869:src/xeq.c     **** 	copyreg(&r, StackBase);
 870:src/xeq.c     **** 	lower();
 871:src/xeq.c     **** 	copyreg(get_stack_top(), &r);
 872:src/xeq.c     **** }
 873:src/xeq.c     **** 
 874:src/xeq.c     **** void roll_up(enum nilop op) {
 875:src/xeq.c     **** 	REGISTER r;
 876:src/xeq.c     **** 	copyreg(&r, get_stack_top());
 877:src/xeq.c     **** 	lift();
 878:src/xeq.c     **** 	copyreg(StackBase, &r);
 879:src/xeq.c     **** }
 880:src/xeq.c     **** 
 881:src/xeq.c     **** void cpx_roll_down(enum nilop op) {
 882:src/xeq.c     **** 	roll_down(OP_RDOWN);
 883:src/xeq.c     **** 	roll_down(OP_RDOWN);
 884:src/xeq.c     **** 	set_was_complex();
 885:src/xeq.c     **** }
 886:src/xeq.c     **** 
 887:src/xeq.c     **** void cpx_roll_up(enum nilop op) {
 888:src/xeq.c     **** 	roll_up(OP_RUP);
 889:src/xeq.c     **** 	roll_up(OP_RUP);
 890:src/xeq.c     **** 	set_was_complex();
 891:src/xeq.c     **** }
 892:src/xeq.c     **** 
 893:src/xeq.c     **** void cpx_enter(enum nilop op) {
 894:src/xeq.c     **** 	lift();
 895:src/xeq.c     **** 	lift();
 896:src/xeq.c     **** 	copyreg(get_reg_n(regY_idx), get_reg_n(regT_idx));
 897:src/xeq.c     **** 	set_was_complex();
 898:src/xeq.c     **** }
 899:src/xeq.c     **** 
 900:src/xeq.c     **** void cpx_fill(enum nilop op) {
 901:src/xeq.c     **** 	const int n = stack_size();
 902:src/xeq.c     **** 	const REGISTER *y = get_reg_n(regY_idx);
 903:src/xeq.c     **** 	int i;
 904:src/xeq.c     **** 
 905:src/xeq.c     **** 	for (i=2; i<n; i++)
 906:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 907:src/xeq.c     **** 	set_was_complex();
 908:src/xeq.c     **** }
 909:src/xeq.c     **** 
 910:src/xeq.c     **** void fill(enum nilop op) {
 911:src/xeq.c     **** 	const int n = stack_size();
 912:src/xeq.c     **** 	int i;
 913:src/xeq.c     **** 
 914:src/xeq.c     **** 	for (i=1; i<n; i++)
 915:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 916:src/xeq.c     **** }
 917:src/xeq.c     **** 
 918:src/xeq.c     **** void drop(enum nilop op) {
 919:src/xeq.c     **** 	if (op == OP_DROPXY) {
 920:src/xeq.c     **** 		lower2();
 921:src/xeq.c     **** 		set_was_complex();
 922:src/xeq.c     **** 	} else
ARM GAS  /tmp/cc0UaEmF.s 			page 21


 923:src/xeq.c     **** 		lower();
 924:src/xeq.c     **** }
 925:src/xeq.c     **** 
 926:src/xeq.c     **** #ifndef is_intmode
 927:src/xeq.c     **** int is_intmode(void) {
 928:src/xeq.c     **** 	return UState.intm;
 929:src/xeq.c     **** }
 930:src/xeq.c     **** #endif
 931:src/xeq.c     **** 
 932:src/xeq.c     **** int is_dblmode(void) {
 933:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 934:src/xeq.c     **** }
 935:src/xeq.c     **** 
 936:src/xeq.c     **** int is_usrdblmode(void) {
 937:src/xeq.c     **** 	if (XromFlags.xIN)
 938:src/xeq.c     **** 		return XromFlags.mode_double;
 939:src/xeq.c     **** 	return is_dblmode();
 940:src/xeq.c     **** }
 941:src/xeq.c     **** 
 942:src/xeq.c     **** /* Convert a possibly signed string to an integer
 943:src/xeq.c     ****  */
 944:src/xeq.c     **** int s_to_i(const char *s) {
 945:src/xeq.c     **** 	int x = 0;
 946:src/xeq.c     **** 	int neg;
 947:src/xeq.c     **** 
 948:src/xeq.c     **** 	if (*s == '-') {
 949:src/xeq.c     **** 		s++;
 950:src/xeq.c     **** 		neg = 1;
 951:src/xeq.c     **** 	} else {
 952:src/xeq.c     **** 		if (*s == '+')
 953:src/xeq.c     **** 			s++;
 954:src/xeq.c     **** 		neg = 0;
 955:src/xeq.c     **** 	}
 956:src/xeq.c     **** 
 957:src/xeq.c     **** 	for (;;) {
 958:src/xeq.c     **** 		const char c = *s++;
 959:src/xeq.c     **** 
 960:src/xeq.c     **** 		if (c < '0' || c > '9')
 961:src/xeq.c     **** 			break;
 962:src/xeq.c     **** 		x = 10 * x + (c - '0');
 963:src/xeq.c     **** 	}
 964:src/xeq.c     **** 	if (neg)
 965:src/xeq.c     **** 		return -x;
 966:src/xeq.c     **** 	return x;
 967:src/xeq.c     **** }
 968:src/xeq.c     **** 
 969:src/xeq.c     **** /* Convert a string in the given base to an unsigned integer
 970:src/xeq.c     ****  */
 971:src/xeq.c     **** unsigned long long int s_to_ull(const char *s, unsigned int base) {
 972:src/xeq.c     **** 	unsigned long long int x = 0;
 973:src/xeq.c     **** 
 974:src/xeq.c     **** 	for (;;) {
 975:src/xeq.c     **** 		unsigned int n;
 976:src/xeq.c     **** 		const char c = *s++;
 977:src/xeq.c     **** 
 978:src/xeq.c     **** 		if (c >= '0' && c <= '9')
 979:src/xeq.c     **** 			n = c - '0';
ARM GAS  /tmp/cc0UaEmF.s 			page 22


 980:src/xeq.c     **** 		else if (c >= 'A' && c <= 'F')
 981:src/xeq.c     **** 			n = c - 'A' + 10;
 982:src/xeq.c     **** 		else
 983:src/xeq.c     **** 			break;
 984:src/xeq.c     **** 		if (n >= base)
 985:src/xeq.c     **** 			break;
 986:src/xeq.c     **** 		x = x * base + n;
 987:src/xeq.c     **** 	}
 988:src/xeq.c     **** 	return x;
 989:src/xeq.c     **** }
 990:src/xeq.c     **** 
 991:src/xeq.c     **** const char *get_cmdline(void) {
 992:src/xeq.c     **** 	if (CmdLineLength) {
 993:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
 994:src/xeq.c     **** 		return Cmdline;
 995:src/xeq.c     **** 	}
 996:src/xeq.c     **** 	return NULL;
 997:src/xeq.c     **** }
 998:src/xeq.c     **** 
 999:src/xeq.c     **** #if 0
1000:src/xeq.c     **** static int fract_convert_number(decNumber *x, const char *s) {
1001:src/xeq.c     **** 	if (*s == '\0') {
1002:src/xeq.c     **** 		report_err(ERR_DOMAIN);
1003:src/xeq.c     **** 		return 1;
1004:src/xeq.c     **** 	}
1005:src/xeq.c     **** 	decNumberFromString(x, s, &Ctx);
1006:src/xeq.c     **** 	return check_special(x);
1007:src/xeq.c     **** }
1008:src/xeq.c     **** #endif
1009:src/xeq.c     **** 
1010:src/xeq.c     **** /* Return 1 if the command line contains an error and also set an appropriate
1011:src/xeq.c     ****  * error message.
1012:src/xeq.c     ****  */
1013:src/xeq.c     **** int is_bad_cmdline(void)
1014:src/xeq.c     **** {
1015:src/xeq.c     **** #ifndef IGNORE_INVALID_FRACTIONS
1016:src/xeq.c     **** 	if (CmdLineDot == 2) {
1017:src/xeq.c     **** 		char *p;
1018:src/xeq.c     **** 
1019:src/xeq.c     **** 		// Check if there's a non-zero digit after the last decimal mark
1020:src/xeq.c     **** 		p = Cmdline + CmdLineLength;
1021:src/xeq.c     **** 		for (;;) {
1022:src/xeq.c     **** 			p--;
1023:src/xeq.c     **** 			if (*p >= '1' && *p <= '9')
1024:src/xeq.c     **** 				return 0;
1025:src/xeq.c     **** 			if (*p == '.')
1026:src/xeq.c     **** 				break;
1027:src/xeq.c     **** 		}
1028:src/xeq.c     **** 
1029:src/xeq.c     **** 		reset_shift();
1030:src/xeq.c     **** 		error_message(ERR_DOMAIN);
1031:src/xeq.c     **** 		State2.invalid_disp = 1;
1032:src/xeq.c     **** 		return 1;
1033:src/xeq.c     **** 	}
1034:src/xeq.c     **** #endif
1035:src/xeq.c     **** 	return 0;
1036:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 23


1037:src/xeq.c     **** 
1038:src/xeq.c     **** /* Process the command line if any
1039:src/xeq.c     ****  */
1040:src/xeq.c     **** void process_cmdline(void) {
1041:src/xeq.c     **** 	decNumber a, b, x, t;
1042:src/xeq.c     **** 
1043:src/xeq.c     **** 	if (CmdLineLength) {
1044:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
1045:src/xeq.c     **** 		const unsigned int cmdlinedot = CmdLineDot;
1046:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
1047:src/xeq.c     **** 		char cmdline[CMDLINELEN + 2];
1048:src/xeq.c     **** #else
1049:src/xeq.c     **** 		char cmdline[CMDLINELEN + 1];
1050:src/xeq.c     **** #endif
1051:src/xeq.c     **** 
1052:src/xeq.c     **** 		xcopy(cmdline, Cmdline, CMDLINELEN + 1);
1053:src/xeq.c     **** 
1054:src/xeq.c     **** 		cmdline[CmdLineLength] = '\0';
1055:src/xeq.c     **** 		if (!is_intmode()) {
1056:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
1057:src/xeq.c     **** 			if (cmdline[CmdLineLength-1] == 'E' || cmdline[CmdLineLength-1] == 'D')
1058:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
1059:src/xeq.c     **** 			else if (cmdline[CmdLineEex] == 'D') {
1060:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
1061:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
1062:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
1063:src/xeq.c     **** 			}
1064:src/xeq.c     **** #else
1065:src/xeq.c     **** 			if (cmdline[CmdLineLength-1] == 'E')
1066:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
1067:src/xeq.c     **** 			else if (CmdLineLength > 1 && cmdline[CmdLineLength-2] == 'E' && cmdline[CmdLineLength-1] == '-'
1068:src/xeq.c     **** 				cmdline[CmdLineLength-2] = '\0';
1069:src/xeq.c     **** #endif
1070:src/xeq.c     **** 			if (0
1071:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
1072:src/xeq.c     **** 			    || CmdLineEex
1073:src/xeq.c     **** #endif
1074:src/xeq.c     **** #if FRACTION_MODE_INPUT & 4
1075:src/xeq.c     **** 			    || cmdlinedot == 1
1076:src/xeq.c     **** #endif
1077:src/xeq.c     **** 			   )
1078:src/xeq.c     **** 				UState.fract = 0;
1079:src/xeq.c     **** 		}
1080:src/xeq.c     **** 		CmdLineLength = 0;
1081:src/xeq.c     **** 		lift_if_enabled();
1082:src/xeq.c     **** 		set_lift();
1083:src/xeq.c     **** 		CmdLineDot = 0;
1084:src/xeq.c     **** 		CmdLineEex = 0;
1085:src/xeq.c     **** 		if (is_intmode()) {
1086:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
1087:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
1088:src/xeq.c     **** 			setX_int_sgn(x, sgn);
1089:src/xeq.c     **** 		} else if (cmdlinedot == 2) {
1090:src/xeq.c     **** 			char *d0, *d1, *d2;
1091:src/xeq.c     **** 			int neg;
1092:src/xeq.c     **** 
1093:src/xeq.c     **** 			if (bad_cmdline)
ARM GAS  /tmp/cc0UaEmF.s 			page 24


1094:src/xeq.c     **** 				return;
1095:src/xeq.c     **** #if !(FRACTION_MODE_INPUT & 8)
1096:src/xeq.c     **** 			UState.fract = 1;
1097:src/xeq.c     **** #endif
1098:src/xeq.c     **** 			if (cmdline[0] == '-') {
1099:src/xeq.c     **** 				neg = 1;
1100:src/xeq.c     **** 				d0 = cmdline+1;
1101:src/xeq.c     **** 			} else {
1102:src/xeq.c     **** 				neg = 0;
1103:src/xeq.c     **** 				d0 = cmdline;
1104:src/xeq.c     **** 			}
1105:src/xeq.c     **** 			d1 = find_char(d0, '.');
1106:src/xeq.c     **** 			*d1++ = '\0';
1107:src/xeq.c     **** 			d2 = find_char(d1, '.');
1108:src/xeq.c     **** 			*d2++ = '\0';
1109:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
1110:src/xeq.c     **** 			decNumberFromString(&x, d0, &Ctx);
1111:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1112:src/xeq.c     **** 			if (d2 == d1+1) { // ND change starts here; if dots are adjacent...
1113:src/xeq.c     **** 				decNumberCopy(&a, &x); // put x (integer part) into a (numerator) ...
1114:src/xeq.c     **** 				decNumberZero(&x); // and zero x
1115:src/xeq.c     **** #if FRACTION_MODE_INPUT & 32
1116:src/xeq.c     **** 				UState.improperfrac = 1;
1117:src/xeq.c     **** #endif
1118:src/xeq.c     **** 			}
1119:src/xeq.c     **** 			else
1120:src/xeq.c     **** #endif
1121:src/xeq.c     **** 			{
1122:src/xeq.c     **** 				decNumberFromString(&a, d1, &Ctx);
1123:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 16) && defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1124:src/xeq.c     **** 				UState.improperfrac = 0;
1125:src/xeq.c     **** #endif
1126:src/xeq.c     **** 			}
1127:src/xeq.c     **** 			dn_divide(&t, &a, &b);
1128:src/xeq.c     **** #ifdef IGNORE_INVALID_FRACTIONS
1129:src/xeq.c     **** 			if (!decNumberIsSpecial(&t))
1130:src/xeq.c     **** #endif
1131:src/xeq.c     **** 				dn_add(&x, &x, &t);
1132:src/xeq.c     **** 			if (neg)
1133:src/xeq.c     **** 				dn_minus(&x, &x);
1134:src/xeq.c     **** 			setX(&x);
1135:src/xeq.c     **** 		} else {
1136:src/xeq.c     **** 			decNumberFromString(&x, cmdline, &Ctx);
1137:src/xeq.c     **** 			setX(&x);
1138:src/xeq.c     **** 		}
1139:src/xeq.c     **** 		set_entry();
1140:src/xeq.c     **** #ifndef DM42
1141:src/xeq.c     **** 		print_trace( TRACE_DATA_ENTRY, 1 );
1142:src/xeq.c     **** #endif
1143:src/xeq.c     **** 	}
1144:src/xeq.c     **** }
1145:src/xeq.c     **** 
1146:src/xeq.c     **** void process_cmdline_set_lift(void) {
1147:src/xeq.c     **** 	process_cmdline();
1148:src/xeq.c     **** 	set_lift();
1149:src/xeq.c     **** }
1150:src/xeq.c     **** 
ARM GAS  /tmp/cc0UaEmF.s 			page 25


1151:src/xeq.c     **** 
1152:src/xeq.c     **** /*
1153:src/xeq.c     ****  *  Return a pointer to a numbered register.
1154:src/xeq.c     ****  *  If locals are enabled and a non existent local register
1155:src/xeq.c     ****  *  is accessed, the respective global register is returned.
1156:src/xeq.c     ****  *  Error checking must be done outside this routine.
1157:src/xeq.c     ****  *  We force the beginning of the local registers on an even stack position.
1158:src/xeq.c     ****  *  This ensures 32 bit alignment of the decima64 object.
1159:src/xeq.c     ****  */
1160:src/xeq.c     **** /*
1161:src/xeq.c     ****  *  If working in double precision, register numbers must be remapped
1162:src/xeq.c     ****  */
1163:src/xeq.c     **** static decimal64 *reg_address(int n, decimal64 *const regs, decimal64 *const named_regs) {
 182              		.loc 1 1163 90 is_stmt 1 view -0
 183              		.cfi_startproc
 184              		@ args = 0, pretend = 0, frame = 0
 185              		@ frame_needed = 0, uses_anonymous_args = 0
 186              		@ link register save eliminated.
1164:src/xeq.c     **** 	const int dbl = is_dblmode();
 187              		.loc 1 1164 2 view .LVU58
 188              	.LBB1308:
 189              	.LBI1308:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 190              		.loc 1 932 5 view .LVU59
 191              	.LBB1309:
 933:src/xeq.c     **** }
 192              		.loc 1 933 2 view .LVU60
 933:src/xeq.c     **** }
 193              		.loc 1 933 24 is_stmt 0 view .LVU61
 194 0000 154B     		ldr	r3, .L25
 195 0002 1B68     		ldr	r3, [r3]
 196              	.LBE1309:
 197              	.LBE1308:
1163:src/xeq.c     **** 	const int dbl = is_dblmode();
 198              		.loc 1 1163 90 view .LVU62
 199 0004 10B4     		push	{r4}
 200              		.cfi_def_cfa_offset 4
 201              		.cfi_offset 4, -4
 202              	.LBB1312:
 203              	.LBB1310:
 933:src/xeq.c     **** }
 204              		.loc 1 933 24 view .LVU63
 205 0006 B3F8E847 		ldrh	r4, [r3, #2024]
 206              	.LBE1310:
 207              	.LBE1312:
1165:src/xeq.c     **** 
1166:src/xeq.c     **** 	if (n < regX_idx)
 208              		.loc 1 1166 5 view .LVU64
 209 000a 6328     		cmp	r0, #99
 210              	.LBB1313:
 211              	.LBB1311:
 933:src/xeq.c     **** }
 212              		.loc 1 933 24 view .LVU65
 213 000c 44F20103 		movw	r3, #16385
 214 0010 03EA0403 		and	r3, r3, r4
 215              	.LVL17:
 933:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 26


 216              		.loc 1 933 24 view .LVU66
 217              	.LBE1311:
 218              	.LBE1313:
 219              		.loc 1 1166 2 is_stmt 1 view .LVU67
 220              		.loc 1 1166 5 is_stmt 0 view .LVU68
 221 0014 10DD     		ble	.L23
1167:src/xeq.c     **** 		return regs + n + (dbl ? n : 0);
1168:src/xeq.c     **** 
1169:src/xeq.c     **** 	n -= regX_idx;
 222              		.loc 1 1169 2 is_stmt 1 view .LVU69
1170:src/xeq.c     **** 	// Lettered register
1171:src/xeq.c     **** 	if (XromFlags.xIN)
 223              		.loc 1 1171 6 is_stmt 0 view .LVU70
 224 0016 1149     		ldr	r1, .L25+4
 225              	.LVL18:
 226              		.loc 1 1171 5 view .LVU71
 227 0018 91F90140 		ldrsb	r4, [r1, #1]
 228 001c 002C     		cmp	r4, #0
1169:src/xeq.c     **** 	// Lettered register
 229              		.loc 1 1169 4 view .LVU72
 230 001e A0F16401 		sub	r1, r0, #100
 231              	.LVL19:
 232              		.loc 1 1171 2 is_stmt 1 view .LVU73
 233              		.loc 1 1171 5 is_stmt 0 view .LVU74
 234 0022 13DB     		blt	.L24
1172:src/xeq.c     **** 		return (decimal64 *) (XromStack + n);
1173:src/xeq.c     **** 	if (dbl)
 235              		.loc 1 1173 2 is_stmt 1 view .LVU75
 236              		.loc 1 1173 5 is_stmt 0 view .LVU76
 237 0024 B3F5804F 		cmp	r3, #16384
1174:src/xeq.c     **** 		n = (n << 1) - STACK_SIZE - EXTRA_REG;
 238              		.loc 1 1174 3 is_stmt 1 view .LVU77
 239              		.loc 1 1174 10 is_stmt 0 view .LVU78
 240 0028 04BF     		itt	eq
 241 002a 4900     		lsleq	r1, r1, #1
 242              	.LVL20:
 243              		.loc 1 1174 5 view .LVU79
 244 002c 0C39     		subeq	r1, r1, #12
 245              	.LVL21:
1175:src/xeq.c     **** 	return named_regs + n;
 246              		.loc 1 1175 2 is_stmt 1 view .LVU80
 247              		.loc 1 1175 20 is_stmt 0 view .LVU81
 248 002e 02EBC100 		add	r0, r2, r1, lsl #3
1176:src/xeq.c     **** }
 249              		.loc 1 1176 1 view .LVU82
 250 0032 5DF8044B 		ldr	r4, [sp], #4
 251              		.cfi_remember_state
 252              		.cfi_restore 4
 253              		.cfi_def_cfa_offset 0
 254 0036 7047     		bx	lr
 255              	.LVL22:
 256              	.L23:
 257              		.cfi_restore_state
1167:src/xeq.c     **** 
 258              		.loc 1 1167 3 is_stmt 1 view .LVU83
1167:src/xeq.c     **** 
 259              		.loc 1 1167 19 is_stmt 0 view .LVU84
ARM GAS  /tmp/cc0UaEmF.s 			page 27


 260 0038 B3F5804F 		cmp	r3, #16384
1167:src/xeq.c     **** 
 261              		.loc 1 1167 15 view .LVU85
 262 003c 4FEAC002 		lsl	r2, r0, #3
 263              	.LVL23:
1167:src/xeq.c     **** 
 264              		.loc 1 1167 15 view .LVU86
 265 0040 08BF     		it	eq
 266 0042 0201     		lsleq	r2, r0, #4
1167:src/xeq.c     **** 
 267              		.loc 1 1167 19 view .LVU87
 268 0044 8818     		adds	r0, r1, r2
 269              	.LVL24:
 270              		.loc 1 1176 1 view .LVU88
 271 0046 5DF8044B 		ldr	r4, [sp], #4
 272              		.cfi_remember_state
 273              		.cfi_restore 4
 274              		.cfi_def_cfa_offset 0
 275 004a 7047     		bx	lr
 276              	.LVL25:
 277              	.L24:
 278              		.cfi_restore_state
1172:src/xeq.c     **** 	if (dbl)
 279              		.loc 1 1172 3 is_stmt 1 view .LVU89
1172:src/xeq.c     **** 	if (dbl)
 280              		.loc 1 1172 10 is_stmt 0 view .LVU90
 281 004c 0448     		ldr	r0, .L25+8
 282              		.loc 1 1176 1 view .LVU91
 283 004e 5DF8044B 		ldr	r4, [sp], #4
 284              		.cfi_restore 4
 285              		.cfi_def_cfa_offset 0
1172:src/xeq.c     **** 	if (dbl)
 286              		.loc 1 1172 10 view .LVU92
 287 0052 00EB0110 		add	r0, r0, r1, lsl #4
 288              		.loc 1 1176 1 view .LVU93
 289 0056 7047     		bx	lr
 290              	.L26:
 291              		.align	2
 292              	.L25:
 293 0058 00000000 		.word	main_ram
 294 005c 00000000 		.word	XromParams
 295 0060 00000000 		.word	XromLocal
 296              		.cfi_endproc
 297              	.LFE86:
 299              		.section	.text.retstk_up,"ax",%progbits
 300              		.align	1
 301              		.p2align 2,,3
 302              		.syntax unified
 303              		.thumb
 304              		.thumb_func
 305              		.fpu fpv4-sp-d16
 307              	retstk_up:
 308              	.LFB146:
1177:src/xeq.c     **** 
1178:src/xeq.c     **** REGISTER *get_reg_n(int n) {
1179:src/xeq.c     **** 	const int dbl = is_dblmode();
1180:src/xeq.c     **** 
ARM GAS  /tmp/cc0UaEmF.s 			page 28


1181:src/xeq.c     **** 	if (n >= CONST_REG_BASE) {
1182:src/xeq.c     **** 		n -= CONST_REG_BASE;
1183:src/xeq.c     **** 		return get_const(n, dbl);
1184:src/xeq.c     **** 	}
1185:src/xeq.c     **** 	if (n >= FLASH_REG_BASE)
1186:src/xeq.c     **** 		return get_flash_reg_n(n - FLASH_REG_BASE);
1187:src/xeq.c     **** 
1188:src/xeq.c     **** 	if (n >= LOCAL_REG_BASE && local_regs() > 0) {
1189:src/xeq.c     **** 		// local register on the return stack
1190:src/xeq.c     **** 		n -= LOCAL_REG_BASE;
1191:src/xeq.c     **** 		if (dbl)
1192:src/xeq.c     **** 			n <<= 1;
1193:src/xeq.c     **** 		return (REGISTER *) ((decimal64 *) (RetStk + (short)((LocalRegs + 2) & 0xfffe)) + n);
1194:src/xeq.c     **** 	}
1195:src/xeq.c     **** 	return (REGISTER *) reg_address(n, Regs + TOPREALREG - NumRegs, Regs + regX_idx);
1196:src/xeq.c     **** }
1197:src/xeq.c     **** 
1198:src/xeq.c     **** 
1199:src/xeq.c     **** REGISTER *get_flash_reg_n(int n) {
1200:src/xeq.c     **** 	return (REGISTER *) reg_address(n, BackupFlash._regs + TOPREALREG - BackupFlash._numregs,
1201:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
1202:src/xeq.c     **** }
1203:src/xeq.c     **** 
1204:src/xeq.c     **** 
1205:src/xeq.c     **** /*
1206:src/xeq.c     ****  *  Get a constatnt by index and mode
1207:src/xeq.c     ****  *  In case of a conversion, a private copy is returned
1208:src/xeq.c     ****  */
1209:src/xeq.c     **** REGISTER *get_const(int index, int dbl)
1210:src/xeq.c     **** {
1211:src/xeq.c     **** 	static REGISTER result;
1212:src/xeq.c     **** 	const int i = cnsts[index].index;
1213:src/xeq.c     **** 	if (dbl) {
1214:src/xeq.c     **** 		if (i <= 1 || i >= 128)
1215:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
1216:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
1217:src/xeq.c     **** 	}
1218:src/xeq.c     **** 	else {
1219:src/xeq.c     **** 		if (i < 128)
1220:src/xeq.c     **** 			return (REGISTER *) (cnsts_d64 + i);
1221:src/xeq.c     **** 		packed_from_packed128(&(result.s), cnsts_d128 - 128 + i);
1222:src/xeq.c     **** 	}
1223:src/xeq.c     **** 	return &result;
1224:src/xeq.c     **** }
1225:src/xeq.c     **** 
1226:src/xeq.c     **** 
1227:src/xeq.c     **** /*  Some conversion routines to take decimals and produce integers
1228:src/xeq.c     ****  *  This is for opaque storage, no conversion takes place.
1229:src/xeq.c     ****  */
1230:src/xeq.c     **** long long int get_reg_n_int(int index) {
1231:src/xeq.c     **** 	long long int ll;
1232:src/xeq.c     **** 	xcopy(&ll, get_reg_n(index), sizeof(ll));
1233:src/xeq.c     **** 	return ll;
1234:src/xeq.c     **** }
1235:src/xeq.c     **** 
1236:src/xeq.c     **** void set_reg_n_int(int index, long long int ll) {
1237:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
ARM GAS  /tmp/cc0UaEmF.s 			page 29


1238:src/xeq.c     **** }
1239:src/xeq.c     **** 
1240:src/xeq.c     **** /* Get an integer from a register
1241:src/xeq.c     ****  */
1242:src/xeq.c     **** unsigned long long int get_reg_n_int_sgn(int index, int *sgn) {
1243:src/xeq.c     **** 	if (is_intmode()) {
1244:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
1245:src/xeq.c     **** 	} else {
1246:src/xeq.c     **** 		decNumber n;
1247:src/xeq.c     **** 
1248:src/xeq.c     **** 		getRegister(&n, index);
1249:src/xeq.c     **** 		return dn_to_ull(&n, sgn);
1250:src/xeq.c     **** 	}
1251:src/xeq.c     **** }
1252:src/xeq.c     **** 
1253:src/xeq.c     **** 
1254:src/xeq.c     **** /* Get an integer from X
1255:src/xeq.c     ****  */
1256:src/xeq.c     **** long long int getX_int(void) {
1257:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
1258:src/xeq.c     **** }
1259:src/xeq.c     **** 
1260:src/xeq.c     **** unsigned long long int getX_int_sgn(int *sgn) {
1261:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
1262:src/xeq.c     **** }
1263:src/xeq.c     **** 
1264:src/xeq.c     **** /*
1265:src/xeq.c     ****  *  Forced conversion from real to intger
1266:src/xeq.c     ****  *  Leaves integer mode active on return!
1267:src/xeq.c     ****  */
1268:src/xeq.c     **** static void int_from_register(int out, int in) {
1269:src/xeq.c     **** 	int sgn;
1270:src/xeq.c     **** 	unsigned long long int val;
1271:src/xeq.c     **** 	
1272:src/xeq.c     **** 	UState.intm = 0;	// Force real mode access
1273:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
1274:src/xeq.c     **** 
1275:src/xeq.c     **** 	UState.intm = 1;	// Force integer access
1276:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
1277:src/xeq.c     **** }
1278:src/xeq.c     **** 
1279:src/xeq.c     **** /* Put an integer into a register
1280:src/xeq.c     ****  */
1281:src/xeq.c     **** void set_reg_n_int_sgn(int index, unsigned long long int val, int sgn) {
1282:src/xeq.c     **** 	if (is_intmode()) {
1283:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
1284:src/xeq.c     **** 	} else {
1285:src/xeq.c     **** 		decNumber t;
1286:src/xeq.c     **** 
1287:src/xeq.c     **** 		ullint_to_dn(&t, val);
1288:src/xeq.c     **** 		if (sgn)
1289:src/xeq.c     **** 			dn_minus(&t, &t);
1290:src/xeq.c     **** 		setRegister(index, &t);
1291:src/xeq.c     **** 	}
1292:src/xeq.c     **** }
1293:src/xeq.c     **** 
1294:src/xeq.c     **** /* 
ARM GAS  /tmp/cc0UaEmF.s 			page 30


1295:src/xeq.c     ****  *  Forced conversion from integer to register format.
1296:src/xeq.c     ****  *  Leaves integer mode off after conversion.
1297:src/xeq.c     ****  *  Destination may be in XROM register space
1298:src/xeq.c     ****  */
1299:src/xeq.c     **** static void register_from_int(int out, int in, int called_from_xin) {
1300:src/xeq.c     **** 	int sgn;
1301:src/xeq.c     **** 	unsigned long long int val;
1302:src/xeq.c     **** 	const int xin = XromFlags.xIN;
1303:src/xeq.c     **** 	
1304:src/xeq.c     **** 	if (called_from_xin)
1305:src/xeq.c     **** 		XromFlags.xIN = 0;
1306:src/xeq.c     **** 	UState.intm = 1;
1307:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
1308:src/xeq.c     **** 
1309:src/xeq.c     **** 	XromFlags.xIN = xin;
1310:src/xeq.c     **** 	UState.intm = 0;
1311:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
1312:src/xeq.c     **** }
1313:src/xeq.c     **** 
1314:src/xeq.c     **** 
1315:src/xeq.c     **** /* Put an integer into X
1316:src/xeq.c     ****  * Integer registers are always single precision!
1317:src/xeq.c     ****  */
1318:src/xeq.c     **** void setX_int(long long int val) {
1319:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
1320:src/xeq.c     **** }
1321:src/xeq.c     **** 
1322:src/xeq.c     **** 
1323:src/xeq.c     **** void setX_int_sgn(unsigned long long int val, int sgn) {
1324:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
1325:src/xeq.c     **** }
1326:src/xeq.c     **** 
1327:src/xeq.c     **** 
1328:src/xeq.c     **** 
1329:src/xeq.c     **** /*
1330:src/xeq.c     ****  *  Set the register value explicitely
1331:src/xeq.c     ****  */
1332:src/xeq.c     **** void zero_regs(REGISTER *dest, int n) {
1333:src/xeq.c     **** #if 0
1334:src/xeq.c     **** 	if (is_intmode())
1335:src/xeq.c     **** 		xset(dest, 0, n << 3);
1336:src/xeq.c     **** 	else {
1337:src/xeq.c     **** 		REGISTER *const zero = get_reg_n(CONST_REG_BASE + OP_ZERO);
1338:src/xeq.c     **** 		const int reg_size = is_dblmode() ? sizeof(decimal128) : sizeof(decimal64);
1339:src/xeq.c     **** 		char *d = (char *) dest;
1340:src/xeq.c     **** 		int i;
1341:src/xeq.c     **** 		for (i = 0; i < n; ++i, d += reg_size)
1342:src/xeq.c     **** 			copyreg((REGISTER *) d, zero);
1343:src/xeq.c     **** 	}
1344:src/xeq.c     **** #else
1345:src/xeq.c     **** 	// This works for all modes
1346:src/xeq.c     **** 	// no it doesn't -- it leaves varying values of zero around
1347:src/xeq.c     **** 	xset(dest, 0, n << (3 + is_dblmode()));
1348:src/xeq.c     **** #endif
1349:src/xeq.c     **** }
1350:src/xeq.c     **** 
1351:src/xeq.c     **** void move_regs(REGISTER *dest, REGISTER *src, int n) {
ARM GAS  /tmp/cc0UaEmF.s 			page 31


1352:src/xeq.c     **** 	if (is_dblmode())
1353:src/xeq.c     **** 		n <<= 1;
1354:src/xeq.c     **** 	xcopy(dest, src, n << 3);
1355:src/xeq.c     **** }
1356:src/xeq.c     **** 
1357:src/xeq.c     **** 
1358:src/xeq.c     **** /* Zero a register
1359:src/xeq.c     ****  */
1360:src/xeq.c     **** static void set_zero(REGISTER *x) {
1361:src/xeq.c     **** 	zero_regs(x, 1);
1362:src/xeq.c     **** }
1363:src/xeq.c     **** 
1364:src/xeq.c     **** void zero_X(void) {
1365:src/xeq.c     **** 	set_zero(StackBase);
1366:src/xeq.c     **** }
1367:src/xeq.c     **** 
1368:src/xeq.c     **** void zero_Y(void) {
1369:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
1370:src/xeq.c     **** }
1371:src/xeq.c     **** 
1372:src/xeq.c     **** void clrx(enum nilop op) {
1373:src/xeq.c     **** 	zero_X();
1374:src/xeq.c     **** 	clr_lift();
1375:src/xeq.c     **** }
1376:src/xeq.c     **** 
1377:src/xeq.c     **** /* Zero out the stack
1378:src/xeq.c     ****  */
1379:src/xeq.c     **** void clrstk(enum nilop op) {
1380:src/xeq.c     **** 	zero_regs(StackBase, stack_size());
1381:src/xeq.c     **** 	set_lift();
1382:src/xeq.c     **** }
1383:src/xeq.c     **** 
1384:src/xeq.c     **** 
1385:src/xeq.c     **** /* Zero out all registers excluding the stack and lastx
1386:src/xeq.c     ****  */	
1387:src/xeq.c     **** void clrreg(enum nilop op) {
1388:src/xeq.c     **** 	const int local = local_regs();
1389:src/xeq.c     **** 	process_cmdline_set_lift();
1390:src/xeq.c     **** 
1391:src/xeq.c     **** 	// erase register memory
1392:src/xeq.c     **** 	zero_regs(get_reg_n(0), global_regs());
1393:src/xeq.c     **** 
1394:src/xeq.c     **** 	// Clear A, B, C & D if they aren't part of the stack
1395:src/xeq.c     **** 	if (stack_size() != 8)
1396:src/xeq.c     **** 		zero_regs(get_reg_n(regA_idx), 4);
1397:src/xeq.c     **** 
1398:src/xeq.c     **** 	// Clear J & K but not I and L since they are last X.
1399:src/xeq.c     **** 	zero_regs(get_reg_n(regJ_idx), 2);
1400:src/xeq.c     **** 
1401:src/xeq.c     **** 	// erase local registers but keep them allocated
1402:src/xeq.c     **** 	if (local)
1403:src/xeq.c     **** 		zero_regs(get_reg_n(LOCAL_REG_BASE), local);
1404:src/xeq.c     **** }
1405:src/xeq.c     **** 
1406:src/xeq.c     **** 
1407:src/xeq.c     **** /* Clear the subroutine return stack
1408:src/xeq.c     ****  */
ARM GAS  /tmp/cc0UaEmF.s 			page 32


1409:src/xeq.c     **** void clrretstk(void) {
1410:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
1411:src/xeq.c     **** }
1412:src/xeq.c     **** 
1413:src/xeq.c     **** void clrretstk_pc(void) {
1414:src/xeq.c     **** 	clrretstk();
1415:src/xeq.c     **** 	raw_set_pc(0);
1416:src/xeq.c     **** 	update_program_bounds(1);
1417:src/xeq.c     **** }
1418:src/xeq.c     **** 
1419:src/xeq.c     **** 
1420:src/xeq.c     **** /*
1421:src/xeq.c     ****  *  Command to allow access to constants and small integers
1422:src/xeq.c     ****  */
1423:src/xeq.c     **** void cmdconst(unsigned int arg, enum rarg op) {
1424:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
1425:src/xeq.c     **** 	if (op == RARG_INTNUM_CMPLX || op == RARG_CONST_CMPLX || op == RARG_IND_CONST_CMPLX) {
1426:src/xeq.c     **** #else
1427:src/xeq.c     **** 	if (op == RARG_INTNUM_CMPLX || op == RARG_CONST_CMPLX) {
1428:src/xeq.c     **** #endif
1429:src/xeq.c     **** 		lift2_if_enabled();
1430:src/xeq.c     **** 		zero_Y();
1431:src/xeq.c     **** 		set_was_complex();
1432:src/xeq.c     **** 	} else
1433:src/xeq.c     **** 		lift_if_enabled();
1434:src/xeq.c     **** 
1435:src/xeq.c     **** 	if (op == RARG_INTNUM || op == RARG_INTNUM_CMPLX)
1436:src/xeq.c     **** 		setX_int_sgn(arg, 0);
1437:src/xeq.c     **** 	else if (is_intmode())
1438:src/xeq.c     **** 		bad_mode_error();
1439:src/xeq.c     **** 	else 
1440:src/xeq.c     **** 		copyreg(StackBase, get_const(arg, is_dblmode()));
1441:src/xeq.c     **** }
1442:src/xeq.c     **** 
1443:src/xeq.c     **** 
1444:src/xeq.c     **** /* Store/recall code here.
1445:src/xeq.c     ****  * These two are pretty much the same so we define some utility routines first.
1446:src/xeq.c     ****  */
1447:src/xeq.c     **** 
1448:src/xeq.c     **** /* Do a basic STO/RCL arithmetic operation.
1449:src/xeq.c     ****  */
1450:src/xeq.c     **** static int storcl_op(unsigned short opr, int index, decNumber *r, int rev) {
1451:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
1452:src/xeq.c     **** 
1453:src/xeq.c     **** 	getX(x);
1454:src/xeq.c     **** 	getRegister(y, index);
1455:src/xeq.c     **** 	if (rev) {
1456:src/xeq.c     **** 		x = y;
1457:src/xeq.c     **** 		y = &a;
1458:src/xeq.c     **** 	}
1459:src/xeq.c     **** 
1460:src/xeq.c     **** 	switch (opr) {
1461:src/xeq.c     **** 	case 1:
1462:src/xeq.c     **** 		dn_add(r, y, x);
1463:src/xeq.c     **** 		break;
1464:src/xeq.c     **** 	case 2:
1465:src/xeq.c     **** 		dn_subtract(r, y, x);
ARM GAS  /tmp/cc0UaEmF.s 			page 33


1466:src/xeq.c     **** 		break;
1467:src/xeq.c     **** 	case 3:
1468:src/xeq.c     **** 		dn_multiply(r, y, x);
1469:src/xeq.c     **** 		break;
1470:src/xeq.c     **** 	case 4:
1471:src/xeq.c     **** 		dn_divide(r, y, x);
1472:src/xeq.c     **** 		break;
1473:src/xeq.c     **** 	case 5:
1474:src/xeq.c     **** 		dn_min(r, y, x);
1475:src/xeq.c     **** 		break;
1476:src/xeq.c     **** 	case 6:
1477:src/xeq.c     **** 		dn_max(r, y, x);
1478:src/xeq.c     **** 		break;
1479:src/xeq.c     **** 	default:
1480:src/xeq.c     **** 		return 1;
1481:src/xeq.c     **** 	}
1482:src/xeq.c     **** 	return 0;
1483:src/xeq.c     **** }
1484:src/xeq.c     **** 
1485:src/xeq.c     **** static int storcl_intop(unsigned short opr, int index, long long int *r, int rev) {
1486:src/xeq.c     **** 	long long int x, y;
1487:src/xeq.c     **** 
1488:src/xeq.c     **** 	x = getX_int();
1489:src/xeq.c     **** 	y = get_reg_n_int(index);
1490:src/xeq.c     **** 
1491:src/xeq.c     **** 	if (rev) {
1492:src/xeq.c     **** 		const long long int t = x;
1493:src/xeq.c     **** 		x = y;
1494:src/xeq.c     **** 		y = t;
1495:src/xeq.c     **** 	}
1496:src/xeq.c     **** 
1497:src/xeq.c     **** 	switch (opr) {
1498:src/xeq.c     **** 	case 1:
1499:src/xeq.c     **** 		*r = intAdd(y, x);
1500:src/xeq.c     **** 		break;
1501:src/xeq.c     **** 	case 2:
1502:src/xeq.c     **** 		*r = intSubtract(y, x);
1503:src/xeq.c     **** 		break;
1504:src/xeq.c     **** 	case 3:
1505:src/xeq.c     **** 		*r = intMultiply(y, x);
1506:src/xeq.c     **** 		break;
1507:src/xeq.c     **** 	case 4:
1508:src/xeq.c     **** 		*r = intDivide(y, x);
1509:src/xeq.c     **** 		break;
1510:src/xeq.c     **** 	case 5:
1511:src/xeq.c     **** 		*r = intMin(y, x);
1512:src/xeq.c     **** 		break;
1513:src/xeq.c     **** 	case 6:
1514:src/xeq.c     **** 		*r = intMax(y, x);
1515:src/xeq.c     **** 		break;
1516:src/xeq.c     **** 	default:
1517:src/xeq.c     **** 		return 1;
1518:src/xeq.c     **** 	}
1519:src/xeq.c     **** 	return 0;
1520:src/xeq.c     **** }
1521:src/xeq.c     **** 
1522:src/xeq.c     **** /* We've got a STO operation to do.
ARM GAS  /tmp/cc0UaEmF.s 			page 34


1523:src/xeq.c     ****  */
1524:src/xeq.c     **** void cmdsto(unsigned int arg, enum rarg op) {
1525:src/xeq.c     **** 	if (op == RARG_STO) {
1526:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
1527:src/xeq.c     **** 	} else {
1528:src/xeq.c     **** 		if (is_intmode()) {
1529:src/xeq.c     **** 			long long int r;
1530:src/xeq.c     **** 
1531:src/xeq.c     **** 			if (storcl_intop(op - RARG_STO, arg, &r, 0))
1532:src/xeq.c     **** 				illegal(op);
1533:src/xeq.c     **** 			set_reg_n_int(arg, r);
1534:src/xeq.c     **** 		} else {
1535:src/xeq.c     **** 			decNumber r;
1536:src/xeq.c     **** 
1537:src/xeq.c     **** 			if (storcl_op(op - RARG_STO, arg, &r, 0))
1538:src/xeq.c     **** 				illegal(op);
1539:src/xeq.c     **** 			setRegister(arg, &r);
1540:src/xeq.c     **** 		}
1541:src/xeq.c     **** 	}
1542:src/xeq.c     **** }
1543:src/xeq.c     **** 
1544:src/xeq.c     **** /* We've got a RCL operation to do.
1545:src/xeq.c     ****  */
1546:src/xeq.c     **** static void do_rcl(int index, enum rarg op) {
1547:src/xeq.c     **** 	if (op == RARG_RCL) {
1548:src/xeq.c     **** 		REGISTER temp;
1549:src/xeq.c     **** 		copyreg(&temp, get_reg_n(index));
1550:src/xeq.c     **** 		lift_if_enabled();
1551:src/xeq.c     **** 		copyreg(StackBase, &temp);
1552:src/xeq.c     **** 	} else {
1553:src/xeq.c     **** 		if (is_intmode()) {
1554:src/xeq.c     **** 			long long int r;
1555:src/xeq.c     **** 
1556:src/xeq.c     **** 			if (storcl_intop(op - RARG_RCL, index, &r, 1))
1557:src/xeq.c     **** 				illegal(op);
1558:src/xeq.c     **** 			setlastX();
1559:src/xeq.c     **** 			setX_int(r);
1560:src/xeq.c     **** 		} else {
1561:src/xeq.c     **** 			decNumber r;
1562:src/xeq.c     **** 
1563:src/xeq.c     **** 			if (storcl_op(op - RARG_RCL, index, &r, 1))
1564:src/xeq.c     **** 				illegal(op);
1565:src/xeq.c     **** 			setlastX();
1566:src/xeq.c     **** 			setX(&r);
1567:src/xeq.c     **** 		}
1568:src/xeq.c     **** 	}
1569:src/xeq.c     **** }
1570:src/xeq.c     **** 
1571:src/xeq.c     **** void cmdrcl(unsigned int arg, enum rarg op) {
1572:src/xeq.c     **** 	do_rcl(arg, op);
1573:src/xeq.c     **** }
1574:src/xeq.c     **** 
1575:src/xeq.c     **** #ifdef INCLUDE_FLASH_RECALL
1576:src/xeq.c     **** void cmdflashrcl(unsigned int arg, enum rarg op) {
1577:src/xeq.c     **** 	do_rcl(FLASH_REG_BASE + arg, op - RARG_FLRCL + RARG_RCL);
1578:src/xeq.c     **** }
1579:src/xeq.c     **** #endif
ARM GAS  /tmp/cc0UaEmF.s 			page 35


1580:src/xeq.c     **** 
1581:src/xeq.c     **** /* And the complex equivalents for the above.
1582:src/xeq.c     ****  * We pair registers arg & arg+1 to provide a complex number
1583:src/xeq.c     ****  */
1584:src/xeq.c     **** static int storcl_cop(unsigned short opr, int index, decNumber *r1, decNumber *r2, int rev) {
1585:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
1586:src/xeq.c     **** 
1587:src/xeq.c     **** 	getXY(x + 0, x + 1);
1588:src/xeq.c     **** 	getRegister(y + 0, index);
1589:src/xeq.c     **** 	getRegister(y + 1, index + 1);
1590:src/xeq.c     **** 
1591:src/xeq.c     **** 	if (rev) {
1592:src/xeq.c     **** 		x = y;
1593:src/xeq.c     **** 		y = a;
1594:src/xeq.c     **** 	}
1595:src/xeq.c     **** 
1596:src/xeq.c     **** 	switch (opr) {
1597:src/xeq.c     **** 	case 1:
1598:src/xeq.c     **** 		cmplxAdd(r1, r2, y + 0, y + 1, x + 0, x + 1);
1599:src/xeq.c     **** 		break;
1600:src/xeq.c     **** 	case 2:
1601:src/xeq.c     **** 		cmplxSubtract(r1, r2, y + 0, y + 1, x + 0, x + 1);
1602:src/xeq.c     **** 		break;
1603:src/xeq.c     **** 	case 3:
1604:src/xeq.c     **** 		cmplxMultiply(r1, r2, y + 0, y + 1, x + 0, x + 1);
1605:src/xeq.c     **** 		break;
1606:src/xeq.c     **** 	case 4:
1607:src/xeq.c     **** 		cmplxDivide(r1, r2, y + 0, y + 1, x + 0, x + 1);
1608:src/xeq.c     **** 		break;
1609:src/xeq.c     **** 	default:
1610:src/xeq.c     **** 		return 1;
1611:src/xeq.c     **** 	}
1612:src/xeq.c     **** 	return 0;
1613:src/xeq.c     **** }
1614:src/xeq.c     **** 
1615:src/xeq.c     **** 
1616:src/xeq.c     **** void cmdcsto(unsigned int arg, enum rarg op) {
1617:src/xeq.c     **** 	decNumber r1, r2;
1618:src/xeq.c     **** 	REGISTER *t1, *t2;
1619:src/xeq.c     **** 
1620:src/xeq.c     **** 	t1 = get_reg_n(arg);
1621:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
1622:src/xeq.c     **** 
1623:src/xeq.c     **** 	if (op == RARG_CSTO) {
1624:src/xeq.c     **** 		copyreg(t1, StackBase);
1625:src/xeq.c     **** 		copyreg(t2, get_reg_n(regY_idx));
1626:src/xeq.c     **** 	} else {
1627:src/xeq.c     **** 		if (is_intmode())
1628:src/xeq.c     **** 			bad_mode_error();
1629:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CSTO, arg, &r1, &r2, 0))
1630:src/xeq.c     **** 			illegal(op);
1631:src/xeq.c     **** 		else {
1632:src/xeq.c     **** 			setRegister(arg, &r1);
1633:src/xeq.c     **** 			setRegister(arg + 1, &r2);
1634:src/xeq.c     **** 		}
1635:src/xeq.c     **** 	}
1636:src/xeq.c     **** 	set_was_complex();
ARM GAS  /tmp/cc0UaEmF.s 			page 36


1637:src/xeq.c     **** }
1638:src/xeq.c     **** 
1639:src/xeq.c     **** static void do_crcl(int index, enum rarg op) {
1640:src/xeq.c     **** 	decNumber r1, r2;
1641:src/xeq.c     **** 
1642:src/xeq.c     **** 	if (op == RARG_CRCL) {
1643:src/xeq.c     **** 		REGISTER x, y;
1644:src/xeq.c     **** 		copyreg(&x, get_reg_n(index));
1645:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
1646:src/xeq.c     **** 		lift2_if_enabled();
1647:src/xeq.c     **** 		copyreg(StackBase, &x);
1648:src/xeq.c     **** 		copyreg(get_reg_n(regY_idx), &y);
1649:src/xeq.c     **** 	} else {
1650:src/xeq.c     **** 		if (is_intmode())
1651:src/xeq.c     **** 			bad_mode_error();
1652:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CRCL, index, &r1, &r2, 1))
1653:src/xeq.c     **** 			illegal(op);
1654:src/xeq.c     **** 		else {
1655:src/xeq.c     **** 			setlastXY();
1656:src/xeq.c     **** 			setXY(&r1, &r2);
1657:src/xeq.c     **** 		}
1658:src/xeq.c     **** 	}
1659:src/xeq.c     **** 	set_was_complex();
1660:src/xeq.c     **** }
1661:src/xeq.c     **** 
1662:src/xeq.c     **** void cmdcrcl(unsigned int arg, enum rarg op) {
1663:src/xeq.c     **** 	do_crcl(arg, op);
1664:src/xeq.c     **** }
1665:src/xeq.c     **** 
1666:src/xeq.c     **** #ifdef INCLUDE_FLASH_RECALL
1667:src/xeq.c     **** void cmdflashcrcl(unsigned int arg, enum rarg op) {
1668:src/xeq.c     **** 	do_crcl(FLASH_REG_BASE + arg, op - RARG_FLCRCL + RARG_CRCL);
1669:src/xeq.c     **** }
1670:src/xeq.c     **** #endif
1671:src/xeq.c     **** 
1672:src/xeq.c     **** /*
1673:src/xeq.c     ****  *  "Alien" RCL commands to convert registers originally stored in a different format
1674:src/xeq.c     ****  */
1675:src/xeq.c     **** // RCL of an integer value
1676:src/xeq.c     **** void cmdircl(unsigned int arg, enum rarg op) {
1677:src/xeq.c     **** 	if (is_intmode())
1678:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
1679:src/xeq.c     **** 	else
1680:src/xeq.c     **** 		register_from_int(regX_idx, arg, 0);
1681:src/xeq.c     **** }
1682:src/xeq.c     **** 
1683:src/xeq.c     **** // RCL of a single or double precision real value
1684:src/xeq.c     **** void cmdrrcl(unsigned int arg, enum rarg op) {
1685:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
1686:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
1687:src/xeq.c     **** 
1688:src/xeq.c     **** 	if (rcl_dbl && arg >= regX_idx && arg <= regK_idx) {
1689:src/xeq.c     **** 		// dRCL is not valid for lettered registers
1690:src/xeq.c     **** 		report_err(ERR_RANGE);
1691:src/xeq.c     **** 		return;
1692:src/xeq.c     **** 	}
1693:src/xeq.c     **** 
ARM GAS  /tmp/cc0UaEmF.s 			page 37


1694:src/xeq.c     **** 	UState.mode_double = rcl_dbl; // Force reading in requested format
1695:src/xeq.c     **** 	if (is_intmode()) {
1696:src/xeq.c     **** 		int_from_register(regX_idx, arg);
1697:src/xeq.c     **** 		UState.mode_double = was_dbl;
1698:src/xeq.c     **** 	}
1699:src/xeq.c     **** 	else {
1700:src/xeq.c     **** 		decNumber x;
1701:src/xeq.c     **** 		getRegister(&x, arg);
1702:src/xeq.c     **** 
1703:src/xeq.c     **** 		UState.mode_double = was_dbl; // Force access in original mode
1704:src/xeq.c     **** 		setX(&x);
1705:src/xeq.c     **** 	}
1706:src/xeq.c     **** }
1707:src/xeq.c     **** 
1708:src/xeq.c     **** 
1709:src/xeq.c     **** /* SWAP x with the specified register
1710:src/xeq.c     ****  */
1711:src/xeq.c     **** void swap_reg(REGISTER *a, REGISTER *b) {
1712:src/xeq.c     **** 	REGISTER t;
1713:src/xeq.c     **** 
1714:src/xeq.c     **** 	copyreg(&t, a);
1715:src/xeq.c     **** 	copyreg(a, b);
1716:src/xeq.c     **** 	copyreg(b, &t);
1717:src/xeq.c     **** }
1718:src/xeq.c     **** 
1719:src/xeq.c     **** void cmdswap(unsigned int arg, enum rarg op) {
1720:src/xeq.c     **** 	int idx;
1721:src/xeq.c     **** 
1722:src/xeq.c     **** 	if (op == RARG_CSWAPX)
1723:src/xeq.c     **** 		idx = regX_idx;
1724:src/xeq.c     **** 	else if (op == RARG_CSWAPZ)
1725:src/xeq.c     **** 		idx = regZ_idx;
1726:src/xeq.c     **** 	else
1727:src/xeq.c     **** 		idx = regX_idx + (int)(op - RARG_SWAPX);
1728:src/xeq.c     **** 
1729:src/xeq.c     **** 	swap_reg(get_reg_n(idx), get_reg_n(arg));
1730:src/xeq.c     **** 
1731:src/xeq.c     **** 	if (op >= RARG_CSWAPX) {
1732:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
1733:src/xeq.c     **** 		set_was_complex();
1734:src/xeq.c     **** 	}
1735:src/xeq.c     **** }
1736:src/xeq.c     **** 
1737:src/xeq.c     **** 
1738:src/xeq.c     **** /* View a specified register
1739:src/xeq.c     ****  */
1740:src/xeq.c     **** void cmdview(unsigned int arg, enum rarg op) {
1741:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
1742:src/xeq.c     **** 
1743:src/xeq.c     **** 	State2.wascomplex = cmplx;
1744:src/xeq.c     **** 	ShowRegister = arg;
1745:src/xeq.c     **** 	State2.disp_freeze = 0;
1746:src/xeq.c     **** 	display();
1747:src/xeq.c     **** 	State2.disp_freeze = cmplx || Running || arg != regX_idx;
1748:src/xeq.c     **** }
1749:src/xeq.c     **** 
1750:src/xeq.c     **** 
ARM GAS  /tmp/cc0UaEmF.s 			page 38


1751:src/xeq.c     **** /* Get the stack size */
1752:src/xeq.c     **** void get_stack_size(enum nilop op) {
1753:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
1754:src/xeq.c     **** }
1755:src/xeq.c     **** 
1756:src/xeq.c     **** void get_word_size(enum nilop op) {
1757:src/xeq.c     **** 	setX_int_sgn((int)word_size(), 0);
1758:src/xeq.c     **** }
1759:src/xeq.c     **** 
1760:src/xeq.c     **** void get_sign_mode(enum nilop op) {
1761:src/xeq.c     **** 	static const unsigned char modes[4] = {
1762:src/xeq.c     **** 		0x02,		// 2's complement
1763:src/xeq.c     **** 		0x01,		// 1's complement
1764:src/xeq.c     **** 		0x00,		// unsigned
1765:src/xeq.c     **** 		0x81		// sign and mantissa
1766:src/xeq.c     **** 	};
1767:src/xeq.c     **** 	const unsigned char v = modes[(int)int_mode()];
1768:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
1769:src/xeq.c     **** }
1770:src/xeq.c     **** 
1771:src/xeq.c     **** void get_base(enum nilop op) {
1772:src/xeq.c     **** 	setX_int_sgn((int)int_base(), 0);
1773:src/xeq.c     **** }
1774:src/xeq.c     **** 
1775:src/xeq.c     **** #ifdef DM42
1776:src/xeq.c     ****  long int DM42_Ticker () {
1777:src/xeq.c     ****     long int f, t;
1778:src/xeq.c     ****     t = get_rtc_ticks();
1779:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
1780:src/xeq.c     ****     return f;
1781:src/xeq.c     ****  }
1782:src/xeq.c     **** #endif
1783:src/xeq.c     **** /* Get the current ticker value */
1784:src/xeq.c     **** void op_ticks(enum nilop op) {
1785:src/xeq.c     **** #if !defined(CONSOLE)
1786:src/xeq.c     ****     setX_int_sgn(Ticker, 0);
1787:src/xeq.c     **** #else 
1788:src/xeq.c     ****     struct timeval tv;
1789:src/xeq.c     ****     long long int t;
1790:src/xeq.c     ****     gettimeofday(&tv, NULL);
1791:src/xeq.c     ****     t = tv.tv_sec * 10 + tv.tv_usec / 100000;
1792:src/xeq.c     ****     setX_int_sgn(t, 0);
1793:src/xeq.c     **** #endif
1794:src/xeq.c     **** }
1795:src/xeq.c     **** 
1796:src/xeq.c     **** /* Display the battery voltage */
1797:src/xeq.c     **** void op_voltage(enum nilop op) {
1798:src/xeq.c     **** 	decNumber t, u;
1799:src/xeq.c     **** #ifdef REALBUILD
1800:src/xeq.c     **** 	unsigned long long int v = 19 + Voltage;
1801:src/xeq.c     **** #elif defined(DM42)
1802:src/xeq.c     **** 	int v = get_vbat();
1803:src/xeq.c     **** 	v = v / 100;
1804:src/xeq.c     **** #else
1805:src/xeq.c     **** 	unsigned long long int v = 32;
1806:src/xeq.c     **** #endif
1807:src/xeq.c     **** 
ARM GAS  /tmp/cc0UaEmF.s 			page 39


1808:src/xeq.c     **** 	if (is_intmode()) {
1809:src/xeq.c     **** 		setX_int_sgn(v, 0);
1810:src/xeq.c     **** 	} else {
1811:src/xeq.c     **** 		ullint_to_dn(&t, v);
1812:src/xeq.c     **** 		dn_mulpow10(&u, &t, -1);
1813:src/xeq.c     **** 		setX(&u);
1814:src/xeq.c     **** 	}
1815:src/xeq.c     **** }
1816:src/xeq.c     **** 
1817:src/xeq.c     **** /*
1818:src/xeq.c     ****  *  Commands to determine free memory
1819:src/xeq.c     ****  */
1820:src/xeq.c     **** int free_mem(void) {
1821:src/xeq.c     **** 	return RetStkSize + RetStkPtr;
1822:src/xeq.c     **** }
1823:src/xeq.c     **** 
1824:src/xeq.c     **** int free_flash(void) {
1825:src/xeq.c     **** 	return NUMPROG_FLASH_MAX - UserFlash.size;
1826:src/xeq.c     **** }
1827:src/xeq.c     **** 
1828:src/xeq.c     **** void get_mem(enum nilop op) {
1829:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
1830:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
1831:src/xeq.c     **** 		 op == OP_FLASHQ ? free_flash() :
1832:src/xeq.c     **** 		 global_regs(),
1833:src/xeq.c     **** 		 0);
1834:src/xeq.c     **** }
1835:src/xeq.c     **** 
1836:src/xeq.c     **** 
1837:src/xeq.c     **** /* Check if a keystroke is pending in the buffer, if so return it to the specified
1838:src/xeq.c     ****  * register, if not skip the next step.
1839:src/xeq.c     ****  */
1840:src/xeq.c     **** void cmdkeyp(unsigned int arg, enum rarg op) {
1841:src/xeq.c     **** 	int cond = LastKey == 0;
1842:src/xeq.c     **** 	if (!cond) {
1843:src/xeq.c     **** 		int k = LastKey - 1;
1844:src/xeq.c     **** 		LastKey = 0;
1845:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
1846:src/xeq.c     **** 	}
1847:src/xeq.c     **** 	fin_tst(cond);
1848:src/xeq.c     **** }
1849:src/xeq.c     **** 
1850:src/xeq.c     **** /*
1851:src/xeq.c     ****  *  Get a key code from a register and translate it from row/colum to internal
1852:src/xeq.c     ****  *  Check for valid arguments
1853:src/xeq.c     ****  */
1854:src/xeq.c     **** static int get_keycode_from_reg(unsigned int n)
1855:src/xeq.c     **** {
1856:src/xeq.c     **** 	int sgn;
1857:src/xeq.c     **** 	const int c = row_column_to_keycode((int) get_reg_n_int_sgn((int) n, &sgn));
1858:src/xeq.c     **** 	if ( c < 0 )
1859:src/xeq.c     **** 		report_err(ERR_RANGE);
1860:src/xeq.c     **** 	return c;
1861:src/xeq.c     **** }
1862:src/xeq.c     **** 
1863:src/xeq.c     **** /*
1864:src/xeq.c     ****  *  Take a row/column key code and feed it to the keyboard buffer
ARM GAS  /tmp/cc0UaEmF.s 			page 40


1865:src/xeq.c     ****  *  This stops program execution first to make sure, the key is not
1866:src/xeq.c     ****  *  read in by KEY? again.
1867:src/xeq.c     ****  */
1868:src/xeq.c     **** void cmdputkey(unsigned int arg, enum rarg op)
1869:src/xeq.c     **** {
1870:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
1871:src/xeq.c     **** 
1872:src/xeq.c     **** 	if (c >= 0) {
1873:src/xeq.c     **** 		set_running_off();
1874:src/xeq.c     **** 		put_key(c);
1875:src/xeq.c     **** 	}
1876:src/xeq.c     **** }
1877:src/xeq.c     **** 
1878:src/xeq.c     **** /*
1879:src/xeq.c     ****  *  Return the type of the keycode in register n
1880:src/xeq.c     ****  *  returns 0-9 for digits, 10 for ., +/-, EEX, 11 for f,g,h, 12 for all other keys.
1881:src/xeq.c     ****  *  Invalid codes produce an error.
1882:src/xeq.c     ****  */
1883:src/xeq.c     **** void cmdkeytype(unsigned int arg, enum rarg op)
1884:src/xeq.c     **** {
1885:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
1886:src/xeq.c     **** 	if ( c >= 0 ) {
1887:src/xeq.c     **** 		const char types[] = {
1888:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
1889:src/xeq.c     **** 			12, 12, 12, 11, 11, 11,
1890:src/xeq.c     **** 			12, 12, 10, 10, 12, 12,
1891:src/xeq.c     **** 			12,  7,  8,  9, 12, 12,
1892:src/xeq.c     **** 			12,  4,  5,  6, 12, 12,
1893:src/xeq.c     **** 			12,  1,  2,  3, 12, 12,
1894:src/xeq.c     **** 			12,  0, 10, 12, 12 };
1895:src/xeq.c     **** 		lift_if_enabled();
1896:src/xeq.c     **** 		setX_int_sgn(types[c], 0);
1897:src/xeq.c     **** 	}
1898:src/xeq.c     **** }
1899:src/xeq.c     **** 
1900:src/xeq.c     **** 
1901:src/xeq.c     **** /* Check which operating mode we're in -- integer or real -- they both
1902:src/xeq.c     ****  * vector through this routine.
1903:src/xeq.c     ****  */
1904:src/xeq.c     **** void check_mode(enum nilop op) {
1905:src/xeq.c     **** 	const int intmode = is_intmode() ? 1 : 0;
1906:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
1907:src/xeq.c     **** 
1908:src/xeq.c     **** 	fin_tst(intmode == desired);
1909:src/xeq.c     **** }
1910:src/xeq.c     **** 
1911:src/xeq.c     **** 
1912:src/xeq.c     **** /* Check if DBLON is active
1913:src/xeq.c     ****  */
1914:src/xeq.c     **** void check_dblmode(enum nilop op) {
1915:src/xeq.c     **** 	fin_tst(is_dblmode());
1916:src/xeq.c     **** }
1917:src/xeq.c     **** 
1918:src/xeq.c     **** void op_query_xtal(enum nilop op) {
1919:src/xeq.c     **** 	fin_tst(Xtal);
1920:src/xeq.c     **** }
1921:src/xeq.c     **** 
ARM GAS  /tmp/cc0UaEmF.s 			page 41


1922:src/xeq.c     **** void op_query_print(enum nilop op) {
1923:src/xeq.c     **** #ifdef INFRARED
1924:src/xeq.c     **** 	fin_tst(1);
1925:src/xeq.c     **** #else
1926:src/xeq.c     **** 	fin_tst(0);
1927:src/xeq.c     **** #endif
1928:src/xeq.c     **** }
1929:src/xeq.c     **** 
1930:src/xeq.c     **** /* Save and restore the entire stack to sequential registers */
1931:src/xeq.c     **** static int check_stack_overlap(unsigned int arg) {
1932:src/xeq.c     **** 	const int n = stack_size();
1933:src/xeq.c     **** 
1934:src/xeq.c     **** 	if (arg + n <= global_regs() || arg >= NUMREG) {
1935:src/xeq.c     **** 		return n;
1936:src/xeq.c     **** 	}
1937:src/xeq.c     **** 	report_err(ERR_STK_CLASH);
1938:src/xeq.c     **** 	return 0;
1939:src/xeq.c     **** }
1940:src/xeq.c     **** 
1941:src/xeq.c     **** void cmdstostk(unsigned int arg, enum rarg op) {
1942:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
1943:src/xeq.c     **** 
1944:src/xeq.c     **** 	for (i=0; i<n; i++)
1945:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
1946:src/xeq.c     **** }
1947:src/xeq.c     **** 
1948:src/xeq.c     **** void cmdrclstk(unsigned int arg, enum rarg op) {
1949:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
1950:src/xeq.c     **** 
1951:src/xeq.c     **** 	for (i=0; i<n; i++)
1952:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
1953:src/xeq.c     **** }
1954:src/xeq.c     **** 
1955:src/xeq.c     **** 
1956:src/xeq.c     **** /*
1957:src/xeq.c     ****  *  Move up the return stack, skipping any local variables
1958:src/xeq.c     ****  */
1959:src/xeq.c     **** static void retstk_up(void)
1960:src/xeq.c     **** {
 309              		.loc 1 1960 1 is_stmt 1 view -0
 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 0
 312              		@ frame_needed = 0, uses_anonymous_args = 0
 313              		@ link register save eliminated.
1961:src/xeq.c     **** 	if (RetStkPtr < 0) {
 314              		.loc 1 1961 2 view .LVU95
 315              		.loc 1 1961 6 is_stmt 0 view .LVU96
 316 0000 1A4B     		ldr	r3, .L39
1960:src/xeq.c     **** 	if (RetStkPtr < 0) {
 317              		.loc 1 1960 1 view .LVU97
 318 0002 70B4     		push	{r4, r5, r6}
 319              		.cfi_def_cfa_offset 12
 320              		.cfi_offset 4, -12
 321              		.cfi_offset 5, -8
 322              		.cfi_offset 6, -4
 323              		.loc 1 1961 6 view .LVU98
 324 0004 1C68     		ldr	r4, [r3]
ARM GAS  /tmp/cc0UaEmF.s 			page 42


 325 0006 B4F9E227 		ldrsh	r2, [r4, #2018]
 326              		.loc 1 1961 5 view .LVU99
 327 000a 002A     		cmp	r2, #0
 328 000c 01DB     		blt	.L37
 329              	.L27:
1962:src/xeq.c     **** 		int sp = RetStkPtr++;
1963:src/xeq.c     **** 		unsigned int s = RetStk[sp++];
1964:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
1965:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
1966:src/xeq.c     **** 			RetStkPtr = sp;
1967:src/xeq.c     **** 			// Re-adjust the LocalRegs pointer
1968:src/xeq.c     **** 			LocalRegs = 0;
1969:src/xeq.c     **** 			while (sp < 0) {
1970:src/xeq.c     **** 				s = RetStk[sp];
1971:src/xeq.c     **** 				if (isLOCAL(s)) {
1972:src/xeq.c     **** 					LocalRegs = sp;
1973:src/xeq.c     **** 					break;
1974:src/xeq.c     **** 				}
1975:src/xeq.c     **** 				++sp;
1976:src/xeq.c     **** 				if (isHIDDEN(s))
1977:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
1978:src/xeq.c     **** 			}
1979:src/xeq.c     **** 		}
1980:src/xeq.c     **** 	}
1981:src/xeq.c     **** }
 330              		.loc 1 1981 1 view .LVU100
 331 000e 70BC     		pop	{r4, r5, r6}
 332              		.cfi_remember_state
 333              		.cfi_restore 6
 334              		.cfi_restore 5
 335              		.cfi_restore 4
 336              		.cfi_def_cfa_offset 0
 337 0010 7047     		bx	lr
 338              	.L37:
 339              		.cfi_restore_state
 340              	.LBB1314:
1962:src/xeq.c     **** 		int sp = RetStkPtr++;
 341              		.loc 1 1962 3 is_stmt 1 view .LVU101
1963:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 342              		.loc 1 1963 26 is_stmt 0 view .LVU102
 343 0012 174B     		ldr	r3, .L39+4
1962:src/xeq.c     **** 		int sp = RetStkPtr++;
 344              		.loc 1 1962 21 view .LVU103
 345 0014 511C     		adds	r1, r2, #1
1963:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 346              		.loc 1 1963 26 view .LVU104
 347 0016 1D68     		ldr	r5, [r3]
1962:src/xeq.c     **** 		int sp = RetStkPtr++;
 348              		.loc 1 1962 21 view .LVU105
 349 0018 A4F8E217 		strh	r1, [r4, #2018]	@ movhi
 350              	.LVL26:
1963:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 351              		.loc 1 1963 3 is_stmt 1 view .LVU106
1963:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 352              		.loc 1 1963 26 is_stmt 0 view .LVU107
 353 001c 35F81230 		ldrh	r3, [r5, r2, lsl #1]
 354              	.LVL27:
ARM GAS  /tmp/cc0UaEmF.s 			page 43


1964:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
 355              		.loc 1 1964 3 is_stmt 1 view .LVU108
1964:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
 356              		.loc 1 1964 7 is_stmt 0 view .LVU109
 357 0020 1A0B     		lsrs	r2, r3, #12
 358              	.LVL28:
1964:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
 359              		.loc 1 1964 6 view .LVU110
 360 0022 22F00202 		bic	r2, r2, #2
 361 0026 012A     		cmp	r2, #1
 362 0028 F1D1     		bne	.L27
1965:src/xeq.c     **** 			RetStkPtr = sp;
 363              		.loc 1 1965 4 is_stmt 1 view .LVU111
1965:src/xeq.c     **** 			RetStkPtr = sp;
 364              		.loc 1 1965 10 is_stmt 0 view .LVU112
 365 002a C3F30B03 		ubfx	r3, r3, #0, #12
 366              	.LVL29:
1965:src/xeq.c     **** 			RetStkPtr = sp;
 367              		.loc 1 1965 7 view .LVU113
 368 002e 0B44     		add	r3, r3, r1
 369              	.LVL30:
1966:src/xeq.c     **** 			// Re-adjust the LocalRegs pointer
 370              		.loc 1 1966 4 is_stmt 1 view .LVU114
1968:src/xeq.c     **** 			while (sp < 0) {
 371              		.loc 1 1968 14 is_stmt 0 view .LVU115
 372 0030 0022     		movs	r2, #0
1966:src/xeq.c     **** 			// Re-adjust the LocalRegs pointer
 373              		.loc 1 1966 14 view .LVU116
 374 0032 A4F8E237 		strh	r3, [r4, #2018]	@ movhi
 375              	.LVL31:
1968:src/xeq.c     **** 			while (sp < 0) {
 376              		.loc 1 1968 4 is_stmt 1 view .LVU117
1968:src/xeq.c     **** 			while (sp < 0) {
 377              		.loc 1 1968 14 is_stmt 0 view .LVU118
 378 0036 A4F8DE27 		strh	r2, [r4, #2014]	@ movhi
1969:src/xeq.c     **** 				s = RetStk[sp];
 379              		.loc 1 1969 4 is_stmt 1 view .LVU119
 380 003a 6FF00046 		mvn	r6, #-2147483648
 381              	.L31:
1969:src/xeq.c     **** 				s = RetStk[sp];
 382              		.loc 1 1969 4 is_stmt 0 view .LVU120
 383 003e 9919     		adds	r1, r3, r6
 384 0040 05EB4101 		add	r1, r5, r1, lsl #1
 385 0044 03E0     		b	.L33
 386              	.LVL32:
 387              	.L32:
1976:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
 388              		.loc 1 1976 8 view .LVU121
 389 0046 032A     		cmp	r2, #3
1975:src/xeq.c     **** 				if (isHIDDEN(s))
 390              		.loc 1 1975 5 view .LVU122
 391 0048 03F10103 		add	r3, r3, #1
 392              	.LVL33:
1976:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
 393              		.loc 1 1976 5 is_stmt 1 view .LVU123
1976:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
 394              		.loc 1 1976 8 is_stmt 0 view .LVU124
ARM GAS  /tmp/cc0UaEmF.s 			page 44


 395 004c 0AD0     		beq	.L38
 396              	.LVL34:
 397              	.L33:
1970:src/xeq.c     **** 				if (isLOCAL(s)) {
 398              		.loc 1 1970 5 is_stmt 1 view .LVU125
1975:src/xeq.c     **** 				if (isHIDDEN(s))
 399              		.loc 1 1975 5 view .LVU126
1969:src/xeq.c     **** 				s = RetStk[sp];
 400              		.loc 1 1969 10 view .LVU127
 401 004e 002B     		cmp	r3, #0
 402 0050 DDDA     		bge	.L27
1970:src/xeq.c     **** 				if (isLOCAL(s)) {
 403              		.loc 1 1970 15 is_stmt 0 view .LVU128
 404 0052 31F8020F 		ldrh	r0, [r1, #2]!
 405              	.LVL35:
1971:src/xeq.c     **** 					LocalRegs = sp;
 406              		.loc 1 1971 5 is_stmt 1 view .LVU129
1971:src/xeq.c     **** 					LocalRegs = sp;
 407              		.loc 1 1971 9 is_stmt 0 view .LVU130
 408 0056 020B     		lsrs	r2, r0, #12
1971:src/xeq.c     **** 					LocalRegs = sp;
 409              		.loc 1 1971 8 view .LVU131
 410 0058 012A     		cmp	r2, #1
 411 005a F4D1     		bne	.L32
1972:src/xeq.c     **** 					break;
 412              		.loc 1 1972 6 is_stmt 1 view .LVU132
1972:src/xeq.c     **** 					break;
 413              		.loc 1 1972 16 is_stmt 0 view .LVU133
 414 005c A4F8DE37 		strh	r3, [r4, #2014]	@ movhi
1973:src/xeq.c     **** 				}
 415              		.loc 1 1973 6 is_stmt 1 view .LVU134
 416              	.LBE1314:
 417              		.loc 1 1981 1 is_stmt 0 view .LVU135
 418 0060 70BC     		pop	{r4, r5, r6}
 419              		.cfi_remember_state
 420              		.cfi_restore 6
 421              		.cfi_restore 5
 422              		.cfi_restore 4
 423              		.cfi_def_cfa_offset 0
 424 0062 7047     		bx	lr
 425              	.L38:
 426              		.cfi_restore_state
 427              	.LBB1315:
1977:src/xeq.c     **** 			}
 428              		.loc 1 1977 6 is_stmt 1 view .LVU136
1977:src/xeq.c     **** 			}
 429              		.loc 1 1977 12 is_stmt 0 view .LVU137
 430 0064 C0F30B00 		ubfx	r0, r0, #0, #12
 431              	.LVL36:
1977:src/xeq.c     **** 			}
 432              		.loc 1 1977 9 view .LVU138
 433 0068 0344     		add	r3, r3, r0
 434              	.LVL37:
1977:src/xeq.c     **** 			}
 435              		.loc 1 1977 9 view .LVU139
 436 006a E8E7     		b	.L31
 437              	.L40:
ARM GAS  /tmp/cc0UaEmF.s 			page 45


 438              		.align	2
 439              	.L39:
 440 006c 00000000 		.word	main_ram
 441 0070 00000000 		.word	RetStk
 442              	.LBE1315:
 443              		.cfi_endproc
 444              	.LFE146:
 446              		.section	.text.flag_word,"ax",%progbits
 447              		.align	1
 448              		.p2align 2,,3
 449              		.syntax unified
 450              		.thumb
 451              		.thumb_func
 452              		.fpu fpv4-sp-d16
 454              	flag_word:
 455              	.LVL38:
 456              	.LFB193:
1982:src/xeq.c     **** 
1983:src/xeq.c     **** 
1984:src/xeq.c     **** /* Search from the given position for the specified numeric label.
1985:src/xeq.c     ****  */
1986:src/xeq.c     **** unsigned int find_opcode_from(unsigned int pc, const opcode l, const int flags) {
1987:src/xeq.c     **** 	unsigned short int top;
1988:src/xeq.c     **** 	int count;
1989:src/xeq.c     **** 	const int endp = flags & FIND_OP_ENDS;
1990:src/xeq.c     **** 	const int errp = flags & FIND_OP_ERROR;
1991:src/xeq.c     **** 
1992:src/xeq.c     **** 	count = 1 + find_section_bounds(pc, endp, &top);
1993:src/xeq.c     **** 	count -= top;
1994:src/xeq.c     **** 	while (count--) {
1995:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
1996:src/xeq.c     **** 		// If we don't find the label, we may search a little too far if many double word
1997:src/xeq.c     **** 		// instructions are in the code, but this doesn't do any harm.
1998:src/xeq.c     **** 		if (getprog(pc) == l)
1999:src/xeq.c     **** 			return pc;
2000:src/xeq.c     **** 		pc = do_inc(pc, endp);
2001:src/xeq.c     **** 	}
2002:src/xeq.c     **** 	if (errp)
2003:src/xeq.c     **** 		report_err(ERR_NO_LBL);
2004:src/xeq.c     **** 	return 0;
2005:src/xeq.c     **** }
2006:src/xeq.c     **** 
2007:src/xeq.c     **** 
2008:src/xeq.c     **** unsigned int find_label_from(unsigned int pc, unsigned int arg, int flags) {
2009:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
2010:src/xeq.c     **** }
2011:src/xeq.c     **** 
2012:src/xeq.c     **** 
2013:src/xeq.c     **** 
2014:src/xeq.c     **** /* Handle a GTO/GSB instruction
2015:src/xeq.c     ****  */
2016:src/xeq.c     **** static void gsbgto(unsigned int pc, int gsb, unsigned int oldpc) {
2017:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
2018:src/xeq.c     **** 	raw_set_pc(pc);
2019:src/xeq.c     **** 	if (gsb) {
2020:src/xeq.c     **** 		if (!Running && !XromRunning) {
2021:src/xeq.c     **** 			// XEQ or hot key from keyboard
ARM GAS  /tmp/cc0UaEmF.s 			page 46


2022:src/xeq.c     **** 			clrretstk();
2023:src/xeq.c     **** 			set_running_on();
2024:src/xeq.c     **** 			if (! isXROM(pc) && ProgBegin != old_begin)
2025:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
2026:src/xeq.c     **** 				oldpc = pc;
2027:src/xeq.c     **** 		}
2028:src/xeq.c     **** 		if (-RetStkPtr >= (XromFlags.xIN ? XROM_RET_STACK_SIZE : RetStkSize)) {
2029:src/xeq.c     **** 			// Stack is full
2030:src/xeq.c     **** 			report_err(ERR_RAM_FULL);
2031:src/xeq.c     **** 			// clrretstk();
2032:src/xeq.c     **** 		}
2033:src/xeq.c     **** 		else {
2034:src/xeq.c     **** 			// Push PC on return stack
2035:src/xeq.c     **** 			RetStk[--RetStkPtr] = oldpc;
2036:src/xeq.c     **** 		}
2037:src/xeq.c     **** 	}
2038:src/xeq.c     **** }
2039:src/xeq.c     **** 
2040:src/xeq.c     **** // Handle a RTN
2041:src/xeq.c     **** static void do_rtn(int plus1) {
2042:src/xeq.c     **** 	unsigned short pc;
2043:src/xeq.c     **** 
2044:src/xeq.c     **** 	if (RetStkPtr >= 0) {
2045:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
2046:src/xeq.c     **** 		clrretstk();
2047:src/xeq.c     **** 		raw_set_pc(ProgBegin);
2048:src/xeq.c     **** 	}
2049:src/xeq.c     **** 	else {
2050:src/xeq.c     **** 		// Normal RTN within program
2051:src/xeq.c     **** 		// Pop any LOCALS off the stack, increment sp
2052:src/xeq.c     **** 		retstk_up();
2053:src/xeq.c     **** 		pc = RetStk[RetStkPtr - 1];
2054:src/xeq.c     **** 		raw_set_pc(pc);
2055:src/xeq.c     **** 		// If RTN+1 inc PC unless a POPUSR command or the program end would be skipped
2056:src/xeq.c     **** 		if (plus1 && getprog(pc) != (OP_NIL | OP_POPUSR))
2057:src/xeq.c     **** 			if (incpc())
2058:src/xeq.c     **** 				decpc();
2059:src/xeq.c     **** 	}
2060:src/xeq.c     **** 	if (RetStkPtr == 0) {
2061:src/xeq.c     **** 		// RTN with empty stack stops
2062:src/xeq.c     **** 		set_running_off();
2063:src/xeq.c     **** 	}
2064:src/xeq.c     **** }
2065:src/xeq.c     **** 
2066:src/xeq.c     **** // RTN and RTN+1
2067:src/xeq.c     **** void op_rtn(enum nilop op) {
2068:src/xeq.c     **** 	if (! Running && ! XromRunning) {
2069:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
2070:src/xeq.c     **** 		clrretstk_pc();
2071:src/xeq.c     **** 	}
2072:src/xeq.c     **** 	else
2073:src/xeq.c     **** 		do_rtn(op == OP_RTNp1 ? 1 : 0);
2074:src/xeq.c     **** }
2075:src/xeq.c     **** 
2076:src/xeq.c     **** 
2077:src/xeq.c     **** // Called by XEQ, GTO and CAT browser
2078:src/xeq.c     **** void cmdgtocommon(int gsb, unsigned int pc) {
ARM GAS  /tmp/cc0UaEmF.s 			page 47


2079:src/xeq.c     **** 	if (pc == 0)
2080:src/xeq.c     **** 		set_running_off();
2081:src/xeq.c     **** 	else
2082:src/xeq.c     **** 		gsbgto(pc, gsb, state_pc());
2083:src/xeq.c     **** }
2084:src/xeq.c     **** 
2085:src/xeq.c     **** 
2086:src/xeq.c     **** // Common part of XEQUSR and XEQ'...' from XROM
2087:src/xeq.c     **** // Command pushes 4 values on stack, needs to be followed by POPUSR
2088:src/xeq.c     **** static void usergsb_common(unsigned short int target) {
2089:src/xeq.c     **** 	const unsigned int pc = state_pc();
2090:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
2091:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
2092:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
2093:src/xeq.c     **** 	gsbgto(target, 1, pc);		     // Push return address, transfer control
2094:src/xeq.c     **** 
2095:src/xeq.c     **** 	XromUserPc = 0;			     // Hide information irrelevant to user code
2096:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
2097:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
2098:src/xeq.c     **** 	if (! Running)
2099:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
2100:src/xeq.c     **** 	watchdog();			     // Just for safety. Shouldn't be needed.
2101:src/xeq.c     **** }
2102:src/xeq.c     **** 
2103:src/xeq.c     **** 
2104:src/xeq.c     **** // XEQUSR
2105:src/xeq.c     **** // Command fills the stack and calls the user's code.
2106:src/xeq.c     **** // Needs to be followed by POPUSR
2107:src/xeq.c     **** void do_usergsb(enum nilop op) {
2108:src/xeq.c     **** 	usergsb_common(XromUserPc);
2109:src/xeq.c     ****         fill(OP_FILL);
2110:src/xeq.c     **** }
2111:src/xeq.c     **** 
2112:src/xeq.c     **** 
2113:src/xeq.c     **** // POPUSR
2114:src/xeq.c     **** void op_popusr(enum nilop op) {
2115:src/xeq.c     **** 	UserLocalRegs = RetStk[RetStkPtr++]; // Previous local registers
2116:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
2117:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
2118:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
2119:src/xeq.c     **** }
2120:src/xeq.c     **** 
2121:src/xeq.c     **** /* Tests if the user program is at the top level */
2122:src/xeq.c     **** void isTop(enum nilop op) {
2123:src/xeq.c     **** 	int top = 0;
2124:src/xeq.c     **** 
2125:src/xeq.c     **** 	if (Running) {
2126:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
2127:src/xeq.c     **** 	}
2128:src/xeq.c     **** 	fin_tst(top);
2129:src/xeq.c     **** }
2130:src/xeq.c     **** 
2131:src/xeq.c     **** 
2132:src/xeq.c     **** // LBL?
2133:src/xeq.c     **** void cmdlblp(unsigned int arg, enum rarg op) {
2134:src/xeq.c     **** 	fin_tst(find_label_from(state_pc(), arg, FIND_OP_ENDS) != 0);
2135:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 48


2136:src/xeq.c     **** 
2137:src/xeq.c     **** 
2138:src/xeq.c     **** void cmdgto(unsigned int arg, enum rarg op) {
2139:src/xeq.c     **** 	unsigned int lbl;
2140:src/xeq.c     **** 	if (is_xrom())
2141:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
2142:src/xeq.c     **** 	else
2143:src/xeq.c     **** 		lbl = find_label_from(state_pc(), arg, FIND_OP_ERROR | FIND_OP_ENDS);
2144:src/xeq.c     **** 	cmdgtocommon(op != RARG_GTO, lbl);
2145:src/xeq.c     **** }
2146:src/xeq.c     **** 
2147:src/xeq.c     **** unsigned int findmultilbl(const opcode o, int flags) {
2148:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
2149:src/xeq.c     **** 	unsigned int lbl;
2150:src/xeq.c     **** 
2151:src/xeq.c     **** 	lbl = find_opcode_from(0, dest, 0);					// RAM
2152:src/xeq.c     **** 	if (lbl == 0)
2153:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_LIBRARY), dest, 0);	// Library
2154:src/xeq.c     **** 	if (lbl == 0)
2155:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_BACKUP), dest, 0);	// Backup
2156:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
2157:src/xeq.c     **** 		report_err(ERR_NO_LBL);
2158:src/xeq.c     **** 	return lbl;
2159:src/xeq.c     **** }
2160:src/xeq.c     **** 
2161:src/xeq.c     **** // LBL?'...'
2162:src/xeq.c     **** void cmdmultilblp(const opcode o, enum multiops mopr) {
2163:src/xeq.c     **** 	fin_tst(findmultilbl(o, 0) != 0);
2164:src/xeq.c     **** }
2165:src/xeq.c     **** 
2166:src/xeq.c     **** void cmdmultigto(const opcode o, enum multiops mopr) {
2167:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
2168:src/xeq.c     **** 		// In XROM the command behaves differently!
2169:src/xeq.c     **** 		unsigned short int target = findmultilbl(o, 0);
2170:src/xeq.c     **** 		if (target != 0)
2171:src/xeq.c     **** 			usergsb_common(target); 
2172:src/xeq.c     **** 		else
2173:src/xeq.c     **** 			incpc();
2174:src/xeq.c     **** 	}
2175:src/xeq.c     **** 	else {
2176:src/xeq.c     **** 		cmdgtocommon(mopr != DBL_GTO, findmultilbl(o, FIND_OP_ERROR));
2177:src/xeq.c     **** 	}
2178:src/xeq.c     **** }
2179:src/xeq.c     **** 
2180:src/xeq.c     **** static void branchtoalpha(int is_gsb, char buf[]) {
2181:src/xeq.c     **** 	unsigned int op;
2182:src/xeq.c     **** 
2183:src/xeq.c     **** 	op = OP_DBL + (DBL_LBL << DBL_SHIFT);
2184:src/xeq.c     **** 	op |= buf[0] & 0xff;
2185:src/xeq.c     **** 	op |= (buf[1] & 0xff) << 16;
2186:src/xeq.c     **** 	op |= (buf[2] & 0xff) << 24;
2187:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
2188:src/xeq.c     **** }
2189:src/xeq.c     **** 
2190:src/xeq.c     **** void cmdalphagto(unsigned int arg, enum rarg op) {
2191:src/xeq.c     **** 	char buf[14];
2192:src/xeq.c     **** 
ARM GAS  /tmp/cc0UaEmF.s 			page 49


2193:src/xeq.c     **** 	xset(buf, '\0', sizeof(buf));
2194:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
2195:src/xeq.c     **** }
2196:src/xeq.c     **** 
2197:src/xeq.c     **** static void do_branchalpha(int is_gsb) {
2198:src/xeq.c     **** 	char buf[4];
2199:src/xeq.c     **** 
2200:src/xeq.c     **** 	xcopy(buf, Alpha, 3);
2201:src/xeq.c     **** 	buf[3] = '\0';
2202:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
2203:src/xeq.c     **** }
2204:src/xeq.c     **** 
2205:src/xeq.c     **** void op_gtoalpha(enum nilop op) {
2206:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
2207:src/xeq.c     **** }
2208:src/xeq.c     **** 
2209:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
2210:src/xeq.c     **** int get_dispmode_digs(int *pdigs)
2211:src/xeq.c     **** {
2212:src/xeq.c     **** 	int dispmode = UState.dispmode;
2213:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
2214:src/xeq.c     **** 
2215:src/xeq.c     **** 	if (dispdigs >= 12) {
2216:src/xeq.c     **** 		dispdigs -= 12;
2217:src/xeq.c     **** 		dispmode += 4;
2218:src/xeq.c     **** 		if (dispmode >= 6) {
2219:src/xeq.c     **** 			dispmode -= 2;
2220:src/xeq.c     **** 			dispdigs += 4;
2221:src/xeq.c     **** 		}
2222:src/xeq.c     **** 	}
2223:src/xeq.c     **** 	*pdigs = dispdigs;
2224:src/xeq.c     **** 	return dispmode;
2225:src/xeq.c     **** }
2226:src/xeq.c     **** 
2227:src/xeq.c     **** void set_dispmode_digs(int dispmode, int dispdigs)
2228:src/xeq.c     **** {
2229:src/xeq.c     **** 	if (dispmode >= 4) {
2230:src/xeq.c     **** 		dispmode -= 4;
2231:src/xeq.c     **** 		dispdigs += 12;
2232:src/xeq.c     **** 		if (dispdigs >= 16) {
2233:src/xeq.c     **** 			dispdigs -= 4;
2234:src/xeq.c     **** 			dispmode += 2;
2235:src/xeq.c     **** 		}
2236:src/xeq.c     **** 	}
2237:src/xeq.c     **** 	UState.dispmode = dispmode;
2238:src/xeq.c     **** 	UState.dispdigs = dispdigs;
2239:src/xeq.c     **** }
2240:src/xeq.c     **** #endif
2241:src/xeq.c     **** 
2242:src/xeq.c     **** void cmddisp(unsigned int arg, enum rarg op) {
2243:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
2244:src/xeq.c     **** 	int dispdigs;
2245:src/xeq.c     **** 	int dispmode = get_dispmode_digs(&dispdigs);
2246:src/xeq.c     **** #ifdef DM42
2247:src/xeq.c     **** 	switch (op) {
2248:src/xeq.c     **** 	case RARG_STD:
2249:src/xeq.c     **** 	  dispmode = MODE_STD;
ARM GAS  /tmp/cc0UaEmF.s 			page 50


2250:src/xeq.c     **** 	  break;
2251:src/xeq.c     **** 	case RARG_FIX:
2252:src/xeq.c     **** 	  dispmode = MODE_FIX;
2253:src/xeq.c     **** 	  break;
2254:src/xeq.c     **** 	case RARG_SCI:
2255:src/xeq.c     **** 	  dispmode = MODE_SCI;
2256:src/xeq.c     **** 	  break;
2257:src/xeq.c     **** 	case RARG_ENG:
2258:src/xeq.c     **** 	  dispmode = MODE_ENG;
2259:src/xeq.c     **** 	  break;
2260:src/xeq.c     **** 	case RARG_SIG:
2261:src/xeq.c     **** 	  dispmode = MODE_SIG;
2262:src/xeq.c     **** 	  break;
2263:src/xeq.c     **** 	case RARG_SIG0:
2264:src/xeq.c     **** 	  dispmode = MODE_SIG0;
2265:src/xeq.c     **** 	  break;
2266:src/xeq.c     **** 	default:;
2267:src/xeq.c     **** 	}
2268:src/xeq.c     **** 	if ((dispmode == MODE_SIG || dispmode == MODE_SIG0) && arg >= 8) {
2269:src/xeq.c     **** 	  report_err(ERR_RANGE);
2270:src/xeq.c     **** 	  return;
2271:src/xeq.c     **** 	}
2272:src/xeq.c     **** #else	
2273:src/xeq.c     **** 	if (op != RARG_DISP)
2274:src/xeq.c     **** 		dispmode = (op - RARG_STD) + MODE_STD;
2275:src/xeq.c     **** 	else if ((dispmode == MODE_SIG || dispmode == MODE_SIG0) && arg >= 8) {
2276:src/xeq.c     **** 		report_err(ERR_RANGE);
2277:src/xeq.c     **** 		return;
2278:src/xeq.c     **** 	}
2279:src/xeq.c     **** #endif
2280:src/xeq.c     **** 	set_dispmode_digs(dispmode, arg);
2281:src/xeq.c     **** #else
2282:src/xeq.c     **** 	UState.dispdigs = arg;
2283:src/xeq.c     **** 	if (op != RARG_DISP)
2284:src/xeq.c     **** 		UState.dispmode = (op - RARG_STD) + MODE_STD;
2285:src/xeq.c     **** #endif
2286:src/xeq.c     **** 	op_float(OP_FLOAT);
2287:src/xeq.c     **** }
2288:src/xeq.c     **** 
2289:src/xeq.c     **** 
2290:src/xeq.c     **** /* Metric / Imperial conversion code */
2291:src/xeq.c     **** decNumber *convC2F(decNumber *r, const decNumber *x) {
2292:src/xeq.c     **** 	decNumber s;
2293:src/xeq.c     **** 
2294:src/xeq.c     **** 	dn_multiply(&s, x, &const_9on5);
2295:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
2296:src/xeq.c     **** }
2297:src/xeq.c     **** 
2298:src/xeq.c     **** decNumber *convF2C(decNumber *r, const decNumber *x) {
2299:src/xeq.c     **** 	decNumber s;
2300:src/xeq.c     **** 
2301:src/xeq.c     **** 	dn_subtract(&s, x, &const_32);
2302:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
2303:src/xeq.c     **** }
2304:src/xeq.c     **** 
2305:src/xeq.c     **** decNumber *convDB2AR(decNumber *r, const decNumber *x) {
2306:src/xeq.c     **** 	decNumber t;
ARM GAS  /tmp/cc0UaEmF.s 			page 51


2307:src/xeq.c     **** 	dn_multiply(&t, x, &const_0_05);
2308:src/xeq.c     **** 	return decNumberPow10(r, &t);
2309:src/xeq.c     **** }
2310:src/xeq.c     **** 
2311:src/xeq.c     **** decNumber *convAR2DB(decNumber *r, const decNumber *x) {
2312:src/xeq.c     **** 	decNumber t;
2313:src/xeq.c     **** 	dn_log10(&t, x);
2314:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
2315:src/xeq.c     **** }
2316:src/xeq.c     **** 
2317:src/xeq.c     **** decNumber *convDB2PR(decNumber *r, const decNumber *x) {
2318:src/xeq.c     **** 	decNumber t;
2319:src/xeq.c     **** 	dn_mulpow10(&t, x, -1);
2320:src/xeq.c     **** 	return decNumberPow10(r, &t);
2321:src/xeq.c     **** }
2322:src/xeq.c     **** 
2323:src/xeq.c     **** decNumber *convPR2DB(decNumber *r, const decNumber *x) {
2324:src/xeq.c     **** 	decNumber t;
2325:src/xeq.c     **** 	dn_log10(&t, x);
2326:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
2327:src/xeq.c     **** }
2328:src/xeq.c     **** 
2329:src/xeq.c     **** /* Scale conversions */
2330:src/xeq.c     **** void do_conv(decNumber *r, unsigned int arg, const decNumber *x) {
2331:src/xeq.c     **** 	decNumber m;
2332:src/xeq.c     **** 	const unsigned int conv = arg / 2;
2333:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
2334:src/xeq.c     **** 
2335:src/xeq.c     **** 	if (conv > NUM_CONSTS_CONV) {
2336:src/xeq.c     **** 		decNumberCopy(r, x);
2337:src/xeq.c     **** 		return;
2338:src/xeq.c     **** 	}
2339:src/xeq.c     **** 
2340:src/xeq.c     **** 	decimal64ToNumber(&CONSTANT_CONV(conv), &m);
2341:src/xeq.c     **** 
2342:src/xeq.c     **** 	if (dirn == 0)		// metric to imperial
2343:src/xeq.c     **** 		dn_divide(r, x, &m);
2344:src/xeq.c     **** 	else			// imperial to metric
2345:src/xeq.c     **** 		dn_multiply(r, x, &m);
2346:src/xeq.c     **** }
2347:src/xeq.c     **** 
2348:src/xeq.c     **** void cmdconv(unsigned int arg, enum rarg op) {
2349:src/xeq.c     **** 	decNumber x, r;
2350:src/xeq.c     **** 
2351:src/xeq.c     **** 	if (is_intmode())
2352:src/xeq.c     **** 		return;
2353:src/xeq.c     **** 
2354:src/xeq.c     **** 	getX(&x);
2355:src/xeq.c     **** 	do_conv(&r, arg, &x);
2356:src/xeq.c     **** 	setlastX();
2357:src/xeq.c     **** 	setX(&r);
2358:src/xeq.c     **** }
2359:src/xeq.c     **** 
2360:src/xeq.c     **** /*  Finish up a test -- if the value is non-zero, the test passes.
2361:src/xeq.c     ****  *  If it is zero, the test fails.
2362:src/xeq.c     ****  */
2363:src/xeq.c     **** void fin_tst(const int a) {
ARM GAS  /tmp/cc0UaEmF.s 			page 52


2364:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
2365:src/xeq.c     **** 	if (Running || XromRunning) {
2366:src/xeq.c     **** 		if (! a && incpc())
2367:src/xeq.c     **** 			decpc();
2368:src/xeq.c     **** 	}
2369:src/xeq.c     **** 	else
2370:src/xeq.c     **** 		DispMsg = msg;
2371:src/xeq.c     **** #ifdef INFRARED
2372:src/xeq.c     **** 	if (Tracing) {
2373:src/xeq.c     **** 		print_justified( msg );
2374:src/xeq.c     **** 		Tracing = 0;
2375:src/xeq.c     **** 	}
2376:src/xeq.c     **** #endif
2377:src/xeq.c     **** }
2378:src/xeq.c     **** 
2379:src/xeq.c     **** 
2380:src/xeq.c     **** /* Skip a number of instructions forwards */
2381:src/xeq.c     **** void cmdskip(unsigned int arg, enum rarg op) {
2382:src/xeq.c     **** 	const unsigned int origpc = state_pc();
2383:src/xeq.c     **** 	unsigned int pc;
2384:src/xeq.c     **** 
2385:src/xeq.c     **** 	if (op == RARG_CASE) {
2386:src/xeq.c     **** 		int sgn;
2387:src/xeq.c     **** 		arg = (int) get_reg_n_int_sgn((int) arg, &sgn);
2388:src/xeq.c     **** 		if (sgn || arg >= 100) {
2389:src/xeq.c     **** 			report_err(ERR_RANGE);
2390:src/xeq.c     **** 			return;
2391:src/xeq.c     **** 		}
2392:src/xeq.c     **** 	}
2393:src/xeq.c     **** 
2394:src/xeq.c     **** 	if (isXROM(origpc))
2395:src/xeq.c     **** 		pc = origpc + arg;
2396:src/xeq.c     **** 	else {
2397:src/xeq.c     **** 		while (arg-- && !incpc());
2398:src/xeq.c     **** 		if (PcWrapped) {
2399:src/xeq.c     **** 			report_err(ERR_RANGE);
2400:src/xeq.c     **** 		}
2401:src/xeq.c     **** 		pc = state_pc();
2402:src/xeq.c     **** 	}
2403:src/xeq.c     **** 	gsbgto(pc, op == RARG_BSF, origpc);
2404:src/xeq.c     **** }
2405:src/xeq.c     **** 
2406:src/xeq.c     **** /* Skip backwards */
2407:src/xeq.c     **** void cmdback(unsigned int arg, enum rarg op) {
2408:src/xeq.c     **** 	const unsigned int origpc = state_pc();
2409:src/xeq.c     **** 	unsigned int pc = origpc;
2410:src/xeq.c     **** 
2411:src/xeq.c     **** 	if (isXROM(origpc))
2412:src/xeq.c     **** 		pc -= arg + 1;
2413:src/xeq.c     ****         else if (arg) {
2414:src/xeq.c     **** 		if ( Running ) {
2415:src/xeq.c     **** 			// Handles the case properly that we are on last step
2416:src/xeq.c     **** 			pc = do_dec(pc, 1);
2417:src/xeq.c     **** 		}
2418:src/xeq.c     **** 		do {
2419:src/xeq.c     **** 			pc = do_dec(pc, 1);
2420:src/xeq.c     **** 		} while (--arg && !PcWrapped);
ARM GAS  /tmp/cc0UaEmF.s 			page 53


2421:src/xeq.c     **** 		if (PcWrapped) {
2422:src/xeq.c     **** 			report_err(ERR_RANGE);
2423:src/xeq.c     **** 			return;
2424:src/xeq.c     **** 		}
2425:src/xeq.c     **** 	}
2426:src/xeq.c     **** 	gsbgto(pc, op == RARG_BSB, origpc);
2427:src/xeq.c     **** }
2428:src/xeq.c     **** 
2429:src/xeq.c     **** 
2430:src/xeq.c     **** /* Append a character to the command line
2431:src/xeq.c     ****  */
2432:src/xeq.c     **** static void append_cmdline(char c) {
2433:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
2434:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
2435:src/xeq.c     **** }
2436:src/xeq.c     **** 
2437:src/xeq.c     **** /* Make sure exponent stays within allowed limits.
2438:src/xeq.c     ****  * was_digit_entered: 0: sign was changed
2439:src/xeq.c     ****  *                    1: new digit was entered
2440:src/xeq.c     ****  */
2441:src/xeq.c     **** static void exponent_adjusted(int was_digit_entered)
2442:src/xeq.c     **** {
2443:src/xeq.c     **** 	const int dbl = is_dblmode();
2444:src/xeq.c     **** 	int i;
2445:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DC == -1
2446:src/xeq.c     **** 	const int neg_type_dc = get_reg_n_int_sgn(0, &i);
2447:src/xeq.c     **** #else
2448:src/xeq.c     **** 	const int neg_type_dc = SP_NEG_EXP_ENTRY_TYPE_DC;
2449:src/xeq.c     **** #endif
2450:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_LIMIT_DC == -1
2451:src/xeq.c     **** 	const int neg_lim_dc = get_reg_n_int_sgn(1, &i);
2452:src/xeq.c     **** #else
2453:src/xeq.c     **** 	const int neg_lim_dc = SP_NEG_EXP_ENTRY_LIMIT_DC;
2454:src/xeq.c     **** #endif
2455:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DS == -1
2456:src/xeq.c     **** 	const int neg_type_ds = get_reg_n_int_sgn(2, &i);
2457:src/xeq.c     **** #else
2458:src/xeq.c     **** 	const int neg_type_ds = SP_NEG_EXP_ENTRY_TYPE_DS;
2459:src/xeq.c     **** #endif
2460:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_LIMIT_DS == -1
2461:src/xeq.c     **** 	const int neg_lim_ds = get_reg_n_int_sgn(3, &i);
2462:src/xeq.c     **** #else
2463:src/xeq.c     **** 	const int neg_lim_ds = SP_NEG_EXP_ENTRY_LIMIT_DS;
2464:src/xeq.c     **** #endif
2465:src/xeq.c     **** #if SP_POS_EXP_ENTRY_TYPE_DC == -1
2466:src/xeq.c     **** 	const int pos_type_dc = get_reg_n_int_sgn(4, &i);
2467:src/xeq.c     **** #else
2468:src/xeq.c     **** 	const int pos_type_dc = SP_POS_EXP_ENTRY_TYPE_DC;
2469:src/xeq.c     **** #endif
2470:src/xeq.c     **** #if SP_POS_EXP_ENTRY_LIMIT_DC == -1
2471:src/xeq.c     **** 	const int pos_lim_dc = get_reg_n_int_sgn(5, &i);
2472:src/xeq.c     **** #else
2473:src/xeq.c     **** 	const int pos_lim_dc = SP_POS_EXP_ENTRY_LIMIT_DC;
2474:src/xeq.c     **** #endif
2475:src/xeq.c     **** #if SP_POS_EXP_ENTRY_TYPE_DS == -1
2476:src/xeq.c     **** 	const int pos_type_ds = get_reg_n_int_sgn(6, &i);
2477:src/xeq.c     **** #else
ARM GAS  /tmp/cc0UaEmF.s 			page 54


2478:src/xeq.c     **** 	const int pos_type_ds = SP_POS_EXP_ENTRY_TYPE_DS;
2479:src/xeq.c     **** #endif
2480:src/xeq.c     **** #if SP_POS_EXP_ENTRY_LIMIT_DS == -1
2481:src/xeq.c     **** 	const int pos_lim_ds = get_reg_n_int_sgn(7, &i);
2482:src/xeq.c     **** #else
2483:src/xeq.c     **** 	const int pos_lim_ds = SP_POS_EXP_ENTRY_LIMIT_DS;
2484:src/xeq.c     **** #endif
2485:src/xeq.c     **** #if SP_EXP_ENTRY_CHS_DC == -1
2486:src/xeq.c     **** 	const int exp_chs_dc = get_reg_n_int_sgn(8, &i);
2487:src/xeq.c     **** #else
2488:src/xeq.c     **** 	const int exp_chs_dc = SP_EXP_ENTRY_CHS_DC;
2489:src/xeq.c     **** #endif
2490:src/xeq.c     **** #if SP_EXP_ENTRY_CHS_DS == -1
2491:src/xeq.c     **** 	const int exp_chs_ds = get_reg_n_int_sgn(9, &i);
2492:src/xeq.c     **** #else
2493:src/xeq.c     **** 	const int exp_chs_ds = SP_EXP_ENTRY_CHS_DS;
2494:src/xeq.c     **** #endif
2495:src/xeq.c     **** 	const int dp_neg_type_dc = DP_NEG_EXP_ENTRY_TYPE_DC;
2496:src/xeq.c     **** 	const int dp_neg_lim_dc = DP_NEG_EXP_ENTRY_LIMIT_DC;
2497:src/xeq.c     **** 	const int dp_neg_type_ds = DP_NEG_EXP_ENTRY_TYPE_DS;
2498:src/xeq.c     **** 	const int dp_neg_lim_ds = DP_NEG_EXP_ENTRY_LIMIT_DS;
2499:src/xeq.c     **** 	const int dp_pos_type_dc = DP_POS_EXP_ENTRY_TYPE_DC;
2500:src/xeq.c     **** 	const int dp_pos_lim_dc = DP_POS_EXP_ENTRY_LIMIT_DC;
2501:src/xeq.c     **** 	const int dp_pos_type_ds = DP_POS_EXP_ENTRY_TYPE_DS;
2502:src/xeq.c     **** 	const int dp_pos_lim_ds = DP_POS_EXP_ENTRY_LIMIT_DS;
2503:src/xeq.c     **** 	const int dp_exp_chs_dc = DP_EXP_ENTRY_CHS_DC;
2504:src/xeq.c     **** 	const int dp_exp_chs_ds = DP_EXP_ENTRY_CHS_DS;
2505:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2506:src/xeq.c     **** 	const int large_exp_entry = 1;
2507:src/xeq.c     **** 	char *p = &Cmdline[CmdLineEex];
2508:src/xeq.c     **** #else
2509:src/xeq.c     **** 	const int large_exp_entry = 0;
2510:src/xeq.c     **** 	char *p = &Cmdline[CmdLineEex + 1];
2511:src/xeq.c     **** #endif
2512:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DC == -1 || SP_NEG_EXP_ENTRY_TYPE_DC != SP_NEG_EXP_ENTRY_TYPE_DS \
2513:src/xeq.c     ****     || SP_NEG_EXP_ENTRY_LIMIT_DC == -1 || SP_NEG_EXP_ENTRY_LIMIT_DC != SP_NEG_EXP_ENTRY_LIMIT_DS \
2514:src/xeq.c     ****     || SP_POS_EXP_ENTRY_TYPE_DC == -1 || SP_POS_EXP_ENTRY_TYPE_DC != SP_POS_EXP_ENTRY_TYPE_DS \
2515:src/xeq.c     ****     || SP_POS_EXP_ENTRY_LIMIT_DC == -1 || SP_POS_EXP_ENTRY_LIMIT_DC != SP_POS_EXP_ENTRY_LIMIT_DS \
2516:src/xeq.c     ****     || SP_EXP_ENTRY_CHS_DC == -1 || SP_EXP_ENTRY_CHS_DC != SP_EXP_ENTRY_CHS_DS \
2517:src/xeq.c     ****     || SP_EXP_ENTRY_ZERO_DC == -1 || SP_EXP_ENTRY_ZERO_DC != SP_EXP_ENTRY_ZERO_DS \
2518:src/xeq.c     ****     || ((DP_NEG_EXP_ENTRY_TYPE_DC != DP_NEG_EXP_ENTRY_TYPE_DS \
2519:src/xeq.c     ****          || DP_NEG_EXP_ENTRY_LIMIT_DC != DP_NEG_EXP_ENTRY_LIMIT_DS \
2520:src/xeq.c     ****          || DP_POS_EXP_ENTRY_TYPE_DC != DP_POS_EXP_ENTRY_TYPE_DS \
2521:src/xeq.c     ****          || DP_POS_EXP_ENTRY_LIMIT_DC != DP_POS_EXP_ENTRY_LIMIT_DS \
2522:src/xeq.c     ****          || DP_EXP_ENTRY_CHS_DC != DP_EXP_ENTRY_CHS_DS \
2523:src/xeq.c     ****          || DP_EXP_ENTRY_ZERO_DC != DP_EXP_ENTRY_ZERO_DS) && defined(LARGE_EXPONENT_ENTRY))
2524:src/xeq.c     **** 	const int flag_D = get_user_flag(NAN_FLAG);
2525:src/xeq.c     **** #else
2526:src/xeq.c     **** 	const int flag_D = 0;
2527:src/xeq.c     **** #endif
2528:src/xeq.c     **** #ifndef SHIFT_EXPONENT
2529:src/xeq.c     **** 	int negative;
2530:src/xeq.c     **** #endif
2531:src/xeq.c     **** 	int emax;
2532:src/xeq.c     **** 
2533:src/xeq.c     **** 	/* Figure out the range limit for the exponent */
2534:src/xeq.c     **** 	if (!large_exp_entry && dbl) {
ARM GAS  /tmp/cc0UaEmF.s 			page 55


2535:src/xeq.c     **** 		emax = 999;
2536:src/xeq.c     **** 	}
2537:src/xeq.c     **** 	else {
2538:src/xeq.c     **** 		int emax_plus, emax_minus;
2539:src/xeq.c     **** 		int dot = 0, first_nonzero = -1, last_nonzero = 0;
2540:src/xeq.c     **** 
2541:src/xeq.c     **** 		if ((neg_type_dc >= 1 && neg_type_dc <= 9)
2542:src/xeq.c     **** 		    || (neg_type_ds >= 1 && neg_type_ds <= 9)
2543:src/xeq.c     **** 		    || (pos_type_dc >= 1 && pos_type_dc <= 3)
2544:src/xeq.c     **** 		    || (pos_type_ds >= 1 && pos_type_ds <= 3)
2545:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2546:src/xeq.c     **** 		    || (dp_neg_type_dc >= 1 && dp_neg_type_dc <= 9)
2547:src/xeq.c     **** 		    || (dp_neg_type_ds >= 1 && dp_neg_type_ds <= 9)
2548:src/xeq.c     **** 		    || (dp_pos_type_dc >= 1 && dp_pos_type_dc <= 3)
2549:src/xeq.c     **** 		    || (dp_pos_type_ds >= 1 && dp_pos_type_ds <= 3)
2550:src/xeq.c     **** #endif
2551:src/xeq.c     **** 		   ) {
2552:src/xeq.c     **** 			// Exponent limits have to be calculated at run-time
2553:src/xeq.c     **** 
2554:src/xeq.c     **** 			for (i = 0; i < CmdLineLength; ++i) {
2555:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2556:src/xeq.c     **** 				if (Cmdline[i] == 'E' || Cmdline[i] == 'D')
2557:src/xeq.c     **** #else
2558:src/xeq.c     **** 				if (Cmdline[i] == 'E')
2559:src/xeq.c     **** #endif
2560:src/xeq.c     **** 					break;
2561:src/xeq.c     **** 				else if (Cmdline[i] == '.')
2562:src/xeq.c     **** 					dot = i;
2563:src/xeq.c     **** 				else if (Cmdline[i] != '0') {
2564:src/xeq.c     **** 					last_nonzero = i - (dot != 0);
2565:src/xeq.c     **** 					if (first_nonzero < 0)
2566:src/xeq.c     **** 						first_nonzero = i - (dot != 0);
2567:src/xeq.c     **** 				}
2568:src/xeq.c     **** 			}
2569:src/xeq.c     **** 			if (first_nonzero < 0) { // Mantissa is zero.
2570:src/xeq.c     **** #if SP_EXP_ENTRY_ZERO_DC == -1
2571:src/xeq.c     **** 				const int zero_dc = (get_user_flag(1) << 1) | get_user_flag(0);
2572:src/xeq.c     **** #else
2573:src/xeq.c     **** 				const int zero_dc = SP_EXP_ENTRY_ZERO_DC;
2574:src/xeq.c     **** #endif
2575:src/xeq.c     **** #if SP_EXP_ENTRY_ZERO_DS == -1
2576:src/xeq.c     **** 				const int zero_ds = (get_user_flag(3) << 1) | get_user_flag(2);
2577:src/xeq.c     **** #else
2578:src/xeq.c     **** 				const int zero_ds = SP_EXP_ENTRY_ZERO_DS;
2579:src/xeq.c     **** #endif
2580:src/xeq.c     **** 				const int dp_zero_dc = DP_EXP_ENTRY_ZERO_DC;
2581:src/xeq.c     **** 				const int dp_zero_ds = DP_EXP_ENTRY_ZERO_DS;
2582:src/xeq.c     **** 
2583:src/xeq.c     **** 				if (large_exp_entry && dbl) {
2584:src/xeq.c     **** 					if ((dp_zero_dc == 1 && dp_zero_ds == 1)
2585:src/xeq.c     **** 					    || (dp_zero_dc == 1 && !flag_D)
2586:src/xeq.c     **** 					    || (dp_zero_ds == 1 && flag_D)) {
2587:src/xeq.c     **** 						// Double precision: Allow any exponent
2588:src/xeq.c     **** 						// within configured limits if any.
2589:src/xeq.c     **** 						emax_plus = emax_minus = 9999;
2590:src/xeq.c     **** 						goto check_limits;
2591:src/xeq.c     **** 					}
ARM GAS  /tmp/cc0UaEmF.s 			page 56


2592:src/xeq.c     **** 					else if ((dp_zero_dc == 2 && dp_zero_ds == 2)
2593:src/xeq.c     **** 					         || (dp_zero_dc == 2 && !flag_D)
2594:src/xeq.c     **** 					         || (dp_zero_ds == 2 && flag_D)) {
2595:src/xeq.c     **** 						// Double precision: Allow any exponent
2596:src/xeq.c     **** 						// even outside of configured limits.
2597:src/xeq.c     **** 						emax = 9999;
2598:src/xeq.c     **** 						goto do_not_check_limits;
2599:src/xeq.c     **** 					}
2600:src/xeq.c     **** 					goto zero_has_one_significant_digit;
2601:src/xeq.c     **** 				}
2602:src/xeq.c     **** 				if ((zero_dc == 1 && zero_ds == 1)
2603:src/xeq.c     **** 				    || (zero_dc == 1 && !flag_D)
2604:src/xeq.c     **** 				    || (zero_ds == 1 && flag_D)) {
2605:src/xeq.c     **** 					// Allow any exponent within configured limits if any.
2606:src/xeq.c     **** 					emax_plus = emax_minus = 999;
2607:src/xeq.c     **** 					goto check_limits;
2608:src/xeq.c     **** 				}
2609:src/xeq.c     **** 				else if ((zero_dc == 2 && zero_ds == 2)
2610:src/xeq.c     **** 				         || (zero_dc == 2 && !flag_D)
2611:src/xeq.c     **** 				         || (zero_ds == 2 && flag_D)) {
2612:src/xeq.c     **** 					// Allow any exponent even outside of configured limits.
2613:src/xeq.c     **** 					emax = 999;
2614:src/xeq.c     **** 					goto do_not_check_limits;
2615:src/xeq.c     **** 				}
2616:src/xeq.c     **** 				else {
2617:src/xeq.c     **** zero_has_one_significant_digit:
2618:src/xeq.c     **** 					// Treat zero as if it had one significant digit.
2619:src/xeq.c     **** 					first_nonzero = 0;
2620:src/xeq.c     **** 					dot = 1;
2621:src/xeq.c     **** 				}
2622:src/xeq.c     **** 			}
2623:src/xeq.c     **** 			else if (dot == 0)
2624:src/xeq.c     **** 				dot = i;
2625:src/xeq.c     **** 		}
2626:src/xeq.c     **** 
2627:src/xeq.c     **** 		if (large_exp_entry && dbl) {
2628:src/xeq.c     **** 			// Double precision mode
2629:src/xeq.c     **** 			if (flag_D && dp_neg_type_dc != dp_neg_type_ds) {
2630:src/xeq.c     **** 				if (dp_neg_type_ds >= 1 && dp_neg_type_ds <= 3) {
2631:src/xeq.c     **** 					// Don't allow denormal numbers
2632:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin - 1 + dot - first_nonzero;
2633:src/xeq.c     **** 				}
2634:src/xeq.c     **** 				else if (dp_neg_type_ds >= 4 && dp_neg_type_ds <= 6) {
2635:src/xeq.c     **** 					// No entered digit can be lost in denormal numbers
2636:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 - (last_nonzero - dot);
2637:src/xeq.c     **** 				}
2638:src/xeq.c     **** 				else if (dp_neg_type_ds >= 7 && dp_neg_type_ds <= 9) {
2639:src/xeq.c     **** 					// At least one digit preserved in denormal numbers
2640:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 + dot - first_nonzero;
2641:src/xeq.c     **** 				}
2642:src/xeq.c     **** 				else {
2643:src/xeq.c     **** 					// Fixed limit
2644:src/xeq.c     **** 					emax_minus = dp_neg_lim_ds;
2645:src/xeq.c     **** 				}
2646:src/xeq.c     **** 			}
2647:src/xeq.c     **** 			else {
2648:src/xeq.c     **** 				if (dp_neg_type_dc >= 1 && dp_neg_type_dc <= 3) {
ARM GAS  /tmp/cc0UaEmF.s 			page 57


2649:src/xeq.c     **** 					// Don't allow denormal numbers
2650:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin - 1 + dot - first_nonzero;
2651:src/xeq.c     **** 				}
2652:src/xeq.c     **** 				else if (dp_neg_type_dc >= 4 && dp_neg_type_dc <= 6) {
2653:src/xeq.c     **** 					// No entered digit can be lost in denormal numbers
2654:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 - (last_nonzero - dot);
2655:src/xeq.c     **** 				}
2656:src/xeq.c     **** 				else if (dp_neg_type_dc >= 7 && dp_neg_type_dc <= 9) {
2657:src/xeq.c     **** 					// At least one digit preserved in denormal numbers
2658:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 + dot - first_nonzero;
2659:src/xeq.c     **** 				}
2660:src/xeq.c     **** 				else {
2661:src/xeq.c     **** 					// Fixed limit
2662:src/xeq.c     **** 					emax_minus = dp_neg_lim_dc;
2663:src/xeq.c     **** 				}
2664:src/xeq.c     **** 			}
2665:src/xeq.c     **** 
2666:src/xeq.c     **** 			if (flag_D && dp_pos_type_dc != dp_pos_type_ds) {
2667:src/xeq.c     **** 				if (dp_pos_type_ds >= 1 && dp_pos_type_ds <= 3)
2668:src/xeq.c     **** 					// Don't allow numbers that overflow to infinity
2669:src/xeq.c     **** 					emax_plus = DECIMAL128_Emax + 1 - (dot - first_nonzero);
2670:src/xeq.c     **** 				else
2671:src/xeq.c     **** 					// Fixed limit
2672:src/xeq.c     **** 					emax_plus = dp_pos_lim_ds;
2673:src/xeq.c     **** 			}
2674:src/xeq.c     **** 			else {
2675:src/xeq.c     **** 				if (dp_pos_type_dc >= 1 && dp_pos_type_dc <= 3)
2676:src/xeq.c     **** 					// Don't allow numbers that overflow to infinity
2677:src/xeq.c     **** 					emax_plus = DECIMAL128_Emax + 1 - (dot - first_nonzero);
2678:src/xeq.c     **** 				else
2679:src/xeq.c     **** 					// Fixed limit
2680:src/xeq.c     **** 					emax_plus = dp_pos_lim_dc;
2681:src/xeq.c     **** 			}
2682:src/xeq.c     **** 
2683:src/xeq.c     **** 			goto check_limits;
2684:src/xeq.c     **** 		}
2685:src/xeq.c     **** 
2686:src/xeq.c     **** 		if (flag_D && neg_type_dc != neg_type_ds) {
2687:src/xeq.c     **** 			if (neg_type_ds >= 1 && neg_type_ds <= 3) {
2688:src/xeq.c     **** 				// Don't allow denormal numbers
2689:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin - 1 + dot - first_nonzero;
2690:src/xeq.c     **** 			}
2691:src/xeq.c     **** 			else if (neg_type_ds >= 4 && neg_type_ds <= 6) {
2692:src/xeq.c     **** 				// No entered digit can be lost in denormal numbers
2693:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 - (last_nonzero - dot);
2694:src/xeq.c     **** 			}
2695:src/xeq.c     **** 			else if (neg_type_ds >= 7 && neg_type_ds <= 9) {
2696:src/xeq.c     **** 				// At least one digit preserved in denormal numbers
2697:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 + dot - first_nonzero;
2698:src/xeq.c     **** 			}
2699:src/xeq.c     **** 			else {
2700:src/xeq.c     **** 				// Fixed limit
2701:src/xeq.c     **** 				emax_minus = neg_lim_ds;
2702:src/xeq.c     **** 			}
2703:src/xeq.c     **** 		}
2704:src/xeq.c     **** 		else {
2705:src/xeq.c     **** 			if (neg_type_dc >= 1 && neg_type_dc <= 3) {
ARM GAS  /tmp/cc0UaEmF.s 			page 58


2706:src/xeq.c     **** 				// Don't allow denormal numbers
2707:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin - 1 + dot - first_nonzero;
2708:src/xeq.c     **** 			}
2709:src/xeq.c     **** 			else if (neg_type_dc >= 4 && neg_type_dc <= 6) {
2710:src/xeq.c     **** 				// No entered digit can be lost in denormal numbers
2711:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 - (last_nonzero - dot);
2712:src/xeq.c     **** 			}
2713:src/xeq.c     **** 			else if (neg_type_dc >= 7 && neg_type_dc <= 9) {
2714:src/xeq.c     **** 				// At least one digit preserved in denormal numbers
2715:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 + dot - first_nonzero;
2716:src/xeq.c     **** 			}
2717:src/xeq.c     **** 			else {
2718:src/xeq.c     **** 				// Fixed limit
2719:src/xeq.c     **** 				emax_minus = neg_lim_dc;
2720:src/xeq.c     **** 			}
2721:src/xeq.c     **** 		}
2722:src/xeq.c     **** 
2723:src/xeq.c     **** 		if (flag_D && pos_type_dc != pos_type_ds) {
2724:src/xeq.c     **** 			if (pos_type_ds >= 1 && pos_type_ds <= 3)
2725:src/xeq.c     **** 				// Don't allow numbers that overflow to infinity
2726:src/xeq.c     **** 				emax_plus = DECIMAL64_Emax + 1 - (dot - first_nonzero);
2727:src/xeq.c     **** 			else
2728:src/xeq.c     **** 				// Fixed limit
2729:src/xeq.c     **** 				emax_plus = pos_lim_ds;
2730:src/xeq.c     **** 		}
2731:src/xeq.c     **** 		else {
2732:src/xeq.c     **** 			if (pos_type_dc >= 1 && pos_type_dc <= 3)
2733:src/xeq.c     **** 				// Don't allow numbers that overflow to infinity
2734:src/xeq.c     **** 				emax_plus = DECIMAL64_Emax + 1 - (dot - first_nonzero);
2735:src/xeq.c     **** 			else
2736:src/xeq.c     **** 				// Fixed limit
2737:src/xeq.c     **** 				emax_plus = pos_lim_dc;
2738:src/xeq.c     **** 		}
2739:src/xeq.c     **** 
2740:src/xeq.c     **** check_limits:
2741:src/xeq.c     **** 		if (large_exp_entry && dbl && flag_D
2742:src/xeq.c     **** 		    && (dp_neg_type_dc != dp_neg_type_ds || dp_neg_lim_dc != dp_neg_lim_ds)
2743:src/xeq.c     **** 		    && (dp_neg_type_ds != neg_type_ds || dp_neg_lim_ds != neg_lim_ds)) {
2744:src/xeq.c     **** 			if (dp_neg_type_ds >= 1 && dp_neg_type_ds <= 9) {
2745:src/xeq.c     **** 				if (dp_neg_type_ds % 3 == 2) { // low limit
2746:src/xeq.c     **** 					if (emax_minus > dp_neg_lim_ds)
2747:src/xeq.c     **** 						emax_minus = dp_neg_lim_ds;
2748:src/xeq.c     **** 				}
2749:src/xeq.c     **** 				else if (dp_neg_type_ds % 3 == 0) { // high limit
2750:src/xeq.c     **** 					if (emax_minus < dp_neg_lim_ds)
2751:src/xeq.c     **** 						emax_minus = dp_neg_lim_ds;
2752:src/xeq.c     **** 				}
2753:src/xeq.c     **** 			}
2754:src/xeq.c     **** 			if (dp_neg_lim_ds < 0 && emax_minus < 0)
2755:src/xeq.c     **** 				emax_minus = 0;
2756:src/xeq.c     **** 		}
2757:src/xeq.c     **** 		else if (large_exp_entry && dbl
2758:src/xeq.c     **** 		         && (!flag_D || (dp_neg_type_dc == dp_neg_type_ds
2759:src/xeq.c     **** 		                         && dp_neg_lim_dc == dp_neg_lim_ds))
2760:src/xeq.c     **** 		         && (dp_neg_type_dc != neg_type_dc || dp_neg_lim_dc != neg_lim_dc)) {
2761:src/xeq.c     **** 			if (dp_neg_type_dc >= 1 && dp_neg_type_dc <= 9) {
2762:src/xeq.c     **** 				if (dp_neg_type_dc % 3 == 2) { // low limit
ARM GAS  /tmp/cc0UaEmF.s 			page 59


2763:src/xeq.c     **** 					if (emax_minus > dp_neg_lim_dc)
2764:src/xeq.c     **** 						emax_minus = dp_neg_lim_dc;
2765:src/xeq.c     **** 				}
2766:src/xeq.c     **** 				else if (dp_neg_type_dc % 3 == 0) { // high limit
2767:src/xeq.c     **** 					if (emax_minus < dp_neg_lim_dc)
2768:src/xeq.c     **** 						emax_minus = dp_neg_lim_dc;
2769:src/xeq.c     **** 				}
2770:src/xeq.c     **** 			}
2771:src/xeq.c     **** 			if (dp_neg_lim_dc < 0 && emax_minus < 0)
2772:src/xeq.c     **** 				emax_minus = 0;
2773:src/xeq.c     **** 		}
2774:src/xeq.c     **** 		else if (flag_D && (neg_type_dc != neg_type_ds || neg_lim_dc != neg_lim_ds)) {
2775:src/xeq.c     **** 			if (neg_type_ds >= 1 && neg_type_ds <= 9) {
2776:src/xeq.c     **** 				if (neg_type_ds % 3 == 2) { // low limit
2777:src/xeq.c     **** 					if (emax_minus > neg_lim_ds)
2778:src/xeq.c     **** 						emax_minus = neg_lim_ds;
2779:src/xeq.c     **** 				}
2780:src/xeq.c     **** 				else if (neg_type_ds % 3 == 0) { // high limit
2781:src/xeq.c     **** 					if (emax_minus < neg_lim_ds)
2782:src/xeq.c     **** 						emax_minus = neg_lim_ds;
2783:src/xeq.c     **** 				}
2784:src/xeq.c     **** 			}
2785:src/xeq.c     **** 			if (neg_lim_ds < 0 && emax_minus < 0)
2786:src/xeq.c     **** 				emax_minus = 0;
2787:src/xeq.c     **** 		}
2788:src/xeq.c     **** 		else {
2789:src/xeq.c     **** 			if (neg_type_dc >= 1 && neg_type_dc <= 9) {
2790:src/xeq.c     **** 				if (neg_type_dc % 3 == 2) { // low limit
2791:src/xeq.c     **** 					if (emax_minus > neg_lim_dc)
2792:src/xeq.c     **** 						emax_minus = neg_lim_dc;
2793:src/xeq.c     **** 				}
2794:src/xeq.c     **** 				else if (neg_type_dc % 3 == 0) { // high limit
2795:src/xeq.c     **** 					if (emax_minus < neg_lim_dc)
2796:src/xeq.c     **** 						emax_minus = neg_lim_dc;
2797:src/xeq.c     **** 				}
2798:src/xeq.c     **** 			}
2799:src/xeq.c     **** 			if (neg_lim_dc < 0 && emax_minus < 0)
2800:src/xeq.c     **** 				emax_minus = 0;
2801:src/xeq.c     **** 		}
2802:src/xeq.c     **** 
2803:src/xeq.c     **** 		if (large_exp_entry && dbl && flag_D
2804:src/xeq.c     **** 		    && (dp_pos_type_dc != dp_pos_type_ds || dp_pos_lim_dc != dp_pos_lim_ds)
2805:src/xeq.c     **** 		    && (dp_pos_type_ds != pos_type_ds || dp_pos_lim_ds != pos_lim_ds)) {
2806:src/xeq.c     **** 			if (dp_pos_type_ds == 2) { // low limit
2807:src/xeq.c     **** 				if (emax_plus < dp_pos_lim_ds)
2808:src/xeq.c     **** 					emax_plus = dp_pos_lim_ds;
2809:src/xeq.c     **** 			}
2810:src/xeq.c     **** 			else if (dp_pos_type_ds == 3) { // high limit
2811:src/xeq.c     **** 				if (emax_plus > dp_pos_lim_ds)
2812:src/xeq.c     **** 					emax_plus = dp_pos_lim_ds;
2813:src/xeq.c     **** 			}
2814:src/xeq.c     **** 			if (dp_pos_lim_ds < 0 && emax_plus < 0)
2815:src/xeq.c     **** 				emax_plus = 0;
2816:src/xeq.c     **** 		}
2817:src/xeq.c     **** 		else if (large_exp_entry && dbl
2818:src/xeq.c     **** 		         && (!flag_D || (dp_pos_type_dc == dp_pos_type_ds
2819:src/xeq.c     **** 		                         && dp_pos_lim_dc == dp_pos_lim_ds))
ARM GAS  /tmp/cc0UaEmF.s 			page 60


2820:src/xeq.c     **** 		         && (dp_pos_type_dc != pos_type_dc || dp_pos_lim_dc != pos_lim_dc)) {
2821:src/xeq.c     **** 			if (dp_pos_type_dc == 2) { // low limit
2822:src/xeq.c     **** 				if (emax_plus < dp_pos_lim_dc)
2823:src/xeq.c     **** 					emax_plus = dp_pos_lim_dc;
2824:src/xeq.c     **** 			}
2825:src/xeq.c     **** 			else if (dp_pos_type_dc == 3) { // high limit
2826:src/xeq.c     **** 				if (emax_plus > dp_pos_lim_dc)
2827:src/xeq.c     **** 					emax_plus = dp_pos_lim_dc;
2828:src/xeq.c     **** 			}
2829:src/xeq.c     **** 			if (dp_pos_lim_dc < 0 && emax_plus < 0)
2830:src/xeq.c     **** 				emax_plus = 0;
2831:src/xeq.c     **** 		}
2832:src/xeq.c     **** 		else if (flag_D && (pos_type_dc != pos_type_ds || pos_lim_dc != pos_lim_ds)) {
2833:src/xeq.c     **** 			if (pos_type_ds == 2) { // low limit
2834:src/xeq.c     **** 				if (emax_plus < pos_lim_ds)
2835:src/xeq.c     **** 					emax_plus = pos_lim_ds;
2836:src/xeq.c     **** 			}
2837:src/xeq.c     **** 			else if (pos_type_ds == 3) { // high limit
2838:src/xeq.c     **** 				if (emax_plus > pos_lim_ds)
2839:src/xeq.c     **** 					emax_plus = pos_lim_ds;
2840:src/xeq.c     **** 			}
2841:src/xeq.c     **** 			if (pos_lim_ds < 0 && emax_plus < 0)
2842:src/xeq.c     **** 				emax_plus = 0;
2843:src/xeq.c     **** 		}
2844:src/xeq.c     **** 		else {
2845:src/xeq.c     **** 			if (pos_type_dc == 2) { // low limit
2846:src/xeq.c     **** 				if (emax_plus < pos_lim_dc)
2847:src/xeq.c     **** 					emax_plus = pos_lim_dc;
2848:src/xeq.c     **** 			}
2849:src/xeq.c     **** 			else if (pos_type_dc == 3) { // high limit
2850:src/xeq.c     **** 				if (emax_plus > pos_lim_dc)
2851:src/xeq.c     **** 					emax_plus = pos_lim_dc;
2852:src/xeq.c     **** 			}
2853:src/xeq.c     **** 			if (pos_lim_dc < 0 && emax_plus < 0)
2854:src/xeq.c     **** 				emax_plus = 0;
2855:src/xeq.c     **** 		}
2856:src/xeq.c     **** 
2857:src/xeq.c     **** 		if (large_exp_entry && dbl && flag_D
2858:src/xeq.c     **** 		    && (dp_exp_chs_dc != dp_exp_chs_ds)
2859:src/xeq.c     **** 		    && (dp_exp_chs_ds != exp_chs_ds)) {
2860:src/xeq.c     **** 			if (dp_exp_chs_ds == 0) {
2861:src/xeq.c     **** 				// Limit exponents so sign change is always legal
2862:src/xeq.c     **** 				if (emax_minus < emax_plus)
2863:src/xeq.c     **** 					emax = emax_minus;
2864:src/xeq.c     **** 				else
2865:src/xeq.c     **** 					emax = emax_plus;
2866:src/xeq.c     **** 			}
2867:src/xeq.c     **** 			else if (dp_exp_chs_ds == 3) {
2868:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
2869:src/xeq.c     **** 				if (emax_minus > emax_plus)
2870:src/xeq.c     **** 					emax = emax_minus;
2871:src/xeq.c     **** 				else
2872:src/xeq.c     **** 					emax = emax_plus;
2873:src/xeq.c     **** 			}
2874:src/xeq.c     **** 			else {
2875:src/xeq.c     **** 				if (dp_exp_chs_ds == 2 && !was_digit_entered)
2876:src/xeq.c     **** 					return;
ARM GAS  /tmp/cc0UaEmF.s 			page 61


2877:src/xeq.c     **** 				if (*p == 'D')
2878:src/xeq.c     **** 					emax = emax_minus;
2879:src/xeq.c     **** 				else
2880:src/xeq.c     **** 					emax = emax_plus;
2881:src/xeq.c     **** 			}
2882:src/xeq.c     **** 		}
2883:src/xeq.c     **** 		else if (large_exp_entry && dbl
2884:src/xeq.c     **** 		         && (!flag_D || dp_exp_chs_dc == dp_exp_chs_ds)
2885:src/xeq.c     **** 		         && (dp_exp_chs_dc != exp_chs_dc)) {
2886:src/xeq.c     **** 			if (dp_exp_chs_dc == 0) {
2887:src/xeq.c     **** 				// Limit exponents so sign change is always legal
2888:src/xeq.c     **** 				if (emax_minus < emax_plus)
2889:src/xeq.c     **** 					emax = emax_minus;
2890:src/xeq.c     **** 				else
2891:src/xeq.c     **** 					emax = emax_plus;
2892:src/xeq.c     **** 			}
2893:src/xeq.c     **** 			else if (dp_exp_chs_dc == 3) {
2894:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
2895:src/xeq.c     **** 				if (emax_minus > emax_plus)
2896:src/xeq.c     **** 					emax = emax_minus;
2897:src/xeq.c     **** 				else
2898:src/xeq.c     **** 					emax = emax_plus;
2899:src/xeq.c     **** 			}
2900:src/xeq.c     **** 			else {
2901:src/xeq.c     **** 				if (dp_exp_chs_dc == 2 && !was_digit_entered)
2902:src/xeq.c     **** 					return;
2903:src/xeq.c     **** 				if (*p == 'D')
2904:src/xeq.c     **** 					emax = emax_minus;
2905:src/xeq.c     **** 				else
2906:src/xeq.c     **** 					emax = emax_plus;
2907:src/xeq.c     **** 			}
2908:src/xeq.c     **** 		}
2909:src/xeq.c     **** 		else if (flag_D && exp_chs_dc != exp_chs_ds) {
2910:src/xeq.c     **** 			if (exp_chs_ds == 0) {
2911:src/xeq.c     **** 				// Limit exponents so sign change is always legal
2912:src/xeq.c     **** 				if (emax_minus < emax_plus)
2913:src/xeq.c     **** 					emax = emax_minus;
2914:src/xeq.c     **** 				else
2915:src/xeq.c     **** 					emax = emax_plus;
2916:src/xeq.c     **** 			}
2917:src/xeq.c     **** 			else if (exp_chs_ds == 3) {
2918:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
2919:src/xeq.c     **** 				if (emax_minus > emax_plus)
2920:src/xeq.c     **** 					emax = emax_minus;
2921:src/xeq.c     **** 				else
2922:src/xeq.c     **** 					emax = emax_plus;
2923:src/xeq.c     **** 			}
2924:src/xeq.c     **** 			else {
2925:src/xeq.c     **** 				if (exp_chs_ds == 2 && !was_digit_entered)
2926:src/xeq.c     **** 					return;
2927:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2928:src/xeq.c     **** 				if (*p == 'D')
2929:src/xeq.c     **** #else
2930:src/xeq.c     **** 				if (*p == '-')
2931:src/xeq.c     **** #endif
2932:src/xeq.c     **** 					emax = emax_minus;
2933:src/xeq.c     **** 				else
ARM GAS  /tmp/cc0UaEmF.s 			page 62


2934:src/xeq.c     **** 					emax = emax_plus;
2935:src/xeq.c     **** 			}
2936:src/xeq.c     **** 		}
2937:src/xeq.c     **** 		else {
2938:src/xeq.c     **** 			if (exp_chs_dc == 0) {
2939:src/xeq.c     **** 				// Limit exponents so sign change is always legal
2940:src/xeq.c     **** 				if (emax_minus < emax_plus)
2941:src/xeq.c     **** 					emax = emax_minus;
2942:src/xeq.c     **** 				else
2943:src/xeq.c     **** 					emax = emax_plus;
2944:src/xeq.c     **** 			}
2945:src/xeq.c     **** 			else if (exp_chs_dc == 3) {
2946:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
2947:src/xeq.c     **** 				if (emax_minus > emax_plus)
2948:src/xeq.c     **** 					emax = emax_minus;
2949:src/xeq.c     **** 				else
2950:src/xeq.c     **** 					emax = emax_plus;
2951:src/xeq.c     **** 			}
2952:src/xeq.c     **** 			else {
2953:src/xeq.c     **** 				if (exp_chs_dc == 2 && !was_digit_entered)
2954:src/xeq.c     **** 					return;
2955:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2956:src/xeq.c     **** 				if (*p == 'D')
2957:src/xeq.c     **** #else
2958:src/xeq.c     **** 				if (*p == '-')
2959:src/xeq.c     **** #endif
2960:src/xeq.c     **** 					emax = emax_minus;
2961:src/xeq.c     **** 				else
2962:src/xeq.c     **** 					emax = emax_plus;
2963:src/xeq.c     **** 			}
2964:src/xeq.c     **** 		}
2965:src/xeq.c     **** 	}
2966:src/xeq.c     **** 
2967:src/xeq.c     **** do_not_check_limits:
2968:src/xeq.c     **** #ifdef SHIFT_EXPONENT
2969:src/xeq.c     **** #  ifdef LARGE_EXPONENT_ENTRY
2970:src/xeq.c     **** 	p++;
2971:src/xeq.c     **** #  else
2972:src/xeq.c     **** 	if (*p == '-')
2973:src/xeq.c     **** 		p++;
2974:src/xeq.c     **** #  endif
2975:src/xeq.c     **** 	/* Check if the current exponent exceeds the range.
2976:src/xeq.c     **** 	 * If so, shift it back until it doesn't.
2977:src/xeq.c     **** 	 * Also remove leading zeros.
2978:src/xeq.c     **** 	 */
2979:src/xeq.c     **** 	while (s_to_i(p) > emax || *p == '0') {
2980:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
2981:src/xeq.c     **** 			p[i] = p[i + 1];
2982:src/xeq.c     **** 		CmdLineLength--;
2983:src/xeq.c     **** 	}
2984:src/xeq.c     **** #else
2985:src/xeq.c     **** #  ifdef LARGE_EXPONENT_ENTRY
2986:src/xeq.c     **** 	negative = (*p == 'D');
2987:src/xeq.c     **** 	p++;
2988:src/xeq.c     **** #  else
2989:src/xeq.c     **** 	if (*p == '-') {
2990:src/xeq.c     **** 		p++;
ARM GAS  /tmp/cc0UaEmF.s 			page 63


2991:src/xeq.c     **** 		negative = 1;
2992:src/xeq.c     **** 	}
2993:src/xeq.c     **** 	else negative = 0;
2994:src/xeq.c     **** #  endif
2995:src/xeq.c     **** 	// Display a warning if the exponent is out of range.
2996:src/xeq.c     **** 	if ((i = s_to_i(p)) > emax) {
2997:src/xeq.c     **** 		if (was_digit_entered) {
2998:src/xeq.c     **** 			CmdLineLength--;
2999:src/xeq.c     **** 			if (large_exp_entry && dbl ? i > 9999 : i > 999) {
3000:src/xeq.c     **** 				report_warn(ERR_TOO_LONG);
3001:src/xeq.c     **** 				return;
3002:src/xeq.c     **** 			}
3003:src/xeq.c     **** 		}
3004:src/xeq.c     **** #  ifdef LARGE_EXPONENT_ENTRY
3005:src/xeq.c     **** 		else if (('D' | 1) == 'E')
3006:src/xeq.c     **** 			Cmdline[CmdLineEex] ^= 1;
3007:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
3008:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'D';
3009:src/xeq.c     **** 		else
3010:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'E';
3011:src/xeq.c     **** #  else
3012:src/xeq.c     **** 		else if (negative) {
3013:src/xeq.c     **** 			scopy(p - 1, p);
3014:src/xeq.c     **** 			CmdLineLength--;
3015:src/xeq.c     **** 		}
3016:src/xeq.c     **** 		else {
3017:src/xeq.c     **** 			xcopy(p + 1, p, CMDLINELEN - 1 - CmdLineEex);
3018:src/xeq.c     **** 			*p = '-';
3019:src/xeq.c     **** 			CmdLineLength++;
3020:src/xeq.c     **** 		}
3021:src/xeq.c     **** #  endif
3022:src/xeq.c     **** 		if (negative)
3023:src/xeq.c     **** 			report_warn(ERR_TOO_SMALL);
3024:src/xeq.c     **** 		else
3025:src/xeq.c     **** 			report_warn(ERR_TOO_BIG);
3026:src/xeq.c     **** 	}
3027:src/xeq.c     **** #endif
3028:src/xeq.c     **** }
3029:src/xeq.c     **** 
3030:src/xeq.c     **** /* We've encountered a CHS while entering the command line.
3031:src/xeq.c     ****  */
3032:src/xeq.c     **** static void cmdlinechs(void) {
3033:src/xeq.c     **** 	if (CmdLineEex) {
3034:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3035:src/xeq.c     **** 		// 'D' instead of 'E' indicates a negative exponent.
3036:src/xeq.c     **** 		// Four-digit exponents wouldn't fit into Cmdline if we used 'E-'.
3037:src/xeq.c     **** 		if (('D' | 1) == 'E')
3038:src/xeq.c     **** 			Cmdline[CmdLineEex] ^= 1;
3039:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
3040:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'D';
3041:src/xeq.c     **** 		else
3042:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'E';
3043:src/xeq.c     **** #else
3044:src/xeq.c     **** 		const unsigned int pos = CmdLineEex + 1;
3045:src/xeq.c     **** 		if (CmdLineLength <= pos) {
3046:src/xeq.c     **** 			if (CmdLineLength < CMDLINELEN)
3047:src/xeq.c     **** 				append_cmdline('-');
ARM GAS  /tmp/cc0UaEmF.s 			page 64


3048:src/xeq.c     **** 		} else if (Cmdline[pos] == '-') {
3049:src/xeq.c     **** 			if (CmdLineLength != pos)
3050:src/xeq.c     **** 				xcopy(Cmdline + pos, Cmdline + pos + 1, CmdLineLength-pos);
3051:src/xeq.c     **** 			CmdLineLength--;
3052:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
3053:src/xeq.c     **** 			xcopy(Cmdline+pos+1, Cmdline+pos, CmdLineLength-pos);
3054:src/xeq.c     **** 			Cmdline[pos] = '-';
3055:src/xeq.c     **** 			CmdLineLength++;
3056:src/xeq.c     **** 		}
3057:src/xeq.c     **** #endif
3058:src/xeq.c     **** #if SP_EXP_ENTRY_CHS_DC == -1 || SP_EXP_ENTRY_CHS_DC == 1 \
3059:src/xeq.c     ****     || SP_EXP_ENTRY_CHS_DS == -1 || SP_EXP_ENTRY_CHS_DS == 1 \
3060:src/xeq.c     ****     || ((DP_EXP_ENTRY_CHS_DC == 1 || DP_EXP_ENTRY_CHS_DS == 1) && defined(LARGE_EXPONENT_ENTRY))
3061:src/xeq.c     **** 		exponent_adjusted(0);
3062:src/xeq.c     **** #endif
3063:src/xeq.c     **** 	} else {
3064:src/xeq.c     **** 		if (Cmdline[0] == '-') {
3065:src/xeq.c     **** 			if (CmdLineLength > 1)
3066:src/xeq.c     **** 				xcopy(Cmdline, Cmdline+1, CmdLineLength);
3067:src/xeq.c     **** 			CmdLineLength--;
3068:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
3069:src/xeq.c     **** 			xcopy(Cmdline+1, Cmdline, CmdLineLength);
3070:src/xeq.c     **** 			Cmdline[0] = '-';
3071:src/xeq.c     **** 			CmdLineLength++;
3072:src/xeq.c     **** 		}
3073:src/xeq.c     **** 	}
3074:src/xeq.c     **** }
3075:src/xeq.c     **** 
3076:src/xeq.c     **** /* Execute a tests command
3077:src/xeq.c     ****  */
3078:src/xeq.c     **** static void do_tst(int cmp, const enum tst_op op) {
3079:src/xeq.c     **** 	int a = 0;
3080:src/xeq.c     **** 	int iszero, isneg;
3081:src/xeq.c     **** 
3082:src/xeq.c     **** 	process_cmdline_set_lift();
3083:src/xeq.c     **** 
3084:src/xeq.c     **** 	if (is_intmode()) {
3085:src/xeq.c     **** 		unsigned long long int xv, yv;
3086:src/xeq.c     **** 		int xs, ys;
3087:src/xeq.c     **** 
3088:src/xeq.c     **** 		xv = extract_value(getX_int(), &xs);
3089:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
3090:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
3091:src/xeq.c     **** 			ys = 0;
3092:src/xeq.c     **** 		} else
3093:src/xeq.c     **** 			yv = extract_value(get_reg_n_int(cmp), &ys);
3094:src/xeq.c     **** 
3095:src/xeq.c     **** 		if (xv == 0 && yv == 0)
3096:src/xeq.c     **** 			iszero = 1;
3097:src/xeq.c     **** 		else
3098:src/xeq.c     **** 			iszero = (xv == yv) && (xs == ys);
3099:src/xeq.c     **** 
3100:src/xeq.c     **** 		if (xs == ys) {		// same sign
3101:src/xeq.c     **** 			if (xs)		// both negative
3102:src/xeq.c     **** 				isneg = xv > yv;
3103:src/xeq.c     **** 			else		// both positive
3104:src/xeq.c     **** 				isneg = xv < yv;
ARM GAS  /tmp/cc0UaEmF.s 			page 65


3105:src/xeq.c     **** 		} else
3106:src/xeq.c     **** 			isneg = xs;	// opposite signs
3107:src/xeq.c     **** 	} else {
3108:src/xeq.c     **** 		decNumber t, x, r;
3109:src/xeq.c     **** 
3110:src/xeq.c     **** 		getX(&x);
3111:src/xeq.c     **** 		if (decNumberIsNaN(&x))
3112:src/xeq.c     **** 			goto flse;
3113:src/xeq.c     **** 
3114:src/xeq.c     **** 		getRegister(&t, cmp);
3115:src/xeq.c     **** 		if (decNumberIsNaN(&t))
3116:src/xeq.c     **** 			goto flse;
3117:src/xeq.c     **** 
3118:src/xeq.c     **** 		if (op == TST_APX) {
3119:src/xeq.c     **** 			decNumberRnd(&x, &x);
3120:src/xeq.c     **** 			if (cmp < CONST_REG_BASE)
3121:src/xeq.c     **** 				decNumberRnd(&t, &t);
3122:src/xeq.c     **** 		}
3123:src/xeq.c     **** 		dn_compare(&r, &x, &t);
3124:src/xeq.c     **** 		iszero = dn_eq0(&r);
3125:src/xeq.c     **** 		isneg = decNumberIsNegative(&r);
3126:src/xeq.c     **** 	}
3127:src/xeq.c     **** 
3128:src/xeq.c     **** 	switch (op) {
3129:src/xeq.c     **** 	case TST_APX:
3130:src/xeq.c     **** 	case TST_EQ:	a = iszero;		break;
3131:src/xeq.c     **** 	case TST_NE:	a = !iszero;		break;
3132:src/xeq.c     **** 	case TST_LT:	a = isneg && !iszero;	break;
3133:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
3134:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
3135:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
3136:src/xeq.c     **** 	default:	a = 0;			break;
3137:src/xeq.c     **** 	}
3138:src/xeq.c     **** 
3139:src/xeq.c     **** flse:	fin_tst(a);
3140:src/xeq.c     **** }
3141:src/xeq.c     **** 
3142:src/xeq.c     **** void check_zero(enum nilop op) {
3143:src/xeq.c     **** 	int neg;
3144:src/xeq.c     **** 	int zero;
3145:src/xeq.c     **** 
3146:src/xeq.c     **** 	if (is_intmode()) {
3147:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
3148:src/xeq.c     **** 		zero = (xv == 0);
3149:src/xeq.c     **** 	} else {
3150:src/xeq.c     **** 		decNumber x;
3151:src/xeq.c     **** 		getX(&x);
3152:src/xeq.c     **** 		neg = decNumberIsNegative(&x);
3153:src/xeq.c     **** 		zero = dn_eq0(&x);
3154:src/xeq.c     **** 	}
3155:src/xeq.c     **** 	if (op == OP_Xeq_pos0)
3156:src/xeq.c     **** 		fin_tst(zero && !neg);
3157:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
3158:src/xeq.c     **** 		fin_tst(zero && neg);
3159:src/xeq.c     **** }
3160:src/xeq.c     **** 
3161:src/xeq.c     **** void cmdtest(unsigned int arg, enum rarg op) {
ARM GAS  /tmp/cc0UaEmF.s 			page 66


3162:src/xeq.c     **** 	do_tst(arg, (enum tst_op)(op - RARG_TEST_EQ));
3163:src/xeq.c     **** }
3164:src/xeq.c     **** 
3165:src/xeq.c     **** static void do_ztst(const decNumber *re, const decNumber *im, enum tst_op op) {
3166:src/xeq.c     **** 	decNumber x, y;
3167:src/xeq.c     **** 
3168:src/xeq.c     **** 	process_cmdline_set_lift();
3169:src/xeq.c     **** 	if (is_intmode()) {
3170:src/xeq.c     **** 		bad_mode_error();
3171:src/xeq.c     **** 		return;
3172:src/xeq.c     **** 	}
3173:src/xeq.c     **** 	getXY(&x, &y);
3174:src/xeq.c     **** 	if (decNumberIsNaN(&x) || decNumberIsNaN(&y) || decNumberIsNaN(re) || decNumberIsNaN(im)) {
3175:src/xeq.c     **** 		fin_tst(0);
3176:src/xeq.c     **** 		return;
3177:src/xeq.c     **** 	}
3178:src/xeq.c     **** 	fin_tst((op == TST_EQ) == (dn_eq(&x, re) && dn_eq(&y, im)));
3179:src/xeq.c     **** }
3180:src/xeq.c     **** 
3181:src/xeq.c     **** void cmdztest(unsigned int arg, enum rarg op) {
3182:src/xeq.c     **** 	decNumber re, im;
3183:src/xeq.c     **** 	getRegister(&re, arg);
3184:src/xeq.c     **** 	getRegister(&im, arg + 1);
3185:src/xeq.c     **** 	do_ztst(&re, &im, (enum tst_op)(op - RARG_TEST_ZEQ));
3186:src/xeq.c     **** }
3187:src/xeq.c     **** 
3188:src/xeq.c     **** static int incdec(unsigned int arg, int inc) {
3189:src/xeq.c     **** 	if (is_intmode()) {
3190:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
3191:src/xeq.c     **** 		int xs;
3192:src/xeq.c     **** 		unsigned long long int xv;
3193:src/xeq.c     **** 
3194:src/xeq.c     **** 		if (inc)
3195:src/xeq.c     **** 			x = intAdd(x, 1LL);
3196:src/xeq.c     **** 		else
3197:src/xeq.c     **** 			x = intSubtract(x, 1LL);
3198:src/xeq.c     **** 		set_reg_n_int(arg, x);
3199:src/xeq.c     **** 
3200:src/xeq.c     **** 		xv = extract_value(x, &xs);
3201:src/xeq.c     **** 		return xv != 0;
3202:src/xeq.c     **** 	} else {
3203:src/xeq.c     **** 		decNumber x, y;
3204:src/xeq.c     **** 
3205:src/xeq.c     **** 		getRegister(&x, arg);
3206:src/xeq.c     **** 		if (inc)
3207:src/xeq.c     **** 			dn_inc(&x);
3208:src/xeq.c     **** 		else
3209:src/xeq.c     **** 			dn_dec(&x);
3210:src/xeq.c     **** 		setRegister(arg, &x);
3211:src/xeq.c     **** 		decNumberTrunc(&y, &x);
3212:src/xeq.c     **** 		return ! dn_eq0(&y);
3213:src/xeq.c     **** 	}
3214:src/xeq.c     **** }
3215:src/xeq.c     **** 
3216:src/xeq.c     **** void cmdlincdec(unsigned int arg, enum rarg op) {
3217:src/xeq.c     **** 	incdec(arg, op == RARG_INC);
3218:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 67


3219:src/xeq.c     **** 
3220:src/xeq.c     **** void cmdloopz(unsigned int arg, enum rarg op) {
3221:src/xeq.c     **** 	fin_tst(incdec(arg, op == RARG_ISZ));
3222:src/xeq.c     **** }
3223:src/xeq.c     **** 
3224:src/xeq.c     **** void cmdloop(unsigned int arg, enum rarg op) {
3225:src/xeq.c     **** 	if (is_intmode()) {
3226:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
3227:src/xeq.c     **** 		int xs;
3228:src/xeq.c     **** 		unsigned long long int xv;
3229:src/xeq.c     **** 
3230:src/xeq.c     **** 		if (op == RARG_ISG || op == RARG_ISE)
3231:src/xeq.c     **** 			x = intAdd(x, 1LL);
3232:src/xeq.c     **** 		else
3233:src/xeq.c     **** 			x = intSubtract(x, 1LL);
3234:src/xeq.c     **** 		set_reg_n_int(arg, x);
3235:src/xeq.c     **** 
3236:src/xeq.c     **** 		xv = extract_value(x, &xs);
3237:src/xeq.c     **** 		if (op == RARG_ISG)
3238:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
3239:src/xeq.c     **** 		else if (op == RARG_DSE)
3240:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
3241:src/xeq.c     **** 		else if (op == RARG_ISE)
3242:src/xeq.c     **** 			fin_tst(! (xs == 0 || xv == 0));	// >= 0
3243:src/xeq.c     **** 		else // if (op == RARG_DSL)
3244:src/xeq.c     **** 			fin_tst(! (xs != 0 && xv > 0));		// < 0
3245:src/xeq.c     **** 		return;
3246:src/xeq.c     **** 	} else {
3247:src/xeq.c     **** 		decNumber x, i, f, n, u;
3248:src/xeq.c     **** 
3249:src/xeq.c     **** 		getRegister(&x, arg);
3250:src/xeq.c     **** 
3251:src/xeq.c     **** 		// Break the number into the important bits
3252:src/xeq.c     **** 		// nnnnn.fffii
3253:src/xeq.c     **** 		dn_abs(&f, &x);
3254:src/xeq.c     **** 		decNumberTrunc(&n, &f);			// n = nnnnn
3255:src/xeq.c     **** 		dn_subtract(&u, &f, &n);		// u = .fffii
3256:src/xeq.c     **** 		if (decNumberIsNegative(&x))
3257:src/xeq.c     **** 			dn_minus(&n, &n);
3258:src/xeq.c     **** 		dn_mulpow10(&i, &u, 3);			// i = fff.ii
3259:src/xeq.c     **** 		decNumberTrunc(&f, &i);			// f = fff
3260:src/xeq.c     **** 		dn_subtract(&i, &i, &f);		// i = .ii
3261:src/xeq.c     **** 		dn_mul100(&x, &i);
3262:src/xeq.c     **** 		decNumberTrunc(&i, &x);			// i = ii
3263:src/xeq.c     **** 		if (dn_eq0(&i))
3264:src/xeq.c     **** 			dn_1(&i);
3265:src/xeq.c     **** 
3266:src/xeq.c     **** 		if (op == RARG_ISG || op == RARG_ISE) {
3267:src/xeq.c     **** 			dn_add(&n, &n, &i);
3268:src/xeq.c     **** 			dn_compare(&x, &f, &n);
3269:src/xeq.c     **** 			if (op == RARG_ISE)
3270:src/xeq.c     **** 				fin_tst(dn_gt0(&x));
3271:src/xeq.c     **** 			else
3272:src/xeq.c     **** 				fin_tst(dn_ge0(&x));
3273:src/xeq.c     **** 		} else {
3274:src/xeq.c     **** 			dn_subtract(&n, &n, &i);
3275:src/xeq.c     **** 			dn_compare(&x, &f, &n);
ARM GAS  /tmp/cc0UaEmF.s 			page 68


3276:src/xeq.c     **** 			if (op == RARG_DSL)
3277:src/xeq.c     **** 				fin_tst(dn_le0(&x));
3278:src/xeq.c     **** 			else
3279:src/xeq.c     **** 				fin_tst(dn_lt0(&x));
3280:src/xeq.c     **** 		}
3281:src/xeq.c     **** 
3282:src/xeq.c     **** 		// Finally rebuild the result
3283:src/xeq.c     **** 		if (decNumberIsNegative(&n)) {
3284:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
3285:src/xeq.c     **** 		} else
3286:src/xeq.c     **** 			dn_add(&x, &n, &u);
3287:src/xeq.c     **** 		setRegister(arg, &x);
3288:src/xeq.c     **** 	}
3289:src/xeq.c     **** }
3290:src/xeq.c     **** 
3291:src/xeq.c     **** 
3292:src/xeq.c     **** /* Shift a real number by 10 to the specified power
3293:src/xeq.c     ****  */
3294:src/xeq.c     **** void op_shift_digit(unsigned int n, enum rarg op) {
3295:src/xeq.c     **** 	decNumber x;
3296:src/xeq.c     **** 	int adjust = n;
3297:src/xeq.c     **** 
3298:src/xeq.c     **** 	if (is_intmode()) {
3299:src/xeq.c     **** 		bad_mode_error();
3300:src/xeq.c     **** 		return;
3301:src/xeq.c     **** 	}
3302:src/xeq.c     **** 	getX(&x);
3303:src/xeq.c     **** 	setlastX();
3304:src/xeq.c     **** 	if (decNumberIsSpecial(&x) || dn_eq0(&x))
3305:src/xeq.c     **** 		return;
3306:src/xeq.c     **** 	if (op == RARG_SRD)
3307:src/xeq.c     **** 		adjust = -adjust;
3308:src/xeq.c     **** 	x.exponent += adjust;
3309:src/xeq.c     **** 	setX(&x);
3310:src/xeq.c     **** }
3311:src/xeq.c     **** 
3312:src/xeq.c     **** 
3313:src/xeq.c     **** /* Return a pointer to the byte with the indicated flag in it.
3314:src/xeq.c     ****  * also return a byte with the relevant bit mask set up.
3315:src/xeq.c     ****  * Also, handle local flags.
3316:src/xeq.c     ****  */
3317:src/xeq.c     **** static unsigned short int *flag_word(int n, unsigned short int *mask) {
 457              		.loc 1 3317 71 is_stmt 1 view -0
 458              		.cfi_startproc
 459              		@ args = 0, pretend = 0, frame = 0
 460              		@ frame_needed = 0, uses_anonymous_args = 0
 461              		@ link register save eliminated.
3318:src/xeq.c     **** 	unsigned short int *p;
 462              		.loc 1 3318 2 view .LVU141
3319:src/xeq.c     **** 
3320:src/xeq.c     **** 	if (n >= LOCAL_FLAG_BASE) {
 463              		.loc 1 3320 2 view .LVU142
 464              		.loc 1 3320 5 is_stmt 0 view .LVU143
 465 0000 6F28     		cmp	r0, #111
3317:src/xeq.c     **** 	unsigned short int *p;
 466              		.loc 1 3317 71 view .LVU144
 467 0002 10B4     		push	{r4}
ARM GAS  /tmp/cc0UaEmF.s 			page 69


 468              		.cfi_def_cfa_offset 4
 469              		.cfi_offset 4, -4
 470              		.loc 1 3320 5 view .LVU145
 471 0004 29DD     		ble	.L42
3321:src/xeq.c     **** 		n -= LOCAL_FLAG_BASE;
 472              		.loc 1 3321 3 is_stmt 1 view .LVU146
 473              		.loc 1 3321 5 is_stmt 0 view .LVU147
 474 0006 7038     		subs	r0, r0, #112
 475              	.LVL39:
3322:src/xeq.c     **** 		if (n > XROM_SYSTEM_FLAG_BASE && XromFlags.xIN) {
 476              		.loc 1 3322 3 is_stmt 1 view .LVU148
 477              		.loc 1 3322 6 is_stmt 0 view .LVU149
 478 0008 0828     		cmp	r0, #8
 479 000a 04DD     		ble	.L43
 480              		.loc 1 3322 33 discriminator 1 view .LVU150
 481 000c 174B     		ldr	r3, .L54
 482 000e 93F90120 		ldrsb	r2, [r3, #1]
 483 0012 002A     		cmp	r2, #0
 484 0014 15DB     		blt	.L44
 485              	.L43:
3323:src/xeq.c     **** 			// XROM special
3324:src/xeq.c     **** 			p = &XromFlagWord;
3325:src/xeq.c     **** 		}
3326:src/xeq.c     **** 		else if (LocalRegs & 1) {
 486              		.loc 1 3326 8 is_stmt 1 view .LVU151
 487              		.loc 1 3326 12 is_stmt 0 view .LVU152
 488 0016 164B     		ldr	r3, .L54+4
 489 0018 1B68     		ldr	r3, [r3]
 490 001a B3F9DE27 		ldrsh	r2, [r3, #2014]
3327:src/xeq.c     **** 			// Odd frame: flags are at end of frame
3328:src/xeq.c     **** 			p = RetStk + LocalRegs + local_levels() - 1;
 491              		.loc 1 3328 44 view .LVU153
 492 001e 154B     		ldr	r3, .L54+8
3326:src/xeq.c     **** 			// Odd frame: flags are at end of frame
 493              		.loc 1 3326 11 view .LVU154
 494 0020 D407     		lsls	r4, r2, #31
 495              		.loc 1 3328 44 view .LVU155
 496 0022 1B68     		ldr	r3, [r3]
3326:src/xeq.c     **** 			// Odd frame: flags are at end of frame
 497              		.loc 1 3326 11 view .LVU156
 498 0024 1ED5     		bpl	.L45
 499              		.loc 1 3328 4 is_stmt 1 view .LVU157
 500              	.LBB1316:
 501              	.LBI1316:
 214:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 502              		.loc 1 214 5 view .LVU158
 503              	.LBB1317:
 215:src/xeq.c     **** }
 504              		.loc 1 215 2 view .LVU159
 215:src/xeq.c     **** }
 505              		.loc 1 215 57 is_stmt 0 view .LVU160
 506 0026 002A     		cmp	r2, #0
 507 0028 B8BF     		it	lt
 508 002a 33F81240 		ldrhlt	r4, [r3, r2, lsl #1]
 509              	.LBE1317:
 510              	.LBE1316:
 511              		.loc 1 3328 44 view .LVU161
ARM GAS  /tmp/cc0UaEmF.s 			page 70


 512 002e 02F10042 		add	r2, r2, #-2147483648
 513 0032 B4BF     		ite	lt
 514 0034 C4F30B04 		ubfxlt	r4, r4, #0, #12
 515              	.LBB1319:
 516              	.LBB1318:
 517 0038 0024     		movge	r4, #0
 518              	.LBE1318:
 519              	.LBE1319:
 520 003a 013A     		subs	r2, r2, #1
 521 003c 2244     		add	r2, r2, r4
 522              		.loc 1 3328 6 view .LVU162
 523 003e 03EB4203 		add	r3, r3, r2, lsl #1
 524              	.LVL40:
 525              	.L44:
3329:src/xeq.c     **** 		}
3330:src/xeq.c     **** 		else {
3331:src/xeq.c     **** 			// Even frame: Flags are at beginning of frame
3332:src/xeq.c     **** 			p = RetStk + LocalRegs + 1;
3333:src/xeq.c     **** 		}
3334:src/xeq.c     **** 	}
3335:src/xeq.c     **** 	else
3336:src/xeq.c     **** 		p = UserFlags;
3337:src/xeq.c     **** 
3338:src/xeq.c     **** 	if (mask != NULL)
 526              		.loc 1 3338 2 is_stmt 1 view .LVU163
 527              		.loc 1 3338 5 is_stmt 0 view .LVU164
 528 0042 21B1     		cbz	r1, .L47
3339:src/xeq.c     **** 		*mask = 1 << (n & 15);
 529              		.loc 1 3339 3 is_stmt 1 view .LVU165
 530              		.loc 1 3339 19 is_stmt 0 view .LVU166
 531 0044 00F00F04 		and	r4, r0, #15
 532              		.loc 1 3339 13 view .LVU167
 533 0048 0122     		movs	r2, #1
 534 004a A240     		lsls	r2, r2, r4
 535              		.loc 1 3339 9 view .LVU168
 536 004c 0A80     		strh	r2, [r1]	@ movhi
 537              	.L47:
3340:src/xeq.c     **** 	return p + (n >> 4);
 538              		.loc 1 3340 2 is_stmt 1 view .LVU169
 539              		.loc 1 3340 16 is_stmt 0 view .LVU170
 540 004e 0011     		asrs	r0, r0, #4
 541              	.LVL41:
3341:src/xeq.c     **** }
 542              		.loc 1 3341 1 view .LVU171
 543 0050 03EB4000 		add	r0, r3, r0, lsl #1
 544 0054 5DF8044B 		ldr	r4, [sp], #4
 545              		.cfi_remember_state
 546              		.cfi_restore 4
 547              		.cfi_def_cfa_offset 0
 548 0058 7047     		bx	lr
 549              	.LVL42:
 550              	.L42:
 551              		.cfi_restore_state
3336:src/xeq.c     **** 
 552              		.loc 1 3336 3 is_stmt 1 view .LVU172
3336:src/xeq.c     **** 
 553              		.loc 1 3336 7 is_stmt 0 view .LVU173
ARM GAS  /tmp/cc0UaEmF.s 			page 71


 554 005a 054B     		ldr	r3, .L54+4
3336:src/xeq.c     **** 
 555              		.loc 1 3336 5 view .LVU174
 556 005c 1B68     		ldr	r3, [r3]
 557 005e 03F5FE63 		add	r3, r3, #2032
 558              	.LVL43:
3336:src/xeq.c     **** 
 559              		.loc 1 3336 5 view .LVU175
 560 0062 EEE7     		b	.L44
 561              	.LVL44:
 562              	.L45:
3332:src/xeq.c     **** 		}
 563              		.loc 1 3332 4 is_stmt 1 view .LVU176
3332:src/xeq.c     **** 		}
 564              		.loc 1 3332 27 is_stmt 0 view .LVU177
 565 0064 0132     		adds	r2, r2, #1
3332:src/xeq.c     **** 		}
 566              		.loc 1 3332 6 view .LVU178
 567 0066 03EB4203 		add	r3, r3, r2, lsl #1
 568              	.LVL45:
3332:src/xeq.c     **** 		}
 569              		.loc 1 3332 6 view .LVU179
 570 006a EAE7     		b	.L44
 571              	.L55:
 572              		.align	2
 573              	.L54:
 574 006c 00000000 		.word	XromParams
 575 0070 00000000 		.word	main_ram
 576 0074 00000000 		.word	RetStk
 577              		.cfi_endproc
 578              	.LFE193:
 580              		.section	.text.set_zero,"ax",%progbits
 581              		.align	1
 582              		.p2align 2,,3
 583              		.syntax unified
 584              		.thumb
 585              		.thumb_func
 586              		.fpu fpv4-sp-d16
 588              	set_zero:
 589              	.LVL46:
 590              	.LFB102:
1360:src/xeq.c     **** 	zero_regs(x, 1);
 591              		.loc 1 1360 35 is_stmt 1 view -0
 592              		.cfi_startproc
 593              		@ args = 0, pretend = 0, frame = 0
 594              		@ frame_needed = 0, uses_anonymous_args = 0
 595              		@ link register save eliminated.
1361:src/xeq.c     **** }
 596              		.loc 1 1361 2 view .LVU181
 597              	.LBB1320:
 598              	.LBI1320:
1332:src/xeq.c     **** #if 0
 599              		.loc 1 1332 6 view .LVU182
 600              	.LBB1321:
1347:src/xeq.c     **** #endif
 601              		.loc 1 1347 2 view .LVU183
 602              	.LBB1322:
ARM GAS  /tmp/cc0UaEmF.s 			page 72


 603              	.LBI1322:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 604              		.loc 1 932 5 view .LVU184
 605              	.LBB1323:
 933:src/xeq.c     **** }
 606              		.loc 1 933 2 view .LVU185
 933:src/xeq.c     **** }
 607              		.loc 1 933 24 is_stmt 0 view .LVU186
 608 0000 074B     		ldr	r3, .L57
 609 0002 1B68     		ldr	r3, [r3]
 610 0004 B3F8E837 		ldrh	r3, [r3, #2024]
 611 0008 44F20102 		movw	r2, #16385
 612 000c 1A40     		ands	r2, r2, r3
 613              	.LBE1323:
 614              	.LBE1322:
1347:src/xeq.c     **** #endif
 615              		.loc 1 1347 2 view .LVU187
 616 000e B2F5804F 		cmp	r2, #16384
 617 0012 0CBF     		ite	eq
 618 0014 1022     		moveq	r2, #16
 619 0016 0822     		movne	r2, #8
 620 0018 0021     		movs	r1, #0
 621 001a FFF7FEBF 		b	xset
 622              	.LVL47:
 623              	.L58:
1347:src/xeq.c     **** #endif
 624              		.loc 1 1347 2 view .LVU188
 625 001e 00BF     		.align	2
 626              	.L57:
 627 0020 00000000 		.word	main_ram
 628              	.LBE1321:
 629              	.LBE1320:
 630              		.cfi_endproc
 631              	.LFE102:
 633              		.section	.text.intResult,"ax",%progbits
 634              		.align	1
 635              		.p2align 2,,3
 636              		.syntax unified
 637              		.thumb
 638              		.thumb_func
 639              		.fpu fpv4-sp-d16
 641              	intResult:
 642              	.LVL48:
 643              	.LFB234:
3342:src/xeq.c     **** 
3343:src/xeq.c     **** int get_user_flag(int n) {
3344:src/xeq.c     **** 	unsigned short mask;
3345:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
3346:src/xeq.c     **** 
3347:src/xeq.c     **** 	return (*f & mask)? 1 : 0;
3348:src/xeq.c     **** }
3349:src/xeq.c     **** 
3350:src/xeq.c     **** void put_user_flag(int n, int f) {
3351:src/xeq.c     **** 	if (f)	set_user_flag(n);
3352:src/xeq.c     **** 	else	clr_user_flag(n);
3353:src/xeq.c     **** }
3354:src/xeq.c     **** 
ARM GAS  /tmp/cc0UaEmF.s 			page 73


3355:src/xeq.c     **** #ifndef set_user_flag
3356:src/xeq.c     **** void set_user_flag(int n) {
3357:src/xeq.c     **** 	unsigned short mask;
3358:src/xeq.c     **** 	unsigned short *const f = flag_word(n, &mask);
3359:src/xeq.c     **** 
3360:src/xeq.c     **** 	*f |= mask;
3361:src/xeq.c     **** }
3362:src/xeq.c     **** 
3363:src/xeq.c     **** void clr_user_flag(int n) {
3364:src/xeq.c     **** 	unsigned short mask;
3365:src/xeq.c     **** 	unsigned short *const f = flag_word(n, &mask);
3366:src/xeq.c     **** 
3367:src/xeq.c     **** 	*f &= ~mask;
3368:src/xeq.c     **** }
3369:src/xeq.c     **** #endif
3370:src/xeq.c     **** 
3371:src/xeq.c     **** void cmdflag(unsigned int arg, enum rarg op) {
3372:src/xeq.c     **** 	unsigned short mask;
3373:src/xeq.c     **** 	unsigned short *const f = flag_word(arg, &mask);
3374:src/xeq.c     **** 	int flg = *f & mask;
3375:src/xeq.c     **** 
3376:src/xeq.c     **** 	switch (op) {
3377:src/xeq.c     **** 	case RARG_SF:	flg = 1;			   break;
3378:src/xeq.c     **** 	case RARG_CF:	flg = 0;			   break;
3379:src/xeq.c     **** 	case RARG_FF:	flg = flg? 0 : 1;		   break;
3380:src/xeq.c     **** 
3381:src/xeq.c     **** 	case RARG_FS:	fin_tst(flg);			   return;
3382:src/xeq.c     **** 	case RARG_FC:	fin_tst(! flg);			   return;
3383:src/xeq.c     **** 
3384:src/xeq.c     **** 	case RARG_FSC:	fin_tst(flg); flg = 0;		   break;
3385:src/xeq.c     **** 	case RARG_FSS:	fin_tst(flg); flg = 1;		   break;
3386:src/xeq.c     **** 	case RARG_FSF:	fin_tst(flg); flg = flg ? 0 : 1;   break;
3387:src/xeq.c     **** 
3388:src/xeq.c     **** 	case RARG_FCC:	fin_tst(! flg);	flg = 0;	   break;
3389:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
3390:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
3391:src/xeq.c     **** 
3392:src/xeq.c     **** 	default:
3393:src/xeq.c     **** 		return;
3394:src/xeq.c     **** 	}
3395:src/xeq.c     **** 
3396:src/xeq.c     **** 	// And write the value back
3397:src/xeq.c     **** 	if (flg)
3398:src/xeq.c     **** 		*f |= mask;
3399:src/xeq.c     **** 	else
3400:src/xeq.c     **** 		*f &= ~mask;
3401:src/xeq.c     **** 
3402:src/xeq.c     **** 	if ( arg == A_FLAG ) {
3403:src/xeq.c     **** 		dot( BIG_EQ, flg );
3404:src/xeq.c     **** 		finish_display(); // BIG_EQ
3405:src/xeq.c     **** 	}
3406:src/xeq.c     **** }
3407:src/xeq.c     **** 
3408:src/xeq.c     **** /* Reset all flags to off/false
3409:src/xeq.c     ****  */
3410:src/xeq.c     **** void clrflags(enum nilop op) {
3411:src/xeq.c     **** 	xset(UserFlags, 0, sizeof(UserFlags));
ARM GAS  /tmp/cc0UaEmF.s 			page 74


3412:src/xeq.c     **** 	if (LocalRegs < 0) {
3413:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
3414:src/xeq.c     **** 	}
3415:src/xeq.c     **** }
3416:src/xeq.c     **** 
3417:src/xeq.c     **** 
3418:src/xeq.c     **** /* Integer word size
3419:src/xeq.c     ****  */
3420:src/xeq.c     **** void intws(unsigned int arg, enum rarg op) {
3421:src/xeq.c     **** 	if (is_intmode()) {
3422:src/xeq.c     **** 		int i, ss = stack_size();
3423:src/xeq.c     **** 		unsigned int oldlen = UState.int_len;
3424:src/xeq.c     **** 		long long int v;
3425:src/xeq.c     **** 
3426:src/xeq.c     **** 		for (i=0; i<ss; i++) {
3427:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
3428:src/xeq.c     **** 			UState.int_len = arg;
3429:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, mask_value(v));
3430:src/xeq.c     **** 			UState.int_len = oldlen;
3431:src/xeq.c     **** 		}
3432:src/xeq.c     **** 		v = mask_value(get_reg_n_int(regL_idx));
3433:src/xeq.c     **** 		UState.int_len = arg;
3434:src/xeq.c     **** 		set_reg_n_int(regL_idx, mask_value(v));
3435:src/xeq.c     **** 	} else
3436:src/xeq.c     **** 	    UState.int_len = arg;
3437:src/xeq.c     **** }
3438:src/xeq.c     **** 
3439:src/xeq.c     **** 
3440:src/xeq.c     **** /* Convert from a real to a fraction
3441:src/xeq.c     ****  */
3442:src/xeq.c     **** 
3443:src/xeq.c     **** void get_maxdenom(decNumber *d) {
3444:src/xeq.c     **** 	const unsigned int dm = UState.denom_max;
3445:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
3446:src/xeq.c     **** }
3447:src/xeq.c     **** 
3448:src/xeq.c     **** void op_2frac(enum nilop op) {
3449:src/xeq.c     **** 	decNumber z, n, d, t;
3450:src/xeq.c     **** 
3451:src/xeq.c     **** 	if (UState.intm) {
3452:src/xeq.c     **** 		setX_int(1);
3453:src/xeq.c     **** 		return;
3454:src/xeq.c     **** 	}
3455:src/xeq.c     **** 
3456:src/xeq.c     **** 	getY(&z);			// Stack has been lifted already
3457:src/xeq.c     **** 	decNumber2Fraction(&n, &d, &z);
3458:src/xeq.c     **** 	setXY(&d, &n);			// Set numerator and denominator
3459:src/xeq.c     **** 	if (State2.runmode) {
3460:src/xeq.c     **** 		dn_divide(&t, &n, &d);
3461:src/xeq.c     **** 		dn_compare(&n, &t, &z);
3462:src/xeq.c     **** 		if (dn_eq0(&n))
3463:src/xeq.c     **** 			DispMsg = "y/x =";
3464:src/xeq.c     **** 		else if (decNumberIsNegative(&n))
3465:src/xeq.c     **** #ifdef INCLUDE_FONT_ESCAPE
3466:src/xeq.c     **** 			DispMsg = "y/x \007\344<";
3467:src/xeq.c     **** 		else
3468:src/xeq.c     **** 			DispMsg = "y/x \007\344>";
ARM GAS  /tmp/cc0UaEmF.s 			page 75


3469:src/xeq.c     **** #else
3470:src/xeq.c     **** 			DispMsg = "y/x <";
3471:src/xeq.c     **** 		else
3472:src/xeq.c     **** 			DispMsg = "y/x >";
3473:src/xeq.c     **** #endif
3474:src/xeq.c     **** 	}
3475:src/xeq.c     **** }
3476:src/xeq.c     **** 
3477:src/xeq.c     **** void op_fracdenom(enum nilop op) {
3478:src/xeq.c     **** 	int s;
3479:src/xeq.c     **** 	unsigned long long int i;
3480:src/xeq.c     **** 
3481:src/xeq.c     **** 	i = getX_int_sgn(&s);
3482:src/xeq.c     **** 	if (i > 9999)
3483:src/xeq.c     **** 		UState.denom_max = 0;
3484:src/xeq.c     **** 	else if (i != 1)
3485:src/xeq.c     **** 		UState.denom_max = (unsigned int) i;
3486:src/xeq.c     **** 	else {
3487:src/xeq.c     **** 		setlastX();
3488:src/xeq.c     **** 		setX_int_sgn(UState.denom_max, 0);
3489:src/xeq.c     **** 	}
3490:src/xeq.c     **** }
3491:src/xeq.c     **** 
3492:src/xeq.c     **** 
3493:src/xeq.c     **** /*  Switching from an integer mode to real mode
3494:src/xeq.c     ****  *  We convert the stack and LastX 
3495:src/xeq.c     ****  */
3496:src/xeq.c     **** static const unsigned short int StackRegMask[] = { 0x10f, 0x1ff };
3497:src/xeq.c     **** 
3498:src/xeq.c     **** void op_float(enum nilop op) {
3499:src/xeq.c     **** 
3500:src/xeq.c     **** 	if (is_intmode()) {
3501:src/xeq.c     **** 		int i;
3502:src/xeq.c     **** 		int mask = StackRegMask[UState.stack_depth];
3503:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
3504:src/xeq.c     **** 			if (mask & 1) {
3505:src/xeq.c     **** 				// register belongs to stack
3506:src/xeq.c     **** 				register_from_int(i, i, op == OP_FLOAT_XIN);
3507:src/xeq.c     **** 			}
3508:src/xeq.c     **** 			else if (is_dblmode()) {
3509:src/xeq.c     **** 				// expand the other registers which have been left
3510:src/xeq.c     **** 				// in decimal64 format by the integer mode switch
3511:src/xeq.c     **** 				packed128_from_packed(&(get_reg_n(i)->d), Regs + i);
3512:src/xeq.c     **** 			}
3513:src/xeq.c     **** 		}
3514:src/xeq.c     **** 	}
3515:src/xeq.c     **** 	if (op != OP_FLOAT_XIN && op != OP_FLOAT_RCLM) {
3516:src/xeq.c     **** 		UState.fract = 0;
3517:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
3518:src/xeq.c     **** 	}
3519:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
3520:src/xeq.c     **** }
3521:src/xeq.c     **** 
3522:src/xeq.c     **** /*  Switch to integer mode.
3523:src/xeq.c     ****  *  We convert the stack and LastX
3524:src/xeq.c     ****  */
3525:src/xeq.c     **** static void switch_to_int(void) {
ARM GAS  /tmp/cc0UaEmF.s 			page 76


3526:src/xeq.c     **** 	int i;
3527:src/xeq.c     **** 	int mask = StackRegMask[UState.stack_depth];
3528:src/xeq.c     **** 	const int dbl = is_dblmode();
3529:src/xeq.c     **** 
3530:src/xeq.c     **** 	for (i = regK_idx; i >= regX_idx; --i, mask <<= 1) {
3531:src/xeq.c     **** 		if (mask & 0x800) {
3532:src/xeq.c     **** 			// register belongs to stack
3533:src/xeq.c     **** 			int_from_register(i, i);
3534:src/xeq.c     **** 		}
3535:src/xeq.c     **** 		else if (dbl) {
3536:src/xeq.c     **** 			// compress the other registers to save them while integer mode is active
3537:src/xeq.c     **** 			packed_from_packed128(Regs + i, &(get_reg_n(i)->d));
3538:src/xeq.c     **** 		}
3539:src/xeq.c     **** 	}
3540:src/xeq.c     **** }
3541:src/xeq.c     **** 
3542:src/xeq.c     **** static void set_base(unsigned int b) {
3543:src/xeq.c     **** 	UState.int_base = b - 1;
3544:src/xeq.c     **** 	if (!is_intmode())
3545:src/xeq.c     **** 		switch_to_int();
3546:src/xeq.c     **** }
3547:src/xeq.c     **** 
3548:src/xeq.c     **** void set_int_base(unsigned int arg, enum rarg op) {
3549:src/xeq.c     **** 	if (arg < 2) {
3550:src/xeq.c     **** 		if (arg == 0)
3551:src/xeq.c     **** 			op_float(OP_FLOAT);
3552:src/xeq.c     **** 		else
3553:src/xeq.c     **** 			op_fract(OP_FRACT);
3554:src/xeq.c     **** 	} else
3555:src/xeq.c     **** 		set_base(arg);
3556:src/xeq.c     **** }
3557:src/xeq.c     **** 
3558:src/xeq.c     **** 
3559:src/xeq.c     **** void op_fract(enum nilop op) {
3560:src/xeq.c     **** 	op_float(OP_FLOAT);
3561:src/xeq.c     **** 	UState.fract = 1;
3562:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
3563:src/xeq.c     **** 		UState.improperfrac = 1;
3564:src/xeq.c     **** 	else if (op == OP_FRACPROPER)
3565:src/xeq.c     **** 		UState.improperfrac = 0;
3566:src/xeq.c     **** }
3567:src/xeq.c     **** 
3568:src/xeq.c     **** #ifdef INCLUDE_USER_MODE
3569:src/xeq.c     **** /* Save and restore user state.
3570:src/xeq.c     ****  */
3571:src/xeq.c     **** void cmdsavem(unsigned int arg, enum rarg op) {
3572:src/xeq.c     **** 	xcopy( get_reg_n(arg), &UState, sizeof(unsigned long long int) );
3573:src/xeq.c     **** }
3574:src/xeq.c     **** 
3575:src/xeq.c     **** void cmdrestm(unsigned int arg, enum rarg op) {
3576:src/xeq.c     **** 	const int dbl = is_dblmode();
3577:src/xeq.c     **** 	const int intm = is_intmode();
3578:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
3579:src/xeq.c     **** 
3580:src/xeq.c     **** 	// Fix things
3581:src/xeq.c     **** 	if ( UState.contrast == 0 )
3582:src/xeq.c     **** 		UState.contrast = 6;
ARM GAS  /tmp/cc0UaEmF.s 			page 77


3583:src/xeq.c     **** 
3584:src/xeq.c     **** 	if (intm != is_intmode()) {
3585:src/xeq.c     **** 		// Switch back to decimal or integer mode
3586:src/xeq.c     **** 		UState.intm = intm;
3587:src/xeq.c     **** 		if (intm)
3588:src/xeq.c     **** 			op_float(OP_FLOAT_RCLM);
3589:src/xeq.c     **** 		else
3590:src/xeq.c     **** 			switch_to_int();
3591:src/xeq.c     **** 	}
3592:src/xeq.c     **** 	if (! is_intmode() && dbl != is_dblmode()) {
3593:src/xeq.c     **** 		// Switch back to double/single precision
3594:src/xeq.c     **** 		UState.mode_double = dbl;
3595:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
3596:src/xeq.c     **** 	}
3597:src/xeq.c     **** }
3598:src/xeq.c     **** #endif
3599:src/xeq.c     **** 
3600:src/xeq.c     **** /* Process a single digit.
3601:src/xeq.c     ****  */
3602:src/xeq.c     **** #if 0 // unused
3603:src/xeq.c     **** static int is_digit(const char c) {
3604:src/xeq.c     **** 	if (c >= '0' && c <= '9')
3605:src/xeq.c     **** 		return 1;
3606:src/xeq.c     **** 	return 0;
3607:src/xeq.c     **** }
3608:src/xeq.c     **** 
3609:src/xeq.c     **** static int is_xdigit(const char c) {
3610:src/xeq.c     **** 	if (is_digit(c) || (c >= 'A' && c <= 'F'))
3611:src/xeq.c     **** 		return 1;
3612:src/xeq.c     **** 	return 0;
3613:src/xeq.c     **** }
3614:src/xeq.c     **** #endif
3615:src/xeq.c     **** 
3616:src/xeq.c     **** static void digit(unsigned int c) {
3617:src/xeq.c     **** 	const int intm = is_intmode();
3618:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
3619:src/xeq.c     **** 
3620:src/xeq.c     **** 	if (Cmdline[0] == '-')
3621:src/xeq.c     **** 		lim++;
3622:src/xeq.c     **** 	if (intm) {
3623:src/xeq.c     **** 		if (c >= int_base()) {
3624:src/xeq.c     **** 			report_warn(ERR_DIGIT);
3625:src/xeq.c     **** 			return;
3626:src/xeq.c     **** 		}
3627:src/xeq.c     **** 	} else {
3628:src/xeq.c     **** 		if (c >= 10) {
3629:src/xeq.c     **** 			report_warn(ERR_DIGIT);
3630:src/xeq.c     **** 			return;
3631:src/xeq.c     **** 		}
3632:src/xeq.c     **** 
3633:src/xeq.c     **** 		if (CmdLineEex) {
3634:src/xeq.c     **** 			lim = CMDLINELEN;
3635:src/xeq.c     **** #ifdef SHIFT_EXPONENT
3636:src/xeq.c     **** 			if (CmdLineLength >= lim) {
3637:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
3638:src/xeq.c     **** 
3639:src/xeq.c     **** 				if (*p == '-')
ARM GAS  /tmp/cc0UaEmF.s 			page 78


3640:src/xeq.c     **** 					p++;
3641:src/xeq.c     **** 				while (p < &Cmdline[CMDLINELEN]) {
3642:src/xeq.c     **** 					p[0] = p[1];
3643:src/xeq.c     **** 					p++;
3644:src/xeq.c     **** 				}
3645:src/xeq.c     **** 				CmdLineLength--;
3646:src/xeq.c     **** 			}
3647:src/xeq.c     **** #endif
3648:src/xeq.c     **** 		}
3649:src/xeq.c     **** 		else {
3650:src/xeq.c     **** 			lim += CmdLineDot;
3651:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
3652:src/xeq.c     **** 			if (CmdLineDot >= 2) {
3653:src/xeq.c     **** #  ifdef FRACTION_ENTRY_OVERFLOW_LEFT
3654:src/xeq.c     **** 				// Make space for the minus sign
3655:src/xeq.c     **** 				lim = CMDLINELEN - (Cmdline[0] != '-');
3656:src/xeq.c     **** #  elif defined(INCLUDE_DOUBLEDOT_FRACTIONS)
3657:src/xeq.c     **** 				lim += 1 + (find_char(Cmdline, '.')[1] == '.');
3658:src/xeq.c     **** #  else
3659:src/xeq.c     **** 				lim++;
3660:src/xeq.c     **** #  endif
3661:src/xeq.c     **** 			}
3662:src/xeq.c     **** #endif
3663:src/xeq.c     **** 		}
3664:src/xeq.c     **** 	}
3665:src/xeq.c     **** 	if (CmdLineLength >= lim
3666:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
3667:src/xeq.c     **** 		report_warn(ERR_TOO_LONG);
3668:src/xeq.c     **** 		return;
3669:src/xeq.c     **** 	}
3670:src/xeq.c     **** 
3671:src/xeq.c     **** 	if (c >= 10)
3672:src/xeq.c     **** 		append_cmdline(c - 10 + 'A');
3673:src/xeq.c     **** 	else {
3674:src/xeq.c     **** 		// Leading zeros in the exponent aren't visible to the user,
3675:src/xeq.c     **** 		// and they're removed automatically if digits are shifted,
3676:src/xeq.c     **** 		// so it's more consistent if they can't be entered, either.
3677:src/xeq.c     **** 		if (c == 0 && CmdLineEex) {
3678:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
3679:src/xeq.c     **** 				return;
3680:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3681:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'D')
3682:src/xeq.c     **** 				return;
3683:src/xeq.c     **** #else
3684:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == '-')
3685:src/xeq.c     **** 				return;
3686:src/xeq.c     **** #endif
3687:src/xeq.c     **** 		}
3688:src/xeq.c     **** 
3689:src/xeq.c     **** 		append_cmdline(c + '0');
3690:src/xeq.c     **** 
3691:src/xeq.c     **** 		if (CmdLineEex)
3692:src/xeq.c     **** 			exponent_adjusted(1);
3693:src/xeq.c     **** 	}
3694:src/xeq.c     **** }
3695:src/xeq.c     **** 
3696:src/xeq.c     **** 
ARM GAS  /tmp/cc0UaEmF.s 			page 79


3697:src/xeq.c     **** void set_entry() {
3698:src/xeq.c     **** 	if (!Running && !XromRunning)
3699:src/xeq.c     **** 		State.entryp = 1;
3700:src/xeq.c     **** }
3701:src/xeq.c     **** 
3702:src/xeq.c     **** 
3703:src/xeq.c     **** /* Decode and process the specials.  These are niladic functions and
3704:src/xeq.c     ****  * commands with non-standard stack operation.
3705:src/xeq.c     ****  */
3706:src/xeq.c     **** static void specials(const opcode op) {
3707:src/xeq.c     **** 	int opm = argKIND(op);
3708:src/xeq.c     **** 
3709:src/xeq.c     **** 	switch (opm) {
3710:src/xeq.c     **** 	case OP_0:	case OP_1:	case OP_2:
3711:src/xeq.c     **** 	case OP_3:	case OP_4:	case OP_5:
3712:src/xeq.c     **** 	case OP_6:	case OP_7:	case OP_8:
3713:src/xeq.c     **** 	case OP_9:	case OP_A:	case OP_B:
3714:src/xeq.c     **** 	case OP_C:	case OP_D:	case OP_E:
3715:src/xeq.c     **** 	case OP_F:
3716:src/xeq.c     **** 		digit(opm - OP_0);
3717:src/xeq.c     **** 		break;
3718:src/xeq.c     **** 
3719:src/xeq.c     **** 	case OP_DOT:
3720:src/xeq.c     **** 		if (is_intmode())
3721:src/xeq.c     **** 			break;
3722:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
3723:src/xeq.c     **** 		if (CmdLineDot < 2 && !CmdLineEex && CmdLineLength < 13 + CmdLineDot) {
3724:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
3725:src/xeq.c     **** #else
3726:src/xeq.c     **** #  if defined(PRETTY_FRACTION_ENTRY)
3727:src/xeq.c     **** 		if (CmdLineDot < 2 && !CmdLineEex && CmdLineLength < 12 + 2*CmdLineDot) {
3728:src/xeq.c     **** #  else
3729:src/xeq.c     **** 		if (CmdLineDot < 2 && !CmdLineEex && CmdLineLength < 12 + CmdLineDot) {
3730:src/xeq.c     **** #  endif
3731:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '.'
3732:src/xeq.c     ****                             || Cmdline[CmdLineLength-1] == '-')
3733:src/xeq.c     **** #endif
3734:src/xeq.c     **** 				digit(0);
3735:src/xeq.c     **** 			CmdLineDot++;
3736:src/xeq.c     **** 			append_cmdline('.');
3737:src/xeq.c     **** 		}
3738:src/xeq.c     **** 		break;
3739:src/xeq.c     **** 
3740:src/xeq.c     **** 	case OP_EEX:
3741:src/xeq.c     **** 		if (is_intmode())
3742:src/xeq.c     **** 			break;
3743:src/xeq.c     **** 		else {
3744:src/xeq.c     **** #if INCLUDE_EEX_PI == 2
3745:src/xeq.c     **** 			const int eex_pi = 1;
3746:src/xeq.c     **** #elif INCLUDE_EEX_PI == 1
3747:src/xeq.c     **** 			const int eex_pi = get_user_flag(regL_idx);
3748:src/xeq.c     **** #else
3749:src/xeq.c     **** 			const int eex_pi = 0;
3750:src/xeq.c     **** #endif
3751:src/xeq.c     **** 
3752:src/xeq.c     **** 			if (CmdLineDot == 2) {
3753:src/xeq.c     **** 				if (eex_pi) {
ARM GAS  /tmp/cc0UaEmF.s 			page 80


3754:src/xeq.c     **** 					// fraction entered (two dots); execute ENTER and enter pi
3755:src/xeq.c     **** 					if (is_bad_cmdline()) {
3756:src/xeq.c     **** 						if (Running || XromRunning)
3757:src/xeq.c     **** 							report_err(ERR_DOMAIN);
3758:src/xeq.c     **** 						break;
3759:src/xeq.c     **** 					}
3760:src/xeq.c     **** 					process_cmdline();
3761:src/xeq.c     **** 					lift();
3762:src/xeq.c     **** 					copyreg(StackBase, get_const(OP_PI, is_dblmode()));
3763:src/xeq.c     **** 					set_lift();
3764:src/xeq.c     **** 				}
3765:src/xeq.c     **** 				break;
3766:src/xeq.c     **** 			}
3767:src/xeq.c     **** 			if (CmdLineEex || CmdLineLength >= CMDLINELEN)
3768:src/xeq.c     **** 				break;
3769:src/xeq.c     **** 			if (eex_pi && CmdLineLength == 0) {
3770:src/xeq.c     **** 				// empty command line: enter pi
3771:src/xeq.c     **** 				lift_if_enabled();
3772:src/xeq.c     **** 				copyreg(StackBase, get_const(OP_PI, is_dblmode()));
3773:src/xeq.c     **** 				set_lift();
3774:src/xeq.c     **** 				break;
3775:src/xeq.c     **** 			}
3776:src/xeq.c     **** #if !(FRACTION_MODE_INPUT & 1)
3777:src/xeq.c     **** 			if (UState.fract)
3778:src/xeq.c     **** 				break;
3779:src/xeq.c     **** #endif
3780:src/xeq.c     **** 			if (CmdLineLength == 0)
3781:src/xeq.c     **** 				digit(1);
3782:src/xeq.c     **** 			CmdLineEex = CmdLineLength;
3783:src/xeq.c     **** 			append_cmdline('E');
3784:src/xeq.c     **** 		}
3785:src/xeq.c     **** 		break;
3786:src/xeq.c     **** 
3787:src/xeq.c     **** 	case OP_CHS:
3788:src/xeq.c     **** 		if (CmdLineLength)
3789:src/xeq.c     **** 			cmdlinechs();
3790:src/xeq.c     **** 		else if (is_intmode()) {
3791:src/xeq.c     **** 			setX_int(intChs(getX_int()));
3792:src/xeq.c     **** 			set_lift();
3793:src/xeq.c     **** 		} else {
3794:src/xeq.c     **** 			decNumber x, r;
3795:src/xeq.c     **** 
3796:src/xeq.c     **** 			getX(&x);
3797:src/xeq.c     **** 			dn_minus(&r, &x);
3798:src/xeq.c     **** 			setX(&r);
3799:src/xeq.c     **** 			set_lift();
3800:src/xeq.c     **** 		}
3801:src/xeq.c     **** 		break;
3802:src/xeq.c     **** 
3803:src/xeq.c     **** 	case OP_CLX:
3804:src/xeq.c     **** 		if (Running)
3805:src/xeq.c     **** 			illegal(op);
3806:src/xeq.c     **** 		else if (CmdLineLength) {
3807:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3808:src/xeq.c     **** 			if (CmdLineEex != 0 && Cmdline[CmdLineLength-1] == 'D') {
3809:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
3810:src/xeq.c     **** 				break;
ARM GAS  /tmp/cc0UaEmF.s 			page 81


3811:src/xeq.c     **** 			}
3812:src/xeq.c     **** #endif
3813:src/xeq.c     **** 			CmdLineLength--;
3814:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
3815:src/xeq.c     **** 				CmdLineEex = 0;
3816:src/xeq.c     **** 			else if (Cmdline[CmdLineLength] == '.')
3817:src/xeq.c     **** 				CmdLineDot--;
3818:src/xeq.c     **** 		} else
3819:src/xeq.c     **** 			clrx(OP_rCLX);
3820:src/xeq.c     **** 		break;
3821:src/xeq.c     **** 
3822:src/xeq.c     **** 	case OP_ENTER:
3823:src/xeq.c     **** 		process_cmdline();
3824:src/xeq.c     **** 		lift();
3825:src/xeq.c     **** 		clr_lift();
3826:src/xeq.c     **** 		break;
3827:src/xeq.c     **** 
3828:src/xeq.c     **** 	case OP_SIGMAPLUS:
3829:src/xeq.c     **** 	case OP_SIGMAMINUS:
3830:src/xeq.c     **** 		if (is_intmode()) {
3831:src/xeq.c     **** 			bad_mode_error();
3832:src/xeq.c     **** 			break;
3833:src/xeq.c     **** 		}
3834:src/xeq.c     **** 		process_cmdline();
3835:src/xeq.c     **** 		clr_lift();
3836:src/xeq.c     **** 		setlastX();
3837:src/xeq.c     **** 		if (opm == OP_SIGMAPLUS)
3838:src/xeq.c     **** 			sigma_plus();
3839:src/xeq.c     **** 		else
3840:src/xeq.c     **** 			sigma_minus();
3841:src/xeq.c     **** 		sigma_val(OP_sigmaN);
3842:src/xeq.c     **** 		break;
3843:src/xeq.c     **** 
3844:src/xeq.c     **** 	// Conditional tests vs registers....
3845:src/xeq.c     **** 	case OP_Xeq0:	case OP_Xlt0:	case OP_Xgt0:
3846:src/xeq.c     **** 	case OP_Xne0:	case OP_Xle0:	case OP_Xge0:
3847:src/xeq.c     **** 	case OP_Xapx0:
3848:src/xeq.c     **** 		do_tst(CONST_REG_BASE + OP_ZERO, (enum tst_op)(opm - OP_Xeq0));
3849:src/xeq.c     **** 		break;
3850:src/xeq.c     **** 	case OP_Zeq0: case OP_Zne0:
3851:src/xeq.c     **** 		do_ztst(&const_0, &const_0, (enum tst_op)(opm - OP_Zeq0));
3852:src/xeq.c     **** 		break;
3853:src/xeq.c     **** 
3854:src/xeq.c     **** 	case OP_Xeq1:	case OP_Xlt1:	case OP_Xgt1:
3855:src/xeq.c     **** 	case OP_Xne1:	case OP_Xle1:	case OP_Xge1:
3856:src/xeq.c     **** 	case OP_Xapx1:
3857:src/xeq.c     **** 		do_tst(CONST_REG_BASE + OP_ONE, (enum tst_op)(opm - OP_Xeq1));
3858:src/xeq.c     **** 		break;
3859:src/xeq.c     **** 	case OP_Zeq1:	case OP_Zne1:
3860:src/xeq.c     **** 		do_ztst(&const_1, &const_0, (enum tst_op)(opm - OP_Zeq1));
3861:src/xeq.c     **** 		break;
3862:src/xeq.c     **** 	case OP_Zeqi:	case OP_Znei:
3863:src/xeq.c     **** 		do_ztst(&const_0, &const_1, (enum tst_op)(opm - OP_Zeqi));
3864:src/xeq.c     **** 		break;
3865:src/xeq.c     **** 
3866:src/xeq.c     **** 	default:
3867:src/xeq.c     **** 		illegal(op);
ARM GAS  /tmp/cc0UaEmF.s 			page 82


3868:src/xeq.c     **** 	}
3869:src/xeq.c     **** }
3870:src/xeq.c     **** 
3871:src/xeq.c     **** enum trig_modes get_trig_mode(void) {
3872:src/xeq.c     **** 	if (State2.cmplx || XromFlags.xIN)
3873:src/xeq.c     **** 		return TRIG_RAD;
3874:src/xeq.c     **** 	//if (State2.hyp)	return TRIG_RAD;
3875:src/xeq.c     **** 	return (enum trig_modes) UState.trigmode;
3876:src/xeq.c     **** }
3877:src/xeq.c     **** 
3878:src/xeq.c     **** void op_double(enum nilop op) {
3879:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
3880:src/xeq.c     **** 	const int intm = is_intmode();
3881:src/xeq.c     **** 	int i;
3882:src/xeq.c     **** 
3883:src/xeq.c     **** 	if (dbl != UState.mode_double) {
3884:src/xeq.c     **** 		// Mode switch
3885:src/xeq.c     **** 		if (dbl) {
3886:src/xeq.c     **** 			if (NumRegs < STACK_SIZE + EXTRA_REG) {
3887:src/xeq.c     **** 				// Need space for double precision stack
3888:src/xeq.c     **** 				cmdregs(STACK_SIZE + EXTRA_REG, RARG_REGS);
3889:src/xeq.c     **** 				if (Error) {
3890:src/xeq.c     **** 					return;
3891:src/xeq.c     **** 				}
3892:src/xeq.c     **** 			}
3893:src/xeq.c     **** 
3894:src/xeq.c     **** 			UState.mode_double = 1;
3895:src/xeq.c     **** 			if (! intm) {
3896:src/xeq.c     **** 				// Convert X to K to double precision
3897:src/xeq.c     **** 				// Avoid this in integer mode
3898:src/xeq.c     **** 				for (i = 0; i < STACK_SIZE + EXTRA_REG; ++i)
3899:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
3900:src/xeq.c     **** 			}
3901:src/xeq.c     **** 		}
3902:src/xeq.c     **** 		else {
3903:src/xeq.c     **** 			if (! intm) {
3904:src/xeq.c     **** 				// Convert X to K to single precision
3905:src/xeq.c     **** 				// Avoid this in integer mode
3906:src/xeq.c     **** 				for (i = STACK_SIZE + EXTRA_REG - 1; i >= 0; --i)
3907:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
3908:src/xeq.c     **** 			}
3909:src/xeq.c     **** 			UState.mode_double = 0;
3910:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
3911:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
3912:src/xeq.c     **** 		}
3913:src/xeq.c     **** 	}
3914:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
3915:src/xeq.c     **** 	if (intm) {
3916:src/xeq.c     **** 		// Do the necessary conversions from integer mode
3917:src/xeq.c     **** 		op_float(OP_FLOAT_XIN);
3918:src/xeq.c     **** 	}
3919:src/xeq.c     **** }
3920:src/xeq.c     **** 
3921:src/xeq.c     **** void cmdpause(unsigned int arg, enum rarg op) {
3922:src/xeq.c     **** 	display();
3923:src/xeq.c     **** #ifndef CONSOLE
3924:src/xeq.c     **** 	// decremented in the low level heartbeat
ARM GAS  /tmp/cc0UaEmF.s 			page 83


3925:src/xeq.c     **** 	Pause = arg;
3926:src/xeq.c     **** 	GoFast = (arg == 0);
3927:src/xeq.c     **** #elif 0
3928:src/xeq.c     **** 	start_pause(arg);
3929:src/xeq.c     **** #else	
3930:src/xeq.c     **** #if defined(WIN32) && !defined(__GNUC__)
3931:src/xeq.c     **** #pragma warning(disable:4996)
3932:src/xeq.c     **** 	sleep(arg/10);
3933:src/xeq.c     **** #else
3934:src/xeq.c     **** 	usleep(arg * 100000);
3935:src/xeq.c     **** #endif
3936:src/xeq.c     **** #endif
3937:src/xeq.c     **** }
3938:src/xeq.c     **** 
3939:src/xeq.c     **** 
3940:src/xeq.c     **** 
3941:src/xeq.c     **** void op_setspeed(enum nilop op) {
3942:src/xeq.c     **** 	UState.slow_speed = (op == OP_SLOW) ? 1 : 0;
3943:src/xeq.c     **** 	update_speed(1);
3944:src/xeq.c     **** }
3945:src/xeq.c     **** 
3946:src/xeq.c     **** 
3947:src/xeq.c     **** void op_prompt(enum nilop op) {
3948:src/xeq.c     **** 	set_running_off();
3949:src/xeq.c     **** 	alpha_view_common(regX_idx);
3950:src/xeq.c     **** }
3951:src/xeq.c     **** 
3952:src/xeq.c     **** /* Test if a number is an integer or fractional */
3953:src/xeq.c     **** /* Special numbers are neither */
3954:src/xeq.c     **** void XisInt(enum nilop op) {
3955:src/xeq.c     **** 	decNumber x;
3956:src/xeq.c     **** 	int result, op_int = (op == OP_XisINT);
3957:src/xeq.c     **** 	if ( is_intmode() )
3958:src/xeq.c     **** 		result = op_int;
3959:src/xeq.c     **** 	else if (decNumberIsSpecial(getX(&x)))
3960:src/xeq.c     **** 		result = 0;
3961:src/xeq.c     **** 	else
3962:src/xeq.c     **** 	        result = (is_int(&x) == op_int);
3963:src/xeq.c     **** 	fin_tst(result);
3964:src/xeq.c     **** }
3965:src/xeq.c     **** 
3966:src/xeq.c     **** /* Test if a number is an even or odd integer */
3967:src/xeq.c     **** /* fractional or special values are neither even nor odd */
3968:src/xeq.c     **** void XisEvenOrOdd(enum nilop op) {
3969:src/xeq.c     **** 	decNumber x;
3970:src/xeq.c     **** 	int odd = (op == OP_XisODD);
3971:src/xeq.c     **** 
3972:src/xeq.c     **** 	if (is_intmode()) {
3973:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
3974:src/xeq.c     **** 	} else {
3975:src/xeq.c     **** 		fin_tst(is_even(getX(&x)) == !odd);
3976:src/xeq.c     **** 	}
3977:src/xeq.c     **** }
3978:src/xeq.c     **** 
3979:src/xeq.c     **** 
3980:src/xeq.c     **** /* Test if a number is prime */
3981:src/xeq.c     **** void XisPrime(enum nilop op) {
ARM GAS  /tmp/cc0UaEmF.s 			page 84


3982:src/xeq.c     **** 	unsigned long long int i;
3983:src/xeq.c     **** 	int sgn;
3984:src/xeq.c     **** 
3985:src/xeq.c     **** 	i = getX_int_sgn(&sgn);
3986:src/xeq.c     **** 	if (!is_intmode()) {
3987:src/xeq.c     **** 		decNumber x;
3988:src/xeq.c     **** 
3989:src/xeq.c     **** 		getX(&x);
3990:src/xeq.c     **** 		if (decNumberIsSpecial(&x))
3991:src/xeq.c     **** 			sgn = 1; // not prime
3992:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
3993:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
3994:src/xeq.c     **** 			i = 0xFFFFFFFFFFFFFFFFull;
3995:src/xeq.c     **** 	}
3996:src/xeq.c     **** 	fin_tst(sgn == 0 && isPrime(i));
3997:src/xeq.c     **** }
3998:src/xeq.c     **** 
3999:src/xeq.c     **** /* Test is a number is infinite.
4000:src/xeq.c     ****  */
4001:src/xeq.c     **** void isInfinite(enum nilop op) {
4002:src/xeq.c     **** 	decNumber x;
4003:src/xeq.c     **** 
4004:src/xeq.c     **** 	getX(&x);
4005:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsInfinite(&x));
4006:src/xeq.c     **** }
4007:src/xeq.c     **** 
4008:src/xeq.c     **** /* Test for NaN.
4009:src/xeq.c     ****  * this could be done by testing x != x, but having a special command
4010:src/xeq.c     ****  * for it reads easier.
4011:src/xeq.c     ****  */
4012:src/xeq.c     **** void isNan(enum nilop op) {
4013:src/xeq.c     **** 	decNumber x;
4014:src/xeq.c     **** 
4015:src/xeq.c     **** 	getX(&x);
4016:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsNaN(&x));
4017:src/xeq.c     **** }
4018:src/xeq.c     **** 
4019:src/xeq.c     **** void isSpecial(enum nilop op) {
4020:src/xeq.c     **** 	decNumber x;
4021:src/xeq.c     **** 
4022:src/xeq.c     **** 	getX(&x);
4023:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsSpecial(&x));
4024:src/xeq.c     **** }
4025:src/xeq.c     **** 
4026:src/xeq.c     **** void op_entryp(enum nilop op) {
4027:src/xeq.c     **** 	fin_tst(State.entryp);
4028:src/xeq.c     **** }
4029:src/xeq.c     **** 
4030:src/xeq.c     **** /* Bulk register operations */
4031:src/xeq.c     **** int reg_decode(int *s, int *n, int *d, int flash) {
4032:src/xeq.c     **** 	decNumber x, y;
4033:src/xeq.c     **** 	int rsrc, num, rdest, q, mx_src, mx_dest;
4034:src/xeq.c     **** 
4035:src/xeq.c     **** 	if (is_intmode()) {
4036:src/xeq.c     **** 		bad_mode_error();
4037:src/xeq.c     **** 		return 1;
4038:src/xeq.c     **** 	}
ARM GAS  /tmp/cc0UaEmF.s 			page 85


4039:src/xeq.c     **** 	getX(&x);			// sss.nnddd~
4040:src/xeq.c     **** 	dn_mulpow10(&y, &x, 2 + 3);	// sssnnddd.~
4041:src/xeq.c     **** 	decNumberTrunc(&x, &y);		// sssnnddd.0
4042:src/xeq.c     **** 	rsrc = dn_to_int(&x);		// sssnnddd
4043:src/xeq.c     **** 
4044:src/xeq.c     **** 	if (rsrc < 0) {
4045:src/xeq.c     **** 		if (!flash)
4046:src/xeq.c     **** 			goto range_error;
4047:src/xeq.c     **** 		rsrc = -rsrc;
4048:src/xeq.c     **** 	}
4049:src/xeq.c     **** 	else
4050:src/xeq.c     **** 		flash = 0;
4051:src/xeq.c     **** 
4052:src/xeq.c     **** 	rdest = rsrc % 1000;		// ddd
4053:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
4054:src/xeq.c     **** 	num = rsrc % 100;		// nn
4055:src/xeq.c     **** 	rsrc /= 100;			// sss
4056:src/xeq.c     **** 
4057:src/xeq.c     **** 	mx_src = flash ? BackupFlash._numregs
4058:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
4059:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
4060:src/xeq.c     **** 	       : global_regs();
4061:src/xeq.c     **** 	if (rsrc >= mx_src)
4062:src/xeq.c     **** 		goto range_error;
4063:src/xeq.c     **** 
4064:src/xeq.c     **** 	if (d != NULL) {
4065:src/xeq.c     **** 		mx_dest = rdest >= LOCAL_REG_BASE ? local_regs() : global_regs();
4066:src/xeq.c     **** 
4067:src/xeq.c     **** 		if (num == 0) {
4068:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
4069:src/xeq.c     **** 			if (flash || (rsrc >= LOCAL_REG_BASE) != (rdest >= LOCAL_REG_BASE))
4070:src/xeq.c     **** 				// source & destination in different memory areas
4071:src/xeq.c     **** 				num = mx_dest < mx_src ? mx_dest : mx_src;
4072:src/xeq.c     **** 			else {
4073:src/xeq.c     **** 				if (rsrc > rdest) {
4074:src/xeq.c     **** 					num = mx_src - rsrc;
4075:src/xeq.c     **** 					q = rsrc - rdest;
4076:src/xeq.c     **** 				}
4077:src/xeq.c     **** 				else {
4078:src/xeq.c     **** 					num = mx_dest - rdest;
4079:src/xeq.c     **** 					q = rdest - rsrc;
4080:src/xeq.c     **** 				}
4081:src/xeq.c     **** 				if (num > q)
4082:src/xeq.c     **** 					num = q;
4083:src/xeq.c     **** 			}
4084:src/xeq.c     **** 		}
4085:src/xeq.c     **** 		if (rdest >= LOCAL_REG_BASE)
4086:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
4087:src/xeq.c     **** 		if (rdest + num > mx_dest)
4088:src/xeq.c     **** 			goto range_error;
4089:src/xeq.c     **** 		// Set pointer
4090:src/xeq.c     **** 		*d = rdest;
4091:src/xeq.c     **** 	}
4092:src/xeq.c     **** 	else {
4093:src/xeq.c     **** 		if (num == 0) {
4094:src/xeq.c     **** 			num = mx_src - rsrc;
4095:src/xeq.c     **** 		}
ARM GAS  /tmp/cc0UaEmF.s 			page 86


4096:src/xeq.c     **** 	}
4097:src/xeq.c     **** 	if (rsrc + num > mx_src)
4098:src/xeq.c     **** 		goto range_error;
4099:src/xeq.c     **** 
4100:src/xeq.c     **** 	// Now point to the correct source register
4101:src/xeq.c     **** 	*s = flash ? FLASH_REG_BASE + rsrc : rsrc;
4102:src/xeq.c     **** 	*n = num;
4103:src/xeq.c     **** 
4104:src/xeq.c     **** 	return 0;
4105:src/xeq.c     **** 
4106:src/xeq.c     **** range_error:
4107:src/xeq.c     **** 	report_err(ERR_RANGE);
4108:src/xeq.c     **** 	return 1;
4109:src/xeq.c     **** }
4110:src/xeq.c     **** 
4111:src/xeq.c     **** void op_regcopy(enum nilop op) {
4112:src/xeq.c     **** 	int s, n, d;
4113:src/xeq.c     **** 
4114:src/xeq.c     **** 	if (reg_decode(&s, &n, &d, 1))
4115:src/xeq.c     **** 		return;
4116:src/xeq.c     **** 	move_regs(get_reg_n(d), get_reg_n(s), n);
4117:src/xeq.c     **** }
4118:src/xeq.c     **** 
4119:src/xeq.c     **** void op_regswap(enum nilop op) {
4120:src/xeq.c     **** 	int s, n, d, i;
4121:src/xeq.c     **** 
4122:src/xeq.c     **** 	if (reg_decode(&s, &n, &d, 0) || s == d)
4123:src/xeq.c     **** 		return;
4124:src/xeq.c     **** 	else {
4125:src/xeq.c     **** 		if ((s > d && d + n > s) || (d > s && s + n > d))
4126:src/xeq.c     **** 			report_err(ERR_RANGE);
4127:src/xeq.c     **** 		else {
4128:src/xeq.c     **** 			for (i = 0; i < n; i++)
4129:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
4130:src/xeq.c     **** 		}
4131:src/xeq.c     **** 	}
4132:src/xeq.c     **** }
4133:src/xeq.c     **** 
4134:src/xeq.c     **** void op_regclr(enum nilop op) {
4135:src/xeq.c     **** 	int s, n;
4136:src/xeq.c     **** 
4137:src/xeq.c     **** 	if (reg_decode(&s, &n, NULL, 0))
4138:src/xeq.c     **** 		return;
4139:src/xeq.c     **** 	zero_regs(get_reg_n(s), n);
4140:src/xeq.c     **** }
4141:src/xeq.c     **** 
4142:src/xeq.c     **** void op_regsort(enum nilop op) {
4143:src/xeq.c     **** 	int s, n;
4144:src/xeq.c     **** 	decNumber pivot, a;
4145:src/xeq.c     **** 	int beg[10], end[10], i;
4146:src/xeq.c     **** 
4147:src/xeq.c     **** 	if (reg_decode(&s, &n, NULL, 0) || n == 1)
4148:src/xeq.c     **** 		return;
4149:src/xeq.c     **** 
4150:src/xeq.c     **** 	/* Non-recursive quicksort */
4151:src/xeq.c     **** 	beg[0] = 0;
4152:src/xeq.c     **** 	end[0] = n;
ARM GAS  /tmp/cc0UaEmF.s 			page 87


4153:src/xeq.c     **** 	i = 0;
4154:src/xeq.c     **** 	while (i>=0) {
4155:src/xeq.c     **** 		int L = beg[i];
4156:src/xeq.c     **** 		int R = end[i] - 1;
4157:src/xeq.c     **** 		if (L<R) {
4158:src/xeq.c     **** 			const int pvt = s + L;
4159:src/xeq.c     **** 			getRegister(&pivot, pvt);
4160:src/xeq.c     **** 			while (L<R) {
4161:src/xeq.c     **** 				while (L<R) {
4162:src/xeq.c     **** 					getRegister(&a, s + R);
4163:src/xeq.c     **** 					if (dn_lt(&a, &pivot))
4164:src/xeq.c     **** 						break;
4165:src/xeq.c     **** 					R--;
4166:src/xeq.c     **** 				}
4167:src/xeq.c     **** 				if (L<R)
4168:src/xeq.c     **** 					copyreg_n(s + L++, s + R);
4169:src/xeq.c     **** 				while (L<R) {
4170:src/xeq.c     **** 					getRegister(&a, s + L);
4171:src/xeq.c     **** 					if (dn_gt(&a, &pivot))
4172:src/xeq.c     **** 						break;
4173:src/xeq.c     **** 					L++;
4174:src/xeq.c     **** 				}
4175:src/xeq.c     **** 				if (L<R)
4176:src/xeq.c     **** 					copyreg_n(s + R--, s + L);
4177:src/xeq.c     **** 			}
4178:src/xeq.c     **** 			setRegister(s + L, &pivot);
4179:src/xeq.c     **** 			if (L - beg[i] < end[i] - (L+1)) {
4180:src/xeq.c     **** 				beg[i+1] = beg[i];
4181:src/xeq.c     **** 				end[i+1] = L;
4182:src/xeq.c     **** 				beg[i] = L+1;
4183:src/xeq.c     **** 			} else {
4184:src/xeq.c     **** 				beg[i+1] = L+1;
4185:src/xeq.c     **** 				end[i+1] = end[i];
4186:src/xeq.c     **** 				end[i] = L;
4187:src/xeq.c     **** 			}
4188:src/xeq.c     **** 			i++;
4189:src/xeq.c     **** 		} else
4190:src/xeq.c     **** 			i--;
4191:src/xeq.c     **** 	}
4192:src/xeq.c     **** }
4193:src/xeq.c     **** 
4194:src/xeq.c     **** 
4195:src/xeq.c     **** 
4196:src/xeq.c     **** /* Print a single program step nicely.
4197:src/xeq.c     ****  */
4198:src/xeq.c     **** static void print_step(const opcode op) {
4199:src/xeq.c     **** 	char buf[16];
4200:src/xeq.c     **** 	const unsigned int pc = state_pc();
4201:src/xeq.c     **** 	char *p = TraceBuffer;
4202:src/xeq.c     **** 
4203:src/xeq.c     **** 	if (isXROM(pc)) {
4204:src/xeq.c     **** 		*p++ = 'x';
4205:src/xeq.c     **** 	} else if (isLIB(pc)) {
4206:src/xeq.c     **** 		p = num_arg_0(p, nLIB(pc), 1);
4207:src/xeq.c     **** 		*p++ = ' ';
4208:src/xeq.c     **** 	}
4209:src/xeq.c     **** 	if (pc == 0)
ARM GAS  /tmp/cc0UaEmF.s 			page 88


4210:src/xeq.c     **** 		scopy(p, "000:");
4211:src/xeq.c     **** 	else {
4212:src/xeq.c     **** 		p = num_arg_0(p, user_pc(pc), 3);
4213:src/xeq.c     **** 		*p++ = ':';
4214:src/xeq.c     **** 		scopy_char(p, prt(op, buf), '\0');
4215:src/xeq.c     **** 		if (*p == '?')
4216:src/xeq.c     **** 			*p = '\0';
4217:src/xeq.c     **** 	}
4218:src/xeq.c     **** 	State2.disp_small = 1;
4219:src/xeq.c     **** 	DispMsg = TraceBuffer;
4220:src/xeq.c     **** }
4221:src/xeq.c     **** 
4222:src/xeq.c     **** 
4223:src/xeq.c     **** /* When stuff gets done, there are some bits of state that need
4224:src/xeq.c     ****  * to be reset -- SHOW, ->base change the display mode until something
4225:src/xeq.c     ****  * happens.  This should be called on that something.
4226:src/xeq.c     ****  */
4227:src/xeq.c     **** void reset_volatile_state(void) {
4228:src/xeq.c     **** 	// extern int IntMaxWindow;
4229:src/xeq.c     **** 	// IntMaxWindow = 0;
4230:src/xeq.c     **** 	State2.window = 0;
4231:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
4232:src/xeq.c     **** }
4233:src/xeq.c     **** 
4234:src/xeq.c     **** 
4235:src/xeq.c     **** /*
4236:src/xeq.c     ****  *  Called by any long running function
4237:src/xeq.c     ****  */
4238:src/xeq.c     **** void busy(void)
4239:src/xeq.c     **** {
4240:src/xeq.c     **** 	/*
4241:src/xeq.c     **** 	 *  Serve the hardware watch dog
4242:src/xeq.c     **** 	 */
4243:src/xeq.c     **** 	watchdog();
4244:src/xeq.c     **** 
4245:src/xeq.c     **** 	/*
4246:src/xeq.c     **** 	 *  Increase the speed
4247:src/xeq.c     **** 	 */
4248:src/xeq.c     **** 	update_speed(1);
4249:src/xeq.c     **** 
4250:src/xeq.c     **** 	/*
4251:src/xeq.c     **** 	 *  Indicate busy state to the user
4252:src/xeq.c     **** 	 */
4253:src/xeq.c     **** 	if (!Busy && !Running) {
4254:src/xeq.c     **** 		Busy = 1;
4255:src/xeq.c     **** 		message("Wait...", NULL);
4256:src/xeq.c     **** 	}
4257:src/xeq.c     **** }
4258:src/xeq.c     **** 
4259:src/xeq.c     **** /***************************************************************************
4260:src/xeq.c     ****  * Function dispatchers.
4261:src/xeq.c     ****  */
4262:src/xeq.c     **** 
4263:src/xeq.c     **** /*
4264:src/xeq.c     ****  *  Check for a call into XROM space.
4265:src/xeq.c     ****  *  Fix the pointer alignment on the go.
4266:src/xeq.c     ****  */
ARM GAS  /tmp/cc0UaEmF.s 			page 89


4267:src/xeq.c     **** #ifdef REALBUILD
4268:src/xeq.c     **** typedef unsigned long uintptr_t;
4269:src/xeq.c     **** #else
4270:src/xeq.c     **** #include <stdint.h>
4271:src/xeq.c     **** #endif
4272:src/xeq.c     **** 
4273:src/xeq.c     **** static const s_opcode *check_for_xrom_address(void *fp)
4274:src/xeq.c     **** {
4275:src/xeq.c     **** 	const s_opcode *xp = (const s_opcode *) ((uintptr_t ) fp & ~1);
4276:src/xeq.c     **** 	if (xp < xrom)
4277:src/xeq.c     **** 		return NULL;
4278:src/xeq.c     **** #ifndef REALBUILD
4279:src/xeq.c     **** 	// On the device, XROM is at the end so this is not needed
4280:src/xeq.c     **** 	if (xp >= xrom + xrom_size)
4281:src/xeq.c     **** 		return NULL;
4282:src/xeq.c     **** #endif
4283:src/xeq.c     **** 	return xp;
4284:src/xeq.c     **** }
4285:src/xeq.c     **** 
4286:src/xeq.c     **** /*
4287:src/xeq.c     ****  *  Check for a call into XROM space and dispatch it.
4288:src/xeq.c     ****  */
4289:src/xeq.c     **** static int dispatch_xrom(void *fp)
4290:src/xeq.c     **** {
4291:src/xeq.c     **** 	const s_opcode *xp = check_for_xrom_address(fp);
4292:src/xeq.c     **** 	if (xp == NULL)
4293:src/xeq.c     **** 		return 0;
4294:src/xeq.c     **** 	// set_lift();
4295:src/xeq.c     **** 	UserLocalRegs = LocalRegs;
4296:src/xeq.c     **** 	XromRunning = 1;
4297:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
4298:src/xeq.c     **** 	xeq_xrom();
4299:src/xeq.c     **** 	return 1;
4300:src/xeq.c     **** }
4301:src/xeq.c     **** 
4302:src/xeq.c     **** /*
4303:src/xeq.c     ****  *  Return an integer result from a decimal value, setting flags properly
4304:src/xeq.c     ****  */
4305:src/xeq.c     **** static long long int intResult(decNumber *r) {
 644              		.loc 1 4305 46 is_stmt 1 view -0
 645              		.cfi_startproc
 646              		@ args = 0, pretend = 0, frame = 80
 647              		@ frame_needed = 0, uses_anonymous_args = 0
4306:src/xeq.c     **** 	unsigned long long int i;
 648              		.loc 1 4306 2 view .LVU190
4307:src/xeq.c     **** 	int s;
 649              		.loc 1 4307 2 view .LVU191
4308:src/xeq.c     **** 	decNumber ri, t;
 650              		.loc 1 4308 2 view .LVU192
4309:src/xeq.c     **** 
4310:src/xeq.c     **** 	decNumberRoundDigits(&t, r, 25, DEC_ROUND_HALF_EVEN);
 651              		.loc 1 4310 2 view .LVU193
4305:src/xeq.c     **** 	unsigned long long int i;
 652              		.loc 1 4305 46 is_stmt 0 view .LVU194
 653 0000 30B5     		push	{r4, r5, lr}
 654              		.cfi_def_cfa_offset 12
 655              		.cfi_offset 4, -12
ARM GAS  /tmp/cc0UaEmF.s 			page 90


 656              		.cfi_offset 5, -8
 657              		.cfi_offset 14, -4
 658 0002 95B0     		sub	sp, sp, #84
 659              		.cfi_def_cfa_offset 96
 660              		.loc 1 4310 2 view .LVU195
 661 0004 0323     		movs	r3, #3
 662 0006 1922     		movs	r2, #25
4305:src/xeq.c     **** 	unsigned long long int i;
 663              		.loc 1 4305 46 view .LVU196
 664 0008 0146     		mov	r1, r0
 665              		.loc 1 4310 2 view .LVU197
 666 000a 0BA8     		add	r0, sp, #44
 667              	.LVL49:
 668              		.loc 1 4310 2 view .LVU198
 669 000c FFF7FEFF 		bl	decNumberRoundDigits
 670              	.LVL50:
4311:src/xeq.c     **** 	decNumberTrunc(&ri, &t);
 671              		.loc 1 4311 2 is_stmt 1 view .LVU199
 672 0010 0BA9     		add	r1, sp, #44
 673 0012 02A8     		add	r0, sp, #8
 674 0014 FFF7FEFF 		bl	decNumberTrunc
 675              	.LVL51:
4312:src/xeq.c     **** 	set_carry(dn_eq(&ri, &t) ? 0 : 1);
 676              		.loc 1 4312 2 view .LVU200
 677              		.loc 1 4312 12 is_stmt 0 view .LVU201
 678 0018 0BA9     		add	r1, sp, #44
 679 001a 02A8     		add	r0, sp, #8
 680 001c FFF7FEFF 		bl	dn_eq
 681              	.LVL52:
 682              		.loc 1 4312 2 view .LVU202
 683 0020 B0FA80F0 		clz	r0, r0
 684 0024 4009     		lsrs	r0, r0, #5
 685 0026 FFF7FEFF 		bl	set_carry
 686              	.LVL53:
4313:src/xeq.c     **** 
4314:src/xeq.c     **** 	if (decNumberIsNaN(&t)) {
 687              		.loc 1 4314 2 is_stmt 1 view .LVU203
 688              		.loc 1 4314 6 is_stmt 0 view .LVU204
 689 002a 9DF83430 		ldrb	r3, [sp, #52]	@ zero_extendqisi2
 690              		.loc 1 4314 5 view .LVU205
 691 002e 13F0300F 		tst	r3, #48
 692 0032 22D1     		bne	.L67
4315:src/xeq.c     **** 		report_err(ERR_DOMAIN);
4316:src/xeq.c     **** 		return 0;
4317:src/xeq.c     **** 	}
4318:src/xeq.c     **** 	if (decNumberIsSpecial(&t)) {
 693              		.loc 1 4318 2 is_stmt 1 view .LVU206
 694              		.loc 1 4318 5 is_stmt 0 view .LVU207
 695 0034 13F0700F 		tst	r3, #112
 696 0038 18D1     		bne	.L68
4319:src/xeq.c     **** 		set_overflow(1);
4320:src/xeq.c     **** 		return 0;
4321:src/xeq.c     **** 	}
4322:src/xeq.c     **** 	i = dn_to_ull(&ri, &s);
 697              		.loc 1 4322 2 is_stmt 1 view .LVU208
 698              		.loc 1 4322 6 is_stmt 0 view .LVU209
 699 003a 02A8     		add	r0, sp, #8
ARM GAS  /tmp/cc0UaEmF.s 			page 91


 700 003c 01A9     		add	r1, sp, #4
 701 003e FFF7FEFF 		bl	dn_to_ull
 702              	.LVL54:
 703 0042 0C46     		mov	r4, r1
4323:src/xeq.c     **** 	dn_abs(&t, &t);
 704              		.loc 1 4323 2 view .LVU210
 705 0044 0BA9     		add	r1, sp, #44
4322:src/xeq.c     **** 	dn_abs(&t, &t);
 706              		.loc 1 4322 6 view .LVU211
 707 0046 0546     		mov	r5, r0
 708              	.LVL55:
 709              		.loc 1 4323 2 is_stmt 1 view .LVU212
 710 0048 0846     		mov	r0, r1
 711              	.LVL56:
 712              		.loc 1 4323 2 is_stmt 0 view .LVU213
 713 004a FFF7FEFF 		bl	dn_abs
 714              	.LVL57:
4324:src/xeq.c     **** 	set_overflow(check_overflow(i) || dn_ge(&t, &const_2pow64));
 715              		.loc 1 4324 2 is_stmt 1 view .LVU214
 716              		.loc 1 4324 15 is_stmt 0 view .LVU215
 717 004e 2846     		mov	r0, r5
 718 0050 2146     		mov	r1, r4
 719 0052 FFF7FEFF 		bl	check_overflow
 720              	.LVL58:
 721              		.loc 1 4324 2 view .LVU216
 722 0056 E8B1     		cbz	r0, .L69
 723 0058 0120     		movs	r0, #1
 724              	.L63:
 725              		.loc 1 4324 2 discriminator 6 view .LVU217
 726 005a FFF7FEFF 		bl	set_overflow
 727              	.LVL59:
4325:src/xeq.c     **** 	return build_value(i, s);
 728              		.loc 1 4325 2 is_stmt 1 discriminator 6 view .LVU218
 729              		.loc 1 4325 9 is_stmt 0 discriminator 6 view .LVU219
 730 005e 019A     		ldr	r2, [sp, #4]
 731 0060 2846     		mov	r0, r5
 732 0062 2146     		mov	r1, r4
 733 0064 FFF7FEFF 		bl	build_value
 734              	.LVL60:
4326:src/xeq.c     **** }
 735              		.loc 1 4326 1 discriminator 6 view .LVU220
 736 0068 15B0     		add	sp, sp, #84
 737              		.cfi_remember_state
 738              		.cfi_def_cfa_offset 12
 739              		@ sp needed
 740 006a 30BD     		pop	{r4, r5, pc}
 741              	.LVL61:
 742              	.L68:
 743              		.cfi_restore_state
4319:src/xeq.c     **** 		return 0;
 744              		.loc 1 4319 3 is_stmt 1 view .LVU221
 745 006c 0120     		movs	r0, #1
 746 006e FFF7FEFF 		bl	set_overflow
 747              	.LVL62:
4320:src/xeq.c     **** 	}
 748              		.loc 1 4320 3 view .LVU222
4320:src/xeq.c     **** 	}
ARM GAS  /tmp/cc0UaEmF.s 			page 92


 749              		.loc 1 4320 10 is_stmt 0 view .LVU223
 750 0072 0020     		movs	r0, #0
 751 0074 0146     		mov	r1, r0
 752              		.loc 1 4326 1 view .LVU224
 753 0076 15B0     		add	sp, sp, #84
 754              		.cfi_remember_state
 755              		.cfi_def_cfa_offset 12
 756              		@ sp needed
 757 0078 30BD     		pop	{r4, r5, pc}
 758              	.L67:
 759              		.cfi_restore_state
4315:src/xeq.c     **** 		return 0;
 760              		.loc 1 4315 3 is_stmt 1 view .LVU225
 761              	.LVL63:
 762              	.LBB1328:
 763              	.LBI1328:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 764              		.loc 1 537 5 view .LVU226
 765              	.LBB1329:
 538:src/xeq.c     **** 		Error = e;
 766              		.loc 1 538 2 view .LVU227
 538:src/xeq.c     **** 		Error = e;
 767              		.loc 1 538 12 is_stmt 0 view .LVU228
 768 007a 0A4B     		ldr	r3, .L70
 538:src/xeq.c     **** 		Error = e;
 769              		.loc 1 538 5 view .LVU229
 770 007c 1A68     		ldr	r2, [r3]
 771 007e 2AB9     		cbnz	r2, .L64
 772              	.LVL64:
 773              	.LBB1330:
 774              	.LBI1330:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 775              		.loc 1 537 5 is_stmt 1 view .LVU230
 776              	.LBB1331:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 777              		.loc 1 539 3 view .LVU231
 778              	.LBE1331:
 779              	.LBE1330:
 780              	.LBE1329:
 781              	.LBE1328:
4316:src/xeq.c     **** 	}
 782              		.loc 1 4316 10 is_stmt 0 view .LVU232
 783 0080 0020     		movs	r0, #0
 784              	.LBB1338:
 785              	.LBB1336:
 786              	.LBB1334:
 787              	.LBB1332:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 788              		.loc 1 539 9 view .LVU233
 789 0082 0122     		movs	r2, #1
 790              	.LBE1332:
 791              	.LBE1334:
 792              	.LBE1336:
 793              	.LBE1338:
4316:src/xeq.c     **** 	}
 794              		.loc 1 4316 10 view .LVU234
 795 0084 0146     		mov	r1, r0
ARM GAS  /tmp/cc0UaEmF.s 			page 93


 796              	.LBB1339:
 797              	.LBB1337:
 798              	.LBB1335:
 799              	.LBB1333:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 800              		.loc 1 539 9 view .LVU235
 801 0086 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 802              		.loc 1 540 3 is_stmt 1 view .LVU236
 803              	.LBE1333:
 804              	.LBE1335:
 805              	.LBE1337:
 806              	.LBE1339:
 807              		.loc 1 4326 1 is_stmt 0 view .LVU237
 808 0088 15B0     		add	sp, sp, #84
 809              		.cfi_remember_state
 810              		.cfi_def_cfa_offset 12
 811              		@ sp needed
 812 008a 30BD     		pop	{r4, r5, pc}
 813              	.LVL65:
 814              	.L64:
 815              		.cfi_restore_state
4316:src/xeq.c     **** 	}
 816              		.loc 1 4316 10 view .LVU238
 817 008c 0020     		movs	r0, #0
 818 008e 0146     		mov	r1, r0
 819              	.LVL66:
 820              		.loc 1 4326 1 view .LVU239
 821 0090 15B0     		add	sp, sp, #84
 822              		.cfi_remember_state
 823              		.cfi_def_cfa_offset 12
 824              		@ sp needed
 825 0092 30BD     		pop	{r4, r5, pc}
 826              	.LVL67:
 827              	.L69:
 828              		.cfi_restore_state
4324:src/xeq.c     **** 	return build_value(i, s);
 829              		.loc 1 4324 36 discriminator 2 view .LVU240
 830 0094 0449     		ldr	r1, .L70+4
 831 0096 0BA8     		add	r0, sp, #44
 832 0098 FFF7FEFF 		bl	dn_lt
 833              	.LVL68:
4324:src/xeq.c     **** 	return build_value(i, s);
 834              		.loc 1 4324 2 discriminator 2 view .LVU241
 835 009c B0FA80F0 		clz	r0, r0
 836 00a0 4009     		lsrs	r0, r0, #5
 837 00a2 DAE7     		b	.L63
 838              	.L71:
 839              		.align	2
 840              	.L70:
 841 00a4 00000000 		.word	Error
 842 00a8 00000000 		.word	const_2pow64
 843              		.cfi_endproc
 844              	.LFE234:
 846              		.section	.text.check_stack_overlap,"ax",%progbits
 847              		.align	1
 848              		.p2align 2,,3
ARM GAS  /tmp/cc0UaEmF.s 			page 94


 849              		.syntax unified
 850              		.thumb
 851              		.thumb_func
 852              		.fpu fpv4-sp-d16
 854              	check_stack_overlap:
 855              	.LVL69:
 856              	.LFB143:
1931:src/xeq.c     **** 	const int n = stack_size();
 857              		.loc 1 1931 50 is_stmt 1 view -0
 858              		.cfi_startproc
 859              		@ args = 0, pretend = 0, frame = 0
 860              		@ frame_needed = 0, uses_anonymous_args = 0
 861              		@ link register save eliminated.
1932:src/xeq.c     **** 
 862              		.loc 1 1932 2 view .LVU243
 863              	.LBB1366:
 864              	.LBI1366:
 703:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 865              		.loc 1 703 5 view .LVU244
 866              	.LBB1367:
 704:src/xeq.c     **** 		return 4;
 867              		.loc 1 704 2 view .LVU245
 704:src/xeq.c     **** 		return 4;
 868              		.loc 1 704 8 is_stmt 0 view .LVU246
 869 0000 194B     		ldr	r3, .L83
 870 0002 1A68     		ldr	r2, [r3]
 704:src/xeq.c     **** 		return 4;
 871              		.loc 1 704 6 view .LVU247
 872 0004 92F8EA37 		ldrb	r3, [r2, #2026]	@ zero_extendqisi2
 704:src/xeq.c     **** 		return 4;
 873              		.loc 1 704 5 view .LVU248
 874 0008 1B07     		lsls	r3, r3, #28
 875              	.LBE1367:
 876              	.LBE1366:
1931:src/xeq.c     **** 	const int n = stack_size();
 877              		.loc 1 1931 50 view .LVU249
 878 000a 30B4     		push	{r4, r5}
 879              		.cfi_def_cfa_offset 8
 880              		.cfi_offset 4, -8
 881              		.cfi_offset 5, -4
 882              	.LBB1372:
 883              	.LBB1370:
 704:src/xeq.c     **** 		return 4;
 884              		.loc 1 704 5 view .LVU250
 885 000c 25D5     		bpl	.L77
 886              	.LBB1368:
 887              	.LBI1368:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 888              		.loc 1 182 5 is_stmt 1 view .LVU251
 889              	.LBB1369:
 183:src/xeq.c     **** }
 890              		.loc 1 183 2 view .LVU252
 183:src/xeq.c     **** }
 891              		.loc 1 183 9 is_stmt 0 view .LVU253
 892 000e B2F8E037 		ldrh	r3, [r2, #2016]
 893              	.LBE1369:
 894              	.LBE1368:
ARM GAS  /tmp/cc0UaEmF.s 			page 95


 704:src/xeq.c     **** 		return 4;
 895              		.loc 1 704 27 view .LVU254
 896 0012 9B0B     		lsrs	r3, r3, #14
 897 0014 032B     		cmp	r3, #3
 898 0016 1BD0     		beq	.L82
 899              	.L79:
 900 0018 0823     		movs	r3, #8
 706:src/xeq.c     **** }
 901              		.loc 1 706 9 view .LVU255
 902 001a 1C46     		mov	r4, r3
 903              	.L73:
 904              	.LVL70:
 706:src/xeq.c     **** }
 905              		.loc 1 706 9 view .LVU256
 906              	.LBE1370:
 907              	.LBE1372:
1934:src/xeq.c     **** 		return n;
 908              		.loc 1 1934 2 is_stmt 1 view .LVU257
 909              	.LBB1373:
 910              	.LBB1374:
 911              	.LBB1375:
 912              	.LBB1376:
 913              	.LBB1377:
 933:src/xeq.c     **** }
 914              		.loc 1 933 24 is_stmt 0 view .LVU258
 915 001c B2F8E857 		ldrh	r5, [r2, #2024]
 916              	.LBE1377:
 917              	.LBE1376:
 918              	.LBB1380:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 919              		.loc 1 240 24 view .LVU259
 920 0020 92F8CF27 		ldrb	r2, [r2, #1999]	@ zero_extendqisi2
 921              	.LBE1380:
 922              	.LBB1381:
 923              	.LBB1378:
 933:src/xeq.c     **** }
 924              		.loc 1 933 24 view .LVU260
 925 0024 44F20101 		movw	r1, #16385
 926              	.LBE1378:
 927              	.LBE1381:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 928              		.loc 1 239 5 view .LVU261
 929 0028 2940     		ands	r1, r1, r5
 930 002a B1F5804F 		cmp	r1, #16384
 931              	.LBB1382:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 932              		.loc 1 240 13 view .LVU262
 933 002e 08BF     		it	eq
 934 0030 0C3A     		subeq	r2, r2, #12
 935              	.LBE1382:
 936              	.LBE1375:
 937              	.LBE1374:
 938              	.LBE1373:
1934:src/xeq.c     **** 		return n;
 939              		.loc 1 1934 10 view .LVU263
 940 0032 0344     		add	r3, r3, r0
 941              	.LBB1387:
ARM GAS  /tmp/cc0UaEmF.s 			page 96


 942              	.LBI1373:
 250:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 943              		.loc 1 250 14 is_stmt 1 view .LVU264
 944              	.LBE1387:
 251:src/xeq.c     **** }
 945              		.loc 1 251 2 view .LVU265
 946              	.LVL71:
 947              	.LBB1388:
 948              	.LBB1386:
 949              	.LBI1374:
 238:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 950              		.loc 1 238 14 view .LVU266
 951              	.LBB1385:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 952              		.loc 1 239 2 view .LVU267
 953              	.LBB1383:
 954              	.LBI1376:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 955              		.loc 1 932 5 view .LVU268
 956              	.LBB1379:
 933:src/xeq.c     **** }
 957              		.loc 1 933 2 view .LVU269
 958              	.LBE1379:
 959              	.LBE1383:
 960              	.LBB1384:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 961              		.loc 1 240 3 view .LVU270
 241:src/xeq.c     **** 	}
 962              		.loc 1 241 3 view .LVU271
 241:src/xeq.c     **** 	}
 963              		.loc 1 241 67 is_stmt 0 view .LVU272
 964 0034 08BF     		it	eq
 965 0036 5210     		asreq	r2, r2, #1
 966              	.LVL72:
 241:src/xeq.c     **** 	}
 967              		.loc 1 241 67 view .LVU273
 968              	.LBE1384:
 969              	.LBE1385:
 970              	.LBE1386:
 971              	.LBE1388:
1934:src/xeq.c     **** 		return n;
 972              		.loc 1 1934 5 view .LVU274
 973 0038 9342     		cmp	r3, r2
 974 003a 06D9     		bls	.L72
1934:src/xeq.c     **** 		return n;
 975              		.loc 1 1934 31 discriminator 1 view .LVU275
 976 003c 6F28     		cmp	r0, #111
 977 003e 04D8     		bhi	.L72
 978              	.LBB1389:
 979              	.LBI1389:
1931:src/xeq.c     **** 	const int n = stack_size();
 980              		.loc 1 1931 12 is_stmt 1 view .LVU276
 981              	.LVL73:
 982              	.LBB1390:
1937:src/xeq.c     **** 	return 0;
 983              		.loc 1 1937 2 view .LVU277
 984              	.LBB1391:
ARM GAS  /tmp/cc0UaEmF.s 			page 97


 985              	.LBI1391:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 986              		.loc 1 537 5 view .LVU278
 987              	.LBB1392:
 538:src/xeq.c     **** 		Error = e;
 988              		.loc 1 538 2 view .LVU279
 538:src/xeq.c     **** 		Error = e;
 989              		.loc 1 538 12 is_stmt 0 view .LVU280
 990 0040 0A4B     		ldr	r3, .L83+4
 991 0042 1C68     		ldr	r4, [r3]
 992              	.LVL74:
 538:src/xeq.c     **** 		Error = e;
 993              		.loc 1 538 5 view .LVU281
 994 0044 64B9     		cbnz	r4, .L80
 995              	.LVL75:
 996              	.LBB1393:
 997              	.LBI1393:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 998              		.loc 1 537 5 is_stmt 1 view .LVU282
 999              	.LBB1394:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 1000              		.loc 1 539 3 view .LVU283
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 1001              		.loc 1 539 9 is_stmt 0 view .LVU284
 1002 0046 0C22     		movs	r2, #12
 1003 0048 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 1004              		.loc 1 540 3 is_stmt 1 view .LVU285
 1005              	.LVL76:
 1006              	.L72:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 1007              		.loc 1 540 3 is_stmt 0 view .LVU286
 1008              	.LBE1394:
 1009              	.LBE1393:
 1010              	.LBE1392:
 1011              	.LBE1391:
 1012              	.LBE1390:
 1013              	.LBE1389:
1939:src/xeq.c     **** 
 1014              		.loc 1 1939 1 view .LVU287
 1015 004a 2046     		mov	r0, r4
 1016              	.LVL77:
1939:src/xeq.c     **** 
 1017              		.loc 1 1939 1 view .LVU288
 1018 004c 30BC     		pop	{r4, r5}
 1019              		.cfi_remember_state
 1020              		.cfi_restore 5
 1021              		.cfi_restore 4
 1022              		.cfi_def_cfa_offset 0
 1023 004e 7047     		bx	lr
 1024              	.LVL78:
 1025              	.L82:
 1026              		.cfi_restore_state
 1027              	.LBB1398:
 1028              	.LBB1371:
 704:src/xeq.c     **** 		return 4;
 1029              		.loc 1 704 44 view .LVU289
ARM GAS  /tmp/cc0UaEmF.s 			page 98


 1030 0050 074B     		ldr	r3, .L83+8
 704:src/xeq.c     **** 		return 4;
 1031              		.loc 1 704 41 view .LVU290
 1032 0052 93F90130 		ldrsb	r3, [r3, #1]
 1033 0056 002B     		cmp	r3, #0
 1034 0058 DEDB     		blt	.L79
 1035              	.L77:
 1036 005a 0423     		movs	r3, #4
 705:src/xeq.c     **** 	return 8;
 1037              		.loc 1 705 10 view .LVU291
 1038 005c 1C46     		mov	r4, r3
 1039 005e DDE7     		b	.L73
 1040              	.LVL79:
 1041              	.L80:
 705:src/xeq.c     **** 	return 8;
 1042              		.loc 1 705 10 view .LVU292
 1043              	.LBE1371:
 1044              	.LBE1398:
 1045              	.LBB1399:
 1046              	.LBB1397:
 1047              	.LBB1396:
 1048              	.LBB1395:
 1049 0060 0024     		movs	r4, #0
 1050              	.LVL80:
 705:src/xeq.c     **** 	return 8;
 1051              		.loc 1 705 10 view .LVU293
 1052              	.LBE1395:
 1053              	.LBE1396:
 1054              	.LBE1397:
 1055              	.LBE1399:
1939:src/xeq.c     **** 
 1056              		.loc 1 1939 1 view .LVU294
 1057 0062 2046     		mov	r0, r4
 1058              	.LVL81:
1939:src/xeq.c     **** 
 1059              		.loc 1 1939 1 view .LVU295
 1060 0064 30BC     		pop	{r4, r5}
 1061              		.cfi_restore 5
 1062              		.cfi_restore 4
 1063              		.cfi_def_cfa_offset 0
 1064 0066 7047     		bx	lr
 1065              	.L84:
 1066              		.align	2
 1067              	.L83:
 1068 0068 00000000 		.word	main_ram
 1069 006c 00000000 		.word	Error
 1070 0070 00000000 		.word	XromParams
 1071              		.cfi_endproc
 1072              	.LFE143:
 1074              		.section	.text.is_xrom,"ax",%progbits
 1075              		.align	1
 1076              		.p2align 2,,3
 1077              		.global	is_xrom
 1078              		.syntax unified
 1079              		.thumb
 1080              		.thumb_func
 1081              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cc0UaEmF.s 			page 99


 1083              	is_xrom:
 1084              	.LFB3:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 1085              		.loc 1 182 19 is_stmt 1 view -0
 1086              		.cfi_startproc
 1087              		@ args = 0, pretend = 0, frame = 0
 1088              		@ frame_needed = 0, uses_anonymous_args = 0
 1089              		@ link register save eliminated.
 183:src/xeq.c     **** }
 1090              		.loc 1 183 2 view .LVU297
 183:src/xeq.c     **** }
 1091              		.loc 1 183 9 is_stmt 0 view .LVU298
 1092 0000 054B     		ldr	r3, .L86
 1093 0002 1B68     		ldr	r3, [r3]
 1094 0004 B3F8E007 		ldrh	r0, [r3, #2016]
 1095 0008 800B     		lsrs	r0, r0, #14
 184:src/xeq.c     **** 
 1096              		.loc 1 184 1 view .LVU299
 1097 000a A0F10300 		sub	r0, #3
 1098 000e B0FA80F0 		clz	r0, r0
 1099 0012 4009     		lsrs	r0, r0, #5
 1100 0014 7047     		bx	lr
 1101              	.L87:
 1102 0016 00BF     		.align	2
 1103              	.L86:
 1104 0018 00000000 		.word	main_ram
 1105              		.cfi_endproc
 1106              	.LFE3:
 1108              		.section	.text.move_retstk,"ax",%progbits
 1109              		.align	1
 1110              		.p2align 2,,3
 1111              		.global	move_retstk
 1112              		.syntax unified
 1113              		.thumb
 1114              		.thumb_func
 1115              		.fpu fpv4-sp-d16
 1117              	move_retstk:
 1118              	.LVL82:
 1119              	.LFB4:
 193:src/xeq.c     **** #ifndef REALBUILD
 1120              		.loc 1 193 1 is_stmt 1 view -0
 1121              		.cfi_startproc
 1122              		@ args = 0, pretend = 0, frame = 0
 1123              		@ frame_needed = 0, uses_anonymous_args = 0
 196:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 1124              		.loc 1 196 2 view .LVU301
 196:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 1125              		.loc 1 196 6 is_stmt 0 view .LVU302
 1126 0000 1A4B     		ldr	r3, .L99
 196:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 1127              		.loc 1 196 5 view .LVU303
 1128 0002 93F90130 		ldrsb	r3, [r3, #1]
 1129 0006 002B     		cmp	r3, #0
 1130 0008 25DB     		blt	.L97
 201:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1131              		.loc 1 201 2 is_stmt 1 view .LVU304
 201:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
ARM GAS  /tmp/cc0UaEmF.s 			page 100


 1132              		.loc 1 201 19 is_stmt 0 view .LVU305
 1133 000a 194B     		ldr	r3, .L99+4
 193:src/xeq.c     **** #ifndef REALBUILD
 1134              		.loc 1 193 1 view .LVU306
 1135 000c 70B5     		push	{r4, r5, r6, lr}
 1136              		.cfi_def_cfa_offset 16
 1137              		.cfi_offset 4, -16
 1138              		.cfi_offset 5, -12
 1139              		.cfi_offset 6, -8
 1140              		.cfi_offset 14, -4
 201:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1141              		.loc 1 201 19 view .LVU307
 1142 000e 1A68     		ldr	r2, [r3]
 201:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1143              		.loc 1 201 17 view .LVU308
 1144 0010 184D     		ldr	r5, .L99+8
 201:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1145              		.loc 1 201 19 view .LVU309
 1146 0012 B2F9E217 		ldrsh	r1, [r2, #2018]
 201:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1147              		.loc 1 201 17 view .LVU310
 1148 0016 2B68     		ldr	r3, [r5]
 1149 0018 0B44     		add	r3, r3, r1
 201:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1150              		.loc 1 201 5 view .LVU311
 1151 001a C342     		cmn	r3, r0
 1152 001c 0446     		mov	r4, r0
 1153 001e 13D4     		bmi	.L98
 205:src/xeq.c     **** 	RetStk += distance;
 1154              		.loc 1 205 2 is_stmt 1 view .LVU312
 1155 0020 154E     		ldr	r6, .L99+12
 1156 0022 3368     		ldr	r3, [r6]
 205:src/xeq.c     **** 	RetStk += distance;
 1157              		.loc 1 205 27 is_stmt 0 view .LVU313
 1158 0024 0818     		adds	r0, r1, r0
 1159              	.LVL83:
 205:src/xeq.c     **** 	RetStk += distance;
 1160              		.loc 1 205 60 view .LVU314
 1161 0026 4A42     		rsbs	r2, r1, #0
 205:src/xeq.c     **** 	RetStk += distance;
 1162              		.loc 1 205 2 view .LVU315
 1163 0028 03EB4000 		add	r0, r3, r0, lsl #1
 1164 002c 03EB4101 		add	r1, r3, r1, lsl #1
 1165 0030 5200     		lsls	r2, r2, #1
 1166 0032 FFF7FEFF 		bl	xcopy
 1167              	.LVL84:
 206:src/xeq.c     **** 	RetStkSize += distance;
 1168              		.loc 1 206 2 is_stmt 1 view .LVU316
 206:src/xeq.c     **** 	RetStkSize += distance;
 1169              		.loc 1 206 9 is_stmt 0 view .LVU317
 1170 0036 3368     		ldr	r3, [r6]
 207:src/xeq.c     **** 	return 0;
 1171              		.loc 1 207 13 view .LVU318
 1172 0038 2868     		ldr	r0, [r5]
 206:src/xeq.c     **** 	RetStkSize += distance;
 1173              		.loc 1 206 9 view .LVU319
 1174 003a 03EB4403 		add	r3, r3, r4, lsl #1
ARM GAS  /tmp/cc0UaEmF.s 			page 101


 207:src/xeq.c     **** 	return 0;
 1175              		.loc 1 207 13 view .LVU320
 1176 003e 2044     		add	r0, r0, r4
 1177 0040 2860     		str	r0, [r5]
 206:src/xeq.c     **** 	RetStkSize += distance;
 1178              		.loc 1 206 9 view .LVU321
 1179 0042 3360     		str	r3, [r6]
 207:src/xeq.c     **** 	return 0;
 1180              		.loc 1 207 2 is_stmt 1 view .LVU322
 208:src/xeq.c     **** }
 1181              		.loc 1 208 2 view .LVU323
 208:src/xeq.c     **** }
 1182              		.loc 1 208 9 is_stmt 0 view .LVU324
 1183 0044 0020     		movs	r0, #0
 209:src/xeq.c     **** 
 1184              		.loc 1 209 1 view .LVU325
 1185 0046 70BD     		pop	{r4, r5, r6, pc}
 1186              	.LVL85:
 1187              	.L98:
 202:src/xeq.c     **** 		return 1;
 1188              		.loc 1 202 3 is_stmt 1 view .LVU326
 1189              	.LBB1412:
 1190              	.LBI1412:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1191              		.loc 1 537 5 view .LVU327
 1192              	.LBB1413:
 538:src/xeq.c     **** 		Error = e;
 1193              		.loc 1 538 2 view .LVU328
 538:src/xeq.c     **** 		Error = e;
 1194              		.loc 1 538 12 is_stmt 0 view .LVU329
 1195 0048 0C4B     		ldr	r3, .L99+16
 538:src/xeq.c     **** 		Error = e;
 1196              		.loc 1 538 5 view .LVU330
 1197 004a 1A68     		ldr	r2, [r3]
 1198 004c 52B9     		cbnz	r2, .L93
 1199              	.LVL86:
 1200              	.LBB1414:
 1201              	.LBI1414:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1202              		.loc 1 537 5 is_stmt 1 view .LVU331
 1203              	.LBB1415:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 1204              		.loc 1 539 3 view .LVU332
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 1205              		.loc 1 539 9 is_stmt 0 view .LVU333
 1206 004e 0B22     		movs	r2, #11
 1207 0050 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 1208              		.loc 1 540 3 is_stmt 1 view .LVU334
 1209              	.LBE1415:
 1210              	.LBE1414:
 1211              	.LBE1413:
 1212              	.LBE1412:
 203:src/xeq.c     **** 	}
 1213              		.loc 1 203 10 is_stmt 0 view .LVU335
 1214 0052 0120     		movs	r0, #1
 1215              	.LVL87:
ARM GAS  /tmp/cc0UaEmF.s 			page 102


 209:src/xeq.c     **** 
 1216              		.loc 1 209 1 view .LVU336
 1217 0054 70BD     		pop	{r4, r5, r6, pc}
 1218              	.LVL88:
 1219              	.L97:
 1220              		.cfi_def_cfa_offset 0
 1221              		.cfi_restore 4
 1222              		.cfi_restore 5
 1223              		.cfi_restore 6
 1224              		.cfi_restore 14
 1225              	.LBB1417:
 1226              	.LBI1417:
 192:src/xeq.c     **** {
 1227              		.loc 1 192 5 is_stmt 1 view .LVU337
 192:src/xeq.c     **** {
 1228              		.loc 1 192 5 is_stmt 0 view .LVU338
 1229              	.LBE1417:
 197:src/xeq.c     **** 		return 1;
 1230              		.loc 1 197 3 is_stmt 1 view .LVU339
 1231              	.LBB1424:
 1232              	.LBB1418:
 1233              	.LBI1418:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1234              		.loc 1 537 5 view .LVU340
 1235              	.LBB1419:
 538:src/xeq.c     **** 		Error = e;
 1236              		.loc 1 538 2 view .LVU341
 538:src/xeq.c     **** 		Error = e;
 1237              		.loc 1 538 12 is_stmt 0 view .LVU342
 1238 0056 094B     		ldr	r3, .L99+16
 538:src/xeq.c     **** 		Error = e;
 1239              		.loc 1 538 5 view .LVU343
 1240 0058 1A68     		ldr	r2, [r3]
 1241 005a 2AB9     		cbnz	r2, .L92
 1242              	.LVL89:
 1243              	.LBB1420:
 1244              	.LBI1420:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1245              		.loc 1 537 5 is_stmt 1 view .LVU344
 1246              	.LBB1421:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 1247              		.loc 1 539 3 view .LVU345
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 1248              		.loc 1 539 9 is_stmt 0 view .LVU346
 1249 005c 0722     		movs	r2, #7
 1250 005e 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 1251              		.loc 1 540 3 is_stmt 1 view .LVU347
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 1252              		.loc 1 539 9 is_stmt 0 view .LVU348
 1253 0060 0120     		movs	r0, #1
 1254              	.LVL90:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 1255              		.loc 1 539 9 view .LVU349
 1256 0062 7047     		bx	lr
 1257              	.LVL91:
 1258              	.L93:
ARM GAS  /tmp/cc0UaEmF.s 			page 103


 1259              		.cfi_def_cfa_offset 16
 1260              		.cfi_offset 4, -16
 1261              		.cfi_offset 5, -12
 1262              		.cfi_offset 6, -8
 1263              		.cfi_offset 14, -4
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 1264              		.loc 1 539 9 view .LVU350
 1265              	.LBE1421:
 1266              	.LBE1420:
 1267              	.LBE1419:
 1268              	.LBE1418:
 1269              	.LBE1424:
 1270              	.LBB1425:
 1271              	.LBB1416:
 1272 0064 0120     		movs	r0, #1
 1273              	.LVL92:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 1274              		.loc 1 539 9 view .LVU351
 1275              	.LBE1416:
 1276              	.LBE1425:
 209:src/xeq.c     **** 
 1277              		.loc 1 209 1 view .LVU352
 1278 0066 70BD     		pop	{r4, r5, r6, pc}
 1279              	.LVL93:
 1280              	.L92:
 1281              		.cfi_def_cfa_offset 0
 1282              		.cfi_restore 4
 1283              		.cfi_restore 5
 1284              		.cfi_restore 6
 1285              		.cfi_restore 14
 1286              	.LBB1426:
 1287              	.LBB1423:
 1288              	.LBB1422:
 209:src/xeq.c     **** 
 1289              		.loc 1 209 1 view .LVU353
 1290 0068 0120     		movs	r0, #1
 1291              	.LVL94:
 209:src/xeq.c     **** 
 1292              		.loc 1 209 1 view .LVU354
 1293              	.LBE1422:
 1294              	.LBE1423:
 1295              	.LBE1426:
 1296 006a 7047     		bx	lr
 1297              	.L100:
 1298              		.align	2
 1299              	.L99:
 1300 006c 00000000 		.word	XromParams
 1301 0070 00000000 		.word	main_ram
 1302 0074 00000000 		.word	RetStkSize
 1303 0078 00000000 		.word	RetStk
 1304 007c 00000000 		.word	Error
 1305              		.cfi_endproc
 1306              	.LFE4:
 1308              		.section	.text.local_levels,"ax",%progbits
 1309              		.align	1
 1310              		.p2align 2,,3
 1311              		.global	local_levels
ARM GAS  /tmp/cc0UaEmF.s 			page 104


 1312              		.syntax unified
 1313              		.thumb
 1314              		.thumb_func
 1315              		.fpu fpv4-sp-d16
 1317              	local_levels:
 1318              	.LFB5:
 214:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1319              		.loc 1 214 24 is_stmt 1 view -0
 1320              		.cfi_startproc
 1321              		@ args = 0, pretend = 0, frame = 0
 1322              		@ frame_needed = 0, uses_anonymous_args = 0
 1323              		@ link register save eliminated.
 215:src/xeq.c     **** }
 1324              		.loc 1 215 2 view .LVU356
 215:src/xeq.c     **** }
 1325              		.loc 1 215 9 is_stmt 0 view .LVU357
 1326 0000 074B     		ldr	r3, .L105
 1327 0002 1B68     		ldr	r3, [r3]
 1328 0004 B3F9DE37 		ldrsh	r3, [r3, #2014]
 215:src/xeq.c     **** }
 1329              		.loc 1 215 57 view .LVU358
 1330 0008 002B     		cmp	r3, #0
 1331 000a 01DB     		blt	.L104
 1332 000c 0020     		movs	r0, #0
 216:src/xeq.c     **** 
 1333              		.loc 1 216 1 view .LVU359
 1334 000e 7047     		bx	lr
 1335              	.L104:
 215:src/xeq.c     **** }
 1336              		.loc 1 215 25 discriminator 1 view .LVU360
 1337 0010 044A     		ldr	r2, .L105+4
 1338 0012 1268     		ldr	r2, [r2]
 215:src/xeq.c     **** }
 1339              		.loc 1 215 57 discriminator 1 view .LVU361
 1340 0014 32F81300 		ldrh	r0, [r2, r3, lsl #1]
 1341 0018 C0F30B00 		ubfx	r0, r0, #0, #12
 1342 001c 7047     		bx	lr
 1343              	.L106:
 1344 001e 00BF     		.align	2
 1345              	.L105:
 1346 0020 00000000 		.word	main_ram
 1347 0024 00000000 		.word	RetStk
 1348              		.cfi_endproc
 1349              	.LFE5:
 1351              		.section	.text.local_regs_rarg,"ax",%progbits
 1352              		.align	1
 1353              		.p2align 2,,3
 1354              		.global	local_regs_rarg
 1355              		.syntax unified
 1356              		.thumb
 1357              		.thumb_func
 1358              		.fpu fpv4-sp-d16
 1360              	local_regs_rarg:
 1361              	.LVL95:
 1362              	.LFB6:
 222:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 1363              		.loc 1 222 35 is_stmt 1 view -0
ARM GAS  /tmp/cc0UaEmF.s 			page 105


 1364              		.cfi_startproc
 1365              		@ args = 0, pretend = 0, frame = 0
 1366              		@ frame_needed = 0, uses_anonymous_args = 0
 1367              		@ link register save eliminated.
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1368              		.loc 1 223 2 view .LVU363
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1369              		.loc 1 223 53 is_stmt 0 view .LVU364
 1370 0000 A0F17E03 		sub	r3, r0, #126
 1371 0004 012B     		cmp	r3, #1
 1372 0006 144B     		ldr	r3, .L116
 1373 0008 23D9     		bls	.L113
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1374              		.loc 1 223 53 discriminator 1 view .LVU365
 1375 000a 8028     		cmp	r0, #128
 1376 000c 11D0     		beq	.L114
 1377              	.LBB1427:
 1378              	.LBI1427:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1379              		.loc 1 932 5 is_stmt 1 view .LVU366
 1380              	.LBB1428:
 933:src/xeq.c     **** }
 1381              		.loc 1 933 2 view .LVU367
 933:src/xeq.c     **** }
 1382              		.loc 1 933 12 is_stmt 0 view .LVU368
 1383 000e 1B68     		ldr	r3, [r3]
 933:src/xeq.c     **** }
 1384              		.loc 1 933 24 view .LVU369
 1385 0010 B3F8E827 		ldrh	r2, [r3, #2024]
 1386 0014 44F20100 		movw	r0, #16385
 1387              	.LVL96:
 933:src/xeq.c     **** }
 1388              		.loc 1 933 24 view .LVU370
 1389              	.LBE1428:
 1390              	.LBE1427:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1391              		.loc 1 223 73 view .LVU371
 1392 0018 1040     		ands	r0, r0, r2
 1393 001a A0F58040 		sub	r0, r0, #16384
 1394 001e B0FA80F0 		clz	r0, r0
 1395 0022 4009     		lsrs	r0, r0, #5
 1396 0024 0230     		adds	r0, r0, #2
 1397              	.L109:
 224:src/xeq.c     **** }
 1398              		.loc 1 224 2 is_stmt 1 discriminator 8 view .LVU372
 1399              	.LBB1429:
 1400              	.LBI1429:
 214:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1401              		.loc 1 214 5 discriminator 8 view .LVU373
 1402              	.LBB1430:
 215:src/xeq.c     **** }
 1403              		.loc 1 215 2 discriminator 8 view .LVU374
 215:src/xeq.c     **** }
 1404              		.loc 1 215 9 is_stmt 0 discriminator 8 view .LVU375
 1405 0026 B3F9DE37 		ldrsh	r3, [r3, #2014]
 215:src/xeq.c     **** }
 1406              		.loc 1 215 57 discriminator 8 view .LVU376
ARM GAS  /tmp/cc0UaEmF.s 			page 106


 1407 002a 002B     		cmp	r3, #0
 1408 002c 08DB     		blt	.L115
 1409              	.L112:
 1410 002e 0020     		movs	r0, #0
 1411              	.LBE1430:
 1412              	.LBE1429:
 225:src/xeq.c     **** 
 1413              		.loc 1 225 1 view .LVU377
 1414 0030 7047     		bx	lr
 1415              	.LVL97:
 1416              	.L114:
 225:src/xeq.c     **** 
 1417              		.loc 1 225 1 view .LVU378
 1418 0032 1B68     		ldr	r3, [r3]
 224:src/xeq.c     **** }
 1419              		.loc 1 224 2 is_stmt 1 view .LVU379
 1420              	.LBB1433:
 214:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1421              		.loc 1 214 5 view .LVU380
 1422              	.LBB1431:
 215:src/xeq.c     **** }
 1423              		.loc 1 215 2 view .LVU381
 215:src/xeq.c     **** }
 1424              		.loc 1 215 9 is_stmt 0 view .LVU382
 1425 0034 B3F9DE37 		ldrsh	r3, [r3, #2014]
 215:src/xeq.c     **** }
 1426              		.loc 1 215 57 view .LVU383
 1427 0038 002B     		cmp	r3, #0
 1428              	.LBE1431:
 1429              	.LBE1433:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1430              		.loc 1 223 53 view .LVU384
 1431 003a 4FF00300 		mov	r0, #3
 1432              	.LVL98:
 1433              	.LBB1434:
 1434              	.LBB1432:
 215:src/xeq.c     **** }
 1435              		.loc 1 215 57 view .LVU385
 1436 003e F6DA     		bge	.L112
 1437              	.L115:
 215:src/xeq.c     **** }
 1438              		.loc 1 215 25 view .LVU386
 1439 0040 064A     		ldr	r2, .L116+4
 1440 0042 1268     		ldr	r2, [r2]
 215:src/xeq.c     **** }
 1441              		.loc 1 215 57 view .LVU387
 1442 0044 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1443 0048 C3F30B03 		ubfx	r3, r3, #0, #12
 1444 004c 43FA00F0 		asr	r0, r3, r0
 1445 0050 7047     		bx	lr
 1446              	.LVL99:
 1447              	.L113:
 215:src/xeq.c     **** }
 1448              		.loc 1 215 57 view .LVU388
 1449 0052 1B68     		ldr	r3, [r3]
 1450              	.LBE1432:
 1451              	.LBE1434:
ARM GAS  /tmp/cc0UaEmF.s 			page 107


 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1452              		.loc 1 223 53 view .LVU389
 1453 0054 0220     		movs	r0, #2
 1454              	.LVL100:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1455              		.loc 1 223 53 view .LVU390
 1456 0056 E6E7     		b	.L109
 1457              	.L117:
 1458              		.align	2
 1459              	.L116:
 1460 0058 00000000 		.word	main_ram
 1461 005c 00000000 		.word	RetStk
 1462              		.cfi_endproc
 1463              	.LFE6:
 1465              		.section	.text.get_reg_limit,"ax",%progbits
 1466              		.align	1
 1467              		.p2align 2,,3
 1468              		.syntax unified
 1469              		.thumb
 1470              		.thumb_func
 1471              		.fpu fpv4-sp-d16
 1473              	get_reg_limit:
 1474              	.LVL101:
 1475              	.LFB243:
4327:src/xeq.c     **** 
4328:src/xeq.c     **** 
4329:src/xeq.c     **** #ifndef UNIVERSAL_DISPATCH
4330:src/xeq.c     **** 
4331:src/xeq.c     **** 
4332:src/xeq.c     **** /*
4333:src/xeq.c     ****  *  Call a monadic function by reusing the decimal code for integer mode
4334:src/xeq.c     ****  */
4335:src/xeq.c     **** long long int intMonadic(long long int x) {
4336:src/xeq.c     **** 	int s;
4337:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &s);
4338:src/xeq.c     **** 	decNumber rx, r;
4339:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
4340:src/xeq.c     **** 
4341:src/xeq.c     **** 	if (isNULL(monfuncs[f].mondreal))
4342:src/xeq.c     **** 		bad_mode_error();
4343:src/xeq.c     **** 	else {
4344:src/xeq.c     **** 		FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
4345:src/xeq.c     **** #ifndef REALBUILD
4346:src/xeq.c     **** 		if (check_for_xrom_address(fp) != NULL)
4347:src/xeq.c     **** 			bad_mode_error();
4348:src/xeq.c     **** 		else 
4349:src/xeq.c     **** #endif
4350:src/xeq.c     **** 		{
4351:src/xeq.c     **** 			ullint_to_dn(&rx, vx);
4352:src/xeq.c     **** 			if (s)
4353:src/xeq.c     **** 				dn_minus(&rx, &rx);
4354:src/xeq.c     **** 			if (NULL == fp(&r, &rx))
4355:src/xeq.c     **** 				report_err(ERR_DOMAIN);
4356:src/xeq.c     **** 			else
4357:src/xeq.c     **** 				return intResult(&r);
4358:src/xeq.c     **** 		}
4359:src/xeq.c     **** 	}
ARM GAS  /tmp/cc0UaEmF.s 			page 108


4360:src/xeq.c     **** 	return 0;
4361:src/xeq.c     **** }
4362:src/xeq.c     **** 
4363:src/xeq.c     **** /*
4364:src/xeq.c     ****  *  Call a dyadic function by reusing the decimal code for integer mode
4365:src/xeq.c     ****  */
4366:src/xeq.c     **** long long int intDyadic(long long int y, long long int x) {
4367:src/xeq.c     **** 	int sx, sy;
4368:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &sx);
4369:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
4370:src/xeq.c     **** 	decNumber rx, ry, r;
4371:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
4372:src/xeq.c     **** 
4373:src/xeq.c     **** 	if (isNULL(dyfuncs[f].dydreal))
4374:src/xeq.c     **** 		bad_mode_error();
4375:src/xeq.c     **** 	else {
4376:src/xeq.c     **** 		FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
4377:src/xeq.c     **** 
4378:src/xeq.c     **** #ifndef REALBUILD
4379:src/xeq.c     **** 		if (check_for_xrom_address(fp) != NULL)
4380:src/xeq.c     **** 			bad_mode_error();
4381:src/xeq.c     **** 		else 
4382:src/xeq.c     **** #endif
4383:src/xeq.c     **** 		{
4384:src/xeq.c     **** 			ullint_to_dn(&rx, vx);	if (sx) dn_minus(&rx, &rx);
4385:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
4386:src/xeq.c     **** 
4387:src/xeq.c     **** 			if (NULL == fp(&r, &ry, &rx))
4388:src/xeq.c     **** 				report_err(ERR_DOMAIN);
4389:src/xeq.c     **** 			else
4390:src/xeq.c     **** 				return intResult(&r);
4391:src/xeq.c     **** 		}
4392:src/xeq.c     **** 	}
4393:src/xeq.c     **** 	return 0;
4394:src/xeq.c     **** }
4395:src/xeq.c     **** 
4396:src/xeq.c     **** 
4397:src/xeq.c     **** /* Dispatch routine for niladic functions.
4398:src/xeq.c     ****  */
4399:src/xeq.c     **** static void niladic(const opcode op) {
4400:src/xeq.c     **** 	const unsigned int idx = argKIND(op);
4401:src/xeq.c     **** 
4402:src/xeq.c     **** 	process_cmdline();
4403:src/xeq.c     **** 	if (idx < NUM_NILADIC) {
4404:src/xeq.c     **** 		if (is_intmode() && NILADIC_NOTINT(niladics[idx]))
4405:src/xeq.c     **** 			bad_mode_error();
4406:src/xeq.c     **** 		else if (! isNULL(niladics[idx].niladicf)) {
4407:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
4408:src/xeq.c     **** 			if (dispatch_xrom(fp))
4409:src/xeq.c     **** 				return;
4410:src/xeq.c     **** 			else {
4411:src/xeq.c     **** 				switch (NILADIC_NUMRESULTS(niladics[idx])) {
4412:src/xeq.c     **** 				case 2:	lift_if_enabled();
4413:src/xeq.c     **** 				case 1:	lift_if_enabled();
4414:src/xeq.c     **** 				default:
4415:src/xeq.c     **** 					fp((enum nilop)idx);
4416:src/xeq.c     **** 					break;
ARM GAS  /tmp/cc0UaEmF.s 			page 109


4417:src/xeq.c     **** 				}
4418:src/xeq.c     **** 			}
4419:src/xeq.c     **** 		}
4420:src/xeq.c     **** 	} else
4421:src/xeq.c     **** 		illegal(op);
4422:src/xeq.c     **** 	if (idx != OP_rCLX)
4423:src/xeq.c     **** 		set_lift();
4424:src/xeq.c     **** }
4425:src/xeq.c     **** 
4426:src/xeq.c     **** 
4427:src/xeq.c     **** /* Dispatch routine for monadic operations.
4428:src/xeq.c     ****  * Since these functions take an argument from the X register, save it in
4429:src/xeq.c     ****  * lastx and then replace it with their result, we can factor out the common
4430:src/xeq.c     ****  * stack manipulatin code.
4431:src/xeq.c     ****  */
4432:src/xeq.c     **** static void monadic(const opcode op)
4433:src/xeq.c     **** {
4434:src/xeq.c     **** 	unsigned int f;
4435:src/xeq.c     **** 	process_cmdline_set_lift();
4436:src/xeq.c     **** 
4437:src/xeq.c     **** 	f = argKIND(op);
4438:src/xeq.c     **** 	if (f < NUM_MONADIC) {
4439:src/xeq.c     **** 		if (is_intmode()) {
4440:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
4441:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
4442:src/xeq.c     **** 				if (dispatch_xrom(fp))
4443:src/xeq.c     **** 					return;
4444:src/xeq.c     **** 				else {
4445:src/xeq.c     **** 					long long int x = getX_int();
4446:src/xeq.c     **** 					x = fp(x);
4447:src/xeq.c     **** 					setlastX();
4448:src/xeq.c     **** 					setX_int(x);
4449:src/xeq.c     **** 				}
4450:src/xeq.c     **** 			} else
4451:src/xeq.c     **** 				bad_mode_error();
4452:src/xeq.c     **** 		} else {
4453:src/xeq.c     **** 			if (! isNULL(monfuncs[f].mondreal)) {
4454:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
4455:src/xeq.c     **** 				if (dispatch_xrom(fp))
4456:src/xeq.c     **** 					return;
4457:src/xeq.c     **** 				else {
4458:src/xeq.c     **** 					decNumber x, r;
4459:src/xeq.c     **** 					getX(&x);
4460:src/xeq.c     **** 					if (NULL == fp(&r, &x))
4461:src/xeq.c     **** 						set_NaN(&r);
4462:src/xeq.c     **** 					setlastX();
4463:src/xeq.c     **** 					setX(&r);
4464:src/xeq.c     **** 				}
4465:src/xeq.c     **** 			} else
4466:src/xeq.c     **** 				bad_mode_error();
4467:src/xeq.c     **** 		}
4468:src/xeq.c     **** 	} else
4469:src/xeq.c     **** 		illegal(op);
4470:src/xeq.c     **** }
4471:src/xeq.c     **** 
4472:src/xeq.c     **** static void monadic_cmplex(const opcode op) {
4473:src/xeq.c     **** 	decNumber x, y, rx, ry;
ARM GAS  /tmp/cc0UaEmF.s 			page 110


4474:src/xeq.c     **** 	unsigned int f;
4475:src/xeq.c     **** 
4476:src/xeq.c     **** 	process_cmdline_set_lift();
4477:src/xeq.c     **** 
4478:src/xeq.c     **** 	f = argKIND(op);
4479:src/xeq.c     **** 
4480:src/xeq.c     **** 	if (f < NUM_MONADIC) {
4481:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
4482:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
4483:src/xeq.c     **** 			if (dispatch_xrom(fp))
4484:src/xeq.c     **** 				return;
4485:src/xeq.c     **** 			else {
4486:src/xeq.c     **** 				getXY(&x, &y);
4487:src/xeq.c     **** 				fp(&rx, &ry, &x, &y);
4488:src/xeq.c     **** 				setlastXY();
4489:src/xeq.c     **** 				setXY(&rx, &ry);
4490:src/xeq.c     **** 				set_was_complex();
4491:src/xeq.c     **** 			}
4492:src/xeq.c     **** 		} else
4493:src/xeq.c     **** 			bad_mode_error();
4494:src/xeq.c     **** 	} else
4495:src/xeq.c     **** 		illegal(op);
4496:src/xeq.c     **** }
4497:src/xeq.c     **** 
4498:src/xeq.c     **** /***************************************************************************
4499:src/xeq.c     ****  * Dyadic function handling.
4500:src/xeq.c     ****  */
4501:src/xeq.c     **** 
4502:src/xeq.c     **** /* Dispatch routine for dyadic operations.
4503:src/xeq.c     ****  * Again, these functions have a common argument decode and record and
4504:src/xeq.c     ****  * common stack manipulation.
4505:src/xeq.c     ****  */
4506:src/xeq.c     **** static void dyadic(const opcode op) {
4507:src/xeq.c     **** 
4508:src/xeq.c     **** 	unsigned int f;
4509:src/xeq.c     **** 	process_cmdline_set_lift();
4510:src/xeq.c     **** 
4511:src/xeq.c     **** 	f = argKIND(op);
4512:src/xeq.c     **** 	if (f < NUM_DYADIC) {
4513:src/xeq.c     **** 		if (is_intmode()) {
4514:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
4515:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
4516:src/xeq.c     **** 				if (dispatch_xrom(fp))
4517:src/xeq.c     **** 					return;
4518:src/xeq.c     **** 				else {
4519:src/xeq.c     **** 					long long int x = getX_int();
4520:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
4521:src/xeq.c     **** 					x = fp(y, x);
4522:src/xeq.c     **** 					setlastX();
4523:src/xeq.c     **** 					lower();
4524:src/xeq.c     **** 					setX_int(x);
4525:src/xeq.c     **** 				}
4526:src/xeq.c     **** 			} else
4527:src/xeq.c     **** 				bad_mode_error();
4528:src/xeq.c     **** 		} else {
4529:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydreal)) {
4530:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
ARM GAS  /tmp/cc0UaEmF.s 			page 111


4531:src/xeq.c     **** 				if (dispatch_xrom(fp))
4532:src/xeq.c     **** 					return;
4533:src/xeq.c     **** 				else {
4534:src/xeq.c     **** 					decNumber x, y, r;
4535:src/xeq.c     **** 					getXY(&x, &y);
4536:src/xeq.c     **** 					if (NULL == fp(&r, &y, &x))
4537:src/xeq.c     **** 						set_NaN(&r);
4538:src/xeq.c     **** 					setlastX();
4539:src/xeq.c     **** 					lower();
4540:src/xeq.c     **** 					setX(&r);
4541:src/xeq.c     **** 				}
4542:src/xeq.c     **** 			} else
4543:src/xeq.c     **** 				bad_mode_error();
4544:src/xeq.c     **** 		}
4545:src/xeq.c     **** 	} else
4546:src/xeq.c     **** 		illegal(op);
4547:src/xeq.c     **** }
4548:src/xeq.c     **** 
4549:src/xeq.c     **** static void dyadic_cmplex(const opcode op) {
4550:src/xeq.c     **** 	decNumber x1, y1, x2, y2, xr, yr;
4551:src/xeq.c     **** 	unsigned int f;
4552:src/xeq.c     **** 
4553:src/xeq.c     **** 	process_cmdline_set_lift();
4554:src/xeq.c     **** 
4555:src/xeq.c     **** 	f = argKIND(op);
4556:src/xeq.c     **** 	if (f < NUM_DYADIC) {
4557:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
4558:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
4559:src/xeq.c     **** 			if (dispatch_xrom(fp))
4560:src/xeq.c     **** 				return;
4561:src/xeq.c     **** 			else {
4562:src/xeq.c     **** 				getXYZT(&x1, &y1, &x2, &y2);
4563:src/xeq.c     **** 
4564:src/xeq.c     **** 				fp(&xr, &yr, &x2, &y2, &x1, &y1);
4565:src/xeq.c     **** 
4566:src/xeq.c     **** 				setlastXY();
4567:src/xeq.c     **** 				lower2();
4568:src/xeq.c     **** 				setXY(&xr, &yr);
4569:src/xeq.c     **** 				set_was_complex();
4570:src/xeq.c     **** 			}
4571:src/xeq.c     **** 		} else
4572:src/xeq.c     **** 			bad_mode_error();
4573:src/xeq.c     **** 	} else
4574:src/xeq.c     **** 		illegal(op);
4575:src/xeq.c     **** }
4576:src/xeq.c     **** 
4577:src/xeq.c     **** /* Dispatch routine for triadic operations.
4578:src/xeq.c     ****  * Again, these functions have a common argument decode and record and
4579:src/xeq.c     ****  * common stack manipulation.
4580:src/xeq.c     ****  */
4581:src/xeq.c     **** static void triadic(const opcode op) {
4582:src/xeq.c     **** 	unsigned int f;
4583:src/xeq.c     **** 	process_cmdline_set_lift();
4584:src/xeq.c     **** 
4585:src/xeq.c     **** 	f = argKIND(op);
4586:src/xeq.c     **** 	if (f < NUM_TRIADIC) {
4587:src/xeq.c     **** 		if (is_intmode()) {
ARM GAS  /tmp/cc0UaEmF.s 			page 112


4588:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
4589:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
4590:src/xeq.c     **** 				if (dispatch_xrom(fp))
4591:src/xeq.c     **** 					return;
4592:src/xeq.c     **** 				else {
4593:src/xeq.c     **** 					long long int x = getX_int();
4594:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
4595:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
4596:src/xeq.c     **** 					x = fp(z, y, x);
4597:src/xeq.c     **** 					setlastX();
4598:src/xeq.c     **** 					lower();
4599:src/xeq.c     **** 					lower();
4600:src/xeq.c     **** 					setX_int(x);
4601:src/xeq.c     **** 				}
4602:src/xeq.c     **** 			} else
4603:src/xeq.c     **** 				bad_mode_error();
4604:src/xeq.c     **** 		} else {
4605:src/xeq.c     **** 			if (! isNULL(trifuncs[f].trireal)) {
4606:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
4607:src/xeq.c     **** 				if (dispatch_xrom(fp))
4608:src/xeq.c     **** 					return;
4609:src/xeq.c     **** 				else {
4610:src/xeq.c     **** 					decNumber x, y, z, r;
4611:src/xeq.c     **** 					getXYZ(&x, &y, &z);
4612:src/xeq.c     **** 					if (NULL == fp(&r, &z, &y, &x))
4613:src/xeq.c     **** 						set_NaN(&r);
4614:src/xeq.c     **** 					setlastX();
4615:src/xeq.c     **** 					lower();
4616:src/xeq.c     **** 					lower();
4617:src/xeq.c     **** 					setX(&r);
4618:src/xeq.c     **** 				}
4619:src/xeq.c     **** 			} else
4620:src/xeq.c     **** 				bad_mode_error();
4621:src/xeq.c     **** 		}
4622:src/xeq.c     **** 	} else
4623:src/xeq.c     **** 		illegal(op);
4624:src/xeq.c     **** }
4625:src/xeq.c     **** 
4626:src/xeq.c     **** 
4627:src/xeq.c     **** #else // UNIVERSAL_DISPATCH
4628:src/xeq.c     **** 
4629:src/xeq.c     **** 
4630:src/xeq.c     **** /*
4631:src/xeq.c     ****  *  Call functions by reusing the decimal code for integer mode
4632:src/xeq.c     ****  */
4633:src/xeq.c     **** static long long int universal_dispatch_int(long long int y, long long int x, unsigned int dyadic)
4634:src/xeq.c     **** {
4635:src/xeq.c     **** 	int sx, sy;
4636:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &sx);
4637:src/xeq.c     **** 	unsigned long long int vy;
4638:src/xeq.c     **** 	decNumber rx, ry, r;
4639:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
4640:src/xeq.c     **** 	void (*function_pointer)(void);
4641:src/xeq.c     **** 
4642:src/xeq.c     **** #ifdef SHORT_POINTERS
4643:src/xeq.c     **** 	unsigned short compact_pointer;
4644:src/xeq.c     **** #  define COMPACT_POINTER_TYPE unsigned short
ARM GAS  /tmp/cc0UaEmF.s 			page 113


4645:src/xeq.c     **** #else
4646:src/xeq.c     **** 	void (*compact_pointer)(void);
4647:src/xeq.c     **** #  define COMPACT_POINTER_TYPE void (*)(void)
4648:src/xeq.c     **** #endif
4649:src/xeq.c     **** 
4650:src/xeq.c     **** 	if (dyadic) {
4651:src/xeq.c     **** 		vy = extract_value(y, &sy);
4652:src/xeq.c     **** 		compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydreal;
4653:src/xeq.c     **** 	}
4654:src/xeq.c     **** 	else {
4655:src/xeq.c     **** 		compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].mondreal;
4656:src/xeq.c     **** 	}
4657:src/xeq.c     **** 	if (isNULL(compact_pointer)) {
4658:src/xeq.c     **** 		bad_mode_error();
4659:src/xeq.c     **** 	}
4660:src/xeq.c     **** 	else {
4661:src/xeq.c     **** 		function_pointer = (void (*)(void))EXPAND_ADDRESS(compact_pointer);
4662:src/xeq.c     **** #ifndef REALBUILD
4663:src/xeq.c     **** 		if (check_for_xrom_address(function_pointer) != NULL) {
4664:src/xeq.c     **** 			bad_mode_error();
4665:src/xeq.c     **** 		}
4666:src/xeq.c     **** 		else
4667:src/xeq.c     **** #endif
4668:src/xeq.c     **** 		{
4669:src/xeq.c     **** 			void *result;
4670:src/xeq.c     **** 
4671:src/xeq.c     **** 			ullint_to_dn(&rx, vx);		if (sx) dn_minus(&rx, &rx);
4672:src/xeq.c     **** 			if (dyadic) {
4673:src/xeq.c     **** 				ullint_to_dn(&ry, vy);		if (sy) dn_minus(&ry, &ry);
4674:src/xeq.c     **** 				result = ((FP_DYADIC_REAL)function_pointer)(&r, &ry, &rx);
4675:src/xeq.c     **** 			}
4676:src/xeq.c     **** 			else {
4677:src/xeq.c     **** 				result = ((FP_MONADIC_REAL)function_pointer)(&r, &rx);
4678:src/xeq.c     **** 			}
4679:src/xeq.c     **** 			if (NULL == result) {
4680:src/xeq.c     **** 				report_err(ERR_DOMAIN);
4681:src/xeq.c     **** 			}
4682:src/xeq.c     **** 			else {
4683:src/xeq.c     **** 				return intResult(&r);
4684:src/xeq.c     **** 			}
4685:src/xeq.c     **** 		}
4686:src/xeq.c     **** 	}
4687:src/xeq.c     **** 	return 0;
4688:src/xeq.c     **** #undef COMPACT_POINTER_TYPE
4689:src/xeq.c     **** }
4690:src/xeq.c     **** 
4691:src/xeq.c     **** 
4692:src/xeq.c     **** long long int intMonadic(long long int x)
4693:src/xeq.c     **** {
4694:src/xeq.c     **** 	return universal_dispatch_int(0, x, 0);
4695:src/xeq.c     **** }
4696:src/xeq.c     **** 
4697:src/xeq.c     **** long long int intDyadic(long long int y, long long int x)
4698:src/xeq.c     **** {
4699:src/xeq.c     **** 	return universal_dispatch_int(y, x, 1);
4700:src/xeq.c     **** }
4701:src/xeq.c     **** 
ARM GAS  /tmp/cc0UaEmF.s 			page 114


4702:src/xeq.c     **** 
4703:src/xeq.c     **** /*
4704:src/xeq.c     ****  *  Universal dispatch function for niladic, monadic, dyadic and triadic functions, both real and c
4705:src/xeq.c     ****  */
4706:src/xeq.c     **** static void universal_dispatch(const opcode op, const unsigned int operands, const unsigned int com
4707:src/xeq.c     **** {
4708:src/xeq.c     **** 	const int intmode = is_intmode();
4709:src/xeq.c     **** 	volatile long long int ix; // declared volatile to avoid bogus warning about variable possibly bei
4710:src/xeq.c     **** 	const unsigned int f = argKIND(op);
4711:src/xeq.c     **** 	void (*function_pointer)(void);
4712:src/xeq.c     **** 
4713:src/xeq.c     **** #ifdef SHORT_POINTERS
4714:src/xeq.c     **** 	unsigned short compact_pointer;
4715:src/xeq.c     **** #  define COMPACT_POINTER_TYPE unsigned short
4716:src/xeq.c     **** #else
4717:src/xeq.c     **** 	void (*compact_pointer)(void);
4718:src/xeq.c     **** #  define COMPACT_POINTER_TYPE void (*)(void)
4719:src/xeq.c     **** #endif
4720:src/xeq.c     **** 
4721:src/xeq.c     **** 	process_cmdline();
4722:src/xeq.c     **** 	if (operands != 0) {
4723:src/xeq.c     **** 		set_lift();
4724:src/xeq.c     **** 	}
4725:src/xeq.c     **** 	switch (operands) {
4726:src/xeq.c     **** 	default:
4727:src/xeq.c     **** 	case 0:
4728:src/xeq.c     **** 		if (f >= NUM_NILADIC) {
4729:src/xeq.c     **** illegal:
4730:src/xeq.c     **** 			illegal(op);
4731:src/xeq.c     **** 			goto finish_niladic;
4732:src/xeq.c     **** 		}
4733:src/xeq.c     **** 		if (intmode && NILADIC_NOTINT(niladics[f])) {
4734:src/xeq.c     **** 			goto bad_mode;
4735:src/xeq.c     **** 		}
4736:src/xeq.c     **** 		compact_pointer = (COMPACT_POINTER_TYPE)niladics[f].niladicf;
4737:src/xeq.c     **** 		break;
4738:src/xeq.c     **** 
4739:src/xeq.c     **** 	case 1:
4740:src/xeq.c     **** 		if (f >= NUM_MONADIC)
4741:src/xeq.c     **** 			goto illegal;
4742:src/xeq.c     **** 		if (intmode)
4743:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].monint;
4744:src/xeq.c     **** 		else if (complex)
4745:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].mondcmplx;
4746:src/xeq.c     **** 		else
4747:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].mondreal;
4748:src/xeq.c     **** 		break;
4749:src/xeq.c     **** 
4750:src/xeq.c     **** 	case 2:
4751:src/xeq.c     **** 		if (f >= NUM_DYADIC)
4752:src/xeq.c     **** 			goto illegal;
4753:src/xeq.c     **** 		if (intmode)
4754:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydint;
4755:src/xeq.c     **** 		else if (complex)
4756:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydcmplx;
4757:src/xeq.c     **** 		else
4758:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydreal;
ARM GAS  /tmp/cc0UaEmF.s 			page 115


4759:src/xeq.c     **** 		break;
4760:src/xeq.c     **** 
4761:src/xeq.c     **** 	case 3:
4762:src/xeq.c     **** 		if (f >= NUM_TRIADIC)
4763:src/xeq.c     **** 			goto illegal;
4764:src/xeq.c     **** 		if (intmode)
4765:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)trifuncs[f].triint;
4766:src/xeq.c     **** 		else
4767:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)trifuncs[f].trireal;
4768:src/xeq.c     **** 		break;
4769:src/xeq.c     **** 	}
4770:src/xeq.c     **** 	if (isNULL(compact_pointer)) {
4771:src/xeq.c     **** 		if (operands != 0) {
4772:src/xeq.c     **** 			// The original niladic() function doesn't invoke
4773:src/xeq.c     **** 			// bad_mode_error() if the function pointer is null.
4774:src/xeq.c     **** 			// TODO:  Verify that this behavior is really needed.
4775:src/xeq.c     **** bad_mode:
4776:src/xeq.c     **** 			bad_mode_error();
4777:src/xeq.c     **** 		}
4778:src/xeq.c     **** 		goto finish_niladic;
4779:src/xeq.c     **** 	}
4780:src/xeq.c     **** 	function_pointer = (void (*)(void))EXPAND_ADDRESS(compact_pointer);
4781:src/xeq.c     **** 	if (dispatch_xrom(function_pointer)) {
4782:src/xeq.c     **** 		return;
4783:src/xeq.c     **** 	}
4784:src/xeq.c     **** 	if (operands == 0) {
4785:src/xeq.c     **** 		switch (NILADIC_NUMRESULTS(niladics[f])) {
4786:src/xeq.c     **** 		case 2:		lift_if_enabled(); // fall through
4787:src/xeq.c     **** 		case 1:		lift_if_enabled(); break;
4788:src/xeq.c     **** 		}
4789:src/xeq.c     **** 		((FP_NILADIC)function_pointer)((enum nilop)f);
4790:src/xeq.c     **** finish_niladic:
4791:src/xeq.c     **** 		// If an error occurred, we end up here even if a non-niladic function was called.
4792:src/xeq.c     **** 		// set_lift() is always called for non-niladic functions so calling it again does no harm.
4793:src/xeq.c     **** 		if (f != OP_rCLX) {
4794:src/xeq.c     **** 			set_lift();
4795:src/xeq.c     **** 		}
4796:src/xeq.c     **** 	}
4797:src/xeq.c     **** 	else if (intmode) {
4798:src/xeq.c     **** 		long long int iy;
4799:src/xeq.c     **** 		long long int iz;
4800:src/xeq.c     **** 
4801:src/xeq.c     **** 		ix = getX_int();
4802:src/xeq.c     **** 		iy = get_reg_n_int(regY_idx);
4803:src/xeq.c     **** 		switch (operands) {
4804:src/xeq.c     **** 		default:
4805:src/xeq.c     **** 		case 1:
4806:src/xeq.c     **** 			ix = ((FP_MONADIC_INT)function_pointer)(ix);
4807:src/xeq.c     **** 			break;
4808:src/xeq.c     **** 
4809:src/xeq.c     **** 		case 2:
4810:src/xeq.c     **** 			ix = ((FP_DYADIC_INT)function_pointer)(iy, ix);
4811:src/xeq.c     **** 			break;
4812:src/xeq.c     **** 
4813:src/xeq.c     **** 		case 3:
4814:src/xeq.c     **** 			iz = get_reg_n_int(regZ_idx);
4815:src/xeq.c     **** 			ix = ((FP_TRIADIC_INT)function_pointer)(iz, iy, ix);
ARM GAS  /tmp/cc0UaEmF.s 			page 116


4816:src/xeq.c     **** 			break;
4817:src/xeq.c     **** 		}
4818:src/xeq.c     **** 		goto finish_x;
4819:src/xeq.c     **** 	}
4820:src/xeq.c     **** 	else {
4821:src/xeq.c     **** 		decNumber x, y, z, t, r1;
4822:src/xeq.c     **** 
4823:src/xeq.c     **** 		if (operands + complex <= 2) {
4824:src/xeq.c     **** 			getXY(&x, &y);
4825:src/xeq.c     **** 		}
4826:src/xeq.c     **** 		else {
4827:src/xeq.c     **** 			getXYZT(&x, &y, &z, &t);
4828:src/xeq.c     **** 		}
4829:src/xeq.c     **** 
4830:src/xeq.c     **** 		if (complex) {
4831:src/xeq.c     **** 			decNumber r2;
4832:src/xeq.c     **** 
4833:src/xeq.c     **** 			if (operands == 1) {
4834:src/xeq.c     **** 				((FP_MONADIC_CMPLX)function_pointer)(&r1, &r2, &x, &y);
4835:src/xeq.c     **** 			}
4836:src/xeq.c     **** 			else {
4837:src/xeq.c     **** 				((FP_DYADIC_CMPLX)function_pointer)(&r1, &r2, &z, &t, &x, &y);
4838:src/xeq.c     **** 			}
4839:src/xeq.c     **** 			setlastXY();
4840:src/xeq.c     **** 			if (operands != 1) {
4841:src/xeq.c     **** 				lower2();
4842:src/xeq.c     **** 			}
4843:src/xeq.c     **** 			setXY(&r1, &r2);
4844:src/xeq.c     **** 			set_was_complex();
4845:src/xeq.c     **** 		}
4846:src/xeq.c     **** 		else { // real
4847:src/xeq.c     **** 			void *result;
4848:src/xeq.c     **** 
4849:src/xeq.c     **** 			switch (operands) {
4850:src/xeq.c     **** 			default:
4851:src/xeq.c     **** 			case 1:
4852:src/xeq.c     **** 				result = ((FP_MONADIC_REAL)function_pointer)(&r1, &x);
4853:src/xeq.c     **** 				break;
4854:src/xeq.c     **** 
4855:src/xeq.c     **** 			case 2:
4856:src/xeq.c     **** 				result = ((FP_DYADIC_REAL)function_pointer)(&r1, &y, &x);
4857:src/xeq.c     **** 				break;
4858:src/xeq.c     **** 
4859:src/xeq.c     **** 			case 3:
4860:src/xeq.c     **** 				result = ((FP_TRIADIC_REAL)function_pointer)(&r1, &z, &y, &x);
4861:src/xeq.c     **** 				break;
4862:src/xeq.c     **** 			}
4863:src/xeq.c     **** 			if (NULL == result) {
4864:src/xeq.c     **** 				set_NaN(&r1);
4865:src/xeq.c     **** 			}
4866:src/xeq.c     **** finish_x:
4867:src/xeq.c     **** 			setlastX();
4868:src/xeq.c     **** 			switch (operands) {
4869:src/xeq.c     **** 			case 3:		lower(); // fall through
4870:src/xeq.c     **** 			case 2:		lower(); break;
4871:src/xeq.c     **** 			}
4872:src/xeq.c     **** 			if (!intmode) {
ARM GAS  /tmp/cc0UaEmF.s 			page 117


4873:src/xeq.c     **** 				setX(&r1);
4874:src/xeq.c     **** 			}
4875:src/xeq.c     **** 			else {
4876:src/xeq.c     **** 				setX_int(ix);
4877:src/xeq.c     **** 			}
4878:src/xeq.c     **** 		}
4879:src/xeq.c     **** 	}
4880:src/xeq.c     **** #undef COMPACT_POINTER_TYPE
4881:src/xeq.c     **** }
4882:src/xeq.c     **** 
4883:src/xeq.c     **** 
4884:src/xeq.c     **** static void niladic(const opcode op)
4885:src/xeq.c     **** {
4886:src/xeq.c     **** 	universal_dispatch(op, 0, 0);
4887:src/xeq.c     **** }
4888:src/xeq.c     **** 
4889:src/xeq.c     **** static void monadic(const opcode op)
4890:src/xeq.c     **** {
4891:src/xeq.c     **** 	universal_dispatch(op, 1, 0);
4892:src/xeq.c     **** }
4893:src/xeq.c     **** 
4894:src/xeq.c     **** static void monadic_cmplex(const opcode op)
4895:src/xeq.c     **** {
4896:src/xeq.c     **** 	universal_dispatch(op, 1, 1);
4897:src/xeq.c     **** }
4898:src/xeq.c     **** 
4899:src/xeq.c     **** static void dyadic(const opcode op)
4900:src/xeq.c     **** {
4901:src/xeq.c     **** 	universal_dispatch(op, 2, 0);
4902:src/xeq.c     **** }
4903:src/xeq.c     **** 
4904:src/xeq.c     **** static void dyadic_cmplex(const opcode op)
4905:src/xeq.c     **** {
4906:src/xeq.c     **** 	universal_dispatch(op, 2, 1);
4907:src/xeq.c     **** }
4908:src/xeq.c     **** 
4909:src/xeq.c     **** static void triadic(const opcode op)
4910:src/xeq.c     **** {
4911:src/xeq.c     **** 	universal_dispatch(op, 3, 0);
4912:src/xeq.c     **** }
4913:src/xeq.c     **** 
4914:src/xeq.c     **** 
4915:src/xeq.c     **** #endif // UNIVERSAL_DISPATCH
4916:src/xeq.c     **** 
4917:src/xeq.c     **** 
4918:src/xeq.c     **** /*
4919:src/xeq.c     ****  *  Helper to check the maximum allowed register number, 
4920:src/xeq.c     ****  *  depending on command flags and current allocation.
4921:src/xeq.c     ****  *  This needs to be seperate because its called twice for indirect arguments
4922:src/xeq.c     ****  */
4923:src/xeq.c     **** static unsigned int get_reg_limit(unsigned int cmd, unsigned int arg)
4924:src/xeq.c     **** {
 1476              		.loc 1 4924 1 is_stmt 1 view -0
 1477              		.cfi_startproc
 1478              		@ args = 0, pretend = 0, frame = 0
 1479              		@ frame_needed = 0, uses_anonymous_args = 0
4925:src/xeq.c     **** 	unsigned int lim = LOCAL_REG_BASE;
ARM GAS  /tmp/cc0UaEmF.s 			page 118


 1480              		.loc 1 4925 2 view .LVU392
4926:src/xeq.c     **** 
4927:src/xeq.c     **** 	if (arg < TOPREALREG) {
 1481              		.loc 1 4927 2 view .LVU393
 1482              		.loc 1 4927 5 is_stmt 0 view .LVU394
 1483 0000 6329     		cmp	r1, #99
4924:src/xeq.c     **** 	unsigned int lim = LOCAL_REG_BASE;
 1484              		.loc 1 4924 1 view .LVU395
 1485 0002 38B5     		push	{r3, r4, r5, lr}
 1486              		.cfi_def_cfa_offset 16
 1487              		.cfi_offset 3, -16
 1488              		.cfi_offset 4, -12
 1489              		.cfi_offset 5, -8
 1490              		.cfi_offset 14, -4
4924:src/xeq.c     **** 	unsigned int lim = LOCAL_REG_BASE;
 1491              		.loc 1 4924 1 view .LVU396
 1492 0004 0446     		mov	r4, r0
 1493              		.loc 1 4927 5 view .LVU397
 1494 0006 16D8     		bhi	.L119
4928:src/xeq.c     **** 		// Range checking for registers against variable boundary
4929:src/xeq.c     **** 		lim = global_regs_rarg((enum rarg) cmd) - 1;
 1495              		.loc 1 4929 3 is_stmt 1 view .LVU398
 1496              	.LVL102:
 1497              	.LBB1435:
 1498              	.LBI1435:
 238:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 1499              		.loc 1 238 14 view .LVU399
 1500              	.LBB1436:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1501              		.loc 1 239 2 view .LVU400
 1502              	.LBB1437:
 1503              	.LBI1437:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1504              		.loc 1 932 5 view .LVU401
 1505              	.LBB1438:
 933:src/xeq.c     **** }
 1506              		.loc 1 933 2 view .LVU402
 933:src/xeq.c     **** }
 1507              		.loc 1 933 12 is_stmt 0 view .LVU403
 1508 0008 294B     		ldr	r3, .L139
 1509 000a 1A68     		ldr	r2, [r3]
 933:src/xeq.c     **** }
 1510              		.loc 1 933 24 view .LVU404
 1511 000c B2F8E817 		ldrh	r1, [r2, #2024]
 1512              	.LVL103:
 933:src/xeq.c     **** }
 1513              		.loc 1 933 24 view .LVU405
 1514 0010 44F20103 		movw	r3, #16385
 1515              	.LBE1438:
 1516              	.LBE1437:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1517              		.loc 1 239 5 view .LVU406
 1518 0014 0B40     		ands	r3, r3, r1
 1519 0016 B3F5804F 		cmp	r3, #16384
 1520 001a 2ED0     		beq	.L120
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1521              		.loc 1 239 19 view .LVU407
ARM GAS  /tmp/cc0UaEmF.s 			page 119


 1522 001c 8028     		cmp	r0, #128
 1523 001e 39D0     		beq	.L136
 244:src/xeq.c     **** }
 1524              		.loc 1 244 3 is_stmt 1 view .LVU408
 244:src/xeq.c     **** }
 1525              		.loc 1 244 10 is_stmt 0 view .LVU409
 1526 0020 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1527              	.LVL104:
 1528              	.L124:
 244:src/xeq.c     **** }
 1529              		.loc 1 244 10 view .LVU410
 1530 0024 2349     		ldr	r1, .L139+4
 1531              	.LBE1436:
 1532              	.LBE1435:
 1533              		.loc 1 4929 7 view .LVU411
 1534 0026 0138     		subs	r0, r0, #1
 1535              	.LVL105:
 1536              		.loc 1 4929 7 view .LVU412
 1537 0028 2501     		lsls	r5, r4, #4
 1538              	.LVL106:
 1539              	.L125:
4930:src/xeq.c     **** 	}
4931:src/xeq.c     **** 	else if (argcmds[cmd].local) {
4932:src/xeq.c     **** 		// Range checking for local registers
4933:src/xeq.c     **** 		lim = NUMREG - 1 + local_regs_rarg((enum rarg) cmd);
4934:src/xeq.c     **** 	}
4935:src/xeq.c     **** 	if (argcmds[cmd].cmplx) {
 1540              		.loc 1 4935 2 is_stmt 1 view .LVU413
 1541              		.loc 1 4935 18 is_stmt 0 view .LVU414
 1542 002a 2944     		add	r1, r1, r5
 1543 002c 4B79     		ldrb	r3, [r1, #5]	@ zero_extendqisi2
 1544              		.loc 1 4935 5 view .LVU415
 1545 002e D906     		lsls	r1, r3, #27
 1546 0030 10D5     		bpl	.L126
 1547              	.L137:
4936:src/xeq.c     **** 		// one short of the last avialable register for complex access
4937:src/xeq.c     **** 		--lim;
 1548              		.loc 1 4937 3 is_stmt 1 view .LVU416
 1549 0032 0138     		subs	r0, r0, #1
 1550              	.LVL107:
 1551              	.L118:
4938:src/xeq.c     **** 	}
4939:src/xeq.c     **** 	else if (cmd == RARG_STOSTK || cmd == RARG_RCLSTK) {
4940:src/xeq.c     **** 		// avoid stack clash error in these commands
4941:src/xeq.c     **** 		lim -= stack_size() - 1;
4942:src/xeq.c     **** 	}
4943:src/xeq.c     **** 	return lim;
4944:src/xeq.c     **** }
 1552              		.loc 1 4944 1 is_stmt 0 view .LVU417
 1553 0034 38BD     		pop	{r3, r4, r5, pc}
 1554              	.LVL108:
 1555              	.L119:
4931:src/xeq.c     **** 		// Range checking for local registers
 1556              		.loc 1 4931 7 is_stmt 1 view .LVU418
4931:src/xeq.c     **** 		// Range checking for local registers
 1557              		.loc 1 4931 23 is_stmt 0 view .LVU419
 1558 0036 1F49     		ldr	r1, .L139+4
ARM GAS  /tmp/cc0UaEmF.s 			page 120


 1559              	.LVL109:
4931:src/xeq.c     **** 		// Range checking for local registers
 1560              		.loc 1 4931 23 view .LVU420
 1561 0038 01EB0013 		add	r3, r1, r0, lsl #4
 1562 003c 0501     		lsls	r5, r0, #4
 1563 003e 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
4931:src/xeq.c     **** 		// Range checking for local registers
 1564              		.loc 1 4931 10 view .LVU421
 1565 0040 1807     		lsls	r0, r3, #28
 1566              	.LVL110:
4931:src/xeq.c     **** 		// Range checking for local registers
 1567              		.loc 1 4931 10 view .LVU422
 1568 0042 18D5     		bpl	.L130
4933:src/xeq.c     **** 	}
 1569              		.loc 1 4933 3 is_stmt 1 view .LVU423
4933:src/xeq.c     **** 	}
 1570              		.loc 1 4933 22 is_stmt 0 view .LVU424
 1571 0044 E0B2     		uxtb	r0, r4
 1572 0046 FFF7FEFF 		bl	local_regs_rarg
 1573              	.LVL111:
4935:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1574              		.loc 1 4935 18 view .LVU425
 1575 004a 2944     		add	r1, r1, r5
4933:src/xeq.c     **** 	}
 1576              		.loc 1 4933 20 view .LVU426
 1577 004c 6F30     		adds	r0, r0, #111
 1578              	.LVL112:
4935:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1579              		.loc 1 4935 2 is_stmt 1 view .LVU427
4935:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1580              		.loc 1 4935 18 is_stmt 0 view .LVU428
 1581 004e 4B79     		ldrb	r3, [r1, #5]	@ zero_extendqisi2
4935:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1582              		.loc 1 4935 5 view .LVU429
 1583 0050 D906     		lsls	r1, r3, #27
 1584 0052 EED4     		bmi	.L137
 1585              	.L126:
4939:src/xeq.c     **** 		// avoid stack clash error in these commands
 1586              		.loc 1 4939 7 is_stmt 1 view .LVU430
4939:src/xeq.c     **** 		// avoid stack clash error in these commands
 1587              		.loc 1 4939 30 is_stmt 0 view .LVU431
 1588 0054 223C     		subs	r4, r4, #34
 1589              	.LVL113:
4939:src/xeq.c     **** 		// avoid stack clash error in these commands
 1590              		.loc 1 4939 10 view .LVU432
 1591 0056 012C     		cmp	r4, #1
 1592 0058 ECD8     		bhi	.L118
4941:src/xeq.c     **** 	}
 1593              		.loc 1 4941 3 is_stmt 1 view .LVU433
 1594              	.LBB1443:
 1595              	.LBI1443:
 703:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 1596              		.loc 1 703 5 view .LVU434
 1597              	.LBB1444:
 704:src/xeq.c     **** 		return 4;
 1598              		.loc 1 704 2 view .LVU435
 704:src/xeq.c     **** 		return 4;
ARM GAS  /tmp/cc0UaEmF.s 			page 121


 1599              		.loc 1 704 8 is_stmt 0 view .LVU436
 1600 005a 154B     		ldr	r3, .L139
 1601 005c 1B68     		ldr	r3, [r3]
 704:src/xeq.c     **** 		return 4;
 1602              		.loc 1 704 6 view .LVU437
 1603 005e 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 704:src/xeq.c     **** 		return 4;
 1604              		.loc 1 704 5 view .LVU438
 1605 0062 1207     		lsls	r2, r2, #28
 1606 0064 14D5     		bpl	.L131
 1607              	.LBB1445:
 1608              	.LBI1445:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 1609              		.loc 1 182 5 is_stmt 1 view .LVU439
 1610              	.LBB1446:
 183:src/xeq.c     **** }
 1611              		.loc 1 183 2 view .LVU440
 183:src/xeq.c     **** }
 1612              		.loc 1 183 9 is_stmt 0 view .LVU441
 1613 0066 B3F8E037 		ldrh	r3, [r3, #2016]
 1614              	.LBE1446:
 1615              	.LBE1445:
 704:src/xeq.c     **** 		return 4;
 1616              		.loc 1 704 27 view .LVU442
 1617 006a 9B0B     		lsrs	r3, r3, #14
 1618 006c 032B     		cmp	r3, #3
 1619 006e 16D0     		beq	.L138
 1620 0070 0723     		movs	r3, #7
 1621              	.L128:
 1622              	.LBE1444:
 1623              	.LBE1443:
4941:src/xeq.c     **** 	}
 1624              		.loc 1 4941 7 view .LVU443
 1625 0072 C01A     		subs	r0, r0, r3
 1626              	.LVL114:
4943:src/xeq.c     **** }
 1627              		.loc 1 4943 2 is_stmt 1 view .LVU444
 1628              		.loc 1 4944 1 is_stmt 0 view .LVU445
 1629 0074 38BD     		pop	{r3, r4, r5, pc}
 1630              	.LVL115:
 1631              	.L130:
4925:src/xeq.c     **** 
 1632              		.loc 1 4925 15 view .LVU446
 1633 0076 7020     		movs	r0, #112
 1634 0078 D7E7     		b	.L125
 1635              	.LVL116:
 1636              	.L120:
 1637              	.LBB1449:
 1638              	.LBB1441:
 1639              	.LBB1439:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1640              		.loc 1 240 3 is_stmt 1 view .LVU447
 241:src/xeq.c     **** 	}
 1641              		.loc 1 241 26 is_stmt 0 view .LVU448
 1642 007a A4F17E03 		sub	r3, r4, #126
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1643              		.loc 1 240 24 view .LVU449
ARM GAS  /tmp/cc0UaEmF.s 			page 122


 1644 007e 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1645              	.LVL117:
 241:src/xeq.c     **** 	}
 1646              		.loc 1 241 56 view .LVU450
 1647 0082 DBB2     		uxtb	r3, r3
 1648 0084 012B     		cmp	r3, #1
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1649              		.loc 1 240 13 view .LVU451
 1650 0086 A0F10C00 		sub	r0, r0, #12
 1651              	.LVL118:
 241:src/xeq.c     **** 	}
 1652              		.loc 1 241 3 is_stmt 1 view .LVU452
 241:src/xeq.c     **** 	}
 1653              		.loc 1 241 56 is_stmt 0 view .LVU453
 1654 008a CBD9     		bls	.L124
 241:src/xeq.c     **** 	}
 1655              		.loc 1 241 67 view .LVU454
 1656 008c 4010     		asrs	r0, r0, #1
 1657              	.LVL119:
 241:src/xeq.c     **** 	}
 1658              		.loc 1 241 67 view .LVU455
 1659 008e C9E7     		b	.L124
 1660              	.LVL120:
 1661              	.L131:
 241:src/xeq.c     **** 	}
 1662              		.loc 1 241 67 view .LVU456
 1663              	.LBE1439:
 1664              	.LBE1441:
 1665              	.LBE1449:
 1666              	.LBB1450:
 1667              	.LBB1447:
 1668 0090 0323     		movs	r3, #3
 1669 0092 EEE7     		b	.L128
 1670              	.LVL121:
 1671              	.L136:
 241:src/xeq.c     **** 	}
 1672              		.loc 1 241 67 view .LVU457
 1673              	.LBE1447:
 1674              	.LBE1450:
 1675              	.LBB1451:
 1676              	.LBB1442:
 1677              	.LBB1440:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1678              		.loc 1 240 3 is_stmt 1 view .LVU458
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1679              		.loc 1 240 24 is_stmt 0 view .LVU459
 1680 0094 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1681              	.LVL122:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1682              		.loc 1 240 13 view .LVU460
 1683 0098 0C38     		subs	r0, r0, #12
 1684              	.LVL123:
 241:src/xeq.c     **** 	}
 1685              		.loc 1 241 3 is_stmt 1 view .LVU461
 241:src/xeq.c     **** 	}
 1686              		.loc 1 241 67 is_stmt 0 view .LVU462
 1687 009a 4010     		asrs	r0, r0, #1
ARM GAS  /tmp/cc0UaEmF.s 			page 123


 1688              	.LVL124:
 241:src/xeq.c     **** 	}
 1689              		.loc 1 241 67 view .LVU463
 1690 009c C2E7     		b	.L124
 1691              	.LVL125:
 1692              	.L138:
 241:src/xeq.c     **** 	}
 1693              		.loc 1 241 67 view .LVU464
 1694              	.LBE1440:
 1695              	.LBE1442:
 1696              	.LBE1451:
 1697              	.LBB1452:
 1698              	.LBB1448:
 704:src/xeq.c     **** 		return 4;
 1699              		.loc 1 704 44 view .LVU465
 1700 009e 064B     		ldr	r3, .L139+8
 704:src/xeq.c     **** 		return 4;
 1701              		.loc 1 704 41 view .LVU466
 1702 00a0 93F90130 		ldrsb	r3, [r3, #1]
 1703 00a4 002B     		cmp	r3, #0
 1704 00a6 B4BF     		ite	lt
 1705 00a8 0723     		movlt	r3, #7
 1706 00aa 0323     		movge	r3, #3
 1707 00ac E1E7     		b	.L128
 1708              	.L140:
 1709 00ae 00BF     		.align	2
 1710              	.L139:
 1711 00b0 00000000 		.word	main_ram
 1712 00b4 00000000 		.word	argcmds
 1713 00b8 00000000 		.word	XromParams
 1714              	.LBE1448:
 1715              	.LBE1452:
 1716              		.cfi_endproc
 1717              	.LFE243:
 1719              		.section	.text.local_regs,"ax",%progbits
 1720              		.align	1
 1721              		.p2align 2,,3
 1722              		.global	local_regs
 1723              		.syntax unified
 1724              		.thumb
 1725              		.thumb_func
 1726              		.fpu fpv4-sp-d16
 1728              	local_regs:
 1729              	.LFB7:
 230:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 1730              		.loc 1 230 22 is_stmt 1 view -0
 1731              		.cfi_startproc
 1732              		@ args = 0, pretend = 0, frame = 0
 1733              		@ frame_needed = 0, uses_anonymous_args = 0
 1734              		@ link register save eliminated.
 231:src/xeq.c     **** }
 1735              		.loc 1 231 2 view .LVU468
 1736              	.LVL126:
 1737              	.LBB1453:
 1738              	.LBI1453:
 222:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 1739              		.loc 1 222 5 view .LVU469
ARM GAS  /tmp/cc0UaEmF.s 			page 124


 1740              	.LBB1454:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1741              		.loc 1 223 2 view .LVU470
 1742              	.LBB1455:
 1743              	.LBI1455:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1744              		.loc 1 932 5 view .LVU471
 1745              	.LBB1456:
 933:src/xeq.c     **** }
 1746              		.loc 1 933 2 view .LVU472
 933:src/xeq.c     **** }
 1747              		.loc 1 933 12 is_stmt 0 view .LVU473
 1748 0000 0D4B     		ldr	r3, .L145
 1749 0002 1B68     		ldr	r3, [r3]
 1750              	.LVL127:
 933:src/xeq.c     **** }
 1751              		.loc 1 933 12 view .LVU474
 1752              	.LBE1456:
 1753              	.LBE1455:
 224:src/xeq.c     **** }
 1754              		.loc 1 224 2 is_stmt 1 view .LVU475
 1755              	.LBB1459:
 1756              	.LBI1459:
 214:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1757              		.loc 1 214 5 view .LVU476
 1758              	.LBB1460:
 215:src/xeq.c     **** }
 1759              		.loc 1 215 2 view .LVU477
 215:src/xeq.c     **** }
 1760              		.loc 1 215 9 is_stmt 0 view .LVU478
 1761 0004 B3F9DE27 		ldrsh	r2, [r3, #2014]
 215:src/xeq.c     **** }
 1762              		.loc 1 215 57 view .LVU479
 1763 0008 002A     		cmp	r2, #0
 1764 000a 01DB     		blt	.L144
 1765 000c 0020     		movs	r0, #0
 1766              	.LVL128:
 215:src/xeq.c     **** }
 1767              		.loc 1 215 57 view .LVU480
 1768              	.LBE1460:
 1769              	.LBE1459:
 1770              	.LBE1454:
 1771              	.LBE1453:
 232:src/xeq.c     **** 
 1772              		.loc 1 232 1 view .LVU481
 1773 000e 7047     		bx	lr
 1774              	.LVL129:
 1775              	.L144:
 1776              	.LBB1472:
 1777              	.LBB1471:
 1778              	.LBB1465:
 1779              	.LBB1457:
 933:src/xeq.c     **** }
 1780              		.loc 1 933 24 view .LVU482
 1781 0010 B3F8E807 		ldrh	r0, [r3, #2024]
 1782              	.LBE1457:
 1783              	.LBE1465:
ARM GAS  /tmp/cc0UaEmF.s 			page 125


 1784              	.LBB1466:
 1785              	.LBB1461:
 215:src/xeq.c     **** }
 1786              		.loc 1 215 25 view .LVU483
 1787 0014 0949     		ldr	r1, .L145+4
 1788              	.LBE1461:
 1789              	.LBE1466:
 1790              	.LBB1467:
 1791              	.LBB1458:
 933:src/xeq.c     **** }
 1792              		.loc 1 933 24 view .LVU484
 1793 0016 44F20103 		movw	r3, #16385
 1794              	.LVL130:
 933:src/xeq.c     **** }
 1795              		.loc 1 933 24 view .LVU485
 1796              	.LBE1458:
 1797              	.LBE1467:
 1798              	.LBB1468:
 1799              	.LBB1462:
 215:src/xeq.c     **** }
 1800              		.loc 1 215 25 view .LVU486
 1801 001a 0968     		ldr	r1, [r1]
 1802              	.LBE1462:
 1803              	.LBE1468:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1804              		.loc 1 223 73 view .LVU487
 1805 001c 0340     		ands	r3, r3, r0
 1806 001e A3F58043 		sub	r3, r3, #16384
 1807              	.LBB1469:
 1808              	.LBB1463:
 215:src/xeq.c     **** }
 1809              		.loc 1 215 57 view .LVU488
 1810 0022 31F81200 		ldrh	r0, [r1, r2, lsl #1]
 1811              	.LBE1463:
 1812              	.LBE1469:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1813              		.loc 1 223 73 view .LVU489
 1814 0026 B3FA83F3 		clz	r3, r3
 1815 002a 5B09     		lsrs	r3, r3, #5
 1816 002c 0233     		adds	r3, r3, #2
 1817              	.LBB1470:
 1818              	.LBB1464:
 215:src/xeq.c     **** }
 1819              		.loc 1 215 57 view .LVU490
 1820 002e C0F30B00 		ubfx	r0, r0, #0, #12
 1821 0032 1841     		asrs	r0, r0, r3
 1822 0034 7047     		bx	lr
 1823              	.L146:
 1824 0036 00BF     		.align	2
 1825              	.L145:
 1826 0038 00000000 		.word	main_ram
 1827 003c 00000000 		.word	RetStk
 1828              	.LBE1464:
 1829              	.LBE1470:
 1830              	.LBE1471:
 1831              	.LBE1472:
 1832              		.cfi_endproc
ARM GAS  /tmp/cc0UaEmF.s 			page 126


 1833              	.LFE7:
 1835              		.section	.text.global_regs_rarg,"ax",%progbits
 1836              		.align	1
 1837              		.p2align 2,,3
 1838              		.global	global_regs_rarg
 1839              		.syntax unified
 1840              		.thumb
 1841              		.thumb_func
 1842              		.fpu fpv4-sp-d16
 1844              	global_regs_rarg:
 1845              	.LVL131:
 1846              	.LFB8:
 238:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 1847              		.loc 1 238 45 is_stmt 1 view -0
 1848              		.cfi_startproc
 1849              		@ args = 0, pretend = 0, frame = 0
 1850              		@ frame_needed = 0, uses_anonymous_args = 0
 1851              		@ link register save eliminated.
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1852              		.loc 1 239 2 view .LVU492
 1853              	.LBB1473:
 1854              	.LBI1473:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1855              		.loc 1 932 5 view .LVU493
 1856              	.LBB1474:
 933:src/xeq.c     **** }
 1857              		.loc 1 933 2 view .LVU494
 933:src/xeq.c     **** }
 1858              		.loc 1 933 12 is_stmt 0 view .LVU495
 1859 0000 0E4B     		ldr	r3, .L156
 1860 0002 1A68     		ldr	r2, [r3]
 933:src/xeq.c     **** }
 1861              		.loc 1 933 24 view .LVU496
 1862 0004 B2F8E817 		ldrh	r1, [r2, #2024]
 1863 0008 44F20103 		movw	r3, #16385
 1864              	.LBE1474:
 1865              	.LBE1473:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1866              		.loc 1 239 5 view .LVU497
 1867 000c 0B40     		ands	r3, r3, r1
 1868 000e B3F5804F 		cmp	r3, #16384
 1869 0012 09D0     		beq	.L148
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1870              		.loc 1 239 19 discriminator 1 view .LVU498
 1871 0014 8028     		cmp	r0, #128
 1872 0016 02D0     		beq	.L155
 244:src/xeq.c     **** }
 1873              		.loc 1 244 3 is_stmt 1 view .LVU499
 244:src/xeq.c     **** }
 1874              		.loc 1 244 10 is_stmt 0 view .LVU500
 1875 0018 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1876              	.LVL132:
 244:src/xeq.c     **** }
 1877              		.loc 1 244 10 view .LVU501
 1878 001c 7047     		bx	lr
 1879              	.LVL133:
 1880              	.L155:
ARM GAS  /tmp/cc0UaEmF.s 			page 127


 1881              	.LBB1475:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1882              		.loc 1 240 3 is_stmt 1 view .LVU502
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1883              		.loc 1 240 24 is_stmt 0 view .LVU503
 1884 001e 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1885              	.LVL134:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1886              		.loc 1 240 13 view .LVU504
 1887 0022 0C38     		subs	r0, r0, #12
 1888              	.LVL135:
 241:src/xeq.c     **** 	}
 1889              		.loc 1 241 3 is_stmt 1 view .LVU505
 1890              	.L153:
 241:src/xeq.c     **** 	}
 1891              		.loc 1 241 67 is_stmt 0 discriminator 1 view .LVU506
 1892 0024 4010     		asrs	r0, r0, #1
 1893              	.LVL136:
 241:src/xeq.c     **** 	}
 1894              		.loc 1 241 67 discriminator 1 view .LVU507
 1895 0026 7047     		bx	lr
 1896              	.LVL137:
 1897              	.L148:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1898              		.loc 1 240 3 is_stmt 1 view .LVU508
 241:src/xeq.c     **** 	}
 1899              		.loc 1 241 56 is_stmt 0 view .LVU509
 1900 0028 A0F17E03 		sub	r3, r0, #126
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1901              		.loc 1 240 24 view .LVU510
 1902 002c 92F8CF27 		ldrb	r2, [r2, #1999]	@ zero_extendqisi2
 241:src/xeq.c     **** 	}
 1903              		.loc 1 241 56 view .LVU511
 1904 0030 012B     		cmp	r3, #1
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1905              		.loc 1 240 13 view .LVU512
 1906 0032 A2F10C00 		sub	r0, r2, #12
 1907              	.LVL138:
 241:src/xeq.c     **** 	}
 1908              		.loc 1 241 3 is_stmt 1 view .LVU513
 241:src/xeq.c     **** 	}
 1909              		.loc 1 241 56 is_stmt 0 view .LVU514
 1910 0036 F5D8     		bhi	.L153
 1911              	.LBE1475:
 245:src/xeq.c     **** 
 1912              		.loc 1 245 1 view .LVU515
 1913 0038 7047     		bx	lr
 1914              	.L157:
 1915 003a 00BF     		.align	2
 1916              	.L156:
 1917 003c 00000000 		.word	main_ram
 1918              		.cfi_endproc
 1919              	.LFE8:
 1921              		.section	.text.global_regs,"ax",%progbits
 1922              		.align	1
 1923              		.p2align 2,,3
 1924              		.global	global_regs
ARM GAS  /tmp/cc0UaEmF.s 			page 128


 1925              		.syntax unified
 1926              		.thumb
 1927              		.thumb_func
 1928              		.fpu fpv4-sp-d16
 1930              	global_regs:
 1931              	.LFB9:
 250:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 1932              		.loc 1 250 32 is_stmt 1 view -0
 1933              		.cfi_startproc
 1934              		@ args = 0, pretend = 0, frame = 0
 1935              		@ frame_needed = 0, uses_anonymous_args = 0
 1936              		@ link register save eliminated.
 251:src/xeq.c     **** }
 1937              		.loc 1 251 2 view .LVU517
 1938              	.LVL139:
 1939              	.LBB1476:
 1940              	.LBI1476:
 238:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 1941              		.loc 1 238 14 view .LVU518
 1942              	.LBB1477:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1943              		.loc 1 239 2 view .LVU519
 1944              	.LBB1478:
 1945              	.LBI1478:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1946              		.loc 1 932 5 view .LVU520
 1947              	.LBB1479:
 933:src/xeq.c     **** }
 1948              		.loc 1 933 2 view .LVU521
 933:src/xeq.c     **** }
 1949              		.loc 1 933 12 is_stmt 0 view .LVU522
 1950 0000 074B     		ldr	r3, .L161
 1951 0002 1A68     		ldr	r2, [r3]
 933:src/xeq.c     **** }
 1952              		.loc 1 933 24 view .LVU523
 1953 0004 B2F8E817 		ldrh	r1, [r2, #2024]
 1954              	.LBE1479:
 1955              	.LBE1478:
 1956              	.LBB1481:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1957              		.loc 1 240 24 view .LVU524
 1958 0008 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1959              	.LBE1481:
 1960              	.LBB1482:
 1961              	.LBB1480:
 933:src/xeq.c     **** }
 1962              		.loc 1 933 24 view .LVU525
 1963 000c 44F20103 		movw	r3, #16385
 1964              	.LBE1480:
 1965              	.LBE1482:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1966              		.loc 1 239 5 view .LVU526
 1967 0010 0B40     		ands	r3, r3, r1
 1968 0012 B3F5804F 		cmp	r3, #16384
 1969              	.LBB1483:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1970              		.loc 1 240 3 is_stmt 1 view .LVU527
ARM GAS  /tmp/cc0UaEmF.s 			page 129


 241:src/xeq.c     **** 	}
 1971              		.loc 1 241 3 view .LVU528
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1972              		.loc 1 240 13 is_stmt 0 view .LVU529
 1973 0016 04BF     		itt	eq
 1974 0018 0C38     		subeq	r0, r0, #12
 241:src/xeq.c     **** 	}
 1975              		.loc 1 241 67 view .LVU530
 1976 001a 4010     		asreq	r0, r0, #1
 1977              	.LBE1483:
 244:src/xeq.c     **** }
 1978              		.loc 1 244 3 is_stmt 1 view .LVU531
 1979              	.LVL140:
 244:src/xeq.c     **** }
 1980              		.loc 1 244 3 is_stmt 0 view .LVU532
 1981              	.LBE1477:
 1982              	.LBE1476:
 252:src/xeq.c     **** 
 1983              		.loc 1 252 1 view .LVU533
 1984 001c 7047     		bx	lr
 1985              	.L162:
 1986 001e 00BF     		.align	2
 1987              	.L161:
 1988 0020 00000000 		.word	main_ram
 1989              		.cfi_endproc
 1990              	.LFE9:
 1992              		.section	.text.version,"ax",%progbits
 1993              		.align	1
 1994              		.p2align 2,,3
 1995              		.global	version
 1996              		.syntax unified
 1997              		.thumb
 1998              		.thumb_func
 1999              		.fpu fpv4-sp-d16
 2001              	version:
 2002              	.LVL141:
 2003              	.LFB10:
 264:src/xeq.c     **** 	State2.version = 1;
 2004              		.loc 1 264 29 is_stmt 1 view -0
 2005              		.cfi_startproc
 2006              		@ args = 0, pretend = 0, frame = 0
 2007              		@ frame_needed = 0, uses_anonymous_args = 0
 2008              		@ link register save eliminated.
 265:src/xeq.c     **** 	if (!State2.runmode)
 2009              		.loc 1 265 2 view .LVU535
 265:src/xeq.c     **** 	if (!State2.runmode)
 2010              		.loc 1 265 17 is_stmt 0 view .LVU536
 2011 0000 054B     		ldr	r3, .L166
 2012 0002 5A7D     		ldrb	r2, [r3, #21]	@ zero_extendqisi2
 266:src/xeq.c     **** 		display();
 2013              		.loc 1 266 6 view .LVU537
 2014 0004 997D     		ldrb	r1, [r3, #22]	@ zero_extendqisi2
 265:src/xeq.c     **** 	if (!State2.runmode)
 2015              		.loc 1 265 17 view .LVU538
 2016 0006 42F01002 		orr	r2, r2, #16
 2017 000a 5A75     		strb	r2, [r3, #21]
 266:src/xeq.c     **** 		display();
ARM GAS  /tmp/cc0UaEmF.s 			page 130


 2018              		.loc 1 266 2 is_stmt 1 view .LVU539
 266:src/xeq.c     **** 		display();
 2019              		.loc 1 266 5 is_stmt 0 view .LVU540
 2020 000c 4B06     		lsls	r3, r1, #25
 2021 000e 00D5     		bpl	.L165
 268:src/xeq.c     **** 
 2022              		.loc 1 268 1 view .LVU541
 2023 0010 7047     		bx	lr
 2024              	.L165:
 267:src/xeq.c     **** }
 2025              		.loc 1 267 3 is_stmt 1 view .LVU542
 2026 0012 FFF7FEBF 		b	display
 2027              	.LVL142:
 2028              	.L167:
 267:src/xeq.c     **** }
 2029              		.loc 1 267 3 is_stmt 0 view .LVU543
 2030 0016 00BF     		.align	2
 2031              	.L166:
 2032 0018 00000000 		.word	StateWhileOn
 2033              		.cfi_endproc
 2034              	.LFE10:
 2036              		.section	.text.cmd_off,"ax",%progbits
 2037              		.align	1
 2038              		.p2align 2,,3
 2039              		.global	cmd_off
 2040              		.syntax unified
 2041              		.thumb
 2042              		.thumb_func
 2043              		.fpu fpv4-sp-d16
 2045              	cmd_off:
 2046              	.LVL143:
 2047              	.LFB11:
 270:src/xeq.c     **** 	shutdown();
 2048              		.loc 1 270 29 is_stmt 1 view -0
 2049              		.cfi_startproc
 2050              		@ args = 0, pretend = 0, frame = 0
 2051              		@ frame_needed = 0, uses_anonymous_args = 0
 2052              		@ link register save eliminated.
 271:src/xeq.c     **** }
 2053              		.loc 1 271 2 view .LVU545
 2054 0000 FFF7FEBF 		b	shutdown
 2055              	.LVL144:
 271:src/xeq.c     **** }
 2056              		.loc 1 271 2 is_stmt 0 view .LVU546
 2057              		.cfi_endproc
 2058              	.LFE11:
 2060              		.section	.text.init_RegionTab,"ax",%progbits
 2061              		.align	1
 2062              		.p2align 2,,3
 2063              		.global	init_RegionTab
 2064              		.syntax unified
 2065              		.thumb
 2066              		.thumb_func
 2067              		.fpu fpv4-sp-d16
 2069              	init_RegionTab:
 2070              	.LFB13:
 294:src/xeq.c     ****   RegionTab[0] = (s_opcode*) Prog;
ARM GAS  /tmp/cc0UaEmF.s 			page 131


 2071              		.loc 1 294 28 is_stmt 1 view -0
 2072              		.cfi_startproc
 2073              		@ args = 0, pretend = 0, frame = 0
 2074              		@ frame_needed = 0, uses_anonymous_args = 0
 2075              		@ link register save eliminated.
 295:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2076              		.loc 1 295 3 view .LVU548
 295:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2077              		.loc 1 295 30 is_stmt 0 view .LVU549
 2078 0000 0649     		ldr	r1, .L170
 296:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 2079              		.loc 1 296 30 view .LVU550
 2080 0002 074A     		ldr	r2, .L170+4
 297:src/xeq.c     **** }
 2081              		.loc 1 297 30 view .LVU551
 2082 0004 074B     		ldr	r3, .L170+8
 295:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2083              		.loc 1 295 30 view .LVU552
 2084 0006 0868     		ldr	r0, [r1]
 296:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 2085              		.loc 1 296 30 view .LVU553
 2086 0008 1168     		ldr	r1, [r2]
 297:src/xeq.c     **** }
 2087              		.loc 1 297 30 view .LVU554
 2088 000a 1A68     		ldr	r2, [r3]
 295:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2089              		.loc 1 295 16 view .LVU555
 2090 000c 064B     		ldr	r3, .L170+12
 295:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2091              		.loc 1 295 30 view .LVU556
 2092 000e 0430     		adds	r0, r0, #4
 296:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 2093              		.loc 1 296 30 view .LVU557
 2094 0010 0431     		adds	r1, r1, #4
 297:src/xeq.c     **** }
 2095              		.loc 1 297 30 view .LVU558
 2096 0012 0432     		adds	r2, r2, #4
 296:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 2097              		.loc 1 296 16 view .LVU559
 2098 0014 C3E90001 		strd	r0, r1, [r3]
 297:src/xeq.c     **** }
 2099              		.loc 1 297 3 is_stmt 1 view .LVU560
 297:src/xeq.c     **** }
 2100              		.loc 1 297 16 is_stmt 0 view .LVU561
 2101 0018 9A60     		str	r2, [r3, #8]
 298:src/xeq.c     **** #else
 2102              		.loc 1 298 1 view .LVU562
 2103 001a 7047     		bx	lr
 2104              	.L171:
 2105              		.align	2
 2106              	.L170:
 2107 001c 00000000 		.word	main_ram
 2108 0020 00000000 		.word	library_ram
 2109 0024 00000000 		.word	backup_ram
 2110 0028 00000000 		.word	.LANCHOR0
 2111              		.cfi_endproc
 2112              	.LFE13:
ARM GAS  /tmp/cc0UaEmF.s 			page 132


 2114              		.section	.text.sizeLIB,"ax",%progbits
 2115              		.align	1
 2116              		.p2align 2,,3
 2117              		.global	sizeLIB
 2118              		.syntax unified
 2119              		.thumb
 2120              		.thumb_func
 2121              		.fpu fpv4-sp-d16
 2123              	sizeLIB:
 2124              	.LVL145:
 2125              	.LFB14:
 310:src/xeq.c     **** 	if (region == REGION_XROM)
 2126              		.loc 1 310 25 is_stmt 1 view -0
 2127              		.cfi_startproc
 2128              		@ args = 0, pretend = 0, frame = 0
 2129              		@ frame_needed = 0, uses_anonymous_args = 0
 2130              		@ link register save eliminated.
 311:src/xeq.c     **** 		return xrom_size;
 2131              		.loc 1 311 2 view .LVU564
 311:src/xeq.c     **** 		return xrom_size;
 2132              		.loc 1 311 5 is_stmt 0 view .LVU565
 2133 0000 0328     		cmp	r0, #3
 2134 0002 05D0     		beq	.L175
 314:src/xeq.c     **** }
 2135              		.loc 1 314 3 is_stmt 1 view .LVU566
 314:src/xeq.c     **** }
 2136              		.loc 1 314 24 is_stmt 0 view .LVU567
 2137 0004 044B     		ldr	r3, .L176
 314:src/xeq.c     **** }
 2138              		.loc 1 314 32 view .LVU568
 2139 0006 53F82030 		ldr	r3, [r3, r0, lsl #2]
 314:src/xeq.c     **** }
 2140              		.loc 1 314 10 view .LVU569
 2141 000a 33F8020C 		ldrh	r0, [r3, #-2]
 2142              	.LVL146:
 315:src/xeq.c     **** 
 2143              		.loc 1 315 1 view .LVU570
 2144 000e 7047     		bx	lr
 2145              	.LVL147:
 2146              	.L175:
 312:src/xeq.c     **** 	else
 2147              		.loc 1 312 3 is_stmt 1 view .LVU571
 312:src/xeq.c     **** 	else
 2148              		.loc 1 312 10 is_stmt 0 view .LVU572
 2149 0010 024B     		ldr	r3, .L176+4
 2150 0012 1888     		ldrh	r0, [r3]
 2151              	.LVL148:
 312:src/xeq.c     **** 	else
 2152              		.loc 1 312 10 view .LVU573
 2153 0014 7047     		bx	lr
 2154              	.L177:
 2155 0016 00BF     		.align	2
 2156              	.L176:
 2157 0018 00000000 		.word	.LANCHOR0
 2158 001c 00000000 		.word	xrom_size
 2159              		.cfi_endproc
 2160              	.LFE14:
ARM GAS  /tmp/cc0UaEmF.s 			page 133


 2162              		.section	.text.getprog,"ax",%progbits
 2163              		.align	1
 2164              		.p2align 2,,3
 2165              		.global	getprog
 2166              		.syntax unified
 2167              		.thumb
 2168              		.thumb_func
 2169              		.fpu fpv4-sp-d16
 2171              	getprog:
 2172              	.LVL149:
 2173              	.LFB16:
 334:src/xeq.c     **** 
 2174              		.loc 1 334 33 is_stmt 1 view -0
 2175              		.cfi_startproc
 2176              		@ args = 0, pretend = 0, frame = 0
 2177              		@ frame_needed = 0, uses_anonymous_args = 0
 2178              		@ link register save eliminated.
 336:src/xeq.c     **** 	int offset = offsetLIB(pc);
 2179              		.loc 1 336 2 view .LVU575
 337:src/xeq.c     **** 
 2180              		.loc 1 337 15 is_stmt 0 view .LVU576
 2181 0000 C0F30D02 		ubfx	r2, r0, #0, #14
 2182 0004 531E     		subs	r3, r2, #1
 336:src/xeq.c     **** 	int offset = offsetLIB(pc);
 2183              		.loc 1 336 21 view .LVU577
 2184 0006 800B     		lsrs	r0, r0, #14
 2185              	.LVL150:
 337:src/xeq.c     **** 
 2186              		.loc 1 337 2 is_stmt 1 view .LVU578
 339:src/xeq.c     **** 		return OP_NIL | OP_END;
 2187              		.loc 1 339 2 view .LVU579
 339:src/xeq.c     **** 		return OP_NIL | OP_END;
 2188              		.loc 1 339 5 is_stmt 0 view .LVU580
 2189 0008 BAB1     		cbz	r2, .L184
 2190              	.LVL151:
 2191              	.LBB1484:
 2192              	.LBI1484:
 310:src/xeq.c     **** 	if (region == REGION_XROM)
 2193              		.loc 1 310 5 is_stmt 1 view .LVU581
 2194              	.LBB1485:
 311:src/xeq.c     **** 		return xrom_size;
 2195              		.loc 1 311 2 view .LVU582
 311:src/xeq.c     **** 		return xrom_size;
 2196              		.loc 1 311 5 is_stmt 0 view .LVU583
 2197 000a 0328     		cmp	r0, #3
 2198 000c 18D0     		beq	.L185
 314:src/xeq.c     **** }
 2199              		.loc 1 314 3 is_stmt 1 view .LVU584
 314:src/xeq.c     **** }
 2200              		.loc 1 314 24 is_stmt 0 view .LVU585
 2201 000e 0E4A     		ldr	r2, .L187
 314:src/xeq.c     **** }
 2202              		.loc 1 314 32 view .LVU586
 2203 0010 52F82020 		ldr	r2, [r2, r0, lsl #2]
 314:src/xeq.c     **** }
 2204              		.loc 1 314 10 view .LVU587
 2205 0014 32F8022C 		ldrh	r2, [r2, #-2]
ARM GAS  /tmp/cc0UaEmF.s 			page 134


 2206              	.L181:
 2207              	.LVL152:
 314:src/xeq.c     **** }
 2208              		.loc 1 314 10 view .LVU588
 2209              	.LBE1485:
 2210              	.LBE1484:
 339:src/xeq.c     **** 		return OP_NIL | OP_END;
 2211              		.loc 1 339 17 view .LVU589
 2212 0018 9342     		cmp	r3, r2
 2213 001a 0EDA     		bge	.L184
 341:src/xeq.c     **** }
 2214              		.loc 1 341 2 is_stmt 1 view .LVU590
 341:src/xeq.c     **** }
 2215              		.loc 1 341 29 is_stmt 0 view .LVU591
 2216 001c 0A4A     		ldr	r2, .L187
 341:src/xeq.c     **** }
 2217              		.loc 1 341 38 view .LVU592
 2218 001e 52F82020 		ldr	r2, [r2, r0, lsl #2]
 2219              	.LBB1487:
 2220              	.LBB1488:
 323:src/xeq.c     **** 	if ( isDBL(r) ) {
 2221              		.loc 1 323 13 view .LVU593
 2222 0022 32F81300 		ldrh	r0, [r2, r3, lsl #1]
 2223              	.LVL153:
 324:src/xeq.c     **** 		r |= loc[1] << 16;
 2224              		.loc 1 324 5 view .LVU594
 2225 0026 00F47041 		and	r1, r0, #61440
 2226 002a B1F5704F 		cmp	r1, #61440
 2227              	.LBE1488:
 2228              	.LBE1487:
 341:src/xeq.c     **** }
 2229              		.loc 1 341 38 view .LVU595
 2230 002e 02EB4303 		add	r3, r2, r3, lsl #1
 2231              	.LVL154:
 2232              	.LBB1491:
 2233              	.LBI1487:
 321:src/xeq.c     **** {
 2234              		.loc 1 321 15 is_stmt 1 view .LVU596
 2235              	.LBB1489:
 323:src/xeq.c     **** 	if ( isDBL(r) ) {
 2236              		.loc 1 323 2 view .LVU597
 324:src/xeq.c     **** 		r |= loc[1] << 16;
 2237              		.loc 1 324 2 view .LVU598
 324:src/xeq.c     **** 		r |= loc[1] << 16;
 2238              		.loc 1 324 5 is_stmt 0 view .LVU599
 2239 0032 00D0     		beq	.L186
 2240              	.LBE1489:
 2241              	.LBE1491:
 342:src/xeq.c     **** 
 2242              		.loc 1 342 1 view .LVU600
 2243 0034 7047     		bx	lr
 2244              	.L186:
 2245              	.LBB1492:
 2246              	.LBB1490:
 325:src/xeq.c     **** 	}
 2247              		.loc 1 325 3 is_stmt 1 view .LVU601
 325:src/xeq.c     **** 	}
ARM GAS  /tmp/cc0UaEmF.s 			page 135


 2248              		.loc 1 325 5 is_stmt 0 view .LVU602
 2249 0036 1868     		ldr	r0, [r3]	@ unaligned
 2250              	.LVL155:
 325:src/xeq.c     **** 	}
 2251              		.loc 1 325 5 view .LVU603
 2252 0038 7047     		bx	lr
 2253              	.LVL156:
 2254              	.L184:
 325:src/xeq.c     **** 	}
 2255              		.loc 1 325 5 view .LVU604
 2256              	.LBE1490:
 2257              	.LBE1492:
 340:src/xeq.c     **** 	return get_opcode(RegionTab[region] + offset);
 2258              		.loc 1 340 10 view .LVU605
 2259 003a 4FF49D70 		mov	r0, #314
 2260              	.LVL157:
 342:src/xeq.c     **** 
 2261              		.loc 1 342 1 view .LVU606
 2262 003e 7047     		bx	lr
 2263              	.LVL158:
 2264              	.L185:
 2265              	.LBB1493:
 2266              	.LBB1486:
 312:src/xeq.c     **** 	else
 2267              		.loc 1 312 3 is_stmt 1 view .LVU607
 312:src/xeq.c     **** 	else
 2268              		.loc 1 312 10 is_stmt 0 view .LVU608
 2269 0040 024A     		ldr	r2, .L187+4
 2270 0042 1288     		ldrh	r2, [r2]
 2271 0044 E8E7     		b	.L181
 2272              	.L188:
 2273 0046 00BF     		.align	2
 2274              	.L187:
 2275 0048 00000000 		.word	.LANCHOR0
 2276 004c 00000000 		.word	xrom_size
 2277              	.LBE1486:
 2278              	.LBE1493:
 2279              		.cfi_endproc
 2280              	.LFE16:
 2282              		.section	.text.get_current_prog,"ax",%progbits
 2283              		.align	1
 2284              		.p2align 2,,3
 2285              		.global	get_current_prog
 2286              		.syntax unified
 2287              		.thumb
 2288              		.thumb_func
 2289              		.fpu fpv4-sp-d16
 2291              	get_current_prog:
 2292              	.LFB17:
 348:src/xeq.c     **** 
 2293              		.loc 1 348 40 is_stmt 1 view -0
 2294              		.cfi_startproc
 2295              		@ args = 0, pretend = 0, frame = 0
 2296              		@ frame_needed = 0, uses_anonymous_args = 0
 2297              		@ link register save eliminated.
 350:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2298              		.loc 1 350 2 view .LVU610
ARM GAS  /tmp/cc0UaEmF.s 			page 136


 350:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2299              		.loc 1 350 21 is_stmt 0 view .LVU611
 2300 0000 074B     		ldr	r3, .L190
 351:src/xeq.c     **** }
 2301              		.loc 1 351 18 view .LVU612
 2302 0002 084A     		ldr	r2, .L190+4
 350:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2303              		.loc 1 350 21 view .LVU613
 2304 0004 1B68     		ldr	r3, [r3]
 2305 0006 B3F8EC37 		ldrh	r3, [r3, #2028]
 2306              	.LVL159:
 351:src/xeq.c     **** }
 2307              		.loc 1 351 2 is_stmt 1 view .LVU614
 350:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2308              		.loc 1 350 12 is_stmt 0 view .LVU615
 2309 000a 990B     		lsrs	r1, r3, #14
 351:src/xeq.c     **** }
 2310              		.loc 1 351 27 view .LVU616
 2311 000c C3F30D03 		ubfx	r3, r3, #0, #14
 2312              	.LVL160:
 351:src/xeq.c     **** }
 2313              		.loc 1 351 27 view .LVU617
 2314 0010 52F82100 		ldr	r0, [r2, r1, lsl #2]
 2315 0014 03F10043 		add	r3, r3, #-2147483648
 2316 0018 013B     		subs	r3, r3, #1
 352:src/xeq.c     **** 
 2317              		.loc 1 352 1 view .LVU618
 2318 001a 00EB4300 		add	r0, r0, r3, lsl #1
 2319 001e 7047     		bx	lr
 2320              	.L191:
 2321              		.align	2
 2322              	.L190:
 2323 0020 00000000 		.word	main_ram
 2324 0024 00000000 		.word	.LANCHOR0
 2325              		.cfi_endproc
 2326              	.LFE17:
 2328              		.section	.text.do_inc,"ax",%progbits
 2329              		.align	1
 2330              		.p2align 2,,3
 2331              		.global	do_inc
 2332              		.syntax unified
 2333              		.thumb
 2334              		.thumb_func
 2335              		.fpu fpv4-sp-d16
 2337              	do_inc:
 2338              	.LVL161:
 2339              	.LFB20:
 409:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 2340              		.loc 1 409 54 is_stmt 1 view -0
 2341              		.cfi_startproc
 2342              		@ args = 0, pretend = 0, frame = 16
 2343              		@ frame_needed = 0, uses_anonymous_args = 0
 410:src/xeq.c     **** 	unsigned short int top = 0;
 2344              		.loc 1 410 2 view .LVU620
 409:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 2345              		.loc 1 409 54 is_stmt 0 view .LVU621
 2346 0000 70B5     		push	{r4, r5, r6, lr}
ARM GAS  /tmp/cc0UaEmF.s 			page 137


 2347              		.cfi_def_cfa_offset 16
 2348              		.cfi_offset 4, -16
 2349              		.cfi_offset 5, -12
 2350              		.cfi_offset 6, -8
 2351              		.cfi_offset 14, -4
 2352 0002 84B0     		sub	sp, sp, #16
 2353              		.cfi_def_cfa_offset 32
 409:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 2354              		.loc 1 409 54 view .LVU622
 2355 0004 0546     		mov	r5, r0
 2356 0006 0191     		str	r1, [sp, #4]
 410:src/xeq.c     **** 	unsigned short int top = 0;
 2357              		.loc 1 410 42 view .LVU623
 2358 0008 FFF7FEFF 		bl	getprog
 2359              	.LVL162:
 414:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2360              		.loc 1 414 12 view .LVU624
 2361 000c 0D4E     		ldr	r6, .L196
 415:src/xeq.c     **** 
 2362              		.loc 1 415 11 view .LVU625
 2363 000e 0199     		ldr	r1, [sp, #4]
 410:src/xeq.c     **** 	unsigned short int top = 0;
 2364              		.loc 1 410 42 view .LVU626
 2365 0010 00F47040 		and	r0, r0, #61440
 410:src/xeq.c     **** 	unsigned short int top = 0;
 2366              		.loc 1 410 27 view .LVU627
 2367 0014 6C1C     		adds	r4, r5, #1
 411:src/xeq.c     **** 	unsigned short int bottom = 0;
 2368              		.loc 1 411 21 view .LVU628
 2369 0016 0023     		movs	r3, #0
 410:src/xeq.c     **** 	unsigned short int top = 0;
 2370              		.loc 1 410 27 view .LVU629
 2371 0018 B0F5704F 		cmp	r0, #61440
 2372 001c 08BF     		it	eq
 2373 001e 0134     		addeq	r4, r4, #1
 415:src/xeq.c     **** 
 2374              		.loc 1 415 11 view .LVU630
 2375 0020 0DF10E02 		add	r2, sp, #14
 2376 0024 2846     		mov	r0, r5
 414:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2377              		.loc 1 414 12 view .LVU631
 2378 0026 3360     		str	r3, [r6]
 411:src/xeq.c     **** 	unsigned short int bottom = 0;
 2379              		.loc 1 411 21 view .LVU632
 2380 0028 ADF80E30 		strh	r3, [sp, #14]	@ movhi
 415:src/xeq.c     **** 
 2381              		.loc 1 415 11 view .LVU633
 2382 002c FFF7FEFF 		bl	find_section_bounds
 2383              	.LVL163:
 410:src/xeq.c     **** 	unsigned short int top = 0;
 2384              		.loc 1 410 27 view .LVU634
 2385 0030 A4B2     		uxth	r4, r4
 2386              	.LVL164:
 411:src/xeq.c     **** 	unsigned short int bottom = 0;
 2387              		.loc 1 411 2 is_stmt 1 view .LVU635
 412:src/xeq.c     **** 
 2388              		.loc 1 412 2 view .LVU636
ARM GAS  /tmp/cc0UaEmF.s 			page 138


 414:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2389              		.loc 1 414 2 view .LVU637
 415:src/xeq.c     **** 
 2390              		.loc 1 415 2 view .LVU638
 417:src/xeq.c     **** 		PcWrapped = 1;
 2391              		.loc 1 417 2 view .LVU639
 417:src/xeq.c     **** 		PcWrapped = 1;
 2392              		.loc 1 417 5 is_stmt 0 view .LVU640
 2393 0032 8442     		cmp	r4, r0
 418:src/xeq.c     **** 		return top;
 2394              		.loc 1 418 3 is_stmt 1 view .LVU641
 419:src/xeq.c     **** 	}
 2395              		.loc 1 419 10 is_stmt 0 view .LVU642
 2396 0034 85BF     		ittet	hi
 2397 0036 BDF80E00 		ldrhhi	r0, [sp, #14]
 2398              	.LVL165:
 418:src/xeq.c     **** 		return top;
 2399              		.loc 1 418 13 view .LVU643
 2400 003a 0123     		movhi	r3, #1
 421:src/xeq.c     **** }
 2401              		.loc 1 421 9 view .LVU644
 2402 003c 2046     		movls	r0, r4
 418:src/xeq.c     **** 		return top;
 2403              		.loc 1 418 13 view .LVU645
 2404 003e 3360     		strhi	r3, [r6]
 419:src/xeq.c     **** 	}
 2405              		.loc 1 419 3 is_stmt 1 view .LVU646
 421:src/xeq.c     **** }
 2406              		.loc 1 421 2 view .LVU647
 422:src/xeq.c     **** 
 2407              		.loc 1 422 1 is_stmt 0 view .LVU648
 2408 0040 04B0     		add	sp, sp, #16
 2409              		.cfi_def_cfa_offset 16
 2410              		@ sp needed
 2411 0042 70BD     		pop	{r4, r5, r6, pc}
 2412              	.LVL166:
 2413              	.L197:
 422:src/xeq.c     **** 
 2414              		.loc 1 422 1 view .LVU649
 2415              		.align	2
 2416              	.L196:
 2417 0044 00000000 		.word	PcWrapped
 2418              		.cfi_endproc
 2419              	.LFE20:
 2421              		.section	.text.user_pc.part.0,"ax",%progbits
 2422              		.align	1
 2423              		.p2align 2,,3
 2424              		.syntax unified
 2425              		.thumb
 2426              		.thumb_func
 2427              		.fpu fpv4-sp-d16
 2429              	user_pc.part.0:
 2430              	.LVL167:
 2431              	.LFB271:
 485:src/xeq.c     **** 	unsigned int n = 1;
 2432              		.loc 1 485 14 is_stmt 1 view -0
 2433              		.cfi_startproc
ARM GAS  /tmp/cc0UaEmF.s 			page 139


 2434              		@ args = 0, pretend = 0, frame = 0
 2435              		@ frame_needed = 0, uses_anonymous_args = 0
 496:src/xeq.c     **** 	while (base < pc) {
 2436              		.loc 1 496 2 view .LVU651
 496:src/xeq.c     **** 	while (base < pc) {
 2437              		.loc 1 496 9 is_stmt 0 view .LVU652
 2438 0000 20F47F53 		bic	r3, r0, #16320
 2439 0004 23F03F03 		bic	r3, r3, #63
 485:src/xeq.c     **** 	unsigned int n = 1;
 2440              		.loc 1 485 14 view .LVU653
 2441 0008 70B5     		push	{r4, r5, r6, lr}
 2442              		.cfi_def_cfa_offset 16
 2443              		.cfi_offset 4, -16
 2444              		.cfi_offset 5, -12
 2445              		.cfi_offset 6, -8
 2446              		.cfi_offset 14, -4
 485:src/xeq.c     **** 	unsigned int n = 1;
 2447              		.loc 1 485 14 view .LVU654
 2448 000a 0546     		mov	r5, r0
 496:src/xeq.c     **** 	while (base < pc) {
 2449              		.loc 1 496 7 view .LVU655
 2450 000c 581C     		adds	r0, r3, #1
 2451              	.LVL168:
 497:src/xeq.c     **** 		base = do_inc(base, 0);
 2452              		.loc 1 497 2 is_stmt 1 view .LVU656
 497:src/xeq.c     **** 		base = do_inc(base, 0);
 2453              		.loc 1 497 8 view .LVU657
 2454 000e 8542     		cmp	r5, r0
 2455 0010 0ED9     		bls	.L201
 2456 0012 084E     		ldr	r6, .L205
 486:src/xeq.c     **** 	unsigned int base;
 2457              		.loc 1 486 15 is_stmt 0 view .LVU658
 2458 0014 0124     		movs	r4, #1
 2459 0016 03E0     		b	.L200
 2460              	.LVL169:
 2461              	.L204:
 497:src/xeq.c     **** 		base = do_inc(base, 0);
 2462              		.loc 1 497 8 view .LVU659
 2463 0018 8542     		cmp	r5, r0
 501:src/xeq.c     **** 	}
 2464              		.loc 1 501 3 view .LVU660
 2465 001a 04F10104 		add	r4, r4, #1
 2466              	.LVL170:
 497:src/xeq.c     **** 		base = do_inc(base, 0);
 2467              		.loc 1 497 8 is_stmt 1 view .LVU661
 2468 001e 05D9     		bls	.L198
 2469              	.LVL171:
 2470              	.L200:
 498:src/xeq.c     **** 		if (PcWrapped)
 2471              		.loc 1 498 3 view .LVU662
 498:src/xeq.c     **** 		if (PcWrapped)
 2472              		.loc 1 498 10 is_stmt 0 view .LVU663
 2473 0020 0021     		movs	r1, #0
 2474 0022 FFF7FEFF 		bl	do_inc
 2475              	.LVL172:
 501:src/xeq.c     **** 	}
 2476              		.loc 1 501 3 is_stmt 1 view .LVU664
ARM GAS  /tmp/cc0UaEmF.s 			page 140


 499:src/xeq.c     **** 			return n;
 2477              		.loc 1 499 6 is_stmt 0 view .LVU665
 2478 0026 3368     		ldr	r3, [r6]
 2479              	.LVL173:
 499:src/xeq.c     **** 			return n;
 2480              		.loc 1 499 3 is_stmt 1 view .LVU666
 499:src/xeq.c     **** 			return n;
 2481              		.loc 1 499 6 is_stmt 0 view .LVU667
 2482 0028 002B     		cmp	r3, #0
 2483 002a F5D0     		beq	.L204
 2484              	.LVL174:
 2485              	.L198:
 504:src/xeq.c     **** 
 2486              		.loc 1 504 1 view .LVU668
 2487 002c 2046     		mov	r0, r4
 2488              	.LVL175:
 504:src/xeq.c     **** 
 2489              		.loc 1 504 1 view .LVU669
 2490 002e 70BD     		pop	{r4, r5, r6, pc}
 2491              	.LVL176:
 2492              	.L201:
 486:src/xeq.c     **** 	unsigned int base;
 2493              		.loc 1 486 15 view .LVU670
 2494 0030 0124     		movs	r4, #1
 2495 0032 FBE7     		b	.L198
 2496              	.L206:
 2497              		.align	2
 2498              	.L205:
 2499 0034 00000000 		.word	PcWrapped
 2500              		.cfi_endproc
 2501              	.LFE271:
 2503              		.section	.rodata.print_step.str1.4,"aMS",%progbits,1
 2504              		.align	2
 2505              	.LC0:
 2506 0000 3030303A 		.ascii	"000:\000"
 2506      00
 2507              		.section	.text.print_step,"ax",%progbits
 2508              		.align	1
 2509              		.p2align 2,,3
 2510              		.syntax unified
 2511              		.thumb
 2512              		.thumb_func
 2513              		.fpu fpv4-sp-d16
 2515              	print_step:
 2516              	.LVL177:
 2517              	.LFB229:
4198:src/xeq.c     **** 	char buf[16];
 2518              		.loc 1 4198 41 is_stmt 1 view -0
 2519              		.cfi_startproc
 2520              		@ args = 0, pretend = 0, frame = 16
 2521              		@ frame_needed = 0, uses_anonymous_args = 0
4199:src/xeq.c     **** 	const unsigned int pc = state_pc();
 2522              		.loc 1 4199 2 view .LVU672
4200:src/xeq.c     **** 	char *p = TraceBuffer;
 2523              		.loc 1 4200 2 view .LVU673
4200:src/xeq.c     **** 	char *p = TraceBuffer;
 2524              		.loc 1 4200 26 is_stmt 0 view .LVU674
ARM GAS  /tmp/cc0UaEmF.s 			page 141


 2525 0000 254B     		ldr	r3, .L221
 2526 0002 1B68     		ldr	r3, [r3]
4198:src/xeq.c     **** 	char buf[16];
 2527              		.loc 1 4198 41 view .LVU675
 2528 0004 F0B5     		push	{r4, r5, r6, r7, lr}
 2529              		.cfi_def_cfa_offset 20
 2530              		.cfi_offset 4, -20
 2531              		.cfi_offset 5, -16
 2532              		.cfi_offset 6, -12
 2533              		.cfi_offset 7, -8
 2534              		.cfi_offset 14, -4
4200:src/xeq.c     **** 	char *p = TraceBuffer;
 2535              		.loc 1 4200 26 view .LVU676
 2536 0006 B3F8E047 		ldrh	r4, [r3, #2016]
 2537              	.LVL178:
4201:src/xeq.c     **** 
 2538              		.loc 1 4201 2 is_stmt 1 view .LVU677
4203:src/xeq.c     **** 		*p++ = 'x';
 2539              		.loc 1 4203 2 view .LVU678
4203:src/xeq.c     **** 		*p++ = 'x';
 2540              		.loc 1 4203 6 is_stmt 0 view .LVU679
 2541 000a A10B     		lsrs	r1, r4, #14
4203:src/xeq.c     **** 		*p++ = 'x';
 2542              		.loc 1 4203 5 view .LVU680
 2543 000c 0329     		cmp	r1, #3
4198:src/xeq.c     **** 	char buf[16];
 2544              		.loc 1 4198 41 view .LVU681
 2545 000e 85B0     		sub	sp, sp, #20
 2546              		.cfi_def_cfa_offset 40
4198:src/xeq.c     **** 	char buf[16];
 2547              		.loc 1 4198 41 view .LVU682
 2548 0010 0546     		mov	r5, r0
4203:src/xeq.c     **** 		*p++ = 'x';
 2549              		.loc 1 4203 5 view .LVU683
 2550 0012 39D0     		beq	.L218
4205:src/xeq.c     **** 		p = num_arg_0(p, nLIB(pc), 1);
 2551              		.loc 1 4205 9 is_stmt 1 view .LVU684
4205:src/xeq.c     **** 		p = num_arg_0(p, nLIB(pc), 1);
 2552              		.loc 1 4205 12 is_stmt 0 view .LVU685
 2553 0014 14F4404F 		tst	r4, #49152
 2554 0018 0FD1     		bne	.L219
4201:src/xeq.c     **** 
 2555              		.loc 1 4201 8 view .LVU686
 2556 001a 204E     		ldr	r6, .L221+4
 2557 001c 3746     		mov	r7, r6
 2558              	.LVL179:
4209:src/xeq.c     **** 		scopy(p, "000:");
 2559              		.loc 1 4209 2 is_stmt 1 view .LVU687
4209:src/xeq.c     **** 		scopy(p, "000:");
 2560              		.loc 1 4209 5 is_stmt 0 view .LVU688
 2561 001e BCB9     		cbnz	r4, .L220
 2562              	.LVL180:
 2563              	.L212:
4210:src/xeq.c     **** 	else {
 2564              		.loc 1 4210 3 is_stmt 1 view .LVU689
 2565 0020 1F49     		ldr	r1, .L221+8
 2566 0022 3846     		mov	r0, r7
ARM GAS  /tmp/cc0UaEmF.s 			page 142


 2567 0024 FFF7FEFF 		bl	scopy
 2568              	.LVL181:
 2569              	.L211:
4218:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2570              		.loc 1 4218 2 view .LVU690
4218:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2571              		.loc 1 4218 20 is_stmt 0 view .LVU691
 2572 0028 1E4A     		ldr	r2, .L221+12
4219:src/xeq.c     **** }
 2573              		.loc 1 4219 10 view .LVU692
 2574 002a 1F49     		ldr	r1, .L221+16
4218:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2575              		.loc 1 4218 20 view .LVU693
 2576 002c 937D     		ldrb	r3, [r2, #22]	@ zero_extendqisi2
4219:src/xeq.c     **** }
 2577              		.loc 1 4219 10 view .LVU694
 2578 002e 0E60     		str	r6, [r1]
4218:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2579              		.loc 1 4218 20 view .LVU695
 2580 0030 43F08003 		orr	r3, r3, #128
 2581 0034 9375     		strb	r3, [r2, #22]
4219:src/xeq.c     **** }
 2582              		.loc 1 4219 2 is_stmt 1 view .LVU696
4220:src/xeq.c     **** 
 2583              		.loc 1 4220 1 is_stmt 0 view .LVU697
 2584 0036 05B0     		add	sp, sp, #20
 2585              		.cfi_remember_state
 2586              		.cfi_def_cfa_offset 20
 2587              		@ sp needed
 2588 0038 F0BD     		pop	{r4, r5, r6, r7, pc}
 2589              	.LVL182:
 2590              	.L219:
 2591              		.cfi_restore_state
4206:src/xeq.c     **** 		*p++ = ' ';
 2592              		.loc 1 4206 3 is_stmt 1 view .LVU698
4206:src/xeq.c     **** 		*p++ = ' ';
 2593              		.loc 1 4206 7 is_stmt 0 view .LVU699
 2594 003a 1848     		ldr	r0, .L221+4
 2595              	.LVL183:
4206:src/xeq.c     **** 		*p++ = ' ';
 2596              		.loc 1 4206 7 view .LVU700
 2597 003c 0122     		movs	r2, #1
 2598 003e 0646     		mov	r6, r0
 2599 0040 FFF7FEFF 		bl	num_arg_0
 2600              	.LVL184:
4207:src/xeq.c     **** 	}
 2601              		.loc 1 4207 3 is_stmt 1 view .LVU701
4207:src/xeq.c     **** 	}
 2602              		.loc 1 4207 5 is_stmt 0 view .LVU702
 2603 0044 0746     		mov	r7, r0
 2604              	.LVL185:
4207:src/xeq.c     **** 	}
 2605              		.loc 1 4207 8 view .LVU703
 2606 0046 2023     		movs	r3, #32
 2607 0048 07F8013B 		strb	r3, [r7], #1
 2608              	.LVL186:
4209:src/xeq.c     **** 		scopy(p, "000:");
ARM GAS  /tmp/cc0UaEmF.s 			page 143


 2609              		.loc 1 4209 2 is_stmt 1 view .LVU704
4209:src/xeq.c     **** 		scopy(p, "000:");
 2610              		.loc 1 4209 5 is_stmt 0 view .LVU705
 2611 004c 002C     		cmp	r4, #0
 2612 004e E7D0     		beq	.L212
 2613              	.L220:
 2614              	.LVL187:
 2615              	.LBB1494:
 2616              	.LBB1495:
4209:src/xeq.c     **** 		scopy(p, "000:");
 2617              		.loc 1 4209 5 view .LVU706
 2618 0050 2046     		mov	r0, r4
 2619 0052 FFF7FEFF 		bl	user_pc.part.0
 2620              	.LVL188:
 2621 0056 0146     		mov	r1, r0
 2622              	.L209:
4209:src/xeq.c     **** 		scopy(p, "000:");
 2623              		.loc 1 4209 5 view .LVU707
 2624              	.LBE1495:
 2625              	.LBE1494:
4212:src/xeq.c     **** 		*p++ = ':';
 2626              		.loc 1 4212 7 view .LVU708
 2627 0058 0322     		movs	r2, #3
 2628 005a 3846     		mov	r0, r7
 2629 005c FFF7FEFF 		bl	num_arg_0
 2630              	.LVL189:
4213:src/xeq.c     **** 		scopy_char(p, prt(op, buf), '\0');
 2631              		.loc 1 4213 8 view .LVU709
 2632 0060 0746     		mov	r7, r0
 2633 0062 3A23     		movs	r3, #58
 2634 0064 07F8013B 		strb	r3, [r7], #1
4212:src/xeq.c     **** 		*p++ = ':';
 2635              		.loc 1 4212 7 view .LVU710
 2636 0068 0446     		mov	r4, r0
 2637              	.LVL190:
4213:src/xeq.c     **** 		scopy_char(p, prt(op, buf), '\0');
 2638              		.loc 1 4213 3 is_stmt 1 view .LVU711
4214:src/xeq.c     **** 		if (*p == '?')
 2639              		.loc 1 4214 3 view .LVU712
 2640 006a 6946     		mov	r1, sp
 2641 006c 2846     		mov	r0, r5
 2642 006e FFF7FEFF 		bl	prt
 2643              	.LVL191:
 2644 0072 0022     		movs	r2, #0
 2645 0074 0146     		mov	r1, r0
 2646 0076 3846     		mov	r0, r7
 2647 0078 FFF7FEFF 		bl	scopy_char
 2648              	.LVL192:
4215:src/xeq.c     **** 			*p = '\0';
 2649              		.loc 1 4215 3 view .LVU713
4215:src/xeq.c     **** 			*p = '\0';
 2650              		.loc 1 4215 6 is_stmt 0 view .LVU714
 2651 007c 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 2652 007e 3F2B     		cmp	r3, #63
4216:src/xeq.c     **** 	}
 2653              		.loc 1 4216 4 is_stmt 1 view .LVU715
4216:src/xeq.c     **** 	}
ARM GAS  /tmp/cc0UaEmF.s 			page 144


 2654              		.loc 1 4216 7 is_stmt 0 view .LVU716
 2655 0080 04BF     		itt	eq
 2656 0082 0023     		moveq	r3, #0
 2657 0084 6370     		strbeq	r3, [r4, #1]
 2658 0086 CFE7     		b	.L211
 2659              	.LVL193:
 2660              	.L218:
4204:src/xeq.c     **** 	} else if (isLIB(pc)) {
 2661              		.loc 1 4204 3 is_stmt 1 view .LVU717
4204:src/xeq.c     **** 	} else if (isLIB(pc)) {
 2662              		.loc 1 4204 8 is_stmt 0 view .LVU718
 2663 0088 044E     		ldr	r6, .L221+4
 2664 008a 3746     		mov	r7, r6
 2665 008c 7823     		movs	r3, #120
 2666 008e 07F8013B 		strb	r3, [r7], #1
4209:src/xeq.c     **** 		scopy(p, "000:");
 2667              		.loc 1 4209 2 is_stmt 1 view .LVU719
4212:src/xeq.c     **** 		*p++ = ':';
 2668              		.loc 1 4212 3 view .LVU720
 2669              	.LBB1497:
 2670              	.LBI1494:
 485:src/xeq.c     **** 	unsigned int n = 1;
 2671              		.loc 1 485 14 view .LVU721
 2672              	.LBB1496:
 486:src/xeq.c     **** 	unsigned int base;
 2673              		.loc 1 486 2 view .LVU722
 2674              	.LVL194:
 487:src/xeq.c     **** 
 2675              		.loc 1 487 2 view .LVU723
 490:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 2676              		.loc 1 490 2 view .LVU724
 491:src/xeq.c     **** #else
 2677              		.loc 1 491 3 view .LVU725
 491:src/xeq.c     **** #else
 2678              		.loc 1 491 24 is_stmt 0 view .LVU726
 2679 0092 C4F30D01 		ubfx	r1, r4, #0, #14
 2680 0096 DFE7     		b	.L209
 2681              	.L222:
 2682              		.align	2
 2683              	.L221:
 2684 0098 00000000 		.word	main_ram
 2685 009c 00000000 		.word	TraceBuffer
 2686 00a0 00000000 		.word	.LC0
 2687 00a4 00000000 		.word	StateWhileOn
 2688 00a8 00000000 		.word	DispMsg
 2689              	.LBE1496:
 2690              	.LBE1497:
 2691              		.cfi_endproc
 2692              	.LFE229:
 2694              		.section	.text.do_dec,"ax",%progbits
 2695              		.align	1
 2696              		.p2align 2,,3
 2697              		.global	do_dec
 2698              		.syntax unified
 2699              		.thumb
 2700              		.thumb_func
 2701              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cc0UaEmF.s 			page 145


 2703              	do_dec:
 2704              	.LVL195:
 2705              	.LFB21:
 428:src/xeq.c     **** 	unsigned short int top = 0;
 2706              		.loc 1 428 48 is_stmt 1 view -0
 2707              		.cfi_startproc
 2708              		@ args = 0, pretend = 0, frame = 8
 2709              		@ frame_needed = 0, uses_anonymous_args = 0
 429:src/xeq.c     **** 	unsigned short int bottom = 0;
 2710              		.loc 1 429 2 view .LVU728
 428:src/xeq.c     **** 	unsigned short int top = 0;
 2711              		.loc 1 428 48 is_stmt 0 view .LVU729
 2712 0000 70B5     		push	{r4, r5, r6, lr}
 2713              		.cfi_def_cfa_offset 16
 2714              		.cfi_offset 4, -16
 2715              		.cfi_offset 5, -12
 2716              		.cfi_offset 6, -8
 2717              		.cfi_offset 14, -4
 432:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2718              		.loc 1 432 12 view .LVU730
 2719 0002 114E     		ldr	r6, .L228
 428:src/xeq.c     **** 	unsigned short int top = 0;
 2720              		.loc 1 428 48 view .LVU731
 2721 0004 82B0     		sub	sp, sp, #8
 2722              		.cfi_def_cfa_offset 24
 429:src/xeq.c     **** 	unsigned short int bottom = 0;
 2723              		.loc 1 429 21 view .LVU732
 2724 0006 0023     		movs	r3, #0
 433:src/xeq.c     **** 
 2725              		.loc 1 433 11 view .LVU733
 2726 0008 0DF10602 		add	r2, sp, #6
 428:src/xeq.c     **** 	unsigned short int top = 0;
 2727              		.loc 1 428 48 view .LVU734
 2728 000c 0546     		mov	r5, r0
 432:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2729              		.loc 1 432 12 view .LVU735
 2730 000e 3360     		str	r3, [r6]
 429:src/xeq.c     **** 	unsigned short int bottom = 0;
 2731              		.loc 1 429 21 view .LVU736
 2732 0010 ADF80630 		strh	r3, [sp, #6]	@ movhi
 430:src/xeq.c     **** 
 2733              		.loc 1 430 2 is_stmt 1 view .LVU737
 2734              	.LVL196:
 432:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2735              		.loc 1 432 2 view .LVU738
 433:src/xeq.c     **** 
 2736              		.loc 1 433 2 view .LVU739
 433:src/xeq.c     **** 
 2737              		.loc 1 433 11 is_stmt 0 view .LVU740
 2738 0014 FFF7FEFF 		bl	find_section_bounds
 2739              	.LVL197:
 435:src/xeq.c     **** 		PcWrapped = 1;
 2740              		.loc 1 435 9 view .LVU741
 2741 0018 BDF80630 		ldrh	r3, [sp, #6]
 2742              	.LVL198:
 435:src/xeq.c     **** 		PcWrapped = 1;
 2743              		.loc 1 435 2 is_stmt 1 view .LVU742
ARM GAS  /tmp/cc0UaEmF.s 			page 146


 435:src/xeq.c     **** 		PcWrapped = 1;
 2744              		.loc 1 435 5 is_stmt 0 view .LVU743
 2745 001c AB42     		cmp	r3, r5
 436:src/xeq.c     **** 		pc = bottom;
 2746              		.loc 1 436 13 view .LVU744
 2747 001e 25BF     		ittet	cs
 2748 0020 0122     		movcs	r2, #1
 2749 0022 0446     		movcs	r4, r0
 436:src/xeq.c     **** 		pc = bottom;
 2750              		.loc 1 436 3 is_stmt 1 view .LVU745
 440:src/xeq.c     **** 	if (pc > top && isDBL(getprog(pc - 1)))
 2751              		.loc 1 440 3 is_stmt 0 view .LVU746
 2752 0024 05F1FF34 		addcc	r4, r5, #-1
 436:src/xeq.c     **** 		pc = bottom;
 2753              		.loc 1 436 13 view .LVU747
 2754 0028 3260     		strcs	r2, [r6]
 437:src/xeq.c     **** 	}
 2755              		.loc 1 437 3 is_stmt 1 view .LVU748
 2756              	.LVL199:
 440:src/xeq.c     **** 	if (pc > top && isDBL(getprog(pc - 1)))
 2757              		.loc 1 440 3 view .LVU749
 441:src/xeq.c     **** 		--pc;
 2758              		.loc 1 441 2 view .LVU750
 441:src/xeq.c     **** 		--pc;
 2759              		.loc 1 441 5 is_stmt 0 view .LVU751
 2760 002a A342     		cmp	r3, r4
 2761 002c 09D2     		bcs	.L223
 441:src/xeq.c     **** 		--pc;
 2762              		.loc 1 441 18 discriminator 1 view .LVU752
 2763 002e 651E     		subs	r5, r4, #1
 2764 0030 2846     		mov	r0, r5
 2765              	.LVL200:
 441:src/xeq.c     **** 		--pc;
 2766              		.loc 1 441 18 discriminator 1 view .LVU753
 2767 0032 FFF7FEFF 		bl	getprog
 2768              	.LVL201:
 2769 0036 00F47040 		and	r0, r0, #61440
 442:src/xeq.c     **** 	return pc;
 2770              		.loc 1 442 3 discriminator 1 view .LVU754
 2771 003a B0F5704F 		cmp	r0, #61440
 2772 003e 08BF     		it	eq
 2773 0040 2C46     		moveq	r4, r5
 2774              	.LVL202:
 2775              	.L223:
 444:src/xeq.c     **** 
 2776              		.loc 1 444 1 view .LVU755
 2777 0042 2046     		mov	r0, r4
 2778 0044 02B0     		add	sp, sp, #8
 2779              		.cfi_def_cfa_offset 16
 2780              		@ sp needed
 2781 0046 70BD     		pop	{r4, r5, r6, pc}
 2782              	.L229:
 2783              		.align	2
 2784              	.L228:
 2785 0048 00000000 		.word	PcWrapped
 2786              		.cfi_endproc
 2787              	.LFE21:
ARM GAS  /tmp/cc0UaEmF.s 			page 147


 2789              		.section	.text.update_program_bounds,"ax",%progbits
 2790              		.align	1
 2791              		.p2align 2,,3
 2792              		.global	update_program_bounds
 2793              		.syntax unified
 2794              		.thumb
 2795              		.thumb_func
 2796              		.fpu fpv4-sp-d16
 2798              	update_program_bounds:
 2799              	.LVL203:
 2800              	.LFB24:
 461:src/xeq.c     **** 	unsigned int pc = state_pc();
 2801              		.loc 1 461 45 is_stmt 1 view -0
 2802              		.cfi_startproc
 2803              		@ args = 0, pretend = 0, frame = 0
 2804              		@ frame_needed = 0, uses_anonymous_args = 0
 462:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 2805              		.loc 1 462 2 view .LVU757
 461:src/xeq.c     **** 	unsigned int pc = state_pc();
 2806              		.loc 1 461 45 is_stmt 0 view .LVU758
 2807 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2808              		.cfi_def_cfa_offset 24
 2809              		.cfi_offset 3, -24
 2810              		.cfi_offset 4, -20
 2811              		.cfi_offset 5, -16
 2812              		.cfi_offset 6, -12
 2813              		.cfi_offset 7, -8
 2814              		.cfi_offset 14, -4
 462:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 2815              		.loc 1 462 20 view .LVU759
 2816 0002 224F     		ldr	r7, .L251
 2817 0004 3D68     		ldr	r5, [r7]
 462:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 2818              		.loc 1 462 15 view .LVU760
 2819 0006 B5F8E047 		ldrh	r4, [r5, #2016]
 2820              	.LVL204:
 463:src/xeq.c     **** 		State.pc = pc = 1;
 2821              		.loc 1 463 2 is_stmt 1 view .LVU761
 463:src/xeq.c     **** 		State.pc = pc = 1;
 2822              		.loc 1 463 5 is_stmt 0 view .LVU762
 2823 000a 34B9     		cbnz	r4, .L231
 463:src/xeq.c     **** 		State.pc = pc = 1;
 2824              		.loc 1 463 14 discriminator 1 view .LVU763
 2825 000c 204B     		ldr	r3, .L251+4
 2826 000e 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 2827 0010 5B06     		lsls	r3, r3, #25
 464:src/xeq.c     **** 	if (! force && pc >= ProgBegin && pc <= ProgEnd)
 2828              		.loc 1 464 3 is_stmt 1 discriminator 1 view .LVU764
 2829              	.LVL205:
 464:src/xeq.c     **** 	if (! force && pc >= ProgBegin && pc <= ProgEnd)
 2830              		.loc 1 464 12 is_stmt 0 discriminator 1 view .LVU765
 2831 0012 44BF     		itt	mi
 2832 0014 0124     		movmi	r4, #1
 2833 0016 A5F8E047 		strhmi	r4, [r5, #2016]	@ movhi
 2834              	.LVL206:
 2835              	.L231:
 465:src/xeq.c     **** 		return;
ARM GAS  /tmp/cc0UaEmF.s 			page 148


 2836              		.loc 1 465 2 is_stmt 1 view .LVU766
 465:src/xeq.c     **** 		return;
 2837              		.loc 1 465 5 is_stmt 0 view .LVU767
 2838 001a 18B9     		cbnz	r0, .L232
 465:src/xeq.c     **** 		return;
 2839              		.loc 1 465 23 discriminator 1 view .LVU768
 2840 001c B5F8EC37 		ldrh	r3, [r5, #2028]
 465:src/xeq.c     **** 		return;
 2841              		.loc 1 465 14 discriminator 1 view .LVU769
 2842 0020 A342     		cmp	r3, r4
 2843 0022 2DD9     		bls	.L248
 2844              	.L232:
 467:src/xeq.c     **** 		ProgEnd = pc;
 2845              		.loc 1 467 2 is_stmt 1 view .LVU770
 467:src/xeq.c     **** 		ProgEnd = pc;
 2846              		.loc 1 467 17 is_stmt 0 view .LVU771
 2847 0024 1B4E     		ldr	r6, .L251+8
 2848 0026 0023     		movs	r3, #0
 2849 0028 3360     		str	r3, [r6]
 467:src/xeq.c     **** 		ProgEnd = pc;
 2850              		.loc 1 467 22 is_stmt 1 view .LVU772
 2851 002a 05E0     		b	.L236
 2852              	.LVL207:
 2853              	.L249:
 467:src/xeq.c     **** 		ProgEnd = pc;
 2854              		.loc 1 467 39 is_stmt 0 discriminator 2 view .LVU773
 2855 002c FFF7FEFF 		bl	do_inc
 2856              	.LVL208:
 467:src/xeq.c     **** 		ProgEnd = pc;
 2857              		.loc 1 467 2 discriminator 2 view .LVU774
 2858 0030 3368     		ldr	r3, [r6]
 2859 0032 3D68     		ldr	r5, [r7]
 467:src/xeq.c     **** 		ProgEnd = pc;
 2860              		.loc 1 467 39 discriminator 2 view .LVU775
 2861 0034 0446     		mov	r4, r0
 2862              	.LVL209:
 467:src/xeq.c     **** 		ProgEnd = pc;
 2863              		.loc 1 467 22 is_stmt 1 discriminator 2 view .LVU776
 467:src/xeq.c     **** 		ProgEnd = pc;
 2864              		.loc 1 467 2 is_stmt 0 discriminator 2 view .LVU777
 2865 0036 5BB9     		cbnz	r3, .L234
 2866              	.LVL210:
 2867              	.L236:
 468:src/xeq.c     **** 		if (getprog(pc) == (OP_NIL | OP_END)) {
 2868              		.loc 1 468 3 is_stmt 1 view .LVU778
 468:src/xeq.c     **** 		if (getprog(pc) == (OP_NIL | OP_END)) {
 2869              		.loc 1 468 11 is_stmt 0 view .LVU779
 2870 0038 A5F8EE47 		strh	r4, [r5, #2030]	@ movhi
 469:src/xeq.c     **** 			break;
 2871              		.loc 1 469 3 is_stmt 1 view .LVU780
 469:src/xeq.c     **** 			break;
 2872              		.loc 1 469 7 is_stmt 0 view .LVU781
 2873 003c 2046     		mov	r0, r4
 2874 003e FFF7FEFF 		bl	getprog
 2875              	.LVL211:
 467:src/xeq.c     **** 		ProgEnd = pc;
 2876              		.loc 1 467 34 is_stmt 1 view .LVU782
ARM GAS  /tmp/cc0UaEmF.s 			page 149


 469:src/xeq.c     **** 			break;
 2877              		.loc 1 469 7 is_stmt 0 view .LVU783
 2878 0042 0346     		mov	r3, r0
 469:src/xeq.c     **** 			break;
 2879              		.loc 1 469 6 view .LVU784
 2880 0044 B3F59D7F 		cmp	r3, #314
 467:src/xeq.c     **** 		ProgEnd = pc;
 2881              		.loc 1 467 39 view .LVU785
 2882 0048 4FF00001 		mov	r1, #0
 2883 004c 2046     		mov	r0, r4
 469:src/xeq.c     **** 			break;
 2884              		.loc 1 469 6 view .LVU786
 2885 004e EDD1     		bne	.L249
 2886              	.LVL212:
 2887              	.L234:
 473:src/xeq.c     **** 		const unsigned int opc = pc;
 2888              		.loc 1 473 2 is_stmt 1 view .LVU787
 473:src/xeq.c     **** 		const unsigned int opc = pc;
 2889              		.loc 1 473 10 is_stmt 0 view .LVU788
 2890 0050 B5F8E047 		ldrh	r4, [r5, #2016]
 2891              	.LVL213:
 473:src/xeq.c     **** 		const unsigned int opc = pc;
 2892              		.loc 1 473 10 view .LVU789
 2893 0054 04E0     		b	.L238
 2894              	.LVL214:
 2895              	.L250:
 2896              	.LBB1498:
 476:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2897              		.loc 1 476 20 discriminator 1 view .LVU790
 2898 0056 FFF7FEFF 		bl	getprog
 2899              	.LVL215:
 476:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2900              		.loc 1 476 17 discriminator 1 view .LVU791
 2901 005a B0F59D7F 		cmp	r0, #314
 2902 005e 08D0     		beq	.L237
 2903              	.LVL216:
 2904              	.L238:
 474:src/xeq.c     **** 		pc = do_dec(opc, 0);
 2905              		.loc 1 474 3 is_stmt 1 view .LVU792
 475:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 2906              		.loc 1 475 3 view .LVU793
 475:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 2907              		.loc 1 475 8 is_stmt 0 view .LVU794
 2908 0060 2046     		mov	r0, r4
 2909 0062 0021     		movs	r1, #0
 2910 0064 FFF7FEFF 		bl	do_dec
 2911              	.LVL217:
 476:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2912              		.loc 1 476 6 view .LVU795
 2913 0068 3368     		ldr	r3, [r6]
 2914 006a 2546     		mov	r5, r4
 475:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 2915              		.loc 1 475 8 view .LVU796
 2916 006c 0446     		mov	r4, r0
 2917              	.LVL218:
 476:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2918              		.loc 1 476 3 is_stmt 1 view .LVU797
ARM GAS  /tmp/cc0UaEmF.s 			page 150


 476:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2919              		.loc 1 476 6 is_stmt 0 view .LVU798
 2920 006e 002B     		cmp	r3, #0
 2921 0070 F1D0     		beq	.L250
 2922              	.LVL219:
 2923              	.L237:
 477:src/xeq.c     **** 			break;
 2924              		.loc 1 477 4 is_stmt 1 view .LVU799
 477:src/xeq.c     **** 			break;
 2925              		.loc 1 477 14 is_stmt 0 view .LVU800
 2926 0072 3B68     		ldr	r3, [r7]
 2927 0074 012D     		cmp	r5, #1
 2928 0076 38BF     		it	cc
 2929 0078 0125     		movcc	r5, #1
 2930              	.LVL220:
 477:src/xeq.c     **** 			break;
 2931              		.loc 1 477 14 view .LVU801
 2932 007a A3F8EC57 		strh	r5, [r3, #2028]	@ movhi
 478:src/xeq.c     **** 		}
 2933              		.loc 1 478 4 is_stmt 1 view .LVU802
 2934              	.LBE1498:
 481:src/xeq.c     **** 
 2935              		.loc 1 481 1 is_stmt 0 view .LVU803
 2936 007e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2937              	.LVL221:
 2938              	.L248:
 465:src/xeq.c     **** 		return;
 2939              		.loc 1 465 42 discriminator 2 view .LVU804
 2940 0080 B5F8EE37 		ldrh	r3, [r5, #2030]
 465:src/xeq.c     **** 		return;
 2941              		.loc 1 465 33 discriminator 2 view .LVU805
 2942 0084 A342     		cmp	r3, r4
 2943 0086 CDD3     		bcc	.L232
 481:src/xeq.c     **** 
 2944              		.loc 1 481 1 view .LVU806
 2945 0088 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2946              	.LVL222:
 2947              	.L252:
 481:src/xeq.c     **** 
 2948              		.loc 1 481 1 view .LVU807
 2949 008a 00BF     		.align	2
 2950              	.L251:
 2951 008c 00000000 		.word	main_ram
 2952 0090 00000000 		.word	StateWhileOn
 2953 0094 00000000 		.word	PcWrapped
 2954              		.cfi_endproc
 2955              	.LFE24:
 2957              		.section	.text.set_pc,"ax",%progbits
 2958              		.align	1
 2959              		.p2align 2,,3
 2960              		.global	set_pc
 2961              		.syntax unified
 2962              		.thumb
 2963              		.thumb_func
 2964              		.fpu fpv4-sp-d16
 2966              	set_pc:
 2967              	.LVL223:
ARM GAS  /tmp/cc0UaEmF.s 			page 151


 2968              	.LFB18:
 358:src/xeq.c     **** 	if (isRAM(pc)) {
 2969              		.loc 1 358 30 is_stmt 1 view -0
 2970              		.cfi_startproc
 2971              		@ args = 0, pretend = 0, frame = 0
 2972              		@ frame_needed = 0, uses_anonymous_args = 0
 359:src/xeq.c     **** 		if (pc > ProgSize)
 2973              		.loc 1 359 2 view .LVU809
 359:src/xeq.c     **** 		if (pc > ProgSize)
 2974              		.loc 1 359 5 is_stmt 0 view .LVU810
 2975 0000 10F4704F 		tst	r0, #61440
 358:src/xeq.c     **** 	if (isRAM(pc)) {
 2976              		.loc 1 358 30 view .LVU811
 2977 0004 38B5     		push	{r3, r4, r5, lr}
 2978              		.cfi_def_cfa_offset 16
 2979              		.cfi_offset 3, -16
 2980              		.cfi_offset 4, -12
 2981              		.cfi_offset 5, -8
 2982              		.cfi_offset 14, -4
 358:src/xeq.c     **** 	if (isRAM(pc)) {
 2983              		.loc 1 358 30 view .LVU812
 2984 0006 0446     		mov	r4, r0
 359:src/xeq.c     **** 		if (pc > ProgSize)
 2985              		.loc 1 359 5 view .LVU813
 2986 0008 15D1     		bne	.L254
 360:src/xeq.c     **** 			pc = ProgSize;
 2987              		.loc 1 360 3 is_stmt 1 view .LVU814
 360:src/xeq.c     **** 			pc = ProgSize;
 2988              		.loc 1 360 12 is_stmt 0 view .LVU815
 2989 000a 264B     		ldr	r3, .L262
 2990 000c 1B68     		ldr	r3, [r3]
 2991 000e 5A88     		ldrh	r2, [r3, #2]
 2992 0010 9042     		cmp	r0, r2
 2993 0012 28BF     		it	cs
 2994 0014 1446     		movcs	r4, r2
 2995              	.LVL224:
 362:src/xeq.c     **** 			pc--;
 2996              		.loc 1 362 3 is_stmt 1 view .LVU816
 362:src/xeq.c     **** 			pc--;
 2997              		.loc 1 362 6 is_stmt 0 view .LVU817
 2998 0016 012C     		cmp	r4, #1
 2999 0018 06D9     		bls	.L255
 362:src/xeq.c     **** 			pc--;
 3000              		.loc 1 362 14 discriminator 1 view .LVU818
 3001 001a 33F81420 		ldrh	r2, [r3, r4, lsl #1]
 3002 001e 02F47042 		and	r2, r2, #61440
 3003 0022 B2F5704F 		cmp	r2, #61440
 3004 0026 35D0     		beq	.L261
 3005              	.L255:
 371:src/xeq.c     **** }
 3006              		.loc 1 371 2 is_stmt 1 view .LVU819
 3007              	.LVL225:
 3008              	.LBB1499:
 3009              	.LBI1499:
 279:src/xeq.c     **** 	State.pc = pc;
 3010              		.loc 1 279 13 view .LVU820
 3011              	.LBB1500:
ARM GAS  /tmp/cc0UaEmF.s 			page 152


 280:src/xeq.c     **** 	update_program_bounds(0);
 3012              		.loc 1 280 2 view .LVU821
 280:src/xeq.c     **** 	update_program_bounds(0);
 3013              		.loc 1 280 11 is_stmt 0 view .LVU822
 3014 0028 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 281:src/xeq.c     **** }
 3015              		.loc 1 281 2 is_stmt 1 view .LVU823
 3016 002c 0020     		movs	r0, #0
 3017              	.LBE1500:
 3018              	.LBE1499:
 372:src/xeq.c     **** 
 3019              		.loc 1 372 1 is_stmt 0 view .LVU824
 3020 002e BDE83840 		pop	{r3, r4, r5, lr}
 3021              		.cfi_remember_state
 3022              		.cfi_restore 14
 3023              		.cfi_restore 5
 3024              		.cfi_restore 4
 3025              		.cfi_restore 3
 3026              		.cfi_def_cfa_offset 0
 3027              	.LVL226:
 3028              	.LBB1508:
 3029              	.LBB1501:
 281:src/xeq.c     **** }
 3030              		.loc 1 281 2 view .LVU825
 3031 0032 FFF7FEBF 		b	update_program_bounds
 3032              	.LVL227:
 3033              	.L254:
 3034              		.cfi_restore_state
 281:src/xeq.c     **** }
 3035              		.loc 1 281 2 view .LVU826
 3036              	.LBE1501:
 3037              	.LBE1508:
 364:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 3038              		.loc 1 364 9 is_stmt 1 view .LVU827
 364:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 3039              		.loc 1 364 14 is_stmt 0 view .LVU828
 3040 0036 820B     		lsrs	r2, r0, #14
 364:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 3041              		.loc 1 364 12 view .LVU829
 3042 0038 032A     		cmp	r2, #3
 3043 003a 22D0     		beq	.L260
 3044              	.LBB1509:
 365:src/xeq.c     **** 		if (pc > n - 1)
 3045              		.loc 1 365 3 is_stmt 1 view .LVU830
 3046              	.LVL228:
 3047              	.LBB1510:
 3048              	.LBI1510:
 310:src/xeq.c     **** 	if (region == REGION_XROM)
 3049              		.loc 1 310 5 view .LVU831
 3050              	.LBB1511:
 311:src/xeq.c     **** 		return xrom_size;
 3051              		.loc 1 311 2 view .LVU832
 314:src/xeq.c     **** }
 3052              		.loc 1 314 3 view .LVU833
 314:src/xeq.c     **** }
 3053              		.loc 1 314 24 is_stmt 0 view .LVU834
 3054 003c 1A49     		ldr	r1, .L262+4
ARM GAS  /tmp/cc0UaEmF.s 			page 153


 3055              	.LBE1511:
 3056              	.LBE1510:
 365:src/xeq.c     **** 		if (pc > n - 1)
 3057              		.loc 1 365 26 view .LVU835
 3058 003e 1B4B     		ldr	r3, .L262+8
 3059              	.LBB1513:
 3060              	.LBB1512:
 314:src/xeq.c     **** }
 3061              		.loc 1 314 32 view .LVU836
 3062 0040 51F82220 		ldr	r2, [r1, r2, lsl #2]
 3063              	.LBE1512:
 3064              	.LBE1513:
 365:src/xeq.c     **** 		if (pc > n - 1)
 3065              		.loc 1 365 39 view .LVU837
 3066 0044 32F8022C 		ldrh	r2, [r2, #-2]
 365:src/xeq.c     **** 		if (pc > n - 1)
 3067              		.loc 1 365 26 view .LVU838
 3068 0048 00EA0301 		and	r1, r0, r3
 365:src/xeq.c     **** 		if (pc > n - 1)
 3069              		.loc 1 365 39 view .LVU839
 3070 004c 0A44     		add	r2, r2, r1
 3071              	.LVL229:
 366:src/xeq.c     **** 			pc = n - 1;
 3072              		.loc 1 366 3 is_stmt 1 view .LVU840
 3073 004e 9042     		cmp	r0, r2
 3074 0050 28BF     		it	cs
 3075 0052 1446     		movcs	r4, r2
 3076              	.LVL230:
 368:src/xeq.c     **** 			--pc;
 3077              		.loc 1 368 3 view .LVU841
 368:src/xeq.c     **** 			--pc;
 3078              		.loc 1 368 12 is_stmt 0 view .LVU842
 3079 0054 2340     		ands	r3, r3, r4
 3080 0056 0133     		adds	r3, r3, #1
 368:src/xeq.c     **** 			--pc;
 3081              		.loc 1 368 6 view .LVU843
 3082 0058 A342     		cmp	r3, r4
 3083 005a 12D2     		bcs	.L260
 368:src/xeq.c     **** 			--pc;
 3084              		.loc 1 368 28 discriminator 1 view .LVU844
 3085 005c 651E     		subs	r5, r4, #1
 3086 005e 2846     		mov	r0, r5
 3087 0060 FFF7FEFF 		bl	getprog
 3088              	.LVL231:
 368:src/xeq.c     **** 			--pc;
 3089              		.loc 1 368 28 discriminator 1 view .LVU845
 3090 0064 0F4B     		ldr	r3, .L262
 3091 0066 00F47040 		and	r0, r0, #61440
 3092 006a 1B68     		ldr	r3, [r3]
 368:src/xeq.c     **** 			--pc;
 3093              		.loc 1 368 25 discriminator 1 view .LVU846
 3094 006c B0F5704F 		cmp	r0, #61440
 369:src/xeq.c     **** 	}
 3095              		.loc 1 369 4 is_stmt 1 discriminator 1 view .LVU847
 3096              	.LVL232:
 369:src/xeq.c     **** 	}
 3097              		.loc 1 369 4 is_stmt 0 discriminator 1 view .LVU848
ARM GAS  /tmp/cc0UaEmF.s 			page 154


 3098 0070 08BF     		it	eq
 3099 0072 2C46     		moveq	r4, r5
 3100              	.LVL233:
 369:src/xeq.c     **** 	}
 3101              		.loc 1 369 4 discriminator 1 view .LVU849
 3102              	.LBE1509:
 371:src/xeq.c     **** }
 3103              		.loc 1 371 2 is_stmt 1 discriminator 1 view .LVU850
 3104              	.LBB1514:
 279:src/xeq.c     **** 	State.pc = pc;
 3105              		.loc 1 279 13 discriminator 1 view .LVU851
 3106              	.LBB1502:
 280:src/xeq.c     **** 	update_program_bounds(0);
 3107              		.loc 1 280 2 discriminator 1 view .LVU852
 280:src/xeq.c     **** 	update_program_bounds(0);
 3108              		.loc 1 280 11 is_stmt 0 discriminator 1 view .LVU853
 3109 0074 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 281:src/xeq.c     **** }
 3110              		.loc 1 281 2 is_stmt 1 discriminator 1 view .LVU854
 3111 0078 0020     		movs	r0, #0
 3112              	.LBE1502:
 3113              	.LBE1514:
 372:src/xeq.c     **** 
 3114              		.loc 1 372 1 is_stmt 0 discriminator 1 view .LVU855
 3115 007a BDE83840 		pop	{r3, r4, r5, lr}
 3116              		.cfi_remember_state
 3117              		.cfi_restore 14
 3118              		.cfi_restore 5
 3119              		.cfi_restore 4
 3120              		.cfi_restore 3
 3121              		.cfi_def_cfa_offset 0
 3122              	.LVL234:
 3123              	.LBB1515:
 3124              	.LBB1503:
 281:src/xeq.c     **** }
 3125              		.loc 1 281 2 discriminator 1 view .LVU856
 3126 007e FFF7FEBF 		b	update_program_bounds
 3127              	.LVL235:
 3128              	.L260:
 3129              		.cfi_restore_state
 281:src/xeq.c     **** }
 3130              		.loc 1 281 2 discriminator 1 view .LVU857
 3131 0082 084B     		ldr	r3, .L262
 3132 0084 1B68     		ldr	r3, [r3]
 281:src/xeq.c     **** }
 3133              		.loc 1 281 2 discriminator 1 view .LVU858
 3134              	.LBE1503:
 3135              	.LBE1515:
 371:src/xeq.c     **** }
 3136              		.loc 1 371 2 is_stmt 1 view .LVU859
 3137              	.LVL236:
 3138              	.LBB1516:
 279:src/xeq.c     **** 	State.pc = pc;
 3139              		.loc 1 279 13 view .LVU860
 3140              	.LBB1504:
 280:src/xeq.c     **** 	update_program_bounds(0);
 3141              		.loc 1 280 2 view .LVU861
ARM GAS  /tmp/cc0UaEmF.s 			page 155


 281:src/xeq.c     **** }
 3142              		.loc 1 281 2 is_stmt 0 view .LVU862
 3143 0086 0020     		movs	r0, #0
 280:src/xeq.c     **** 	update_program_bounds(0);
 3144              		.loc 1 280 11 view .LVU863
 3145 0088 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 281:src/xeq.c     **** }
 3146              		.loc 1 281 2 is_stmt 1 view .LVU864
 3147              	.LBE1504:
 3148              	.LBE1516:
 372:src/xeq.c     **** 
 3149              		.loc 1 372 1 is_stmt 0 view .LVU865
 3150 008c BDE83840 		pop	{r3, r4, r5, lr}
 3151              		.cfi_remember_state
 3152              		.cfi_restore 14
 3153              		.cfi_restore 5
 3154              		.cfi_restore 4
 3155              		.cfi_restore 3
 3156              		.cfi_def_cfa_offset 0
 3157              	.LVL237:
 3158              	.LBB1517:
 3159              	.LBB1505:
 281:src/xeq.c     **** }
 3160              		.loc 1 281 2 view .LVU866
 3161 0090 FFF7FEBF 		b	update_program_bounds
 3162              	.LVL238:
 3163              	.L261:
 3164              		.cfi_restore_state
 281:src/xeq.c     **** }
 3165              		.loc 1 281 2 view .LVU867
 3166              	.LBE1505:
 3167              	.LBE1517:
 363:src/xeq.c     **** 	} else if (!isXROM(pc)) {
 3168              		.loc 1 363 4 is_stmt 1 view .LVU868
 363:src/xeq.c     **** 	} else if (!isXROM(pc)) {
 3169              		.loc 1 363 6 is_stmt 0 view .LVU869
 3170 0094 013C     		subs	r4, r4, #1
 3171              	.LVL239:
 371:src/xeq.c     **** }
 3172              		.loc 1 371 2 is_stmt 1 view .LVU870
 3173              	.LBB1518:
 279:src/xeq.c     **** 	State.pc = pc;
 3174              		.loc 1 279 13 view .LVU871
 3175              	.LBB1506:
 280:src/xeq.c     **** 	update_program_bounds(0);
 3176              		.loc 1 280 2 view .LVU872
 280:src/xeq.c     **** 	update_program_bounds(0);
 3177              		.loc 1 280 11 is_stmt 0 view .LVU873
 3178 0096 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 281:src/xeq.c     **** }
 3179              		.loc 1 281 2 is_stmt 1 view .LVU874
 3180 009a 0020     		movs	r0, #0
 3181              	.LBE1506:
 3182              	.LBE1518:
 372:src/xeq.c     **** 
 3183              		.loc 1 372 1 is_stmt 0 view .LVU875
 3184 009c BDE83840 		pop	{r3, r4, r5, lr}
ARM GAS  /tmp/cc0UaEmF.s 			page 156


 3185              		.cfi_restore 14
 3186              		.cfi_restore 5
 3187              		.cfi_restore 4
 3188              		.cfi_restore 3
 3189              		.cfi_def_cfa_offset 0
 3190              	.LVL240:
 3191              	.LBB1519:
 3192              	.LBB1507:
 281:src/xeq.c     **** }
 3193              		.loc 1 281 2 view .LVU876
 3194 00a0 FFF7FEBF 		b	update_program_bounds
 3195              	.LVL241:
 3196              	.L263:
 281:src/xeq.c     **** }
 3197              		.loc 1 281 2 view .LVU877
 3198              		.align	2
 3199              	.L262:
 3200 00a4 00000000 		.word	main_ram
 3201 00a8 00000000 		.word	.LANCHOR0
 3202 00ac 00C0FFFF 		.word	-16384
 3203              	.LBE1507:
 3204              	.LBE1519:
 3205              		.cfi_endproc
 3206              	.LFE18:
 3208              		.section	.text.incpc,"ax",%progbits
 3209              		.align	1
 3210              		.p2align 2,,3
 3211              		.global	incpc
 3212              		.syntax unified
 3213              		.thumb
 3214              		.thumb_func
 3215              		.fpu fpv4-sp-d16
 3217              	incpc:
 3218              	.LFB22:
 449:src/xeq.c     **** 	raw_set_pc(do_inc(state_pc(), 1));
 3219              		.loc 1 449 17 is_stmt 1 view -0
 3220              		.cfi_startproc
 3221              		@ args = 0, pretend = 0, frame = 0
 3222              		@ frame_needed = 0, uses_anonymous_args = 0
 450:src/xeq.c     **** 	return PcWrapped;
 3223              		.loc 1 450 2 view .LVU879
 449:src/xeq.c     **** 	raw_set_pc(do_inc(state_pc(), 1));
 3224              		.loc 1 449 17 is_stmt 0 view .LVU880
 3225 0000 10B5     		push	{r4, lr}
 3226              		.cfi_def_cfa_offset 8
 3227              		.cfi_offset 4, -8
 3228              		.cfi_offset 14, -4
 450:src/xeq.c     **** 	return PcWrapped;
 3229              		.loc 1 450 20 view .LVU881
 3230 0002 084C     		ldr	r4, .L266
 3231 0004 2368     		ldr	r3, [r4]
 450:src/xeq.c     **** 	return PcWrapped;
 3232              		.loc 1 450 2 view .LVU882
 3233 0006 0121     		movs	r1, #1
 3234 0008 B3F8E007 		ldrh	r0, [r3, #2016]
 3235 000c FFF7FEFF 		bl	do_inc
 3236              	.LVL242:
ARM GAS  /tmp/cc0UaEmF.s 			page 157


 3237              	.LBB1520:
 3238              	.LBB1521:
 280:src/xeq.c     **** 	update_program_bounds(0);
 3239              		.loc 1 280 11 view .LVU883
 3240 0010 2368     		ldr	r3, [r4]
 3241              	.LBE1521:
 3242              	.LBE1520:
 450:src/xeq.c     **** 	return PcWrapped;
 3243              		.loc 1 450 2 view .LVU884
 3244 0012 0246     		mov	r2, r0
 3245              	.LVL243:
 3246              	.LBB1523:
 3247              	.LBI1520:
 279:src/xeq.c     **** 	State.pc = pc;
 3248              		.loc 1 279 13 is_stmt 1 view .LVU885
 3249              	.LBB1522:
 280:src/xeq.c     **** 	update_program_bounds(0);
 3250              		.loc 1 280 2 view .LVU886
 280:src/xeq.c     **** 	update_program_bounds(0);
 3251              		.loc 1 280 11 is_stmt 0 view .LVU887
 3252 0014 A3F8E027 		strh	r2, [r3, #2016]	@ movhi
 281:src/xeq.c     **** }
 3253              		.loc 1 281 2 is_stmt 1 view .LVU888
 3254 0018 0020     		movs	r0, #0
 3255              	.LVL244:
 281:src/xeq.c     **** }
 3256              		.loc 1 281 2 is_stmt 0 view .LVU889
 3257 001a FFF7FEFF 		bl	update_program_bounds
 3258              	.LVL245:
 281:src/xeq.c     **** }
 3259              		.loc 1 281 2 view .LVU890
 3260              	.LBE1522:
 3261              	.LBE1523:
 451:src/xeq.c     **** }
 3262              		.loc 1 451 2 is_stmt 1 view .LVU891
 451:src/xeq.c     **** }
 3263              		.loc 1 451 9 is_stmt 0 view .LVU892
 3264 001e 024B     		ldr	r3, .L266+4
 452:src/xeq.c     **** 
 3265              		.loc 1 452 1 view .LVU893
 3266 0020 1868     		ldr	r0, [r3]
 3267 0022 10BD     		pop	{r4, pc}
 3268              	.L267:
 3269              		.align	2
 3270              	.L266:
 3271 0024 00000000 		.word	main_ram
 3272 0028 00000000 		.word	PcWrapped
 3273              		.cfi_endproc
 3274              	.LFE22:
 3276              		.section	.text.decpc,"ax",%progbits
 3277              		.align	1
 3278              		.p2align 2,,3
 3279              		.global	decpc
 3280              		.syntax unified
 3281              		.thumb
 3282              		.thumb_func
 3283              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cc0UaEmF.s 			page 158


 3285              	decpc:
 3286              	.LFB23:
 454:src/xeq.c     **** 	raw_set_pc(do_dec(state_pc(), 1));
 3287              		.loc 1 454 18 is_stmt 1 view -0
 3288              		.cfi_startproc
 3289              		@ args = 0, pretend = 0, frame = 0
 3290              		@ frame_needed = 0, uses_anonymous_args = 0
 455:src/xeq.c     **** }
 3291              		.loc 1 455 2 view .LVU895
 454:src/xeq.c     **** 	raw_set_pc(do_dec(state_pc(), 1));
 3292              		.loc 1 454 18 is_stmt 0 view .LVU896
 3293 0000 10B5     		push	{r4, lr}
 3294              		.cfi_def_cfa_offset 8
 3295              		.cfi_offset 4, -8
 3296              		.cfi_offset 14, -4
 455:src/xeq.c     **** }
 3297              		.loc 1 455 20 view .LVU897
 3298 0002 084C     		ldr	r4, .L270
 3299 0004 2368     		ldr	r3, [r4]
 455:src/xeq.c     **** }
 3300              		.loc 1 455 2 view .LVU898
 3301 0006 0121     		movs	r1, #1
 3302 0008 B3F8E007 		ldrh	r0, [r3, #2016]
 3303 000c FFF7FEFF 		bl	do_dec
 3304              	.LVL246:
 3305              	.LBB1524:
 3306              	.LBB1525:
 280:src/xeq.c     **** 	update_program_bounds(0);
 3307              		.loc 1 280 11 view .LVU899
 3308 0010 2368     		ldr	r3, [r4]
 3309              	.LBE1525:
 3310              	.LBE1524:
 455:src/xeq.c     **** }
 3311              		.loc 1 455 2 view .LVU900
 3312 0012 0246     		mov	r2, r0
 3313              	.LVL247:
 3314              	.LBB1528:
 3315              	.LBI1524:
 279:src/xeq.c     **** 	State.pc = pc;
 3316              		.loc 1 279 13 is_stmt 1 view .LVU901
 3317              	.LBB1526:
 280:src/xeq.c     **** 	update_program_bounds(0);
 3318              		.loc 1 280 2 view .LVU902
 3319              	.LBE1526:
 3320              	.LBE1528:
 456:src/xeq.c     **** 
 3321              		.loc 1 456 1 is_stmt 0 view .LVU903
 3322 0014 BDE81040 		pop	{r4, lr}
 3323              		.cfi_restore 14
 3324              		.cfi_restore 4
 3325              		.cfi_def_cfa_offset 0
 3326              	.LBB1529:
 3327              	.LBB1527:
 281:src/xeq.c     **** }
 3328              		.loc 1 281 2 view .LVU904
 3329 0018 0020     		movs	r0, #0
 3330              	.LVL248:
ARM GAS  /tmp/cc0UaEmF.s 			page 159


 280:src/xeq.c     **** 	update_program_bounds(0);
 3331              		.loc 1 280 11 view .LVU905
 3332 001a A3F8E027 		strh	r2, [r3, #2016]	@ movhi
 281:src/xeq.c     **** }
 3333              		.loc 1 281 2 is_stmt 1 view .LVU906
 3334 001e FFF7FEBF 		b	update_program_bounds
 3335              	.LVL249:
 3336              	.L271:
 281:src/xeq.c     **** }
 3337              		.loc 1 281 2 is_stmt 0 view .LVU907
 3338 0022 00BF     		.align	2
 3339              	.L270:
 3340 0024 00000000 		.word	main_ram
 3341              	.LBE1527:
 3342              	.LBE1529:
 3343              		.cfi_endproc
 3344              	.LFE23:
 3346              		.section	.text.fin_tst.part.0,"ax",%progbits
 3347              		.align	1
 3348              		.p2align 2,,3
 3349              		.syntax unified
 3350              		.thumb
 3351              		.thumb_func
 3352              		.fpu fpv4-sp-d16
 3354              	fin_tst.part.0:
 3355              	.LFB280:
2363:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 3356              		.loc 1 2363 6 is_stmt 1 view -0
 3357              		.cfi_startproc
 3358              		@ args = 0, pretend = 0, frame = 0
 3359              		@ frame_needed = 0, uses_anonymous_args = 0
 3360              	.LVL250:
2363:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 3361              		.loc 1 2363 6 is_stmt 0 view .LVU909
 3362 0000 08B5     		push	{r3, lr}
 3363              		.cfi_def_cfa_offset 8
 3364              		.cfi_offset 3, -8
 3365              		.cfi_offset 14, -4
2366:src/xeq.c     **** 			decpc();
 3366              		.loc 1 2366 14 view .LVU910
 3367 0002 FFF7FEFF 		bl	incpc
 3368              	.LVL251:
2366:src/xeq.c     **** 			decpc();
 3369              		.loc 1 2366 11 view .LVU911
 3370 0006 00B9     		cbnz	r0, .L275
2377:src/xeq.c     **** 
 3371              		.loc 1 2377 1 view .LVU912
 3372 0008 08BD     		pop	{r3, pc}
 3373              	.L275:
2367:src/xeq.c     **** 	}
 3374              		.loc 1 2367 4 is_stmt 1 view .LVU913
2377:src/xeq.c     **** 
 3375              		.loc 1 2377 1 is_stmt 0 view .LVU914
 3376 000a BDE80840 		pop	{r3, lr}
 3377              		.cfi_restore 14
 3378              		.cfi_restore 3
 3379              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/cc0UaEmF.s 			page 160


2367:src/xeq.c     **** 	}
 3380              		.loc 1 2367 4 view .LVU915
 3381 000e FFF7FEBF 		b	decpc
 3382              	.LVL252:
 3383              		.cfi_endproc
 3384              	.LFE280:
 3386 0012 00BF     		.section	.text.do_rtn,"ax",%progbits
 3387              		.align	1
 3388              		.p2align 2,,3
 3389              		.syntax unified
 3390              		.thumb
 3391              		.thumb_func
 3392              		.fpu fpv4-sp-d16
 3394              	do_rtn:
 3395              	.LVL253:
 3396              	.LFB150:
2041:src/xeq.c     **** 	unsigned short pc;
 3397              		.loc 1 2041 31 is_stmt 1 view -0
 3398              		.cfi_startproc
 3399              		@ args = 0, pretend = 0, frame = 0
 3400              		@ frame_needed = 0, uses_anonymous_args = 0
2042:src/xeq.c     **** 
 3401              		.loc 1 2042 2 view .LVU917
2044:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
 3402              		.loc 1 2044 2 view .LVU918
2041:src/xeq.c     **** 	unsigned short pc;
 3403              		.loc 1 2041 31 is_stmt 0 view .LVU919
 3404 0000 70B5     		push	{r4, r5, r6, lr}
 3405              		.cfi_def_cfa_offset 16
 3406              		.cfi_offset 4, -16
 3407              		.cfi_offset 5, -12
 3408              		.cfi_offset 6, -8
 3409              		.cfi_offset 14, -4
2044:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
 3410              		.loc 1 2044 6 view .LVU920
 3411 0002 224C     		ldr	r4, .L290
 3412 0004 2368     		ldr	r3, [r4]
2044:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
 3413              		.loc 1 2044 5 view .LVU921
 3414 0006 B3F9E227 		ldrsh	r2, [r3, #2018]
 3415 000a 002A     		cmp	r2, #0
 3416 000c 0FDB     		blt	.L277
2046:src/xeq.c     **** 		raw_set_pc(ProgBegin);
 3417              		.loc 1 2046 3 is_stmt 1 view .LVU922
 3418              	.LBB1530:
 3419              	.LBI1530:
1409:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 3420              		.loc 1 1409 6 view .LVU923
 3421              	.LBB1531:
1410:src/xeq.c     **** }
 3422              		.loc 1 1410 2 view .LVU924
1410:src/xeq.c     **** }
 3423              		.loc 1 1410 24 is_stmt 0 view .LVU925
 3424 000e 0020     		movs	r0, #0
 3425              	.LVL254:
1410:src/xeq.c     **** }
 3426              		.loc 1 1410 24 view .LVU926
ARM GAS  /tmp/cc0UaEmF.s 			page 161


 3427              	.LBE1531:
 3428              	.LBE1530:
 3429              	.LBB1533:
 3430              	.LBB1534:
 280:src/xeq.c     **** 	update_program_bounds(0);
 3431              		.loc 1 280 11 view .LVU927
 3432 0010 B3F8EC27 		ldrh	r2, [r3, #2028]
 3433              	.LBE1534:
 3434              	.LBE1533:
 3435              	.LBB1536:
 3436              	.LBB1532:
1410:src/xeq.c     **** }
 3437              		.loc 1 1410 24 view .LVU928
 3438 0014 A3F8DE07 		strh	r0, [r3, #2014]	@ movhi
1410:src/xeq.c     **** }
 3439              		.loc 1 1410 12 view .LVU929
 3440 0018 A3F8E207 		strh	r0, [r3, #2018]	@ movhi
 3441              	.LBE1532:
 3442              	.LBE1536:
2047:src/xeq.c     **** 	}
 3443              		.loc 1 2047 3 is_stmt 1 view .LVU930
 3444              	.LVL255:
 3445              	.LBB1537:
 3446              	.LBI1533:
 279:src/xeq.c     **** 	State.pc = pc;
 3447              		.loc 1 279 13 view .LVU931
 3448              	.LBB1535:
 280:src/xeq.c     **** 	update_program_bounds(0);
 3449              		.loc 1 280 2 view .LVU932
 280:src/xeq.c     **** 	update_program_bounds(0);
 3450              		.loc 1 280 11 is_stmt 0 view .LVU933
 3451 001c A3F8E027 		strh	r2, [r3, #2016]	@ movhi
 281:src/xeq.c     **** }
 3452              		.loc 1 281 2 is_stmt 1 view .LVU934
 3453 0020 FFF7FEFF 		bl	update_program_bounds
 3454              	.LVL256:
 3455              	.L278:
 281:src/xeq.c     **** }
 3456              		.loc 1 281 2 is_stmt 0 view .LVU935
 3457              	.LBE1535:
 3458              	.LBE1537:
2060:src/xeq.c     **** 		// RTN with empty stack stops
 3459              		.loc 1 2060 2 is_stmt 1 view .LVU936
2060:src/xeq.c     **** 		// RTN with empty stack stops
 3460              		.loc 1 2060 6 is_stmt 0 view .LVU937
 3461 0024 2368     		ldr	r3, [r4]
2060:src/xeq.c     **** 		// RTN with empty stack stops
 3462              		.loc 1 2060 5 view .LVU938
 3463 0026 B3F9E217 		ldrsh	r1, [r3, #2018]
 3464 002a 09B3     		cbz	r1, .L289
2064:src/xeq.c     **** 
 3465              		.loc 1 2064 1 view .LVU939
 3466 002c 70BD     		pop	{r4, r5, r6, pc}
 3467              	.LVL257:
 3468              	.L277:
2052:src/xeq.c     **** 		pc = RetStk[RetStkPtr - 1];
 3469              		.loc 1 2052 3 is_stmt 1 view .LVU940
ARM GAS  /tmp/cc0UaEmF.s 			page 162


 3470 002e 0546     		mov	r5, r0
 3471 0030 FFF7FEFF 		bl	retstk_up
 3472              	.LVL258:
2053:src/xeq.c     **** 		raw_set_pc(pc);
 3473              		.loc 1 2053 3 view .LVU941
2053:src/xeq.c     **** 		raw_set_pc(pc);
 3474              		.loc 1 2053 15 is_stmt 0 view .LVU942
 3475 0034 2268     		ldr	r2, [r4]
2053:src/xeq.c     **** 		raw_set_pc(pc);
 3476              		.loc 1 2053 6 view .LVU943
 3477 0036 1649     		ldr	r1, .L290+4
2053:src/xeq.c     **** 		raw_set_pc(pc);
 3478              		.loc 1 2053 14 view .LVU944
 3479 0038 B2F9E237 		ldrsh	r3, [r2, #2018]
2053:src/xeq.c     **** 		raw_set_pc(pc);
 3480              		.loc 1 2053 6 view .LVU945
 3481 003c 0968     		ldr	r1, [r1]
2053:src/xeq.c     **** 		raw_set_pc(pc);
 3482              		.loc 1 2053 14 view .LVU946
 3483 003e 03F10043 		add	r3, r3, #-2147483648
 3484 0042 013B     		subs	r3, r3, #1
 3485              	.LBB1538:
 3486              	.LBB1539:
 281:src/xeq.c     **** }
 3487              		.loc 1 281 2 view .LVU947
 3488 0044 0020     		movs	r0, #0
 3489              	.LBE1539:
 3490              	.LBE1538:
2053:src/xeq.c     **** 		raw_set_pc(pc);
 3491              		.loc 1 2053 6 view .LVU948
 3492 0046 31F81360 		ldrh	r6, [r1, r3, lsl #1]
 3493              	.LVL259:
2054:src/xeq.c     **** 		// If RTN+1 inc PC unless a POPUSR command or the program end would be skipped
 3494              		.loc 1 2054 3 is_stmt 1 view .LVU949
 3495              	.LBB1541:
 3496              	.LBI1538:
 279:src/xeq.c     **** 	State.pc = pc;
 3497              		.loc 1 279 13 view .LVU950
 3498              	.LBB1540:
 280:src/xeq.c     **** 	update_program_bounds(0);
 3499              		.loc 1 280 2 view .LVU951
 280:src/xeq.c     **** 	update_program_bounds(0);
 3500              		.loc 1 280 11 is_stmt 0 view .LVU952
 3501 004a A2F8E067 		strh	r6, [r2, #2016]	@ movhi
 281:src/xeq.c     **** }
 3502              		.loc 1 281 2 is_stmt 1 view .LVU953
 3503 004e FFF7FEFF 		bl	update_program_bounds
 3504              	.LVL260:
 281:src/xeq.c     **** }
 3505              		.loc 1 281 2 is_stmt 0 view .LVU954
 3506              	.LBE1540:
 3507              	.LBE1541:
2056:src/xeq.c     **** 			if (incpc())
 3508              		.loc 1 2056 3 is_stmt 1 view .LVU955
2056:src/xeq.c     **** 			if (incpc())
 3509              		.loc 1 2056 6 is_stmt 0 view .LVU956
 3510 0052 002D     		cmp	r5, #0
ARM GAS  /tmp/cc0UaEmF.s 			page 163


 3511 0054 E6D0     		beq	.L278
2056:src/xeq.c     **** 			if (incpc())
 3512              		.loc 1 2056 16 discriminator 1 view .LVU957
 3513 0056 3046     		mov	r0, r6
 3514 0058 FFF7FEFF 		bl	getprog
 3515              	.LVL261:
2056:src/xeq.c     **** 			if (incpc())
 3516              		.loc 1 2056 13 discriminator 1 view .LVU958
 3517 005c B0F5C17F 		cmp	r0, #386
 3518 0060 E0D0     		beq	.L278
2057:src/xeq.c     **** 				decpc();
 3519              		.loc 1 2057 4 is_stmt 1 view .LVU959
2057:src/xeq.c     **** 				decpc();
 3520              		.loc 1 2057 8 is_stmt 0 view .LVU960
 3521 0062 FFF7FEFF 		bl	incpc
 3522              	.LVL262:
2057:src/xeq.c     **** 				decpc();
 3523              		.loc 1 2057 7 view .LVU961
 3524 0066 0028     		cmp	r0, #0
 3525 0068 DCD0     		beq	.L278
2058:src/xeq.c     **** 	}
 3526              		.loc 1 2058 5 is_stmt 1 view .LVU962
 3527 006a FFF7FEFF 		bl	decpc
 3528              	.LVL263:
 3529 006e D9E7     		b	.L278
 3530              	.LVL264:
 3531              	.L289:
2062:src/xeq.c     **** 	}
 3532              		.loc 1 2062 3 view .LVU963
 3533              	.LBB1542:
 3534              	.LBI1542:
4945:src/xeq.c     **** 
4946:src/xeq.c     **** 
4947:src/xeq.c     **** /* Handle a command that takes an argument.  The argument is encoded
4948:src/xeq.c     ****  * in the low order bits of the opcode.  We also have to take
4949:src/xeq.c     ****  * account of the indirection flag and various limits.
4950:src/xeq.c     ****  */
4951:src/xeq.c     **** static void rargs(const opcode op) {
4952:src/xeq.c     **** 	unsigned int arg = op & RARG_MASK;
4953:src/xeq.c     **** 	const unsigned int cmd = RARG_CMD(op);
4954:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
4955:src/xeq.c     **** 	unsigned int lim = argcmds[cmd].lim;
4956:src/xeq.c     **** 
4957:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
4958:src/xeq.c     **** 
4959:src/xeq.c     **** 	process_cmdline();
4960:src/xeq.c     **** 
4961:src/xeq.c     **** 	if (cmd >= NUM_RARG) {
4962:src/xeq.c     **** 		illegal(op);
4963:src/xeq.c     **** 		return;
4964:src/xeq.c     **** 	}
4965:src/xeq.c     **** 	if (isNULL(argcmds[cmd].f)) {
4966:src/xeq.c     **** 		set_lift();
4967:src/xeq.c     **** 		return;
4968:src/xeq.c     **** 	}
4969:src/xeq.c     **** 
4970:src/xeq.c     **** 	if (ind) {
ARM GAS  /tmp/cc0UaEmF.s 			page 164


4971:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
4972:src/xeq.c     **** 			// Get the argument by reading a register
4973:src/xeq.c     **** 			int sgn;
4974:src/xeq.c     **** 			unsigned long long int regval;
4975:src/xeq.c     **** 
4976:src/xeq.c     **** 			if (arg > get_reg_limit(RARG_RCL, arg)) {
4977:src/xeq.c     **** 				// Invalid register specified for indirect access
4978:src/xeq.c     **** 				report_err(ERR_RANGE);
4979:src/xeq.c     **** 				return;
4980:src/xeq.c     **** 			}
4981:src/xeq.c     **** 			regval = get_reg_n_int_sgn(arg, &sgn);
4982:src/xeq.c     **** 			if ((regval >> 32) != 0)
4983:src/xeq.c     **** 				goto range;
4984:src/xeq.c     **** 			arg = (unsigned int) regval;
4985:src/xeq.c     **** 			if (argcmds[cmd].local && sgn) {
4986:src/xeq.c     **** 				// negative arguments address local registers or flags
4987:src/xeq.c     **** 				arg = LOCAL_REG_BASE + arg;
4988:src/xeq.c     **** 			}
4989:src/xeq.c     **** 		} 
4990:src/xeq.c     **** 		else {
4991:src/xeq.c     **** 			// put the top bit back in
4992:src/xeq.c     **** 			arg |= RARG_IND;
4993:src/xeq.c     **** 		}
4994:src/xeq.c     **** 	}
4995:src/xeq.c     **** 	if (argcmds[cmd].reg) {
4996:src/xeq.c     **** 		// Range checking for registers against variable boundary
4997:src/xeq.c     **** 		lim = get_reg_limit(cmd, arg);
4998:src/xeq.c     **** 	}
4999:src/xeq.c     **** 	else if (argcmds[cmd].flag) {
5000:src/xeq.c     **** 		if (LocalRegs == 0)
5001:src/xeq.c     **** 			lim = NUMFLG - 1;
5002:src/xeq.c     **** 		else 
5003:src/xeq.c     **** 			lim = LOCAL_FLAG_BASE + MAX_LOCAL_DIRECT - 1;
5004:src/xeq.c     **** 	}
5005:src/xeq.c     **** 	if (arg > lim) {
5006:src/xeq.c     **** 		// Argument is too large
5007:src/xeq.c     **** range:		report_err(ERR_RANGE);
5008:src/xeq.c     **** 	}
5009:src/xeq.c     **** 	else if (argcmds[cmd].cmplx && arg >= TOPREALREG-1 && arg < NUMREG && (arg & 1)) {
5010:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
5011:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
5012:src/xeq.c     **** 	}
5013:src/xeq.c     **** 	else {
5014:src/xeq.c     **** 		// Dispatch the command
5015:src/xeq.c     **** 		FP_RARG fp = (FP_RARG) EXPAND_ADDRESS(argcmds[cmd].f);
5016:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
5017:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
5018:src/xeq.c     **** 			if (argcmds[cmd].label) {
5019:src/xeq.c     **** 				XromUserPc = find_label_from(state_pc(), arg, 0);
5020:src/xeq.c     **** 				if (XromUserPc == 0)
5021:src/xeq.c     **** 					return;
5022:src/xeq.c     **** 				if (! Running)
5023:src/xeq.c     **** 					clrretstk();
5024:src/xeq.c     **** 			}
5025:src/xeq.c     **** 			else
5026:src/xeq.c     **** 				XromArg = (unsigned char) arg;
5027:src/xeq.c     **** #else
ARM GAS  /tmp/cc0UaEmF.s 			page 165


5028:src/xeq.c     **** 			XromUserPc = find_label_from(state_pc(), arg, FIND_OP_ERROR | FIND_OP_ENDS);
5029:src/xeq.c     **** 			if (XromUserPc == 0)
5030:src/xeq.c     **** 				return;
5031:src/xeq.c     **** 			if (! Running)
5032:src/xeq.c     **** 				clrretstk();
5033:src/xeq.c     **** #endif
5034:src/xeq.c     **** 			dispatch_xrom(fp);
5035:src/xeq.c     **** 			return;
5036:src/xeq.c     **** 		}
5037:src/xeq.c     **** 		else {
5038:src/xeq.c     **** 			fp(arg, (enum rarg)cmd);
5039:src/xeq.c     **** 		}
5040:src/xeq.c     **** 		if (cmd != RARG_XROM_OUT) {
5041:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
5042:src/xeq.c     **** 			set_lift();
5043:src/xeq.c     **** 		}
5044:src/xeq.c     **** 	}
5045:src/xeq.c     **** }
5046:src/xeq.c     **** 
5047:src/xeq.c     **** static void multi(const opcode op) {
5048:src/xeq.c     **** 	const int cmd = opDBL(op);
5049:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
5050:src/xeq.c     **** 
5051:src/xeq.c     **** 	process_cmdline_set_lift();
5052:src/xeq.c     **** 
5053:src/xeq.c     **** 	if (cmd >= NUM_MULTI) {
5054:src/xeq.c     **** 		illegal(op);
5055:src/xeq.c     **** 		return;
5056:src/xeq.c     **** 	}
5057:src/xeq.c     **** 	if (isNULL(multicmds[cmd].f))	// LBL does nothing
5058:src/xeq.c     **** 		return;
5059:src/xeq.c     **** 	else {
5060:src/xeq.c     **** 		FP_MULTI fp = (FP_MULTI) EXPAND_ADDRESS(multicmds[cmd].f);
5061:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
5062:src/xeq.c     **** 			XromUserPc = findmultilbl(op, FIND_OP_ERROR);
5063:src/xeq.c     **** 			if (XromUserPc != 0) {
5064:src/xeq.c     **** 				if (! Running)
5065:src/xeq.c     **** 					clrretstk();
5066:src/xeq.c     **** 				dispatch_xrom(fp);
5067:src/xeq.c     **** 			}
5068:src/xeq.c     **** 			return;
5069:src/xeq.c     **** 		}
5070:src/xeq.c     **** 		else {
5071:src/xeq.c     **** 			fp(op, (enum multiops)cmd);
5072:src/xeq.c     **** 			set_lift();
5073:src/xeq.c     **** 		}
5074:src/xeq.c     **** 	}
5075:src/xeq.c     **** }
5076:src/xeq.c     **** 
5077:src/xeq.c     **** 
5078:src/xeq.c     **** 
5079:src/xeq.c     **** /* Main dispatch routine that decodes the top level of the opcode and
5080:src/xeq.c     ****  * goes to the appropriate lower level dispatch routine.
5081:src/xeq.c     ****  */
5082:src/xeq.c     **** void xeq(opcode op) 
5083:src/xeq.c     **** {
5084:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
ARM GAS  /tmp/cc0UaEmF.s 			page 166


5085:src/xeq.c     **** 	const unsigned short flags = UserFlags[regA_idx >> 4];
5086:src/xeq.c     **** 	const struct _ustate old = UState;
5087:src/xeq.c     **** 	const unsigned char lift = get_lift();
5088:src/xeq.c     **** 	const unsigned short old_pc = state_pc();
5089:src/xeq.c     **** 	const int old_cl = *((int *)&CommandLine);
5090:src/xeq.c     **** #ifdef INFRARED
5091:src/xeq.c     **** 	int tracing;
5092:src/xeq.c     **** #endif
5093:src/xeq.c     **** 
5094:src/xeq.c     **** #ifndef IGNORE_INVALID_FRACTIONS
5095:src/xeq.c     **** 	if (op == (OP_NIL | OP_rCLX) || op == (OP_NIL | OP_CLSTK)) {
5096:src/xeq.c     **** 		// Make sure that if the command line isn't empty, it contains
5097:src/xeq.c     **** 		// valid input so no error message will be generated.
5098:src/xeq.c     **** 		CmdLineDot = 0;
5099:src/xeq.c     **** 		Cmdline[0] = '0';
5100:src/xeq.c     **** 		Cmdline[1] = '\0';
5101:src/xeq.c     **** 	}
5102:src/xeq.c     **** #endif
5103:src/xeq.c     **** 
5104:src/xeq.c     **** 	xcopy(save, StackBase, sizeof(save));
5105:src/xeq.c     **** #if defined(CONSOLE)
5106:src/xeq.c     **** 	instruction_count++;
5107:src/xeq.c     **** #endif
5108:src/xeq.c     **** #ifndef REALBUILD
5109:src/xeq.c     **** 	if (State2.trace && ! State2.sst) {
5110:src/xeq.c     **** 		char buf[16];
5111:src/xeq.c     **** 		if (Running)
5112:src/xeq.c     **** 			print_step(op);
5113:src/xeq.c     **** 		else
5114:src/xeq.c     **** 			sprintf(TraceBuffer, "%04X:%s", op, prt(op, buf));
5115:src/xeq.c     **** 		DispMsg = TraceBuffer;
5116:src/xeq.c     **** 	}
5117:src/xeq.c     **** #endif
5118:src/xeq.c     **** #ifdef INFRARED
5119:src/xeq.c     **** #ifdef REALBUILD
5120:src/xeq.c     **** 	tracing = get_user_flag(T_FLAG) && ! is_xrom() && State2.runmode;
5121:src/xeq.c     **** #else
5122:src/xeq.c     **** 	tracing = get_user_flag(T_FLAG) && (! is_xrom() || State2.trace) && State2.runmode;
5123:src/xeq.c     **** #endif
5124:src/xeq.c     **** 	Tracing = tracing;
5125:src/xeq.c     **** 	print_trace( op, 0 );
5126:src/xeq.c     **** #endif
5127:src/xeq.c     **** 	Busy = 0;
5128:src/xeq.c     **** 	State2.wascomplex = 0;
5129:src/xeq.c     **** 	if (isDBL(op))
5130:src/xeq.c     **** 		multi(op);
5131:src/xeq.c     **** 	else if (isRARG(op))
5132:src/xeq.c     **** 		rargs(op);
5133:src/xeq.c     **** 	else {
5134:src/xeq.c     **** 		XeqOpCode = (s_opcode) op;
5135:src/xeq.c     **** 		switch (opKIND(op)) {
5136:src/xeq.c     **** 		case KIND_SPEC:	specials(op);	break;
5137:src/xeq.c     **** 		case KIND_NIL:	niladic(op);	break;
5138:src/xeq.c     **** 		case KIND_MON:	monadic(op);	break;
5139:src/xeq.c     **** 		case KIND_DYA:	dyadic(op);	break;
5140:src/xeq.c     **** 		case KIND_TRI:	triadic(op);	break;
5141:src/xeq.c     **** 		case KIND_CMON:	monadic_cmplex(op);	break;
ARM GAS  /tmp/cc0UaEmF.s 			page 167


5142:src/xeq.c     **** 		case KIND_CDYA:	dyadic_cmplex(op);	break;
5143:src/xeq.c     **** 		default:	illegal(op);
5144:src/xeq.c     **** 		}
5145:src/xeq.c     **** 	}
5146:src/xeq.c     **** #if INTERRUPT_XROM_TICKS > 0
5147:src/xeq.c     **** 	if (OnKeyTicks >= INTERRUPT_XROM_TICKS) {
5148:src/xeq.c     **** 		report_err(ERR_INTERRUPTED);
5149:src/xeq.c     **** 		while (get_key() >= 0) { } // Empty keyboard buffer
5150:src/xeq.c     **** 	}
5151:src/xeq.c     **** #endif
5152:src/xeq.c     **** 
5153:src/xeq.c     **** 	if (Error != ERR_NONE) {
5154:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
5155:src/xeq.c     **** 		error_message( Error );
5156:src/xeq.c     **** 		// Repair stack and state
5157:src/xeq.c     **** 		// Clear return stack
5158:src/xeq.c     **** 		xcopy(StackBase, save, sizeof(save));
5159:src/xeq.c     **** 		UserFlags[regA_idx >> 4] = flags;
5160:src/xeq.c     **** 		UState = old;
5161:src/xeq.c     **** 		State2.state_lift = lift;
5162:src/xeq.c     **** 		raw_set_pc(old_pc);
5163:src/xeq.c     **** 		*((int *)&CommandLine) = old_cl;
5164:src/xeq.c     **** 		process_cmdline_set_lift();
5165:src/xeq.c     **** 		// process_cmdline_set_lift() may set an error code if there was something
5166:src/xeq.c     **** 		// wrong with the command line, e.g. it had a partially entered fraction
5167:src/xeq.c     **** 		Error = ERR_NONE;
5168:src/xeq.c     **** 		if (Running || XromRunning) {
5169:src/xeq.c     **** #ifndef REALBUILD
5170:src/xeq.c     **** 			if (State2.trace ) {
5171:src/xeq.c     **** 				// Special handling for debug environment
5172:src/xeq.c     **** 				if (XromFlags.xIN) {
5173:src/xeq.c     **** 					// Restore the global return stack
5174:src/xeq.c     **** 					RetStk = XromUserRetStk;
5175:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
5176:src/xeq.c     **** 					// Restore private stack to normal stack
5177:src/xeq.c     **** 					if (! XromFlags.mode_double && NumRegs < STACK_SIZE + EXTRA_REG) {
5178:src/xeq.c     **** 						// Need space for double precision stack
5179:src/xeq.c     **** 						cmdregs(STACK_SIZE + EXTRA_REG, RARG_REGS);
5180:src/xeq.c     **** 					}
5181:src/xeq.c     **** 					XromFlags.xIN = 0;		// Clear flag before get_reg_n!
5182:src/xeq.c     **** 					if (Error == ERR_NONE) {
5183:src/xeq.c     **** 						UState.mode_double = 1;
5184:src/xeq.c     **** 						xcopy(get_reg_n(regX_idx), XromStack, sizeof(XromStack));
5185:src/xeq.c     **** 					}
5186:src/xeq.c     **** 					else
5187:src/xeq.c     **** 						Error = ERR_NONE;	// Not enough RAM, can't restore
5188:src/xeq.c     **** 				}
5189:src/xeq.c     **** 			}
5190:src/xeq.c     **** 			else {
5191:src/xeq.c     **** #endif
5192:src/xeq.c     **** 				unsigned short int pc = state_pc();
5193:src/xeq.c     **** 				if (XromFlags.xIN) {
5194:src/xeq.c     **** 					// Restore state to before xIN
5195:src/xeq.c     **** 					XromFlags.xIN = 0;
5196:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
5197:src/xeq.c     **** 					UState.intm = XromFlags.mode_int;
5198:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
ARM GAS  /tmp/cc0UaEmF.s 			page 168


5199:src/xeq.c     **** 					// Restore the global return stack
5200:src/xeq.c     **** 					RetStk = XromUserRetStk;
5201:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
5202:src/xeq.c     **** 				}
5203:src/xeq.c     **** 				while (isXROM(pc)) {
5204:src/xeq.c     **** 					// Leave XROM
5205:src/xeq.c     **** 					if (RetStkPtr != 0) {
5206:src/xeq.c     **** 						retstk_up();
5207:src/xeq.c     **** 						pc = RetStk[RetStkPtr - 1];
5208:src/xeq.c     **** 					}
5209:src/xeq.c     **** 					if (RetStkPtr == 0)
5210:src/xeq.c     **** 						++pc; // compensate for decpc below
5211:src/xeq.c     **** 				}
5212:src/xeq.c     **** 				raw_set_pc(pc);
5213:src/xeq.c     **** #ifndef REALBUILD
5214:src/xeq.c     **** 			}
5215:src/xeq.c     **** #endif
5216:src/xeq.c     **** 			decpc();		// Back to error instruction
5217:src/xeq.c     **** 			xeq_init_contexts();	// Repair any pointers clobberd by xIN
5218:src/xeq.c     **** 
5219:src/xeq.c     **** 			set_running_off();
5220:src/xeq.c     **** 		}
5221:src/xeq.c     **** 	} 
5222:src/xeq.c     **** 	reset_volatile_state();
5223:src/xeq.c     **** #ifdef INFRARED
5224:src/xeq.c     **** 	Tracing = tracing;
5225:src/xeq.c     **** 	print_trace( op, 1 );
5226:src/xeq.c     **** #endif
5227:src/xeq.c     **** }
5228:src/xeq.c     **** 
5229:src/xeq.c     **** /* Execute a single step and return.
5230:src/xeq.c     ****  */
5231:src/xeq.c     **** static void xeq_single(void) {
5232:src/xeq.c     **** 	const opcode op = getprog(state_pc());
5233:src/xeq.c     **** 
5234:src/xeq.c     **** 	incpc();
5235:src/xeq.c     **** 	xeq(op);
5236:src/xeq.c     **** }
5237:src/xeq.c     **** 
5238:src/xeq.c     **** /* Continue execution trough xrom code
5239:src/xeq.c     ****  */
5240:src/xeq.c     **** #ifdef REALBUILD
5241:src/xeq.c     **** void xeq_xrom(void) {
5242:src/xeq.c     **** #else
5243:src/xeq.c     **** static void xeq_xrom2(void) {
5244:src/xeq.c     **** #endif
5245:src/xeq.c     **** 	int count = 0;
5246:src/xeq.c     **** 	/* Now if we've stepped into the XROM area, keep going until
5247:src/xeq.c     **** 	 * we break free.
5248:src/xeq.c     **** 	 */
5249:src/xeq.c     **** 	  while (!Pause && is_xrom() && RetStkPtr != 0) {
5250:src/xeq.c     **** 		XromRunning = 1;
5251:src/xeq.c     **** 		xeq_single();
5252:src/xeq.c     **** 		XromRunning = 0;
5253:src/xeq.c     **** 		if ((++count & 31) == 0)
5254:src/xeq.c     **** 			busy();
5255:src/xeq.c     **** 		  if (Pause)
ARM GAS  /tmp/cc0UaEmF.s 			page 169


5256:src/xeq.c     **** 			// Special case: WHO has a PSE built in.
5257:src/xeq.c     **** 			// Switch to Running mode to force continued execution.
5258:src/xeq.c     **** 			Running = 1;
5259:src/xeq.c     **** 		
5260:src/xeq.c     **** 	}
5261:src/xeq.c     **** }
5262:src/xeq.c     **** 
5263:src/xeq.c     **** #ifndef REALBUILD
5264:src/xeq.c     **** void xeq_xrom(void) {
5265:src/xeq.c     **** 	// We split the routine in two parts for debugging only
5266:src/xeq.c     **** 	if (! State2.trace)
5267:src/xeq.c     **** 		xeq_xrom2();
5268:src/xeq.c     **** }
5269:src/xeq.c     **** #endif
5270:src/xeq.c     **** 
5271:src/xeq.c     **** /* Check to see if we're running a program and if so execute it
5272:src/xeq.c     ****  * for a while.
5273:src/xeq.c     ****  *
5274:src/xeq.c     ****  */
5275:src/xeq.c     **** 
5276:src/xeq.c     **** /*
5277:src/xeq.c     **** 'Pause' is true if Pause is non-zero, i.e., if the pause is still running.
5278:src/xeq.c     **** */
5279:src/xeq.c     ****  void xeqprog(void) 
5280:src/xeq.c     ****  {
5281:src/xeq.c     ****    int state = 0;
5282:src/xeq.c     ****    if (Running || Pause) {
5283:src/xeq.c     **** 
5284:src/xeq.c     **** #if !(defined(CONSOLE)) && !(defined(DM42))
5285:src/xeq.c     ****      long long last_ticker = Ticker;
5286:src/xeq.c     ****      state = ((int) last_ticker % (2*TICKS_PER_FLASH) < TICKS_PER_FLASH);
5287:src/xeq.c     **** #else
5288:src/xeq.c     ****      state = 1;
5289:src/xeq.c     **** #endif
5290:src/xeq.c     ****      
5291:src/xeq.c     ****      //     print_debug(100,state);
5292:src/xeq.c     ****      dot(RCL_annun, state);
5293:src/xeq.c     ****      finish_RPN(); // RPN
5294:src/xeq.c     **** 
5295:src/xeq.c     ****      while (! Pause && Running) {
5296:src/xeq.c     ****        xeq_single();
5297:src/xeq.c     ****        //       if (is_key_pressed() || (Ticker != last_ticker)) // flashes but empty loop 1/3 the 
5298:src/xeq.c     ****        if (is_key_pressed())
5299:src/xeq.c     **** 	 {
5300:src/xeq.c     **** 	 // Key press or heart beat
5301:src/xeq.c     **** 	 // Note: DM42 doesn't have real heart beat so no flash
5302:src/xeq.c     **** 	 // xeq_xrom(); // Already done by dispatch_xrom()
5303:src/xeq.c     **** 	 break;
5304:src/xeq.c     ****        }
5305:src/xeq.c     ****      }
5306:src/xeq.c     ****    }
5307:src/xeq.c     ****    if (! Running && ! Pause) {	  
5308:src/xeq.c     ****      // Program has terminated
5309:src/xeq.c     ****      clr_dot(RCL_annun);
5310:src/xeq.c     ****      ShowRPN = 1;	// display() may turn it off again
5311:src/xeq.c     ****      display();
5312:src/xeq.c     ****      if (ShowRPN) {
ARM GAS  /tmp/cc0UaEmF.s 			page 170


5313:src/xeq.c     ****        set_dot(RPN);
5314:src/xeq.c     ****        finish_RPN(); // RPN
5315:src/xeq.c     ****      }
5316:src/xeq.c     **** #ifndef CONSOLE
5317:src/xeq.c     ****      // Avoid accidental restart with R/S or APD after program ends
5318:src/xeq.c     ****      JustStopped = 1;
5319:src/xeq.c     **** #endif
5320:src/xeq.c     ****    }
5321:src/xeq.c     ****  }
5322:src/xeq.c     **** 
5323:src/xeq.c     **** /* Single step and back step routine
5324:src/xeq.c     ****  */
5325:src/xeq.c     **** void xeq_sst_bst(int kind) 
5326:src/xeq.c     **** {
5327:src/xeq.c     **** 	opcode op;
5328:src/xeq.c     **** 
5329:src/xeq.c     **** 	reset_volatile_state();
5330:src/xeq.c     **** 	if (kind == -1)
5331:src/xeq.c     **** 		decpc();
5332:src/xeq.c     **** 
5333:src/xeq.c     **** 	if (State2.runmode) {
5334:src/xeq.c     **** 		// Display the step
5335:src/xeq.c     **** 		op = getprog(state_pc());
5336:src/xeq.c     **** 		print_step(op);
5337:src/xeq.c     **** 		if (kind == 1) {
5338:src/xeq.c     **** 			// Execute the step on key up
5339:src/xeq.c     **** #ifndef REALBUILD
5340:src/xeq.c     **** 			State2.sst = 1;
5341:src/xeq.c     **** #endif
5342:src/xeq.c     **** 			set_running_on_sst();
5343:src/xeq.c     **** 			incpc();
5344:src/xeq.c     **** 			xeq(op);
5345:src/xeq.c     **** #ifndef REALBUILD
5346:src/xeq.c     **** 			State2.sst = 0;
5347:src/xeq.c     **** #endif
5348:src/xeq.c     **** 			xeq_xrom();  // necessary for code called from XROM
5349:src/xeq.c     **** 			set_running_off_sst();
5350:src/xeq.c     **** 		}
5351:src/xeq.c     **** 	}
5352:src/xeq.c     **** 	else if (kind == 0) {
5353:src/xeq.c     **** 		// Key down in program mode
5354:src/xeq.c     **** 		incpc();
5355:src/xeq.c     **** 		OpCode = 0;
5356:src/xeq.c     **** 	}
5357:src/xeq.c     **** }
5358:src/xeq.c     **** 
5359:src/xeq.c     **** 
5360:src/xeq.c     **** /*
5361:src/xeq.c     ****  *  User command to start or stop execution
5362:src/xeq.c     ****  */
5363:src/xeq.c     **** void op_rs(enum nilop op) {
5364:src/xeq.c     **** #ifndef REALBUILD
5365:src/xeq.c     **** 	// This is for debugging purposes only
5366:src/xeq.c     **** 	// STOP does not appear in XROM normally
5367:src/xeq.c     **** 	if (is_xrom()) {
5368:src/xeq.c     **** 		if (State2.trace && (Running || XromRunning)) {
5369:src/xeq.c     **** 			Running = XromRunning = 0;
ARM GAS  /tmp/cc0UaEmF.s 			page 171


5370:src/xeq.c     **** 		}
5371:src/xeq.c     **** 		else {
5372:src/xeq.c     **** 			xeq_xrom2();
5373:src/xeq.c     **** 		}
5374:src/xeq.c     **** 		return;
5375:src/xeq.c     **** 	}
5376:src/xeq.c     **** #endif
5377:src/xeq.c     **** 	if (Running)
5378:src/xeq.c     **** 		set_running_off();
5379:src/xeq.c     **** 	else {
5380:src/xeq.c     **** 		set_running_on();
5381:src/xeq.c     **** 		if (RetStkPtr == 0)
5382:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
5383:src/xeq.c     **** 	}
5384:src/xeq.c     **** }
5385:src/xeq.c     **** 
5386:src/xeq.c     **** 
5387:src/xeq.c     **** /* 
5388:src/xeq.c     ****  *  The following needs to be done each time before any user input is processed.
5389:src/xeq.c     ****  *  On the hardware, RAM is volatile and these pointers and structures need valid values!
5390:src/xeq.c     ****  */
5391:src/xeq.c     **** void xeq_init_contexts(void) {
5392:src/xeq.c     **** 	/*
5393:src/xeq.c     **** 	 *  Compute the sizes of the various memory portions
5394:src/xeq.c     **** 	 */
5395:src/xeq.c     **** 	short int s;
5396:src/xeq.c     **** 	SizeStatRegs = State.have_stats ? sizeof(STAT_DATA) >> 1 : 0;	// in 16 bit words!
5397:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
5398:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
5399:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
5400:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
5401:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
5402:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
5403:src/xeq.c     **** 
5404:src/xeq.c     **** 	/*
5405:src/xeq.c     **** 	 *  Initialise our standard contexts.
5406:src/xeq.c     **** 	 *  We bump the digits for internal calculations.
5407:src/xeq.c     **** 	 */
5408:src/xeq.c     **** 	decContextDefault(&Ctx, DEC_INIT_BASE);
5409:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
5410:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
5411:src/xeq.c     **** 	Ctx.emin=-DEC_MAX_MATH;
5412:src/xeq.c     **** 	Ctx.round = DEC_ROUND_HALF_EVEN;
5413:src/xeq.c     **** }
5414:src/xeq.c     **** 
5415:src/xeq.c     **** 
5416:src/xeq.c     **** 
5417:src/xeq.c     **** #ifdef INCLUDE_PLOTTING
5418:src/xeq.c     **** /*
5419:src/xeq.c     ****  *  Plotting commands
5420:src/xeq.c     ****  *
5421:src/xeq.c     ****  *  The plot buffer is a range of registers that is treated as pixel data
5422:src/xeq.c     ****  *  The first byte contains the length of the buffer in columns (bytes)
5423:src/xeq.c     ****  */
5424:src/xeq.c     **** 
5425:src/xeq.c     **** /*
5426:src/xeq.c     ****  *  Check register range and return a pointer to the plot data.
ARM GAS  /tmp/cc0UaEmF.s 			page 172


5427:src/xeq.c     ****  */
5428:src/xeq.c     **** unsigned char *plot_check_range( int arg, int width, int height )
5429:src/xeq.c     **** {
5430:src/xeq.c     **** 	unsigned char *p = (unsigned char *) get_reg_n( arg );
5431:src/xeq.c     **** 	int n = is_dblmode() ? 16 : 8;
5432:src/xeq.c     **** 	int lim = arg < TOPREALREG ? global_regs() : local_regs() + LOCAL_REG_BASE;
5433:src/xeq.c     **** 	int bytes;
5434:src/xeq.c     **** 
5435:src/xeq.c     **** 	if ( width == 0 ) {
5436:src/xeq.c     **** 		width = (int) *p;
5437:src/xeq.c     **** 		height = (int) p[ 1 ];
5438:src/xeq.c     **** 	}
5439:src/xeq.c     **** 
5440:src/xeq.c     **** 	/*
5441:src/xeq.c     **** 	 *  Compute total number of bytes
5442:src/xeq.c     **** 	 */
5443:src/xeq.c     **** 	bytes = 2 + width * height;
5444:src/xeq.c     **** 
5445:src/xeq.c     **** 	/*
5446:src/xeq.c     **** 	 *  Check if we have enough room
5447:src/xeq.c     **** 	 */
5448:src/xeq.c     **** 	if ( width > PAPER_WIDTH || arg + ( bytes + n - 1 ) / n > lim ) {
5449:src/xeq.c     **** 		report_err( ERR_RANGE );
5450:src/xeq.c     **** 		return (unsigned char *) NULL;
5451:src/xeq.c     **** 	}
5452:src/xeq.c     **** 	return p;
5453:src/xeq.c     **** }
5454:src/xeq.c     **** 
5455:src/xeq.c     **** /*
5456:src/xeq.c     ****  * Set up for graphical object display.
5457:src/xeq.c     ****  */
5458:src/xeq.c     **** void cmdplotdisplay( unsigned int arg, enum rarg op )
5459:src/xeq.c     **** {
5460:src/xeq.c     **** 	if (plot_check_range(arg, 0, 0) != NULL) {
5461:src/xeq.c     **** 		DispPlot = arg + 1;
5462:src/xeq.c     **** 		frozen_display();
5463:src/xeq.c     **** 	}
5464:src/xeq.c     **** }
5465:src/xeq.c     **** 
5466:src/xeq.c     **** /*
5467:src/xeq.c     ****  *  Initialize a block of registers to act as a buffer for plotting
5468:src/xeq.c     ****  *  X contains the maximum width (<= 0 is default: 166)
5469:src/xeq.c     ****  */
5470:src/xeq.c     **** void cmdplotinit( unsigned int arg, enum rarg op )
5471:src/xeq.c     **** {
5472:src/xeq.c     **** 	int sgnx, sgny;
5473:src/xeq.c     **** 	int width = (int) getX_int_sgn( &sgnx );
5474:src/xeq.c     **** 	int height = (int) get_reg_n_int_sgn( regY_idx, &sgny ); 
5475:src/xeq.c     **** 	unsigned char *p;
5476:src/xeq.c     **** 	
5477:src/xeq.c     **** 	if ( sgnx || width == 0 ) {
5478:src/xeq.c     **** 		width = PAPER_WIDTH;
5479:src/xeq.c     **** 	}
5480:src/xeq.c     **** 	if ( sgny || height == 0 ) {
5481:src/xeq.c     **** 		height = 1;
5482:src/xeq.c     **** 	}
5483:src/xeq.c     **** 	else {
ARM GAS  /tmp/cc0UaEmF.s 			page 173


5484:src/xeq.c     **** 		/*
5485:src/xeq.c     **** 		 *  Make height count the byte rows
5486:src/xeq.c     **** 		 */
5487:src/xeq.c     **** 		height = ( height + 7 ) >> 3;
5488:src/xeq.c     **** 	}
5489:src/xeq.c     **** 
5490:src/xeq.c     **** 	p = plot_check_range( arg, width, height );
5491:src/xeq.c     **** 	if ( p != NULL ) {
5492:src/xeq.c     **** 		*p++ = (unsigned char) width;
5493:src/xeq.c     **** 		*p++ = (unsigned char) height;
5494:src/xeq.c     **** 		xset( p, 0, width * height );
5495:src/xeq.c     **** 	}
5496:src/xeq.c     **** }
5497:src/xeq.c     **** 
5498:src/xeq.c     **** /*
5499:src/xeq.c     ****  *  Return the width and height of the plotting block
5500:src/xeq.c     ****  */
5501:src/xeq.c     **** void cmdplotdim( unsigned int arg, enum rarg op )
5502:src/xeq.c     **** {
5503:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
5504:src/xeq.c     **** 	if ( p != NULL ) {
5505:src/xeq.c     **** 		lift2_if_enabled();
5506:src/xeq.c     **** 		setX_int_sgn( p[ 0 ], 0 ); // width
5507:src/xeq.c     **** 		set_reg_n_int_sgn( regY_idx, p[ 1 ] << 3, 0 ); // height
5508:src/xeq.c     **** 	}
5509:src/xeq.c     **** }
5510:src/xeq.c     **** 
5511:src/xeq.c     **** /*
5512:src/xeq.c     ****  *  All pixel related commands
5513:src/xeq.c     ****  *  X is the horizontal position 0..width
5514:src/xeq.c     ****  *  Y is the vertical position 0..7
5515:src/xeq.c     ****  */
5516:src/xeq.c     **** void cmdplotpixel( unsigned int arg, enum rarg op )
5517:src/xeq.c     **** {
5518:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
5519:src/xeq.c     **** 	if ( p != NULL ) {
5520:src/xeq.c     **** 		/*
5521:src/xeq.c     **** 		 *  Get row from Y
5522:src/xeq.c     **** 		 */
5523:src/xeq.c     **** 		int sgn;
5524:src/xeq.c     **** 		unsigned int row = (unsigned int) get_reg_n_int_sgn( regY_idx, &sgn );
5525:src/xeq.c     **** 		int pix = 0;
5526:src/xeq.c     **** 		if ( sgn == 0 && ( row >> 3 ) < (unsigned int) p[ 1 ] ) {
5527:src/xeq.c     **** 			/*
5528:src/xeq.c     **** 			 *  Row is OK, get column from X
5529:src/xeq.c     **** 			 */
5530:src/xeq.c     **** 			unsigned int width = (unsigned int) *p;
5531:src/xeq.c     **** 			unsigned int column = (unsigned int) getX_int_sgn( &sgn );
5532:src/xeq.c     **** 			if ( sgn == 0 && column < width ) {
5533:src/xeq.c     **** 				/*
5534:src/xeq.c     **** 				 *  Modify the bit in the correct byte
5535:src/xeq.c     **** 				 */
5536:src/xeq.c     **** 				pix = 1 << ( row & 7 );
5537:src/xeq.c     **** 				p += 2 + width * ( row >> 3 ) + column;
5538:src/xeq.c     **** 
5539:src/xeq.c     **** 				if ( op == RARG_PLOT_SETPIX ) {
5540:src/xeq.c     **** 					*p |= pix;
ARM GAS  /tmp/cc0UaEmF.s 			page 174


5541:src/xeq.c     **** 				}
5542:src/xeq.c     **** 				else if ( op == RARG_PLOT_CLRPIX ) {
5543:src/xeq.c     **** 					*p &= ~pix;
5544:src/xeq.c     **** 				}
5545:src/xeq.c     **** 				else if ( op == RARG_PLOT_FLIPPIX ) {
5546:src/xeq.c     **** 					*p ^= pix;
5547:src/xeq.c     **** 				}
5548:src/xeq.c     **** 			}
5549:src/xeq.c     **** 		}
5550:src/xeq.c     **** 		if ( op == RARG_PLOT_ISSET ) {
5551:src/xeq.c     **** 			fin_tst( *p & pix );
5552:src/xeq.c     **** 		}
5553:src/xeq.c     **** 	}
5554:src/xeq.c     **** }
5555:src/xeq.c     **** #endif
5556:src/xeq.c     **** 
5557:src/xeq.c     **** 
5558:src/xeq.c     **** /*
5559:src/xeq.c     ****  *  We don't allow some commands from a running program
5560:src/xeq.c     ****  */
5561:src/xeq.c     **** int not_running(void) {
5562:src/xeq.c     **** 	if ( Running ) {
5563:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
5564:src/xeq.c     **** 		return 0;
5565:src/xeq.c     **** 	}
5566:src/xeq.c     **** 	return 1;
5567:src/xeq.c     **** }
5568:src/xeq.c     **** 
5569:src/xeq.c     **** /*
5570:src/xeq.c     ****  *  Handle the Running Flag
5571:src/xeq.c     ****  */
5572:src/xeq.c     **** void set_running_off_sst() {
5573:src/xeq.c     **** 	Running = 0;
5574:src/xeq.c     **** }
5575:src/xeq.c     **** 
5576:src/xeq.c     **** void set_running_on_sst() {
5577:src/xeq.c     **** 	Running = 1;
5578:src/xeq.c     **** }
5579:src/xeq.c     **** 
5580:src/xeq.c     **** void set_running_off() {
 3535              		.loc 1 5580 6 view .LVU964
 3536              	.LBB1543:
5581:src/xeq.c     **** 	set_running_off_sst();
 3537              		.loc 1 5581 2 view .LVU965
 3538              	.LBB1544:
 3539              	.LBI1544:
5572:src/xeq.c     **** 	Running = 0;
 3540              		.loc 1 5572 6 view .LVU966
 3541              	.LBB1545:
5573:src/xeq.c     **** }
 3542              		.loc 1 5573 2 view .LVU967
5573:src/xeq.c     **** }
 3543              		.loc 1 5573 10 is_stmt 0 view .LVU968
 3544 0070 084A     		ldr	r2, .L290+8
 3545 0072 1160     		str	r1, [r2]
 3546              	.LBE1545:
 3547              	.LBE1544:
ARM GAS  /tmp/cc0UaEmF.s 			page 175


5582:src/xeq.c     **** 	State.entryp = 0;
 3548              		.loc 1 5582 2 is_stmt 1 view .LVU969
 3549              		.loc 1 5582 15 is_stmt 0 view .LVU970
 3550 0074 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 3551 0078 61F30412 		bfi	r2, r1, #4, #1
 3552 007c 83F8DD27 		strb	r2, [r3, #2013]
5583:src/xeq.c     **** 	dot( RCL_annun, 0);
 3553              		.loc 1 5583 2 is_stmt 1 view .LVU971
 3554              	.LBE1543:
 3555              	.LBE1542:
2064:src/xeq.c     **** 
 3556              		.loc 1 2064 1 is_stmt 0 view .LVU972
 3557 0080 BDE87040 		pop	{r4, r5, r6, lr}
 3558              		.cfi_restore 14
 3559              		.cfi_restore 6
 3560              		.cfi_restore 5
 3561              		.cfi_restore 4
 3562              		.cfi_def_cfa_offset 0
 3563              	.LBB1547:
 3564              	.LBB1546:
 3565              		.loc 1 5583 2 view .LVU973
 3566 0084 8A20     		movs	r0, #138
 3567 0086 FFF7FEBF 		b	dot
 3568              	.LVL265:
 3569              	.L291:
 3570 008a 00BF     		.align	2
 3571              	.L290:
 3572 008c 00000000 		.word	main_ram
 3573 0090 00000000 		.word	RetStk
 3574 0094 00000000 		.word	Running
 3575              	.LBE1546:
 3576              	.LBE1547:
 3577              		.cfi_endproc
 3578              	.LFE150:
 3580              		.section	.text.user_pc,"ax",%progbits
 3581              		.align	1
 3582              		.p2align 2,,3
 3583              		.global	user_pc
 3584              		.syntax unified
 3585              		.thumb
 3586              		.thumb_func
 3587              		.fpu fpv4-sp-d16
 3589              	user_pc:
 3590              	.LVL266:
 3591              	.LFB25:
 485:src/xeq.c     **** 	unsigned int n = 1;
 3592              		.loc 1 485 39 is_stmt 1 view -0
 3593              		.cfi_startproc
 3594              		@ args = 0, pretend = 0, frame = 0
 3595              		@ frame_needed = 0, uses_anonymous_args = 0
 3596              		@ link register save eliminated.
 486:src/xeq.c     **** 	unsigned int base;
 3597              		.loc 1 486 2 view .LVU975
 487:src/xeq.c     **** 
 3598              		.loc 1 487 2 view .LVU976
 490:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3599              		.loc 1 490 2 view .LVU977
ARM GAS  /tmp/cc0UaEmF.s 			page 176


 490:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3600              		.loc 1 490 5 is_stmt 0 view .LVU978
 3601 0000 0346     		mov	r3, r0
 3602 0002 20B1     		cbz	r0, .L293
 490:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3603              		.loc 1 490 17 discriminator 1 view .LVU979
 3604 0004 820B     		lsrs	r2, r0, #14
 490:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3605              		.loc 1 490 14 discriminator 1 view .LVU980
 3606 0006 032A     		cmp	r2, #3
 3607 0008 01D0     		beq	.L293
 3608 000a FFF7FEBF 		b	user_pc.part.0
 3609              	.LVL267:
 3610              	.L293:
 491:src/xeq.c     **** #else
 3611              		.loc 1 491 3 is_stmt 1 view .LVU981
 491:src/xeq.c     **** #else
 3612              		.loc 1 491 24 is_stmt 0 view .LVU982
 3613 000e C3F30D00 		ubfx	r0, r3, #0, #14
 3614              	.LVL268:
 504:src/xeq.c     **** 
 3615              		.loc 1 504 1 view .LVU983
 3616 0012 7047     		bx	lr
 3617              		.cfi_endproc
 3618              	.LFE25:
 3620              		.section	.text.find_user_pc,"ax",%progbits
 3621              		.align	1
 3622              		.p2align 2,,3
 3623              		.global	find_user_pc
 3624              		.syntax unified
 3625              		.thumb
 3626              		.thumb_func
 3627              		.fpu fpv4-sp-d16
 3629              	find_user_pc:
 3630              	.LVL269:
 3631              	.LFB26:
 508:src/xeq.c     **** 	unsigned int upc = state_pc();
 3632              		.loc 1 508 48 is_stmt 1 view -0
 3633              		.cfi_startproc
 3634              		@ args = 0, pretend = 0, frame = 0
 3635              		@ frame_needed = 0, uses_anonymous_args = 0
 509:src/xeq.c     **** 	const int libp = isLIB(upc);
 3636              		.loc 1 509 2 view .LVU985
 508:src/xeq.c     **** 	unsigned int upc = state_pc();
 3637              		.loc 1 508 48 is_stmt 0 view .LVU986
 3638 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3639              		.cfi_def_cfa_offset 24
 3640              		.cfi_offset 3, -24
 3641              		.cfi_offset 4, -20
 3642              		.cfi_offset 5, -16
 3643              		.cfi_offset 6, -12
 3644              		.cfi_offset 7, -8
 3645              		.cfi_offset 14, -4
 509:src/xeq.c     **** 	const int libp = isLIB(upc);
 3646              		.loc 1 509 21 view .LVU987
 3647 0002 124B     		ldr	r3, .L309
 3648 0004 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc0UaEmF.s 			page 177


 3649 0006 B3F8E037 		ldrh	r3, [r3, #2016]
 3650              	.LVL270:
 510:src/xeq.c     **** 	unsigned int base = libp ? startLIB(upc) : 0;
 3651              		.loc 1 510 2 is_stmt 1 view .LVU988
 511:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 3652              		.loc 1 511 2 view .LVU989
 511:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 3653              		.loc 1 511 43 is_stmt 0 view .LVU990
 3654 000a 13F44044 		ands	r4, r3, #49152
 3655              	.LVL271:
 511:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 3656              		.loc 1 511 43 view .LVU991
 3657 000e 1ABF     		itte	ne
 3658 0010 03F44045 		andne	r5, r3, #49152
 3659 0014 0135     		addne	r5, r5, #1
 3660 0016 2546     		moveq	r5, r4
 3661              	.LVL272:
 512:src/xeq.c     **** #ifndef REALBUILD
 3662              		.loc 1 512 2 is_stmt 1 view .LVU992
 514:src/xeq.c     **** 		return addrXROM(target);
 3663              		.loc 1 514 6 is_stmt 0 view .LVU993
 3664 0018 9B0B     		lsrs	r3, r3, #14
 3665              	.LVL273:
 512:src/xeq.c     **** #ifndef REALBUILD
 3666              		.loc 1 512 28 view .LVU994
 3667 001a 003C     		subs	r4, r4, #0
 512:src/xeq.c     **** #ifndef REALBUILD
 3668              		.loc 1 512 28 view .LVU995
 3669 001c 18BF     		it	ne
 3670 001e 0124     		movne	r4, #1
 3671              	.LVL274:
 514:src/xeq.c     **** 		return addrXROM(target);
 3672              		.loc 1 514 2 is_stmt 1 view .LVU996
 514:src/xeq.c     **** 		return addrXROM(target);
 3673              		.loc 1 514 5 is_stmt 0 view .LVU997
 3674 0020 032B     		cmp	r3, #3
 508:src/xeq.c     **** 	unsigned int upc = state_pc();
 3675              		.loc 1 508 48 view .LVU998
 3676 0022 0646     		mov	r6, r0
 514:src/xeq.c     **** 		return addrXROM(target);
 3677              		.loc 1 514 5 view .LVU999
 3678 0024 0ED0     		beq	.L307
 3679              	.LBB1548:
 520:src/xeq.c     **** 			return oldbase;
 3680              		.loc 1 520 7 view .LVU1000
 3681 0026 0A4F     		ldr	r7, .L309+4
 3682 0028 05E0     		b	.L302
 3683              	.LVL275:
 3684              	.L304:
 519:src/xeq.c     **** 		if (PcWrapped)
 3685              		.loc 1 519 10 view .LVU1001
 3686 002a FFF7FEFF 		bl	do_inc
 3687              	.LVL276:
 520:src/xeq.c     **** 			return oldbase;
 3688              		.loc 1 520 6 view .LVU1002
 3689 002e 3B68     		ldr	r3, [r7]
 3690              	.LVL277:
ARM GAS  /tmp/cc0UaEmF.s 			page 178


 520:src/xeq.c     **** 			return oldbase;
 3691              		.loc 1 520 3 is_stmt 1 view .LVU1003
 3692 0030 0134     		adds	r4, r4, #1
 3693              	.LVL278:
 520:src/xeq.c     **** 			return oldbase;
 3694              		.loc 1 520 6 is_stmt 0 view .LVU1004
 3695 0032 2BB9     		cbnz	r3, .L300
 519:src/xeq.c     **** 		if (PcWrapped)
 3696              		.loc 1 519 10 view .LVU1005
 3697 0034 0546     		mov	r5, r0
 3698              	.LVL279:
 3699              	.L302:
 518:src/xeq.c     **** 		base = do_inc(oldbase, 0);
 3700              		.loc 1 518 3 is_stmt 1 view .LVU1006
 519:src/xeq.c     **** 		if (PcWrapped)
 3701              		.loc 1 519 3 view .LVU1007
 519:src/xeq.c     **** 		if (PcWrapped)
 3702              		.loc 1 519 3 is_stmt 0 view .LVU1008
 3703              	.LBE1548:
 517:src/xeq.c     **** 		const unsigned int oldbase = base;
 3704              		.loc 1 517 8 is_stmt 1 view .LVU1009
 517:src/xeq.c     **** 		const unsigned int oldbase = base;
 3705              		.loc 1 517 8 is_stmt 0 view .LVU1010
 3706 0036 A642     		cmp	r6, r4
 3707              	.LBB1549:
 519:src/xeq.c     **** 		if (PcWrapped)
 3708              		.loc 1 519 10 view .LVU1011
 3709 0038 2846     		mov	r0, r5
 3710 003a 4FF00001 		mov	r1, #0
 3711              	.LBE1549:
 517:src/xeq.c     **** 		const unsigned int oldbase = base;
 3712              		.loc 1 517 8 view .LVU1012
 3713 003e F4D8     		bhi	.L304
 3714              	.LVL280:
 3715              	.L300:
 524:src/xeq.c     **** 
 3716              		.loc 1 524 1 view .LVU1013
 3717 0040 2846     		mov	r0, r5
 3718              	.LVL281:
 524:src/xeq.c     **** 
 3719              		.loc 1 524 1 view .LVU1014
 3720 0042 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3721              	.LVL282:
 3722              	.L307:
 515:src/xeq.c     **** #endif
 3723              		.loc 1 515 3 is_stmt 1 view .LVU1015
 515:src/xeq.c     **** #endif
 3724              		.loc 1 515 10 is_stmt 0 view .LVU1016
 3725 0044 40F44045 		orr	r5, r0, #49152
 3726              	.LVL283:
 524:src/xeq.c     **** 
 3727              		.loc 1 524 1 view .LVU1017
 3728 0048 2846     		mov	r0, r5
 3729              	.LVL284:
 524:src/xeq.c     **** 
 3730              		.loc 1 524 1 view .LVU1018
 3731 004a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
ARM GAS  /tmp/cc0UaEmF.s 			page 179


 3732              	.LVL285:
 3733              	.L310:
 524:src/xeq.c     **** 
 3734              		.loc 1 524 1 view .LVU1019
 3735              		.align	2
 3736              	.L309:
 3737 004c 00000000 		.word	main_ram
 3738 0050 00000000 		.word	PcWrapped
 3739              		.cfi_endproc
 3740              	.LFE26:
 3742              		.section	.text.report_err,"ax",%progbits
 3743              		.align	1
 3744              		.p2align 2,,3
 3745              		.global	report_err
 3746              		.syntax unified
 3747              		.thumb
 3748              		.thumb_func
 3749              		.fpu fpv4-sp-d16
 3751              	report_err:
 3752              	.LVL286:
 3753              	.LFB28:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3754              		.loc 1 537 38 is_stmt 1 view -0
 3755              		.cfi_startproc
 3756              		@ args = 0, pretend = 0, frame = 0
 3757              		@ frame_needed = 0, uses_anonymous_args = 0
 538:src/xeq.c     **** 		Error = e;
 3758              		.loc 1 538 2 view .LVU1021
 538:src/xeq.c     **** 		Error = e;
 3759              		.loc 1 538 12 is_stmt 0 view .LVU1022
 3760 0000 064A     		ldr	r2, .L317
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3761              		.loc 1 537 38 view .LVU1023
 3762 0002 10B5     		push	{r4, lr}
 3763              		.cfi_def_cfa_offset 8
 3764              		.cfi_offset 4, -8
 3765              		.cfi_offset 14, -4
 538:src/xeq.c     **** 		Error = e;
 3766              		.loc 1 538 12 view .LVU1024
 3767 0004 1468     		ldr	r4, [r2]
 538:src/xeq.c     **** 		Error = e;
 3768              		.loc 1 538 5 view .LVU1025
 3769 0006 0CB9     		cbnz	r4, .L314
 3770              	.LVL287:
 3771              	.LBB1552:
 3772              	.LBI1552:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3773              		.loc 1 537 5 is_stmt 1 view .LVU1026
 3774              	.LBB1553:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 3775              		.loc 1 539 3 view .LVU1027
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 3776              		.loc 1 539 9 is_stmt 0 view .LVU1028
 3777 0008 1060     		str	r0, [r2]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 3778              		.loc 1 540 3 is_stmt 1 view .LVU1029
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
ARM GAS  /tmp/cc0UaEmF.s 			page 180


 3779              		.loc 1 540 6 is_stmt 0 view .LVU1030
 3780 000a 10B1     		cbz	r0, .L316
 3781              	.LVL288:
 3782              	.L314:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 3783              		.loc 1 540 6 view .LVU1031
 3784              	.LBE1553:
 3785              	.LBE1552:
 545:src/xeq.c     **** }
 3786              		.loc 1 545 9 view .LVU1032
 3787 000c 0124     		movs	r4, #1
 546:src/xeq.c     **** 
 3788              		.loc 1 546 1 view .LVU1033
 3789 000e 2046     		mov	r0, r4
 3790              	.LVL289:
 546:src/xeq.c     **** 
 3791              		.loc 1 546 1 view .LVU1034
 3792 0010 10BD     		pop	{r4, pc}
 3793              	.LVL290:
 3794              	.L316:
 3795              	.LBB1555:
 3796              	.LBB1554:
 541:src/xeq.c     **** 			return 0;
 3797              		.loc 1 541 4 is_stmt 1 view .LVU1035
 3798 0012 FFF7FEFF 		bl	error_message
 3799              	.LVL291:
 542:src/xeq.c     **** 		}
 3800              		.loc 1 542 4 view .LVU1036
 542:src/xeq.c     **** 		}
 3801              		.loc 1 542 4 is_stmt 0 view .LVU1037
 3802              	.LBE1554:
 3803              	.LBE1555:
 546:src/xeq.c     **** 
 3804              		.loc 1 546 1 view .LVU1038
 3805 0016 2046     		mov	r0, r4
 3806 0018 10BD     		pop	{r4, pc}
 3807              	.L318:
 3808 001a 00BF     		.align	2
 3809              	.L317:
 3810 001c 00000000 		.word	Error
 3811              		.cfi_endproc
 3812              	.LFE28:
 3814              		.section	.text.report_warn,"ax",%progbits
 3815              		.align	1
 3816              		.p2align 2,,3
 3817              		.global	report_warn
 3818              		.syntax unified
 3819              		.thumb
 3820              		.thumb_func
 3821              		.fpu fpv4-sp-d16
 3823              	report_warn:
 3824              	.LVL292:
 3825              	.LFB29:
 551:src/xeq.c     **** 	if (Running) {
 3826              		.loc 1 551 39 is_stmt 1 view -0
 3827              		.cfi_startproc
 3828              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc0UaEmF.s 			page 181


 3829              		@ frame_needed = 0, uses_anonymous_args = 0
 552:src/xeq.c     **** 		return report_err(e);
 3830              		.loc 1 552 2 view .LVU1040
 552:src/xeq.c     **** 		return report_err(e);
 3831              		.loc 1 552 6 is_stmt 0 view .LVU1041
 3832 0000 114B     		ldr	r3, .L325
 551:src/xeq.c     **** 	if (Running) {
 3833              		.loc 1 551 39 view .LVU1042
 3834 0002 70B5     		push	{r4, r5, r6, lr}
 3835              		.cfi_def_cfa_offset 16
 3836              		.cfi_offset 4, -16
 3837              		.cfi_offset 5, -12
 3838              		.cfi_offset 6, -8
 3839              		.cfi_offset 14, -4
 552:src/xeq.c     **** 		return report_err(e);
 3840              		.loc 1 552 5 view .LVU1043
 3841 0004 1D68     		ldr	r5, [r3]
 551:src/xeq.c     **** 	if (Running) {
 3842              		.loc 1 551 39 view .LVU1044
 3843 0006 0446     		mov	r4, r0
 552:src/xeq.c     **** 		return report_err(e);
 3844              		.loc 1 552 5 view .LVU1045
 3845 0008 5DB1     		cbz	r5, .L320
 553:src/xeq.c     **** 	}
 3846              		.loc 1 553 3 is_stmt 1 view .LVU1046
 3847              	.LVL293:
 3848              	.LBB1564:
 3849              	.LBI1564:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3850              		.loc 1 537 5 view .LVU1047
 3851              	.LBB1565:
 538:src/xeq.c     **** 		Error = e;
 3852              		.loc 1 538 2 view .LVU1048
 538:src/xeq.c     **** 		Error = e;
 3853              		.loc 1 538 12 is_stmt 0 view .LVU1049
 3854 000a 104B     		ldr	r3, .L325+4
 3855 000c 1D68     		ldr	r5, [r3]
 538:src/xeq.c     **** 		Error = e;
 3856              		.loc 1 538 5 view .LVU1050
 3857 000e 15B1     		cbz	r5, .L321
 3858              	.L323:
 545:src/xeq.c     **** }
 3859              		.loc 1 545 9 view .LVU1051
 3860 0010 0125     		movs	r5, #1
 3861              	.LVL294:
 3862              	.L319:
 545:src/xeq.c     **** }
 3863              		.loc 1 545 9 view .LVU1052
 3864              	.LBE1565:
 3865              	.LBE1564:
 562:src/xeq.c     **** 
 3866              		.loc 1 562 1 view .LVU1053
 3867 0012 2846     		mov	r0, r5
 3868 0014 70BD     		pop	{r4, r5, r6, pc}
 3869              	.LVL295:
 3870              	.L321:
 3871              	.LBB1569:
ARM GAS  /tmp/cc0UaEmF.s 			page 182


 3872              	.LBB1568:
 3873              	.LBB1566:
 3874              	.LBI1566:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3875              		.loc 1 537 5 is_stmt 1 view .LVU1054
 3876              	.LBB1567:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 3877              		.loc 1 539 3 view .LVU1055
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 3878              		.loc 1 539 9 is_stmt 0 view .LVU1056
 3879 0016 1860     		str	r0, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 3880              		.loc 1 540 3 is_stmt 1 view .LVU1057
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 3881              		.loc 1 540 6 is_stmt 0 view .LVU1058
 3882 0018 0028     		cmp	r0, #0
 3883 001a F9D1     		bne	.L323
 541:src/xeq.c     **** 			return 0;
 3884              		.loc 1 541 4 is_stmt 1 view .LVU1059
 3885 001c FFF7FEFF 		bl	error_message
 3886              	.LVL296:
 542:src/xeq.c     **** 		}
 3887              		.loc 1 542 4 view .LVU1060
 542:src/xeq.c     **** 		}
 3888              		.loc 1 542 11 is_stmt 0 view .LVU1061
 3889 0020 F7E7     		b	.L319
 3890              	.LVL297:
 3891              	.L320:
 542:src/xeq.c     **** 		}
 3892              		.loc 1 542 11 view .LVU1062
 3893              	.LBE1567:
 3894              	.LBE1566:
 3895              	.LBE1568:
 3896              	.LBE1569:
 3897              	.LBB1570:
 3898              	.LBI1570:
 551:src/xeq.c     **** 	if (Running) {
 3899              		.loc 1 551 5 is_stmt 1 view .LVU1063
 3900              	.LBB1571:
 555:src/xeq.c     **** #ifndef CONSOLE
 3901              		.loc 1 555 2 view .LVU1064
 3902 0022 FFF7FEFF 		bl	error_message
 3903              	.LVL298:
 557:src/xeq.c     **** 	JustDisplayed = 1;
 3904              		.loc 1 557 2 view .LVU1065
 557:src/xeq.c     **** 	JustDisplayed = 1;
 3905              		.loc 1 557 21 is_stmt 0 view .LVU1066
 3906 0026 0A4A     		ldr	r2, .L325+8
 558:src/xeq.c     **** 	ShowRPN = 1;
 3907              		.loc 1 558 16 view .LVU1067
 3908 0028 0A4E     		ldr	r6, .L325+12
 557:src/xeq.c     **** 	JustDisplayed = 1;
 3909              		.loc 1 557 21 view .LVU1068
 3910 002a D17D     		ldrb	r1, [r2, #23]	@ zero_extendqisi2
 559:src/xeq.c     **** #endif
 3911              		.loc 1 559 10 view .LVU1069
 3912 002c 0A48     		ldr	r0, .L325+16
ARM GAS  /tmp/cc0UaEmF.s 			page 183


 557:src/xeq.c     **** 	JustDisplayed = 1;
 3913              		.loc 1 557 21 view .LVU1070
 3914 002e 65F30411 		bfi	r1, r5, #4, #1
 561:src/xeq.c     **** }
 3915              		.loc 1 561 11 view .LVU1071
 3916 0032 251E     		subs	r5, r4, #0
 558:src/xeq.c     **** 	ShowRPN = 1;
 3917              		.loc 1 558 16 view .LVU1072
 3918 0034 4FF00103 		mov	r3, #1
 557:src/xeq.c     **** 	JustDisplayed = 1;
 3919              		.loc 1 557 21 view .LVU1073
 3920 0038 D175     		strb	r1, [r2, #23]
 558:src/xeq.c     **** 	ShowRPN = 1;
 3921              		.loc 1 558 2 is_stmt 1 view .LVU1074
 561:src/xeq.c     **** }
 3922              		.loc 1 561 11 is_stmt 0 view .LVU1075
 3923 003a 18BF     		it	ne
 3924 003c 0125     		movne	r5, #1
 559:src/xeq.c     **** #endif
 3925              		.loc 1 559 10 view .LVU1076
 3926 003e 0360     		str	r3, [r0]
 558:src/xeq.c     **** 	ShowRPN = 1;
 3927              		.loc 1 558 16 view .LVU1077
 3928 0040 3360     		str	r3, [r6]
 559:src/xeq.c     **** #endif
 3929              		.loc 1 559 2 is_stmt 1 view .LVU1078
 561:src/xeq.c     **** }
 3930              		.loc 1 561 2 view .LVU1079
 3931              	.LVL299:
 561:src/xeq.c     **** }
 3932              		.loc 1 561 2 is_stmt 0 view .LVU1080
 3933              	.LBE1571:
 3934              	.LBE1570:
 562:src/xeq.c     **** 
 3935              		.loc 1 562 1 view .LVU1081
 3936 0042 2846     		mov	r0, r5
 3937 0044 70BD     		pop	{r4, r5, r6, pc}
 3938              	.LVL300:
 3939              	.L326:
 562:src/xeq.c     **** 
 3940              		.loc 1 562 1 view .LVU1082
 3941 0046 00BF     		.align	2
 3942              	.L325:
 3943 0048 00000000 		.word	Running
 3944 004c 00000000 		.word	Error
 3945 0050 00000000 		.word	StateWhileOn
 3946 0054 00000000 		.word	JustDisplayed
 3947 0058 00000000 		.word	ShowRPN
 3948              		.cfi_endproc
 3949              	.LFE29:
 3951              		.section	.text.bad_mode_error,"ax",%progbits
 3952              		.align	1
 3953              		.p2align 2,,3
 3954              		.global	bad_mode_error
 3955              		.syntax unified
 3956              		.thumb
 3957              		.thumb_func
ARM GAS  /tmp/cc0UaEmF.s 			page 184


 3958              		.fpu fpv4-sp-d16
 3960              	bad_mode_error:
 3961              	.LFB30:
 566:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 3962              		.loc 1 566 27 is_stmt 1 view -0
 3963              		.cfi_startproc
 3964              		@ args = 0, pretend = 0, frame = 0
 3965              		@ frame_needed = 0, uses_anonymous_args = 0
 3966              		@ link register save eliminated.
 567:src/xeq.c     **** }
 3967              		.loc 1 567 2 view .LVU1084
 3968              	.LVL301:
 3969              	.LBB1576:
 3970              	.LBI1576:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3971              		.loc 1 537 5 view .LVU1085
 3972              	.LBB1577:
 538:src/xeq.c     **** 		Error = e;
 3973              		.loc 1 538 2 view .LVU1086
 538:src/xeq.c     **** 		Error = e;
 3974              		.loc 1 538 12 is_stmt 0 view .LVU1087
 3975 0000 024B     		ldr	r3, .L329
 538:src/xeq.c     **** 		Error = e;
 3976              		.loc 1 538 5 view .LVU1088
 3977 0002 1A68     		ldr	r2, [r3]
 3978 0004 0AB9     		cbnz	r2, .L327
 3979              	.LVL302:
 3980              	.LBB1578:
 3981              	.LBI1578:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3982              		.loc 1 537 5 is_stmt 1 view .LVU1089
 3983              	.LBB1579:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 3984              		.loc 1 539 3 view .LVU1090
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 3985              		.loc 1 539 9 is_stmt 0 view .LVU1091
 3986 0006 0D22     		movs	r2, #13
 3987 0008 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 3988              		.loc 1 540 3 is_stmt 1 view .LVU1092
 3989              	.LVL303:
 3990              	.L327:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 3991              		.loc 1 540 3 is_stmt 0 view .LVU1093
 3992              	.LBE1579:
 3993              	.LBE1578:
 3994              	.LBE1577:
 3995              	.LBE1576:
 568:src/xeq.c     **** 
 3996              		.loc 1 568 1 view .LVU1094
 3997 000a 7047     		bx	lr
 3998              	.L330:
 3999              		.align	2
 4000              	.L329:
 4001 000c 00000000 		.word	Error
 4002              		.cfi_endproc
 4003              	.LFE30:
ARM GAS  /tmp/cc0UaEmF.s 			page 185


 4005              		.section	.text.cmderr,"ax",%progbits
 4006              		.align	1
 4007              		.p2align 2,,3
 4008              		.global	cmderr
 4009              		.syntax unified
 4010              		.thumb
 4011              		.thumb_func
 4012              		.fpu fpv4-sp-d16
 4014              	cmderr:
 4015              	.LVL304:
 4016              	.LFB31:
 572:src/xeq.c     **** 	report_err(arg);
 4017              		.loc 1 572 45 is_stmt 1 view -0
 4018              		.cfi_startproc
 4019              		@ args = 0, pretend = 0, frame = 0
 4020              		@ frame_needed = 0, uses_anonymous_args = 0
 4021              		@ link register save eliminated.
 573:src/xeq.c     **** }
 4022              		.loc 1 573 2 view .LVU1096
 4023              	.LBB1584:
 4024              	.LBB1585:
 538:src/xeq.c     **** 		Error = e;
 4025              		.loc 1 538 12 is_stmt 0 view .LVU1097
 4026 0000 034A     		ldr	r2, .L336
 538:src/xeq.c     **** 		Error = e;
 4027              		.loc 1 538 5 view .LVU1098
 4028 0002 1168     		ldr	r1, [r2]
 4029              	.LVL305:
 538:src/xeq.c     **** 		Error = e;
 4030              		.loc 1 538 5 view .LVU1099
 4031              	.LBE1585:
 4032              	.LBI1584:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4033              		.loc 1 537 5 is_stmt 1 view .LVU1100
 4034              	.LBB1590:
 538:src/xeq.c     **** 		Error = e;
 4035              		.loc 1 538 2 view .LVU1101
 538:src/xeq.c     **** 		Error = e;
 4036              		.loc 1 538 5 is_stmt 0 view .LVU1102
 4037 0004 09B9     		cbnz	r1, .L331
 4038              	.LVL306:
 4039              	.LBB1586:
 4040              	.LBI1586:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4041              		.loc 1 537 5 is_stmt 1 view .LVU1103
 4042              	.LBB1587:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 4043              		.loc 1 539 3 view .LVU1104
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 4044              		.loc 1 539 9 is_stmt 0 view .LVU1105
 4045 0006 1060     		str	r0, [r2]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 4046              		.loc 1 540 3 is_stmt 1 view .LVU1106
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 4047              		.loc 1 540 6 is_stmt 0 view .LVU1107
 4048 0008 00B1     		cbz	r0, .L335
 4049              	.LVL307:
ARM GAS  /tmp/cc0UaEmF.s 			page 186


 4050              	.L331:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 4051              		.loc 1 540 6 view .LVU1108
 4052              	.LBE1587:
 4053              	.LBE1586:
 4054              	.LBE1590:
 4055              	.LBE1584:
 574:src/xeq.c     **** 
 4056              		.loc 1 574 1 view .LVU1109
 4057 000a 7047     		bx	lr
 4058              	.LVL308:
 4059              	.L335:
 4060              	.LBB1592:
 4061              	.LBB1591:
 4062              	.LBB1589:
 4063              	.LBB1588:
 541:src/xeq.c     **** 			return 0;
 4064              		.loc 1 541 4 is_stmt 1 view .LVU1110
 4065 000c FFF7FEBF 		b	error_message
 4066              	.LVL309:
 4067              	.L337:
 541:src/xeq.c     **** 			return 0;
 4068              		.loc 1 541 4 is_stmt 0 view .LVU1111
 4069              		.align	2
 4070              	.L336:
 4071 0010 00000000 		.word	Error
 4072              	.LBE1588:
 4073              	.LBE1589:
 4074              	.LBE1591:
 4075              	.LBE1592:
 4076              		.cfi_endproc
 4077              	.LFE31:
 4079              		.section	.text.cmdmsg,"ax",%progbits
 4080              		.align	1
 4081              		.p2align 2,,3
 4082              		.global	cmdmsg
 4083              		.syntax unified
 4084              		.thumb
 4085              		.thumb_func
 4086              		.fpu fpv4-sp-d16
 4088              	cmdmsg:
 4089              	.LVL310:
 4090              	.LFB32:
 578:src/xeq.c     **** 	error_message(arg);
 4091              		.loc 1 578 45 is_stmt 1 view -0
 4092              		.cfi_startproc
 4093              		@ args = 0, pretend = 0, frame = 0
 4094              		@ frame_needed = 0, uses_anonymous_args = 0
 4095              		@ link register save eliminated.
 579:src/xeq.c     **** }
 4096              		.loc 1 579 2 view .LVU1113
 4097 0000 FFF7FEBF 		b	error_message
 4098              	.LVL311:
 579:src/xeq.c     **** }
 4099              		.loc 1 579 2 is_stmt 0 view .LVU1114
 4100              		.cfi_endproc
 4101              	.LFE32:
ARM GAS  /tmp/cc0UaEmF.s 			page 187


 4103              		.section	.text.rarg_roundingmode,"ax",%progbits
 4104              		.align	1
 4105              		.p2align 2,,3
 4106              		.global	rarg_roundingmode
 4107              		.syntax unified
 4108              		.thumb
 4109              		.thumb_func
 4110              		.fpu fpv4-sp-d16
 4112              	rarg_roundingmode:
 4113              	.LVL312:
 4114              	.LFB35:
 614:src/xeq.c     **** 	UState.rounding_mode = arg;
 4115              		.loc 1 614 56 is_stmt 1 view -0
 4116              		.cfi_startproc
 4117              		@ args = 0, pretend = 0, frame = 0
 4118              		@ frame_needed = 0, uses_anonymous_args = 0
 4119              		@ link register save eliminated.
 615:src/xeq.c     **** }
 4120              		.loc 1 615 2 view .LVU1116
 615:src/xeq.c     **** }
 4121              		.loc 1 615 23 is_stmt 0 view .LVU1117
 4122 0000 044B     		ldr	r3, .L340
 4123 0002 1B68     		ldr	r3, [r3]
 4124 0004 93F8EB27 		ldrb	r2, [r3, #2027]	@ zero_extendqisi2
 4125 0008 60F30612 		bfi	r2, r0, #4, #3
 4126              	.LVL313:
 615:src/xeq.c     **** }
 4127              		.loc 1 615 23 view .LVU1118
 4128 000c 83F8EB27 		strb	r2, [r3, #2027]
 616:src/xeq.c     **** 
 4129              		.loc 1 616 1 view .LVU1119
 4130 0010 7047     		bx	lr
 4131              	.L341:
 4132 0012 00BF     		.align	2
 4133              	.L340:
 4134 0014 00000000 		.word	main_ram
 4135              		.cfi_endproc
 4136              	.LFE35:
 4138              		.section	.text.packed_from_number,"ax",%progbits
 4139              		.align	1
 4140              		.p2align 2,,3
 4141              		.global	packed_from_number
 4142              		.syntax unified
 4143              		.thumb
 4144              		.thumb_func
 4145              		.fpu fpv4-sp-d16
 4147              	packed_from_number:
 4148              	.LVL314:
 4149              	.LFB36:
 622:src/xeq.c     **** 	decContext ctx64;
 4150              		.loc 1 622 59 is_stmt 1 view -0
 4151              		.cfi_startproc
 4152              		@ args = 0, pretend = 0, frame = 24
 4153              		@ frame_needed = 0, uses_anonymous_args = 0
 623:src/xeq.c     **** 
 4154              		.loc 1 623 2 view .LVU1121
 625:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
ARM GAS  /tmp/cc0UaEmF.s 			page 188


 4155              		.loc 1 625 2 view .LVU1122
 622:src/xeq.c     **** 	decContext ctx64;
 4156              		.loc 1 622 59 is_stmt 0 view .LVU1123
 4157 0000 70B5     		push	{r4, r5, r6, lr}
 4158              		.cfi_def_cfa_offset 16
 4159              		.cfi_offset 4, -16
 4160              		.cfi_offset 5, -12
 4161              		.cfi_offset 6, -8
 4162              		.cfi_offset 14, -4
 4163 0002 86B0     		sub	sp, sp, #24
 4164              		.cfi_def_cfa_offset 40
 622:src/xeq.c     **** 	decContext ctx64;
 4165              		.loc 1 622 59 view .LVU1124
 4166 0004 0446     		mov	r4, r0
 4167 0006 0D46     		mov	r5, r1
 625:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4168              		.loc 1 625 2 view .LVU1125
 4169 0008 6846     		mov	r0, sp
 4170              	.LVL315:
 625:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4171              		.loc 1 625 2 view .LVU1126
 4172 000a 4021     		movs	r1, #64
 4173              	.LVL316:
 625:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4174              		.loc 1 625 2 view .LVU1127
 4175 000c FFF7FEFF 		bl	decContextDefault
 4176              	.LVL317:
 626:src/xeq.c     **** 	decimal64FromNumber(r, x, &ctx64);
 4177              		.loc 1 626 2 is_stmt 1 view .LVU1128
 4178              	.LBB1593:
 4179              	.LBI1593:
 601:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 4180              		.loc 1 601 22 view .LVU1129
 4181              	.LBB1594:
 602:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 4182              		.loc 1 602 2 view .LVU1130
 607:src/xeq.c     **** }
 4183              		.loc 1 607 2 view .LVU1131
 607:src/xeq.c     **** }
 4184              		.loc 1 607 37 is_stmt 0 view .LVU1132
 4185 0010 084B     		ldr	r3, .L344
 607:src/xeq.c     **** }
 4186              		.loc 1 607 9 view .LVU1133
 4187 0012 094E     		ldr	r6, .L344+4
 607:src/xeq.c     **** }
 4188              		.loc 1 607 37 view .LVU1134
 4189 0014 1B68     		ldr	r3, [r3]
 4190 0016 93F8EB37 		ldrb	r3, [r3, #2027]	@ zero_extendqisi2
 4191 001a C3F30213 		ubfx	r3, r3, #4, #3
 4192              	.LBE1594:
 4193              	.LBE1593:
 627:src/xeq.c     **** }
 4194              		.loc 1 627 2 view .LVU1135
 4195 001e 2946     		mov	r1, r5
 626:src/xeq.c     **** 	decimal64FromNumber(r, x, &ctx64);
 4196              		.loc 1 626 14 view .LVU1136
 4197 0020 F35C     		ldrb	r3, [r6, r3]	@ zero_extendqisi2
ARM GAS  /tmp/cc0UaEmF.s 			page 189


 4198 0022 8DF80C30 		strb	r3, [sp, #12]
 627:src/xeq.c     **** }
 4199              		.loc 1 627 2 is_stmt 1 view .LVU1137
 4200 0026 2046     		mov	r0, r4
 4201 0028 6A46     		mov	r2, sp
 4202 002a FFF7FEFF 		bl	decimal64FromNumber
 4203              	.LVL318:
 628:src/xeq.c     **** 
 4204              		.loc 1 628 1 is_stmt 0 view .LVU1138
 4205 002e 06B0     		add	sp, sp, #24
 4206              		.cfi_def_cfa_offset 16
 4207              		@ sp needed
 4208 0030 70BD     		pop	{r4, r5, r6, pc}
 4209              	.LVL319:
 4210              	.L345:
 628:src/xeq.c     **** 
 4211              		.loc 1 628 1 view .LVU1139
 4212 0032 00BF     		.align	2
 4213              	.L344:
 4214 0034 00000000 		.word	main_ram
 4215 0038 00000000 		.word	.LANCHOR1
 4216              		.cfi_endproc
 4217              	.LFE36:
 4219              		.section	.text.packed128_from_number,"ax",%progbits
 4220              		.align	1
 4221              		.p2align 2,,3
 4222              		.global	packed128_from_number
 4223              		.syntax unified
 4224              		.thumb
 4225              		.thumb_func
 4226              		.fpu fpv4-sp-d16
 4228              	packed128_from_number:
 4229              	.LVL320:
 4230              	.LFB37:
 630:src/xeq.c     **** 	decContext ctx128;
 4231              		.loc 1 630 63 is_stmt 1 view -0
 4232              		.cfi_startproc
 4233              		@ args = 0, pretend = 0, frame = 24
 4234              		@ frame_needed = 0, uses_anonymous_args = 0
 631:src/xeq.c     **** 
 4235              		.loc 1 631 2 view .LVU1141
 633:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4236              		.loc 1 633 2 view .LVU1142
 630:src/xeq.c     **** 	decContext ctx128;
 4237              		.loc 1 630 63 is_stmt 0 view .LVU1143
 4238 0000 70B5     		push	{r4, r5, r6, lr}
 4239              		.cfi_def_cfa_offset 16
 4240              		.cfi_offset 4, -16
 4241              		.cfi_offset 5, -12
 4242              		.cfi_offset 6, -8
 4243              		.cfi_offset 14, -4
 4244 0002 86B0     		sub	sp, sp, #24
 4245              		.cfi_def_cfa_offset 40
 630:src/xeq.c     **** 	decContext ctx128;
 4246              		.loc 1 630 63 view .LVU1144
 4247 0004 0446     		mov	r4, r0
 4248 0006 0D46     		mov	r5, r1
ARM GAS  /tmp/cc0UaEmF.s 			page 190


 633:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4249              		.loc 1 633 2 view .LVU1145
 4250 0008 6846     		mov	r0, sp
 4251              	.LVL321:
 633:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4252              		.loc 1 633 2 view .LVU1146
 4253 000a 8021     		movs	r1, #128
 4254              	.LVL322:
 633:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4255              		.loc 1 633 2 view .LVU1147
 4256 000c FFF7FEFF 		bl	decContextDefault
 4257              	.LVL323:
 634:src/xeq.c     **** 	decimal128FromNumber(r, x, &ctx128);
 4258              		.loc 1 634 2 is_stmt 1 view .LVU1148
 4259              	.LBB1595:
 4260              	.LBI1595:
 601:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 4261              		.loc 1 601 22 view .LVU1149
 4262              	.LBB1596:
 602:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 4263              		.loc 1 602 2 view .LVU1150
 607:src/xeq.c     **** }
 4264              		.loc 1 607 2 view .LVU1151
 607:src/xeq.c     **** }
 4265              		.loc 1 607 37 is_stmt 0 view .LVU1152
 4266 0010 084B     		ldr	r3, .L348
 607:src/xeq.c     **** }
 4267              		.loc 1 607 9 view .LVU1153
 4268 0012 094E     		ldr	r6, .L348+4
 607:src/xeq.c     **** }
 4269              		.loc 1 607 37 view .LVU1154
 4270 0014 1B68     		ldr	r3, [r3]
 4271 0016 93F8EB37 		ldrb	r3, [r3, #2027]	@ zero_extendqisi2
 4272 001a C3F30213 		ubfx	r3, r3, #4, #3
 4273              	.LBE1596:
 4274              	.LBE1595:
 635:src/xeq.c     **** }
 4275              		.loc 1 635 2 view .LVU1155
 4276 001e 2946     		mov	r1, r5
 634:src/xeq.c     **** 	decimal128FromNumber(r, x, &ctx128);
 4277              		.loc 1 634 15 view .LVU1156
 4278 0020 F35C     		ldrb	r3, [r6, r3]	@ zero_extendqisi2
 4279 0022 8DF80C30 		strb	r3, [sp, #12]
 635:src/xeq.c     **** }
 4280              		.loc 1 635 2 is_stmt 1 view .LVU1157
 4281 0026 2046     		mov	r0, r4
 4282 0028 6A46     		mov	r2, sp
 4283 002a FFF7FEFF 		bl	decimal128FromNumber
 4284              	.LVL324:
 636:src/xeq.c     **** 
 4285              		.loc 1 636 1 is_stmt 0 view .LVU1158
 4286 002e 06B0     		add	sp, sp, #24
 4287              		.cfi_def_cfa_offset 16
 4288              		@ sp needed
 4289 0030 70BD     		pop	{r4, r5, r6, pc}
 4290              	.LVL325:
 4291              	.L349:
ARM GAS  /tmp/cc0UaEmF.s 			page 191


 636:src/xeq.c     **** 
 4292              		.loc 1 636 1 view .LVU1159
 4293 0032 00BF     		.align	2
 4294              	.L348:
 4295 0034 00000000 		.word	main_ram
 4296 0038 00000000 		.word	.LANCHOR1
 4297              		.cfi_endproc
 4298              	.LFE37:
 4300              		.section	.text.check_special,"ax",%progbits
 4301              		.align	1
 4302              		.p2align 2,,3
 4303              		.syntax unified
 4304              		.thumb
 4305              		.thumb_func
 4306              		.fpu fpv4-sp-d16
 4308              	check_special:
 4309              	.LVL326:
 4310              	.LFB41:
 675:src/xeq.c     **** 	decNumber y;
 4311              		.loc 1 675 46 is_stmt 1 view -0
 4312              		.cfi_startproc
 4313              		@ args = 0, pretend = 0, frame = 64
 4314              		@ frame_needed = 0, uses_anonymous_args = 0
 676:src/xeq.c     **** 	decimal64 z;
 4315              		.loc 1 676 2 view .LVU1161
 677:src/xeq.c     **** 	decimal128 d;
 4316              		.loc 1 677 2 view .LVU1162
 678:src/xeq.c     **** 	if (is_dblmode()) {
 4317              		.loc 1 678 2 view .LVU1163
 679:src/xeq.c     **** 		packed128_from_number(&d, x);
 4318              		.loc 1 679 2 view .LVU1164
 4319              	.LBB1613:
 4320              	.LBI1613:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4321              		.loc 1 932 5 view .LVU1165
 4322              	.LBB1614:
 933:src/xeq.c     **** }
 4323              		.loc 1 933 2 view .LVU1166
 933:src/xeq.c     **** }
 4324              		.loc 1 933 24 is_stmt 0 view .LVU1167
 4325 0000 274B     		ldr	r3, .L364
 4326 0002 1B68     		ldr	r3, [r3]
 4327              	.LBE1614:
 4328              	.LBE1613:
 675:src/xeq.c     **** 	decNumber y;
 4329              		.loc 1 675 46 view .LVU1168
 4330 0004 00B5     		push	{lr}
 4331              		.cfi_def_cfa_offset 4
 4332              		.cfi_offset 14, -4
 4333              	.LBB1616:
 4334              	.LBB1615:
 933:src/xeq.c     **** }
 4335              		.loc 1 933 24 view .LVU1169
 4336 0006 B3F8E827 		ldrh	r2, [r3, #2024]
 4337 000a 44F20103 		movw	r3, #16385
 4338              	.LBE1615:
 4339              	.LBE1616:
ARM GAS  /tmp/cc0UaEmF.s 			page 192


 679:src/xeq.c     **** 		packed128_from_number(&d, x);
 4340              		.loc 1 679 5 view .LVU1170
 4341 000e 1340     		ands	r3, r3, r2
 4342 0010 B3F5804F 		cmp	r3, #16384
 675:src/xeq.c     **** 	decNumber y;
 4343              		.loc 1 675 46 view .LVU1171
 4344 0014 91B0     		sub	sp, sp, #68
 4345              		.cfi_def_cfa_offset 72
 675:src/xeq.c     **** 	decNumber y;
 4346              		.loc 1 675 46 view .LVU1172
 4347 0016 0146     		mov	r1, r0
 679:src/xeq.c     **** 		packed128_from_number(&d, x);
 4348              		.loc 1 679 5 view .LVU1173
 4349 0018 0FD0     		beq	.L362
 685:src/xeq.c     **** 		decimal64ToNumber(&z, &y);
 4350              		.loc 1 685 3 is_stmt 1 view .LVU1174
 4351 001a 01A8     		add	r0, sp, #4
 4352              	.LVL327:
 685:src/xeq.c     **** 		decimal64ToNumber(&z, &y);
 4353              		.loc 1 685 3 is_stmt 0 view .LVU1175
 4354 001c FFF7FEFF 		bl	packed_from_number
 4355              	.LVL328:
 686:src/xeq.c     **** 	}
 4356              		.loc 1 686 3 is_stmt 1 view .LVU1176
 4357 0020 01A8     		add	r0, sp, #4
 4358 0022 07A9     		add	r1, sp, #28
 4359 0024 FFF7FEFF 		bl	decimal64ToNumber
 4360              	.LVL329:
 688:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4361              		.loc 1 688 2 view .LVU1177
 688:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4362              		.loc 1 688 5 is_stmt 0 view .LVU1178
 4363 0028 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 4364 002c 13F0700F 		tst	r3, #112
 4365 0030 0FD1     		bne	.L353
 4366              	.L355:
 699:src/xeq.c     **** }
 4367              		.loc 1 699 9 view .LVU1179
 4368 0032 0020     		movs	r0, #0
 4369              	.L350:
 700:src/xeq.c     **** 
 4370              		.loc 1 700 1 view .LVU1180
 4371 0034 11B0     		add	sp, sp, #68
 4372              		.cfi_remember_state
 4373              		.cfi_def_cfa_offset 4
 4374              		@ sp needed
 4375 0036 5DF804FB 		ldr	pc, [sp], #4
 4376              	.LVL330:
 4377              	.L362:
 4378              		.cfi_restore_state
 680:src/xeq.c     **** 		decimal128ToNumber(&d, &y);
 4379              		.loc 1 680 3 is_stmt 1 view .LVU1181
 4380 003a 03A8     		add	r0, sp, #12
 4381              	.LVL331:
 680:src/xeq.c     **** 		decimal128ToNumber(&d, &y);
 4382              		.loc 1 680 3 is_stmt 0 view .LVU1182
 4383 003c FFF7FEFF 		bl	packed128_from_number
ARM GAS  /tmp/cc0UaEmF.s 			page 193


 4384              	.LVL332:
 681:src/xeq.c     **** 	}
 4385              		.loc 1 681 3 is_stmt 1 view .LVU1183
 4386 0040 03A8     		add	r0, sp, #12
 4387 0042 07A9     		add	r1, sp, #28
 4388 0044 FFF7FEFF 		bl	decimal128ToNumber
 4389              	.LVL333:
 688:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4390              		.loc 1 688 2 view .LVU1184
 688:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4391              		.loc 1 688 5 is_stmt 0 view .LVU1185
 4392 0048 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 4393 004c 13F0700F 		tst	r3, #112
 4394 0050 EFD0     		beq	.L355
 4395              	.L353:
 689:src/xeq.c     **** 			if (decNumberIsNaN(&y))
 4396              		.loc 1 689 3 is_stmt 1 view .LVU1186
 4397              	.LVL334:
 4398              	.LBB1617:
 4399              	.LBI1617:
3343:src/xeq.c     **** 	unsigned short mask;
 4400              		.loc 1 3343 5 view .LVU1187
 4401              	.LBB1618:
3344:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
 4402              		.loc 1 3344 2 view .LVU1188
3345:src/xeq.c     **** 
 4403              		.loc 1 3345 2 view .LVU1189
3345:src/xeq.c     **** 
 4404              		.loc 1 3345 34 is_stmt 0 view .LVU1190
 4405 0052 0DF10201 		add	r1, sp, #2
 4406 0056 6B20     		movs	r0, #107
 4407 0058 FFF7FEFF 		bl	flag_word
 4408              	.LVL335:
3347:src/xeq.c     **** }
 4409              		.loc 1 3347 2 is_stmt 1 view .LVU1191
3347:src/xeq.c     **** }
 4410              		.loc 1 3347 24 is_stmt 0 view .LVU1192
 4411 005c BDF80230 		ldrh	r3, [sp, #2]
 4412 0060 0288     		ldrh	r2, [r0]
 4413              	.LBE1618:
 4414              	.LBE1617:
 689:src/xeq.c     **** 			if (decNumberIsNaN(&y))
 4415              		.loc 1 689 6 view .LVU1193
 4416 0062 1A42     		tst	r2, r3
 4417 0064 E5D1     		bne	.L355
 690:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 4418              		.loc 1 690 4 is_stmt 1 view .LVU1194
 690:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 4419              		.loc 1 690 8 is_stmt 0 view .LVU1195
 4420 0066 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 690:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 4421              		.loc 1 690 7 view .LVU1196
 4422 006a 13F0300F 		tst	r3, #48
 4423 006e 06D0     		beq	.L356
 691:src/xeq.c     **** 			else if (decNumberIsNegative(&y))
 4424              		.loc 1 691 5 is_stmt 1 view .LVU1197
 4425              	.LVL336:
ARM GAS  /tmp/cc0UaEmF.s 			page 194


 4426              	.LBB1619:
 4427              	.LBI1619:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4428              		.loc 1 537 5 view .LVU1198
 4429              	.LBB1620:
 538:src/xeq.c     **** 		Error = e;
 4430              		.loc 1 538 2 view .LVU1199
 538:src/xeq.c     **** 		Error = e;
 4431              		.loc 1 538 12 is_stmt 0 view .LVU1200
 4432 0070 0C4B     		ldr	r3, .L364+4
 538:src/xeq.c     **** 		Error = e;
 4433              		.loc 1 538 5 view .LVU1201
 4434 0072 1A68     		ldr	r2, [r3]
 4435              	.LBB1621:
 4436              	.LBB1622:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 4437              		.loc 1 539 9 view .LVU1202
 4438 0074 0120     		movs	r0, #1
 4439              	.LBE1622:
 4440              	.LBE1621:
 538:src/xeq.c     **** 		Error = e;
 4441              		.loc 1 538 5 view .LVU1203
 4442 0076 002A     		cmp	r2, #0
 4443 0078 DCD1     		bne	.L350
 4444              	.LVL337:
 4445              	.LBB1624:
 4446              	.LBI1621:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4447              		.loc 1 537 5 is_stmt 1 view .LVU1204
 4448              	.LBB1623:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 4449              		.loc 1 539 3 view .LVU1205
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 4450              		.loc 1 539 9 is_stmt 0 view .LVU1206
 4451 007a 1860     		str	r0, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 4452              		.loc 1 540 3 is_stmt 1 view .LVU1207
 4453 007c DAE7     		b	.L350
 4454              	.LVL338:
 4455              	.L356:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 4456              		.loc 1 540 3 is_stmt 0 view .LVU1208
 4457              	.LBE1623:
 4458              	.LBE1624:
 4459              	.LBE1620:
 4460              	.LBE1619:
 692:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 4461              		.loc 1 692 9 is_stmt 1 view .LVU1209
 692:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 4462              		.loc 1 692 12 is_stmt 0 view .LVU1210
 4463 007e 13F0800F 		tst	r3, #128
 4464              	.LBB1625:
 4465              	.LBB1626:
 538:src/xeq.c     **** 		Error = e;
 4466              		.loc 1 538 12 view .LVU1211
 4467 0082 084B     		ldr	r3, .L364+4
 538:src/xeq.c     **** 		Error = e;
ARM GAS  /tmp/cc0UaEmF.s 			page 195


 4468              		.loc 1 538 5 view .LVU1212
 4469 0084 1A68     		ldr	r2, [r3]
 4470              	.LBE1626:
 4471              	.LBE1625:
 692:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 4472              		.loc 1 692 12 view .LVU1213
 4473 0086 04D1     		bne	.L363
 695:src/xeq.c     **** 			return 1;
 4474              		.loc 1 695 5 is_stmt 1 view .LVU1214
 4475              	.LVL339:
 4476              	.LBB1630:
 4477              	.LBI1630:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4478              		.loc 1 537 5 view .LVU1215
 4479              	.LBB1631:
 538:src/xeq.c     **** 		Error = e;
 4480              		.loc 1 538 2 view .LVU1216
 538:src/xeq.c     **** 		Error = e;
 4481              		.loc 1 538 5 is_stmt 0 view .LVU1217
 4482 0088 42B9     		cbnz	r2, .L360
 4483              	.LVL340:
 4484              	.LBB1632:
 4485              	.LBI1632:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4486              		.loc 1 537 5 is_stmt 1 view .LVU1218
 4487              	.LBB1633:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 4488              		.loc 1 539 3 view .LVU1219
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 4489              		.loc 1 539 9 is_stmt 0 view .LVU1220
 4490 008a 0422     		movs	r2, #4
 4491 008c 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 4492              		.loc 1 540 3 is_stmt 1 view .LVU1221
 4493              	.LBE1633:
 4494              	.LBE1632:
 4495              	.LBE1631:
 4496              	.LBE1630:
 696:src/xeq.c     **** 		}
 4497              		.loc 1 696 11 is_stmt 0 view .LVU1222
 4498 008e 0120     		movs	r0, #1
 4499 0090 D0E7     		b	.L350
 4500              	.LVL341:
 4501              	.L363:
 693:src/xeq.c     **** 			else
 4502              		.loc 1 693 5 is_stmt 1 view .LVU1223
 4503              	.LBB1634:
 4504              	.LBI1625:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4505              		.loc 1 537 5 view .LVU1224
 4506              	.LBB1629:
 538:src/xeq.c     **** 		Error = e;
 4507              		.loc 1 538 2 view .LVU1225
 538:src/xeq.c     **** 		Error = e;
 4508              		.loc 1 538 5 is_stmt 0 view .LVU1226
 4509 0092 1AB9     		cbnz	r2, .L360
 4510              	.LVL342:
ARM GAS  /tmp/cc0UaEmF.s 			page 196


 4511              	.LBB1627:
 4512              	.LBI1627:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4513              		.loc 1 537 5 is_stmt 1 view .LVU1227
 4514              	.LBB1628:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 4515              		.loc 1 539 3 view .LVU1228
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 4516              		.loc 1 539 9 is_stmt 0 view .LVU1229
 4517 0094 0522     		movs	r2, #5
 4518 0096 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 4519              		.loc 1 540 3 is_stmt 1 view .LVU1230
 4520              	.LBE1628:
 4521              	.LBE1627:
 4522              	.LBE1629:
 4523              	.LBE1634:
 696:src/xeq.c     **** 		}
 4524              		.loc 1 696 11 is_stmt 0 view .LVU1231
 4525 0098 0120     		movs	r0, #1
 4526 009a CBE7     		b	.L350
 4527              	.LVL343:
 4528              	.L360:
 696:src/xeq.c     **** 		}
 4529              		.loc 1 696 11 view .LVU1232
 4530 009c 0120     		movs	r0, #1
 4531 009e C9E7     		b	.L350
 4532              	.L365:
 4533              		.align	2
 4534              	.L364:
 4535 00a0 00000000 		.word	main_ram
 4536 00a4 00000000 		.word	Error
 4537              		.cfi_endproc
 4538              	.LFE41:
 4540              		.section	.text.packed_from_packed128,"ax",%progbits
 4541              		.align	1
 4542              		.p2align 2,,3
 4543              		.global	packed_from_packed128
 4544              		.syntax unified
 4545              		.thumb
 4546              		.thumb_func
 4547              		.fpu fpv4-sp-d16
 4549              	packed_from_packed128:
 4550              	.LVL344:
 4551              	.LFB38:
 639:src/xeq.c     **** 	decNumber temp;
 4552              		.loc 1 639 63 is_stmt 1 view -0
 4553              		.cfi_startproc
 4554              		@ args = 0, pretend = 0, frame = 40
 4555              		@ frame_needed = 0, uses_anonymous_args = 0
 640:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 4556              		.loc 1 640 2 view .LVU1234
 641:src/xeq.c     **** }
 4557              		.loc 1 641 2 view .LVU1235
 639:src/xeq.c     **** 	decNumber temp;
 4558              		.loc 1 639 63 is_stmt 0 view .LVU1236
 4559 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/cc0UaEmF.s 			page 197


 4560              		.cfi_def_cfa_offset 8
 4561              		.cfi_offset 4, -8
 4562              		.cfi_offset 14, -4
 4563 0002 8AB0     		sub	sp, sp, #40
 4564              		.cfi_def_cfa_offset 48
 639:src/xeq.c     **** 	decNumber temp;
 4565              		.loc 1 639 63 view .LVU1237
 4566 0004 0446     		mov	r4, r0
 641:src/xeq.c     **** }
 4567              		.loc 1 641 24 view .LVU1238
 4568 0006 0846     		mov	r0, r1
 4569              	.LVL345:
 641:src/xeq.c     **** }
 4570              		.loc 1 641 24 view .LVU1239
 4571 0008 01A9     		add	r1, sp, #4
 4572              	.LVL346:
 641:src/xeq.c     **** }
 4573              		.loc 1 641 24 view .LVU1240
 4574 000a FFF7FEFF 		bl	decimal128ToNumber
 4575              	.LVL347:
 641:src/xeq.c     **** }
 4576              		.loc 1 641 24 view .LVU1241
 4577 000e 0146     		mov	r1, r0
 641:src/xeq.c     **** }
 4578              		.loc 1 641 2 view .LVU1242
 4579 0010 2046     		mov	r0, r4
 4580 0012 FFF7FEFF 		bl	packed_from_number
 4581              	.LVL348:
 642:src/xeq.c     **** 
 4582              		.loc 1 642 1 view .LVU1243
 4583 0016 0AB0     		add	sp, sp, #40
 4584              		.cfi_def_cfa_offset 8
 4585              		@ sp needed
 4586 0018 10BD     		pop	{r4, pc}
 642:src/xeq.c     **** 
 4587              		.loc 1 642 1 view .LVU1244
 4588              		.cfi_endproc
 4589              	.LFE38:
 4591 001a 00BF     		.section	.text.packed128_from_packed,"ax",%progbits
 4592              		.align	1
 4593              		.p2align 2,,3
 4594              		.global	packed128_from_packed
 4595              		.syntax unified
 4596              		.thumb
 4597              		.thumb_func
 4598              		.fpu fpv4-sp-d16
 4600              	packed128_from_packed:
 4601              	.LVL349:
 4602              	.LFB39:
 645:src/xeq.c     **** 	decNumber temp;
 4603              		.loc 1 645 63 is_stmt 1 view -0
 4604              		.cfi_startproc
 4605              		@ args = 0, pretend = 0, frame = 40
 4606              		@ frame_needed = 0, uses_anonymous_args = 0
 646:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 4607              		.loc 1 646 2 view .LVU1246
 647:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 198


 4608              		.loc 1 647 2 view .LVU1247
 645:src/xeq.c     **** 	decNumber temp;
 4609              		.loc 1 645 63 is_stmt 0 view .LVU1248
 4610 0000 10B5     		push	{r4, lr}
 4611              		.cfi_def_cfa_offset 8
 4612              		.cfi_offset 4, -8
 4613              		.cfi_offset 14, -4
 4614 0002 8AB0     		sub	sp, sp, #40
 4615              		.cfi_def_cfa_offset 48
 645:src/xeq.c     **** 	decNumber temp;
 4616              		.loc 1 645 63 view .LVU1249
 4617 0004 0446     		mov	r4, r0
 647:src/xeq.c     **** }
 4618              		.loc 1 647 27 view .LVU1250
 4619 0006 0846     		mov	r0, r1
 4620              	.LVL350:
 647:src/xeq.c     **** }
 4621              		.loc 1 647 27 view .LVU1251
 4622 0008 01A9     		add	r1, sp, #4
 4623              	.LVL351:
 647:src/xeq.c     **** }
 4624              		.loc 1 647 27 view .LVU1252
 4625 000a FFF7FEFF 		bl	decimal64ToNumber
 4626              	.LVL352:
 647:src/xeq.c     **** }
 4627              		.loc 1 647 27 view .LVU1253
 4628 000e 0146     		mov	r1, r0
 647:src/xeq.c     **** }
 4629              		.loc 1 647 2 view .LVU1254
 4630 0010 2046     		mov	r0, r4
 4631 0012 FFF7FEFF 		bl	packed128_from_number
 4632              	.LVL353:
 648:src/xeq.c     **** 
 4633              		.loc 1 648 1 view .LVU1255
 4634 0016 0AB0     		add	sp, sp, #40
 4635              		.cfi_def_cfa_offset 8
 4636              		@ sp needed
 4637 0018 10BD     		pop	{r4, pc}
 648:src/xeq.c     **** 
 4638              		.loc 1 648 1 view .LVU1256
 4639              		.cfi_endproc
 4640              	.LFE39:
 4642 001a 00BF     		.section	.text.stack_size,"ax",%progbits
 4643              		.align	1
 4644              		.p2align 2,,3
 4645              		.global	stack_size
 4646              		.syntax unified
 4647              		.thumb
 4648              		.thumb_func
 4649              		.fpu fpv4-sp-d16
 4651              	stack_size:
 4652              	.LFB42:
 703:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 4653              		.loc 1 703 22 is_stmt 1 view -0
 4654              		.cfi_startproc
 4655              		@ args = 0, pretend = 0, frame = 0
 4656              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc0UaEmF.s 			page 199


 4657              		@ link register save eliminated.
 704:src/xeq.c     **** 		return 4;
 4658              		.loc 1 704 2 view .LVU1258
 704:src/xeq.c     **** 		return 4;
 4659              		.loc 1 704 8 is_stmt 0 view .LVU1259
 4660 0000 0B4B     		ldr	r3, .L376
 4661 0002 1B68     		ldr	r3, [r3]
 704:src/xeq.c     **** 		return 4;
 4662              		.loc 1 704 6 view .LVU1260
 4663 0004 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 704:src/xeq.c     **** 		return 4;
 4664              		.loc 1 704 5 view .LVU1261
 4665 0008 1207     		lsls	r2, r2, #28
 4666 000a 0ED5     		bpl	.L372
 4667              	.LBB1635:
 4668              	.LBI1635:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 4669              		.loc 1 182 5 is_stmt 1 view .LVU1262
 4670              	.LBB1636:
 183:src/xeq.c     **** }
 4671              		.loc 1 183 2 view .LVU1263
 183:src/xeq.c     **** }
 4672              		.loc 1 183 9 is_stmt 0 view .LVU1264
 4673 000c B3F8E037 		ldrh	r3, [r3, #2016]
 4674              	.LBE1636:
 4675              	.LBE1635:
 704:src/xeq.c     **** 		return 4;
 4676              		.loc 1 704 27 view .LVU1265
 4677 0010 9B0B     		lsrs	r3, r3, #14
 4678 0012 032B     		cmp	r3, #3
 4679 0014 01D0     		beq	.L375
 706:src/xeq.c     **** }
 4680              		.loc 1 706 9 view .LVU1266
 4681 0016 0820     		movs	r0, #8
 707:src/xeq.c     **** 
 4682              		.loc 1 707 1 view .LVU1267
 4683 0018 7047     		bx	lr
 4684              	.L375:
 704:src/xeq.c     **** 		return 4;
 4685              		.loc 1 704 44 discriminator 2 view .LVU1268
 4686 001a 064B     		ldr	r3, .L376+4
 704:src/xeq.c     **** 		return 4;
 4687              		.loc 1 704 41 discriminator 2 view .LVU1269
 4688 001c 93F90130 		ldrsb	r3, [r3, #1]
 4689 0020 002B     		cmp	r3, #0
 705:src/xeq.c     **** 	return 8;
 4690              		.loc 1 705 10 discriminator 2 view .LVU1270
 4691 0022 B4BF     		ite	lt
 4692 0024 0820     		movlt	r0, #8
 4693 0026 0420     		movge	r0, #4
 4694 0028 7047     		bx	lr
 4695              	.L372:
 705:src/xeq.c     **** 	return 8;
 4696              		.loc 1 705 10 view .LVU1271
 4697 002a 0420     		movs	r0, #4
 4698 002c 7047     		bx	lr
 4699              	.L377:
ARM GAS  /tmp/cc0UaEmF.s 			page 200


 4700 002e 00BF     		.align	2
 4701              	.L376:
 4702 0030 00000000 		.word	main_ram
 4703 0034 00000000 		.word	XromParams
 4704              		.cfi_endproc
 4705              	.LFE42:
 4707              		.section	.text.copyreg,"ax",%progbits
 4708              		.align	1
 4709              		.p2align 2,,3
 4710              		.global	copyreg
 4711              		.syntax unified
 4712              		.thumb
 4713              		.thumb_func
 4714              		.fpu fpv4-sp-d16
 4716              	copyreg:
 4717              	.LVL354:
 4718              	.LFB45:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 4719              		.loc 1 717 46 is_stmt 1 view -0
 4720              		.cfi_startproc
 4721              		@ args = 0, pretend = 0, frame = 0
 4722              		@ frame_needed = 0, uses_anonymous_args = 0
 4723              		@ link register save eliminated.
 718:src/xeq.c     **** }
 4724              		.loc 1 718 2 view .LVU1273
 4725              	.LBB1637:
 4726              	.LBI1637:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4727              		.loc 1 932 5 view .LVU1274
 4728              	.LBB1638:
 933:src/xeq.c     **** }
 4729              		.loc 1 933 2 view .LVU1275
 933:src/xeq.c     **** }
 4730              		.loc 1 933 24 is_stmt 0 view .LVU1276
 4731 0000 064B     		ldr	r3, .L381
 4732 0002 1B68     		ldr	r3, [r3]
 4733 0004 B3F8E827 		ldrh	r2, [r3, #2024]
 4734 0008 44F20103 		movw	r3, #16385
 4735              	.LBE1638:
 4736              	.LBE1637:
 718:src/xeq.c     **** }
 4737              		.loc 1 718 2 view .LVU1277
 4738 000c 1340     		ands	r3, r3, r2
 4739 000e B3F5804F 		cmp	r3, #16384
 4740 0012 0CBF     		ite	eq
 4741 0014 1022     		moveq	r2, #16
 4742 0016 0822     		movne	r2, #8
 4743 0018 FFF7FEBF 		b	xcopy
 4744              	.LVL355:
 4745              	.L382:
 718:src/xeq.c     **** }
 4746              		.loc 1 718 2 view .LVU1278
 4747              		.align	2
 4748              	.L381:
 4749 001c 00000000 		.word	main_ram
 4750              		.cfi_endproc
 4751              	.LFE45:
ARM GAS  /tmp/cc0UaEmF.s 			page 201


 4753              		.section	.text.set_lift,"ax",%progbits
 4754              		.align	1
 4755              		.p2align 2,,3
 4756              		.global	set_lift
 4757              		.syntax unified
 4758              		.thumb
 4759              		.thumb_func
 4760              		.fpu fpv4-sp-d16
 4762              	set_lift:
 4763              	.LFB51:
 748:src/xeq.c     ****     State2.state_lift = 1;
 4764              		.loc 1 748 21 is_stmt 1 view -0
 4765              		.cfi_startproc
 4766              		@ args = 0, pretend = 0, frame = 0
 4767              		@ frame_needed = 0, uses_anonymous_args = 0
 4768              		@ link register save eliminated.
 749:src/xeq.c     **** }
 4769              		.loc 1 749 5 view .LVU1280
 749:src/xeq.c     **** }
 4770              		.loc 1 749 23 is_stmt 0 view .LVU1281
 4771 0000 024A     		ldr	r2, .L384
 4772 0002 D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 4773 0004 43F04003 		orr	r3, r3, #64
 4774 0008 D375     		strb	r3, [r2, #23]
 750:src/xeq.c     **** 
 4775              		.loc 1 750 1 view .LVU1282
 4776 000a 7047     		bx	lr
 4777              	.L385:
 4778              		.align	2
 4779              	.L384:
 4780 000c 00000000 		.word	StateWhileOn
 4781              		.cfi_endproc
 4782              	.LFE51:
 4784              		.section	.text.is_dblmode,"ax",%progbits
 4785              		.align	1
 4786              		.p2align 2,,3
 4787              		.global	is_dblmode
 4788              		.syntax unified
 4789              		.thumb
 4790              		.thumb_func
 4791              		.fpu fpv4-sp-d16
 4793              	is_dblmode:
 4794              	.LFB78:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4795              		.loc 1 932 22 is_stmt 1 view -0
 4796              		.cfi_startproc
 4797              		@ args = 0, pretend = 0, frame = 0
 4798              		@ frame_needed = 0, uses_anonymous_args = 0
 4799              		@ link register save eliminated.
 933:src/xeq.c     **** }
 4800              		.loc 1 933 2 view .LVU1284
 933:src/xeq.c     **** }
 4801              		.loc 1 933 24 is_stmt 0 view .LVU1285
 4802 0000 064B     		ldr	r3, .L387
 4803 0002 1B68     		ldr	r3, [r3]
 4804 0004 B3F8E837 		ldrh	r3, [r3, #2024]
 4805 0008 44F20100 		movw	r0, #16385
ARM GAS  /tmp/cc0UaEmF.s 			page 202


 4806 000c 1840     		ands	r0, r0, r3
 934:src/xeq.c     **** 
 4807              		.loc 1 934 1 view .LVU1286
 4808 000e A0F58040 		sub	r0, r0, #16384
 4809 0012 B0FA80F0 		clz	r0, r0
 4810 0016 4009     		lsrs	r0, r0, #5
 4811 0018 7047     		bx	lr
 4812              	.L388:
 4813 001a 00BF     		.align	2
 4814              	.L387:
 4815 001c 00000000 		.word	main_ram
 4816              		.cfi_endproc
 4817              	.LFE78:
 4819              		.section	.text.is_usrdblmode,"ax",%progbits
 4820              		.align	1
 4821              		.p2align 2,,3
 4822              		.global	is_usrdblmode
 4823              		.syntax unified
 4824              		.thumb
 4825              		.thumb_func
 4826              		.fpu fpv4-sp-d16
 4828              	is_usrdblmode:
 4829              	.LFB79:
 936:src/xeq.c     **** 	if (XromFlags.xIN)
 4830              		.loc 1 936 25 is_stmt 1 view -0
 4831              		.cfi_startproc
 4832              		@ args = 0, pretend = 0, frame = 0
 4833              		@ frame_needed = 0, uses_anonymous_args = 0
 4834              		@ link register save eliminated.
 937:src/xeq.c     **** 		return XromFlags.mode_double;
 4835              		.loc 1 937 2 view .LVU1288
 937:src/xeq.c     **** 		return XromFlags.mode_double;
 4836              		.loc 1 937 6 is_stmt 0 view .LVU1289
 4837 0000 0A4B     		ldr	r3, .L393
 937:src/xeq.c     **** 		return XromFlags.mode_double;
 4838              		.loc 1 937 5 view .LVU1290
 4839 0002 93F90120 		ldrsb	r2, [r3, #1]
 4840 0006 002A     		cmp	r2, #0
 4841 0008 0CDB     		blt	.L392
 939:src/xeq.c     **** }
 4842              		.loc 1 939 2 is_stmt 1 view .LVU1291
 4843              	.LBB1639:
 4844              	.LBI1639:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4845              		.loc 1 932 5 view .LVU1292
 4846              	.LBB1640:
 933:src/xeq.c     **** }
 4847              		.loc 1 933 2 view .LVU1293
 933:src/xeq.c     **** }
 4848              		.loc 1 933 24 is_stmt 0 view .LVU1294
 4849 000a 094B     		ldr	r3, .L393+4
 4850 000c 1B68     		ldr	r3, [r3]
 4851 000e B3F8E837 		ldrh	r3, [r3, #2024]
 4852 0012 44F20100 		movw	r0, #16385
 4853 0016 1840     		ands	r0, r0, r3
 4854 0018 A0F58040 		sub	r0, r0, #16384
 4855 001c B0FA80F0 		clz	r0, r0
ARM GAS  /tmp/cc0UaEmF.s 			page 203


 4856 0020 4009     		lsrs	r0, r0, #5
 4857              	.LBE1640:
 4858              	.LBE1639:
 940:src/xeq.c     **** 
 4859              		.loc 1 940 1 view .LVU1295
 4860 0022 7047     		bx	lr
 4861              	.L392:
 938:src/xeq.c     **** 	return is_dblmode();
 4862              		.loc 1 938 3 is_stmt 1 view .LVU1296
 938:src/xeq.c     **** 	return is_dblmode();
 4863              		.loc 1 938 19 is_stmt 0 view .LVU1297
 4864 0024 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 4865 0026 C0F3C000 		ubfx	r0, r0, #3, #1
 4866 002a 7047     		bx	lr
 4867              	.L394:
 4868              		.align	2
 4869              	.L393:
 4870 002c 00000000 		.word	XromParams
 4871 0030 00000000 		.word	main_ram
 4872              		.cfi_endproc
 4873              	.LFE79:
 4875              		.section	.text.s_to_i,"ax",%progbits
 4876              		.align	1
 4877              		.p2align 2,,3
 4878              		.global	s_to_i
 4879              		.syntax unified
 4880              		.thumb
 4881              		.thumb_func
 4882              		.fpu fpv4-sp-d16
 4884              	s_to_i:
 4885              	.LVL356:
 4886              	.LFB80:
 944:src/xeq.c     **** 	int x = 0;
 4887              		.loc 1 944 27 is_stmt 1 view -0
 4888              		.cfi_startproc
 4889              		@ args = 0, pretend = 0, frame = 0
 4890              		@ frame_needed = 0, uses_anonymous_args = 0
 4891              		@ link register save eliminated.
 945:src/xeq.c     **** 	int neg;
 4892              		.loc 1 945 2 view .LVU1299
 946:src/xeq.c     **** 
 4893              		.loc 1 946 2 view .LVU1300
 948:src/xeq.c     **** 		s++;
 4894              		.loc 1 948 2 view .LVU1301
 944:src/xeq.c     **** 	int x = 0;
 4895              		.loc 1 944 27 is_stmt 0 view .LVU1302
 4896 0000 10B4     		push	{r4}
 4897              		.cfi_def_cfa_offset 4
 4898              		.cfi_offset 4, -4
 948:src/xeq.c     **** 		s++;
 4899              		.loc 1 948 6 view .LVU1303
 4900 0002 0178     		ldrb	r1, [r0]	@ zero_extendqisi2
 948:src/xeq.c     **** 		s++;
 4901              		.loc 1 948 5 view .LVU1304
 4902 0004 2D29     		cmp	r1, #45
 4903 0006 26D0     		beq	.L411
 952:src/xeq.c     **** 			s++;
ARM GAS  /tmp/cc0UaEmF.s 			page 204


 4904              		.loc 1 952 3 is_stmt 1 view .LVU1305
 952:src/xeq.c     **** 			s++;
 4905              		.loc 1 952 6 is_stmt 0 view .LVU1306
 4906 0008 2B29     		cmp	r1, #43
 4907 000a 18D0     		beq	.L399
 4908              	.LVL357:
 957:src/xeq.c     **** 		const char c = *s++;
 4909              		.loc 1 957 2 is_stmt 1 view .LVU1307
 4910              	.LBB1641:
 958:src/xeq.c     **** 
 4911              		.loc 1 958 3 view .LVU1308
 960:src/xeq.c     **** 			break;
 4912              		.loc 1 960 15 is_stmt 0 view .LVU1309
 4913 000c A1F13003 		sub	r3, r1, #48
 960:src/xeq.c     **** 			break;
 4914              		.loc 1 960 6 view .LVU1310
 4915 0010 D9B2     		uxtb	r1, r3
 4916 0012 0929     		cmp	r1, #9
 958:src/xeq.c     **** 
 4917              		.loc 1 958 20 view .LVU1311
 4918 0014 00F10102 		add	r2, r0, #1
 4919              	.LVL358:
 960:src/xeq.c     **** 			break;
 4920              		.loc 1 960 3 is_stmt 1 view .LVU1312
 960:src/xeq.c     **** 			break;
 4921              		.loc 1 960 6 is_stmt 0 view .LVU1313
 4922 0018 19D8     		bhi	.L404
 4923              	.LVL359:
 4924              	.L410:
 960:src/xeq.c     **** 			break;
 4925              		.loc 1 960 6 view .LVU1314
 4926              	.LBE1641:
 954:src/xeq.c     **** 	}
 4927              		.loc 1 954 7 view .LVU1315
 4928 001a 0024     		movs	r4, #0
 4929              	.LVL360:
 4930              	.L398:
 954:src/xeq.c     **** 	}
 4931              		.loc 1 954 7 view .LVU1316
 4932 001c 0020     		movs	r0, #0
 4933              	.LVL361:
 4934              	.L401:
 4935              	.LBB1642:
 962:src/xeq.c     **** 	}
 4936              		.loc 1 962 3 is_stmt 1 view .LVU1317
 958:src/xeq.c     **** 
 4937              		.loc 1 958 14 is_stmt 0 view .LVU1318
 4938 001e 12F8011B 		ldrb	r1, [r2], #1	@ zero_extendqisi2
 4939              	.LVL362:
 962:src/xeq.c     **** 	}
 4940              		.loc 1 962 10 view .LVU1319
 4941 0022 00EB8000 		add	r0, r0, r0, lsl #2
 4942              	.LVL363:
 962:src/xeq.c     **** 	}
 4943              		.loc 1 962 5 view .LVU1320
 4944 0026 03EB4000 		add	r0, r3, r0, lsl #1
 4945              	.LVL364:
ARM GAS  /tmp/cc0UaEmF.s 			page 205


 962:src/xeq.c     **** 	}
 4946              		.loc 1 962 5 view .LVU1321
 4947              	.LBE1642:
 957:src/xeq.c     **** 		const char c = *s++;
 4948              		.loc 1 957 8 is_stmt 1 view .LVU1322
 957:src/xeq.c     **** 		const char c = *s++;
 4949              		.loc 1 957 2 view .LVU1323
 4950              	.LBB1643:
 958:src/xeq.c     **** 
 4951              		.loc 1 958 3 view .LVU1324
 960:src/xeq.c     **** 			break;
 4952              		.loc 1 960 3 view .LVU1325
 960:src/xeq.c     **** 			break;
 4953              		.loc 1 960 15 is_stmt 0 view .LVU1326
 4954 002a A1F13003 		sub	r3, r1, #48
 960:src/xeq.c     **** 			break;
 4955              		.loc 1 960 6 view .LVU1327
 4956 002e D9B2     		uxtb	r1, r3
 4957 0030 0929     		cmp	r1, #9
 4958 0032 F4D9     		bls	.L401
 4959              	.LBE1643:
 964:src/xeq.c     **** 		return -x;
 4960              		.loc 1 964 2 is_stmt 1 view .LVU1328
 964:src/xeq.c     **** 		return -x;
 4961              		.loc 1 964 5 is_stmt 0 view .LVU1329
 4962 0034 04B1     		cbz	r4, .L395
 4963 0036 4042     		rsbs	r0, r0, #0
 4964              	.LVL365:
 4965              	.L395:
 967:src/xeq.c     **** 
 4966              		.loc 1 967 1 view .LVU1330
 4967 0038 5DF8044B 		ldr	r4, [sp], #4
 4968              		.cfi_remember_state
 4969              		.cfi_restore 4
 4970              		.cfi_def_cfa_offset 0
 4971 003c 7047     		bx	lr
 4972              	.LVL366:
 4973              	.L399:
 4974              		.cfi_restore_state
 953:src/xeq.c     **** 		neg = 0;
 4975              		.loc 1 953 4 is_stmt 1 view .LVU1331
 957:src/xeq.c     **** 		const char c = *s++;
 4976              		.loc 1 957 2 view .LVU1332
 4977              	.LBB1644:
 958:src/xeq.c     **** 
 4978              		.loc 1 958 3 view .LVU1333
 958:src/xeq.c     **** 
 4979              		.loc 1 958 14 is_stmt 0 view .LVU1334
 4980 003e 4178     		ldrb	r1, [r0, #1]	@ zero_extendqisi2
 960:src/xeq.c     **** 			break;
 4981              		.loc 1 960 15 view .LVU1335
 4982 0040 A1F13003 		sub	r3, r1, #48
 960:src/xeq.c     **** 			break;
 4983              		.loc 1 960 6 view .LVU1336
 4984 0044 D9B2     		uxtb	r1, r3
 4985 0046 0929     		cmp	r1, #9
 958:src/xeq.c     **** 
ARM GAS  /tmp/cc0UaEmF.s 			page 206


 4986              		.loc 1 958 20 view .LVU1337
 4987 0048 00F10202 		add	r2, r0, #2
 4988              	.LVL367:
 960:src/xeq.c     **** 			break;
 4989              		.loc 1 960 3 is_stmt 1 view .LVU1338
 960:src/xeq.c     **** 			break;
 4990              		.loc 1 960 6 is_stmt 0 view .LVU1339
 4991 004c E5D9     		bls	.L410
 4992              	.LVL368:
 4993              	.L404:
 960:src/xeq.c     **** 			break;
 4994              		.loc 1 960 6 view .LVU1340
 4995 004e 0020     		movs	r0, #0
 4996              	.LBE1644:
 967:src/xeq.c     **** 
 4997              		.loc 1 967 1 view .LVU1341
 4998 0050 5DF8044B 		ldr	r4, [sp], #4
 4999              		.cfi_remember_state
 5000              		.cfi_restore 4
 5001              		.cfi_def_cfa_offset 0
 5002 0054 7047     		bx	lr
 5003              	.LVL369:
 5004              	.L411:
 5005              		.cfi_restore_state
 949:src/xeq.c     **** 		neg = 1;
 5006              		.loc 1 949 3 is_stmt 1 view .LVU1342
 950:src/xeq.c     **** 	} else {
 5007              		.loc 1 950 3 view .LVU1343
 957:src/xeq.c     **** 		const char c = *s++;
 5008              		.loc 1 957 2 view .LVU1344
 5009              	.LBB1645:
 958:src/xeq.c     **** 
 5010              		.loc 1 958 3 view .LVU1345
 958:src/xeq.c     **** 
 5011              		.loc 1 958 14 is_stmt 0 view .LVU1346
 5012 0056 4178     		ldrb	r1, [r0, #1]	@ zero_extendqisi2
 960:src/xeq.c     **** 			break;
 5013              		.loc 1 960 15 view .LVU1347
 5014 0058 A1F13003 		sub	r3, r1, #48
 960:src/xeq.c     **** 			break;
 5015              		.loc 1 960 6 view .LVU1348
 5016 005c D9B2     		uxtb	r1, r3
 5017 005e 0929     		cmp	r1, #9
 958:src/xeq.c     **** 
 5018              		.loc 1 958 20 view .LVU1349
 5019 0060 00F10202 		add	r2, r0, #2
 5020              	.LVL370:
 960:src/xeq.c     **** 			break;
 5021              		.loc 1 960 3 is_stmt 1 view .LVU1350
 960:src/xeq.c     **** 			break;
 5022              		.loc 1 960 6 is_stmt 0 view .LVU1351
 5023 0064 F3D8     		bhi	.L404
 5024              	.LBE1645:
 950:src/xeq.c     **** 	} else {
 5025              		.loc 1 950 7 view .LVU1352
 5026 0066 0124     		movs	r4, #1
 5027 0068 D8E7     		b	.L398
ARM GAS  /tmp/cc0UaEmF.s 			page 207


 5028              		.cfi_endproc
 5029              	.LFE80:
 5031 006a 00BF     		.section	.text.digit,"ax",%progbits
 5032              		.align	1
 5033              		.p2align 2,,3
 5034              		.syntax unified
 5035              		.thumb
 5036              		.thumb_func
 5037              		.fpu fpv4-sp-d16
 5039              	digit:
 5040              	.LVL371:
 5041              	.LFB209:
3616:src/xeq.c     **** 	const int intm = is_intmode();
 5042              		.loc 1 3616 35 is_stmt 1 view -0
 5043              		.cfi_startproc
 5044              		@ args = 0, pretend = 0, frame = 0
 5045              		@ frame_needed = 0, uses_anonymous_args = 0
3617:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 5046              		.loc 1 3617 2 view .LVU1354
3616:src/xeq.c     **** 	const int intm = is_intmode();
 5047              		.loc 1 3616 35 is_stmt 0 view .LVU1355
 5048 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5049              		.cfi_def_cfa_offset 24
 5050              		.cfi_offset 3, -24
 5051              		.cfi_offset 4, -20
 5052              		.cfi_offset 5, -16
 5053              		.cfi_offset 6, -12
 5054              		.cfi_offset 7, -8
 5055              		.cfi_offset 14, -4
3617:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 5056              		.loc 1 3617 19 view .LVU1356
 5057 0002 604E     		ldr	r6, .L458
3620:src/xeq.c     **** 		lim++;
 5058              		.loc 1 3620 13 view .LVU1357
 5059 0004 604C     		ldr	r4, .L458+4
3617:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 5060              		.loc 1 3617 19 view .LVU1358
 5061 0006 3368     		ldr	r3, [r6]
3620:src/xeq.c     **** 		lim++;
 5062              		.loc 1 3620 13 view .LVU1359
 5063 0008 94F82020 		ldrb	r2, [r4, #32]	@ zero_extendqisi2
3617:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 5064              		.loc 1 3617 19 view .LVU1360
 5065 000c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 5066              	.LVL372:
3618:src/xeq.c     **** 
 5067              		.loc 1 3618 2 is_stmt 1 view .LVU1361
3620:src/xeq.c     **** 		lim++;
 5068              		.loc 1 3620 2 view .LVU1362
3621:src/xeq.c     **** 	if (intm) {
 5069              		.loc 1 3621 6 is_stmt 0 view .LVU1363
 5070 0010 2D2A     		cmp	r2, #45
 5071 0012 14BF     		ite	ne
 5072 0014 0C27     		movne	r7, #12
 5073 0016 0D27     		moveq	r7, #13
 5074              	.LVL373:
3622:src/xeq.c     **** 		if (c >= int_base()) {
ARM GAS  /tmp/cc0UaEmF.s 			page 208


 5075              		.loc 1 3622 2 is_stmt 1 view .LVU1364
3622:src/xeq.c     **** 		if (c >= int_base()) {
 5076              		.loc 1 3622 5 is_stmt 0 view .LVU1365
 5077 0018 DB07     		lsls	r3, r3, #31
 5078              	.LVL374:
3616:src/xeq.c     **** 	const int intm = is_intmode();
 5079              		.loc 1 3616 35 view .LVU1366
 5080 001a 0546     		mov	r5, r0
3622:src/xeq.c     **** 		if (c >= int_base()) {
 5081              		.loc 1 3622 5 view .LVU1367
 5082 001c 79D4     		bmi	.L455
3628:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5083              		.loc 1 3628 3 is_stmt 1 view .LVU1368
3628:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5084              		.loc 1 3628 6 is_stmt 0 view .LVU1369
 5085 001e 0928     		cmp	r0, #9
 5086 0020 00F28C80 		bhi	.L416
3633:src/xeq.c     **** 			lim = CMDLINELEN;
 5087              		.loc 1 3633 3 is_stmt 1 view .LVU1370
3633:src/xeq.c     **** 			lim = CMDLINELEN;
 5088              		.loc 1 3633 7 is_stmt 0 view .LVU1371
 5089 0024 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
3633:src/xeq.c     **** 			lim = CMDLINELEN;
 5090              		.loc 1 3633 6 view .LVU1372
 5091 0026 002B     		cmp	r3, #0
 5092 0028 65D0     		beq	.L417
3634:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5093              		.loc 1 3634 4 is_stmt 1 view .LVU1373
 5094              	.LVL375:
3636:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
 5095              		.loc 1 3636 4 view .LVU1374
3636:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
 5096              		.loc 1 3636 8 is_stmt 0 view .LVU1375
 5097 002a 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
3636:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
 5098              		.loc 1 3636 7 view .LVU1376
 5099 002c 122A     		cmp	r2, #18
 5100 002e 40F29980 		bls	.L441
 5101              	.LBB1656:
3637:src/xeq.c     **** 
 5102              		.loc 1 3637 5 is_stmt 1 view .LVU1377
3639:src/xeq.c     **** 					p++;
 5103              		.loc 1 3639 9 is_stmt 0 view .LVU1378
 5104 0032 E118     		adds	r1, r4, r3
3637:src/xeq.c     **** 
 5105              		.loc 1 3637 11 view .LVU1379
 5106 0034 2133     		adds	r3, r3, #33
3639:src/xeq.c     **** 					p++;
 5107              		.loc 1 3639 8 view .LVU1380
 5108 0036 91F82110 		ldrb	r1, [r1, #33]	@ zero_extendqisi2
3637:src/xeq.c     **** 
 5109              		.loc 1 3637 11 view .LVU1381
 5110 003a 2344     		add	r3, r3, r4
 5111              	.LVL376:
3639:src/xeq.c     **** 					p++;
 5112              		.loc 1 3639 5 is_stmt 1 view .LVU1382
3639:src/xeq.c     **** 					p++;
ARM GAS  /tmp/cc0UaEmF.s 			page 209


 5113              		.loc 1 3639 8 is_stmt 0 view .LVU1383
 5114 003c 2D29     		cmp	r1, #45
3640:src/xeq.c     **** 				while (p < &Cmdline[CMDLINELEN]) {
 5115              		.loc 1 3640 6 is_stmt 1 view .LVU1384
3641:src/xeq.c     **** 					p[0] = p[1];
 5116              		.loc 1 3641 11 is_stmt 0 view .LVU1385
 5117 003e 5349     		ldr	r1, .L458+8
3640:src/xeq.c     **** 				while (p < &Cmdline[CMDLINELEN]) {
 5118              		.loc 1 3640 7 view .LVU1386
 5119 0040 08BF     		it	eq
 5120 0042 0133     		addeq	r3, r3, #1
 5121              	.LVL377:
3641:src/xeq.c     **** 					p[0] = p[1];
 5122              		.loc 1 3641 11 is_stmt 1 view .LVU1387
 5123 0044 8B42     		cmp	r3, r1
 5124 0046 05D2     		bcs	.L420
 5125              	.LVL378:
 5126              	.L421:
3642:src/xeq.c     **** 					p++;
 5127              		.loc 1 3642 6 view .LVU1388
3642:src/xeq.c     **** 					p++;
 5128              		.loc 1 3642 11 is_stmt 0 view .LVU1389
 5129 0048 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 5130 004a 03F8012B 		strb	r2, [r3], #1
 5131              	.LVL379:
3643:src/xeq.c     **** 				}
 5132              		.loc 1 3643 6 is_stmt 1 view .LVU1390
3641:src/xeq.c     **** 					p[0] = p[1];
 5133              		.loc 1 3641 11 view .LVU1391
 5134 004e 8B42     		cmp	r3, r1
 5135 0050 FAD1     		bne	.L421
 5136 0052 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
 5137              	.L420:
3645:src/xeq.c     **** 			}
 5138              		.loc 1 3645 5 view .LVU1392
3645:src/xeq.c     **** 			}
 5139              		.loc 1 3645 18 is_stmt 0 view .LVU1393
 5140 0054 013A     		subs	r2, r2, #1
 5141 0056 D2B2     		uxtb	r2, r2
 5142              	.LBE1656:
3634:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5143              		.loc 1 3634 8 view .LVU1394
 5144 0058 1323     		movs	r3, #19
 5145              	.LVL380:
3665:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5146              		.loc 1 3665 2 is_stmt 1 view .LVU1395
3665:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5147              		.loc 1 3665 5 is_stmt 0 view .LVU1396
 5148 005a 9342     		cmp	r3, r2
 5149              	.LBB1657:
3645:src/xeq.c     **** 			}
 5150              		.loc 1 3645 18 view .LVU1397
 5151 005c 2277     		strb	r2, [r4, #28]
 5152              	.LBE1657:
3665:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5153              		.loc 1 3665 5 view .LVU1398
 5154 005e 53DD     		ble	.L438
ARM GAS  /tmp/cc0UaEmF.s 			page 210


 5155              	.LVL381:
 5156              	.L425:
3677:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5157              		.loc 1 3677 3 is_stmt 1 view .LVU1399
3677:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5158              		.loc 1 3677 6 is_stmt 0 view .LVU1400
 5159 0060 002D     		cmp	r5, #0
 5160 0062 70D1     		bne	.L427
3677:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5161              		.loc 1 3677 17 discriminator 1 view .LVU1401
 5162 0064 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
3677:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5163              		.loc 1 3677 14 discriminator 1 view .LVU1402
 5164 0066 002B     		cmp	r3, #0
 5165 0068 00F08180 		beq	.L428
3678:src/xeq.c     **** 				return;
 5166              		.loc 1 3678 4 is_stmt 1 view .LVU1403
3681:src/xeq.c     **** 				return;
 5167              		.loc 1 3681 4 view .LVU1404
3678:src/xeq.c     **** 				return;
 5168              		.loc 1 3678 15 is_stmt 0 view .LVU1405
 5169 006c A018     		adds	r0, r4, r2
3681:src/xeq.c     **** 				return;
 5170              		.loc 1 3681 7 view .LVU1406
 5171 006e C17F     		ldrb	r1, [r0, #31]	@ zero_extendqisi2
 5172 0070 4439     		subs	r1, r1, #68
 5173 0072 0129     		cmp	r1, #1
 5174 0074 3ED9     		bls	.L412
3689:src/xeq.c     **** 
 5175              		.loc 1 3689 3 is_stmt 1 view .LVU1407
 5176              	.LVL382:
 5177              	.LBB1658:
 5178              	.LBI1658:
2432:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5179              		.loc 1 2432 13 view .LVU1408
 5180              	.LBB1659:
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5181              		.loc 1 2433 2 view .LVU1409
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5182              		.loc 1 2433 23 is_stmt 0 view .LVU1410
 5183 0076 0132     		adds	r2, r2, #1
 5184 0078 D2B2     		uxtb	r2, r2
2434:src/xeq.c     **** }
 5185              		.loc 1 2434 25 view .LVU1411
 5186 007a A118     		adds	r1, r4, r2
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5187              		.loc 1 2433 27 view .LVU1412
 5188 007c 3027     		movs	r7, #48
 5189 007e 80F82070 		strb	r7, [r0, #32]
2434:src/xeq.c     **** }
 5190              		.loc 1 2434 2 is_stmt 1 view .LVU1413
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5191              		.loc 1 2433 23 is_stmt 0 view .LVU1414
 5192 0082 2277     		strb	r2, [r4, #28]
2434:src/xeq.c     **** }
 5193              		.loc 1 2434 25 view .LVU1415
 5194 0084 81F82050 		strb	r5, [r1, #32]
ARM GAS  /tmp/cc0UaEmF.s 			page 211


 5195              	.LVL383:
2434:src/xeq.c     **** }
 5196              		.loc 1 2434 25 view .LVU1416
 5197              	.LBE1659:
 5198              	.LBE1658:
3691:src/xeq.c     **** 			exponent_adjusted(1);
 5199              		.loc 1 3691 3 is_stmt 1 view .LVU1417
 5200              	.L439:
 5201              	.L431:
 5202              	.L432:
3692:src/xeq.c     **** 	}
 5203              		.loc 1 3692 4 view .LVU1418
 5204              	.LBB1664:
 5205              	.LBI1664:
2441:src/xeq.c     **** {
 5206              		.loc 1 2441 13 view .LVU1419
 5207              	.LBB1665:
2443:src/xeq.c     **** 	int i;
 5208              		.loc 1 2443 2 view .LVU1420
 5209              	.LBB1666:
 5210              	.LBI1666:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 5211              		.loc 1 932 5 view .LVU1421
 5212              	.LBB1667:
 933:src/xeq.c     **** }
 5213              		.loc 1 933 2 view .LVU1422
 933:src/xeq.c     **** }
 5214              		.loc 1 933 2 is_stmt 0 view .LVU1423
 5215              	.LBE1667:
 5216              	.LBE1666:
2444:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DC == -1
 5217              		.loc 1 2444 2 is_stmt 1 view .LVU1424
2448:src/xeq.c     **** #endif
 5218              		.loc 1 2448 2 view .LVU1425
2453:src/xeq.c     **** #endif
 5219              		.loc 1 2453 2 view .LVU1426
2458:src/xeq.c     **** #endif
 5220              		.loc 1 2458 2 view .LVU1427
2463:src/xeq.c     **** #endif
 5221              		.loc 1 2463 2 view .LVU1428
2468:src/xeq.c     **** #endif
 5222              		.loc 1 2468 2 view .LVU1429
2473:src/xeq.c     **** #endif
 5223              		.loc 1 2473 2 view .LVU1430
2478:src/xeq.c     **** #endif
 5224              		.loc 1 2478 2 view .LVU1431
2483:src/xeq.c     **** #endif
 5225              		.loc 1 2483 2 view .LVU1432
2488:src/xeq.c     **** #endif
 5226              		.loc 1 2488 2 view .LVU1433
2493:src/xeq.c     **** #endif
 5227              		.loc 1 2493 2 view .LVU1434
2495:src/xeq.c     **** 	const int dp_neg_lim_dc = DP_NEG_EXP_ENTRY_LIMIT_DC;
 5228              		.loc 1 2495 2 view .LVU1435
2496:src/xeq.c     **** 	const int dp_neg_type_ds = DP_NEG_EXP_ENTRY_TYPE_DS;
 5229              		.loc 1 2496 2 view .LVU1436
2497:src/xeq.c     **** 	const int dp_neg_lim_ds = DP_NEG_EXP_ENTRY_LIMIT_DS;
ARM GAS  /tmp/cc0UaEmF.s 			page 212


 5230              		.loc 1 2497 2 view .LVU1437
2498:src/xeq.c     **** 	const int dp_pos_type_dc = DP_POS_EXP_ENTRY_TYPE_DC;
 5231              		.loc 1 2498 2 view .LVU1438
2499:src/xeq.c     **** 	const int dp_pos_lim_dc = DP_POS_EXP_ENTRY_LIMIT_DC;
 5232              		.loc 1 2499 2 view .LVU1439
2500:src/xeq.c     **** 	const int dp_pos_type_ds = DP_POS_EXP_ENTRY_TYPE_DS;
 5233              		.loc 1 2500 2 view .LVU1440
2501:src/xeq.c     **** 	const int dp_pos_lim_ds = DP_POS_EXP_ENTRY_LIMIT_DS;
 5234              		.loc 1 2501 2 view .LVU1441
2502:src/xeq.c     **** 	const int dp_exp_chs_dc = DP_EXP_ENTRY_CHS_DC;
 5235              		.loc 1 2502 2 view .LVU1442
2503:src/xeq.c     **** 	const int dp_exp_chs_ds = DP_EXP_ENTRY_CHS_DS;
 5236              		.loc 1 2503 2 view .LVU1443
2504:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 5237              		.loc 1 2504 2 view .LVU1444
2506:src/xeq.c     **** 	char *p = &Cmdline[CmdLineEex];
 5238              		.loc 1 2506 2 view .LVU1445
2507:src/xeq.c     **** #else
 5239              		.loc 1 2507 2 view .LVU1446
 5240              	.LBB1670:
 5241              	.LBB1668:
 933:src/xeq.c     **** }
 5242              		.loc 1 933 24 is_stmt 0 view .LVU1447
 5243 0088 3268     		ldr	r2, [r6]
 5244 008a B2F8E807 		ldrh	r0, [r2, #2024]
 5245              	.LBE1668:
 5246              	.LBE1670:
 5247              	.LBB1671:
2956:src/xeq.c     **** #else
 5248              		.loc 1 2956 9 view .LVU1448
 5249 008e E118     		adds	r1, r4, r3
 5250              	.LBE1671:
2507:src/xeq.c     **** #else
 5251              		.loc 1 2507 8 view .LVU1449
 5252 0090 03F12005 		add	r5, r3, #32
 5253              	.LBB1672:
 5254              	.LBB1669:
 933:src/xeq.c     **** }
 5255              		.loc 1 933 24 view .LVU1450
 5256 0094 44F20102 		movw	r2, #16385
 5257              	.LBE1669:
 5258              	.LBE1672:
 5259              	.LBB1673:
2627:src/xeq.c     **** 			// Double precision mode
 5260              		.loc 1 2627 6 view .LVU1451
 5261 0098 0240     		ands	r2, r2, r0
 5262              	.LBE1673:
2507:src/xeq.c     **** #else
 5263              		.loc 1 2507 8 view .LVU1452
 5264 009a 2544     		add	r5, r5, r4
 5265              	.LVL384:
2526:src/xeq.c     **** #endif
 5266              		.loc 1 2526 2 is_stmt 1 view .LVU1453
2531:src/xeq.c     **** 
 5267              		.loc 1 2531 2 view .LVU1454
2534:src/xeq.c     **** 		emax = 999;
 5268              		.loc 1 2534 2 view .LVU1455
ARM GAS  /tmp/cc0UaEmF.s 			page 213


 5269              	.LBB1674:
2538:src/xeq.c     **** 		int dot = 0, first_nonzero = -1, last_nonzero = 0;
 5270              		.loc 1 2538 3 view .LVU1456
2539:src/xeq.c     **** 
 5271              		.loc 1 2539 3 view .LVU1457
2541:src/xeq.c     **** 		    || (neg_type_ds >= 1 && neg_type_ds <= 9)
 5272              		.loc 1 2541 3 view .LVU1458
2627:src/xeq.c     **** 			// Double precision mode
 5273              		.loc 1 2627 3 view .LVU1459
2662:src/xeq.c     **** 				}
 5274              		.loc 1 2662 17 is_stmt 0 view .LVU1460
 5275 009c B2F5804F 		cmp	r2, #16384
2956:src/xeq.c     **** #else
 5276              		.loc 1 2956 8 view .LVU1461
 5277 00a0 91F82010 		ldrb	r1, [r1, #32]	@ zero_extendqisi2
2662:src/xeq.c     **** 				}
 5278              		.loc 1 2662 17 view .LVU1462
 5279 00a4 41F2FF72 		movw	r2, #6143
 5280              	.LBE1674:
2970:src/xeq.c     **** #  else
 5281              		.loc 1 2970 3 view .LVU1463
 5282 00a8 05F10107 		add	r7, r5, #1
 5283              	.LBB1675:
2662:src/xeq.c     **** 				}
 5284              		.loc 1 2662 17 view .LVU1464
 5285 00ac 18BF     		it	ne
 5286 00ae 4FF4C072 		movne	r2, #384
 5287 00b2 40F27F16 		movw	r6, #383
 5288              	.LVL385:
2662:src/xeq.c     **** 				}
 5289              		.loc 1 2662 17 view .LVU1465
 5290              	.LBE1675:
2979:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5291              		.loc 1 2979 9 view .LVU1466
 5292 00b6 3846     		mov	r0, r7
 5293              	.LBB1676:
2662:src/xeq.c     **** 				}
 5294              		.loc 1 2662 17 view .LVU1467
 5295 00b8 04BF     		itt	eq
 5296 00ba 1646     		moveq	r6, r2
 5297              	.LVL386:
2662:src/xeq.c     **** 				}
 5298              		.loc 1 2662 17 view .LVU1468
 5299 00bc 4FF4C052 		moveq	r2, #6144
 5300              	.LVL387:
2741:src/xeq.c     **** 		    && (dp_neg_type_dc != dp_neg_type_ds || dp_neg_lim_dc != dp_neg_lim_ds)
 5301              		.loc 1 2741 3 is_stmt 1 view .LVU1469
2757:src/xeq.c     **** 		         && (!flag_D || (dp_neg_type_dc == dp_neg_type_ds
 5302              		.loc 1 2757 8 view .LVU1470
2803:src/xeq.c     **** 		    && (dp_pos_type_dc != dp_pos_type_ds || dp_pos_lim_dc != dp_pos_lim_ds)
 5303              		.loc 1 2803 3 view .LVU1471
2817:src/xeq.c     **** 		         && (!flag_D || (dp_pos_type_dc == dp_pos_type_ds
 5304              		.loc 1 2817 8 view .LVU1472
2857:src/xeq.c     **** 		    && (dp_exp_chs_dc != dp_exp_chs_ds)
 5305              		.loc 1 2857 3 view .LVU1473
2883:src/xeq.c     **** 		         && (!flag_D || dp_exp_chs_dc == dp_exp_chs_ds)
 5306              		.loc 1 2883 8 view .LVU1474
ARM GAS  /tmp/cc0UaEmF.s 			page 214


2909:src/xeq.c     **** 			if (exp_chs_ds == 0) {
 5307              		.loc 1 2909 8 view .LVU1475
2938:src/xeq.c     **** 				// Limit exponents so sign change is always legal
 5308              		.loc 1 2938 4 view .LVU1476
2945:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
 5309              		.loc 1 2945 9 view .LVU1477
2953:src/xeq.c     **** 					return;
 5310              		.loc 1 2953 5 view .LVU1478
2956:src/xeq.c     **** #else
 5311              		.loc 1 2956 5 view .LVU1479
2962:src/xeq.c     **** 			}
 5312              		.loc 1 2962 11 is_stmt 0 view .LVU1480
 5313 00c0 4429     		cmp	r1, #68
 5314 00c2 18BF     		it	ne
 5315 00c4 1646     		movne	r6, r2
 5316              	.LVL388:
2962:src/xeq.c     **** 			}
 5317              		.loc 1 2962 11 view .LVU1481
 5318              	.LBE1676:
2970:src/xeq.c     **** #  else
 5319              		.loc 1 2970 2 is_stmt 1 view .LVU1482
2979:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5320              		.loc 1 2979 2 view .LVU1483
2979:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5321              		.loc 1 2979 8 view .LVU1484
2979:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5322              		.loc 1 2979 9 is_stmt 0 view .LVU1485
 5323 00c6 FFF7FEFF 		bl	s_to_i
 5324              	.LVL389:
2979:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5325              		.loc 1 2979 8 view .LVU1486
 5326 00ca B042     		cmp	r0, r6
2980:src/xeq.c     **** 			p[i] = p[i + 1];
 5327              		.loc 1 2980 3 view .LVU1487
 5328 00cc 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
2979:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5329              		.loc 1 2979 8 view .LVU1488
 5330 00ce 0FDD     		ble	.L435
 5331              	.L456:
 5332              	.LVL390:
2980:src/xeq.c     **** 			p[i] = p[i + 1];
 5333              		.loc 1 2980 15 is_stmt 1 view .LVU1489
2980:src/xeq.c     **** 			p[i] = p[i + 1];
 5334              		.loc 1 2980 3 is_stmt 0 view .LVU1490
 5335 00d0 2BB1     		cbz	r3, .L437
 5336              	.LVL391:
 5337              	.L444:
2980:src/xeq.c     **** 			p[i] = p[i + 1];
 5338              		.loc 1 2980 3 view .LVU1491
 5339 00d2 3B46     		mov	r3, r7
 5340              	.L434:
2981:src/xeq.c     **** 		CmdLineLength--;
 5341              		.loc 1 2981 4 is_stmt 1 view .LVU1492
2981:src/xeq.c     **** 		CmdLineLength--;
 5342              		.loc 1 2981 9 is_stmt 0 view .LVU1493
 5343 00d4 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 5344 00d6 1A70     		strb	r2, [r3]
ARM GAS  /tmp/cc0UaEmF.s 			page 215


2980:src/xeq.c     **** 			p[i] = p[i + 1];
 5345              		.loc 1 2980 29 is_stmt 1 view .LVU1494
2980:src/xeq.c     **** 			p[i] = p[i + 1];
 5346              		.loc 1 2980 15 view .LVU1495
2980:src/xeq.c     **** 			p[i] = p[i + 1];
 5347              		.loc 1 2980 3 is_stmt 0 view .LVU1496
 5348 00d8 0133     		adds	r3, r3, #1
 5349 00da 002A     		cmp	r2, #0
 5350 00dc FAD1     		bne	.L434
 5351              	.L437:
2982:src/xeq.c     **** 	}
 5352              		.loc 1 2982 3 is_stmt 1 view .LVU1497
2982:src/xeq.c     **** 	}
 5353              		.loc 1 2982 16 is_stmt 0 view .LVU1498
 5354 00de 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
2979:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5355              		.loc 1 2979 9 view .LVU1499
 5356 00e0 3846     		mov	r0, r7
2982:src/xeq.c     **** 	}
 5357              		.loc 1 2982 16 view .LVU1500
 5358 00e2 013B     		subs	r3, r3, #1
 5359 00e4 2377     		strb	r3, [r4, #28]
2979:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5360              		.loc 1 2979 8 is_stmt 1 view .LVU1501
2979:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5361              		.loc 1 2979 9 is_stmt 0 view .LVU1502
 5362 00e6 FFF7FEFF 		bl	s_to_i
 5363              	.LVL392:
2979:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5364              		.loc 1 2979 8 view .LVU1503
 5365 00ea B042     		cmp	r0, r6
2980:src/xeq.c     **** 			p[i] = p[i + 1];
 5366              		.loc 1 2980 3 view .LVU1504
 5367 00ec 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
2979:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5368              		.loc 1 2979 8 view .LVU1505
 5369 00ee EFDC     		bgt	.L456
 5370              	.L435:
2979:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5371              		.loc 1 2979 26 view .LVU1506
 5372 00f0 302B     		cmp	r3, #48
 5373 00f2 EED0     		beq	.L444
 5374              	.LVL393:
 5375              	.L412:
2979:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5376              		.loc 1 2979 26 view .LVU1507
 5377              	.LBE1665:
 5378              	.LBE1664:
3694:src/xeq.c     **** 
 5379              		.loc 1 3694 1 view .LVU1508
 5380 00f4 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5381              	.LVL394:
 5382              	.L417:
3650:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5383              		.loc 1 3650 4 is_stmt 1 view .LVU1509
3650:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5384              		.loc 1 3650 11 is_stmt 0 view .LVU1510
ARM GAS  /tmp/cc0UaEmF.s 			page 216


 5385 00f6 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 5386              	.LVL395:
3652:src/xeq.c     **** #  ifdef FRACTION_ENTRY_OVERFLOW_LEFT
 5387              		.loc 1 3652 4 is_stmt 1 view .LVU1511
3652:src/xeq.c     **** #  ifdef FRACTION_ENTRY_OVERFLOW_LEFT
 5388              		.loc 1 3652 7 is_stmt 0 view .LVU1512
 5389 00f8 012B     		cmp	r3, #1
 5390 00fa 35D9     		bls	.L457
3655:src/xeq.c     **** #  elif defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 5391              		.loc 1 3655 5 is_stmt 1 view .LVU1513
3655:src/xeq.c     **** #  elif defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 5392              		.loc 1 3655 22 is_stmt 0 view .LVU1514
 5393 00fc 2D2A     		cmp	r2, #45
 5394 00fe 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
 5395 0100 30D0     		beq	.L441
 5396 0102 1223     		movs	r3, #18
 5397              	.LVL396:
 5398              	.L418:
3665:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5399              		.loc 1 3665 2 is_stmt 1 view .LVU1515
3665:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5400              		.loc 1 3665 5 is_stmt 0 view .LVU1516
 5401 0104 9342     		cmp	r3, r2
 5402 0106 ABDC     		bgt	.L425
 5403              	.LVL397:
 5404              	.L438:
3667:src/xeq.c     **** 		return;
 5405              		.loc 1 3667 3 is_stmt 1 view .LVU1517
3694:src/xeq.c     **** 
 5406              		.loc 1 3694 1 is_stmt 0 view .LVU1518
 5407 0108 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 5408              		.cfi_remember_state
 5409              		.cfi_restore 14
 5410              		.cfi_restore 7
 5411              		.cfi_restore 6
 5412              		.cfi_restore 5
 5413              		.cfi_restore 4
 5414              		.cfi_restore 3
 5415              		.cfi_def_cfa_offset 0
 5416              	.LVL398:
3667:src/xeq.c     **** 		return;
 5417              		.loc 1 3667 3 view .LVU1519
 5418 010c 0A20     		movs	r0, #10
 5419 010e FFF7FEBF 		b	report_warn
 5420              	.LVL399:
 5421              	.L455:
 5422              		.cfi_restore_state
3623:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5423              		.loc 1 3623 3 is_stmt 1 view .LVU1520
3623:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5424              		.loc 1 3623 12 is_stmt 0 view .LVU1521
 5425 0112 FFF7FEFF 		bl	int_base
 5426              	.LVL400:
3623:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5427              		.loc 1 3623 6 view .LVU1522
 5428 0116 A842     		cmp	r0, r5
 5429 0118 10D9     		bls	.L416
ARM GAS  /tmp/cc0UaEmF.s 			page 217


3665:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5430              		.loc 1 3665 2 is_stmt 1 view .LVU1523
3665:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5431              		.loc 1 3665 6 is_stmt 0 view .LVU1524
 5432 011a 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
3665:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5433              		.loc 1 3665 5 view .LVU1525
 5434 011c BA42     		cmp	r2, r7
 5435 011e F3DA     		bge	.L438
3671:src/xeq.c     **** 		append_cmdline(c - 10 + 'A');
 5436              		.loc 1 3671 2 is_stmt 1 view .LVU1526
3671:src/xeq.c     **** 		append_cmdline(c - 10 + 'A');
 5437              		.loc 1 3671 5 is_stmt 0 view .LVU1527
 5438 0120 092D     		cmp	r5, #9
 5439 0122 9DD9     		bls	.L425
3672:src/xeq.c     **** 	else {
 5440              		.loc 1 3672 3 is_stmt 1 view .LVU1528
 5441              	.LVL401:
 5442              	.LBB1677:
 5443              	.LBI1677:
2432:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5444              		.loc 1 2432 13 view .LVU1529
 5445              	.LBB1678:
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5446              		.loc 1 2433 2 view .LVU1530
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5447              		.loc 1 2433 23 is_stmt 0 view .LVU1531
 5448 0124 531C     		adds	r3, r2, #1
 5449 0126 DBB2     		uxtb	r3, r3
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5450              		.loc 1 2433 27 view .LVU1532
 5451 0128 2244     		add	r2, r2, r4
2434:src/xeq.c     **** }
 5452              		.loc 1 2434 25 view .LVU1533
 5453 012a E118     		adds	r1, r4, r3
 5454              	.LBE1678:
 5455              	.LBE1677:
3672:src/xeq.c     **** 	else {
 5456              		.loc 1 3672 3 view .LVU1534
 5457 012c 3735     		adds	r5, r5, #55
 5458              	.LVL402:
 5459              	.LBB1680:
 5460              	.LBB1679:
2434:src/xeq.c     **** }
 5461              		.loc 1 2434 25 view .LVU1535
 5462 012e 0026     		movs	r6, #0
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5463              		.loc 1 2433 27 view .LVU1536
 5464 0130 82F82050 		strb	r5, [r2, #32]
2434:src/xeq.c     **** }
 5465              		.loc 1 2434 2 is_stmt 1 view .LVU1537
2434:src/xeq.c     **** }
 5466              		.loc 1 2434 25 is_stmt 0 view .LVU1538
 5467 0134 81F82060 		strb	r6, [r1, #32]
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5468              		.loc 1 2433 23 view .LVU1539
 5469 0138 2377     		strb	r3, [r4, #28]
ARM GAS  /tmp/cc0UaEmF.s 			page 218


 5470              	.LBE1679:
 5471              	.LBE1680:
3694:src/xeq.c     **** 
 5472              		.loc 1 3694 1 view .LVU1540
 5473 013a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5474              	.LVL403:
 5475              	.L416:
3624:src/xeq.c     **** 			return;
 5476              		.loc 1 3624 4 is_stmt 1 view .LVU1541
3694:src/xeq.c     **** 
 5477              		.loc 1 3694 1 is_stmt 0 view .LVU1542
 5478 013c BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 5479              		.cfi_remember_state
 5480              		.cfi_restore 14
 5481              		.cfi_restore 7
 5482              		.cfi_restore 6
 5483              		.cfi_restore 5
 5484              		.cfi_restore 4
 5485              		.cfi_restore 3
 5486              		.cfi_def_cfa_offset 0
 5487              	.LVL404:
3624:src/xeq.c     **** 			return;
 5488              		.loc 1 3624 4 view .LVU1543
 5489 0140 0920     		movs	r0, #9
 5490 0142 FFF7FEBF 		b	report_warn
 5491              	.LVL405:
 5492              	.L427:
 5493              		.cfi_restore_state
3689:src/xeq.c     **** 
 5494              		.loc 1 3689 3 is_stmt 1 view .LVU1544
 5495              	.LBB1681:
2432:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5496              		.loc 1 2432 13 view .LVU1545
 5497              	.LBB1660:
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5498              		.loc 1 2433 2 view .LVU1546
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5499              		.loc 1 2433 23 is_stmt 0 view .LVU1547
 5500 0146 511C     		adds	r1, r2, #1
 5501 0148 C9B2     		uxtb	r1, r1
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5502              		.loc 1 2433 27 view .LVU1548
 5503 014a 2244     		add	r2, r2, r4
2434:src/xeq.c     **** }
 5504              		.loc 1 2434 25 view .LVU1549
 5505 014c 6718     		adds	r7, r4, r1
 5506              	.LBE1660:
 5507              	.LBE1681:
3689:src/xeq.c     **** 
 5508              		.loc 1 3689 3 view .LVU1550
 5509 014e 3035     		adds	r5, r5, #48
 5510              	.LVL406:
3691:src/xeq.c     **** 			exponent_adjusted(1);
 5511              		.loc 1 3691 7 view .LVU1551
 5512 0150 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
 5513              	.LBB1682:
 5514              	.LBB1661:
ARM GAS  /tmp/cc0UaEmF.s 			page 219


2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5515              		.loc 1 2433 27 view .LVU1552
 5516 0152 82F82050 		strb	r5, [r2, #32]
2434:src/xeq.c     **** }
 5517              		.loc 1 2434 2 is_stmt 1 view .LVU1553
2434:src/xeq.c     **** }
 5518              		.loc 1 2434 25 is_stmt 0 view .LVU1554
 5519 0156 0022     		movs	r2, #0
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5520              		.loc 1 2433 23 view .LVU1555
 5521 0158 2177     		strb	r1, [r4, #28]
2434:src/xeq.c     **** }
 5522              		.loc 1 2434 25 view .LVU1556
 5523 015a 87F82020 		strb	r2, [r7, #32]
2434:src/xeq.c     **** }
 5524              		.loc 1 2434 25 view .LVU1557
 5525              	.LBE1661:
 5526              	.LBE1682:
3691:src/xeq.c     **** 			exponent_adjusted(1);
 5527              		.loc 1 3691 3 is_stmt 1 view .LVU1558
3691:src/xeq.c     **** 			exponent_adjusted(1);
 5528              		.loc 1 3691 6 is_stmt 0 view .LVU1559
 5529 015e 002B     		cmp	r3, #0
 5530 0160 92D1     		bne	.L439
3694:src/xeq.c     **** 
 5531              		.loc 1 3694 1 view .LVU1560
 5532 0162 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5533              	.LVL407:
 5534              	.L441:
3634:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5535              		.loc 1 3634 8 view .LVU1561
 5536 0164 1323     		movs	r3, #19
 5537 0166 CDE7     		b	.L418
 5538              	.LVL408:
 5539              	.L457:
3634:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5540              		.loc 1 3634 8 view .LVU1562
 5541 0168 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
3650:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5542              		.loc 1 3650 8 view .LVU1563
 5543 016a 3B44     		add	r3, r3, r7
 5544              	.LVL409:
3650:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5545              		.loc 1 3650 8 view .LVU1564
 5546 016c CAE7     		b	.L418
 5547              	.LVL410:
 5548              	.L428:
3689:src/xeq.c     **** 
 5549              		.loc 1 3689 3 is_stmt 1 view .LVU1565
 5550              	.LBB1683:
2432:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5551              		.loc 1 2432 13 view .LVU1566
 5552              	.LBB1662:
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5553              		.loc 1 2433 2 view .LVU1567
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5554              		.loc 1 2433 23 is_stmt 0 view .LVU1568
ARM GAS  /tmp/cc0UaEmF.s 			page 220


 5555 016e 531C     		adds	r3, r2, #1
 5556 0170 DBB2     		uxtb	r3, r3
2434:src/xeq.c     **** }
 5557              		.loc 1 2434 25 view .LVU1569
 5558 0172 E118     		adds	r1, r4, r3
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5559              		.loc 1 2433 27 view .LVU1570
 5560 0174 2244     		add	r2, r2, r4
 5561 0176 3020     		movs	r0, #48
 5562 0178 82F82000 		strb	r0, [r2, #32]
2434:src/xeq.c     **** }
 5563              		.loc 1 2434 2 is_stmt 1 view .LVU1571
2434:src/xeq.c     **** }
 5564              		.loc 1 2434 25 is_stmt 0 view .LVU1572
 5565 017c 81F82050 		strb	r5, [r1, #32]
 5566              	.LVL411:
2434:src/xeq.c     **** }
 5567              		.loc 1 2434 25 view .LVU1573
 5568              	.LBE1662:
 5569              	.LBE1683:
3691:src/xeq.c     **** 			exponent_adjusted(1);
 5570              		.loc 1 3691 3 is_stmt 1 view .LVU1574
 5571              	.LBB1684:
 5572              	.LBB1663:
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5573              		.loc 1 2433 23 is_stmt 0 view .LVU1575
 5574 0180 2377     		strb	r3, [r4, #28]
 5575              	.LBE1663:
 5576              	.LBE1684:
3694:src/xeq.c     **** 
 5577              		.loc 1 3694 1 view .LVU1576
 5578 0182 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5579              	.LVL412:
 5580              	.L459:
3694:src/xeq.c     **** 
 5581              		.loc 1 3694 1 view .LVU1577
 5582              		.align	2
 5583              	.L458:
 5584 0184 00000000 		.word	main_ram
 5585 0188 00000000 		.word	StateWhileOn
 5586 018c 33000000 		.word	StateWhileOn+51
 5587              		.cfi_endproc
 5588              	.LFE209:
 5590              		.section	.text.s_to_ull,"ax",%progbits
 5591              		.align	1
 5592              		.p2align 2,,3
 5593              		.global	s_to_ull
 5594              		.syntax unified
 5595              		.thumb
 5596              		.thumb_func
 5597              		.fpu fpv4-sp-d16
 5599              	s_to_ull:
 5600              	.LVL413:
 5601              	.LFB81:
 971:src/xeq.c     **** 	unsigned long long int x = 0;
 5602              		.loc 1 971 67 is_stmt 1 view -0
 5603              		.cfi_startproc
ARM GAS  /tmp/cc0UaEmF.s 			page 221


 5604              		@ args = 0, pretend = 0, frame = 0
 5605              		@ frame_needed = 0, uses_anonymous_args = 0
 5606              		@ link register save eliminated.
 972:src/xeq.c     **** 
 5607              		.loc 1 972 2 view .LVU1579
 971:src/xeq.c     **** 	unsigned long long int x = 0;
 5608              		.loc 1 971 67 is_stmt 0 view .LVU1580
 5609 0000 F0B4     		push	{r4, r5, r6, r7}
 5610              		.cfi_def_cfa_offset 16
 5611              		.cfi_offset 4, -16
 5612              		.cfi_offset 5, -12
 5613              		.cfi_offset 6, -8
 5614              		.cfi_offset 7, -4
 972:src/xeq.c     **** 
 5615              		.loc 1 972 25 view .LVU1581
 5616 0002 0026     		movs	r6, #0
 5617 0004 0027     		movs	r7, #0
 5618 0006 02E0     		b	.L464
 5619              	.LVL414:
 5620              	.L466:
 5621              	.LBB1685:
 986:src/xeq.c     **** 	}
 5622              		.loc 1 986 5 view .LVU1582
 5623 0008 E618     		adds	r6, r4, r3
 5624              	.LVL415:
 986:src/xeq.c     **** 	}
 5625              		.loc 1 986 5 view .LVU1583
 5626 000a 45F10007 		adc	r7, r5, #0
 5627              	.LVL416:
 986:src/xeq.c     **** 	}
 5628              		.loc 1 986 5 view .LVU1584
 5629              	.LBE1685:
 974:src/xeq.c     **** 		unsigned int n;
 5630              		.loc 1 974 8 is_stmt 1 view .LVU1585
 5631              	.L464:
 974:src/xeq.c     **** 		unsigned int n;
 5632              		.loc 1 974 2 view .LVU1586
 5633              	.LBB1686:
 975:src/xeq.c     **** 		const char c = *s++;
 5634              		.loc 1 975 3 view .LVU1587
 976:src/xeq.c     **** 
 5635              		.loc 1 976 3 view .LVU1588
 979:src/xeq.c     **** 		else if (c >= 'A' && c <= 'F')
 5636              		.loc 1 979 4 view .LVU1589
 980:src/xeq.c     **** 			n = c - 'A' + 10;
 5637              		.loc 1 980 8 view .LVU1590
 981:src/xeq.c     **** 		else
 5638              		.loc 1 981 4 view .LVU1591
 976:src/xeq.c     **** 
 5639              		.loc 1 976 14 is_stmt 0 view .LVU1592
 5640 000e 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 5641              	.LVL417:
 978:src/xeq.c     **** 			n = c - '0';
 5642              		.loc 1 978 3 is_stmt 1 view .LVU1593
 978:src/xeq.c     **** 			n = c - '0';
 5643              		.loc 1 978 16 is_stmt 0 view .LVU1594
 5644 0012 A2F13003 		sub	r3, r2, #48
ARM GAS  /tmp/cc0UaEmF.s 			page 222


 978:src/xeq.c     **** 			n = c - '0';
 5645              		.loc 1 978 6 view .LVU1595
 5646 0016 DCB2     		uxtb	r4, r3
 5647 0018 092C     		cmp	r4, #9
 980:src/xeq.c     **** 			n = c - 'A' + 10;
 5648              		.loc 1 980 11 view .LVU1596
 5649 001a A2F14105 		sub	r5, r2, #65
 978:src/xeq.c     **** 			n = c - '0';
 5650              		.loc 1 978 6 view .LVU1597
 5651 001e 03D9     		bls	.L462
 980:src/xeq.c     **** 			n = c - 'A' + 10;
 5652              		.loc 1 980 11 view .LVU1598
 5653 0020 052D     		cmp	r5, #5
 5654 0022 07D8     		bhi	.L460
 981:src/xeq.c     **** 		else
 5655              		.loc 1 981 16 view .LVU1599
 5656 0024 A2F13703 		sub	r3, r2, #55
 5657              	.LVL418:
 5658              	.L462:
 984:src/xeq.c     **** 			break;
 5659              		.loc 1 984 3 is_stmt 1 view .LVU1600
 986:src/xeq.c     **** 	}
 5660              		.loc 1 986 3 view .LVU1601
 986:src/xeq.c     **** 	}
 5661              		.loc 1 986 9 is_stmt 0 view .LVU1602
 5662 0028 A1FB0645 		umull	r4, r5, r1, r6
 984:src/xeq.c     **** 			break;
 5663              		.loc 1 984 6 view .LVU1603
 5664 002c 8B42     		cmp	r3, r1
 986:src/xeq.c     **** 	}
 5665              		.loc 1 986 9 view .LVU1604
 5666 002e 01FB0755 		mla	r5, r1, r7, r5
 984:src/xeq.c     **** 			break;
 5667              		.loc 1 984 6 view .LVU1605
 5668 0032 E9D3     		bcc	.L466
 5669              	.LVL419:
 5670              	.L460:
 984:src/xeq.c     **** 			break;
 5671              		.loc 1 984 6 view .LVU1606
 5672              	.LBE1686:
 989:src/xeq.c     **** 
 5673              		.loc 1 989 1 view .LVU1607
 5674 0034 3046     		mov	r0, r6
 5675              	.LVL420:
 989:src/xeq.c     **** 
 5676              		.loc 1 989 1 view .LVU1608
 5677 0036 3946     		mov	r1, r7
 5678              	.LVL421:
 989:src/xeq.c     **** 
 5679              		.loc 1 989 1 view .LVU1609
 5680 0038 F0BC     		pop	{r4, r5, r6, r7}
 5681              		.cfi_restore 7
 5682              		.cfi_restore 6
 5683              		.cfi_restore 5
 5684              		.cfi_restore 4
 5685              		.cfi_def_cfa_offset 0
 5686              	.LVL422:
ARM GAS  /tmp/cc0UaEmF.s 			page 223


 989:src/xeq.c     **** 
 5687              		.loc 1 989 1 view .LVU1610
 5688 003a 7047     		bx	lr
 5689              		.cfi_endproc
 5690              	.LFE81:
 5692              		.section	.text.get_cmdline,"ax",%progbits
 5693              		.align	1
 5694              		.p2align 2,,3
 5695              		.global	get_cmdline
 5696              		.syntax unified
 5697              		.thumb
 5698              		.thumb_func
 5699              		.fpu fpv4-sp-d16
 5701              	get_cmdline:
 5702              	.LFB82:
 991:src/xeq.c     **** 	if (CmdLineLength) {
 5703              		.loc 1 991 31 is_stmt 1 view -0
 5704              		.cfi_startproc
 5705              		@ args = 0, pretend = 0, frame = 0
 5706              		@ frame_needed = 0, uses_anonymous_args = 0
 5707              		@ link register save eliminated.
 992:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
 5708              		.loc 1 992 2 view .LVU1612
 992:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
 5709              		.loc 1 992 6 is_stmt 0 view .LVU1613
 5710 0000 044B     		ldr	r3, .L470
 5711 0002 187F     		ldrb	r0, [r3, #28]	@ zero_extendqisi2
 992:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
 5712              		.loc 1 992 5 view .LVU1614
 5713 0004 28B1     		cbz	r0, .L467
 993:src/xeq.c     **** 		return Cmdline;
 5714              		.loc 1 993 3 is_stmt 1 view .LVU1615
 993:src/xeq.c     **** 		return Cmdline;
 5715              		.loc 1 993 26 is_stmt 0 view .LVU1616
 5716 0006 1A18     		adds	r2, r3, r0
 5717 0008 0021     		movs	r1, #0
 994:src/xeq.c     **** 	}
 5718              		.loc 1 994 10 view .LVU1617
 5719 000a 03F12000 		add	r0, r3, #32
 993:src/xeq.c     **** 		return Cmdline;
 5720              		.loc 1 993 26 view .LVU1618
 5721 000e 82F82010 		strb	r1, [r2, #32]
 994:src/xeq.c     **** 	}
 5722              		.loc 1 994 3 is_stmt 1 view .LVU1619
 5723              	.L467:
 997:src/xeq.c     **** 
 5724              		.loc 1 997 1 is_stmt 0 view .LVU1620
 5725 0012 7047     		bx	lr
 5726              	.L471:
 5727              		.align	2
 5728              	.L470:
 5729 0014 00000000 		.word	StateWhileOn
 5730              		.cfi_endproc
 5731              	.LFE82:
 5733              		.section	.text.is_bad_cmdline,"ax",%progbits
 5734              		.align	1
 5735              		.p2align 2,,3
ARM GAS  /tmp/cc0UaEmF.s 			page 224


 5736              		.global	is_bad_cmdline
 5737              		.syntax unified
 5738              		.thumb
 5739              		.thumb_func
 5740              		.fpu fpv4-sp-d16
 5742              	is_bad_cmdline:
 5743              	.LFB83:
1014:src/xeq.c     **** #ifndef IGNORE_INVALID_FRACTIONS
 5744              		.loc 1 1014 1 is_stmt 1 view -0
 5745              		.cfi_startproc
 5746              		@ args = 0, pretend = 0, frame = 0
 5747              		@ frame_needed = 0, uses_anonymous_args = 0
 5748              		@ link register save eliminated.
1035:src/xeq.c     **** }
 5749              		.loc 1 1035 2 view .LVU1622
1036:src/xeq.c     **** 
 5750              		.loc 1 1036 1 is_stmt 0 view .LVU1623
 5751 0000 0020     		movs	r0, #0
 5752 0002 7047     		bx	lr
 5753              		.cfi_endproc
 5754              	.LFE83:
 5756              		.section	.text.get_flash_reg_n,"ax",%progbits
 5757              		.align	1
 5758              		.p2align 2,,3
 5759              		.global	get_flash_reg_n
 5760              		.syntax unified
 5761              		.thumb
 5762              		.thumb_func
 5763              		.fpu fpv4-sp-d16
 5765              	get_flash_reg_n:
 5766              	.LVL423:
 5767              	.LFB88:
1199:src/xeq.c     **** 	return (REGISTER *) reg_address(n, BackupFlash._regs + TOPREALREG - BackupFlash._numregs,
 5768              		.loc 1 1199 34 is_stmt 1 view -0
 5769              		.cfi_startproc
 5770              		@ args = 0, pretend = 0, frame = 0
 5771              		@ frame_needed = 0, uses_anonymous_args = 0
 5772              		@ link register save eliminated.
1200:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5773              		.loc 1 1200 2 view .LVU1625
1200:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5774              		.loc 1 1200 37 is_stmt 0 view .LVU1626
 5775 0000 064B     		ldr	r3, .L474
 5776 0002 1A68     		ldr	r2, [r3]
1200:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5777              		.loc 1 1200 68 view .LVU1627
 5778 0004 92F8CF37 		ldrb	r3, [r2, #1999]	@ zero_extendqisi2
1200:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5779              		.loc 1 1200 37 view .LVU1628
 5780 0008 02F58661 		add	r1, r2, #1072
1200:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5781              		.loc 1 1200 68 view .LVU1629
 5782 000c C3F16403 		rsb	r3, r3, #100
1200:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5783              		.loc 1 1200 22 view .LVU1630
 5784 0010 01EBC301 		add	r1, r1, r3, lsl #3
 5785 0014 02F5EA62 		add	r2, r2, #1872
ARM GAS  /tmp/cc0UaEmF.s 			page 225


 5786 0018 FFF7FEBF 		b	reg_address
 5787              	.LVL424:
 5788              	.L475:
1200:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5789              		.loc 1 1200 22 view .LVU1631
 5790              		.align	2
 5791              	.L474:
 5792 001c 00000000 		.word	backup_ram
 5793              		.cfi_endproc
 5794              	.LFE88:
 5796              		.section	.text.get_const,"ax",%progbits
 5797              		.align	1
 5798              		.p2align 2,,3
 5799              		.global	get_const
 5800              		.syntax unified
 5801              		.thumb
 5802              		.thumb_func
 5803              		.fpu fpv4-sp-d16
 5805              	get_const:
 5806              	.LVL425:
 5807              	.LFB89:
1210:src/xeq.c     **** 	static REGISTER result;
 5808              		.loc 1 1210 1 is_stmt 1 view -0
 5809              		.cfi_startproc
 5810              		@ args = 0, pretend = 0, frame = 40
 5811              		@ frame_needed = 0, uses_anonymous_args = 0
1211:src/xeq.c     **** 	const int i = cnsts[index].index;
 5812              		.loc 1 1211 2 view .LVU1633
1212:src/xeq.c     **** 	if (dbl) {
 5813              		.loc 1 1212 2 view .LVU1634
1210:src/xeq.c     **** 	static REGISTER result;
 5814              		.loc 1 1210 1 is_stmt 0 view .LVU1635
 5815 0000 00B5     		push	{lr}
 5816              		.cfi_def_cfa_offset 4
 5817              		.cfi_offset 14, -4
1212:src/xeq.c     **** 	if (dbl) {
 5818              		.loc 1 1212 28 view .LVU1636
 5819 0002 1C4B     		ldr	r3, .L482
 5820 0004 00EB4000 		add	r0, r0, r0, lsl #1
 5821              	.LVL426:
1210:src/xeq.c     **** 	static REGISTER result;
 5822              		.loc 1 1210 1 view .LVU1637
 5823 0008 8BB0     		sub	sp, sp, #44
 5824              		.cfi_def_cfa_offset 48
1212:src/xeq.c     **** 	if (dbl) {
 5825              		.loc 1 1212 28 view .LVU1638
 5826 000a 13F82030 		ldrb	r3, [r3, r0, lsl #2]	@ zero_extendqisi2
 5827              	.LVL427:
1213:src/xeq.c     **** 		if (i <= 1 || i >= 128)
 5828              		.loc 1 1213 2 is_stmt 1 view .LVU1639
1213:src/xeq.c     **** 		if (i <= 1 || i >= 128)
 5829              		.loc 1 1213 5 is_stmt 0 view .LVU1640
 5830 000e 51B1     		cbz	r1, .L477
1214:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
 5831              		.loc 1 1214 3 is_stmt 1 view .LVU1641
1214:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
 5832              		.loc 1 1214 14 is_stmt 0 view .LVU1642
ARM GAS  /tmp/cc0UaEmF.s 			page 226


 5833 0010 9A1E     		subs	r2, r3, #2
1214:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
 5834              		.loc 1 1214 6 view .LVU1643
 5835 0012 7D2A     		cmp	r2, #125
 5836 0014 0FD9     		bls	.L478
1215:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5837              		.loc 1 1215 4 is_stmt 1 view .LVU1644
1215:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5838              		.loc 1 1215 11 is_stmt 0 view .LVU1645
 5839 0016 184A     		ldr	r2, .L482+4
1215:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5840              		.loc 1 1215 36 view .LVU1646
 5841 0018 03F07F00 		and	r0, r3, #127
1215:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5842              		.loc 1 1215 11 view .LVU1647
 5843 001c 02EB0010 		add	r0, r2, r0, lsl #4
1224:src/xeq.c     **** 
 5844              		.loc 1 1224 1 view .LVU1648
 5845 0020 0BB0     		add	sp, sp, #44
 5846              		.cfi_remember_state
 5847              		.cfi_def_cfa_offset 4
 5848              		@ sp needed
 5849 0022 5DF804FB 		ldr	pc, [sp], #4
 5850              	.L477:
 5851              		.cfi_restore_state
1219:src/xeq.c     **** 			return (REGISTER *) (cnsts_d64 + i);
 5852              		.loc 1 1219 3 is_stmt 1 view .LVU1649
1219:src/xeq.c     **** 			return (REGISTER *) (cnsts_d64 + i);
 5853              		.loc 1 1219 6 is_stmt 0 view .LVU1650
 5854 0026 1A06     		lsls	r2, r3, #24
 5855 0028 13D4     		bmi	.L480
1220:src/xeq.c     **** 		packed_from_packed128(&(result.s), cnsts_d128 - 128 + i);
 5856              		.loc 1 1220 4 is_stmt 1 view .LVU1651
1220:src/xeq.c     **** 		packed_from_packed128(&(result.s), cnsts_d128 - 128 + i);
 5857              		.loc 1 1220 11 is_stmt 0 view .LVU1652
 5858 002a 1448     		ldr	r0, .L482+8
 5859 002c 00EBC300 		add	r0, r0, r3, lsl #3
1224:src/xeq.c     **** 
 5860              		.loc 1 1224 1 view .LVU1653
 5861 0030 0BB0     		add	sp, sp, #44
 5862              		.cfi_remember_state
 5863              		.cfi_def_cfa_offset 4
 5864              		@ sp needed
 5865 0032 5DF804FB 		ldr	pc, [sp], #4
 5866              	.L478:
 5867              		.cfi_restore_state
1216:src/xeq.c     **** 	}
 5868              		.loc 1 1216 3 is_stmt 1 view .LVU1654
 5869              	.LVL428:
 5870              	.LBB1687:
 5871              	.LBI1687:
 645:src/xeq.c     **** 	decNumber temp;
 5872              		.loc 1 645 6 view .LVU1655
 5873              	.LBB1688:
 646:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 5874              		.loc 1 646 2 view .LVU1656
 647:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 227


 5875              		.loc 1 647 2 view .LVU1657
 5876              	.LBE1688:
 5877              	.LBE1687:
1216:src/xeq.c     **** 	}
 5878              		.loc 1 1216 3 is_stmt 0 view .LVU1658
 5879 0036 1148     		ldr	r0, .L482+8
 5880              	.LBB1690:
 5881              	.LBB1689:
 647:src/xeq.c     **** }
 5882              		.loc 1 647 27 view .LVU1659
 5883 0038 01A9     		add	r1, sp, #4
 5884              	.LVL429:
 647:src/xeq.c     **** }
 5885              		.loc 1 647 27 view .LVU1660
 5886 003a 00EBC300 		add	r0, r0, r3, lsl #3
 5887 003e FFF7FEFF 		bl	decimal64ToNumber
 5888              	.LVL430:
 647:src/xeq.c     **** }
 5889              		.loc 1 647 27 view .LVU1661
 5890 0042 0146     		mov	r1, r0
 647:src/xeq.c     **** }
 5891              		.loc 1 647 2 view .LVU1662
 5892 0044 0E48     		ldr	r0, .L482+12
 5893 0046 FFF7FEFF 		bl	packed128_from_number
 5894              	.LVL431:
 5895              	.LBE1689:
 5896              	.LBE1690:
1223:src/xeq.c     **** }
 5897              		.loc 1 1223 9 view .LVU1663
 5898 004a 0D48     		ldr	r0, .L482+12
1224:src/xeq.c     **** 
 5899              		.loc 1 1224 1 view .LVU1664
 5900 004c 0BB0     		add	sp, sp, #44
 5901              		.cfi_remember_state
 5902              		.cfi_def_cfa_offset 4
 5903              		@ sp needed
 5904 004e 5DF804FB 		ldr	pc, [sp], #4
 5905              	.LVL432:
 5906              	.L480:
 5907              		.cfi_restore_state
1221:src/xeq.c     **** 	}
 5908              		.loc 1 1221 3 is_stmt 1 view .LVU1665
 5909              	.LBB1691:
 5910              	.LBI1691:
 639:src/xeq.c     **** 	decNumber temp;
 5911              		.loc 1 639 6 view .LVU1666
 5912              	.LBB1692:
 640:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 5913              		.loc 1 640 2 view .LVU1667
 641:src/xeq.c     **** }
 5914              		.loc 1 641 2 view .LVU1668
 5915              	.LBE1692:
 5916              	.LBE1691:
1221:src/xeq.c     **** 	}
 5917              		.loc 1 1221 3 is_stmt 0 view .LVU1669
 5918 0052 0948     		ldr	r0, .L482+4
1221:src/xeq.c     **** 	}
ARM GAS  /tmp/cc0UaEmF.s 			page 228


 5919              		.loc 1 1221 55 view .LVU1670
 5920 0054 03F18053 		add	r3, r3, #268435456
 5921              	.LVL433:
1221:src/xeq.c     **** 	}
 5922              		.loc 1 1221 55 view .LVU1671
 5923 0058 803B     		subs	r3, r3, #128
 5924              	.LVL434:
 5925              	.LBB1694:
 5926              	.LBB1693:
 641:src/xeq.c     **** }
 5927              		.loc 1 641 24 view .LVU1672
 5928 005a 00EB0310 		add	r0, r0, r3, lsl #4
 5929 005e 01A9     		add	r1, sp, #4
 5930              	.LVL435:
 641:src/xeq.c     **** }
 5931              		.loc 1 641 24 view .LVU1673
 5932 0060 FFF7FEFF 		bl	decimal128ToNumber
 5933              	.LVL436:
 641:src/xeq.c     **** }
 5934              		.loc 1 641 24 view .LVU1674
 5935 0064 0146     		mov	r1, r0
 641:src/xeq.c     **** }
 5936              		.loc 1 641 2 view .LVU1675
 5937 0066 0648     		ldr	r0, .L482+12
 5938 0068 FFF7FEFF 		bl	packed_from_number
 5939              	.LVL437:
 5940              	.LBE1693:
 5941              	.LBE1694:
1223:src/xeq.c     **** }
 5942              		.loc 1 1223 9 view .LVU1676
 5943 006c 0448     		ldr	r0, .L482+12
 5944              	.LVL438:
1224:src/xeq.c     **** 
 5945              		.loc 1 1224 1 view .LVU1677
 5946 006e 0BB0     		add	sp, sp, #44
 5947              		.cfi_def_cfa_offset 4
 5948              		@ sp needed
 5949 0070 5DF804FB 		ldr	pc, [sp], #4
 5950              	.L483:
 5951              		.align	2
 5952              	.L482:
 5953 0074 00000000 		.word	cnsts
 5954 0078 00000000 		.word	cnsts_d128
 5955 007c 00000000 		.word	cnsts_d64
 5956 0080 00000000 		.word	.LANCHOR2
 5957              		.cfi_endproc
 5958              	.LFE89:
 5960              		.section	.text.get_reg_n,"ax",%progbits
 5961              		.align	1
 5962              		.p2align 2,,3
 5963              		.global	get_reg_n
 5964              		.syntax unified
 5965              		.thumb
 5966              		.thumb_func
 5967              		.fpu fpv4-sp-d16
 5969              	get_reg_n:
 5970              	.LVL439:
ARM GAS  /tmp/cc0UaEmF.s 			page 229


 5971              	.LFB87:
1178:src/xeq.c     **** 	const int dbl = is_dblmode();
 5972              		.loc 1 1178 28 is_stmt 1 view -0
 5973              		.cfi_startproc
 5974              		@ args = 0, pretend = 0, frame = 0
 5975              		@ frame_needed = 0, uses_anonymous_args = 0
 5976              		@ link register save eliminated.
1179:src/xeq.c     **** 
 5977              		.loc 1 1179 2 view .LVU1679
 5978              	.LBB1695:
 5979              	.LBI1695:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 5980              		.loc 1 932 5 view .LVU1680
 5981              	.LBB1696:
 933:src/xeq.c     **** }
 5982              		.loc 1 933 2 view .LVU1681
 933:src/xeq.c     **** }
 5983              		.loc 1 933 12 is_stmt 0 view .LVU1682
 5984 0000 294B     		ldr	r3, .L499
 5985 0002 1A68     		ldr	r2, [r3]
 933:src/xeq.c     **** }
 5986              		.loc 1 933 24 view .LVU1683
 5987 0004 B2F8E817 		ldrh	r1, [r2, #2024]
 5988 0008 44F20103 		movw	r3, #16385
 5989 000c 0B40     		ands	r3, r3, r1
 5990 000e A3F58041 		sub	r1, r3, #16384
 5991 0012 B1FA81F1 		clz	r1, r1
 5992              	.LBE1696:
 5993              	.LBE1695:
1181:src/xeq.c     **** 		n -= CONST_REG_BASE;
 5994              		.loc 1 1181 5 view .LVU1684
 5995 0016 B0F5FA6F 		cmp	r0, #2000
 5996              	.LBB1698:
 5997              	.LBB1697:
 933:src/xeq.c     **** }
 5998              		.loc 1 933 24 view .LVU1685
 5999 001a 4FEA5111 		lsr	r1, r1, #5
 6000              	.LVL440:
 933:src/xeq.c     **** }
 6001              		.loc 1 933 24 view .LVU1686
 6002              	.LBE1697:
 6003              	.LBE1698:
1181:src/xeq.c     **** 		n -= CONST_REG_BASE;
 6004              		.loc 1 1181 2 is_stmt 1 view .LVU1687
1181:src/xeq.c     **** 		n -= CONST_REG_BASE;
 6005              		.loc 1 1181 5 is_stmt 0 view .LVU1688
 6006 001e 26DA     		bge	.L496
1185:src/xeq.c     **** 		return get_flash_reg_n(n - FLASH_REG_BASE);
 6007              		.loc 1 1185 2 is_stmt 1 view .LVU1689
1185:src/xeq.c     **** 		return get_flash_reg_n(n - FLASH_REG_BASE);
 6008              		.loc 1 1185 5 is_stmt 0 view .LVU1690
 6009 0020 B0F57A7F 		cmp	r0, #1000
 6010 0024 13DA     		bge	.L497
1188:src/xeq.c     **** 		// local register on the return stack
 6011              		.loc 1 1188 2 is_stmt 1 view .LVU1691
1188:src/xeq.c     **** 		// local register on the return stack
 6012              		.loc 1 1188 5 is_stmt 0 view .LVU1692
ARM GAS  /tmp/cc0UaEmF.s 			page 230


 6013 0026 6F28     		cmp	r0, #111
1178:src/xeq.c     **** 	const int dbl = is_dblmode();
 6014              		.loc 1 1178 28 view .LVU1693
 6015 0028 70B4     		push	{r4, r5, r6}
 6016              		.cfi_def_cfa_offset 12
 6017              		.cfi_offset 4, -12
 6018              		.cfi_offset 5, -8
 6019              		.cfi_offset 6, -4
1188:src/xeq.c     **** 		// local register on the return stack
 6020              		.loc 1 1188 5 view .LVU1694
 6021 002a 03DD     		ble	.L487
 6022              	.LBB1699:
 6023              	.LBI1699:
 230:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 6024              		.loc 1 230 5 is_stmt 1 view .LVU1695
 6025              	.LBE1699:
 231:src/xeq.c     **** }
 6026              		.loc 1 231 2 view .LVU1696
 6027              	.LVL441:
 6028              	.LBB1712:
 6029              	.LBB1700:
 6030              	.LBI1700:
 222:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 6031              		.loc 1 222 5 view .LVU1697
 6032              	.LBB1701:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 6033              		.loc 1 223 2 view .LVU1698
 6034              	.LBE1701:
 6035              	.LBE1700:
 6036              	.LBE1712:
 933:src/xeq.c     **** }
 6037              		.loc 1 933 2 view .LVU1699
 6038              	.LBB1713:
 6039              	.LBB1710:
 6040              	.LBB1708:
 224:src/xeq.c     **** }
 6041              		.loc 1 224 2 view .LVU1700
 6042              	.LBB1702:
 6043              	.LBI1702:
 214:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 6044              		.loc 1 214 5 view .LVU1701
 6045              	.LBB1703:
 215:src/xeq.c     **** }
 6046              		.loc 1 215 2 view .LVU1702
 215:src/xeq.c     **** }
 6047              		.loc 1 215 9 is_stmt 0 view .LVU1703
 6048 002c B2F9DE47 		ldrsh	r4, [r2, #2014]
 215:src/xeq.c     **** }
 6049              		.loc 1 215 57 view .LVU1704
 6050 0030 002C     		cmp	r4, #0
 6051 0032 20DB     		blt	.L498
 6052              	.LVL442:
 6053              	.L487:
 215:src/xeq.c     **** }
 6054              		.loc 1 215 57 view .LVU1705
 6055              	.LBE1703:
 6056              	.LBE1702:
ARM GAS  /tmp/cc0UaEmF.s 			page 231


 6057              	.LBE1708:
 6058              	.LBE1710:
 6059              	.LBE1713:
1195:src/xeq.c     **** }
 6060              		.loc 1 1195 2 is_stmt 1 view .LVU1706
1195:src/xeq.c     **** }
 6061              		.loc 1 1195 55 is_stmt 0 view .LVU1707
 6062 0034 92F8CF37 		ldrb	r3, [r2, #1999]	@ zero_extendqisi2
 6063              	.LVL443:
1195:src/xeq.c     **** }
 6064              		.loc 1 1195 37 view .LVU1708
 6065 0038 02F58661 		add	r1, r2, #1072
1195:src/xeq.c     **** }
 6066              		.loc 1 1195 55 view .LVU1709
 6067 003c C3F16403 		rsb	r3, r3, #100
1196:src/xeq.c     **** 
 6068              		.loc 1 1196 1 view .LVU1710
 6069 0040 70BC     		pop	{r4, r5, r6}
 6070              		.cfi_restore 6
 6071              		.cfi_restore 5
 6072              		.cfi_restore 4
 6073              		.cfi_def_cfa_offset 0
1195:src/xeq.c     **** }
 6074              		.loc 1 1195 22 view .LVU1711
 6075 0042 01EBC301 		add	r1, r1, r3, lsl #3
 6076 0046 02F5EA62 		add	r2, r2, #1872
 6077              	.LVL444:
1195:src/xeq.c     **** }
 6078              		.loc 1 1195 22 view .LVU1712
 6079 004a FFF7FEBF 		b	reg_address
 6080              	.LVL445:
 6081              	.L497:
1186:src/xeq.c     **** 
 6082              		.loc 1 1186 3 is_stmt 1 view .LVU1713
 6083              	.LBB1714:
 6084              	.LBI1714:
1199:src/xeq.c     **** 	return (REGISTER *) reg_address(n, BackupFlash._regs + TOPREALREG - BackupFlash._numregs,
 6085              		.loc 1 1199 11 view .LVU1714
 6086              	.LBB1715:
1200:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6087              		.loc 1 1200 2 view .LVU1715
1200:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6088              		.loc 1 1200 37 is_stmt 0 view .LVU1716
 6089 004e 174B     		ldr	r3, .L499+4
 6090 0050 1A68     		ldr	r2, [r3]
1200:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6091              		.loc 1 1200 68 view .LVU1717
 6092 0052 92F8CF37 		ldrb	r3, [r2, #1999]	@ zero_extendqisi2
1200:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6093              		.loc 1 1200 37 view .LVU1718
 6094 0056 02F58661 		add	r1, r2, #1072
 6095              	.LVL446:
1200:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6096              		.loc 1 1200 68 view .LVU1719
 6097 005a C3F16403 		rsb	r3, r3, #100
1200:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6098              		.loc 1 1200 22 view .LVU1720
ARM GAS  /tmp/cc0UaEmF.s 			page 232


 6099 005e A0F57A70 		sub	r0, r0, #1000
 6100              	.LVL447:
1200:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6101              		.loc 1 1200 22 view .LVU1721
 6102 0062 01EBC301 		add	r1, r1, r3, lsl #3
 6103 0066 02F5EA62 		add	r2, r2, #1872
 6104 006a FFF7FEBF 		b	reg_address
 6105              	.LVL448:
 6106              	.L496:
1200:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6107              		.loc 1 1200 22 view .LVU1722
 6108              	.LBE1715:
 6109              	.LBE1714:
1182:src/xeq.c     **** 		return get_const(n, dbl);
 6110              		.loc 1 1182 3 is_stmt 1 view .LVU1723
1183:src/xeq.c     **** 	}
 6111              		.loc 1 1183 3 view .LVU1724
1183:src/xeq.c     **** 	}
 6112              		.loc 1 1183 10 is_stmt 0 view .LVU1725
 6113 006e A0F5FA60 		sub	r0, r0, #2000
 6114              	.LVL449:
1183:src/xeq.c     **** 	}
 6115              		.loc 1 1183 10 view .LVU1726
 6116 0072 FFF7FEBF 		b	get_const
 6117              	.LVL450:
 6118              	.L498:
 6119              		.cfi_def_cfa_offset 12
 6120              		.cfi_offset 4, -12
 6121              		.cfi_offset 5, -8
 6122              		.cfi_offset 6, -4
 6123              	.LBB1716:
 6124              	.LBB1711:
 6125              	.LBB1709:
 6126              	.LBB1706:
 6127              	.LBB1704:
 215:src/xeq.c     **** }
 6128              		.loc 1 215 25 view .LVU1727
 6129 0076 0E4D     		ldr	r5, .L499+8
 6130 0078 2D68     		ldr	r5, [r5]
 6131              	.LVL451:
 215:src/xeq.c     **** }
 6132              		.loc 1 215 57 view .LVU1728
 6133 007a 35F81460 		ldrh	r6, [r5, r4, lsl #1]
 6134              	.LBE1704:
 6135              	.LBE1706:
 224:src/xeq.c     **** }
 6136              		.loc 1 224 30 view .LVU1729
 6137 007e 0231     		adds	r1, r1, #2
 6138              	.LVL452:
 6139              	.LBB1707:
 6140              	.LBB1705:
 215:src/xeq.c     **** }
 6141              		.loc 1 215 57 view .LVU1730
 6142 0080 C6F30B06 		ubfx	r6, r6, #0, #12
 6143              	.LBE1705:
 6144              	.LBE1707:
 6145              	.LBE1709:
ARM GAS  /tmp/cc0UaEmF.s 			page 233


 6146              	.LBE1711:
 6147              	.LBE1716:
1188:src/xeq.c     **** 		// local register on the return stack
 6148              		.loc 1 1188 26 view .LVU1731
 6149 0084 56FA01F1 		asrs	r1, r6, r1
 6150              	.LVL453:
1188:src/xeq.c     **** 		// local register on the return stack
 6151              		.loc 1 1188 26 view .LVU1732
 6152 0088 D4D0     		beq	.L487
1190:src/xeq.c     **** 		if (dbl)
 6153              		.loc 1 1190 3 is_stmt 1 view .LVU1733
1190:src/xeq.c     **** 		if (dbl)
 6154              		.loc 1 1190 5 is_stmt 0 view .LVU1734
 6155 008a 7038     		subs	r0, r0, #112
 6156              	.LVL454:
1191:src/xeq.c     **** 			n <<= 1;
 6157              		.loc 1 1191 3 is_stmt 1 view .LVU1735
1191:src/xeq.c     **** 			n <<= 1;
 6158              		.loc 1 1191 6 is_stmt 0 view .LVU1736
 6159 008c B3F5804F 		cmp	r3, #16384
1192:src/xeq.c     **** 		return (REGISTER *) ((decimal64 *) (RetStk + (short)((LocalRegs + 2) & 0xfffe)) + n);
 6160              		.loc 1 1192 4 is_stmt 1 view .LVU1737
1192:src/xeq.c     **** 		return (REGISTER *) ((decimal64 *) (RetStk + (short)((LocalRegs + 2) & 0xfffe)) + n);
 6161              		.loc 1 1192 6 is_stmt 0 view .LVU1738
 6162 0090 08BF     		it	eq
 6163 0092 4000     		lsleq	r0, r0, #1
 6164              	.LVL455:
1193:src/xeq.c     **** 	}
 6165              		.loc 1 1193 3 is_stmt 1 view .LVU1739
1193:src/xeq.c     **** 	}
 6166              		.loc 1 1193 67 is_stmt 0 view .LVU1740
 6167 0094 0234     		adds	r4, r4, #2
1193:src/xeq.c     **** 	}
 6168              		.loc 1 1193 48 view .LVU1741
 6169 0096 24F00104 		bic	r4, r4, #1
1193:src/xeq.c     **** 	}
 6170              		.loc 1 1193 83 view .LVU1742
 6171 009a C000     		lsls	r0, r0, #3
 6172              	.LVL456:
1193:src/xeq.c     **** 	}
 6173              		.loc 1 1193 10 view .LVU1743
 6174 009c 0223     		movs	r3, #2
 6175              	.LVL457:
1193:src/xeq.c     **** 	}
 6176              		.loc 1 1193 10 view .LVU1744
 6177 009e 14FB0300 		smlabb	r0, r4, r3, r0
 6178 00a2 2844     		add	r0, r0, r5
1196:src/xeq.c     **** 
 6179              		.loc 1 1196 1 view .LVU1745
 6180 00a4 70BC     		pop	{r4, r5, r6}
 6181              		.cfi_restore 6
 6182              		.cfi_restore 5
 6183              		.cfi_restore 4
 6184              		.cfi_def_cfa_offset 0
 6185 00a6 7047     		bx	lr
 6186              	.L500:
 6187              		.align	2
ARM GAS  /tmp/cc0UaEmF.s 			page 234


 6188              	.L499:
 6189 00a8 00000000 		.word	main_ram
 6190 00ac 00000000 		.word	backup_ram
 6191 00b0 00000000 		.word	RetStk
 6192              		.cfi_endproc
 6193              	.LFE87:
 6195              		.section	.text.get_stack,"ax",%progbits
 6196              		.align	1
 6197              		.p2align 2,,3
 6198              		.global	get_stack
 6199              		.syntax unified
 6200              		.thumb
 6201              		.thumb_func
 6202              		.fpu fpv4-sp-d16
 6204              	get_stack:
 6205              	.LVL458:
 6206              	.LFB43:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6207              		.loc 1 709 30 is_stmt 1 view -0
 6208              		.cfi_startproc
 6209              		@ args = 0, pretend = 0, frame = 0
 6210              		@ frame_needed = 0, uses_anonymous_args = 0
 6211              		@ link register save eliminated.
 710:src/xeq.c     **** }
 6212              		.loc 1 710 2 view .LVU1747
 710:src/xeq.c     **** }
 6213              		.loc 1 710 9 is_stmt 0 view .LVU1748
 6214 0000 6430     		adds	r0, r0, #100
 6215              	.LVL459:
 710:src/xeq.c     **** }
 6216              		.loc 1 710 9 view .LVU1749
 6217 0002 FFF7FEBF 		b	get_reg_n
 6218              	.LVL460:
 710:src/xeq.c     **** }
 6219              		.loc 1 710 9 view .LVU1750
 6220              		.cfi_endproc
 6221              	.LFE43:
 6223 0006 00BF     		.section	.text.lift,"ax",%progbits
 6224              		.align	1
 6225              		.p2align 2,,3
 6226              		.global	lift
 6227              		.syntax unified
 6228              		.thumb
 6229              		.thumb_func
 6230              		.fpu fpv4-sp-d16
 6232              	lift:
 6233              	.LFB47:
 727:src/xeq.c     **** 	const int n = stack_size();
 6234              		.loc 1 727 17 is_stmt 1 view -0
 6235              		.cfi_startproc
 6236              		@ args = 0, pretend = 0, frame = 0
 6237              		@ frame_needed = 0, uses_anonymous_args = 0
 728:src/xeq.c     **** 	int i;
 6238              		.loc 1 728 2 view .LVU1752
 6239              	.LBB1717:
 6240              	.LBI1717:
 703:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
ARM GAS  /tmp/cc0UaEmF.s 			page 235


 6241              		.loc 1 703 5 view .LVU1753
 6242              	.LBB1718:
 704:src/xeq.c     **** 		return 4;
 6243              		.loc 1 704 2 view .LVU1754
 6244              	.LBE1718:
 6245              	.LBE1717:
 727:src/xeq.c     **** 	const int n = stack_size();
 6246              		.loc 1 727 17 is_stmt 0 view .LVU1755
 6247 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 6248              		.cfi_def_cfa_offset 24
 6249              		.cfi_offset 3, -24
 6250              		.cfi_offset 4, -20
 6251              		.cfi_offset 5, -16
 6252              		.cfi_offset 6, -12
 6253              		.cfi_offset 7, -8
 6254              		.cfi_offset 14, -4
 6255              	.LBB1723:
 6256              	.LBB1721:
 704:src/xeq.c     **** 		return 4;
 6257              		.loc 1 704 8 view .LVU1756
 6258 0002 184E     		ldr	r6, .L513
 6259 0004 3368     		ldr	r3, [r6]
 704:src/xeq.c     **** 		return 4;
 6260              		.loc 1 704 6 view .LVU1757
 6261 0006 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 704:src/xeq.c     **** 		return 4;
 6262              		.loc 1 704 5 view .LVU1758
 6263 000a 1207     		lsls	r2, r2, #28
 6264 000c 28D5     		bpl	.L506
 6265              	.LBB1719:
 6266              	.LBI1719:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 6267              		.loc 1 182 5 is_stmt 1 view .LVU1759
 6268              	.LBB1720:
 183:src/xeq.c     **** }
 6269              		.loc 1 183 2 view .LVU1760
 183:src/xeq.c     **** }
 6270              		.loc 1 183 9 is_stmt 0 view .LVU1761
 6271 000e B3F8E037 		ldrh	r3, [r3, #2016]
 6272              	.LBE1720:
 6273              	.LBE1719:
 704:src/xeq.c     **** 		return 4;
 6274              		.loc 1 704 27 view .LVU1762
 6275 0012 9B0B     		lsrs	r3, r3, #14
 6276 0014 032B     		cmp	r3, #3
 6277 0016 1BD0     		beq	.L512
 6278 0018 0724     		movs	r4, #7
 6279              	.L503:
 6280              	.LBE1721:
 6281              	.LBE1723:
 729:src/xeq.c     **** 	for (i=n-1; i>0; i--)
 6282              		.loc 1 729 2 is_stmt 1 view .LVU1763
 730:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6283              		.loc 1 730 2 view .LVU1764
 730:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6284              		.loc 1 730 14 view .LVU1765
 6285 001a 6434     		adds	r4, r4, #100
ARM GAS  /tmp/cc0UaEmF.s 			page 236


 6286              	.LBB1724:
 6287              	.LBB1725:
 6288              	.LBB1726:
 6289              	.LBB1727:
 933:src/xeq.c     **** }
 6290              		.loc 1 933 24 is_stmt 0 view .LVU1766
 6291 001c 44F20107 		movw	r7, #16385
 6292              	.L505:
 6293              	.LVL461:
 933:src/xeq.c     **** }
 6294              		.loc 1 933 24 view .LVU1767
 6295              	.LBE1727:
 6296              	.LBE1726:
 6297              	.LBE1725:
 6298              	.LBE1724:
 731:src/xeq.c     **** }
 6299              		.loc 1 731 3 is_stmt 1 view .LVU1768
 6300              	.LBB1734:
 6301              	.LBI1734:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6302              		.loc 1 709 11 view .LVU1769
 6303              	.LBB1735:
 710:src/xeq.c     **** }
 6304              		.loc 1 710 2 view .LVU1770
 710:src/xeq.c     **** }
 6305              		.loc 1 710 9 is_stmt 0 view .LVU1771
 6306 0020 2046     		mov	r0, r4
 6307 0022 FFF7FEFF 		bl	get_reg_n
 6308              	.LVL462:
 6309              	.LBE1735:
 6310              	.LBE1734:
 6311              	.LBB1737:
 6312              	.LBB1738:
 6313 0026 013C     		subs	r4, r4, #1
 6314              	.LVL463:
 710:src/xeq.c     **** }
 6315              		.loc 1 710 9 view .LVU1772
 6316              	.LBE1738:
 6317              	.LBE1737:
 6318              	.LBB1742:
 6319              	.LBB1736:
 6320 0028 0546     		mov	r5, r0
 6321              	.LBE1736:
 6322              	.LBE1742:
 6323              	.LBB1743:
 6324              	.LBB1739:
 6325 002a 2046     		mov	r0, r4
 6326              	.LVL464:
 710:src/xeq.c     **** }
 6327              		.loc 1 710 9 view .LVU1773
 6328              	.LBE1739:
 6329              	.LBI1737:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6330              		.loc 1 709 11 is_stmt 1 view .LVU1774
 6331              	.LBB1740:
 710:src/xeq.c     **** }
 6332              		.loc 1 710 2 view .LVU1775
ARM GAS  /tmp/cc0UaEmF.s 			page 237


 710:src/xeq.c     **** }
 6333              		.loc 1 710 9 is_stmt 0 view .LVU1776
 6334 002c FFF7FEFF 		bl	get_reg_n
 6335              	.LVL465:
 710:src/xeq.c     **** }
 6336              		.loc 1 710 9 view .LVU1777
 6337              	.LBE1740:
 6338              	.LBE1743:
 6339              	.LBB1744:
 6340              	.LBB1732:
 6341              	.LBB1730:
 6342              	.LBB1728:
 933:src/xeq.c     **** }
 6343              		.loc 1 933 24 view .LVU1778
 6344 0030 3368     		ldr	r3, [r6]
 6345 0032 B3F8E837 		ldrh	r3, [r3, #2024]
 6346              	.LBE1728:
 6347              	.LBE1730:
 718:src/xeq.c     **** }
 6348              		.loc 1 718 2 view .LVU1779
 6349 0036 3B40     		ands	r3, r3, r7
 6350 0038 B3F5804F 		cmp	r3, #16384
 6351              	.LBE1732:
 6352              	.LBE1744:
 6353              	.LBB1745:
 6354              	.LBB1741:
 710:src/xeq.c     **** }
 6355              		.loc 1 710 9 view .LVU1780
 6356 003c 0146     		mov	r1, r0
 6357              	.LVL466:
 710:src/xeq.c     **** }
 6358              		.loc 1 710 9 view .LVU1781
 6359              	.LBE1741:
 6360              	.LBE1745:
 6361              	.LBB1746:
 6362              	.LBI1724:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6363              		.loc 1 717 6 is_stmt 1 view .LVU1782
 6364              	.LBB1733:
 718:src/xeq.c     **** }
 6365              		.loc 1 718 2 view .LVU1783
 6366              	.LBB1731:
 6367              	.LBI1726:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6368              		.loc 1 932 5 view .LVU1784
 6369              	.LBB1729:
 933:src/xeq.c     **** }
 6370              		.loc 1 933 2 view .LVU1785
 6371              	.LBE1729:
 6372              	.LBE1731:
 718:src/xeq.c     **** }
 6373              		.loc 1 718 2 is_stmt 0 view .LVU1786
 6374 003e 0CBF     		ite	eq
 6375 0040 1022     		moveq	r2, #16
 6376 0042 0822     		movne	r2, #8
 6377 0044 2846     		mov	r0, r5
 6378              	.LVL467:
ARM GAS  /tmp/cc0UaEmF.s 			page 238


 718:src/xeq.c     **** }
 6379              		.loc 1 718 2 view .LVU1787
 6380 0046 FFF7FEFF 		bl	xcopy
 6381              	.LVL468:
 718:src/xeq.c     **** }
 6382              		.loc 1 718 2 view .LVU1788
 6383              	.LBE1733:
 6384              	.LBE1746:
 730:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6385              		.loc 1 730 19 is_stmt 1 view .LVU1789
 730:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6386              		.loc 1 730 14 view .LVU1790
 730:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6387              		.loc 1 730 2 is_stmt 0 view .LVU1791
 6388 004a 642C     		cmp	r4, #100
 6389 004c E8D1     		bne	.L505
 732:src/xeq.c     **** 
 6390              		.loc 1 732 1 view .LVU1792
 6391 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 6392              	.LVL469:
 6393              	.L512:
 6394              	.LBB1747:
 6395              	.LBB1722:
 704:src/xeq.c     **** 		return 4;
 6396              		.loc 1 704 44 view .LVU1793
 6397 0050 054B     		ldr	r3, .L513+4
 704:src/xeq.c     **** 		return 4;
 6398              		.loc 1 704 41 view .LVU1794
 6399 0052 93F90130 		ldrsb	r3, [r3, #1]
 6400 0056 002B     		cmp	r3, #0
 6401 0058 B4BF     		ite	lt
 6402 005a 0724     		movlt	r4, #7
 6403 005c 0324     		movge	r4, #3
 6404 005e DCE7     		b	.L503
 6405              	.L506:
 6406 0060 0324     		movs	r4, #3
 6407 0062 DAE7     		b	.L503
 6408              	.L514:
 6409              		.align	2
 6410              	.L513:
 6411 0064 00000000 		.word	main_ram
 6412 0068 00000000 		.word	XromParams
 6413              	.LBE1722:
 6414              	.LBE1747:
 6415              		.cfi_endproc
 6416              	.LFE47:
 6418              		.section	.text.lift_if_enabled,"ax",%progbits
 6419              		.align	1
 6420              		.p2align 2,,3
 6421              		.global	lift_if_enabled
 6422              		.syntax unified
 6423              		.thumb
 6424              		.thumb_func
 6425              		.fpu fpv4-sp-d16
 6427              	lift_if_enabled:
 6428              	.LFB49:
 738:src/xeq.c     **** 	if (get_lift())
ARM GAS  /tmp/cc0UaEmF.s 			page 239


 6429              		.loc 1 738 28 is_stmt 1 view -0
 6430              		.cfi_startproc
 6431              		@ args = 0, pretend = 0, frame = 0
 6432              		@ frame_needed = 0, uses_anonymous_args = 0
 6433              		@ link register save eliminated.
 739:src/xeq.c     **** 		lift();
 6434              		.loc 1 739 2 view .LVU1796
 6435              	.LBB1748:
 6436              	.LBI1748:
 734:src/xeq.c     **** 	return State2.state_lift;
 6437              		.loc 1 734 12 view .LVU1797
 6438              	.LBB1749:
 735:src/xeq.c     **** }
 6439              		.loc 1 735 2 view .LVU1798
 735:src/xeq.c     **** }
 6440              		.loc 1 735 15 is_stmt 0 view .LVU1799
 6441 0000 034B     		ldr	r3, .L518
 6442 0002 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 6443              	.LBE1749:
 6444              	.LBE1748:
 739:src/xeq.c     **** 		lift();
 6445              		.loc 1 739 5 view .LVU1800
 6446 0004 5B06     		lsls	r3, r3, #25
 6447 0006 00D4     		bmi	.L517
 741:src/xeq.c     **** 
 6448              		.loc 1 741 1 view .LVU1801
 6449 0008 7047     		bx	lr
 6450              	.L517:
 740:src/xeq.c     **** }
 6451              		.loc 1 740 3 is_stmt 1 view .LVU1802
 6452 000a FFF7FEBF 		b	lift
 6453              	.LVL470:
 6454              	.L519:
 6455 000e 00BF     		.align	2
 6456              	.L518:
 6457 0010 00000000 		.word	StateWhileOn
 6458              		.cfi_endproc
 6459              	.LFE49:
 6461              		.section	.text.lower,"ax",%progbits
 6462              		.align	1
 6463              		.p2align 2,,3
 6464              		.syntax unified
 6465              		.thumb
 6466              		.thumb_func
 6467              		.fpu fpv4-sp-d16
 6469              	lower:
 6470              	.LFB53:
 756:src/xeq.c     **** 	const int n = stack_size();
 6471              		.loc 1 756 25 view -0
 6472              		.cfi_startproc
 6473              		@ args = 0, pretend = 0, frame = 0
 6474              		@ frame_needed = 0, uses_anonymous_args = 0
 757:src/xeq.c     **** 	int i;
 6475              		.loc 1 757 2 view .LVU1804
 6476              	.LBB1750:
 6477              	.LBI1750:
 703:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
ARM GAS  /tmp/cc0UaEmF.s 			page 240


 6478              		.loc 1 703 5 view .LVU1805
 6479              	.LBB1751:
 704:src/xeq.c     **** 		return 4;
 6480              		.loc 1 704 2 view .LVU1806
 6481              	.LBE1751:
 6482              	.LBE1750:
 756:src/xeq.c     **** 	const int n = stack_size();
 6483              		.loc 1 756 25 is_stmt 0 view .LVU1807
 6484 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 6485              		.cfi_def_cfa_offset 24
 6486              		.cfi_offset 4, -24
 6487              		.cfi_offset 5, -20
 6488              		.cfi_offset 6, -16
 6489              		.cfi_offset 7, -12
 6490              		.cfi_offset 8, -8
 6491              		.cfi_offset 14, -4
 6492              	.LBB1757:
 6493              	.LBB1754:
 704:src/xeq.c     **** 		return 4;
 6494              		.loc 1 704 8 view .LVU1808
 6495 0004 194F     		ldr	r7, .L531
 6496 0006 3B68     		ldr	r3, [r7]
 704:src/xeq.c     **** 		return 4;
 6497              		.loc 1 704 6 view .LVU1809
 6498 0008 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 704:src/xeq.c     **** 		return 4;
 6499              		.loc 1 704 5 view .LVU1810
 6500 000c 1207     		lsls	r2, r2, #28
 6501 000e 2BD5     		bpl	.L524
 6502              	.LBB1752:
 6503              	.LBI1752:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 6504              		.loc 1 182 5 is_stmt 1 view .LVU1811
 6505              	.LBB1753:
 183:src/xeq.c     **** }
 6506              		.loc 1 183 2 view .LVU1812
 183:src/xeq.c     **** }
 6507              		.loc 1 183 9 is_stmt 0 view .LVU1813
 6508 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 6509              	.LBE1753:
 6510              	.LBE1752:
 704:src/xeq.c     **** 		return 4;
 6511              		.loc 1 704 27 view .LVU1814
 6512 0014 9B0B     		lsrs	r3, r3, #14
 6513 0016 032B     		cmp	r3, #3
 6514 0018 1ED0     		beq	.L530
 706:src/xeq.c     **** }
 6515              		.loc 1 706 9 view .LVU1815
 6516 001a 0826     		movs	r6, #8
 6517              	.L521:
 6518              	.LVL471:
 706:src/xeq.c     **** }
 6519              		.loc 1 706 9 view .LVU1816
 6520              	.LBE1754:
 6521              	.LBE1757:
 758:src/xeq.c     **** 
 6522              		.loc 1 758 2 is_stmt 1 view .LVU1817
ARM GAS  /tmp/cc0UaEmF.s 			page 241


 760:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6523              		.loc 1 760 2 view .LVU1818
 760:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6524              		.loc 1 760 12 view .LVU1819
 6525 001c 6336     		adds	r6, r6, #99
 6526              	.LVL472:
 6527              	.LBB1758:
 6528              	.LBB1755:
 705:src/xeq.c     **** 	return 8;
 6529              		.loc 1 705 10 is_stmt 0 view .LVU1820
 6530 001e 6424     		movs	r4, #100
 6531              	.LBE1755:
 6532              	.LBE1758:
 6533              	.LBB1759:
 6534              	.LBB1760:
 6535              	.LBB1761:
 6536              	.LBB1762:
 933:src/xeq.c     **** }
 6537              		.loc 1 933 24 view .LVU1821
 6538 0020 44F20108 		movw	r8, #16385
 6539              	.LVL473:
 6540              	.L523:
 933:src/xeq.c     **** }
 6541              		.loc 1 933 24 view .LVU1822
 6542              	.LBE1762:
 6543              	.LBE1761:
 6544              	.LBE1760:
 6545              	.LBE1759:
 761:src/xeq.c     **** }
 6546              		.loc 1 761 3 is_stmt 1 discriminator 3 view .LVU1823
 6547              	.LBB1769:
 6548              	.LBI1769:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6549              		.loc 1 709 11 discriminator 3 view .LVU1824
 6550              	.LBB1770:
 710:src/xeq.c     **** }
 6551              		.loc 1 710 2 discriminator 3 view .LVU1825
 710:src/xeq.c     **** }
 6552              		.loc 1 710 9 is_stmt 0 discriminator 3 view .LVU1826
 6553 0024 2046     		mov	r0, r4
 6554 0026 FFF7FEFF 		bl	get_reg_n
 6555              	.LVL474:
 6556 002a 0134     		adds	r4, r4, #1
 6557              	.LVL475:
 710:src/xeq.c     **** }
 6558              		.loc 1 710 9 discriminator 3 view .LVU1827
 6559 002c 0546     		mov	r5, r0
 6560              	.LBE1770:
 6561              	.LBE1769:
 6562              	.LBB1771:
 6563              	.LBB1772:
 6564 002e 2046     		mov	r0, r4
 6565              	.LVL476:
 710:src/xeq.c     **** }
 6566              		.loc 1 710 9 discriminator 3 view .LVU1828
 6567              	.LBE1772:
 6568              	.LBI1771:
ARM GAS  /tmp/cc0UaEmF.s 			page 242


 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6569              		.loc 1 709 11 is_stmt 1 discriminator 3 view .LVU1829
 6570              	.LBB1773:
 710:src/xeq.c     **** }
 6571              		.loc 1 710 2 discriminator 3 view .LVU1830
 710:src/xeq.c     **** }
 6572              		.loc 1 710 9 is_stmt 0 discriminator 3 view .LVU1831
 6573 0030 FFF7FEFF 		bl	get_reg_n
 6574              	.LVL477:
 710:src/xeq.c     **** }
 6575              		.loc 1 710 9 discriminator 3 view .LVU1832
 6576              	.LBE1773:
 6577              	.LBE1771:
 6578              	.LBB1775:
 6579              	.LBB1767:
 6580              	.LBB1765:
 6581              	.LBB1763:
 933:src/xeq.c     **** }
 6582              		.loc 1 933 24 discriminator 3 view .LVU1833
 6583 0034 3B68     		ldr	r3, [r7]
 6584 0036 B3F8E837 		ldrh	r3, [r3, #2024]
 6585              	.LBE1763:
 6586              	.LBE1765:
 718:src/xeq.c     **** }
 6587              		.loc 1 718 2 discriminator 3 view .LVU1834
 6588 003a 08EA0303 		and	r3, r8, r3
 6589 003e B3F5804F 		cmp	r3, #16384
 6590              	.LBE1767:
 6591              	.LBE1775:
 6592              	.LBB1776:
 6593              	.LBB1774:
 710:src/xeq.c     **** }
 6594              		.loc 1 710 9 discriminator 3 view .LVU1835
 6595 0042 0146     		mov	r1, r0
 6596              	.LVL478:
 710:src/xeq.c     **** }
 6597              		.loc 1 710 9 discriminator 3 view .LVU1836
 6598              	.LBE1774:
 6599              	.LBE1776:
 6600              	.LBB1777:
 6601              	.LBI1759:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6602              		.loc 1 717 6 is_stmt 1 discriminator 3 view .LVU1837
 6603              	.LBB1768:
 718:src/xeq.c     **** }
 6604              		.loc 1 718 2 discriminator 3 view .LVU1838
 6605              	.LBB1766:
 6606              	.LBI1761:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6607              		.loc 1 932 5 discriminator 3 view .LVU1839
 6608              	.LBB1764:
 933:src/xeq.c     **** }
 6609              		.loc 1 933 2 discriminator 3 view .LVU1840
 6610              	.LBE1764:
 6611              	.LBE1766:
 718:src/xeq.c     **** }
 6612              		.loc 1 718 2 is_stmt 0 discriminator 3 view .LVU1841
ARM GAS  /tmp/cc0UaEmF.s 			page 243


 6613 0044 0CBF     		ite	eq
 6614 0046 1022     		moveq	r2, #16
 6615 0048 0822     		movne	r2, #8
 6616 004a 2846     		mov	r0, r5
 6617              	.LVL479:
 718:src/xeq.c     **** }
 6618              		.loc 1 718 2 discriminator 3 view .LVU1842
 6619 004c FFF7FEFF 		bl	xcopy
 6620              	.LVL480:
 718:src/xeq.c     **** }
 6621              		.loc 1 718 2 discriminator 3 view .LVU1843
 6622              	.LBE1768:
 6623              	.LBE1777:
 760:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6624              		.loc 1 760 17 is_stmt 1 discriminator 3 view .LVU1844
 760:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6625              		.loc 1 760 12 discriminator 3 view .LVU1845
 760:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6626              		.loc 1 760 2 is_stmt 0 discriminator 3 view .LVU1846
 6627 0050 B442     		cmp	r4, r6
 6628 0052 E7D1     		bne	.L523
 762:src/xeq.c     **** 
 6629              		.loc 1 762 1 view .LVU1847
 6630 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 6631              	.LVL481:
 6632              	.L530:
 6633              	.LBB1778:
 6634              	.LBB1756:
 704:src/xeq.c     **** 		return 4;
 6635              		.loc 1 704 44 view .LVU1848
 6636 0058 054B     		ldr	r3, .L531+4
 704:src/xeq.c     **** 		return 4;
 6637              		.loc 1 704 41 view .LVU1849
 6638 005a 93F90130 		ldrsb	r3, [r3, #1]
 705:src/xeq.c     **** 	return 8;
 6639              		.loc 1 705 10 view .LVU1850
 6640 005e 002B     		cmp	r3, #0
 6641 0060 B4BF     		ite	lt
 6642 0062 0826     		movlt	r6, #8
 6643 0064 0426     		movge	r6, #4
 6644 0066 D9E7     		b	.L521
 6645              	.L524:
 6646 0068 0426     		movs	r6, #4
 6647 006a D7E7     		b	.L521
 6648              	.L532:
 6649              		.align	2
 6650              	.L531:
 6651 006c 00000000 		.word	main_ram
 6652 0070 00000000 		.word	XromParams
 6653              	.LBE1756:
 6654              	.LBE1778:
 6655              		.cfi_endproc
 6656              	.LFE53:
 6658              		.section	.text.get_stack_top,"ax",%progbits
 6659              		.align	1
 6660              		.p2align 2,,3
 6661              		.syntax unified
ARM GAS  /tmp/cc0UaEmF.s 			page 244


 6662              		.thumb
 6663              		.thumb_func
 6664              		.fpu fpv4-sp-d16
 6666              	get_stack_top:
 6667              	.LFB44:
 713:src/xeq.c     **** 	return get_stack(stack_size()-1);
 6668              		.loc 1 713 38 is_stmt 1 view -0
 6669              		.cfi_startproc
 6670              		@ args = 0, pretend = 0, frame = 0
 6671              		@ frame_needed = 0, uses_anonymous_args = 0
 6672              		@ link register save eliminated.
 714:src/xeq.c     **** }
 6673              		.loc 1 714 2 view .LVU1852
 6674              	.LBB1779:
 6675              	.LBI1779:
 703:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 6676              		.loc 1 703 5 view .LVU1853
 6677              	.LBB1780:
 704:src/xeq.c     **** 		return 4;
 6678              		.loc 1 704 2 view .LVU1854
 704:src/xeq.c     **** 		return 4;
 6679              		.loc 1 704 8 is_stmt 0 view .LVU1855
 6680 0000 0C4B     		ldr	r3, .L539
 6681 0002 1B68     		ldr	r3, [r3]
 704:src/xeq.c     **** 		return 4;
 6682              		.loc 1 704 6 view .LVU1856
 6683 0004 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 704:src/xeq.c     **** 		return 4;
 6684              		.loc 1 704 5 view .LVU1857
 6685 0008 1207     		lsls	r2, r2, #28
 6686 000a 10D5     		bpl	.L535
 6687              	.LBB1781:
 6688              	.LBI1781:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 6689              		.loc 1 182 5 is_stmt 1 view .LVU1858
 6690              	.LBB1782:
 183:src/xeq.c     **** }
 6691              		.loc 1 183 2 view .LVU1859
 183:src/xeq.c     **** }
 6692              		.loc 1 183 9 is_stmt 0 view .LVU1860
 6693 000c B3F8E037 		ldrh	r3, [r3, #2016]
 6694              	.LBE1782:
 6695              	.LBE1781:
 704:src/xeq.c     **** 		return 4;
 6696              		.loc 1 704 27 view .LVU1861
 6697 0010 9B0B     		lsrs	r3, r3, #14
 6698 0012 032B     		cmp	r3, #3
 6699 0014 02D0     		beq	.L538
 6700 0016 6B20     		movs	r0, #107
 6701              	.LBE1780:
 6702              	.LBE1779:
 6703              	.LBB1785:
 6704              	.LBI1785:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6705              		.loc 1 709 11 is_stmt 1 view .LVU1862
 6706              	.LBB1786:
 710:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 245


 6707              		.loc 1 710 2 view .LVU1863
 710:src/xeq.c     **** }
 6708              		.loc 1 710 9 is_stmt 0 view .LVU1864
 6709 0018 FFF7FEBF 		b	get_reg_n
 6710              	.LVL482:
 6711              	.L538:
 6712              	.LBE1786:
 6713              	.LBE1785:
 6714              	.LBB1789:
 6715              	.LBB1783:
 704:src/xeq.c     **** 		return 4;
 6716              		.loc 1 704 44 view .LVU1865
 6717 001c 064B     		ldr	r3, .L539+4
 704:src/xeq.c     **** 		return 4;
 6718              		.loc 1 704 41 view .LVU1866
 6719 001e 93F90130 		ldrsb	r3, [r3, #1]
 6720 0022 002B     		cmp	r3, #0
 6721 0024 B4BF     		ite	lt
 6722 0026 6B20     		movlt	r0, #107
 6723 0028 6720     		movge	r0, #103
 6724              	.LBE1783:
 6725              	.LBE1789:
 6726              	.LBB1790:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6727              		.loc 1 709 11 is_stmt 1 view .LVU1867
 6728              	.LBB1787:
 710:src/xeq.c     **** }
 6729              		.loc 1 710 2 view .LVU1868
 710:src/xeq.c     **** }
 6730              		.loc 1 710 9 is_stmt 0 view .LVU1869
 6731 002a FFF7FEBF 		b	get_reg_n
 6732              	.LVL483:
 6733              	.L535:
 6734              	.LBE1787:
 6735              	.LBE1790:
 6736              	.LBB1791:
 6737              	.LBB1784:
 6738 002e 6720     		movs	r0, #103
 6739              	.LBE1784:
 6740              	.LBE1791:
 6741              	.LBB1792:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6742              		.loc 1 709 11 is_stmt 1 view .LVU1870
 6743              	.LBB1788:
 710:src/xeq.c     **** }
 6744              		.loc 1 710 2 view .LVU1871
 710:src/xeq.c     **** }
 6745              		.loc 1 710 9 is_stmt 0 view .LVU1872
 6746 0030 FFF7FEBF 		b	get_reg_n
 6747              	.LVL484:
 6748              	.L540:
 6749              		.align	2
 6750              	.L539:
 6751 0034 00000000 		.word	main_ram
 6752 0038 00000000 		.word	XromParams
 6753              	.LBE1788:
 6754              	.LBE1792:
ARM GAS  /tmp/cc0UaEmF.s 			page 246


 6755              		.cfi_endproc
 6756              	.LFE44:
 6758              		.section	.text.roll_down,"ax",%progbits
 6759              		.align	1
 6760              		.p2align 2,,3
 6761              		.global	roll_down
 6762              		.syntax unified
 6763              		.thumb
 6764              		.thumb_func
 6765              		.fpu fpv4-sp-d16
 6767              	roll_down:
 6768              	.LVL485:
 6769              	.LFB70:
 867:src/xeq.c     **** 	REGISTER r;
 6770              		.loc 1 867 31 is_stmt 1 view -0
 6771              		.cfi_startproc
 6772              		@ args = 0, pretend = 0, frame = 16
 6773              		@ frame_needed = 0, uses_anonymous_args = 0
 868:src/xeq.c     **** 	copyreg(&r, StackBase);
 6774              		.loc 1 868 2 view .LVU1874
 869:src/xeq.c     **** 	lower();
 6775              		.loc 1 869 2 view .LVU1875
 867:src/xeq.c     **** 	REGISTER r;
 6776              		.loc 1 867 31 is_stmt 0 view .LVU1876
 6777 0000 30B5     		push	{r4, r5, lr}
 6778              		.cfi_def_cfa_offset 12
 6779              		.cfi_offset 4, -12
 6780              		.cfi_offset 5, -8
 6781              		.cfi_offset 14, -4
 6782              	.LBB1793:
 6783              	.LBB1794:
 6784              	.LBB1795:
 6785              	.LBB1796:
 933:src/xeq.c     **** }
 6786              		.loc 1 933 24 view .LVU1877
 6787 0002 124D     		ldr	r5, .L547
 6788              	.LBE1796:
 6789              	.LBE1795:
 6790              	.LBE1794:
 6791              	.LBE1793:
 869:src/xeq.c     **** 	lower();
 6792              		.loc 1 869 2 view .LVU1878
 6793 0004 124A     		ldr	r2, .L547+4
 6794              	.LBB1805:
 6795              	.LBB1803:
 6796              	.LBB1800:
 6797              	.LBB1797:
 933:src/xeq.c     **** }
 6798              		.loc 1 933 24 view .LVU1879
 6799 0006 2B68     		ldr	r3, [r5]
 6800              	.LBE1797:
 6801              	.LBE1800:
 718:src/xeq.c     **** }
 6802              		.loc 1 718 2 view .LVU1880
 6803 0008 1168     		ldr	r1, [r2]
 6804              	.LBB1801:
 6805              	.LBB1798:
ARM GAS  /tmp/cc0UaEmF.s 			page 247


 933:src/xeq.c     **** }
 6806              		.loc 1 933 24 view .LVU1881
 6807 000a B3F8E837 		ldrh	r3, [r3, #2024]
 6808 000e 44F20104 		movw	r4, #16385
 6809              	.LBE1798:
 6810              	.LBE1801:
 718:src/xeq.c     **** }
 6811              		.loc 1 718 2 view .LVU1882
 6812 0012 2340     		ands	r3, r3, r4
 6813              	.LBE1803:
 6814              	.LBE1805:
 867:src/xeq.c     **** 	REGISTER r;
 6815              		.loc 1 867 31 view .LVU1883
 6816 0014 85B0     		sub	sp, sp, #20
 6817              		.cfi_def_cfa_offset 32
 6818              	.LVL486:
 6819              	.LBB1806:
 6820              	.LBI1793:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6821              		.loc 1 717 6 is_stmt 1 view .LVU1884
 6822              	.LBB1804:
 718:src/xeq.c     **** }
 6823              		.loc 1 718 2 view .LVU1885
 6824              	.LBB1802:
 6825              	.LBI1795:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6826              		.loc 1 932 5 view .LVU1886
 6827              	.LBB1799:
 933:src/xeq.c     **** }
 6828              		.loc 1 933 2 view .LVU1887
 6829              	.LBE1799:
 6830              	.LBE1802:
 718:src/xeq.c     **** }
 6831              		.loc 1 718 2 is_stmt 0 view .LVU1888
 6832 0016 B3F5804F 		cmp	r3, #16384
 6833 001a 0CBF     		ite	eq
 6834 001c 1022     		moveq	r2, #16
 6835 001e 0822     		movne	r2, #8
 6836 0020 6846     		mov	r0, sp
 6837              	.LVL487:
 718:src/xeq.c     **** }
 6838              		.loc 1 718 2 view .LVU1889
 6839 0022 FFF7FEFF 		bl	xcopy
 6840              	.LVL488:
 718:src/xeq.c     **** }
 6841              		.loc 1 718 2 view .LVU1890
 6842              	.LBE1804:
 6843              	.LBE1806:
 870:src/xeq.c     **** 	copyreg(get_stack_top(), &r);
 6844              		.loc 1 870 2 is_stmt 1 view .LVU1891
 6845 0026 FFF7FEFF 		bl	lower
 6846              	.LVL489:
 871:src/xeq.c     **** }
 6847              		.loc 1 871 2 view .LVU1892
 6848 002a FFF7FEFF 		bl	get_stack_top
 6849              	.LVL490:
 6850              	.LBB1807:
ARM GAS  /tmp/cc0UaEmF.s 			page 248


 6851              	.LBI1807:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6852              		.loc 1 717 6 view .LVU1893
 6853              	.LBB1808:
 718:src/xeq.c     **** }
 6854              		.loc 1 718 2 view .LVU1894
 6855              	.LBB1809:
 6856              	.LBI1809:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6857              		.loc 1 932 5 view .LVU1895
 6858              	.LBB1810:
 933:src/xeq.c     **** }
 6859              		.loc 1 933 2 view .LVU1896
 933:src/xeq.c     **** }
 6860              		.loc 1 933 24 is_stmt 0 view .LVU1897
 6861 002e 2B68     		ldr	r3, [r5]
 6862 0030 B3F8E837 		ldrh	r3, [r3, #2024]
 6863              	.LBE1810:
 6864              	.LBE1809:
 718:src/xeq.c     **** }
 6865              		.loc 1 718 2 view .LVU1898
 6866 0034 1C40     		ands	r4, r4, r3
 6867 0036 B4F5804F 		cmp	r4, #16384
 6868 003a 6946     		mov	r1, sp
 6869 003c 0CBF     		ite	eq
 6870 003e 1022     		moveq	r2, #16
 6871 0040 0822     		movne	r2, #8
 6872 0042 FFF7FEFF 		bl	xcopy
 6873              	.LVL491:
 718:src/xeq.c     **** }
 6874              		.loc 1 718 2 view .LVU1899
 6875              	.LBE1808:
 6876              	.LBE1807:
 872:src/xeq.c     **** 
 6877              		.loc 1 872 1 view .LVU1900
 6878 0046 05B0     		add	sp, sp, #20
 6879              		.cfi_def_cfa_offset 12
 6880              		@ sp needed
 6881 0048 30BD     		pop	{r4, r5, pc}
 6882              	.L548:
 6883 004a 00BF     		.align	2
 6884              	.L547:
 6885 004c 00000000 		.word	main_ram
 6886 0050 00000000 		.word	StackBase
 6887              		.cfi_endproc
 6888              	.LFE70:
 6890              		.section	.text.cpx_roll_down,"ax",%progbits
 6891              		.align	1
 6892              		.p2align 2,,3
 6893              		.global	cpx_roll_down
 6894              		.syntax unified
 6895              		.thumb
 6896              		.thumb_func
 6897              		.fpu fpv4-sp-d16
 6899              	cpx_roll_down:
 6900              	.LVL492:
 6901              	.LFB72:
ARM GAS  /tmp/cc0UaEmF.s 			page 249


 881:src/xeq.c     **** 	roll_down(OP_RDOWN);
 6902              		.loc 1 881 35 is_stmt 1 view -0
 6903              		.cfi_startproc
 6904              		@ args = 0, pretend = 0, frame = 0
 6905              		@ frame_needed = 0, uses_anonymous_args = 0
 882:src/xeq.c     **** 	roll_down(OP_RDOWN);
 6906              		.loc 1 882 2 view .LVU1902
 881:src/xeq.c     **** 	roll_down(OP_RDOWN);
 6907              		.loc 1 881 35 is_stmt 0 view .LVU1903
 6908 0000 08B5     		push	{r3, lr}
 6909              		.cfi_def_cfa_offset 8
 6910              		.cfi_offset 3, -8
 6911              		.cfi_offset 14, -4
 882:src/xeq.c     **** 	roll_down(OP_RDOWN);
 6912              		.loc 1 882 2 view .LVU1904
 6913 0002 0720     		movs	r0, #7
 6914              	.LVL493:
 882:src/xeq.c     **** 	roll_down(OP_RDOWN);
 6915              		.loc 1 882 2 view .LVU1905
 6916 0004 FFF7FEFF 		bl	roll_down
 6917              	.LVL494:
 883:src/xeq.c     **** 	set_was_complex();
 6918              		.loc 1 883 2 is_stmt 1 view .LVU1906
 6919 0008 0720     		movs	r0, #7
 6920 000a FFF7FEFF 		bl	roll_down
 6921              	.LVL495:
 884:src/xeq.c     **** }
 6922              		.loc 1 884 2 view .LVU1907
 6923              	.LBB1811:
 6924              	.LBI1811:
 530:src/xeq.c     **** 	State2.wascomplex = 1;
 6925              		.loc 1 530 13 view .LVU1908
 6926              	.LBB1812:
 531:src/xeq.c     **** }
 6927              		.loc 1 531 2 view .LVU1909
 531:src/xeq.c     **** }
 6928              		.loc 1 531 20 is_stmt 0 view .LVU1910
 6929 000e 034B     		ldr	r3, .L551
 6930 0010 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 6931 0012 0121     		movs	r1, #1
 6932 0014 61F38712 		bfi	r2, r1, #6, #2
 6933 0018 1A75     		strb	r2, [r3, #20]
 6934              	.LBE1812:
 6935              	.LBE1811:
 885:src/xeq.c     **** 
 6936              		.loc 1 885 1 view .LVU1911
 6937 001a 08BD     		pop	{r3, pc}
 6938              	.L552:
 6939              		.align	2
 6940              	.L551:
 6941 001c 00000000 		.word	StateWhileOn
 6942              		.cfi_endproc
 6943              	.LFE72:
 6945              		.section	.text.roll_up,"ax",%progbits
 6946              		.align	1
 6947              		.p2align 2,,3
 6948              		.global	roll_up
ARM GAS  /tmp/cc0UaEmF.s 			page 250


 6949              		.syntax unified
 6950              		.thumb
 6951              		.thumb_func
 6952              		.fpu fpv4-sp-d16
 6954              	roll_up:
 6955              	.LVL496:
 6956              	.LFB71:
 874:src/xeq.c     **** 	REGISTER r;
 6957              		.loc 1 874 29 is_stmt 1 view -0
 6958              		.cfi_startproc
 6959              		@ args = 0, pretend = 0, frame = 16
 6960              		@ frame_needed = 0, uses_anonymous_args = 0
 875:src/xeq.c     **** 	copyreg(&r, get_stack_top());
 6961              		.loc 1 875 2 view .LVU1913
 876:src/xeq.c     **** 	lift();
 6962              		.loc 1 876 2 view .LVU1914
 874:src/xeq.c     **** 	REGISTER r;
 6963              		.loc 1 874 29 is_stmt 0 view .LVU1915
 6964 0000 30B5     		push	{r4, r5, lr}
 6965              		.cfi_def_cfa_offset 12
 6966              		.cfi_offset 4, -12
 6967              		.cfi_offset 5, -8
 6968              		.cfi_offset 14, -4
 6969              	.LBB1813:
 6970              	.LBB1814:
 6971              	.LBB1815:
 6972              	.LBB1816:
 933:src/xeq.c     **** }
 6973              		.loc 1 933 24 view .LVU1916
 6974 0002 124D     		ldr	r5, .L559
 6975              	.LBE1816:
 6976              	.LBE1815:
 6977              	.LBE1814:
 6978              	.LBE1813:
 874:src/xeq.c     **** 	REGISTER r;
 6979              		.loc 1 874 29 view .LVU1917
 6980 0004 85B0     		sub	sp, sp, #20
 6981              		.cfi_def_cfa_offset 32
 876:src/xeq.c     **** 	lift();
 6982              		.loc 1 876 14 view .LVU1918
 6983 0006 FFF7FEFF 		bl	get_stack_top
 6984              	.LVL497:
 6985              	.LBB1823:
 6986              	.LBB1821:
 6987              	.LBB1819:
 6988              	.LBB1817:
 933:src/xeq.c     **** }
 6989              		.loc 1 933 24 view .LVU1919
 6990 000a 2B68     		ldr	r3, [r5]
 6991 000c B3F8E837 		ldrh	r3, [r3, #2024]
 6992 0010 44F20104 		movw	r4, #16385
 6993              	.LBE1817:
 6994              	.LBE1819:
 718:src/xeq.c     **** }
 6995              		.loc 1 718 2 view .LVU1920
 6996 0014 2340     		ands	r3, r3, r4
 6997 0016 B3F5804F 		cmp	r3, #16384
ARM GAS  /tmp/cc0UaEmF.s 			page 251


 6998              	.LBE1821:
 6999              	.LBE1823:
 876:src/xeq.c     **** 	lift();
 7000              		.loc 1 876 14 view .LVU1921
 7001 001a 0146     		mov	r1, r0
 7002              	.LVL498:
 7003              	.LBB1824:
 7004              	.LBI1813:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7005              		.loc 1 717 6 is_stmt 1 view .LVU1922
 7006              	.LBB1822:
 718:src/xeq.c     **** }
 7007              		.loc 1 718 2 view .LVU1923
 7008              	.LBB1820:
 7009              	.LBI1815:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7010              		.loc 1 932 5 view .LVU1924
 7011              	.LBB1818:
 933:src/xeq.c     **** }
 7012              		.loc 1 933 2 view .LVU1925
 7013              	.LBE1818:
 7014              	.LBE1820:
 718:src/xeq.c     **** }
 7015              		.loc 1 718 2 is_stmt 0 view .LVU1926
 7016 001c 0CBF     		ite	eq
 7017 001e 1022     		moveq	r2, #16
 7018 0020 0822     		movne	r2, #8
 7019 0022 6846     		mov	r0, sp
 7020              	.LVL499:
 718:src/xeq.c     **** }
 7021              		.loc 1 718 2 view .LVU1927
 7022 0024 FFF7FEFF 		bl	xcopy
 7023              	.LVL500:
 718:src/xeq.c     **** }
 7024              		.loc 1 718 2 view .LVU1928
 7025              	.LBE1822:
 7026              	.LBE1824:
 877:src/xeq.c     **** 	copyreg(StackBase, &r);
 7027              		.loc 1 877 2 is_stmt 1 view .LVU1929
 7028 0028 FFF7FEFF 		bl	lift
 7029              	.LVL501:
 878:src/xeq.c     **** }
 7030              		.loc 1 878 2 view .LVU1930
 7031              	.LBB1825:
 7032              	.LBB1826:
 7033              	.LBB1827:
 7034              	.LBB1828:
 933:src/xeq.c     **** }
 7035              		.loc 1 933 24 is_stmt 0 view .LVU1931
 7036 002c 2B68     		ldr	r3, [r5]
 7037              	.LBE1828:
 7038              	.LBE1827:
 7039              	.LBE1826:
 7040              	.LBE1825:
 878:src/xeq.c     **** }
 7041              		.loc 1 878 2 view .LVU1932
 7042 002e 084A     		ldr	r2, .L559+4
ARM GAS  /tmp/cc0UaEmF.s 			page 252


 7043              	.LVL502:
 7044              	.LBB1832:
 7045              	.LBI1825:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7046              		.loc 1 717 6 is_stmt 1 view .LVU1933
 7047              	.LBB1831:
 718:src/xeq.c     **** }
 7048              		.loc 1 718 2 view .LVU1934
 7049              	.LBB1830:
 7050              	.LBI1827:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7051              		.loc 1 932 5 view .LVU1935
 7052              	.LBB1829:
 933:src/xeq.c     **** }
 7053              		.loc 1 933 2 view .LVU1936
 933:src/xeq.c     **** }
 7054              		.loc 1 933 24 is_stmt 0 view .LVU1937
 7055 0030 B3F8E837 		ldrh	r3, [r3, #2024]
 7056              	.LBE1829:
 7057              	.LBE1830:
 718:src/xeq.c     **** }
 7058              		.loc 1 718 2 view .LVU1938
 7059 0034 1068     		ldr	r0, [r2]
 7060 0036 1C40     		ands	r4, r4, r3
 7061 0038 B4F5804F 		cmp	r4, #16384
 7062 003c 6946     		mov	r1, sp
 7063 003e 0CBF     		ite	eq
 7064 0040 1022     		moveq	r2, #16
 7065              	.LVL503:
 718:src/xeq.c     **** }
 7066              		.loc 1 718 2 view .LVU1939
 7067 0042 0822     		movne	r2, #8
 7068 0044 FFF7FEFF 		bl	xcopy
 7069              	.LVL504:
 718:src/xeq.c     **** }
 7070              		.loc 1 718 2 view .LVU1940
 7071              	.LBE1831:
 7072              	.LBE1832:
 879:src/xeq.c     **** 
 7073              		.loc 1 879 1 view .LVU1941
 7074 0048 05B0     		add	sp, sp, #20
 7075              		.cfi_def_cfa_offset 12
 7076              		@ sp needed
 7077 004a 30BD     		pop	{r4, r5, pc}
 7078              	.L560:
 7079              		.align	2
 7080              	.L559:
 7081 004c 00000000 		.word	main_ram
 7082 0050 00000000 		.word	StackBase
 7083              		.cfi_endproc
 7084              	.LFE71:
 7086              		.section	.text.cpx_roll_up,"ax",%progbits
 7087              		.align	1
 7088              		.p2align 2,,3
 7089              		.global	cpx_roll_up
 7090              		.syntax unified
 7091              		.thumb
ARM GAS  /tmp/cc0UaEmF.s 			page 253


 7092              		.thumb_func
 7093              		.fpu fpv4-sp-d16
 7095              	cpx_roll_up:
 7096              	.LVL505:
 7097              	.LFB73:
 887:src/xeq.c     **** 	roll_up(OP_RUP);
 7098              		.loc 1 887 33 is_stmt 1 view -0
 7099              		.cfi_startproc
 7100              		@ args = 0, pretend = 0, frame = 0
 7101              		@ frame_needed = 0, uses_anonymous_args = 0
 888:src/xeq.c     **** 	roll_up(OP_RUP);
 7102              		.loc 1 888 2 view .LVU1943
 887:src/xeq.c     **** 	roll_up(OP_RUP);
 7103              		.loc 1 887 33 is_stmt 0 view .LVU1944
 7104 0000 08B5     		push	{r3, lr}
 7105              		.cfi_def_cfa_offset 8
 7106              		.cfi_offset 3, -8
 7107              		.cfi_offset 14, -4
 888:src/xeq.c     **** 	roll_up(OP_RUP);
 7108              		.loc 1 888 2 view .LVU1945
 7109 0002 0820     		movs	r0, #8
 7110              	.LVL506:
 888:src/xeq.c     **** 	roll_up(OP_RUP);
 7111              		.loc 1 888 2 view .LVU1946
 7112 0004 FFF7FEFF 		bl	roll_up
 7113              	.LVL507:
 889:src/xeq.c     **** 	set_was_complex();
 7114              		.loc 1 889 2 is_stmt 1 view .LVU1947
 7115 0008 0820     		movs	r0, #8
 7116 000a FFF7FEFF 		bl	roll_up
 7117              	.LVL508:
 890:src/xeq.c     **** }
 7118              		.loc 1 890 2 view .LVU1948
 7119              	.LBB1833:
 7120              	.LBI1833:
 530:src/xeq.c     **** 	State2.wascomplex = 1;
 7121              		.loc 1 530 13 view .LVU1949
 7122              	.LBB1834:
 531:src/xeq.c     **** }
 7123              		.loc 1 531 2 view .LVU1950
 531:src/xeq.c     **** }
 7124              		.loc 1 531 20 is_stmt 0 view .LVU1951
 7125 000e 034B     		ldr	r3, .L563
 7126 0010 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 7127 0012 0121     		movs	r1, #1
 7128 0014 61F38712 		bfi	r2, r1, #6, #2
 7129 0018 1A75     		strb	r2, [r3, #20]
 7130              	.LBE1834:
 7131              	.LBE1833:
 891:src/xeq.c     **** 
 7132              		.loc 1 891 1 view .LVU1952
 7133 001a 08BD     		pop	{r3, pc}
 7134              	.L564:
 7135              		.align	2
 7136              	.L563:
 7137 001c 00000000 		.word	StateWhileOn
 7138              		.cfi_endproc
ARM GAS  /tmp/cc0UaEmF.s 			page 254


 7139              	.LFE73:
 7141              		.section	.text.fill,"ax",%progbits
 7142              		.align	1
 7143              		.p2align 2,,3
 7144              		.global	fill
 7145              		.syntax unified
 7146              		.thumb
 7147              		.thumb_func
 7148              		.fpu fpv4-sp-d16
 7150              	fill:
 7151              	.LVL509:
 7152              	.LFB76:
 910:src/xeq.c     **** 	const int n = stack_size();
 7153              		.loc 1 910 26 is_stmt 1 view -0
 7154              		.cfi_startproc
 7155              		@ args = 0, pretend = 0, frame = 0
 7156              		@ frame_needed = 0, uses_anonymous_args = 0
 911:src/xeq.c     **** 	int i;
 7157              		.loc 1 911 2 view .LVU1954
 7158              	.LBB1835:
 7159              	.LBI1835:
 703:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 7160              		.loc 1 703 5 view .LVU1955
 7161              	.LBB1836:
 704:src/xeq.c     **** 		return 4;
 7162              		.loc 1 704 2 view .LVU1956
 7163              	.LBE1836:
 7164              	.LBE1835:
 910:src/xeq.c     **** 	const int n = stack_size();
 7165              		.loc 1 910 26 is_stmt 0 view .LVU1957
 7166 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 7167              		.cfi_def_cfa_offset 24
 7168              		.cfi_offset 4, -24
 7169              		.cfi_offset 5, -20
 7170              		.cfi_offset 6, -16
 7171              		.cfi_offset 7, -12
 7172              		.cfi_offset 8, -8
 7173              		.cfi_offset 14, -4
 7174              	.LBB1842:
 7175              	.LBB1839:
 704:src/xeq.c     **** 		return 4;
 7176              		.loc 1 704 8 view .LVU1958
 7177 0004 174E     		ldr	r6, .L576
 7178 0006 3368     		ldr	r3, [r6]
 704:src/xeq.c     **** 		return 4;
 7179              		.loc 1 704 6 view .LVU1959
 7180 0008 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 704:src/xeq.c     **** 		return 4;
 7181              		.loc 1 704 5 view .LVU1960
 7182 000c 1207     		lsls	r2, r2, #28
 7183 000e 27D5     		bpl	.L569
 7184              	.LBB1837:
 7185              	.LBI1837:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 7186              		.loc 1 182 5 is_stmt 1 view .LVU1961
 7187              	.LBB1838:
 183:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 255


 7188              		.loc 1 183 2 view .LVU1962
 183:src/xeq.c     **** }
 7189              		.loc 1 183 9 is_stmt 0 view .LVU1963
 7190 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 7191              	.LBE1838:
 7192              	.LBE1837:
 704:src/xeq.c     **** 		return 4;
 7193              		.loc 1 704 27 view .LVU1964
 7194 0014 9B0B     		lsrs	r3, r3, #14
 7195 0016 032B     		cmp	r3, #3
 7196 0018 1AD0     		beq	.L575
 706:src/xeq.c     **** }
 7197              		.loc 1 706 9 view .LVU1965
 7198 001a 0825     		movs	r5, #8
 7199              	.L566:
 7200              	.LVL510:
 706:src/xeq.c     **** }
 7201              		.loc 1 706 9 view .LVU1966
 7202              	.LBE1839:
 7203              	.LBE1842:
 912:src/xeq.c     **** 
 7204              		.loc 1 912 2 is_stmt 1 view .LVU1967
 914:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7205              		.loc 1 914 2 view .LVU1968
 914:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7206              		.loc 1 914 12 view .LVU1969
 7207 001c 124F     		ldr	r7, .L576+4
 7208 001e 6435     		adds	r5, r5, #100
 7209              	.LVL511:
 7210              	.LBB1843:
 7211              	.LBB1840:
 705:src/xeq.c     **** 	return 8;
 7212              		.loc 1 705 10 is_stmt 0 view .LVU1970
 7213 0020 6524     		movs	r4, #101
 7214              	.LBE1840:
 7215              	.LBE1843:
 7216              	.LBB1844:
 7217              	.LBB1845:
 7218              	.LBB1846:
 7219              	.LBB1847:
 933:src/xeq.c     **** }
 7220              		.loc 1 933 24 view .LVU1971
 7221 0022 44F20108 		movw	r8, #16385
 7222              	.LVL512:
 7223              	.L568:
 933:src/xeq.c     **** }
 7224              		.loc 1 933 24 view .LVU1972
 7225              	.LBE1847:
 7226              	.LBE1846:
 7227              	.LBE1845:
 7228              	.LBE1844:
 915:src/xeq.c     **** }
 7229              		.loc 1 915 3 is_stmt 1 view .LVU1973
 7230              	.LBB1853:
 7231              	.LBI1853:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 7232              		.loc 1 709 11 view .LVU1974
ARM GAS  /tmp/cc0UaEmF.s 			page 256


 7233              	.LBB1854:
 710:src/xeq.c     **** }
 7234              		.loc 1 710 2 view .LVU1975
 710:src/xeq.c     **** }
 7235              		.loc 1 710 9 is_stmt 0 view .LVU1976
 7236 0026 2046     		mov	r0, r4
 7237 0028 FFF7FEFF 		bl	get_reg_n
 7238              	.LVL513:
 710:src/xeq.c     **** }
 7239              		.loc 1 710 9 view .LVU1977
 7240              	.LBE1854:
 7241              	.LBE1853:
 7242              	.LBB1855:
 7243              	.LBI1844:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7244              		.loc 1 717 6 is_stmt 1 view .LVU1978
 7245              	.LBB1852:
 718:src/xeq.c     **** }
 7246              		.loc 1 718 2 view .LVU1979
 7247              	.LBB1850:
 7248              	.LBI1846:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7249              		.loc 1 932 5 view .LVU1980
 7250              	.LBB1848:
 933:src/xeq.c     **** }
 7251              		.loc 1 933 2 view .LVU1981
 933:src/xeq.c     **** }
 7252              		.loc 1 933 24 is_stmt 0 view .LVU1982
 7253 002c 3368     		ldr	r3, [r6]
 7254              	.LBE1848:
 7255              	.LBE1850:
 718:src/xeq.c     **** }
 7256              		.loc 1 718 2 view .LVU1983
 7257 002e 3968     		ldr	r1, [r7]
 7258              	.LBB1851:
 7259              	.LBB1849:
 933:src/xeq.c     **** }
 7260              		.loc 1 933 24 view .LVU1984
 7261 0030 B3F8E837 		ldrh	r3, [r3, #2024]
 7262              	.LBE1849:
 7263              	.LBE1851:
 718:src/xeq.c     **** }
 7264              		.loc 1 718 2 view .LVU1985
 7265 0034 08EA0303 		and	r3, r8, r3
 7266 0038 B3F5804F 		cmp	r3, #16384
 7267 003c 0CBF     		ite	eq
 7268 003e 1022     		moveq	r2, #16
 7269 0040 0822     		movne	r2, #8
 7270 0042 0134     		adds	r4, r4, #1
 7271              	.LVL514:
 718:src/xeq.c     **** }
 7272              		.loc 1 718 2 view .LVU1986
 7273 0044 FFF7FEFF 		bl	xcopy
 7274              	.LVL515:
 718:src/xeq.c     **** }
 7275              		.loc 1 718 2 view .LVU1987
 7276              	.LBE1852:
ARM GAS  /tmp/cc0UaEmF.s 			page 257


 7277              	.LBE1855:
 914:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7278              		.loc 1 914 17 is_stmt 1 view .LVU1988
 914:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7279              		.loc 1 914 12 view .LVU1989
 914:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7280              		.loc 1 914 2 is_stmt 0 view .LVU1990
 7281 0048 AC42     		cmp	r4, r5
 7282 004a ECD1     		bne	.L568
 916:src/xeq.c     **** 
 7283              		.loc 1 916 1 view .LVU1991
 7284 004c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 7285              	.LVL516:
 7286              	.L575:
 7287              	.LBB1856:
 7288              	.LBB1841:
 704:src/xeq.c     **** 		return 4;
 7289              		.loc 1 704 44 view .LVU1992
 7290 0050 064B     		ldr	r3, .L576+8
 704:src/xeq.c     **** 		return 4;
 7291              		.loc 1 704 41 view .LVU1993
 7292 0052 93F90130 		ldrsb	r3, [r3, #1]
 705:src/xeq.c     **** 	return 8;
 7293              		.loc 1 705 10 view .LVU1994
 7294 0056 002B     		cmp	r3, #0
 7295 0058 B4BF     		ite	lt
 7296 005a 0825     		movlt	r5, #8
 7297 005c 0425     		movge	r5, #4
 7298 005e DDE7     		b	.L566
 7299              	.L569:
 7300 0060 0425     		movs	r5, #4
 7301 0062 DBE7     		b	.L566
 7302              	.L577:
 7303              		.align	2
 7304              	.L576:
 7305 0064 00000000 		.word	main_ram
 7306 0068 00000000 		.word	StackBase
 7307 006c 00000000 		.word	XromParams
 7308              	.LBE1841:
 7309              	.LBE1856:
 7310              		.cfi_endproc
 7311              	.LFE76:
 7313              		.section	.text.lower2,"ax",%progbits
 7314              		.align	1
 7315              		.p2align 2,,3
 7316              		.syntax unified
 7317              		.thumb
 7318              		.thumb_func
 7319              		.fpu fpv4-sp-d16
 7321              	lower2:
 7322              	.LFB54:
 764:src/xeq.c     **** 	const int n = stack_size();
 7323              		.loc 1 764 26 is_stmt 1 view -0
 7324              		.cfi_startproc
 7325              		@ args = 0, pretend = 0, frame = 0
 7326              		@ frame_needed = 0, uses_anonymous_args = 0
 765:src/xeq.c     **** 	int i;
ARM GAS  /tmp/cc0UaEmF.s 			page 258


 7327              		.loc 1 765 2 view .LVU1996
 7328              	.LBB1857:
 7329              	.LBI1857:
 703:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 7330              		.loc 1 703 5 view .LVU1997
 7331              	.LBB1858:
 704:src/xeq.c     **** 		return 4;
 7332              		.loc 1 704 2 view .LVU1998
 7333              	.LBE1858:
 7334              	.LBE1857:
 764:src/xeq.c     **** 	const int n = stack_size();
 7335              		.loc 1 764 26 is_stmt 0 view .LVU1999
 7336 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 7337              		.cfi_def_cfa_offset 24
 7338              		.cfi_offset 4, -24
 7339              		.cfi_offset 5, -20
 7340              		.cfi_offset 6, -16
 7341              		.cfi_offset 7, -12
 7342              		.cfi_offset 8, -8
 7343              		.cfi_offset 14, -4
 7344              	.LBB1864:
 7345              	.LBB1861:
 704:src/xeq.c     **** 		return 4;
 7346              		.loc 1 704 8 view .LVU2000
 7347 0004 194F     		ldr	r7, .L589
 7348 0006 3B68     		ldr	r3, [r7]
 704:src/xeq.c     **** 		return 4;
 7349              		.loc 1 704 6 view .LVU2001
 7350 0008 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 704:src/xeq.c     **** 		return 4;
 7351              		.loc 1 704 5 view .LVU2002
 7352 000c 1207     		lsls	r2, r2, #28
 7353 000e 2BD5     		bpl	.L582
 7354              	.LBB1859:
 7355              	.LBI1859:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 7356              		.loc 1 182 5 is_stmt 1 view .LVU2003
 7357              	.LBB1860:
 183:src/xeq.c     **** }
 7358              		.loc 1 183 2 view .LVU2004
 183:src/xeq.c     **** }
 7359              		.loc 1 183 9 is_stmt 0 view .LVU2005
 7360 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 7361              	.LBE1860:
 7362              	.LBE1859:
 704:src/xeq.c     **** 		return 4;
 7363              		.loc 1 704 27 view .LVU2006
 7364 0014 9B0B     		lsrs	r3, r3, #14
 7365 0016 032B     		cmp	r3, #3
 7366 0018 1ED0     		beq	.L588
 706:src/xeq.c     **** }
 7367              		.loc 1 706 9 view .LVU2007
 7368 001a 0826     		movs	r6, #8
 7369              	.L579:
 7370              	.LVL517:
 706:src/xeq.c     **** }
 7371              		.loc 1 706 9 view .LVU2008
ARM GAS  /tmp/cc0UaEmF.s 			page 259


 7372              	.LBE1861:
 7373              	.LBE1864:
 766:src/xeq.c     **** 
 7374              		.loc 1 766 2 is_stmt 1 view .LVU2009
 768:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7375              		.loc 1 768 2 view .LVU2010
 768:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7376              		.loc 1 768 12 view .LVU2011
 7377 001c 6236     		adds	r6, r6, #98
 7378              	.LVL518:
 7379              	.LBB1865:
 7380              	.LBB1862:
 705:src/xeq.c     **** 	return 8;
 7381              		.loc 1 705 10 is_stmt 0 view .LVU2012
 7382 001e 6424     		movs	r4, #100
 7383              	.LBE1862:
 7384              	.LBE1865:
 7385              	.LBB1866:
 7386              	.LBB1867:
 7387              	.LBB1868:
 7388              	.LBB1869:
 933:src/xeq.c     **** }
 7389              		.loc 1 933 24 view .LVU2013
 7390 0020 44F20108 		movw	r8, #16385
 7391              	.LVL519:
 7392              	.L581:
 933:src/xeq.c     **** }
 7393              		.loc 1 933 24 view .LVU2014
 7394              	.LBE1869:
 7395              	.LBE1868:
 7396              	.LBE1867:
 7397              	.LBE1866:
 769:src/xeq.c     **** }
 7398              		.loc 1 769 3 is_stmt 1 discriminator 3 view .LVU2015
 7399              	.LBB1876:
 7400              	.LBI1876:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 7401              		.loc 1 709 11 discriminator 3 view .LVU2016
 7402              	.LBB1877:
 710:src/xeq.c     **** }
 7403              		.loc 1 710 2 discriminator 3 view .LVU2017
 710:src/xeq.c     **** }
 7404              		.loc 1 710 9 is_stmt 0 discriminator 3 view .LVU2018
 7405 0024 2046     		mov	r0, r4
 7406 0026 FFF7FEFF 		bl	get_reg_n
 7407              	.LVL520:
 7408 002a 0546     		mov	r5, r0
 7409              	.LBE1877:
 7410              	.LBE1876:
 7411              	.LBB1878:
 7412              	.LBB1879:
 7413 002c A01C     		adds	r0, r4, #2
 7414              	.LVL521:
 710:src/xeq.c     **** }
 7415              		.loc 1 710 9 discriminator 3 view .LVU2019
 7416              	.LBE1879:
 7417              	.LBI1878:
ARM GAS  /tmp/cc0UaEmF.s 			page 260


 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 7418              		.loc 1 709 11 is_stmt 1 discriminator 3 view .LVU2020
 7419              	.LBB1880:
 710:src/xeq.c     **** }
 7420              		.loc 1 710 2 discriminator 3 view .LVU2021
 710:src/xeq.c     **** }
 7421              		.loc 1 710 9 is_stmt 0 discriminator 3 view .LVU2022
 7422 002e FFF7FEFF 		bl	get_reg_n
 7423              	.LVL522:
 710:src/xeq.c     **** }
 7424              		.loc 1 710 9 discriminator 3 view .LVU2023
 7425              	.LBE1880:
 7426              	.LBE1878:
 7427              	.LBB1882:
 7428              	.LBB1874:
 7429              	.LBB1872:
 7430              	.LBB1870:
 933:src/xeq.c     **** }
 7431              		.loc 1 933 24 discriminator 3 view .LVU2024
 7432 0032 3B68     		ldr	r3, [r7]
 7433 0034 B3F8E837 		ldrh	r3, [r3, #2024]
 7434              	.LBE1870:
 7435              	.LBE1872:
 718:src/xeq.c     **** }
 7436              		.loc 1 718 2 discriminator 3 view .LVU2025
 7437 0038 08EA0303 		and	r3, r8, r3
 7438 003c B3F5804F 		cmp	r3, #16384
 7439              	.LBE1874:
 7440              	.LBE1882:
 7441              	.LBB1883:
 7442              	.LBB1881:
 710:src/xeq.c     **** }
 7443              		.loc 1 710 9 discriminator 3 view .LVU2026
 7444 0040 0146     		mov	r1, r0
 7445              	.LVL523:
 710:src/xeq.c     **** }
 7446              		.loc 1 710 9 discriminator 3 view .LVU2027
 7447              	.LBE1881:
 7448              	.LBE1883:
 7449              	.LBB1884:
 7450              	.LBI1866:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7451              		.loc 1 717 6 is_stmt 1 discriminator 3 view .LVU2028
 7452              	.LBB1875:
 718:src/xeq.c     **** }
 7453              		.loc 1 718 2 discriminator 3 view .LVU2029
 7454              	.LBB1873:
 7455              	.LBI1868:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7456              		.loc 1 932 5 discriminator 3 view .LVU2030
 7457              	.LBB1871:
 933:src/xeq.c     **** }
 7458              		.loc 1 933 2 discriminator 3 view .LVU2031
 7459              	.LBE1871:
 7460              	.LBE1873:
 718:src/xeq.c     **** }
 7461              		.loc 1 718 2 is_stmt 0 discriminator 3 view .LVU2032
ARM GAS  /tmp/cc0UaEmF.s 			page 261


 7462 0042 0CBF     		ite	eq
 7463 0044 1022     		moveq	r2, #16
 7464 0046 0822     		movne	r2, #8
 7465 0048 2846     		mov	r0, r5
 7466              	.LVL524:
 718:src/xeq.c     **** }
 7467              		.loc 1 718 2 discriminator 3 view .LVU2033
 7468 004a 0134     		adds	r4, r4, #1
 7469              	.LVL525:
 718:src/xeq.c     **** }
 7470              		.loc 1 718 2 discriminator 3 view .LVU2034
 7471 004c FFF7FEFF 		bl	xcopy
 7472              	.LVL526:
 718:src/xeq.c     **** }
 7473              		.loc 1 718 2 discriminator 3 view .LVU2035
 7474              	.LBE1875:
 7475              	.LBE1884:
 768:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7476              		.loc 1 768 17 is_stmt 1 discriminator 3 view .LVU2036
 768:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7477              		.loc 1 768 12 discriminator 3 view .LVU2037
 768:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7478              		.loc 1 768 2 is_stmt 0 discriminator 3 view .LVU2038
 7479 0050 B442     		cmp	r4, r6
 7480 0052 E7D1     		bne	.L581
 770:src/xeq.c     **** 
 7481              		.loc 1 770 1 view .LVU2039
 7482 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 7483              	.LVL527:
 7484              	.L588:
 7485              	.LBB1885:
 7486              	.LBB1863:
 704:src/xeq.c     **** 		return 4;
 7487              		.loc 1 704 44 view .LVU2040
 7488 0058 054B     		ldr	r3, .L589+4
 704:src/xeq.c     **** 		return 4;
 7489              		.loc 1 704 41 view .LVU2041
 7490 005a 93F90130 		ldrsb	r3, [r3, #1]
 705:src/xeq.c     **** 	return 8;
 7491              		.loc 1 705 10 view .LVU2042
 7492 005e 002B     		cmp	r3, #0
 7493 0060 B4BF     		ite	lt
 7494 0062 0826     		movlt	r6, #8
 7495 0064 0426     		movge	r6, #4
 7496 0066 D9E7     		b	.L579
 7497              	.L582:
 7498 0068 0426     		movs	r6, #4
 7499 006a D7E7     		b	.L579
 7500              	.L590:
 7501              		.align	2
 7502              	.L589:
 7503 006c 00000000 		.word	main_ram
 7504 0070 00000000 		.word	XromParams
 7505              	.LBE1863:
 7506              	.LBE1885:
 7507              		.cfi_endproc
 7508              	.LFE54:
ARM GAS  /tmp/cc0UaEmF.s 			page 262


 7510              		.section	.text.drop,"ax",%progbits
 7511              		.align	1
 7512              		.p2align 2,,3
 7513              		.global	drop
 7514              		.syntax unified
 7515              		.thumb
 7516              		.thumb_func
 7517              		.fpu fpv4-sp-d16
 7519              	drop:
 7520              	.LVL528:
 7521              	.LFB77:
 918:src/xeq.c     **** 	if (op == OP_DROPXY) {
 7522              		.loc 1 918 26 is_stmt 1 view -0
 7523              		.cfi_startproc
 7524              		@ args = 0, pretend = 0, frame = 0
 7525              		@ frame_needed = 0, uses_anonymous_args = 0
 919:src/xeq.c     **** 		lower2();
 7526              		.loc 1 919 2 view .LVU2044
 919:src/xeq.c     **** 		lower2();
 7527              		.loc 1 919 5 is_stmt 0 view .LVU2045
 7528 0000 0F28     		cmp	r0, #15
 7529 0002 01D0     		beq	.L598
 923:src/xeq.c     **** }
 7530              		.loc 1 923 3 is_stmt 1 view .LVU2046
 7531 0004 FFF7FEBF 		b	lower
 7532              	.LVL529:
 7533              	.L598:
 920:src/xeq.c     **** 		set_was_complex();
 7534              		.loc 1 920 3 view .LVU2047
 918:src/xeq.c     **** 	if (op == OP_DROPXY) {
 7535              		.loc 1 918 26 is_stmt 0 view .LVU2048
 7536 0008 08B5     		push	{r3, lr}
 7537              		.cfi_def_cfa_offset 8
 7538              		.cfi_offset 3, -8
 7539              		.cfi_offset 14, -4
 920:src/xeq.c     **** 		set_was_complex();
 7540              		.loc 1 920 3 view .LVU2049
 7541 000a FFF7FEFF 		bl	lower2
 7542              	.LVL530:
 921:src/xeq.c     **** 	} else
 7543              		.loc 1 921 3 is_stmt 1 view .LVU2050
 7544              	.LBB1886:
 7545              	.LBI1886:
 530:src/xeq.c     **** 	State2.wascomplex = 1;
 7546              		.loc 1 530 13 view .LVU2051
 7547              	.LBB1887:
 531:src/xeq.c     **** }
 7548              		.loc 1 531 2 view .LVU2052
 531:src/xeq.c     **** }
 7549              		.loc 1 531 20 is_stmt 0 view .LVU2053
 7550 000e 034B     		ldr	r3, .L599
 7551 0010 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 7552 0012 0121     		movs	r1, #1
 7553 0014 61F38712 		bfi	r2, r1, #6, #2
 7554 0018 1A75     		strb	r2, [r3, #20]
 7555              	.LBE1887:
 7556              	.LBE1886:
ARM GAS  /tmp/cc0UaEmF.s 			page 263


 924:src/xeq.c     **** 
 7557              		.loc 1 924 1 view .LVU2054
 7558 001a 08BD     		pop	{r3, pc}
 7559              	.L600:
 7560              		.align	2
 7561              	.L599:
 7562 001c 00000000 		.word	StateWhileOn
 7563              		.cfi_endproc
 7564              	.LFE77:
 7566              		.section	.text.copyreg_n,"ax",%progbits
 7567              		.align	1
 7568              		.p2align 2,,3
 7569              		.global	copyreg_n
 7570              		.syntax unified
 7571              		.thumb
 7572              		.thumb_func
 7573              		.fpu fpv4-sp-d16
 7575              	copyreg_n:
 7576              	.LVL531:
 7577              	.LFB46:
 721:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 7578              		.loc 1 721 30 is_stmt 1 view -0
 7579              		.cfi_startproc
 7580              		@ args = 0, pretend = 0, frame = 0
 7581              		@ frame_needed = 0, uses_anonymous_args = 0
 722:src/xeq.c     **** }
 7582              		.loc 1 722 2 view .LVU2056
 721:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 7583              		.loc 1 721 30 is_stmt 0 view .LVU2057
 7584 0000 38B5     		push	{r3, r4, r5, lr}
 7585              		.cfi_def_cfa_offset 16
 7586              		.cfi_offset 3, -16
 7587              		.cfi_offset 4, -12
 7588              		.cfi_offset 5, -8
 7589              		.cfi_offset 14, -4
 721:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 7590              		.loc 1 721 30 view .LVU2058
 7591 0002 0D46     		mov	r5, r1
 722:src/xeq.c     **** }
 7592              		.loc 1 722 2 view .LVU2059
 7593 0004 FFF7FEFF 		bl	get_reg_n
 7594              	.LVL532:
 722:src/xeq.c     **** }
 7595              		.loc 1 722 2 view .LVU2060
 7596 0008 0446     		mov	r4, r0
 722:src/xeq.c     **** }
 7597              		.loc 1 722 24 view .LVU2061
 7598 000a 2846     		mov	r0, r5
 7599 000c FFF7FEFF 		bl	get_reg_n
 7600              	.LVL533:
 7601              	.LBB1888:
 7602              	.LBB1889:
 7603              	.LBB1890:
 7604              	.LBB1891:
 933:src/xeq.c     **** }
 7605              		.loc 1 933 24 view .LVU2062
 7606 0010 094B     		ldr	r3, .L605
ARM GAS  /tmp/cc0UaEmF.s 			page 264


 7607 0012 1B68     		ldr	r3, [r3]
 7608 0014 B3F8E827 		ldrh	r2, [r3, #2024]
 7609 0018 44F20103 		movw	r3, #16385
 7610              	.LBE1891:
 7611              	.LBE1890:
 718:src/xeq.c     **** }
 7612              		.loc 1 718 2 view .LVU2063
 7613 001c 1340     		ands	r3, r3, r2
 7614 001e B3F5804F 		cmp	r3, #16384
 7615              	.LBE1889:
 7616              	.LBE1888:
 722:src/xeq.c     **** }
 7617              		.loc 1 722 24 view .LVU2064
 7618 0022 0146     		mov	r1, r0
 7619              	.LVL534:
 7620              	.LBB1896:
 7621              	.LBI1888:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7622              		.loc 1 717 6 is_stmt 1 view .LVU2065
 7623              	.LBB1894:
 718:src/xeq.c     **** }
 7624              		.loc 1 718 2 view .LVU2066
 7625              	.LBB1893:
 7626              	.LBI1890:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7627              		.loc 1 932 5 view .LVU2067
 7628              	.LBB1892:
 933:src/xeq.c     **** }
 7629              		.loc 1 933 2 view .LVU2068
 7630              	.LBE1892:
 7631              	.LBE1893:
 718:src/xeq.c     **** }
 7632              		.loc 1 718 2 is_stmt 0 view .LVU2069
 7633 0024 08BF     		it	eq
 7634 0026 1022     		moveq	r2, #16
 7635 0028 2046     		mov	r0, r4
 7636              	.LVL535:
 718:src/xeq.c     **** }
 7637              		.loc 1 718 2 view .LVU2070
 7638 002a 18BF     		it	ne
 7639 002c 0822     		movne	r2, #8
 7640              	.LBE1894:
 7641              	.LBE1896:
 723:src/xeq.c     **** 
 7642              		.loc 1 723 1 view .LVU2071
 7643 002e BDE83840 		pop	{r3, r4, r5, lr}
 7644              		.cfi_restore 14
 7645              		.cfi_restore 5
 7646              		.cfi_restore 4
 7647              		.cfi_restore 3
 7648              		.cfi_def_cfa_offset 0
 7649              	.LVL536:
 7650              	.LBB1897:
 7651              	.LBB1895:
 718:src/xeq.c     **** }
 7652              		.loc 1 718 2 view .LVU2072
 7653 0032 FFF7FEBF 		b	xcopy
ARM GAS  /tmp/cc0UaEmF.s 			page 265


 7654              	.LVL537:
 7655              	.L606:
 718:src/xeq.c     **** }
 7656              		.loc 1 718 2 view .LVU2073
 7657 0036 00BF     		.align	2
 7658              	.L605:
 7659 0038 00000000 		.word	main_ram
 7660              	.LBE1895:
 7661              	.LBE1897:
 7662              		.cfi_endproc
 7663              	.LFE46:
 7665              		.section	.text.setlastX,"ax",%progbits
 7666              		.align	1
 7667              		.p2align 2,,3
 7668              		.global	setlastX
 7669              		.syntax unified
 7670              		.thumb
 7671              		.thumb_func
 7672              		.fpu fpv4-sp-d16
 7674              	setlastX:
 7675              	.LFB55:
 773:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 7676              		.loc 1 773 21 is_stmt 1 view -0
 7677              		.cfi_startproc
 7678              		@ args = 0, pretend = 0, frame = 0
 7679              		@ frame_needed = 0, uses_anonymous_args = 0
 7680              		@ link register save eliminated.
 774:src/xeq.c     **** }
 7681              		.loc 1 774 2 view .LVU2075
 7682 0000 6421     		movs	r1, #100
 7683 0002 6C20     		movs	r0, #108
 7684 0004 FFF7FEBF 		b	copyreg_n
 7685              	.LVL538:
 7686              		.cfi_endproc
 7687              	.LFE55:
 7689              		.section	.text.setlastXY,"ax",%progbits
 7690              		.align	1
 7691              		.p2align 2,,3
 7692              		.syntax unified
 7693              		.thumb
 7694              		.thumb_func
 7695              		.fpu fpv4-sp-d16
 7697              	setlastXY:
 7698              	.LFB56:
 777:src/xeq.c     **** 	setlastX();
 7699              		.loc 1 777 29 view -0
 7700              		.cfi_startproc
 7701              		@ args = 0, pretend = 0, frame = 0
 7702              		@ frame_needed = 0, uses_anonymous_args = 0
 778:src/xeq.c     **** 	copyreg_n(regI_idx, regY_idx);
 7703              		.loc 1 778 2 view .LVU2077
 7704              	.LBB1898:
 7705              	.LBI1898:
 773:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 7706              		.loc 1 773 6 view .LVU2078
 7707              	.LBB1899:
 774:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 266


 7708              		.loc 1 774 2 view .LVU2079
 7709              	.LBE1899:
 7710              	.LBE1898:
 777:src/xeq.c     **** 	setlastX();
 7711              		.loc 1 777 29 is_stmt 0 view .LVU2080
 7712 0000 08B5     		push	{r3, lr}
 7713              		.cfi_def_cfa_offset 8
 7714              		.cfi_offset 3, -8
 7715              		.cfi_offset 14, -4
 7716              	.LBB1901:
 7717              	.LBB1900:
 774:src/xeq.c     **** }
 7718              		.loc 1 774 2 view .LVU2081
 7719 0002 6421     		movs	r1, #100
 7720 0004 6C20     		movs	r0, #108
 7721 0006 FFF7FEFF 		bl	copyreg_n
 7722              	.LVL539:
 7723              	.LBE1900:
 7724              	.LBE1901:
 779:src/xeq.c     **** }
 7725              		.loc 1 779 2 is_stmt 1 view .LVU2082
 780:src/xeq.c     **** 
 7726              		.loc 1 780 1 is_stmt 0 view .LVU2083
 7727 000a BDE80840 		pop	{r3, lr}
 7728              		.cfi_restore 14
 7729              		.cfi_restore 3
 7730              		.cfi_def_cfa_offset 0
 779:src/xeq.c     **** }
 7731              		.loc 1 779 2 view .LVU2084
 7732 000e 6521     		movs	r1, #101
 7733 0010 6D20     		movs	r0, #109
 7734 0012 FFF7FEBF 		b	copyreg_n
 7735              	.LVL540:
 7736              		.cfi_endproc
 7737              	.LFE56:
 7739 0016 00BF     		.section	.text.getRegister,"ax",%progbits
 7740              		.align	1
 7741              		.p2align 2,,3
 7742              		.global	getRegister
 7743              		.syntax unified
 7744              		.thumb
 7745              		.thumb_func
 7746              		.fpu fpv4-sp-d16
 7748              	getRegister:
 7749              	.LVL541:
 7750              	.LFB57:
 783:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 7751              		.loc 1 783 49 is_stmt 1 view -0
 7752              		.cfi_startproc
 7753              		@ args = 0, pretend = 0, frame = 0
 7754              		@ frame_needed = 0, uses_anonymous_args = 0
 784:src/xeq.c     **** 	if (is_dblmode())
 7755              		.loc 1 784 2 view .LVU2086
 783:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 7756              		.loc 1 783 49 is_stmt 0 view .LVU2087
 7757 0000 10B5     		push	{r4, lr}
 7758              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cc0UaEmF.s 			page 267


 7759              		.cfi_offset 4, -8
 7760              		.cfi_offset 14, -4
 783:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 7761              		.loc 1 783 49 view .LVU2088
 7762 0002 0446     		mov	r4, r0
 784:src/xeq.c     **** 	if (is_dblmode())
 7763              		.loc 1 784 30 view .LVU2089
 7764 0004 0846     		mov	r0, r1
 7765              	.LVL542:
 784:src/xeq.c     **** 	if (is_dblmode())
 7766              		.loc 1 784 30 view .LVU2090
 7767 0006 FFF7FEFF 		bl	get_reg_n
 7768              	.LVL543:
 785:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 7769              		.loc 1 785 2 is_stmt 1 view .LVU2091
 7770              	.LBB1902:
 7771              	.LBI1902:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7772              		.loc 1 932 5 view .LVU2092
 7773              	.LBB1903:
 933:src/xeq.c     **** }
 7774              		.loc 1 933 2 view .LVU2093
 933:src/xeq.c     **** }
 7775              		.loc 1 933 24 is_stmt 0 view .LVU2094
 7776 000a 094B     		ldr	r3, .L615
 7777 000c 1B68     		ldr	r3, [r3]
 7778 000e B3F8E827 		ldrh	r2, [r3, #2024]
 7779 0012 44F20103 		movw	r3, #16385
 7780              	.LBE1903:
 7781              	.LBE1902:
 785:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 7782              		.loc 1 785 5 view .LVU2095
 7783 0016 1340     		ands	r3, r3, r2
 7784 0018 B3F5804F 		cmp	r3, #16384
 786:src/xeq.c     **** 	else
 7785              		.loc 1 786 3 view .LVU2096
 7786 001c 2146     		mov	r1, r4
 785:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 7787              		.loc 1 785 5 view .LVU2097
 7788 001e 03D0     		beq	.L614
 788:src/xeq.c     **** 	return r;
 7789              		.loc 1 788 3 is_stmt 1 view .LVU2098
 7790 0020 FFF7FEFF 		bl	decimal64ToNumber
 7791              	.LVL544:
 789:src/xeq.c     **** }
 7792              		.loc 1 789 2 view .LVU2099
 790:src/xeq.c     **** 
 7793              		.loc 1 790 1 is_stmt 0 view .LVU2100
 7794 0024 2046     		mov	r0, r4
 7795 0026 10BD     		pop	{r4, pc}
 7796              	.LVL545:
 7797              	.L614:
 786:src/xeq.c     **** 	else
 7798              		.loc 1 786 3 is_stmt 1 view .LVU2101
 7799 0028 FFF7FEFF 		bl	decimal128ToNumber
 7800              	.LVL546:
 789:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 268


 7801              		.loc 1 789 2 view .LVU2102
 790:src/xeq.c     **** 
 7802              		.loc 1 790 1 is_stmt 0 view .LVU2103
 7803 002c 2046     		mov	r0, r4
 7804 002e 10BD     		pop	{r4, pc}
 7805              	.LVL547:
 7806              	.L616:
 790:src/xeq.c     **** 
 7807              		.loc 1 790 1 view .LVU2104
 7808              		.align	2
 7809              	.L615:
 7810 0030 00000000 		.word	main_ram
 7811              		.cfi_endproc
 7812              	.LFE57:
 7814              		.section	.text.getX,"ax",%progbits
 7815              		.align	1
 7816              		.p2align 2,,3
 7817              		.global	getX
 7818              		.syntax unified
 7819              		.thumb
 7820              		.thumb_func
 7821              		.fpu fpv4-sp-d16
 7823              	getX:
 7824              	.LVL548:
 7825              	.LFB59:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 7826              		.loc 1 805 31 is_stmt 1 view -0
 7827              		.cfi_startproc
 7828              		@ args = 0, pretend = 0, frame = 0
 7829              		@ frame_needed = 0, uses_anonymous_args = 0
 7830              		@ link register save eliminated.
 806:src/xeq.c     **** }
 7831              		.loc 1 806 2 view .LVU2106
 806:src/xeq.c     **** }
 7832              		.loc 1 806 9 is_stmt 0 view .LVU2107
 7833 0000 6421     		movs	r1, #100
 7834 0002 FFF7FEBF 		b	getRegister
 7835              	.LVL549:
 806:src/xeq.c     **** }
 7836              		.loc 1 806 9 view .LVU2108
 7837              		.cfi_endproc
 7838              	.LFE59:
 7840 0006 00BF     		.section	.text.getY,"ax",%progbits
 7841              		.align	1
 7842              		.p2align 2,,3
 7843              		.global	getY
 7844              		.syntax unified
 7845              		.thumb
 7846              		.thumb_func
 7847              		.fpu fpv4-sp-d16
 7849              	getY:
 7850              	.LVL550:
 7851              	.LFB61:
 813:src/xeq.c     **** 	getRegister(y, regY_idx);
 7852              		.loc 1 813 25 is_stmt 1 view -0
 7853              		.cfi_startproc
 7854              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc0UaEmF.s 			page 269


 7855              		@ frame_needed = 0, uses_anonymous_args = 0
 7856              		@ link register save eliminated.
 814:src/xeq.c     **** }
 7857              		.loc 1 814 2 view .LVU2110
 7858 0000 6521     		movs	r1, #101
 7859 0002 FFF7FEBF 		b	getRegister
 7860              	.LVL551:
 814:src/xeq.c     **** }
 7861              		.loc 1 814 2 is_stmt 0 view .LVU2111
 7862              		.cfi_endproc
 7863              	.LFE61:
 7865 0006 00BF     		.section	.text.getXY,"ax",%progbits
 7866              		.align	1
 7867              		.p2align 2,,3
 7868              		.global	getXY
 7869              		.syntax unified
 7870              		.thumb
 7871              		.thumb_func
 7872              		.fpu fpv4-sp-d16
 7874              	getXY:
 7875              	.LVL552:
 7876              	.LFB65:
 835:src/xeq.c     **** 	getX(x);
 7877              		.loc 1 835 40 is_stmt 1 view -0
 7878              		.cfi_startproc
 7879              		@ args = 0, pretend = 0, frame = 0
 7880              		@ frame_needed = 0, uses_anonymous_args = 0
 836:src/xeq.c     **** 	getY(y);
 7881              		.loc 1 836 2 view .LVU2113
 7882              	.LBB1904:
 7883              	.LBI1904:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 7884              		.loc 1 805 12 view .LVU2114
 7885              	.LBB1905:
 806:src/xeq.c     **** }
 7886              		.loc 1 806 2 view .LVU2115
 7887              	.LBE1905:
 7888              	.LBE1904:
 835:src/xeq.c     **** 	getX(x);
 7889              		.loc 1 835 40 is_stmt 0 view .LVU2116
 7890 0000 10B5     		push	{r4, lr}
 7891              		.cfi_def_cfa_offset 8
 7892              		.cfi_offset 4, -8
 7893              		.cfi_offset 14, -4
 835:src/xeq.c     **** 	getX(x);
 7894              		.loc 1 835 40 view .LVU2117
 7895 0002 0C46     		mov	r4, r1
 7896              	.LBB1907:
 7897              	.LBB1906:
 806:src/xeq.c     **** }
 7898              		.loc 1 806 9 view .LVU2118
 7899 0004 6421     		movs	r1, #100
 7900              	.LVL553:
 806:src/xeq.c     **** }
 7901              		.loc 1 806 9 view .LVU2119
 7902 0006 FFF7FEFF 		bl	getRegister
 7903              	.LVL554:
ARM GAS  /tmp/cc0UaEmF.s 			page 270


 806:src/xeq.c     **** }
 7904              		.loc 1 806 9 view .LVU2120
 7905              	.LBE1906:
 7906              	.LBE1907:
 837:src/xeq.c     **** }
 7907              		.loc 1 837 2 is_stmt 1 view .LVU2121
 7908              	.LBB1908:
 7909              	.LBI1908:
 813:src/xeq.c     **** 	getRegister(y, regY_idx);
 7910              		.loc 1 813 6 view .LVU2122
 7911              	.LBB1909:
 814:src/xeq.c     **** }
 7912              		.loc 1 814 2 view .LVU2123
 7913 000a 2046     		mov	r0, r4
 7914 000c 6521     		movs	r1, #101
 7915              	.LBE1909:
 7916              	.LBE1908:
 838:src/xeq.c     **** 
 7917              		.loc 1 838 1 is_stmt 0 view .LVU2124
 7918 000e BDE81040 		pop	{r4, lr}
 7919              		.cfi_restore 14
 7920              		.cfi_restore 4
 7921              		.cfi_def_cfa_offset 0
 7922              	.LVL555:
 7923              	.LBB1911:
 7924              	.LBB1910:
 814:src/xeq.c     **** }
 7925              		.loc 1 814 2 view .LVU2125
 7926 0012 FFF7FEBF 		b	getRegister
 7927              	.LVL556:
 814:src/xeq.c     **** }
 7928              		.loc 1 814 2 view .LVU2126
 7929              	.LBE1910:
 7930              	.LBE1911:
 7931              		.cfi_endproc
 7932              	.LFE65:
 7934 0016 00BF     		.section	.text.getXYZ,"ax",%progbits
 7935              		.align	1
 7936              		.p2align 2,,3
 7937              		.global	getXYZ
 7938              		.syntax unified
 7939              		.thumb
 7940              		.thumb_func
 7941              		.fpu fpv4-sp-d16
 7943              	getXYZ:
 7944              	.LVL557:
 7945              	.LFB67:
 845:src/xeq.c     **** 	getXY(x, y);
 7946              		.loc 1 845 55 is_stmt 1 view -0
 7947              		.cfi_startproc
 7948              		@ args = 0, pretend = 0, frame = 0
 7949              		@ frame_needed = 0, uses_anonymous_args = 0
 846:src/xeq.c     **** 	getZ(z);
 7950              		.loc 1 846 2 view .LVU2128
 845:src/xeq.c     **** 	getXY(x, y);
 7951              		.loc 1 845 55 is_stmt 0 view .LVU2129
 7952 0000 38B5     		push	{r3, r4, r5, lr}
ARM GAS  /tmp/cc0UaEmF.s 			page 271


 7953              		.cfi_def_cfa_offset 16
 7954              		.cfi_offset 3, -16
 7955              		.cfi_offset 4, -12
 7956              		.cfi_offset 5, -8
 7957              		.cfi_offset 14, -4
 845:src/xeq.c     **** 	getXY(x, y);
 7958              		.loc 1 845 55 view .LVU2130
 7959 0002 0D46     		mov	r5, r1
 7960              	.LVL558:
 7961              	.LBB1912:
 7962              	.LBI1912:
 835:src/xeq.c     **** 	getX(x);
 7963              		.loc 1 835 6 is_stmt 1 view .LVU2131
 7964              	.LBE1912:
 836:src/xeq.c     **** 	getY(y);
 7965              		.loc 1 836 2 view .LVU2132
 7966              	.LBB1919:
 7967              	.LBB1913:
 7968              	.LBI1913:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 7969              		.loc 1 805 12 view .LVU2133
 7970              	.LBB1914:
 806:src/xeq.c     **** }
 7971              		.loc 1 806 2 view .LVU2134
 806:src/xeq.c     **** }
 7972              		.loc 1 806 9 is_stmt 0 view .LVU2135
 7973 0004 6421     		movs	r1, #100
 7974              	.LVL559:
 806:src/xeq.c     **** }
 7975              		.loc 1 806 9 view .LVU2136
 7976              	.LBE1914:
 7977              	.LBE1913:
 7978              	.LBE1919:
 845:src/xeq.c     **** 	getXY(x, y);
 7979              		.loc 1 845 55 view .LVU2137
 7980 0006 1446     		mov	r4, r2
 7981              	.LBB1920:
 7982              	.LBB1916:
 7983              	.LBB1915:
 806:src/xeq.c     **** }
 7984              		.loc 1 806 9 view .LVU2138
 7985 0008 FFF7FEFF 		bl	getRegister
 7986              	.LVL560:
 806:src/xeq.c     **** }
 7987              		.loc 1 806 9 view .LVU2139
 7988              	.LBE1915:
 7989              	.LBE1916:
 7990              	.LBE1920:
 837:src/xeq.c     **** }
 7991              		.loc 1 837 2 is_stmt 1 view .LVU2140
 7992              	.LBB1921:
 7993              	.LBB1917:
 7994              	.LBI1917:
 813:src/xeq.c     **** 	getRegister(y, regY_idx);
 7995              		.loc 1 813 6 view .LVU2141
 7996              	.LBB1918:
 814:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 272


 7997              		.loc 1 814 2 view .LVU2142
 7998 000c 2846     		mov	r0, r5
 7999 000e 6521     		movs	r1, #101
 8000 0010 FFF7FEFF 		bl	getRegister
 8001              	.LVL561:
 814:src/xeq.c     **** }
 8002              		.loc 1 814 2 is_stmt 0 view .LVU2143
 8003              	.LBE1918:
 8004              	.LBE1917:
 8005              	.LBE1921:
 847:src/xeq.c     **** }
 8006              		.loc 1 847 2 is_stmt 1 view .LVU2144
 8007              	.LBB1922:
 8008              	.LBI1922:
 821:src/xeq.c     **** 	getRegister(z, regZ_idx);
 8009              		.loc 1 821 13 view .LVU2145
 8010              	.LBB1923:
 822:src/xeq.c     **** }
 8011              		.loc 1 822 2 view .LVU2146
 8012 0014 2046     		mov	r0, r4
 8013 0016 6621     		movs	r1, #102
 8014              	.LBE1923:
 8015              	.LBE1922:
 848:src/xeq.c     **** 
 8016              		.loc 1 848 1 is_stmt 0 view .LVU2147
 8017 0018 BDE83840 		pop	{r3, r4, r5, lr}
 8018              		.cfi_restore 14
 8019              		.cfi_restore 5
 8020              		.cfi_restore 4
 8021              		.cfi_restore 3
 8022              		.cfi_def_cfa_offset 0
 8023              	.LVL562:
 8024              	.LBB1925:
 8025              	.LBB1924:
 822:src/xeq.c     **** }
 8026              		.loc 1 822 2 view .LVU2148
 8027 001c FFF7FEBF 		b	getRegister
 8028              	.LVL563:
 822:src/xeq.c     **** }
 8029              		.loc 1 822 2 view .LVU2149
 8030              	.LBE1924:
 8031              	.LBE1925:
 8032              		.cfi_endproc
 8033              	.LFE67:
 8035              		.section	.text.getYZ,"ax",%progbits
 8036              		.align	1
 8037              		.p2align 2,,3
 8038              		.global	getYZ
 8039              		.syntax unified
 8040              		.thumb
 8041              		.thumb_func
 8042              		.fpu fpv4-sp-d16
 8044              	getYZ:
 8045              	.LVL564:
 8046              	.LFB69:
 862:src/xeq.c     **** 	getY(y);
 8047              		.loc 1 862 40 is_stmt 1 view -0
ARM GAS  /tmp/cc0UaEmF.s 			page 273


 8048              		.cfi_startproc
 8049              		@ args = 0, pretend = 0, frame = 0
 8050              		@ frame_needed = 0, uses_anonymous_args = 0
 863:src/xeq.c     **** 	getZ(z);
 8051              		.loc 1 863 2 view .LVU2151
 8052              	.LBB1926:
 8053              	.LBI1926:
 813:src/xeq.c     **** 	getRegister(y, regY_idx);
 8054              		.loc 1 813 6 view .LVU2152
 8055              	.LBB1927:
 814:src/xeq.c     **** }
 8056              		.loc 1 814 2 view .LVU2153
 8057              	.LBE1927:
 8058              	.LBE1926:
 862:src/xeq.c     **** 	getY(y);
 8059              		.loc 1 862 40 is_stmt 0 view .LVU2154
 8060 0000 10B5     		push	{r4, lr}
 8061              		.cfi_def_cfa_offset 8
 8062              		.cfi_offset 4, -8
 8063              		.cfi_offset 14, -4
 862:src/xeq.c     **** 	getY(y);
 8064              		.loc 1 862 40 view .LVU2155
 8065 0002 0C46     		mov	r4, r1
 8066              	.LBB1929:
 8067              	.LBB1928:
 814:src/xeq.c     **** }
 8068              		.loc 1 814 2 view .LVU2156
 8069 0004 6521     		movs	r1, #101
 8070              	.LVL565:
 814:src/xeq.c     **** }
 8071              		.loc 1 814 2 view .LVU2157
 8072 0006 FFF7FEFF 		bl	getRegister
 8073              	.LVL566:
 814:src/xeq.c     **** }
 8074              		.loc 1 814 2 view .LVU2158
 8075              	.LBE1928:
 8076              	.LBE1929:
 864:src/xeq.c     **** }
 8077              		.loc 1 864 2 is_stmt 1 view .LVU2159
 8078              	.LBB1930:
 8079              	.LBI1930:
 821:src/xeq.c     **** 	getRegister(z, regZ_idx);
 8080              		.loc 1 821 13 view .LVU2160
 8081              	.LBB1931:
 822:src/xeq.c     **** }
 8082              		.loc 1 822 2 view .LVU2161
 8083 000a 2046     		mov	r0, r4
 8084 000c 6621     		movs	r1, #102
 8085              	.LBE1931:
 8086              	.LBE1930:
 865:src/xeq.c     **** 
 8087              		.loc 1 865 1 is_stmt 0 view .LVU2162
 8088 000e BDE81040 		pop	{r4, lr}
 8089              		.cfi_restore 14
 8090              		.cfi_restore 4
 8091              		.cfi_def_cfa_offset 0
 8092              	.LVL567:
ARM GAS  /tmp/cc0UaEmF.s 			page 274


 8093              	.LBB1933:
 8094              	.LBB1932:
 822:src/xeq.c     **** }
 8095              		.loc 1 822 2 view .LVU2163
 8096 0012 FFF7FEBF 		b	getRegister
 8097              	.LVL568:
 822:src/xeq.c     **** }
 8098              		.loc 1 822 2 view .LVU2164
 8099              	.LBE1932:
 8100              	.LBE1933:
 8101              		.cfi_endproc
 8102              	.LFE69:
 8104 0016 00BF     		.section	.text.getXYZT,"ax",%progbits
 8105              		.align	1
 8106              		.p2align 2,,3
 8107              		.global	getXYZT
 8108              		.syntax unified
 8109              		.thumb
 8110              		.thumb_func
 8111              		.fpu fpv4-sp-d16
 8113              	getXYZT:
 8114              	.LVL569:
 8115              	.LFB68:
 857:src/xeq.c     **** 	getXYZ(x, y, z);
 8116              		.loc 1 857 70 is_stmt 1 view -0
 8117              		.cfi_startproc
 8118              		@ args = 0, pretend = 0, frame = 0
 8119              		@ frame_needed = 0, uses_anonymous_args = 0
 858:src/xeq.c     **** 	getT(t);
 8120              		.loc 1 858 2 view .LVU2166
 857:src/xeq.c     **** 	getXYZ(x, y, z);
 8121              		.loc 1 857 70 is_stmt 0 view .LVU2167
 8122 0000 10B5     		push	{r4, lr}
 8123              		.cfi_def_cfa_offset 8
 8124              		.cfi_offset 4, -8
 8125              		.cfi_offset 14, -4
 857:src/xeq.c     **** 	getXYZ(x, y, z);
 8126              		.loc 1 857 70 view .LVU2168
 8127 0002 1C46     		mov	r4, r3
 858:src/xeq.c     **** 	getT(t);
 8128              		.loc 1 858 2 view .LVU2169
 8129 0004 FFF7FEFF 		bl	getXYZ
 8130              	.LVL570:
 859:src/xeq.c     **** }
 8131              		.loc 1 859 2 is_stmt 1 view .LVU2170
 8132              	.LBB1934:
 8133              	.LBI1934:
 831:src/xeq.c     **** 	getRegister(t, regT_idx);
 8134              		.loc 1 831 13 view .LVU2171
 8135              	.LBB1935:
 832:src/xeq.c     **** }
 8136              		.loc 1 832 2 view .LVU2172
 8137 0008 2046     		mov	r0, r4
 8138 000a 6721     		movs	r1, #103
 8139              	.LBE1935:
 8140              	.LBE1934:
 860:src/xeq.c     **** 
ARM GAS  /tmp/cc0UaEmF.s 			page 275


 8141              		.loc 1 860 1 is_stmt 0 view .LVU2173
 8142 000c BDE81040 		pop	{r4, lr}
 8143              		.cfi_restore 14
 8144              		.cfi_restore 4
 8145              		.cfi_def_cfa_offset 0
 8146              	.LVL571:
 8147              	.LBB1937:
 8148              	.LBB1936:
 832:src/xeq.c     **** }
 8149              		.loc 1 832 2 view .LVU2174
 8150 0010 FFF7FEBF 		b	getRegister
 8151              	.LVL572:
 832:src/xeq.c     **** }
 8152              		.loc 1 832 2 view .LVU2175
 8153              	.LBE1936:
 8154              	.LBE1937:
 8155              		.cfi_endproc
 8156              	.LFE68:
 8158              		.section	.text.storcl_op,"ax",%progbits
 8159              		.align	1
 8160              		.p2align 2,,3
 8161              		.syntax unified
 8162              		.thumb
 8163              		.thumb_func
 8164              		.fpu fpv4-sp-d16
 8166              	storcl_op:
 8167              	.LVL573:
 8168              	.LFB111:
1450:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8169              		.loc 1 1450 76 is_stmt 1 view -0
 8170              		.cfi_startproc
 8171              		@ args = 0, pretend = 0, frame = 72
 8172              		@ frame_needed = 0, uses_anonymous_args = 0
1451:src/xeq.c     **** 
 8173              		.loc 1 1451 2 view .LVU2177
1450:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8174              		.loc 1 1450 76 is_stmt 0 view .LVU2178
 8175 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 8176              		.cfi_def_cfa_offset 20
 8177              		.cfi_offset 4, -20
 8178              		.cfi_offset 5, -16
 8179              		.cfi_offset 6, -12
 8180              		.cfi_offset 7, -8
 8181              		.cfi_offset 14, -4
 8182 0002 93B0     		sub	sp, sp, #76
 8183              		.cfi_def_cfa_offset 96
 8184              	.LVL574:
1453:src/xeq.c     **** 	getRegister(y, index);
 8185              		.loc 1 1453 2 is_stmt 1 view .LVU2179
 8186              	.LBB1938:
 8187              	.LBI1938:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8188              		.loc 1 805 12 view .LVU2180
 8189              	.LBB1939:
 806:src/xeq.c     **** }
 8190              		.loc 1 806 2 view .LVU2181
 8191              	.LBE1939:
ARM GAS  /tmp/cc0UaEmF.s 			page 276


 8192              	.LBE1938:
1450:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8193              		.loc 1 1450 76 is_stmt 0 view .LVU2182
 8194 0004 0E46     		mov	r6, r1
 8195 0006 0446     		mov	r4, r0
 8196              	.LBB1942:
 8197              	.LBB1940:
 806:src/xeq.c     **** }
 8198              		.loc 1 806 9 view .LVU2183
 8199 0008 6421     		movs	r1, #100
 8200              	.LVL575:
 806:src/xeq.c     **** }
 8201              		.loc 1 806 9 view .LVU2184
 8202 000a 6846     		mov	r0, sp
 8203              	.LVL576:
 806:src/xeq.c     **** }
 8204              		.loc 1 806 9 view .LVU2185
 8205              	.LBE1940:
 8206              	.LBE1942:
1450:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8207              		.loc 1 1450 76 view .LVU2186
 8208 000c 1D46     		mov	r5, r3
 8209 000e 1746     		mov	r7, r2
 8210              	.LBB1943:
 8211              	.LBB1941:
 806:src/xeq.c     **** }
 8212              		.loc 1 806 9 view .LVU2187
 8213 0010 FFF7FEFF 		bl	getRegister
 8214              	.LVL577:
 806:src/xeq.c     **** }
 8215              		.loc 1 806 9 view .LVU2188
 8216              	.LBE1941:
 8217              	.LBE1943:
1454:src/xeq.c     **** 	if (rev) {
 8218              		.loc 1 1454 2 is_stmt 1 view .LVU2189
 8219 0014 3146     		mov	r1, r6
 8220 0016 09A8     		add	r0, sp, #36
 8221              	.LVL578:
1454:src/xeq.c     **** 	if (rev) {
 8222              		.loc 1 1454 2 is_stmt 0 view .LVU2190
 8223 0018 FFF7FEFF 		bl	getRegister
 8224              	.LVL579:
1455:src/xeq.c     **** 		x = y;
 8225              		.loc 1 1455 2 is_stmt 1 view .LVU2191
1455:src/xeq.c     **** 		x = y;
 8226              		.loc 1 1455 5 is_stmt 0 view .LVU2192
 8227 001c 4DB1     		cbz	r5, .L637
1457:src/xeq.c     **** 	}
 8228              		.loc 1 1457 5 view .LVU2193
 8229 001e 6946     		mov	r1, sp
1456:src/xeq.c     **** 		y = &a;
 8230              		.loc 1 1456 5 view .LVU2194
 8231 0020 09AA     		add	r2, sp, #36
 8232              	.LVL580:
 8233              	.L628:
1460:src/xeq.c     **** 	case 1:
 8234              		.loc 1 1460 2 is_stmt 1 view .LVU2195
ARM GAS  /tmp/cc0UaEmF.s 			page 277


 8235 0022 601E     		subs	r0, r4, #1
 8236 0024 0528     		cmp	r0, #5
 8237 0026 2BD8     		bhi	.L638
 8238 0028 DFE800F0 		tbb	[pc, r0]
 8239              	.L631:
 8240 002c 0C       		.byte	(.L636-.L631)/2
 8241 002d 12       		.byte	(.L635-.L631)/2
 8242 002e 18       		.byte	(.L634-.L631)/2
 8243 002f 1E       		.byte	(.L633-.L631)/2
 8244 0030 24       		.byte	(.L632-.L631)/2
 8245 0031 06       		.byte	(.L630-.L631)/2
 8246              	.LVL581:
 8247              		.p2align 1
 8248              	.L637:
1451:src/xeq.c     **** 
 8249              		.loc 1 1451 28 is_stmt 0 view .LVU2196
 8250 0032 09A9     		add	r1, sp, #36
 8251              	.LVL582:
1451:src/xeq.c     **** 
 8252              		.loc 1 1451 19 view .LVU2197
 8253 0034 6A46     		mov	r2, sp
 8254 0036 F4E7     		b	.L628
 8255              	.LVL583:
 8256              	.L630:
1477:src/xeq.c     **** 		break;
 8257              		.loc 1 1477 3 is_stmt 1 view .LVU2198
 8258 0038 3846     		mov	r0, r7
 8259 003a FFF7FEFF 		bl	dn_max
 8260              	.LVL584:
1478:src/xeq.c     **** 	default:
 8261              		.loc 1 1478 3 view .LVU2199
1482:src/xeq.c     **** }
 8262              		.loc 1 1482 9 is_stmt 0 view .LVU2200
 8263 003e 0020     		movs	r0, #0
 8264              	.L627:
1483:src/xeq.c     **** 
 8265              		.loc 1 1483 1 view .LVU2201
 8266 0040 13B0     		add	sp, sp, #76
 8267              		.cfi_remember_state
 8268              		.cfi_def_cfa_offset 20
 8269              		@ sp needed
 8270 0042 F0BD     		pop	{r4, r5, r6, r7, pc}
 8271              	.LVL585:
 8272              	.L636:
 8273              		.cfi_restore_state
1462:src/xeq.c     **** 		break;
 8274              		.loc 1 1462 3 is_stmt 1 view .LVU2202
 8275 0044 3846     		mov	r0, r7
 8276 0046 FFF7FEFF 		bl	dn_add
 8277              	.LVL586:
1463:src/xeq.c     **** 	case 2:
 8278              		.loc 1 1463 3 view .LVU2203
1482:src/xeq.c     **** }
 8279              		.loc 1 1482 9 is_stmt 0 view .LVU2204
 8280 004a 0020     		movs	r0, #0
1483:src/xeq.c     **** 
 8281              		.loc 1 1483 1 view .LVU2205
ARM GAS  /tmp/cc0UaEmF.s 			page 278


 8282 004c 13B0     		add	sp, sp, #76
 8283              		.cfi_remember_state
 8284              		.cfi_def_cfa_offset 20
 8285              		@ sp needed
 8286 004e F0BD     		pop	{r4, r5, r6, r7, pc}
 8287              	.LVL587:
 8288              	.L635:
 8289              		.cfi_restore_state
1465:src/xeq.c     **** 		break;
 8290              		.loc 1 1465 3 is_stmt 1 view .LVU2206
 8291 0050 3846     		mov	r0, r7
 8292 0052 FFF7FEFF 		bl	dn_subtract
 8293              	.LVL588:
1466:src/xeq.c     **** 	case 3:
 8294              		.loc 1 1466 3 view .LVU2207
1482:src/xeq.c     **** }
 8295              		.loc 1 1482 9 is_stmt 0 view .LVU2208
 8296 0056 0020     		movs	r0, #0
1483:src/xeq.c     **** 
 8297              		.loc 1 1483 1 view .LVU2209
 8298 0058 13B0     		add	sp, sp, #76
 8299              		.cfi_remember_state
 8300              		.cfi_def_cfa_offset 20
 8301              		@ sp needed
 8302 005a F0BD     		pop	{r4, r5, r6, r7, pc}
 8303              	.LVL589:
 8304              	.L634:
 8305              		.cfi_restore_state
1468:src/xeq.c     **** 		break;
 8306              		.loc 1 1468 3 is_stmt 1 view .LVU2210
 8307 005c 3846     		mov	r0, r7
 8308 005e FFF7FEFF 		bl	dn_multiply
 8309              	.LVL590:
1469:src/xeq.c     **** 	case 4:
 8310              		.loc 1 1469 3 view .LVU2211
1482:src/xeq.c     **** }
 8311              		.loc 1 1482 9 is_stmt 0 view .LVU2212
 8312 0062 0020     		movs	r0, #0
1483:src/xeq.c     **** 
 8313              		.loc 1 1483 1 view .LVU2213
 8314 0064 13B0     		add	sp, sp, #76
 8315              		.cfi_remember_state
 8316              		.cfi_def_cfa_offset 20
 8317              		@ sp needed
 8318 0066 F0BD     		pop	{r4, r5, r6, r7, pc}
 8319              	.LVL591:
 8320              	.L633:
 8321              		.cfi_restore_state
1471:src/xeq.c     **** 		break;
 8322              		.loc 1 1471 3 is_stmt 1 view .LVU2214
 8323 0068 3846     		mov	r0, r7
 8324 006a FFF7FEFF 		bl	dn_divide
 8325              	.LVL592:
1472:src/xeq.c     **** 	case 5:
 8326              		.loc 1 1472 3 view .LVU2215
1482:src/xeq.c     **** }
 8327              		.loc 1 1482 9 is_stmt 0 view .LVU2216
ARM GAS  /tmp/cc0UaEmF.s 			page 279


 8328 006e 0020     		movs	r0, #0
1483:src/xeq.c     **** 
 8329              		.loc 1 1483 1 view .LVU2217
 8330 0070 13B0     		add	sp, sp, #76
 8331              		.cfi_remember_state
 8332              		.cfi_def_cfa_offset 20
 8333              		@ sp needed
 8334 0072 F0BD     		pop	{r4, r5, r6, r7, pc}
 8335              	.LVL593:
 8336              	.L632:
 8337              		.cfi_restore_state
1474:src/xeq.c     **** 		break;
 8338              		.loc 1 1474 3 is_stmt 1 view .LVU2218
 8339 0074 3846     		mov	r0, r7
 8340 0076 FFF7FEFF 		bl	dn_min
 8341              	.LVL594:
1475:src/xeq.c     **** 	case 6:
 8342              		.loc 1 1475 3 view .LVU2219
1482:src/xeq.c     **** }
 8343              		.loc 1 1482 9 is_stmt 0 view .LVU2220
 8344 007a 0020     		movs	r0, #0
1483:src/xeq.c     **** 
 8345              		.loc 1 1483 1 view .LVU2221
 8346 007c 13B0     		add	sp, sp, #76
 8347              		.cfi_def_cfa_offset 20
 8348              		@ sp needed
 8349 007e F0BD     		pop	{r4, r5, r6, r7, pc}
 8350              	.LVL595:
 8351              	.L638:
1482:src/xeq.c     **** }
 8352              		.loc 1 1482 9 view .LVU2222
 8353 0080 0120     		movs	r0, #1
 8354 0082 DDE7     		b	.L627
 8355              		.cfi_endproc
 8356              	.LFE111:
 8358              		.section	.text.storcl_cop,"ax",%progbits
 8359              		.align	1
 8360              		.p2align 2,,3
 8361              		.syntax unified
 8362              		.thumb
 8363              		.thumb_func
 8364              		.fpu fpv4-sp-d16
 8366              	storcl_cop:
 8367              	.LVL596:
 8368              	.LFB116:
1584:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8369              		.loc 1 1584 93 is_stmt 1 view -0
 8370              		.cfi_startproc
 8371              		@ args = 4, pretend = 0, frame = 144
 8372              		@ frame_needed = 0, uses_anonymous_args = 0
1585:src/xeq.c     **** 
 8373              		.loc 1 1585 2 view .LVU2224
1584:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8374              		.loc 1 1584 93 is_stmt 0 view .LVU2225
 8375 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 8376              		.cfi_def_cfa_offset 24
 8377              		.cfi_offset 4, -24
ARM GAS  /tmp/cc0UaEmF.s 			page 280


 8378              		.cfi_offset 5, -20
 8379              		.cfi_offset 6, -16
 8380              		.cfi_offset 7, -12
 8381              		.cfi_offset 8, -8
 8382              		.cfi_offset 14, -4
 8383 0004 A6B0     		sub	sp, sp, #152
 8384              		.cfi_def_cfa_offset 176
 8385              	.LVL597:
1587:src/xeq.c     **** 	getRegister(y + 0, index);
 8386              		.loc 1 1587 2 is_stmt 1 view .LVU2226
 8387              	.LBB1944:
 8388              	.LBI1944:
 835:src/xeq.c     **** 	getX(x);
 8389              		.loc 1 835 6 view .LVU2227
 8390              	.LBE1944:
 836:src/xeq.c     **** 	getY(y);
 8391              		.loc 1 836 2 view .LVU2228
 8392              	.LBB1953:
 8393              	.LBB1945:
 8394              	.LBI1945:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8395              		.loc 1 805 12 view .LVU2229
 8396              	.LBB1946:
 806:src/xeq.c     **** }
 8397              		.loc 1 806 2 view .LVU2230
 8398              	.LBE1946:
 8399              	.LBE1945:
 8400              	.LBE1953:
1584:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8401              		.loc 1 1584 93 is_stmt 0 view .LVU2231
 8402 0006 0D46     		mov	r5, r1
 8403 0008 0446     		mov	r4, r0
 8404              	.LBB1954:
 8405              	.LBB1949:
 8406              	.LBB1947:
 806:src/xeq.c     **** }
 8407              		.loc 1 806 9 view .LVU2232
 8408 000a 6421     		movs	r1, #100
 8409              	.LVL598:
 806:src/xeq.c     **** }
 8410              		.loc 1 806 9 view .LVU2233
 8411 000c 02A8     		add	r0, sp, #8
 8412              	.LVL599:
 806:src/xeq.c     **** }
 8413              		.loc 1 806 9 view .LVU2234
 8414              	.LBE1947:
 8415              	.LBE1949:
 8416              	.LBE1954:
1584:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8417              		.loc 1 1584 93 view .LVU2235
 8418 000e 9046     		mov	r8, r2
 8419 0010 1E46     		mov	r6, r3
 8420 0012 2C9F     		ldr	r7, [sp, #176]
 8421              	.LBB1955:
 8422              	.LBB1950:
 8423              	.LBB1948:
 806:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 281


 8424              		.loc 1 806 9 view .LVU2236
 8425 0014 FFF7FEFF 		bl	getRegister
 8426              	.LVL600:
 806:src/xeq.c     **** }
 8427              		.loc 1 806 9 view .LVU2237
 8428              	.LBE1948:
 8429              	.LBE1950:
 8430              	.LBE1955:
 837:src/xeq.c     **** }
 8431              		.loc 1 837 2 is_stmt 1 view .LVU2238
 8432              	.LBB1956:
 8433              	.LBB1951:
 8434              	.LBI1951:
 813:src/xeq.c     **** 	getRegister(y, regY_idx);
 8435              		.loc 1 813 6 view .LVU2239
 8436              	.LBB1952:
 814:src/xeq.c     **** }
 8437              		.loc 1 814 2 view .LVU2240
 8438 0018 6521     		movs	r1, #101
 8439 001a 0BA8     		add	r0, sp, #44
 8440              	.LVL601:
 814:src/xeq.c     **** }
 8441              		.loc 1 814 2 is_stmt 0 view .LVU2241
 8442 001c FFF7FEFF 		bl	getRegister
 8443              	.LVL602:
 814:src/xeq.c     **** }
 8444              		.loc 1 814 2 view .LVU2242
 8445              	.LBE1952:
 8446              	.LBE1951:
 8447              	.LBE1956:
1588:src/xeq.c     **** 	getRegister(y + 1, index + 1);
 8448              		.loc 1 1588 2 is_stmt 1 view .LVU2243
 8449 0020 2946     		mov	r1, r5
 8450 0022 14A8     		add	r0, sp, #80
 8451              	.LVL603:
1588:src/xeq.c     **** 	getRegister(y + 1, index + 1);
 8452              		.loc 1 1588 2 is_stmt 0 view .LVU2244
 8453 0024 FFF7FEFF 		bl	getRegister
 8454              	.LVL604:
1589:src/xeq.c     **** 
 8455              		.loc 1 1589 2 is_stmt 1 view .LVU2245
 8456 0028 691C     		adds	r1, r5, #1
 8457 002a 1DA8     		add	r0, sp, #116
 8458 002c FFF7FEFF 		bl	getRegister
 8459              	.LVL605:
1591:src/xeq.c     **** 		x = y;
 8460              		.loc 1 1591 2 view .LVU2246
1591:src/xeq.c     **** 		x = y;
 8461              		.loc 1 1591 5 is_stmt 0 view .LVU2247
 8462 0030 47B1     		cbz	r7, .L648
1593:src/xeq.c     **** 	}
 8463              		.loc 1 1593 5 view .LVU2248
 8464 0032 02AA     		add	r2, sp, #8
 8465              	.LVL606:
1592:src/xeq.c     **** 		y = a;
 8466              		.loc 1 1592 5 view .LVU2249
 8467 0034 14A9     		add	r1, sp, #80
ARM GAS  /tmp/cc0UaEmF.s 			page 282


 8468              	.LVL607:
 8469              	.L641:
1596:src/xeq.c     **** 	case 1:
 8470              		.loc 1 1596 2 is_stmt 1 view .LVU2250
 8471 0036 601E     		subs	r0, r4, #1
 8472 0038 0328     		cmp	r0, #3
 8473 003a 3ED8     		bhi	.L649
 8474 003c DFE800F0 		tbb	[pc, r0]
 8475              	.L644:
 8476 0040 13       		.byte	(.L647-.L644)/2
 8477 0041 21       		.byte	(.L646-.L644)/2
 8478 0042 2F       		.byte	(.L645-.L644)/2
 8479 0043 05       		.byte	(.L643-.L644)/2
 8480              	.LVL608:
 8481              		.p2align 1
 8482              	.L648:
1585:src/xeq.c     **** 
 8483              		.loc 1 1585 33 is_stmt 0 view .LVU2251
 8484 0044 14AA     		add	r2, sp, #80
 8485              	.LVL609:
1585:src/xeq.c     **** 
 8486              		.loc 1 1585 25 view .LVU2252
 8487 0046 02A9     		add	r1, sp, #8
 8488              	.LVL610:
1585:src/xeq.c     **** 
 8489              		.loc 1 1585 25 view .LVU2253
 8490 0048 F5E7     		b	.L641
 8491              	.L643:
1607:src/xeq.c     **** 		break;
 8492              		.loc 1 1607 3 is_stmt 1 view .LVU2254
1607:src/xeq.c     **** 		break;
 8493              		.loc 1 1607 46 is_stmt 0 view .LVU2255
 8494 004a 01F12403 		add	r3, r1, #36
1607:src/xeq.c     **** 		break;
 8495              		.loc 1 1607 3 view .LVU2256
 8496 004e CDE90013 		strd	r1, r3, [sp]
 8497 0052 4046     		mov	r0, r8
 8498 0054 3146     		mov	r1, r6
 8499              	.LVL611:
1607:src/xeq.c     **** 		break;
 8500              		.loc 1 1607 3 view .LVU2257
 8501 0056 02F12403 		add	r3, r2, #36
 8502 005a FFF7FEFF 		bl	cmplxDivide
 8503              	.LVL612:
1608:src/xeq.c     **** 	default:
 8504              		.loc 1 1608 3 is_stmt 1 view .LVU2258
1612:src/xeq.c     **** }
 8505              		.loc 1 1612 9 is_stmt 0 view .LVU2259
 8506 005e 0020     		movs	r0, #0
 8507              	.L640:
1613:src/xeq.c     **** 
 8508              		.loc 1 1613 1 view .LVU2260
 8509 0060 26B0     		add	sp, sp, #152
 8510              		.cfi_remember_state
 8511              		.cfi_def_cfa_offset 24
 8512              		@ sp needed
 8513 0062 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
ARM GAS  /tmp/cc0UaEmF.s 			page 283


 8514              	.LVL613:
 8515              	.L647:
 8516              		.cfi_restore_state
1598:src/xeq.c     **** 		break;
 8517              		.loc 1 1598 3 is_stmt 1 view .LVU2261
1598:src/xeq.c     **** 		break;
 8518              		.loc 1 1598 43 is_stmt 0 view .LVU2262
 8519 0066 01F12403 		add	r3, r1, #36
1598:src/xeq.c     **** 		break;
 8520              		.loc 1 1598 3 view .LVU2263
 8521 006a CDE90013 		strd	r1, r3, [sp]
 8522 006e 4046     		mov	r0, r8
 8523 0070 3146     		mov	r1, r6
 8524              	.LVL614:
1598:src/xeq.c     **** 		break;
 8525              		.loc 1 1598 3 view .LVU2264
 8526 0072 02F12403 		add	r3, r2, #36
 8527 0076 FFF7FEFF 		bl	cmplxAdd
 8528              	.LVL615:
1599:src/xeq.c     **** 	case 2:
 8529              		.loc 1 1599 3 is_stmt 1 view .LVU2265
1612:src/xeq.c     **** }
 8530              		.loc 1 1612 9 is_stmt 0 view .LVU2266
 8531 007a 0020     		movs	r0, #0
1613:src/xeq.c     **** 
 8532              		.loc 1 1613 1 view .LVU2267
 8533 007c 26B0     		add	sp, sp, #152
 8534              		.cfi_remember_state
 8535              		.cfi_def_cfa_offset 24
 8536              		@ sp needed
 8537 007e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8538              	.LVL616:
 8539              	.L646:
 8540              		.cfi_restore_state
1601:src/xeq.c     **** 		break;
 8541              		.loc 1 1601 3 is_stmt 1 view .LVU2268
1601:src/xeq.c     **** 		break;
 8542              		.loc 1 1601 48 is_stmt 0 view .LVU2269
 8543 0082 01F12403 		add	r3, r1, #36
1601:src/xeq.c     **** 		break;
 8544              		.loc 1 1601 3 view .LVU2270
 8545 0086 CDE90013 		strd	r1, r3, [sp]
 8546 008a 4046     		mov	r0, r8
 8547 008c 3146     		mov	r1, r6
 8548              	.LVL617:
1601:src/xeq.c     **** 		break;
 8549              		.loc 1 1601 3 view .LVU2271
 8550 008e 02F12403 		add	r3, r2, #36
 8551 0092 FFF7FEFF 		bl	cmplxSubtract
 8552              	.LVL618:
1602:src/xeq.c     **** 	case 3:
 8553              		.loc 1 1602 3 is_stmt 1 view .LVU2272
1612:src/xeq.c     **** }
 8554              		.loc 1 1612 9 is_stmt 0 view .LVU2273
 8555 0096 0020     		movs	r0, #0
1613:src/xeq.c     **** 
 8556              		.loc 1 1613 1 view .LVU2274
ARM GAS  /tmp/cc0UaEmF.s 			page 284


 8557 0098 26B0     		add	sp, sp, #152
 8558              		.cfi_remember_state
 8559              		.cfi_def_cfa_offset 24
 8560              		@ sp needed
 8561 009a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8562              	.LVL619:
 8563              	.L645:
 8564              		.cfi_restore_state
1604:src/xeq.c     **** 		break;
 8565              		.loc 1 1604 3 is_stmt 1 view .LVU2275
1604:src/xeq.c     **** 		break;
 8566              		.loc 1 1604 48 is_stmt 0 view .LVU2276
 8567 009e 01F12403 		add	r3, r1, #36
1604:src/xeq.c     **** 		break;
 8568              		.loc 1 1604 3 view .LVU2277
 8569 00a2 CDE90013 		strd	r1, r3, [sp]
 8570 00a6 4046     		mov	r0, r8
 8571 00a8 3146     		mov	r1, r6
 8572              	.LVL620:
1604:src/xeq.c     **** 		break;
 8573              		.loc 1 1604 3 view .LVU2278
 8574 00aa 02F12403 		add	r3, r2, #36
 8575 00ae FFF7FEFF 		bl	cmplxMultiply
 8576              	.LVL621:
1605:src/xeq.c     **** 	case 4:
 8577              		.loc 1 1605 3 is_stmt 1 view .LVU2279
1612:src/xeq.c     **** }
 8578              		.loc 1 1612 9 is_stmt 0 view .LVU2280
 8579 00b2 0020     		movs	r0, #0
1613:src/xeq.c     **** 
 8580              		.loc 1 1613 1 view .LVU2281
 8581 00b4 26B0     		add	sp, sp, #152
 8582              		.cfi_def_cfa_offset 24
 8583              		@ sp needed
 8584 00b6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8585              	.LVL622:
 8586              	.L649:
1612:src/xeq.c     **** }
 8587              		.loc 1 1612 9 view .LVU2282
 8588 00ba 0120     		movs	r0, #1
 8589 00bc D0E7     		b	.L640
 8590              		.cfi_endproc
 8591              	.LFE116:
 8593 00be 00BF     		.section	.text.cpx_enter,"ax",%progbits
 8594              		.align	1
 8595              		.p2align 2,,3
 8596              		.global	cpx_enter
 8597              		.syntax unified
 8598              		.thumb
 8599              		.thumb_func
 8600              		.fpu fpv4-sp-d16
 8602              	cpx_enter:
 8603              	.LVL623:
 8604              	.LFB74:
 893:src/xeq.c     **** 	lift();
 8605              		.loc 1 893 31 is_stmt 1 view -0
 8606              		.cfi_startproc
ARM GAS  /tmp/cc0UaEmF.s 			page 285


 8607              		@ args = 0, pretend = 0, frame = 0
 8608              		@ frame_needed = 0, uses_anonymous_args = 0
 894:src/xeq.c     **** 	lift();
 8609              		.loc 1 894 2 view .LVU2284
 893:src/xeq.c     **** 	lift();
 8610              		.loc 1 893 31 is_stmt 0 view .LVU2285
 8611 0000 10B5     		push	{r4, lr}
 8612              		.cfi_def_cfa_offset 8
 8613              		.cfi_offset 4, -8
 8614              		.cfi_offset 14, -4
 894:src/xeq.c     **** 	lift();
 8615              		.loc 1 894 2 view .LVU2286
 8616 0002 FFF7FEFF 		bl	lift
 8617              	.LVL624:
 895:src/xeq.c     **** 	copyreg(get_reg_n(regY_idx), get_reg_n(regT_idx));
 8618              		.loc 1 895 2 is_stmt 1 view .LVU2287
 8619 0006 FFF7FEFF 		bl	lift
 8620              	.LVL625:
 896:src/xeq.c     **** 	set_was_complex();
 8621              		.loc 1 896 2 view .LVU2288
 8622 000a 6520     		movs	r0, #101
 8623 000c FFF7FEFF 		bl	get_reg_n
 8624              	.LVL626:
 8625 0010 0446     		mov	r4, r0
 896:src/xeq.c     **** 	set_was_complex();
 8626              		.loc 1 896 31 is_stmt 0 view .LVU2289
 8627 0012 6720     		movs	r0, #103
 8628 0014 FFF7FEFF 		bl	get_reg_n
 8629              	.LVL627:
 8630              	.LBB1957:
 8631              	.LBB1958:
 8632              	.LBB1959:
 8633              	.LBB1960:
 933:src/xeq.c     **** }
 8634              		.loc 1 933 24 view .LVU2290
 8635 0018 0B4B     		ldr	r3, .L655
 8636 001a 1B68     		ldr	r3, [r3]
 8637 001c B3F8E827 		ldrh	r2, [r3, #2024]
 8638 0020 44F20103 		movw	r3, #16385
 8639              	.LBE1960:
 8640              	.LBE1959:
 718:src/xeq.c     **** }
 8641              		.loc 1 718 2 view .LVU2291
 8642 0024 1340     		ands	r3, r3, r2
 8643 0026 B3F5804F 		cmp	r3, #16384
 8644              	.LBE1958:
 8645              	.LBE1957:
 896:src/xeq.c     **** 	set_was_complex();
 8646              		.loc 1 896 31 view .LVU2292
 8647 002a 0146     		mov	r1, r0
 8648              	.LVL628:
 8649              	.LBB1964:
 8650              	.LBI1957:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 8651              		.loc 1 717 6 is_stmt 1 view .LVU2293
 8652              	.LBB1963:
 718:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 286


 8653              		.loc 1 718 2 view .LVU2294
 8654              	.LBB1962:
 8655              	.LBI1959:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 8656              		.loc 1 932 5 view .LVU2295
 8657              	.LBB1961:
 933:src/xeq.c     **** }
 8658              		.loc 1 933 2 view .LVU2296
 8659              	.LBE1961:
 8660              	.LBE1962:
 718:src/xeq.c     **** }
 8661              		.loc 1 718 2 is_stmt 0 view .LVU2297
 8662 002c 0CBF     		ite	eq
 8663 002e 1022     		moveq	r2, #16
 8664 0030 0822     		movne	r2, #8
 8665 0032 2046     		mov	r0, r4
 8666              	.LVL629:
 718:src/xeq.c     **** }
 8667              		.loc 1 718 2 view .LVU2298
 8668 0034 FFF7FEFF 		bl	xcopy
 8669              	.LVL630:
 718:src/xeq.c     **** }
 8670              		.loc 1 718 2 view .LVU2299
 8671              	.LBE1963:
 8672              	.LBE1964:
 897:src/xeq.c     **** }
 8673              		.loc 1 897 2 is_stmt 1 view .LVU2300
 8674              	.LBB1965:
 8675              	.LBI1965:
 530:src/xeq.c     **** 	State2.wascomplex = 1;
 8676              		.loc 1 530 13 view .LVU2301
 8677              	.LBB1966:
 531:src/xeq.c     **** }
 8678              		.loc 1 531 2 view .LVU2302
 531:src/xeq.c     **** }
 8679              		.loc 1 531 20 is_stmt 0 view .LVU2303
 8680 0038 044B     		ldr	r3, .L655+4
 8681 003a 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 8682 003c 0121     		movs	r1, #1
 8683 003e 61F38712 		bfi	r2, r1, #6, #2
 8684 0042 1A75     		strb	r2, [r3, #20]
 8685              	.LBE1966:
 8686              	.LBE1965:
 898:src/xeq.c     **** 
 8687              		.loc 1 898 1 view .LVU2304
 8688 0044 10BD     		pop	{r4, pc}
 8689              	.L656:
 8690 0046 00BF     		.align	2
 8691              	.L655:
 8692 0048 00000000 		.word	main_ram
 8693 004c 00000000 		.word	StateWhileOn
 8694              		.cfi_endproc
 8695              	.LFE74:
 8697              		.section	.text.cpx_fill,"ax",%progbits
 8698              		.align	1
 8699              		.p2align 2,,3
 8700              		.global	cpx_fill
ARM GAS  /tmp/cc0UaEmF.s 			page 287


 8701              		.syntax unified
 8702              		.thumb
 8703              		.thumb_func
 8704              		.fpu fpv4-sp-d16
 8706              	cpx_fill:
 8707              	.LVL631:
 8708              	.LFB75:
 900:src/xeq.c     **** 	const int n = stack_size();
 8709              		.loc 1 900 30 is_stmt 1 view -0
 8710              		.cfi_startproc
 8711              		@ args = 0, pretend = 0, frame = 0
 8712              		@ frame_needed = 0, uses_anonymous_args = 0
 901:src/xeq.c     **** 	const REGISTER *y = get_reg_n(regY_idx);
 8713              		.loc 1 901 2 view .LVU2306
 8714              	.LBB1967:
 8715              	.LBI1967:
 703:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 8716              		.loc 1 703 5 view .LVU2307
 8717              	.LBB1968:
 704:src/xeq.c     **** 		return 4;
 8718              		.loc 1 704 2 view .LVU2308
 8719              	.LBE1968:
 8720              	.LBE1967:
 900:src/xeq.c     **** 	const int n = stack_size();
 8721              		.loc 1 900 30 is_stmt 0 view .LVU2309
 8722 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 8723              		.cfi_def_cfa_offset 32
 8724              		.cfi_offset 3, -32
 8725              		.cfi_offset 4, -28
 8726              		.cfi_offset 5, -24
 8727              		.cfi_offset 6, -20
 8728              		.cfi_offset 7, -16
 8729              		.cfi_offset 8, -12
 8730              		.cfi_offset 9, -8
 8731              		.cfi_offset 14, -4
 8732              	.LBB1973:
 8733              	.LBB1971:
 704:src/xeq.c     **** 		return 4;
 8734              		.loc 1 704 8 view .LVU2310
 8735 0004 1F4D     		ldr	r5, .L670
 8736 0006 2B68     		ldr	r3, [r5]
 704:src/xeq.c     **** 		return 4;
 8737              		.loc 1 704 6 view .LVU2311
 8738 0008 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 704:src/xeq.c     **** 		return 4;
 8739              		.loc 1 704 5 view .LVU2312
 8740 000c 1207     		lsls	r2, r2, #28
 8741 000e 37D5     		bpl	.L662
 8742              	.LBB1969:
 8743              	.LBI1969:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 8744              		.loc 1 182 5 is_stmt 1 view .LVU2313
 8745              	.LBB1970:
 183:src/xeq.c     **** }
 8746              		.loc 1 183 2 view .LVU2314
 183:src/xeq.c     **** }
 8747              		.loc 1 183 9 is_stmt 0 view .LVU2315
ARM GAS  /tmp/cc0UaEmF.s 			page 288


 8748 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 8749              	.LBE1970:
 8750              	.LBE1969:
 704:src/xeq.c     **** 		return 4;
 8751              		.loc 1 704 27 view .LVU2316
 8752 0014 9B0B     		lsrs	r3, r3, #14
 8753 0016 032B     		cmp	r3, #3
 8754 0018 2AD0     		beq	.L669
 706:src/xeq.c     **** }
 8755              		.loc 1 706 9 view .LVU2317
 8756 001a 0827     		movs	r7, #8
 8757              	.L658:
 8758              	.LVL632:
 706:src/xeq.c     **** }
 8759              		.loc 1 706 9 view .LVU2318
 8760              	.LBE1971:
 8761              	.LBE1973:
 902:src/xeq.c     **** 	int i;
 8762              		.loc 1 902 2 is_stmt 1 view .LVU2319
 902:src/xeq.c     **** 	int i;
 8763              		.loc 1 902 22 is_stmt 0 view .LVU2320
 8764 001c 6520     		movs	r0, #101
 8765              	.LVL633:
 902:src/xeq.c     **** 	int i;
 8766              		.loc 1 902 22 view .LVU2321
 8767 001e FFF7FEFF 		bl	get_reg_n
 8768              	.LVL634:
 906:src/xeq.c     **** 	set_was_complex();
 8769              		.loc 1 906 3 view .LVU2322
 8770 0022 DFF86C90 		ldr	r9, .L670+12
 902:src/xeq.c     **** 	int i;
 8771              		.loc 1 902 22 view .LVU2323
 8772 0026 8046     		mov	r8, r0
 8773              	.LVL635:
 903:src/xeq.c     **** 
 8774              		.loc 1 903 2 is_stmt 1 view .LVU2324
 905:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8775              		.loc 1 905 2 view .LVU2325
 905:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8776              		.loc 1 905 12 view .LVU2326
 905:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8777              		.loc 1 905 8 is_stmt 0 view .LVU2327
 8778 0028 0224     		movs	r4, #2
 8779              	.LBB1974:
 8780              	.LBB1975:
 8781              	.LBB1976:
 8782              	.LBB1977:
 933:src/xeq.c     **** }
 8783              		.loc 1 933 24 view .LVU2328
 8784 002a 44F20106 		movw	r6, #16385
 8785              	.LVL636:
 8786              	.L661:
 933:src/xeq.c     **** }
 8787              		.loc 1 933 24 view .LVU2329
 8788              	.LBE1977:
 8789              	.LBE1976:
 8790              	.LBE1975:
ARM GAS  /tmp/cc0UaEmF.s 			page 289


 8791              	.LBE1974:
 906:src/xeq.c     **** 	set_was_complex();
 8792              		.loc 1 906 3 is_stmt 1 view .LVU2330
 8793              	.LBB1988:
 8794              	.LBI1988:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 8795              		.loc 1 709 11 view .LVU2331
 8796              	.LBB1989:
 710:src/xeq.c     **** }
 8797              		.loc 1 710 2 view .LVU2332
 710:src/xeq.c     **** }
 8798              		.loc 1 710 9 is_stmt 0 view .LVU2333
 8799 002e 04F16400 		add	r0, r4, #100
 8800 0032 FFF7FEFF 		bl	get_reg_n
 8801              	.LVL637:
 710:src/xeq.c     **** }
 8802              		.loc 1 710 9 view .LVU2334
 8803              	.LBE1989:
 8804              	.LBE1988:
 906:src/xeq.c     **** 	set_was_complex();
 8805              		.loc 1 906 3 view .LVU2335
 8806 0036 E307     		lsls	r3, r4, #31
 8807              	.LBB1990:
 8808              	.LBB1984:
 8809              	.LBB1981:
 8810              	.LBB1978:
 933:src/xeq.c     **** }
 8811              		.loc 1 933 24 view .LVU2336
 8812 0038 2B68     		ldr	r3, [r5]
 8813              	.LBE1978:
 8814              	.LBE1981:
 8815              	.LBE1984:
 8816              	.LBE1990:
 906:src/xeq.c     **** 	set_was_complex();
 8817              		.loc 1 906 3 view .LVU2337
 8818 003a 58BF     		it	pl
 8819 003c D9F80010 		ldrpl	r1, [r9]
 8820              	.LBB1991:
 8821              	.LBB1985:
 8822              	.LBB1982:
 8823              	.LBB1979:
 933:src/xeq.c     **** }
 8824              		.loc 1 933 24 view .LVU2338
 8825 0040 B3F8E837 		ldrh	r3, [r3, #2024]
 8826              	.LBE1979:
 8827              	.LBE1982:
 718:src/xeq.c     **** }
 8828              		.loc 1 718 2 view .LVU2339
 8829 0044 03EA0603 		and	r3, r3, r6
 8830              	.LBE1985:
 8831              	.LBE1991:
 906:src/xeq.c     **** 	set_was_complex();
 8832              		.loc 1 906 3 view .LVU2340
 8833 0048 48BF     		it	mi
 8834 004a 4146     		movmi	r1, r8
 8835              	.LVL638:
 8836              	.LBB1992:
ARM GAS  /tmp/cc0UaEmF.s 			page 290


 8837              	.LBI1974:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 8838              		.loc 1 717 6 is_stmt 1 view .LVU2341
 8839              	.LBB1986:
 718:src/xeq.c     **** }
 8840              		.loc 1 718 2 view .LVU2342
 8841              	.LBB1983:
 8842              	.LBI1976:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 8843              		.loc 1 932 5 view .LVU2343
 8844              	.LBB1980:
 933:src/xeq.c     **** }
 8845              		.loc 1 933 2 view .LVU2344
 8846              	.LBE1980:
 8847              	.LBE1983:
 718:src/xeq.c     **** }
 8848              		.loc 1 718 2 is_stmt 0 view .LVU2345
 8849 004c B3F5804F 		cmp	r3, #16384
 8850 0050 0CBF     		ite	eq
 8851 0052 1022     		moveq	r2, #16
 8852 0054 0822     		movne	r2, #8
 8853              	.LBE1986:
 8854              	.LBE1992:
 905:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8855              		.loc 1 905 18 view .LVU2346
 8856 0056 0134     		adds	r4, r4, #1
 8857              	.LVL639:
 8858              	.LBB1993:
 8859              	.LBB1987:
 718:src/xeq.c     **** }
 8860              		.loc 1 718 2 view .LVU2347
 8861 0058 FFF7FEFF 		bl	xcopy
 8862              	.LVL640:
 718:src/xeq.c     **** }
 8863              		.loc 1 718 2 view .LVU2348
 8864              	.LBE1987:
 8865              	.LBE1993:
 905:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8866              		.loc 1 905 17 is_stmt 1 view .LVU2349
 905:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8867              		.loc 1 905 12 view .LVU2350
 905:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8868              		.loc 1 905 2 is_stmt 0 view .LVU2351
 8869 005c BC42     		cmp	r4, r7
 8870 005e E6D1     		bne	.L661
 907:src/xeq.c     **** }
 8871              		.loc 1 907 2 is_stmt 1 view .LVU2352
 8872              	.LBB1994:
 8873              	.LBI1994:
 530:src/xeq.c     **** 	State2.wascomplex = 1;
 8874              		.loc 1 530 13 view .LVU2353
 8875              	.LBB1995:
 531:src/xeq.c     **** }
 8876              		.loc 1 531 2 view .LVU2354
 531:src/xeq.c     **** }
 8877              		.loc 1 531 20 is_stmt 0 view .LVU2355
 8878 0060 094B     		ldr	r3, .L670+4
ARM GAS  /tmp/cc0UaEmF.s 			page 291


 8879 0062 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 8880 0064 0121     		movs	r1, #1
 8881 0066 61F38712 		bfi	r2, r1, #6, #2
 8882 006a 1A75     		strb	r2, [r3, #20]
 8883              	.LBE1995:
 8884              	.LBE1994:
 908:src/xeq.c     **** 
 8885              		.loc 1 908 1 view .LVU2356
 8886 006c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 8887              	.LVL641:
 8888              	.L669:
 8889              	.LBB1996:
 8890              	.LBB1972:
 704:src/xeq.c     **** 		return 4;
 8891              		.loc 1 704 44 view .LVU2357
 8892 0070 064B     		ldr	r3, .L670+8
 704:src/xeq.c     **** 		return 4;
 8893              		.loc 1 704 41 view .LVU2358
 8894 0072 93F90130 		ldrsb	r3, [r3, #1]
 705:src/xeq.c     **** 	return 8;
 8895              		.loc 1 705 10 view .LVU2359
 8896 0076 002B     		cmp	r3, #0
 8897 0078 B4BF     		ite	lt
 8898 007a 0827     		movlt	r7, #8
 8899 007c 0427     		movge	r7, #4
 8900 007e CDE7     		b	.L658
 8901              	.L662:
 8902 0080 0427     		movs	r7, #4
 8903 0082 CBE7     		b	.L658
 8904              	.L671:
 8905              		.align	2
 8906              	.L670:
 8907 0084 00000000 		.word	main_ram
 8908 0088 00000000 		.word	StateWhileOn
 8909 008c 00000000 		.word	XromParams
 8910 0090 00000000 		.word	StackBase
 8911              	.LBE1972:
 8912              	.LBE1996:
 8913              		.cfi_endproc
 8914              	.LFE75:
 8916              		.section	.text.setRegister,"ax",%progbits
 8917              		.align	1
 8918              		.p2align 2,,3
 8919              		.global	setRegister
 8920              		.syntax unified
 8921              		.thumb
 8922              		.thumb_func
 8923              		.fpu fpv4-sp-d16
 8925              	setRegister:
 8926              	.LVL642:
 8927              	.LFB58:
 792:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 8928              		.loc 1 792 49 is_stmt 1 view -0
 8929              		.cfi_startproc
 8930              		@ args = 0, pretend = 0, frame = 40
 8931              		@ frame_needed = 0, uses_anonymous_args = 0
 793:src/xeq.c     **** 	decNumber dn;
ARM GAS  /tmp/cc0UaEmF.s 			page 292


 8932              		.loc 1 793 2 view .LVU2361
 792:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 8933              		.loc 1 792 49 is_stmt 0 view .LVU2362
 8934 0000 30B5     		push	{r4, r5, lr}
 8935              		.cfi_def_cfa_offset 12
 8936              		.cfi_offset 4, -12
 8937              		.cfi_offset 5, -8
 8938              		.cfi_offset 14, -4
 8939 0002 8BB0     		sub	sp, sp, #44
 8940              		.cfi_def_cfa_offset 56
 792:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 8941              		.loc 1 792 49 view .LVU2363
 8942 0004 0C46     		mov	r4, r1
 793:src/xeq.c     **** 	decNumber dn;
 8943              		.loc 1 793 24 view .LVU2364
 8944 0006 FFF7FEFF 		bl	get_reg_n
 8945              	.LVL643:
 793:src/xeq.c     **** 	decNumber dn;
 8946              		.loc 1 793 24 view .LVU2365
 8947 000a 0546     		mov	r5, r0
 796:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 8948              		.loc 1 796 8 view .LVU2366
 8949 000c 2046     		mov	r0, r4
 8950              	.LVL644:
 794:src/xeq.c     **** 
 8951              		.loc 1 794 2 is_stmt 1 view .LVU2367
 796:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 8952              		.loc 1 796 2 view .LVU2368
 796:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 8953              		.loc 1 796 8 is_stmt 0 view .LVU2369
 8954 000e FFF7FEFF 		bl	check_special
 8955              	.LVL645:
 796:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 8956              		.loc 1 796 5 view .LVU2370
 8957 0012 08B1     		cbz	r0, .L676
 803:src/xeq.c     **** 
 8958              		.loc 1 803 1 view .LVU2371
 8959 0014 0BB0     		add	sp, sp, #44
 8960              		.cfi_remember_state
 8961              		.cfi_def_cfa_offset 12
 8962              		@ sp needed
 8963 0016 30BD     		pop	{r4, r5, pc}
 8964              	.LVL646:
 8965              	.L676:
 8966              		.cfi_restore_state
 797:src/xeq.c     **** 		if (is_dblmode())
 8967              		.loc 1 797 3 is_stmt 1 view .LVU2372
 8968 0018 0C4A     		ldr	r2, .L678
 8969 001a 2146     		mov	r1, r4
 8970 001c 01A8     		add	r0, sp, #4
 8971 001e FFF7FEFF 		bl	decNumberNormalize
 8972              	.LVL647:
 798:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 8973              		.loc 1 798 3 view .LVU2373
 8974              	.LBB1997:
 8975              	.LBI1997:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
ARM GAS  /tmp/cc0UaEmF.s 			page 293


 8976              		.loc 1 932 5 view .LVU2374
 8977              	.LBB1998:
 933:src/xeq.c     **** }
 8978              		.loc 1 933 2 view .LVU2375
 933:src/xeq.c     **** }
 8979              		.loc 1 933 24 is_stmt 0 view .LVU2376
 8980 0022 0B4B     		ldr	r3, .L678+4
 8981 0024 1B68     		ldr	r3, [r3]
 8982 0026 B3F8E827 		ldrh	r2, [r3, #2024]
 8983 002a 44F20103 		movw	r3, #16385
 8984              	.LBE1998:
 8985              	.LBE1997:
 798:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 8986              		.loc 1 798 6 view .LVU2377
 8987 002e 1340     		ands	r3, r3, r2
 8988 0030 B3F5804F 		cmp	r3, #16384
 799:src/xeq.c     **** 		else
 8989              		.loc 1 799 4 view .LVU2378
 8990 0034 01A9     		add	r1, sp, #4
 8991 0036 2846     		mov	r0, r5
 798:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 8992              		.loc 1 798 6 view .LVU2379
 8993 0038 03D0     		beq	.L677
 8994              	.LVL648:
 801:src/xeq.c     **** 	}
 8995              		.loc 1 801 4 is_stmt 1 view .LVU2380
 8996 003a FFF7FEFF 		bl	packed_from_number
 8997              	.LVL649:
 803:src/xeq.c     **** 
 8998              		.loc 1 803 1 is_stmt 0 view .LVU2381
 8999 003e 0BB0     		add	sp, sp, #44
 9000              		.cfi_remember_state
 9001              		.cfi_def_cfa_offset 12
 9002              		@ sp needed
 9003 0040 30BD     		pop	{r4, r5, pc}
 9004              	.LVL650:
 9005              	.L677:
 9006              		.cfi_restore_state
 799:src/xeq.c     **** 		else
 9007              		.loc 1 799 4 is_stmt 1 view .LVU2382
 9008 0042 FFF7FEFF 		bl	packed128_from_number
 9009              	.LVL651:
 803:src/xeq.c     **** 
 9010              		.loc 1 803 1 is_stmt 0 view .LVU2383
 9011 0046 0BB0     		add	sp, sp, #44
 9012              		.cfi_def_cfa_offset 12
 9013              		@ sp needed
 9014 0048 30BD     		pop	{r4, r5, pc}
 9015              	.LVL652:
 9016              	.L679:
 803:src/xeq.c     **** 
 9017              		.loc 1 803 1 view .LVU2384
 9018 004a 00BF     		.align	2
 9019              	.L678:
 9020 004c 00000000 		.word	Ctx
 9021 0050 00000000 		.word	main_ram
 9022              		.cfi_endproc
ARM GAS  /tmp/cc0UaEmF.s 			page 294


 9023              	.LFE58:
 9025              		.section	.text.setX,"ax",%progbits
 9026              		.align	1
 9027              		.p2align 2,,3
 9028              		.global	setX
 9029              		.syntax unified
 9030              		.thumb
 9031              		.thumb_func
 9032              		.fpu fpv4-sp-d16
 9034              	setX:
 9035              	.LVL653:
 9036              	.LFB60:
 809:src/xeq.c     **** 	setRegister(regX_idx, x);
 9037              		.loc 1 809 31 is_stmt 1 view -0
 9038              		.cfi_startproc
 9039              		@ args = 0, pretend = 0, frame = 0
 9040              		@ frame_needed = 0, uses_anonymous_args = 0
 9041              		@ link register save eliminated.
 810:src/xeq.c     **** }
 9042              		.loc 1 810 2 view .LVU2386
 809:src/xeq.c     **** 	setRegister(regX_idx, x);
 9043              		.loc 1 809 31 is_stmt 0 view .LVU2387
 9044 0000 0146     		mov	r1, r0
 810:src/xeq.c     **** }
 9045              		.loc 1 810 2 view .LVU2388
 9046 0002 6420     		movs	r0, #100
 9047              	.LVL654:
 810:src/xeq.c     **** }
 9048              		.loc 1 810 2 view .LVU2389
 9049 0004 FFF7FEBF 		b	setRegister
 9050              	.LVL655:
 810:src/xeq.c     **** }
 9051              		.loc 1 810 2 view .LVU2390
 9052              		.cfi_endproc
 9053              	.LFE60:
 9055              		.section	.text.rarg_round,"ax",%progbits
 9056              		.align	1
 9057              		.p2align 2,,3
 9058              		.global	rarg_round
 9059              		.syntax unified
 9060              		.thumb
 9061              		.thumb_func
 9062              		.fpu fpv4-sp-d16
 9064              	rarg_round:
 9065              	.LVL656:
 9066              	.LFB40:
 653:src/xeq.c     **** 	decNumber res, x;
 9067              		.loc 1 653 49 is_stmt 1 view -0
 9068              		.cfi_startproc
 9069              		@ args = 0, pretend = 0, frame = 80
 9070              		@ frame_needed = 0, uses_anonymous_args = 0
 654:src/xeq.c     **** 	const enum rounding rm = get_rounding_mode();
 9071              		.loc 1 654 2 view .LVU2392
 655:src/xeq.c     **** 
 9072              		.loc 1 655 2 view .LVU2393
 9073              	.LBB2011:
 9074              	.LBI2011:
ARM GAS  /tmp/cc0UaEmF.s 			page 295


 601:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 9075              		.loc 1 601 22 view .LVU2394
 9076              	.LBB2012:
 602:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 9077              		.loc 1 602 2 view .LVU2395
 607:src/xeq.c     **** }
 9078              		.loc 1 607 2 view .LVU2396
 607:src/xeq.c     **** }
 9079              		.loc 1 607 31 is_stmt 0 view .LVU2397
 9080 0000 184B     		ldr	r3, .L689
 9081              	.LBE2012:
 9082              	.LBE2011:
 653:src/xeq.c     **** 	decNumber res, x;
 9083              		.loc 1 653 49 view .LVU2398
 9084 0002 70B5     		push	{r4, r5, r6, lr}
 9085              		.cfi_def_cfa_offset 16
 9086              		.cfi_offset 4, -16
 9087              		.cfi_offset 5, -12
 9088              		.cfi_offset 6, -8
 9089              		.cfi_offset 14, -4
 9090              	.LBB2015:
 9091              	.LBB2013:
 607:src/xeq.c     **** }
 9092              		.loc 1 607 31 view .LVU2399
 9093 0004 1B68     		ldr	r3, [r3]
 9094              	.LVL657:
 607:src/xeq.c     **** }
 9095              		.loc 1 607 31 view .LVU2400
 9096              	.LBE2013:
 9097              	.LBE2015:
 657:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9098              		.loc 1 657 2 is_stmt 1 view .LVU2401
 657:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9099              		.loc 1 657 6 is_stmt 0 view .LVU2402
 9100 0006 93F8E857 		ldrb	r5, [r3, #2024]	@ zero_extendqisi2
 657:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9101              		.loc 1 657 5 view .LVU2403
 9102 000a EA07     		lsls	r2, r5, #31
 653:src/xeq.c     **** 	decNumber res, x;
 9103              		.loc 1 653 49 view .LVU2404
 9104 000c 94B0     		sub	sp, sp, #80
 9105              		.cfi_def_cfa_offset 96
 657:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9106              		.loc 1 657 5 view .LVU2405
 9107 000e 06D5     		bpl	.L682
 658:src/xeq.c     **** 		return;
 9108              		.loc 1 658 3 is_stmt 1 view .LVU2406
 9109              	.LVL658:
 9110              	.LBB2016:
 9111              	.LBI2016:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 9112              		.loc 1 537 5 view .LVU2407
 9113              	.LBB2017:
 538:src/xeq.c     **** 		Error = e;
 9114              		.loc 1 538 2 view .LVU2408
 538:src/xeq.c     **** 		Error = e;
 9115              		.loc 1 538 12 is_stmt 0 view .LVU2409
ARM GAS  /tmp/cc0UaEmF.s 			page 296


 9116 0010 154B     		ldr	r3, .L689+4
 9117              	.LVL659:
 538:src/xeq.c     **** 		Error = e;
 9118              		.loc 1 538 5 view .LVU2410
 9119 0012 1A68     		ldr	r2, [r3]
 9120 0014 0AB9     		cbnz	r2, .L681
 9121              	.LVL660:
 9122              	.LBB2018:
 9123              	.LBI2018:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 9124              		.loc 1 537 5 is_stmt 1 view .LVU2411
 9125              	.LBB2019:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 9126              		.loc 1 539 3 view .LVU2412
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 9127              		.loc 1 539 9 is_stmt 0 view .LVU2413
 9128 0016 0D22     		movs	r2, #13
 9129 0018 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 9130              		.loc 1 540 3 is_stmt 1 view .LVU2414
 9131              	.LVL661:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 9132              		.loc 1 540 3 is_stmt 0 view .LVU2415
 9133              	.LBE2019:
 9134              	.LBE2018:
 9135              	.LBE2017:
 9136              	.LBE2016:
 659:src/xeq.c     **** 	}
 9137              		.loc 1 659 3 is_stmt 1 view .LVU2416
 9138              	.L681:
 669:src/xeq.c     **** 
 9139              		.loc 1 669 1 is_stmt 0 view .LVU2417
 9140 001a 14B0     		add	sp, sp, #80
 9141              		.cfi_remember_state
 9142              		.cfi_def_cfa_offset 16
 9143              		@ sp needed
 9144 001c 70BD     		pop	{r4, r5, r6, pc}
 9145              	.LVL662:
 9146              	.L682:
 9147              		.cfi_restore_state
 9148              	.LBB2020:
 9149              	.LBB2014:
 607:src/xeq.c     **** }
 9150              		.loc 1 607 37 view .LVU2418
 9151 001e 93F8EB37 		ldrb	r3, [r3, #2027]	@ zero_extendqisi2
 9152              	.LVL663:
 607:src/xeq.c     **** }
 9153              		.loc 1 607 9 view .LVU2419
 9154 0022 124A     		ldr	r2, .L689+8
 607:src/xeq.c     **** }
 9155              		.loc 1 607 37 view .LVU2420
 9156 0024 C3F30213 		ubfx	r3, r3, #4, #3
 9157 0028 0C46     		mov	r4, r1
 607:src/xeq.c     **** }
 9158              		.loc 1 607 9 view .LVU2421
 9159 002a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9160 002c 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/cc0UaEmF.s 			page 297


 9161              	.LBE2014:
 9162              	.LBE2020:
 662:src/xeq.c     **** 	getX(&x);
 9163              		.loc 1 662 2 is_stmt 1 view .LVU2422
 9164              	.LBB2021:
 9165              	.LBI2021:
 773:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 9166              		.loc 1 773 6 view .LVU2423
 9167              	.LBB2022:
 774:src/xeq.c     **** }
 9168              		.loc 1 774 2 view .LVU2424
 9169 002e 0646     		mov	r6, r0
 9170 0030 6421     		movs	r1, #100
 9171              	.LVL664:
 774:src/xeq.c     **** }
 9172              		.loc 1 774 2 is_stmt 0 view .LVU2425
 9173 0032 6C20     		movs	r0, #108
 9174              	.LVL665:
 774:src/xeq.c     **** }
 9175              		.loc 1 774 2 view .LVU2426
 9176 0034 FFF7FEFF 		bl	copyreg_n
 9177              	.LVL666:
 774:src/xeq.c     **** }
 9178              		.loc 1 774 2 view .LVU2427
 9179              	.LBE2022:
 9180              	.LBE2021:
 663:src/xeq.c     **** 	if (op == RARG_ROUND)
 9181              		.loc 1 663 2 is_stmt 1 view .LVU2428
 9182              	.LBB2023:
 9183              	.LBI2023:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 9184              		.loc 1 805 12 view .LVU2429
 9185              	.LBB2024:
 806:src/xeq.c     **** }
 9186              		.loc 1 806 2 view .LVU2430
 806:src/xeq.c     **** }
 9187              		.loc 1 806 9 is_stmt 0 view .LVU2431
 9188 0038 6421     		movs	r1, #100
 9189 003a 0BA8     		add	r0, sp, #44
 9190              	.LVL667:
 806:src/xeq.c     **** }
 9191              		.loc 1 806 9 view .LVU2432
 9192 003c FFF7FEFF 		bl	getRegister
 9193              	.LVL668:
 806:src/xeq.c     **** }
 9194              		.loc 1 806 9 view .LVU2433
 9195              	.LBE2024:
 9196              	.LBE2023:
 664:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9197              		.loc 1 664 2 is_stmt 1 view .LVU2434
 664:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9198              		.loc 1 664 5 is_stmt 0 view .LVU2435
 9199 0040 752C     		cmp	r4, #117
 665:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9200              		.loc 1 665 3 view .LVU2436
 9201 0042 02AC     		add	r4, sp, #8
 664:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
ARM GAS  /tmp/cc0UaEmF.s 			page 298


 9202              		.loc 1 664 5 view .LVU2437
 9203 0044 019B     		ldr	r3, [sp, #4]
 665:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9204              		.loc 1 665 3 view .LVU2438
 9205 0046 3246     		mov	r2, r6
 9206 0048 0BA9     		add	r1, sp, #44
 9207 004a 2046     		mov	r0, r4
 664:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9208              		.loc 1 664 5 view .LVU2439
 9209 004c 07D0     		beq	.L688
 9210              	.LVL669:
 667:src/xeq.c     **** 	setX(&res);
 9211              		.loc 1 667 3 is_stmt 1 view .LVU2440
 9212 004e FFF7FEFF 		bl	decNumberRoundDecimals
 9213              	.LVL670:
 9214              	.L686:
 668:src/xeq.c     **** }
 9215              		.loc 1 668 2 view .LVU2441
 9216              	.LBB2025:
 9217              	.LBI2025:
 809:src/xeq.c     **** 	setRegister(regX_idx, x);
 9218              		.loc 1 809 6 view .LVU2442
 9219              	.LBB2026:
 810:src/xeq.c     **** }
 9220              		.loc 1 810 2 view .LVU2443
 9221 0052 2146     		mov	r1, r4
 9222 0054 6420     		movs	r0, #100
 9223 0056 FFF7FEFF 		bl	setRegister
 9224              	.LVL671:
 810:src/xeq.c     **** }
 9225              		.loc 1 810 2 is_stmt 0 view .LVU2444
 9226              	.LBE2026:
 9227              	.LBE2025:
 669:src/xeq.c     **** 
 9228              		.loc 1 669 1 view .LVU2445
 9229 005a 14B0     		add	sp, sp, #80
 9230              		.cfi_remember_state
 9231              		.cfi_def_cfa_offset 16
 9232              		@ sp needed
 9233 005c 70BD     		pop	{r4, r5, r6, pc}
 9234              	.LVL672:
 9235              	.L688:
 9236              		.cfi_restore_state
 665:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9237              		.loc 1 665 3 is_stmt 1 view .LVU2446
 9238 005e FFF7FEFF 		bl	decNumberRoundDigits
 9239              	.LVL673:
 665:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9240              		.loc 1 665 3 is_stmt 0 view .LVU2447
 9241 0062 F6E7     		b	.L686
 9242              	.L690:
 9243              		.align	2
 9244              	.L689:
 9245 0064 00000000 		.word	main_ram
 9246 0068 00000000 		.word	Error
 9247 006c 00000000 		.word	.LANCHOR1
 9248              		.cfi_endproc
ARM GAS  /tmp/cc0UaEmF.s 			page 299


 9249              	.LFE40:
 9251              		.section	.text.setY,"ax",%progbits
 9252              		.align	1
 9253              		.p2align 2,,3
 9254              		.global	setY
 9255              		.syntax unified
 9256              		.thumb
 9257              		.thumb_func
 9258              		.fpu fpv4-sp-d16
 9260              	setY:
 9261              	.LVL674:
 9262              	.LFB62:
 817:src/xeq.c     **** 	setRegister(regY_idx, y);
 9263              		.loc 1 817 31 is_stmt 1 view -0
 9264              		.cfi_startproc
 9265              		@ args = 0, pretend = 0, frame = 0
 9266              		@ frame_needed = 0, uses_anonymous_args = 0
 9267              		@ link register save eliminated.
 818:src/xeq.c     **** }
 9268              		.loc 1 818 2 view .LVU2449
 817:src/xeq.c     **** 	setRegister(regY_idx, y);
 9269              		.loc 1 817 31 is_stmt 0 view .LVU2450
 9270 0000 0146     		mov	r1, r0
 818:src/xeq.c     **** }
 9271              		.loc 1 818 2 view .LVU2451
 9272 0002 6520     		movs	r0, #101
 9273              	.LVL675:
 818:src/xeq.c     **** }
 9274              		.loc 1 818 2 view .LVU2452
 9275 0004 FFF7FEBF 		b	setRegister
 9276              	.LVL676:
 818:src/xeq.c     **** }
 9277              		.loc 1 818 2 view .LVU2453
 9278              		.cfi_endproc
 9279              	.LFE62:
 9281              		.section	.text.setXY,"ax",%progbits
 9282              		.align	1
 9283              		.p2align 2,,3
 9284              		.global	setXY
 9285              		.syntax unified
 9286              		.thumb
 9287              		.thumb_func
 9288              		.fpu fpv4-sp-d16
 9290              	setXY:
 9291              	.LVL677:
 9292              	.LFB66:
 840:src/xeq.c     **** 	setX(x);
 9293              		.loc 1 840 52 is_stmt 1 view -0
 9294              		.cfi_startproc
 9295              		@ args = 0, pretend = 0, frame = 0
 9296              		@ frame_needed = 0, uses_anonymous_args = 0
 841:src/xeq.c     **** 	setY(y);
 9297              		.loc 1 841 2 view .LVU2455
 9298              	.LBB2027:
 9299              	.LBI2027:
 809:src/xeq.c     **** 	setRegister(regX_idx, x);
 9300              		.loc 1 809 6 view .LVU2456
ARM GAS  /tmp/cc0UaEmF.s 			page 300


 9301              	.LBB2028:
 810:src/xeq.c     **** }
 9302              		.loc 1 810 2 view .LVU2457
 9303              	.LBE2028:
 9304              	.LBE2027:
 840:src/xeq.c     **** 	setX(x);
 9305              		.loc 1 840 52 is_stmt 0 view .LVU2458
 9306 0000 10B5     		push	{r4, lr}
 9307              		.cfi_def_cfa_offset 8
 9308              		.cfi_offset 4, -8
 9309              		.cfi_offset 14, -4
 840:src/xeq.c     **** 	setX(x);
 9310              		.loc 1 840 52 view .LVU2459
 9311 0002 0C46     		mov	r4, r1
 9312              	.LBB2030:
 9313              	.LBB2029:
 810:src/xeq.c     **** }
 9314              		.loc 1 810 2 view .LVU2460
 9315 0004 0146     		mov	r1, r0
 9316              	.LVL678:
 810:src/xeq.c     **** }
 9317              		.loc 1 810 2 view .LVU2461
 9318 0006 6420     		movs	r0, #100
 9319              	.LVL679:
 810:src/xeq.c     **** }
 9320              		.loc 1 810 2 view .LVU2462
 9321 0008 FFF7FEFF 		bl	setRegister
 9322              	.LVL680:
 810:src/xeq.c     **** }
 9323              		.loc 1 810 2 view .LVU2463
 9324              	.LBE2029:
 9325              	.LBE2030:
 842:src/xeq.c     **** }
 9326              		.loc 1 842 2 is_stmt 1 view .LVU2464
 9327              	.LBB2031:
 9328              	.LBI2031:
 817:src/xeq.c     **** 	setRegister(regY_idx, y);
 9329              		.loc 1 817 6 view .LVU2465
 9330              	.LBB2032:
 818:src/xeq.c     **** }
 9331              		.loc 1 818 2 view .LVU2466
 9332 000c 2146     		mov	r1, r4
 9333 000e 6520     		movs	r0, #101
 9334              	.LBE2032:
 9335              	.LBE2031:
 843:src/xeq.c     **** 
 9336              		.loc 1 843 1 is_stmt 0 view .LVU2467
 9337 0010 BDE81040 		pop	{r4, lr}
 9338              		.cfi_restore 14
 9339              		.cfi_restore 4
 9340              		.cfi_def_cfa_offset 0
 9341              	.LVL681:
 9342              	.LBB2034:
 9343              	.LBB2033:
 818:src/xeq.c     **** }
 9344              		.loc 1 818 2 view .LVU2468
 9345 0014 FFF7FEBF 		b	setRegister
ARM GAS  /tmp/cc0UaEmF.s 			page 301


 9346              	.LVL682:
 818:src/xeq.c     **** }
 9347              		.loc 1 818 2 view .LVU2469
 9348              	.LBE2033:
 9349              	.LBE2034:
 9350              		.cfi_endproc
 9351              	.LFE66:
 9353              		.section	.text.get_reg_n_int,"ax",%progbits
 9354              		.align	1
 9355              		.p2align 2,,3
 9356              		.global	get_reg_n_int
 9357              		.syntax unified
 9358              		.thumb
 9359              		.thumb_func
 9360              		.fpu fpv4-sp-d16
 9362              	get_reg_n_int:
 9363              	.LVL683:
 9364              	.LFB90:
1230:src/xeq.c     **** 	long long int ll;
 9365              		.loc 1 1230 40 is_stmt 1 view -0
 9366              		.cfi_startproc
 9367              		@ args = 0, pretend = 0, frame = 8
 9368              		@ frame_needed = 0, uses_anonymous_args = 0
1231:src/xeq.c     **** 	xcopy(&ll, get_reg_n(index), sizeof(ll));
 9369              		.loc 1 1231 2 view .LVU2471
1232:src/xeq.c     **** 	return ll;
 9370              		.loc 1 1232 2 view .LVU2472
1230:src/xeq.c     **** 	long long int ll;
 9371              		.loc 1 1230 40 is_stmt 0 view .LVU2473
 9372 0000 00B5     		push	{lr}
 9373              		.cfi_def_cfa_offset 4
 9374              		.cfi_offset 14, -4
 9375 0002 83B0     		sub	sp, sp, #12
 9376              		.cfi_def_cfa_offset 16
1232:src/xeq.c     **** 	return ll;
 9377              		.loc 1 1232 13 view .LVU2474
 9378 0004 FFF7FEFF 		bl	get_reg_n
 9379              	.LVL684:
1232:src/xeq.c     **** 	return ll;
 9380              		.loc 1 1232 2 view .LVU2475
 9381 0008 0822     		movs	r2, #8
1232:src/xeq.c     **** 	return ll;
 9382              		.loc 1 1232 13 view .LVU2476
 9383 000a 0146     		mov	r1, r0
1232:src/xeq.c     **** 	return ll;
 9384              		.loc 1 1232 2 view .LVU2477
 9385 000c 6846     		mov	r0, sp
 9386 000e FFF7FEFF 		bl	xcopy
 9387              	.LVL685:
1233:src/xeq.c     **** }
 9388              		.loc 1 1233 2 is_stmt 1 view .LVU2478
1234:src/xeq.c     **** 
 9389              		.loc 1 1234 1 is_stmt 0 view .LVU2479
 9390 0012 DDE90001 		ldrd	r0, [sp]
 9391 0016 03B0     		add	sp, sp, #12
 9392              		.cfi_def_cfa_offset 4
 9393              		@ sp needed
ARM GAS  /tmp/cc0UaEmF.s 			page 302


 9394 0018 5DF804FB 		ldr	pc, [sp], #4
 9395              		.cfi_endproc
 9396              	.LFE90:
 9398              		.section	.text.storcl_intop,"ax",%progbits
 9399              		.align	1
 9400              		.p2align 2,,3
 9401              		.syntax unified
 9402              		.thumb
 9403              		.thumb_func
 9404              		.fpu fpv4-sp-d16
 9406              	storcl_intop:
 9407              	.LVL686:
 9408              	.LFB112:
1485:src/xeq.c     **** 	long long int x, y;
 9409              		.loc 1 1485 83 is_stmt 1 view -0
 9410              		.cfi_startproc
 9411              		@ args = 0, pretend = 0, frame = 0
 9412              		@ frame_needed = 0, uses_anonymous_args = 0
1486:src/xeq.c     **** 
 9413              		.loc 1 1486 2 view .LVU2481
1488:src/xeq.c     **** 	y = get_reg_n_int(index);
 9414              		.loc 1 1488 2 view .LVU2482
 9415              	.LBB2035:
 9416              	.LBI2035:
1256:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 9417              		.loc 1 1256 15 view .LVU2483
 9418              	.LBB2036:
1257:src/xeq.c     **** }
 9419              		.loc 1 1257 2 view .LVU2484
 9420              	.LBE2036:
 9421              	.LBE2035:
1485:src/xeq.c     **** 	long long int x, y;
 9422              		.loc 1 1485 83 is_stmt 0 view .LVU2485
 9423 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 9424              		.cfi_def_cfa_offset 32
 9425              		.cfi_offset 3, -32
 9426              		.cfi_offset 4, -28
 9427              		.cfi_offset 5, -24
 9428              		.cfi_offset 6, -20
 9429              		.cfi_offset 7, -16
 9430              		.cfi_offset 8, -12
 9431              		.cfi_offset 9, -8
 9432              		.cfi_offset 14, -4
1485:src/xeq.c     **** 	long long int x, y;
 9433              		.loc 1 1485 83 view .LVU2486
 9434 0004 0446     		mov	r4, r0
 9435              	.LBB2040:
 9436              	.LBB2037:
1257:src/xeq.c     **** }
 9437              		.loc 1 1257 9 view .LVU2487
 9438 0006 6420     		movs	r0, #100
 9439              	.LVL687:
1257:src/xeq.c     **** }
 9440              		.loc 1 1257 9 view .LVU2488
 9441              	.LBE2037:
 9442              	.LBE2040:
1485:src/xeq.c     **** 	long long int x, y;
ARM GAS  /tmp/cc0UaEmF.s 			page 303


 9443              		.loc 1 1485 83 view .LVU2489
 9444 0008 8946     		mov	r9, r1
 9445 000a 9846     		mov	r8, r3
 9446 000c 1646     		mov	r6, r2
 9447              	.LBB2041:
 9448              	.LBB2038:
1257:src/xeq.c     **** }
 9449              		.loc 1 1257 9 view .LVU2490
 9450 000e FFF7FEFF 		bl	get_reg_n_int
 9451              	.LVL688:
1257:src/xeq.c     **** }
 9452              		.loc 1 1257 9 view .LVU2491
 9453 0012 0746     		mov	r7, r0
 9454              	.LBE2038:
 9455              	.LBE2041:
1489:src/xeq.c     **** 
 9456              		.loc 1 1489 6 view .LVU2492
 9457 0014 4846     		mov	r0, r9
 9458              	.LBB2042:
 9459              	.LBB2039:
1257:src/xeq.c     **** }
 9460              		.loc 1 1257 9 view .LVU2493
 9461 0016 0D46     		mov	r5, r1
 9462              	.LVL689:
1257:src/xeq.c     **** }
 9463              		.loc 1 1257 9 view .LVU2494
 9464              	.LBE2039:
 9465              	.LBE2042:
1489:src/xeq.c     **** 
 9466              		.loc 1 1489 2 is_stmt 1 view .LVU2495
1489:src/xeq.c     **** 
 9467              		.loc 1 1489 6 is_stmt 0 view .LVU2496
 9468 0018 FFF7FEFF 		bl	get_reg_n_int
 9469              	.LVL690:
1491:src/xeq.c     **** 		const long long int t = x;
 9470              		.loc 1 1491 2 is_stmt 1 view .LVU2497
1491:src/xeq.c     **** 		const long long int t = x;
 9471              		.loc 1 1491 5 is_stmt 0 view .LVU2498
 9472 001c B8F1000F 		cmp	r8, #0
 9473 0020 05D0     		beq	.L697
 9474 0022 3A46     		mov	r2, r7
 9475 0024 2B46     		mov	r3, r5
 9476              	.LBB2043:
1493:src/xeq.c     **** 		y = t;
 9477              		.loc 1 1493 5 view .LVU2499
 9478 0026 0746     		mov	r7, r0
 9479              	.LVL691:
1493:src/xeq.c     **** 		y = t;
 9480              		.loc 1 1493 5 view .LVU2500
 9481 0028 0D46     		mov	r5, r1
 9482              	.LVL692:
1494:src/xeq.c     **** 	}
 9483              		.loc 1 1494 5 view .LVU2501
 9484 002a 1046     		mov	r0, r2
 9485              	.LVL693:
1494:src/xeq.c     **** 	}
 9486              		.loc 1 1494 5 view .LVU2502
ARM GAS  /tmp/cc0UaEmF.s 			page 304


 9487 002c 1946     		mov	r1, r3
 9488              	.LVL694:
 9489              	.L697:
1494:src/xeq.c     **** 	}
 9490              		.loc 1 1494 5 view .LVU2503
 9491              	.LBE2043:
1497:src/xeq.c     **** 	case 1:
 9492              		.loc 1 1497 2 is_stmt 1 view .LVU2504
 9493 002e 013C     		subs	r4, r4, #1
 9494 0030 052C     		cmp	r4, #5
 9495 0032 3AD8     		bhi	.L706
 9496 0034 DFE804F0 		tbb	[pc, r4]
 9497              	.L700:
 9498 0038 0C       		.byte	(.L705-.L700)/2
 9499 0039 15       		.byte	(.L704-.L700)/2
 9500 003a 1E       		.byte	(.L703-.L700)/2
 9501 003b 27       		.byte	(.L702-.L700)/2
 9502 003c 30       		.byte	(.L701-.L700)/2
 9503 003d 03       		.byte	(.L699-.L700)/2
 9504              		.p2align 1
 9505              	.L699:
1514:src/xeq.c     **** 		break;
 9506              		.loc 1 1514 3 view .LVU2505
1514:src/xeq.c     **** 		break;
 9507              		.loc 1 1514 8 is_stmt 0 view .LVU2506
 9508 003e 3A46     		mov	r2, r7
 9509 0040 2B46     		mov	r3, r5
 9510 0042 FFF7FEFF 		bl	intMax
 9511              	.LVL695:
1514:src/xeq.c     **** 		break;
 9512              		.loc 1 1514 6 view .LVU2507
 9513 0046 C6E90001 		strd	r0, [r6]
1515:src/xeq.c     **** 	default:
 9514              		.loc 1 1515 3 is_stmt 1 view .LVU2508
1519:src/xeq.c     **** }
 9515              		.loc 1 1519 9 is_stmt 0 view .LVU2509
 9516 004a 0020     		movs	r0, #0
 9517              	.L696:
1520:src/xeq.c     **** 
 9518              		.loc 1 1520 1 view .LVU2510
 9519 004c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 9520              	.LVL696:
 9521              	.L705:
1499:src/xeq.c     **** 		break;
 9522              		.loc 1 1499 3 is_stmt 1 view .LVU2511
1499:src/xeq.c     **** 		break;
 9523              		.loc 1 1499 8 is_stmt 0 view .LVU2512
 9524 0050 3A46     		mov	r2, r7
 9525 0052 2B46     		mov	r3, r5
 9526 0054 FFF7FEFF 		bl	intAdd
 9527              	.LVL697:
1499:src/xeq.c     **** 		break;
 9528              		.loc 1 1499 6 view .LVU2513
 9529 0058 C6E90001 		strd	r0, [r6]
1500:src/xeq.c     **** 	case 2:
 9530              		.loc 1 1500 3 is_stmt 1 view .LVU2514
1519:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 305


 9531              		.loc 1 1519 9 is_stmt 0 view .LVU2515
 9532 005c 0020     		movs	r0, #0
1520:src/xeq.c     **** 
 9533              		.loc 1 1520 1 view .LVU2516
 9534 005e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 9535              	.LVL698:
 9536              	.L704:
1502:src/xeq.c     **** 		break;
 9537              		.loc 1 1502 3 is_stmt 1 view .LVU2517
1502:src/xeq.c     **** 		break;
 9538              		.loc 1 1502 8 is_stmt 0 view .LVU2518
 9539 0062 3A46     		mov	r2, r7
 9540 0064 2B46     		mov	r3, r5
 9541 0066 FFF7FEFF 		bl	intSubtract
 9542              	.LVL699:
1502:src/xeq.c     **** 		break;
 9543              		.loc 1 1502 6 view .LVU2519
 9544 006a C6E90001 		strd	r0, [r6]
1503:src/xeq.c     **** 	case 3:
 9545              		.loc 1 1503 3 is_stmt 1 view .LVU2520
1519:src/xeq.c     **** }
 9546              		.loc 1 1519 9 is_stmt 0 view .LVU2521
 9547 006e 0020     		movs	r0, #0
1520:src/xeq.c     **** 
 9548              		.loc 1 1520 1 view .LVU2522
 9549 0070 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 9550              	.LVL700:
 9551              	.L703:
1505:src/xeq.c     **** 		break;
 9552              		.loc 1 1505 3 is_stmt 1 view .LVU2523
1505:src/xeq.c     **** 		break;
 9553              		.loc 1 1505 8 is_stmt 0 view .LVU2524
 9554 0074 3A46     		mov	r2, r7
 9555 0076 2B46     		mov	r3, r5
 9556 0078 FFF7FEFF 		bl	intMultiply
 9557              	.LVL701:
1505:src/xeq.c     **** 		break;
 9558              		.loc 1 1505 6 view .LVU2525
 9559 007c C6E90001 		strd	r0, [r6]
1506:src/xeq.c     **** 	case 4:
 9560              		.loc 1 1506 3 is_stmt 1 view .LVU2526
1519:src/xeq.c     **** }
 9561              		.loc 1 1519 9 is_stmt 0 view .LVU2527
 9562 0080 0020     		movs	r0, #0
1520:src/xeq.c     **** 
 9563              		.loc 1 1520 1 view .LVU2528
 9564 0082 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 9565              	.LVL702:
 9566              	.L702:
1508:src/xeq.c     **** 		break;
 9567              		.loc 1 1508 3 is_stmt 1 view .LVU2529
1508:src/xeq.c     **** 		break;
 9568              		.loc 1 1508 8 is_stmt 0 view .LVU2530
 9569 0086 3A46     		mov	r2, r7
 9570 0088 2B46     		mov	r3, r5
 9571 008a FFF7FEFF 		bl	intDivide
 9572              	.LVL703:
ARM GAS  /tmp/cc0UaEmF.s 			page 306


1508:src/xeq.c     **** 		break;
 9573              		.loc 1 1508 6 view .LVU2531
 9574 008e C6E90001 		strd	r0, [r6]
1509:src/xeq.c     **** 	case 5:
 9575              		.loc 1 1509 3 is_stmt 1 view .LVU2532
1519:src/xeq.c     **** }
 9576              		.loc 1 1519 9 is_stmt 0 view .LVU2533
 9577 0092 0020     		movs	r0, #0
1520:src/xeq.c     **** 
 9578              		.loc 1 1520 1 view .LVU2534
 9579 0094 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 9580              	.LVL704:
 9581              	.L701:
1511:src/xeq.c     **** 		break;
 9582              		.loc 1 1511 3 is_stmt 1 view .LVU2535
1511:src/xeq.c     **** 		break;
 9583              		.loc 1 1511 8 is_stmt 0 view .LVU2536
 9584 0098 3A46     		mov	r2, r7
 9585 009a 2B46     		mov	r3, r5
 9586 009c FFF7FEFF 		bl	intMin
 9587              	.LVL705:
1511:src/xeq.c     **** 		break;
 9588              		.loc 1 1511 6 view .LVU2537
 9589 00a0 C6E90001 		strd	r0, [r6]
1512:src/xeq.c     **** 	case 6:
 9590              		.loc 1 1512 3 is_stmt 1 view .LVU2538
1519:src/xeq.c     **** }
 9591              		.loc 1 1519 9 is_stmt 0 view .LVU2539
 9592 00a4 0020     		movs	r0, #0
1520:src/xeq.c     **** 
 9593              		.loc 1 1520 1 view .LVU2540
 9594 00a6 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 9595              	.LVL706:
 9596              	.L706:
1519:src/xeq.c     **** }
 9597              		.loc 1 1519 9 view .LVU2541
 9598 00aa 0120     		movs	r0, #1
 9599              	.LVL707:
1519:src/xeq.c     **** }
 9600              		.loc 1 1519 9 view .LVU2542
 9601 00ac CEE7     		b	.L696
 9602              		.cfi_endproc
 9603              	.LFE112:
 9605 00ae 00BF     		.section	.text.incdec,"ax",%progbits
 9606              		.align	1
 9607              		.p2align 2,,3
 9608              		.syntax unified
 9609              		.thumb
 9610              		.thumb_func
 9611              		.fpu fpv4-sp-d16
 9613              	incdec:
 9614              	.LVL708:
 9615              	.LFB188:
3188:src/xeq.c     **** 	if (is_intmode()) {
 9616              		.loc 1 3188 46 is_stmt 1 view -0
 9617              		.cfi_startproc
 9618              		@ args = 0, pretend = 0, frame = 80
ARM GAS  /tmp/cc0UaEmF.s 			page 307


 9619              		@ frame_needed = 0, uses_anonymous_args = 0
3189:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 9620              		.loc 1 3189 2 view .LVU2544
3189:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 9621              		.loc 1 3189 6 is_stmt 0 view .LVU2545
 9622 0000 244B     		ldr	r3, .L721
3188:src/xeq.c     **** 	if (is_intmode()) {
 9623              		.loc 1 3188 46 view .LVU2546
 9624 0002 70B5     		push	{r4, r5, r6, lr}
 9625              		.cfi_def_cfa_offset 16
 9626              		.cfi_offset 4, -16
 9627              		.cfi_offset 5, -12
 9628              		.cfi_offset 6, -8
 9629              		.cfi_offset 14, -4
3189:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 9630              		.loc 1 3189 6 view .LVU2547
 9631 0004 1B68     		ldr	r3, [r3]
 9632 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3189:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 9633              		.loc 1 3189 5 view .LVU2548
 9634 000a DB07     		lsls	r3, r3, #31
3188:src/xeq.c     **** 	if (is_intmode()) {
 9635              		.loc 1 3188 46 view .LVU2549
 9636 000c 94B0     		sub	sp, sp, #80
 9637              		.cfi_def_cfa_offset 96
3188:src/xeq.c     **** 	if (is_intmode()) {
 9638              		.loc 1 3188 46 view .LVU2550
 9639 000e 0D46     		mov	r5, r1
 9640 0010 0446     		mov	r4, r0
3189:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 9641              		.loc 1 3189 5 view .LVU2551
 9642 0012 1ED5     		bpl	.L712
 9643              	.LVL709:
 9644              	.LBB2051:
 9645              	.LBI2051:
3188:src/xeq.c     **** 	if (is_intmode()) {
 9646              		.loc 1 3188 12 is_stmt 1 view .LVU2552
 9647              	.LBB2052:
3190:src/xeq.c     **** 		int xs;
 9648              		.loc 1 3190 3 view .LVU2553
3190:src/xeq.c     **** 		int xs;
 9649              		.loc 1 3190 21 is_stmt 0 view .LVU2554
 9650 0014 FFF7FEFF 		bl	get_reg_n_int
 9651              	.LVL710:
3191:src/xeq.c     **** 		unsigned long long int xv;
 9652              		.loc 1 3191 3 is_stmt 1 view .LVU2555
3192:src/xeq.c     **** 
 9653              		.loc 1 3192 3 view .LVU2556
3194:src/xeq.c     **** 			x = intAdd(x, 1LL);
 9654              		.loc 1 3194 3 view .LVU2557
3195:src/xeq.c     **** 		else
 9655              		.loc 1 3195 8 is_stmt 0 view .LVU2558
 9656 0018 0122     		movs	r2, #1
 9657 001a 0023     		movs	r3, #0
3194:src/xeq.c     **** 			x = intAdd(x, 1LL);
 9658              		.loc 1 3194 6 view .LVU2559
 9659 001c 002D     		cmp	r5, #0
ARM GAS  /tmp/cc0UaEmF.s 			page 308


 9660 001e 33D1     		bne	.L719
3197:src/xeq.c     **** 		set_reg_n_int(arg, x);
 9661              		.loc 1 3197 4 is_stmt 1 view .LVU2560
3197:src/xeq.c     **** 		set_reg_n_int(arg, x);
 9662              		.loc 1 3197 8 is_stmt 0 view .LVU2561
 9663 0020 FFF7FEFF 		bl	intSubtract
 9664              	.LVL711:
3197:src/xeq.c     **** 		set_reg_n_int(arg, x);
 9665              		.loc 1 3197 8 view .LVU2562
 9666 0024 0646     		mov	r6, r0
 9667 0026 0D46     		mov	r5, r1
 9668              	.LVL712:
 9669              	.L714:
3198:src/xeq.c     **** 
 9670              		.loc 1 3198 3 is_stmt 1 view .LVU2563
 9671              	.LBB2053:
 9672              	.LBB2054:
1237:src/xeq.c     **** }
 9673              		.loc 1 1237 8 is_stmt 0 view .LVU2564
 9674 0028 2046     		mov	r0, r4
 9675 002a CDE90A65 		strd	r6, r5, [sp, #40]
 9676              	.LVL713:
1237:src/xeq.c     **** }
 9677              		.loc 1 1237 8 view .LVU2565
 9678              	.LBE2054:
 9679              	.LBI2053:
1236:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 9680              		.loc 1 1236 6 is_stmt 1 view .LVU2566
 9681              	.LBB2055:
1237:src/xeq.c     **** }
 9682              		.loc 1 1237 2 view .LVU2567
1237:src/xeq.c     **** }
 9683              		.loc 1 1237 8 is_stmt 0 view .LVU2568
 9684 002e FFF7FEFF 		bl	get_reg_n
 9685              	.LVL714:
1237:src/xeq.c     **** }
 9686              		.loc 1 1237 2 view .LVU2569
 9687 0032 0AA9     		add	r1, sp, #40
 9688 0034 0822     		movs	r2, #8
 9689 0036 FFF7FEFF 		bl	xcopy
 9690              	.LVL715:
1237:src/xeq.c     **** }
 9691              		.loc 1 1237 2 view .LVU2570
 9692              	.LBE2055:
 9693              	.LBE2053:
3200:src/xeq.c     **** 		return xv != 0;
 9694              		.loc 1 3200 3 is_stmt 1 view .LVU2571
3200:src/xeq.c     **** 		return xv != 0;
 9695              		.loc 1 3200 8 is_stmt 0 view .LVU2572
 9696 003a 0AAA     		add	r2, sp, #40
 9697 003c 3046     		mov	r0, r6
 9698 003e 2946     		mov	r1, r5
 9699 0040 FFF7FEFF 		bl	extract_value
 9700              	.LVL716:
3201:src/xeq.c     **** 	} else {
 9701              		.loc 1 3201 3 is_stmt 1 view .LVU2573
3201:src/xeq.c     **** 	} else {
ARM GAS  /tmp/cc0UaEmF.s 			page 309


 9702              		.loc 1 3201 13 is_stmt 0 view .LVU2574
 9703 0044 50EA0103 		orrs	r3, r0, r1
 9704 0048 14BF     		ite	ne
 9705 004a 0120     		movne	r0, #1
 9706              	.LVL717:
3201:src/xeq.c     **** 	} else {
 9707              		.loc 1 3201 13 view .LVU2575
 9708 004c 0020     		moveq	r0, #0
 9709              	.LVL718:
3201:src/xeq.c     **** 	} else {
 9710              		.loc 1 3201 13 view .LVU2576
 9711              	.LBE2052:
 9712              	.LBE2051:
3214:src/xeq.c     **** 
 9713              		.loc 1 3214 1 view .LVU2577
 9714 004e 14B0     		add	sp, sp, #80
 9715              		.cfi_remember_state
 9716              		.cfi_def_cfa_offset 16
 9717              		@ sp needed
 9718 0050 70BD     		pop	{r4, r5, r6, pc}
 9719              	.LVL719:
 9720              	.L712:
 9721              		.cfi_restore_state
 9722              	.LBB2057:
3203:src/xeq.c     **** 
 9723              		.loc 1 3203 3 is_stmt 1 view .LVU2578
3205:src/xeq.c     **** 		if (inc)
 9724              		.loc 1 3205 3 view .LVU2579
 9725 0052 01A8     		add	r0, sp, #4
 9726              	.LVL720:
3205:src/xeq.c     **** 		if (inc)
 9727              		.loc 1 3205 3 is_stmt 0 view .LVU2580
 9728 0054 2146     		mov	r1, r4
 9729              	.LVL721:
3205:src/xeq.c     **** 		if (inc)
 9730              		.loc 1 3205 3 view .LVU2581
 9731 0056 FFF7FEFF 		bl	getRegister
 9732              	.LVL722:
3206:src/xeq.c     **** 			dn_inc(&x);
 9733              		.loc 1 3206 3 is_stmt 1 view .LVU2582
3207:src/xeq.c     **** 		else
 9734              		.loc 1 3207 4 is_stmt 0 view .LVU2583
 9735 005a 01A8     		add	r0, sp, #4
3206:src/xeq.c     **** 			dn_inc(&x);
 9736              		.loc 1 3206 6 view .LVU2584
 9737 005c 8DB9     		cbnz	r5, .L720
3209:src/xeq.c     **** 		setRegister(arg, &x);
 9738              		.loc 1 3209 4 is_stmt 1 view .LVU2585
 9739 005e FFF7FEFF 		bl	dn_dec
 9740              	.LVL723:
 9741              	.L717:
3210:src/xeq.c     **** 		decNumberTrunc(&y, &x);
 9742              		.loc 1 3210 3 view .LVU2586
 9743 0062 2046     		mov	r0, r4
 9744 0064 01A9     		add	r1, sp, #4
 9745 0066 FFF7FEFF 		bl	setRegister
 9746              	.LVL724:
ARM GAS  /tmp/cc0UaEmF.s 			page 310


3211:src/xeq.c     **** 		return ! dn_eq0(&y);
 9747              		.loc 1 3211 3 view .LVU2587
 9748 006a 01A9     		add	r1, sp, #4
 9749 006c 0AA8     		add	r0, sp, #40
 9750 006e FFF7FEFF 		bl	decNumberTrunc
 9751              	.LVL725:
3212:src/xeq.c     **** 	}
 9752              		.loc 1 3212 3 view .LVU2588
3212:src/xeq.c     **** 	}
 9753              		.loc 1 3212 12 is_stmt 0 view .LVU2589
 9754 0072 0AA8     		add	r0, sp, #40
 9755 0074 FFF7FEFF 		bl	dn_eq0
 9756              	.LVL726:
3212:src/xeq.c     **** 	}
 9757              		.loc 1 3212 10 view .LVU2590
 9758 0078 B0FA80F0 		clz	r0, r0
 9759 007c 4009     		lsrs	r0, r0, #5
 9760              	.LBE2057:
3214:src/xeq.c     **** 
 9761              		.loc 1 3214 1 view .LVU2591
 9762 007e 14B0     		add	sp, sp, #80
 9763              		.cfi_remember_state
 9764              		.cfi_def_cfa_offset 16
 9765              		@ sp needed
 9766 0080 70BD     		pop	{r4, r5, r6, pc}
 9767              	.LVL727:
 9768              	.L720:
 9769              		.cfi_restore_state
 9770              	.LBB2058:
3207:src/xeq.c     **** 		else
 9771              		.loc 1 3207 4 is_stmt 1 view .LVU2592
 9772 0082 FFF7FEFF 		bl	dn_inc
 9773              	.LVL728:
 9774 0086 ECE7     		b	.L717
 9775              	.LVL729:
 9776              	.L719:
3207:src/xeq.c     **** 		else
 9777              		.loc 1 3207 4 is_stmt 0 view .LVU2593
 9778              	.LBE2058:
 9779              	.LBB2059:
 9780              	.LBB2056:
3195:src/xeq.c     **** 		else
 9781              		.loc 1 3195 4 is_stmt 1 view .LVU2594
3195:src/xeq.c     **** 		else
 9782              		.loc 1 3195 8 is_stmt 0 view .LVU2595
 9783 0088 FFF7FEFF 		bl	intAdd
 9784              	.LVL730:
3195:src/xeq.c     **** 		else
 9785              		.loc 1 3195 8 view .LVU2596
 9786 008c 0646     		mov	r6, r0
 9787 008e 0D46     		mov	r5, r1
 9788              	.LVL731:
3195:src/xeq.c     **** 		else
 9789              		.loc 1 3195 8 view .LVU2597
 9790 0090 CAE7     		b	.L714
 9791              	.L722:
 9792 0092 00BF     		.align	2
ARM GAS  /tmp/cc0UaEmF.s 			page 311


 9793              	.L721:
 9794 0094 00000000 		.word	main_ram
 9795              	.LBE2056:
 9796              	.LBE2059:
 9797              		.cfi_endproc
 9798              	.LFE188:
 9800              		.section	.text.set_reg_n_int,"ax",%progbits
 9801              		.align	1
 9802              		.p2align 2,,3
 9803              		.global	set_reg_n_int
 9804              		.syntax unified
 9805              		.thumb
 9806              		.thumb_func
 9807              		.fpu fpv4-sp-d16
 9809              	set_reg_n_int:
 9810              	.LVL732:
 9811              	.LFB91:
1236:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 9812              		.loc 1 1236 49 is_stmt 1 view -0
 9813              		.cfi_startproc
 9814              		@ args = 0, pretend = 0, frame = 8
 9815              		@ frame_needed = 0, uses_anonymous_args = 0
1237:src/xeq.c     **** }
 9816              		.loc 1 1237 2 view .LVU2599
1236:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 9817              		.loc 1 1236 49 is_stmt 0 view .LVU2600
 9818 0000 00B5     		push	{lr}
 9819              		.cfi_def_cfa_offset 4
 9820              		.cfi_offset 14, -4
 9821 0002 83B0     		sub	sp, sp, #12
 9822              		.cfi_def_cfa_offset 16
1236:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 9823              		.loc 1 1236 49 view .LVU2601
 9824 0004 CDE90023 		strd	r2, [sp]
1237:src/xeq.c     **** }
 9825              		.loc 1 1237 8 view .LVU2602
 9826 0008 FFF7FEFF 		bl	get_reg_n
 9827              	.LVL733:
1237:src/xeq.c     **** }
 9828              		.loc 1 1237 2 view .LVU2603
 9829 000c 0822     		movs	r2, #8
 9830 000e 6946     		mov	r1, sp
 9831 0010 FFF7FEFF 		bl	xcopy
 9832              	.LVL734:
1238:src/xeq.c     **** 
 9833              		.loc 1 1238 1 view .LVU2604
 9834 0014 03B0     		add	sp, sp, #12
 9835              		.cfi_def_cfa_offset 4
 9836              		@ sp needed
 9837 0016 5DF804FB 		ldr	pc, [sp], #4
 9838              		.cfi_endproc
 9839              	.LFE91:
 9841 001a 00BF     		.section	.text.get_reg_n_int_sgn,"ax",%progbits
 9842              		.align	1
 9843              		.p2align 2,,3
 9844              		.global	get_reg_n_int_sgn
 9845              		.syntax unified
ARM GAS  /tmp/cc0UaEmF.s 			page 312


 9846              		.thumb
 9847              		.thumb_func
 9848              		.fpu fpv4-sp-d16
 9850              	get_reg_n_int_sgn:
 9851              	.LVL735:
 9852              	.LFB92:
1242:src/xeq.c     **** 	if (is_intmode()) {
 9853              		.loc 1 1242 63 is_stmt 1 view -0
 9854              		.cfi_startproc
 9855              		@ args = 0, pretend = 0, frame = 40
 9856              		@ frame_needed = 0, uses_anonymous_args = 0
1243:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 9857              		.loc 1 1243 2 view .LVU2606
1243:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 9858              		.loc 1 1243 6 is_stmt 0 view .LVU2607
 9859 0000 0C4B     		ldr	r3, .L729
1242:src/xeq.c     **** 	if (is_intmode()) {
 9860              		.loc 1 1242 63 view .LVU2608
 9861 0002 10B5     		push	{r4, lr}
 9862              		.cfi_def_cfa_offset 8
 9863              		.cfi_offset 4, -8
 9864              		.cfi_offset 14, -4
1243:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 9865              		.loc 1 1243 6 view .LVU2609
 9866 0004 1B68     		ldr	r3, [r3]
 9867 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1243:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 9868              		.loc 1 1243 5 view .LVU2610
 9869 000a DB07     		lsls	r3, r3, #31
1242:src/xeq.c     **** 	if (is_intmode()) {
 9870              		.loc 1 1242 63 view .LVU2611
 9871 000c 8AB0     		sub	sp, sp, #40
 9872              		.cfi_def_cfa_offset 48
1242:src/xeq.c     **** 	if (is_intmode()) {
 9873              		.loc 1 1242 63 view .LVU2612
 9874 000e 0C46     		mov	r4, r1
1243:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 9875              		.loc 1 1243 5 view .LVU2613
 9876 0010 06D5     		bpl	.L726
 9877              	.LVL736:
 9878              	.LBB2064:
 9879              	.LBI2064:
1242:src/xeq.c     **** 	if (is_intmode()) {
 9880              		.loc 1 1242 24 is_stmt 1 view .LVU2614
 9881              	.LBB2065:
1244:src/xeq.c     **** 	} else {
 9882              		.loc 1 1244 3 view .LVU2615
1244:src/xeq.c     **** 	} else {
 9883              		.loc 1 1244 10 is_stmt 0 view .LVU2616
 9884 0012 FFF7FEFF 		bl	get_reg_n_int
 9885              	.LVL737:
1244:src/xeq.c     **** 	} else {
 9886              		.loc 1 1244 10 view .LVU2617
 9887 0016 2246     		mov	r2, r4
 9888 0018 FFF7FEFF 		bl	extract_value
 9889              	.LVL738:
1244:src/xeq.c     **** 	} else {
ARM GAS  /tmp/cc0UaEmF.s 			page 313


 9890              		.loc 1 1244 10 view .LVU2618
 9891              	.LBE2065:
 9892              	.LBE2064:
1251:src/xeq.c     **** 
 9893              		.loc 1 1251 1 view .LVU2619
 9894 001c 0AB0     		add	sp, sp, #40
 9895              		.cfi_remember_state
 9896              		.cfi_def_cfa_offset 8
 9897              		@ sp needed
 9898 001e 10BD     		pop	{r4, pc}
 9899              	.LVL739:
 9900              	.L726:
 9901              		.cfi_restore_state
1251:src/xeq.c     **** 
 9902              		.loc 1 1251 1 view .LVU2620
 9903 0020 0146     		mov	r1, r0
 9904              	.LVL740:
 9905              	.LBB2066:
1246:src/xeq.c     **** 
 9906              		.loc 1 1246 3 is_stmt 1 view .LVU2621
1248:src/xeq.c     **** 		return dn_to_ull(&n, sgn);
 9907              		.loc 1 1248 3 view .LVU2622
 9908 0022 01A8     		add	r0, sp, #4
 9909              	.LVL741:
1248:src/xeq.c     **** 		return dn_to_ull(&n, sgn);
 9910              		.loc 1 1248 3 is_stmt 0 view .LVU2623
 9911 0024 FFF7FEFF 		bl	getRegister
 9912              	.LVL742:
1249:src/xeq.c     **** 	}
 9913              		.loc 1 1249 3 is_stmt 1 view .LVU2624
1249:src/xeq.c     **** 	}
 9914              		.loc 1 1249 10 is_stmt 0 view .LVU2625
 9915 0028 2146     		mov	r1, r4
 9916 002a 01A8     		add	r0, sp, #4
 9917 002c FFF7FEFF 		bl	dn_to_ull
 9918              	.LVL743:
 9919              	.LBE2066:
1251:src/xeq.c     **** 
 9920              		.loc 1 1251 1 view .LVU2626
 9921 0030 0AB0     		add	sp, sp, #40
 9922              		.cfi_def_cfa_offset 8
 9923              		@ sp needed
 9924 0032 10BD     		pop	{r4, pc}
 9925              	.LVL744:
 9926              	.L730:
1251:src/xeq.c     **** 
 9927              		.loc 1 1251 1 view .LVU2627
 9928              		.align	2
 9929              	.L729:
 9930 0034 00000000 		.word	main_ram
 9931              		.cfi_endproc
 9932              	.LFE92:
 9934              		.section	.text.get_keycode_from_reg,"ax",%progbits
 9935              		.align	1
 9936              		.p2align 2,,3
 9937              		.syntax unified
 9938              		.thumb
ARM GAS  /tmp/cc0UaEmF.s 			page 314


 9939              		.thumb_func
 9940              		.fpu fpv4-sp-d16
 9942              	get_keycode_from_reg:
 9943              	.LVL745:
 9944              	.LFB136:
1855:src/xeq.c     **** 	int sgn;
 9945              		.loc 1 1855 1 is_stmt 1 view -0
 9946              		.cfi_startproc
 9947              		@ args = 0, pretend = 0, frame = 8
 9948              		@ frame_needed = 0, uses_anonymous_args = 0
1856:src/xeq.c     **** 	const int c = row_column_to_keycode((int) get_reg_n_int_sgn((int) n, &sgn));
 9949              		.loc 1 1856 2 view .LVU2629
1857:src/xeq.c     **** 	if ( c < 0 )
 9950              		.loc 1 1857 2 view .LVU2630
1855:src/xeq.c     **** 	int sgn;
 9951              		.loc 1 1855 1 is_stmt 0 view .LVU2631
 9952 0000 00B5     		push	{lr}
 9953              		.cfi_def_cfa_offset 4
 9954              		.cfi_offset 14, -4
 9955 0002 83B0     		sub	sp, sp, #12
 9956              		.cfi_def_cfa_offset 16
1857:src/xeq.c     **** 	if ( c < 0 )
 9957              		.loc 1 1857 44 view .LVU2632
 9958 0004 01A9     		add	r1, sp, #4
 9959 0006 FFF7FEFF 		bl	get_reg_n_int_sgn
 9960              	.LVL746:
1857:src/xeq.c     **** 	if ( c < 0 )
 9961              		.loc 1 1857 16 view .LVU2633
 9962 000a FFF7FEFF 		bl	row_column_to_keycode
 9963              	.LVL747:
1858:src/xeq.c     **** 		report_err(ERR_RANGE);
 9964              		.loc 1 1858 2 is_stmt 1 view .LVU2634
1858:src/xeq.c     **** 		report_err(ERR_RANGE);
 9965              		.loc 1 1858 5 is_stmt 0 view .LVU2635
 9966 000e 0028     		cmp	r0, #0
1858:src/xeq.c     **** 		report_err(ERR_RANGE);
 9967              		.loc 1 1858 5 view .LVU2636
 9968 0010 02DB     		blt	.L734
 9969              	.L731:
1861:src/xeq.c     **** 
 9970              		.loc 1 1861 1 view .LVU2637
 9971 0012 03B0     		add	sp, sp, #12
 9972              		.cfi_remember_state
 9973              		.cfi_def_cfa_offset 4
 9974              		@ sp needed
 9975 0014 5DF804FB 		ldr	pc, [sp], #4
 9976              	.L734:
 9977              		.cfi_restore_state
 9978              	.LBB2073:
 9979              	.LBI2073:
1854:src/xeq.c     **** {
 9980              		.loc 1 1854 12 is_stmt 1 view .LVU2638
 9981              	.LVL748:
 9982              	.LBB2074:
1859:src/xeq.c     **** 	return c;
 9983              		.loc 1 1859 3 view .LVU2639
 9984              	.LBB2075:
ARM GAS  /tmp/cc0UaEmF.s 			page 315


 9985              	.LBI2075:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 9986              		.loc 1 537 5 view .LVU2640
 9987              	.LBB2076:
 538:src/xeq.c     **** 		Error = e;
 9988              		.loc 1 538 2 view .LVU2641
 538:src/xeq.c     **** 		Error = e;
 9989              		.loc 1 538 12 is_stmt 0 view .LVU2642
 9990 0018 044B     		ldr	r3, .L735
 538:src/xeq.c     **** 		Error = e;
 9991              		.loc 1 538 5 view .LVU2643
 9992 001a 1A68     		ldr	r2, [r3]
 9993 001c 002A     		cmp	r2, #0
 9994 001e F8D1     		bne	.L731
 9995              	.LVL749:
 9996              	.LBB2077:
 9997              	.LBI2077:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 9998              		.loc 1 537 5 is_stmt 1 view .LVU2644
 9999              	.LBB2078:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 10000              		.loc 1 539 3 view .LVU2645
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 10001              		.loc 1 539 9 is_stmt 0 view .LVU2646
 10002 0020 0822     		movs	r2, #8
 10003 0022 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 10004              		.loc 1 540 3 is_stmt 1 view .LVU2647
 10005              	.LVL750:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 10006              		.loc 1 540 3 is_stmt 0 view .LVU2648
 10007              	.LBE2078:
 10008              	.LBE2077:
 10009              	.LBE2076:
 10010              	.LBE2075:
 10011              	.LBE2074:
 10012              	.LBE2073:
1860:src/xeq.c     **** }
 10013              		.loc 1 1860 2 is_stmt 1 view .LVU2649
1861:src/xeq.c     **** 
 10014              		.loc 1 1861 1 is_stmt 0 view .LVU2650
 10015 0024 03B0     		add	sp, sp, #12
 10016              		.cfi_def_cfa_offset 4
 10017              		@ sp needed
 10018 0026 5DF804FB 		ldr	pc, [sp], #4
 10019              	.L736:
 10020 002a 00BF     		.align	2
 10021              	.L735:
 10022 002c 00000000 		.word	Error
 10023              		.cfi_endproc
 10024              	.LFE136:
 10026              		.section	.text.getX_int,"ax",%progbits
 10027              		.align	1
 10028              		.p2align 2,,3
 10029              		.global	getX_int
 10030              		.syntax unified
 10031              		.thumb
ARM GAS  /tmp/cc0UaEmF.s 			page 316


 10032              		.thumb_func
 10033              		.fpu fpv4-sp-d16
 10035              	getX_int:
 10036              	.LFB93:
1256:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 10037              		.loc 1 1256 30 is_stmt 1 view -0
 10038              		.cfi_startproc
 10039              		@ args = 0, pretend = 0, frame = 0
 10040              		@ frame_needed = 0, uses_anonymous_args = 0
 10041              		@ link register save eliminated.
1257:src/xeq.c     **** }
 10042              		.loc 1 1257 2 view .LVU2652
1257:src/xeq.c     **** }
 10043              		.loc 1 1257 9 is_stmt 0 view .LVU2653
 10044 0000 6420     		movs	r0, #100
 10045 0002 FFF7FEBF 		b	get_reg_n_int
 10046              	.LVL751:
 10047              		.cfi_endproc
 10048              	.LFE93:
 10050 0006 00BF     		.section	.text.getX_int_sgn,"ax",%progbits
 10051              		.align	1
 10052              		.p2align 2,,3
 10053              		.global	getX_int_sgn
 10054              		.syntax unified
 10055              		.thumb
 10056              		.thumb_func
 10057              		.fpu fpv4-sp-d16
 10059              	getX_int_sgn:
 10060              	.LVL752:
 10061              	.LFB94:
1260:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 10062              		.loc 1 1260 47 is_stmt 1 view -0
 10063              		.cfi_startproc
 10064              		@ args = 0, pretend = 0, frame = 0
 10065              		@ frame_needed = 0, uses_anonymous_args = 0
 10066              		@ link register save eliminated.
1261:src/xeq.c     **** }
 10067              		.loc 1 1261 2 view .LVU2655
1260:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 10068              		.loc 1 1260 47 is_stmt 0 view .LVU2656
 10069 0000 0146     		mov	r1, r0
1261:src/xeq.c     **** }
 10070              		.loc 1 1261 9 view .LVU2657
 10071 0002 6420     		movs	r0, #100
 10072              	.LVL753:
1261:src/xeq.c     **** }
 10073              		.loc 1 1261 9 view .LVU2658
 10074 0004 FFF7FEBF 		b	get_reg_n_int_sgn
 10075              	.LVL754:
1261:src/xeq.c     **** }
 10076              		.loc 1 1261 9 view .LVU2659
 10077              		.cfi_endproc
 10078              	.LFE94:
 10080              		.section	.text.set_reg_n_int_sgn,"ax",%progbits
 10081              		.align	1
 10082              		.p2align 2,,3
 10083              		.global	set_reg_n_int_sgn
ARM GAS  /tmp/cc0UaEmF.s 			page 317


 10084              		.syntax unified
 10085              		.thumb
 10086              		.thumb_func
 10087              		.fpu fpv4-sp-d16
 10089              	set_reg_n_int_sgn:
 10090              	.LVL755:
 10091              	.LFB96:
1281:src/xeq.c     **** 	if (is_intmode()) {
 10092              		.loc 1 1281 72 is_stmt 1 view -0
 10093              		.cfi_startproc
 10094              		@ args = 4, pretend = 0, frame = 40
 10095              		@ frame_needed = 0, uses_anonymous_args = 0
1282:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10096              		.loc 1 1282 2 view .LVU2661
1282:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10097              		.loc 1 1282 6 is_stmt 0 view .LVU2662
 10098 0000 1749     		ldr	r1, .L749
1281:src/xeq.c     **** 	if (is_intmode()) {
 10099              		.loc 1 1281 72 view .LVU2663
 10100 0002 30B5     		push	{r4, r5, lr}
 10101              		.cfi_def_cfa_offset 12
 10102              		.cfi_offset 4, -12
 10103              		.cfi_offset 5, -8
 10104              		.cfi_offset 14, -4
1282:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10105              		.loc 1 1282 6 view .LVU2664
 10106 0004 0968     		ldr	r1, [r1]
 10107 0006 91F8E857 		ldrb	r5, [r1, #2024]	@ zero_extendqisi2
1282:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10108              		.loc 1 1282 5 view .LVU2665
 10109 000a E907     		lsls	r1, r5, #31
1281:src/xeq.c     **** 	if (is_intmode()) {
 10110              		.loc 1 1281 72 view .LVU2666
 10111 000c 8BB0     		sub	sp, sp, #44
 10112              		.cfi_def_cfa_offset 56
1281:src/xeq.c     **** 	if (is_intmode()) {
 10113              		.loc 1 1281 72 view .LVU2667
 10114 000e 0446     		mov	r4, r0
1282:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10115              		.loc 1 1282 5 view .LVU2668
 10116 0010 11D5     		bpl	.L740
 10117              	.LVL756:
1282:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10118              		.loc 1 1282 5 view .LVU2669
 10119 0012 1046     		mov	r0, r2
 10120              	.LVL757:
1282:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10121              		.loc 1 1282 5 view .LVU2670
 10122 0014 1946     		mov	r1, r3
 10123              	.LVL758:
 10124              	.LBB2085:
 10125              	.LBI2085:
1281:src/xeq.c     **** 	if (is_intmode()) {
 10126              		.loc 1 1281 6 is_stmt 1 view .LVU2671
 10127              	.LBB2086:
1283:src/xeq.c     **** 	} else {
 10128              		.loc 1 1283 3 view .LVU2672
ARM GAS  /tmp/cc0UaEmF.s 			page 318


 10129 0016 0E9A     		ldr	r2, [sp, #56]
 10130              	.LVL759:
1283:src/xeq.c     **** 	} else {
 10131              		.loc 1 1283 3 is_stmt 0 view .LVU2673
 10132 0018 FFF7FEFF 		bl	build_value
 10133              	.LVL760:
1283:src/xeq.c     **** 	} else {
 10134              		.loc 1 1283 3 view .LVU2674
 10135 001c 0B46     		mov	r3, r1
 10136 001e 0246     		mov	r2, r0
 10137              	.LBB2087:
 10138              	.LBB2088:
1237:src/xeq.c     **** }
 10139              		.loc 1 1237 8 view .LVU2675
 10140 0020 2046     		mov	r0, r4
 10141 0022 CDE90023 		strd	r2, [sp]
 10142              	.LVL761:
1237:src/xeq.c     **** }
 10143              		.loc 1 1237 8 view .LVU2676
 10144              	.LBE2088:
 10145              	.LBI2087:
1236:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 10146              		.loc 1 1236 6 is_stmt 1 view .LVU2677
 10147              	.LBB2089:
1237:src/xeq.c     **** }
 10148              		.loc 1 1237 2 view .LVU2678
1237:src/xeq.c     **** }
 10149              		.loc 1 1237 8 is_stmt 0 view .LVU2679
 10150 0026 FFF7FEFF 		bl	get_reg_n
 10151              	.LVL762:
1237:src/xeq.c     **** }
 10152              		.loc 1 1237 2 view .LVU2680
 10153 002a 0822     		movs	r2, #8
 10154 002c 6946     		mov	r1, sp
 10155 002e FFF7FEFF 		bl	xcopy
 10156              	.LVL763:
1237:src/xeq.c     **** }
 10157              		.loc 1 1237 2 view .LVU2681
 10158              	.LBE2089:
 10159              	.LBE2087:
 10160              	.LBE2086:
 10161              	.LBE2085:
1292:src/xeq.c     **** 
 10162              		.loc 1 1292 1 view .LVU2682
 10163 0032 0BB0     		add	sp, sp, #44
 10164              		.cfi_remember_state
 10165              		.cfi_def_cfa_offset 12
 10166              		@ sp needed
 10167 0034 30BD     		pop	{r4, r5, pc}
 10168              	.LVL764:
 10169              	.L740:
 10170              		.cfi_restore_state
 10171              	.LBB2090:
1285:src/xeq.c     **** 
 10172              		.loc 1 1285 3 is_stmt 1 view .LVU2683
1287:src/xeq.c     **** 		if (sgn)
 10173              		.loc 1 1287 3 view .LVU2684
ARM GAS  /tmp/cc0UaEmF.s 			page 319


 10174 0036 6846     		mov	r0, sp
 10175              	.LVL765:
1287:src/xeq.c     **** 		if (sgn)
 10176              		.loc 1 1287 3 is_stmt 0 view .LVU2685
 10177 0038 FFF7FEFF 		bl	ullint_to_dn
 10178              	.LVL766:
1288:src/xeq.c     **** 			dn_minus(&t, &t);
 10179              		.loc 1 1288 3 is_stmt 1 view .LVU2686
1288:src/xeq.c     **** 			dn_minus(&t, &t);
 10180              		.loc 1 1288 6 is_stmt 0 view .LVU2687
 10181 003c 0E9B     		ldr	r3, [sp, #56]
 10182 003e 2BB9     		cbnz	r3, .L747
1290:src/xeq.c     **** 	}
 10183              		.loc 1 1290 3 is_stmt 1 view .LVU2688
 10184 0040 6946     		mov	r1, sp
 10185 0042 2046     		mov	r0, r4
 10186 0044 FFF7FEFF 		bl	setRegister
 10187              	.LVL767:
 10188              	.L748:
1290:src/xeq.c     **** 	}
 10189              		.loc 1 1290 3 is_stmt 0 view .LVU2689
 10190              	.LBE2090:
1292:src/xeq.c     **** 
 10191              		.loc 1 1292 1 view .LVU2690
 10192 0048 0BB0     		add	sp, sp, #44
 10193              		.cfi_remember_state
 10194              		.cfi_def_cfa_offset 12
 10195              		@ sp needed
 10196 004a 30BD     		pop	{r4, r5, pc}
 10197              	.LVL768:
 10198              	.L747:
 10199              		.cfi_restore_state
 10200              	.LBB2091:
1289:src/xeq.c     **** 		setRegister(index, &t);
 10201              		.loc 1 1289 4 is_stmt 1 view .LVU2691
 10202 004c 6946     		mov	r1, sp
 10203 004e 6846     		mov	r0, sp
 10204 0050 FFF7FEFF 		bl	dn_minus
 10205              	.LVL769:
1290:src/xeq.c     **** 	}
 10206              		.loc 1 1290 3 view .LVU2692
 10207 0054 6946     		mov	r1, sp
 10208 0056 2046     		mov	r0, r4
 10209 0058 FFF7FEFF 		bl	setRegister
 10210              	.LVL770:
 10211 005c F4E7     		b	.L748
 10212              	.L750:
 10213 005e 00BF     		.align	2
 10214              	.L749:
 10215 0060 00000000 		.word	main_ram
 10216              	.LBE2091:
 10217              		.cfi_endproc
 10218              	.LFE96:
 10220              		.section	.text.op_roundingmode,"ax",%progbits
 10221              		.align	1
 10222              		.p2align 2,,3
 10223              		.global	op_roundingmode
ARM GAS  /tmp/cc0UaEmF.s 			page 320


 10224              		.syntax unified
 10225              		.thumb
 10226              		.thumb_func
 10227              		.fpu fpv4-sp-d16
 10229              	op_roundingmode:
 10230              	.LVL771:
 10231              	.LFB34:
 610:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 10232              		.loc 1 610 37 view -0
 10233              		.cfi_startproc
 10234              		@ args = 0, pretend = 0, frame = 0
 10235              		@ frame_needed = 0, uses_anonymous_args = 0
 611:src/xeq.c     **** }
 10236              		.loc 1 611 2 view .LVU2694
 10237              	.LBB2092:
 10238              	.LBI2092:
1323:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 10239              		.loc 1 1323 6 view .LVU2695
 10240              	.LBB2093:
1324:src/xeq.c     **** }
 10241              		.loc 1 1324 2 view .LVU2696
 10242              	.LBE2093:
 10243              	.LBE2092:
 610:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 10244              		.loc 1 610 37 is_stmt 0 view .LVU2697
 10245 0000 00B5     		push	{lr}
 10246              		.cfi_def_cfa_offset 4
 10247              		.cfi_offset 14, -4
 611:src/xeq.c     **** }
 10248              		.loc 1 611 21 view .LVU2698
 10249 0002 084B     		ldr	r3, .L753
 10250              	.LVL772:
 611:src/xeq.c     **** }
 10251              		.loc 1 611 21 view .LVU2699
 10252 0004 1B68     		ldr	r3, [r3]
 10253              	.LVL773:
 611:src/xeq.c     **** }
 10254              		.loc 1 611 21 view .LVU2700
 10255 0006 93F8EB27 		ldrb	r2, [r3, #2027]	@ zero_extendqisi2
 610:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 10256              		.loc 1 610 37 view .LVU2701
 10257 000a 83B0     		sub	sp, sp, #12
 10258              		.cfi_def_cfa_offset 16
 10259              	.LBB2096:
 10260              	.LBB2094:
1324:src/xeq.c     **** }
 10261              		.loc 1 1324 2 view .LVU2702
 10262 000c 0021     		movs	r1, #0
 10263              	.LBE2094:
 10264              	.LBE2096:
 611:src/xeq.c     **** }
 10265              		.loc 1 611 21 view .LVU2703
 10266 000e C2F30212 		ubfx	r2, r2, #4, #3
 10267              	.LBB2097:
 10268              	.LBB2095:
1324:src/xeq.c     **** }
 10269              		.loc 1 1324 2 view .LVU2704
ARM GAS  /tmp/cc0UaEmF.s 			page 321


 10270 0012 D2B2     		uxtb	r2, r2
 10271 0014 0023     		movs	r3, #0
 10272              	.LVL774:
1324:src/xeq.c     **** }
 10273              		.loc 1 1324 2 view .LVU2705
 10274 0016 0091     		str	r1, [sp]
 10275              	.LVL775:
1324:src/xeq.c     **** }
 10276              		.loc 1 1324 2 view .LVU2706
 10277 0018 6420     		movs	r0, #100
 10278              	.LVL776:
1324:src/xeq.c     **** }
 10279              		.loc 1 1324 2 view .LVU2707
 10280 001a FFF7FEFF 		bl	set_reg_n_int_sgn
 10281              	.LVL777:
1324:src/xeq.c     **** }
 10282              		.loc 1 1324 2 view .LVU2708
 10283              	.LBE2095:
 10284              	.LBE2097:
 612:src/xeq.c     **** 
 10285              		.loc 1 612 1 view .LVU2709
 10286 001e 03B0     		add	sp, sp, #12
 10287              		.cfi_def_cfa_offset 4
 10288              		@ sp needed
 10289 0020 5DF804FB 		ldr	pc, [sp], #4
 10290              	.L754:
 10291              		.align	2
 10292              	.L753:
 10293 0024 00000000 		.word	main_ram
 10294              		.cfi_endproc
 10295              	.LFE34:
 10297              		.section	.text.register_from_int,"ax",%progbits
 10298              		.align	1
 10299              		.p2align 2,,3
 10300              		.syntax unified
 10301              		.thumb
 10302              		.thumb_func
 10303              		.fpu fpv4-sp-d16
 10305              	register_from_int:
 10306              	.LVL778:
 10307              	.LFB97:
1299:src/xeq.c     **** 	int sgn;
 10308              		.loc 1 1299 69 is_stmt 1 view -0
 10309              		.cfi_startproc
 10310              		@ args = 0, pretend = 0, frame = 8
 10311              		@ frame_needed = 0, uses_anonymous_args = 0
1300:src/xeq.c     **** 	unsigned long long int val;
 10312              		.loc 1 1300 2 view .LVU2711
1301:src/xeq.c     **** 	const int xin = XromFlags.xIN;
 10313              		.loc 1 1301 2 view .LVU2712
1302:src/xeq.c     **** 	
 10314              		.loc 1 1302 2 view .LVU2713
1299:src/xeq.c     **** 	int sgn;
 10315              		.loc 1 1299 69 is_stmt 0 view .LVU2714
 10316 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 10317              		.cfi_def_cfa_offset 28
 10318              		.cfi_offset 4, -28
ARM GAS  /tmp/cc0UaEmF.s 			page 322


 10319              		.cfi_offset 5, -24
 10320              		.cfi_offset 6, -20
 10321              		.cfi_offset 7, -16
 10322              		.cfi_offset 8, -12
 10323              		.cfi_offset 9, -8
 10324              		.cfi_offset 14, -4
1302:src/xeq.c     **** 	
 10325              		.loc 1 1302 27 view .LVU2715
 10326 0004 154C     		ldr	r4, .L761
 10327 0006 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
1299:src/xeq.c     **** 	int sgn;
 10328              		.loc 1 1299 69 view .LVU2716
 10329 0008 0546     		mov	r5, r0
 10330 000a 85B0     		sub	sp, sp, #20
 10331              		.cfi_def_cfa_offset 48
1299:src/xeq.c     **** 	int sgn;
 10332              		.loc 1 1299 69 view .LVU2717
 10333 000c 0846     		mov	r0, r1
 10334              	.LVL779:
1302:src/xeq.c     **** 	
 10335              		.loc 1 1302 27 view .LVU2718
 10336 000e DE09     		lsrs	r6, r3, #7
 10337              	.LVL780:
1304:src/xeq.c     **** 		XromFlags.xIN = 0;
 10338              		.loc 1 1304 2 is_stmt 1 view .LVU2719
1304:src/xeq.c     **** 		XromFlags.xIN = 0;
 10339              		.loc 1 1304 5 is_stmt 0 view .LVU2720
 10340 0010 12B1     		cbz	r2, .L756
1305:src/xeq.c     **** 	UState.intm = 1;
 10341              		.loc 1 1305 3 is_stmt 1 view .LVU2721
1305:src/xeq.c     **** 	UState.intm = 1;
 10342              		.loc 1 1305 17 is_stmt 0 view .LVU2722
 10343 0012 6FF3C713 		bfc	r3, #7, #1
 10344              	.LVL781:
1305:src/xeq.c     **** 	UState.intm = 1;
 10345              		.loc 1 1305 17 view .LVU2723
 10346 0016 6370     		strb	r3, [r4, #1]
 10347              	.LVL782:
 10348              	.L756:
1306:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 10349              		.loc 1 1306 2 is_stmt 1 view .LVU2724
1306:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 10350              		.loc 1 1306 14 is_stmt 0 view .LVU2725
 10351 0018 114F     		ldr	r7, .L761+4
 10352 001a 3A68     		ldr	r2, [r7]
 10353              	.LVL783:
1306:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 10354              		.loc 1 1306 14 view .LVU2726
 10355 001c 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
 10356 0020 43F00103 		orr	r3, r3, #1
 10357 0024 82F8E837 		strb	r3, [r2, #2024]
1307:src/xeq.c     **** 
 10358              		.loc 1 1307 2 is_stmt 1 view .LVU2727
1307:src/xeq.c     **** 
 10359              		.loc 1 1307 8 is_stmt 0 view .LVU2728
 10360 0028 03A9     		add	r1, sp, #12
 10361              	.LVL784:
ARM GAS  /tmp/cc0UaEmF.s 			page 323


1307:src/xeq.c     **** 
 10362              		.loc 1 1307 8 view .LVU2729
 10363 002a FFF7FEFF 		bl	get_reg_n_int_sgn
 10364              	.LVL785:
1309:src/xeq.c     **** 	UState.intm = 0;
 10365              		.loc 1 1309 16 view .LVU2730
 10366 002e 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
1310:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 10367              		.loc 1 1310 14 view .LVU2731
 10368 0030 3B68     		ldr	r3, [r7]
1309:src/xeq.c     **** 	UState.intm = 0;
 10369              		.loc 1 1309 16 view .LVU2732
 10370 0032 66F3C712 		bfi	r2, r6, #7, #1
 10371 0036 6270     		strb	r2, [r4, #1]
1307:src/xeq.c     **** 
 10372              		.loc 1 1307 8 view .LVU2733
 10373 0038 8946     		mov	r9, r1
1310:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 10374              		.loc 1 1310 14 view .LVU2734
 10375 003a 93F8E817 		ldrb	r1, [r3, #2024]	@ zero_extendqisi2
 10376 003e 6FF30001 		bfc	r1, #0, #1
 10377 0042 83F8E817 		strb	r1, [r3, #2024]
1311:src/xeq.c     **** }
 10378              		.loc 1 1311 2 view .LVU2735
 10379 0046 039B     		ldr	r3, [sp, #12]
 10380 0048 0093     		str	r3, [sp]
1307:src/xeq.c     **** 
 10381              		.loc 1 1307 8 view .LVU2736
 10382 004a 8046     		mov	r8, r0
 10383              	.LVL786:
1309:src/xeq.c     **** 	UState.intm = 0;
 10384              		.loc 1 1309 2 is_stmt 1 view .LVU2737
1310:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 10385              		.loc 1 1310 2 view .LVU2738
1311:src/xeq.c     **** }
 10386              		.loc 1 1311 2 view .LVU2739
 10387 004c 4246     		mov	r2, r8
 10388 004e 4B46     		mov	r3, r9
 10389 0050 2846     		mov	r0, r5
 10390 0052 FFF7FEFF 		bl	set_reg_n_int_sgn
 10391              	.LVL787:
1312:src/xeq.c     **** 
 10392              		.loc 1 1312 1 is_stmt 0 view .LVU2740
 10393 0056 05B0     		add	sp, sp, #20
 10394              		.cfi_def_cfa_offset 28
 10395              		@ sp needed
 10396 0058 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 10397              	.LVL788:
 10398              	.L762:
1312:src/xeq.c     **** 
 10399              		.loc 1 1312 1 view .LVU2741
 10400              		.align	2
 10401              	.L761:
 10402 005c 00000000 		.word	XromParams
 10403 0060 00000000 		.word	main_ram
 10404              		.cfi_endproc
 10405              	.LFE97:
ARM GAS  /tmp/cc0UaEmF.s 			page 324


 10407              		.section	.text.int_from_register,"ax",%progbits
 10408              		.align	1
 10409              		.p2align 2,,3
 10410              		.syntax unified
 10411              		.thumb
 10412              		.thumb_func
 10413              		.fpu fpv4-sp-d16
 10415              	int_from_register:
 10416              	.LVL789:
 10417              	.LFB95:
1268:src/xeq.c     **** 	int sgn;
 10418              		.loc 1 1268 48 is_stmt 1 view -0
 10419              		.cfi_startproc
 10420              		@ args = 0, pretend = 0, frame = 8
 10421              		@ frame_needed = 0, uses_anonymous_args = 0
1269:src/xeq.c     **** 	unsigned long long int val;
 10422              		.loc 1 1269 2 view .LVU2743
1270:src/xeq.c     **** 	
 10423              		.loc 1 1270 2 view .LVU2744
1272:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 10424              		.loc 1 1272 2 view .LVU2745
1268:src/xeq.c     **** 	int sgn;
 10425              		.loc 1 1268 48 is_stmt 0 view .LVU2746
 10426 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 10427              		.cfi_def_cfa_offset 20
 10428              		.cfi_offset 4, -20
 10429              		.cfi_offset 5, -16
 10430              		.cfi_offset 6, -12
 10431              		.cfi_offset 7, -8
 10432              		.cfi_offset 14, -4
1272:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 10433              		.loc 1 1272 14 view .LVU2747
 10434 0002 104D     		ldr	r5, .L765
 10435 0004 2B68     		ldr	r3, [r5]
 10436 0006 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
1268:src/xeq.c     **** 	int sgn;
 10437              		.loc 1 1268 48 view .LVU2748
 10438 000a 85B0     		sub	sp, sp, #20
 10439              		.cfi_def_cfa_offset 40
1272:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 10440              		.loc 1 1272 14 view .LVU2749
 10441 000c 6FF30002 		bfc	r2, #0, #1
1268:src/xeq.c     **** 	int sgn;
 10442              		.loc 1 1268 48 view .LVU2750
 10443 0010 0446     		mov	r4, r0
1272:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 10444              		.loc 1 1272 14 view .LVU2751
 10445 0012 83F8E827 		strb	r2, [r3, #2024]
1273:src/xeq.c     **** 
 10446              		.loc 1 1273 2 is_stmt 1 view .LVU2752
1273:src/xeq.c     **** 
 10447              		.loc 1 1273 8 is_stmt 0 view .LVU2753
 10448 0016 0846     		mov	r0, r1
 10449              	.LVL790:
1273:src/xeq.c     **** 
 10450              		.loc 1 1273 8 view .LVU2754
 10451 0018 03A9     		add	r1, sp, #12
ARM GAS  /tmp/cc0UaEmF.s 			page 325


 10452              	.LVL791:
1273:src/xeq.c     **** 
 10453              		.loc 1 1273 8 view .LVU2755
 10454 001a FFF7FEFF 		bl	get_reg_n_int_sgn
 10455              	.LVL792:
1273:src/xeq.c     **** 
 10456              		.loc 1 1273 8 view .LVU2756
 10457 001e 0F46     		mov	r7, r1
1275:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 10458              		.loc 1 1275 14 view .LVU2757
 10459 0020 2968     		ldr	r1, [r5]
 10460 0022 91F8E837 		ldrb	r3, [r1, #2024]	@ zero_extendqisi2
 10461 0026 43F00103 		orr	r3, r3, #1
 10462 002a 81F8E837 		strb	r3, [r1, #2024]
1276:src/xeq.c     **** }
 10463              		.loc 1 1276 2 view .LVU2758
 10464 002e 039B     		ldr	r3, [sp, #12]
 10465 0030 0093     		str	r3, [sp]
1273:src/xeq.c     **** 
 10466              		.loc 1 1273 8 view .LVU2759
 10467 0032 0646     		mov	r6, r0
 10468              	.LVL793:
1275:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 10469              		.loc 1 1275 2 is_stmt 1 view .LVU2760
1276:src/xeq.c     **** }
 10470              		.loc 1 1276 2 view .LVU2761
 10471 0034 3246     		mov	r2, r6
 10472 0036 2046     		mov	r0, r4
 10473 0038 3B46     		mov	r3, r7
 10474 003a FFF7FEFF 		bl	set_reg_n_int_sgn
 10475              	.LVL794:
1277:src/xeq.c     **** 
 10476              		.loc 1 1277 1 is_stmt 0 view .LVU2762
 10477 003e 05B0     		add	sp, sp, #20
 10478              		.cfi_def_cfa_offset 20
 10479              		@ sp needed
 10480 0040 F0BD     		pop	{r4, r5, r6, r7, pc}
 10481              	.LVL795:
 10482              	.L766:
1277:src/xeq.c     **** 
 10483              		.loc 1 1277 1 view .LVU2763
 10484 0042 00BF     		.align	2
 10485              	.L765:
 10486 0044 00000000 		.word	main_ram
 10487              		.cfi_endproc
 10488              	.LFE95:
 10490              		.section	.text.switch_to_int,"ax",%progbits
 10491              		.align	1
 10492              		.p2align 2,,3
 10493              		.syntax unified
 10494              		.thumb
 10495              		.thumb_func
 10496              		.fpu fpv4-sp-d16
 10498              	switch_to_int:
 10499              	.LFB203:
3525:src/xeq.c     **** 	int i;
 10500              		.loc 1 3525 33 is_stmt 1 view -0
ARM GAS  /tmp/cc0UaEmF.s 			page 326


 10501              		.cfi_startproc
 10502              		@ args = 0, pretend = 0, frame = 40
 10503              		@ frame_needed = 0, uses_anonymous_args = 0
3526:src/xeq.c     **** 	int mask = StackRegMask[UState.stack_depth];
 10504              		.loc 1 3526 2 view .LVU2765
3527:src/xeq.c     **** 	const int dbl = is_dblmode();
 10505              		.loc 1 3527 2 view .LVU2766
3525:src/xeq.c     **** 	int i;
 10506              		.loc 1 3525 33 is_stmt 0 view .LVU2767
 10507 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 10508              		.cfi_def_cfa_offset 24
 10509              		.cfi_offset 4, -24
 10510              		.cfi_offset 5, -20
 10511              		.cfi_offset 6, -16
 10512              		.cfi_offset 7, -12
 10513              		.cfi_offset 8, -8
 10514              		.cfi_offset 14, -4
3527:src/xeq.c     **** 	const int dbl = is_dblmode();
 10515              		.loc 1 3527 26 view .LVU2768
 10516 0004 DFF87480 		ldr	r8, .L775+4
3527:src/xeq.c     **** 	const int dbl = is_dblmode();
 10517              		.loc 1 3527 25 view .LVU2769
 10518 0008 1B49     		ldr	r1, .L775
3527:src/xeq.c     **** 	const int dbl = is_dblmode();
 10519              		.loc 1 3527 26 view .LVU2770
 10520 000a D8F80020 		ldr	r2, [r8]
3527:src/xeq.c     **** 	const int dbl = is_dblmode();
 10521              		.loc 1 3527 32 view .LVU2771
 10522 000e 92F8EA37 		ldrb	r3, [r2, #2026]	@ zero_extendqisi2
 10523              	.LBB2098:
 10524              	.LBB2099:
 933:src/xeq.c     **** }
 10525              		.loc 1 933 24 view .LVU2772
 10526 0012 B2F8E827 		ldrh	r2, [r2, #2024]
 10527              	.LBE2099:
 10528              	.LBE2098:
3527:src/xeq.c     **** 	const int dbl = is_dblmode();
 10529              		.loc 1 3527 32 view .LVU2773
 10530 0016 C3F3C003 		ubfx	r3, r3, #3, #1
 10531              	.LBB2103:
 10532              	.LBB2100:
 933:src/xeq.c     **** }
 10533              		.loc 1 933 24 view .LVU2774
 10534 001a 44F20106 		movw	r6, #16385
 10535              	.LBE2100:
 10536              	.LBE2103:
3527:src/xeq.c     **** 	const int dbl = is_dblmode();
 10537              		.loc 1 3527 6 view .LVU2775
 10538 001e 31F81350 		ldrh	r5, [r1, r3, lsl #1]
 10539              	.LVL796:
3528:src/xeq.c     **** 
 10540              		.loc 1 3528 2 is_stmt 1 view .LVU2776
 10541              	.LBB2104:
 10542              	.LBI2098:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 10543              		.loc 1 932 5 view .LVU2777
 10544              	.LBB2101:
ARM GAS  /tmp/cc0UaEmF.s 			page 327


 933:src/xeq.c     **** }
 10545              		.loc 1 933 2 view .LVU2778
 10546              	.LBE2101:
 10547              	.LBE2104:
3525:src/xeq.c     **** 	int i;
 10548              		.loc 1 3525 33 is_stmt 0 view .LVU2779
 10549 0022 8AB0     		sub	sp, sp, #40
 10550              		.cfi_def_cfa_offset 64
 10551              	.LBB2105:
 10552              	.LBB2102:
 933:src/xeq.c     **** }
 10553              		.loc 1 933 24 view .LVU2780
 10554 0024 1640     		ands	r6, r6, r2
 10555              	.LVL797:
 933:src/xeq.c     **** }
 10556              		.loc 1 933 24 view .LVU2781
 10557              	.LBE2102:
 10558              	.LBE2105:
3530:src/xeq.c     **** 		if (mask & 0x800) {
 10559              		.loc 1 3530 2 is_stmt 1 view .LVU2782
3530:src/xeq.c     **** 		if (mask & 0x800) {
 10560              		.loc 1 3530 21 view .LVU2783
3530:src/xeq.c     **** 		if (mask & 0x800) {
 10561              		.loc 1 3530 9 is_stmt 0 view .LVU2784
 10562 0026 6F24     		movs	r4, #111
 10563 0028 07E0     		b	.L770
 10564              	.LVL798:
 10565              	.L768:
3535:src/xeq.c     **** 			// compress the other registers to save them while integer mode is active
 10566              		.loc 1 3535 11 view .LVU2785
 10567 002a B6F5804F 		cmp	r6, #16384
 10568 002e 12D0     		beq	.L773
 10569              	.L769:
3530:src/xeq.c     **** 		if (mask & 0x800) {
 10570              		.loc 1 3530 36 is_stmt 1 discriminator 2 view .LVU2786
 10571 0030 013C     		subs	r4, r4, #1
 10572              	.LVL799:
3530:src/xeq.c     **** 		if (mask & 0x800) {
 10573              		.loc 1 3530 2 is_stmt 0 discriminator 2 view .LVU2787
 10574 0032 632C     		cmp	r4, #99
3530:src/xeq.c     **** 		if (mask & 0x800) {
 10575              		.loc 1 3530 46 discriminator 2 view .LVU2788
 10576 0034 4FEA4505 		lsl	r5, r5, #1
 10577              	.LVL800:
3530:src/xeq.c     **** 		if (mask & 0x800) {
 10578              		.loc 1 3530 21 is_stmt 1 discriminator 2 view .LVU2789
3530:src/xeq.c     **** 		if (mask & 0x800) {
 10579              		.loc 1 3530 2 is_stmt 0 discriminator 2 view .LVU2790
 10580 0038 0AD0     		beq	.L774
 10581              	.LVL801:
 10582              	.L770:
3531:src/xeq.c     **** 			// register belongs to stack
 10583              		.loc 1 3531 3 is_stmt 1 view .LVU2791
3535:src/xeq.c     **** 			// compress the other registers to save them while integer mode is active
 10584              		.loc 1 3535 8 view .LVU2792
3531:src/xeq.c     **** 			// register belongs to stack
 10585              		.loc 1 3531 6 is_stmt 0 view .LVU2793
ARM GAS  /tmp/cc0UaEmF.s 			page 328


 10586 003a 2B05     		lsls	r3, r5, #20
 10587 003c F5D5     		bpl	.L768
3533:src/xeq.c     **** 		}
 10588              		.loc 1 3533 4 is_stmt 1 view .LVU2794
 10589 003e 2146     		mov	r1, r4
 10590 0040 2046     		mov	r0, r4
3530:src/xeq.c     **** 		if (mask & 0x800) {
 10591              		.loc 1 3530 36 is_stmt 0 view .LVU2795
 10592 0042 013C     		subs	r4, r4, #1
 10593              	.LVL802:
3533:src/xeq.c     **** 		}
 10594              		.loc 1 3533 4 view .LVU2796
 10595 0044 FFF7FEFF 		bl	int_from_register
 10596              	.LVL803:
3530:src/xeq.c     **** 		if (mask & 0x800) {
 10597              		.loc 1 3530 36 is_stmt 1 view .LVU2797
3530:src/xeq.c     **** 		if (mask & 0x800) {
 10598              		.loc 1 3530 2 is_stmt 0 view .LVU2798
 10599 0048 632C     		cmp	r4, #99
3530:src/xeq.c     **** 		if (mask & 0x800) {
 10600              		.loc 1 3530 46 view .LVU2799
 10601 004a 4FEA4505 		lsl	r5, r5, #1
 10602              	.LVL804:
3530:src/xeq.c     **** 		if (mask & 0x800) {
 10603              		.loc 1 3530 21 is_stmt 1 view .LVU2800
3530:src/xeq.c     **** 		if (mask & 0x800) {
 10604              		.loc 1 3530 2 is_stmt 0 view .LVU2801
 10605 004e F4D1     		bne	.L770
 10606              	.L774:
3540:src/xeq.c     **** 
 10607              		.loc 1 3540 1 view .LVU2802
 10608 0050 0AB0     		add	sp, sp, #40
 10609              		.cfi_remember_state
 10610              		.cfi_def_cfa_offset 24
 10611              		@ sp needed
 10612 0052 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 10613              	.LVL805:
 10614              	.L773:
 10615              		.cfi_restore_state
3537:src/xeq.c     **** 		}
 10616              		.loc 1 3537 4 is_stmt 1 view .LVU2803
3537:src/xeq.c     **** 		}
 10617              		.loc 1 3537 26 is_stmt 0 view .LVU2804
 10618 0056 D8F80030 		ldr	r3, [r8]
3537:src/xeq.c     **** 		}
 10619              		.loc 1 3537 38 view .LVU2805
 10620 005a 2046     		mov	r0, r4
3537:src/xeq.c     **** 		}
 10621              		.loc 1 3537 26 view .LVU2806
 10622 005c 03F58663 		add	r3, r3, #1072
3537:src/xeq.c     **** 		}
 10623              		.loc 1 3537 4 view .LVU2807
 10624 0060 03EBC407 		add	r7, r3, r4, lsl #3
3537:src/xeq.c     **** 		}
 10625              		.loc 1 3537 38 view .LVU2808
 10626 0064 FFF7FEFF 		bl	get_reg_n
 10627              	.LVL806:
ARM GAS  /tmp/cc0UaEmF.s 			page 329


 10628              	.LBB2106:
 10629              	.LBI2106:
 639:src/xeq.c     **** 	decNumber temp;
 10630              		.loc 1 639 6 is_stmt 1 view .LVU2809
 10631              	.LBB2107:
 640:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 10632              		.loc 1 640 2 view .LVU2810
 641:src/xeq.c     **** }
 10633              		.loc 1 641 2 view .LVU2811
 641:src/xeq.c     **** }
 10634              		.loc 1 641 24 is_stmt 0 view .LVU2812
 10635 0068 01A9     		add	r1, sp, #4
 10636 006a FFF7FEFF 		bl	decimal128ToNumber
 10637              	.LVL807:
 641:src/xeq.c     **** }
 10638              		.loc 1 641 24 view .LVU2813
 10639 006e 0146     		mov	r1, r0
 641:src/xeq.c     **** }
 10640              		.loc 1 641 2 view .LVU2814
 10641 0070 3846     		mov	r0, r7
 10642 0072 FFF7FEFF 		bl	packed_from_number
 10643              	.LVL808:
 642:src/xeq.c     **** 
 10644              		.loc 1 642 1 view .LVU2815
 10645 0076 DBE7     		b	.L769
 10646              	.L776:
 10647              		.align	2
 10648              	.L775:
 10649 0078 00000000 		.word	.LANCHOR3
 10650 007c 00000000 		.word	main_ram
 10651              	.LBE2107:
 10652              	.LBE2106:
 10653              		.cfi_endproc
 10654              	.LFE203:
 10656              		.section	.text.process_cmdline.part.0,"ax",%progbits
 10657              		.align	1
 10658              		.p2align 2,,3
 10659              		.syntax unified
 10660              		.thumb
 10661              		.thumb_func
 10662              		.fpu fpv4-sp-d16
 10664              	process_cmdline.part.0:
 10665              	.LFB284:
1040:src/xeq.c     **** 	decNumber a, b, x, t;
 10666              		.loc 1 1040 6 is_stmt 1 view -0
 10667              		.cfi_startproc
 10668              		@ args = 0, pretend = 0, frame = 168
 10669              		@ frame_needed = 0, uses_anonymous_args = 0
 10670              	.LBB2130:
1044:src/xeq.c     **** 		const unsigned int cmdlinedot = CmdLineDot;
 10671              		.loc 1 1044 3 view .LVU2817
 10672              	.LBE2130:
1035:src/xeq.c     **** }
 10673              		.loc 1 1035 2 view .LVU2818
 10674              	.LVL809:
 10675              	.LBB2174:
1045:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
ARM GAS  /tmp/cc0UaEmF.s 			page 330


 10676              		.loc 1 1045 3 view .LVU2819
 10677              	.LBE2174:
1040:src/xeq.c     **** 	decNumber a, b, x, t;
 10678              		.loc 1 1040 6 is_stmt 0 view .LVU2820
 10679 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 10680              		.cfi_def_cfa_offset 32
 10681              		.cfi_offset 4, -32
 10682              		.cfi_offset 5, -28
 10683              		.cfi_offset 6, -24
 10684              		.cfi_offset 7, -20
 10685              		.cfi_offset 8, -16
 10686              		.cfi_offset 9, -12
 10687              		.cfi_offset 10, -8
 10688              		.cfi_offset 14, -4
 10689              	.LBB2175:
1045:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 10690              		.loc 1 1045 35 view .LVU2821
 10691 0004 8D4C     		ldr	r4, .L816
1055:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 10692              		.loc 1 1055 7 view .LVU2822
 10693 0006 DFF84482 		ldr	r8, .L816+16
1045:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 10694              		.loc 1 1045 22 view .LVU2823
 10695 000a A57F     		ldrb	r5, [r4, #30]	@ zero_extendqisi2
 10696              	.LVL810:
1047:src/xeq.c     **** #else
 10697              		.loc 1 1047 3 is_stmt 1 view .LVU2824
1052:src/xeq.c     **** 
 10698              		.loc 1 1052 3 view .LVU2825
 10699              	.LBE2175:
1040:src/xeq.c     **** 	decNumber a, b, x, t;
 10700              		.loc 1 1040 6 is_stmt 0 view .LVU2826
 10701 000c ACB0     		sub	sp, sp, #176
 10702              		.cfi_def_cfa_offset 208
 10703              	.LBB2176:
1052:src/xeq.c     **** 
 10704              		.loc 1 1052 3 view .LVU2827
 10705 000e 04F12001 		add	r1, r4, #32
 10706 0012 1422     		movs	r2, #20
 10707 0014 02A8     		add	r0, sp, #8
 10708 0016 FFF7FEFF 		bl	xcopy
 10709              	.LVL811:
1054:src/xeq.c     **** 		if (!is_intmode()) {
 10710              		.loc 1 1054 3 is_stmt 1 view .LVU2828
1055:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 10711              		.loc 1 1055 7 is_stmt 0 view .LVU2829
 10712 001a D8F80020 		ldr	r2, [r8]
1054:src/xeq.c     **** 		if (!is_intmode()) {
 10713              		.loc 1 1054 11 view .LVU2830
 10714 001e 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
1055:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 10715              		.loc 1 1055 7 view .LVU2831
 10716 0020 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
1054:src/xeq.c     **** 		if (!is_intmode()) {
 10717              		.loc 1 1054 26 view .LVU2832
 10718 0024 2CA9     		add	r1, sp, #176
 10719 0026 1944     		add	r1, r1, r3
ARM GAS  /tmp/cc0UaEmF.s 			page 331


 10720 0028 0020     		movs	r0, #0
1055:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 10721              		.loc 1 1055 6 view .LVU2833
 10722 002a 12F00102 		ands	r2, r2, #1
1054:src/xeq.c     **** 		if (!is_intmode()) {
 10723              		.loc 1 1054 26 view .LVU2834
 10724 002e 01F8A80C 		strb	r0, [r1, #-168]
1055:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 10725              		.loc 1 1055 3 is_stmt 1 view .LVU2835
1055:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 10726              		.loc 1 1055 6 is_stmt 0 view .LVU2836
 10727 0032 16D1     		bne	.L779
1057:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 10728              		.loc 1 1057 4 is_stmt 1 view .LVU2837
1057:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 10729              		.loc 1 1057 15 is_stmt 0 view .LVU2838
 10730 0034 2CA9     		add	r1, sp, #176
1057:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 10731              		.loc 1 1057 29 view .LVU2839
 10732 0036 013B     		subs	r3, r3, #1
1057:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 10733              		.loc 1 1057 15 view .LVU2840
 10734 0038 0B44     		add	r3, r3, r1
1057:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 10735              		.loc 1 1057 40 view .LVU2841
 10736 003a 13F8A81C 		ldrb	r1, [r3, #-168]	@ zero_extendqisi2
1057:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 10737              		.loc 1 1057 7 view .LVU2842
 10738 003e 4439     		subs	r1, r1, #68
 10739 0040 0129     		cmp	r1, #1
 10740 0042 40F28B80 		bls	.L807
1059:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
 10741              		.loc 1 1059 9 is_stmt 1 view .LVU2843
1059:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
 10742              		.loc 1 1059 21 is_stmt 0 view .LVU2844
 10743 0046 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
1059:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
 10744              		.loc 1 1059 20 view .LVU2845
 10745 0048 2CAB     		add	r3, sp, #176
 10746 004a 1344     		add	r3, r3, r2
1059:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
 10747              		.loc 1 1059 12 view .LVU2846
 10748 004c 13F8A83C 		ldrb	r3, [r3, #-168]	@ zero_extendqisi2
 10749 0050 442B     		cmp	r3, #68
 10750 0052 00F0D080 		beq	.L808
 10751              	.L781:
1070:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
 10752              		.loc 1 1070 4 is_stmt 1 view .LVU2847
1070:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
 10753              		.loc 1 1070 7 is_stmt 0 view .LVU2848
 10754 0056 002A     		cmp	r2, #0
 10755 0058 40F08680 		bne	.L782
 10756              	.L813:
1075:src/xeq.c     **** #endif
 10757              		.loc 1 1075 8 view .LVU2849
 10758 005c 012D     		cmp	r5, #1
 10759 005e 00F08380 		beq	.L782
ARM GAS  /tmp/cc0UaEmF.s 			page 332


 10760              	.L779:
1080:src/xeq.c     **** 		lift_if_enabled();
 10761              		.loc 1 1080 3 is_stmt 1 view .LVU2850
 10762              	.LBB2131:
 10763              	.LBB2132:
 10764              	.LBB2133:
 10765              	.LBB2134:
 735:src/xeq.c     **** }
 10766              		.loc 1 735 15 is_stmt 0 view .LVU2851
 10767 0062 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 10768              	.LBE2134:
 10769              	.LBE2133:
 10770              	.LBE2132:
 10771              	.LBE2131:
1080:src/xeq.c     **** 		lift_if_enabled();
 10772              		.loc 1 1080 17 view .LVU2852
 10773 0064 0022     		movs	r2, #0
 10774              	.LBB2146:
 10775              	.LBB2141:
 739:src/xeq.c     **** 		lift();
 10776              		.loc 1 739 5 view .LVU2853
 10777 0066 5B06     		lsls	r3, r3, #25
 10778              	.LBE2141:
 10779              	.LBE2146:
1080:src/xeq.c     **** 		lift_if_enabled();
 10780              		.loc 1 1080 17 view .LVU2854
 10781 0068 2277     		strb	r2, [r4, #28]
1081:src/xeq.c     **** 		set_lift();
 10782              		.loc 1 1081 3 is_stmt 1 view .LVU2855
 10783              	.LBB2147:
 10784              	.LBI2131:
 738:src/xeq.c     **** 	if (get_lift())
 10785              		.loc 1 738 6 view .LVU2856
 10786              	.LBB2142:
 739:src/xeq.c     **** 		lift();
 10787              		.loc 1 739 2 view .LVU2857
 10788              	.LBB2138:
 10789              	.LBI2133:
 734:src/xeq.c     **** 	return State2.state_lift;
 10790              		.loc 1 734 12 view .LVU2858
 10791              	.LBB2135:
 735:src/xeq.c     **** }
 10792              		.loc 1 735 2 view .LVU2859
 10793              	.LBE2135:
 10794              	.LBE2138:
 739:src/xeq.c     **** 		lift();
 10795              		.loc 1 739 5 is_stmt 0 view .LVU2860
 10796 006a 00F18B80 		bmi	.L809
 10797              	.L784:
 10798              	.LBE2142:
 10799              	.LBE2147:
1082:src/xeq.c     **** 		CmdLineDot = 0;
 10800              		.loc 1 1082 3 is_stmt 1 view .LVU2861
 10801              	.LBB2148:
 10802              	.LBI2148:
 748:src/xeq.c     ****     State2.state_lift = 1;
 10803              		.loc 1 748 6 view .LVU2862
ARM GAS  /tmp/cc0UaEmF.s 			page 333


 10804              	.LBB2149:
 749:src/xeq.c     **** }
 10805              		.loc 1 749 5 view .LVU2863
 749:src/xeq.c     **** }
 10806              		.loc 1 749 23 is_stmt 0 view .LVU2864
 10807 006e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 10808              	.LBE2149:
 10809              	.LBE2148:
1085:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 10810              		.loc 1 1085 7 view .LVU2865
 10811 0070 D8F80010 		ldr	r1, [r8]
 10812              	.LBB2151:
 10813              	.LBB2150:
 749:src/xeq.c     **** }
 10814              		.loc 1 749 23 view .LVU2866
 10815 0074 43F04003 		orr	r3, r3, #64
 10816 0078 E375     		strb	r3, [r4, #23]
 10817              	.LBE2150:
 10818              	.LBE2151:
1083:src/xeq.c     **** 		CmdLineEex = 0;
 10819              		.loc 1 1083 3 is_stmt 1 view .LVU2867
1085:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 10820              		.loc 1 1085 7 is_stmt 0 view .LVU2868
 10821 007a 91F8E837 		ldrb	r3, [r1, #2024]	@ zero_extendqisi2
1083:src/xeq.c     **** 		CmdLineEex = 0;
 10822              		.loc 1 1083 14 view .LVU2869
 10823 007e 0022     		movs	r2, #0
1085:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 10824              		.loc 1 1085 6 view .LVU2870
 10825 0080 13F00103 		ands	r3, r3, #1
1083:src/xeq.c     **** 		CmdLineEex = 0;
 10826              		.loc 1 1083 14 view .LVU2871
 10827 0084 A277     		strb	r2, [r4, #30]
1084:src/xeq.c     **** 		if (is_intmode()) {
 10828              		.loc 1 1084 3 is_stmt 1 view .LVU2872
1084:src/xeq.c     **** 		if (is_intmode()) {
 10829              		.loc 1 1084 14 is_stmt 0 view .LVU2873
 10830 0086 6277     		strb	r2, [r4, #29]
1085:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 10831              		.loc 1 1085 3 is_stmt 1 view .LVU2874
1085:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 10832              		.loc 1 1085 6 is_stmt 0 view .LVU2875
 10833 0088 7FD1     		bne	.L810
1089:src/xeq.c     **** 			char *d0, *d1, *d2;
 10834              		.loc 1 1089 10 is_stmt 1 view .LVU2876
1089:src/xeq.c     **** 			char *d0, *d1, *d2;
 10835              		.loc 1 1089 13 is_stmt 0 view .LVU2877
 10836 008a 022D     		cmp	r5, #2
 10837 008c 4CD1     		bne	.L791
 10838              	.LBB2152:
1090:src/xeq.c     **** 			int neg;
 10839              		.loc 1 1090 4 is_stmt 1 view .LVU2878
1091:src/xeq.c     **** 
 10840              		.loc 1 1091 4 view .LVU2879
1093:src/xeq.c     **** 				return;
 10841              		.loc 1 1093 4 view .LVU2880
1096:src/xeq.c     **** #endif
ARM GAS  /tmp/cc0UaEmF.s 			page 334


 10842              		.loc 1 1096 4 view .LVU2881
1096:src/xeq.c     **** #endif
 10843              		.loc 1 1096 17 is_stmt 0 view .LVU2882
 10844 008e 91F8E627 		ldrb	r2, [r1, #2022]	@ zero_extendqisi2
 10845 0092 42F02002 		orr	r2, r2, #32
 10846 0096 81F8E627 		strb	r2, [r1, #2022]
1098:src/xeq.c     **** 				neg = 1;
 10847              		.loc 1 1098 4 is_stmt 1 view .LVU2883
1098:src/xeq.c     **** 				neg = 1;
 10848              		.loc 1 1098 7 is_stmt 0 view .LVU2884
 10849 009a 9DF80820 		ldrb	r2, [sp, #8]	@ zero_extendqisi2
 10850 009e 2D2A     		cmp	r2, #45
1103:src/xeq.c     **** 			}
 10851              		.loc 1 1103 8 view .LVU2885
 10852 00a0 14BF     		ite	ne
 10853 00a2 02AD     		addne	r5, sp, #8
 10854              	.LVL812:
1100:src/xeq.c     **** 			} else {
 10855              		.loc 1 1100 8 view .LVU2886
 10856 00a4 0DF10905 		addeq	r5, sp, #9
1105:src/xeq.c     **** 			*d1++ = '\0';
 10857              		.loc 1 1105 9 view .LVU2887
 10858 00a8 4FF02E01 		mov	r1, #46
 10859 00ac 2846     		mov	r0, r5
1102:src/xeq.c     **** 				d0 = cmdline;
 10860              		.loc 1 1102 9 view .LVU2888
 10861 00ae 14BF     		ite	ne
 10862 00b0 1C46     		movne	r4, r3
1099:src/xeq.c     **** 				d0 = cmdline+1;
 10863              		.loc 1 1099 9 view .LVU2889
 10864 00b2 0124     		moveq	r4, #1
 10865              	.LVL813:
1105:src/xeq.c     **** 			*d1++ = '\0';
 10866              		.loc 1 1105 4 is_stmt 1 view .LVU2890
1105:src/xeq.c     **** 			*d1++ = '\0';
 10867              		.loc 1 1105 9 is_stmt 0 view .LVU2891
 10868 00b4 FFF7FEFF 		bl	find_char
 10869              	.LVL814:
1106:src/xeq.c     **** 			d2 = find_char(d1, '.');
 10870              		.loc 1 1106 4 is_stmt 1 view .LVU2892
1106:src/xeq.c     **** 			d2 = find_char(d1, '.');
 10871              		.loc 1 1106 10 is_stmt 0 view .LVU2893
 10872 00b8 8146     		mov	r9, r0
 10873 00ba 4FF0000A 		mov	r10, #0
1106:src/xeq.c     **** 			d2 = find_char(d1, '.');
 10874              		.loc 1 1106 7 view .LVU2894
 10875 00be 461C     		adds	r6, r0, #1
 10876              	.LVL815:
1106:src/xeq.c     **** 			d2 = find_char(d1, '.');
 10877              		.loc 1 1106 10 view .LVU2895
 10878 00c0 09F802AB 		strb	r10, [r9], #2
1107:src/xeq.c     **** 			*d2++ = '\0';
 10879              		.loc 1 1107 4 is_stmt 1 view .LVU2896
1107:src/xeq.c     **** 			*d2++ = '\0';
 10880              		.loc 1 1107 9 is_stmt 0 view .LVU2897
 10881 00c4 2E21     		movs	r1, #46
 10882 00c6 3046     		mov	r0, r6
ARM GAS  /tmp/cc0UaEmF.s 			page 335


 10883 00c8 FFF7FEFF 		bl	find_char
 10884              	.LVL816:
1108:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
 10885              		.loc 1 1108 4 is_stmt 1 view .LVU2898
1108:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
 10886              		.loc 1 1108 7 is_stmt 0 view .LVU2899
 10887 00cc 0746     		mov	r7, r0
 10888              	.LVL817:
1109:src/xeq.c     **** 			decNumberFromString(&x, d0, &Ctx);
 10889              		.loc 1 1109 4 view .LVU2900
 10890 00ce 5C4A     		ldr	r2, .L816+4
1108:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
 10891              		.loc 1 1108 10 view .LVU2901
 10892 00d0 07F801AB 		strb	r10, [r7], #1
 10893              	.LVL818:
1109:src/xeq.c     **** 			decNumberFromString(&x, d0, &Ctx);
 10894              		.loc 1 1109 4 is_stmt 1 view .LVU2902
 10895 00d4 11A8     		add	r0, sp, #68
 10896 00d6 3946     		mov	r1, r7
 10897 00d8 FFF7FEFF 		bl	decNumberFromString
 10898              	.LVL819:
1110:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 10899              		.loc 1 1110 4 view .LVU2903
 10900 00dc 2946     		mov	r1, r5
 10901 00de 584A     		ldr	r2, .L816+4
 10902 00e0 1AA8     		add	r0, sp, #104
 10903 00e2 FFF7FEFF 		bl	decNumberFromString
 10904              	.LVL820:
1112:src/xeq.c     **** 				decNumberCopy(&a, &x); // put x (integer part) into a (numerator) ...
 10905              		.loc 1 1112 4 view .LVU2904
1112:src/xeq.c     **** 				decNumberCopy(&a, &x); // put x (integer part) into a (numerator) ...
 10906              		.loc 1 1112 7 is_stmt 0 view .LVU2905
 10907 00e6 4F45     		cmp	r7, r9
1113:src/xeq.c     **** 				decNumberZero(&x); // and zero x
 10908              		.loc 1 1113 5 view .LVU2906
 10909 00e8 08AD     		add	r5, sp, #32
 10910              	.LVL821:
1112:src/xeq.c     **** 				decNumberCopy(&a, &x); // put x (integer part) into a (numerator) ...
 10911              		.loc 1 1112 7 view .LVU2907
 10912 00ea 00F09780 		beq	.L811
1122:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 16) && defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 10913              		.loc 1 1122 5 is_stmt 1 view .LVU2908
 10914 00ee 544A     		ldr	r2, .L816+4
 10915 00f0 3146     		mov	r1, r6
 10916 00f2 2846     		mov	r0, r5
 10917 00f4 FFF7FEFF 		bl	decNumberFromString
 10918              	.LVL822:
1124:src/xeq.c     **** #endif
 10919              		.loc 1 1124 5 view .LVU2909
1124:src/xeq.c     **** #endif
 10920              		.loc 1 1124 25 is_stmt 0 view .LVU2910
 10921 00f8 D8F80030 		ldr	r3, [r8]
 10922 00fc 93F8E627 		ldrb	r2, [r3, #2022]	@ zero_extendqisi2
 10923 0100 6AF30412 		bfi	r2, r10, #4, #1
 10924 0104 83F8E627 		strb	r2, [r3, #2022]
 10925              	.L794:
1127:src/xeq.c     **** #ifdef IGNORE_INVALID_FRACTIONS
ARM GAS  /tmp/cc0UaEmF.s 			page 336


 10926              		.loc 1 1127 4 is_stmt 1 view .LVU2911
 10927 0108 11AA     		add	r2, sp, #68
 10928 010a 2946     		mov	r1, r5
 10929 010c 23A8     		add	r0, sp, #140
 10930 010e FFF7FEFF 		bl	dn_divide
 10931              	.LVL823:
1129:src/xeq.c     **** #endif
 10932              		.loc 1 1129 4 view .LVU2912
1129:src/xeq.c     **** #endif
 10933              		.loc 1 1129 7 is_stmt 0 view .LVU2913
 10934 0112 9DF89430 		ldrb	r3, [sp, #148]	@ zero_extendqisi2
 10935 0116 13F0700F 		tst	r3, #112
 10936 011a 64D0     		beq	.L812
1132:src/xeq.c     **** 				dn_minus(&x, &x);
 10937              		.loc 1 1132 4 is_stmt 1 view .LVU2914
1132:src/xeq.c     **** 				dn_minus(&x, &x);
 10938              		.loc 1 1132 7 is_stmt 0 view .LVU2915
 10939 011c 4CB1     		cbz	r4, .L806
 10940              	.L815:
1133:src/xeq.c     **** 			setX(&x);
 10941              		.loc 1 1133 5 is_stmt 1 view .LVU2916
 10942 011e 1AA9     		add	r1, sp, #104
 10943 0120 0846     		mov	r0, r1
 10944 0122 FFF7FEFF 		bl	dn_minus
 10945              	.LVL824:
1134:src/xeq.c     **** 		} else {
 10946              		.loc 1 1134 4 view .LVU2917
 10947              	.LBB2153:
 10948              	.LBI2153:
 809:src/xeq.c     **** 	setRegister(regX_idx, x);
 10949              		.loc 1 809 6 view .LVU2918
 10950              	.LBB2154:
 810:src/xeq.c     **** }
 10951              		.loc 1 810 2 view .LVU2919
 10952 0126 04E0     		b	.L806
 10953              	.LVL825:
 10954              	.L791:
 810:src/xeq.c     **** }
 10955              		.loc 1 810 2 is_stmt 0 view .LVU2920
 10956              	.LBE2154:
 10957              	.LBE2153:
 10958              	.LBE2152:
1136:src/xeq.c     **** 			setX(&x);
 10959              		.loc 1 1136 4 is_stmt 1 view .LVU2921
 10960 0128 454A     		ldr	r2, .L816+4
 10961 012a 02A9     		add	r1, sp, #8
 10962 012c 1AA8     		add	r0, sp, #104
 10963 012e FFF7FEFF 		bl	decNumberFromString
 10964              	.LVL826:
 10965              	.L806:
1137:src/xeq.c     **** 		}
 10966              		.loc 1 1137 4 view .LVU2922
 10967              	.LBB2155:
 10968              	.LBI2155:
 809:src/xeq.c     **** 	setRegister(regX_idx, x);
 10969              		.loc 1 809 6 view .LVU2923
 10970              	.LBB2156:
ARM GAS  /tmp/cc0UaEmF.s 			page 337


 810:src/xeq.c     **** }
 10971              		.loc 1 810 2 view .LVU2924
 10972 0132 1AA9     		add	r1, sp, #104
 10973              	.LVL827:
 810:src/xeq.c     **** }
 10974              		.loc 1 810 2 is_stmt 0 view .LVU2925
 10975 0134 6420     		movs	r0, #100
 10976 0136 FFF7FEFF 		bl	setRegister
 10977              	.LVL828:
 10978              	.L790:
 810:src/xeq.c     **** }
 10979              		.loc 1 810 2 view .LVU2926
 10980              	.LBE2156:
 10981              	.LBE2155:
1139:src/xeq.c     **** #ifndef DM42
 10982              		.loc 1 1139 3 is_stmt 1 view .LVU2927
 10983              	.LBB2157:
 10984              	.LBI2157:
3697:src/xeq.c     **** 	if (!Running && !XromRunning)
 10985              		.loc 1 3697 6 view .LVU2928
 10986              	.LBB2158:
3698:src/xeq.c     **** 		State.entryp = 1;
 10987              		.loc 1 3698 2 view .LVU2929
 10988              	.LBB2159:
 10989              	.LBI2159:
3697:src/xeq.c     **** 	if (!Running && !XromRunning)
 10990              		.loc 1 3697 6 view .LVU2930
 10991              	.LBE2159:
3698:src/xeq.c     **** 		State.entryp = 1;
 10992              		.loc 1 3698 6 is_stmt 0 view .LVU2931
 10993 013a 424A     		ldr	r2, .L816+8
 10994              	.LBB2161:
 10995              	.LBB2160:
3698:src/xeq.c     **** 		State.entryp = 1;
 10996              		.loc 1 3698 18 view .LVU2932
 10997 013c 424B     		ldr	r3, .L816+12
3698:src/xeq.c     **** 		State.entryp = 1;
 10998              		.loc 1 3698 15 view .LVU2933
 10999 013e 1268     		ldr	r2, [r2]
 11000 0140 1B68     		ldr	r3, [r3]
 11001 0142 1343     		orrs	r3, r2, r3
 11002 0144 07D1     		bne	.L777
3699:src/xeq.c     **** }
 11003              		.loc 1 3699 3 is_stmt 1 view .LVU2934
3699:src/xeq.c     **** }
 11004              		.loc 1 3699 16 is_stmt 0 view .LVU2935
 11005 0146 D8F80020 		ldr	r2, [r8]
 11006 014a 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
 11007 014e 43F01003 		orr	r3, r3, #16
 11008 0152 82F8DD37 		strb	r3, [r2, #2013]
 11009              	.L777:
 11010              	.LBE2160:
 11011              	.LBE2161:
 11012              	.LBE2158:
 11013              	.LBE2157:
 11014              	.LBE2176:
1144:src/xeq.c     **** 
ARM GAS  /tmp/cc0UaEmF.s 			page 338


 11015              		.loc 1 1144 1 view .LVU2936
 11016 0156 2CB0     		add	sp, sp, #176
 11017              		.cfi_remember_state
 11018              		.cfi_def_cfa_offset 32
 11019              		@ sp needed
 11020 0158 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 11021              	.LVL829:
 11022              	.L807:
 11023              		.cfi_restore_state
 11024              	.LBB2177:
1058:src/xeq.c     **** 			else if (cmdline[CmdLineEex] == 'D') {
 11025              		.loc 1 1058 5 is_stmt 1 view .LVU2937
1058:src/xeq.c     **** 			else if (cmdline[CmdLineEex] == 'D') {
 11026              		.loc 1 1058 30 is_stmt 0 view .LVU2938
 11027 015c 03F8A82C 		strb	r2, [r3, #-168]
 11028 0160 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
1070:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
 11029              		.loc 1 1070 4 is_stmt 1 view .LVU2939
1070:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
 11030              		.loc 1 1070 7 is_stmt 0 view .LVU2940
 11031 0162 002A     		cmp	r2, #0
 11032 0164 3FF47AAF 		beq	.L813
 11033              	.L782:
1078:src/xeq.c     **** 		}
 11034              		.loc 1 1078 5 is_stmt 1 view .LVU2941
1078:src/xeq.c     **** 		}
 11035              		.loc 1 1078 18 is_stmt 0 view .LVU2942
 11036 0168 D8F80030 		ldr	r3, [r8]
 11037 016c 93F8E627 		ldrb	r2, [r3, #2022]	@ zero_extendqisi2
 11038 0170 6FF34512 		bfc	r2, #5, #1
 11039 0174 83F8E627 		strb	r2, [r3, #2022]
1080:src/xeq.c     **** 		lift_if_enabled();
 11040              		.loc 1 1080 3 is_stmt 1 view .LVU2943
 11041              	.LBB2162:
 11042              	.LBB2143:
 11043              	.LBB2139:
 11044              	.LBB2136:
 735:src/xeq.c     **** }
 11045              		.loc 1 735 15 is_stmt 0 view .LVU2944
 11046 0178 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11047              	.LBE2136:
 11048              	.LBE2139:
 11049              	.LBE2143:
 11050              	.LBE2162:
1080:src/xeq.c     **** 		lift_if_enabled();
 11051              		.loc 1 1080 17 view .LVU2945
 11052 017a 0022     		movs	r2, #0
 11053              	.LBB2163:
 11054              	.LBB2144:
 739:src/xeq.c     **** 		lift();
 11055              		.loc 1 739 5 view .LVU2946
 11056 017c 5B06     		lsls	r3, r3, #25
 11057              	.LBE2144:
 11058              	.LBE2163:
1080:src/xeq.c     **** 		lift_if_enabled();
 11059              		.loc 1 1080 17 view .LVU2947
 11060 017e 2277     		strb	r2, [r4, #28]
ARM GAS  /tmp/cc0UaEmF.s 			page 339


1081:src/xeq.c     **** 		set_lift();
 11061              		.loc 1 1081 3 is_stmt 1 view .LVU2948
 11062              	.LBB2164:
 738:src/xeq.c     **** 	if (get_lift())
 11063              		.loc 1 738 6 view .LVU2949
 11064              	.LBB2145:
 739:src/xeq.c     **** 		lift();
 11065              		.loc 1 739 2 view .LVU2950
 11066              	.LBB2140:
 734:src/xeq.c     **** 	return State2.state_lift;
 11067              		.loc 1 734 12 view .LVU2951
 11068              	.LBB2137:
 735:src/xeq.c     **** }
 11069              		.loc 1 735 2 view .LVU2952
 11070              	.LBE2137:
 11071              	.LBE2140:
 739:src/xeq.c     **** 		lift();
 11072              		.loc 1 739 5 is_stmt 0 view .LVU2953
 11073 0180 7FF575AF 		bpl	.L784
 11074              	.L809:
 740:src/xeq.c     **** }
 11075              		.loc 1 740 3 is_stmt 1 view .LVU2954
 11076 0184 FFF7FEFF 		bl	lift
 11077              	.LVL830:
 11078 0188 71E7     		b	.L784
 11079              	.L810:
 11080              	.LBE2145:
 11081              	.LBE2164:
 11082              	.LBB2165:
1086:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
 11083              		.loc 1 1086 4 view .LVU2955
1086:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
 11084              		.loc 1 1086 41 is_stmt 0 view .LVU2956
 11085 018a 9DF80890 		ldrb	r9, [sp, #8]	@ zero_extendqisi2
 11086 018e A9F12D09 		sub	r9, r9, #45
 11087 0192 B9FA89F9 		clz	r9, r9
1087:src/xeq.c     **** 			setX_int_sgn(x, sgn);
 11088              		.loc 1 1087 31 view .LVU2957
 11089 0196 FFF7FEFF 		bl	int_base
 11090              	.LVL831:
1086:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
 11091              		.loc 1 1086 41 view .LVU2958
 11092 019a 4FEA5919 		lsr	r9, r9, #5
 11093              	.LVL832:
1087:src/xeq.c     **** 			setX_int_sgn(x, sgn);
 11094              		.loc 1 1087 4 is_stmt 1 view .LVU2959
1087:src/xeq.c     **** 			setX_int_sgn(x, sgn);
 11095              		.loc 1 1087 31 is_stmt 0 view .LVU2960
 11096 019e 02AB     		add	r3, sp, #8
 11097 01a0 03EB0902 		add	r2, r3, r9
 11098              	.LVL833:
 11099              	.LBB2166:
 11100              	.LBI2166:
 971:src/xeq.c     **** 	unsigned long long int x = 0;
 11101              		.loc 1 971 24 is_stmt 1 view .LVU2961
 11102              	.LBB2167:
 972:src/xeq.c     **** 
ARM GAS  /tmp/cc0UaEmF.s 			page 340


 11103              		.loc 1 972 2 view .LVU2962
 972:src/xeq.c     **** 
 11104              		.loc 1 972 25 is_stmt 0 view .LVU2963
 11105 01a4 0026     		movs	r6, #0
 11106 01a6 0027     		movs	r7, #0
 11107 01a8 02E0     		b	.L789
 11108              	.LVL834:
 11109              	.L814:
 11110              	.LBB2168:
 986:src/xeq.c     **** 	}
 11111              		.loc 1 986 5 view .LVU2964
 11112 01aa E618     		adds	r6, r4, r3
 11113              	.LVL835:
 986:src/xeq.c     **** 	}
 11114              		.loc 1 986 5 view .LVU2965
 11115 01ac 45F10007 		adc	r7, r5, #0
 11116              	.LVL836:
 986:src/xeq.c     **** 	}
 11117              		.loc 1 986 5 view .LVU2966
 11118              	.LBE2168:
 974:src/xeq.c     **** 		unsigned int n;
 11119              		.loc 1 974 8 is_stmt 1 view .LVU2967
 11120              	.L789:
 974:src/xeq.c     **** 		unsigned int n;
 11121              		.loc 1 974 2 view .LVU2968
 11122              	.LBB2169:
 975:src/xeq.c     **** 		const char c = *s++;
 11123              		.loc 1 975 3 view .LVU2969
 976:src/xeq.c     **** 
 11124              		.loc 1 976 3 view .LVU2970
 979:src/xeq.c     **** 		else if (c >= 'A' && c <= 'F')
 11125              		.loc 1 979 4 view .LVU2971
 980:src/xeq.c     **** 			n = c - 'A' + 10;
 11126              		.loc 1 980 8 view .LVU2972
 981:src/xeq.c     **** 		else
 11127              		.loc 1 981 4 view .LVU2973
 976:src/xeq.c     **** 
 11128              		.loc 1 976 14 is_stmt 0 view .LVU2974
 11129 01b0 12F8011B 		ldrb	r1, [r2], #1	@ zero_extendqisi2
 11130              	.LVL837:
 978:src/xeq.c     **** 			n = c - '0';
 11131              		.loc 1 978 3 is_stmt 1 view .LVU2975
 978:src/xeq.c     **** 			n = c - '0';
 11132              		.loc 1 978 16 is_stmt 0 view .LVU2976
 11133 01b4 A1F13003 		sub	r3, r1, #48
 978:src/xeq.c     **** 			n = c - '0';
 11134              		.loc 1 978 6 view .LVU2977
 11135 01b8 DCB2     		uxtb	r4, r3
 11136 01ba 092C     		cmp	r4, #9
 980:src/xeq.c     **** 			n = c - 'A' + 10;
 11137              		.loc 1 980 11 view .LVU2978
 11138 01bc A1F14105 		sub	r5, r1, #65
 978:src/xeq.c     **** 			n = c - '0';
 11139              		.loc 1 978 6 view .LVU2979
 11140 01c0 03D9     		bls	.L787
 980:src/xeq.c     **** 			n = c - 'A' + 10;
 11141              		.loc 1 980 11 view .LVU2980
ARM GAS  /tmp/cc0UaEmF.s 			page 341


 11142 01c2 052D     		cmp	r5, #5
 11143 01c4 07D8     		bhi	.L788
 981:src/xeq.c     **** 		else
 11144              		.loc 1 981 16 view .LVU2981
 11145 01c6 A1F13703 		sub	r3, r1, #55
 11146              	.LVL838:
 11147              	.L787:
 984:src/xeq.c     **** 			break;
 11148              		.loc 1 984 3 is_stmt 1 view .LVU2982
 986:src/xeq.c     **** 	}
 11149              		.loc 1 986 3 view .LVU2983
 986:src/xeq.c     **** 	}
 11150              		.loc 1 986 9 is_stmt 0 view .LVU2984
 11151 01ca A0FB0645 		umull	r4, r5, r0, r6
 984:src/xeq.c     **** 			break;
 11152              		.loc 1 984 6 view .LVU2985
 11153 01ce 9842     		cmp	r0, r3
 986:src/xeq.c     **** 	}
 11154              		.loc 1 986 9 view .LVU2986
 11155 01d0 00FB0755 		mla	r5, r0, r7, r5
 984:src/xeq.c     **** 			break;
 11156              		.loc 1 984 6 view .LVU2987
 11157 01d4 E9D8     		bhi	.L814
 11158              	.LVL839:
 11159              	.L788:
 984:src/xeq.c     **** 			break;
 11160              		.loc 1 984 6 view .LVU2988
 11161              	.LBE2169:
 988:src/xeq.c     **** }
 11162              		.loc 1 988 2 is_stmt 1 view .LVU2989
 988:src/xeq.c     **** }
 11163              		.loc 1 988 2 is_stmt 0 view .LVU2990
 11164              	.LBE2167:
 11165              	.LBE2166:
1088:src/xeq.c     **** 		} else if (cmdlinedot == 2) {
 11166              		.loc 1 1088 4 is_stmt 1 view .LVU2991
 11167              	.LBB2170:
 11168              	.LBI2170:
1323:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 11169              		.loc 1 1323 6 view .LVU2992
 11170              	.LBB2171:
1324:src/xeq.c     **** }
 11171              		.loc 1 1324 2 view .LVU2993
 11172 01d6 CDF80090 		str	r9, [sp]
 11173 01da 3246     		mov	r2, r6
 11174 01dc 3B46     		mov	r3, r7
 11175 01de 6420     		movs	r0, #100
 11176 01e0 FFF7FEFF 		bl	set_reg_n_int_sgn
 11177              	.LVL840:
1325:src/xeq.c     **** 
 11178              		.loc 1 1325 1 is_stmt 0 view .LVU2994
 11179 01e4 A9E7     		b	.L790
 11180              	.LVL841:
 11181              	.L812:
1325:src/xeq.c     **** 
 11182              		.loc 1 1325 1 view .LVU2995
 11183              	.LBE2171:
ARM GAS  /tmp/cc0UaEmF.s 			page 342


 11184              	.LBE2170:
 11185              	.LBE2165:
 11186              	.LBB2172:
1131:src/xeq.c     **** 			if (neg)
 11187              		.loc 1 1131 5 is_stmt 1 view .LVU2996
 11188 01e6 1AA9     		add	r1, sp, #104
 11189 01e8 23AA     		add	r2, sp, #140
 11190 01ea 0846     		mov	r0, r1
 11191 01ec FFF7FEFF 		bl	dn_add
 11192              	.LVL842:
1132:src/xeq.c     **** 				dn_minus(&x, &x);
 11193              		.loc 1 1132 4 view .LVU2997
1132:src/xeq.c     **** 				dn_minus(&x, &x);
 11194              		.loc 1 1132 7 is_stmt 0 view .LVU2998
 11195 01f0 002C     		cmp	r4, #0
 11196 01f2 9ED0     		beq	.L806
 11197 01f4 93E7     		b	.L815
 11198              	.LVL843:
 11199              	.L808:
1132:src/xeq.c     **** 				dn_minus(&x, &x);
 11200              		.loc 1 1132 7 view .LVU2999
 11201              	.LBE2172:
1060:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
 11202              		.loc 1 1060 5 is_stmt 1 view .LVU3000
 11203 01f6 02AB     		add	r3, sp, #8
1060:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
 11204              		.loc 1 1060 58 is_stmt 0 view .LVU3001
 11205 01f8 511C     		adds	r1, r2, #1
1060:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
 11206              		.loc 1 1060 32 view .LVU3002
 11207 01fa 901C     		adds	r0, r2, #2
1060:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
 11208              		.loc 1 1060 5 view .LVU3003
 11209 01fc 1944     		add	r1, r1, r3
 11210 01fe 1844     		add	r0, r0, r3
 11211 0200 C2F11202 		rsb	r2, r2, #18
 11212 0204 FFF7FEFF 		bl	xcopy
 11213              	.LVL844:
1061:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
 11214              		.loc 1 1061 5 is_stmt 1 view .LVU3004
1061:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
 11215              		.loc 1 1061 13 is_stmt 0 view .LVU3005
 11216 0208 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
1061:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
 11217              		.loc 1 1061 25 view .LVU3006
 11218 020a 2CAB     		add	r3, sp, #176
 11219 020c 1344     		add	r3, r3, r2
 11220 020e 4520     		movs	r0, #69
1062:src/xeq.c     **** 			}
 11221              		.loc 1 1062 29 view .LVU3007
 11222 0210 2D21     		movs	r1, #45
1061:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
 11223              		.loc 1 1061 25 view .LVU3008
 11224 0212 03F8A80C 		strb	r0, [r3, #-168]
1062:src/xeq.c     **** 			}
 11225              		.loc 1 1062 5 is_stmt 1 view .LVU3009
1062:src/xeq.c     **** 			}
ARM GAS  /tmp/cc0UaEmF.s 			page 343


 11226              		.loc 1 1062 29 is_stmt 0 view .LVU3010
 11227 0216 03F8A71C 		strb	r1, [r3, #-167]
 11228 021a 1CE7     		b	.L781
 11229              	.LVL845:
 11230              	.L811:
 11231              	.LBB2173:
1113:src/xeq.c     **** 				decNumberZero(&x); // and zero x
 11232              		.loc 1 1113 5 is_stmt 1 view .LVU3011
 11233 021c 1AA9     		add	r1, sp, #104
 11234 021e 2846     		mov	r0, r5
 11235 0220 FFF7FEFF 		bl	decNumberCopy
 11236              	.LVL846:
1114:src/xeq.c     **** #if FRACTION_MODE_INPUT & 32
 11237              		.loc 1 1114 5 view .LVU3012
 11238 0224 1AA8     		add	r0, sp, #104
 11239 0226 FFF7FEFF 		bl	decNumberZero
 11240              	.LVL847:
1116:src/xeq.c     **** #endif
 11241              		.loc 1 1116 5 view .LVU3013
1116:src/xeq.c     **** #endif
 11242              		.loc 1 1116 25 is_stmt 0 view .LVU3014
 11243 022a D8F80020 		ldr	r2, [r8]
 11244 022e 92F8E637 		ldrb	r3, [r2, #2022]	@ zero_extendqisi2
 11245 0232 43F01003 		orr	r3, r3, #16
 11246 0236 82F8E637 		strb	r3, [r2, #2022]
 11247 023a 65E7     		b	.L794
 11248              	.L817:
 11249              		.align	2
 11250              	.L816:
 11251 023c 00000000 		.word	StateWhileOn
 11252 0240 00000000 		.word	Ctx
 11253 0244 00000000 		.word	Running
 11254 0248 00000000 		.word	XromRunning
 11255 024c 00000000 		.word	main_ram
 11256              	.LBE2173:
 11257              	.LBE2177:
 11258              		.cfi_endproc
 11259              	.LFE284:
 11261              		.section	.text.process_cmdline,"ax",%progbits
 11262              		.align	1
 11263              		.p2align 2,,3
 11264              		.global	process_cmdline
 11265              		.syntax unified
 11266              		.thumb
 11267              		.thumb_func
 11268              		.fpu fpv4-sp-d16
 11270              	process_cmdline:
 11271              	.LFB84:
1040:src/xeq.c     **** 	decNumber a, b, x, t;
 11272              		.loc 1 1040 28 is_stmt 1 view -0
 11273              		.cfi_startproc
 11274              		@ args = 0, pretend = 0, frame = 0
 11275              		@ frame_needed = 0, uses_anonymous_args = 0
 11276              		@ link register save eliminated.
1041:src/xeq.c     **** 
 11277              		.loc 1 1041 2 view .LVU3016
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
ARM GAS  /tmp/cc0UaEmF.s 			page 344


 11278              		.loc 1 1043 2 view .LVU3017
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 11279              		.loc 1 1043 6 is_stmt 0 view .LVU3018
 11280 0000 024B     		ldr	r3, .L821
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 11281              		.loc 1 1043 5 view .LVU3019
 11282 0002 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 11283 0004 03B9     		cbnz	r3, .L820
1144:src/xeq.c     **** 
 11284              		.loc 1 1144 1 view .LVU3020
 11285 0006 7047     		bx	lr
 11286              	.L820:
 11287 0008 FFF7FEBF 		b	process_cmdline.part.0
 11288              	.LVL848:
 11289              	.L822:
 11290              		.align	2
 11291              	.L821:
 11292 000c 00000000 		.word	StateWhileOn
 11293              		.cfi_endproc
 11294              	.LFE84:
 11296              		.section	.text.process_cmdline_set_lift,"ax",%progbits
 11297              		.align	1
 11298              		.p2align 2,,3
 11299              		.global	process_cmdline_set_lift
 11300              		.syntax unified
 11301              		.thumb
 11302              		.thumb_func
 11303              		.fpu fpv4-sp-d16
 11305              	process_cmdline_set_lift:
 11306              	.LFB85:
1146:src/xeq.c     **** 	process_cmdline();
 11307              		.loc 1 1146 37 is_stmt 1 view -0
 11308              		.cfi_startproc
 11309              		@ args = 0, pretend = 0, frame = 0
 11310              		@ frame_needed = 0, uses_anonymous_args = 0
1147:src/xeq.c     **** 	set_lift();
 11311              		.loc 1 1147 2 view .LVU3022
 11312              	.LBB2178:
 11313              	.LBI2178:
1040:src/xeq.c     **** 	decNumber a, b, x, t;
 11314              		.loc 1 1040 6 view .LVU3023
 11315              	.LBB2179:
1041:src/xeq.c     **** 
 11316              		.loc 1 1041 2 view .LVU3024
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 11317              		.loc 1 1043 2 view .LVU3025
 11318              	.LBE2179:
 11319              	.LBE2178:
1146:src/xeq.c     **** 	process_cmdline();
 11320              		.loc 1 1146 37 is_stmt 0 view .LVU3026
 11321 0000 10B5     		push	{r4, lr}
 11322              		.cfi_def_cfa_offset 8
 11323              		.cfi_offset 4, -8
 11324              		.cfi_offset 14, -4
 11325              	.LBB2182:
 11326              	.LBB2180:
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
ARM GAS  /tmp/cc0UaEmF.s 			page 345


 11327              		.loc 1 1043 6 view .LVU3027
 11328 0002 074C     		ldr	r4, .L830
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 11329              		.loc 1 1043 5 view .LVU3028
 11330 0004 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 11331 0006 23B9     		cbnz	r3, .L829
 11332              	.LBE2180:
 11333              	.LBE2182:
1148:src/xeq.c     **** }
 11334              		.loc 1 1148 2 is_stmt 1 view .LVU3029
 11335              	.LBB2183:
 11336              	.LBI2183:
 748:src/xeq.c     ****     State2.state_lift = 1;
 11337              		.loc 1 748 6 view .LVU3030
 11338              	.LBB2184:
 749:src/xeq.c     **** }
 11339              		.loc 1 749 5 view .LVU3031
 749:src/xeq.c     **** }
 11340              		.loc 1 749 23 is_stmt 0 view .LVU3032
 11341 0008 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11342 000a 43F04003 		orr	r3, r3, #64
 11343 000e E375     		strb	r3, [r4, #23]
 11344              	.LBE2184:
 11345              	.LBE2183:
1149:src/xeq.c     **** 
 11346              		.loc 1 1149 1 view .LVU3033
 11347 0010 10BD     		pop	{r4, pc}
 11348              	.L829:
 11349              	.LBB2186:
 11350              	.LBB2181:
 11351 0012 FFF7FEFF 		bl	process_cmdline.part.0
 11352              	.LVL849:
 11353              	.LBE2181:
 11354              	.LBE2186:
1148:src/xeq.c     **** }
 11355              		.loc 1 1148 2 is_stmt 1 view .LVU3034
 11356              	.LBB2187:
 748:src/xeq.c     ****     State2.state_lift = 1;
 11357              		.loc 1 748 6 view .LVU3035
 11358              	.LBB2185:
 749:src/xeq.c     **** }
 11359              		.loc 1 749 5 view .LVU3036
 749:src/xeq.c     **** }
 11360              		.loc 1 749 23 is_stmt 0 view .LVU3037
 11361 0016 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11362 0018 43F04003 		orr	r3, r3, #64
 11363 001c E375     		strb	r3, [r4, #23]
 11364              	.LBE2185:
 11365              	.LBE2187:
1149:src/xeq.c     **** 
 11366              		.loc 1 1149 1 view .LVU3038
 11367 001e 10BD     		pop	{r4, pc}
 11368              	.L831:
 11369              		.align	2
 11370              	.L830:
 11371 0020 00000000 		.word	StateWhileOn
 11372              		.cfi_endproc
ARM GAS  /tmp/cc0UaEmF.s 			page 346


 11373              	.LFE85:
 11375              		.section	.text.setX_int,"ax",%progbits
 11376              		.align	1
 11377              		.p2align 2,,3
 11378              		.global	setX_int
 11379              		.syntax unified
 11380              		.thumb
 11381              		.thumb_func
 11382              		.fpu fpv4-sp-d16
 11384              	setX_int:
 11385              	.LVL850:
 11386              	.LFB98:
1318:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
 11387              		.loc 1 1318 34 is_stmt 1 view -0
 11388              		.cfi_startproc
 11389              		@ args = 0, pretend = 0, frame = 8
 11390              		@ frame_needed = 0, uses_anonymous_args = 0
1319:src/xeq.c     **** }
 11391              		.loc 1 1319 2 view .LVU3040
1318:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
 11392              		.loc 1 1318 34 is_stmt 0 view .LVU3041
 11393 0000 00B5     		push	{lr}
 11394              		.cfi_def_cfa_offset 4
 11395              		.cfi_offset 14, -4
 11396 0002 0B46     		mov	r3, r1
 11397 0004 83B0     		sub	sp, sp, #12
 11398              		.cfi_def_cfa_offset 16
1318:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
 11399              		.loc 1 1318 34 view .LVU3042
 11400 0006 0246     		mov	r2, r0
 11401              	.LBB2188:
 11402              	.LBB2189:
1237:src/xeq.c     **** }
 11403              		.loc 1 1237 8 view .LVU3043
 11404 0008 6420     		movs	r0, #100
 11405              	.LVL851:
1237:src/xeq.c     **** }
 11406              		.loc 1 1237 8 view .LVU3044
 11407 000a CDE90023 		strd	r2, [sp]
 11408              	.LVL852:
1237:src/xeq.c     **** }
 11409              		.loc 1 1237 8 view .LVU3045
 11410              	.LBE2189:
 11411              	.LBI2188:
1236:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 11412              		.loc 1 1236 6 is_stmt 1 view .LVU3046
 11413              	.LBB2190:
1237:src/xeq.c     **** }
 11414              		.loc 1 1237 2 view .LVU3047
1237:src/xeq.c     **** }
 11415              		.loc 1 1237 8 is_stmt 0 view .LVU3048
 11416 000e FFF7FEFF 		bl	get_reg_n
 11417              	.LVL853:
1237:src/xeq.c     **** }
 11418              		.loc 1 1237 2 view .LVU3049
 11419 0012 0822     		movs	r2, #8
 11420 0014 6946     		mov	r1, sp
ARM GAS  /tmp/cc0UaEmF.s 			page 347


 11421 0016 FFF7FEFF 		bl	xcopy
 11422              	.LVL854:
1237:src/xeq.c     **** }
 11423              		.loc 1 1237 2 view .LVU3050
 11424              	.LBE2190:
 11425              	.LBE2188:
1320:src/xeq.c     **** 
 11426              		.loc 1 1320 1 view .LVU3051
 11427 001a 03B0     		add	sp, sp, #12
 11428              		.cfi_def_cfa_offset 4
 11429              		@ sp needed
 11430 001c 5DF804FB 		ldr	pc, [sp], #4
 11431              		.cfi_endproc
 11432              	.LFE98:
 11434              		.section	.text.do_rcl,"ax",%progbits
 11435              		.align	1
 11436              		.p2align 2,,3
 11437              		.syntax unified
 11438              		.thumb
 11439              		.thumb_func
 11440              		.fpu fpv4-sp-d16
 11442              	do_rcl:
 11443              	.LVL855:
 11444              	.LFB114:
1546:src/xeq.c     **** 	if (op == RARG_RCL) {
 11445              		.loc 1 1546 45 is_stmt 1 view -0
 11446              		.cfi_startproc
 11447              		@ args = 0, pretend = 0, frame = 40
 11448              		@ frame_needed = 0, uses_anonymous_args = 0
1547:src/xeq.c     **** 		REGISTER temp;
 11449              		.loc 1 1547 2 view .LVU3053
1546:src/xeq.c     **** 	if (op == RARG_RCL) {
 11450              		.loc 1 1546 45 is_stmt 0 view .LVU3054
 11451 0000 30B5     		push	{r4, r5, lr}
 11452              		.cfi_def_cfa_offset 12
 11453              		.cfi_offset 4, -12
 11454              		.cfi_offset 5, -8
 11455              		.cfi_offset 14, -4
1547:src/xeq.c     **** 		REGISTER temp;
 11456              		.loc 1 1547 5 view .LVU3055
 11457 0002 0A29     		cmp	r1, #10
1546:src/xeq.c     **** 	if (op == RARG_RCL) {
 11458              		.loc 1 1546 45 view .LVU3056
 11459 0004 8BB0     		sub	sp, sp, #44
 11460              		.cfi_def_cfa_offset 56
1546:src/xeq.c     **** 	if (op == RARG_RCL) {
 11461              		.loc 1 1546 45 view .LVU3057
 11462 0006 0B46     		mov	r3, r1
1547:src/xeq.c     **** 		REGISTER temp;
 11463              		.loc 1 1547 5 view .LVU3058
 11464 0008 33D0     		beq	.L855
1553:src/xeq.c     **** 			long long int r;
 11465              		.loc 1 1553 3 is_stmt 1 view .LVU3059
1553:src/xeq.c     **** 			long long int r;
 11466              		.loc 1 1553 7 is_stmt 0 view .LVU3060
 11467 000a 304A     		ldr	r2, .L857
 11468 000c 1268     		ldr	r2, [r2]
ARM GAS  /tmp/cc0UaEmF.s 			page 348


 11469 000e 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
1553:src/xeq.c     **** 			long long int r;
 11470              		.loc 1 1553 6 view .LVU3061
 11471 0012 D207     		lsls	r2, r2, #31
 11472 0014 0146     		mov	r1, r0
 11473              	.LVL856:
 11474              	.LBB2220:
1556:src/xeq.c     **** 				illegal(op);
 11475              		.loc 1 1556 8 view .LVU3062
 11476 0016 A3F10A03 		sub	r3, r3, #10
 11477              	.LBE2220:
1553:src/xeq.c     **** 			long long int r;
 11478              		.loc 1 1553 6 view .LVU3063
 11479 001a 14D5     		bpl	.L840
 11480              	.LBB2227:
1554:src/xeq.c     **** 
 11481              		.loc 1 1554 4 is_stmt 1 view .LVU3064
1556:src/xeq.c     **** 				illegal(op);
 11482              		.loc 1 1556 4 view .LVU3065
1556:src/xeq.c     **** 				illegal(op);
 11483              		.loc 1 1556 8 is_stmt 0 view .LVU3066
 11484 001c 98B2     		uxth	r0, r3
 11485              	.LVL857:
1556:src/xeq.c     **** 				illegal(op);
 11486              		.loc 1 1556 8 view .LVU3067
 11487 001e 6A46     		mov	r2, sp
 11488 0020 0123     		movs	r3, #1
 11489 0022 FFF7FEFF 		bl	storcl_intop
 11490              	.LVL858:
1556:src/xeq.c     **** 				illegal(op);
 11491              		.loc 1 1556 7 view .LVU3068
 11492 0026 20B1     		cbz	r0, .L841
1557:src/xeq.c     **** 			setlastX();
 11493              		.loc 1 1557 5 is_stmt 1 view .LVU3069
1557:src/xeq.c     **** 			setlastX();
 11494              		.loc 1 1557 5 view .LVU3070
 11495              	.LVL859:
 11496              	.LBB2221:
 11497              	.LBI2221:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 11498              		.loc 1 537 5 view .LVU3071
 11499              	.LBB2222:
 538:src/xeq.c     **** 		Error = e;
 11500              		.loc 1 538 2 view .LVU3072
 538:src/xeq.c     **** 		Error = e;
 11501              		.loc 1 538 12 is_stmt 0 view .LVU3073
 11502 0028 294B     		ldr	r3, .L857+4
 538:src/xeq.c     **** 		Error = e;
 11503              		.loc 1 538 5 view .LVU3074
 11504 002a 1A68     		ldr	r2, [r3]
 11505 002c 0AB9     		cbnz	r2, .L841
 11506              	.LVL860:
 11507              	.LBB2223:
 11508              	.LBI2223:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 11509              		.loc 1 537 5 is_stmt 1 view .LVU3075
 11510              	.LBB2224:
ARM GAS  /tmp/cc0UaEmF.s 			page 349


 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 11511              		.loc 1 539 3 view .LVU3076
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 11512              		.loc 1 539 9 is_stmt 0 view .LVU3077
 11513 002e 0322     		movs	r2, #3
 11514 0030 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 11515              		.loc 1 540 3 is_stmt 1 view .LVU3078
 11516              	.LVL861:
 11517              	.L841:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 11518              		.loc 1 540 3 is_stmt 0 view .LVU3079
 11519              	.LBE2224:
 11520              	.LBE2223:
 11521              	.LBE2222:
 11522              	.LBE2221:
1557:src/xeq.c     **** 			setlastX();
 11523              		.loc 1 1557 5 is_stmt 1 discriminator 1 view .LVU3080
1558:src/xeq.c     **** 			setX_int(r);
 11524              		.loc 1 1558 4 discriminator 1 view .LVU3081
 11525              	.LBB2225:
 11526              	.LBI2225:
 773:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 11527              		.loc 1 773 6 discriminator 1 view .LVU3082
 11528              	.LBB2226:
 774:src/xeq.c     **** }
 11529              		.loc 1 774 2 discriminator 1 view .LVU3083
 11530 0032 6421     		movs	r1, #100
 11531 0034 6C20     		movs	r0, #108
 11532 0036 FFF7FEFF 		bl	copyreg_n
 11533              	.LVL862:
 11534              	.LBE2226:
 11535              	.LBE2225:
1559:src/xeq.c     **** 		} else {
 11536              		.loc 1 1559 4 discriminator 1 view .LVU3084
 11537 003a DDE90001 		ldrd	r0, [sp]
 11538 003e FFF7FEFF 		bl	setX_int
 11539              	.LVL863:
 11540              	.LBE2227:
1569:src/xeq.c     **** 
 11541              		.loc 1 1569 1 is_stmt 0 discriminator 1 view .LVU3085
 11542 0042 0BB0     		add	sp, sp, #44
 11543              		.cfi_remember_state
 11544              		.cfi_def_cfa_offset 12
 11545              		@ sp needed
 11546 0044 30BD     		pop	{r4, r5, pc}
 11547              	.LVL864:
 11548              	.L840:
 11549              		.cfi_restore_state
 11550              	.LBB2228:
1561:src/xeq.c     **** 
 11551              		.loc 1 1561 4 is_stmt 1 view .LVU3086
1563:src/xeq.c     **** 				illegal(op);
 11552              		.loc 1 1563 4 view .LVU3087
1563:src/xeq.c     **** 				illegal(op);
 11553              		.loc 1 1563 8 is_stmt 0 view .LVU3088
 11554 0046 6C46     		mov	r4, sp
ARM GAS  /tmp/cc0UaEmF.s 			page 350


 11555 0048 98B2     		uxth	r0, r3
 11556              	.LVL865:
1563:src/xeq.c     **** 				illegal(op);
 11557              		.loc 1 1563 8 view .LVU3089
 11558 004a 2246     		mov	r2, r4
 11559 004c 0123     		movs	r3, #1
 11560 004e FFF7FEFF 		bl	storcl_op
 11561              	.LVL866:
1563:src/xeq.c     **** 				illegal(op);
 11562              		.loc 1 1563 7 view .LVU3090
 11563 0052 20B1     		cbz	r0, .L842
1564:src/xeq.c     **** 			setlastX();
 11564              		.loc 1 1564 5 is_stmt 1 view .LVU3091
1564:src/xeq.c     **** 			setlastX();
 11565              		.loc 1 1564 5 view .LVU3092
 11566              	.LVL867:
 11567              	.LBB2229:
 11568              	.LBI2229:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 11569              		.loc 1 537 5 view .LVU3093
 11570              	.LBB2230:
 538:src/xeq.c     **** 		Error = e;
 11571              		.loc 1 538 2 view .LVU3094
 538:src/xeq.c     **** 		Error = e;
 11572              		.loc 1 538 12 is_stmt 0 view .LVU3095
 11573 0054 1E4B     		ldr	r3, .L857+4
 538:src/xeq.c     **** 		Error = e;
 11574              		.loc 1 538 5 view .LVU3096
 11575 0056 1A68     		ldr	r2, [r3]
 11576 0058 0AB9     		cbnz	r2, .L842
 11577              	.LVL868:
 11578              	.LBB2231:
 11579              	.LBI2231:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 11580              		.loc 1 537 5 is_stmt 1 view .LVU3097
 11581              	.LBB2232:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 11582              		.loc 1 539 3 view .LVU3098
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 11583              		.loc 1 539 9 is_stmt 0 view .LVU3099
 11584 005a 0322     		movs	r2, #3
 11585 005c 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 11586              		.loc 1 540 3 is_stmt 1 view .LVU3100
 11587              	.LVL869:
 11588              	.L842:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 11589              		.loc 1 540 3 is_stmt 0 view .LVU3101
 11590              	.LBE2232:
 11591              	.LBE2231:
 11592              	.LBE2230:
 11593              	.LBE2229:
1564:src/xeq.c     **** 			setlastX();
 11594              		.loc 1 1564 5 is_stmt 1 discriminator 1 view .LVU3102
1565:src/xeq.c     **** 			setX(&r);
 11595              		.loc 1 1565 4 discriminator 1 view .LVU3103
 11596              	.LBB2233:
ARM GAS  /tmp/cc0UaEmF.s 			page 351


 11597              	.LBI2233:
 773:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 11598              		.loc 1 773 6 discriminator 1 view .LVU3104
 11599              	.LBB2234:
 774:src/xeq.c     **** }
 11600              		.loc 1 774 2 discriminator 1 view .LVU3105
 11601 005e 6421     		movs	r1, #100
 11602 0060 6C20     		movs	r0, #108
 11603 0062 FFF7FEFF 		bl	copyreg_n
 11604              	.LVL870:
 11605              	.LBE2234:
 11606              	.LBE2233:
1566:src/xeq.c     **** 		}
 11607              		.loc 1 1566 4 discriminator 1 view .LVU3106
 11608              	.LBB2235:
 11609              	.LBI2235:
 809:src/xeq.c     **** 	setRegister(regX_idx, x);
 11610              		.loc 1 809 6 discriminator 1 view .LVU3107
 11611              	.LBB2236:
 810:src/xeq.c     **** }
 11612              		.loc 1 810 2 discriminator 1 view .LVU3108
 11613 0066 2146     		mov	r1, r4
 11614 0068 6420     		movs	r0, #100
 11615 006a FFF7FEFF 		bl	setRegister
 11616              	.LVL871:
 810:src/xeq.c     **** }
 11617              		.loc 1 810 2 is_stmt 0 discriminator 1 view .LVU3109
 11618              	.LBE2236:
 11619              	.LBE2235:
 11620              	.LBE2228:
1569:src/xeq.c     **** 
 11621              		.loc 1 1569 1 discriminator 1 view .LVU3110
 11622 006e 0BB0     		add	sp, sp, #44
 11623              		.cfi_remember_state
 11624              		.cfi_def_cfa_offset 12
 11625              		@ sp needed
 11626 0070 30BD     		pop	{r4, r5, pc}
 11627              	.LVL872:
 11628              	.L855:
 11629              		.cfi_restore_state
 11630              	.LBB2237:
1548:src/xeq.c     **** 		copyreg(&temp, get_reg_n(index));
 11631              		.loc 1 1548 3 is_stmt 1 view .LVU3111
1549:src/xeq.c     **** 		lift_if_enabled();
 11632              		.loc 1 1549 3 view .LVU3112
 11633              	.LBB2238:
 11634              	.LBB2239:
 11635              	.LBB2240:
 11636              	.LBB2241:
 933:src/xeq.c     **** }
 11637              		.loc 1 933 24 is_stmt 0 view .LVU3113
 11638 0072 164D     		ldr	r5, .L857
 11639              	.LBE2241:
 11640              	.LBE2240:
 11641              	.LBE2239:
 11642              	.LBE2238:
1549:src/xeq.c     **** 		lift_if_enabled();
ARM GAS  /tmp/cc0UaEmF.s 			page 352


 11643              		.loc 1 1549 18 view .LVU3114
 11644 0074 FFF7FEFF 		bl	get_reg_n
 11645              	.LVL873:
 11646              	.LBB2248:
 11647              	.LBB2246:
 11648              	.LBB2244:
 11649              	.LBB2242:
 933:src/xeq.c     **** }
 11650              		.loc 1 933 24 view .LVU3115
 11651 0078 2B68     		ldr	r3, [r5]
 11652 007a B3F8E827 		ldrh	r2, [r3, #2024]
 11653 007e 44F20103 		movw	r3, #16385
 11654              	.LBE2242:
 11655              	.LBE2244:
 718:src/xeq.c     **** }
 11656              		.loc 1 718 2 view .LVU3116
 11657 0082 1340     		ands	r3, r3, r2
 11658 0084 B3F5804F 		cmp	r3, #16384
 11659 0088 6C46     		mov	r4, sp
 11660              	.LBE2246:
 11661              	.LBE2248:
1549:src/xeq.c     **** 		lift_if_enabled();
 11662              		.loc 1 1549 18 view .LVU3117
 11663 008a 0146     		mov	r1, r0
 11664              	.LVL874:
 11665              	.LBB2249:
 11666              	.LBI2238:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 11667              		.loc 1 717 6 is_stmt 1 view .LVU3118
 11668              	.LBB2247:
 718:src/xeq.c     **** }
 11669              		.loc 1 718 2 view .LVU3119
 11670              	.LBB2245:
 11671              	.LBI2240:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 11672              		.loc 1 932 5 view .LVU3120
 11673              	.LBB2243:
 933:src/xeq.c     **** }
 11674              		.loc 1 933 2 view .LVU3121
 11675              	.LBE2243:
 11676              	.LBE2245:
 718:src/xeq.c     **** }
 11677              		.loc 1 718 2 is_stmt 0 view .LVU3122
 11678 008c 0CBF     		ite	eq
 11679 008e 1022     		moveq	r2, #16
 11680 0090 0822     		movne	r2, #8
 11681 0092 2046     		mov	r0, r4
 11682              	.LVL875:
 718:src/xeq.c     **** }
 11683              		.loc 1 718 2 view .LVU3123
 11684 0094 FFF7FEFF 		bl	xcopy
 11685              	.LVL876:
 718:src/xeq.c     **** }
 11686              		.loc 1 718 2 view .LVU3124
 11687              	.LBE2247:
 11688              	.LBE2249:
1550:src/xeq.c     **** 		copyreg(StackBase, &temp);
ARM GAS  /tmp/cc0UaEmF.s 			page 353


 11689              		.loc 1 1550 3 is_stmt 1 view .LVU3125
 11690              	.LBB2250:
 11691              	.LBI2250:
 738:src/xeq.c     **** 	if (get_lift())
 11692              		.loc 1 738 6 view .LVU3126
 11693              	.LBB2251:
 739:src/xeq.c     **** 		lift();
 11694              		.loc 1 739 2 view .LVU3127
 11695              	.LBB2252:
 11696              	.LBI2252:
 734:src/xeq.c     **** 	return State2.state_lift;
 11697              		.loc 1 734 12 view .LVU3128
 11698              	.LBB2253:
 735:src/xeq.c     **** }
 11699              		.loc 1 735 2 view .LVU3129
 735:src/xeq.c     **** }
 11700              		.loc 1 735 15 is_stmt 0 view .LVU3130
 11701 0098 0E4B     		ldr	r3, .L857+8
 11702 009a DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 11703              	.LBE2253:
 11704              	.LBE2252:
 739:src/xeq.c     **** 		lift();
 11705              		.loc 1 739 5 view .LVU3131
 11706 009c 5906     		lsls	r1, r3, #25
 11707 009e 11D4     		bmi	.L856
 11708              	.L837:
 11709              	.LBE2251:
 11710              	.LBE2250:
1551:src/xeq.c     **** 	} else {
 11711              		.loc 1 1551 3 is_stmt 1 view .LVU3132
 11712              	.LBB2255:
 11713              	.LBB2256:
 11714              	.LBB2257:
 11715              	.LBB2258:
 933:src/xeq.c     **** }
 11716              		.loc 1 933 24 is_stmt 0 view .LVU3133
 11717 00a0 2A68     		ldr	r2, [r5]
 11718              	.LBE2258:
 11719              	.LBE2257:
 11720              	.LBE2256:
 11721              	.LBE2255:
1551:src/xeq.c     **** 	} else {
 11722              		.loc 1 1551 3 view .LVU3134
 11723 00a2 0D4B     		ldr	r3, .L857+12
 11724              	.LVL877:
 11725              	.LBB2264:
 11726              	.LBI2255:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 11727              		.loc 1 717 6 is_stmt 1 view .LVU3135
 11728              	.LBB2263:
 718:src/xeq.c     **** }
 11729              		.loc 1 718 2 view .LVU3136
 11730              	.LBB2261:
 11731              	.LBI2257:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 11732              		.loc 1 932 5 view .LVU3137
 11733              	.LBB2259:
ARM GAS  /tmp/cc0UaEmF.s 			page 354


 933:src/xeq.c     **** }
 11734              		.loc 1 933 2 view .LVU3138
 933:src/xeq.c     **** }
 11735              		.loc 1 933 24 is_stmt 0 view .LVU3139
 11736 00a4 B2F8E827 		ldrh	r2, [r2, #2024]
 11737              	.LBE2259:
 11738              	.LBE2261:
 718:src/xeq.c     **** }
 11739              		.loc 1 718 2 view .LVU3140
 11740 00a8 1868     		ldr	r0, [r3]
 11741              	.LBB2262:
 11742              	.LBB2260:
 933:src/xeq.c     **** }
 11743              		.loc 1 933 24 view .LVU3141
 11744 00aa 44F20103 		movw	r3, #16385
 11745              	.LVL878:
 933:src/xeq.c     **** }
 11746              		.loc 1 933 24 view .LVU3142
 11747              	.LBE2260:
 11748              	.LBE2262:
 718:src/xeq.c     **** }
 11749              		.loc 1 718 2 view .LVU3143
 11750 00ae 1340     		ands	r3, r3, r2
 11751 00b0 B3F5804F 		cmp	r3, #16384
 11752 00b4 2146     		mov	r1, r4
 11753 00b6 0CBF     		ite	eq
 11754 00b8 1022     		moveq	r2, #16
 11755 00ba 0822     		movne	r2, #8
 11756 00bc FFF7FEFF 		bl	xcopy
 11757              	.LVL879:
 718:src/xeq.c     **** }
 11758              		.loc 1 718 2 view .LVU3144
 11759              	.LBE2263:
 11760              	.LBE2264:
 11761              	.LBE2237:
1569:src/xeq.c     **** 
 11762              		.loc 1 1569 1 view .LVU3145
 11763 00c0 0BB0     		add	sp, sp, #44
 11764              		.cfi_remember_state
 11765              		.cfi_def_cfa_offset 12
 11766              		@ sp needed
 11767 00c2 30BD     		pop	{r4, r5, pc}
 11768              	.L856:
 11769              		.cfi_restore_state
 11770              	.LBB2266:
 11771              	.LBB2265:
 11772              	.LBB2254:
 740:src/xeq.c     **** }
 11773              		.loc 1 740 3 is_stmt 1 view .LVU3146
 11774 00c4 FFF7FEFF 		bl	lift
 11775              	.LVL880:
 11776 00c8 EAE7     		b	.L837
 11777              	.L858:
 11778 00ca 00BF     		.align	2
 11779              	.L857:
 11780 00cc 00000000 		.word	main_ram
 11781 00d0 00000000 		.word	Error
ARM GAS  /tmp/cc0UaEmF.s 			page 355


 11782 00d4 00000000 		.word	StateWhileOn
 11783 00d8 00000000 		.word	StackBase
 11784              	.LBE2254:
 11785              	.LBE2265:
 11786              	.LBE2266:
 11787              		.cfi_endproc
 11788              	.LFE114:
 11790              		.section	.text.setX_int_sgn,"ax",%progbits
 11791              		.align	1
 11792              		.p2align 2,,3
 11793              		.global	setX_int_sgn
 11794              		.syntax unified
 11795              		.thumb
 11796              		.thumb_func
 11797              		.fpu fpv4-sp-d16
 11799              	setX_int_sgn:
 11800              	.LVL881:
 11801              	.LFB99:
1323:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 11802              		.loc 1 1323 56 view -0
 11803              		.cfi_startproc
 11804              		@ args = 0, pretend = 0, frame = 0
 11805              		@ frame_needed = 0, uses_anonymous_args = 0
1324:src/xeq.c     **** }
 11806              		.loc 1 1324 2 view .LVU3148
1323:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 11807              		.loc 1 1323 56 is_stmt 0 view .LVU3149
 11808 0000 00B5     		push	{lr}
 11809              		.cfi_def_cfa_offset 4
 11810              		.cfi_offset 14, -4
 11811 0002 83B0     		sub	sp, sp, #12
 11812              		.cfi_def_cfa_offset 16
1324:src/xeq.c     **** }
 11813              		.loc 1 1324 2 view .LVU3150
 11814 0004 0B46     		mov	r3, r1
 11815 0006 0092     		str	r2, [sp]
 11816 0008 0246     		mov	r2, r0
 11817              	.LVL882:
1324:src/xeq.c     **** }
 11818              		.loc 1 1324 2 view .LVU3151
 11819 000a 6420     		movs	r0, #100
 11820              	.LVL883:
1324:src/xeq.c     **** }
 11821              		.loc 1 1324 2 view .LVU3152
 11822 000c FFF7FEFF 		bl	set_reg_n_int_sgn
 11823              	.LVL884:
1325:src/xeq.c     **** 
 11824              		.loc 1 1325 1 view .LVU3153
 11825 0010 03B0     		add	sp, sp, #12
 11826              		.cfi_def_cfa_offset 4
 11827              		@ sp needed
 11828 0012 5DF804FB 		ldr	pc, [sp], #4
 11829              		.cfi_endproc
 11830              	.LFE99:
 11832 0016 00BF     		.section	.text.zero_regs,"ax",%progbits
 11833              		.align	1
 11834              		.p2align 2,,3
ARM GAS  /tmp/cc0UaEmF.s 			page 356


 11835              		.global	zero_regs
 11836              		.syntax unified
 11837              		.thumb
 11838              		.thumb_func
 11839              		.fpu fpv4-sp-d16
 11841              	zero_regs:
 11842              	.LVL885:
 11843              	.LFB100:
1332:src/xeq.c     **** #if 0
 11844              		.loc 1 1332 39 is_stmt 1 view -0
 11845              		.cfi_startproc
 11846              		@ args = 0, pretend = 0, frame = 0
 11847              		@ frame_needed = 0, uses_anonymous_args = 0
 11848              		@ link register save eliminated.
1347:src/xeq.c     **** #endif
 11849              		.loc 1 1347 2 view .LVU3155
 11850              	.LBB2267:
 11851              	.LBI2267:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 11852              		.loc 1 932 5 view .LVU3156
 11853              	.LBB2268:
 933:src/xeq.c     **** }
 11854              		.loc 1 933 2 view .LVU3157
 933:src/xeq.c     **** }
 11855              		.loc 1 933 24 is_stmt 0 view .LVU3158
 11856 0000 084B     		ldr	r3, .L862
 11857 0002 1B68     		ldr	r3, [r3]
 11858 0004 B3F8E827 		ldrh	r2, [r3, #2024]
 11859 0008 44F20103 		movw	r3, #16385
 11860 000c 1340     		ands	r3, r3, r2
 11861 000e A3F58043 		sub	r3, r3, #16384
 11862 0012 B3FA83F3 		clz	r3, r3
 11863 0016 5B09     		lsrs	r3, r3, #5
 11864              	.LBE2268:
 11865              	.LBE2267:
1347:src/xeq.c     **** #endif
 11866              		.loc 1 1347 24 view .LVU3159
 11867 0018 0333     		adds	r3, r3, #3
1347:src/xeq.c     **** #endif
 11868              		.loc 1 1347 2 view .LVU3160
 11869 001a 01FA03F2 		lsl	r2, r1, r3
 11870 001e 0021     		movs	r1, #0
 11871              	.LVL886:
1347:src/xeq.c     **** #endif
 11872              		.loc 1 1347 2 view .LVU3161
 11873 0020 FFF7FEBF 		b	xset
 11874              	.LVL887:
 11875              	.L863:
1347:src/xeq.c     **** #endif
 11876              		.loc 1 1347 2 view .LVU3162
 11877              		.align	2
 11878              	.L862:
 11879 0024 00000000 		.word	main_ram
 11880              		.cfi_endproc
 11881              	.LFE100:
 11883              		.section	.text.move_regs,"ax",%progbits
 11884              		.align	1
ARM GAS  /tmp/cc0UaEmF.s 			page 357


 11885              		.p2align 2,,3
 11886              		.global	move_regs
 11887              		.syntax unified
 11888              		.thumb
 11889              		.thumb_func
 11890              		.fpu fpv4-sp-d16
 11892              	move_regs:
 11893              	.LVL888:
 11894              	.LFB101:
1351:src/xeq.c     **** 	if (is_dblmode())
 11895              		.loc 1 1351 54 is_stmt 1 view -0
 11896              		.cfi_startproc
 11897              		@ args = 0, pretend = 0, frame = 0
 11898              		@ frame_needed = 0, uses_anonymous_args = 0
 11899              		@ link register save eliminated.
1352:src/xeq.c     **** 		n <<= 1;
 11900              		.loc 1 1352 2 view .LVU3164
 11901              	.LBB2269:
 11902              	.LBI2269:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 11903              		.loc 1 932 5 view .LVU3165
 11904              	.LBB2270:
 933:src/xeq.c     **** }
 11905              		.loc 1 933 2 view .LVU3166
 933:src/xeq.c     **** }
 11906              		.loc 1 933 24 is_stmt 0 view .LVU3167
 11907 0000 084B     		ldr	r3, .L867
 11908 0002 1B68     		ldr	r3, [r3]
 11909              	.LBE2270:
 11910              	.LBE2269:
1351:src/xeq.c     **** 	if (is_dblmode())
 11911              		.loc 1 1351 54 view .LVU3168
 11912 0004 10B4     		push	{r4}
 11913              		.cfi_def_cfa_offset 4
 11914              		.cfi_offset 4, -4
 11915              	.LBB2272:
 11916              	.LBB2271:
 933:src/xeq.c     **** }
 11917              		.loc 1 933 24 view .LVU3169
 11918 0006 B3F8E847 		ldrh	r4, [r3, #2024]
 11919 000a 44F20103 		movw	r3, #16385
 11920              	.LBE2271:
 11921              	.LBE2272:
1352:src/xeq.c     **** 		n <<= 1;
 11922              		.loc 1 1352 5 view .LVU3170
 11923 000e 2340     		ands	r3, r3, r4
 11924 0010 B3F5804F 		cmp	r3, #16384
1353:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 11925              		.loc 1 1353 3 is_stmt 1 view .LVU3171
1353:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 11926              		.loc 1 1353 5 is_stmt 0 view .LVU3172
 11927 0014 08BF     		it	eq
 11928 0016 5200     		lsleq	r2, r2, #1
 11929              	.LVL889:
1354:src/xeq.c     **** }
 11930              		.loc 1 1354 2 is_stmt 1 view .LVU3173
1355:src/xeq.c     **** 
ARM GAS  /tmp/cc0UaEmF.s 			page 358


 11931              		.loc 1 1355 1 is_stmt 0 view .LVU3174
 11932 0018 5DF8044B 		ldr	r4, [sp], #4
 11933              		.cfi_restore 4
 11934              		.cfi_def_cfa_offset 0
1354:src/xeq.c     **** }
 11935              		.loc 1 1354 2 view .LVU3175
 11936 001c D200     		lsls	r2, r2, #3
 11937              	.LVL890:
1354:src/xeq.c     **** }
 11938              		.loc 1 1354 2 view .LVU3176
 11939 001e FFF7FEBF 		b	xcopy
 11940              	.LVL891:
 11941              	.L868:
1354:src/xeq.c     **** }
 11942              		.loc 1 1354 2 view .LVU3177
 11943 0022 00BF     		.align	2
 11944              	.L867:
 11945 0024 00000000 		.word	main_ram
 11946              		.cfi_endproc
 11947              	.LFE101:
 11949              		.section	.text.zero_X,"ax",%progbits
 11950              		.align	1
 11951              		.p2align 2,,3
 11952              		.global	zero_X
 11953              		.syntax unified
 11954              		.thumb
 11955              		.thumb_func
 11956              		.fpu fpv4-sp-d16
 11958              	zero_X:
 11959              	.LFB103:
1364:src/xeq.c     **** 	set_zero(StackBase);
 11960              		.loc 1 1364 19 is_stmt 1 view -0
 11961              		.cfi_startproc
 11962              		@ args = 0, pretend = 0, frame = 0
 11963              		@ frame_needed = 0, uses_anonymous_args = 0
 11964              		@ link register save eliminated.
1365:src/xeq.c     **** }
 11965              		.loc 1 1365 2 view .LVU3179
 11966 0000 014B     		ldr	r3, .L870
 11967 0002 1868     		ldr	r0, [r3]
 11968 0004 FFF7FEBF 		b	set_zero
 11969              	.LVL892:
 11970              	.L871:
 11971              		.align	2
 11972              	.L870:
 11973 0008 00000000 		.word	StackBase
 11974              		.cfi_endproc
 11975              	.LFE103:
 11977              		.section	.text.zero_Y,"ax",%progbits
 11978              		.align	1
 11979              		.p2align 2,,3
 11980              		.global	zero_Y
 11981              		.syntax unified
 11982              		.thumb
 11983              		.thumb_func
 11984              		.fpu fpv4-sp-d16
 11986              	zero_Y:
ARM GAS  /tmp/cc0UaEmF.s 			page 359


 11987              	.LFB104:
1368:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 11988              		.loc 1 1368 19 view -0
 11989              		.cfi_startproc
 11990              		@ args = 0, pretend = 0, frame = 0
 11991              		@ frame_needed = 0, uses_anonymous_args = 0
1369:src/xeq.c     **** }
 11992              		.loc 1 1369 2 view .LVU3181
1368:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 11993              		.loc 1 1368 19 is_stmt 0 view .LVU3182
 11994 0000 08B5     		push	{r3, lr}
 11995              		.cfi_def_cfa_offset 8
 11996              		.cfi_offset 3, -8
 11997              		.cfi_offset 14, -4
1369:src/xeq.c     **** }
 11998              		.loc 1 1369 2 view .LVU3183
 11999 0002 6520     		movs	r0, #101
 12000 0004 FFF7FEFF 		bl	get_reg_n
 12001              	.LVL893:
1370:src/xeq.c     **** 
 12002              		.loc 1 1370 1 view .LVU3184
 12003 0008 BDE80840 		pop	{r3, lr}
 12004              		.cfi_restore 14
 12005              		.cfi_restore 3
 12006              		.cfi_def_cfa_offset 0
1369:src/xeq.c     **** }
 12007              		.loc 1 1369 2 view .LVU3185
 12008 000c FFF7FEBF 		b	set_zero
 12009              	.LVL894:
 12010              		.cfi_endproc
 12011              	.LFE104:
 12013              		.section	.text.clrx,"ax",%progbits
 12014              		.align	1
 12015              		.p2align 2,,3
 12016              		.global	clrx
 12017              		.syntax unified
 12018              		.thumb
 12019              		.thumb_func
 12020              		.fpu fpv4-sp-d16
 12022              	clrx:
 12023              	.LVL895:
 12024              	.LFB105:
1372:src/xeq.c     **** 	zero_X();
 12025              		.loc 1 1372 26 is_stmt 1 view -0
 12026              		.cfi_startproc
 12027              		@ args = 0, pretend = 0, frame = 0
 12028              		@ frame_needed = 0, uses_anonymous_args = 0
1373:src/xeq.c     **** 	clr_lift();
 12029              		.loc 1 1373 2 view .LVU3187
 12030              	.LBB2273:
 12031              	.LBI2273:
1364:src/xeq.c     **** 	set_zero(StackBase);
 12032              		.loc 1 1364 6 view .LVU3188
 12033              	.LBB2274:
1365:src/xeq.c     **** }
 12034              		.loc 1 1365 2 view .LVU3189
 12035              	.LBE2274:
ARM GAS  /tmp/cc0UaEmF.s 			page 360


 12036              	.LBE2273:
1372:src/xeq.c     **** 	zero_X();
 12037              		.loc 1 1372 26 is_stmt 0 view .LVU3190
 12038 0000 08B5     		push	{r3, lr}
 12039              		.cfi_def_cfa_offset 8
 12040              		.cfi_offset 3, -8
 12041              		.cfi_offset 14, -4
 12042              	.LBB2276:
 12043              	.LBB2275:
1365:src/xeq.c     **** }
 12044              		.loc 1 1365 2 view .LVU3191
 12045 0002 054B     		ldr	r3, .L876
 12046 0004 1868     		ldr	r0, [r3]
 12047              	.LVL896:
1365:src/xeq.c     **** }
 12048              		.loc 1 1365 2 view .LVU3192
 12049 0006 FFF7FEFF 		bl	set_zero
 12050              	.LVL897:
 12051              	.LBE2275:
 12052              	.LBE2276:
1374:src/xeq.c     **** }
 12053              		.loc 1 1374 2 is_stmt 1 view .LVU3193
 12054              	.LBB2277:
 12055              	.LBI2277:
 752:src/xeq.c     ****     State2.state_lift = 0;
 12056              		.loc 1 752 13 view .LVU3194
 12057              	.LBB2278:
 753:src/xeq.c     **** }
 12058              		.loc 1 753 5 view .LVU3195
 753:src/xeq.c     **** }
 12059              		.loc 1 753 23 is_stmt 0 view .LVU3196
 12060 000a 044B     		ldr	r3, .L876+4
 12061 000c DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 12062 000e 6FF38612 		bfc	r2, #6, #1
 12063 0012 DA75     		strb	r2, [r3, #23]
 12064              	.LBE2278:
 12065              	.LBE2277:
1375:src/xeq.c     **** 
 12066              		.loc 1 1375 1 view .LVU3197
 12067 0014 08BD     		pop	{r3, pc}
 12068              	.L877:
 12069 0016 00BF     		.align	2
 12070              	.L876:
 12071 0018 00000000 		.word	StackBase
 12072 001c 00000000 		.word	StateWhileOn
 12073              		.cfi_endproc
 12074              	.LFE105:
 12076              		.section	.text.clrstk,"ax",%progbits
 12077              		.align	1
 12078              		.p2align 2,,3
 12079              		.global	clrstk
 12080              		.syntax unified
 12081              		.thumb
 12082              		.thumb_func
 12083              		.fpu fpv4-sp-d16
 12085              	clrstk:
 12086              	.LVL898:
ARM GAS  /tmp/cc0UaEmF.s 			page 361


 12087              	.LFB106:
1379:src/xeq.c     **** 	zero_regs(StackBase, stack_size());
 12088              		.loc 1 1379 28 is_stmt 1 view -0
 12089              		.cfi_startproc
 12090              		@ args = 0, pretend = 0, frame = 0
 12091              		@ frame_needed = 0, uses_anonymous_args = 0
1380:src/xeq.c     **** 	set_lift();
 12092              		.loc 1 1380 2 view .LVU3199
1379:src/xeq.c     **** 	zero_regs(StackBase, stack_size());
 12093              		.loc 1 1379 28 is_stmt 0 view .LVU3200
 12094 0000 08B5     		push	{r3, lr}
 12095              		.cfi_def_cfa_offset 8
 12096              		.cfi_offset 3, -8
 12097              		.cfi_offset 14, -4
 12098              	.LBB2279:
 12099              	.LBB2280:
 704:src/xeq.c     **** 		return 4;
 12100              		.loc 1 704 8 view .LVU3201
 12101 0002 164B     		ldr	r3, .L885
 12102              	.LBE2280:
 12103              	.LBE2279:
1380:src/xeq.c     **** 	set_lift();
 12104              		.loc 1 1380 2 view .LVU3202
 12105 0004 164A     		ldr	r2, .L885+4
 12106              	.LBB2286:
 12107              	.LBB2283:
 704:src/xeq.c     **** 		return 4;
 12108              		.loc 1 704 8 view .LVU3203
 12109 0006 1B68     		ldr	r3, [r3]
 12110              	.LBE2283:
 12111              	.LBE2286:
1380:src/xeq.c     **** 	set_lift();
 12112              		.loc 1 1380 2 view .LVU3204
 12113 0008 1068     		ldr	r0, [r2]
 12114              	.LVL899:
 12115              	.LBB2287:
 12116              	.LBI2279:
 703:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 12117              		.loc 1 703 5 is_stmt 1 view .LVU3205
 12118              	.LBB2284:
 704:src/xeq.c     **** 		return 4;
 12119              		.loc 1 704 2 view .LVU3206
 704:src/xeq.c     **** 		return 4;
 12120              		.loc 1 704 6 is_stmt 0 view .LVU3207
 12121 000a 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 704:src/xeq.c     **** 		return 4;
 12122              		.loc 1 704 5 view .LVU3208
 12123 000e 1207     		lsls	r2, r2, #28
 12124 0010 22D5     		bpl	.L880
 12125              	.LBB2281:
 12126              	.LBI2281:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 12127              		.loc 1 182 5 is_stmt 1 view .LVU3209
 12128              	.LBB2282:
 183:src/xeq.c     **** }
 12129              		.loc 1 183 2 view .LVU3210
 183:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 362


 12130              		.loc 1 183 9 is_stmt 0 view .LVU3211
 12131 0012 B3F8E027 		ldrh	r2, [r3, #2016]
 12132              	.LBE2282:
 12133              	.LBE2281:
 704:src/xeq.c     **** 		return 4;
 12134              		.loc 1 704 27 view .LVU3212
 12135 0016 920B     		lsrs	r2, r2, #14
 12136 0018 032A     		cmp	r2, #3
 12137 001a 15D0     		beq	.L884
 706:src/xeq.c     **** }
 12138              		.loc 1 706 9 view .LVU3213
 12139 001c 0822     		movs	r2, #8
 12140              	.L879:
 12141              	.LVL900:
 706:src/xeq.c     **** }
 12142              		.loc 1 706 9 view .LVU3214
 12143              	.LBE2284:
 12144              	.LBE2287:
 12145              	.LBB2288:
 12146              	.LBI2288:
1332:src/xeq.c     **** #if 0
 12147              		.loc 1 1332 6 is_stmt 1 view .LVU3215
 12148              	.LBB2289:
1347:src/xeq.c     **** #endif
 12149              		.loc 1 1347 2 view .LVU3216
 12150              	.LBB2290:
 12151              	.LBI2290:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12152              		.loc 1 932 5 view .LVU3217
 12153              	.LBB2291:
 933:src/xeq.c     **** }
 12154              		.loc 1 933 2 view .LVU3218
 933:src/xeq.c     **** }
 12155              		.loc 1 933 24 is_stmt 0 view .LVU3219
 12156 001e B3F8E817 		ldrh	r1, [r3, #2024]
 12157 0022 44F20103 		movw	r3, #16385
 12158 0026 0B40     		ands	r3, r3, r1
 12159 0028 A3F58043 		sub	r3, r3, #16384
 12160 002c B3FA83F3 		clz	r3, r3
 12161 0030 5B09     		lsrs	r3, r3, #5
 12162              	.LBE2291:
 12163              	.LBE2290:
1347:src/xeq.c     **** #endif
 12164              		.loc 1 1347 24 view .LVU3220
 12165 0032 0333     		adds	r3, r3, #3
1347:src/xeq.c     **** #endif
 12166              		.loc 1 1347 2 view .LVU3221
 12167 0034 9A40     		lsls	r2, r2, r3
 12168              	.LVL901:
1347:src/xeq.c     **** #endif
 12169              		.loc 1 1347 2 view .LVU3222
 12170 0036 0021     		movs	r1, #0
 12171 0038 FFF7FEFF 		bl	xset
 12172              	.LVL902:
1347:src/xeq.c     **** #endif
 12173              		.loc 1 1347 2 view .LVU3223
 12174              	.LBE2289:
ARM GAS  /tmp/cc0UaEmF.s 			page 363


 12175              	.LBE2288:
1381:src/xeq.c     **** }
 12176              		.loc 1 1381 2 is_stmt 1 view .LVU3224
 12177              	.LBB2292:
 12178              	.LBI2292:
 748:src/xeq.c     ****     State2.state_lift = 1;
 12179              		.loc 1 748 6 view .LVU3225
 12180              	.LBB2293:
 749:src/xeq.c     **** }
 12181              		.loc 1 749 5 view .LVU3226
 749:src/xeq.c     **** }
 12182              		.loc 1 749 23 is_stmt 0 view .LVU3227
 12183 003c 094A     		ldr	r2, .L885+8
 12184 003e D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 12185 0040 43F04003 		orr	r3, r3, #64
 12186 0044 D375     		strb	r3, [r2, #23]
 12187              	.LBE2293:
 12188              	.LBE2292:
1382:src/xeq.c     **** 
 12189              		.loc 1 1382 1 view .LVU3228
 12190 0046 08BD     		pop	{r3, pc}
 12191              	.L884:
 12192              	.LBB2294:
 12193              	.LBB2285:
 704:src/xeq.c     **** 		return 4;
 12194              		.loc 1 704 44 view .LVU3229
 12195 0048 074A     		ldr	r2, .L885+12
 704:src/xeq.c     **** 		return 4;
 12196              		.loc 1 704 41 view .LVU3230
 12197 004a 92F90120 		ldrsb	r2, [r2, #1]
 12198 004e 002A     		cmp	r2, #0
 705:src/xeq.c     **** 	return 8;
 12199              		.loc 1 705 10 view .LVU3231
 12200 0050 B4BF     		ite	lt
 12201 0052 0822     		movlt	r2, #8
 12202 0054 0422     		movge	r2, #4
 12203 0056 E2E7     		b	.L879
 12204              	.L880:
 12205 0058 0422     		movs	r2, #4
 12206 005a E0E7     		b	.L879
 12207              	.L886:
 12208              		.align	2
 12209              	.L885:
 12210 005c 00000000 		.word	main_ram
 12211 0060 00000000 		.word	StackBase
 12212 0064 00000000 		.word	StateWhileOn
 12213 0068 00000000 		.word	XromParams
 12214              	.LBE2285:
 12215              	.LBE2294:
 12216              		.cfi_endproc
 12217              	.LFE106:
 12219              		.section	.text.clrreg,"ax",%progbits
 12220              		.align	1
 12221              		.p2align 2,,3
 12222              		.global	clrreg
 12223              		.syntax unified
 12224              		.thumb
ARM GAS  /tmp/cc0UaEmF.s 			page 364


 12225              		.thumb_func
 12226              		.fpu fpv4-sp-d16
 12228              	clrreg:
 12229              	.LVL903:
 12230              	.LFB107:
1387:src/xeq.c     **** 	const int local = local_regs();
 12231              		.loc 1 1387 28 is_stmt 1 view -0
 12232              		.cfi_startproc
 12233              		@ args = 0, pretend = 0, frame = 0
 12234              		@ frame_needed = 0, uses_anonymous_args = 0
1388:src/xeq.c     **** 	process_cmdline_set_lift();
 12235              		.loc 1 1388 2 view .LVU3233
 12236              	.LBB2295:
 12237              	.LBI2295:
 230:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 12238              		.loc 1 230 5 view .LVU3234
 12239              	.LBE2295:
 231:src/xeq.c     **** }
 12240              		.loc 1 231 2 view .LVU3235
 12241              	.LBB2326:
 12242              	.LBB2296:
 12243              	.LBI2296:
 222:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 12244              		.loc 1 222 5 view .LVU3236
 12245              	.LBB2297:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 12246              		.loc 1 223 2 view .LVU3237
 12247              	.LBB2298:
 12248              	.LBI2298:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12249              		.loc 1 932 5 view .LVU3238
 12250              	.LBB2299:
 933:src/xeq.c     **** }
 12251              		.loc 1 933 2 view .LVU3239
 12252              	.LBE2299:
 12253              	.LBE2298:
 12254              	.LBE2297:
 12255              	.LBE2296:
 12256              	.LBE2326:
1387:src/xeq.c     **** 	const int local = local_regs();
 12257              		.loc 1 1387 28 is_stmt 0 view .LVU3240
 12258 0000 70B5     		push	{r4, r5, r6, lr}
 12259              		.cfi_def_cfa_offset 16
 12260              		.cfi_offset 4, -16
 12261              		.cfi_offset 5, -12
 12262              		.cfi_offset 6, -8
 12263              		.cfi_offset 14, -4
 12264              	.LBB2327:
 12265              	.LBB2322:
 12266              	.LBB2318:
 12267              	.LBB2303:
 12268              	.LBB2300:
 933:src/xeq.c     **** }
 12269              		.loc 1 933 12 view .LVU3241
 12270 0002 464C     		ldr	r4, .L907
 12271 0004 2368     		ldr	r3, [r4]
 12272              	.LVL904:
ARM GAS  /tmp/cc0UaEmF.s 			page 365


 933:src/xeq.c     **** }
 12273              		.loc 1 933 12 view .LVU3242
 12274              	.LBE2300:
 12275              	.LBE2303:
 224:src/xeq.c     **** }
 12276              		.loc 1 224 2 is_stmt 1 view .LVU3243
 12277              	.LBB2304:
 12278              	.LBI2304:
 214:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 12279              		.loc 1 214 5 view .LVU3244
 12280              	.LBB2305:
 215:src/xeq.c     **** }
 12281              		.loc 1 215 2 view .LVU3245
 215:src/xeq.c     **** }
 12282              		.loc 1 215 9 is_stmt 0 view .LVU3246
 12283 0006 B3F9DE27 		ldrsh	r2, [r3, #2014]
 215:src/xeq.c     **** }
 12284              		.loc 1 215 57 view .LVU3247
 12285 000a 002A     		cmp	r2, #0
 12286 000c 58DB     		blt	.L903
 12287              	.LVL905:
 215:src/xeq.c     **** }
 12288              		.loc 1 215 57 view .LVU3248
 12289              	.LBE2305:
 12290              	.LBE2304:
 12291              	.LBE2318:
 12292              	.LBE2322:
 12293              	.LBE2327:
1389:src/xeq.c     **** 
 12294              		.loc 1 1389 2 is_stmt 1 view .LVU3249
 12295              	.LBB2328:
 12296              	.LBI2328:
1146:src/xeq.c     **** 	process_cmdline();
 12297              		.loc 1 1146 6 view .LVU3250
 12298              	.LBE2328:
1147:src/xeq.c     **** 	set_lift();
 12299              		.loc 1 1147 2 view .LVU3251
 12300              	.LBB2339:
 12301              	.LBB2329:
 12302              	.LBI2329:
1040:src/xeq.c     **** 	decNumber a, b, x, t;
 12303              		.loc 1 1040 6 view .LVU3252
 12304              	.LBB2330:
1041:src/xeq.c     **** 
 12305              		.loc 1 1041 2 view .LVU3253
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12306              		.loc 1 1043 2 view .LVU3254
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12307              		.loc 1 1043 6 is_stmt 0 view .LVU3255
 12308 000e 444D     		ldr	r5, .L907+4
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12309              		.loc 1 1043 5 view .LVU3256
 12310 0010 2B7F     		ldrb	r3, [r5, #28]	@ zero_extendqisi2
 12311              	.LVL906:
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12312              		.loc 1 1043 5 view .LVU3257
 12313              	.LBE2330:
ARM GAS  /tmp/cc0UaEmF.s 			page 366


 12314              	.LBE2329:
 12315              	.LBE2339:
 12316              	.LBB2340:
 12317              	.LBB2323:
 12318              	.LBB2319:
 12319              	.LBB2311:
 12320              	.LBB2306:
 12321 0012 0026     		movs	r6, #0
 12322              	.LBE2306:
 12323              	.LBE2311:
 12324              	.LBE2319:
 12325              	.LBE2323:
 12326              	.LBE2340:
 12327              	.LBB2341:
 12328              	.LBB2334:
 12329              	.LBB2331:
 12330 0014 002B     		cmp	r3, #0
 12331 0016 69D1     		bne	.L904
 12332              	.LVL907:
 12333              	.L889:
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12334              		.loc 1 1043 5 view .LVU3258
 12335              	.LBE2331:
 12336              	.LBE2334:
 12337              	.LBE2341:
1148:src/xeq.c     **** }
 12338              		.loc 1 1148 2 is_stmt 1 view .LVU3259
 12339              	.LBB2342:
 12340              	.LBB2335:
 12341              	.LBI2335:
 748:src/xeq.c     ****     State2.state_lift = 1;
 12342              		.loc 1 748 6 view .LVU3260
 12343              	.LBB2336:
 749:src/xeq.c     **** }
 12344              		.loc 1 749 5 view .LVU3261
 749:src/xeq.c     **** }
 12345              		.loc 1 749 23 is_stmt 0 view .LVU3262
 12346 0018 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 12347 001a 43F04003 		orr	r3, r3, #64
 12348 001e EB75     		strb	r3, [r5, #23]
 12349              	.LBE2336:
 12350              	.LBE2335:
 12351              	.LBE2342:
1392:src/xeq.c     **** 
 12352              		.loc 1 1392 2 is_stmt 1 view .LVU3263
 12353 0020 0020     		movs	r0, #0
 12354 0022 FFF7FEFF 		bl	get_reg_n
 12355              	.LVL908:
 12356              	.LBB2343:
 12357              	.LBB2344:
 12358              	.LBB2345:
 12359              	.LBB2346:
 12360              	.LBB2347:
 933:src/xeq.c     **** }
 12361              		.loc 1 933 12 is_stmt 0 view .LVU3264
 12362 0026 2168     		ldr	r1, [r4]
 933:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 367


 12363              		.loc 1 933 24 view .LVU3265
 12364 0028 B1F8E827 		ldrh	r2, [r1, #2024]
 12365 002c 44F20103 		movw	r3, #16385
 12366 0030 1340     		ands	r3, r3, r2
 12367              	.LBE2347:
 12368              	.LBE2346:
 12369              	.LBE2345:
 12370              	.LBE2344:
 12371              	.LBI2343:
 250:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 12372              		.loc 1 250 14 is_stmt 1 view .LVU3266
 12373              	.LBE2343:
 251:src/xeq.c     **** }
 12374              		.loc 1 251 2 view .LVU3267
 12375              	.LVL909:
 12376              	.LBB2362:
 12377              	.LBB2358:
 12378              	.LBI2344:
 238:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 12379              		.loc 1 238 14 view .LVU3268
 12380              	.LBB2354:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 12381              		.loc 1 239 2 view .LVU3269
 12382              	.LBB2349:
 12383              	.LBI2346:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12384              		.loc 1 932 5 view .LVU3270
 12385              	.LBB2348:
 933:src/xeq.c     **** }
 12386              		.loc 1 933 2 view .LVU3271
 12387              	.LBE2348:
 12388              	.LBE2349:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 12389              		.loc 1 239 5 is_stmt 0 view .LVU3272
 12390 0032 B3F5804F 		cmp	r3, #16384
 12391              	.LBB2350:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 12392              		.loc 1 240 3 is_stmt 1 view .LVU3273
 241:src/xeq.c     **** 	}
 12393              		.loc 1 241 3 view .LVU3274
 12394              	.LVL910:
 241:src/xeq.c     **** 	}
 12395              		.loc 1 241 3 is_stmt 0 view .LVU3275
 12396              	.LBE2350:
 12397              	.LBE2354:
 12398              	.LBE2358:
 12399              	.LBE2362:
 12400              	.LBB2363:
 12401              	.LBI2363:
1332:src/xeq.c     **** #if 0
 12402              		.loc 1 1332 6 is_stmt 1 view .LVU3276
 12403              	.LBB2364:
1347:src/xeq.c     **** #endif
 12404              		.loc 1 1347 2 view .LVU3277
 12405              	.LBB2365:
 12406              	.LBI2365:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
ARM GAS  /tmp/cc0UaEmF.s 			page 368


 12407              		.loc 1 932 5 view .LVU3278
 12408              	.LBB2366:
 933:src/xeq.c     **** }
 12409              		.loc 1 933 2 view .LVU3279
 12410              	.LBE2366:
 12411              	.LBE2365:
 12412              	.LBE2364:
 12413              	.LBE2363:
 12414              	.LBB2374:
 12415              	.LBB2359:
 12416              	.LBB2355:
 12417              	.LBB2351:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 12418              		.loc 1 240 24 is_stmt 0 view .LVU3280
 12419 0036 91F8CF27 		ldrb	r2, [r1, #1999]	@ zero_extendqisi2
 12420              	.LBE2351:
 12421              	.LBE2355:
 12422              	.LBE2359:
 12423              	.LBE2374:
 12424              	.LBB2375:
 12425              	.LBB2371:
 12426              	.LBB2369:
 12427              	.LBB2367:
 933:src/xeq.c     **** }
 12428              		.loc 1 933 24 view .LVU3281
 12429 003a A3F58043 		sub	r3, r3, #16384
 12430 003e B3FA83F3 		clz	r3, r3
 12431              	.LBE2367:
 12432              	.LBE2369:
 12433              	.LBE2371:
 12434              	.LBE2375:
 12435              	.LBB2376:
 12436              	.LBB2360:
 12437              	.LBB2356:
 12438              	.LBB2352:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 12439              		.loc 1 240 13 view .LVU3282
 12440 0042 08BF     		it	eq
 12441 0044 0C3A     		subeq	r2, r2, #12
 12442              	.LBE2352:
 12443              	.LBE2356:
 12444              	.LBE2360:
 12445              	.LBE2376:
 12446              	.LBB2377:
 12447              	.LBB2372:
 12448              	.LBB2370:
 12449              	.LBB2368:
 933:src/xeq.c     **** }
 12450              		.loc 1 933 24 view .LVU3283
 12451 0046 4FEA5313 		lsr	r3, r3, #5
 12452              	.LBE2368:
 12453              	.LBE2370:
 12454              	.LBE2372:
 12455              	.LBE2377:
 12456              	.LBB2378:
 12457              	.LBB2361:
 12458              	.LBB2357:
ARM GAS  /tmp/cc0UaEmF.s 			page 369


 12459              	.LBB2353:
 241:src/xeq.c     **** 	}
 12460              		.loc 1 241 67 view .LVU3284
 12461 004a 08BF     		it	eq
 12462 004c 5210     		asreq	r2, r2, #1
 12463              	.LBE2353:
 12464              	.LBE2357:
 12465              	.LBE2361:
 12466              	.LBE2378:
 12467              	.LBB2379:
 12468              	.LBB2373:
1347:src/xeq.c     **** #endif
 12469              		.loc 1 1347 24 view .LVU3285
 12470 004e 0333     		adds	r3, r3, #3
1347:src/xeq.c     **** #endif
 12471              		.loc 1 1347 2 view .LVU3286
 12472 0050 9A40     		lsls	r2, r2, r3
 12473 0052 0021     		movs	r1, #0
 12474 0054 FFF7FEFF 		bl	xset
 12475              	.LVL911:
1347:src/xeq.c     **** #endif
 12476              		.loc 1 1347 2 view .LVU3287
 12477              	.LBE2373:
 12478              	.LBE2379:
1395:src/xeq.c     **** 		zero_regs(get_reg_n(regA_idx), 4);
 12479              		.loc 1 1395 2 is_stmt 1 view .LVU3288
 12480              	.LBB2380:
 12481              	.LBI2380:
 703:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 12482              		.loc 1 703 5 view .LVU3289
 12483              	.LBB2381:
 704:src/xeq.c     **** 		return 4;
 12484              		.loc 1 704 2 view .LVU3290
 704:src/xeq.c     **** 		return 4;
 12485              		.loc 1 704 8 is_stmt 0 view .LVU3291
 12486 0058 2368     		ldr	r3, [r4]
 704:src/xeq.c     **** 		return 4;
 12487              		.loc 1 704 6 view .LVU3292
 12488 005a 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 704:src/xeq.c     **** 		return 4;
 12489              		.loc 1 704 5 view .LVU3293
 12490 005e 1207     		lsls	r2, r2, #28
 12491 0060 1CD5     		bpl	.L892
 12492              	.LBB2382:
 12493              	.LBI2382:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 12494              		.loc 1 182 5 is_stmt 1 view .LVU3294
 12495              	.LBB2383:
 183:src/xeq.c     **** }
 12496              		.loc 1 183 2 view .LVU3295
 183:src/xeq.c     **** }
 12497              		.loc 1 183 9 is_stmt 0 view .LVU3296
 12498 0062 B3F8E037 		ldrh	r3, [r3, #2016]
 12499              	.LBE2383:
 12500              	.LBE2382:
 704:src/xeq.c     **** 		return 4;
 12501              		.loc 1 704 27 view .LVU3297
ARM GAS  /tmp/cc0UaEmF.s 			page 370


 12502 0066 9B0B     		lsrs	r3, r3, #14
 12503 0068 032B     		cmp	r3, #3
 12504 006a 12D0     		beq	.L905
 12505              	.L893:
 12506              	.LBE2381:
 12507              	.LBE2380:
1399:src/xeq.c     **** 
 12508              		.loc 1 1399 2 is_stmt 1 view .LVU3298
 12509 006c 6E20     		movs	r0, #110
 12510 006e FFF7FEFF 		bl	get_reg_n
 12511              	.LVL912:
 12512              	.LBB2385:
 12513              	.LBI2385:
1332:src/xeq.c     **** #if 0
 12514              		.loc 1 1332 6 view .LVU3299
 12515              	.LBB2386:
1347:src/xeq.c     **** #endif
 12516              		.loc 1 1347 2 view .LVU3300
 12517              	.LBB2387:
 12518              	.LBI2387:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12519              		.loc 1 932 5 view .LVU3301
 12520              	.LBB2388:
 933:src/xeq.c     **** }
 12521              		.loc 1 933 2 view .LVU3302
 933:src/xeq.c     **** }
 12522              		.loc 1 933 24 is_stmt 0 view .LVU3303
 12523 0072 2368     		ldr	r3, [r4]
 12524 0074 B3F8E827 		ldrh	r2, [r3, #2024]
 12525 0078 44F20105 		movw	r5, #16385
 12526 007c 2A40     		ands	r2, r2, r5
 12527              	.LBE2388:
 12528              	.LBE2387:
1347:src/xeq.c     **** #endif
 12529              		.loc 1 1347 2 view .LVU3304
 12530 007e B2F5804F 		cmp	r2, #16384
 12531 0082 0CBF     		ite	eq
 12532 0084 2022     		moveq	r2, #32
 12533 0086 1022     		movne	r2, #16
 12534 0088 0021     		movs	r1, #0
 12535 008a FFF7FEFF 		bl	xset
 12536              	.LVL913:
1347:src/xeq.c     **** #endif
 12537              		.loc 1 1347 2 view .LVU3305
 12538              	.LBE2386:
 12539              	.LBE2385:
1402:src/xeq.c     **** 		zero_regs(get_reg_n(LOCAL_REG_BASE), local);
 12540              		.loc 1 1402 2 is_stmt 1 view .LVU3306
1402:src/xeq.c     **** 		zero_regs(get_reg_n(LOCAL_REG_BASE), local);
 12541              		.loc 1 1402 5 is_stmt 0 view .LVU3307
 12542 008e 86BB     		cbnz	r6, .L906
1404:src/xeq.c     **** 
 12543              		.loc 1 1404 1 view .LVU3308
 12544 0090 70BD     		pop	{r4, r5, r6, pc}
 12545              	.L905:
 12546              	.LBB2389:
 12547              	.LBB2384:
ARM GAS  /tmp/cc0UaEmF.s 			page 371


 704:src/xeq.c     **** 		return 4;
 12548              		.loc 1 704 44 view .LVU3309
 12549 0092 244B     		ldr	r3, .L907+8
 704:src/xeq.c     **** 		return 4;
 12550              		.loc 1 704 41 view .LVU3310
 12551 0094 93F90130 		ldrsb	r3, [r3, #1]
 12552 0098 002B     		cmp	r3, #0
 12553 009a E7DB     		blt	.L893
 12554              	.L892:
 705:src/xeq.c     **** 	return 8;
 12555              		.loc 1 705 3 is_stmt 1 view .LVU3311
 12556              	.LBE2384:
 12557              	.LBE2389:
1396:src/xeq.c     **** 
 12558              		.loc 1 1396 3 view .LVU3312
 12559 009c 6820     		movs	r0, #104
 12560 009e FFF7FEFF 		bl	get_reg_n
 12561              	.LVL914:
 12562              	.LBB2390:
 12563              	.LBI2390:
1332:src/xeq.c     **** #if 0
 12564              		.loc 1 1332 6 view .LVU3313
 12565              	.LBB2391:
1347:src/xeq.c     **** #endif
 12566              		.loc 1 1347 2 view .LVU3314
 12567              	.LBB2392:
 12568              	.LBI2392:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12569              		.loc 1 932 5 view .LVU3315
 12570              	.LBB2393:
 933:src/xeq.c     **** }
 12571              		.loc 1 933 2 view .LVU3316
 933:src/xeq.c     **** }
 12572              		.loc 1 933 24 is_stmt 0 view .LVU3317
 12573 00a2 2368     		ldr	r3, [r4]
 12574 00a4 B3F8E837 		ldrh	r3, [r3, #2024]
 12575 00a8 44F20102 		movw	r2, #16385
 12576 00ac 1A40     		ands	r2, r2, r3
 12577              	.LBE2393:
 12578              	.LBE2392:
1347:src/xeq.c     **** #endif
 12579              		.loc 1 1347 2 view .LVU3318
 12580 00ae B2F5804F 		cmp	r2, #16384
 12581 00b2 0CBF     		ite	eq
 12582 00b4 4022     		moveq	r2, #64
 12583 00b6 2022     		movne	r2, #32
 12584 00b8 0021     		movs	r1, #0
 12585 00ba FFF7FEFF 		bl	xset
 12586              	.LVL915:
1349:src/xeq.c     **** 
 12587              		.loc 1 1349 1 view .LVU3319
 12588 00be D5E7     		b	.L893
 12589              	.LVL916:
 12590              	.L903:
1349:src/xeq.c     **** 
 12591              		.loc 1 1349 1 view .LVU3320
 12592              	.LBE2391:
ARM GAS  /tmp/cc0UaEmF.s 			page 372


 12593              	.LBE2390:
 12594              	.LBB2394:
 12595              	.LBB2324:
 12596              	.LBB2320:
 12597              	.LBB2312:
 12598              	.LBB2301:
 933:src/xeq.c     **** }
 12599              		.loc 1 933 24 view .LVU3321
 12600 00c0 B3F8E867 		ldrh	r6, [r3, #2024]
 12601              	.LBE2301:
 12602              	.LBE2312:
 12603              	.LBB2313:
 12604              	.LBB2307:
 215:src/xeq.c     **** }
 12605              		.loc 1 215 25 view .LVU3322
 12606 00c4 1849     		ldr	r1, .L907+12
 12607              	.LBE2307:
 12608              	.LBE2313:
 12609              	.LBE2320:
 12610              	.LBE2324:
 12611              	.LBE2394:
 12612              	.LBB2395:
 12613              	.LBB2337:
 12614              	.LBB2332:
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12615              		.loc 1 1043 6 view .LVU3323
 12616 00c6 164D     		ldr	r5, .L907+4
 12617              	.LBE2332:
 12618              	.LBE2337:
 12619              	.LBE2395:
 12620              	.LBB2396:
 12621              	.LBB2325:
 12622              	.LBB2321:
 12623              	.LBB2314:
 12624              	.LBB2308:
 215:src/xeq.c     **** }
 12625              		.loc 1 215 25 view .LVU3324
 12626 00c8 0968     		ldr	r1, [r1]
 12627              	.LBE2308:
 12628              	.LBE2314:
 12629              	.LBB2315:
 12630              	.LBB2302:
 933:src/xeq.c     **** }
 12631              		.loc 1 933 24 view .LVU3325
 12632 00ca 44F20103 		movw	r3, #16385
 12633              	.LVL917:
 933:src/xeq.c     **** }
 12634              		.loc 1 933 24 view .LVU3326
 12635              	.LBE2302:
 12636              	.LBE2315:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 12637              		.loc 1 223 73 view .LVU3327
 12638 00ce 3340     		ands	r3, r3, r6
 12639 00d0 A3F58043 		sub	r3, r3, #16384
 12640              	.LBB2316:
 12641              	.LBB2309:
 215:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 373


 12642              		.loc 1 215 57 view .LVU3328
 12643 00d4 31F81260 		ldrh	r6, [r1, r2, lsl #1]
 12644              	.LBE2309:
 12645              	.LBE2316:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 12646              		.loc 1 223 73 view .LVU3329
 12647 00d8 B3FA83F3 		clz	r3, r3
 12648 00dc 5B09     		lsrs	r3, r3, #5
 12649 00de 0233     		adds	r3, r3, #2
 12650              	.LBB2317:
 12651              	.LBB2310:
 215:src/xeq.c     **** }
 12652              		.loc 1 215 57 view .LVU3330
 12653 00e0 C6F30B06 		ubfx	r6, r6, #0, #12
 12654 00e4 1E41     		asrs	r6, r6, r3
 12655              	.LVL918:
 215:src/xeq.c     **** }
 12656              		.loc 1 215 57 view .LVU3331
 12657              	.LBE2310:
 12658              	.LBE2317:
 12659              	.LBE2321:
 12660              	.LBE2325:
 12661              	.LBE2396:
1389:src/xeq.c     **** 
 12662              		.loc 1 1389 2 is_stmt 1 view .LVU3332
 12663              	.LBB2397:
1146:src/xeq.c     **** 	process_cmdline();
 12664              		.loc 1 1146 6 view .LVU3333
 12665              	.LBE2397:
1147:src/xeq.c     **** 	set_lift();
 12666              		.loc 1 1147 2 view .LVU3334
 12667              	.LBB2398:
 12668              	.LBB2338:
1040:src/xeq.c     **** 	decNumber a, b, x, t;
 12669              		.loc 1 1040 6 view .LVU3335
 12670              	.LBB2333:
1041:src/xeq.c     **** 
 12671              		.loc 1 1041 2 view .LVU3336
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12672              		.loc 1 1043 2 view .LVU3337
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12673              		.loc 1 1043 5 is_stmt 0 view .LVU3338
 12674 00e6 2B7F     		ldrb	r3, [r5, #28]	@ zero_extendqisi2
 12675 00e8 002B     		cmp	r3, #0
 12676 00ea 95D0     		beq	.L889
 12677              	.L904:
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12678              		.loc 1 1043 5 view .LVU3339
 12679 00ec FFF7FEFF 		bl	process_cmdline.part.0
 12680              	.LVL919:
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12681              		.loc 1 1043 5 view .LVU3340
 12682 00f0 92E7     		b	.L889
 12683              	.L906:
 12684              	.LBE2333:
 12685              	.LBE2338:
 12686              	.LBE2398:
ARM GAS  /tmp/cc0UaEmF.s 			page 374


1403:src/xeq.c     **** }
 12687              		.loc 1 1403 3 is_stmt 1 view .LVU3341
 12688 00f2 7020     		movs	r0, #112
 12689 00f4 FFF7FEFF 		bl	get_reg_n
 12690              	.LVL920:
 12691              	.LBB2399:
 12692              	.LBI2399:
1332:src/xeq.c     **** #if 0
 12693              		.loc 1 1332 6 view .LVU3342
 12694              	.LBB2400:
1347:src/xeq.c     **** #endif
 12695              		.loc 1 1347 2 view .LVU3343
 12696              	.LBB2401:
 12697              	.LBI2401:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12698              		.loc 1 932 5 view .LVU3344
 12699              	.LBB2402:
 933:src/xeq.c     **** }
 12700              		.loc 1 933 2 view .LVU3345
 933:src/xeq.c     **** }
 12701              		.loc 1 933 24 is_stmt 0 view .LVU3346
 12702 00f8 2368     		ldr	r3, [r4]
 12703 00fa B3F8E827 		ldrh	r2, [r3, #2024]
 12704 00fe 2A40     		ands	r2, r2, r5
 12705 0100 A2F58042 		sub	r2, r2, #16384
 12706 0104 B2FA82F2 		clz	r2, r2
 12707 0108 5209     		lsrs	r2, r2, #5
 12708              	.LBE2402:
 12709              	.LBE2401:
1347:src/xeq.c     **** #endif
 12710              		.loc 1 1347 24 view .LVU3347
 12711 010a 0332     		adds	r2, r2, #3
1347:src/xeq.c     **** #endif
 12712              		.loc 1 1347 2 view .LVU3348
 12713 010c 06FA02F2 		lsl	r2, r6, r2
 12714 0110 0021     		movs	r1, #0
 12715              	.LBE2400:
 12716              	.LBE2399:
1404:src/xeq.c     **** 
 12717              		.loc 1 1404 1 view .LVU3349
 12718 0112 BDE87040 		pop	{r4, r5, r6, lr}
 12719              		.cfi_restore 14
 12720              		.cfi_restore 6
 12721              		.cfi_restore 5
 12722              		.cfi_restore 4
 12723              		.cfi_def_cfa_offset 0
 12724              	.LBB2404:
 12725              	.LBB2403:
1347:src/xeq.c     **** #endif
 12726              		.loc 1 1347 2 view .LVU3350
 12727 0116 FFF7FEBF 		b	xset
 12728              	.LVL921:
 12729              	.L908:
1347:src/xeq.c     **** #endif
 12730              		.loc 1 1347 2 view .LVU3351
 12731 011a 00BF     		.align	2
 12732              	.L907:
ARM GAS  /tmp/cc0UaEmF.s 			page 375


 12733 011c 00000000 		.word	main_ram
 12734 0120 00000000 		.word	StateWhileOn
 12735 0124 00000000 		.word	XromParams
 12736 0128 00000000 		.word	RetStk
 12737              	.LBE2403:
 12738              	.LBE2404:
 12739              		.cfi_endproc
 12740              	.LFE107:
 12742              		.section	.text.clrretstk,"ax",%progbits
 12743              		.align	1
 12744              		.p2align 2,,3
 12745              		.global	clrretstk
 12746              		.syntax unified
 12747              		.thumb
 12748              		.thumb_func
 12749              		.fpu fpv4-sp-d16
 12751              	clrretstk:
 12752              	.LFB108:
1409:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 12753              		.loc 1 1409 22 is_stmt 1 view -0
 12754              		.cfi_startproc
 12755              		@ args = 0, pretend = 0, frame = 0
 12756              		@ frame_needed = 0, uses_anonymous_args = 0
 12757              		@ link register save eliminated.
1410:src/xeq.c     **** }
 12758              		.loc 1 1410 2 view .LVU3353
1410:src/xeq.c     **** }
 12759              		.loc 1 1410 14 is_stmt 0 view .LVU3354
 12760 0000 034B     		ldr	r3, .L910
 12761 0002 1B68     		ldr	r3, [r3]
1410:src/xeq.c     **** }
 12762              		.loc 1 1410 24 view .LVU3355
 12763 0004 0022     		movs	r2, #0
 12764 0006 A3F8DE27 		strh	r2, [r3, #2014]	@ movhi
1410:src/xeq.c     **** }
 12765              		.loc 1 1410 12 view .LVU3356
 12766 000a A3F8E227 		strh	r2, [r3, #2018]	@ movhi
1411:src/xeq.c     **** 
 12767              		.loc 1 1411 1 view .LVU3357
 12768 000e 7047     		bx	lr
 12769              	.L911:
 12770              		.align	2
 12771              	.L910:
 12772 0010 00000000 		.word	main_ram
 12773              		.cfi_endproc
 12774              	.LFE108:
 12776              		.section	.text.clrretstk_pc,"ax",%progbits
 12777              		.align	1
 12778              		.p2align 2,,3
 12779              		.global	clrretstk_pc
 12780              		.syntax unified
 12781              		.thumb
 12782              		.thumb_func
 12783              		.fpu fpv4-sp-d16
 12785              	clrretstk_pc:
 12786              	.LFB109:
1413:src/xeq.c     **** 	clrretstk();
ARM GAS  /tmp/cc0UaEmF.s 			page 376


 12787              		.loc 1 1413 25 is_stmt 1 view -0
 12788              		.cfi_startproc
 12789              		@ args = 0, pretend = 0, frame = 0
 12790              		@ frame_needed = 0, uses_anonymous_args = 0
1414:src/xeq.c     **** 	raw_set_pc(0);
 12791              		.loc 1 1414 2 view .LVU3359
 12792              	.LBB2405:
 12793              	.LBI2405:
1409:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 12794              		.loc 1 1409 6 view .LVU3360
 12795              	.LBB2406:
1410:src/xeq.c     **** }
 12796              		.loc 1 1410 2 view .LVU3361
 12797              	.LBE2406:
 12798              	.LBE2405:
1413:src/xeq.c     **** 	clrretstk();
 12799              		.loc 1 1413 25 is_stmt 0 view .LVU3362
 12800 0000 08B5     		push	{r3, lr}
 12801              		.cfi_def_cfa_offset 8
 12802              		.cfi_offset 3, -8
 12803              		.cfi_offset 14, -4
 12804              	.LBB2409:
 12805              	.LBB2407:
1410:src/xeq.c     **** }
 12806              		.loc 1 1410 14 view .LVU3363
 12807 0002 074B     		ldr	r3, .L914
 12808 0004 1B68     		ldr	r3, [r3]
 12809              	.LBE2407:
 12810              	.LBE2409:
1415:src/xeq.c     **** 	update_program_bounds(1);
 12811              		.loc 1 1415 2 is_stmt 1 view .LVU3364
 12812              	.LVL922:
 12813              	.LBB2410:
 12814              	.LBI2410:
 279:src/xeq.c     **** 	State.pc = pc;
 12815              		.loc 1 279 13 view .LVU3365
 12816              	.LBB2411:
 280:src/xeq.c     **** 	update_program_bounds(0);
 12817              		.loc 1 280 2 view .LVU3366
 12818              	.LBE2411:
 12819              	.LBE2410:
 12820              	.LBB2413:
 12821              	.LBB2408:
1410:src/xeq.c     **** }
 12822              		.loc 1 1410 24 is_stmt 0 view .LVU3367
 12823 0006 0020     		movs	r0, #0
 12824 0008 A3F8DE07 		strh	r0, [r3, #2014]	@ movhi
 12825              	.LBE2408:
 12826              	.LBE2413:
 12827              	.LBB2414:
 12828              	.LBB2412:
 280:src/xeq.c     **** 	update_program_bounds(0);
 12829              		.loc 1 280 11 view .LVU3368
 12830 000c C3F8E007 		str	r0, [r3, #2016]
 281:src/xeq.c     **** }
 12831              		.loc 1 281 2 is_stmt 1 view .LVU3369
 12832 0010 FFF7FEFF 		bl	update_program_bounds
ARM GAS  /tmp/cc0UaEmF.s 			page 377


 12833              	.LVL923:
 281:src/xeq.c     **** }
 12834              		.loc 1 281 2 is_stmt 0 view .LVU3370
 12835              	.LBE2412:
 12836              	.LBE2414:
1416:src/xeq.c     **** }
 12837              		.loc 1 1416 2 is_stmt 1 view .LVU3371
1417:src/xeq.c     **** 
 12838              		.loc 1 1417 1 is_stmt 0 view .LVU3372
 12839 0014 BDE80840 		pop	{r3, lr}
 12840              		.cfi_restore 14
 12841              		.cfi_restore 3
 12842              		.cfi_def_cfa_offset 0
1416:src/xeq.c     **** }
 12843              		.loc 1 1416 2 view .LVU3373
 12844 0018 0120     		movs	r0, #1
 12845 001a FFF7FEBF 		b	update_program_bounds
 12846              	.LVL924:
 12847              	.L915:
 12848 001e 00BF     		.align	2
 12849              	.L914:
 12850 0020 00000000 		.word	main_ram
 12851              		.cfi_endproc
 12852              	.LFE109:
 12854              		.section	.text.cmdconst,"ax",%progbits
 12855              		.align	1
 12856              		.p2align 2,,3
 12857              		.global	cmdconst
 12858              		.syntax unified
 12859              		.thumb
 12860              		.thumb_func
 12861              		.fpu fpv4-sp-d16
 12863              	cmdconst:
 12864              	.LVL925:
 12865              	.LFB110:
1423:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 12866              		.loc 1 1423 47 is_stmt 1 view -0
 12867              		.cfi_startproc
 12868              		@ args = 0, pretend = 0, frame = 0
 12869              		@ frame_needed = 0, uses_anonymous_args = 0
1425:src/xeq.c     **** #else
 12870              		.loc 1 1425 2 view .LVU3375
1423:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 12871              		.loc 1 1423 47 is_stmt 0 view .LVU3376
 12872 0000 70B5     		push	{r4, r5, r6, lr}
 12873              		.cfi_def_cfa_offset 16
 12874              		.cfi_offset 4, -16
 12875              		.cfi_offset 5, -12
 12876              		.cfi_offset 6, -8
 12877              		.cfi_offset 14, -4
1425:src/xeq.c     **** #else
 12878              		.loc 1 1425 5 view .LVU3377
 12879 0002 01F0FD03 		and	r3, r1, #253
 12880 0006 882B     		cmp	r3, #136
1423:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 12881              		.loc 1 1423 47 view .LVU3378
 12882 0008 82B0     		sub	sp, sp, #8
ARM GAS  /tmp/cc0UaEmF.s 			page 378


 12883              		.cfi_def_cfa_offset 24
1423:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 12884              		.loc 1 1423 47 view .LVU3379
 12885 000a 0C46     		mov	r4, r1
 12886 000c 0646     		mov	r6, r0
1425:src/xeq.c     **** #else
 12887              		.loc 1 1425 5 view .LVU3380
 12888 000e 08D0     		beq	.L917
1425:src/xeq.c     **** #else
 12889              		.loc 1 1425 30 discriminator 1 view .LVU3381
 12890 0010 0129     		cmp	r1, #1
 12891 0012 06D0     		beq	.L917
1433:src/xeq.c     **** 
 12892              		.loc 1 1433 3 is_stmt 1 view .LVU3382
 12893              	.LBB2442:
 12894              	.LBI2442:
 738:src/xeq.c     **** 	if (get_lift())
 12895              		.loc 1 738 6 view .LVU3383
 12896              	.LBB2443:
 739:src/xeq.c     **** 		lift();
 12897              		.loc 1 739 2 view .LVU3384
 12898              	.LBB2444:
 12899              	.LBI2444:
 734:src/xeq.c     **** 	return State2.state_lift;
 12900              		.loc 1 734 12 view .LVU3385
 12901              	.LBB2445:
 735:src/xeq.c     **** }
 12902              		.loc 1 735 2 view .LVU3386
 735:src/xeq.c     **** }
 12903              		.loc 1 735 15 is_stmt 0 view .LVU3387
 12904 0014 294B     		ldr	r3, .L938
 12905 0016 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 12906              	.LBE2445:
 12907              	.LBE2444:
 739:src/xeq.c     **** 		lift();
 12908              		.loc 1 739 5 view .LVU3388
 12909 0018 5906     		lsls	r1, r3, #25
 12910              	.LVL926:
 739:src/xeq.c     **** 		lift();
 12911              		.loc 1 739 5 view .LVU3389
 12912 001a 12D5     		bpl	.L920
 740:src/xeq.c     **** }
 12913              		.loc 1 740 3 is_stmt 1 view .LVU3390
 12914 001c FFF7FEFF 		bl	lift
 12915              	.LVL927:
 740:src/xeq.c     **** }
 12916              		.loc 1 740 3 is_stmt 0 view .LVU3391
 12917 0020 0FE0     		b	.L920
 12918              	.LVL928:
 12919              	.L917:
 740:src/xeq.c     **** }
 12920              		.loc 1 740 3 view .LVU3392
 12921              	.LBE2443:
 12922              	.LBE2442:
1429:src/xeq.c     **** 		zero_Y();
 12923              		.loc 1 1429 3 is_stmt 1 view .LVU3393
 12924              	.LBB2446:
ARM GAS  /tmp/cc0UaEmF.s 			page 379


 12925              	.LBI2446:
 743:src/xeq.c     **** 	lift_if_enabled();
 12926              		.loc 1 743 13 view .LVU3394
 12927              	.LBB2447:
 744:src/xeq.c     **** 	lift();
 12928              		.loc 1 744 2 view .LVU3395
 12929              	.LBB2448:
 12930              	.LBI2448:
 738:src/xeq.c     **** 	if (get_lift())
 12931              		.loc 1 738 6 view .LVU3396
 12932              	.LBB2449:
 739:src/xeq.c     **** 		lift();
 12933              		.loc 1 739 2 view .LVU3397
 12934              	.LBB2450:
 12935              	.LBI2450:
 734:src/xeq.c     **** 	return State2.state_lift;
 12936              		.loc 1 734 12 view .LVU3398
 12937              	.LBB2451:
 735:src/xeq.c     **** }
 12938              		.loc 1 735 2 view .LVU3399
 735:src/xeq.c     **** }
 12939              		.loc 1 735 15 is_stmt 0 view .LVU3400
 12940 0022 264D     		ldr	r5, .L938
 12941 0024 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 12942              	.LBE2451:
 12943              	.LBE2450:
 739:src/xeq.c     **** 		lift();
 12944              		.loc 1 739 5 view .LVU3401
 12945 0026 5806     		lsls	r0, r3, #25
 12946              	.LVL929:
 739:src/xeq.c     **** 		lift();
 12947              		.loc 1 739 5 view .LVU3402
 12948 0028 3CD4     		bmi	.L936
 12949              	.LVL930:
 12950              	.L919:
 739:src/xeq.c     **** 		lift();
 12951              		.loc 1 739 5 view .LVU3403
 12952              	.LBE2449:
 12953              	.LBE2448:
 745:src/xeq.c     **** }
 12954              		.loc 1 745 2 is_stmt 1 view .LVU3404
 12955 002a FFF7FEFF 		bl	lift
 12956              	.LVL931:
 12957              	.LBE2447:
 12958              	.LBE2446:
1430:src/xeq.c     **** 		set_was_complex();
 12959              		.loc 1 1430 3 view .LVU3405
 12960              	.LBB2455:
 12961              	.LBI2455:
1368:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 12962              		.loc 1 1368 6 view .LVU3406
 12963              	.LBB2456:
1369:src/xeq.c     **** }
 12964              		.loc 1 1369 2 view .LVU3407
 12965 002e 6520     		movs	r0, #101
 12966 0030 FFF7FEFF 		bl	get_reg_n
 12967              	.LVL932:
ARM GAS  /tmp/cc0UaEmF.s 			page 380


 12968 0034 FFF7FEFF 		bl	set_zero
 12969              	.LVL933:
 12970              	.LBE2456:
 12971              	.LBE2455:
1431:src/xeq.c     **** 	} else
 12972              		.loc 1 1431 3 view .LVU3408
 12973              	.LBB2457:
 12974              	.LBI2457:
 530:src/xeq.c     **** 	State2.wascomplex = 1;
 12975              		.loc 1 530 13 view .LVU3409
 12976              	.LBB2458:
 531:src/xeq.c     **** }
 12977              		.loc 1 531 2 view .LVU3410
 531:src/xeq.c     **** }
 12978              		.loc 1 531 20 is_stmt 0 view .LVU3411
 12979 0038 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 12980 003a 0122     		movs	r2, #1
 12981 003c 62F38713 		bfi	r3, r2, #6, #2
 12982 0040 2B75     		strb	r3, [r5, #20]
 12983              	.L920:
 12984              	.LBE2458:
 12985              	.LBE2457:
1435:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 12986              		.loc 1 1435 2 is_stmt 1 view .LVU3412
1435:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 12987              		.loc 1 1435 24 is_stmt 0 view .LVU3413
 12988 0042 7934     		adds	r4, r4, #121
1435:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 12989              		.loc 1 1435 5 view .LVU3414
 12990 0044 E4B2     		uxtb	r4, r4
 12991 0046 012C     		cmp	r4, #1
 12992 0048 2FD9     		bls	.L937
1437:src/xeq.c     **** 		bad_mode_error();
 12993              		.loc 1 1437 7 is_stmt 1 view .LVU3415
1437:src/xeq.c     **** 		bad_mode_error();
 12994              		.loc 1 1437 11 is_stmt 0 view .LVU3416
 12995 004a 1D4C     		ldr	r4, .L938+4
 12996 004c 2368     		ldr	r3, [r4]
 12997 004e 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
1437:src/xeq.c     **** 		bad_mode_error();
 12998              		.loc 1 1437 10 view .LVU3417
 12999 0052 D207     		lsls	r2, r2, #31
 13000 0054 06D5     		bpl	.L923
1438:src/xeq.c     **** 	else 
 13001              		.loc 1 1438 3 is_stmt 1 view .LVU3418
 13002              	.LBB2459:
 13003              	.LBI2459:
 566:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 13004              		.loc 1 566 6 view .LVU3419
 13005              	.LBE2459:
 567:src/xeq.c     **** }
 13006              		.loc 1 567 2 view .LVU3420
 13007              	.LVL934:
 13008              	.LBB2464:
 13009              	.LBB2460:
 13010              	.LBI2460:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
ARM GAS  /tmp/cc0UaEmF.s 			page 381


 13011              		.loc 1 537 5 view .LVU3421
 13012              	.LBB2461:
 538:src/xeq.c     **** 		Error = e;
 13013              		.loc 1 538 2 view .LVU3422
 538:src/xeq.c     **** 		Error = e;
 13014              		.loc 1 538 12 is_stmt 0 view .LVU3423
 13015 0056 1B4B     		ldr	r3, .L938+8
 538:src/xeq.c     **** 		Error = e;
 13016              		.loc 1 538 5 view .LVU3424
 13017 0058 1A68     		ldr	r2, [r3]
 13018 005a 0AB9     		cbnz	r2, .L916
 13019              	.LVL935:
 13020              	.LBB2462:
 13021              	.LBI2462:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13022              		.loc 1 537 5 is_stmt 1 view .LVU3425
 13023              	.LBB2463:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 13024              		.loc 1 539 3 view .LVU3426
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 13025              		.loc 1 539 9 is_stmt 0 view .LVU3427
 13026 005c 0D22     		movs	r2, #13
 13027 005e 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 13028              		.loc 1 540 3 is_stmt 1 view .LVU3428
 13029              	.LVL936:
 13030              	.L916:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 13031              		.loc 1 540 3 is_stmt 0 view .LVU3429
 13032              	.LBE2463:
 13033              	.LBE2462:
 13034              	.LBE2461:
 13035              	.LBE2460:
 13036              	.LBE2464:
1441:src/xeq.c     **** 
 13037              		.loc 1 1441 1 view .LVU3430
 13038 0060 02B0     		add	sp, sp, #8
 13039              		.cfi_remember_state
 13040              		.cfi_def_cfa_offset 16
 13041              		@ sp needed
 13042 0062 70BD     		pop	{r4, r5, r6, pc}
 13043              	.LVL937:
 13044              	.L923:
 13045              		.cfi_restore_state
1440:src/xeq.c     **** }
 13046              		.loc 1 1440 3 is_stmt 1 view .LVU3431
 13047              	.LBB2465:
 13048              	.LBB2466:
 933:src/xeq.c     **** }
 13049              		.loc 1 933 24 is_stmt 0 view .LVU3432
 13050 0064 B3F8E817 		ldrh	r1, [r3, #2024]
 13051              	.LBE2466:
 13052              	.LBE2465:
1440:src/xeq.c     **** }
 13053              		.loc 1 1440 3 view .LVU3433
 13054 0068 174B     		ldr	r3, .L938+12
 13055              	.LBB2469:
ARM GAS  /tmp/cc0UaEmF.s 			page 382


 13056              	.LBB2467:
 933:src/xeq.c     **** }
 13057              		.loc 1 933 24 view .LVU3434
 13058 006a 44F20105 		movw	r5, #16385
 13059 006e 2940     		ands	r1, r1, r5
 13060              	.LBE2467:
 13061              	.LBE2469:
1440:src/xeq.c     **** }
 13062              		.loc 1 1440 22 view .LVU3435
 13063 0070 A1F58041 		sub	r1, r1, #16384
 13064 0074 B1FA81F1 		clz	r1, r1
 13065 0078 3046     		mov	r0, r6
 13066 007a 4909     		lsrs	r1, r1, #5
1440:src/xeq.c     **** }
 13067              		.loc 1 1440 3 view .LVU3436
 13068 007c 1E68     		ldr	r6, [r3]
 13069              	.LVL938:
 13070              	.LBB2470:
 13071              	.LBI2465:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13072              		.loc 1 932 5 is_stmt 1 view .LVU3437
 13073              	.LBB2468:
 933:src/xeq.c     **** }
 13074              		.loc 1 933 2 view .LVU3438
 13075              	.LBE2468:
 13076              	.LBE2470:
1440:src/xeq.c     **** }
 13077              		.loc 1 1440 22 is_stmt 0 view .LVU3439
 13078 007e FFF7FEFF 		bl	get_const
 13079              	.LVL939:
 13080              	.LBB2471:
 13081              	.LBB2472:
 13082              	.LBB2473:
 13083              	.LBB2474:
 933:src/xeq.c     **** }
 13084              		.loc 1 933 24 view .LVU3440
 13085 0082 2368     		ldr	r3, [r4]
 13086 0084 B3F8E837 		ldrh	r3, [r3, #2024]
 13087              	.LBE2474:
 13088              	.LBE2473:
 718:src/xeq.c     **** }
 13089              		.loc 1 718 2 view .LVU3441
 13090 0088 1D40     		ands	r5, r5, r3
 13091 008a B5F5804F 		cmp	r5, #16384
 13092              	.LBE2472:
 13093              	.LBE2471:
1440:src/xeq.c     **** }
 13094              		.loc 1 1440 22 view .LVU3442
 13095 008e 0146     		mov	r1, r0
 13096              	.LVL940:
 13097              	.LBB2479:
 13098              	.LBI2471:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 13099              		.loc 1 717 6 is_stmt 1 view .LVU3443
 13100              	.LBB2477:
 718:src/xeq.c     **** }
 13101              		.loc 1 718 2 view .LVU3444
ARM GAS  /tmp/cc0UaEmF.s 			page 383


 13102              	.LBB2476:
 13103              	.LBI2473:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13104              		.loc 1 932 5 view .LVU3445
 13105              	.LBB2475:
 933:src/xeq.c     **** }
 13106              		.loc 1 933 2 view .LVU3446
 13107              	.LBE2475:
 13108              	.LBE2476:
 718:src/xeq.c     **** }
 13109              		.loc 1 718 2 is_stmt 0 view .LVU3447
 13110 0090 08BF     		it	eq
 13111 0092 1022     		moveq	r2, #16
 13112 0094 3046     		mov	r0, r6
 13113              	.LVL941:
 718:src/xeq.c     **** }
 13114              		.loc 1 718 2 view .LVU3448
 13115 0096 18BF     		it	ne
 13116 0098 0822     		movne	r2, #8
 13117              	.LBE2477:
 13118              	.LBE2479:
1441:src/xeq.c     **** 
 13119              		.loc 1 1441 1 view .LVU3449
 13120 009a 02B0     		add	sp, sp, #8
 13121              		.cfi_remember_state
 13122              		.cfi_def_cfa_offset 16
 13123              		@ sp needed
 13124 009c BDE87040 		pop	{r4, r5, r6, lr}
 13125              		.cfi_restore 14
 13126              		.cfi_restore 6
 13127              		.cfi_restore 5
 13128              		.cfi_restore 4
 13129              		.cfi_def_cfa_offset 0
 13130              	.LVL942:
 13131              	.LBB2480:
 13132              	.LBB2478:
 718:src/xeq.c     **** }
 13133              		.loc 1 718 2 view .LVU3450
 13134 00a0 FFF7FEBF 		b	xcopy
 13135              	.LVL943:
 13136              	.L936:
 13137              		.cfi_restore_state
 718:src/xeq.c     **** }
 13138              		.loc 1 718 2 view .LVU3451
 13139              	.LBE2478:
 13140              	.LBE2480:
 13141              	.LBB2481:
 13142              	.LBB2454:
 13143              	.LBB2453:
 13144              	.LBB2452:
 740:src/xeq.c     **** }
 13145              		.loc 1 740 3 is_stmt 1 view .LVU3452
 13146 00a4 FFF7FEFF 		bl	lift
 13147              	.LVL944:
 740:src/xeq.c     **** }
 13148              		.loc 1 740 3 is_stmt 0 view .LVU3453
 13149 00a8 BFE7     		b	.L919
ARM GAS  /tmp/cc0UaEmF.s 			page 384


 13150              	.L937:
 13151              	.LBE2452:
 13152              	.LBE2453:
 13153              	.LBE2454:
 13154              	.LBE2481:
1436:src/xeq.c     **** 	else if (is_intmode())
 13155              		.loc 1 1436 3 is_stmt 1 view .LVU3454
 13156              	.LVL945:
 13157              	.LBB2482:
 13158              	.LBI2482:
1323:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 13159              		.loc 1 1323 6 view .LVU3455
 13160              	.LBB2483:
1324:src/xeq.c     **** }
 13161              		.loc 1 1324 2 view .LVU3456
 13162              	.LBE2483:
 13163              	.LBE2482:
1436:src/xeq.c     **** 	else if (is_intmode())
 13164              		.loc 1 1436 3 is_stmt 0 view .LVU3457
 13165 00aa 0023     		movs	r3, #0
 13166              	.LBB2485:
 13167              	.LBB2484:
1324:src/xeq.c     **** }
 13168              		.loc 1 1324 2 view .LVU3458
 13169 00ac 3246     		mov	r2, r6
 13170 00ae 0093     		str	r3, [sp]
 13171 00b0 6420     		movs	r0, #100
 13172 00b2 FFF7FEFF 		bl	set_reg_n_int_sgn
 13173              	.LVL946:
 13174              	.LBE2484:
 13175              	.LBE2485:
1441:src/xeq.c     **** 
 13176              		.loc 1 1441 1 view .LVU3459
 13177 00b6 02B0     		add	sp, sp, #8
 13178              		.cfi_def_cfa_offset 16
 13179              		@ sp needed
 13180 00b8 70BD     		pop	{r4, r5, r6, pc}
 13181              	.LVL947:
 13182              	.L939:
1441:src/xeq.c     **** 
 13183              		.loc 1 1441 1 view .LVU3460
 13184 00ba 00BF     		.align	2
 13185              	.L938:
 13186 00bc 00000000 		.word	StateWhileOn
 13187 00c0 00000000 		.word	main_ram
 13188 00c4 00000000 		.word	Error
 13189 00c8 00000000 		.word	StackBase
 13190              		.cfi_endproc
 13191              	.LFE110:
 13193              		.section	.text.cmdsto,"ax",%progbits
 13194              		.align	1
 13195              		.p2align 2,,3
 13196              		.global	cmdsto
 13197              		.syntax unified
 13198              		.thumb
 13199              		.thumb_func
 13200              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cc0UaEmF.s 			page 385


 13202              	cmdsto:
 13203              	.LVL948:
 13204              	.LFB113:
1524:src/xeq.c     **** 	if (op == RARG_STO) {
 13205              		.loc 1 1524 45 is_stmt 1 view -0
 13206              		.cfi_startproc
 13207              		@ args = 0, pretend = 0, frame = 48
 13208              		@ frame_needed = 0, uses_anonymous_args = 0
1525:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
 13209              		.loc 1 1525 2 view .LVU3462
1524:src/xeq.c     **** 	if (op == RARG_STO) {
 13210              		.loc 1 1524 45 is_stmt 0 view .LVU3463
 13211 0000 10B5     		push	{r4, lr}
 13212              		.cfi_def_cfa_offset 8
 13213              		.cfi_offset 4, -8
 13214              		.cfi_offset 14, -4
1525:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
 13215              		.loc 1 1525 5 view .LVU3464
 13216 0002 0329     		cmp	r1, #3
1524:src/xeq.c     **** 	if (op == RARG_STO) {
 13217              		.loc 1 1524 45 view .LVU3465
 13218 0004 8CB0     		sub	sp, sp, #48
 13219              		.cfi_def_cfa_offset 56
1525:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
 13220              		.loc 1 1525 5 view .LVU3466
 13221 0006 32D0     		beq	.L953
1528:src/xeq.c     **** 			long long int r;
 13222              		.loc 1 1528 3 is_stmt 1 view .LVU3467
1528:src/xeq.c     **** 			long long int r;
 13223              		.loc 1 1528 7 is_stmt 0 view .LVU3468
 13224 0008 1B4B     		ldr	r3, .L954
 13225 000a 1B68     		ldr	r3, [r3]
 13226 000c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 13227              	.LBB2498:
1531:src/xeq.c     **** 				illegal(op);
 13228              		.loc 1 1531 8 view .LVU3469
 13229 0010 0339     		subs	r1, r1, #3
 13230              	.LVL949:
1531:src/xeq.c     **** 				illegal(op);
 13231              		.loc 1 1531 8 view .LVU3470
 13232              	.LBE2498:
1528:src/xeq.c     **** 			long long int r;
 13233              		.loc 1 1528 6 view .LVU3471
 13234 0012 13F00103 		ands	r3, r3, #1
 13235 0016 0446     		mov	r4, r0
 13236              	.LBB2506:
1531:src/xeq.c     **** 				illegal(op);
 13237              		.loc 1 1531 8 view .LVU3472
 13238 0018 88B2     		uxth	r0, r1
 13239              	.LVL950:
1531:src/xeq.c     **** 				illegal(op);
 13240              		.loc 1 1531 8 view .LVU3473
 13241              	.LBE2506:
1528:src/xeq.c     **** 			long long int r;
 13242              		.loc 1 1528 6 view .LVU3474
 13243 001a 18D0     		beq	.L943
 13244              	.LBB2507:
ARM GAS  /tmp/cc0UaEmF.s 			page 386


1529:src/xeq.c     **** 
 13245              		.loc 1 1529 4 is_stmt 1 view .LVU3475
1531:src/xeq.c     **** 				illegal(op);
 13246              		.loc 1 1531 4 view .LVU3476
1531:src/xeq.c     **** 				illegal(op);
 13247              		.loc 1 1531 8 is_stmt 0 view .LVU3477
 13248 001c 0023     		movs	r3, #0
 13249 001e 6A46     		mov	r2, sp
 13250 0020 2146     		mov	r1, r4
 13251 0022 FFF7FEFF 		bl	storcl_intop
 13252              	.LVL951:
1531:src/xeq.c     **** 				illegal(op);
 13253              		.loc 1 1531 7 view .LVU3478
 13254 0026 20B1     		cbz	r0, .L944
1532:src/xeq.c     **** 			set_reg_n_int(arg, r);
 13255              		.loc 1 1532 5 is_stmt 1 view .LVU3479
1532:src/xeq.c     **** 			set_reg_n_int(arg, r);
 13256              		.loc 1 1532 5 view .LVU3480
 13257              	.LVL952:
 13258              	.LBB2499:
 13259              	.LBI2499:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13260              		.loc 1 537 5 view .LVU3481
 13261              	.LBB2500:
 538:src/xeq.c     **** 		Error = e;
 13262              		.loc 1 538 2 view .LVU3482
 538:src/xeq.c     **** 		Error = e;
 13263              		.loc 1 538 12 is_stmt 0 view .LVU3483
 13264 0028 144B     		ldr	r3, .L954+4
 538:src/xeq.c     **** 		Error = e;
 13265              		.loc 1 538 5 view .LVU3484
 13266 002a 1A68     		ldr	r2, [r3]
 13267 002c 0AB9     		cbnz	r2, .L944
 13268              	.LVL953:
 13269              	.LBB2501:
 13270              	.LBI2501:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13271              		.loc 1 537 5 is_stmt 1 view .LVU3485
 13272              	.LBB2502:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 13273              		.loc 1 539 3 view .LVU3486
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 13274              		.loc 1 539 9 is_stmt 0 view .LVU3487
 13275 002e 0322     		movs	r2, #3
 13276 0030 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 13277              		.loc 1 540 3 is_stmt 1 view .LVU3488
 13278              	.LVL954:
 13279              	.L944:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 13280              		.loc 1 540 3 is_stmt 0 view .LVU3489
 13281              	.LBE2502:
 13282              	.LBE2501:
 13283              	.LBE2500:
 13284              	.LBE2499:
1532:src/xeq.c     **** 			set_reg_n_int(arg, r);
 13285              		.loc 1 1532 5 is_stmt 1 discriminator 1 view .LVU3490
ARM GAS  /tmp/cc0UaEmF.s 			page 387


1533:src/xeq.c     **** 		} else {
 13286              		.loc 1 1533 4 discriminator 1 view .LVU3491
1533:src/xeq.c     **** 		} else {
 13287              		.loc 1 1533 4 is_stmt 0 discriminator 1 view .LVU3492
 13288 0032 DDE90023 		ldrd	r2, [sp]
 13289              	.LBB2503:
 13290              	.LBB2504:
1237:src/xeq.c     **** }
 13291              		.loc 1 1237 8 discriminator 1 view .LVU3493
 13292 0036 2046     		mov	r0, r4
 13293 0038 CDE90223 		strd	r2, [sp, #8]
 13294              	.LVL955:
1237:src/xeq.c     **** }
 13295              		.loc 1 1237 8 discriminator 1 view .LVU3494
 13296              	.LBE2504:
 13297              	.LBI2503:
1236:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 13298              		.loc 1 1236 6 is_stmt 1 discriminator 1 view .LVU3495
 13299              	.LBB2505:
1237:src/xeq.c     **** }
 13300              		.loc 1 1237 2 discriminator 1 view .LVU3496
1237:src/xeq.c     **** }
 13301              		.loc 1 1237 8 is_stmt 0 discriminator 1 view .LVU3497
 13302 003c FFF7FEFF 		bl	get_reg_n
 13303              	.LVL956:
1237:src/xeq.c     **** }
 13304              		.loc 1 1237 2 discriminator 1 view .LVU3498
 13305 0040 0822     		movs	r2, #8
 13306 0042 0DEB0201 		add	r1, sp, r2
 13307 0046 FFF7FEFF 		bl	xcopy
 13308              	.LVL957:
1237:src/xeq.c     **** }
 13309              		.loc 1 1237 2 discriminator 1 view .LVU3499
 13310              	.LBE2505:
 13311              	.LBE2503:
 13312              	.LBE2507:
1542:src/xeq.c     **** 
 13313              		.loc 1 1542 1 discriminator 1 view .LVU3500
 13314 004a 0CB0     		add	sp, sp, #48
 13315              		.cfi_remember_state
 13316              		.cfi_def_cfa_offset 8
 13317              		@ sp needed
 13318 004c 10BD     		pop	{r4, pc}
 13319              	.LVL958:
 13320              	.L943:
 13321              		.cfi_restore_state
 13322              	.LBB2508:
1535:src/xeq.c     **** 
 13323              		.loc 1 1535 4 is_stmt 1 view .LVU3501
1537:src/xeq.c     **** 				illegal(op);
 13324              		.loc 1 1537 4 view .LVU3502
1537:src/xeq.c     **** 				illegal(op);
 13325              		.loc 1 1537 8 is_stmt 0 view .LVU3503
 13326 004e 02AA     		add	r2, sp, #8
 13327 0050 2146     		mov	r1, r4
 13328 0052 FFF7FEFF 		bl	storcl_op
 13329              	.LVL959:
ARM GAS  /tmp/cc0UaEmF.s 			page 388


1537:src/xeq.c     **** 				illegal(op);
 13330              		.loc 1 1537 7 view .LVU3504
 13331 0056 20B1     		cbz	r0, .L945
1538:src/xeq.c     **** 			setRegister(arg, &r);
 13332              		.loc 1 1538 5 is_stmt 1 view .LVU3505
1538:src/xeq.c     **** 			setRegister(arg, &r);
 13333              		.loc 1 1538 5 view .LVU3506
 13334              	.LVL960:
 13335              	.LBB2509:
 13336              	.LBI2509:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13337              		.loc 1 537 5 view .LVU3507
 13338              	.LBB2510:
 538:src/xeq.c     **** 		Error = e;
 13339              		.loc 1 538 2 view .LVU3508
 538:src/xeq.c     **** 		Error = e;
 13340              		.loc 1 538 12 is_stmt 0 view .LVU3509
 13341 0058 084B     		ldr	r3, .L954+4
 538:src/xeq.c     **** 		Error = e;
 13342              		.loc 1 538 5 view .LVU3510
 13343 005a 1A68     		ldr	r2, [r3]
 13344 005c 0AB9     		cbnz	r2, .L945
 13345              	.LVL961:
 13346              	.LBB2511:
 13347              	.LBI2511:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13348              		.loc 1 537 5 is_stmt 1 view .LVU3511
 13349              	.LBB2512:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 13350              		.loc 1 539 3 view .LVU3512
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 13351              		.loc 1 539 9 is_stmt 0 view .LVU3513
 13352 005e 0322     		movs	r2, #3
 13353 0060 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 13354              		.loc 1 540 3 is_stmt 1 view .LVU3514
 13355              	.LVL962:
 13356              	.L945:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 13357              		.loc 1 540 3 is_stmt 0 view .LVU3515
 13358              	.LBE2512:
 13359              	.LBE2511:
 13360              	.LBE2510:
 13361              	.LBE2509:
1538:src/xeq.c     **** 			setRegister(arg, &r);
 13362              		.loc 1 1538 5 is_stmt 1 discriminator 1 view .LVU3516
1539:src/xeq.c     **** 		}
 13363              		.loc 1 1539 4 discriminator 1 view .LVU3517
 13364 0062 02A9     		add	r1, sp, #8
 13365 0064 2046     		mov	r0, r4
 13366 0066 FFF7FEFF 		bl	setRegister
 13367              	.LVL963:
 13368              	.LBE2508:
1542:src/xeq.c     **** 
 13369              		.loc 1 1542 1 is_stmt 0 discriminator 1 view .LVU3518
 13370 006a 0CB0     		add	sp, sp, #48
 13371              		.cfi_remember_state
ARM GAS  /tmp/cc0UaEmF.s 			page 389


 13372              		.cfi_def_cfa_offset 8
 13373              		@ sp needed
 13374 006c 10BD     		pop	{r4, pc}
 13375              	.LVL964:
 13376              	.L953:
 13377              		.cfi_restore_state
1526:src/xeq.c     **** 	} else {
 13378              		.loc 1 1526 3 is_stmt 1 view .LVU3519
 13379 006e 6421     		movs	r1, #100
 13380              	.LVL965:
1526:src/xeq.c     **** 	} else {
 13381              		.loc 1 1526 3 is_stmt 0 view .LVU3520
 13382 0070 FFF7FEFF 		bl	copyreg_n
 13383              	.LVL966:
1542:src/xeq.c     **** 
 13384              		.loc 1 1542 1 view .LVU3521
 13385 0074 0CB0     		add	sp, sp, #48
 13386              		.cfi_def_cfa_offset 8
 13387              		@ sp needed
 13388 0076 10BD     		pop	{r4, pc}
 13389              	.L955:
 13390              		.align	2
 13391              	.L954:
 13392 0078 00000000 		.word	main_ram
 13393 007c 00000000 		.word	Error
 13394              		.cfi_endproc
 13395              	.LFE113:
 13397              		.section	.text.cmdrcl,"ax",%progbits
 13398              		.align	1
 13399              		.p2align 2,,3
 13400              		.global	cmdrcl
 13401              		.syntax unified
 13402              		.thumb
 13403              		.thumb_func
 13404              		.fpu fpv4-sp-d16
 13406              	cmdrcl:
 13407              	.LVL967:
 13408              	.LFB115:
1571:src/xeq.c     **** 	do_rcl(arg, op);
 13409              		.loc 1 1571 45 is_stmt 1 view -0
 13410              		.cfi_startproc
 13411              		@ args = 0, pretend = 0, frame = 0
 13412              		@ frame_needed = 0, uses_anonymous_args = 0
 13413              		@ link register save eliminated.
1572:src/xeq.c     **** }
 13414              		.loc 1 1572 2 view .LVU3523
 13415 0000 FFF7FEBF 		b	do_rcl
 13416              	.LVL968:
1572:src/xeq.c     **** }
 13417              		.loc 1 1572 2 is_stmt 0 view .LVU3524
 13418              		.cfi_endproc
 13419              	.LFE115:
 13421              		.section	.text.cmdcsto,"ax",%progbits
 13422              		.align	1
 13423              		.p2align 2,,3
 13424              		.global	cmdcsto
 13425              		.syntax unified
ARM GAS  /tmp/cc0UaEmF.s 			page 390


 13426              		.thumb
 13427              		.thumb_func
 13428              		.fpu fpv4-sp-d16
 13430              	cmdcsto:
 13431              	.LVL969:
 13432              	.LFB117:
1616:src/xeq.c     **** 	decNumber r1, r2;
 13433              		.loc 1 1616 46 is_stmt 1 view -0
 13434              		.cfi_startproc
 13435              		@ args = 0, pretend = 0, frame = 72
 13436              		@ frame_needed = 0, uses_anonymous_args = 0
1617:src/xeq.c     **** 	REGISTER *t1, *t2;
 13437              		.loc 1 1617 2 view .LVU3526
1618:src/xeq.c     **** 
 13438              		.loc 1 1618 2 view .LVU3527
1620:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
 13439              		.loc 1 1620 2 view .LVU3528
1616:src/xeq.c     **** 	decNumber r1, r2;
 13440              		.loc 1 1616 46 is_stmt 0 view .LVU3529
 13441 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 13442              		.cfi_def_cfa_offset 24
 13443              		.cfi_offset 4, -24
 13444              		.cfi_offset 5, -20
 13445              		.cfi_offset 6, -16
 13446              		.cfi_offset 7, -12
 13447              		.cfi_offset 8, -8
 13448              		.cfi_offset 14, -4
 13449 0004 94B0     		sub	sp, sp, #80
 13450              		.cfi_def_cfa_offset 104
1616:src/xeq.c     **** 	decNumber r1, r2;
 13451              		.loc 1 1616 46 view .LVU3530
 13452 0006 0C46     		mov	r4, r1
1621:src/xeq.c     **** 
 13453              		.loc 1 1621 21 view .LVU3531
 13454 0008 461C     		adds	r6, r0, #1
1616:src/xeq.c     **** 	decNumber r1, r2;
 13455              		.loc 1 1616 46 view .LVU3532
 13456 000a 0546     		mov	r5, r0
1620:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
 13457              		.loc 1 1620 7 view .LVU3533
 13458 000c FFF7FEFF 		bl	get_reg_n
 13459              	.LVL970:
1620:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
 13460              		.loc 1 1620 7 view .LVU3534
 13461 0010 8046     		mov	r8, r0
1621:src/xeq.c     **** 
 13462              		.loc 1 1621 7 view .LVU3535
 13463 0012 3046     		mov	r0, r6
 13464              	.LVL971:
1621:src/xeq.c     **** 
 13465              		.loc 1 1621 2 is_stmt 1 view .LVU3536
1621:src/xeq.c     **** 
 13466              		.loc 1 1621 7 is_stmt 0 view .LVU3537
 13467 0014 FFF7FEFF 		bl	get_reg_n
 13468              	.LVL972:
1623:src/xeq.c     **** 		copyreg(t1, StackBase);
 13469              		.loc 1 1623 2 is_stmt 1 view .LVU3538
ARM GAS  /tmp/cc0UaEmF.s 			page 391


1623:src/xeq.c     **** 		copyreg(t1, StackBase);
 13470              		.loc 1 1623 5 is_stmt 0 view .LVU3539
 13471 0018 152C     		cmp	r4, #21
 13472 001a 24D0     		beq	.L969
1627:src/xeq.c     **** 			bad_mode_error();
 13473              		.loc 1 1627 3 is_stmt 1 view .LVU3540
1627:src/xeq.c     **** 			bad_mode_error();
 13474              		.loc 1 1627 7 is_stmt 0 view .LVU3541
 13475 001c 284B     		ldr	r3, .L970
 13476 001e 1B68     		ldr	r3, [r3]
 13477 0020 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1627:src/xeq.c     **** 			bad_mode_error();
 13478              		.loc 1 1627 6 view .LVU3542
 13479 0024 13F00103 		ands	r3, r3, #1
 13480 0028 0DD0     		beq	.L962
1628:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CSTO, arg, &r1, &r2, 0))
 13481              		.loc 1 1628 4 is_stmt 1 view .LVU3543
 13482              	.LBB2532:
 13483              	.LBI2532:
 566:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 13484              		.loc 1 566 6 view .LVU3544
 13485              	.LBE2532:
 567:src/xeq.c     **** }
 13486              		.loc 1 567 2 view .LVU3545
 13487              	.LVL973:
 13488              	.LBB2537:
 13489              	.LBB2533:
 13490              	.LBI2533:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13491              		.loc 1 537 5 view .LVU3546
 13492              	.LBB2534:
 538:src/xeq.c     **** 		Error = e;
 13493              		.loc 1 538 2 view .LVU3547
 538:src/xeq.c     **** 		Error = e;
 13494              		.loc 1 538 12 is_stmt 0 view .LVU3548
 13495 002a 264B     		ldr	r3, .L970+4
 538:src/xeq.c     **** 		Error = e;
 13496              		.loc 1 538 5 view .LVU3549
 13497 002c 1A68     		ldr	r2, [r3]
 13498 002e 0AB9     		cbnz	r2, .L961
 13499              	.LVL974:
 13500              	.LBB2535:
 13501              	.LBI2535:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13502              		.loc 1 537 5 is_stmt 1 view .LVU3550
 13503              	.LBB2536:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 13504              		.loc 1 539 3 view .LVU3551
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 13505              		.loc 1 539 9 is_stmt 0 view .LVU3552
 13506 0030 0D22     		movs	r2, #13
 13507 0032 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 13508              		.loc 1 540 3 is_stmt 1 view .LVU3553
 13509              	.LVL975:
 13510              	.L961:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
ARM GAS  /tmp/cc0UaEmF.s 			page 392


 13511              		.loc 1 540 3 is_stmt 0 view .LVU3554
 13512              	.LBE2536:
 13513              	.LBE2535:
 13514              	.LBE2534:
 13515              	.LBE2533:
 13516              	.LBE2537:
1636:src/xeq.c     **** }
 13517              		.loc 1 1636 2 is_stmt 1 view .LVU3555
 13518              	.LBB2538:
 13519              	.LBI2538:
 530:src/xeq.c     **** 	State2.wascomplex = 1;
 13520              		.loc 1 530 13 view .LVU3556
 13521              	.LBB2539:
 531:src/xeq.c     **** }
 13522              		.loc 1 531 2 view .LVU3557
 531:src/xeq.c     **** }
 13523              		.loc 1 531 20 is_stmt 0 view .LVU3558
 13524 0034 244B     		ldr	r3, .L970+8
 13525 0036 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 13526 0038 0121     		movs	r1, #1
 13527 003a 61F38712 		bfi	r2, r1, #6, #2
 13528 003e 1A75     		strb	r2, [r3, #20]
 13529              	.LBE2539:
 13530              	.LBE2538:
1637:src/xeq.c     **** 
 13531              		.loc 1 1637 1 view .LVU3559
 13532 0040 14B0     		add	sp, sp, #80
 13533              		.cfi_remember_state
 13534              		.cfi_def_cfa_offset 24
 13535              		@ sp needed
 13536 0042 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 13537              	.LVL976:
 13538              	.L962:
 13539              		.cfi_restore_state
1629:src/xeq.c     **** 			illegal(op);
 13540              		.loc 1 1629 8 is_stmt 1 view .LVU3560
1629:src/xeq.c     **** 			illegal(op);
 13541              		.loc 1 1629 12 is_stmt 0 view .LVU3561
 13542 0046 153C     		subs	r4, r4, #21
 13543 0048 0093     		str	r3, [sp]
 13544 004a A0B2     		uxth	r0, r4
 13545              	.LVL977:
1629:src/xeq.c     **** 			illegal(op);
 13546              		.loc 1 1629 12 view .LVU3562
 13547 004c 0BAB     		add	r3, sp, #44
 13548 004e 02AA     		add	r2, sp, #8
 13549 0050 2946     		mov	r1, r5
 13550 0052 FFF7FEFF 		bl	storcl_cop
 13551              	.LVL978:
1629:src/xeq.c     **** 			illegal(op);
 13552              		.loc 1 1629 11 view .LVU3563
 13553 0056 50B3     		cbz	r0, .L964
1630:src/xeq.c     **** 		else {
 13554              		.loc 1 1630 4 is_stmt 1 view .LVU3564
1630:src/xeq.c     **** 		else {
 13555              		.loc 1 1630 4 view .LVU3565
 13556              	.LVL979:
ARM GAS  /tmp/cc0UaEmF.s 			page 393


 13557              	.LBB2540:
 13558              	.LBI2540:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13559              		.loc 1 537 5 view .LVU3566
 13560              	.LBB2541:
 538:src/xeq.c     **** 		Error = e;
 13561              		.loc 1 538 2 view .LVU3567
 538:src/xeq.c     **** 		Error = e;
 13562              		.loc 1 538 12 is_stmt 0 view .LVU3568
 13563 0058 1A4B     		ldr	r3, .L970+4
 538:src/xeq.c     **** 		Error = e;
 13564              		.loc 1 538 5 view .LVU3569
 13565 005a 1A68     		ldr	r2, [r3]
 13566 005c 002A     		cmp	r2, #0
 13567 005e E9D1     		bne	.L961
 13568              	.LVL980:
 13569              	.LBB2542:
 13570              	.LBI2542:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13571              		.loc 1 537 5 is_stmt 1 view .LVU3570
 13572              	.LBB2543:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 13573              		.loc 1 539 3 view .LVU3571
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 13574              		.loc 1 539 9 is_stmt 0 view .LVU3572
 13575 0060 0322     		movs	r2, #3
 13576 0062 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 13577              		.loc 1 540 3 is_stmt 1 view .LVU3573
 13578 0064 E6E7     		b	.L961
 13579              	.LVL981:
 13580              	.L969:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 13581              		.loc 1 540 3 is_stmt 0 view .LVU3574
 13582              	.LBE2543:
 13583              	.LBE2542:
 13584              	.LBE2541:
 13585              	.LBE2540:
1624:src/xeq.c     **** 		copyreg(t2, get_reg_n(regY_idx));
 13586              		.loc 1 1624 3 is_stmt 1 view .LVU3575
 13587              	.LBB2544:
 13588              	.LBB2545:
 13589              	.LBB2546:
 13590              	.LBB2547:
 933:src/xeq.c     **** }
 13591              		.loc 1 933 24 is_stmt 0 view .LVU3576
 13592 0066 164D     		ldr	r5, .L970
 13593              	.LVL982:
 933:src/xeq.c     **** }
 13594              		.loc 1 933 24 view .LVU3577
 13595              	.LBE2547:
 13596              	.LBE2546:
 13597              	.LBE2545:
 13598              	.LBE2544:
1624:src/xeq.c     **** 		copyreg(t2, get_reg_n(regY_idx));
 13599              		.loc 1 1624 3 view .LVU3578
 13600 0068 184A     		ldr	r2, .L970+12
ARM GAS  /tmp/cc0UaEmF.s 			page 394


 13601              	.LVL983:
 13602              	.LBB2553:
 13603              	.LBI2544:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 13604              		.loc 1 717 6 is_stmt 1 view .LVU3579
 13605              	.LBB2552:
 718:src/xeq.c     **** }
 13606              		.loc 1 718 2 view .LVU3580
 13607              	.LBB2550:
 13608              	.LBI2546:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13609              		.loc 1 932 5 view .LVU3581
 13610              	.LBB2548:
 933:src/xeq.c     **** }
 13611              		.loc 1 933 2 view .LVU3582
 933:src/xeq.c     **** }
 13612              		.loc 1 933 24 is_stmt 0 view .LVU3583
 13613 006a 2B68     		ldr	r3, [r5]
 13614              	.LBE2548:
 13615              	.LBE2550:
 718:src/xeq.c     **** }
 13616              		.loc 1 718 2 view .LVU3584
 13617 006c 1168     		ldr	r1, [r2]
 13618              	.LBB2551:
 13619              	.LBB2549:
 933:src/xeq.c     **** }
 13620              		.loc 1 933 24 view .LVU3585
 13621 006e B3F8E837 		ldrh	r3, [r3, #2024]
 13622 0072 44F20104 		movw	r4, #16385
 13623              	.LBE2549:
 13624              	.LBE2551:
 718:src/xeq.c     **** }
 13625              		.loc 1 718 2 view .LVU3586
 13626 0076 2340     		ands	r3, r3, r4
 13627 0078 B3F5804F 		cmp	r3, #16384
 13628 007c 0CBF     		ite	eq
 13629 007e 1022     		moveq	r2, #16
 13630              	.LVL984:
 718:src/xeq.c     **** }
 13631              		.loc 1 718 2 view .LVU3587
 13632 0080 0822     		movne	r2, #8
 13633 0082 0746     		mov	r7, r0
 13634 0084 4046     		mov	r0, r8
 13635              	.LVL985:
 718:src/xeq.c     **** }
 13636              		.loc 1 718 2 view .LVU3588
 13637 0086 FFF7FEFF 		bl	xcopy
 13638              	.LVL986:
 718:src/xeq.c     **** }
 13639              		.loc 1 718 2 view .LVU3589
 13640              	.LBE2552:
 13641              	.LBE2553:
1625:src/xeq.c     **** 	} else {
 13642              		.loc 1 1625 3 is_stmt 1 view .LVU3590
1625:src/xeq.c     **** 	} else {
 13643              		.loc 1 1625 15 is_stmt 0 view .LVU3591
 13644 008a 6520     		movs	r0, #101
ARM GAS  /tmp/cc0UaEmF.s 			page 395


 13645 008c FFF7FEFF 		bl	get_reg_n
 13646              	.LVL987:
 13647              	.LBB2554:
 13648              	.LBB2555:
 13649              	.LBB2556:
 13650              	.LBB2557:
 933:src/xeq.c     **** }
 13651              		.loc 1 933 24 view .LVU3592
 13652 0090 2B68     		ldr	r3, [r5]
 13653 0092 B3F8E837 		ldrh	r3, [r3, #2024]
 13654              	.LBE2557:
 13655              	.LBE2556:
 718:src/xeq.c     **** }
 13656              		.loc 1 718 2 view .LVU3593
 13657 0096 1C40     		ands	r4, r4, r3
 13658 0098 B4F5804F 		cmp	r4, #16384
 13659              	.LBE2555:
 13660              	.LBE2554:
1625:src/xeq.c     **** 	} else {
 13661              		.loc 1 1625 15 view .LVU3594
 13662 009c 0146     		mov	r1, r0
 13663              	.LVL988:
 13664              	.LBB2561:
 13665              	.LBI2554:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 13666              		.loc 1 717 6 is_stmt 1 view .LVU3595
 13667              	.LBB2560:
 718:src/xeq.c     **** }
 13668              		.loc 1 718 2 view .LVU3596
 13669              	.LBB2559:
 13670              	.LBI2556:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13671              		.loc 1 932 5 view .LVU3597
 13672              	.LBB2558:
 933:src/xeq.c     **** }
 13673              		.loc 1 933 2 view .LVU3598
 13674              	.LBE2558:
 13675              	.LBE2559:
 718:src/xeq.c     **** }
 13676              		.loc 1 718 2 is_stmt 0 view .LVU3599
 13677 009e 08BF     		it	eq
 13678 00a0 1022     		moveq	r2, #16
 13679 00a2 3846     		mov	r0, r7
 13680              	.LVL989:
 718:src/xeq.c     **** }
 13681              		.loc 1 718 2 view .LVU3600
 13682 00a4 18BF     		it	ne
 13683 00a6 0822     		movne	r2, #8
 13684 00a8 FFF7FEFF 		bl	xcopy
 13685              	.LVL990:
 719:src/xeq.c     **** 
 13686              		.loc 1 719 1 view .LVU3601
 13687 00ac C2E7     		b	.L961
 13688              	.LVL991:
 13689              	.L964:
 719:src/xeq.c     **** 
 13690              		.loc 1 719 1 view .LVU3602
ARM GAS  /tmp/cc0UaEmF.s 			page 396


 13691              	.LBE2560:
 13692              	.LBE2561:
1632:src/xeq.c     **** 			setRegister(arg + 1, &r2);
 13693              		.loc 1 1632 4 is_stmt 1 view .LVU3603
 13694 00ae 02A9     		add	r1, sp, #8
 13695 00b0 2846     		mov	r0, r5
 13696 00b2 FFF7FEFF 		bl	setRegister
 13697              	.LVL992:
1633:src/xeq.c     **** 		}
 13698              		.loc 1 1633 4 view .LVU3604
 13699 00b6 0BA9     		add	r1, sp, #44
 13700 00b8 3046     		mov	r0, r6
 13701 00ba FFF7FEFF 		bl	setRegister
 13702              	.LVL993:
 13703 00be B9E7     		b	.L961
 13704              	.L971:
 13705              		.align	2
 13706              	.L970:
 13707 00c0 00000000 		.word	main_ram
 13708 00c4 00000000 		.word	Error
 13709 00c8 00000000 		.word	StateWhileOn
 13710 00cc 00000000 		.word	StackBase
 13711              		.cfi_endproc
 13712              	.LFE117:
 13714              		.section	.text.cmdcrcl,"ax",%progbits
 13715              		.align	1
 13716              		.p2align 2,,3
 13717              		.global	cmdcrcl
 13718              		.syntax unified
 13719              		.thumb
 13720              		.thumb_func
 13721              		.fpu fpv4-sp-d16
 13723              	cmdcrcl:
 13724              	.LVL994:
 13725              	.LFB119:
1662:src/xeq.c     **** 	do_crcl(arg, op);
 13726              		.loc 1 1662 46 view -0
 13727              		.cfi_startproc
 13728              		@ args = 0, pretend = 0, frame = 72
 13729              		@ frame_needed = 0, uses_anonymous_args = 0
1663:src/xeq.c     **** }
 13730              		.loc 1 1663 2 view .LVU3606
1662:src/xeq.c     **** 	do_crcl(arg, op);
 13731              		.loc 1 1662 46 is_stmt 0 view .LVU3607
 13732 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 13733              		.cfi_def_cfa_offset 20
 13734              		.cfi_offset 4, -20
 13735              		.cfi_offset 5, -16
 13736              		.cfi_offset 6, -12
 13737              		.cfi_offset 7, -8
 13738              		.cfi_offset 14, -4
 13739              	.LBB2604:
 13740              	.LBB2605:
1642:src/xeq.c     **** 		REGISTER x, y;
 13741              		.loc 1 1642 5 view .LVU3608
 13742 0002 1A29     		cmp	r1, #26
 13743              	.LBE2605:
ARM GAS  /tmp/cc0UaEmF.s 			page 397


 13744              	.LBE2604:
1662:src/xeq.c     **** 	do_crcl(arg, op);
 13745              		.loc 1 1662 46 view .LVU3609
 13746 0004 95B0     		sub	sp, sp, #84
 13747              		.cfi_def_cfa_offset 104
1662:src/xeq.c     **** 	do_crcl(arg, op);
 13748              		.loc 1 1662 46 view .LVU3610
 13749 0006 0446     		mov	r4, r0
 13750              	.LVL995:
 13751              	.LBB2682:
 13752              	.LBI2604:
1639:src/xeq.c     **** 	decNumber r1, r2;
 13753              		.loc 1 1639 13 is_stmt 1 view .LVU3611
 13754              	.LBB2679:
1640:src/xeq.c     **** 
 13755              		.loc 1 1640 2 view .LVU3612
1642:src/xeq.c     **** 		REGISTER x, y;
 13756              		.loc 1 1642 2 view .LVU3613
1642:src/xeq.c     **** 		REGISTER x, y;
 13757              		.loc 1 1642 5 is_stmt 0 view .LVU3614
 13758 0008 27D0     		beq	.L995
1650:src/xeq.c     **** 			bad_mode_error();
 13759              		.loc 1 1650 3 is_stmt 1 view .LVU3615
1650:src/xeq.c     **** 			bad_mode_error();
 13760              		.loc 1 1650 7 is_stmt 0 view .LVU3616
 13761 000a 3F4B     		ldr	r3, .L997
 13762 000c 1B68     		ldr	r3, [r3]
 13763 000e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1650:src/xeq.c     **** 			bad_mode_error();
 13764              		.loc 1 1650 6 view .LVU3617
 13765 0012 DB07     		lsls	r3, r3, #31
 13766 0014 0ED5     		bpl	.L980
1651:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CRCL, index, &r1, &r2, 1))
 13767              		.loc 1 1651 4 is_stmt 1 view .LVU3618
 13768              	.LBB2606:
 13769              	.LBI2606:
 566:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 13770              		.loc 1 566 6 view .LVU3619
 13771              	.LBE2606:
 13772              	.LBE2679:
 13773              	.LBE2682:
 567:src/xeq.c     **** }
 13774              		.loc 1 567 2 view .LVU3620
 13775              	.LVL996:
 13776              	.LBB2683:
 13777              	.LBB2680:
 13778              	.LBB2613:
 13779              	.LBB2607:
 13780              	.LBI2607:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13781              		.loc 1 537 5 view .LVU3621
 13782              	.LBB2608:
 538:src/xeq.c     **** 		Error = e;
 13783              		.loc 1 538 2 view .LVU3622
 538:src/xeq.c     **** 		Error = e;
 13784              		.loc 1 538 12 is_stmt 0 view .LVU3623
 13785 0016 3D4B     		ldr	r3, .L997+4
ARM GAS  /tmp/cc0UaEmF.s 			page 398


 538:src/xeq.c     **** 		Error = e;
 13786              		.loc 1 538 5 view .LVU3624
 13787 0018 1A68     		ldr	r2, [r3]
 13788 001a 3AB1     		cbz	r2, .L981
 13789              	.LVL997:
 13790              	.L994:
 538:src/xeq.c     **** 		Error = e;
 13791              		.loc 1 538 5 view .LVU3625
 13792 001c 3C4D     		ldr	r5, .L997+8
 13793              	.LVL998:
 13794              	.L979:
 538:src/xeq.c     **** 		Error = e;
 13795              		.loc 1 538 5 view .LVU3626
 13796              	.LBE2608:
 13797              	.LBE2607:
 13798              	.LBE2613:
1659:src/xeq.c     **** }
 13799              		.loc 1 1659 2 is_stmt 1 view .LVU3627
 13800              	.LBB2614:
 13801              	.LBI2614:
 530:src/xeq.c     **** 	State2.wascomplex = 1;
 13802              		.loc 1 530 13 view .LVU3628
 13803              	.LBB2615:
 531:src/xeq.c     **** }
 13804              		.loc 1 531 2 view .LVU3629
 531:src/xeq.c     **** }
 13805              		.loc 1 531 20 is_stmt 0 view .LVU3630
 13806 001e 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 13807 0020 0122     		movs	r2, #1
 13808 0022 62F38713 		bfi	r3, r2, #6, #2
 13809 0026 2B75     		strb	r3, [r5, #20]
 13810              	.LVL999:
 531:src/xeq.c     **** }
 13811              		.loc 1 531 20 view .LVU3631
 13812              	.LBE2615:
 13813              	.LBE2614:
 13814              	.LBE2680:
 13815              	.LBE2683:
1664:src/xeq.c     **** 
 13816              		.loc 1 1664 1 view .LVU3632
 13817 0028 15B0     		add	sp, sp, #84
 13818              		.cfi_remember_state
 13819              		.cfi_def_cfa_offset 20
 13820              		@ sp needed
 13821 002a F0BD     		pop	{r4, r5, r6, r7, pc}
 13822              	.LVL1000:
 13823              	.L981:
 13824              		.cfi_restore_state
 13825              	.LBB2684:
 13826              	.LBB2681:
 13827              	.LBB2616:
 13828              	.LBB2612:
 13829              	.LBB2611:
 13830              	.LBB2609:
 13831              	.LBI2609:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13832              		.loc 1 537 5 is_stmt 1 view .LVU3633
ARM GAS  /tmp/cc0UaEmF.s 			page 399


 13833              	.LBB2610:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 13834              		.loc 1 539 3 view .LVU3634
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 13835              		.loc 1 539 9 is_stmt 0 view .LVU3635
 13836 002c 0D22     		movs	r2, #13
 13837 002e 384D     		ldr	r5, .L997+8
 13838 0030 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 13839              		.loc 1 540 3 is_stmt 1 view .LVU3636
 13840 0032 F4E7     		b	.L979
 13841              	.LVL1001:
 13842              	.L980:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 13843              		.loc 1 540 3 is_stmt 0 view .LVU3637
 13844              	.LBE2610:
 13845              	.LBE2609:
 13846              	.LBE2611:
 13847              	.LBE2612:
 13848              	.LBE2616:
1652:src/xeq.c     **** 			illegal(op);
 13849              		.loc 1 1652 8 is_stmt 1 view .LVU3638
1652:src/xeq.c     **** 			illegal(op);
 13850              		.loc 1 1652 12 is_stmt 0 view .LVU3639
 13851 0034 1A39     		subs	r1, r1, #26
 13852              	.LVL1002:
1652:src/xeq.c     **** 			illegal(op);
 13853              		.loc 1 1652 12 view .LVU3640
 13854 0036 0125     		movs	r5, #1
 13855 0038 88B2     		uxth	r0, r1
 13856              	.LVL1003:
1652:src/xeq.c     **** 			illegal(op);
 13857              		.loc 1 1652 12 view .LVU3641
 13858 003a 0BAB     		add	r3, sp, #44
 13859 003c 2146     		mov	r1, r4
 13860 003e 02AA     		add	r2, sp, #8
 13861 0040 0095     		str	r5, [sp]
 13862 0042 FFF7FEFF 		bl	storcl_cop
 13863              	.LVL1004:
1652:src/xeq.c     **** 			illegal(op);
 13864              		.loc 1 1652 11 view .LVU3642
 13865 0046 0028     		cmp	r0, #0
 13866 0048 4FD0     		beq	.L982
1653:src/xeq.c     **** 		else {
 13867              		.loc 1 1653 4 is_stmt 1 view .LVU3643
1653:src/xeq.c     **** 		else {
 13868              		.loc 1 1653 4 view .LVU3644
 13869              	.LVL1005:
 13870              	.LBB2617:
 13871              	.LBI2617:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13872              		.loc 1 537 5 view .LVU3645
 13873              	.LBB2618:
 538:src/xeq.c     **** 		Error = e;
 13874              		.loc 1 538 2 view .LVU3646
 538:src/xeq.c     **** 		Error = e;
 13875              		.loc 1 538 12 is_stmt 0 view .LVU3647
ARM GAS  /tmp/cc0UaEmF.s 			page 400


 13876 004a 304B     		ldr	r3, .L997+4
 538:src/xeq.c     **** 		Error = e;
 13877              		.loc 1 538 5 view .LVU3648
 13878 004c 1A68     		ldr	r2, [r3]
 13879 004e 002A     		cmp	r2, #0
 13880 0050 E4D1     		bne	.L994
 13881              	.LVL1006:
 13882              	.LBB2619:
 13883              	.LBI2619:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13884              		.loc 1 537 5 is_stmt 1 view .LVU3649
 13885              	.LBB2620:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 13886              		.loc 1 539 3 view .LVU3650
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 13887              		.loc 1 539 9 is_stmt 0 view .LVU3651
 13888 0052 0322     		movs	r2, #3
 13889 0054 2E4D     		ldr	r5, .L997+8
 13890 0056 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 13891              		.loc 1 540 3 is_stmt 1 view .LVU3652
 13892 0058 E1E7     		b	.L979
 13893              	.LVL1007:
 13894              	.L995:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 13895              		.loc 1 540 3 is_stmt 0 view .LVU3653
 13896              	.LBE2620:
 13897              	.LBE2619:
 13898              	.LBE2618:
 13899              	.LBE2617:
 13900              	.LBB2621:
1643:src/xeq.c     **** 		copyreg(&x, get_reg_n(index));
 13901              		.loc 1 1643 3 is_stmt 1 view .LVU3654
1644:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
 13902              		.loc 1 1644 3 view .LVU3655
 13903              	.LBB2622:
 13904              	.LBB2623:
 13905              	.LBB2624:
 13906              	.LBB2625:
 933:src/xeq.c     **** }
 13907              		.loc 1 933 24 is_stmt 0 view .LVU3656
 13908 005a 2B4E     		ldr	r6, .L997
 13909              	.LBE2625:
 13910              	.LBE2624:
 13911              	.LBE2623:
 13912              	.LBE2622:
 13913              	.LBB2632:
 13914              	.LBB2633:
 13915              	.LBB2634:
 13916              	.LBB2635:
 13917              	.LBB2636:
 13918              	.LBB2637:
 735:src/xeq.c     **** }
 13919              		.loc 1 735 15 view .LVU3657
 13920 005c 2C4D     		ldr	r5, .L997+8
 13921              	.LBE2637:
 13922              	.LBE2636:
ARM GAS  /tmp/cc0UaEmF.s 			page 401


 13923              	.LBE2635:
 13924              	.LBE2634:
 13925              	.LBE2633:
 13926              	.LBE2632:
1644:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
 13927              		.loc 1 1644 15 view .LVU3658
 13928 005e FFF7FEFF 		bl	get_reg_n
 13929              	.LVL1008:
 13930              	.LBB2646:
 13931              	.LBB2630:
 13932              	.LBB2628:
 13933              	.LBB2626:
 933:src/xeq.c     **** }
 13934              		.loc 1 933 24 view .LVU3659
 13935 0062 3368     		ldr	r3, [r6]
 13936 0064 B3F8E837 		ldrh	r3, [r3, #2024]
 13937 0068 44F20107 		movw	r7, #16385
 13938              	.LBE2626:
 13939              	.LBE2628:
 718:src/xeq.c     **** }
 13940              		.loc 1 718 2 view .LVU3660
 13941 006c 3B40     		ands	r3, r3, r7
 13942 006e B3F5804F 		cmp	r3, #16384
 13943 0072 0CBF     		ite	eq
 13944 0074 1022     		moveq	r2, #16
 13945 0076 0822     		movne	r2, #8
 13946              	.LBE2630:
 13947              	.LBE2646:
1644:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
 13948              		.loc 1 1644 15 view .LVU3661
 13949 0078 0146     		mov	r1, r0
 13950              	.LVL1009:
 13951              	.LBB2647:
 13952              	.LBI2622:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 13953              		.loc 1 717 6 is_stmt 1 view .LVU3662
 13954              	.LBB2631:
 718:src/xeq.c     **** }
 13955              		.loc 1 718 2 view .LVU3663
 13956              	.LBB2629:
 13957              	.LBI2624:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13958              		.loc 1 932 5 view .LVU3664
 13959              	.LBB2627:
 933:src/xeq.c     **** }
 13960              		.loc 1 933 2 view .LVU3665
 13961              	.LBE2627:
 13962              	.LBE2629:
 718:src/xeq.c     **** }
 13963              		.loc 1 718 2 is_stmt 0 view .LVU3666
 13964 007a 02A8     		add	r0, sp, #8
 13965              	.LVL1010:
 718:src/xeq.c     **** }
 13966              		.loc 1 718 2 view .LVU3667
 13967 007c FFF7FEFF 		bl	xcopy
 13968              	.LVL1011:
 718:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 402


 13969              		.loc 1 718 2 view .LVU3668
 13970              	.LBE2631:
 13971              	.LBE2647:
1645:src/xeq.c     **** 		lift2_if_enabled();
 13972              		.loc 1 1645 3 is_stmt 1 view .LVU3669
1645:src/xeq.c     **** 		lift2_if_enabled();
 13973              		.loc 1 1645 15 is_stmt 0 view .LVU3670
 13974 0080 601C     		adds	r0, r4, #1
 13975 0082 FFF7FEFF 		bl	get_reg_n
 13976              	.LVL1012:
 13977              	.LBB2648:
 13978              	.LBB2649:
 13979              	.LBB2650:
 13980              	.LBB2651:
 933:src/xeq.c     **** }
 13981              		.loc 1 933 24 view .LVU3671
 13982 0086 3368     		ldr	r3, [r6]
 13983 0088 B3F8E837 		ldrh	r3, [r3, #2024]
 13984              	.LBE2651:
 13985              	.LBE2650:
 718:src/xeq.c     **** }
 13986              		.loc 1 718 2 view .LVU3672
 13987 008c 1F40     		ands	r7, r7, r3
 13988 008e B7F5804F 		cmp	r7, #16384
 13989              	.LBE2649:
 13990              	.LBE2648:
1645:src/xeq.c     **** 		lift2_if_enabled();
 13991              		.loc 1 1645 15 view .LVU3673
 13992 0092 0146     		mov	r1, r0
 13993              	.LVL1013:
 13994              	.LBB2655:
 13995              	.LBI2648:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 13996              		.loc 1 717 6 is_stmt 1 view .LVU3674
 13997              	.LBB2654:
 718:src/xeq.c     **** }
 13998              		.loc 1 718 2 view .LVU3675
 13999              	.LBB2653:
 14000              	.LBI2650:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14001              		.loc 1 932 5 view .LVU3676
 14002              	.LBB2652:
 933:src/xeq.c     **** }
 14003              		.loc 1 933 2 view .LVU3677
 14004              	.LBE2652:
 14005              	.LBE2653:
 718:src/xeq.c     **** }
 14006              		.loc 1 718 2 is_stmt 0 view .LVU3678
 14007 0094 0CBF     		ite	eq
 14008 0096 1022     		moveq	r2, #16
 14009 0098 0822     		movne	r2, #8
 14010 009a 0BA8     		add	r0, sp, #44
 14011              	.LVL1014:
 718:src/xeq.c     **** }
 14012              		.loc 1 718 2 view .LVU3679
 14013 009c FFF7FEFF 		bl	xcopy
 14014              	.LVL1015:
ARM GAS  /tmp/cc0UaEmF.s 			page 403


 718:src/xeq.c     **** }
 14015              		.loc 1 718 2 view .LVU3680
 14016              	.LBE2654:
 14017              	.LBE2655:
1646:src/xeq.c     **** 		copyreg(StackBase, &x);
 14018              		.loc 1 1646 3 is_stmt 1 view .LVU3681
 14019              	.LBB2656:
 14020              	.LBI2632:
 743:src/xeq.c     **** 	lift_if_enabled();
 14021              		.loc 1 743 13 view .LVU3682
 14022              	.LBB2644:
 744:src/xeq.c     **** 	lift();
 14023              		.loc 1 744 2 view .LVU3683
 14024              	.LBB2642:
 14025              	.LBI2634:
 738:src/xeq.c     **** 	if (get_lift())
 14026              		.loc 1 738 6 view .LVU3684
 14027              	.LBB2640:
 739:src/xeq.c     **** 		lift();
 14028              		.loc 1 739 2 view .LVU3685
 14029              	.LBB2639:
 14030              	.LBI2636:
 734:src/xeq.c     **** 	return State2.state_lift;
 14031              		.loc 1 734 12 view .LVU3686
 14032              	.LBB2638:
 735:src/xeq.c     **** }
 14033              		.loc 1 735 2 view .LVU3687
 735:src/xeq.c     **** }
 14034              		.loc 1 735 15 is_stmt 0 view .LVU3688
 14035 00a0 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 14036              	.LBE2638:
 14037              	.LBE2639:
 739:src/xeq.c     **** 		lift();
 14038              		.loc 1 739 5 view .LVU3689
 14039 00a2 5A06     		lsls	r2, r3, #25
 14040 00a4 2CD4     		bmi	.L996
 14041              	.L976:
 14042              	.LBE2640:
 14043              	.LBE2642:
 745:src/xeq.c     **** }
 14044              		.loc 1 745 2 is_stmt 1 view .LVU3690
 14045 00a6 FFF7FEFF 		bl	lift
 14046              	.LVL1016:
 14047              	.LBE2644:
 14048              	.LBE2656:
1647:src/xeq.c     **** 		copyreg(get_reg_n(regY_idx), &y);
 14049              		.loc 1 1647 3 view .LVU3691
 14050              	.LBB2657:
 14051              	.LBB2658:
 14052              	.LBB2659:
 14053              	.LBB2660:
 933:src/xeq.c     **** }
 14054              		.loc 1 933 24 is_stmt 0 view .LVU3692
 14055 00aa 3368     		ldr	r3, [r6]
 14056              	.LBE2660:
 14057              	.LBE2659:
 14058              	.LBE2658:
ARM GAS  /tmp/cc0UaEmF.s 			page 404


 14059              	.LBE2657:
1647:src/xeq.c     **** 		copyreg(get_reg_n(regY_idx), &y);
 14060              		.loc 1 1647 3 view .LVU3693
 14061 00ac 194A     		ldr	r2, .L997+12
 14062              	.LVL1017:
 14063              	.LBB2666:
 14064              	.LBI2657:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14065              		.loc 1 717 6 is_stmt 1 view .LVU3694
 14066              	.LBB2665:
 718:src/xeq.c     **** }
 14067              		.loc 1 718 2 view .LVU3695
 14068              	.LBB2663:
 14069              	.LBI2659:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14070              		.loc 1 932 5 view .LVU3696
 14071              	.LBB2661:
 933:src/xeq.c     **** }
 14072              		.loc 1 933 2 view .LVU3697
 933:src/xeq.c     **** }
 14073              		.loc 1 933 24 is_stmt 0 view .LVU3698
 14074 00ae B3F8E837 		ldrh	r3, [r3, #2024]
 14075              	.LBE2661:
 14076              	.LBE2663:
 718:src/xeq.c     **** }
 14077              		.loc 1 718 2 view .LVU3699
 14078 00b2 1068     		ldr	r0, [r2]
 14079              	.LBB2664:
 14080              	.LBB2662:
 933:src/xeq.c     **** }
 14081              		.loc 1 933 24 view .LVU3700
 14082 00b4 44F20104 		movw	r4, #16385
 14083              	.LVL1018:
 933:src/xeq.c     **** }
 14084              		.loc 1 933 24 view .LVU3701
 14085              	.LBE2662:
 14086              	.LBE2664:
 718:src/xeq.c     **** }
 14087              		.loc 1 718 2 view .LVU3702
 14088 00b8 2340     		ands	r3, r3, r4
 14089 00ba B3F5804F 		cmp	r3, #16384
 14090 00be 0CBF     		ite	eq
 14091 00c0 1022     		moveq	r2, #16
 14092              	.LVL1019:
 718:src/xeq.c     **** }
 14093              		.loc 1 718 2 view .LVU3703
 14094 00c2 0822     		movne	r2, #8
 14095 00c4 02A9     		add	r1, sp, #8
 14096              	.LVL1020:
 718:src/xeq.c     **** }
 14097              		.loc 1 718 2 view .LVU3704
 14098 00c6 FFF7FEFF 		bl	xcopy
 14099              	.LVL1021:
 718:src/xeq.c     **** }
 14100              		.loc 1 718 2 view .LVU3705
 14101              	.LBE2665:
 14102              	.LBE2666:
ARM GAS  /tmp/cc0UaEmF.s 			page 405


1648:src/xeq.c     **** 	} else {
 14103              		.loc 1 1648 3 is_stmt 1 view .LVU3706
 14104 00ca 6520     		movs	r0, #101
 14105 00cc FFF7FEFF 		bl	get_reg_n
 14106              	.LVL1022:
 14107              	.LBB2667:
 14108              	.LBI2667:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14109              		.loc 1 717 6 view .LVU3707
 14110              	.LBB2668:
 718:src/xeq.c     **** }
 14111              		.loc 1 718 2 view .LVU3708
 14112              	.LBB2669:
 14113              	.LBI2669:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14114              		.loc 1 932 5 view .LVU3709
 14115              	.LBB2670:
 933:src/xeq.c     **** }
 14116              		.loc 1 933 2 view .LVU3710
 933:src/xeq.c     **** }
 14117              		.loc 1 933 24 is_stmt 0 view .LVU3711
 14118 00d0 3368     		ldr	r3, [r6]
 14119 00d2 B3F8E837 		ldrh	r3, [r3, #2024]
 14120              	.LBE2670:
 14121              	.LBE2669:
 718:src/xeq.c     **** }
 14122              		.loc 1 718 2 view .LVU3712
 14123 00d6 1C40     		ands	r4, r4, r3
 14124 00d8 B4F5804F 		cmp	r4, #16384
 14125 00dc 0BA9     		add	r1, sp, #44
 14126              	.LVL1023:
 718:src/xeq.c     **** }
 14127              		.loc 1 718 2 view .LVU3713
 14128 00de 0CBF     		ite	eq
 14129 00e0 1022     		moveq	r2, #16
 14130 00e2 0822     		movne	r2, #8
 14131 00e4 FFF7FEFF 		bl	xcopy
 14132              	.LVL1024:
 718:src/xeq.c     **** }
 14133              		.loc 1 718 2 view .LVU3714
 14134              	.LBE2668:
 14135              	.LBE2667:
 14136              	.LBE2621:
 14137 00e8 99E7     		b	.L979
 14138              	.LVL1025:
 14139              	.L982:
1655:src/xeq.c     **** 			setXY(&r1, &r2);
 14140              		.loc 1 1655 4 is_stmt 1 view .LVU3715
 14141 00ea FFF7FEFF 		bl	setlastXY
 14142              	.LVL1026:
1656:src/xeq.c     **** 		}
 14143              		.loc 1 1656 4 view .LVU3716
 14144              	.LBB2672:
 14145              	.LBI2672:
 840:src/xeq.c     **** 	setX(x);
 14146              		.loc 1 840 6 view .LVU3717
 14147              	.LBB2673:
ARM GAS  /tmp/cc0UaEmF.s 			page 406


 841:src/xeq.c     **** 	setY(y);
 14148              		.loc 1 841 2 view .LVU3718
 14149              	.LBB2674:
 14150              	.LBI2674:
 809:src/xeq.c     **** 	setRegister(regX_idx, x);
 14151              		.loc 1 809 6 view .LVU3719
 14152              	.LBB2675:
 810:src/xeq.c     **** }
 14153              		.loc 1 810 2 view .LVU3720
 14154 00ee 02A9     		add	r1, sp, #8
 14155              	.LVL1027:
 810:src/xeq.c     **** }
 14156              		.loc 1 810 2 is_stmt 0 view .LVU3721
 14157 00f0 6420     		movs	r0, #100
 14158 00f2 FFF7FEFF 		bl	setRegister
 14159              	.LVL1028:
 810:src/xeq.c     **** }
 14160              		.loc 1 810 2 view .LVU3722
 14161              	.LBE2675:
 14162              	.LBE2674:
 842:src/xeq.c     **** }
 14163              		.loc 1 842 2 is_stmt 1 view .LVU3723
 14164              	.LBB2676:
 14165              	.LBI2676:
 817:src/xeq.c     **** 	setRegister(regY_idx, y);
 14166              		.loc 1 817 6 view .LVU3724
 14167              	.LBB2677:
 818:src/xeq.c     **** }
 14168              		.loc 1 818 2 view .LVU3725
 14169 00f6 0BA9     		add	r1, sp, #44
 14170              	.LVL1029:
 818:src/xeq.c     **** }
 14171              		.loc 1 818 2 is_stmt 0 view .LVU3726
 14172 00f8 6520     		movs	r0, #101
 14173 00fa FFF7FEFF 		bl	setRegister
 14174              	.LVL1030:
 818:src/xeq.c     **** }
 14175              		.loc 1 818 2 view .LVU3727
 14176 00fe 8DE7     		b	.L994
 14177              	.LVL1031:
 14178              	.L996:
 818:src/xeq.c     **** }
 14179              		.loc 1 818 2 view .LVU3728
 14180              	.LBE2677:
 14181              	.LBE2676:
 14182              	.LBE2673:
 14183              	.LBE2672:
 14184              	.LBB2678:
 14185              	.LBB2671:
 14186              	.LBB2645:
 14187              	.LBB2643:
 14188              	.LBB2641:
 740:src/xeq.c     **** }
 14189              		.loc 1 740 3 is_stmt 1 view .LVU3729
 14190 0100 FFF7FEFF 		bl	lift
 14191              	.LVL1032:
 14192 0104 CFE7     		b	.L976
ARM GAS  /tmp/cc0UaEmF.s 			page 407


 14193              	.L998:
 14194 0106 00BF     		.align	2
 14195              	.L997:
 14196 0108 00000000 		.word	main_ram
 14197 010c 00000000 		.word	Error
 14198 0110 00000000 		.word	StateWhileOn
 14199 0114 00000000 		.word	StackBase
 14200              	.LBE2641:
 14201              	.LBE2643:
 14202              	.LBE2645:
 14203              	.LBE2671:
 14204              	.LBE2678:
 14205              	.LBE2681:
 14206              	.LBE2684:
 14207              		.cfi_endproc
 14208              	.LFE119:
 14210              		.section	.text.cmdircl,"ax",%progbits
 14211              		.align	1
 14212              		.p2align 2,,3
 14213              		.global	cmdircl
 14214              		.syntax unified
 14215              		.thumb
 14216              		.thumb_func
 14217              		.fpu fpv4-sp-d16
 14219              	cmdircl:
 14220              	.LVL1033:
 14221              	.LFB120:
1676:src/xeq.c     **** 	if (is_intmode())
 14222              		.loc 1 1676 46 view -0
 14223              		.cfi_startproc
 14224              		@ args = 0, pretend = 0, frame = 0
 14225              		@ frame_needed = 0, uses_anonymous_args = 0
 14226              		@ link register save eliminated.
1677:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 14227              		.loc 1 1677 2 view .LVU3731
1677:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 14228              		.loc 1 1677 6 is_stmt 0 view .LVU3732
 14229 0000 064B     		ldr	r3, .L1001
 14230 0002 1B68     		ldr	r3, [r3]
 14231 0004 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
1677:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 14232              		.loc 1 1677 5 view .LVU3733
 14233 0008 12F00102 		ands	r2, r2, #1
1676:src/xeq.c     **** 	if (is_intmode())
 14234              		.loc 1 1676 46 view .LVU3734
 14235 000c 0146     		mov	r1, r0
 14236              	.LVL1034:
1677:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 14237              		.loc 1 1677 5 view .LVU3735
 14238 000e 02D0     		beq	.L1000
1678:src/xeq.c     **** 	else
 14239              		.loc 1 1678 3 is_stmt 1 view .LVU3736
 14240              	.LVL1035:
 14241              	.LBB2685:
 14242              	.LBI2685:
1571:src/xeq.c     **** 	do_rcl(arg, op);
 14243              		.loc 1 1571 6 view .LVU3737
ARM GAS  /tmp/cc0UaEmF.s 			page 408


 14244              	.LBB2686:
1572:src/xeq.c     **** }
 14245              		.loc 1 1572 2 view .LVU3738
 14246 0010 0A21     		movs	r1, #10
 14247 0012 FFF7FEBF 		b	do_rcl
 14248              	.LVL1036:
 14249              	.L1000:
1572:src/xeq.c     **** }
 14250              		.loc 1 1572 2 is_stmt 0 view .LVU3739
 14251              	.LBE2686:
 14252              	.LBE2685:
1680:src/xeq.c     **** }
 14253              		.loc 1 1680 3 is_stmt 1 view .LVU3740
 14254 0016 6420     		movs	r0, #100
 14255              	.LVL1037:
1680:src/xeq.c     **** }
 14256              		.loc 1 1680 3 is_stmt 0 view .LVU3741
 14257 0018 FFF7FEBF 		b	register_from_int
 14258              	.LVL1038:
 14259              	.L1002:
1680:src/xeq.c     **** }
 14260              		.loc 1 1680 3 view .LVU3742
 14261              		.align	2
 14262              	.L1001:
 14263 001c 00000000 		.word	main_ram
 14264              		.cfi_endproc
 14265              	.LFE120:
 14267              		.section	.text.cmdrrcl,"ax",%progbits
 14268              		.align	1
 14269              		.p2align 2,,3
 14270              		.global	cmdrrcl
 14271              		.syntax unified
 14272              		.thumb
 14273              		.thumb_func
 14274              		.fpu fpv4-sp-d16
 14276              	cmdrrcl:
 14277              	.LVL1039:
 14278              	.LFB121:
1684:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
 14279              		.loc 1 1684 46 is_stmt 1 view -0
 14280              		.cfi_startproc
 14281              		@ args = 0, pretend = 0, frame = 40
 14282              		@ frame_needed = 0, uses_anonymous_args = 0
1685:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 14283              		.loc 1 1685 2 view .LVU3744
1684:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
 14284              		.loc 1 1684 46 is_stmt 0 view .LVU3745
 14285 0000 70B5     		push	{r4, r5, r6, lr}
 14286              		.cfi_def_cfa_offset 16
 14287              		.cfi_offset 4, -16
 14288              		.cfi_offset 5, -12
 14289              		.cfi_offset 6, -8
 14290              		.cfi_offset 14, -4
1685:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 14291              		.loc 1 1685 22 view .LVU3746
 14292 0002 1F4C     		ldr	r4, .L1010
 14293 0004 2368     		ldr	r3, [r4]
ARM GAS  /tmp/cc0UaEmF.s 			page 409


1685:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 14294              		.loc 1 1685 28 view .LVU3747
 14295 0006 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
1686:src/xeq.c     **** 
 14296              		.loc 1 1686 26 view .LVU3748
 14297 000a 8029     		cmp	r1, #128
1684:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
 14298              		.loc 1 1684 46 view .LVU3749
 14299 000c 8AB0     		sub	sp, sp, #40
 14300              		.cfi_def_cfa_offset 56
1685:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 14301              		.loc 1 1685 28 view .LVU3750
 14302 000e C2F38015 		ubfx	r5, r2, #6, #1
 14303              	.LVL1040:
1686:src/xeq.c     **** 
 14304              		.loc 1 1686 2 is_stmt 1 view .LVU3751
1686:src/xeq.c     **** 
 14305              		.loc 1 1686 26 is_stmt 0 view .LVU3752
 14306 0012 0CBF     		ite	eq
 14307 0014 0121     		moveq	r1, #1
 14308              	.LVL1041:
1686:src/xeq.c     **** 
 14309              		.loc 1 1686 26 view .LVU3753
 14310 0016 0021     		movne	r1, #0
 14311              	.LVL1042:
1688:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 14312              		.loc 1 1688 2 is_stmt 1 view .LVU3754
1688:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 14313              		.loc 1 1688 5 is_stmt 0 view .LVU3755
 14314 0018 26D0     		beq	.L1008
 14315              	.LVL1043:
 14316              	.L1004:
1694:src/xeq.c     **** 	if (is_intmode()) {
 14317              		.loc 1 1694 2 is_stmt 1 view .LVU3756
1694:src/xeq.c     **** 	if (is_intmode()) {
 14318              		.loc 1 1694 21 is_stmt 0 view .LVU3757
 14319 001a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
1695:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 14320              		.loc 1 1695 6 view .LVU3758
 14321 001e 93F8E867 		ldrb	r6, [r3, #2024]	@ zero_extendqisi2
1694:src/xeq.c     **** 	if (is_intmode()) {
 14322              		.loc 1 1694 21 view .LVU3759
 14323 0022 61F38612 		bfi	r2, r1, #6, #1
 14324 0026 83F8E927 		strb	r2, [r3, #2025]
 14325              	.LVL1044:
1695:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 14326              		.loc 1 1695 2 is_stmt 1 view .LVU3760
1695:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 14327              		.loc 1 1695 5 is_stmt 0 view .LVU3761
 14328 002a F307     		lsls	r3, r6, #31
1696:src/xeq.c     **** 		UState.mode_double = was_dbl;
 14329              		.loc 1 1696 3 view .LVU3762
 14330 002c 0146     		mov	r1, r0
 14331              	.LVL1045:
1695:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 14332              		.loc 1 1695 5 view .LVU3763
 14333 002e 0FD4     		bmi	.L1009
ARM GAS  /tmp/cc0UaEmF.s 			page 410


 14334              	.LBB2694:
1700:src/xeq.c     **** 		getRegister(&x, arg);
 14335              		.loc 1 1700 3 is_stmt 1 view .LVU3764
1701:src/xeq.c     **** 
 14336              		.loc 1 1701 3 view .LVU3765
 14337 0030 01A8     		add	r0, sp, #4
 14338              	.LVL1046:
1701:src/xeq.c     **** 
 14339              		.loc 1 1701 3 is_stmt 0 view .LVU3766
 14340 0032 FFF7FEFF 		bl	getRegister
 14341              	.LVL1047:
1703:src/xeq.c     **** 		setX(&x);
 14342              		.loc 1 1703 3 is_stmt 1 view .LVU3767
1703:src/xeq.c     **** 		setX(&x);
 14343              		.loc 1 1703 22 is_stmt 0 view .LVU3768
 14344 0036 2368     		ldr	r3, [r4]
 14345 0038 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 14346 003c 65F38612 		bfi	r2, r5, #6, #1
 14347              	.LBB2695:
 14348              	.LBB2696:
 810:src/xeq.c     **** }
 14349              		.loc 1 810 2 view .LVU3769
 14350 0040 01A9     		add	r1, sp, #4
 14351              	.LBE2696:
 14352              	.LBE2695:
1703:src/xeq.c     **** 		setX(&x);
 14353              		.loc 1 1703 22 view .LVU3770
 14354 0042 83F8E927 		strb	r2, [r3, #2025]
1704:src/xeq.c     **** 	}
 14355              		.loc 1 1704 3 is_stmt 1 view .LVU3771
 14356              	.LVL1048:
 14357              	.LBB2698:
 14358              	.LBI2695:
 809:src/xeq.c     **** 	setRegister(regX_idx, x);
 14359              		.loc 1 809 6 view .LVU3772
 14360              	.LBB2697:
 810:src/xeq.c     **** }
 14361              		.loc 1 810 2 view .LVU3773
 14362 0046 6420     		movs	r0, #100
 14363 0048 FFF7FEFF 		bl	setRegister
 14364              	.LVL1049:
 14365              	.L1003:
 810:src/xeq.c     **** }
 14366              		.loc 1 810 2 is_stmt 0 view .LVU3774
 14367              	.LBE2697:
 14368              	.LBE2698:
 14369              	.LBE2694:
1706:src/xeq.c     **** 
 14370              		.loc 1 1706 1 view .LVU3775
 14371 004c 0AB0     		add	sp, sp, #40
 14372              		.cfi_remember_state
 14373              		.cfi_def_cfa_offset 16
 14374              		@ sp needed
 14375 004e 70BD     		pop	{r4, r5, r6, pc}
 14376              	.LVL1050:
 14377              	.L1009:
 14378              		.cfi_restore_state
ARM GAS  /tmp/cc0UaEmF.s 			page 411


1696:src/xeq.c     **** 		UState.mode_double = was_dbl;
 14379              		.loc 1 1696 3 is_stmt 1 view .LVU3776
 14380 0050 6420     		movs	r0, #100
 14381              	.LVL1051:
1696:src/xeq.c     **** 		UState.mode_double = was_dbl;
 14382              		.loc 1 1696 3 is_stmt 0 view .LVU3777
 14383 0052 FFF7FEFF 		bl	int_from_register
 14384              	.LVL1052:
1697:src/xeq.c     **** 	}
 14385              		.loc 1 1697 3 is_stmt 1 view .LVU3778
1697:src/xeq.c     **** 	}
 14386              		.loc 1 1697 22 is_stmt 0 view .LVU3779
 14387 0056 2368     		ldr	r3, [r4]
 14388 0058 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 14389 005c 65F38612 		bfi	r2, r5, #6, #1
 14390 0060 83F8E927 		strb	r2, [r3, #2025]
1706:src/xeq.c     **** 
 14391              		.loc 1 1706 1 view .LVU3780
 14392 0064 0AB0     		add	sp, sp, #40
 14393              		.cfi_remember_state
 14394              		.cfi_def_cfa_offset 16
 14395              		@ sp needed
 14396 0066 70BD     		pop	{r4, r5, r6, pc}
 14397              	.LVL1053:
 14398              	.L1008:
 14399              		.cfi_restore_state
1688:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 14400              		.loc 1 1688 14 discriminator 1 view .LVU3781
 14401 0068 A0F16402 		sub	r2, r0, #100
 14402              	.LVL1054:
1688:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 14403              		.loc 1 1688 14 discriminator 1 view .LVU3782
 14404 006c 0B2A     		cmp	r2, #11
 14405 006e D4D8     		bhi	.L1004
1690:src/xeq.c     **** 		return;
 14406              		.loc 1 1690 3 is_stmt 1 view .LVU3783
 14407              	.LVL1055:
 14408              	.LBB2699:
 14409              	.LBI2699:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14410              		.loc 1 537 5 view .LVU3784
 14411              	.LBB2700:
 538:src/xeq.c     **** 		Error = e;
 14412              		.loc 1 538 2 view .LVU3785
 538:src/xeq.c     **** 		Error = e;
 14413              		.loc 1 538 12 is_stmt 0 view .LVU3786
 14414 0070 044B     		ldr	r3, .L1010+4
 14415              	.LVL1056:
 538:src/xeq.c     **** 		Error = e;
 14416              		.loc 1 538 5 view .LVU3787
 14417 0072 1A68     		ldr	r2, [r3]
 14418 0074 002A     		cmp	r2, #0
 14419 0076 E9D1     		bne	.L1003
 14420              	.LVL1057:
 14421              	.LBB2701:
 14422              	.LBI2701:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
ARM GAS  /tmp/cc0UaEmF.s 			page 412


 14423              		.loc 1 537 5 is_stmt 1 view .LVU3788
 14424              	.LBB2702:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 14425              		.loc 1 539 3 view .LVU3789
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 14426              		.loc 1 539 9 is_stmt 0 view .LVU3790
 14427 0078 0822     		movs	r2, #8
 14428 007a 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 14429              		.loc 1 540 3 is_stmt 1 view .LVU3791
 14430 007c E6E7     		b	.L1003
 14431              	.L1011:
 14432 007e 00BF     		.align	2
 14433              	.L1010:
 14434 0080 00000000 		.word	main_ram
 14435 0084 00000000 		.word	Error
 14436              	.LBE2702:
 14437              	.LBE2701:
 14438              	.LBE2700:
 14439              	.LBE2699:
 14440              		.cfi_endproc
 14441              	.LFE121:
 14443              		.section	.text.swap_reg,"ax",%progbits
 14444              		.align	1
 14445              		.p2align 2,,3
 14446              		.global	swap_reg
 14447              		.syntax unified
 14448              		.thumb
 14449              		.thumb_func
 14450              		.fpu fpv4-sp-d16
 14452              	swap_reg:
 14453              	.LVL1058:
 14454              	.LFB122:
1711:src/xeq.c     **** 	REGISTER t;
 14455              		.loc 1 1711 41 view -0
 14456              		.cfi_startproc
 14457              		@ args = 0, pretend = 0, frame = 16
 14458              		@ frame_needed = 0, uses_anonymous_args = 0
1712:src/xeq.c     **** 
 14459              		.loc 1 1712 2 view .LVU3793
1714:src/xeq.c     **** 	copyreg(a, b);
 14460              		.loc 1 1714 2 view .LVU3794
1711:src/xeq.c     **** 	REGISTER t;
 14461              		.loc 1 1711 41 is_stmt 0 view .LVU3795
 14462 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 14463              		.cfi_def_cfa_offset 20
 14464              		.cfi_offset 4, -20
 14465              		.cfi_offset 5, -16
 14466              		.cfi_offset 6, -12
 14467              		.cfi_offset 7, -8
 14468              		.cfi_offset 14, -4
 14469              	.LBB2703:
 14470              	.LBB2704:
 14471              	.LBB2705:
 14472              	.LBB2706:
 933:src/xeq.c     **** }
 14473              		.loc 1 933 24 view .LVU3796
ARM GAS  /tmp/cc0UaEmF.s 			page 413


 14474 0002 174F     		ldr	r7, .L1020
 14475 0004 3B68     		ldr	r3, [r7]
 14476 0006 B3F8E837 		ldrh	r3, [r3, #2024]
 14477 000a 44F20104 		movw	r4, #16385
 14478              	.LBE2706:
 14479              	.LBE2705:
 718:src/xeq.c     **** }
 14480              		.loc 1 718 2 view .LVU3797
 14481 000e 2340     		ands	r3, r3, r4
 14482              	.LBE2704:
 14483              	.LBE2703:
1711:src/xeq.c     **** 	REGISTER t;
 14484              		.loc 1 1711 41 view .LVU3798
 14485 0010 85B0     		sub	sp, sp, #20
 14486              		.cfi_def_cfa_offset 40
 14487              	.LVL1059:
 14488              	.LBB2711:
 14489              	.LBB2709:
 718:src/xeq.c     **** }
 14490              		.loc 1 718 2 view .LVU3799
 14491 0012 B3F5804F 		cmp	r3, #16384
 14492 0016 0CBF     		ite	eq
 14493 0018 1022     		moveq	r2, #16
 14494 001a 0822     		movne	r2, #8
 14495              	.LBE2709:
 14496              	.LBE2711:
1711:src/xeq.c     **** 	REGISTER t;
 14497              		.loc 1 1711 41 view .LVU3800
 14498 001c 0D46     		mov	r5, r1
 14499 001e 0646     		mov	r6, r0
 14500              	.LVL1060:
 14501              	.LBB2712:
 14502              	.LBI2703:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14503              		.loc 1 717 6 is_stmt 1 view .LVU3801
 14504              	.LBB2710:
 718:src/xeq.c     **** }
 14505              		.loc 1 718 2 view .LVU3802
 14506              	.LBB2708:
 14507              	.LBI2705:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14508              		.loc 1 932 5 view .LVU3803
 14509              	.LBB2707:
 933:src/xeq.c     **** }
 14510              		.loc 1 933 2 view .LVU3804
 14511              	.LBE2707:
 14512              	.LBE2708:
 718:src/xeq.c     **** }
 14513              		.loc 1 718 2 is_stmt 0 view .LVU3805
 14514 0020 0146     		mov	r1, r0
 14515              	.LVL1061:
 718:src/xeq.c     **** }
 14516              		.loc 1 718 2 view .LVU3806
 14517 0022 6846     		mov	r0, sp
 14518              	.LVL1062:
 718:src/xeq.c     **** }
 14519              		.loc 1 718 2 view .LVU3807
ARM GAS  /tmp/cc0UaEmF.s 			page 414


 14520 0024 FFF7FEFF 		bl	xcopy
 14521              	.LVL1063:
 718:src/xeq.c     **** }
 14522              		.loc 1 718 2 view .LVU3808
 14523              	.LBE2710:
 14524              	.LBE2712:
1715:src/xeq.c     **** 	copyreg(b, &t);
 14525              		.loc 1 1715 2 is_stmt 1 view .LVU3809
 14526              	.LBB2713:
 14527              	.LBI2713:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14528              		.loc 1 717 6 view .LVU3810
 14529              	.LBB2714:
 718:src/xeq.c     **** }
 14530              		.loc 1 718 2 view .LVU3811
 14531              	.LBB2715:
 14532              	.LBI2715:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14533              		.loc 1 932 5 view .LVU3812
 14534              	.LBB2716:
 933:src/xeq.c     **** }
 14535              		.loc 1 933 2 view .LVU3813
 933:src/xeq.c     **** }
 14536              		.loc 1 933 24 is_stmt 0 view .LVU3814
 14537 0028 3B68     		ldr	r3, [r7]
 14538 002a B3F8E837 		ldrh	r3, [r3, #2024]
 14539              	.LBE2716:
 14540              	.LBE2715:
 718:src/xeq.c     **** }
 14541              		.loc 1 718 2 view .LVU3815
 14542 002e 2340     		ands	r3, r3, r4
 14543 0030 B3F5804F 		cmp	r3, #16384
 14544 0034 0CBF     		ite	eq
 14545 0036 1022     		moveq	r2, #16
 14546 0038 0822     		movne	r2, #8
 14547 003a 2946     		mov	r1, r5
 14548 003c 3046     		mov	r0, r6
 14549 003e FFF7FEFF 		bl	xcopy
 14550              	.LVL1064:
 718:src/xeq.c     **** }
 14551              		.loc 1 718 2 view .LVU3816
 14552              	.LBE2714:
 14553              	.LBE2713:
1716:src/xeq.c     **** }
 14554              		.loc 1 1716 2 is_stmt 1 view .LVU3817
 14555              	.LBB2717:
 14556              	.LBI2717:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14557              		.loc 1 717 6 view .LVU3818
 14558              	.LBB2718:
 718:src/xeq.c     **** }
 14559              		.loc 1 718 2 view .LVU3819
 14560              	.LBB2719:
 14561              	.LBI2719:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14562              		.loc 1 932 5 view .LVU3820
 14563              	.LBB2720:
ARM GAS  /tmp/cc0UaEmF.s 			page 415


 933:src/xeq.c     **** }
 14564              		.loc 1 933 2 view .LVU3821
 933:src/xeq.c     **** }
 14565              		.loc 1 933 24 is_stmt 0 view .LVU3822
 14566 0042 3B68     		ldr	r3, [r7]
 14567 0044 B3F8E837 		ldrh	r3, [r3, #2024]
 14568              	.LBE2720:
 14569              	.LBE2719:
 718:src/xeq.c     **** }
 14570              		.loc 1 718 2 view .LVU3823
 14571 0048 1C40     		ands	r4, r4, r3
 14572 004a B4F5804F 		cmp	r4, #16384
 14573 004e 2846     		mov	r0, r5
 14574 0050 6946     		mov	r1, sp
 14575 0052 0CBF     		ite	eq
 14576 0054 1022     		moveq	r2, #16
 14577 0056 0822     		movne	r2, #8
 14578 0058 FFF7FEFF 		bl	xcopy
 14579              	.LVL1065:
 718:src/xeq.c     **** }
 14580              		.loc 1 718 2 view .LVU3824
 14581              	.LBE2718:
 14582              	.LBE2717:
1717:src/xeq.c     **** 
 14583              		.loc 1 1717 1 view .LVU3825
 14584 005c 05B0     		add	sp, sp, #20
 14585              		.cfi_def_cfa_offset 20
 14586              		@ sp needed
 14587 005e F0BD     		pop	{r4, r5, r6, r7, pc}
 14588              	.LVL1066:
 14589              	.L1021:
1717:src/xeq.c     **** 
 14590              		.loc 1 1717 1 view .LVU3826
 14591              		.align	2
 14592              	.L1020:
 14593 0060 00000000 		.word	main_ram
 14594              		.cfi_endproc
 14595              	.LFE122:
 14597              		.section	.text.cmdswap,"ax",%progbits
 14598              		.align	1
 14599              		.p2align 2,,3
 14600              		.global	cmdswap
 14601              		.syntax unified
 14602              		.thumb
 14603              		.thumb_func
 14604              		.fpu fpv4-sp-d16
 14606              	cmdswap:
 14607              	.LVL1067:
 14608              	.LFB123:
1719:src/xeq.c     **** 	int idx;
 14609              		.loc 1 1719 46 is_stmt 1 view -0
 14610              		.cfi_startproc
 14611              		@ args = 0, pretend = 0, frame = 0
 14612              		@ frame_needed = 0, uses_anonymous_args = 0
1720:src/xeq.c     **** 
 14613              		.loc 1 1720 2 view .LVU3828
1722:src/xeq.c     **** 		idx = regX_idx;
ARM GAS  /tmp/cc0UaEmF.s 			page 416


 14614              		.loc 1 1722 2 view .LVU3829
1722:src/xeq.c     **** 		idx = regX_idx;
 14615              		.loc 1 1722 5 is_stmt 0 view .LVU3830
 14616 0000 1F29     		cmp	r1, #31
1719:src/xeq.c     **** 	int idx;
 14617              		.loc 1 1719 46 view .LVU3831
 14618 0002 70B5     		push	{r4, r5, r6, lr}
 14619              		.cfi_def_cfa_offset 16
 14620              		.cfi_offset 4, -16
 14621              		.cfi_offset 5, -12
 14622              		.cfi_offset 6, -8
 14623              		.cfi_offset 14, -4
1719:src/xeq.c     **** 	int idx;
 14624              		.loc 1 1719 46 view .LVU3832
 14625 0004 0546     		mov	r5, r0
1722:src/xeq.c     **** 		idx = regX_idx;
 14626              		.loc 1 1722 5 view .LVU3833
 14627 0006 11D0     		beq	.L1023
1724:src/xeq.c     **** 		idx = regZ_idx;
 14628              		.loc 1 1724 10 view .LVU3834
 14629 0008 2029     		cmp	r1, #32
 14630 000a 0C46     		mov	r4, r1
1724:src/xeq.c     **** 		idx = regZ_idx;
 14631              		.loc 1 1724 7 is_stmt 1 view .LVU3835
1724:src/xeq.c     **** 		idx = regZ_idx;
 14632              		.loc 1 1724 10 is_stmt 0 view .LVU3836
 14633 000c 2BD0     		beq	.L1024
1727:src/xeq.c     **** 
 14634              		.loc 1 1727 3 is_stmt 1 view .LVU3837
 14635              	.LVL1068:
1729:src/xeq.c     **** 
 14636              		.loc 1 1729 2 view .LVU3838
 14637 000e 01F15300 		add	r0, r1, #83
 14638              	.LVL1069:
1729:src/xeq.c     **** 
 14639              		.loc 1 1729 2 is_stmt 0 view .LVU3839
 14640 0012 FFF7FEFF 		bl	get_reg_n
 14641              	.LVL1070:
1729:src/xeq.c     **** 
 14642              		.loc 1 1729 2 view .LVU3840
 14643 0016 0646     		mov	r6, r0
 14644 0018 2846     		mov	r0, r5
 14645 001a FFF7FEFF 		bl	get_reg_n
 14646              	.LVL1071:
 14647 001e 0146     		mov	r1, r0
 14648 0020 3046     		mov	r0, r6
 14649 0022 FFF7FEFF 		bl	swap_reg
 14650              	.LVL1072:
1731:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 14651              		.loc 1 1731 2 is_stmt 1 view .LVU3841
1731:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 14652              		.loc 1 1731 5 is_stmt 0 view .LVU3842
 14653 0026 1E2C     		cmp	r4, #30
 14654 0028 2AD8     		bhi	.L1028
1735:src/xeq.c     **** 
 14655              		.loc 1 1735 1 view .LVU3843
 14656 002a 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  /tmp/cc0UaEmF.s 			page 417


 14657              	.LVL1073:
 14658              	.L1023:
1729:src/xeq.c     **** 
 14659              		.loc 1 1729 2 is_stmt 1 view .LVU3844
 14660 002c 6420     		movs	r0, #100
 14661              	.LVL1074:
1729:src/xeq.c     **** 
 14662              		.loc 1 1729 2 is_stmt 0 view .LVU3845
 14663 002e FFF7FEFF 		bl	get_reg_n
 14664              	.LVL1075:
1729:src/xeq.c     **** 
 14665              		.loc 1 1729 2 view .LVU3846
 14666 0032 0446     		mov	r4, r0
 14667 0034 2846     		mov	r0, r5
 14668 0036 FFF7FEFF 		bl	get_reg_n
 14669              	.LVL1076:
 14670 003a 0146     		mov	r1, r0
 14671 003c 2046     		mov	r0, r4
 14672 003e FFF7FEFF 		bl	swap_reg
 14673              	.LVL1077:
1731:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 14674              		.loc 1 1731 2 is_stmt 1 view .LVU3847
1729:src/xeq.c     **** 
 14675              		.loc 1 1729 2 is_stmt 0 view .LVU3848
 14676 0042 6520     		movs	r0, #101
 14677              	.LVL1078:
 14678              	.L1026:
1732:src/xeq.c     **** 		set_was_complex();
 14679              		.loc 1 1732 3 is_stmt 1 view .LVU3849
 14680 0044 FFF7FEFF 		bl	get_reg_n
 14681              	.LVL1079:
 14682 0048 0446     		mov	r4, r0
 14683 004a 681C     		adds	r0, r5, #1
 14684 004c FFF7FEFF 		bl	get_reg_n
 14685              	.LVL1080:
 14686 0050 0146     		mov	r1, r0
 14687 0052 2046     		mov	r0, r4
 14688 0054 FFF7FEFF 		bl	swap_reg
 14689              	.LVL1081:
1733:src/xeq.c     **** 	}
 14690              		.loc 1 1733 3 view .LVU3850
 14691              	.LBB2721:
 14692              	.LBI2721:
 530:src/xeq.c     **** 	State2.wascomplex = 1;
 14693              		.loc 1 530 13 view .LVU3851
 14694              	.LBB2722:
 531:src/xeq.c     **** }
 14695              		.loc 1 531 2 view .LVU3852
 531:src/xeq.c     **** }
 14696              		.loc 1 531 20 is_stmt 0 view .LVU3853
 14697 0058 0B4B     		ldr	r3, .L1029
 14698 005a 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 14699 005c 0121     		movs	r1, #1
 14700 005e 61F38712 		bfi	r2, r1, #6, #2
 14701 0062 1A75     		strb	r2, [r3, #20]
 14702              	.LBE2722:
 14703              	.LBE2721:
ARM GAS  /tmp/cc0UaEmF.s 			page 418


1735:src/xeq.c     **** 
 14704              		.loc 1 1735 1 view .LVU3854
 14705 0064 70BD     		pop	{r4, r5, r6, pc}
 14706              	.LVL1082:
 14707              	.L1024:
1729:src/xeq.c     **** 
 14708              		.loc 1 1729 2 is_stmt 1 view .LVU3855
 14709 0066 6620     		movs	r0, #102
 14710              	.LVL1083:
1729:src/xeq.c     **** 
 14711              		.loc 1 1729 2 is_stmt 0 view .LVU3856
 14712 0068 FFF7FEFF 		bl	get_reg_n
 14713              	.LVL1084:
1729:src/xeq.c     **** 
 14714              		.loc 1 1729 2 view .LVU3857
 14715 006c 0446     		mov	r4, r0
 14716 006e 2846     		mov	r0, r5
 14717 0070 FFF7FEFF 		bl	get_reg_n
 14718              	.LVL1085:
 14719 0074 0146     		mov	r1, r0
 14720 0076 2046     		mov	r0, r4
 14721 0078 FFF7FEFF 		bl	swap_reg
 14722              	.LVL1086:
1731:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 14723              		.loc 1 1731 2 is_stmt 1 view .LVU3858
1729:src/xeq.c     **** 
 14724              		.loc 1 1729 2 is_stmt 0 view .LVU3859
 14725 007c 6720     		movs	r0, #103
 14726 007e E1E7     		b	.L1026
 14727              	.LVL1087:
 14728              	.L1028:
1729:src/xeq.c     **** 
 14729              		.loc 1 1729 2 view .LVU3860
 14730 0080 04F15400 		add	r0, r4, #84
 14731 0084 DEE7     		b	.L1026
 14732              	.L1030:
 14733 0086 00BF     		.align	2
 14734              	.L1029:
 14735 0088 00000000 		.word	StateWhileOn
 14736              		.cfi_endproc
 14737              	.LFE123:
 14739              		.section	.text.cmdview,"ax",%progbits
 14740              		.align	1
 14741              		.p2align 2,,3
 14742              		.global	cmdview
 14743              		.syntax unified
 14744              		.thumb
 14745              		.thumb_func
 14746              		.fpu fpv4-sp-d16
 14748              	cmdview:
 14749              	.LVL1088:
 14750              	.LFB124:
1740:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 14751              		.loc 1 1740 46 is_stmt 1 view -0
 14752              		.cfi_startproc
 14753              		@ args = 0, pretend = 0, frame = 0
 14754              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc0UaEmF.s 			page 419


1741:src/xeq.c     **** 
 14755              		.loc 1 1741 2 view .LVU3862
1740:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 14756              		.loc 1 1740 46 is_stmt 0 view .LVU3863
 14757 0000 70B5     		push	{r4, r5, r6, lr}
 14758              		.cfi_def_cfa_offset 16
 14759              		.cfi_offset 4, -16
 14760              		.cfi_offset 5, -12
 14761              		.cfi_offset 6, -8
 14762              		.cfi_offset 14, -4
1743:src/xeq.c     **** 	ShowRegister = arg;
 14763              		.loc 1 1743 20 view .LVU3864
 14764 0002 134D     		ldr	r5, .L1037
1744:src/xeq.c     **** 	State2.disp_freeze = 0;
 14765              		.loc 1 1744 15 view .LVU3865
 14766 0004 134A     		ldr	r2, .L1037+4
1743:src/xeq.c     **** 	ShowRegister = arg;
 14767              		.loc 1 1743 20 view .LVU3866
 14768 0006 6B69     		ldr	r3, [r5, #20]
1744:src/xeq.c     **** 	State2.disp_freeze = 0;
 14769              		.loc 1 1744 15 view .LVU3867
 14770 0008 1060     		str	r0, [r2]
1740:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 14771              		.loc 1 1740 46 view .LVU3868
 14772 000a 0E46     		mov	r6, r1
 14773              	.LVL1089:
1743:src/xeq.c     **** 	ShowRegister = arg;
 14774              		.loc 1 1743 2 is_stmt 1 view .LVU3869
1744:src/xeq.c     **** 	State2.disp_freeze = 0;
 14775              		.loc 1 1744 2 view .LVU3870
1745:src/xeq.c     **** 	display();
 14776              		.loc 1 1745 2 view .LVU3871
1741:src/xeq.c     **** 
 14777              		.loc 1 1741 41 is_stmt 0 view .LVU3872
 14778 000c A1F18C01 		sub	r1, #140
 14779              	.LVL1090:
1743:src/xeq.c     **** 	ShowRegister = arg;
 14780              		.loc 1 1743 20 view .LVU3873
 14781 0010 23F08053 		bic	r3, r3, #268435456
1741:src/xeq.c     **** 
 14782              		.loc 1 1741 41 view .LVU3874
 14783 0014 B1FA81F1 		clz	r1, r1
 14784 0018 4909     		lsrs	r1, r1, #5
1743:src/xeq.c     **** 	ShowRegister = arg;
 14785              		.loc 1 1743 20 view .LVU3875
 14786 001a 23F0C003 		bic	r3, r3, #192
 14787 001e 43EA8113 		orr	r3, r3, r1, lsl #6
1740:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 14788              		.loc 1 1740 46 view .LVU3876
 14789 0022 0446     		mov	r4, r0
1743:src/xeq.c     **** 	ShowRegister = arg;
 14790              		.loc 1 1743 20 view .LVU3877
 14791 0024 6B61     		str	r3, [r5, #20]
1746:src/xeq.c     **** 	State2.disp_freeze = cmplx || Running || arg != regX_idx;
 14792              		.loc 1 1746 2 is_stmt 1 view .LVU3878
 14793 0026 FFF7FEFF 		bl	display
 14794              	.LVL1091:
ARM GAS  /tmp/cc0UaEmF.s 			page 420


1747:src/xeq.c     **** }
 14795              		.loc 1 1747 2 view .LVU3879
1747:src/xeq.c     **** }
 14796              		.loc 1 1747 40 is_stmt 0 view .LVU3880
 14797 002a 8C2E     		cmp	r6, #140
 14798 002c 02D0     		beq	.L1034
1747:src/xeq.c     **** }
 14799              		.loc 1 1747 29 discriminator 2 view .LVU3881
 14800 002e 0A4B     		ldr	r3, .L1037+8
 14801 0030 1B68     		ldr	r3, [r3]
 14802 0032 2BB1     		cbz	r3, .L1036
 14803              	.L1034:
1747:src/xeq.c     **** }
 14804              		.loc 1 1747 21 view .LVU3882
 14805 0034 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 14806 0036 0124     		movs	r4, #1
 14807              	.LVL1092:
1747:src/xeq.c     **** }
 14808              		.loc 1 1747 21 view .LVU3883
 14809 0038 64F30413 		bfi	r3, r4, #4, #1
 14810 003c EB75     		strb	r3, [r5, #23]
1748:src/xeq.c     **** 
 14811              		.loc 1 1748 1 view .LVU3884
 14812 003e 70BD     		pop	{r4, r5, r6, pc}
 14813              	.LVL1093:
 14814              	.L1036:
1747:src/xeq.c     **** }
 14815              		.loc 1 1747 21 discriminator 4 view .LVU3885
 14816 0040 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
1747:src/xeq.c     **** }
 14817              		.loc 1 1747 40 discriminator 4 view .LVU3886
 14818 0042 643C     		subs	r4, r4, #100
 14819              	.LVL1094:
1747:src/xeq.c     **** }
 14820              		.loc 1 1747 40 discriminator 4 view .LVU3887
 14821 0044 18BF     		it	ne
 14822 0046 0124     		movne	r4, #1
 14823              	.LVL1095:
1747:src/xeq.c     **** }
 14824              		.loc 1 1747 21 discriminator 4 view .LVU3888
 14825 0048 64F30413 		bfi	r3, r4, #4, #1
 14826 004c EB75     		strb	r3, [r5, #23]
1748:src/xeq.c     **** 
 14827              		.loc 1 1748 1 discriminator 4 view .LVU3889
 14828 004e 70BD     		pop	{r4, r5, r6, pc}
 14829              	.L1038:
 14830              		.align	2
 14831              	.L1037:
 14832 0050 00000000 		.word	StateWhileOn
 14833 0054 00000000 		.word	ShowRegister
 14834 0058 00000000 		.word	Running
 14835              		.cfi_endproc
 14836              	.LFE124:
 14838              		.section	.text.get_stack_size,"ax",%progbits
 14839              		.align	1
 14840              		.p2align 2,,3
 14841              		.global	get_stack_size
ARM GAS  /tmp/cc0UaEmF.s 			page 421


 14842              		.syntax unified
 14843              		.thumb
 14844              		.thumb_func
 14845              		.fpu fpv4-sp-d16
 14847              	get_stack_size:
 14848              	.LVL1096:
 14849              	.LFB125:
1752:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
 14850              		.loc 1 1752 36 is_stmt 1 view -0
 14851              		.cfi_startproc
 14852              		@ args = 0, pretend = 0, frame = 0
 14853              		@ frame_needed = 0, uses_anonymous_args = 0
1753:src/xeq.c     **** }
 14854              		.loc 1 1753 2 view .LVU3891
 14855              	.LBB2723:
 14856              	.LBI2723:
 703:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 14857              		.loc 1 703 5 view .LVU3892
 14858              	.LBB2724:
 704:src/xeq.c     **** 		return 4;
 14859              		.loc 1 704 2 view .LVU3893
 704:src/xeq.c     **** 		return 4;
 14860              		.loc 1 704 8 is_stmt 0 view .LVU3894
 14861 0000 0F4B     		ldr	r3, .L1046
 14862              	.LBE2724:
 14863              	.LBE2723:
1752:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
 14864              		.loc 1 1752 36 view .LVU3895
 14865 0002 00B5     		push	{lr}
 14866              		.cfi_def_cfa_offset 4
 14867              		.cfi_offset 14, -4
 14868              	.LBB2730:
 14869              	.LBB2727:
 704:src/xeq.c     **** 		return 4;
 14870              		.loc 1 704 8 view .LVU3896
 14871 0004 1B68     		ldr	r3, [r3]
 704:src/xeq.c     **** 		return 4;
 14872              		.loc 1 704 6 view .LVU3897
 14873 0006 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 704:src/xeq.c     **** 		return 4;
 14874              		.loc 1 704 5 view .LVU3898
 14875 000a 1207     		lsls	r2, r2, #28
 14876              	.LBE2727:
 14877              	.LBE2730:
1752:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
 14878              		.loc 1 1752 36 view .LVU3899
 14879 000c 83B0     		sub	sp, sp, #12
 14880              		.cfi_def_cfa_offset 16
 14881              	.LBB2731:
 14882              	.LBB2728:
 704:src/xeq.c     **** 		return 4;
 14883              		.loc 1 704 5 view .LVU3900
 14884 000e 13D5     		bpl	.L1041
 14885              	.LBB2725:
 14886              	.LBI2725:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 14887              		.loc 1 182 5 is_stmt 1 view .LVU3901
ARM GAS  /tmp/cc0UaEmF.s 			page 422


 14888              	.LBB2726:
 183:src/xeq.c     **** }
 14889              		.loc 1 183 2 view .LVU3902
 183:src/xeq.c     **** }
 14890              		.loc 1 183 9 is_stmt 0 view .LVU3903
 14891 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 14892              	.LBE2726:
 14893              	.LBE2725:
 704:src/xeq.c     **** 		return 4;
 14894              		.loc 1 704 27 view .LVU3904
 14895 0014 9B0B     		lsrs	r3, r3, #14
 14896 0016 032B     		cmp	r3, #3
 14897 0018 09D0     		beq	.L1045
 14898              	.L1043:
 14899 001a 0822     		movs	r2, #8
 14900 001c 0023     		movs	r3, #0
 14901              	.L1040:
 14902              	.LVL1097:
 704:src/xeq.c     **** 		return 4;
 14903              		.loc 1 704 27 view .LVU3905
 14904              	.LBE2728:
 14905              	.LBE2731:
 14906              	.LBB2732:
 14907              	.LBI2732:
1323:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 14908              		.loc 1 1323 6 is_stmt 1 view .LVU3906
 14909              	.LBB2733:
1324:src/xeq.c     **** }
 14910              		.loc 1 1324 2 view .LVU3907
 14911 001e 0021     		movs	r1, #0
 14912 0020 0091     		str	r1, [sp]
 14913 0022 6420     		movs	r0, #100
 14914              	.LVL1098:
1324:src/xeq.c     **** }
 14915              		.loc 1 1324 2 is_stmt 0 view .LVU3908
 14916 0024 FFF7FEFF 		bl	set_reg_n_int_sgn
 14917              	.LVL1099:
1324:src/xeq.c     **** }
 14918              		.loc 1 1324 2 view .LVU3909
 14919              	.LBE2733:
 14920              	.LBE2732:
1754:src/xeq.c     **** 
 14921              		.loc 1 1754 1 view .LVU3910
 14922 0028 03B0     		add	sp, sp, #12
 14923              		.cfi_remember_state
 14924              		.cfi_def_cfa_offset 4
 14925              		@ sp needed
 14926 002a 5DF804FB 		ldr	pc, [sp], #4
 14927              	.LVL1100:
 14928              	.L1045:
 14929              		.cfi_restore_state
 14930              	.LBB2734:
 14931              	.LBB2729:
 704:src/xeq.c     **** 		return 4;
 14932              		.loc 1 704 44 view .LVU3911
 14933 002e 054B     		ldr	r3, .L1046+4
 704:src/xeq.c     **** 		return 4;
ARM GAS  /tmp/cc0UaEmF.s 			page 423


 14934              		.loc 1 704 41 view .LVU3912
 14935 0030 93F90130 		ldrsb	r3, [r3, #1]
 14936 0034 002B     		cmp	r3, #0
 14937 0036 F0DB     		blt	.L1043
 14938              	.L1041:
 14939 0038 0422     		movs	r2, #4
 14940 003a 0023     		movs	r3, #0
 14941 003c EFE7     		b	.L1040
 14942              	.L1047:
 14943 003e 00BF     		.align	2
 14944              	.L1046:
 14945 0040 00000000 		.word	main_ram
 14946 0044 00000000 		.word	XromParams
 14947              	.LBE2729:
 14948              	.LBE2734:
 14949              		.cfi_endproc
 14950              	.LFE125:
 14952              		.section	.text.get_word_size,"ax",%progbits
 14953              		.align	1
 14954              		.p2align 2,,3
 14955              		.global	get_word_size
 14956              		.syntax unified
 14957              		.thumb
 14958              		.thumb_func
 14959              		.fpu fpv4-sp-d16
 14961              	get_word_size:
 14962              	.LVL1101:
 14963              	.LFB126:
1756:src/xeq.c     **** 	setX_int_sgn((int)word_size(), 0);
 14964              		.loc 1 1756 35 is_stmt 1 view -0
 14965              		.cfi_startproc
 14966              		@ args = 0, pretend = 0, frame = 0
 14967              		@ frame_needed = 0, uses_anonymous_args = 0
1757:src/xeq.c     **** }
 14968              		.loc 1 1757 2 view .LVU3914
1756:src/xeq.c     **** 	setX_int_sgn((int)word_size(), 0);
 14969              		.loc 1 1756 35 is_stmt 0 view .LVU3915
 14970 0000 00B5     		push	{lr}
 14971              		.cfi_def_cfa_offset 4
 14972              		.cfi_offset 14, -4
 14973 0002 83B0     		sub	sp, sp, #12
 14974              		.cfi_def_cfa_offset 16
1757:src/xeq.c     **** }
 14975              		.loc 1 1757 20 view .LVU3916
 14976 0004 FFF7FEFF 		bl	word_size
 14977              	.LVL1102:
 14978              	.LBB2735:
 14979              	.LBI2735:
1323:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 14980              		.loc 1 1323 6 is_stmt 1 view .LVU3917
 14981              	.LBB2736:
1324:src/xeq.c     **** }
 14982              		.loc 1 1324 2 view .LVU3918
 14983 0008 0021     		movs	r1, #0
 14984 000a 0246     		mov	r2, r0
 14985 000c C317     		asrs	r3, r0, #31
 14986 000e 0091     		str	r1, [sp]
ARM GAS  /tmp/cc0UaEmF.s 			page 424


 14987 0010 6420     		movs	r0, #100
 14988              	.LVL1103:
1324:src/xeq.c     **** }
 14989              		.loc 1 1324 2 is_stmt 0 view .LVU3919
 14990 0012 FFF7FEFF 		bl	set_reg_n_int_sgn
 14991              	.LVL1104:
1324:src/xeq.c     **** }
 14992              		.loc 1 1324 2 view .LVU3920
 14993              	.LBE2736:
 14994              	.LBE2735:
1758:src/xeq.c     **** 
 14995              		.loc 1 1758 1 view .LVU3921
 14996 0016 03B0     		add	sp, sp, #12
 14997              		.cfi_def_cfa_offset 4
 14998              		@ sp needed
 14999 0018 5DF804FB 		ldr	pc, [sp], #4
 15000              		.cfi_endproc
 15001              	.LFE126:
 15003              		.section	.text.get_sign_mode,"ax",%progbits
 15004              		.align	1
 15005              		.p2align 2,,3
 15006              		.global	get_sign_mode
 15007              		.syntax unified
 15008              		.thumb
 15009              		.thumb_func
 15010              		.fpu fpv4-sp-d16
 15012              	get_sign_mode:
 15013              	.LVL1105:
 15014              	.LFB127:
1760:src/xeq.c     **** 	static const unsigned char modes[4] = {
 15015              		.loc 1 1760 35 is_stmt 1 view -0
 15016              		.cfi_startproc
 15017              		@ args = 0, pretend = 0, frame = 0
 15018              		@ frame_needed = 0, uses_anonymous_args = 0
1761:src/xeq.c     **** 		0x02,		// 2's complement
 15019              		.loc 1 1761 2 view .LVU3923
1767:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
 15020              		.loc 1 1767 2 view .LVU3924
1760:src/xeq.c     **** 	static const unsigned char modes[4] = {
 15021              		.loc 1 1760 35 is_stmt 0 view .LVU3925
 15022 0000 00B5     		push	{lr}
 15023              		.cfi_def_cfa_offset 4
 15024              		.cfi_offset 14, -4
 15025 0002 83B0     		sub	sp, sp, #12
 15026              		.cfi_def_cfa_offset 16
1767:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
 15027              		.loc 1 1767 37 view .LVU3926
 15028 0004 FFF7FEFF 		bl	int_mode
 15029              	.LVL1106:
1767:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
 15030              		.loc 1 1767 22 view .LVU3927
 15031 0008 064B     		ldr	r3, .L1052
 15032 000a 1B5C     		ldrb	r3, [r3, r0]	@ zero_extendqisi2
 15033              	.LVL1107:
1768:src/xeq.c     **** }
 15034              		.loc 1 1768 2 is_stmt 1 view .LVU3928
 15035              	.LBB2737:
ARM GAS  /tmp/cc0UaEmF.s 			page 425


 15036              	.LBI2737:
1323:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 15037              		.loc 1 1323 6 view .LVU3929
 15038              	.LBB2738:
1324:src/xeq.c     **** }
 15039              		.loc 1 1324 2 view .LVU3930
 15040              	.LBE2738:
 15041              	.LBE2737:
1768:src/xeq.c     **** }
 15042              		.loc 1 1768 2 is_stmt 0 view .LVU3931
 15043 000c 03F00302 		and	r2, r3, #3
 15044 0010 03F08003 		and	r3, r3, #128
 15045              	.LVL1108:
1768:src/xeq.c     **** }
 15046              		.loc 1 1768 2 view .LVU3932
 15047 0014 0093     		str	r3, [sp]
 15048              	.LBB2740:
 15049              	.LBB2739:
1324:src/xeq.c     **** }
 15050              		.loc 1 1324 2 view .LVU3933
 15051 0016 6420     		movs	r0, #100
 15052              	.LVL1109:
1324:src/xeq.c     **** }
 15053              		.loc 1 1324 2 view .LVU3934
 15054 0018 0023     		movs	r3, #0
 15055 001a FFF7FEFF 		bl	set_reg_n_int_sgn
 15056              	.LVL1110:
1324:src/xeq.c     **** }
 15057              		.loc 1 1324 2 view .LVU3935
 15058              	.LBE2739:
 15059              	.LBE2740:
1769:src/xeq.c     **** 
 15060              		.loc 1 1769 1 view .LVU3936
 15061 001e 03B0     		add	sp, sp, #12
 15062              		.cfi_def_cfa_offset 4
 15063              		@ sp needed
 15064 0020 5DF804FB 		ldr	pc, [sp], #4
 15065              	.L1053:
 15066              		.align	2
 15067              	.L1052:
 15068 0024 00000000 		.word	.LANCHOR4
 15069              		.cfi_endproc
 15070              	.LFE127:
 15072              		.section	.text.get_base,"ax",%progbits
 15073              		.align	1
 15074              		.p2align 2,,3
 15075              		.global	get_base
 15076              		.syntax unified
 15077              		.thumb
 15078              		.thumb_func
 15079              		.fpu fpv4-sp-d16
 15081              	get_base:
 15082              	.LVL1111:
 15083              	.LFB128:
1771:src/xeq.c     **** 	setX_int_sgn((int)int_base(), 0);
 15084              		.loc 1 1771 30 is_stmt 1 view -0
 15085              		.cfi_startproc
ARM GAS  /tmp/cc0UaEmF.s 			page 426


 15086              		@ args = 0, pretend = 0, frame = 0
 15087              		@ frame_needed = 0, uses_anonymous_args = 0
1772:src/xeq.c     **** }
 15088              		.loc 1 1772 2 view .LVU3938
1771:src/xeq.c     **** 	setX_int_sgn((int)int_base(), 0);
 15089              		.loc 1 1771 30 is_stmt 0 view .LVU3939
 15090 0000 00B5     		push	{lr}
 15091              		.cfi_def_cfa_offset 4
 15092              		.cfi_offset 14, -4
 15093 0002 83B0     		sub	sp, sp, #12
 15094              		.cfi_def_cfa_offset 16
1772:src/xeq.c     **** }
 15095              		.loc 1 1772 20 view .LVU3940
 15096 0004 FFF7FEFF 		bl	int_base
 15097              	.LVL1112:
 15098              	.LBB2741:
 15099              	.LBI2741:
1323:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 15100              		.loc 1 1323 6 is_stmt 1 view .LVU3941
 15101              	.LBB2742:
1324:src/xeq.c     **** }
 15102              		.loc 1 1324 2 view .LVU3942
 15103 0008 0021     		movs	r1, #0
 15104 000a 0246     		mov	r2, r0
 15105 000c C317     		asrs	r3, r0, #31
 15106 000e 0091     		str	r1, [sp]
 15107 0010 6420     		movs	r0, #100
 15108              	.LVL1113:
1324:src/xeq.c     **** }
 15109              		.loc 1 1324 2 is_stmt 0 view .LVU3943
 15110 0012 FFF7FEFF 		bl	set_reg_n_int_sgn
 15111              	.LVL1114:
1324:src/xeq.c     **** }
 15112              		.loc 1 1324 2 view .LVU3944
 15113              	.LBE2742:
 15114              	.LBE2741:
1773:src/xeq.c     **** 
 15115              		.loc 1 1773 1 view .LVU3945
 15116 0016 03B0     		add	sp, sp, #12
 15117              		.cfi_def_cfa_offset 4
 15118              		@ sp needed
 15119 0018 5DF804FB 		ldr	pc, [sp], #4
 15120              		.cfi_endproc
 15121              	.LFE128:
 15123              		.section	.text.DM42_Ticker,"ax",%progbits
 15124              		.align	1
 15125              		.p2align 2,,3
 15126              		.global	DM42_Ticker
 15127              		.syntax unified
 15128              		.thumb
 15129              		.thumb_func
 15130              		.fpu fpv4-sp-d16
 15132              	DM42_Ticker:
 15133              	.LFB129:
1776:src/xeq.c     ****     long int f, t;
 15134              		.loc 1 1776 26 is_stmt 1 view -0
 15135              		.cfi_startproc
ARM GAS  /tmp/cc0UaEmF.s 			page 427


 15136              		@ args = 0, pretend = 0, frame = 0
 15137              		@ frame_needed = 0, uses_anonymous_args = 0
1777:src/xeq.c     ****     t = get_rtc_ticks();
 15138              		.loc 1 1777 5 view .LVU3947
1778:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 15139              		.loc 1 1778 5 view .LVU3948
1776:src/xeq.c     ****     long int f, t;
 15140              		.loc 1 1776 26 is_stmt 0 view .LVU3949
 15141 0000 08B5     		push	{r3, lr}
 15142              		.cfi_def_cfa_offset 8
 15143              		.cfi_offset 3, -8
 15144              		.cfi_offset 14, -4
1778:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 15145              		.loc 1 1778 9 view .LVU3950
 15146 0002 044B     		ldr	r3, .L1058
 15147 0004 9847     		blx	r3
 15148              	.LVL1115:
1779:src/xeq.c     ****     return f;
 15149              		.loc 1 1779 5 is_stmt 1 view .LVU3951
1780:src/xeq.c     ****  }
 15150              		.loc 1 1780 5 view .LVU3952
1779:src/xeq.c     ****     return f;
 15151              		.loc 1 1779 13 is_stmt 0 view .LVU3953
 15152 0006 C0F31300 		ubfx	r0, r0, #0, #20
 15153              	.LVL1116:
1779:src/xeq.c     ****     return f;
 15154              		.loc 1 1779 23 view .LVU3954
 15155 000a 00EB8000 		add	r0, r0, r0, lsl #2
1781:src/xeq.c     **** #endif
 15156              		.loc 1 1781 2 view .LVU3955
 15157 000e C009     		lsrs	r0, r0, #7
 15158 0010 08BD     		pop	{r3, pc}
 15159              	.L1059:
 15160 0012 00BF     		.align	2
 15161              	.L1058:
 15162 0014 B9040008 		.word	134218937
 15163              		.cfi_endproc
 15164              	.LFE129:
 15166              		.section	.text.op_ticks,"ax",%progbits
 15167              		.align	1
 15168              		.p2align 2,,3
 15169              		.global	op_ticks
 15170              		.syntax unified
 15171              		.thumb
 15172              		.thumb_func
 15173              		.fpu fpv4-sp-d16
 15175              	op_ticks:
 15176              	.LVL1117:
 15177              	.LFB130:
1784:src/xeq.c     **** #if !defined(CONSOLE)
 15178              		.loc 1 1784 30 is_stmt 1 view -0
 15179              		.cfi_startproc
 15180              		@ args = 0, pretend = 0, frame = 0
 15181              		@ frame_needed = 0, uses_anonymous_args = 0
1786:src/xeq.c     **** #else 
 15182              		.loc 1 1786 5 view .LVU3957
 15183              	.LBB2743:
ARM GAS  /tmp/cc0UaEmF.s 			page 428


 15184              	.LBI2743:
1776:src/xeq.c     ****     long int f, t;
 15185              		.loc 1 1776 11 view .LVU3958
 15186              	.LBB2744:
1777:src/xeq.c     ****     t = get_rtc_ticks();
 15187              		.loc 1 1777 5 view .LVU3959
1778:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 15188              		.loc 1 1778 5 view .LVU3960
 15189              	.LBE2744:
 15190              	.LBE2743:
1784:src/xeq.c     **** #if !defined(CONSOLE)
 15191              		.loc 1 1784 30 is_stmt 0 view .LVU3961
 15192 0000 00B5     		push	{lr}
 15193              		.cfi_def_cfa_offset 4
 15194              		.cfi_offset 14, -4
 15195              	.LBB2748:
 15196              	.LBB2745:
1778:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 15197              		.loc 1 1778 9 view .LVU3962
 15198 0002 084B     		ldr	r3, .L1062
 15199              	.LBE2745:
 15200              	.LBE2748:
1784:src/xeq.c     **** #if !defined(CONSOLE)
 15201              		.loc 1 1784 30 view .LVU3963
 15202 0004 83B0     		sub	sp, sp, #12
 15203              		.cfi_def_cfa_offset 16
 15204              	.LBB2749:
 15205              	.LBB2746:
1778:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 15206              		.loc 1 1778 9 view .LVU3964
 15207 0006 9847     		blx	r3
 15208              	.LVL1118:
1779:src/xeq.c     ****     return f;
 15209              		.loc 1 1779 5 is_stmt 1 view .LVU3965
1780:src/xeq.c     ****  }
 15210              		.loc 1 1780 5 view .LVU3966
1780:src/xeq.c     ****  }
 15211              		.loc 1 1780 5 is_stmt 0 view .LVU3967
 15212              	.LBE2746:
 15213              	.LBE2749:
 15214              	.LBB2750:
 15215              	.LBI2750:
1323:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 15216              		.loc 1 1323 6 is_stmt 1 view .LVU3968
 15217              	.LBB2751:
1324:src/xeq.c     **** }
 15218              		.loc 1 1324 2 view .LVU3969
 15219              	.LBE2751:
 15220              	.LBE2750:
 15221              	.LBB2753:
 15222              	.LBB2747:
1779:src/xeq.c     ****     return f;
 15223              		.loc 1 1779 13 is_stmt 0 view .LVU3970
 15224 0008 C0F31300 		ubfx	r0, r0, #0, #20
 15225              	.LVL1119:
1779:src/xeq.c     ****     return f;
 15226              		.loc 1 1779 23 view .LVU3971
ARM GAS  /tmp/cc0UaEmF.s 			page 429


 15227 000c 00EB8000 		add	r0, r0, r0, lsl #2
1779:src/xeq.c     ****     return f;
 15228              		.loc 1 1779 7 view .LVU3972
 15229 0010 C209     		lsrs	r2, r0, #7
 15230              	.LBE2747:
 15231              	.LBE2753:
 15232              	.LBB2754:
 15233              	.LBB2752:
1324:src/xeq.c     **** }
 15234              		.loc 1 1324 2 view .LVU3973
 15235 0012 0021     		movs	r1, #0
 15236 0014 D317     		asrs	r3, r2, #31
 15237 0016 0091     		str	r1, [sp]
 15238 0018 6420     		movs	r0, #100
 15239 001a FFF7FEFF 		bl	set_reg_n_int_sgn
 15240              	.LVL1120:
1324:src/xeq.c     **** }
 15241              		.loc 1 1324 2 view .LVU3974
 15242              	.LBE2752:
 15243              	.LBE2754:
1794:src/xeq.c     **** 
 15244              		.loc 1 1794 1 view .LVU3975
 15245 001e 03B0     		add	sp, sp, #12
 15246              		.cfi_def_cfa_offset 4
 15247              		@ sp needed
 15248 0020 5DF804FB 		ldr	pc, [sp], #4
 15249              	.L1063:
 15250              		.align	2
 15251              	.L1062:
 15252 0024 B9040008 		.word	134218937
 15253              		.cfi_endproc
 15254              	.LFE130:
 15256              		.section	.text.op_voltage,"ax",%progbits
 15257              		.align	1
 15258              		.p2align 2,,3
 15259              		.global	op_voltage
 15260              		.syntax unified
 15261              		.thumb
 15262              		.thumb_func
 15263              		.fpu fpv4-sp-d16
 15265              	op_voltage:
 15266              	.LVL1121:
 15267              	.LFB131:
1797:src/xeq.c     **** 	decNumber t, u;
 15268              		.loc 1 1797 32 is_stmt 1 view -0
 15269              		.cfi_startproc
 15270              		@ args = 0, pretend = 0, frame = 72
 15271              		@ frame_needed = 0, uses_anonymous_args = 0
1798:src/xeq.c     **** #ifdef REALBUILD
 15272              		.loc 1 1798 2 view .LVU3977
1802:src/xeq.c     **** 	v = v / 100;
 15273              		.loc 1 1802 2 view .LVU3978
1797:src/xeq.c     **** 	decNumber t, u;
 15274              		.loc 1 1797 32 is_stmt 0 view .LVU3979
 15275 0000 00B5     		push	{lr}
 15276              		.cfi_def_cfa_offset 4
 15277              		.cfi_offset 14, -4
ARM GAS  /tmp/cc0UaEmF.s 			page 430


1802:src/xeq.c     **** 	v = v / 100;
 15278              		.loc 1 1802 10 view .LVU3980
 15279 0002 154B     		ldr	r3, .L1068
1797:src/xeq.c     **** 	decNumber t, u;
 15280              		.loc 1 1797 32 view .LVU3981
 15281 0004 95B0     		sub	sp, sp, #84
 15282              		.cfi_def_cfa_offset 88
1802:src/xeq.c     **** 	v = v / 100;
 15283              		.loc 1 1802 10 view .LVU3982
 15284 0006 9847     		blx	r3
 15285              	.LVL1122:
1808:src/xeq.c     **** 		setX_int_sgn(v, 0);
 15286              		.loc 1 1808 6 view .LVU3983
 15287 0008 144B     		ldr	r3, .L1068+4
1803:src/xeq.c     **** #else
 15288              		.loc 1 1803 4 view .LVU3984
 15289 000a 154A     		ldr	r2, .L1068+8
1808:src/xeq.c     **** 		setX_int_sgn(v, 0);
 15290              		.loc 1 1808 6 view .LVU3985
 15291 000c 1B68     		ldr	r3, [r3]
 15292              	.LVL1123:
1803:src/xeq.c     **** #else
 15293              		.loc 1 1803 2 is_stmt 1 view .LVU3986
1808:src/xeq.c     **** 		setX_int_sgn(v, 0);
 15294              		.loc 1 1808 6 is_stmt 0 view .LVU3987
 15295 000e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1803:src/xeq.c     **** #else
 15296              		.loc 1 1803 4 view .LVU3988
 15297 0012 82FB0012 		smull	r1, r2, r2, r0
1808:src/xeq.c     **** 		setX_int_sgn(v, 0);
 15298              		.loc 1 1808 5 view .LVU3989
 15299 0016 DB07     		lsls	r3, r3, #31
1803:src/xeq.c     **** #else
 15300              		.loc 1 1803 4 view .LVU3990
 15301 0018 4FEAE070 		asr	r0, r0, #31
 15302              	.LVL1124:
1803:src/xeq.c     **** #else
 15303              		.loc 1 1803 4 view .LVU3991
 15304 001c C0EB6212 		rsb	r2, r0, r2, asr #5
 15305              	.LVL1125:
1808:src/xeq.c     **** 		setX_int_sgn(v, 0);
 15306              		.loc 1 1808 2 is_stmt 1 view .LVU3992
1808:src/xeq.c     **** 		setX_int_sgn(v, 0);
 15307              		.loc 1 1808 5 is_stmt 0 view .LVU3993
 15308 0020 08D5     		bpl	.L1065
1809:src/xeq.c     **** 	} else {
 15309              		.loc 1 1809 3 is_stmt 1 view .LVU3994
 15310              	.LVL1126:
 15311              	.LBB2755:
 15312              	.LBI2755:
1323:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 15313              		.loc 1 1323 6 view .LVU3995
 15314              	.LBB2756:
1324:src/xeq.c     **** }
 15315              		.loc 1 1324 2 view .LVU3996
 15316 0022 0023     		movs	r3, #0
 15317 0024 0093     		str	r3, [sp]
ARM GAS  /tmp/cc0UaEmF.s 			page 431


 15318 0026 6420     		movs	r0, #100
 15319 0028 D317     		asrs	r3, r2, #31
 15320 002a FFF7FEFF 		bl	set_reg_n_int_sgn
 15321              	.LVL1127:
1324:src/xeq.c     **** }
 15322              		.loc 1 1324 2 is_stmt 0 view .LVU3997
 15323              	.LBE2756:
 15324              	.LBE2755:
1815:src/xeq.c     **** 
 15325              		.loc 1 1815 1 view .LVU3998
 15326 002e 15B0     		add	sp, sp, #84
 15327              		.cfi_remember_state
 15328              		.cfi_def_cfa_offset 4
 15329              		@ sp needed
 15330 0030 5DF804FB 		ldr	pc, [sp], #4
 15331              	.LVL1128:
 15332              	.L1065:
 15333              		.cfi_restore_state
1811:src/xeq.c     **** 		dn_mulpow10(&u, &t, -1);
 15334              		.loc 1 1811 3 is_stmt 1 view .LVU3999
 15335 0034 D317     		asrs	r3, r2, #31
 15336 0036 02A8     		add	r0, sp, #8
 15337 0038 FFF7FEFF 		bl	ullint_to_dn
 15338              	.LVL1129:
1812:src/xeq.c     **** 		setX(&u);
 15339              		.loc 1 1812 3 view .LVU4000
 15340 003c 02A9     		add	r1, sp, #8
 15341 003e 4FF0FF32 		mov	r2, #-1
 15342 0042 0BA8     		add	r0, sp, #44
 15343 0044 FFF7FEFF 		bl	dn_mulpow10
 15344              	.LVL1130:
1813:src/xeq.c     **** 	}
 15345              		.loc 1 1813 3 view .LVU4001
 15346              	.LBB2757:
 15347              	.LBI2757:
 809:src/xeq.c     **** 	setRegister(regX_idx, x);
 15348              		.loc 1 809 6 view .LVU4002
 15349              	.LBB2758:
 810:src/xeq.c     **** }
 15350              		.loc 1 810 2 view .LVU4003
 15351 0048 0BA9     		add	r1, sp, #44
 15352              	.LVL1131:
 810:src/xeq.c     **** }
 15353              		.loc 1 810 2 is_stmt 0 view .LVU4004
 15354 004a 6420     		movs	r0, #100
 15355 004c FFF7FEFF 		bl	setRegister
 15356              	.LVL1132:
 810:src/xeq.c     **** }
 15357              		.loc 1 810 2 view .LVU4005
 15358              	.LBE2758:
 15359              	.LBE2757:
1815:src/xeq.c     **** 
 15360              		.loc 1 1815 1 view .LVU4006
 15361 0050 15B0     		add	sp, sp, #84
 15362              		.cfi_def_cfa_offset 4
 15363              		@ sp needed
 15364 0052 5DF804FB 		ldr	pc, [sp], #4
ARM GAS  /tmp/cc0UaEmF.s 			page 432


 15365              	.L1069:
 15366 0056 00BF     		.align	2
 15367              	.L1068:
 15368 0058 F1020008 		.word	134218481
 15369 005c 00000000 		.word	main_ram
 15370 0060 1F85EB51 		.word	1374389535
 15371              		.cfi_endproc
 15372              	.LFE131:
 15374              		.section	.text.free_mem,"ax",%progbits
 15375              		.align	1
 15376              		.p2align 2,,3
 15377              		.global	free_mem
 15378              		.syntax unified
 15379              		.thumb
 15380              		.thumb_func
 15381              		.fpu fpv4-sp-d16
 15383              	free_mem:
 15384              	.LFB132:
1820:src/xeq.c     **** 	return RetStkSize + RetStkPtr;
 15385              		.loc 1 1820 20 is_stmt 1 view -0
 15386              		.cfi_startproc
 15387              		@ args = 0, pretend = 0, frame = 0
 15388              		@ frame_needed = 0, uses_anonymous_args = 0
 15389              		@ link register save eliminated.
1821:src/xeq.c     **** }
 15390              		.loc 1 1821 2 view .LVU4008
1821:src/xeq.c     **** }
 15391              		.loc 1 1821 22 is_stmt 0 view .LVU4009
 15392 0000 034A     		ldr	r2, .L1071
1821:src/xeq.c     **** }
 15393              		.loc 1 1821 20 view .LVU4010
 15394 0002 044B     		ldr	r3, .L1071+4
1821:src/xeq.c     **** }
 15395              		.loc 1 1821 22 view .LVU4011
 15396 0004 1268     		ldr	r2, [r2]
1821:src/xeq.c     **** }
 15397              		.loc 1 1821 20 view .LVU4012
 15398 0006 1B68     		ldr	r3, [r3]
1821:src/xeq.c     **** }
 15399              		.loc 1 1821 22 view .LVU4013
 15400 0008 B2F9E207 		ldrsh	r0, [r2, #2018]
1822:src/xeq.c     **** 
 15401              		.loc 1 1822 1 view .LVU4014
 15402 000c 1844     		add	r0, r0, r3
 15403 000e 7047     		bx	lr
 15404              	.L1072:
 15405              		.align	2
 15406              	.L1071:
 15407 0010 00000000 		.word	main_ram
 15408 0014 00000000 		.word	RetStkSize
 15409              		.cfi_endproc
 15410              	.LFE132:
 15412              		.section	.text.free_flash,"ax",%progbits
 15413              		.align	1
 15414              		.p2align 2,,3
 15415              		.global	free_flash
 15416              		.syntax unified
ARM GAS  /tmp/cc0UaEmF.s 			page 433


 15417              		.thumb
 15418              		.thumb_func
 15419              		.fpu fpv4-sp-d16
 15421              	free_flash:
 15422              	.LFB133:
1824:src/xeq.c     **** 	return NUMPROG_FLASH_MAX - UserFlash.size;
 15423              		.loc 1 1824 22 is_stmt 1 view -0
 15424              		.cfi_startproc
 15425              		@ args = 0, pretend = 0, frame = 0
 15426              		@ frame_needed = 0, uses_anonymous_args = 0
 15427              		@ link register save eliminated.
1825:src/xeq.c     **** }
 15428              		.loc 1 1825 2 view .LVU4016
1825:src/xeq.c     **** }
 15429              		.loc 1 1825 38 is_stmt 0 view .LVU4017
 15430 0000 034B     		ldr	r3, .L1074
 15431 0002 1B68     		ldr	r3, [r3]
 15432 0004 5888     		ldrh	r0, [r3, #2]
1826:src/xeq.c     **** 
 15433              		.loc 1 1826 1 view .LVU4018
 15434 0006 C0F5FF50 		rsb	r0, r0, #8160
 15435 000a 1E30     		adds	r0, r0, #30
 15436 000c 7047     		bx	lr
 15437              	.L1075:
 15438 000e 00BF     		.align	2
 15439              	.L1074:
 15440 0010 00000000 		.word	library_ram
 15441              		.cfi_endproc
 15442              	.LFE133:
 15444              		.section	.text.get_mem,"ax",%progbits
 15445              		.align	1
 15446              		.p2align 2,,3
 15447              		.global	get_mem
 15448              		.syntax unified
 15449              		.thumb
 15450              		.thumb_func
 15451              		.fpu fpv4-sp-d16
 15453              	get_mem:
 15454              	.LVL1133:
 15455              	.LFB134:
1828:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
 15456              		.loc 1 1828 29 is_stmt 1 view -0
 15457              		.cfi_startproc
 15458              		@ args = 0, pretend = 0, frame = 0
 15459              		@ frame_needed = 0, uses_anonymous_args = 0
1829:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 15460              		.loc 1 1829 2 view .LVU4020
1828:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
 15461              		.loc 1 1828 29 is_stmt 0 view .LVU4021
 15462 0000 00B5     		push	{lr}
 15463              		.cfi_def_cfa_offset 4
 15464              		.cfi_offset 14, -4
1829:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 15465              		.loc 1 1829 2 view .LVU4022
 15466 0002 A928     		cmp	r0, #169
1828:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
 15467              		.loc 1 1828 29 view .LVU4023
ARM GAS  /tmp/cc0UaEmF.s 			page 434


 15468 0004 83B0     		sub	sp, sp, #12
 15469              		.cfi_def_cfa_offset 16
1829:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 15470              		.loc 1 1829 2 view .LVU4024
 15471 0006 23D0     		beq	.L1085
1829:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 15472              		.loc 1 1829 2 discriminator 2 view .LVU4025
 15473 0008 AA28     		cmp	r0, #170
 15474 000a 18D0     		beq	.L1086
1829:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 15475              		.loc 1 1829 2 discriminator 5 view .LVU4026
 15476 000c AC28     		cmp	r0, #172
 15477 000e 3CD0     		beq	.L1087
 15478              	.LBB2759:
 15479              	.LBI2759:
 250:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 15480              		.loc 1 250 14 is_stmt 1 view .LVU4027
 15481              	.LBE2759:
 251:src/xeq.c     **** }
 15482              		.loc 1 251 2 view .LVU4028
 15483              	.LVL1134:
 15484              	.LBB2768:
 15485              	.LBB2760:
 15486              	.LBI2760:
 238:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 15487              		.loc 1 238 14 view .LVU4029
 15488              	.LBB2761:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 15489              		.loc 1 239 2 view .LVU4030
 15490              	.LBB2762:
 15491              	.LBI2762:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15492              		.loc 1 932 5 view .LVU4031
 15493              	.LBB2763:
 933:src/xeq.c     **** }
 15494              		.loc 1 933 2 view .LVU4032
 933:src/xeq.c     **** }
 15495              		.loc 1 933 12 is_stmt 0 view .LVU4033
 15496 0010 224B     		ldr	r3, .L1089
 15497 0012 1A68     		ldr	r2, [r3]
 933:src/xeq.c     **** }
 15498              		.loc 1 933 24 view .LVU4034
 15499 0014 B2F8E817 		ldrh	r1, [r2, #2024]
 15500              	.LBE2763:
 15501              	.LBE2762:
 15502              	.LBB2765:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 15503              		.loc 1 240 24 view .LVU4035
 15504 0018 92F8CF27 		ldrb	r2, [r2, #1999]	@ zero_extendqisi2
 15505              	.LBE2765:
 15506              	.LBB2766:
 15507              	.LBB2764:
 933:src/xeq.c     **** }
 15508              		.loc 1 933 24 view .LVU4036
 15509 001c 44F20103 		movw	r3, #16385
 15510              	.LBE2764:
 15511              	.LBE2766:
ARM GAS  /tmp/cc0UaEmF.s 			page 435


 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 15512              		.loc 1 239 5 view .LVU4037
 15513 0020 0B40     		ands	r3, r3, r1
 15514 0022 B3F5804F 		cmp	r3, #16384
 15515              	.LBB2767:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 15516              		.loc 1 240 3 is_stmt 1 view .LVU4038
 15517              	.LVL1135:
 241:src/xeq.c     **** 	}
 15518              		.loc 1 241 3 view .LVU4039
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 15519              		.loc 1 240 13 is_stmt 0 view .LVU4040
 15520 0026 04BF     		itt	eq
 15521 0028 0C3A     		subeq	r2, r2, #12
 15522              	.LVL1136:
 241:src/xeq.c     **** 	}
 15523              		.loc 1 241 67 view .LVU4041
 15524 002a 5210     		asreq	r2, r2, #1
 15525              	.LBE2767:
 244:src/xeq.c     **** }
 15526              		.loc 1 244 3 is_stmt 1 view .LVU4042
 15527 002c 0023     		movs	r3, #0
 15528              	.LVL1137:
 15529              	.L1078:
 244:src/xeq.c     **** }
 15530              		.loc 1 244 3 is_stmt 0 view .LVU4043
 15531              	.LBE2761:
 15532              	.LBE2760:
 15533              	.LBE2768:
 15534              	.LBB2769:
 15535              	.LBI2769:
1323:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 15536              		.loc 1 1323 6 is_stmt 1 discriminator 10 view .LVU4044
 15537              	.LBB2770:
1324:src/xeq.c     **** }
 15538              		.loc 1 1324 2 discriminator 10 view .LVU4045
 15539 002e 0021     		movs	r1, #0
 15540 0030 0091     		str	r1, [sp]
 15541 0032 6420     		movs	r0, #100
 15542 0034 FFF7FEFF 		bl	set_reg_n_int_sgn
 15543              	.LVL1138:
1324:src/xeq.c     **** }
 15544              		.loc 1 1324 2 is_stmt 0 discriminator 10 view .LVU4046
 15545              	.LBE2770:
 15546              	.LBE2769:
1834:src/xeq.c     **** 
 15547              		.loc 1 1834 1 discriminator 10 view .LVU4047
 15548 0038 03B0     		add	sp, sp, #12
 15549              		.cfi_remember_state
 15550              		.cfi_def_cfa_offset 4
 15551              		@ sp needed
 15552 003a 5DF804FB 		ldr	pc, [sp], #4
 15553              	.LVL1139:
 15554              	.L1086:
 15555              		.cfi_restore_state
 15556              	.LBB2771:
 15557              	.LBI2771:
ARM GAS  /tmp/cc0UaEmF.s 			page 436


 230:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 15558              		.loc 1 230 5 is_stmt 1 view .LVU4048
 15559              	.LBE2771:
 231:src/xeq.c     **** }
 15560              		.loc 1 231 2 view .LVU4049
 15561              	.LBB2792:
 15562              	.LBB2772:
 15563              	.LBI2772:
 222:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 15564              		.loc 1 222 5 view .LVU4050
 15565              	.LBB2773:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 15566              		.loc 1 223 2 view .LVU4051
 15567              	.LBB2774:
 15568              	.LBI2774:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15569              		.loc 1 932 5 view .LVU4052
 15570              	.LBB2775:
 933:src/xeq.c     **** }
 15571              		.loc 1 933 2 view .LVU4053
 933:src/xeq.c     **** }
 15572              		.loc 1 933 12 is_stmt 0 view .LVU4054
 15573 003e 174B     		ldr	r3, .L1089
 15574 0040 1B68     		ldr	r3, [r3]
 15575              	.LVL1140:
 933:src/xeq.c     **** }
 15576              		.loc 1 933 12 view .LVU4055
 15577              	.LBE2775:
 15578              	.LBE2774:
 224:src/xeq.c     **** }
 15579              		.loc 1 224 2 is_stmt 1 view .LVU4056
 15580              	.LBB2778:
 15581              	.LBI2778:
 214:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 15582              		.loc 1 214 5 view .LVU4057
 15583              	.LBB2779:
 215:src/xeq.c     **** }
 15584              		.loc 1 215 2 view .LVU4058
 215:src/xeq.c     **** }
 15585              		.loc 1 215 9 is_stmt 0 view .LVU4059
 15586 0042 B3F9DE27 		ldrsh	r2, [r3, #2014]
 215:src/xeq.c     **** }
 15587              		.loc 1 215 57 view .LVU4060
 15588 0046 002A     		cmp	r2, #0
 15589 0048 0BDB     		blt	.L1088
 15590 004a 0022     		movs	r2, #0
 15591 004c 0023     		movs	r3, #0
 15592              	.LVL1141:
 215:src/xeq.c     **** }
 15593              		.loc 1 215 57 view .LVU4061
 15594 004e EEE7     		b	.L1078
 15595              	.LVL1142:
 15596              	.L1085:
 215:src/xeq.c     **** }
 15597              		.loc 1 215 57 view .LVU4062
 15598              	.LBE2779:
 15599              	.LBE2778:
ARM GAS  /tmp/cc0UaEmF.s 			page 437


 15600              	.LBE2773:
 15601              	.LBE2772:
 15602              	.LBE2792:
 15603              	.LBB2793:
 15604              	.LBI2793:
1820:src/xeq.c     **** 	return RetStkSize + RetStkPtr;
 15605              		.loc 1 1820 5 is_stmt 1 view .LVU4063
 15606              	.LBB2794:
1821:src/xeq.c     **** }
 15607              		.loc 1 1821 2 view .LVU4064
1821:src/xeq.c     **** }
 15608              		.loc 1 1821 22 is_stmt 0 view .LVU4065
 15609 0050 124A     		ldr	r2, .L1089
1821:src/xeq.c     **** }
 15610              		.loc 1 1821 20 view .LVU4066
 15611 0052 134B     		ldr	r3, .L1089+4
1821:src/xeq.c     **** }
 15612              		.loc 1 1821 22 view .LVU4067
 15613 0054 1268     		ldr	r2, [r2]
1821:src/xeq.c     **** }
 15614              		.loc 1 1821 20 view .LVU4068
 15615 0056 1B68     		ldr	r3, [r3]
1821:src/xeq.c     **** }
 15616              		.loc 1 1821 22 view .LVU4069
 15617 0058 B2F9E227 		ldrsh	r2, [r2, #2018]
1821:src/xeq.c     **** }
 15618              		.loc 1 1821 20 view .LVU4070
 15619 005c 1A44     		add	r2, r2, r3
 15620 005e 0023     		movs	r3, #0
 15621              	.LBE2794:
 15622              	.LBE2793:
 15623 0060 E5E7     		b	.L1078
 15624              	.LVL1143:
 15625              	.L1088:
 15626              	.LBB2795:
 15627              	.LBB2791:
 15628              	.LBB2790:
 15629              	.LBB2784:
 15630              	.LBB2776:
 933:src/xeq.c     **** }
 15631              		.loc 1 933 24 view .LVU4071
 15632 0062 B3F8E807 		ldrh	r0, [r3, #2024]
 15633              	.LVL1144:
 933:src/xeq.c     **** }
 15634              		.loc 1 933 24 view .LVU4072
 15635              	.LBE2776:
 15636              	.LBE2784:
 15637              	.LBB2785:
 15638              	.LBB2780:
 215:src/xeq.c     **** }
 15639              		.loc 1 215 25 view .LVU4073
 15640 0066 0F49     		ldr	r1, .L1089+8
 15641              	.LBE2780:
 15642              	.LBE2785:
 15643              	.LBB2786:
 15644              	.LBB2777:
 933:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 438


 15645              		.loc 1 933 24 view .LVU4074
 15646 0068 44F20103 		movw	r3, #16385
 15647              	.LVL1145:
 933:src/xeq.c     **** }
 15648              		.loc 1 933 24 view .LVU4075
 15649              	.LBE2777:
 15650              	.LBE2786:
 15651              	.LBB2787:
 15652              	.LBB2781:
 215:src/xeq.c     **** }
 15653              		.loc 1 215 25 view .LVU4076
 15654 006c 0968     		ldr	r1, [r1]
 15655              	.LBE2781:
 15656              	.LBE2787:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 15657              		.loc 1 223 73 view .LVU4077
 15658 006e 0340     		ands	r3, r3, r0
 15659 0070 A3F58043 		sub	r3, r3, #16384
 15660              	.LBB2788:
 15661              	.LBB2782:
 215:src/xeq.c     **** }
 15662              		.loc 1 215 57 view .LVU4078
 15663 0074 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 15664              	.LBE2782:
 15665              	.LBE2788:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 15666              		.loc 1 223 73 view .LVU4079
 15667 0078 B3FA83F3 		clz	r3, r3
 15668 007c 5B09     		lsrs	r3, r3, #5
 15669 007e 0233     		adds	r3, r3, #2
 15670              	.LBB2789:
 15671              	.LBB2783:
 215:src/xeq.c     **** }
 15672              		.loc 1 215 57 view .LVU4080
 15673 0080 C2F30B02 		ubfx	r2, r2, #0, #12
 15674 0084 1A41     		asrs	r2, r2, r3
 15675 0086 D317     		asrs	r3, r2, #31
 15676 0088 D1E7     		b	.L1078
 15677              	.LVL1146:
 15678              	.L1087:
 215:src/xeq.c     **** }
 15679              		.loc 1 215 57 view .LVU4081
 15680              	.LBE2783:
 15681              	.LBE2789:
 15682              	.LBE2790:
 15683              	.LBE2791:
 15684              	.LBE2795:
 15685              	.LBB2796:
 15686              	.LBI2796:
1824:src/xeq.c     **** 	return NUMPROG_FLASH_MAX - UserFlash.size;
 15687              		.loc 1 1824 5 is_stmt 1 view .LVU4082
 15688              	.LBB2797:
1825:src/xeq.c     **** }
 15689              		.loc 1 1825 2 view .LVU4083
1825:src/xeq.c     **** }
 15690              		.loc 1 1825 38 is_stmt 0 view .LVU4084
 15691 008a 074B     		ldr	r3, .L1089+12
ARM GAS  /tmp/cc0UaEmF.s 			page 439


 15692 008c 1B68     		ldr	r3, [r3]
 15693 008e 5A88     		ldrh	r2, [r3, #2]
1825:src/xeq.c     **** }
 15694              		.loc 1 1825 27 view .LVU4085
 15695 0090 C2F5FF52 		rsb	r2, r2, #8160
 15696 0094 1E32     		adds	r2, r2, #30
 15697 0096 0023     		movs	r3, #0
 15698              	.LBE2797:
 15699              	.LBE2796:
 15700 0098 C9E7     		b	.L1078
 15701              	.L1090:
 15702 009a 00BF     		.align	2
 15703              	.L1089:
 15704 009c 00000000 		.word	main_ram
 15705 00a0 00000000 		.word	RetStkSize
 15706 00a4 00000000 		.word	RetStk
 15707 00a8 00000000 		.word	library_ram
 15708              		.cfi_endproc
 15709              	.LFE134:
 15711              		.section	.text.cmdputkey,"ax",%progbits
 15712              		.align	1
 15713              		.p2align 2,,3
 15714              		.global	cmdputkey
 15715              		.syntax unified
 15716              		.thumb
 15717              		.thumb_func
 15718              		.fpu fpv4-sp-d16
 15720              	cmdputkey:
 15721              	.LVL1147:
 15722              	.LFB137:
1869:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 15723              		.loc 1 1869 1 is_stmt 1 view -0
 15724              		.cfi_startproc
 15725              		@ args = 0, pretend = 0, frame = 0
 15726              		@ frame_needed = 0, uses_anonymous_args = 0
1870:src/xeq.c     **** 
 15727              		.loc 1 1870 2 view .LVU4087
1869:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 15728              		.loc 1 1869 1 is_stmt 0 view .LVU4088
 15729 0000 10B5     		push	{r4, lr}
 15730              		.cfi_def_cfa_offset 8
 15731              		.cfi_offset 4, -8
 15732              		.cfi_offset 14, -4
1870:src/xeq.c     **** 
 15733              		.loc 1 1870 16 view .LVU4089
 15734 0002 FFF7FEFF 		bl	get_keycode_from_reg
 15735              	.LVL1148:
1872:src/xeq.c     **** 		set_running_off();
 15736              		.loc 1 1872 2 is_stmt 1 view .LVU4090
1872:src/xeq.c     **** 		set_running_off();
 15737              		.loc 1 1872 5 is_stmt 0 view .LVU4091
 15738 0006 041E     		subs	r4, r0, #0
 15739 0008 00DA     		bge	.L1094
1876:src/xeq.c     **** 
 15740              		.loc 1 1876 1 view .LVU4092
 15741 000a 10BD     		pop	{r4, pc}
 15742              	.L1094:
ARM GAS  /tmp/cc0UaEmF.s 			page 440


1873:src/xeq.c     **** 		put_key(c);
 15743              		.loc 1 1873 3 is_stmt 1 view .LVU4093
 15744              	.LBB2798:
 15745              	.LBI2798:
5580:src/xeq.c     **** 	set_running_off_sst();
 15746              		.loc 1 5580 6 view .LVU4094
 15747              	.LBB2799:
5581:src/xeq.c     **** 	State.entryp = 0;
 15748              		.loc 1 5581 2 view .LVU4095
 15749              	.LBB2800:
 15750              	.LBI2800:
5572:src/xeq.c     **** 	Running = 0;
 15751              		.loc 1 5572 6 view .LVU4096
 15752              	.LBB2801:
5573:src/xeq.c     **** }
 15753              		.loc 1 5573 2 view .LVU4097
 15754              	.LBE2801:
 15755              	.LBE2800:
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 15756              		.loc 1 5582 15 is_stmt 0 view .LVU4098
 15757 000c 094B     		ldr	r3, .L1095
 15758              	.LBB2804:
 15759              	.LBB2802:
5573:src/xeq.c     **** }
 15760              		.loc 1 5573 10 view .LVU4099
 15761 000e 0A4A     		ldr	r2, .L1095+4
 15762              	.LBE2802:
 15763              	.LBE2804:
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 15764              		.loc 1 5582 15 view .LVU4100
 15765 0010 1B68     		ldr	r3, [r3]
 15766              	.LBB2805:
 15767              	.LBB2803:
5573:src/xeq.c     **** }
 15768              		.loc 1 5573 10 view .LVU4101
 15769 0012 0021     		movs	r1, #0
 15770 0014 1160     		str	r1, [r2]
 15771              	.LBE2803:
 15772              	.LBE2805:
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 15773              		.loc 1 5582 2 is_stmt 1 view .LVU4102
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 15774              		.loc 1 5582 15 is_stmt 0 view .LVU4103
 15775 0016 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 15776 001a 61F30412 		bfi	r2, r1, #4, #1
 15777              		.loc 1 5583 2 view .LVU4104
 15778 001e 8A20     		movs	r0, #138
 15779              	.LVL1149:
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 15780              		.loc 1 5582 15 view .LVU4105
 15781 0020 83F8DD27 		strb	r2, [r3, #2013]
 15782              		.loc 1 5583 2 is_stmt 1 view .LVU4106
 15783 0024 FFF7FEFF 		bl	dot
 15784              	.LVL1150:
 15785              	.LBE2799:
 15786              	.LBE2798:
1874:src/xeq.c     **** 	}
ARM GAS  /tmp/cc0UaEmF.s 			page 441


 15787              		.loc 1 1874 3 view .LVU4107
 15788 0028 2046     		mov	r0, r4
1876:src/xeq.c     **** 
 15789              		.loc 1 1876 1 is_stmt 0 view .LVU4108
 15790 002a BDE81040 		pop	{r4, lr}
 15791              		.cfi_restore 14
 15792              		.cfi_restore 4
 15793              		.cfi_def_cfa_offset 0
 15794              	.LVL1151:
1874:src/xeq.c     **** 	}
 15795              		.loc 1 1874 3 view .LVU4109
 15796 002e FFF7FEBF 		b	put_key
 15797              	.LVL1152:
 15798              	.L1096:
1874:src/xeq.c     **** 	}
 15799              		.loc 1 1874 3 view .LVU4110
 15800 0032 00BF     		.align	2
 15801              	.L1095:
 15802 0034 00000000 		.word	main_ram
 15803 0038 00000000 		.word	Running
 15804              		.cfi_endproc
 15805              	.LFE137:
 15807              		.section	.text.cmdkeytype,"ax",%progbits
 15808              		.align	1
 15809              		.p2align 2,,3
 15810              		.global	cmdkeytype
 15811              		.syntax unified
 15812              		.thumb
 15813              		.thumb_func
 15814              		.fpu fpv4-sp-d16
 15816              	cmdkeytype:
 15817              	.LVL1153:
 15818              	.LFB138:
1884:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 15819              		.loc 1 1884 1 is_stmt 1 view -0
 15820              		.cfi_startproc
 15821              		@ args = 0, pretend = 0, frame = 48
 15822              		@ frame_needed = 0, uses_anonymous_args = 0
1885:src/xeq.c     **** 	if ( c >= 0 ) {
 15823              		.loc 1 1885 2 view .LVU4112
1884:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 15824              		.loc 1 1884 1 is_stmt 0 view .LVU4113
 15825 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 15826              		.cfi_def_cfa_offset 20
 15827              		.cfi_offset 4, -20
 15828              		.cfi_offset 5, -16
 15829              		.cfi_offset 6, -12
 15830              		.cfi_offset 7, -8
 15831              		.cfi_offset 14, -4
 15832 0002 8FB0     		sub	sp, sp, #60
 15833              		.cfi_def_cfa_offset 80
1885:src/xeq.c     **** 	if ( c >= 0 ) {
 15834              		.loc 1 1885 16 view .LVU4114
 15835 0004 FFF7FEFF 		bl	get_keycode_from_reg
 15836              	.LVL1154:
1886:src/xeq.c     **** 		const char types[] = {
 15837              		.loc 1 1886 2 is_stmt 1 view .LVU4115
ARM GAS  /tmp/cc0UaEmF.s 			page 442


1886:src/xeq.c     **** 		const char types[] = {
 15838              		.loc 1 1886 5 is_stmt 0 view .LVU4116
 15839 0008 061E     		subs	r6, r0, #0
 15840 000a 17DB     		blt	.L1097
 15841              	.LBB2806:
1887:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 15842              		.loc 1 1887 3 is_stmt 1 view .LVU4117
1887:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 15843              		.loc 1 1887 14 is_stmt 0 view .LVU4118
 15844 000c 0E4D     		ldr	r5, .L1105
 15845              	.LBB2807:
 15846              	.LBB2808:
 15847              	.LBB2809:
 15848              	.LBB2810:
 735:src/xeq.c     **** }
 15849              		.loc 1 735 15 view .LVU4119
 15850 000e 0F4F     		ldr	r7, .L1105+4
 15851              	.LBE2810:
 15852              	.LBE2809:
 15853              	.LBE2808:
 15854              	.LBE2807:
1887:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 15855              		.loc 1 1887 14 view .LVU4120
 15856 0010 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 15857              	.LVL1155:
1887:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 15858              		.loc 1 1887 14 view .LVU4121
 15859 0012 03AC     		add	r4, sp, #12
 15860 0014 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 15861 0016 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 15862 0018 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 15863 001a 95E80700 		ldm	r5, {r0, r1, r2}
 15864              	.LBB2819:
 15865              	.LBB2815:
 15866              	.LBB2813:
 15867              	.LBB2811:
 735:src/xeq.c     **** }
 15868              		.loc 1 735 15 view .LVU4122
 15869 001e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 15870              	.LBE2811:
 15871              	.LBE2813:
 15872              	.LBE2815:
 15873              	.LBE2819:
1887:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 15874              		.loc 1 1887 14 view .LVU4123
 15875 0020 03C4     		stmia	r4!, {r0, r1}
 15876              	.LBB2820:
 15877              	.LBB2816:
 739:src/xeq.c     **** 		lift();
 15878              		.loc 1 739 5 view .LVU4124
 15879 0022 5B06     		lsls	r3, r3, #25
 15880              	.LBE2816:
 15881              	.LBE2820:
1887:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 15882              		.loc 1 1887 14 view .LVU4125
 15883 0024 2270     		strb	r2, [r4]
1895:src/xeq.c     **** 		setX_int_sgn(types[c], 0);
ARM GAS  /tmp/cc0UaEmF.s 			page 443


 15884              		.loc 1 1895 3 is_stmt 1 view .LVU4126
 15885              	.LBB2821:
 15886              	.LBI2807:
 738:src/xeq.c     **** 	if (get_lift())
 15887              		.loc 1 738 6 view .LVU4127
 15888              	.LBB2817:
 739:src/xeq.c     **** 		lift();
 15889              		.loc 1 739 2 view .LVU4128
 15890              	.LBB2814:
 15891              	.LBI2809:
 734:src/xeq.c     **** 	return State2.state_lift;
 15892              		.loc 1 734 12 view .LVU4129
 15893              	.LBB2812:
 735:src/xeq.c     **** }
 15894              		.loc 1 735 2 view .LVU4130
 15895              	.LBE2812:
 15896              	.LBE2814:
 739:src/xeq.c     **** 		lift();
 15897              		.loc 1 739 5 is_stmt 0 view .LVU4131
 15898 0026 0BD4     		bmi	.L1104
 15899              	.L1099:
 15900              	.LBE2817:
 15901              	.LBE2821:
1896:src/xeq.c     **** 	}
 15902              		.loc 1 1896 3 is_stmt 1 view .LVU4132
 15903              	.LVL1156:
 15904              	.LBB2822:
 15905              	.LBI2822:
1323:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 15906              		.loc 1 1323 6 view .LVU4133
 15907              	.LBB2823:
1324:src/xeq.c     **** }
 15908              		.loc 1 1324 2 view .LVU4134
 15909              	.LBE2823:
 15910              	.LBE2822:
1896:src/xeq.c     **** 	}
 15911              		.loc 1 1896 21 is_stmt 0 view .LVU4135
 15912 0028 0EAB     		add	r3, sp, #56
 15913 002a 9819     		adds	r0, r3, r6
 15914              	.LBB2825:
 15915              	.LBB2824:
1324:src/xeq.c     **** }
 15916              		.loc 1 1324 2 view .LVU4136
 15917 002c 0021     		movs	r1, #0
 15918 002e 10F82C2C 		ldrb	r2, [r0, #-44]	@ zero_extendqisi2
 15919 0032 0091     		str	r1, [sp]
 15920              	.LVL1157:
1324:src/xeq.c     **** }
 15921              		.loc 1 1324 2 view .LVU4137
 15922 0034 0023     		movs	r3, #0
 15923 0036 6420     		movs	r0, #100
 15924 0038 FFF7FEFF 		bl	set_reg_n_int_sgn
 15925              	.LVL1158:
 15926              	.L1097:
1324:src/xeq.c     **** }
 15927              		.loc 1 1324 2 view .LVU4138
 15928              	.LBE2824:
ARM GAS  /tmp/cc0UaEmF.s 			page 444


 15929              	.LBE2825:
 15930              	.LBE2806:
1898:src/xeq.c     **** 
 15931              		.loc 1 1898 1 view .LVU4139
 15932 003c 0FB0     		add	sp, sp, #60
 15933              		.cfi_remember_state
 15934              		.cfi_def_cfa_offset 20
 15935              		@ sp needed
 15936 003e F0BD     		pop	{r4, r5, r6, r7, pc}
 15937              	.LVL1159:
 15938              	.L1104:
 15939              		.cfi_restore_state
 15940              	.LBB2827:
 15941              	.LBB2826:
 15942              	.LBB2818:
 740:src/xeq.c     **** }
 15943              		.loc 1 740 3 is_stmt 1 view .LVU4140
 15944 0040 FFF7FEFF 		bl	lift
 15945              	.LVL1160:
 15946 0044 F0E7     		b	.L1099
 15947              	.L1106:
 15948 0046 00BF     		.align	2
 15949              	.L1105:
 15950 0048 00000000 		.word	.LANCHOR5
 15951 004c 00000000 		.word	StateWhileOn
 15952              	.LBE2818:
 15953              	.LBE2826:
 15954              	.LBE2827:
 15955              		.cfi_endproc
 15956              	.LFE138:
 15958              		.section	.rodata.op_query_xtal.str1.4,"aMS",%progbits,1
 15959              		.align	2
 15960              	.LC2:
 15961 0000 74727565 		.ascii	"true\000"
 15961      00
 15962              		.section	.text.op_query_xtal,"ax",%progbits
 15963              		.align	1
 15964              		.p2align 2,,3
 15965              		.global	op_query_xtal
 15966              		.syntax unified
 15967              		.thumb
 15968              		.thumb_func
 15969              		.fpu fpv4-sp-d16
 15971              	op_query_xtal:
 15972              	.LVL1161:
 15973              	.LFB141:
1918:src/xeq.c     **** 	fin_tst(Xtal);
 15974              		.loc 1 1918 35 view -0
 15975              		.cfi_startproc
 15976              		@ args = 0, pretend = 0, frame = 0
 15977              		@ frame_needed = 0, uses_anonymous_args = 0
 15978              		@ link register save eliminated.
1919:src/xeq.c     **** }
 15979              		.loc 1 1919 2 view .LVU4142
 15980              	.LBB2828:
 15981              	.LBI2828:
2363:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
ARM GAS  /tmp/cc0UaEmF.s 			page 445


 15982              		.loc 1 2363 6 view .LVU4143
 15983              	.LBB2829:
2364:src/xeq.c     **** 	if (Running || XromRunning) {
 15984              		.loc 1 2364 2 view .LVU4144
2365:src/xeq.c     **** 		if (! a && incpc())
 15985              		.loc 1 2365 2 view .LVU4145
2365:src/xeq.c     **** 		if (! a && incpc())
 15986              		.loc 1 2365 6 is_stmt 0 view .LVU4146
 15987 0000 044A     		ldr	r2, .L1109
2365:src/xeq.c     **** 		if (! a && incpc())
 15988              		.loc 1 2365 14 view .LVU4147
 15989 0002 054B     		ldr	r3, .L1109+4
 15990 0004 1268     		ldr	r2, [r2]
 15991 0006 1B68     		ldr	r3, [r3]
 15992 0008 1343     		orrs	r3, r2, r3
 15993 000a 02D1     		bne	.L1107
2370:src/xeq.c     **** #ifdef INFRARED
 15994              		.loc 1 2370 3 is_stmt 1 view .LVU4148
2370:src/xeq.c     **** #ifdef INFRARED
 15995              		.loc 1 2370 11 is_stmt 0 view .LVU4149
 15996 000c 034B     		ldr	r3, .L1109+8
 15997 000e 044A     		ldr	r2, .L1109+12
 15998 0010 1A60     		str	r2, [r3]
 15999              	.LVL1162:
 16000              	.L1107:
2370:src/xeq.c     **** #ifdef INFRARED
 16001              		.loc 1 2370 11 view .LVU4150
 16002              	.LBE2829:
 16003              	.LBE2828:
1920:src/xeq.c     **** 
 16004              		.loc 1 1920 1 view .LVU4151
 16005 0012 7047     		bx	lr
 16006              	.L1110:
 16007              		.align	2
 16008              	.L1109:
 16009 0014 00000000 		.word	Running
 16010 0018 00000000 		.word	XromRunning
 16011 001c 00000000 		.word	DispMsg
 16012 0020 00000000 		.word	.LC2
 16013              		.cfi_endproc
 16014              	.LFE141:
 16016              		.section	.rodata.op_query_print.str1.4,"aMS",%progbits,1
 16017              		.align	2
 16018              	.LC3:
 16019 0000 66616C73 		.ascii	"false\000"
 16019      6500
 16020              		.section	.text.op_query_print,"ax",%progbits
 16021              		.align	1
 16022              		.p2align 2,,3
 16023              		.global	op_query_print
 16024              		.syntax unified
 16025              		.thumb
 16026              		.thumb_func
 16027              		.fpu fpv4-sp-d16
 16029              	op_query_print:
 16030              	.LVL1163:
 16031              	.LFB142:
ARM GAS  /tmp/cc0UaEmF.s 			page 446


1922:src/xeq.c     **** #ifdef INFRARED
 16032              		.loc 1 1922 36 is_stmt 1 view -0
 16033              		.cfi_startproc
 16034              		@ args = 0, pretend = 0, frame = 0
 16035              		@ frame_needed = 0, uses_anonymous_args = 0
 16036              		@ link register save eliminated.
1926:src/xeq.c     **** #endif
 16037              		.loc 1 1926 2 view .LVU4153
 16038              	.LBB2830:
 16039              	.LBI2830:
2363:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 16040              		.loc 1 2363 6 view .LVU4154
 16041              	.LBB2831:
2364:src/xeq.c     **** 	if (Running || XromRunning) {
 16042              		.loc 1 2364 2 view .LVU4155
2365:src/xeq.c     **** 		if (! a && incpc())
 16043              		.loc 1 2365 2 view .LVU4156
2365:src/xeq.c     **** 		if (! a && incpc())
 16044              		.loc 1 2365 6 is_stmt 0 view .LVU4157
 16045 0000 054A     		ldr	r2, .L1114
2365:src/xeq.c     **** 		if (! a && incpc())
 16046              		.loc 1 2365 14 view .LVU4158
 16047 0002 064B     		ldr	r3, .L1114+4
 16048 0004 1268     		ldr	r2, [r2]
 16049 0006 1B68     		ldr	r3, [r3]
 16050 0008 1343     		orrs	r3, r2, r3
 16051 000a 03D1     		bne	.L1113
2370:src/xeq.c     **** #ifdef INFRARED
 16052              		.loc 1 2370 3 is_stmt 1 view .LVU4159
2370:src/xeq.c     **** #ifdef INFRARED
 16053              		.loc 1 2370 11 is_stmt 0 view .LVU4160
 16054 000c 044B     		ldr	r3, .L1114+8
 16055 000e 054A     		ldr	r2, .L1114+12
 16056 0010 1A60     		str	r2, [r3]
 16057              	.LVL1164:
2370:src/xeq.c     **** #ifdef INFRARED
 16058              		.loc 1 2370 11 view .LVU4161
 16059              	.LBE2831:
 16060              	.LBE2830:
1928:src/xeq.c     **** 
 16061              		.loc 1 1928 1 view .LVU4162
 16062 0012 7047     		bx	lr
 16063              	.LVL1165:
 16064              	.L1113:
 16065              	.LBB2833:
 16066              	.LBB2832:
2366:src/xeq.c     **** 			decpc();
 16067              		.loc 1 2366 3 is_stmt 1 view .LVU4163
 16068 0014 FFF7FEBF 		b	fin_tst.part.0
 16069              	.LVL1166:
 16070              	.L1115:
2366:src/xeq.c     **** 			decpc();
 16071              		.loc 1 2366 3 is_stmt 0 view .LVU4164
 16072              		.align	2
 16073              	.L1114:
 16074 0018 00000000 		.word	Running
 16075 001c 00000000 		.word	XromRunning
ARM GAS  /tmp/cc0UaEmF.s 			page 447


 16076 0020 00000000 		.word	DispMsg
 16077 0024 00000000 		.word	.LC3
 16078              	.LBE2832:
 16079              	.LBE2833:
 16080              		.cfi_endproc
 16081              	.LFE142:
 16083              		.section	.text.cmdstostk,"ax",%progbits
 16084              		.align	1
 16085              		.p2align 2,,3
 16086              		.global	cmdstostk
 16087              		.syntax unified
 16088              		.thumb
 16089              		.thumb_func
 16090              		.fpu fpv4-sp-d16
 16092              	cmdstostk:
 16093              	.LVL1167:
 16094              	.LFB144:
1941:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 16095              		.loc 1 1941 48 is_stmt 1 view -0
 16096              		.cfi_startproc
 16097              		@ args = 0, pretend = 0, frame = 0
 16098              		@ frame_needed = 0, uses_anonymous_args = 0
1942:src/xeq.c     **** 
 16099              		.loc 1 1942 2 view .LVU4166
1941:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 16100              		.loc 1 1941 48 is_stmt 0 view .LVU4167
 16101 0000 70B5     		push	{r4, r5, r6, lr}
 16102              		.cfi_def_cfa_offset 16
 16103              		.cfi_offset 4, -16
 16104              		.cfi_offset 5, -12
 16105              		.cfi_offset 6, -8
 16106              		.cfi_offset 14, -4
1941:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 16107              		.loc 1 1941 48 view .LVU4168
 16108 0002 0546     		mov	r5, r0
1942:src/xeq.c     **** 
 16109              		.loc 1 1942 13 view .LVU4169
 16110 0004 FFF7FEFF 		bl	check_stack_overlap
 16111              	.LVL1168:
1944:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 16112              		.loc 1 1944 2 is_stmt 1 view .LVU4170
1944:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 16113              		.loc 1 1944 12 view .LVU4171
1944:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 16114              		.loc 1 1944 2 is_stmt 0 view .LVU4172
 16115 0008 031E     		subs	r3, r0, #0
 16116 000a 0ADD     		ble	.L1116
 16117 000c 2C46     		mov	r4, r5
 16118 000e C4F16406 		rsb	r6, r4, #100
 16119 0012 1D44     		add	r5, r5, r3
 16120              	.LVL1169:
 16121              	.L1118:
1945:src/xeq.c     **** }
 16122              		.loc 1 1945 3 is_stmt 1 discriminator 3 view .LVU4173
 16123 0014 3119     		adds	r1, r6, r4
 16124 0016 2046     		mov	r0, r4
 16125 0018 0134     		adds	r4, r4, #1
ARM GAS  /tmp/cc0UaEmF.s 			page 448


 16126              	.LVL1170:
1945:src/xeq.c     **** }
 16127              		.loc 1 1945 3 is_stmt 0 discriminator 3 view .LVU4174
 16128 001a FFF7FEFF 		bl	copyreg_n
 16129              	.LVL1171:
1944:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 16130              		.loc 1 1944 17 is_stmt 1 discriminator 3 view .LVU4175
1944:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 16131              		.loc 1 1944 12 discriminator 3 view .LVU4176
1944:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 16132              		.loc 1 1944 2 is_stmt 0 discriminator 3 view .LVU4177
 16133 001e AC42     		cmp	r4, r5
 16134 0020 F8D1     		bne	.L1118
 16135              	.L1116:
1946:src/xeq.c     **** 
 16136              		.loc 1 1946 1 view .LVU4178
 16137 0022 70BD     		pop	{r4, r5, r6, pc}
 16138              		.cfi_endproc
 16139              	.LFE144:
 16141              		.section	.text.cmdrclstk,"ax",%progbits
 16142              		.align	1
 16143              		.p2align 2,,3
 16144              		.global	cmdrclstk
 16145              		.syntax unified
 16146              		.thumb
 16147              		.thumb_func
 16148              		.fpu fpv4-sp-d16
 16150              	cmdrclstk:
 16151              	.LVL1172:
 16152              	.LFB145:
1948:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 16153              		.loc 1 1948 48 is_stmt 1 view -0
 16154              		.cfi_startproc
 16155              		@ args = 0, pretend = 0, frame = 0
 16156              		@ frame_needed = 0, uses_anonymous_args = 0
1949:src/xeq.c     **** 
 16157              		.loc 1 1949 2 view .LVU4180
1948:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 16158              		.loc 1 1948 48 is_stmt 0 view .LVU4181
 16159 0000 70B5     		push	{r4, r5, r6, lr}
 16160              		.cfi_def_cfa_offset 16
 16161              		.cfi_offset 4, -16
 16162              		.cfi_offset 5, -12
 16163              		.cfi_offset 6, -8
 16164              		.cfi_offset 14, -4
1948:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 16165              		.loc 1 1948 48 view .LVU4182
 16166 0002 0646     		mov	r6, r0
1949:src/xeq.c     **** 
 16167              		.loc 1 1949 13 view .LVU4183
 16168 0004 FFF7FEFF 		bl	check_stack_overlap
 16169              	.LVL1173:
1951:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 16170              		.loc 1 1951 2 is_stmt 1 view .LVU4184
1951:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 16171              		.loc 1 1951 12 view .LVU4185
1951:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
ARM GAS  /tmp/cc0UaEmF.s 			page 449


 16172              		.loc 1 1951 2 is_stmt 0 view .LVU4186
 16173 0008 051E     		subs	r5, r0, #0
 16174 000a 09DD     		ble	.L1121
 16175 000c 6435     		adds	r5, r5, #100
 16176 000e 643E     		subs	r6, r6, #100
 16177              	.LVL1174:
1951:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 16178              		.loc 1 1951 2 view .LVU4187
 16179 0010 6424     		movs	r4, #100
 16180              	.LVL1175:
 16181              	.L1123:
1952:src/xeq.c     **** }
 16182              		.loc 1 1952 3 is_stmt 1 discriminator 3 view .LVU4188
 16183 0012 3119     		adds	r1, r6, r4
 16184 0014 2046     		mov	r0, r4
 16185 0016 0134     		adds	r4, r4, #1
 16186              	.LVL1176:
1952:src/xeq.c     **** }
 16187              		.loc 1 1952 3 is_stmt 0 discriminator 3 view .LVU4189
 16188 0018 FFF7FEFF 		bl	copyreg_n
 16189              	.LVL1177:
1951:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 16190              		.loc 1 1951 17 is_stmt 1 discriminator 3 view .LVU4190
1951:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 16191              		.loc 1 1951 12 discriminator 3 view .LVU4191
1951:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 16192              		.loc 1 1951 2 is_stmt 0 discriminator 3 view .LVU4192
 16193 001c AC42     		cmp	r4, r5
 16194 001e F8D1     		bne	.L1123
 16195              	.LVL1178:
 16196              	.L1121:
1953:src/xeq.c     **** 
 16197              		.loc 1 1953 1 view .LVU4193
 16198 0020 70BD     		pop	{r4, r5, r6, pc}
 16199              		.cfi_endproc
 16200              	.LFE145:
 16202 0022 00BF     		.section	.text.find_opcode_from,"ax",%progbits
 16203              		.align	1
 16204              		.p2align 2,,3
 16205              		.global	find_opcode_from
 16206              		.syntax unified
 16207              		.thumb
 16208              		.thumb_func
 16209              		.fpu fpv4-sp-d16
 16211              	find_opcode_from:
 16212              	.LVL1179:
 16213              	.LFB147:
1986:src/xeq.c     **** 	unsigned short int top;
 16214              		.loc 1 1986 81 is_stmt 1 view -0
 16215              		.cfi_startproc
 16216              		@ args = 0, pretend = 0, frame = 8
 16217              		@ frame_needed = 0, uses_anonymous_args = 0
1986:src/xeq.c     **** 	unsigned short int top;
 16218              		.loc 1 1986 81 is_stmt 0 view .LVU4195
 16219 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 16220              		.cfi_def_cfa_offset 24
 16221              		.cfi_offset 4, -24
ARM GAS  /tmp/cc0UaEmF.s 			page 450


 16222              		.cfi_offset 5, -20
 16223              		.cfi_offset 6, -16
 16224              		.cfi_offset 7, -12
 16225              		.cfi_offset 8, -8
 16226              		.cfi_offset 14, -4
1989:src/xeq.c     **** 	const int errp = flags & FIND_OP_ERROR;
 16227              		.loc 1 1989 12 view .LVU4196
 16228 0004 02F00207 		and	r7, r2, #2
1986:src/xeq.c     **** 	unsigned short int top;
 16229              		.loc 1 1986 81 view .LVU4197
 16230 0008 82B0     		sub	sp, sp, #8
 16231              		.cfi_def_cfa_offset 32
1986:src/xeq.c     **** 	unsigned short int top;
 16232              		.loc 1 1986 81 view .LVU4198
 16233 000a 9046     		mov	r8, r2
 16234 000c 0E46     		mov	r6, r1
1992:src/xeq.c     **** 	count -= top;
 16235              		.loc 1 1992 14 view .LVU4199
 16236 000e 0DF10602 		add	r2, sp, #6
 16237              	.LVL1180:
1992:src/xeq.c     **** 	count -= top;
 16238              		.loc 1 1992 14 view .LVU4200
 16239 0012 3946     		mov	r1, r7
 16240              	.LVL1181:
1986:src/xeq.c     **** 	unsigned short int top;
 16241              		.loc 1 1986 81 view .LVU4201
 16242 0014 0446     		mov	r4, r0
1987:src/xeq.c     **** 	int count;
 16243              		.loc 1 1987 2 is_stmt 1 view .LVU4202
1988:src/xeq.c     **** 	const int endp = flags & FIND_OP_ENDS;
 16244              		.loc 1 1988 2 view .LVU4203
1989:src/xeq.c     **** 	const int errp = flags & FIND_OP_ERROR;
 16245              		.loc 1 1989 2 view .LVU4204
 16246              	.LVL1182:
1990:src/xeq.c     **** 
 16247              		.loc 1 1990 2 view .LVU4205
1992:src/xeq.c     **** 	count -= top;
 16248              		.loc 1 1992 2 view .LVU4206
1992:src/xeq.c     **** 	count -= top;
 16249              		.loc 1 1992 14 is_stmt 0 view .LVU4207
 16250 0016 FFF7FEFF 		bl	find_section_bounds
 16251              	.LVL1183:
1993:src/xeq.c     **** 	while (count--) {
 16252              		.loc 1 1993 8 view .LVU4208
 16253 001a BDF80650 		ldrh	r5, [sp, #6]
1992:src/xeq.c     **** 	count -= top;
 16254              		.loc 1 1992 8 view .LVU4209
 16255 001e 0130     		adds	r0, r0, #1
 16256              	.LVL1184:
1993:src/xeq.c     **** 	while (count--) {
 16257              		.loc 1 1993 2 is_stmt 1 view .LVU4210
1994:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 16258              		.loc 1 1994 2 view .LVU4211
1994:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 16259              		.loc 1 1994 8 view .LVU4212
1994:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 16260              		.loc 1 1994 8 is_stmt 0 view .LVU4213
ARM GAS  /tmp/cc0UaEmF.s 			page 451


 16261 0020 451B     		subs	r5, r0, r5
 16262              	.LVL1185:
1994:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 16263              		.loc 1 1994 8 view .LVU4214
 16264 0022 05D1     		bne	.L1129
 16265 0024 10E0     		b	.L1127
 16266              	.LVL1186:
 16267              	.L1137:
2000:src/xeq.c     **** 	}
 16268              		.loc 1 2000 8 view .LVU4215
 16269 0026 FFF7FEFF 		bl	do_inc
 16270              	.LVL1187:
1994:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 16271              		.loc 1 1994 8 view .LVU4216
 16272 002a 013D     		subs	r5, r5, #1
 16273              	.LVL1188:
2000:src/xeq.c     **** 	}
 16274              		.loc 1 2000 8 view .LVU4217
 16275 002c 0446     		mov	r4, r0
 16276              	.LVL1189:
1994:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 16277              		.loc 1 1994 8 is_stmt 1 view .LVU4218
1994:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 16278              		.loc 1 1994 8 is_stmt 0 view .LVU4219
 16279 002e 0BD0     		beq	.L1127
 16280              	.LVL1190:
 16281              	.L1129:
1998:src/xeq.c     **** 			return pc;
 16282              		.loc 1 1998 3 is_stmt 1 view .LVU4220
1998:src/xeq.c     **** 			return pc;
 16283              		.loc 1 1998 7 is_stmt 0 view .LVU4221
 16284 0030 2046     		mov	r0, r4
 16285 0032 FFF7FEFF 		bl	getprog
 16286              	.LVL1191:
2000:src/xeq.c     **** 	}
 16287              		.loc 1 2000 3 is_stmt 1 view .LVU4222
1998:src/xeq.c     **** 			return pc;
 16288              		.loc 1 1998 7 is_stmt 0 view .LVU4223
 16289 0036 0346     		mov	r3, r0
1998:src/xeq.c     **** 			return pc;
 16290              		.loc 1 1998 6 view .LVU4224
 16291 0038 B342     		cmp	r3, r6
2000:src/xeq.c     **** 	}
 16292              		.loc 1 2000 8 view .LVU4225
 16293 003a 3946     		mov	r1, r7
 16294 003c 2046     		mov	r0, r4
1998:src/xeq.c     **** 			return pc;
 16295              		.loc 1 1998 6 view .LVU4226
 16296 003e F2D1     		bne	.L1137
 16297              	.LVL1192:
 16298              	.L1126:
2005:src/xeq.c     **** 
 16299              		.loc 1 2005 1 view .LVU4227
 16300 0040 2046     		mov	r0, r4
 16301 0042 02B0     		add	sp, sp, #8
 16302              		.cfi_remember_state
 16303              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/cc0UaEmF.s 			page 452


 16304              		@ sp needed
 16305 0044 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 16306              	.LVL1193:
 16307              	.L1127:
 16308              		.cfi_restore_state
2002:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 16309              		.loc 1 2002 2 is_stmt 1 view .LVU4228
2002:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 16310              		.loc 1 2002 5 is_stmt 0 view .LVU4229
 16311 0048 18F00104 		ands	r4, r8, #1
 16312 004c F8D0     		beq	.L1126
 16313              	.LBB2840:
 16314              	.LBI2840:
1986:src/xeq.c     **** 	unsigned short int top;
 16315              		.loc 1 1986 14 is_stmt 1 view .LVU4230
 16316              	.LVL1194:
 16317              	.LBB2841:
2003:src/xeq.c     **** 	return 0;
 16318              		.loc 1 2003 3 view .LVU4231
 16319              	.LBB2842:
 16320              	.LBI2842:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 16321              		.loc 1 537 5 view .LVU4232
 16322              	.LBB2843:
 538:src/xeq.c     **** 		Error = e;
 16323              		.loc 1 538 2 view .LVU4233
 538:src/xeq.c     **** 		Error = e;
 16324              		.loc 1 538 12 is_stmt 0 view .LVU4234
 16325 004e 074B     		ldr	r3, .L1138
 538:src/xeq.c     **** 		Error = e;
 16326              		.loc 1 538 5 view .LVU4235
 16327 0050 1C68     		ldr	r4, [r3]
 16328 0052 2CB9     		cbnz	r4, .L1131
 16329              	.LVL1195:
 16330              	.LBB2844:
 16331              	.LBI2844:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 16332              		.loc 1 537 5 is_stmt 1 view .LVU4236
 16333              	.LBB2845:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 16334              		.loc 1 539 3 view .LVU4237
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 16335              		.loc 1 539 9 is_stmt 0 view .LVU4238
 16336 0054 0622     		movs	r2, #6
 16337              	.LBE2845:
 16338              	.LBE2844:
 16339              	.LBE2843:
 16340              	.LBE2842:
 16341              	.LBE2841:
 16342              	.LBE2840:
2005:src/xeq.c     **** 
 16343              		.loc 1 2005 1 view .LVU4239
 16344 0056 2046     		mov	r0, r4
 16345              	.LBB2851:
 16346              	.LBB2850:
 16347              	.LBB2849:
 16348              	.LBB2848:
ARM GAS  /tmp/cc0UaEmF.s 			page 453


 16349              	.LBB2847:
 16350              	.LBB2846:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 16351              		.loc 1 539 9 view .LVU4240
 16352 0058 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 16353              		.loc 1 540 3 is_stmt 1 view .LVU4241
 16354              	.LBE2846:
 16355              	.LBE2847:
 16356              	.LBE2848:
 16357              	.LBE2849:
 16358              	.LBE2850:
 16359              	.LBE2851:
2005:src/xeq.c     **** 
 16360              		.loc 1 2005 1 is_stmt 0 view .LVU4242
 16361 005a 02B0     		add	sp, sp, #8
 16362              		.cfi_remember_state
 16363              		.cfi_def_cfa_offset 24
 16364              		@ sp needed
 16365 005c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 16366              	.LVL1196:
 16367              	.L1131:
 16368              		.cfi_restore_state
2004:src/xeq.c     **** }
 16369              		.loc 1 2004 9 view .LVU4243
 16370 0060 0024     		movs	r4, #0
 16371              	.LVL1197:
2005:src/xeq.c     **** 
 16372              		.loc 1 2005 1 view .LVU4244
 16373 0062 2046     		mov	r0, r4
 16374 0064 02B0     		add	sp, sp, #8
 16375              		.cfi_def_cfa_offset 24
 16376              		@ sp needed
 16377 0066 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 16378              	.LVL1198:
 16379              	.L1139:
2005:src/xeq.c     **** 
 16380              		.loc 1 2005 1 view .LVU4245
 16381 006a 00BF     		.align	2
 16382              	.L1138:
 16383 006c 00000000 		.word	Error
 16384              		.cfi_endproc
 16385              	.LFE147:
 16387              		.section	.text.find_label_from,"ax",%progbits
 16388              		.align	1
 16389              		.p2align 2,,3
 16390              		.global	find_label_from
 16391              		.syntax unified
 16392              		.thumb
 16393              		.thumb_func
 16394              		.fpu fpv4-sp-d16
 16396              	find_label_from:
 16397              	.LVL1199:
 16398              	.LFB148:
2008:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 16399              		.loc 1 2008 76 is_stmt 1 view -0
 16400              		.cfi_startproc
ARM GAS  /tmp/cc0UaEmF.s 			page 454


 16401              		@ args = 0, pretend = 0, frame = 0
 16402              		@ frame_needed = 0, uses_anonymous_args = 0
 16403              		@ link register save eliminated.
2009:src/xeq.c     **** }
 16404              		.loc 1 2009 2 view .LVU4247
2009:src/xeq.c     **** }
 16405              		.loc 1 2009 9 is_stmt 0 view .LVU4248
 16406 0000 41F4C441 		orr	r1, r1, #25088
 16407              	.LVL1200:
2009:src/xeq.c     **** }
 16408              		.loc 1 2009 9 view .LVU4249
 16409 0004 FFF7FEBF 		b	find_opcode_from
 16410              	.LVL1201:
2009:src/xeq.c     **** }
 16411              		.loc 1 2009 9 view .LVU4250
 16412              		.cfi_endproc
 16413              	.LFE148:
 16415              		.section	.text.op_rtn,"ax",%progbits
 16416              		.align	1
 16417              		.p2align 2,,3
 16418              		.global	op_rtn
 16419              		.syntax unified
 16420              		.thumb
 16421              		.thumb_func
 16422              		.fpu fpv4-sp-d16
 16424              	op_rtn:
 16425              	.LVL1202:
 16426              	.LFB151:
2067:src/xeq.c     **** 	if (! Running && ! XromRunning) {
 16427              		.loc 1 2067 28 is_stmt 1 view -0
 16428              		.cfi_startproc
 16429              		@ args = 0, pretend = 0, frame = 0
 16430              		@ frame_needed = 0, uses_anonymous_args = 0
 16431              		@ link register save eliminated.
2068:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 16432              		.loc 1 2068 2 view .LVU4252
2068:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 16433              		.loc 1 2068 6 is_stmt 0 view .LVU4253
 16434 0000 074A     		ldr	r2, .L1144
2068:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 16435              		.loc 1 2068 19 view .LVU4254
 16436 0002 084B     		ldr	r3, .L1144+4
2068:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 16437              		.loc 1 2068 16 view .LVU4255
 16438 0004 1268     		ldr	r2, [r2]
 16439 0006 1B68     		ldr	r3, [r3]
 16440 0008 1343     		orrs	r3, r2, r3
 16441 000a 06D0     		beq	.L1143
2073:src/xeq.c     **** }
 16442              		.loc 1 2073 3 is_stmt 1 view .LVU4256
 16443 000c A0F13900 		sub	r0, #57
 16444              	.LVL1203:
2073:src/xeq.c     **** }
 16445              		.loc 1 2073 3 is_stmt 0 view .LVU4257
 16446 0010 B0FA80F0 		clz	r0, r0
 16447 0014 4009     		lsrs	r0, r0, #5
 16448 0016 FFF7FEBF 		b	do_rtn
ARM GAS  /tmp/cc0UaEmF.s 			page 455


 16449              	.LVL1204:
 16450              	.L1143:
2070:src/xeq.c     **** 	}
 16451              		.loc 1 2070 3 is_stmt 1 view .LVU4258
 16452 001a FFF7FEBF 		b	clrretstk_pc
 16453              	.LVL1205:
 16454              	.L1145:
2070:src/xeq.c     **** 	}
 16455              		.loc 1 2070 3 is_stmt 0 view .LVU4259
 16456 001e 00BF     		.align	2
 16457              	.L1144:
 16458 0020 00000000 		.word	Running
 16459 0024 00000000 		.word	XromRunning
 16460              		.cfi_endproc
 16461              	.LFE151:
 16463              		.section	.text.op_popusr,"ax",%progbits
 16464              		.align	1
 16465              		.p2align 2,,3
 16466              		.global	op_popusr
 16467              		.syntax unified
 16468              		.thumb
 16469              		.thumb_func
 16470              		.fpu fpv4-sp-d16
 16472              	op_popusr:
 16473              	.LVL1206:
 16474              	.LFB155:
2114:src/xeq.c     **** 	UserLocalRegs = RetStk[RetStkPtr++]; // Previous local registers
 16475              		.loc 1 2114 31 is_stmt 1 view -0
 16476              		.cfi_startproc
 16477              		@ args = 0, pretend = 0, frame = 0
 16478              		@ frame_needed = 0, uses_anonymous_args = 0
 16479              		@ link register save eliminated.
2115:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16480              		.loc 1 2115 2 view .LVU4261
2115:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16481              		.loc 1 2115 25 is_stmt 0 view .LVU4262
 16482 0000 134A     		ldr	r2, .L1148
2115:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16483              		.loc 1 2115 24 view .LVU4263
 16484 0002 144B     		ldr	r3, .L1148+4
2115:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16485              		.loc 1 2115 25 view .LVU4264
 16486 0004 1268     		ldr	r2, [r2]
2115:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16487              		.loc 1 2115 24 view .LVU4265
 16488 0006 1B68     		ldr	r3, [r3]
2114:src/xeq.c     **** 	UserLocalRegs = RetStk[RetStkPtr++]; // Previous local registers
 16489              		.loc 1 2114 31 view .LVU4266
 16490 0008 70B4     		push	{r4, r5, r6}
 16491              		.cfi_def_cfa_offset 12
 16492              		.cfi_offset 4, -12
 16493              		.cfi_offset 5, -8
 16494              		.cfi_offset 6, -4
2115:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16495              		.loc 1 2115 25 view .LVU4267
 16496 000a B2F9E257 		ldrsh	r5, [r2, #2018]
2117:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
ARM GAS  /tmp/cc0UaEmF.s 			page 456


 16497              		.loc 1 2117 13 view .LVU4268
 16498 000e 124E     		ldr	r6, .L1148+8
2115:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16499              		.loc 1 2115 34 view .LVU4269
 16500 0010 A9B2     		uxth	r1, r5
 16501 0012 4C1C     		adds	r4, r1, #1
 16502 0014 24B2     		sxth	r4, r4
2116:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 16503              		.loc 1 2116 34 view .LVU4270
 16504 0016 881C     		adds	r0, r1, #2
 16505              	.LVL1207:
2115:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16506              		.loc 1 2115 34 view .LVU4271
 16507 0018 A2F8E247 		strh	r4, [r2, #2018]	@ movhi
2116:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 16508              		.loc 1 2116 34 view .LVU4272
 16509 001c 00B2     		sxth	r0, r0
2115:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16510              		.loc 1 2115 24 view .LVU4273
 16511 001e 33F81550 		ldrh	r5, [r3, r5, lsl #1]
2116:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 16512              		.loc 1 2116 34 view .LVU4274
 16513 0022 A2F8E207 		strh	r0, [r2, #2018]	@ movhi
2116:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 16514              		.loc 1 2116 24 view .LVU4275
 16515 0026 33F91440 		ldrsh	r4, [r3, r4, lsl #1]
2116:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 16516              		.loc 1 2116 12 view .LVU4276
 16517 002a A2F8DE47 		strh	r4, [r2, #2014]	@ movhi
2117:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 16518              		.loc 1 2117 34 view .LVU4277
 16519 002e 0331     		adds	r1, r1, #3
 16520 0030 A2F8E217 		strh	r1, [r2, #2018]	@ movhi
2118:src/xeq.c     **** }
 16521              		.loc 1 2118 20 view .LVU4278
 16522 0034 33F81420 		ldrh	r2, [r3, r4, lsl #1]
2115:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16523              		.loc 1 2115 16 view .LVU4279
 16524 0038 0849     		ldr	r1, .L1148+12
2117:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 16525              		.loc 1 2117 24 view .LVU4280
 16526 003a 33F81000 		ldrh	r0, [r3, r0, lsl #1]
 16527 003e 3060     		str	r0, [r6]
2118:src/xeq.c     **** }
 16528              		.loc 1 2118 20 view .LVU4281
 16529 0040 22F40052 		bic	r2, r2, #8192
2115:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16530              		.loc 1 2115 24 view .LVU4282
 16531 0044 0D60     		str	r5, [r1]
2116:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 16532              		.loc 1 2116 2 is_stmt 1 view .LVU4283
2117:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 16533              		.loc 1 2117 2 view .LVU4284
2118:src/xeq.c     **** }
 16534              		.loc 1 2118 2 view .LVU4285
2118:src/xeq.c     **** }
 16535              		.loc 1 2118 20 is_stmt 0 view .LVU4286
ARM GAS  /tmp/cc0UaEmF.s 			page 457


 16536 0046 23F81420 		strh	r2, [r3, r4, lsl #1]	@ movhi
2119:src/xeq.c     **** 
 16537              		.loc 1 2119 1 view .LVU4287
 16538 004a 70BC     		pop	{r4, r5, r6}
 16539              		.cfi_restore 6
 16540              		.cfi_restore 5
 16541              		.cfi_restore 4
 16542              		.cfi_def_cfa_offset 0
 16543 004c 7047     		bx	lr
 16544              	.L1149:
 16545 004e 00BF     		.align	2
 16546              	.L1148:
 16547 0050 00000000 		.word	main_ram
 16548 0054 00000000 		.word	RetStk
 16549 0058 00000000 		.word	XromUserPc
 16550 005c 00000000 		.word	UserLocalRegs
 16551              		.cfi_endproc
 16552              	.LFE155:
 16554              		.section	.text.findmultilbl,"ax",%progbits
 16555              		.align	1
 16556              		.p2align 2,,3
 16557              		.global	findmultilbl
 16558              		.syntax unified
 16559              		.thumb
 16560              		.thumb_func
 16561              		.fpu fpv4-sp-d16
 16563              	findmultilbl:
 16564              	.LVL1208:
 16565              	.LFB159:
2147:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 16566              		.loc 1 2147 54 is_stmt 1 view -0
 16567              		.cfi_startproc
 16568              		@ args = 0, pretend = 0, frame = 0
 16569              		@ frame_needed = 0, uses_anonymous_args = 0
2148:src/xeq.c     **** 	unsigned int lbl;
 16570              		.loc 1 2148 2 view .LVU4289
2147:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 16571              		.loc 1 2147 54 is_stmt 0 view .LVU4290
 16572 0000 38B5     		push	{r3, r4, r5, lr}
 16573              		.cfi_def_cfa_offset 16
 16574              		.cfi_offset 3, -16
 16575              		.cfi_offset 4, -12
 16576              		.cfi_offset 5, -8
 16577              		.cfi_offset 14, -4
2151:src/xeq.c     **** 	if (lbl == 0)
 16578              		.loc 1 2151 8 view .LVU4291
 16579 0002 0022     		movs	r2, #0
2148:src/xeq.c     **** 	unsigned int lbl;
 16580              		.loc 1 2148 15 view .LVU4292
 16581 0004 20F47064 		bic	r4, r0, #3840
 16582              	.LVL1209:
2149:src/xeq.c     **** 
 16583              		.loc 1 2149 2 is_stmt 1 view .LVU4293
2151:src/xeq.c     **** 	if (lbl == 0)
 16584              		.loc 1 2151 2 view .LVU4294
2147:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 16585              		.loc 1 2147 54 is_stmt 0 view .LVU4295
ARM GAS  /tmp/cc0UaEmF.s 			page 458


 16586 0008 0D46     		mov	r5, r1
2151:src/xeq.c     **** 	if (lbl == 0)
 16587              		.loc 1 2151 8 view .LVU4296
 16588 000a 1046     		mov	r0, r2
 16589              	.LVL1210:
2151:src/xeq.c     **** 	if (lbl == 0)
 16590              		.loc 1 2151 8 view .LVU4297
 16591 000c 2146     		mov	r1, r4
 16592              	.LVL1211:
2151:src/xeq.c     **** 	if (lbl == 0)
 16593              		.loc 1 2151 8 view .LVU4298
 16594 000e FFF7FEFF 		bl	find_opcode_from
 16595              	.LVL1212:
2152:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_LIBRARY), dest, 0);	// Library
 16596              		.loc 1 2152 2 is_stmt 1 view .LVU4299
2152:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_LIBRARY), dest, 0);	// Library
 16597              		.loc 1 2152 5 is_stmt 0 view .LVU4300
 16598 0012 00B1     		cbz	r0, .L1156
 16599              	.L1150:
2159:src/xeq.c     **** 
 16600              		.loc 1 2159 1 view .LVU4301
 16601 0014 38BD     		pop	{r3, r4, r5, pc}
 16602              	.LVL1213:
 16603              	.L1156:
2153:src/xeq.c     **** 	if (lbl == 0)
 16604              		.loc 1 2153 3 is_stmt 1 view .LVU4302
2153:src/xeq.c     **** 	if (lbl == 0)
 16605              		.loc 1 2153 9 is_stmt 0 view .LVU4303
 16606 0016 0246     		mov	r2, r0
 16607 0018 2146     		mov	r1, r4
 16608 001a 4FF48040 		mov	r0, #16384
 16609              	.LVL1214:
2153:src/xeq.c     **** 	if (lbl == 0)
 16610              		.loc 1 2153 9 view .LVU4304
 16611 001e FFF7FEFF 		bl	find_opcode_from
 16612              	.LVL1215:
2154:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_BACKUP), dest, 0);	// Backup
 16613              		.loc 1 2154 2 is_stmt 1 view .LVU4305
2154:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_BACKUP), dest, 0);	// Backup
 16614              		.loc 1 2154 5 is_stmt 0 view .LVU4306
 16615 0022 0028     		cmp	r0, #0
 16616 0024 F6D1     		bne	.L1150
2155:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
 16617              		.loc 1 2155 3 is_stmt 1 view .LVU4307
2155:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
 16618              		.loc 1 2155 9 is_stmt 0 view .LVU4308
 16619 0026 0246     		mov	r2, r0
 16620 0028 2146     		mov	r1, r4
 16621 002a 4FF40040 		mov	r0, #32768
 16622              	.LVL1216:
2155:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
 16623              		.loc 1 2155 9 view .LVU4309
 16624 002e FFF7FEFF 		bl	find_opcode_from
 16625              	.LVL1217:
2156:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 16626              		.loc 1 2156 2 is_stmt 1 view .LVU4310
2156:src/xeq.c     **** 		report_err(ERR_NO_LBL);
ARM GAS  /tmp/cc0UaEmF.s 			page 459


 16627              		.loc 1 2156 5 is_stmt 0 view .LVU4311
 16628 0032 0028     		cmp	r0, #0
 16629 0034 EED1     		bne	.L1150
2156:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 16630              		.loc 1 2156 15 discriminator 1 view .LVU4312
 16631 0036 EB07     		lsls	r3, r5, #31
 16632 0038 ECD5     		bpl	.L1150
 16633              	.LBB2858:
 16634              	.LBI2858:
2147:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 16635              		.loc 1 2147 14 is_stmt 1 view .LVU4313
 16636              	.LVL1218:
 16637              	.LBB2859:
2157:src/xeq.c     **** 	return lbl;
 16638              		.loc 1 2157 3 view .LVU4314
 16639              	.LBB2860:
 16640              	.LBI2860:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 16641              		.loc 1 537 5 view .LVU4315
 16642              	.LBB2861:
 538:src/xeq.c     **** 		Error = e;
 16643              		.loc 1 538 2 view .LVU4316
 538:src/xeq.c     **** 		Error = e;
 16644              		.loc 1 538 12 is_stmt 0 view .LVU4317
 16645 003a 034B     		ldr	r3, .L1157
 538:src/xeq.c     **** 		Error = e;
 16646              		.loc 1 538 5 view .LVU4318
 16647 003c 1A68     		ldr	r2, [r3]
 16648 003e 002A     		cmp	r2, #0
 16649 0040 E8D1     		bne	.L1150
 16650              	.LVL1219:
 16651              	.LBB2862:
 16652              	.LBI2862:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 16653              		.loc 1 537 5 is_stmt 1 view .LVU4319
 16654              	.LBB2863:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 16655              		.loc 1 539 3 view .LVU4320
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 16656              		.loc 1 539 9 is_stmt 0 view .LVU4321
 16657 0042 0622     		movs	r2, #6
 16658 0044 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 16659              		.loc 1 540 3 is_stmt 1 view .LVU4322
 16660              	.LVL1220:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 16661              		.loc 1 540 3 is_stmt 0 view .LVU4323
 16662              	.LBE2863:
 16663              	.LBE2862:
 16664              	.LBE2861:
 16665              	.LBE2860:
 16666              	.LBE2859:
 16667              	.LBE2858:
2158:src/xeq.c     **** }
 16668              		.loc 1 2158 2 is_stmt 1 view .LVU4324
2159:src/xeq.c     **** 
 16669              		.loc 1 2159 1 is_stmt 0 view .LVU4325
ARM GAS  /tmp/cc0UaEmF.s 			page 460


 16670 0046 38BD     		pop	{r3, r4, r5, pc}
 16671              	.LVL1221:
 16672              	.L1158:
2159:src/xeq.c     **** 
 16673              		.loc 1 2159 1 view .LVU4326
 16674              		.align	2
 16675              	.L1157:
 16676 0048 00000000 		.word	Error
 16677              		.cfi_endproc
 16678              	.LFE159:
 16680              		.section	.text.get_dispmode_digs,"ax",%progbits
 16681              		.align	1
 16682              		.p2align 2,,3
 16683              		.global	get_dispmode_digs
 16684              		.syntax unified
 16685              		.thumb
 16686              		.thumb_func
 16687              		.fpu fpv4-sp-d16
 16689              	get_dispmode_digs:
 16690              	.LVL1222:
 16691              	.LFB166:
2211:src/xeq.c     **** 	int dispmode = UState.dispmode;
 16692              		.loc 1 2211 1 is_stmt 1 view -0
 16693              		.cfi_startproc
 16694              		@ args = 0, pretend = 0, frame = 0
 16695              		@ frame_needed = 0, uses_anonymous_args = 0
 16696              		@ link register save eliminated.
2212:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 16697              		.loc 1 2212 2 view .LVU4328
2212:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 16698              		.loc 1 2212 17 is_stmt 0 view .LVU4329
 16699 0000 0A4B     		ldr	r3, .L1162
 16700 0002 1A68     		ldr	r2, [r3]
2213:src/xeq.c     **** 
 16701              		.loc 1 2213 23 view .LVU4330
 16702 0004 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
2212:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 16703              		.loc 1 2212 23 view .LVU4331
 16704 0008 92F8E627 		ldrb	r2, [r2, #2022]	@ zero_extendqisi2
2213:src/xeq.c     **** 
 16705              		.loc 1 2213 6 view .LVU4332
 16706 000c 03F00F03 		and	r3, r3, #15
2215:src/xeq.c     **** 		dispdigs -= 12;
 16707              		.loc 1 2215 5 view .LVU4333
 16708 0010 0B2B     		cmp	r3, #11
2211:src/xeq.c     **** 	int dispmode = UState.dispmode;
 16709              		.loc 1 2211 1 view .LVU4334
 16710 0012 0146     		mov	r1, r0
2212:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 16711              		.loc 1 2212 6 view .LVU4335
 16712 0014 4FEA9210 		lsr	r0, r2, #6
 16713              	.LVL1223:
2213:src/xeq.c     **** 
 16714              		.loc 1 2213 2 is_stmt 1 view .LVU4336
2215:src/xeq.c     **** 		dispdigs -= 12;
 16715              		.loc 1 2215 2 view .LVU4337
2215:src/xeq.c     **** 		dispdigs -= 12;
ARM GAS  /tmp/cc0UaEmF.s 			page 461


 16716              		.loc 1 2215 5 is_stmt 0 view .LVU4338
 16717 0018 06DD     		ble	.L1160
2216:src/xeq.c     **** 		dispmode += 4;
 16718              		.loc 1 2216 3 is_stmt 1 view .LVU4339
 16719              	.LVL1224:
2217:src/xeq.c     **** 		if (dispmode >= 6) {
 16720              		.loc 1 2217 3 view .LVU4340
2217:src/xeq.c     **** 		if (dispmode >= 6) {
 16721              		.loc 1 2217 12 is_stmt 0 view .LVU4341
 16722 001a 021D     		adds	r2, r0, #4
 16723              	.LVL1225:
2218:src/xeq.c     **** 			dispmode -= 2;
 16724              		.loc 1 2218 3 is_stmt 1 view .LVU4342
2218:src/xeq.c     **** 			dispmode -= 2;
 16725              		.loc 1 2218 6 is_stmt 0 view .LVU4343
 16726 001c 052A     		cmp	r2, #5
2216:src/xeq.c     **** 		dispmode += 4;
 16727              		.loc 1 2216 12 view .LVU4344
 16728 001e D9BF     		ittee	le
 16729 0020 0C3B     		suble	r3, r3, #12
 16730              	.LVL1226:
2216:src/xeq.c     **** 		dispmode += 4;
 16731              		.loc 1 2216 12 view .LVU4345
 16732 0022 1046     		movle	r0, r2
2219:src/xeq.c     **** 			dispdigs += 4;
 16733              		.loc 1 2219 4 is_stmt 1 view .LVU4346
2219:src/xeq.c     **** 			dispdigs += 4;
 16734              		.loc 1 2219 13 is_stmt 0 view .LVU4347
 16735 0024 0230     		addgt	r0, r0, #2
 16736              	.LVL1227:
2220:src/xeq.c     **** 		}
 16737              		.loc 1 2220 4 is_stmt 1 view .LVU4348
2220:src/xeq.c     **** 		}
 16738              		.loc 1 2220 13 is_stmt 0 view .LVU4349
 16739 0026 083B     		subgt	r3, r3, #8
 16740              	.LVL1228:
 16741              	.L1160:
2223:src/xeq.c     **** 	return dispmode;
 16742              		.loc 1 2223 2 is_stmt 1 view .LVU4350
2223:src/xeq.c     **** 	return dispmode;
 16743              		.loc 1 2223 9 is_stmt 0 view .LVU4351
 16744 0028 0B60     		str	r3, [r1]
2224:src/xeq.c     **** }
 16745              		.loc 1 2224 2 is_stmt 1 view .LVU4352
2225:src/xeq.c     **** 
 16746              		.loc 1 2225 1 is_stmt 0 view .LVU4353
 16747 002a 7047     		bx	lr
 16748              	.L1163:
 16749              		.align	2
 16750              	.L1162:
 16751 002c 00000000 		.word	main_ram
 16752              		.cfi_endproc
 16753              	.LFE166:
 16755              		.section	.text.set_dispmode_digs,"ax",%progbits
 16756              		.align	1
 16757              		.p2align 2,,3
 16758              		.global	set_dispmode_digs
ARM GAS  /tmp/cc0UaEmF.s 			page 462


 16759              		.syntax unified
 16760              		.thumb
 16761              		.thumb_func
 16762              		.fpu fpv4-sp-d16
 16764              	set_dispmode_digs:
 16765              	.LVL1229:
 16766              	.LFB167:
2228:src/xeq.c     **** 	if (dispmode >= 4) {
 16767              		.loc 1 2228 1 is_stmt 1 view -0
 16768              		.cfi_startproc
 16769              		@ args = 0, pretend = 0, frame = 0
 16770              		@ frame_needed = 0, uses_anonymous_args = 0
 16771              		@ link register save eliminated.
2229:src/xeq.c     **** 		dispmode -= 4;
 16772              		.loc 1 2229 2 view .LVU4355
2229:src/xeq.c     **** 		dispmode -= 4;
 16773              		.loc 1 2229 5 is_stmt 0 view .LVU4356
 16774 0000 0328     		cmp	r0, #3
 16775 0002 07DD     		ble	.L1165
2230:src/xeq.c     **** 		dispdigs += 12;
 16776              		.loc 1 2230 3 is_stmt 1 view .LVU4357
 16777              	.LVL1230:
2231:src/xeq.c     **** 		if (dispdigs >= 16) {
 16778              		.loc 1 2231 3 view .LVU4358
2231:src/xeq.c     **** 		if (dispdigs >= 16) {
 16779              		.loc 1 2231 12 is_stmt 0 view .LVU4359
 16780 0004 01F10C03 		add	r3, r1, #12
 16781              	.LVL1231:
2232:src/xeq.c     **** 			dispdigs -= 4;
 16782              		.loc 1 2232 3 is_stmt 1 view .LVU4360
2232:src/xeq.c     **** 			dispdigs -= 4;
 16783              		.loc 1 2232 6 is_stmt 0 view .LVU4361
 16784 0008 0F2B     		cmp	r3, #15
2230:src/xeq.c     **** 		dispdigs += 12;
 16785              		.loc 1 2230 12 view .LVU4362
 16786 000a D9BF     		ittee	le
 16787 000c 0438     		suble	r0, r0, #4
 16788              	.LVL1232:
2230:src/xeq.c     **** 		dispdigs += 12;
 16789              		.loc 1 2230 12 view .LVU4363
 16790 000e 1946     		movle	r1, r3
2233:src/xeq.c     **** 			dispmode += 2;
 16791              		.loc 1 2233 4 is_stmt 1 view .LVU4364
2233:src/xeq.c     **** 			dispmode += 2;
 16792              		.loc 1 2233 13 is_stmt 0 view .LVU4365
 16793 0010 0831     		addgt	r1, r1, #8
 16794              	.LVL1233:
2234:src/xeq.c     **** 		}
 16795              		.loc 1 2234 4 is_stmt 1 view .LVU4366
2234:src/xeq.c     **** 		}
 16796              		.loc 1 2234 13 is_stmt 0 view .LVU4367
 16797 0012 0238     		subgt	r0, r0, #2
 16798              	.LVL1234:
 16799              	.L1165:
2237:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 16800              		.loc 1 2237 2 is_stmt 1 view .LVU4368
 16801 0014 084B     		ldr	r3, .L1167
ARM GAS  /tmp/cc0UaEmF.s 			page 463


 16802 0016 1A68     		ldr	r2, [r3]
2238:src/xeq.c     **** }
 16803              		.loc 1 2238 2 view .LVU4369
2237:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 16804              		.loc 1 2237 18 is_stmt 0 view .LVU4370
 16805 0018 00F00300 		and	r0, r0, #3
 16806              	.LVL1235:
2237:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 16807              		.loc 1 2237 18 view .LVU4371
 16808 001c B2F8E637 		ldrh	r3, [r2, #2022]
 16809 0020 8001     		lsls	r0, r0, #6
 16810 0022 01F00F01 		and	r1, r1, #15
 16811              	.LVL1236:
2237:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 16812              		.loc 1 2237 18 view .LVU4372
 16813 0026 40EA0120 		orr	r0, r0, r1, lsl #8
 16814 002a 23F47C63 		bic	r3, r3, #4032
 16815 002e 1843     		orrs	r0, r0, r3
 16816 0030 A2F8E607 		strh	r0, [r2, #2022]	@ movhi
2239:src/xeq.c     **** #endif
 16817              		.loc 1 2239 1 view .LVU4373
 16818 0034 7047     		bx	lr
 16819              	.L1168:
 16820 0036 00BF     		.align	2
 16821              	.L1167:
 16822 0038 00000000 		.word	main_ram
 16823              		.cfi_endproc
 16824              	.LFE167:
 16826              		.section	.text.convC2F,"ax",%progbits
 16827              		.align	1
 16828              		.p2align 2,,3
 16829              		.global	convC2F
 16830              		.syntax unified
 16831              		.thumb
 16832              		.thumb_func
 16833              		.fpu fpv4-sp-d16
 16835              	convC2F:
 16836              	.LVL1237:
 16837              	.LFB169:
2291:src/xeq.c     **** 	decNumber s;
 16838              		.loc 1 2291 54 is_stmt 1 view -0
 16839              		.cfi_startproc
 16840              		@ args = 0, pretend = 0, frame = 40
 16841              		@ frame_needed = 0, uses_anonymous_args = 0
2292:src/xeq.c     **** 
 16842              		.loc 1 2292 2 view .LVU4375
2294:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
 16843              		.loc 1 2294 2 view .LVU4376
2291:src/xeq.c     **** 	decNumber s;
 16844              		.loc 1 2291 54 is_stmt 0 view .LVU4377
 16845 0000 10B5     		push	{r4, lr}
 16846              		.cfi_def_cfa_offset 8
 16847              		.cfi_offset 4, -8
 16848              		.cfi_offset 14, -4
 16849 0002 8AB0     		sub	sp, sp, #40
 16850              		.cfi_def_cfa_offset 48
2291:src/xeq.c     **** 	decNumber s;
ARM GAS  /tmp/cc0UaEmF.s 			page 464


 16851              		.loc 1 2291 54 view .LVU4378
 16852 0004 0446     		mov	r4, r0
2294:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
 16853              		.loc 1 2294 2 view .LVU4379
 16854 0006 054A     		ldr	r2, .L1171
 16855 0008 01A8     		add	r0, sp, #4
 16856              	.LVL1238:
2294:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
 16857              		.loc 1 2294 2 view .LVU4380
 16858 000a FFF7FEFF 		bl	dn_multiply
 16859              	.LVL1239:
2295:src/xeq.c     **** }
 16860              		.loc 1 2295 2 is_stmt 1 view .LVU4381
2295:src/xeq.c     **** }
 16861              		.loc 1 2295 9 is_stmt 0 view .LVU4382
 16862 000e 044A     		ldr	r2, .L1171+4
 16863 0010 2046     		mov	r0, r4
 16864 0012 01A9     		add	r1, sp, #4
 16865 0014 FFF7FEFF 		bl	dn_add
 16866              	.LVL1240:
2296:src/xeq.c     **** 
 16867              		.loc 1 2296 1 view .LVU4383
 16868 0018 0AB0     		add	sp, sp, #40
 16869              		.cfi_def_cfa_offset 8
 16870              		@ sp needed
 16871 001a 10BD     		pop	{r4, pc}
 16872              	.LVL1241:
 16873              	.L1172:
2296:src/xeq.c     **** 
 16874              		.loc 1 2296 1 view .LVU4384
 16875              		.align	2
 16876              	.L1171:
 16877 001c 00000000 		.word	const_9on5
 16878 0020 00000000 		.word	const_32
 16879              		.cfi_endproc
 16880              	.LFE169:
 16882              		.section	.text.convF2C,"ax",%progbits
 16883              		.align	1
 16884              		.p2align 2,,3
 16885              		.global	convF2C
 16886              		.syntax unified
 16887              		.thumb
 16888              		.thumb_func
 16889              		.fpu fpv4-sp-d16
 16891              	convF2C:
 16892              	.LVL1242:
 16893              	.LFB170:
2298:src/xeq.c     **** 	decNumber s;
 16894              		.loc 1 2298 54 is_stmt 1 view -0
 16895              		.cfi_startproc
 16896              		@ args = 0, pretend = 0, frame = 40
 16897              		@ frame_needed = 0, uses_anonymous_args = 0
2299:src/xeq.c     **** 
 16898              		.loc 1 2299 2 view .LVU4386
2301:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
 16899              		.loc 1 2301 2 view .LVU4387
2298:src/xeq.c     **** 	decNumber s;
ARM GAS  /tmp/cc0UaEmF.s 			page 465


 16900              		.loc 1 2298 54 is_stmt 0 view .LVU4388
 16901 0000 10B5     		push	{r4, lr}
 16902              		.cfi_def_cfa_offset 8
 16903              		.cfi_offset 4, -8
 16904              		.cfi_offset 14, -4
 16905 0002 8AB0     		sub	sp, sp, #40
 16906              		.cfi_def_cfa_offset 48
2298:src/xeq.c     **** 	decNumber s;
 16907              		.loc 1 2298 54 view .LVU4389
 16908 0004 0446     		mov	r4, r0
2301:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
 16909              		.loc 1 2301 2 view .LVU4390
 16910 0006 054A     		ldr	r2, .L1175
 16911 0008 01A8     		add	r0, sp, #4
 16912              	.LVL1243:
2301:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
 16913              		.loc 1 2301 2 view .LVU4391
 16914 000a FFF7FEFF 		bl	dn_subtract
 16915              	.LVL1244:
2302:src/xeq.c     **** }
 16916              		.loc 1 2302 2 is_stmt 1 view .LVU4392
2302:src/xeq.c     **** }
 16917              		.loc 1 2302 9 is_stmt 0 view .LVU4393
 16918 000e 044A     		ldr	r2, .L1175+4
 16919 0010 2046     		mov	r0, r4
 16920 0012 01A9     		add	r1, sp, #4
 16921 0014 FFF7FEFF 		bl	dn_divide
 16922              	.LVL1245:
2303:src/xeq.c     **** 
 16923              		.loc 1 2303 1 view .LVU4394
 16924 0018 0AB0     		add	sp, sp, #40
 16925              		.cfi_def_cfa_offset 8
 16926              		@ sp needed
 16927 001a 10BD     		pop	{r4, pc}
 16928              	.LVL1246:
 16929              	.L1176:
2303:src/xeq.c     **** 
 16930              		.loc 1 2303 1 view .LVU4395
 16931              		.align	2
 16932              	.L1175:
 16933 001c 00000000 		.word	const_32
 16934 0020 00000000 		.word	const_9on5
 16935              		.cfi_endproc
 16936              	.LFE170:
 16938              		.section	.text.convDB2AR,"ax",%progbits
 16939              		.align	1
 16940              		.p2align 2,,3
 16941              		.global	convDB2AR
 16942              		.syntax unified
 16943              		.thumb
 16944              		.thumb_func
 16945              		.fpu fpv4-sp-d16
 16947              	convDB2AR:
 16948              	.LVL1247:
 16949              	.LFB171:
2305:src/xeq.c     **** 	decNumber t;
 16950              		.loc 1 2305 56 is_stmt 1 view -0
ARM GAS  /tmp/cc0UaEmF.s 			page 466


 16951              		.cfi_startproc
 16952              		@ args = 0, pretend = 0, frame = 40
 16953              		@ frame_needed = 0, uses_anonymous_args = 0
2306:src/xeq.c     **** 	dn_multiply(&t, x, &const_0_05);
 16954              		.loc 1 2306 2 view .LVU4397
2307:src/xeq.c     **** 	return decNumberPow10(r, &t);
 16955              		.loc 1 2307 2 view .LVU4398
2305:src/xeq.c     **** 	decNumber t;
 16956              		.loc 1 2305 56 is_stmt 0 view .LVU4399
 16957 0000 10B5     		push	{r4, lr}
 16958              		.cfi_def_cfa_offset 8
 16959              		.cfi_offset 4, -8
 16960              		.cfi_offset 14, -4
 16961 0002 8AB0     		sub	sp, sp, #40
 16962              		.cfi_def_cfa_offset 48
2307:src/xeq.c     **** 	return decNumberPow10(r, &t);
 16963              		.loc 1 2307 2 view .LVU4400
 16964 0004 054A     		ldr	r2, .L1179
2305:src/xeq.c     **** 	decNumber t;
 16965              		.loc 1 2305 56 view .LVU4401
 16966 0006 0446     		mov	r4, r0
2307:src/xeq.c     **** 	return decNumberPow10(r, &t);
 16967              		.loc 1 2307 2 view .LVU4402
 16968 0008 01A8     		add	r0, sp, #4
 16969              	.LVL1248:
2307:src/xeq.c     **** 	return decNumberPow10(r, &t);
 16970              		.loc 1 2307 2 view .LVU4403
 16971 000a FFF7FEFF 		bl	dn_multiply
 16972              	.LVL1249:
2308:src/xeq.c     **** }
 16973              		.loc 1 2308 2 is_stmt 1 view .LVU4404
2308:src/xeq.c     **** }
 16974              		.loc 1 2308 9 is_stmt 0 view .LVU4405
 16975 000e 01A9     		add	r1, sp, #4
 16976 0010 2046     		mov	r0, r4
 16977 0012 FFF7FEFF 		bl	decNumberPow10
 16978              	.LVL1250:
2309:src/xeq.c     **** 
 16979              		.loc 1 2309 1 view .LVU4406
 16980 0016 0AB0     		add	sp, sp, #40
 16981              		.cfi_def_cfa_offset 8
 16982              		@ sp needed
 16983 0018 10BD     		pop	{r4, pc}
 16984              	.LVL1251:
 16985              	.L1180:
2309:src/xeq.c     **** 
 16986              		.loc 1 2309 1 view .LVU4407
 16987 001a 00BF     		.align	2
 16988              	.L1179:
 16989 001c 00000000 		.word	const_0_05
 16990              		.cfi_endproc
 16991              	.LFE171:
 16993              		.section	.text.convAR2DB,"ax",%progbits
 16994              		.align	1
 16995              		.p2align 2,,3
 16996              		.global	convAR2DB
 16997              		.syntax unified
ARM GAS  /tmp/cc0UaEmF.s 			page 467


 16998              		.thumb
 16999              		.thumb_func
 17000              		.fpu fpv4-sp-d16
 17002              	convAR2DB:
 17003              	.LVL1252:
 17004              	.LFB172:
2311:src/xeq.c     **** 	decNumber t;
 17005              		.loc 1 2311 56 is_stmt 1 view -0
 17006              		.cfi_startproc
 17007              		@ args = 0, pretend = 0, frame = 40
 17008              		@ frame_needed = 0, uses_anonymous_args = 0
2312:src/xeq.c     **** 	dn_log10(&t, x);
 17009              		.loc 1 2312 2 view .LVU4409
2313:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
 17010              		.loc 1 2313 2 view .LVU4410
2311:src/xeq.c     **** 	decNumber t;
 17011              		.loc 1 2311 56 is_stmt 0 view .LVU4411
 17012 0000 10B5     		push	{r4, lr}
 17013              		.cfi_def_cfa_offset 8
 17014              		.cfi_offset 4, -8
 17015              		.cfi_offset 14, -4
 17016 0002 8AB0     		sub	sp, sp, #40
 17017              		.cfi_def_cfa_offset 48
2311:src/xeq.c     **** 	decNumber t;
 17018              		.loc 1 2311 56 view .LVU4412
 17019 0004 0446     		mov	r4, r0
2313:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
 17020              		.loc 1 2313 2 view .LVU4413
 17021 0006 01A8     		add	r0, sp, #4
 17022              	.LVL1253:
2313:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
 17023              		.loc 1 2313 2 view .LVU4414
 17024 0008 FFF7FEFF 		bl	dn_log10
 17025              	.LVL1254:
2314:src/xeq.c     **** }
 17026              		.loc 1 2314 2 is_stmt 1 view .LVU4415
2314:src/xeq.c     **** }
 17027              		.loc 1 2314 9 is_stmt 0 view .LVU4416
 17028 000c 034A     		ldr	r2, .L1183
 17029 000e 2046     		mov	r0, r4
 17030 0010 01A9     		add	r1, sp, #4
 17031 0012 FFF7FEFF 		bl	dn_multiply
 17032              	.LVL1255:
2315:src/xeq.c     **** 
 17033              		.loc 1 2315 1 view .LVU4417
 17034 0016 0AB0     		add	sp, sp, #40
 17035              		.cfi_def_cfa_offset 8
 17036              		@ sp needed
 17037 0018 10BD     		pop	{r4, pc}
 17038              	.LVL1256:
 17039              	.L1184:
2315:src/xeq.c     **** 
 17040              		.loc 1 2315 1 view .LVU4418
 17041 001a 00BF     		.align	2
 17042              	.L1183:
 17043 001c 00000000 		.word	const_20
 17044              		.cfi_endproc
ARM GAS  /tmp/cc0UaEmF.s 			page 468


 17045              	.LFE172:
 17047              		.section	.text.convDB2PR,"ax",%progbits
 17048              		.align	1
 17049              		.p2align 2,,3
 17050              		.global	convDB2PR
 17051              		.syntax unified
 17052              		.thumb
 17053              		.thumb_func
 17054              		.fpu fpv4-sp-d16
 17056              	convDB2PR:
 17057              	.LVL1257:
 17058              	.LFB173:
2317:src/xeq.c     **** 	decNumber t;
 17059              		.loc 1 2317 56 is_stmt 1 view -0
 17060              		.cfi_startproc
 17061              		@ args = 0, pretend = 0, frame = 40
 17062              		@ frame_needed = 0, uses_anonymous_args = 0
2318:src/xeq.c     **** 	dn_mulpow10(&t, x, -1);
 17063              		.loc 1 2318 2 view .LVU4420
2319:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17064              		.loc 1 2319 2 view .LVU4421
2317:src/xeq.c     **** 	decNumber t;
 17065              		.loc 1 2317 56 is_stmt 0 view .LVU4422
 17066 0000 10B5     		push	{r4, lr}
 17067              		.cfi_def_cfa_offset 8
 17068              		.cfi_offset 4, -8
 17069              		.cfi_offset 14, -4
 17070 0002 8AB0     		sub	sp, sp, #40
 17071              		.cfi_def_cfa_offset 48
2317:src/xeq.c     **** 	decNumber t;
 17072              		.loc 1 2317 56 view .LVU4423
 17073 0004 0446     		mov	r4, r0
2319:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17074              		.loc 1 2319 2 view .LVU4424
 17075 0006 4FF0FF32 		mov	r2, #-1
 17076 000a 01A8     		add	r0, sp, #4
 17077              	.LVL1258:
2319:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17078              		.loc 1 2319 2 view .LVU4425
 17079 000c FFF7FEFF 		bl	dn_mulpow10
 17080              	.LVL1259:
2320:src/xeq.c     **** }
 17081              		.loc 1 2320 2 is_stmt 1 view .LVU4426
2320:src/xeq.c     **** }
 17082              		.loc 1 2320 9 is_stmt 0 view .LVU4427
 17083 0010 01A9     		add	r1, sp, #4
 17084 0012 2046     		mov	r0, r4
 17085 0014 FFF7FEFF 		bl	decNumberPow10
 17086              	.LVL1260:
2321:src/xeq.c     **** 
 17087              		.loc 1 2321 1 view .LVU4428
 17088 0018 0AB0     		add	sp, sp, #40
 17089              		.cfi_def_cfa_offset 8
 17090              		@ sp needed
 17091 001a 10BD     		pop	{r4, pc}
2321:src/xeq.c     **** 
 17092              		.loc 1 2321 1 view .LVU4429
ARM GAS  /tmp/cc0UaEmF.s 			page 469


 17093              		.cfi_endproc
 17094              	.LFE173:
 17096              		.section	.text.convPR2DB,"ax",%progbits
 17097              		.align	1
 17098              		.p2align 2,,3
 17099              		.global	convPR2DB
 17100              		.syntax unified
 17101              		.thumb
 17102              		.thumb_func
 17103              		.fpu fpv4-sp-d16
 17105              	convPR2DB:
 17106              	.LVL1261:
 17107              	.LFB174:
2323:src/xeq.c     **** 	decNumber t;
 17108              		.loc 1 2323 56 is_stmt 1 view -0
 17109              		.cfi_startproc
 17110              		@ args = 0, pretend = 0, frame = 40
 17111              		@ frame_needed = 0, uses_anonymous_args = 0
2324:src/xeq.c     **** 	dn_log10(&t, x);
 17112              		.loc 1 2324 2 view .LVU4431
2325:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
 17113              		.loc 1 2325 2 view .LVU4432
2323:src/xeq.c     **** 	decNumber t;
 17114              		.loc 1 2323 56 is_stmt 0 view .LVU4433
 17115 0000 10B5     		push	{r4, lr}
 17116              		.cfi_def_cfa_offset 8
 17117              		.cfi_offset 4, -8
 17118              		.cfi_offset 14, -4
 17119 0002 8AB0     		sub	sp, sp, #40
 17120              		.cfi_def_cfa_offset 48
2323:src/xeq.c     **** 	decNumber t;
 17121              		.loc 1 2323 56 view .LVU4434
 17122 0004 0446     		mov	r4, r0
2325:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
 17123              		.loc 1 2325 2 view .LVU4435
 17124 0006 01A8     		add	r0, sp, #4
 17125              	.LVL1262:
2325:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
 17126              		.loc 1 2325 2 view .LVU4436
 17127 0008 FFF7FEFF 		bl	dn_log10
 17128              	.LVL1263:
2326:src/xeq.c     **** }
 17129              		.loc 1 2326 2 is_stmt 1 view .LVU4437
2326:src/xeq.c     **** }
 17130              		.loc 1 2326 9 is_stmt 0 view .LVU4438
 17131 000c 2046     		mov	r0, r4
 17132 000e 01A9     		add	r1, sp, #4
 17133 0010 0122     		movs	r2, #1
 17134 0012 FFF7FEFF 		bl	dn_mulpow10
 17135              	.LVL1264:
2327:src/xeq.c     **** 
 17136              		.loc 1 2327 1 view .LVU4439
 17137 0016 0AB0     		add	sp, sp, #40
 17138              		.cfi_def_cfa_offset 8
 17139              		@ sp needed
 17140 0018 10BD     		pop	{r4, pc}
2327:src/xeq.c     **** 
ARM GAS  /tmp/cc0UaEmF.s 			page 470


 17141              		.loc 1 2327 1 view .LVU4440
 17142              		.cfi_endproc
 17143              	.LFE174:
 17145 001a 00BF     		.section	.text.do_conv,"ax",%progbits
 17146              		.align	1
 17147              		.p2align 2,,3
 17148              		.global	do_conv
 17149              		.syntax unified
 17150              		.thumb
 17151              		.thumb_func
 17152              		.fpu fpv4-sp-d16
 17154              	do_conv:
 17155              	.LVL1265:
 17156              	.LFB175:
2330:src/xeq.c     **** 	decNumber m;
 17157              		.loc 1 2330 66 is_stmt 1 view -0
 17158              		.cfi_startproc
 17159              		@ args = 0, pretend = 0, frame = 40
 17160              		@ frame_needed = 0, uses_anonymous_args = 0
2331:src/xeq.c     **** 	const unsigned int conv = arg / 2;
 17161              		.loc 1 2331 2 view .LVU4442
2332:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
 17162              		.loc 1 2332 2 view .LVU4443
2333:src/xeq.c     **** 
 17163              		.loc 1 2333 2 view .LVU4444
2335:src/xeq.c     **** 		decNumberCopy(r, x);
 17164              		.loc 1 2335 2 view .LVU4445
2330:src/xeq.c     **** 	decNumber m;
 17165              		.loc 1 2330 66 is_stmt 0 view .LVU4446
 17166 0000 70B5     		push	{r4, r5, r6, lr}
 17167              		.cfi_def_cfa_offset 16
 17168              		.cfi_offset 4, -16
 17169              		.cfi_offset 5, -12
 17170              		.cfi_offset 6, -8
 17171              		.cfi_offset 14, -4
2335:src/xeq.c     **** 		decNumberCopy(r, x);
 17172              		.loc 1 2335 5 view .LVU4447
 17173 0002 4D29     		cmp	r1, #77
2330:src/xeq.c     **** 	decNumber m;
 17174              		.loc 1 2330 66 view .LVU4448
 17175 0004 8AB0     		sub	sp, sp, #40
 17176              		.cfi_def_cfa_offset 56
2330:src/xeq.c     **** 	decNumber m;
 17177              		.loc 1 2330 66 view .LVU4449
 17178 0006 1546     		mov	r5, r2
2335:src/xeq.c     **** 		decNumberCopy(r, x);
 17179              		.loc 1 2335 5 view .LVU4450
 17180 0008 15D8     		bhi	.L1195
2340:src/xeq.c     **** 
 17181              		.loc 1 2340 2 is_stmt 1 view .LVU4451
 17182 000a 0D4B     		ldr	r3, .L1197
 17183 000c 0646     		mov	r6, r0
2332:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
 17184              		.loc 1 2332 21 is_stmt 0 view .LVU4452
 17185 000e 4808     		lsrs	r0, r1, #1
 17186              	.LVL1266:
2332:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
ARM GAS  /tmp/cc0UaEmF.s 			page 471


 17187              		.loc 1 2332 21 view .LVU4453
 17188 0010 0C46     		mov	r4, r1
2340:src/xeq.c     **** 
 17189              		.loc 1 2340 2 view .LVU4454
 17190 0012 03EB0010 		add	r0, r3, r0, lsl #4
 17191 0016 01A9     		add	r1, sp, #4
 17192              	.LVL1267:
2340:src/xeq.c     **** 
 17193              		.loc 1 2340 2 view .LVU4455
 17194 0018 FFF7FEFF 		bl	decimal64ToNumber
 17195              	.LVL1268:
2342:src/xeq.c     **** 		dn_divide(r, x, &m);
 17196              		.loc 1 2342 2 is_stmt 1 view .LVU4456
2342:src/xeq.c     **** 		dn_divide(r, x, &m);
 17197              		.loc 1 2342 5 is_stmt 0 view .LVU4457
 17198 001c E307     		lsls	r3, r4, #31
2343:src/xeq.c     **** 	else			// imperial to metric
 17199              		.loc 1 2343 3 view .LVU4458
 17200 001e 01AA     		add	r2, sp, #4
 17201 0020 2946     		mov	r1, r5
 17202 0022 3046     		mov	r0, r6
2342:src/xeq.c     **** 		dn_divide(r, x, &m);
 17203              		.loc 1 2342 5 view .LVU4459
 17204 0024 03D5     		bpl	.L1196
2345:src/xeq.c     **** }
 17205              		.loc 1 2345 3 is_stmt 1 view .LVU4460
 17206 0026 FFF7FEFF 		bl	dn_multiply
 17207              	.LVL1269:
2346:src/xeq.c     **** 
 17208              		.loc 1 2346 1 is_stmt 0 view .LVU4461
 17209 002a 0AB0     		add	sp, sp, #40
 17210              		.cfi_remember_state
 17211              		.cfi_def_cfa_offset 16
 17212              		@ sp needed
 17213 002c 70BD     		pop	{r4, r5, r6, pc}
 17214              	.LVL1270:
 17215              	.L1196:
 17216              		.cfi_restore_state
2343:src/xeq.c     **** 	else			// imperial to metric
 17217              		.loc 1 2343 3 is_stmt 1 view .LVU4462
 17218 002e FFF7FEFF 		bl	dn_divide
 17219              	.LVL1271:
2346:src/xeq.c     **** 
 17220              		.loc 1 2346 1 is_stmt 0 view .LVU4463
 17221 0032 0AB0     		add	sp, sp, #40
 17222              		.cfi_remember_state
 17223              		.cfi_def_cfa_offset 16
 17224              		@ sp needed
 17225 0034 70BD     		pop	{r4, r5, r6, pc}
 17226              	.LVL1272:
 17227              	.L1195:
 17228              		.cfi_restore_state
2336:src/xeq.c     **** 		return;
 17229              		.loc 1 2336 3 is_stmt 1 view .LVU4464
 17230 0036 1146     		mov	r1, r2
 17231              	.LVL1273:
2336:src/xeq.c     **** 		return;
ARM GAS  /tmp/cc0UaEmF.s 			page 472


 17232              		.loc 1 2336 3 is_stmt 0 view .LVU4465
 17233 0038 FFF7FEFF 		bl	decNumberCopy
 17234              	.LVL1274:
2337:src/xeq.c     **** 	}
 17235              		.loc 1 2337 3 is_stmt 1 view .LVU4466
2346:src/xeq.c     **** 
 17236              		.loc 1 2346 1 is_stmt 0 view .LVU4467
 17237 003c 0AB0     		add	sp, sp, #40
 17238              		.cfi_def_cfa_offset 16
 17239              		@ sp needed
 17240 003e 70BD     		pop	{r4, r5, r6, pc}
 17241              	.LVL1275:
 17242              	.L1198:
2346:src/xeq.c     **** 
 17243              		.loc 1 2346 1 view .LVU4468
 17244              		.align	2
 17245              	.L1197:
 17246 0040 00000000 		.word	cnsts_conv
 17247              		.cfi_endproc
 17248              	.LFE175:
 17250              		.section	.text.cmdconv,"ax",%progbits
 17251              		.align	1
 17252              		.p2align 2,,3
 17253              		.global	cmdconv
 17254              		.syntax unified
 17255              		.thumb
 17256              		.thumb_func
 17257              		.fpu fpv4-sp-d16
 17259              	cmdconv:
 17260              	.LVL1276:
 17261              	.LFB176:
2348:src/xeq.c     **** 	decNumber x, r;
 17262              		.loc 1 2348 46 is_stmt 1 view -0
 17263              		.cfi_startproc
 17264              		@ args = 0, pretend = 0, frame = 72
 17265              		@ frame_needed = 0, uses_anonymous_args = 0
2349:src/xeq.c     **** 
 17266              		.loc 1 2349 2 view .LVU4470
2351:src/xeq.c     **** 		return;
 17267              		.loc 1 2351 2 view .LVU4471
2351:src/xeq.c     **** 		return;
 17268              		.loc 1 2351 6 is_stmt 0 view .LVU4472
 17269 0000 0E4B     		ldr	r3, .L1207
 17270 0002 1B68     		ldr	r3, [r3]
 17271 0004 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
2351:src/xeq.c     **** 		return;
 17272              		.loc 1 2351 5 view .LVU4473
 17273 0008 DB07     		lsls	r3, r3, #31
 17274 000a 00D5     		bpl	.L1206
 17275 000c 7047     		bx	lr
 17276              	.L1206:
2348:src/xeq.c     **** 	decNumber x, r;
 17277              		.loc 1 2348 46 view .LVU4474
 17278 000e 10B5     		push	{r4, lr}
 17279              		.cfi_def_cfa_offset 8
 17280              		.cfi_offset 4, -8
 17281              		.cfi_offset 14, -4
ARM GAS  /tmp/cc0UaEmF.s 			page 473


 17282 0010 92B0     		sub	sp, sp, #72
 17283              		.cfi_def_cfa_offset 80
 17284 0012 0446     		mov	r4, r0
2354:src/xeq.c     **** 	do_conv(&r, arg, &x);
 17285              		.loc 1 2354 2 is_stmt 1 view .LVU4475
 17286              	.LVL1277:
 17287              	.LBB2864:
 17288              	.LBI2864:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 17289              		.loc 1 805 12 view .LVU4476
 17290              	.LBB2865:
 806:src/xeq.c     **** }
 17291              		.loc 1 806 2 view .LVU4477
 806:src/xeq.c     **** }
 17292              		.loc 1 806 9 is_stmt 0 view .LVU4478
 17293 0014 6421     		movs	r1, #100
 17294              	.LVL1278:
 806:src/xeq.c     **** }
 17295              		.loc 1 806 9 view .LVU4479
 17296 0016 6846     		mov	r0, sp
 17297              	.LVL1279:
 806:src/xeq.c     **** }
 17298              		.loc 1 806 9 view .LVU4480
 17299 0018 FFF7FEFF 		bl	getRegister
 17300              	.LVL1280:
 806:src/xeq.c     **** }
 17301              		.loc 1 806 9 view .LVU4481
 17302              	.LBE2865:
 17303              	.LBE2864:
2355:src/xeq.c     **** 	setlastX();
 17304              		.loc 1 2355 2 is_stmt 1 view .LVU4482
 17305 001c 6A46     		mov	r2, sp
 17306 001e 2146     		mov	r1, r4
 17307 0020 09A8     		add	r0, sp, #36
 17308 0022 FFF7FEFF 		bl	do_conv
 17309              	.LVL1281:
2356:src/xeq.c     **** 	setX(&r);
 17310              		.loc 1 2356 2 view .LVU4483
 17311              	.LBB2866:
 17312              	.LBI2866:
 773:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 17313              		.loc 1 773 6 view .LVU4484
 17314              	.LBB2867:
 774:src/xeq.c     **** }
 17315              		.loc 1 774 2 view .LVU4485
 17316 0026 6421     		movs	r1, #100
 17317 0028 6C20     		movs	r0, #108
 17318 002a FFF7FEFF 		bl	copyreg_n
 17319              	.LVL1282:
 17320              	.LBE2867:
 17321              	.LBE2866:
2357:src/xeq.c     **** }
 17322              		.loc 1 2357 2 view .LVU4486
 17323              	.LBB2868:
 17324              	.LBI2868:
 809:src/xeq.c     **** 	setRegister(regX_idx, x);
 17325              		.loc 1 809 6 view .LVU4487
ARM GAS  /tmp/cc0UaEmF.s 			page 474


 17326              	.LBB2869:
 810:src/xeq.c     **** }
 17327              		.loc 1 810 2 view .LVU4488
 17328 002e 09A9     		add	r1, sp, #36
 17329              	.LVL1283:
 810:src/xeq.c     **** }
 17330              		.loc 1 810 2 is_stmt 0 view .LVU4489
 17331 0030 6420     		movs	r0, #100
 17332 0032 FFF7FEFF 		bl	setRegister
 17333              	.LVL1284:
 810:src/xeq.c     **** }
 17334              		.loc 1 810 2 view .LVU4490
 17335              	.LBE2869:
 17336              	.LBE2868:
2358:src/xeq.c     **** 
 17337              		.loc 1 2358 1 view .LVU4491
 17338 0036 12B0     		add	sp, sp, #72
 17339              		.cfi_def_cfa_offset 8
 17340              		@ sp needed
 17341 0038 10BD     		pop	{r4, pc}
 17342              	.LVL1285:
 17343              	.L1208:
2358:src/xeq.c     **** 
 17344              		.loc 1 2358 1 view .LVU4492
 17345 003a 00BF     		.align	2
 17346              	.L1207:
 17347 003c 00000000 		.word	main_ram
 17348              		.cfi_endproc
 17349              	.LFE176:
 17351              		.section	.text.fin_tst,"ax",%progbits
 17352              		.align	1
 17353              		.p2align 2,,3
 17354              		.global	fin_tst
 17355              		.syntax unified
 17356              		.thumb
 17357              		.thumb_func
 17358              		.fpu fpv4-sp-d16
 17360              	fin_tst:
 17361              	.LVL1286:
 17362              	.LFB177:
2363:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 17363              		.loc 1 2363 27 is_stmt 1 view -0
 17364              		.cfi_startproc
 17365              		@ args = 0, pretend = 0, frame = 0
 17366              		@ frame_needed = 0, uses_anonymous_args = 0
 17367              		@ link register save eliminated.
2364:src/xeq.c     **** 	if (Running || XromRunning) {
 17368              		.loc 1 2364 2 view .LVU4494
2364:src/xeq.c     **** 	if (Running || XromRunning) {
 17369              		.loc 1 2364 31 is_stmt 0 view .LVU4495
 17370 0000 30B1     		cbz	r0, .L1216
 17371              	.LVL1287:
2365:src/xeq.c     **** 		if (! a && incpc())
 17372              		.loc 1 2365 2 is_stmt 1 view .LVU4496
2365:src/xeq.c     **** 		if (! a && incpc())
 17373              		.loc 1 2365 14 is_stmt 0 view .LVU4497
 17374 0002 0A4A     		ldr	r2, .L1218
ARM GAS  /tmp/cc0UaEmF.s 			page 475


2365:src/xeq.c     **** 		if (! a && incpc())
 17375              		.loc 1 2365 6 view .LVU4498
 17376 0004 0A4B     		ldr	r3, .L1218+4
2365:src/xeq.c     **** 		if (! a && incpc())
 17377              		.loc 1 2365 14 view .LVU4499
 17378 0006 1268     		ldr	r2, [r2]
 17379 0008 1B68     		ldr	r3, [r3]
 17380 000a 1343     		orrs	r3, r2, r3
 17381 000c 0CD0     		beq	.L1217
2377:src/xeq.c     **** 
 17382              		.loc 1 2377 1 view .LVU4500
 17383 000e 7047     		bx	lr
 17384              	.LVL1288:
 17385              	.L1216:
2365:src/xeq.c     **** 		if (! a && incpc())
 17386              		.loc 1 2365 2 is_stmt 1 view .LVU4501
2365:src/xeq.c     **** 		if (! a && incpc())
 17387              		.loc 1 2365 14 is_stmt 0 view .LVU4502
 17388 0010 064A     		ldr	r2, .L1218
2365:src/xeq.c     **** 		if (! a && incpc())
 17389              		.loc 1 2365 6 view .LVU4503
 17390 0012 074B     		ldr	r3, .L1218+4
2365:src/xeq.c     **** 		if (! a && incpc())
 17391              		.loc 1 2365 14 view .LVU4504
 17392 0014 1268     		ldr	r2, [r2]
 17393 0016 1B68     		ldr	r3, [r3]
 17394 0018 1343     		orrs	r3, r2, r3
 17395 001a 03D1     		bne	.L1212
2364:src/xeq.c     **** 	if (Running || XromRunning) {
 17396              		.loc 1 2364 31 view .LVU4505
 17397 001c 054B     		ldr	r3, .L1218+8
 17398              	.LVL1289:
 17399              	.L1213:
2370:src/xeq.c     **** #ifdef INFRARED
 17400              		.loc 1 2370 3 is_stmt 1 view .LVU4506
2370:src/xeq.c     **** #ifdef INFRARED
 17401              		.loc 1 2370 11 is_stmt 0 view .LVU4507
 17402 001e 064A     		ldr	r2, .L1218+12
 17403 0020 1360     		str	r3, [r2]
2377:src/xeq.c     **** 
 17404              		.loc 1 2377 1 view .LVU4508
 17405 0022 7047     		bx	lr
 17406              	.LVL1290:
 17407              	.L1212:
2377:src/xeq.c     **** 
 17408              		.loc 1 2377 1 view .LVU4509
 17409 0024 FFF7FEBF 		b	fin_tst.part.0
 17410              	.LVL1291:
 17411              	.L1217:
2364:src/xeq.c     **** 	if (Running || XromRunning) {
 17412              		.loc 1 2364 31 view .LVU4510
 17413 0028 044B     		ldr	r3, .L1218+16
 17414 002a F8E7     		b	.L1213
 17415              	.L1219:
 17416              		.align	2
 17417              	.L1218:
 17418 002c 00000000 		.word	XromRunning
ARM GAS  /tmp/cc0UaEmF.s 			page 476


 17419 0030 00000000 		.word	Running
 17420 0034 00000000 		.word	.LC3
 17421 0038 00000000 		.word	DispMsg
 17422 003c 00000000 		.word	.LC2
 17423              		.cfi_endproc
 17424              	.LFE177:
 17426              		.section	.text.check_mode,"ax",%progbits
 17427              		.align	1
 17428              		.p2align 2,,3
 17429              		.global	check_mode
 17430              		.syntax unified
 17431              		.thumb
 17432              		.thumb_func
 17433              		.fpu fpv4-sp-d16
 17435              	check_mode:
 17436              	.LVL1292:
 17437              	.LFB139:
1904:src/xeq.c     **** 	const int intmode = is_intmode() ? 1 : 0;
 17438              		.loc 1 1904 32 is_stmt 1 view -0
 17439              		.cfi_startproc
 17440              		@ args = 0, pretend = 0, frame = 0
 17441              		@ frame_needed = 0, uses_anonymous_args = 0
 17442              		@ link register save eliminated.
1905:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
 17443              		.loc 1 1905 2 view .LVU4512
1906:src/xeq.c     **** 
 17444              		.loc 1 1906 2 view .LVU4513
1905:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
 17445              		.loc 1 1905 35 is_stmt 0 view .LVU4514
 17446 0000 084B     		ldr	r3, .L1221
 17447              	.LVL1293:
1905:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
 17448              		.loc 1 1905 35 view .LVU4515
 17449 0002 1B68     		ldr	r3, [r3]
 17450              	.LVL1294:
1908:src/xeq.c     **** }
 17451              		.loc 1 1908 2 view .LVU4516
 17452 0004 A0F19F00 		sub	r0, #159
 17453              	.LVL1295:
1908:src/xeq.c     **** }
 17454              		.loc 1 1908 2 view .LVU4517
 17455 0008 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 17456              	.LVL1296:
1908:src/xeq.c     **** }
 17457              		.loc 1 1908 2 is_stmt 1 view .LVU4518
 17458 000c B0FA80F0 		clz	r0, r0
 17459 0010 4009     		lsrs	r0, r0, #5
 17460 0012 03F00103 		and	r3, r3, #1
 17461 0016 C01A     		subs	r0, r0, r3
 17462 0018 B0FA80F0 		clz	r0, r0
 17463 001c 4009     		lsrs	r0, r0, #5
 17464 001e FFF7FEBF 		b	fin_tst
 17465              	.LVL1297:
 17466              	.L1222:
1908:src/xeq.c     **** }
 17467              		.loc 1 1908 2 is_stmt 0 view .LVU4519
 17468 0022 00BF     		.align	2
ARM GAS  /tmp/cc0UaEmF.s 			page 477


 17469              	.L1221:
 17470 0024 00000000 		.word	main_ram
 17471              		.cfi_endproc
 17472              	.LFE139:
 17474              		.section	.text.check_dblmode,"ax",%progbits
 17475              		.align	1
 17476              		.p2align 2,,3
 17477              		.global	check_dblmode
 17478              		.syntax unified
 17479              		.thumb
 17480              		.thumb_func
 17481              		.fpu fpv4-sp-d16
 17483              	check_dblmode:
 17484              	.LVL1298:
 17485              	.LFB140:
1914:src/xeq.c     **** 	fin_tst(is_dblmode());
 17486              		.loc 1 1914 35 is_stmt 1 view -0
 17487              		.cfi_startproc
 17488              		@ args = 0, pretend = 0, frame = 0
 17489              		@ frame_needed = 0, uses_anonymous_args = 0
 17490              		@ link register save eliminated.
1915:src/xeq.c     **** }
 17491              		.loc 1 1915 2 view .LVU4521
 17492              	.LBB2870:
 17493              	.LBI2870:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 17494              		.loc 1 932 5 view .LVU4522
 17495              	.LBB2871:
 933:src/xeq.c     **** }
 17496              		.loc 1 933 2 view .LVU4523
 933:src/xeq.c     **** }
 17497              		.loc 1 933 24 is_stmt 0 view .LVU4524
 17498 0000 064B     		ldr	r3, .L1224
 17499 0002 1B68     		ldr	r3, [r3]
 17500 0004 B3F8E837 		ldrh	r3, [r3, #2024]
 17501 0008 44F20100 		movw	r0, #16385
 17502              	.LVL1299:
 933:src/xeq.c     **** }
 17503              		.loc 1 933 24 view .LVU4525
 17504 000c 1840     		ands	r0, r0, r3
 17505              	.LBE2871:
 17506              	.LBE2870:
1915:src/xeq.c     **** }
 17507              		.loc 1 1915 2 view .LVU4526
 17508 000e A0F58040 		sub	r0, r0, #16384
 17509 0012 B0FA80F0 		clz	r0, r0
 17510 0016 4009     		lsrs	r0, r0, #5
 17511 0018 FFF7FEBF 		b	fin_tst
 17512              	.LVL1300:
 17513              	.L1225:
 17514              		.align	2
 17515              	.L1224:
 17516 001c 00000000 		.word	main_ram
 17517              		.cfi_endproc
 17518              	.LFE140:
 17520              		.section	.text.isTop,"ax",%progbits
 17521              		.align	1
ARM GAS  /tmp/cc0UaEmF.s 			page 478


 17522              		.p2align 2,,3
 17523              		.global	isTop
 17524              		.syntax unified
 17525              		.thumb
 17526              		.thumb_func
 17527              		.fpu fpv4-sp-d16
 17529              	isTop:
 17530              	.LVL1301:
 17531              	.LFB156:
2122:src/xeq.c     **** 	int top = 0;
 17532              		.loc 1 2122 27 is_stmt 1 view -0
 17533              		.cfi_startproc
 17534              		@ args = 0, pretend = 0, frame = 0
 17535              		@ frame_needed = 0, uses_anonymous_args = 0
 17536              		@ link register save eliminated.
2123:src/xeq.c     **** 
 17537              		.loc 1 2123 2 view .LVU4528
2125:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
 17538              		.loc 1 2125 2 view .LVU4529
2125:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
 17539              		.loc 1 2125 6 is_stmt 0 view .LVU4530
 17540 0000 0D4B     		ldr	r3, .L1234
 17541 0002 1868     		ldr	r0, [r3]
 17542              	.LVL1302:
2125:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
 17543              		.loc 1 2125 5 view .LVU4531
 17544 0004 68B1     		cbz	r0, .L1227
2126:src/xeq.c     **** 	}
 17545              		.loc 1 2126 3 is_stmt 1 view .LVU4532
2126:src/xeq.c     **** 	}
 17546              		.loc 1 2126 9 is_stmt 0 view .LVU4533
 17547 0006 0D4B     		ldr	r3, .L1234+4
 17548 0008 1B68     		ldr	r3, [r3]
 17549              	.LBB2872:
 17550              	.LBB2873:
 215:src/xeq.c     **** }
 17551              		.loc 1 215 9 view .LVU4534
 17552 000a B3F9DE27 		ldrsh	r2, [r3, #2014]
 17553              	.LBE2873:
 17554              	.LBE2872:
2126:src/xeq.c     **** 	}
 17555              		.loc 1 2126 9 view .LVU4535
 17556 000e B3F9E207 		ldrsh	r0, [r3, #2018]
 17557              	.LBB2876:
 17558              	.LBI2872:
 214:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 17559              		.loc 1 214 5 is_stmt 1 view .LVU4536
 17560              	.LBB2874:
 215:src/xeq.c     **** }
 17561              		.loc 1 215 2 view .LVU4537
 215:src/xeq.c     **** }
 17562              		.loc 1 215 57 is_stmt 0 view .LVU4538
 17563 0012 002A     		cmp	r2, #0
 17564 0014 07DB     		blt	.L1233
 17565 0016 4FF0FF33 		mov	r3, #-1
 17566              	.L1228:
 17567              	.LBE2874:
ARM GAS  /tmp/cc0UaEmF.s 			page 479


 17568              	.LBE2876:
2126:src/xeq.c     **** 	}
 17569              		.loc 1 2126 19 view .LVU4539
 17570 001a 9842     		cmp	r0, r3
 17571 001c B4BF     		ite	lt
 17572 001e 0020     		movlt	r0, #0
 17573 0020 0120     		movge	r0, #1
 17574              	.LVL1303:
 17575              	.L1227:
2128:src/xeq.c     **** }
 17576              		.loc 1 2128 2 is_stmt 1 view .LVU4540
 17577 0022 FFF7FEBF 		b	fin_tst
 17578              	.LVL1304:
 17579              	.L1233:
 17580              	.LBB2877:
 17581              	.LBB2875:
 215:src/xeq.c     **** }
 17582              		.loc 1 215 25 is_stmt 0 view .LVU4541
 17583 0026 064B     		ldr	r3, .L1234+8
 17584 0028 1B68     		ldr	r3, [r3]
 215:src/xeq.c     **** }
 17585              		.loc 1 215 57 view .LVU4542
 17586 002a 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 17587 002e C3F30B03 		ubfx	r3, r3, #0, #12
 17588 0032 DB43     		mvns	r3, r3
 17589 0034 F1E7     		b	.L1228
 17590              	.L1235:
 17591 0036 00BF     		.align	2
 17592              	.L1234:
 17593 0038 00000000 		.word	Running
 17594 003c 00000000 		.word	main_ram
 17595 0040 00000000 		.word	RetStk
 17596              	.LBE2875:
 17597              	.LBE2877:
 17598              		.cfi_endproc
 17599              	.LFE156:
 17601              		.section	.text.cmdlblp,"ax",%progbits
 17602              		.align	1
 17603              		.p2align 2,,3
 17604              		.global	cmdlblp
 17605              		.syntax unified
 17606              		.thumb
 17607              		.thumb_func
 17608              		.fpu fpv4-sp-d16
 17610              	cmdlblp:
 17611              	.LVL1305:
 17612              	.LFB157:
2133:src/xeq.c     **** 	fin_tst(find_label_from(state_pc(), arg, FIND_OP_ENDS) != 0);
 17613              		.loc 1 2133 46 is_stmt 1 view -0
 17614              		.cfi_startproc
 17615              		@ args = 0, pretend = 0, frame = 0
 17616              		@ frame_needed = 0, uses_anonymous_args = 0
2134:src/xeq.c     **** }
 17617              		.loc 1 2134 2 view .LVU4544
2133:src/xeq.c     **** 	fin_tst(find_label_from(state_pc(), arg, FIND_OP_ENDS) != 0);
 17618              		.loc 1 2133 46 is_stmt 0 view .LVU4545
 17619 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/cc0UaEmF.s 			page 480


 17620              		.cfi_def_cfa_offset 8
 17621              		.cfi_offset 3, -8
 17622              		.cfi_offset 14, -4
2134:src/xeq.c     **** }
 17623              		.loc 1 2134 26 view .LVU4546
 17624 0002 084B     		ldr	r3, .L1238
 17625              	.LVL1306:
2134:src/xeq.c     **** }
 17626              		.loc 1 2134 26 view .LVU4547
 17627 0004 1B68     		ldr	r3, [r3]
 17628              	.LVL1307:
 17629              	.LBB2878:
 17630              	.LBI2878:
2008:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 17631              		.loc 1 2008 14 is_stmt 1 view .LVU4548
 17632              	.LBB2879:
2009:src/xeq.c     **** }
 17633              		.loc 1 2009 2 view .LVU4549
2009:src/xeq.c     **** }
 17634              		.loc 1 2009 9 is_stmt 0 view .LVU4550
 17635 0006 40F4C441 		orr	r1, r0, #25088
 17636              	.LVL1308:
2009:src/xeq.c     **** }
 17637              		.loc 1 2009 9 view .LVU4551
 17638 000a 0222     		movs	r2, #2
 17639 000c B3F8E007 		ldrh	r0, [r3, #2016]
 17640              	.LVL1309:
2009:src/xeq.c     **** }
 17641              		.loc 1 2009 9 view .LVU4552
 17642 0010 FFF7FEFF 		bl	find_opcode_from
 17643              	.LVL1310:
2009:src/xeq.c     **** }
 17644              		.loc 1 2009 9 view .LVU4553
 17645              	.LBE2879:
 17646              	.LBE2878:
2134:src/xeq.c     **** }
 17647              		.loc 1 2134 2 view .LVU4554
 17648 0014 0038     		subs	r0, r0, #0
2135:src/xeq.c     **** 
 17649              		.loc 1 2135 1 view .LVU4555
 17650 0016 BDE80840 		pop	{r3, lr}
 17651              		.cfi_restore 14
 17652              		.cfi_restore 3
 17653              		.cfi_def_cfa_offset 0
2134:src/xeq.c     **** }
 17654              		.loc 1 2134 2 view .LVU4556
 17655 001a 18BF     		it	ne
 17656 001c 0120     		movne	r0, #1
 17657 001e FFF7FEBF 		b	fin_tst
 17658              	.LVL1311:
 17659              	.L1239:
 17660 0022 00BF     		.align	2
 17661              	.L1238:
 17662 0024 00000000 		.word	main_ram
 17663              		.cfi_endproc
 17664              	.LFE157:
 17666              		.section	.text.cmdmultilblp,"ax",%progbits
ARM GAS  /tmp/cc0UaEmF.s 			page 481


 17667              		.align	1
 17668              		.p2align 2,,3
 17669              		.global	cmdmultilblp
 17670              		.syntax unified
 17671              		.thumb
 17672              		.thumb_func
 17673              		.fpu fpv4-sp-d16
 17675              	cmdmultilblp:
 17676              	.LVL1312:
 17677              	.LFB160:
2162:src/xeq.c     **** 	fin_tst(findmultilbl(o, 0) != 0);
 17678              		.loc 1 2162 55 is_stmt 1 view -0
 17679              		.cfi_startproc
 17680              		@ args = 0, pretend = 0, frame = 0
 17681              		@ frame_needed = 0, uses_anonymous_args = 0
2163:src/xeq.c     **** }
 17682              		.loc 1 2163 2 view .LVU4558
2162:src/xeq.c     **** 	fin_tst(findmultilbl(o, 0) != 0);
 17683              		.loc 1 2162 55 is_stmt 0 view .LVU4559
 17684 0000 08B5     		push	{r3, lr}
 17685              		.cfi_def_cfa_offset 8
 17686              		.cfi_offset 3, -8
 17687              		.cfi_offset 14, -4
2163:src/xeq.c     **** }
 17688              		.loc 1 2163 10 view .LVU4560
 17689 0002 0021     		movs	r1, #0
 17690              	.LVL1313:
2163:src/xeq.c     **** }
 17691              		.loc 1 2163 10 view .LVU4561
 17692 0004 FFF7FEFF 		bl	findmultilbl
 17693              	.LVL1314:
2163:src/xeq.c     **** }
 17694              		.loc 1 2163 2 view .LVU4562
 17695 0008 0038     		subs	r0, r0, #0
2164:src/xeq.c     **** 
 17696              		.loc 1 2164 1 view .LVU4563
 17697 000a BDE80840 		pop	{r3, lr}
 17698              		.cfi_restore 14
 17699              		.cfi_restore 3
 17700              		.cfi_def_cfa_offset 0
2163:src/xeq.c     **** }
 17701              		.loc 1 2163 2 view .LVU4564
 17702 000e 18BF     		it	ne
 17703 0010 0120     		movne	r0, #1
 17704 0012 FFF7FEBF 		b	fin_tst
 17705              	.LVL1315:
 17706              		.cfi_endproc
 17707              	.LFE160:
 17709 0016 00BF     		.section	.text.cmdkeyp,"ax",%progbits
 17710              		.align	1
 17711              		.p2align 2,,3
 17712              		.global	cmdkeyp
 17713              		.syntax unified
 17714              		.thumb
 17715              		.thumb_func
 17716              		.fpu fpv4-sp-d16
 17718              	cmdkeyp:
ARM GAS  /tmp/cc0UaEmF.s 			page 482


 17719              	.LVL1316:
 17720              	.LFB135:
1840:src/xeq.c     **** 	int cond = LastKey == 0;
 17721              		.loc 1 1840 46 is_stmt 1 view -0
 17722              		.cfi_startproc
 17723              		@ args = 0, pretend = 0, frame = 0
 17724              		@ frame_needed = 0, uses_anonymous_args = 0
1841:src/xeq.c     **** 	if (!cond) {
 17725              		.loc 1 1841 2 view .LVU4566
1840:src/xeq.c     **** 	int cond = LastKey == 0;
 17726              		.loc 1 1840 46 is_stmt 0 view .LVU4567
 17727 0000 70B5     		push	{r4, r5, r6, lr}
 17728              		.cfi_def_cfa_offset 16
 17729              		.cfi_offset 4, -16
 17730              		.cfi_offset 5, -12
 17731              		.cfi_offset 6, -8
 17732              		.cfi_offset 14, -4
1841:src/xeq.c     **** 	if (!cond) {
 17733              		.loc 1 1841 13 view .LVU4568
 17734 0002 104B     		ldr	r3, .L1249
 17735 0004 93F91320 		ldrsb	r2, [r3, #19]
1841:src/xeq.c     **** 	if (!cond) {
 17736              		.loc 1 1841 21 view .LVU4569
 17737 0008 002A     		cmp	r2, #0
1840:src/xeq.c     **** 	int cond = LastKey == 0;
 17738              		.loc 1 1840 46 view .LVU4570
 17739 000a 82B0     		sub	sp, sp, #8
 17740              		.cfi_def_cfa_offset 24
1841:src/xeq.c     **** 	if (!cond) {
 17741              		.loc 1 1841 21 view .LVU4571
 17742 000c 0CBF     		ite	eq
 17743 000e 0125     		moveq	r5, #1
 17744 0010 0025     		movne	r5, #0
 17745              	.LVL1317:
1842:src/xeq.c     **** 		int k = LastKey - 1;
 17746              		.loc 1 1842 2 is_stmt 1 view .LVU4572
1842:src/xeq.c     **** 		int k = LastKey - 1;
 17747              		.loc 1 1842 5 is_stmt 0 view .LVU4573
 17748 0012 05D1     		bne	.L1248
1847:src/xeq.c     **** }
 17749              		.loc 1 1847 2 is_stmt 1 view .LVU4574
 17750 0014 2846     		mov	r0, r5
 17751              	.LVL1318:
1848:src/xeq.c     **** 
 17752              		.loc 1 1848 1 is_stmt 0 view .LVU4575
 17753 0016 02B0     		add	sp, sp, #8
 17754              		.cfi_remember_state
 17755              		.cfi_def_cfa_offset 16
 17756              		@ sp needed
 17757 0018 BDE87040 		pop	{r4, r5, r6, lr}
 17758              		.cfi_restore 14
 17759              		.cfi_restore 6
 17760              		.cfi_restore 5
 17761              		.cfi_restore 4
 17762              		.cfi_def_cfa_offset 0
 17763              	.LVL1319:
1847:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 483


 17764              		.loc 1 1847 2 view .LVU4576
 17765 001c FFF7FEBF 		b	fin_tst
 17766              	.LVL1320:
 17767              	.L1248:
 17768              		.cfi_restore_state
 17769              	.LBB2880:
1843:src/xeq.c     **** 		LastKey = 0;
 17770              		.loc 1 1843 3 is_stmt 1 view .LVU4577
1844:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
 17771              		.loc 1 1844 3 view .LVU4578
 17772 0020 0446     		mov	r4, r0
1844:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
 17773              		.loc 1 1844 11 is_stmt 0 view .LVU4579
 17774 0022 0026     		movs	r6, #0
1845:src/xeq.c     **** 	}
 17775              		.loc 1 1845 26 view .LVU4580
 17776 0024 501E     		subs	r0, r2, #1
 17777              	.LVL1321:
1844:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
 17778              		.loc 1 1844 11 view .LVU4581
 17779 0026 DE74     		strb	r6, [r3, #19]
1845:src/xeq.c     **** 	}
 17780              		.loc 1 1845 3 is_stmt 1 view .LVU4582
1845:src/xeq.c     **** 	}
 17781              		.loc 1 1845 26 is_stmt 0 view .LVU4583
 17782 0028 FFF7FEFF 		bl	keycode_to_row_column
 17783              	.LVL1322:
1845:src/xeq.c     **** 	}
 17784              		.loc 1 1845 26 view .LVU4584
 17785 002c 0246     		mov	r2, r0
1845:src/xeq.c     **** 	}
 17786              		.loc 1 1845 3 view .LVU4585
 17787 002e 0096     		str	r6, [sp]
 17788 0030 2046     		mov	r0, r4
 17789 0032 D317     		asrs	r3, r2, #31
 17790 0034 FFF7FEFF 		bl	set_reg_n_int_sgn
 17791              	.LVL1323:
 17792              	.LBE2880:
1847:src/xeq.c     **** }
 17793              		.loc 1 1847 2 is_stmt 1 view .LVU4586
 17794 0038 2846     		mov	r0, r5
1848:src/xeq.c     **** 
 17795              		.loc 1 1848 1 is_stmt 0 view .LVU4587
 17796 003a 02B0     		add	sp, sp, #8
 17797              		.cfi_def_cfa_offset 16
 17798              		@ sp needed
 17799 003c BDE87040 		pop	{r4, r5, r6, lr}
 17800              		.cfi_restore 14
 17801              		.cfi_restore 6
 17802              		.cfi_restore 5
 17803              		.cfi_restore 4
 17804              		.cfi_def_cfa_offset 0
 17805              	.LVL1324:
1847:src/xeq.c     **** }
 17806              		.loc 1 1847 2 view .LVU4588
 17807 0040 FFF7FEBF 		b	fin_tst
 17808              	.LVL1325:
ARM GAS  /tmp/cc0UaEmF.s 			page 484


 17809              	.L1250:
1847:src/xeq.c     **** }
 17810              		.loc 1 1847 2 view .LVU4589
 17811              		.align	2
 17812              	.L1249:
 17813 0044 00000000 		.word	StateWhileOn
 17814              		.cfi_endproc
 17815              	.LFE135:
 17817              		.section	.text.do_tst,"ax",%progbits
 17818              		.align	1
 17819              		.p2align 2,,3
 17820              		.syntax unified
 17821              		.thumb
 17822              		.thumb_func
 17823              		.fpu fpv4-sp-d16
 17825              	do_tst:
 17826              	.LVL1326:
 17827              	.LFB183:
3078:src/xeq.c     **** 	int a = 0;
 17828              		.loc 1 3078 51 is_stmt 1 view -0
 17829              		.cfi_startproc
 17830              		@ args = 0, pretend = 0, frame = 112
 17831              		@ frame_needed = 0, uses_anonymous_args = 0
3079:src/xeq.c     **** 	int iszero, isneg;
 17832              		.loc 1 3079 2 view .LVU4591
3080:src/xeq.c     **** 
 17833              		.loc 1 3080 2 view .LVU4592
3082:src/xeq.c     **** 
 17834              		.loc 1 3082 2 view .LVU4593
 17835              	.LBB2881:
 17836              	.LBI2881:
1146:src/xeq.c     **** 	process_cmdline();
 17837              		.loc 1 1146 6 view .LVU4594
 17838              	.LBE2881:
1147:src/xeq.c     **** 	set_lift();
 17839              		.loc 1 1147 2 view .LVU4595
 17840              	.LBB2896:
 17841              	.LBB2882:
 17842              	.LBI2882:
1040:src/xeq.c     **** 	decNumber a, b, x, t;
 17843              		.loc 1 1040 6 view .LVU4596
 17844              	.LBB2883:
1041:src/xeq.c     **** 
 17845              		.loc 1 1041 2 view .LVU4597
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 17846              		.loc 1 1043 2 view .LVU4598
 17847              	.LBE2883:
 17848              	.LBE2882:
 17849              	.LBE2896:
3078:src/xeq.c     **** 	int a = 0;
 17850              		.loc 1 3078 51 is_stmt 0 view .LVU4599
 17851 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 17852              		.cfi_def_cfa_offset 28
 17853              		.cfi_offset 4, -28
 17854              		.cfi_offset 5, -24
 17855              		.cfi_offset 6, -20
 17856              		.cfi_offset 7, -16
ARM GAS  /tmp/cc0UaEmF.s 			page 485


 17857              		.cfi_offset 8, -12
 17858              		.cfi_offset 9, -8
 17859              		.cfi_offset 14, -4
 17860              	.LBB2897:
 17861              	.LBB2887:
 17862              	.LBB2884:
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 17863              		.loc 1 1043 6 view .LVU4600
 17864 0004 584D     		ldr	r5, .L1286
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 17865              		.loc 1 1043 5 view .LVU4601
 17866 0006 2B7F     		ldrb	r3, [r5, #28]	@ zero_extendqisi2
 17867              	.LBE2884:
 17868              	.LBE2887:
 17869              	.LBE2897:
3078:src/xeq.c     **** 	int a = 0;
 17870              		.loc 1 3078 51 view .LVU4602
 17871 0008 9DB0     		sub	sp, sp, #116
 17872              		.cfi_def_cfa_offset 144
3078:src/xeq.c     **** 	int a = 0;
 17873              		.loc 1 3078 51 view .LVU4603
 17874 000a 8046     		mov	r8, r0
 17875 000c 0C46     		mov	r4, r1
 17876              	.LBB2898:
 17877              	.LBB2888:
 17878              	.LBB2885:
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 17879              		.loc 1 1043 5 view .LVU4604
 17880 000e 002B     		cmp	r3, #0
 17881 0010 5DD1     		bne	.L1284
 17882              	.LVL1327:
 17883              	.L1252:
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 17884              		.loc 1 1043 5 view .LVU4605
 17885              	.LBE2885:
 17886              	.LBE2888:
 17887              	.LBE2898:
1148:src/xeq.c     **** }
 17888              		.loc 1 1148 2 is_stmt 1 view .LVU4606
 17889              	.LBB2899:
 17890              	.LBB2889:
 17891              	.LBI2889:
 748:src/xeq.c     ****     State2.state_lift = 1;
 17892              		.loc 1 748 6 view .LVU4607
 17893              	.LBB2890:
 749:src/xeq.c     **** }
 17894              		.loc 1 749 5 view .LVU4608
 749:src/xeq.c     **** }
 17895              		.loc 1 749 23 is_stmt 0 view .LVU4609
 17896 0012 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 17897              	.LBE2890:
 17898              	.LBE2889:
 17899              	.LBE2899:
3084:src/xeq.c     **** 		unsigned long long int xv, yv;
 17900              		.loc 1 3084 6 view .LVU4610
 17901 0014 554A     		ldr	r2, .L1286+4
 17902              	.LBB2900:
ARM GAS  /tmp/cc0UaEmF.s 			page 486


 17903              	.LBB2893:
 17904              	.LBB2891:
 749:src/xeq.c     **** }
 17905              		.loc 1 749 23 view .LVU4611
 17906 0016 43F04003 		orr	r3, r3, #64
 17907              	.LBE2891:
 17908              	.LBE2893:
 17909              	.LBE2900:
3084:src/xeq.c     **** 		unsigned long long int xv, yv;
 17910              		.loc 1 3084 6 view .LVU4612
 17911 001a 1268     		ldr	r2, [r2]
 17912              	.LBB2901:
 17913              	.LBB2894:
 17914              	.LBB2892:
 749:src/xeq.c     **** }
 17915              		.loc 1 749 23 view .LVU4613
 17916 001c EB75     		strb	r3, [r5, #23]
 17917              	.LBE2892:
 17918              	.LBE2894:
 17919              	.LBE2901:
3084:src/xeq.c     **** 		unsigned long long int xv, yv;
 17920              		.loc 1 3084 2 is_stmt 1 view .LVU4614
3084:src/xeq.c     **** 		unsigned long long int xv, yv;
 17921              		.loc 1 3084 6 is_stmt 0 view .LVU4615
 17922 001e 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
3084:src/xeq.c     **** 		unsigned long long int xv, yv;
 17923              		.loc 1 3084 5 view .LVU4616
 17924 0022 DB07     		lsls	r3, r3, #31
 17925 0024 2CD5     		bpl	.L1253
 17926              	.LBB2902:
3085:src/xeq.c     **** 		int xs, ys;
 17927              		.loc 1 3085 3 is_stmt 1 view .LVU4617
3086:src/xeq.c     **** 
 17928              		.loc 1 3086 3 view .LVU4618
3088:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
 17929              		.loc 1 3088 3 view .LVU4619
 17930              	.LBB2903:
 17931              	.LBI2903:
1256:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 17932              		.loc 1 1256 15 view .LVU4620
 17933              	.LBB2904:
1257:src/xeq.c     **** }
 17934              		.loc 1 1257 2 view .LVU4621
1257:src/xeq.c     **** }
 17935              		.loc 1 1257 9 is_stmt 0 view .LVU4622
 17936 0026 6420     		movs	r0, #100
 17937 0028 FFF7FEFF 		bl	get_reg_n_int
 17938              	.LVL1328:
 17939              	.LBE2904:
 17940              	.LBE2903:
3088:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
 17941              		.loc 1 3088 8 view .LVU4623
 17942 002c 0AAA     		add	r2, sp, #40
 17943 002e FFF7FEFF 		bl	extract_value
 17944              	.LVL1329:
3089:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
 17945              		.loc 1 3089 6 view .LVU4624
ARM GAS  /tmp/cc0UaEmF.s 			page 487


 17946 0032 B8F5FA6F 		cmp	r8, #2000
3088:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
 17947              		.loc 1 3088 8 view .LVU4625
 17948 0036 0646     		mov	r6, r0
 17949 0038 0F46     		mov	r7, r1
 17950              	.LVL1330:
3089:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
 17951              		.loc 1 3089 3 is_stmt 1 view .LVU4626
3089:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
 17952              		.loc 1 3089 6 is_stmt 0 view .LVU4627
 17953 003a 54DB     		blt	.L1254
3090:src/xeq.c     **** 			ys = 0;
 17954              		.loc 1 3090 4 is_stmt 1 view .LVU4628
3090:src/xeq.c     **** 			ys = 0;
 17955              		.loc 1 3090 30 is_stmt 0 view .LVU4629
 17956 003c A8F61B08 		subw	r8, r8, #2075
 17957              	.LVL1331:
3090:src/xeq.c     **** 			ys = 0;
 17958              		.loc 1 3090 7 view .LVU4630
 17959 0040 4FEAE879 		asr	r9, r8, #31
 17960              	.LVL1332:
3091:src/xeq.c     **** 		} else
 17961              		.loc 1 3091 4 is_stmt 1 view .LVU4631
 17962 0044 0022     		movs	r2, #0
 17963              	.LVL1333:
 17964              	.L1255:
3095:src/xeq.c     **** 			iszero = 1;
 17965              		.loc 1 3095 3 view .LVU4632
3095:src/xeq.c     **** 			iszero = 1;
 17966              		.loc 1 3095 6 is_stmt 0 view .LVU4633
 17967 0046 56EA0703 		orrs	r3, r6, r7
 17968 004a 43D1     		bne	.L1256
3095:src/xeq.c     **** 			iszero = 1;
 17969              		.loc 1 3095 15 discriminator 1 view .LVU4634
 17970 004c 58EA0903 		orrs	r3, r8, r9
 17971 0050 53D0     		beq	.L1257
 17972              	.L1259:
 17973 0052 0A9B     		ldr	r3, [sp, #40]
3100:src/xeq.c     **** 			if (xs)		// both negative
 17974              		.loc 1 3100 6 view .LVU4635
 17975 0054 9A42     		cmp	r2, r3
3098:src/xeq.c     **** 
 17976              		.loc 1 3098 24 view .LVU4636
 17977 0056 4FF00000 		mov	r0, #0
 17978              	.LVL1334:
3100:src/xeq.c     **** 			if (xs)		// both negative
 17979              		.loc 1 3100 3 is_stmt 1 view .LVU4637
3100:src/xeq.c     **** 			if (xs)		// both negative
 17980              		.loc 1 3100 6 is_stmt 0 view .LVU4638
 17981 005a 53D0     		beq	.L1260
 17982              	.LVL1335:
 17983              	.L1263:
3100:src/xeq.c     **** 			if (xs)		// both negative
 17984              		.loc 1 3100 6 view .LVU4639
 17985              	.LBE2902:
3128:src/xeq.c     **** 	case TST_APX:
 17986              		.loc 1 3128 2 is_stmt 1 view .LVU4640
ARM GAS  /tmp/cc0UaEmF.s 			page 488


 17987 005c 062C     		cmp	r4, #6
 17988 005e 30D8     		bhi	.L1269
 17989 0060 DFE804F0 		tbb	[pc, r4]
 17990              	.L1271:
 17991 0064 09       		.byte	(.L1268-.L1271)/2
 17992 0065 58       		.byte	(.L1283-.L1271)/2
 17993 0066 09       		.byte	(.L1268-.L1271)/2
 17994 0067 2E       		.byte	(.L1274-.L1271)/2
 17995 0068 67       		.byte	(.L1273-.L1271)/2
 17996 0069 6C       		.byte	(.L1272-.L1271)/2
 17997 006a 04       		.byte	(.L1270-.L1271)/2
 17998 006b 00       		.p2align 1
 17999              	.L1270:
3135:src/xeq.c     **** 	default:	a = 0;			break;
 18000              		.loc 1 3135 15 view .LVU4641
3135:src/xeq.c     **** 	default:	a = 0;			break;
 18001              		.loc 1 3135 26 is_stmt 0 view .LVU4642
 18002 006c 002B     		cmp	r3, #0
 18003 006e 6AD0     		beq	.L1278
3135:src/xeq.c     **** 	default:	a = 0;			break;
 18004              		.loc 1 3135 26 discriminator 2 view .LVU4643
 18005 0070 0038     		subs	r0, r0, #0
3135:src/xeq.c     **** 	default:	a = 0;			break;
 18006              		.loc 1 3135 26 discriminator 2 view .LVU4644
 18007 0072 18BF     		it	ne
 18008 0074 0120     		movne	r0, #1
 18009              	.LVL1336:
 18010              	.L1268:
3139:src/xeq.c     **** }
 18011              		.loc 1 3139 7 is_stmt 1 view .LVU4645
 18012 0076 FFF7FEFF 		bl	fin_tst
 18013              	.LVL1337:
3140:src/xeq.c     **** 
 18014              		.loc 1 3140 1 is_stmt 0 view .LVU4646
 18015 007a 1DB0     		add	sp, sp, #116
 18016              		.cfi_remember_state
 18017              		.cfi_def_cfa_offset 28
 18018              		@ sp needed
 18019 007c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 18020              	.LVL1338:
 18021              	.L1253:
 18022              		.cfi_restore_state
 18023              	.LBB2905:
3108:src/xeq.c     **** 
 18024              		.loc 1 3108 3 is_stmt 1 view .LVU4647
3110:src/xeq.c     **** 		if (decNumberIsNaN(&x))
 18025              		.loc 1 3110 3 view .LVU4648
 18026              	.LBB2906:
 18027              	.LBI2906:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 18028              		.loc 1 805 12 view .LVU4649
 18029              	.LBB2907:
 806:src/xeq.c     **** }
 18030              		.loc 1 806 2 view .LVU4650
 806:src/xeq.c     **** }
 18031              		.loc 1 806 9 is_stmt 0 view .LVU4651
 18032 0080 0AA8     		add	r0, sp, #40
ARM GAS  /tmp/cc0UaEmF.s 			page 489


 18033              	.LVL1339:
 806:src/xeq.c     **** }
 18034              		.loc 1 806 9 view .LVU4652
 18035 0082 6421     		movs	r1, #100
 18036 0084 FFF7FEFF 		bl	getRegister
 18037              	.LVL1340:
 806:src/xeq.c     **** }
 18038              		.loc 1 806 9 view .LVU4653
 18039              	.LBE2907:
 18040              	.LBE2906:
3111:src/xeq.c     **** 			goto flse;
 18041              		.loc 1 3111 3 is_stmt 1 view .LVU4654
3111:src/xeq.c     **** 			goto flse;
 18042              		.loc 1 3111 6 is_stmt 0 view .LVU4655
 18043 0088 9DF83030 		ldrb	r3, [sp, #48]	@ zero_extendqisi2
 18044 008c 13F0300F 		tst	r3, #48
 18045 0090 17D1     		bne	.L1269
3114:src/xeq.c     **** 		if (decNumberIsNaN(&t))
 18046              		.loc 1 3114 3 is_stmt 1 view .LVU4656
 18047 0092 01A8     		add	r0, sp, #4
 18048 0094 4146     		mov	r1, r8
 18049 0096 FFF7FEFF 		bl	getRegister
 18050              	.LVL1341:
3115:src/xeq.c     **** 			goto flse;
 18051              		.loc 1 3115 3 view .LVU4657
3115:src/xeq.c     **** 			goto flse;
 18052              		.loc 1 3115 6 is_stmt 0 view .LVU4658
 18053 009a 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 18054 009e 13F0300F 		tst	r3, #48
 18055 00a2 0ED1     		bne	.L1269
3118:src/xeq.c     **** 			decNumberRnd(&x, &x);
 18056              		.loc 1 3118 3 is_stmt 1 view .LVU4659
3118:src/xeq.c     **** 			decNumberRnd(&x, &x);
 18057              		.loc 1 3118 6 is_stmt 0 view .LVU4660
 18058 00a4 022C     		cmp	r4, #2
 18059 00a6 53D0     		beq	.L1285
 18060              	.L1266:
3123:src/xeq.c     **** 		iszero = dn_eq0(&r);
 18061              		.loc 1 3123 3 is_stmt 1 view .LVU4661
 18062 00a8 01AA     		add	r2, sp, #4
 18063 00aa 0AA9     		add	r1, sp, #40
 18064 00ac 13A8     		add	r0, sp, #76
 18065 00ae FFF7FEFF 		bl	dn_compare
 18066              	.LVL1342:
3124:src/xeq.c     **** 		isneg = decNumberIsNegative(&r);
 18067              		.loc 1 3124 3 view .LVU4662
3124:src/xeq.c     **** 		isneg = decNumberIsNegative(&r);
 18068              		.loc 1 3124 12 is_stmt 0 view .LVU4663
 18069 00b2 13A8     		add	r0, sp, #76
 18070 00b4 FFF7FEFF 		bl	dn_eq0
 18071              	.LVL1343:
3125:src/xeq.c     **** 	}
 18072              		.loc 1 3125 11 view .LVU4664
 18073 00b8 9DF95430 		ldrsb	r3, [sp, #84]
 18074              	.LVL1344:
3125:src/xeq.c     **** 	}
 18075              		.loc 1 3125 3 is_stmt 1 view .LVU4665
ARM GAS  /tmp/cc0UaEmF.s 			page 490


3125:src/xeq.c     **** 	}
 18076              		.loc 1 3125 11 is_stmt 0 view .LVU4666
 18077 00bc DB0F     		lsrs	r3, r3, #31
 18078              	.LVL1345:
3125:src/xeq.c     **** 	}
 18079              		.loc 1 3125 11 view .LVU4667
 18080 00be CDE7     		b	.L1263
 18081              	.LVL1346:
 18082              	.L1274:
3125:src/xeq.c     **** 	}
 18083              		.loc 1 3125 11 view .LVU4668
 18084              	.LBE2905:
3132:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 18085              		.loc 1 3132 15 is_stmt 1 view .LVU4669
3132:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 18086              		.loc 1 3132 25 is_stmt 0 view .LVU4670
 18087 00c0 43BB     		cbnz	r3, .L1283
 18088              	.LVL1347:
 18089              	.L1269:
3132:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 18090              		.loc 1 3132 25 view .LVU4671
 18091 00c2 0020     		movs	r0, #0
 18092              	.LVL1348:
3139:src/xeq.c     **** }
 18093              		.loc 1 3139 7 is_stmt 1 view .LVU4672
 18094 00c4 FFF7FEFF 		bl	fin_tst
 18095              	.LVL1349:
3140:src/xeq.c     **** 
 18096              		.loc 1 3140 1 is_stmt 0 view .LVU4673
 18097 00c8 1DB0     		add	sp, sp, #116
 18098              		.cfi_remember_state
 18099              		.cfi_def_cfa_offset 28
 18100              		@ sp needed
 18101 00ca BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 18102              	.LVL1350:
 18103              	.L1284:
 18104              		.cfi_restore_state
 18105              	.LBB2908:
 18106              	.LBB2895:
 18107              	.LBB2886:
3140:src/xeq.c     **** 
 18108              		.loc 1 3140 1 view .LVU4674
 18109 00ce FFF7FEFF 		bl	process_cmdline.part.0
 18110              	.LVL1351:
3140:src/xeq.c     **** 
 18111              		.loc 1 3140 1 view .LVU4675
 18112 00d2 9EE7     		b	.L1252
 18113              	.LVL1352:
 18114              	.L1256:
3140:src/xeq.c     **** 
 18115              		.loc 1 3140 1 view .LVU4676
 18116              	.LBE2886:
 18117              	.LBE2895:
 18118              	.LBE2908:
 18119              	.LBB2909:
3098:src/xeq.c     **** 
 18120              		.loc 1 3098 4 is_stmt 1 view .LVU4677
ARM GAS  /tmp/cc0UaEmF.s 			page 491


3098:src/xeq.c     **** 
 18121              		.loc 1 3098 24 is_stmt 0 view .LVU4678
 18122 00d4 B945     		cmp	r9, r7
 18123 00d6 08BF     		it	eq
 18124 00d8 B045     		cmpeq	r8, r6
 18125 00da BAD1     		bne	.L1259
3098:src/xeq.c     **** 
 18126              		.loc 1 3098 31 discriminator 1 view .LVU4679
 18127 00dc 0A9B     		ldr	r3, [sp, #40]
3098:src/xeq.c     **** 
 18128              		.loc 1 3098 24 discriminator 1 view .LVU4680
 18129 00de 9342     		cmp	r3, r2
 18130 00e0 33D0     		beq	.L1276
3098:src/xeq.c     **** 
 18131              		.loc 1 3098 24 view .LVU4681
 18132 00e2 0020     		movs	r0, #0
 18133 00e4 BAE7     		b	.L1263
 18134              	.LVL1353:
 18135              	.L1254:
3093:src/xeq.c     **** 
 18136              		.loc 1 3093 4 is_stmt 1 view .LVU4682
3093:src/xeq.c     **** 
 18137              		.loc 1 3093 9 is_stmt 0 view .LVU4683
 18138 00e6 4046     		mov	r0, r8
 18139 00e8 FFF7FEFF 		bl	get_reg_n_int
 18140              	.LVL1354:
 18141 00ec 13AA     		add	r2, sp, #76
 18142 00ee FFF7FEFF 		bl	extract_value
 18143              	.LVL1355:
 18144 00f2 139A     		ldr	r2, [sp, #76]
 18145 00f4 8046     		mov	r8, r0
 18146              	.LVL1356:
3093:src/xeq.c     **** 
 18147              		.loc 1 3093 9 view .LVU4684
 18148 00f6 8946     		mov	r9, r1
 18149              	.LVL1357:
3093:src/xeq.c     **** 
 18150              		.loc 1 3093 9 view .LVU4685
 18151 00f8 A5E7     		b	.L1255
 18152              	.L1257:
3093:src/xeq.c     **** 
 18153              		.loc 1 3093 9 view .LVU4686
 18154 00fa 0A9B     		ldr	r3, [sp, #40]
3100:src/xeq.c     **** 			if (xs)		// both negative
 18155              		.loc 1 3100 6 view .LVU4687
 18156 00fc 9A42     		cmp	r2, r3
3096:src/xeq.c     **** 		else
 18157              		.loc 1 3096 11 view .LVU4688
 18158 00fe 4FF00100 		mov	r0, #1
 18159              	.LVL1358:
3100:src/xeq.c     **** 			if (xs)		// both negative
 18160              		.loc 1 3100 3 is_stmt 1 view .LVU4689
3100:src/xeq.c     **** 			if (xs)		// both negative
 18161              		.loc 1 3100 6 is_stmt 0 view .LVU4690
 18162 0102 ABD1     		bne	.L1263
 18163              	.LVL1359:
 18164              	.L1260:
ARM GAS  /tmp/cc0UaEmF.s 			page 492


3101:src/xeq.c     **** 				isneg = xv > yv;
 18165              		.loc 1 3101 4 is_stmt 1 view .LVU4691
3101:src/xeq.c     **** 				isneg = xv > yv;
 18166              		.loc 1 3101 7 is_stmt 0 view .LVU4692
 18167 0104 73B1     		cbz	r3, .L1262
3102:src/xeq.c     **** 			else		// both positive
 18168              		.loc 1 3102 5 is_stmt 1 view .LVU4693
3102:src/xeq.c     **** 			else		// both positive
 18169              		.loc 1 3102 16 is_stmt 0 view .LVU4694
 18170 0106 B945     		cmp	r9, r7
 18171 0108 08BF     		it	eq
 18172 010a B045     		cmpeq	r8, r6
 18173 010c 34BF     		ite	cc
 18174 010e 0123     		movcc	r3, #1
 18175 0110 0023     		movcs	r3, #0
 18176              	.LVL1360:
3102:src/xeq.c     **** 			else		// both positive
 18177              		.loc 1 3102 16 view .LVU4695
 18178 0112 A3E7     		b	.L1263
 18179              	.LVL1361:
 18180              	.L1283:
3102:src/xeq.c     **** 			else		// both positive
 18181              		.loc 1 3102 16 view .LVU4696
 18182              	.LBE2909:
3132:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 18183              		.loc 1 3132 25 discriminator 1 view .LVU4697
 18184 0114 B0FA80F0 		clz	r0, r0
 18185              	.LVL1362:
3132:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 18186              		.loc 1 3132 25 discriminator 1 view .LVU4698
 18187 0118 4009     		lsrs	r0, r0, #5
 18188              	.LVL1363:
3139:src/xeq.c     **** }
 18189              		.loc 1 3139 7 is_stmt 1 discriminator 1 view .LVU4699
 18190 011a FFF7FEFF 		bl	fin_tst
 18191              	.LVL1364:
3140:src/xeq.c     **** 
 18192              		.loc 1 3140 1 is_stmt 0 discriminator 1 view .LVU4700
 18193 011e 1DB0     		add	sp, sp, #116
 18194              		.cfi_remember_state
 18195              		.cfi_def_cfa_offset 28
 18196              		@ sp needed
 18197 0120 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 18198              	.LVL1365:
 18199              	.L1262:
 18200              		.cfi_restore_state
 18201              	.LBB2910:
3104:src/xeq.c     **** 		} else
 18202              		.loc 1 3104 5 is_stmt 1 view .LVU4701
3104:src/xeq.c     **** 		} else
 18203              		.loc 1 3104 16 is_stmt 0 view .LVU4702
 18204 0124 4F45     		cmp	r7, r9
 18205 0126 08BF     		it	eq
 18206 0128 4645     		cmpeq	r6, r8
 18207 012a 34BF     		ite	cc
 18208 012c 0123     		movcc	r3, #1
 18209 012e 0023     		movcs	r3, #0
ARM GAS  /tmp/cc0UaEmF.s 			page 493


 18210              	.LVL1366:
3104:src/xeq.c     **** 		} else
 18211              		.loc 1 3104 16 view .LVU4703
 18212 0130 94E7     		b	.L1263
 18213              	.LVL1367:
 18214              	.L1273:
3104:src/xeq.c     **** 		} else
 18215              		.loc 1 3104 16 view .LVU4704
 18216              	.LBE2910:
3133:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 18217              		.loc 1 3133 15 is_stmt 1 discriminator 2 view .LVU4705
3133:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 18218              		.loc 1 3133 25 is_stmt 0 discriminator 2 view .LVU4706
 18219 0132 0343     		orrs	r3, r0, r3
 18220              	.LVL1368:
3133:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 18221              		.loc 1 3133 25 discriminator 2 view .LVU4707
 18222 0134 14BF     		ite	ne
 18223 0136 0120     		movne	r0, #1
 18224              	.LVL1369:
3133:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 18225              		.loc 1 3133 25 discriminator 2 view .LVU4708
 18226 0138 0020     		moveq	r0, #0
 18227 013a 9CE7     		b	.L1268
 18228              	.LVL1370:
 18229              	.L1272:
3134:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 18230              		.loc 1 3134 15 is_stmt 1 discriminator 1 view .LVU4709
3134:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 18231              		.loc 1 3134 26 is_stmt 0 discriminator 1 view .LVU4710
 18232 013c 0343     		orrs	r3, r0, r3
 18233              	.LVL1371:
3134:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 18234              		.loc 1 3134 26 discriminator 1 view .LVU4711
 18235 013e 0CBF     		ite	eq
 18236 0140 0120     		moveq	r0, #1
 18237              	.LVL1372:
3134:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 18238              		.loc 1 3134 26 discriminator 1 view .LVU4712
 18239 0142 0020     		movne	r0, #0
 18240 0144 97E7     		b	.L1268
 18241              	.LVL1373:
 18242              	.L1278:
3135:src/xeq.c     **** 	default:	a = 0;			break;
 18243              		.loc 1 3135 26 view .LVU4713
 18244 0146 0120     		movs	r0, #1
 18245              	.LVL1374:
3135:src/xeq.c     **** 	default:	a = 0;			break;
 18246              		.loc 1 3135 26 view .LVU4714
 18247 0148 95E7     		b	.L1268
 18248              	.LVL1375:
 18249              	.L1276:
 18250              	.LBB2911:
3135:src/xeq.c     **** 	default:	a = 0;			break;
 18251              		.loc 1 3135 26 view .LVU4715
 18252 014a 1346     		mov	r3, r2
3098:src/xeq.c     **** 
ARM GAS  /tmp/cc0UaEmF.s 			page 494


 18253              		.loc 1 3098 24 view .LVU4716
 18254 014c 0120     		movs	r0, #1
 18255 014e D9E7     		b	.L1260
 18256              	.LVL1376:
 18257              	.L1285:
3098:src/xeq.c     **** 
 18258              		.loc 1 3098 24 view .LVU4717
 18259              	.LBE2911:
 18260              	.LBB2912:
3119:src/xeq.c     **** 			if (cmp < CONST_REG_BASE)
 18261              		.loc 1 3119 4 is_stmt 1 view .LVU4718
 18262 0150 0AA9     		add	r1, sp, #40
 18263 0152 0846     		mov	r0, r1
 18264 0154 FFF7FEFF 		bl	decNumberRnd
 18265              	.LVL1377:
3120:src/xeq.c     **** 				decNumberRnd(&t, &t);
 18266              		.loc 1 3120 4 view .LVU4719
3120:src/xeq.c     **** 				decNumberRnd(&t, &t);
 18267              		.loc 1 3120 7 is_stmt 0 view .LVU4720
 18268 0158 B8F5FA6F 		cmp	r8, #2000
 18269 015c A4DA     		bge	.L1266
3121:src/xeq.c     **** 		}
 18270              		.loc 1 3121 5 is_stmt 1 view .LVU4721
 18271 015e 01A9     		add	r1, sp, #4
 18272 0160 0846     		mov	r0, r1
 18273 0162 FFF7FEFF 		bl	decNumberRnd
 18274              	.LVL1378:
 18275 0166 9FE7     		b	.L1266
 18276              	.L1287:
 18277              		.align	2
 18278              	.L1286:
 18279 0168 00000000 		.word	StateWhileOn
 18280 016c 00000000 		.word	main_ram
 18281              	.LBE2912:
 18282              		.cfi_endproc
 18283              	.LFE183:
 18285              		.section	.text.do_ztst,"ax",%progbits
 18286              		.align	1
 18287              		.p2align 2,,3
 18288              		.syntax unified
 18289              		.thumb
 18290              		.thumb_func
 18291              		.fpu fpv4-sp-d16
 18293              	do_ztst:
 18294              	.LVL1379:
 18295              	.LFB186:
3165:src/xeq.c     **** 	decNumber x, y;
 18296              		.loc 1 3165 79 view -0
 18297              		.cfi_startproc
 18298              		@ args = 0, pretend = 0, frame = 72
 18299              		@ frame_needed = 0, uses_anonymous_args = 0
3166:src/xeq.c     **** 
 18300              		.loc 1 3166 2 view .LVU4723
3168:src/xeq.c     **** 	if (is_intmode()) {
 18301              		.loc 1 3168 2 view .LVU4724
 18302              	.LBB2930:
 18303              	.LBI2930:
ARM GAS  /tmp/cc0UaEmF.s 			page 495


1146:src/xeq.c     **** 	process_cmdline();
 18304              		.loc 1 1146 6 view .LVU4725
 18305              	.LBE2930:
1147:src/xeq.c     **** 	set_lift();
 18306              		.loc 1 1147 2 view .LVU4726
 18307              	.LBB2945:
 18308              	.LBB2931:
 18309              	.LBI2931:
1040:src/xeq.c     **** 	decNumber a, b, x, t;
 18310              		.loc 1 1040 6 view .LVU4727
 18311              	.LBB2932:
1041:src/xeq.c     **** 
 18312              		.loc 1 1041 2 view .LVU4728
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 18313              		.loc 1 1043 2 view .LVU4729
 18314              	.LBE2932:
 18315              	.LBE2931:
 18316              	.LBE2945:
3165:src/xeq.c     **** 	decNumber x, y;
 18317              		.loc 1 3165 79 is_stmt 0 view .LVU4730
 18318 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 18319              		.cfi_def_cfa_offset 20
 18320              		.cfi_offset 4, -20
 18321              		.cfi_offset 5, -16
 18322              		.cfi_offset 6, -12
 18323              		.cfi_offset 7, -8
 18324              		.cfi_offset 14, -4
 18325              	.LBB2946:
 18326              	.LBB2936:
 18327              	.LBB2933:
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 18328              		.loc 1 1043 6 view .LVU4731
 18329 0002 2C4C     		ldr	r4, .L1307
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 18330              		.loc 1 1043 5 view .LVU4732
 18331 0004 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 18332              	.LBE2933:
 18333              	.LBE2936:
 18334              	.LBE2946:
3165:src/xeq.c     **** 	decNumber x, y;
 18335              		.loc 1 3165 79 view .LVU4733
 18336 0006 93B0     		sub	sp, sp, #76
 18337              		.cfi_def_cfa_offset 96
3165:src/xeq.c     **** 	decNumber x, y;
 18338              		.loc 1 3165 79 view .LVU4734
 18339 0008 0546     		mov	r5, r0
 18340 000a 0F46     		mov	r7, r1
 18341 000c 1646     		mov	r6, r2
 18342              	.LBB2947:
 18343              	.LBB2937:
 18344              	.LBB2934:
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 18345              		.loc 1 1043 5 view .LVU4735
 18346 000e 002B     		cmp	r3, #0
 18347 0010 3FD1     		bne	.L1304
 18348              	.LVL1380:
 18349              	.L1289:
ARM GAS  /tmp/cc0UaEmF.s 			page 496


1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 18350              		.loc 1 1043 5 view .LVU4736
 18351              	.LBE2934:
 18352              	.LBE2937:
 18353              	.LBE2947:
1148:src/xeq.c     **** }
 18354              		.loc 1 1148 2 is_stmt 1 view .LVU4737
 18355              	.LBB2948:
 18356              	.LBB2938:
 18357              	.LBI2938:
 748:src/xeq.c     ****     State2.state_lift = 1;
 18358              		.loc 1 748 6 view .LVU4738
 18359              	.LBB2939:
 749:src/xeq.c     **** }
 18360              		.loc 1 749 5 view .LVU4739
 749:src/xeq.c     **** }
 18361              		.loc 1 749 23 is_stmt 0 view .LVU4740
 18362 0012 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 18363              	.LBE2939:
 18364              	.LBE2938:
 18365              	.LBE2948:
3169:src/xeq.c     **** 		bad_mode_error();
 18366              		.loc 1 3169 6 view .LVU4741
 18367 0014 284A     		ldr	r2, .L1307+4
 18368              	.LBB2949:
 18369              	.LBB2942:
 18370              	.LBB2940:
 749:src/xeq.c     **** }
 18371              		.loc 1 749 23 view .LVU4742
 18372 0016 43F04003 		orr	r3, r3, #64
 18373              	.LBE2940:
 18374              	.LBE2942:
 18375              	.LBE2949:
3169:src/xeq.c     **** 		bad_mode_error();
 18376              		.loc 1 3169 6 view .LVU4743
 18377 001a 1268     		ldr	r2, [r2]
 18378              	.LBB2950:
 18379              	.LBB2943:
 18380              	.LBB2941:
 749:src/xeq.c     **** }
 18381              		.loc 1 749 23 view .LVU4744
 18382 001c E375     		strb	r3, [r4, #23]
 18383              	.LBE2941:
 18384              	.LBE2943:
 18385              	.LBE2950:
3169:src/xeq.c     **** 		bad_mode_error();
 18386              		.loc 1 3169 2 is_stmt 1 view .LVU4745
3169:src/xeq.c     **** 		bad_mode_error();
 18387              		.loc 1 3169 6 is_stmt 0 view .LVU4746
 18388 001e 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
3169:src/xeq.c     **** 		bad_mode_error();
 18389              		.loc 1 3169 5 view .LVU4747
 18390 0022 DB07     		lsls	r3, r3, #31
 18391 0024 06D5     		bpl	.L1290
3170:src/xeq.c     **** 		return;
 18392              		.loc 1 3170 3 is_stmt 1 view .LVU4748
 18393              	.LBB2951:
ARM GAS  /tmp/cc0UaEmF.s 			page 497


 18394              	.LBI2951:
 566:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 18395              		.loc 1 566 6 view .LVU4749
 18396              	.LBE2951:
 567:src/xeq.c     **** }
 18397              		.loc 1 567 2 view .LVU4750
 18398              	.LVL1381:
 18399              	.LBB2956:
 18400              	.LBB2952:
 18401              	.LBI2952:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 18402              		.loc 1 537 5 view .LVU4751
 18403              	.LBB2953:
 538:src/xeq.c     **** 		Error = e;
 18404              		.loc 1 538 2 view .LVU4752
 538:src/xeq.c     **** 		Error = e;
 18405              		.loc 1 538 12 is_stmt 0 view .LVU4753
 18406 0026 254B     		ldr	r3, .L1307+8
 538:src/xeq.c     **** 		Error = e;
 18407              		.loc 1 538 5 view .LVU4754
 18408 0028 1A68     		ldr	r2, [r3]
 18409 002a 0AB9     		cbnz	r2, .L1288
 18410              	.LVL1382:
 18411              	.LBB2954:
 18412              	.LBI2954:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 18413              		.loc 1 537 5 is_stmt 1 view .LVU4755
 18414              	.LBB2955:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 18415              		.loc 1 539 3 view .LVU4756
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 18416              		.loc 1 539 9 is_stmt 0 view .LVU4757
 18417 002c 0D22     		movs	r2, #13
 18418 002e 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 18419              		.loc 1 540 3 is_stmt 1 view .LVU4758
 18420              	.LVL1383:
 18421              	.L1288:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 18422              		.loc 1 540 3 is_stmt 0 view .LVU4759
 18423              	.LBE2955:
 18424              	.LBE2954:
 18425              	.LBE2953:
 18426              	.LBE2952:
 18427              	.LBE2956:
3179:src/xeq.c     **** 
 18428              		.loc 1 3179 1 view .LVU4760
 18429 0030 13B0     		add	sp, sp, #76
 18430              		.cfi_remember_state
 18431              		.cfi_def_cfa_offset 20
 18432              		@ sp needed
 18433 0032 F0BD     		pop	{r4, r5, r6, r7, pc}
 18434              	.LVL1384:
 18435              	.L1290:
 18436              		.cfi_restore_state
3173:src/xeq.c     **** 	if (decNumberIsNaN(&x) || decNumberIsNaN(&y) || decNumberIsNaN(re) || decNumberIsNaN(im)) {
 18437              		.loc 1 3173 2 is_stmt 1 view .LVU4761
ARM GAS  /tmp/cc0UaEmF.s 			page 498


 18438              	.LBB2957:
 18439              	.LBI2957:
 835:src/xeq.c     **** 	getX(x);
 18440              		.loc 1 835 6 view .LVU4762
 18441              	.LBE2957:
 836:src/xeq.c     **** 	getY(y);
 18442              		.loc 1 836 2 view .LVU4763
 18443              	.LBB2962:
 18444              	.LBB2958:
 18445              	.LBI2958:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 18446              		.loc 1 805 12 view .LVU4764
 18447              	.LBB2959:
 806:src/xeq.c     **** }
 18448              		.loc 1 806 2 view .LVU4765
 806:src/xeq.c     **** }
 18449              		.loc 1 806 9 is_stmt 0 view .LVU4766
 18450 0034 6421     		movs	r1, #100
 18451 0036 6846     		mov	r0, sp
 18452 0038 FFF7FEFF 		bl	getRegister
 18453              	.LVL1385:
 806:src/xeq.c     **** }
 18454              		.loc 1 806 9 view .LVU4767
 18455              	.LBE2959:
 18456              	.LBE2958:
 18457              	.LBE2962:
 837:src/xeq.c     **** }
 18458              		.loc 1 837 2 is_stmt 1 view .LVU4768
 18459              	.LBB2963:
 18460              	.LBB2960:
 18461              	.LBI2960:
 813:src/xeq.c     **** 	getRegister(y, regY_idx);
 18462              		.loc 1 813 6 view .LVU4769
 18463              	.LBB2961:
 814:src/xeq.c     **** }
 18464              		.loc 1 814 2 view .LVU4770
 18465 003c 09A8     		add	r0, sp, #36
 18466              	.LVL1386:
 814:src/xeq.c     **** }
 18467              		.loc 1 814 2 is_stmt 0 view .LVU4771
 18468 003e 6521     		movs	r1, #101
 18469 0040 FFF7FEFF 		bl	getRegister
 18470              	.LVL1387:
 814:src/xeq.c     **** }
 18471              		.loc 1 814 2 view .LVU4772
 18472              	.LBE2961:
 18473              	.LBE2960:
 18474              	.LBE2963:
3174:src/xeq.c     **** 		fin_tst(0);
 18475              		.loc 1 3174 2 is_stmt 1 view .LVU4773
3174:src/xeq.c     **** 		fin_tst(0);
 18476              		.loc 1 3174 25 is_stmt 0 view .LVU4774
 18477 0044 9DF80830 		ldrb	r3, [sp, #8]	@ zero_extendqisi2
 18478 0048 9DF82C20 		ldrb	r2, [sp, #44]	@ zero_extendqisi2
 18479 004c 1343     		orrs	r3, r3, r2
 18480 004e 13F0300F 		tst	r3, #48
 18481 0052 13D1     		bne	.L1292
ARM GAS  /tmp/cc0UaEmF.s 			page 499


3174:src/xeq.c     **** 		fin_tst(0);
 18482              		.loc 1 3174 47 discriminator 2 view .LVU4775
 18483 0054 2B7A     		ldrb	r3, [r5, #8]	@ zero_extendqisi2
 18484 0056 13F0300F 		tst	r3, #48
 18485 005a 0FD1     		bne	.L1292
3174:src/xeq.c     **** 		fin_tst(0);
 18486              		.loc 1 3174 69 discriminator 3 view .LVU4776
 18487 005c 3B7A     		ldrb	r3, [r7, #8]	@ zero_extendqisi2
 18488 005e 13F0300F 		tst	r3, #48
 18489 0062 0BD1     		bne	.L1292
3178:src/xeq.c     **** }
 18490              		.loc 1 3178 2 is_stmt 1 view .LVU4777
3178:src/xeq.c     **** }
 18491              		.loc 1 3178 29 is_stmt 0 view .LVU4778
 18492 0064 2946     		mov	r1, r5
 18493 0066 6846     		mov	r0, sp
 18494 0068 FFF7FEFF 		bl	dn_eq
 18495              	.LVL1388:
3178:src/xeq.c     **** }
 18496              		.loc 1 3178 25 view .LVU4779
 18497 006c 003E     		subs	r6, r6, #0
 18498 006e 18BF     		it	ne
 18499 0070 0126     		movne	r6, #1
3178:src/xeq.c     **** }
 18500              		.loc 1 3178 43 view .LVU4780
 18501 0072 A8B9     		cbnz	r0, .L1305
 18502              	.L1295:
3178:src/xeq.c     **** }
 18503              		.loc 1 3178 2 discriminator 6 view .LVU4781
 18504 0074 3046     		mov	r0, r6
 18505 0076 FFF7FEFF 		bl	fin_tst
 18506              	.LVL1389:
 18507 007a D9E7     		b	.L1288
 18508              	.L1292:
3175:src/xeq.c     **** 		return;
 18509              		.loc 1 3175 3 is_stmt 1 view .LVU4782
 18510              	.LVL1390:
 18511              	.LBB2964:
 18512              	.LBI2964:
2363:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 18513              		.loc 1 2363 6 view .LVU4783
 18514              	.LBB2965:
2364:src/xeq.c     **** 	if (Running || XromRunning) {
 18515              		.loc 1 2364 2 view .LVU4784
2365:src/xeq.c     **** 		if (! a && incpc())
 18516              		.loc 1 2365 2 view .LVU4785
2365:src/xeq.c     **** 		if (! a && incpc())
 18517              		.loc 1 2365 6 is_stmt 0 view .LVU4786
 18518 007c 104A     		ldr	r2, .L1307+12
2365:src/xeq.c     **** 		if (! a && incpc())
 18519              		.loc 1 2365 14 view .LVU4787
 18520 007e 114B     		ldr	r3, .L1307+16
 18521 0080 1268     		ldr	r2, [r2]
 18522 0082 1B68     		ldr	r3, [r3]
 18523 0084 1343     		orrs	r3, r2, r3
 18524 0086 07D1     		bne	.L1306
2370:src/xeq.c     **** #ifdef INFRARED
ARM GAS  /tmp/cc0UaEmF.s 			page 500


 18525              		.loc 1 2370 3 is_stmt 1 view .LVU4788
2370:src/xeq.c     **** #ifdef INFRARED
 18526              		.loc 1 2370 11 is_stmt 0 view .LVU4789
 18527 0088 0F4B     		ldr	r3, .L1307+20
 18528 008a 104A     		ldr	r2, .L1307+24
 18529 008c 1A60     		str	r2, [r3]
 18530              	.LBE2965:
 18531              	.LBE2964:
3179:src/xeq.c     **** 
 18532              		.loc 1 3179 1 view .LVU4790
 18533 008e 13B0     		add	sp, sp, #76
 18534              		.cfi_remember_state
 18535              		.cfi_def_cfa_offset 20
 18536              		@ sp needed
 18537 0090 F0BD     		pop	{r4, r5, r6, r7, pc}
 18538              	.LVL1391:
 18539              	.L1304:
 18540              		.cfi_restore_state
 18541              	.LBB2967:
 18542              	.LBB2944:
 18543              	.LBB2935:
3179:src/xeq.c     **** 
 18544              		.loc 1 3179 1 view .LVU4791
 18545 0092 FFF7FEFF 		bl	process_cmdline.part.0
 18546              	.LVL1392:
3179:src/xeq.c     **** 
 18547              		.loc 1 3179 1 view .LVU4792
 18548 0096 BCE7     		b	.L1289
 18549              	.LVL1393:
 18550              	.L1306:
3179:src/xeq.c     **** 
 18551              		.loc 1 3179 1 view .LVU4793
 18552              	.LBE2935:
 18553              	.LBE2944:
 18554              	.LBE2967:
 18555              	.LBB2968:
 18556              	.LBB2966:
2366:src/xeq.c     **** 			decpc();
 18557              		.loc 1 2366 3 is_stmt 1 view .LVU4794
 18558 0098 FFF7FEFF 		bl	fin_tst.part.0
 18559              	.LVL1394:
 18560              	.LBE2966:
 18561              	.LBE2968:
3179:src/xeq.c     **** 
 18562              		.loc 1 3179 1 is_stmt 0 view .LVU4795
 18563 009c 13B0     		add	sp, sp, #76
 18564              		.cfi_remember_state
 18565              		.cfi_def_cfa_offset 20
 18566              		@ sp needed
 18567 009e F0BD     		pop	{r4, r5, r6, r7, pc}
 18568              	.LVL1395:
 18569              	.L1305:
 18570              		.cfi_restore_state
3178:src/xeq.c     **** }
 18571              		.loc 1 3178 46 discriminator 1 view .LVU4796
 18572 00a0 3946     		mov	r1, r7
 18573 00a2 09A8     		add	r0, sp, #36
ARM GAS  /tmp/cc0UaEmF.s 			page 501


 18574 00a4 FFF7FEFF 		bl	dn_eq
 18575              	.LVL1396:
 18576 00a8 0028     		cmp	r0, #0
 18577 00aa 18BF     		it	ne
 18578 00ac 86F00106 		eorne	r6, r6, #1
 18579 00b0 E0E7     		b	.L1295
 18580              	.L1308:
 18581 00b2 00BF     		.align	2
 18582              	.L1307:
 18583 00b4 00000000 		.word	StateWhileOn
 18584 00b8 00000000 		.word	main_ram
 18585 00bc 00000000 		.word	Error
 18586 00c0 00000000 		.word	Running
 18587 00c4 00000000 		.word	XromRunning
 18588 00c8 00000000 		.word	DispMsg
 18589 00cc 00000000 		.word	.LC3
 18590              		.cfi_endproc
 18591              	.LFE186:
 18593              		.section	.text.check_zero,"ax",%progbits
 18594              		.align	1
 18595              		.p2align 2,,3
 18596              		.global	check_zero
 18597              		.syntax unified
 18598              		.thumb
 18599              		.thumb_func
 18600              		.fpu fpv4-sp-d16
 18602              	check_zero:
 18603              	.LVL1397:
 18604              	.LFB184:
3142:src/xeq.c     **** 	int neg;
 18605              		.loc 1 3142 32 is_stmt 1 view -0
 18606              		.cfi_startproc
 18607              		@ args = 0, pretend = 0, frame = 40
 18608              		@ frame_needed = 0, uses_anonymous_args = 0
3143:src/xeq.c     **** 	int zero;
 18609              		.loc 1 3143 2 view .LVU4798
3144:src/xeq.c     **** 
 18610              		.loc 1 3144 2 view .LVU4799
3146:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 18611              		.loc 1 3146 2 view .LVU4800
3146:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 18612              		.loc 1 3146 6 is_stmt 0 view .LVU4801
 18613 0000 1A4B     		ldr	r3, .L1324
3142:src/xeq.c     **** 	int neg;
 18614              		.loc 1 3142 32 view .LVU4802
 18615 0002 10B5     		push	{r4, lr}
 18616              		.cfi_def_cfa_offset 8
 18617              		.cfi_offset 4, -8
 18618              		.cfi_offset 14, -4
3146:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 18619              		.loc 1 3146 6 view .LVU4803
 18620 0004 1B68     		ldr	r3, [r3]
 18621 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3146:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 18622              		.loc 1 3146 5 view .LVU4804
 18623 000a DB07     		lsls	r3, r3, #31
3142:src/xeq.c     **** 	int neg;
ARM GAS  /tmp/cc0UaEmF.s 			page 502


 18624              		.loc 1 3142 32 view .LVU4805
 18625 000c 8AB0     		sub	sp, sp, #40
 18626              		.cfi_def_cfa_offset 48
3142:src/xeq.c     **** 	int neg;
 18627              		.loc 1 3142 32 view .LVU4806
 18628 000e 0446     		mov	r4, r0
3146:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 18629              		.loc 1 3146 5 view .LVU4807
 18630 0010 15D5     		bpl	.L1310
 18631              	.LBB2969:
3147:src/xeq.c     **** 		zero = (xv == 0);
 18632              		.loc 1 3147 3 is_stmt 1 view .LVU4808
 18633              	.LBB2970:
 18634              	.LBI2970:
1256:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 18635              		.loc 1 1256 15 view .LVU4809
 18636              	.LBB2971:
1257:src/xeq.c     **** }
 18637              		.loc 1 1257 2 view .LVU4810
1257:src/xeq.c     **** }
 18638              		.loc 1 1257 9 is_stmt 0 view .LVU4811
 18639 0012 6420     		movs	r0, #100
 18640              	.LVL1398:
1257:src/xeq.c     **** }
 18641              		.loc 1 1257 9 view .LVU4812
 18642 0014 FFF7FEFF 		bl	get_reg_n_int
 18643              	.LVL1399:
 18644              	.LBE2971:
 18645              	.LBE2970:
3147:src/xeq.c     **** 		zero = (xv == 0);
 18646              		.loc 1 3147 37 view .LVU4813
 18647 0018 6A46     		mov	r2, sp
 18648 001a FFF7FEFF 		bl	extract_value
 18649              	.LVL1400:
3148:src/xeq.c     **** 	} else {
 18650              		.loc 1 3148 3 is_stmt 1 view .LVU4814
3148:src/xeq.c     **** 	} else {
 18651              		.loc 1 3148 14 is_stmt 0 view .LVU4815
 18652 001e 50EA0103 		orrs	r3, r0, r1
 18653 0022 0CBF     		ite	eq
 18654 0024 0120     		moveq	r0, #1
 18655              	.LVL1401:
3148:src/xeq.c     **** 	} else {
 18656              		.loc 1 3148 14 view .LVU4816
 18657 0026 0020     		movne	r0, #0
 18658              	.LVL1402:
3148:src/xeq.c     **** 	} else {
 18659              		.loc 1 3148 14 view .LVU4817
 18660              	.LBE2969:
3155:src/xeq.c     **** 		fin_tst(zero && !neg);
 18661              		.loc 1 3155 2 is_stmt 1 view .LVU4818
3155:src/xeq.c     **** 		fin_tst(zero && !neg);
 18662              		.loc 1 3155 5 is_stmt 0 view .LVU4819
 18663 0028 A12C     		cmp	r4, #161
 18664 002a 15D0     		beq	.L1323
 18665              	.L1312:
3158:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 503


 18666              		.loc 1 3158 3 is_stmt 1 view .LVU4820
 18667 002c 18B1     		cbz	r0, .L1315
3158:src/xeq.c     **** }
 18668              		.loc 1 3158 3 is_stmt 0 discriminator 1 view .LVU4821
 18669 002e 0098     		ldr	r0, [sp]
 18670              	.LVL1403:
3158:src/xeq.c     **** }
 18671              		.loc 1 3158 3 discriminator 1 view .LVU4822
 18672 0030 0038     		subs	r0, r0, #0
 18673 0032 18BF     		it	ne
 18674 0034 0120     		movne	r0, #1
 18675              	.L1315:
3158:src/xeq.c     **** }
 18676              		.loc 1 3158 3 discriminator 6 view .LVU4823
 18677 0036 FFF7FEFF 		bl	fin_tst
 18678              	.LVL1404:
3159:src/xeq.c     **** 
 18679              		.loc 1 3159 1 discriminator 6 view .LVU4824
 18680 003a 0AB0     		add	sp, sp, #40
 18681              		.cfi_remember_state
 18682              		.cfi_def_cfa_offset 8
 18683              		@ sp needed
 18684 003c 10BD     		pop	{r4, pc}
 18685              	.LVL1405:
 18686              	.L1310:
 18687              		.cfi_restore_state
 18688              	.LBB2972:
3150:src/xeq.c     **** 		getX(&x);
 18689              		.loc 1 3150 3 is_stmt 1 view .LVU4825
3151:src/xeq.c     **** 		neg = decNumberIsNegative(&x);
 18690              		.loc 1 3151 3 view .LVU4826
 18691              	.LBB2973:
 18692              	.LBI2973:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 18693              		.loc 1 805 12 view .LVU4827
 18694              	.LBB2974:
 806:src/xeq.c     **** }
 18695              		.loc 1 806 2 view .LVU4828
 806:src/xeq.c     **** }
 18696              		.loc 1 806 9 is_stmt 0 view .LVU4829
 18697 003e 6421     		movs	r1, #100
 18698 0040 01A8     		add	r0, sp, #4
 18699              	.LVL1406:
 806:src/xeq.c     **** }
 18700              		.loc 1 806 9 view .LVU4830
 18701 0042 FFF7FEFF 		bl	getRegister
 18702              	.LVL1407:
 806:src/xeq.c     **** }
 18703              		.loc 1 806 9 view .LVU4831
 18704              	.LBE2974:
 18705              	.LBE2973:
3152:src/xeq.c     **** 		zero = dn_eq0(&x);
 18706              		.loc 1 3152 3 is_stmt 1 view .LVU4832
3152:src/xeq.c     **** 		zero = dn_eq0(&x);
 18707              		.loc 1 3152 9 is_stmt 0 view .LVU4833
 18708 0046 9DF90C30 		ldrsb	r3, [sp, #12]
3153:src/xeq.c     **** 	}
ARM GAS  /tmp/cc0UaEmF.s 			page 504


 18709              		.loc 1 3153 10 view .LVU4834
 18710 004a 01A8     		add	r0, sp, #4
3152:src/xeq.c     **** 		zero = dn_eq0(&x);
 18711              		.loc 1 3152 9 view .LVU4835
 18712 004c DB0F     		lsrs	r3, r3, #31
3152:src/xeq.c     **** 		zero = dn_eq0(&x);
 18713              		.loc 1 3152 7 view .LVU4836
 18714 004e 0093     		str	r3, [sp]
3153:src/xeq.c     **** 	}
 18715              		.loc 1 3153 3 is_stmt 1 view .LVU4837
3153:src/xeq.c     **** 	}
 18716              		.loc 1 3153 10 is_stmt 0 view .LVU4838
 18717 0050 FFF7FEFF 		bl	dn_eq0
 18718              	.LVL1408:
3153:src/xeq.c     **** 	}
 18719              		.loc 1 3153 10 view .LVU4839
 18720              	.LBE2972:
3155:src/xeq.c     **** 		fin_tst(zero && !neg);
 18721              		.loc 1 3155 2 is_stmt 1 view .LVU4840
3155:src/xeq.c     **** 		fin_tst(zero && !neg);
 18722              		.loc 1 3155 5 is_stmt 0 view .LVU4841
 18723 0054 A12C     		cmp	r4, #161
 18724 0056 E9D1     		bne	.L1312
 18725              	.L1323:
3156:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
 18726              		.loc 1 3156 3 is_stmt 1 view .LVU4842
 18727 0058 0028     		cmp	r0, #0
 18728 005a ECD0     		beq	.L1315
3156:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
 18729              		.loc 1 3156 3 is_stmt 0 discriminator 1 view .LVU4843
 18730 005c 0098     		ldr	r0, [sp]
 18731              	.LVL1409:
3156:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
 18732              		.loc 1 3156 3 discriminator 1 view .LVU4844
 18733 005e B0FA80F0 		clz	r0, r0
 18734 0062 4009     		lsrs	r0, r0, #5
3158:src/xeq.c     **** }
 18735              		.loc 1 3158 3 discriminator 1 view .LVU4845
 18736 0064 FFF7FEFF 		bl	fin_tst
 18737              	.LVL1410:
3159:src/xeq.c     **** 
 18738              		.loc 1 3159 1 discriminator 1 view .LVU4846
 18739 0068 0AB0     		add	sp, sp, #40
 18740              		.cfi_def_cfa_offset 8
 18741              		@ sp needed
 18742 006a 10BD     		pop	{r4, pc}
 18743              	.L1325:
 18744              		.align	2
 18745              	.L1324:
 18746 006c 00000000 		.word	main_ram
 18747              		.cfi_endproc
 18748              	.LFE184:
 18750              		.section	.text.cmdtest,"ax",%progbits
 18751              		.align	1
 18752              		.p2align 2,,3
 18753              		.global	cmdtest
 18754              		.syntax unified
ARM GAS  /tmp/cc0UaEmF.s 			page 505


 18755              		.thumb
 18756              		.thumb_func
 18757              		.fpu fpv4-sp-d16
 18759              	cmdtest:
 18760              	.LVL1411:
 18761              	.LFB185:
3161:src/xeq.c     **** 	do_tst(arg, (enum tst_op)(op - RARG_TEST_EQ));
 18762              		.loc 1 3161 46 is_stmt 1 view -0
 18763              		.cfi_startproc
 18764              		@ args = 0, pretend = 0, frame = 0
 18765              		@ frame_needed = 0, uses_anonymous_args = 0
 18766              		@ link register save eliminated.
3162:src/xeq.c     **** }
 18767              		.loc 1 3162 2 view .LVU4848
3162:src/xeq.c     **** }
 18768              		.loc 1 3162 31 is_stmt 0 view .LVU4849
 18769 0000 2D39     		subs	r1, r1, #45
 18770              	.LVL1412:
3162:src/xeq.c     **** }
 18771              		.loc 1 3162 2 view .LVU4850
 18772 0002 C9B2     		uxtb	r1, r1
 18773 0004 FFF7FEBF 		b	do_tst
 18774              	.LVL1413:
3162:src/xeq.c     **** }
 18775              		.loc 1 3162 2 view .LVU4851
 18776              		.cfi_endproc
 18777              	.LFE185:
 18779              		.section	.text.cmdztest,"ax",%progbits
 18780              		.align	1
 18781              		.p2align 2,,3
 18782              		.global	cmdztest
 18783              		.syntax unified
 18784              		.thumb
 18785              		.thumb_func
 18786              		.fpu fpv4-sp-d16
 18788              	cmdztest:
 18789              	.LVL1414:
 18790              	.LFB187:
3181:src/xeq.c     **** 	decNumber re, im;
 18791              		.loc 1 3181 47 is_stmt 1 view -0
 18792              		.cfi_startproc
 18793              		@ args = 0, pretend = 0, frame = 72
 18794              		@ frame_needed = 0, uses_anonymous_args = 0
3182:src/xeq.c     **** 	getRegister(&re, arg);
 18795              		.loc 1 3182 2 view .LVU4853
3183:src/xeq.c     **** 	getRegister(&im, arg + 1);
 18796              		.loc 1 3183 2 view .LVU4854
3181:src/xeq.c     **** 	decNumber re, im;
 18797              		.loc 1 3181 47 is_stmt 0 view .LVU4855
 18798 0000 30B5     		push	{r4, r5, lr}
 18799              		.cfi_def_cfa_offset 12
 18800              		.cfi_offset 4, -12
 18801              		.cfi_offset 5, -8
 18802              		.cfi_offset 14, -4
 18803 0002 0546     		mov	r5, r0
 18804 0004 93B0     		sub	sp, sp, #76
 18805              		.cfi_def_cfa_offset 88
ARM GAS  /tmp/cc0UaEmF.s 			page 506


3181:src/xeq.c     **** 	decNumber re, im;
 18806              		.loc 1 3181 47 view .LVU4856
 18807 0006 0C46     		mov	r4, r1
3183:src/xeq.c     **** 	getRegister(&im, arg + 1);
 18808              		.loc 1 3183 2 view .LVU4857
 18809 0008 6846     		mov	r0, sp
 18810              	.LVL1415:
3183:src/xeq.c     **** 	getRegister(&im, arg + 1);
 18811              		.loc 1 3183 2 view .LVU4858
 18812 000a 2946     		mov	r1, r5
 18813              	.LVL1416:
3183:src/xeq.c     **** 	getRegister(&im, arg + 1);
 18814              		.loc 1 3183 2 view .LVU4859
 18815 000c FFF7FEFF 		bl	getRegister
 18816              	.LVL1417:
3184:src/xeq.c     **** 	do_ztst(&re, &im, (enum tst_op)(op - RARG_TEST_ZEQ));
 18817              		.loc 1 3184 2 is_stmt 1 view .LVU4860
 18818 0010 691C     		adds	r1, r5, #1
 18819 0012 09A8     		add	r0, sp, #36
 18820 0014 FFF7FEFF 		bl	getRegister
 18821              	.LVL1418:
3185:src/xeq.c     **** }
 18822              		.loc 1 3185 2 view .LVU4861
3185:src/xeq.c     **** }
 18823              		.loc 1 3185 37 is_stmt 0 view .LVU4862
 18824 0018 A4F13402 		sub	r2, r4, #52
3185:src/xeq.c     **** }
 18825              		.loc 1 3185 2 view .LVU4863
 18826 001c D2B2     		uxtb	r2, r2
 18827 001e 09A9     		add	r1, sp, #36
 18828 0020 6846     		mov	r0, sp
 18829 0022 FFF7FEFF 		bl	do_ztst
 18830              	.LVL1419:
3186:src/xeq.c     **** 
 18831              		.loc 1 3186 1 view .LVU4864
 18832 0026 13B0     		add	sp, sp, #76
 18833              		.cfi_def_cfa_offset 12
 18834              		@ sp needed
 18835 0028 30BD     		pop	{r4, r5, pc}
3186:src/xeq.c     **** 
 18836              		.loc 1 3186 1 view .LVU4865
 18837              		.cfi_endproc
 18838              	.LFE187:
 18840 002a 00BF     		.section	.text.cmdlincdec,"ax",%progbits
 18841              		.align	1
 18842              		.p2align 2,,3
 18843              		.global	cmdlincdec
 18844              		.syntax unified
 18845              		.thumb
 18846              		.thumb_func
 18847              		.fpu fpv4-sp-d16
 18849              	cmdlincdec:
 18850              	.LVL1420:
 18851              	.LFB189:
3216:src/xeq.c     **** 	incdec(arg, op == RARG_INC);
 18852              		.loc 1 3216 49 is_stmt 1 view -0
 18853              		.cfi_startproc
ARM GAS  /tmp/cc0UaEmF.s 			page 507


 18854              		@ args = 0, pretend = 0, frame = 0
 18855              		@ frame_needed = 0, uses_anonymous_args = 0
 18856              		@ link register save eliminated.
3217:src/xeq.c     **** }
 18857              		.loc 1 3217 2 view .LVU4867
 18858 0000 A1F14101 		sub	r1, #65
 18859              	.LVL1421:
3217:src/xeq.c     **** }
 18860              		.loc 1 3217 2 is_stmt 0 view .LVU4868
 18861 0004 B1FA81F1 		clz	r1, r1
 18862 0008 4909     		lsrs	r1, r1, #5
 18863 000a FFF7FEBF 		b	incdec
 18864              	.LVL1422:
3217:src/xeq.c     **** }
 18865              		.loc 1 3217 2 view .LVU4869
 18866              		.cfi_endproc
 18867              	.LFE189:
 18869 000e 00BF     		.section	.text.cmdloopz,"ax",%progbits
 18870              		.align	1
 18871              		.p2align 2,,3
 18872              		.global	cmdloopz
 18873              		.syntax unified
 18874              		.thumb
 18875              		.thumb_func
 18876              		.fpu fpv4-sp-d16
 18878              	cmdloopz:
 18879              	.LVL1423:
 18880              	.LFB190:
3220:src/xeq.c     **** 	fin_tst(incdec(arg, op == RARG_ISZ));
 18881              		.loc 1 3220 47 is_stmt 1 view -0
 18882              		.cfi_startproc
 18883              		@ args = 0, pretend = 0, frame = 0
 18884              		@ frame_needed = 0, uses_anonymous_args = 0
3221:src/xeq.c     **** }
 18885              		.loc 1 3221 2 view .LVU4871
3220:src/xeq.c     **** 	fin_tst(incdec(arg, op == RARG_ISZ));
 18886              		.loc 1 3220 47 is_stmt 0 view .LVU4872
 18887 0000 08B5     		push	{r3, lr}
 18888              		.cfi_def_cfa_offset 8
 18889              		.cfi_offset 3, -8
 18890              		.cfi_offset 14, -4
3221:src/xeq.c     **** }
 18891              		.loc 1 3221 2 view .LVU4873
 18892 0002 A1F13F01 		sub	r1, #63
 18893              	.LVL1424:
3221:src/xeq.c     **** }
 18894              		.loc 1 3221 2 view .LVU4874
 18895 0006 B1FA81F1 		clz	r1, r1
 18896 000a 4909     		lsrs	r1, r1, #5
 18897 000c FFF7FEFF 		bl	incdec
 18898              	.LVL1425:
3222:src/xeq.c     **** 
 18899              		.loc 1 3222 1 view .LVU4875
 18900 0010 BDE80840 		pop	{r3, lr}
 18901              		.cfi_restore 14
 18902              		.cfi_restore 3
 18903              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/cc0UaEmF.s 			page 508


3221:src/xeq.c     **** }
 18904              		.loc 1 3221 2 view .LVU4876
 18905 0014 FFF7FEBF 		b	fin_tst
 18906              	.LVL1426:
 18907              		.cfi_endproc
 18908              	.LFE190:
 18910              		.section	.text.cmdloop,"ax",%progbits
 18911              		.align	1
 18912              		.p2align 2,,3
 18913              		.global	cmdloop
 18914              		.syntax unified
 18915              		.thumb
 18916              		.thumb_func
 18917              		.fpu fpv4-sp-d16
 18919              	cmdloop:
 18920              	.LVL1427:
 18921              	.LFB191:
3224:src/xeq.c     **** 	if (is_intmode()) {
 18922              		.loc 1 3224 46 is_stmt 1 view -0
 18923              		.cfi_startproc
 18924              		@ args = 0, pretend = 0, frame = 184
 18925              		@ frame_needed = 0, uses_anonymous_args = 0
3225:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 18926              		.loc 1 3225 2 view .LVU4878
3225:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 18927              		.loc 1 3225 6 is_stmt 0 view .LVU4879
 18928 0000 7C4B     		ldr	r3, .L1372
3224:src/xeq.c     **** 	if (is_intmode()) {
 18929              		.loc 1 3224 46 view .LVU4880
 18930 0002 F0B5     		push	{r4, r5, r6, r7, lr}
 18931              		.cfi_def_cfa_offset 20
 18932              		.cfi_offset 4, -20
 18933              		.cfi_offset 5, -16
 18934              		.cfi_offset 6, -12
 18935              		.cfi_offset 7, -8
 18936              		.cfi_offset 14, -4
3225:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 18937              		.loc 1 3225 6 view .LVU4881
 18938 0004 1B68     		ldr	r3, [r3]
 18939 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3225:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 18940              		.loc 1 3225 5 view .LVU4882
 18941 000a DB07     		lsls	r3, r3, #31
3224:src/xeq.c     **** 	if (is_intmode()) {
 18942              		.loc 1 3224 46 view .LVU4883
 18943 000c AFB0     		sub	sp, sp, #188
 18944              		.cfi_def_cfa_offset 208
3224:src/xeq.c     **** 	if (is_intmode()) {
 18945              		.loc 1 3224 46 view .LVU4884
 18946 000e 0C46     		mov	r4, r1
 18947 0010 0546     		mov	r5, r0
3225:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 18948              		.loc 1 3225 5 view .LVU4885
 18949 0012 7BD4     		bmi	.L1364
 18950              	.LBB2975:
3247:src/xeq.c     **** 
 18951              		.loc 1 3247 3 is_stmt 1 view .LVU4886
ARM GAS  /tmp/cc0UaEmF.s 			page 509


3249:src/xeq.c     **** 
 18952              		.loc 1 3249 3 view .LVU4887
 18953 0014 2946     		mov	r1, r5
 18954              	.LVL1428:
3249:src/xeq.c     **** 
 18955              		.loc 1 3249 3 is_stmt 0 view .LVU4888
 18956 0016 6846     		mov	r0, sp
 18957              	.LVL1429:
3249:src/xeq.c     **** 
 18958              		.loc 1 3249 3 view .LVU4889
 18959 0018 FFF7FEFF 		bl	getRegister
 18960              	.LVL1430:
3253:src/xeq.c     **** 		decNumberTrunc(&n, &f);			// n = nnnnn
 18961              		.loc 1 3253 3 is_stmt 1 view .LVU4890
 18962 001c 6946     		mov	r1, sp
 18963 001e 12A8     		add	r0, sp, #72
 18964 0020 FFF7FEFF 		bl	dn_abs
 18965              	.LVL1431:
3254:src/xeq.c     **** 		dn_subtract(&u, &f, &n);		// u = .fffii
 18966              		.loc 1 3254 3 view .LVU4891
 18967 0024 12A9     		add	r1, sp, #72
 18968 0026 1BA8     		add	r0, sp, #108
 18969 0028 FFF7FEFF 		bl	decNumberTrunc
 18970              	.LVL1432:
3255:src/xeq.c     **** 		if (decNumberIsNegative(&x))
 18971              		.loc 1 3255 3 view .LVU4892
 18972 002c 1BAA     		add	r2, sp, #108
 18973 002e 12A9     		add	r1, sp, #72
 18974 0030 24A8     		add	r0, sp, #144
 18975 0032 FFF7FEFF 		bl	dn_subtract
 18976              	.LVL1433:
3256:src/xeq.c     **** 			dn_minus(&n, &n);
 18977              		.loc 1 3256 3 view .LVU4893
3256:src/xeq.c     **** 			dn_minus(&n, &n);
 18978              		.loc 1 3256 6 is_stmt 0 view .LVU4894
 18979 0036 9DF90830 		ldrsb	r3, [sp, #8]
 18980 003a 002B     		cmp	r3, #0
 18981 003c C0F29080 		blt	.L1365
 18982              	.L1342:
3258:src/xeq.c     **** 		decNumberTrunc(&f, &i);			// f = fff
 18983              		.loc 1 3258 3 is_stmt 1 view .LVU4895
 18984 0040 0322     		movs	r2, #3
 18985 0042 24A9     		add	r1, sp, #144
 18986 0044 09A8     		add	r0, sp, #36
 18987 0046 FFF7FEFF 		bl	dn_mulpow10
 18988              	.LVL1434:
3259:src/xeq.c     **** 		dn_subtract(&i, &i, &f);		// i = .ii
 18989              		.loc 1 3259 3 view .LVU4896
 18990 004a 09A9     		add	r1, sp, #36
 18991 004c 12A8     		add	r0, sp, #72
 18992 004e FFF7FEFF 		bl	decNumberTrunc
 18993              	.LVL1435:
3260:src/xeq.c     **** 		dn_mul100(&x, &i);
 18994              		.loc 1 3260 3 view .LVU4897
 18995 0052 09A9     		add	r1, sp, #36
 18996 0054 12AA     		add	r2, sp, #72
 18997 0056 0846     		mov	r0, r1
ARM GAS  /tmp/cc0UaEmF.s 			page 510


 18998 0058 FFF7FEFF 		bl	dn_subtract
 18999              	.LVL1436:
3261:src/xeq.c     **** 		decNumberTrunc(&i, &x);			// i = ii
 19000              		.loc 1 3261 3 view .LVU4898
 19001 005c 09A9     		add	r1, sp, #36
 19002 005e 6846     		mov	r0, sp
 19003 0060 FFF7FEFF 		bl	dn_mul100
 19004              	.LVL1437:
3262:src/xeq.c     **** 		if (dn_eq0(&i))
 19005              		.loc 1 3262 3 view .LVU4899
 19006 0064 6946     		mov	r1, sp
 19007 0066 09A8     		add	r0, sp, #36
 19008 0068 FFF7FEFF 		bl	decNumberTrunc
 19009              	.LVL1438:
3263:src/xeq.c     **** 			dn_1(&i);
 19010              		.loc 1 3263 3 view .LVU4900
3263:src/xeq.c     **** 			dn_1(&i);
 19011              		.loc 1 3263 7 is_stmt 0 view .LVU4901
 19012 006c 09A8     		add	r0, sp, #36
 19013 006e FFF7FEFF 		bl	dn_eq0
 19014              	.LVL1439:
3263:src/xeq.c     **** 			dn_1(&i);
 19015              		.loc 1 3263 6 view .LVU4902
 19016 0072 98BB     		cbnz	r0, .L1366
3266:src/xeq.c     **** 			dn_add(&n, &n, &i);
 19017              		.loc 1 3266 3 is_stmt 1 view .LVU4903
3267:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 19018              		.loc 1 3267 4 is_stmt 0 view .LVU4904
 19019 0074 1BA9     		add	r1, sp, #108
3266:src/xeq.c     **** 			dn_add(&n, &n, &i);
 19020              		.loc 1 3266 6 view .LVU4905
 19021 0076 3B2C     		cmp	r4, #59
3267:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 19022              		.loc 1 3267 4 view .LVU4906
 19023 0078 09AA     		add	r2, sp, #36
 19024 007a 0846     		mov	r0, r1
3266:src/xeq.c     **** 			dn_add(&n, &n, &i);
 19025              		.loc 1 3266 6 view .LVU4907
 19026 007c 36D0     		beq	.L1344
 19027              	.L1369:
3266:src/xeq.c     **** 			dn_add(&n, &n, &i);
 19028              		.loc 1 3266 22 discriminator 1 view .LVU4908
 19029 007e 3D2C     		cmp	r4, #61
 19030 0080 1DD1     		bne	.L1345
3267:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 19031              		.loc 1 3267 4 is_stmt 1 view .LVU4909
 19032 0082 FFF7FEFF 		bl	dn_add
 19033              	.LVL1440:
3268:src/xeq.c     **** 			if (op == RARG_ISE)
 19034              		.loc 1 3268 4 view .LVU4910
 19035 0086 1BAA     		add	r2, sp, #108
 19036 0088 12A9     		add	r1, sp, #72
 19037 008a 6846     		mov	r0, sp
 19038 008c FFF7FEFF 		bl	dn_compare
 19039              	.LVL1441:
3269:src/xeq.c     **** 				fin_tst(dn_gt0(&x));
 19040              		.loc 1 3269 4 view .LVU4911
ARM GAS  /tmp/cc0UaEmF.s 			page 511


3270:src/xeq.c     **** 			else
 19041              		.loc 1 3270 5 view .LVU4912
3270:src/xeq.c     **** 			else
 19042              		.loc 1 3270 13 is_stmt 0 view .LVU4913
 19043 0090 6846     		mov	r0, sp
 19044 0092 FFF7FEFF 		bl	dn_le0
 19045              	.LVL1442:
3270:src/xeq.c     **** 			else
 19046              		.loc 1 3270 5 view .LVU4914
 19047 0096 B0FA80F0 		clz	r0, r0
 19048 009a 4009     		lsrs	r0, r0, #5
 19049 009c FFF7FEFF 		bl	fin_tst
 19050              	.LVL1443:
 19051              	.L1346:
3283:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
 19052              		.loc 1 3283 3 is_stmt 1 view .LVU4915
3283:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
 19053              		.loc 1 3283 6 is_stmt 0 view .LVU4916
 19054 00a0 9DF97430 		ldrsb	r3, [sp, #116]
 19055 00a4 002B     		cmp	r3, #0
3284:src/xeq.c     **** 		} else
 19056              		.loc 1 3284 4 view .LVU4917
 19057 00a6 24AA     		add	r2, sp, #144
 19058 00a8 1BA9     		add	r1, sp, #108
 19059 00aa 6846     		mov	r0, sp
3283:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
 19060              		.loc 1 3283 6 view .LVU4918
 19061 00ac 55DB     		blt	.L1367
3286:src/xeq.c     **** 		setRegister(arg, &x);
 19062              		.loc 1 3286 4 is_stmt 1 view .LVU4919
 19063 00ae FFF7FEFF 		bl	dn_add
 19064              	.LVL1444:
 19065              	.L1349:
3287:src/xeq.c     **** 	}
 19066              		.loc 1 3287 3 discriminator 2 view .LVU4920
 19067 00b2 6946     		mov	r1, sp
 19068 00b4 2846     		mov	r0, r5
 19069 00b6 FFF7FEFF 		bl	setRegister
 19070              	.LVL1445:
 19071              	.L1332:
3287:src/xeq.c     **** 	}
 19072              		.loc 1 3287 3 is_stmt 0 discriminator 2 view .LVU4921
 19073              	.LBE2975:
3289:src/xeq.c     **** 
 19074              		.loc 1 3289 1 view .LVU4922
 19075 00ba 2FB0     		add	sp, sp, #188
 19076              		.cfi_remember_state
 19077              		.cfi_def_cfa_offset 20
 19078              		@ sp needed
 19079 00bc F0BD     		pop	{r4, r5, r6, r7, pc}
 19080              	.LVL1446:
 19081              	.L1345:
 19082              		.cfi_restore_state
 19083              	.LBB2976:
3274:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 19084              		.loc 1 3274 4 is_stmt 1 view .LVU4923
 19085 00be FFF7FEFF 		bl	dn_subtract
ARM GAS  /tmp/cc0UaEmF.s 			page 512


 19086              	.LVL1447:
3275:src/xeq.c     **** 			if (op == RARG_DSL)
 19087              		.loc 1 3275 4 view .LVU4924
 19088 00c2 1BAA     		add	r2, sp, #108
 19089 00c4 12A9     		add	r1, sp, #72
 19090 00c6 6846     		mov	r0, sp
 19091 00c8 FFF7FEFF 		bl	dn_compare
 19092              	.LVL1448:
3276:src/xeq.c     **** 				fin_tst(dn_le0(&x));
 19093              		.loc 1 3276 4 view .LVU4925
3276:src/xeq.c     **** 				fin_tst(dn_le0(&x));
 19094              		.loc 1 3276 7 is_stmt 0 view .LVU4926
 19095 00cc 3C2C     		cmp	r4, #60
3277:src/xeq.c     **** 			else
 19096              		.loc 1 3277 5 view .LVU4927
 19097 00ce 6846     		mov	r0, sp
3276:src/xeq.c     **** 				fin_tst(dn_le0(&x));
 19098              		.loc 1 3276 7 view .LVU4928
 19099 00d0 6AD0     		beq	.L1368
3279:src/xeq.c     **** 		}
 19100              		.loc 1 3279 5 is_stmt 1 view .LVU4929
 19101 00d2 FFF7FEFF 		bl	dn_lt0
 19102              	.LVL1449:
 19103 00d6 FFF7FEFF 		bl	fin_tst
 19104              	.LVL1450:
 19105 00da E1E7     		b	.L1346
 19106              	.L1366:
3264:src/xeq.c     **** 
 19107              		.loc 1 3264 4 view .LVU4930
 19108 00dc 09A8     		add	r0, sp, #36
 19109 00de FFF7FEFF 		bl	dn_1
 19110              	.LVL1451:
3266:src/xeq.c     **** 			dn_add(&n, &n, &i);
 19111              		.loc 1 3266 3 view .LVU4931
3267:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 19112              		.loc 1 3267 4 is_stmt 0 view .LVU4932
 19113 00e2 1BA9     		add	r1, sp, #108
3266:src/xeq.c     **** 			dn_add(&n, &n, &i);
 19114              		.loc 1 3266 6 view .LVU4933
 19115 00e4 3B2C     		cmp	r4, #59
3267:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 19116              		.loc 1 3267 4 view .LVU4934
 19117 00e6 09AA     		add	r2, sp, #36
 19118 00e8 0846     		mov	r0, r1
3266:src/xeq.c     **** 			dn_add(&n, &n, &i);
 19119              		.loc 1 3266 6 view .LVU4935
 19120 00ea C8D1     		bne	.L1369
 19121              	.L1344:
3267:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 19122              		.loc 1 3267 4 is_stmt 1 view .LVU4936
 19123 00ec FFF7FEFF 		bl	dn_add
 19124              	.LVL1452:
3268:src/xeq.c     **** 			if (op == RARG_ISE)
 19125              		.loc 1 3268 4 view .LVU4937
 19126 00f0 1BAA     		add	r2, sp, #108
 19127 00f2 12A9     		add	r1, sp, #72
 19128 00f4 6846     		mov	r0, sp
ARM GAS  /tmp/cc0UaEmF.s 			page 513


 19129 00f6 FFF7FEFF 		bl	dn_compare
 19130              	.LVL1453:
3269:src/xeq.c     **** 				fin_tst(dn_gt0(&x));
 19131              		.loc 1 3269 4 view .LVU4938
3272:src/xeq.c     **** 		} else {
 19132              		.loc 1 3272 5 view .LVU4939
3272:src/xeq.c     **** 		} else {
 19133              		.loc 1 3272 13 is_stmt 0 view .LVU4940
 19134 00fa 6846     		mov	r0, sp
 19135 00fc FFF7FEFF 		bl	dn_lt0
 19136              	.LVL1454:
3272:src/xeq.c     **** 		} else {
 19137              		.loc 1 3272 5 view .LVU4941
 19138 0100 B0FA80F0 		clz	r0, r0
 19139 0104 4009     		lsrs	r0, r0, #5
 19140 0106 FFF7FEFF 		bl	fin_tst
 19141              	.LVL1455:
 19142 010a C9E7     		b	.L1346
 19143              	.LVL1456:
 19144              	.L1364:
3272:src/xeq.c     **** 		} else {
 19145              		.loc 1 3272 5 view .LVU4942
 19146              	.LBE2976:
 19147              	.LBB2977:
3226:src/xeq.c     **** 		int xs;
 19148              		.loc 1 3226 3 is_stmt 1 view .LVU4943
3226:src/xeq.c     **** 		int xs;
 19149              		.loc 1 3226 21 is_stmt 0 view .LVU4944
 19150 010c FFF7FEFF 		bl	get_reg_n_int
 19151              	.LVL1457:
3227:src/xeq.c     **** 		unsigned long long int xv;
 19152              		.loc 1 3227 3 is_stmt 1 view .LVU4945
3228:src/xeq.c     **** 
 19153              		.loc 1 3228 3 view .LVU4946
3230:src/xeq.c     **** 			x = intAdd(x, 1LL);
 19154              		.loc 1 3230 3 view .LVU4947
3230:src/xeq.c     **** 			x = intAdd(x, 1LL);
 19155              		.loc 1 3230 6 is_stmt 0 view .LVU4948
 19156 0110 3B2C     		cmp	r4, #59
3231:src/xeq.c     **** 		else
 19157              		.loc 1 3231 8 view .LVU4949
 19158 0112 4FF00102 		mov	r2, #1
 19159 0116 4FF00003 		mov	r3, #0
3230:src/xeq.c     **** 			x = intAdd(x, 1LL);
 19160              		.loc 1 3230 6 view .LVU4950
 19161 011a 4AD0     		beq	.L1334
3230:src/xeq.c     **** 			x = intAdd(x, 1LL);
 19162              		.loc 1 3230 22 discriminator 1 view .LVU4951
 19163 011c 3D2C     		cmp	r4, #61
 19164 011e 24D1     		bne	.L1370
3231:src/xeq.c     **** 		else
 19165              		.loc 1 3231 4 is_stmt 1 view .LVU4952
3231:src/xeq.c     **** 		else
 19166              		.loc 1 3231 8 is_stmt 0 view .LVU4953
 19167 0120 FFF7FEFF 		bl	intAdd
 19168              	.LVL1458:
3231:src/xeq.c     **** 		else
ARM GAS  /tmp/cc0UaEmF.s 			page 514


 19169              		.loc 1 3231 8 view .LVU4954
 19170 0124 0646     		mov	r6, r0
 19171              	.LBB2978:
 19172              	.LBB2979:
1237:src/xeq.c     **** }
 19173              		.loc 1 1237 8 view .LVU4955
 19174 0126 2846     		mov	r0, r5
 19175              	.LBE2979:
 19176              	.LBE2978:
3231:src/xeq.c     **** 		else
 19177              		.loc 1 3231 8 view .LVU4956
 19178 0128 0C46     		mov	r4, r1
 19179              	.LVL1459:
3234:src/xeq.c     **** 
 19180              		.loc 1 3234 3 is_stmt 1 view .LVU4957
3234:src/xeq.c     **** 
 19181              		.loc 1 3234 3 is_stmt 0 view .LVU4958
 19182 012a CDE92461 		strd	r6, r1, [sp, #144]
 19183              	.LVL1460:
 19184              	.LBB2985:
 19185              	.LBI2978:
1236:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 19186              		.loc 1 1236 6 is_stmt 1 view .LVU4959
 19187              	.LBB2980:
1237:src/xeq.c     **** }
 19188              		.loc 1 1237 2 view .LVU4960
1237:src/xeq.c     **** }
 19189              		.loc 1 1237 8 is_stmt 0 view .LVU4961
 19190 012e FFF7FEFF 		bl	get_reg_n
 19191              	.LVL1461:
1237:src/xeq.c     **** }
 19192              		.loc 1 1237 2 view .LVU4962
 19193 0132 24A9     		add	r1, sp, #144
 19194 0134 0822     		movs	r2, #8
 19195 0136 FFF7FEFF 		bl	xcopy
 19196              	.LVL1462:
1237:src/xeq.c     **** }
 19197              		.loc 1 1237 2 view .LVU4963
 19198              	.LBE2980:
 19199              	.LBE2985:
3236:src/xeq.c     **** 		if (op == RARG_ISG)
 19200              		.loc 1 3236 3 is_stmt 1 view .LVU4964
3236:src/xeq.c     **** 		if (op == RARG_ISG)
 19201              		.loc 1 3236 8 is_stmt 0 view .LVU4965
 19202 013a 24AA     		add	r2, sp, #144
 19203 013c 3046     		mov	r0, r6
 19204 013e 2146     		mov	r1, r4
 19205 0140 FFF7FEFF 		bl	extract_value
 19206              	.LVL1463:
3242:src/xeq.c     **** 		else // if (op == RARG_DSL)
 19207              		.loc 1 3242 18 view .LVU4966
 19208 0144 249B     		ldr	r3, [sp, #144]
 19209              	.LVL1464:
3237:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
 19210              		.loc 1 3237 3 is_stmt 1 view .LVU4967
3239:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 19211              		.loc 1 3239 8 view .LVU4968
ARM GAS  /tmp/cc0UaEmF.s 			page 515


3241:src/xeq.c     **** 			fin_tst(! (xs == 0 || xv == 0));	// >= 0
 19212              		.loc 1 3241 8 view .LVU4969
3242:src/xeq.c     **** 		else // if (op == RARG_DSL)
 19213              		.loc 1 3242 4 view .LVU4970
 19214 0146 23B1     		cbz	r3, .L1353
3242:src/xeq.c     **** 		else // if (op == RARG_DSL)
 19215              		.loc 1 3242 4 is_stmt 0 discriminator 1 view .LVU4971
 19216 0148 50EA0103 		orrs	r3, r0, r1
 19217 014c 14BF     		ite	ne
 19218 014e 0123     		movne	r3, #1
 19219 0150 0023     		moveq	r3, #0
 19220              	.L1353:
3242:src/xeq.c     **** 		else // if (op == RARG_DSL)
 19221              		.loc 1 3242 4 discriminator 6 view .LVU4972
 19222 0152 1846     		mov	r0, r3
 19223              	.LVL1465:
3242:src/xeq.c     **** 		else // if (op == RARG_DSL)
 19224              		.loc 1 3242 4 discriminator 6 view .LVU4973
 19225 0154 FFF7FEFF 		bl	fin_tst
 19226              	.LVL1466:
 19227 0158 AFE7     		b	.L1332
 19228              	.L1367:
3242:src/xeq.c     **** 		else // if (op == RARG_DSL)
 19229              		.loc 1 3242 4 discriminator 6 view .LVU4974
 19230              	.LBE2977:
 19231              	.LBB2990:
3284:src/xeq.c     **** 		} else
 19232              		.loc 1 3284 4 is_stmt 1 view .LVU4975
 19233 015a FFF7FEFF 		bl	dn_subtract
 19234              	.LVL1467:
 19235 015e A8E7     		b	.L1349
 19236              	.L1365:
3257:src/xeq.c     **** 		dn_mulpow10(&i, &u, 3);			// i = fff.ii
 19237              		.loc 1 3257 4 view .LVU4976
 19238 0160 1BA9     		add	r1, sp, #108
 19239 0162 0846     		mov	r0, r1
 19240 0164 FFF7FEFF 		bl	dn_minus
 19241              	.LVL1468:
 19242 0168 6AE7     		b	.L1342
 19243              	.LVL1469:
 19244              	.L1370:
3257:src/xeq.c     **** 		dn_mulpow10(&i, &u, 3);			// i = fff.ii
 19245              		.loc 1 3257 4 is_stmt 0 view .LVU4977
 19246              	.LBE2990:
 19247              	.LBB2991:
3233:src/xeq.c     **** 		set_reg_n_int(arg, x);
 19248              		.loc 1 3233 4 is_stmt 1 view .LVU4978
3233:src/xeq.c     **** 		set_reg_n_int(arg, x);
 19249              		.loc 1 3233 8 is_stmt 0 view .LVU4979
 19250 016a FFF7FEFF 		bl	intSubtract
 19251              	.LVL1470:
3233:src/xeq.c     **** 		set_reg_n_int(arg, x);
 19252              		.loc 1 3233 8 view .LVU4980
 19253 016e 0746     		mov	r7, r0
 19254              	.LBB2986:
 19255              	.LBB2981:
1237:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 516


 19256              		.loc 1 1237 8 view .LVU4981
 19257 0170 2846     		mov	r0, r5
 19258              	.LBE2981:
 19259              	.LBE2986:
3233:src/xeq.c     **** 		set_reg_n_int(arg, x);
 19260              		.loc 1 3233 8 view .LVU4982
 19261 0172 0E46     		mov	r6, r1
 19262              	.LVL1471:
3234:src/xeq.c     **** 
 19263              		.loc 1 3234 3 is_stmt 1 view .LVU4983
3234:src/xeq.c     **** 
 19264              		.loc 1 3234 3 is_stmt 0 view .LVU4984
 19265 0174 CDE92471 		strd	r7, r1, [sp, #144]
 19266              	.LVL1472:
 19267              	.LBB2987:
1236:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 19268              		.loc 1 1236 6 is_stmt 1 view .LVU4985
 19269              	.LBB2982:
1237:src/xeq.c     **** }
 19270              		.loc 1 1237 2 view .LVU4986
1237:src/xeq.c     **** }
 19271              		.loc 1 1237 8 is_stmt 0 view .LVU4987
 19272 0178 FFF7FEFF 		bl	get_reg_n
 19273              	.LVL1473:
1237:src/xeq.c     **** }
 19274              		.loc 1 1237 2 view .LVU4988
 19275 017c 24A9     		add	r1, sp, #144
 19276 017e 0822     		movs	r2, #8
 19277 0180 FFF7FEFF 		bl	xcopy
 19278              	.LVL1474:
1237:src/xeq.c     **** }
 19279              		.loc 1 1237 2 view .LVU4989
 19280              	.LBE2982:
 19281              	.LBE2987:
3236:src/xeq.c     **** 		if (op == RARG_ISG)
 19282              		.loc 1 3236 3 is_stmt 1 view .LVU4990
3236:src/xeq.c     **** 		if (op == RARG_ISG)
 19283              		.loc 1 3236 8 is_stmt 0 view .LVU4991
 19284 0184 24AA     		add	r2, sp, #144
 19285 0186 3846     		mov	r0, r7
 19286 0188 3146     		mov	r1, r6
 19287 018a FFF7FEFF 		bl	extract_value
 19288              	.LVL1475:
3237:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
 19289              		.loc 1 3237 3 is_stmt 1 view .LVU4992
3239:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 19290              		.loc 1 3239 8 view .LVU4993
3239:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 19291              		.loc 1 3239 11 is_stmt 0 view .LVU4994
 19292 018e 3A2C     		cmp	r4, #58
3240:src/xeq.c     **** 		else if (op == RARG_ISE)
 19293              		.loc 1 3240 4 view .LVU4995
 19294 0190 249B     		ldr	r3, [sp, #144]
3239:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 19295              		.loc 1 3239 11 view .LVU4996
 19296 0192 25D0     		beq	.L1371
3244:src/xeq.c     **** 		return;
ARM GAS  /tmp/cc0UaEmF.s 			page 517


 19297              		.loc 1 3244 4 is_stmt 1 view .LVU4997
 19298 0194 13B3     		cbz	r3, .L1355
 19299              	.LVL1476:
 19300              	.L1363:
3244:src/xeq.c     **** 		return;
 19301              		.loc 1 3244 4 is_stmt 0 discriminator 2 view .LVU4998
 19302 0196 50EA0103 		orrs	r3, r0, r1
 19303 019a 0CBF     		ite	eq
 19304 019c 0120     		moveq	r0, #1
 19305 019e 0020     		movne	r0, #0
 19306              	.L1340:
3244:src/xeq.c     **** 		return;
 19307              		.loc 1 3244 4 discriminator 6 view .LVU4999
 19308 01a0 FFF7FEFF 		bl	fin_tst
 19309              	.LVL1477:
3245:src/xeq.c     **** 	} else {
 19310              		.loc 1 3245 3 is_stmt 1 discriminator 6 view .LVU5000
 19311              	.LBE2991:
3289:src/xeq.c     **** 
 19312              		.loc 1 3289 1 is_stmt 0 discriminator 6 view .LVU5001
 19313 01a4 2FB0     		add	sp, sp, #188
 19314              		.cfi_remember_state
 19315              		.cfi_def_cfa_offset 20
 19316              		@ sp needed
 19317 01a6 F0BD     		pop	{r4, r5, r6, r7, pc}
 19318              	.LVL1478:
 19319              	.L1368:
 19320              		.cfi_restore_state
 19321              	.LBB2992:
3277:src/xeq.c     **** 			else
 19322              		.loc 1 3277 5 is_stmt 1 view .LVU5002
 19323 01a8 FFF7FEFF 		bl	dn_le0
 19324              	.LVL1479:
 19325 01ac FFF7FEFF 		bl	fin_tst
 19326              	.LVL1480:
 19327 01b0 76E7     		b	.L1346
 19328              	.LVL1481:
 19329              	.L1334:
3277:src/xeq.c     **** 			else
 19330              		.loc 1 3277 5 is_stmt 0 view .LVU5003
 19331              	.LBE2992:
 19332              	.LBB2993:
3231:src/xeq.c     **** 		else
 19333              		.loc 1 3231 4 is_stmt 1 view .LVU5004
3231:src/xeq.c     **** 		else
 19334              		.loc 1 3231 8 is_stmt 0 view .LVU5005
 19335 01b2 FFF7FEFF 		bl	intAdd
 19336              	.LVL1482:
3231:src/xeq.c     **** 		else
 19337              		.loc 1 3231 8 view .LVU5006
 19338 01b6 0646     		mov	r6, r0
 19339              	.LBB2988:
 19340              	.LBB2983:
1237:src/xeq.c     **** }
 19341              		.loc 1 1237 8 view .LVU5007
 19342 01b8 2846     		mov	r0, r5
 19343              	.LBE2983:
ARM GAS  /tmp/cc0UaEmF.s 			page 518


 19344              	.LBE2988:
3231:src/xeq.c     **** 		else
 19345              		.loc 1 3231 8 view .LVU5008
 19346 01ba 0C46     		mov	r4, r1
 19347              	.LVL1483:
3234:src/xeq.c     **** 
 19348              		.loc 1 3234 3 is_stmt 1 view .LVU5009
3234:src/xeq.c     **** 
 19349              		.loc 1 3234 3 is_stmt 0 view .LVU5010
 19350 01bc CDE92461 		strd	r6, r1, [sp, #144]
 19351              	.LVL1484:
 19352              	.LBB2989:
1236:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 19353              		.loc 1 1236 6 is_stmt 1 view .LVU5011
 19354              	.LBB2984:
1237:src/xeq.c     **** }
 19355              		.loc 1 1237 2 view .LVU5012
1237:src/xeq.c     **** }
 19356              		.loc 1 1237 8 is_stmt 0 view .LVU5013
 19357 01c0 FFF7FEFF 		bl	get_reg_n
 19358              	.LVL1485:
1237:src/xeq.c     **** }
 19359              		.loc 1 1237 2 view .LVU5014
 19360 01c4 24A9     		add	r1, sp, #144
 19361 01c6 0822     		movs	r2, #8
 19362 01c8 FFF7FEFF 		bl	xcopy
 19363              	.LVL1486:
1237:src/xeq.c     **** }
 19364              		.loc 1 1237 2 view .LVU5015
 19365              	.LBE2984:
 19366              	.LBE2989:
3236:src/xeq.c     **** 		if (op == RARG_ISG)
 19367              		.loc 1 3236 3 is_stmt 1 view .LVU5016
3236:src/xeq.c     **** 		if (op == RARG_ISG)
 19368              		.loc 1 3236 8 is_stmt 0 view .LVU5017
 19369 01cc 24AA     		add	r2, sp, #144
 19370 01ce 3046     		mov	r0, r6
 19371 01d0 2146     		mov	r1, r4
 19372 01d2 FFF7FEFF 		bl	extract_value
 19373              	.LVL1487:
3238:src/xeq.c     **** 		else if (op == RARG_DSE)
 19374              		.loc 1 3238 4 view .LVU5018
 19375 01d6 249B     		ldr	r3, [sp, #144]
 19376              	.LVL1488:
3237:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
 19377              		.loc 1 3237 3 is_stmt 1 view .LVU5019
3238:src/xeq.c     **** 		else if (op == RARG_DSE)
 19378              		.loc 1 3238 4 view .LVU5020
 19379 01d8 002B     		cmp	r3, #0
 19380 01da DCD0     		beq	.L1363
 19381              	.LVL1489:
 19382              	.L1355:
3244:src/xeq.c     **** 		return;
 19383              		.loc 1 3244 4 is_stmt 0 view .LVU5021
 19384 01dc 0120     		movs	r0, #1
 19385 01de DFE7     		b	.L1340
 19386              	.LVL1490:
ARM GAS  /tmp/cc0UaEmF.s 			page 519


 19387              	.L1371:
3240:src/xeq.c     **** 		else if (op == RARG_ISE)
 19388              		.loc 1 3240 4 is_stmt 1 view .LVU5022
 19389 01e0 2BB9     		cbnz	r3, .L1354
3240:src/xeq.c     **** 		else if (op == RARG_ISE)
 19390              		.loc 1 3240 4 is_stmt 0 discriminator 1 view .LVU5023
 19391 01e2 50EA0103 		orrs	r3, r0, r1
 19392 01e6 14BF     		ite	ne
 19393 01e8 0120     		movne	r0, #1
 19394              	.LVL1491:
3240:src/xeq.c     **** 		else if (op == RARG_ISE)
 19395              		.loc 1 3240 4 discriminator 1 view .LVU5024
 19396 01ea 0020     		moveq	r0, #0
 19397 01ec D8E7     		b	.L1340
 19398              	.LVL1492:
 19399              	.L1354:
3240:src/xeq.c     **** 		else if (op == RARG_ISE)
 19400              		.loc 1 3240 4 view .LVU5025
 19401 01ee 0020     		movs	r0, #0
 19402              	.LVL1493:
3240:src/xeq.c     **** 		else if (op == RARG_ISE)
 19403              		.loc 1 3240 4 view .LVU5026
 19404 01f0 D6E7     		b	.L1340
 19405              	.L1373:
 19406 01f2 00BF     		.align	2
 19407              	.L1372:
 19408 01f4 00000000 		.word	main_ram
 19409              	.LBE2993:
 19410              		.cfi_endproc
 19411              	.LFE191:
 19413              		.section	.text.op_shift_digit,"ax",%progbits
 19414              		.align	1
 19415              		.p2align 2,,3
 19416              		.global	op_shift_digit
 19417              		.syntax unified
 19418              		.thumb
 19419              		.thumb_func
 19420              		.fpu fpv4-sp-d16
 19422              	op_shift_digit:
 19423              	.LVL1494:
 19424              	.LFB192:
3294:src/xeq.c     **** 	decNumber x;
 19425              		.loc 1 3294 51 is_stmt 1 view -0
 19426              		.cfi_startproc
 19427              		@ args = 0, pretend = 0, frame = 40
 19428              		@ frame_needed = 0, uses_anonymous_args = 0
3295:src/xeq.c     **** 	int adjust = n;
 19429              		.loc 1 3295 2 view .LVU5028
3296:src/xeq.c     **** 
 19430              		.loc 1 3296 2 view .LVU5029
3298:src/xeq.c     **** 		bad_mode_error();
 19431              		.loc 1 3298 6 is_stmt 0 view .LVU5030
 19432 0000 174B     		ldr	r3, .L1383
 19433 0002 1B68     		ldr	r3, [r3]
 19434 0004 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 19435              	.LVL1495:
3298:src/xeq.c     **** 		bad_mode_error();
ARM GAS  /tmp/cc0UaEmF.s 			page 520


 19436              		.loc 1 3298 2 is_stmt 1 view .LVU5031
3298:src/xeq.c     **** 		bad_mode_error();
 19437              		.loc 1 3298 5 is_stmt 0 view .LVU5032
 19438 0008 DB07     		lsls	r3, r3, #31
 19439 000a 06D5     		bpl	.L1375
3299:src/xeq.c     **** 		return;
 19440              		.loc 1 3299 3 is_stmt 1 view .LVU5033
 19441              	.LBB3005:
 19442              	.LBI3005:
 566:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 19443              		.loc 1 566 6 view .LVU5034
 19444              	.LBE3005:
 567:src/xeq.c     **** }
 19445              		.loc 1 567 2 view .LVU5035
 19446              	.LVL1496:
 19447              	.LBB3010:
 19448              	.LBB3006:
 19449              	.LBI3006:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 19450              		.loc 1 537 5 view .LVU5036
 19451              	.LBB3007:
 538:src/xeq.c     **** 		Error = e;
 19452              		.loc 1 538 2 view .LVU5037
 538:src/xeq.c     **** 		Error = e;
 19453              		.loc 1 538 12 is_stmt 0 view .LVU5038
 19454 000c 154B     		ldr	r3, .L1383+4
 538:src/xeq.c     **** 		Error = e;
 19455              		.loc 1 538 5 view .LVU5039
 19456 000e 1A68     		ldr	r2, [r3]
 19457 0010 12B9     		cbnz	r2, .L1381
 19458              	.LVL1497:
 19459              	.LBB3008:
 19460              	.LBI3008:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 19461              		.loc 1 537 5 is_stmt 1 view .LVU5040
 19462              	.LBB3009:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 19463              		.loc 1 539 3 view .LVU5041
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 19464              		.loc 1 539 9 is_stmt 0 view .LVU5042
 19465 0012 0D22     		movs	r2, #13
 19466 0014 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 19467              		.loc 1 540 3 is_stmt 1 view .LVU5043
 19468 0016 7047     		bx	lr
 19469              	.LVL1498:
 19470              	.L1381:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 19471              		.loc 1 540 3 is_stmt 0 view .LVU5044
 19472 0018 7047     		bx	lr
 19473              	.LVL1499:
 19474              	.L1375:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 19475              		.loc 1 540 3 view .LVU5045
 19476              	.LBE3009:
 19477              	.LBE3008:
 19478              	.LBE3007:
ARM GAS  /tmp/cc0UaEmF.s 			page 521


 19479              	.LBE3006:
 19480              	.LBE3010:
3302:src/xeq.c     **** 	setlastX();
 19481              		.loc 1 3302 2 is_stmt 1 view .LVU5046
3294:src/xeq.c     **** 	decNumber x;
 19482              		.loc 1 3294 51 is_stmt 0 view .LVU5047
 19483 001a 30B5     		push	{r4, r5, lr}
 19484              		.cfi_def_cfa_offset 12
 19485              		.cfi_offset 4, -12
 19486              		.cfi_offset 5, -8
 19487              		.cfi_offset 14, -4
 19488 001c 8BB0     		sub	sp, sp, #44
 19489              		.cfi_def_cfa_offset 56
 19490              	.LVL1500:
 19491              	.LBB3011:
 19492              	.LBI3011:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 19493              		.loc 1 805 12 is_stmt 1 view .LVU5048
 19494              	.LBB3012:
 806:src/xeq.c     **** }
 19495              		.loc 1 806 2 view .LVU5049
 19496 001e 0446     		mov	r4, r0
 19497 0020 0D46     		mov	r5, r1
 806:src/xeq.c     **** }
 19498              		.loc 1 806 9 is_stmt 0 view .LVU5050
 19499 0022 01A8     		add	r0, sp, #4
 19500              	.LVL1501:
 806:src/xeq.c     **** }
 19501              		.loc 1 806 9 view .LVU5051
 19502 0024 6421     		movs	r1, #100
 19503              	.LVL1502:
 806:src/xeq.c     **** }
 19504              		.loc 1 806 9 view .LVU5052
 19505 0026 FFF7FEFF 		bl	getRegister
 19506              	.LVL1503:
 806:src/xeq.c     **** }
 19507              		.loc 1 806 9 view .LVU5053
 19508              	.LBE3012:
 19509              	.LBE3011:
3303:src/xeq.c     **** 	if (decNumberIsSpecial(&x) || dn_eq0(&x))
 19510              		.loc 1 3303 2 is_stmt 1 view .LVU5054
 19511              	.LBB3013:
 19512              	.LBI3013:
 773:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 19513              		.loc 1 773 6 view .LVU5055
 19514              	.LBB3014:
 774:src/xeq.c     **** }
 19515              		.loc 1 774 2 view .LVU5056
 19516 002a 6421     		movs	r1, #100
 19517 002c 6C20     		movs	r0, #108
 19518 002e FFF7FEFF 		bl	copyreg_n
 19519              	.LVL1504:
 19520              	.LBE3014:
 19521              	.LBE3013:
3304:src/xeq.c     **** 		return;
 19522              		.loc 1 3304 2 view .LVU5057
3304:src/xeq.c     **** 		return;
ARM GAS  /tmp/cc0UaEmF.s 			page 522


 19523              		.loc 1 3304 5 is_stmt 0 view .LVU5058
 19524 0032 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 19525 0036 13F0700F 		tst	r3, #112
 19526 003a 0ED1     		bne	.L1374
3304:src/xeq.c     **** 		return;
 19527              		.loc 1 3304 32 discriminator 1 view .LVU5059
 19528 003c 01A8     		add	r0, sp, #4
 19529 003e FFF7FEFF 		bl	dn_eq0
 19530              	.LVL1505:
3304:src/xeq.c     **** 		return;
 19531              		.loc 1 3304 29 discriminator 1 view .LVU5060
 19532 0042 50B9     		cbnz	r0, .L1374
3306:src/xeq.c     **** 		adjust = -adjust;
 19533              		.loc 1 3306 5 view .LVU5061
 19534 0044 722D     		cmp	r5, #114
3296:src/xeq.c     **** 
 19535              		.loc 1 3296 6 view .LVU5062
 19536 0046 2046     		mov	r0, r4
3306:src/xeq.c     **** 		adjust = -adjust;
 19537              		.loc 1 3306 2 is_stmt 1 view .LVU5063
3307:src/xeq.c     **** 	x.exponent += adjust;
 19538              		.loc 1 3307 3 view .LVU5064
3307:src/xeq.c     **** 	x.exponent += adjust;
 19539              		.loc 1 3307 10 is_stmt 0 view .LVU5065
 19540 0048 08BF     		it	eq
 19541 004a 6042     		rsbeq	r0, r4, #0
 19542              	.LVL1506:
3308:src/xeq.c     **** 	setX(&x);
 19543              		.loc 1 3308 2 is_stmt 1 view .LVU5066
3308:src/xeq.c     **** 	setX(&x);
 19544              		.loc 1 3308 13 is_stmt 0 view .LVU5067
 19545 004c 029C     		ldr	r4, [sp, #8]
 19546              	.LVL1507:
 19547              	.LBB3015:
 19548              	.LBB3016:
 810:src/xeq.c     **** }
 19549              		.loc 1 810 2 view .LVU5068
 19550 004e 01A9     		add	r1, sp, #4
 19551              	.LBE3016:
 19552              	.LBE3015:
3308:src/xeq.c     **** 	setX(&x);
 19553              		.loc 1 3308 13 view .LVU5069
 19554 0050 0444     		add	r4, r4, r0
 19555              	.LBB3019:
 19556              	.LBB3017:
 810:src/xeq.c     **** }
 19557              		.loc 1 810 2 view .LVU5070
 19558 0052 6420     		movs	r0, #100
 19559              	.LVL1508:
 810:src/xeq.c     **** }
 19560              		.loc 1 810 2 view .LVU5071
 19561              	.LBE3017:
 19562              	.LBE3019:
3308:src/xeq.c     **** 	setX(&x);
 19563              		.loc 1 3308 13 view .LVU5072
 19564 0054 0294     		str	r4, [sp, #8]
3309:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 523


 19565              		.loc 1 3309 2 is_stmt 1 view .LVU5073
 19566              	.LVL1509:
 19567              	.LBB3020:
 19568              	.LBI3015:
 809:src/xeq.c     **** 	setRegister(regX_idx, x);
 19569              		.loc 1 809 6 view .LVU5074
 19570              	.LBB3018:
 810:src/xeq.c     **** }
 19571              		.loc 1 810 2 view .LVU5075
 19572 0056 FFF7FEFF 		bl	setRegister
 19573              	.LVL1510:
 19574              	.L1374:
 810:src/xeq.c     **** }
 19575              		.loc 1 810 2 is_stmt 0 view .LVU5076
 19576              	.LBE3018:
 19577              	.LBE3020:
3310:src/xeq.c     **** 
 19578              		.loc 1 3310 1 view .LVU5077
 19579 005a 0BB0     		add	sp, sp, #44
 19580              		.cfi_def_cfa_offset 12
 19581              		@ sp needed
 19582 005c 30BD     		pop	{r4, r5, pc}
 19583              	.L1384:
 19584 005e 00BF     		.align	2
 19585              	.L1383:
 19586 0060 00000000 		.word	main_ram
 19587 0064 00000000 		.word	Error
 19588              		.cfi_endproc
 19589              	.LFE192:
 19591              		.section	.text.get_user_flag,"ax",%progbits
 19592              		.align	1
 19593              		.p2align 2,,3
 19594              		.global	get_user_flag
 19595              		.syntax unified
 19596              		.thumb
 19597              		.thumb_func
 19598              		.fpu fpv4-sp-d16
 19600              	get_user_flag:
 19601              	.LVL1511:
 19602              	.LFB194:
3343:src/xeq.c     **** 	unsigned short mask;
 19603              		.loc 1 3343 26 is_stmt 1 view -0
 19604              		.cfi_startproc
 19605              		@ args = 0, pretend = 0, frame = 8
 19606              		@ frame_needed = 0, uses_anonymous_args = 0
3344:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
 19607              		.loc 1 3344 2 view .LVU5079
3345:src/xeq.c     **** 
 19608              		.loc 1 3345 2 view .LVU5080
3343:src/xeq.c     **** 	unsigned short mask;
 19609              		.loc 1 3343 26 is_stmt 0 view .LVU5081
 19610 0000 00B5     		push	{lr}
 19611              		.cfi_def_cfa_offset 4
 19612              		.cfi_offset 14, -4
 19613 0002 83B0     		sub	sp, sp, #12
 19614              		.cfi_def_cfa_offset 16
3345:src/xeq.c     **** 
ARM GAS  /tmp/cc0UaEmF.s 			page 524


 19615              		.loc 1 3345 34 view .LVU5082
 19616 0004 0DF10601 		add	r1, sp, #6
 19617 0008 FFF7FEFF 		bl	flag_word
 19618              	.LVL1512:
3347:src/xeq.c     **** }
 19619              		.loc 1 3347 2 is_stmt 1 view .LVU5083
3347:src/xeq.c     **** }
 19620              		.loc 1 3347 24 is_stmt 0 view .LVU5084
 19621 000c BDF80630 		ldrh	r3, [sp, #6]
 19622 0010 0288     		ldrh	r2, [r0]
 19623 0012 1A42     		tst	r2, r3
3348:src/xeq.c     **** 
 19624              		.loc 1 3348 1 view .LVU5085
 19625 0014 14BF     		ite	ne
 19626 0016 0120     		movne	r0, #1
 19627              	.LVL1513:
3348:src/xeq.c     **** 
 19628              		.loc 1 3348 1 view .LVU5086
 19629 0018 0020     		moveq	r0, #0
 19630 001a 03B0     		add	sp, sp, #12
 19631              		.cfi_def_cfa_offset 4
 19632              		@ sp needed
 19633 001c 5DF804FB 		ldr	pc, [sp], #4
 19634              		.cfi_endproc
 19635              	.LFE194:
 19637              		.section	.text.cmdflag,"ax",%progbits
 19638              		.align	1
 19639              		.p2align 2,,3
 19640              		.global	cmdflag
 19641              		.syntax unified
 19642              		.thumb
 19643              		.thumb_func
 19644              		.fpu fpv4-sp-d16
 19646              	cmdflag:
 19647              	.LVL1514:
 19648              	.LFB196:
3371:src/xeq.c     **** 	unsigned short mask;
 19649              		.loc 1 3371 46 is_stmt 1 view -0
 19650              		.cfi_startproc
 19651              		@ args = 0, pretend = 0, frame = 8
 19652              		@ frame_needed = 0, uses_anonymous_args = 0
3372:src/xeq.c     **** 	unsigned short *const f = flag_word(arg, &mask);
 19653              		.loc 1 3372 2 view .LVU5088
3373:src/xeq.c     **** 	int flg = *f & mask;
 19654              		.loc 1 3373 2 view .LVU5089
3371:src/xeq.c     **** 	unsigned short mask;
 19655              		.loc 1 3371 46 is_stmt 0 view .LVU5090
 19656 0000 70B5     		push	{r4, r5, r6, lr}
 19657              		.cfi_def_cfa_offset 16
 19658              		.cfi_offset 4, -16
 19659              		.cfi_offset 5, -12
 19660              		.cfi_offset 6, -8
 19661              		.cfi_offset 14, -4
 19662 0002 82B0     		sub	sp, sp, #8
 19663              		.cfi_def_cfa_offset 24
3371:src/xeq.c     **** 	unsigned short mask;
 19664              		.loc 1 3371 46 view .LVU5091
ARM GAS  /tmp/cc0UaEmF.s 			page 525


 19665 0004 0C46     		mov	r4, r1
3373:src/xeq.c     **** 	int flg = *f & mask;
 19666              		.loc 1 3373 28 view .LVU5092
 19667 0006 0DF10601 		add	r1, sp, #6
 19668              	.LVL1515:
3371:src/xeq.c     **** 	unsigned short mask;
 19669              		.loc 1 3371 46 view .LVU5093
 19670 000a 0646     		mov	r6, r0
3373:src/xeq.c     **** 	int flg = *f & mask;
 19671              		.loc 1 3373 28 view .LVU5094
 19672 000c FFF7FEFF 		bl	flag_word
 19673              	.LVL1516:
3374:src/xeq.c     **** 
 19674              		.loc 1 3374 15 view .LVU5095
 19675 0010 BDF80620 		ldrh	r2, [sp, #6]
3374:src/xeq.c     **** 
 19676              		.loc 1 3374 12 view .LVU5096
 19677 0014 0388     		ldrh	r3, [r0]
 19678 0016 A4F15101 		sub	r1, r4, #81
3373:src/xeq.c     **** 	int flg = *f & mask;
 19679              		.loc 1 3373 28 view .LVU5097
 19680 001a 0546     		mov	r5, r0
 19681              	.LVL1517:
3374:src/xeq.c     **** 
 19682              		.loc 1 3374 2 is_stmt 1 view .LVU5098
3374:src/xeq.c     **** 
 19683              		.loc 1 3374 6 is_stmt 0 view .LVU5099
 19684 001c 03EA0200 		and	r0, r3, r2
 19685              	.LVL1518:
3376:src/xeq.c     **** 	case RARG_SF:	flg = 1;			   break;
 19686              		.loc 1 3376 2 is_stmt 1 view .LVU5100
 19687 0020 0A29     		cmp	r1, #10
 19688 0022 1AD8     		bhi	.L1387
 19689 0024 DFE801F0 		tbb	[pc, r1]
 19690              	.L1390:
 19691 0028 23       		.byte	(.L1400-.L1390)/2
 19692 0029 0E       		.byte	(.L1399-.L1390)/2
 19693 002a 46       		.byte	(.L1398-.L1390)/2
 19694 002b 29       		.byte	(.L1411-.L1390)/2
 19695 002c 26       		.byte	(.L1396-.L1390)/2
 19696 002d 09       		.byte	(.L1410-.L1390)/2
 19697 002e 1E       		.byte	(.L1409-.L1390)/2
 19698 002f 2D       		.byte	(.L1393-.L1390)/2
 19699 0030 06       		.byte	(.L1392-.L1390)/2
 19700 0031 1B       		.byte	(.L1391-.L1390)/2
 19701 0032 3A       		.byte	(.L1389-.L1390)/2
 19702 0033 00       		.p2align 1
 19703              	.L1392:
3388:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 19704              		.loc 1 3388 17 view .LVU5101
 19705 0034 B0FA80F0 		clz	r0, r0
 19706              	.LVL1519:
3388:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 19707              		.loc 1 3388 17 is_stmt 0 view .LVU5102
 19708 0038 4009     		lsrs	r0, r0, #5
 19709              	.L1410:
3388:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
ARM GAS  /tmp/cc0UaEmF.s 			page 526


 19710              		.loc 1 3388 17 view .LVU5103
 19711 003a FFF7FEFF 		bl	fin_tst
 19712              	.LVL1520:
3388:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 19713              		.loc 1 3388 33 is_stmt 1 view .LVU5104
3388:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 19714              		.loc 1 3388 45 view .LVU5105
3397:src/xeq.c     **** 		*f |= mask;
 19715              		.loc 1 3397 2 view .LVU5106
 19716 003e 2B88     		ldrh	r3, [r5]
 19717 0040 BDF80620 		ldrh	r2, [sp, #6]
 19718              	.LVL1521:
 19719              	.L1399:
3400:src/xeq.c     **** 
 19720              		.loc 1 3400 3 view .LVU5107
3400:src/xeq.c     **** 
 19721              		.loc 1 3400 6 is_stmt 0 view .LVU5108
 19722 0044 23EA0203 		bic	r3, r3, r2
 19723 0048 0021     		movs	r1, #0
 19724              	.L1402:
3402:src/xeq.c     **** 		dot( BIG_EQ, flg );
 19725              		.loc 1 3402 5 view .LVU5109
 19726 004a 682E     		cmp	r6, #104
 19727 004c 2B80     		strh	r3, [r5]	@ movhi
3402:src/xeq.c     **** 		dot( BIG_EQ, flg );
 19728              		.loc 1 3402 2 is_stmt 1 view .LVU5110
3402:src/xeq.c     **** 		dot( BIG_EQ, flg );
 19729              		.loc 1 3402 5 is_stmt 0 view .LVU5111
 19730 004e 04D1     		bne	.L1387
3403:src/xeq.c     **** 		finish_display(); // BIG_EQ
 19731              		.loc 1 3403 3 is_stmt 1 view .LVU5112
 19732 0050 8320     		movs	r0, #131
 19733 0052 FFF7FEFF 		bl	dot
 19734              	.LVL1522:
3404:src/xeq.c     **** 	}
 19735              		.loc 1 3404 3 view .LVU5113
 19736 0056 FFF7FEFF 		bl	finish_display
 19737              	.LVL1523:
 19738              	.L1387:
3406:src/xeq.c     **** 
 19739              		.loc 1 3406 1 is_stmt 0 view .LVU5114
 19740 005a 02B0     		add	sp, sp, #8
 19741              		.cfi_remember_state
 19742              		.cfi_def_cfa_offset 16
 19743              		@ sp needed
 19744 005c 70BD     		pop	{r4, r5, r6, pc}
 19745              	.LVL1524:
 19746              	.L1391:
 19747              		.cfi_restore_state
3389:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 19748              		.loc 1 3389 17 is_stmt 1 view .LVU5115
 19749 005e B0FA80F0 		clz	r0, r0
 19750              	.LVL1525:
3389:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 19751              		.loc 1 3389 17 is_stmt 0 view .LVU5116
 19752 0062 4009     		lsrs	r0, r0, #5
 19753              	.L1409:
ARM GAS  /tmp/cc0UaEmF.s 			page 527


3389:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 19754              		.loc 1 3389 17 view .LVU5117
 19755 0064 FFF7FEFF 		bl	fin_tst
 19756              	.LVL1526:
3389:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 19757              		.loc 1 3389 33 is_stmt 1 view .LVU5118
3389:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 19758              		.loc 1 3389 45 view .LVU5119
3397:src/xeq.c     **** 		*f |= mask;
 19759              		.loc 1 3397 2 view .LVU5120
 19760 0068 2B88     		ldrh	r3, [r5]
 19761 006a BDF80620 		ldrh	r2, [sp, #6]
 19762              	.LVL1527:
 19763              	.L1400:
3398:src/xeq.c     **** 	else
 19764              		.loc 1 3398 3 view .LVU5121
3398:src/xeq.c     **** 	else
 19765              		.loc 1 3398 6 is_stmt 0 view .LVU5122
 19766 006e 1343     		orrs	r3, r3, r2
 19767 0070 0121     		movs	r1, #1
 19768 0072 EAE7     		b	.L1402
 19769              	.LVL1528:
 19770              	.L1396:
3382:src/xeq.c     **** 
 19771              		.loc 1 3382 16 is_stmt 1 view .LVU5123
 19772 0074 B0FA80F0 		clz	r0, r0
 19773              	.LVL1529:
3382:src/xeq.c     **** 
 19774              		.loc 1 3382 16 is_stmt 0 view .LVU5124
 19775 0078 4009     		lsrs	r0, r0, #5
 19776              	.L1411:
3382:src/xeq.c     **** 
 19777              		.loc 1 3382 16 view .LVU5125
 19778 007a FFF7FEFF 		bl	fin_tst
 19779              	.LVL1530:
3382:src/xeq.c     **** 
 19780              		.loc 1 3382 37 is_stmt 1 view .LVU5126
3406:src/xeq.c     **** 
 19781              		.loc 1 3406 1 is_stmt 0 view .LVU5127
 19782 007e 02B0     		add	sp, sp, #8
 19783              		.cfi_remember_state
 19784              		.cfi_def_cfa_offset 16
 19785              		@ sp needed
 19786 0080 70BD     		pop	{r4, r5, r6, pc}
 19787              	.LVL1531:
 19788              	.L1393:
 19789              		.cfi_restore_state
3386:src/xeq.c     **** 
 19790              		.loc 1 3386 17 is_stmt 1 view .LVU5128
3386:src/xeq.c     **** 
 19791              		.loc 1 3386 45 is_stmt 0 view .LVU5129
 19792 0082 B0FA80F4 		clz	r4, r0
 19793 0086 6409     		lsrs	r4, r4, #5
3386:src/xeq.c     **** 
 19794              		.loc 1 3386 17 view .LVU5130
 19795 0088 FFF7FEFF 		bl	fin_tst
 19796              	.LVL1532:
ARM GAS  /tmp/cc0UaEmF.s 			page 528


3386:src/xeq.c     **** 
 19797              		.loc 1 3386 31 is_stmt 1 view .LVU5131
3386:src/xeq.c     **** 
 19798              		.loc 1 3386 52 view .LVU5132
3397:src/xeq.c     **** 		*f |= mask;
 19799              		.loc 1 3397 2 view .LVU5133
 19800 008c 2B88     		ldrh	r3, [r5]
 19801 008e BDF80620 		ldrh	r2, [sp, #6]
3397:src/xeq.c     **** 		*f |= mask;
 19802              		.loc 1 3397 5 is_stmt 0 view .LVU5134
 19803 0092 002C     		cmp	r4, #0
 19804 0094 D6D0     		beq	.L1399
 19805              	.L1412:
 19806              	.LVL1533:
3398:src/xeq.c     **** 	else
 19807              		.loc 1 3398 3 is_stmt 1 view .LVU5135
3398:src/xeq.c     **** 	else
 19808              		.loc 1 3398 6 is_stmt 0 view .LVU5136
 19809 0096 1343     		orrs	r3, r3, r2
 19810 0098 0121     		movs	r1, #1
 19811 009a D6E7     		b	.L1402
 19812              	.LVL1534:
 19813              	.L1389:
3390:src/xeq.c     **** 
 19814              		.loc 1 3390 17 is_stmt 1 view .LVU5137
 19815 009c B0FA80F4 		clz	r4, r0
 19816 00a0 6409     		lsrs	r4, r4, #5
 19817 00a2 2046     		mov	r0, r4
 19818              	.LVL1535:
3390:src/xeq.c     **** 
 19819              		.loc 1 3390 17 is_stmt 0 view .LVU5138
 19820 00a4 FFF7FEFF 		bl	fin_tst
 19821              	.LVL1536:
3390:src/xeq.c     **** 
 19822              		.loc 1 3390 33 is_stmt 1 view .LVU5139
3390:src/xeq.c     **** 
 19823              		.loc 1 3390 52 view .LVU5140
 19824 00a8 2B88     		ldrh	r3, [r5]
 19825 00aa BDF80620 		ldrh	r2, [sp, #6]
3397:src/xeq.c     **** 		*f |= mask;
 19826              		.loc 1 3397 2 view .LVU5141
3397:src/xeq.c     **** 		*f |= mask;
 19827              		.loc 1 3397 5 is_stmt 0 view .LVU5142
 19828 00ae 002C     		cmp	r4, #0
 19829 00b0 C8D0     		beq	.L1399
 19830 00b2 F0E7     		b	.L1412
 19831              	.LVL1537:
 19832              	.L1398:
3379:src/xeq.c     **** 
 19833              		.loc 1 3379 16 is_stmt 1 view .LVU5143
3379:src/xeq.c     **** 
 19834              		.loc 1 3379 29 is_stmt 0 view .LVU5144
 19835 00b4 B0FA80F4 		clz	r4, r0
 19836 00b8 6409     		lsrs	r4, r4, #5
 19837              	.LVL1538:
3379:src/xeq.c     **** 
 19838              		.loc 1 3379 38 is_stmt 1 view .LVU5145
ARM GAS  /tmp/cc0UaEmF.s 			page 529


3397:src/xeq.c     **** 		*f |= mask;
 19839              		.loc 1 3397 2 view .LVU5146
3397:src/xeq.c     **** 		*f |= mask;
 19840              		.loc 1 3397 5 is_stmt 0 view .LVU5147
 19841 00ba 002C     		cmp	r4, #0
 19842 00bc C2D0     		beq	.L1399
 19843 00be EAE7     		b	.L1412
 19844              		.cfi_endproc
 19845              	.LFE196:
 19847              		.section	.text.put_user_flag,"ax",%progbits
 19848              		.align	1
 19849              		.p2align 2,,3
 19850              		.global	put_user_flag
 19851              		.syntax unified
 19852              		.thumb
 19853              		.thumb_func
 19854              		.fpu fpv4-sp-d16
 19856              	put_user_flag:
 19857              	.LVL1539:
 19858              	.LFB195:
3350:src/xeq.c     **** 	if (f)	set_user_flag(n);
 19859              		.loc 1 3350 34 is_stmt 1 view -0
 19860              		.cfi_startproc
 19861              		@ args = 0, pretend = 0, frame = 0
 19862              		@ frame_needed = 0, uses_anonymous_args = 0
 19863              		@ link register save eliminated.
3351:src/xeq.c     **** 	else	clr_user_flag(n);
 19864              		.loc 1 3351 2 view .LVU5149
3351:src/xeq.c     **** 	else	clr_user_flag(n);
 19865              		.loc 1 3351 5 is_stmt 0 view .LVU5150
 19866 0000 11B1     		cbz	r1, .L1414
3351:src/xeq.c     **** 	else	clr_user_flag(n);
 19867              		.loc 1 3351 9 is_stmt 1 discriminator 1 view .LVU5151
 19868 0002 5121     		movs	r1, #81
 19869              	.LVL1540:
3351:src/xeq.c     **** 	else	clr_user_flag(n);
 19870              		.loc 1 3351 9 is_stmt 0 discriminator 1 view .LVU5152
 19871 0004 FFF7FEBF 		b	cmdflag
 19872              	.LVL1541:
 19873              	.L1414:
3352:src/xeq.c     **** }
 19874              		.loc 1 3352 7 is_stmt 1 view .LVU5153
 19875 0008 5221     		movs	r1, #82
 19876              	.LVL1542:
3352:src/xeq.c     **** }
 19877              		.loc 1 3352 7 is_stmt 0 view .LVU5154
 19878 000a FFF7FEBF 		b	cmdflag
 19879              	.LVL1543:
3352:src/xeq.c     **** }
 19880              		.loc 1 3352 7 view .LVU5155
 19881              		.cfi_endproc
 19882              	.LFE195:
 19884 000e 00BF     		.section	.text.clrflags,"ax",%progbits
 19885              		.align	1
 19886              		.p2align 2,,3
 19887              		.global	clrflags
 19888              		.syntax unified
ARM GAS  /tmp/cc0UaEmF.s 			page 530


 19889              		.thumb
 19890              		.thumb_func
 19891              		.fpu fpv4-sp-d16
 19893              	clrflags:
 19894              	.LVL1544:
 19895              	.LFB197:
3410:src/xeq.c     **** 	xset(UserFlags, 0, sizeof(UserFlags));
 19896              		.loc 1 3410 30 is_stmt 1 view -0
 19897              		.cfi_startproc
 19898              		@ args = 0, pretend = 0, frame = 0
 19899              		@ frame_needed = 0, uses_anonymous_args = 0
3411:src/xeq.c     **** 	if (LocalRegs < 0) {
 19900              		.loc 1 3411 2 view .LVU5157
3410:src/xeq.c     **** 	xset(UserFlags, 0, sizeof(UserFlags));
 19901              		.loc 1 3410 30 is_stmt 0 view .LVU5158
 19902 0000 10B5     		push	{r4, lr}
 19903              		.cfi_def_cfa_offset 8
 19904              		.cfi_offset 4, -8
 19905              		.cfi_offset 14, -4
3411:src/xeq.c     **** 	if (LocalRegs < 0) {
 19906              		.loc 1 3411 7 view .LVU5159
 19907 0002 0A4C     		ldr	r4, .L1419
 19908 0004 2068     		ldr	r0, [r4]
 19909              	.LVL1545:
3411:src/xeq.c     **** 	if (LocalRegs < 0) {
 19910              		.loc 1 3411 2 view .LVU5160
 19911 0006 0E22     		movs	r2, #14
 19912 0008 00F5FE60 		add	r0, r0, #2032
 19913 000c 0021     		movs	r1, #0
 19914 000e FFF7FEFF 		bl	xset
 19915              	.LVL1546:
3412:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
 19916              		.loc 1 3412 2 is_stmt 1 view .LVU5161
3412:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
 19917              		.loc 1 3412 6 is_stmt 0 view .LVU5162
 19918 0012 2368     		ldr	r3, [r4]
3412:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
 19919              		.loc 1 3412 5 view .LVU5163
 19920 0014 B3F9DE37 		ldrsh	r3, [r3, #2014]
 19921 0018 002B     		cmp	r3, #0
 19922 001a 00DB     		blt	.L1418
3415:src/xeq.c     **** 
 19923              		.loc 1 3415 1 view .LVU5164
 19924 001c 10BD     		pop	{r4, pc}
 19925              	.L1418:
3413:src/xeq.c     **** 	}
 19926              		.loc 1 3413 3 is_stmt 1 view .LVU5165
3413:src/xeq.c     **** 	}
 19927              		.loc 1 3413 5 is_stmt 0 view .LVU5166
 19928 001e 0021     		movs	r1, #0
 19929 0020 7020     		movs	r0, #112
 19930 0022 FFF7FEFF 		bl	flag_word
 19931              	.LVL1547:
3413:src/xeq.c     **** 	}
 19932              		.loc 1 3413 37 view .LVU5167
 19933 0026 0023     		movs	r3, #0
 19934 0028 0380     		strh	r3, [r0]	@ movhi
ARM GAS  /tmp/cc0UaEmF.s 			page 531


3415:src/xeq.c     **** 
 19935              		.loc 1 3415 1 view .LVU5168
 19936 002a 10BD     		pop	{r4, pc}
 19937              	.L1420:
 19938              		.align	2
 19939              	.L1419:
 19940 002c 00000000 		.word	main_ram
 19941              		.cfi_endproc
 19942              	.LFE197:
 19944              		.section	.text.intws,"ax",%progbits
 19945              		.align	1
 19946              		.p2align 2,,3
 19947              		.global	intws
 19948              		.syntax unified
 19949              		.thumb
 19950              		.thumb_func
 19951              		.fpu fpv4-sp-d16
 19953              	intws:
 19954              	.LVL1548:
 19955              	.LFB198:
3420:src/xeq.c     **** 	if (is_intmode()) {
 19956              		.loc 1 3420 44 is_stmt 1 view -0
 19957              		.cfi_startproc
 19958              		@ args = 0, pretend = 0, frame = 8
 19959              		@ frame_needed = 0, uses_anonymous_args = 0
3421:src/xeq.c     **** 		int i, ss = stack_size();
 19960              		.loc 1 3421 2 view .LVU5170
3420:src/xeq.c     **** 	if (is_intmode()) {
 19961              		.loc 1 3420 44 is_stmt 0 view .LVU5171
 19962 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 19963              		.cfi_def_cfa_offset 24
 19964              		.cfi_offset 4, -24
 19965              		.cfi_offset 5, -20
 19966              		.cfi_offset 6, -16
 19967              		.cfi_offset 7, -12
 19968              		.cfi_offset 8, -8
 19969              		.cfi_offset 14, -4
3421:src/xeq.c     **** 		int i, ss = stack_size();
 19970              		.loc 1 3421 6 view .LVU5172
 19971 0004 DFF8E080 		ldr	r8, .L1432+4
 19972 0008 D8F80030 		ldr	r3, [r8]
 19973 000c 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
3421:src/xeq.c     **** 		int i, ss = stack_size();
 19974              		.loc 1 3421 5 view .LVU5173
 19975 0010 D107     		lsls	r1, r2, #31
 19976              	.LVL1549:
3420:src/xeq.c     **** 	if (is_intmode()) {
 19977              		.loc 1 3420 44 view .LVU5174
 19978 0012 82B0     		sub	sp, sp, #8
 19979              		.cfi_def_cfa_offset 32
3421:src/xeq.c     **** 		int i, ss = stack_size();
 19980              		.loc 1 3421 5 view .LVU5175
 19981 0014 53D5     		bpl	.L1422
 19982              	.LBB3021:
3422:src/xeq.c     **** 		unsigned int oldlen = UState.int_len;
 19983              		.loc 1 3422 3 is_stmt 1 view .LVU5176
 19984              	.LBB3022:
ARM GAS  /tmp/cc0UaEmF.s 			page 532


 19985              	.LBI3022:
 703:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 19986              		.loc 1 703 5 view .LVU5177
 19987              	.LBB3023:
 704:src/xeq.c     **** 		return 4;
 19988              		.loc 1 704 2 view .LVU5178
 704:src/xeq.c     **** 		return 4;
 19989              		.loc 1 704 6 is_stmt 0 view .LVU5179
 19990 0016 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 704:src/xeq.c     **** 		return 4;
 19991              		.loc 1 704 5 view .LVU5180
 19992 001a 1207     		lsls	r2, r2, #28
 19993 001c 58D5     		bpl	.L1426
 19994              	.LBB3024:
 19995              	.LBI3024:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 19996              		.loc 1 182 5 is_stmt 1 view .LVU5181
 19997              	.LBB3025:
 183:src/xeq.c     **** }
 19998              		.loc 1 183 2 view .LVU5182
 183:src/xeq.c     **** }
 19999              		.loc 1 183 9 is_stmt 0 view .LVU5183
 20000 001e B3F8E027 		ldrh	r2, [r3, #2016]
 20001              	.LBE3025:
 20002              	.LBE3024:
 704:src/xeq.c     **** 		return 4;
 20003              		.loc 1 704 27 view .LVU5184
 20004 0022 920B     		lsrs	r2, r2, #14
 20005 0024 032A     		cmp	r2, #3
 20006 0026 55D0     		beq	.L1431
 706:src/xeq.c     **** }
 20007              		.loc 1 706 9 view .LVU5185
 20008 0028 0827     		movs	r7, #8
 20009              	.L1423:
 20010              	.LVL1550:
 706:src/xeq.c     **** }
 20011              		.loc 1 706 9 view .LVU5186
 20012              	.LBE3023:
 20013              	.LBE3022:
3423:src/xeq.c     **** 		long long int v;
 20014              		.loc 1 3423 3 is_stmt 1 view .LVU5187
3423:src/xeq.c     **** 		long long int v;
 20015              		.loc 1 3423 31 is_stmt 0 view .LVU5188
 20016 002a 93F8E967 		ldrb	r6, [r3, #2025]	@ zero_extendqisi2
 20017 002e 00F03F05 		and	r5, r0, #63
 20018 0032 06F03F06 		and	r6, r6, #63
 20019              	.LVL1551:
3424:src/xeq.c     **** 
 20020              		.loc 1 3424 3 is_stmt 1 view .LVU5189
3426:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 20021              		.loc 1 3426 3 view .LVU5190
3426:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 20022              		.loc 1 3426 13 view .LVU5191
 20023 0036 6437     		adds	r7, r7, #100
 20024              	.LVL1552:
3423:src/xeq.c     **** 		long long int v;
 20025              		.loc 1 3423 31 is_stmt 0 view .LVU5192
ARM GAS  /tmp/cc0UaEmF.s 			page 533


 20026 0038 6424     		movs	r4, #100
 20027              	.LVL1553:
 20028              	.L1424:
3427:src/xeq.c     **** 			UState.int_len = arg;
 20029              		.loc 1 3427 4 is_stmt 1 discriminator 3 view .LVU5193
3427:src/xeq.c     **** 			UState.int_len = arg;
 20030              		.loc 1 3427 8 is_stmt 0 discriminator 3 view .LVU5194
 20031 003a 2046     		mov	r0, r4
 20032 003c FFF7FEFF 		bl	get_reg_n_int
 20033              	.LVL1554:
 20034 0040 FFF7FEFF 		bl	mask_value
 20035              	.LVL1555:
3428:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, mask_value(v));
 20036              		.loc 1 3428 4 is_stmt 1 discriminator 3 view .LVU5195
3428:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, mask_value(v));
 20037              		.loc 1 3428 19 is_stmt 0 discriminator 3 view .LVU5196
 20038 0044 D8F80030 		ldr	r3, [r8]
 20039 0048 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 20040 004c 65F30502 		bfi	r2, r5, #0, #6
 20041 0050 83F8E927 		strb	r2, [r3, #2025]
3429:src/xeq.c     **** 			UState.int_len = oldlen;
 20042              		.loc 1 3429 4 is_stmt 1 discriminator 3 view .LVU5197
 20043 0054 FFF7FEFF 		bl	mask_value
 20044              	.LVL1556:
3429:src/xeq.c     **** 			UState.int_len = oldlen;
 20045              		.loc 1 3429 4 is_stmt 0 discriminator 3 view .LVU5198
 20046 0058 0B46     		mov	r3, r1
 20047 005a 0246     		mov	r2, r0
 20048              	.LBB3027:
 20049              	.LBB3028:
1237:src/xeq.c     **** }
 20050              		.loc 1 1237 8 discriminator 3 view .LVU5199
 20051 005c 2046     		mov	r0, r4
 20052 005e CDE90023 		strd	r2, [sp]
 20053              	.LVL1557:
1237:src/xeq.c     **** }
 20054              		.loc 1 1237 8 discriminator 3 view .LVU5200
 20055              	.LBE3028:
 20056              	.LBI3027:
1236:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 20057              		.loc 1 1236 6 is_stmt 1 discriminator 3 view .LVU5201
 20058              	.LBB3029:
1237:src/xeq.c     **** }
 20059              		.loc 1 1237 2 discriminator 3 view .LVU5202
1237:src/xeq.c     **** }
 20060              		.loc 1 1237 8 is_stmt 0 discriminator 3 view .LVU5203
 20061 0062 FFF7FEFF 		bl	get_reg_n
 20062              	.LVL1558:
1237:src/xeq.c     **** }
 20063              		.loc 1 1237 2 discriminator 3 view .LVU5204
 20064 0066 0822     		movs	r2, #8
 20065 0068 6946     		mov	r1, sp
 20066 006a FFF7FEFF 		bl	xcopy
 20067              	.LVL1559:
1237:src/xeq.c     **** }
 20068              		.loc 1 1237 2 discriminator 3 view .LVU5205
 20069              	.LBE3029:
ARM GAS  /tmp/cc0UaEmF.s 			page 534


 20070              	.LBE3027:
3430:src/xeq.c     **** 		}
 20071              		.loc 1 3430 4 is_stmt 1 discriminator 3 view .LVU5206
3430:src/xeq.c     **** 		}
 20072              		.loc 1 3430 19 is_stmt 0 discriminator 3 view .LVU5207
 20073 006e D8F80030 		ldr	r3, [r8]
 20074 0072 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 20075 0076 0134     		adds	r4, r4, #1
 20076              	.LVL1560:
3430:src/xeq.c     **** 		}
 20077              		.loc 1 3430 19 discriminator 3 view .LVU5208
 20078 0078 66F30502 		bfi	r2, r6, #0, #6
3426:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 20079              		.loc 1 3426 3 discriminator 3 view .LVU5209
 20080 007c BC42     		cmp	r4, r7
3430:src/xeq.c     **** 		}
 20081              		.loc 1 3430 19 discriminator 3 view .LVU5210
 20082 007e 83F8E927 		strb	r2, [r3, #2025]
3426:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 20083              		.loc 1 3426 19 is_stmt 1 discriminator 3 view .LVU5211
 20084              	.LVL1561:
3426:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 20085              		.loc 1 3426 13 discriminator 3 view .LVU5212
3426:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 20086              		.loc 1 3426 3 is_stmt 0 discriminator 3 view .LVU5213
 20087 0082 DAD1     		bne	.L1424
3432:src/xeq.c     **** 		UState.int_len = arg;
 20088              		.loc 1 3432 3 is_stmt 1 view .LVU5214
3432:src/xeq.c     **** 		UState.int_len = arg;
 20089              		.loc 1 3432 7 is_stmt 0 view .LVU5215
 20090 0084 6C20     		movs	r0, #108
 20091 0086 FFF7FEFF 		bl	get_reg_n_int
 20092              	.LVL1562:
 20093 008a FFF7FEFF 		bl	mask_value
 20094              	.LVL1563:
3433:src/xeq.c     **** 		set_reg_n_int(regL_idx, mask_value(v));
 20095              		.loc 1 3433 3 is_stmt 1 view .LVU5216
3433:src/xeq.c     **** 		set_reg_n_int(regL_idx, mask_value(v));
 20096              		.loc 1 3433 18 is_stmt 0 view .LVU5217
 20097 008e D8F80030 		ldr	r3, [r8]
 20098 0092 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 20099 0096 65F30502 		bfi	r2, r5, #0, #6
 20100 009a 83F8E927 		strb	r2, [r3, #2025]
3434:src/xeq.c     **** 	} else
 20101              		.loc 1 3434 3 is_stmt 1 view .LVU5218
 20102 009e FFF7FEFF 		bl	mask_value
 20103              	.LVL1564:
3434:src/xeq.c     **** 	} else
 20104              		.loc 1 3434 3 is_stmt 0 view .LVU5219
 20105 00a2 0B46     		mov	r3, r1
 20106 00a4 0246     		mov	r2, r0
 20107              	.LBB3030:
 20108              	.LBB3031:
1237:src/xeq.c     **** }
 20109              		.loc 1 1237 8 view .LVU5220
 20110 00a6 6C20     		movs	r0, #108
 20111 00a8 CDE90023 		strd	r2, [sp]
ARM GAS  /tmp/cc0UaEmF.s 			page 535


 20112              	.LVL1565:
1237:src/xeq.c     **** }
 20113              		.loc 1 1237 8 view .LVU5221
 20114              	.LBE3031:
 20115              	.LBI3030:
1236:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 20116              		.loc 1 1236 6 is_stmt 1 view .LVU5222
 20117              	.LBB3032:
1237:src/xeq.c     **** }
 20118              		.loc 1 1237 2 view .LVU5223
1237:src/xeq.c     **** }
 20119              		.loc 1 1237 8 is_stmt 0 view .LVU5224
 20120 00ac FFF7FEFF 		bl	get_reg_n
 20121              	.LVL1566:
1237:src/xeq.c     **** }
 20122              		.loc 1 1237 2 view .LVU5225
 20123 00b0 6946     		mov	r1, sp
 20124 00b2 0822     		movs	r2, #8
 20125 00b4 FFF7FEFF 		bl	xcopy
 20126              	.LVL1567:
1237:src/xeq.c     **** }
 20127              		.loc 1 1237 2 view .LVU5226
 20128              	.LBE3032:
 20129              	.LBE3030:
 20130              	.LBE3021:
3437:src/xeq.c     **** 
 20131              		.loc 1 3437 1 view .LVU5227
 20132 00b8 02B0     		add	sp, sp, #8
 20133              		.cfi_remember_state
 20134              		.cfi_def_cfa_offset 24
 20135              		@ sp needed
 20136 00ba BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 20137              	.LVL1568:
 20138              	.L1422:
 20139              		.cfi_restore_state
3436:src/xeq.c     **** }
 20140              		.loc 1 3436 6 is_stmt 1 view .LVU5228
3436:src/xeq.c     **** }
 20141              		.loc 1 3436 21 is_stmt 0 view .LVU5229
 20142 00be 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 20143 00c2 60F30502 		bfi	r2, r0, #0, #6
 20144              	.LVL1569:
3436:src/xeq.c     **** }
 20145              		.loc 1 3436 21 view .LVU5230
 20146 00c6 83F8E927 		strb	r2, [r3, #2025]
3437:src/xeq.c     **** 
 20147              		.loc 1 3437 1 view .LVU5231
 20148 00ca 02B0     		add	sp, sp, #8
 20149              		.cfi_remember_state
 20150              		.cfi_def_cfa_offset 24
 20151              		@ sp needed
 20152 00cc BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 20153              	.LVL1570:
 20154              	.L1426:
 20155              		.cfi_restore_state
 20156              	.LBB3034:
 20157              	.LBB3033:
ARM GAS  /tmp/cc0UaEmF.s 			page 536


 20158              	.LBB3026:
 705:src/xeq.c     **** 	return 8;
 20159              		.loc 1 705 10 view .LVU5232
 20160 00d0 0427     		movs	r7, #4
 20161 00d2 AAE7     		b	.L1423
 20162              	.L1431:
 704:src/xeq.c     **** 		return 4;
 20163              		.loc 1 704 44 view .LVU5233
 20164 00d4 034A     		ldr	r2, .L1432
 704:src/xeq.c     **** 		return 4;
 20165              		.loc 1 704 41 view .LVU5234
 20166 00d6 92F90120 		ldrsb	r2, [r2, #1]
 705:src/xeq.c     **** 	return 8;
 20167              		.loc 1 705 10 view .LVU5235
 20168 00da 002A     		cmp	r2, #0
 20169 00dc B4BF     		ite	lt
 20170 00de 0827     		movlt	r7, #8
 20171 00e0 0427     		movge	r7, #4
 20172 00e2 A2E7     		b	.L1423
 20173              	.L1433:
 20174              		.align	2
 20175              	.L1432:
 20176 00e4 00000000 		.word	XromParams
 20177 00e8 00000000 		.word	main_ram
 20178              	.LBE3026:
 20179              	.LBE3033:
 20180              	.LBE3034:
 20181              		.cfi_endproc
 20182              	.LFE198:
 20184              		.section	.text.get_maxdenom,"ax",%progbits
 20185              		.align	1
 20186              		.p2align 2,,3
 20187              		.global	get_maxdenom
 20188              		.syntax unified
 20189              		.thumb
 20190              		.thumb_func
 20191              		.fpu fpv4-sp-d16
 20193              	get_maxdenom:
 20194              	.LVL1571:
 20195              	.LFB199:
3443:src/xeq.c     **** 	const unsigned int dm = UState.denom_max;
 20196              		.loc 1 3443 33 is_stmt 1 view -0
 20197              		.cfi_startproc
 20198              		@ args = 0, pretend = 0, frame = 0
 20199              		@ frame_needed = 0, uses_anonymous_args = 0
 20200              		@ link register save eliminated.
3444:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
 20201              		.loc 1 3444 2 view .LVU5237
3444:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
 20202              		.loc 1 3444 32 is_stmt 0 view .LVU5238
 20203 0000 064B     		ldr	r3, .L1436
 20204 0002 1B68     		ldr	r3, [r3]
 20205 0004 D3F8E417 		ldr	r1, [r3, #2020]
3445:src/xeq.c     **** }
 20206              		.loc 1 3445 2 view .LVU5239
 20207 0008 42F20F73 		movw	r3, #9999
3444:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
ARM GAS  /tmp/cc0UaEmF.s 			page 537


 20208              		.loc 1 3444 32 view .LVU5240
 20209 000c C1F38D11 		ubfx	r1, r1, #6, #14
 20210              	.LVL1572:
3445:src/xeq.c     **** }
 20211              		.loc 1 3445 2 is_stmt 1 view .LVU5241
 20212 0010 0029     		cmp	r1, #0
 20213 0012 08BF     		it	eq
 20214 0014 1946     		moveq	r1, r3
 20215 0016 FFF7FEBF 		b	int_to_dn
 20216              	.LVL1573:
 20217              	.L1437:
3445:src/xeq.c     **** }
 20218              		.loc 1 3445 2 is_stmt 0 view .LVU5242
 20219 001a 00BF     		.align	2
 20220              	.L1436:
 20221 001c 00000000 		.word	main_ram
 20222              		.cfi_endproc
 20223              	.LFE199:
 20225              		.section	.rodata.op_2frac.str1.4,"aMS",%progbits,1
 20226              		.align	2
 20227              	.LC4:
 20228 0000 792F7820 		.ascii	"y/x =\000"
 20228      3D00
 20229 0006 0000     		.align	2
 20230              	.LC5:
 20231 0008 792F7820 		.ascii	"y/x \007\344<\000"
 20231      07E43C00 
 20232              		.align	2
 20233              	.LC6:
 20234 0010 792F7820 		.ascii	"y/x \007\344>\000"
 20234      07E43E00 
 20235              		.section	.text.op_2frac,"ax",%progbits
 20236              		.align	1
 20237              		.p2align 2,,3
 20238              		.global	op_2frac
 20239              		.syntax unified
 20240              		.thumb
 20241              		.thumb_func
 20242              		.fpu fpv4-sp-d16
 20244              	op_2frac:
 20245              	.LVL1574:
 20246              	.LFB200:
3448:src/xeq.c     **** 	decNumber z, n, d, t;
 20247              		.loc 1 3448 30 is_stmt 1 view -0
 20248              		.cfi_startproc
 20249              		@ args = 0, pretend = 0, frame = 144
 20250              		@ frame_needed = 0, uses_anonymous_args = 0
3449:src/xeq.c     **** 
 20251              		.loc 1 3449 2 view .LVU5244
3451:src/xeq.c     **** 		setX_int(1);
 20252              		.loc 1 3451 2 view .LVU5245
3451:src/xeq.c     **** 		setX_int(1);
 20253              		.loc 1 3451 6 is_stmt 0 view .LVU5246
 20254 0000 234B     		ldr	r3, .L1450
3448:src/xeq.c     **** 	decNumber z, n, d, t;
 20255              		.loc 1 3448 30 view .LVU5247
 20256 0002 00B5     		push	{lr}
ARM GAS  /tmp/cc0UaEmF.s 			page 538


 20257              		.cfi_def_cfa_offset 4
 20258              		.cfi_offset 14, -4
3451:src/xeq.c     **** 		setX_int(1);
 20259              		.loc 1 3451 6 view .LVU5248
 20260 0004 1B68     		ldr	r3, [r3]
 20261 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3451:src/xeq.c     **** 		setX_int(1);
 20262              		.loc 1 3451 5 view .LVU5249
 20263 000a DA07     		lsls	r2, r3, #31
3448:src/xeq.c     **** 	decNumber z, n, d, t;
 20264              		.loc 1 3448 30 view .LVU5250
 20265 000c A5B0     		sub	sp, sp, #148
 20266              		.cfi_def_cfa_offset 152
3451:src/xeq.c     **** 		setX_int(1);
 20267              		.loc 1 3451 5 view .LVU5251
 20268 000e 2BD4     		bmi	.L1448
3456:src/xeq.c     **** 	decNumber2Fraction(&n, &d, &z);
 20269              		.loc 1 3456 2 is_stmt 1 view .LVU5252
 20270              	.LVL1575:
 20271              	.LBB3035:
 20272              	.LBI3035:
 813:src/xeq.c     **** 	getRegister(y, regY_idx);
 20273              		.loc 1 813 6 view .LVU5253
 20274              	.LBB3036:
 814:src/xeq.c     **** }
 20275              		.loc 1 814 2 view .LVU5254
 20276 0010 6521     		movs	r1, #101
 20277 0012 6846     		mov	r0, sp
 20278              	.LVL1576:
 814:src/xeq.c     **** }
 20279              		.loc 1 814 2 is_stmt 0 view .LVU5255
 20280 0014 FFF7FEFF 		bl	getRegister
 20281              	.LVL1577:
 814:src/xeq.c     **** }
 20282              		.loc 1 814 2 view .LVU5256
 20283              	.LBE3036:
 20284              	.LBE3035:
3457:src/xeq.c     **** 	setXY(&d, &n);			// Set numerator and denominator
 20285              		.loc 1 3457 2 is_stmt 1 view .LVU5257
 20286 0018 6A46     		mov	r2, sp
 20287 001a 12A9     		add	r1, sp, #72
 20288 001c 09A8     		add	r0, sp, #36
 20289 001e FFF7FEFF 		bl	decNumber2Fraction
 20290              	.LVL1578:
3458:src/xeq.c     **** 	if (State2.runmode) {
 20291              		.loc 1 3458 2 view .LVU5258
 20292              	.LBB3037:
 20293              	.LBI3037:
 840:src/xeq.c     **** 	setX(x);
 20294              		.loc 1 840 6 view .LVU5259
 20295              	.LBE3037:
 841:src/xeq.c     **** 	setY(y);
 20296              		.loc 1 841 2 view .LVU5260
 20297              	.LBB3042:
 20298              	.LBB3038:
 20299              	.LBI3038:
 809:src/xeq.c     **** 	setRegister(regX_idx, x);
ARM GAS  /tmp/cc0UaEmF.s 			page 539


 20300              		.loc 1 809 6 view .LVU5261
 20301              	.LBB3039:
 810:src/xeq.c     **** }
 20302              		.loc 1 810 2 view .LVU5262
 20303 0022 12A9     		add	r1, sp, #72
 20304              	.LVL1579:
 810:src/xeq.c     **** }
 20305              		.loc 1 810 2 is_stmt 0 view .LVU5263
 20306 0024 6420     		movs	r0, #100
 20307 0026 FFF7FEFF 		bl	setRegister
 20308              	.LVL1580:
 810:src/xeq.c     **** }
 20309              		.loc 1 810 2 view .LVU5264
 20310              	.LBE3039:
 20311              	.LBE3038:
 20312              	.LBE3042:
 842:src/xeq.c     **** }
 20313              		.loc 1 842 2 is_stmt 1 view .LVU5265
 20314              	.LBB3043:
 20315              	.LBB3040:
 20316              	.LBI3040:
 817:src/xeq.c     **** 	setRegister(regY_idx, y);
 20317              		.loc 1 817 6 view .LVU5266
 20318              	.LBB3041:
 818:src/xeq.c     **** }
 20319              		.loc 1 818 2 view .LVU5267
 20320 002a 09A9     		add	r1, sp, #36
 20321              	.LVL1581:
 818:src/xeq.c     **** }
 20322              		.loc 1 818 2 is_stmt 0 view .LVU5268
 20323 002c 6520     		movs	r0, #101
 20324 002e FFF7FEFF 		bl	setRegister
 20325              	.LVL1582:
 818:src/xeq.c     **** }
 20326              		.loc 1 818 2 view .LVU5269
 20327              	.LBE3041:
 20328              	.LBE3040:
 20329              	.LBE3043:
3459:src/xeq.c     **** 		dn_divide(&t, &n, &d);
 20330              		.loc 1 3459 2 is_stmt 1 view .LVU5270
3459:src/xeq.c     **** 		dn_divide(&t, &n, &d);
 20331              		.loc 1 3459 6 is_stmt 0 view .LVU5271
 20332 0032 184B     		ldr	r3, .L1450+4
 20333 0034 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
3459:src/xeq.c     **** 		dn_divide(&t, &n, &d);
 20334              		.loc 1 3459 5 view .LVU5272
 20335 0036 5B06     		lsls	r3, r3, #25
 20336 0038 02D4     		bmi	.L1449
3475:src/xeq.c     **** 
 20337              		.loc 1 3475 1 view .LVU5273
 20338 003a 25B0     		add	sp, sp, #148
 20339              		.cfi_remember_state
 20340              		.cfi_def_cfa_offset 4
 20341              		@ sp needed
 20342 003c 5DF804FB 		ldr	pc, [sp], #4
 20343              	.L1449:
 20344              		.cfi_restore_state
ARM GAS  /tmp/cc0UaEmF.s 			page 540


3460:src/xeq.c     **** 		dn_compare(&n, &t, &z);
 20345              		.loc 1 3460 3 is_stmt 1 view .LVU5274
 20346 0040 12AA     		add	r2, sp, #72
 20347 0042 09A9     		add	r1, sp, #36
 20348 0044 1BA8     		add	r0, sp, #108
 20349 0046 FFF7FEFF 		bl	dn_divide
 20350              	.LVL1583:
3461:src/xeq.c     **** 		if (dn_eq0(&n))
 20351              		.loc 1 3461 3 view .LVU5275
 20352 004a 6A46     		mov	r2, sp
 20353 004c 1BA9     		add	r1, sp, #108
 20354 004e 09A8     		add	r0, sp, #36
 20355 0050 FFF7FEFF 		bl	dn_compare
 20356              	.LVL1584:
3462:src/xeq.c     **** 			DispMsg = "y/x =";
 20357              		.loc 1 3462 3 view .LVU5276
3462:src/xeq.c     **** 			DispMsg = "y/x =";
 20358              		.loc 1 3462 7 is_stmt 0 view .LVU5277
 20359 0054 09A8     		add	r0, sp, #36
 20360 0056 FFF7FEFF 		bl	dn_eq0
 20361              	.LVL1585:
3462:src/xeq.c     **** 			DispMsg = "y/x =";
 20362              		.loc 1 3462 6 view .LVU5278
 20363 005a 60B1     		cbz	r0, .L1442
3463:src/xeq.c     **** 		else if (decNumberIsNegative(&n))
 20364              		.loc 1 3463 4 is_stmt 1 view .LVU5279
3463:src/xeq.c     **** 		else if (decNumberIsNegative(&n))
 20365              		.loc 1 3463 12 is_stmt 0 view .LVU5280
 20366 005c 0E4B     		ldr	r3, .L1450+8
 20367 005e 0F4A     		ldr	r2, .L1450+12
 20368 0060 1A60     		str	r2, [r3]
3475:src/xeq.c     **** 
 20369              		.loc 1 3475 1 view .LVU5281
 20370 0062 25B0     		add	sp, sp, #148
 20371              		.cfi_remember_state
 20372              		.cfi_def_cfa_offset 4
 20373              		@ sp needed
 20374 0064 5DF804FB 		ldr	pc, [sp], #4
 20375              	.LVL1586:
 20376              	.L1448:
 20377              		.cfi_restore_state
3452:src/xeq.c     **** 		return;
 20378              		.loc 1 3452 3 is_stmt 1 view .LVU5282
 20379 0068 0120     		movs	r0, #1
 20380              	.LVL1587:
3452:src/xeq.c     **** 		return;
 20381              		.loc 1 3452 3 is_stmt 0 view .LVU5283
 20382 006a 0021     		movs	r1, #0
 20383 006c FFF7FEFF 		bl	setX_int
 20384              	.LVL1588:
3453:src/xeq.c     **** 	}
 20385              		.loc 1 3453 3 is_stmt 1 view .LVU5284
3475:src/xeq.c     **** 
 20386              		.loc 1 3475 1 is_stmt 0 view .LVU5285
 20387 0070 25B0     		add	sp, sp, #148
 20388              		.cfi_remember_state
 20389              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/cc0UaEmF.s 			page 541


 20390              		@ sp needed
 20391 0072 5DF804FB 		ldr	pc, [sp], #4
 20392              	.L1442:
 20393              		.cfi_restore_state
3464:src/xeq.c     **** #ifdef INCLUDE_FONT_ESCAPE
 20394              		.loc 1 3464 8 is_stmt 1 view .LVU5286
3464:src/xeq.c     **** #ifdef INCLUDE_FONT_ESCAPE
 20395              		.loc 1 3464 11 is_stmt 0 view .LVU5287
 20396 0076 9DF92C30 		ldrsb	r3, [sp, #44]
 20397 007a 002B     		cmp	r3, #0
3466:src/xeq.c     **** 		else
 20398              		.loc 1 3466 12 view .LVU5288
 20399 007c B8BF     		it	lt
 20400 007e 084A     		ldrlt	r2, .L1450+16
 20401 0080 054B     		ldr	r3, .L1450+8
3466:src/xeq.c     **** 		else
 20402              		.loc 1 3466 4 is_stmt 1 view .LVU5289
3468:src/xeq.c     **** #else
 20403              		.loc 1 3468 4 view .LVU5290
3468:src/xeq.c     **** #else
 20404              		.loc 1 3468 12 is_stmt 0 view .LVU5291
 20405 0082 A8BF     		it	ge
 20406 0084 074A     		ldrge	r2, .L1450+20
 20407 0086 1A60     		str	r2, [r3]
3475:src/xeq.c     **** 
 20408              		.loc 1 3475 1 view .LVU5292
 20409 0088 25B0     		add	sp, sp, #148
 20410              		.cfi_def_cfa_offset 4
 20411              		@ sp needed
 20412 008a 5DF804FB 		ldr	pc, [sp], #4
 20413              	.L1451:
 20414 008e 00BF     		.align	2
 20415              	.L1450:
 20416 0090 00000000 		.word	main_ram
 20417 0094 00000000 		.word	StateWhileOn
 20418 0098 00000000 		.word	DispMsg
 20419 009c 00000000 		.word	.LC4
 20420 00a0 08000000 		.word	.LC5
 20421 00a4 10000000 		.word	.LC6
 20422              		.cfi_endproc
 20423              	.LFE200:
 20425              		.section	.text.op_fracdenom,"ax",%progbits
 20426              		.align	1
 20427              		.p2align 2,,3
 20428              		.global	op_fracdenom
 20429              		.syntax unified
 20430              		.thumb
 20431              		.thumb_func
 20432              		.fpu fpv4-sp-d16
 20434              	op_fracdenom:
 20435              	.LVL1589:
 20436              	.LFB201:
3477:src/xeq.c     **** 	int s;
 20437              		.loc 1 3477 34 is_stmt 1 view -0
 20438              		.cfi_startproc
 20439              		@ args = 0, pretend = 0, frame = 8
 20440              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc0UaEmF.s 			page 542


3478:src/xeq.c     **** 	unsigned long long int i;
 20441              		.loc 1 3478 2 view .LVU5294
3479:src/xeq.c     **** 
 20442              		.loc 1 3479 2 view .LVU5295
3481:src/xeq.c     **** 	if (i > 9999)
 20443              		.loc 1 3481 2 view .LVU5296
3477:src/xeq.c     **** 	int s;
 20444              		.loc 1 3477 34 is_stmt 0 view .LVU5297
 20445 0000 2DE90048 		push	{fp, lr}
 20446              		.cfi_def_cfa_offset 8
 20447              		.cfi_offset 11, -8
 20448              		.cfi_offset 14, -4
 20449 0004 84B0     		sub	sp, sp, #16
 20450              		.cfi_def_cfa_offset 24
 20451              	.LVL1590:
 20452              	.LBB3044:
 20453              	.LBI3044:
1260:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 20454              		.loc 1 1260 24 is_stmt 1 view .LVU5298
 20455              	.LBB3045:
1261:src/xeq.c     **** }
 20456              		.loc 1 1261 2 view .LVU5299
1261:src/xeq.c     **** }
 20457              		.loc 1 1261 9 is_stmt 0 view .LVU5300
 20458 0006 03A9     		add	r1, sp, #12
 20459              	.LVL1591:
1261:src/xeq.c     **** }
 20460              		.loc 1 1261 9 view .LVU5301
 20461 0008 6420     		movs	r0, #100
 20462              	.LVL1592:
1261:src/xeq.c     **** }
 20463              		.loc 1 1261 9 view .LVU5302
 20464 000a FFF7FEFF 		bl	get_reg_n_int_sgn
 20465              	.LVL1593:
1261:src/xeq.c     **** }
 20466              		.loc 1 1261 9 view .LVU5303
 20467 000e 8C46     		mov	ip, r1
 20468              	.LVL1594:
1261:src/xeq.c     **** }
 20469              		.loc 1 1261 9 view .LVU5304
 20470              	.LBE3045:
 20471              	.LBE3044:
3482:src/xeq.c     **** 		UState.denom_max = 0;
 20472              		.loc 1 3482 5 view .LVU5305
 20473 0010 0021     		movs	r1, #0
 20474              	.LBB3047:
 20475              	.LBB3046:
1261:src/xeq.c     **** }
 20476              		.loc 1 1261 9 view .LVU5306
 20477 0012 8346     		mov	fp, r0
 20478              	.LVL1595:
1261:src/xeq.c     **** }
 20479              		.loc 1 1261 9 view .LVU5307
 20480              	.LBE3046:
 20481              	.LBE3047:
3482:src/xeq.c     **** 		UState.denom_max = 0;
 20482              		.loc 1 3482 2 is_stmt 1 view .LVU5308
ARM GAS  /tmp/cc0UaEmF.s 			page 543


3482:src/xeq.c     **** 		UState.denom_max = 0;
 20483              		.loc 1 3482 5 is_stmt 0 view .LVU5309
 20484 0014 6145     		cmp	r1, ip
 20485 0016 42F20F70 		movw	r0, #9999
 20486 001a 08BF     		it	eq
 20487 001c 5845     		cmpeq	r0, fp
 20488 001e 0AD2     		bcs	.L1453
3483:src/xeq.c     **** 	else if (i != 1)
 20489              		.loc 1 3483 3 is_stmt 1 view .LVU5310
3483:src/xeq.c     **** 	else if (i != 1)
 20490              		.loc 1 3483 20 is_stmt 0 view .LVU5311
 20491 0020 174B     		ldr	r3, .L1457
 20492 0022 1B68     		ldr	r3, [r3]
 20493 0024 D3F8E427 		ldr	r2, [r3, #2020]
 20494 0028 6FF39312 		bfc	r2, #6, #14
 20495 002c C3F8E427 		str	r2, [r3, #2020]
3490:src/xeq.c     **** 
 20496              		.loc 1 3490 1 view .LVU5312
 20497 0030 04B0     		add	sp, sp, #16
 20498              		.cfi_remember_state
 20499              		.cfi_def_cfa_offset 8
 20500              		@ sp needed
 20501 0032 BDE80088 		pop	{fp, pc}
 20502              	.LVL1596:
 20503              	.L1453:
 20504              		.cfi_restore_state
3484:src/xeq.c     **** 		UState.denom_max = (unsigned int) i;
 20505              		.loc 1 3484 7 is_stmt 1 view .LVU5313
3484:src/xeq.c     **** 		UState.denom_max = (unsigned int) i;
 20506              		.loc 1 3484 10 is_stmt 0 view .LVU5314
 20507 0036 BCF1000F 		cmp	ip, #0
 20508 003a 08BF     		it	eq
 20509 003c BBF1010F 		cmpeq	fp, #1
 20510 0040 0AD0     		beq	.L1455
3485:src/xeq.c     **** 	else {
 20511              		.loc 1 3485 3 is_stmt 1 view .LVU5315
3485:src/xeq.c     **** 	else {
 20512              		.loc 1 3485 20 is_stmt 0 view .LVU5316
 20513 0042 0F4B     		ldr	r3, .L1457
 20514 0044 1B68     		ldr	r3, [r3]
 20515 0046 D3F8E417 		ldr	r1, [r3, #2020]
 20516 004a 6BF39311 		bfi	r1, fp, #6, #14
 20517 004e C3F8E417 		str	r1, [r3, #2020]
3490:src/xeq.c     **** 
 20518              		.loc 1 3490 1 view .LVU5317
 20519 0052 04B0     		add	sp, sp, #16
 20520              		.cfi_remember_state
 20521              		.cfi_def_cfa_offset 8
 20522              		@ sp needed
 20523 0054 BDE80088 		pop	{fp, pc}
 20524              	.LVL1597:
 20525              	.L1455:
 20526              		.cfi_restore_state
3487:src/xeq.c     **** 		setX_int_sgn(UState.denom_max, 0);
 20527              		.loc 1 3487 3 is_stmt 1 view .LVU5318
 20528              	.LBB3048:
 20529              	.LBI3048:
ARM GAS  /tmp/cc0UaEmF.s 			page 544


 773:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 20530              		.loc 1 773 6 view .LVU5319
 20531              	.LBB3049:
 774:src/xeq.c     **** }
 20532              		.loc 1 774 2 view .LVU5320
 20533 0058 6421     		movs	r1, #100
 20534 005a 6C20     		movs	r0, #108
 20535 005c FFF7FEFF 		bl	copyreg_n
 20536              	.LVL1598:
 20537              	.LBE3049:
 20538              	.LBE3048:
3488:src/xeq.c     **** 	}
 20539              		.loc 1 3488 3 view .LVU5321
 20540              	.LBB3050:
 20541              	.LBI3050:
1323:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 20542              		.loc 1 1323 6 view .LVU5322
 20543              	.LBB3051:
1324:src/xeq.c     **** }
 20544              		.loc 1 1324 2 view .LVU5323
 20545              	.LBE3051:
 20546              	.LBE3050:
3488:src/xeq.c     **** 	}
 20547              		.loc 1 3488 22 is_stmt 0 view .LVU5324
 20548 0060 074B     		ldr	r3, .L1457
 20549              	.LVL1599:
3488:src/xeq.c     **** 	}
 20550              		.loc 1 3488 22 view .LVU5325
 20551 0062 1B68     		ldr	r3, [r3]
 20552              	.LVL1600:
3488:src/xeq.c     **** 	}
 20553              		.loc 1 3488 22 view .LVU5326
 20554 0064 D3F8E427 		ldr	r2, [r3, #2020]
 20555              	.LBB3054:
 20556              	.LBB3052:
1324:src/xeq.c     **** }
 20557              		.loc 1 1324 2 view .LVU5327
 20558 0068 0021     		movs	r1, #0
 20559              	.LBE3052:
 20560              	.LBE3054:
3488:src/xeq.c     **** 	}
 20561              		.loc 1 3488 22 view .LVU5328
 20562 006a C2F38D12 		ubfx	r2, r2, #6, #14
 20563              	.LBB3055:
 20564              	.LBB3053:
1324:src/xeq.c     **** }
 20565              		.loc 1 1324 2 view .LVU5329
 20566 006e 92B2     		uxth	r2, r2
 20567 0070 0023     		movs	r3, #0
 20568              	.LVL1601:
1324:src/xeq.c     **** }
 20569              		.loc 1 1324 2 view .LVU5330
 20570 0072 0091     		str	r1, [sp]
 20571              	.LVL1602:
1324:src/xeq.c     **** }
 20572              		.loc 1 1324 2 view .LVU5331
 20573 0074 6420     		movs	r0, #100
ARM GAS  /tmp/cc0UaEmF.s 			page 545


 20574 0076 FFF7FEFF 		bl	set_reg_n_int_sgn
 20575              	.LVL1603:
1324:src/xeq.c     **** }
 20576              		.loc 1 1324 2 view .LVU5332
 20577              	.LBE3053:
 20578              	.LBE3055:
3490:src/xeq.c     **** 
 20579              		.loc 1 3490 1 view .LVU5333
 20580 007a 04B0     		add	sp, sp, #16
 20581              		.cfi_def_cfa_offset 8
 20582              		@ sp needed
 20583 007c BDE80088 		pop	{fp, pc}
 20584              	.LVL1604:
 20585              	.L1458:
3490:src/xeq.c     **** 
 20586              		.loc 1 3490 1 view .LVU5334
 20587              		.align	2
 20588              	.L1457:
 20589 0080 00000000 		.word	main_ram
 20590              		.cfi_endproc
 20591              	.LFE201:
 20593              		.section	.text.op_float,"ax",%progbits
 20594              		.align	1
 20595              		.p2align 2,,3
 20596              		.global	op_float
 20597              		.syntax unified
 20598              		.thumb
 20599              		.thumb_func
 20600              		.fpu fpv4-sp-d16
 20602              	op_float:
 20603              	.LVL1605:
 20604              	.LFB202:
3498:src/xeq.c     **** 
 20605              		.loc 1 3498 30 is_stmt 1 view -0
 20606              		.cfi_startproc
 20607              		@ args = 0, pretend = 0, frame = 40
 20608              		@ frame_needed = 0, uses_anonymous_args = 0
3500:src/xeq.c     **** 		int i;
 20609              		.loc 1 3500 2 view .LVU5336
3498:src/xeq.c     **** 
 20610              		.loc 1 3498 30 is_stmt 0 view .LVU5337
 20611 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 20612              		.cfi_def_cfa_offset 28
 20613              		.cfi_offset 4, -28
 20614              		.cfi_offset 5, -24
 20615              		.cfi_offset 6, -20
 20616              		.cfi_offset 7, -16
 20617              		.cfi_offset 8, -12
 20618              		.cfi_offset 9, -8
 20619              		.cfi_offset 14, -4
3500:src/xeq.c     **** 		int i;
 20620              		.loc 1 3500 6 view .LVU5338
 20621 0004 2F4F     		ldr	r7, .L1471
 20622 0006 3B68     		ldr	r3, [r7]
 20623 0008 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
3500:src/xeq.c     **** 		int i;
 20624              		.loc 1 3500 5 view .LVU5339
ARM GAS  /tmp/cc0UaEmF.s 			page 546


 20625 000c D207     		lsls	r2, r2, #31
3498:src/xeq.c     **** 
 20626              		.loc 1 3498 30 view .LVU5340
 20627 000e 8BB0     		sub	sp, sp, #44
 20628              		.cfi_def_cfa_offset 72
3498:src/xeq.c     **** 
 20629              		.loc 1 3498 30 view .LVU5341
 20630 0010 0646     		mov	r6, r0
3500:src/xeq.c     **** 		int i;
 20631              		.loc 1 3500 5 view .LVU5342
 20632 0012 27D5     		bpl	.L1460
 20633              	.LBB3056:
3501:src/xeq.c     **** 		int mask = StackRegMask[UState.stack_depth];
 20634              		.loc 1 3501 3 is_stmt 1 view .LVU5343
3502:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 20635              		.loc 1 3502 3 view .LVU5344
3502:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 20636              		.loc 1 3502 33 is_stmt 0 view .LVU5345
 20637 0014 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
3502:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 20638              		.loc 1 3502 26 view .LVU5346
 20639 0018 2B4A     		ldr	r2, .L1471+4
3502:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 20640              		.loc 1 3502 33 view .LVU5347
 20641 001a C3F3C003 		ubfx	r3, r3, #3, #1
3503:src/xeq.c     **** 			if (mask & 1) {
 20642              		.loc 1 3503 10 view .LVU5348
 20643 001e 6424     		movs	r4, #100
3502:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 20644              		.loc 1 3502 7 view .LVU5349
 20645 0020 32F81350 		ldrh	r5, [r2, r3, lsl #1]
 20646              	.LVL1606:
3503:src/xeq.c     **** 			if (mask & 1) {
 20647              		.loc 1 3503 3 is_stmt 1 view .LVU5350
3503:src/xeq.c     **** 			if (mask & 1) {
 20648              		.loc 1 3503 22 view .LVU5351
 20649              	.LBB3057:
 20650              	.LBB3058:
 933:src/xeq.c     **** }
 20651              		.loc 1 933 24 is_stmt 0 view .LVU5352
 20652 0024 44F20108 		movw	r8, #16385
 20653 0028 0CE0     		b	.L1463
 20654              	.LVL1607:
 20655              	.L1461:
 933:src/xeq.c     **** }
 20656              		.loc 1 933 24 view .LVU5353
 20657 002a 3B68     		ldr	r3, [r7]
 20658 002c B3F8E837 		ldrh	r3, [r3, #2024]
 20659              	.LBE3058:
 20660              	.LBE3057:
3508:src/xeq.c     **** 				// expand the other registers which have been left
 20661              		.loc 1 3508 12 view .LVU5354
 20662 0030 08EA0303 		and	r3, r8, r3
 20663 0034 B3F5804F 		cmp	r3, #16384
 20664 0038 32D0     		beq	.L1470
 20665              	.L1462:
3503:src/xeq.c     **** 			if (mask & 1) {
ARM GAS  /tmp/cc0UaEmF.s 			page 547


 20666              		.loc 1 3503 37 is_stmt 1 discriminator 2 view .LVU5355
 20667 003a 0134     		adds	r4, r4, #1
 20668              	.LVL1608:
3503:src/xeq.c     **** 			if (mask & 1) {
 20669              		.loc 1 3503 3 is_stmt 0 discriminator 2 view .LVU5356
 20670 003c 702C     		cmp	r4, #112
3503:src/xeq.c     **** 			if (mask & 1) {
 20671              		.loc 1 3503 47 discriminator 2 view .LVU5357
 20672 003e 4FEA6505 		asr	r5, r5, #1
 20673              	.LVL1609:
3503:src/xeq.c     **** 			if (mask & 1) {
 20674              		.loc 1 3503 22 is_stmt 1 discriminator 2 view .LVU5358
3503:src/xeq.c     **** 			if (mask & 1) {
 20675              		.loc 1 3503 3 is_stmt 0 discriminator 2 view .LVU5359
 20676 0042 0FD0     		beq	.L1460
 20677              	.LVL1610:
 20678              	.L1463:
3504:src/xeq.c     **** 				// register belongs to stack
 20679              		.loc 1 3504 4 is_stmt 1 view .LVU5360
3508:src/xeq.c     **** 				// expand the other registers which have been left
 20680              		.loc 1 3508 9 view .LVU5361
 20681              	.LBB3060:
 20682              	.LBI3057:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 20683              		.loc 1 932 5 view .LVU5362
 20684              	.LBB3059:
 933:src/xeq.c     **** }
 20685              		.loc 1 933 2 view .LVU5363
 20686              	.LBE3059:
 20687              	.LBE3060:
3504:src/xeq.c     **** 				// register belongs to stack
 20688              		.loc 1 3504 7 is_stmt 0 view .LVU5364
 20689 0044 EB07     		lsls	r3, r5, #31
 20690 0046 F0D5     		bpl	.L1461
3506:src/xeq.c     **** 			}
 20691              		.loc 1 3506 5 is_stmt 1 view .LVU5365
 20692 0048 A6F1C102 		sub	r2, r6, #193
 20693 004c B2FA82F2 		clz	r2, r2
 20694 0050 2146     		mov	r1, r4
 20695 0052 2046     		mov	r0, r4
 20696 0054 5209     		lsrs	r2, r2, #5
3503:src/xeq.c     **** 			if (mask & 1) {
 20697              		.loc 1 3503 37 is_stmt 0 view .LVU5366
 20698 0056 0134     		adds	r4, r4, #1
 20699              	.LVL1611:
3506:src/xeq.c     **** 			}
 20700              		.loc 1 3506 5 view .LVU5367
 20701 0058 FFF7FEFF 		bl	register_from_int
 20702              	.LVL1612:
3503:src/xeq.c     **** 			if (mask & 1) {
 20703              		.loc 1 3503 37 is_stmt 1 view .LVU5368
3503:src/xeq.c     **** 			if (mask & 1) {
 20704              		.loc 1 3503 3 is_stmt 0 view .LVU5369
 20705 005c 702C     		cmp	r4, #112
3503:src/xeq.c     **** 			if (mask & 1) {
 20706              		.loc 1 3503 47 view .LVU5370
 20707 005e 4FEA6505 		asr	r5, r5, #1
ARM GAS  /tmp/cc0UaEmF.s 			page 548


 20708              	.LVL1613:
3503:src/xeq.c     **** 			if (mask & 1) {
 20709              		.loc 1 3503 22 is_stmt 1 view .LVU5371
3503:src/xeq.c     **** 			if (mask & 1) {
 20710              		.loc 1 3503 3 is_stmt 0 view .LVU5372
 20711 0062 EFD1     		bne	.L1463
 20712              	.LVL1614:
 20713              	.L1460:
3503:src/xeq.c     **** 			if (mask & 1) {
 20714              		.loc 1 3503 3 view .LVU5373
 20715              	.LBE3056:
3515:src/xeq.c     **** 		UState.fract = 0;
 20716              		.loc 1 3515 2 is_stmt 1 view .LVU5374
3515:src/xeq.c     **** 		UState.fract = 0;
 20717              		.loc 1 3515 25 is_stmt 0 view .LVU5375
 20718 0064 06F13F03 		add	r3, r6, #63
3515:src/xeq.c     **** 		UState.fract = 0;
 20719              		.loc 1 3515 5 view .LVU5376
 20720 0068 DBB2     		uxtb	r3, r3
 20721 006a 012B     		cmp	r3, #1
 20722 006c 10D9     		bls	.L1464
3516:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
 20723              		.loc 1 3516 3 is_stmt 1 view .LVU5377
3516:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
 20724              		.loc 1 3516 16 is_stmt 0 view .LVU5378
 20725 006e 3A68     		ldr	r2, [r7]
3517:src/xeq.c     **** 	}
 20726              		.loc 1 3517 14 view .LVU5379
 20727 0070 164B     		ldr	r3, .L1471+8
3516:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
 20728              		.loc 1 3516 16 view .LVU5380
 20729 0072 92F8E617 		ldrb	r1, [r2, #2022]	@ zero_extendqisi2
 20730 0076 6FF34511 		bfc	r1, #5, #1
 20731 007a 82F8E617 		strb	r1, [r2, #2022]
3517:src/xeq.c     **** 	}
 20732              		.loc 1 3517 3 is_stmt 1 view .LVU5381
3517:src/xeq.c     **** 	}
 20733              		.loc 1 3517 35 is_stmt 0 view .LVU5382
 20734 007e A6F15C06 		sub	r6, #92
3517:src/xeq.c     **** 	}
 20735              		.loc 1 3517 14 view .LVU5383
 20736 0082 DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
3517:src/xeq.c     **** 	}
 20737              		.loc 1 3517 35 view .LVU5384
 20738 0084 B6FA86F6 		clz	r6, r6
 20739 0088 7609     		lsrs	r6, r6, #5
3517:src/xeq.c     **** 	}
 20740              		.loc 1 3517 14 view .LVU5385
 20741 008a 66F30002 		bfi	r2, r6, #0, #1
 20742 008e DA75     		strb	r2, [r3, #23]
 20743              	.L1464:
3519:src/xeq.c     **** }
 20744              		.loc 1 3519 2 is_stmt 1 view .LVU5386
3519:src/xeq.c     **** }
 20745              		.loc 1 3519 14 is_stmt 0 view .LVU5387
 20746 0090 6420     		movs	r0, #100
 20747 0092 FFF7FEFF 		bl	get_reg_n
ARM GAS  /tmp/cc0UaEmF.s 			page 549


 20748              	.LVL1615:
3519:src/xeq.c     **** }
 20749              		.loc 1 3519 12 view .LVU5388
 20750 0096 0E4B     		ldr	r3, .L1471+12
 20751 0098 1860     		str	r0, [r3]
3520:src/xeq.c     **** 
 20752              		.loc 1 3520 1 view .LVU5389
 20753 009a 0BB0     		add	sp, sp, #44
 20754              		.cfi_remember_state
 20755              		.cfi_def_cfa_offset 28
 20756              		@ sp needed
 20757 009c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 20758              	.LVL1616:
 20759              	.L1470:
 20760              		.cfi_restore_state
 20761              	.LBB3063:
3511:src/xeq.c     **** 			}
 20762              		.loc 1 3511 5 is_stmt 1 view .LVU5390
3511:src/xeq.c     **** 			}
 20763              		.loc 1 3511 29 is_stmt 0 view .LVU5391
 20764 00a0 2046     		mov	r0, r4
 20765 00a2 FFF7FEFF 		bl	get_reg_n
 20766              	.LVL1617:
3511:src/xeq.c     **** 			}
 20767              		.loc 1 3511 47 view .LVU5392
 20768 00a6 3B68     		ldr	r3, [r7]
 20769 00a8 03F58663 		add	r3, r3, #1072
3511:src/xeq.c     **** 			}
 20770              		.loc 1 3511 29 view .LVU5393
 20771 00ac 8146     		mov	r9, r0
 20772              	.LVL1618:
 20773              	.LBB3061:
 20774              	.LBI3061:
 645:src/xeq.c     **** 	decNumber temp;
 20775              		.loc 1 645 6 is_stmt 1 view .LVU5394
 20776              	.LBB3062:
 646:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 20777              		.loc 1 646 2 view .LVU5395
 647:src/xeq.c     **** }
 20778              		.loc 1 647 2 view .LVU5396
 647:src/xeq.c     **** }
 20779              		.loc 1 647 27 is_stmt 0 view .LVU5397
 20780 00ae 01A9     		add	r1, sp, #4
 20781 00b0 03EBC400 		add	r0, r3, r4, lsl #3
 20782              	.LVL1619:
 647:src/xeq.c     **** }
 20783              		.loc 1 647 27 view .LVU5398
 20784 00b4 FFF7FEFF 		bl	decimal64ToNumber
 20785              	.LVL1620:
 647:src/xeq.c     **** }
 20786              		.loc 1 647 27 view .LVU5399
 20787 00b8 0146     		mov	r1, r0
 647:src/xeq.c     **** }
 20788              		.loc 1 647 2 view .LVU5400
 20789 00ba 4846     		mov	r0, r9
 20790 00bc FFF7FEFF 		bl	packed128_from_number
 20791              	.LVL1621:
ARM GAS  /tmp/cc0UaEmF.s 			page 550


 648:src/xeq.c     **** 
 20792              		.loc 1 648 1 view .LVU5401
 20793 00c0 BBE7     		b	.L1462
 20794              	.L1472:
 20795 00c2 00BF     		.align	2
 20796              	.L1471:
 20797 00c4 00000000 		.word	main_ram
 20798 00c8 00000000 		.word	.LANCHOR3
 20799 00cc 00000000 		.word	StateWhileOn
 20800 00d0 00000000 		.word	StackBase
 20801              	.LBE3062:
 20802              	.LBE3061:
 20803              	.LBE3063:
 20804              		.cfi_endproc
 20805              	.LFE202:
 20807              		.section	.text.cmddisp,"ax",%progbits
 20808              		.align	1
 20809              		.p2align 2,,3
 20810              		.global	cmddisp
 20811              		.syntax unified
 20812              		.thumb
 20813              		.thumb_func
 20814              		.fpu fpv4-sp-d16
 20816              	cmddisp:
 20817              	.LVL1622:
 20818              	.LFB168:
2242:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
 20819              		.loc 1 2242 46 is_stmt 1 view -0
 20820              		.cfi_startproc
 20821              		@ args = 0, pretend = 0, frame = 0
 20822              		@ frame_needed = 0, uses_anonymous_args = 0
 20823              		@ link register save eliminated.
2244:src/xeq.c     **** 	int dispmode = get_dispmode_digs(&dispdigs);
 20824              		.loc 1 2244 2 view .LVU5403
2245:src/xeq.c     **** #ifdef DM42
 20825              		.loc 1 2245 2 view .LVU5404
 20826              	.LBB3072:
 20827              	.LBI3072:
2210:src/xeq.c     **** {
 20828              		.loc 1 2210 5 view .LVU5405
 20829              	.LBB3073:
2212:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 20830              		.loc 1 2212 2 view .LVU5406
2212:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 20831              		.loc 1 2212 17 is_stmt 0 view .LVU5407
 20832 0000 2E4B     		ldr	r3, .L1493
 20833 0002 1A68     		ldr	r2, [r3]
 20834              	.LBE3073:
 20835              	.LBE3072:
2242:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
 20836              		.loc 1 2242 46 view .LVU5408
 20837 0004 10B4     		push	{r4}
 20838              		.cfi_def_cfa_offset 4
 20839              		.cfi_offset 4, -4
 20840              	.LBB3075:
 20841              	.LBB3074:
2213:src/xeq.c     **** 
ARM GAS  /tmp/cc0UaEmF.s 			page 551


 20842              		.loc 1 2213 23 view .LVU5409
 20843 0006 92F8E747 		ldrb	r4, [r2, #2023]	@ zero_extendqisi2
2212:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 20844              		.loc 1 2212 23 view .LVU5410
 20845 000a 92F8E637 		ldrb	r3, [r2, #2022]	@ zero_extendqisi2
2215:src/xeq.c     **** 		dispdigs -= 12;
 20846              		.loc 1 2215 5 view .LVU5411
 20847 000e 04F00F04 		and	r4, r4, #15
 20848 0012 0B2C     		cmp	r4, #11
2212:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 20849              		.loc 1 2212 6 view .LVU5412
 20850 0014 4FEA9313 		lsr	r3, r3, #6
 20851              	.LVL1623:
2213:src/xeq.c     **** 
 20852              		.loc 1 2213 2 is_stmt 1 view .LVU5413
2215:src/xeq.c     **** 		dispdigs -= 12;
 20853              		.loc 1 2215 2 view .LVU5414
2215:src/xeq.c     **** 		dispdigs -= 12;
 20854              		.loc 1 2215 5 is_stmt 0 view .LVU5415
 20855 0018 04D9     		bls	.L1474
2216:src/xeq.c     **** 		dispmode += 4;
 20856              		.loc 1 2216 3 is_stmt 1 view .LVU5416
 20857              	.LVL1624:
2217:src/xeq.c     **** 		if (dispmode >= 6) {
 20858              		.loc 1 2217 3 view .LVU5417
2217:src/xeq.c     **** 		if (dispmode >= 6) {
 20859              		.loc 1 2217 12 is_stmt 0 view .LVU5418
 20860 001a 1C1D     		adds	r4, r3, #4
 20861              	.LVL1625:
2218:src/xeq.c     **** 			dispmode -= 2;
 20862              		.loc 1 2218 3 is_stmt 1 view .LVU5419
2218:src/xeq.c     **** 			dispmode -= 2;
 20863              		.loc 1 2218 6 is_stmt 0 view .LVU5420
 20864 001c 052C     		cmp	r4, #5
2219:src/xeq.c     **** 			dispdigs += 4;
 20865              		.loc 1 2219 4 is_stmt 1 view .LVU5421
2219:src/xeq.c     **** 			dispdigs += 4;
 20866              		.loc 1 2219 13 is_stmt 0 view .LVU5422
 20867 001e CCBF     		ite	gt
 20868 0020 0233     		addgt	r3, r3, #2
 20869              	.LVL1626:
2220:src/xeq.c     **** 		}
 20870              		.loc 1 2220 4 is_stmt 1 view .LVU5423
2220:src/xeq.c     **** 		}
 20871              		.loc 1 2220 4 is_stmt 0 view .LVU5424
 20872 0022 2346     		movle	r3, r4
 20873              	.LVL1627:
 20874              	.L1474:
2223:src/xeq.c     **** 	return dispmode;
 20875              		.loc 1 2223 2 is_stmt 1 view .LVU5425
2224:src/xeq.c     **** }
 20876              		.loc 1 2224 2 view .LVU5426
2224:src/xeq.c     **** }
 20877              		.loc 1 2224 2 is_stmt 0 view .LVU5427
 20878              	.LBE3074:
 20879              	.LBE3075:
2247:src/xeq.c     **** 	case RARG_STD:
ARM GAS  /tmp/cc0UaEmF.s 			page 552


 20880              		.loc 1 2247 2 is_stmt 1 view .LVU5428
 20881 0024 4F29     		cmp	r1, #79
 20882 0026 1DD8     		bhi	.L1475
 20883 0028 4B29     		cmp	r1, #75
 20884 002a 3ED9     		bls	.L1476
 20885 002c 4D39     		subs	r1, r1, #77
 20886              	.LVL1628:
2247:src/xeq.c     **** 	case RARG_STD:
 20887              		.loc 1 2247 2 is_stmt 0 view .LVU5429
 20888 002e 0229     		cmp	r1, #2
 20889 0030 41D8     		bhi	.L1477
 20890 0032 DFE801F0 		tbb	[pc, r1]
 20891              	.LVL1629:
 20892              	.L1479:
 20893 0036 15       		.byte	(.L1481-.L1479)/2
 20894 0037 02       		.byte	(.L1488-.L1479)/2
 20895 0038 38       		.byte	(.L1478-.L1479)/2
 20896 0039 00       		.p2align 1
 20897              	.L1488:
2247:src/xeq.c     **** 	case RARG_STD:
 20898              		.loc 1 2247 2 view .LVU5430
 20899 003a 0223     		movs	r3, #2
 20900              	.L1480:
2280:src/xeq.c     **** #else
 20901              		.loc 1 2280 2 is_stmt 1 view .LVU5431
 20902 003c 0146     		mov	r1, r0
 20903              	.LVL1630:
 20904              	.LBB3076:
 20905              	.LBI3076:
2227:src/xeq.c     **** {
 20906              		.loc 1 2227 6 view .LVU5432
 20907              	.LBB3077:
2229:src/xeq.c     **** 		dispmode -= 4;
 20908              		.loc 1 2229 2 view .LVU5433
 20909              	.L1485:
2237:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 20910              		.loc 1 2237 2 view .LVU5434
2238:src/xeq.c     **** }
 20911              		.loc 1 2238 2 view .LVU5435
2237:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 20912              		.loc 1 2237 18 is_stmt 0 view .LVU5436
 20913 003e B2F8E607 		ldrh	r0, [r2, #2022]
 20914              	.LVL1631:
2237:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 20915              		.loc 1 2237 18 view .LVU5437
 20916              	.LBE3077:
 20917              	.LBE3076:
2287:src/xeq.c     **** 
 20918              		.loc 1 2287 1 view .LVU5438
 20919 0042 5DF8044B 		ldr	r4, [sp], #4
 20920              		.cfi_remember_state
 20921              		.cfi_restore 4
 20922              		.cfi_def_cfa_offset 0
 20923              	.LBB3081:
 20924              	.LBB3078:
2237:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 20925              		.loc 1 2237 18 view .LVU5439
ARM GAS  /tmp/cc0UaEmF.s 			page 553


 20926 0046 01F00F01 		and	r1, r1, #15
 20927              	.LVL1632:
2237:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 20928              		.loc 1 2237 18 view .LVU5440
 20929 004a 9B01     		lsls	r3, r3, #6
 20930 004c 43EA0123 		orr	r3, r3, r1, lsl #8
 20931 0050 20F47C61 		bic	r1, r0, #4032
 20932 0054 0B43     		orrs	r3, r3, r1
 20933 0056 A2F8E637 		strh	r3, [r2, #2022]	@ movhi
2237:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 20934              		.loc 1 2237 18 view .LVU5441
 20935              	.LBE3078:
 20936              	.LBE3081:
2286:src/xeq.c     **** }
 20937              		.loc 1 2286 2 is_stmt 1 view .LVU5442
 20938 005a 5B20     		movs	r0, #91
 20939 005c FFF7FEBF 		b	op_float
 20940              	.LVL1633:
 20941              	.L1481:
 20942              		.cfi_restore_state
2247:src/xeq.c     **** 	case RARG_STD:
 20943              		.loc 1 2247 2 is_stmt 0 view .LVU5443
 20944 0060 0123     		movs	r3, #1
 20945 0062 EBE7     		b	.L1480
 20946              	.LVL1634:
 20947              	.L1475:
2247:src/xeq.c     **** 	case RARG_STD:
 20948              		.loc 1 2247 2 view .LVU5444
 20949 0064 8D29     		cmp	r1, #141
 20950 0066 0CD0     		beq	.L1489
 20951 0068 8E29     		cmp	r1, #142
 20952 006a 08BF     		it	eq
 20953 006c 0523     		moveq	r3, #5
 20954              	.LVL1635:
2247:src/xeq.c     **** 	case RARG_STD:
 20955              		.loc 1 2247 2 view .LVU5445
 20956 006e 1CD1     		bne	.L1476
 20957              	.LVL1636:
 20958              	.L1482:
2268:src/xeq.c     **** 	  report_err(ERR_RANGE);
 20959              		.loc 1 2268 54 discriminator 1 view .LVU5446
 20960 0070 0728     		cmp	r0, #7
 20961 0072 0AD8     		bhi	.L1492
 20962              	.L1483:
2280:src/xeq.c     **** #else
 20963              		.loc 1 2280 2 is_stmt 1 view .LVU5447
 20964              	.LVL1637:
 20965              	.LBB3082:
2227:src/xeq.c     **** {
 20966              		.loc 1 2227 6 view .LVU5448
 20967              	.LBB3079:
2229:src/xeq.c     **** 		dispmode -= 4;
 20968              		.loc 1 2229 2 view .LVU5449
2230:src/xeq.c     **** 		dispdigs += 12;
 20969              		.loc 1 2230 3 view .LVU5450
2231:src/xeq.c     **** 		if (dispdigs >= 16) {
 20970              		.loc 1 2231 3 view .LVU5451
ARM GAS  /tmp/cc0UaEmF.s 			page 554


2231:src/xeq.c     **** 		if (dispdigs >= 16) {
 20971              		.loc 1 2231 12 is_stmt 0 view .LVU5452
 20972 0074 00F10C01 		add	r1, r0, #12
 20973              	.LVL1638:
2232:src/xeq.c     **** 			dispdigs -= 4;
 20974              		.loc 1 2232 3 is_stmt 1 view .LVU5453
2232:src/xeq.c     **** 			dispdigs -= 4;
 20975              		.loc 1 2232 6 is_stmt 0 view .LVU5454
 20976 0078 0F29     		cmp	r1, #15
 20977 007a 0EDC     		bgt	.L1486
2232:src/xeq.c     **** 			dispdigs -= 4;
 20978              		.loc 1 2232 6 view .LVU5455
 20979 007c 03F00303 		and	r3, r3, #3
 20980              	.LVL1639:
2232:src/xeq.c     **** 			dispdigs -= 4;
 20981              		.loc 1 2232 6 view .LVU5456
 20982 0080 DDE7     		b	.L1485
 20983              	.LVL1640:
 20984              	.L1489:
2232:src/xeq.c     **** 			dispdigs -= 4;
 20985              		.loc 1 2232 6 view .LVU5457
 20986              	.LBE3079:
 20987              	.LBE3082:
2268:src/xeq.c     **** 	  report_err(ERR_RANGE);
 20988              		.loc 1 2268 54 view .LVU5458
 20989 0082 0728     		cmp	r0, #7
2261:src/xeq.c     **** 	  break;
 20990              		.loc 1 2261 13 view .LVU5459
 20991 0084 4FF00403 		mov	r3, #4
 20992              	.LVL1641:
2268:src/xeq.c     **** 	  report_err(ERR_RANGE);
 20993              		.loc 1 2268 54 view .LVU5460
 20994 0088 F4D9     		bls	.L1483
 20995              	.LVL1642:
 20996              	.L1492:
2269:src/xeq.c     **** 	  return;
 20997              		.loc 1 2269 4 is_stmt 1 view .LVU5461
 20998              	.LBB3083:
 20999              	.LBI3083:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 21000              		.loc 1 537 5 view .LVU5462
 21001              	.LBB3084:
 538:src/xeq.c     **** 		Error = e;
 21002              		.loc 1 538 2 view .LVU5463
 538:src/xeq.c     **** 		Error = e;
 21003              		.loc 1 538 12 is_stmt 0 view .LVU5464
 21004 008a 0D4B     		ldr	r3, .L1493+4
 21005              	.LVL1643:
 538:src/xeq.c     **** 		Error = e;
 21006              		.loc 1 538 5 view .LVU5465
 21007 008c 1A68     		ldr	r2, [r3]
 21008 008e 0AB9     		cbnz	r2, .L1473
 21009              	.LVL1644:
 21010              	.LBB3085:
 21011              	.LBI3085:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 21012              		.loc 1 537 5 is_stmt 1 view .LVU5466
ARM GAS  /tmp/cc0UaEmF.s 			page 555


 21013              	.LBB3086:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 21014              		.loc 1 539 3 view .LVU5467
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 21015              		.loc 1 539 9 is_stmt 0 view .LVU5468
 21016 0090 0822     		movs	r2, #8
 21017 0092 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 21018              		.loc 1 540 3 is_stmt 1 view .LVU5469
 21019              	.LVL1645:
 21020              	.L1473:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 21021              		.loc 1 540 3 is_stmt 0 view .LVU5470
 21022              	.LBE3086:
 21023              	.LBE3085:
 21024              	.LBE3084:
 21025              	.LBE3083:
2287:src/xeq.c     **** 
 21026              		.loc 1 2287 1 view .LVU5471
 21027 0094 5DF8044B 		ldr	r4, [sp], #4
 21028              		.cfi_remember_state
 21029              		.cfi_restore 4
 21030              		.cfi_def_cfa_offset 0
 21031 0098 7047     		bx	lr
 21032              	.LVL1646:
 21033              	.L1486:
 21034              		.cfi_restore_state
 21035              	.LBB3087:
 21036              	.LBB3080:
2233:src/xeq.c     **** 			dispmode += 2;
 21037              		.loc 1 2233 4 is_stmt 1 view .LVU5472
2234:src/xeq.c     **** 		}
 21038              		.loc 1 2234 13 is_stmt 0 view .LVU5473
 21039 009a 023B     		subs	r3, r3, #2
 21040              	.LVL1647:
2234:src/xeq.c     **** 		}
 21041              		.loc 1 2234 13 view .LVU5474
 21042 009c 03F00303 		and	r3, r3, #3
 21043              	.LVL1648:
2233:src/xeq.c     **** 			dispmode += 2;
 21044              		.loc 1 2233 13 view .LVU5475
 21045 00a0 00F10801 		add	r1, r0, #8
 21046              	.LVL1649:
2234:src/xeq.c     **** 		}
 21047              		.loc 1 2234 4 is_stmt 1 view .LVU5476
2234:src/xeq.c     **** 		}
 21048              		.loc 1 2234 4 is_stmt 0 view .LVU5477
 21049 00a4 CBE7     		b	.L1485
 21050              	.LVL1650:
 21051              	.L1478:
2234:src/xeq.c     **** 		}
 21052              		.loc 1 2234 4 view .LVU5478
 21053              	.LBE3080:
 21054              	.LBE3087:
2258:src/xeq.c     **** 	  break;
 21055              		.loc 1 2258 4 is_stmt 1 view .LVU5479
2259:src/xeq.c     **** 	case RARG_SIG:
ARM GAS  /tmp/cc0UaEmF.s 			page 556


 21056              		.loc 1 2259 4 view .LVU5480
 21057 00a6 0323     		movs	r3, #3
 21058 00a8 C8E7     		b	.L1480
 21059              	.LVL1651:
 21060              	.L1476:
2266:src/xeq.c     **** 	}
 21061              		.loc 1 2266 10 view .LVU5481
2268:src/xeq.c     **** 	  report_err(ERR_RANGE);
 21062              		.loc 1 2268 2 view .LVU5482
2268:src/xeq.c     **** 	  report_err(ERR_RANGE);
 21063              		.loc 1 2268 28 is_stmt 0 view .LVU5483
 21064 00aa 191F     		subs	r1, r3, #4
 21065              	.LVL1652:
2268:src/xeq.c     **** 	  report_err(ERR_RANGE);
 21066              		.loc 1 2268 5 view .LVU5484
 21067 00ac 0129     		cmp	r1, #1
 21068 00ae DFD9     		bls	.L1482
 21069 00b0 03F00303 		and	r3, r3, #3
 21070              	.LVL1653:
2268:src/xeq.c     **** 	  report_err(ERR_RANGE);
 21071              		.loc 1 2268 5 view .LVU5485
 21072 00b4 C2E7     		b	.L1480
 21073              	.LVL1654:
 21074              	.L1477:
2247:src/xeq.c     **** 	case RARG_STD:
 21075              		.loc 1 2247 2 view .LVU5486
 21076 00b6 0023     		movs	r3, #0
 21077 00b8 C0E7     		b	.L1480
 21078              	.L1494:
 21079 00ba 00BF     		.align	2
 21080              	.L1493:
 21081 00bc 00000000 		.word	main_ram
 21082 00c0 00000000 		.word	Error
 21083              		.cfi_endproc
 21084              	.LFE168:
 21086              		.section	.text.set_int_base,"ax",%progbits
 21087              		.align	1
 21088              		.p2align 2,,3
 21089              		.global	set_int_base
 21090              		.syntax unified
 21091              		.thumb
 21092              		.thumb_func
 21093              		.fpu fpv4-sp-d16
 21095              	set_int_base:
 21096              	.LVL1655:
 21097              	.LFB205:
3548:src/xeq.c     **** 	if (arg < 2) {
 21098              		.loc 1 3548 51 is_stmt 1 view -0
 21099              		.cfi_startproc
 21100              		@ args = 0, pretend = 0, frame = 0
 21101              		@ frame_needed = 0, uses_anonymous_args = 0
3549:src/xeq.c     **** 		if (arg == 0)
 21102              		.loc 1 3549 2 view .LVU5488
3549:src/xeq.c     **** 		if (arg == 0)
 21103              		.loc 1 3549 5 is_stmt 0 view .LVU5489
 21104 0000 0128     		cmp	r0, #1
3548:src/xeq.c     **** 	if (arg < 2) {
ARM GAS  /tmp/cc0UaEmF.s 			page 557


 21105              		.loc 1 3548 51 view .LVU5490
 21106 0002 08B5     		push	{r3, lr}
 21107              		.cfi_def_cfa_offset 8
 21108              		.cfi_offset 3, -8
 21109              		.cfi_offset 14, -4
3549:src/xeq.c     **** 		if (arg == 0)
 21110              		.loc 1 3549 5 view .LVU5491
 21111 0004 0BD9     		bls	.L1500
3555:src/xeq.c     **** }
 21112              		.loc 1 3555 3 is_stmt 1 view .LVU5492
 21113              	.LVL1656:
 21114              	.LBB3088:
 21115              	.LBI3088:
3542:src/xeq.c     **** 	UState.int_base = b - 1;
 21116              		.loc 1 3542 13 view .LVU5493
 21117              	.LBB3089:
3543:src/xeq.c     **** 	if (!is_intmode())
 21118              		.loc 1 3543 2 view .LVU5494
 21119 0006 114B     		ldr	r3, .L1502
 21120 0008 1A68     		ldr	r2, [r3]
3543:src/xeq.c     **** 	if (!is_intmode())
 21121              		.loc 1 3543 18 is_stmt 0 view .LVU5495
 21122 000a 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
3543:src/xeq.c     **** 	if (!is_intmode())
 21123              		.loc 1 3543 22 view .LVU5496
 21124 000e 0138     		subs	r0, r0, #1
 21125              	.LVL1657:
3543:src/xeq.c     **** 	if (!is_intmode())
 21126              		.loc 1 3543 18 view .LVU5497
 21127 0010 60F30713 		bfi	r3, r0, #4, #4
 21128 0014 82F8E837 		strb	r3, [r2, #2024]
3544:src/xeq.c     **** 		switch_to_int();
 21129              		.loc 1 3544 2 is_stmt 1 view .LVU5498
3544:src/xeq.c     **** 		switch_to_int();
 21130              		.loc 1 3544 5 is_stmt 0 view .LVU5499
 21131 0018 DB07     		lsls	r3, r3, #31
 21132 001a 12D5     		bpl	.L1501
 21133              	.LBE3089:
 21134              	.LBE3088:
3556:src/xeq.c     **** 
 21135              		.loc 1 3556 1 view .LVU5500
 21136 001c 08BD     		pop	{r3, pc}
 21137              	.LVL1658:
 21138              	.L1500:
3550:src/xeq.c     **** 			op_float(OP_FLOAT);
 21139              		.loc 1 3550 3 is_stmt 1 view .LVU5501
3550:src/xeq.c     **** 			op_float(OP_FLOAT);
 21140              		.loc 1 3550 6 is_stmt 0 view .LVU5502
 21141 001e 20B9     		cbnz	r0, .L1497
3551:src/xeq.c     **** 		else
 21142              		.loc 1 3551 4 is_stmt 1 view .LVU5503
3556:src/xeq.c     **** 
 21143              		.loc 1 3556 1 is_stmt 0 view .LVU5504
 21144 0020 BDE80840 		pop	{r3, lr}
 21145              		.cfi_remember_state
 21146              		.cfi_restore 14
 21147              		.cfi_restore 3
ARM GAS  /tmp/cc0UaEmF.s 			page 558


 21148              		.cfi_def_cfa_offset 0
3551:src/xeq.c     **** 		else
 21149              		.loc 1 3551 4 view .LVU5505
 21150 0024 5B20     		movs	r0, #91
 21151              	.LVL1659:
3551:src/xeq.c     **** 		else
 21152              		.loc 1 3551 4 view .LVU5506
 21153 0026 FFF7FEBF 		b	op_float
 21154              	.LVL1660:
 21155              	.L1497:
 21156              		.cfi_restore_state
3553:src/xeq.c     **** 	} else
 21157              		.loc 1 3553 4 is_stmt 1 view .LVU5507
 21158              	.LBB3092:
 21159              	.LBI3092:
3559:src/xeq.c     **** 	op_float(OP_FLOAT);
 21160              		.loc 1 3559 6 view .LVU5508
 21161              	.LBB3093:
3560:src/xeq.c     **** 	UState.fract = 1;
 21162              		.loc 1 3560 2 view .LVU5509
 21163 002a 5B20     		movs	r0, #91
 21164              	.LVL1661:
3560:src/xeq.c     **** 	UState.fract = 1;
 21165              		.loc 1 3560 2 is_stmt 0 view .LVU5510
 21166 002c FFF7FEFF 		bl	op_float
 21167              	.LVL1662:
3561:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 21168              		.loc 1 3561 2 is_stmt 1 view .LVU5511
3561:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 21169              		.loc 1 3561 15 is_stmt 0 view .LVU5512
 21170 0030 064B     		ldr	r3, .L1502
 21171 0032 1A68     		ldr	r2, [r3]
 21172 0034 92F8E637 		ldrb	r3, [r2, #2022]	@ zero_extendqisi2
 21173 0038 43F02003 		orr	r3, r3, #32
 21174 003c 82F8E637 		strb	r3, [r2, #2022]
3562:src/xeq.c     **** 		UState.improperfrac = 1;
 21175              		.loc 1 3562 2 is_stmt 1 view .LVU5513
3564:src/xeq.c     **** 		UState.improperfrac = 0;
 21176              		.loc 1 3564 7 view .LVU5514
 21177              	.LBE3093:
 21178              	.LBE3092:
3556:src/xeq.c     **** 
 21179              		.loc 1 3556 1 is_stmt 0 view .LVU5515
 21180 0040 08BD     		pop	{r3, pc}
 21181              	.LVL1663:
 21182              	.L1501:
 21183              	.LBB3094:
 21184              	.LBB3090:
3545:src/xeq.c     **** }
 21185              		.loc 1 3545 3 is_stmt 1 view .LVU5516
 21186              	.LBE3090:
 21187              	.LBE3094:
3556:src/xeq.c     **** 
 21188              		.loc 1 3556 1 is_stmt 0 view .LVU5517
 21189 0042 BDE80840 		pop	{r3, lr}
 21190              		.cfi_restore 14
 21191              		.cfi_restore 3
ARM GAS  /tmp/cc0UaEmF.s 			page 559


 21192              		.cfi_def_cfa_offset 0
 21193              	.LBB3095:
 21194              	.LBB3091:
3545:src/xeq.c     **** }
 21195              		.loc 1 3545 3 view .LVU5518
 21196 0046 FFF7FEBF 		b	switch_to_int
 21197              	.LVL1664:
 21198              	.L1503:
3545:src/xeq.c     **** }
 21199              		.loc 1 3545 3 view .LVU5519
 21200 004a 00BF     		.align	2
 21201              	.L1502:
 21202 004c 00000000 		.word	main_ram
 21203              	.LBE3091:
 21204              	.LBE3095:
 21205              		.cfi_endproc
 21206              	.LFE205:
 21208              		.section	.text.op_fract,"ax",%progbits
 21209              		.align	1
 21210              		.p2align 2,,3
 21211              		.global	op_fract
 21212              		.syntax unified
 21213              		.thumb
 21214              		.thumb_func
 21215              		.fpu fpv4-sp-d16
 21217              	op_fract:
 21218              	.LVL1665:
 21219              	.LFB206:
3559:src/xeq.c     **** 	op_float(OP_FLOAT);
 21220              		.loc 1 3559 30 is_stmt 1 view -0
 21221              		.cfi_startproc
 21222              		@ args = 0, pretend = 0, frame = 0
 21223              		@ frame_needed = 0, uses_anonymous_args = 0
3560:src/xeq.c     **** 	UState.fract = 1;
 21224              		.loc 1 3560 2 view .LVU5521
3559:src/xeq.c     **** 	op_float(OP_FLOAT);
 21225              		.loc 1 3559 30 is_stmt 0 view .LVU5522
 21226 0000 10B5     		push	{r4, lr}
 21227              		.cfi_def_cfa_offset 8
 21228              		.cfi_offset 4, -8
 21229              		.cfi_offset 14, -4
3559:src/xeq.c     **** 	op_float(OP_FLOAT);
 21230              		.loc 1 3559 30 view .LVU5523
 21231 0002 0446     		mov	r4, r0
3560:src/xeq.c     **** 	UState.fract = 1;
 21232              		.loc 1 3560 2 view .LVU5524
 21233 0004 5B20     		movs	r0, #91
 21234              	.LVL1666:
3560:src/xeq.c     **** 	UState.fract = 1;
 21235              		.loc 1 3560 2 view .LVU5525
 21236 0006 FFF7FEFF 		bl	op_float
 21237              	.LVL1667:
3561:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 21238              		.loc 1 3561 2 is_stmt 1 view .LVU5526
 21239 000a 0D4B     		ldr	r3, .L1510
 21240 000c 1B68     		ldr	r3, [r3]
3561:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
ARM GAS  /tmp/cc0UaEmF.s 			page 560


 21241              		.loc 1 3561 15 is_stmt 0 view .LVU5527
 21242 000e 93F8E627 		ldrb	r2, [r3, #2022]	@ zero_extendqisi2
3562:src/xeq.c     **** 		UState.improperfrac = 1;
 21243              		.loc 1 3562 5 view .LVU5528
 21244 0012 4D2C     		cmp	r4, #77
3561:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 21245              		.loc 1 3561 15 view .LVU5529
 21246 0014 42F02002 		orr	r2, r2, #32
 21247 0018 83F8E627 		strb	r2, [r3, #2022]
3562:src/xeq.c     **** 		UState.improperfrac = 1;
 21248              		.loc 1 3562 2 is_stmt 1 view .LVU5530
3562:src/xeq.c     **** 		UState.improperfrac = 1;
 21249              		.loc 1 3562 5 is_stmt 0 view .LVU5531
 21250 001c 09D0     		beq	.L1508
3564:src/xeq.c     **** 		UState.improperfrac = 0;
 21251              		.loc 1 3564 7 is_stmt 1 view .LVU5532
3564:src/xeq.c     **** 		UState.improperfrac = 0;
 21252              		.loc 1 3564 10 is_stmt 0 view .LVU5533
 21253 001e 4E2C     		cmp	r4, #78
 21254 0020 00D0     		beq	.L1509
3566:src/xeq.c     **** 
 21255              		.loc 1 3566 1 view .LVU5534
 21256 0022 10BD     		pop	{r4, pc}
 21257              	.L1509:
3565:src/xeq.c     **** }
 21258              		.loc 1 3565 3 is_stmt 1 view .LVU5535
3565:src/xeq.c     **** }
 21259              		.loc 1 3565 23 is_stmt 0 view .LVU5536
 21260 0024 93F8E627 		ldrb	r2, [r3, #2022]	@ zero_extendqisi2
 21261 0028 6FF30412 		bfc	r2, #4, #1
 21262 002c 83F8E627 		strb	r2, [r3, #2022]
3566:src/xeq.c     **** 
 21263              		.loc 1 3566 1 view .LVU5537
 21264 0030 10BD     		pop	{r4, pc}
 21265              	.L1508:
3563:src/xeq.c     **** 	else if (op == OP_FRACPROPER)
 21266              		.loc 1 3563 3 is_stmt 1 view .LVU5538
3563:src/xeq.c     **** 	else if (op == OP_FRACPROPER)
 21267              		.loc 1 3563 23 is_stmt 0 view .LVU5539
 21268 0032 D2B2     		uxtb	r2, r2
 21269 0034 42F01002 		orr	r2, r2, #16
 21270 0038 83F8E627 		strb	r2, [r3, #2022]
3566:src/xeq.c     **** 
 21271              		.loc 1 3566 1 view .LVU5540
 21272 003c 10BD     		pop	{r4, pc}
 21273              	.L1511:
 21274 003e 00BF     		.align	2
 21275              	.L1510:
 21276 0040 00000000 		.word	main_ram
 21277              		.cfi_endproc
 21278              	.LFE206:
 21280              		.section	.text.cmdsavem,"ax",%progbits
 21281              		.align	1
 21282              		.p2align 2,,3
 21283              		.global	cmdsavem
 21284              		.syntax unified
 21285              		.thumb
ARM GAS  /tmp/cc0UaEmF.s 			page 561


 21286              		.thumb_func
 21287              		.fpu fpv4-sp-d16
 21289              	cmdsavem:
 21290              	.LVL1668:
 21291              	.LFB207:
3571:src/xeq.c     **** 	xcopy( get_reg_n(arg), &UState, sizeof(unsigned long long int) );
 21292              		.loc 1 3571 47 is_stmt 1 view -0
 21293              		.cfi_startproc
 21294              		@ args = 0, pretend = 0, frame = 0
 21295              		@ frame_needed = 0, uses_anonymous_args = 0
3572:src/xeq.c     **** }
 21296              		.loc 1 3572 2 view .LVU5542
3571:src/xeq.c     **** 	xcopy( get_reg_n(arg), &UState, sizeof(unsigned long long int) );
 21297              		.loc 1 3571 47 is_stmt 0 view .LVU5543
 21298 0000 08B5     		push	{r3, lr}
 21299              		.cfi_def_cfa_offset 8
 21300              		.cfi_offset 3, -8
 21301              		.cfi_offset 14, -4
3572:src/xeq.c     **** }
 21302              		.loc 1 3572 9 view .LVU5544
 21303 0002 FFF7FEFF 		bl	get_reg_n
 21304              	.LVL1669:
3572:src/xeq.c     **** }
 21305              		.loc 1 3572 26 view .LVU5545
 21306 0006 044B     		ldr	r3, .L1514
3572:src/xeq.c     **** }
 21307              		.loc 1 3572 25 view .LVU5546
 21308 0008 1968     		ldr	r1, [r3]
3572:src/xeq.c     **** }
 21309              		.loc 1 3572 2 view .LVU5547
 21310 000a 0822     		movs	r2, #8
3573:src/xeq.c     **** 
 21311              		.loc 1 3573 1 view .LVU5548
 21312 000c BDE80840 		pop	{r3, lr}
 21313              		.cfi_restore 14
 21314              		.cfi_restore 3
 21315              		.cfi_def_cfa_offset 0
3572:src/xeq.c     **** }
 21316              		.loc 1 3572 2 view .LVU5549
 21317 0010 01F2E471 		addw	r1, r1, #2020
 21318 0014 FFF7FEBF 		b	xcopy
 21319              	.LVL1670:
 21320              	.L1515:
 21321              		.align	2
 21322              	.L1514:
 21323 0018 00000000 		.word	main_ram
 21324              		.cfi_endproc
 21325              	.LFE207:
 21327              		.section	.text.set_entry,"ax",%progbits
 21328              		.align	1
 21329              		.p2align 2,,3
 21330              		.global	set_entry
 21331              		.syntax unified
 21332              		.thumb
 21333              		.thumb_func
 21334              		.fpu fpv4-sp-d16
 21336              	set_entry:
ARM GAS  /tmp/cc0UaEmF.s 			page 562


 21337              	.LFB210:
3697:src/xeq.c     **** 	if (!Running && !XromRunning)
 21338              		.loc 1 3697 18 is_stmt 1 view -0
 21339              		.cfi_startproc
 21340              		@ args = 0, pretend = 0, frame = 0
 21341              		@ frame_needed = 0, uses_anonymous_args = 0
 21342              		@ link register save eliminated.
3698:src/xeq.c     **** 		State.entryp = 1;
 21343              		.loc 1 3698 2 view .LVU5551
 21344              	.LBB3098:
 21345              	.LBI3098:
3697:src/xeq.c     **** 	if (!Running && !XromRunning)
 21346              		.loc 1 3697 6 view .LVU5552
 21347              	.LBE3098:
3698:src/xeq.c     **** 		State.entryp = 1;
 21348              		.loc 1 3698 6 is_stmt 0 view .LVU5553
 21349 0000 074A     		ldr	r2, .L1518
 21350              	.LBB3100:
 21351              	.LBB3099:
3698:src/xeq.c     **** 		State.entryp = 1;
 21352              		.loc 1 3698 18 view .LVU5554
 21353 0002 084B     		ldr	r3, .L1518+4
3698:src/xeq.c     **** 		State.entryp = 1;
 21354              		.loc 1 3698 15 view .LVU5555
 21355 0004 1268     		ldr	r2, [r2]
 21356 0006 1B68     		ldr	r3, [r3]
 21357 0008 1343     		orrs	r3, r2, r3
 21358 000a 07D1     		bne	.L1516
3699:src/xeq.c     **** }
 21359              		.loc 1 3699 3 is_stmt 1 view .LVU5556
3699:src/xeq.c     **** }
 21360              		.loc 1 3699 16 is_stmt 0 view .LVU5557
 21361 000c 064B     		ldr	r3, .L1518+8
 21362 000e 1A68     		ldr	r2, [r3]
 21363 0010 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
 21364 0014 43F01003 		orr	r3, r3, #16
 21365 0018 82F8DD37 		strb	r3, [r2, #2013]
 21366              	.L1516:
 21367              	.LBE3099:
 21368              	.LBE3100:
3700:src/xeq.c     **** 
 21369              		.loc 1 3700 1 view .LVU5558
 21370 001c 7047     		bx	lr
 21371              	.L1519:
 21372 001e 00BF     		.align	2
 21373              	.L1518:
 21374 0020 00000000 		.word	Running
 21375 0024 00000000 		.word	XromRunning
 21376 0028 00000000 		.word	main_ram
 21377              		.cfi_endproc
 21378              	.LFE210:
 21380              		.section	.text.get_trig_mode,"ax",%progbits
 21381              		.align	1
 21382              		.p2align 2,,3
 21383              		.global	get_trig_mode
 21384              		.syntax unified
 21385              		.thumb
ARM GAS  /tmp/cc0UaEmF.s 			page 563


 21386              		.thumb_func
 21387              		.fpu fpv4-sp-d16
 21389              	get_trig_mode:
 21390              	.LFB212:
3871:src/xeq.c     **** 	if (State2.cmplx || XromFlags.xIN)
 21391              		.loc 1 3871 37 is_stmt 1 view -0
 21392              		.cfi_startproc
 21393              		@ args = 0, pretend = 0, frame = 0
 21394              		@ frame_needed = 0, uses_anonymous_args = 0
 21395              		@ link register save eliminated.
3872:src/xeq.c     **** 		return TRIG_RAD;
 21396              		.loc 1 3872 2 view .LVU5560
3872:src/xeq.c     **** 		return TRIG_RAD;
 21397              		.loc 1 3872 6 is_stmt 0 view .LVU5561
 21398 0000 084B     		ldr	r3, .L1524
 21399 0002 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
3872:src/xeq.c     **** 		return TRIG_RAD;
 21400              		.loc 1 3872 5 view .LVU5562
 21401 0004 9B07     		lsls	r3, r3, #30
 21402 0006 0AD4     		bmi	.L1523
3872:src/xeq.c     **** 		return TRIG_RAD;
 21403              		.loc 1 3872 19 discriminator 1 view .LVU5563
 21404 0008 074B     		ldr	r3, .L1524+4
 21405 000a 93F90130 		ldrsb	r3, [r3, #1]
 21406 000e 002B     		cmp	r3, #0
 21407 0010 05DB     		blt	.L1523
3875:src/xeq.c     **** }
 21408              		.loc 1 3875 2 is_stmt 1 view .LVU5564
3875:src/xeq.c     **** }
 21409              		.loc 1 3875 33 is_stmt 0 view .LVU5565
 21410 0012 064B     		ldr	r3, .L1524+8
 21411 0014 1B68     		ldr	r3, [r3]
 21412 0016 93F8EA07 		ldrb	r0, [r3, #2026]	@ zero_extendqisi2
3875:src/xeq.c     **** }
 21413              		.loc 1 3875 9 view .LVU5566
 21414 001a 8009     		lsrs	r0, r0, #6
 21415 001c 7047     		bx	lr
 21416              	.L1523:
3873:src/xeq.c     **** 	//if (State2.hyp)	return TRIG_RAD;
 21417              		.loc 1 3873 10 view .LVU5567
 21418 001e 0120     		movs	r0, #1
3876:src/xeq.c     **** 
 21419              		.loc 1 3876 1 view .LVU5568
 21420 0020 7047     		bx	lr
 21421              	.L1525:
 21422 0022 00BF     		.align	2
 21423              	.L1524:
 21424 0024 00000000 		.word	StateWhileOn
 21425 0028 00000000 		.word	XromParams
 21426 002c 00000000 		.word	main_ram
 21427              		.cfi_endproc
 21428              	.LFE212:
 21430              		.section	.text.cmdpause,"ax",%progbits
 21431              		.align	1
 21432              		.p2align 2,,3
 21433              		.global	cmdpause
 21434              		.syntax unified
ARM GAS  /tmp/cc0UaEmF.s 			page 564


 21435              		.thumb
 21436              		.thumb_func
 21437              		.fpu fpv4-sp-d16
 21439              	cmdpause:
 21440              	.LVL1671:
 21441              	.LFB214:
3921:src/xeq.c     **** 	display();
 21442              		.loc 1 3921 47 is_stmt 1 view -0
 21443              		.cfi_startproc
 21444              		@ args = 0, pretend = 0, frame = 0
 21445              		@ frame_needed = 0, uses_anonymous_args = 0
3922:src/xeq.c     **** #ifndef CONSOLE
 21446              		.loc 1 3922 2 view .LVU5570
3921:src/xeq.c     **** 	display();
 21447              		.loc 1 3921 47 is_stmt 0 view .LVU5571
 21448 0000 10B5     		push	{r4, lr}
 21449              		.cfi_def_cfa_offset 8
 21450              		.cfi_offset 4, -8
 21451              		.cfi_offset 14, -4
3921:src/xeq.c     **** 	display();
 21452              		.loc 1 3921 47 view .LVU5572
 21453 0002 0446     		mov	r4, r0
3922:src/xeq.c     **** #ifndef CONSOLE
 21454              		.loc 1 3922 2 view .LVU5573
 21455 0004 FFF7FEFF 		bl	display
 21456              	.LVL1672:
3925:src/xeq.c     **** 	GoFast = (arg == 0);
 21457              		.loc 1 3925 2 is_stmt 1 view .LVU5574
3925:src/xeq.c     **** 	GoFast = (arg == 0);
 21458              		.loc 1 3925 8 is_stmt 0 view .LVU5575
 21459 0008 044A     		ldr	r2, .L1528
3926:src/xeq.c     **** #elif 0
 21460              		.loc 1 3926 9 view .LVU5576
 21461 000a 0549     		ldr	r1, .L1528+4
3926:src/xeq.c     **** #elif 0
 21462              		.loc 1 3926 16 view .LVU5577
 21463 000c B4FA84F3 		clz	r3, r4
3925:src/xeq.c     **** 	GoFast = (arg == 0);
 21464              		.loc 1 3925 8 view .LVU5578
 21465 0010 E4B2     		uxtb	r4, r4
 21466              	.LVL1673:
3926:src/xeq.c     **** #elif 0
 21467              		.loc 1 3926 16 view .LVU5579
 21468 0012 5B09     		lsrs	r3, r3, #5
3925:src/xeq.c     **** 	GoFast = (arg == 0);
 21469              		.loc 1 3925 8 view .LVU5580
 21470 0014 1470     		strb	r4, [r2]
3926:src/xeq.c     **** #elif 0
 21471              		.loc 1 3926 2 is_stmt 1 view .LVU5581
3926:src/xeq.c     **** #elif 0
 21472              		.loc 1 3926 9 is_stmt 0 view .LVU5582
 21473 0016 0B60     		str	r3, [r1]
3937:src/xeq.c     **** 
 21474              		.loc 1 3937 1 view .LVU5583
 21475 0018 10BD     		pop	{r4, pc}
 21476              	.L1529:
 21477 001a 00BF     		.align	2
ARM GAS  /tmp/cc0UaEmF.s 			page 565


 21478              	.L1528:
 21479 001c 00000000 		.word	Pause
 21480 0020 00000000 		.word	GoFast
 21481              		.cfi_endproc
 21482              	.LFE214:
 21484              		.section	.text.op_setspeed,"ax",%progbits
 21485              		.align	1
 21486              		.p2align 2,,3
 21487              		.global	op_setspeed
 21488              		.syntax unified
 21489              		.thumb
 21490              		.thumb_func
 21491              		.fpu fpv4-sp-d16
 21493              	op_setspeed:
 21494              	.LVL1674:
 21495              	.LFB215:
3941:src/xeq.c     **** 	UState.slow_speed = (op == OP_SLOW) ? 1 : 0;
 21496              		.loc 1 3941 33 is_stmt 1 view -0
 21497              		.cfi_startproc
 21498              		@ args = 0, pretend = 0, frame = 0
 21499              		@ frame_needed = 0, uses_anonymous_args = 0
 21500              		@ link register save eliminated.
3942:src/xeq.c     **** 	update_speed(1);
 21501              		.loc 1 3942 2 view .LVU5585
3942:src/xeq.c     **** 	update_speed(1);
 21502              		.loc 1 3942 20 is_stmt 0 view .LVU5586
 21503 0000 064B     		ldr	r3, .L1531
 21504 0002 1B68     		ldr	r3, [r3]
3942:src/xeq.c     **** 	update_speed(1);
 21505              		.loc 1 3942 42 view .LVU5587
 21506 0004 A0F19A00 		sub	r0, #154
 21507              	.LVL1675:
3942:src/xeq.c     **** 	update_speed(1);
 21508              		.loc 1 3942 20 view .LVU5588
 21509 0008 93F8EB27 		ldrb	r2, [r3, #2027]	@ zero_extendqisi2
3942:src/xeq.c     **** 	update_speed(1);
 21510              		.loc 1 3942 42 view .LVU5589
 21511 000c B0FA80F0 		clz	r0, r0
 21512 0010 4009     		lsrs	r0, r0, #5
3942:src/xeq.c     **** 	update_speed(1);
 21513              		.loc 1 3942 20 view .LVU5590
 21514 0012 60F3C302 		bfi	r2, r0, #3, #1
 21515 0016 83F8EB27 		strb	r2, [r3, #2027]
3943:src/xeq.c     **** }
 21516              		.loc 1 3943 17 is_stmt 1 view .LVU5591
3944:src/xeq.c     **** 
 21517              		.loc 1 3944 1 is_stmt 0 view .LVU5592
 21518 001a 7047     		bx	lr
 21519              	.L1532:
 21520              		.align	2
 21521              	.L1531:
 21522 001c 00000000 		.word	main_ram
 21523              		.cfi_endproc
 21524              	.LFE215:
 21526              		.section	.text.op_prompt,"ax",%progbits
 21527              		.align	1
 21528              		.p2align 2,,3
ARM GAS  /tmp/cc0UaEmF.s 			page 566


 21529              		.global	op_prompt
 21530              		.syntax unified
 21531              		.thumb
 21532              		.thumb_func
 21533              		.fpu fpv4-sp-d16
 21535              	op_prompt:
 21536              	.LVL1676:
 21537              	.LFB216:
3947:src/xeq.c     **** 	set_running_off();
 21538              		.loc 1 3947 31 is_stmt 1 view -0
 21539              		.cfi_startproc
 21540              		@ args = 0, pretend = 0, frame = 0
 21541              		@ frame_needed = 0, uses_anonymous_args = 0
3948:src/xeq.c     **** 	alpha_view_common(regX_idx);
 21542              		.loc 1 3948 2 view .LVU5594
 21543              	.LBB3101:
 21544              	.LBI3101:
5580:src/xeq.c     **** 	set_running_off_sst();
 21545              		.loc 1 5580 6 view .LVU5595
 21546              	.LBB3102:
5581:src/xeq.c     **** 	State.entryp = 0;
 21547              		.loc 1 5581 2 view .LVU5596
 21548              	.LBB3103:
 21549              	.LBI3103:
5572:src/xeq.c     **** 	Running = 0;
 21550              		.loc 1 5572 6 view .LVU5597
 21551              	.LBB3104:
5573:src/xeq.c     **** }
 21552              		.loc 1 5573 2 view .LVU5598
 21553              	.LBE3104:
 21554              	.LBE3103:
 21555              	.LBE3102:
 21556              	.LBE3101:
3947:src/xeq.c     **** 	set_running_off();
 21557              		.loc 1 3947 31 is_stmt 0 view .LVU5599
 21558 0000 08B5     		push	{r3, lr}
 21559              		.cfi_def_cfa_offset 8
 21560              		.cfi_offset 3, -8
 21561              		.cfi_offset 14, -4
 21562              	.LBB3110:
 21563              	.LBB3109:
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 21564              		.loc 1 5582 15 view .LVU5600
 21565 0002 094B     		ldr	r3, .L1535
 21566              	.LBB3107:
 21567              	.LBB3105:
5573:src/xeq.c     **** }
 21568              		.loc 1 5573 10 view .LVU5601
 21569 0004 094A     		ldr	r2, .L1535+4
 21570              	.LBE3105:
 21571              	.LBE3107:
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 21572              		.loc 1 5582 15 view .LVU5602
 21573 0006 1B68     		ldr	r3, [r3]
 21574              	.LBB3108:
 21575              	.LBB3106:
5573:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 567


 21576              		.loc 1 5573 10 view .LVU5603
 21577 0008 0021     		movs	r1, #0
 21578 000a 1160     		str	r1, [r2]
 21579              	.LBE3106:
 21580              	.LBE3108:
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 21581              		.loc 1 5582 2 is_stmt 1 view .LVU5604
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 21582              		.loc 1 5582 15 is_stmt 0 view .LVU5605
 21583 000c 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 21584 0010 61F30412 		bfi	r2, r1, #4, #1
 21585 0014 83F8DD27 		strb	r2, [r3, #2013]
 21586              		.loc 1 5583 2 is_stmt 1 view .LVU5606
 21587 0018 8A20     		movs	r0, #138
 21588              	.LVL1677:
 21589              		.loc 1 5583 2 is_stmt 0 view .LVU5607
 21590 001a FFF7FEFF 		bl	dot
 21591              	.LVL1678:
 21592              	.LBE3109:
 21593              	.LBE3110:
3949:src/xeq.c     **** }
 21594              		.loc 1 3949 2 is_stmt 1 view .LVU5608
3950:src/xeq.c     **** 
 21595              		.loc 1 3950 1 is_stmt 0 view .LVU5609
 21596 001e BDE80840 		pop	{r3, lr}
 21597              		.cfi_restore 14
 21598              		.cfi_restore 3
 21599              		.cfi_def_cfa_offset 0
3949:src/xeq.c     **** }
 21600              		.loc 1 3949 2 view .LVU5610
 21601 0022 6420     		movs	r0, #100
 21602 0024 FFF7FEBF 		b	alpha_view_common
 21603              	.LVL1679:
 21604              	.L1536:
 21605              		.align	2
 21606              	.L1535:
 21607 0028 00000000 		.word	main_ram
 21608 002c 00000000 		.word	Running
 21609              		.cfi_endproc
 21610              	.LFE216:
 21612              		.section	.text.XisInt,"ax",%progbits
 21613              		.align	1
 21614              		.p2align 2,,3
 21615              		.global	XisInt
 21616              		.syntax unified
 21617              		.thumb
 21618              		.thumb_func
 21619              		.fpu fpv4-sp-d16
 21621              	XisInt:
 21622              	.LVL1680:
 21623              	.LFB217:
3954:src/xeq.c     **** 	decNumber x;
 21624              		.loc 1 3954 28 is_stmt 1 view -0
 21625              		.cfi_startproc
 21626              		@ args = 0, pretend = 0, frame = 40
 21627              		@ frame_needed = 0, uses_anonymous_args = 0
3955:src/xeq.c     **** 	int result, op_int = (op == OP_XisINT);
ARM GAS  /tmp/cc0UaEmF.s 			page 568


 21628              		.loc 1 3955 2 view .LVU5612
3956:src/xeq.c     **** 	if ( is_intmode() )
 21629              		.loc 1 3956 2 view .LVU5613
3957:src/xeq.c     **** 		result = op_int;
 21630              		.loc 1 3957 7 is_stmt 0 view .LVU5614
 21631 0000 164B     		ldr	r3, .L1543
3954:src/xeq.c     **** 	decNumber x;
 21632              		.loc 1 3954 28 view .LVU5615
 21633 0002 30B5     		push	{r4, r5, lr}
 21634              		.cfi_def_cfa_offset 12
 21635              		.cfi_offset 4, -12
 21636              		.cfi_offset 5, -8
 21637              		.cfi_offset 14, -4
3957:src/xeq.c     **** 		result = op_int;
 21638              		.loc 1 3957 7 view .LVU5616
 21639 0004 1B68     		ldr	r3, [r3]
 21640 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3956:src/xeq.c     **** 	if ( is_intmode() )
 21641              		.loc 1 3956 27 view .LVU5617
 21642 000a A0F18704 		sub	r4, r0, #135
 21643 000e B4FA84F4 		clz	r4, r4
3957:src/xeq.c     **** 		result = op_int;
 21644              		.loc 1 3957 5 view .LVU5618
 21645 0012 13F00105 		ands	r5, r3, #1
3954:src/xeq.c     **** 	decNumber x;
 21646              		.loc 1 3954 28 view .LVU5619
 21647 0016 8BB0     		sub	sp, sp, #44
 21648              		.cfi_def_cfa_offset 56
3956:src/xeq.c     **** 	if ( is_intmode() )
 21649              		.loc 1 3956 27 view .LVU5620
 21650 0018 4FEA5414 		lsr	r4, r4, #5
 21651              	.LVL1681:
3957:src/xeq.c     **** 		result = op_int;
 21652              		.loc 1 3957 2 is_stmt 1 view .LVU5621
3957:src/xeq.c     **** 		result = op_int;
 21653              		.loc 1 3957 5 is_stmt 0 view .LVU5622
 21654 001c 04D0     		beq	.L1541
 21655              	.LVL1682:
3963:src/xeq.c     **** }
 21656              		.loc 1 3963 2 is_stmt 1 view .LVU5623
 21657 001e 2046     		mov	r0, r4
 21658              	.LVL1683:
3963:src/xeq.c     **** }
 21659              		.loc 1 3963 2 is_stmt 0 view .LVU5624
 21660 0020 FFF7FEFF 		bl	fin_tst
 21661              	.LVL1684:
3964:src/xeq.c     **** 
 21662              		.loc 1 3964 1 view .LVU5625
 21663 0024 0BB0     		add	sp, sp, #44
 21664              		.cfi_remember_state
 21665              		.cfi_def_cfa_offset 12
 21666              		@ sp needed
 21667 0026 30BD     		pop	{r4, r5, pc}
 21668              	.LVL1685:
 21669              	.L1541:
 21670              		.cfi_restore_state
3959:src/xeq.c     **** 		result = 0;
ARM GAS  /tmp/cc0UaEmF.s 			page 569


 21671              		.loc 1 3959 7 is_stmt 1 view .LVU5626
 21672              	.LBB3111:
 21673              	.LBI3111:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 21674              		.loc 1 805 12 view .LVU5627
 21675              	.LBB3112:
 806:src/xeq.c     **** }
 21676              		.loc 1 806 2 view .LVU5628
 806:src/xeq.c     **** }
 21677              		.loc 1 806 9 is_stmt 0 view .LVU5629
 21678 0028 01A8     		add	r0, sp, #4
 21679              	.LVL1686:
 806:src/xeq.c     **** }
 21680              		.loc 1 806 9 view .LVU5630
 21681 002a 6421     		movs	r1, #100
 21682 002c FFF7FEFF 		bl	getRegister
 21683              	.LVL1687:
 806:src/xeq.c     **** }
 21684              		.loc 1 806 9 view .LVU5631
 21685              	.LBE3112:
 21686              	.LBE3111:
3959:src/xeq.c     **** 		result = 0;
 21687              		.loc 1 3959 10 view .LVU5632
 21688 0030 037A     		ldrb	r3, [r0, #8]	@ zero_extendqisi2
 21689 0032 13F0700F 		tst	r3, #112
 21690 0036 05D0     		beq	.L1542
3960:src/xeq.c     **** 	else
 21691              		.loc 1 3960 10 view .LVU5633
 21692 0038 2C46     		mov	r4, r5
 21693              	.LVL1688:
3963:src/xeq.c     **** }
 21694              		.loc 1 3963 2 is_stmt 1 view .LVU5634
 21695 003a 2046     		mov	r0, r4
 21696 003c FFF7FEFF 		bl	fin_tst
 21697              	.LVL1689:
3964:src/xeq.c     **** 
 21698              		.loc 1 3964 1 is_stmt 0 view .LVU5635
 21699 0040 0BB0     		add	sp, sp, #44
 21700              		.cfi_remember_state
 21701              		.cfi_def_cfa_offset 12
 21702              		@ sp needed
 21703 0042 30BD     		pop	{r4, r5, pc}
 21704              	.LVL1690:
 21705              	.L1542:
 21706              		.cfi_restore_state
3962:src/xeq.c     **** 	fin_tst(result);
 21707              		.loc 1 3962 10 is_stmt 1 view .LVU5636
3962:src/xeq.c     **** 	fin_tst(result);
 21708              		.loc 1 3962 20 is_stmt 0 view .LVU5637
 21709 0044 01A8     		add	r0, sp, #4
 21710 0046 FFF7FEFF 		bl	is_int
 21711              	.LVL1691:
3962:src/xeq.c     **** 	fin_tst(result);
 21712              		.loc 1 3962 31 view .LVU5638
 21713 004a 041B     		subs	r4, r0, r4
 21714              	.LVL1692:
3962:src/xeq.c     **** 	fin_tst(result);
ARM GAS  /tmp/cc0UaEmF.s 			page 570


 21715              		.loc 1 3962 31 view .LVU5639
 21716 004c B4FA84F4 		clz	r4, r4
 21717 0050 6409     		lsrs	r4, r4, #5
 21718              	.LVL1693:
3963:src/xeq.c     **** }
 21719              		.loc 1 3963 2 is_stmt 1 view .LVU5640
 21720 0052 2046     		mov	r0, r4
 21721 0054 FFF7FEFF 		bl	fin_tst
 21722              	.LVL1694:
3964:src/xeq.c     **** 
 21723              		.loc 1 3964 1 is_stmt 0 view .LVU5641
 21724 0058 0BB0     		add	sp, sp, #44
 21725              		.cfi_def_cfa_offset 12
 21726              		@ sp needed
 21727 005a 30BD     		pop	{r4, r5, pc}
 21728              	.LVL1695:
 21729              	.L1544:
3964:src/xeq.c     **** 
 21730              		.loc 1 3964 1 view .LVU5642
 21731              		.align	2
 21732              	.L1543:
 21733 005c 00000000 		.word	main_ram
 21734              		.cfi_endproc
 21735              	.LFE217:
 21737              		.section	.text.XisEvenOrOdd,"ax",%progbits
 21738              		.align	1
 21739              		.p2align 2,,3
 21740              		.global	XisEvenOrOdd
 21741              		.syntax unified
 21742              		.thumb
 21743              		.thumb_func
 21744              		.fpu fpv4-sp-d16
 21746              	XisEvenOrOdd:
 21747              	.LVL1696:
 21748              	.LFB218:
3968:src/xeq.c     **** 	decNumber x;
 21749              		.loc 1 3968 34 is_stmt 1 view -0
 21750              		.cfi_startproc
 21751              		@ args = 0, pretend = 0, frame = 40
 21752              		@ frame_needed = 0, uses_anonymous_args = 0
3969:src/xeq.c     **** 	int odd = (op == OP_XisODD);
 21753              		.loc 1 3969 2 view .LVU5644
3970:src/xeq.c     **** 
 21754              		.loc 1 3970 2 view .LVU5645
3972:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 21755              		.loc 1 3972 6 is_stmt 0 view .LVU5646
 21756 0000 174B     		ldr	r3, .L1549
3968:src/xeq.c     **** 	decNumber x;
 21757              		.loc 1 3968 34 view .LVU5647
 21758 0002 30B5     		push	{r4, r5, lr}
 21759              		.cfi_def_cfa_offset 12
 21760              		.cfi_offset 4, -12
 21761              		.cfi_offset 5, -8
 21762              		.cfi_offset 14, -4
3972:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 21763              		.loc 1 3972 6 view .LVU5648
 21764 0004 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc0UaEmF.s 			page 571


 21765 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3972:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 21766              		.loc 1 3972 5 view .LVU5649
 21767 000a DB07     		lsls	r3, r3, #31
3968:src/xeq.c     **** 	decNumber x;
 21768              		.loc 1 3968 34 view .LVU5650
 21769 000c 8BB0     		sub	sp, sp, #44
 21770              		.cfi_def_cfa_offset 56
3968:src/xeq.c     **** 	decNumber x;
 21771              		.loc 1 3968 34 view .LVU5651
 21772 000e 0446     		mov	r4, r0
 21773              	.LVL1697:
3972:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 21774              		.loc 1 3972 2 is_stmt 1 view .LVU5652
3972:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 21775              		.loc 1 3972 5 is_stmt 0 view .LVU5653
 21776 0010 15D5     		bpl	.L1546
3973:src/xeq.c     **** 	} else {
 21777              		.loc 1 3973 3 is_stmt 1 view .LVU5654
 21778              	.LBB3113:
 21779              	.LBI3113:
1256:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 21780              		.loc 1 1256 15 view .LVU5655
 21781              	.LBB3114:
1257:src/xeq.c     **** }
 21782              		.loc 1 1257 2 view .LVU5656
1257:src/xeq.c     **** }
 21783              		.loc 1 1257 9 is_stmt 0 view .LVU5657
 21784 0012 6420     		movs	r0, #100
 21785              	.LVL1698:
1257:src/xeq.c     **** }
 21786              		.loc 1 1257 9 view .LVU5658
 21787 0014 FFF7FEFF 		bl	get_reg_n_int
 21788              	.LVL1699:
 21789              	.LBE3114:
 21790              	.LBE3113:
3970:src/xeq.c     **** 
 21791              		.loc 1 3970 16 view .LVU5659
 21792 0018 A4F18A04 		sub	r4, #138
 21793              	.LVL1700:
3973:src/xeq.c     **** 	} else {
 21794              		.loc 1 3973 23 view .LVU5660
 21795 001c 0023     		movs	r3, #0
3970:src/xeq.c     **** 
 21796              		.loc 1 3970 16 view .LVU5661
 21797 001e 0025     		movs	r5, #0
 21798 0020 B4FA84F4 		clz	r4, r4
3973:src/xeq.c     **** 	} else {
 21799              		.loc 1 3973 23 view .LVU5662
 21800 0024 00F00102 		and	r2, r0, #1
3973:src/xeq.c     **** 	} else {
 21801              		.loc 1 3973 3 view .LVU5663
 21802 0028 AB42     		cmp	r3, r5
3970:src/xeq.c     **** 
 21803              		.loc 1 3970 16 view .LVU5664
 21804 002a 4FEA5414 		lsr	r4, r4, #5
3973:src/xeq.c     **** 	} else {
ARM GAS  /tmp/cc0UaEmF.s 			page 572


 21805              		.loc 1 3973 3 view .LVU5665
 21806 002e 06BF     		itte	eq
 21807 0030 A242     		cmpeq	r2, r4
 21808 0032 0120     		moveq	r0, #1
 21809 0034 1846     		movne	r0, r3
 21810 0036 FFF7FEFF 		bl	fin_tst
 21811              	.LVL1701:
3977:src/xeq.c     **** 
 21812              		.loc 1 3977 1 view .LVU5666
 21813 003a 0BB0     		add	sp, sp, #44
 21814              		.cfi_remember_state
 21815              		.cfi_def_cfa_offset 12
 21816              		@ sp needed
 21817 003c 30BD     		pop	{r4, r5, pc}
 21818              	.LVL1702:
 21819              	.L1546:
 21820              		.cfi_restore_state
3975:src/xeq.c     **** 	}
 21821              		.loc 1 3975 3 is_stmt 1 view .LVU5667
 21822              	.LBB3115:
 21823              	.LBI3115:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 21824              		.loc 1 805 12 view .LVU5668
 21825              	.LBB3116:
 806:src/xeq.c     **** }
 21826              		.loc 1 806 2 view .LVU5669
 806:src/xeq.c     **** }
 21827              		.loc 1 806 9 is_stmt 0 view .LVU5670
 21828 003e 6421     		movs	r1, #100
 21829 0040 01A8     		add	r0, sp, #4
 21830              	.LVL1703:
 806:src/xeq.c     **** }
 21831              		.loc 1 806 9 view .LVU5671
 21832 0042 FFF7FEFF 		bl	getRegister
 21833              	.LVL1704:
 806:src/xeq.c     **** }
 21834              		.loc 1 806 9 view .LVU5672
 21835              	.LBE3116:
 21836              	.LBE3115:
3975:src/xeq.c     **** 	}
 21837              		.loc 1 3975 11 view .LVU5673
 21838 0046 FFF7FEFF 		bl	is_even
 21839              	.LVL1705:
3975:src/xeq.c     **** 	}
 21840              		.loc 1 3975 32 view .LVU5674
 21841 004a 8A3C     		subs	r4, r4, #138
 21842              	.LVL1706:
3975:src/xeq.c     **** 	}
 21843              		.loc 1 3975 32 view .LVU5675
 21844 004c 18BF     		it	ne
 21845 004e 0124     		movne	r4, #1
3975:src/xeq.c     **** 	}
 21846              		.loc 1 3975 3 view .LVU5676
 21847 0050 201A     		subs	r0, r4, r0
 21848 0052 B0FA80F0 		clz	r0, r0
 21849 0056 4009     		lsrs	r0, r0, #5
 21850 0058 FFF7FEFF 		bl	fin_tst
ARM GAS  /tmp/cc0UaEmF.s 			page 573


 21851              	.LVL1707:
3977:src/xeq.c     **** 
 21852              		.loc 1 3977 1 view .LVU5677
 21853 005c 0BB0     		add	sp, sp, #44
 21854              		.cfi_def_cfa_offset 12
 21855              		@ sp needed
 21856 005e 30BD     		pop	{r4, r5, pc}
 21857              	.L1550:
 21858              		.align	2
 21859              	.L1549:
 21860 0060 00000000 		.word	main_ram
 21861              		.cfi_endproc
 21862              	.LFE218:
 21864              		.section	.text.XisPrime,"ax",%progbits
 21865              		.align	1
 21866              		.p2align 2,,3
 21867              		.global	XisPrime
 21868              		.syntax unified
 21869              		.thumb
 21870              		.thumb_func
 21871              		.fpu fpv4-sp-d16
 21873              	XisPrime:
 21874              	.LVL1708:
 21875              	.LFB219:
3981:src/xeq.c     **** 	unsigned long long int i;
 21876              		.loc 1 3981 30 is_stmt 1 view -0
 21877              		.cfi_startproc
 21878              		@ args = 0, pretend = 0, frame = 40
 21879              		@ frame_needed = 0, uses_anonymous_args = 0
3982:src/xeq.c     **** 	int sgn;
 21880              		.loc 1 3982 2 view .LVU5679
3983:src/xeq.c     **** 
 21881              		.loc 1 3983 2 view .LVU5680
3985:src/xeq.c     **** 	if (!is_intmode()) {
 21882              		.loc 1 3985 2 view .LVU5681
3981:src/xeq.c     **** 	unsigned long long int i;
 21883              		.loc 1 3981 30 is_stmt 0 view .LVU5682
 21884 0000 70B5     		push	{r4, r5, r6, lr}
 21885              		.cfi_def_cfa_offset 16
 21886              		.cfi_offset 4, -16
 21887              		.cfi_offset 5, -12
 21888              		.cfi_offset 6, -8
 21889              		.cfi_offset 14, -4
 21890 0002 8AB0     		sub	sp, sp, #40
 21891              		.cfi_def_cfa_offset 56
 21892              	.LVL1709:
 21893              	.LBB3117:
 21894              	.LBI3117:
1260:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 21895              		.loc 1 1260 24 is_stmt 1 view .LVU5683
 21896              	.LBB3118:
1261:src/xeq.c     **** }
 21897              		.loc 1 1261 2 view .LVU5684
1261:src/xeq.c     **** }
 21898              		.loc 1 1261 9 is_stmt 0 view .LVU5685
 21899 0004 6946     		mov	r1, sp
 21900 0006 6420     		movs	r0, #100
ARM GAS  /tmp/cc0UaEmF.s 			page 574


 21901              	.LVL1710:
1261:src/xeq.c     **** }
 21902              		.loc 1 1261 9 view .LVU5686
 21903 0008 FFF7FEFF 		bl	get_reg_n_int_sgn
 21904              	.LVL1711:
 21905              	.LBE3118:
 21906              	.LBE3117:
3986:src/xeq.c     **** 		decNumber x;
 21907              		.loc 1 3986 6 view .LVU5687
 21908 000c 1B4B     		ldr	r3, .L1561
 21909 000e 1B68     		ldr	r3, [r3]
 21910 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3986:src/xeq.c     **** 		decNumber x;
 21911              		.loc 1 3986 5 view .LVU5688
 21912 0014 13F00104 		ands	r4, r3, #1
 21913              	.LBB3120:
 21914              	.LBB3119:
1261:src/xeq.c     **** }
 21915              		.loc 1 1261 9 view .LVU5689
 21916 0018 0646     		mov	r6, r0
 21917 001a 0D46     		mov	r5, r1
 21918              	.LVL1712:
1261:src/xeq.c     **** }
 21919              		.loc 1 1261 9 view .LVU5690
 21920              	.LBE3119:
 21921              	.LBE3120:
3986:src/xeq.c     **** 		decNumber x;
 21922              		.loc 1 3986 2 is_stmt 1 view .LVU5691
3986:src/xeq.c     **** 		decNumber x;
 21923              		.loc 1 3986 5 is_stmt 0 view .LVU5692
 21924 001c 11D0     		beq	.L1552
 21925 001e 009B     		ldr	r3, [sp]
 21926              	.LVL1713:
 21927              	.L1553:
3996:src/xeq.c     **** }
 21928              		.loc 1 3996 2 is_stmt 1 view .LVU5693
 21929 0020 23B1     		cbz	r3, .L1560
 21930              	.L1558:
3996:src/xeq.c     **** }
 21931              		.loc 1 3996 2 is_stmt 0 view .LVU5694
 21932 0022 0020     		movs	r0, #0
 21933 0024 FFF7FEFF 		bl	fin_tst
 21934              	.LVL1714:
3997:src/xeq.c     **** 
 21935              		.loc 1 3997 1 view .LVU5695
 21936 0028 0AB0     		add	sp, sp, #40
 21937              		.cfi_remember_state
 21938              		.cfi_def_cfa_offset 16
 21939              		@ sp needed
 21940 002a 70BD     		pop	{r4, r5, r6, pc}
 21941              	.L1560:
 21942              		.cfi_restore_state
3996:src/xeq.c     **** }
 21943              		.loc 1 3996 22 discriminator 1 view .LVU5696
 21944 002c 2946     		mov	r1, r5
 21945 002e 3046     		mov	r0, r6
 21946 0030 FFF7FEFF 		bl	isPrime
ARM GAS  /tmp/cc0UaEmF.s 			page 575


 21947              	.LVL1715:
3996:src/xeq.c     **** }
 21948              		.loc 1 3996 2 discriminator 1 view .LVU5697
 21949 0034 0038     		subs	r0, r0, #0
 21950 0036 18BF     		it	ne
 21951 0038 0120     		movne	r0, #1
 21952 003a FFF7FEFF 		bl	fin_tst
 21953              	.LVL1716:
3997:src/xeq.c     **** 
 21954              		.loc 1 3997 1 discriminator 1 view .LVU5698
 21955 003e 0AB0     		add	sp, sp, #40
 21956              		.cfi_remember_state
 21957              		.cfi_def_cfa_offset 16
 21958              		@ sp needed
 21959 0040 70BD     		pop	{r4, r5, r6, pc}
 21960              	.LVL1717:
 21961              	.L1552:
 21962              		.cfi_restore_state
 21963              	.LBB3121:
3987:src/xeq.c     **** 
 21964              		.loc 1 3987 3 is_stmt 1 view .LVU5699
3989:src/xeq.c     **** 		if (decNumberIsSpecial(&x))
 21965              		.loc 1 3989 3 view .LVU5700
 21966              	.LBB3122:
 21967              	.LBI3122:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 21968              		.loc 1 805 12 view .LVU5701
 21969              	.LBB3123:
 806:src/xeq.c     **** }
 21970              		.loc 1 806 2 view .LVU5702
 806:src/xeq.c     **** }
 21971              		.loc 1 806 9 is_stmt 0 view .LVU5703
 21972 0042 01A8     		add	r0, sp, #4
 21973              	.LVL1718:
 806:src/xeq.c     **** }
 21974              		.loc 1 806 9 view .LVU5704
 21975 0044 6421     		movs	r1, #100
 21976 0046 FFF7FEFF 		bl	getRegister
 21977              	.LVL1719:
 806:src/xeq.c     **** }
 21978              		.loc 1 806 9 view .LVU5705
 21979              	.LBE3123:
 21980              	.LBE3122:
3990:src/xeq.c     **** 			sgn = 1; // not prime
 21981              		.loc 1 3990 3 is_stmt 1 view .LVU5706
3990:src/xeq.c     **** 			sgn = 1; // not prime
 21982              		.loc 1 3990 6 is_stmt 0 view .LVU5707
 21983 004a 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 21984 004e 13F0700F 		tst	r3, #112
 21985 0052 06D0     		beq	.L1554
3991:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 21986              		.loc 1 3991 4 is_stmt 1 view .LVU5708
3991:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 21987              		.loc 1 3991 8 is_stmt 0 view .LVU5709
 21988 0054 0123     		movs	r3, #1
 21989              	.LBE3121:
3996:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 576


 21990              		.loc 1 3996 2 view .LVU5710
 21991 0056 2046     		mov	r0, r4
 21992              	.LBB3124:
3991:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 21993              		.loc 1 3991 8 view .LVU5711
 21994 0058 0093     		str	r3, [sp]
3991:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 21995              		.loc 1 3991 8 view .LVU5712
 21996              	.LBE3124:
3996:src/xeq.c     **** }
 21997              		.loc 1 3996 2 is_stmt 1 view .LVU5713
 21998 005a FFF7FEFF 		bl	fin_tst
 21999              	.LVL1720:
3997:src/xeq.c     **** 
 22000              		.loc 1 3997 1 is_stmt 0 view .LVU5714
 22001 005e 0AB0     		add	sp, sp, #40
 22002              		.cfi_remember_state
 22003              		.cfi_def_cfa_offset 16
 22004              		@ sp needed
 22005 0060 70BD     		pop	{r4, r5, r6, pc}
 22006              	.L1554:
 22007              		.cfi_restore_state
 22008              	.LBB3125:
3992:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
 22009              		.loc 1 3992 8 is_stmt 1 view .LVU5715
3992:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
 22010              		.loc 1 3992 12 is_stmt 0 view .LVU5716
 22011 0062 0749     		ldr	r1, .L1561+4
 22012 0064 01A8     		add	r0, sp, #4
 22013 0066 FFF7FEFF 		bl	dn_lt
 22014              	.LVL1721:
 22015 006a 009B     		ldr	r3, [sp]
3992:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
 22016              		.loc 1 3992 11 view .LVU5717
 22017 006c 0028     		cmp	r0, #0
 22018 006e D7D1     		bne	.L1553
3994:src/xeq.c     **** 	}
 22019              		.loc 1 3994 4 is_stmt 1 view .LVU5718
 22020              	.LVL1722:
3994:src/xeq.c     **** 	}
 22021              		.loc 1 3994 6 is_stmt 0 view .LVU5719
 22022 0070 4FF0FF36 		mov	r6, #-1
 22023 0074 3546     		mov	r5, r6
3994:src/xeq.c     **** 	}
 22024              		.loc 1 3994 6 view .LVU5720
 22025              	.LBE3125:
3996:src/xeq.c     **** }
 22026              		.loc 1 3996 2 is_stmt 1 view .LVU5721
 22027 0076 002B     		cmp	r3, #0
 22028 0078 D3D1     		bne	.L1558
 22029 007a D7E7     		b	.L1560
 22030              	.L1562:
 22031              		.align	2
 22032              	.L1561:
 22033 007c 00000000 		.word	main_ram
 22034 0080 00000000 		.word	const_2pow64
 22035              		.cfi_endproc
ARM GAS  /tmp/cc0UaEmF.s 			page 577


 22036              	.LFE219:
 22038              		.section	.text.isInfinite,"ax",%progbits
 22039              		.align	1
 22040              		.p2align 2,,3
 22041              		.global	isInfinite
 22042              		.syntax unified
 22043              		.thumb
 22044              		.thumb_func
 22045              		.fpu fpv4-sp-d16
 22047              	isInfinite:
 22048              	.LVL1723:
 22049              	.LFB220:
4001:src/xeq.c     **** 	decNumber x;
 22050              		.loc 1 4001 32 view -0
 22051              		.cfi_startproc
 22052              		@ args = 0, pretend = 0, frame = 40
 22053              		@ frame_needed = 0, uses_anonymous_args = 0
4002:src/xeq.c     **** 
 22054              		.loc 1 4002 2 view .LVU5723
4004:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsInfinite(&x));
 22055              		.loc 1 4004 2 view .LVU5724
4001:src/xeq.c     **** 	decNumber x;
 22056              		.loc 1 4001 32 is_stmt 0 view .LVU5725
 22057 0000 00B5     		push	{lr}
 22058              		.cfi_def_cfa_offset 4
 22059              		.cfi_offset 14, -4
 22060 0002 8BB0     		sub	sp, sp, #44
 22061              		.cfi_def_cfa_offset 48
 22062              	.LVL1724:
 22063              	.LBB3126:
 22064              	.LBI3126:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 22065              		.loc 1 805 12 is_stmt 1 view .LVU5726
 22066              	.LBB3127:
 806:src/xeq.c     **** }
 22067              		.loc 1 806 2 view .LVU5727
 806:src/xeq.c     **** }
 22068              		.loc 1 806 9 is_stmt 0 view .LVU5728
 22069 0004 6421     		movs	r1, #100
 22070 0006 01A8     		add	r0, sp, #4
 22071              	.LVL1725:
 806:src/xeq.c     **** }
 22072              		.loc 1 806 9 view .LVU5729
 22073 0008 FFF7FEFF 		bl	getRegister
 22074              	.LVL1726:
 806:src/xeq.c     **** }
 22075              		.loc 1 806 9 view .LVU5730
 22076              	.LBE3127:
 22077              	.LBE3126:
4005:src/xeq.c     **** }
 22078              		.loc 1 4005 2 is_stmt 1 view .LVU5731
4005:src/xeq.c     **** }
 22079              		.loc 1 4005 10 is_stmt 0 view .LVU5732
 22080 000c 074B     		ldr	r3, .L1567
 22081 000e 1B68     		ldr	r3, [r3]
 22082 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4005:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 578


 22083              		.loc 1 4005 2 view .LVU5733
 22084 0014 DB07     		lsls	r3, r3, #31
 22085 0016 56BF     		itet	pl
 22086 0018 9DF80C00 		ldrbpl	r0, [sp, #12]	@ zero_extendqisi2
 22087 001c 0020     		movmi	r0, #0
 22088 001e C0F38010 		ubfxpl	r0, r0, #6, #1
 22089 0022 FFF7FEFF 		bl	fin_tst
 22090              	.LVL1727:
4006:src/xeq.c     **** 
 22091              		.loc 1 4006 1 view .LVU5734
 22092 0026 0BB0     		add	sp, sp, #44
 22093              		.cfi_def_cfa_offset 4
 22094              		@ sp needed
 22095 0028 5DF804FB 		ldr	pc, [sp], #4
 22096              	.L1568:
 22097              		.align	2
 22098              	.L1567:
 22099 002c 00000000 		.word	main_ram
 22100              		.cfi_endproc
 22101              	.LFE220:
 22103              		.section	.text.isNan,"ax",%progbits
 22104              		.align	1
 22105              		.p2align 2,,3
 22106              		.global	isNan
 22107              		.syntax unified
 22108              		.thumb
 22109              		.thumb_func
 22110              		.fpu fpv4-sp-d16
 22112              	isNan:
 22113              	.LVL1728:
 22114              	.LFB221:
4012:src/xeq.c     **** 	decNumber x;
 22115              		.loc 1 4012 27 is_stmt 1 view -0
 22116              		.cfi_startproc
 22117              		@ args = 0, pretend = 0, frame = 40
 22118              		@ frame_needed = 0, uses_anonymous_args = 0
4013:src/xeq.c     **** 
 22119              		.loc 1 4013 2 view .LVU5736
4015:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsNaN(&x));
 22120              		.loc 1 4015 2 view .LVU5737
4012:src/xeq.c     **** 	decNumber x;
 22121              		.loc 1 4012 27 is_stmt 0 view .LVU5738
 22122 0000 00B5     		push	{lr}
 22123              		.cfi_def_cfa_offset 4
 22124              		.cfi_offset 14, -4
 22125 0002 8BB0     		sub	sp, sp, #44
 22126              		.cfi_def_cfa_offset 48
 22127              	.LVL1729:
 22128              	.LBB3128:
 22129              	.LBI3128:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 22130              		.loc 1 805 12 is_stmt 1 view .LVU5739
 22131              	.LBB3129:
 806:src/xeq.c     **** }
 22132              		.loc 1 806 2 view .LVU5740
 806:src/xeq.c     **** }
 22133              		.loc 1 806 9 is_stmt 0 view .LVU5741
ARM GAS  /tmp/cc0UaEmF.s 			page 579


 22134 0004 6421     		movs	r1, #100
 22135 0006 01A8     		add	r0, sp, #4
 22136              	.LVL1730:
 806:src/xeq.c     **** }
 22137              		.loc 1 806 9 view .LVU5742
 22138 0008 FFF7FEFF 		bl	getRegister
 22139              	.LVL1731:
 806:src/xeq.c     **** }
 22140              		.loc 1 806 9 view .LVU5743
 22141              	.LBE3129:
 22142              	.LBE3128:
4016:src/xeq.c     **** }
 22143              		.loc 1 4016 2 is_stmt 1 view .LVU5744
4016:src/xeq.c     **** }
 22144              		.loc 1 4016 10 is_stmt 0 view .LVU5745
 22145 000c 0B4B     		ldr	r3, .L1573
 22146 000e 1B68     		ldr	r3, [r3]
 22147 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4016:src/xeq.c     **** }
 22148              		.loc 1 4016 2 view .LVU5746
 22149 0014 DB07     		lsls	r3, r3, #31
 22150 0016 0BD4     		bmi	.L1571
4016:src/xeq.c     **** }
 22151              		.loc 1 4016 2 discriminator 1 view .LVU5747
 22152 0018 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 22153 001c 13F0300F 		tst	r3, #48
 22154 0020 14BF     		ite	ne
 22155 0022 0120     		movne	r0, #1
 22156 0024 0020     		moveq	r0, #0
 22157 0026 FFF7FEFF 		bl	fin_tst
 22158              	.LVL1732:
4017:src/xeq.c     **** 
 22159              		.loc 1 4017 1 discriminator 1 view .LVU5748
 22160 002a 0BB0     		add	sp, sp, #44
 22161              		.cfi_remember_state
 22162              		.cfi_def_cfa_offset 4
 22163              		@ sp needed
 22164 002c 5DF804FB 		ldr	pc, [sp], #4
 22165              	.L1571:
 22166              		.cfi_restore_state
4016:src/xeq.c     **** }
 22167              		.loc 1 4016 2 view .LVU5749
 22168 0030 0020     		movs	r0, #0
 22169 0032 FFF7FEFF 		bl	fin_tst
 22170              	.LVL1733:
4017:src/xeq.c     **** 
 22171              		.loc 1 4017 1 view .LVU5750
 22172 0036 0BB0     		add	sp, sp, #44
 22173              		.cfi_def_cfa_offset 4
 22174              		@ sp needed
 22175 0038 5DF804FB 		ldr	pc, [sp], #4
 22176              	.L1574:
 22177              		.align	2
 22178              	.L1573:
 22179 003c 00000000 		.word	main_ram
 22180              		.cfi_endproc
 22181              	.LFE221:
ARM GAS  /tmp/cc0UaEmF.s 			page 580


 22183              		.section	.text.isSpecial,"ax",%progbits
 22184              		.align	1
 22185              		.p2align 2,,3
 22186              		.global	isSpecial
 22187              		.syntax unified
 22188              		.thumb
 22189              		.thumb_func
 22190              		.fpu fpv4-sp-d16
 22192              	isSpecial:
 22193              	.LVL1734:
 22194              	.LFB222:
4019:src/xeq.c     **** 	decNumber x;
 22195              		.loc 1 4019 31 is_stmt 1 view -0
 22196              		.cfi_startproc
 22197              		@ args = 0, pretend = 0, frame = 40
 22198              		@ frame_needed = 0, uses_anonymous_args = 0
4020:src/xeq.c     **** 
 22199              		.loc 1 4020 2 view .LVU5752
4022:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsSpecial(&x));
 22200              		.loc 1 4022 2 view .LVU5753
4019:src/xeq.c     **** 	decNumber x;
 22201              		.loc 1 4019 31 is_stmt 0 view .LVU5754
 22202 0000 00B5     		push	{lr}
 22203              		.cfi_def_cfa_offset 4
 22204              		.cfi_offset 14, -4
 22205 0002 8BB0     		sub	sp, sp, #44
 22206              		.cfi_def_cfa_offset 48
 22207              	.LVL1735:
 22208              	.LBB3130:
 22209              	.LBI3130:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 22210              		.loc 1 805 12 is_stmt 1 view .LVU5755
 22211              	.LBB3131:
 806:src/xeq.c     **** }
 22212              		.loc 1 806 2 view .LVU5756
 806:src/xeq.c     **** }
 22213              		.loc 1 806 9 is_stmt 0 view .LVU5757
 22214 0004 6421     		movs	r1, #100
 22215 0006 01A8     		add	r0, sp, #4
 22216              	.LVL1736:
 806:src/xeq.c     **** }
 22217              		.loc 1 806 9 view .LVU5758
 22218 0008 FFF7FEFF 		bl	getRegister
 22219              	.LVL1737:
 806:src/xeq.c     **** }
 22220              		.loc 1 806 9 view .LVU5759
 22221              	.LBE3131:
 22222              	.LBE3130:
4023:src/xeq.c     **** }
 22223              		.loc 1 4023 2 is_stmt 1 view .LVU5760
4023:src/xeq.c     **** }
 22224              		.loc 1 4023 10 is_stmt 0 view .LVU5761
 22225 000c 0B4B     		ldr	r3, .L1579
 22226 000e 1B68     		ldr	r3, [r3]
 22227 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4023:src/xeq.c     **** }
 22228              		.loc 1 4023 2 view .LVU5762
ARM GAS  /tmp/cc0UaEmF.s 			page 581


 22229 0014 DB07     		lsls	r3, r3, #31
 22230 0016 0BD4     		bmi	.L1577
4023:src/xeq.c     **** }
 22231              		.loc 1 4023 2 discriminator 1 view .LVU5763
 22232 0018 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 22233 001c 13F0700F 		tst	r3, #112
 22234 0020 14BF     		ite	ne
 22235 0022 0120     		movne	r0, #1
 22236 0024 0020     		moveq	r0, #0
 22237 0026 FFF7FEFF 		bl	fin_tst
 22238              	.LVL1738:
4024:src/xeq.c     **** 
 22239              		.loc 1 4024 1 discriminator 1 view .LVU5764
 22240 002a 0BB0     		add	sp, sp, #44
 22241              		.cfi_remember_state
 22242              		.cfi_def_cfa_offset 4
 22243              		@ sp needed
 22244 002c 5DF804FB 		ldr	pc, [sp], #4
 22245              	.L1577:
 22246              		.cfi_restore_state
4023:src/xeq.c     **** }
 22247              		.loc 1 4023 2 view .LVU5765
 22248 0030 0020     		movs	r0, #0
 22249 0032 FFF7FEFF 		bl	fin_tst
 22250              	.LVL1739:
4024:src/xeq.c     **** 
 22251              		.loc 1 4024 1 view .LVU5766
 22252 0036 0BB0     		add	sp, sp, #44
 22253              		.cfi_def_cfa_offset 4
 22254              		@ sp needed
 22255 0038 5DF804FB 		ldr	pc, [sp], #4
 22256              	.L1580:
 22257              		.align	2
 22258              	.L1579:
 22259 003c 00000000 		.word	main_ram
 22260              		.cfi_endproc
 22261              	.LFE222:
 22263              		.section	.text.op_entryp,"ax",%progbits
 22264              		.align	1
 22265              		.p2align 2,,3
 22266              		.global	op_entryp
 22267              		.syntax unified
 22268              		.thumb
 22269              		.thumb_func
 22270              		.fpu fpv4-sp-d16
 22272              	op_entryp:
 22273              	.LVL1740:
 22274              	.LFB223:
4026:src/xeq.c     **** 	fin_tst(State.entryp);
 22275              		.loc 1 4026 31 is_stmt 1 view -0
 22276              		.cfi_startproc
 22277              		@ args = 0, pretend = 0, frame = 0
 22278              		@ frame_needed = 0, uses_anonymous_args = 0
 22279              		@ link register save eliminated.
4027:src/xeq.c     **** }
 22280              		.loc 1 4027 2 view .LVU5768
4027:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 582


 22281              		.loc 1 4027 15 is_stmt 0 view .LVU5769
 22282 0000 034B     		ldr	r3, .L1582
 22283 0002 1B68     		ldr	r3, [r3]
 22284 0004 93F8DD07 		ldrb	r0, [r3, #2013]	@ zero_extendqisi2
 22285              	.LVL1741:
4027:src/xeq.c     **** }
 22286              		.loc 1 4027 2 view .LVU5770
 22287 0008 C0F30010 		ubfx	r0, r0, #4, #1
 22288 000c FFF7FEBF 		b	fin_tst
 22289              	.LVL1742:
 22290              	.L1583:
 22291              		.align	2
 22292              	.L1582:
 22293 0010 00000000 		.word	main_ram
 22294              		.cfi_endproc
 22295              	.LFE223:
 22297              		.section	.text.reg_decode,"ax",%progbits
 22298              		.align	1
 22299              		.p2align 2,,3
 22300              		.global	reg_decode
 22301              		.syntax unified
 22302              		.thumb
 22303              		.thumb_func
 22304              		.fpu fpv4-sp-d16
 22306              	reg_decode:
 22307              	.LVL1743:
 22308              	.LFB224:
4031:src/xeq.c     **** 	decNumber x, y;
 22309              		.loc 1 4031 51 is_stmt 1 view -0
 22310              		.cfi_startproc
 22311              		@ args = 0, pretend = 0, frame = 80
 22312              		@ frame_needed = 0, uses_anonymous_args = 0
4032:src/xeq.c     **** 	int rsrc, num, rdest, q, mx_src, mx_dest;
 22313              		.loc 1 4032 2 view .LVU5772
4033:src/xeq.c     **** 
 22314              		.loc 1 4033 2 view .LVU5773
4035:src/xeq.c     **** 		bad_mode_error();
 22315              		.loc 1 4035 2 view .LVU5774
4031:src/xeq.c     **** 	decNumber x, y;
 22316              		.loc 1 4031 51 is_stmt 0 view .LVU5775
 22317 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 22318              		.cfi_def_cfa_offset 36
 22319              		.cfi_offset 4, -36
 22320              		.cfi_offset 5, -32
 22321              		.cfi_offset 6, -28
 22322              		.cfi_offset 7, -24
 22323              		.cfi_offset 8, -20
 22324              		.cfi_offset 9, -16
 22325              		.cfi_offset 10, -12
 22326              		.cfi_offset 11, -8
 22327              		.cfi_offset 14, -4
4035:src/xeq.c     **** 		bad_mode_error();
 22328              		.loc 1 4035 6 view .LVU5776
 22329 0004 DFF82CA2 		ldr	r10, .L1636+28
 22330 0008 DAF80040 		ldr	r4, [r10]
 22331 000c 94F8E847 		ldrb	r4, [r4, #2024]	@ zero_extendqisi2
4031:src/xeq.c     **** 	decNumber x, y;
ARM GAS  /tmp/cc0UaEmF.s 			page 583


 22332              		.loc 1 4031 51 view .LVU5777
 22333 0010 1F46     		mov	r7, r3
4035:src/xeq.c     **** 		bad_mode_error();
 22334              		.loc 1 4035 5 view .LVU5778
 22335 0012 14F00103 		ands	r3, r4, #1
 22336              	.LVL1744:
4031:src/xeq.c     **** 	decNumber x, y;
 22337              		.loc 1 4031 51 view .LVU5779
 22338 0016 95B0     		sub	sp, sp, #84
 22339              		.cfi_def_cfa_offset 120
4035:src/xeq.c     **** 		bad_mode_error();
 22340              		.loc 1 4035 5 view .LVU5780
 22341 0018 0CD0     		beq	.L1585
4036:src/xeq.c     **** 		return 1;
 22342              		.loc 1 4036 3 is_stmt 1 view .LVU5781
 22343              	.LBB3174:
 22344              	.LBI3174:
 566:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 22345              		.loc 1 566 6 view .LVU5782
 22346              	.LBE3174:
 567:src/xeq.c     **** }
 22347              		.loc 1 567 2 view .LVU5783
 22348              	.LVL1745:
 22349              	.LBB3185:
 22350              	.LBB3175:
 22351              	.LBI3175:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 22352              		.loc 1 537 5 view .LVU5784
 22353              	.LBB3176:
 538:src/xeq.c     **** 		Error = e;
 22354              		.loc 1 538 2 view .LVU5785
 538:src/xeq.c     **** 		Error = e;
 22355              		.loc 1 538 12 is_stmt 0 view .LVU5786
 22356 001a 7F4B     		ldr	r3, .L1636
 538:src/xeq.c     **** 		Error = e;
 22357              		.loc 1 538 5 view .LVU5787
 22358 001c 1A68     		ldr	r2, [r3]
 22359              	.LVL1746:
 538:src/xeq.c     **** 		Error = e;
 22360              		.loc 1 538 5 view .LVU5788
 22361 001e 1AB1     		cbz	r2, .L1630
 22362              	.LVL1747:
 22363              	.L1613:
 538:src/xeq.c     **** 		Error = e;
 22364              		.loc 1 538 5 view .LVU5789
 22365              	.LBE3176:
 22366              	.LBE3175:
 22367              	.LBE3185:
4037:src/xeq.c     **** 	}
 22368              		.loc 1 4037 10 view .LVU5790
 22369 0020 0120     		movs	r0, #1
4109:src/xeq.c     **** 
 22370              		.loc 1 4109 1 view .LVU5791
 22371 0022 15B0     		add	sp, sp, #84
 22372              		.cfi_remember_state
 22373              		.cfi_def_cfa_offset 36
 22374              		@ sp needed
ARM GAS  /tmp/cc0UaEmF.s 			page 584


 22375 0024 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 22376              	.LVL1748:
 22377              	.L1630:
 22378              		.cfi_restore_state
 22379              	.LBB3186:
 22380              	.LBB3183:
 22381              	.LBB3181:
 22382              	.LBB3177:
 22383              	.LBI3177:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 22384              		.loc 1 537 5 is_stmt 1 view .LVU5792
 22385              	.LBB3178:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 22386              		.loc 1 539 3 view .LVU5793
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 22387              		.loc 1 539 9 is_stmt 0 view .LVU5794
 22388 0028 0D22     		movs	r2, #13
 22389              	.LBE3178:
 22390              	.LBE3177:
 22391              	.LBE3181:
 22392              	.LBE3183:
 22393              	.LBE3186:
4037:src/xeq.c     **** 	}
 22394              		.loc 1 4037 10 view .LVU5795
 22395 002a 0120     		movs	r0, #1
 22396              	.LVL1749:
 22397              	.LBB3187:
 22398              	.LBB3184:
 22399              	.LBB3182:
 22400              	.LBB3180:
 22401              	.LBB3179:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 22402              		.loc 1 539 9 view .LVU5796
 22403 002c 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 22404              		.loc 1 540 3 is_stmt 1 view .LVU5797
 22405              	.LBE3179:
 22406              	.LBE3180:
 22407              	.LBE3182:
 22408              	.LBE3184:
 22409              	.LBE3187:
4109:src/xeq.c     **** 
 22410              		.loc 1 4109 1 is_stmt 0 view .LVU5798
 22411 002e 15B0     		add	sp, sp, #84
 22412              		.cfi_remember_state
 22413              		.cfi_def_cfa_offset 36
 22414              		@ sp needed
 22415 0030 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 22416              	.LVL1750:
 22417              	.L1585:
 22418              		.cfi_restore_state
4109:src/xeq.c     **** 
 22419              		.loc 1 4109 1 view .LVU5799
 22420 0034 8346     		mov	fp, r0
 22421              	.LVL1751:
4109:src/xeq.c     **** 
 22422              		.loc 1 4109 1 view .LVU5800
ARM GAS  /tmp/cc0UaEmF.s 			page 585


 22423 0036 8946     		mov	r9, r1
 22424              	.LVL1752:
 22425              	.LBB3188:
 22426              	.LBB3189:
 22427              	.LBB3190:
 22428              	.LBB3191:
 806:src/xeq.c     **** }
 22429              		.loc 1 806 9 view .LVU5801
 22430 0038 02A8     		add	r0, sp, #8
 22431              	.LVL1753:
 806:src/xeq.c     **** }
 22432              		.loc 1 806 9 view .LVU5802
 22433 003a 6421     		movs	r1, #100
 22434              	.LVL1754:
 806:src/xeq.c     **** }
 22435              		.loc 1 806 9 view .LVU5803
 22436 003c 0193     		str	r3, [sp, #4]
 22437 003e 9046     		mov	r8, r2
 22438              	.LVL1755:
 806:src/xeq.c     **** }
 22439              		.loc 1 806 9 view .LVU5804
 22440              	.LBE3191:
 22441              	.LBE3190:
 22442              	.LBE3189:
 22443              	.LBI3188:
4031:src/xeq.c     **** 	decNumber x, y;
 22444              		.loc 1 4031 5 is_stmt 1 view .LVU5805
 22445              	.LBB3271:
4039:src/xeq.c     **** 	dn_mulpow10(&y, &x, 2 + 3);	// sssnnddd.~
 22446              		.loc 1 4039 2 view .LVU5806
 22447              	.LBB3193:
 22448              	.LBI3190:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 22449              		.loc 1 805 12 view .LVU5807
 22450              	.LBB3192:
 806:src/xeq.c     **** }
 22451              		.loc 1 806 2 view .LVU5808
 806:src/xeq.c     **** }
 22452              		.loc 1 806 9 is_stmt 0 view .LVU5809
 22453 0040 FFF7FEFF 		bl	getRegister
 22454              	.LVL1756:
 806:src/xeq.c     **** }
 22455              		.loc 1 806 9 view .LVU5810
 22456              	.LBE3192:
 22457              	.LBE3193:
4040:src/xeq.c     **** 	decNumberTrunc(&x, &y);		// sssnnddd.0
 22458              		.loc 1 4040 2 is_stmt 1 view .LVU5811
 22459 0044 0522     		movs	r2, #5
 22460 0046 02A9     		add	r1, sp, #8
 22461 0048 0BA8     		add	r0, sp, #44
 22462 004a FFF7FEFF 		bl	dn_mulpow10
 22463              	.LVL1757:
4041:src/xeq.c     **** 	rsrc = dn_to_int(&x);		// sssnnddd
 22464              		.loc 1 4041 2 view .LVU5812
 22465 004e 0BA9     		add	r1, sp, #44
 22466 0050 02A8     		add	r0, sp, #8
 22467 0052 FFF7FEFF 		bl	decNumberTrunc
ARM GAS  /tmp/cc0UaEmF.s 			page 586


 22468              	.LVL1758:
4042:src/xeq.c     **** 
 22469              		.loc 1 4042 2 view .LVU5813
4042:src/xeq.c     **** 
 22470              		.loc 1 4042 9 is_stmt 0 view .LVU5814
 22471 0056 02A8     		add	r0, sp, #8
 22472 0058 FFF7FEFF 		bl	dn_to_int
 22473              	.LVL1759:
4044:src/xeq.c     **** 		if (!flash)
 22474              		.loc 1 4044 2 is_stmt 1 view .LVU5815
4044:src/xeq.c     **** 		if (!flash)
 22475              		.loc 1 4044 5 is_stmt 0 view .LVU5816
 22476 005c 041E     		subs	r4, r0, #0
 22477 005e 35DB     		blt	.L1587
 22478              	.LVL1760:
4052:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 22479              		.loc 1 4052 2 is_stmt 1 view .LVU5817
4052:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 22480              		.loc 1 4052 8 is_stmt 0 view .LVU5818
 22481 0060 6E4A     		ldr	r2, .L1636+4
4054:src/xeq.c     **** 	rsrc /= 100;			// sss
 22482              		.loc 1 4054 6 view .LVU5819
 22483 0062 6F4E     		ldr	r6, .L1636+8
4058:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 22484              		.loc 1 4058 9 view .LVU5820
 22485 0064 6F48     		ldr	r0, .L1636+12
 22486              	.LVL1761:
4052:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 22487              		.loc 1 4052 8 view .LVU5821
 22488 0066 82FB0432 		smull	r3, r2, r2, r4
 22489 006a E517     		asrs	r5, r4, #31
4053:src/xeq.c     **** 	num = rsrc % 100;		// nn
 22490              		.loc 1 4053 7 view .LVU5822
 22491 006c C5EBA211 		rsb	r1, r5, r2, asr #6
4054:src/xeq.c     **** 	rsrc /= 100;			// sss
 22492              		.loc 1 4054 6 view .LVU5823
 22493 0070 A6FB0136 		umull	r3, r6, r6, r1
4052:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 22494              		.loc 1 4052 8 view .LVU5824
 22495 0074 4FF47A77 		mov	r7, #1000
 22496              	.LVL1762:
4054:src/xeq.c     **** 	rsrc /= 100;			// sss
 22497              		.loc 1 4054 6 view .LVU5825
 22498 0078 7209     		lsrs	r2, r6, #5
4052:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 22499              		.loc 1 4052 8 view .LVU5826
 22500 007a 07FB1145 		mls	r5, r7, r1, r4
 22501              	.LVL1763:
4053:src/xeq.c     **** 	num = rsrc % 100;		// nn
 22502              		.loc 1 4053 2 is_stmt 1 view .LVU5827
4054:src/xeq.c     **** 	rsrc /= 100;			// sss
 22503              		.loc 1 4054 2 view .LVU5828
4058:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 22504              		.loc 1 4058 9 is_stmt 0 view .LVU5829
 22505 007e 8442     		cmp	r4, r0
4054:src/xeq.c     **** 	rsrc /= 100;			// sss
 22506              		.loc 1 4054 6 view .LVU5830
ARM GAS  /tmp/cc0UaEmF.s 			page 587


 22507 0080 4FF06407 		mov	r7, #100
4055:src/xeq.c     **** 
 22508              		.loc 1 4055 7 view .LVU5831
 22509 0084 1646     		mov	r6, r2
4054:src/xeq.c     **** 	rsrc /= 100;			// sss
 22510              		.loc 1 4054 6 view .LVU5832
 22511 0086 07FB1212 		mls	r2, r7, r2, r1
 22512              	.LVL1764:
4055:src/xeq.c     **** 
 22513              		.loc 1 4055 2 is_stmt 1 view .LVU5833
4057:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 22514              		.loc 1 4057 2 view .LVU5834
4058:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 22515              		.loc 1 4058 9 is_stmt 0 view .LVU5835
 22516 008a 59DA     		bge	.L1588
 22517 008c 6649     		ldr	r1, .L1636+16
 22518 008e 019B     		ldr	r3, [sp, #4]
 22519 0090 8C42     		cmp	r4, r1
 22520 0092 7ADA     		bge	.L1615
 22521              	.LBB3194:
 22522              	.LBI3194:
 250:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 22523              		.loc 1 250 14 is_stmt 1 view .LVU5836
 22524              	.LBE3194:
 22525              	.LBE3271:
 22526              	.LBE3188:
 251:src/xeq.c     **** }
 22527              		.loc 1 251 2 view .LVU5837
 22528              	.LVL1765:
 22529              	.LBB3278:
 22530              	.LBB3272:
 22531              	.LBB3200:
 22532              	.LBB3195:
 22533              	.LBI3195:
 238:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 22534              		.loc 1 238 14 view .LVU5838
 22535              	.LBB3196:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 22536              		.loc 1 239 2 view .LVU5839
 22537              	.LBB3197:
 22538              	.LBI3197:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 22539              		.loc 1 932 5 view .LVU5840
 22540              	.LBB3198:
 933:src/xeq.c     **** }
 22541              		.loc 1 933 2 view .LVU5841
 933:src/xeq.c     **** }
 22542              		.loc 1 933 12 is_stmt 0 view .LVU5842
 22543 0094 DAF80010 		ldr	r1, [r10]
 933:src/xeq.c     **** }
 22544              		.loc 1 933 24 view .LVU5843
 22545 0098 B1F8E807 		ldrh	r0, [r1, #2024]
 22546 009c 44F20103 		movw	r3, #16385
 22547              	.LBE3198:
 22548              	.LBE3197:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 22549              		.loc 1 239 5 view .LVU5844
ARM GAS  /tmp/cc0UaEmF.s 			page 588


 22550 00a0 0340     		ands	r3, r3, r0
 22551 00a2 B3F5804F 		cmp	r3, #16384
 22552              	.LBB3199:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 22553              		.loc 1 240 24 view .LVU5845
 22554 00a6 91F8CF37 		ldrb	r3, [r1, #1999]	@ zero_extendqisi2
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 22555              		.loc 1 240 3 is_stmt 1 view .LVU5846
 241:src/xeq.c     **** 	}
 22556              		.loc 1 241 3 view .LVU5847
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 22557              		.loc 1 240 13 is_stmt 0 view .LVU5848
 22558 00aa 04BF     		itt	eq
 22559 00ac 0C3B     		subeq	r3, r3, #12
 241:src/xeq.c     **** 	}
 22560              		.loc 1 241 67 view .LVU5849
 22561 00ae 5B10     		asreq	r3, r3, #1
 22562              	.LVL1766:
 22563              	.L1594:
 241:src/xeq.c     **** 	}
 22564              		.loc 1 241 67 view .LVU5850
 22565              	.LBE3199:
 22566              	.LBE3196:
 22567              	.LBE3195:
 22568              	.LBE3200:
4061:src/xeq.c     **** 		goto range_error;
 22569              		.loc 1 4061 5 view .LVU5851
 22570 00b0 B342     		cmp	r3, r6
 22571 00b2 4FF00007 		mov	r7, #0
 22572              	.LVL1767:
4061:src/xeq.c     **** 		goto range_error;
 22573              		.loc 1 4061 2 is_stmt 1 view .LVU5852
4061:src/xeq.c     **** 		goto range_error;
 22574              		.loc 1 4061 5 is_stmt 0 view .LVU5853
 22575 00b6 22DC     		bgt	.L1631
 22576              	.LVL1768:
 22577              	.L1590:
 22578              	.LDL1:
4107:src/xeq.c     **** 	return 1;
 22579              		.loc 1 4107 2 is_stmt 1 view .LVU5854
 22580              	.LBB3201:
 22581              	.LBI3201:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 22582              		.loc 1 537 5 view .LVU5855
 22583              	.LBB3202:
 538:src/xeq.c     **** 		Error = e;
 22584              		.loc 1 538 2 view .LVU5856
 538:src/xeq.c     **** 		Error = e;
 22585              		.loc 1 538 12 is_stmt 0 view .LVU5857
 22586 00b8 574B     		ldr	r3, .L1636
 538:src/xeq.c     **** 		Error = e;
 22587              		.loc 1 538 5 view .LVU5858
 22588 00ba 1A68     		ldr	r2, [r3]
 22589 00bc 002A     		cmp	r2, #0
 22590 00be AFD1     		bne	.L1613
 22591              	.LVL1769:
 22592              	.LBB3203:
ARM GAS  /tmp/cc0UaEmF.s 			page 589


 22593              	.LBI3203:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 22594              		.loc 1 537 5 is_stmt 1 view .LVU5859
 22595              	.LBB3204:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 22596              		.loc 1 539 3 view .LVU5860
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 22597              		.loc 1 539 9 is_stmt 0 view .LVU5861
 22598 00c0 0822     		movs	r2, #8
 22599              	.LBE3204:
 22600              	.LBE3203:
 22601              	.LBE3202:
 22602              	.LBE3201:
4108:src/xeq.c     **** }
 22603              		.loc 1 4108 9 view .LVU5862
 22604 00c2 0120     		movs	r0, #1
 22605              	.LBB3208:
 22606              	.LBB3207:
 22607              	.LBB3206:
 22608              	.LBB3205:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 22609              		.loc 1 539 9 view .LVU5863
 22610 00c4 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 22611              		.loc 1 540 3 is_stmt 1 view .LVU5864
 22612              	.LBE3205:
 22613              	.LBE3206:
 22614              	.LBE3207:
 22615              	.LBE3208:
 22616              	.LBE3272:
 22617              	.LBE3278:
4109:src/xeq.c     **** 
 22618              		.loc 1 4109 1 is_stmt 0 view .LVU5865
 22619 00c6 15B0     		add	sp, sp, #84
 22620              		.cfi_remember_state
 22621              		.cfi_def_cfa_offset 36
 22622              		@ sp needed
 22623 00c8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 22624              	.LVL1770:
 22625              	.L1587:
 22626              		.cfi_restore_state
 22627              	.LBB3279:
 22628              	.LBB3273:
4045:src/xeq.c     **** 			goto range_error;
 22629              		.loc 1 4045 3 is_stmt 1 view .LVU5866
4045:src/xeq.c     **** 			goto range_error;
 22630              		.loc 1 4045 6 is_stmt 0 view .LVU5867
 22631 00cc 002F     		cmp	r7, #0
 22632 00ce F3D0     		beq	.L1590
4047:src/xeq.c     **** 	}
 22633              		.loc 1 4047 3 is_stmt 1 view .LVU5868
4052:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 22634              		.loc 1 4052 8 is_stmt 0 view .LVU5869
 22635 00d0 524D     		ldr	r5, .L1636+4
4057:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 22636              		.loc 1 4057 30 view .LVU5870
 22637 00d2 564A     		ldr	r2, .L1636+20
ARM GAS  /tmp/cc0UaEmF.s 			page 590


4054:src/xeq.c     **** 	rsrc /= 100;			// sss
 22638              		.loc 1 4054 6 view .LVU5871
 22639 00d4 524E     		ldr	r6, .L1636+8
4047:src/xeq.c     **** 	}
 22640              		.loc 1 4047 8 view .LVU5872
 22641 00d6 6442     		rsbs	r4, r4, #0
 22642              	.LVL1771:
4052:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 22643              		.loc 1 4052 2 is_stmt 1 view .LVU5873
4052:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 22644              		.loc 1 4052 8 is_stmt 0 view .LVU5874
 22645 00d8 A5FB0435 		umull	r3, r5, r5, r4
4053:src/xeq.c     **** 	num = rsrc % 100;		// nn
 22646              		.loc 1 4053 7 view .LVU5875
 22647 00dc AB09     		lsrs	r3, r5, #6
4054:src/xeq.c     **** 	rsrc /= 100;			// sss
 22648              		.loc 1 4054 6 view .LVU5876
 22649 00de A6FB0316 		umull	r1, r6, r6, r3
4052:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 22650              		.loc 1 4052 8 view .LVU5877
 22651 00e2 4FF47A70 		mov	r0, #1000
4057:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 22652              		.loc 1 4057 30 view .LVU5878
 22653 00e6 1168     		ldr	r1, [r2]
4052:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 22654              		.loc 1 4052 8 view .LVU5879
 22655 00e8 00FB1345 		mls	r5, r0, r3, r4
 22656              	.LVL1772:
4053:src/xeq.c     **** 	num = rsrc % 100;		// nn
 22657              		.loc 1 4053 2 is_stmt 1 view .LVU5880
4054:src/xeq.c     **** 	rsrc /= 100;			// sss
 22658              		.loc 1 4054 2 view .LVU5881
4054:src/xeq.c     **** 	rsrc /= 100;			// sss
 22659              		.loc 1 4054 6 is_stmt 0 view .LVU5882
 22660 00ec 7209     		lsrs	r2, r6, #5
 22661 00ee 6420     		movs	r0, #100
4055:src/xeq.c     **** 
 22662              		.loc 1 4055 7 view .LVU5883
 22663 00f0 1646     		mov	r6, r2
4054:src/xeq.c     **** 	rsrc /= 100;			// sss
 22664              		.loc 1 4054 6 view .LVU5884
 22665 00f2 00FB1232 		mls	r2, r0, r2, r3
 22666              	.LVL1773:
4055:src/xeq.c     **** 
 22667              		.loc 1 4055 2 is_stmt 1 view .LVU5885
4057:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 22668              		.loc 1 4057 2 view .LVU5886
4058:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 22669              		.loc 1 4058 9 is_stmt 0 view .LVU5887
 22670 00f6 91F8CF37 		ldrb	r3, [r1, #1999]	@ zero_extendqisi2
 22671              	.LVL1774:
 22672              	.L1591:
4061:src/xeq.c     **** 		goto range_error;
 22673              		.loc 1 4061 2 is_stmt 1 view .LVU5888
4061:src/xeq.c     **** 		goto range_error;
 22674              		.loc 1 4061 5 is_stmt 0 view .LVU5889
 22675 00fa B342     		cmp	r3, r6
ARM GAS  /tmp/cc0UaEmF.s 			page 591


 22676 00fc DCDD     		ble	.L1590
 22677              	.L1631:
4064:src/xeq.c     **** 		mx_dest = rdest >= LOCAL_REG_BASE ? local_regs() : global_regs();
 22678              		.loc 1 4064 2 is_stmt 1 view .LVU5890
4064:src/xeq.c     **** 		mx_dest = rdest >= LOCAL_REG_BASE ? local_regs() : global_regs();
 22679              		.loc 1 4064 5 is_stmt 0 view .LVU5891
 22680 00fe B8F1000F 		cmp	r8, #0
 22681 0102 25D0     		beq	.L1595
4065:src/xeq.c     **** 
 22682              		.loc 1 4065 3 is_stmt 1 view .LVU5892
4065:src/xeq.c     **** 
 22683              		.loc 1 4065 52 is_stmt 0 view .LVU5893
 22684 0104 6F2D     		cmp	r5, #111
 22685 0106 27DD     		ble	.L1596
 22686              	.LBB3209:
 22687              	.LBI3209:
 230:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 22688              		.loc 1 230 5 is_stmt 1 view .LVU5894
 22689              	.LBE3209:
 22690              	.LBE3273:
 22691              	.LBE3279:
 231:src/xeq.c     **** }
 22692              		.loc 1 231 2 view .LVU5895
 22693              	.LVL1775:
 22694              	.LBB3280:
 22695              	.LBB3274:
 22696              	.LBB3234:
 22697              	.LBB3210:
 22698              	.LBI3210:
 222:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 22699              		.loc 1 222 5 view .LVU5896
 22700              	.LBB3211:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 22701              		.loc 1 223 2 view .LVU5897
 22702              	.LBB3212:
 22703              	.LBI3212:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 22704              		.loc 1 932 5 view .LVU5898
 22705              	.LBB3213:
 933:src/xeq.c     **** }
 22706              		.loc 1 933 2 view .LVU5899
 933:src/xeq.c     **** }
 22707              		.loc 1 933 12 is_stmt 0 view .LVU5900
 22708 0108 DAF80010 		ldr	r1, [r10]
 22709              	.LVL1776:
 933:src/xeq.c     **** }
 22710              		.loc 1 933 12 view .LVU5901
 22711              	.LBE3213:
 22712              	.LBE3212:
 224:src/xeq.c     **** }
 22713              		.loc 1 224 2 is_stmt 1 view .LVU5902
 22714              	.LBB3216:
 22715              	.LBI3216:
 214:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 22716              		.loc 1 214 5 view .LVU5903
 22717              	.LBB3217:
 215:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 592


 22718              		.loc 1 215 2 view .LVU5904
 215:src/xeq.c     **** }
 22719              		.loc 1 215 9 is_stmt 0 view .LVU5905
 22720 010c B1F9DE07 		ldrsh	r0, [r1, #2014]
 215:src/xeq.c     **** }
 22721              		.loc 1 215 57 view .LVU5906
 22722 0110 0028     		cmp	r0, #0
 22723 0112 69DB     		blt	.L1632
 22724              	.LVL1777:
 215:src/xeq.c     **** }
 22725              		.loc 1 215 57 view .LVU5907
 22726              	.LBE3217:
 22727              	.LBE3216:
 22728              	.LBE3211:
 22729              	.LBE3210:
 22730              	.LBE3234:
4067:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 22731              		.loc 1 4067 3 is_stmt 1 view .LVU5908
 22732              	.LBB3235:
 22733              	.LBB3232:
 22734              	.LBB3230:
 22735              	.LBB3223:
 22736              	.LBB3218:
 22737 0114 0021     		movs	r1, #0
 22738              	.LVL1778:
4067:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 22739              		.loc 1 4067 3 is_stmt 0 view .LVU5909
 22740              	.LBE3218:
 22741              	.LBE3223:
 22742              	.LBE3230:
 22743              	.LBE3232:
 22744              	.LBE3235:
4067:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 22745              		.loc 1 4067 6 view .LVU5910
 22746 0116 82B3     		cbz	r2, .L1598
 22747              	.LVL1779:
 22748              	.L1599:
4086:src/xeq.c     **** 		if (rdest + num > mx_dest)
 22749              		.loc 1 4086 4 is_stmt 1 view .LVU5911
4086:src/xeq.c     **** 		if (rdest + num > mx_dest)
 22750              		.loc 1 4086 12 is_stmt 0 view .LVU5912
 22751 0118 7031     		adds	r1, r1, #112
 22752              	.LVL1780:
 22753              	.L1602:
4087:src/xeq.c     **** 			goto range_error;
 22754              		.loc 1 4087 3 is_stmt 1 view .LVU5913
4087:src/xeq.c     **** 			goto range_error;
 22755              		.loc 1 4087 13 is_stmt 0 view .LVU5914
 22756 011a A818     		adds	r0, r5, r2
4087:src/xeq.c     **** 			goto range_error;
 22757              		.loc 1 4087 6 view .LVU5915
 22758 011c 8842     		cmp	r0, r1
 22759 011e CBDC     		bgt	.L1590
4090:src/xeq.c     **** 	}
 22760              		.loc 1 4090 3 is_stmt 1 view .LVU5916
4090:src/xeq.c     **** 	}
 22761              		.loc 1 4090 6 is_stmt 0 view .LVU5917
ARM GAS  /tmp/cc0UaEmF.s 			page 593


 22762 0120 C8F80050 		str	r5, [r8]
 22763 0124 B118     		adds	r1, r6, r2
 22764              	.LVL1781:
 22765              	.L1608:
4097:src/xeq.c     **** 		goto range_error;
 22766              		.loc 1 4097 2 is_stmt 1 view .LVU5918
4097:src/xeq.c     **** 		goto range_error;
 22767              		.loc 1 4097 5 is_stmt 0 view .LVU5919
 22768 0126 8B42     		cmp	r3, r1
 22769 0128 C6DB     		blt	.L1590
 22770              	.L1610:
4101:src/xeq.c     **** 	*n = num;
 22771              		.loc 1 4101 2 is_stmt 1 view .LVU5920
4101:src/xeq.c     **** 	*n = num;
 22772              		.loc 1 4101 37 is_stmt 0 view .LVU5921
 22773 012a 0FB1     		cbz	r7, .L1611
4101:src/xeq.c     **** 	*n = num;
 22774              		.loc 1 4101 37 view .LVU5922
 22775 012c 06F57A76 		add	r6, r6, #1000
 22776              	.LVL1782:
 22777              	.L1611:
4104:src/xeq.c     **** 
 22778              		.loc 1 4104 9 view .LVU5923
 22779 0130 0020     		movs	r0, #0
4101:src/xeq.c     **** 	*n = num;
 22780              		.loc 1 4101 5 view .LVU5924
 22781 0132 CBF80060 		str	r6, [fp]
4102:src/xeq.c     **** 
 22782              		.loc 1 4102 2 is_stmt 1 view .LVU5925
4102:src/xeq.c     **** 
 22783              		.loc 1 4102 5 is_stmt 0 view .LVU5926
 22784 0136 C9F80020 		str	r2, [r9]
4104:src/xeq.c     **** 
 22785              		.loc 1 4104 2 is_stmt 1 view .LVU5927
 22786              	.LBE3274:
 22787              	.LBE3280:
4109:src/xeq.c     **** 
 22788              		.loc 1 4109 1 is_stmt 0 view .LVU5928
 22789 013a 15B0     		add	sp, sp, #84
 22790              		.cfi_remember_state
 22791              		.cfi_def_cfa_offset 36
 22792              		@ sp needed
 22793 013c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 22794              	.LVL1783:
 22795              	.L1588:
 22796              		.cfi_restore_state
 22797              	.LBB3281:
 22798              	.LBB3275:
 22799              	.LBB3236:
 22800              	.LBI3236:
 230:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 22801              		.loc 1 230 5 is_stmt 1 view .LVU5929
 22802              	.LBE3236:
 22803              	.LBE3275:
 22804              	.LBE3281:
 231:src/xeq.c     **** }
 22805              		.loc 1 231 2 view .LVU5930
ARM GAS  /tmp/cc0UaEmF.s 			page 594


 22806              	.LBB3282:
 22807              	.LBB3276:
 22808              	.LBB3257:
 22809              	.LBB3237:
 22810              	.LBI3237:
 222:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 22811              		.loc 1 222 5 view .LVU5931
 22812              	.LBB3238:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 22813              		.loc 1 223 2 view .LVU5932
 22814              	.LBB3239:
 22815              	.LBI3239:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 22816              		.loc 1 932 5 view .LVU5933
 22817              	.LBB3240:
 933:src/xeq.c     **** }
 22818              		.loc 1 933 2 view .LVU5934
 933:src/xeq.c     **** }
 22819              		.loc 1 933 12 is_stmt 0 view .LVU5935
 22820 0140 DAF80030 		ldr	r3, [r10]
 22821              	.LVL1784:
 933:src/xeq.c     **** }
 22822              		.loc 1 933 12 view .LVU5936
 22823              	.LBE3240:
 22824              	.LBE3239:
 224:src/xeq.c     **** }
 22825              		.loc 1 224 2 is_stmt 1 view .LVU5937
 22826              	.LBB3243:
 22827              	.LBI3243:
 214:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 22828              		.loc 1 214 5 view .LVU5938
 22829              	.LBB3244:
 215:src/xeq.c     **** }
 22830              		.loc 1 215 2 view .LVU5939
 215:src/xeq.c     **** }
 22831              		.loc 1 215 9 is_stmt 0 view .LVU5940
 22832 0144 B3F9DE17 		ldrsh	r1, [r3, #2014]
 215:src/xeq.c     **** }
 22833              		.loc 1 215 57 view .LVU5941
 22834 0148 0029     		cmp	r1, #0
 22835 014a 38DB     		blt	.L1633
 22836 014c 7023     		movs	r3, #112
 22837              	.LVL1785:
 215:src/xeq.c     **** }
 22838              		.loc 1 215 57 view .LVU5942
 22839 014e AFE7     		b	.L1594
 22840              	.LVL1786:
 22841              	.L1595:
 215:src/xeq.c     **** }
 22842              		.loc 1 215 57 view .LVU5943
 22843              	.LBE3244:
 22844              	.LBE3243:
 22845              	.LBE3238:
 22846              	.LBE3237:
 22847              	.LBE3257:
4093:src/xeq.c     **** 			num = mx_src - rsrc;
 22848              		.loc 1 4093 3 is_stmt 1 view .LVU5944
ARM GAS  /tmp/cc0UaEmF.s 			page 595


4093:src/xeq.c     **** 			num = mx_src - rsrc;
 22849              		.loc 1 4093 6 is_stmt 0 view .LVU5945
 22850 0150 002A     		cmp	r2, #0
 22851 0152 32D1     		bne	.L1634
4094:src/xeq.c     **** 		}
 22852              		.loc 1 4094 4 is_stmt 1 view .LVU5946
4094:src/xeq.c     **** 		}
 22853              		.loc 1 4094 8 is_stmt 0 view .LVU5947
 22854 0154 9A1B     		subs	r2, r3, r6
 22855              	.LVL1787:
4097:src/xeq.c     **** 		goto range_error;
 22856              		.loc 1 4097 2 is_stmt 1 view .LVU5948
 22857 0156 E8E7     		b	.L1610
 22858              	.L1596:
 22859              	.LBB3258:
 22860              	.LBI3258:
 250:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 22861              		.loc 1 250 14 view .LVU5949
 22862              	.LBE3258:
 22863              	.LBE3276:
 22864              	.LBE3282:
 251:src/xeq.c     **** }
 22865              		.loc 1 251 2 view .LVU5950
 22866              	.LVL1788:
 22867              	.LBB3283:
 22868              	.LBB3277:
 22869              	.LBB3267:
 22870              	.LBB3259:
 22871              	.LBI3259:
 238:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 22872              		.loc 1 238 14 view .LVU5951
 22873              	.LBB3260:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 22874              		.loc 1 239 2 view .LVU5952
 22875              	.LBB3261:
 22876              	.LBI3261:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 22877              		.loc 1 932 5 view .LVU5953
 22878              	.LBB3262:
 933:src/xeq.c     **** }
 22879              		.loc 1 933 2 view .LVU5954
 933:src/xeq.c     **** }
 22880              		.loc 1 933 12 is_stmt 0 view .LVU5955
 22881 0158 DAF80000 		ldr	r0, [r10]
 933:src/xeq.c     **** }
 22882              		.loc 1 933 24 view .LVU5956
 22883 015c B0F8E8C7 		ldrh	ip, [r0, #2024]
 22884 0160 44F20101 		movw	r1, #16385
 22885              	.LBE3262:
 22886              	.LBE3261:
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 22887              		.loc 1 239 5 view .LVU5957
 22888 0164 01EA0C01 		and	r1, r1, ip
 22889 0168 B1F5804F 		cmp	r1, #16384
 22890              	.LBB3263:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 22891              		.loc 1 240 24 view .LVU5958
ARM GAS  /tmp/cc0UaEmF.s 			page 596


 22892 016c 90F8CF17 		ldrb	r1, [r0, #1999]	@ zero_extendqisi2
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 22893              		.loc 1 240 3 is_stmt 1 view .LVU5959
 241:src/xeq.c     **** 	}
 22894              		.loc 1 241 3 view .LVU5960
 22895              	.LVL1789:
 241:src/xeq.c     **** 	}
 22896              		.loc 1 241 3 is_stmt 0 view .LVU5961
 22897              	.LBE3263:
 22898              	.LBE3260:
 22899              	.LBE3259:
 22900              	.LBE3267:
4067:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 22901              		.loc 1 4067 3 is_stmt 1 view .LVU5962
 22902              	.LBB3268:
 22903              	.LBB3266:
 22904              	.LBB3265:
 22905              	.LBB3264:
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 22906              		.loc 1 240 13 is_stmt 0 view .LVU5963
 22907 0170 04BF     		itt	eq
 22908 0172 0C39     		subeq	r1, r1, #12
 241:src/xeq.c     **** 	}
 22909              		.loc 1 241 67 view .LVU5964
 22910 0174 4910     		asreq	r1, r1, #1
 22911              	.LBE3264:
 22912              	.LBE3265:
 22913              	.LBE3266:
 22914              	.LBE3268:
4067:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 22915              		.loc 1 4067 6 view .LVU5965
 22916 0176 002A     		cmp	r2, #0
 22917 0178 CFD1     		bne	.L1602
 22918              	.L1598:
4069:src/xeq.c     **** 				// source & destination in different memory areas
 22919              		.loc 1 4069 4 is_stmt 1 view .LVU5966
4069:src/xeq.c     **** 				// source & destination in different memory areas
 22920              		.loc 1 4069 7 is_stmt 0 view .LVU5967
 22921 017a 4FB1     		cbz	r7, .L1635
 22922              	.LVL1790:
 22923              	.L1603:
4071:src/xeq.c     **** 			else {
 22924              		.loc 1 4071 5 is_stmt 1 view .LVU5968
4071:src/xeq.c     **** 			else {
 22925              		.loc 1 4071 9 is_stmt 0 view .LVU5969
 22926 017c 8B42     		cmp	r3, r1
 22927 017e 1A46     		mov	r2, r3
 22928 0180 A8BF     		it	ge
 22929 0182 0A46     		movge	r2, r1
 22930              	.LVL1791:
 22931              	.L1605:
4085:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
 22932              		.loc 1 4085 3 is_stmt 1 view .LVU5970
4085:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
 22933              		.loc 1 4085 6 is_stmt 0 view .LVU5971
 22934 0184 6F2D     		cmp	r5, #111
 22935 0186 C8DD     		ble	.L1602
ARM GAS  /tmp/cc0UaEmF.s 			page 597


 22936 0188 C6E7     		b	.L1599
 22937              	.LVL1792:
 22938              	.L1615:
4085:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
 22939              		.loc 1 4085 6 view .LVU5972
 22940 018a 1F46     		mov	r7, r3
4058:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 22941              		.loc 1 4058 9 view .LVU5973
 22942 018c 7023     		movs	r3, #112
 22943 018e B4E7     		b	.L1591
 22944              	.LVL1793:
 22945              	.L1635:
4069:src/xeq.c     **** 				// source & destination in different memory areas
 22946              		.loc 1 4069 42 view .LVU5974
 22947 0190 244A     		ldr	r2, .L1636+12
 22948              	.LVL1794:
4069:src/xeq.c     **** 				// source & destination in different memory areas
 22949              		.loc 1 4069 14 view .LVU5975
 22950 0192 9442     		cmp	r4, r2
 22951 0194 B4BF     		ite	lt
 22952 0196 0024     		movlt	r4, #0
 22953 0198 0124     		movge	r4, #1
 22954 019a 6F2D     		cmp	r5, #111
 22955 019c D4BF     		ite	le
 22956 019e 0022     		movle	r2, #0
 22957 01a0 0122     		movgt	r2, #1
 22958 01a2 9442     		cmp	r4, r2
 22959 01a4 EAD1     		bne	.L1603
4073:src/xeq.c     **** 					num = mx_src - rsrc;
 22960              		.loc 1 4073 5 is_stmt 1 view .LVU5976
4073:src/xeq.c     **** 					num = mx_src - rsrc;
 22961              		.loc 1 4073 8 is_stmt 0 view .LVU5977
 22962 01a6 B542     		cmp	r5, r6
4074:src/xeq.c     **** 					q = rsrc - rdest;
 22963              		.loc 1 4074 6 is_stmt 1 view .LVU5978
4078:src/xeq.c     **** 					q = rdest - rsrc;
 22964              		.loc 1 4078 10 is_stmt 0 view .LVU5979
 22965 01a8 A7BF     		ittee	ge
 22966 01aa 4A1B     		subge	r2, r1, r5
4079:src/xeq.c     **** 				}
 22967              		.loc 1 4079 8 view .LVU5980
 22968 01ac A81B     		subge	r0, r5, r6
4074:src/xeq.c     **** 					q = rsrc - rdest;
 22969              		.loc 1 4074 10 view .LVU5981
 22970 01ae 9A1B     		sublt	r2, r3, r6
4075:src/xeq.c     **** 				}
 22971              		.loc 1 4075 6 is_stmt 1 view .LVU5982
4075:src/xeq.c     **** 				}
 22972              		.loc 1 4075 8 is_stmt 0 view .LVU5983
 22973 01b0 701B     		sublt	r0, r6, r5
4078:src/xeq.c     **** 					q = rdest - rsrc;
 22974              		.loc 1 4078 6 is_stmt 1 view .LVU5984
 22975              	.LVL1795:
4079:src/xeq.c     **** 				}
 22976              		.loc 1 4079 6 view .LVU5985
4081:src/xeq.c     **** 					num = q;
 22977              		.loc 1 4081 5 view .LVU5986
ARM GAS  /tmp/cc0UaEmF.s 			page 598


 22978 01b2 8242     		cmp	r2, r0
 22979 01b4 A8BF     		it	ge
 22980 01b6 0246     		movge	r2, r0
 22981              	.LVL1796:
4081:src/xeq.c     **** 					num = q;
 22982              		.loc 1 4081 5 is_stmt 0 view .LVU5987
 22983 01b8 E4E7     		b	.L1605
 22984              	.LVL1797:
 22985              	.L1634:
4081:src/xeq.c     **** 					num = q;
 22986              		.loc 1 4081 5 view .LVU5988
 22987 01ba 9119     		adds	r1, r2, r6
 22988 01bc B3E7     		b	.L1608
 22989              	.LVL1798:
 22990              	.L1633:
 22991              	.LBB3269:
 22992              	.LBB3256:
 22993              	.LBB3255:
 22994              	.LBB3249:
 22995              	.LBB3241:
 933:src/xeq.c     **** }
 22996              		.loc 1 933 24 view .LVU5989
 22997 01be B3F8E877 		ldrh	r7, [r3, #2024]
 22998              	.LBE3241:
 22999              	.LBE3249:
 23000              	.LBB3250:
 23001              	.LBB3245:
 215:src/xeq.c     **** }
 23002              		.loc 1 215 25 view .LVU5990
 23003 01c2 1B48     		ldr	r0, .L1636+24
 23004              	.LBE3245:
 23005              	.LBE3250:
 23006              	.LBB3251:
 23007              	.LBB3242:
 933:src/xeq.c     **** }
 23008              		.loc 1 933 24 view .LVU5991
 23009 01c4 44F20103 		movw	r3, #16385
 23010              	.LVL1799:
 933:src/xeq.c     **** }
 23011              		.loc 1 933 24 view .LVU5992
 23012              	.LBE3242:
 23013              	.LBE3251:
 23014              	.LBB3252:
 23015              	.LBB3246:
 215:src/xeq.c     **** }
 23016              		.loc 1 215 25 view .LVU5993
 23017 01c8 0068     		ldr	r0, [r0]
 23018              	.LBE3246:
 23019              	.LBE3252:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 23020              		.loc 1 223 73 view .LVU5994
 23021 01ca 3B40     		ands	r3, r3, r7
 23022 01cc A3F58043 		sub	r3, r3, #16384
 23023              	.LBB3253:
 23024              	.LBB3247:
 215:src/xeq.c     **** }
 23025              		.loc 1 215 57 view .LVU5995
ARM GAS  /tmp/cc0UaEmF.s 			page 599


 23026 01d0 30F81110 		ldrh	r1, [r0, r1, lsl #1]
 23027              	.LBE3247:
 23028              	.LBE3253:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 23029              		.loc 1 223 73 view .LVU5996
 23030 01d4 B3FA83F3 		clz	r3, r3
 23031 01d8 5B09     		lsrs	r3, r3, #5
 23032 01da 0233     		adds	r3, r3, #2
 23033              	.LBB3254:
 23034              	.LBB3248:
 215:src/xeq.c     **** }
 23035              		.loc 1 215 57 view .LVU5997
 23036 01dc C1F30B01 		ubfx	r1, r1, #0, #12
 23037 01e0 41FA03F3 		asr	r3, r1, r3
 23038 01e4 7033     		adds	r3, r3, #112
 23039 01e6 63E7     		b	.L1594
 23040              	.LVL1800:
 23041              	.L1632:
 215:src/xeq.c     **** }
 23042              		.loc 1 215 57 view .LVU5998
 23043              	.LBE3248:
 23044              	.LBE3254:
 23045              	.LBE3255:
 23046              	.LBE3256:
 23047              	.LBE3269:
 23048              	.LBB3270:
 23049              	.LBB3233:
 23050              	.LBB3231:
 23051              	.LBB3224:
 23052              	.LBB3214:
 933:src/xeq.c     **** }
 23053              		.loc 1 933 24 view .LVU5999
 23054 01e8 B1F8E8E7 		ldrh	lr, [r1, #2024]
 23055              	.LBE3214:
 23056              	.LBE3224:
 23057              	.LBB3225:
 23058              	.LBB3219:
 215:src/xeq.c     **** }
 23059              		.loc 1 215 25 view .LVU6000
 23060 01ec DFF840C0 		ldr	ip, .L1636+24
 23061              	.LBE3219:
 23062              	.LBE3225:
 23063              	.LBB3226:
 23064              	.LBB3215:
 933:src/xeq.c     **** }
 23065              		.loc 1 933 24 view .LVU6001
 23066 01f0 44F20101 		movw	r1, #16385
 23067              	.LVL1801:
 933:src/xeq.c     **** }
 23068              		.loc 1 933 24 view .LVU6002
 23069              	.LBE3215:
 23070              	.LBE3226:
 23071              	.LBB3227:
 23072              	.LBB3220:
 215:src/xeq.c     **** }
 23073              		.loc 1 215 25 view .LVU6003
 23074 01f4 DCF800C0 		ldr	ip, [ip]
ARM GAS  /tmp/cc0UaEmF.s 			page 600


 23075              	.LBE3220:
 23076              	.LBE3227:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 23077              		.loc 1 223 73 view .LVU6004
 23078 01f8 01EA0E01 		and	r1, r1, lr
 23079 01fc A1F58041 		sub	r1, r1, #16384
 23080              	.LBB3228:
 23081              	.LBB3221:
 215:src/xeq.c     **** }
 23082              		.loc 1 215 57 view .LVU6005
 23083 0200 3CF810C0 		ldrh	ip, [ip, r0, lsl #1]
 23084              	.LBE3221:
 23085              	.LBE3228:
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 23086              		.loc 1 223 73 view .LVU6006
 23087 0204 B1FA81F1 		clz	r1, r1
 23088 0208 4909     		lsrs	r1, r1, #5
 23089 020a 881C     		adds	r0, r1, #2
 23090              	.LBB3229:
 23091              	.LBB3222:
 215:src/xeq.c     **** }
 23092              		.loc 1 215 57 view .LVU6007
 23093 020c CCF30B01 		ubfx	r1, ip, #0, #12
 23094 0210 0141     		asrs	r1, r1, r0
 23095              	.LVL1802:
 215:src/xeq.c     **** }
 23096              		.loc 1 215 57 view .LVU6008
 23097              	.LBE3222:
 23098              	.LBE3229:
 23099              	.LBE3231:
 23100              	.LBE3233:
 23101              	.LBE3270:
4067:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 23102              		.loc 1 4067 3 is_stmt 1 view .LVU6009
4067:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 23103              		.loc 1 4067 6 is_stmt 0 view .LVU6010
 23104 0212 002A     		cmp	r2, #0
 23105 0214 B1D0     		beq	.L1598
 23106 0216 7FE7     		b	.L1599
 23107              	.L1637:
 23108              		.align	2
 23109              	.L1636:
 23110 0218 00000000 		.word	Error
 23111 021c D34D6210 		.word	274877907
 23112 0220 1F85EB51 		.word	1374389535
 23113 0224 00E6AA00 		.word	11200000
 23114 0228 80969800 		.word	10000000
 23115 022c 00000000 		.word	backup_ram
 23116 0230 00000000 		.word	RetStk
 23117 0234 00000000 		.word	main_ram
 23118              	.LBE3277:
 23119              	.LBE3283:
 23120              		.cfi_endproc
 23121              	.LFE224:
 23123              		.section	.text.op_regcopy,"ax",%progbits
 23124              		.align	1
 23125              		.p2align 2,,3
ARM GAS  /tmp/cc0UaEmF.s 			page 601


 23126              		.global	op_regcopy
 23127              		.syntax unified
 23128              		.thumb
 23129              		.thumb_func
 23130              		.fpu fpv4-sp-d16
 23132              	op_regcopy:
 23133              	.LVL1803:
 23134              	.LFB225:
4111:src/xeq.c     **** 	int s, n, d;
 23135              		.loc 1 4111 32 is_stmt 1 view -0
 23136              		.cfi_startproc
 23137              		@ args = 0, pretend = 0, frame = 16
 23138              		@ frame_needed = 0, uses_anonymous_args = 0
4112:src/xeq.c     **** 
 23139              		.loc 1 4112 2 view .LVU6012
4114:src/xeq.c     **** 		return;
 23140              		.loc 1 4114 2 view .LVU6013
4111:src/xeq.c     **** 	int s, n, d;
 23141              		.loc 1 4111 32 is_stmt 0 view .LVU6014
 23142 0000 10B5     		push	{r4, lr}
 23143              		.cfi_def_cfa_offset 8
 23144              		.cfi_offset 4, -8
 23145              		.cfi_offset 14, -4
 23146 0002 84B0     		sub	sp, sp, #16
 23147              		.cfi_def_cfa_offset 24
4114:src/xeq.c     **** 		return;
 23148              		.loc 1 4114 6 view .LVU6015
 23149 0004 0123     		movs	r3, #1
 23150 0006 03AA     		add	r2, sp, #12
 23151 0008 02A9     		add	r1, sp, #8
 23152 000a 01A8     		add	r0, sp, #4
 23153              	.LVL1804:
4114:src/xeq.c     **** 		return;
 23154              		.loc 1 4114 6 view .LVU6016
 23155 000c FFF7FEFF 		bl	reg_decode
 23156              	.LVL1805:
4114:src/xeq.c     **** 		return;
 23157              		.loc 1 4114 5 view .LVU6017
 23158 0010 B8B9     		cbnz	r0, .L1638
4116:src/xeq.c     **** }
 23159              		.loc 1 4116 2 is_stmt 1 view .LVU6018
 23160 0012 0398     		ldr	r0, [sp, #12]
 23161 0014 FFF7FEFF 		bl	get_reg_n
 23162              	.LVL1806:
 23163 0018 0446     		mov	r4, r0
 23164 001a 0198     		ldr	r0, [sp, #4]
 23165 001c FFF7FEFF 		bl	get_reg_n
 23166              	.LVL1807:
 23167              	.LBB3284:
 23168              	.LBB3285:
 23169              	.LBB3286:
 23170              	.LBB3287:
 933:src/xeq.c     **** }
 23171              		.loc 1 933 24 is_stmt 0 view .LVU6019
 23172 0020 094B     		ldr	r3, .L1643
 23173              	.LBE3287:
 23174              	.LBE3286:
ARM GAS  /tmp/cc0UaEmF.s 			page 602


 23175              	.LBE3285:
 23176              	.LBE3284:
4116:src/xeq.c     **** }
 23177              		.loc 1 4116 2 view .LVU6020
 23178 0022 029A     		ldr	r2, [sp, #8]
 23179              	.LVL1808:
 23180              	.LBB3294:
 23181              	.LBB3292:
 23182              	.LBB3290:
 23183              	.LBB3288:
 933:src/xeq.c     **** }
 23184              		.loc 1 933 24 view .LVU6021
 23185 0024 1B68     		ldr	r3, [r3]
 23186 0026 B3F8E817 		ldrh	r1, [r3, #2024]
 23187 002a 44F20103 		movw	r3, #16385
 23188              	.LBE3288:
 23189              	.LBE3290:
1352:src/xeq.c     **** 		n <<= 1;
 23190              		.loc 1 1352 5 view .LVU6022
 23191 002e 0B40     		ands	r3, r3, r1
 23192 0030 B3F5804F 		cmp	r3, #16384
1353:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 23193              		.loc 1 1353 5 view .LVU6023
 23194 0034 08BF     		it	eq
 23195 0036 5200     		lsleq	r2, r2, #1
 23196              	.LBE3292:
 23197              	.LBE3294:
4116:src/xeq.c     **** }
 23198              		.loc 1 4116 2 view .LVU6024
 23199 0038 0146     		mov	r1, r0
 23200              	.LVL1809:
 23201              	.LBB3295:
 23202              	.LBI3284:
1351:src/xeq.c     **** 	if (is_dblmode())
 23203              		.loc 1 1351 6 is_stmt 1 view .LVU6025
 23204              	.LBB3293:
1352:src/xeq.c     **** 		n <<= 1;
 23205              		.loc 1 1352 2 view .LVU6026
 23206              	.LBB3291:
 23207              	.LBI3286:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 23208              		.loc 1 932 5 view .LVU6027
 23209              	.LBB3289:
 933:src/xeq.c     **** }
 23210              		.loc 1 933 2 view .LVU6028
 23211              	.LBE3289:
 23212              	.LBE3291:
1353:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 23213              		.loc 1 1353 3 view .LVU6029
1354:src/xeq.c     **** }
 23214              		.loc 1 1354 2 view .LVU6030
 23215 003a D200     		lsls	r2, r2, #3
 23216              	.LVL1810:
1354:src/xeq.c     **** }
 23217              		.loc 1 1354 2 is_stmt 0 view .LVU6031
 23218 003c 2046     		mov	r0, r4
 23219              	.LVL1811:
ARM GAS  /tmp/cc0UaEmF.s 			page 603


1354:src/xeq.c     **** }
 23220              		.loc 1 1354 2 view .LVU6032
 23221 003e FFF7FEFF 		bl	xcopy
 23222              	.LVL1812:
 23223              	.L1638:
1354:src/xeq.c     **** }
 23224              		.loc 1 1354 2 view .LVU6033
 23225              	.LBE3293:
 23226              	.LBE3295:
4117:src/xeq.c     **** 
 23227              		.loc 1 4117 1 view .LVU6034
 23228 0042 04B0     		add	sp, sp, #16
 23229              		.cfi_def_cfa_offset 8
 23230              		@ sp needed
 23231 0044 10BD     		pop	{r4, pc}
 23232              	.L1644:
 23233 0046 00BF     		.align	2
 23234              	.L1643:
 23235 0048 00000000 		.word	main_ram
 23236              		.cfi_endproc
 23237              	.LFE225:
 23239              		.section	.text.op_regswap,"ax",%progbits
 23240              		.align	1
 23241              		.p2align 2,,3
 23242              		.global	op_regswap
 23243              		.syntax unified
 23244              		.thumb
 23245              		.thumb_func
 23246              		.fpu fpv4-sp-d16
 23248              	op_regswap:
 23249              	.LVL1813:
 23250              	.LFB226:
4119:src/xeq.c     **** 	int s, n, d, i;
 23251              		.loc 1 4119 32 is_stmt 1 view -0
 23252              		.cfi_startproc
 23253              		@ args = 0, pretend = 0, frame = 16
 23254              		@ frame_needed = 0, uses_anonymous_args = 0
4120:src/xeq.c     **** 
 23255              		.loc 1 4120 2 view .LVU6036
4122:src/xeq.c     **** 		return;
 23256              		.loc 1 4122 2 view .LVU6037
4119:src/xeq.c     **** 	int s, n, d, i;
 23257              		.loc 1 4119 32 is_stmt 0 view .LVU6038
 23258 0000 30B5     		push	{r4, r5, lr}
 23259              		.cfi_def_cfa_offset 12
 23260              		.cfi_offset 4, -12
 23261              		.cfi_offset 5, -8
 23262              		.cfi_offset 14, -4
 23263 0002 85B0     		sub	sp, sp, #20
 23264              		.cfi_def_cfa_offset 32
4122:src/xeq.c     **** 		return;
 23265              		.loc 1 4122 6 view .LVU6039
 23266 0004 0023     		movs	r3, #0
 23267 0006 03AA     		add	r2, sp, #12
 23268 0008 02A9     		add	r1, sp, #8
 23269 000a 01A8     		add	r0, sp, #4
 23270              	.LVL1814:
ARM GAS  /tmp/cc0UaEmF.s 			page 604


4122:src/xeq.c     **** 		return;
 23271              		.loc 1 4122 6 view .LVU6040
 23272 000c FFF7FEFF 		bl	reg_decode
 23273              	.LVL1815:
4122:src/xeq.c     **** 		return;
 23274              		.loc 1 4122 5 view .LVU6041
 23275 0010 E8B9     		cbnz	r0, .L1645
4122:src/xeq.c     **** 		return;
 23276              		.loc 1 4122 37 discriminator 1 view .LVU6042
 23277 0012 039B     		ldr	r3, [sp, #12]
 23278 0014 0446     		mov	r4, r0
 23279 0016 0198     		ldr	r0, [sp, #4]
4122:src/xeq.c     **** 		return;
 23280              		.loc 1 4122 32 discriminator 1 view .LVU6043
 23281 0018 9842     		cmp	r0, r3
 23282 001a 18D0     		beq	.L1645
4125:src/xeq.c     **** 			report_err(ERR_RANGE);
 23283              		.loc 1 4125 3 is_stmt 1 view .LVU6044
4125:src/xeq.c     **** 			report_err(ERR_RANGE);
 23284              		.loc 1 4125 19 is_stmt 0 view .LVU6045
 23285 001c 029A     		ldr	r2, [sp, #8]
4125:src/xeq.c     **** 			report_err(ERR_RANGE);
 23286              		.loc 1 4125 6 view .LVU6046
 23287 001e 18DD     		ble	.L1650
4125:src/xeq.c     **** 			report_err(ERR_RANGE);
 23288              		.loc 1 4125 19 discriminator 1 view .LVU6047
 23289 0020 1344     		add	r3, r3, r2
4125:src/xeq.c     **** 			report_err(ERR_RANGE);
 23290              		.loc 1 4125 14 discriminator 1 view .LVU6048
 23291 0022 9842     		cmp	r0, r3
 23292 0024 19DB     		blt	.L1651
 23293              	.L1652:
 23294              	.LVL1816:
4128:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 23295              		.loc 1 4128 16 is_stmt 1 discriminator 1 view .LVU6049
4128:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 23296              		.loc 1 4128 4 is_stmt 0 discriminator 1 view .LVU6050
 23297 0026 002A     		cmp	r2, #0
 23298 0028 01DC     		bgt	.L1654
 23299 002a 10E0     		b	.L1645
 23300              	.LVL1817:
 23301              	.L1657:
4128:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 23302              		.loc 1 4128 4 discriminator 1 view .LVU6051
 23303 002c 0198     		ldr	r0, [sp, #4]
 23304              	.LVL1818:
 23305              	.L1654:
4129:src/xeq.c     **** 		}
 23306              		.loc 1 4129 5 is_stmt 1 discriminator 3 view .LVU6052
 23307 002e 2044     		add	r0, r0, r4
 23308 0030 FFF7FEFF 		bl	get_reg_n
 23309              	.LVL1819:
 23310 0034 039B     		ldr	r3, [sp, #12]
 23311 0036 0546     		mov	r5, r0
 23312 0038 E018     		adds	r0, r4, r3
 23313 003a FFF7FEFF 		bl	get_reg_n
 23314              	.LVL1820:
ARM GAS  /tmp/cc0UaEmF.s 			page 605


 23315 003e 0146     		mov	r1, r0
 23316 0040 2846     		mov	r0, r5
 23317 0042 FFF7FEFF 		bl	swap_reg
 23318              	.LVL1821:
4128:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 23319              		.loc 1 4128 23 discriminator 3 view .LVU6053
4128:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 23320              		.loc 1 4128 4 is_stmt 0 discriminator 3 view .LVU6054
 23321 0046 029B     		ldr	r3, [sp, #8]
4128:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 23322              		.loc 1 4128 24 discriminator 3 view .LVU6055
 23323 0048 0134     		adds	r4, r4, #1
 23324              	.LVL1822:
4128:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 23325              		.loc 1 4128 16 is_stmt 1 discriminator 3 view .LVU6056
4128:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 23326              		.loc 1 4128 4 is_stmt 0 discriminator 3 view .LVU6057
 23327 004a A342     		cmp	r3, r4
 23328 004c EEDC     		bgt	.L1657
 23329              	.LVL1823:
 23330              	.L1645:
4132:src/xeq.c     **** 
 23331              		.loc 1 4132 1 view .LVU6058
 23332 004e 05B0     		add	sp, sp, #20
 23333              		.cfi_remember_state
 23334              		.cfi_def_cfa_offset 12
 23335              		@ sp needed
 23336 0050 30BD     		pop	{r4, r5, pc}
 23337              	.L1650:
 23338              		.cfi_restore_state
4125:src/xeq.c     **** 			report_err(ERR_RANGE);
 23339              		.loc 1 4125 28 discriminator 3 view .LVU6059
 23340 0052 E8DA     		bge	.L1652
4125:src/xeq.c     **** 			report_err(ERR_RANGE);
 23341              		.loc 1 4125 43 discriminator 4 view .LVU6060
 23342 0054 8118     		adds	r1, r0, r2
4125:src/xeq.c     **** 			report_err(ERR_RANGE);
 23343              		.loc 1 4125 38 discriminator 4 view .LVU6061
 23344 0056 8B42     		cmp	r3, r1
 23345 0058 E5DA     		bge	.L1652
 23346              	.L1651:
4126:src/xeq.c     **** 		else {
 23347              		.loc 1 4126 4 is_stmt 1 view .LVU6062
 23348              	.LVL1824:
 23349              	.LBB3300:
 23350              	.LBI3300:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23351              		.loc 1 537 5 view .LVU6063
 23352              	.LBB3301:
 538:src/xeq.c     **** 		Error = e;
 23353              		.loc 1 538 2 view .LVU6064
 538:src/xeq.c     **** 		Error = e;
 23354              		.loc 1 538 12 is_stmt 0 view .LVU6065
 23355 005a 044B     		ldr	r3, .L1658
 538:src/xeq.c     **** 		Error = e;
 23356              		.loc 1 538 5 view .LVU6066
 23357 005c 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/cc0UaEmF.s 			page 606


 23358 005e 002A     		cmp	r2, #0
 23359 0060 F5D1     		bne	.L1645
 23360              	.LVL1825:
 23361              	.LBB3302:
 23362              	.LBI3302:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23363              		.loc 1 537 5 is_stmt 1 view .LVU6067
 23364              	.LBB3303:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 23365              		.loc 1 539 3 view .LVU6068
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 23366              		.loc 1 539 9 is_stmt 0 view .LVU6069
 23367 0062 0822     		movs	r2, #8
 23368 0064 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 23369              		.loc 1 540 3 is_stmt 1 view .LVU6070
 23370              	.LBE3303:
 23371              	.LBE3302:
 23372              	.LBE3301:
 23373              	.LBE3300:
4132:src/xeq.c     **** 
 23374              		.loc 1 4132 1 is_stmt 0 view .LVU6071
 23375 0066 05B0     		add	sp, sp, #20
 23376              		.cfi_def_cfa_offset 12
 23377              		@ sp needed
 23378 0068 30BD     		pop	{r4, r5, pc}
 23379              	.L1659:
 23380 006a 00BF     		.align	2
 23381              	.L1658:
 23382 006c 00000000 		.word	Error
 23383              		.cfi_endproc
 23384              	.LFE226:
 23386              		.section	.text.op_regclr,"ax",%progbits
 23387              		.align	1
 23388              		.p2align 2,,3
 23389              		.global	op_regclr
 23390              		.syntax unified
 23391              		.thumb
 23392              		.thumb_func
 23393              		.fpu fpv4-sp-d16
 23395              	op_regclr:
 23396              	.LVL1826:
 23397              	.LFB227:
4134:src/xeq.c     **** 	int s, n;
 23398              		.loc 1 4134 31 is_stmt 1 view -0
 23399              		.cfi_startproc
 23400              		@ args = 0, pretend = 0, frame = 8
 23401              		@ frame_needed = 0, uses_anonymous_args = 0
4135:src/xeq.c     **** 
 23402              		.loc 1 4135 2 view .LVU6073
4137:src/xeq.c     **** 		return;
 23403              		.loc 1 4137 2 view .LVU6074
4134:src/xeq.c     **** 	int s, n;
 23404              		.loc 1 4134 31 is_stmt 0 view .LVU6075
 23405 0000 10B5     		push	{r4, lr}
 23406              		.cfi_def_cfa_offset 8
 23407              		.cfi_offset 4, -8
ARM GAS  /tmp/cc0UaEmF.s 			page 607


 23408              		.cfi_offset 14, -4
4137:src/xeq.c     **** 		return;
 23409              		.loc 1 4137 6 view .LVU6076
 23410 0002 0023     		movs	r3, #0
4134:src/xeq.c     **** 	int s, n;
 23411              		.loc 1 4134 31 view .LVU6077
 23412 0004 82B0     		sub	sp, sp, #8
 23413              		.cfi_def_cfa_offset 16
4137:src/xeq.c     **** 		return;
 23414              		.loc 1 4137 6 view .LVU6078
 23415 0006 1A46     		mov	r2, r3
 23416 0008 01A9     		add	r1, sp, #4
 23417 000a 6846     		mov	r0, sp
 23418              	.LVL1827:
4137:src/xeq.c     **** 		return;
 23419              		.loc 1 4137 6 view .LVU6079
 23420 000c FFF7FEFF 		bl	reg_decode
 23421              	.LVL1828:
4137:src/xeq.c     **** 		return;
 23422              		.loc 1 4137 5 view .LVU6080
 23423 0010 A8B9     		cbnz	r0, .L1660
4139:src/xeq.c     **** }
 23424              		.loc 1 4139 2 is_stmt 1 view .LVU6081
 23425 0012 0446     		mov	r4, r0
 23426 0014 0098     		ldr	r0, [sp]
 23427 0016 FFF7FEFF 		bl	get_reg_n
 23428              	.LVL1829:
 23429              	.LBB3304:
 23430              	.LBI3304:
1332:src/xeq.c     **** #if 0
 23431              		.loc 1 1332 6 view .LVU6082
 23432              	.LBB3305:
1347:src/xeq.c     **** #endif
 23433              		.loc 1 1347 2 view .LVU6083
 23434              	.LBB3306:
 23435              	.LBI3306:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 23436              		.loc 1 932 5 view .LVU6084
 23437              	.LBB3307:
 933:src/xeq.c     **** }
 23438              		.loc 1 933 2 view .LVU6085
 933:src/xeq.c     **** }
 23439              		.loc 1 933 24 is_stmt 0 view .LVU6086
 23440 001a 0A4B     		ldr	r3, .L1664
 23441              	.LBE3307:
 23442              	.LBE3306:
1347:src/xeq.c     **** #endif
 23443              		.loc 1 1347 2 view .LVU6087
 23444 001c 019A     		ldr	r2, [sp, #4]
 23445              	.LBB3309:
 23446              	.LBB3308:
 933:src/xeq.c     **** }
 23447              		.loc 1 933 24 view .LVU6088
 23448 001e 1B68     		ldr	r3, [r3]
 23449 0020 B3F8E817 		ldrh	r1, [r3, #2024]
 23450 0024 44F20103 		movw	r3, #16385
 23451 0028 0B40     		ands	r3, r3, r1
ARM GAS  /tmp/cc0UaEmF.s 			page 608


 23452 002a A3F58043 		sub	r3, r3, #16384
 23453 002e B3FA83F3 		clz	r3, r3
 23454 0032 5B09     		lsrs	r3, r3, #5
 23455              	.LBE3308:
 23456              	.LBE3309:
1347:src/xeq.c     **** #endif
 23457              		.loc 1 1347 24 view .LVU6089
 23458 0034 0333     		adds	r3, r3, #3
1347:src/xeq.c     **** #endif
 23459              		.loc 1 1347 2 view .LVU6090
 23460 0036 2146     		mov	r1, r4
 23461 0038 9A40     		lsls	r2, r2, r3
 23462 003a FFF7FEFF 		bl	xset
 23463              	.LVL1830:
 23464              	.L1660:
1347:src/xeq.c     **** #endif
 23465              		.loc 1 1347 2 view .LVU6091
 23466              	.LBE3305:
 23467              	.LBE3304:
4140:src/xeq.c     **** 
 23468              		.loc 1 4140 1 view .LVU6092
 23469 003e 02B0     		add	sp, sp, #8
 23470              		.cfi_def_cfa_offset 8
 23471              		@ sp needed
 23472 0040 10BD     		pop	{r4, pc}
 23473              	.L1665:
 23474 0042 00BF     		.align	2
 23475              	.L1664:
 23476 0044 00000000 		.word	main_ram
 23477              		.cfi_endproc
 23478              	.LFE227:
 23480              		.section	.text.op_regsort,"ax",%progbits
 23481              		.align	1
 23482              		.p2align 2,,3
 23483              		.global	op_regsort
 23484              		.syntax unified
 23485              		.thumb
 23486              		.thumb_func
 23487              		.fpu fpv4-sp-d16
 23489              	op_regsort:
 23490              	.LVL1831:
 23491              	.LFB228:
4142:src/xeq.c     **** 	int s, n;
 23492              		.loc 1 4142 32 is_stmt 1 view -0
 23493              		.cfi_startproc
 23494              		@ args = 0, pretend = 0, frame = 160
 23495              		@ frame_needed = 0, uses_anonymous_args = 0
4143:src/xeq.c     **** 	decNumber pivot, a;
 23496              		.loc 1 4143 2 view .LVU6094
4144:src/xeq.c     **** 	int beg[10], end[10], i;
 23497              		.loc 1 4144 2 view .LVU6095
4145:src/xeq.c     **** 
 23498              		.loc 1 4145 2 view .LVU6096
4147:src/xeq.c     **** 		return;
 23499              		.loc 1 4147 2 view .LVU6097
4142:src/xeq.c     **** 	int s, n;
 23500              		.loc 1 4142 32 is_stmt 0 view .LVU6098
ARM GAS  /tmp/cc0UaEmF.s 			page 609


 23501 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 23502              		.cfi_def_cfa_offset 28
 23503              		.cfi_offset 4, -28
 23504              		.cfi_offset 5, -24
 23505              		.cfi_offset 6, -20
 23506              		.cfi_offset 7, -16
 23507              		.cfi_offset 8, -12
 23508              		.cfi_offset 9, -8
 23509              		.cfi_offset 14, -4
4147:src/xeq.c     **** 		return;
 23510              		.loc 1 4147 6 view .LVU6099
 23511 0004 0023     		movs	r3, #0
4142:src/xeq.c     **** 	int s, n;
 23512              		.loc 1 4142 32 view .LVU6100
 23513 0006 A9B0     		sub	sp, sp, #164
 23514              		.cfi_def_cfa_offset 192
4147:src/xeq.c     **** 		return;
 23515              		.loc 1 4147 6 view .LVU6101
 23516 0008 1A46     		mov	r2, r3
 23517 000a 01A9     		add	r1, sp, #4
 23518 000c 6846     		mov	r0, sp
 23519              	.LVL1832:
4147:src/xeq.c     **** 		return;
 23520              		.loc 1 4147 6 view .LVU6102
 23521 000e FFF7FEFF 		bl	reg_decode
 23522              	.LVL1833:
4147:src/xeq.c     **** 		return;
 23523              		.loc 1 4147 5 view .LVU6103
 23524 0012 20B9     		cbnz	r0, .L1666
4147:src/xeq.c     **** 		return;
 23525              		.loc 1 4147 39 discriminator 1 view .LVU6104
 23526 0014 DDF80480 		ldr	r8, [sp, #4]
4147:src/xeq.c     **** 		return;
 23527              		.loc 1 4147 34 discriminator 1 view .LVU6105
 23528 0018 B8F1010F 		cmp	r8, #1
 23529 001c 02D1     		bne	.L1690
 23530              	.L1666:
4192:src/xeq.c     **** 
 23531              		.loc 1 4192 1 view .LVU6106
 23532 001e 29B0     		add	sp, sp, #164
 23533              		.cfi_remember_state
 23534              		.cfi_def_cfa_offset 28
 23535              		@ sp needed
 23536 0020 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 23537              	.L1690:
 23538              		.cfi_restore_state
 23539 0024 0646     		mov	r6, r0
4151:src/xeq.c     **** 	end[0] = n;
 23540              		.loc 1 4151 2 is_stmt 1 view .LVU6107
4151:src/xeq.c     **** 	end[0] = n;
 23541              		.loc 1 4151 9 is_stmt 0 view .LVU6108
 23542 0026 1490     		str	r0, [sp, #80]
4152:src/xeq.c     **** 	i = 0;
 23543              		.loc 1 4152 2 is_stmt 1 view .LVU6109
4152:src/xeq.c     **** 	i = 0;
 23544              		.loc 1 4152 9 is_stmt 0 view .LVU6110
 23545 0028 CDF87880 		str	r8, [sp, #120]
ARM GAS  /tmp/cc0UaEmF.s 			page 610


4153:src/xeq.c     **** 	while (i>=0) {
 23546              		.loc 1 4153 2 is_stmt 1 view .LVU6111
 23547              	.LVL1834:
4154:src/xeq.c     **** 		int L = beg[i];
 23548              		.loc 1 4154 2 view .LVU6112
4154:src/xeq.c     **** 		int L = beg[i];
 23549              		.loc 1 4154 8 view .LVU6113
4153:src/xeq.c     **** 	while (i>=0) {
 23550              		.loc 1 4153 4 is_stmt 0 view .LVU6114
 23551 002c 0746     		mov	r7, r0
 23552              	.LVL1835:
 23553              	.L1680:
 23554              	.LBB3310:
4155:src/xeq.c     **** 		int R = end[i] - 1;
 23555              		.loc 1 4155 3 is_stmt 1 view .LVU6115
4156:src/xeq.c     **** 		if (L<R) {
 23556              		.loc 1 4156 3 view .LVU6116
4156:src/xeq.c     **** 		if (L<R) {
 23557              		.loc 1 4156 7 is_stmt 0 view .LVU6117
 23558 002e 08F1FF34 		add	r4, r8, #-1
 23559              	.LVL1836:
4157:src/xeq.c     **** 			const int pvt = s + L;
 23560              		.loc 1 4157 3 is_stmt 1 view .LVU6118
4157:src/xeq.c     **** 			const int pvt = s + L;
 23561              		.loc 1 4157 6 is_stmt 0 view .LVU6119
 23562 0032 B442     		cmp	r4, r6
 23563 0034 0CDC     		bgt	.L1691
 23564              	.LVL1837:
 23565              	.L1669:
4190:src/xeq.c     **** 	}
 23566              		.loc 1 4190 4 is_stmt 1 view .LVU6120
 23567              	.LBE3310:
4154:src/xeq.c     **** 		int L = beg[i];
 23568              		.loc 1 4154 8 is_stmt 0 view .LVU6121
 23569 0036 013F     		subs	r7, r7, #1
 23570              	.LVL1838:
4154:src/xeq.c     **** 		int L = beg[i];
 23571              		.loc 1 4154 8 view .LVU6122
 23572 0038 F1D3     		bcc	.L1666
 23573 003a 28AB     		add	r3, sp, #160
 23574 003c 03EB8703 		add	r3, r3, r7, lsl #2
 23575 0040 53F8288C 		ldr	r8, [r3, #-40]
 23576 0044 53F8506C 		ldr	r6, [r3, #-80]
 23577              	.LVL1839:
 23578              	.LBB3313:
4155:src/xeq.c     **** 		int R = end[i] - 1;
 23579              		.loc 1 4155 3 is_stmt 1 view .LVU6123
4156:src/xeq.c     **** 		if (L<R) {
 23580              		.loc 1 4156 3 view .LVU6124
4156:src/xeq.c     **** 		if (L<R) {
 23581              		.loc 1 4156 7 is_stmt 0 view .LVU6125
 23582 0048 08F1FF34 		add	r4, r8, #-1
 23583              	.LVL1840:
4157:src/xeq.c     **** 			const int pvt = s + L;
 23584              		.loc 1 4157 3 is_stmt 1 view .LVU6126
4157:src/xeq.c     **** 			const int pvt = s + L;
 23585              		.loc 1 4157 6 is_stmt 0 view .LVU6127
ARM GAS  /tmp/cc0UaEmF.s 			page 611


 23586 004c B442     		cmp	r4, r6
 23587 004e F2DD     		ble	.L1669
 23588              	.LVL1841:
 23589              	.L1691:
 23590              	.LBB3311:
4158:src/xeq.c     **** 			getRegister(&pivot, pvt);
 23591              		.loc 1 4158 4 is_stmt 1 view .LVU6128
4159:src/xeq.c     **** 			while (L<R) {
 23592              		.loc 1 4159 4 view .LVU6129
4158:src/xeq.c     **** 			getRegister(&pivot, pvt);
 23593              		.loc 1 4158 14 is_stmt 0 view .LVU6130
 23594 0050 0099     		ldr	r1, [sp]
4159:src/xeq.c     **** 			while (L<R) {
 23595              		.loc 1 4159 4 view .LVU6131
 23596 0052 02A8     		add	r0, sp, #8
 23597 0054 3144     		add	r1, r1, r6
 23598              	.LVL1842:
4159:src/xeq.c     **** 			while (L<R) {
 23599              		.loc 1 4159 4 view .LVU6132
 23600 0056 FFF7FEFF 		bl	getRegister
 23601              	.LVL1843:
4160:src/xeq.c     **** 				while (L<R) {
 23602              		.loc 1 4160 4 is_stmt 1 view .LVU6133
4160:src/xeq.c     **** 				while (L<R) {
 23603              		.loc 1 4160 10 view .LVU6134
4159:src/xeq.c     **** 			while (L<R) {
 23604              		.loc 1 4159 4 is_stmt 0 view .LVU6135
 23605 005a B146     		mov	r9, r6
 23606              	.L1672:
4162:src/xeq.c     **** 					if (dn_lt(&a, &pivot))
 23607              		.loc 1 4162 6 is_stmt 1 view .LVU6136
 23608 005c 0099     		ldr	r1, [sp]
 23609 005e 0BA8     		add	r0, sp, #44
 23610 0060 2144     		add	r1, r1, r4
 23611 0062 FFF7FEFF 		bl	getRegister
 23612              	.LVL1844:
4163:src/xeq.c     **** 						break;
 23613              		.loc 1 4163 6 view .LVU6137
4163:src/xeq.c     **** 						break;
 23614              		.loc 1 4163 10 is_stmt 0 view .LVU6138
 23615 0066 02A9     		add	r1, sp, #8
 23616 0068 0BA8     		add	r0, sp, #44
 23617 006a FFF7FEFF 		bl	dn_lt
 23618              	.LVL1845:
4165:src/xeq.c     **** 				}
 23619              		.loc 1 4165 6 is_stmt 1 view .LVU6139
4163:src/xeq.c     **** 						break;
 23620              		.loc 1 4163 9 is_stmt 0 view .LVU6140
 23621 006e 00BB     		cbnz	r0, .L1671
4165:src/xeq.c     **** 				}
 23622              		.loc 1 4165 7 view .LVU6141
 23623 0070 013C     		subs	r4, r4, #1
 23624              	.LVL1846:
4161:src/xeq.c     **** 					getRegister(&a, s + R);
 23625              		.loc 1 4161 11 is_stmt 1 view .LVU6142
 23626 0072 4C45     		cmp	r4, r9
 23627 0074 F2DC     		bgt	.L1672
ARM GAS  /tmp/cc0UaEmF.s 			page 612


 23628              	.L1673:
 23629              	.LVL1847:
4169:src/xeq.c     **** 					getRegister(&a, s + L);
 23630              		.loc 1 4169 11 is_stmt 0 view .LVU6143
 23631 0076 4D46     		mov	r5, r9
 23632              	.LVL1848:
4160:src/xeq.c     **** 				while (L<R) {
 23633              		.loc 1 4160 10 is_stmt 1 view .LVU6144
 23634              	.L1681:
4178:src/xeq.c     **** 			if (L - beg[i] < end[i] - (L+1)) {
 23635              		.loc 1 4178 4 view .LVU6145
 23636 0078 0098     		ldr	r0, [sp]
 23637 007a 02A9     		add	r1, sp, #8
 23638 007c 2844     		add	r0, r0, r5
 23639 007e FFF7FEFF 		bl	setRegister
 23640              	.LVL1849:
4179:src/xeq.c     **** 				beg[i+1] = beg[i];
 23641              		.loc 1 4179 4 view .LVU6146
4179:src/xeq.c     **** 				beg[i+1] = beg[i];
 23642              		.loc 1 4179 32 is_stmt 0 view .LVU6147
 23643 0082 6B1C     		adds	r3, r5, #1
4179:src/xeq.c     **** 				beg[i+1] = beg[i];
 23644              		.loc 1 4179 28 view .LVU6148
 23645 0084 A8EB0302 		sub	r2, r8, r3
4179:src/xeq.c     **** 				beg[i+1] = beg[i];
 23646              		.loc 1 4179 10 view .LVU6149
 23647 0088 A91B     		subs	r1, r5, r6
4179:src/xeq.c     **** 				beg[i+1] = beg[i];
 23648              		.loc 1 4179 7 view .LVU6150
 23649 008a 9142     		cmp	r1, r2
4180:src/xeq.c     **** 				end[i+1] = L;
 23650              		.loc 1 4180 10 view .LVU6151
 23651 008c 07F10101 		add	r1, r7, #1
4182:src/xeq.c     **** 			} else {
 23652              		.loc 1 4182 12 view .LVU6152
 23653 0090 28AA     		add	r2, sp, #160
 23654 0092 02EB8700 		add	r0, r2, r7, lsl #2
4180:src/xeq.c     **** 				end[i+1] = L;
 23655              		.loc 1 4180 14 view .LVU6153
 23656 0096 02EB8102 		add	r2, r2, r1, lsl #2
 23657 009a 0F46     		mov	r7, r1
 23658              	.LVL1850:
4179:src/xeq.c     **** 				beg[i+1] = beg[i];
 23659              		.loc 1 4179 7 view .LVU6154
 23660 009c 2DDA     		bge	.L1677
4180:src/xeq.c     **** 				end[i+1] = L;
 23661              		.loc 1 4180 5 is_stmt 1 view .LVU6155
4180:src/xeq.c     **** 				end[i+1] = L;
 23662              		.loc 1 4180 14 is_stmt 0 view .LVU6156
 23663 009e 42F8506C 		str	r6, [r2, #-80]
4181:src/xeq.c     **** 				beg[i] = L+1;
 23664              		.loc 1 4181 5 is_stmt 1 view .LVU6157
4182:src/xeq.c     **** 			} else {
 23665              		.loc 1 4182 12 is_stmt 0 view .LVU6158
 23666 00a2 40F8503C 		str	r3, [r0, #-80]
 23667 00a6 52F8506C 		ldr	r6, [r2, #-80]
4181:src/xeq.c     **** 				beg[i] = L+1;
ARM GAS  /tmp/cc0UaEmF.s 			page 613


 23668              		.loc 1 4181 14 view .LVU6159
 23669 00aa 42F8285C 		str	r5, [r2, #-40]
4182:src/xeq.c     **** 			} else {
 23670              		.loc 1 4182 5 is_stmt 1 view .LVU6160
 23671 00ae A846     		mov	r8, r5
 23672 00b0 BDE7     		b	.L1680
 23673              	.LVL1851:
 23674              	.L1671:
4167:src/xeq.c     **** 					copyreg_n(s + L++, s + R);
 23675              		.loc 1 4167 5 view .LVU6161
4167:src/xeq.c     **** 					copyreg_n(s + L++, s + R);
 23676              		.loc 1 4167 8 is_stmt 0 view .LVU6162
 23677 00b2 A145     		cmp	r9, r4
 23678 00b4 DFDA     		bge	.L1673
4168:src/xeq.c     **** 				while (L<R) {
 23679              		.loc 1 4168 6 is_stmt 1 view .LVU6163
 23680 00b6 0098     		ldr	r0, [sp]
4168:src/xeq.c     **** 				while (L<R) {
 23681              		.loc 1 4168 21 is_stmt 0 view .LVU6164
 23682 00b8 09F10105 		add	r5, r9, #1
 23683              	.LVL1852:
4168:src/xeq.c     **** 				while (L<R) {
 23684              		.loc 1 4168 6 view .LVU6165
 23685 00bc 0119     		adds	r1, r0, r4
 23686 00be 4844     		add	r0, r0, r9
 23687 00c0 FFF7FEFF 		bl	copyreg_n
 23688              	.LVL1853:
4169:src/xeq.c     **** 					getRegister(&a, s + L);
 23689              		.loc 1 4169 11 is_stmt 1 view .LVU6166
 23690 00c4 A542     		cmp	r5, r4
 23691 00c6 03DB     		blt	.L1675
 23692 00c8 21E0     		b	.L1682
 23693              	.L1692:
4173:src/xeq.c     **** 				}
 23694              		.loc 1 4173 7 is_stmt 0 view .LVU6167
 23695 00ca 0135     		adds	r5, r5, #1
 23696              	.LVL1854:
4169:src/xeq.c     **** 					getRegister(&a, s + L);
 23697              		.loc 1 4169 11 is_stmt 1 view .LVU6168
 23698 00cc A542     		cmp	r5, r4
 23699 00ce D3D0     		beq	.L1681
 23700              	.L1675:
4170:src/xeq.c     **** 					if (dn_gt(&a, &pivot))
 23701              		.loc 1 4170 6 view .LVU6169
 23702 00d0 0099     		ldr	r1, [sp]
 23703 00d2 0BA8     		add	r0, sp, #44
 23704 00d4 2944     		add	r1, r1, r5
 23705 00d6 FFF7FEFF 		bl	getRegister
 23706              	.LVL1855:
4171:src/xeq.c     **** 						break;
 23707              		.loc 1 4171 6 view .LVU6170
4171:src/xeq.c     **** 						break;
 23708              		.loc 1 4171 10 is_stmt 0 view .LVU6171
 23709 00da 0BA9     		add	r1, sp, #44
 23710 00dc 02A8     		add	r0, sp, #8
 23711 00de FFF7FEFF 		bl	dn_lt
 23712              	.LVL1856:
ARM GAS  /tmp/cc0UaEmF.s 			page 614


4173:src/xeq.c     **** 				}
 23713              		.loc 1 4173 6 is_stmt 1 view .LVU6172
4171:src/xeq.c     **** 						break;
 23714              		.loc 1 4171 9 is_stmt 0 view .LVU6173
 23715 00e2 0028     		cmp	r0, #0
 23716 00e4 F1D0     		beq	.L1692
4175:src/xeq.c     **** 					copyreg_n(s + R--, s + L);
 23717              		.loc 1 4175 5 is_stmt 1 view .LVU6174
4176:src/xeq.c     **** 			}
 23718              		.loc 1 4176 6 view .LVU6175
 23719 00e6 0098     		ldr	r0, [sp]
 23720 00e8 4119     		adds	r1, r0, r5
 23721 00ea 2044     		add	r0, r0, r4
4176:src/xeq.c     **** 			}
 23722              		.loc 1 4176 21 is_stmt 0 view .LVU6176
 23723 00ec 013C     		subs	r4, r4, #1
 23724              	.LVL1857:
4176:src/xeq.c     **** 			}
 23725              		.loc 1 4176 6 view .LVU6177
 23726 00ee FFF7FEFF 		bl	copyreg_n
 23727              	.LVL1858:
4160:src/xeq.c     **** 				while (L<R) {
 23728              		.loc 1 4160 10 is_stmt 1 view .LVU6178
 23729 00f2 A542     		cmp	r5, r4
 23730 00f4 C0DA     		bge	.L1681
 23731 00f6 A946     		mov	r9, r5
4161:src/xeq.c     **** 					getRegister(&a, s + R);
 23732              		.loc 1 4161 11 view .LVU6179
 23733 00f8 B0E7     		b	.L1672
 23734              	.LVL1859:
 23735              	.L1677:
4184:src/xeq.c     **** 				end[i+1] = end[i];
 23736              		.loc 1 4184 5 view .LVU6180
4185:src/xeq.c     **** 				end[i] = L;
 23737              		.loc 1 4185 14 is_stmt 0 view .LVU6181
 23738 00fa 42F8288C 		str	r8, [r2, #-40]
4186:src/xeq.c     **** 			}
 23739              		.loc 1 4186 12 view .LVU6182
 23740 00fe 40F8285C 		str	r5, [r0, #-40]
 23741 0102 52F8288C 		ldr	r8, [r2, #-40]
4184:src/xeq.c     **** 				end[i+1] = end[i];
 23742              		.loc 1 4184 14 view .LVU6183
 23743 0106 42F8503C 		str	r3, [r2, #-80]
4185:src/xeq.c     **** 				end[i] = L;
 23744              		.loc 1 4185 5 is_stmt 1 view .LVU6184
4186:src/xeq.c     **** 			}
 23745              		.loc 1 4186 5 view .LVU6185
4188:src/xeq.c     **** 		} else
 23746              		.loc 1 4188 4 view .LVU6186
 23747              	.LVL1860:
4188:src/xeq.c     **** 		} else
 23748              		.loc 1 4188 4 is_stmt 0 view .LVU6187
 23749              	.LBE3311:
 23750              	.LBE3313:
4154:src/xeq.c     **** 		int L = beg[i];
 23751              		.loc 1 4154 8 is_stmt 1 view .LVU6188
 23752              	.LBB3314:
ARM GAS  /tmp/cc0UaEmF.s 			page 615


 23753              	.LBB3312:
4186:src/xeq.c     **** 			}
 23754              		.loc 1 4186 12 is_stmt 0 view .LVU6189
 23755 010a 1E46     		mov	r6, r3
 23756 010c 8FE7     		b	.L1680
 23757              	.LVL1861:
 23758              	.L1682:
4169:src/xeq.c     **** 					getRegister(&a, s + L);
 23759              		.loc 1 4169 11 view .LVU6190
 23760 010e A946     		mov	r9, r5
 23761              	.LVL1862:
4169:src/xeq.c     **** 					getRegister(&a, s + L);
 23762              		.loc 1 4169 11 view .LVU6191
 23763 0110 4D46     		mov	r5, r9
 23764              	.LVL1863:
4160:src/xeq.c     **** 				while (L<R) {
 23765              		.loc 1 4160 10 is_stmt 1 view .LVU6192
 23766 0112 B1E7     		b	.L1681
 23767              	.LBE3312:
 23768              	.LBE3314:
 23769              		.cfi_endproc
 23770              	.LFE228:
 23772              		.section	.text.reset_volatile_state,"ax",%progbits
 23773              		.align	1
 23774              		.p2align 2,,3
 23775              		.global	reset_volatile_state
 23776              		.syntax unified
 23777              		.thumb
 23778              		.thumb_func
 23779              		.fpu fpv4-sp-d16
 23781              	reset_volatile_state:
 23782              	.LFB230:
4227:src/xeq.c     **** 	// extern int IntMaxWindow;
 23783              		.loc 1 4227 33 view -0
 23784              		.cfi_startproc
 23785              		@ args = 0, pretend = 0, frame = 0
 23786              		@ frame_needed = 0, uses_anonymous_args = 0
 23787              		@ link register save eliminated.
4230:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 23788              		.loc 1 4230 2 view .LVU6194
4230:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 23789              		.loc 1 4230 16 is_stmt 0 view .LVU6195
 23790 0000 034B     		ldr	r3, .L1694
 23791 0002 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
4231:src/xeq.c     **** }
 23792              		.loc 1 4231 15 view .LVU6196
 23793 0004 0021     		movs	r1, #0
4230:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 23794              		.loc 1 4230 16 view .LVU6197
 23795 0006 6FF3C502 		bfc	r2, #3, #3
 23796 000a 1A75     		strb	r2, [r3, #20]
4231:src/xeq.c     **** }
 23797              		.loc 1 4231 2 is_stmt 1 view .LVU6198
4231:src/xeq.c     **** }
 23798              		.loc 1 4231 15 is_stmt 0 view .LVU6199
 23799 000c 5974     		strb	r1, [r3, #17]
4232:src/xeq.c     **** 
ARM GAS  /tmp/cc0UaEmF.s 			page 616


 23800              		.loc 1 4232 1 view .LVU6200
 23801 000e 7047     		bx	lr
 23802              	.L1695:
 23803              		.align	2
 23804              	.L1694:
 23805 0010 00000000 		.word	StateWhileOn
 23806              		.cfi_endproc
 23807              	.LFE230:
 23809              		.section	.rodata.busy.str1.4,"aMS",%progbits,1
 23810              		.align	2
 23811              	.LC7:
 23812 0000 57616974 		.ascii	"Wait...\000"
 23812      2E2E2E00 
 23813              		.section	.text.busy,"ax",%progbits
 23814              		.align	1
 23815              		.p2align 2,,3
 23816              		.global	busy
 23817              		.syntax unified
 23818              		.thumb
 23819              		.thumb_func
 23820              		.fpu fpv4-sp-d16
 23822              	busy:
 23823              	.LFB231:
4239:src/xeq.c     **** 	/*
 23824              		.loc 1 4239 1 is_stmt 1 view -0
 23825              		.cfi_startproc
 23826              		@ args = 0, pretend = 0, frame = 0
 23827              		@ frame_needed = 0, uses_anonymous_args = 0
 23828              		@ link register save eliminated.
4243:src/xeq.c     **** 
 23829              		.loc 1 4243 12 view .LVU6202
4248:src/xeq.c     **** 
 23830              		.loc 1 4248 17 view .LVU6203
4253:src/xeq.c     **** 		Busy = 1;
 23831              		.loc 1 4253 2 view .LVU6204
4253:src/xeq.c     **** 		Busy = 1;
 23832              		.loc 1 4253 6 is_stmt 0 view .LVU6205
 23833 0000 054A     		ldr	r2, .L1699
4253:src/xeq.c     **** 		Busy = 1;
 23834              		.loc 1 4253 15 view .LVU6206
 23835 0002 064B     		ldr	r3, .L1699+4
4253:src/xeq.c     **** 		Busy = 1;
 23836              		.loc 1 4253 12 view .LVU6207
 23837 0004 1168     		ldr	r1, [r2]
 23838 0006 1B68     		ldr	r3, [r3]
 23839 0008 1943     		orrs	r1, r1, r3
 23840 000a 00D0     		beq	.L1698
4257:src/xeq.c     **** 
 23841              		.loc 1 4257 1 view .LVU6208
 23842 000c 7047     		bx	lr
 23843              	.L1698:
 23844              	.LBB3317:
 23845              	.LBI3317:
4238:src/xeq.c     **** {
 23846              		.loc 1 4238 6 is_stmt 1 view .LVU6209
 23847              	.LBB3318:
4254:src/xeq.c     **** 		message("Wait...", NULL);
ARM GAS  /tmp/cc0UaEmF.s 			page 617


 23848              		.loc 1 4254 3 view .LVU6210
4254:src/xeq.c     **** 		message("Wait...", NULL);
 23849              		.loc 1 4254 8 is_stmt 0 view .LVU6211
 23850 000e 0123     		movs	r3, #1
4255:src/xeq.c     **** 	}
 23851              		.loc 1 4255 3 view .LVU6212
 23852 0010 0348     		ldr	r0, .L1699+8
4254:src/xeq.c     **** 		message("Wait...", NULL);
 23853              		.loc 1 4254 8 view .LVU6213
 23854 0012 1360     		str	r3, [r2]
4255:src/xeq.c     **** 	}
 23855              		.loc 1 4255 3 is_stmt 1 view .LVU6214
 23856 0014 FFF7FEBF 		b	message
 23857              	.LVL1864:
 23858              	.L1700:
 23859              		.align	2
 23860              	.L1699:
 23861 0018 00000000 		.word	Busy
 23862 001c 00000000 		.word	Running
 23863 0020 00000000 		.word	.LC7
 23864              	.LBE3318:
 23865              	.LBE3317:
 23866              		.cfi_endproc
 23867              	.LFE231:
 23869              		.section	.text.intMonadic,"ax",%progbits
 23870              		.align	1
 23871              		.p2align 2,,3
 23872              		.global	intMonadic
 23873              		.syntax unified
 23874              		.thumb
 23875              		.thumb_func
 23876              		.fpu fpv4-sp-d16
 23878              	intMonadic:
 23879              	.LVL1865:
 23880              	.LFB235:
4335:src/xeq.c     **** 	int s;
 23881              		.loc 1 4335 43 view -0
 23882              		.cfi_startproc
 23883              		@ args = 0, pretend = 0, frame = 80
 23884              		@ frame_needed = 0, uses_anonymous_args = 0
4336:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &s);
 23885              		.loc 1 4336 2 view .LVU6216
4337:src/xeq.c     **** 	decNumber rx, r;
 23886              		.loc 1 4337 2 view .LVU6217
4335:src/xeq.c     **** 	int s;
 23887              		.loc 1 4335 43 is_stmt 0 view .LVU6218
 23888 0000 30B5     		push	{r4, r5, lr}
 23889              		.cfi_def_cfa_offset 12
 23890              		.cfi_offset 4, -12
 23891              		.cfi_offset 5, -8
 23892              		.cfi_offset 14, -4
 23893 0002 95B0     		sub	sp, sp, #84
 23894              		.cfi_def_cfa_offset 96
4337:src/xeq.c     **** 	decNumber rx, r;
 23895              		.loc 1 4337 30 view .LVU6219
 23896 0004 01AA     		add	r2, sp, #4
 23897 0006 FFF7FEFF 		bl	extract_value
ARM GAS  /tmp/cc0UaEmF.s 			page 618


 23898              	.LVL1866:
4339:src/xeq.c     **** 
 23899              		.loc 1 4339 19 view .LVU6220
 23900 000a 1E4A     		ldr	r2, .L1716
4341:src/xeq.c     **** 		bad_mode_error();
 23901              		.loc 1 4341 6 view .LVU6221
 23902 000c 1E4B     		ldr	r3, .L1716+4
4339:src/xeq.c     **** 
 23903              		.loc 1 4339 15 view .LVU6222
 23904 000e 1478     		ldrb	r4, [r2]	@ zero_extendqisi2
4341:src/xeq.c     **** 		bad_mode_error();
 23905              		.loc 1 4341 6 view .LVU6223
 23906 0010 04EB4404 		add	r4, r4, r4, lsl #1
 23907 0014 53F83440 		ldr	r4, [r3, r4, lsl #3]
 23908              	.LVL1867:
4338:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
 23909              		.loc 1 4338 2 is_stmt 1 view .LVU6224
4339:src/xeq.c     **** 
 23910              		.loc 1 4339 2 view .LVU6225
4341:src/xeq.c     **** 		bad_mode_error();
 23911              		.loc 1 4341 2 view .LVU6226
4341:src/xeq.c     **** 		bad_mode_error();
 23912              		.loc 1 4341 5 is_stmt 0 view .LVU6227
 23913 0018 5CB1     		cbz	r4, .L1706
 23914              	.LBB3336:
4344:src/xeq.c     **** #ifndef REALBUILD
 23915              		.loc 1 4344 3 is_stmt 1 view .LVU6228
 23916              	.LVL1868:
4346:src/xeq.c     **** 			bad_mode_error();
 23917              		.loc 1 4346 3 view .LVU6229
 23918              	.LBB3337:
 23919              	.LBI3337:
4273:src/xeq.c     **** {
 23920              		.loc 1 4273 24 view .LVU6230
 23921              	.LBB3338:
4275:src/xeq.c     **** 	if (xp < xrom)
 23922              		.loc 1 4275 2 view .LVU6231
4276:src/xeq.c     **** 		return NULL;
 23923              		.loc 1 4276 5 is_stmt 0 view .LVU6232
 23924 001a 1C4B     		ldr	r3, .L1716+8
4275:src/xeq.c     **** 	if (xp < xrom)
 23925              		.loc 1 4275 59 view .LVU6233
 23926 001c 24F00102 		bic	r2, r4, #1
 23927              	.LVL1869:
4276:src/xeq.c     **** 		return NULL;
 23928              		.loc 1 4276 2 is_stmt 1 view .LVU6234
4276:src/xeq.c     **** 		return NULL;
 23929              		.loc 1 4276 5 is_stmt 0 view .LVU6235
 23930 0020 9A42     		cmp	r2, r3
 23931 0022 10D3     		bcc	.L1705
4280:src/xeq.c     **** 		return NULL;
 23932              		.loc 1 4280 2 is_stmt 1 view .LVU6236
4280:src/xeq.c     **** 		return NULL;
 23933              		.loc 1 4280 17 is_stmt 0 view .LVU6237
 23934 0024 1A4D     		ldr	r5, .L1716+12
 23935 0026 2D88     		ldrh	r5, [r5]
 23936 0028 03EB4503 		add	r3, r3, r5, lsl #1
ARM GAS  /tmp/cc0UaEmF.s 			page 619


4280:src/xeq.c     **** 		return NULL;
 23937              		.loc 1 4280 5 view .LVU6238
 23938 002c 9A42     		cmp	r2, r3
 23939 002e 0AD2     		bcs	.L1705
 23940              	.LVL1870:
4280:src/xeq.c     **** 		return NULL;
 23941              		.loc 1 4280 5 view .LVU6239
 23942              	.LBE3338:
 23943              	.LBE3337:
4346:src/xeq.c     **** 			bad_mode_error();
 23944              		.loc 1 4346 6 view .LVU6240
 23945 0030 4AB1     		cbz	r2, .L1705
 23946              	.LVL1871:
 23947              	.L1706:
4346:src/xeq.c     **** 			bad_mode_error();
 23948              		.loc 1 4346 6 view .LVU6241
 23949              	.LBE3336:
4342:src/xeq.c     **** 	else {
 23950              		.loc 1 4342 3 is_stmt 1 view .LVU6242
 23951              	.LBB3347:
 23952              	.LBI3347:
 566:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 23953              		.loc 1 566 6 view .LVU6243
 23954              	.LBE3347:
 567:src/xeq.c     **** }
 23955              		.loc 1 567 2 view .LVU6244
 23956              	.LBB3356:
 23957              	.LBB3348:
 23958              	.LBI3348:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23959              		.loc 1 537 5 view .LVU6245
 23960              	.LBB3349:
 538:src/xeq.c     **** 		Error = e;
 23961              		.loc 1 538 2 view .LVU6246
 538:src/xeq.c     **** 		Error = e;
 23962              		.loc 1 538 12 is_stmt 0 view .LVU6247
 23963 0032 184B     		ldr	r3, .L1716+16
 538:src/xeq.c     **** 		Error = e;
 23964              		.loc 1 538 5 view .LVU6248
 23965 0034 1A68     		ldr	r2, [r3]
 23966 0036 1AB1     		cbz	r2, .L1703
 23967              	.LVL1872:
 23968              	.L1714:
 23969              	.LBB3350:
 23970              	.LBB3351:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 23971              		.loc 1 540 3 is_stmt 1 view .LVU6249
 23972              	.LBE3351:
 23973              	.LBE3350:
 23974              	.LBE3349:
 23975              	.LBE3348:
 23976              	.LBE3356:
4360:src/xeq.c     **** }
 23977              		.loc 1 4360 9 is_stmt 0 view .LVU6250
 23978 0038 0020     		movs	r0, #0
 23979 003a 0146     		mov	r1, r0
4361:src/xeq.c     **** 
ARM GAS  /tmp/cc0UaEmF.s 			page 620


 23980              		.loc 1 4361 1 view .LVU6251
 23981 003c 15B0     		add	sp, sp, #84
 23982              		.cfi_remember_state
 23983              		.cfi_def_cfa_offset 12
 23984              		@ sp needed
 23985 003e 30BD     		pop	{r4, r5, pc}
 23986              	.LVL1873:
 23987              	.L1703:
 23988              		.cfi_restore_state
 23989              	.LBB3357:
 23990              	.LBB3355:
 23991              	.LBB3354:
 23992              	.LBB3353:
 23993              	.LBI3350:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23994              		.loc 1 537 5 is_stmt 1 view .LVU6252
 23995              	.LBB3352:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 23996              		.loc 1 539 3 view .LVU6253
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 23997              		.loc 1 539 9 is_stmt 0 view .LVU6254
 23998 0040 0D22     		movs	r2, #13
 23999 0042 1A60     		str	r2, [r3]
 24000 0044 F8E7     		b	.L1714
 24001              	.LVL1874:
 24002              	.L1705:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 24003              		.loc 1 539 9 view .LVU6255
 24004              	.LBE3352:
 24005              	.LBE3353:
 24006              	.LBE3354:
 24007              	.LBE3355:
 24008              	.LBE3357:
 24009              	.LBB3358:
4351:src/xeq.c     **** 			if (s)
 24010              		.loc 1 4351 4 is_stmt 1 view .LVU6256
 24011 0046 0246     		mov	r2, r0
 24012 0048 0B46     		mov	r3, r1
 24013 004a 02A8     		add	r0, sp, #8
 24014              	.LVL1875:
4351:src/xeq.c     **** 			if (s)
 24015              		.loc 1 4351 4 is_stmt 0 view .LVU6257
 24016 004c FFF7FEFF 		bl	ullint_to_dn
 24017              	.LVL1876:
4352:src/xeq.c     **** 				dn_minus(&rx, &rx);
 24018              		.loc 1 4352 4 is_stmt 1 view .LVU6258
4352:src/xeq.c     **** 				dn_minus(&rx, &rx);
 24019              		.loc 1 4352 7 is_stmt 0 view .LVU6259
 24020 0050 019B     		ldr	r3, [sp, #4]
 24021 0052 8BB9     		cbnz	r3, .L1715
 24022              	.L1707:
4354:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 24023              		.loc 1 4354 4 is_stmt 1 view .LVU6260
4354:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 24024              		.loc 1 4354 16 is_stmt 0 view .LVU6261
 24025 0054 02A9     		add	r1, sp, #8
 24026 0056 0BA8     		add	r0, sp, #44
ARM GAS  /tmp/cc0UaEmF.s 			page 621


 24027 0058 A047     		blx	r4
 24028              	.LVL1877:
4354:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 24029              		.loc 1 4354 7 view .LVU6262
 24030 005a 40B9     		cbnz	r0, .L1708
4355:src/xeq.c     **** 			else
 24031              		.loc 1 4355 5 is_stmt 1 view .LVU6263
 24032              	.LVL1878:
 24033              	.LBB3339:
 24034              	.LBI3339:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24035              		.loc 1 537 5 view .LVU6264
 24036              	.LBB3340:
 538:src/xeq.c     **** 		Error = e;
 24037              		.loc 1 538 2 view .LVU6265
 538:src/xeq.c     **** 		Error = e;
 24038              		.loc 1 538 12 is_stmt 0 view .LVU6266
 24039 005c 0D4B     		ldr	r3, .L1716+16
 538:src/xeq.c     **** 		Error = e;
 24040              		.loc 1 538 5 view .LVU6267
 24041 005e 1A68     		ldr	r2, [r3]
 24042 0060 002A     		cmp	r2, #0
 24043 0062 E9D1     		bne	.L1714
 24044              	.LVL1879:
 24045              	.LBB3341:
 24046              	.LBI3341:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24047              		.loc 1 537 5 is_stmt 1 view .LVU6268
 24048              	.LBB3342:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 24049              		.loc 1 539 3 view .LVU6269
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 24050              		.loc 1 539 9 is_stmt 0 view .LVU6270
 24051 0064 0122     		movs	r2, #1
 24052              	.LBE3342:
 24053              	.LBE3341:
 24054              	.LBE3340:
 24055              	.LBE3339:
 24056              	.LBE3358:
4360:src/xeq.c     **** }
 24057              		.loc 1 4360 9 view .LVU6271
 24058 0066 0146     		mov	r1, r0
 24059              	.LBB3359:
 24060              	.LBB3346:
 24061              	.LBB3345:
 24062              	.LBB3344:
 24063              	.LBB3343:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 24064              		.loc 1 539 9 view .LVU6272
 24065 0068 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 24066              		.loc 1 540 3 is_stmt 1 view .LVU6273
 24067              	.LBE3343:
 24068              	.LBE3344:
 24069              	.LBE3345:
 24070              	.LBE3346:
 24071              	.LBE3359:
ARM GAS  /tmp/cc0UaEmF.s 			page 622


4361:src/xeq.c     **** 
 24072              		.loc 1 4361 1 is_stmt 0 view .LVU6274
 24073 006a 15B0     		add	sp, sp, #84
 24074              		.cfi_remember_state
 24075              		.cfi_def_cfa_offset 12
 24076              		@ sp needed
 24077 006c 30BD     		pop	{r4, r5, pc}
 24078              	.LVL1880:
 24079              	.L1708:
 24080              		.cfi_restore_state
 24081              	.LBB3360:
4357:src/xeq.c     **** 		}
 24082              		.loc 1 4357 5 is_stmt 1 view .LVU6275
4357:src/xeq.c     **** 		}
 24083              		.loc 1 4357 12 is_stmt 0 view .LVU6276
 24084 006e 0BA8     		add	r0, sp, #44
 24085 0070 FFF7FEFF 		bl	intResult
 24086              	.LVL1881:
 24087              	.LBE3360:
4361:src/xeq.c     **** 
 24088              		.loc 1 4361 1 view .LVU6277
 24089 0074 15B0     		add	sp, sp, #84
 24090              		.cfi_remember_state
 24091              		.cfi_def_cfa_offset 12
 24092              		@ sp needed
 24093 0076 30BD     		pop	{r4, r5, pc}
 24094              	.LVL1882:
 24095              	.L1715:
 24096              		.cfi_restore_state
 24097              	.LBB3361:
4353:src/xeq.c     **** 			if (NULL == fp(&r, &rx))
 24098              		.loc 1 4353 5 is_stmt 1 view .LVU6278
 24099 0078 02A9     		add	r1, sp, #8
 24100 007a 0846     		mov	r0, r1
 24101 007c FFF7FEFF 		bl	dn_minus
 24102              	.LVL1883:
 24103 0080 E8E7     		b	.L1707
 24104              	.L1717:
 24105 0082 00BF     		.align	2
 24106              	.L1716:
 24107 0084 00000000 		.word	XeqOpCode
 24108 0088 00000000 		.word	monfuncs
 24109 008c 00000000 		.word	xrom
 24110 0090 00000000 		.word	xrom_size
 24111 0094 00000000 		.word	Error
 24112              	.LBE3361:
 24113              		.cfi_endproc
 24114              	.LFE235:
 24116              		.section	.text.intDyadic,"ax",%progbits
 24117              		.align	1
 24118              		.p2align 2,,3
 24119              		.global	intDyadic
 24120              		.syntax unified
 24121              		.thumb
 24122              		.thumb_func
 24123              		.fpu fpv4-sp-d16
 24125              	intDyadic:
ARM GAS  /tmp/cc0UaEmF.s 			page 623


 24126              	.LVL1884:
 24127              	.LFB236:
4366:src/xeq.c     **** 	int sx, sy;
 24128              		.loc 1 4366 59 view -0
 24129              		.cfi_startproc
 24130              		@ args = 0, pretend = 0, frame = 120
 24131              		@ frame_needed = 0, uses_anonymous_args = 0
4367:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &sx);
 24132              		.loc 1 4367 2 view .LVU6280
4368:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 24133              		.loc 1 4368 2 view .LVU6281
4366:src/xeq.c     **** 	int sx, sy;
 24134              		.loc 1 4366 59 is_stmt 0 view .LVU6282
 24135 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 24136              		.cfi_def_cfa_offset 24
 24137              		.cfi_offset 4, -24
 24138              		.cfi_offset 5, -20
 24139              		.cfi_offset 6, -16
 24140              		.cfi_offset 7, -12
 24141              		.cfi_offset 8, -8
 24142              		.cfi_offset 14, -4
 24143 0004 9EB0     		sub	sp, sp, #120
 24144              		.cfi_def_cfa_offset 144
4366:src/xeq.c     **** 	int sx, sy;
 24145              		.loc 1 4366 59 view .LVU6283
 24146 0006 0546     		mov	r5, r0
 24147 0008 0C46     		mov	r4, r1
4368:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 24148              		.loc 1 4368 30 view .LVU6284
 24149 000a 1046     		mov	r0, r2
 24150              	.LVL1885:
4368:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 24151              		.loc 1 4368 30 view .LVU6285
 24152 000c 1946     		mov	r1, r3
 24153 000e 01AA     		add	r2, sp, #4
 24154              	.LVL1886:
4368:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 24155              		.loc 1 4368 30 view .LVU6286
 24156 0010 FFF7FEFF 		bl	extract_value
 24157              	.LVL1887:
4369:src/xeq.c     **** 	decNumber rx, ry, r;
 24158              		.loc 1 4369 30 view .LVU6287
 24159 0014 02AA     		add	r2, sp, #8
4368:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 24160              		.loc 1 4368 30 view .LVU6288
 24161 0016 0B46     		mov	r3, r1
 24162 0018 0646     		mov	r6, r0
4369:src/xeq.c     **** 	decNumber rx, ry, r;
 24163              		.loc 1 4369 30 view .LVU6289
 24164 001a 2146     		mov	r1, r4
 24165 001c 2846     		mov	r0, r5
4368:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 24166              		.loc 1 4368 30 view .LVU6290
 24167 001e 1D46     		mov	r5, r3
 24168              	.LVL1888:
4369:src/xeq.c     **** 	decNumber rx, ry, r;
 24169              		.loc 1 4369 2 is_stmt 1 view .LVU6291
ARM GAS  /tmp/cc0UaEmF.s 			page 624


4369:src/xeq.c     **** 	decNumber rx, ry, r;
 24170              		.loc 1 4369 30 is_stmt 0 view .LVU6292
 24171 0020 FFF7FEFF 		bl	extract_value
 24172              	.LVL1889:
4371:src/xeq.c     **** 
 24173              		.loc 1 4371 19 view .LVU6293
 24174 0024 264A     		ldr	r2, .L1738
4373:src/xeq.c     **** 		bad_mode_error();
 24175              		.loc 1 4373 6 view .LVU6294
 24176 0026 274B     		ldr	r3, .L1738+4
4371:src/xeq.c     **** 
 24177              		.loc 1 4371 15 view .LVU6295
 24178 0028 1478     		ldrb	r4, [r2]	@ zero_extendqisi2
4373:src/xeq.c     **** 		bad_mode_error();
 24179              		.loc 1 4373 6 view .LVU6296
 24180 002a 04EB4404 		add	r4, r4, r4, lsl #1
 24181 002e 53F83440 		ldr	r4, [r3, r4, lsl #3]
 24182              	.LVL1890:
4370:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
 24183              		.loc 1 4370 2 is_stmt 1 view .LVU6297
4371:src/xeq.c     **** 
 24184              		.loc 1 4371 2 view .LVU6298
4373:src/xeq.c     **** 		bad_mode_error();
 24185              		.loc 1 4373 2 view .LVU6299
4373:src/xeq.c     **** 		bad_mode_error();
 24186              		.loc 1 4373 5 is_stmt 0 view .LVU6300
 24187 0032 6CB1     		cbz	r4, .L1723
 24188              	.LBB3379:
 24189              	.LBB3380:
 24190              	.LBB3381:
4276:src/xeq.c     **** 		return NULL;
 24191              		.loc 1 4276 5 view .LVU6301
 24192 0034 244B     		ldr	r3, .L1738+8
4275:src/xeq.c     **** 	if (xp < xrom)
 24193              		.loc 1 4275 59 view .LVU6302
 24194 0036 24F00102 		bic	r2, r4, #1
 24195              	.LVL1891:
4276:src/xeq.c     **** 		return NULL;
 24196              		.loc 1 4276 5 view .LVU6303
 24197 003a 9A42     		cmp	r2, r3
 24198 003c 0746     		mov	r7, r0
 24199 003e 8846     		mov	r8, r1
 24200              	.LBE3381:
 24201              	.LBE3380:
4376:src/xeq.c     **** 
 24202              		.loc 1 4376 3 is_stmt 1 view .LVU6304
 24203              	.LVL1892:
4379:src/xeq.c     **** 			bad_mode_error();
 24204              		.loc 1 4379 3 view .LVU6305
 24205              	.LBB3383:
 24206              	.LBI3380:
4273:src/xeq.c     **** {
 24207              		.loc 1 4273 24 view .LVU6306
 24208              	.LBB3382:
4275:src/xeq.c     **** 	if (xp < xrom)
 24209              		.loc 1 4275 2 view .LVU6307
4276:src/xeq.c     **** 		return NULL;
ARM GAS  /tmp/cc0UaEmF.s 			page 625


 24210              		.loc 1 4276 2 view .LVU6308
4276:src/xeq.c     **** 		return NULL;
 24211              		.loc 1 4276 5 is_stmt 0 view .LVU6309
 24212 0040 11D3     		bcc	.L1722
4280:src/xeq.c     **** 		return NULL;
 24213              		.loc 1 4280 2 is_stmt 1 view .LVU6310
4280:src/xeq.c     **** 		return NULL;
 24214              		.loc 1 4280 17 is_stmt 0 view .LVU6311
 24215 0042 2249     		ldr	r1, .L1738+12
 24216              	.LVL1893:
4280:src/xeq.c     **** 		return NULL;
 24217              		.loc 1 4280 17 view .LVU6312
 24218 0044 0988     		ldrh	r1, [r1]
 24219 0046 03EB4103 		add	r3, r3, r1, lsl #1
4280:src/xeq.c     **** 		return NULL;
 24220              		.loc 1 4280 5 view .LVU6313
 24221 004a 9A42     		cmp	r2, r3
 24222 004c 0BD2     		bcs	.L1722
 24223              	.LVL1894:
4280:src/xeq.c     **** 		return NULL;
 24224              		.loc 1 4280 5 view .LVU6314
 24225              	.LBE3382:
 24226              	.LBE3383:
4379:src/xeq.c     **** 			bad_mode_error();
 24227              		.loc 1 4379 6 view .LVU6315
 24228 004e 52B1     		cbz	r2, .L1722
 24229              	.LVL1895:
 24230              	.L1723:
4379:src/xeq.c     **** 			bad_mode_error();
 24231              		.loc 1 4379 6 view .LVU6316
 24232              	.LBE3379:
4374:src/xeq.c     **** 	else {
 24233              		.loc 1 4374 3 is_stmt 1 view .LVU6317
 24234              	.LBB3392:
 24235              	.LBI3392:
 566:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 24236              		.loc 1 566 6 view .LVU6318
 24237              	.LBE3392:
 567:src/xeq.c     **** }
 24238              		.loc 1 567 2 view .LVU6319
 24239              	.LBB3401:
 24240              	.LBB3393:
 24241              	.LBI3393:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24242              		.loc 1 537 5 view .LVU6320
 24243              	.LBB3394:
 538:src/xeq.c     **** 		Error = e;
 24244              		.loc 1 538 2 view .LVU6321
 538:src/xeq.c     **** 		Error = e;
 24245              		.loc 1 538 12 is_stmt 0 view .LVU6322
 24246 0050 1F4B     		ldr	r3, .L1738+16
 538:src/xeq.c     **** 		Error = e;
 24247              		.loc 1 538 5 view .LVU6323
 24248 0052 1A68     		ldr	r2, [r3]
 24249 0054 22B1     		cbz	r2, .L1720
 24250              	.LVL1896:
 24251              	.L1735:
ARM GAS  /tmp/cc0UaEmF.s 			page 626


 24252              	.LBB3395:
 24253              	.LBB3396:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 24254              		.loc 1 540 3 is_stmt 1 view .LVU6324
 24255              	.LBE3396:
 24256              	.LBE3395:
 24257              	.LBE3394:
 24258              	.LBE3393:
 24259              	.LBE3401:
4393:src/xeq.c     **** }
 24260              		.loc 1 4393 9 is_stmt 0 view .LVU6325
 24261 0056 0020     		movs	r0, #0
 24262 0058 0146     		mov	r1, r0
4394:src/xeq.c     **** 
 24263              		.loc 1 4394 1 view .LVU6326
 24264 005a 1EB0     		add	sp, sp, #120
 24265              		.cfi_remember_state
 24266              		.cfi_def_cfa_offset 24
 24267              		@ sp needed
 24268 005c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 24269              	.LVL1897:
 24270              	.L1720:
 24271              		.cfi_restore_state
 24272              	.LBB3402:
 24273              	.LBB3400:
 24274              	.LBB3399:
 24275              	.LBB3398:
 24276              	.LBI3395:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24277              		.loc 1 537 5 is_stmt 1 view .LVU6327
 24278              	.LBB3397:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 24279              		.loc 1 539 3 view .LVU6328
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 24280              		.loc 1 539 9 is_stmt 0 view .LVU6329
 24281 0060 0D22     		movs	r2, #13
 24282 0062 1A60     		str	r2, [r3]
 24283 0064 F7E7     		b	.L1735
 24284              	.LVL1898:
 24285              	.L1722:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 24286              		.loc 1 539 9 view .LVU6330
 24287              	.LBE3397:
 24288              	.LBE3398:
 24289              	.LBE3399:
 24290              	.LBE3400:
 24291              	.LBE3402:
 24292              	.LBB3403:
4384:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 24293              		.loc 1 4384 4 is_stmt 1 view .LVU6331
 24294 0066 2B46     		mov	r3, r5
 24295 0068 3246     		mov	r2, r6
 24296 006a 03A8     		add	r0, sp, #12
 24297              	.LVL1899:
4384:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 24298              		.loc 1 4384 4 is_stmt 0 view .LVU6332
 24299 006c FFF7FEFF 		bl	ullint_to_dn
ARM GAS  /tmp/cc0UaEmF.s 			page 627


 24300              	.LVL1900:
4384:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 24301              		.loc 1 4384 27 is_stmt 1 view .LVU6333
4384:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 24302              		.loc 1 4384 30 is_stmt 0 view .LVU6334
 24303 0070 019B     		ldr	r3, [sp, #4]
 24304 0072 03BB     		cbnz	r3, .L1736
 24305              	.L1724:
4385:src/xeq.c     **** 
 24306              		.loc 1 4385 4 is_stmt 1 view .LVU6335
 24307 0074 4346     		mov	r3, r8
 24308 0076 3A46     		mov	r2, r7
 24309 0078 0CA8     		add	r0, sp, #48
 24310 007a FFF7FEFF 		bl	ullint_to_dn
 24311              	.LVL1901:
4385:src/xeq.c     **** 
 24312              		.loc 1 4385 27 view .LVU6336
4385:src/xeq.c     **** 
 24313              		.loc 1 4385 30 is_stmt 0 view .LVU6337
 24314 007e 029B     		ldr	r3, [sp, #8]
 24315 0080 A3B9     		cbnz	r3, .L1737
 24316              	.L1725:
4387:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 24317              		.loc 1 4387 4 is_stmt 1 view .LVU6338
4387:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 24318              		.loc 1 4387 16 is_stmt 0 view .LVU6339
 24319 0082 03AA     		add	r2, sp, #12
 24320 0084 0CA9     		add	r1, sp, #48
 24321 0086 15A8     		add	r0, sp, #84
 24322 0088 A047     		blx	r4
 24323              	.LVL1902:
4387:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 24324              		.loc 1 4387 7 view .LVU6340
 24325 008a 48B9     		cbnz	r0, .L1726
4388:src/xeq.c     **** 			else
 24326              		.loc 1 4388 5 is_stmt 1 view .LVU6341
 24327              	.LVL1903:
 24328              	.LBB3384:
 24329              	.LBI3384:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24330              		.loc 1 537 5 view .LVU6342
 24331              	.LBB3385:
 538:src/xeq.c     **** 		Error = e;
 24332              		.loc 1 538 2 view .LVU6343
 538:src/xeq.c     **** 		Error = e;
 24333              		.loc 1 538 12 is_stmt 0 view .LVU6344
 24334 008c 104B     		ldr	r3, .L1738+16
 538:src/xeq.c     **** 		Error = e;
 24335              		.loc 1 538 5 view .LVU6345
 24336 008e 1A68     		ldr	r2, [r3]
 24337 0090 002A     		cmp	r2, #0
 24338 0092 E0D1     		bne	.L1735
 24339              	.LVL1904:
 24340              	.LBB3386:
 24341              	.LBI3386:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24342              		.loc 1 537 5 is_stmt 1 view .LVU6346
ARM GAS  /tmp/cc0UaEmF.s 			page 628


 24343              	.LBB3387:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 24344              		.loc 1 539 3 view .LVU6347
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 24345              		.loc 1 539 9 is_stmt 0 view .LVU6348
 24346 0094 0122     		movs	r2, #1
 24347              	.LBE3387:
 24348              	.LBE3386:
 24349              	.LBE3385:
 24350              	.LBE3384:
 24351              	.LBE3403:
4393:src/xeq.c     **** }
 24352              		.loc 1 4393 9 view .LVU6349
 24353 0096 0146     		mov	r1, r0
 24354              	.LBB3404:
 24355              	.LBB3391:
 24356              	.LBB3390:
 24357              	.LBB3389:
 24358              	.LBB3388:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 24359              		.loc 1 539 9 view .LVU6350
 24360 0098 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 24361              		.loc 1 540 3 is_stmt 1 view .LVU6351
 24362              	.LBE3388:
 24363              	.LBE3389:
 24364              	.LBE3390:
 24365              	.LBE3391:
 24366              	.LBE3404:
4394:src/xeq.c     **** 
 24367              		.loc 1 4394 1 is_stmt 0 view .LVU6352
 24368 009a 1EB0     		add	sp, sp, #120
 24369              		.cfi_remember_state
 24370              		.cfi_def_cfa_offset 24
 24371              		@ sp needed
 24372 009c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 24373              	.LVL1905:
 24374              	.L1726:
 24375              		.cfi_restore_state
 24376              	.LBB3405:
4390:src/xeq.c     **** 		}
 24377              		.loc 1 4390 5 is_stmt 1 view .LVU6353
4390:src/xeq.c     **** 		}
 24378              		.loc 1 4390 12 is_stmt 0 view .LVU6354
 24379 00a0 15A8     		add	r0, sp, #84
 24380 00a2 FFF7FEFF 		bl	intResult
 24381              	.LVL1906:
 24382              	.LBE3405:
4394:src/xeq.c     **** 
 24383              		.loc 1 4394 1 view .LVU6355
 24384 00a6 1EB0     		add	sp, sp, #120
 24385              		.cfi_remember_state
 24386              		.cfi_def_cfa_offset 24
 24387              		@ sp needed
 24388 00a8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 24389              	.LVL1907:
 24390              	.L1737:
ARM GAS  /tmp/cc0UaEmF.s 			page 629


 24391              		.cfi_restore_state
 24392              	.LBB3406:
4385:src/xeq.c     **** 
 24393              		.loc 1 4385 35 is_stmt 1 discriminator 1 view .LVU6356
 24394 00ac 0CA9     		add	r1, sp, #48
 24395 00ae 0846     		mov	r0, r1
 24396 00b0 FFF7FEFF 		bl	dn_minus
 24397              	.LVL1908:
 24398 00b4 E5E7     		b	.L1725
 24399              	.L1736:
4384:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 24400              		.loc 1 4384 35 discriminator 1 view .LVU6357
 24401 00b6 03A9     		add	r1, sp, #12
 24402 00b8 0846     		mov	r0, r1
 24403 00ba FFF7FEFF 		bl	dn_minus
 24404              	.LVL1909:
 24405 00be D9E7     		b	.L1724
 24406              	.L1739:
 24407              		.align	2
 24408              	.L1738:
 24409 00c0 00000000 		.word	XeqOpCode
 24410 00c4 00000000 		.word	dyfuncs
 24411 00c8 00000000 		.word	xrom
 24412 00cc 00000000 		.word	xrom_size
 24413 00d0 00000000 		.word	Error
 24414              	.LBE3406:
 24415              		.cfi_endproc
 24416              	.LFE236:
 24418              		.section	.text.xeq_init_contexts,"ax",%progbits
 24419              		.align	1
 24420              		.p2align 2,,3
 24421              		.global	xeq_init_contexts
 24422              		.syntax unified
 24423              		.thumb
 24424              		.thumb_func
 24425              		.fpu fpv4-sp-d16
 24427              	xeq_init_contexts:
 24428              	.LFB253:
5391:src/xeq.c     **** 	/*
 24429              		.loc 1 5391 30 view -0
 24430              		.cfi_startproc
 24431              		@ args = 0, pretend = 0, frame = 0
 24432              		@ frame_needed = 0, uses_anonymous_args = 0
5395:src/xeq.c     **** 	SizeStatRegs = State.have_stats ? sizeof(STAT_DATA) >> 1 : 0;	// in 16 bit words!
 24433              		.loc 1 5395 2 view .LVU6359
5396:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 24434              		.loc 1 5396 2 view .LVU6360
5391:src/xeq.c     **** 	/*
 24435              		.loc 1 5391 30 is_stmt 0 view .LVU6361
 24436 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 24437              		.cfi_def_cfa_offset 24
 24438              		.cfi_offset 3, -24
 24439              		.cfi_offset 4, -20
 24440              		.cfi_offset 5, -16
 24441              		.cfi_offset 6, -12
 24442              		.cfi_offset 7, -8
 24443              		.cfi_offset 14, -4
ARM GAS  /tmp/cc0UaEmF.s 			page 630


5396:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 24444              		.loc 1 5396 17 view .LVU6362
 24445 0002 1D4B     		ldr	r3, .L1745
5399:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 24446              		.loc 1 5399 13 view .LVU6363
 24447 0004 1D4F     		ldr	r7, .L1745+4
5396:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 24448              		.loc 1 5396 17 view .LVU6364
 24449 0006 1A68     		ldr	r2, [r3]
5396:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 24450              		.loc 1 5396 34 view .LVU6365
 24451 0008 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
5397:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 24452              		.loc 1 5397 21 view .LVU6366
 24453 000c 92F8CF17 		ldrb	r1, [r2, #1999]	@ zero_extendqisi2
5399:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 24454              		.loc 1 5399 36 view .LVU6367
 24455 0010 5088     		ldrh	r0, [r2, #2]
5401:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 24456              		.loc 1 5401 34 view .LVU6368
 24457 0012 B2F9E247 		ldrsh	r4, [r2, #2018]
5396:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 24458              		.loc 1 5396 59 view .LVU6369
 24459 0016 13F02003 		ands	r3, r3, #32
 24460 001a 18BF     		it	ne
 24461 001c 4623     		movne	r3, #70
5397:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 24462              		.loc 1 5397 19 view .LVU6370
 24463 001e C1F16401 		rsb	r1, r1, #100
5396:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 24464              		.loc 1 5396 59 view .LVU6371
 24465 0022 1E46     		mov	r6, r3
5397:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 24466              		.loc 1 5397 36 view .LVU6372
 24467 0024 C3EB8103 		rsb	r3, r3, r1, lsl #2
5400:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
 24468              		.loc 1 5400 31 view .LVU6373
 24469 0028 03F50471 		add	r1, r3, #528
 24470 002c 89B2     		uxth	r1, r1
5401:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 24471              		.loc 1 5401 21 view .LVU6374
 24472 002e 0D1A     		subs	r5, r1, r0
5398:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 24473              		.loc 1 5398 22 view .LVU6375
 24474 0030 03F21623 		addw	r3, r3, #534
5399:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 24475              		.loc 1 5399 34 view .LVU6376
 24476 0034 181A     		subs	r0, r3, r0
5401:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 24477              		.loc 1 5401 32 view .LVU6377
 24478 0036 2544     		add	r5, r5, r4
5398:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 24479              		.loc 1 5398 11 view .LVU6378
 24480 0038 141D     		adds	r4, r2, #4
5399:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 24481              		.loc 1 5399 13 view .LVU6379
 24482 003a 3860     		str	r0, [r7]
ARM GAS  /tmp/cc0UaEmF.s 			page 631


5398:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 24483              		.loc 1 5398 22 view .LVU6380
 24484 003c 04EB4303 		add	r3, r4, r3, lsl #1
5396:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 24485              		.loc 1 5396 15 view .LVU6381
 24486 0040 0F48     		ldr	r0, .L1745+8
5398:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 24487              		.loc 1 5398 9 view .LVU6382
 24488 0042 104C     		ldr	r4, .L1745+12
5401:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 24489              		.loc 1 5401 11 view .LVU6383
 24490 0044 104F     		ldr	r7, .L1745+16
5398:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 24491              		.loc 1 5398 9 view .LVU6384
 24492 0046 2360     		str	r3, [r4]
5396:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 24493              		.loc 1 5396 15 view .LVU6385
 24494 0048 0660     		str	r6, [r0]
5397:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 24495              		.loc 1 5397 2 is_stmt 1 view .LVU6386
 24496              	.LVL1910:
5398:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 24497              		.loc 1 5398 2 view .LVU6387
5399:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 24498              		.loc 1 5399 2 view .LVU6388
5400:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
 24499              		.loc 1 5400 2 view .LVU6389
5400:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
 24500              		.loc 1 5400 10 is_stmt 0 view .LVU6390
 24501 004a 1180     		strh	r1, [r2]	@ movhi
5401:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 24502              		.loc 1 5401 2 is_stmt 1 view .LVU6391
5402:src/xeq.c     **** 
 24503              		.loc 1 5402 14 is_stmt 0 view .LVU6392
 24504 004c 6420     		movs	r0, #100
5401:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 24505              		.loc 1 5401 11 view .LVU6393
 24506 004e 3D60     		str	r5, [r7]
5402:src/xeq.c     **** 
 24507              		.loc 1 5402 2 is_stmt 1 view .LVU6394
5402:src/xeq.c     **** 
 24508              		.loc 1 5402 14 is_stmt 0 view .LVU6395
 24509 0050 FFF7FEFF 		bl	get_reg_n
 24510              	.LVL1911:
5408:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
 24511              		.loc 1 5408 2 view .LVU6396
 24512 0054 0D4C     		ldr	r4, .L1745+20
5402:src/xeq.c     **** 
 24513              		.loc 1 5402 12 view .LVU6397
 24514 0056 0E4B     		ldr	r3, .L1745+24
5402:src/xeq.c     **** 
 24515              		.loc 1 5402 14 view .LVU6398
 24516 0058 0246     		mov	r2, r0
5408:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
 24517              		.loc 1 5408 2 view .LVU6399
 24518 005a 0021     		movs	r1, #0
 24519 005c 2046     		mov	r0, r4
ARM GAS  /tmp/cc0UaEmF.s 			page 632


5402:src/xeq.c     **** 
 24520              		.loc 1 5402 12 view .LVU6400
 24521 005e 1A60     		str	r2, [r3]
5408:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
 24522              		.loc 1 5408 2 is_stmt 1 view .LVU6401
 24523 0060 FFF7FEFF 		bl	decContextDefault
 24524              	.LVL1912:
5409:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
 24525              		.loc 1 5409 2 view .LVU6402
5409:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
 24526              		.loc 1 5409 13 is_stmt 0 view .LVU6403
 24527 0064 2723     		movs	r3, #39
5410:src/xeq.c     **** 	Ctx.emin=-DEC_MAX_MATH;
 24528              		.loc 1 5410 10 view .LVU6404
 24529 0066 0B49     		ldr	r1, .L1745+28
5411:src/xeq.c     **** 	Ctx.round = DEC_ROUND_HALF_EVEN;
 24530              		.loc 1 5411 10 view .LVU6405
 24531 0068 0B4A     		ldr	r2, .L1745+32
5409:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
 24532              		.loc 1 5409 13 view .LVU6406
 24533 006a 2360     		str	r3, [r4]
5410:src/xeq.c     **** 	Ctx.emin=-DEC_MAX_MATH;
 24534              		.loc 1 5410 2 is_stmt 1 view .LVU6407
5412:src/xeq.c     **** }
 24535              		.loc 1 5412 12 is_stmt 0 view .LVU6408
 24536 006c 0323     		movs	r3, #3
 24537 006e 2373     		strb	r3, [r4, #12]
5411:src/xeq.c     **** 	Ctx.round = DEC_ROUND_HALF_EVEN;
 24538              		.loc 1 5411 10 view .LVU6409
 24539 0070 C4E90112 		strd	r1, r2, [r4, #4]
5412:src/xeq.c     **** }
 24540              		.loc 1 5412 2 is_stmt 1 view .LVU6410
5413:src/xeq.c     **** 
 24541              		.loc 1 5413 1 is_stmt 0 view .LVU6411
 24542 0074 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 24543              	.L1746:
 24544 0076 00BF     		.align	2
 24545              	.L1745:
 24546 0078 00000000 		.word	main_ram
 24547 007c 00000000 		.word	RetStkSize
 24548 0080 00000000 		.word	SizeStatRegs
 24549 0084 00000000 		.word	RetStk
 24550 0088 00000000 		.word	ProgFree
 24551 008c 00000000 		.word	Ctx
 24552 0090 00000000 		.word	StackBase
 24553 0094 3F420F00 		.word	999999
 24554 0098 C1BDF0FF 		.word	-999999
 24555              		.cfi_endproc
 24556              	.LFE253:
 24558              		.section	.text.not_running,"ax",%progbits
 24559              		.align	1
 24560              		.p2align 2,,3
 24561              		.global	not_running
 24562              		.syntax unified
 24563              		.thumb
 24564              		.thumb_func
 24565              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cc0UaEmF.s 			page 633


 24567              	not_running:
 24568              	.LFB254:
5561:src/xeq.c     **** 	if ( Running ) {
 24569              		.loc 1 5561 23 is_stmt 1 view -0
 24570              		.cfi_startproc
 24571              		@ args = 0, pretend = 0, frame = 0
 24572              		@ frame_needed = 0, uses_anonymous_args = 0
 24573              		@ link register save eliminated.
5562:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 24574              		.loc 1 5562 2 view .LVU6413
5562:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 24575              		.loc 1 5562 7 is_stmt 0 view .LVU6414
 24576 0000 064B     		ldr	r3, .L1752
5562:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 24577              		.loc 1 5562 5 view .LVU6415
 24578 0002 1B68     		ldr	r3, [r3]
 24579 0004 0BB9     		cbnz	r3, .L1751
5566:src/xeq.c     **** }
 24580              		.loc 1 5566 9 view .LVU6416
 24581 0006 0120     		movs	r0, #1
 24582 0008 7047     		bx	lr
 24583              	.L1751:
5563:src/xeq.c     **** 		return 0;
 24584              		.loc 1 5563 3 is_stmt 1 view .LVU6417
 24585              	.LVL1913:
 24586              	.LBB3411:
 24587              	.LBI3411:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24588              		.loc 1 537 5 view .LVU6418
 24589              	.LBB3412:
 538:src/xeq.c     **** 		Error = e;
 24590              		.loc 1 538 2 view .LVU6419
 538:src/xeq.c     **** 		Error = e;
 24591              		.loc 1 538 12 is_stmt 0 view .LVU6420
 24592 000a 054B     		ldr	r3, .L1752+4
 24593 000c 1868     		ldr	r0, [r3]
 538:src/xeq.c     **** 		Error = e;
 24594              		.loc 1 538 5 view .LVU6421
 24595 000e 10B9     		cbnz	r0, .L1750
 24596              	.LVL1914:
 24597              	.LBB3413:
 24598              	.LBI3413:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24599              		.loc 1 537 5 is_stmt 1 view .LVU6422
 24600              	.LBB3414:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 24601              		.loc 1 539 3 view .LVU6423
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 24602              		.loc 1 539 9 is_stmt 0 view .LVU6424
 24603 0010 0722     		movs	r2, #7
 24604 0012 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 24605              		.loc 1 540 3 is_stmt 1 view .LVU6425
 24606 0014 7047     		bx	lr
 24607              	.LVL1915:
 24608              	.L1750:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
ARM GAS  /tmp/cc0UaEmF.s 			page 634


 24609              		.loc 1 540 3 is_stmt 0 view .LVU6426
 24610              	.LBE3414:
 24611              	.LBE3413:
 24612              	.LBE3412:
 24613              	.LBE3411:
5564:src/xeq.c     **** 	}
 24614              		.loc 1 5564 10 view .LVU6427
 24615 0016 0020     		movs	r0, #0
 24616              	.LVL1916:
5567:src/xeq.c     **** 
 24617              		.loc 1 5567 1 view .LVU6428
 24618 0018 7047     		bx	lr
 24619              	.L1753:
 24620 001a 00BF     		.align	2
 24621              	.L1752:
 24622 001c 00000000 		.word	Running
 24623 0020 00000000 		.word	Error
 24624              		.cfi_endproc
 24625              	.LFE254:
 24627              		.section	.text.set_running_off_sst,"ax",%progbits
 24628              		.align	1
 24629              		.p2align 2,,3
 24630              		.global	set_running_off_sst
 24631              		.syntax unified
 24632              		.thumb
 24633              		.thumb_func
 24634              		.fpu fpv4-sp-d16
 24636              	set_running_off_sst:
 24637              	.LFB255:
5572:src/xeq.c     **** 	Running = 0;
 24638              		.loc 1 5572 28 is_stmt 1 view -0
 24639              		.cfi_startproc
 24640              		@ args = 0, pretend = 0, frame = 0
 24641              		@ frame_needed = 0, uses_anonymous_args = 0
 24642              		@ link register save eliminated.
5573:src/xeq.c     **** }
 24643              		.loc 1 5573 2 view .LVU6430
5573:src/xeq.c     **** }
 24644              		.loc 1 5573 10 is_stmt 0 view .LVU6431
 24645 0000 014B     		ldr	r3, .L1755
 24646 0002 0022     		movs	r2, #0
 24647 0004 1A60     		str	r2, [r3]
5574:src/xeq.c     **** 
 24648              		.loc 1 5574 1 view .LVU6432
 24649 0006 7047     		bx	lr
 24650              	.L1756:
 24651              		.align	2
 24652              	.L1755:
 24653 0008 00000000 		.word	Running
 24654              		.cfi_endproc
 24655              	.LFE255:
 24657              		.section	.text.set_running_on_sst,"ax",%progbits
 24658              		.align	1
 24659              		.p2align 2,,3
 24660              		.global	set_running_on_sst
 24661              		.syntax unified
 24662              		.thumb
ARM GAS  /tmp/cc0UaEmF.s 			page 635


 24663              		.thumb_func
 24664              		.fpu fpv4-sp-d16
 24666              	set_running_on_sst:
 24667              	.LFB256:
5576:src/xeq.c     **** 	Running = 1;
 24668              		.loc 1 5576 27 is_stmt 1 view -0
 24669              		.cfi_startproc
 24670              		@ args = 0, pretend = 0, frame = 0
 24671              		@ frame_needed = 0, uses_anonymous_args = 0
 24672              		@ link register save eliminated.
5577:src/xeq.c     **** }
 24673              		.loc 1 5577 2 view .LVU6434
5577:src/xeq.c     **** }
 24674              		.loc 1 5577 10 is_stmt 0 view .LVU6435
 24675 0000 014B     		ldr	r3, .L1758
 24676 0002 0122     		movs	r2, #1
 24677 0004 1A60     		str	r2, [r3]
5578:src/xeq.c     **** 
 24678              		.loc 1 5578 1 view .LVU6436
 24679 0006 7047     		bx	lr
 24680              	.L1759:
 24681              		.align	2
 24682              	.L1758:
 24683 0008 00000000 		.word	Running
 24684              		.cfi_endproc
 24685              	.LFE256:
 24687              		.section	.text.set_running_off,"ax",%progbits
 24688              		.align	1
 24689              		.p2align 2,,3
 24690              		.global	set_running_off
 24691              		.syntax unified
 24692              		.thumb
 24693              		.thumb_func
 24694              		.fpu fpv4-sp-d16
 24696              	set_running_off:
 24697              	.LFB257:
5580:src/xeq.c     **** 	set_running_off_sst();
 24698              		.loc 1 5580 24 is_stmt 1 view -0
 24699              		.cfi_startproc
 24700              		@ args = 0, pretend = 0, frame = 0
 24701              		@ frame_needed = 0, uses_anonymous_args = 0
 24702              		@ link register save eliminated.
5581:src/xeq.c     **** 	State.entryp = 0;
 24703              		.loc 1 5581 2 view .LVU6438
 24704              	.LBB3415:
 24705              	.LBI3415:
5572:src/xeq.c     **** 	Running = 0;
 24706              		.loc 1 5572 6 view .LVU6439
 24707              	.LBB3416:
5573:src/xeq.c     **** }
 24708              		.loc 1 5573 2 view .LVU6440
 24709              	.LBE3416:
 24710              	.LBE3415:
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 24711              		.loc 1 5582 15 is_stmt 0 view .LVU6441
 24712 0000 064B     		ldr	r3, .L1761
 24713              	.LBB3419:
ARM GAS  /tmp/cc0UaEmF.s 			page 636


 24714              	.LBB3417:
5573:src/xeq.c     **** }
 24715              		.loc 1 5573 10 view .LVU6442
 24716 0002 074A     		ldr	r2, .L1761+4
 24717              	.LBE3417:
 24718              	.LBE3419:
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 24719              		.loc 1 5582 15 view .LVU6443
 24720 0004 1B68     		ldr	r3, [r3]
 24721              	.LBB3420:
 24722              	.LBB3418:
5573:src/xeq.c     **** }
 24723              		.loc 1 5573 10 view .LVU6444
 24724 0006 0021     		movs	r1, #0
 24725 0008 1160     		str	r1, [r2]
 24726              	.LBE3418:
 24727              	.LBE3420:
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 24728              		.loc 1 5582 2 is_stmt 1 view .LVU6445
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 24729              		.loc 1 5582 15 is_stmt 0 view .LVU6446
 24730 000a 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 24731 000e 61F30412 		bfi	r2, r1, #4, #1
 24732 0012 83F8DD27 		strb	r2, [r3, #2013]
 24733              		.loc 1 5583 2 is_stmt 1 view .LVU6447
 24734 0016 8A20     		movs	r0, #138
 24735 0018 FFF7FEBF 		b	dot
 24736              	.LVL1917:
 24737              	.L1762:
 24738              		.align	2
 24739              	.L1761:
 24740 001c 00000000 		.word	main_ram
 24741 0020 00000000 		.word	Running
 24742              		.cfi_endproc
 24743              	.LFE257:
 24745              		.section	.text.set_running_on,"ax",%progbits
 24746              		.align	1
 24747              		.p2align 2,,3
 24748              		.global	set_running_on
 24749              		.syntax unified
 24750              		.thumb
 24751              		.thumb_func
 24752              		.fpu fpv4-sp-d16
 24754              	set_running_on:
 24755              	.LFB258:
5584:src/xeq.c     **** }
5585:src/xeq.c     **** 
5586:src/xeq.c     **** void set_running_on() {
 24756              		.loc 1 5586 23 view -0
 24757              		.cfi_startproc
 24758              		@ args = 0, pretend = 0, frame = 0
 24759              		@ frame_needed = 0, uses_anonymous_args = 0
5587:src/xeq.c     **** 	update_speed(0);
 24760              		.loc 1 5587 17 view .LVU6449
5588:src/xeq.c     **** 	GoFast = 1;
 24761              		.loc 1 5588 2 view .LVU6450
5586:src/xeq.c     **** 	update_speed(0);
ARM GAS  /tmp/cc0UaEmF.s 			page 637


 24762              		.loc 1 5586 23 is_stmt 0 view .LVU6451
 24763 0000 38B5     		push	{r3, r4, r5, lr}
 24764              		.cfi_def_cfa_offset 16
 24765              		.cfi_offset 3, -16
 24766              		.cfi_offset 4, -12
 24767              		.cfi_offset 5, -8
 24768              		.cfi_offset 14, -4
 24769              	.LBB3421:
 24770              	.LBB3422:
 183:src/xeq.c     **** }
 24771              		.loc 1 183 9 view .LVU6452
 24772 0002 0C4B     		ldr	r3, .L1769
 24773              	.LBE3422:
 24774              	.LBE3421:
 24775              		.loc 1 5588 9 view .LVU6453
 24776 0004 0C4D     		ldr	r5, .L1769+4
 24777              	.LBB3426:
 24778              	.LBB3423:
 183:src/xeq.c     **** }
 24779              		.loc 1 183 9 view .LVU6454
 24780 0006 1B68     		ldr	r3, [r3]
 24781              	.LBE3423:
 24782              	.LBE3426:
 24783              	.LBB3427:
 24784              	.LBB3428:
5577:src/xeq.c     **** }
 24785              		.loc 1 5577 10 view .LVU6455
 24786 0008 0C4C     		ldr	r4, .L1769+8
 24787              	.LBE3428:
 24788              	.LBE3427:
 24789              	.LBB3430:
 24790              	.LBB3424:
 183:src/xeq.c     **** }
 24791              		.loc 1 183 9 view .LVU6456
 24792 000a B3F8E037 		ldrh	r3, [r3, #2016]
 24793              	.LBE3424:
 24794              	.LBE3430:
5589:src/xeq.c     **** 	set_running_on_sst();
5590:src/xeq.c     **** 	LastKey = 0;
 24795              		.loc 1 5590 10 view .LVU6457
 24796 000e 0C49     		ldr	r1, .L1769+12
5591:src/xeq.c     **** 	if (!is_xrom())
 24797              		.loc 1 5591 5 view .LVU6458
 24798 0010 9B0B     		lsrs	r3, r3, #14
5588:src/xeq.c     **** 	set_running_on_sst();
 24799              		.loc 1 5588 9 view .LVU6459
 24800 0012 0122     		movs	r2, #1
5590:src/xeq.c     **** 	if (!is_xrom())
 24801              		.loc 1 5590 10 view .LVU6460
 24802 0014 0020     		movs	r0, #0
 24803              		.loc 1 5591 5 view .LVU6461
 24804 0016 032B     		cmp	r3, #3
5588:src/xeq.c     **** 	set_running_on_sst();
 24805              		.loc 1 5588 9 view .LVU6462
 24806 0018 2A60     		str	r2, [r5]
5589:src/xeq.c     **** 	LastKey = 0;
 24807              		.loc 1 5589 2 is_stmt 1 view .LVU6463
ARM GAS  /tmp/cc0UaEmF.s 			page 638


 24808              	.LBB3431:
 24809              	.LBI3427:
5576:src/xeq.c     **** 	Running = 1;
 24810              		.loc 1 5576 6 view .LVU6464
 24811              	.LBB3429:
5577:src/xeq.c     **** }
 24812              		.loc 1 5577 2 view .LVU6465
5577:src/xeq.c     **** }
 24813              		.loc 1 5577 10 is_stmt 0 view .LVU6466
 24814 001a 2260     		str	r2, [r4]
 24815              	.LBE3429:
 24816              	.LBE3431:
5590:src/xeq.c     **** 	if (!is_xrom())
 24817              		.loc 1 5590 2 is_stmt 1 view .LVU6467
5590:src/xeq.c     **** 	if (!is_xrom())
 24818              		.loc 1 5590 10 is_stmt 0 view .LVU6468
 24819 001c C874     		strb	r0, [r1, #19]
 24820              		.loc 1 5591 2 is_stmt 1 view .LVU6469
 24821              	.LBB3432:
 24822              	.LBI3421:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 24823              		.loc 1 182 5 view .LVU6470
 24824              	.LBB3425:
 183:src/xeq.c     **** }
 24825              		.loc 1 183 2 view .LVU6471
 24826              	.LBE3425:
 24827              	.LBE3432:
 24828              		.loc 1 5591 5 is_stmt 0 view .LVU6472
 24829 001e 01D0     		beq	.L1764
5592:src/xeq.c     **** 		error_message(ERR_NONE);
 24830              		.loc 1 5592 3 is_stmt 1 view .LVU6473
 24831 0020 FFF7FEFF 		bl	error_message
 24832              	.LVL1918:
 24833              	.L1764:
5593:src/xeq.c     **** 	dot(BEG, 0);
 24834              		.loc 1 5593 2 view .LVU6474
 24835 0024 0021     		movs	r1, #0
 24836 0026 8820     		movs	r0, #136
 24837 0028 FFF7FEFF 		bl	dot
 24838              	.LVL1919:
5594:src/xeq.c     **** 	finish_display(); // BEG
 24839              		.loc 1 5594 2 view .LVU6475
5595:src/xeq.c     **** }
 24840              		.loc 1 5595 1 is_stmt 0 view .LVU6476
 24841 002c BDE83840 		pop	{r3, r4, r5, lr}
 24842              		.cfi_restore 14
 24843              		.cfi_restore 5
 24844              		.cfi_restore 4
 24845              		.cfi_restore 3
 24846              		.cfi_def_cfa_offset 0
5594:src/xeq.c     **** 	finish_display(); // BEG
 24847              		.loc 1 5594 2 view .LVU6477
 24848 0030 FFF7FEBF 		b	finish_display
 24849              	.LVL1920:
 24850              	.L1770:
 24851              		.align	2
 24852              	.L1769:
ARM GAS  /tmp/cc0UaEmF.s 			page 639


 24853 0034 00000000 		.word	main_ram
 24854 0038 00000000 		.word	GoFast
 24855 003c 00000000 		.word	Running
 24856 0040 00000000 		.word	StateWhileOn
 24857              		.cfi_endproc
 24858              	.LFE258:
 24860              		.section	.text.gsbgto,"ax",%progbits
 24861              		.align	1
 24862              		.p2align 2,,3
 24863              		.syntax unified
 24864              		.thumb
 24865              		.thumb_func
 24866              		.fpu fpv4-sp-d16
 24868              	gsbgto:
 24869              	.LVL1921:
 24870              	.LFB149:
2016:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 24871              		.loc 1 2016 66 is_stmt 1 view -0
 24872              		.cfi_startproc
 24873              		@ args = 0, pretend = 0, frame = 0
 24874              		@ frame_needed = 0, uses_anonymous_args = 0
2017:src/xeq.c     **** 	raw_set_pc(pc);
 24875              		.loc 1 2017 2 view .LVU6479
2016:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 24876              		.loc 1 2016 66 is_stmt 0 view .LVU6480
 24877 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 24878              		.cfi_def_cfa_offset 24
 24879              		.cfi_offset 4, -24
 24880              		.cfi_offset 5, -20
 24881              		.cfi_offset 6, -16
 24882              		.cfi_offset 7, -12
 24883              		.cfi_offset 8, -8
 24884              		.cfi_offset 14, -4
2017:src/xeq.c     **** 	raw_set_pc(pc);
 24885              		.loc 1 2017 39 view .LVU6481
 24886 0004 214F     		ldr	r7, .L1782
 24887 0006 3B68     		ldr	r3, [r7]
2016:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 24888              		.loc 1 2016 66 view .LVU6482
 24889 0008 0446     		mov	r4, r0
 24890 000a 0D46     		mov	r5, r1
 24891              	.LBB3441:
 24892              	.LBB3442:
 280:src/xeq.c     **** 	update_program_bounds(0);
 24893              		.loc 1 280 11 view .LVU6483
 24894 000c A3F8E007 		strh	r0, [r3, #2016]	@ movhi
 281:src/xeq.c     **** }
 24895              		.loc 1 281 2 view .LVU6484
 24896 0010 0020     		movs	r0, #0
 24897              	.LVL1922:
 281:src/xeq.c     **** }
 24898              		.loc 1 281 2 view .LVU6485
 24899              	.LBE3442:
 24900              	.LBE3441:
2017:src/xeq.c     **** 	raw_set_pc(pc);
 24901              		.loc 1 2017 27 view .LVU6486
 24902 0012 B3F8EC87 		ldrh	r8, [r3, #2028]
ARM GAS  /tmp/cc0UaEmF.s 			page 640


 24903              	.LVL1923:
2018:src/xeq.c     **** 	if (gsb) {
 24904              		.loc 1 2018 2 is_stmt 1 view .LVU6487
 24905              	.LBB3445:
 24906              	.LBI3441:
 279:src/xeq.c     **** 	State.pc = pc;
 24907              		.loc 1 279 13 view .LVU6488
 24908              	.LBB3443:
 280:src/xeq.c     **** 	update_program_bounds(0);
 24909              		.loc 1 280 2 view .LVU6489
 281:src/xeq.c     **** }
 24910              		.loc 1 281 2 view .LVU6490
 24911              	.LBE3443:
 24912              	.LBE3445:
2016:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 24913              		.loc 1 2016 66 is_stmt 0 view .LVU6491
 24914 0016 1646     		mov	r6, r2
 24915              	.LBB3446:
 24916              	.LBB3444:
 281:src/xeq.c     **** }
 24917              		.loc 1 281 2 view .LVU6492
 24918 0018 FFF7FEFF 		bl	update_program_bounds
 24919              	.LVL1924:
 281:src/xeq.c     **** }
 24920              		.loc 1 281 2 view .LVU6493
 24921              	.LBE3444:
 24922              	.LBE3446:
2019:src/xeq.c     **** 		if (!Running && !XromRunning) {
 24923              		.loc 1 2019 2 is_stmt 1 view .LVU6494
2019:src/xeq.c     **** 		if (!Running && !XromRunning) {
 24924              		.loc 1 2019 5 is_stmt 0 view .LVU6495
 24925 001c D5B1     		cbz	r5, .L1771
2020:src/xeq.c     **** 			// XEQ or hot key from keyboard
 24926              		.loc 1 2020 3 is_stmt 1 view .LVU6496
2020:src/xeq.c     **** 			// XEQ or hot key from keyboard
 24927              		.loc 1 2020 7 is_stmt 0 view .LVU6497
 24928 001e 1C4B     		ldr	r3, .L1782+4
2020:src/xeq.c     **** 			// XEQ or hot key from keyboard
 24929              		.loc 1 2020 19 view .LVU6498
 24930 0020 1C4A     		ldr	r2, .L1782+8
2020:src/xeq.c     **** 			// XEQ or hot key from keyboard
 24931              		.loc 1 2020 16 view .LVU6499
 24932 0022 1B68     		ldr	r3, [r3]
 24933 0024 1268     		ldr	r2, [r2]
 24934 0026 1343     		orrs	r3, r3, r2
 24935              	.LBB3447:
 24936              	.LBB3448:
1410:src/xeq.c     **** }
 24937              		.loc 1 1410 14 view .LVU6500
 24938 0028 3A68     		ldr	r2, [r7]
 24939              	.LBE3448:
 24940              	.LBE3447:
2020:src/xeq.c     **** 			// XEQ or hot key from keyboard
 24941              		.loc 1 2020 16 view .LVU6501
 24942 002a 1FD0     		beq	.L1774
 24943              	.LVL1925:
 24944              	.L1775:
ARM GAS  /tmp/cc0UaEmF.s 			page 641


2028:src/xeq.c     **** 			// Stack is full
 24945              		.loc 1 2028 3 is_stmt 1 view .LVU6502
2028:src/xeq.c     **** 			// Stack is full
 24946              		.loc 1 2028 36 is_stmt 0 view .LVU6503
 24947 002c 1A49     		ldr	r1, .L1782+12
2028:src/xeq.c     **** 			// Stack is full
 24948              		.loc 1 2028 8 view .LVU6504
 24949 002e B2F9E237 		ldrsh	r3, [r2, #2018]
2028:src/xeq.c     **** 			// Stack is full
 24950              		.loc 1 2028 58 view .LVU6505
 24951 0032 91F90110 		ldrsb	r1, [r1, #1]
 24952 0036 0029     		cmp	r1, #0
 24953 0038 A4BF     		itt	ge
 24954 003a 1849     		ldrge	r1, .L1782+16
 24955 003c 0968     		ldrge	r1, [r1]
2028:src/xeq.c     **** 			// Stack is full
 24956              		.loc 1 2028 7 view .LVU6506
 24957 003e C3F10000 		rsb	r0, r3, #0
2028:src/xeq.c     **** 			// Stack is full
 24958              		.loc 1 2028 58 view .LVU6507
 24959 0042 B8BF     		it	lt
 24960 0044 8821     		movlt	r1, #136
2028:src/xeq.c     **** 			// Stack is full
 24961              		.loc 1 2028 6 view .LVU6508
 24962 0046 8842     		cmp	r0, r1
 24963 0048 06DB     		blt	.L1778
2030:src/xeq.c     **** 			// clrretstk();
 24964              		.loc 1 2030 4 is_stmt 1 view .LVU6509
 24965              	.LVL1926:
 24966              	.LBB3450:
 24967              	.LBI3450:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24968              		.loc 1 537 5 view .LVU6510
 24969              	.LBB3451:
 538:src/xeq.c     **** 		Error = e;
 24970              		.loc 1 538 2 view .LVU6511
 538:src/xeq.c     **** 		Error = e;
 24971              		.loc 1 538 12 is_stmt 0 view .LVU6512
 24972 004a 154B     		ldr	r3, .L1782+20
 538:src/xeq.c     **** 		Error = e;
 24973              		.loc 1 538 5 view .LVU6513
 24974 004c 1A68     		ldr	r2, [r3]
 24975 004e 0AB9     		cbnz	r2, .L1771
 24976              	.LVL1927:
 24977              	.LBB3452:
 24978              	.LBI3452:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24979              		.loc 1 537 5 is_stmt 1 view .LVU6514
 24980              	.LBB3453:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 24981              		.loc 1 539 3 view .LVU6515
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 24982              		.loc 1 539 9 is_stmt 0 view .LVU6516
 24983 0050 0B22     		movs	r2, #11
 24984 0052 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 24985              		.loc 1 540 3 is_stmt 1 view .LVU6517
ARM GAS  /tmp/cc0UaEmF.s 			page 642


 24986              	.LVL1928:
 24987              	.L1771:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 24988              		.loc 1 540 3 is_stmt 0 view .LVU6518
 24989              	.LBE3453:
 24990              	.LBE3452:
 24991              	.LBE3451:
 24992              	.LBE3450:
2038:src/xeq.c     **** 
 24993              		.loc 1 2038 1 view .LVU6519
 24994 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 24995              	.LVL1929:
 24996              	.L1778:
2035:src/xeq.c     **** 		}
 24997              		.loc 1 2035 4 is_stmt 1 view .LVU6520
2035:src/xeq.c     **** 		}
 24998              		.loc 1 2035 10 is_stmt 0 view .LVU6521
 24999 0058 1249     		ldr	r1, .L1782+24
2035:src/xeq.c     **** 		}
 25000              		.loc 1 2035 11 view .LVU6522
 25001 005a 013B     		subs	r3, r3, #1
 25002 005c 1BB2     		sxth	r3, r3
2035:src/xeq.c     **** 		}
 25003              		.loc 1 2035 10 view .LVU6523
 25004 005e 0968     		ldr	r1, [r1]
2035:src/xeq.c     **** 		}
 25005              		.loc 1 2035 24 view .LVU6524
 25006 0060 A2F8E237 		strh	r3, [r2, #2018]	@ movhi
 25007 0064 21F81360 		strh	r6, [r1, r3, lsl #1]	@ movhi
2038:src/xeq.c     **** 
 25008              		.loc 1 2038 1 view .LVU6525
 25009 0068 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25010              	.LVL1930:
 25011              	.L1774:
2022:src/xeq.c     **** 			set_running_on();
 25012              		.loc 1 2022 4 is_stmt 1 view .LVU6526
 25013              	.LBB3454:
 25014              	.LBI3447:
1409:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 25015              		.loc 1 1409 6 view .LVU6527
 25016              	.LBB3449:
1410:src/xeq.c     **** }
 25017              		.loc 1 1410 2 view .LVU6528
1410:src/xeq.c     **** }
 25018              		.loc 1 1410 24 is_stmt 0 view .LVU6529
 25019 006c A2F8DE37 		strh	r3, [r2, #2014]	@ movhi
1410:src/xeq.c     **** }
 25020              		.loc 1 1410 12 view .LVU6530
 25021 0070 A2F8E237 		strh	r3, [r2, #2018]	@ movhi
 25022              	.LBE3449:
 25023              	.LBE3454:
2023:src/xeq.c     **** 			if (! isXROM(pc) && ProgBegin != old_begin)
 25024              		.loc 1 2023 4 is_stmt 1 view .LVU6531
 25025 0074 FFF7FEFF 		bl	set_running_on
 25026              	.LVL1931:
2024:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25027              		.loc 1 2024 4 view .LVU6532
ARM GAS  /tmp/cc0UaEmF.s 			page 643


2024:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25028              		.loc 1 2024 10 is_stmt 0 view .LVU6533
 25029 0078 A30B     		lsrs	r3, r4, #14
2024:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25030              		.loc 1 2024 7 view .LVU6534
 25031 007a 032B     		cmp	r3, #3
2024:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25032              		.loc 1 2024 24 view .LVU6535
 25033 007c 3A68     		ldr	r2, [r7]
2024:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25034              		.loc 1 2024 7 view .LVU6536
 25035 007e D5D0     		beq	.L1775
2024:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25036              		.loc 1 2024 21 discriminator 1 view .LVU6537
 25037 0080 B2F8EC37 		ldrh	r3, [r2, #2028]
 25038 0084 4345     		cmp	r3, r8
 25039 0086 18BF     		it	ne
 25040 0088 2646     		movne	r6, r4
 25041              	.LVL1932:
2024:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25042              		.loc 1 2024 21 discriminator 1 view .LVU6538
 25043 008a CFE7     		b	.L1775
 25044              	.L1783:
 25045              		.align	2
 25046              	.L1782:
 25047 008c 00000000 		.word	main_ram
 25048 0090 00000000 		.word	Running
 25049 0094 00000000 		.word	XromRunning
 25050 0098 00000000 		.word	XromParams
 25051 009c 00000000 		.word	RetStkSize
 25052 00a0 00000000 		.word	Error
 25053 00a4 00000000 		.word	RetStk
 25054              		.cfi_endproc
 25055              	.LFE149:
 25057              		.section	.text.cmdgtocommon,"ax",%progbits
 25058              		.align	1
 25059              		.p2align 2,,3
 25060              		.global	cmdgtocommon
 25061              		.syntax unified
 25062              		.thumb
 25063              		.thumb_func
 25064              		.fpu fpv4-sp-d16
 25066              	cmdgtocommon:
 25067              	.LVL1933:
 25068              	.LFB152:
2078:src/xeq.c     **** 	if (pc == 0)
 25069              		.loc 1 2078 45 is_stmt 1 view -0
 25070              		.cfi_startproc
 25071              		@ args = 0, pretend = 0, frame = 0
 25072              		@ frame_needed = 0, uses_anonymous_args = 0
 25073              		@ link register save eliminated.
2079:src/xeq.c     **** 		set_running_off();
 25074              		.loc 1 2079 2 view .LVU6540
 25075              	.LBB3461:
 25076              	.LBB3462:
 25077              	.LBB3463:
 25078              	.LBB3464:
ARM GAS  /tmp/cc0UaEmF.s 			page 644


5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 25079              		.loc 1 5582 15 is_stmt 0 view .LVU6541
 25080 0000 0A4A     		ldr	r2, .L1786
 25081              	.LBE3464:
 25082              	.LBE3463:
 25083              	.LBE3462:
 25084              	.LBE3461:
2079:src/xeq.c     **** 		set_running_off();
 25085              		.loc 1 2079 5 view .LVU6542
 25086 0002 0B46     		mov	r3, r1
 25087 0004 59B9     		cbnz	r1, .L1785
 25088              	.LBB3472:
 25089              	.LBI3461:
2078:src/xeq.c     **** 	if (pc == 0)
 25090              		.loc 1 2078 6 is_stmt 1 view .LVU6543
 25091              	.LVL1934:
 25092              	.LBB3471:
2080:src/xeq.c     **** 	else
 25093              		.loc 1 2080 3 view .LVU6544
 25094              	.LBB3470:
 25095              	.LBI3463:
5580:src/xeq.c     **** 	set_running_off_sst();
 25096              		.loc 1 5580 6 view .LVU6545
 25097              	.LBB3469:
5581:src/xeq.c     **** 	State.entryp = 0;
 25098              		.loc 1 5581 2 view .LVU6546
 25099              	.LBB3465:
 25100              	.LBI3465:
5572:src/xeq.c     **** 	Running = 0;
 25101              		.loc 1 5572 6 view .LVU6547
 25102              	.LBB3466:
5573:src/xeq.c     **** }
 25103              		.loc 1 5573 2 view .LVU6548
5573:src/xeq.c     **** }
 25104              		.loc 1 5573 10 is_stmt 0 view .LVU6549
 25105 0006 0A48     		ldr	r0, .L1786+4
 25106              	.LVL1935:
5573:src/xeq.c     **** }
 25107              		.loc 1 5573 10 view .LVU6550
 25108              	.LBE3466:
 25109              	.LBE3465:
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 25110              		.loc 1 5582 15 view .LVU6551
 25111 0008 1268     		ldr	r2, [r2]
 25112              	.LBB3468:
 25113              	.LBB3467:
5573:src/xeq.c     **** }
 25114              		.loc 1 5573 10 view .LVU6552
 25115 000a 0160     		str	r1, [r0]
 25116              	.LBE3467:
 25117              	.LBE3468:
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 25118              		.loc 1 5582 2 is_stmt 1 view .LVU6553
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 25119              		.loc 1 5582 15 is_stmt 0 view .LVU6554
 25120 000c 92F8DD07 		ldrb	r0, [r2, #2013]	@ zero_extendqisi2
 25121 0010 61F30410 		bfi	r0, r1, #4, #1
ARM GAS  /tmp/cc0UaEmF.s 			page 645


 25122              	.LVL1936:
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 25123              		.loc 1 5582 15 view .LVU6555
 25124 0014 82F8DD07 		strb	r0, [r2, #2013]
5583:src/xeq.c     **** }
 25125              		.loc 1 5583 2 is_stmt 1 view .LVU6556
 25126 0018 8A20     		movs	r0, #138
 25127 001a FFF7FEBF 		b	dot
 25128              	.LVL1937:
 25129              	.L1785:
5583:src/xeq.c     **** }
 25130              		.loc 1 5583 2 is_stmt 0 view .LVU6557
 25131              	.LBE3469:
 25132              	.LBE3470:
 25133              	.LBE3471:
 25134              	.LBE3472:
2082:src/xeq.c     **** }
 25135              		.loc 1 2082 3 is_stmt 1 view .LVU6558
2082:src/xeq.c     **** }
 25136              		.loc 1 2082 19 is_stmt 0 view .LVU6559
 25137 001e 1268     		ldr	r2, [r2]
2082:src/xeq.c     **** }
 25138              		.loc 1 2082 3 view .LVU6560
 25139 0020 0146     		mov	r1, r0
 25140              	.LVL1938:
2082:src/xeq.c     **** }
 25141              		.loc 1 2082 3 view .LVU6561
 25142 0022 B2F8E027 		ldrh	r2, [r2, #2016]
 25143 0026 1846     		mov	r0, r3
 25144              	.LVL1939:
2082:src/xeq.c     **** }
 25145              		.loc 1 2082 3 view .LVU6562
 25146 0028 FFF7FEBF 		b	gsbgto
 25147              	.LVL1940:
 25148              	.L1787:
2082:src/xeq.c     **** }
 25149              		.loc 1 2082 3 view .LVU6563
 25150              		.align	2
 25151              	.L1786:
 25152 002c 00000000 		.word	main_ram
 25153 0030 00000000 		.word	Running
 25154              		.cfi_endproc
 25155              	.LFE152:
 25157              		.section	.text.cmdgto,"ax",%progbits
 25158              		.align	1
 25159              		.p2align 2,,3
 25160              		.global	cmdgto
 25161              		.syntax unified
 25162              		.thumb
 25163              		.thumb_func
 25164              		.fpu fpv4-sp-d16
 25166              	cmdgto:
 25167              	.LVL1941:
 25168              	.LFB158:
2138:src/xeq.c     **** 	unsigned int lbl;
 25169              		.loc 1 2138 45 is_stmt 1 view -0
 25170              		.cfi_startproc
ARM GAS  /tmp/cc0UaEmF.s 			page 646


 25171              		@ args = 0, pretend = 0, frame = 0
 25172              		@ frame_needed = 0, uses_anonymous_args = 0
2139:src/xeq.c     **** 	if (is_xrom())
 25173              		.loc 1 2139 2 view .LVU6565
2140:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
 25174              		.loc 1 2140 2 view .LVU6566
 25175              	.LBB3473:
 25176              	.LBI3473:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 25177              		.loc 1 182 5 view .LVU6567
 25178              	.LBB3474:
 183:src/xeq.c     **** }
 25179              		.loc 1 183 2 view .LVU6568
 183:src/xeq.c     **** }
 25180              		.loc 1 183 9 is_stmt 0 view .LVU6569
 25181 0000 0E4B     		ldr	r3, .L1792
 25182 0002 1B68     		ldr	r3, [r3]
 25183 0004 B3F8E037 		ldrh	r3, [r3, #2016]
 25184              	.LBE3474:
 25185              	.LBE3473:
2140:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
 25186              		.loc 1 2140 5 view .LVU6570
 25187 0008 9A0B     		lsrs	r2, r3, #14
 25188 000a 032A     		cmp	r2, #3
2138:src/xeq.c     **** 	unsigned int lbl;
 25189              		.loc 1 2138 45 view .LVU6571
 25190 000c 10B5     		push	{r4, lr}
 25191              		.cfi_def_cfa_offset 8
 25192              		.cfi_offset 4, -8
 25193              		.cfi_offset 14, -4
2138:src/xeq.c     **** 	unsigned int lbl;
 25194              		.loc 1 2138 45 view .LVU6572
 25195 000e 0C46     		mov	r4, r1
2140:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
 25196              		.loc 1 2140 5 view .LVU6573
 25197 0010 0CD1     		bne	.L1789
2141:src/xeq.c     **** 	else
 25198              		.loc 1 2141 3 is_stmt 1 view .LVU6574
2141:src/xeq.c     **** 	else
 25199              		.loc 1 2141 9 is_stmt 0 view .LVU6575
 25200 0012 0B4B     		ldr	r3, .L1792+4
2141:src/xeq.c     **** 	else
 25201              		.loc 1 2141 37 view .LVU6576
 25202 0014 33F81010 		ldrh	r1, [r3, r0, lsl #1]
 25203              	.LVL1942:
2141:src/xeq.c     **** 	else
 25204              		.loc 1 2141 7 view .LVU6577
 25205 0018 41F44041 		orr	r1, r1, #49152
 25206              	.LVL1943:
 25207              	.L1790:
2144:src/xeq.c     **** }
 25208              		.loc 1 2144 2 is_stmt 1 view .LVU6578
 25209 001c B4F14500 		subs	r0, r4, #69
 25210 0020 18BF     		it	ne
 25211 0022 0120     		movne	r0, #1
2145:src/xeq.c     **** 
 25212              		.loc 1 2145 1 is_stmt 0 view .LVU6579
ARM GAS  /tmp/cc0UaEmF.s 			page 647


 25213 0024 BDE81040 		pop	{r4, lr}
 25214              		.cfi_remember_state
 25215              		.cfi_restore 14
 25216              		.cfi_restore 4
 25217              		.cfi_def_cfa_offset 0
2144:src/xeq.c     **** }
 25218              		.loc 1 2144 2 view .LVU6580
 25219 0028 FFF7FEBF 		b	cmdgtocommon
 25220              	.LVL1944:
 25221              	.L1789:
 25222              		.cfi_restore_state
2143:src/xeq.c     **** 	cmdgtocommon(op != RARG_GTO, lbl);
 25223              		.loc 1 2143 3 is_stmt 1 view .LVU6581
 25224              	.LBB3475:
 25225              	.LBI3475:
2008:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 25226              		.loc 1 2008 14 view .LVU6582
 25227              	.LBB3476:
2009:src/xeq.c     **** }
 25228              		.loc 1 2009 2 view .LVU6583
2009:src/xeq.c     **** }
 25229              		.loc 1 2009 9 is_stmt 0 view .LVU6584
 25230 002c 40F4C441 		orr	r1, r0, #25088
 25231              	.LVL1945:
2009:src/xeq.c     **** }
 25232              		.loc 1 2009 9 view .LVU6585
 25233 0030 0322     		movs	r2, #3
 25234 0032 1846     		mov	r0, r3
 25235              	.LVL1946:
2009:src/xeq.c     **** }
 25236              		.loc 1 2009 9 view .LVU6586
 25237 0034 FFF7FEFF 		bl	find_opcode_from
 25238              	.LVL1947:
2009:src/xeq.c     **** }
 25239              		.loc 1 2009 9 view .LVU6587
 25240 0038 0146     		mov	r1, r0
 25241              	.LVL1948:
2009:src/xeq.c     **** }
 25242              		.loc 1 2009 9 view .LVU6588
 25243 003a EFE7     		b	.L1790
 25244              	.L1793:
 25245              		.align	2
 25246              	.L1792:
 25247 003c 00000000 		.word	main_ram
 25248 0040 00000000 		.word	.LANCHOR6
 25249              	.LBE3476:
 25250              	.LBE3475:
 25251              		.cfi_endproc
 25252              	.LFE158:
 25254              		.section	.text.branchtoalpha,"ax",%progbits
 25255              		.align	1
 25256              		.p2align 2,,3
 25257              		.syntax unified
 25258              		.thumb
 25259              		.thumb_func
 25260              		.fpu fpv4-sp-d16
 25262              	branchtoalpha:
ARM GAS  /tmp/cc0UaEmF.s 			page 648


 25263              	.LVL1949:
 25264              	.LFB162:
2180:src/xeq.c     **** 	unsigned int op;
 25265              		.loc 1 2180 51 is_stmt 1 view -0
 25266              		.cfi_startproc
 25267              		@ args = 0, pretend = 0, frame = 0
 25268              		@ frame_needed = 0, uses_anonymous_args = 0
2181:src/xeq.c     **** 
 25269              		.loc 1 2181 2 view .LVU6590
2183:src/xeq.c     **** 	op |= buf[0] & 0xff;
 25270              		.loc 1 2183 2 view .LVU6591
2184:src/xeq.c     **** 	op |= (buf[1] & 0xff) << 16;
 25271              		.loc 1 2184 2 view .LVU6592
2185:src/xeq.c     **** 	op |= (buf[2] & 0xff) << 24;
 25272              		.loc 1 2185 2 view .LVU6593
2186:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 25273              		.loc 1 2186 2 view .LVU6594
2187:src/xeq.c     **** }
 25274              		.loc 1 2187 2 view .LVU6595
2180:src/xeq.c     **** 	unsigned int op;
 25275              		.loc 1 2180 51 is_stmt 0 view .LVU6596
 25276 0000 10B5     		push	{r4, lr}
 25277              		.cfi_def_cfa_offset 8
 25278              		.cfi_offset 4, -8
 25279              		.cfi_offset 14, -4
2186:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 25280              		.loc 1 2186 16 view .LVU6597
 25281 0002 8B78     		ldrb	r3, [r1, #2]	@ zero_extendqisi2
2185:src/xeq.c     **** 	op |= (buf[2] & 0xff) << 24;
 25282              		.loc 1 2185 16 view .LVU6598
 25283 0004 4C78     		ldrb	r4, [r1, #1]	@ zero_extendqisi2
2184:src/xeq.c     **** 	op |= (buf[1] & 0xff) << 16;
 25284              		.loc 1 2184 15 view .LVU6599
 25285 0006 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
2186:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 25286              		.loc 1 2186 24 view .LVU6600
 25287 0008 1B06     		lsls	r3, r3, #24
2186:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 25288              		.loc 1 2186 5 view .LVU6601
 25289 000a 43EA0443 		orr	r3, r3, r4, lsl #16
 25290 000e 1343     		orrs	r3, r3, r2
2180:src/xeq.c     **** 	unsigned int op;
 25291              		.loc 1 2180 51 view .LVU6602
 25292 0010 0446     		mov	r4, r0
2187:src/xeq.c     **** }
 25293              		.loc 1 2187 2 view .LVU6603
 25294 0012 0121     		movs	r1, #1
 25295              	.LVL1950:
2187:src/xeq.c     **** }
 25296              		.loc 1 2187 2 view .LVU6604
 25297 0014 43F47040 		orr	r0, r3, #61440
 25298              	.LVL1951:
2187:src/xeq.c     **** }
 25299              		.loc 1 2187 2 view .LVU6605
 25300 0018 FFF7FEFF 		bl	findmultilbl
 25301              	.LVL1952:
2187:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 649


 25302              		.loc 1 2187 2 view .LVU6606
 25303 001c 0146     		mov	r1, r0
 25304 001e 2046     		mov	r0, r4
2188:src/xeq.c     **** 
 25305              		.loc 1 2188 1 view .LVU6607
 25306 0020 BDE81040 		pop	{r4, lr}
 25307              		.cfi_restore 14
 25308              		.cfi_restore 4
 25309              		.cfi_def_cfa_offset 0
 25310              	.LVL1953:
2187:src/xeq.c     **** }
 25311              		.loc 1 2187 2 view .LVU6608
 25312 0024 FFF7FEBF 		b	cmdgtocommon
 25313              	.LVL1954:
2187:src/xeq.c     **** }
 25314              		.loc 1 2187 2 view .LVU6609
 25315              		.cfi_endproc
 25316              	.LFE162:
 25318              		.section	.text.cmdalphagto,"ax",%progbits
 25319              		.align	1
 25320              		.p2align 2,,3
 25321              		.global	cmdalphagto
 25322              		.syntax unified
 25323              		.thumb
 25324              		.thumb_func
 25325              		.fpu fpv4-sp-d16
 25327              	cmdalphagto:
 25328              	.LVL1955:
 25329              	.LFB163:
2190:src/xeq.c     **** 	char buf[14];
 25330              		.loc 1 2190 50 is_stmt 1 view -0
 25331              		.cfi_startproc
 25332              		@ args = 0, pretend = 0, frame = 16
 25333              		@ frame_needed = 0, uses_anonymous_args = 0
2191:src/xeq.c     **** 
 25334              		.loc 1 2191 2 view .LVU6611
2193:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 25335              		.loc 1 2193 2 view .LVU6612
2190:src/xeq.c     **** 	char buf[14];
 25336              		.loc 1 2190 50 is_stmt 0 view .LVU6613
 25337 0000 30B5     		push	{r4, r5, lr}
 25338              		.cfi_def_cfa_offset 12
 25339              		.cfi_offset 4, -12
 25340              		.cfi_offset 5, -8
 25341              		.cfi_offset 14, -4
 25342 0002 85B0     		sub	sp, sp, #20
 25343              		.cfi_def_cfa_offset 32
2193:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 25344              		.loc 1 2193 2 view .LVU6614
 25345 0004 0E22     		movs	r2, #14
2190:src/xeq.c     **** 	char buf[14];
 25346              		.loc 1 2190 50 view .LVU6615
 25347 0006 0546     		mov	r5, r0
 25348 0008 0C46     		mov	r4, r1
2193:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 25349              		.loc 1 2193 2 view .LVU6616
 25350 000a 6846     		mov	r0, sp
ARM GAS  /tmp/cc0UaEmF.s 			page 650


 25351              	.LVL1956:
2193:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 25352              		.loc 1 2193 2 view .LVU6617
 25353 000c 0021     		movs	r1, #0
 25354              	.LVL1957:
2193:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 25355              		.loc 1 2193 2 view .LVU6618
 25356 000e FFF7FEFF 		bl	xset
 25357              	.LVL1958:
2194:src/xeq.c     **** }
 25358              		.loc 1 2194 2 is_stmt 1 view .LVU6619
 25359 0012 6946     		mov	r1, sp
 25360 0014 2846     		mov	r0, r5
 25361 0016 FFF7FEFF 		bl	alpha_rcl_s
 25362              	.LVL1959:
 25363 001a 0146     		mov	r1, r0
 25364 001c B4F17000 		subs	r0, r4, #112
 25365 0020 18BF     		it	ne
 25366 0022 0120     		movne	r0, #1
 25367 0024 FFF7FEFF 		bl	branchtoalpha
 25368              	.LVL1960:
2195:src/xeq.c     **** 
 25369              		.loc 1 2195 1 is_stmt 0 view .LVU6620
 25370 0028 05B0     		add	sp, sp, #20
 25371              		.cfi_def_cfa_offset 12
 25372              		@ sp needed
 25373 002a 30BD     		pop	{r4, r5, pc}
2195:src/xeq.c     **** 
 25374              		.loc 1 2195 1 view .LVU6621
 25375              		.cfi_endproc
 25376              	.LFE163:
 25378              		.section	.text.op_gtoalpha,"ax",%progbits
 25379              		.align	1
 25380              		.p2align 2,,3
 25381              		.global	op_gtoalpha
 25382              		.syntax unified
 25383              		.thumb
 25384              		.thumb_func
 25385              		.fpu fpv4-sp-d16
 25387              	op_gtoalpha:
 25388              	.LVL1961:
 25389              	.LFB165:
2205:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 25390              		.loc 1 2205 33 is_stmt 1 view -0
 25391              		.cfi_startproc
 25392              		@ args = 0, pretend = 0, frame = 8
 25393              		@ frame_needed = 0, uses_anonymous_args = 0
2206:src/xeq.c     **** }
 25394              		.loc 1 2206 2 view .LVU6623
2205:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 25395              		.loc 1 2205 33 is_stmt 0 view .LVU6624
 25396 0000 10B5     		push	{r4, lr}
 25397              		.cfi_def_cfa_offset 8
 25398              		.cfi_offset 4, -8
 25399              		.cfi_offset 14, -4
 25400              	.LBB3479:
 25401              	.LBB3480:
ARM GAS  /tmp/cc0UaEmF.s 			page 651


2200:src/xeq.c     **** 	buf[3] = '\0';
 25402              		.loc 1 2200 13 view .LVU6625
 25403 0002 0B4B     		ldr	r3, .L1800
 25404 0004 1968     		ldr	r1, [r3]
 25405              	.LBE3480:
 25406              	.LBE3479:
2205:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 25407              		.loc 1 2205 33 view .LVU6626
 25408 0006 82B0     		sub	sp, sp, #8
 25409              		.cfi_def_cfa_offset 16
2205:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 25410              		.loc 1 2205 33 view .LVU6627
 25411 0008 0446     		mov	r4, r0
 25412              	.LVL1962:
 25413              	.LBB3482:
 25414              	.LBI3479:
2197:src/xeq.c     **** 	char buf[4];
 25415              		.loc 1 2197 13 is_stmt 1 view .LVU6628
 25416              	.LBB3481:
2198:src/xeq.c     **** 
 25417              		.loc 1 2198 2 view .LVU6629
2200:src/xeq.c     **** 	buf[3] = '\0';
 25418              		.loc 1 2200 2 view .LVU6630
 25419 000a 0322     		movs	r2, #3
 25420 000c 01F5F661 		add	r1, r1, #1968
 25421 0010 01A8     		add	r0, sp, #4
 25422              	.LVL1963:
2200:src/xeq.c     **** 	buf[3] = '\0';
 25423              		.loc 1 2200 2 is_stmt 0 view .LVU6631
 25424 0012 FFF7FEFF 		bl	xcopy
 25425              	.LVL1964:
2201:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
 25426              		.loc 1 2201 2 is_stmt 1 view .LVU6632
2202:src/xeq.c     **** }
 25427              		.loc 1 2202 2 is_stmt 0 view .LVU6633
 25428 0016 B4F19800 		subs	r0, r4, #152
2201:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
 25429              		.loc 1 2201 9 view .LVU6634
 25430 001a 4FF00003 		mov	r3, #0
2202:src/xeq.c     **** }
 25431              		.loc 1 2202 2 view .LVU6635
 25432 001e 18BF     		it	ne
 25433 0020 0120     		movne	r0, #1
 25434 0022 01A9     		add	r1, sp, #4
2201:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
 25435              		.loc 1 2201 9 view .LVU6636
 25436 0024 8DF80730 		strb	r3, [sp, #7]
2202:src/xeq.c     **** }
 25437              		.loc 1 2202 2 is_stmt 1 view .LVU6637
 25438 0028 FFF7FEFF 		bl	branchtoalpha
 25439              	.LVL1965:
2202:src/xeq.c     **** }
 25440              		.loc 1 2202 2 is_stmt 0 view .LVU6638
 25441              	.LBE3481:
 25442              	.LBE3482:
2207:src/xeq.c     **** 
 25443              		.loc 1 2207 1 view .LVU6639
ARM GAS  /tmp/cc0UaEmF.s 			page 652


 25444 002c 02B0     		add	sp, sp, #8
 25445              		.cfi_def_cfa_offset 8
 25446              		@ sp needed
 25447 002e 10BD     		pop	{r4, pc}
 25448              	.L1801:
 25449              		.align	2
 25450              	.L1800:
 25451 0030 00000000 		.word	main_ram
 25452              		.cfi_endproc
 25453              	.LFE165:
 25455              		.section	.text.cmdskip,"ax",%progbits
 25456              		.align	1
 25457              		.p2align 2,,3
 25458              		.global	cmdskip
 25459              		.syntax unified
 25460              		.thumb
 25461              		.thumb_func
 25462              		.fpu fpv4-sp-d16
 25464              	cmdskip:
 25465              	.LVL1966:
 25466              	.LFB178:
2381:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 25467              		.loc 1 2381 46 is_stmt 1 view -0
 25468              		.cfi_startproc
 25469              		@ args = 0, pretend = 0, frame = 8
 25470              		@ frame_needed = 0, uses_anonymous_args = 0
2382:src/xeq.c     **** 	unsigned int pc;
 25471              		.loc 1 2382 2 view .LVU6641
2381:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 25472              		.loc 1 2381 46 is_stmt 0 view .LVU6642
 25473 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 25474              		.cfi_def_cfa_offset 20
 25475              		.cfi_offset 4, -20
 25476              		.cfi_offset 5, -16
 25477              		.cfi_offset 6, -12
 25478              		.cfi_offset 7, -8
 25479              		.cfi_offset 14, -4
2382:src/xeq.c     **** 	unsigned int pc;
 25480              		.loc 1 2382 30 view .LVU6643
 25481 0002 1D4F     		ldr	r7, .L1826
 25482 0004 3B68     		ldr	r3, [r7]
2385:src/xeq.c     **** 		int sgn;
 25483              		.loc 1 2385 5 view .LVU6644
 25484 0006 8B29     		cmp	r1, #139
2382:src/xeq.c     **** 	unsigned int pc;
 25485              		.loc 1 2382 21 view .LVU6645
 25486 0008 B3F8E067 		ldrh	r6, [r3, #2016]
 25487              	.LVL1967:
2383:src/xeq.c     **** 
 25488              		.loc 1 2383 2 is_stmt 1 view .LVU6646
2385:src/xeq.c     **** 		int sgn;
 25489              		.loc 1 2385 2 view .LVU6647
2381:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 25490              		.loc 1 2381 46 is_stmt 0 view .LVU6648
 25491 000c 83B0     		sub	sp, sp, #12
 25492              		.cfi_def_cfa_offset 32
2381:src/xeq.c     **** 	const unsigned int origpc = state_pc();
ARM GAS  /tmp/cc0UaEmF.s 			page 653


 25493              		.loc 1 2381 46 view .LVU6649
 25494 000e 0D46     		mov	r5, r1
2385:src/xeq.c     **** 		int sgn;
 25495              		.loc 1 2385 5 view .LVU6650
 25496 0010 22D0     		beq	.L1823
 25497 0012 0446     		mov	r4, r0
 25498              	.LVL1968:
 25499              	.L1803:
2394:src/xeq.c     **** 		pc = origpc + arg;
 25500              		.loc 1 2394 2 is_stmt 1 view .LVU6651
2394:src/xeq.c     **** 		pc = origpc + arg;
 25501              		.loc 1 2394 6 is_stmt 0 view .LVU6652
 25502 0014 B30B     		lsrs	r3, r6, #14
2394:src/xeq.c     **** 		pc = origpc + arg;
 25503              		.loc 1 2394 5 view .LVU6653
 25504 0016 032B     		cmp	r3, #3
 25505 0018 15D0     		beq	.L1824
 25506              	.LVL1969:
 25507              	.L1808:
2397:src/xeq.c     **** 		if (PcWrapped) {
 25508              		.loc 1 2397 28 is_stmt 1 discriminator 2 view .LVU6654
2397:src/xeq.c     **** 		if (PcWrapped) {
 25509              		.loc 1 2397 9 discriminator 2 view .LVU6655
2397:src/xeq.c     **** 		if (PcWrapped) {
 25510              		.loc 1 2397 9 is_stmt 0 discriminator 2 view .LVU6656
 25511 001a 24B1     		cbz	r4, .L1810
2397:src/xeq.c     **** 		if (PcWrapped) {
 25512              		.loc 1 2397 20 discriminator 1 view .LVU6657
 25513 001c FFF7FEFF 		bl	incpc
 25514              	.LVL1970:
 25515 0020 013C     		subs	r4, r4, #1
 25516              	.LVL1971:
2397:src/xeq.c     **** 		if (PcWrapped) {
 25517              		.loc 1 2397 16 discriminator 1 view .LVU6658
 25518 0022 0028     		cmp	r0, #0
 25519 0024 F9D0     		beq	.L1808
 25520              	.LVL1972:
 25521              	.L1810:
2398:src/xeq.c     **** 			report_err(ERR_RANGE);
 25522              		.loc 1 2398 3 is_stmt 1 view .LVU6659
2398:src/xeq.c     **** 			report_err(ERR_RANGE);
 25523              		.loc 1 2398 7 is_stmt 0 view .LVU6660
 25524 0026 154B     		ldr	r3, .L1826+4
2398:src/xeq.c     **** 			report_err(ERR_RANGE);
 25525              		.loc 1 2398 6 view .LVU6661
 25526 0028 1B68     		ldr	r3, [r3]
 25527 002a 73B9     		cbnz	r3, .L1825
 25528              	.L1811:
2401:src/xeq.c     **** 	}
 25529              		.loc 1 2401 3 is_stmt 1 view .LVU6662
2401:src/xeq.c     **** 	}
 25530              		.loc 1 2401 8 is_stmt 0 view .LVU6663
 25531 002c 3B68     		ldr	r3, [r7]
2401:src/xeq.c     **** 	}
 25532              		.loc 1 2401 6 view .LVU6664
 25533 002e B3F8E007 		ldrh	r0, [r3, #2016]
 25534              	.LVL1973:
ARM GAS  /tmp/cc0UaEmF.s 			page 654


 25535              	.L1809:
2403:src/xeq.c     **** }
 25536              		.loc 1 2403 2 is_stmt 1 view .LVU6665
 25537 0032 A5F13801 		sub	r1, r5, #56
 25538 0036 B1FA81F1 		clz	r1, r1
 25539 003a 3246     		mov	r2, r6
 25540 003c 4909     		lsrs	r1, r1, #5
 25541 003e FFF7FEFF 		bl	gsbgto
 25542              	.LVL1974:
 25543              	.L1802:
2404:src/xeq.c     **** 
 25544              		.loc 1 2404 1 is_stmt 0 view .LVU6666
 25545 0042 03B0     		add	sp, sp, #12
 25546              		.cfi_remember_state
 25547              		.cfi_def_cfa_offset 20
 25548              		@ sp needed
 25549 0044 F0BD     		pop	{r4, r5, r6, r7, pc}
 25550              	.LVL1975:
 25551              	.L1824:
 25552              		.cfi_restore_state
2395:src/xeq.c     **** 	else {
 25553              		.loc 1 2395 3 is_stmt 1 view .LVU6667
2395:src/xeq.c     **** 	else {
 25554              		.loc 1 2395 6 is_stmt 0 view .LVU6668
 25555 0046 A019     		adds	r0, r4, r6
 25556              	.LVL1976:
2395:src/xeq.c     **** 	else {
 25557              		.loc 1 2395 6 view .LVU6669
 25558 0048 F3E7     		b	.L1809
 25559              	.LVL1977:
 25560              	.L1825:
2399:src/xeq.c     **** 		}
 25561              		.loc 1 2399 4 is_stmt 1 view .LVU6670
 25562              	.LBB3492:
 25563              	.LBI3492:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25564              		.loc 1 537 5 view .LVU6671
 25565              	.LBB3493:
 538:src/xeq.c     **** 		Error = e;
 25566              		.loc 1 538 2 view .LVU6672
 538:src/xeq.c     **** 		Error = e;
 25567              		.loc 1 538 12 is_stmt 0 view .LVU6673
 25568 004a 0D4B     		ldr	r3, .L1826+8
 538:src/xeq.c     **** 		Error = e;
 25569              		.loc 1 538 5 view .LVU6674
 25570 004c 1A68     		ldr	r2, [r3]
 25571 004e 002A     		cmp	r2, #0
 25572 0050 ECD1     		bne	.L1811
 25573              	.LVL1978:
 25574              	.LBB3494:
 25575              	.LBI3494:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25576              		.loc 1 537 5 is_stmt 1 view .LVU6675
 25577              	.LBB3495:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 25578              		.loc 1 539 3 view .LVU6676
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
ARM GAS  /tmp/cc0UaEmF.s 			page 655


 25579              		.loc 1 539 9 is_stmt 0 view .LVU6677
 25580 0052 0822     		movs	r2, #8
 25581 0054 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 25582              		.loc 1 540 3 is_stmt 1 view .LVU6678
 25583 0056 E9E7     		b	.L1811
 25584              	.LVL1979:
 25585              	.L1823:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 25586              		.loc 1 540 3 is_stmt 0 view .LVU6679
 25587              	.LBE3495:
 25588              	.LBE3494:
 25589              	.LBE3493:
 25590              	.LBE3492:
 25591              	.LBB3496:
2386:src/xeq.c     **** 		arg = (int) get_reg_n_int_sgn((int) arg, &sgn);
 25592              		.loc 1 2386 3 is_stmt 1 view .LVU6680
2387:src/xeq.c     **** 		if (sgn || arg >= 100) {
 25593              		.loc 1 2387 3 view .LVU6681
2387:src/xeq.c     **** 		if (sgn || arg >= 100) {
 25594              		.loc 1 2387 15 is_stmt 0 view .LVU6682
 25595 0058 01A9     		add	r1, sp, #4
 25596              	.LVL1980:
2387:src/xeq.c     **** 		if (sgn || arg >= 100) {
 25597              		.loc 1 2387 15 view .LVU6683
 25598 005a FFF7FEFF 		bl	get_reg_n_int_sgn
 25599              	.LVL1981:
2388:src/xeq.c     **** 			report_err(ERR_RANGE);
 25600              		.loc 1 2388 6 view .LVU6684
 25601 005e 019B     		ldr	r3, [sp, #4]
 25602              	.LVL1982:
2388:src/xeq.c     **** 			report_err(ERR_RANGE);
 25603              		.loc 1 2388 3 is_stmt 1 view .LVU6685
2388:src/xeq.c     **** 			report_err(ERR_RANGE);
 25604              		.loc 1 2388 6 is_stmt 0 view .LVU6686
 25605 0060 13B9     		cbnz	r3, .L1804
2388:src/xeq.c     **** 			report_err(ERR_RANGE);
 25606              		.loc 1 2388 11 discriminator 1 view .LVU6687
 25607 0062 6328     		cmp	r0, #99
2387:src/xeq.c     **** 		if (sgn || arg >= 100) {
 25608              		.loc 1 2387 7 discriminator 1 view .LVU6688
 25609 0064 0446     		mov	r4, r0
2388:src/xeq.c     **** 			report_err(ERR_RANGE);
 25610              		.loc 1 2388 11 discriminator 1 view .LVU6689
 25611 0066 D5D9     		bls	.L1803
 25612              	.L1804:
2389:src/xeq.c     **** 			return;
 25613              		.loc 1 2389 4 is_stmt 1 view .LVU6690
 25614              	.LVL1983:
 25615              	.LBB3497:
 25616              	.LBI3497:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25617              		.loc 1 537 5 view .LVU6691
 25618              	.LBB3498:
 538:src/xeq.c     **** 		Error = e;
 25619              		.loc 1 538 2 view .LVU6692
 538:src/xeq.c     **** 		Error = e;
ARM GAS  /tmp/cc0UaEmF.s 			page 656


 25620              		.loc 1 538 12 is_stmt 0 view .LVU6693
 25621 0068 054B     		ldr	r3, .L1826+8
 538:src/xeq.c     **** 		Error = e;
 25622              		.loc 1 538 5 view .LVU6694
 25623 006a 1A68     		ldr	r2, [r3]
 25624 006c 002A     		cmp	r2, #0
 25625 006e E8D1     		bne	.L1802
 25626              	.LVL1984:
 25627              	.LBB3499:
 25628              	.LBI3499:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25629              		.loc 1 537 5 is_stmt 1 view .LVU6695
 25630              	.LBB3500:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 25631              		.loc 1 539 3 view .LVU6696
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 25632              		.loc 1 539 9 is_stmt 0 view .LVU6697
 25633 0070 0822     		movs	r2, #8
 25634 0072 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 25635              		.loc 1 540 3 is_stmt 1 view .LVU6698
 25636              	.LVL1985:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 25637              		.loc 1 540 3 is_stmt 0 view .LVU6699
 25638              	.LBE3500:
 25639              	.LBE3499:
 25640              	.LBE3498:
 25641              	.LBE3497:
2390:src/xeq.c     **** 		}
 25642              		.loc 1 2390 4 is_stmt 1 view .LVU6700
 25643 0074 E5E7     		b	.L1802
 25644              	.L1827:
 25645 0076 00BF     		.align	2
 25646              	.L1826:
 25647 0078 00000000 		.word	main_ram
 25648 007c 00000000 		.word	PcWrapped
 25649 0080 00000000 		.word	Error
 25650              	.LBE3496:
 25651              		.cfi_endproc
 25652              	.LFE178:
 25654              		.section	.text.cmdback,"ax",%progbits
 25655              		.align	1
 25656              		.p2align 2,,3
 25657              		.global	cmdback
 25658              		.syntax unified
 25659              		.thumb
 25660              		.thumb_func
 25661              		.fpu fpv4-sp-d16
 25663              	cmdback:
 25664              	.LVL1986:
 25665              	.LFB179:
2407:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 25666              		.loc 1 2407 46 view -0
 25667              		.cfi_startproc
 25668              		@ args = 0, pretend = 0, frame = 0
 25669              		@ frame_needed = 0, uses_anonymous_args = 0
2408:src/xeq.c     **** 	unsigned int pc = origpc;
ARM GAS  /tmp/cc0UaEmF.s 			page 657


 25670              		.loc 1 2408 2 view .LVU6702
2407:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 25671              		.loc 1 2407 46 is_stmt 0 view .LVU6703
 25672 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 25673              		.cfi_def_cfa_offset 24
 25674              		.cfi_offset 3, -24
 25675              		.cfi_offset 4, -20
 25676              		.cfi_offset 5, -16
 25677              		.cfi_offset 6, -12
 25678              		.cfi_offset 7, -8
 25679              		.cfi_offset 14, -4
2408:src/xeq.c     **** 	unsigned int pc = origpc;
 25680              		.loc 1 2408 30 view .LVU6704
 25681 0002 184B     		ldr	r3, .L1847
 25682 0004 1B68     		ldr	r3, [r3]
2408:src/xeq.c     **** 	unsigned int pc = origpc;
 25683              		.loc 1 2408 21 view .LVU6705
 25684 0006 B3F8E067 		ldrh	r6, [r3, #2016]
 25685              	.LVL1987:
2409:src/xeq.c     **** 
 25686              		.loc 1 2409 2 is_stmt 1 view .LVU6706
2411:src/xeq.c     **** 		pc -= arg + 1;
 25687              		.loc 1 2411 2 view .LVU6707
2411:src/xeq.c     **** 		pc -= arg + 1;
 25688              		.loc 1 2411 6 is_stmt 0 view .LVU6708
 25689 000a B30B     		lsrs	r3, r6, #14
2411:src/xeq.c     **** 		pc -= arg + 1;
 25690              		.loc 1 2411 5 view .LVU6709
 25691 000c 032B     		cmp	r3, #3
2407:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 25692              		.loc 1 2407 46 view .LVU6710
 25693 000e 0446     		mov	r4, r0
 25694 0010 0D46     		mov	r5, r1
2411:src/xeq.c     **** 		pc -= arg + 1;
 25695              		.loc 1 2411 5 view .LVU6711
 25696 0012 1FD0     		beq	.L1844
2413:src/xeq.c     **** 		if ( Running ) {
 25697              		.loc 1 2413 14 is_stmt 1 view .LVU6712
2413:src/xeq.c     **** 		if ( Running ) {
 25698              		.loc 1 2413 17 is_stmt 0 view .LVU6713
 25699 0014 98B1     		cbz	r0, .L1836
2414:src/xeq.c     **** 			// Handles the case properly that we are on last step
 25700              		.loc 1 2414 3 is_stmt 1 view .LVU6714
2414:src/xeq.c     **** 			// Handles the case properly that we are on last step
 25701              		.loc 1 2414 8 is_stmt 0 view .LVU6715
 25702 0016 144B     		ldr	r3, .L1847+4
2414:src/xeq.c     **** 			// Handles the case properly that we are on last step
 25703              		.loc 1 2414 6 view .LVU6716
 25704 0018 1B68     		ldr	r3, [r3]
 25705 001a F3B9     		cbnz	r3, .L1845
 25706 001c 3046     		mov	r0, r6
 25707              	.LVL1988:
 25708              	.L1831:
2414:src/xeq.c     **** 			// Handles the case properly that we are on last step
 25709              		.loc 1 2414 6 view .LVU6717
 25710 001e 134F     		ldr	r7, .L1847+8
 25711 0020 00E0     		b	.L1833
ARM GAS  /tmp/cc0UaEmF.s 			page 658


 25712              	.L1846:
2420:src/xeq.c     **** 		if (PcWrapped) {
 25713              		.loc 1 2420 18 discriminator 1 view .LVU6718
 25714 0022 33B9     		cbnz	r3, .L1834
 25715              	.L1833:
2418:src/xeq.c     **** 			pc = do_dec(pc, 1);
 25716              		.loc 1 2418 3 is_stmt 1 discriminator 2 view .LVU6719
2419:src/xeq.c     **** 		} while (--arg && !PcWrapped);
 25717              		.loc 1 2419 4 discriminator 2 view .LVU6720
2419:src/xeq.c     **** 		} while (--arg && !PcWrapped);
 25718              		.loc 1 2419 9 is_stmt 0 discriminator 2 view .LVU6721
 25719 0024 0121     		movs	r1, #1
 25720 0026 FFF7FEFF 		bl	do_dec
 25721              	.LVL1989:
2420:src/xeq.c     **** 		if (PcWrapped) {
 25722              		.loc 1 2420 11 is_stmt 1 discriminator 2 view .LVU6722
2420:src/xeq.c     **** 		if (PcWrapped) {
 25723              		.loc 1 2420 3 is_stmt 0 discriminator 2 view .LVU6723
 25724 002a 013C     		subs	r4, r4, #1
 25725              	.LVL1990:
2420:src/xeq.c     **** 		if (PcWrapped) {
 25726              		.loc 1 2420 18 discriminator 2 view .LVU6724
 25727 002c 3B68     		ldr	r3, [r7]
2420:src/xeq.c     **** 		if (PcWrapped) {
 25728              		.loc 1 2420 3 discriminator 2 view .LVU6725
 25729 002e F8D1     		bne	.L1846
2421:src/xeq.c     **** 			report_err(ERR_RANGE);
 25730              		.loc 1 2421 3 is_stmt 1 view .LVU6726
2421:src/xeq.c     **** 			report_err(ERR_RANGE);
 25731              		.loc 1 2421 6 is_stmt 0 view .LVU6727
 25732 0030 33B1     		cbz	r3, .L1830
 25733              	.L1834:
2422:src/xeq.c     **** 			return;
 25734              		.loc 1 2422 4 is_stmt 1 view .LVU6728
 25735              	.LVL1991:
 25736              	.LBB3505:
 25737              	.LBI3505:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25738              		.loc 1 537 5 view .LVU6729
 25739              	.LBB3506:
 538:src/xeq.c     **** 		Error = e;
 25740              		.loc 1 538 2 view .LVU6730
 538:src/xeq.c     **** 		Error = e;
 25741              		.loc 1 538 12 is_stmt 0 view .LVU6731
 25742 0032 0F4B     		ldr	r3, .L1847+12
 538:src/xeq.c     **** 		Error = e;
 25743              		.loc 1 538 5 view .LVU6732
 25744 0034 1A68     		ldr	r2, [r3]
 25745 0036 0AB9     		cbnz	r2, .L1828
 25746              	.LVL1992:
 25747              	.LBB3507:
 25748              	.LBI3507:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25749              		.loc 1 537 5 is_stmt 1 view .LVU6733
 25750              	.LBB3508:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 25751              		.loc 1 539 3 view .LVU6734
ARM GAS  /tmp/cc0UaEmF.s 			page 659


 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 25752              		.loc 1 539 9 is_stmt 0 view .LVU6735
 25753 0038 0822     		movs	r2, #8
 25754 003a 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 25755              		.loc 1 540 3 is_stmt 1 view .LVU6736
 25756              	.LVL1993:
 25757              	.L1828:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 25758              		.loc 1 540 3 is_stmt 0 view .LVU6737
 25759              	.LBE3508:
 25760              	.LBE3507:
 25761              	.LBE3506:
 25762              	.LBE3505:
2427:src/xeq.c     **** 
 25763              		.loc 1 2427 1 view .LVU6738
 25764 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 25765              	.LVL1994:
 25766              	.L1836:
2427:src/xeq.c     **** 
 25767              		.loc 1 2427 1 view .LVU6739
 25768 003e 3046     		mov	r0, r6
 25769              	.LVL1995:
 25770              	.L1830:
2426:src/xeq.c     **** }
 25771              		.loc 1 2426 2 is_stmt 1 view .LVU6740
 25772 0040 A5F13901 		sub	r1, r5, #57
 25773 0044 B1FA81F1 		clz	r1, r1
 25774 0048 3246     		mov	r2, r6
 25775 004a 4909     		lsrs	r1, r1, #5
2427:src/xeq.c     **** 
 25776              		.loc 1 2427 1 is_stmt 0 view .LVU6741
 25777 004c BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 25778              		.cfi_remember_state
 25779              		.cfi_restore 14
 25780              		.cfi_restore 7
 25781              		.cfi_restore 6
 25782              		.cfi_restore 5
 25783              		.cfi_restore 4
 25784              		.cfi_restore 3
 25785              		.cfi_def_cfa_offset 0
 25786              	.LVL1996:
2426:src/xeq.c     **** }
 25787              		.loc 1 2426 2 view .LVU6742
 25788 0050 FFF7FEBF 		b	gsbgto
 25789              	.LVL1997:
 25790              	.L1844:
 25791              		.cfi_restore_state
2412:src/xeq.c     ****         else if (arg) {
 25792              		.loc 1 2412 3 is_stmt 1 view .LVU6743
2412:src/xeq.c     ****         else if (arg) {
 25793              		.loc 1 2412 6 is_stmt 0 view .LVU6744
 25794 0054 731E     		subs	r3, r6, #1
 25795 0056 181A     		subs	r0, r3, r0
 25796              	.LVL1998:
2412:src/xeq.c     ****         else if (arg) {
 25797              		.loc 1 2412 6 view .LVU6745
ARM GAS  /tmp/cc0UaEmF.s 			page 660


 25798 0058 F2E7     		b	.L1830
 25799              	.LVL1999:
 25800              	.L1845:
2416:src/xeq.c     **** 		}
 25801              		.loc 1 2416 4 is_stmt 1 view .LVU6746
2416:src/xeq.c     **** 		}
 25802              		.loc 1 2416 9 is_stmt 0 view .LVU6747
 25803 005a 0121     		movs	r1, #1
 25804              	.LVL2000:
2416:src/xeq.c     **** 		}
 25805              		.loc 1 2416 9 view .LVU6748
 25806 005c 3046     		mov	r0, r6
 25807              	.LVL2001:
2416:src/xeq.c     **** 		}
 25808              		.loc 1 2416 9 view .LVU6749
 25809 005e FFF7FEFF 		bl	do_dec
 25810              	.LVL2002:
2416:src/xeq.c     **** 		}
 25811              		.loc 1 2416 9 view .LVU6750
 25812 0062 DCE7     		b	.L1831
 25813              	.L1848:
 25814              		.align	2
 25815              	.L1847:
 25816 0064 00000000 		.word	main_ram
 25817 0068 00000000 		.word	Running
 25818 006c 00000000 		.word	PcWrapped
 25819 0070 00000000 		.word	Error
 25820              		.cfi_endproc
 25821              	.LFE179:
 25823              		.section	.text.usergsb_common,"ax",%progbits
 25824              		.align	1
 25825              		.p2align 2,,3
 25826              		.syntax unified
 25827              		.thumb
 25828              		.thumb_func
 25829              		.fpu fpv4-sp-d16
 25831              	usergsb_common:
 25832              	.LVL2003:
 25833              	.LFB153:
2088:src/xeq.c     **** 	const unsigned int pc = state_pc();
 25834              		.loc 1 2088 55 is_stmt 1 view -0
 25835              		.cfi_startproc
 25836              		@ args = 0, pretend = 0, frame = 0
 25837              		@ frame_needed = 0, uses_anonymous_args = 0
2089:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 25838              		.loc 1 2089 2 view .LVU6752
2088:src/xeq.c     **** 	const unsigned int pc = state_pc();
 25839              		.loc 1 2088 55 is_stmt 0 view .LVU6753
 25840 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 25841              		.cfi_def_cfa_offset 24
 25842              		.cfi_offset 4, -24
 25843              		.cfi_offset 5, -20
 25844              		.cfi_offset 6, -16
 25845              		.cfi_offset 7, -12
 25846              		.cfi_offset 8, -8
 25847              		.cfi_offset 14, -4
2089:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
ARM GAS  /tmp/cc0UaEmF.s 			page 661


 25848              		.loc 1 2089 26 view .LVU6754
 25849 0004 1C4D     		ldr	r5, .L1853
2090:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 25850              		.loc 1 2090 2 view .LVU6755
 25851 0006 1D4F     		ldr	r7, .L1853+4
2089:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 25852              		.loc 1 2089 26 view .LVU6756
 25853 0008 2B68     		ldr	r3, [r5]
2090:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 25854              		.loc 1 2090 2 view .LVU6757
 25855 000a 3A68     		ldr	r2, [r7]
2089:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 25856              		.loc 1 2089 21 view .LVU6758
 25857 000c B3F8E047 		ldrh	r4, [r3, #2016]
 25858              	.LVL2004:
2090:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 25859              		.loc 1 2090 2 is_stmt 1 view .LVU6759
2092:src/xeq.c     **** 	gsbgto(target, 1, pc);		     // Push return address, transfer control
 25860              		.loc 1 2092 2 is_stmt 0 view .LVU6760
 25861 0010 DFF87480 		ldr	r8, .L1853+16
2088:src/xeq.c     **** 	const unsigned int pc = state_pc();
 25862              		.loc 1 2088 55 view .LVU6761
 25863 0014 0646     		mov	r6, r0
2090:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 25864              		.loc 1 2090 2 view .LVU6762
 25865 0016 0121     		movs	r1, #1
 25866 0018 2046     		mov	r0, r4
 25867              	.LVL2005:
2090:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 25868              		.loc 1 2090 2 view .LVU6763
 25869 001a FFF7FEFF 		bl	gsbgto
 25870              	.LVL2006:
2091:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
 25871              		.loc 1 2091 2 is_stmt 1 view .LVU6764
2091:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
 25872              		.loc 1 2091 16 is_stmt 0 view .LVU6765
 25873 001e 2B68     		ldr	r3, [r5]
2091:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
 25874              		.loc 1 2091 2 view .LVU6766
 25875 0020 2046     		mov	r0, r4
 25876 0022 B3F9DE27 		ldrsh	r2, [r3, #2014]
 25877 0026 0121     		movs	r1, #1
 25878 0028 FFF7FEFF 		bl	gsbgto
 25879              	.LVL2007:
2092:src/xeq.c     **** 	gsbgto(target, 1, pc);		     // Push return address, transfer control
 25880              		.loc 1 2092 2 is_stmt 1 view .LVU6767
 25881 002c 2046     		mov	r0, r4
 25882 002e D8F80020 		ldr	r2, [r8]
 25883 0032 0121     		movs	r1, #1
 25884 0034 FFF7FEFF 		bl	gsbgto
 25885              	.LVL2008:
2093:src/xeq.c     **** 
 25886              		.loc 1 2093 2 view .LVU6768
 25887 0038 2246     		mov	r2, r4
 25888 003a 3046     		mov	r0, r6
 25889 003c 0121     		movs	r1, #1
 25890 003e FFF7FEFF 		bl	gsbgto
ARM GAS  /tmp/cc0UaEmF.s 			page 662


 25891              	.LVL2009:
2095:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
 25892              		.loc 1 2095 2 view .LVU6769
2096:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 25893              		.loc 1 2096 9 is_stmt 0 view .LVU6770
 25894 0042 2A68     		ldr	r2, [r5]
2096:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 25895              		.loc 1 2096 20 view .LVU6771
 25896 0044 0E4B     		ldr	r3, .L1853+8
 25897 0046 B2F9DE07 		ldrsh	r0, [r2, #2014]
 25898 004a 1968     		ldr	r1, [r3]
2098:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
 25899              		.loc 1 2098 6 view .LVU6772
 25900 004c 0D4C     		ldr	r4, .L1853+12
 25901              	.LVL2010:
2096:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 25902              		.loc 1 2096 20 view .LVU6773
 25903 004e 31F81030 		ldrh	r3, [r1, r0, lsl #1]
2098:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
 25904              		.loc 1 2098 5 view .LVU6774
 25905 0052 2468     		ldr	r4, [r4]
2097:src/xeq.c     **** 	if (! Running)
 25906              		.loc 1 2097 12 view .LVU6775
 25907 0054 D8F80050 		ldr	r5, [r8]
2095:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
 25908              		.loc 1 2095 13 view .LVU6776
 25909 0058 0026     		movs	r6, #0
2096:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 25910              		.loc 1 2096 20 view .LVU6777
 25911 005a 43F40053 		orr	r3, r3, #8192
2095:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
 25912              		.loc 1 2095 13 view .LVU6778
 25913 005e 3E60     		str	r6, [r7]
2096:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 25914              		.loc 1 2096 2 is_stmt 1 view .LVU6779
2096:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 25915              		.loc 1 2096 20 is_stmt 0 view .LVU6780
 25916 0060 21F81030 		strh	r3, [r1, r0, lsl #1]	@ movhi
2097:src/xeq.c     **** 	if (! Running)
 25917              		.loc 1 2097 2 is_stmt 1 view .LVU6781
2097:src/xeq.c     **** 	if (! Running)
 25918              		.loc 1 2097 12 is_stmt 0 view .LVU6782
 25919 0064 A2F8DE57 		strh	r5, [r2, #2014]	@ movhi
2098:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
 25920              		.loc 1 2098 2 is_stmt 1 view .LVU6783
2098:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
 25921              		.loc 1 2098 5 is_stmt 0 view .LVU6784
 25922 0068 0CB1     		cbz	r4, .L1852
2101:src/xeq.c     **** 
 25923              		.loc 1 2101 1 view .LVU6785
 25924 006a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25925              	.L1852:
2099:src/xeq.c     **** 	watchdog();			     // Just for safety. Shouldn't be needed.
 25926              		.loc 1 2099 3 is_stmt 1 view .LVU6786
2101:src/xeq.c     **** 
 25927              		.loc 1 2101 1 is_stmt 0 view .LVU6787
 25928 006e BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
ARM GAS  /tmp/cc0UaEmF.s 			page 663


 25929              		.cfi_restore 14
 25930              		.cfi_restore 8
 25931              		.cfi_restore 7
 25932              		.cfi_restore 6
 25933              		.cfi_restore 5
 25934              		.cfi_restore 4
 25935              		.cfi_def_cfa_offset 0
2099:src/xeq.c     **** 	watchdog();			     // Just for safety. Shouldn't be needed.
 25936              		.loc 1 2099 3 view .LVU6788
 25937 0072 FFF7FEBF 		b	set_running_on
 25938              	.LVL2011:
 25939              	.L1854:
 25940 0076 00BF     		.align	2
 25941              	.L1853:
 25942 0078 00000000 		.word	main_ram
 25943 007c 00000000 		.word	XromUserPc
 25944 0080 00000000 		.word	RetStk
 25945 0084 00000000 		.word	Running
 25946 0088 00000000 		.word	UserLocalRegs
 25947              		.cfi_endproc
 25948              	.LFE153:
 25950              		.section	.text.do_usergsb,"ax",%progbits
 25951              		.align	1
 25952              		.p2align 2,,3
 25953              		.global	do_usergsb
 25954              		.syntax unified
 25955              		.thumb
 25956              		.thumb_func
 25957              		.fpu fpv4-sp-d16
 25959              	do_usergsb:
 25960              	.LVL2012:
 25961              	.LFB154:
2107:src/xeq.c     **** 	usergsb_common(XromUserPc);
 25962              		.loc 1 2107 32 is_stmt 1 view -0
 25963              		.cfi_startproc
 25964              		@ args = 0, pretend = 0, frame = 0
 25965              		@ frame_needed = 0, uses_anonymous_args = 0
2108:src/xeq.c     ****         fill(OP_FILL);
 25966              		.loc 1 2108 2 view .LVU6790
2107:src/xeq.c     **** 	usergsb_common(XromUserPc);
 25967              		.loc 1 2107 32 is_stmt 0 view .LVU6791
 25968 0000 08B5     		push	{r3, lr}
 25969              		.cfi_def_cfa_offset 8
 25970              		.cfi_offset 3, -8
 25971              		.cfi_offset 14, -4
2108:src/xeq.c     ****         fill(OP_FILL);
 25972              		.loc 1 2108 2 view .LVU6792
 25973 0002 044B     		ldr	r3, .L1857
 25974 0004 1888     		ldrh	r0, [r3]
 25975              	.LVL2013:
2108:src/xeq.c     ****         fill(OP_FILL);
 25976              		.loc 1 2108 2 view .LVU6793
 25977 0006 FFF7FEFF 		bl	usergsb_common
 25978              	.LVL2014:
2109:src/xeq.c     **** }
 25979              		.loc 1 2109 9 is_stmt 1 view .LVU6794
2110:src/xeq.c     **** 
ARM GAS  /tmp/cc0UaEmF.s 			page 664


 25980              		.loc 1 2110 1 is_stmt 0 view .LVU6795
 25981 000a BDE80840 		pop	{r3, lr}
 25982              		.cfi_restore 14
 25983              		.cfi_restore 3
 25984              		.cfi_def_cfa_offset 0
2109:src/xeq.c     **** }
 25985              		.loc 1 2109 9 view .LVU6796
 25986 000e 0C20     		movs	r0, #12
 25987 0010 FFF7FEBF 		b	fill
 25988              	.LVL2015:
 25989              	.L1858:
 25990              		.align	2
 25991              	.L1857:
 25992 0014 00000000 		.word	XromUserPc
 25993              		.cfi_endproc
 25994              	.LFE154:
 25996              		.section	.text.cmdmultigto,"ax",%progbits
 25997              		.align	1
 25998              		.p2align 2,,3
 25999              		.global	cmdmultigto
 26000              		.syntax unified
 26001              		.thumb
 26002              		.thumb_func
 26003              		.fpu fpv4-sp-d16
 26005              	cmdmultigto:
 26006              	.LVL2016:
 26007              	.LFB161:
2166:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
 26008              		.loc 1 2166 54 is_stmt 1 view -0
 26009              		.cfi_startproc
 26010              		@ args = 0, pretend = 0, frame = 0
 26011              		@ frame_needed = 0, uses_anonymous_args = 0
2167:src/xeq.c     **** 		// In XROM the command behaves differently!
 26012              		.loc 1 2167 2 view .LVU6798
2167:src/xeq.c     **** 		// In XROM the command behaves differently!
 26013              		.loc 1 2167 5 is_stmt 0 view .LVU6799
 26014 0000 0229     		cmp	r1, #2
2166:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
 26015              		.loc 1 2166 54 view .LVU6800
 26016 0002 10B5     		push	{r4, lr}
 26017              		.cfi_def_cfa_offset 8
 26018              		.cfi_offset 4, -8
 26019              		.cfi_offset 14, -4
2166:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
 26020              		.loc 1 2166 54 view .LVU6801
 26021 0004 0346     		mov	r3, r0
 26022 0006 0C46     		mov	r4, r1
2167:src/xeq.c     **** 		// In XROM the command behaves differently!
 26023              		.loc 1 2167 5 view .LVU6802
 26024 0008 06D1     		bne	.L1860
 26025              	.LBB3509:
 26026              	.LBI3509:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 26027              		.loc 1 182 5 is_stmt 1 view .LVU6803
 26028              	.LBB3510:
 183:src/xeq.c     **** }
 26029              		.loc 1 183 2 view .LVU6804
ARM GAS  /tmp/cc0UaEmF.s 			page 665


 183:src/xeq.c     **** }
 26030              		.loc 1 183 9 is_stmt 0 view .LVU6805
 26031 000a 104A     		ldr	r2, .L1864
 26032 000c 1268     		ldr	r2, [r2]
 26033 000e B2F8E027 		ldrh	r2, [r2, #2016]
 26034              	.LBE3510:
 26035              	.LBE3509:
2167:src/xeq.c     **** 		// In XROM the command behaves differently!
 26036              		.loc 1 2167 22 view .LVU6806
 26037 0012 920B     		lsrs	r2, r2, #14
 26038 0014 032A     		cmp	r2, #3
 26039 0016 0BD0     		beq	.L1863
 26040              	.L1860:
2176:src/xeq.c     **** 	}
 26041              		.loc 1 2176 3 is_stmt 1 view .LVU6807
 26042 0018 0121     		movs	r1, #1
 26043              	.LVL2017:
2176:src/xeq.c     **** 	}
 26044              		.loc 1 2176 3 is_stmt 0 view .LVU6808
 26045 001a 1846     		mov	r0, r3
 26046              	.LVL2018:
2176:src/xeq.c     **** 	}
 26047              		.loc 1 2176 3 view .LVU6809
 26048 001c FFF7FEFF 		bl	findmultilbl
 26049              	.LVL2019:
2176:src/xeq.c     **** 	}
 26050              		.loc 1 2176 3 view .LVU6810
 26051 0020 0146     		mov	r1, r0
 26052 0022 E01E     		subs	r0, r4, #3
 26053 0024 18BF     		it	ne
 26054 0026 0120     		movne	r0, #1
2178:src/xeq.c     **** 
 26055              		.loc 1 2178 1 view .LVU6811
 26056 0028 BDE81040 		pop	{r4, lr}
 26057              		.cfi_remember_state
 26058              		.cfi_restore 14
 26059              		.cfi_restore 4
 26060              		.cfi_def_cfa_offset 0
2176:src/xeq.c     **** 	}
 26061              		.loc 1 2176 3 view .LVU6812
 26062 002c FFF7FEBF 		b	cmdgtocommon
 26063              	.LVL2020:
 26064              	.L1863:
 26065              		.cfi_restore_state
 26066              	.LBB3511:
2169:src/xeq.c     **** 		if (target != 0)
 26067              		.loc 1 2169 3 is_stmt 1 view .LVU6813
2169:src/xeq.c     **** 		if (target != 0)
 26068              		.loc 1 2169 31 is_stmt 0 view .LVU6814
 26069 0030 0021     		movs	r1, #0
 26070              	.LVL2021:
2169:src/xeq.c     **** 		if (target != 0)
 26071              		.loc 1 2169 31 view .LVU6815
 26072 0032 FFF7FEFF 		bl	findmultilbl
 26073              	.LVL2022:
2169:src/xeq.c     **** 		if (target != 0)
 26074              		.loc 1 2169 22 view .LVU6816
ARM GAS  /tmp/cc0UaEmF.s 			page 666


 26075 0036 80B2     		uxth	r0, r0
 26076              	.LVL2023:
2170:src/xeq.c     **** 			usergsb_common(target); 
 26077              		.loc 1 2170 3 is_stmt 1 view .LVU6817
2170:src/xeq.c     **** 			usergsb_common(target); 
 26078              		.loc 1 2170 6 is_stmt 0 view .LVU6818
 26079 0038 18B1     		cbz	r0, .L1861
2171:src/xeq.c     **** 		else
 26080              		.loc 1 2171 4 is_stmt 1 view .LVU6819
 26081              	.LBE3511:
2178:src/xeq.c     **** 
 26082              		.loc 1 2178 1 is_stmt 0 view .LVU6820
 26083 003a BDE81040 		pop	{r4, lr}
 26084              		.cfi_remember_state
 26085              		.cfi_restore 14
 26086              		.cfi_restore 4
 26087              		.cfi_def_cfa_offset 0
 26088              	.LBB3512:
2171:src/xeq.c     **** 		else
 26089              		.loc 1 2171 4 view .LVU6821
 26090 003e FFF7FEBF 		b	usergsb_common
 26091              	.LVL2024:
 26092              	.L1861:
 26093              		.cfi_restore_state
2173:src/xeq.c     **** 	}
 26094              		.loc 1 2173 4 is_stmt 1 view .LVU6822
 26095              	.LBE3512:
2178:src/xeq.c     **** 
 26096              		.loc 1 2178 1 is_stmt 0 view .LVU6823
 26097 0042 BDE81040 		pop	{r4, lr}
 26098              		.cfi_restore 14
 26099              		.cfi_restore 4
 26100              		.cfi_def_cfa_offset 0
 26101              	.LBB3513:
2173:src/xeq.c     **** 	}
 26102              		.loc 1 2173 4 view .LVU6824
 26103 0046 FFF7FEBF 		b	incpc
 26104              	.LVL2025:
 26105              	.L1865:
2173:src/xeq.c     **** 	}
 26106              		.loc 1 2173 4 view .LVU6825
 26107 004a 00BF     		.align	2
 26108              	.L1864:
 26109 004c 00000000 		.word	main_ram
 26110              	.LBE3513:
 26111              		.cfi_endproc
 26112              	.LFE161:
 26114              		.section	.text.store_a_to_d,"ax",%progbits
 26115              		.align	1
 26116              		.p2align 2,,3
 26117              		.global	store_a_to_d
 26118              		.syntax unified
 26119              		.thumb
 26120              		.thumb_func
 26121              		.fpu fpv4-sp-d16
 26123              	store_a_to_d:
 26124              	.LVL2026:
ARM GAS  /tmp/cc0UaEmF.s 			page 667


 26125              	.LFB259:
5596:src/xeq.c     **** 
5597:src/xeq.c     **** /* Command to stash registers A through D into volatile RAM and to restore them
5598:src/xeq.c     ****  * again.
5599:src/xeq.c     ****  */
5600:src/xeq.c     **** void store_a_to_d(enum nilop op) {
 26126              		.loc 1 5600 34 is_stmt 1 view -0
 26127              		.cfi_startproc
 26128              		@ args = 0, pretend = 0, frame = 0
 26129              		@ frame_needed = 0, uses_anonymous_args = 0
5601:src/xeq.c     **** 	const void *src = XromA2D;
 26130              		.loc 1 5601 2 view .LVU6827
5602:src/xeq.c     **** 	void *dest = get_reg_n(regA_idx);
 26131              		.loc 1 5602 2 view .LVU6828
5600:src/xeq.c     **** 	const void *src = XromA2D;
 26132              		.loc 1 5600 34 is_stmt 0 view .LVU6829
 26133 0000 10B5     		push	{r4, lr}
 26134              		.cfi_def_cfa_offset 8
 26135              		.cfi_offset 4, -8
 26136              		.cfi_offset 14, -4
5600:src/xeq.c     **** 	const void *src = XromA2D;
 26137              		.loc 1 5600 34 view .LVU6830
 26138 0002 0446     		mov	r4, r0
 26139              		.loc 1 5602 15 view .LVU6831
 26140 0004 6820     		movs	r0, #104
 26141              	.LVL2027:
 26142              		.loc 1 5602 15 view .LVU6832
 26143 0006 FFF7FEFF 		bl	get_reg_n
 26144              	.LVL2028:
5603:src/xeq.c     **** 
5604:src/xeq.c     **** 	if (op == OP_SAVEA2D) {
 26145              		.loc 1 5604 2 is_stmt 1 view .LVU6833
 26146              		.loc 1 5604 5 is_stmt 0 view .LVU6834
 26147 000a 802C     		cmp	r4, #128
5605:src/xeq.c     **** 		src = dest;
 26148              		.loc 1 5605 7 view .LVU6835
 26149 000c 08BF     		it	eq
 26150 000e 0146     		moveq	r1, r0
5606:src/xeq.c     **** 		dest = XromA2D;
5607:src/xeq.c     **** 	}
5608:src/xeq.c     **** 	xcopy(dest, src, sizeof(REGISTER) * 4);
5609:src/xeq.c     **** }
 26151              		.loc 1 5609 1 view .LVU6836
 26152 0010 BDE81040 		pop	{r4, lr}
 26153              		.cfi_restore 14
 26154              		.cfi_restore 4
 26155              		.cfi_def_cfa_offset 0
5606:src/xeq.c     **** 		dest = XromA2D;
 26156              		.loc 1 5606 8 view .LVU6837
 26157 0014 0CBF     		ite	eq
 26158 0016 0248     		ldreq	r0, .L1870
 26159              	.LVL2029:
5601:src/xeq.c     **** 	void *dest = get_reg_n(regA_idx);
 26160              		.loc 1 5601 14 view .LVU6838
 26161 0018 0149     		ldrne	r1, .L1870
 26162              	.LVL2030:
5608:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 668


 26163              		.loc 1 5608 2 is_stmt 1 view .LVU6839
 26164 001a 4022     		movs	r2, #64
 26165 001c FFF7FEBF 		b	xcopy
 26166              	.LVL2031:
 26167              	.L1871:
5608:src/xeq.c     **** }
 26168              		.loc 1 5608 2 is_stmt 0 view .LVU6840
 26169              		.align	2
 26170              	.L1870:
 26171 0020 00000000 		.word	XromA2D
 26172              		.cfi_endproc
 26173              	.LFE259:
 26175              		.section	.text.cmdlocr,"ax",%progbits
 26176              		.align	1
 26177              		.p2align 2,,3
 26178              		.global	cmdlocr
 26179              		.syntax unified
 26180              		.thumb
 26181              		.thumb_func
 26182              		.fpu fpv4-sp-d16
 26184              	cmdlocr:
 26185              	.LVL2032:
 26186              	.LFB260:
5610:src/xeq.c     **** 
5611:src/xeq.c     **** /*
5612:src/xeq.c     ****  *  Command to support local variables.
5613:src/xeq.c     ****  *  A stack frame is constructed:
5614:src/xeq.c     ****  *	marker including size of frame,
5615:src/xeq.c     ****  *	register + flag area.
5616:src/xeq.c     ****  *  Registers must reside on even stack positions
5617:src/xeq.c     ****  *  so the flag word is either at the top or at the bottom of the frame.
5618:src/xeq.c     ****  */
5619:src/xeq.c     **** void cmdlocr(unsigned int arg, enum rarg op) {
 26187              		.loc 1 5619 46 is_stmt 1 view -0
 26188              		.cfi_startproc
 26189              		@ args = 0, pretend = 0, frame = 0
 26190              		@ frame_needed = 0, uses_anonymous_args = 0
5620:src/xeq.c     **** 	short int sp = RetStkPtr;
 26191              		.loc 1 5620 2 view .LVU6842
5619:src/xeq.c     **** 	short int sp = RetStkPtr;
 26192              		.loc 1 5619 46 is_stmt 0 view .LVU6843
 26193 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 26194              		.cfi_def_cfa_offset 40
 26195              		.cfi_offset 3, -40
 26196              		.cfi_offset 4, -36
 26197              		.cfi_offset 5, -32
 26198              		.cfi_offset 6, -28
 26199              		.cfi_offset 7, -24
 26200              		.cfi_offset 8, -20
 26201              		.cfi_offset 9, -16
 26202              		.cfi_offset 10, -12
 26203              		.cfi_offset 11, -8
 26204              		.cfi_offset 14, -4
 26205              		.loc 1 5620 17 view .LVU6844
 26206 0004 554F     		ldr	r7, .L1892
 26207 0006 3C68     		ldr	r4, [r7]
 26208              	.LBB3523:
ARM GAS  /tmp/cc0UaEmF.s 			page 669


 26209              	.LBB3524:
 933:src/xeq.c     **** }
 26210              		.loc 1 933 24 view .LVU6845
 26211 0008 B4F8E827 		ldrh	r2, [r4, #2024]
 26212              	.LBE3524:
 26213              	.LBE3523:
 26214              		.loc 1 5620 12 view .LVU6846
 26215 000c B4F9E267 		ldrsh	r6, [r4, #2018]
 26216              	.LVL2033:
5621:src/xeq.c     **** 	int size = (arg << (is_dblmode() ? 3 : 2)) + 2;
 26217              		.loc 1 5621 2 is_stmt 1 view .LVU6847
 26218              	.LBB3526:
 26219              	.LBI3523:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 26220              		.loc 1 932 5 view .LVU6848
 26221              	.LBB3525:
 933:src/xeq.c     **** }
 26222              		.loc 1 933 2 view .LVU6849
 933:src/xeq.c     **** }
 26223              		.loc 1 933 24 is_stmt 0 view .LVU6850
 26224 0010 44F20103 		movw	r3, #16385
 26225              	.LBE3525:
 26226              	.LBE3526:
 26227              		.loc 1 5621 39 view .LVU6851
 26228 0014 1340     		ands	r3, r3, r2
 26229 0016 B3F5804F 		cmp	r3, #16384
 26230 001a 0CBF     		ite	eq
 26231 001c 0325     		moveq	r5, #3
 26232 001e 0225     		movne	r5, #2
 26233              		.loc 1 5621 18 view .LVU6852
 26234 0020 A840     		lsls	r0, r0, r5
 26235              	.LVL2034:
 26236              		.loc 1 5621 45 view .LVU6853
 26237 0022 851C     		adds	r5, r0, #2
 26238              	.LVL2035:
5622:src/xeq.c     **** 	const unsigned short marker = LOCAL_MARKER | size;
 26239              		.loc 1 5622 2 is_stmt 1 view .LVU6854
 26240              		.loc 1 5622 45 is_stmt 0 view .LVU6855
 26241 0024 1FFA85F8 		uxth	r8, r5
 26242              	.LVL2036:
5623:src/xeq.c     **** 	int old_size = 0;
 26243              		.loc 1 5623 2 is_stmt 1 view .LVU6856
5624:src/xeq.c     **** 	short unsigned int old_flags = 0;
 26244              		.loc 1 5624 2 view .LVU6857
5625:src/xeq.c     **** 
5626:src/xeq.c     **** 	if (sp != 0 && sp == LocalRegs) {
 26245              		.loc 1 5626 2 view .LVU6858
 26246              		.loc 1 5626 5 is_stmt 0 view .LVU6859
 26247 0028 7EB9     		cbnz	r6, .L1874
 26248              	.LVL2037:
5627:src/xeq.c     **** 		// resize required
5628:src/xeq.c     **** 		old_size = local_levels();
5629:src/xeq.c     **** 		sp += old_size;
5630:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
5631:src/xeq.c     **** 	}
5632:src/xeq.c     **** 	// compute space needed
5633:src/xeq.c     **** 	sp -= size;
ARM GAS  /tmp/cc0UaEmF.s 			page 670


 26249              		.loc 1 5633 2 is_stmt 1 view .LVU6860
5634:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26250              		.loc 1 5634 10 is_stmt 0 view .LVU6861
 26251 002a 4D4B     		ldr	r3, .L1892+4
5633:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26252              		.loc 1 5633 5 view .LVU6862
 26253 002c C8F10004 		rsb	r4, r8, #0
 26254              		.loc 1 5634 5 view .LVU6863
 26255 0030 1B68     		ldr	r3, [r3]
5633:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26256              		.loc 1 5633 5 view .LVU6864
 26257 0032 24B2     		sxth	r4, r4
 26258              	.LVL2038:
 26259              		.loc 1 5634 2 is_stmt 1 view .LVU6865
 26260              		.loc 1 5634 6 is_stmt 0 view .LVU6866
 26261 0034 6242     		rsbs	r2, r4, #0
 26262              		.loc 1 5634 5 view .LVU6867
 26263 0036 9A42     		cmp	r2, r3
 26264 0038 42DC     		bgt	.L1880
 26265 003a 4FEA4409 		lsl	r9, r4, #1
 26266 003e DFF828B1 		ldr	fp, .L1892+12
 26267 0042 4FEA450A 		lsl	r10, r5, #1
 26268 0046 4B46     		mov	r3, r9
 26269 0048 13E0     		b	.L1878
 26270              	.LVL2039:
 26271              	.L1874:
5626:src/xeq.c     **** 		// resize required
 26272              		.loc 1 5626 23 discriminator 1 view .LVU6868
 26273 004a B4F9DE47 		ldrsh	r4, [r4, #2014]
5626:src/xeq.c     **** 		// resize required
 26274              		.loc 1 5626 14 discriminator 1 view .LVU6869
 26275 004e B442     		cmp	r4, r6
 26276 0050 28D0     		beq	.L1879
5633:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26277              		.loc 1 5633 2 is_stmt 1 view .LVU6870
 26278              		.loc 1 5634 10 is_stmt 0 view .LVU6871
 26279 0052 434B     		ldr	r3, .L1892+4
5633:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26280              		.loc 1 5633 5 view .LVU6872
 26281 0054 A6EB0804 		sub	r4, r6, r8
 26282              		.loc 1 5634 5 view .LVU6873
 26283 0058 1B68     		ldr	r3, [r3]
5633:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26284              		.loc 1 5633 5 view .LVU6874
 26285 005a 24B2     		sxth	r4, r4
 26286              	.LVL2040:
 26287              		.loc 1 5634 2 is_stmt 1 view .LVU6875
 26288              		.loc 1 5634 6 is_stmt 0 view .LVU6876
 26289 005c 6242     		rsbs	r2, r4, #0
 26290              		.loc 1 5634 5 view .LVU6877
 26291 005e 9A42     		cmp	r2, r3
 26292 0060 2EDC     		bgt	.L1880
 26293 0062 4FEA4409 		lsl	r9, r4, #1
 26294 0066 DFF800B1 		ldr	fp, .L1892+12
 26295 006a 4FEA450A 		lsl	r10, r5, #1
 26296 006e 4B46     		mov	r3, r9
5624:src/xeq.c     **** 
ARM GAS  /tmp/cc0UaEmF.s 			page 671


 26297              		.loc 1 5624 21 view .LVU6878
 26298 0070 0026     		movs	r6, #0
 26299              	.LVL2041:
 26300              	.L1878:
5635:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
5636:src/xeq.c     **** 		return;
5637:src/xeq.c     **** 	}
5638:src/xeq.c     **** 	if ( old_size > 0 ) {
5639:src/xeq.c     **** 		// move previous contents to new destination
5640:src/xeq.c     **** 		int n;
5641:src/xeq.c     **** 		if (size > old_size) {
5642:src/xeq.c     **** 			n = old_size;
5643:src/xeq.c     **** 			size -= old_size;
5644:src/xeq.c     **** 		}
5645:src/xeq.c     **** 		else {
5646:src/xeq.c     **** 			n = size;
5647:src/xeq.c     **** 			size = 0;
5648:src/xeq.c     **** 		}
5649:src/xeq.c     **** 		xcopy(RetStk + sp, RetStk + LocalRegs, n + n);
5650:src/xeq.c     **** 	}
5651:src/xeq.c     **** 	// fill the rest with 0
5652:src/xeq.c     **** 	xset(RetStk + sp + old_size, 0, size + size);
 26301              		.loc 1 5652 2 is_stmt 1 view .LVU6879
 26302              		.loc 1 5652 19 is_stmt 0 view .LVU6880
 26303 0072 DBF80000 		ldr	r0, [fp]
 26304              		.loc 1 5652 2 view .LVU6881
 26305 0076 5246     		mov	r2, r10
 26306 0078 1844     		add	r0, r0, r3
 26307 007a 0021     		movs	r1, #0
 26308 007c FFF7FEFF 		bl	xset
 26309              	.LVL2042:
5653:src/xeq.c     **** 
5654:src/xeq.c     **** 	// set marker, pointers and flags
5655:src/xeq.c     **** 	RetStk[sp] = marker;
 26310              		.loc 1 5655 2 is_stmt 1 view .LVU6882
5656:src/xeq.c     **** 	RetStkPtr = LocalRegs = sp;
 26311              		.loc 1 5656 14 is_stmt 0 view .LVU6883
 26312 0080 3B68     		ldr	r3, [r7]
5655:src/xeq.c     **** 	RetStkPtr = LocalRegs = sp;
 26313              		.loc 1 5655 13 view .LVU6884
 26314 0082 DBF80020 		ldr	r2, [fp]
5622:src/xeq.c     **** 	int old_size = 0;
 26315              		.loc 1 5622 23 view .LVU6885
 26316 0086 48F48058 		orr	r8, r8, #4096
 26317              	.LVL2043:
5655:src/xeq.c     **** 	RetStkPtr = LocalRegs = sp;
 26318              		.loc 1 5655 13 view .LVU6886
 26319 008a 22F80980 		strh	r8, [r2, r9]	@ movhi
 26320              		.loc 1 5656 2 is_stmt 1 view .LVU6887
5657:src/xeq.c     **** 	*flag_word(LOCAL_FLAG_BASE, NULL) = old_flags;
 26321              		.loc 1 5657 3 is_stmt 0 view .LVU6888
 26322 008e 0021     		movs	r1, #0
5656:src/xeq.c     **** 	*flag_word(LOCAL_FLAG_BASE, NULL) = old_flags;
 26323              		.loc 1 5656 24 view .LVU6889
 26324 0090 A3F8DE47 		strh	r4, [r3, #2014]	@ movhi
5656:src/xeq.c     **** 	*flag_word(LOCAL_FLAG_BASE, NULL) = old_flags;
 26325              		.loc 1 5656 12 view .LVU6890
ARM GAS  /tmp/cc0UaEmF.s 			page 672


 26326 0094 A3F8E247 		strh	r4, [r3, #2018]	@ movhi
 26327              		.loc 1 5657 2 is_stmt 1 view .LVU6891
 26328              		.loc 1 5657 3 is_stmt 0 view .LVU6892
 26329 0098 7020     		movs	r0, #112
 26330 009a FFF7FEFF 		bl	flag_word
 26331              	.LVL2044:
 26332              		.loc 1 5657 36 view .LVU6893
 26333 009e 0680     		strh	r6, [r0]	@ movhi
 26334              	.L1872:
5658:src/xeq.c     **** }
 26335              		.loc 1 5658 1 view .LVU6894
 26336 00a0 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 26337              	.LVL2045:
 26338              	.L1879:
5628:src/xeq.c     **** 		sp += old_size;
 26339              		.loc 1 5628 3 is_stmt 1 view .LVU6895
 26340              	.LBB3527:
 26341              	.LBI3527:
 214:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 26342              		.loc 1 214 5 view .LVU6896
 26343              	.LBB3528:
 215:src/xeq.c     **** }
 26344              		.loc 1 215 2 view .LVU6897
 215:src/xeq.c     **** }
 26345              		.loc 1 215 57 is_stmt 0 view .LVU6898
 26346 00a4 002C     		cmp	r4, #0
 26347 00a6 13DB     		blt	.L1889
 215:src/xeq.c     **** }
 26348              		.loc 1 215 57 view .LVU6899
 26349              	.LBE3528:
 26350              	.LBE3527:
5629:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 26351              		.loc 1 5629 3 is_stmt 1 view .LVU6900
 26352              	.LVL2046:
5630:src/xeq.c     **** 	}
 26353              		.loc 1 5630 3 view .LVU6901
5630:src/xeq.c     **** 	}
 26354              		.loc 1 5630 16 is_stmt 0 view .LVU6902
 26355 00a8 0021     		movs	r1, #0
 26356              	.LVL2047:
5630:src/xeq.c     **** 	}
 26357              		.loc 1 5630 16 view .LVU6903
 26358 00aa 7020     		movs	r0, #112
 26359 00ac FFF7FEFF 		bl	flag_word
 26360              	.LVL2048:
5634:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 26361              		.loc 1 5634 10 view .LVU6904
 26362 00b0 2B4B     		ldr	r3, .L1892+4
5633:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26363              		.loc 1 5633 5 view .LVU6905
 26364 00b2 A4EB0804 		sub	r4, r4, r8
 26365              	.LVL2049:
5634:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 26366              		.loc 1 5634 5 view .LVU6906
 26367 00b6 1B68     		ldr	r3, [r3]
5633:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26368              		.loc 1 5633 5 view .LVU6907
ARM GAS  /tmp/cc0UaEmF.s 			page 673


 26369 00b8 24B2     		sxth	r4, r4
5634:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 26370              		.loc 1 5634 6 view .LVU6908
 26371 00ba 6242     		rsbs	r2, r4, #0
 26372              	.LVL2050:
5633:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26373              		.loc 1 5633 2 is_stmt 1 view .LVU6909
5634:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 26374              		.loc 1 5634 2 view .LVU6910
5634:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 26375              		.loc 1 5634 5 is_stmt 0 view .LVU6911
 26376 00bc 9A42     		cmp	r2, r3
 26377 00be 3EDD     		ble	.L1890
 26378              	.LVL2051:
 26379              	.L1880:
5635:src/xeq.c     **** 		return;
 26380              		.loc 1 5635 3 is_stmt 1 view .LVU6912
 26381              	.LBB3530:
 26382              	.LBI3530:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26383              		.loc 1 537 5 view .LVU6913
 26384              	.LBB3531:
 538:src/xeq.c     **** 		Error = e;
 26385              		.loc 1 538 2 view .LVU6914
 538:src/xeq.c     **** 		Error = e;
 26386              		.loc 1 538 12 is_stmt 0 view .LVU6915
 26387 00c0 284B     		ldr	r3, .L1892+8
 538:src/xeq.c     **** 		Error = e;
 26388              		.loc 1 538 5 view .LVU6916
 26389 00c2 1A68     		ldr	r2, [r3]
 26390 00c4 002A     		cmp	r2, #0
 26391 00c6 EBD1     		bne	.L1872
 26392              	.LVL2052:
 26393              	.LBB3532:
 26394              	.LBI3532:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26395              		.loc 1 537 5 is_stmt 1 view .LVU6917
 26396              	.LBB3533:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 26397              		.loc 1 539 3 view .LVU6918
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 26398              		.loc 1 539 9 is_stmt 0 view .LVU6919
 26399 00c8 0B22     		movs	r2, #11
 26400 00ca 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 26401              		.loc 1 540 3 is_stmt 1 view .LVU6920
 26402              	.LBE3533:
 26403              	.LBE3532:
 26404              	.LBE3531:
 26405              	.LBE3530:
 26406              		.loc 1 5658 1 is_stmt 0 view .LVU6921
 26407 00cc BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 26408              	.LVL2053:
 26409              	.L1889:
 26410              	.LBB3534:
 26411              	.LBB3529:
 215:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 674


 26412              		.loc 1 215 25 view .LVU6922
 26413 00d0 DFF894B0 		ldr	fp, .L1892+12
 26414 00d4 DBF80030 		ldr	r3, [fp]
 26415 00d8 33F81490 		ldrh	r9, [r3, r4, lsl #1]
 26416 00dc C9F30B09 		ubfx	r9, r9, #0, #12
 26417              	.LVL2054:
 215:src/xeq.c     **** }
 26418              		.loc 1 215 25 view .LVU6923
 26419              	.LBE3529:
 26420              	.LBE3534:
5629:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 26421              		.loc 1 5629 3 is_stmt 1 view .LVU6924
5629:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 26422              		.loc 1 5629 6 is_stmt 0 view .LVU6925
 26423 00e0 4C44     		add	r4, r4, r9
5630:src/xeq.c     **** 	}
 26424              		.loc 1 5630 16 view .LVU6926
 26425 00e2 0021     		movs	r1, #0
 26426              	.LVL2055:
5630:src/xeq.c     **** 	}
 26427              		.loc 1 5630 16 view .LVU6927
 26428 00e4 7020     		movs	r0, #112
 26429 00e6 FFF7FEFF 		bl	flag_word
 26430              	.LVL2056:
5629:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 26431              		.loc 1 5629 6 view .LVU6928
 26432 00ea A4B2     		uxth	r4, r4
 26433              	.LVL2057:
5630:src/xeq.c     **** 	}
 26434              		.loc 1 5630 3 is_stmt 1 view .LVU6929
5634:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 26435              		.loc 1 5634 10 is_stmt 0 view .LVU6930
 26436 00ec 1C4B     		ldr	r3, .L1892+4
5630:src/xeq.c     **** 	}
 26437              		.loc 1 5630 13 view .LVU6931
 26438 00ee 0688     		ldrh	r6, [r0]
 26439              	.LVL2058:
5633:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26440              		.loc 1 5633 2 is_stmt 1 view .LVU6932
5634:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 26441              		.loc 1 5634 5 is_stmt 0 view .LVU6933
 26442 00f0 1B68     		ldr	r3, [r3]
5633:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26443              		.loc 1 5633 5 view .LVU6934
 26444 00f2 A4EB0804 		sub	r4, r4, r8
 26445              	.LVL2059:
5633:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26446              		.loc 1 5633 5 view .LVU6935
 26447 00f6 24B2     		sxth	r4, r4
 26448              	.LVL2060:
5634:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 26449              		.loc 1 5634 2 is_stmt 1 view .LVU6936
5634:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 26450              		.loc 1 5634 6 is_stmt 0 view .LVU6937
 26451 00f8 6242     		rsbs	r2, r4, #0
5634:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 26452              		.loc 1 5634 5 view .LVU6938
ARM GAS  /tmp/cc0UaEmF.s 			page 675


 26453 00fa 9A42     		cmp	r2, r3
 26454 00fc E0DC     		bgt	.L1880
5638:src/xeq.c     **** 		// move previous contents to new destination
 26455              		.loc 1 5638 2 is_stmt 1 view .LVU6939
5638:src/xeq.c     **** 		// move previous contents to new destination
 26456              		.loc 1 5638 5 is_stmt 0 view .LVU6940
 26457 00fe B9F1000F 		cmp	r9, #0
 26458 0102 25D0     		beq	.L1891
 26459              	.LBB3535:
5640:src/xeq.c     **** 		if (size > old_size) {
 26460              		.loc 1 5640 3 is_stmt 1 view .LVU6941
5641:src/xeq.c     **** 			n = old_size;
 26461              		.loc 1 5641 3 view .LVU6942
5649:src/xeq.c     **** 	}
 26462              		.loc 1 5649 31 is_stmt 0 view .LVU6943
 26463 0104 3B68     		ldr	r3, [r7]
5649:src/xeq.c     **** 	}
 26464              		.loc 1 5649 3 view .LVU6944
 26465 0106 DBF80000 		ldr	r0, [fp]
5649:src/xeq.c     **** 	}
 26466              		.loc 1 5649 29 view .LVU6945
 26467 010a B3F9DE17 		ldrsh	r1, [r3, #2014]
5641:src/xeq.c     **** 			n = old_size;
 26468              		.loc 1 5641 6 view .LVU6946
 26469 010e 4D45     		cmp	r5, r9
5642:src/xeq.c     **** 			size -= old_size;
 26470              		.loc 1 5642 4 is_stmt 1 view .LVU6947
 26471              	.LVL2061:
5643:src/xeq.c     **** 		}
 26472              		.loc 1 5643 4 view .LVU6948
5643:src/xeq.c     **** 		}
 26473              		.loc 1 5643 9 is_stmt 0 view .LVU6949
 26474 0110 C2BF     		ittt	gt
 26475 0112 A5EB0905 		subgt	r5, r5, r9
 26476              	.LVL2062:
5643:src/xeq.c     **** 		}
 26477              		.loc 1 5643 9 view .LVU6950
 26478 0116 4FEA450A 		lslgt	r10, r5, #1
 26479 011a 4D46     		movgt	r5, r9
 26480              	.LVL2063:
5649:src/xeq.c     **** 	}
 26481              		.loc 1 5649 3 is_stmt 1 view .LVU6951
 26482 011c 00EB4101 		add	r1, r0, r1, lsl #1
 26483 0120 4FEA4502 		lsl	r2, r5, #1
 26484 0124 00EB4400 		add	r0, r0, r4, lsl #1
 26485 0128 D8BF     		it	le
 26486 012a 4FF0000A 		movle	r10, #0
 26487 012e FFF7FEFF 		bl	xcopy
 26488              	.LVL2064:
 26489 0132 04EB0903 		add	r3, r4, r9
 26490 0136 5B00     		lsls	r3, r3, #1
5649:src/xeq.c     **** 	}
 26491              		.loc 1 5649 16 is_stmt 0 view .LVU6952
 26492 0138 4FEA4409 		lsl	r9, r4, #1
 26493              	.LVL2065:
5649:src/xeq.c     **** 	}
 26494              		.loc 1 5649 16 view .LVU6953
ARM GAS  /tmp/cc0UaEmF.s 			page 676


 26495 013c 99E7     		b	.L1878
 26496              	.LVL2066:
 26497              	.L1890:
5649:src/xeq.c     **** 	}
 26498              		.loc 1 5649 16 view .LVU6954
 26499 013e 4FEA4409 		lsl	r9, r4, #1
 26500              	.LBE3535:
5630:src/xeq.c     **** 	}
 26501              		.loc 1 5630 13 view .LVU6955
 26502 0142 0688     		ldrh	r6, [r0]
 26503 0144 DFF820B0 		ldr	fp, .L1892+12
 26504 0148 4FEA450A 		lsl	r10, r5, #1
 26505 014c 4B46     		mov	r3, r9
 26506 014e 90E7     		b	.L1878
 26507              	.LVL2067:
 26508              	.L1891:
5630:src/xeq.c     **** 	}
 26509              		.loc 1 5630 13 view .LVU6956
 26510 0150 4FEA4409 		lsl	r9, r4, #1
 26511              	.LVL2068:
5630:src/xeq.c     **** 	}
 26512              		.loc 1 5630 13 view .LVU6957
 26513 0154 4FEA450A 		lsl	r10, r5, #1
5638:src/xeq.c     **** 		// move previous contents to new destination
 26514              		.loc 1 5638 5 view .LVU6958
 26515 0158 4B46     		mov	r3, r9
 26516 015a 8AE7     		b	.L1878
 26517              	.L1893:
 26518              		.align	2
 26519              	.L1892:
 26520 015c 00000000 		.word	main_ram
 26521 0160 00000000 		.word	RetStkSize
 26522 0164 00000000 		.word	Error
 26523 0168 00000000 		.word	RetStk
 26524              		.cfi_endproc
 26525              	.LFE260:
 26527              		.section	.text.cmdxout,"ax",%progbits
 26528              		.align	1
 26529              		.p2align 2,,3
 26530              		.global	cmdxout
 26531              		.syntax unified
 26532              		.thumb
 26533              		.thumb_func
 26534              		.fpu fpv4-sp-d16
 26536              	cmdxout:
 26537              	.LVL2069:
 26538              	.LFB262:
5659:src/xeq.c     **** 
5660:src/xeq.c     **** 
5661:src/xeq.c     **** /*
5662:src/xeq.c     ****  *  xIN: Setup an environment for XROM based math routines:
5663:src/xeq.c     ****  *
5664:src/xeq.c     ****  *  - 12 Private double precision stack & special registers X to K
5665:src/xeq.c     ****  *  - private return stack for local flags & registers
5666:src/xeq.c     ****  *  - 6 system flags
5667:src/xeq.c     ****  *
5668:src/xeq.c     ****  *  Argument:
ARM GAS  /tmp/cc0UaEmF.s 			page 677


5669:src/xeq.c     ****  *      noLocals - bit 7
5670:src/xeq.c     ****  *      out      - bits 4..5
5671:src/xeq.c     ****  *      in       - bits 2..4		
5672:src/xeq.c     ****  *      setLastX - bit 1
5673:src/xeq.c     ****  *      complex  - bit 0
5674:src/xeq.c     ****  *
5675:src/xeq.c     ****  *  Local flags:
5676:src/xeq.c     ****  *      .00 to .09 are free for general use.
5677:src/xeq.c     ****  *	.10 - stack_depth as previously set by user, don't touch it!
5678:src/xeq.c     ****  *	.11 - mode_double as previously set by user, don't touch it!
5679:src/xeq.c     ****  *      .12 - complex, from argument, can be modified.
5680:src/xeq.c     ****  *	.13 - setLastX, from argumment, can be modified.
5681:src/xeq.c     ****  *	.14 - state_lift as desired on exit, set to 1 by default, can be modified.
5682:src/xeq.c     ****  *      .15 - reserved, indicates that xIN is active, set to 1, don't touch it!
5683:src/xeq.c     ****  *
5684:src/xeq.c     ****  *  If the call is repeated only the argument values are reevaluated.
5685:src/xeq.c     ****  */
5686:src/xeq.c     **** void cmdxin(unsigned int arg, enum rarg op) {
5687:src/xeq.c     **** 
5688:src/xeq.c     **** 	int i;
5689:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5690:src/xeq.c     **** 	REGISTER *previousLocals = NULL;
5691:src/xeq.c     **** 	unsigned short previousFlags = 0;
5692:src/xeq.c     **** 	int num_locals = 0;
5693:src/xeq.c     **** #endif
5694:src/xeq.c     **** #ifndef REALBUILD
5695:src/xeq.c     **** 	/* This should never happen in a real build but it causes havoc writing
5696:src/xeq.c     **** 	 * xrom code, so trap it here.
5697:src/xeq.c     **** 	 */
5698:src/xeq.c     **** 	if (XromFlags.xIN) {
5699:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
5700:src/xeq.c     **** 		return;
5701:src/xeq.c     **** 	}
5702:src/xeq.c     **** #endif
5703:src/xeq.c     **** 
5704:src/xeq.c     **** 	// Setup the XromLocal and XromParams structures in volatile RAM
5705:src/xeq.c     **** 	// fill with 0
5706:src/xeq.c     **** 	xset(&XromLocal, 0, sizeof(XromLocal));
5707:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
5708:src/xeq.c     **** 
5709:src/xeq.c     **** 	// Flags
5710:src/xeq.c     **** 	XromFlags.state_lift_in = get_lift();
5711:src/xeq.c     **** 	XromFlags.stack_depth = UState.stack_depth;
5712:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
5713:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
5714:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
5715:src/xeq.c     **** 	XromFlags.state_lift = 1;
5716:src/xeq.c     **** 	XromFlags.xIN = 1;
5717:src/xeq.c     **** 
5718:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5719:src/xeq.c     **** 	// Save pointers to original local data
5720:src/xeq.c     **** 	if ((arg & 0x80) != 0 && LocalRegs < 0) {
5721:src/xeq.c     **** 		XromFlags.copyLocals = 1;
5722:src/xeq.c     **** 		previousFlags = *flag_word(LOCAL_FLAG_BASE, NULL);
5723:src/xeq.c     **** 		previousLocals = get_reg_n(LOCAL_REG_BASE);
5724:src/xeq.c     **** 		num_locals = local_regs();
5725:src/xeq.c     **** 	}
ARM GAS  /tmp/cc0UaEmF.s 			page 678


5726:src/xeq.c     **** #endif
5727:src/xeq.c     **** 	// Establish local return stack
5728:src/xeq.c     **** 	XromUserRetStk = RetStk;
5729:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
5730:src/xeq.c     **** 
5731:src/xeq.c     **** 	RetStk = XromRetStk;
5732:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5733:src/xeq.c     **** 	RetStkPtr = 0;			// Locals will be allocated later
5734:src/xeq.c     **** #else
5735:src/xeq.c     **** 	LocalRegs = RetStkPtr = -2;	// Allocate just the local flags
5736:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
5737:src/xeq.c     **** #endif
5738:src/xeq.c     **** 
5739:src/xeq.c     **** 	// Parse the argument into fields
5740:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5741:src/xeq.c     **** 	XromFlags.setLastX = (arg & 0x20) != 0;
5742:src/xeq.c     **** 	XromFlags.complex = (arg & 0x40) != 0;
5743:src/xeq.c     **** 	XromIn = (arg & 0x1f) % 5;
5744:src/xeq.c     **** 	XromOut = (arg & 0x1f) / 5;
5745:src/xeq.c     **** #else
5746:src/xeq.c     **** 	XromFlags.setLastX = (arg & 0x40) != 0;
5747:src/xeq.c     **** 	XromFlags.complex = (arg & 0x80) != 0;
5748:src/xeq.c     **** 	XromIn = (arg & 0x7);
5749:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
5750:src/xeq.c     **** #endif
5751:src/xeq.c     **** 	if (XromFlags.complex) {
5752:src/xeq.c     **** 		// Complex arguments are always in pairs
5753:src/xeq.c     **** 		XromIn <<= 1;
5754:src/xeq.c     **** 		XromOut <<= 1;
5755:src/xeq.c     **** 	}
5756:src/xeq.c     **** 
5757:src/xeq.c     ****         UState.rounding_mode = 0;
5758:src/xeq.c     **** 
5759:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5760:src/xeq.c     **** 	// Allocate the local frame
5761:src/xeq.c     **** 	LocalRegs = 0;
5762:src/xeq.c     **** 	UState.mode_double = 1;		// Needed to allocate enough registers
5763:src/xeq.c     **** 	cmdlocr(num_locals, RARG_LOCR);
5764:src/xeq.c     **** 	if (XromFlags.copyLocals)
5765:src/xeq.c     **** 		*flag_word(LOCAL_FLAG_BASE, NULL) = previousFlags;
5766:src/xeq.c     **** #endif
5767:src/xeq.c     **** 	// Switch to double precision mode
5768:src/xeq.c     **** 	if (XromFlags.mode_int) {
5769:src/xeq.c     **** 		// Convert integers to decimal128
5770:src/xeq.c     **** #ifndef ENABLE_COPYLOCALS
5771:src/xeq.c     **** 		UState.mode_double = 1;
5772:src/xeq.c     **** #endif
5773:src/xeq.c     **** 		op_float(OP_FLOAT_XIN);
5774:src/xeq.c     **** 		// Do not copy the local registers because we don't use this case anyway
5775:src/xeq.c     **** 	}
5776:src/xeq.c     **** 	else if (XromFlags.mode_double) {
5777:src/xeq.c     **** 		// No conversion necessary
5778:src/xeq.c     **** 		xcopy(XromStack, StackBase, sizeof(XromStack));
5779:src/xeq.c     **** 		StackBase = XromStack;
5780:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5781:src/xeq.c     **** 		if (XromFlags.copyLocals)
5782:src/xeq.c     **** 			move_regs(get_reg_n(LOCAL_REG_BASE), previousLocals, num_locals);
ARM GAS  /tmp/cc0UaEmF.s 			page 679


5783:src/xeq.c     **** #endif
5784:src/xeq.c     **** 	}
5785:src/xeq.c     **** 	else {
5786:src/xeq.c     **** 		// Convert decimal64 to decinal128
5787:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5788:src/xeq.c     **** 		UState.mode_double = 0;		// This was the original state before xIN
5789:src/xeq.c     **** 		op_double(OP_DBLON);		// Now mode_double should be set again
5790:src/xeq.c     **** 		if (XromFlags.copyLocals) {
5791:src/xeq.c     **** 			decimal64  *src  = &(previousLocals->s);
5792:src/xeq.c     **** 			decimal128 *dest = &(get_reg_n(LOCAL_REG_BASE)->d);
5793:src/xeq.c     **** 			while (num_locals--)
5794:src/xeq.c     **** 				packed128_from_packed(dest++, src++);
5795:src/xeq.c     **** 		}
5796:src/xeq.c     **** #else
5797:src/xeq.c     **** 		op_double(OP_DBLON);		// Now mode_double should be set again
5798:src/xeq.c     **** #endif
5799:src/xeq.c     **** 	}
5800:src/xeq.c     **** 
5801:src/xeq.c     **** 	// Set stack size to 8 and turn on stack_lift
5802:src/xeq.c     **** 	set_lift();
5803:src/xeq.c     **** 	UState.stack_depth = 1;
5804:src/xeq.c     **** 
5805:src/xeq.c     **** 	// check for any NaNs in input
5806:src/xeq.c     **** 	for (i = 0; i < XromIn; ++i) {
5807:src/xeq.c     **** 		decNumber x;
5808:src/xeq.c     **** 		if (decNumberIsNaN(getRegister(&x, regX_idx + i))) {
5809:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
5810:src/xeq.c     **** 			// domain error
5811:src/xeq.c     **** 			if (get_user_flag(NAN_FLAG)) {
5812:src/xeq.c     **** 				for (i = 0; i < XromOut; ++i)
5813:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
5814:src/xeq.c     **** 				// Early exit of routine
5815:src/xeq.c     **** 				cmdxout(0, RARG_XROM_OUT);
5816:src/xeq.c     **** 			} 
5817:src/xeq.c     **** 			else
5818:src/xeq.c     **** 				report_err(ERR_DOMAIN);	// this will do all the cleanup
5819:src/xeq.c     **** 			return;
5820:src/xeq.c     **** 		}
5821:src/xeq.c     **** 	}
5822:src/xeq.c     **** }
5823:src/xeq.c     **** 
5824:src/xeq.c     **** /*
5825:src/xeq.c     ****  *  xOUT: Return from an XROM routine that has previously called xIN
5826:src/xeq.c     ****  *  Argument:
5827:src/xeq.c     ****  *     bit 0 set - do a RTN+1
5828:src/xeq.c     ****  *     bit 1 set - leave I alone even with a complex result
5829:src/xeq.c     ****  */
5830:src/xeq.c     **** void cmdxout(unsigned int arg, enum rarg op) {
 26539              		.loc 1 5830 46 is_stmt 1 view -0
 26540              		.cfi_startproc
 26541              		@ args = 0, pretend = 0, frame = 56
 26542              		@ frame_needed = 0, uses_anonymous_args = 0
5831:src/xeq.c     **** 	int i, dbl, intm;
 26543              		.loc 1 5831 2 view .LVU6960
5832:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5833:src/xeq.c     **** 	unsigned short flags = *flag_word(LOCAL_FLAG_BASE, NULL);
5834:src/xeq.c     **** 	REGISTER *locals = get_reg_n(LOCAL_REG_BASE);
ARM GAS  /tmp/cc0UaEmF.s 			page 680


5835:src/xeq.c     **** 	int num_locals = local_regs();
5836:src/xeq.c     **** #endif
5837:src/xeq.c     **** #ifndef REALBUILD
5838:src/xeq.c     **** 	// shouldn't happen in final build
5839:src/xeq.c     **** 	if (! XromFlags.xIN) {
 26544              		.loc 1 5839 2 view .LVU6961
5830:src/xeq.c     **** 	int i, dbl, intm;
 26545              		.loc 1 5830 46 is_stmt 0 view .LVU6962
 26546 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 26547              		.cfi_def_cfa_offset 36
 26548              		.cfi_offset 4, -36
 26549              		.cfi_offset 5, -32
 26550              		.cfi_offset 6, -28
 26551              		.cfi_offset 7, -24
 26552              		.cfi_offset 8, -20
 26553              		.cfi_offset 9, -16
 26554              		.cfi_offset 10, -12
 26555              		.cfi_offset 11, -8
 26556              		.cfi_offset 14, -4
 26557              		.loc 1 5839 6 view .LVU6963
 26558 0004 774C     		ldr	r4, .L1940
 26559              		.loc 1 5839 5 view .LVU6964
 26560 0006 94F90130 		ldrsb	r3, [r4, #1]
 26561 000a 002B     		cmp	r3, #0
5830:src/xeq.c     **** 	int i, dbl, intm;
 26562              		.loc 1 5830 46 view .LVU6965
 26563 000c 8FB0     		sub	sp, sp, #60
 26564              		.cfi_def_cfa_offset 96
 26565              		.loc 1 5839 5 view .LVU6966
 26566 000e 07DB     		blt	.L1895
5840:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 26567              		.loc 1 5840 3 is_stmt 1 view .LVU6967
 26568              	.LVL2070:
 26569              	.LBB3559:
 26570              	.LBI3559:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26571              		.loc 1 537 5 view .LVU6968
 26572              	.LBB3560:
 538:src/xeq.c     **** 		Error = e;
 26573              		.loc 1 538 2 view .LVU6969
 538:src/xeq.c     **** 		Error = e;
 26574              		.loc 1 538 12 is_stmt 0 view .LVU6970
 26575 0010 754B     		ldr	r3, .L1940+4
 538:src/xeq.c     **** 		Error = e;
 26576              		.loc 1 538 5 view .LVU6971
 26577 0012 1A68     		ldr	r2, [r3]
 26578 0014 0AB9     		cbnz	r2, .L1894
 26579              	.LVL2071:
 26580              	.LBB3561:
 26581              	.LBI3561:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26582              		.loc 1 537 5 is_stmt 1 view .LVU6972
 26583              	.LBB3562:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 26584              		.loc 1 539 3 view .LVU6973
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 26585              		.loc 1 539 9 is_stmt 0 view .LVU6974
ARM GAS  /tmp/cc0UaEmF.s 			page 681


 26586 0016 0722     		movs	r2, #7
 26587 0018 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 26588              		.loc 1 540 3 is_stmt 1 view .LVU6975
 26589              	.LVL2072:
 26590              	.L1894:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 26591              		.loc 1 540 3 is_stmt 0 view .LVU6976
 26592              	.LBE3562:
 26593              	.LBE3561:
 26594              	.LBE3560:
 26595              	.LBE3559:
5841:src/xeq.c     **** 		return;
5842:src/xeq.c     **** 	}
5843:src/xeq.c     **** #endif
5844:src/xeq.c     **** 	// End special handling
5845:src/xeq.c     **** 	XromFlags.xIN = 0;
5846:src/xeq.c     **** 
5847:src/xeq.c     **** 	// Restore the global return stack
5848:src/xeq.c     **** 	RetStk = XromUserRetStk;
5849:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
5850:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
5851:src/xeq.c     **** 
5852:src/xeq.c     **** 	// RTN or RTN+1 depending on bit 0 of argument
5853:src/xeq.c     **** 	do_rtn(arg & 1);
5854:src/xeq.c     **** 
5855:src/xeq.c     **** 	// Switch back to user stack settings
5856:src/xeq.c     **** 	dbl = UState.mode_double = XromFlags.mode_double;
5857:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
5858:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
5859:src/xeq.c     **** 	UState.stack_depth = XromFlags.stack_depth;
5860:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
5861:src/xeq.c     **** 
5862:src/xeq.c     **** 	// Last X handling and complex flag
5863:src/xeq.c     **** 	if (XromFlags.setLastX) {
5864:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
5865:src/xeq.c     **** 			setlastXY();
5866:src/xeq.c     **** 		else
5867:src/xeq.c     **** 			setlastX();
5868:src/xeq.c     **** 	}
5869:src/xeq.c     **** 
5870:src/xeq.c     **** 	// Move the stack according to the in/out fields
5871:src/xeq.c     **** 	i = (int) XromOut - (int) XromIn;
5872:src/xeq.c     **** 	if (XromFlags.complex) {
5873:src/xeq.c     **** 		set_was_complex();
5874:src/xeq.c     **** 		while (i < 0) {
5875:src/xeq.c     **** 			// different stack handling in complex mode
5876:src/xeq.c     **** 			// more to consume then to push back
5877:src/xeq.c     **** 			lower2();
5878:src/xeq.c     **** 			i += 2;
5879:src/xeq.c     **** 		}
5880:src/xeq.c     **** 	}
5881:src/xeq.c     **** 	else {
5882:src/xeq.c     **** 		while (i < 0) {
5883:src/xeq.c     **** 			// more to consume then to push back
5884:src/xeq.c     **** 			lower();	
5885:src/xeq.c     **** 			++i;
ARM GAS  /tmp/cc0UaEmF.s 			page 682


5886:src/xeq.c     **** 		}
5887:src/xeq.c     **** 	}
5888:src/xeq.c     **** 	if (i > 0) {
5889:src/xeq.c     **** 		// more to push back then to consume
5890:src/xeq.c     **** 		if (! XromFlags.state_lift_in)
5891:src/xeq.c     **** 			--i;
5892:src/xeq.c     **** 		while (i > 0) {
5893:src/xeq.c     **** 			lift();
5894:src/xeq.c     **** 			--i;
5895:src/xeq.c     **** 		}
5896:src/xeq.c     **** 	}
5897:src/xeq.c     **** 	State2.state_lift = XromFlags.state_lift;
5898:src/xeq.c     **** 
5899:src/xeq.c     **** 	// Copy results
5900:src/xeq.c     **** 	i = XromOut;
5901:src/xeq.c     **** 	if (intm) {
5902:src/xeq.c     **** 		while (i--) {
5903:src/xeq.c     **** 			decNumber r;
5904:src/xeq.c     **** 			decimal128ToNumber(&(XromStack[i].d), &r);
5905:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, intResult(&r));
5906:src/xeq.c     **** 		}
5907:src/xeq.c     **** 	}
5908:src/xeq.c     **** 	else if (dbl) {
5909:src/xeq.c     **** 		move_regs(StackBase, XromStack, i);
5910:src/xeq.c     **** 	}
5911:src/xeq.c     **** 	else {
5912:src/xeq.c     **** 		while (i--)
5913:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
5914:src/xeq.c     **** 	}
5915:src/xeq.c     **** 
5916:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5917:src/xeq.c     **** 	// Copy back local data
5918:src/xeq.c     **** 	if (XromFlags.copyLocals) {
5919:src/xeq.c     **** 		i = local_regs();
5920:src/xeq.c     **** 		num_locals = i < num_locals ? i : num_locals; 
5921:src/xeq.c     **** 		*flag_word(LOCAL_FLAG_BASE, NULL) = flags;
5922:src/xeq.c     **** 		if (intm) {
5923:src/xeq.c     **** 			// not used
5924:src/xeq.c     **** 		}
5925:src/xeq.c     **** 		else if (dbl) {
5926:src/xeq.c     **** 			move_regs(get_reg_n(LOCAL_REG_BASE), locals, num_locals);
5927:src/xeq.c     **** 		}
5928:src/xeq.c     **** 		else {
5929:src/xeq.c     **** 			decimal64  *dest = &(get_reg_n(LOCAL_REG_BASE)->s);
5930:src/xeq.c     **** 			decimal128 *src  = &(locals->d);
5931:src/xeq.c     **** 			while (num_locals--)
5932:src/xeq.c     **** 				packed_from_packed128(dest++, src++);
5933:src/xeq.c     **** 		}
5934:src/xeq.c     **** 	}
5935:src/xeq.c     **** #endif
5936:src/xeq.c     **** }
 26596              		.loc 1 5936 1 view .LVU6977
 26597 001a 0FB0     		add	sp, sp, #60
 26598              		.cfi_remember_state
 26599              		.cfi_def_cfa_offset 36
 26600              		@ sp needed
 26601 001c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
ARM GAS  /tmp/cc0UaEmF.s 			page 683


 26602              	.LVL2073:
 26603              	.L1895:
 26604              		.cfi_restore_state
 26605              	.LBB3563:
 26606              	.LBB3564:
5849:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 26607              		.loc 1 5849 2 view .LVU6978
 26608 0020 724F     		ldr	r7, .L1940+8
5850:src/xeq.c     **** 
 26609              		.loc 1 5850 12 view .LVU6979
 26610 0022 7349     		ldr	r1, .L1940+12
 26611              	.LVL2074:
5849:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 26612              		.loc 1 5849 2 view .LVU6980
 26613 0024 3A68     		ldr	r2, [r7]
5845:src/xeq.c     **** 
 26614              		.loc 1 5845 16 view .LVU6981
 26615 0026 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
5849:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 26616              		.loc 1 5849 12 view .LVU6982
 26617 0028 A689     		ldrh	r6, [r4, #12]
 26618 002a A2F8E267 		strh	r6, [r2, #2018]	@ movhi
 26619 002e 0546     		mov	r5, r0
 26620              	.LVL2075:
5849:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 26621              		.loc 1 5849 12 view .LVU6983
 26622              	.LBE3564:
 26623              	.LBI3563:
5830:src/xeq.c     **** 	int i, dbl, intm;
 26624              		.loc 1 5830 6 is_stmt 1 view .LVU6984
 26625              	.LBB3593:
5845:src/xeq.c     **** 
 26626              		.loc 1 5845 2 view .LVU6985
5850:src/xeq.c     **** 
 26627              		.loc 1 5850 12 is_stmt 0 view .LVU6986
 26628 0030 0868     		ldr	r0, [r1]
 26629              	.LVL2076:
5848:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
 26630              		.loc 1 5848 9 view .LVU6987
 26631 0032 7049     		ldr	r1, .L1940+16
5850:src/xeq.c     **** 
 26632              		.loc 1 5850 12 view .LVU6988
 26633 0034 A2F8DE07 		strh	r0, [r2, #2014]	@ movhi
5845:src/xeq.c     **** 
 26634              		.loc 1 5845 16 view .LVU6989
 26635 0038 6FF3C713 		bfc	r3, #7, #1
5848:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
 26636              		.loc 1 5848 9 view .LVU6990
 26637 003c A268     		ldr	r2, [r4, #8]
 26638 003e 0A60     		str	r2, [r1]
5853:src/xeq.c     **** 
 26639              		.loc 1 5853 2 view .LVU6991
 26640 0040 05F00100 		and	r0, r5, #1
5845:src/xeq.c     **** 
 26641              		.loc 1 5845 16 view .LVU6992
 26642 0044 6370     		strb	r3, [r4, #1]
5848:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
ARM GAS  /tmp/cc0UaEmF.s 			page 684


 26643              		.loc 1 5848 2 is_stmt 1 view .LVU6993
5849:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 26644              		.loc 1 5849 2 view .LVU6994
5850:src/xeq.c     **** 
 26645              		.loc 1 5850 2 view .LVU6995
5853:src/xeq.c     **** 
 26646              		.loc 1 5853 2 view .LVU6996
 26647 0046 FFF7FEFF 		bl	do_rtn
 26648              	.LVL2077:
5856:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 26649              		.loc 1 5856 2 view .LVU6997
5856:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 26650              		.loc 1 5856 38 is_stmt 0 view .LVU6998
 26651 004a 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
5856:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 26652              		.loc 1 5856 8 view .LVU6999
 26653 004c 3868     		ldr	r0, [r7]
5858:src/xeq.c     **** 	UState.stack_depth = XromFlags.stack_depth;
 26654              		.loc 1 5858 41 view .LVU7000
 26655 004e A678     		ldrb	r6, [r4, #2]	@ zero_extendqisi2
5857:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 26656              		.loc 1 5857 21 view .LVU7001
 26657 0050 D0F8E827 		ldr	r2, [r0, #2024]
5860:src/xeq.c     **** 
 26658              		.loc 1 5860 12 view .LVU7002
 26659 0054 DFF8ACA1 		ldr	r10, .L1940+32
5856:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 26660              		.loc 1 5856 38 view .LVU7003
 26661 0058 C3F3C009 		ubfx	r9, r3, #3, #1
 26662              	.LVL2078:
5857:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 26663              		.loc 1 5857 2 is_stmt 1 view .LVU7004
5857:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 26664              		.loc 1 5857 32 is_stmt 0 view .LVU7005
 26665 005c 03F00108 		and	r8, r3, #1
 26666              	.LVL2079:
5858:src/xeq.c     **** 	UState.stack_depth = XromFlags.stack_depth;
 26667              		.loc 1 5858 9 is_stmt 1 view .LVU7006
5859:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 26668              		.loc 1 5859 2 view .LVU7007
5857:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 26669              		.loc 1 5857 21 is_stmt 0 view .LVU7008
 26670 0060 C3F38001 		ubfx	r1, r3, #2, #1
 26671 0064 48EA8933 		orr	r3, r8, r9, lsl #14
 26672              	.LVL2080:
5857:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 26673              		.loc 1 5857 21 view .LVU7009
 26674 0068 43EAC143 		orr	r3, r3, r1, lsl #19
 26675 006c 6249     		ldr	r1, .L1940+20
 26676 006e 06F00706 		and	r6, r6, #7
 26677 0072 1140     		ands	r1, r1, r2
 26678 0074 43EA0673 		orr	r3, r3, r6, lsl #28
 26679 0078 0B43     		orrs	r3, r3, r1
 26680 007a C0F8E837 		str	r3, [r0, #2024]
5860:src/xeq.c     **** 
 26681              		.loc 1 5860 2 is_stmt 1 view .LVU7010
5860:src/xeq.c     **** 
ARM GAS  /tmp/cc0UaEmF.s 			page 685


 26682              		.loc 1 5860 14 is_stmt 0 view .LVU7011
 26683 007e 6420     		movs	r0, #100
 26684 0080 FFF7FEFF 		bl	get_reg_n
 26685              	.LVL2081:
5863:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
 26686              		.loc 1 5863 6 view .LVU7012
 26687 0084 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
5860:src/xeq.c     **** 
 26688              		.loc 1 5860 12 view .LVU7013
 26689 0086 CAF80000 		str	r0, [r10]
5863:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
 26690              		.loc 1 5863 2 is_stmt 1 view .LVU7014
5863:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
 26691              		.loc 1 5863 5 is_stmt 0 view .LVU7015
 26692 008a 9606     		lsls	r6, r2, #26
 26693 008c 09D5     		bpl	.L1898
5864:src/xeq.c     **** 			setlastXY();
 26694              		.loc 1 5864 3 is_stmt 1 view .LVU7016
5864:src/xeq.c     **** 			setlastXY();
 26695              		.loc 1 5864 6 is_stmt 0 view .LVU7017
 26696 008e D006     		lsls	r0, r2, #27
 26697 0090 02D5     		bpl	.L1899
5864:src/xeq.c     **** 			setlastXY();
 26698              		.loc 1 5864 25 view .LVU7018
 26699 0092 A907     		lsls	r1, r5, #30
 26700 0094 40F19F80 		bpl	.L1936
 26701              	.L1899:
5867:src/xeq.c     **** 	}
 26702              		.loc 1 5867 4 is_stmt 1 view .LVU7019
 26703              	.LBB3565:
 26704              	.LBI3565:
 773:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 26705              		.loc 1 773 6 view .LVU7020
 26706              	.LBB3566:
 774:src/xeq.c     **** }
 26707              		.loc 1 774 2 view .LVU7021
 26708 0098 6421     		movs	r1, #100
 26709 009a 6C20     		movs	r0, #108
 26710 009c FFF7FEFF 		bl	copyreg_n
 26711              	.LVL2082:
 26712 00a0 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 26713              	.L1898:
 26714              	.LBE3566:
 26715              	.LBE3565:
5871:src/xeq.c     **** 	if (XromFlags.complex) {
 26716              		.loc 1 5871 2 view .LVU7022
5871:src/xeq.c     **** 	if (XromFlags.complex) {
 26717              		.loc 1 5871 6 is_stmt 0 view .LVU7023
 26718 00a2 94F805B0 		ldrb	fp, [r4, #5]	@ zero_extendqisi2
5871:src/xeq.c     **** 	if (XromFlags.complex) {
 26719              		.loc 1 5871 22 view .LVU7024
 26720 00a6 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
5872:src/xeq.c     **** 		set_was_complex();
 26721              		.loc 1 5872 5 view .LVU7025
 26722 00a8 D206     		lsls	r2, r2, #27
5871:src/xeq.c     **** 	if (XromFlags.complex) {
 26723              		.loc 1 5871 4 view .LVU7026
ARM GAS  /tmp/cc0UaEmF.s 			page 686


 26724 00aa ABEB030B 		sub	fp, fp, r3
 26725              	.LVL2083:
5872:src/xeq.c     **** 		set_was_complex();
 26726              		.loc 1 5872 2 is_stmt 1 view .LVU7027
5872:src/xeq.c     **** 		set_was_complex();
 26727              		.loc 1 5872 5 is_stmt 0 view .LVU7028
 26728 00ae 2BD5     		bpl	.L1937
5873:src/xeq.c     **** 		while (i < 0) {
 26729              		.loc 1 5873 3 is_stmt 1 view .LVU7029
 26730              	.LBB3567:
 26731              	.LBI3567:
 530:src/xeq.c     **** 	State2.wascomplex = 1;
 26732              		.loc 1 530 13 view .LVU7030
 26733              	.LBB3568:
 531:src/xeq.c     **** }
 26734              		.loc 1 531 2 view .LVU7031
 531:src/xeq.c     **** }
 26735              		.loc 1 531 20 is_stmt 0 view .LVU7032
 26736 00b0 524E     		ldr	r6, .L1940+24
 26737 00b2 327D     		ldrb	r2, [r6, #20]	@ zero_extendqisi2
 26738 00b4 0121     		movs	r1, #1
 26739 00b6 61F38712 		bfi	r2, r1, #6, #2
 26740              	.LBE3568:
 26741              	.LBE3567:
5874:src/xeq.c     **** 			// different stack handling in complex mode
 26742              		.loc 1 5874 9 view .LVU7033
 26743 00ba BBF1000F 		cmp	fp, #0
 26744              	.LBB3570:
 26745              	.LBB3569:
 531:src/xeq.c     **** }
 26746              		.loc 1 531 20 view .LVU7034
 26747 00be 3275     		strb	r2, [r6, #20]
 531:src/xeq.c     **** }
 26748              		.loc 1 531 20 view .LVU7035
 26749              	.LBE3569:
 26750              	.LBE3570:
5874:src/xeq.c     **** 			// different stack handling in complex mode
 26751              		.loc 1 5874 9 is_stmt 1 view .LVU7036
 26752 00c0 13DA     		bge	.L1902
 26753 00c2 6FEA0B03 		mvn	r3, fp
 26754 00c6 23F00105 		bic	r5, r3, #1
 26755              	.LVL2084:
5874:src/xeq.c     **** 			// different stack handling in complex mode
 26756              		.loc 1 5874 9 is_stmt 0 view .LVU7037
 26757 00ca 0093     		str	r3, [sp]
 26758 00cc 0BF10203 		add	r3, fp, #2
 26759 00d0 0193     		str	r3, [sp, #4]
 26760 00d2 1D44     		add	r5, r5, r3
 26761              	.L1903:
5877:src/xeq.c     **** 			i += 2;
 26762              		.loc 1 5877 4 is_stmt 1 view .LVU7038
5878:src/xeq.c     **** 		}
 26763              		.loc 1 5878 6 is_stmt 0 view .LVU7039
 26764 00d4 0BF1020B 		add	fp, fp, #2
 26765              	.LVL2085:
5877:src/xeq.c     **** 			i += 2;
 26766              		.loc 1 5877 4 view .LVU7040
ARM GAS  /tmp/cc0UaEmF.s 			page 687


 26767 00d8 FFF7FEFF 		bl	lower2
 26768              	.LVL2086:
5878:src/xeq.c     **** 		}
 26769              		.loc 1 5878 4 is_stmt 1 view .LVU7041
5874:src/xeq.c     **** 			// different stack handling in complex mode
 26770              		.loc 1 5874 9 view .LVU7042
 26771 00dc AB45     		cmp	fp, r5
 26772 00de F9D1     		bne	.L1903
 26773 00e0 009B     		ldr	r3, [sp]
 26774 00e2 23F0010B 		bic	fp, r3, #1
 26775              	.LVL2087:
5874:src/xeq.c     **** 			// different stack handling in complex mode
 26776              		.loc 1 5874 9 is_stmt 0 view .LVU7043
 26777 00e6 019B     		ldr	r3, [sp, #4]
 26778 00e8 9B44     		add	fp, fp, r3
 26779              	.L1902:
 26780              	.LVL2088:
5888:src/xeq.c     **** 		// more to push back then to consume
 26781              		.loc 1 5888 2 is_stmt 1 view .LVU7044
5888:src/xeq.c     **** 		// more to push back then to consume
 26782              		.loc 1 5888 5 is_stmt 0 view .LVU7045
 26783 00ea BBF1000F 		cmp	fp, #0
 26784 00ee 14D0     		beq	.L1904
5890:src/xeq.c     **** 			--i;
 26785              		.loc 1 5890 3 is_stmt 1 view .LVU7046
5890:src/xeq.c     **** 			--i;
 26786              		.loc 1 5890 7 is_stmt 0 view .LVU7047
 26787 00f0 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
5890:src/xeq.c     **** 			--i;
 26788              		.loc 1 5890 6 view .LVU7048
 26789 00f2 9307     		lsls	r3, r2, #30
 26790 00f4 02D4     		bmi	.L1909
5891:src/xeq.c     **** 		while (i > 0) {
 26791              		.loc 1 5891 4 is_stmt 1 view .LVU7049
 26792              	.LVL2089:
5892:src/xeq.c     **** 			lift();
 26793              		.loc 1 5892 9 view .LVU7050
 26794 00f6 BBF1010B 		subs	fp, fp, #1
 26795              	.LVL2090:
5892:src/xeq.c     **** 			lift();
 26796              		.loc 1 5892 9 is_stmt 0 view .LVU7051
 26797 00fa 0ED0     		beq	.L1904
 26798              	.L1909:
5893:src/xeq.c     **** 			--i;
 26799              		.loc 1 5893 4 is_stmt 1 view .LVU7052
 26800 00fc FFF7FEFF 		bl	lift
 26801              	.LVL2091:
5894:src/xeq.c     **** 		}
 26802              		.loc 1 5894 4 view .LVU7053
5892:src/xeq.c     **** 			lift();
 26803              		.loc 1 5892 9 view .LVU7054
 26804 0100 BBF1010B 		subs	fp, fp, #1
 26805              	.LVL2092:
5892:src/xeq.c     **** 			lift();
 26806              		.loc 1 5892 9 is_stmt 0 view .LVU7055
 26807 0104 FAD1     		bne	.L1909
 26808 0106 08E0     		b	.L1904
ARM GAS  /tmp/cc0UaEmF.s 			page 688


 26809              	.LVL2093:
 26810              	.L1937:
5882:src/xeq.c     **** 			// more to consume then to push back
 26811              		.loc 1 5882 9 is_stmt 1 view .LVU7056
 26812 0108 BBF1000F 		cmp	fp, #0
 26813 010c 67DA     		bge	.L1938
 26814              	.L1901:
5884:src/xeq.c     **** 			++i;
 26815              		.loc 1 5884 4 view .LVU7057
 26816 010e FFF7FEFF 		bl	lower
 26817              	.LVL2094:
5885:src/xeq.c     **** 		}
 26818              		.loc 1 5885 4 view .LVU7058
5882:src/xeq.c     **** 			// more to consume then to push back
 26819              		.loc 1 5882 9 view .LVU7059
 26820 0112 1BF1010B 		adds	fp, fp, #1
 26821              	.LVL2095:
5882:src/xeq.c     **** 			// more to consume then to push back
 26822              		.loc 1 5882 9 is_stmt 0 view .LVU7060
 26823 0116 FAD1     		bne	.L1901
 26824 0118 384E     		ldr	r6, .L1940+24
 26825              	.LVL2096:
 26826              	.L1904:
5897:src/xeq.c     **** 
 26827              		.loc 1 5897 2 is_stmt 1 view .LVU7061
5897:src/xeq.c     **** 
 26828              		.loc 1 5897 31 is_stmt 0 view .LVU7062
 26829 011a 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
5897:src/xeq.c     **** 
 26830              		.loc 1 5897 20 view .LVU7063
 26831 011c F27D     		ldrb	r2, [r6, #23]	@ zero_extendqisi2
5900:src/xeq.c     **** 	if (intm) {
 26832              		.loc 1 5900 4 view .LVU7064
 26833 011e 6479     		ldrb	r4, [r4, #5]	@ zero_extendqisi2
5897:src/xeq.c     **** 
 26834              		.loc 1 5897 31 view .LVU7065
 26835 0120 C3F38013 		ubfx	r3, r3, #6, #1
5897:src/xeq.c     **** 
 26836              		.loc 1 5897 20 view .LVU7066
 26837 0124 63F38612 		bfi	r2, r3, #6, #1
 26838 0128 F275     		strb	r2, [r6, #23]
5900:src/xeq.c     **** 	if (intm) {
 26839              		.loc 1 5900 2 is_stmt 1 view .LVU7067
 26840              	.LVL2097:
5901:src/xeq.c     **** 		while (i--) {
 26841              		.loc 1 5901 2 view .LVU7068
5901:src/xeq.c     **** 		while (i--) {
 26842              		.loc 1 5901 5 is_stmt 0 view .LVU7069
 26843 012a B8F1000F 		cmp	r8, #0
 26844 012e 23D0     		beq	.L1939
5902:src/xeq.c     **** 			decNumber r;
 26845              		.loc 1 5902 9 is_stmt 1 view .LVU7070
5902:src/xeq.c     **** 			decNumber r;
 26846              		.loc 1 5902 11 is_stmt 0 view .LVU7071
 26847 0130 631E     		subs	r3, r4, #1
 26848              	.LVL2098:
5902:src/xeq.c     **** 			decNumber r;
ARM GAS  /tmp/cc0UaEmF.s 			page 689


 26849              		.loc 1 5902 9 view .LVU7072
 26850 0132 002C     		cmp	r4, #0
 26851 0134 3FF471AF 		beq	.L1894
 26852 0138 314D     		ldr	r5, .L1940+28
 26853 013a 6334     		adds	r4, r4, #99
 26854 013c 05EB0315 		add	r5, r5, r3, lsl #4
 26855 0140 05AE     		add	r6, sp, #20
 26856              	.LVL2099:
 26857              	.L1911:
 26858              	.LBB3571:
5903:src/xeq.c     **** 			decimal128ToNumber(&(XromStack[i].d), &r);
 26859              		.loc 1 5903 4 is_stmt 1 view .LVU7073
5904:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, intResult(&r));
 26860              		.loc 1 5904 4 view .LVU7074
 26861 0142 3146     		mov	r1, r6
 26862 0144 2846     		mov	r0, r5
 26863 0146 FFF7FEFF 		bl	decimal128ToNumber
 26864              	.LVL2100:
5905:src/xeq.c     **** 		}
 26865              		.loc 1 5905 4 view .LVU7075
 26866 014a 3046     		mov	r0, r6
 26867 014c FFF7FEFF 		bl	intResult
 26868              	.LVL2101:
5905:src/xeq.c     **** 		}
 26869              		.loc 1 5905 4 is_stmt 0 view .LVU7076
 26870 0150 0246     		mov	r2, r0
 26871 0152 0B46     		mov	r3, r1
 26872              	.LBB3572:
 26873              	.LBB3573:
1237:src/xeq.c     **** }
 26874              		.loc 1 1237 8 view .LVU7077
 26875 0154 2046     		mov	r0, r4
 26876 0156 CDE90223 		strd	r2, [sp, #8]
 26877              	.LVL2102:
1237:src/xeq.c     **** }
 26878              		.loc 1 1237 8 view .LVU7078
 26879              	.LBE3573:
 26880              	.LBI3572:
1236:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 26881              		.loc 1 1236 6 is_stmt 1 view .LVU7079
 26882              	.LBB3574:
1237:src/xeq.c     **** }
 26883              		.loc 1 1237 2 view .LVU7080
1237:src/xeq.c     **** }
 26884              		.loc 1 1237 8 is_stmt 0 view .LVU7081
 26885 015a FFF7FEFF 		bl	get_reg_n
 26886              	.LVL2103:
1237:src/xeq.c     **** }
 26887              		.loc 1 1237 2 view .LVU7082
 26888 015e 0822     		movs	r2, #8
 26889 0160 013C     		subs	r4, r4, #1
 26890              	.LVL2104:
1237:src/xeq.c     **** }
 26891              		.loc 1 1237 2 view .LVU7083
 26892 0162 0DEB0201 		add	r1, sp, r2
 26893 0166 FFF7FEFF 		bl	xcopy
 26894              	.LVL2105:
ARM GAS  /tmp/cc0UaEmF.s 			page 690


1237:src/xeq.c     **** }
 26895              		.loc 1 1237 2 view .LVU7084
 26896              	.LBE3574:
 26897              	.LBE3572:
 26898              	.LBE3571:
5902:src/xeq.c     **** 			decNumber r;
 26899              		.loc 1 5902 9 is_stmt 1 view .LVU7085
 26900 016a 632C     		cmp	r4, #99
 26901 016c A5F11005 		sub	r5, r5, #16
 26902 0170 E7D1     		bne	.L1911
 26903              	.LBE3593:
 26904              	.LBE3563:
 26905              		.loc 1 5936 1 is_stmt 0 view .LVU7086
 26906 0172 0FB0     		add	sp, sp, #60
 26907              		.cfi_remember_state
 26908              		.cfi_def_cfa_offset 36
 26909              		@ sp needed
 26910 0174 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 26911              	.LVL2106:
 26912              	.L1939:
 26913              		.cfi_restore_state
 26914              	.LBB3595:
 26915              	.LBB3594:
5908:src/xeq.c     **** 		move_regs(StackBase, XromStack, i);
 26916              		.loc 1 5908 7 is_stmt 1 view .LVU7087
5908:src/xeq.c     **** 		move_regs(StackBase, XromStack, i);
 26917              		.loc 1 5908 10 is_stmt 0 view .LVU7088
 26918 0178 B9F1000F 		cmp	r9, #0
 26919 017c 1AD1     		bne	.L1912
5912:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 26920              		.loc 1 5912 9 is_stmt 1 view .LVU7089
5912:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 26921              		.loc 1 5912 11 is_stmt 0 view .LVU7090
 26922 017e 631E     		subs	r3, r4, #1
 26923              	.LVL2107:
5912:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 26924              		.loc 1 5912 9 view .LVU7091
 26925 0180 002C     		cmp	r4, #0
 26926 0182 3FF44AAF 		beq	.L1894
 26927 0186 1E4F     		ldr	r7, .L1940+28
 26928 0188 6334     		adds	r4, r4, #99
 26929 018a 07EB0317 		add	r7, r7, r3, lsl #4
 26930 018e 05AE     		add	r6, sp, #20
 26931              	.LVL2108:
 26932              	.L1915:
5913:src/xeq.c     **** 	}
 26933              		.loc 1 5913 4 is_stmt 1 view .LVU7092
 26934              	.LBB3575:
 26935              	.LBI3575:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 26936              		.loc 1 709 11 view .LVU7093
 26937              	.LBB3576:
 710:src/xeq.c     **** }
 26938              		.loc 1 710 2 view .LVU7094
 710:src/xeq.c     **** }
 26939              		.loc 1 710 9 is_stmt 0 view .LVU7095
 26940 0190 2046     		mov	r0, r4
ARM GAS  /tmp/cc0UaEmF.s 			page 691


 26941 0192 FFF7FEFF 		bl	get_reg_n
 26942              	.LVL2109:
 26943              	.LBE3576:
 26944              	.LBE3575:
 26945              	.LBB3578:
 26946              	.LBB3579:
 641:src/xeq.c     **** }
 26947              		.loc 1 641 24 view .LVU7096
 26948 0196 3146     		mov	r1, r6
 26949              	.LBE3579:
 26950              	.LBE3578:
 26951              	.LBB3581:
 26952              	.LBB3577:
 710:src/xeq.c     **** }
 26953              		.loc 1 710 9 view .LVU7097
 26954 0198 0546     		mov	r5, r0
 26955              	.LVL2110:
 710:src/xeq.c     **** }
 26956              		.loc 1 710 9 view .LVU7098
 26957              	.LBE3577:
 26958              	.LBE3581:
 26959              	.LBB3582:
 26960              	.LBI3578:
 639:src/xeq.c     **** 	decNumber temp;
 26961              		.loc 1 639 6 is_stmt 1 view .LVU7099
 26962              	.LBB3580:
 640:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 26963              		.loc 1 640 2 view .LVU7100
 641:src/xeq.c     **** }
 26964              		.loc 1 641 2 view .LVU7101
 641:src/xeq.c     **** }
 26965              		.loc 1 641 24 is_stmt 0 view .LVU7102
 26966 019a 3846     		mov	r0, r7
 26967              	.LVL2111:
 641:src/xeq.c     **** }
 26968              		.loc 1 641 24 view .LVU7103
 26969 019c FFF7FEFF 		bl	decimal128ToNumber
 26970              	.LVL2112:
 26971 01a0 013C     		subs	r4, r4, #1
 26972              	.LVL2113:
 641:src/xeq.c     **** }
 26973              		.loc 1 641 24 view .LVU7104
 26974 01a2 0146     		mov	r1, r0
 641:src/xeq.c     **** }
 26975              		.loc 1 641 2 view .LVU7105
 26976 01a4 2846     		mov	r0, r5
 26977 01a6 FFF7FEFF 		bl	packed_from_number
 26978              	.LVL2114:
 641:src/xeq.c     **** }
 26979              		.loc 1 641 2 view .LVU7106
 26980              	.LBE3580:
 26981              	.LBE3582:
5912:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 26982              		.loc 1 5912 9 is_stmt 1 view .LVU7107
5912:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 26983              		.loc 1 5912 9 is_stmt 0 view .LVU7108
 26984 01aa 632C     		cmp	r4, #99
ARM GAS  /tmp/cc0UaEmF.s 			page 692


 26985 01ac A7F11007 		sub	r7, r7, #16
 26986 01b0 EED1     		bne	.L1915
 26987 01b2 32E7     		b	.L1894
 26988              	.LVL2115:
 26989              	.L1912:
5909:src/xeq.c     **** 	}
 26990              		.loc 1 5909 3 is_stmt 1 view .LVU7109
 26991              	.LBB3583:
 26992              	.LBB3584:
 26993              	.LBB3585:
 26994              	.LBB3586:
 933:src/xeq.c     **** }
 26995              		.loc 1 933 24 is_stmt 0 view .LVU7110
 26996 01b4 3B68     		ldr	r3, [r7]
 26997              	.LBE3586:
 26998              	.LBE3585:
 26999              	.LBE3584:
 27000              	.LBE3583:
5909:src/xeq.c     **** 	}
 27001              		.loc 1 5909 3 view .LVU7111
 27002 01b6 DAF80000 		ldr	r0, [r10]
 27003              	.LVL2116:
 27004              	.LBB3592:
 27005              	.LBI3583:
1351:src/xeq.c     **** 	if (is_dblmode())
 27006              		.loc 1 1351 6 is_stmt 1 view .LVU7112
 27007              	.LBB3591:
1352:src/xeq.c     **** 		n <<= 1;
 27008              		.loc 1 1352 2 view .LVU7113
 27009              	.LBB3589:
 27010              	.LBI3585:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 27011              		.loc 1 932 5 view .LVU7114
 27012              	.LBB3587:
 933:src/xeq.c     **** }
 27013              		.loc 1 933 2 view .LVU7115
 933:src/xeq.c     **** }
 27014              		.loc 1 933 24 is_stmt 0 view .LVU7116
 27015 01ba B3F8E827 		ldrh	r2, [r3, #2024]
 27016              	.LBE3587:
 27017              	.LBE3589:
1354:src/xeq.c     **** }
 27018              		.loc 1 1354 2 view .LVU7117
 27019 01be 1049     		ldr	r1, .L1940+28
 27020              	.LBB3590:
 27021              	.LBB3588:
 933:src/xeq.c     **** }
 27022              		.loc 1 933 24 view .LVU7118
 27023 01c0 44F20103 		movw	r3, #16385
 27024              	.LBE3588:
 27025              	.LBE3590:
1352:src/xeq.c     **** 		n <<= 1;
 27026              		.loc 1 1352 5 view .LVU7119
 27027 01c4 1340     		ands	r3, r3, r2
 27028 01c6 B3F5804F 		cmp	r3, #16384
1353:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 27029              		.loc 1 1353 3 is_stmt 1 view .LVU7120
ARM GAS  /tmp/cc0UaEmF.s 			page 693


1353:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 27030              		.loc 1 1353 5 is_stmt 0 view .LVU7121
 27031 01ca 08BF     		it	eq
 27032 01cc 6400     		lsleq	r4, r4, #1
 27033              	.LVL2117:
1354:src/xeq.c     **** }
 27034              		.loc 1 1354 2 is_stmt 1 view .LVU7122
 27035 01ce E200     		lsls	r2, r4, #3
 27036 01d0 FFF7FEFF 		bl	xcopy
 27037              	.LVL2118:
1355:src/xeq.c     **** 
 27038              		.loc 1 1355 1 is_stmt 0 view .LVU7123
 27039 01d4 21E7     		b	.L1894
 27040              	.LVL2119:
 27041              	.L1936:
1355:src/xeq.c     **** 
 27042              		.loc 1 1355 1 view .LVU7124
 27043              	.LBE3591:
 27044              	.LBE3592:
5865:src/xeq.c     **** 		else
 27045              		.loc 1 5865 4 is_stmt 1 view .LVU7125
 27046 01d6 FFF7FEFF 		bl	setlastXY
 27047              	.LVL2120:
 27048 01da 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 27049 01dc 61E7     		b	.L1898
 27050              	.LVL2121:
 27051              	.L1938:
5865:src/xeq.c     **** 		else
 27052              		.loc 1 5865 4 is_stmt 0 view .LVU7126
 27053 01de 074E     		ldr	r6, .L1940+24
 27054 01e0 83E7     		b	.L1902
 27055              	.L1941:
 27056 01e2 00BF     		.align	2
 27057              	.L1940:
 27058 01e4 00000000 		.word	XromParams
 27059 01e8 00000000 		.word	Error
 27060 01ec 00000000 		.word	main_ram
 27061 01f0 00000000 		.word	UserLocalRegs
 27062 01f4 00000000 		.word	RetStk
 27063 01f8 FEBFF78F 		.word	-1879588866
 27064 01fc 00000000 		.word	StateWhileOn
 27065 0200 00000000 		.word	XromLocal
 27066 0204 00000000 		.word	StackBase
 27067              	.LBE3594:
 27068              	.LBE3595:
 27069              		.cfi_endproc
 27070              	.LFE262:
 27072              		.section	.text.cmdconverged,"ax",%progbits
 27073              		.align	1
 27074              		.p2align 2,,3
 27075              		.global	cmdconverged
 27076              		.syntax unified
 27077              		.thumb
 27078              		.thumb_func
 27079              		.fpu fpv4-sp-d16
 27081              	cmdconverged:
 27082              	.LVL2122:
ARM GAS  /tmp/cc0UaEmF.s 			page 694


 27083              	.LFB263:
5937:src/xeq.c     **** 
5938:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
5939:src/xeq.c     **** /*
5940:src/xeq.c     ****  *  Allow access to command argument from XROM
5941:src/xeq.c     ****  */
5942:src/xeq.c     **** void cmdxarg(unsigned int arg, enum rarg op) {
5943:src/xeq.c     **** 	set_reg_n_int_sgn(arg, XromArg, 0);
5944:src/xeq.c     **** }
5945:src/xeq.c     **** #endif
5946:src/xeq.c     **** 
5947:src/xeq.c     **** 
5948:src/xeq.c     **** /* A slightly obtuse command to check for convergence.
5949:src/xeq.c     ****  * Arguments are organised bitwise in this form:
5950:src/xeq.c     ****  *
5951:src/xeq.c     ****  *	SMMTT
5952:src/xeq.c     ****  *
5953:src/xeq.c     ****  * where:
5954:src/xeq.c     ****  *	TT is the tolerance parameter:
5955:src/xeq.c     ****  *
5956:src/xeq.c     ****  *	  	0	1e-14 tolerance
5957:src/xeq.c     ****  *	  	1	1e-24 tolerance
5958:src/xeq.c     ****  *	  	2	1e-32 tolerance
5959:src/xeq.c     ****  *	  	3	choose the best tolerance for the current modes
5960:src/xeq.c     ****  *			for user mode this means 0 for single precision and 2 for double precision
5961:src/xeq.c     ****  *
5962:src/xeq.c     ****  *	MM is the mode parameter:
5963:src/xeq.c     ****  *	  	0	compare real X & Y relatively
5964:src/xeq.c     ****  *	  	1	compare real X & Y absolutely
5965:src/xeq.c     ****  *	  	2	compare complex X/Y & Z/T for absolute difference
5966:src/xeq.c     ****  *	  	3	compare real X & Y relatively
5967:src/xeq.c     ****  *
5968:src/xeq.c     ****  *	S is the special number validation:
5969:src/xeq.c     ****  *		0	Nan & infinities are considered converged
5970:src/xeq.c     ****  *		1	NaN & infinities are not considered converged
5971:src/xeq.c     ****  *
5972:src/xeq.c     ****  * In integer mode, the arguemnt is completely ignored and an equality
5973:src/xeq.c     ****  * comparision is undertaken instead.
5974:src/xeq.c     ****  */
5975:src/xeq.c     **** static const decNumber * const convergence_tolerances[3] = {
5976:src/xeq.c     **** 	&const_1e_14, &const_1e_24, &const_1e_32
5977:src/xeq.c     **** };
5978:src/xeq.c     **** 
5979:src/xeq.c     **** void cmdconverged(unsigned int arg, enum rarg cmd) {
 27084              		.loc 1 5979 52 is_stmt 1 view -0
 27085              		.cfi_startproc
 27086              		@ args = 0, pretend = 0, frame = 216
 27087              		@ frame_needed = 0, uses_anonymous_args = 0
5980:src/xeq.c     **** 	const decNumber *tolerance;
 27088              		.loc 1 5980 2 view .LVU7128
5981:src/xeq.c     **** 	unsigned int tol = arg & 3;
 27089              		.loc 1 5981 2 view .LVU7129
5982:src/xeq.c     **** 	const unsigned int mode = (arg >> 2) & 3;
5983:src/xeq.c     **** 	const int specials = arg & 0x10;
5984:src/xeq.c     **** 	const int complex = mode == 2;
5985:src/xeq.c     **** 	const int absolute = mode == 1;
5986:src/xeq.c     **** 	decNumber t, x, y, z, a, b;
ARM GAS  /tmp/cc0UaEmF.s 			page 695


5987:src/xeq.c     **** 	int res;
5988:src/xeq.c     **** 
5989:src/xeq.c     **** 	if (is_intmode()) {
 27090              		.loc 1 5989 6 is_stmt 0 view .LVU7130
 27091 0000 374B     		ldr	r3, .L1957
5979:src/xeq.c     **** 	const decNumber *tolerance;
 27092              		.loc 1 5979 52 view .LVU7131
 27093 0002 70B5     		push	{r4, r5, r6, lr}
 27094              		.cfi_def_cfa_offset 16
 27095              		.cfi_offset 4, -16
 27096              		.cfi_offset 5, -12
 27097              		.cfi_offset 6, -8
 27098              		.cfi_offset 14, -4
 27099              		.loc 1 5989 6 view .LVU7132
 27100 0004 1A68     		ldr	r2, [r3]
 27101 0006 92F8E817 		ldrb	r1, [r2, #2024]	@ zero_extendqisi2
 27102              	.LVL2123:
5982:src/xeq.c     **** 	const unsigned int mode = (arg >> 2) & 3;
 27103              		.loc 1 5982 2 is_stmt 1 view .LVU7133
5983:src/xeq.c     **** 	const int complex = mode == 2;
 27104              		.loc 1 5983 2 view .LVU7134
5984:src/xeq.c     **** 	const int absolute = mode == 1;
 27105              		.loc 1 5984 2 view .LVU7135
5985:src/xeq.c     **** 	decNumber t, x, y, z, a, b;
 27106              		.loc 1 5985 2 view .LVU7136
5986:src/xeq.c     **** 	int res;
 27107              		.loc 1 5986 2 view .LVU7137
5987:src/xeq.c     **** 
 27108              		.loc 1 5987 2 view .LVU7138
 27109              		.loc 1 5989 2 view .LVU7139
 27110              		.loc 1 5989 5 is_stmt 0 view .LVU7140
 27111 000a CB07     		lsls	r3, r1, #31
5979:src/xeq.c     **** 	const decNumber *tolerance;
 27112              		.loc 1 5979 52 view .LVU7141
 27113 000c B8B0     		sub	sp, sp, #224
 27114              		.cfi_def_cfa_offset 240
 27115              		.loc 1 5989 5 view .LVU7142
 27116 000e 35D4     		bmi	.L1953
 27117 0010 00F00303 		and	r3, r0, #3
 27118              	.LVL2124:
5990:src/xeq.c     **** 		do_tst(regY_idx, TST_EQ);
5991:src/xeq.c     **** 		return;
5992:src/xeq.c     **** 	}
5993:src/xeq.c     **** 
5994:src/xeq.c     **** 	if (tol == 3) {
 27119              		.loc 1 5994 5 view .LVU7143
 27120 0014 032B     		cmp	r3, #3
 27121 0016 0446     		mov	r4, r0
 27122 0018 00F01005 		and	r5, r0, #16
 27123              	.LVL2125:
 27124              		.loc 1 5994 2 is_stmt 1 view .LVU7144
 27125              		.loc 1 5994 5 is_stmt 0 view .LVU7145
 27126 001c 24D0     		beq	.L1945
 27127 001e 314A     		ldr	r2, .L1957+4
 27128 0020 52F82360 		ldr	r6, [r2, r3, lsl #2]
 27129              	.LVL2126:
 27130              	.L1946:
ARM GAS  /tmp/cc0UaEmF.s 			page 696


5995:src/xeq.c     **** 		if (is_dblmode())
5996:src/xeq.c     **** 			tol = (! XromFlags.xIN || XromFlags.mode_double) ? 2 : 1;
5997:src/xeq.c     **** 		else
5998:src/xeq.c     **** 			tol = 0;
5999:src/xeq.c     **** 	}
6000:src/xeq.c     **** 	tolerance = convergence_tolerances[tol];
 27131              		.loc 1 6000 2 is_stmt 1 view .LVU7146
6001:src/xeq.c     **** 
6002:src/xeq.c     **** 	getXYZT(&x, &y, &z, &t);
 27132              		.loc 1 6002 2 view .LVU7147
 27133              	.LBB3596:
 27134              	.LBI3596:
 857:src/xeq.c     **** 	getXYZ(x, y, z);
 27135              		.loc 1 857 6 view .LVU7148
 27136              	.LBB3597:
 858:src/xeq.c     **** 	getT(t);
 27137              		.loc 1 858 2 view .LVU7149
 27138 0024 1DAA     		add	r2, sp, #116
 27139              	.LVL2127:
 858:src/xeq.c     **** 	getT(t);
 27140              		.loc 1 858 2 is_stmt 0 view .LVU7150
 27141 0026 14A9     		add	r1, sp, #80
 27142              	.LVL2128:
 858:src/xeq.c     **** 	getT(t);
 27143              		.loc 1 858 2 view .LVU7151
 27144 0028 0BA8     		add	r0, sp, #44
 27145              	.LVL2129:
 858:src/xeq.c     **** 	getT(t);
 27146              		.loc 1 858 2 view .LVU7152
 27147 002a FFF7FEFF 		bl	getXYZ
 27148              	.LVL2130:
 859:src/xeq.c     **** }
 27149              		.loc 1 859 2 is_stmt 1 view .LVU7153
 27150              	.LBB3598:
 27151              	.LBI3598:
 831:src/xeq.c     **** 	getRegister(t, regT_idx);
 27152              		.loc 1 831 13 view .LVU7154
 27153              	.LBB3599:
 832:src/xeq.c     **** }
 27154              		.loc 1 832 2 view .LVU7155
 27155 002e 02A8     		add	r0, sp, #8
 27156              	.LVL2131:
 832:src/xeq.c     **** }
 27157              		.loc 1 832 2 is_stmt 0 view .LVU7156
 27158 0030 6721     		movs	r1, #103
 27159 0032 FFF7FEFF 		bl	getRegister
 27160              	.LVL2132:
 832:src/xeq.c     **** }
 27161              		.loc 1 832 2 view .LVU7157
 27162              	.LBE3599:
 27163              	.LBE3598:
 27164              	.LBE3597:
 27165              	.LBE3596:
6003:src/xeq.c     **** 	if (decNumberIsSpecial(&x) || decNumberIsSpecial(&y))
 27166              		.loc 1 6003 2 is_stmt 1 view .LVU7158
 27167              		.loc 1 6003 29 is_stmt 0 view .LVU7159
 27168 0036 9DF83430 		ldrb	r3, [sp, #52]	@ zero_extendqisi2
ARM GAS  /tmp/cc0UaEmF.s 			page 697


 27169 003a 9DF85820 		ldrb	r2, [sp, #88]	@ zero_extendqisi2
 27170 003e 1343     		orrs	r3, r3, r2
 27171 0040 13F0700F 		tst	r3, #112
 27172 0044 0BD1     		bne	.L1947
5982:src/xeq.c     **** 	const int specials = arg & 0x10;
 27173              		.loc 1 5982 21 view .LVU7160
 27174 0046 C4F38104 		ubfx	r4, r4, #2, #2
 27175              	.LVL2133:
6004:src/xeq.c     **** 		res = specials;
6005:src/xeq.c     **** 	else if (complex) {
 27176              		.loc 1 6005 7 is_stmt 1 view .LVU7161
 27177              		.loc 1 6005 10 is_stmt 0 view .LVU7162
 27178 004a 022C     		cmp	r4, #2
 27179 004c 26D0     		beq	.L1954
6006:src/xeq.c     **** 		if (decNumberIsSpecial(&z) || decNumberIsSpecial(&t))
6007:src/xeq.c     **** 			res = specials;
6008:src/xeq.c     **** 		else {
6009:src/xeq.c     **** 			cmplxSubtract(&a, &b, &x, &y, &z, &t);
6010:src/xeq.c     **** 			cmplxR(&x, &a, &b);
6011:src/xeq.c     **** 			res = dn_lt(&x, tolerance);
6012:src/xeq.c     **** 		}
6013:src/xeq.c     **** 	} else {
6014:src/xeq.c     **** 		if (absolute)
 27180              		.loc 1 6014 3 is_stmt 1 view .LVU7163
 27181              		.loc 1 6014 6 is_stmt 0 view .LVU7164
 27182 004e 012C     		cmp	r4, #1
6015:src/xeq.c     **** 			res = absolute_error(&x, &y, tolerance);
 27183              		.loc 1 6015 10 view .LVU7165
 27184 0050 3246     		mov	r2, r6
 27185 0052 14A9     		add	r1, sp, #80
 27186 0054 0BA8     		add	r0, sp, #44
6014:src/xeq.c     **** 			res = absolute_error(&x, &y, tolerance);
 27187              		.loc 1 6014 6 view .LVU7166
 27188 0056 3ED0     		beq	.L1955
6016:src/xeq.c     **** 		else
6017:src/xeq.c     **** 			res = relative_error(&x, &y, tolerance);
 27189              		.loc 1 6017 4 is_stmt 1 view .LVU7167
 27190              		.loc 1 6017 10 is_stmt 0 view .LVU7168
 27191 0058 FFF7FEFF 		bl	relative_error
 27192              	.LVL2134:
 27193 005c 0546     		mov	r5, r0
 27194              	.LVL2135:
 27195              	.L1947:
6018:src/xeq.c     **** 	}
6019:src/xeq.c     **** 	fin_tst(res);
 27196              		.loc 1 6019 2 is_stmt 1 discriminator 1 view .LVU7169
 27197 005e 2846     		mov	r0, r5
 27198 0060 FFF7FEFF 		bl	fin_tst
 27199              	.LVL2136:
6020:src/xeq.c     **** }
 27200              		.loc 1 6020 1 is_stmt 0 discriminator 1 view .LVU7170
 27201 0064 38B0     		add	sp, sp, #224
 27202              		.cfi_remember_state
 27203              		.cfi_def_cfa_offset 16
 27204              		@ sp needed
 27205 0066 70BD     		pop	{r4, r5, r6, pc}
 27206              	.LVL2137:
ARM GAS  /tmp/cc0UaEmF.s 			page 698


 27207              	.L1945:
 27208              		.cfi_restore_state
5995:src/xeq.c     **** 			tol = (! XromFlags.xIN || XromFlags.mode_double) ? 2 : 1;
 27209              		.loc 1 5995 3 is_stmt 1 view .LVU7171
 27210              	.LBB3600:
 27211              	.LBI3600:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 27212              		.loc 1 932 5 view .LVU7172
 27213              	.LBB3601:
 933:src/xeq.c     **** }
 27214              		.loc 1 933 2 view .LVU7173
 933:src/xeq.c     **** }
 27215              		.loc 1 933 24 is_stmt 0 view .LVU7174
 27216 0068 B2F8E827 		ldrh	r2, [r2, #2024]
 27217 006c 44F20103 		movw	r3, #16385
 27218              	.LVL2138:
 933:src/xeq.c     **** }
 27219              		.loc 1 933 24 view .LVU7175
 27220              	.LBE3601:
 27221              	.LBE3600:
5995:src/xeq.c     **** 			tol = (! XromFlags.xIN || XromFlags.mode_double) ? 2 : 1;
 27222              		.loc 1 5995 6 view .LVU7176
 27223 0070 1340     		ands	r3, r3, r2
 27224 0072 B3F5804F 		cmp	r3, #16384
 27225 0076 07D0     		beq	.L1956
 27226 0078 1B4E     		ldr	r6, .L1957+8
 27227 007a D3E7     		b	.L1946
 27228              	.LVL2139:
 27229              	.L1953:
5990:src/xeq.c     **** 		return;
 27230              		.loc 1 5990 3 is_stmt 1 view .LVU7177
 27231 007c 0021     		movs	r1, #0
 27232 007e 6520     		movs	r0, #101
 27233              	.LVL2140:
5990:src/xeq.c     **** 		return;
 27234              		.loc 1 5990 3 is_stmt 0 view .LVU7178
 27235 0080 FFF7FEFF 		bl	do_tst
 27236              	.LVL2141:
5991:src/xeq.c     **** 	}
 27237              		.loc 1 5991 3 is_stmt 1 view .LVU7179
 27238              		.loc 1 6020 1 is_stmt 0 view .LVU7180
 27239 0084 38B0     		add	sp, sp, #224
 27240              		.cfi_remember_state
 27241              		.cfi_def_cfa_offset 16
 27242              		@ sp needed
 27243 0086 70BD     		pop	{r4, r5, r6, pc}
 27244              	.LVL2142:
 27245              	.L1956:
 27246              		.cfi_restore_state
5996:src/xeq.c     **** 		else
 27247              		.loc 1 5996 4 is_stmt 1 view .LVU7181
5996:src/xeq.c     **** 		else
 27248              		.loc 1 5996 27 is_stmt 0 view .LVU7182
 27249 0088 184B     		ldr	r3, .L1957+12
5996:src/xeq.c     **** 		else
 27250              		.loc 1 5996 57 view .LVU7183
 27251 008a 194E     		ldr	r6, .L1957+16
ARM GAS  /tmp/cc0UaEmF.s 			page 699


5996:src/xeq.c     **** 		else
 27252              		.loc 1 5996 27 view .LVU7184
 27253 008c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
5996:src/xeq.c     **** 		else
 27254              		.loc 1 5996 57 view .LVU7185
 27255 008e 194A     		ldr	r2, .L1957+20
 27256 0090 03F08803 		and	r3, r3, #136
 27257 0094 802B     		cmp	r3, #128
 27258 0096 08BF     		it	eq
 27259 0098 1646     		moveq	r6, r2
 27260 009a C3E7     		b	.L1946
 27261              	.LVL2143:
 27262              	.L1954:
6006:src/xeq.c     **** 			res = specials;
 27263              		.loc 1 6006 3 is_stmt 1 view .LVU7186
6006:src/xeq.c     **** 			res = specials;
 27264              		.loc 1 6006 30 is_stmt 0 view .LVU7187
 27265 009c 9DF87C30 		ldrb	r3, [sp, #124]	@ zero_extendqisi2
 27266 00a0 9DF81020 		ldrb	r2, [sp, #16]	@ zero_extendqisi2
 27267 00a4 1343     		orrs	r3, r3, r2
 27268 00a6 13F0700F 		tst	r3, #112
 27269 00aa D8D1     		bne	.L1947
6009:src/xeq.c     **** 			cmplxR(&x, &a, &b);
 27270              		.loc 1 6009 4 is_stmt 1 view .LVU7188
 27271 00ac 02AB     		add	r3, sp, #8
 27272 00ae 0193     		str	r3, [sp, #4]
 27273 00b0 1DAB     		add	r3, sp, #116
 27274 00b2 0093     		str	r3, [sp]
 27275 00b4 2FA9     		add	r1, sp, #188
 27276 00b6 14AB     		add	r3, sp, #80
 27277 00b8 26A8     		add	r0, sp, #152
 27278 00ba 0BAA     		add	r2, sp, #44
 27279 00bc FFF7FEFF 		bl	cmplxSubtract
 27280              	.LVL2144:
6010:src/xeq.c     **** 			res = dn_lt(&x, tolerance);
 27281              		.loc 1 6010 4 view .LVU7189
 27282 00c0 2FAA     		add	r2, sp, #188
 27283 00c2 26A9     		add	r1, sp, #152
 27284 00c4 0BA8     		add	r0, sp, #44
 27285 00c6 FFF7FEFF 		bl	cmplxR
 27286              	.LVL2145:
6011:src/xeq.c     **** 		}
 27287              		.loc 1 6011 4 view .LVU7190
6011:src/xeq.c     **** 		}
 27288              		.loc 1 6011 10 is_stmt 0 view .LVU7191
 27289 00ca 3146     		mov	r1, r6
 27290 00cc 0BA8     		add	r0, sp, #44
 27291 00ce FFF7FEFF 		bl	dn_lt
 27292              	.LVL2146:
 27293 00d2 0546     		mov	r5, r0
 27294              	.LVL2147:
6011:src/xeq.c     **** 		}
 27295              		.loc 1 6011 10 view .LVU7192
 27296 00d4 C3E7     		b	.L1947
 27297              	.LVL2148:
 27298              	.L1955:
6015:src/xeq.c     **** 		else
ARM GAS  /tmp/cc0UaEmF.s 			page 700


 27299              		.loc 1 6015 4 is_stmt 1 view .LVU7193
6015:src/xeq.c     **** 		else
 27300              		.loc 1 6015 10 is_stmt 0 view .LVU7194
 27301 00d6 FFF7FEFF 		bl	absolute_error
 27302              	.LVL2149:
 27303 00da 0546     		mov	r5, r0
 27304              	.LVL2150:
6015:src/xeq.c     **** 		else
 27305              		.loc 1 6015 10 view .LVU7195
 27306 00dc BFE7     		b	.L1947
 27307              	.L1958:
 27308 00de 00BF     		.align	2
 27309              	.L1957:
 27310 00e0 00000000 		.word	main_ram
 27311 00e4 00000000 		.word	.LANCHOR7
 27312 00e8 00000000 		.word	const_1e_14
 27313 00ec 00000000 		.word	XromParams
 27314 00f0 00000000 		.word	const_1e_32
 27315 00f4 00000000 		.word	const_1e_24
 27316              		.cfi_endproc
 27317              	.LFE263:
 27319              		.section	.text.cmdshuffle,"ax",%progbits
 27320              		.align	1
 27321              		.p2align 2,,3
 27322              		.global	cmdshuffle
 27323              		.syntax unified
 27324              		.thumb
 27325              		.thumb_func
 27326              		.fpu fpv4-sp-d16
 27328              	cmdshuffle:
 27329              	.LVL2151:
 27330              	.LFB264:
6021:src/xeq.c     **** 
6022:src/xeq.c     **** void cmdshuffle(unsigned int arg, enum rarg cmd) {
 27331              		.loc 1 6022 50 is_stmt 1 view -0
 27332              		.cfi_startproc
 27333              		@ args = 0, pretend = 0, frame = 64
 27334              		@ frame_needed = 0, uses_anonymous_args = 0
6023:src/xeq.c     **** 	REGISTER xyzt[4];
 27335              		.loc 1 6023 2 view .LVU7197
6024:src/xeq.c     **** 	int i;
 27336              		.loc 1 6024 2 view .LVU7198
6025:src/xeq.c     **** 
6026:src/xeq.c     **** 	set_lift();
 27337              		.loc 1 6026 2 view .LVU7199
 27338              	.LBB3602:
 27339              	.LBI3602:
 748:src/xeq.c     ****     State2.state_lift = 1;
 27340              		.loc 1 748 6 view .LVU7200
 27341              	.LBB3603:
 749:src/xeq.c     **** }
 27342              		.loc 1 749 5 view .LVU7201
 27343              	.LBE3603:
 27344              	.LBE3602:
6022:src/xeq.c     **** 	REGISTER xyzt[4];
 27345              		.loc 1 6022 50 is_stmt 0 view .LVU7202
 27346 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
ARM GAS  /tmp/cc0UaEmF.s 			page 701


 27347              		.cfi_def_cfa_offset 24
 27348              		.cfi_offset 4, -24
 27349              		.cfi_offset 5, -20
 27350              		.cfi_offset 6, -16
 27351              		.cfi_offset 7, -12
 27352              		.cfi_offset 8, -8
 27353              		.cfi_offset 14, -4
 27354              	.LBB3608:
 27355              	.LBB3604:
 749:src/xeq.c     **** }
 27356              		.loc 1 749 23 view .LVU7203
 27357 0004 1F4A     		ldr	r2, .L1969
 27358 0006 204E     		ldr	r6, .L1969+4
 27359 0008 D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 27360              	.LBE3604:
 27361              	.LBE3608:
6022:src/xeq.c     **** 	REGISTER xyzt[4];
 27362              		.loc 1 6022 50 view .LVU7204
 27363 000a 90B0     		sub	sp, sp, #64
 27364              		.cfi_def_cfa_offset 88
 27365              	.LBB3609:
 27366              	.LBB3605:
 749:src/xeq.c     **** }
 27367              		.loc 1 749 23 view .LVU7205
 27368 000c 43F04003 		orr	r3, r3, #64
 27369              	.LBE3605:
 27370              	.LBE3609:
6022:src/xeq.c     **** 	REGISTER xyzt[4];
 27371              		.loc 1 6022 50 view .LVU7206
 27372 0010 0546     		mov	r5, r0
 27373              	.LBB3610:
 27374              	.LBB3606:
 749:src/xeq.c     **** }
 27375              		.loc 1 749 23 view .LVU7207
 27376 0012 D375     		strb	r3, [r2, #23]
 27377              	.LBE3606:
 27378              	.LBE3610:
6027:src/xeq.c     **** 	for (i=0; i<4; i++)
 27379              		.loc 1 6027 2 is_stmt 1 view .LVU7208
 27380              	.LVL2152:
 27381              		.loc 1 6027 12 view .LVU7209
 27382 0014 6F46     		mov	r7, sp
 27383              	.LBB3611:
 27384              	.LBB3607:
 749:src/xeq.c     **** }
 27385              		.loc 1 749 23 is_stmt 0 view .LVU7210
 27386 0016 6424     		movs	r4, #100
 27387              	.LBE3607:
 27388              	.LBE3611:
 27389              	.LBB3612:
 27390              	.LBB3613:
 27391              	.LBB3614:
 27392              	.LBB3615:
 933:src/xeq.c     **** }
 27393              		.loc 1 933 24 view .LVU7211
 27394 0018 44F20108 		movw	r8, #16385
 27395              	.LVL2153:
ARM GAS  /tmp/cc0UaEmF.s 			page 702


 27396              	.L1961:
 933:src/xeq.c     **** }
 27397              		.loc 1 933 24 view .LVU7212
 27398              	.LBE3615:
 27399              	.LBE3614:
 27400              	.LBE3613:
 27401              	.LBE3612:
6028:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 27402              		.loc 1 6028 3 is_stmt 1 discriminator 3 view .LVU7213
 27403              	.LBB3622:
 27404              	.LBI3622:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 27405              		.loc 1 709 11 discriminator 3 view .LVU7214
 27406              	.LBB3623:
 710:src/xeq.c     **** }
 27407              		.loc 1 710 2 discriminator 3 view .LVU7215
 710:src/xeq.c     **** }
 27408              		.loc 1 710 9 is_stmt 0 discriminator 3 view .LVU7216
 27409 001c 2046     		mov	r0, r4
 27410 001e FFF7FEFF 		bl	get_reg_n
 27411              	.LVL2154:
 710:src/xeq.c     **** }
 27412              		.loc 1 710 9 discriminator 3 view .LVU7217
 27413              	.LBE3623:
 27414              	.LBE3622:
 27415              	.LBB3625:
 27416              	.LBB3620:
 27417              	.LBB3618:
 27418              	.LBB3616:
 933:src/xeq.c     **** }
 27419              		.loc 1 933 24 discriminator 3 view .LVU7218
 27420 0022 3368     		ldr	r3, [r6]
 27421 0024 B3F8E837 		ldrh	r3, [r3, #2024]
 27422              	.LBE3616:
 27423              	.LBE3618:
 718:src/xeq.c     **** }
 27424              		.loc 1 718 2 discriminator 3 view .LVU7219
 27425 0028 08EA0303 		and	r3, r8, r3
 27426 002c B3F5804F 		cmp	r3, #16384
 27427              	.LBE3620:
 27428              	.LBE3625:
 27429              	.LBB3626:
 27430              	.LBB3624:
 710:src/xeq.c     **** }
 27431              		.loc 1 710 9 discriminator 3 view .LVU7220
 27432 0030 0146     		mov	r1, r0
 27433              	.LVL2155:
 710:src/xeq.c     **** }
 27434              		.loc 1 710 9 discriminator 3 view .LVU7221
 27435              	.LBE3624:
 27436              	.LBE3626:
 27437              	.LBB3627:
 27438              	.LBI3612:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 27439              		.loc 1 717 6 is_stmt 1 discriminator 3 view .LVU7222
 27440              	.LBB3621:
 718:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 703


 27441              		.loc 1 718 2 discriminator 3 view .LVU7223
 27442              	.LBB3619:
 27443              	.LBI3614:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 27444              		.loc 1 932 5 discriminator 3 view .LVU7224
 27445              	.LBB3617:
 933:src/xeq.c     **** }
 27446              		.loc 1 933 2 discriminator 3 view .LVU7225
 27447              	.LBE3617:
 27448              	.LBE3619:
 718:src/xeq.c     **** }
 27449              		.loc 1 718 2 is_stmt 0 discriminator 3 view .LVU7226
 27450 0032 0CBF     		ite	eq
 27451 0034 1022     		moveq	r2, #16
 27452 0036 0822     		movne	r2, #8
 27453 0038 3846     		mov	r0, r7
 27454              	.LVL2156:
 718:src/xeq.c     **** }
 27455              		.loc 1 718 2 discriminator 3 view .LVU7227
 27456 003a 0134     		adds	r4, r4, #1
 27457              	.LVL2157:
 718:src/xeq.c     **** }
 27458              		.loc 1 718 2 discriminator 3 view .LVU7228
 27459 003c FFF7FEFF 		bl	xcopy
 27460              	.LVL2158:
 718:src/xeq.c     **** }
 27461              		.loc 1 718 2 discriminator 3 view .LVU7229
 27462              	.LBE3621:
 27463              	.LBE3627:
6027:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 27464              		.loc 1 6027 17 is_stmt 1 discriminator 3 view .LVU7230
6027:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 27465              		.loc 1 6027 12 discriminator 3 view .LVU7231
6027:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 27466              		.loc 1 6027 2 is_stmt 0 discriminator 3 view .LVU7232
 27467 0040 682C     		cmp	r4, #104
 27468 0042 07F11007 		add	r7, r7, #16
 27469 0046 E9D1     		bne	.L1961
 27470 0048 6424     		movs	r4, #100
 27471              	.LBB3628:
 27472              	.LBB3629:
 27473              	.LBB3630:
 27474              	.LBB3631:
 933:src/xeq.c     **** }
 27475              		.loc 1 933 24 view .LVU7233
 27476 004a 44F20107 		movw	r7, #16385
 27477              	.L1963:
 27478              	.LVL2159:
 933:src/xeq.c     **** }
 27479              		.loc 1 933 24 view .LVU7234
 27480              	.LBE3631:
 27481              	.LBE3630:
 27482              	.LBE3629:
 27483              	.LBE3628:
6029:src/xeq.c     **** 
6030:src/xeq.c     **** 	for (i=0; i<4; i++) {
6031:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
ARM GAS  /tmp/cc0UaEmF.s 			page 704


 27484              		.loc 1 6031 3 is_stmt 1 view .LVU7235
 27485              	.LBB3638:
 27486              	.LBI3638:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 27487              		.loc 1 709 11 view .LVU7236
 27488              	.LBB3639:
 710:src/xeq.c     **** }
 27489              		.loc 1 710 2 view .LVU7237
 710:src/xeq.c     **** }
 27490              		.loc 1 710 9 is_stmt 0 view .LVU7238
 27491 004e 2046     		mov	r0, r4
 27492 0050 FFF7FEFF 		bl	get_reg_n
 27493              	.LVL2160:
 710:src/xeq.c     **** }
 27494              		.loc 1 710 9 view .LVU7239
 27495              	.LBE3639:
 27496              	.LBE3638:
 27497              	.LBB3640:
 27498              	.LBB3636:
 27499              	.LBB3634:
 27500              	.LBB3632:
 933:src/xeq.c     **** }
 27501              		.loc 1 933 24 view .LVU7240
 27502 0054 3368     		ldr	r3, [r6]
 27503 0056 B3F8E837 		ldrh	r3, [r3, #2024]
 27504              	.LBE3632:
 27505              	.LBE3634:
 718:src/xeq.c     **** }
 27506              		.loc 1 718 2 view .LVU7241
 27507 005a 3B40     		ands	r3, r3, r7
 27508 005c B3F5804F 		cmp	r3, #16384
 27509              	.LBE3636:
 27510              	.LBE3640:
 27511              		.loc 1 6031 36 view .LVU7242
 27512 0060 05F00301 		and	r1, r5, #3
 27513              	.LVL2161:
 27514              	.LBB3641:
 27515              	.LBI3628:
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 27516              		.loc 1 717 6 is_stmt 1 view .LVU7243
 27517              	.LBB3637:
 718:src/xeq.c     **** }
 27518              		.loc 1 718 2 view .LVU7244
 27519              	.LBB3635:
 27520              	.LBI3630:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 27521              		.loc 1 932 5 view .LVU7245
 27522              	.LBB3633:
 933:src/xeq.c     **** }
 27523              		.loc 1 933 2 view .LVU7246
 27524              	.LBE3633:
 27525              	.LBE3635:
 718:src/xeq.c     **** }
 27526              		.loc 1 718 2 is_stmt 0 view .LVU7247
 27527 0064 0CBF     		ite	eq
 27528 0066 1022     		moveq	r2, #16
 27529 0068 0822     		movne	r2, #8
ARM GAS  /tmp/cc0UaEmF.s 			page 705


 27530 006a 0134     		adds	r4, r4, #1
 27531              	.LVL2162:
 718:src/xeq.c     **** }
 27532              		.loc 1 718 2 view .LVU7248
 27533 006c 0DEB0111 		add	r1, sp, r1, lsl #4
 27534              	.LVL2163:
 718:src/xeq.c     **** }
 27535              		.loc 1 718 2 view .LVU7249
 27536 0070 FFF7FEFF 		bl	xcopy
 27537              	.LVL2164:
 718:src/xeq.c     **** }
 27538              		.loc 1 718 2 view .LVU7250
 27539              	.LBE3637:
 27540              	.LBE3641:
6032:src/xeq.c     **** 		arg >>= 2;
 27541              		.loc 1 6032 3 is_stmt 1 view .LVU7251
6030:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 27542              		.loc 1 6030 2 is_stmt 0 view .LVU7252
 27543 0074 682C     		cmp	r4, #104
 27544              		.loc 1 6032 7 view .LVU7253
 27545 0076 4FEA9505 		lsr	r5, r5, #2
 27546              	.LVL2165:
6030:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 27547              		.loc 1 6030 17 is_stmt 1 view .LVU7254
6030:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 27548              		.loc 1 6030 12 view .LVU7255
6030:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 27549              		.loc 1 6030 2 is_stmt 0 view .LVU7256
 27550 007a E8D1     		bne	.L1963
6033:src/xeq.c     **** 	}
6034:src/xeq.c     **** }
 27551              		.loc 1 6034 1 view .LVU7257
 27552 007c 10B0     		add	sp, sp, #64
 27553              		.cfi_def_cfa_offset 24
 27554              		@ sp needed
 27555 007e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 27556              	.LVL2166:
 27557              	.L1970:
 27558              		.loc 1 6034 1 view .LVU7258
 27559 0082 00BF     		.align	2
 27560              	.L1969:
 27561 0084 00000000 		.word	StateWhileOn
 27562 0088 00000000 		.word	main_ram
 27563              		.cfi_endproc
 27564              	.LFE264:
 27566              		.section	.text.cmdmode,"ax",%progbits
 27567              		.align	1
 27568              		.p2align 2,,3
 27569              		.global	cmdmode
 27570              		.syntax unified
 27571              		.thumb
 27572              		.thumb_func
 27573              		.fpu fpv4-sp-d16
 27575              	cmdmode:
 27576              	.LVL2167:
 27577              	.LFB265:
6035:src/xeq.c     **** 
ARM GAS  /tmp/cc0UaEmF.s 			page 706


6036:src/xeq.c     **** /*
6037:src/xeq.c     ****  *  Toggle UState mode bits from XROM
6038:src/xeq.c     ****  */
6039:src/xeq.c     **** void cmdmode(unsigned int arg, enum rarg cmd) {
 27578              		.loc 1 6039 47 is_stmt 1 view -0
 27579              		.cfi_startproc
 27580              		@ args = 0, pretend = 0, frame = 0
 27581              		@ frame_needed = 0, uses_anonymous_args = 0
 27582              		@ link register save eliminated.
6040:src/xeq.c     **** 	unsigned long long int bit = 1ll << arg;
 27583              		.loc 1 6040 2 view .LVU7260
6039:src/xeq.c     **** 	unsigned long long int bit = 1ll << arg;
 27584              		.loc 1 6039 47 is_stmt 0 view .LVU7261
 27585 0000 30B4     		push	{r4, r5}
 27586              		.cfi_def_cfa_offset 8
 27587              		.cfi_offset 4, -8
 27588              		.cfi_offset 5, -4
6041:src/xeq.c     **** 	unsigned long long int *mode = (unsigned long long int *) & UState;
 27589              		.loc 1 6041 62 view .LVU7262
 27590 0002 134D     		ldr	r5, .L1976
6040:src/xeq.c     **** 	unsigned long long int bit = 1ll << arg;
 27591              		.loc 1 6040 35 view .LVU7263
 27592 0004 0122     		movs	r2, #1
 27593 0006 A0F12003 		sub	r3, r0, #32
 27594 000a C0F12004 		rsb	r4, r0, #32
 27595 000e 02FA03F3 		lsl	r3, r2, r3
 27596 0012 22FA04F4 		lsr	r4, r2, r4
 27597 0016 8240     		lsls	r2, r2, r0
 27598              		.loc 1 6041 62 view .LVU7264
 27599 0018 2868     		ldr	r0, [r5]
 27600              	.LVL2168:
6042:src/xeq.c     **** 
6043:src/xeq.c     **** 	if (cmd == RARG_MODE_SET)
 27601              		.loc 1 6043 5 view .LVU7265
 27602 001a 8129     		cmp	r1, #129
6044:src/xeq.c     **** 		*mode |= bit;
 27603              		.loc 1 6044 9 view .LVU7266
 27604 001c D0F8E457 		ldr	r5, [r0, #2020]
6040:src/xeq.c     **** 	unsigned long long int *mode = (unsigned long long int *) & UState;
 27605              		.loc 1 6040 35 view .LVU7267
 27606 0020 43EA0403 		orr	r3, r3, r4
 27607              	.LVL2169:
6041:src/xeq.c     **** 
 27608              		.loc 1 6041 2 is_stmt 1 view .LVU7268
6043:src/xeq.c     **** 		*mode |= bit;
 27609              		.loc 1 6043 2 view .LVU7269
 27610              		.loc 1 6044 9 is_stmt 0 view .LVU7270
 27611 0024 00F2E471 		addw	r1, r0, #2020
 27612              	.LVL2170:
6043:src/xeq.c     **** 		*mode |= bit;
 27613              		.loc 1 6043 5 view .LVU7271
 27614 0028 0AD0     		beq	.L1975
6045:src/xeq.c     **** 	else
6046:src/xeq.c     **** 		*mode &= ~bit;
 27615              		.loc 1 6046 3 is_stmt 1 view .LVU7272
 27616              		.loc 1 6046 9 is_stmt 0 view .LVU7273
 27617 002a D0F8E847 		ldr	r4, [r0, #2024]
ARM GAS  /tmp/cc0UaEmF.s 			page 707


 27618 002e 25EA0202 		bic	r2, r5, r2
 27619              	.LVL2171:
 27620              		.loc 1 6046 9 view .LVU7274
 27621 0032 24EA0303 		bic	r3, r4, r3
 27622              	.LVL2172:
 27623              		.loc 1 6046 9 view .LVU7275
 27624 0036 C0F8E427 		str	r2, [r0, #2020]
6047:src/xeq.c     **** }
 27625              		.loc 1 6047 1 view .LVU7276
 27626 003a 30BC     		pop	{r4, r5}
 27627              		.cfi_remember_state
 27628              		.cfi_restore 5
 27629              		.cfi_restore 4
 27630              		.cfi_def_cfa_offset 0
 27631 003c 4B60     		str	r3, [r1, #4]
 27632 003e 7047     		bx	lr
 27633              	.LVL2173:
 27634              	.L1975:
 27635              		.cfi_restore_state
6044:src/xeq.c     **** 	else
 27636              		.loc 1 6044 3 is_stmt 1 view .LVU7277
6044:src/xeq.c     **** 	else
 27637              		.loc 1 6044 9 is_stmt 0 view .LVU7278
 27638 0040 4C68     		ldr	r4, [r1, #4]
 27639 0042 2A43     		orrs	r2, r2, r5
 27640              	.LVL2174:
6044:src/xeq.c     **** 	else
 27641              		.loc 1 6044 9 view .LVU7279
 27642 0044 2343     		orrs	r3, r3, r4
 27643              	.LVL2175:
6044:src/xeq.c     **** 	else
 27644              		.loc 1 6044 9 view .LVU7280
 27645 0046 C0F8E427 		str	r2, [r0, #2020]
 27646              		.loc 1 6047 1 view .LVU7281
 27647 004a 30BC     		pop	{r4, r5}
 27648              		.cfi_restore 5
 27649              		.cfi_restore 4
 27650              		.cfi_def_cfa_offset 0
 27651 004c 4B60     		str	r3, [r1, #4]
 27652 004e 7047     		bx	lr
 27653              	.L1977:
 27654              		.align	2
 27655              	.L1976:
 27656 0050 00000000 		.word	main_ram
 27657              		.cfi_endproc
 27658              	.LFE265:
 27660              		.section	.text.cmdlpop,"ax",%progbits
 27661              		.align	1
 27662              		.p2align 2,,3
 27663              		.global	cmdlpop
 27664              		.syntax unified
 27665              		.thumb
 27666              		.thumb_func
 27667              		.fpu fpv4-sp-d16
 27669              	cmdlpop:
 27670              	.LVL2176:
 27671              	.LFB266:
ARM GAS  /tmp/cc0UaEmF.s 			page 708


6048:src/xeq.c     **** 
6049:src/xeq.c     **** /*
6050:src/xeq.c     ****  *  Undo the effect of LOCL by popping the current local frame.
6051:src/xeq.c     ****  *  Needs to be executed from the same level that has established the frame.
6052:src/xeq.c     ****  */
6053:src/xeq.c     **** void cmdlpop(enum nilop op) {
 27672              		.loc 1 6053 29 is_stmt 1 view -0
 27673              		.cfi_startproc
 27674              		@ args = 0, pretend = 0, frame = 0
 27675              		@ frame_needed = 0, uses_anonymous_args = 0
6054:src/xeq.c     **** 	if (LocalRegs != RetStkPtr) {
 27676              		.loc 1 6054 2 view .LVU7283
6053:src/xeq.c     **** 	if (LocalRegs != RetStkPtr) {
 27677              		.loc 1 6053 29 is_stmt 0 view .LVU7284
 27678 0000 10B5     		push	{r4, lr}
 27679              		.cfi_def_cfa_offset 8
 27680              		.cfi_offset 4, -8
 27681              		.cfi_offset 14, -4
 27682              		.loc 1 6054 6 view .LVU7285
 27683 0002 0C4C     		ldr	r4, .L1982
 27684 0004 2368     		ldr	r3, [r4]
 27685 0006 B3F9DE17 		ldrsh	r1, [r3, #2014]
 27686              		.loc 1 6054 5 view .LVU7286
 27687 000a B3F9E227 		ldrsh	r2, [r3, #2018]
 27688 000e 8A42     		cmp	r2, r1
 27689 0010 05D0     		beq	.L1979
6055:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 27690              		.loc 1 6055 3 is_stmt 1 view .LVU7287
 27691              	.LVL2177:
 27692              	.LBB3646:
 27693              	.LBI3646:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27694              		.loc 1 537 5 view .LVU7288
 27695              	.LBB3647:
 538:src/xeq.c     **** 		Error = e;
 27696              		.loc 1 538 2 view .LVU7289
 538:src/xeq.c     **** 		Error = e;
 27697              		.loc 1 538 12 is_stmt 0 view .LVU7290
 27698 0012 094B     		ldr	r3, .L1982+4
 538:src/xeq.c     **** 		Error = e;
 27699              		.loc 1 538 5 view .LVU7291
 27700 0014 1A68     		ldr	r2, [r3]
 27701 0016 0AB9     		cbnz	r2, .L1978
 27702              	.LVL2178:
 27703              	.LBB3648:
 27704              	.LBI3648:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27705              		.loc 1 537 5 is_stmt 1 view .LVU7292
 27706              	.LBB3649:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 27707              		.loc 1 539 3 view .LVU7293
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 27708              		.loc 1 539 9 is_stmt 0 view .LVU7294
 27709 0018 0722     		movs	r2, #7
 27710 001a 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 27711              		.loc 1 540 3 is_stmt 1 view .LVU7295
ARM GAS  /tmp/cc0UaEmF.s 			page 709


 27712              	.LVL2179:
 27713              	.L1978:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 27714              		.loc 1 540 3 is_stmt 0 view .LVU7296
 27715              	.LBE3649:
 27716              	.LBE3648:
 27717              	.LBE3647:
 27718              	.LBE3646:
6056:src/xeq.c     **** 		return;
6057:src/xeq.c     **** 	}
6058:src/xeq.c     **** 	RetStkPtr = LocalRegs;
6059:src/xeq.c     **** 	retstk_up();
6060:src/xeq.c     **** 	--RetStkPtr;
6061:src/xeq.c     **** }
 27719              		.loc 1 6061 1 view .LVU7297
 27720 001c 10BD     		pop	{r4, pc}
 27721              	.LVL2180:
 27722              	.L1979:
6058:src/xeq.c     **** 	retstk_up();
 27723              		.loc 1 6058 2 is_stmt 1 view .LVU7298
6058:src/xeq.c     **** 	retstk_up();
 27724              		.loc 1 6058 12 is_stmt 0 view .LVU7299
 27725 001e A3F8E227 		strh	r2, [r3, #2018]	@ movhi
6059:src/xeq.c     **** 	--RetStkPtr;
 27726              		.loc 1 6059 2 is_stmt 1 view .LVU7300
 27727 0022 FFF7FEFF 		bl	retstk_up
 27728              	.LVL2181:
6060:src/xeq.c     **** }
 27729              		.loc 1 6060 2 view .LVU7301
6060:src/xeq.c     **** }
 27730              		.loc 1 6060 4 is_stmt 0 view .LVU7302
 27731 0026 2268     		ldr	r2, [r4]
6060:src/xeq.c     **** }
 27732              		.loc 1 6060 2 view .LVU7303
 27733 0028 B2F8E237 		ldrh	r3, [r2, #2018]
 27734 002c 013B     		subs	r3, r3, #1
 27735 002e A2F8E237 		strh	r3, [r2, #2018]	@ movhi
 27736              		.loc 1 6061 1 view .LVU7304
 27737 0032 10BD     		pop	{r4, pc}
 27738              	.L1983:
 27739              		.align	2
 27740              	.L1982:
 27741 0034 00000000 		.word	main_ram
 27742 0038 00000000 		.word	Error
 27743              		.cfi_endproc
 27744              	.LFE266:
 27746              		.section	.text.cmdregs,"ax",%progbits
 27747              		.align	1
 27748              		.p2align 2,,3
 27749              		.global	cmdregs
 27750              		.syntax unified
 27751              		.thumb
 27752              		.thumb_func
 27753              		.fpu fpv4-sp-d16
 27755              	cmdregs:
 27756              	.LVL2182:
 27757              	.LFB267:
ARM GAS  /tmp/cc0UaEmF.s 			page 710


6062:src/xeq.c     **** 
6063:src/xeq.c     **** /*
6064:src/xeq.c     ****  *  Reduce the number of global registers in favour of local data on the return stack
6065:src/xeq.c     ****  */
6066:src/xeq.c     **** void cmdregs(unsigned int arg, enum rarg op) {
 27758              		.loc 1 6066 46 is_stmt 1 view -0
 27759              		.cfi_startproc
 27760              		@ args = 0, pretend = 0, frame = 0
 27761              		@ frame_needed = 0, uses_anonymous_args = 0
6067:src/xeq.c     **** 	int distance;
 27762              		.loc 1 6067 2 view .LVU7306
6068:src/xeq.c     **** 	int length;
 27763              		.loc 1 6068 2 view .LVU7307
6069:src/xeq.c     **** 
6070:src/xeq.c     **** 	if (is_dblmode()) {
 27764              		.loc 1 6070 2 view .LVU7308
 27765              	.LBB3656:
 27766              	.LBI3656:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 27767              		.loc 1 932 5 view .LVU7309
 27768              	.LBB3657:
 933:src/xeq.c     **** }
 27769              		.loc 1 933 2 view .LVU7310
 27770              	.LBE3657:
 27771              	.LBE3656:
6066:src/xeq.c     **** 	int distance;
 27772              		.loc 1 6066 46 is_stmt 0 view .LVU7311
 27773 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 27774              		.cfi_def_cfa_offset 24
 27775              		.cfi_offset 4, -24
 27776              		.cfi_offset 5, -20
 27777              		.cfi_offset 6, -16
 27778              		.cfi_offset 7, -12
 27779              		.cfi_offset 8, -8
 27780              		.cfi_offset 14, -4
 27781              	.LBB3659:
 27782              	.LBB3658:
 933:src/xeq.c     **** }
 27783              		.loc 1 933 12 view .LVU7312
 27784 0004 294F     		ldr	r7, .L2000
 27785 0006 3A68     		ldr	r2, [r7]
 933:src/xeq.c     **** }
 27786              		.loc 1 933 24 view .LVU7313
 27787 0008 B2F8E817 		ldrh	r1, [r2, #2024]
 27788              	.LVL2183:
 933:src/xeq.c     **** }
 27789              		.loc 1 933 24 view .LVU7314
 27790 000c 44F20103 		movw	r3, #16385
 27791              	.LBE3658:
 27792              	.LBE3659:
 27793              		.loc 1 6070 5 view .LVU7315
 27794 0010 0B40     		ands	r3, r3, r1
 27795 0012 B3F5804F 		cmp	r3, #16384
6066:src/xeq.c     **** 	int distance;
 27796              		.loc 1 6066 46 view .LVU7316
 27797 0016 0446     		mov	r4, r0
 27798              		.loc 1 6070 5 view .LVU7317
ARM GAS  /tmp/cc0UaEmF.s 			page 711


 27799 0018 36D0     		beq	.L1996
6071:src/xeq.c     **** 		// DP register length 16 bytes
6072:src/xeq.c     **** 		length = (arg << 4); 
6073:src/xeq.c     **** 		// We need additional room for lettered registers
6074:src/xeq.c     **** 		arg = (arg << 1) + STACK_SIZE + EXTRA_REG;
6075:src/xeq.c     **** 	}
6076:src/xeq.c     **** 	else {
6077:src/xeq.c     **** 		if (UState.mode_double && arg < STACK_SIZE + EXTRA_REG) {
 27800              		.loc 1 6077 3 is_stmt 1 view .LVU7318
 27801              		.loc 1 6077 7 is_stmt 0 view .LVU7319
 27802 001a 92F8E937 		ldrb	r3, [r2, #2025]	@ zero_extendqisi2
 27803              		.loc 1 6077 6 view .LVU7320
 27804 001e 5B06     		lsls	r3, r3, #25
 27805 0020 29D4     		bmi	.L1997
 27806              	.L1987:
6078:src/xeq.c     **** 			// Special case: we're in int mode but came from DP
6079:src/xeq.c     **** 			// We must not release the space needed for the DP lettered registers
6080:src/xeq.c     **** 			report_err(ERR_RANGE);
6081:src/xeq.c     **** 			return;
6082:src/xeq.c     **** 		}
6083:src/xeq.c     **** 		// register length 8 bytes
6084:src/xeq.c     **** 		length = (arg << 3);
 27807              		.loc 1 6084 3 is_stmt 1 view .LVU7321
 27808              		.loc 1 6084 17 is_stmt 0 view .LVU7322
 27809 0022 4FEAC408 		lsl	r8, r4, #3
 27810              	.LVL2184:
 27811              	.L1986:
6085:src/xeq.c     **** 	}
6086:src/xeq.c     **** 	distance = NumRegs - arg;
 27812              		.loc 1 6086 2 is_stmt 1 view .LVU7323
 27813              		.loc 1 6086 13 is_stmt 0 view .LVU7324
 27814 0026 92F8CF57 		ldrb	r5, [r2, #1999]	@ zero_extendqisi2
 27815              		.loc 1 6086 21 view .LVU7325
 27816 002a 2D1B     		subs	r5, r5, r4
 27817              	.LVL2185:
6087:src/xeq.c     **** 	
6088:src/xeq.c     **** 	// Move return stack, check for room
6089:src/xeq.c     **** 	if (move_retstk(distance << 2))
 27818              		.loc 1 6089 2 is_stmt 1 view .LVU7326
 27819              		.loc 1 6089 6 is_stmt 0 view .LVU7327
 27820 002c A800     		lsls	r0, r5, #2
 27821 002e FFF7FEFF 		bl	move_retstk
 27822              	.LVL2186:
 27823              		.loc 1 6089 5 view .LVU7328
 27824 0032 0646     		mov	r6, r0
 27825 0034 08B1     		cbz	r0, .L1998
 27826              	.LVL2187:
 27827              	.L1984:
6090:src/xeq.c     **** 		return;
6091:src/xeq.c     **** 	
6092:src/xeq.c     **** 	// Move register contents, including the statistics registers
6093:src/xeq.c     **** 	xcopy((unsigned short *)(Regs + TOPREALREG - arg)     - SizeStatRegs,
6094:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
6095:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
6096:src/xeq.c     **** 
6097:src/xeq.c     **** 	// Clear the left space
6098:src/xeq.c     **** 	if (distance < 0)
ARM GAS  /tmp/cc0UaEmF.s 			page 712


6099:src/xeq.c     **** 		xset(Regs + TOPREALREG + distance, 0, -distance << 3);
6100:src/xeq.c     **** 	NumRegs = arg;
6101:src/xeq.c     **** }
 27828              		.loc 1 6101 1 view .LVU7329
 27829 0036 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 27830              	.LVL2188:
 27831              	.L1998:
6093:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 27832              		.loc 1 6093 2 is_stmt 1 view .LVU7330
6093:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 27833              		.loc 1 6093 27 is_stmt 0 view .LVU7331
 27834 003a 3B68     		ldr	r3, [r7]
6093:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 27835              		.loc 1 6093 56 view .LVU7332
 27836 003c 1C4A     		ldr	r2, .L2000+4
6094:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
 27837              		.loc 1 6094 45 view .LVU7333
 27838 003e 93F8CF17 		ldrb	r1, [r3, #1999]	@ zero_extendqisi2
6093:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 27839              		.loc 1 6093 56 view .LVU7334
 27840 0042 1268     		ldr	r2, [r2]
6094:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
 27841              		.loc 1 6094 45 view .LVU7335
 27842 0044 C1F16401 		rsb	r1, r1, #100
6093:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 27843              		.loc 1 6093 45 view .LVU7336
 27844 0048 C4F16400 		rsb	r0, r4, #100
6093:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 27845              		.loc 1 6093 27 view .LVU7337
 27846 004c 03F58663 		add	r3, r3, #1072
6094:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
 27847              		.loc 1 6094 56 view .LVU7338
 27848 0050 C2EB8101 		rsb	r1, r2, r1, lsl #2
6093:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 27849              		.loc 1 6093 56 view .LVU7339
 27850 0054 C2EB8000 		rsb	r0, r2, r0, lsl #2
6093:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 27851              		.loc 1 6093 2 view .LVU7340
 27852 0058 03EB4101 		add	r1, r3, r1, lsl #1
 27853 005c 08EB4202 		add	r2, r8, r2, lsl #1
 27854 0060 03EB4000 		add	r0, r3, r0, lsl #1
 27855 0064 FFF7FEFF 		bl	xcopy
 27856              	.LVL2189:
6098:src/xeq.c     **** 		xset(Regs + TOPREALREG + distance, 0, -distance << 3);
 27857              		.loc 1 6098 2 is_stmt 1 view .LVU7341
6098:src/xeq.c     **** 		xset(Regs + TOPREALREG + distance, 0, -distance << 3);
 27858              		.loc 1 6098 5 is_stmt 0 view .LVU7342
 27859 0068 002D     		cmp	r5, #0
 27860 006a 13DB     		blt	.L1999
 27861              	.L1991:
6100:src/xeq.c     **** }
 27862              		.loc 1 6100 2 is_stmt 1 view .LVU7343
6100:src/xeq.c     **** }
 27863              		.loc 1 6100 10 is_stmt 0 view .LVU7344
 27864 006c 3B68     		ldr	r3, [r7]
 27865 006e 83F8CF47 		strb	r4, [r3, #1999]
 27866              		.loc 1 6101 1 view .LVU7345
ARM GAS  /tmp/cc0UaEmF.s 			page 713


 27867 0072 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 27868              	.LVL2190:
 27869              	.L1997:
6077:src/xeq.c     **** 			// Special case: we're in int mode but came from DP
 27870              		.loc 1 6077 26 discriminator 1 view .LVU7346
 27871 0076 0B28     		cmp	r0, #11
 27872 0078 D3D8     		bhi	.L1987
6080:src/xeq.c     **** 			return;
 27873              		.loc 1 6080 4 is_stmt 1 view .LVU7347
 27874              	.LVL2191:
 27875              	.LBB3660:
 27876              	.LBI3660:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27877              		.loc 1 537 5 view .LVU7348
 27878              	.LBB3661:
 538:src/xeq.c     **** 		Error = e;
 27879              		.loc 1 538 2 view .LVU7349
 538:src/xeq.c     **** 		Error = e;
 27880              		.loc 1 538 12 is_stmt 0 view .LVU7350
 27881 007a 0E4B     		ldr	r3, .L2000+8
 538:src/xeq.c     **** 		Error = e;
 27882              		.loc 1 538 5 view .LVU7351
 27883 007c 1A68     		ldr	r2, [r3]
 27884 007e 002A     		cmp	r2, #0
 27885 0080 D9D1     		bne	.L1984
 27886              	.LVL2192:
 27887              	.LBB3662:
 27888              	.LBI3662:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27889              		.loc 1 537 5 is_stmt 1 view .LVU7352
 27890              	.LBB3663:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 27891              		.loc 1 539 3 view .LVU7353
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 27892              		.loc 1 539 9 is_stmt 0 view .LVU7354
 27893 0082 0822     		movs	r2, #8
 27894 0084 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 27895              		.loc 1 540 3 is_stmt 1 view .LVU7355
 27896 0086 D6E7     		b	.L1984
 27897              	.LVL2193:
 27898              	.L1996:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 27899              		.loc 1 540 3 is_stmt 0 view .LVU7356
 27900              	.LBE3663:
 27901              	.LBE3662:
 27902              	.LBE3661:
 27903              	.LBE3660:
6072:src/xeq.c     **** 		// We need additional room for lettered registers
 27904              		.loc 1 6072 3 is_stmt 1 view .LVU7357
6074:src/xeq.c     **** 	}
 27905              		.loc 1 6074 14 is_stmt 0 view .LVU7358
 27906 0088 4300     		lsls	r3, r0, #1
6072:src/xeq.c     **** 		// We need additional room for lettered registers
 27907              		.loc 1 6072 17 view .LVU7359
 27908 008a 4FEA0018 		lsl	r8, r0, #4
 27909              	.LVL2194:
ARM GAS  /tmp/cc0UaEmF.s 			page 714


6074:src/xeq.c     **** 	}
 27910              		.loc 1 6074 3 is_stmt 1 view .LVU7360
6074:src/xeq.c     **** 	}
 27911              		.loc 1 6074 7 is_stmt 0 view .LVU7361
 27912 008e 03F10C04 		add	r4, r3, #12
 27913              	.LVL2195:
6074:src/xeq.c     **** 	}
 27914              		.loc 1 6074 7 view .LVU7362
 27915 0092 C8E7     		b	.L1986
 27916              	.LVL2196:
 27917              	.L1999:
6099:src/xeq.c     **** 	NumRegs = arg;
 27918              		.loc 1 6099 3 is_stmt 1 view .LVU7363
6099:src/xeq.c     **** 	NumRegs = arg;
 27919              		.loc 1 6099 8 is_stmt 0 view .LVU7364
 27920 0094 3868     		ldr	r0, [r7]
6099:src/xeq.c     **** 	NumRegs = arg;
 27921              		.loc 1 6099 41 view .LVU7365
 27922 0096 6A42     		rsbs	r2, r5, #0
6099:src/xeq.c     **** 	NumRegs = arg;
 27923              		.loc 1 6099 26 view .LVU7366
 27924 0098 00EBC500 		add	r0, r0, r5, lsl #3
6099:src/xeq.c     **** 	NumRegs = arg;
 27925              		.loc 1 6099 3 view .LVU7367
 27926 009c 3146     		mov	r1, r6
 27927 009e D200     		lsls	r2, r2, #3
 27928 00a0 00F5EA60 		add	r0, r0, #1872
 27929 00a4 FFF7FEFF 		bl	xset
 27930              	.LVL2197:
 27931 00a8 E0E7     		b	.L1991
 27932              	.L2001:
 27933 00aa 00BF     		.align	2
 27934              	.L2000:
 27935 00ac 00000000 		.word	main_ram
 27936 00b0 00000000 		.word	SizeStatRegs
 27937 00b4 00000000 		.word	Error
 27938              		.cfi_endproc
 27939              	.LFE267:
 27941              		.section	.text.op_double,"ax",%progbits
 27942              		.align	1
 27943              		.p2align 2,,3
 27944              		.global	op_double
 27945              		.syntax unified
 27946              		.thumb
 27947              		.thumb_func
 27948              		.fpu fpv4-sp-d16
 27950              	op_double:
 27951              	.LVL2198:
 27952              	.LFB213:
3878:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
 27953              		.loc 1 3878 31 is_stmt 1 view -0
 27954              		.cfi_startproc
 27955              		@ args = 0, pretend = 0, frame = 40
 27956              		@ frame_needed = 0, uses_anonymous_args = 0
3879:src/xeq.c     **** 	const int intm = is_intmode();
 27957              		.loc 1 3879 2 view .LVU7369
3878:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
ARM GAS  /tmp/cc0UaEmF.s 			page 715


 27958              		.loc 1 3878 31 is_stmt 0 view .LVU7370
 27959 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 27960              		.cfi_def_cfa_offset 24
 27961              		.cfi_offset 4, -24
 27962              		.cfi_offset 5, -20
 27963              		.cfi_offset 6, -16
 27964              		.cfi_offset 7, -12
 27965              		.cfi_offset 8, -8
 27966              		.cfi_offset 14, -4
3880:src/xeq.c     **** 	int i;
 27967              		.loc 1 3880 19 view .LVU7371
 27968 0004 454E     		ldr	r6, .L2030
 27969 0006 3368     		ldr	r3, [r6]
3883:src/xeq.c     **** 		// Mode switch
 27970              		.loc 1 3883 5 view .LVU7372
 27971 0008 A0F1B504 		sub	r4, r0, #181
3883:src/xeq.c     **** 		// Mode switch
 27972              		.loc 1 3883 19 view .LVU7373
 27973 000c 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
3880:src/xeq.c     **** 	int i;
 27974              		.loc 1 3880 19 view .LVU7374
 27975 0010 93F8E887 		ldrb	r8, [r3, #2024]	@ zero_extendqisi2
 27976              	.LVL2199:
3880:src/xeq.c     **** 	int i;
 27977              		.loc 1 3880 2 is_stmt 1 view .LVU7375
3883:src/xeq.c     **** 		// Mode switch
 27978              		.loc 1 3883 5 is_stmt 0 view .LVU7376
 27979 0014 B4FA84F4 		clz	r4, r4
 27980 0018 C2F38011 		ubfx	r1, r2, #6, #1
 27981 001c 6409     		lsrs	r4, r4, #5
 27982 001e 8C42     		cmp	r4, r1
3878:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
 27983              		.loc 1 3878 31 view .LVU7377
 27984 0020 8AB0     		sub	sp, sp, #40
 27985              		.cfi_def_cfa_offset 64
3880:src/xeq.c     **** 	int i;
 27986              		.loc 1 3880 12 view .LVU7378
 27987 0022 08F00108 		and	r8, r8, #1
 27988              	.LVL2200:
3881:src/xeq.c     **** 
 27989              		.loc 1 3881 2 is_stmt 1 view .LVU7379
3883:src/xeq.c     **** 		// Mode switch
 27990              		.loc 1 3883 2 view .LVU7380
3883:src/xeq.c     **** 		// Mode switch
 27991              		.loc 1 3883 5 is_stmt 0 view .LVU7381
 27992 0026 41D0     		beq	.L2003
3885:src/xeq.c     **** 			if (NumRegs < STACK_SIZE + EXTRA_REG) {
 27993              		.loc 1 3885 3 is_stmt 1 view .LVU7382
3885:src/xeq.c     **** 			if (NumRegs < STACK_SIZE + EXTRA_REG) {
 27994              		.loc 1 3885 6 is_stmt 0 view .LVU7383
 27995 0028 B528     		cmp	r0, #181
 27996 002a 4AD0     		beq	.L2028
3903:src/xeq.c     **** 				// Convert X to K to single precision
 27997              		.loc 1 3903 4 is_stmt 1 view .LVU7384
3903:src/xeq.c     **** 				// Convert X to K to single precision
 27998              		.loc 1 3903 7 is_stmt 0 view .LVU7385
 27999 002c B8F1000F 		cmp	r8, #0
ARM GAS  /tmp/cc0UaEmF.s 			page 716


 28000 0030 25D1     		bne	.L2011
 28001 0032 6F24     		movs	r4, #111
 28002 0034 01AF     		add	r7, sp, #4
 28003              	.LVL2201:
 28004              	.L2013:
3907:src/xeq.c     **** 			}
 28005              		.loc 1 3907 6 is_stmt 1 discriminator 3 view .LVU7386
3907:src/xeq.c     **** 			}
 28006              		.loc 1 3907 28 is_stmt 0 discriminator 3 view .LVU7387
 28007 0036 03F58663 		add	r3, r3, #1072
 28008              	.LBB3664:
 28009              	.LBB3665:
 710:src/xeq.c     **** }
 28010              		.loc 1 710 9 discriminator 3 view .LVU7388
 28011 003a 2046     		mov	r0, r4
 28012              	.LBE3665:
 28013              	.LBE3664:
3907:src/xeq.c     **** 			}
 28014              		.loc 1 3907 6 discriminator 3 view .LVU7389
 28015 003c 03EBC405 		add	r5, r3, r4, lsl #3
 28016              	.LVL2202:
 28017              	.LBB3667:
 28018              	.LBI3664:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 28019              		.loc 1 709 11 is_stmt 1 discriminator 3 view .LVU7390
 28020              	.LBB3666:
 710:src/xeq.c     **** }
 28021              		.loc 1 710 2 discriminator 3 view .LVU7391
 710:src/xeq.c     **** }
 28022              		.loc 1 710 9 is_stmt 0 discriminator 3 view .LVU7392
 28023 0040 FFF7FEFF 		bl	get_reg_n
 28024              	.LVL2203:
 710:src/xeq.c     **** }
 28025              		.loc 1 710 9 discriminator 3 view .LVU7393
 28026              	.LBE3666:
 28027              	.LBE3667:
 28028              	.LBB3668:
 28029              	.LBI3668:
 639:src/xeq.c     **** 	decNumber temp;
 28030              		.loc 1 639 6 is_stmt 1 discriminator 3 view .LVU7394
 28031              	.LBB3669:
 640:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 28032              		.loc 1 640 2 discriminator 3 view .LVU7395
 641:src/xeq.c     **** }
 28033              		.loc 1 641 2 discriminator 3 view .LVU7396
 641:src/xeq.c     **** }
 28034              		.loc 1 641 24 is_stmt 0 discriminator 3 view .LVU7397
 28035 0044 3946     		mov	r1, r7
 28036 0046 FFF7FEFF 		bl	decimal128ToNumber
 28037              	.LVL2204:
 641:src/xeq.c     **** }
 28038              		.loc 1 641 24 discriminator 3 view .LVU7398
 28039 004a 013C     		subs	r4, r4, #1
 28040              	.LVL2205:
 641:src/xeq.c     **** }
 28041              		.loc 1 641 24 discriminator 3 view .LVU7399
 28042 004c 0146     		mov	r1, r0
ARM GAS  /tmp/cc0UaEmF.s 			page 717


 641:src/xeq.c     **** }
 28043              		.loc 1 641 2 discriminator 3 view .LVU7400
 28044 004e 2846     		mov	r0, r5
 28045 0050 FFF7FEFF 		bl	packed_from_number
 28046              	.LVL2206:
 641:src/xeq.c     **** }
 28047              		.loc 1 641 2 discriminator 3 view .LVU7401
 28048              	.LBE3669:
 28049              	.LBE3668:
3906:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
 28050              		.loc 1 3906 50 is_stmt 1 discriminator 3 view .LVU7402
3906:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
 28051              		.loc 1 3906 42 discriminator 3 view .LVU7403
3906:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
 28052              		.loc 1 3906 5 is_stmt 0 discriminator 3 view .LVU7404
 28053 0054 632C     		cmp	r4, #99
 28054 0056 3368     		ldr	r3, [r6]
 28055 0058 EDD1     		bne	.L2013
3909:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 28056              		.loc 1 3909 4 is_stmt 1 view .LVU7405
3909:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 28057              		.loc 1 3909 23 is_stmt 0 view .LVU7406
 28058 005a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
3910:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28059              		.loc 1 3910 7 view .LVU7407
 28060 005e 93F8CF17 		ldrb	r1, [r3, #1999]	@ zero_extendqisi2
3909:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 28061              		.loc 1 3909 23 view .LVU7408
 28062 0062 6FF38612 		bfc	r2, #6, #1
3910:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28063              		.loc 1 3910 7 view .LVU7409
 28064 0066 6429     		cmp	r1, #100
3909:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 28065              		.loc 1 3909 23 view .LVU7410
 28066 0068 83F8E927 		strb	r2, [r3, #2025]
3910:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28067              		.loc 1 3910 4 is_stmt 1 view .LVU7411
3910:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28068              		.loc 1 3910 7 is_stmt 0 view .LVU7412
 28069 006c 1AD8     		bhi	.L2016
 28070              	.LVL2207:
 28071              	.L2025:
3914:src/xeq.c     **** 	if (intm) {
 28072              		.loc 1 3914 2 is_stmt 1 view .LVU7413
3914:src/xeq.c     **** 	if (intm) {
 28073              		.loc 1 3914 14 is_stmt 0 view .LVU7414
 28074 006e 6420     		movs	r0, #100
 28075 0070 FFF7FEFF 		bl	get_reg_n
 28076              	.LVL2208:
3914:src/xeq.c     **** 	if (intm) {
 28077              		.loc 1 3914 12 view .LVU7415
 28078 0074 2A4B     		ldr	r3, .L2030+4
 28079 0076 1860     		str	r0, [r3]
3915:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 28080              		.loc 1 3915 2 is_stmt 1 view .LVU7416
 28081              	.L2002:
3919:src/xeq.c     **** 
ARM GAS  /tmp/cc0UaEmF.s 			page 718


 28082              		.loc 1 3919 1 is_stmt 0 view .LVU7417
 28083 0078 0AB0     		add	sp, sp, #40
 28084              		.cfi_remember_state
 28085              		.cfi_def_cfa_offset 24
 28086              		@ sp needed
 28087 007a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 28088              	.LVL2209:
 28089              	.L2011:
 28090              		.cfi_restore_state
3909:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 28091              		.loc 1 3909 4 is_stmt 1 view .LVU7418
3910:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28092              		.loc 1 3910 7 is_stmt 0 view .LVU7419
 28093 007e 93F8CF17 		ldrb	r1, [r3, #1999]	@ zero_extendqisi2
3909:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 28094              		.loc 1 3909 23 view .LVU7420
 28095 0082 6FF38612 		bfc	r2, #6, #1
3910:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28096              		.loc 1 3910 7 view .LVU7421
 28097 0086 6429     		cmp	r1, #100
3909:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 28098              		.loc 1 3909 23 view .LVU7422
 28099 0088 83F8E927 		strb	r2, [r3, #2025]
3910:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28100              		.loc 1 3910 4 is_stmt 1 view .LVU7423
3910:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28101              		.loc 1 3910 7 is_stmt 0 view .LVU7424
 28102 008c 0AD8     		bhi	.L2016
 28103              	.LVL2210:
 28104              	.L2024:
3914:src/xeq.c     **** 	if (intm) {
 28105              		.loc 1 3914 2 is_stmt 1 view .LVU7425
3914:src/xeq.c     **** 	if (intm) {
 28106              		.loc 1 3914 14 is_stmt 0 view .LVU7426
 28107 008e 6420     		movs	r0, #100
 28108 0090 FFF7FEFF 		bl	get_reg_n
 28109              	.LVL2211:
3914:src/xeq.c     **** 	if (intm) {
 28110              		.loc 1 3914 12 view .LVU7427
 28111 0094 224B     		ldr	r3, .L2030+4
 28112 0096 1860     		str	r0, [r3]
3915:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 28113              		.loc 1 3915 2 is_stmt 1 view .LVU7428
 28114              	.L2015:
3917:src/xeq.c     **** 	}
 28115              		.loc 1 3917 3 view .LVU7429
 28116 0098 C120     		movs	r0, #193
 28117 009a FFF7FEFF 		bl	op_float
 28118              	.LVL2212:
3919:src/xeq.c     **** 
 28119              		.loc 1 3919 1 is_stmt 0 view .LVU7430
 28120 009e 0AB0     		add	sp, sp, #40
 28121              		.cfi_remember_state
 28122              		.cfi_def_cfa_offset 24
 28123              		@ sp needed
 28124 00a0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 28125              	.LVL2213:
ARM GAS  /tmp/cc0UaEmF.s 			page 719


 28126              	.L2016:
 28127              		.cfi_restore_state
3911:src/xeq.c     **** 		}
 28128              		.loc 1 3911 5 is_stmt 1 view .LVU7431
 28129 00a4 7D21     		movs	r1, #125
 28130 00a6 6420     		movs	r0, #100
 28131 00a8 FFF7FEFF 		bl	cmdregs
 28132              	.LVL2214:
 28133              	.L2003:
3914:src/xeq.c     **** 	if (intm) {
 28134              		.loc 1 3914 2 view .LVU7432
3914:src/xeq.c     **** 	if (intm) {
 28135              		.loc 1 3914 14 is_stmt 0 view .LVU7433
 28136 00ac 6420     		movs	r0, #100
 28137 00ae FFF7FEFF 		bl	get_reg_n
 28138              	.LVL2215:
3914:src/xeq.c     **** 	if (intm) {
 28139              		.loc 1 3914 12 view .LVU7434
 28140 00b2 1B4B     		ldr	r3, .L2030+4
 28141 00b4 1860     		str	r0, [r3]
3915:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 28142              		.loc 1 3915 2 is_stmt 1 view .LVU7435
3915:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 28143              		.loc 1 3915 5 is_stmt 0 view .LVU7436
 28144 00b6 B8F1000F 		cmp	r8, #0
 28145 00ba EDD1     		bne	.L2015
3919:src/xeq.c     **** 
 28146              		.loc 1 3919 1 view .LVU7437
 28147 00bc 0AB0     		add	sp, sp, #40
 28148              		.cfi_remember_state
 28149              		.cfi_def_cfa_offset 24
 28150              		@ sp needed
 28151 00be BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 28152              	.LVL2216:
 28153              	.L2028:
 28154              		.cfi_restore_state
3886:src/xeq.c     **** 				// Need space for double precision stack
 28155              		.loc 1 3886 4 is_stmt 1 view .LVU7438
3886:src/xeq.c     **** 				// Need space for double precision stack
 28156              		.loc 1 3886 7 is_stmt 0 view .LVU7439
 28157 00c2 93F8CF27 		ldrb	r2, [r3, #1999]	@ zero_extendqisi2
 28158 00c6 0B2A     		cmp	r2, #11
 28159 00c8 1ED9     		bls	.L2029
 28160              	.LVL2217:
 28161              	.L2005:
3894:src/xeq.c     **** 			if (! intm) {
 28162              		.loc 1 3894 4 is_stmt 1 view .LVU7440
3894:src/xeq.c     **** 			if (! intm) {
 28163              		.loc 1 3894 23 is_stmt 0 view .LVU7441
 28164 00ca 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 28165 00ce 42F04002 		orr	r2, r2, #64
 28166 00d2 83F8E927 		strb	r2, [r3, #2025]
3895:src/xeq.c     **** 				// Convert X to K to double precision
 28167              		.loc 1 3895 4 is_stmt 1 view .LVU7442
3895:src/xeq.c     **** 				// Convert X to K to double precision
 28168              		.loc 1 3895 7 is_stmt 0 view .LVU7443
 28169 00d6 B8F1000F 		cmp	r8, #0
ARM GAS  /tmp/cc0UaEmF.s 			page 720


 28170 00da D8D1     		bne	.L2024
 28171 00dc 6424     		movs	r4, #100
 28172 00de 01AF     		add	r7, sp, #4
 28173              	.L2009:
 28174              	.LVL2218:
3899:src/xeq.c     **** 			}
 28175              		.loc 1 3899 6 is_stmt 1 view .LVU7444
 28176              	.LBB3670:
 28177              	.LBI3670:
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 28178              		.loc 1 709 11 view .LVU7445
 28179              	.LBB3671:
 710:src/xeq.c     **** }
 28180              		.loc 1 710 2 view .LVU7446
 710:src/xeq.c     **** }
 28181              		.loc 1 710 9 is_stmt 0 view .LVU7447
 28182 00e0 2046     		mov	r0, r4
 28183 00e2 FFF7FEFF 		bl	get_reg_n
 28184              	.LVL2219:
 28185              	.LBE3671:
 28186              	.LBE3670:
3899:src/xeq.c     **** 			}
 28187              		.loc 1 3899 48 view .LVU7448
 28188 00e6 3368     		ldr	r3, [r6]
 28189 00e8 03F58663 		add	r3, r3, #1072
 28190              	.LBB3673:
 28191              	.LBB3672:
 710:src/xeq.c     **** }
 28192              		.loc 1 710 9 view .LVU7449
 28193 00ec 0546     		mov	r5, r0
 28194              	.LVL2220:
 710:src/xeq.c     **** }
 28195              		.loc 1 710 9 view .LVU7450
 28196              	.LBE3672:
 28197              	.LBE3673:
 28198              	.LBB3674:
 28199              	.LBI3674:
 645:src/xeq.c     **** 	decNumber temp;
 28200              		.loc 1 645 6 is_stmt 1 view .LVU7451
 28201              	.LBB3675:
 646:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 28202              		.loc 1 646 2 view .LVU7452
 647:src/xeq.c     **** }
 28203              		.loc 1 647 2 view .LVU7453
 647:src/xeq.c     **** }
 28204              		.loc 1 647 27 is_stmt 0 view .LVU7454
 28205 00ee 3946     		mov	r1, r7
 28206 00f0 03EBC400 		add	r0, r3, r4, lsl #3
 28207              	.LVL2221:
 647:src/xeq.c     **** }
 28208              		.loc 1 647 27 view .LVU7455
 28209 00f4 FFF7FEFF 		bl	decimal64ToNumber
 28210              	.LVL2222:
 647:src/xeq.c     **** }
 28211              		.loc 1 647 27 view .LVU7456
 28212 00f8 0134     		adds	r4, r4, #1
 28213              	.LVL2223:
ARM GAS  /tmp/cc0UaEmF.s 			page 721


 647:src/xeq.c     **** }
 28214              		.loc 1 647 27 view .LVU7457
 28215 00fa 0146     		mov	r1, r0
 647:src/xeq.c     **** }
 28216              		.loc 1 647 2 view .LVU7458
 28217 00fc 2846     		mov	r0, r5
 28218 00fe FFF7FEFF 		bl	packed128_from_number
 28219              	.LVL2224:
 647:src/xeq.c     **** }
 28220              		.loc 1 647 2 view .LVU7459
 28221              	.LBE3675:
 28222              	.LBE3674:
3898:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
 28223              		.loc 1 3898 45 is_stmt 1 view .LVU7460
3898:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
 28224              		.loc 1 3898 17 view .LVU7461
3898:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
 28225              		.loc 1 3898 5 is_stmt 0 view .LVU7462
 28226 0102 702C     		cmp	r4, #112
 28227 0104 ECD1     		bne	.L2009
 28228 0106 B2E7     		b	.L2025
 28229              	.LVL2225:
 28230              	.L2029:
3888:src/xeq.c     **** 				if (Error) {
 28231              		.loc 1 3888 5 is_stmt 1 view .LVU7463
 28232 0108 7D21     		movs	r1, #125
 28233 010a 0C20     		movs	r0, #12
 28234              	.LVL2226:
3888:src/xeq.c     **** 				if (Error) {
 28235              		.loc 1 3888 5 is_stmt 0 view .LVU7464
 28236 010c FFF7FEFF 		bl	cmdregs
 28237              	.LVL2227:
3889:src/xeq.c     **** 					return;
 28238              		.loc 1 3889 5 is_stmt 1 view .LVU7465
3889:src/xeq.c     **** 					return;
 28239              		.loc 1 3889 9 is_stmt 0 view .LVU7466
 28240 0110 044B     		ldr	r3, .L2030+8
3889:src/xeq.c     **** 					return;
 28241              		.loc 1 3889 8 view .LVU7467
 28242 0112 1B68     		ldr	r3, [r3]
 28243 0114 002B     		cmp	r3, #0
 28244 0116 AFD1     		bne	.L2002
 28245 0118 3368     		ldr	r3, [r6]
 28246 011a D6E7     		b	.L2005
 28247              	.L2031:
 28248              		.align	2
 28249              	.L2030:
 28250 011c 00000000 		.word	main_ram
 28251 0120 00000000 		.word	StackBase
 28252 0124 00000000 		.word	Error
 28253              		.cfi_endproc
 28254              	.LFE213:
 28256              		.section	.text.cmdrestm,"ax",%progbits
 28257              		.align	1
 28258              		.p2align 2,,3
 28259              		.global	cmdrestm
 28260              		.syntax unified
ARM GAS  /tmp/cc0UaEmF.s 			page 722


 28261              		.thumb
 28262              		.thumb_func
 28263              		.fpu fpv4-sp-d16
 28265              	cmdrestm:
 28266              	.LVL2228:
 28267              	.LFB208:
3575:src/xeq.c     **** 	const int dbl = is_dblmode();
 28268              		.loc 1 3575 47 is_stmt 1 view -0
 28269              		.cfi_startproc
 28270              		@ args = 0, pretend = 0, frame = 0
 28271              		@ frame_needed = 0, uses_anonymous_args = 0
3576:src/xeq.c     **** 	const int intm = is_intmode();
 28272              		.loc 1 3576 2 view .LVU7469
 28273              	.LBB3676:
 28274              	.LBI3676:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 28275              		.loc 1 932 5 view .LVU7470
 28276              	.LBB3677:
 933:src/xeq.c     **** }
 28277              		.loc 1 933 2 view .LVU7471
 28278              	.LBE3677:
 28279              	.LBE3676:
3575:src/xeq.c     **** 	const int dbl = is_dblmode();
 28280              		.loc 1 3575 47 is_stmt 0 view .LVU7472
 28281 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 28282              		.cfi_def_cfa_offset 24
 28283              		.cfi_offset 3, -24
 28284              		.cfi_offset 4, -20
 28285              		.cfi_offset 5, -16
 28286              		.cfi_offset 6, -12
 28287              		.cfi_offset 7, -8
 28288              		.cfi_offset 14, -4
 28289              	.LBB3685:
 28290              	.LBB3678:
 933:src/xeq.c     **** }
 28291              		.loc 1 933 12 view .LVU7473
 28292 0002 294F     		ldr	r7, .L2040
 28293 0004 3D68     		ldr	r5, [r7]
 28294              	.LBE3678:
 28295              	.LBE3685:
3577:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
 28296              		.loc 1 3577 19 view .LVU7474
 28297 0006 95F8E847 		ldrb	r4, [r5, #2024]	@ zero_extendqisi2
 28298              	.LBB3686:
 28299              	.LBB3679:
 933:src/xeq.c     **** }
 28300              		.loc 1 933 24 view .LVU7475
 28301 000a B5F8E867 		ldrh	r6, [r5, #2024]
 28302              	.LVL2229:
 933:src/xeq.c     **** }
 28303              		.loc 1 933 24 view .LVU7476
 28304              	.LBE3679:
 28305              	.LBE3686:
3577:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
 28306              		.loc 1 3577 2 is_stmt 1 view .LVU7477
3578:src/xeq.c     **** 
 28307              		.loc 1 3578 18 is_stmt 0 view .LVU7478
ARM GAS  /tmp/cc0UaEmF.s 			page 723


 28308 000e FFF7FEFF 		bl	get_reg_n
 28309              	.LVL2230:
3578:src/xeq.c     **** 
 28310              		.loc 1 3578 2 view .LVU7479
 28311 0012 0822     		movs	r2, #8
3578:src/xeq.c     **** 
 28312              		.loc 1 3578 18 view .LVU7480
 28313 0014 0146     		mov	r1, r0
3578:src/xeq.c     **** 
 28314              		.loc 1 3578 2 view .LVU7481
 28315 0016 05F2E470 		addw	r0, r5, #2020
 28316 001a FFF7FEFF 		bl	xcopy
 28317              	.LVL2231:
3581:src/xeq.c     **** 		UState.contrast = 6;
 28318              		.loc 1 3581 7 view .LVU7482
 28319 001e 3B68     		ldr	r3, [r7]
3581:src/xeq.c     **** 		UState.contrast = 6;
 28320              		.loc 1 3581 23 view .LVU7483
 28321 0020 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
3581:src/xeq.c     **** 		UState.contrast = 6;
 28322              		.loc 1 3581 5 view .LVU7484
 28323 0024 1107     		lsls	r1, r2, #28
3577:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
 28324              		.loc 1 3577 19 view .LVU7485
 28325 0026 04F00104 		and	r4, r4, #1
 28326              	.LVL2232:
3578:src/xeq.c     **** 
 28327              		.loc 1 3578 2 is_stmt 1 view .LVU7486
3581:src/xeq.c     **** 		UState.contrast = 6;
 28328              		.loc 1 3581 2 view .LVU7487
3581:src/xeq.c     **** 		UState.contrast = 6;
 28329              		.loc 1 3581 5 is_stmt 0 view .LVU7488
 28330 002a 04D1     		bne	.L2033
3582:src/xeq.c     **** 
 28331              		.loc 1 3582 3 is_stmt 1 view .LVU7489
3582:src/xeq.c     **** 
 28332              		.loc 1 3582 19 is_stmt 0 view .LVU7490
 28333 002c 0621     		movs	r1, #6
 28334 002e 61F30302 		bfi	r2, r1, #0, #4
 28335 0032 83F8E427 		strb	r2, [r3, #2020]
 28336              	.L2033:
3584:src/xeq.c     **** 		// Switch back to decimal or integer mode
 28337              		.loc 1 3584 2 is_stmt 1 view .LVU7491
3584:src/xeq.c     **** 		// Switch back to decimal or integer mode
 28338              		.loc 1 3584 14 is_stmt 0 view .LVU7492
 28339 0036 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
3584:src/xeq.c     **** 		// Switch back to decimal or integer mode
 28340              		.loc 1 3584 5 view .LVU7493
 28341 003a 02F00101 		and	r1, r2, #1
 28342 003e A142     		cmp	r1, r4
 28343 0040 08D0     		beq	.L2034
3586:src/xeq.c     **** 		if (intm)
 28344              		.loc 1 3586 3 is_stmt 1 view .LVU7494
3586:src/xeq.c     **** 		if (intm)
 28345              		.loc 1 3586 15 is_stmt 0 view .LVU7495
 28346 0042 64F30002 		bfi	r2, r4, #0, #1
 28347 0046 83F8E827 		strb	r2, [r3, #2024]
ARM GAS  /tmp/cc0UaEmF.s 			page 724


3587:src/xeq.c     **** 			op_float(OP_FLOAT_RCLM);
 28348              		.loc 1 3587 3 is_stmt 1 view .LVU7496
3587:src/xeq.c     **** 			op_float(OP_FLOAT_RCLM);
 28349              		.loc 1 3587 6 is_stmt 0 view .LVU7497
 28350 004a 4CB3     		cbz	r4, .L2035
3588:src/xeq.c     **** 		else
 28351              		.loc 1 3588 4 is_stmt 1 view .LVU7498
 28352 004c C220     		movs	r0, #194
 28353 004e FFF7FEFF 		bl	op_float
 28354              	.LVL2233:
 28355 0052 3B68     		ldr	r3, [r7]
 28356              	.L2034:
3592:src/xeq.c     **** 		// Switch back to double/single precision
 28357              		.loc 1 3592 2 view .LVU7499
3592:src/xeq.c     **** 		// Switch back to double/single precision
 28358              		.loc 1 3592 6 is_stmt 0 view .LVU7500
 28359 0054 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
3592:src/xeq.c     **** 		// Switch back to double/single precision
 28360              		.loc 1 3592 5 view .LVU7501
 28361 0058 D207     		lsls	r2, r2, #31
 28362 005a 20D4     		bmi	.L2032
 28363              	.LBB3687:
 28364              	.LBB3688:
 933:src/xeq.c     **** }
 28365              		.loc 1 933 24 view .LVU7502
 28366 005c B3F8E827 		ldrh	r2, [r3, #2024]
 28367              	.LBE3688:
 28368              	.LBE3687:
 28369              	.LBB3691:
 28370              	.LBB3680:
 28371 0060 44F20101 		movw	r1, #16385
 28372              	.LBE3680:
 28373              	.LBE3691:
 28374              	.LBB3692:
 28375              	.LBB3689:
 28376 0064 0A40     		ands	r2, r2, r1
 28377              	.LBE3689:
 28378              	.LBE3692:
 28379              	.LBB3693:
 28380              	.LBB3681:
 28381 0066 0E40     		ands	r6, r6, r1
 28382              	.LVL2234:
 933:src/xeq.c     **** }
 28383              		.loc 1 933 24 view .LVU7503
 28384              	.LBE3681:
 28385              	.LBE3693:
3592:src/xeq.c     **** 		// Switch back to double/single precision
 28386              		.loc 1 3592 21 view .LVU7504
 28387 0068 A2F58042 		sub	r2, r2, #16384
 28388              	.LBB3694:
 28389              	.LBB3682:
 933:src/xeq.c     **** }
 28390              		.loc 1 933 24 view .LVU7505
 28391 006c A6F58041 		sub	r1, r6, #16384
 28392              	.LBE3682:
 28393              	.LBE3694:
3592:src/xeq.c     **** 		// Switch back to double/single precision
ARM GAS  /tmp/cc0UaEmF.s 			page 725


 28394              		.loc 1 3592 21 view .LVU7506
 28395 0070 B2FA82F2 		clz	r2, r2
 28396              	.LBB3695:
 28397              	.LBB3683:
 933:src/xeq.c     **** }
 28398              		.loc 1 933 24 view .LVU7507
 28399 0074 B1FA81F1 		clz	r1, r1
 28400              	.LBE3683:
 28401              	.LBE3695:
3592:src/xeq.c     **** 		// Switch back to double/single precision
 28402              		.loc 1 3592 21 view .LVU7508
 28403 0078 5209     		lsrs	r2, r2, #5
 28404              	.LBB3696:
 28405              	.LBB3684:
 933:src/xeq.c     **** }
 28406              		.loc 1 933 24 view .LVU7509
 28407 007a 4909     		lsrs	r1, r1, #5
 28408              	.LBE3684:
 28409              	.LBE3696:
 28410              	.LBB3697:
 28411              	.LBI3687:
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 28412              		.loc 1 932 5 is_stmt 1 view .LVU7510
 28413              	.LBB3690:
 933:src/xeq.c     **** }
 28414              		.loc 1 933 2 view .LVU7511
 28415              	.LBE3690:
 28416              	.LBE3697:
3592:src/xeq.c     **** 		// Switch back to double/single precision
 28417              		.loc 1 3592 21 is_stmt 0 view .LVU7512
 28418 007c 8A42     		cmp	r2, r1
 28419 007e 0ED0     		beq	.L2032
3594:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
 28420              		.loc 1 3594 3 is_stmt 1 view .LVU7513
3594:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
 28421              		.loc 1 3594 22 is_stmt 0 view .LVU7514
 28422 0080 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 28423 0084 61F38612 		bfi	r2, r1, #6, #1
3595:src/xeq.c     **** 	}
 28424              		.loc 1 3595 3 view .LVU7515
 28425 0088 B6F5804F 		cmp	r6, #16384
3594:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
 28426              		.loc 1 3594 22 view .LVU7516
 28427 008c 83F8E927 		strb	r2, [r3, #2025]
3595:src/xeq.c     **** 	}
 28428              		.loc 1 3595 3 is_stmt 1 view .LVU7517
3597:src/xeq.c     **** #endif
 28429              		.loc 1 3597 1 is_stmt 0 view .LVU7518
 28430 0090 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 28431              		.cfi_remember_state
 28432              		.cfi_restore 14
 28433              		.cfi_restore 7
 28434              		.cfi_restore 6
 28435              		.cfi_restore 5
 28436              		.cfi_restore 4
 28437              		.cfi_restore 3
 28438              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/cc0UaEmF.s 			page 726


3595:src/xeq.c     **** 	}
 28439              		.loc 1 3595 3 view .LVU7519
 28440 0094 0CBF     		ite	eq
 28441 0096 B620     		moveq	r0, #182
 28442 0098 B520     		movne	r0, #181
 28443 009a FFF7FEBF 		b	op_double
 28444              	.LVL2235:
 28445              	.L2032:
 28446              		.cfi_restore_state
3597:src/xeq.c     **** #endif
 28447              		.loc 1 3597 1 view .LVU7520
 28448 009e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 28449              	.LVL2236:
 28450              	.L2035:
3590:src/xeq.c     **** 	}
 28451              		.loc 1 3590 4 is_stmt 1 view .LVU7521
 28452 00a0 FFF7FEFF 		bl	switch_to_int
 28453              	.LVL2237:
 28454 00a4 3B68     		ldr	r3, [r7]
 28455 00a6 D5E7     		b	.L2034
 28456              	.L2041:
 28457              		.align	2
 28458              	.L2040:
 28459 00a8 00000000 		.word	main_ram
 28460              		.cfi_endproc
 28461              	.LFE208:
 28463              		.section	.text.cmdxin,"ax",%progbits
 28464              		.align	1
 28465              		.p2align 2,,3
 28466              		.global	cmdxin
 28467              		.syntax unified
 28468              		.thumb
 28469              		.thumb_func
 28470              		.fpu fpv4-sp-d16
 28472              	cmdxin:
 28473              	.LVL2238:
 28474              	.LFB261:
5686:src/xeq.c     **** 
 28475              		.loc 1 5686 45 view -0
 28476              		.cfi_startproc
 28477              		@ args = 0, pretend = 0, frame = 40
 28478              		@ frame_needed = 0, uses_anonymous_args = 0
5688:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 28479              		.loc 1 5688 2 view .LVU7523
5698:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 28480              		.loc 1 5698 2 view .LVU7524
5686:src/xeq.c     **** 
 28481              		.loc 1 5686 45 is_stmt 0 view .LVU7525
 28482 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 28483              		.cfi_def_cfa_offset 32
 28484              		.cfi_offset 4, -32
 28485              		.cfi_offset 5, -28
 28486              		.cfi_offset 6, -24
 28487              		.cfi_offset 7, -20
 28488              		.cfi_offset 8, -16
 28489              		.cfi_offset 9, -12
 28490              		.cfi_offset 10, -8
ARM GAS  /tmp/cc0UaEmF.s 			page 727


 28491              		.cfi_offset 14, -4
5698:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 28492              		.loc 1 5698 6 view .LVU7526
 28493 0004 6A4D     		ldr	r5, .L2071
5698:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 28494              		.loc 1 5698 5 view .LVU7527
 28495 0006 95F90130 		ldrsb	r3, [r5, #1]
 28496 000a 002B     		cmp	r3, #0
5686:src/xeq.c     **** 
 28497              		.loc 1 5686 45 view .LVU7528
 28498 000c 8AB0     		sub	sp, sp, #40
 28499              		.cfi_def_cfa_offset 72
5698:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 28500              		.loc 1 5698 5 view .LVU7529
 28501 000e C0F2AD80 		blt	.L2068
5706:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 28502              		.loc 1 5706 2 is_stmt 1 view .LVU7530
 28503 0012 684E     		ldr	r6, .L2071+4
5711:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 28504              		.loc 1 5711 26 is_stmt 0 view .LVU7531
 28505 0014 684F     		ldr	r7, .L2071+8
 28506              	.LBB3713:
 28507              	.LBB3714:
 735:src/xeq.c     **** }
 28508              		.loc 1 735 15 view .LVU7532
 28509 0016 DFF8B481 		ldr	r8, .L2071+28
 28510 001a 0446     		mov	r4, r0
 28511              	.LBE3714:
 28512              	.LBE3713:
5706:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 28513              		.loc 1 5706 2 view .LVU7533
 28514 001c 4FF4E872 		mov	r2, #464
 28515 0020 0021     		movs	r1, #0
 28516              	.LVL2239:
5706:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 28517              		.loc 1 5706 2 view .LVU7534
 28518 0022 3046     		mov	r0, r6
 28519              	.LVL2240:
5706:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 28520              		.loc 1 5706 2 view .LVU7535
 28521 0024 FFF7FEFF 		bl	xset
 28522              	.LVL2241:
5707:src/xeq.c     **** 
 28523              		.loc 1 5707 2 is_stmt 1 view .LVU7536
 28524 0028 1022     		movs	r2, #16
 28525 002a 0021     		movs	r1, #0
 28526 002c 2846     		mov	r0, r5
 28527 002e FFF7FEFF 		bl	xset
 28528              	.LVL2242:
5710:src/xeq.c     **** 	XromFlags.stack_depth = UState.stack_depth;
 28529              		.loc 1 5710 2 view .LVU7537
 28530              	.LBB3718:
 28531              	.LBI3713:
 734:src/xeq.c     **** 	return State2.state_lift;
 28532              		.loc 1 734 12 view .LVU7538
 28533              	.LBB3715:
 735:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 728


 28534              		.loc 1 735 2 view .LVU7539
 28535              	.LBE3715:
 28536              	.LBE3718:
5711:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 28537              		.loc 1 5711 26 is_stmt 0 view .LVU7540
 28538 0032 3A68     		ldr	r2, [r7]
 28539              	.LBB3719:
 28540              	.LBB3716:
 735:src/xeq.c     **** }
 28541              		.loc 1 735 15 view .LVU7541
 28542 0034 98F817E0 		ldrb	lr, [r8, #23]	@ zero_extendqisi2
 28543              	.LBE3716:
 28544              	.LBE3719:
5713:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 28545              		.loc 1 5713 29 view .LVU7542
 28546 0038 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
5711:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 28547              		.loc 1 5711 32 view .LVU7543
 28548 003c 92F8EAC7 		ldrb	ip, [r2, #2026]	@ zero_extendqisi2
5712:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
 28549              		.loc 1 5712 32 view .LVU7544
 28550 0040 92F8E907 		ldrb	r0, [r2, #2025]	@ zero_extendqisi2
5714:src/xeq.c     **** 	XromFlags.state_lift = 1;
 28551              		.loc 1 5714 41 view .LVU7545
 28552 0044 92F8EB17 		ldrb	r1, [r2, #2027]	@ zero_extendqisi2
5729:src/xeq.c     **** 
 28553              		.loc 1 5729 20 view .LVU7546
 28554 0048 B2F8E2A7 		ldrh	r10, [r2, #2018]
 28555 004c A5F80CA0 		strh	r10, [r5, #12]	@ movhi
5713:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 28556              		.loc 1 5713 29 view .LVU7547
 28557 0050 03F00103 		and	r3, r3, #1
 28558              	.LBB3720:
 28559              	.LBB3717:
 735:src/xeq.c     **** }
 28560              		.loc 1 735 15 view .LVU7548
 28561 0054 CEF3801E 		ubfx	lr, lr, #6, #1
 28562              	.LBE3717:
 28563              	.LBE3720:
5711:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 28564              		.loc 1 5711 2 is_stmt 1 view .LVU7549
5713:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 28565              		.loc 1 5713 21 is_stmt 0 view .LVU7550
 28566 0058 63F03F03 		orn	r3, r3, #63
 28567 005c 43EA4E03 		orr	r3, r3, lr, lsl #1
5711:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 28568              		.loc 1 5711 32 view .LVU7551
 28569 0060 CCF3C00C 		ubfx	ip, ip, #3, #1
5712:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
 28570              		.loc 1 5712 2 is_stmt 1 view .LVU7552
5713:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 28571              		.loc 1 5713 21 is_stmt 0 view .LVU7553
 28572 0064 43EA8C03 		orr	r3, r3, ip, lsl #2
5712:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
 28573              		.loc 1 5712 32 view .LVU7554
 28574 0068 C0F38010 		ubfx	r0, r0, #6, #1
5713:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
ARM GAS  /tmp/cc0UaEmF.s 			page 729


 28575              		.loc 1 5713 2 is_stmt 1 view .LVU7555
5714:src/xeq.c     **** 	XromFlags.state_lift = 1;
 28576              		.loc 1 5714 9 view .LVU7556
5747:src/xeq.c     **** 	XromIn = (arg & 0x7);
 28577              		.loc 1 5747 35 is_stmt 0 view .LVU7557
 28578 006c C4F3C01C 		ubfx	ip, r4, #7, #1
5714:src/xeq.c     **** 	XromFlags.state_lift = 1;
 28579              		.loc 1 5714 33 view .LVU7558
 28580 0070 95F802E0 		ldrb	lr, [r5, #2]	@ zero_extendqisi2
5713:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 28581              		.loc 1 5713 21 view .LVU7559
 28582 0074 43EAC003 		orr	r3, r3, r0, lsl #3
5746:src/xeq.c     **** 	XromFlags.complex = (arg & 0x80) != 0;
 28583              		.loc 1 5746 36 view .LVU7560
 28584 0078 C4F38019 		ubfx	r9, r4, #6, #1
5728:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 28585              		.loc 1 5728 17 view .LVU7561
 28586 007c 4F48     		ldr	r0, .L2071+12
5713:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 28587              		.loc 1 5713 21 view .LVU7562
 28588 007e 43EA0C13 		orr	r3, r3, ip, lsl #4
5714:src/xeq.c     **** 	XromFlags.state_lift = 1;
 28589              		.loc 1 5714 41 view .LVU7563
 28590 0082 C1F30211 		ubfx	r1, r1, #4, #3
5715:src/xeq.c     **** 	XromFlags.xIN = 1;
 28591              		.loc 1 5715 2 is_stmt 1 view .LVU7564
5716:src/xeq.c     **** 
 28592              		.loc 1 5716 2 view .LVU7565
5728:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 28593              		.loc 1 5728 2 view .LVU7566
5713:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 28594              		.loc 1 5713 21 is_stmt 0 view .LVU7567
 28595 0086 43EA4913 		orr	r3, r3, r9, lsl #5
5714:src/xeq.c     **** 	XromFlags.state_lift = 1;
 28596              		.loc 1 5714 33 view .LVU7568
 28597 008a 61F3020E 		bfi	lr, r1, #0, #3
5736:src/xeq.c     **** #endif
 28598              		.loc 1 5736 17 view .LVU7569
 28599 008e 41F2020C 		movw	ip, #4098
5735:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 28600              		.loc 1 5735 24 view .LVU7570
 28601 0092 4FF6FE71 		movw	r1, #65534
5728:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 28602              		.loc 1 5728 17 view .LVU7571
 28603 0096 D0F80090 		ldr	r9, [r0]
5736:src/xeq.c     **** #endif
 28604              		.loc 1 5736 17 view .LVU7572
 28605 009a A6F8CCC1 		strh	ip, [r6, #460]	@ movhi
5713:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 28606              		.loc 1 5713 21 view .LVU7573
 28607 009e 6B70     		strb	r3, [r5, #1]
5751:src/xeq.c     **** 		// Complex arguments are always in pairs
 28608              		.loc 1 5751 6 view .LVU7574
 28609 00a0 5FFA83FC 		uxtb	ip, r3
5714:src/xeq.c     **** 	XromFlags.state_lift = 1;
 28610              		.loc 1 5714 33 view .LVU7575
 28611 00a4 85F802E0 		strb	lr, [r5, #2]
ARM GAS  /tmp/cc0UaEmF.s 			page 730


5735:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 28612              		.loc 1 5735 24 view .LVU7576
 28613 00a8 A2F8E217 		strh	r1, [r2, #2018]	@ movhi
5731:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 28614              		.loc 1 5731 9 view .LVU7577
 28615 00ac 06F5E87E 		add	lr, r6, #464
5735:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 28616              		.loc 1 5735 12 view .LVU7578
 28617 00b0 A2F8DE17 		strh	r1, [r2, #2014]	@ movhi
5751:src/xeq.c     **** 		// Complex arguments are always in pairs
 28618              		.loc 1 5751 5 view .LVU7579
 28619 00b4 DB06     		lsls	r3, r3, #27
5748:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
 28620              		.loc 1 5748 16 view .LVU7580
 28621 00b6 04F00701 		and	r1, r4, #7
5749:src/xeq.c     **** #endif
 28622              		.loc 1 5749 24 view .LVU7581
 28623 00ba C4F3C204 		ubfx	r4, r4, #3, #3
 28624              	.LVL2243:
5731:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 28625              		.loc 1 5731 9 view .LVU7582
 28626 00be C0F800E0 		str	lr, [r0]
5728:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 28627              		.loc 1 5728 17 view .LVU7583
 28628 00c2 C5F80890 		str	r9, [r5, #8]
5729:src/xeq.c     **** 
 28629              		.loc 1 5729 2 is_stmt 1 view .LVU7584
5731:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 28630              		.loc 1 5731 2 view .LVU7585
5735:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 28631              		.loc 1 5735 2 view .LVU7586
5736:src/xeq.c     **** #endif
 28632              		.loc 1 5736 2 view .LVU7587
5746:src/xeq.c     **** 	XromFlags.complex = (arg & 0x80) != 0;
 28633              		.loc 1 5746 2 view .LVU7588
5747:src/xeq.c     **** 	XromIn = (arg & 0x7);
 28634              		.loc 1 5747 2 view .LVU7589
5748:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
 28635              		.loc 1 5748 2 view .LVU7590
5748:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
 28636              		.loc 1 5748 9 is_stmt 0 view .LVU7591
 28637 00c6 2971     		strb	r1, [r5, #4]
5749:src/xeq.c     **** #endif
 28638              		.loc 1 5749 2 is_stmt 1 view .LVU7592
5749:src/xeq.c     **** #endif
 28639              		.loc 1 5749 10 is_stmt 0 view .LVU7593
 28640 00c8 6C71     		strb	r4, [r5, #5]
5751:src/xeq.c     **** 		// Complex arguments are always in pairs
 28641              		.loc 1 5751 2 is_stmt 1 view .LVU7594
5751:src/xeq.c     **** 		// Complex arguments are always in pairs
 28642              		.loc 1 5751 5 is_stmt 0 view .LVU7595
 28643 00ca 03D5     		bpl	.L2046
5753:src/xeq.c     **** 		XromOut <<= 1;
 28644              		.loc 1 5753 3 is_stmt 1 view .LVU7596
5753:src/xeq.c     **** 		XromOut <<= 1;
 28645              		.loc 1 5753 10 is_stmt 0 view .LVU7597
 28646 00cc 4900     		lsls	r1, r1, #1
ARM GAS  /tmp/cc0UaEmF.s 			page 731


5754:src/xeq.c     **** 	}
 28647              		.loc 1 5754 11 view .LVU7598
 28648 00ce 6400     		lsls	r4, r4, #1
5753:src/xeq.c     **** 		XromOut <<= 1;
 28649              		.loc 1 5753 10 view .LVU7599
 28650 00d0 2971     		strb	r1, [r5, #4]
5754:src/xeq.c     **** 	}
 28651              		.loc 1 5754 3 is_stmt 1 view .LVU7600
5754:src/xeq.c     **** 	}
 28652              		.loc 1 5754 11 is_stmt 0 view .LVU7601
 28653 00d2 6C71     		strb	r4, [r5, #5]
 28654              	.L2046:
5757:src/xeq.c     **** 
 28655              		.loc 1 5757 9 is_stmt 1 view .LVU7602
5757:src/xeq.c     **** 
 28656              		.loc 1 5757 30 is_stmt 0 view .LVU7603
 28657 00d4 92F8EB37 		ldrb	r3, [r2, #2027]	@ zero_extendqisi2
5768:src/xeq.c     **** 		// Convert integers to decimal128
 28658              		.loc 1 5768 5 view .LVU7604
 28659 00d8 1CF0010F 		tst	ip, #1
5757:src/xeq.c     **** 
 28660              		.loc 1 5757 30 view .LVU7605
 28661 00dc 6FF30613 		bfc	r3, #4, #3
 28662 00e0 82F8EB37 		strb	r3, [r2, #2027]
5768:src/xeq.c     **** 		// Convert integers to decimal128
 28663              		.loc 1 5768 2 is_stmt 1 view .LVU7606
5768:src/xeq.c     **** 		// Convert integers to decimal128
 28664              		.loc 1 5768 5 is_stmt 0 view .LVU7607
 28665 00e4 52D1     		bne	.L2069
5776:src/xeq.c     **** 		// No conversion necessary
 28666              		.loc 1 5776 7 is_stmt 1 view .LVU7608
5776:src/xeq.c     **** 		// No conversion necessary
 28667              		.loc 1 5776 10 is_stmt 0 view .LVU7609
 28668 00e6 1CF0080F 		tst	ip, #8
 28669 00ea 47D1     		bne	.L2070
5797:src/xeq.c     **** #endif
 28670              		.loc 1 5797 3 is_stmt 1 view .LVU7610
 28671 00ec B520     		movs	r0, #181
 28672 00ee FFF7FEFF 		bl	op_double
 28673              	.LVL2244:
 28674              	.L2048:
5802:src/xeq.c     **** 	UState.stack_depth = 1;
 28675              		.loc 1 5802 2 view .LVU7611
 28676              	.LBB3721:
 28677              	.LBI3721:
 748:src/xeq.c     ****     State2.state_lift = 1;
 28678              		.loc 1 748 6 view .LVU7612
 28679              	.LBB3722:
 749:src/xeq.c     **** }
 28680              		.loc 1 749 5 view .LVU7613
 749:src/xeq.c     **** }
 28681              		.loc 1 749 23 is_stmt 0 view .LVU7614
 28682 00f2 98F81730 		ldrb	r3, [r8, #23]	@ zero_extendqisi2
 28683              	.LBE3722:
 28684              	.LBE3721:
5803:src/xeq.c     **** 
 28685              		.loc 1 5803 21 view .LVU7615
ARM GAS  /tmp/cc0UaEmF.s 			page 732


 28686 00f6 3A68     		ldr	r2, [r7]
 28687              	.LBB3724:
 28688              	.LBB3723:
 749:src/xeq.c     **** }
 28689              		.loc 1 749 23 view .LVU7616
 28690 00f8 43F04003 		orr	r3, r3, #64
 28691 00fc 88F81730 		strb	r3, [r8, #23]
 28692              	.LBE3723:
 28693              	.LBE3724:
5803:src/xeq.c     **** 
 28694              		.loc 1 5803 2 is_stmt 1 view .LVU7617
5803:src/xeq.c     **** 
 28695              		.loc 1 5803 21 is_stmt 0 view .LVU7618
 28696 0100 92F8EA37 		ldrb	r3, [r2, #2026]	@ zero_extendqisi2
 28697 0104 43F00803 		orr	r3, r3, #8
 28698 0108 82F8EA37 		strb	r3, [r2, #2026]
5806:src/xeq.c     **** 		decNumber x;
 28699              		.loc 1 5806 2 is_stmt 1 view .LVU7619
 28700              	.LVL2245:
5806:src/xeq.c     **** 		decNumber x;
 28701              		.loc 1 5806 14 view .LVU7620
5806:src/xeq.c     **** 		decNumber x;
 28702              		.loc 1 5806 2 is_stmt 0 view .LVU7621
 28703 010c 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 28704 010e 93B3     		cbz	r3, .L2042
5806:src/xeq.c     **** 		decNumber x;
 28705              		.loc 1 5806 9 view .LVU7622
 28706 0110 0024     		movs	r4, #0
 28707 0112 02E0     		b	.L2055
 28708              	.LVL2246:
 28709              	.L2050:
5806:src/xeq.c     **** 		decNumber x;
 28710              		.loc 1 5806 18 view .LVU7623
 28711 0114 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
5806:src/xeq.c     **** 		decNumber x;
 28712              		.loc 1 5806 2 view .LVU7624
 28713 0116 A342     		cmp	r3, r4
 28714 0118 2DDD     		ble	.L2042
 28715              	.LVL2247:
 28716              	.L2055:
 28717              	.LBB3725:
5807:src/xeq.c     **** 		if (decNumberIsNaN(getRegister(&x, regX_idx + i))) {
 28718              		.loc 1 5807 3 is_stmt 1 view .LVU7625
5808:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 28719              		.loc 1 5808 3 view .LVU7626
5808:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 28720              		.loc 1 5808 7 is_stmt 0 view .LVU7627
 28721 011a 04F16401 		add	r1, r4, #100
 28722 011e 01A8     		add	r0, sp, #4
 28723 0120 FFF7FEFF 		bl	getRegister
 28724              	.LVL2248:
 28725              	.LBE3725:
5806:src/xeq.c     **** 		decNumber x;
 28726              		.loc 1 5806 26 is_stmt 1 view .LVU7628
 28727              	.LBB3732:
5808:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 28728              		.loc 1 5808 6 is_stmt 0 view .LVU7629
ARM GAS  /tmp/cc0UaEmF.s 			page 733


 28729 0124 037A     		ldrb	r3, [r0, #8]	@ zero_extendqisi2
 28730 0126 13F0300F 		tst	r3, #48
 28731              	.LBE3732:
5806:src/xeq.c     **** 		decNumber x;
 28732              		.loc 1 5806 26 view .LVU7630
 28733 012a 04F10104 		add	r4, r4, #1
 28734              	.LVL2249:
5806:src/xeq.c     **** 		decNumber x;
 28735              		.loc 1 5806 14 is_stmt 1 view .LVU7631
 28736              	.LBB3733:
5808:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 28737              		.loc 1 5808 6 is_stmt 0 view .LVU7632
 28738 012e F1D0     		beq	.L2050
5811:src/xeq.c     **** 				for (i = 0; i < XromOut; ++i)
 28739              		.loc 1 5811 4 is_stmt 1 view .LVU7633
 28740              	.LVL2250:
 28741              	.LBB3726:
 28742              	.LBI3726:
3343:src/xeq.c     **** 	unsigned short mask;
 28743              		.loc 1 3343 5 view .LVU7634
 28744              	.LBB3727:
3344:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
 28745              		.loc 1 3344 2 view .LVU7635
3345:src/xeq.c     **** 
 28746              		.loc 1 3345 2 view .LVU7636
3345:src/xeq.c     **** 
 28747              		.loc 1 3345 34 is_stmt 0 view .LVU7637
 28748 0130 0DF10201 		add	r1, sp, #2
 28749 0134 6B20     		movs	r0, #107
 28750 0136 FFF7FEFF 		bl	flag_word
 28751              	.LVL2251:
3347:src/xeq.c     **** }
 28752              		.loc 1 3347 2 is_stmt 1 view .LVU7638
3347:src/xeq.c     **** }
 28753              		.loc 1 3347 24 is_stmt 0 view .LVU7639
 28754 013a BDF80230 		ldrh	r3, [sp, #2]
 28755 013e 0288     		ldrh	r2, [r0]
 28756              	.LBE3727:
 28757              	.LBE3726:
5811:src/xeq.c     **** 				for (i = 0; i < XromOut; ++i)
 28758              		.loc 1 5811 7 view .LVU7640
 28759 0140 1A42     		tst	r2, r3
 28760 0142 2DD0     		beq	.L2051
 28761              	.LVL2252:
5812:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 28762              		.loc 1 5812 17 is_stmt 1 view .LVU7641
5812:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 28763              		.loc 1 5812 5 is_stmt 0 view .LVU7642
 28764 0144 6B79     		ldrb	r3, [r5, #5]	@ zero_extendqisi2
 28765 0146 53B1     		cbz	r3, .L2052
5813:src/xeq.c     **** 				// Early exit of routine
 28766              		.loc 1 5813 6 view .LVU7643
 28767 0148 1D4E     		ldr	r6, .L2071+16
5812:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 28768              		.loc 1 5812 12 view .LVU7644
 28769 014a 0024     		movs	r4, #0
 28770              	.LVL2253:
ARM GAS  /tmp/cc0UaEmF.s 			page 734


 28771              	.L2053:
5813:src/xeq.c     **** 				// Early exit of routine
 28772              		.loc 1 5813 6 is_stmt 1 discriminator 3 view .LVU7645
 28773 014c 04F16400 		add	r0, r4, #100
 28774 0150 3146     		mov	r1, r6
 28775 0152 FFF7FEFF 		bl	setRegister
 28776              	.LVL2254:
5812:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 28777              		.loc 1 5812 30 discriminator 3 view .LVU7646
5812:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 28778              		.loc 1 5812 21 is_stmt 0 discriminator 3 view .LVU7647
 28779 0156 6B79     		ldrb	r3, [r5, #5]	@ zero_extendqisi2
5812:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 28780              		.loc 1 5812 30 discriminator 3 view .LVU7648
 28781 0158 0134     		adds	r4, r4, #1
 28782              	.LVL2255:
5812:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 28783              		.loc 1 5812 17 is_stmt 1 discriminator 3 view .LVU7649
5812:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 28784              		.loc 1 5812 5 is_stmt 0 discriminator 3 view .LVU7650
 28785 015a A342     		cmp	r3, r4
 28786 015c F6DC     		bgt	.L2053
 28787              	.LVL2256:
 28788              	.L2052:
5815:src/xeq.c     **** 			} 
 28789              		.loc 1 5815 5 is_stmt 1 view .LVU7651
 28790 015e 8421     		movs	r1, #132
 28791 0160 0020     		movs	r0, #0
 28792 0162 FFF7FEFF 		bl	cmdxout
 28793              	.LVL2257:
 28794              	.LBE3733:
5822:src/xeq.c     **** 
 28795              		.loc 1 5822 1 is_stmt 0 view .LVU7652
 28796 0166 0AB0     		add	sp, sp, #40
 28797              		.cfi_remember_state
 28798              		.cfi_def_cfa_offset 32
 28799              		@ sp needed
 28800 0168 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 28801              	.LVL2258:
 28802              	.L2068:
 28803              		.cfi_restore_state
5699:src/xeq.c     **** 		return;
 28804              		.loc 1 5699 3 is_stmt 1 view .LVU7653
 28805              	.LBB3734:
 28806              	.LBI3734:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28807              		.loc 1 537 5 view .LVU7654
 28808              	.LBB3735:
 538:src/xeq.c     **** 		Error = e;
 28809              		.loc 1 538 2 view .LVU7655
 538:src/xeq.c     **** 		Error = e;
 28810              		.loc 1 538 12 is_stmt 0 view .LVU7656
 28811 016c 154B     		ldr	r3, .L2071+20
 538:src/xeq.c     **** 		Error = e;
 28812              		.loc 1 538 5 view .LVU7657
 28813 016e 1A68     		ldr	r2, [r3]
 28814 0170 0AB9     		cbnz	r2, .L2042
ARM GAS  /tmp/cc0UaEmF.s 			page 735


 28815              	.LVL2259:
 28816              	.LBB3736:
 28817              	.LBI3736:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28818              		.loc 1 537 5 is_stmt 1 view .LVU7658
 28819              	.LBB3737:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 28820              		.loc 1 539 3 view .LVU7659
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 28821              		.loc 1 539 9 is_stmt 0 view .LVU7660
 28822 0172 0722     		movs	r2, #7
 28823 0174 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 28824              		.loc 1 540 3 is_stmt 1 view .LVU7661
 28825              	.LVL2260:
 28826              	.L2042:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 28827              		.loc 1 540 3 is_stmt 0 view .LVU7662
 28828              	.LBE3737:
 28829              	.LBE3736:
 28830              	.LBE3735:
 28831              	.LBE3734:
5822:src/xeq.c     **** 
 28832              		.loc 1 5822 1 view .LVU7663
 28833 0176 0AB0     		add	sp, sp, #40
 28834              		.cfi_remember_state
 28835              		.cfi_def_cfa_offset 32
 28836              		@ sp needed
 28837 0178 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 28838              	.L2070:
 28839              		.cfi_restore_state
5778:src/xeq.c     **** 		StackBase = XromStack;
 28840              		.loc 1 5778 3 is_stmt 1 view .LVU7664
 28841 017c 124C     		ldr	r4, .L2071+24
 28842 017e 0D48     		ldr	r0, .L2071+4
 28843 0180 2168     		ldr	r1, [r4]
 28844 0182 C022     		movs	r2, #192
 28845 0184 FFF7FEFF 		bl	xcopy
 28846              	.LVL2261:
5779:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 28847              		.loc 1 5779 3 view .LVU7665
5779:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 28848              		.loc 1 5779 13 is_stmt 0 view .LVU7666
 28849 0188 2660     		str	r6, [r4]
 28850 018a B2E7     		b	.L2048
 28851              	.L2069:
5771:src/xeq.c     **** #endif
 28852              		.loc 1 5771 3 is_stmt 1 view .LVU7667
5771:src/xeq.c     **** #endif
 28853              		.loc 1 5771 22 is_stmt 0 view .LVU7668
 28854 018c 92F8E937 		ldrb	r3, [r2, #2025]	@ zero_extendqisi2
 28855 0190 43F04003 		orr	r3, r3, #64
 28856 0194 82F8E937 		strb	r3, [r2, #2025]
5773:src/xeq.c     **** 		// Do not copy the local registers because we don't use this case anyway
 28857              		.loc 1 5773 3 is_stmt 1 view .LVU7669
 28858 0198 C120     		movs	r0, #193
 28859 019a FFF7FEFF 		bl	op_float
ARM GAS  /tmp/cc0UaEmF.s 			page 736


 28860              	.LVL2262:
 28861 019e A8E7     		b	.L2048
 28862              	.LVL2263:
 28863              	.L2051:
 28864              	.LBB3738:
5818:src/xeq.c     **** 			return;
 28865              		.loc 1 5818 5 view .LVU7670
 28866              	.LBB3728:
 28867              	.LBI3728:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28868              		.loc 1 537 5 view .LVU7671
 28869              	.LBB3729:
 538:src/xeq.c     **** 		Error = e;
 28870              		.loc 1 538 2 view .LVU7672
 538:src/xeq.c     **** 		Error = e;
 28871              		.loc 1 538 12 is_stmt 0 view .LVU7673
 28872 01a0 084B     		ldr	r3, .L2071+20
 538:src/xeq.c     **** 		Error = e;
 28873              		.loc 1 538 5 view .LVU7674
 28874 01a2 1A68     		ldr	r2, [r3]
 28875 01a4 002A     		cmp	r2, #0
 28876 01a6 E6D1     		bne	.L2042
 28877              	.LVL2264:
 28878              	.LBB3730:
 28879              	.LBI3730:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28880              		.loc 1 537 5 is_stmt 1 view .LVU7675
 28881              	.LBB3731:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 28882              		.loc 1 539 3 view .LVU7676
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 28883              		.loc 1 539 9 is_stmt 0 view .LVU7677
 28884 01a8 0122     		movs	r2, #1
 28885 01aa 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 28886              		.loc 1 540 3 is_stmt 1 view .LVU7678
 28887              	.LVL2265:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 28888              		.loc 1 540 3 is_stmt 0 view .LVU7679
 28889              	.LBE3731:
 28890              	.LBE3730:
 28891              	.LBE3729:
 28892              	.LBE3728:
5819:src/xeq.c     **** 		}
 28893              		.loc 1 5819 4 is_stmt 1 view .LVU7680
 28894 01ac E3E7     		b	.L2042
 28895              	.L2072:
 28896 01ae 00BF     		.align	2
 28897              	.L2071:
 28898 01b0 00000000 		.word	XromParams
 28899 01b4 00000000 		.word	XromLocal
 28900 01b8 00000000 		.word	main_ram
 28901 01bc 00000000 		.word	RetStk
 28902 01c0 00000000 		.word	const_NaN
 28903 01c4 00000000 		.word	Error
 28904 01c8 00000000 		.word	StackBase
 28905 01cc 00000000 		.word	StateWhileOn
ARM GAS  /tmp/cc0UaEmF.s 			page 737


 28906              	.LBE3738:
 28907              		.cfi_endproc
 28908              	.LFE261:
 28910              		.section	.rodata.xeq.str1.4,"aMS",%progbits,1
 28911              		.align	2
 28912              	.LC8:
 28913 0000 25303458 		.ascii	"%04X:%s\000"
 28913      3A257300 
 28914              		.section	.text.xeq,"ax",%progbits
 28915              		.align	1
 28916              		.p2align 2,,3
 28917              		.global	xeq
 28918              		.syntax unified
 28919              		.thumb
 28920              		.thumb_func
 28921              		.fpu fpv4-sp-d16
 28923              	xeq:
 28924              	.LVL2266:
 28925              	.LFB246:
5083:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 28926              		.loc 1 5083 1 view -0
 28927              		.cfi_startproc
 28928              		@ args = 0, pretend = 0, frame = 416
 28929              		@ frame_needed = 0, uses_anonymous_args = 0
5084:src/xeq.c     **** 	const unsigned short flags = UserFlags[regA_idx >> 4];
 28930              		.loc 1 5084 2 view .LVU7682
5085:src/xeq.c     **** 	const struct _ustate old = UState;
 28931              		.loc 1 5085 2 view .LVU7683
5083:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 28932              		.loc 1 5083 1 is_stmt 0 view .LVU7684
 28933 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 28934              		.cfi_def_cfa_offset 36
 28935              		.cfi_offset 4, -36
 28936              		.cfi_offset 5, -32
 28937              		.cfi_offset 6, -28
 28938              		.cfi_offset 7, -24
 28939              		.cfi_offset 8, -20
 28940              		.cfi_offset 9, -16
 28941              		.cfi_offset 10, -12
 28942              		.cfi_offset 11, -8
 28943              		.cfi_offset 14, -4
5085:src/xeq.c     **** 	const struct _ustate old = UState;
 28944              		.loc 1 5085 31 view .LVU7685
 28945 0004 BC4F     		ldr	r7, .L2402
 28946              	.LBB4048:
 28947              	.LBB4049:
 735:src/xeq.c     **** }
 28948              		.loc 1 735 15 view .LVU7686
 28949 0006 BD4C     		ldr	r4, .L2402+4
 28950              	.LBE4049:
 28951              	.LBE4048:
5085:src/xeq.c     **** 	const struct _ustate old = UState;
 28952              		.loc 1 5085 31 view .LVU7687
 28953 0008 3B68     		ldr	r3, [r7]
 28954              	.LBB4053:
 28955              	.LBB4050:
 735:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 738


 28956              		.loc 1 735 15 view .LVU7688
 28957 000a 94F817C0 		ldrb	ip, [r4, #23]	@ zero_extendqisi2
 28958              	.LBE4050:
 28959              	.LBE4053:
5086:src/xeq.c     **** 	const unsigned char lift = get_lift();
 28960              		.loc 1 5086 23 view .LVU7689
 28961 000e D3F8E817 		ldr	r1, [r3, #2024]
5104:src/xeq.c     **** #if defined(CONSOLE)
 28962              		.loc 1 5104 2 view .LVU7690
 28963 0012 DFF82483 		ldr	r8, .L2402+64
5085:src/xeq.c     **** 	const struct _ustate old = UState;
 28964              		.loc 1 5085 23 view .LVU7691
 28965 0016 B3F8FC27 		ldrh	r2, [r3, #2044]
5088:src/xeq.c     **** 	const int old_cl = *((int *)&CommandLine);
 28966              		.loc 1 5088 23 view .LVU7692
 28967 001a B3F8E0B7 		ldrh	fp, [r3, #2016]
5089:src/xeq.c     **** #ifdef INFRARED
 28968              		.loc 1 5089 12 view .LVU7693
 28969 001e D4F81C90 		ldr	r9, [r4, #28]
5083:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 28970              		.loc 1 5083 1 view .LVU7694
 28971 0022 EBB0     		sub	sp, sp, #428
 28972              		.cfi_def_cfa_offset 464
5083:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 28973              		.loc 1 5083 1 view .LVU7695
 28974 0024 0546     		mov	r5, r0
5086:src/xeq.c     **** 	const unsigned char lift = get_lift();
 28975              		.loc 1 5086 23 view .LVU7696
 28976 0026 D3F8E407 		ldr	r0, [r3, #2020]
 28977              	.LVL2267:
5085:src/xeq.c     **** 	const struct _ustate old = UState;
 28978              		.loc 1 5085 23 view .LVU7697
 28979 002a 0392     		str	r2, [sp, #12]
 28980              	.LVL2268:
5086:src/xeq.c     **** 	const unsigned char lift = get_lift();
 28981              		.loc 1 5086 2 is_stmt 1 view .LVU7698
5086:src/xeq.c     **** 	const unsigned char lift = get_lift();
 28982              		.loc 1 5086 23 is_stmt 0 view .LVU7699
 28983 002c 0AAE     		add	r6, sp, #40
 28984 002e 86E80300 		stm	r6, {r0, r1}
5087:src/xeq.c     **** 	const unsigned short old_pc = state_pc();
 28985              		.loc 1 5087 2 is_stmt 1 view .LVU7700
 28986              	.LBB4054:
 28987              	.LBI4048:
 734:src/xeq.c     **** 	return State2.state_lift;
 28988              		.loc 1 734 12 view .LVU7701
 28989              	.LBB4051:
 735:src/xeq.c     **** }
 28990              		.loc 1 735 2 view .LVU7702
 735:src/xeq.c     **** }
 28991              		.loc 1 735 15 is_stmt 0 view .LVU7703
 28992 0032 CCF38013 		ubfx	r3, ip, #6, #1
 28993              	.LBE4051:
 28994              	.LBE4054:
5104:src/xeq.c     **** #if defined(CONSOLE)
 28995              		.loc 1 5104 2 view .LVU7704
 28996 0036 D8F80010 		ldr	r1, [r8]
ARM GAS  /tmp/cc0UaEmF.s 			page 739


 28997              	.LBB4055:
 28998              	.LBB4052:
 735:src/xeq.c     **** }
 28999              		.loc 1 735 15 view .LVU7705
 29000 003a 0493     		str	r3, [sp, #16]
 29001              	.LVL2269:
 735:src/xeq.c     **** }
 29002              		.loc 1 735 15 view .LVU7706
 29003              	.LBE4052:
 29004              	.LBE4055:
5088:src/xeq.c     **** 	const int old_cl = *((int *)&CommandLine);
 29005              		.loc 1 5088 2 is_stmt 1 view .LVU7707
5089:src/xeq.c     **** #ifdef INFRARED
 29006              		.loc 1 5089 2 view .LVU7708
5104:src/xeq.c     **** #if defined(CONSOLE)
 29007              		.loc 1 5104 2 view .LVU7709
 29008 003c A022     		movs	r2, #160
 29009 003e 42A8     		add	r0, sp, #264
 29010 0040 FFF7FEFF 		bl	xcopy
 29011              	.LVL2270:
5109:src/xeq.c     **** 		char buf[16];
 29012              		.loc 1 5109 2 view .LVU7710
5109:src/xeq.c     **** 		char buf[16];
 29013              		.loc 1 5109 5 is_stmt 0 view .LVU7711
 29014 0044 94F91730 		ldrsb	r3, [r4, #23]
 29015 0048 002B     		cmp	r3, #0
 29016 004a 1CDB     		blt	.L2371
 29017              	.L2074:
5127:src/xeq.c     **** 	State2.wascomplex = 0;
 29018              		.loc 1 5127 2 is_stmt 1 view .LVU7712
5128:src/xeq.c     **** 	if (isDBL(op))
 29019              		.loc 1 5128 20 is_stmt 0 view .LVU7713
 29020 004c 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
5127:src/xeq.c     **** 	State2.wascomplex = 0;
 29021              		.loc 1 5127 7 view .LVU7714
 29022 004e AC49     		ldr	r1, .L2402+8
 29023 0050 0023     		movs	r3, #0
5128:src/xeq.c     **** 	if (isDBL(op))
 29024              		.loc 1 5128 20 view .LVU7715
 29025 0052 63F38712 		bfi	r2, r3, #6, #2
 29026 0056 2275     		strb	r2, [r4, #20]
5129:src/xeq.c     **** 		multi(op);
 29027              		.loc 1 5129 6 view .LVU7716
 29028 0058 05F47042 		and	r2, r5, #61440
5129:src/xeq.c     **** 		multi(op);
 29029              		.loc 1 5129 5 view .LVU7717
 29030 005c B2F5704F 		cmp	r2, #61440
5127:src/xeq.c     **** 	State2.wascomplex = 0;
 29031              		.loc 1 5127 7 view .LVU7718
 29032 0060 0B60     		str	r3, [r1]
5128:src/xeq.c     **** 	if (isDBL(op))
 29033              		.loc 1 5128 2 is_stmt 1 view .LVU7719
5129:src/xeq.c     **** 		multi(op);
 29034              		.loc 1 5129 2 view .LVU7720
5129:src/xeq.c     **** 		multi(op);
 29035              		.loc 1 5129 5 is_stmt 0 view .LVU7721
 29036 0062 5FD0     		beq	.L2372
ARM GAS  /tmp/cc0UaEmF.s 			page 740


5131:src/xeq.c     **** 		rargs(op);
 29037              		.loc 1 5131 7 is_stmt 1 view .LVU7722
5131:src/xeq.c     **** 		rargs(op);
 29038              		.loc 1 5131 10 is_stmt 0 view .LVU7723
 29039 0064 32BB     		cbnz	r2, .L2373
5134:src/xeq.c     **** 		switch (opKIND(op)) {
 29040              		.loc 1 5134 3 is_stmt 1 view .LVU7724
5134:src/xeq.c     **** 		switch (opKIND(op)) {
 29041              		.loc 1 5134 13 is_stmt 0 view .LVU7725
 29042 0066 A74A     		ldr	r2, .L2402+12
 29043 0068 C5F30723 		ubfx	r3, r5, #8, #8
5134:src/xeq.c     **** 		switch (opKIND(op)) {
 29044              		.loc 1 5134 15 view .LVU7726
 29045 006c 1580     		strh	r5, [r2]	@ movhi
5135:src/xeq.c     **** 		case KIND_SPEC:	specials(op);	break;
 29046              		.loc 1 5135 3 is_stmt 1 view .LVU7727
 29047 006e 062B     		cmp	r3, #6
 29048 0070 00F2A280 		bhi	.L2111
 29049 0074 DFE813F0 		tbh	[pc, r3, lsl #1]
 29050              	.L2113:
 29051 0078 CF01     		.2byte	(.L2119-.L2113)/2
 29052 007a 6A01     		.2byte	(.L2118-.L2113)/2
 29053 007c A101     		.2byte	(.L2117-.L2113)/2
 29054 007e 9400     		.2byte	(.L2116-.L2113)/2
 29055 0080 0202     		.2byte	(.L2115-.L2113)/2
 29056 0082 4202     		.2byte	(.L2114-.L2113)/2
 29057 0084 7B02     		.2byte	(.L2112-.L2113)/2
 29058              		.p2align 1
 29059              	.L2371:
5109:src/xeq.c     **** 		char buf[16];
 29060              		.loc 1 5109 22 is_stmt 0 discriminator 1 view .LVU7728
 29061 0086 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
5109:src/xeq.c     **** 		char buf[16];
 29062              		.loc 1 5109 19 discriminator 1 view .LVU7729
 29063 0088 9B07     		lsls	r3, r3, #30
 29064 008a DFD4     		bmi	.L2074
 29065              	.LBB4056:
5110:src/xeq.c     **** 		if (Running)
 29066              		.loc 1 5110 3 is_stmt 1 view .LVU7730
5111:src/xeq.c     **** 			print_step(op);
 29067              		.loc 1 5111 3 view .LVU7731
5111:src/xeq.c     **** 			print_step(op);
 29068              		.loc 1 5111 7 is_stmt 0 view .LVU7732
 29069 008c DFF8ACA2 		ldr	r10, .L2402+68
5111:src/xeq.c     **** 			print_step(op);
 29070              		.loc 1 5111 6 view .LVU7733
 29071 0090 DAF80030 		ldr	r3, [r10]
 29072 0094 002B     		cmp	r3, #0
 29073 0096 7FD1     		bne	.L2374
5114:src/xeq.c     **** 		DispMsg = TraceBuffer;
 29074              		.loc 1 5114 4 is_stmt 1 view .LVU7734
 29075 0098 39A9     		add	r1, sp, #228
 29076 009a 2846     		mov	r0, r5
 29077 009c FFF7FEFF 		bl	prt
 29078              	.LVL2271:
 29079 00a0 9949     		ldr	r1, .L2402+16
 29080 00a2 0346     		mov	r3, r0
ARM GAS  /tmp/cc0UaEmF.s 			page 741


 29081 00a4 2A46     		mov	r2, r5
 29082 00a6 9948     		ldr	r0, .L2402+20
 29083 00a8 FFF7FEFF 		bl	sprintf
 29084              	.LVL2272:
 29085              	.L2076:
5115:src/xeq.c     **** 	}
 29086              		.loc 1 5115 3 view .LVU7735
5115:src/xeq.c     **** 	}
 29087              		.loc 1 5115 11 is_stmt 0 view .LVU7736
 29088 00ac 984B     		ldr	r3, .L2402+24
 29089 00ae 974A     		ldr	r2, .L2402+20
 29090 00b0 1A60     		str	r2, [r3]
 29091 00b2 CBE7     		b	.L2074
 29092              	.L2373:
5115:src/xeq.c     **** 	}
 29093              		.loc 1 5115 11 view .LVU7737
 29094              	.LBE4056:
5132:src/xeq.c     **** 	else {
 29095              		.loc 1 5132 3 is_stmt 1 view .LVU7738
 29096              	.LVL2273:
 29097              	.LBB4057:
 29098              	.LBI4057:
4951:src/xeq.c     **** 	unsigned int arg = op & RARG_MASK;
 29099              		.loc 1 4951 13 view .LVU7739
 29100              	.LBB4058:
4952:src/xeq.c     **** 	const unsigned int cmd = RARG_CMD(op);
 29101              		.loc 1 4952 2 view .LVU7740
4953:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
 29102              		.loc 1 4953 2 view .LVU7741
4953:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
 29103              		.loc 1 4953 27 is_stmt 0 view .LVU7742
 29104 00b4 4FEA152A 		lsr	r10, r5, #8
4955:src/xeq.c     **** 
 29105              		.loc 1 4955 33 view .LVU7743
 29106 00b8 964B     		ldr	r3, .L2402+28
4957:src/xeq.c     **** 
 29107              		.loc 1 4957 12 view .LVU7744
 29108 00ba 9248     		ldr	r0, .L2402+12
 29109              	.LBB4059:
 29110              	.LBB4060:
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 29111              		.loc 1 1043 5 view .LVU7745
 29112 00bc 217F     		ldrb	r1, [r4, #28]	@ zero_extendqisi2
 29113              	.LBE4060:
 29114              	.LBE4059:
4953:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
 29115              		.loc 1 4953 27 view .LVU7746
 29116 00be AAF1200A 		sub	r10, r10, #32
 29117 00c2 5FFA8AFA 		uxtb	r10, r10
 29118              	.LVL2274:
4954:src/xeq.c     **** 	unsigned int lim = argcmds[cmd].lim;
 29119              		.loc 1 4954 2 is_stmt 1 view .LVU7747
4955:src/xeq.c     **** 
 29120              		.loc 1 4955 2 view .LVU7748
4955:src/xeq.c     **** 
 29121              		.loc 1 4955 33 is_stmt 0 view .LVU7749
 29122 00c6 03EB0A12 		add	r2, r3, r10, lsl #4
ARM GAS  /tmp/cc0UaEmF.s 			page 742


4957:src/xeq.c     **** 
 29123              		.loc 1 4957 14 view .LVU7750
 29124 00ca A0F800A0 		strh	r10, [r0]	@ movhi
4955:src/xeq.c     **** 
 29125              		.loc 1 4955 33 view .LVU7751
 29126 00ce 1279     		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 29127 00d0 0592     		str	r2, [sp, #20]
 29128              	.LVL2275:
4957:src/xeq.c     **** 
 29129              		.loc 1 4957 2 is_stmt 1 view .LVU7752
4959:src/xeq.c     **** 
 29130              		.loc 1 4959 2 view .LVU7753
 29131              	.LBB4064:
 29132              	.LBI4059:
1040:src/xeq.c     **** 	decNumber a, b, x, t;
 29133              		.loc 1 1040 6 view .LVU7754
 29134              	.LBB4061:
1041:src/xeq.c     **** 
 29135              		.loc 1 1041 2 view .LVU7755
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 29136              		.loc 1 1043 2 view .LVU7756
 29137              	.LBE4061:
 29138              	.LBE4064:
4955:src/xeq.c     **** 
 29139              		.loc 1 4955 33 is_stmt 0 view .LVU7757
 29140 00d2 4FEA0A12 		lsl	r2, r10, #4
 29141              	.LBB4065:
 29142              	.LBB4062:
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 29143              		.loc 1 1043 5 view .LVU7758
 29144 00d6 0029     		cmp	r1, #0
 29145 00d8 40F03281 		bne	.L2375
 29146              	.L2088:
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 29147              		.loc 1 1043 5 view .LVU7759
 29148              	.LBE4062:
 29149              	.LBE4065:
4961:src/xeq.c     **** 		illegal(op);
 29150              		.loc 1 4961 2 is_stmt 1 view .LVU7760
4961:src/xeq.c     **** 		illegal(op);
 29151              		.loc 1 4961 5 is_stmt 0 view .LVU7761
 29152 00dc BAF18E0F 		cmp	r10, #142
 29153 00e0 6AD8     		bhi	.L2111
4965:src/xeq.c     **** 		set_lift();
 29154              		.loc 1 4965 2 is_stmt 1 view .LVU7762
4965:src/xeq.c     **** 		set_lift();
 29155              		.loc 1 4965 6 is_stmt 0 view .LVU7763
 29156 00e2 9958     		ldr	r1, [r3, r2]
 29157 00e4 0891     		str	r1, [sp, #32]
 29158 00e6 9818     		adds	r0, r3, r2
4965:src/xeq.c     **** 		set_lift();
 29159              		.loc 1 4965 5 view .LVU7764
 29160 00e8 0029     		cmp	r1, #0
 29161 00ea 44D0     		beq	.L2348
4952:src/xeq.c     **** 	const unsigned int cmd = RARG_CMD(op);
 29162              		.loc 1 4952 15 view .LVU7765
 29163 00ec 05F07F01 		and	r1, r5, #127
ARM GAS  /tmp/cc0UaEmF.s 			page 743


4970:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
 29164              		.loc 1 4970 2 is_stmt 1 view .LVU7766
4970:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
 29165              		.loc 1 4970 5 is_stmt 0 view .LVU7767
 29166 00f0 2D06     		lsls	r5, r5, #24
 29167              	.LVL2276:
4970:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
 29168              		.loc 1 4970 5 view .LVU7768
 29169 00f2 40F1C282 		bpl	.L2092
4971:src/xeq.c     **** 			// Get the argument by reading a register
 29170              		.loc 1 4971 3 is_stmt 1 view .LVU7769
4971:src/xeq.c     **** 			// Get the argument by reading a register
 29171              		.loc 1 4971 19 is_stmt 0 view .LVU7770
 29172 00f6 4579     		ldrb	r5, [r0, #5]	@ zero_extendqisi2
4971:src/xeq.c     **** 			// Get the argument by reading a register
 29173              		.loc 1 4971 6 view .LVU7771
 29174 00f8 E807     		lsls	r0, r5, #31
 29175 00fa 40F12F83 		bpl	.L2093
 29176              	.LBB4066:
4973:src/xeq.c     **** 			unsigned long long int regval;
 29177              		.loc 1 4973 4 is_stmt 1 view .LVU7772
4974:src/xeq.c     **** 
 29178              		.loc 1 4974 4 view .LVU7773
4976:src/xeq.c     **** 				// Invalid register specified for indirect access
 29179              		.loc 1 4976 4 view .LVU7774
4976:src/xeq.c     **** 				// Invalid register specified for indirect access
 29180              		.loc 1 4976 14 is_stmt 0 view .LVU7775
 29181 00fe 0A20     		movs	r0, #10
 29182 0100 0992     		str	r2, [sp, #36]
 29183 0102 0691     		str	r1, [sp, #24]
 29184 0104 FFF7FEFF 		bl	get_reg_limit
 29185              	.LVL2277:
4976:src/xeq.c     **** 				// Invalid register specified for indirect access
 29186              		.loc 1 4976 7 view .LVU7776
 29187 0108 0699     		ldr	r1, [sp, #24]
 29188 010a 099A     		ldr	r2, [sp, #36]
 29189 010c 8142     		cmp	r1, r0
 29190 010e 40F29F82 		bls	.L2094
4978:src/xeq.c     **** 				return;
 29191              		.loc 1 4978 5 is_stmt 1 view .LVU7777
 29192              	.LVL2278:
 29193              	.LBB4067:
 29194              	.LBI4067:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29195              		.loc 1 537 5 view .LVU7778
 29196              	.LBB4068:
 538:src/xeq.c     **** 		Error = e;
 29197              		.loc 1 538 2 view .LVU7779
 538:src/xeq.c     **** 		Error = e;
 29198              		.loc 1 538 12 is_stmt 0 view .LVU7780
 29199 0112 814B     		ldr	r3, .L2402+32
 29200 0114 1A68     		ldr	r2, [r3]
 538:src/xeq.c     **** 		Error = e;
 29201              		.loc 1 538 5 view .LVU7781
 29202 0116 0AB9     		cbnz	r2, .L2096
 29203              	.LVL2279:
 29204              	.LBB4069:
ARM GAS  /tmp/cc0UaEmF.s 			page 744


 29205              	.LBI4069:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29206              		.loc 1 537 5 is_stmt 1 view .LVU7782
 29207              	.LBB4070:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 29208              		.loc 1 539 3 view .LVU7783
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 29209              		.loc 1 539 9 is_stmt 0 view .LVU7784
 29210 0118 0822     		movs	r2, #8
 29211 011a 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 29212              		.loc 1 540 3 is_stmt 1 view .LVU7785
 29213              	.LVL2280:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 29214              		.loc 1 540 3 is_stmt 0 view .LVU7786
 29215              	.LBE4070:
 29216              	.LBE4069:
 29217              	.LBE4068:
 29218              	.LBE4067:
4979:src/xeq.c     **** 			}
 29219              		.loc 1 4979 5 is_stmt 1 view .LVU7787
4979:src/xeq.c     **** 			}
 29220              		.loc 1 4979 5 is_stmt 0 view .LVU7788
 29221              	.LBE4066:
 29222              	.LBE4058:
 29223              	.LBE4057:
5143:src/xeq.c     **** 		}
 29224              		.loc 1 5143 12 is_stmt 1 view .LVU7789
5153:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 29225              		.loc 1 5153 2 view .LVU7790
 29226              	.L2096:
5153:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 29227              		.loc 1 5153 2 is_stmt 0 view .LVU7791
 29228 011c DFF81CA2 		ldr	r10, .L2402+68
 29229 0120 1046     		mov	r0, r2
 29230 0122 52E0     		b	.L2217
 29231              	.LVL2281:
 29232              	.L2372:
5130:src/xeq.c     **** 	else if (isRARG(op))
 29233              		.loc 1 5130 3 is_stmt 1 view .LVU7792
 29234              	.LBB4097:
 29235              	.LBI4097:
5047:src/xeq.c     **** 	const int cmd = opDBL(op);
 29236              		.loc 1 5047 13 view .LVU7793
 29237              	.LBB4098:
5048:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
 29238              		.loc 1 5048 2 view .LVU7794
5049:src/xeq.c     **** 
 29239              		.loc 1 5049 12 is_stmt 0 view .LVU7795
 29240 0124 774A     		ldr	r2, .L2402+12
 29241              	.LBB4099:
 29242              	.LBB4100:
 29243              	.LBB4101:
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 29244              		.loc 1 1043 5 view .LVU7796
 29245 0126 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 29246              	.LBE4101:
ARM GAS  /tmp/cc0UaEmF.s 			page 745


 29247              	.LBE4100:
 29248              	.LBE4099:
5048:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
 29249              		.loc 1 5048 12 view .LVU7797
 29250 0128 C5F3032A 		ubfx	r10, r5, #8, #4
 29251              	.LVL2282:
5049:src/xeq.c     **** 
 29252              		.loc 1 5049 2 is_stmt 1 view .LVU7798
5049:src/xeq.c     **** 
 29253              		.loc 1 5049 14 is_stmt 0 view .LVU7799
 29254 012c A2F800A0 		strh	r10, [r2]	@ movhi
5051:src/xeq.c     **** 
 29255              		.loc 1 5051 2 is_stmt 1 view .LVU7800
 29256              	.LBB4110:
 29257              	.LBI4099:
1146:src/xeq.c     **** 	process_cmdline();
 29258              		.loc 1 1146 6 view .LVU7801
 29259              	.LBE4110:
 29260              	.LBE4098:
 29261              	.LBE4097:
1147:src/xeq.c     **** 	set_lift();
 29262              		.loc 1 1147 2 view .LVU7802
 29263              	.LBB4134:
 29264              	.LBB4129:
 29265              	.LBB4111:
 29266              	.LBB4104:
 29267              	.LBI4100:
1040:src/xeq.c     **** 	decNumber a, b, x, t;
 29268              		.loc 1 1040 6 view .LVU7803
 29269              	.LBB4102:
1041:src/xeq.c     **** 
 29270              		.loc 1 1041 2 view .LVU7804
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 29271              		.loc 1 1043 2 view .LVU7805
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 29272              		.loc 1 1043 5 is_stmt 0 view .LVU7806
 29273 0130 002B     		cmp	r3, #0
 29274 0132 40F05682 		bne	.L2376
 29275              	.L2078:
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 29276              		.loc 1 1043 5 view .LVU7807
 29277              	.LBE4102:
 29278              	.LBE4104:
 29279              	.LBE4111:
 29280              	.LBE4129:
 29281              	.LBE4134:
1148:src/xeq.c     **** }
 29282              		.loc 1 1148 2 is_stmt 1 view .LVU7808
 29283              	.LBB4135:
 29284              	.LBB4130:
 29285              	.LBB4112:
 29286              	.LBB4105:
 29287              	.LBI4105:
 748:src/xeq.c     ****     State2.state_lift = 1;
 29288              		.loc 1 748 6 view .LVU7809
 29289              	.LBB4106:
 749:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 746


 29290              		.loc 1 749 5 view .LVU7810
 749:src/xeq.c     **** }
 29291              		.loc 1 749 23 is_stmt 0 view .LVU7811
 29292 0136 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 29293              	.LBE4106:
 29294              	.LBE4105:
 29295              	.LBE4112:
5053:src/xeq.c     **** 		illegal(op);
 29296              		.loc 1 5053 5 view .LVU7812
 29297 0138 BAF10A0F 		cmp	r10, #10
 29298              	.LBB4113:
 29299              	.LBB4108:
 29300              	.LBB4107:
 749:src/xeq.c     **** }
 29301              		.loc 1 749 23 view .LVU7813
 29302 013c 43F04003 		orr	r3, r3, #64
 29303 0140 E375     		strb	r3, [r4, #23]
 29304              	.LBE4107:
 29305              	.LBE4108:
 29306              	.LBE4113:
5053:src/xeq.c     **** 		illegal(op);
 29307              		.loc 1 5053 2 is_stmt 1 view .LVU7814
5053:src/xeq.c     **** 		illegal(op);
 29308              		.loc 1 5053 5 is_stmt 0 view .LVU7815
 29309 0142 00F34682 		bgt	.L2377
5057:src/xeq.c     **** 		return;
 29310              		.loc 1 5057 2 is_stmt 1 view .LVU7816
5057:src/xeq.c     **** 		return;
 29311              		.loc 1 5057 6 is_stmt 0 view .LVU7817
 29312 0146 754A     		ldr	r2, .L2402+36
 29313 0148 4FEA0A13 		lsl	r3, r10, #4
 29314 014c D258     		ldr	r2, [r2, r3]
5057:src/xeq.c     **** 		return;
 29315              		.loc 1 5057 5 view .LVU7818
 29316 014e 002A     		cmp	r2, #0
 29317 0150 00F07B82 		beq	.L2082
 29318              	.LBB4114:
5060:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
 29319              		.loc 1 5060 3 is_stmt 1 view .LVU7819
 29320              	.LVL2283:
5061:src/xeq.c     **** 			XromUserPc = findmultilbl(op, FIND_OP_ERROR);
 29321              		.loc 1 5061 3 view .LVU7820
 29322              	.LBB4115:
 29323              	.LBI4115:
4273:src/xeq.c     **** {
 29324              		.loc 1 4273 24 view .LVU7821
 29325              	.LBB4116:
4275:src/xeq.c     **** 	if (xp < xrom)
 29326              		.loc 1 4275 2 view .LVU7822
4276:src/xeq.c     **** 		return NULL;
 29327              		.loc 1 4276 5 is_stmt 0 view .LVU7823
 29328 0154 724B     		ldr	r3, .L2402+40
4275:src/xeq.c     **** 	if (xp < xrom)
 29329              		.loc 1 4275 59 view .LVU7824
 29330 0156 22F00101 		bic	r1, r2, #1
 29331              	.LVL2284:
4276:src/xeq.c     **** 		return NULL;
ARM GAS  /tmp/cc0UaEmF.s 			page 747


 29332              		.loc 1 4276 2 is_stmt 1 view .LVU7825
4276:src/xeq.c     **** 		return NULL;
 29333              		.loc 1 4276 5 is_stmt 0 view .LVU7826
 29334 015a 9942     		cmp	r1, r3
 29335 015c 08D3     		bcc	.L2083
4280:src/xeq.c     **** 		return NULL;
 29336              		.loc 1 4280 2 is_stmt 1 view .LVU7827
4280:src/xeq.c     **** 		return NULL;
 29337              		.loc 1 4280 17 is_stmt 0 view .LVU7828
 29338 015e 7148     		ldr	r0, .L2402+44
 29339 0160 0088     		ldrh	r0, [r0]
 29340 0162 03EB4003 		add	r3, r3, r0, lsl #1
4280:src/xeq.c     **** 		return NULL;
 29341              		.loc 1 4280 5 view .LVU7829
 29342 0166 9942     		cmp	r1, r3
 29343 0168 02D2     		bcs	.L2083
 29344              	.LVL2285:
4280:src/xeq.c     **** 		return NULL;
 29345              		.loc 1 4280 5 view .LVU7830
 29346              	.LBE4116:
 29347              	.LBE4115:
5061:src/xeq.c     **** 			XromUserPc = findmultilbl(op, FIND_OP_ERROR);
 29348              		.loc 1 5061 6 view .LVU7831
 29349 016a 0029     		cmp	r1, #0
 29350 016c 40F04A83 		bne	.L2378
 29351              	.L2083:
5071:src/xeq.c     **** 			set_lift();
 29352              		.loc 1 5071 4 is_stmt 1 view .LVU7832
 29353 0170 5146     		mov	r1, r10
 29354 0172 2846     		mov	r0, r5
 29355 0174 9047     		blx	r2
 29356              	.LVL2286:
5072:src/xeq.c     **** 		}
 29357              		.loc 1 5072 4 view .LVU7833
 29358              	.LBB4117:
 29359              	.LBI4117:
 748:src/xeq.c     ****     State2.state_lift = 1;
 29360              		.loc 1 748 6 view .LVU7834
 29361              	.LBB4118:
 749:src/xeq.c     **** }
 29362              		.loc 1 749 5 view .LVU7835
 29363              	.L2348:
 749:src/xeq.c     **** }
 29364              		.loc 1 749 5 is_stmt 0 view .LVU7836
 29365              	.LBE4118:
 29366              	.LBE4117:
 29367              	.LBE4114:
 29368              	.LBE4130:
 29369              	.LBE4135:
 29370              	.LBB4136:
 29371              	.LBB4137:
 29372              	.LBB4138:
3799:src/xeq.c     **** 		}
 29373              		.loc 1 3799 4 is_stmt 1 view .LVU7837
 29374              	.LBB4139:
 29375              	.LBI4139:
 748:src/xeq.c     ****     State2.state_lift = 1;
ARM GAS  /tmp/cc0UaEmF.s 			page 748


 29376              		.loc 1 748 6 view .LVU7838
 29377              	.LBB4140:
 749:src/xeq.c     **** }
 29378              		.loc 1 749 5 view .LVU7839
 749:src/xeq.c     **** }
 29379              		.loc 1 749 23 is_stmt 0 view .LVU7840
 29380 0176 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 29381 0178 674B     		ldr	r3, .L2402+32
 29382 017a 42F04002 		orr	r2, r2, #64
 29383 017e E275     		strb	r2, [r4, #23]
 29384 0180 1A68     		ldr	r2, [r3]
 29385              	.L2085:
 29386              	.LBE4140:
 29387              	.LBE4139:
 29388              	.LBE4138:
 29389              	.LBE4137:
 29390              	.LBE4136:
5143:src/xeq.c     **** 		}
 29391              		.loc 1 5143 12 is_stmt 1 discriminator 1 view .LVU7841
5153:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 29392              		.loc 1 5153 2 discriminator 1 view .LVU7842
5153:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 29393              		.loc 1 5153 5 is_stmt 0 discriminator 1 view .LVU7843
 29394 0182 002A     		cmp	r2, #0
 29395 0184 CAD1     		bne	.L2096
 29396              	.LVL2287:
 29397              	.L2203:
5222:src/xeq.c     **** #ifdef INFRARED
 29398              		.loc 1 5222 2 is_stmt 1 view .LVU7844
 29399              	.LBB4212:
 29400              	.LBI4212:
4227:src/xeq.c     **** 	// extern int IntMaxWindow;
 29401              		.loc 1 4227 6 view .LVU7845
 29402              	.LBB4213:
4230:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 29403              		.loc 1 4230 2 view .LVU7846
4230:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 29404              		.loc 1 4230 16 is_stmt 0 view .LVU7847
 29405 0186 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
4231:src/xeq.c     **** }
 29406              		.loc 1 4231 15 view .LVU7848
 29407 0188 0022     		movs	r2, #0
4230:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 29408              		.loc 1 4230 16 view .LVU7849
 29409 018a 6FF3C503 		bfc	r3, #3, #3
 29410 018e 2375     		strb	r3, [r4, #20]
4231:src/xeq.c     **** }
 29411              		.loc 1 4231 2 is_stmt 1 view .LVU7850
4231:src/xeq.c     **** }
 29412              		.loc 1 4231 15 is_stmt 0 view .LVU7851
 29413 0190 6274     		strb	r2, [r4, #17]
 29414              	.LBE4213:
 29415              	.LBE4212:
5227:src/xeq.c     **** 
 29416              		.loc 1 5227 1 view .LVU7852
 29417 0192 6BB0     		add	sp, sp, #428
 29418              		.cfi_remember_state
ARM GAS  /tmp/cc0UaEmF.s 			page 749


 29419              		.cfi_def_cfa_offset 36
 29420              		@ sp needed
 29421 0194 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 29422              	.LVL2288:
 29423              	.L2374:
 29424              		.cfi_restore_state
 29425              	.LBB4214:
5112:src/xeq.c     **** 		else
 29426              		.loc 1 5112 4 is_stmt 1 view .LVU7853
 29427 0198 2846     		mov	r0, r5
 29428 019a FFF7FEFF 		bl	print_step
 29429              	.LVL2289:
 29430 019e 85E7     		b	.L2076
 29431              	.L2116:
5112:src/xeq.c     **** 		else
 29432              		.loc 1 5112 4 is_stmt 0 view .LVU7854
 29433              	.LBE4214:
5139:src/xeq.c     **** 		case KIND_TRI:	triadic(op);	break;
 29434              		.loc 1 5139 18 is_stmt 1 view .LVU7855
 29435              	.LVL2290:
 29436              	.LBB4215:
 29437              	.LBI4215:
4506:src/xeq.c     **** 
 29438              		.loc 1 4506 13 view .LVU7856
 29439              	.LBB4216:
4508:src/xeq.c     **** 	process_cmdline_set_lift();
 29440              		.loc 1 4508 2 view .LVU7857
4509:src/xeq.c     **** 
 29441              		.loc 1 4509 2 view .LVU7858
 29442              	.LBB4217:
 29443              	.LBI4217:
1146:src/xeq.c     **** 	process_cmdline();
 29444              		.loc 1 1146 6 view .LVU7859
 29445              	.LBE4217:
 29446              	.LBE4216:
 29447              	.LBE4215:
1147:src/xeq.c     **** 	set_lift();
 29448              		.loc 1 1147 2 view .LVU7860
 29449              	.LBB4265:
 29450              	.LBB4258:
 29451              	.LBB4226:
 29452              	.LBB4218:
 29453              	.LBI4218:
1040:src/xeq.c     **** 	decNumber a, b, x, t;
 29454              		.loc 1 1040 6 view .LVU7861
 29455              	.LBB4219:
1041:src/xeq.c     **** 
 29456              		.loc 1 1041 2 view .LVU7862
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 29457              		.loc 1 1043 2 view .LVU7863
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 29458              		.loc 1 1043 5 is_stmt 0 view .LVU7864
 29459 01a0 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 29460 01a2 0BB1     		cbz	r3, .L2177
 29461 01a4 FFF7FEFF 		bl	process_cmdline.part.0
 29462              	.LVL2291:
 29463              	.L2177:
ARM GAS  /tmp/cc0UaEmF.s 			page 750


1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 29464              		.loc 1 1043 5 view .LVU7865
 29465              	.LBE4219:
 29466              	.LBE4218:
 29467              	.LBE4226:
 29468              	.LBE4258:
 29469              	.LBE4265:
1148:src/xeq.c     **** }
 29470              		.loc 1 1148 2 is_stmt 1 view .LVU7866
 29471              	.LBB4266:
 29472              	.LBB4259:
 29473              	.LBB4227:
 29474              	.LBB4220:
 29475              	.LBI4220:
 748:src/xeq.c     ****     State2.state_lift = 1;
 29476              		.loc 1 748 6 view .LVU7867
 29477              	.LBB4221:
 749:src/xeq.c     **** }
 29478              		.loc 1 749 5 view .LVU7868
 749:src/xeq.c     **** }
 29479              		.loc 1 749 23 is_stmt 0 view .LVU7869
 29480 01a8 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 29481              	.LBE4221:
 29482              	.LBE4220:
 29483              	.LBE4227:
4511:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 29484              		.loc 1 4511 4 view .LVU7870
 29485 01aa EDB2     		uxtb	r5, r5
 29486              	.LVL2292:
 29487              	.LBB4228:
 29488              	.LBB4224:
 29489              	.LBB4222:
 749:src/xeq.c     **** }
 29490              		.loc 1 749 23 view .LVU7871
 29491 01ac 43F04003 		orr	r3, r3, #64
 29492              	.LBE4222:
 29493              	.LBE4224:
 29494              	.LBE4228:
4512:src/xeq.c     **** 		if (is_intmode()) {
 29495              		.loc 1 4512 5 view .LVU7872
 29496 01b0 322D     		cmp	r5, #50
 29497              	.LBB4229:
 29498              	.LBB4225:
 29499              	.LBB4223:
 749:src/xeq.c     **** }
 29500              		.loc 1 749 23 view .LVU7873
 29501 01b2 E375     		strb	r3, [r4, #23]
 29502              	.LBE4223:
 29503              	.LBE4225:
 29504              	.LBE4229:
4511:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 29505              		.loc 1 4511 2 is_stmt 1 view .LVU7874
 29506              	.LVL2293:
4512:src/xeq.c     **** 		if (is_intmode()) {
 29507              		.loc 1 4512 2 view .LVU7875
4512:src/xeq.c     **** 		if (is_intmode()) {
 29508              		.loc 1 4512 5 is_stmt 0 view .LVU7876
ARM GAS  /tmp/cc0UaEmF.s 			page 751


 29509 01b4 40F2D582 		bls	.L2379
 29510              	.LVL2294:
 29511              	.L2111:
4512:src/xeq.c     **** 		if (is_intmode()) {
 29512              		.loc 1 4512 5 view .LVU7877
 29513              	.LBE4259:
 29514              	.LBE4266:
5143:src/xeq.c     **** 		}
 29515              		.loc 1 5143 12 is_stmt 1 view .LVU7878
5143:src/xeq.c     **** 		}
 29516              		.loc 1 5143 12 view .LVU7879
 29517              	.LBB4267:
 29518              	.LBI4267:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29519              		.loc 1 537 5 view .LVU7880
 29520              	.LBB4268:
 538:src/xeq.c     **** 		Error = e;
 29521              		.loc 1 538 2 view .LVU7881
 538:src/xeq.c     **** 		Error = e;
 29522              		.loc 1 538 12 is_stmt 0 view .LVU7882
 29523 01b8 574B     		ldr	r3, .L2402+32
 29524 01ba 1868     		ldr	r0, [r3]
 538:src/xeq.c     **** 		Error = e;
 29525              		.loc 1 538 5 view .LVU7883
 29526 01bc 0028     		cmp	r0, #0
 29527 01be 40F01F82 		bne	.L2356
 29528 01c2 DFF878A1 		ldr	r10, .L2402+68
 29529              	.LVL2295:
 29530              	.L2090:
 538:src/xeq.c     **** 		Error = e;
 29531              		.loc 1 538 5 view .LVU7884
 29532              	.LBE4268:
 29533              	.LBE4267:
 29534              	.LBB4269:
 29535              	.LBB4131:
 29536              	.LBB4121:
 29537              	.LBB4122:
 29538              	.LBB4123:
 29539              	.LBI4123:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29540              		.loc 1 537 5 is_stmt 1 view .LVU7885
 29541              	.LBB4124:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 29542              		.loc 1 539 3 view .LVU7886
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 29543              		.loc 1 539 9 is_stmt 0 view .LVU7887
 29544 01c6 0320     		movs	r0, #3
 29545 01c8 1860     		str	r0, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 29546              		.loc 1 540 3 is_stmt 1 view .LVU7888
 29547              	.LVL2296:
 29548              	.L2217:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 29549              		.loc 1 540 3 is_stmt 0 view .LVU7889
 29550              	.LBE4124:
 29551              	.LBE4123:
 29552              	.LBE4122:
ARM GAS  /tmp/cc0UaEmF.s 			page 752


 29553              	.LBE4121:
 29554              	.LBE4131:
 29555              	.LBE4269:
5155:src/xeq.c     **** 		// Repair stack and state
 29556              		.loc 1 5155 3 is_stmt 1 view .LVU7890
 29557 01ca 0593     		str	r3, [sp, #20]
 29558 01cc FFF7FEFF 		bl	error_message
 29559              	.LVL2297:
5158:src/xeq.c     **** 		UserFlags[regA_idx >> 4] = flags;
 29560              		.loc 1 5158 3 view .LVU7891
 29561 01d0 42A9     		add	r1, sp, #264
 29562 01d2 A022     		movs	r2, #160
 29563 01d4 D8F80000 		ldr	r0, [r8]
 29564 01d8 FFF7FEFF 		bl	xcopy
 29565              	.LVL2298:
5159:src/xeq.c     **** 		UState = old;
 29566              		.loc 1 5159 3 view .LVU7892
5160:src/xeq.c     **** 		State2.state_lift = lift;
 29567              		.loc 1 5160 10 is_stmt 0 view .LVU7893
 29568 01dc 96E80300 		ldm	r6, {r0, r1}
5159:src/xeq.c     **** 		UState = old;
 29569              		.loc 1 5159 3 view .LVU7894
 29570 01e0 3A68     		ldr	r2, [r7]
5159:src/xeq.c     **** 		UState = old;
 29571              		.loc 1 5159 28 view .LVU7895
 29572 01e2 039B     		ldr	r3, [sp, #12]
 29573 01e4 A2F8FC37 		strh	r3, [r2, #2044]	@ movhi
5160:src/xeq.c     **** 		State2.state_lift = lift;
 29574              		.loc 1 5160 3 is_stmt 1 view .LVU7896
5160:src/xeq.c     **** 		State2.state_lift = lift;
 29575              		.loc 1 5160 10 is_stmt 0 view .LVU7897
 29576 01e8 02F2E475 		addw	r5, r2, #2020
 29577 01ec 85E80300 		stm	r5, {r0, r1}
5161:src/xeq.c     **** 		raw_set_pc(old_pc);
 29578              		.loc 1 5161 3 is_stmt 1 view .LVU7898
5161:src/xeq.c     **** 		raw_set_pc(old_pc);
 29579              		.loc 1 5161 21 is_stmt 0 view .LVU7899
 29580 01f0 049B     		ldr	r3, [sp, #16]
 29581 01f2 E17D     		ldrb	r1, [r4, #23]	@ zero_extendqisi2
 29582 01f4 63F38611 		bfi	r1, r3, #6, #1
 29583 01f8 E175     		strb	r1, [r4, #23]
5162:src/xeq.c     **** 		*((int *)&CommandLine) = old_cl;
 29584              		.loc 1 5162 3 is_stmt 1 view .LVU7900
 29585              	.LVL2299:
 29586              	.LBB4270:
 29587              	.LBI4270:
 279:src/xeq.c     **** 	State.pc = pc;
 29588              		.loc 1 279 13 view .LVU7901
 29589              	.LBB4271:
 280:src/xeq.c     **** 	update_program_bounds(0);
 29590              		.loc 1 280 2 view .LVU7902
 281:src/xeq.c     **** }
 29591              		.loc 1 281 2 is_stmt 0 view .LVU7903
 29592 01fa 0020     		movs	r0, #0
 280:src/xeq.c     **** 	update_program_bounds(0);
 29593              		.loc 1 280 11 view .LVU7904
 29594 01fc A2F8E0B7 		strh	fp, [r2, #2016]	@ movhi
ARM GAS  /tmp/cc0UaEmF.s 			page 753


 281:src/xeq.c     **** }
 29595              		.loc 1 281 2 is_stmt 1 view .LVU7905
 29596 0200 FFF7FEFF 		bl	update_program_bounds
 29597              	.LVL2300:
 281:src/xeq.c     **** }
 29598              		.loc 1 281 2 is_stmt 0 view .LVU7906
 29599              	.LBE4271:
 29600              	.LBE4270:
5163:src/xeq.c     **** 		process_cmdline_set_lift();
 29601              		.loc 1 5163 3 is_stmt 1 view .LVU7907
 29602              	.LBB4272:
 29603              	.LBB4273:
 29604              	.LBB4274:
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 29605              		.loc 1 1043 5 is_stmt 0 view .LVU7908
 29606 0204 19F0FF0F 		tst	r9, #255
 29607 0208 059B     		ldr	r3, [sp, #20]
 29608              	.LBE4274:
 29609              	.LBE4273:
 29610              	.LBE4272:
5163:src/xeq.c     **** 		process_cmdline_set_lift();
 29611              		.loc 1 5163 26 view .LVU7909
 29612 020a C4F81C90 		str	r9, [r4, #28]
5164:src/xeq.c     **** 		// process_cmdline_set_lift() may set an error code if there was something
 29613              		.loc 1 5164 3 is_stmt 1 view .LVU7910
 29614              	.LBB4285:
 29615              	.LBI4272:
1146:src/xeq.c     **** 	process_cmdline();
 29616              		.loc 1 1146 6 view .LVU7911
 29617              	.LBE4285:
1147:src/xeq.c     **** 	set_lift();
 29618              		.loc 1 1147 2 view .LVU7912
 29619              	.LBB4286:
 29620              	.LBB4277:
 29621              	.LBI4273:
1040:src/xeq.c     **** 	decNumber a, b, x, t;
 29622              		.loc 1 1040 6 view .LVU7913
 29623              	.LBB4275:
1041:src/xeq.c     **** 
 29624              		.loc 1 1041 2 view .LVU7914
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 29625              		.loc 1 1043 2 view .LVU7915
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 29626              		.loc 1 1043 5 is_stmt 0 view .LVU7916
 29627 020e 40F04B82 		bne	.L2380
 29628              	.LVL2301:
 29629              	.L2204:
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 29630              		.loc 1 1043 5 view .LVU7917
 29631              	.LBE4275:
 29632              	.LBE4277:
 29633              	.LBE4286:
1148:src/xeq.c     **** }
 29634              		.loc 1 1148 2 is_stmt 1 view .LVU7918
 29635              	.LBB4287:
 29636              	.LBB4278:
 29637              	.LBI4278:
ARM GAS  /tmp/cc0UaEmF.s 			page 754


 748:src/xeq.c     ****     State2.state_lift = 1;
 29638              		.loc 1 748 6 view .LVU7919
 29639              	.LBB4279:
 749:src/xeq.c     **** }
 29640              		.loc 1 749 5 view .LVU7920
 29641              	.LBE4279:
 29642              	.LBE4278:
 29643              	.LBE4287:
5168:src/xeq.c     **** #ifndef REALBUILD
 29644              		.loc 1 5168 15 is_stmt 0 view .LVU7921
 29645 0212 4549     		ldr	r1, .L2402+48
 29646              	.LBB4288:
 29647              	.LBB4282:
 29648              	.LBB4280:
 749:src/xeq.c     **** }
 29649              		.loc 1 749 23 view .LVU7922
 29650 0214 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 29651              	.LBE4280:
 29652              	.LBE4282:
 29653              	.LBE4288:
5168:src/xeq.c     **** #ifndef REALBUILD
 29654              		.loc 1 5168 15 view .LVU7923
 29655 0216 0D68     		ldr	r5, [r1]
 29656 0218 DAF80010 		ldr	r1, [r10]
 29657              	.LBB4289:
 29658              	.LBB4283:
 29659              	.LBB4281:
 749:src/xeq.c     **** }
 29660              		.loc 1 749 23 view .LVU7924
 29661 021c 42F04002 		orr	r2, r2, #64
 29662 0220 E275     		strb	r2, [r4, #23]
 29663              	.LBE4281:
 29664              	.LBE4283:
 29665              	.LBE4289:
5167:src/xeq.c     **** 		if (Running || XromRunning) {
 29666              		.loc 1 5167 3 is_stmt 1 view .LVU7925
5167:src/xeq.c     **** 		if (Running || XromRunning) {
 29667              		.loc 1 5167 9 is_stmt 0 view .LVU7926
 29668 0222 0020     		movs	r0, #0
5168:src/xeq.c     **** #ifndef REALBUILD
 29669              		.loc 1 5168 15 view .LVU7927
 29670 0224 51EA0502 		orrs	r2, r1, r5
5167:src/xeq.c     **** 		if (Running || XromRunning) {
 29671              		.loc 1 5167 9 view .LVU7928
 29672 0228 1860     		str	r0, [r3]
5168:src/xeq.c     **** #ifndef REALBUILD
 29673              		.loc 1 5168 3 is_stmt 1 view .LVU7929
5168:src/xeq.c     **** #ifndef REALBUILD
 29674              		.loc 1 5168 15 is_stmt 0 view .LVU7930
 29675 022a ACD0     		beq	.L2203
5170:src/xeq.c     **** 				// Special handling for debug environment
 29676              		.loc 1 5170 4 is_stmt 1 view .LVU7931
5170:src/xeq.c     **** 				// Special handling for debug environment
 29677              		.loc 1 5170 7 is_stmt 0 view .LVU7932
 29678 022c 94F91720 		ldrsb	r2, [r4, #23]
 29679 0230 8242     		cmp	r2, r0
 29680 0232 C0F23E82 		blt	.L2381
ARM GAS  /tmp/cc0UaEmF.s 			page 755


 29681              	.LBB4290:
5192:src/xeq.c     **** 				if (XromFlags.xIN) {
 29682              		.loc 1 5192 5 is_stmt 1 view .LVU7933
5193:src/xeq.c     **** 					// Restore state to before xIN
 29683              		.loc 1 5193 9 is_stmt 0 view .LVU7934
 29684 0236 3D4E     		ldr	r6, .L2402+52
5192:src/xeq.c     **** 				if (XromFlags.xIN) {
 29685              		.loc 1 5192 29 view .LVU7935
 29686 0238 3968     		ldr	r1, [r7]
5193:src/xeq.c     **** 					// Restore state to before xIN
 29687              		.loc 1 5193 8 view .LVU7936
 29688 023a 96F90120 		ldrsb	r2, [r6, #1]
5192:src/xeq.c     **** 				if (XromFlags.xIN) {
 29689              		.loc 1 5192 24 view .LVU7937
 29690 023e B1F8E037 		ldrh	r3, [r1, #2016]
 29691              	.LVL2302:
5193:src/xeq.c     **** 					// Restore state to before xIN
 29692              		.loc 1 5193 5 is_stmt 1 view .LVU7938
5193:src/xeq.c     **** 					// Restore state to before xIN
 29693              		.loc 1 5193 8 is_stmt 0 view .LVU7939
 29694 0242 002A     		cmp	r2, #0
 29695 0244 22DA     		bge	.L2212
5195:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 29696              		.loc 1 5195 6 is_stmt 1 view .LVU7940
5195:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 29697              		.loc 1 5195 20 is_stmt 0 view .LVU7941
 29698 0246 96F801C0 		ldrb	ip, [r6, #1]	@ zero_extendqisi2
5197:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 29699              		.loc 1 5197 18 view .LVU7942
 29700 024a D1F8E857 		ldr	r5, [r1, #2024]
5200:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 29701              		.loc 1 5200 13 view .LVU7943
 29702 024e D6F808E0 		ldr	lr, [r6, #8]
5195:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 29703              		.loc 1 5195 20 view .LVU7944
 29704 0252 60F3C71C 		bfi	ip, r0, #7, #1
5197:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 29705              		.loc 1 5197 18 view .LVU7945
 29706 0256 CCF3C000 		ubfx	r0, ip, #3, #1
 29707 025a 0CF00102 		and	r2, ip, #1
 29708 025e 42EA8032 		orr	r2, r2, r0, lsl #14
 29709 0262 CCF38000 		ubfx	r0, ip, #2, #1
 29710 0266 42EAC042 		orr	r2, r2, r0, lsl #19
 29711 026a 3148     		ldr	r0, .L2402+56
5195:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 29712              		.loc 1 5195 20 view .LVU7946
 29713 026c 86F801C0 		strb	ip, [r6, #1]
5196:src/xeq.c     **** 					UState.intm = XromFlags.mode_int;
 29714              		.loc 1 5196 6 is_stmt 1 view .LVU7947
5197:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 29715              		.loc 1 5197 6 view .LVU7948
5198:src/xeq.c     **** 					// Restore the global return stack
 29716              		.loc 1 5198 6 view .LVU7949
5197:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 29717              		.loc 1 5197 18 is_stmt 0 view .LVU7950
 29718 0270 25F40425 		bic	r5, r5, #540672
 29719 0274 0240     		ands	r2, r2, r0
ARM GAS  /tmp/cc0UaEmF.s 			page 756


 29720 0276 25F00105 		bic	r5, r5, #1
5200:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 29721              		.loc 1 5200 13 view .LVU7951
 29722 027a 2E48     		ldr	r0, .L2402+60
5201:src/xeq.c     **** 				}
 29723              		.loc 1 5201 16 view .LVU7952
 29724 027c B689     		ldrh	r6, [r6, #12]
5200:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 29725              		.loc 1 5200 13 view .LVU7953
 29726 027e C0F800E0 		str	lr, [r0]
5197:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 29727              		.loc 1 5197 18 view .LVU7954
 29728 0282 2A43     		orrs	r2, r2, r5
 29729 0284 C1F8E827 		str	r2, [r1, #2024]
5200:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 29730              		.loc 1 5200 6 is_stmt 1 view .LVU7955
5201:src/xeq.c     **** 				}
 29731              		.loc 1 5201 6 view .LVU7956
5201:src/xeq.c     **** 				}
 29732              		.loc 1 5201 16 is_stmt 0 view .LVU7957
 29733 0288 A1F8E267 		strh	r6, [r1, #2018]	@ movhi
 29734              	.L2212:
5203:src/xeq.c     **** 					// Leave XROM
 29735              		.loc 1 5203 11 is_stmt 1 view .LVU7958
 29736 028c 9A0B     		lsrs	r2, r3, #14
 29737 028e 032A     		cmp	r2, #3
 29738 0290 1AD1     		bne	.L2213
5207:src/xeq.c     **** 					}
 29739              		.loc 1 5207 10 is_stmt 0 view .LVU7959
 29740 0292 284E     		ldr	r6, .L2402+60
5207:src/xeq.c     **** 					}
 29741              		.loc 1 5207 18 view .LVU7960
 29742 0294 6FF00045 		mvn	r5, #-2147483648
 29743 0298 04E0     		b	.L2216
 29744              	.L2214:
5210:src/xeq.c     **** 				}
 29745              		.loc 1 5210 7 is_stmt 1 view .LVU7961
 29746 029a 0133     		adds	r3, r3, #1
 29747              	.LVL2303:
5210:src/xeq.c     **** 				}
 29748              		.loc 1 5210 7 is_stmt 0 view .LVU7962
 29749 029c 9BB2     		uxth	r3, r3
 29750              	.LVL2304:
5203:src/xeq.c     **** 					// Leave XROM
 29751              		.loc 1 5203 11 is_stmt 1 view .LVU7963
 29752 029e 9A0B     		lsrs	r2, r3, #14
 29753 02a0 032A     		cmp	r2, #3
 29754 02a2 11D1     		bne	.L2213
 29755              	.L2216:
5205:src/xeq.c     **** 						retstk_up();
 29756              		.loc 1 5205 6 view .LVU7964
5205:src/xeq.c     **** 						retstk_up();
 29757              		.loc 1 5205 9 is_stmt 0 view .LVU7965
 29758 02a4 B1F9E227 		ldrsh	r2, [r1, #2018]
 29759 02a8 002A     		cmp	r2, #0
 29760 02aa F6D0     		beq	.L2214
5206:src/xeq.c     **** 						pc = RetStk[RetStkPtr - 1];
ARM GAS  /tmp/cc0UaEmF.s 			page 757


 29761              		.loc 1 5206 7 is_stmt 1 view .LVU7966
 29762 02ac FFF7FEFF 		bl	retstk_up
 29763              	.LVL2305:
5207:src/xeq.c     **** 					}
 29764              		.loc 1 5207 7 view .LVU7967
5207:src/xeq.c     **** 					}
 29765              		.loc 1 5207 19 is_stmt 0 view .LVU7968
 29766 02b0 3968     		ldr	r1, [r7]
5207:src/xeq.c     **** 					}
 29767              		.loc 1 5207 10 view .LVU7969
 29768 02b2 3368     		ldr	r3, [r6]
5207:src/xeq.c     **** 					}
 29769              		.loc 1 5207 19 view .LVU7970
 29770 02b4 B1F9E227 		ldrsh	r2, [r1, #2018]
5207:src/xeq.c     **** 					}
 29771              		.loc 1 5207 18 view .LVU7971
 29772 02b8 5019     		adds	r0, r2, r5
5207:src/xeq.c     **** 					}
 29773              		.loc 1 5207 10 view .LVU7972
 29774 02ba 33F81030 		ldrh	r3, [r3, r0, lsl #1]
 29775              	.LVL2306:
5209:src/xeq.c     **** 						++pc; // compensate for decpc below
 29776              		.loc 1 5209 6 is_stmt 1 view .LVU7973
5209:src/xeq.c     **** 						++pc; // compensate for decpc below
 29777              		.loc 1 5209 9 is_stmt 0 view .LVU7974
 29778 02be 002A     		cmp	r2, #0
 29779 02c0 EBD0     		beq	.L2214
5203:src/xeq.c     **** 					// Leave XROM
 29780              		.loc 1 5203 11 is_stmt 1 view .LVU7975
 29781 02c2 9A0B     		lsrs	r2, r3, #14
 29782 02c4 032A     		cmp	r2, #3
 29783 02c6 EDD0     		beq	.L2216
 29784              	.L2213:
5212:src/xeq.c     **** #ifndef REALBUILD
 29785              		.loc 1 5212 5 view .LVU7976
 29786              	.LVL2307:
 29787              	.LBB4291:
 29788              	.LBI4291:
 279:src/xeq.c     **** 	State.pc = pc;
 29789              		.loc 1 279 13 view .LVU7977
 29790              	.LBB4292:
 280:src/xeq.c     **** 	update_program_bounds(0);
 29791              		.loc 1 280 2 view .LVU7978
 280:src/xeq.c     **** 	update_program_bounds(0);
 29792              		.loc 1 280 11 is_stmt 0 view .LVU7979
 29793 02c8 A1F8E037 		strh	r3, [r1, #2016]	@ movhi
 281:src/xeq.c     **** }
 29794              		.loc 1 281 2 is_stmt 1 view .LVU7980
 29795 02cc 0020     		movs	r0, #0
 29796 02ce FFF7FEFF 		bl	update_program_bounds
 29797              	.LVL2308:
 29798              	.L2207:
 281:src/xeq.c     **** }
 29799              		.loc 1 281 2 is_stmt 0 view .LVU7981
 29800              	.LBE4292:
 29801              	.LBE4291:
 29802              	.LBE4290:
ARM GAS  /tmp/cc0UaEmF.s 			page 758


5216:src/xeq.c     **** 			xeq_init_contexts();	// Repair any pointers clobberd by xIN
 29803              		.loc 1 5216 4 is_stmt 1 view .LVU7982
 29804 02d2 FFF7FEFF 		bl	decpc
 29805              	.LVL2309:
5217:src/xeq.c     **** 
 29806              		.loc 1 5217 4 view .LVU7983
 29807 02d6 FFF7FEFF 		bl	xeq_init_contexts
 29808              	.LVL2310:
5219:src/xeq.c     **** 		}
 29809              		.loc 1 5219 4 view .LVU7984
 29810              	.LBB4293:
 29811              	.LBI4293:
5580:src/xeq.c     **** 	set_running_off_sst();
 29812              		.loc 1 5580 6 view .LVU7985
 29813              	.LBB4294:
5581:src/xeq.c     **** 	State.entryp = 0;
 29814              		.loc 1 5581 2 view .LVU7986
 29815              	.LBB4295:
 29816              	.LBI4295:
5572:src/xeq.c     **** 	Running = 0;
 29817              		.loc 1 5572 6 view .LVU7987
 29818              	.LBB4296:
5573:src/xeq.c     **** }
 29819              		.loc 1 5573 2 view .LVU7988
 29820              	.LBE4296:
 29821              	.LBE4295:
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 29822              		.loc 1 5582 15 is_stmt 0 view .LVU7989
 29823 02da 3B68     		ldr	r3, [r7]
 29824              	.LBB4298:
 29825              	.LBB4297:
5573:src/xeq.c     **** }
 29826              		.loc 1 5573 10 view .LVU7990
 29827 02dc 0021     		movs	r1, #0
 29828 02de CAF80010 		str	r1, [r10]
 29829              	.LBE4297:
 29830              	.LBE4298:
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 29831              		.loc 1 5582 2 is_stmt 1 view .LVU7991
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 29832              		.loc 1 5582 15 is_stmt 0 view .LVU7992
 29833 02e2 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 29834 02e6 61F30412 		bfi	r2, r1, #4, #1
 29835 02ea 83F8DD27 		strb	r2, [r3, #2013]
5583:src/xeq.c     **** }
 29836              		.loc 1 5583 2 is_stmt 1 view .LVU7993
 29837 02ee 8A20     		movs	r0, #138
 29838 02f0 FFF7FEFF 		bl	dot
 29839              	.LVL2311:
5584:src/xeq.c     **** 
 29840              		.loc 1 5584 1 is_stmt 0 view .LVU7994
 29841 02f4 47E7     		b	.L2203
 29842              	.L2403:
 29843 02f6 00BF     		.align	2
 29844              	.L2402:
 29845 02f8 00000000 		.word	main_ram
 29846 02fc 00000000 		.word	StateWhileOn
ARM GAS  /tmp/cc0UaEmF.s 			page 759


 29847 0300 00000000 		.word	Busy
 29848 0304 00000000 		.word	XeqOpCode
 29849 0308 00000000 		.word	.LC8
 29850 030c 00000000 		.word	TraceBuffer
 29851 0310 00000000 		.word	DispMsg
 29852 0314 00000000 		.word	argcmds
 29853 0318 00000000 		.word	Error
 29854 031c 00000000 		.word	multicmds
 29855 0320 00000000 		.word	xrom
 29856 0324 00000000 		.word	xrom_size
 29857 0328 00000000 		.word	XromRunning
 29858 032c 00000000 		.word	XromParams
 29859 0330 01400800 		.word	540673
 29860 0334 00000000 		.word	RetStk
 29861 0338 00000000 		.word	StackBase
 29862 033c 00000000 		.word	Running
 29863              	.LVL2312:
 29864              	.L2375:
5584:src/xeq.c     **** 
 29865              		.loc 1 5584 1 view .LVU7995
 29866 0340 0892     		str	r2, [sp, #32]
 29867              	.LBE4294:
 29868              	.LBE4293:
 29869              	.LBB4299:
 29870              	.LBB4093:
 29871              	.LBB4071:
 29872              	.LBB4063:
 29873 0342 FFF7FEFF 		bl	process_cmdline.part.0
 29874              	.LVL2313:
 29875 0346 089A     		ldr	r2, [sp, #32]
 29876 0348 AF4B     		ldr	r3, .L2404
 29877 034a C7E6     		b	.L2088
 29878              	.LVL2314:
 29879              	.L2118:
5584:src/xeq.c     **** 
 29880              		.loc 1 5584 1 view .LVU7996
 29881              	.LBE4063:
 29882              	.LBE4071:
 29883              	.LBE4093:
 29884              	.LBE4299:
5137:src/xeq.c     **** 		case KIND_MON:	monadic(op);	break;
 29885              		.loc 1 5137 18 is_stmt 1 view .LVU7997
 29886              	.LBB4300:
 29887              	.LBI4300:
4399:src/xeq.c     **** 	const unsigned int idx = argKIND(op);
 29888              		.loc 1 4399 13 view .LVU7998
 29889              	.LBB4301:
4400:src/xeq.c     **** 
 29890              		.loc 1 4400 2 view .LVU7999
 29891              	.LBB4302:
 29892              	.LBB4303:
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 29893              		.loc 1 1043 5 is_stmt 0 view .LVU8000
 29894 034c 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 29895              	.LBE4303:
 29896              	.LBE4302:
4400:src/xeq.c     **** 
ARM GAS  /tmp/cc0UaEmF.s 			page 760


 29897              		.loc 1 4400 21 view .LVU8001
 29898 034e EDB2     		uxtb	r5, r5
 29899              	.LVL2315:
4402:src/xeq.c     **** 	if (idx < NUM_NILADIC) {
 29900              		.loc 1 4402 2 is_stmt 1 view .LVU8002
 29901              	.LBB4306:
 29902              	.LBI4302:
1040:src/xeq.c     **** 	decNumber a, b, x, t;
 29903              		.loc 1 1040 6 view .LVU8003
 29904              	.LBB4304:
1041:src/xeq.c     **** 
 29905              		.loc 1 1041 2 view .LVU8004
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 29906              		.loc 1 1043 2 view .LVU8005
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 29907              		.loc 1 1043 5 is_stmt 0 view .LVU8006
 29908 0350 002B     		cmp	r3, #0
 29909 0352 40F08082 		bne	.L2382
 29910              	.L2155:
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 29911              		.loc 1 1043 5 view .LVU8007
 29912              	.LBE4304:
 29913              	.LBE4306:
4403:src/xeq.c     **** 		if (is_intmode() && NILADIC_NOTINT(niladics[idx]))
 29914              		.loc 1 4403 2 is_stmt 1 view .LVU8008
4403:src/xeq.c     **** 		if (is_intmode() && NILADIC_NOTINT(niladics[idx]))
 29915              		.loc 1 4403 5 is_stmt 0 view .LVU8009
 29916 0356 BF2D     		cmp	r5, #191
 29917 0358 00F23482 		bhi	.L2156
4404:src/xeq.c     **** 			bad_mode_error();
 29918              		.loc 1 4404 3 is_stmt 1 view .LVU8010
4404:src/xeq.c     **** 			bad_mode_error();
 29919              		.loc 1 4404 7 is_stmt 0 view .LVU8011
 29920 035c 3B68     		ldr	r3, [r7]
 29921 035e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4404:src/xeq.c     **** 			bad_mode_error();
 29922              		.loc 1 4404 6 view .LVU8012
 29923 0362 13F0010F 		tst	r3, #1
4404:src/xeq.c     **** 			bad_mode_error();
 29924              		.loc 1 4404 23 view .LVU8013
 29925 0366 A94B     		ldr	r3, .L2404+4
4404:src/xeq.c     **** 			bad_mode_error();
 29926              		.loc 1 4404 6 view .LVU8014
 29927 0368 40F00A84 		bne	.L2339
 29928 036c 2A01     		lsls	r2, r5, #4
 29929              	.L2157:
4406:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
 29930              		.loc 1 4406 8 is_stmt 1 view .LVU8015
4406:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
 29931              		.loc 1 4406 14 is_stmt 0 view .LVU8016
 29932 036e 53F802A0 		ldr	r10, [r3, r2]
 29933 0372 1344     		add	r3, r3, r2
 29934 0374 0593     		str	r3, [sp, #20]
4406:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
 29935              		.loc 1 4406 11 view .LVU8017
 29936 0376 BAF1000F 		cmp	r10, #0
 29937 037a 14D0     		beq	.L2161
ARM GAS  /tmp/cc0UaEmF.s 			page 761


 29938              	.LBB4307:
4407:src/xeq.c     **** 			if (dispatch_xrom(fp))
 29939              		.loc 1 4407 4 is_stmt 1 view .LVU8018
 29940              	.LVL2316:
4408:src/xeq.c     **** 				return;
 29941              		.loc 1 4408 4 view .LVU8019
4408:src/xeq.c     **** 				return;
 29942              		.loc 1 4408 8 is_stmt 0 view .LVU8020
 29943 037c 5046     		mov	r0, r10
 29944 037e FFF7FEFF 		bl	dispatch_xrom
 29945              	.LVL2317:
4408:src/xeq.c     **** 				return;
 29946              		.loc 1 4408 7 view .LVU8021
 29947 0382 059B     		ldr	r3, [sp, #20]
 29948 0384 0028     		cmp	r0, #0
 29949 0386 40F06081 		bne	.L2082
4411:src/xeq.c     **** 				case 2:	lift_if_enabled();
 29950              		.loc 1 4411 5 is_stmt 1 view .LVU8022
 29951 038a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 29952 038c 03F00303 		and	r3, r3, #3
 29953 0390 012B     		cmp	r3, #1
 29954 0392 00F02184 		beq	.L2163
 29955 0396 022B     		cmp	r3, #2
 29956 0398 03D1     		bne	.L2164
4412:src/xeq.c     **** 				case 1:	lift_if_enabled();
 29957              		.loc 1 4412 13 view .LVU8023
 29958              	.LBB4308:
 29959              	.LBI4308:
 738:src/xeq.c     **** 	if (get_lift())
 29960              		.loc 1 738 6 view .LVU8024
 29961              	.LBB4309:
 739:src/xeq.c     **** 		lift();
 29962              		.loc 1 739 2 view .LVU8025
 29963              	.LBB4310:
 29964              	.LBI4310:
 734:src/xeq.c     **** 	return State2.state_lift;
 29965              		.loc 1 734 12 view .LVU8026
 29966              	.LBB4311:
 735:src/xeq.c     **** }
 29967              		.loc 1 735 2 view .LVU8027
 735:src/xeq.c     **** }
 29968              		.loc 1 735 15 is_stmt 0 view .LVU8028
 29969 039a E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 29970              	.LBE4311:
 29971              	.LBE4310:
 739:src/xeq.c     **** 		lift();
 29972              		.loc 1 739 5 view .LVU8029
 29973 039c 5B06     		lsls	r3, r3, #25
 29974 039e 00F11984 		bmi	.L2383
 29975              	.L2164:
 29976              	.LBE4309:
 29977              	.LBE4308:
4415:src/xeq.c     **** 					break;
 29978              		.loc 1 4415 6 is_stmt 1 view .LVU8030
 29979 03a2 2846     		mov	r0, r5
 29980 03a4 D047     		blx	r10
 29981              	.LVL2318:
ARM GAS  /tmp/cc0UaEmF.s 			page 762


4416:src/xeq.c     **** 				}
 29982              		.loc 1 4416 6 view .LVU8031
 29983              	.L2161:
4416:src/xeq.c     **** 				}
 29984              		.loc 1 4416 6 is_stmt 0 view .LVU8032
 29985              	.LBE4307:
4421:src/xeq.c     **** 	if (idx != OP_rCLX)
 29986              		.loc 1 4421 3 is_stmt 1 view .LVU8033
4422:src/xeq.c     **** 		set_lift();
 29987              		.loc 1 4422 2 view .LVU8034
 29988 03a6 9A4B     		ldr	r3, .L2404+8
4422:src/xeq.c     **** 		set_lift();
 29989              		.loc 1 4422 5 is_stmt 0 view .LVU8035
 29990 03a8 3F2D     		cmp	r5, #63
 29991 03aa 1A68     		ldr	r2, [r3]
 29992 03ac 3FF4E9AE 		beq	.L2085
 29993              	.L2167:
4423:src/xeq.c     **** }
 29994              		.loc 1 4423 3 is_stmt 1 view .LVU8036
 29995              	.LBB4318:
 29996              	.LBI4318:
 748:src/xeq.c     ****     State2.state_lift = 1;
 29997              		.loc 1 748 6 view .LVU8037
 29998              	.LBB4319:
 749:src/xeq.c     **** }
 29999              		.loc 1 749 5 view .LVU8038
 749:src/xeq.c     **** }
 30000              		.loc 1 749 23 is_stmt 0 view .LVU8039
 30001 03b0 E17D     		ldrb	r1, [r4, #23]	@ zero_extendqisi2
 30002 03b2 41F04001 		orr	r1, r1, #64
 30003 03b6 E175     		strb	r1, [r4, #23]
 750:src/xeq.c     **** 
 30004              		.loc 1 750 1 view .LVU8040
 30005 03b8 E3E6     		b	.L2085
 30006              	.LVL2319:
 30007              	.L2117:
 750:src/xeq.c     **** 
 30008              		.loc 1 750 1 view .LVU8041
 30009              	.LBE4319:
 30010              	.LBE4318:
 30011              	.LBE4301:
 30012              	.LBE4300:
5138:src/xeq.c     **** 		case KIND_DYA:	dyadic(op);	break;
 30013              		.loc 1 5138 18 is_stmt 1 view .LVU8042
 30014              	.LBB4359:
 30015              	.LBI4359:
4432:src/xeq.c     **** {
 30016              		.loc 1 4432 13 view .LVU8043
 30017              	.LBB4360:
4434:src/xeq.c     **** 	process_cmdline_set_lift();
 30018              		.loc 1 4434 2 view .LVU8044
4435:src/xeq.c     **** 
 30019              		.loc 1 4435 2 view .LVU8045
 30020              	.LBB4361:
 30021              	.LBI4361:
1146:src/xeq.c     **** 	process_cmdline();
 30022              		.loc 1 1146 6 view .LVU8046
ARM GAS  /tmp/cc0UaEmF.s 			page 763


 30023              	.LBE4361:
 30024              	.LBE4360:
 30025              	.LBE4359:
1147:src/xeq.c     **** 	set_lift();
 30026              		.loc 1 1147 2 view .LVU8047
 30027              	.LBB4400:
 30028              	.LBB4395:
 30029              	.LBB4372:
 30030              	.LBB4362:
 30031              	.LBI4362:
1040:src/xeq.c     **** 	decNumber a, b, x, t;
 30032              		.loc 1 1040 6 view .LVU8048
 30033              	.LBB4363:
1041:src/xeq.c     **** 
 30034              		.loc 1 1041 2 view .LVU8049
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30035              		.loc 1 1043 2 view .LVU8050
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30036              		.loc 1 1043 5 is_stmt 0 view .LVU8051
 30037 03ba 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 30038 03bc 002B     		cmp	r3, #0
 30039 03be 40F04782 		bne	.L2384
 30040              	.L2169:
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30041              		.loc 1 1043 5 view .LVU8052
 30042              	.LBE4363:
 30043              	.LBE4362:
 30044              	.LBE4372:
 30045              	.LBE4395:
 30046              	.LBE4400:
1148:src/xeq.c     **** }
 30047              		.loc 1 1148 2 is_stmt 1 view .LVU8053
 30048              	.LBB4401:
 30049              	.LBB4396:
 30050              	.LBB4373:
 30051              	.LBB4365:
 30052              	.LBI4365:
 748:src/xeq.c     ****     State2.state_lift = 1;
 30053              		.loc 1 748 6 view .LVU8054
 30054              	.LBB4366:
 749:src/xeq.c     **** }
 30055              		.loc 1 749 5 view .LVU8055
 749:src/xeq.c     **** }
 30056              		.loc 1 749 23 is_stmt 0 view .LVU8056
 30057 03c2 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 30058              	.LBE4366:
 30059              	.LBE4365:
 30060              	.LBE4373:
4437:src/xeq.c     **** 	if (f < NUM_MONADIC) {
 30061              		.loc 1 4437 4 view .LVU8057
 30062 03c4 EDB2     		uxtb	r5, r5
 30063              	.LVL2320:
 30064              	.LBB4374:
 30065              	.LBB4369:
 30066              	.LBB4367:
 749:src/xeq.c     **** }
 30067              		.loc 1 749 23 view .LVU8058
ARM GAS  /tmp/cc0UaEmF.s 			page 764


 30068 03c6 43F04003 		orr	r3, r3, #64
 30069              	.LBE4367:
 30070              	.LBE4369:
 30071              	.LBE4374:
4438:src/xeq.c     **** 		if (is_intmode()) {
 30072              		.loc 1 4438 5 view .LVU8059
 30073 03ca 9B2D     		cmp	r5, #155
 30074              	.LBB4375:
 30075              	.LBB4370:
 30076              	.LBB4368:
 749:src/xeq.c     **** }
 30077              		.loc 1 749 23 view .LVU8060
 30078 03cc E375     		strb	r3, [r4, #23]
 30079              	.LBE4368:
 30080              	.LBE4370:
 30081              	.LBE4375:
4437:src/xeq.c     **** 	if (f < NUM_MONADIC) {
 30082              		.loc 1 4437 2 is_stmt 1 view .LVU8061
 30083              	.LVL2321:
4438:src/xeq.c     **** 		if (is_intmode()) {
 30084              		.loc 1 4438 2 view .LVU8062
4438:src/xeq.c     **** 		if (is_intmode()) {
 30085              		.loc 1 4438 5 is_stmt 0 view .LVU8063
 30086 03ce 3FF6F3AE 		bhi	.L2111
4439:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
 30087              		.loc 1 4439 3 is_stmt 1 view .LVU8064
4439:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
 30088              		.loc 1 4439 7 is_stmt 0 view .LVU8065
 30089 03d2 3B68     		ldr	r3, [r7]
 30090 03d4 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4439:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
 30091              		.loc 1 4439 6 view .LVU8066
 30092 03d8 D907     		lsls	r1, r3, #31
 30093 03da 40F15E83 		bpl	.L2171
4440:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 30094              		.loc 1 4440 4 is_stmt 1 view .LVU8067
4440:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 30095              		.loc 1 4440 10 is_stmt 0 view .LVU8068
 30096 03de 8D4B     		ldr	r3, .L2404+12
 30097 03e0 05EB4505 		add	r5, r5, r5, lsl #1
 30098              	.LVL2322:
4440:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 30099              		.loc 1 4440 10 view .LVU8069
 30100 03e4 03EBC505 		add	r5, r3, r5, lsl #3
 30101 03e8 AD68     		ldr	r5, [r5, #8]
4440:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 30102              		.loc 1 4440 7 view .LVU8070
 30103 03ea 002D     		cmp	r5, #0
 30104 03ec 00F03883 		beq	.L2190
 30105              	.LBB4376:
4441:src/xeq.c     **** 				if (dispatch_xrom(fp))
 30106              		.loc 1 4441 5 is_stmt 1 view .LVU8071
 30107              	.LVL2323:
4442:src/xeq.c     **** 					return;
 30108              		.loc 1 4442 5 view .LVU8072
4442:src/xeq.c     **** 					return;
 30109              		.loc 1 4442 9 is_stmt 0 view .LVU8073
ARM GAS  /tmp/cc0UaEmF.s 			page 765


 30110 03f0 2846     		mov	r0, r5
 30111 03f2 FFF7FEFF 		bl	dispatch_xrom
 30112              	.LVL2324:
4442:src/xeq.c     **** 					return;
 30113              		.loc 1 4442 8 view .LVU8074
 30114 03f6 0028     		cmp	r0, #0
 30115 03f8 40F02781 		bne	.L2082
 30116              	.LBB4377:
4445:src/xeq.c     **** 					x = fp(x);
 30117              		.loc 1 4445 6 is_stmt 1 view .LVU8075
 30118              	.LBB4378:
 30119              	.LBI4378:
1256:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 30120              		.loc 1 1256 15 view .LVU8076
 30121              	.LBB4379:
1257:src/xeq.c     **** }
 30122              		.loc 1 1257 2 view .LVU8077
1257:src/xeq.c     **** }
 30123              		.loc 1 1257 9 is_stmt 0 view .LVU8078
 30124 03fc 6420     		movs	r0, #100
 30125 03fe FFF7FEFF 		bl	get_reg_n_int
 30126              	.LVL2325:
1257:src/xeq.c     **** }
 30127              		.loc 1 1257 9 view .LVU8079
 30128              	.LBE4379:
 30129              	.LBE4378:
4446:src/xeq.c     **** 					setlastX();
 30130              		.loc 1 4446 6 is_stmt 1 view .LVU8080
4446:src/xeq.c     **** 					setlastX();
 30131              		.loc 1 4446 10 is_stmt 0 view .LVU8081
 30132 0402 A847     		blx	r5
 30133              	.LVL2326:
4446:src/xeq.c     **** 					setlastX();
 30134              		.loc 1 4446 10 view .LVU8082
 30135 0404 824B     		ldr	r3, .L2404+8
 30136 0406 0593     		str	r3, [sp, #20]
 30137 0408 0546     		mov	r5, r0
 30138              	.LVL2327:
4446:src/xeq.c     **** 					setlastX();
 30139              		.loc 1 4446 10 view .LVU8083
 30140 040a 8A46     		mov	r10, r1
 30141              	.LVL2328:
4447:src/xeq.c     **** 					setX_int(x);
 30142              		.loc 1 4447 6 is_stmt 1 view .LVU8084
 30143              	.LBB4380:
 30144              	.LBI4380:
 773:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 30145              		.loc 1 773 6 view .LVU8085
 30146              	.LBB4381:
 774:src/xeq.c     **** }
 30147              		.loc 1 774 2 view .LVU8086
 30148 040c 6C20     		movs	r0, #108
 30149              	.LVL2329:
 774:src/xeq.c     **** }
 30150              		.loc 1 774 2 is_stmt 0 view .LVU8087
 30151 040e 6421     		movs	r1, #100
 30152              	.LVL2330:
ARM GAS  /tmp/cc0UaEmF.s 			page 766


 774:src/xeq.c     **** }
 30153              		.loc 1 774 2 view .LVU8088
 30154 0410 FFF7FEFF 		bl	copyreg_n
 30155              	.LVL2331:
 30156              	.LBE4381:
 30157              	.LBE4380:
4448:src/xeq.c     **** 				}
 30158              		.loc 1 4448 6 is_stmt 1 view .LVU8089
 30159 0414 CFE1     		b	.L2352
 30160              	.LVL2332:
 30161              	.L2119:
4448:src/xeq.c     **** 				}
 30162              		.loc 1 4448 6 is_stmt 0 view .LVU8090
 30163              	.LBE4377:
 30164              	.LBE4376:
 30165              	.LBE4396:
 30166              	.LBE4401:
5136:src/xeq.c     **** 		case KIND_NIL:	niladic(op);	break;
 30167              		.loc 1 5136 19 is_stmt 1 view .LVU8091
 30168              	.LBB4402:
 30169              	.LBI4136:
3706:src/xeq.c     **** 	int opm = argKIND(op);
 30170              		.loc 1 3706 13 view .LVU8092
 30171              	.LBB4205:
3707:src/xeq.c     **** 
 30172              		.loc 1 3707 2 view .LVU8093
3707:src/xeq.c     **** 
 30173              		.loc 1 3707 6 is_stmt 0 view .LVU8094
 30174 0416 5FFA85FA 		uxtb	r10, r5
 30175              	.LVL2333:
3709:src/xeq.c     **** 	case OP_0:	case OP_1:	case OP_2:
 30176              		.loc 1 3709 2 is_stmt 1 view .LVU8095
 30177 041a BAF12A0F 		cmp	r10, #42
 30178 041e 3FF6CBAE 		bhi	.L2111
 30179 0422 DFE81AF0 		tbh	[pc, r10, lsl #1]
 30180              	.L2122:
 30181 0426 9902     		.2byte	(.L2133-.L2122)/2
 30182 0428 0F03     		.2byte	(.L2132-.L2122)/2
 30183 042a D702     		.2byte	(.L2131-.L2122)/2
 30184 042c FC02     		.2byte	(.L2130-.L2122)/2
 30185 042e A602     		.2byte	(.L2129-.L2122)/2
 30186 0430 0C02     		.2byte	(.L2128-.L2122)/2
 30187 0432 0C02     		.2byte	(.L2128-.L2122)/2
 30188 0434 0C02     		.2byte	(.L2128-.L2122)/2
 30189 0436 0C02     		.2byte	(.L2128-.L2122)/2
 30190 0438 0C02     		.2byte	(.L2128-.L2122)/2
 30191 043a 0C02     		.2byte	(.L2128-.L2122)/2
 30192 043c 0C02     		.2byte	(.L2128-.L2122)/2
 30193 043e 0C02     		.2byte	(.L2128-.L2122)/2
 30194 0440 0C02     		.2byte	(.L2128-.L2122)/2
 30195 0442 0C02     		.2byte	(.L2128-.L2122)/2
 30196 0444 0C02     		.2byte	(.L2128-.L2122)/2
 30197 0446 0C02     		.2byte	(.L2128-.L2122)/2
 30198 0448 0C02     		.2byte	(.L2128-.L2122)/2
 30199 044a 0C02     		.2byte	(.L2128-.L2122)/2
 30200 044c 0C02     		.2byte	(.L2128-.L2122)/2
 30201 044e 0C02     		.2byte	(.L2128-.L2122)/2
ARM GAS  /tmp/cc0UaEmF.s 			page 767


 30202 0450 7902     		.2byte	(.L2127-.L2122)/2
 30203 0452 7902     		.2byte	(.L2127-.L2122)/2
 30204 0454 3002     		.2byte	(.L2126-.L2122)/2
 30205 0456 3002     		.2byte	(.L2126-.L2122)/2
 30206 0458 3002     		.2byte	(.L2126-.L2122)/2
 30207 045a 3002     		.2byte	(.L2126-.L2122)/2
 30208 045c 3002     		.2byte	(.L2126-.L2122)/2
 30209 045e 3002     		.2byte	(.L2126-.L2122)/2
 30210 0460 3002     		.2byte	(.L2126-.L2122)/2
 30211 0462 2402     		.2byte	(.L2125-.L2122)/2
 30212 0464 2402     		.2byte	(.L2125-.L2122)/2
 30213 0466 2402     		.2byte	(.L2125-.L2122)/2
 30214 0468 2402     		.2byte	(.L2125-.L2122)/2
 30215 046a 2402     		.2byte	(.L2125-.L2122)/2
 30216 046c 2402     		.2byte	(.L2125-.L2122)/2
 30217 046e 2402     		.2byte	(.L2125-.L2122)/2
 30218 0470 6D02     		.2byte	(.L2124-.L2122)/2
 30219 0472 6D02     		.2byte	(.L2124-.L2122)/2
 30220 0474 4802     		.2byte	(.L2123-.L2122)/2
 30221 0476 4802     		.2byte	(.L2123-.L2122)/2
 30222 0478 3C02     		.2byte	(.L2121-.L2122)/2
 30223 047a 3C02     		.2byte	(.L2121-.L2122)/2
 30224              	.LVL2334:
 30225              		.p2align 1
 30226              	.L2115:
3709:src/xeq.c     **** 	case OP_0:	case OP_1:	case OP_2:
 30227              		.loc 1 3709 2 is_stmt 0 view .LVU8096
 30228              	.LBE4205:
 30229              	.LBE4402:
5140:src/xeq.c     **** 		case KIND_CMON:	monadic_cmplex(op);	break;
 30230              		.loc 1 5140 18 is_stmt 1 view .LVU8097
 30231              	.LBB4403:
 30232              	.LBI4403:
4581:src/xeq.c     **** 	unsigned int f;
 30233              		.loc 1 4581 13 view .LVU8098
 30234              	.LBB4404:
4582:src/xeq.c     **** 	process_cmdline_set_lift();
 30235              		.loc 1 4582 2 view .LVU8099
4583:src/xeq.c     **** 
 30236              		.loc 1 4583 2 view .LVU8100
 30237              	.LBB4405:
 30238              	.LBI4405:
1146:src/xeq.c     **** 	process_cmdline();
 30239              		.loc 1 1146 6 view .LVU8101
 30240              	.LBE4405:
 30241              	.LBE4404:
 30242              	.LBE4403:
1147:src/xeq.c     **** 	set_lift();
 30243              		.loc 1 1147 2 view .LVU8102
 30244              	.LBB4453:
 30245              	.LBB4445:
 30246              	.LBB4416:
 30247              	.LBB4406:
 30248              	.LBI4406:
1040:src/xeq.c     **** 	decNumber a, b, x, t;
 30249              		.loc 1 1040 6 view .LVU8103
 30250              	.LBB4407:
ARM GAS  /tmp/cc0UaEmF.s 			page 768


1041:src/xeq.c     **** 
 30251              		.loc 1 1041 2 view .LVU8104
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30252              		.loc 1 1043 2 view .LVU8105
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30253              		.loc 1 1043 5 is_stmt 0 view .LVU8106
 30254 047c 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 30255 047e 002B     		cmp	r3, #0
 30256 0480 40F0F281 		bne	.L2385
 30257              	.L2185:
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30258              		.loc 1 1043 5 view .LVU8107
 30259              	.LBE4407:
 30260              	.LBE4406:
 30261              	.LBE4416:
 30262              	.LBE4445:
 30263              	.LBE4453:
1148:src/xeq.c     **** }
 30264              		.loc 1 1148 2 is_stmt 1 view .LVU8108
 30265              	.LBB4454:
 30266              	.LBB4446:
 30267              	.LBB4417:
 30268              	.LBB4409:
 30269              	.LBI4409:
 748:src/xeq.c     ****     State2.state_lift = 1;
 30270              		.loc 1 748 6 view .LVU8109
 30271              	.LBB4410:
 749:src/xeq.c     **** }
 30272              		.loc 1 749 5 view .LVU8110
 749:src/xeq.c     **** }
 30273              		.loc 1 749 23 is_stmt 0 view .LVU8111
 30274 0484 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 30275              	.LBE4410:
 30276              	.LBE4409:
 30277              	.LBE4417:
4585:src/xeq.c     **** 	if (f < NUM_TRIADIC) {
 30278              		.loc 1 4585 4 view .LVU8112
 30279 0486 EDB2     		uxtb	r5, r5
 30280              	.LVL2335:
 30281              	.LBB4418:
 30282              	.LBB4413:
 30283              	.LBB4411:
 749:src/xeq.c     **** }
 30284              		.loc 1 749 23 view .LVU8113
 30285 0488 43F04003 		orr	r3, r3, #64
 30286              	.LBE4411:
 30287              	.LBE4413:
 30288              	.LBE4418:
4586:src/xeq.c     **** 		if (is_intmode()) {
 30289              		.loc 1 4586 5 view .LVU8114
 30290 048c 0B2D     		cmp	r5, #11
 30291              	.LBB4419:
 30292              	.LBB4414:
 30293              	.LBB4412:
 749:src/xeq.c     **** }
 30294              		.loc 1 749 23 view .LVU8115
 30295 048e E375     		strb	r3, [r4, #23]
ARM GAS  /tmp/cc0UaEmF.s 			page 769


 30296              	.LBE4412:
 30297              	.LBE4414:
 30298              	.LBE4419:
4585:src/xeq.c     **** 	if (f < NUM_TRIADIC) {
 30299              		.loc 1 4585 2 is_stmt 1 view .LVU8116
 30300              	.LVL2336:
4586:src/xeq.c     **** 		if (is_intmode()) {
 30301              		.loc 1 4586 2 view .LVU8117
4586:src/xeq.c     **** 		if (is_intmode()) {
 30302              		.loc 1 4586 5 is_stmt 0 view .LVU8118
 30303 0490 3FF692AE 		bhi	.L2111
4587:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
 30304              		.loc 1 4587 3 is_stmt 1 view .LVU8119
4587:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
 30305              		.loc 1 4587 7 is_stmt 0 view .LVU8120
 30306 0494 3B68     		ldr	r3, [r7]
 30307 0496 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4587:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
 30308              		.loc 1 4587 6 view .LVU8121
 30309 049a DB07     		lsls	r3, r3, #31
 30310 049c 40F12483 		bpl	.L2187
4588:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 30311              		.loc 1 4588 4 is_stmt 1 view .LVU8122
4588:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 30312              		.loc 1 4588 10 is_stmt 0 view .LVU8123
 30313 04a0 5D4B     		ldr	r3, .L2404+16
 30314 04a2 05EB8505 		add	r5, r5, r5, lsl #2
 30315              	.LVL2337:
4588:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 30316              		.loc 1 4588 10 view .LVU8124
 30317 04a6 03EB8505 		add	r5, r3, r5, lsl #2
 30318 04aa 6D68     		ldr	r5, [r5, #4]
4588:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 30319              		.loc 1 4588 7 view .LVU8125
 30320 04ac 002D     		cmp	r5, #0
 30321 04ae 00F0D782 		beq	.L2190
 30322              	.LBB4420:
4589:src/xeq.c     **** 				if (dispatch_xrom(fp))
 30323              		.loc 1 4589 5 is_stmt 1 view .LVU8126
 30324              	.LVL2338:
4590:src/xeq.c     **** 					return;
 30325              		.loc 1 4590 5 view .LVU8127
4590:src/xeq.c     **** 					return;
 30326              		.loc 1 4590 9 is_stmt 0 view .LVU8128
 30327 04b2 2846     		mov	r0, r5
 30328 04b4 FFF7FEFF 		bl	dispatch_xrom
 30329              	.LVL2339:
4590:src/xeq.c     **** 					return;
 30330              		.loc 1 4590 8 view .LVU8129
 30331 04b8 0028     		cmp	r0, #0
 30332 04ba 40F0C680 		bne	.L2082
 30333              	.LBB4421:
4593:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
 30334              		.loc 1 4593 6 is_stmt 1 view .LVU8130
 30335              	.LBB4422:
 30336              	.LBI4422:
1256:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
ARM GAS  /tmp/cc0UaEmF.s 			page 770


 30337              		.loc 1 1256 15 view .LVU8131
 30338              	.LBB4423:
1257:src/xeq.c     **** }
 30339              		.loc 1 1257 2 view .LVU8132
1257:src/xeq.c     **** }
 30340              		.loc 1 1257 9 is_stmt 0 view .LVU8133
 30341 04be 6420     		movs	r0, #100
 30342 04c0 FFF7FEFF 		bl	get_reg_n_int
 30343              	.LVL2340:
 30344 04c4 8246     		mov	r10, r0
 30345              	.LVL2341:
1257:src/xeq.c     **** }
 30346              		.loc 1 1257 9 view .LVU8134
 30347              	.LBE4423:
 30348              	.LBE4422:
4594:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 30349              		.loc 1 4594 6 is_stmt 1 view .LVU8135
4594:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 30350              		.loc 1 4594 24 is_stmt 0 view .LVU8136
 30351 04c6 6520     		movs	r0, #101
 30352              	.LVL2342:
 30353              	.LBB4425:
 30354              	.LBB4424:
1257:src/xeq.c     **** }
 30355              		.loc 1 1257 9 view .LVU8137
 30356 04c8 0591     		str	r1, [sp, #20]
 30357              	.LVL2343:
1257:src/xeq.c     **** }
 30358              		.loc 1 1257 9 view .LVU8138
 30359              	.LBE4424:
 30360              	.LBE4425:
4594:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 30361              		.loc 1 4594 24 view .LVU8139
 30362 04ca FFF7FEFF 		bl	get_reg_n_int
 30363              	.LVL2344:
 30364 04ce 0690     		str	r0, [sp, #24]
4595:src/xeq.c     **** 					x = fp(z, y, x);
 30365              		.loc 1 4595 24 view .LVU8140
 30366 04d0 6620     		movs	r0, #102
4594:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 30367              		.loc 1 4594 24 view .LVU8141
 30368 04d2 0891     		str	r1, [sp, #32]
 30369              	.LVL2345:
4595:src/xeq.c     **** 					x = fp(z, y, x);
 30370              		.loc 1 4595 6 is_stmt 1 view .LVU8142
4595:src/xeq.c     **** 					x = fp(z, y, x);
 30371              		.loc 1 4595 24 is_stmt 0 view .LVU8143
 30372 04d4 FFF7FEFF 		bl	get_reg_n_int
 30373              	.LVL2346:
4596:src/xeq.c     **** 					setlastX();
 30374              		.loc 1 4596 6 is_stmt 1 view .LVU8144
4596:src/xeq.c     **** 					setlastX();
 30375              		.loc 1 4596 10 is_stmt 0 view .LVU8145
 30376 04d8 059B     		ldr	r3, [sp, #20]
 30377 04da 069A     		ldr	r2, [sp, #24]
 30378 04dc CDF800A0 		str	r10, [sp]
 30379 04e0 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/cc0UaEmF.s 			page 771


 30380 04e2 089B     		ldr	r3, [sp, #32]
 30381 04e4 A847     		blx	r5
 30382              	.LVL2347:
4596:src/xeq.c     **** 					setlastX();
 30383              		.loc 1 4596 10 view .LVU8146
 30384 04e6 4A4B     		ldr	r3, .L2404+8
 30385 04e8 0593     		str	r3, [sp, #20]
 30386 04ea 0546     		mov	r5, r0
 30387              	.LVL2348:
4596:src/xeq.c     **** 					setlastX();
 30388              		.loc 1 4596 10 view .LVU8147
 30389 04ec 8A46     		mov	r10, r1
 30390              	.LVL2349:
4597:src/xeq.c     **** 					lower();
 30391              		.loc 1 4597 6 is_stmt 1 view .LVU8148
 30392              	.LBB4426:
 30393              	.LBI4426:
 773:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 30394              		.loc 1 773 6 view .LVU8149
 30395              	.LBB4427:
 774:src/xeq.c     **** }
 30396              		.loc 1 774 2 view .LVU8150
 30397 04ee 6C20     		movs	r0, #108
 30398              	.LVL2350:
 774:src/xeq.c     **** }
 30399              		.loc 1 774 2 is_stmt 0 view .LVU8151
 30400 04f0 6421     		movs	r1, #100
 30401              	.LVL2351:
 774:src/xeq.c     **** }
 30402              		.loc 1 774 2 view .LVU8152
 30403 04f2 FFF7FEFF 		bl	copyreg_n
 30404              	.LVL2352:
 30405              	.LBE4427:
 30406              	.LBE4426:
4598:src/xeq.c     **** 					lower();
 30407              		.loc 1 4598 6 is_stmt 1 view .LVU8153
 30408 04f6 FFF7FEFF 		bl	lower
 30409              	.LVL2353:
 30410 04fa 5AE1     		b	.L2350
 30411              	.LVL2354:
 30412              	.L2114:
4598:src/xeq.c     **** 					lower();
 30413              		.loc 1 4598 6 is_stmt 0 view .LVU8154
 30414              	.LBE4421:
 30415              	.LBE4420:
 30416              	.LBE4446:
 30417              	.LBE4454:
5141:src/xeq.c     **** 		case KIND_CDYA:	dyadic_cmplex(op);	break;
 30418              		.loc 1 5141 19 is_stmt 1 view .LVU8155
 30419              	.LBB4455:
 30420              	.LBI4455:
4472:src/xeq.c     **** 	decNumber x, y, rx, ry;
 30421              		.loc 1 4472 13 view .LVU8156
 30422              	.LBB4456:
4473:src/xeq.c     **** 	unsigned int f;
 30423              		.loc 1 4473 2 view .LVU8157
4474:src/xeq.c     **** 
ARM GAS  /tmp/cc0UaEmF.s 			page 772


 30424              		.loc 1 4474 2 view .LVU8158
4476:src/xeq.c     **** 
 30425              		.loc 1 4476 2 view .LVU8159
 30426              	.LBB4457:
 30427              	.LBI4457:
1146:src/xeq.c     **** 	process_cmdline();
 30428              		.loc 1 1146 6 view .LVU8160
 30429              	.LBE4457:
 30430              	.LBE4456:
 30431              	.LBE4455:
1147:src/xeq.c     **** 	set_lift();
 30432              		.loc 1 1147 2 view .LVU8161
 30433              	.LBB4494:
 30434              	.LBB4488:
 30435              	.LBB4468:
 30436              	.LBB4458:
 30437              	.LBI4458:
1040:src/xeq.c     **** 	decNumber a, b, x, t;
 30438              		.loc 1 1040 6 view .LVU8162
 30439              	.LBB4459:
1041:src/xeq.c     **** 
 30440              		.loc 1 1041 2 view .LVU8163
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30441              		.loc 1 1043 2 view .LVU8164
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30442              		.loc 1 1043 5 is_stmt 0 view .LVU8165
 30443 04fc 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 30444 04fe 002B     		cmp	r3, #0
 30445 0500 40F0AF81 		bne	.L2386
 30446              	.L2193:
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30447              		.loc 1 1043 5 view .LVU8166
 30448              	.LBE4459:
 30449              	.LBE4458:
 30450              	.LBE4468:
 30451              	.LBE4488:
 30452              	.LBE4494:
1148:src/xeq.c     **** }
 30453              		.loc 1 1148 2 is_stmt 1 view .LVU8167
 30454              	.LBB4495:
 30455              	.LBB4489:
 30456              	.LBB4469:
 30457              	.LBB4461:
 30458              	.LBI4461:
 748:src/xeq.c     ****     State2.state_lift = 1;
 30459              		.loc 1 748 6 view .LVU8168
 30460              	.LBB4462:
 749:src/xeq.c     **** }
 30461              		.loc 1 749 5 view .LVU8169
 749:src/xeq.c     **** }
 30462              		.loc 1 749 23 is_stmt 0 view .LVU8170
 30463 0504 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 30464              	.LBE4462:
 30465              	.LBE4461:
 30466              	.LBE4469:
4478:src/xeq.c     **** 
 30467              		.loc 1 4478 4 view .LVU8171
ARM GAS  /tmp/cc0UaEmF.s 			page 773


 30468 0506 EDB2     		uxtb	r5, r5
 30469              	.LVL2355:
 30470              	.LBB4470:
 30471              	.LBB4465:
 30472              	.LBB4463:
 749:src/xeq.c     **** }
 30473              		.loc 1 749 23 view .LVU8172
 30474 0508 43F04003 		orr	r3, r3, #64
 30475              	.LBE4463:
 30476              	.LBE4465:
 30477              	.LBE4470:
4480:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
 30478              		.loc 1 4480 5 view .LVU8173
 30479 050c 9B2D     		cmp	r5, #155
 30480              	.LBB4471:
 30481              	.LBB4466:
 30482              	.LBB4464:
 749:src/xeq.c     **** }
 30483              		.loc 1 749 23 view .LVU8174
 30484 050e E375     		strb	r3, [r4, #23]
 30485              	.LBE4464:
 30486              	.LBE4466:
 30487              	.LBE4471:
4478:src/xeq.c     **** 
 30488              		.loc 1 4478 2 is_stmt 1 view .LVU8175
 30489              	.LVL2356:
4480:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
 30490              		.loc 1 4480 2 view .LVU8176
4480:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
 30491              		.loc 1 4480 5 is_stmt 0 view .LVU8177
 30492 0510 6AD8     		bhi	.L2199
4481:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 30493              		.loc 1 4481 3 is_stmt 1 view .LVU8178
4481:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 30494              		.loc 1 4481 9 is_stmt 0 view .LVU8179
 30495 0512 404B     		ldr	r3, .L2404+12
 30496 0514 05EB4505 		add	r5, r5, r5, lsl #1
 30497              	.LVL2357:
4481:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 30498              		.loc 1 4481 9 view .LVU8180
 30499 0518 03EBC505 		add	r5, r3, r5, lsl #3
 30500 051c 6D68     		ldr	r5, [r5, #4]
4481:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 30501              		.loc 1 4481 6 view .LVU8181
 30502 051e 002D     		cmp	r5, #0
 30503 0520 00F0A982 		beq	.L2200
 30504              	.LBB4472:
4482:src/xeq.c     **** 			if (dispatch_xrom(fp))
 30505              		.loc 1 4482 4 is_stmt 1 view .LVU8182
 30506              	.LVL2358:
4483:src/xeq.c     **** 				return;
 30507              		.loc 1 4483 4 view .LVU8183
4483:src/xeq.c     **** 				return;
 30508              		.loc 1 4483 8 is_stmt 0 view .LVU8184
 30509 0524 2846     		mov	r0, r5
 30510 0526 FFF7FEFF 		bl	dispatch_xrom
 30511              	.LVL2359:
ARM GAS  /tmp/cc0UaEmF.s 			page 774


4483:src/xeq.c     **** 				return;
 30512              		.loc 1 4483 7 view .LVU8185
 30513 052a 0028     		cmp	r0, #0
 30514 052c 40F08D80 		bne	.L2082
4486:src/xeq.c     **** 				fp(&rx, &ry, &x, &y);
 30515              		.loc 1 4486 5 is_stmt 1 view .LVU8186
 30516              	.LVL2360:
 30517              	.LBB4473:
 30518              	.LBI4473:
 835:src/xeq.c     **** 	getX(x);
 30519              		.loc 1 835 6 view .LVU8187
 30520              	.LBE4473:
 30521              	.LBE4472:
 30522              	.LBE4489:
 30523              	.LBE4495:
 836:src/xeq.c     **** 	getY(y);
 30524              		.loc 1 836 2 view .LVU8188
 30525              	.LBB4496:
 30526              	.LBB4490:
 30527              	.LBB4484:
 30528              	.LBB4478:
 30529              	.LBB4474:
 30530              	.LBI4474:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 30531              		.loc 1 805 12 view .LVU8189
 30532              	.LBB4475:
 806:src/xeq.c     **** }
 30533              		.loc 1 806 2 view .LVU8190
 806:src/xeq.c     **** }
 30534              		.loc 1 806 9 is_stmt 0 view .LVU8191
 30535 0530 6421     		movs	r1, #100
 30536 0532 1EA8     		add	r0, sp, #120
 30537              	.LVL2361:
 806:src/xeq.c     **** }
 30538              		.loc 1 806 9 view .LVU8192
 30539 0534 FFF7FEFF 		bl	getRegister
 30540              	.LVL2362:
 806:src/xeq.c     **** }
 30541              		.loc 1 806 9 view .LVU8193
 30542              	.LBE4475:
 30543              	.LBE4474:
 30544              	.LBE4478:
 30545              	.LBE4484:
 30546              	.LBE4490:
 30547              	.LBE4496:
 837:src/xeq.c     **** }
 30548              		.loc 1 837 2 is_stmt 1 view .LVU8194
 30549              	.LBB4497:
 30550              	.LBB4491:
 30551              	.LBB4485:
 30552              	.LBB4479:
 30553              	.LBB4476:
 30554              	.LBI4476:
 813:src/xeq.c     **** 	getRegister(y, regY_idx);
 30555              		.loc 1 813 6 view .LVU8195
 30556              	.LBB4477:
 814:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 775


 30557              		.loc 1 814 2 view .LVU8196
 30558 0538 6521     		movs	r1, #101
 30559 053a 27A8     		add	r0, sp, #156
 30560              	.LVL2363:
 814:src/xeq.c     **** }
 30561              		.loc 1 814 2 is_stmt 0 view .LVU8197
 30562 053c FFF7FEFF 		bl	getRegister
 30563              	.LVL2364:
 814:src/xeq.c     **** }
 30564              		.loc 1 814 2 view .LVU8198
 30565              	.LBE4477:
 30566              	.LBE4476:
 30567              	.LBE4479:
4487:src/xeq.c     **** 				setlastXY();
 30568              		.loc 1 4487 5 is_stmt 1 view .LVU8199
 30569 0540 27AB     		add	r3, sp, #156
 30570 0542 1EAA     		add	r2, sp, #120
 30571 0544 39A9     		add	r1, sp, #228
 30572 0546 30A8     		add	r0, sp, #192
 30573 0548 A847     		blx	r5
 30574              	.LVL2365:
4488:src/xeq.c     **** 				setXY(&rx, &ry);
 30575              		.loc 1 4488 5 view .LVU8200
 30576 054a FFF7FEFF 		bl	setlastXY
 30577              	.LVL2366:
4489:src/xeq.c     **** 				set_was_complex();
 30578              		.loc 1 4489 5 view .LVU8201
 30579              	.LBB4480:
 30580              	.LBI4480:
 840:src/xeq.c     **** 	setX(x);
 30581              		.loc 1 840 6 view .LVU8202
 30582              	.LBE4480:
 30583              	.LBE4485:
 30584              	.LBE4491:
 30585              	.LBE4497:
 841:src/xeq.c     **** 	setY(y);
 30586              		.loc 1 841 2 view .LVU8203
 30587              	.LBB4498:
 30588              	.LBB4492:
 30589              	.LBB4486:
 30590              	.LBB4483:
 30591              	.LBB4481:
 30592              	.LBI4481:
 809:src/xeq.c     **** 	setRegister(regX_idx, x);
 30593              		.loc 1 809 6 view .LVU8204
 30594              	.LBB4482:
 810:src/xeq.c     **** }
 30595              		.loc 1 810 2 view .LVU8205
 30596              	.L2349:
 810:src/xeq.c     **** }
 30597              		.loc 1 810 2 is_stmt 0 view .LVU8206
 30598              	.LBE4482:
 30599              	.LBE4481:
 30600              	.LBE4483:
 30601              	.LBE4486:
 30602              	.LBE4492:
 30603              	.LBE4498:
ARM GAS  /tmp/cc0UaEmF.s 			page 776


 30604              	.LBB4499:
 30605              	.LBB4500:
 30606              	.LBB4501:
4568:src/xeq.c     **** 				set_was_complex();
 30607              		.loc 1 4568 5 is_stmt 1 view .LVU8207
 30608              	.LBB4502:
 30609              	.LBI4502:
 840:src/xeq.c     **** 	setX(x);
 30610              		.loc 1 840 6 view .LVU8208
 30611              	.LBE4502:
 30612              	.LBE4501:
 30613              	.LBE4500:
 30614              	.LBE4499:
 841:src/xeq.c     **** 	setY(y);
 30615              		.loc 1 841 2 view .LVU8209
 30616              	.LBB4553:
 30617              	.LBB4544:
 30618              	.LBB4515:
 30619              	.LBB4507:
 30620              	.LBB4503:
 30621              	.LBI4503:
 809:src/xeq.c     **** 	setRegister(regX_idx, x);
 30622              		.loc 1 809 6 view .LVU8210
 30623              	.LBB4504:
 810:src/xeq.c     **** }
 30624              		.loc 1 810 2 view .LVU8211
 30625 054e 30A9     		add	r1, sp, #192
 30626              	.LVL2367:
 810:src/xeq.c     **** }
 30627              		.loc 1 810 2 is_stmt 0 view .LVU8212
 30628 0550 6420     		movs	r0, #100
 30629 0552 FFF7FEFF 		bl	setRegister
 30630              	.LVL2368:
 810:src/xeq.c     **** }
 30631              		.loc 1 810 2 view .LVU8213
 30632              	.LBE4504:
 30633              	.LBE4503:
 30634              	.LBE4507:
 30635              	.LBE4515:
 30636              	.LBE4544:
 30637              	.LBE4553:
 842:src/xeq.c     **** }
 30638              		.loc 1 842 2 is_stmt 1 view .LVU8214
 30639              	.LBB4554:
 30640              	.LBB4545:
 30641              	.LBB4516:
 30642              	.LBB4508:
 30643              	.LBB4505:
 30644              	.LBI4505:
 817:src/xeq.c     **** 	setRegister(regY_idx, y);
 30645              		.loc 1 817 6 view .LVU8215
 30646              	.LBB4506:
 818:src/xeq.c     **** }
 30647              		.loc 1 818 2 view .LVU8216
 30648 0556 39A9     		add	r1, sp, #228
 30649              	.LVL2369:
 818:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 777


 30650              		.loc 1 818 2 is_stmt 0 view .LVU8217
 30651 0558 6520     		movs	r0, #101
 30652 055a FFF7FEFF 		bl	setRegister
 30653              	.LVL2370:
 818:src/xeq.c     **** }
 30654              		.loc 1 818 2 view .LVU8218
 30655              	.LBE4506:
 30656              	.LBE4505:
 30657              	.LBE4508:
4569:src/xeq.c     **** 			}
 30658              		.loc 1 4569 5 is_stmt 1 view .LVU8219
 30659              	.LBB4509:
 30660              	.LBI4509:
 530:src/xeq.c     **** 	State2.wascomplex = 1;
 30661              		.loc 1 530 13 view .LVU8220
 30662              	.LBB4510:
 531:src/xeq.c     **** }
 30663              		.loc 1 531 2 view .LVU8221
 531:src/xeq.c     **** }
 30664              		.loc 1 531 20 is_stmt 0 view .LVU8222
 30665 055e 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
 30666 0560 2B4B     		ldr	r3, .L2404+8
 30667 0562 0121     		movs	r1, #1
 30668 0564 61F38712 		bfi	r2, r1, #6, #2
 30669 0568 2275     		strb	r2, [r4, #20]
 30670 056a 1A68     		ldr	r2, [r3]
 532:src/xeq.c     **** 
 30671              		.loc 1 532 1 view .LVU8223
 30672 056c 09E6     		b	.L2085
 30673              	.LVL2371:
 30674              	.L2112:
 532:src/xeq.c     **** 
 30675              		.loc 1 532 1 view .LVU8224
 30676              	.LBE4510:
 30677              	.LBE4509:
 30678              	.LBE4516:
 30679              	.LBE4545:
 30680              	.LBE4554:
5142:src/xeq.c     **** 		default:	illegal(op);
 30681              		.loc 1 5142 19 is_stmt 1 view .LVU8225
 30682              	.LBB4555:
 30683              	.LBI4499:
4549:src/xeq.c     **** 	decNumber x1, y1, x2, y2, xr, yr;
 30684              		.loc 1 4549 13 view .LVU8226
 30685              	.LBB4546:
4550:src/xeq.c     **** 	unsigned int f;
 30686              		.loc 1 4550 2 view .LVU8227
4551:src/xeq.c     **** 
 30687              		.loc 1 4551 2 view .LVU8228
4553:src/xeq.c     **** 
 30688              		.loc 1 4553 2 view .LVU8229
 30689              	.LBB4517:
 30690              	.LBI4517:
1146:src/xeq.c     **** 	process_cmdline();
 30691              		.loc 1 1146 6 view .LVU8230
 30692              	.LBE4517:
 30693              	.LBE4546:
ARM GAS  /tmp/cc0UaEmF.s 			page 778


 30694              	.LBE4555:
1147:src/xeq.c     **** 	set_lift();
 30695              		.loc 1 1147 2 view .LVU8231
 30696              	.LBB4556:
 30697              	.LBB4547:
 30698              	.LBB4528:
 30699              	.LBB4518:
 30700              	.LBI4518:
1040:src/xeq.c     **** 	decNumber a, b, x, t;
 30701              		.loc 1 1040 6 view .LVU8232
 30702              	.LBB4519:
1041:src/xeq.c     **** 
 30703              		.loc 1 1041 2 view .LVU8233
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30704              		.loc 1 1043 2 view .LVU8234
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30705              		.loc 1 1043 5 is_stmt 0 view .LVU8235
 30706 056e 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 30707 0570 002B     		cmp	r3, #0
 30708 0572 40F07381 		bne	.L2387
 30709              	.L2198:
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30710              		.loc 1 1043 5 view .LVU8236
 30711              	.LBE4519:
 30712              	.LBE4518:
 30713              	.LBE4528:
 30714              	.LBE4547:
 30715              	.LBE4556:
1148:src/xeq.c     **** }
 30716              		.loc 1 1148 2 is_stmt 1 view .LVU8237
 30717              	.LBB4557:
 30718              	.LBB4548:
 30719              	.LBB4529:
 30720              	.LBB4521:
 30721              	.LBI4521:
 748:src/xeq.c     ****     State2.state_lift = 1;
 30722              		.loc 1 748 6 view .LVU8238
 30723              	.LBB4522:
 749:src/xeq.c     **** }
 30724              		.loc 1 749 5 view .LVU8239
 749:src/xeq.c     **** }
 30725              		.loc 1 749 23 is_stmt 0 view .LVU8240
 30726 0576 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 30727              	.LBE4522:
 30728              	.LBE4521:
 30729              	.LBE4529:
4555:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 30730              		.loc 1 4555 4 view .LVU8241
 30731 0578 EDB2     		uxtb	r5, r5
 30732              	.LVL2372:
 30733              	.LBB4530:
 30734              	.LBB4525:
 30735              	.LBB4523:
 749:src/xeq.c     **** }
 30736              		.loc 1 749 23 view .LVU8242
 30737 057a 43F04003 		orr	r3, r3, #64
 30738              	.LBE4523:
ARM GAS  /tmp/cc0UaEmF.s 			page 779


 30739              	.LBE4525:
 30740              	.LBE4530:
4556:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
 30741              		.loc 1 4556 5 view .LVU8243
 30742 057e 322D     		cmp	r5, #50
 30743              	.LBB4531:
 30744              	.LBB4526:
 30745              	.LBB4524:
 749:src/xeq.c     **** }
 30746              		.loc 1 749 23 view .LVU8244
 30747 0580 E375     		strb	r3, [r4, #23]
 30748              	.LBE4524:
 30749              	.LBE4526:
 30750              	.LBE4531:
4555:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 30751              		.loc 1 4555 2 is_stmt 1 view .LVU8245
 30752              	.LVL2373:
4556:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
 30753              		.loc 1 4556 2 view .LVU8246
4556:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
 30754              		.loc 1 4556 5 is_stmt 0 view .LVU8247
 30755 0582 31D8     		bhi	.L2199
4557:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 30756              		.loc 1 4557 3 is_stmt 1 view .LVU8248
4557:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 30757              		.loc 1 4557 9 is_stmt 0 view .LVU8249
 30758 0584 254B     		ldr	r3, .L2404+20
 30759 0586 05EB4505 		add	r5, r5, r5, lsl #1
 30760              	.LVL2374:
4557:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 30761              		.loc 1 4557 9 view .LVU8250
 30762 058a 03EBC505 		add	r5, r3, r5, lsl #3
 30763 058e 6D68     		ldr	r5, [r5, #4]
4557:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 30764              		.loc 1 4557 6 view .LVU8251
 30765 0590 002D     		cmp	r5, #0
 30766 0592 00F07082 		beq	.L2200
 30767              	.LBB4532:
4558:src/xeq.c     **** 			if (dispatch_xrom(fp))
 30768              		.loc 1 4558 4 is_stmt 1 view .LVU8252
 30769              	.LVL2375:
4559:src/xeq.c     **** 				return;
 30770              		.loc 1 4559 4 view .LVU8253
4559:src/xeq.c     **** 				return;
 30771              		.loc 1 4559 8 is_stmt 0 view .LVU8254
 30772 0596 2846     		mov	r0, r5
 30773 0598 FFF7FEFF 		bl	dispatch_xrom
 30774              	.LVL2376:
4559:src/xeq.c     **** 				return;
 30775              		.loc 1 4559 7 view .LVU8255
 30776 059c 0028     		cmp	r0, #0
 30777 059e 54D1     		bne	.L2082
4562:src/xeq.c     **** 
 30778              		.loc 1 4562 5 is_stmt 1 view .LVU8256
 30779              	.LVL2377:
 30780              	.LBB4511:
 30781              	.LBI4511:
ARM GAS  /tmp/cc0UaEmF.s 			page 780


 857:src/xeq.c     **** 	getXYZ(x, y, z);
 30782              		.loc 1 857 6 view .LVU8257
 30783              	.LBB4512:
 858:src/xeq.c     **** 	getT(t);
 30784              		.loc 1 858 2 view .LVU8258
 30785 05a0 15AB     		add	r3, sp, #84
 30786              	.LVL2378:
 858:src/xeq.c     **** 	getT(t);
 30787              		.loc 1 858 2 is_stmt 0 view .LVU8259
 30788 05a2 0DF1300A 		add	r10, sp, #48
 30789              	.LVL2379:
 858:src/xeq.c     **** 	getT(t);
 30790              		.loc 1 858 2 view .LVU8260
 30791 05a6 1EAA     		add	r2, sp, #120
 30792              	.LVL2380:
 858:src/xeq.c     **** 	getT(t);
 30793              		.loc 1 858 2 view .LVU8261
 30794 05a8 1946     		mov	r1, r3
 30795 05aa 5046     		mov	r0, r10
 30796 05ac FFF7FEFF 		bl	getXYZ
 30797              	.LVL2381:
 859:src/xeq.c     **** }
 30798              		.loc 1 859 2 is_stmt 1 view .LVU8262
 30799              	.LBB4513:
 30800              	.LBI4513:
 831:src/xeq.c     **** 	getRegister(t, regT_idx);
 30801              		.loc 1 831 13 view .LVU8263
 30802              	.LBB4514:
 832:src/xeq.c     **** }
 30803              		.loc 1 832 2 view .LVU8264
 30804 05b0 27A8     		add	r0, sp, #156
 30805              	.LVL2382:
 832:src/xeq.c     **** }
 30806              		.loc 1 832 2 is_stmt 0 view .LVU8265
 30807 05b2 6721     		movs	r1, #103
 30808 05b4 FFF7FEFF 		bl	getRegister
 30809              	.LVL2383:
 832:src/xeq.c     **** }
 30810              		.loc 1 832 2 view .LVU8266
 30811              	.LBE4514:
 30812              	.LBE4513:
 30813              	.LBE4512:
 30814              	.LBE4511:
4564:src/xeq.c     **** 
 30815              		.loc 1 4564 5 is_stmt 1 view .LVU8267
 30816 05b8 15AB     		add	r3, sp, #84
 30817 05ba 1EAA     		add	r2, sp, #120
 30818 05bc 39A9     		add	r1, sp, #228
 30819 05be 30A8     		add	r0, sp, #192
 30820 05c0 CDE900A3 		strd	r10, r3, [sp]
 30821 05c4 27AB     		add	r3, sp, #156
 30822 05c6 A847     		blx	r5
 30823              	.LVL2384:
4566:src/xeq.c     **** 				lower2();
 30824              		.loc 1 4566 5 view .LVU8268
 30825 05c8 FFF7FEFF 		bl	setlastXY
 30826              	.LVL2385:
ARM GAS  /tmp/cc0UaEmF.s 			page 781


4567:src/xeq.c     **** 				setXY(&xr, &yr);
 30827              		.loc 1 4567 5 view .LVU8269
 30828 05cc FFF7FEFF 		bl	lower2
 30829              	.LVL2386:
 30830 05d0 BDE7     		b	.L2349
 30831              	.LVL2387:
 30832              	.L2377:
4567:src/xeq.c     **** 				setXY(&xr, &yr);
 30833              		.loc 1 4567 5 is_stmt 0 view .LVU8270
 30834              	.LBE4532:
 30835              	.LBE4548:
 30836              	.LBE4557:
 30837              	.LBB4558:
 30838              	.LBB4132:
5054:src/xeq.c     **** 		return;
 30839              		.loc 1 5054 3 is_stmt 1 view .LVU8271
5054:src/xeq.c     **** 		return;
 30840              		.loc 1 5054 3 view .LVU8272
 30841              	.LBB4126:
 30842              	.LBI4121:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30843              		.loc 1 537 5 view .LVU8273
 30844              	.LBB4125:
 538:src/xeq.c     **** 		Error = e;
 30845              		.loc 1 538 2 view .LVU8274
 538:src/xeq.c     **** 		Error = e;
 30846              		.loc 1 538 12 is_stmt 0 view .LVU8275
 30847 05d2 0F4B     		ldr	r3, .L2404+8
 30848 05d4 DFF848A0 		ldr	r10, .L2404+24
 30849              	.LVL2388:
 538:src/xeq.c     **** 		Error = e;
 30850              		.loc 1 538 12 view .LVU8276
 30851 05d8 1868     		ldr	r0, [r3]
 538:src/xeq.c     **** 		Error = e;
 30852              		.loc 1 538 5 view .LVU8277
 30853 05da 0028     		cmp	r0, #0
 30854 05dc 7FF4F5AD 		bne	.L2217
 30855 05e0 F1E5     		b	.L2090
 30856              	.LVL2389:
 30857              	.L2376:
 538:src/xeq.c     **** 		Error = e;
 30858              		.loc 1 538 5 view .LVU8278
 30859              	.LBE4125:
 30860              	.LBE4126:
 30861              	.LBB4127:
 30862              	.LBB4109:
 30863              	.LBB4103:
 30864 05e2 FFF7FEFF 		bl	process_cmdline.part.0
 30865              	.LVL2390:
 30866 05e6 A6E5     		b	.L2078
 30867              	.LVL2391:
 30868              	.L2199:
 538:src/xeq.c     **** 		Error = e;
 30869              		.loc 1 538 5 view .LVU8279
 30870              	.LBE4103:
 30871              	.LBE4109:
 30872              	.LBE4127:
ARM GAS  /tmp/cc0UaEmF.s 			page 782


 30873              	.LBE4132:
 30874              	.LBE4558:
 30875              	.LBB4559:
 30876              	.LBB4549:
4574:src/xeq.c     **** }
 30877              		.loc 1 4574 3 is_stmt 1 view .LVU8280
4574:src/xeq.c     **** }
 30878              		.loc 1 4574 3 view .LVU8281
 30879              	.LBB4533:
 30880              	.LBI4533:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30881              		.loc 1 537 5 view .LVU8282
 30882              	.LBB4534:
 538:src/xeq.c     **** 		Error = e;
 30883              		.loc 1 538 2 view .LVU8283
 538:src/xeq.c     **** 		Error = e;
 30884              		.loc 1 538 12 is_stmt 0 view .LVU8284
 30885 05e8 094B     		ldr	r3, .L2404+8
 30886 05ea 1A68     		ldr	r2, [r3]
 538:src/xeq.c     **** 		Error = e;
 30887              		.loc 1 538 5 view .LVU8285
 30888 05ec 002A     		cmp	r2, #0
 30889 05ee 7FF495AD 		bne	.L2096
 30890              	.LVL2392:
 30891              	.LBB4535:
 30892              	.LBI4535:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30893              		.loc 1 537 5 is_stmt 1 view .LVU8286
 30894              	.LBB4536:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 30895              		.loc 1 539 3 view .LVU8287
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 30896              		.loc 1 539 9 is_stmt 0 view .LVU8288
 30897 05f2 0322     		movs	r2, #3
 30898 05f4 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 30899              		.loc 1 540 3 is_stmt 1 view .LVU8289
 30900              	.LVL2393:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 30901              		.loc 1 540 3 is_stmt 0 view .LVU8290
 30902              	.LBE4536:
 30903              	.LBE4535:
 30904              	.LBE4534:
 30905              	.LBE4533:
4574:src/xeq.c     **** }
 30906              		.loc 1 4574 3 is_stmt 1 view .LVU8291
 30907              	.LBE4549:
 30908              	.LBE4559:
5143:src/xeq.c     **** 		}
 30909              		.loc 1 5143 12 view .LVU8292
5153:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 30910              		.loc 1 5153 2 view .LVU8293
 30911 05f6 91E5     		b	.L2096
 30912              	.LVL2394:
 30913              	.L2158:
 30914              	.LBB4560:
 30915              	.LBB4353:
ARM GAS  /tmp/cc0UaEmF.s 			page 783


4421:src/xeq.c     **** 	if (idx != OP_rCLX)
 30916              		.loc 1 4421 3 view .LVU8294
4422:src/xeq.c     **** 		set_lift();
 30917              		.loc 1 4422 2 view .LVU8295
4422:src/xeq.c     **** 		set_lift();
 30918              		.loc 1 4422 5 is_stmt 0 view .LVU8296
 30919 05f8 3F2D     		cmp	r5, #63
 30920 05fa 7FF4D9AE 		bne	.L2167
 30921              	.L2160:
 30922              	.LVL2395:
4422:src/xeq.c     **** 		set_lift();
 30923              		.loc 1 4422 5 view .LVU8297
 30924              	.LBE4353:
 30925              	.LBE4560:
5143:src/xeq.c     **** 		}
 30926              		.loc 1 5143 12 is_stmt 1 view .LVU8298
5153:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 30927              		.loc 1 5153 2 view .LVU8299
 30928 05fe 1046     		mov	r0, r2
 30929              	.L2356:
5153:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 30930              		.loc 1 5153 2 is_stmt 0 view .LVU8300
 30931 0600 DFF81CA0 		ldr	r10, .L2404+24
 30932 0604 E1E5     		b	.L2217
 30933              	.L2405:
 30934 0606 00BF     		.align	2
 30935              	.L2404:
 30936 0608 00000000 		.word	argcmds
 30937 060c 00000000 		.word	niladics
 30938 0610 00000000 		.word	Error
 30939 0614 00000000 		.word	monfuncs
 30940 0618 00000000 		.word	trifuncs
 30941 061c 00000000 		.word	dyfuncs
 30942 0620 00000000 		.word	Running
 30943              	.LVL2396:
 30944              	.L2103:
 30945              	.LBB4561:
 30946              	.LBB4094:
5009:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 30947              		.loc 1 5009 7 is_stmt 1 view .LVU8301
5009:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 30948              		.loc 1 5009 23 is_stmt 0 view .LVU8302
 30949 0624 1344     		add	r3, r3, r2
 30950 0626 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
5009:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 30951              		.loc 1 5009 10 view .LVU8303
 30952 0628 DB06     		lsls	r3, r3, #27
 30953 062a 00F1D780 		bmi	.L2388
 30954              	.L2105:
 30955              	.LBB4072:
5015:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
 30956              		.loc 1 5015 3 is_stmt 1 view .LVU8304
 30957              	.LVL2397:
5016:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
 30958              		.loc 1 5016 3 view .LVU8305
 30959              	.LBB4073:
 30960              	.LBI4073:
ARM GAS  /tmp/cc0UaEmF.s 			page 784


4273:src/xeq.c     **** {
 30961              		.loc 1 4273 24 view .LVU8306
 30962              	.LBB4074:
4275:src/xeq.c     **** 	if (xp < xrom)
 30963              		.loc 1 4275 2 view .LVU8307
4275:src/xeq.c     **** 	if (xp < xrom)
 30964              		.loc 1 4275 59 is_stmt 0 view .LVU8308
 30965 062e 089A     		ldr	r2, [sp, #32]
4276:src/xeq.c     **** 		return NULL;
 30966              		.loc 1 4276 5 view .LVU8309
 30967 0630 A74B     		ldr	r3, .L2406
4275:src/xeq.c     **** 	if (xp < xrom)
 30968              		.loc 1 4275 59 view .LVU8310
 30969 0632 22F00102 		bic	r2, r2, #1
 30970              	.LVL2398:
4276:src/xeq.c     **** 		return NULL;
 30971              		.loc 1 4276 2 is_stmt 1 view .LVU8311
4276:src/xeq.c     **** 		return NULL;
 30972              		.loc 1 4276 5 is_stmt 0 view .LVU8312
 30973 0636 9A42     		cmp	r2, r3
 30974 0638 6AD2     		bcs	.L2389
 30975              	.LVL2399:
 30976              	.L2107:
4276:src/xeq.c     **** 		return NULL;
 30977              		.loc 1 4276 5 view .LVU8313
 30978              	.LBE4074:
 30979              	.LBE4073:
5038:src/xeq.c     **** 		}
 30980              		.loc 1 5038 4 is_stmt 1 view .LVU8314
 30981 063a 0846     		mov	r0, r1
 30982 063c 089B     		ldr	r3, [sp, #32]
 30983 063e 5146     		mov	r1, r10
 30984              	.LVL2400:
5038:src/xeq.c     **** 		}
 30985              		.loc 1 5038 4 is_stmt 0 view .LVU8315
 30986 0640 9847     		blx	r3
 30987              	.LVL2401:
5040:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 30988              		.loc 1 5040 3 is_stmt 1 view .LVU8316
5040:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 30989              		.loc 1 5040 6 is_stmt 0 view .LVU8317
 30990 0642 BAF1840F 		cmp	r10, #132
 30991 0646 7FF496AD 		bne	.L2348
 30992              	.LVL2402:
 30993              	.L2082:
5040:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 30994              		.loc 1 5040 6 view .LVU8318
 30995 064a A24B     		ldr	r3, .L2406+4
 30996 064c 1A68     		ldr	r2, [r3]
 30997 064e 98E5     		b	.L2085
 30998              	.LVL2403:
 30999              	.L2094:
5040:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 31000              		.loc 1 5040 6 view .LVU8319
 31001              	.LBE4072:
 31002              	.LBB4083:
4981:src/xeq.c     **** 			if ((regval >> 32) != 0)
ARM GAS  /tmp/cc0UaEmF.s 			page 785


 31003              		.loc 1 4981 4 is_stmt 1 view .LVU8320
4981:src/xeq.c     **** 			if ((regval >> 32) != 0)
 31004              		.loc 1 4981 13 is_stmt 0 view .LVU8321
 31005 0650 0846     		mov	r0, r1
 31006 0652 39A9     		add	r1, sp, #228
 31007 0654 0992     		str	r2, [sp, #36]
 31008 0656 FFF7FEFF 		bl	get_reg_n_int_sgn
 31009              	.LVL2404:
4982:src/xeq.c     **** 				goto range;
 31010              		.loc 1 4982 16 view .LVU8322
 31011 065a 0023     		movs	r3, #0
 31012 065c 0691     		str	r1, [sp, #24]
 31013 065e 0793     		str	r3, [sp, #28]
 31014              	.LVL2405:
4982:src/xeq.c     **** 				goto range;
 31015              		.loc 1 4982 4 is_stmt 1 view .LVU8323
4982:src/xeq.c     **** 				goto range;
 31016              		.loc 1 4982 7 is_stmt 0 view .LVU8324
 31017 0660 DDE90623 		ldrd	r2, [sp, #24]
 31018 0664 1343     		orrs	r3, r2, r3
 31019 0666 16D1     		bne	.L2098
4984:src/xeq.c     **** 			if (argcmds[cmd].local && sgn) {
 31020              		.loc 1 4984 4 is_stmt 1 view .LVU8325
4985:src/xeq.c     **** 				// negative arguments address local registers or flags
 31021              		.loc 1 4985 7 is_stmt 0 view .LVU8326
 31022 0668 15F0080F 		tst	r5, #8
 31023 066c 9A4B     		ldr	r3, .L2406+8
 31024 066e 099A     		ldr	r2, [sp, #36]
4984:src/xeq.c     **** 			if (argcmds[cmd].local && sgn) {
 31025              		.loc 1 4984 8 view .LVU8327
 31026 0670 0146     		mov	r1, r0
 31027              	.LVL2406:
4985:src/xeq.c     **** 				// negative arguments address local registers or flags
 31028              		.loc 1 4985 4 is_stmt 1 view .LVU8328
4985:src/xeq.c     **** 				// negative arguments address local registers or flags
 31029              		.loc 1 4985 7 is_stmt 0 view .LVU8329
 31030 0672 02D0     		beq	.L2092
4985:src/xeq.c     **** 				// negative arguments address local registers or flags
 31031              		.loc 1 4985 27 view .LVU8330
 31032 0674 3998     		ldr	r0, [sp, #228]
 31033              	.LVL2407:
4985:src/xeq.c     **** 				// negative arguments address local registers or flags
 31034              		.loc 1 4985 27 view .LVU8331
 31035 0676 00B1     		cbz	r0, .L2092
4987:src/xeq.c     **** 			}
 31036              		.loc 1 4987 5 is_stmt 1 view .LVU8332
4987:src/xeq.c     **** 			}
 31037              		.loc 1 4987 9 is_stmt 0 view .LVU8333
 31038 0678 7031     		adds	r1, r1, #112
 31039              	.LVL2408:
 31040              	.L2092:
4987:src/xeq.c     **** 			}
 31041              		.loc 1 4987 9 view .LVU8334
 31042              	.LBE4083:
4995:src/xeq.c     **** 		// Range checking for registers against variable boundary
 31043              		.loc 1 4995 2 is_stmt 1 view .LVU8335
4995:src/xeq.c     **** 		// Range checking for registers against variable boundary
ARM GAS  /tmp/cc0UaEmF.s 			page 786


 31044              		.loc 1 4995 18 is_stmt 0 view .LVU8336
 31045 067a 9818     		adds	r0, r3, r2
 31046 067c 4079     		ldrb	r0, [r0, #5]	@ zero_extendqisi2
4995:src/xeq.c     **** 		// Range checking for registers against variable boundary
 31047              		.loc 1 4995 5 view .LVU8337
 31048 067e 8507     		lsls	r5, r0, #30
 31049 0680 3CD5     		bpl	.L2100
4997:src/xeq.c     **** 	}
 31050              		.loc 1 4997 9 view .LVU8338
 31051 0682 5046     		mov	r0, r10
 31052 0684 CDE90512 		strd	r1, r2, [sp, #20]
 31053              	.LVL2409:
4997:src/xeq.c     **** 	}
 31054              		.loc 1 4997 9 view .LVU8339
 31055 0688 FFF7FEFF 		bl	get_reg_limit
 31056              	.LVL2410:
4997:src/xeq.c     **** 	}
 31057              		.loc 1 4997 9 view .LVU8340
 31058 068c 0599     		ldr	r1, [sp, #20]
 31059 068e 924B     		ldr	r3, .L2406+8
 31060 0690 069A     		ldr	r2, [sp, #24]
 31061              	.LVL2411:
 31062              	.L2101:
5005:src/xeq.c     **** 		// Argument is too large
 31063              		.loc 1 5005 2 is_stmt 1 view .LVU8341
5005:src/xeq.c     **** 		// Argument is too large
 31064              		.loc 1 5005 5 is_stmt 0 view .LVU8342
 31065 0692 8142     		cmp	r1, r0
 31066 0694 C6D9     		bls	.L2103
 31067              	.LVL2412:
 31068              	.L2098:
5007:src/xeq.c     **** 	}
 31069              		.loc 1 5007 9 is_stmt 1 view .LVU8343
 31070              	.LBB4084:
 31071              	.LBI4084:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31072              		.loc 1 537 5 view .LVU8344
 31073              	.LBB4085:
 538:src/xeq.c     **** 		Error = e;
 31074              		.loc 1 538 2 view .LVU8345
 538:src/xeq.c     **** 		Error = e;
 31075              		.loc 1 538 12 is_stmt 0 view .LVU8346
 31076 0696 8F4B     		ldr	r3, .L2406+4
 31077 0698 1868     		ldr	r0, [r3]
 538:src/xeq.c     **** 		Error = e;
 31078              		.loc 1 538 5 view .LVU8347
 31079 069a 0028     		cmp	r0, #0
 31080 069c B0D1     		bne	.L2356
 31081              	.LVL2413:
 31082              	.LBB4086:
 31083              	.LBI4086:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31084              		.loc 1 537 5 is_stmt 1 view .LVU8348
 31085              	.LBB4087:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 31086              		.loc 1 539 3 view .LVU8349
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
ARM GAS  /tmp/cc0UaEmF.s 			page 787


 31087              		.loc 1 539 9 is_stmt 0 view .LVU8350
 31088 069e 0820     		movs	r0, #8
 31089 06a0 DFF858A2 		ldr	r10, .L2406+44
 31090              	.LVL2414:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 31091              		.loc 1 539 9 view .LVU8351
 31092 06a4 1860     		str	r0, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 31093              		.loc 1 540 3 is_stmt 1 view .LVU8352
 31094 06a6 90E5     		b	.L2217
 31095              	.LVL2415:
 31096              	.L2380:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 31097              		.loc 1 540 3 is_stmt 0 view .LVU8353
 31098 06a8 0393     		str	r3, [sp, #12]
 31099              	.LVL2416:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 31100              		.loc 1 540 3 view .LVU8354
 31101              	.LBE4087:
 31102              	.LBE4086:
 31103              	.LBE4085:
 31104              	.LBE4084:
 31105              	.LBE4094:
 31106              	.LBE4561:
 31107              	.LBB4562:
 31108              	.LBB4284:
 31109              	.LBB4276:
 31110 06aa FFF7FEFF 		bl	process_cmdline.part.0
 31111              	.LVL2417:
 31112 06ae 039B     		ldr	r3, [sp, #12]
 31113 06b0 AFE5     		b	.L2204
 31114              	.L2381:
 31115              	.LBE4276:
 31116              	.LBE4284:
 31117              	.LBE4562:
5172:src/xeq.c     **** 					// Restore the global return stack
 31118              		.loc 1 5172 5 is_stmt 1 view .LVU8355
5172:src/xeq.c     **** 					// Restore the global return stack
 31119              		.loc 1 5172 9 is_stmt 0 view .LVU8356
 31120 06b2 8A4D     		ldr	r5, .L2406+12
5172:src/xeq.c     **** 					// Restore the global return stack
 31121              		.loc 1 5172 8 view .LVU8357
 31122 06b4 95F90110 		ldrsb	r1, [r5, #1]
5172:src/xeq.c     **** 					// Restore the global return stack
 31123              		.loc 1 5172 9 view .LVU8358
 31124 06b8 6A78     		ldrb	r2, [r5, #1]	@ zero_extendqisi2
5172:src/xeq.c     **** 					// Restore the global return stack
 31125              		.loc 1 5172 8 view .LVU8359
 31126 06ba 8142     		cmp	r1, r0
 31127 06bc BFF609AE 		bge	.L2207
5174:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 31128              		.loc 1 5174 6 is_stmt 1 view .LVU8360
5174:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 31129              		.loc 1 5174 13 is_stmt 0 view .LVU8361
 31130 06c0 8749     		ldr	r1, .L2406+16
5175:src/xeq.c     **** 					// Restore private stack to normal stack
 31131              		.loc 1 5175 6 view .LVU8362
ARM GAS  /tmp/cc0UaEmF.s 			page 788


 31132 06c2 D7F800C0 		ldr	ip, [r7]
5174:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 31133              		.loc 1 5174 13 view .LVU8363
 31134 06c6 AE68     		ldr	r6, [r5, #8]
 31135 06c8 0E60     		str	r6, [r1]
5175:src/xeq.c     **** 					// Restore private stack to normal stack
 31136              		.loc 1 5175 6 is_stmt 1 view .LVU8364
5177:src/xeq.c     **** 						// Need space for double precision stack
 31137              		.loc 1 5177 9 is_stmt 0 view .LVU8365
 31138 06ca 12F00808 		ands	r8, r2, #8
5175:src/xeq.c     **** 					// Restore private stack to normal stack
 31139              		.loc 1 5175 16 view .LVU8366
 31140 06ce A989     		ldrh	r1, [r5, #12]
 31141 06d0 ACF8E217 		strh	r1, [ip, #2018]	@ movhi
5177:src/xeq.c     **** 						// Need space for double precision stack
 31142              		.loc 1 5177 6 is_stmt 1 view .LVU8367
5177:src/xeq.c     **** 						// Need space for double precision stack
 31143              		.loc 1 5177 9 is_stmt 0 view .LVU8368
 31144 06d4 00F0D881 		beq	.L2208
5181:src/xeq.c     **** 					if (Error == ERR_NONE) {
 31145              		.loc 1 5181 6 is_stmt 1 view .LVU8369
5181:src/xeq.c     **** 					if (Error == ERR_NONE) {
 31146              		.loc 1 5181 20 is_stmt 0 view .LVU8370
 31147 06d8 60F3C712 		bfi	r2, r0, #7, #1
 31148 06dc 6A70     		strb	r2, [r5, #1]
5182:src/xeq.c     **** 						UState.mode_double = 1;
 31149              		.loc 1 5182 6 is_stmt 1 view .LVU8371
 31150              	.L2209:
5183:src/xeq.c     **** 						xcopy(get_reg_n(regX_idx), XromStack, sizeof(XromStack));
 31151              		.loc 1 5183 7 view .LVU8372
5183:src/xeq.c     **** 						xcopy(get_reg_n(regX_idx), XromStack, sizeof(XromStack));
 31152              		.loc 1 5183 26 is_stmt 0 view .LVU8373
 31153 06de 3A68     		ldr	r2, [r7]
 31154 06e0 92F8E937 		ldrb	r3, [r2, #2025]	@ zero_extendqisi2
 31155 06e4 43F04003 		orr	r3, r3, #64
 31156 06e8 82F8E937 		strb	r3, [r2, #2025]
5184:src/xeq.c     **** 					}
 31157              		.loc 1 5184 7 is_stmt 1 view .LVU8374
5184:src/xeq.c     **** 					}
 31158              		.loc 1 5184 13 is_stmt 0 view .LVU8375
 31159 06ec 6420     		movs	r0, #100
 31160 06ee FFF7FEFF 		bl	get_reg_n
 31161              	.LVL2418:
5184:src/xeq.c     **** 					}
 31162              		.loc 1 5184 7 view .LVU8376
 31163 06f2 7C49     		ldr	r1, .L2406+20
 31164 06f4 C022     		movs	r2, #192
 31165 06f6 FFF7FEFF 		bl	xcopy
 31166              	.LVL2419:
 31167 06fa EAE5     		b	.L2207
 31168              	.LVL2420:
 31169              	.L2100:
 31170              	.LBB4563:
 31171              	.LBB4095:
4999:src/xeq.c     **** 		if (LocalRegs == 0)
 31172              		.loc 1 4999 7 is_stmt 1 view .LVU8377
4999:src/xeq.c     **** 		if (LocalRegs == 0)
ARM GAS  /tmp/cc0UaEmF.s 			page 789


 31173              		.loc 1 4999 10 is_stmt 0 view .LVU8378
 31174 06fc 4006     		lsls	r0, r0, #25
 31175 06fe 7FD5     		bpl	.L2390
5000:src/xeq.c     **** 			lim = NUMFLG - 1;
 31176              		.loc 1 5000 3 is_stmt 1 view .LVU8379
5000:src/xeq.c     **** 			lim = NUMFLG - 1;
 31177              		.loc 1 5000 7 is_stmt 0 view .LVU8380
 31178 0700 3868     		ldr	r0, [r7]
5000:src/xeq.c     **** 			lim = NUMFLG - 1;
 31179              		.loc 1 5000 6 view .LVU8381
 31180 0702 B0F9DE07 		ldrsh	r0, [r0, #2014]
5003:src/xeq.c     **** 	}
 31181              		.loc 1 5003 8 view .LVU8382
 31182 0706 0028     		cmp	r0, #0
 31183 0708 0CBF     		ite	eq
 31184 070a 6F20     		moveq	r0, #111
 31185 070c 7F20     		movne	r0, #127
 31186 070e C0E7     		b	.L2101
 31187              	.LVL2421:
 31188              	.L2389:
 31189              	.LBB4088:
 31190              	.LBB4076:
 31191              	.LBB4075:
4280:src/xeq.c     **** 		return NULL;
 31192              		.loc 1 4280 2 is_stmt 1 view .LVU8383
4280:src/xeq.c     **** 		return NULL;
 31193              		.loc 1 4280 17 is_stmt 0 view .LVU8384
 31194 0710 7548     		ldr	r0, .L2406+24
 31195              	.LVL2422:
4280:src/xeq.c     **** 		return NULL;
 31196              		.loc 1 4280 17 view .LVU8385
 31197 0712 0088     		ldrh	r0, [r0]
 31198 0714 03EB4003 		add	r3, r3, r0, lsl #1
4280:src/xeq.c     **** 		return NULL;
 31199              		.loc 1 4280 5 view .LVU8386
 31200 0718 9A42     		cmp	r2, r3
 31201 071a 8ED2     		bcs	.L2107
 31202              	.LVL2423:
4280:src/xeq.c     **** 		return NULL;
 31203              		.loc 1 4280 5 view .LVU8387
 31204              	.LBE4075:
 31205              	.LBE4076:
5016:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
 31206              		.loc 1 5016 6 view .LVU8388
 31207 071c 002A     		cmp	r2, #0
 31208 071e 8CD0     		beq	.L2107
5028:src/xeq.c     **** 			if (XromUserPc == 0)
 31209              		.loc 1 5028 4 is_stmt 1 view .LVU8389
 31210              	.LVL2424:
 31211              	.LBB4077:
 31212              	.LBI4077:
2008:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 31213              		.loc 1 2008 14 view .LVU8390
 31214              	.LBB4078:
2009:src/xeq.c     **** }
 31215              		.loc 1 2009 2 view .LVU8391
 31216              	.LBE4078:
ARM GAS  /tmp/cc0UaEmF.s 			page 790


 31217              	.LBE4077:
5028:src/xeq.c     **** 			if (XromUserPc == 0)
 31218              		.loc 1 5028 33 is_stmt 0 view .LVU8392
 31219 0720 3B68     		ldr	r3, [r7]
 31220              	.LBB4080:
 31221              	.LBB4079:
2009:src/xeq.c     **** }
 31222              		.loc 1 2009 9 view .LVU8393
 31223 0722 41F4C441 		orr	r1, r1, #25088
 31224              	.LVL2425:
2009:src/xeq.c     **** }
 31225              		.loc 1 2009 9 view .LVU8394
 31226 0726 B3F8E007 		ldrh	r0, [r3, #2016]
 31227 072a 0322     		movs	r2, #3
 31228 072c FFF7FEFF 		bl	find_opcode_from
 31229              	.LVL2426:
2009:src/xeq.c     **** }
 31230              		.loc 1 2009 9 view .LVU8395
 31231              	.LBE4079:
 31232              	.LBE4080:
5028:src/xeq.c     **** 			if (XromUserPc == 0)
 31233              		.loc 1 5028 15 view .LVU8396
 31234 0730 6E4B     		ldr	r3, .L2406+28
 31235              	.LVL2427:
5028:src/xeq.c     **** 			if (XromUserPc == 0)
 31236              		.loc 1 5028 15 view .LVU8397
 31237 0732 1860     		str	r0, [r3]
5029:src/xeq.c     **** 				return;
 31238              		.loc 1 5029 4 is_stmt 1 view .LVU8398
5029:src/xeq.c     **** 				return;
 31239              		.loc 1 5029 7 is_stmt 0 view .LVU8399
 31240 0734 0028     		cmp	r0, #0
 31241 0736 88D0     		beq	.L2082
5031:src/xeq.c     **** 				clrretstk();
 31242              		.loc 1 5031 4 is_stmt 1 view .LVU8400
5031:src/xeq.c     **** 				clrretstk();
 31243              		.loc 1 5031 8 is_stmt 0 view .LVU8401
 31244 0738 DFF8C0A1 		ldr	r10, .L2406+44
 31245              	.LVL2428:
5031:src/xeq.c     **** 				clrretstk();
 31246              		.loc 1 5031 7 view .LVU8402
 31247 073c DAF80030 		ldr	r3, [r10]
 31248 0740 23B9     		cbnz	r3, .L2109
5032:src/xeq.c     **** #endif
 31249              		.loc 1 5032 5 is_stmt 1 view .LVU8403
 31250              	.LBB4081:
 31251              	.LBI4081:
1409:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 31252              		.loc 1 1409 6 view .LVU8404
 31253              	.LBB4082:
1410:src/xeq.c     **** }
 31254              		.loc 1 1410 2 view .LVU8405
1410:src/xeq.c     **** }
 31255              		.loc 1 1410 14 is_stmt 0 view .LVU8406
 31256 0742 3A68     		ldr	r2, [r7]
1410:src/xeq.c     **** }
 31257              		.loc 1 1410 24 view .LVU8407
ARM GAS  /tmp/cc0UaEmF.s 			page 791


 31258 0744 A2F8DE37 		strh	r3, [r2, #2014]	@ movhi
1410:src/xeq.c     **** }
 31259              		.loc 1 1410 12 view .LVU8408
 31260 0748 A2F8E237 		strh	r3, [r2, #2018]	@ movhi
 31261              	.L2109:
 31262              	.LBE4082:
 31263              	.LBE4081:
5034:src/xeq.c     **** 			return;
 31264              		.loc 1 5034 4 is_stmt 1 view .LVU8409
 31265 074c 614B     		ldr	r3, .L2406+4
 31266 074e 0898     		ldr	r0, [sp, #32]
 31267 0750 0593     		str	r3, [sp, #20]
 31268 0752 FFF7FEFF 		bl	dispatch_xrom
 31269              	.LVL2429:
5035:src/xeq.c     **** 		}
 31270              		.loc 1 5035 4 view .LVU8410
 31271 0756 059B     		ldr	r3, [sp, #20]
 31272 0758 1A68     		ldr	r2, [r3]
 31273 075a 12E5     		b	.L2085
 31274              	.LVL2430:
 31275              	.L2093:
5035:src/xeq.c     **** 		}
 31276              		.loc 1 5035 4 is_stmt 0 view .LVU8411
 31277              	.LBE4088:
4992:src/xeq.c     **** 		}
 31278              		.loc 1 4992 4 is_stmt 1 view .LVU8412
4992:src/xeq.c     **** 		}
 31279              		.loc 1 4992 8 is_stmt 0 view .LVU8413
 31280 075c 41F08001 		orr	r1, r1, #128
 31281              	.LVL2431:
4992:src/xeq.c     **** 		}
 31282              		.loc 1 4992 8 view .LVU8414
 31283 0760 8BE7     		b	.L2092
 31284              	.LVL2432:
 31285              	.L2379:
4992:src/xeq.c     **** 		}
 31286              		.loc 1 4992 8 view .LVU8415
 31287              	.LBE4095:
 31288              	.LBE4563:
 31289              	.LBB4564:
 31290              	.LBB4260:
4513:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
 31291              		.loc 1 4513 3 is_stmt 1 view .LVU8416
4513:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
 31292              		.loc 1 4513 7 is_stmt 0 view .LVU8417
 31293 0762 3B68     		ldr	r3, [r7]
 31294 0764 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4513:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
 31295              		.loc 1 4513 6 view .LVU8418
 31296 0768 DA07     		lsls	r2, r3, #31
 31297 076a 40F1E481 		bpl	.L2179
4514:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 31298              		.loc 1 4514 4 is_stmt 1 view .LVU8419
4514:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 31299              		.loc 1 4514 10 is_stmt 0 view .LVU8420
 31300 076e 604B     		ldr	r3, .L2406+32
 31301 0770 05EB4505 		add	r5, r5, r5, lsl #1
ARM GAS  /tmp/cc0UaEmF.s 			page 792


 31302              	.LVL2433:
4514:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 31303              		.loc 1 4514 10 view .LVU8421
 31304 0774 03EBC505 		add	r5, r3, r5, lsl #3
 31305 0778 AD68     		ldr	r5, [r5, #8]
4514:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 31306              		.loc 1 4514 7 view .LVU8422
 31307 077a 002D     		cmp	r5, #0
 31308 077c 00F07081 		beq	.L2190
 31309              	.LBB4230:
4515:src/xeq.c     **** 				if (dispatch_xrom(fp))
 31310              		.loc 1 4515 5 is_stmt 1 view .LVU8423
 31311              	.LVL2434:
4516:src/xeq.c     **** 					return;
 31312              		.loc 1 4516 5 view .LVU8424
4516:src/xeq.c     **** 					return;
 31313              		.loc 1 4516 9 is_stmt 0 view .LVU8425
 31314 0780 2846     		mov	r0, r5
 31315 0782 FFF7FEFF 		bl	dispatch_xrom
 31316              	.LVL2435:
4516:src/xeq.c     **** 					return;
 31317              		.loc 1 4516 8 view .LVU8426
 31318 0786 0028     		cmp	r0, #0
 31319 0788 7FF45FAF 		bne	.L2082
 31320              	.LBB4231:
4519:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
 31321              		.loc 1 4519 6 is_stmt 1 view .LVU8427
 31322              	.LBB4232:
 31323              	.LBI4232:
1256:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 31324              		.loc 1 1256 15 view .LVU8428
 31325              	.LBB4233:
1257:src/xeq.c     **** }
 31326              		.loc 1 1257 2 view .LVU8429
1257:src/xeq.c     **** }
 31327              		.loc 1 1257 9 is_stmt 0 view .LVU8430
 31328 078c 6420     		movs	r0, #100
 31329 078e FFF7FEFF 		bl	get_reg_n_int
 31330              	.LVL2436:
 31331 0792 0890     		str	r0, [sp, #32]
 31332              	.LBE4233:
 31333              	.LBE4232:
4520:src/xeq.c     **** 					x = fp(y, x);
 31334              		.loc 1 4520 24 view .LVU8431
 31335 0794 6520     		movs	r0, #101
 31336              	.LBB4235:
 31337              	.LBB4234:
1257:src/xeq.c     **** }
 31338              		.loc 1 1257 9 view .LVU8432
 31339 0796 0591     		str	r1, [sp, #20]
 31340              	.LVL2437:
1257:src/xeq.c     **** }
 31341              		.loc 1 1257 9 view .LVU8433
 31342              	.LBE4234:
 31343              	.LBE4235:
4520:src/xeq.c     **** 					x = fp(y, x);
 31344              		.loc 1 4520 6 is_stmt 1 view .LVU8434
ARM GAS  /tmp/cc0UaEmF.s 			page 793


4520:src/xeq.c     **** 					x = fp(y, x);
 31345              		.loc 1 4520 24 is_stmt 0 view .LVU8435
 31346 0798 FFF7FEFF 		bl	get_reg_n_int
 31347              	.LVL2438:
4521:src/xeq.c     **** 					setlastX();
 31348              		.loc 1 4521 6 is_stmt 1 view .LVU8436
4521:src/xeq.c     **** 					setlastX();
 31349              		.loc 1 4521 10 is_stmt 0 view .LVU8437
 31350 079c 059B     		ldr	r3, [sp, #20]
 31351 079e 089A     		ldr	r2, [sp, #32]
 31352 07a0 A847     		blx	r5
 31353              	.LVL2439:
4521:src/xeq.c     **** 					setlastX();
 31354              		.loc 1 4521 10 view .LVU8438
 31355 07a2 4C4B     		ldr	r3, .L2406+4
 31356 07a4 0593     		str	r3, [sp, #20]
 31357              	.LVL2440:
4521:src/xeq.c     **** 					setlastX();
 31358              		.loc 1 4521 10 view .LVU8439
 31359 07a6 0546     		mov	r5, r0
 31360              	.LVL2441:
4521:src/xeq.c     **** 					setlastX();
 31361              		.loc 1 4521 10 view .LVU8440
 31362 07a8 8A46     		mov	r10, r1
 31363              	.LVL2442:
4522:src/xeq.c     **** 					lower();
 31364              		.loc 1 4522 6 is_stmt 1 view .LVU8441
 31365              	.LBB4236:
 31366              	.LBI4236:
 773:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 31367              		.loc 1 773 6 view .LVU8442
 31368              	.LBB4237:
 774:src/xeq.c     **** }
 31369              		.loc 1 774 2 view .LVU8443
 31370 07aa 6C20     		movs	r0, #108
 31371              	.LVL2443:
 774:src/xeq.c     **** }
 31372              		.loc 1 774 2 is_stmt 0 view .LVU8444
 31373 07ac 6421     		movs	r1, #100
 31374              	.LVL2444:
 774:src/xeq.c     **** }
 31375              		.loc 1 774 2 view .LVU8445
 31376 07ae FFF7FEFF 		bl	copyreg_n
 31377              	.LVL2445:
 31378              	.LBE4237:
 31379              	.LBE4236:
4523:src/xeq.c     **** 					setX_int(x);
 31380              		.loc 1 4523 6 is_stmt 1 view .LVU8446
 31381              	.L2350:
4523:src/xeq.c     **** 					setX_int(x);
 31382              		.loc 1 4523 6 is_stmt 0 view .LVU8447
 31383              	.LBE4231:
 31384              	.LBE4230:
 31385              	.LBE4260:
 31386              	.LBE4564:
 31387              	.LBB4565:
 31388              	.LBB4447:
ARM GAS  /tmp/cc0UaEmF.s 			page 794


 31389              	.LBB4429:
 31390              	.LBB4428:
4599:src/xeq.c     **** 					setX_int(x);
 31391              		.loc 1 4599 6 is_stmt 1 view .LVU8448
 31392 07b2 FFF7FEFF 		bl	lower
 31393              	.LVL2446:
 31394              	.L2352:
4600:src/xeq.c     **** 				}
 31395              		.loc 1 4600 6 view .LVU8449
 31396 07b6 2846     		mov	r0, r5
 31397 07b8 5146     		mov	r1, r10
 31398 07ba FFF7FEFF 		bl	setX_int
 31399              	.LVL2447:
 31400 07be 059B     		ldr	r3, [sp, #20]
 31401 07c0 1A68     		ldr	r2, [r3]
 31402              	.LBE4428:
 31403              	.LBE4429:
 31404 07c2 DEE4     		b	.L2085
 31405              	.LVL2448:
 31406              	.L2156:
4600:src/xeq.c     **** 				}
 31407              		.loc 1 4600 6 is_stmt 0 view .LVU8450
 31408              	.LBE4447:
 31409              	.LBE4565:
 31410              	.LBB4566:
 31411              	.LBB4354:
4421:src/xeq.c     **** 	if (idx != OP_rCLX)
 31412              		.loc 1 4421 3 is_stmt 1 view .LVU8451
4421:src/xeq.c     **** 	if (idx != OP_rCLX)
 31413              		.loc 1 4421 3 view .LVU8452
 31414              	.LBB4324:
 31415              	.LBI4324:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31416              		.loc 1 537 5 view .LVU8453
 31417              	.LBB4325:
 538:src/xeq.c     **** 		Error = e;
 31418              		.loc 1 538 2 view .LVU8454
 538:src/xeq.c     **** 		Error = e;
 31419              		.loc 1 538 12 is_stmt 0 view .LVU8455
 31420 07c4 434B     		ldr	r3, .L2406+4
 31421 07c6 1A68     		ldr	r2, [r3]
 538:src/xeq.c     **** 		Error = e;
 31422              		.loc 1 538 5 view .LVU8456
 31423 07c8 002A     		cmp	r2, #0
 31424 07ca 7FF4F1AD 		bne	.L2167
 31425              	.LVL2449:
 31426              	.LBB4326:
 31427              	.LBI4326:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31428              		.loc 1 537 5 is_stmt 1 view .LVU8457
 31429              	.LBB4327:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 31430              		.loc 1 539 3 view .LVU8458
 31431              	.LBE4327:
 31432              	.LBE4326:
 31433              	.LBE4325:
 31434              	.LBE4324:
ARM GAS  /tmp/cc0UaEmF.s 			page 795


 31435              	.LBB4334:
 31436              	.LBB4320:
 749:src/xeq.c     **** }
 31437              		.loc 1 749 23 is_stmt 0 view .LVU8459
 31438 07ce E17D     		ldrb	r1, [r4, #23]	@ zero_extendqisi2
 31439              	.LBE4320:
 31440              	.LBE4334:
 31441              	.LBB4335:
 31442              	.LBB4332:
 31443              	.LBB4330:
 31444              	.LBB4328:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 31445              		.loc 1 539 9 view .LVU8460
 31446 07d0 0322     		movs	r2, #3
 31447              	.LBE4328:
 31448              	.LBE4330:
 31449              	.LBE4332:
 31450              	.LBE4335:
 31451              	.LBB4336:
 31452              	.LBB4321:
 749:src/xeq.c     **** }
 31453              		.loc 1 749 23 view .LVU8461
 31454 07d2 41F04001 		orr	r1, r1, #64
 31455 07d6 E175     		strb	r1, [r4, #23]
 31456              	.LBE4321:
 31457              	.LBE4336:
 31458              	.LBB4337:
 31459              	.LBB4333:
 31460              	.LBB4331:
 31461              	.LBB4329:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 31462              		.loc 1 539 9 view .LVU8462
 31463 07d8 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 31464              		.loc 1 540 3 is_stmt 1 view .LVU8463
 31465              	.LVL2450:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 31466              		.loc 1 540 3 is_stmt 0 view .LVU8464
 31467              	.LBE4329:
 31468              	.LBE4331:
 31469              	.LBE4333:
 31470              	.LBE4337:
4423:src/xeq.c     **** }
 31471              		.loc 1 4423 3 is_stmt 1 view .LVU8465
 31472              	.LBB4338:
 748:src/xeq.c     ****     State2.state_lift = 1;
 31473              		.loc 1 748 6 view .LVU8466
 31474              	.LBB4322:
 749:src/xeq.c     **** }
 31475              		.loc 1 749 5 view .LVU8467
 749:src/xeq.c     **** }
 31476              		.loc 1 749 5 is_stmt 0 view .LVU8468
 31477              	.LBE4322:
 31478              	.LBE4338:
 31479              	.LBE4354:
 31480              	.LBE4566:
5143:src/xeq.c     **** 		}
ARM GAS  /tmp/cc0UaEmF.s 			page 796


 31481              		.loc 1 5143 12 is_stmt 1 view .LVU8469
5153:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 31482              		.loc 1 5153 2 view .LVU8470
 31483 07da 9FE4     		b	.L2096
 31484              	.LVL2451:
 31485              	.L2388:
 31486              	.LBB4567:
 31487              	.LBB4096:
5009:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 31488              		.loc 1 5009 30 is_stmt 0 view .LVU8471
 31489 07dc A1F16303 		sub	r3, r1, #99
 31490 07e0 0C2B     		cmp	r3, #12
 31491 07e2 3FF624AF 		bhi	.L2105
5009:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 31492              		.loc 1 5009 69 view .LVU8472
 31493 07e6 CD07     		lsls	r5, r1, #31
 31494 07e8 7FF521AF 		bpl	.L2105
5011:src/xeq.c     **** 	}
 31495              		.loc 1 5011 3 is_stmt 1 view .LVU8473
 31496              	.LVL2452:
 31497              	.LBB4089:
 31498              	.LBI4089:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31499              		.loc 1 537 5 view .LVU8474
 31500              	.LBB4090:
 538:src/xeq.c     **** 		Error = e;
 31501              		.loc 1 538 2 view .LVU8475
 538:src/xeq.c     **** 		Error = e;
 31502              		.loc 1 538 12 is_stmt 0 view .LVU8476
 31503 07ec 394B     		ldr	r3, .L2406+4
 31504 07ee 1868     		ldr	r0, [r3]
 31505              	.LVL2453:
 538:src/xeq.c     **** 		Error = e;
 31506              		.loc 1 538 5 view .LVU8477
 31507 07f0 0028     		cmp	r0, #0
 31508 07f2 7FF405AF 		bne	.L2356
 31509              	.LVL2454:
 31510              	.LBB4091:
 31511              	.LBI4091:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31512              		.loc 1 537 5 is_stmt 1 view .LVU8478
 31513              	.LBB4092:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 31514              		.loc 1 539 3 view .LVU8479
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 31515              		.loc 1 539 9 is_stmt 0 view .LVU8480
 31516 07f6 0720     		movs	r0, #7
 31517 07f8 DFF800A1 		ldr	r10, .L2406+44
 31518              	.LVL2455:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 31519              		.loc 1 539 9 view .LVU8481
 31520 07fc 1860     		str	r0, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 31521              		.loc 1 540 3 is_stmt 1 view .LVU8482
 31522 07fe E4E4     		b	.L2217
 31523              	.LVL2456:
 31524              	.L2390:
ARM GAS  /tmp/cc0UaEmF.s 			page 797


 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 31525              		.loc 1 540 3 is_stmt 0 view .LVU8483
 31526              	.LBE4092:
 31527              	.LBE4091:
 31528              	.LBE4090:
 31529              	.LBE4089:
4955:src/xeq.c     **** 
 31530              		.loc 1 4955 15 view .LVU8484
 31531 0800 0598     		ldr	r0, [sp, #20]
 31532 0802 46E7     		b	.L2101
 31533              	.LVL2457:
 31534              	.L2378:
4955:src/xeq.c     **** 
 31535              		.loc 1 4955 15 view .LVU8485
 31536              	.LBE4096:
 31537              	.LBE4567:
 31538              	.LBB4568:
 31539              	.LBB4133:
 31540              	.LBB4128:
5062:src/xeq.c     **** 			if (XromUserPc != 0) {
 31541              		.loc 1 5062 4 is_stmt 1 view .LVU8486
5062:src/xeq.c     **** 			if (XromUserPc != 0) {
 31542              		.loc 1 5062 17 is_stmt 0 view .LVU8487
 31543 0804 2846     		mov	r0, r5
 31544 0806 0121     		movs	r1, #1
 31545 0808 0592     		str	r2, [sp, #20]
 31546 080a FFF7FEFF 		bl	findmultilbl
 31547              	.LVL2458:
5062:src/xeq.c     **** 			if (XromUserPc != 0) {
 31548              		.loc 1 5062 15 view .LVU8488
 31549 080e 374B     		ldr	r3, .L2406+28
5063:src/xeq.c     **** 				if (! Running)
 31550              		.loc 1 5063 7 view .LVU8489
 31551 0810 059A     		ldr	r2, [sp, #20]
5062:src/xeq.c     **** 			if (XromUserPc != 0) {
 31552              		.loc 1 5062 15 view .LVU8490
 31553 0812 1860     		str	r0, [r3]
5063:src/xeq.c     **** 				if (! Running)
 31554              		.loc 1 5063 4 is_stmt 1 view .LVU8491
5063:src/xeq.c     **** 				if (! Running)
 31555              		.loc 1 5063 7 is_stmt 0 view .LVU8492
 31556 0814 0028     		cmp	r0, #0
 31557 0816 3FF418AF 		beq	.L2082
 31558              	.LVL2459:
5064:src/xeq.c     **** 					clrretstk();
 31559              		.loc 1 5064 5 is_stmt 1 view .LVU8493
5064:src/xeq.c     **** 					clrretstk();
 31560              		.loc 1 5064 9 is_stmt 0 view .LVU8494
 31561 081a DFF8E0A0 		ldr	r10, .L2406+44
 31562              	.LVL2460:
5064:src/xeq.c     **** 					clrretstk();
 31563              		.loc 1 5064 8 view .LVU8495
 31564 081e DAF80030 		ldr	r3, [r10]
 31565 0822 23B9     		cbnz	r3, .L2086
5065:src/xeq.c     **** 				dispatch_xrom(fp);
 31566              		.loc 1 5065 6 is_stmt 1 view .LVU8496
 31567              	.LBB4119:
ARM GAS  /tmp/cc0UaEmF.s 			page 798


 31568              	.LBI4119:
1409:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 31569              		.loc 1 1409 6 view .LVU8497
 31570              	.LBB4120:
1410:src/xeq.c     **** }
 31571              		.loc 1 1410 2 view .LVU8498
1410:src/xeq.c     **** }
 31572              		.loc 1 1410 14 is_stmt 0 view .LVU8499
 31573 0824 3968     		ldr	r1, [r7]
1410:src/xeq.c     **** }
 31574              		.loc 1 1410 24 view .LVU8500
 31575 0826 A1F8DE37 		strh	r3, [r1, #2014]	@ movhi
1410:src/xeq.c     **** }
 31576              		.loc 1 1410 12 view .LVU8501
 31577 082a A1F8E237 		strh	r3, [r1, #2018]	@ movhi
 31578              	.L2086:
 31579              	.LBE4120:
 31580              	.LBE4119:
5066:src/xeq.c     **** 			}
 31581              		.loc 1 5066 5 is_stmt 1 view .LVU8502
 31582 082e 294B     		ldr	r3, .L2406+4
 31583 0830 0593     		str	r3, [sp, #20]
 31584              	.LVL2461:
5066:src/xeq.c     **** 			}
 31585              		.loc 1 5066 5 is_stmt 0 view .LVU8503
 31586 0832 1046     		mov	r0, r2
 31587 0834 FFF7FEFF 		bl	dispatch_xrom
 31588              	.LVL2462:
 31589 0838 059B     		ldr	r3, [sp, #20]
 31590 083a 1A68     		ldr	r2, [r3]
 31591 083c A1E4     		b	.L2085
 31592              	.LVL2463:
 31593              	.L2128:
5066:src/xeq.c     **** 			}
 31594              		.loc 1 5066 5 view .LVU8504
 31595              	.LBE4128:
 31596              	.LBE4133:
 31597              	.LBE4568:
 31598              	.LBB4569:
 31599              	.LBB4206:
3716:src/xeq.c     **** 		break;
 31600              		.loc 1 3716 3 is_stmt 1 view .LVU8505
 31601 083e 254B     		ldr	r3, .L2406+4
 31602 0840 0593     		str	r3, [sp, #20]
 31603 0842 AAF10500 		sub	r0, r10, #5
 31604 0846 FFF7FEFF 		bl	digit
 31605              	.LVL2464:
3717:src/xeq.c     **** 
 31606              		.loc 1 3717 3 view .LVU8506
 31607 084a 059B     		ldr	r3, [sp, #20]
 31608 084c 1A68     		ldr	r2, [r3]
 31609 084e 98E4     		b	.L2085
 31610              	.LVL2465:
 31611              	.L2384:
3717:src/xeq.c     **** 
 31612              		.loc 1 3717 3 is_stmt 0 view .LVU8507
 31613              	.LBE4206:
ARM GAS  /tmp/cc0UaEmF.s 			page 799


 31614              	.LBE4569:
 31615              	.LBB4570:
 31616              	.LBB4397:
 31617              	.LBB4382:
 31618              	.LBB4371:
 31619              	.LBB4364:
 31620 0850 FFF7FEFF 		bl	process_cmdline.part.0
 31621              	.LVL2466:
 31622 0854 B5E5     		b	.L2169
 31623              	.LVL2467:
 31624              	.L2382:
3717:src/xeq.c     **** 
 31625              		.loc 1 3717 3 view .LVU8508
 31626              	.LBE4364:
 31627              	.LBE4371:
 31628              	.LBE4382:
 31629              	.LBE4397:
 31630              	.LBE4570:
 31631              	.LBB4571:
 31632              	.LBB4355:
 31633              	.LBB4339:
 31634              	.LBB4305:
 31635 0856 FFF7FEFF 		bl	process_cmdline.part.0
 31636              	.LVL2468:
 31637 085a 7CE5     		b	.L2155
 31638              	.LVL2469:
 31639              	.L2387:
3717:src/xeq.c     **** 
 31640              		.loc 1 3717 3 view .LVU8509
 31641              	.LBE4305:
 31642              	.LBE4339:
 31643              	.LBE4355:
 31644              	.LBE4571:
 31645              	.LBB4572:
 31646              	.LBB4550:
 31647              	.LBB4537:
 31648              	.LBB4527:
 31649              	.LBB4520:
 31650 085c FFF7FEFF 		bl	process_cmdline.part.0
 31651              	.LVL2470:
 31652 0860 89E6     		b	.L2198
 31653              	.LVL2471:
 31654              	.L2386:
3717:src/xeq.c     **** 
 31655              		.loc 1 3717 3 view .LVU8510
 31656              	.LBE4520:
 31657              	.LBE4527:
 31658              	.LBE4537:
 31659              	.LBE4550:
 31660              	.LBE4572:
 31661              	.LBB4573:
 31662              	.LBB4493:
 31663              	.LBB4487:
 31664              	.LBB4467:
 31665              	.LBB4460:
 31666 0862 FFF7FEFF 		bl	process_cmdline.part.0
 31667              	.LVL2472:
ARM GAS  /tmp/cc0UaEmF.s 			page 800


 31668 0866 4DE6     		b	.L2193
 31669              	.LVL2473:
 31670              	.L2385:
3717:src/xeq.c     **** 
 31671              		.loc 1 3717 3 view .LVU8511
 31672              	.LBE4460:
 31673              	.LBE4467:
 31674              	.LBE4487:
 31675              	.LBE4493:
 31676              	.LBE4573:
 31677              	.LBB4574:
 31678              	.LBB4448:
 31679              	.LBB4430:
 31680              	.LBB4415:
 31681              	.LBB4408:
 31682 0868 FFF7FEFF 		bl	process_cmdline.part.0
 31683              	.LVL2474:
 31684 086c 0AE6     		b	.L2185
 31685              	.LVL2475:
 31686              	.L2125:
3717:src/xeq.c     **** 
 31687              		.loc 1 3717 3 view .LVU8512
 31688              	.LBE4408:
 31689              	.LBE4415:
 31690              	.LBE4430:
 31691              	.LBE4448:
 31692              	.LBE4574:
 31693              	.LBB4575:
 31694              	.LBB4207:
3857:src/xeq.c     **** 		break;
 31695              		.loc 1 3857 3 is_stmt 1 view .LVU8513
3857:src/xeq.c     **** 		break;
 31696              		.loc 1 3857 53 is_stmt 0 view .LVU8514
 31697 086e A5F11E01 		sub	r1, r5, #30
 31698 0872 184B     		ldr	r3, .L2406+4
 31699 0874 0593     		str	r3, [sp, #20]
3857:src/xeq.c     **** 		break;
 31700              		.loc 1 3857 3 view .LVU8515
 31701 0876 C9B2     		uxtb	r1, r1
 31702 0878 40F61C00 		movw	r0, #2076
 31703 087c FFF7FEFF 		bl	do_tst
 31704              	.LVL2476:
3858:src/xeq.c     **** 	case OP_Zeq1:	case OP_Zne1:
 31705              		.loc 1 3858 3 is_stmt 1 view .LVU8516
 31706 0880 059B     		ldr	r3, [sp, #20]
 31707 0882 1A68     		ldr	r2, [r3]
 31708 0884 7DE4     		b	.L2085
 31709              	.L2126:
3848:src/xeq.c     **** 		break;
 31710              		.loc 1 3848 3 view .LVU8517
3848:src/xeq.c     **** 		break;
 31711              		.loc 1 3848 54 is_stmt 0 view .LVU8518
 31712 0886 A5F11701 		sub	r1, r5, #23
 31713 088a 124B     		ldr	r3, .L2406+4
 31714 088c 0593     		str	r3, [sp, #20]
3848:src/xeq.c     **** 		break;
 31715              		.loc 1 3848 3 view .LVU8519
ARM GAS  /tmp/cc0UaEmF.s 			page 801


 31716 088e C9B2     		uxtb	r1, r1
 31717 0890 40F61B00 		movw	r0, #2075
 31718 0894 FFF7FEFF 		bl	do_tst
 31719              	.LVL2477:
3849:src/xeq.c     **** 	case OP_Zeq0: case OP_Zne0:
 31720              		.loc 1 3849 3 is_stmt 1 view .LVU8520
 31721 0898 059B     		ldr	r3, [sp, #20]
 31722 089a 1A68     		ldr	r2, [r3]
 31723 089c 71E4     		b	.L2085
 31724              	.L2121:
3863:src/xeq.c     **** 		break;
 31725              		.loc 1 3863 3 view .LVU8521
3863:src/xeq.c     **** 		break;
 31726              		.loc 1 3863 49 is_stmt 0 view .LVU8522
 31727 089e A5F12902 		sub	r2, r5, #41
 31728 08a2 0C4B     		ldr	r3, .L2406+4
3863:src/xeq.c     **** 		break;
 31729              		.loc 1 3863 3 view .LVU8523
 31730 08a4 1349     		ldr	r1, .L2406+36
 31731 08a6 1448     		ldr	r0, .L2406+40
 31732 08a8 0593     		str	r3, [sp, #20]
 31733 08aa D2B2     		uxtb	r2, r2
 31734 08ac FFF7FEFF 		bl	do_ztst
 31735              	.LVL2478:
3864:src/xeq.c     **** 
 31736              		.loc 1 3864 3 is_stmt 1 view .LVU8524
 31737 08b0 059B     		ldr	r3, [sp, #20]
 31738 08b2 1A68     		ldr	r2, [r3]
 31739 08b4 65E4     		b	.L2085
 31740              	.L2123:
3860:src/xeq.c     **** 		break;
 31741              		.loc 1 3860 3 view .LVU8525
3860:src/xeq.c     **** 		break;
 31742              		.loc 1 3860 49 is_stmt 0 view .LVU8526
 31743 08b6 A5F12702 		sub	r2, r5, #39
 31744 08ba 064B     		ldr	r3, .L2406+4
3860:src/xeq.c     **** 		break;
 31745              		.loc 1 3860 3 view .LVU8527
 31746 08bc 0E49     		ldr	r1, .L2406+40
 31747 08be 0D48     		ldr	r0, .L2406+36
 31748 08c0 0593     		str	r3, [sp, #20]
 31749 08c2 D2B2     		uxtb	r2, r2
 31750 08c4 FFF7FEFF 		bl	do_ztst
 31751              	.LVL2479:
3861:src/xeq.c     **** 	case OP_Zeqi:	case OP_Znei:
 31752              		.loc 1 3861 3 is_stmt 1 view .LVU8528
 31753 08c8 059B     		ldr	r3, [sp, #20]
 31754 08ca 1A68     		ldr	r2, [r3]
 31755 08cc 59E4     		b	.L2085
 31756              	.L2407:
 31757 08ce 00BF     		.align	2
 31758              	.L2406:
 31759 08d0 00000000 		.word	xrom
 31760 08d4 00000000 		.word	Error
 31761 08d8 00000000 		.word	argcmds
 31762 08dc 00000000 		.word	XromParams
 31763 08e0 00000000 		.word	RetStk
ARM GAS  /tmp/cc0UaEmF.s 			page 802


 31764 08e4 00000000 		.word	XromLocal
 31765 08e8 00000000 		.word	xrom_size
 31766 08ec 00000000 		.word	XromUserPc
 31767 08f0 00000000 		.word	dyfuncs
 31768 08f4 00000000 		.word	const_1
 31769 08f8 00000000 		.word	const_0
 31770 08fc 00000000 		.word	Running
 31771              	.L2124:
3851:src/xeq.c     **** 		break;
 31772              		.loc 1 3851 3 view .LVU8529
 31773 0900 B949     		ldr	r1, .L2408
 31774 0902 BA4B     		ldr	r3, .L2408+4
 31775 0904 0593     		str	r3, [sp, #20]
3851:src/xeq.c     **** 		break;
 31776              		.loc 1 3851 49 is_stmt 0 view .LVU8530
 31777 0906 A5F12502 		sub	r2, r5, #37
3851:src/xeq.c     **** 		break;
 31778              		.loc 1 3851 3 view .LVU8531
 31779 090a D2B2     		uxtb	r2, r2
 31780 090c 0846     		mov	r0, r1
 31781 090e FFF7FEFF 		bl	do_ztst
 31782              	.LVL2480:
3852:src/xeq.c     **** 
 31783              		.loc 1 3852 3 is_stmt 1 view .LVU8532
 31784 0912 059B     		ldr	r3, [sp, #20]
 31785 0914 1A68     		ldr	r2, [r3]
 31786 0916 34E4     		b	.L2085
 31787              	.L2127:
3830:src/xeq.c     **** 			bad_mode_error();
 31788              		.loc 1 3830 3 view .LVU8533
3830:src/xeq.c     **** 			bad_mode_error();
 31789              		.loc 1 3830 7 is_stmt 0 view .LVU8534
 31790 0918 3B68     		ldr	r3, [r7]
 31791 091a 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3830:src/xeq.c     **** 			bad_mode_error();
 31792              		.loc 1 3830 6 view .LVU8535
 31793 091e DA07     		lsls	r2, r3, #31
 31794 0920 00F19E80 		bmi	.L2190
3834:src/xeq.c     **** 		clr_lift();
 31795              		.loc 1 3834 3 is_stmt 1 view .LVU8536
 31796              	.LBB4145:
 31797              	.LBI4145:
1040:src/xeq.c     **** 	decNumber a, b, x, t;
 31798              		.loc 1 1040 6 view .LVU8537
 31799              	.LBB4146:
1041:src/xeq.c     **** 
 31800              		.loc 1 1041 2 view .LVU8538
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31801              		.loc 1 1043 2 view .LVU8539
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31802              		.loc 1 1043 5 is_stmt 0 view .LVU8540
 31803 0924 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 31804 0926 002B     		cmp	r3, #0
 31805 0928 40F0A781 		bne	.L2391
 31806              	.L2152:
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31807              		.loc 1 1043 5 view .LVU8541
ARM GAS  /tmp/cc0UaEmF.s 			page 803


 31808              	.LBE4146:
 31809              	.LBE4145:
3835:src/xeq.c     **** 		setlastX();
 31810              		.loc 1 3835 3 is_stmt 1 view .LVU8542
 31811              	.LBB4148:
 31812              	.LBI4148:
 752:src/xeq.c     ****     State2.state_lift = 0;
 31813              		.loc 1 752 13 view .LVU8543
 31814              	.LBB4149:
 753:src/xeq.c     **** }
 31815              		.loc 1 753 5 view .LVU8544
 753:src/xeq.c     **** }
 31816              		.loc 1 753 23 is_stmt 0 view .LVU8545
 31817 092c E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 31818              	.LBE4149:
 31819              	.LBE4148:
 31820              	.LBB4152:
 31821              	.LBB4153:
 774:src/xeq.c     **** }
 31822              		.loc 1 774 2 view .LVU8546
 31823 092e 6421     		movs	r1, #100
 31824              	.LBE4153:
 31825              	.LBE4152:
 31826              	.LBB4156:
 31827              	.LBB4150:
 753:src/xeq.c     **** }
 31828              		.loc 1 753 23 view .LVU8547
 31829 0930 6FF38613 		bfc	r3, #6, #1
 31830              	.LBE4150:
 31831              	.LBE4156:
 31832              	.LBB4157:
 31833              	.LBB4154:
 774:src/xeq.c     **** }
 31834              		.loc 1 774 2 view .LVU8548
 31835 0934 6C20     		movs	r0, #108
 31836              	.LBE4154:
 31837              	.LBE4157:
 31838              	.LBB4158:
 31839              	.LBB4151:
 753:src/xeq.c     **** }
 31840              		.loc 1 753 23 view .LVU8549
 31841 0936 E375     		strb	r3, [r4, #23]
 31842              	.LBE4151:
 31843              	.LBE4158:
3836:src/xeq.c     **** 		if (opm == OP_SIGMAPLUS)
 31844              		.loc 1 3836 3 is_stmt 1 view .LVU8550
 31845              	.LBB4159:
 31846              	.LBI4152:
 773:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 31847              		.loc 1 773 6 view .LVU8551
 31848              	.LBB4155:
 774:src/xeq.c     **** }
 31849              		.loc 1 774 2 view .LVU8552
 31850 0938 FFF7FEFF 		bl	copyreg_n
 31851              	.LVL2481:
 31852              	.LBE4155:
 31853              	.LBE4159:
ARM GAS  /tmp/cc0UaEmF.s 			page 804


3837:src/xeq.c     **** 			sigma_plus();
 31854              		.loc 1 3837 3 view .LVU8553
3837:src/xeq.c     **** 			sigma_plus();
 31855              		.loc 1 3837 6 is_stmt 0 view .LVU8554
 31856 093c BAF1150F 		cmp	r10, #21
 31857 0940 00F09881 		beq	.L2392
3840:src/xeq.c     **** 		sigma_val(OP_sigmaN);
 31858              		.loc 1 3840 4 is_stmt 1 view .LVU8555
 31859 0944 FFF7FEFF 		bl	sigma_minus
 31860              	.LVL2482:
 31861              	.L2154:
3841:src/xeq.c     **** 		break;
 31862              		.loc 1 3841 3 view .LVU8556
 31863 0948 A84B     		ldr	r3, .L2408+4
 31864 094a 0593     		str	r3, [sp, #20]
 31865 094c 1D20     		movs	r0, #29
 31866 094e FFF7FEFF 		bl	sigma_val
 31867              	.LVL2483:
3842:src/xeq.c     **** 
 31868              		.loc 1 3842 3 view .LVU8557
 31869 0952 059B     		ldr	r3, [sp, #20]
 31870 0954 1A68     		ldr	r2, [r3]
 31871 0956 14E4     		b	.L2085
 31872              	.L2133:
3823:src/xeq.c     **** 		lift();
 31873              		.loc 1 3823 3 view .LVU8558
 31874              	.LBB4160:
 31875              	.LBI4160:
1040:src/xeq.c     **** 	decNumber a, b, x, t;
 31876              		.loc 1 1040 6 view .LVU8559
 31877              	.LBB4161:
1041:src/xeq.c     **** 
 31878              		.loc 1 1041 2 view .LVU8560
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31879              		.loc 1 1043 2 view .LVU8561
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31880              		.loc 1 1043 5 is_stmt 0 view .LVU8562
 31881 0958 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 31882 095a 002B     		cmp	r3, #0
 31883 095c 40F06C81 		bne	.L2393
 31884              	.L2149:
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31885              		.loc 1 1043 5 view .LVU8563
 31886              	.LBE4161:
 31887              	.LBE4160:
3824:src/xeq.c     **** 		clr_lift();
 31888              		.loc 1 3824 3 is_stmt 1 view .LVU8564
 31889 0960 FFF7FEFF 		bl	lift
 31890              	.LVL2484:
3825:src/xeq.c     **** 		break;
 31891              		.loc 1 3825 3 view .LVU8565
 31892              	.LBB4163:
 31893              	.LBI4163:
 752:src/xeq.c     ****     State2.state_lift = 0;
 31894              		.loc 1 752 13 view .LVU8566
 31895              	.LBB4164:
 753:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 805


 31896              		.loc 1 753 5 view .LVU8567
 753:src/xeq.c     **** }
 31897              		.loc 1 753 23 is_stmt 0 view .LVU8568
 31898 0964 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 31899 0966 A14B     		ldr	r3, .L2408+4
 31900 0968 6FF38612 		bfc	r2, #6, #1
 31901 096c E275     		strb	r2, [r4, #23]
 31902 096e 1A68     		ldr	r2, [r3]
 754:src/xeq.c     **** 
 31903              		.loc 1 754 1 view .LVU8569
 31904 0970 07E4     		b	.L2085
 31905              	.L2129:
 754:src/xeq.c     **** 
 31906              		.loc 1 754 1 view .LVU8570
 31907              	.LBE4164:
 31908              	.LBE4163:
3720:src/xeq.c     **** 			break;
 31909              		.loc 1 3720 3 is_stmt 1 view .LVU8571
3720:src/xeq.c     **** 			break;
 31910              		.loc 1 3720 7 is_stmt 0 view .LVU8572
 31911 0972 3B68     		ldr	r3, [r7]
 31912 0974 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3720:src/xeq.c     **** 			break;
 31913              		.loc 1 3720 6 view .LVU8573
 31914 0978 D807     		lsls	r0, r3, #31
 31915 097a 3FF566AE 		bmi	.L2082
3723:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 31916              		.loc 1 3723 3 is_stmt 1 view .LVU8574
3723:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 31917              		.loc 1 3723 7 is_stmt 0 view .LVU8575
 31918 097e A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
3723:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 31919              		.loc 1 3723 6 view .LVU8576
 31920 0980 012B     		cmp	r3, #1
 31921 0982 3FF662AE 		bhi	.L2082
3723:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 31922              		.loc 1 3723 22 view .LVU8577
 31923 0986 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
 31924 0988 002A     		cmp	r2, #0
 31925 098a 7FF45EAE 		bne	.L2082
3723:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 31926              		.loc 1 3723 54 view .LVU8578
 31927 098e 002B     		cmp	r3, #0
3723:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 31928              		.loc 1 3723 40 view .LVU8579
 31929 0990 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
3723:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 31930              		.loc 1 3723 54 view .LVU8580
 31931 0992 0CBF     		ite	eq
 31932 0994 0C22     		moveq	r2, #12
 31933 0996 0D22     		movne	r2, #13
3723:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 31934              		.loc 1 3723 37 view .LVU8581
 31935 0998 9A42     		cmp	r2, r3
 31936 099a FFF656AE 		blt	.L2082
3724:src/xeq.c     **** #else
 31937              		.loc 1 3724 4 is_stmt 1 view .LVU8582
ARM GAS  /tmp/cc0UaEmF.s 			page 806


3724:src/xeq.c     **** #else
 31938              		.loc 1 3724 7 is_stmt 0 view .LVU8583
 31939 099e 002B     		cmp	r3, #0
 31940 09a0 00F0BD81 		beq	.L2136
3724:src/xeq.c     **** #else
 31941              		.loc 1 3724 37 view .LVU8584
 31942 09a4 2344     		add	r3, r3, r4
3724:src/xeq.c     **** #else
 31943              		.loc 1 3724 27 view .LVU8585
 31944 09a6 DB7F     		ldrb	r3, [r3, #31]	@ zero_extendqisi2
 31945 09a8 2D2B     		cmp	r3, #45
 31946 09aa 00F0B881 		beq	.L2136
 31947              	.L2137:
3735:src/xeq.c     **** 			append_cmdline('.');
 31948              		.loc 1 3735 4 is_stmt 1 view .LVU8586
 31949              	.LBB4165:
 31950              	.LBB4166:
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 31951              		.loc 1 2433 10 is_stmt 0 view .LVU8587
 31952 09ae 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 31953              	.LBE4166:
 31954              	.LBE4165:
3735:src/xeq.c     **** 			append_cmdline('.');
 31955              		.loc 1 3735 14 view .LVU8588
 31956 09b0 A17F     		ldrb	r1, [r4, #30]	@ zero_extendqisi2
 31957              	.LBB4170:
 31958              	.LBB4167:
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 31959              		.loc 1 2433 23 view .LVU8589
 31960 09b2 5A1C     		adds	r2, r3, #1
 31961 09b4 D2B2     		uxtb	r2, r2
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 31962              		.loc 1 2433 27 view .LVU8590
 31963 09b6 2344     		add	r3, r3, r4
2434:src/xeq.c     **** }
 31964              		.loc 1 2434 25 view .LVU8591
 31965 09b8 A018     		adds	r0, r4, r2
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 31966              		.loc 1 2433 23 view .LVU8592
 31967 09ba 2277     		strb	r2, [r4, #28]
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 31968              		.loc 1 2433 27 view .LVU8593
 31969 09bc 2E22     		movs	r2, #46
 31970 09be 83F82020 		strb	r2, [r3, #32]
 31971 09c2 8A4B     		ldr	r3, .L2408+4
2434:src/xeq.c     **** }
 31972              		.loc 1 2434 25 view .LVU8594
 31973 09c4 0022     		movs	r2, #0
 31974              	.LBE4167:
 31975              	.LBE4170:
3735:src/xeq.c     **** 			append_cmdline('.');
 31976              		.loc 1 3735 14 view .LVU8595
 31977 09c6 0131     		adds	r1, r1, #1
 31978              	.LBB4171:
 31979              	.LBB4168:
2434:src/xeq.c     **** }
 31980              		.loc 1 2434 25 view .LVU8596
ARM GAS  /tmp/cc0UaEmF.s 			page 807


 31981 09c8 80F82020 		strb	r2, [r0, #32]
 31982              	.LBE4168:
 31983              	.LBE4171:
3735:src/xeq.c     **** 			append_cmdline('.');
 31984              		.loc 1 3735 14 view .LVU8597
 31985 09cc A177     		strb	r1, [r4, #30]
3736:src/xeq.c     **** 		}
 31986              		.loc 1 3736 4 is_stmt 1 view .LVU8598
 31987              	.LVL2485:
 31988              	.LBB4172:
 31989              	.LBI4165:
2432:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 31990              		.loc 1 2432 13 view .LVU8599
 31991              	.LBB4169:
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 31992              		.loc 1 2433 2 view .LVU8600
2434:src/xeq.c     **** }
 31993              		.loc 1 2434 2 view .LVU8601
 31994 09ce 1A68     		ldr	r2, [r3]
2435:src/xeq.c     **** 
 31995              		.loc 1 2435 1 is_stmt 0 view .LVU8602
 31996 09d0 FFF7D7BB 		b	.L2085
 31997              	.LVL2486:
 31998              	.L2131:
2435:src/xeq.c     **** 
 31999              		.loc 1 2435 1 view .LVU8603
 32000              	.LBE4169:
 32001              	.LBE4172:
3741:src/xeq.c     **** 			break;
 32002              		.loc 1 3741 3 is_stmt 1 view .LVU8604
 32003              	.LBB4173:
3749:src/xeq.c     **** #endif
 32004              		.loc 1 3749 4 view .LVU8605
3752:src/xeq.c     **** 				if (eex_pi) {
 32005              		.loc 1 3752 4 view .LVU8606
3752:src/xeq.c     **** 				if (eex_pi) {
 32006              		.loc 1 3752 7 is_stmt 0 view .LVU8607
 32007 09d4 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 32008 09d6 022B     		cmp	r3, #2
 32009 09d8 3FF437AE 		beq	.L2082
3767:src/xeq.c     **** 				break;
 32010              		.loc 1 3767 4 is_stmt 1 view .LVU8608
 32011              	.LBE4173:
3741:src/xeq.c     **** 			break;
 32012              		.loc 1 3741 7 is_stmt 0 view .LVU8609
 32013 09dc 3B68     		ldr	r3, [r7]
 32014              	.LBB4176:
3767:src/xeq.c     **** 				break;
 32015              		.loc 1 3767 7 view .LVU8610
 32016 09de 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
 32017              	.LBE4176:
3741:src/xeq.c     **** 			break;
 32018              		.loc 1 3741 7 view .LVU8611
 32019 09e0 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 32020 09e4 03F00103 		and	r3, r3, #1
 32021              	.LBB4177:
3767:src/xeq.c     **** 				break;
ARM GAS  /tmp/cc0UaEmF.s 			page 808


 32022              		.loc 1 3767 7 view .LVU8612
 32023 09e8 1343     		orrs	r3, r3, r2
 32024 09ea 7FF42EAE 		bne	.L2082
3767:src/xeq.c     **** 				break;
 32025              		.loc 1 3767 22 view .LVU8613
 32026 09ee 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
3767:src/xeq.c     **** 				break;
 32027              		.loc 1 3767 19 view .LVU8614
 32028 09f0 122B     		cmp	r3, #18
 32029 09f2 3FF62AAE 		bhi	.L2082
3769:src/xeq.c     **** 				// empty command line: enter pi
 32030              		.loc 1 3769 4 is_stmt 1 view .LVU8615
3780:src/xeq.c     **** 				digit(1);
 32031              		.loc 1 3780 4 view .LVU8616
3780:src/xeq.c     **** 				digit(1);
 32032              		.loc 1 3780 7 is_stmt 0 view .LVU8617
 32033 09f6 002B     		cmp	r3, #0
 32034 09f8 00F08D81 		beq	.L2394
 32035              	.L2138:
3782:src/xeq.c     **** 			append_cmdline('E');
 32036              		.loc 1 3782 4 is_stmt 1 view .LVU8618
3782:src/xeq.c     **** 			append_cmdline('E');
 32037              		.loc 1 3782 17 is_stmt 0 view .LVU8619
 32038 09fc 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
3782:src/xeq.c     **** 			append_cmdline('E');
 32039              		.loc 1 3782 15 view .LVU8620
 32040 09fe 6377     		strb	r3, [r4, #29]
3783:src/xeq.c     **** 		}
 32041              		.loc 1 3783 4 is_stmt 1 view .LVU8621
 32042              	.LVL2487:
 32043              	.LBB4174:
 32044              	.LBI4174:
2432:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 32045              		.loc 1 2432 13 view .LVU8622
 32046              	.LBB4175:
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32047              		.loc 1 2433 2 view .LVU8623
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32048              		.loc 1 2433 23 is_stmt 0 view .LVU8624
 32049 0a00 591C     		adds	r1, r3, #1
 32050 0a02 C9B2     		uxtb	r1, r1
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32051              		.loc 1 2433 27 view .LVU8625
 32052 0a04 E218     		adds	r2, r4, r3
2434:src/xeq.c     **** }
 32053              		.loc 1 2434 25 view .LVU8626
 32054 0a06 6018     		adds	r0, r4, r1
 32055 0a08 784B     		ldr	r3, .L2408+4
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32056              		.loc 1 2433 23 view .LVU8627
 32057 0a0a 2177     		strb	r1, [r4, #28]
2433:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32058              		.loc 1 2433 27 view .LVU8628
 32059 0a0c 4521     		movs	r1, #69
 32060 0a0e 82F82010 		strb	r1, [r2, #32]
2434:src/xeq.c     **** }
 32061              		.loc 1 2434 2 is_stmt 1 view .LVU8629
ARM GAS  /tmp/cc0UaEmF.s 			page 809


2434:src/xeq.c     **** }
 32062              		.loc 1 2434 25 is_stmt 0 view .LVU8630
 32063 0a12 0022     		movs	r2, #0
 32064 0a14 80F82020 		strb	r2, [r0, #32]
 32065 0a18 1A68     		ldr	r2, [r3]
2435:src/xeq.c     **** 
 32066              		.loc 1 2435 1 view .LVU8631
 32067 0a1a FFF7B2BB 		b	.L2085
 32068              	.LVL2488:
 32069              	.L2130:
2435:src/xeq.c     **** 
 32070              		.loc 1 2435 1 view .LVU8632
 32071              	.LBE4175:
 32072              	.LBE4174:
 32073              	.LBE4177:
3788:src/xeq.c     **** 			cmdlinechs();
 32074              		.loc 1 3788 3 is_stmt 1 view .LVU8633
3788:src/xeq.c     **** 			cmdlinechs();
 32075              		.loc 1 3788 7 is_stmt 0 view .LVU8634
 32076 0a1e 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
3788:src/xeq.c     **** 			cmdlinechs();
 32077              		.loc 1 3788 6 view .LVU8635
 32078 0a20 002A     		cmp	r2, #0
 32079 0a22 40F01A81 		bne	.L2395
3790:src/xeq.c     **** 			setX_int(intChs(getX_int()));
 32080              		.loc 1 3790 8 is_stmt 1 view .LVU8636
3790:src/xeq.c     **** 			setX_int(intChs(getX_int()));
 32081              		.loc 1 3790 12 is_stmt 0 view .LVU8637
 32082 0a26 3B68     		ldr	r3, [r7]
 32083 0a28 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3790:src/xeq.c     **** 			setX_int(intChs(getX_int()));
 32084              		.loc 1 3790 11 view .LVU8638
 32085 0a2c D907     		lsls	r1, r3, #31
 32086 0a2e 40F10681 		bpl	.L2143
3791:src/xeq.c     **** 			set_lift();
 32087              		.loc 1 3791 4 is_stmt 1 view .LVU8639
 32088              	.LBB4178:
 32089              	.LBI4178:
1256:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 32090              		.loc 1 1256 15 view .LVU8640
 32091              	.LBB4179:
1257:src/xeq.c     **** }
 32092              		.loc 1 1257 2 view .LVU8641
1257:src/xeq.c     **** }
 32093              		.loc 1 1257 9 is_stmt 0 view .LVU8642
 32094 0a32 6420     		movs	r0, #100
 32095 0a34 FFF7FEFF 		bl	get_reg_n_int
 32096              	.LVL2489:
 32097              	.LBE4179:
 32098              	.LBE4178:
3791:src/xeq.c     **** 			set_lift();
 32099              		.loc 1 3791 4 view .LVU8643
 32100 0a38 FFF7FEFF 		bl	intChs
 32101              	.LVL2490:
 32102 0a3c FFF7FEFF 		bl	setX_int
 32103              	.LVL2491:
3792:src/xeq.c     **** 		} else {
ARM GAS  /tmp/cc0UaEmF.s 			page 810


 32104              		.loc 1 3792 4 is_stmt 1 view .LVU8644
 32105              	.LBB4180:
 32106              	.LBI4180:
 748:src/xeq.c     ****     State2.state_lift = 1;
 32107              		.loc 1 748 6 view .LVU8645
 32108              	.LBB4181:
 749:src/xeq.c     **** }
 32109              		.loc 1 749 5 view .LVU8646
 32110 0a40 FFF799BB 		b	.L2348
 32111              	.L2132:
 32112              	.LBE4181:
 32113              	.LBE4180:
3804:src/xeq.c     **** 			illegal(op);
 32114              		.loc 1 3804 3 view .LVU8647
3804:src/xeq.c     **** 			illegal(op);
 32115              		.loc 1 3804 7 is_stmt 0 view .LVU8648
 32116 0a44 DFF8B4A1 		ldr	r10, .L2408+20
 32117              	.LVL2492:
3804:src/xeq.c     **** 			illegal(op);
 32118              		.loc 1 3804 6 view .LVU8649
 32119 0a48 DAF80030 		ldr	r3, [r10]
 32120 0a4c 002B     		cmp	r3, #0
 32121 0a4e 00F0D780 		beq	.L2144
3805:src/xeq.c     **** 		else if (CmdLineLength) {
 32122              		.loc 1 3805 4 is_stmt 1 view .LVU8650
3805:src/xeq.c     **** 		else if (CmdLineLength) {
 32123              		.loc 1 3805 4 view .LVU8651
 32124              	.LVL2493:
 32125              	.LBB4182:
 32126              	.LBI4182:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32127              		.loc 1 537 5 view .LVU8652
 32128              	.LBB4183:
 538:src/xeq.c     **** 		Error = e;
 32129              		.loc 1 538 2 view .LVU8653
 538:src/xeq.c     **** 		Error = e;
 32130              		.loc 1 538 12 is_stmt 0 view .LVU8654
 32131 0a52 664B     		ldr	r3, .L2408+4
 32132 0a54 1868     		ldr	r0, [r3]
 538:src/xeq.c     **** 		Error = e;
 32133              		.loc 1 538 5 view .LVU8655
 32134 0a56 0028     		cmp	r0, #0
 32135 0a58 3FF4B5AB 		beq	.L2090
 32136 0a5c FFF7B5BB 		b	.L2217
 32137              	.LVL2494:
 32138              	.L2190:
 538:src/xeq.c     **** 		Error = e;
 32139              		.loc 1 538 5 view .LVU8656
 32140              	.LBE4183:
 32141              	.LBE4182:
 32142              	.LBE4207:
 32143              	.LBE4575:
 32144              	.LBB4576:
 32145              	.LBB4449:
4620:src/xeq.c     **** 		}
 32146              		.loc 1 4620 5 is_stmt 1 view .LVU8657
 32147              	.LBB4431:
ARM GAS  /tmp/cc0UaEmF.s 			page 811


 32148              	.LBI4431:
 566:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 32149              		.loc 1 566 6 view .LVU8658
 32150              	.LBE4431:
 32151              	.LBE4449:
 32152              	.LBE4576:
 567:src/xeq.c     **** }
 32153              		.loc 1 567 2 view .LVU8659
 32154              	.LBB4577:
 32155              	.LBB4450:
 32156              	.LBB4434:
 32157              	.LBB4432:
 32158              	.LBI4432:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32159              		.loc 1 537 5 view .LVU8660
 32160              	.LBB4433:
 538:src/xeq.c     **** 		Error = e;
 32161              		.loc 1 538 2 view .LVU8661
 538:src/xeq.c     **** 		Error = e;
 32162              		.loc 1 538 12 is_stmt 0 view .LVU8662
 32163 0a60 624B     		ldr	r3, .L2408+4
 32164 0a62 1868     		ldr	r0, [r3]
 538:src/xeq.c     **** 		Error = e;
 32165              		.loc 1 538 5 view .LVU8663
 32166 0a64 0028     		cmp	r0, #0
 32167 0a66 7FF4CBAD 		bne	.L2356
 32168              	.LVL2495:
 538:src/xeq.c     **** 		Error = e;
 32169              		.loc 1 538 5 view .LVU8664
 32170              	.LBE4433:
 32171              	.LBE4432:
 32172              	.LBE4434:
 32173              	.LBE4450:
 32174              	.LBE4577:
 32175              	.LBB4578:
 32176              	.LBB4208:
 32177              	.LBB4184:
 32178              	.LBB4185:
 32179              	.LBB4186:
 32180              	.LBB4187:
 32181              	.LBI4187:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32182              		.loc 1 537 5 is_stmt 1 view .LVU8665
 32183              	.LBB4188:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 32184              		.loc 1 539 3 view .LVU8666
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 32185              		.loc 1 539 9 is_stmt 0 view .LVU8667
 32186 0a6a 0D20     		movs	r0, #13
 32187 0a6c DFF88CA1 		ldr	r10, .L2408+20
 32188 0a70 1860     		str	r0, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 32189              		.loc 1 540 3 is_stmt 1 view .LVU8668
 32190 0a72 FFF7AABB 		b	.L2217
 32191              	.LVL2496:
 32192              	.L2200:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
ARM GAS  /tmp/cc0UaEmF.s 			page 812


 32193              		.loc 1 540 3 is_stmt 0 view .LVU8669
 32194              	.LBE4188:
 32195              	.LBE4187:
 32196              	.LBE4186:
 32197              	.LBE4185:
 32198              	.LBE4184:
 32199              	.LBE4208:
 32200              	.LBE4578:
 32201              	.LBB4579:
 32202              	.LBB4551:
4572:src/xeq.c     **** 	} else
 32203              		.loc 1 4572 4 is_stmt 1 view .LVU8670
 32204              	.LBB4538:
 32205              	.LBI4538:
 566:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 32206              		.loc 1 566 6 view .LVU8671
 32207              	.LBE4538:
 32208              	.LBE4551:
 32209              	.LBE4579:
 567:src/xeq.c     **** }
 32210              		.loc 1 567 2 view .LVU8672
 32211              	.LBB4580:
 32212              	.LBB4552:
 32213              	.LBB4543:
 32214              	.LBB4539:
 32215              	.LBI4539:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32216              		.loc 1 537 5 view .LVU8673
 32217              	.LBB4540:
 538:src/xeq.c     **** 		Error = e;
 32218              		.loc 1 538 2 view .LVU8674
 538:src/xeq.c     **** 		Error = e;
 32219              		.loc 1 538 12 is_stmt 0 view .LVU8675
 32220 0a76 5D4B     		ldr	r3, .L2408+4
 32221 0a78 1A68     		ldr	r2, [r3]
 538:src/xeq.c     **** 		Error = e;
 32222              		.loc 1 538 5 view .LVU8676
 32223 0a7a 002A     		cmp	r2, #0
 32224 0a7c 7FF44EAB 		bne	.L2096
 32225              	.LVL2497:
 32226              	.LBB4541:
 32227              	.LBI4541:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32228              		.loc 1 537 5 is_stmt 1 view .LVU8677
 32229              	.LBB4542:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 32230              		.loc 1 539 3 view .LVU8678
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 32231              		.loc 1 539 9 is_stmt 0 view .LVU8679
 32232 0a80 0D22     		movs	r2, #13
 32233 0a82 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 32234              		.loc 1 540 3 is_stmt 1 view .LVU8680
 32235              	.LVL2498:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 32236              		.loc 1 540 3 is_stmt 0 view .LVU8681
 32237              	.LBE4542:
ARM GAS  /tmp/cc0UaEmF.s 			page 813


 32238              	.LBE4541:
 32239              	.LBE4540:
 32240              	.LBE4539:
 32241              	.LBE4543:
4574:src/xeq.c     **** }
 32242              		.loc 1 4574 3 is_stmt 1 view .LVU8682
 32243              	.LBE4552:
 32244              	.LBE4580:
5143:src/xeq.c     **** 		}
 32245              		.loc 1 5143 12 view .LVU8683
5153:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 32246              		.loc 1 5153 2 view .LVU8684
 32247 0a84 FFF74ABB 		b	.L2096
 32248              	.LVL2499:
 32249              	.L2208:
5177:src/xeq.c     **** 						// Need space for double precision stack
 32250              		.loc 1 5177 34 is_stmt 0 discriminator 1 view .LVU8685
 32251 0a88 9CF8CF17 		ldrb	r1, [ip, #1999]	@ zero_extendqisi2
 32252 0a8c 0B29     		cmp	r1, #11
 32253 0a8e 40F28F80 		bls	.L2210
5181:src/xeq.c     **** 					if (Error == ERR_NONE) {
 32254              		.loc 1 5181 6 is_stmt 1 view .LVU8686
5181:src/xeq.c     **** 					if (Error == ERR_NONE) {
 32255              		.loc 1 5181 20 is_stmt 0 view .LVU8687
 32256 0a92 68F3C712 		bfi	r2, r8, #7, #1
 32257 0a96 6A70     		strb	r2, [r5, #1]
5182:src/xeq.c     **** 						UState.mode_double = 1;
 32258              		.loc 1 5182 6 is_stmt 1 view .LVU8688
 32259 0a98 21E6     		b	.L2209
 32260              	.LVL2500:
 32261              	.L2171:
 32262              	.LBB4581:
 32263              	.LBB4398:
4453:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 32264              		.loc 1 4453 4 view .LVU8689
4453:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 32265              		.loc 1 4453 10 is_stmt 0 view .LVU8690
 32266 0a9a 554B     		ldr	r3, .L2408+8
 32267 0a9c 05EB4505 		add	r5, r5, r5, lsl #1
 32268              	.LVL2501:
4453:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 32269              		.loc 1 4453 10 view .LVU8691
 32270 0aa0 53F83550 		ldr	r5, [r3, r5, lsl #3]
4453:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 32271              		.loc 1 4453 7 view .LVU8692
 32272 0aa4 002D     		cmp	r5, #0
 32273 0aa6 DBD0     		beq	.L2190
 32274              	.LBB4383:
4454:src/xeq.c     **** 				if (dispatch_xrom(fp))
 32275              		.loc 1 4454 5 is_stmt 1 view .LVU8693
 32276              	.LVL2502:
4455:src/xeq.c     **** 					return;
 32277              		.loc 1 4455 5 view .LVU8694
4455:src/xeq.c     **** 					return;
 32278              		.loc 1 4455 9 is_stmt 0 view .LVU8695
 32279 0aa8 2846     		mov	r0, r5
 32280 0aaa FFF7FEFF 		bl	dispatch_xrom
ARM GAS  /tmp/cc0UaEmF.s 			page 814


 32281              	.LVL2503:
4455:src/xeq.c     **** 					return;
 32282              		.loc 1 4455 8 view .LVU8696
 32283 0aae 0028     		cmp	r0, #0
 32284 0ab0 7FF4CBAD 		bne	.L2082
 32285              	.LBB4384:
4458:src/xeq.c     **** 					getX(&x);
 32286              		.loc 1 4458 6 is_stmt 1 view .LVU8697
4459:src/xeq.c     **** 					if (NULL == fp(&r, &x))
 32287              		.loc 1 4459 6 view .LVU8698
 32288              	.LVL2504:
 32289              	.LBB4385:
 32290              	.LBI4385:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 32291              		.loc 1 805 12 view .LVU8699
 32292              	.LBB4386:
 806:src/xeq.c     **** }
 32293              		.loc 1 806 2 view .LVU8700
 806:src/xeq.c     **** }
 32294              		.loc 1 806 9 is_stmt 0 view .LVU8701
 32295 0ab4 6421     		movs	r1, #100
 32296 0ab6 30A8     		add	r0, sp, #192
 32297              	.LVL2505:
 806:src/xeq.c     **** }
 32298              		.loc 1 806 9 view .LVU8702
 32299              	.LBE4386:
 32300              	.LBE4385:
4460:src/xeq.c     **** 						set_NaN(&r);
 32301              		.loc 1 4460 18 view .LVU8703
 32302 0ab8 0DF1E40A 		add	r10, sp, #228
 32303              	.LBB4388:
 32304              	.LBB4387:
 806:src/xeq.c     **** }
 32305              		.loc 1 806 9 view .LVU8704
 32306 0abc FFF7FEFF 		bl	getRegister
 32307              	.LVL2506:
 806:src/xeq.c     **** }
 32308              		.loc 1 806 9 view .LVU8705
 32309              	.LBE4387:
 32310              	.LBE4388:
4460:src/xeq.c     **** 						set_NaN(&r);
 32311              		.loc 1 4460 6 is_stmt 1 view .LVU8706
4460:src/xeq.c     **** 						set_NaN(&r);
 32312              		.loc 1 4460 18 is_stmt 0 view .LVU8707
 32313 0ac0 30A9     		add	r1, sp, #192
 32314 0ac2 5046     		mov	r0, r10
 32315 0ac4 A847     		blx	r5
 32316              	.LVL2507:
4460:src/xeq.c     **** 						set_NaN(&r);
 32317              		.loc 1 4460 9 view .LVU8708
 32318 0ac6 0028     		cmp	r0, #0
 32319 0ac8 00F0EC80 		beq	.L2396
 32320              	.L2176:
4462:src/xeq.c     **** 					setX(&r);
 32321              		.loc 1 4462 6 is_stmt 1 view .LVU8709
 32322              	.LBB4389:
 32323              	.LBI4389:
ARM GAS  /tmp/cc0UaEmF.s 			page 815


 773:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 32324              		.loc 1 773 6 view .LVU8710
 32325              	.LBB4390:
 774:src/xeq.c     **** }
 32326              		.loc 1 774 2 view .LVU8711
 32327 0acc 474B     		ldr	r3, .L2408+4
 32328 0ace 0593     		str	r3, [sp, #20]
 32329 0ad0 6421     		movs	r1, #100
 32330 0ad2 6C20     		movs	r0, #108
 32331 0ad4 FFF7FEFF 		bl	copyreg_n
 32332              	.LVL2508:
 32333              	.LBE4390:
 32334              	.LBE4389:
4463:src/xeq.c     **** 				}
 32335              		.loc 1 4463 6 view .LVU8712
 32336              	.LBB4391:
 32337              	.LBI4391:
 809:src/xeq.c     **** 	setRegister(regX_idx, x);
 32338              		.loc 1 809 6 view .LVU8713
 32339              	.LBB4392:
 810:src/xeq.c     **** }
 32340              		.loc 1 810 2 view .LVU8714
 32341              	.L2353:
 810:src/xeq.c     **** }
 32342              		.loc 1 810 2 is_stmt 0 view .LVU8715
 32343              	.LBE4392:
 32344              	.LBE4391:
 32345              	.LBE4384:
 32346              	.LBE4383:
 32347              	.LBE4398:
 32348              	.LBE4581:
 32349              	.LBB4582:
 32350              	.LBB4451:
 32351              	.LBB4435:
 32352              	.LBB4436:
4617:src/xeq.c     **** 				}
 32353              		.loc 1 4617 6 is_stmt 1 view .LVU8716
 32354              	.LBB4437:
 32355              	.LBI4437:
 809:src/xeq.c     **** 	setRegister(regX_idx, x);
 32356              		.loc 1 809 6 view .LVU8717
 32357              	.LBB4438:
 810:src/xeq.c     **** }
 32358              		.loc 1 810 2 view .LVU8718
 32359 0ad8 5146     		mov	r1, r10
 32360 0ada 6420     		movs	r0, #100
 32361 0adc FFF7FEFF 		bl	setRegister
 32362              	.LVL2509:
 810:src/xeq.c     **** }
 32363              		.loc 1 810 2 is_stmt 0 view .LVU8719
 32364 0ae0 059B     		ldr	r3, [sp, #20]
 32365 0ae2 1A68     		ldr	r2, [r3]
 32366              	.LBE4438:
 32367              	.LBE4437:
 32368              	.LBE4436:
 32369              	.LBE4435:
 32370 0ae4 FFF74DBB 		b	.L2085
ARM GAS  /tmp/cc0UaEmF.s 			page 816


 32371              	.LVL2510:
 32372              	.L2187:
4605:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 32373              		.loc 1 4605 4 is_stmt 1 view .LVU8720
4605:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 32374              		.loc 1 4605 10 is_stmt 0 view .LVU8721
 32375 0ae8 424B     		ldr	r3, .L2408+12
 32376 0aea 05EB8505 		add	r5, r5, r5, lsl #2
 32377              	.LVL2511:
4605:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 32378              		.loc 1 4605 10 view .LVU8722
 32379 0aee 53F82550 		ldr	r5, [r3, r5, lsl #2]
4605:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 32380              		.loc 1 4605 7 view .LVU8723
 32381 0af2 002D     		cmp	r5, #0
 32382 0af4 B4D0     		beq	.L2190
 32383              	.LBB4443:
4606:src/xeq.c     **** 				if (dispatch_xrom(fp))
 32384              		.loc 1 4606 5 is_stmt 1 view .LVU8724
 32385              	.LVL2512:
4607:src/xeq.c     **** 					return;
 32386              		.loc 1 4607 5 view .LVU8725
4607:src/xeq.c     **** 					return;
 32387              		.loc 1 4607 9 is_stmt 0 view .LVU8726
 32388 0af6 2846     		mov	r0, r5
 32389 0af8 FFF7FEFF 		bl	dispatch_xrom
 32390              	.LVL2513:
4607:src/xeq.c     **** 					return;
 32391              		.loc 1 4607 8 view .LVU8727
 32392 0afc 0028     		cmp	r0, #0
 32393 0afe 7FF4A4AD 		bne	.L2082
 32394              	.LBB4441:
4610:src/xeq.c     **** 					getXYZ(&x, &y, &z);
 32395              		.loc 1 4610 6 is_stmt 1 view .LVU8728
4611:src/xeq.c     **** 					if (NULL == fp(&r, &z, &y, &x))
 32396              		.loc 1 4611 6 view .LVU8729
 32397 0b02 30AA     		add	r2, sp, #192
 32398 0b04 27A9     		add	r1, sp, #156
 32399 0b06 1EA8     		add	r0, sp, #120
4612:src/xeq.c     **** 						set_NaN(&r);
 32400              		.loc 1 4612 18 is_stmt 0 view .LVU8730
 32401 0b08 0DF1E40A 		add	r10, sp, #228
4611:src/xeq.c     **** 					if (NULL == fp(&r, &z, &y, &x))
 32402              		.loc 1 4611 6 view .LVU8731
 32403 0b0c FFF7FEFF 		bl	getXYZ
 32404              	.LVL2514:
4612:src/xeq.c     **** 						set_NaN(&r);
 32405              		.loc 1 4612 6 is_stmt 1 view .LVU8732
4612:src/xeq.c     **** 						set_NaN(&r);
 32406              		.loc 1 4612 18 is_stmt 0 view .LVU8733
 32407 0b10 1EAB     		add	r3, sp, #120
 32408 0b12 27AA     		add	r2, sp, #156
 32409 0b14 30A9     		add	r1, sp, #192
 32410 0b16 5046     		mov	r0, r10
 32411 0b18 A847     		blx	r5
 32412              	.LVL2515:
4612:src/xeq.c     **** 						set_NaN(&r);
ARM GAS  /tmp/cc0UaEmF.s 			page 817


 32413              		.loc 1 4612 9 view .LVU8734
 32414 0b1a 0028     		cmp	r0, #0
 32415 0b1c 00F0B080 		beq	.L2397
 32416              	.L2192:
4614:src/xeq.c     **** 					lower();
 32417              		.loc 1 4614 6 is_stmt 1 view .LVU8735
 32418              	.LBB4439:
 32419              	.LBI4439:
 773:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 32420              		.loc 1 773 6 view .LVU8736
 32421              	.LBB4440:
 774:src/xeq.c     **** }
 32422              		.loc 1 774 2 view .LVU8737
 32423 0b20 324B     		ldr	r3, .L2408+4
 32424 0b22 0593     		str	r3, [sp, #20]
 32425 0b24 6421     		movs	r1, #100
 32426 0b26 6C20     		movs	r0, #108
 32427 0b28 FFF7FEFF 		bl	copyreg_n
 32428              	.LVL2516:
 32429              	.LBE4440:
 32430              	.LBE4439:
4615:src/xeq.c     **** 					lower();
 32431              		.loc 1 4615 6 view .LVU8738
 32432 0b2c FFF7FEFF 		bl	lower
 32433              	.LVL2517:
 32434              	.L2351:
4616:src/xeq.c     **** 					setX(&r);
 32435              		.loc 1 4616 6 view .LVU8739
 32436 0b30 FFF7FEFF 		bl	lower
 32437              	.LVL2518:
 32438 0b34 D0E7     		b	.L2353
 32439              	.LVL2519:
 32440              	.L2179:
4616:src/xeq.c     **** 					setX(&r);
 32441              		.loc 1 4616 6 is_stmt 0 view .LVU8740
 32442              	.LBE4441:
 32443              	.LBE4443:
 32444              	.LBE4451:
 32445              	.LBE4582:
 32446              	.LBB4583:
 32447              	.LBB4261:
4529:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 32448              		.loc 1 4529 4 is_stmt 1 view .LVU8741
4529:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 32449              		.loc 1 4529 10 is_stmt 0 view .LVU8742
 32450 0b36 304B     		ldr	r3, .L2408+16
 32451 0b38 05EB4505 		add	r5, r5, r5, lsl #1
 32452              	.LVL2520:
4529:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 32453              		.loc 1 4529 10 view .LVU8743
 32454 0b3c 53F83550 		ldr	r5, [r3, r5, lsl #3]
4529:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 32455              		.loc 1 4529 7 view .LVU8744
 32456 0b40 002D     		cmp	r5, #0
 32457 0b42 8DD0     		beq	.L2190
 32458              	.LBB4238:
4530:src/xeq.c     **** 				if (dispatch_xrom(fp))
ARM GAS  /tmp/cc0UaEmF.s 			page 818


 32459              		.loc 1 4530 5 is_stmt 1 view .LVU8745
 32460              	.LVL2521:
4531:src/xeq.c     **** 					return;
 32461              		.loc 1 4531 5 view .LVU8746
4531:src/xeq.c     **** 					return;
 32462              		.loc 1 4531 9 is_stmt 0 view .LVU8747
 32463 0b44 2846     		mov	r0, r5
 32464 0b46 FFF7FEFF 		bl	dispatch_xrom
 32465              	.LVL2522:
4531:src/xeq.c     **** 					return;
 32466              		.loc 1 4531 8 view .LVU8748
 32467 0b4a 0028     		cmp	r0, #0
 32468 0b4c 7FF47DAD 		bne	.L2082
 32469              	.LBB4239:
4534:src/xeq.c     **** 					getXY(&x, &y);
 32470              		.loc 1 4534 6 is_stmt 1 view .LVU8749
4535:src/xeq.c     **** 					if (NULL == fp(&r, &y, &x))
 32471              		.loc 1 4535 6 view .LVU8750
 32472              	.LVL2523:
 32473              	.LBB4240:
 32474              	.LBI4240:
 835:src/xeq.c     **** 	getX(x);
 32475              		.loc 1 835 6 view .LVU8751
 32476              	.LBE4240:
 32477              	.LBE4239:
 32478              	.LBE4238:
 32479              	.LBE4261:
 32480              	.LBE4583:
 836:src/xeq.c     **** 	getY(y);
 32481              		.loc 1 836 2 view .LVU8752
 32482              	.LBB4584:
 32483              	.LBB4262:
 32484              	.LBB4255:
 32485              	.LBB4252:
 32486              	.LBB4247:
 32487              	.LBB4241:
 32488              	.LBI4241:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 32489              		.loc 1 805 12 view .LVU8753
 32490              	.LBB4242:
 806:src/xeq.c     **** }
 32491              		.loc 1 806 2 view .LVU8754
 806:src/xeq.c     **** }
 32492              		.loc 1 806 9 is_stmt 0 view .LVU8755
 32493 0b50 6421     		movs	r1, #100
 32494 0b52 27A8     		add	r0, sp, #156
 32495              	.LVL2524:
 806:src/xeq.c     **** }
 32496              		.loc 1 806 9 view .LVU8756
 32497 0b54 FFF7FEFF 		bl	getRegister
 32498              	.LVL2525:
 806:src/xeq.c     **** }
 32499              		.loc 1 806 9 view .LVU8757
 32500              	.LBE4242:
 32501              	.LBE4241:
 32502              	.LBE4247:
 32503              	.LBE4252:
ARM GAS  /tmp/cc0UaEmF.s 			page 819


 32504              	.LBE4255:
 32505              	.LBE4262:
 32506              	.LBE4584:
 837:src/xeq.c     **** }
 32507              		.loc 1 837 2 is_stmt 1 view .LVU8758
 32508              	.LBB4585:
 32509              	.LBB4263:
 32510              	.LBB4256:
 32511              	.LBB4253:
 32512              	.LBB4248:
 32513              	.LBB4243:
 32514              	.LBI4243:
 813:src/xeq.c     **** 	getRegister(y, regY_idx);
 32515              		.loc 1 813 6 view .LVU8759
 32516              	.LBB4244:
 814:src/xeq.c     **** }
 32517              		.loc 1 814 2 view .LVU8760
 32518              	.LBE4244:
 32519              	.LBE4243:
 32520              	.LBE4248:
4536:src/xeq.c     **** 						set_NaN(&r);
 32521              		.loc 1 4536 18 is_stmt 0 view .LVU8761
 32522 0b58 0DF1E40A 		add	r10, sp, #228
 32523              	.LBB4249:
 32524              	.LBB4246:
 32525              	.LBB4245:
 814:src/xeq.c     **** }
 32526              		.loc 1 814 2 view .LVU8762
 32527 0b5c 6521     		movs	r1, #101
 32528 0b5e 30A8     		add	r0, sp, #192
 32529              	.LVL2526:
 814:src/xeq.c     **** }
 32530              		.loc 1 814 2 view .LVU8763
 32531 0b60 FFF7FEFF 		bl	getRegister
 32532              	.LVL2527:
 814:src/xeq.c     **** }
 32533              		.loc 1 814 2 view .LVU8764
 32534              	.LBE4245:
 32535              	.LBE4246:
 32536              	.LBE4249:
4536:src/xeq.c     **** 						set_NaN(&r);
 32537              		.loc 1 4536 6 is_stmt 1 view .LVU8765
4536:src/xeq.c     **** 						set_NaN(&r);
 32538              		.loc 1 4536 18 is_stmt 0 view .LVU8766
 32539 0b64 27AA     		add	r2, sp, #156
 32540 0b66 30A9     		add	r1, sp, #192
 32541 0b68 5046     		mov	r0, r10
 32542 0b6a A847     		blx	r5
 32543              	.LVL2528:
4536:src/xeq.c     **** 						set_NaN(&r);
 32544              		.loc 1 4536 9 view .LVU8767
 32545 0b6c 0028     		cmp	r0, #0
 32546 0b6e 00F09D80 		beq	.L2398
 32547              	.L2184:
4538:src/xeq.c     **** 					lower();
 32548              		.loc 1 4538 6 is_stmt 1 view .LVU8768
 32549              	.LBB4250:
ARM GAS  /tmp/cc0UaEmF.s 			page 820


 32550              	.LBI4250:
 773:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 32551              		.loc 1 773 6 view .LVU8769
 32552              	.LBB4251:
 774:src/xeq.c     **** }
 32553              		.loc 1 774 2 view .LVU8770
 32554 0b72 1E4B     		ldr	r3, .L2408+4
 32555 0b74 0593     		str	r3, [sp, #20]
 32556 0b76 6421     		movs	r1, #100
 32557 0b78 6C20     		movs	r0, #108
 32558 0b7a FFF7FEFF 		bl	copyreg_n
 32559              	.LVL2529:
 32560              	.LBE4251:
 32561              	.LBE4250:
4539:src/xeq.c     **** 					setX(&r);
 32562              		.loc 1 4539 6 view .LVU8771
 32563 0b7e D7E7     		b	.L2351
 32564              	.LVL2530:
 32565              	.L2339:
4539:src/xeq.c     **** 					setX(&r);
 32566              		.loc 1 4539 6 is_stmt 0 view .LVU8772
 32567              	.LBE4253:
 32568              	.LBE4256:
 32569              	.LBE4263:
 32570              	.LBE4585:
 32571              	.LBB4586:
 32572              	.LBB4356:
4404:src/xeq.c     **** 			bad_mode_error();
 32573              		.loc 1 4404 23 view .LVU8773
 32574 0b80 03EB0511 		add	r1, r3, r5, lsl #4
 32575 0b84 2A01     		lsls	r2, r5, #4
4404:src/xeq.c     **** 			bad_mode_error();
 32576              		.loc 1 4404 20 view .LVU8774
 32577 0b86 91F90410 		ldrsb	r1, [r1, #4]
 32578 0b8a 0029     		cmp	r1, #0
 32579 0b8c BFF6EFAB 		bge	.L2157
4405:src/xeq.c     **** 		else if (! isNULL(niladics[idx].niladicf)) {
 32580              		.loc 1 4405 4 is_stmt 1 view .LVU8775
 32581              	.LBB4340:
 32582              	.LBI4340:
 566:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 32583              		.loc 1 566 6 view .LVU8776
 32584              	.LBE4340:
 32585              	.LBE4356:
 32586              	.LBE4586:
 567:src/xeq.c     **** }
 32587              		.loc 1 567 2 view .LVU8777
 32588              	.LVL2531:
 32589              	.LBB4587:
 32590              	.LBB4357:
 32591              	.LBB4349:
 32592              	.LBB4341:
 32593              	.LBI4341:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32594              		.loc 1 537 5 view .LVU8778
 32595              	.LBB4342:
 538:src/xeq.c     **** 		Error = e;
ARM GAS  /tmp/cc0UaEmF.s 			page 821


 32596              		.loc 1 538 2 view .LVU8779
 538:src/xeq.c     **** 		Error = e;
 32597              		.loc 1 538 12 is_stmt 0 view .LVU8780
 32598 0b90 164B     		ldr	r3, .L2408+4
 32599 0b92 1A68     		ldr	r2, [r3]
 538:src/xeq.c     **** 		Error = e;
 32600              		.loc 1 538 5 view .LVU8781
 32601 0b94 002A     		cmp	r2, #0
 32602 0b96 7FF42FAD 		bne	.L2158
 32603              	.LVL2532:
 32604              	.LBB4343:
 32605              	.LBI4343:
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32606              		.loc 1 537 5 is_stmt 1 view .LVU8782
 32607              	.LBB4344:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 32608              		.loc 1 539 3 view .LVU8783
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 32609              		.loc 1 539 9 is_stmt 0 view .LVU8784
 32610 0b9a 0D22     		movs	r2, #13
 32611              	.LBE4344:
 32612              	.LBE4343:
 32613              	.LBE4342:
 32614              	.LBE4341:
 32615              	.LBE4349:
4422:src/xeq.c     **** 		set_lift();
 32616              		.loc 1 4422 5 view .LVU8785
 32617 0b9c 3F2D     		cmp	r5, #63
 32618              	.LBB4350:
 32619              	.LBB4348:
 32620              	.LBB4347:
 32621              	.LBB4346:
 32622              	.LBB4345:
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 32623              		.loc 1 539 9 view .LVU8786
 32624 0b9e 1A60     		str	r2, [r3]
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 32625              		.loc 1 540 3 is_stmt 1 view .LVU8787
 32626              	.LVL2533:
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 32627              		.loc 1 540 3 is_stmt 0 view .LVU8788
 32628              	.LBE4345:
 32629              	.LBE4346:
 32630              	.LBE4347:
 32631              	.LBE4348:
 32632              	.LBE4350:
4421:src/xeq.c     **** 	if (idx != OP_rCLX)
 32633              		.loc 1 4421 3 is_stmt 1 view .LVU8789
4422:src/xeq.c     **** 		set_lift();
 32634              		.loc 1 4422 2 view .LVU8790
4422:src/xeq.c     **** 		set_lift();
 32635              		.loc 1 4422 5 is_stmt 0 view .LVU8791
 32636 0ba0 3FF42DAD 		beq	.L2160
4423:src/xeq.c     **** }
 32637              		.loc 1 4423 3 is_stmt 1 view .LVU8792
 32638              	.LBB4351:
 748:src/xeq.c     ****     State2.state_lift = 1;
ARM GAS  /tmp/cc0UaEmF.s 			page 822


 32639              		.loc 1 748 6 view .LVU8793
 32640              	.LBB4323:
 749:src/xeq.c     **** }
 32641              		.loc 1 749 5 view .LVU8794
 749:src/xeq.c     **** }
 32642              		.loc 1 749 23 is_stmt 0 view .LVU8795
 32643 0ba4 E17D     		ldrb	r1, [r4, #23]	@ zero_extendqisi2
 32644 0ba6 41F04001 		orr	r1, r1, #64
 32645 0baa E175     		strb	r1, [r4, #23]
 32646              	.LVL2534:
 749:src/xeq.c     **** }
 32647              		.loc 1 749 23 view .LVU8796
 32648              	.LBE4323:
 32649              	.LBE4351:
 32650              	.LBE4357:
 32651              	.LBE4587:
5143:src/xeq.c     **** 		}
 32652              		.loc 1 5143 12 is_stmt 1 view .LVU8797
5153:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 32653              		.loc 1 5153 2 view .LVU8798
 32654 0bac FFF7B6BA 		b	.L2096
 32655              	.LVL2535:
 32656              	.L2210:
5179:src/xeq.c     **** 					}
 32657              		.loc 1 5179 7 view .LVU8799
 32658 0bb0 7D21     		movs	r1, #125
 32659 0bb2 0C20     		movs	r0, #12
 32660 0bb4 0393     		str	r3, [sp, #12]
 32661 0bb6 FFF7FEFF 		bl	cmdregs
 32662              	.LVL2536:
 32663 0bba 039B     		ldr	r3, [sp, #12]
5181:src/xeq.c     **** 					if (Error == ERR_NONE) {
 32664              		.loc 1 5181 20 is_stmt 0 view .LVU8800
 32665 0bbc 6A78     		ldrb	r2, [r5, #1]	@ zero_extendqisi2
 32666 0bbe 1968     		ldr	r1, [r3]
5181:src/xeq.c     **** 					if (Error == ERR_NONE) {
 32667              		.loc 1 5181 6 is_stmt 1 view .LVU8801
5181:src/xeq.c     **** 					if (Error == ERR_NONE) {
 32668              		.loc 1 5181 20 is_stmt 0 view .LVU8802
 32669 0bc0 68F3C712 		bfi	r2, r8, #7, #1
 32670 0bc4 6A70     		strb	r2, [r5, #1]
5182:src/xeq.c     **** 						UState.mode_double = 1;
 32671              		.loc 1 5182 6 is_stmt 1 view .LVU8803
5182:src/xeq.c     **** 						UState.mode_double = 1;
 32672              		.loc 1 5182 9 is_stmt 0 view .LVU8804
 32673 0bc6 0029     		cmp	r1, #0
 32674 0bc8 3FF489AD 		beq	.L2209
5187:src/xeq.c     **** 				}
 32675              		.loc 1 5187 7 is_stmt 1 view .LVU8805
5187:src/xeq.c     **** 				}
 32676              		.loc 1 5187 13 is_stmt 0 view .LVU8806
 32677 0bcc C3F80080 		str	r8, [r3]
 32678 0bd0 FFF77FBB 		b	.L2207
 32679              	.LVL2537:
 32680              	.L2383:
 32681              	.LBB4588:
 32682              	.LBB4358:
ARM GAS  /tmp/cc0UaEmF.s 			page 823


 32683              	.LBB4352:
 32684              	.LBB4313:
 32685              	.LBB4312:
 740:src/xeq.c     **** }
 32686              		.loc 1 740 3 is_stmt 1 view .LVU8807
 32687 0bd4 FFF7FEFF 		bl	lift
 32688              	.LVL2538:
 32689              	.L2163:
 32690              	.LBE4312:
 32691              	.LBE4313:
4413:src/xeq.c     **** 				default:
 32692              		.loc 1 4413 13 view .LVU8808
 32693              	.LBB4314:
 32694              	.LBI4314:
 738:src/xeq.c     **** 	if (get_lift())
 32695              		.loc 1 738 6 view .LVU8809
 32696              	.LBB4315:
 739:src/xeq.c     **** 		lift();
 32697              		.loc 1 739 2 view .LVU8810
 32698              	.LBB4316:
 32699              	.LBI4316:
 734:src/xeq.c     **** 	return State2.state_lift;
 32700              		.loc 1 734 12 view .LVU8811
 32701              	.LBB4317:
 735:src/xeq.c     **** }
 32702              		.loc 1 735 2 view .LVU8812
 735:src/xeq.c     **** }
 32703              		.loc 1 735 15 is_stmt 0 view .LVU8813
 32704 0bd8 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 32705              	.LBE4317:
 32706              	.LBE4316:
 739:src/xeq.c     **** 		lift();
 32707              		.loc 1 739 5 view .LVU8814
 32708 0bda 5806     		lsls	r0, r3, #25
 32709 0bdc 7FF5E1AB 		bpl	.L2164
 740:src/xeq.c     **** }
 32710              		.loc 1 740 3 is_stmt 1 view .LVU8815
 32711 0be0 FFF7FEFF 		bl	lift
 32712              	.LVL2539:
 32713 0be4 FFF7DDBB 		b	.L2164
 32714              	.L2409:
 32715              		.align	2
 32716              	.L2408:
 32717 0be8 00000000 		.word	const_0
 32718 0bec 00000000 		.word	Error
 32719 0bf0 00000000 		.word	monfuncs
 32720 0bf4 00000000 		.word	trifuncs
 32721 0bf8 00000000 		.word	dyfuncs
 32722 0bfc 00000000 		.word	Running
 32723              	.LVL2540:
 32724              	.L2144:
 740:src/xeq.c     **** }
 32725              		.loc 1 740 3 is_stmt 0 view .LVU8816
 32726              	.LBE4315:
 32727              	.LBE4314:
 32728              	.LBE4352:
 32729              	.LBE4358:
ARM GAS  /tmp/cc0UaEmF.s 			page 824


 32730              	.LBE4588:
 32731              	.LBB4589:
 32732              	.LBB4209:
3806:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 32733              		.loc 1 3806 8 is_stmt 1 view .LVU8817
3806:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 32734              		.loc 1 3806 12 is_stmt 0 view .LVU8818
 32735 0c00 257F     		ldrb	r5, [r4, #28]	@ zero_extendqisi2
 32736              	.LVL2541:
3806:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 32737              		.loc 1 3806 11 view .LVU8819
 32738 0c02 002D     		cmp	r5, #0
 32739 0c04 40D0     		beq	.L2145
3808:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 32740              		.loc 1 3808 4 is_stmt 1 view .LVU8820
3808:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 32741              		.loc 1 3808 7 is_stmt 0 view .LVU8821
 32742 0c06 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
3808:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 32743              		.loc 1 3808 48 view .LVU8822
 32744 0c08 013D     		subs	r5, r5, #1
3808:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 32745              		.loc 1 3808 7 view .LVU8823
 32746 0c0a 23B1     		cbz	r3, .L2146
3808:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 32747              		.loc 1 3808 34 view .LVU8824
 32748 0c0c 6119     		adds	r1, r4, r5
3808:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 32749              		.loc 1 3808 24 view .LVU8825
 32750 0c0e 91F82030 		ldrb	r3, [r1, #32]	@ zero_extendqisi2
 32751 0c12 442B     		cmp	r3, #68
 32752 0c14 6BD0     		beq	.L2399
 32753              	.L2146:
3813:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
 32754              		.loc 1 3813 4 is_stmt 1 view .LVU8826
3813:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
 32755              		.loc 1 3813 17 is_stmt 0 view .LVU8827
 32756 0c16 EDB2     		uxtb	r5, r5
3814:src/xeq.c     **** 				CmdLineEex = 0;
 32757              		.loc 1 3814 15 view .LVU8828
 32758 0c18 6319     		adds	r3, r4, r5
3813:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
 32759              		.loc 1 3813 17 view .LVU8829
 32760 0c1a 2577     		strb	r5, [r4, #28]
3814:src/xeq.c     **** 				CmdLineEex = 0;
 32761              		.loc 1 3814 4 is_stmt 1 view .LVU8830
3814:src/xeq.c     **** 				CmdLineEex = 0;
 32762              		.loc 1 3814 15 is_stmt 0 view .LVU8831
 32763 0c1c 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
3814:src/xeq.c     **** 				CmdLineEex = 0;
 32764              		.loc 1 3814 7 view .LVU8832
 32765 0c20 452B     		cmp	r3, #69
 32766 0c22 5ED0     		beq	.L2400
3816:src/xeq.c     **** 				CmdLineDot--;
 32767              		.loc 1 3816 9 is_stmt 1 view .LVU8833
3816:src/xeq.c     **** 				CmdLineDot--;
 32768              		.loc 1 3816 12 is_stmt 0 view .LVU8834
ARM GAS  /tmp/cc0UaEmF.s 			page 825


 32769 0c24 2E2B     		cmp	r3, #46
 32770 0c26 7FF410AD 		bne	.L2082
3817:src/xeq.c     **** 		} else
 32771              		.loc 1 3817 5 is_stmt 1 view .LVU8835
3817:src/xeq.c     **** 		} else
 32772              		.loc 1 3817 15 is_stmt 0 view .LVU8836
 32773 0c2a A27F     		ldrb	r2, [r4, #30]	@ zero_extendqisi2
 32774 0c2c 3E4B     		ldr	r3, .L2410
 32775 0c2e 013A     		subs	r2, r2, #1
 32776 0c30 A277     		strb	r2, [r4, #30]
 32777 0c32 1A68     		ldr	r2, [r3]
 32778 0c34 FFF7A5BA 		b	.L2085
 32779              	.LVL2542:
 32780              	.L2393:
 32781              	.LBB4189:
 32782              	.LBB4162:
3817:src/xeq.c     **** 		} else
 32783              		.loc 1 3817 15 view .LVU8837
 32784 0c38 FFF7FEFF 		bl	process_cmdline.part.0
 32785              	.LVL2543:
 32786 0c3c 90E6     		b	.L2149
 32787              	.L2143:
 32788              	.LBE4162:
 32789              	.LBE4189:
 32790              	.LBB4190:
3794:src/xeq.c     **** 
 32791              		.loc 1 3794 4 is_stmt 1 view .LVU8838
3796:src/xeq.c     **** 			dn_minus(&r, &x);
 32792              		.loc 1 3796 4 view .LVU8839
 32793              	.LVL2544:
 32794              	.LBB4141:
 32795              	.LBI4141:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 32796              		.loc 1 805 12 view .LVU8840
 32797              	.LBB4142:
 806:src/xeq.c     **** }
 32798              		.loc 1 806 2 view .LVU8841
 806:src/xeq.c     **** }
 32799              		.loc 1 806 9 is_stmt 0 view .LVU8842
 32800 0c3e 30A8     		add	r0, sp, #192
 32801              	.LVL2545:
 806:src/xeq.c     **** }
 32802              		.loc 1 806 9 view .LVU8843
 32803 0c40 6421     		movs	r1, #100
 32804 0c42 FFF7FEFF 		bl	getRegister
 32805              	.LVL2546:
 806:src/xeq.c     **** }
 32806              		.loc 1 806 9 view .LVU8844
 32807              	.LBE4142:
 32808              	.LBE4141:
3797:src/xeq.c     **** 			setX(&r);
 32809              		.loc 1 3797 4 is_stmt 1 view .LVU8845
 32810 0c46 30A9     		add	r1, sp, #192
 32811 0c48 39A8     		add	r0, sp, #228
 32812 0c4a FFF7FEFF 		bl	dn_minus
 32813              	.LVL2547:
3798:src/xeq.c     **** 			set_lift();
ARM GAS  /tmp/cc0UaEmF.s 			page 826


 32814              		.loc 1 3798 4 view .LVU8846
 32815              	.LBB4143:
 32816              	.LBI4143:
 809:src/xeq.c     **** 	setRegister(regX_idx, x);
 32817              		.loc 1 809 6 view .LVU8847
 32818              	.LBB4144:
 810:src/xeq.c     **** }
 32819              		.loc 1 810 2 view .LVU8848
 32820 0c4e 39A9     		add	r1, sp, #228
 32821              	.LVL2548:
 810:src/xeq.c     **** }
 32822              		.loc 1 810 2 is_stmt 0 view .LVU8849
 32823 0c50 6420     		movs	r0, #100
 32824 0c52 FFF7FEFF 		bl	setRegister
 32825              	.LVL2549:
 810:src/xeq.c     **** }
 32826              		.loc 1 810 2 view .LVU8850
 32827 0c56 FFF78EBA 		b	.L2348
 32828              	.LVL2550:
 32829              	.L2395:
 810:src/xeq.c     **** }
 32830              		.loc 1 810 2 view .LVU8851
 32831              	.LBE4144:
 32832              	.LBE4143:
 32833              	.LBE4190:
3789:src/xeq.c     **** 		else if (is_intmode()) {
 32834              		.loc 1 3789 4 is_stmt 1 view .LVU8852
 32835              	.LBB4191:
 32836              	.LBI4191:
3032:src/xeq.c     **** 	if (CmdLineEex) {
 32837              		.loc 1 3032 13 view .LVU8853
 32838              	.LBB4192:
3033:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 32839              		.loc 1 3033 2 view .LVU8854
3033:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 32840              		.loc 1 3033 6 is_stmt 0 view .LVU8855
 32841 0c5a 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
3033:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 32842              		.loc 1 3033 5 view .LVU8856
 32843 0c5c 53B3     		cbz	r3, .L2140
3037:src/xeq.c     **** 			Cmdline[CmdLineEex] ^= 1;
 32844              		.loc 1 3037 3 is_stmt 1 view .LVU8857
3038:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
 32845              		.loc 1 3038 4 view .LVU8858
3038:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
 32846              		.loc 1 3038 24 is_stmt 0 view .LVU8859
 32847 0c5e E218     		adds	r2, r4, r3
 32848 0c60 314B     		ldr	r3, .L2410
 32849 0c62 92F82010 		ldrb	r1, [r2, #32]	@ zero_extendqisi2
 32850 0c66 81F00101 		eor	r1, r1, #1
 32851 0c6a 82F82010 		strb	r1, [r2, #32]
 32852 0c6e 1A68     		ldr	r2, [r3]
 32853 0c70 FFF787BA 		b	.L2085
 32854              	.L2392:
3038:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
 32855              		.loc 1 3038 24 view .LVU8860
 32856              	.LBE4192:
ARM GAS  /tmp/cc0UaEmF.s 			page 827


 32857              	.LBE4191:
3838:src/xeq.c     **** 		else
 32858              		.loc 1 3838 4 is_stmt 1 view .LVU8861
 32859 0c74 FFF7FEFF 		bl	sigma_plus
 32860              	.LVL2551:
 32861 0c78 66E6     		b	.L2154
 32862              	.L2391:
 32863              	.LBB4195:
 32864              	.LBB4147:
3838:src/xeq.c     **** 		else
 32865              		.loc 1 3838 4 is_stmt 0 view .LVU8862
 32866 0c7a FFF7FEFF 		bl	process_cmdline.part.0
 32867              	.LVL2552:
 32868 0c7e 55E6     		b	.L2152
 32869              	.LVL2553:
 32870              	.L2397:
3838:src/xeq.c     **** 		else
 32871              		.loc 1 3838 4 view .LVU8863
 32872              	.LBE4147:
 32873              	.LBE4195:
 32874              	.LBE4209:
 32875              	.LBE4589:
 32876              	.LBB4590:
 32877              	.LBB4452:
 32878              	.LBB4444:
 32879              	.LBB4442:
4613:src/xeq.c     **** 					setlastX();
 32880              		.loc 1 4613 7 is_stmt 1 view .LVU8864
 32881 0c80 5046     		mov	r0, r10
 32882 0c82 FFF7FEFF 		bl	set_NaN
 32883              	.LVL2554:
 32884 0c86 4BE7     		b	.L2192
 32885              	.LVL2555:
 32886              	.L2145:
4613:src/xeq.c     **** 					setlastX();
 32887              		.loc 1 4613 7 is_stmt 0 view .LVU8865
 32888              	.LBE4442:
 32889              	.LBE4444:
 32890              	.LBE4452:
 32891              	.LBE4590:
 32892              	.LBB4591:
 32893              	.LBB4210:
3819:src/xeq.c     **** 		break;
 32894              		.loc 1 3819 4 is_stmt 1 view .LVU8866
 32895              	.LBB4196:
 32896              	.LBI4196:
1372:src/xeq.c     **** 	zero_X();
 32897              		.loc 1 1372 6 view .LVU8867
 32898              	.LBB4197:
1373:src/xeq.c     **** 	clr_lift();
 32899              		.loc 1 1373 2 view .LVU8868
 32900              	.LBB4198:
 32901              	.LBI4198:
1364:src/xeq.c     **** 	set_zero(StackBase);
 32902              		.loc 1 1364 6 view .LVU8869
 32903              	.LBB4199:
1365:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 828


 32904              		.loc 1 1365 2 view .LVU8870
 32905 0c88 274B     		ldr	r3, .L2410
 32906 0c8a D8F80000 		ldr	r0, [r8]
 32907 0c8e 0593     		str	r3, [sp, #20]
 32908 0c90 FFF7FEFF 		bl	set_zero
 32909              	.LVL2556:
 32910              	.LBE4199:
 32911              	.LBE4198:
1374:src/xeq.c     **** }
 32912              		.loc 1 1374 2 view .LVU8871
 32913              	.LBB4200:
 32914              	.LBI4200:
 752:src/xeq.c     ****     State2.state_lift = 0;
 32915              		.loc 1 752 13 view .LVU8872
 32916              	.LBB4201:
 753:src/xeq.c     **** }
 32917              		.loc 1 753 5 view .LVU8873
 753:src/xeq.c     **** }
 32918              		.loc 1 753 23 is_stmt 0 view .LVU8874
 32919 0c94 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 32920 0c96 059B     		ldr	r3, [sp, #20]
 32921 0c98 65F38612 		bfi	r2, r5, #6, #1
 32922 0c9c E275     		strb	r2, [r4, #23]
 32923 0c9e 1A68     		ldr	r2, [r3]
 32924              	.LBE4201:
 32925              	.LBE4200:
1375:src/xeq.c     **** 
 32926              		.loc 1 1375 1 view .LVU8875
 32927 0ca0 FFF76FBA 		b	.L2085
 32928              	.LVL2557:
 32929              	.L2396:
1375:src/xeq.c     **** 
 32930              		.loc 1 1375 1 view .LVU8876
 32931              	.LBE4197:
 32932              	.LBE4196:
 32933              	.LBE4210:
 32934              	.LBE4591:
 32935              	.LBB4592:
 32936              	.LBB4399:
 32937              	.LBB4394:
 32938              	.LBB4393:
4461:src/xeq.c     **** 					setlastX();
 32939              		.loc 1 4461 7 is_stmt 1 view .LVU8877
 32940 0ca4 5046     		mov	r0, r10
 32941 0ca6 FFF7FEFF 		bl	set_NaN
 32942              	.LVL2558:
 32943 0caa 0FE7     		b	.L2176
 32944              	.LVL2559:
 32945              	.L2398:
4461:src/xeq.c     **** 					setlastX();
 32946              		.loc 1 4461 7 is_stmt 0 view .LVU8878
 32947              	.LBE4393:
 32948              	.LBE4394:
 32949              	.LBE4399:
 32950              	.LBE4592:
 32951              	.LBB4593:
 32952              	.LBB4264:
ARM GAS  /tmp/cc0UaEmF.s 			page 829


 32953              	.LBB4257:
 32954              	.LBB4254:
4537:src/xeq.c     **** 					setlastX();
 32955              		.loc 1 4537 7 is_stmt 1 view .LVU8879
 32956 0cac 5046     		mov	r0, r10
 32957 0cae FFF7FEFF 		bl	set_NaN
 32958              	.LVL2560:
 32959 0cb2 5EE7     		b	.L2184
 32960              	.LVL2561:
 32961              	.L2140:
4537:src/xeq.c     **** 					setlastX();
 32962              		.loc 1 4537 7 is_stmt 0 view .LVU8880
 32963              	.LBE4254:
 32964              	.LBE4257:
 32965              	.LBE4264:
 32966              	.LBE4593:
 32967              	.LBB4594:
 32968              	.LBB4211:
 32969              	.LBB4202:
 32970              	.LBB4193:
3064:src/xeq.c     **** 			if (CmdLineLength > 1)
 32971              		.loc 1 3064 3 is_stmt 1 view .LVU8881
3064:src/xeq.c     **** 			if (CmdLineLength > 1)
 32972              		.loc 1 3064 6 is_stmt 0 view .LVU8882
 32973 0cb4 94F82030 		ldrb	r3, [r4, #32]	@ zero_extendqisi2
 32974 0cb8 2D2B     		cmp	r3, #45
 32975 0cba 1FD0     		beq	.L2401
3068:src/xeq.c     **** 			xcopy(Cmdline+1, Cmdline, CmdLineLength);
 32976              		.loc 1 3068 10 is_stmt 1 view .LVU8883
3068:src/xeq.c     **** 			xcopy(Cmdline+1, Cmdline, CmdLineLength);
 32977              		.loc 1 3068 13 is_stmt 0 view .LVU8884
 32978 0cbc 122A     		cmp	r2, #18
 32979 0cbe 3FF6C4AC 		bhi	.L2082
3069:src/xeq.c     **** 			Cmdline[0] = '-';
 32980              		.loc 1 3069 4 is_stmt 1 view .LVU8885
 32981 0cc2 1A49     		ldr	r1, .L2410+4
 32982 0cc4 184B     		ldr	r3, .L2410
 32983 0cc6 0593     		str	r3, [sp, #20]
 32984 0cc8 481C     		adds	r0, r1, #1
 32985 0cca FFF7FEFF 		bl	xcopy
 32986              	.LVL2562:
3070:src/xeq.c     **** 			CmdLineLength++;
 32987              		.loc 1 3070 4 view .LVU8886
3071:src/xeq.c     **** 		}
 32988              		.loc 1 3071 17 is_stmt 0 view .LVU8887
 32989 0cce 217F     		ldrb	r1, [r4, #28]	@ zero_extendqisi2
 32990 0cd0 059B     		ldr	r3, [sp, #20]
 32991 0cd2 0131     		adds	r1, r1, #1
3070:src/xeq.c     **** 			CmdLineLength++;
 32992              		.loc 1 3070 15 view .LVU8888
 32993 0cd4 2D20     		movs	r0, #45
 32994 0cd6 1A68     		ldr	r2, [r3]
3071:src/xeq.c     **** 		}
 32995              		.loc 1 3071 17 view .LVU8889
 32996 0cd8 2177     		strb	r1, [r4, #28]
3070:src/xeq.c     **** 			CmdLineLength++;
 32997              		.loc 1 3070 15 view .LVU8890
ARM GAS  /tmp/cc0UaEmF.s 			page 830


 32998 0cda 84F82000 		strb	r0, [r4, #32]
3071:src/xeq.c     **** 		}
 32999              		.loc 1 3071 4 is_stmt 1 view .LVU8891
 33000 0cde FFF750BA 		b	.L2085
 33001              	.LVL2563:
 33002              	.L2400:
3071:src/xeq.c     **** 		}
 33003              		.loc 1 3071 4 is_stmt 0 view .LVU8892
 33004              	.LBE4193:
 33005              	.LBE4202:
3815:src/xeq.c     **** 			else if (Cmdline[CmdLineLength] == '.')
 33006              		.loc 1 3815 5 is_stmt 1 view .LVU8893
 33007 0ce2 114B     		ldr	r3, .L2410
3815:src/xeq.c     **** 			else if (Cmdline[CmdLineLength] == '.')
 33008              		.loc 1 3815 16 is_stmt 0 view .LVU8894
 33009 0ce4 0021     		movs	r1, #0
 33010 0ce6 1A68     		ldr	r2, [r3]
 33011 0ce8 6177     		strb	r1, [r4, #29]
 33012 0cea FFF74ABA 		b	.L2085
 33013              	.L2399:
3809:src/xeq.c     **** 				break;
 33014              		.loc 1 3809 5 is_stmt 1 view .LVU8895
 33015 0cee 0E4B     		ldr	r3, .L2410
3809:src/xeq.c     **** 				break;
 33016              		.loc 1 3809 30 is_stmt 0 view .LVU8896
 33017 0cf0 4520     		movs	r0, #69
 33018 0cf2 1A68     		ldr	r2, [r3]
 33019 0cf4 81F82000 		strb	r0, [r1, #32]
3810:src/xeq.c     **** 			}
 33020              		.loc 1 3810 5 is_stmt 1 view .LVU8897
 33021 0cf8 FFF743BA 		b	.L2085
 33022              	.LVL2564:
 33023              	.L2401:
 33024              	.LBB4203:
 33025              	.LBB4194:
3065:src/xeq.c     **** 				xcopy(Cmdline, Cmdline+1, CmdLineLength);
 33026              		.loc 1 3065 4 view .LVU8898
3065:src/xeq.c     **** 				xcopy(Cmdline, Cmdline+1, CmdLineLength);
 33027              		.loc 1 3065 7 is_stmt 0 view .LVU8899
 33028 0cfc 012A     		cmp	r2, #1
 33029 0cfe 03D9     		bls	.L2142
3066:src/xeq.c     **** 			CmdLineLength--;
 33030              		.loc 1 3066 5 is_stmt 1 view .LVU8900
 33031 0d00 0B49     		ldr	r1, .L2410+8
 33032 0d02 481E     		subs	r0, r1, #1
 33033 0d04 FFF7FEFF 		bl	xcopy
 33034              	.LVL2565:
 33035              	.L2142:
3067:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
 33036              		.loc 1 3067 4 view .LVU8901
3067:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
 33037              		.loc 1 3067 17 is_stmt 0 view .LVU8902
 33038 0d08 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
 33039 0d0a 074B     		ldr	r3, .L2410
 33040 0d0c 013A     		subs	r2, r2, #1
 33041 0d0e 2277     		strb	r2, [r4, #28]
 33042 0d10 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/cc0UaEmF.s 			page 831


 33043 0d12 FFF736BA 		b	.L2085
 33044              	.LVL2566:
 33045              	.L2394:
3067:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
 33046              		.loc 1 3067 17 view .LVU8903
 33047              	.LBE4194:
 33048              	.LBE4203:
 33049              	.LBB4204:
3781:src/xeq.c     **** 			CmdLineEex = CmdLineLength;
 33050              		.loc 1 3781 5 is_stmt 1 view .LVU8904
 33051 0d16 0120     		movs	r0, #1
 33052 0d18 FFF7FEFF 		bl	digit
 33053              	.LVL2567:
 33054 0d1c 6EE6     		b	.L2138
 33055              	.LVL2568:
 33056              	.L2136:
3781:src/xeq.c     **** 			CmdLineEex = CmdLineLength;
 33057              		.loc 1 3781 5 is_stmt 0 view .LVU8905
 33058              	.LBE4204:
3734:src/xeq.c     **** 			CmdLineDot++;
 33059              		.loc 1 3734 5 is_stmt 1 view .LVU8906
 33060 0d1e 0020     		movs	r0, #0
 33061 0d20 FFF7FEFF 		bl	digit
 33062              	.LVL2569:
 33063 0d24 43E6     		b	.L2137
 33064              	.L2411:
 33065 0d26 00BF     		.align	2
 33066              	.L2410:
 33067 0d28 00000000 		.word	Error
 33068 0d2c 20000000 		.word	StateWhileOn+32
 33069 0d30 21000000 		.word	StateWhileOn+33
 33070              	.LBE4211:
 33071              	.LBE4594:
 33072              		.cfi_endproc
 33073              	.LFE246:
 33075              		.section	.text.xeq_single,"ax",%progbits
 33076              		.align	1
 33077              		.p2align 2,,3
 33078              		.syntax unified
 33079              		.thumb
 33080              		.thumb_func
 33081              		.fpu fpv4-sp-d16
 33083              	xeq_single:
 33084              	.LFB247:
5231:src/xeq.c     **** 	const opcode op = getprog(state_pc());
 33085              		.loc 1 5231 30 view -0
 33086              		.cfi_startproc
 33087              		@ args = 0, pretend = 0, frame = 0
 33088              		@ frame_needed = 0, uses_anonymous_args = 0
5232:src/xeq.c     **** 
 33089              		.loc 1 5232 2 view .LVU8908
5232:src/xeq.c     **** 
 33090              		.loc 1 5232 28 is_stmt 0 view .LVU8909
 33091 0000 074B     		ldr	r3, .L2414
 33092 0002 1B68     		ldr	r3, [r3]
5231:src/xeq.c     **** 	const opcode op = getprog(state_pc());
 33093              		.loc 1 5231 30 view .LVU8910
ARM GAS  /tmp/cc0UaEmF.s 			page 832


 33094 0004 10B5     		push	{r4, lr}
 33095              		.cfi_def_cfa_offset 8
 33096              		.cfi_offset 4, -8
 33097              		.cfi_offset 14, -4
5232:src/xeq.c     **** 
 33098              		.loc 1 5232 20 view .LVU8911
 33099 0006 B3F8E007 		ldrh	r0, [r3, #2016]
 33100 000a FFF7FEFF 		bl	getprog
 33101              	.LVL2570:
 33102 000e 0446     		mov	r4, r0
 33103              	.LVL2571:
5234:src/xeq.c     **** 	xeq(op);
 33104              		.loc 1 5234 2 is_stmt 1 view .LVU8912
 33105 0010 FFF7FEFF 		bl	incpc
 33106              	.LVL2572:
5235:src/xeq.c     **** }
 33107              		.loc 1 5235 2 view .LVU8913
 33108 0014 2046     		mov	r0, r4
5236:src/xeq.c     **** 
 33109              		.loc 1 5236 1 is_stmt 0 view .LVU8914
 33110 0016 BDE81040 		pop	{r4, lr}
 33111              		.cfi_restore 14
 33112              		.cfi_restore 4
 33113              		.cfi_def_cfa_offset 0
 33114              	.LVL2573:
5235:src/xeq.c     **** }
 33115              		.loc 1 5235 2 view .LVU8915
 33116 001a FFF7FEBF 		b	xeq
 33117              	.LVL2574:
 33118              	.L2415:
5235:src/xeq.c     **** }
 33119              		.loc 1 5235 2 view .LVU8916
 33120 001e 00BF     		.align	2
 33121              	.L2414:
 33122 0020 00000000 		.word	main_ram
 33123              		.cfi_endproc
 33124              	.LFE247:
 33126              		.section	.text.xeq_xrom2,"ax",%progbits
 33127              		.align	1
 33128              		.p2align 2,,3
 33129              		.syntax unified
 33130              		.thumb
 33131              		.thumb_func
 33132              		.fpu fpv4-sp-d16
 33134              	xeq_xrom2:
 33135              	.LFB248:
5243:src/xeq.c     **** #endif
 33136              		.loc 1 5243 29 is_stmt 1 view -0
 33137              		.cfi_startproc
 33138              		@ args = 0, pretend = 0, frame = 0
 33139              		@ frame_needed = 0, uses_anonymous_args = 0
5245:src/xeq.c     **** 	/* Now if we've stepped into the XROM area, keep going until
 33140              		.loc 1 5245 2 view .LVU8918
 33141              	.LVL2575:
5249:src/xeq.c     **** 		XromRunning = 1;
 33142              		.loc 1 5249 4 view .LVU8919
5249:src/xeq.c     **** 		XromRunning = 1;
ARM GAS  /tmp/cc0UaEmF.s 			page 833


 33143              		.loc 1 5249 10 view .LVU8920
5243:src/xeq.c     **** #endif
 33144              		.loc 1 5243 29 is_stmt 0 view .LVU8921
 33145 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 33146              		.cfi_def_cfa_offset 32
 33147              		.cfi_offset 4, -32
 33148              		.cfi_offset 5, -28
 33149              		.cfi_offset 6, -24
 33150              		.cfi_offset 7, -20
 33151              		.cfi_offset 8, -16
 33152              		.cfi_offset 9, -12
 33153              		.cfi_offset 10, -8
 33154              		.cfi_offset 14, -4
5249:src/xeq.c     **** 		XromRunning = 1;
 33155              		.loc 1 5249 11 view .LVU8922
 33156 0004 1A4D     		ldr	r5, .L2428
 33157 0006 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5249:src/xeq.c     **** 		XromRunning = 1;
 33158              		.loc 1 5249 10 view .LVU8923
 33159 0008 53BB     		cbnz	r3, .L2416
 33160 000a DFF87080 		ldr	r8, .L2428+12
5250:src/xeq.c     **** 		xeq_single();
 33161              		.loc 1 5250 15 view .LVU8924
 33162 000e 194F     		ldr	r7, .L2428+4
 33163              	.LBB4601:
 33164              	.LBB4602:
4253:src/xeq.c     **** 		Busy = 1;
 33165              		.loc 1 4253 6 view .LVU8925
 33166 0010 DFF86CA0 		ldr	r10, .L2428+16
4253:src/xeq.c     **** 		Busy = 1;
 33167              		.loc 1 4253 15 view .LVU8926
 33168 0014 DFF86C90 		ldr	r9, .L2428+20
 33169 0018 03F0FF04 		and	r4, r3, #255
 33170              	.LVL2576:
 33171              	.L2417:
4253:src/xeq.c     **** 		Busy = 1;
 33172              		.loc 1 4253 15 view .LVU8927
 33173              	.LBE4602:
 33174              	.LBE4601:
5250:src/xeq.c     **** 		xeq_single();
 33175              		.loc 1 5250 3 is_stmt 1 view .LVU8928
 33176              	.LBB4609:
 33177              	.LBI4609:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 33178              		.loc 1 182 5 view .LVU8929
 33179              	.LBB4610:
 183:src/xeq.c     **** }
 33180              		.loc 1 183 2 view .LVU8930
 183:src/xeq.c     **** }
 33181              		.loc 1 183 9 is_stmt 0 view .LVU8931
 33182 001c D8F80020 		ldr	r2, [r8]
 33183 0020 B2F8E037 		ldrh	r3, [r2, #2016]
 33184              	.LBE4610:
 33185              	.LBE4609:
5249:src/xeq.c     **** 		XromRunning = 1;
 33186              		.loc 1 5249 18 view .LVU8932
 33187 0024 9B0B     		lsrs	r3, r3, #14
ARM GAS  /tmp/cc0UaEmF.s 			page 834


5250:src/xeq.c     **** 		xeq_single();
 33188              		.loc 1 5250 15 view .LVU8933
 33189 0026 0126     		movs	r6, #1
5249:src/xeq.c     **** 		XromRunning = 1;
 33190              		.loc 1 5249 18 view .LVU8934
 33191 0028 032B     		cmp	r3, #3
5253:src/xeq.c     **** 			busy();
 33192              		.loc 1 5253 6 view .LVU8935
 33193 002a 3444     		add	r4, r4, r6
 33194              	.LVL2577:
5249:src/xeq.c     **** 		XromRunning = 1;
 33195              		.loc 1 5249 18 view .LVU8936
 33196 002c 18D1     		bne	.L2416
5249:src/xeq.c     **** 		XromRunning = 1;
 33197              		.loc 1 5249 31 discriminator 2 view .LVU8937
 33198 002e B2F9E237 		ldrsh	r3, [r2, #2018]
 33199 0032 ABB1     		cbz	r3, .L2416
5250:src/xeq.c     **** 		xeq_single();
 33200              		.loc 1 5250 15 view .LVU8938
 33201 0034 3E60     		str	r6, [r7]
5251:src/xeq.c     **** 		XromRunning = 0;
 33202              		.loc 1 5251 3 is_stmt 1 view .LVU8939
 33203 0036 FFF7FEFF 		bl	xeq_single
 33204              	.LVL2578:
5252:src/xeq.c     **** 		if ((++count & 31) == 0)
 33205              		.loc 1 5252 3 view .LVU8940
 33206              	.LBB4611:
 33207              	.LBB4605:
4253:src/xeq.c     **** 		Busy = 1;
 33208              		.loc 1 4253 12 is_stmt 0 view .LVU8941
 33209 003a D9F80030 		ldr	r3, [r9]
 33210 003e DAF80010 		ldr	r1, [r10]
 33211 0042 1943     		orrs	r1, r1, r3
 33212              	.LBE4605:
 33213              	.LBE4611:
5253:src/xeq.c     **** 			busy();
 33214              		.loc 1 5253 16 view .LVU8942
 33215 0044 04F01F03 		and	r3, r4, #31
5252:src/xeq.c     **** 		if ((++count & 31) == 0)
 33216              		.loc 1 5252 15 view .LVU8943
 33217 0048 0022     		movs	r2, #0
 33218              	.LBB4612:
 33219              	.LBB4606:
4253:src/xeq.c     **** 		Busy = 1;
 33220              		.loc 1 4253 12 view .LVU8944
 33221 004a 1943     		orrs	r1, r1, r3
 33222              	.LBE4606:
 33223              	.LBE4612:
5252:src/xeq.c     **** 		if ((++count & 31) == 0)
 33224              		.loc 1 5252 15 view .LVU8945
 33225 004c 3A60     		str	r2, [r7]
5253:src/xeq.c     **** 			busy();
 33226              		.loc 1 5253 3 is_stmt 1 view .LVU8946
 33227              	.LVL2579:
5254:src/xeq.c     **** 		  if (Pause)
 33228              		.loc 1 5254 4 view .LVU8947
 33229              	.LBB4613:
ARM GAS  /tmp/cc0UaEmF.s 			page 835


 33230              	.LBI4601:
4238:src/xeq.c     **** {
 33231              		.loc 1 4238 6 view .LVU8948
 33232              	.LBB4607:
4243:src/xeq.c     **** 
 33233              		.loc 1 4243 12 view .LVU8949
4248:src/xeq.c     **** 
 33234              		.loc 1 4248 17 view .LVU8950
4253:src/xeq.c     **** 		Busy = 1;
 33235              		.loc 1 4253 2 view .LVU8951
4253:src/xeq.c     **** 		Busy = 1;
 33236              		.loc 1 4253 12 is_stmt 0 view .LVU8952
 33237 004e 09D0     		beq	.L2427
 33238              	.L2418:
 33239              	.LBE4607:
 33240              	.LBE4613:
5255:src/xeq.c     **** 			// Special case: WHO has a PSE built in.
 33241              		.loc 1 5255 5 is_stmt 1 view .LVU8953
5258:src/xeq.c     **** 		
 33242              		.loc 1 5258 4 view .LVU8954
5249:src/xeq.c     **** 		XromRunning = 1;
 33243              		.loc 1 5249 10 view .LVU8955
5255:src/xeq.c     **** 			// Special case: WHO has a PSE built in.
 33244              		.loc 1 5255 9 is_stmt 0 view .LVU8956
 33245 0050 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
5249:src/xeq.c     **** 		XromRunning = 1;
 33246              		.loc 1 5249 11 view .LVU8957
 33247 0052 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5255:src/xeq.c     **** 			// Special case: WHO has a PSE built in.
 33248              		.loc 1 5255 8 view .LVU8958
 33249 0054 12B1     		cbz	r2, .L2419
5258:src/xeq.c     **** 		
 33250              		.loc 1 5258 12 view .LVU8959
 33251 0056 0122     		movs	r2, #1
 33252 0058 C9F80020 		str	r2, [r9]
 33253              	.L2419:
5249:src/xeq.c     **** 		XromRunning = 1;
 33254              		.loc 1 5249 10 view .LVU8960
 33255 005c 002B     		cmp	r3, #0
 33256 005e DDD0     		beq	.L2417
 33257              	.LVL2580:
 33258              	.L2416:
5261:src/xeq.c     **** 
 33259              		.loc 1 5261 1 view .LVU8961
 33260 0060 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 33261              	.LVL2581:
 33262              	.L2427:
 33263              	.LBB4614:
 33264              	.LBB4608:
 33265              	.LBB4603:
 33266              	.LBI4603:
4238:src/xeq.c     **** {
 33267              		.loc 1 4238 6 is_stmt 1 view .LVU8962
 33268              	.LBB4604:
4254:src/xeq.c     **** 		message("Wait...", NULL);
 33269              		.loc 1 4254 3 view .LVU8963
4255:src/xeq.c     **** 	}
ARM GAS  /tmp/cc0UaEmF.s 			page 836


 33270              		.loc 1 4255 3 is_stmt 0 view .LVU8964
 33271 0064 0448     		ldr	r0, .L2428+8
4254:src/xeq.c     **** 		message("Wait...", NULL);
 33272              		.loc 1 4254 8 view .LVU8965
 33273 0066 CAF80060 		str	r6, [r10]
4255:src/xeq.c     **** 	}
 33274              		.loc 1 4255 3 is_stmt 1 view .LVU8966
 33275 006a FFF7FEFF 		bl	message
 33276              	.LVL2582:
4257:src/xeq.c     **** 
 33277              		.loc 1 4257 1 is_stmt 0 view .LVU8967
 33278 006e EFE7     		b	.L2418
 33279              	.L2429:
 33280              		.align	2
 33281              	.L2428:
 33282 0070 00000000 		.word	Pause
 33283 0074 00000000 		.word	XromRunning
 33284 0078 00000000 		.word	.LC7
 33285 007c 00000000 		.word	main_ram
 33286 0080 00000000 		.word	Busy
 33287 0084 00000000 		.word	Running
 33288              	.LBE4604:
 33289              	.LBE4603:
 33290              	.LBE4608:
 33291              	.LBE4614:
 33292              		.cfi_endproc
 33293              	.LFE248:
 33295              		.section	.text.xeq_xrom,"ax",%progbits
 33296              		.align	1
 33297              		.p2align 2,,3
 33298              		.global	xeq_xrom
 33299              		.syntax unified
 33300              		.thumb
 33301              		.thumb_func
 33302              		.fpu fpv4-sp-d16
 33304              	xeq_xrom:
 33305              	.LFB249:
5264:src/xeq.c     **** 	// We split the routine in two parts for debugging only
 33306              		.loc 1 5264 21 is_stmt 1 view -0
 33307              		.cfi_startproc
 33308              		@ args = 0, pretend = 0, frame = 0
 33309              		@ frame_needed = 0, uses_anonymous_args = 0
 33310              		@ link register save eliminated.
5266:src/xeq.c     **** 		xeq_xrom2();
 33311              		.loc 1 5266 2 view .LVU8969
5266:src/xeq.c     **** 		xeq_xrom2();
 33312              		.loc 1 5266 6 is_stmt 0 view .LVU8970
 33313 0000 034B     		ldr	r3, .L2433
5266:src/xeq.c     **** 		xeq_xrom2();
 33314              		.loc 1 5266 5 view .LVU8971
 33315 0002 93F91730 		ldrsb	r3, [r3, #23]
 33316 0006 002B     		cmp	r3, #0
 33317 0008 00DA     		bge	.L2432
5268:src/xeq.c     **** #endif
 33318              		.loc 1 5268 1 view .LVU8972
 33319 000a 7047     		bx	lr
 33320              	.L2432:
ARM GAS  /tmp/cc0UaEmF.s 			page 837


5267:src/xeq.c     **** }
 33321              		.loc 1 5267 3 is_stmt 1 view .LVU8973
 33322 000c FFF7FEBF 		b	xeq_xrom2
 33323              	.LVL2583:
 33324              	.L2434:
 33325              		.align	2
 33326              	.L2433:
 33327 0010 00000000 		.word	StateWhileOn
 33328              		.cfi_endproc
 33329              	.LFE249:
 33331              		.section	.text.dispatch_xrom,"ax",%progbits
 33332              		.align	1
 33333              		.p2align 2,,3
 33334              		.syntax unified
 33335              		.thumb
 33336              		.thumb_func
 33337              		.fpu fpv4-sp-d16
 33339              	dispatch_xrom:
 33340              	.LVL2584:
 33341              	.LFB233:
4290:src/xeq.c     **** 	const s_opcode *xp = check_for_xrom_address(fp);
 33342              		.loc 1 4290 1 view -0
 33343              		.cfi_startproc
 33344              		@ args = 0, pretend = 0, frame = 0
 33345              		@ frame_needed = 0, uses_anonymous_args = 0
4291:src/xeq.c     **** 	if (xp == NULL)
 33346              		.loc 1 4291 2 view .LVU8975
 33347              	.LBB4615:
 33348              	.LBI4615:
4273:src/xeq.c     **** {
 33349              		.loc 1 4273 24 view .LVU8976
 33350              	.LBB4616:
4275:src/xeq.c     **** 	if (xp < xrom)
 33351              		.loc 1 4275 2 view .LVU8977
4276:src/xeq.c     **** 		return NULL;
 33352              		.loc 1 4276 5 is_stmt 0 view .LVU8978
 33353 0000 1649     		ldr	r1, .L2446
4275:src/xeq.c     **** 	if (xp < xrom)
 33354              		.loc 1 4275 59 view .LVU8979
 33355 0002 20F00100 		bic	r0, r0, #1
 33356              	.LVL2585:
4276:src/xeq.c     **** 		return NULL;
 33357              		.loc 1 4276 2 is_stmt 1 view .LVU8980
4276:src/xeq.c     **** 		return NULL;
 33358              		.loc 1 4276 5 is_stmt 0 view .LVU8981
 33359 0006 8842     		cmp	r0, r1
 33360 0008 22D3     		bcc	.L2438
4280:src/xeq.c     **** 		return NULL;
 33361              		.loc 1 4280 2 is_stmt 1 view .LVU8982
4280:src/xeq.c     **** 		return NULL;
 33362              		.loc 1 4280 17 is_stmt 0 view .LVU8983
 33363 000a 154B     		ldr	r3, .L2446+4
 33364 000c 1B88     		ldrh	r3, [r3]
 33365 000e 01EB4303 		add	r3, r1, r3, lsl #1
4280:src/xeq.c     **** 		return NULL;
 33366              		.loc 1 4280 5 view .LVU8984
 33367 0012 9842     		cmp	r0, r3
ARM GAS  /tmp/cc0UaEmF.s 			page 838


 33368 0014 1CD2     		bcs	.L2438
 33369              	.LVL2586:
4280:src/xeq.c     **** 		return NULL;
 33370              		.loc 1 4280 5 view .LVU8985
 33371              	.LBE4616:
 33372              	.LBE4615:
4292:src/xeq.c     **** 		return 0;
 33373              		.loc 1 4292 2 is_stmt 1 view .LVU8986
4292:src/xeq.c     **** 		return 0;
 33374              		.loc 1 4292 5 is_stmt 0 view .LVU8987
 33375 0016 D0B1     		cbz	r0, .L2442
4295:src/xeq.c     **** 	XromRunning = 1;
 33376              		.loc 1 4295 2 is_stmt 1 view .LVU8988
4295:src/xeq.c     **** 	XromRunning = 1;
 33377              		.loc 1 4295 18 is_stmt 0 view .LVU8989
 33378 0018 124B     		ldr	r3, .L2446+8
 33379 001a 1B68     		ldr	r3, [r3]
4290:src/xeq.c     **** 	const s_opcode *xp = check_for_xrom_address(fp);
 33380              		.loc 1 4290 1 view .LVU8990
 33381 001c 70B5     		push	{r4, r5, r6, lr}
 33382              		.cfi_def_cfa_offset 16
 33383              		.cfi_offset 4, -16
 33384              		.cfi_offset 5, -12
 33385              		.cfi_offset 6, -8
 33386              		.cfi_offset 14, -4
4297:src/xeq.c     **** 	xeq_xrom();
 33387              		.loc 1 4297 9 view .LVU8991
 33388 001e 401A     		subs	r0, r0, r1
 33389              	.LVL2587:
4295:src/xeq.c     **** 	XromRunning = 1;
 33390              		.loc 1 4295 16 view .LVU8992
 33391 0020 114C     		ldr	r4, .L2446+12
4295:src/xeq.c     **** 	XromRunning = 1;
 33392              		.loc 1 4295 18 view .LVU8993
 33393 0022 B3F9DE67 		ldrsh	r6, [r3, #2014]
 33394 0026 2660     		str	r6, [r4]
4296:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
 33395              		.loc 1 4296 2 is_stmt 1 view .LVU8994
4297:src/xeq.c     **** 	xeq_xrom();
 33396              		.loc 1 4297 9 is_stmt 0 view .LVU8995
 33397 0028 4010     		asrs	r0, r0, #1
 33398              	.LVL2588:
4296:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
 33399              		.loc 1 4296 14 view .LVU8996
 33400 002a 0124     		movs	r4, #1
 33401 002c 0F4D     		ldr	r5, .L2446+16
4297:src/xeq.c     **** 	xeq_xrom();
 33402              		.loc 1 4297 2 view .LVU8997
 33403 002e B3F8E027 		ldrh	r2, [r3, #2016]
4296:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
 33404              		.loc 1 4296 14 view .LVU8998
 33405 0032 2C60     		str	r4, [r5]
4297:src/xeq.c     **** 	xeq_xrom();
 33406              		.loc 1 4297 2 is_stmt 1 view .LVU8999
4297:src/xeq.c     **** 	xeq_xrom();
 33407              		.loc 1 4297 9 is_stmt 0 view .LVU9000
 33408 0034 0130     		adds	r0, r0, #1
ARM GAS  /tmp/cc0UaEmF.s 			page 839


4297:src/xeq.c     **** 	xeq_xrom();
 33409              		.loc 1 4297 2 view .LVU9001
 33410 0036 40F44040 		orr	r0, r0, #49152
 33411 003a 2146     		mov	r1, r4
 33412 003c FFF7FEFF 		bl	gsbgto
 33413              	.LVL2589:
4298:src/xeq.c     **** 	return 1;
 33414              		.loc 1 4298 2 is_stmt 1 view .LVU9002
 33415              	.LBB4617:
 33416              	.LBI4617:
5264:src/xeq.c     **** 	// We split the routine in two parts for debugging only
 33417              		.loc 1 5264 6 view .LVU9003
 33418              	.LBB4618:
5266:src/xeq.c     **** 		xeq_xrom2();
 33419              		.loc 1 5266 2 view .LVU9004
5266:src/xeq.c     **** 		xeq_xrom2();
 33420              		.loc 1 5266 6 is_stmt 0 view .LVU9005
 33421 0040 0B4B     		ldr	r3, .L2446+20
5266:src/xeq.c     **** 		xeq_xrom2();
 33422              		.loc 1 5266 5 view .LVU9006
 33423 0042 93F91730 		ldrsb	r3, [r3, #23]
 33424 0046 002B     		cmp	r3, #0
 33425 0048 04DA     		bge	.L2445
 33426              	.LBE4618:
 33427              	.LBE4617:
4299:src/xeq.c     **** }
 33428              		.loc 1 4299 9 view .LVU9007
 33429 004a 2046     		mov	r0, r4
 33430              	.LVL2590:
4300:src/xeq.c     **** 
 33431              		.loc 1 4300 1 view .LVU9008
 33432 004c 70BD     		pop	{r4, r5, r6, pc}
 33433              	.LVL2591:
 33434              	.L2442:
 33435              		.cfi_def_cfa_offset 0
 33436              		.cfi_restore 4
 33437              		.cfi_restore 5
 33438              		.cfi_restore 6
 33439              		.cfi_restore 14
4300:src/xeq.c     **** 
 33440              		.loc 1 4300 1 view .LVU9009
 33441 004e 7047     		bx	lr
 33442              	.LVL2592:
 33443              	.L2438:
4293:src/xeq.c     **** 	// set_lift();
 33444              		.loc 1 4293 10 view .LVU9010
 33445 0050 0020     		movs	r0, #0
 33446              	.LVL2593:
4293:src/xeq.c     **** 	// set_lift();
 33447              		.loc 1 4293 10 view .LVU9011
 33448 0052 7047     		bx	lr
 33449              	.LVL2594:
 33450              	.L2445:
 33451              		.cfi_def_cfa_offset 16
 33452              		.cfi_offset 4, -16
 33453              		.cfi_offset 5, -12
 33454              		.cfi_offset 6, -8
ARM GAS  /tmp/cc0UaEmF.s 			page 840


 33455              		.cfi_offset 14, -4
 33456              	.LBB4620:
 33457              	.LBB4619:
5267:src/xeq.c     **** }
 33458              		.loc 1 5267 3 is_stmt 1 view .LVU9012
 33459 0054 FFF7FEFF 		bl	xeq_xrom2
 33460              	.LVL2595:
 33461              	.LBE4619:
 33462              	.LBE4620:
4299:src/xeq.c     **** }
 33463              		.loc 1 4299 9 is_stmt 0 view .LVU9013
 33464 0058 2046     		mov	r0, r4
4300:src/xeq.c     **** 
 33465              		.loc 1 4300 1 view .LVU9014
 33466 005a 70BD     		pop	{r4, r5, r6, pc}
 33467              	.L2447:
 33468              		.align	2
 33469              	.L2446:
 33470 005c 00000000 		.word	xrom
 33471 0060 00000000 		.word	xrom_size
 33472 0064 00000000 		.word	main_ram
 33473 0068 00000000 		.word	UserLocalRegs
 33474 006c 00000000 		.word	XromRunning
 33475 0070 00000000 		.word	StateWhileOn
 33476              		.cfi_endproc
 33477              	.LFE233:
 33479              		.section	.text.op_rs,"ax",%progbits
 33480              		.align	1
 33481              		.p2align 2,,3
 33482              		.global	op_rs
 33483              		.syntax unified
 33484              		.thumb
 33485              		.thumb_func
 33486              		.fpu fpv4-sp-d16
 33488              	op_rs:
 33489              	.LVL2596:
 33490              	.LFB252:
5363:src/xeq.c     **** #ifndef REALBUILD
 33491              		.loc 1 5363 27 is_stmt 1 view -0
 33492              		.cfi_startproc
 33493              		@ args = 0, pretend = 0, frame = 0
 33494              		@ frame_needed = 0, uses_anonymous_args = 0
5367:src/xeq.c     **** 		if (State2.trace && (Running || XromRunning)) {
 33495              		.loc 1 5367 2 view .LVU9016
 33496              	.LBB4621:
 33497              	.LBI4621:
 182:src/xeq.c     **** 	return isXROM(state_pc());
 33498              		.loc 1 182 5 view .LVU9017
 33499              	.LBB4622:
 183:src/xeq.c     **** }
 33500              		.loc 1 183 2 view .LVU9018
 33501              	.LBE4622:
 33502              	.LBE4621:
5363:src/xeq.c     **** #ifndef REALBUILD
 33503              		.loc 1 5363 27 is_stmt 0 view .LVU9019
 33504 0000 10B5     		push	{r4, lr}
 33505              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cc0UaEmF.s 			page 841


 33506              		.cfi_offset 4, -8
 33507              		.cfi_offset 14, -4
 33508              	.LBB4624:
 33509              	.LBB4623:
 183:src/xeq.c     **** }
 33510              		.loc 1 183 9 view .LVU9020
 33511 0002 1D4C     		ldr	r4, .L2458
 33512 0004 2268     		ldr	r2, [r4]
 33513 0006 B2F8E037 		ldrh	r3, [r2, #2016]
 33514              	.LBE4623:
 33515              	.LBE4624:
5367:src/xeq.c     **** 		if (State2.trace && (Running || XromRunning)) {
 33516              		.loc 1 5367 5 view .LVU9021
 33517 000a 9B0B     		lsrs	r3, r3, #14
 33518 000c 032B     		cmp	r3, #3
 33519 000e 20D0     		beq	.L2457
5377:src/xeq.c     **** 		set_running_off();
 33520              		.loc 1 5377 2 is_stmt 1 view .LVU9022
5377:src/xeq.c     **** 		set_running_off();
 33521              		.loc 1 5377 6 is_stmt 0 view .LVU9023
 33522 0010 1A4B     		ldr	r3, .L2458+4
5377:src/xeq.c     **** 		set_running_off();
 33523              		.loc 1 5377 5 view .LVU9024
 33524 0012 1968     		ldr	r1, [r3]
 33525 0014 61B1     		cbz	r1, .L2452
5378:src/xeq.c     **** 	else {
 33526              		.loc 1 5378 3 is_stmt 1 view .LVU9025
 33527              	.LBB4625:
 33528              	.LBI4625:
5580:src/xeq.c     **** 	set_running_off_sst();
 33529              		.loc 1 5580 6 view .LVU9026
 33530              	.LBB4626:
5581:src/xeq.c     **** 	State.entryp = 0;
 33531              		.loc 1 5581 2 view .LVU9027
 33532              	.LBB4627:
 33533              	.LBI4627:
5572:src/xeq.c     **** 	Running = 0;
 33534              		.loc 1 5572 6 view .LVU9028
 33535              	.LBB4628:
5573:src/xeq.c     **** }
 33536              		.loc 1 5573 2 view .LVU9029
5573:src/xeq.c     **** }
 33537              		.loc 1 5573 10 is_stmt 0 view .LVU9030
 33538 0016 0021     		movs	r1, #0
 33539 0018 1960     		str	r1, [r3]
 33540              	.LBE4628:
 33541              	.LBE4627:
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 33542              		.loc 1 5582 2 is_stmt 1 view .LVU9031
5582:src/xeq.c     **** 	dot( RCL_annun, 0);
 33543              		.loc 1 5582 15 is_stmt 0 view .LVU9032
 33544 001a 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
 33545 001e 61F30413 		bfi	r3, r1, #4, #1
 33546 0022 82F8DD37 		strb	r3, [r2, #2013]
5583:src/xeq.c     **** }
 33547              		.loc 1 5583 2 is_stmt 1 view .LVU9033
 33548              	.LBE4626:
ARM GAS  /tmp/cc0UaEmF.s 			page 842


 33549              	.LBE4625:
5384:src/xeq.c     **** 
 33550              		.loc 1 5384 1 is_stmt 0 view .LVU9034
 33551 0026 BDE81040 		pop	{r4, lr}
 33552              		.cfi_remember_state
 33553              		.cfi_restore 14
 33554              		.cfi_restore 4
 33555              		.cfi_def_cfa_offset 0
 33556              	.LBB4630:
 33557              	.LBB4629:
5583:src/xeq.c     **** }
 33558              		.loc 1 5583 2 view .LVU9035
 33559 002a 8A20     		movs	r0, #138
 33560              	.LVL2597:
5583:src/xeq.c     **** }
 33561              		.loc 1 5583 2 view .LVU9036
 33562 002c FFF7FEBF 		b	dot
 33563              	.LVL2598:
 33564              	.L2452:
 33565              		.cfi_restore_state
5583:src/xeq.c     **** }
 33566              		.loc 1 5583 2 view .LVU9037
 33567              	.LBE4629:
 33568              	.LBE4630:
5380:src/xeq.c     **** 		if (RetStkPtr == 0)
 33569              		.loc 1 5380 3 is_stmt 1 view .LVU9038
 33570 0030 FFF7FEFF 		bl	set_running_on
 33571              	.LVL2599:
5381:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
 33572              		.loc 1 5381 3 view .LVU9039
5381:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
 33573              		.loc 1 5381 7 is_stmt 0 view .LVU9040
 33574 0034 2368     		ldr	r3, [r4]
5381:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
 33575              		.loc 1 5381 6 view .LVU9041
 33576 0036 B3F9E227 		ldrsh	r2, [r3, #2018]
 33577 003a 4AB9     		cbnz	r2, .L2448
5382:src/xeq.c     **** 	}
 33578              		.loc 1 5382 4 is_stmt 1 view .LVU9042
5382:src/xeq.c     **** 	}
 33579              		.loc 1 5382 10 is_stmt 0 view .LVU9043
 33580 003c 104A     		ldr	r2, .L2458+8
5382:src/xeq.c     **** 	}
 33581              		.loc 1 5382 26 view .LVU9044
 33582 003e B3F8E017 		ldrh	r1, [r3, #2016]
5382:src/xeq.c     **** 	}
 33583              		.loc 1 5382 10 view .LVU9045
 33584 0042 1268     		ldr	r2, [r2]
5382:src/xeq.c     **** 	}
 33585              		.loc 1 5382 24 view .LVU9046
 33586 0044 4FF6FF70 		movw	r0, #65535
 33587 0048 A3F8E207 		strh	r0, [r3, #2018]	@ movhi
 33588 004c 22F8021C 		strh	r1, [r2, #-2]	@ movhi
 33589              	.L2448:
5384:src/xeq.c     **** 
 33590              		.loc 1 5384 1 view .LVU9047
 33591 0050 10BD     		pop	{r4, pc}
ARM GAS  /tmp/cc0UaEmF.s 			page 843


 33592              	.LVL2600:
 33593              	.L2457:
5368:src/xeq.c     **** 			Running = XromRunning = 0;
 33594              		.loc 1 5368 3 is_stmt 1 view .LVU9048
5368:src/xeq.c     **** 			Running = XromRunning = 0;
 33595              		.loc 1 5368 7 is_stmt 0 view .LVU9049
 33596 0052 0C4B     		ldr	r3, .L2458+12
5368:src/xeq.c     **** 			Running = XromRunning = 0;
 33597              		.loc 1 5368 6 view .LVU9050
 33598 0054 93F91730 		ldrsb	r3, [r3, #23]
 33599 0058 002B     		cmp	r3, #0
 33600 005a 09DA     		bge	.L2450
5368:src/xeq.c     **** 			Running = XromRunning = 0;
 33601              		.loc 1 5368 24 discriminator 1 view .LVU9051
 33602 005c 074B     		ldr	r3, .L2458+4
5368:src/xeq.c     **** 			Running = XromRunning = 0;
 33603              		.loc 1 5368 32 discriminator 1 view .LVU9052
 33604 005e 0A4A     		ldr	r2, .L2458+16
 33605 0060 1868     		ldr	r0, [r3]
 33606              	.LVL2601:
5368:src/xeq.c     **** 			Running = XromRunning = 0;
 33607              		.loc 1 5368 32 discriminator 1 view .LVU9053
 33608 0062 1168     		ldr	r1, [r2]
 33609 0064 0143     		orrs	r1, r0, r1
 33610 0066 03D0     		beq	.L2450
5369:src/xeq.c     **** 		}
 33611              		.loc 1 5369 4 is_stmt 1 view .LVU9054
5369:src/xeq.c     **** 		}
 33612              		.loc 1 5369 26 is_stmt 0 view .LVU9055
 33613 0068 0021     		movs	r1, #0
 33614 006a 1160     		str	r1, [r2]
5369:src/xeq.c     **** 		}
 33615              		.loc 1 5369 12 view .LVU9056
 33616 006c 1960     		str	r1, [r3]
5384:src/xeq.c     **** 
 33617              		.loc 1 5384 1 view .LVU9057
 33618 006e 10BD     		pop	{r4, pc}
 33619              	.L2450:
5372:src/xeq.c     **** 		}
 33620              		.loc 1 5372 4 is_stmt 1 view .LVU9058
5384:src/xeq.c     **** 
 33621              		.loc 1 5384 1 is_stmt 0 view .LVU9059
 33622 0070 BDE81040 		pop	{r4, lr}
 33623              		.cfi_restore 14
 33624              		.cfi_restore 4
 33625              		.cfi_def_cfa_offset 0
5372:src/xeq.c     **** 		}
 33626              		.loc 1 5372 4 view .LVU9060
 33627 0074 FFF7FEBF 		b	xeq_xrom2
 33628              	.LVL2602:
 33629              	.L2459:
 33630              		.align	2
 33631              	.L2458:
 33632 0078 00000000 		.word	main_ram
 33633 007c 00000000 		.word	Running
 33634 0080 00000000 		.word	RetStk
 33635 0084 00000000 		.word	StateWhileOn
ARM GAS  /tmp/cc0UaEmF.s 			page 844


 33636 0088 00000000 		.word	XromRunning
 33637              		.cfi_endproc
 33638              	.LFE252:
 33640              		.section	.text.xeqprog,"ax",%progbits
 33641              		.align	1
 33642              		.p2align 2,,3
 33643              		.global	xeqprog
 33644              		.syntax unified
 33645              		.thumb
 33646              		.thumb_func
 33647              		.fpu fpv4-sp-d16
 33649              	xeqprog:
 33650              	.LFB250:
5280:src/xeq.c     ****    int state = 0;
 33651              		.loc 1 5280 2 is_stmt 1 view -0
 33652              		.cfi_startproc
 33653              		@ args = 0, pretend = 0, frame = 0
 33654              		@ frame_needed = 0, uses_anonymous_args = 0
5281:src/xeq.c     ****    if (Running || Pause) {
 33655              		.loc 1 5281 4 view .LVU9062
 33656              	.LVL2603:
5282:src/xeq.c     **** 
 33657              		.loc 1 5282 4 view .LVU9063
5280:src/xeq.c     ****    int state = 0;
 33658              		.loc 1 5280 2 is_stmt 0 view .LVU9064
 33659 0000 38B5     		push	{r3, r4, r5, lr}
 33660              		.cfi_def_cfa_offset 16
 33661              		.cfi_offset 3, -16
 33662              		.cfi_offset 4, -12
 33663              		.cfi_offset 5, -8
 33664              		.cfi_offset 14, -4
5282:src/xeq.c     **** 
 33665              		.loc 1 5282 8 view .LVU9065
 33666 0002 184C     		ldr	r4, .L2485
 33667 0004 184D     		ldr	r5, .L2485+4
5282:src/xeq.c     **** 
 33668              		.loc 1 5282 7 view .LVU9066
 33669 0006 2368     		ldr	r3, [r4]
 33670 0008 0BB9     		cbnz	r3, .L2461
5282:src/xeq.c     **** 
 33671              		.loc 1 5282 16 discriminator 1 view .LVU9067
 33672 000a 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 33673 000c 9BB1     		cbz	r3, .L2466
 33674              	.L2461:
5288:src/xeq.c     **** #endif
 33675              		.loc 1 5288 6 is_stmt 1 view .LVU9068
 33676              	.LVL2604:
5292:src/xeq.c     ****      finish_RPN(); // RPN
 33677              		.loc 1 5292 6 view .LVU9069
 33678 000e 0121     		movs	r1, #1
 33679 0010 8A20     		movs	r0, #138
 33680 0012 FFF7FEFF 		bl	dot
 33681              	.LVL2605:
5293:src/xeq.c     **** 
 33682              		.loc 1 5293 6 view .LVU9070
 33683 0016 FFF7FEFF 		bl	finish_RPN
 33684              	.LVL2606:
ARM GAS  /tmp/cc0UaEmF.s 			page 845


5295:src/xeq.c     ****        xeq_single();
 33685              		.loc 1 5295 6 view .LVU9071
5295:src/xeq.c     ****        xeq_single();
 33686              		.loc 1 5295 12 is_stmt 0 view .LVU9072
 33687 001a 06E0     		b	.L2463
 33688              	.L2483:
5295:src/xeq.c     ****        xeq_single();
 33689              		.loc 1 5295 21 discriminator 1 view .LVU9073
 33690 001c 2368     		ldr	r3, [r4]
 33691 001e 53B1     		cbz	r3, .L2466
5296:src/xeq.c     ****        //       if (is_key_pressed() || (Ticker != last_ticker)) // flashes but empty loop 1/3 the 
 33692              		.loc 1 5296 8 view .LVU9074
 33693 0020 FFF7FEFF 		bl	xeq_single
 33694              	.LVL2607:
5298:src/xeq.c     **** 	 {
 33695              		.loc 1 5298 8 is_stmt 1 view .LVU9075
5298:src/xeq.c     **** 	 {
 33696              		.loc 1 5298 12 is_stmt 0 view .LVU9076
 33697 0024 FFF7FEFF 		bl	is_key_pressed
 33698              	.LVL2608:
5298:src/xeq.c     **** 	 {
 33699              		.loc 1 5298 11 view .LVU9077
 33700 0028 10B9     		cbnz	r0, .L2464
 33701              	.L2463:
5296:src/xeq.c     ****        //       if (is_key_pressed() || (Ticker != last_ticker)) // flashes but empty loop 1/3 the 
 33702              		.loc 1 5296 8 is_stmt 1 view .LVU9078
5295:src/xeq.c     ****        xeq_single();
 33703              		.loc 1 5295 12 view .LVU9079
5295:src/xeq.c     ****        xeq_single();
 33704              		.loc 1 5295 13 is_stmt 0 view .LVU9080
 33705 002a 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5295:src/xeq.c     ****        xeq_single();
 33706              		.loc 1 5295 12 view .LVU9081
 33707 002c 002B     		cmp	r3, #0
 33708 002e F5D0     		beq	.L2483
 33709              	.L2464:
5307:src/xeq.c     ****      // Program has terminated
 33710              		.loc 1 5307 4 is_stmt 1 view .LVU9082
5307:src/xeq.c     ****      // Program has terminated
 33711              		.loc 1 5307 7 is_stmt 0 view .LVU9083
 33712 0030 2368     		ldr	r3, [r4]
 33713 0032 03B1     		cbz	r3, .L2466
 33714              	.LVL2609:
 33715              	.L2460:
5321:src/xeq.c     **** 
 33716              		.loc 1 5321 2 view .LVU9084
 33717 0034 38BD     		pop	{r3, r4, r5, pc}
 33718              	.L2466:
5307:src/xeq.c     ****      // Program has terminated
 33719              		.loc 1 5307 4 is_stmt 1 view .LVU9085
5307:src/xeq.c     ****      // Program has terminated
 33720              		.loc 1 5307 21 is_stmt 0 view .LVU9086
 33721 0036 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5307:src/xeq.c     ****      // Program has terminated
 33722              		.loc 1 5307 18 view .LVU9087
 33723 0038 002B     		cmp	r3, #0
 33724 003a FBD1     		bne	.L2460
ARM GAS  /tmp/cc0UaEmF.s 			page 846


5309:src/xeq.c     ****      ShowRPN = 1;	// display() may turn it off again
 33725              		.loc 1 5309 6 is_stmt 1 view .LVU9088
5310:src/xeq.c     ****      display();
 33726              		.loc 1 5310 14 is_stmt 0 view .LVU9089
 33727 003c 0B4C     		ldr	r4, .L2485+8
5309:src/xeq.c     ****      ShowRPN = 1;	// display() may turn it off again
 33728              		.loc 1 5309 6 view .LVU9090
 33729 003e 8A20     		movs	r0, #138
 33730 0040 FFF7FEFF 		bl	clr_dot
 33731              	.LVL2610:
5310:src/xeq.c     ****      display();
 33732              		.loc 1 5310 6 is_stmt 1 view .LVU9091
5310:src/xeq.c     ****      display();
 33733              		.loc 1 5310 14 is_stmt 0 view .LVU9092
 33734 0044 0123     		movs	r3, #1
 33735 0046 2360     		str	r3, [r4]
5311:src/xeq.c     ****      if (ShowRPN) {
 33736              		.loc 1 5311 6 is_stmt 1 view .LVU9093
 33737 0048 FFF7FEFF 		bl	display
 33738              	.LVL2611:
5312:src/xeq.c     ****        set_dot(RPN);
 33739              		.loc 1 5312 6 view .LVU9094
5312:src/xeq.c     ****        set_dot(RPN);
 33740              		.loc 1 5312 9 is_stmt 0 view .LVU9095
 33741 004c 2368     		ldr	r3, [r4]
 33742 004e 1BB9     		cbnz	r3, .L2484
 33743              	.L2468:
5318:src/xeq.c     **** #endif
 33744              		.loc 1 5318 6 is_stmt 1 view .LVU9096
5318:src/xeq.c     **** #endif
 33745              		.loc 1 5318 18 is_stmt 0 view .LVU9097
 33746 0050 074B     		ldr	r3, .L2485+12
 33747 0052 0122     		movs	r2, #1
 33748 0054 1A60     		str	r2, [r3]
5321:src/xeq.c     **** 
 33749              		.loc 1 5321 2 view .LVU9098
 33750 0056 38BD     		pop	{r3, r4, r5, pc}
 33751              	.L2484:
5313:src/xeq.c     ****        finish_RPN(); // RPN
 33752              		.loc 1 5313 8 is_stmt 1 view .LVU9099
 33753 0058 8D20     		movs	r0, #141
 33754 005a FFF7FEFF 		bl	set_dot
 33755              	.LVL2612:
5314:src/xeq.c     ****      }
 33756              		.loc 1 5314 8 view .LVU9100
 33757 005e FFF7FEFF 		bl	finish_RPN
 33758              	.LVL2613:
 33759 0062 F5E7     		b	.L2468
 33760              	.L2486:
 33761              		.align	2
 33762              	.L2485:
 33763 0064 00000000 		.word	Running
 33764 0068 00000000 		.word	Pause
 33765 006c 00000000 		.word	ShowRPN
 33766 0070 00000000 		.word	JustStopped
 33767              		.cfi_endproc
 33768              	.LFE250:
ARM GAS  /tmp/cc0UaEmF.s 			page 847


 33770              		.section	.text.xeq_sst_bst,"ax",%progbits
 33771              		.align	1
 33772              		.p2align 2,,3
 33773              		.global	xeq_sst_bst
 33774              		.syntax unified
 33775              		.thumb
 33776              		.thumb_func
 33777              		.fpu fpv4-sp-d16
 33779              	xeq_sst_bst:
 33780              	.LVL2614:
 33781              	.LFB251:
5326:src/xeq.c     **** 	opcode op;
 33782              		.loc 1 5326 1 view -0
 33783              		.cfi_startproc
 33784              		@ args = 0, pretend = 0, frame = 0
 33785              		@ frame_needed = 0, uses_anonymous_args = 0
5327:src/xeq.c     **** 
 33786              		.loc 1 5327 2 view .LVU9102
5329:src/xeq.c     **** 	if (kind == -1)
 33787              		.loc 1 5329 2 view .LVU9103
 33788              	.LBB4631:
 33789              	.LBI4631:
4227:src/xeq.c     **** 	// extern int IntMaxWindow;
 33790              		.loc 1 4227 6 view .LVU9104
 33791              	.LBB4632:
4230:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 33792              		.loc 1 4230 2 view .LVU9105
 33793              	.LBE4632:
 33794              	.LBE4631:
5326:src/xeq.c     **** 	opcode op;
 33795              		.loc 1 5326 1 is_stmt 0 view .LVU9106
 33796 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 33797              		.cfi_def_cfa_offset 24
 33798              		.cfi_offset 4, -24
 33799              		.cfi_offset 5, -20
 33800              		.cfi_offset 6, -16
 33801              		.cfi_offset 7, -12
 33802              		.cfi_offset 8, -8
 33803              		.cfi_offset 14, -4
 33804              	.LBB4635:
 33805              	.LBB4633:
4230:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 33806              		.loc 1 4230 16 view .LVU9107
 33807 0004 254C     		ldr	r4, .L2500
 33808 0006 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
4231:src/xeq.c     **** }
 33809              		.loc 1 4231 15 view .LVU9108
 33810 0008 0026     		movs	r6, #0
4230:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 33811              		.loc 1 4230 16 view .LVU9109
 33812 000a 6FF3C503 		bfc	r3, #3, #3
 33813              	.LBE4633:
 33814              	.LBE4635:
5330:src/xeq.c     **** 		decpc();
 33815              		.loc 1 5330 5 view .LVU9110
 33816 000e 411C     		adds	r1, r0, #1
 33817              	.LBB4636:
ARM GAS  /tmp/cc0UaEmF.s 			page 848


 33818              	.LBB4634:
4230:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 33819              		.loc 1 4230 16 view .LVU9111
 33820 0010 2375     		strb	r3, [r4, #20]
4231:src/xeq.c     **** }
 33821              		.loc 1 4231 2 is_stmt 1 view .LVU9112
4231:src/xeq.c     **** }
 33822              		.loc 1 4231 15 is_stmt 0 view .LVU9113
 33823 0012 6674     		strb	r6, [r4, #17]
 33824              	.LBE4634:
 33825              	.LBE4636:
5330:src/xeq.c     **** 		decpc();
 33826              		.loc 1 5330 2 is_stmt 1 view .LVU9114
5330:src/xeq.c     **** 		decpc();
 33827              		.loc 1 5330 5 is_stmt 0 view .LVU9115
 33828 0014 30D0     		beq	.L2496
5333:src/xeq.c     **** 		// Display the step
 33829              		.loc 1 5333 2 is_stmt 1 view .LVU9116
5333:src/xeq.c     **** 		// Display the step
 33830              		.loc 1 5333 6 is_stmt 0 view .LVU9117
 33831 0016 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
5333:src/xeq.c     **** 		// Display the step
 33832              		.loc 1 5333 5 view .LVU9118
 33833 0018 5B06     		lsls	r3, r3, #25
 33834 001a 0546     		mov	r5, r0
 33835 001c 08D4     		bmi	.L2497
5352:src/xeq.c     **** 		// Key down in program mode
 33836              		.loc 1 5352 7 is_stmt 1 view .LVU9119
5352:src/xeq.c     **** 		// Key down in program mode
 33837              		.loc 1 5352 10 is_stmt 0 view .LVU9120
 33838 001e 08B1     		cbz	r0, .L2498
 33839              	.LVL2615:
 33840              	.L2487:
5357:src/xeq.c     **** 
 33841              		.loc 1 5357 1 view .LVU9121
 33842 0020 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 33843              	.LVL2616:
 33844              	.L2498:
5354:src/xeq.c     **** 		OpCode = 0;
 33845              		.loc 1 5354 3 is_stmt 1 view .LVU9122
 33846 0024 FFF7FEFF 		bl	incpc
 33847              	.LVL2617:
5355:src/xeq.c     **** 	}
 33848              		.loc 1 5355 3 view .LVU9123
5355:src/xeq.c     **** 	}
 33849              		.loc 1 5355 10 is_stmt 0 view .LVU9124
 33850 0028 1D4B     		ldr	r3, .L2500+4
 33851 002a 1D60     		str	r5, [r3]
5357:src/xeq.c     **** 
 33852              		.loc 1 5357 1 view .LVU9125
 33853 002c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 33854              	.LVL2618:
 33855              	.L2497:
5335:src/xeq.c     **** 		print_step(op);
 33856              		.loc 1 5335 3 is_stmt 1 view .LVU9126
5335:src/xeq.c     **** 		print_step(op);
 33857              		.loc 1 5335 16 is_stmt 0 view .LVU9127
ARM GAS  /tmp/cc0UaEmF.s 			page 849


 33858 0030 1C4B     		ldr	r3, .L2500+8
 33859 0032 1B68     		ldr	r3, [r3]
5335:src/xeq.c     **** 		print_step(op);
 33860              		.loc 1 5335 8 view .LVU9128
 33861 0034 B3F8E007 		ldrh	r0, [r3, #2016]
 33862              	.LVL2619:
5335:src/xeq.c     **** 		print_step(op);
 33863              		.loc 1 5335 8 view .LVU9129
 33864 0038 FFF7FEFF 		bl	getprog
 33865              	.LVL2620:
 33866 003c 0746     		mov	r7, r0
 33867              	.LVL2621:
5336:src/xeq.c     **** 		if (kind == 1) {
 33868              		.loc 1 5336 3 is_stmt 1 view .LVU9130
 33869 003e FFF7FEFF 		bl	print_step
 33870              	.LVL2622:
5337:src/xeq.c     **** 			// Execute the step on key up
 33871              		.loc 1 5337 3 view .LVU9131
5337:src/xeq.c     **** 			// Execute the step on key up
 33872              		.loc 1 5337 6 is_stmt 0 view .LVU9132
 33873 0042 012D     		cmp	r5, #1
 33874 0044 ECD1     		bne	.L2487
5340:src/xeq.c     **** #endif
 33875              		.loc 1 5340 4 is_stmt 1 view .LVU9133
5340:src/xeq.c     **** #endif
 33876              		.loc 1 5340 15 is_stmt 0 view .LVU9134
 33877 0046 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
 33878              	.LBB4637:
 33879              	.LBB4638:
5577:src/xeq.c     **** }
 33880              		.loc 1 5577 10 view .LVU9135
 33881 0048 DFF85C80 		ldr	r8, .L2500+12
 33882              	.LBE4638:
 33883              	.LBE4637:
5340:src/xeq.c     **** #endif
 33884              		.loc 1 5340 15 view .LVU9136
 33885 004c 43F00203 		orr	r3, r3, #2
 33886 0050 2376     		strb	r3, [r4, #24]
5342:src/xeq.c     **** 			incpc();
 33887              		.loc 1 5342 4 is_stmt 1 view .LVU9137
 33888              	.LBB4640:
 33889              	.LBI4637:
5576:src/xeq.c     **** 	Running = 1;
 33890              		.loc 1 5576 6 view .LVU9138
 33891              	.LBB4639:
5577:src/xeq.c     **** }
 33892              		.loc 1 5577 2 view .LVU9139
5577:src/xeq.c     **** }
 33893              		.loc 1 5577 10 is_stmt 0 view .LVU9140
 33894 0052 C8F80050 		str	r5, [r8]
 33895              	.LBE4639:
 33896              	.LBE4640:
5343:src/xeq.c     **** 			xeq(op);
 33897              		.loc 1 5343 4 is_stmt 1 view .LVU9141
 33898 0056 FFF7FEFF 		bl	incpc
 33899              	.LVL2623:
5344:src/xeq.c     **** #ifndef REALBUILD
ARM GAS  /tmp/cc0UaEmF.s 			page 850


 33900              		.loc 1 5344 4 view .LVU9142
 33901 005a 3846     		mov	r0, r7
 33902 005c FFF7FEFF 		bl	xeq
 33903              	.LVL2624:
5346:src/xeq.c     **** #endif
 33904              		.loc 1 5346 4 view .LVU9143
5346:src/xeq.c     **** #endif
 33905              		.loc 1 5346 15 is_stmt 0 view .LVU9144
 33906 0060 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
 33907              	.LBB4641:
 33908              	.LBB4642:
5266:src/xeq.c     **** 		xeq_xrom2();
 33909              		.loc 1 5266 5 view .LVU9145
 33910 0062 94F91720 		ldrsb	r2, [r4, #23]
 33911              	.LBE4642:
 33912              	.LBE4641:
5346:src/xeq.c     **** #endif
 33913              		.loc 1 5346 15 view .LVU9146
 33914 0066 66F34103 		bfi	r3, r6, #1, #1
 33915              	.LBB4646:
 33916              	.LBB4643:
5266:src/xeq.c     **** 		xeq_xrom2();
 33917              		.loc 1 5266 5 view .LVU9147
 33918 006a 002A     		cmp	r2, #0
 33919              	.LBE4643:
 33920              	.LBE4646:
5346:src/xeq.c     **** #endif
 33921              		.loc 1 5346 15 view .LVU9148
 33922 006c 2376     		strb	r3, [r4, #24]
5348:src/xeq.c     **** 			set_running_off_sst();
 33923              		.loc 1 5348 4 is_stmt 1 view .LVU9149
 33924              	.LBB4647:
 33925              	.LBI4641:
5264:src/xeq.c     **** 	// We split the routine in two parts for debugging only
 33926              		.loc 1 5264 6 view .LVU9150
 33927              	.LBB4644:
5266:src/xeq.c     **** 		xeq_xrom2();
 33928              		.loc 1 5266 2 view .LVU9151
5266:src/xeq.c     **** 		xeq_xrom2();
 33929              		.loc 1 5266 5 is_stmt 0 view .LVU9152
 33930 006e 12DA     		bge	.L2499
 33931              	.L2494:
 33932              	.LBE4644:
 33933              	.LBE4647:
5349:src/xeq.c     **** 		}
 33934              		.loc 1 5349 4 is_stmt 1 view .LVU9153
 33935              	.LBB4648:
 33936              	.LBI4648:
5572:src/xeq.c     **** 	Running = 0;
 33937              		.loc 1 5572 6 view .LVU9154
 33938              	.LBB4649:
5573:src/xeq.c     **** }
 33939              		.loc 1 5573 2 view .LVU9155
5573:src/xeq.c     **** }
 33940              		.loc 1 5573 10 is_stmt 0 view .LVU9156
 33941 0070 0023     		movs	r3, #0
 33942 0072 C8F80030 		str	r3, [r8]
ARM GAS  /tmp/cc0UaEmF.s 			page 851


5574:src/xeq.c     **** 
 33943              		.loc 1 5574 1 view .LVU9157
 33944 0076 D3E7     		b	.L2487
 33945              	.LVL2625:
 33946              	.L2496:
5574:src/xeq.c     **** 
 33947              		.loc 1 5574 1 view .LVU9158
 33948              	.LBE4649:
 33949              	.LBE4648:
5331:src/xeq.c     **** 
 33950              		.loc 1 5331 3 is_stmt 1 view .LVU9159
 33951 0078 FFF7FEFF 		bl	decpc
 33952              	.LVL2626:
5333:src/xeq.c     **** 		// Display the step
 33953              		.loc 1 5333 2 view .LVU9160
5333:src/xeq.c     **** 		// Display the step
 33954              		.loc 1 5333 6 is_stmt 0 view .LVU9161
 33955 007c A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
5333:src/xeq.c     **** 		// Display the step
 33956              		.loc 1 5333 5 view .LVU9162
 33957 007e 5A06     		lsls	r2, r3, #25
 33958 0080 CED5     		bpl	.L2487
5335:src/xeq.c     **** 		print_step(op);
 33959              		.loc 1 5335 3 is_stmt 1 view .LVU9163
5335:src/xeq.c     **** 		print_step(op);
 33960              		.loc 1 5335 16 is_stmt 0 view .LVU9164
 33961 0082 084B     		ldr	r3, .L2500+8
 33962 0084 1B68     		ldr	r3, [r3]
5335:src/xeq.c     **** 		print_step(op);
 33963              		.loc 1 5335 8 view .LVU9165
 33964 0086 B3F8E007 		ldrh	r0, [r3, #2016]
 33965 008a FFF7FEFF 		bl	getprog
 33966              	.LVL2627:
5336:src/xeq.c     **** 		if (kind == 1) {
 33967              		.loc 1 5336 3 is_stmt 1 view .LVU9166
5357:src/xeq.c     **** 
 33968              		.loc 1 5357 1 is_stmt 0 view .LVU9167
 33969 008e BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 33970              		.cfi_remember_state
 33971              		.cfi_restore 14
 33972              		.cfi_restore 8
 33973              		.cfi_restore 7
 33974              		.cfi_restore 6
 33975              		.cfi_restore 5
 33976              		.cfi_restore 4
 33977              		.cfi_def_cfa_offset 0
5336:src/xeq.c     **** 		if (kind == 1) {
 33978              		.loc 1 5336 3 view .LVU9168
 33979 0092 FFF7FEBF 		b	print_step
 33980              	.LVL2628:
 33981              	.L2499:
 33982              		.cfi_restore_state
 33983              	.LBB4650:
 33984              	.LBB4645:
5267:src/xeq.c     **** }
 33985              		.loc 1 5267 3 is_stmt 1 view .LVU9169
 33986 0096 FFF7FEFF 		bl	xeq_xrom2
ARM GAS  /tmp/cc0UaEmF.s 			page 852


 33987              	.LVL2629:
 33988 009a E9E7     		b	.L2494
 33989              	.L2501:
 33990              		.align	2
 33991              	.L2500:
 33992 009c 00000000 		.word	StateWhileOn
 33993 00a0 00000000 		.word	OpCode
 33994 00a4 00000000 		.word	main_ram
 33995 00a8 00000000 		.word	Running
 33996              	.LBE4645:
 33997              	.LBE4650:
 33998              		.cfi_endproc
 33999              	.LFE251:
 34001              		.section	.text.init_34s,"ax",%progbits
 34002              		.align	1
 34003              		.p2align 2,,3
 34004              		.global	init_34s
 34005              		.syntax unified
 34006              		.thumb
 34007              		.thumb_func
 34008              		.fpu fpv4-sp-d16
 34010              	init_34s:
 34011              	.LFB268:
6102:src/xeq.c     **** 
6103:src/xeq.c     **** 
6104:src/xeq.c     **** /*
6105:src/xeq.c     ****  *  Debugging output for the console version
6106:src/xeq.c     ****  */
6107:src/xeq.c     **** #if defined(DEBUG) && defined(CONSOLE) && !defined(WP34STEST)
6108:src/xeq.c     **** extern unsigned char remap_chars(unsigned char ch);
6109:src/xeq.c     **** 
6110:src/xeq.c     **** static int compare(s_opcode a1, s_opcode a2, int cata) {
6111:src/xeq.c     **** 	char b1[16], b2[16];
6112:src/xeq.c     **** 	const unsigned char *s1, *s2;
6113:src/xeq.c     **** 	int i;
6114:src/xeq.c     **** 
6115:src/xeq.c     **** 	xset(b1, 0, sizeof(b1));
6116:src/xeq.c     **** 	xset(b2, 0, sizeof(b2));
6117:src/xeq.c     **** 	s1 = (unsigned char *)catcmd(a1, b1);
6118:src/xeq.c     **** 	s2 = (unsigned char *)catcmd(a2, b2);
6119:src/xeq.c     **** 	if (*s1 == COMPLEX_PREFIX) s1++;
6120:src/xeq.c     **** 	if (*s2 == COMPLEX_PREFIX) s2++;
6121:src/xeq.c     **** 
6122:src/xeq.c     **** 	for (i=0;;i++) {
6123:src/xeq.c     **** 		unsigned char c1 = *s1++;
6124:src/xeq.c     **** 		unsigned char c2 = *s2++;
6125:src/xeq.c     **** 		c1 = remap_chars(c1);
6126:src/xeq.c     **** 		c2 = remap_chars(c2);
6127:src/xeq.c     **** 
6128:src/xeq.c     **** 		if (c1 != c2) {
6129:src/xeq.c     **** 			if (c1 > c2) {
6130:src/xeq.c     **** 				return 1;
6131:src/xeq.c     **** 			}
6132:src/xeq.c     **** 			return 0;
6133:src/xeq.c     **** 		} else if (c1 == '\0')
6134:src/xeq.c     **** 			break;
6135:src/xeq.c     **** 	}
ARM GAS  /tmp/cc0UaEmF.s 			page 853


6136:src/xeq.c     **** 	return 0;
6137:src/xeq.c     **** }
6138:src/xeq.c     **** 
6139:src/xeq.c     **** static void check_cat(const enum catalogues cata, const char *name) {
6140:src/xeq.c     **** 	int i;
6141:src/xeq.c     **** 	char b1[16], b2[16];
6142:src/xeq.c     **** 	const int oldcata = State2.catalogue;
6143:src/xeq.c     **** 	int n;
6144:src/xeq.c     **** 
6145:src/xeq.c     **** 	State2.catalogue = cata;
6146:src/xeq.c     **** 	n = current_catalogue_max();
6147:src/xeq.c     **** 	for (i=1; i<n; i++) {
6148:src/xeq.c     **** 		opcode cold = current_catalogue(i-1);
6149:src/xeq.c     **** 		opcode c = current_catalogue(i);
6150:src/xeq.c     **** 		if (compare(cold, c, cata))
6151:src/xeq.c     **** 			error("catalogue %s row %04x / %04x  %d / %d: %04o / %04o (%s / %s)", name, cold, c, i-1, i,
6152:src/xeq.c     **** 					0xff & cold, 0xff & c,
6153:src/xeq.c     **** 					catcmd(cold, b1), catcmd(c, b2));
6154:src/xeq.c     **** 	}
6155:src/xeq.c     **** 	State2.catalogue = oldcata;
6156:src/xeq.c     **** }
6157:src/xeq.c     **** 
6158:src/xeq.c     **** static void check_const_cat(void) {
6159:src/xeq.c     **** 	int i;
6160:src/xeq.c     **** 	char b1[16], b2[16];
6161:src/xeq.c     **** 	char p1[64], p2[64];
6162:src/xeq.c     **** 
6163:src/xeq.c     **** 	for (i=1; i<NUM_CONSTS_CAT; i++) {
6164:src/xeq.c     **** 		if (compare(CONST(i-1), CONST(i), 0)) {
6165:src/xeq.c     **** 			prettify(catcmd(CONST(i-1), b1), p1, 0);
6166:src/xeq.c     **** 			prettify(catcmd(CONST(i), b2), p2, 0);
6167:src/xeq.c     **** 			error("constants row %d / %d: %s / %s", i, i+1, p1, p2);
6168:src/xeq.c     **** 		}
6169:src/xeq.c     **** 	}
6170:src/xeq.c     **** }
6171:src/xeq.c     **** 
6172:src/xeq.c     **** static void bad_table(const char *t, int row, const char *n, int nlen) {
6173:src/xeq.c     **** 	char buf[64], name[20];
6174:src/xeq.c     **** 	int i;
6175:src/xeq.c     **** 
6176:src/xeq.c     **** 	for (i=0; i<nlen; i++)
6177:src/xeq.c     **** 		name[i] = n[i];
6178:src/xeq.c     **** 	name[nlen] = '\0';
6179:src/xeq.c     **** 	prettify(name, buf, 0);
6180:src/xeq.c     **** 	error("%s table row %d: %6s", t, row, buf);
6181:src/xeq.c     **** }
6182:src/xeq.c     **** 
6183:src/xeq.c     **** #endif
6184:src/xeq.c     **** 
6185:src/xeq.c     **** /* Main initialisation routine that sets things up for us.
6186:src/xeq.c     ****  * Returns a nonzero result if it has cleared ram.
6187:src/xeq.c     ****  */
6188:src/xeq.c     **** int init_34s(void)
6189:src/xeq.c     **** {
 34012              		.loc 1 6189 1 view -0
 34013              		.cfi_startproc
 34014              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc0UaEmF.s 			page 854


 34015              		@ frame_needed = 0, uses_anonymous_args = 0
6190:src/xeq.c     **** 	const int cleared = checksum_all();
 34016              		.loc 1 6190 2 view .LVU9171
6189:src/xeq.c     **** 	const int cleared = checksum_all();
 34017              		.loc 1 6189 1 is_stmt 0 view .LVU9172
 34018 0000 10B5     		push	{r4, lr}
 34019              		.cfi_def_cfa_offset 8
 34020              		.cfi_offset 4, -8
 34021              		.cfi_offset 14, -4
 34022              		.loc 1 6190 22 view .LVU9173
 34023 0002 FFF7FEFF 		bl	checksum_ram
 34024              	.LVL2630:
6191:src/xeq.c     **** 	if (cleared) {
 34025              		.loc 1 6191 2 is_stmt 1 view .LVU9174
 34026              		.loc 1 6191 5 is_stmt 0 view .LVU9175
 34027 0006 0446     		mov	r4, r0
 34028 0008 58B9     		cbnz	r0, .L2508
 34029              	.LVL2631:
 34030              	.L2503:
6192:src/xeq.c     **** 		reset();
6193:src/xeq.c     **** 	}
6194:src/xeq.c     **** 	init_state();
 34031              		.loc 1 6194 2 is_stmt 1 view .LVU9176
 34032 000a FFF7FEFF 		bl	init_state
 34033              	.LVL2632:
6195:src/xeq.c     **** 	xeq_init_contexts();
 34034              		.loc 1 6195 2 view .LVU9177
 34035 000e FFF7FEFF 		bl	xeq_init_contexts
 34036              	.LVL2633:
6196:src/xeq.c     **** 	ShowRPN = 1;
 34037              		.loc 1 6196 2 view .LVU9178
 34038              		.loc 1 6196 10 is_stmt 0 view .LVU9179
 34039 0012 054B     		ldr	r3, .L2509
 34040 0014 0122     		movs	r2, #1
6197:src/xeq.c     **** 	set_dot(RPN);
 34041              		.loc 1 6197 2 view .LVU9180
 34042 0016 8D20     		movs	r0, #141
6196:src/xeq.c     **** 	ShowRPN = 1;
 34043              		.loc 1 6196 10 view .LVU9181
 34044 0018 1A60     		str	r2, [r3]
 34045              		.loc 1 6197 2 is_stmt 1 view .LVU9182
 34046 001a FFF7FEFF 		bl	set_dot
 34047              	.LVL2634:
6198:src/xeq.c     **** 
6199:src/xeq.c     **** #ifdef INCLUDE_STOPWATCH
6200:src/xeq.c     **** 	StopWatchRunning = 0;
6201:src/xeq.c     **** #endif
6202:src/xeq.c     **** #if defined(CONSOLE) && !defined(WP34STEST) && defined(DEBUG)
6203:src/xeq.c     **** 	{
6204:src/xeq.c     **** 		int i;
6205:src/xeq.c     **** 	/* Sanity check the function table indices.
6206:src/xeq.c     **** 	 * These indicies must correspond exactly with the enum definition.
6207:src/xeq.c     **** 	 * This code validates that this is true and prints error messages
6208:src/xeq.c     **** 	 * if it isn't.
6209:src/xeq.c     **** 	 */
6210:src/xeq.c     **** 	for (i=0; i<NUM_MONADIC; i++)
6211:src/xeq.c     **** 		if (monfuncs[i].n != i)
ARM GAS  /tmp/cc0UaEmF.s 			page 855


6212:src/xeq.c     **** 			bad_table("monadic function", i, monfuncs[i].fname, NAME_LEN);
6213:src/xeq.c     **** 	for (i=0; i<NUM_DYADIC; i++)
6214:src/xeq.c     **** 		if (dyfuncs[i].n != i)
6215:src/xeq.c     **** 			bad_table("dyadic function", i, dyfuncs[i].fname, NAME_LEN);
6216:src/xeq.c     **** 	for (i=0; i<NUM_TRIADIC; i++)
6217:src/xeq.c     **** 		if (trifuncs[i].n != i)
6218:src/xeq.c     **** 			bad_table("triadic function", i, trifuncs[i].fname, NAME_LEN);
6219:src/xeq.c     **** 	for (i=0; i<NUM_NILADIC; i++)
6220:src/xeq.c     **** 		if (niladics[i].n != i)
6221:src/xeq.c     **** 			bad_table("niladic function", i, niladics[i].nname, NAME_LEN);
6222:src/xeq.c     **** 	for (i=0; i<NUM_RARG; i++)
6223:src/xeq.c     **** 		if (argcmds[i].n != i)
6224:src/xeq.c     **** 			bad_table("argument command", i, argcmds[i].cmd, NAME_LEN);
6225:src/xeq.c     **** 	for (i=0; i<NUM_MULTI; i++)
6226:src/xeq.c     **** 		if (multicmds[i].n != i)
6227:src/xeq.c     **** 			bad_table("multi command", i, multicmds[i].cmd, NAME_LEN);
6228:src/xeq.c     **** 	check_const_cat();
6229:src/xeq.c     **** 	check_cat(CATALOGUE_COMPLEX, "complex");
6230:src/xeq.c     **** 	check_cat(CATALOGUE_STATS, "statistics");
6231:src/xeq.c     **** 	check_cat(CATALOGUE_SUMS, "summations");
6232:src/xeq.c     **** 	check_cat(CATALOGUE_PROB, "probability");
6233:src/xeq.c     **** 	check_cat(CATALOGUE_PROG, "programme");
6234:src/xeq.c     **** 	check_cat(CATALOGUE_MODE, "mode");
6235:src/xeq.c     **** 	check_cat(CATALOGUE_TEST, "tests");
6236:src/xeq.c     **** 	check_cat(CATALOGUE_INT, "int");
6237:src/xeq.c     **** 	check_cat(CATALOGUE_MATRIX, "matrix");
6238:src/xeq.c     **** 	/*
6239:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA, "alpha");
6240:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_LETTERS, "alpha special upper case letters");
6241:src/xeq.c     **** 	// check_cat(CATALOGUE_ALPHA_LETTERS_LOWER, "alpha special lower letters");
6242:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_SUBSCRIPTS, "alpha subscripts");
6243:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_SYMBOLS, "alpha symbols");
6244:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_COMPARES, "alpha compares");
6245:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_ARROWS, "alpha arrows");
6246:src/xeq.c     **** 	*/
6247:src/xeq.c     **** 	check_cat(CATALOGUE_CONV, "conversion");
6248:src/xeq.c     **** 	check_cat(CATALOGUE_NORMAL, "float");
6249:src/xeq.c     **** #ifdef INCLUDE_INTERNAL_CATALOGUE
6250:src/xeq.c     **** 	check_cat(CATALOGUE_INTERNAL, "internal");
6251:src/xeq.c     **** #endif
6252:src/xeq.c     ****         if (sizeof(unsigned long long int) != sizeof(UState))
6253:src/xeq.c     ****             error("sizeof register (%u) != sizeof user state (%u)\n", sizeof(unsigned long long int
6254:src/xeq.c     **** 	}
6255:src/xeq.c     **** #endif
6256:src/xeq.c     **** 	return cleared;
 34048              		.loc 1 6256 2 view .LVU9183
6257:src/xeq.c     **** }
 34049              		.loc 1 6257 1 is_stmt 0 view .LVU9184
 34050 001e 2046     		mov	r0, r4
 34051 0020 10BD     		pop	{r4, pc}
 34052              	.LVL2635:
 34053              	.L2508:
6192:src/xeq.c     **** 	}
 34054              		.loc 1 6192 3 is_stmt 1 view .LVU9185
 34055 0022 FFF7FEFF 		bl	reset
 34056              	.LVL2636:
6192:src/xeq.c     **** 	}
ARM GAS  /tmp/cc0UaEmF.s 			page 856


 34057              		.loc 1 6192 3 is_stmt 0 view .LVU9186
 34058 0026 F0E7     		b	.L2503
 34059              	.L2510:
 34060              		.align	2
 34061              	.L2509:
 34062 0028 00000000 		.word	ShowRPN
 34063              		.cfi_endproc
 34064              	.LFE268:
 34066              		.section	.rodata.paste_raw_x.str1.4,"aMS",%progbits,1
 34067              		.align	2
 34068              	.LC9:
 34069 0000 0D0A0920 		.ascii	"\015\012\011 :;\000"
 34069      3A3B00
 34070              		.section	.text.paste_raw_x,"ax",%progbits
 34071              		.align	1
 34072              		.p2align 2,,3
 34073              		.global	paste_raw_x
 34074              		.syntax unified
 34075              		.thumb
 34076              		.thumb_func
 34077              		.fpu fpv4-sp-d16
 34079              	paste_raw_x:
 34080              	.LVL2637:
 34081              	.LFB269:
6258:src/xeq.c     **** 
6259:src/xeq.c     **** #ifndef REALBUILD
6260:src/xeq.c     **** 
6261:src/xeq.c     **** #include "string.h"
6262:src/xeq.c     **** 
6263:src/xeq.c     **** void paste_raw_x(const char *in)
6264:src/xeq.c     **** {
 34082              		.loc 1 6264 1 is_stmt 1 view -0
 34083              		.cfi_startproc
 34084              		@ args = 0, pretend = 0, frame = 40
 34085              		@ frame_needed = 0, uses_anonymous_args = 0
6265:src/xeq.c     **** 	char *buffer = strdup( in );
 34086              		.loc 1 6265 2 view .LVU9188
6264:src/xeq.c     **** 	char *buffer = strdup( in );
 34087              		.loc 1 6264 1 is_stmt 0 view .LVU9189
 34088 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 34089              		.cfi_def_cfa_offset 32
 34090              		.cfi_offset 4, -32
 34091              		.cfi_offset 5, -28
 34092              		.cfi_offset 6, -24
 34093              		.cfi_offset 7, -20
 34094              		.cfi_offset 8, -16
 34095              		.cfi_offset 9, -12
 34096              		.cfi_offset 10, -8
 34097              		.cfi_offset 14, -4
 34098 0004 8AB0     		sub	sp, sp, #40
 34099              		.cfi_def_cfa_offset 72
 34100              		.loc 1 6265 17 view .LVU9190
 34101 0006 FFF7FEFF 		bl	strdup
 34102              	.LVL2638:
6266:src/xeq.c     **** 
6267:src/xeq.c     **** 	if ( buffer ) {
 34103              		.loc 1 6267 2 is_stmt 1 view .LVU9191
ARM GAS  /tmp/cc0UaEmF.s 			page 857


 34104              		.loc 1 6267 5 is_stmt 0 view .LVU9192
 34105 000a 0028     		cmp	r0, #0
 34106 000c 5CD0     		beq	.L2512
 34107              	.LBB4651:
6268:src/xeq.c     **** 		static const char *delim = "\r\n\t :;";
 34108              		.loc 1 6268 3 is_stmt 1 view .LVU9193
6269:src/xeq.c     **** 		char *p = strtok( buffer, delim );
 34109              		.loc 1 6269 3 view .LVU9194
 34110              	.LBB4652:
 34111              	.LBB4653:
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 34112              		.loc 1 1043 6 is_stmt 0 view .LVU9195
 34113 000e 394D     		ldr	r5, .L2547
 34114              	.LBE4653:
 34115              	.LBE4652:
 34116              		.loc 1 6269 13 view .LVU9196
 34117 0010 3949     		ldr	r1, .L2547+4
 34118 0012 8146     		mov	r9, r0
 34119 0014 FFF7FEFF 		bl	strtok
 34120              	.LVL2639:
 34121              	.LBB4657:
 34122              	.LBB4654:
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 34123              		.loc 1 1043 5 view .LVU9197
 34124 0018 2B7F     		ldrb	r3, [r5, #28]	@ zero_extendqisi2
 34125              	.LBE4654:
 34126              	.LBE4657:
 34127              		.loc 1 6269 13 view .LVU9198
 34128 001a 0446     		mov	r4, r0
 34129              	.LVL2640:
6270:src/xeq.c     **** 		process_cmdline();
 34130              		.loc 1 6270 3 is_stmt 1 view .LVU9199
 34131              	.LBB4658:
 34132              	.LBI4652:
1040:src/xeq.c     **** 	decNumber a, b, x, t;
 34133              		.loc 1 1040 6 view .LVU9200
 34134              	.LBB4655:
1041:src/xeq.c     **** 
 34135              		.loc 1 1041 2 view .LVU9201
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 34136              		.loc 1 1043 2 view .LVU9202
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 34137              		.loc 1 1043 5 is_stmt 0 view .LVU9203
 34138 001c 002B     		cmp	r3, #0
 34139 001e 5ED1     		bne	.L2543
 34140              	.LVL2641:
 34141              	.L2513:
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 34142              		.loc 1 1043 5 view .LVU9204
 34143              	.LBE4655:
 34144              	.LBE4658:
6271:src/xeq.c     **** 		while ( p ) {
 34145              		.loc 1 6271 9 is_stmt 1 view .LVU9205
 34146 0020 002C     		cmp	r4, #0
 34147 0022 4ED0     		beq	.L2521
 34148 0024 354E     		ldr	r6, .L2547+8
 34149              	.LBB4659:
ARM GAS  /tmp/cc0UaEmF.s 			page 858


 34150              	.LBB4660:
6272:src/xeq.c     **** 			char *pp = strchr( p, ',' );
6273:src/xeq.c     **** 			if ( pp ) {
6274:src/xeq.c     **** 				*pp = '.';
6275:src/xeq.c     **** 			}
6276:src/xeq.c     **** 			if (is_intmode()) {
6277:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
6278:src/xeq.c     **** 				lift_if_enabled();
6279:src/xeq.c     **** 				set_lift();
6280:src/xeq.c     **** 				setX_int(build_value(strtoull(p + sgn, NULL, int_base()), sgn));
6281:src/xeq.c     **** 			} else {
6282:src/xeq.c     **** 				decNumber x;
6283:src/xeq.c     **** 				decNumberFromString(&x, p, &Ctx);
 34151              		.loc 1 6283 5 is_stmt 0 view .LVU9206
 34152 0026 DFF8DC80 		ldr	r8, .L2547+16
 34153              	.LBE4660:
6284:src/xeq.c     **** 				if (! check_special(&x)) {	/* This correctly deals with infinities and NaN based on flag D */
6285:src/xeq.c     **** 					lift_if_enabled();
6286:src/xeq.c     **** 					set_lift();
6287:src/xeq.c     **** 					setX(&x);
6288:src/xeq.c     **** 				}
6289:src/xeq.c     **** 				else {
6290:src/xeq.c     **** 					error_message(Error);
6291:src/xeq.c     **** 					Error = 0;
6292:src/xeq.c     **** 					break;
6293:src/xeq.c     **** 				}
6294:src/xeq.c     **** 			}
6295:src/xeq.c     **** 			p = strtok( NULL, delim );
 34154              		.loc 1 6295 8 view .LVU9207
 34155 002a 334F     		ldr	r7, .L2547+4
 34156 002c 21E0     		b	.L2522
 34157              	.LVL2642:
 34158              	.L2545:
 34159              	.LBB4679:
6277:src/xeq.c     **** 				lift_if_enabled();
 34160              		.loc 1 6277 5 is_stmt 1 view .LVU9208
6277:src/xeq.c     **** 				lift_if_enabled();
 34161              		.loc 1 6277 31 is_stmt 0 view .LVU9209
 34162 002e 94F800A0 		ldrb	r10, [r4]	@ zero_extendqisi2
 34163              	.LBB4680:
 34164              	.LBB4681:
 34165              	.LBB4682:
 34166              	.LBB4683:
 735:src/xeq.c     **** }
 34167              		.loc 1 735 15 view .LVU9210
 34168 0032 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 34169              	.LBE4683:
 34170              	.LBE4682:
 34171              	.LBE4681:
 34172              	.LBE4680:
6277:src/xeq.c     **** 				lift_if_enabled();
 34173              		.loc 1 6277 31 view .LVU9211
 34174 0034 AAF12D0A 		sub	r10, r10, #45
 34175 0038 BAFA8AFA 		clz	r10, r10
 34176              	.LBB4689:
 34177              	.LBB4686:
 739:src/xeq.c     **** 		lift();
ARM GAS  /tmp/cc0UaEmF.s 			page 859


 34178              		.loc 1 739 5 view .LVU9212
 34179 003c 5A06     		lsls	r2, r3, #25
 34180              	.LBE4686:
 34181              	.LBE4689:
6277:src/xeq.c     **** 				lift_if_enabled();
 34182              		.loc 1 6277 31 view .LVU9213
 34183 003e 4FEA5A1A 		lsr	r10, r10, #5
 34184              	.LVL2643:
6278:src/xeq.c     **** 				set_lift();
 34185              		.loc 1 6278 5 is_stmt 1 view .LVU9214
 34186              	.LBB4690:
 34187              	.LBI4680:
 738:src/xeq.c     **** 	if (get_lift())
 34188              		.loc 1 738 6 view .LVU9215
 34189              	.LBB4687:
 739:src/xeq.c     **** 		lift();
 34190              		.loc 1 739 2 view .LVU9216
 34191              	.LBB4685:
 34192              	.LBI4682:
 734:src/xeq.c     **** 	return State2.state_lift;
 34193              		.loc 1 734 12 view .LVU9217
 34194              	.LBB4684:
 735:src/xeq.c     **** }
 34195              		.loc 1 735 2 view .LVU9218
 34196              	.LBE4684:
 34197              	.LBE4685:
 739:src/xeq.c     **** 		lift();
 34198              		.loc 1 739 5 is_stmt 0 view .LVU9219
 34199 0042 46D4     		bmi	.L2544
 34200              	.LVL2644:
 34201              	.L2517:
 739:src/xeq.c     **** 		lift();
 34202              		.loc 1 739 5 view .LVU9220
 34203              	.LBE4687:
 34204              	.LBE4690:
6279:src/xeq.c     **** 				setX_int(build_value(strtoull(p + sgn, NULL, int_base()), sgn));
 34205              		.loc 1 6279 5 is_stmt 1 view .LVU9221
 34206              	.LBB4691:
 34207              	.LBI4691:
 748:src/xeq.c     ****     State2.state_lift = 1;
 34208              		.loc 1 748 6 view .LVU9222
 34209              	.LBB4692:
 749:src/xeq.c     **** }
 34210              		.loc 1 749 5 view .LVU9223
 749:src/xeq.c     **** }
 34211              		.loc 1 749 23 is_stmt 0 view .LVU9224
 34212 0044 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 34213 0046 43F04003 		orr	r3, r3, #64
 34214 004a EB75     		strb	r3, [r5, #23]
 34215              	.LBE4692:
 34216              	.LBE4691:
6280:src/xeq.c     **** 			} else {
 34217              		.loc 1 6280 5 is_stmt 1 view .LVU9225
6280:src/xeq.c     **** 			} else {
 34218              		.loc 1 6280 50 is_stmt 0 view .LVU9226
 34219 004c FFF7FEFF 		bl	int_base
 34220              	.LVL2645:
ARM GAS  /tmp/cc0UaEmF.s 			page 860


6280:src/xeq.c     **** 			} else {
 34221              		.loc 1 6280 37 view .LVU9227
 34222 0050 5444     		add	r4, r4, r10
 34223              	.LVL2646:
6280:src/xeq.c     **** 			} else {
 34224              		.loc 1 6280 50 view .LVU9228
 34225 0052 0246     		mov	r2, r0
6280:src/xeq.c     **** 			} else {
 34226              		.loc 1 6280 5 view .LVU9229
 34227 0054 0021     		movs	r1, #0
 34228 0056 2046     		mov	r0, r4
 34229 0058 FFF7FEFF 		bl	strtoull
 34230              	.LVL2647:
 34231 005c 5246     		mov	r2, r10
 34232 005e FFF7FEFF 		bl	build_value
 34233              	.LVL2648:
 34234 0062 FFF7FEFF 		bl	setX_int
 34235              	.LVL2649:
 34236              	.LBE4679:
 34237              		.loc 1 6295 4 is_stmt 1 view .LVU9230
 34238              		.loc 1 6295 8 is_stmt 0 view .LVU9231
 34239 0066 3946     		mov	r1, r7
 34240 0068 0020     		movs	r0, #0
 34241 006a FFF7FEFF 		bl	strtok
 34242              	.LVL2650:
 34243              		.loc 1 6295 8 view .LVU9232
 34244              	.LBE4659:
6271:src/xeq.c     **** 			char *pp = strchr( p, ',' );
 34245              		.loc 1 6271 9 is_stmt 1 view .LVU9233
 34246 006e 0446     		mov	r4, r0
 34247 0070 38B3     		cbz	r0, .L2521
 34248              	.LVL2651:
 34249              	.L2522:
 34250              	.LBB4698:
6272:src/xeq.c     **** 			if ( pp ) {
 34251              		.loc 1 6272 4 view .LVU9234
6272:src/xeq.c     **** 			if ( pp ) {
 34252              		.loc 1 6272 15 is_stmt 0 view .LVU9235
 34253 0072 2C21     		movs	r1, #44
 34254 0074 2046     		mov	r0, r4
 34255 0076 FFF7FEFF 		bl	strchr
 34256              	.LVL2652:
6273:src/xeq.c     **** 				*pp = '.';
 34257              		.loc 1 6273 4 is_stmt 1 view .LVU9236
6273:src/xeq.c     **** 				*pp = '.';
 34258              		.loc 1 6273 7 is_stmt 0 view .LVU9237
 34259 007a 08B1     		cbz	r0, .L2515
6274:src/xeq.c     **** 			}
 34260              		.loc 1 6274 5 is_stmt 1 view .LVU9238
6274:src/xeq.c     **** 			}
 34261              		.loc 1 6274 9 is_stmt 0 view .LVU9239
 34262 007c 2E23     		movs	r3, #46
 34263 007e 0370     		strb	r3, [r0]
 34264              	.L2515:
6276:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
 34265              		.loc 1 6276 4 is_stmt 1 view .LVU9240
6276:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
ARM GAS  /tmp/cc0UaEmF.s 			page 861


 34266              		.loc 1 6276 8 is_stmt 0 view .LVU9241
 34267 0080 3368     		ldr	r3, [r6]
 34268 0082 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
6276:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
 34269              		.loc 1 6276 7 view .LVU9242
 34270 0086 13F0010A 		ands	r10, r3, #1
 34271 008a D0D1     		bne	.L2545
 34272              	.LBB4694:
6282:src/xeq.c     **** 				decNumberFromString(&x, p, &Ctx);
 34273              		.loc 1 6282 5 is_stmt 1 view .LVU9243
6283:src/xeq.c     **** 				if (! check_special(&x)) {	/* This correctly deals with infinities and NaN based on flag D */
 34274              		.loc 1 6283 5 view .LVU9244
 34275 008c 2146     		mov	r1, r4
 34276 008e 01A8     		add	r0, sp, #4
 34277              	.LVL2653:
6283:src/xeq.c     **** 				if (! check_special(&x)) {	/* This correctly deals with infinities and NaN based on flag D */
 34278              		.loc 1 6283 5 is_stmt 0 view .LVU9245
 34279 0090 4246     		mov	r2, r8
 34280 0092 FFF7FEFF 		bl	decNumberFromString
 34281              	.LVL2654:
6284:src/xeq.c     **** 					lift_if_enabled();
 34282              		.loc 1 6284 5 is_stmt 1 view .LVU9246
6284:src/xeq.c     **** 					lift_if_enabled();
 34283              		.loc 1 6284 11 is_stmt 0 view .LVU9247
 34284 0096 01A8     		add	r0, sp, #4
 34285 0098 FFF7FEFF 		bl	check_special
 34286              	.LVL2655:
6284:src/xeq.c     **** 					lift_if_enabled();
 34287              		.loc 1 6284 8 view .LVU9248
 34288 009c 10BB     		cbnz	r0, .L2519
6285:src/xeq.c     **** 					set_lift();
 34289              		.loc 1 6285 6 is_stmt 1 view .LVU9249
 34290              	.LBB4661:
 34291              	.LBI4661:
 738:src/xeq.c     **** 	if (get_lift())
 34292              		.loc 1 738 6 view .LVU9250
 34293              	.LBB4662:
 739:src/xeq.c     **** 		lift();
 34294              		.loc 1 739 2 view .LVU9251
 34295              	.LBB4663:
 34296              	.LBI4663:
 734:src/xeq.c     **** 	return State2.state_lift;
 34297              		.loc 1 734 12 view .LVU9252
 34298              	.LBB4664:
 735:src/xeq.c     **** }
 34299              		.loc 1 735 2 view .LVU9253
 735:src/xeq.c     **** }
 34300              		.loc 1 735 15 is_stmt 0 view .LVU9254
 34301 009e EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 34302              	.LBE4664:
 34303              	.LBE4663:
 739:src/xeq.c     **** 		lift();
 34304              		.loc 1 739 5 view .LVU9255
 34305 00a0 5B06     		lsls	r3, r3, #25
 34306 00a2 19D4     		bmi	.L2546
 34307              	.L2520:
 34308              	.LBE4662:
ARM GAS  /tmp/cc0UaEmF.s 			page 862


 34309              	.LBE4661:
6286:src/xeq.c     **** 					setX(&x);
 34310              		.loc 1 6286 6 is_stmt 1 view .LVU9256
 34311              	.LBB4666:
 34312              	.LBI4666:
 748:src/xeq.c     ****     State2.state_lift = 1;
 34313              		.loc 1 748 6 view .LVU9257
 34314              	.LBB4667:
 749:src/xeq.c     **** }
 34315              		.loc 1 749 5 view .LVU9258
 749:src/xeq.c     **** }
 34316              		.loc 1 749 23 is_stmt 0 view .LVU9259
 34317 00a4 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 34318              	.LBE4667:
 34319              	.LBE4666:
 34320              	.LBB4670:
 34321              	.LBB4671:
 810:src/xeq.c     **** }
 34322              		.loc 1 810 2 view .LVU9260
 34323 00a6 01A9     		add	r1, sp, #4
 34324              	.LBE4671:
 34325              	.LBE4670:
 34326              	.LBB4674:
 34327              	.LBB4668:
 749:src/xeq.c     **** }
 34328              		.loc 1 749 23 view .LVU9261
 34329 00a8 43F04003 		orr	r3, r3, #64
 34330              	.LBE4668:
 34331              	.LBE4674:
 34332              	.LBB4675:
 34333              	.LBB4672:
 810:src/xeq.c     **** }
 34334              		.loc 1 810 2 view .LVU9262
 34335 00ac 6420     		movs	r0, #100
 34336              	.LBE4672:
 34337              	.LBE4675:
 34338              	.LBB4676:
 34339              	.LBB4669:
 749:src/xeq.c     **** }
 34340              		.loc 1 749 23 view .LVU9263
 34341 00ae EB75     		strb	r3, [r5, #23]
 34342              	.LBE4669:
 34343              	.LBE4676:
6287:src/xeq.c     **** 				}
 34344              		.loc 1 6287 6 is_stmt 1 view .LVU9264
 34345              	.LVL2656:
 34346              	.LBB4677:
 34347              	.LBI4670:
 809:src/xeq.c     **** 	setRegister(regX_idx, x);
 34348              		.loc 1 809 6 view .LVU9265
 34349              	.LBB4673:
 810:src/xeq.c     **** }
 34350              		.loc 1 810 2 view .LVU9266
 34351 00b0 FFF7FEFF 		bl	setRegister
 34352              	.LVL2657:
 810:src/xeq.c     **** }
 34353              		.loc 1 810 2 is_stmt 0 view .LVU9267
ARM GAS  /tmp/cc0UaEmF.s 			page 863


 34354              	.LBE4673:
 34355              	.LBE4677:
 34356              	.LBE4694:
 34357              		.loc 1 6295 4 is_stmt 1 view .LVU9268
 34358              		.loc 1 6295 8 is_stmt 0 view .LVU9269
 34359 00b4 3946     		mov	r1, r7
 34360 00b6 0020     		movs	r0, #0
 34361 00b8 FFF7FEFF 		bl	strtok
 34362              	.LVL2658:
 34363              		.loc 1 6295 8 view .LVU9270
 34364              	.LBE4698:
6271:src/xeq.c     **** 			char *pp = strchr( p, ',' );
 34365              		.loc 1 6271 9 is_stmt 1 view .LVU9271
 34366 00bc 0446     		mov	r4, r0
 34367 00be 0028     		cmp	r0, #0
 34368 00c0 D7D1     		bne	.L2522
 34369              	.LVL2659:
 34370              	.L2521:
6296:src/xeq.c     **** 		}
6297:src/xeq.c     **** 		free( buffer );
 34371              		.loc 1 6297 3 view .LVU9272
 34372 00c2 4846     		mov	r0, r9
 34373 00c4 FFF7FEFF 		bl	free
 34374              	.LVL2660:
 34375              	.L2512:
 34376              		.loc 1 6297 3 is_stmt 0 view .LVU9273
 34377              	.LBE4651:
6298:src/xeq.c     **** 	}
6299:src/xeq.c     **** 	display();
 34378              		.loc 1 6299 2 is_stmt 1 view .LVU9274
 34379 00c8 FFF7FEFF 		bl	display
 34380              	.LVL2661:
6300:src/xeq.c     **** }
 34381              		.loc 1 6300 1 is_stmt 0 view .LVU9275
 34382 00cc 0AB0     		add	sp, sp, #40
 34383              		.cfi_remember_state
 34384              		.cfi_def_cfa_offset 32
 34385              		@ sp needed
 34386 00ce BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 34387              	.LVL2662:
 34388              	.L2544:
 34389              		.cfi_restore_state
 34390              	.LBB4702:
 34391              	.LBB4699:
 34392              	.LBB4695:
 34393              	.LBB4693:
 34394              	.LBB4688:
 740:src/xeq.c     **** }
 34395              		.loc 1 740 3 is_stmt 1 view .LVU9276
 34396 00d2 FFF7FEFF 		bl	lift
 34397              	.LVL2663:
 740:src/xeq.c     **** }
 34398              		.loc 1 740 3 is_stmt 0 view .LVU9277
 34399 00d6 B5E7     		b	.L2517
 34400              	.LVL2664:
 34401              	.L2546:
 740:src/xeq.c     **** }
ARM GAS  /tmp/cc0UaEmF.s 			page 864


 34402              		.loc 1 740 3 view .LVU9278
 34403              	.LBE4688:
 34404              	.LBE4693:
 34405              	.LBE4695:
 34406              	.LBB4696:
 34407              	.LBB4678:
 34408              	.LBB4665:
 740:src/xeq.c     **** }
 34409              		.loc 1 740 3 is_stmt 1 view .LVU9279
 34410 00d8 FFF7FEFF 		bl	lift
 34411              	.LVL2665:
 34412 00dc E2E7     		b	.L2520
 34413              	.LVL2666:
 34414              	.L2543:
 740:src/xeq.c     **** }
 34415              		.loc 1 740 3 is_stmt 0 view .LVU9280
 34416              	.LBE4665:
 34417              	.LBE4678:
 34418              	.LBE4696:
 34419              	.LBE4699:
 34420              	.LBB4700:
 34421              	.LBB4656:
 34422 00de FFF7FEFF 		bl	process_cmdline.part.0
 34423              	.LVL2667:
 740:src/xeq.c     **** }
 34424              		.loc 1 740 3 view .LVU9281
 34425 00e2 9DE7     		b	.L2513
 34426              	.L2519:
 740:src/xeq.c     **** }
 34427              		.loc 1 740 3 view .LVU9282
 34428              	.LBE4656:
 34429              	.LBE4700:
 34430              	.LBB4701:
 34431              	.LBB4697:
6290:src/xeq.c     **** 					Error = 0;
 34432              		.loc 1 6290 6 is_stmt 1 view .LVU9283
 34433 00e4 064C     		ldr	r4, .L2547+12
 34434              	.LVL2668:
6290:src/xeq.c     **** 					Error = 0;
 34435              		.loc 1 6290 6 is_stmt 0 view .LVU9284
 34436 00e6 2068     		ldr	r0, [r4]
 34437 00e8 FFF7FEFF 		bl	error_message
 34438              	.LVL2669:
6291:src/xeq.c     **** 					break;
 34439              		.loc 1 6291 6 is_stmt 1 view .LVU9285
6291:src/xeq.c     **** 					break;
 34440              		.loc 1 6291 12 is_stmt 0 view .LVU9286
 34441 00ec C4F800A0 		str	r10, [r4]
6292:src/xeq.c     **** 				}
 34442              		.loc 1 6292 6 is_stmt 1 view .LVU9287
 34443 00f0 E7E7     		b	.L2521
 34444              	.L2548:
 34445 00f2 00BF     		.align	2
 34446              	.L2547:
 34447 00f4 00000000 		.word	StateWhileOn
 34448 00f8 00000000 		.word	.LC9
 34449 00fc 00000000 		.word	main_ram
ARM GAS  /tmp/cc0UaEmF.s 			page 865


 34450 0100 00000000 		.word	Error
 34451 0104 00000000 		.word	Ctx
 34452              	.LBE4697:
 34453              	.LBE4701:
 34454              	.LBE4702:
 34455              		.cfi_endproc
 34456              	.LFE269:
 34458              		.global	__aeabi_uldivmod
 34459              		.section	.rodata.fill_buffer_from_raw_x.str1.4,"aMS",%progbits,1
 34460              		.align	2
 34461              	.LC10:
 34462 0000 30313233 		.ascii	"0123456789ABCDEF\000"
 34462      34353637 
 34462      38394142 
 34462      43444546 
 34462      00
 34463              		.section	.text.fill_buffer_from_raw_x,"ax",%progbits
 34464              		.align	1
 34465              		.p2align 2,,3
 34466              		.global	fill_buffer_from_raw_x
 34467              		.syntax unified
 34468              		.thumb
 34469              		.thumb_func
 34470              		.fpu fpv4-sp-d16
 34472              	fill_buffer_from_raw_x:
 34473              	.LVL2670:
 34474              	.LFB270:
6301:src/xeq.c     **** 
6302:src/xeq.c     **** char* fill_buffer_from_raw_x(char *buffer)
6303:src/xeq.c     **** {
 34475              		.loc 1 6303 1 view -0
 34476              		.cfi_startproc
 34477              		@ args = 0, pretend = 0, frame = 40
 34478              		@ frame_needed = 0, uses_anonymous_args = 0
6304:src/xeq.c     **** 	process_cmdline();
 34479              		.loc 1 6304 2 view .LVU9289
 34480              	.LBB4703:
 34481              	.LBI4703:
1040:src/xeq.c     **** 	decNumber a, b, x, t;
 34482              		.loc 1 1040 6 view .LVU9290
 34483              	.LBB4704:
1041:src/xeq.c     **** 
 34484              		.loc 1 1041 2 view .LVU9291
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 34485              		.loc 1 1043 2 view .LVU9292
 34486              	.LBE4704:
 34487              	.LBE4703:
6303:src/xeq.c     **** 	process_cmdline();
 34488              		.loc 1 6303 1 is_stmt 0 view .LVU9293
 34489 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 34490              		.cfi_def_cfa_offset 36
 34491              		.cfi_offset 4, -36
 34492              		.cfi_offset 5, -32
 34493              		.cfi_offset 6, -28
 34494              		.cfi_offset 7, -24
 34495              		.cfi_offset 8, -20
 34496              		.cfi_offset 9, -16
ARM GAS  /tmp/cc0UaEmF.s 			page 866


 34497              		.cfi_offset 10, -12
 34498              		.cfi_offset 11, -8
 34499              		.cfi_offset 14, -4
 34500              	.LBB4708:
 34501              	.LBB4705:
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 34502              		.loc 1 1043 6 view .LVU9294
 34503 0004 2F4B     		ldr	r3, .L2573
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 34504              		.loc 1 1043 5 view .LVU9295
 34505 0006 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 34506              	.LBE4705:
 34507              	.LBE4708:
6303:src/xeq.c     **** 	process_cmdline();
 34508              		.loc 1 6303 1 view .LVU9296
 34509 0008 8BB0     		sub	sp, sp, #44
 34510              		.cfi_def_cfa_offset 80
6303:src/xeq.c     **** 	process_cmdline();
 34511              		.loc 1 6303 1 view .LVU9297
 34512 000a 0446     		mov	r4, r0
 34513              	.LBB4709:
 34514              	.LBB4706:
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 34515              		.loc 1 1043 5 view .LVU9298
 34516 000c 002B     		cmp	r3, #0
 34517 000e 55D1     		bne	.L2570
 34518              	.LVL2671:
 34519              	.L2550:
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 34520              		.loc 1 1043 5 view .LVU9299
 34521              	.LBE4706:
 34522              	.LBE4709:
6305:src/xeq.c     **** 	if (is_intmode()) {
 34523              		.loc 1 6305 2 is_stmt 1 view .LVU9300
 34524              		.loc 1 6305 6 is_stmt 0 view .LVU9301
 34525 0010 2D4D     		ldr	r5, .L2573+4
 34526 0012 2B68     		ldr	r3, [r5]
 34527 0014 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 34528              		.loc 1 6305 5 view .LVU9302
 34529 0018 DA07     		lsls	r2, r3, #31
 34530 001a 2CD5     		bpl	.L2551
 34531              	.LBB4710:
6306:src/xeq.c     **** 		int sgn;
 34532              		.loc 1 6306 3 is_stmt 1 view .LVU9303
6307:src/xeq.c     **** 		unsigned long long int x = extract_value(get_reg_n_int(regX_idx), &sgn);
 34533              		.loc 1 6307 3 view .LVU9304
 34534              		.loc 1 6307 30 is_stmt 0 view .LVU9305
 34535 001c 6420     		movs	r0, #100
 34536 001e FFF7FEFF 		bl	get_reg_n_int
 34537              	.LVL2672:
 34538 0022 01AA     		add	r2, sp, #4
 34539 0024 FFF7FEFF 		bl	extract_value
 34540              	.LVL2673:
 34541 0028 0646     		mov	r6, r0
 34542 002a 0F46     		mov	r7, r1
 34543              	.LVL2674:
6308:src/xeq.c     **** 		const int base = int_base();
ARM GAS  /tmp/cc0UaEmF.s 			page 867


 34544              		.loc 1 6308 3 is_stmt 1 view .LVU9306
 34545              		.loc 1 6308 20 is_stmt 0 view .LVU9307
 34546 002c FFF7FEFF 		bl	int_base
 34547              	.LVL2675:
6309:src/xeq.c     **** 		char *p = buffer + (sizeof(buffer)-1);
6310:src/xeq.c     **** 
6311:src/xeq.c     **** 		*p-- = '\0';
 34548              		.loc 1 6311 8 view .LVU9308
 34549 0030 0023     		movs	r3, #0
 34550              	.LVL2676:
6309:src/xeq.c     **** 		char *p = buffer + (sizeof(buffer)-1);
 34551              		.loc 1 6309 3 is_stmt 1 view .LVU9309
 34552              		.loc 1 6311 3 view .LVU9310
 34553              		.loc 1 6311 8 is_stmt 0 view .LVU9311
 34554 0032 E370     		strb	r3, [r4, #3]
6312:src/xeq.c     **** 		if (x == 0)
 34555              		.loc 1 6312 3 is_stmt 1 view .LVU9312
 34556              		.loc 1 6312 6 is_stmt 0 view .LVU9313
 34557 0034 56EA0703 		orrs	r3, r6, r7
 34558 0038 35D0     		beq	.L2571
 34559 003a 244D     		ldr	r5, .L2573+8
6311:src/xeq.c     **** 		if (x == 0)
 34560              		.loc 1 6311 5 view .LVU9314
 34561 003c 0234     		adds	r4, r4, #2
 34562              	.LVL2677:
6311:src/xeq.c     **** 		if (x == 0)
 34563              		.loc 1 6311 5 view .LVU9315
 34564 003e 8046     		mov	r8, r0
 34565 0040 4FEAE079 		asr	r9, r0, #31
 34566              	.LVL2678:
 34567              	.L2554:
 34568              	.LBB4711:
6313:src/xeq.c     **** 			*p-- = '0'; 
6314:src/xeq.c     **** 		else {
6315:src/xeq.c     **** 			while (x != 0) {
6316:src/xeq.c     **** 				const int n = x % base;
 34569              		.loc 1 6316 5 is_stmt 1 view .LVU9316
 34570 0044 3046     		mov	r0, r6
 34571 0046 3946     		mov	r1, r7
 34572 0048 4246     		mov	r2, r8
 34573 004a 4B46     		mov	r3, r9
 34574 004c FFF7FEFF 		bl	__aeabi_uldivmod
 34575              	.LVL2679:
6317:src/xeq.c     **** 				x /= base;
 34576              		.loc 1 6317 5 view .LVU9317
 34577 0050 BB46     		mov	fp, r7
 34578 0052 B246     		mov	r10, r6
 34579              	.LBE4711:
6315:src/xeq.c     **** 				const int n = x % base;
 34580              		.loc 1 6315 10 is_stmt 0 view .LVU9318
 34581 0054 CB45     		cmp	fp, r9
 34582              	.LBB4712:
6318:src/xeq.c     **** 				*p-- = n["0123456789ABCDEF"];
 34583              		.loc 1 6318 10 view .LVU9319
 34584 0056 AB5C     		ldrb	r3, [r5, r2]	@ zero_extendqisi2
 34585 0058 04F80139 		strb	r3, [r4], #-1
 34586              	.LVL2680:
ARM GAS  /tmp/cc0UaEmF.s 			page 868


 34587              		.loc 1 6318 10 view .LVU9320
 34588              	.LBE4712:
6315:src/xeq.c     **** 				const int n = x % base;
 34589              		.loc 1 6315 10 view .LVU9321
 34590 005c 08BF     		it	eq
 34591 005e C245     		cmpeq	r10, r8
 34592              	.LBB4713:
6317:src/xeq.c     **** 				x /= base;
 34593              		.loc 1 6317 7 view .LVU9322
 34594 0060 0646     		mov	r6, r0
 34595              	.LVL2681:
6317:src/xeq.c     **** 				x /= base;
 34596              		.loc 1 6317 7 view .LVU9323
 34597 0062 0F46     		mov	r7, r1
 34598              	.LVL2682:
 34599              		.loc 1 6318 5 is_stmt 1 view .LVU9324
 34600              		.loc 1 6318 5 is_stmt 0 view .LVU9325
 34601              	.LBE4713:
6315:src/xeq.c     **** 				const int n = x % base;
 34602              		.loc 1 6315 10 is_stmt 1 view .LVU9326
 34603 0064 EED2     		bcs	.L2554
6319:src/xeq.c     **** 			}
6320:src/xeq.c     **** 		}
6321:src/xeq.c     **** 		if (sgn)
 34604              		.loc 1 6321 3 view .LVU9327
 34605              		.loc 1 6321 6 is_stmt 0 view .LVU9328
 34606 0066 019B     		ldr	r3, [sp, #4]
 34607 0068 1BB3     		cbz	r3, .L2555
 34608              	.LVL2683:
 34609              	.L2572:
6322:src/xeq.c     **** 			*p = '-';
 34610              		.loc 1 6322 4 is_stmt 1 view .LVU9329
 34611              		.loc 1 6322 7 is_stmt 0 view .LVU9330
 34612 006a 2D23     		movs	r3, #45
 34613 006c 2370     		strb	r3, [r4]
 34614              	.LVL2684:
 34615              	.L2549:
 34616              		.loc 1 6322 7 view .LVU9331
 34617              	.LBE4710:
6323:src/xeq.c     **** 		else
6324:src/xeq.c     **** 			p++;
6325:src/xeq.c     **** 		return p;
6326:src/xeq.c     **** 	} else {
6327:src/xeq.c     **** 		decNumber x;
6328:src/xeq.c     **** 		decNumberToString(getX(&x), buffer);
6329:src/xeq.c     **** 		if (UState.fraccomma) {
6330:src/xeq.c     **** 			char *p = strchr(buffer, '.');
6331:src/xeq.c     **** 			if (p != NULL)
6332:src/xeq.c     **** 				*p = ',';
6333:src/xeq.c     **** 		}
6334:src/xeq.c     **** 
6335:src/xeq.c     **** 		return buffer;
6336:src/xeq.c     **** 	}
6337:src/xeq.c     **** }
 34618              		.loc 1 6337 1 view .LVU9332
 34619 006e 2046     		mov	r0, r4
 34620 0070 0BB0     		add	sp, sp, #44
ARM GAS  /tmp/cc0UaEmF.s 			page 869


 34621              		.cfi_remember_state
 34622              		.cfi_def_cfa_offset 36
 34623              		@ sp needed
 34624 0072 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 34625              	.LVL2685:
 34626              	.L2551:
 34627              		.cfi_restore_state
 34628              	.LBB4714:
6327:src/xeq.c     **** 		decNumberToString(getX(&x), buffer);
 34629              		.loc 1 6327 3 is_stmt 1 view .LVU9333
6328:src/xeq.c     **** 		if (UState.fraccomma) {
 34630              		.loc 1 6328 3 view .LVU9334
 34631              	.LBB4715:
 34632              	.LBI4715:
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 34633              		.loc 1 805 12 view .LVU9335
 34634              	.LBB4716:
 806:src/xeq.c     **** }
 34635              		.loc 1 806 2 view .LVU9336
 806:src/xeq.c     **** }
 34636              		.loc 1 806 9 is_stmt 0 view .LVU9337
 34637 0076 6421     		movs	r1, #100
 34638 0078 01A8     		add	r0, sp, #4
 34639              	.LVL2686:
 806:src/xeq.c     **** }
 34640              		.loc 1 806 9 view .LVU9338
 34641 007a FFF7FEFF 		bl	getRegister
 34642              	.LVL2687:
 806:src/xeq.c     **** }
 34643              		.loc 1 806 9 view .LVU9339
 34644              	.LBE4716:
 34645              	.LBE4715:
6328:src/xeq.c     **** 		if (UState.fraccomma) {
 34646              		.loc 1 6328 3 view .LVU9340
 34647 007e 2146     		mov	r1, r4
 34648 0080 FFF7FEFF 		bl	decNumberToString
 34649              	.LVL2688:
6329:src/xeq.c     **** 			char *p = strchr(buffer, '.');
 34650              		.loc 1 6329 3 is_stmt 1 view .LVU9341
6329:src/xeq.c     **** 			char *p = strchr(buffer, '.');
 34651              		.loc 1 6329 7 is_stmt 0 view .LVU9342
 34652 0084 2B68     		ldr	r3, [r5]
 34653 0086 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
6329:src/xeq.c     **** 			char *p = strchr(buffer, '.');
 34654              		.loc 1 6329 6 view .LVU9343
 34655 008a 9B06     		lsls	r3, r3, #26
 34656 008c EFD5     		bpl	.L2549
 34657              	.LBB4717:
6330:src/xeq.c     **** 			if (p != NULL)
 34658              		.loc 1 6330 4 is_stmt 1 view .LVU9344
6330:src/xeq.c     **** 			if (p != NULL)
 34659              		.loc 1 6330 14 is_stmt 0 view .LVU9345
 34660 008e 2E21     		movs	r1, #46
 34661 0090 2046     		mov	r0, r4
 34662 0092 FFF7FEFF 		bl	strchr
 34663              	.LVL2689:
6331:src/xeq.c     **** 				*p = ',';
ARM GAS  /tmp/cc0UaEmF.s 			page 870


 34664              		.loc 1 6331 4 is_stmt 1 view .LVU9346
6331:src/xeq.c     **** 				*p = ',';
 34665              		.loc 1 6331 7 is_stmt 0 view .LVU9347
 34666 0096 0028     		cmp	r0, #0
 34667 0098 E9D0     		beq	.L2549
6332:src/xeq.c     **** 		}
 34668              		.loc 1 6332 5 is_stmt 1 view .LVU9348
6332:src/xeq.c     **** 		}
 34669              		.loc 1 6332 8 is_stmt 0 view .LVU9349
 34670 009a 2C23     		movs	r3, #44
 34671 009c 0370     		strb	r3, [r0]
 34672              	.LBE4717:
6335:src/xeq.c     **** 	}
 34673              		.loc 1 6335 3 is_stmt 1 view .LVU9350
 34674              	.LBE4714:
 34675              		.loc 1 6337 1 is_stmt 0 view .LVU9351
 34676 009e 2046     		mov	r0, r4
 34677              	.LVL2690:
 34678              		.loc 1 6337 1 view .LVU9352
 34679 00a0 0BB0     		add	sp, sp, #44
 34680              		.cfi_remember_state
 34681              		.cfi_def_cfa_offset 36
 34682              		@ sp needed
 34683 00a2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 34684              	.LVL2691:
 34685              	.L2571:
 34686              		.cfi_restore_state
 34687              	.LBB4718:
6313:src/xeq.c     **** 		else {
 34688              		.loc 1 6313 4 is_stmt 1 view .LVU9353
6313:src/xeq.c     **** 		else {
 34689              		.loc 1 6313 9 is_stmt 0 view .LVU9354
 34690 00a6 3023     		movs	r3, #48
 34691 00a8 A370     		strb	r3, [r4, #2]
6321:src/xeq.c     **** 			*p = '-';
 34692              		.loc 1 6321 6 view .LVU9355
 34693 00aa 019B     		ldr	r3, [sp, #4]
6313:src/xeq.c     **** 		else {
 34694              		.loc 1 6313 6 view .LVU9356
 34695 00ac 0134     		adds	r4, r4, #1
 34696              	.LVL2692:
6321:src/xeq.c     **** 			*p = '-';
 34697              		.loc 1 6321 3 is_stmt 1 view .LVU9357
6321:src/xeq.c     **** 			*p = '-';
 34698              		.loc 1 6321 6 is_stmt 0 view .LVU9358
 34699 00ae 002B     		cmp	r3, #0
 34700 00b0 DBD1     		bne	.L2572
 34701              	.LVL2693:
 34702              	.L2555:
6324:src/xeq.c     **** 		return p;
 34703              		.loc 1 6324 4 is_stmt 1 view .LVU9359
6324:src/xeq.c     **** 		return p;
 34704              		.loc 1 6324 5 is_stmt 0 view .LVU9360
 34705 00b2 0134     		adds	r4, r4, #1
 34706              	.LVL2694:
6325:src/xeq.c     **** 	} else {
 34707              		.loc 1 6325 3 is_stmt 1 view .LVU9361
ARM GAS  /tmp/cc0UaEmF.s 			page 871


 34708              	.LBE4718:
 34709              		.loc 1 6337 1 is_stmt 0 view .LVU9362
 34710 00b4 2046     		mov	r0, r4
 34711 00b6 0BB0     		add	sp, sp, #44
 34712              		.cfi_remember_state
 34713              		.cfi_def_cfa_offset 36
 34714              		@ sp needed
 34715 00b8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 34716              	.LVL2695:
 34717              	.L2570:
 34718              		.cfi_restore_state
 34719              	.LBB4719:
 34720              	.LBB4707:
 34721              		.loc 1 6337 1 view .LVU9363
 34722 00bc FFF7FEFF 		bl	process_cmdline.part.0
 34723              	.LVL2696:
 34724              		.loc 1 6337 1 view .LVU9364
 34725 00c0 A6E7     		b	.L2550
 34726              	.L2574:
 34727 00c2 00BF     		.align	2
 34728              	.L2573:
 34729 00c4 00000000 		.word	StateWhileOn
 34730 00c8 00000000 		.word	main_ram
 34731 00cc 00000000 		.word	.LC10
 34732              	.LBE4707:
 34733              	.LBE4719:
 34734              		.cfi_endproc
 34735              	.LFE270:
 34737              		.comm	RectPolConv,4,4
 34738              		.comm	StackBase,4,4
 34739              		.comm	RetStk,4,4
 34740              		.comm	ProgFree,4,4
 34741              		.comm	RetStkSize,4,4
 34742              		.comm	TraceBuffer,25,4
 34743              		.comm	Ctx,24,4
 34744              		.comm	UserLocalRegs,4,4
 34745              		.comm	XromUserPc,4,4
 34746              		.comm	ShowRegister,4,4
 34747              		.comm	XeqOpCode,2,2
 34748              		.comm	PcWrapped,4,4
 34749              		.comm	Error,4,4
 34750              		.comm	Busy,4,4
 34751              		.comm	Pause,1,1
 34752              		.comm	JustStopped,4,4
 34753              		.comm	XromRunning,4,4
 34754              		.comm	Running,4,4
 34755              		.global	xrom_targets
 34756              		.section	.rodata
 34757              		.align	2
 34758              		.set	.LANCHOR5,. + 0
 34759              	.LC1:
 34760 0000 0C0C0C0C 		.ascii	"\014\014\014\014\014\014\014\014\014\013\013\013\014"
 34760      0C0C0C0C 
 34760      0C0B0B0B 
 34760      0C
 34761 000d 0C0A0A0C 		.ascii	"\014\012\012\014\014\014\007\010\011\014\014\014\004"
 34761      0C0C0708 
ARM GAS  /tmp/cc0UaEmF.s 			page 872


 34761      090C0C0C 
 34761      04
 34762 001a 05060C0C 		.ascii	"\005\006\014\014\014\001\002\003\014\014\014\000\012"
 34762      0C010203 
 34762      0C0C0C00 
 34762      0A
 34763 0027 0C0C     		.ascii	"\014\014"
 34764              		.section	.bss.result.11366,"aw",%nobits
 34765              		.align	2
 34766              		.set	.LANCHOR2,. + 0
 34769              	result.11366:
 34770 0000 00000000 		.space	16
 34770      00000000 
 34770      00000000 
 34770      00000000 
 34771              		.section	.data.RegionTab,"aw"
 34772              		.align	2
 34773              		.set	.LANCHOR0,. + 0
 34776              	RegionTab:
 34777 0000 00000000 		.word	0
 34778 0004 00000000 		.word	0
 34779 0008 00000000 		.word	0
 34780 000c 00000000 		.word	xrom
 34781              		.section	.rodata.StackRegMask,"a"
 34782              		.align	2
 34783              		.set	.LANCHOR3,. + 0
 34786              	StackRegMask:
 34787 0000 0F01     		.short	271
 34788 0002 FF01     		.short	511
 34789              		.section	.rodata.convergence_tolerances,"a"
 34790              		.align	2
 34791              		.set	.LANCHOR7,. + 0
 34794              	convergence_tolerances:
 34795 0000 00000000 		.word	const_1e_14
 34796 0004 00000000 		.word	const_1e_24
 34797 0008 00000000 		.word	const_1e_32
 34798              		.section	.rodata.modes.11109,"a"
 34799              		.align	2
 34800              		.set	.LANCHOR1,. + 0
 34803              	modes.11109:
 34804 0000 03020401 		.ascii	"\003\002\004\001\005\000\006"
 34804      050006
 34805              		.section	.rodata.modes.11576,"a"
 34806              		.align	2
 34807              		.set	.LANCHOR4,. + 0
 34810              	modes.11576:
 34811 0000 02010081 		.ascii	"\002\001\000\201"
 34812              		.section	.rodata.xrom_targets,"a"
 34813              		.align	2
 34814              		.set	.LANCHOR6,. + 0
 34817              	xrom_targets:
 34818 0000 9107     		.short	1937
 34819 0002 B70B     		.short	2999
 34820 0004 4602     		.short	582
 34821 0006 4402     		.short	580
 34822 0008 420A     		.short	2626
 34823 000a 340A     		.short	2612
ARM GAS  /tmp/cc0UaEmF.s 			page 873


 34824 000c 100C     		.short	3088
 34825 000e 9C05     		.short	1436
 34826 0010 3B0A     		.short	2619
 34827 0012 5A06     		.short	1626
 34828 0014 6F06     		.short	1647
 34829 0016 6B06     		.short	1643
 34830 0018 6406     		.short	1636
 34831 001a 390A     		.short	2617
 34832 001c 7206     		.short	1650
 34833 001e 7506     		.short	1653
 34834 0020 7706     		.short	1655
 34835 0022 5D06     		.short	1629
 34836 0024 5707     		.short	1879
 34837 0026 4F08     		.short	2127
 34838 0028 EB05     		.short	1515
 34839 002a 0405     		.short	1284
 34840 002c 2907     		.short	1833
 34841 002e 8205     		.short	1410
 34842 0030 9A05     		.short	1434
 34843 0032 EC05     		.short	1516
 34844 0034 490A     		.short	2633
 34845              		.text
 34846              	.Letext0:
 34847              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 34848              		.file 3 "dmcp/dmcp.h"
 34849              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 34850              		.file 5 "/usr/include/newlib/sys/_types.h"
 34851              		.file 6 "/usr/include/newlib/sys/reent.h"
 34852              		.file 7 "/usr/include/newlib/sys/lock.h"
 34853              		.file 8 "/usr/include/newlib/stdlib.h"
 34854              		.file 9 "src/decNumber/decContext.h"
 34855              		.file 10 "src/decNumber/decNumber.h"
 34856              		.file 11 "src/decNumber/decimal64.h"
 34857              		.file 12 "src/decNumber/decimal128.h"
 34858              		.file 13 "src/xeq.h"
 34859              		.file 14 "src/data.h"
 34860              		.file 15 "src/storage.h"
 34861              		.file 16 "src/stats.h"
 34862              		.file 17 "src/display.h"
 34863              		.file 18 "src/consts.h"
 34864              		.file 19 "src/xrom.h"
 34865              		.file 20 "src/pretty.h"
 34866              		.file 21 "src/xrom_targets.c"
 34867              		.file 22 "src/int.h"
 34868              		.file 23 "/usr/include/newlib/string.h"
 34869              		.file 24 "src/lcd.h"
 34870              		.file 25 "src/decn.h"
 34871              		.file 26 "src/complex.h"
 34872              		.file 27 "/usr/include/newlib/stdio.h"
 34873              		.file 28 "src/alpha.h"
ARM GAS  /tmp/cc0UaEmF.s 			page 874


DEFINED SYMBOLS
                            *ABS*:0000000000000000 xeq.c
     /tmp/cc0UaEmF.s:18     .text.find_section_bounds:0000000000000000 $t
     /tmp/cc0UaEmF.s:26     .text.find_section_bounds:0000000000000000 find_section_bounds
     /tmp/cc0UaEmF.s:164    .text.find_section_bounds:0000000000000068 $d
     /tmp/cc0UaEmF.s:172    .text.reg_address:0000000000000000 $t
     /tmp/cc0UaEmF.s:179    .text.reg_address:0000000000000000 reg_address
     /tmp/cc0UaEmF.s:293    .text.reg_address:0000000000000058 $d
     /tmp/cc0UaEmF.s:300    .text.retstk_up:0000000000000000 $t
     /tmp/cc0UaEmF.s:307    .text.retstk_up:0000000000000000 retstk_up
     /tmp/cc0UaEmF.s:440    .text.retstk_up:000000000000006c $d
                            *COM*:0000000000000004 RetStk
     /tmp/cc0UaEmF.s:447    .text.flag_word:0000000000000000 $t
     /tmp/cc0UaEmF.s:454    .text.flag_word:0000000000000000 flag_word
     /tmp/cc0UaEmF.s:574    .text.flag_word:000000000000006c $d
     /tmp/cc0UaEmF.s:581    .text.set_zero:0000000000000000 $t
     /tmp/cc0UaEmF.s:588    .text.set_zero:0000000000000000 set_zero
     /tmp/cc0UaEmF.s:627    .text.set_zero:0000000000000020 $d
     /tmp/cc0UaEmF.s:634    .text.intResult:0000000000000000 $t
     /tmp/cc0UaEmF.s:641    .text.intResult:0000000000000000 intResult
     /tmp/cc0UaEmF.s:841    .text.intResult:00000000000000a4 $d
                            *COM*:0000000000000004 Error
     /tmp/cc0UaEmF.s:847    .text.check_stack_overlap:0000000000000000 $t
     /tmp/cc0UaEmF.s:854    .text.check_stack_overlap:0000000000000000 check_stack_overlap
     /tmp/cc0UaEmF.s:1068   .text.check_stack_overlap:0000000000000068 $d
     /tmp/cc0UaEmF.s:1075   .text.is_xrom:0000000000000000 $t
     /tmp/cc0UaEmF.s:1083   .text.is_xrom:0000000000000000 is_xrom
     /tmp/cc0UaEmF.s:1104   .text.is_xrom:0000000000000018 $d
     /tmp/cc0UaEmF.s:1109   .text.move_retstk:0000000000000000 $t
     /tmp/cc0UaEmF.s:1117   .text.move_retstk:0000000000000000 move_retstk
     /tmp/cc0UaEmF.s:1300   .text.move_retstk:000000000000006c $d
                            *COM*:0000000000000004 RetStkSize
     /tmp/cc0UaEmF.s:1309   .text.local_levels:0000000000000000 $t
     /tmp/cc0UaEmF.s:1317   .text.local_levels:0000000000000000 local_levels
     /tmp/cc0UaEmF.s:1346   .text.local_levels:0000000000000020 $d
     /tmp/cc0UaEmF.s:1352   .text.local_regs_rarg:0000000000000000 $t
     /tmp/cc0UaEmF.s:1360   .text.local_regs_rarg:0000000000000000 local_regs_rarg
     /tmp/cc0UaEmF.s:1460   .text.local_regs_rarg:0000000000000058 $d
     /tmp/cc0UaEmF.s:1466   .text.get_reg_limit:0000000000000000 $t
     /tmp/cc0UaEmF.s:1473   .text.get_reg_limit:0000000000000000 get_reg_limit
     /tmp/cc0UaEmF.s:1711   .text.get_reg_limit:00000000000000b0 $d
     /tmp/cc0UaEmF.s:1720   .text.local_regs:0000000000000000 $t
     /tmp/cc0UaEmF.s:1728   .text.local_regs:0000000000000000 local_regs
     /tmp/cc0UaEmF.s:1826   .text.local_regs:0000000000000038 $d
     /tmp/cc0UaEmF.s:1836   .text.global_regs_rarg:0000000000000000 $t
     /tmp/cc0UaEmF.s:1844   .text.global_regs_rarg:0000000000000000 global_regs_rarg
     /tmp/cc0UaEmF.s:1917   .text.global_regs_rarg:000000000000003c $d
     /tmp/cc0UaEmF.s:1922   .text.global_regs:0000000000000000 $t
     /tmp/cc0UaEmF.s:1930   .text.global_regs:0000000000000000 global_regs
     /tmp/cc0UaEmF.s:1988   .text.global_regs:0000000000000020 $d
     /tmp/cc0UaEmF.s:1993   .text.version:0000000000000000 $t
     /tmp/cc0UaEmF.s:2001   .text.version:0000000000000000 version
     /tmp/cc0UaEmF.s:2032   .text.version:0000000000000018 $d
     /tmp/cc0UaEmF.s:2037   .text.cmd_off:0000000000000000 $t
     /tmp/cc0UaEmF.s:2045   .text.cmd_off:0000000000000000 cmd_off
     /tmp/cc0UaEmF.s:2061   .text.init_RegionTab:0000000000000000 $t
     /tmp/cc0UaEmF.s:2069   .text.init_RegionTab:0000000000000000 init_RegionTab
ARM GAS  /tmp/cc0UaEmF.s 			page 875


     /tmp/cc0UaEmF.s:2107   .text.init_RegionTab:000000000000001c $d
     /tmp/cc0UaEmF.s:2115   .text.sizeLIB:0000000000000000 $t
     /tmp/cc0UaEmF.s:2123   .text.sizeLIB:0000000000000000 sizeLIB
     /tmp/cc0UaEmF.s:2157   .text.sizeLIB:0000000000000018 $d
     /tmp/cc0UaEmF.s:2163   .text.getprog:0000000000000000 $t
     /tmp/cc0UaEmF.s:2171   .text.getprog:0000000000000000 getprog
     /tmp/cc0UaEmF.s:2275   .text.getprog:0000000000000048 $d
     /tmp/cc0UaEmF.s:2283   .text.get_current_prog:0000000000000000 $t
     /tmp/cc0UaEmF.s:2291   .text.get_current_prog:0000000000000000 get_current_prog
     /tmp/cc0UaEmF.s:2323   .text.get_current_prog:0000000000000020 $d
     /tmp/cc0UaEmF.s:2329   .text.do_inc:0000000000000000 $t
     /tmp/cc0UaEmF.s:2337   .text.do_inc:0000000000000000 do_inc
     /tmp/cc0UaEmF.s:2417   .text.do_inc:0000000000000044 $d
                            *COM*:0000000000000004 PcWrapped
     /tmp/cc0UaEmF.s:2422   .text.user_pc.part.0:0000000000000000 $t
     /tmp/cc0UaEmF.s:2429   .text.user_pc.part.0:0000000000000000 user_pc.part.0
     /tmp/cc0UaEmF.s:2499   .text.user_pc.part.0:0000000000000034 $d
     /tmp/cc0UaEmF.s:2504   .rodata.print_step.str1.4:0000000000000000 $d
     /tmp/cc0UaEmF.s:2508   .text.print_step:0000000000000000 $t
     /tmp/cc0UaEmF.s:2515   .text.print_step:0000000000000000 print_step
     /tmp/cc0UaEmF.s:2684   .text.print_step:0000000000000098 $d
                            *COM*:0000000000000019 TraceBuffer
     /tmp/cc0UaEmF.s:2695   .text.do_dec:0000000000000000 $t
     /tmp/cc0UaEmF.s:2703   .text.do_dec:0000000000000000 do_dec
     /tmp/cc0UaEmF.s:2785   .text.do_dec:0000000000000048 $d
     /tmp/cc0UaEmF.s:2790   .text.update_program_bounds:0000000000000000 $t
     /tmp/cc0UaEmF.s:2798   .text.update_program_bounds:0000000000000000 update_program_bounds
     /tmp/cc0UaEmF.s:2951   .text.update_program_bounds:000000000000008c $d
     /tmp/cc0UaEmF.s:2958   .text.set_pc:0000000000000000 $t
     /tmp/cc0UaEmF.s:2966   .text.set_pc:0000000000000000 set_pc
     /tmp/cc0UaEmF.s:3200   .text.set_pc:00000000000000a4 $d
     /tmp/cc0UaEmF.s:3209   .text.incpc:0000000000000000 $t
     /tmp/cc0UaEmF.s:3217   .text.incpc:0000000000000000 incpc
     /tmp/cc0UaEmF.s:3271   .text.incpc:0000000000000024 $d
     /tmp/cc0UaEmF.s:3277   .text.decpc:0000000000000000 $t
     /tmp/cc0UaEmF.s:3285   .text.decpc:0000000000000000 decpc
     /tmp/cc0UaEmF.s:3340   .text.decpc:0000000000000024 $d
     /tmp/cc0UaEmF.s:3347   .text.fin_tst.part.0:0000000000000000 $t
     /tmp/cc0UaEmF.s:3354   .text.fin_tst.part.0:0000000000000000 fin_tst.part.0
     /tmp/cc0UaEmF.s:3387   .text.do_rtn:0000000000000000 $t
     /tmp/cc0UaEmF.s:3394   .text.do_rtn:0000000000000000 do_rtn
     /tmp/cc0UaEmF.s:3572   .text.do_rtn:000000000000008c $d
                            *COM*:0000000000000004 Running
     /tmp/cc0UaEmF.s:3581   .text.user_pc:0000000000000000 $t
     /tmp/cc0UaEmF.s:3589   .text.user_pc:0000000000000000 user_pc
     /tmp/cc0UaEmF.s:3621   .text.find_user_pc:0000000000000000 $t
     /tmp/cc0UaEmF.s:3629   .text.find_user_pc:0000000000000000 find_user_pc
     /tmp/cc0UaEmF.s:3737   .text.find_user_pc:000000000000004c $d
     /tmp/cc0UaEmF.s:3743   .text.report_err:0000000000000000 $t
     /tmp/cc0UaEmF.s:3751   .text.report_err:0000000000000000 report_err
     /tmp/cc0UaEmF.s:3810   .text.report_err:000000000000001c $d
     /tmp/cc0UaEmF.s:3815   .text.report_warn:0000000000000000 $t
     /tmp/cc0UaEmF.s:3823   .text.report_warn:0000000000000000 report_warn
     /tmp/cc0UaEmF.s:3943   .text.report_warn:0000000000000048 $d
     /tmp/cc0UaEmF.s:3952   .text.bad_mode_error:0000000000000000 $t
     /tmp/cc0UaEmF.s:3960   .text.bad_mode_error:0000000000000000 bad_mode_error
     /tmp/cc0UaEmF.s:4001   .text.bad_mode_error:000000000000000c $d
ARM GAS  /tmp/cc0UaEmF.s 			page 876


     /tmp/cc0UaEmF.s:4006   .text.cmderr:0000000000000000 $t
     /tmp/cc0UaEmF.s:4014   .text.cmderr:0000000000000000 cmderr
     /tmp/cc0UaEmF.s:4071   .text.cmderr:0000000000000010 $d
     /tmp/cc0UaEmF.s:4080   .text.cmdmsg:0000000000000000 $t
     /tmp/cc0UaEmF.s:4088   .text.cmdmsg:0000000000000000 cmdmsg
     /tmp/cc0UaEmF.s:4104   .text.rarg_roundingmode:0000000000000000 $t
     /tmp/cc0UaEmF.s:4112   .text.rarg_roundingmode:0000000000000000 rarg_roundingmode
     /tmp/cc0UaEmF.s:4134   .text.rarg_roundingmode:0000000000000014 $d
     /tmp/cc0UaEmF.s:4139   .text.packed_from_number:0000000000000000 $t
     /tmp/cc0UaEmF.s:4147   .text.packed_from_number:0000000000000000 packed_from_number
     /tmp/cc0UaEmF.s:4214   .text.packed_from_number:0000000000000034 $d
     /tmp/cc0UaEmF.s:4220   .text.packed128_from_number:0000000000000000 $t
     /tmp/cc0UaEmF.s:4228   .text.packed128_from_number:0000000000000000 packed128_from_number
     /tmp/cc0UaEmF.s:4295   .text.packed128_from_number:0000000000000034 $d
     /tmp/cc0UaEmF.s:4301   .text.check_special:0000000000000000 $t
     /tmp/cc0UaEmF.s:4308   .text.check_special:0000000000000000 check_special
     /tmp/cc0UaEmF.s:4535   .text.check_special:00000000000000a0 $d
     /tmp/cc0UaEmF.s:4541   .text.packed_from_packed128:0000000000000000 $t
     /tmp/cc0UaEmF.s:4549   .text.packed_from_packed128:0000000000000000 packed_from_packed128
     /tmp/cc0UaEmF.s:4592   .text.packed128_from_packed:0000000000000000 $t
     /tmp/cc0UaEmF.s:4600   .text.packed128_from_packed:0000000000000000 packed128_from_packed
     /tmp/cc0UaEmF.s:4643   .text.stack_size:0000000000000000 $t
     /tmp/cc0UaEmF.s:4651   .text.stack_size:0000000000000000 stack_size
     /tmp/cc0UaEmF.s:4702   .text.stack_size:0000000000000030 $d
     /tmp/cc0UaEmF.s:4708   .text.copyreg:0000000000000000 $t
     /tmp/cc0UaEmF.s:4716   .text.copyreg:0000000000000000 copyreg
     /tmp/cc0UaEmF.s:4749   .text.copyreg:000000000000001c $d
     /tmp/cc0UaEmF.s:4754   .text.set_lift:0000000000000000 $t
     /tmp/cc0UaEmF.s:4762   .text.set_lift:0000000000000000 set_lift
     /tmp/cc0UaEmF.s:4780   .text.set_lift:000000000000000c $d
     /tmp/cc0UaEmF.s:4785   .text.is_dblmode:0000000000000000 $t
     /tmp/cc0UaEmF.s:4793   .text.is_dblmode:0000000000000000 is_dblmode
     /tmp/cc0UaEmF.s:4815   .text.is_dblmode:000000000000001c $d
     /tmp/cc0UaEmF.s:4820   .text.is_usrdblmode:0000000000000000 $t
     /tmp/cc0UaEmF.s:4828   .text.is_usrdblmode:0000000000000000 is_usrdblmode
     /tmp/cc0UaEmF.s:4870   .text.is_usrdblmode:000000000000002c $d
     /tmp/cc0UaEmF.s:4876   .text.s_to_i:0000000000000000 $t
     /tmp/cc0UaEmF.s:4884   .text.s_to_i:0000000000000000 s_to_i
     /tmp/cc0UaEmF.s:5032   .text.digit:0000000000000000 $t
     /tmp/cc0UaEmF.s:5039   .text.digit:0000000000000000 digit
     /tmp/cc0UaEmF.s:5584   .text.digit:0000000000000184 $d
     /tmp/cc0UaEmF.s:5591   .text.s_to_ull:0000000000000000 $t
     /tmp/cc0UaEmF.s:5599   .text.s_to_ull:0000000000000000 s_to_ull
     /tmp/cc0UaEmF.s:5693   .text.get_cmdline:0000000000000000 $t
     /tmp/cc0UaEmF.s:5701   .text.get_cmdline:0000000000000000 get_cmdline
     /tmp/cc0UaEmF.s:5729   .text.get_cmdline:0000000000000014 $d
     /tmp/cc0UaEmF.s:5734   .text.is_bad_cmdline:0000000000000000 $t
     /tmp/cc0UaEmF.s:5742   .text.is_bad_cmdline:0000000000000000 is_bad_cmdline
     /tmp/cc0UaEmF.s:5757   .text.get_flash_reg_n:0000000000000000 $t
     /tmp/cc0UaEmF.s:5765   .text.get_flash_reg_n:0000000000000000 get_flash_reg_n
     /tmp/cc0UaEmF.s:5792   .text.get_flash_reg_n:000000000000001c $d
     /tmp/cc0UaEmF.s:5797   .text.get_const:0000000000000000 $t
     /tmp/cc0UaEmF.s:5805   .text.get_const:0000000000000000 get_const
     /tmp/cc0UaEmF.s:5953   .text.get_const:0000000000000074 $d
     /tmp/cc0UaEmF.s:5961   .text.get_reg_n:0000000000000000 $t
     /tmp/cc0UaEmF.s:5969   .text.get_reg_n:0000000000000000 get_reg_n
     /tmp/cc0UaEmF.s:6189   .text.get_reg_n:00000000000000a8 $d
ARM GAS  /tmp/cc0UaEmF.s 			page 877


     /tmp/cc0UaEmF.s:6196   .text.get_stack:0000000000000000 $t
     /tmp/cc0UaEmF.s:6204   .text.get_stack:0000000000000000 get_stack
     /tmp/cc0UaEmF.s:6224   .text.lift:0000000000000000 $t
     /tmp/cc0UaEmF.s:6232   .text.lift:0000000000000000 lift
     /tmp/cc0UaEmF.s:6411   .text.lift:0000000000000064 $d
     /tmp/cc0UaEmF.s:6419   .text.lift_if_enabled:0000000000000000 $t
     /tmp/cc0UaEmF.s:6427   .text.lift_if_enabled:0000000000000000 lift_if_enabled
     /tmp/cc0UaEmF.s:6457   .text.lift_if_enabled:0000000000000010 $d
     /tmp/cc0UaEmF.s:6462   .text.lower:0000000000000000 $t
     /tmp/cc0UaEmF.s:6469   .text.lower:0000000000000000 lower
     /tmp/cc0UaEmF.s:6651   .text.lower:000000000000006c $d
     /tmp/cc0UaEmF.s:6659   .text.get_stack_top:0000000000000000 $t
     /tmp/cc0UaEmF.s:6666   .text.get_stack_top:0000000000000000 get_stack_top
     /tmp/cc0UaEmF.s:6751   .text.get_stack_top:0000000000000034 $d
     /tmp/cc0UaEmF.s:6759   .text.roll_down:0000000000000000 $t
     /tmp/cc0UaEmF.s:6767   .text.roll_down:0000000000000000 roll_down
     /tmp/cc0UaEmF.s:6885   .text.roll_down:000000000000004c $d
                            *COM*:0000000000000004 StackBase
     /tmp/cc0UaEmF.s:6891   .text.cpx_roll_down:0000000000000000 $t
     /tmp/cc0UaEmF.s:6899   .text.cpx_roll_down:0000000000000000 cpx_roll_down
     /tmp/cc0UaEmF.s:6941   .text.cpx_roll_down:000000000000001c $d
     /tmp/cc0UaEmF.s:6946   .text.roll_up:0000000000000000 $t
     /tmp/cc0UaEmF.s:6954   .text.roll_up:0000000000000000 roll_up
     /tmp/cc0UaEmF.s:7081   .text.roll_up:000000000000004c $d
     /tmp/cc0UaEmF.s:7087   .text.cpx_roll_up:0000000000000000 $t
     /tmp/cc0UaEmF.s:7095   .text.cpx_roll_up:0000000000000000 cpx_roll_up
     /tmp/cc0UaEmF.s:7137   .text.cpx_roll_up:000000000000001c $d
     /tmp/cc0UaEmF.s:7142   .text.fill:0000000000000000 $t
     /tmp/cc0UaEmF.s:7150   .text.fill:0000000000000000 fill
     /tmp/cc0UaEmF.s:7305   .text.fill:0000000000000064 $d
     /tmp/cc0UaEmF.s:7314   .text.lower2:0000000000000000 $t
     /tmp/cc0UaEmF.s:7321   .text.lower2:0000000000000000 lower2
     /tmp/cc0UaEmF.s:7503   .text.lower2:000000000000006c $d
     /tmp/cc0UaEmF.s:7511   .text.drop:0000000000000000 $t
     /tmp/cc0UaEmF.s:7519   .text.drop:0000000000000000 drop
     /tmp/cc0UaEmF.s:7562   .text.drop:000000000000001c $d
     /tmp/cc0UaEmF.s:7567   .text.copyreg_n:0000000000000000 $t
     /tmp/cc0UaEmF.s:7575   .text.copyreg_n:0000000000000000 copyreg_n
     /tmp/cc0UaEmF.s:7659   .text.copyreg_n:0000000000000038 $d
     /tmp/cc0UaEmF.s:7666   .text.setlastX:0000000000000000 $t
     /tmp/cc0UaEmF.s:7674   .text.setlastX:0000000000000000 setlastX
     /tmp/cc0UaEmF.s:7690   .text.setlastXY:0000000000000000 $t
     /tmp/cc0UaEmF.s:7697   .text.setlastXY:0000000000000000 setlastXY
     /tmp/cc0UaEmF.s:7740   .text.getRegister:0000000000000000 $t
     /tmp/cc0UaEmF.s:7748   .text.getRegister:0000000000000000 getRegister
     /tmp/cc0UaEmF.s:7810   .text.getRegister:0000000000000030 $d
     /tmp/cc0UaEmF.s:7815   .text.getX:0000000000000000 $t
     /tmp/cc0UaEmF.s:7823   .text.getX:0000000000000000 getX
     /tmp/cc0UaEmF.s:7841   .text.getY:0000000000000000 $t
     /tmp/cc0UaEmF.s:7849   .text.getY:0000000000000000 getY
     /tmp/cc0UaEmF.s:7866   .text.getXY:0000000000000000 $t
     /tmp/cc0UaEmF.s:7874   .text.getXY:0000000000000000 getXY
     /tmp/cc0UaEmF.s:7935   .text.getXYZ:0000000000000000 $t
     /tmp/cc0UaEmF.s:7943   .text.getXYZ:0000000000000000 getXYZ
     /tmp/cc0UaEmF.s:8036   .text.getYZ:0000000000000000 $t
     /tmp/cc0UaEmF.s:8044   .text.getYZ:0000000000000000 getYZ
     /tmp/cc0UaEmF.s:8105   .text.getXYZT:0000000000000000 $t
ARM GAS  /tmp/cc0UaEmF.s 			page 878


     /tmp/cc0UaEmF.s:8113   .text.getXYZT:0000000000000000 getXYZT
     /tmp/cc0UaEmF.s:8159   .text.storcl_op:0000000000000000 $t
     /tmp/cc0UaEmF.s:8166   .text.storcl_op:0000000000000000 storcl_op
     /tmp/cc0UaEmF.s:8240   .text.storcl_op:000000000000002c $d
     /tmp/cc0UaEmF.s:8247   .text.storcl_op:0000000000000032 $t
     /tmp/cc0UaEmF.s:8359   .text.storcl_cop:0000000000000000 $t
     /tmp/cc0UaEmF.s:8366   .text.storcl_cop:0000000000000000 storcl_cop
     /tmp/cc0UaEmF.s:8476   .text.storcl_cop:0000000000000040 $d
     /tmp/cc0UaEmF.s:8481   .text.storcl_cop:0000000000000044 $t
     /tmp/cc0UaEmF.s:8594   .text.cpx_enter:0000000000000000 $t
     /tmp/cc0UaEmF.s:8602   .text.cpx_enter:0000000000000000 cpx_enter
     /tmp/cc0UaEmF.s:8692   .text.cpx_enter:0000000000000048 $d
     /tmp/cc0UaEmF.s:8698   .text.cpx_fill:0000000000000000 $t
     /tmp/cc0UaEmF.s:8706   .text.cpx_fill:0000000000000000 cpx_fill
     /tmp/cc0UaEmF.s:8907   .text.cpx_fill:0000000000000084 $d
     /tmp/cc0UaEmF.s:8917   .text.setRegister:0000000000000000 $t
     /tmp/cc0UaEmF.s:8925   .text.setRegister:0000000000000000 setRegister
     /tmp/cc0UaEmF.s:9020   .text.setRegister:000000000000004c $d
                            *COM*:0000000000000018 Ctx
     /tmp/cc0UaEmF.s:9026   .text.setX:0000000000000000 $t
     /tmp/cc0UaEmF.s:9034   .text.setX:0000000000000000 setX
     /tmp/cc0UaEmF.s:9056   .text.rarg_round:0000000000000000 $t
     /tmp/cc0UaEmF.s:9064   .text.rarg_round:0000000000000000 rarg_round
     /tmp/cc0UaEmF.s:9245   .text.rarg_round:0000000000000064 $d
     /tmp/cc0UaEmF.s:9252   .text.setY:0000000000000000 $t
     /tmp/cc0UaEmF.s:9260   .text.setY:0000000000000000 setY
     /tmp/cc0UaEmF.s:9282   .text.setXY:0000000000000000 $t
     /tmp/cc0UaEmF.s:9290   .text.setXY:0000000000000000 setXY
     /tmp/cc0UaEmF.s:9354   .text.get_reg_n_int:0000000000000000 $t
     /tmp/cc0UaEmF.s:9362   .text.get_reg_n_int:0000000000000000 get_reg_n_int
     /tmp/cc0UaEmF.s:9399   .text.storcl_intop:0000000000000000 $t
     /tmp/cc0UaEmF.s:9406   .text.storcl_intop:0000000000000000 storcl_intop
     /tmp/cc0UaEmF.s:9498   .text.storcl_intop:0000000000000038 $d
     /tmp/cc0UaEmF.s:9504   .text.storcl_intop:000000000000003e $t
     /tmp/cc0UaEmF.s:9606   .text.incdec:0000000000000000 $t
     /tmp/cc0UaEmF.s:9613   .text.incdec:0000000000000000 incdec
     /tmp/cc0UaEmF.s:9794   .text.incdec:0000000000000094 $d
     /tmp/cc0UaEmF.s:9801   .text.set_reg_n_int:0000000000000000 $t
     /tmp/cc0UaEmF.s:9809   .text.set_reg_n_int:0000000000000000 set_reg_n_int
     /tmp/cc0UaEmF.s:9842   .text.get_reg_n_int_sgn:0000000000000000 $t
     /tmp/cc0UaEmF.s:9850   .text.get_reg_n_int_sgn:0000000000000000 get_reg_n_int_sgn
     /tmp/cc0UaEmF.s:9930   .text.get_reg_n_int_sgn:0000000000000034 $d
     /tmp/cc0UaEmF.s:9935   .text.get_keycode_from_reg:0000000000000000 $t
     /tmp/cc0UaEmF.s:9942   .text.get_keycode_from_reg:0000000000000000 get_keycode_from_reg
     /tmp/cc0UaEmF.s:10022  .text.get_keycode_from_reg:000000000000002c $d
     /tmp/cc0UaEmF.s:10027  .text.getX_int:0000000000000000 $t
     /tmp/cc0UaEmF.s:10035  .text.getX_int:0000000000000000 getX_int
     /tmp/cc0UaEmF.s:10051  .text.getX_int_sgn:0000000000000000 $t
     /tmp/cc0UaEmF.s:10059  .text.getX_int_sgn:0000000000000000 getX_int_sgn
     /tmp/cc0UaEmF.s:10081  .text.set_reg_n_int_sgn:0000000000000000 $t
     /tmp/cc0UaEmF.s:10089  .text.set_reg_n_int_sgn:0000000000000000 set_reg_n_int_sgn
     /tmp/cc0UaEmF.s:10215  .text.set_reg_n_int_sgn:0000000000000060 $d
     /tmp/cc0UaEmF.s:10221  .text.op_roundingmode:0000000000000000 $t
     /tmp/cc0UaEmF.s:10229  .text.op_roundingmode:0000000000000000 op_roundingmode
     /tmp/cc0UaEmF.s:10293  .text.op_roundingmode:0000000000000024 $d
     /tmp/cc0UaEmF.s:10298  .text.register_from_int:0000000000000000 $t
     /tmp/cc0UaEmF.s:10305  .text.register_from_int:0000000000000000 register_from_int
ARM GAS  /tmp/cc0UaEmF.s 			page 879


     /tmp/cc0UaEmF.s:10402  .text.register_from_int:000000000000005c $d
     /tmp/cc0UaEmF.s:10408  .text.int_from_register:0000000000000000 $t
     /tmp/cc0UaEmF.s:10415  .text.int_from_register:0000000000000000 int_from_register
     /tmp/cc0UaEmF.s:10486  .text.int_from_register:0000000000000044 $d
     /tmp/cc0UaEmF.s:10491  .text.switch_to_int:0000000000000000 $t
     /tmp/cc0UaEmF.s:10498  .text.switch_to_int:0000000000000000 switch_to_int
     /tmp/cc0UaEmF.s:10649  .text.switch_to_int:0000000000000078 $d
     /tmp/cc0UaEmF.s:10657  .text.process_cmdline.part.0:0000000000000000 $t
     /tmp/cc0UaEmF.s:10664  .text.process_cmdline.part.0:0000000000000000 process_cmdline.part.0
     /tmp/cc0UaEmF.s:11251  .text.process_cmdline.part.0:000000000000023c $d
                            *COM*:0000000000000004 XromRunning
     /tmp/cc0UaEmF.s:11262  .text.process_cmdline:0000000000000000 $t
     /tmp/cc0UaEmF.s:11270  .text.process_cmdline:0000000000000000 process_cmdline
     /tmp/cc0UaEmF.s:11292  .text.process_cmdline:000000000000000c $d
     /tmp/cc0UaEmF.s:11297  .text.process_cmdline_set_lift:0000000000000000 $t
     /tmp/cc0UaEmF.s:11305  .text.process_cmdline_set_lift:0000000000000000 process_cmdline_set_lift
     /tmp/cc0UaEmF.s:11371  .text.process_cmdline_set_lift:0000000000000020 $d
     /tmp/cc0UaEmF.s:11376  .text.setX_int:0000000000000000 $t
     /tmp/cc0UaEmF.s:11384  .text.setX_int:0000000000000000 setX_int
     /tmp/cc0UaEmF.s:11435  .text.do_rcl:0000000000000000 $t
     /tmp/cc0UaEmF.s:11442  .text.do_rcl:0000000000000000 do_rcl
     /tmp/cc0UaEmF.s:11780  .text.do_rcl:00000000000000cc $d
     /tmp/cc0UaEmF.s:11791  .text.setX_int_sgn:0000000000000000 $t
     /tmp/cc0UaEmF.s:11799  .text.setX_int_sgn:0000000000000000 setX_int_sgn
     /tmp/cc0UaEmF.s:11833  .text.zero_regs:0000000000000000 $t
     /tmp/cc0UaEmF.s:11841  .text.zero_regs:0000000000000000 zero_regs
     /tmp/cc0UaEmF.s:11879  .text.zero_regs:0000000000000024 $d
     /tmp/cc0UaEmF.s:11884  .text.move_regs:0000000000000000 $t
     /tmp/cc0UaEmF.s:11892  .text.move_regs:0000000000000000 move_regs
     /tmp/cc0UaEmF.s:11945  .text.move_regs:0000000000000024 $d
     /tmp/cc0UaEmF.s:11950  .text.zero_X:0000000000000000 $t
     /tmp/cc0UaEmF.s:11958  .text.zero_X:0000000000000000 zero_X
     /tmp/cc0UaEmF.s:11973  .text.zero_X:0000000000000008 $d
     /tmp/cc0UaEmF.s:11978  .text.zero_Y:0000000000000000 $t
     /tmp/cc0UaEmF.s:11986  .text.zero_Y:0000000000000000 zero_Y
     /tmp/cc0UaEmF.s:12014  .text.clrx:0000000000000000 $t
     /tmp/cc0UaEmF.s:12022  .text.clrx:0000000000000000 clrx
     /tmp/cc0UaEmF.s:12071  .text.clrx:0000000000000018 $d
     /tmp/cc0UaEmF.s:12077  .text.clrstk:0000000000000000 $t
     /tmp/cc0UaEmF.s:12085  .text.clrstk:0000000000000000 clrstk
     /tmp/cc0UaEmF.s:12210  .text.clrstk:000000000000005c $d
     /tmp/cc0UaEmF.s:12220  .text.clrreg:0000000000000000 $t
     /tmp/cc0UaEmF.s:12228  .text.clrreg:0000000000000000 clrreg
     /tmp/cc0UaEmF.s:12733  .text.clrreg:000000000000011c $d
     /tmp/cc0UaEmF.s:12743  .text.clrretstk:0000000000000000 $t
     /tmp/cc0UaEmF.s:12751  .text.clrretstk:0000000000000000 clrretstk
     /tmp/cc0UaEmF.s:12772  .text.clrretstk:0000000000000010 $d
     /tmp/cc0UaEmF.s:12777  .text.clrretstk_pc:0000000000000000 $t
     /tmp/cc0UaEmF.s:12785  .text.clrretstk_pc:0000000000000000 clrretstk_pc
     /tmp/cc0UaEmF.s:12850  .text.clrretstk_pc:0000000000000020 $d
     /tmp/cc0UaEmF.s:12855  .text.cmdconst:0000000000000000 $t
     /tmp/cc0UaEmF.s:12863  .text.cmdconst:0000000000000000 cmdconst
     /tmp/cc0UaEmF.s:13186  .text.cmdconst:00000000000000bc $d
     /tmp/cc0UaEmF.s:13194  .text.cmdsto:0000000000000000 $t
     /tmp/cc0UaEmF.s:13202  .text.cmdsto:0000000000000000 cmdsto
     /tmp/cc0UaEmF.s:13392  .text.cmdsto:0000000000000078 $d
     /tmp/cc0UaEmF.s:13398  .text.cmdrcl:0000000000000000 $t
ARM GAS  /tmp/cc0UaEmF.s 			page 880


     /tmp/cc0UaEmF.s:13406  .text.cmdrcl:0000000000000000 cmdrcl
     /tmp/cc0UaEmF.s:13422  .text.cmdcsto:0000000000000000 $t
     /tmp/cc0UaEmF.s:13430  .text.cmdcsto:0000000000000000 cmdcsto
     /tmp/cc0UaEmF.s:13707  .text.cmdcsto:00000000000000c0 $d
     /tmp/cc0UaEmF.s:13715  .text.cmdcrcl:0000000000000000 $t
     /tmp/cc0UaEmF.s:13723  .text.cmdcrcl:0000000000000000 cmdcrcl
     /tmp/cc0UaEmF.s:14196  .text.cmdcrcl:0000000000000108 $d
     /tmp/cc0UaEmF.s:14211  .text.cmdircl:0000000000000000 $t
     /tmp/cc0UaEmF.s:14219  .text.cmdircl:0000000000000000 cmdircl
     /tmp/cc0UaEmF.s:14263  .text.cmdircl:000000000000001c $d
     /tmp/cc0UaEmF.s:14268  .text.cmdrrcl:0000000000000000 $t
     /tmp/cc0UaEmF.s:14276  .text.cmdrrcl:0000000000000000 cmdrrcl
     /tmp/cc0UaEmF.s:14434  .text.cmdrrcl:0000000000000080 $d
     /tmp/cc0UaEmF.s:14444  .text.swap_reg:0000000000000000 $t
     /tmp/cc0UaEmF.s:14452  .text.swap_reg:0000000000000000 swap_reg
     /tmp/cc0UaEmF.s:14593  .text.swap_reg:0000000000000060 $d
     /tmp/cc0UaEmF.s:14598  .text.cmdswap:0000000000000000 $t
     /tmp/cc0UaEmF.s:14606  .text.cmdswap:0000000000000000 cmdswap
     /tmp/cc0UaEmF.s:14735  .text.cmdswap:0000000000000088 $d
     /tmp/cc0UaEmF.s:14740  .text.cmdview:0000000000000000 $t
     /tmp/cc0UaEmF.s:14748  .text.cmdview:0000000000000000 cmdview
     /tmp/cc0UaEmF.s:14832  .text.cmdview:0000000000000050 $d
                            *COM*:0000000000000004 ShowRegister
     /tmp/cc0UaEmF.s:14839  .text.get_stack_size:0000000000000000 $t
     /tmp/cc0UaEmF.s:14847  .text.get_stack_size:0000000000000000 get_stack_size
     /tmp/cc0UaEmF.s:14945  .text.get_stack_size:0000000000000040 $d
     /tmp/cc0UaEmF.s:14953  .text.get_word_size:0000000000000000 $t
     /tmp/cc0UaEmF.s:14961  .text.get_word_size:0000000000000000 get_word_size
     /tmp/cc0UaEmF.s:15004  .text.get_sign_mode:0000000000000000 $t
     /tmp/cc0UaEmF.s:15012  .text.get_sign_mode:0000000000000000 get_sign_mode
     /tmp/cc0UaEmF.s:15068  .text.get_sign_mode:0000000000000024 $d
     /tmp/cc0UaEmF.s:15073  .text.get_base:0000000000000000 $t
     /tmp/cc0UaEmF.s:15081  .text.get_base:0000000000000000 get_base
     /tmp/cc0UaEmF.s:15124  .text.DM42_Ticker:0000000000000000 $t
     /tmp/cc0UaEmF.s:15132  .text.DM42_Ticker:0000000000000000 DM42_Ticker
     /tmp/cc0UaEmF.s:15162  .text.DM42_Ticker:0000000000000014 $d
     /tmp/cc0UaEmF.s:15167  .text.op_ticks:0000000000000000 $t
     /tmp/cc0UaEmF.s:15175  .text.op_ticks:0000000000000000 op_ticks
     /tmp/cc0UaEmF.s:15252  .text.op_ticks:0000000000000024 $d
     /tmp/cc0UaEmF.s:15257  .text.op_voltage:0000000000000000 $t
     /tmp/cc0UaEmF.s:15265  .text.op_voltage:0000000000000000 op_voltage
     /tmp/cc0UaEmF.s:15368  .text.op_voltage:0000000000000058 $d
     /tmp/cc0UaEmF.s:15375  .text.free_mem:0000000000000000 $t
     /tmp/cc0UaEmF.s:15383  .text.free_mem:0000000000000000 free_mem
     /tmp/cc0UaEmF.s:15407  .text.free_mem:0000000000000010 $d
     /tmp/cc0UaEmF.s:15413  .text.free_flash:0000000000000000 $t
     /tmp/cc0UaEmF.s:15421  .text.free_flash:0000000000000000 free_flash
     /tmp/cc0UaEmF.s:15440  .text.free_flash:0000000000000010 $d
     /tmp/cc0UaEmF.s:15445  .text.get_mem:0000000000000000 $t
     /tmp/cc0UaEmF.s:15453  .text.get_mem:0000000000000000 get_mem
     /tmp/cc0UaEmF.s:15704  .text.get_mem:000000000000009c $d
     /tmp/cc0UaEmF.s:15712  .text.cmdputkey:0000000000000000 $t
     /tmp/cc0UaEmF.s:15720  .text.cmdputkey:0000000000000000 cmdputkey
     /tmp/cc0UaEmF.s:15802  .text.cmdputkey:0000000000000034 $d
     /tmp/cc0UaEmF.s:15808  .text.cmdkeytype:0000000000000000 $t
     /tmp/cc0UaEmF.s:15816  .text.cmdkeytype:0000000000000000 cmdkeytype
     /tmp/cc0UaEmF.s:15950  .text.cmdkeytype:0000000000000048 $d
ARM GAS  /tmp/cc0UaEmF.s 			page 881


     /tmp/cc0UaEmF.s:15959  .rodata.op_query_xtal.str1.4:0000000000000000 $d
     /tmp/cc0UaEmF.s:15963  .text.op_query_xtal:0000000000000000 $t
     /tmp/cc0UaEmF.s:15971  .text.op_query_xtal:0000000000000000 op_query_xtal
     /tmp/cc0UaEmF.s:16009  .text.op_query_xtal:0000000000000014 $d
     /tmp/cc0UaEmF.s:16017  .rodata.op_query_print.str1.4:0000000000000000 $d
     /tmp/cc0UaEmF.s:16021  .text.op_query_print:0000000000000000 $t
     /tmp/cc0UaEmF.s:16029  .text.op_query_print:0000000000000000 op_query_print
     /tmp/cc0UaEmF.s:16074  .text.op_query_print:0000000000000018 $d
     /tmp/cc0UaEmF.s:16084  .text.cmdstostk:0000000000000000 $t
     /tmp/cc0UaEmF.s:16092  .text.cmdstostk:0000000000000000 cmdstostk
     /tmp/cc0UaEmF.s:16142  .text.cmdrclstk:0000000000000000 $t
     /tmp/cc0UaEmF.s:16150  .text.cmdrclstk:0000000000000000 cmdrclstk
     /tmp/cc0UaEmF.s:16203  .text.find_opcode_from:0000000000000000 $t
     /tmp/cc0UaEmF.s:16211  .text.find_opcode_from:0000000000000000 find_opcode_from
     /tmp/cc0UaEmF.s:16383  .text.find_opcode_from:000000000000006c $d
     /tmp/cc0UaEmF.s:16388  .text.find_label_from:0000000000000000 $t
     /tmp/cc0UaEmF.s:16396  .text.find_label_from:0000000000000000 find_label_from
     /tmp/cc0UaEmF.s:16416  .text.op_rtn:0000000000000000 $t
     /tmp/cc0UaEmF.s:16424  .text.op_rtn:0000000000000000 op_rtn
     /tmp/cc0UaEmF.s:16458  .text.op_rtn:0000000000000020 $d
     /tmp/cc0UaEmF.s:16464  .text.op_popusr:0000000000000000 $t
     /tmp/cc0UaEmF.s:16472  .text.op_popusr:0000000000000000 op_popusr
     /tmp/cc0UaEmF.s:16547  .text.op_popusr:0000000000000050 $d
                            *COM*:0000000000000004 XromUserPc
                            *COM*:0000000000000004 UserLocalRegs
     /tmp/cc0UaEmF.s:16555  .text.findmultilbl:0000000000000000 $t
     /tmp/cc0UaEmF.s:16563  .text.findmultilbl:0000000000000000 findmultilbl
     /tmp/cc0UaEmF.s:16676  .text.findmultilbl:0000000000000048 $d
     /tmp/cc0UaEmF.s:16681  .text.get_dispmode_digs:0000000000000000 $t
     /tmp/cc0UaEmF.s:16689  .text.get_dispmode_digs:0000000000000000 get_dispmode_digs
     /tmp/cc0UaEmF.s:16751  .text.get_dispmode_digs:000000000000002c $d
     /tmp/cc0UaEmF.s:16756  .text.set_dispmode_digs:0000000000000000 $t
     /tmp/cc0UaEmF.s:16764  .text.set_dispmode_digs:0000000000000000 set_dispmode_digs
     /tmp/cc0UaEmF.s:16822  .text.set_dispmode_digs:0000000000000038 $d
     /tmp/cc0UaEmF.s:16827  .text.convC2F:0000000000000000 $t
     /tmp/cc0UaEmF.s:16835  .text.convC2F:0000000000000000 convC2F
     /tmp/cc0UaEmF.s:16877  .text.convC2F:000000000000001c $d
     /tmp/cc0UaEmF.s:16883  .text.convF2C:0000000000000000 $t
     /tmp/cc0UaEmF.s:16891  .text.convF2C:0000000000000000 convF2C
     /tmp/cc0UaEmF.s:16933  .text.convF2C:000000000000001c $d
     /tmp/cc0UaEmF.s:16939  .text.convDB2AR:0000000000000000 $t
     /tmp/cc0UaEmF.s:16947  .text.convDB2AR:0000000000000000 convDB2AR
     /tmp/cc0UaEmF.s:16989  .text.convDB2AR:000000000000001c $d
     /tmp/cc0UaEmF.s:16994  .text.convAR2DB:0000000000000000 $t
     /tmp/cc0UaEmF.s:17002  .text.convAR2DB:0000000000000000 convAR2DB
     /tmp/cc0UaEmF.s:17043  .text.convAR2DB:000000000000001c $d
     /tmp/cc0UaEmF.s:17048  .text.convDB2PR:0000000000000000 $t
     /tmp/cc0UaEmF.s:17056  .text.convDB2PR:0000000000000000 convDB2PR
     /tmp/cc0UaEmF.s:17097  .text.convPR2DB:0000000000000000 $t
     /tmp/cc0UaEmF.s:17105  .text.convPR2DB:0000000000000000 convPR2DB
     /tmp/cc0UaEmF.s:17146  .text.do_conv:0000000000000000 $t
     /tmp/cc0UaEmF.s:17154  .text.do_conv:0000000000000000 do_conv
     /tmp/cc0UaEmF.s:17246  .text.do_conv:0000000000000040 $d
     /tmp/cc0UaEmF.s:17251  .text.cmdconv:0000000000000000 $t
     /tmp/cc0UaEmF.s:17259  .text.cmdconv:0000000000000000 cmdconv
     /tmp/cc0UaEmF.s:17347  .text.cmdconv:000000000000003c $d
     /tmp/cc0UaEmF.s:17352  .text.fin_tst:0000000000000000 $t
ARM GAS  /tmp/cc0UaEmF.s 			page 882


     /tmp/cc0UaEmF.s:17360  .text.fin_tst:0000000000000000 fin_tst
     /tmp/cc0UaEmF.s:17418  .text.fin_tst:000000000000002c $d
     /tmp/cc0UaEmF.s:17427  .text.check_mode:0000000000000000 $t
     /tmp/cc0UaEmF.s:17435  .text.check_mode:0000000000000000 check_mode
     /tmp/cc0UaEmF.s:17470  .text.check_mode:0000000000000024 $d
     /tmp/cc0UaEmF.s:17475  .text.check_dblmode:0000000000000000 $t
     /tmp/cc0UaEmF.s:17483  .text.check_dblmode:0000000000000000 check_dblmode
     /tmp/cc0UaEmF.s:17516  .text.check_dblmode:000000000000001c $d
     /tmp/cc0UaEmF.s:17521  .text.isTop:0000000000000000 $t
     /tmp/cc0UaEmF.s:17529  .text.isTop:0000000000000000 isTop
     /tmp/cc0UaEmF.s:17593  .text.isTop:0000000000000038 $d
     /tmp/cc0UaEmF.s:17602  .text.cmdlblp:0000000000000000 $t
     /tmp/cc0UaEmF.s:17610  .text.cmdlblp:0000000000000000 cmdlblp
     /tmp/cc0UaEmF.s:17662  .text.cmdlblp:0000000000000024 $d
     /tmp/cc0UaEmF.s:17667  .text.cmdmultilblp:0000000000000000 $t
     /tmp/cc0UaEmF.s:17675  .text.cmdmultilblp:0000000000000000 cmdmultilblp
     /tmp/cc0UaEmF.s:17710  .text.cmdkeyp:0000000000000000 $t
     /tmp/cc0UaEmF.s:17718  .text.cmdkeyp:0000000000000000 cmdkeyp
     /tmp/cc0UaEmF.s:17813  .text.cmdkeyp:0000000000000044 $d
     /tmp/cc0UaEmF.s:17818  .text.do_tst:0000000000000000 $t
     /tmp/cc0UaEmF.s:17825  .text.do_tst:0000000000000000 do_tst
     /tmp/cc0UaEmF.s:17991  .text.do_tst:0000000000000064 $d
     /tmp/cc0UaEmF.s:18279  .text.do_tst:0000000000000168 $d
     /tmp/cc0UaEmF.s:18286  .text.do_ztst:0000000000000000 $t
     /tmp/cc0UaEmF.s:18293  .text.do_ztst:0000000000000000 do_ztst
     /tmp/cc0UaEmF.s:18583  .text.do_ztst:00000000000000b4 $d
     /tmp/cc0UaEmF.s:18594  .text.check_zero:0000000000000000 $t
     /tmp/cc0UaEmF.s:18602  .text.check_zero:0000000000000000 check_zero
     /tmp/cc0UaEmF.s:18746  .text.check_zero:000000000000006c $d
     /tmp/cc0UaEmF.s:18751  .text.cmdtest:0000000000000000 $t
     /tmp/cc0UaEmF.s:18759  .text.cmdtest:0000000000000000 cmdtest
     /tmp/cc0UaEmF.s:18780  .text.cmdztest:0000000000000000 $t
     /tmp/cc0UaEmF.s:18788  .text.cmdztest:0000000000000000 cmdztest
     /tmp/cc0UaEmF.s:18841  .text.cmdlincdec:0000000000000000 $t
     /tmp/cc0UaEmF.s:18849  .text.cmdlincdec:0000000000000000 cmdlincdec
     /tmp/cc0UaEmF.s:18870  .text.cmdloopz:0000000000000000 $t
     /tmp/cc0UaEmF.s:18878  .text.cmdloopz:0000000000000000 cmdloopz
     /tmp/cc0UaEmF.s:18911  .text.cmdloop:0000000000000000 $t
     /tmp/cc0UaEmF.s:18919  .text.cmdloop:0000000000000000 cmdloop
     /tmp/cc0UaEmF.s:19408  .text.cmdloop:00000000000001f4 $d
     /tmp/cc0UaEmF.s:19414  .text.op_shift_digit:0000000000000000 $t
     /tmp/cc0UaEmF.s:19422  .text.op_shift_digit:0000000000000000 op_shift_digit
     /tmp/cc0UaEmF.s:19586  .text.op_shift_digit:0000000000000060 $d
     /tmp/cc0UaEmF.s:19592  .text.get_user_flag:0000000000000000 $t
     /tmp/cc0UaEmF.s:19600  .text.get_user_flag:0000000000000000 get_user_flag
     /tmp/cc0UaEmF.s:19638  .text.cmdflag:0000000000000000 $t
     /tmp/cc0UaEmF.s:19646  .text.cmdflag:0000000000000000 cmdflag
     /tmp/cc0UaEmF.s:19691  .text.cmdflag:0000000000000028 $d
     /tmp/cc0UaEmF.s:19848  .text.put_user_flag:0000000000000000 $t
     /tmp/cc0UaEmF.s:19856  .text.put_user_flag:0000000000000000 put_user_flag
     /tmp/cc0UaEmF.s:19885  .text.clrflags:0000000000000000 $t
     /tmp/cc0UaEmF.s:19893  .text.clrflags:0000000000000000 clrflags
     /tmp/cc0UaEmF.s:19940  .text.clrflags:000000000000002c $d
     /tmp/cc0UaEmF.s:19945  .text.intws:0000000000000000 $t
     /tmp/cc0UaEmF.s:19953  .text.intws:0000000000000000 intws
     /tmp/cc0UaEmF.s:20176  .text.intws:00000000000000e4 $d
     /tmp/cc0UaEmF.s:20185  .text.get_maxdenom:0000000000000000 $t
ARM GAS  /tmp/cc0UaEmF.s 			page 883


     /tmp/cc0UaEmF.s:20193  .text.get_maxdenom:0000000000000000 get_maxdenom
     /tmp/cc0UaEmF.s:20221  .text.get_maxdenom:000000000000001c $d
     /tmp/cc0UaEmF.s:20226  .rodata.op_2frac.str1.4:0000000000000000 $d
     /tmp/cc0UaEmF.s:20236  .text.op_2frac:0000000000000000 $t
     /tmp/cc0UaEmF.s:20244  .text.op_2frac:0000000000000000 op_2frac
     /tmp/cc0UaEmF.s:20416  .text.op_2frac:0000000000000090 $d
     /tmp/cc0UaEmF.s:20426  .text.op_fracdenom:0000000000000000 $t
     /tmp/cc0UaEmF.s:20434  .text.op_fracdenom:0000000000000000 op_fracdenom
     /tmp/cc0UaEmF.s:20589  .text.op_fracdenom:0000000000000080 $d
     /tmp/cc0UaEmF.s:20594  .text.op_float:0000000000000000 $t
     /tmp/cc0UaEmF.s:20602  .text.op_float:0000000000000000 op_float
     /tmp/cc0UaEmF.s:20797  .text.op_float:00000000000000c4 $d
     /tmp/cc0UaEmF.s:20808  .text.cmddisp:0000000000000000 $t
     /tmp/cc0UaEmF.s:20816  .text.cmddisp:0000000000000000 cmddisp
     /tmp/cc0UaEmF.s:20893  .text.cmddisp:0000000000000036 $d
     /tmp/cc0UaEmF.s:21081  .text.cmddisp:00000000000000bc $d
     /tmp/cc0UaEmF.s:21087  .text.set_int_base:0000000000000000 $t
     /tmp/cc0UaEmF.s:21095  .text.set_int_base:0000000000000000 set_int_base
     /tmp/cc0UaEmF.s:21202  .text.set_int_base:000000000000004c $d
     /tmp/cc0UaEmF.s:21209  .text.op_fract:0000000000000000 $t
     /tmp/cc0UaEmF.s:21217  .text.op_fract:0000000000000000 op_fract
     /tmp/cc0UaEmF.s:21276  .text.op_fract:0000000000000040 $d
     /tmp/cc0UaEmF.s:21281  .text.cmdsavem:0000000000000000 $t
     /tmp/cc0UaEmF.s:21289  .text.cmdsavem:0000000000000000 cmdsavem
     /tmp/cc0UaEmF.s:21323  .text.cmdsavem:0000000000000018 $d
     /tmp/cc0UaEmF.s:21328  .text.set_entry:0000000000000000 $t
     /tmp/cc0UaEmF.s:21336  .text.set_entry:0000000000000000 set_entry
     /tmp/cc0UaEmF.s:21374  .text.set_entry:0000000000000020 $d
     /tmp/cc0UaEmF.s:21381  .text.get_trig_mode:0000000000000000 $t
     /tmp/cc0UaEmF.s:21389  .text.get_trig_mode:0000000000000000 get_trig_mode
     /tmp/cc0UaEmF.s:21424  .text.get_trig_mode:0000000000000024 $d
     /tmp/cc0UaEmF.s:21431  .text.cmdpause:0000000000000000 $t
     /tmp/cc0UaEmF.s:21439  .text.cmdpause:0000000000000000 cmdpause
     /tmp/cc0UaEmF.s:21479  .text.cmdpause:000000000000001c $d
                            *COM*:0000000000000001 Pause
     /tmp/cc0UaEmF.s:21485  .text.op_setspeed:0000000000000000 $t
     /tmp/cc0UaEmF.s:21493  .text.op_setspeed:0000000000000000 op_setspeed
     /tmp/cc0UaEmF.s:21522  .text.op_setspeed:000000000000001c $d
     /tmp/cc0UaEmF.s:21527  .text.op_prompt:0000000000000000 $t
     /tmp/cc0UaEmF.s:21535  .text.op_prompt:0000000000000000 op_prompt
     /tmp/cc0UaEmF.s:21607  .text.op_prompt:0000000000000028 $d
     /tmp/cc0UaEmF.s:21613  .text.XisInt:0000000000000000 $t
     /tmp/cc0UaEmF.s:21621  .text.XisInt:0000000000000000 XisInt
     /tmp/cc0UaEmF.s:21733  .text.XisInt:000000000000005c $d
     /tmp/cc0UaEmF.s:21738  .text.XisEvenOrOdd:0000000000000000 $t
     /tmp/cc0UaEmF.s:21746  .text.XisEvenOrOdd:0000000000000000 XisEvenOrOdd
     /tmp/cc0UaEmF.s:21860  .text.XisEvenOrOdd:0000000000000060 $d
     /tmp/cc0UaEmF.s:21865  .text.XisPrime:0000000000000000 $t
     /tmp/cc0UaEmF.s:21873  .text.XisPrime:0000000000000000 XisPrime
     /tmp/cc0UaEmF.s:22033  .text.XisPrime:000000000000007c $d
     /tmp/cc0UaEmF.s:22039  .text.isInfinite:0000000000000000 $t
     /tmp/cc0UaEmF.s:22047  .text.isInfinite:0000000000000000 isInfinite
     /tmp/cc0UaEmF.s:22099  .text.isInfinite:000000000000002c $d
     /tmp/cc0UaEmF.s:22104  .text.isNan:0000000000000000 $t
     /tmp/cc0UaEmF.s:22112  .text.isNan:0000000000000000 isNan
     /tmp/cc0UaEmF.s:22179  .text.isNan:000000000000003c $d
     /tmp/cc0UaEmF.s:22184  .text.isSpecial:0000000000000000 $t
ARM GAS  /tmp/cc0UaEmF.s 			page 884


     /tmp/cc0UaEmF.s:22192  .text.isSpecial:0000000000000000 isSpecial
     /tmp/cc0UaEmF.s:22259  .text.isSpecial:000000000000003c $d
     /tmp/cc0UaEmF.s:22264  .text.op_entryp:0000000000000000 $t
     /tmp/cc0UaEmF.s:22272  .text.op_entryp:0000000000000000 op_entryp
     /tmp/cc0UaEmF.s:22293  .text.op_entryp:0000000000000010 $d
     /tmp/cc0UaEmF.s:22298  .text.reg_decode:0000000000000000 $t
     /tmp/cc0UaEmF.s:22306  .text.reg_decode:0000000000000000 reg_decode
     /tmp/cc0UaEmF.s:23110  .text.reg_decode:0000000000000218 $d
     /tmp/cc0UaEmF.s:23124  .text.op_regcopy:0000000000000000 $t
     /tmp/cc0UaEmF.s:23132  .text.op_regcopy:0000000000000000 op_regcopy
     /tmp/cc0UaEmF.s:23235  .text.op_regcopy:0000000000000048 $d
     /tmp/cc0UaEmF.s:23240  .text.op_regswap:0000000000000000 $t
     /tmp/cc0UaEmF.s:23248  .text.op_regswap:0000000000000000 op_regswap
     /tmp/cc0UaEmF.s:23382  .text.op_regswap:000000000000006c $d
     /tmp/cc0UaEmF.s:23387  .text.op_regclr:0000000000000000 $t
     /tmp/cc0UaEmF.s:23395  .text.op_regclr:0000000000000000 op_regclr
     /tmp/cc0UaEmF.s:23476  .text.op_regclr:0000000000000044 $d
     /tmp/cc0UaEmF.s:23481  .text.op_regsort:0000000000000000 $t
     /tmp/cc0UaEmF.s:23489  .text.op_regsort:0000000000000000 op_regsort
     /tmp/cc0UaEmF.s:23773  .text.reset_volatile_state:0000000000000000 $t
     /tmp/cc0UaEmF.s:23781  .text.reset_volatile_state:0000000000000000 reset_volatile_state
     /tmp/cc0UaEmF.s:23805  .text.reset_volatile_state:0000000000000010 $d
     /tmp/cc0UaEmF.s:23810  .rodata.busy.str1.4:0000000000000000 $d
     /tmp/cc0UaEmF.s:23814  .text.busy:0000000000000000 $t
     /tmp/cc0UaEmF.s:23822  .text.busy:0000000000000000 busy
     /tmp/cc0UaEmF.s:23861  .text.busy:0000000000000018 $d
                            *COM*:0000000000000004 Busy
     /tmp/cc0UaEmF.s:23870  .text.intMonadic:0000000000000000 $t
     /tmp/cc0UaEmF.s:23878  .text.intMonadic:0000000000000000 intMonadic
     /tmp/cc0UaEmF.s:24107  .text.intMonadic:0000000000000084 $d
                            *COM*:0000000000000002 XeqOpCode
     /tmp/cc0UaEmF.s:24117  .text.intDyadic:0000000000000000 $t
     /tmp/cc0UaEmF.s:24125  .text.intDyadic:0000000000000000 intDyadic
     /tmp/cc0UaEmF.s:24409  .text.intDyadic:00000000000000c0 $d
     /tmp/cc0UaEmF.s:24419  .text.xeq_init_contexts:0000000000000000 $t
     /tmp/cc0UaEmF.s:24427  .text.xeq_init_contexts:0000000000000000 xeq_init_contexts
     /tmp/cc0UaEmF.s:24546  .text.xeq_init_contexts:0000000000000078 $d
                            *COM*:0000000000000004 ProgFree
     /tmp/cc0UaEmF.s:24559  .text.not_running:0000000000000000 $t
     /tmp/cc0UaEmF.s:24567  .text.not_running:0000000000000000 not_running
     /tmp/cc0UaEmF.s:24622  .text.not_running:000000000000001c $d
     /tmp/cc0UaEmF.s:24628  .text.set_running_off_sst:0000000000000000 $t
     /tmp/cc0UaEmF.s:24636  .text.set_running_off_sst:0000000000000000 set_running_off_sst
     /tmp/cc0UaEmF.s:24653  .text.set_running_off_sst:0000000000000008 $d
     /tmp/cc0UaEmF.s:24658  .text.set_running_on_sst:0000000000000000 $t
     /tmp/cc0UaEmF.s:24666  .text.set_running_on_sst:0000000000000000 set_running_on_sst
     /tmp/cc0UaEmF.s:24683  .text.set_running_on_sst:0000000000000008 $d
     /tmp/cc0UaEmF.s:24688  .text.set_running_off:0000000000000000 $t
     /tmp/cc0UaEmF.s:24696  .text.set_running_off:0000000000000000 set_running_off
     /tmp/cc0UaEmF.s:24740  .text.set_running_off:000000000000001c $d
     /tmp/cc0UaEmF.s:24746  .text.set_running_on:0000000000000000 $t
     /tmp/cc0UaEmF.s:24754  .text.set_running_on:0000000000000000 set_running_on
     /tmp/cc0UaEmF.s:24853  .text.set_running_on:0000000000000034 $d
     /tmp/cc0UaEmF.s:24861  .text.gsbgto:0000000000000000 $t
     /tmp/cc0UaEmF.s:24868  .text.gsbgto:0000000000000000 gsbgto
     /tmp/cc0UaEmF.s:25047  .text.gsbgto:000000000000008c $d
     /tmp/cc0UaEmF.s:25058  .text.cmdgtocommon:0000000000000000 $t
ARM GAS  /tmp/cc0UaEmF.s 			page 885


     /tmp/cc0UaEmF.s:25066  .text.cmdgtocommon:0000000000000000 cmdgtocommon
     /tmp/cc0UaEmF.s:25152  .text.cmdgtocommon:000000000000002c $d
     /tmp/cc0UaEmF.s:25158  .text.cmdgto:0000000000000000 $t
     /tmp/cc0UaEmF.s:25166  .text.cmdgto:0000000000000000 cmdgto
     /tmp/cc0UaEmF.s:25247  .text.cmdgto:000000000000003c $d
     /tmp/cc0UaEmF.s:25255  .text.branchtoalpha:0000000000000000 $t
     /tmp/cc0UaEmF.s:25262  .text.branchtoalpha:0000000000000000 branchtoalpha
     /tmp/cc0UaEmF.s:25319  .text.cmdalphagto:0000000000000000 $t
     /tmp/cc0UaEmF.s:25327  .text.cmdalphagto:0000000000000000 cmdalphagto
     /tmp/cc0UaEmF.s:25379  .text.op_gtoalpha:0000000000000000 $t
     /tmp/cc0UaEmF.s:25387  .text.op_gtoalpha:0000000000000000 op_gtoalpha
     /tmp/cc0UaEmF.s:25451  .text.op_gtoalpha:0000000000000030 $d
     /tmp/cc0UaEmF.s:25456  .text.cmdskip:0000000000000000 $t
     /tmp/cc0UaEmF.s:25464  .text.cmdskip:0000000000000000 cmdskip
     /tmp/cc0UaEmF.s:25647  .text.cmdskip:0000000000000078 $d
     /tmp/cc0UaEmF.s:25655  .text.cmdback:0000000000000000 $t
     /tmp/cc0UaEmF.s:25663  .text.cmdback:0000000000000000 cmdback
     /tmp/cc0UaEmF.s:25816  .text.cmdback:0000000000000064 $d
     /tmp/cc0UaEmF.s:25824  .text.usergsb_common:0000000000000000 $t
     /tmp/cc0UaEmF.s:25831  .text.usergsb_common:0000000000000000 usergsb_common
     /tmp/cc0UaEmF.s:25942  .text.usergsb_common:0000000000000078 $d
     /tmp/cc0UaEmF.s:25951  .text.do_usergsb:0000000000000000 $t
     /tmp/cc0UaEmF.s:25959  .text.do_usergsb:0000000000000000 do_usergsb
     /tmp/cc0UaEmF.s:25992  .text.do_usergsb:0000000000000014 $d
     /tmp/cc0UaEmF.s:25997  .text.cmdmultigto:0000000000000000 $t
     /tmp/cc0UaEmF.s:26005  .text.cmdmultigto:0000000000000000 cmdmultigto
     /tmp/cc0UaEmF.s:26109  .text.cmdmultigto:000000000000004c $d
     /tmp/cc0UaEmF.s:26115  .text.store_a_to_d:0000000000000000 $t
     /tmp/cc0UaEmF.s:26123  .text.store_a_to_d:0000000000000000 store_a_to_d
     /tmp/cc0UaEmF.s:26171  .text.store_a_to_d:0000000000000020 $d
     /tmp/cc0UaEmF.s:26176  .text.cmdlocr:0000000000000000 $t
     /tmp/cc0UaEmF.s:26184  .text.cmdlocr:0000000000000000 cmdlocr
     /tmp/cc0UaEmF.s:26520  .text.cmdlocr:000000000000015c $d
     /tmp/cc0UaEmF.s:26528  .text.cmdxout:0000000000000000 $t
     /tmp/cc0UaEmF.s:26536  .text.cmdxout:0000000000000000 cmdxout
     /tmp/cc0UaEmF.s:27058  .text.cmdxout:00000000000001e4 $d
     /tmp/cc0UaEmF.s:27073  .text.cmdconverged:0000000000000000 $t
     /tmp/cc0UaEmF.s:27081  .text.cmdconverged:0000000000000000 cmdconverged
     /tmp/cc0UaEmF.s:27310  .text.cmdconverged:00000000000000e0 $d
     /tmp/cc0UaEmF.s:27320  .text.cmdshuffle:0000000000000000 $t
     /tmp/cc0UaEmF.s:27328  .text.cmdshuffle:0000000000000000 cmdshuffle
     /tmp/cc0UaEmF.s:27561  .text.cmdshuffle:0000000000000084 $d
     /tmp/cc0UaEmF.s:27567  .text.cmdmode:0000000000000000 $t
     /tmp/cc0UaEmF.s:27575  .text.cmdmode:0000000000000000 cmdmode
     /tmp/cc0UaEmF.s:27656  .text.cmdmode:0000000000000050 $d
     /tmp/cc0UaEmF.s:27661  .text.cmdlpop:0000000000000000 $t
     /tmp/cc0UaEmF.s:27669  .text.cmdlpop:0000000000000000 cmdlpop
     /tmp/cc0UaEmF.s:27741  .text.cmdlpop:0000000000000034 $d
     /tmp/cc0UaEmF.s:27747  .text.cmdregs:0000000000000000 $t
     /tmp/cc0UaEmF.s:27755  .text.cmdregs:0000000000000000 cmdregs
     /tmp/cc0UaEmF.s:27935  .text.cmdregs:00000000000000ac $d
     /tmp/cc0UaEmF.s:27942  .text.op_double:0000000000000000 $t
     /tmp/cc0UaEmF.s:27950  .text.op_double:0000000000000000 op_double
     /tmp/cc0UaEmF.s:28250  .text.op_double:000000000000011c $d
     /tmp/cc0UaEmF.s:28257  .text.cmdrestm:0000000000000000 $t
     /tmp/cc0UaEmF.s:28265  .text.cmdrestm:0000000000000000 cmdrestm
     /tmp/cc0UaEmF.s:28459  .text.cmdrestm:00000000000000a8 $d
ARM GAS  /tmp/cc0UaEmF.s 			page 886


     /tmp/cc0UaEmF.s:28464  .text.cmdxin:0000000000000000 $t
     /tmp/cc0UaEmF.s:28472  .text.cmdxin:0000000000000000 cmdxin
     /tmp/cc0UaEmF.s:28898  .text.cmdxin:00000000000001b0 $d
     /tmp/cc0UaEmF.s:28911  .rodata.xeq.str1.4:0000000000000000 $d
     /tmp/cc0UaEmF.s:28915  .text.xeq:0000000000000000 $t
     /tmp/cc0UaEmF.s:28923  .text.xeq:0000000000000000 xeq
     /tmp/cc0UaEmF.s:29051  .text.xeq:0000000000000078 $d
     /tmp/cc0UaEmF.s:29058  .text.xeq:0000000000000086 $t
     /tmp/cc0UaEmF.s:29845  .text.xeq:00000000000002f8 $d
     /tmp/cc0UaEmF.s:29866  .text.xeq:0000000000000340 $t
     /tmp/cc0UaEmF.s:33339  .text.dispatch_xrom:0000000000000000 dispatch_xrom
     /tmp/cc0UaEmF.s:30181  .text.xeq:0000000000000426 $d
     /tmp/cc0UaEmF.s:30225  .text.xeq:000000000000047c $t
     /tmp/cc0UaEmF.s:30936  .text.xeq:0000000000000608 $d
     /tmp/cc0UaEmF.s:30949  .text.xeq:0000000000000624 $t
     /tmp/cc0UaEmF.s:31759  .text.xeq:00000000000008d0 $d
     /tmp/cc0UaEmF.s:31773  .text.xeq:0000000000000900 $t
     /tmp/cc0UaEmF.s:32717  .text.xeq:0000000000000be8 $d
     /tmp/cc0UaEmF.s:32735  .text.xeq:0000000000000c00 $t
     /tmp/cc0UaEmF.s:33067  .text.xeq:0000000000000d28 $d
     /tmp/cc0UaEmF.s:33076  .text.xeq_single:0000000000000000 $t
     /tmp/cc0UaEmF.s:33083  .text.xeq_single:0000000000000000 xeq_single
     /tmp/cc0UaEmF.s:33122  .text.xeq_single:0000000000000020 $d
     /tmp/cc0UaEmF.s:33127  .text.xeq_xrom2:0000000000000000 $t
     /tmp/cc0UaEmF.s:33134  .text.xeq_xrom2:0000000000000000 xeq_xrom2
     /tmp/cc0UaEmF.s:33282  .text.xeq_xrom2:0000000000000070 $d
     /tmp/cc0UaEmF.s:33296  .text.xeq_xrom:0000000000000000 $t
     /tmp/cc0UaEmF.s:33304  .text.xeq_xrom:0000000000000000 xeq_xrom
     /tmp/cc0UaEmF.s:33327  .text.xeq_xrom:0000000000000010 $d
     /tmp/cc0UaEmF.s:33332  .text.dispatch_xrom:0000000000000000 $t
     /tmp/cc0UaEmF.s:33470  .text.dispatch_xrom:000000000000005c $d
     /tmp/cc0UaEmF.s:33480  .text.op_rs:0000000000000000 $t
     /tmp/cc0UaEmF.s:33488  .text.op_rs:0000000000000000 op_rs
     /tmp/cc0UaEmF.s:33632  .text.op_rs:0000000000000078 $d
     /tmp/cc0UaEmF.s:33641  .text.xeqprog:0000000000000000 $t
     /tmp/cc0UaEmF.s:33649  .text.xeqprog:0000000000000000 xeqprog
     /tmp/cc0UaEmF.s:33763  .text.xeqprog:0000000000000064 $d
                            *COM*:0000000000000004 JustStopped
     /tmp/cc0UaEmF.s:33771  .text.xeq_sst_bst:0000000000000000 $t
     /tmp/cc0UaEmF.s:33779  .text.xeq_sst_bst:0000000000000000 xeq_sst_bst
     /tmp/cc0UaEmF.s:33992  .text.xeq_sst_bst:000000000000009c $d
     /tmp/cc0UaEmF.s:34002  .text.init_34s:0000000000000000 $t
     /tmp/cc0UaEmF.s:34010  .text.init_34s:0000000000000000 init_34s
     /tmp/cc0UaEmF.s:34062  .text.init_34s:0000000000000028 $d
     /tmp/cc0UaEmF.s:34067  .rodata.paste_raw_x.str1.4:0000000000000000 $d
     /tmp/cc0UaEmF.s:34071  .text.paste_raw_x:0000000000000000 $t
     /tmp/cc0UaEmF.s:34079  .text.paste_raw_x:0000000000000000 paste_raw_x
     /tmp/cc0UaEmF.s:34447  .text.paste_raw_x:00000000000000f4 $d
     /tmp/cc0UaEmF.s:34460  .rodata.fill_buffer_from_raw_x.str1.4:0000000000000000 $d
     /tmp/cc0UaEmF.s:34464  .text.fill_buffer_from_raw_x:0000000000000000 $t
     /tmp/cc0UaEmF.s:34472  .text.fill_buffer_from_raw_x:0000000000000000 fill_buffer_from_raw_x
     /tmp/cc0UaEmF.s:34729  .text.fill_buffer_from_raw_x:00000000000000c4 $d
                            *COM*:0000000000000004 RectPolConv
     /tmp/cc0UaEmF.s:34817  .rodata.xrom_targets:0000000000000000 xrom_targets
     /tmp/cc0UaEmF.s:34757  .rodata:0000000000000000 $d
     /tmp/cc0UaEmF.s:34765  .bss.result.11366:0000000000000000 $d
     /tmp/cc0UaEmF.s:34769  .bss.result.11366:0000000000000000 result.11366
ARM GAS  /tmp/cc0UaEmF.s 			page 887


     /tmp/cc0UaEmF.s:34772  .data.RegionTab:0000000000000000 $d
     /tmp/cc0UaEmF.s:34776  .data.RegionTab:0000000000000000 RegionTab
     /tmp/cc0UaEmF.s:34782  .rodata.StackRegMask:0000000000000000 $d
     /tmp/cc0UaEmF.s:34786  .rodata.StackRegMask:0000000000000000 StackRegMask
     /tmp/cc0UaEmF.s:34790  .rodata.convergence_tolerances:0000000000000000 $d
     /tmp/cc0UaEmF.s:34794  .rodata.convergence_tolerances:0000000000000000 convergence_tolerances
     /tmp/cc0UaEmF.s:34799  .rodata.modes.11109:0000000000000000 $d
     /tmp/cc0UaEmF.s:34803  .rodata.modes.11109:0000000000000000 modes.11109
     /tmp/cc0UaEmF.s:34806  .rodata.modes.11576:0000000000000000 $d
     /tmp/cc0UaEmF.s:34810  .rodata.modes.11576:0000000000000000 modes.11576
     /tmp/cc0UaEmF.s:34813  .rodata.xrom_targets:0000000000000000 $d
     /tmp/cc0UaEmF.s:17998  .text.do_tst:000000000000006b $d
     /tmp/cc0UaEmF.s:17998  .text.do_tst:000000000000006c $t
     /tmp/cc0UaEmF.s:19702  .text.cmdflag:0000000000000033 $d
     /tmp/cc0UaEmF.s:19702  .text.cmdflag:0000000000000034 $t
     /tmp/cc0UaEmF.s:20896  .text.cmddisp:0000000000000039 $d
     /tmp/cc0UaEmF.s:20896  .text.cmddisp:000000000000003a $t

UNDEFINED SYMBOLS
StateWhileOn
main_ram
xrom_size
XromParams
XromLocal
xset
decNumberRoundDigits
decNumberTrunc
dn_eq
set_carry
dn_to_ull
dn_abs
check_overflow
set_overflow
build_value
dn_lt
const_2pow64
xcopy
argcmds
display
shutdown
library_ram
backup_ram
scopy
num_arg_0
prt
scopy_char
DispMsg
dot
error_message
JustDisplayed
ShowRPN
decContextDefault
decimal64FromNumber
decimal128FromNumber
decimal64ToNumber
decimal128ToNumber
int_base
ARM GAS  /tmp/cc0UaEmF.s 			page 888


cnsts
cnsts_d128
cnsts_d64
dn_max
dn_add
dn_subtract
dn_multiply
dn_divide
dn_min
cmplxDivide
cmplxAdd
cmplxSubtract
cmplxMultiply
decNumberNormalize
decNumberRoundDecimals
intMax
intAdd
intSubtract
intMultiply
intDivide
intMin
extract_value
dn_dec
dn_eq0
dn_inc
row_column_to_keycode
ullint_to_dn
dn_minus
find_char
decNumberFromString
decNumberCopy
decNumberZero
word_size
int_mode
dn_mulpow10
put_key
const_9on5
const_32
decNumberPow10
const_0_05
dn_log10
const_20
cnsts_conv
keycode_to_row_column
dn_compare
decNumberRnd
dn_mul100
dn_le0
dn_lt0
dn_1
finish_display
mask_value
int_to_dn
decNumber2Fraction
GoFast
alpha_view_common
is_int
ARM GAS  /tmp/cc0UaEmF.s 			page 889


is_even
isPrime
dn_to_int
message
monfuncs
xrom
dyfuncs
SizeStatRegs
alpha_rcl_s
XromA2D
relative_error
cmplxR
absolute_error
const_1e_14
const_1e_32
const_1e_24
const_NaN
sprintf
multicmds
niladics
trifuncs
const_1
const_0
sigma_minus
sigma_val
intChs
sigma_plus
set_NaN
finish_RPN
is_key_pressed
clr_dot
set_dot
OpCode
checksum_ram
init_state
reset
strdup
strtok
strtoull
strchr
free
__aeabi_uldivmod
decNumberToString
